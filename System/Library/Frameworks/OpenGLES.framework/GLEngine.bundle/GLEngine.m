uint64_t gliInitializeLibrary(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, int a5)
{
  uint64_t result;

  gfxInitializeLibrary();
  result = ShInitializeLibrary();
  gle_io_data = a4;
  gle_lib_init = a5;
  return result;
}

uint64_t gliGetVersion(_DWORD *a1, _DWORD *a2, _DWORD *a3)
{
  *a1 = 2;
  *a2 = 3;
  *a3 = 0x20000;
  os_unfair_lock_lock(&gliGetVersion_gli_initialize_lock);
  if (gliGetVersion_gli_initialized)
  {
    uint64_t v3 = 1;
  }
  else
  {
    glePreInitGlobals();
    cvmPreInit();
    if (gfxGetPlugins())
    {
      uint64_t v3 = 1;
      gliGetVersion_gli_initialized = 1;
    }
    else
    {
      uint64_t v3 = 0;
    }
  }
  os_unfair_lock_unlock(&gliGetVersion_gli_initialize_lock);
  return v3;
}

double glePreInitGlobals()
{
  uint64_t v0 = 0;
  gle_globals_struct[0] = (uint64_t)gleFeedbackPointsPtr;
  qword_26AF25BC8 = (uint64_t)gleFeedbackPointsPtr;
  qword_26AF25B90 = (uint64_t)gleSelectPointsPtr;
  qword_26AF25BD0 = (uint64_t)gleSelectPointsPtr;
  qword_26AF25B98 = (uint64_t)gleFeedbackLinesPtr;
  qword_26AF25BD8 = (uint64_t)gleFeedbackLinesPtr;
  qword_26AF25BA0 = (uint64_t)gleSelectLinesPtr;
  qword_26AF25BE0 = (uint64_t)gleSelectLinesPtr;
  qword_26AF25BA8 = (uint64_t)gleFeedbackPolygonPtr;
  qword_26AF25BE8 = (uint64_t)gleFeedbackPolygonPtr;
  qword_26AF25BB0 = (uint64_t)gleSelectPolygonPtr;
  qword_26AF25BF0 = (uint64_t)gleSelectPolygonPtr;
  qword_26AF25BB8 = (uint64_t)glePopMaterials;
  qword_26AF25BF8 = (uint64_t)glePopMaterials;
  qword_26AF25BC0 = (uint64_t)glePopAndCopyMaterials;
  qword_26AF25C00 = (uint64_t)glePopAndCopyMaterials;
  int32x4_t v1 = (int32x4_t)xmmword_227DC1FD0;
  float32x4_t v2 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v3.i64[0] = 0x400000004;
  v3.i64[1] = 0x400000004;
  do
  {
    *(float32x4_t *)&gle_globals_struct[v0 + 16] = vmulq_f32(vcvtq_f32_s32(v1), v2);
    int32x4_t v1 = vaddq_s32(v1, v3);
    v0 += 2;
  }
  while (v0 != 128);
  qword_26AF26008 = 0x101010403040304;
  *(void *)&long long v4 = 0x404040404040404;
  *((void *)&v4 + 1) = 0x404040404040404;
  unk_26AF26020 = v4;
  unk_26AF26010 = v4;
  byte_26AF26029 = 4;
  double result = 7.74860419e-304;
  qword_26AF26030 = 0x101010101010101;
  return result;
}

uint64_t gliChoosePixelFormat(void *a1, uint64_t a2)
{
  if (!a1) {
    return 10014;
  }
  *a1 = 0;
  if (!a2) {
    return 10014;
  }
  uint64_t Plugins = gfxGetPlugins();
  if (!Plugins) {
    return 10015;
  }
  uint64_t v5 = Plugins;
  uint64_t v13 = 0;
  v6 = a1;
  do
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t *, uint64_t))(v5 + 1128))(&v13, a2);
    uint64_t v8 = v7;
    if (v13)
    {
      void *v6 = v13;
      v6 = (void *)v13;
      for (int i = *(_DWORD *)(v13 + 8); ; int i = *(_DWORD *)(v10 + 8))
      {
        *((_DWORD *)v6 + 2) = i | 0x20000;
        uint64_t v10 = *v6;
        if (!*v6) {
          break;
        }
        v6 = (void *)*v6;
        uint64_t v13 = v10;
      }
    }
    uint64_t v5 = *(void *)v5;
    if (v5) {
      BOOL v11 = v7 == 0;
    }
    else {
      BOOL v11 = 0;
    }
  }
  while (v11);
  if (v7 && *a1) {
    j__gliDestroyPixelFormat();
  }
  return v8;
}

uint64_t gliDestroyPixelFormat(uint64_t *a1)
{
  if (!a1) {
    return 10014;
  }
  int32x4_t v1 = a1;
  LODWORD(v2) = 0;
  do
  {
    int32x4_t v3 = v1;
    int v4 = *((_DWORD *)v1 + 2);
    do
      int32x4_t v1 = (uint64_t *)*v1;
    while (v1 && ((v4 ^ *((_DWORD *)v1 + 2)) & 0xFF00) == 0);
    uint64_t PluginWithDriverID = gfxGetPluginWithDriverID();
    if (PluginWithDriverID) {
      unsigned int v6 = (*(uint64_t (**)(uint64_t *))(PluginWithDriverID + 1136))(v3);
    }
    else {
      unsigned int v6 = 10015;
    }
    if (v2) {
      BOOL v7 = 1;
    }
    else {
      BOOL v7 = v6 == 0;
    }
    if (v7) {
      uint64_t v2 = v2;
    }
    else {
      uint64_t v2 = v6;
    }
  }
  while (v1);
  return v2;
}

uint64_t gliCreateContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3 || *(_DWORD *)(a3 + 29792) == 878944803) {
    j__gliCreateContextWithShared();
  }
  return 10009;
}

uint64_t gliCreateContextWithShared(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 10014;
  }
  *a1 = 0;
  if ((a6 & 0x20) != 0) {
    int v8 = 3;
  }
  else {
    int v8 = (a6 >> 3) & 2;
  }
  if ((a6 & 0x40) != 0) {
    int v9 = 4;
  }
  else {
    int v9 = v8;
  }
  if (a2)
  {
    uint64_t SharedState = a3;
    unint64_t v13 = 0;
    int v14 = 0;
    int v15 = 255;
    v16 = a2;
    while (1)
    {
      int v17 = *((_DWORD *)v16 + 2);
      if ((v17 & 0xFF0000) != 0x20000 || v13 > 0xB) {
        break;
      }
      if ((*((_DWORD *)v16 + 3) & 0x40) == 0) {
        int v14 = 1;
      }
      if ((v16[1] & 0x7F00) == 0x400) {
        int v15 = v13;
      }
      v75[v13++] = v17;
      v16 = (uint64_t *)*v16;
      if (!v16)
      {
        if ((a6 & 1) != 0 && v14)
        {
          if (v15 == 255)
          {
            if (v13 > 0xB) {
              return 10002;
            }
            v75[v13] = *MEMORY[0x263F14718];
            LOBYTE(v15) = v13;
            LODWORD(v13) = v13 + 1;
          }
        }
        else
        {
          LOBYTE(v15) = -1;
        }
        if (a3)
        {
          if (!gfxCompareSharedState()) {
            return 10009;
          }
        }
        else
        {
          uint64_t SharedState = gfxCreateSharedState();
          if (!SharedState) {
            return 10002;
          }
        }
        v68 = a1;
        gfxRetainSharedStateAndHash();
        v20 = (char *)malloc_type_calloc(1uLL, (1672 * v13 + 32512), 0x2BF3136CuLL);
        if (!v20) {
          abort();
        }
        uint64_t v21 = (uint64_t)v20;
        v22 = (unsigned __int8 *)(v20 + 32496);
        __CFSetLastAllocationEventName();
        *(_DWORD *)(v21 + 2272) = 65540;
        char v69 = a6;
        LODWORD(v23) = a6 >> 26;
        if (a6 >> 26 >= v13) {
          uint64_t v23 = 0;
        }
        else {
          uint64_t v23 = v23;
        }
        v22[2] = v23;
        v22[1] = v15;
        v22[3] = v23;
        uint64_t v70 = v23;
        v71 = v22;
        v22[4] = v23;
        unsigned __int8 *v22 = v13;
        *(void *)(v21 + 28976) = a4;
        *(void *)(v21 + 28984) = a5;
        v22[5] = v9;
        uint64_t v24 = 0;
        uint64_t v72 = SharedState;
        uint64_t v25 = SharedState + 352;
        uint64_t v26 = v21 + 32512;
        uint64_t v73 = getpagesize();
        unint64_t v27 = 1;
        v28 = a2;
        v29 = a2;
        while (1)
        {
          v30 = v29 ? v29 : v28;
          uint64_t v31 = v26 + v24;
          *(_DWORD *)(v31 + 1664) = *(_DWORD *)(v25 + 24);
          uint64_t v32 = v21 + v24;
          long long v33 = *(_OWORD *)(v25 + 8);
          *(_OWORD *)(v32 + 34160) = v33;
          *(void *)(v32 + 32520) = *(void *)v25;
          *(unsigned char *)(v31 + 191) = 8;
          *(_DWORD *)(v31 + 636) = v9;
          *(_DWORD *)(v31 + 600) = 134283263;
          *(unsigned char *)(v31 + 648) = -113;
          *(unsigned char *)(v31 + 652) = -113;
          *(void *)(v32 + 32664) = 0x338000083F800000;
          *(_WORD *)(v31 + 394) = 1;
          *(unsigned char *)(v31 + 536) = 1;
          *(unsigned char *)(v31 + 41) = *(unsigned char *)(v26 + v24 + 41) & 0x80;
          *(void *)(v31 + 656) = v73;
          uint64_t v34 = (*(uint64_t (**)(void))(v33 + 1160))();
          if (v34) {
            break;
          }
          if ((v30[3] & 0x3FFFFFFC) != 0) {
            *(_DWORD *)(v26 + v24 + 68) = 538976288;
          }
          unint64_t v35 = *(void *)(v31 + 656);
          if (v35 >= 0x4000) {
            unint64_t v35 = 0x4000;
          }
          *(void *)(v31 + 656) = v35;
          v28 = a2;
          if ((v9 - 2) < 2)
          {
            uint64_t v36 = v26 + v24;
            *(int32x2_t *)(v26 + v24 + 20) = vmin_s32(*(int32x2_t *)(v26 + v24 + 20), (int32x2_t)0x100000001000);
            unsigned int v37 = *(unsigned __int16 *)(v26 + v24 + 176);
            if (v37 >= 0x1000) {
              LOWORD(v37) = 4096;
            }
            *(_WORD *)(v36 + 176) = v37;
            unsigned int v38 = *(unsigned __int16 *)(v36 + 182);
            if (v38 >= 0x1000) {
              LOWORD(v38) = 4096;
            }
            *(_WORD *)(v36 + 182) = v38;
            unsigned int v39 = *(unsigned __int16 *)(v36 + 184);
            if (v39 >= 0x1000) {
              LOWORD(v39) = 4096;
            }
            *(_WORD *)(v36 + 184) = v39;
            unsigned int v40 = *(unsigned __int8 *)(v36 + 186);
            if (v40 >= 4) {
              LOBYTE(v40) = 4;
            }
            *(unsigned char *)(v36 + 186) = v40;
            unsigned int v41 = *(unsigned __int16 *)(v36 + 170);
            if (v41 >= 8) {
              LOWORD(v41) = 8;
            }
            *(_WORD *)(v36 + 170) = v41;
            unsigned int v42 = *(unsigned __int8 *)(v31 + 191);
            if (v42 >= 8) {
              LOBYTE(v42) = 8;
            }
            *(unsigned char *)(v31 + 191) = v42;
            unsigned int v43 = *(unsigned __int16 *)(v36 + 172);
            if (v43 >= 8) {
              LOWORD(v43) = 8;
            }
            *(_WORD *)(v36 + 172) = v43;
            unsigned int v44 = *(_DWORD *)(v36 + 360);
            if (v44 >= 0x200) {
              unsigned int v44 = 512;
            }
            *(_DWORD *)(v36 + 360) = v44;
            unsigned int v45 = *(_DWORD *)(v36 + 464);
            if (v45 >= 0x20) {
              unsigned int v45 = 32;
            }
            *(_DWORD *)(v36 + 464) = v45;
            unsigned int v46 = *(unsigned __int16 *)(v36 + 348);
            if (v46 >= 0x100) {
              LOWORD(v46) = 256;
            }
            *(_WORD *)(v36 + 348) = v46;
            *(unsigned char *)(v36 + 38) = *(unsigned char *)(v36 + 38) != 0;
            *(unsigned char *)(v36 + 37) = *(unsigned char *)(v36 + 37) != 0;
          }
          else if (!v9)
          {
            int v47 = 16;
            __int16 v48 = 16;
            uint64_t v49 = v26 + v24;
            if (*(unsigned __int16 *)(v26 + v24 + 170) <= 0x10u) {
              __int16 v48 = *(_WORD *)(v26 + v24 + 170);
            }
            *(_WORD *)(v49 + 170) = v48;
            unsigned int v50 = *(unsigned __int8 *)(v31 + 191);
            if (v50 > 0x10) {
              LOBYTE(v50) = 16;
            }
            *(unsigned char *)(v31 + 191) = v50;
            unsigned int v51 = *(unsigned __int16 *)(v49 + 172);
            if (v51 > 0x10) {
              LOWORD(v51) = 16;
            }
            *(_WORD *)(v49 + 172) = v51;
            unsigned int v52 = *(_DWORD *)(v49 + 372);
            if (v52 >= 0x10) {
              unsigned int v52 = 16;
            }
            *(_DWORD *)(v49 + 372) = v52;
            unsigned int v53 = *(_DWORD *)(v49 + 396);
            if (v53 >= 0x10) {
              unsigned int v53 = 16;
            }
            *(_DWORD *)(v49 + 396) = v53;
            if (*(_DWORD *)(v49 + 420) < 0x10u) {
              int v47 = *(_DWORD *)(v49 + 420);
            }
            *(_DWORD *)(v49 + 420) = v47;
          }
          v29 = (uint64_t *)*v30;
          ++v27;
          v24 += 1672;
          v25 += 32;
          if (1672 * v13 == v24) {
            goto LABEL_85;
          }
        }
        if (1672 * v13 != v24)
        {
          uint64_t v19 = v34;
          if ((int)v27 - 1 >= 1)
          {
            v65 = (void *)(v32 + 30840);
            do
            {
              (*(void (**)(void))(v65[206] + 1176))(*v65);
              --v27;
              v65 -= 209;
            }
            while (v27 > 1);
          }
          gfxReleaseSharedStateAndHash();
          free((void *)v21);
          return v19;
        }
LABEL_85:
        uint64_t v55 = v21 + 1672 * v70;
        uint64_t v56 = *(void *)(v55 + 32512);
        *(void *)(v21 + 29016) = v56;
        uint64_t v57 = *(void *)(v72 + 32 * v70 + 352);
        uint64_t v58 = v55 + 32512;
        *(void *)(v21 + 29024) = v57;
        v55 += 32528;
        *(void *)(v21 + 29032) = v55;
        uint64_t v59 = *(void *)(v58 + 1648) + 1056;
        *(void *)(v21 + 29448) = v59;
        uint64_t v60 = *(void *)(v58 + 1656) + 32;
        *(void *)(v21 + 29456) = v60;
        *(void *)(v21 + 29488) = v21 + 29040;
        *(void *)(v21 + 29464) = v56;
        *(void *)(v21 + 29472) = v57;
        *(void *)(v21 + 29480) = v55;
        *(void *)(v21 + 29496) = v59;
        *(void *)(v21 + 29504) = v60;
        *(void *)(v21 + 19296) = v72;
        gfxSetShaderDetachFunc();
        gleSetSharedFreeFuncs();
        os_unfair_lock_lock((os_unfair_lock_t)&gl_list_lock);
        uint64_t v61 = v71[5];
        if (!gl_list[v61]) {
          gleCreateEnableHashTable(v61);
        }
        *(void *)(v21 + 27648) = 0;
        *(void *)(v21 + 27752) = 0;
        *(void *)(v21 + 27744) = 0;
        uint64_t v19 = gleInitializeContext(v21);
        if (!v19)
        {
          if ((v69 & 2) == 0 || !gleCreateCmdBufMachine(v21))
          {
            uint64_t v66 = v71[5];
            *(void *)(v21 + 29512) = gl_list[v66];
            gl_list[v66] = v21;
            os_unfair_lock_unlock((os_unfair_lock_t)&gl_list_lock);
            for (uint64_t i = 3630; i != 3655; ++i)
              *(void *)(v21 + 8 * i) = 8;
            gliInitDispatchTable(v21);
            uint64_t v19 = 0;
            uint64_t *v68 = v21;
            return v19;
          }
          gleTerminateContext(v21);
          uint64_t v19 = 10019;
        }
        if (*v71)
        {
          unint64_t v62 = 0;
          v63 = (void *)(v21 + 32512);
          do
          {
            (*(void (**)(void))(v63[206] + 1176))(*v63);
            ++v62;
            v63 += 209;
          }
          while (v62 < *v71);
        }
        gfxReleaseSharedStateAndHash();
        uint64_t v64 = v71[5];
        if (!gl_list[v64]) {
          gleDestroyEnableHashTable(v64);
        }
        free((void *)v21);
        os_unfair_lock_unlock((os_unfair_lock_t)&gl_list_lock);
        return v19;
      }
    }
  }
  return 10002;
}

void gleCreateEnableHashTable(int a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)&gle_enable_hash_table_lock);
  if (!gle_enable_hash_table[a1])
  {
    uint64_t v2 = (char *)malloc_type_malloc(0x2000uLL, 0x577B5147uLL);
    if (!v2) {
      abort();
    }
    int32x4_t v3 = v2;
    for (uint64_t i = 0; i != 0x2000; i += 32)
    {
      uint64_t v5 = &v2[i];
      *(_DWORD *)uint64_t v5 = 0;
      *((void *)v5 + 1) = gleSetEnable_Error;
      *((void *)v5 + 2) = 0;
    }
    if (a1 != 2)
    {
      if (a1 == 3)
      {
        gleFillEnableHashTableEntriesES2(v2);
      }
      else if (a1 == 4)
      {
        gleFillEnableHashTableEntriesES2(v2);
        gleAddEnableHashFunc(v3, 35977, (uint64_t)gleSetEnable_RASTERIZER_DISCARD_EXT);
        unsigned int v6 = gleSetEnable_PRIMITIVE_RESTART;
        BOOL v7 = v3;
        int v8 = 36201;
LABEL_11:
        gleAddEnableHashFunc(v7, v8, (uint64_t)v6);
      }
      gle_enable_hash_table[a1] = v3;
      goto LABEL_13;
    }
    gleAddEnableHashFunc(v2, 34913, (uint64_t)gleSetEnable_POINT_SPRITE_ARB);
    gleAddEnableHashFunc(v3, 2912, (uint64_t)gleSetEnable_FOG);
    gleAddEnableHashFunc(v3, 2896, (uint64_t)gleSetEnable_LIGHTING);
    gleAddEnableHashFunc(v3, 3553, (uint64_t)gleSetEnable_TEXTURE_2D);
    gleAddEnableHashFunc(v3, 2884, (uint64_t)gleSetEnable_CULL_FACE);
    gleAddEnableHashFunc(v3, 3042, (uint64_t)gleSetEnable_BLEND);
    gleAddEnableHashFunc(v3, 3058, (uint64_t)gleSetEnable_COLOR_LOGIC_OP);
    gleAddEnableHashFunc(v3, 3024, (uint64_t)gleSetEnable_DITHER);
    gleAddEnableHashFunc(v3, 2960, (uint64_t)gleSetEnable_STENCIL_TEST);
    gleAddEnableHashFunc(v3, 2929, (uint64_t)gleSetEnable_DEPTH_TEST);
    gleAddEnableHashFunc(v3, 12288, (uint64_t)gleSetEnable_CLIP_PLANE);
    gleAddEnableHashFunc(v3, 12289, (uint64_t)gleSetEnable_CLIP_PLANE);
    gleAddEnableHashFunc(v3, 12290, (uint64_t)gleSetEnable_CLIP_PLANE);
    gleAddEnableHashFunc(v3, 12291, (uint64_t)gleSetEnable_CLIP_PLANE);
    gleAddEnableHashFunc(v3, 12292, (uint64_t)gleSetEnable_CLIP_PLANE);
    gleAddEnableHashFunc(v3, 12293, (uint64_t)gleSetEnable_CLIP_PLANE);
    gleAddEnableHashFunc(v3, 0x4000, (uint64_t)gleSetEnable_LIGHT);
    gleAddEnableHashFunc(v3, 16385, (uint64_t)gleSetEnable_LIGHT);
    gleAddEnableHashFunc(v3, 16386, (uint64_t)gleSetEnable_LIGHT);
    gleAddEnableHashFunc(v3, 16387, (uint64_t)gleSetEnable_LIGHT);
    gleAddEnableHashFunc(v3, 16388, (uint64_t)gleSetEnable_LIGHT);
    gleAddEnableHashFunc(v3, 16389, (uint64_t)gleSetEnable_LIGHT);
    gleAddEnableHashFunc(v3, 16390, (uint64_t)gleSetEnable_LIGHT);
    gleAddEnableHashFunc(v3, 16391, (uint64_t)gleSetEnable_LIGHT);
    gleAddEnableHashFunc(v3, 2832, (uint64_t)gleSetEnable_POINT_SMOOTH);
    gleAddEnableHashFunc(v3, 2848, (uint64_t)gleSetEnable_LINE_SMOOTH);
    gleAddEnableHashFunc(v3, 3089, (uint64_t)gleSetEnable_SCISSOR_TEST);
    gleAddEnableHashFunc(v3, 2903, (uint64_t)gleSetEnable_COLOR_MATERIAL);
    gleAddEnableHashFunc(v3, 2977, (uint64_t)gleSetEnable_NORMALIZE);
    gleAddEnableHashFunc(v3, 32826, (uint64_t)gleSetEnable_RESCALE_NORMAL_EXT);
    gleAddEnableHashFunc(v3, 32823, (uint64_t)gleSetEnable_POLYGON_OFFSET_FILL);
    gleAddEnableHashFunc(v3, 32925, (uint64_t)gleSetEnable_MULTISAMPLE);
    gleAddEnableHashFunc(v3, 32926, (uint64_t)gleSetEnable_SAMPLE_ALPHA_TO_COVERAGE);
    gleAddEnableHashFunc(v3, 32927, (uint64_t)gleSetEnable_SAMPLE_ALPHA_TO_ONE);
    gleAddEnableHashFunc(v3, 32928, (uint64_t)gleSetEnable_SAMPLE_COVERAGE);
    gleAddEnableHashFunc(v3, 34880, (uint64_t)gleSetEnable_MATRIX_PALETTE_OES);
    unsigned int v6 = gleSetEnable_ALPHA_TEST;
    BOOL v7 = v3;
    int v8 = 3008;
    goto LABEL_11;
  }
LABEL_13:

  os_unfair_lock_unlock((os_unfair_lock_t)&gle_enable_hash_table_lock);
}

char *gleAddEnableHashFunc(char *result, int a2, uint64_t a3)
{
  uint64_t v5 = ((a2 + 7) ^ BYTE1(a2));
  unsigned int v6 = &result[32 * v5];
  if (*(_DWORD *)v6)
  {
    BOOL v7 = result;
    double result = (char *)malloc_type_malloc(0x20uLL, 0x577B5147uLL);
    if (!result) {
      abort();
    }
    *(_DWORD *)double result = *(_DWORD *)v6;
    int v8 = &v7[32 * v5];
    *(_OWORD *)(result + 8) = *(_OWORD *)(v8 + 8);
    *(_DWORD *)unsigned int v6 = a2;
    *((void *)v8 + 1) = a3;
    *((void *)v8 + 2) = result;
  }
  else
  {
    *(_DWORD *)unsigned int v6 = a2;
    *((void *)v6 + 1) = a3;
    *((void *)v6 + 2) = 0;
  }
  return result;
}

uint64_t gleInitializeContext(uint64_t a1)
{
  *(void *)(a1 + 29632) = 0;
  *(void *)(a1 + 29008) = 0;
  uint64_t v2 = (int32x4_t *)(a1 + 29716);
  *(_WORD *)(a1 + 29828) = 0;
  uint64_t v3 = a1 + 32470;
  int v4 = (_DWORD *)(a1 + 27792);
  uint64_t v5 = (unsigned char *)(a1 + 15196);
  *(unsigned char *)(a1 + 32483) = *(unsigned char *)(*(void *)(a1 + 29032) + 41);
  *(void *)(a1 + 19240) = gle_globals_struct;
  *(_DWORD *)(a1 + 29792) = 878944803;
  *(void *)(a1 + 19288) = 0;
  *(void *)(a1 + 26000) = 0;
  *(void *)(a1 + 19304) = 0;
  *(void *)(a1 + 24192) = 0;
  *(_OWORD *)(a1 + 1432) = 0u;
  *(void *)(a1 + 1424) = 0;
  *(_OWORD *)(a1 + 1456) = 0u;
  *(_OWORD *)(a1 + 24400) = 0u;
  *(_OWORD *)(a1 + 24416) = 0u;
  *(_OWORD *)(a1 + 24432) = 0u;
  *(_OWORD *)(a1 + 24448) = 0u;
  *(_OWORD *)(a1 + 24464) = 0u;
  *(_OWORD *)(a1 + 24480) = 0u;
  *(_OWORD *)(a1 + 24496) = 0u;
  *(_OWORD *)(a1 + 24512) = 0u;
  *(_OWORD *)(a1 + 24528) = 0u;
  *(_OWORD *)(a1 + 24544) = 0u;
  *(_OWORD *)(a1 + 24560) = 0u;
  *(_OWORD *)(a1 + 24576) = 0u;
  *(void *)(a1 + 24592) = 0;
  uint64_t v6 = *(unsigned __int8 *)(a1 + 32496);
  if (*(unsigned char *)(a1 + 32496))
  {
    uint64_t v7 = a1 + 33504;
    uint64_t v8 = *(unsigned __int8 *)(a1 + 32496);
    do
    {
      *(void *)(v7 + 32) = 0;
      *(_OWORD *)uint64_t v7 = 0uLL;
      *(_OWORD *)(v7 + 16) = 0uLL;
      v7 += 1672;
      --v8;
    }
    while (v8);
  }
  *(void *)(a1 + 28944) = 0;
  *(_OWORD *)(a1 + 23936) = 0uLL;
  *(_OWORD *)(a1 + 23952) = 0uLL;
  *(_OWORD *)(a1 + 23968) = 0uLL;
  *(_OWORD *)(a1 + 23984) = 0uLL;
  *(_OWORD *)(a1 + 24000) = 0uLL;
  *(_OWORD *)(a1 + 24016) = 0uLL;
  *(_OWORD *)(a1 + 24032) = 0uLL;
  *(_OWORD *)(a1 + 24048) = 0uLL;
  *(_OWORD *)(a1 + 24064) = 0uLL;
  *(_OWORD *)(a1 + 24080) = 0uLL;
  *(_OWORD *)(a1 + 24096) = 0uLL;
  *(_OWORD *)(a1 + 24112) = 0uLL;
  *(_OWORD *)(a1 + 24128) = 0uLL;
  *(_OWORD *)(a1 + 24144) = 0uLL;
  *(_OWORD *)(a1 + 24160) = 0uLL;
  *(_OWORD *)(a1 + 24176) = 0uLL;
  bzero((void *)(a1 + 20776), 0xBB0uLL);
  *(_OWORD *)(a1 + 26384) = 0u;
  uint64_t v9 = -48;
  do
  {
    uint64_t v10 = a1 + v9;
    *(void *)(v10 + 18744) = 0;
    *(void *)(v10 + 29584) = 0;
    v9 += 16;
  }
  while (v9);
  *(void *)(a1 + 26304) = 0;
  *(void *)(a1 + 28952) = 0;
  *(void *)(a1 + 28968) = 0;
  *(void *)(a1 + 28960) = 0;
  if (v6)
  {
    BOOL v11 = (void *)(a1 + 33592);
    do
    {
      *BOOL v11 = 0;
      v11[1] = 0;
      v11 += 209;
      --v6;
    }
    while (v6);
  }
  *(void *)(a1 + 28992) = 0;
  *(void *)(a1 + 18792) = 0;
  *(void *)(a1 + 18864) = 0;
  *(void *)(a1 + 18936) = 0;
  *(void *)(a1 + 19008) = 0;
  *(_OWORD *)(a1 + 24768) = 0u;
  *(void *)(a1 + 27872) = glgCreateProcessor();
  gleLLVMInit(a1);
  uint64_t v12 = gleAllocVertexMachine(a1, 36);
  if (v12) {
    goto LABEL_11;
  }
  uint64_t v12 = gleAllocMaterials(a1);
  if (v12) {
    goto LABEL_11;
  }
  gleShareEnableHashTable(a1);
  *(void *)(a1 + 28840) = 0x20000000000000;
  *(void *)(a1 + 28912) = a1 + 28888;
  *(void *)(a1 + 28904) = a1 + 28888;
  *(void *)(a1 + 28896) = a1 + 28888;
  *(void *)(a1 + 28888) = a1 + 28888;
  *(void *)(a1 + 28920) = 0;
  *(void *)(a1 + 28936) = 0;
  *(void *)(a1 + 28928) = 0;
  *(_OWORD *)(a1 + 28848) = 0u;
  *(_OWORD *)(a1 + 28864) = 0u;
  *(void *)(a1 + 28880) = 0;
  gleInitConstants(a1);
  int v14 = malloc_type_malloc(0x2F00uLL, 0x577B5147uLL);
  if (!v14) {
    goto LABEL_25;
  }
  *(void *)(a1 + 19288) = v14;
  __CFSetLastAllocationEventName();
  if (!*(void *)(a1 + 19288))
  {
    uint64_t v12 = 0;
LABEL_11:
    gleTerminateContext(a1);
    return v12;
  }
  int v15 = malloc_type_malloc(0x10uLL, 0x577B5147uLL);
  if (!v15) {
LABEL_25:
  }
    abort();
  *(void *)(a1 + 29520) = v15;
  v15[2] = 0;
  *(void *)int v15 = 0;
  *uint64_t v2 = vdupq_n_s32(0xBFEFFBFE);
  v2[1].i32[0] = -1074791426;
  memset_pattern16((void *)(a1 + 29736), &unk_227DC2050, 0x20uLL);
  *(_DWORD *)(v3 + 7) = 257;
  uint64_t v16 = *(unsigned __int8 *)(v3 + 26);
  if (*(unsigned char *)(v3 + 26))
  {
    char v17 = 0;
    __int16 v18 = 0;
    uint64_t v19 = (unsigned char *)(v3 + 159);
    __int16 v20 = -1;
    do
    {
      v17 |= *v19;
      __int16 v21 = *(_WORD *)(v19 - 75);
      v18 |= v21;
      v20 &= v21;
      v19 += 1672;
      --v16;
    }
    while (v16);
    *(unsigned char *)(v3 + 10) = v17;
    uint64_t v22 = v20 & 0xFB10 | v18 & 0x4EFu;
  }
  else
  {
    LOWORD(v22) = -1264;
  }
  *(_WORD *)(*(void *)(a1 + 19296) + 346) = v22;
  *(void *)(a1 + 18992) = a1 + 29640;
  *int v4 = 0;
  v4[14] = 0;
  gleInitGLDState(a1 + 2272);
  *uint64_t v5 = 1;
  *(void *)(a1 + 29836) = 0;
  *(_WORD *)(a1 + 29844) = 0;
  if (*(unsigned __int8 *)(v3 + 31) - 3 <= 1) {
    v5[181] = 1;
  }
  gleInitGLIState(a1);
  *(_OWORD *)(a1 + 1520) = 0u;
  *(void *)(a1 + 1536) = 0xE800000000000000;
  *(void *)(a1 + 1544) = 0x7807000001000000;
  *(_OWORD *)(a1 + 2192) = 0u;
  *(void *)(a1 + 2208) = 0xFFFFFE00000000;
  *(void *)(a1 + 2216) = 0x89D8E67F00000000;
  v2[5].i32[1] = 0x20000000;
  gleSetBaseTCLState(a1);
  *(_OWORD *)(a1 + 1664) = 0u;
  *(_OWORD *)(a1 + 1648) = 0u;
  *(_OWORD *)(a1 + 1632) = 0u;
  *(_OWORD *)(a1 + 1616) = 0u;
  *(_OWORD *)(a1 + 1600) = 0u;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_OWORD *)(a1 + 1552) = 0u;
  *(_OWORD *)(a1 + 1680) = 0u;
  *(_OWORD *)(a1 + 1696) = 0u;
  *(_OWORD *)(a1 + 1712) = 0u;
  *(_OWORD *)(a1 + 1728) = 0u;
  *(_OWORD *)(a1 + 1744) = 0u;
  *(_OWORD *)(a1 + 1760) = 0u;
  *(_OWORD *)(a1 + 1776) = 0u;
  *(_OWORD *)(a1 + 1792) = 0u;
  *(_OWORD *)(a1 + 1808) = 0u;
  *(_OWORD *)(a1 + 1824) = 0u;
  *(_OWORD *)(a1 + 1840) = 0u;
  *(_OWORD *)(a1 + 1856) = 0u;
  *(_OWORD *)(a1 + 1872) = 0u;
  *(_OWORD *)(a1 + 1888) = 0u;
  *(_OWORD *)(a1 + 1904) = 0u;
  *(_OWORD *)(a1 + 1920) = 0u;
  *(_OWORD *)(a1 + 2048) = 0u;
  *(_OWORD *)(a1 + 2032) = 0u;
  *(_OWORD *)(a1 + 2016) = 0u;
  *(_OWORD *)(a1 + 2000) = 0u;
  *(_OWORD *)(a1 + 1984) = 0u;
  *(_OWORD *)(a1 + 1968) = 0u;
  *(_OWORD *)(a1 + 1952) = 0u;
  *(_OWORD *)(a1 + 1936) = 0u;
  *(_OWORD *)(a1 + 2064) = 0u;
  *(_OWORD *)(a1 + 2080) = 0u;
  *(_OWORD *)(a1 + 2096) = 0u;
  *(_OWORD *)(a1 + 2112) = 0u;
  *(_OWORD *)(a1 + 2128) = 0u;
  *(_OWORD *)(a1 + 2144) = 0u;
  *(_OWORD *)(a1 + 2160) = 0u;
  *(_OWORD *)(a1 + 2176) = 0u;
  *(unsigned char *)(v3 + 35) = 0;
  gleInitDerivedState(a1);
  gleInitTextureState(a1);
  gleInitShaderProgramState(a1);
  gleInitHashMachine((void *)(a1 + 26352));
  gleInitVertexArrayState(a1);
  gleInitPipelineProgramState(a1);
  gleInitBufferState(a1);
  gleInitHashMachine((void *)(a1 + 25872));
  gleInitQueryMachine(a1);
  gleInitTransformFeedback(a1);
  gleInitDrawCopyPixelsObject(a1);
  gleInitBitmapObject(a1);
  gleInitAccumObject(a1);
  gleUpdateState((int8x16_t *)a1);
  v2[3].i32[2] = 0;
  *(void *)(a1 + 29816) = 0;
  v2[6].i32[3] = 0;
  *(unsigned char *)(v3 + 33) = 0;
  *(_WORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 2) = 0;
  *(_OWORD *)(a1 + 19168) = 0u;
  *(_OWORD *)(a1 + 19184) = 0u;
  *(_OWORD *)(a1 + 19200) = 0u;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(v3 + 13) == 0;
  bzero((void *)(a1 + 26448), 0x368uLL);
  return 0;
}

uint64_t gleAllocVertexMachine(uint64_t a1, int a2)
{
  uint64_t v5 = a2 + 12;
  uint64_t v6 = (int)v5 + (uint64_t)a2;
  uint64_t v7 = (int32x4_t *)malloc_type_malloc(656 * (int)v6 + 3840, 0x577B5147uLL);
  if (!v7) {
    abort();
  }
  uint64_t v8 = v7;
  __CFSetLastAllocationEventName();
  *(_DWORD *)(a1 + 26120) = a2;
  *(void *)(a1 + 26000) = v8 + 80;
  uint64_t i64 = (uint64_t)v8[40 * a2 + 80].i64;
  *(void *)(a1 + 26024) = i64;
  *(void *)(a1 + 26032) = &v8[40 * v5 + 80];
  uint64_t v11 = (uint64_t)v8[40 * v6 + 240].i64;
  *(void *)(a1 + 26088) = v11;
  *(void *)(a1 + 26096) = v11 + 8 * v6;
  *(void *)(a1 + 26008) = v8 + 80;
  *(void *)(a1 + 26016) = i64;
  *(_DWORD *)(a1 + 26104) = 0;
  *(void *)(a1 + 26112) = 0;
  *(_OWORD *)(a1 + 26056) = 0u;
  *(_OWORD *)(a1 + 26072) = 0u;
  unint64_t v12 = (unint64_t)&v8[40 * v6 + 80];
  if ((unint64_t)v8 < v12)
  {
    v9.i64[0] = *(void *)(a1 + 288);
    int32x4_t v13 = vzip1q_s32(v9, v9);
    v13.i32[2] = v9.i32[0];
    do
    {
      v8[6] = v13;
      v8 += 40;
    }
    while ((unint64_t)v8 < v12);
  }
  return 0;
}

uint64_t gleAllocMaterials(uint64_t a1)
{
  *(void *)(a1 + 1424) = a1 + 13824;
  *(_DWORD *)(a1 + 14340) = 0;
  *(void *)(a1 + 14332) = 0;
  *(void *)(a1 + 14324) = 0;
  *(void *)(a1 + 1432) = a1 + 14352;
  *(_DWORD *)(a1 + 14868) = 0;
  *(void *)(a1 + 14860) = 0;
  *(void *)(a1 + 14852) = 0;
  *(void *)(a1 + 1440) = 0;
  return 0;
}

uint64_t gleShareEnableHashTable(uint64_t result)
{
  *(void *)(result + 19304) = gle_enable_hash_table[*(unsigned __int8 *)(result + 32501)];
  return result;
}

uint64_t gleInitConstants(uint64_t a1)
{
  mach_timebase_info info = 0;
  mach_timebase_info(&info);
  LODWORD(v2) = info.denom;
  LODWORD(v3) = info.numer;
  *(double *)(a1 + 432) = (double)v2 / (double)v3;
  *(_OWORD *)(a1 + 272) = xmmword_227DC1FA0;
  *(_OWORD *)(a1 + 288) = xmmword_227DC1FB0;
  *(_OWORD *)(a1 + 304) = xmmword_227DC1FC0;
  *(int32x4_t *)(a1 + 320) = vdupq_n_s32(0x3C010204u);
  *(void *)&long long v4 = 0x3000000030000000;
  *((void *)&v4 + 1) = 0x3000000030000000;
  *(int32x4_t *)(a1 + 336) = vdupq_n_s32(0x38000100u);
  *(_OWORD *)(a1 + 352) = v4;
  *(int32x4_t *)(a1 + 368) = vdupq_n_s32(0x3B808081u);
  *(int32x4_t *)(a1 + 384) = vdupq_n_s32(0x37800080u);
  *(_OWORD *)(a1 + 400) = v4;
  *(int32x4_t *)(a1 + 416) = vdupq_n_s32(0x37800000u);
  *(void *)(a1 + 440) = gleFlushAndSubmit;
  *(void *)(a1 + 448) = gleNoop;
  uint64_t result = glvmGetConstants();
  *(void *)(a1 + 456) = result;
  *(void *)(a1 + 464) = gleClipPoints;
  *(void *)(a1 + 624) = gleClipPoints;
  *(void *)(a1 + 472) = gleClipLines;
  *(void *)(a1 + 632) = gleClipLines;
  *(void *)(a1 + 480) = gleClipPoly;
  *(void *)(a1 + 640) = gleClipPoly;
  *(void *)(a1 + 488) = gleClipPointsPlane;
  *(void *)(a1 + 648) = gleClipPointsPlane;
  *(void *)(a1 + 496) = gleClipLinesPlane;
  *(void *)(a1 + 656) = gleClipLinesPlane;
  *(void *)(a1 + 504) = gleClipPolyPlane;
  *(void *)(a1 + 664) = gleClipPolyPlane;
  *(void *)(a1 + 512) = gleCullPolygonStack;
  *(void *)(a1 + 672) = gleCullPolygonStack;
  *(void *)(a1 + 520) = gleCullPolygonPtrStack;
  *(void *)(a1 + 680) = gleCullPolygonPtrStack;
  *(void *)(a1 + 528) = gleCullTriangle;
  *(void *)(a1 + 688) = gleCullTriangle;
  *(void *)(a1 + 536) = gleCullQuad;
  *(void *)(a1 + 696) = gleCullQuad;
  *(void *)(a1 + 544) = gleVPFlipColors;
  *(void *)(a1 + 704) = gleVPFlipColors;
  uint64_t v6 = MEMORY[0x263EF8A10];
  *(void *)(a1 + 560) = MEMORY[0x263EF8A10];
  *(void *)(a1 + 720) = v6;
  uint64_t v7 = MEMORY[0x263EF8840];
  *(void *)(a1 + 568) = MEMORY[0x263EF8840];
  *(void *)(a1 + 728) = v7;
  uint64_t v8 = MEMORY[0x263EF8870];
  *(void *)(a1 + 576) = MEMORY[0x263EF8870];
  *(void *)(a1 + 736) = v8;
  uint64_t v9 = MEMORY[0x263EF8848];
  *(void *)(a1 + 584) = MEMORY[0x263EF8848];
  *(void *)(a1 + 744) = v9;
  return result;
}

double gleInitGLDState(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = a1 + 15712;
  long long v4 = (unsigned char *)(a1 + 15444);
  uint64_t v5 = a1 + 12904;
  uint64_t v6 = a1 + 10244;
  *(_WORD *)(a1 + 4) = 0;
  *(void *)(a1 + 15544) = 0;
  *(_DWORD *)(a1 + 6928) = 1065353216;
  *(_DWORD *)(a1 + 6932) = 393217;
  *(_DWORD *)(a1 + 6936) = 0;
  do
  {
    uint64_t v7 = (_OWORD *)(a1 + 6160 + v2);
    v7[2] = xmmword_227DC1530;
    v7[3] = xmmword_227DC1530;
    *uint64_t v7 = xmmword_227DC1530;
    v7[1] = xmmword_227DC1530;
    v2 += 64;
  }
  while (v2 != 256);
  *(_DWORD *)(a1 + 6184) = 1065353216;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(a1 + 6192) = _D0;
  *(_DWORD *)(a1 + 6200) = 1065353216;
  *(_DWORD *)(a1 + 6224) = 1065353216;
  *(_DWORD *)(a1 + 6236) = 0;
  *(_DWORD *)(a1 + 6256) = 1065353216;
  uint64_t v13 = -512;
  do
  {
    uint64_t v14 = a1 + v13;
    *(_OWORD *)(v14 + 6928) = xmmword_227DC1530;
    *(_OWORD *)(v14 + 6944) = 0uLL;
    v13 += 32;
  }
  while (v13);
  *(unsigned char *)(a1 + 12734) = 0;
  *(_WORD *)(a1 + 12732) = 519;
  *(_DWORD *)(a1 + 12728) = 0;
  *(void *)(a1 + 12736) = 0x100000001;
  *(void *)(a1 + 12840) = 0;
  *(void *)(a1 + 12832) = 0;
  *(_DWORD *)(a1 + 12744) = -2147057658;
  uint64_t v15 = a1 + 12758;
  uint64_t v16 = 7;
  *(_WORD *)(a1 + 12848) = 0;
  do
  {
    *(void *)(v15 - 10) = 0x100000001;
    *(_DWORD *)(v15 - 2) = -2147057658;
    v15 += 12;
    --v16;
  }
  while (v16);
  *(_OWORD *)(a1 + 12880) = 0u;
  *(_OWORD *)(a1 + 12864) = 0u;
  *(void *)(a1 + 12856) = 0x3FF0000000000000;
  *(void *)(a1 + 12896) = 0;
  *(_WORD *)(a1 + 12928) = 513;
  *(_WORD *)(a1 + 12932) = 0;
  *(unsigned char *)(a1 + 12934) = 0;
  *(void *)(a1 + 12936) = 0;
  *(void *)(a1 + 12944) = 0x3FF0000000000000;
  *(unsigned char *)(a1 + 12952) = 1;
  *(_OWORD *)(a1 + 12956) = 0u;
  *(_OWORD *)(a1 + 12972) = xmmword_227DC2450;
  *(_OWORD *)(a1 + 12988) = xmmword_227DC2460;
  *(void *)(a1 + 13004) = 0x855C84520800;
  *(void *)&long long v17 = 0x1100110011001100;
  *((void *)&v17 + 1) = 0x1100110011001100;
  *(_OWORD *)(a1 + 13012) = v17;
  *(_DWORD *)(a1 + 13028) = 285217024;
  *(void *)(a1 + 13032) = 0x13F800000;
  *(void *)(a1 + 13040) = 0x15030000FFFFLL;
  *(void *)(a1 + 13048) = -1;
  *(void *)(a1 + 13056) = -1;
  *(_DWORD *)(a1 + 13064) = -1;
  *(unsigned char *)(a1 + 13068) = 1;
  *(void *)(a1 + 16168) = _D0;
  *(void *)(a1 + 16192) = 0;
  *(_OWORD *)(a1 + 16176) = 0u;
  *(void *)(a1 + 16200) = 0x400000000;
  *(_OWORD *)(a1 + 16208) = 0u;
  *(_OWORD *)(a1 + 16224) = 0u;
  *(void *)(a1 + 16288) = 0;
  *(void *)(a1 + 16240) = 4;
  *(_OWORD *)(a1 + 16248) = xmmword_227DC2470;
  *(_OWORD *)(a1 + 16264) = xmmword_227DC2470;
  *(void *)(a1 + 16280) = 0x3F80000000000000;
  *(_DWORD *)(a1 + 16888) = 0;
  *(void *)(a1 + 16296) = &gle_default_pix_map_i;
  *(void *)(a1 + 16368) = &gle_default_pix_map_i;
  *(void *)(a1 + 16304) = &gle_default_pix_map_f;
  *(void *)(a1 + 16312) = &gle_default_pix_map_f;
  *(void *)&long long v18 = 0x100000001;
  *((void *)&v18 + 1) = 0x100000001;
  *(void *)(a1 + 16320) = &gle_default_pix_map_f;
  *(void *)(a1 + 16328) = &gle_default_pix_map_f;
  *(void *)(a1 + 16336) = &gle_default_pix_map_f;
  *(void *)(a1 + 16344) = &gle_default_pix_map_f;
  *(_OWORD *)(a1 + 16376) = v18;
  *(_OWORD *)(a1 + 16392) = v18;
  *(void *)(a1 + 16352) = &gle_default_pix_map_f;
  *(void *)(a1 + 16360) = &gle_default_pix_map_f;
  *(void *)(a1 + 16408) = 0x100000001;
  *(_OWORD *)(a1 + 16480) = xmmword_227DC2480;
  *(_OWORD *)(a1 + 16496) = xmmword_227DC2480;
  *(_OWORD *)(a1 + 16552) = xmmword_227DC2480;
  *(_OWORD *)(a1 + 16568) = xmmword_227DC2480;
  *(_OWORD *)(a1 + 16624) = xmmword_227DC2480;
  *(_OWORD *)(a1 + 16640) = xmmword_227DC2480;
  *(_OWORD *)(a1 + 16752) = xmmword_227DC2480;
  *(_OWORD *)(a1 + 16768) = xmmword_227DC2480;
  *(_OWORD *)(a1 + 16688) = xmmword_227DC2480;
  *(_OWORD *)(a1 + 16704) = xmmword_227DC2480;
  *(_OWORD *)(a1 + 16784) = xmmword_227DC2480;
  *(_OWORD *)(a1 + 16800) = xmmword_227DC2480;
  *(_OWORD *)(a1 + 16816) = xmmword_227DC2480;
  *(_OWORD *)(a1 + 16832) = xmmword_227DC2480;
  *(_OWORD *)(a1 + 16848) = xmmword_227DC2480;
  *(_OWORD *)(a1 + 16864) = xmmword_227DC2480;
  *(_DWORD *)(a1 + 16880) = 0;
  *(_DWORD *)(a1 + 16512) = 419987478;
  *(_DWORD *)(a1 + 16584) = 419987478;
  *(_DWORD *)(a1 + 16656) = 419987478;
  *(_OWORD *)(a1 + 16464) = 0u;
  *(_OWORD *)(a1 + 16536) = 0u;
  *(_OWORD *)(a1 + 16608) = 0u;
  *(void *)(a1 + 16528) = 0;
  *(void *)(a1 + 16600) = 0;
  *(void *)(a1 + 16672) = 0;
  *(_DWORD *)(a1 + 16744) = 0;
  *(_WORD *)(a1 + 16748) = 6408;
  *(unsigned char *)(a1 + 16750) = 0;
  *(void *)(a1 + 16680) = a1 + 7216;
  uint64_t v19 = *(_OWORD **)(a1 + 16720);
  __asm { FMOV            V3.4S, #1.0 }
  *uint64_t v19 = _Q3;
  v19[1] = 0u;
  *(unsigned char *)(a1 + 16730) = 0;
  *(_WORD *)(a1 + 16728) = 6408;
  *(_OWORD *)(a1 + 13072) = xmmword_227DC2450;
  *(_OWORD *)(a1 + 13088) = xmmword_227DC2490;
  *(_DWORD *)(a1 + 13112) = 0;
  *(_DWORD *)(a1 + 13108) = 36002;
  *(_DWORD *)(a1 + 13104) = 0;
  *(void *)&long long v21 = -1;
  *((void *)&v21 + 1) = -1;
  *(_OWORD *)(a1 + 13116) = v21;
  *(_OWORD *)(a1 + 13132) = v21;
  *(_OWORD *)(a1 + 13148) = v21;
  *(_OWORD *)(a1 + 13164) = v21;
  *(_OWORD *)(a1 + 13180) = v21;
  *(_OWORD *)(a1 + 13196) = v21;
  *(_OWORD *)(a1 + 13212) = v21;
  *(_OWORD *)(a1 + 13228) = v21;
  *(void *)(a1 + 13244) = 0;
  *(unsigned char *)(a1 + 13266) = 1;
  *(void *)(a1 + 13252) = 0x40509011B021B02;
  *(_WORD *)(a1 + 13264) = 0;
  *(_DWORD *)(a1 + 13260) = 0;
  *(_OWORD *)(a1 + 13268) = 0u;
  *(unsigned char *)(a1 + 13284) = 0;
  *(void *)(a1 + 13301) = 0;
  *(_OWORD *)(a1 + 13288) = 0u;
  *(_DWORD *)(a1 + 13320) = 7425;
  *(_DWORD *)(a1 + 15432) = 36430;
  uint64_t v22 = (void *)(a1 + 13332);
  uint64_t v23 = 3;
  do
  {
    *(v22 - 1) = 0xFFFFFFFFLL;
    void *v22 = 0x1E001E001E000207;
    v22 += 2;
    --v23;
  }
  while (v23);
  *(_DWORD *)(a1 + 13372) = 0;
  *(void *)(a1 + 15400) = -3229614080;
  *(unsigned char *)(a1 + 15408) = 1;
  *(unsigned char *)(a1 + 15415) = 0;
  *(_DWORD *)(a1 + 15416) = 0;
  *(_DWORD *)(a1 + 15409) = 0;
  *(unsigned char *)(a1 + 15413) = 0;
  *(void *)&long long v24 = -1;
  *((void *)&v24 + 1) = -1;
  *(_OWORD *)(a1 + 12624) = v24;
  *(_OWORD *)(a1 + 12640) = v24;
  *(_OWORD *)(a1 + 12656) = v24;
  *(_OWORD *)(a1 + 12672) = v24;
  *(_OWORD *)(a1 + 12688) = v24;
  *(_OWORD *)(a1 + 12704) = v24;
  *(_DWORD *)(a1 + 12720) = 0;
  uint64_t v25 = a1 + 13416;
  uint64_t v26 = -608;
  *(unsigned char *)(a1 + 12724) = 0;
  do
  {
    unint64_t v27 = (_WORD *)(v25 + v26);
    *(_OWORD *)(v25 + v26 + 612) = xmmword_227DC24A0;
    *(void *)(v25 + v26 + 628) = 0x302030203000300;
    v27[318] = 770;
    v27[319] = 770;
    uint64_t v28 = a1 + v26;
    *(void *)(v28 + 14056) = _D0;
    v27[304] = 8448;
    *(_DWORD *)(v28 + 14020) = 0;
    *(_OWORD *)(v25 + v26 + 572) = 0uLL;
    v26 += 76;
  }
  while (v26);
  uint64_t v29 = 0;
  *(_OWORD *)(a1 + 14084) = 0u;
  *(_OWORD *)(a1 + 14100) = 0u;
  *(_OWORD *)(a1 + 14052) = 0u;
  *(_OWORD *)(a1 + 14068) = 0u;
  *(_OWORD *)(a1 + 14020) = 0u;
  *(_OWORD *)(a1 + 14036) = 0u;
  *(_OWORD *)(a1 + 13988) = 0u;
  *(_OWORD *)(a1 + 14004) = 0u;
  uint64_t v30 = a1 + 14188;
  do
  {
    uint64_t v31 = v30 + v29;
    *(_WORD *)(v31 - 72) = 9216;
    *(_OWORD *)(v31 - 68) = xmmword_227DC2110;
    *(_OWORD *)(v31 - 52) = xmmword_227DC2110;
    uint64_t v32 = a1 + v29;
    *(_WORD *)(v31 - 36) = 9216;
    *(_OWORD *)(v31 - 32) = xmmword_227DC20F0;
    *(_OWORD *)(v31 - 16) = xmmword_227DC20F0;
    *(_WORD *)(v30 + v29) = 9216;
    *(_OWORD *)(v32 + 14192) = 0uLL;
    *(_OWORD *)(v32 + 14208) = 0uLL;
    *(_WORD *)(v31 + 36) = 9216;
    *(_DWORD *)(v32 + 14260) = 0;
    *(_OWORD *)(v31 + 40) = 0uLL;
    v29 += 148;
    *(_OWORD *)(v31 + 56) = 0uLL;
  }
  while (v29 != 1184);
  uint64_t v33 = a1 + 7088;
  *(unsigned char *)(a1 + 15440) = 1;
  *(_WORD *)uint64_t v6 = 0;
  *(_DWORD *)(a1 + 10240) = 1065353216;
  *(unsigned char *)(a1 + 10246) = 0;
  *(void *)(a1 + 10248) = 0;
  gleMakeIdentityMatrix(a1 + 10160);
  uint64_t v34 = 24;
  do
  {
    gleMakeIdentityMatrix(v33);
    gleMakeIdentityMatrix(v33 + 1536);
    v33 += 64;
    --v34;
  }
  while (v34);
  uint64_t v36 = 0;
  *(_OWORD *)(a1 + 10224) = xmmword_227DC24B0;
  *(_DWORD *)(a1 + 12618) = 0;
  *(_DWORD *)(a1 + 12608) = 0;
  *(unsigned char *)(a1 + 12622) = 0;
  *(_DWORD *)(a1 + 15396) = 0;
  *(_OWORD *)(a1 + 15300) = 0u;
  *(_OWORD *)(a1 + 15316) = 0u;
  *(_OWORD *)(a1 + 15332) = 0u;
  *(_OWORD *)(a1 + 15348) = 0u;
  *(_OWORD *)(a1 + 15364) = 0u;
  *(_OWORD *)(a1 + 15380) = 0u;
  *(_DWORD *)(v6 + 2368) = 369230856;
  *(_WORD *)(v6 + 2372) = -32263;
  uint64_t v37 = a1 + 10272;
  *(_OWORD *)(a1 + 10256) = xmmword_227DC24C0;
  do
  {
    uint64_t v38 = v37 + v36;
    *(_OWORD *)(v37 + v36) = xmmword_227DC1530;
    if (v36) {
      *(float *)v35.i32 = 0.0;
    }
    else {
      *(float *)v35.i32 = 1.0;
    }
    int32x2_t v39 = vdup_lane_s32(v35, 0);
    unsigned int v40 = (void *)(a1 + 10412 + v36);
    *(int32x2_t *)((char *)v40 - 124) = v39;
    unsigned int v41 = (_DWORD *)(a1 + v36);
    v41[2574] = v35.i32[0];
    v41[2575] = 1065353216;
    *(int32x2_t *)((char *)v40 - 108) = v39;
    v41[2578] = v35.i32[0];
    *(_OWORD *)(v38 + 44) = xmmword_227DC2490;
    *(_OWORD *)(v38 + 60) = xmmword_227DC24D0;
    *(_OWORD *)(v38 + 76) = xmmword_227DC24E0;
    *(_OWORD *)(v38 + 92) = xmmword_227DC1530;
    *(_OWORD *)(v38 + 108) = xmmword_227DC24D0;
    *(_OWORD *)(v38 + 124) = xmmword_227DC1530;
    *unsigned int v40 = 0x433400003F800000;
    v36 += 160;
  }
  while (v36 != 1280);
  *(_OWORD *)(a1 + 6944) = xmmword_227DC24F0;
  *(_OWORD *)(a1 + 6960) = xmmword_227DC2500;
  *(_OWORD *)(a1 + 6976) = xmmword_227DC24F0;
  *(_OWORD *)(a1 + 6992) = xmmword_227DC2500;
  *(_OWORD *)(a1 + 7024) = 0u;
  *(_OWORD *)(a1 + 7040) = 0u;
  *(_OWORD *)(a1 + 7008) = xmmword_227DC2510;
  *(_OWORD *)(a1 + 7056) = xmmword_227DC2520;
  *(_OWORD *)(a1 + 11552) = xmmword_227DC24C0;
  *(_OWORD *)(a1 + 11568) = xmmword_227DC2530;
  *(_OWORD *)(a1 + 11584) = xmmword_227DC1530;
  *(_OWORD *)(a1 + 11600) = xmmword_227DC1530;
  *(_OWORD *)(a1 + 11616) = xmmword_227DC1530;
  *(_OWORD *)(a1 + 12080) = xmmword_227DC24C0;
  *(_OWORD *)(a1 + 12096) = xmmword_227DC2530;
  *(_OWORD *)(a1 + 12112) = xmmword_227DC1530;
  *(_OWORD *)(a1 + 12128) = xmmword_227DC1530;
  *(_OWORD *)(a1 + 12144) = xmmword_227DC1530;
  *(unsigned char *)(v5 + 2516) = 0;
  *(void *)(a1 + 15560) = a1 + 16;
  *(void *)(a1 + 15624) = a1 + 4112;
  *(void *)(a1 + 15608) = 0;
  *(void *)(a1 + 15424) = 0x101000000000001;
  *(unsigned char *)uint64_t v3 = 0;
  *(_OWORD *)(a1 + 15720) = 0u;
  *(_OWORD *)(a1 + 15736) = 0u;
  *(_OWORD *)(a1 + 15752) = 0u;
  *(_OWORD *)(a1 + 15768) = 0u;
  *(_WORD *)(v3 + 2) = -1;
  *(_DWORD *)uint64_t v5 = 16842752;
  *(_OWORD *)(a1 + 12908) = 0u;
  *(unsigned char *)(v5 + 20) = 0;
  *(_WORD *)(v5 + 2532) = 0;
  v4[8] = 3;
  memset_pattern16((void *)(a1 + 15456), &unk_227DC20E0, 0x10uLL);
  memset_pattern16((void *)(a1 + 15472), &unk_227DC20E0, 8uLL);
  *(_DWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 12) = 0;
  *long long v4 = 0;
  *(_DWORD *)(a1 + 15448) = -1;
  double result = 0.0;
  *(_OWORD *)(a1 + 15632) = 0u;
  *(_OWORD *)(a1 + 15648) = 0u;
  *(_OWORD *)(a1 + 15664) = 0u;
  *(_OWORD *)(a1 + 15680) = 0u;
  *(_OWORD *)(a1 + 15696) = 0u;
  return result;
}

uint64_t gleMakeIdentityMatrix(uint64_t result)
{
  *(_DWORD *)double result = 1065353216;
  *(void *)(result + 12) = 0;
  *(void *)(result + 4) = 0;
  *(_DWORD *)(result + 20) = 1065353216;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 1065353216;
  *(void *)(result + 52) = 0;
  *(void *)(result + 44) = 0;
  *(_DWORD *)(result + 60) = 1065353216;
  return result;
}

double gleInitGLIState(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = a1 + 29596;
  *(void *)(a1 + 20768) = 0;
  *(void *)(a1 + 29596) = 1132494848;
  *(void *)(a1 + 2256) = 0;
  uint64_t v4 = *(void *)(a1 + 26000);
  *(_DWORD *)(v4 - 1204) = 1065353216;
  *(_DWORD *)(a1 + 2264) = 0;
  do
  {
    uint64_t v5 = (_OWORD *)(v4 - 1184 + v2);
    v5[2] = xmmword_227DC1530;
    v5[3] = xmmword_227DC1530;
    *uint64_t v5 = xmmword_227DC1530;
    v5[1] = xmmword_227DC1530;
    v2 += 64;
  }
  while (v2 != 256);
  uint64_t v6 = v4 - 1280;
  *(_DWORD *)(v6 + 120) = 1065353216;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(v6 + 128) = _D0;
  *(_DWORD *)(v6 + 136) = 1065353216;
  *(_DWORD *)(v6 + 160) = 1065353216;
  *(_DWORD *)(v6 + 172) = 0;
  *(_DWORD *)(v6 + 48) = 1065353216;
  *(_OWORD *)(a1 + 29604) = xmmword_227DC2540;
  *(int32x2_t *)(a1 + 29620) = vdup_n_s32(0x43808000u);
  *(_DWORD *)(a1 + 29768) = 1;
  *(void *)(a1 + 19960) = 0x60000000000;
  *(unsigned char *)(a1 + 1452) = 0;
  *(void *)(a1 + 1488) = gleAllocateMaterial;
  *(void *)(a1 + 1496) = gleAllocateMaterial;
  *(void *)(a1 + 1504) = gleUpdateLightRGBASums;
  *(void *)(a1 + 1512) = gleUpdateLightRGBASums;
  *(_DWORD *)(a1 + 20484) = 4;
  *(_DWORD *)(a1 + 20384) = 4352;
  *(void *)(a1 + 19992) = &gleESStackOffsets;
  *(_OWORD *)(a1 + 20080) = 0u;
  *(_OWORD *)(a1 + 20064) = 0u;
  *(_OWORD *)(a1 + 20048) = 0u;
  *(_OWORD *)(a1 + 20032) = 0u;
  *(_OWORD *)(a1 + 20016) = 0u;
  *(_OWORD *)(a1 + 20000) = 0u;
  *(unsigned char *)(a1 + 20495) = 0;
  *(_WORD *)(a1 + 29830) = 7168;
  *(_DWORD *)(a1 + 19928) = 0;
  *(void *)(a1 + 19912) = a1 + 19400;
  *(_DWORD *)(a1 + 23768) = 0;
  *(void *)(a1 + 23784) = 0;
  *(_WORD *)(a1 + 23772) = 0;
  *(_OWORD *)(a1 + 23808) = 0u;
  *(_OWORD *)(a1 + 23824) = 0u;
  *(_OWORD *)(a1 + 23840) = 0u;
  *(_OWORD *)(a1 + 23856) = 0u;
  *(_OWORD *)(a1 + 23872) = 0u;
  *(_OWORD *)(a1 + 23888) = 0u;
  *(_OWORD *)(a1 + 23904) = 0u;
  *(_OWORD *)(a1 + 23920) = 0u;
  *(_WORD *)(a1 + 26340) = 0;
  *(void *)(a1 + 26296) = 0;
  *(_DWORD *)(a1 + 26328) = 0;
  *(void *)(a1 + 26332) = 5126;
  *(_WORD *)(a1 + 29708) = 1;
  unsigned int v12 = *(unsigned __int8 *)(a1 + 32501) - 5;
  if (v12 >= 0xFFFFFFFE) {
    __int16 v13 = 0;
  }
  else {
    __int16 v13 = -30435;
  }
  *(_WORD *)(a1 + 29710) = v13;
  *(_WORD *)(a1 + 29712) = -30435;
  *(unsigned char *)(a1 + 29714) = 1;
  *(_WORD *)(a1 + 29832) = 0;
  *(_OWORD *)(a1 + 29672) = 0uLL;
  *(_OWORD *)(a1 + 29688) = 0uLL;
  *(_DWORD *)(a1 + 29704) = 0;
  *(_OWORD *)(a1 + 19216) = 0uLL;
  *(unsigned char *)(a1 + 29592) = 0;
  *(_OWORD *)(a1 + 29576) = 0uLL;
  *(_WORD *)(a1 + 19232) = 1;
  *(unsigned char *)(a1 + 19234) = 0;
  *(unsigned char *)(a1 + 32506) = 0;
  *(void *)(a1 + 29776) = 0x300000404;
  *(_DWORD *)(a1 + 29787) = 0;
  *(_DWORD *)(a1 + 29784) = 0;
  uint64_t v14 = getenv("GL_FORCE_LLVM_IR_OUTPUT");
  if (v14 && *v14 == 49) {
    *(unsigned char *)(v3 + 192) = 1;
  }
  *(unsigned char *)(v3 + 2888) = v12 < 0xFFFFFFFE;
  *(void *)&double result = 65793;
  *(_DWORD *)(v3 + 2889) = 65793;
  *(_WORD *)(v3 + 2893) = 0;
  *(void *)(a1 + 29000) = 0;
  *(_WORD *)(v3 + 2878) = -256;
  *(unsigned char *)(v3 + 2880) = -1;
  return result;
}

uint64_t gleInitDerivedState(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = (unsigned __int16 *)(a1 + 32493);
  uint64_t v4 = a1 + 28660;
  *(unsigned char *)(a1 + 32482) = 0;
  int v5 = *(unsigned __int8 *)(*(void *)(a1 + 29032) + 101);
  *(unsigned char *)(a1 + 32481) = v5;
  *(_DWORD *)(a1 + 29796) = (v5 != 0) | 4;
  *(_OWORD *)(a1 + 27832) = 0u;
  *(_OWORD *)(a1 + 27856) = 0u;
  *(void *)(a1 + 20624) = a1 + 20496;
  *(void *)(a1 + 20760) = a1 + 20632;
  *(unsigned char *)(a1 + 28744) = 0;
  *(unsigned char *)(a1 + 32491) = 1;
  uint64_t v6 = *(void *)(a1 + 26000) - 1280;
  *(_OWORD *)(v6 + 80) = xmmword_227DC1530;
  *(_OWORD *)(v6 + 96) = xmmword_227DC1530;
  *(void *)(v6 + 64) = 0;
  *(_DWORD *)(v6 + 72) = 0;
  *(void *)(v6 + 112) = 0;
  *(_DWORD *)(v6 + 120) = 1065353216;
  *(_DWORD *)(v6 + 180) = 1065353216;
  *(_DWORD *)uint64_t v6 = 393472;
  *(unsigned char *)(a1 + 19968) = 0;
  *(_DWORD *)(a1 + 1448) = 0;
  *(_OWORD *)(a1 + 19944) = 0u;
  *(_WORD *)(*(void *)(a1 + 1424) + 496) = 63;
  *(_WORD *)(*(void *)(a1 + 1432) + 496) = 63;
  uint64_t v7 = a1 + 15178;
  do
  {
    uint64_t v8 = a1 + v2;
    *(_DWORD *)(v8 + 784) = -1082130432;
    *(_DWORD *)(v8 + 804) = 1065353216;
    *(_DWORD *)(a1 + v2 + 809) = 16842752;
    v2 += 80;
  }
  while (v2 != 640);
  *(_DWORD *)(a1 + 20488) = 18;
  *(unsigned char *)(a1 + 20494) = 0;
  *(void *)(a1 + 19976) = a1 + 9616;
  *(void *)(a1 + 19984) = a1 + 11152;
  *(unsigned char *)(a1 + 28748) = 1;
  *(unsigned char *)(a1 + 28750) = 2;
  *(void *)uint64_t v4 = 0xFFFFFFFFLL;
  *(_WORD *)(a1 + 28668) = 0;
  *(void *)(a1 + 28648) = 0;
  *(_DWORD *)(a1 + 28656) = -1;
  *(void *)(a1 + 19920) = 0;
  *(_WORD *)(a1 + 19936) = 0;
  *(_DWORD *)(a1 + 19932) = 0;
  *(_OWORD *)(a1 + 19384) = 0u;
  *(_OWORD *)(a1 + 23792) = 0u;
  *(void *)(a1 + 28676) = 0;
  *(void *)(a1 + 26152) = gleSetVertexSubmitFunc;
  *(void *)(a1 + 26160) = gleSetVertexSubmitFunc;
  *(void *)(a1 + 26168) = gleSetVertexConvertFunc;
  *(void *)(a1 + 26176) = gleSetVertexConvertFunc;
  *(void *)(a1 + 26184) = gleSetVertexArrayFunc;
  *(void *)(a1 + 26192) = gleSetVertexArrayFunc;
  *(void *)(a1 + 26200) = gleSetVertexElemFunc;
  *(void *)(a1 + 26208) = gleSetVertexElemFunc;
  uint64_t v9 = *(void *)(a1 + 448);
  *(void *)(a1 + 26144) = v9;
  *(void *)(a1 + 26136) = v9;
  *(_WORD *)(a1 + 26124) = 640;
  *(void *)(a1 + 26048) = 0;
  *(void *)(a1 + 26280) = 0;
  *(void *)(a1 + 26288) = 0;
  *(void *)(a1 + 27880) = gleSetEyeInterpFunc;
  *(void *)(a1 + 27888) = gleSetEyeInterpFunc;
  *(void *)(a1 + 27896) = gleSetClipInterpFunc;
  *(void *)(a1 + 27904) = gleSetClipInterpFunc;
  *(void *)(a1 + 27912) = gleSetFlatCopyFunc;
  *(void *)(a1 + 27920) = gleSetFlatCopyFunc;
  *(_OWORD *)(a1 + 28696) = xmmword_227DC2480;
  *(_DWORD *)(a1 + 28712) = 1065353216;
  *(unsigned char *)(a1 + 32492) = 0;
  *(void *)(a1 + 28716) = 0;
  *(void *)(a1 + 28724) = 0;
  int v10 = (*(unsigned __int16 *)(a1 + 32493) | (*(unsigned __int8 *)(a1 + 32495) << 16)) & 0xF46F00 | 0x18000;
  *uint64_t v3 = *v3 & 0x6F00 | 0x8000;
  *(unsigned char *)(a1 + 32495) = BYTE2(v10);
  uint64_t v11 = getenv("GL_LLVM_IR_DISABLE_NORETURN_ON_DISCARD");
  uint64_t result = os_variant_has_internal_diagnostics();
  if (result)
  {
    if (!v11)
    {
      int v13 = 0;
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  uint64_t result = os_variant_has_internal_diagnostics();
  int v13 = 0;
  if (v11 && (result & 1) != 0) {
LABEL_8:
  }
    int v13 = (*v11 == 49) << 18;
LABEL_9:
  int v14 = (*v3 | (*((unsigned __int8 *)v3 + 2) << 16)) & 0xFBD8FF | v13;
  *uint64_t v3 = v14;
  *((unsigned char *)v3 + 2) = BYTE2(v14);
  uint64_t v15 = *(void *)(a1 + 29032);
  float v16 = *(float *)(v15 + 64);
  if (v16 < *(float *)(v15 + 72)) {
    float v16 = *(float *)(v15 + 72);
  }
  *(float *)(a1 + 15352) = v16;
  *((unsigned char *)v3 + 11) = 0;
  int v17 = *(unsigned __int8 *)(v15 + 43);
  *(unsigned char *)(v4 + 3828) = v17;
  *(unsigned char *)(v4 + 3829) = v17;
  LOBYTE(v17) = v17 == 0;
  *(unsigned char *)uint64_t v7 = v17;
  *(unsigned char *)(v7 + 1) = v17;
  *((unsigned char *)v3 + 9) = 0;
  *(_DWORD *)(v4 + 1144) = 2047;
  long long v18 = (int *)(v4 + 1148);
  uint64_t v19 = *(void *)(a1 + 29480);
  if (*(unsigned char *)(v19 + 56)) {
    int v20 = 257;
  }
  else {
    int v20 = 1;
  }
  *(_DWORD *)(v4 + 1148) = v20;
  if (*(unsigned char *)(v19 + 57)) {
    *long long v18 = v20 | 0x600;
  }
  *(_DWORD *)(v4 + 1152) = 0;
  uint64_t v21 = *(void *)(a1 + 28960);
  if (v21) {
    long long v18 = (int *)(v21 + 552);
  }
  *(_WORD *)(v7 + 164) = *(_WORD *)v18 & 0x7FF;
  __int16 v22 = *(unsigned __int8 *)(v15 + 101) == 0;
  *(_WORD *)(a1 + 2276) = v22;
  *(_WORD *)(v4 + 1174) = v22;
  return result;
}

_DWORD *gleInitTextureState(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = (unsigned __int8 *)(a1 + 32496);
  uint64_t v4 = a1 + 20776;
  do
  {
    uint64_t result = gleCreateTextureObject(*(void *)(a1 + 19296), (unsigned __int16)v2 | 0x1000u, 0);
    if (v3[5] == 4) {
      *((_WORD *)result + 461) = 6403;
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8 * v2 + 23592) = result;
    do
    {
      *(void *)(v4 + v6) = result;
      v6 += 88;
    }
    while (v6 != 2816);
    result[5] += 32;
    ++v2;
    v4 += 8;
  }
  while (v2 != 11);
  uint64_t v7 = 0;
  uint64_t v8 = *v3;
  uint64_t v9 = (void *)(a1 + 33176);
  do
  {
    if (v8)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v9;
      do
      {
        *uint64_t v11 = 0;
        v11 += 209;
        --v10;
      }
      while (v10);
    }
    ++v7;
    ++v9;
  }
  while (v7 != 32);
  uint64_t v12 = -48;
  do
  {
    int v13 = (void *)(a1 + v12);
    v13[3698] = 0;
    v13[3697] = 0x1401190800010000;
    v13[2343] = 0;
    v13[2342] = 0x1401190800000000;
    v12 += 16;
  }
  while (v12);
  *(void *)(a1 + 23776) = 0;
  return result;
}

_DWORD *gleCreateTextureObject(uint64_t a1, __int16 a2, int a3)
{
  int v5 = a2 & 0xF;
  if ((a2 & 0xF) != 0) {
    int v6 = 1;
  }
  else {
    int v6 = 6;
  }
  if ((v5 - 7) < 3 || v5 == 2) {
    int v8 = 1;
  }
  else {
    int v8 = 15;
  }
  uint64_t v9 = malloc_type_malloc((32 * v6 * v8 + 1072), 0x577B5147uLL);
  if (!v9) {
    abort();
  }
  uint64_t v10 = v9;
  *(void *)uint64_t v9 = 0;
  if ((a2 & 0x2000) != 0) {
    int v11 = 2;
  }
  else {
    int v11 = 3;
  }
  v9[4] = a3;
  v9[5] = 1;
  *((void *)v9 + 4) = 0;
  v9[6] = v11;
  v9[7] = 0;
  gfxInitializeGLTexture();
  if ((a2 & 0x2000) != 0)
  {
    *((_WORD *)v10 + 296) = -31298;
    *((_WORD *)v10 + 460) = -31298;
    v10[240] = -2127593169;
    *((_WORD *)v10 + 482) = -32465;
    v10[238] = 637543936;
    *((unsigned char *)v10 + 597) = 1;
  }
  *((unsigned char *)v10 + 811) |= 1u;
  gfxCreatePluginTexture();
  return v10;
}

uint64_t gleInitPipelineProgramState(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x600uLL, 0x577B5147uLL);
  if (!v2) {
    abort();
  }
  uint64_t v3 = 0;
  uint64_t v4 = (unsigned char *)(a1 + 32496);
  *(void *)(a1 + 24192) = v2;
  *uint64_t v2 = 0;
  *(_DWORD *)(a1 + 24744) = -1;
  *(_DWORD *)(a1 + 24748) = 0x10000;
  *(_DWORD *)(a1 + 24752) = 0;
  int v5 = (void *)(a1 + 33432);
  uint64_t v6 = a1 + 24192;
  do
  {
    if ((v3 & 0x7FFFFFFB) != 0)
    {
      uint64_t v7 = 0;
      PipelineProgramObject = 0;
    }
    else
    {
      PipelineProgramObject = gleCreatePipelineProgramObject(v3, 0);
      gleCreatePluginPipelineProgram(a1, (uint64_t)(PipelineProgramObject + 40));
      uint64_t v7 = PipelineProgramObject + 608;
      ++*((_DWORD *)PipelineProgramObject + 5);
    }
    *(void *)(a1 + 8 * v3 + 19248) = v7;
    uint64_t v9 = (void *)(v6 + 8 * v3);
    v9[31] = PipelineProgramObject;
    v9[26] = PipelineProgramObject;
    *(unsigned char *)(v6 + v3 + 564) = 0;
    v9[36] = 0;
    v9[41] = 0;
    v9[46] = 0;
    uint64_t v10 = *v4;
    if (*v4)
    {
      uint64_t v11 = *v4;
      uint64_t v12 = v5;
      do
      {
        *uint64_t v12 = 0;
        v12 += 209;
        --v11;
      }
      while (v11);
    }
    ++v3;
    ++v5;
  }
  while (v3 != 5);
  uint64_t v13 = 0;
  int v14 = (void *)(a1 + 33472);
  do
  {
    uint64_t v15 = a1 + 8 * v13;
    *(void *)(v15 + 24600) = 0;
    *(void *)(v15 + 24632) = 0;
    if (v10)
    {
      uint64_t v16 = v10;
      int v17 = v14;
      do
      {
        *int v17 = 0;
        v17 += 209;
        --v16;
      }
      while (v16);
    }
    ++v13;
    ++v14;
  }
  while (v13 != 4);
  *(void *)(a1 + 24200) = gleSetVPTransformFuncAll;
  *(void *)(a1 + 24208) = gleSetVPTransformFuncAll;
  *(_OWORD *)(a1 + 24216) = 0u;
  *(_OWORD *)(a1 + 24232) = 0u;
  *(void *)(a1 + 24352) = gleSetGPTransformFuncAll;
  *(void *)(a1 + 24360) = gleSetGPTransformFuncAll;
  *(void *)(a1 + 24368) = 0;
  *(void *)(a1 + 24384) = 0;
  *(void *)(a1 + 24376) = 0;
  gleReconfigurePipelineProgramState(a1);
  *(void *)(a1 + 24552) = cvmCreateHashMachine();
  *(void *)(a1 + 24512) = gleCreateStateProgram(a1, 4, 0, 0, 0, 0, 0, -1);

  return gleFPChanged(a1);
}

char *gleCreatePipelineProgramObject(int a1, int a2)
{
  uint64_t v4 = 4416;
  if (a1 == 4) {
    int v5 = 67109888;
  }
  else {
    int v5 = 0;
  }
  if (a1 == 4) {
    uint64_t v4 = 4432;
  }
  if (a1) {
    int v6 = v5;
  }
  else {
    int v6 = 67109888;
  }
  if (a1) {
    size_t v7 = v4;
  }
  else {
    size_t v7 = 4416;
  }
  int v8 = (char *)malloc_type_malloc(v7, 0x577B5147uLL);
  if (!v8) {
    abort();
  }
  uint64_t v9 = v8;
  *((_DWORD *)v8 + 4) = a2;
  *(void *)int v8 = 0;
  *(void *)(v8 + 20) = 0x400000001;
  *(_WORD *)(v8 + 457) = 0;
  *(_OWORD *)(v8 + 44) = 0u;
  *(_OWORD *)(v8 + 60) = 0u;
  *(_OWORD *)(v8 + 76) = 0u;
  *(_OWORD *)(v8 + 92) = 0u;
  *(_OWORD *)(v8 + 108) = 0u;
  *(_OWORD *)(v8 + 124) = 0u;
  *(_OWORD *)(v8 + 140) = 0u;
  *(_OWORD *)(v8 + 156) = 0u;
  *(_OWORD *)(v8 + 172) = 0u;
  *(_OWORD *)(v8 + 188) = 0u;
  *(_OWORD *)(v8 + 204) = 0u;
  *(_OWORD *)(v8 + 220) = 0u;
  *(_OWORD *)(v8 + 236) = 0u;
  *(_OWORD *)(v8 + 252) = 0u;
  *(_OWORD *)(v8 + 28) = 0u;
  *(_OWORD *)(v8 + 268) = 0u;
  *(_OWORD *)(v8 + 284) = 0u;
  *(_OWORD *)(v8 + 300) = 0u;
  *(_OWORD *)(v8 + 316) = 0u;
  *(_OWORD *)(v8 + 332) = 0u;
  *(_OWORD *)(v8 + 348) = 0u;
  *(_OWORD *)(v8 + 364) = 0u;
  *(_OWORD *)(v8 + 380) = 0u;
  *(_OWORD *)(v8 + 396) = 0u;
  *(_OWORD *)(v8 + 412) = 0u;
  *(_OWORD *)(v8 + 428) = 0u;
  *(_OWORD *)(v8 + 440) = 0u;
  int __pattern4 = v6;
  memset_pattern4(v8 + 608, &__pattern4, 0xED8uLL);
  if (a1 == 4)
  {
    *((_WORD *)v9 + 2208) = 0;
  }
  else if (a1)
  {
    goto LABEL_18;
  }
  *((void *)v9 + 551) = 0;
LABEL_18:
  *((_WORD *)v9 + 232) = 0;
  v9[466] = a1;
  v9[467] = v9[467] & 0xFC | (a2 == 0);
  *((void *)v9 + 59) = 0;
  *((void *)v9 + 60) = 0;
  *(_OWORD *)(v9 + 520) = 0u;
  *(_OWORD *)(v9 + 536) = 0u;
  *((void *)v9 + 61) = -1;
  *((void *)v9 + 62) = -1;
  *((_DWORD *)v9 + 117) = 0;
  *((void *)v9 + 63) = 0;
  *((void *)v9 + 64) = 0;
  memset_pattern16(v9 + 560, &unk_227DC2140, 0x30uLL);
  return v9;
}

uint64_t gleCreatePluginPipelineProgram(uint64_t result, uint64_t a2)
{
  uint64_t v2 = (unsigned __int8 *)(result + 32496);
  if (*(unsigned char *)(result + 32496))
  {
    uint64_t v3 = a2;
    unint64_t v4 = 0;
    uint64_t v5 = a2 + 424;
    int v6 = (void *)(result + 32520);
    uint64_t v7 = a2 + 520;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(v6[205] + 1624))(*v6, v3, v5, v7);
      ++v4;
      v3 += 8;
      v6 += 209;
      v7 += 4;
    }
    while (v4 < *v2);
  }
  return result;
}

double gleInitBufferState(uint64_t a1)
{
  *(void *)(a1 + 19376) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 19360) = 0u;
  *(_OWORD *)(a1 + 19344) = 0u;
  *(_OWORD *)(a1 + 19328) = 0u;
  *(_OWORD *)(a1 + 19312) = 0u;
  *(void *)(a1 + 26312) = 0;
  *(void *)(a1 + 26304) = 0;
  return result;
}

uint64_t gleInitVertexArrayState(uint64_t a1)
{
  uint64_t v2 = (unsigned char *)(a1 + 32496);
  VertexArrayHashObject = gleCreateVertexArrayHashObject(a1, 0);
  unint64_t v4 = (uint64_t *)(VertexArrayHashObject + 40);
  uint64_t result = gleCreatePluginVertexArray(a1, (uint64_t)(VertexArrayHashObject + 40));
  *(void *)(a1 + 26392) = VertexArrayHashObject;
  *(void *)(a1 + 26384) = VertexArrayHashObject;
  uint64_t v6 = *v2;
  if (*v2)
  {
    uint64_t v7 = v2 + 1048;
    do
    {
      uint64_t v8 = *v4++;
      *uint64_t v7 = v8;
      v7 += 209;
      --v6;
    }
    while (v6);
  }
  ++*((_DWORD *)VertexArrayHashObject + 5);
  return result;
}

uint64_t gleCreatePluginVertexArray(uint64_t result, uint64_t a2)
{
  uint64_t v2 = (unsigned __int8 *)(result + 32496);
  if (*(unsigned char *)(result + 32496))
  {
    uint64_t v3 = a2;
    unint64_t v4 = 0;
    uint64_t v5 = a2 + 96;
    uint64_t v6 = (void *)(result + 32520);
    uint64_t v7 = a2 + 1456;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(v6[205] + 1680))(*v6, v3, v5, v7);
      ++v4;
      v3 += 8;
      v6 += 209;
      v7 += 280;
    }
    while (v4 < *v2);
  }
  return result;
}

void gleInitQueryMachine(uint64_t a1)
{
  uint64_t v2 = a1 + 25904;
  gleInitHashMachine((void *)(a1 + 25904));
  uint64_t v3 = 0;
  *(_OWORD *)(v2 + 76) = 0u;
  *(_OWORD *)(a1 + 25968) = 0u;
  *(_OWORD *)(a1 + 25952) = 0u;
  *(_OWORD *)(a1 + 25936) = 0u;
  uint64_t v4 = *(unsigned __int8 *)(a1 + 32496);
  uint64_t v5 = (void *)(a1 + 33608);
  do
  {
    if (v4)
    {
      uint64_t v6 = v4;
      uint64_t v7 = v5;
      do
      {
        *uint64_t v7 = 0;
        v7 += 209;
        --v6;
      }
      while (v6);
    }
    ++v3;
    ++v5;
  }
  while (v3 != 12);
}

uint64_t gleUpdateState(int8x16_t *a1)
{
  uint64_t v2 = &a1[1790].i8[12];
  uint64_t v3 = &a1[1546].u8[14];
  uint64_t v4 = &a1[930].u8[8];
  a1[1790].i32[3] = 0;
  a1[95] = vorrq_s8(a1[95], (int8x16_t)xmmword_227DC2030);
  a1[96] = vorrq_s8(a1[96], (int8x16_t)xmmword_227DC2040);
  a1[1862].i32[2] |= 0xDE3C0478;
  if (!a1[930].i8[10] || a1[1547].i8[4] || (a1[1554].i8[0] & 1) != 0) {
    __int8 v5 = a1[2031].i8[10];
  }
  else {
    __int8 v5 = *(unsigned __int16 *)v4 == 33274;
  }
  a1[955].i8[3] = v5;
  gleUpdateViewScissorData((uint64_t)a1);
  gleUpdateLightColorChangeFunc((uint64_t)a1);
  int v6 = 0;
  *(unsigned char *)(a1[89].i64[0] + 496) = 63;
  *(unsigned char *)(a1[89].i64[1] + 496) = 63;
  do
  {
    gleUpdateLightPosition((uint64_t)a1, v6);
    gleUpdateLightDirection((uint64_t)a1, v6);
    gleUpdateLightExponents((uint64_t)a1, v6);
    gleUpdateLightAttenuation((uint64_t)a1, v6++);
  }
  while (v6 != 8);
  gleUpdateLightModel((uint64_t)a1);
  gleUpdateClipPlane((uint64_t)a1);
  gleUpdateMatrixMode((uint64_t)a1);
  gleUpdateDepthRangeData((uint64_t)a1);
  gleUpdateTextureCoordGen(a1);
  for (int i = 0; i != 8; ++i)
    gleUpdateTextureParams(a1, i);
  gleUpdateAnyDrawBuffersFloat((uint64_t)a1, v8, v9, v10);
  int v14 = *((unsigned __int16 *)v2 + 528);
  if (v14 == 35101) {
    LOBYTE(v14) = v2[3836] == 0;
  }
  v2[1062] = v14;
  int v15 = *((unsigned __int16 *)v2 + 529);
  if (v15 == 35101) {
    LOBYTE(v15) = v2[3836] == 0;
  }
  v4[290] = v15;
  int v16 = *((unsigned __int16 *)v2 + 530);
  if (v16 == 35101) {
    LOBYTE(v16) = v2[3837] == 0;
  }
  v4[291] = v16;
  gleUpdateBufferColorClamping((uint64_t)a1, v11, v12, v13);
  gleUpdateFragmentColorClamping((uint64_t)a1);
  int v17 = *(_DWORD *)(v3 + 114);
  if ((v17 & 8) != 0)
  {
    uint64_t v20 = a1[1548].i64[0];
    if (!v20) {
      uint64_t v20 = *(void *)(a1[1548].i64[1] + 64);
    }
    if (*(unsigned char *)(v20 + 2326)) {
      int v18 = 0;
    }
    else {
      int v18 = v2[1062];
    }
    if (!*(unsigned char *)(v20 + 2327)) {
      goto LABEL_32;
    }
    goto LABEL_29;
  }
  if (v17)
  {
    uint64_t v21 = a1[1548].i64[0];
    if (!v21) {
      uint64_t v21 = *(void *)(a1[1548].i64[1] + 40);
    }
    if (*(unsigned char *)(v21 + 214)) {
      int v18 = 0;
    }
    else {
      int v18 = v2[1062];
    }
    if (!*(unsigned char *)(v21 + 215))
    {
LABEL_32:
      int v19 = v2[1062];
      goto LABEL_33;
    }
LABEL_29:
    int v19 = 0;
    goto LABEL_33;
  }
  int v18 = v2[1062];
  int v19 = v18;
LABEL_33:
  if (v18 != v4[2814] || v19 != v4[2815])
  {
    v4[2814] = v18;
    v4[2815] = v19;
    a1[95].i32[1] |= 0x400000u;
    *(_DWORD *)uint64_t v2 = 0;
    a1[96].i32[3] |= 0x400u;
  }
  gleUpdatePointSmooth((uint64_t)a1);
  if (v3[114])
  {
    gleSetColorMaterialEnable((uint64_t)a1);
    int v23 = *(_DWORD *)(v3 + 114) & 9;
    if (v23 || v3[6])
    {
      int v24 = v3[1];
    }
    else
    {
      int v24 = v4[2];
      if (v4[2]) {
        int v24 = v4[4] != 0;
      }
    }
    if (v24 != v4[2813])
    {
      v4[2813] = v24;
      a1[95].i32[3] |= 0x40000000u;
      *(_DWORD *)uint64_t v2 = 0;
      __int32 v25 = a1[96].i32[3];
      a1[96].i32[3] = v25 | 0x10008400;
      if ((*(unsigned char *)(a1[1814].i64[1] + 25) & 0x7F) != 0) {
        a1[96].i32[3] = v25 | 0x10038400;
      }
    }
    if (v23 || v3[6])
    {
      int v26 = *v3;
    }
    else if (v4[491])
    {
      int v26 = 1;
    }
    else
    {
      int v26 = v4[490] != 0;
    }
    int v22 = 0;
    if (v26 != v4[2812])
    {
      v4[2812] = v26;
      a1[95].i32[3] |= 0x40000000u;
      *(_DWORD *)uint64_t v2 = 0;
      a1[96].i32[3] |= 0x10000000u;
    }
  }
  else
  {
    if (v3[6] || a1[1530].i64[0]) {
      gleVPEnable((uint64_t)a1);
    }
    else {
      gleVPDisable((uint64_t)a1);
    }
    int v22 = 1;
  }
  if ((v3[114] & 8) != 0)
  {
    gleUpdateInvalidPrimitives((uint64_t)a1);
    int v27 = *(_DWORD *)(v3 + 114);
    if ((v27 & 9) != 0 || v3[6])
    {
      int v28 = v3[1];
    }
    else
    {
      int v28 = v4[2];
      if (v4[2]) {
        int v28 = v4[4] != 0;
      }
    }
    if (v28 != v4[2813])
    {
      v4[2813] = v28;
      a1[95].i32[3] |= 0x40000000u;
      *(_DWORD *)uint64_t v2 = 0;
      __int32 v29 = a1[96].i32[3];
      a1[96].i32[3] = v29 | 0x10008400;
      if ((*(unsigned char *)(a1[1814].i64[1] + 25) & 0x7F) != 0) {
        a1[96].i32[3] = v29 | 0x10038400;
      }
    }
    if ((v27 & 9) != 0 || v3[6])
    {
      int v30 = *v3;
    }
    else if (v4[491])
    {
      int v30 = 1;
    }
    else
    {
      int v30 = v4[490] != 0;
    }
    if (v30 != v4[2812])
    {
      v4[2812] = v30;
      a1[95].i32[3] |= 0x40000000u;
      *(_DWORD *)uint64_t v2 = 0;
      a1[96].i32[3] |= 0x10000000u;
    }
  }
  else
  {
    gleGPDisable((uint64_t)a1);
    int v27 = *(_DWORD *)(v3 + 114);
    int v22 = 1;
  }
  if ((v27 & 0x10) != 0)
  {
    uint64_t result = gleUpdateFogData((uint64_t)a1);
    if (!v22) {
      uint64_t result = gleUpdateInverseNeeds((uint64_t)a1);
    }
  }
  else
  {
    uint64_t result = gleFPChanged((uint64_t)a1);
  }
  if (v4[3])
  {
    *(_DWORD *)uint64_t v2 = 0;
    unsigned int v32 = a1[96].i32[2] | 0x2000000;
  }
  else
  {
    unsigned int v32 = a1[96].i32[2] & 0xFDFFFFFF;
  }
  a1[96].i32[2] = v32;
  __int32 v33 = a1[96].i32[1];
  if ((v33 & 0x10000000) != 0 && v2[3832]) {
    a1[96].i32[1] = v33 & 0xEFFFFFFF;
  }
  int v34 = *((_DWORD *)v2 + 287);
  if ((v34 & 0x10000000) != 0)
  {
    if (v2[3834])
    {
      uint64_t v35 = a1[1810].i64[0];
      if (!v35 || *(_DWORD *)(v35 + 480) != 0xFFFF && !*(unsigned char *)(v35 + 88 * v2[3848] + 640))
      {
        v34 &= ~0x10000000u;
        *((_DWORD *)v2 + 287) = v34;
      }
    }
  }
  if ((v34 & 0x2000000) != 0)
  {
    if (v2[3833])
    {
      uint64_t v36 = a1[1810].i64[1];
      if (!v36 || *(_DWORD *)(v36 + 480) != 0xFFFF && !*(unsigned char *)(v36 + 88 * v2[3848] + 640)) {
        *((_DWORD *)v2 + 287) = v34 & 0xFDFFFFFF;
      }
    }
  }
  return result;
}

uint64_t gleUpdateLightColorChangeFunc(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *(**)(uint64_t, void *))(result + 1456);
  int v3 = *(unsigned __int16 *)(result + 14884);
  if (v3 == 1029)
  {
    unsigned int v6 = *(unsigned __int16 *)(result + 14886);
    if (v6 > 0x1201)
    {
      if (v6 == 4610)
      {
        __int8 v5 = gleLightMaterialRGBAChange_B_S;
        goto LABEL_30;
      }
      double v8 = gleLightMaterialRGBAChange_B_E;
      if (v6 == 5632) {
        goto LABEL_31;
      }
    }
    else
    {
      if (v6 == 4608)
      {
        __int8 v5 = gleLightMaterialRGBAChange_B_A;
        goto LABEL_30;
      }
      if (v6 == 4609)
      {
        __int8 v5 = gleLightMaterialRGBAChange_B_D;
        goto LABEL_30;
      }
    }
    __int8 v5 = gleLightMaterialRGBAChange_B_AD;
    goto LABEL_30;
  }
  if (v3 != 1028)
  {
    unsigned int v7 = *(unsigned __int16 *)(result + 14886);
    if (v7 > 0x1201)
    {
      if (v7 == 4610)
      {
        __int8 v5 = gleLightMaterialRGBAChange_FB_S;
        goto LABEL_30;
      }
      double v8 = gleLightMaterialRGBAChange_FB_E;
      if (v7 == 5632) {
        goto LABEL_31;
      }
    }
    else
    {
      if (v7 == 4608)
      {
        __int8 v5 = gleLightMaterialRGBAChange_FB_A;
        goto LABEL_30;
      }
      if (v7 == 4609)
      {
        __int8 v5 = gleLightMaterialRGBAChange_FB_D;
        goto LABEL_30;
      }
    }
    __int8 v5 = gleLightMaterialRGBAChange_FB_AD;
    goto LABEL_30;
  }
  unsigned int v4 = *(unsigned __int16 *)(result + 14886);
  if (v4 > 0x1201)
  {
    if (v4 == 4610)
    {
      __int8 v5 = gleLightMaterialRGBAChange_F_S;
      goto LABEL_30;
    }
    double v8 = gleLightMaterialRGBAChange_F_E;
    if (v4 == 5632) {
      goto LABEL_31;
    }
LABEL_17:
    __int8 v5 = gleLightMaterialRGBAChange_F_AD;
    goto LABEL_30;
  }
  if (v4 == 4608)
  {
    __int8 v5 = gleLightMaterialRGBAChange_F_A;
    goto LABEL_30;
  }
  if (v4 != 4609) {
    goto LABEL_17;
  }
  __int8 v5 = gleLightMaterialRGBAChange_F_D;
LABEL_30:
  double v8 = v5;
LABEL_31:
  if (v2 != v8)
  {
    if (*(unsigned char *)(result + 14891) && !*(unsigned char *)(result + 1452)) {
      uint64_t result = (uint64_t)v2(result, (void *)(result + 8464));
    }
    if (*(unsigned char *)(v1 + 1452)) {
      uint64_t result = (uint64_t)v8(v1, (void *)(v1 + 8464));
    }
  }
  *(void *)(v1 + 1456) = v8;
  *(void *)(v1 + 1464) = v8;
  return result;
}

uint64_t gleSetColorMaterialEnable(uint64_t result)
{
  if (*(unsigned char *)(result + 32481)) {
    goto LABEL_2;
  }
  int v1 = *(unsigned __int8 *)(result + 14891);
  if (*(unsigned char *)(result + 14891))
  {
    if (*(void *)(result + 24480) || *(unsigned char *)(result + 24756))
    {
LABEL_2:
      int v1 = 0;
      goto LABEL_3;
    }
    int v1 = (*(unsigned char *)(result + 24864) & 1) == 0;
  }
LABEL_3:
  if (*(unsigned __int8 *)(result + 1452) != v1)
  {
    *(unsigned char *)(result + 1452) = v1;
    if (v1) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(result + 1456))(result, result + 8464);
    }
  }
  return result;
}

void gleUpdateLightPosition(uint64_t a1, int a2)
{
  uint64_t v5 = a1 + 784;
  unsigned int v6 = (float32x2_t *)(a1 + 160 * a2);
  unsigned int v7 = v6 + 1580;
  float32x2_t v8 = v6[1574];
  v6[1580] = v8;
  float v9 = v6[1575].f32[0];
  v6[1581].f32[0] = v9;
  float v10 = v6[1575].f32[1];
  if (v10 == 0.0)
  {
    uint64_t v11 = a1 + 160 * a2;
    gleVectorNormalize(a1, (float *)v7, (float *)(v11 + 12672));
    *unsigned int v7 = *(float32x2_t *)(v11 + 12672);
    v7[1].i32[0] = *(_DWORD *)(v11 + 12680);
    int v12 = 1;
  }
  else
  {
    if (v10 != 1.0)
    {
      float v13 = 1.0 / v10;
      *unsigned int v7 = vmul_n_f32(v8, v13);
      v6[1581].f32[0] = v9 * v13;
    }
    gleVectorNormalize(a1, (float *)v7, (float *)(a1 + 160 * a2 + 12672));
    int v12 = 0;
  }
  uint64_t v14 = a1 + 160 * a2;
  *(float *)(v14 + 12680) = *(float *)(v14 + 12680) + 1.0;
  gleVectorNormalize(a1, (float *)(v14 + 12672), (float *)(v14 + 12672));
  uint64_t v15 = v5 + 80 * a2;
  int v17 = *(unsigned __int8 *)(v15 + 25);
  int v16 = (unsigned char *)(v15 + 25);
  if (v17 != v12)
  {
    unsigned char *v16 = v12;
    gleUpdateLightFast(a1, a2);
    *(_DWORD *)(a1 + 28652) = 0;
    *(_DWORD *)(a1 + 1548) |= 0x10020u;
  }
  uint64_t v18 = *(void *)(a1 + 19248);
  if (v18)
  {
    unint64_t v19 = *(unsigned __int16 *)(v18 + 20 * a2 + 2566);
    if (v19 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v19 >> 3) & 0x1FFC) + 1552) |= 1 << v19;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x800000u;
    }
  }
  uint64_t v20 = *(void *)(a1 + 19272);
  if (v20)
  {
    unint64_t v21 = *(unsigned __int16 *)(v20 + 20 * a2 + 2566);
    if (v21 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v21 >> 3) & 0x1FFC) + 1936) |= 1 << v21;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x4000000u;
    }
  }
  uint64_t v22 = *(void *)(a1 + 19280);
  if (v22)
  {
    unint64_t v23 = *(unsigned __int16 *)(v22 + 20 * a2 + 2566);
    if (v23 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v23 >> 3) & 0x1FFC) + 2064) |= 1 << v23;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x8000000u;
    }
  }
  if (v18)
  {
    unint64_t v24 = *(unsigned __int16 *)(v18 + 20 * a2 + 2572);
    if (v24 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v24 >> 3) & 0x1FFC) + 1552) |= 1 << v24;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x800000u;
    }
  }
  if (v20)
  {
    unint64_t v25 = *(unsigned __int16 *)(v20 + 20 * a2 + 2572);
    if (v25 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v25 >> 3) & 0x1FFC) + 1936) |= 1 << v25;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x4000000u;
    }
  }
  if (v22)
  {
    unint64_t v26 = *(unsigned __int16 *)(v22 + 20 * a2 + 2572);
    if (v26 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v26 >> 3) & 0x1FFC) + 2064) |= 1 << v26;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x8000000u;
    }
  }
  if (v18)
  {
    unint64_t v27 = *(unsigned __int16 *)(v18 + 20 * a2 + 2574);
    if (v27 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v27 >> 3) & 0x1FFC) + 1552) |= 1 << v27;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x800000u;
    }
  }
  if (v20)
  {
    unint64_t v28 = *(unsigned __int16 *)(v20 + 20 * a2 + 2574);
    if (v28 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v28 >> 3) & 0x1FFC) + 1936) |= 1 << v28;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x4000000u;
    }
  }
  if (v22)
  {
    unint64_t v29 = *(unsigned __int16 *)(v22 + 20 * a2 + 2574);
    if (v29 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v29 >> 3) & 0x1FFC) + 2064) |= 1 << v29;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x8000000u;
    }
  }
}

uint64_t gleUpdateLightFast(uint64_t result, int a2)
{
  uint64_t v2 = result + 784;
  int v3 = *(_DWORD *)(result + 1448);
  if ((((unint64_t)*(unsigned int *)(result + 14880) >> a2) & 1) != 0
    && (*(unsigned char *)(v2 + 80 * a2 + 26) || *(unsigned char *)(result + 14893) || !*(unsigned char *)(v2 + 80 * a2 + 25)))
  {
    *(unsigned char *)(v2 + 80 * a2 + 24) = 0;
    *(_DWORD *)(result + 1448) = v3 | (1 << a2);
    if (!v3)
    {
LABEL_8:
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1548) |= 0x18000u;
    }
  }
  else
  {
    *(unsigned char *)(v2 + 80 * a2 + 24) = 1;
    BOOL v4 = v3 == 0;
    int v5 = v3 & ~(1 << a2);
    *(_DWORD *)(result + 1448) = v5;
    if (((v4 ^ (v5 != 0)) & 1) == 0) {
      goto LABEL_8;
    }
  }
  return result;
}

void gleUpdateLightDirection(uint64_t a1, int a2)
{
  gleVectorNormalize(a1, (float *)(a1 + 160 * a2 + 12608), (float *)(a1 + 160 * a2 + 12656));
  uint64_t v4 = *(void *)(a1 + 19248);
  if (v4)
  {
    unint64_t v5 = *(unsigned __int16 *)(v4 + 20 * a2 + 2568);
    if (v5 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v5 >> 3) & 0x1FFC) + 1552) |= 1 << v5;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x800000u;
    }
  }
  uint64_t v6 = *(void *)(a1 + 19272);
  if (v6)
  {
    unint64_t v7 = *(unsigned __int16 *)(v6 + 20 * a2 + 2568);
    if (v7 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v7 >> 3) & 0x1FFC) + 1936) |= 1 << v7;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x4000000u;
    }
  }
  uint64_t v8 = *(void *)(a1 + 19280);
  if (v8)
  {
    unint64_t v9 = *(unsigned __int16 *)(v8 + 20 * a2 + 2568);
    if (v9 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v9 >> 3) & 0x1FFC) + 2064) |= 1 << v9;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x8000000u;
    }
  }
  if (v4)
  {
    unint64_t v10 = *(unsigned __int16 *)(v4 + 20 * a2 + 2576);
    if (v10 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v10 >> 3) & 0x1FFC) + 1552) |= 1 << v10;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x800000u;
    }
  }
  if (v6)
  {
    unint64_t v11 = *(unsigned __int16 *)(v6 + 20 * a2 + 2576);
    if (v11 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v11 >> 3) & 0x1FFC) + 1936) |= 1 << v11;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x4000000u;
    }
  }
  if (v8)
  {
    unint64_t v12 = *(unsigned __int16 *)(v8 + 20 * a2 + 2576);
    if (v12 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v12 >> 3) & 0x1FFC) + 2064) |= 1 << v12;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x8000000u;
    }
  }
}

void gleUpdateLightExponents(uint64_t a1, int a2)
{
  uint64_t v4 = a2;
  uint64_t v5 = a1 + 784;
  if (*(float *)(a1 + 160 * a2 + 12688) <= 90.0)
  {
    unint64_t v7 = (float *)(v5 + 80 * a2);
    uint64_t v8 = a1 + 160 * a2;
    float v9 = *(float *)(v8 + 12636);
    if (*v7 != v9)
    {
      *unint64_t v7 = v9;
      if (v9 <= 0.000005)
      {
        __asm { FMOV            V0.4S, #1.0 }
        *(_OWORD *)(v5 + 80 * a2 + 4) = _Q0;
        memset_pattern16((void *)(a1 + 80 * a2 + 816), &unk_227DC20E0, 0x2CuLL);
      }
      else
      {
        unint64_t v10 = (float *)(v8 + 12636);
        *(float *)&long long v11 = expf(-5.5215 / v9);
        unint64_t v12 = (float32x2_t *)(v5 + 80 * v4);
        v12->i32[1] = v11;
        v13.f32[0] = 1.0 - *(float *)&v11;
        float v24 = 1.0 - *(float *)&v11;
        long long v25 = v11;
        v13.i32[1] = v11;
        v12[1] = vdiv_f32((float32x2_t)0x3B83126F41200000, v13);
        uint64_t v14 = 0;
        v12[2].f32[0] = exp2f(v9) + -1.0;
        do
        {
          *(float *)(a1 + 80 * v4 + 816 + v14) = powf(*(float *)&v25, *v10);
          long long v15 = v25;
          *(float *)&long long v15 = (float)(v24 / 10.0) + *(float *)&v25;
          long long v25 = v15;
          v14 += 4;
        }
        while (v14 != 40);
        *(_DWORD *)(v5 + 80 * (int)v4 + 72) = 1065353216;
      }
    }
    int v6 = 1;
  }
  else
  {
    int v6 = 0;
  }
  uint64_t v21 = v5 + 80 * (int)v4;
  int v23 = *(unsigned __int8 *)(v21 + 26);
  uint64_t v22 = (unsigned char *)(v21 + 26);
  if (v23 != v6)
  {
    unsigned char *v22 = v6;
    gleUpdateLightFast(a1, a2);
    *(_DWORD *)(a1 + 28652) = 0;
    *(_DWORD *)(a1 + 1548) |= 0x10020u;
  }
}

uint64_t gleUpdateLightAttenuation(uint64_t result, int a2)
{
  uint64_t v2 = result + 784;
  float v3 = *(float *)(result + 160 * a2 + 12624);
  if (v3 >= 0.000005 || v3 <= -0.000005)
  {
    if (*(float *)(result + 160 * a2 + 12628) == 0.0 && *(float *)(result + 160 * a2 + 12632) == 0.0)
    {
      *(unsigned char *)(v2 + 80 * a2 + 27) = 1;
      int v4 = v3 == 1.0;
    }
    else
    {
      int v4 = 0;
      *(unsigned char *)(v2 + 80 * a2 + 27) = 0;
    }
    *(float *)(v2 + 80 * a2 + 20) = 1.0 / v3;
  }
  else
  {
    int v4 = 0;
    *(unsigned char *)(v2 + 80 * a2 + 27) = 0;
  }
  uint64_t v5 = v2 + 80 * a2;
  int v7 = *(unsigned __int8 *)(v5 + 28);
  int v6 = (unsigned char *)(v5 + 28);
  if (v7 != v4)
  {
    unsigned char *v6 = v4;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1548) |= 0x10020u;
  }
  uint64_t v8 = *(void *)(result + 19248);
  if (v8)
  {
    unint64_t v9 = *(unsigned __int16 *)(v8 + 20 * a2 + 2570);
    if (v9 <= 0x3FF)
    {
      *(_DWORD *)(result + ((v9 >> 3) & 0x1FFC) + 1552) |= 1 << v9;
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1532) |= 0x800000u;
    }
  }
  uint64_t v10 = *(void *)(result + 19272);
  if (v10)
  {
    unint64_t v11 = *(unsigned __int16 *)(v10 + 20 * a2 + 2570);
    if (v11 <= 0x3FF)
    {
      *(_DWORD *)(result + ((v11 >> 3) & 0x1FFC) + 1936) |= 1 << v11;
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1532) |= 0x4000000u;
    }
  }
  uint64_t v12 = *(void *)(result + 19280);
  if (v12)
  {
    unint64_t v13 = *(unsigned __int16 *)(v12 + 20 * a2 + 2570);
    if (v13 <= 0x3FF)
    {
      *(_DWORD *)(result + ((v13 >> 3) & 0x1FFC) + 2064) |= 1 << v13;
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1532) |= 0x8000000u;
    }
  }
  return result;
}

uint64_t gleUpdateInverseNeeds(uint64_t result)
{
  int v1 = *(unsigned char **)(result + 29032);
  char v2 = v1[24];
  *(void *)(result + 2216) = 0x89D8E67F80000000;
  int v3 = v1[101];
  if (v1[101])
  {
    unsigned int v4 = -1073741824;
    *(_DWORD *)(result + 2216) = -1073741824;
  }
  else
  {
    unsigned int v4 = 0x80000000;
  }
  uint64_t v5 = (unsigned char *)(result + 32505);
  int v6 = -1982011777;
  if ((v2 & 0x20) != 0)
  {
    *(_DWORD *)(result + 2220) = -1982011777;
    if ((v2 & 0x40) == 0) {
      goto LABEL_12;
    }
  }
  else
  {
    int v6 = -1982273921;
    if ((v2 & 0x40) == 0) {
      goto LABEL_12;
    }
  }
  if (v3 || *v5) {
    v6 |= 0x30000000u;
  }
  v6 |= 0x40000000u;
  *(_DWORD *)(result + 2220) = v6;
LABEL_12:
  int v7 = *(_DWORD *)(result + 24864);
  if (v7)
  {
    uint64_t v9 = *(void *)(result + 24768);
    if (!v9) {
      uint64_t v9 = *(void *)(*(void *)(result + 24776) + 40);
    }
    v4 |= *(_DWORD *)(v9 + 224);
    goto LABEL_36;
  }
  if (*(unsigned char *)(result + 24756))
  {
    uint64_t v8 = *(void *)(result + 24400);
    v4 |= *(_DWORD *)(v8 + 180);
    *(_DWORD *)(result + 2216) = v4;
    if (!v1[103] || !*(unsigned char *)(result + 28744) || !*(unsigned char *)(v8 + 457)) {
      goto LABEL_37;
    }
    goto LABEL_35;
  }
  int v10 = *(unsigned __int8 *)(result + 14890);
  if (*(unsigned char *)(result + 14890) || *(void *)(result + 23800))
  {
    if (*(unsigned char *)(result + 17699))
    {
      v4 |= 0xFFE0u;
    }
    else if (*(unsigned char *)(result + 17697))
    {
      v4 |= 16 * (0xFFFFFFFF >> -*(unsigned char *)(result + 17696));
    }
    else
    {
      v4 |= 0x10u;
    }
    *(_DWORD *)(result + 2216) = v4;
  }
  if (v3 || *v5)
  {
    v6 |= 0x10000u;
    *(_DWORD *)(result + 2220) = v6;
    if (v10)
    {
      v4 |= 0x1000000u;
      *(_DWORD *)(result + 2216) = v4;
    }
  }
  if (v1[103] && *(unsigned char *)(result + 28744))
  {
LABEL_35:
    v4 |= 8u;
LABEL_36:
    *(_DWORD *)(result + 2216) = v4;
  }
LABEL_37:
  if ((v7 & 8) != 0)
  {
    uint64_t v11 = *(void *)(result + 24768);
    if (!v11) {
      uint64_t v11 = *(void *)(*(void *)(result + 24776) + 64);
    }
    v4 |= *(_DWORD *)(v11 + 2336);
    *(_DWORD *)(result + 2216) = v4;
  }
  if ((v7 & 0x10) != 0)
  {
    uint64_t v13 = *(void *)(result + 24768);
    if (!v13) {
      uint64_t v13 = *(void *)(*(void *)(result + 24776) + 72);
    }
    int v12 = *(_DWORD *)(v13 + 3040);
    goto LABEL_47;
  }
  if (*(unsigned char *)(result + 24760))
  {
    int v12 = *(_DWORD *)(*(void *)(result + 24432) + 180);
LABEL_47:
    *(_DWORD *)(result + 2216) = v4 | v12;
    return result;
  }
  *(_DWORD *)(result + 2220) = v6 | 0x20000;
  return result;
}

uint64_t gleUpdateLightModel(uint64_t a1)
{
  for (int i = 0; i != 8; ++i)
    uint64_t result = gleUpdateLightFast(a1, i);
  *(_DWORD *)(a1 + 28652) = 0;
  *(_DWORD *)(a1 + 1548) |= 0x10020u;
  return result;
}

uint64_t gleUpdateClipPlane(uint64_t result)
{
  int v1 = 0;
  int v2 = 0;
  int v3 = *(unsigned __int8 *)(result + 28744);
  *(unsigned char *)(result + 28744) = 0;
  do
  {
    if ((*(_DWORD *)(result + 17572) >> v2))
    {
      *(unsigned char *)(result + 28744) = 1;
      uint64_t v4 = result + v1++;
      *(unsigned char *)(v4 + 28736) = v2;
    }
    ++v2;
  }
  while (v2 != 8);
  *(_DWORD *)(result + 28732) = v1;
  if (v3 != *(unsigned __int8 *)(result + 28744))
  {
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1548) |= 0x18200u;
    if (*(unsigned char *)(*(void *)(result + 29032) + 103)) {
      return gleUpdateInverseNeeds(result);
    }
  }
  return result;
}

uint64_t gleUpdateMatrixMode(uint64_t result)
{
  uint64_t v1 = *(int *)(result + 20484);
  if ((int)v1 <= 23)
  {
    uint64_t v2 = result + (v1 << 6);
    *(void *)(result + 19976) = v2 + 9360;
    *(void *)(result + 19984) = v2 + 10896;
    if ((v1 - 3) >= 2) {
      int v3 = 1 << v1;
    }
    else {
      int v3 = (1 << v1) | 2;
    }
    *(_DWORD *)(result + 20488) = v3;
  }
  return result;
}

uint64_t gleUpdateDepthRangeData(uint64_t a1)
{
  return gleUpdateDepthRangeDataIndexed(a1, 0);
}

uint64_t gleUpdateTextureCoordGen(_DWORD *a1)
{
  uint64_t v2 = 0;
  int v3 = 0;
  int v4 = 0;
  int v5 = 0;
  int v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = a1 + 5948;
  int v9 = a1[5950];
  int v10 = a1[5951];
  unsigned int v11 = a1[5948];
  int v12 = a1[5949];
  *((void *)a1 + 2974) = 0;
  uint64_t v13 = a1 + 4124;
  *((void *)a1 + 2975) = 0;
  uint64_t result = 9217;
  do
  {
    long long v15 = &v13[v2];
    if (LOBYTE(v13[v2 + 9]))
    {
      int v16 = 1 << v7;
      int v17 = *((unsigned __int16 *)v15 - 54);
      if (v17 <= 9217)
      {
        if (v17 == 9216)
        {
          v4 |= v16;
          v8[1] = v4;
        }
        else if (v17 == 9217)
        {
          v3 |= v16;
          *uint64_t v8 = v3;
        }
      }
      else
      {
        if (v17 == 9218)
        {
          v6 |= v16;
          v5 |= v16;
          v8[2] = v6;
LABEL_16:
          v8[3] = v5;
          goto LABEL_19;
        }
        if (v17 != 34065)
        {
          if (v17 != 34066) {
            goto LABEL_19;
          }
          v5 |= v16;
          goto LABEL_16;
        }
        v6 |= v16;
        v8[2] = v6;
      }
    }
    else if (!*((unsigned char *)v15 + 37) && !BYTE2(v13[v2 + 9]) && !HIBYTE(v13[v2 + 9]))
    {
      goto LABEL_47;
    }
LABEL_19:
    uint64_t v18 = &v13[v2];
    if (BYTE1(v13[v2 + 9]))
    {
      int v19 = 256 << v7;
      unsigned int v20 = *((unsigned __int16 *)v18 - 36);
      if (v20 <= 0x2401)
      {
        if (v20 == 9216)
        {
          v4 |= v19;
          v8[1] = v4;
        }
        else if (v20 == 9217)
        {
          v3 |= v19;
          *uint64_t v8 = v3;
        }
        goto LABEL_32;
      }
      switch(v20)
      {
        case 0x2402u:
          v6 |= v19;
          v5 |= v19;
          v8[2] = v6;
          goto LABEL_29;
        case 0x8511u:
          v6 |= v19;
          v8[2] = v6;
          break;
        case 0x8512u:
          v5 |= v19;
LABEL_29:
          v8[3] = v5;
          break;
      }
    }
LABEL_32:
    if (*((unsigned char *)v18 + 38))
    {
      int v21 = 0x10000 << v7;
      unsigned int v22 = LOWORD(v13[v2 - 9]);
      if (v22 > 0x8510)
      {
        if (v22 == 34065)
        {
          v6 |= v21;
          v8[2] = v6;
        }
        else if (v22 == 34066)
        {
          v5 |= v21;
          v8[3] = v5;
        }
      }
      else if (v22 == 9216)
      {
        v4 |= v21;
        v8[1] = v4;
      }
      else if (v22 == 9217)
      {
        v3 |= v21;
        *uint64_t v8 = v3;
      }
    }
    if (HIBYTE(v13[v2 + 9]))
    {
      int v23 = 0x1000000 << v7;
      int v24 = LOWORD(v13[v2]);
      if (v24 == 9216)
      {
        v4 |= v23;
        v8[1] = v4;
      }
      else if (v24 == 9217)
      {
        v3 |= v23;
        *uint64_t v8 = v3;
      }
    }
LABEL_47:
    ++v7;
    v2 += 37;
  }
  while (v7 != 8);
  if (((v10 | v9) != 0) == ((v5 | v6) == 0))
  {
    uint64_t result = gleUpdateInverseNeeds((uint64_t)a1);
    v8[1215] = 0;
    a1[387] |= 0x8002u;
    int v3 = *v8;
    int v4 = v8[1];
  }
  if (v3 != v11 || v4 != v12)
  {
    v8[1215] = 0;
    int v25 = a1[387];
    a1[387] = v25 | 0x18008;
    if (((v4 | v3) ^ (v12 | v11)) >> 24) {
      a1[387] = v25 | 0x1C008;
    }
  }
  if (v8[3] != v10 || v8[2] != v9)
  {
    v8[1215] = 0;
    a1[387] |= 0x18010u;
  }
  return result;
}

_DWORD *gleUpdateTextureParams(_DWORD *result, int a2)
{
  int v2 = result[5946];
  int v3 = 1 << a2;
  if (((result[19 * a2 + 3921] & 0x1F) != 0) == ((v2 & (1 << a2)) == 0))
  {
    int v4 = v2 | v3;
    int v5 = v2 & ~v3;
    if ((result[19 * a2 + 3921] & 0x1F) != 0) {
      int v6 = v4;
    }
    else {
      int v6 = v5;
    }
    result[5946] = v6;
  }
  result[7163] = 0;
  result[387] |= 0x20000u;
  return result;
}

uint64_t gleUpdateFogData(uint64_t result)
{
  uint64_t v1 = (unsigned char *)(result + 29592);
  int v2 = *(_DWORD *)(result + 24864);
  if (v2)
  {
    int v4 = 0;
    BOOL v3 = 1;
    if ((v2 & 0x10) != 0) {
      goto LABEL_9;
    }
  }
  else
  {
    BOOL v3 = *(unsigned char *)(result + 24756) != 0;
    if (*(unsigned char *)(result + 24756)) {
      int v4 = 0;
    }
    else {
      int v4 = -128;
    }
    if ((v2 & 0x10) != 0) {
      goto LABEL_9;
    }
  }
  if (*(unsigned char *)(result + 24760) || !*(unsigned char *)(result + 15282)) {
    goto LABEL_9;
  }
  if (v3 && *(unsigned char *)(result + 32480)
    || *(_WORD *)(result + 15292) == 4354
    || !*(unsigned char *)(*(void *)(result + 29032) + 104))
  {
    int v12 = 8;
  }
  else
  {
    int v12 = 16;
  }
  uint64_t v14 = *(void *)(result + 26000);
  int v15 = v4 | v12;
  if (*(_WORD *)(result + 15280) == 9474) {
    int v16 = v15 | 4;
  }
  else {
    int v16 = v15;
  }
  int v17 = *(unsigned __int16 *)(result + 15276);
  if (v17 == 2048)
  {
    int v4 = v16 | 2;
    if ((v16 & 0x10) == 0) {
      goto LABEL_9;
    }
    float v20 = *(float *)(v14 - 1104);
    if ((v16 & 4) != 0) {
      float v21 = fmaxf(v20, *(float *)(result + 288));
    }
    else {
      float v21 = fabsf(v20);
    }
    float v19 = *(float *)(result + 292)
        / (float)(*(float *)(result + 292)
                + (float)((float)-(float)(*(float *)(result + 292)
                                        - (float)((float)(*(float *)(result + 308)
                                                        + (float)((float)-(float)(*(float *)(result + 312)
                                                                                - (float)(*(float *)(result + 316)
                                                                                        * (float)-(float)(*(float *)(result + 15244) * v21)))
                                                                * (float)-(float)(*(float *)(result + 15244) * v21)))
                                                * (float)-(float)(*(float *)(result + 15244) * v21)))
                        * (float)-(float)(*(float *)(result + 15244) * v21)));
  }
  else if (v17 == 9729)
  {
    int v4 = v16 | 1;
    if ((v16 & 0x10) == 0) {
      goto LABEL_9;
    }
    float v18 = *(float *)(v14 - 1104);
    if ((v16 & 4) == 0) {
      float v18 = fabsf(v18);
    }
    float v19 = fminf(fmaxf((float)(*(float *)(result + 15252) - v18) * *(float *)(result + 15256), *(float *)(result + 288)), *(float *)(result + 292));
  }
  else
  {
    int v4 = v16 | 3;
    if ((v16 & 0x10) == 0) {
      goto LABEL_9;
    }
    float v22 = *(float *)(v14 - 1104) * *(float *)(result + 15244);
    float v19 = *(float *)(result + 292)
        / (float)(*(float *)(result + 292)
                + (float)((float)-(float)(*(float *)(result + 292)
                                        - (float)((float)(*(float *)(result + 308)
                                                        + (float)((float)-(float)(*(float *)(result + 312)
                                                                                - (float)(*(float *)(result + 316)
                                                                                        * (float)-(float)(v22 * v22)))
                                                                * (float)-(float)(v22 * v22)))
                                                * (float)-(float)(v22 * v22)))
                        * (float)-(float)(v22 * v22)));
  }
  *(float *)(v14 - 1100) = v19;
LABEL_9:
  if (*(unsigned __int16 *)(result + 15278) == 33873)
  {
    unsigned int v5 = v4 & 0xFFFFFF9F | 0x20;
  }
  else
  {
    unsigned int v6 = v4 & 0xFFFFFF9F;
    if (*(unsigned __int16 *)(result + 15280) == 34139) {
      unsigned int v5 = v6 | 0x40;
    }
    else {
      unsigned int v5 = v6;
    }
  }
  unsigned int v7 = *v1;
  if (v7 != v5)
  {
    int v8 = (v5 >> 5) & 3;
    if (((v7 & 0x60) != 32) == (v8 == 1))
    {
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1548) |= 0x8002u;
    }
    if (((v7 >> 5) & 3) != v8)
    {
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1548) |= 0x10008u;
    }
    char v9 = v7 ^ v5;
    if ((v9 & 0x18) != 0)
    {
      if ((v5 & 0x80u) != 0) {
        int v10 = 65544;
      }
      else {
        int v10 = 520;
      }
      int v11 = *(_DWORD *)(result + 1548) | v10;
    }
    else
    {
      if ((v5 & 0x10) != 0 && (v9 & 7) != 0)
      {
        if ((v5 & 0x80u) != 0) {
          int v13 = 65544;
        }
        else {
          int v13 = 520;
        }
        *(_DWORD *)(result + 28652) = 0;
        *(_DWORD *)(result + 1548) |= v13;
      }
      if ((v5 & 8) == 0 || (v9 & 7) == 0) {
        goto LABEL_40;
      }
      int v11 = *(_DWORD *)(result + 1548);
    }
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1548) = v11 | 0x20000;
LABEL_40:
    if ((v9 & 3) != 0)
    {
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1548) |= 0x30000000u;
    }
    *uint64_t v1 = v5;
  }
  return result;
}

uint64_t gleUpdateViewScissorData(uint64_t a1)
{
  return gleUpdateViewScissorDataIndexed(a1, 0);
}

uint64_t gleSelectVertexSubmitFunc(uint64_t result)
{
  uint64_t v1 = (unsigned char *)(result + 24756);
  *(void *)(result + 26152) = gleSetVertexSubmitFunc;
  *(void *)(result + 26160) = gleSetVertexSubmitFunc;
  *(void *)(result + 26168) = gleSetVertexConvertFunc;
  *(void *)(result + 26176) = gleSetVertexConvertFunc;
  *(void *)(result + 26184) = gleSetVertexArrayFunc;
  *(void *)(result + 26192) = gleSetVertexArrayFunc;
  *(void *)(result + 26200) = gleSetVertexElemFunc;
  *(void *)(result + 26208) = gleSetVertexElemFunc;
  uint64_t v2 = *(void *)(result + 26280);
  if (v2)
  {
    uint64_t v3 = *(void *)(result + 26288);
    __int16 v4 = 4 * *(unsigned __int8 *)(v2 + 2);
    *(_WORD *)(result + 26132) = v4;
    if (v3) {
      __int16 v4 = 4 * *(unsigned __int8 *)(v3 + 2);
    }
    *(_WORD *)(result + 26134) = v4;
  }
  if (*(_WORD *)(result + 29830) != 7168 || !v2 || !*(unsigned char *)(result + 32481))
  {
    uint64_t v5 = *(void *)(result + 24480);
    if (v5 || *v1 || (*(unsigned char *)(result + 24864) & 1) != 0)
    {
      if (*(unsigned char *)(result + 24864))
      {
        uint64_t v7 = *(void *)(result + 24768);
        if (!v7) {
          uint64_t v7 = *(void *)(*(void *)(result + 24776) + 40);
        }
        unsigned int v6 = (uint64_t *)(v7 + 736);
      }
      else if (*v1)
      {
        unsigned int v6 = (uint64_t *)(*(void *)(result + 24400) + 472);
      }
      else
      {
        unsigned int v6 = (uint64_t *)(v5 + 432);
      }
      uint64_t v8 = *v6;
      if (v8)
      {
        int v9 = 16 * *(_DWORD *)(v8 + 48);
        *(void *)(result + 26016) = (*(_DWORD *)(result + 26120) * v9) + *(void *)(result + 26000);
        *(_WORD *)(result + 26124) = v9;
      }
    }
    else
    {
      *(_WORD *)(result + 26124) = 640;
      *(void *)(result + 26016) = *(void *)(result + 26024);
    }
  }
  return result;
}

uint64_t gliInitDispatchTable(uint64_t result)
{
  uint64_t v1 = (unsigned __int8 *)(result + 32492);
  uint64_t v2 = *(uint64_t (***)(uint64_t))(result + 28976);
  uint64_t v3 = *(uint64_t (***)(uint64_t))(result + 28984);
  uint64_t v4 = 1036;
  uint64_t v5 = v3;
  do
  {
    if (!*v5++) {
      uint64_t v3 = v2;
    }
    *uint64_t v3 = glInvalidFunction;
    ++v2;
    uint64_t v3 = v5;
    --v4;
  }
  while (v4);
  int v7 = *(unsigned __int8 *)(result + 32501);
  if ((v7 - 3) >= 2)
  {
    if (v7 != 2) {
      goto LABEL_3098;
    }
    v323 = *(void **)(result + 28984);
    v324 = *(void **)(result + 28976);
    if (v323[1]) {
      uint64_t v325 = *(void *)(result + 28984);
    }
    else {
      uint64_t v325 = *(void *)(result + 28976);
    }
    if (*(void *)(result + 27648))
    {
      *(void *)(v325 + 8) = glAlphaFunc_Comp;
      if (v323[968]) {
        v326 = v323;
      }
      else {
        v326 = v324;
      }
      v326[968] = glAlphaFuncx_PackThread;
      if (v323[7]) {
        v327 = v323;
      }
      else {
        v327 = v324;
      }
      v327[7] = glBlendFunc_Comp;
      if (v323[49]) {
        v328 = v323;
      }
      else {
        v328 = v324;
      }
      v328[49] = glColorMask_Comp;
      if (v323[60]) {
        v329 = v323;
      }
      else {
        v329 = v324;
      }
      v329[60] = glDepthFunc_Comp;
      if (v323[61]) {
        v330 = v323;
      }
      else {
        v330 = v324;
      }
      v330[61] = glDepthMask_Comp;
      if (v323[161]) {
        v331 = v323;
      }
      else {
        v331 = v324;
      }
      v331[161] = glLogicOp_Comp;
      if (v323[254]) {
        v332 = v323;
      }
      else {
        v332 = v324;
      }
      v332[254] = glStencilFunc_Comp;
      if (v323[255]) {
        v333 = v323;
      }
      else {
        v333 = v324;
      }
      v333[255] = glStencilMask_Comp;
      if (v323[256]) {
        v334 = v323;
      }
      else {
        v334 = v324;
      }
      v334[256] = glStencilOp_Comp;
      if (v323[251]) {
        v335 = v323;
      }
      else {
        v335 = v324;
      }
      v335[251] = glScissor_Comp;
      if (v323[10]) {
        v336 = v323;
      }
      else {
        v336 = v324;
      }
      v336[10] = glClear_Comp;
      if (v323[12]) {
        v337 = v323;
      }
      else {
        v337 = v324;
      }
      v337[12] = glClearColor_Comp;
      if (v323[969]) {
        v338 = v323;
      }
      else {
        v338 = v324;
      }
      v338[969] = glClearColorx_PackThread;
      if (v323[15]) {
        v339 = v323;
      }
      else {
        v339 = v324;
      }
      v339[15] = glClearStencil_Comp;
      if (v323[878]) {
        v340 = v323;
      }
      else {
        v340 = v324;
      }
      v340[878] = glClearDepthf_PackThread;
      if (v323[970]) {
        v341 = v323;
      }
      else {
        v341 = v324;
      }
      v341[970] = glClearDepthx_PackThread;
      if (v323[37]) {
        v342 = v323;
      }
      else {
        v342 = v324;
      }
      v342[37] = glColor4f_Comp;
      if (v323[43]) {
        v343 = v323;
      }
      else {
        v343 = v324;
      }
      v343[43] = glColor4ub_Comp;
      if (v323[973]) {
        v344 = v323;
      }
      else {
        v344 = v324;
      }
      v344[973] = glColor4x_PackThread;
      if (v323[182]) {
        v345 = v323;
      }
      else {
        v345 = v324;
      }
      v345[182] = glNormal3f_Comp;
      if (v323[995]) {
        v346 = v323;
      }
      else {
        v346 = v324;
      }
      v346[995] = glNormal3x_PackThread;
      if (v323[369]) {
        v347 = v323;
      }
      else {
        v347 = v324;
      }
      v347[369] = glMultiTexCoord4f_Comp;
      if (v323[1007]) {
        v348 = v323;
      }
      else {
        v348 = v324;
      }
      v348[1007] = glMultiTexCoord4x_PackThread;
      if (v323[334]) {
        v349 = v323;
      }
      else {
        v349 = v324;
      }
      v349[334] = glVertexPointer_PackThread;
      if (v323[51]) {
        v350 = v323;
      }
      else {
        v350 = v324;
      }
      v350[51] = glColorPointer_PackThread;
      if (v323[188]) {
        v351 = v323;
      }
      else {
        v351 = v324;
      }
      v351[188] = glNormalPointer_PackThread;
      if (v323[289]) {
        v352 = v323;
      }
      else {
        v352 = v324;
      }
      v352[289] = glTexCoordPointer_PackThread;
      if (v323[341]) {
        v353 = v323;
      }
      else {
        v353 = v324;
      }
      v353[341] = glClientActiveTexture_PackThread;
      if (v323[64]) {
        v354 = v323;
      }
      else {
        v354 = v324;
      }
      v354[64] = glDisableClientState_PackThread;
      if (v323[73]) {
        v355 = v323;
      }
      else {
        v355 = v324;
      }
      v355[73] = glEnableClientState_PackThread;
      if (v323[65]) {
        v356 = v323;
      }
      else {
        v356 = v324;
      }
      v356[65] = glDrawArrays_PackThread;
      if (v323[67]) {
        v357 = v323;
      }
      else {
        v357 = v324;
      }
      v357[67] = glDrawElements_PackThread;
      if (v323[98]) {
        v358 = v323;
      }
      else {
        v358 = v324;
      }
      v358[98] = glGenTextures_ExecThread;
      if (v323[59]) {
        v359 = v323;
      }
      else {
        v359 = v324;
      }
      v359[59] = glDeleteTextures_ExecThread;
      if (v323[5]) {
        v360 = v323;
      }
      else {
        v360 = v324;
      }
      v360[5] = glBindTexture_Comp;
      if (v323[145]) {
        v361 = v323;
      }
      else {
        v361 = v324;
      }
      v361[145] = glIsTexture_ExecThread;
      if (v323[342]) {
        v362 = v323;
      }
      else {
        v362 = v324;
      }
      v362[342] = glActiveTexture_Comp;
      if (v323[54]) {
        v363 = v323;
      }
      else {
        v363 = v324;
      }
      v363[54] = glCopyTexImage2D_Comp;
      if (v323[56]) {
        v364 = v323;
      }
      else {
        v364 = v324;
      }
      v364[56] = glCopyTexSubImage2D_Comp;
      if (v323[301]) {
        v365 = v323;
      }
      else {
        v365 = v324;
      }
      v365[301] = glTexImage2D_PackThread;
      if (v323[307]) {
        v366 = v323;
      }
      else {
        v366 = v324;
      }
      v366[307] = glTexSubImage2D_PackThread;
      if (v323[380]) {
        v367 = v323;
      }
      else {
        v367 = v324;
      }
      v367[380] = glCompressedTexImage2D_PackThread;
      if (v323[383]) {
        v368 = v323;
      }
      else {
        v368 = v324;
      }
      v368[383] = glCompressedTexSubImage2D_PackThread;
      if (v323[302]) {
        v369 = v323;
      }
      else {
        v369 = v324;
      }
      v369[302] = glTexParameterf_Comp;
      if (v323[303]) {
        v370 = v323;
      }
      else {
        v370 = v324;
      }
      v370[303] = glTexParameterfv_Comp;
      if (v323[304]) {
        v371 = v323;
      }
      else {
        v371 = v324;
      }
      v371[304] = glTexParameteri_Comp;
      if (v323[305]) {
        v372 = v323;
      }
      else {
        v372 = v324;
      }
      v372[305] = glTexParameteriv_Comp;
      if (v323[1004]) {
        v373 = v323;
      }
      else {
        v373 = v324;
      }
      v373[1004] = glTexParameterx_PackThread;
      if (v323[1005]) {
        v374 = v323;
      }
      else {
        v374 = v324;
      }
      v374[1005] = glTexParameterxv_PackThread;
      if (v323[126]) {
        v375 = v323;
      }
      else {
        v375 = v324;
      }
      v375[126] = glGetTexParameterfv_ExecThread;
      if (v323[127]) {
        v376 = v323;
      }
      else {
        v376 = v324;
      }
      v376[127] = glGetTexParameteriv_ExecThread;
      if (v323[290]) {
        v377 = v323;
      }
      else {
        v377 = v324;
      }
      v377[290] = glTexEnvf_Comp;
      if (v323[291]) {
        v378 = v323;
      }
      else {
        v378 = v324;
      }
      v378[291] = glTexEnvfv_Comp;
      if (v323[292]) {
        v379 = v323;
      }
      else {
        v379 = v324;
      }
      v379[292] = glTexEnvi_Comp;
      if (v323[293]) {
        v380 = v323;
      }
      else {
        v380 = v324;
      }
      v380[293] = glTexEnviv_Comp;
      if (v323[1002]) {
        v381 = v323;
      }
      else {
        v381 = v324;
      }
      v381[1002] = glTexEnvx_PackThread;
      if (v323[1003]) {
        v382 = v323;
      }
      else {
        v382 = v324;
      }
      v382[1003] = glTexEnvxv_PackThread;
      if (v323[89]) {
        v383 = v323;
      }
      else {
        v383 = v324;
      }
      v383[89] = glFinish_ExecThread;
      if (v323[90]) {
        v384 = v323;
      }
      else {
        v384 = v324;
      }
      v384[90] = glFlush_ExecThread;
      if (v323[99]) {
        v385 = v323;
      }
      else {
        v385 = v324;
      }
      v385[99] = glGetBooleanv_ExecThread;
      if (v323[102]) {
        v386 = v323;
      }
      else {
        v386 = v324;
      }
      v386[102] = glGetError_ExecThread;
      if (v323[103]) {
        v387 = v323;
      }
      else {
        v387 = v324;
      }
      v387[103] = glGetFloatv_ExecThread;
      if (v323[104]) {
        v388 = v323;
      }
      else {
        v388 = v324;
      }
      v388[104] = glGetIntegerv_ExecThread;
      if (v323[105]) {
        v389 = v323;
      }
      else {
        v389 = v324;
      }
      v389[105] = glGetLightfv_ExecThread;
      if (v323[110]) {
        v390 = v323;
      }
      else {
        v390 = v324;
      }
      v390[110] = glGetMaterialfv_ExecThread;
      if (v323[115]) {
        v391 = v323;
      }
      else {
        v391 = v324;
      }
      v391[115] = glGetPointerv_ExecThread;
      if (v323[117]) {
        v392 = v323;
      }
      else {
        v392 = v324;
      }
      v392[117] = glGetString_ExecThread;
      if (v323[118]) {
        v393 = v323;
      }
      else {
        v393 = v324;
      }
      v393[118] = glGetTexEnvfv_ExecThread;
      if (v323[119]) {
        v394 = v323;
      }
      else {
        v394 = v324;
      }
      v394[119] = glGetTexEnviv_ExecThread;
      if (v323[979]) {
        v395 = v323;
      }
      else {
        v395 = v324;
      }
      v395[979] = glGetClipPlanef_ExecThread;
      if (v323[980]) {
        v396 = v323;
      }
      else {
        v396 = v324;
      }
      v396[980] = glGetClipPlanex_ExecThread;
      if (v323[981]) {
        v397 = v323;
      }
      else {
        v397 = v324;
      }
      v397[981] = glGetFixedv_ExecThread;
      if (v323[982]) {
        v398 = v323;
      }
      else {
        v398 = v324;
      }
      v398[982] = glGetLightxv_ExecThread;
      if (v323[983]) {
        v399 = v323;
      }
      else {
        v399 = v324;
      }
      v399[983] = glGetMaterialxv_ExecThread;
      if (v323[984]) {
        v400 = v323;
      }
      else {
        v400 = v324;
      }
      v400[984] = glGetTexEnvxv_ExecThread;
      if (v323[985]) {
        v401 = v323;
      }
      else {
        v401 = v324;
      }
      v401[985] = glGetTexParameterxv_ExecThread;
      if (v323[72]) {
        v402 = v323;
      }
      else {
        v402 = v324;
      }
      v402[72] = glEnable_Comp;
      if (v323[63]) {
        v403 = v323;
      }
      else {
        v403 = v324;
      }
      v403[63] = glDisable_Comp;
      if (v323[143]) {
        v404 = v323;
      }
      else {
        v404 = v324;
      }
      v404[143] = glIsEnabled_ExecThread;
      if (v323[642]) {
        v405 = v323;
      }
      else {
        v405 = v324;
      }
      v405[642] = glBindBuffer_PackThread;
      if (v323[643]) {
        v406 = v323;
      }
      else {
        v406 = v324;
      }
      v406[643] = glDeleteBuffers_ExecThread;
      if (v323[644]) {
        v407 = v323;
      }
      else {
        v407 = v324;
      }
      v407[644] = glGenBuffers_ExecThread;
      if (v323[645]) {
        v408 = v323;
      }
      else {
        v408 = v324;
      }
      v408[645] = glIsBuffer_ExecThread;
      if (v323[646]) {
        v409 = v323;
      }
      else {
        v409 = v324;
      }
      v409[646] = glBufferData_PackThread;
      if (v323[647]) {
        v410 = v323;
      }
      else {
        v410 = v324;
      }
      v410[647] = glBufferSubData_PackThread;
      if (v323[649]) {
        v411 = v323;
      }
      else {
        v411 = v324;
      }
      v411[649] = glMapBuffer_PackThread;
      if (v323[650]) {
        v412 = v323;
      }
      else {
        v412 = v324;
      }
      v412[650] = glUnmapBuffer_PackThread;
      if (v323[651]) {
        v413 = v323;
      }
      else {
        v413 = v324;
      }
      v413[651] = glGetBufferParameteriv_ExecThread;
      if (v323[652]) {
        v414 = v323;
      }
      else {
        v414 = v324;
      }
      v414[652] = glGetBufferPointerv_ExecThread;
      if (v323[795]) {
        v415 = v323;
      }
      else {
        v415 = v324;
      }
      v415[795] = glMapBufferRange_ExecThread;
      if (v323[796]) {
        v416 = v323;
      }
      else {
        v416 = v324;
      }
      v416[796] = glFlushMappedBufferRange_PackThread;
      if (v323[665]) {
        v417 = v323;
      }
      else {
        v417 = v324;
      }
      v417[665] = glIsRenderbufferEXT_ExecThread;
      if (v323[666]) {
        v418 = v323;
      }
      else {
        v418 = v324;
      }
      v418[666] = glBindRenderbufferEXT_PackThread;
      if (v323[667]) {
        v419 = v323;
      }
      else {
        v419 = v324;
      }
      v419[667] = glDeleteRenderbuffersEXT_ExecThread;
      if (v323[668]) {
        v420 = v323;
      }
      else {
        v420 = v324;
      }
      v420[668] = glGenRenderbuffersEXT_ExecThread;
      if (v323[669]) {
        v421 = v323;
      }
      else {
        v421 = v324;
      }
      v421[669] = glRenderbufferStorageEXT_PackThread;
      if (v323[670]) {
        v422 = v323;
      }
      else {
        v422 = v324;
      }
      v422[670] = glGetRenderbufferParameterivEXT_ExecThread;
      if (v323[671]) {
        v423 = v323;
      }
      else {
        v423 = v324;
      }
      v423[671] = glIsFramebufferEXT_ExecThread;
      if (!v323[672]) {
        v323 = v324;
      }
      v323[672] = glBindFramebufferEXT_PackThread;
      v424 = *(void **)(result + 28984);
      v425 = *(void **)(result + 28976);
      if (v424[673]) {
        uint64_t v426 = *(void *)(result + 28984);
      }
      else {
        uint64_t v426 = *(void *)(result + 28976);
      }
      *(void *)(v426 + 5384) = glDeleteFramebuffersEXT_ExecThread;
      if (v424[674]) {
        v427 = v424;
      }
      else {
        v427 = v425;
      }
      v427[674] = glGenFramebuffersEXT_ExecThread;
      if (v424[675]) {
        v428 = v424;
      }
      else {
        v428 = v425;
      }
      v428[675] = glCheckFramebufferStatusEXT_ExecThread;
      if (v424[677]) {
        v429 = v424;
      }
      else {
        v429 = v425;
      }
      v429[677] = glFramebufferTexture2DEXT_PackThread;
      if (v424[679]) {
        v430 = v424;
      }
      else {
        v430 = v425;
      }
      v430[679] = glFramebufferRenderbufferEXT_PackThread;
      if (v424[680]) {
        v431 = v424;
      }
      else {
        v431 = v425;
      }
      v431[680] = glGetFramebufferAttachmentParameterivEXT_ExecThread;
      if (v424[681]) {
        v432 = v424;
      }
      else {
        v432 = v425;
      }
      v432[681] = glGenerateMipmapEXT_PackThread;
      if (v424[155]) {
        v433 = v424;
      }
      else {
        v433 = v425;
      }
      v433[155] = glLineWidth_Comp;
      if (v424[990]) {
        v434 = v424;
      }
      else {
        v434 = v425;
      }
      v434[990] = glLineWidthx_PackThread;
      if (v424[199]) {
        v435 = v424;
      }
      else {
        v435 = v425;
      }
      v435[199] = glPointSize_Comp;
      if (v424[998]) {
        v436 = v424;
      }
      else {
        v436 = v425;
      }
      v436[998] = glPointSizex_PackThread;
      if (v424[540]) {
        v437 = v424;
      }
      else {
        v437 = v425;
      }
      v437[540] = glPointParameterf_Comp;
      if (v424[541]) {
        v438 = v424;
      }
      else {
        v438 = v425;
      }
      v438[541] = glPointParameterfv_Comp;
      if (v424[1009]) {
        v439 = v424;
      }
      else {
        v439 = v425;
      }
      v439[1009] = glPointParameterx_PackThread;
      if (v424[1010]) {
        v440 = v424;
      }
      else {
        v440 = v425;
      }
      v440[1010] = glPointParameterxv_PackThread;
      if (v424[201]) {
        v441 = v424;
      }
      else {
        v441 = v425;
      }
      v441[201] = glPolygonOffset_Comp;
      if (v424[999]) {
        v442 = v424;
      }
      else {
        v442 = v425;
      }
      v442[999] = glPolygonOffsetx_PackThread;
      if (v424[57]) {
        v443 = v424;
      }
      else {
        v443 = v425;
      }
      v443[57] = glCullFace_Comp;
      if (v424[95]) {
        v444 = v424;
      }
      else {
        v444 = v425;
      }
      v444[95] = glFrontFace_Comp;
      if (v424[971]) {
        v445 = v424;
      }
      else {
        v445 = v425;
      }
      v445[971] = glClipPlanef_PackThread;
      if (v424[972]) {
        v446 = v424;
      }
      else {
        v446 = v425;
      }
      v446[972] = glClipPlanex_PackThread;
      if (v424[877]) {
        v447 = v424;
      }
      else {
        v447 = v425;
      }
      v447[877] = glDepthRangef_PackThread;
      if (v424[974]) {
        v448 = v424;
      }
      else {
        v448 = v425;
      }
      v448[974] = glDepthRangex_PackThread;
      if (v424[335]) {
        v449 = v424;
      }
      else {
        v449 = v425;
      }
      v449[335] = glViewport_Comp;
      if (v424[91]) {
        v450 = v424;
      }
      else {
        v450 = v425;
      }
      v450[91] = glFogf_Comp;
      if (v424[92]) {
        v451 = v424;
      }
      else {
        v451 = v425;
      }
      v451[92] = glFogfv_Comp;
      if (v424[975]) {
        v452 = v424;
      }
      else {
        v452 = v425;
      }
      v452[975] = glFogx_PackThread;
      if (v424[976]) {
        v453 = v424;
      }
      else {
        v453 = v425;
      }
      v453[976] = glFogxv_PackThread;
      if (v424[174]) {
        v454 = v424;
      }
      else {
        v454 = v425;
      }
      v454[174] = glMatrixMode_Comp;
      if (v424[157]) {
        v455 = v424;
      }
      else {
        v455 = v425;
      }
      v455[157] = glLoadIdentity_Comp;
      if (v424[159]) {
        v456 = v424;
      }
      else {
        v456 = v425;
      }
      v456[159] = glLoadMatrixf_Comp;
      if (v424[991]) {
        v457 = v424;
      }
      else {
        v457 = v425;
      }
      v457[991] = glLoadMatrixx_PackThread;
      if (v424[176]) {
        v458 = v424;
      }
      else {
        v458 = v425;
      }
      v458[176] = glMultMatrixf_Comp;
      if (v424[994]) {
        v459 = v424;
      }
      else {
        v459 = v425;
      }
      v459[994] = glMultMatrixx_PackThread;
      if (v424[996]) {
        v460 = v424;
      }
      else {
        v460 = v425;
      }
      v460[996] = glOrthof_PackThread;
      if (v424[997]) {
        v461 = v424;
      }
      else {
        v461 = v425;
      }
      v461[997] = glOrthox_PackThread;
      if (v424[248]) {
        v462 = v424;
      }
      else {
        v462 = v425;
      }
      v462[248] = glRotatef_Comp;
      if (v424[1000]) {
        v463 = v424;
      }
      else {
        v463 = v425;
      }
      v463[1000] = glRotatex_PackThread;
      if (v424[250]) {
        v464 = v424;
      }
      else {
        v464 = v425;
      }
      v464[250] = glScalef_Comp;
      if (v424[1001]) {
        v465 = v424;
      }
      else {
        v465 = v425;
      }
      v465[1001] = glScalex_PackThread;
      if (v424[309]) {
        v466 = v424;
      }
      else {
        v466 = v425;
      }
      v466[309] = glTranslatef_Comp;
      if (v424[1006]) {
        v467 = v424;
      }
      else {
        v467 = v425;
      }
      v467[1006] = glTranslatex_PackThread;
      if (v424[977]) {
        v468 = v424;
      }
      else {
        v468 = v425;
      }
      v468[977] = glFrustumf_PackThread;
      if (v424[978]) {
        v469 = v424;
      }
      else {
        v469 = v425;
      }
      v469[978] = glFrustumx_PackThread;
      if (v424[205]) {
        v470 = v424;
      }
      else {
        v470 = v425;
      }
      v470[205] = glPopMatrix_Comp;
      if (v424[210]) {
        v471 = v424;
      }
      else {
        v471 = v425;
      }
      v471[210] = glPushMatrix_Comp;
      if (v424[146]) {
        v472 = v424;
      }
      else {
        v472 = v425;
      }
      v472[146] = glLightModelf_Comp;
      if (v424[147]) {
        v473 = v424;
      }
      else {
        v473 = v425;
      }
      v473[147] = glLightModelfv_Comp;
      if (v424[986]) {
        v474 = v424;
      }
      else {
        v474 = v425;
      }
      v474[986] = glLightModelx_PackThread;
      if (v424[987]) {
        v475 = v424;
      }
      else {
        v475 = v425;
      }
      v475[987] = glLightModelxv_PackThread;
      if (v424[150]) {
        v476 = v424;
      }
      else {
        v476 = v425;
      }
      v476[150] = glLightf_Comp;
      if (v424[151]) {
        v477 = v424;
      }
      else {
        v477 = v425;
      }
      v477[151] = glLightfv_Comp;
      if (v424[988]) {
        v478 = v424;
      }
      else {
        v478 = v425;
      }
      v478[988] = glLightx_PackThread;
      if (v424[989]) {
        v479 = v424;
      }
      else {
        v479 = v425;
      }
      v479[989] = glLightxv_PackThread;
      if (v424[170]) {
        v480 = v424;
      }
      else {
        v480 = v425;
      }
      v480[170] = glMaterialf_Comp;
      if (v424[171]) {
        v481 = v424;
      }
      else {
        v481 = v425;
      }
      v481[171] = glMaterialfv_Comp;
      if (v424[992]) {
        v482 = v424;
      }
      else {
        v482 = v425;
      }
      v482[992] = glMaterialx_PackThread;
      if (v424[993]) {
        v483 = v424;
      }
      else {
        v483 = v425;
      }
      v483[993] = glMaterialxv_PackThread;
      if (v424[459]) {
        v484 = v424;
      }
      else {
        v484 = v425;
      }
      v484[459] = glSampleCoverage_Comp;
      if (v424[1008]) {
        v485 = v424;
      }
      else {
        v485 = v425;
      }
      v485[1008] = glSampleCoveragex_PackThread;
      if (v424[195]) {
        v486 = v424;
      }
      else {
        v486 = v425;
      }
      v486[195] = glPixelStorei_PackThread;
      if (v424[237]) {
        v487 = v424;
      }
      else {
        v487 = v425;
      }
      v487[237] = glReadPixels_PackThread;
      if (v424[253]) {
        v488 = v424;
      }
      else {
        v488 = v425;
      }
      v488[253] = glShadeModel_Comp;
      if (v424[128]) {
        v489 = v424;
      }
      else {
        v489 = v425;
      }
      v489[128] = glHint_Comp;
      if (v424[772]) {
        v490 = v424;
      }
      else {
        v490 = v425;
      }
      v490[772] = glPointSizePointer_PackThread;
      if (v424[1011]) {
        v491 = v424;
      }
      else {
        v491 = v425;
      }
      v491[1011] = glCurrentPaletteMatrixOES_PackThread;
      if (v424[1012]) {
        v492 = v424;
      }
      else {
        v492 = v425;
      }
      v492[1012] = glLoadPaletteFromModelViewMatrixOES_PackThread;
      if (v424[1013]) {
        v493 = v424;
      }
      else {
        v493 = v425;
      }
      v493[1013] = glMatrixIndexPointerOES_PackThread;
      if (v424[1014]) {
        v494 = v424;
      }
      else {
        v494 = v425;
      }
      v494[1014] = glWeightPointerARB_PackThread;
      if (v424[1015]) {
        v495 = v424;
      }
      else {
        v495 = v425;
      }
      v495[1015] = glDrawTexsOES_ExecThread;
      if (v424[1016]) {
        v496 = v424;
      }
      else {
        v496 = v425;
      }
      v496[1016] = glDrawTexiOES_ExecThread;
      if (v424[1017]) {
        v497 = v424;
      }
      else {
        v497 = v425;
      }
      v497[1017] = glDrawTexxOES_ExecThread;
      if (v424[1018]) {
        v498 = v424;
      }
      else {
        v498 = v425;
      }
      v498[1018] = glDrawTexsvOES_ExecThread;
      if (v424[1019]) {
        v499 = v424;
      }
      else {
        v499 = v425;
      }
      v499[1019] = glDrawTexivOES_ExecThread;
      if (v424[1020]) {
        v500 = v424;
      }
      else {
        v500 = v425;
      }
      v500[1020] = glDrawTexxvOES_ExecThread;
      if (v424[1021]) {
        v501 = v424;
      }
      else {
        v501 = v425;
      }
      v501[1021] = glDrawTexfOES_ExecThread;
      if (v424[1022]) {
        v502 = v424;
      }
      else {
        v502 = v425;
      }
      v502[1022] = glDrawTexfvOES_ExecThread;
      if (v424[338]) {
        v503 = v424;
      }
      else {
        v503 = v425;
      }
      v503[338] = glBlendEquation_Comp;
      if (v424[336]) {
        v504 = v424;
      }
      else {
        v504 = v425;
      }
      v504[336] = glBlendFuncSeparate_Comp;
      if (v424[458]) {
        v505 = v424;
      }
      else {
        v505 = v425;
      }
      v505[458] = glBlendEquationSeparateEXT_Comp;
      if (v424[768]) {
        v506 = v424;
      }
      else {
        v506 = v425;
      }
      v506[768] = glBindVertexArray_PackThread;
      if (v424[769]) {
        v507 = v424;
      }
      else {
        v507 = v425;
      }
      v507[769] = glDeleteVertexArrays_ExecThread;
      if (v424[770]) {
        v508 = v424;
      }
      else {
        v508 = v425;
      }
      v508[770] = glGenVertexArrays_ExecThread;
      if (v424[771]) {
        v509 = v424;
      }
      else {
        v509 = v425;
      }
      v509[771] = glIsVertexArray_ExecThread;
      if (v424[463]) {
        v510 = v424;
      }
      else {
        v510 = v425;
      }
      v510[463] = glGenFencesAPPLE_ExecThread;
      if (v424[464]) {
        v511 = v424;
      }
      else {
        v511 = v425;
      }
      v511[464] = glDeleteFencesAPPLE_ExecThread;
      if (v424[466]) {
        v512 = v424;
      }
      else {
        v512 = v425;
      }
      v512[466] = glIsFenceAPPLE_ExecThread;
      if (v424[465]) {
        v513 = v424;
      }
      else {
        v513 = v425;
      }
      v513[465] = glSetFenceAPPLE_PackThread;
      if (v424[467]) {
        v514 = v424;
      }
      else {
        v514 = v425;
      }
      v514[467] = glTestFenceAPPLE_ExecThread;
      if (v424[468]) {
        v515 = v424;
      }
      else {
        v515 = v425;
      }
      v515[468] = glFinishFenceAPPLE_ExecThread;
      if (v424[469]) {
        v516 = v424;
      }
      else {
        v516 = v425;
      }
      v516[469] = glTestObjectAPPLE_ExecThread;
      if (v424[470]) {
        v517 = v424;
      }
      else {
        v517 = v425;
      }
      v517[470] = glFinishObjectAPPLE_ExecThread;
      if (v424[1024]) {
        v518 = v424;
      }
      else {
        v518 = v425;
      }
      v518[1024] = glFramebufferParameterivAPPLE_PackThread;
      if (v424[1025]) {
        v519 = v424;
      }
      else {
        v519 = v425;
      }
      v519[1025] = glGetFramebufferParameterivAPPLE_ExecThread;
      if (v424[756]) {
        v520 = v424;
      }
      else {
        v520 = v425;
      }
      v520[756] = glRenderbufferStorageMultisampleEXT_PackThread;
      if (v424[1026]) {
        v521 = v424;
      }
      else {
        v521 = v425;
      }
      v521[1026] = glResolveMultisampleFramebufferAPPLE_PackThread;
      if (v424[1027]) {
        v522 = v424;
      }
      else {
        v522 = v425;
      }
      v522[1027] = glCopyTextureLevels_PackThread;
      if (v424[1023]) {
        v523 = v424;
      }
      else {
        v523 = v425;
      }
      v523[1023] = glDiscardFramebufferEXT_PackThread;
      if (v424[814]) {
        v524 = v424;
      }
      else {
        v524 = v425;
      }
      v524[814] = glLabelObjectEXT_ExecThread;
      if (!v424[815]) {
        v424 = v425;
      }
      v424[815] = glGetObjectLabelEXT_ExecThread;
      v525 = *(void **)(result + 28984);
      v526 = *(void **)(result + 28976);
      if (v525[816]) {
        uint64_t v527 = *(void *)(result + 28984);
      }
      else {
        uint64_t v527 = *(void *)(result + 28976);
      }
      *(void *)(v527 + 6528) = gliNoop;
      if (v525[817]) {
        v528 = v525;
      }
      else {
        v528 = v526;
      }
      v528[817] = gliNoop;
      if (v525[818]) {
        v529 = v525;
      }
      else {
        v529 = v526;
      }
      v529[818] = gliNoop;
      if (v525[1033]) {
        v530 = v525;
      }
      else {
        v530 = v526;
      }
      v530[1033] = glLabelObjectWithResponsibleProcessAPPLE_ExecThread;
      if (!v525[1031]) {
        v525 = v526;
      }
      v531 = glTexStorage2D_PackThread;
    }
    else
    {
      *(void *)(v325 + 8) = glAlphaFunc_Exec;
      if (v323[968]) {
        v842 = v323;
      }
      else {
        v842 = v324;
      }
      v842[968] = glAlphaFuncx_Exec;
      if (v323[7]) {
        v843 = v323;
      }
      else {
        v843 = v324;
      }
      v843[7] = glBlendFunc_Exec;
      if (v323[49]) {
        v844 = v323;
      }
      else {
        v844 = v324;
      }
      v844[49] = glColorMask_Exec;
      if (v323[60]) {
        v845 = v323;
      }
      else {
        v845 = v324;
      }
      v845[60] = glDepthFunc_Exec;
      if (v323[61]) {
        v846 = v323;
      }
      else {
        v846 = v324;
      }
      v846[61] = glDepthMask_Exec;
      if (v323[161]) {
        v847 = v323;
      }
      else {
        v847 = v324;
      }
      v847[161] = glLogicOp_Exec;
      if (v323[254]) {
        v848 = v323;
      }
      else {
        v848 = v324;
      }
      v848[254] = glStencilFunc_Exec;
      if (v323[255]) {
        v849 = v323;
      }
      else {
        v849 = v324;
      }
      v849[255] = glStencilMask_Exec;
      if (v323[256]) {
        v850 = v323;
      }
      else {
        v850 = v324;
      }
      v850[256] = glStencilOp_Exec;
      if (v323[251]) {
        v851 = v323;
      }
      else {
        v851 = v324;
      }
      v851[251] = glScissor_Exec;
      if (v323[10]) {
        v852 = v323;
      }
      else {
        v852 = v324;
      }
      v852[10] = glClear_Exec;
      if (v323[12]) {
        v853 = v323;
      }
      else {
        v853 = v324;
      }
      v853[12] = glClearColor_Exec;
      if (v323[969]) {
        v854 = v323;
      }
      else {
        v854 = v324;
      }
      v854[969] = glClearColorx_Exec;
      if (v323[15]) {
        v855 = v323;
      }
      else {
        v855 = v324;
      }
      v855[15] = glClearStencil_Exec;
      if (v323[878]) {
        v856 = v323;
      }
      else {
        v856 = v324;
      }
      v856[878] = glClearDepthf_Exec;
      if (v323[970]) {
        v857 = v323;
      }
      else {
        v857 = v324;
      }
      v857[970] = glClearDepthx_Exec;
      if (v323[37]) {
        v858 = v323;
      }
      else {
        v858 = v324;
      }
      v858[37] = glColor4f_Exec;
      if (v323[43]) {
        v859 = v323;
      }
      else {
        v859 = v324;
      }
      v859[43] = glColor4ub_Exec;
      if (v323[973]) {
        v860 = v323;
      }
      else {
        v860 = v324;
      }
      v860[973] = glColor4x_Exec;
      if (v323[182]) {
        v861 = v323;
      }
      else {
        v861 = v324;
      }
      v861[182] = glNormal3f_Exec;
      if (v323[995]) {
        v862 = v323;
      }
      else {
        v862 = v324;
      }
      v862[995] = glNormal3x_Exec;
      if (v323[369]) {
        v863 = v323;
      }
      else {
        v863 = v324;
      }
      v863[369] = glMultiTexCoord4f_Exec;
      if (v323[1007]) {
        v864 = v323;
      }
      else {
        v864 = v324;
      }
      v864[1007] = glMultiTexCoord4x_Exec;
      if (v323[334]) {
        v865 = v323;
      }
      else {
        v865 = v324;
      }
      v865[334] = glVertexPointer_Exec;
      if (v323[51]) {
        v866 = v323;
      }
      else {
        v866 = v324;
      }
      v866[51] = glColorPointer_Exec;
      if (v323[188]) {
        v867 = v323;
      }
      else {
        v867 = v324;
      }
      v867[188] = glNormalPointer_Exec;
      if (v323[289]) {
        v868 = v323;
      }
      else {
        v868 = v324;
      }
      v868[289] = glTexCoordPointer_Exec;
      if (v323[341]) {
        v869 = v323;
      }
      else {
        v869 = v324;
      }
      v869[341] = glClientActiveTexture_Exec;
      if (v323[64]) {
        v870 = v323;
      }
      else {
        v870 = v324;
      }
      v870[64] = glDisableClientState_Exec;
      if (v323[73]) {
        v871 = v323;
      }
      else {
        v871 = v324;
      }
      v871[73] = glEnableClientState_Exec;
      if (v323[65]) {
        v872 = v323;
      }
      else {
        v872 = v324;
      }
      v872[65] = glDrawArrays_Exec;
      if (v323[67]) {
        v873 = v323;
      }
      else {
        v873 = v324;
      }
      v873[67] = glDrawElements_Exec;
      if (v323[98]) {
        v874 = v323;
      }
      else {
        v874 = v324;
      }
      v874[98] = glGenTextures_Exec;
      if (v323[59]) {
        v875 = v323;
      }
      else {
        v875 = v324;
      }
      v875[59] = glDeleteTextures_Exec;
      if (v323[5]) {
        v876 = v323;
      }
      else {
        v876 = v324;
      }
      v876[5] = glBindTexture_Exec;
      if (v323[145]) {
        v877 = v323;
      }
      else {
        v877 = v324;
      }
      v877[145] = glIsTexture_Exec;
      if (v323[342]) {
        v878 = v323;
      }
      else {
        v878 = v324;
      }
      v878[342] = glActiveTexture_Exec;
      if (v323[54]) {
        v879 = v323;
      }
      else {
        v879 = v324;
      }
      v879[54] = glCopyTexImage2D_Exec;
      if (v323[56]) {
        v880 = v323;
      }
      else {
        v880 = v324;
      }
      v880[56] = glCopyTexSubImage2D_Exec;
      if (v323[301]) {
        v881 = v323;
      }
      else {
        v881 = v324;
      }
      v881[301] = glTexImage2D_Exec;
      if (v323[307]) {
        v882 = v323;
      }
      else {
        v882 = v324;
      }
      v882[307] = glTexSubImage2D_Exec;
      if (v323[380]) {
        v883 = v323;
      }
      else {
        v883 = v324;
      }
      v883[380] = glCompressedTexImage2D_Exec;
      if (v323[383]) {
        v884 = v323;
      }
      else {
        v884 = v324;
      }
      v884[383] = glCompressedTexSubImage2D_Exec;
      if (v323[302]) {
        v885 = v323;
      }
      else {
        v885 = v324;
      }
      v885[302] = glTexParameterf_Exec;
      if (v323[303]) {
        v886 = v323;
      }
      else {
        v886 = v324;
      }
      v886[303] = glTexParameterfv_Exec;
      if (v323[304]) {
        v887 = v323;
      }
      else {
        v887 = v324;
      }
      v887[304] = glTexParameteri_Exec;
      if (v323[305]) {
        v888 = v323;
      }
      else {
        v888 = v324;
      }
      v888[305] = glTexParameteriv_Exec;
      if (v323[1004]) {
        v889 = v323;
      }
      else {
        v889 = v324;
      }
      v889[1004] = glTexParameterx_Exec;
      if (v323[1005]) {
        v890 = v323;
      }
      else {
        v890 = v324;
      }
      v890[1005] = glTexParameterxv_Exec;
      if (v323[126]) {
        v891 = v323;
      }
      else {
        v891 = v324;
      }
      v891[126] = glGetTexParameterfv_Exec;
      if (v323[127]) {
        v892 = v323;
      }
      else {
        v892 = v324;
      }
      v892[127] = glGetTexParameteriv_Exec;
      if (v323[290]) {
        v893 = v323;
      }
      else {
        v893 = v324;
      }
      v893[290] = glTexEnvf_Exec;
      if (v323[291]) {
        v894 = v323;
      }
      else {
        v894 = v324;
      }
      v894[291] = glTexEnvfv_Exec;
      if (v323[292]) {
        v895 = v323;
      }
      else {
        v895 = v324;
      }
      v895[292] = glTexEnvi_Exec;
      if (v323[293]) {
        v896 = v323;
      }
      else {
        v896 = v324;
      }
      v896[293] = glTexEnviv_Exec;
      if (v323[1002]) {
        v897 = v323;
      }
      else {
        v897 = v324;
      }
      v897[1002] = glTexEnvx_Exec;
      if (v323[1003]) {
        v898 = v323;
      }
      else {
        v898 = v324;
      }
      v898[1003] = glTexEnvxv_Exec;
      if (v323[89]) {
        v899 = v323;
      }
      else {
        v899 = v324;
      }
      v899[89] = glFinish_Exec;
      if (v323[90]) {
        v900 = v323;
      }
      else {
        v900 = v324;
      }
      v900[90] = glFlush_Exec;
      if (v323[99]) {
        v901 = v323;
      }
      else {
        v901 = v324;
      }
      v901[99] = glGetBooleanv_Exec;
      if (v323[102]) {
        v902 = v323;
      }
      else {
        v902 = v324;
      }
      v902[102] = glGetError_Exec;
      if (v323[103]) {
        v903 = v323;
      }
      else {
        v903 = v324;
      }
      v903[103] = glGetFloatv_Exec;
      if (v323[104]) {
        v904 = v323;
      }
      else {
        v904 = v324;
      }
      v904[104] = glGetIntegerv_Exec;
      if (v323[105]) {
        v905 = v323;
      }
      else {
        v905 = v324;
      }
      v905[105] = glGetLightfv_Exec;
      if (v323[110]) {
        v906 = v323;
      }
      else {
        v906 = v324;
      }
      v906[110] = glGetMaterialfv_Exec;
      if (v323[115]) {
        v907 = v323;
      }
      else {
        v907 = v324;
      }
      v907[115] = glGetPointerv_Exec;
      if (v323[117]) {
        v908 = v323;
      }
      else {
        v908 = v324;
      }
      v908[117] = glGetString_Exec;
      if (v323[118]) {
        v909 = v323;
      }
      else {
        v909 = v324;
      }
      v909[118] = glGetTexEnvfv_Exec;
      if (v323[119]) {
        v910 = v323;
      }
      else {
        v910 = v324;
      }
      v910[119] = glGetTexEnviv_Exec;
      if (v323[979]) {
        v911 = v323;
      }
      else {
        v911 = v324;
      }
      v911[979] = glGetClipPlanef_Exec;
      if (v323[980]) {
        v912 = v323;
      }
      else {
        v912 = v324;
      }
      v912[980] = glGetClipPlanex_Exec;
      if (v323[981]) {
        v913 = v323;
      }
      else {
        v913 = v324;
      }
      v913[981] = glGetFixedv_Exec;
      if (v323[982]) {
        v914 = v323;
      }
      else {
        v914 = v324;
      }
      v914[982] = glGetLightxv_Exec;
      if (v323[983]) {
        v915 = v323;
      }
      else {
        v915 = v324;
      }
      v915[983] = glGetMaterialxv_Exec;
      if (v323[984]) {
        v916 = v323;
      }
      else {
        v916 = v324;
      }
      v916[984] = glGetTexEnvxv_Exec;
      if (v323[985]) {
        v917 = v323;
      }
      else {
        v917 = v324;
      }
      v917[985] = glGetTexParameterxv_Exec;
      if (v323[72]) {
        v918 = v323;
      }
      else {
        v918 = v324;
      }
      v918[72] = glEnable_Exec;
      if (v323[63]) {
        v919 = v323;
      }
      else {
        v919 = v324;
      }
      v919[63] = glDisable_Exec;
      if (v323[143]) {
        v920 = v323;
      }
      else {
        v920 = v324;
      }
      v920[143] = glIsEnabled_Exec;
      if (v323[642]) {
        v921 = v323;
      }
      else {
        v921 = v324;
      }
      v921[642] = glBindBuffer_Exec;
      if (v323[643]) {
        v922 = v323;
      }
      else {
        v922 = v324;
      }
      v922[643] = glDeleteBuffers_Exec;
      if (v323[644]) {
        v923 = v323;
      }
      else {
        v923 = v324;
      }
      v923[644] = glGenBuffers_Exec;
      if (v323[645]) {
        v924 = v323;
      }
      else {
        v924 = v324;
      }
      v924[645] = glIsBuffer_Exec;
      if (v323[646]) {
        v925 = v323;
      }
      else {
        v925 = v324;
      }
      v925[646] = glBufferData_Exec;
      if (v323[647]) {
        v926 = v323;
      }
      else {
        v926 = v324;
      }
      v926[647] = glBufferSubData_Exec;
      if (v323[649]) {
        v927 = v323;
      }
      else {
        v927 = v324;
      }
      v927[649] = glMapBuffer_Exec;
      if (v323[650]) {
        v928 = v323;
      }
      else {
        v928 = v324;
      }
      v928[650] = glUnmapBuffer_Exec;
      if (v323[651]) {
        v929 = v323;
      }
      else {
        v929 = v324;
      }
      v929[651] = glGetBufferParameteriv_Exec;
      if (v323[652]) {
        v930 = v323;
      }
      else {
        v930 = v324;
      }
      v930[652] = glGetBufferPointerv_Exec;
      if (v323[795]) {
        v931 = v323;
      }
      else {
        v931 = v324;
      }
      v931[795] = glMapBufferRange_Exec;
      if (v323[796]) {
        v932 = v323;
      }
      else {
        v932 = v324;
      }
      v932[796] = glFlushMappedBufferRange_Exec;
      if (v323[665]) {
        v933 = v323;
      }
      else {
        v933 = v324;
      }
      v933[665] = glIsRenderbufferEXT_Exec;
      if (v323[666]) {
        v934 = v323;
      }
      else {
        v934 = v324;
      }
      v934[666] = glBindRenderbuffer_Exec;
      if (v323[667]) {
        v935 = v323;
      }
      else {
        v935 = v324;
      }
      v935[667] = glDeleteRenderbuffersEXT_Exec;
      if (v323[668]) {
        v936 = v323;
      }
      else {
        v936 = v324;
      }
      v936[668] = glGenRenderbuffersEXT_Exec;
      if (v323[669]) {
        v937 = v323;
      }
      else {
        v937 = v324;
      }
      v937[669] = glRenderbufferStorageEXT_Exec;
      if (v323[670]) {
        v938 = v323;
      }
      else {
        v938 = v324;
      }
      v938[670] = glGetRenderbufferParameterivEXT_Exec;
      if (v323[671]) {
        v939 = v323;
      }
      else {
        v939 = v324;
      }
      v939[671] = glIsFramebufferEXT_Exec;
      if (!v323[672]) {
        v323 = v324;
      }
      v323[672] = glBindFramebuffer_Exec;
      v940 = *(void **)(result + 28984);
      v941 = *(void **)(result + 28976);
      if (v940[673]) {
        uint64_t v942 = *(void *)(result + 28984);
      }
      else {
        uint64_t v942 = *(void *)(result + 28976);
      }
      *(void *)(v942 + 5384) = glDeleteFramebuffersEXT_Exec;
      if (v940[674]) {
        v943 = v940;
      }
      else {
        v943 = v941;
      }
      v943[674] = glGenFramebuffersEXT_Exec;
      if (v940[675]) {
        v944 = v940;
      }
      else {
        v944 = v941;
      }
      v944[675] = glCheckFramebufferStatusEXT_Exec;
      if (v940[677]) {
        v945 = v940;
      }
      else {
        v945 = v941;
      }
      v945[677] = glFramebufferTexture2DEXT_Exec;
      if (v940[679]) {
        v946 = v940;
      }
      else {
        v946 = v941;
      }
      v946[679] = glFramebufferRenderbufferEXT_Exec;
      if (v940[680]) {
        v947 = v940;
      }
      else {
        v947 = v941;
      }
      v947[680] = glGetFramebufferAttachmentParameterivEXT_Exec;
      if (v940[681]) {
        v948 = v940;
      }
      else {
        v948 = v941;
      }
      v948[681] = glGenerateMipmapEXT_Exec;
      if (v940[155]) {
        v949 = v940;
      }
      else {
        v949 = v941;
      }
      v949[155] = glLineWidth_Exec;
      if (v940[990]) {
        v950 = v940;
      }
      else {
        v950 = v941;
      }
      v950[990] = glLineWidthx_Exec;
      if (v940[199]) {
        v951 = v940;
      }
      else {
        v951 = v941;
      }
      v951[199] = glPointSize_Exec;
      if (v940[998]) {
        v952 = v940;
      }
      else {
        v952 = v941;
      }
      v952[998] = glPointSizex_Exec;
      if (v940[540]) {
        v953 = v940;
      }
      else {
        v953 = v941;
      }
      v953[540] = glPointParameterf_Exec;
      if (v940[541]) {
        v954 = v940;
      }
      else {
        v954 = v941;
      }
      v954[541] = glPointParameterfv_Exec;
      if (v940[1009]) {
        v955 = v940;
      }
      else {
        v955 = v941;
      }
      v955[1009] = glPointParameterx_Exec;
      if (v940[1010]) {
        v956 = v940;
      }
      else {
        v956 = v941;
      }
      v956[1010] = glPointParameterxv_Exec;
      if (v940[201]) {
        v957 = v940;
      }
      else {
        v957 = v941;
      }
      v957[201] = glPolygonOffset_Exec;
      if (v940[999]) {
        v958 = v940;
      }
      else {
        v958 = v941;
      }
      v958[999] = glPolygonOffsetx_Exec;
      if (v940[57]) {
        v959 = v940;
      }
      else {
        v959 = v941;
      }
      v959[57] = glCullFace_Exec;
      if (v940[95]) {
        v960 = v940;
      }
      else {
        v960 = v941;
      }
      v960[95] = glFrontFace_Exec;
      if (v940[971]) {
        v961 = v940;
      }
      else {
        v961 = v941;
      }
      v961[971] = glClipPlanef_Exec;
      if (v940[972]) {
        v962 = v940;
      }
      else {
        v962 = v941;
      }
      v962[972] = glClipPlanex_Exec;
      if (v940[877]) {
        v963 = v940;
      }
      else {
        v963 = v941;
      }
      v963[877] = glDepthRangef_Exec;
      if (v940[974]) {
        v964 = v940;
      }
      else {
        v964 = v941;
      }
      v964[974] = glDepthRangex_Exec;
      if (v940[335]) {
        v965 = v940;
      }
      else {
        v965 = v941;
      }
      v965[335] = glViewport_Exec;
      if (v940[91]) {
        v966 = v940;
      }
      else {
        v966 = v941;
      }
      v966[91] = glFogf_Exec;
      if (v940[92]) {
        v967 = v940;
      }
      else {
        v967 = v941;
      }
      v967[92] = glFogfv_Exec;
      if (v940[975]) {
        v968 = v940;
      }
      else {
        v968 = v941;
      }
      v968[975] = glFogx_Exec;
      if (v940[976]) {
        v969 = v940;
      }
      else {
        v969 = v941;
      }
      v969[976] = glFogxv_Exec;
      if (v940[174]) {
        v970 = v940;
      }
      else {
        v970 = v941;
      }
      v970[174] = glMatrixMode_Exec;
      if (v940[157]) {
        v971 = v940;
      }
      else {
        v971 = v941;
      }
      v971[157] = glLoadIdentity_Exec;
      if (v940[159]) {
        v972 = v940;
      }
      else {
        v972 = v941;
      }
      v972[159] = glLoadMatrixf_Exec;
      if (v940[991]) {
        v973 = v940;
      }
      else {
        v973 = v941;
      }
      v973[991] = glLoadMatrixx_Exec;
      if (v940[176]) {
        v974 = v940;
      }
      else {
        v974 = v941;
      }
      v974[176] = glMultMatrixf_Exec;
      if (v940[994]) {
        v975 = v940;
      }
      else {
        v975 = v941;
      }
      v975[994] = glMultMatrixx_Exec;
      if (v940[996]) {
        v976 = v940;
      }
      else {
        v976 = v941;
      }
      v976[996] = glOrthof_Exec;
      if (v940[997]) {
        v977 = v940;
      }
      else {
        v977 = v941;
      }
      v977[997] = glOrthox_Exec;
      if (v940[248]) {
        v978 = v940;
      }
      else {
        v978 = v941;
      }
      v978[248] = glRotatef_Exec;
      if (v940[1000]) {
        v979 = v940;
      }
      else {
        v979 = v941;
      }
      v979[1000] = glRotatex_Exec;
      if (v940[250]) {
        v980 = v940;
      }
      else {
        v980 = v941;
      }
      v980[250] = glScalef_Exec;
      if (v940[1001]) {
        v981 = v940;
      }
      else {
        v981 = v941;
      }
      v981[1001] = glScalex_Exec;
      if (v940[309]) {
        v982 = v940;
      }
      else {
        v982 = v941;
      }
      v982[309] = glTranslatef_Exec;
      if (v940[1006]) {
        v983 = v940;
      }
      else {
        v983 = v941;
      }
      v983[1006] = glTranslatex_Exec;
      if (v940[977]) {
        v984 = v940;
      }
      else {
        v984 = v941;
      }
      v984[977] = glFrustumf_Exec;
      if (v940[978]) {
        v985 = v940;
      }
      else {
        v985 = v941;
      }
      v985[978] = glFrustumx_Exec;
      if (v940[205]) {
        v986 = v940;
      }
      else {
        v986 = v941;
      }
      v986[205] = glPopMatrix_Exec;
      if (v940[210]) {
        v987 = v940;
      }
      else {
        v987 = v941;
      }
      v987[210] = glPushMatrix_Exec;
      if (v940[146]) {
        v988 = v940;
      }
      else {
        v988 = v941;
      }
      v988[146] = glLightModelf_Exec;
      if (v940[147]) {
        v989 = v940;
      }
      else {
        v989 = v941;
      }
      v989[147] = glLightModelfv_Exec;
      if (v940[986]) {
        v990 = v940;
      }
      else {
        v990 = v941;
      }
      v990[986] = glLightModelx_Exec;
      if (v940[987]) {
        v991 = v940;
      }
      else {
        v991 = v941;
      }
      v991[987] = glLightModelxv_Exec;
      if (v940[150]) {
        v992 = v940;
      }
      else {
        v992 = v941;
      }
      v992[150] = glLightf_Exec;
      if (v940[151]) {
        v993 = v940;
      }
      else {
        v993 = v941;
      }
      v993[151] = glLightfv_Exec;
      if (v940[988]) {
        v994 = v940;
      }
      else {
        v994 = v941;
      }
      v994[988] = glLightx_Exec;
      if (v940[989]) {
        v995 = v940;
      }
      else {
        v995 = v941;
      }
      v995[989] = glLightxv_Exec;
      if (v940[170]) {
        v996 = v940;
      }
      else {
        v996 = v941;
      }
      v996[170] = glMaterialf_Exec;
      if (v940[171]) {
        v997 = v940;
      }
      else {
        v997 = v941;
      }
      v997[171] = glMaterialfv_Exec;
      if (v940[992]) {
        v998 = v940;
      }
      else {
        v998 = v941;
      }
      v998[992] = glMaterialx_Exec;
      if (v940[993]) {
        v999 = v940;
      }
      else {
        v999 = v941;
      }
      v999[993] = glMaterialxv_Exec;
      if (v940[459]) {
        v1000 = v940;
      }
      else {
        v1000 = v941;
      }
      v1000[459] = glSampleCoverage_Exec;
      if (v940[1008]) {
        v1001 = v940;
      }
      else {
        v1001 = v941;
      }
      v1001[1008] = glSampleCoveragex_Exec;
      if (v940[195]) {
        v1002 = v940;
      }
      else {
        v1002 = v941;
      }
      v1002[195] = glPixelStorei_Exec;
      if (v940[237]) {
        v1003 = v940;
      }
      else {
        v1003 = v941;
      }
      v1003[237] = glReadPixels_Exec;
      if (v940[253]) {
        v1004 = v940;
      }
      else {
        v1004 = v941;
      }
      v1004[253] = glShadeModel_Exec;
      if (v940[128]) {
        v1005 = v940;
      }
      else {
        v1005 = v941;
      }
      v1005[128] = glHint_Exec;
      if (v940[772]) {
        v1006 = v940;
      }
      else {
        v1006 = v941;
      }
      v1006[772] = glPointSizePointer_Exec;
      if (v940[1011]) {
        v1007 = v940;
      }
      else {
        v1007 = v941;
      }
      v1007[1011] = glCurrentPaletteMatrixOES_Exec;
      if (v940[1012]) {
        v1008 = v940;
      }
      else {
        v1008 = v941;
      }
      v1008[1012] = glLoadPaletteFromModelViewMatrixOES_Exec;
      if (v940[1013]) {
        v1009 = v940;
      }
      else {
        v1009 = v941;
      }
      v1009[1013] = glMatrixIndexPointerOES_Exec;
      if (v940[1014]) {
        v1010 = v940;
      }
      else {
        v1010 = v941;
      }
      v1010[1014] = glWeightPointerARB_Exec;
      if (v940[1015]) {
        v1011 = v940;
      }
      else {
        v1011 = v941;
      }
      v1011[1015] = glDrawTexsOES_Exec;
      if (v940[1016]) {
        v1012 = v940;
      }
      else {
        v1012 = v941;
      }
      v1012[1016] = glDrawTexiOES_Exec;
      if (v940[1017]) {
        v1013 = v940;
      }
      else {
        v1013 = v941;
      }
      v1013[1017] = glDrawTexxOES_Exec;
      if (v940[1018]) {
        v1014 = v940;
      }
      else {
        v1014 = v941;
      }
      v1014[1018] = glDrawTexsvOES_Exec;
      if (v940[1019]) {
        v1015 = v940;
      }
      else {
        v1015 = v941;
      }
      v1015[1019] = glDrawTexivOES_Exec;
      if (v940[1020]) {
        v1016 = v940;
      }
      else {
        v1016 = v941;
      }
      v1016[1020] = glDrawTexxvOES_Exec;
      if (v940[1021]) {
        v1017 = v940;
      }
      else {
        v1017 = v941;
      }
      v1017[1021] = glDrawTexfOES_Exec;
      if (v940[1022]) {
        v1018 = v940;
      }
      else {
        v1018 = v941;
      }
      v1018[1022] = glDrawTexfvOES_Exec;
      if (v940[338]) {
        v1019 = v940;
      }
      else {
        v1019 = v941;
      }
      v1019[338] = glBlendEquation_Exec;
      if (v940[336]) {
        v1020 = v940;
      }
      else {
        v1020 = v941;
      }
      v1020[336] = glBlendFuncSeparate_Exec;
      if (v940[458]) {
        v1021 = v940;
      }
      else {
        v1021 = v941;
      }
      v1021[458] = glBlendEquationSeparateEXT_Exec;
      if (v940[768]) {
        v1022 = v940;
      }
      else {
        v1022 = v941;
      }
      v1022[768] = glBindVertexArray_Exec;
      if (v940[769]) {
        v1023 = v940;
      }
      else {
        v1023 = v941;
      }
      v1023[769] = glDeleteVertexArrays_Exec;
      if (v940[770]) {
        v1024 = v940;
      }
      else {
        v1024 = v941;
      }
      v1024[770] = glGenVertexArrays_Exec;
      if (v940[771]) {
        v1025 = v940;
      }
      else {
        v1025 = v941;
      }
      v1025[771] = glIsVertexArray_Exec;
      if (v940[463]) {
        v1026 = v940;
      }
      else {
        v1026 = v941;
      }
      v1026[463] = glGenFencesAPPLE_Exec;
      if (v940[464]) {
        v1027 = v940;
      }
      else {
        v1027 = v941;
      }
      v1027[464] = glDeleteFencesAPPLE_Exec;
      if (v940[466]) {
        v1028 = v940;
      }
      else {
        v1028 = v941;
      }
      v1028[466] = glIsFenceAPPLE_Exec;
      if (v940[465]) {
        v1029 = v940;
      }
      else {
        v1029 = v941;
      }
      v1029[465] = glSetFenceAPPLE_Exec;
      if (v940[467]) {
        v1030 = v940;
      }
      else {
        v1030 = v941;
      }
      v1030[467] = glTestFenceAPPLE_Exec;
      if (v940[468]) {
        v1031 = v940;
      }
      else {
        v1031 = v941;
      }
      v1031[468] = glFinishFenceAPPLE_Exec;
      if (v940[469]) {
        v1032 = v940;
      }
      else {
        v1032 = v941;
      }
      v1032[469] = glTestObjectAPPLE_Exec;
      if (v940[470]) {
        v1033 = v940;
      }
      else {
        v1033 = v941;
      }
      v1033[470] = glFinishObjectAPPLE_Exec;
      if (v940[1024]) {
        v1034 = v940;
      }
      else {
        v1034 = v941;
      }
      v1034[1024] = glFramebufferParameterivAPPLE_Exec;
      if (v940[1025]) {
        v1035 = v940;
      }
      else {
        v1035 = v941;
      }
      v1035[1025] = glGetFramebufferParameterivAPPLE_Exec;
      if (v940[756]) {
        v1036 = v940;
      }
      else {
        v1036 = v941;
      }
      v1036[756] = glRenderbufferStorageMultisampleEXT_Exec;
      if (v940[1026]) {
        v1037 = v940;
      }
      else {
        v1037 = v941;
      }
      v1037[1026] = glResolveMultisampleFramebufferAPPLE_Exec;
      if (v940[1027]) {
        v1038 = v940;
      }
      else {
        v1038 = v941;
      }
      v1038[1027] = glCopyTextureLevels_Exec;
      if (v940[1023]) {
        v1039 = v940;
      }
      else {
        v1039 = v941;
      }
      v1039[1023] = glDiscardFramebufferEXT_Exec;
      if (v940[814]) {
        v1040 = v940;
      }
      else {
        v1040 = v941;
      }
      v1040[814] = glLabelObjectEXT_Exec;
      if (!v940[815]) {
        v940 = v941;
      }
      v940[815] = glGetObjectLabelEXT_Exec;
      v525 = *(void **)(result + 28984);
      v1041 = *(void **)(result + 28976);
      if (v525[816]) {
        uint64_t v1042 = *(void *)(result + 28984);
      }
      else {
        uint64_t v1042 = *(void *)(result + 28976);
      }
      *(void *)(v1042 + 6528) = gliNoop;
      if (v525[817]) {
        v1043 = v525;
      }
      else {
        v1043 = v1041;
      }
      v1043[817] = gliNoop;
      if (v525[818]) {
        v1044 = v525;
      }
      else {
        v1044 = v1041;
      }
      v1044[818] = gliNoop;
      if (v525[1033]) {
        v1045 = v525;
      }
      else {
        v1045 = v1041;
      }
      v1045[1033] = glLabelObjectWithResponsibleProcessAPPLE_Exec;
      if (!v525[1031]) {
        v525 = v1041;
      }
      v531 = glTexStorage2D_Exec;
    }
    v525[1031] = v531;
  }
  else
  {
    uint64_t v8 = *(void **)(result + 28984);
    int v9 = *(void **)(result + 28976);
    if (v8[251]) {
      uint64_t v10 = *(void *)(result + 28984);
    }
    else {
      uint64_t v10 = *(void *)(result + 28976);
    }
    if (*(void *)(result + 27648))
    {
      *(void *)(v10 + 2008) = glScissor_Comp;
      if (v8[49]) {
        int v11 = v8;
      }
      else {
        int v11 = v9;
      }
      v11[49] = glColorMask_Comp;
      if (v8[337]) {
        int v12 = v8;
      }
      else {
        int v12 = v9;
      }
      v12[337] = glBlendColor_Comp;
      if (v8[338]) {
        int v13 = v8;
      }
      else {
        int v13 = v9;
      }
      v13[338] = glBlendEquation_Comp;
      if (v8[458]) {
        uint64_t v14 = v8;
      }
      else {
        uint64_t v14 = v9;
      }
      v14[458] = glBlendEquationSeparateEXT_Comp;
      if (v8[7]) {
        int v15 = v8;
      }
      else {
        int v15 = v9;
      }
      v15[7] = glBlendFunc_Comp;
      if (v8[336]) {
        int v16 = v8;
      }
      else {
        int v16 = v9;
      }
      v16[336] = glBlendFuncSeparate_Comp;
      if (v8[60]) {
        int v17 = v8;
      }
      else {
        int v17 = v9;
      }
      v17[60] = glDepthFunc_Comp;
      if (v8[61]) {
        float v18 = v8;
      }
      else {
        float v18 = v9;
      }
      v18[61] = glDepthMask_Comp;
      if (v8[254]) {
        float v19 = v8;
      }
      else {
        float v19 = v9;
      }
      v19[254] = glStencilFunc_Comp;
      if (v8[661]) {
        float v20 = v8;
      }
      else {
        float v20 = v9;
      }
      v20[661] = glStencilFuncSeparate_Comp;
      if (v8[256]) {
        float v21 = v8;
      }
      else {
        float v21 = v9;
      }
      v21[256] = glStencilOp_Comp;
      if (v8[586]) {
        float v22 = v8;
      }
      else {
        float v22 = v9;
      }
      v22[586] = glStencilOpSeparateATI_Comp;
      if (v8[255]) {
        int v23 = v8;
      }
      else {
        int v23 = v9;
      }
      v23[255] = glStencilMask_Comp;
      if (v8[662]) {
        int v24 = v8;
      }
      else {
        int v24 = v9;
      }
      v24[662] = glStencilMaskSeparate_Comp;
      if (v8[10]) {
        int v25 = v8;
      }
      else {
        int v25 = v9;
      }
      v25[10] = glClear_Comp;
      if (v8[12]) {
        unint64_t v26 = v8;
      }
      else {
        unint64_t v26 = v9;
      }
      v26[12] = glClearColor_Comp;
      if (v8[878]) {
        unint64_t v27 = v8;
      }
      else {
        unint64_t v27 = v9;
      }
      v27[878] = glClearDepthf_PackThread;
      if (v8[15]) {
        unint64_t v28 = v8;
      }
      else {
        unint64_t v28 = v9;
      }
      v28[15] = glClearStencil_Comp;
      if (v8[644]) {
        unint64_t v29 = v8;
      }
      else {
        unint64_t v29 = v9;
      }
      v29[644] = glGenBuffers_ExecThread;
      if (v8[643]) {
        int v30 = v8;
      }
      else {
        int v30 = v9;
      }
      v30[643] = glDeleteBuffers_ExecThread;
      if (v8[645]) {
        uint64_t v31 = v8;
      }
      else {
        uint64_t v31 = v9;
      }
      v31[645] = glIsBuffer_ExecThread;
      if (v8[642]) {
        unsigned int v32 = v8;
      }
      else {
        unsigned int v32 = v9;
      }
      v32[642] = glBindBuffer_PackThread;
      if (v8[646]) {
        __int32 v33 = v8;
      }
      else {
        __int32 v33 = v9;
      }
      v33[646] = glBufferData_PackThread;
      if (v8[647]) {
        int v34 = v8;
      }
      else {
        int v34 = v9;
      }
      v34[647] = glBufferSubData_PackThread;
      if (v8[651]) {
        uint64_t v35 = v8;
      }
      else {
        uint64_t v35 = v9;
      }
      v35[651] = glGetBufferParameteriv_ExecThread;
      if (v7 != 4)
      {
        if (v8[649]) {
          uint64_t v36 = v8;
        }
        else {
          uint64_t v36 = v9;
        }
        v36[649] = glMapBuffer_PackThread;
      }
      if (v8[650]) {
        uint64_t v37 = v8;
      }
      else {
        uint64_t v37 = v9;
      }
      v37[650] = glUnmapBuffer_PackThread;
      if (v8[652]) {
        uint64_t v38 = v8;
      }
      else {
        uint64_t v38 = v9;
      }
      v38[652] = glGetBufferPointerv_ExecThread;
      if (v8[795]) {
        int32x2_t v39 = v8;
      }
      else {
        int32x2_t v39 = v9;
      }
      v39[795] = glMapBufferRange_ExecThread;
      if (v8[796]) {
        unsigned int v40 = v8;
      }
      else {
        unsigned int v40 = v9;
      }
      v40[796] = glFlushMappedBufferRange_PackThread;
      if (v8[98]) {
        unsigned int v41 = v8;
      }
      else {
        unsigned int v41 = v9;
      }
      v41[98] = glGenTextures_ExecThread;
      if (v8[59]) {
        unsigned int v42 = v8;
      }
      else {
        unsigned int v42 = v9;
      }
      v42[59] = glDeleteTextures_ExecThread;
      if (v8[145]) {
        unsigned int v43 = v8;
      }
      else {
        unsigned int v43 = v9;
      }
      v43[145] = glIsTexture_ExecThread;
      if (v8[5]) {
        unsigned int v44 = v8;
      }
      else {
        unsigned int v44 = v9;
      }
      v44[5] = glBindTexture_Comp;
      if (v8[342]) {
        unsigned int v45 = v8;
      }
      else {
        unsigned int v45 = v9;
      }
      v45[342] = glActiveTexture_Comp;
      if (v8[301]) {
        unsigned int v46 = v8;
      }
      else {
        unsigned int v46 = v9;
      }
      v46[301] = glTexImage2D_PackThread;
      if (v8[307]) {
        int v47 = v8;
      }
      else {
        int v47 = v9;
      }
      v47[307] = glTexSubImage2D_PackThread;
      if (v8[54]) {
        __int16 v48 = v8;
      }
      else {
        __int16 v48 = v9;
      }
      v48[54] = glCopyTexImage2D_Comp;
      if (v8[56]) {
        uint64_t v49 = v8;
      }
      else {
        uint64_t v49 = v9;
      }
      v49[56] = glCopyTexSubImage2D_Comp;
      if (v8[380]) {
        unsigned int v50 = v8;
      }
      else {
        unsigned int v50 = v9;
      }
      v50[380] = glCompressedTexImage2D_PackThread;
      if (v8[383]) {
        unsigned int v51 = v8;
      }
      else {
        unsigned int v51 = v9;
      }
      v51[383] = glCompressedTexSubImage2D_PackThread;
      if (v8[304]) {
        unsigned int v52 = v8;
      }
      else {
        unsigned int v52 = v9;
      }
      v52[304] = glTexParameteri_Comp;
      if (v8[302]) {
        unsigned int v53 = v8;
      }
      else {
        unsigned int v53 = v9;
      }
      v53[302] = glTexParameterf_Comp;
      if (v8[305]) {
        v54 = v8;
      }
      else {
        v54 = v9;
      }
      v54[305] = glTexParameteriv_Comp;
      if (v8[303]) {
        uint64_t v55 = v8;
      }
      else {
        uint64_t v55 = v9;
      }
      v55[303] = glTexParameterfv_Comp;
      if (v8[127]) {
        uint64_t v56 = v8;
      }
      else {
        uint64_t v56 = v9;
      }
      v56[127] = glGetTexParameteriv_ExecThread;
      if (v8[126]) {
        uint64_t v57 = v8;
      }
      else {
        uint64_t v57 = v9;
      }
      v57[126] = glGetTexParameterfv_ExecThread;
      if (v8[594]) {
        uint64_t v58 = v8;
      }
      else {
        uint64_t v58 = v9;
      }
      v58[594] = glCreateShaderObjectARB_ExecThread;
      if (v8[591]) {
        uint64_t v59 = v8;
      }
      else {
        uint64_t v59 = v9;
      }
      v59[591] = glDeleteObjectARB_ExecThread;
      if (v8[655]) {
        uint64_t v60 = v8;
      }
      else {
        uint64_t v60 = v9;
      }
      v60[655] = glIsShader_ExecThread;
      if (v8[596]) {
        uint64_t v61 = v8;
      }
      else {
        uint64_t v61 = v9;
      }
      v61[596] = glCompileShaderARB_PackThread;
      if (v8[657]) {
        unint64_t v62 = v8;
      }
      else {
        unint64_t v62 = v9;
      }
      v62[657] = glGetShaderiv_ExecThread;
      if (v8[659]) {
        v63 = v8;
      }
      else {
        v63 = v9;
      }
      v63[659] = glGetShaderInfoLog_ExecThread;
      if (v8[629]) {
        uint64_t v64 = v8;
      }
      else {
        uint64_t v64 = v9;
      }
      v64[629] = glGetShaderSourceARB_ExecThread;
      if (v8[595]) {
        v65 = v8;
      }
      else {
        v65 = v9;
      }
      v65[595] = glShaderSourceARB_ExecThread;
      if (v8[875]) {
        uint64_t v66 = v8;
      }
      else {
        uint64_t v66 = v9;
      }
      v66[875] = glShaderBinaryOES_ExecThread;
      if (v8[876]) {
        v67 = v8;
      }
      else {
        v67 = v9;
      }
      v67[876] = glGetShaderPrecisionFormatOES_ExecThread;
      if (v8[874]) {
        v68 = v8;
      }
      else {
        v68 = v9;
      }
      v68[874] = glReleaseShaderCompilerOES_ExecThread;
      if (v8[597]) {
        char v69 = v8;
      }
      else {
        char v69 = v9;
      }
      v69[597] = glCreateProgramObjectARB_ExecThread;
      if (v8[591]) {
        uint64_t v70 = v8;
      }
      else {
        uint64_t v70 = v9;
      }
      v70[591] = glDeleteObjectARB_ExecThread;
      if (v8[656]) {
        v71 = v8;
      }
      else {
        v71 = v9;
      }
      v71[656] = glIsProgram_ExecThread;
      if (v8[598]) {
        uint64_t v72 = v8;
      }
      else {
        uint64_t v72 = v9;
      }
      v72[598] = glAttachObjectARB_PackThread;
      if (v8[593]) {
        uint64_t v73 = v8;
      }
      else {
        uint64_t v73 = v9;
      }
      v73[593] = glDetachObjectARB_PackThread;
      if (v8[599]) {
        v74 = v8;
      }
      else {
        v74 = v9;
      }
      v74[599] = glLinkProgramARB_PackThread;
      if (v8[601]) {
        v75 = v8;
      }
      else {
        v75 = v9;
      }
      v75[601] = glValidateProgramARB_PackThread;
      if (v8[600]) {
        uint64_t v76 = v8;
      }
      else {
        uint64_t v76 = v9;
      }
      v76[600] = glUseProgramObjectARB_Comp;
      if (v8[630]) {
        v77 = v8;
      }
      else {
        v77 = v9;
      }
      v77[630] = glBindAttribLocationARB_PackThread;
      if (v8[626]) {
        v78 = v8;
      }
      else {
        v78 = v9;
      }
      v78[626] = glGetActiveUniformARB_ExecThread;
      if (v8[631]) {
        v79 = v8;
      }
      else {
        v79 = v9;
      }
      v79[631] = glGetActiveAttribARB_ExecThread;
      if (v8[658]) {
        v80 = v8;
      }
      else {
        v80 = v9;
      }
      v80[658] = glGetProgramiv_ExecThread;
      if (v8[660]) {
        v81 = v8;
      }
      else {
        v81 = v9;
      }
      v81[660] = glGetProgramInfoLog_ExecThread;
      if (v8[632]) {
        v82 = v8;
      }
      else {
        v82 = v9;
      }
      v82[632] = glGetAttribLocationARB_ExecThread;
      if (v8[625]) {
        v83 = v8;
      }
      else {
        v83 = v9;
      }
      v83[625] = glGetUniformLocationARB_ExecThread;
      v84 = *(void **)(result + 28984);
      v85 = *(void **)(result + 28976);
      if (v84[759]) {
        uint64_t v86 = *(void *)(result + 28984);
      }
      else {
        uint64_t v86 = *(void *)(result + 28976);
      }
      *(void *)(v86 + 6072) = glGetAttachedShaders_ExecThread;
      if (v84[606]) {
        v87 = v84;
      }
      else {
        v87 = v85;
      }
      v87[606] = glUniform1i_Comp;
      if (v84[607]) {
        v88 = v84;
      }
      else {
        v88 = v85;
      }
      v88[607] = glUniform2i_Comp;
      if (v84[608]) {
        v89 = v84;
      }
      else {
        v89 = v85;
      }
      v89[608] = glUniform3i_Comp;
      if (v84[609]) {
        v90 = v84;
      }
      else {
        v90 = v85;
      }
      v90[609] = glUniform4i_Comp;
      if (v84[602]) {
        v91 = v84;
      }
      else {
        v91 = v85;
      }
      v91[602] = glUniform1f_Comp;
      if (v84[603]) {
        v92 = v84;
      }
      else {
        v92 = v85;
      }
      v92[603] = glUniform2f_Comp;
      if (v84[604]) {
        v93 = v84;
      }
      else {
        v93 = v85;
      }
      v93[604] = glUniform3f_Comp;
      if (v84[605]) {
        v94 = v84;
      }
      else {
        v94 = v85;
      }
      v94[605] = glUniform4f_Comp;
      if (v84[614]) {
        v95 = v84;
      }
      else {
        v95 = v85;
      }
      v95[614] = glUniform1iv_Comp;
      if (v84[615]) {
        v96 = v84;
      }
      else {
        v96 = v85;
      }
      v96[615] = glUniform2iv_Comp;
      if (v84[616]) {
        v97 = v84;
      }
      else {
        v97 = v85;
      }
      v97[616] = glUniform3iv_Comp;
      if (v84[617]) {
        v98 = v84;
      }
      else {
        v98 = v85;
      }
      v98[617] = glUniform4iv_Comp;
      if (v84[610]) {
        v99 = v84;
      }
      else {
        v99 = v85;
      }
      v99[610] = glUniform1fv_Comp;
      if (v84[611]) {
        v100 = v84;
      }
      else {
        v100 = v85;
      }
      v100[611] = glUniform2fv_Comp;
      if (v84[612]) {
        v101 = v84;
      }
      else {
        v101 = v85;
      }
      v101[612] = glUniform3fv_Comp;
      if (v84[613]) {
        v102 = v84;
      }
      else {
        v102 = v85;
      }
      v102[613] = glUniform4fv_Comp;
      if (v84[618]) {
        v103 = v84;
      }
      else {
        v103 = v85;
      }
      v103[618] = glUniformMatrix2fv_Comp;
      if (v84[619]) {
        v104 = v84;
      }
      else {
        v104 = v85;
      }
      v104[619] = glUniformMatrix3fv_Comp;
      if (v84[620]) {
        v105 = v84;
      }
      else {
        v105 = v85;
      }
      v105[620] = glUniformMatrix4fv_Comp;
      if (v84[627]) {
        v106 = v84;
      }
      else {
        v106 = v85;
      }
      v106[627] = glGetUniformfvARB_ExecThread;
      if (v84[628]) {
        v107 = v84;
      }
      else {
        v107 = v85;
      }
      v107[628] = glGetUniformivARB_ExecThread;
      if (v84[57]) {
        v108 = v84;
      }
      else {
        v108 = v85;
      }
      v108[57] = glCullFace_Comp;
      if (v84[95]) {
        v109 = v84;
      }
      else {
        v109 = v85;
      }
      v109[95] = glFrontFace_Comp;
      if (v84[877]) {
        v110 = v84;
      }
      else {
        v110 = v85;
      }
      v110[877] = glDepthRangef_PackThread;
      if (v84[335]) {
        v111 = v84;
      }
      else {
        v111 = v85;
      }
      v111[335] = glViewport_Comp;
      if (v84[72]) {
        v112 = v84;
      }
      else {
        v112 = v85;
      }
      v112[72] = glEnable_Comp;
      if (v84[63]) {
        v113 = v84;
      }
      else {
        v113 = v85;
      }
      v113[63] = glDisable_Comp;
      if (v84[143]) {
        v114 = v84;
      }
      else {
        v114 = v85;
      }
      v114[143] = glIsEnabled_ExecThread;
      if (v84[65]) {
        v115 = v84;
      }
      else {
        v115 = v85;
      }
      v115[65] = glDrawArrays_PackThread;
      if (v84[67]) {
        v116 = v84;
      }
      else {
        v116 = v85;
      }
      v116[67] = glDrawElements_PackThread;
      if (v84[511]) {
        v117 = v84;
      }
      else {
        v117 = v85;
      }
      v117[511] = glVertexAttribPointerARB_PackThread;
      if (v84[517]) {
        v118 = v84;
      }
      else {
        v118 = v85;
      }
      v118[517] = glGetVertexAttribPointervARB_ExecThread;
      if (v84[512]) {
        v119 = v84;
      }
      else {
        v119 = v85;
      }
      v119[512] = glEnableVertexAttribArrayARB_PackThread;
      if (v84[513]) {
        v120 = v84;
      }
      else {
        v120 = v85;
      }
      v120[513] = glDisableVertexAttribArrayARB_PackThread;
      if (v84[476]) {
        v121 = v84;
      }
      else {
        v121 = v85;
      }
      v121[476] = glVertexAttrib1fARB_Comp;
      if (v84[479]) {
        v122 = v84;
      }
      else {
        v122 = v85;
      }
      v122[479] = glVertexAttrib2fARB_Comp;
      if (v84[482]) {
        v123 = v84;
      }
      else {
        v123 = v85;
      }
      v123[482] = glVertexAttrib3fARB_Comp;
      if (v84[485]) {
        v124 = v84;
      }
      else {
        v124 = v85;
      }
      v124[485] = glVertexAttrib4fARB_Comp;
      if (v84[489]) {
        v125 = v84;
      }
      else {
        v125 = v85;
      }
      v125[489] = glVertexAttrib1fvARB_Comp;
      if (v84[492]) {
        v126 = v84;
      }
      else {
        v126 = v85;
      }
      v126[492] = glVertexAttrib2fvARB_Comp;
      if (v84[495]) {
        v127 = v84;
      }
      else {
        v127 = v85;
      }
      v127[495] = glVertexAttrib3fvARB_Comp;
      if (v84[503]) {
        v128 = v84;
      }
      else {
        v128 = v85;
      }
      v128[503] = glVertexAttrib4fvARB_Comp;
      if (v84[515]) {
        v129 = v84;
      }
      else {
        v129 = v85;
      }
      v129[515] = glGetVertexAttribfvARB_ExecThread;
      if (v84[516]) {
        v130 = v84;
      }
      else {
        v130 = v85;
      }
      v130[516] = glGetVertexAttribivARB_ExecThread;
      if (v84[761]) {
        v131 = v84;
      }
      else {
        v131 = v85;
      }
      v131[761] = glVertexAttribDivisorARB_PackThread;
      if (v84[762]) {
        v132 = v84;
      }
      else {
        v132 = v85;
      }
      v132[762] = glDrawArraysInstanced_PackThread;
      if (v84[763]) {
        v133 = v84;
      }
      else {
        v133 = v85;
      }
      v133[763] = glDrawElementsInstanced_PackThread;
      if (v84[90]) {
        v134 = v84;
      }
      else {
        v134 = v85;
      }
      v134[90] = glFlush_ExecThread;
      if (v84[89]) {
        v135 = v84;
      }
      else {
        v135 = v85;
      }
      v135[89] = glFinish_ExecThread;
      if (v84[102]) {
        v136 = v84;
      }
      else {
        v136 = v85;
      }
      v136[102] = glGetError_ExecThread;
      if (v84[99]) {
        v137 = v84;
      }
      else {
        v137 = v85;
      }
      v137[99] = glGetBooleanv_ExecThread;
      if (v84[104]) {
        v138 = v84;
      }
      else {
        v138 = v85;
      }
      v138[104] = glGetIntegerv_ExecThread;
      if (v84[103]) {
        v139 = v84;
      }
      else {
        v139 = v85;
      }
      v139[103] = glGetFloatv_ExecThread;
      if (v84[117]) {
        v140 = v84;
      }
      else {
        v140 = v85;
      }
      v140[117] = glGetString_ExecThread;
      if (v84[155]) {
        v141 = v84;
      }
      else {
        v141 = v85;
      }
      v141[155] = glLineWidth_Comp;
      if (v84[201]) {
        v142 = v84;
      }
      else {
        v142 = v85;
      }
      v142[201] = glPolygonOffset_Comp;
      if (v84[665]) {
        v143 = v84;
      }
      else {
        v143 = v85;
      }
      v143[665] = glIsRenderbufferEXT_ExecThread;
      if (v84[666]) {
        v144 = v84;
      }
      else {
        v144 = v85;
      }
      v144[666] = glBindRenderbufferEXT_PackThread;
      if (v84[667]) {
        v145 = v84;
      }
      else {
        v145 = v85;
      }
      v145[667] = glDeleteRenderbuffersEXT_ExecThread;
      if (v84[668]) {
        v146 = v84;
      }
      else {
        v146 = v85;
      }
      v146[668] = glGenRenderbuffersEXT_ExecThread;
      if (v84[669]) {
        v147 = v84;
      }
      else {
        v147 = v85;
      }
      v147[669] = glRenderbufferStorageEXT_PackThread;
      if (v84[670]) {
        v148 = v84;
      }
      else {
        v148 = v85;
      }
      v148[670] = glGetRenderbufferParameterivEXT_ExecThread;
      if (v84[671]) {
        v149 = v84;
      }
      else {
        v149 = v85;
      }
      v149[671] = glIsFramebufferEXT_ExecThread;
      if (v84[672]) {
        v150 = v84;
      }
      else {
        v150 = v85;
      }
      v150[672] = glBindFramebufferEXT_PackThread;
      if (v84[673]) {
        v151 = v84;
      }
      else {
        v151 = v85;
      }
      v151[673] = glDeleteFramebuffersEXT_ExecThread;
      if (v84[674]) {
        v152 = v84;
      }
      else {
        v152 = v85;
      }
      v152[674] = glGenFramebuffersEXT_ExecThread;
      if (v84[675]) {
        v153 = v84;
      }
      else {
        v153 = v85;
      }
      v153[675] = glCheckFramebufferStatusEXT_ExecThread;
      if (v84[677]) {
        v154 = v84;
      }
      else {
        v154 = v85;
      }
      v154[677] = glFramebufferTexture2DEXT_PackThread;
      if (v84[679]) {
        v155 = v84;
      }
      else {
        v155 = v85;
      }
      v155[679] = glFramebufferRenderbufferEXT_PackThread;
      if (v84[680]) {
        v156 = v84;
      }
      else {
        v156 = v85;
      }
      v156[680] = glGetFramebufferAttachmentParameterivEXT_ExecThread;
      if (v84[681]) {
        v157 = v84;
      }
      else {
        v157 = v85;
      }
      v157[681] = glGenerateMipmapEXT_PackThread;
      if (v84[128]) {
        v158 = v84;
      }
      else {
        v158 = v85;
      }
      v158[128] = glHint_Comp;
      if (v84[195]) {
        v159 = v84;
      }
      else {
        v159 = v85;
      }
      v159[195] = glPixelStorei_PackThread;
      if (v84[237]) {
        v160 = v84;
      }
      else {
        v160 = v85;
      }
      v160[237] = glReadPixels_PackThread;
      if (v84[459]) {
        v161 = v84;
      }
      else {
        v161 = v85;
      }
      v161[459] = glSampleCoverage_Comp;
      if (v84[463]) {
        v162 = v84;
      }
      else {
        v162 = v85;
      }
      v162[463] = glGenFencesAPPLE_ExecThread;
      if (v84[464]) {
        v163 = v84;
      }
      else {
        v163 = v85;
      }
      v163[464] = glDeleteFencesAPPLE_ExecThread;
      if (v84[466]) {
        v164 = v84;
      }
      else {
        v164 = v85;
      }
      v164[466] = glIsFenceAPPLE_ExecThread;
      if (v84[465]) {
        v165 = v84;
      }
      else {
        v165 = v85;
      }
      v165[465] = glSetFenceAPPLE_PackThread;
      if (v84[467]) {
        v166 = v84;
      }
      else {
        v166 = v85;
      }
      v166[467] = glTestFenceAPPLE_ExecThread;
      if (v84[468]) {
        v167 = v84;
      }
      else {
        v167 = v85;
      }
      v167[468] = glFinishFenceAPPLE_ExecThread;
      if (v84[469]) {
        v168 = v84;
      }
      else {
        v168 = v85;
      }
      v168[469] = glTestObjectAPPLE_ExecThread;
      if (v84[470]) {
        v169 = v84;
      }
      else {
        v169 = v85;
      }
      v169[470] = glFinishObjectAPPLE_ExecThread;
      if (v84[1024]) {
        v170 = v84;
      }
      else {
        v170 = v85;
      }
      v170[1024] = glFramebufferParameterivAPPLE_PackThread;
      if (v84[1025]) {
        v171 = v84;
      }
      else {
        v171 = v85;
      }
      v171[1025] = glGetFramebufferParameterivAPPLE_ExecThread;
      if (v84[1023]) {
        v172 = v84;
      }
      else {
        v172 = v85;
      }
      v172[1023] = glDiscardFramebufferEXT_PackThread;
      if (v84[756]) {
        v173 = v84;
      }
      else {
        v173 = v85;
      }
      v173[756] = glRenderbufferStorageMultisampleEXT_PackThread;
      int v174 = *(unsigned __int8 *)(result + 32501);
      if (v174 != 4)
      {
        if (v84[1026]) {
          v175 = v84;
        }
        else {
          v175 = v85;
        }
        v175[1026] = glResolveMultisampleFramebufferAPPLE_PackThread;
      }
      if (v84[1027]) {
        v176 = v84;
      }
      else {
        v176 = v85;
      }
      v176[1027] = glCopyTextureLevels_PackThread;
      if (v84[768]) {
        v177 = v84;
      }
      else {
        v177 = v85;
      }
      v177[768] = glBindVertexArray_PackThread;
      if (v84[769]) {
        v178 = v84;
      }
      else {
        v178 = v85;
      }
      v178[769] = glDeleteVertexArrays_ExecThread;
      if (v84[770]) {
        v179 = v84;
      }
      else {
        v179 = v85;
      }
      v179[770] = glGenVertexArrays_ExecThread;
      if (v84[771]) {
        v180 = v84;
      }
      else {
        v180 = v85;
      }
      v180[771] = glIsVertexArray_ExecThread;
      if (v84[637]) {
        v181 = v84;
      }
      else {
        v181 = v85;
      }
      v181[637] = glBeginQuery_PackThread;
      if (v84[638]) {
        v182 = v84;
      }
      else {
        v182 = v85;
      }
      v182[638] = glEndQuery_PackThread;
      if (v84[634]) {
        v183 = v84;
      }
      else {
        v183 = v85;
      }
      v183[634] = glGenQueries_ExecThread;
      if (v84[635]) {
        v184 = v84;
      }
      else {
        v184 = v85;
      }
      v184[635] = glDeleteQueries_ExecThread;
      if (v84[636]) {
        v185 = v84;
      }
      else {
        v185 = v85;
      }
      v185[636] = glIsQuery_ExecThread;
      if (v84[639]) {
        v186 = v84;
      }
      else {
        v186 = v85;
      }
      v186[639] = glGetQueryiv_ExecThread;
      if (v84[641]) {
        v187 = v84;
      }
      else {
        v187 = v85;
      }
      v187[641] = glGetQueryObjectuiv_ExecThread;
      if (*v1 <= 5u)
      {
        if (v84[640]) {
          v188 = v84;
        }
        else {
          v188 = v85;
        }
        v188[640] = glGetQueryObjectiv_ExecThread;
      }
      if (v84[814]) {
        v189 = v84;
      }
      else {
        v189 = v85;
      }
      v189[814] = glLabelObjectEXT_ExecThread;
      if (v84[815]) {
        v190 = v84;
      }
      else {
        v190 = v85;
      }
      v190[815] = glGetObjectLabelEXT_ExecThread;
      if (v84[816]) {
        v191 = v84;
      }
      else {
        v191 = v85;
      }
      v191[816] = gliNoop;
      if (v84[817]) {
        v192 = v84;
      }
      else {
        v192 = v85;
      }
      v192[817] = gliNoop;
      if (v84[818]) {
        v193 = v84;
      }
      else {
        v193 = v85;
      }
      v193[818] = gliNoop;
      if (v84[1033]) {
        v194 = v84;
      }
      else {
        v194 = v85;
      }
      v194[1033] = glLabelObjectWithResponsibleProcessAPPLE_ExecThread;
      if (v84[819]) {
        v195 = v84;
      }
      else {
        v195 = v85;
      }
      v195[819] = glUseProgramStages_PackThread;
      if (v84[820]) {
        v196 = v84;
      }
      else {
        v196 = v85;
      }
      v196[820] = glActiveShaderProgram_PackThread;
      if (v84[821]) {
        v197 = v84;
      }
      else {
        v197 = v85;
      }
      v197[821] = glCreateShaderProgramv_ExecThread;
      if (v84[822]) {
        v198 = v84;
      }
      else {
        v198 = v85;
      }
      v198[822] = glBindProgramPipeline_PackThread;
      if (v84[823]) {
        v199 = v84;
      }
      else {
        v199 = v85;
      }
      v199[823] = glDeleteProgramPipelines_ExecThread;
      if (v84[824]) {
        v200 = v84;
      }
      else {
        v200 = v85;
      }
      v200[824] = glGenProgramPipelines_ExecThread;
      if (v84[825]) {
        v201 = v84;
      }
      else {
        v201 = v85;
      }
      v201[825] = glIsProgramPipeline_ExecThread;
      if (v84[689]) {
        v202 = v84;
      }
      else {
        v202 = v85;
      }
      v202[689] = glProgramParameteriEXT_PackThread;
      if (v84[826]) {
        v203 = v84;
      }
      else {
        v203 = v85;
      }
      v203[826] = glGetProgramPipelineiv_ExecThread;
      if (v84[827]) {
        v204 = v84;
      }
      else {
        v204 = v85;
      }
      v204[827] = glValidateProgramPipeline_PackThread;
      if (v84[828]) {
        v205 = v84;
      }
      else {
        v205 = v85;
      }
      v205[828] = glGetProgramPipelineInfoLog_ExecThread;
      if (v84[829]) {
        v206 = v84;
      }
      else {
        v206 = v85;
      }
      v206[829] = glProgramUniform1i_Comp;
      if (v84[830]) {
        v207 = v84;
      }
      else {
        v207 = v85;
      }
      v207[830] = glProgramUniform2i_Comp;
      if (v84[831]) {
        v208 = v84;
      }
      else {
        v208 = v85;
      }
      v208[831] = glProgramUniform3i_Comp;
      if (v84[832]) {
        v209 = v84;
      }
      else {
        v209 = v85;
      }
      v209[832] = glProgramUniform4i_Comp;
      if (v84[833]) {
        v210 = v84;
      }
      else {
        v210 = v85;
      }
      v210[833] = glProgramUniform1f_Comp;
      if (v84[834]) {
        v211 = v84;
      }
      else {
        v211 = v85;
      }
      v211[834] = glProgramUniform2f_Comp;
      if (v84[835]) {
        v212 = v84;
      }
      else {
        v212 = v85;
      }
      v212[835] = glProgramUniform3f_Comp;
      if (v84[836]) {
        v213 = v84;
      }
      else {
        v213 = v85;
      }
      v213[836] = glProgramUniform4f_Comp;
      if (v84[837]) {
        v214 = v84;
      }
      else {
        v214 = v85;
      }
      v214[837] = glProgramUniform1iv_Comp;
      if (v84[838]) {
        v215 = v84;
      }
      else {
        v215 = v85;
      }
      v215[838] = glProgramUniform2iv_Comp;
      if (v84[839]) {
        v216 = v84;
      }
      else {
        v216 = v85;
      }
      v216[839] = glProgramUniform3iv_Comp;
      if (v84[840]) {
        v217 = v84;
      }
      else {
        v217 = v85;
      }
      v217[840] = glProgramUniform4iv_Comp;
      if (v84[841]) {
        v218 = v84;
      }
      else {
        v218 = v85;
      }
      v218[841] = glProgramUniform1fv_Comp;
      if (v84[842]) {
        v219 = v84;
      }
      else {
        v219 = v85;
      }
      v219[842] = glProgramUniform2fv_Comp;
      if (v84[843]) {
        v220 = v84;
      }
      else {
        v220 = v85;
      }
      v220[843] = glProgramUniform3fv_Comp;
      if (v84[844]) {
        v221 = v84;
      }
      else {
        v221 = v85;
      }
      v221[844] = glProgramUniform4fv_Comp;
      if (v84[845]) {
        v222 = v84;
      }
      else {
        v222 = v85;
      }
      v222[845] = glProgramUniformMatrix2fv_Comp;
      if (v84[846]) {
        v223 = v84;
      }
      else {
        v223 = v85;
      }
      v223[846] = glProgramUniformMatrix3fv_Comp;
      if (v84[847]) {
        v224 = v84;
      }
      else {
        v224 = v85;
      }
      v224[847] = glProgramUniformMatrix4fv_Comp;
      if (v84[1031]) {
        v225 = v84;
      }
      else {
        v225 = v85;
      }
      v225[1031] = glTexStorage2D_PackThread;
      if (v84[779]) {
        v226 = v84;
      }
      else {
        v226 = v85;
      }
      v226[779] = glFenceSync_ExecThread;
      if (v84[780]) {
        v227 = v84;
      }
      else {
        v227 = v85;
      }
      v227[780] = glIsSync_ExecThread;
      if (v84[781]) {
        v228 = v84;
      }
      else {
        v228 = v85;
      }
      v228[781] = glDeleteSync_ExecThread;
      if (v84[782]) {
        v229 = v84;
      }
      else {
        v229 = v85;
      }
      v229[782] = glClientWaitSync_ExecThread;
      if (v84[783]) {
        v230 = v84;
      }
      else {
        v230 = v85;
      }
      v230[783] = glWaitSync_Comp;
      if (v84[784]) {
        v231 = v84;
      }
      else {
        v231 = v85;
      }
      v231[784] = glGetInteger64v_ExecThread;
      if (v84[785]) {
        v232 = v84;
      }
      else {
        v232 = v85;
      }
      v232[785] = glGetSynciv_ExecThread;
      if (v84[442]) {
        v233 = v84;
      }
      else {
        v233 = v85;
      }
      v233[442] = glGetActiveUniformsiv_ExecThread;
      if (v174 != 4) {
        goto LABEL_3097;
      }
      if (v84[236]) {
        v234 = v84;
      }
      else {
        v234 = v85;
      }
      v234[236] = glReadBuffer_Comp;
      if (v84[438]) {
        v235 = v84;
      }
      else {
        v235 = v85;
      }
      v235[438] = glTexImage3D_PackThread;
      if (v84[439]) {
        v236 = v84;
      }
      else {
        v236 = v85;
      }
      v236[439] = glTexSubImage3D_PackThread;
      if (v84[440]) {
        v237 = v84;
      }
      else {
        v237 = v85;
      }
      v237[440] = glCopyTexSubImage3D_Comp;
      if (v84[379]) {
        v238 = v84;
      }
      else {
        v238 = v85;
      }
      v238[379] = glCompressedTexImage3D_PackThread;
      if (v84[382]) {
        v239 = v84;
      }
      else {
        v239 = v85;
      }
      v239[382] = glCompressedTexSubImage3D_PackThread;
      if (v84[654]) {
        v240 = v84;
      }
      else {
        v240 = v85;
      }
      v240[654] = glDrawBuffersARB_Comp;
      if (v84[749]) {
        v241 = v84;
      }
      else {
        v241 = v85;
      }
      v241[749] = glUniformMatrix2x3fv_Comp;
      if (v84[750]) {
        v242 = v84;
      }
      else {
        v242 = v85;
      }
      v242[750] = glUniformMatrix3x2fv_Comp;
      if (v84[751]) {
        v243 = v84;
      }
      else {
        v243 = v85;
      }
      v243[751] = glUniformMatrix2x4fv_Comp;
      if (v84[752]) {
        v244 = v84;
      }
      else {
        v244 = v85;
      }
      v244[752] = glUniformMatrix4x2fv_Comp;
      if (v84[753]) {
        v245 = v84;
      }
      else {
        v245 = v85;
      }
      v245[753] = glUniformMatrix3x4fv_Comp;
      if (v84[754]) {
        v246 = v84;
      }
      else {
        v246 = v85;
      }
      v246[754] = glUniformMatrix4x3fv_Comp;
      if (v84[755]) {
        v247 = v84;
      }
      else {
        v247 = v85;
      }
      v247[755] = glBlitFramebufferEXT_Comp;
      if (v84[691]) {
        v248 = v84;
      }
      else {
        v248 = v85;
      }
      v248[691] = glFramebufferTextureLayerEXT_PackThread;
      if (v84[700]) {
        v249 = v84;
      }
      else {
        v249 = v85;
      }
      v249[700] = glGetIntegerIndexedv_ExecThread;
      if (v84[696]) {
        v250 = v84;
      }
      else {
        v250 = v85;
      }
      v250[696] = glBeginTransformFeedback_PackThread;
      if (v84[697]) {
        v251 = v84;
      }
      else {
        v251 = v85;
      }
      v251[697] = glEndTransformFeedback_PackThread;
      if (v84[693]) {
        v252 = v84;
      }
      else {
        v252 = v85;
      }
      v252[693] = glBindBufferRange_PackThread;
      if (v84[695]) {
        v253 = v84;
      }
      else {
        v253 = v85;
      }
      v253[695] = glBindBufferBase_PackThread;
      if (v84[698]) {
        v254 = v84;
      }
      else {
        v254 = v85;
      }
      v254[698] = glTransformFeedbackVaryingsEXT_ExecThread;
      if (v84[699]) {
        v255 = v84;
      }
      else {
        v255 = v85;
      }
      v255[699] = glGetTransformFeedbackVaryingEXT_ExecThread;
      if (v84[731]) {
        v256 = v84;
      }
      else {
        v256 = v85;
      }
      v256[731] = glVertexAttribIPointerEXT_PackThread;
      if (v84[732]) {
        v257 = v84;
      }
      else {
        v257 = v85;
      }
      v257[732] = glGetVertexAttribIivEXT_ExecThread;
      if (v84[733]) {
        v258 = v84;
      }
      else {
        v258 = v85;
      }
      v258[733] = glGetVertexAttribIuivEXT_ExecThread;
      if (v84[714]) {
        v259 = v84;
      }
      else {
        v259 = v85;
      }
      v259[714] = glVertexAttribI4iEXT_Comp;
      if (v84[718]) {
        v260 = v84;
      }
      else {
        v260 = v85;
      }
      v260[718] = glVertexAttribI4uiEXT_Comp;
      if (v84[722]) {
        v261 = v84;
      }
      else {
        v261 = v85;
      }
      v261[722] = glVertexAttribI4ivEXT_Comp;
      if (v84[726]) {
        v262 = v84;
      }
      else {
        v262 = v85;
      }
      v262[726] = glVertexAttribI4uivEXT_Comp;
      if (!v84[742]) {
        v84 = v85;
      }
      v84[742] = glGetUniformuivEXT_ExecThread;
      v263 = *(void **)(result + 28984);
      v264 = *(void **)(result + 28976);
      if (v263[744]) {
        uint64_t v265 = *(void *)(result + 28984);
      }
      else {
        uint64_t v265 = *(void *)(result + 28976);
      }
      *(void *)(v265 + 5952) = glGetFragDataLocationEXT_ExecThread;
      if (v263[734]) {
        v266 = v263;
      }
      else {
        v266 = v264;
      }
      v266[734] = glUniform1ui_Comp;
      if (v263[735]) {
        v267 = v263;
      }
      else {
        v267 = v264;
      }
      v267[735] = glUniform2ui_Comp;
      if (v263[736]) {
        v268 = v263;
      }
      else {
        v268 = v264;
      }
      v268[736] = glUniform3ui_Comp;
      if (v263[737]) {
        v269 = v263;
      }
      else {
        v269 = v264;
      }
      v269[737] = glUniform4ui_Comp;
      if (v263[738]) {
        v270 = v263;
      }
      else {
        v270 = v264;
      }
      v270[738] = glUniform1uiv_Comp;
      if (v263[739]) {
        v271 = v263;
      }
      else {
        v271 = v264;
      }
      v271[739] = glUniform2uiv_Comp;
      if (v263[740]) {
        v272 = v263;
      }
      else {
        v272 = v264;
      }
      v272[740] = glUniform3uiv_Comp;
      if (v263[741]) {
        v273 = v263;
      }
      else {
        v273 = v264;
      }
      v273[741] = glUniform4uiv_Comp;
      if (v263[774]) {
        v274 = v263;
      }
      else {
        v274 = v264;
      }
      v274[774] = glClearBufferiv_PackThread;
      if (v263[775]) {
        v275 = v263;
      }
      else {
        v275 = v264;
      }
      v275[775] = glClearBufferuiv_PackThread;
      if (v263[776]) {
        v276 = v263;
      }
      else {
        v276 = v264;
      }
      v276[776] = glClearBufferfv_PackThread;
      if (v263[777]) {
        v277 = v263;
      }
      else {
        v277 = v264;
      }
      v277[777] = glClearBufferfi_PackThread;
      if (v263[778]) {
        v278 = v263;
      }
      else {
        v278 = v264;
      }
      v278[778] = glGetStringi_ExecThread;
      if (v263[791]) {
        v279 = v263;
      }
      else {
        v279 = v264;
      }
      v279[791] = glCopyBufferSubData_PackThread;
      if (v263[441]) {
        v280 = v263;
      }
      else {
        v280 = v264;
      }
      v280[441] = glGetUniformIndices_ExecThread;
      if (v263[444]) {
        v281 = v263;
      }
      else {
        v281 = v264;
      }
      v281[444] = glGetUniformBlockIndex_ExecThread;
      if (v263[445]) {
        v282 = v263;
      }
      else {
        v282 = v264;
      }
      v282[445] = glGetActiveUniformBlockiv_ExecThread;
      if (v263[446]) {
        v283 = v263;
      }
      else {
        v283 = v264;
      }
      v283[446] = glGetActiveUniformBlockName_ExecThread;
      if (v263[447]) {
        v284 = v263;
      }
      else {
        v284 = v264;
      }
      v284[447] = glUniformBlockBinding_PackThread;
      if (v263[405]) {
        v285 = v263;
      }
      else {
        v285 = v264;
      }
      v285[405] = glDrawRangeElements_PackThread;
      if (v263[798]) {
        v286 = v263;
      }
      else {
        v286 = v264;
      }
      v286[798] = glGetInteger64i_v_ExecThread;
      if (v263[799]) {
        v287 = v263;
      }
      else {
        v287 = v264;
      }
      v287[799] = glGetBufferParameteri64v_ExecThread;
      if (v263[800]) {
        v288 = v263;
      }
      else {
        v288 = v264;
      }
      v288[800] = glGenSamplers_ExecThread;
      if (v263[801]) {
        v289 = v263;
      }
      else {
        v289 = v264;
      }
      v289[801] = glDeleteSamplers_ExecThread;
      if (v263[802]) {
        v290 = v263;
      }
      else {
        v290 = v264;
      }
      v290[802] = glIsSampler_ExecThread;
      if (v263[803]) {
        v291 = v263;
      }
      else {
        v291 = v264;
      }
      v291[803] = glBindSampler_PackThread;
      if (v263[804]) {
        v292 = v263;
      }
      else {
        v292 = v264;
      }
      v292[804] = glSamplerParameteri_PackThread;
      if (v263[805]) {
        v293 = v263;
      }
      else {
        v293 = v264;
      }
      v293[805] = glSamplerParameteriv_PackThread;
      if (v263[806]) {
        v294 = v263;
      }
      else {
        v294 = v264;
      }
      v294[806] = glSamplerParameterf_PackThread;
      if (v263[807]) {
        v295 = v263;
      }
      else {
        v295 = v264;
      }
      v295[807] = glSamplerParameterfv_PackThread;
      if (v263[810]) {
        v296 = v263;
      }
      else {
        v296 = v264;
      }
      v296[810] = glGetSamplerParameteriv_ExecThread;
      if (v263[811]) {
        v297 = v263;
      }
      else {
        v297 = v264;
      }
      v297[811] = glGetSamplerParameterfv_ExecThread;
      if (v263[904]) {
        v298 = v263;
      }
      else {
        v298 = v264;
      }
      v298[904] = glBindTransformFeedback_PackThread;
      if (v263[905]) {
        v299 = v263;
      }
      else {
        v299 = v264;
      }
      v299[905] = glGenTransformFeedbacks_ExecThread;
      if (v263[906]) {
        v300 = v263;
      }
      else {
        v300 = v264;
      }
      v300[906] = glDeleteTransformFeedbacks_ExecThread;
      if (v263[907]) {
        v301 = v263;
      }
      else {
        v301 = v264;
      }
      v301[907] = glPauseTransformFeedback_PackThread;
      if (v263[908]) {
        v302 = v263;
      }
      else {
        v302 = v264;
      }
      v302[908] = glResumeTransformFeedback_PackThread;
      if (v263[909]) {
        v303 = v263;
      }
      else {
        v303 = v264;
      }
      v303[909] = glIsTransformFeedback_ExecThread;
      if (v263[887]) {
        v304 = v263;
      }
      else {
        v304 = v264;
      }
      v304[887] = glGetProgramBinary_ExecThread;
      if (v263[888]) {
        v305 = v263;
      }
      else {
        v305 = v264;
      }
      v305[888] = glProgramBinary_ExecThread;
      if (v263[1028]) {
        v306 = v263;
      }
      else {
        v306 = v264;
      }
      v306[1028] = glInvalidateSubFramebuffer_PackThread;
      if (v263[1029]) {
        v307 = v263;
      }
      else {
        v307 = v264;
      }
      v307[1029] = glGetInternalformativ_ExecThread;
      if (v263[1032]) {
        v308 = v263;
      }
      else {
        v308 = v264;
      }
      v308[1032] = glTexStorage3D_PackThread;
      if (v263[848]) {
        v309 = v263;
      }
      else {
        v309 = v264;
      }
      v309[848] = glProgramUniform1ui_Comp;
      if (v263[849]) {
        v310 = v263;
      }
      else {
        v310 = v264;
      }
      v310[849] = glProgramUniform2ui_Comp;
      if (v263[850]) {
        v311 = v263;
      }
      else {
        v311 = v264;
      }
      v311[850] = glProgramUniform3ui_Comp;
      if (v263[851]) {
        v312 = v263;
      }
      else {
        v312 = v264;
      }
      v312[851] = glProgramUniform4ui_Comp;
      if (v263[852]) {
        v313 = v263;
      }
      else {
        v313 = v264;
      }
      v313[852] = glProgramUniform1uiv_Comp;
      if (v263[853]) {
        v314 = v263;
      }
      else {
        v314 = v264;
      }
      v314[853] = glProgramUniform2uiv_Comp;
      if (v263[854]) {
        v315 = v263;
      }
      else {
        v315 = v264;
      }
      v315[854] = glProgramUniform3uiv_Comp;
      if (v263[855]) {
        v316 = v263;
      }
      else {
        v316 = v264;
      }
      v316[855] = glProgramUniform4uiv_Comp;
      if (v263[856]) {
        v317 = v263;
      }
      else {
        v317 = v264;
      }
      v317[856] = glProgramUniformMatrix2x3fv_Comp;
      if (v263[857]) {
        v318 = v263;
      }
      else {
        v318 = v264;
      }
      v318[857] = glProgramUniformMatrix3x2fv_Comp;
      if (v263[858]) {
        v319 = v263;
      }
      else {
        v319 = v264;
      }
      v319[858] = glProgramUniformMatrix2x4fv_Comp;
      if (v263[859]) {
        v320 = v263;
      }
      else {
        v320 = v264;
      }
      v320[859] = glProgramUniformMatrix4x2fv_Comp;
      if (v263[860]) {
        v321 = v263;
      }
      else {
        v321 = v264;
      }
      v321[860] = glProgramUniformMatrix3x4fv_Comp;
      if (!v263[861]) {
        v263 = v264;
      }
      v322 = glProgramUniformMatrix4x3fv_Comp;
    }
    else
    {
      *(void *)(v10 + 2008) = glScissor_Exec;
      if (v8[49]) {
        v532 = v8;
      }
      else {
        v532 = v9;
      }
      v532[49] = glColorMask_Exec;
      if (v8[337]) {
        v533 = v8;
      }
      else {
        v533 = v9;
      }
      v533[337] = glBlendColor_Exec;
      if (v8[338]) {
        v534 = v8;
      }
      else {
        v534 = v9;
      }
      v534[338] = glBlendEquation_Exec;
      if (v8[458]) {
        v535 = v8;
      }
      else {
        v535 = v9;
      }
      v535[458] = glBlendEquationSeparateEXT_Exec;
      if (v8[7]) {
        v536 = v8;
      }
      else {
        v536 = v9;
      }
      v536[7] = glBlendFunc_Exec;
      if (v8[336]) {
        v537 = v8;
      }
      else {
        v537 = v9;
      }
      v537[336] = glBlendFuncSeparate_Exec;
      if (v8[60]) {
        v538 = v8;
      }
      else {
        v538 = v9;
      }
      v538[60] = glDepthFunc_Exec;
      if (v8[61]) {
        v539 = v8;
      }
      else {
        v539 = v9;
      }
      v539[61] = glDepthMask_Exec;
      if (v8[254]) {
        v540 = v8;
      }
      else {
        v540 = v9;
      }
      v540[254] = glStencilFunc_Exec;
      if (v8[661]) {
        v541 = v8;
      }
      else {
        v541 = v9;
      }
      v541[661] = glStencilFuncSeparate_Exec;
      if (v8[256]) {
        v542 = v8;
      }
      else {
        v542 = v9;
      }
      v542[256] = glStencilOp_Exec;
      if (v8[586]) {
        v543 = v8;
      }
      else {
        v543 = v9;
      }
      v543[586] = glStencilOpSeparateATI_Exec;
      if (v8[255]) {
        v544 = v8;
      }
      else {
        v544 = v9;
      }
      v544[255] = glStencilMask_Exec;
      if (v8[662]) {
        v545 = v8;
      }
      else {
        v545 = v9;
      }
      v545[662] = glStencilMaskSeparate_Exec;
      if (v8[10]) {
        v546 = v8;
      }
      else {
        v546 = v9;
      }
      v546[10] = glClear_Exec;
      if (v8[12]) {
        v547 = v8;
      }
      else {
        v547 = v9;
      }
      v547[12] = glClearColor_Exec;
      if (v8[878]) {
        v548 = v8;
      }
      else {
        v548 = v9;
      }
      v548[878] = glClearDepthf_Exec;
      if (v8[15]) {
        v549 = v8;
      }
      else {
        v549 = v9;
      }
      v549[15] = glClearStencil_Exec;
      if (v8[644]) {
        v550 = v8;
      }
      else {
        v550 = v9;
      }
      v550[644] = glGenBuffers_Exec;
      if (v8[643]) {
        v551 = v8;
      }
      else {
        v551 = v9;
      }
      v551[643] = glDeleteBuffers_Exec;
      if (v8[645]) {
        v552 = v8;
      }
      else {
        v552 = v9;
      }
      v552[645] = glIsBuffer_Exec;
      if (v8[642]) {
        v553 = v8;
      }
      else {
        v553 = v9;
      }
      v553[642] = glBindBuffer_Exec;
      if (v8[646]) {
        v554 = v8;
      }
      else {
        v554 = v9;
      }
      v554[646] = glBufferData_Exec;
      if (v8[647]) {
        v555 = v8;
      }
      else {
        v555 = v9;
      }
      v555[647] = glBufferSubData_Exec;
      if (v8[651]) {
        v556 = v8;
      }
      else {
        v556 = v9;
      }
      v556[651] = glGetBufferParameteriv_Exec;
      if (v7 != 4)
      {
        if (v8[649]) {
          v557 = v8;
        }
        else {
          v557 = v9;
        }
        v557[649] = glMapBuffer_Exec;
      }
      if (v8[650]) {
        v558 = v8;
      }
      else {
        v558 = v9;
      }
      v558[650] = glUnmapBuffer_Exec;
      if (v8[652]) {
        v559 = v8;
      }
      else {
        v559 = v9;
      }
      v559[652] = glGetBufferPointerv_Exec;
      if (v8[795]) {
        v560 = v8;
      }
      else {
        v560 = v9;
      }
      v560[795] = glMapBufferRange_Exec;
      if (v8[796]) {
        v561 = v8;
      }
      else {
        v561 = v9;
      }
      v561[796] = glFlushMappedBufferRange_Exec;
      if (v8[98]) {
        v562 = v8;
      }
      else {
        v562 = v9;
      }
      v562[98] = glGenTextures_Exec;
      if (v8[59]) {
        v563 = v8;
      }
      else {
        v563 = v9;
      }
      v563[59] = glDeleteTextures_Exec;
      if (v8[145]) {
        v564 = v8;
      }
      else {
        v564 = v9;
      }
      v564[145] = glIsTexture_Exec;
      if (v8[5]) {
        v565 = v8;
      }
      else {
        v565 = v9;
      }
      v565[5] = glBindTexture_Exec;
      if (v8[342]) {
        v566 = v8;
      }
      else {
        v566 = v9;
      }
      v566[342] = glActiveTexture_Exec;
      if (v8[301]) {
        v567 = v8;
      }
      else {
        v567 = v9;
      }
      v567[301] = glTexImage2D_Exec;
      if (v8[307]) {
        v568 = v8;
      }
      else {
        v568 = v9;
      }
      v568[307] = glTexSubImage2D_Exec;
      if (v8[54]) {
        v569 = v8;
      }
      else {
        v569 = v9;
      }
      v569[54] = glCopyTexImage2D_Exec;
      if (v8[56]) {
        v570 = v8;
      }
      else {
        v570 = v9;
      }
      v570[56] = glCopyTexSubImage2D_Exec;
      if (v8[380]) {
        v571 = v8;
      }
      else {
        v571 = v9;
      }
      v571[380] = glCompressedTexImage2D_Exec;
      if (v8[383]) {
        v572 = v8;
      }
      else {
        v572 = v9;
      }
      v572[383] = glCompressedTexSubImage2D_Exec;
      if (v8[304]) {
        v573 = v8;
      }
      else {
        v573 = v9;
      }
      v573[304] = glTexParameteri_Exec;
      if (v8[302]) {
        v574 = v8;
      }
      else {
        v574 = v9;
      }
      v574[302] = glTexParameterf_Exec;
      if (v8[305]) {
        v575 = v8;
      }
      else {
        v575 = v9;
      }
      v575[305] = glTexParameteriv_Exec;
      if (v8[303]) {
        v576 = v8;
      }
      else {
        v576 = v9;
      }
      v576[303] = glTexParameterfv_Exec;
      if (v8[127]) {
        v577 = v8;
      }
      else {
        v577 = v9;
      }
      v577[127] = glGetTexParameteriv_Exec;
      if (v8[126]) {
        v578 = v8;
      }
      else {
        v578 = v9;
      }
      v578[126] = glGetTexParameterfv_Exec;
      if (v8[594]) {
        v579 = v8;
      }
      else {
        v579 = v9;
      }
      v579[594] = glCreateShaderObjectARB_Exec;
      if (v8[591]) {
        v580 = v8;
      }
      else {
        v580 = v9;
      }
      v580[591] = glDeleteObjectARB_Exec;
      if (v8[655]) {
        v581 = v8;
      }
      else {
        v581 = v9;
      }
      v581[655] = glIsShader_Exec;
      if (v8[596]) {
        v582 = v8;
      }
      else {
        v582 = v9;
      }
      v582[596] = glCompileShaderARB_Exec;
      if (v8[657]) {
        v583 = v8;
      }
      else {
        v583 = v9;
      }
      v583[657] = glGetShaderiv_Exec;
      if (v8[659]) {
        v584 = v8;
      }
      else {
        v584 = v9;
      }
      v584[659] = glGetShaderInfoLog_Exec;
      if (v8[629]) {
        v585 = v8;
      }
      else {
        v585 = v9;
      }
      v585[629] = glGetShaderSourceARB_Exec;
      if (v8[595]) {
        v586 = v8;
      }
      else {
        v586 = v9;
      }
      v586[595] = glShaderSourceARB_Exec;
      if (v8[875]) {
        v587 = v8;
      }
      else {
        v587 = v9;
      }
      v587[875] = glShaderBinaryOES_Exec;
      if (v8[876]) {
        v588 = v8;
      }
      else {
        v588 = v9;
      }
      v588[876] = glGetShaderPrecisionFormatOES_Exec;
      if (v8[874]) {
        v589 = v8;
      }
      else {
        v589 = v9;
      }
      v589[874] = glReleaseShaderCompilerOES_Exec;
      if (v8[597]) {
        v590 = v8;
      }
      else {
        v590 = v9;
      }
      v590[597] = glCreateProgramObjectARB_Exec;
      if (v8[591]) {
        v591 = v8;
      }
      else {
        v591 = v9;
      }
      v591[591] = glDeleteObjectARB_Exec;
      if (v8[656]) {
        v592 = v8;
      }
      else {
        v592 = v9;
      }
      v592[656] = glIsProgram_Exec;
      if (v8[598]) {
        v593 = v8;
      }
      else {
        v593 = v9;
      }
      v593[598] = glAttachObjectARB_Exec;
      if (v8[593]) {
        v594 = v8;
      }
      else {
        v594 = v9;
      }
      v594[593] = glDetachObjectARB_Exec;
      if (v8[599]) {
        v595 = v8;
      }
      else {
        v595 = v9;
      }
      v595[599] = glLinkProgramARB_Exec;
      if (v8[601]) {
        v596 = v8;
      }
      else {
        v596 = v9;
      }
      v596[601] = glValidateProgramARB_Exec;
      if (v8[600]) {
        v597 = v8;
      }
      else {
        v597 = v9;
      }
      v597[600] = glUseProgramObjectARB_Exec;
      if (v8[630]) {
        v598 = v8;
      }
      else {
        v598 = v9;
      }
      v598[630] = glBindAttribLocationARB_Exec;
      if (v8[626]) {
        v599 = v8;
      }
      else {
        v599 = v9;
      }
      v599[626] = glGetActiveUniformARB_Exec;
      if (v8[631]) {
        v600 = v8;
      }
      else {
        v600 = v9;
      }
      v600[631] = glGetActiveAttribARB_Exec;
      if (v8[658]) {
        v601 = v8;
      }
      else {
        v601 = v9;
      }
      v601[658] = glGetProgramiv_Exec;
      if (v8[660]) {
        v602 = v8;
      }
      else {
        v602 = v9;
      }
      v602[660] = glGetProgramInfoLog_Exec;
      if (v8[632]) {
        v603 = v8;
      }
      else {
        v603 = v9;
      }
      v603[632] = glGetAttribLocationARB_Exec;
      if (v8[625]) {
        v604 = v8;
      }
      else {
        v604 = v9;
      }
      v604[625] = glGetUniformLocationARB_Exec;
      v605 = *(void **)(result + 28984);
      v606 = *(void **)(result + 28976);
      if (v605[759]) {
        uint64_t v607 = *(void *)(result + 28984);
      }
      else {
        uint64_t v607 = *(void *)(result + 28976);
      }
      *(void *)(v607 + 6072) = glGetAttachedShaders_Exec;
      if (v605[606]) {
        v608 = v605;
      }
      else {
        v608 = v606;
      }
      v608[606] = glUniform1i_Exec;
      if (v605[607]) {
        v609 = v605;
      }
      else {
        v609 = v606;
      }
      v609[607] = glUniform2i_Exec;
      if (v605[608]) {
        v610 = v605;
      }
      else {
        v610 = v606;
      }
      v610[608] = glUniform3i_Exec;
      if (v605[609]) {
        v611 = v605;
      }
      else {
        v611 = v606;
      }
      v611[609] = glUniform4i_Exec;
      if (v605[602]) {
        v612 = v605;
      }
      else {
        v612 = v606;
      }
      v612[602] = glUniform1f_Exec;
      if (v605[603]) {
        v613 = v605;
      }
      else {
        v613 = v606;
      }
      v613[603] = glUniform2f_Exec;
      if (v605[604]) {
        v614 = v605;
      }
      else {
        v614 = v606;
      }
      v614[604] = glUniform3f_Exec;
      if (v605[605]) {
        v615 = v605;
      }
      else {
        v615 = v606;
      }
      v615[605] = glUniform4f_Exec;
      if (v605[614]) {
        v616 = v605;
      }
      else {
        v616 = v606;
      }
      v616[614] = glUniform1iv_Exec;
      if (v605[615]) {
        v617 = v605;
      }
      else {
        v617 = v606;
      }
      v617[615] = glUniform2iv_Exec;
      if (v605[616]) {
        v618 = v605;
      }
      else {
        v618 = v606;
      }
      v618[616] = glUniform3iv_Exec;
      if (v605[617]) {
        v619 = v605;
      }
      else {
        v619 = v606;
      }
      v619[617] = glUniform4iv_Exec;
      if (v605[610]) {
        v620 = v605;
      }
      else {
        v620 = v606;
      }
      v620[610] = glUniform1fv_Exec;
      if (v605[611]) {
        v621 = v605;
      }
      else {
        v621 = v606;
      }
      v621[611] = glUniform2fv_Exec;
      if (v605[612]) {
        v622 = v605;
      }
      else {
        v622 = v606;
      }
      v622[612] = glUniform3fv_Exec;
      if (v605[613]) {
        v623 = v605;
      }
      else {
        v623 = v606;
      }
      v623[613] = glUniform4fv_Exec;
      if (v605[618]) {
        v624 = v605;
      }
      else {
        v624 = v606;
      }
      v624[618] = glUniformMatrix2fv_Exec;
      if (v605[619]) {
        v625 = v605;
      }
      else {
        v625 = v606;
      }
      v625[619] = glUniformMatrix3fv_Exec;
      if (v605[620]) {
        v626 = v605;
      }
      else {
        v626 = v606;
      }
      v626[620] = glUniformMatrix4fv_Exec;
      if (v605[627]) {
        v627 = v605;
      }
      else {
        v627 = v606;
      }
      v627[627] = glGetUniformfvARB_Exec;
      if (v605[628]) {
        v628 = v605;
      }
      else {
        v628 = v606;
      }
      v628[628] = glGetUniformivARB_Exec;
      if (v605[57]) {
        v629 = v605;
      }
      else {
        v629 = v606;
      }
      v629[57] = glCullFace_Exec;
      if (v605[95]) {
        v630 = v605;
      }
      else {
        v630 = v606;
      }
      v630[95] = glFrontFace_Exec;
      if (v605[877]) {
        v631 = v605;
      }
      else {
        v631 = v606;
      }
      v631[877] = glDepthRangef_Exec;
      if (v605[335]) {
        v632 = v605;
      }
      else {
        v632 = v606;
      }
      v632[335] = glViewport_Exec;
      if (v605[72]) {
        v633 = v605;
      }
      else {
        v633 = v606;
      }
      v633[72] = glEnable_Exec;
      if (v605[63]) {
        v634 = v605;
      }
      else {
        v634 = v606;
      }
      v634[63] = glDisable_Exec;
      if (v605[143]) {
        v635 = v605;
      }
      else {
        v635 = v606;
      }
      v635[143] = glIsEnabled_Exec;
      if (v605[65]) {
        v636 = v605;
      }
      else {
        v636 = v606;
      }
      v636[65] = glDrawArrays_ES2Exec;
      if (v605[67]) {
        v637 = v605;
      }
      else {
        v637 = v606;
      }
      v637[67] = glDrawElements_ES2Exec;
      if (v605[511]) {
        v638 = v605;
      }
      else {
        v638 = v606;
      }
      v638[511] = glVertexAttribPointerARB_Exec;
      if (v605[517]) {
        v639 = v605;
      }
      else {
        v639 = v606;
      }
      v639[517] = glGetVertexAttribPointervARB_Exec;
      if (v605[512]) {
        v640 = v605;
      }
      else {
        v640 = v606;
      }
      v640[512] = glEnableVertexAttribArrayARB_Exec;
      if (v605[513]) {
        v641 = v605;
      }
      else {
        v641 = v606;
      }
      v641[513] = glDisableVertexAttribArrayARB_Exec;
      if (v605[476]) {
        v642 = v605;
      }
      else {
        v642 = v606;
      }
      v642[476] = glVertexAttrib1fARB_Exec;
      if (v605[479]) {
        v643 = v605;
      }
      else {
        v643 = v606;
      }
      v643[479] = glVertexAttrib2fARB_Exec;
      if (v605[482]) {
        v644 = v605;
      }
      else {
        v644 = v606;
      }
      v644[482] = glVertexAttrib3fARB_Exec;
      if (v605[485]) {
        v645 = v605;
      }
      else {
        v645 = v606;
      }
      v645[485] = glVertexAttrib4fARB_Exec;
      if (v605[489]) {
        v646 = v605;
      }
      else {
        v646 = v606;
      }
      v646[489] = glVertexAttrib1fvARB_Exec;
      if (v605[492]) {
        v647 = v605;
      }
      else {
        v647 = v606;
      }
      v647[492] = glVertexAttrib2fvARB_Exec;
      if (v605[495]) {
        v648 = v605;
      }
      else {
        v648 = v606;
      }
      v648[495] = glVertexAttrib3fvARB_Exec;
      if (v605[503]) {
        v649 = v605;
      }
      else {
        v649 = v606;
      }
      v649[503] = glVertexAttrib4fvARB_Exec;
      if (v605[515]) {
        v650 = v605;
      }
      else {
        v650 = v606;
      }
      v650[515] = glGetVertexAttribfvARB_Exec;
      if (v605[516]) {
        v651 = v605;
      }
      else {
        v651 = v606;
      }
      v651[516] = glGetVertexAttribivARB_Exec;
      if (v605[761]) {
        v652 = v605;
      }
      else {
        v652 = v606;
      }
      v652[761] = glVertexAttribDivisorARB_Exec;
      if (v605[762]) {
        v653 = v605;
      }
      else {
        v653 = v606;
      }
      v653[762] = glDrawArraysInstanced_ES2Exec;
      if (v605[763]) {
        v654 = v605;
      }
      else {
        v654 = v606;
      }
      v654[763] = glDrawElementsInstanced_ES2Exec;
      if (v605[90]) {
        v655 = v605;
      }
      else {
        v655 = v606;
      }
      v655[90] = glFlush_Exec;
      if (v605[89]) {
        v656 = v605;
      }
      else {
        v656 = v606;
      }
      v656[89] = glFinish_Exec;
      if (v605[102]) {
        v657 = v605;
      }
      else {
        v657 = v606;
      }
      v657[102] = glGetError_Exec;
      if (v605[99]) {
        v658 = v605;
      }
      else {
        v658 = v606;
      }
      v658[99] = glGetBooleanv_Exec;
      if (v605[104]) {
        v659 = v605;
      }
      else {
        v659 = v606;
      }
      v659[104] = glGetIntegerv_Exec;
      if (v605[103]) {
        v660 = v605;
      }
      else {
        v660 = v606;
      }
      v660[103] = glGetFloatv_Exec;
      if (v605[117]) {
        v661 = v605;
      }
      else {
        v661 = v606;
      }
      v661[117] = glGetString_Exec;
      if (v605[155]) {
        v662 = v605;
      }
      else {
        v662 = v606;
      }
      v662[155] = glLineWidth_Exec;
      if (v605[201]) {
        v663 = v605;
      }
      else {
        v663 = v606;
      }
      v663[201] = glPolygonOffset_Exec;
      if (v605[665]) {
        v664 = v605;
      }
      else {
        v664 = v606;
      }
      v664[665] = glIsRenderbufferEXT_Exec;
      if (v605[666]) {
        v665 = v605;
      }
      else {
        v665 = v606;
      }
      v665[666] = glBindRenderbuffer_Exec;
      if (v605[667]) {
        v666 = v605;
      }
      else {
        v666 = v606;
      }
      v666[667] = glDeleteRenderbuffersEXT_Exec;
      if (v605[668]) {
        v667 = v605;
      }
      else {
        v667 = v606;
      }
      v667[668] = glGenRenderbuffersEXT_Exec;
      if (v605[669]) {
        v668 = v605;
      }
      else {
        v668 = v606;
      }
      v668[669] = glRenderbufferStorageEXT_Exec;
      if (v605[670]) {
        v669 = v605;
      }
      else {
        v669 = v606;
      }
      v669[670] = glGetRenderbufferParameterivEXT_Exec;
      if (v605[671]) {
        v670 = v605;
      }
      else {
        v670 = v606;
      }
      v670[671] = glIsFramebufferEXT_Exec;
      if (v605[672]) {
        v671 = v605;
      }
      else {
        v671 = v606;
      }
      v671[672] = glBindFramebuffer_Exec;
      if (v605[673]) {
        v672 = v605;
      }
      else {
        v672 = v606;
      }
      v672[673] = glDeleteFramebuffersEXT_Exec;
      if (v605[674]) {
        v673 = v605;
      }
      else {
        v673 = v606;
      }
      v673[674] = glGenFramebuffersEXT_Exec;
      if (v605[675]) {
        v674 = v605;
      }
      else {
        v674 = v606;
      }
      v674[675] = glCheckFramebufferStatusEXT_Exec;
      if (v605[677]) {
        v675 = v605;
      }
      else {
        v675 = v606;
      }
      v675[677] = glFramebufferTexture2DEXT_Exec;
      if (v605[679]) {
        v676 = v605;
      }
      else {
        v676 = v606;
      }
      v676[679] = glFramebufferRenderbufferEXT_Exec;
      if (v605[680]) {
        v677 = v605;
      }
      else {
        v677 = v606;
      }
      v677[680] = glGetFramebufferAttachmentParameterivEXT_Exec;
      if (v605[681]) {
        v678 = v605;
      }
      else {
        v678 = v606;
      }
      v678[681] = glGenerateMipmapEXT_Exec;
      if (v605[128]) {
        v679 = v605;
      }
      else {
        v679 = v606;
      }
      v679[128] = glHint_Exec;
      if (v605[195]) {
        v680 = v605;
      }
      else {
        v680 = v606;
      }
      v680[195] = glPixelStorei_Exec;
      if (v605[237]) {
        v681 = v605;
      }
      else {
        v681 = v606;
      }
      v681[237] = glReadPixels_Exec;
      if (v605[459]) {
        v682 = v605;
      }
      else {
        v682 = v606;
      }
      v682[459] = glSampleCoverage_Exec;
      if (v605[463]) {
        v683 = v605;
      }
      else {
        v683 = v606;
      }
      v683[463] = glGenFencesAPPLE_Exec;
      if (v605[464]) {
        v684 = v605;
      }
      else {
        v684 = v606;
      }
      v684[464] = glDeleteFencesAPPLE_Exec;
      if (v605[466]) {
        v685 = v605;
      }
      else {
        v685 = v606;
      }
      v685[466] = glIsFenceAPPLE_Exec;
      if (v605[465]) {
        v686 = v605;
      }
      else {
        v686 = v606;
      }
      v686[465] = glSetFenceAPPLE_Exec;
      if (v605[467]) {
        v687 = v605;
      }
      else {
        v687 = v606;
      }
      v687[467] = glTestFenceAPPLE_Exec;
      if (v605[468]) {
        v688 = v605;
      }
      else {
        v688 = v606;
      }
      v688[468] = glFinishFenceAPPLE_Exec;
      if (v605[469]) {
        v689 = v605;
      }
      else {
        v689 = v606;
      }
      v689[469] = glTestObjectAPPLE_Exec;
      if (v605[470]) {
        v690 = v605;
      }
      else {
        v690 = v606;
      }
      v690[470] = glFinishObjectAPPLE_Exec;
      if (v605[1024]) {
        v691 = v605;
      }
      else {
        v691 = v606;
      }
      v691[1024] = glFramebufferParameterivAPPLE_Exec;
      if (v605[1025]) {
        v692 = v605;
      }
      else {
        v692 = v606;
      }
      v692[1025] = glGetFramebufferParameterivAPPLE_Exec;
      if (v605[1023]) {
        v693 = v605;
      }
      else {
        v693 = v606;
      }
      v693[1023] = glDiscardFramebufferEXT_Exec;
      if (v605[756]) {
        v694 = v605;
      }
      else {
        v694 = v606;
      }
      v694[756] = glRenderbufferStorageMultisampleEXT_Exec;
      int v695 = *(unsigned __int8 *)(result + 32501);
      if (v695 != 4)
      {
        if (v605[1026]) {
          v696 = v605;
        }
        else {
          v696 = v606;
        }
        v696[1026] = glResolveMultisampleFramebufferAPPLE_Exec;
      }
      if (v605[1027]) {
        v697 = v605;
      }
      else {
        v697 = v606;
      }
      v697[1027] = glCopyTextureLevels_Exec;
      if (v605[768]) {
        v698 = v605;
      }
      else {
        v698 = v606;
      }
      v698[768] = glBindVertexArray_Exec;
      if (v605[769]) {
        v699 = v605;
      }
      else {
        v699 = v606;
      }
      v699[769] = glDeleteVertexArrays_Exec;
      if (v605[770]) {
        v700 = v605;
      }
      else {
        v700 = v606;
      }
      v700[770] = glGenVertexArrays_Exec;
      if (v605[771]) {
        v701 = v605;
      }
      else {
        v701 = v606;
      }
      v701[771] = glIsVertexArray_Exec;
      if (v605[637]) {
        v702 = v605;
      }
      else {
        v702 = v606;
      }
      v702[637] = glBeginQuery_Exec;
      if (v605[638]) {
        v703 = v605;
      }
      else {
        v703 = v606;
      }
      v703[638] = glEndQuery_Exec;
      if (v605[634]) {
        v704 = v605;
      }
      else {
        v704 = v606;
      }
      v704[634] = glGenQueries_Exec;
      if (v605[635]) {
        v705 = v605;
      }
      else {
        v705 = v606;
      }
      v705[635] = glDeleteQueries_Exec;
      if (v605[636]) {
        v706 = v605;
      }
      else {
        v706 = v606;
      }
      v706[636] = glIsQuery_Exec;
      if (v605[639]) {
        v707 = v605;
      }
      else {
        v707 = v606;
      }
      v707[639] = glGetQueryiv_Exec;
      if (v605[641]) {
        v708 = v605;
      }
      else {
        v708 = v606;
      }
      v708[641] = glGetQueryObjectuiv_Exec;
      if (*v1 <= 5u)
      {
        if (v605[640]) {
          v709 = v605;
        }
        else {
          v709 = v606;
        }
        v709[640] = glGetQueryObjectiv_Exec;
      }
      if (v605[814]) {
        v710 = v605;
      }
      else {
        v710 = v606;
      }
      v710[814] = glLabelObjectEXT_Exec;
      if (v605[815]) {
        v711 = v605;
      }
      else {
        v711 = v606;
      }
      v711[815] = glGetObjectLabelEXT_Exec;
      if (v605[816]) {
        v712 = v605;
      }
      else {
        v712 = v606;
      }
      v712[816] = gliNoop;
      if (v605[817]) {
        v713 = v605;
      }
      else {
        v713 = v606;
      }
      v713[817] = gliNoop;
      if (v605[818]) {
        v714 = v605;
      }
      else {
        v714 = v606;
      }
      v714[818] = gliNoop;
      if (v605[1033]) {
        v715 = v605;
      }
      else {
        v715 = v606;
      }
      v715[1033] = glLabelObjectWithResponsibleProcessAPPLE_Exec;
      if (v605[819]) {
        v716 = v605;
      }
      else {
        v716 = v606;
      }
      v716[819] = glUseProgramStages_Exec;
      if (v605[820]) {
        v717 = v605;
      }
      else {
        v717 = v606;
      }
      v717[820] = glActiveShaderProgram_Exec;
      if (v605[821]) {
        v718 = v605;
      }
      else {
        v718 = v606;
      }
      v718[821] = glCreateShaderProgramv_Exec;
      if (v605[822]) {
        v719 = v605;
      }
      else {
        v719 = v606;
      }
      v719[822] = glBindProgramPipeline_Exec;
      if (v605[823]) {
        v720 = v605;
      }
      else {
        v720 = v606;
      }
      v720[823] = glDeleteProgramPipelines_Exec;
      if (v605[824]) {
        v721 = v605;
      }
      else {
        v721 = v606;
      }
      v721[824] = glGenProgramPipelines_Exec;
      if (v605[825]) {
        v722 = v605;
      }
      else {
        v722 = v606;
      }
      v722[825] = glIsProgramPipeline_Exec;
      if (v605[689]) {
        v723 = v605;
      }
      else {
        v723 = v606;
      }
      v723[689] = glProgramParameteriEXT_Exec;
      if (v605[826]) {
        v724 = v605;
      }
      else {
        v724 = v606;
      }
      v724[826] = glGetProgramPipelineiv_Exec;
      if (v605[827]) {
        v725 = v605;
      }
      else {
        v725 = v606;
      }
      v725[827] = glValidateProgramPipeline_Exec;
      if (v605[828]) {
        v726 = v605;
      }
      else {
        v726 = v606;
      }
      v726[828] = glGetProgramPipelineInfoLog_Exec;
      if (v605[829]) {
        v727 = v605;
      }
      else {
        v727 = v606;
      }
      v727[829] = glProgramUniform1i_Exec;
      if (v605[830]) {
        v728 = v605;
      }
      else {
        v728 = v606;
      }
      v728[830] = glProgramUniform2i_Exec;
      if (v605[831]) {
        v729 = v605;
      }
      else {
        v729 = v606;
      }
      v729[831] = glProgramUniform3i_Exec;
      if (v605[832]) {
        v730 = v605;
      }
      else {
        v730 = v606;
      }
      v730[832] = glProgramUniform4i_Exec;
      if (v605[833]) {
        v731 = v605;
      }
      else {
        v731 = v606;
      }
      v731[833] = glProgramUniform1f_Exec;
      if (v605[834]) {
        v732 = v605;
      }
      else {
        v732 = v606;
      }
      v732[834] = glProgramUniform2f_Exec;
      if (v605[835]) {
        v733 = v605;
      }
      else {
        v733 = v606;
      }
      v733[835] = glProgramUniform3f_Exec;
      if (v605[836]) {
        v734 = v605;
      }
      else {
        v734 = v606;
      }
      v734[836] = glProgramUniform4f_Exec;
      if (v605[837]) {
        v735 = v605;
      }
      else {
        v735 = v606;
      }
      v735[837] = glProgramUniform1iv_Exec;
      if (v605[838]) {
        v736 = v605;
      }
      else {
        v736 = v606;
      }
      v736[838] = glProgramUniform2iv_Exec;
      if (v605[839]) {
        v737 = v605;
      }
      else {
        v737 = v606;
      }
      v737[839] = glProgramUniform3iv_Exec;
      if (v605[840]) {
        v738 = v605;
      }
      else {
        v738 = v606;
      }
      v738[840] = glProgramUniform4iv_Exec;
      if (v605[841]) {
        v739 = v605;
      }
      else {
        v739 = v606;
      }
      v739[841] = glProgramUniform1fv_Exec;
      if (v605[842]) {
        v740 = v605;
      }
      else {
        v740 = v606;
      }
      v740[842] = glProgramUniform2fv_Exec;
      if (v605[843]) {
        v741 = v605;
      }
      else {
        v741 = v606;
      }
      v741[843] = glProgramUniform3fv_Exec;
      if (v605[844]) {
        v742 = v605;
      }
      else {
        v742 = v606;
      }
      v742[844] = glProgramUniform4fv_Exec;
      if (v605[845]) {
        v743 = v605;
      }
      else {
        v743 = v606;
      }
      v743[845] = glProgramUniformMatrix2fv_Exec;
      if (v605[846]) {
        v744 = v605;
      }
      else {
        v744 = v606;
      }
      v744[846] = glProgramUniformMatrix3fv_Exec;
      if (v605[847]) {
        v745 = v605;
      }
      else {
        v745 = v606;
      }
      v745[847] = glProgramUniformMatrix4fv_Exec;
      if (v605[1031]) {
        v746 = v605;
      }
      else {
        v746 = v606;
      }
      v746[1031] = glTexStorage2D_Exec;
      if (v605[779]) {
        v747 = v605;
      }
      else {
        v747 = v606;
      }
      v747[779] = glFenceSync_Exec;
      if (v605[780]) {
        v748 = v605;
      }
      else {
        v748 = v606;
      }
      v748[780] = glIsSync_Exec;
      if (v605[781]) {
        v749 = v605;
      }
      else {
        v749 = v606;
      }
      v749[781] = glDeleteSync_Exec;
      if (v605[782]) {
        v750 = v605;
      }
      else {
        v750 = v606;
      }
      v750[782] = glClientWaitSync_Exec;
      if (v605[783]) {
        v751 = v605;
      }
      else {
        v751 = v606;
      }
      v751[783] = glWaitSync_Exec;
      if (v605[784]) {
        v752 = v605;
      }
      else {
        v752 = v606;
      }
      v752[784] = glGetInteger64v_Exec;
      if (v605[785]) {
        v753 = v605;
      }
      else {
        v753 = v606;
      }
      v753[785] = glGetSynciv_Exec;
      if (v605[442]) {
        v754 = v605;
      }
      else {
        v754 = v606;
      }
      v754[442] = glGetActiveUniformsiv_Exec;
      if (v695 != 4) {
        goto LABEL_3097;
      }
      if (v605[236]) {
        v755 = v605;
      }
      else {
        v755 = v606;
      }
      v755[236] = glReadBuffer_Exec;
      if (v605[438]) {
        v756 = v605;
      }
      else {
        v756 = v606;
      }
      v756[438] = glTexImage3D_Exec;
      if (v605[439]) {
        v757 = v605;
      }
      else {
        v757 = v606;
      }
      v757[439] = glTexSubImage3D_Exec;
      if (v605[440]) {
        v758 = v605;
      }
      else {
        v758 = v606;
      }
      v758[440] = glCopyTexSubImage3D_Exec;
      if (v605[379]) {
        v759 = v605;
      }
      else {
        v759 = v606;
      }
      v759[379] = glCompressedTexImage3D_Exec;
      if (v605[382]) {
        v760 = v605;
      }
      else {
        v760 = v606;
      }
      v760[382] = glCompressedTexSubImage3D_Exec;
      if (v605[654]) {
        v761 = v605;
      }
      else {
        v761 = v606;
      }
      v761[654] = glDrawBuffersARB_Exec;
      if (v605[749]) {
        v762 = v605;
      }
      else {
        v762 = v606;
      }
      v762[749] = glUniformMatrix2x3fv_Exec;
      if (v605[750]) {
        v763 = v605;
      }
      else {
        v763 = v606;
      }
      v763[750] = glUniformMatrix3x2fv_Exec;
      if (v605[751]) {
        v764 = v605;
      }
      else {
        v764 = v606;
      }
      v764[751] = glUniformMatrix2x4fv_Exec;
      if (v605[752]) {
        v765 = v605;
      }
      else {
        v765 = v606;
      }
      v765[752] = glUniformMatrix4x2fv_Exec;
      if (v605[753]) {
        v766 = v605;
      }
      else {
        v766 = v606;
      }
      v766[753] = glUniformMatrix3x4fv_Exec;
      if (v605[754]) {
        v767 = v605;
      }
      else {
        v767 = v606;
      }
      v767[754] = glUniformMatrix4x3fv_Exec;
      if (v605[755]) {
        v768 = v605;
      }
      else {
        v768 = v606;
      }
      v768[755] = glBlitFramebufferEXT_Exec;
      if (v605[691]) {
        v769 = v605;
      }
      else {
        v769 = v606;
      }
      v769[691] = glFramebufferTextureLayerEXT_Exec;
      if (v605[700]) {
        v770 = v605;
      }
      else {
        v770 = v606;
      }
      v770[700] = glGetIntegerIndexedv_Exec;
      if (v605[696]) {
        v771 = v605;
      }
      else {
        v771 = v606;
      }
      v771[696] = glBeginTransformFeedback_Exec;
      if (v605[697]) {
        v772 = v605;
      }
      else {
        v772 = v606;
      }
      v772[697] = glEndTransformFeedback_Exec;
      if (v605[693]) {
        v773 = v605;
      }
      else {
        v773 = v606;
      }
      v773[693] = glBindBufferRange_Exec;
      if (v605[695]) {
        v774 = v605;
      }
      else {
        v774 = v606;
      }
      v774[695] = glBindBufferBase_Exec;
      if (v605[698]) {
        v775 = v605;
      }
      else {
        v775 = v606;
      }
      v775[698] = glTransformFeedbackVaryingsEXT_Exec;
      if (v605[699]) {
        v776 = v605;
      }
      else {
        v776 = v606;
      }
      v776[699] = glGetTransformFeedbackVaryingEXT_Exec;
      if (v605[731]) {
        v777 = v605;
      }
      else {
        v777 = v606;
      }
      v777[731] = glVertexAttribIPointerEXT_Exec;
      if (v605[732]) {
        v778 = v605;
      }
      else {
        v778 = v606;
      }
      v778[732] = glGetVertexAttribIivEXT_Exec;
      if (v605[733]) {
        v779 = v605;
      }
      else {
        v779 = v606;
      }
      v779[733] = glGetVertexAttribIuivEXT_Exec;
      if (v605[714]) {
        v780 = v605;
      }
      else {
        v780 = v606;
      }
      v780[714] = glVertexAttribI4iEXT_Exec;
      if (v605[718]) {
        v781 = v605;
      }
      else {
        v781 = v606;
      }
      v781[718] = glVertexAttribI4uiEXT_Exec;
      if (v605[722]) {
        v782 = v605;
      }
      else {
        v782 = v606;
      }
      v782[722] = glVertexAttribI4ivEXT_Exec;
      if (v605[726]) {
        v783 = v605;
      }
      else {
        v783 = v606;
      }
      v783[726] = glVertexAttribI4uivEXT_Exec;
      if (!v605[742]) {
        v605 = v606;
      }
      v605[742] = glGetUniformuivEXT_Exec;
      v263 = *(void **)(result + 28984);
      v784 = *(void **)(result + 28976);
      if (v263[744]) {
        uint64_t v785 = *(void *)(result + 28984);
      }
      else {
        uint64_t v785 = *(void *)(result + 28976);
      }
      *(void *)(v785 + 5952) = glGetFragDataLocationEXT_Exec;
      if (v263[734]) {
        v786 = v263;
      }
      else {
        v786 = v784;
      }
      v786[734] = glUniform1ui_Exec;
      if (v263[735]) {
        v787 = v263;
      }
      else {
        v787 = v784;
      }
      v787[735] = glUniform2ui_Exec;
      if (v263[736]) {
        v788 = v263;
      }
      else {
        v788 = v784;
      }
      v788[736] = glUniform3ui_Exec;
      if (v263[737]) {
        v789 = v263;
      }
      else {
        v789 = v784;
      }
      v789[737] = glUniform4ui_Exec;
      if (v263[738]) {
        v790 = v263;
      }
      else {
        v790 = v784;
      }
      v790[738] = glUniform1uiv_Exec;
      if (v263[739]) {
        v791 = v263;
      }
      else {
        v791 = v784;
      }
      v791[739] = glUniform2uiv_Exec;
      if (v263[740]) {
        v792 = v263;
      }
      else {
        v792 = v784;
      }
      v792[740] = glUniform3uiv_Exec;
      if (v263[741]) {
        v793 = v263;
      }
      else {
        v793 = v784;
      }
      v793[741] = glUniform4uiv_Exec;
      if (v263[774]) {
        v794 = v263;
      }
      else {
        v794 = v784;
      }
      v794[774] = glClearBufferiv_Exec;
      if (v263[775]) {
        v795 = v263;
      }
      else {
        v795 = v784;
      }
      v795[775] = glClearBufferuiv_Exec;
      if (v263[776]) {
        v796 = v263;
      }
      else {
        v796 = v784;
      }
      v796[776] = glClearBufferfv_Exec;
      if (v263[777]) {
        v797 = v263;
      }
      else {
        v797 = v784;
      }
      v797[777] = glClearBufferfi_Exec;
      if (v263[778]) {
        v798 = v263;
      }
      else {
        v798 = v784;
      }
      v798[778] = glGetStringi_Exec;
      if (v263[791]) {
        v799 = v263;
      }
      else {
        v799 = v784;
      }
      v799[791] = glCopyBufferSubData_Exec;
      if (v263[441]) {
        v800 = v263;
      }
      else {
        v800 = v784;
      }
      v800[441] = glGetUniformIndices_Exec;
      if (v263[444]) {
        v801 = v263;
      }
      else {
        v801 = v784;
      }
      v801[444] = glGetUniformBlockIndex_Exec;
      if (v263[445]) {
        v802 = v263;
      }
      else {
        v802 = v784;
      }
      v802[445] = glGetActiveUniformBlockiv_Exec;
      if (v263[446]) {
        v803 = v263;
      }
      else {
        v803 = v784;
      }
      v803[446] = glGetActiveUniformBlockName_Exec;
      if (v263[447]) {
        v804 = v263;
      }
      else {
        v804 = v784;
      }
      v804[447] = glUniformBlockBinding_Exec;
      if (v263[405]) {
        v805 = v263;
      }
      else {
        v805 = v784;
      }
      v805[405] = glDrawRangeElements_ES2Exec;
      if (v263[798]) {
        v806 = v263;
      }
      else {
        v806 = v784;
      }
      v806[798] = glGetInteger64i_v_Exec;
      if (v263[799]) {
        v807 = v263;
      }
      else {
        v807 = v784;
      }
      v807[799] = glGetBufferParameteri64v_Exec;
      if (v263[800]) {
        v808 = v263;
      }
      else {
        v808 = v784;
      }
      v808[800] = glGenSamplers_Exec;
      if (v263[801]) {
        v809 = v263;
      }
      else {
        v809 = v784;
      }
      v809[801] = glDeleteSamplers_Exec;
      if (v263[802]) {
        v810 = v263;
      }
      else {
        v810 = v784;
      }
      v810[802] = glIsSampler_Exec;
      if (v263[803]) {
        v811 = v263;
      }
      else {
        v811 = v784;
      }
      v811[803] = glBindSampler_Exec;
      if (v263[804]) {
        v812 = v263;
      }
      else {
        v812 = v784;
      }
      v812[804] = glSamplerParameteri_Exec;
      if (v263[805]) {
        v813 = v263;
      }
      else {
        v813 = v784;
      }
      v813[805] = glSamplerParameteriv_Exec;
      if (v263[806]) {
        v814 = v263;
      }
      else {
        v814 = v784;
      }
      v814[806] = glSamplerParameterf_Exec;
      if (v263[807]) {
        v815 = v263;
      }
      else {
        v815 = v784;
      }
      v815[807] = glSamplerParameterfv_Exec;
      if (v263[810]) {
        v816 = v263;
      }
      else {
        v816 = v784;
      }
      v816[810] = glGetSamplerParameteriv_Exec;
      if (v263[811]) {
        v817 = v263;
      }
      else {
        v817 = v784;
      }
      v817[811] = glGetSamplerParameterfv_Exec;
      if (v263[904]) {
        v818 = v263;
      }
      else {
        v818 = v784;
      }
      v818[904] = glBindTransformFeedback_GL3Exec;
      if (v263[905]) {
        v819 = v263;
      }
      else {
        v819 = v784;
      }
      v819[905] = glGenTransformFeedbacks_GL3Exec;
      if (v263[906]) {
        v820 = v263;
      }
      else {
        v820 = v784;
      }
      v820[906] = glDeleteTransformFeedbacks_GL3Exec;
      if (v263[907]) {
        v821 = v263;
      }
      else {
        v821 = v784;
      }
      v821[907] = glPauseTransformFeedback_GL3Exec;
      if (v263[908]) {
        v822 = v263;
      }
      else {
        v822 = v784;
      }
      v822[908] = glResumeTransformFeedback_GL3Exec;
      if (v263[909]) {
        v823 = v263;
      }
      else {
        v823 = v784;
      }
      v823[909] = glIsTransformFeedback_GL3Exec;
      if (v263[887]) {
        v824 = v263;
      }
      else {
        v824 = v784;
      }
      v824[887] = glGetProgramBinary_Exec;
      if (v263[888]) {
        v825 = v263;
      }
      else {
        v825 = v784;
      }
      v825[888] = glProgramBinary_Exec;
      if (v263[1028]) {
        v826 = v263;
      }
      else {
        v826 = v784;
      }
      v826[1028] = glInvalidateSubFramebuffer_Exec;
      if (v263[1029]) {
        v827 = v263;
      }
      else {
        v827 = v784;
      }
      v827[1029] = glGetInternalformativ_Exec;
      if (v263[1032]) {
        v828 = v263;
      }
      else {
        v828 = v784;
      }
      v828[1032] = glTexStorage3D_Exec;
      if (v263[848]) {
        v829 = v263;
      }
      else {
        v829 = v784;
      }
      v829[848] = glProgramUniform1ui_Exec;
      if (v263[849]) {
        v830 = v263;
      }
      else {
        v830 = v784;
      }
      v830[849] = glProgramUniform2ui_Exec;
      if (v263[850]) {
        v831 = v263;
      }
      else {
        v831 = v784;
      }
      v831[850] = glProgramUniform3ui_Exec;
      if (v263[851]) {
        v832 = v263;
      }
      else {
        v832 = v784;
      }
      v832[851] = glProgramUniform4ui_Exec;
      if (v263[852]) {
        v833 = v263;
      }
      else {
        v833 = v784;
      }
      v833[852] = glProgramUniform1uiv_Exec;
      if (v263[853]) {
        v834 = v263;
      }
      else {
        v834 = v784;
      }
      v834[853] = glProgramUniform2uiv_Exec;
      if (v263[854]) {
        v835 = v263;
      }
      else {
        v835 = v784;
      }
      v835[854] = glProgramUniform3uiv_Exec;
      if (v263[855]) {
        v836 = v263;
      }
      else {
        v836 = v784;
      }
      v836[855] = glProgramUniform4uiv_Exec;
      if (v263[856]) {
        v837 = v263;
      }
      else {
        v837 = v784;
      }
      v837[856] = glProgramUniformMatrix2x3fv_Exec;
      if (v263[857]) {
        v838 = v263;
      }
      else {
        v838 = v784;
      }
      v838[857] = glProgramUniformMatrix3x2fv_Exec;
      if (v263[858]) {
        v839 = v263;
      }
      else {
        v839 = v784;
      }
      v839[858] = glProgramUniformMatrix2x4fv_Exec;
      if (v263[859]) {
        v840 = v263;
      }
      else {
        v840 = v784;
      }
      v840[859] = glProgramUniformMatrix4x2fv_Exec;
      if (v263[860]) {
        v841 = v263;
      }
      else {
        v841 = v784;
      }
      v841[860] = glProgramUniformMatrix3x4fv_Exec;
      if (!v263[861]) {
        v263 = v784;
      }
      v322 = glProgramUniformMatrix4x3fv_Exec;
    }
    v263[861] = v322;
  }
LABEL_3097:
  *(_WORD *)(result + 26340) = 0;
LABEL_3098:
  uint64_t v1046 = *(void *)(result + 27648);
  v1047 = *(void **)(result + 28984);
  v1048 = *(void **)(result + 28976);
  if (v1047[123]) {
    uint64_t v1049 = *(void *)(result + 28984);
  }
  else {
    uint64_t v1049 = *(void *)(result + 28976);
  }
  BOOL v1050 = v1046 == 0;
  if (v1046) {
    v1051 = glGetTexImage_PackThread;
  }
  else {
    v1051 = glGetTexImage_Exec;
  }
  if (v1050) {
    v1052 = glGetTexLevelParameteriv_Exec;
  }
  else {
    v1052 = glGetTexLevelParameteriv_ExecThread;
  }
  v1053 = glGetCompressedTexImage_ExecThread;
  if (v1050) {
    v1053 = glGetCompressedTexImage_Exec;
  }
  *(void *)(v1049 + 984) = v1051;
  if (v1047[125]) {
    v1054 = v1047;
  }
  else {
    v1054 = v1048;
  }
  v1054[125] = v1052;
  if (v1047[385]) {
    v1055 = v1047;
  }
  else {
    v1055 = v1048;
  }
  v1055[385] = v1053;
  return result;
}

uint64_t gliSetInteger(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v134 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 10004;
  }
  uint64_t v4 = a1 + 29788;
  if (*(_DWORD *)(a1 + 29792) != 878944803) {
    return 10004;
  }
  if (!a3) {
    return 10014;
  }
  if (a2 == 1962)
  {
    uint64_t v7 = 0;
    *(void *)(a1 + 29000) = *(void *)a3;
    return v7;
  }
  int v9 = (unsigned __int16 *)(a1 + 32493);
  if (*(void *)(a1 + 27648)) {
    (*(void (**)(uint64_t))(a1 + 27752))(a1);
  }
  uint64_t v7 = 0;
  if ((int)a2 > 972)
  {
    if ((int)a2 > 1500)
    {
      switch((int)a2)
      {
        case 1612:
          uint64_t v7 = 10010;
          unsigned int v23 = a3[1];
          switch(*a3)
          {
            case 0x640u:
              uint64_t v24 = *(void *)(a1 + 19296) + 72;
              goto LABEL_272;
            case 0x642u:
              uint64_t v24 = *(void *)(a1 + 19296) + 104;
              goto LABEL_272;
            case 0x645u:
              uint64_t v24 = *(void *)(a1 + 19296) + 264;
              goto LABEL_272;
            case 0x646u:
              uint64_t v106 = 25904;
              goto LABEL_269;
            case 0x647u:
              uint64_t v106 = 25872;
LABEL_269:
              uint64_t v24 = a1 + v106;
              goto LABEL_272;
            case 0x648u:
              uint64_t v24 = *(void *)(a1 + 19296) + 8;
              goto LABEL_272;
            case 0x649u:
              uint64_t v24 = *(void *)(a1 + 19296) + 40;
LABEL_272:
              os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
              int ShaderObjectNamed = gleAddHashName(v24, v23);
              goto LABEL_273;
            case 0x64Au:
              os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
              uint64_t ProgramPipelineHashObject = (uint64_t)gleCreateProgramPipelineHashObject(a1, v23);
              goto LABEL_280;
            case 0x64Bu:
              os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
              SamplerHashObject = gleCreateSamplerHashObject(a1, v23);
              uint64_t v110 = *(void *)(a1 + 19296) + 232;
              goto LABEL_282;
            case 0x650u:
              int v112 = a3[2];
              int v111 = a3[3];
              os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
              uint64_t ProgramPipelineHashObject = gleFenceSync(a1, v23, v112, v111);
LABEL_280:
              SamplerHashObject = (char *)ProgramPipelineHashObject;
              goto LABEL_283;
            case 0x651u:
              os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
              SamplerHashObject = gleCreateTransformFeedbackObject(a1, v23);
              uint64_t v110 = a1 + 26400;
LABEL_282:
              gleAddHashNameAndObject(a1, v110, (uint64_t)SamplerHashObject);
LABEL_283:
              os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
              BOOL v53 = SamplerHashObject == 0;
              goto LABEL_274;
            default:
              return v7;
          }
        case 1613:
          int v50 = *a3;
          uint64_t v49 = a3[1];
          os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
          int ShaderObjectNamed = gleCreateShaderObjectNamed(a1, v50, v49);
          goto LABEL_273;
        case 1614:
          unsigned int v52 = *a3;
          os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
          int ShaderObjectNamed = gleCreateProgramObjectNamed(a1, v52);
LABEL_273:
          int v107 = ShaderObjectNamed;
          os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
          BOOL v53 = v107 == 0;
          goto LABEL_274;
        case 1615:
          if (*a3 - 2500 > 2) {
            return 10010;
          }
          BOOL v53 = gleReserveVertexArray(a1, a3[1]) == 0;
LABEL_274:
          if (v53) {
            return 10008;
          }
          else {
            return 0;
          }
        case 1616:
        case 1617:
          goto LABEL_216;
        case 1618:
          uint64_t v7 = 0;
          unsigned int v54 = *v9 & 0x7FFF | (*(unsigned __int8 *)(a1 + 32495) << 16);
          unsigned __int16 v55 = *v9 & 0x7FFF | ((*a3 != 0) << 15);
LABEL_145:
          *int v9 = v55;
          unsigned int v58 = HIWORD(v54);
          goto LABEL_146;
        case 1619:
          uint64_t v7 = 0;
          unsigned int v56 = (*v9 | (*(unsigned __int8 *)(a1 + 32495) << 16)) & 0xFFFEFFFF;
          unsigned int v57 = v56 | ((*a3 != 0) << 16);
          goto LABEL_109;
        case 1620:
          uint64_t v7 = 0;
          unsigned int v56 = (*v9 | (*(unsigned __int8 *)(a1 + 32495) << 16)) & 0xFFFDFFFF;
          unsigned int v57 = v56 | ((*a3 != 0) << 17);
          goto LABEL_109;
        case 1621:
          uint64_t v7 = 0;
          unsigned int v56 = (*v9 | (*(unsigned __int8 *)(a1 + 32495) << 16)) & 0xFFFBFFFF;
          unsigned int v57 = v56 | ((*a3 != 0) << 18);
          goto LABEL_109;
        case 1622:
          uint64_t v7 = 0;
          unsigned int v56 = (*v9 | (*(unsigned __int8 *)(a1 + 32495) << 16)) & 0xFFF7FFFF;
          unsigned int v57 = v56 | ((*a3 != 0) << 19);
LABEL_109:
          *int v9 = v56;
          unsigned int v58 = HIWORD(v57);
LABEL_146:
          *(unsigned char *)(a1 + 32495) = v58;
          goto LABEL_216;
        default:
          switch((int)a2)
          {
            case 1702:
              uint64_t v7 = 0;
              *(unsigned char *)uint64_t v4 = *a3;
              break;
            case 1703:
              uint64_t v7 = 0;
              *(_DWORD *)(a1 + 29780) = *a3;
              break;
            case 1704:
              uint64_t v7 = 0;
              *(_DWORD *)(a1 + 29784) = *a3;
              break;
            case 1705:
              goto LABEL_216;
            case 1706:
              uint64_t v7 = 0;
              *(unsigned char *)(v4 + 1) = *a3;
              break;
            default:
              if (a2 != 1501) {
                goto LABEL_216;
              }
              uint64_t v7 = 0;
              int v47 = *v9 & 0xDFFF | (*(unsigned __int8 *)(a1 + 32495) << 16);
              unsigned __int16 v48 = *v9 & 0xDFFF | ((*a3 != 0) << 13);
LABEL_155:
              *int v9 = v48;
              *(unsigned char *)(a1 + 32495) = BYTE2(v47);
              break;
          }
          return v7;
      }
    }
    switch((int)a2)
    {
      case 973:
        uint64_t v7 = 0;
        int v47 = *v9 & 0xFEFF | (*(unsigned __int8 *)(a1 + 32495) << 16);
        unsigned __int16 v48 = *v9 & 0xFEFF | ((*a3 != 0) << 8);
        goto LABEL_155;
      case 974:
        uint64_t v7 = 0;
        unsigned int v54 = *v9 & 0xFF7F | (*(unsigned __int8 *)(a1 + 32495) << 16);
        unsigned __int16 v55 = *v9 & 0xFF7F | ((*a3 != 0) << 7);
        goto LABEL_145;
      case 975:
        uint64_t v7 = 0;
        unsigned int v54 = *v9 & 0xFFBF | (*(unsigned __int8 *)(a1 + 32495) << 16);
        unsigned __int16 v55 = *v9 & 0xFFBF | ((*a3 != 0) << 6);
        goto LABEL_145;
      case 976:
      case 981:
      case 983:
      case 984:
      case 985:
      case 987:
      case 988:
      case 991:
      case 994:
      case 996:
        goto LABEL_216;
      case 977:
        uint64_t v7 = 0;
        int v47 = *v9 & 0xFFDF | (*(unsigned __int8 *)(a1 + 32495) << 16);
        unsigned __int16 v48 = *v9 & 0xFFDF | (32 * (*a3 != 0));
        goto LABEL_155;
      case 978:
        uint64_t v7 = 0;
        unsigned int v54 = *v9 & 0xFBFF | (*(unsigned __int8 *)(a1 + 32495) << 16);
        unsigned __int16 v55 = *v9 & 0xFBFF | ((*a3 != 0) << 10);
        goto LABEL_145;
      case 979:
        uint64_t v7 = 0;
        unsigned int v54 = *v9 & 0xF7FF | (*(unsigned __int8 *)(a1 + 32495) << 16);
        unsigned __int16 v55 = *v9 & 0xF7FF | ((*a3 != 0) << 11);
        goto LABEL_145;
      case 980:
        uint64_t v7 = 0;
        unsigned int v54 = *v9 & 0xEFFF | (*(unsigned __int8 *)(a1 + 32495) << 16);
        unsigned __int16 v55 = *v9 & 0xEFFF | ((*a3 != 0) << 12);
        goto LABEL_145;
      case 982:
        uint64_t v7 = 0;
        int v47 = *v9 & 0xFFEF | (*(unsigned __int8 *)(a1 + 32495) << 16);
        unsigned __int16 v48 = *v9 & 0xFFEF | (16 * (*a3 != 0));
        goto LABEL_155;
      case 986:
        uint64_t v7 = 0;
        int v47 = *v9 & 0xFFF7 | (*(unsigned __int8 *)(a1 + 32495) << 16);
        unsigned __int16 v48 = *v9 & 0xFFF7 | (8 * (*a3 != 0));
        goto LABEL_155;
      case 989:
        int v65 = *a3;
        int v66 = *(_WORD *)(a1 + 32493) & 0xFFFB | (*(unsigned __int8 *)(a1 + 32495) << 16);
        *int v9 = *v9 & 0xFFFB | (4 * (*a3 != 0));
        *(unsigned char *)(a1 + 32495) = BYTE2(v66);
        uint64_t v67 = *(void *)(a1 + 28984);
        if (!*(void *)(v67 + 816)) {
          uint64_t v67 = *(void *)(a1 + 28976);
        }
        uint64_t v7 = 0;
        if (*(void *)(a1 + 27648))
        {
          if (v65) {
            v68 = glGetError_NoSync;
          }
          else {
            v68 = glGetError_ExecThread;
          }
        }
        else
        {
          v68 = glGetError_Exec;
        }
        *(void *)(v67 + 816) = v68;
        return v7;
      case 990:
        uint64_t v7 = 0;
        int v47 = *v9 & 0xFFFD | (*(unsigned __int8 *)(a1 + 32495) << 16);
        unsigned __int16 v48 = *v9 & 0xFFFD | (2 * (*a3 != 0));
        goto LABEL_155;
      case 992:
      case 993:
        int v34 = *a3;
        *int v9 = *v9 & 0xFFFE | (*a3 != 0);
        uint64_t v35 = *(void *)(a1 + 27648);
        uint64_t v36 = *(void **)(a1 + 28984);
        uint64_t v37 = *(void **)(a1 + 28976);
        if (v36[301]) {
          uint64_t v38 = *(void *)(a1 + 28984);
        }
        else {
          uint64_t v38 = *(void *)(a1 + 28976);
        }
        if (v34)
        {
          if (v35)
          {
            *(void *)(v38 + 2408) = glTexImage2D_FlushExecThread;
            if (v36[307]) {
              int32x2_t v39 = v36;
            }
            else {
              int32x2_t v39 = v37;
            }
            v39[307] = glTexSubImage2D_FlushExecThread;
            if (v36[380]) {
              unsigned int v40 = v36;
            }
            else {
              unsigned int v40 = v37;
            }
            v40[380] = glCompressedTexImage2D_FlushExecThread;
            if (v36[383]) {
              unsigned int v41 = v36;
            }
            else {
              unsigned int v41 = v37;
            }
            v41[383] = glCompressedTexSubImage2D_FlushExecThread;
            if (a2 == 993) {
              return 0;
            }
            uint64_t v7 = 0;
            if (!v36[12]) {
              uint64_t v36 = v37;
            }
            unsigned int v42 = glClearColor_FlushExecThread;
          }
          else
          {
            *(void *)(v38 + 2408) = glTexImage2D_FlushExec;
            if (v36[307]) {
              v92 = v36;
            }
            else {
              v92 = v37;
            }
            v92[307] = glTexSubImage2D_FlushExec;
            if (v36[380]) {
              v93 = v36;
            }
            else {
              v93 = v37;
            }
            v93[380] = glCompressedTexImage2D_FlushExec;
            if (v36[383]) {
              v94 = v36;
            }
            else {
              v94 = v37;
            }
            v94[383] = glCompressedTexSubImage2D_FlushExec;
            if (a2 == 993) {
              return 0;
            }
            uint64_t v7 = 0;
            if (!v36[12]) {
              uint64_t v36 = v37;
            }
            unsigned int v42 = glClearColor_FlushExec;
          }
        }
        else if (v35)
        {
          *(void *)(v38 + 2408) = glTexImage2D_PackThread;
          if (v36[307]) {
            v83 = v36;
          }
          else {
            v83 = v37;
          }
          v83[307] = glTexSubImage2D_PackThread;
          if (v36[380]) {
            v84 = v36;
          }
          else {
            v84 = v37;
          }
          v84[380] = glCompressedTexImage2D_PackThread;
          if (v36[383]) {
            v85 = v36;
          }
          else {
            v85 = v37;
          }
          v85[383] = glCompressedTexSubImage2D_PackThread;
          if (a2 == 993) {
            return 0;
          }
          uint64_t v7 = 0;
          if (!v36[12]) {
            uint64_t v36 = v37;
          }
          unsigned int v42 = glClearColor_Comp;
        }
        else
        {
          *(void *)(v38 + 2408) = glTexImage2D_Exec;
          if (v36[307]) {
            v99 = v36;
          }
          else {
            v99 = v37;
          }
          v99[307] = glTexSubImage2D_Exec;
          if (v36[380]) {
            v100 = v36;
          }
          else {
            v100 = v37;
          }
          v100[380] = glCompressedTexImage2D_Exec;
          if (v36[383]) {
            v101 = v36;
          }
          else {
            v101 = v37;
          }
          v101[383] = glCompressedTexSubImage2D_Exec;
          if (a2 == 993) {
            return 0;
          }
          uint64_t v7 = 0;
          if (!v36[12]) {
            uint64_t v36 = v37;
          }
          unsigned int v42 = glClearColor_Exec;
        }
        v36[12] = v42;
        return v7;
      case 995:
        uint64_t v7 = 0;
        LOBYTE(v69) = *a3 != 0;
        uint64_t v70 = *(void *)(a1 + 19296);
        char v71 = *(unsigned char *)(v70 + 344) & 0xFE;
LABEL_165:
        char v82 = v71 | v69;
LABEL_168:
        *(unsigned char *)(v70 + 344) = v82;
        return v7;
      case 997:
      case 998:
      case 999:
        uint64_t v11 = *a3;
        unsigned int v10 = a3[1];
        int v13 = a3[2];
        int v12 = a3[3];
        unsigned int v14 = a3[4];
        BOOL v15 = v10 == 34067;
        if (v10 == 34067) {
          int v16 = 34069;
        }
        else {
          int v16 = a3[1];
        }
        uint64_t v17 = 6;
        if (!v15) {
          uint64_t v17 = 1;
        }
        uint64_t v126 = v17;
        size_t v128 = 0;
        if (a2 == 997 || v13 != 6402) {
          uint64_t v18 = gleCheckTexImage2DArgs(a1, v16, 0, v13, v12, v14, 0, 32993, 33639, &v128);
        }
        else {
          uint64_t v18 = gleCheckTexImage2DArgs(a1, v16, 0, 6402, v12, v14, 0, 6402, 5125, &v128);
        }
        uint64_t v43 = v18;
        if (!v18) {
          return 10008;
        }
        __int16 v44 = *(_WORD *)(v18 + 768);
        if ((v44 & 0x1C00) == 0x400) {
          goto LABEL_184;
        }
        if ((*(_WORD *)(v18 + 768) & 0x1C00) != 0)
        {
          if ((*(_WORD *)(v18 + 768) & 0x1800) != 0)
          {
LABEL_258:
            if (!*(_WORD *)(v4 + 44)) {
              *(_WORD *)(v4 + 44) = 1282;
            }
            return 10007;
          }
        }
        else
        {
          *(_WORD *)(v18 + 768) = v44 | 0x400;
        }
LABEL_184:
        if ((*(_DWORD *)(a1 + 1672 * *(unsigned __int8 *)(a1 + 32499) + 34176) & 0x7F00) == 0x400) {
          *(void *)(v18 + 784) = gle_io_data(v11);
        }
        *(_DWORD *)(v43 + 780) = v11;
        if (a2 == 997) {
          unsigned int v86 = a3[6];
        }
        else {
          LOWORD(v86) = 4352;
        }
        *(_WORD *)(v43 + 774) = v86;
        uint64_t v87 = 560;
        uint64_t v88 = v126;
        do
        {
          *(_WORD *)(v43 + v87) = v13;
          v87 += 30;
          --v88;
        }
        while (v88);
        __int16 v125 = gleStandardizeIntegerFormat(0x1908u);
        gfxReqToBase();
        uint64_t v89 = 0;
        *(_DWORD *)(v43 + 968) = 65539;
        uint64_t v90 = v43 + 1032;
        do
        {
          __int16 v132 = 0;
          *(_OWORD *)buf = 0u;
          long long v131 = 0u;
          if (*(unsigned char *)(v90 + 11) & 0x20 | gfxEvaluateTextureForGeometryChange() & 1) {
            (*(void (**)(void, uint64_t, void, void))(*(void *)(a1 + 29496) + 272))(*(void *)(a1 + 29464), 1, 0, *(void *)(v43 + 8 * *(unsigned __int8 *)(a1 + 32500)));
          }
          gleCreateSurfaceLevel(a1, v90, v12, v14, v125, 5121);
          gfxUpdateTextureForGeometryChange();
          gfxUpdatePluginTextureLevelGeometry();
          if (a2 == 997)
          {
            int v91 = a3[7];
            if (v91) {
              gleGenSurfaceMipmaps(a1, v43, v89, v91, *(unsigned char *)(v43 + 898) & 1);
            }
          }
          ++v89;
          v90 += 480;
        }
        while (v126 != v89);
        uint64_t v7 = 0;
        *(_DWORD *)(a1 + 1524) |= 1 << (*(_WORD *)(a1 + 23768) & 0xF);
        *(_DWORD *)(a1 + 28652) = 0;
        *(_DWORD *)(a1 + 1548) |= 0x22000u;
        return v7;
      default:
        if (a2 == 1402)
        {
          uint64_t v7 = 0;
          *(unsigned char *)(a1 + 32503) = *a3 != 0;
        }
        goto LABEL_216;
    }
  }
  if ((int)a2 > 600)
  {
    if ((int)a2 <= 700)
    {
      switch((int)a2)
      {
        case 601:
        case 602:
          if (!*(unsigned char *)(a1 + 32496)) {
            return 0;
          }
          unint64_t v25 = 0;
          LODWORD(v7) = 0;
          unint64_t v26 = (void *)(a1 + 32512);
          do
          {
            unsigned int v27 = (*(uint64_t (**)(void, uint64_t, unsigned int *))(v26[206] + 1248))(*v26, a2, a3);
            if (v7) {
              BOOL v28 = 1;
            }
            else {
              BOOL v28 = v27 == 0;
            }
            if (v28) {
              uint64_t v7 = v7;
            }
            else {
              uint64_t v7 = v27;
            }
            ++v25;
            v26 += 209;
          }
          while (v25 < *((unsigned __int8 *)v9 + 3));
          break;
        case 603:
        case 604:
        case 605:
        case 606:
        case 609:
          goto LABEL_216;
        case 607:
          uint64_t v31 = *(uint64_t (**)(uint64_t, uint64_t, unsigned int *))(*(void *)(a1 + 29496) + 192);
          uint64_t v32 = *(void *)(a1 + 29464);
          uint64_t v33 = 607;
          goto LABEL_116;
        case 608:
          if (*a3 >= 5 || ((0x17u >> *a3) & 1) == 0) {
            return 10008;
          }
          goto LABEL_215;
        case 610:
          uint64_t v7 = 0;
          *(unsigned char *)(v4 + 2) = *a3;
          goto LABEL_216;
        default:
          if ((a2 - 666) < 2)
          {
            uint64_t v7 = 0;
            *(_DWORD *)(a1 + 28652) = 0;
            *(_DWORD *)(a1 + 1532) |= 0x80000000;
          }
          goto LABEL_216;
      }
      return v7;
    }
    if ((int)a2 <= 909)
    {
      if (a2 == 701)
      {
        uint64_t v7 = 0;
        *(unsigned char *)(v4 + 2704) = *a3;
        goto LABEL_216;
      }
      if (a2 != 702)
      {
        if (a2 != 703) {
          goto LABEL_216;
        }
        if (*(unsigned char *)(a1 + 32496))
        {
          unint64_t v19 = 0;
          LODWORD(v7) = 0;
          float v20 = (void *)(a1 + 32512);
          do
          {
            unsigned int v21 = (*(uint64_t (**)(void, uint64_t, unsigned int *))(v20[206] + 1248))(*v20, 703, a3);
            if (v7) {
              BOOL v22 = 1;
            }
            else {
              BOOL v22 = v21 == 0;
            }
            if (v22) {
              uint64_t v7 = v7;
            }
            else {
              uint64_t v7 = v21;
            }
            ++v19;
            v20 += 209;
          }
          while (v19 < *(unsigned __int8 *)(a1 + 32496));
          goto LABEL_216;
        }
LABEL_215:
        uint64_t v7 = 0;
        goto LABEL_216;
      }
      if (*a3 == 8)
      {
        *(_DWORD *)buf = 1;
        uint64_t v45 = a1;
        uint64_t v46 = 1622;
      }
      else
      {
        if (*a3 != 7) {
          goto LABEL_215;
        }
        *(_DWORD *)buf = 1;
        uint64_t v45 = a1;
        uint64_t v46 = 1621;
      }
      gliSetInteger(v45, v46, buf);
      goto LABEL_215;
    }
    switch((int)a2)
    {
      case 921:
        if (*a3 == 36161)
        {
          uint64_t v29 = *(void *)(a1 + 28952);
          if (!v29) {
            return 0;
          }
          uint64_t v30 = v29 + 40;
        }
        else
        {
          uint64_t v30 = gleLookUpTexture(a1, *a3);
          if (!v30) {
            return 0;
          }
        }
        uint64_t v7 = 0;
        *(unsigned char *)(v30 + 792) = *(unsigned char *)(v30 + 792) & 0xFE | (a3[1] != 0);
        return v7;
      case 922:
      case 923:
      case 924:
      case 925:
      case 926:
        goto LABEL_216;
      case 927:
        int v69 = *a3;
        if (*a3) {
          int v69 = (*(_DWORD *)(*(void *)(a1 + 29032) + 564) >> 10) & 0x10;
        }
        uint64_t v7 = 0;
        uint64_t v70 = *(void *)(a1 + 19296);
        char v71 = *(unsigned char *)(v70 + 344) & 0xEF;
        goto LABEL_165;
      case 928:
        uint64_t v7 = 0;
        uint64_t v70 = *(void *)(a1 + 19296);
        char v82 = *(unsigned char *)(v70 + 344) & 0xFD | (2 * (*a3 != 0));
        goto LABEL_168;
      case 929:
        uint64_t v7 = 0;
        uint64_t v70 = *(void *)(a1 + 19296);
        char v82 = *(unsigned char *)(v70 + 344) & 0xFB | (4 * (*a3 != 0));
        goto LABEL_168;
      default:
        if (a2 != 910) {
          goto LABEL_216;
        }
        size_t v128 = 0;
        IOSurfaceID v73 = *a3;
        unsigned int v72 = a3[1];
        uint64_t v75 = a3[2];
        unsigned int v74 = a3[3];
        unsigned int v76 = a3[4];
        unsigned int v77 = a3[5];
        int v78 = a3[6];
        int v79 = a3[7];
        unsigned int v80 = a3[8];
        if (v72 == 3553)
        {
          int v124 = v80;
          int v127 = v78;
          uint64_t v81 = gleCheckTexImage2DArgs(a1, 3553, 0, v75, v74, v76, 0, v77, v78, &v128);
          if (!v81) {
            return 10008;
          }
        }
        else
        {
          if (v72 != 36161) {
            return 10008;
          }
          int v127 = v78;
          if (!gleCheckRenderbufferStorageArgs(a1, 36161, 0, v75, v74, v76)) {
            return 10008;
          }
          int v124 = v80;
          uint64_t v81 = *(void *)(a1 + 28952) + 40;
        }
        __int16 v102 = *(_WORD *)(v81 + 768);
        if ((v102 & 0x1C00) != 0x800)
        {
          if ((*(_WORD *)(v81 + 768) & 0x1C00) != 0) {
            goto LABEL_258;
          }
          *(_WORD *)(v81 + 768) = v102 | 0x800;
        }
        if ((unsigned __int16)(v79 >> 24) <= 4u)
        {
          gleTextureReleaseIOSurfaces(*(void *)(a1 + 19296), v81);
          buffer = IOSurfaceLookup(v73);
          if (buffer)
          {
            if ((v79 & 0xFFFFFF) != 0 && IOSurfaceGetPlaneCount(buffer) <= (*(void *)&v79 & 0xFFFFFFuLL)) {
              goto LABEL_292;
            }
            unsigned int planeIndex = v79 & 0xFFFFFF;
            if ((v124 & 4) != 0) {
              goto LABEL_294;
            }
            int v121 = gfxPixelBytes();
            size_t BytesPerRowOfPlane = IOSurfaceGetBytesPerRowOfPlane(buffer, planeIndex);
            if (IOSurfaceAllowsPixelSizeCasting(buffer)
              || (size_t BytesPerElementOfPlane = IOSurfaceGetBytesPerElementOfPlane(buffer, planeIndex),
                  size_t v103 = BytesPerElementOfPlane / IOSurfaceGetElementWidthOfPlane(buffer, planeIndex),
                  v103 == v121))
            {
              if (BytesPerRowOfPlane >= v121 * v74 || v77 == 35429) {
                goto LABEL_291;
              }
              if (v77 - 35430 <= 0xE)
              {
                int v104 = 1 << (v77 - 102);
                int v105 = 32383;
                goto LABEL_288;
              }
            }
            else
            {
              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
              {
                IOSurfaceID ID = IOSurfaceGetID(buffer);
                *(_DWORD *)buf = 67110400;
                *(_DWORD *)&buf[4] = ID;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v121;
                *(_WORD *)&buf[14] = 1024;
                LODWORD(v131) = v77;
                WORD2(v131) = 1024;
                *(_DWORD *)((char *)&v131 + 6) = v127;
                WORD5(v131) = 1024;
                HIDWORD(v131) = v103;
                __int16 v132 = 1024;
                int v133 = v79 & 0xFFFFFF;
                _os_log_error_impl(&dword_227CFF000, &_os_log_internal, OS_LOG_TYPE_ERROR, "TexImageIOSurface2D, IOSurface %08x pixel size (%d) for format %04x, type %04x doesn't match bytes per element/elementwidth (%d) of plane %d\n", buf, 0x26u);
              }
              if (v77 - 35429 <= 0xF)
              {
                int v104 = 1 << (v77 - 101);
                int v105 = 64767;
LABEL_288:
                if ((v104 & v105) != 0) {
                  goto LABEL_291;
                }
              }
            }
            if (v77 - 37875 > 0x1D || ((1 << (v77 + 13)) & 0x3800073F) == 0) {
              goto LABEL_292;
            }
LABEL_291:
            if (IOSurfaceGetHeightOfPlane(buffer, planeIndex) < (int)(v76 << ((unsigned __int16)(v79 >> 24) != 0)))
            {
LABEL_292:
              gleTextureReleaseIOSurfaces(*(void *)(a1 + 19296), v81);
              CFRelease(buffer);
              return 10008;
            }
LABEL_294:
            *(_DWORD *)(v81 + 780) = v73;
            *(void *)(v81 + 1024) = buffer;
            *(_WORD *)(v81 + 1016) = v79;
            *(_WORD *)(v81 + 1018) = v79 >> 24;
            if (IOSurfaceIsTiled()) {
              int v113 = v124 | 8;
            }
            else {
              int v113 = v124;
            }
            *(_DWORD *)(v81 + 868) = v113;
            int Width = IOSurfaceGetWidth(buffer);
            int v115 = IOSurfaceGetHeight(buffer) * Width;
            *(_DWORD *)(v81 + 872) = (*MEMORY[0x263EF8AF8] + v115 * IOSurfaceGetBytesPerElement(buffer) - 1) & -*MEMORY[0x263EF8AF8];
            *(_DWORD *)(v81 + 864) = v113;
            *(void *)(v81 + 816) = buffer;
            *(_DWORD *)(v81 + 848) = v113;
            if (v127 == 5126)
            {
              if (v75 == 6408)
              {
                uint64_t v75 = 34836;
              }
              else if (v75 == 6407)
              {
                uint64_t v75 = 34837;
              }
              else
              {
                uint64_t v75 = v75;
              }
            }
            uint64_t v116 = gleStandardizeIntegerFormat(v77);
            __int16 v117 = v116;
            *(_WORD *)(v81 + 560) = gleSizedInternalFormat(a1, v81, v75, v116, v127, 0, 0);
            *(_DWORD *)(v81 + 968) = 65539;
            __int16 v132 = 0;
            *(_OWORD *)buf = 0u;
            long long v131 = 0u;
            if (*(unsigned char *)(v81 + 1043) & 0x20 | gfxEvaluateTextureForGeometryChange() & 1) {
              (*(void (**)(void, uint64_t, void, void))(*(void *)(a1 + 29496) + 272))(*(void *)(a1 + 29464), 1, 0, *(void *)(v81 + 8 * *(unsigned __int8 *)(a1 + 32500)));
            }
            gleCreateIOSurfaceLevel(a1, v81 + 1032, v74, v76, 1, v117, v127);
            gfxUpdateTextureForGeometryChange();
            gfxUpdatePluginTextureLevelGeometry();
            (*(void (**)(void, void))(*(void *)(a1 + 29448) + 328))(*(void *)(a1 + 29024), *(void *)(v81 + 8 * *(unsigned __int8 *)(a1 + 32499)));
            *(_DWORD *)(a1 + 28652) = 0;
            *(_DWORD *)(a1 + 1548) |= 0x22000u;
            gleDirtyTextureObjectCurrentBindPointsGeom(a1, v81);
            return 0;
          }
        }
        return 10008;
    }
  }
  if ((int)a2 > 349)
  {
    if ((a2 - 350) <= 0x2A && ((1 << (a2 - 94)) & 0x44441101111) != 0) {
      return v7;
    }
    goto LABEL_216;
  }
  if ((int)a2 > 305)
  {
    switch((int)a2)
    {
      case 306:
        uint64_t v7 = 0;
        *(unsigned char *)(v4 + 2691) = *a3 != 0;
        goto LABEL_216;
      case 307:
        return v7;
      case 308:
        gleReclaimContextResources(a1);
        return 0;
      case 313:
        int v59 = *a3;
        if (*a3 == (*(void *)(a1 + 27648) != 0)) {
          return 0;
        }
        if (v59)
        {
          if (v59 != 1) {
            return 10019;
          }
          size_t v128 = 8;
          *(void *)v129 = 0x300000006;
          *(void *)buf = 0;
          sysctl(v129, 2u, buf, &v128, 0, 0);
          if (*(void *)buf < 2uLL) {
            return 10019;
          }
          glFinish_Exec(a1, v60, v61, v62);
          if (gleCreateCmdBufMachine(a1)) {
            return 10019;
          }
        }
        else
        {
          gleDestroyCmdBufMachine(a1);
        }
        gliInitDispatchTable(a1);
        break;
      case 315:
        int v63 = *a3 & ~((int)*a3 >> 31);
        if (*(_DWORD *)(a1 + 29768) == v63) {
          goto LABEL_215;
        }
        *(_DWORD *)(a1 + 29768) = v63;
        if (!*(void *)(a1 + 27648)) {
          goto LABEL_215;
        }
        dispatch_release(*(dispatch_object_t *)(a1 + 27728));
        intptr_t v64 = *(int *)(a1 + 29768);
        *(_DWORD *)(a1 + 27740) = v64;
        uint64_t v7 = 0;
        *(void *)(a1 + 27728) = dispatch_semaphore_create(v64);
        goto LABEL_216;
      case 316:
        uint64_t v7 = 0;
        int v47 = *v9 & 0xFDFF | (*(unsigned __int8 *)(a1 + 32495) << 16);
        unsigned __int16 v48 = *v9 & 0xFDFF | ((*a3 != 0) << 9);
        goto LABEL_155;
      case 322:
        gleFreeOrphans((int64x2_t *)a1);
        return 0;
      default:
        goto LABEL_216;
    }
    return 0;
  }
  if (a2 == 221)
  {
    *(unsigned char *)(v4 + 2689) = *a3 != 0;
    gliUpdateDispatchState((int8x16_t *)a1, 0);
    gleUpdateSwapControl(a1);
    return 0;
  }
  if (a2 == 228)
  {
    uint64_t v7 = 0;
    *(_DWORD *)(a1 + 29772) = *a3;
    return v7;
  }
  if (a2 != 300)
  {
LABEL_216:
    if (*(unsigned char *)(a1 + 32496))
    {
      unint64_t v95 = 0;
      v96 = (void *)(a1 + 32512);
      do
      {
        unsigned int v97 = (*(uint64_t (**)(void, uint64_t, unsigned int *))(v96[206] + 1248))(*v96, a2, a3);
        if (v7) {
          BOOL v98 = 1;
        }
        else {
          BOOL v98 = v97 == 0;
        }
        if (v98) {
          uint64_t v7 = v7;
        }
        else {
          uint64_t v7 = v97;
        }
        ++v95;
        v96 += 209;
      }
      while (v95 < *((unsigned __int8 *)v9 + 3));
    }
    return v7;
  }
  uint64_t v31 = *(uint64_t (**)(uint64_t, uint64_t, unsigned int *))(*(void *)(a1 + 29496) + 192);
  uint64_t v32 = *(void *)(a1 + 29464);
  uint64_t v33 = 300;
LABEL_116:

  return v31(v32, v33, a3);
}

float glGetIntegerv_Exec(uint64_t a1, int a2, _DWORD *a3, double a4, double a5, double a6)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  char v26 = 0;
  int v25 = 0;
  int State = gleGetState(a1, a2, (uint64_t)v27, &v25, &v26, a4, a5, a6);
  if (State == -2)
  {
    unsigned int v10 = (__int16 *)(a1 + 29832);
    if (!*(_WORD *)(a1 + 29832))
    {
      __int16 v11 = 1282;
      goto LABEL_7;
    }
  }
  else if (State == -1)
  {
    unsigned int v10 = (__int16 *)(a1 + 29832);
    if (!*(_WORD *)(a1 + 29832))
    {
      __int16 v11 = 1280;
LABEL_7:
      *unsigned int v10 = v11;
    }
  }
  else if (v25 == 5124)
  {
    if (State >= 1)
    {
      uint64_t v12 = State;
      int v13 = (uint64_t *)v27;
      do
      {
        uint64_t v14 = *v13++;
        *a3++ = v14;
        --v12;
      }
      while (v12);
    }
  }
  else if (v26)
  {
    if (State >= 1)
    {
      uint64_t v15 = State;
      int v16 = (double *)v27;
      double v9 = 1.0;
      do
      {
        double v17 = *v16++;
        double v18 = v17;
        if (v17 <= 1.0) {
          double v19 = v18;
        }
        else {
          double v19 = 1.0;
        }
        if (v18 >= -1.0) {
          double v20 = v19;
        }
        else {
          double v20 = -1.0;
        }
        *a3++ = (int)(v20 * 2147483520.0) + (int)(v20 * 127.999985);
        --v15;
      }
      while (v15);
    }
  }
  else if (State >= 1)
  {
    uint64_t v21 = State;
    BOOL v22 = (double *)v27;
    do
    {
      double v23 = *v22++;
      *(float *)&double v9 = round(v23);
      *a3++ = (int)*(float *)&v9;
      --v21;
    }
    while (v21);
  }
  return *(float *)&v9;
}

uint64_t gleGetState(uint64_t a1, int a2, uint64_t a3, _DWORD *a4, unsigned char *a5, double a6, double a7, double a8)
{
  uint64_t v119 = *MEMORY[0x263EF8340];
  int v13 = (unsigned __int8 *)(a1 + 32406);
  uint64_t v14 = a1 + 29672;
  uint64_t v15 = (int *)(a1 + 18448);
  uint64_t v16 = a1 + 17572;
  double v17 = (unsigned __int16 *)(a1 + 15284);
  double v18 = (unsigned __int16 *)(a1 + 15008);
  *a4 = 5124;
  *a5 = 0;
  if (a2 > 10751)
  {
    if (a2 <= 34015)
    {
      if (a2 > 32925)
      {
        switch(a2)
        {
          case 32926:
            uint64_t ClampedStencilValue = *(unsigned __int8 *)(a1 + 17681);
            goto LABEL_188;
          case 32927:
          case 32929:
          case 32930:
          case 32931:
          case 32932:
          case 32933:
          case 32934:
          case 32935:
            goto LABEL_160;
          case 32928:
            uint64_t ClampedStencilValue = *(unsigned __int8 *)(a1 + 17683);
            goto LABEL_188;
          case 32936:
            uint64_t v52 = *(void *)(a1 + 28960);
            if (!v52)
            {
              uint64_t ClampedStencilValue = *(unsigned __int8 *)(*(void *)(a1 + 29480) + 58);
              goto LABEL_188;
            }
            if (!*(unsigned char *)(v52 + 478)) {
              goto LABEL_177;
            }
LABEL_172:
            uint64_t result = 1;
            *(void *)a3 = 1;
            return result;
          case 32937:
            uint64_t v53 = *(void *)(a1 + 28960);
            if (v53)
            {
              uint64_t v54 = 0;
              while (1)
              {
                uint64_t v55 = v53 + v54;
                if (*(void *)(v53 + v54 + 40)) {
                  break;
                }
                v54 += 16;
                if (v54 == 160) {
                  goto LABEL_177;
                }
              }
              uint64_t v61 = *(unsigned int *)(v55 + 300);
              uint64_t v62 = *(unsigned int *)(v55 + 304);
              uint64_t v63 = *(void *)(v55 + 40) + 8 * *(unsigned __int8 *)(a1 + 32500);
              v118[0] = 0;
              (*(void (**)(void, void, uint64_t, uint64_t, uint64_t, _DWORD *))(*(void *)(a1 + 29496)
                                                                                          + 376))(*(void *)(a1 + 29464), *(void *)(v63 + 40), v61, v62, 36011, v118);
LABEL_206:
              uint64_t ClampedStencilValue = v118[0];
            }
            else
            {
              uint64_t ClampedStencilValue = *(unsigned __int8 *)(*(void *)(a1 + 29480) + 59);
            }
            break;
          case 32938:
            float v25 = *(float *)(a1 + 17672);
            goto LABEL_179;
          case 32939:
            uint64_t ClampedStencilValue = *(unsigned __int8 *)(a1 + 17684);
            goto LABEL_188;
          default:
            switch(a2)
            {
              case 32968:
                goto LABEL_72;
              case 32969:
                goto LABEL_99;
              case 32970:
                uint64_t ClampedStencilValue = *(unsigned __int16 *)(a1 + 15014);
                goto LABEL_188;
              case 32971:
                uint64_t ClampedStencilValue = *(unsigned __int16 *)(a1 + 15012);
                goto LABEL_188;
              default:
                if (a2 != 33902) {
                  goto LABEL_160;
                }
                *(void *)a3 = (uint64_t)*(float *)(*(void *)(a1 + 29480) + 80);
                float v48 = *(float *)(*(void *)(a1 + 29480) + 84);
LABEL_157:
                uint64_t v44 = (uint64_t)v48;
                break;
            }
            goto LABEL_158;
        }
        goto LABEL_188;
      }
      if (a2 <= 32822)
      {
        if (a2 == 10752)
        {
          float v25 = *(float *)(a1 + 15520);
          goto LABEL_179;
        }
        if (a2 == 32777)
        {
          uint64_t ClampedStencilValue = *(unsigned __int16 *)(a1 + 15016);
          goto LABEL_188;
        }
      }
      else
      {
        switch(a2)
        {
          case 32823:
            uint64_t ClampedStencilValue = *(unsigned __int8 *)(a1 + 15537);
            goto LABEL_188;
          case 32824:
            float v25 = *(float *)(a1 + 15516);
            goto LABEL_179;
          case 32873:
            uint64_t ClampedStencilValue = *(void *)(a1 + 88 * *(unsigned __int16 *)(a1 + 23768) + 20800);
            goto LABEL_187;
        }
      }
      goto LABEL_160;
    }
    if (a2 <= 34920)
    {
      if (a2 > 34228)
      {
        if (a2 > 34466)
        {
          if (a2 == 34467)
          {
            if ((*(unsigned char *)(*(void *)(a1 + 29480) + 580) & 0x10) != 0)
            {
              *(_OWORD *)a3 = xmmword_227DC2560;
              *(_OWORD *)(a3 + 16) = xmmword_227DC2570;
              uint64_t v45 = 4;
            }
            else
            {
              uint64_t v45 = 0;
            }
            int v51 = *(unsigned __int8 *)(a1 + 32501);
            if (v51 == 4)
            {
              *(_OWORD *)(a3 + 8 * v45) = xmmword_227DC2580;
              *(_OWORD *)(a3 + 8 * (v45 | 2)) = xmmword_227DC2590;
              *(_OWORD *)(a3 + 8 * (v45 + 4)) = xmmword_227DC25A0;
              *(_OWORD *)(a3 + 8 * (v45 + 6)) = xmmword_227DC25B0;
              uint64_t result = v45 | 0xA;
              *(_OWORD *)(a3 + 8 * (v45 | 8)) = xmmword_227DC25C0;
              int v51 = v13[95];
              if (v51 == 4)
              {
                if ((*(unsigned char *)(*(void *)(a1 + 29480) + 576) & 0x20) == 0) {
                  return result;
                }
                *(_OWORD *)(a3 + 8 * (v45 | 0xA)) = xmmword_227DC25D0;
                *(_OWORD *)(a3 + 8 * (v45 + 12)) = xmmword_227DC25E0;
                *(_OWORD *)(a3 + 8 * (v45 + 14)) = xmmword_227DC25F0;
                *(_OWORD *)(a3 + 8 * (v45 | 0x10)) = xmmword_227DC2600;
                *(_OWORD *)(a3 + 8 * (v45 | 0x12)) = xmmword_227DC2610;
                *(_OWORD *)(a3 + 8 * (v45 + 20)) = xmmword_227DC2620;
                *(_OWORD *)(a3 + 8 * (v45 + 22)) = xmmword_227DC2630;
                *(_OWORD *)(a3 + 8 * (v45 | 0x18)) = xmmword_227DC2640;
                *(_OWORD *)(a3 + 8 * (v45 | 0x1A)) = xmmword_227DC2650;
                *(_OWORD *)(a3 + 8 * (v45 + 28)) = xmmword_227DC2660;
                *(_OWORD *)(a3 + 8 * (v45 + 30)) = xmmword_227DC2670;
                *(_OWORD *)(a3 + 8 * (v45 | 0x20)) = xmmword_227DC2680;
                *(_OWORD *)(a3 + 8 * (v45 | 0x22)) = xmmword_227DC2690;
                *(_OWORD *)(a3 + 8 * (v45 + 36)) = xmmword_227DC26A0;
                int v51 = v13[95];
                uint64_t v45 = (v45 + 38);
              }
              else
              {
                uint64_t v45 = v45 | 0xA;
              }
            }
            if (v51 != 2) {
              return v45;
            }
            uint64_t v56 = 0;
            uint64_t result = (v45 + 10);
            uint64_t v57 = a3 + 8 * v45;
            int64x2_t v58 = (int64x2_t)xmmword_227DC26B0;
            int64x2_t v59 = vdupq_n_s64(0x8B90uLL);
            int64x2_t v60 = vdupq_n_s64(2uLL);
            do
            {
              *(int64x2_t *)(v57 + v56) = vaddq_s64(v58, v59);
              int64x2_t v58 = vaddq_s64(v58, v60);
              v56 += 16;
            }
            while (v56 != 80);
            return result;
          }
          if (a2 == 34877)
          {
            uint64_t ClampedStencilValue = *(unsigned __int16 *)(a1 + 15018);
            goto LABEL_188;
          }
        }
        else
        {
          if (a2 == 34229)
          {
            uint64_t ClampedStencilValue = *(void *)(a1 + 26384);
            if (ClampedStencilValue) {
              goto LABEL_187;
            }
            goto LABEL_177;
          }
          if (a2 == 34466)
          {
            *(void *)a3 = 0;
            unint64_t v23 = ((unint64_t)*(unsigned int *)(*(void *)(a1 + 29480) + 580) >> 2) & 4;
            *(void *)a3 = v23;
            int v24 = *(unsigned __int8 *)(a1 + 32501);
            if (v24 == 4)
            {
              *(void *)a3 = v23 | 0xA;
              int v24 = *(unsigned __int8 *)(a1 + 32501);
              if (v24 == 4)
              {
                if ((*(unsigned char *)(*(void *)(a1 + 29480) + 576) & 0x20) == 0) {
                  return 1;
                }
                v23 += 38;
                *(void *)a3 = v23;
                int v24 = *(unsigned __int8 *)(a1 + 32501);
              }
              else
              {
                v23 |= 0xAuLL;
              }
            }
            if (v24 != 2) {
              return 1;
            }
            uint64_t ClampedStencilValue = v23 + 10;
            goto LABEL_188;
          }
        }
        goto LABEL_160;
      }
      if (a2 <= 34044)
      {
        if (a2 == 34016)
        {
          uint64_t v42 = *(unsigned __int16 *)(a1 + 23768);
          goto LABEL_124;
        }
        if (a2 == 34024)
        {
          uint64_t ClampedStencilValue = *(void *)(a1 + 29480);
          if ((*(unsigned char *)(ClampedStencilValue + 569) & 2) == 0) {
            goto LABEL_177;
          }
          int v21 = *(_DWORD *)(ClampedStencilValue + 4);
          LODWORD(ClampedStencilValue) = *(_DWORD *)(ClampedStencilValue + 8);
          if (v21 < (int)ClampedStencilValue) {
            LODWORD(ClampedStencilValue) = v21;
          }
LABEL_21:
          uint64_t ClampedStencilValue = (int)ClampedStencilValue;
LABEL_188:
          *(void *)a3 = ClampedStencilValue;
          return 1;
        }
        goto LABEL_160;
      }
      if (a2 == 34045)
      {
        float v26 = *(float *)(*(void *)(a1 + 29480) + 148);
      }
      else
      {
        if (a2 != 34047) {
          goto LABEL_160;
        }
        float v26 = *(float *)(*(void *)(a1 + 29480) + 144);
      }
      uint64_t ClampedStencilValue = (uint64_t)v26;
      goto LABEL_188;
    }
    if (a2 > 36006)
    {
      if (a2 > 36062)
      {
        if (a2 == 36063)
        {
          uint64_t ClampedStencilValue = *(unsigned __int8 *)(*(void *)(a1 + 29480) + 22);
          goto LABEL_188;
        }
        if (a2 == 36183)
        {
          uint64_t ClampedStencilValue = *(unsigned __int8 *)(*(void *)(a1 + 29480) + 170);
          goto LABEL_188;
        }
      }
      else
      {
        if (a2 == 36007)
        {
          uint64_t ClampedStencilValue = *(void *)(a1 + 28952);
          if (!ClampedStencilValue) {
            goto LABEL_188;
          }
          goto LABEL_187;
        }
        if (a2 == 36010)
        {
          uint64_t ClampedStencilValue = *(void *)(a1 + 28968);
          if (!ClampedStencilValue) {
            goto LABEL_188;
          }
          goto LABEL_187;
        }
      }
    }
    else if (a2 > 34964)
    {
      if (a2 == 34965)
      {
        uint64_t v43 = *(void *)(a1 + 26384);
        if (v43)
        {
          uint64_t ClampedStencilValue = *(void *)(v43 + 1232);
          if (!ClampedStencilValue) {
            goto LABEL_188;
          }
        }
        else
        {
          uint64_t ClampedStencilValue = *(void *)(a1 + 19320);
          if (!ClampedStencilValue) {
            goto LABEL_188;
          }
        }
        goto LABEL_187;
      }
      if (a2 == 36006)
      {
        uint64_t ClampedStencilValue = *(void *)(a1 + 28960);
        if (!ClampedStencilValue) {
          goto LABEL_188;
        }
        goto LABEL_187;
      }
    }
    else
    {
      if (a2 == 34921)
      {
LABEL_483:
        uint64_t ClampedStencilValue = 16;
        goto LABEL_188;
      }
      if (a2 == 34964)
      {
        uint64_t ClampedStencilValue = *(void *)(a1 + 19312);
        if (!ClampedStencilValue) {
          goto LABEL_188;
        }
        goto LABEL_187;
      }
    }
  }
  else
  {
    if (a2 <= 3023)
    {
      if (a2 > 2959)
      {
        switch(a2)
        {
          case 2960:
            int v19 = *(_DWORD *)(a1 + 15644);
            goto LABEL_126;
          case 2961:
            uint64_t ClampedStencilValue = *(int *)(a1 + 15172);
            goto LABEL_188;
          case 2962:
            uint64_t v30 = a1 + 16 * (*(_DWORD *)(a1 + 29776) - 1028);
            uint64_t v31 = 15604;
            goto LABEL_108;
          case 2963:
            uint64_t ClampedStencilValue = *(unsigned int *)(a1 + 16 * (*(_DWORD *)(a1 + 29776) - 1028) + 15596);
            goto LABEL_188;
          case 2964:
            uint64_t v30 = a1 + 16 * (*(_DWORD *)(a1 + 29776) - 1028);
            uint64_t v31 = 15606;
            goto LABEL_108;
          case 2965:
            uint64_t v30 = a1 + 16 * (*(_DWORD *)(a1 + 29776) - 1028);
            uint64_t v31 = 15608;
            goto LABEL_108;
          case 2966:
            uint64_t v30 = a1 + 16 * (*(_DWORD *)(a1 + 29776) - 1028);
            uint64_t v31 = 15610;
            goto LABEL_108;
          case 2967:
            unsigned int v32 = *(_DWORD *)(a1 + 16 * (*(_DWORD *)(a1 + 29776) - 1028) + 15600);
            goto LABEL_110;
          case 2968:
            uint64_t ClampedStencilValue = *(unsigned int *)(a1 + 4 * (*(_DWORD *)(a1 + 29776) - 1028) + 15324);
            goto LABEL_188;
          case 2978:
            float v33 = *(float *)(a1 + 9320);
            float v34 = *(float *)(a1 + 9324);
            uint64_t v35 = *(void *)(a1 + 29480);
            int v36 = *(_DWORD *)(v35 + 8);
            if (v33 > (float)*(int *)(v35 + 4)) {
              float v33 = (float)*(int *)(v35 + 4);
            }
            if (v34 > (float)v36) {
              float v34 = (float)v36;
            }
            int32x2_t v37 = vcvt_s32_f32(vadd_f32(*(float32x2_t *)(a1 + 9312), (float32x2_t)vbsl_s8((int8x8_t)vcgez_f32(*(float32x2_t *)(a1 + 9312)), (int8x8_t)0x3F0000003F000000, (int8x8_t)0xBF000000BF000000)));
            *(void *)&long long v38 = v37.i32[0];
            *((void *)&v38 + 1) = v37.i32[1];
            *(_OWORD *)a3 = v38;
            if (v33 >= 0.0) {
              float v39 = 0.5;
            }
            else {
              float v39 = -0.5;
            }
            uint64_t v40 = (int)(float)(v33 + v39);
            if (v34 >= 0.0) {
              float v41 = 0.5;
            }
            else {
              float v41 = -0.5;
            }
            *(void *)(a3 + 16) = v40;
            *(void *)(a3 + 24) = (int)(float)(v34 + v41);
            return 4;
          default:
            goto LABEL_160;
        }
      }
      if (a2 > 2885)
      {
        switch(a2)
        {
          case 2928:
            *(void *)a3 = *(void *)(a1 + 9280);
            *(void *)(a3 + 8) = *(void *)(a1 + 9288);
            *a4 = 5130;
            *a5 = 1;
            return 2;
          case 2929:
            uint64_t ClampedStencilValue = *(unsigned __int8 *)(a1 + 15204);
            goto LABEL_188;
          case 2930:
            uint64_t ClampedStencilValue = *(unsigned __int8 *)(a1 + 15340);
            goto LABEL_188;
          case 2931:
            double v46 = *(double *)(a1 + 15128);
            goto LABEL_153;
          case 2932:
            uint64_t ClampedStencilValue = *(unsigned __int16 *)(a1 + 15200);
            goto LABEL_188;
          default:
            if (a2 != 2886) {
              goto LABEL_160;
            }
            uint64_t ClampedStencilValue = *(unsigned __int16 *)(a1 + 15528);
            break;
        }
        goto LABEL_188;
      }
      switch(a2)
      {
        case 2849:
          float v25 = *(float *)(a1 + 15304);
          goto LABEL_179;
        case 2884:
          uint64_t ClampedStencilValue = *(unsigned __int8 *)(a1 + 15534);
          goto LABEL_188;
        case 2885:
          uint64_t ClampedStencilValue = *(unsigned __int16 *)(a1 + 15530);
          goto LABEL_188;
      }
      goto LABEL_160;
    }
    if (a2 > 3106)
    {
      if (a2 > 3377)
      {
        if (a2 > 3385)
        {
          if (a2 == 3386)
          {
            *(void *)a3 = *(int *)(*(void *)(a1 + 29480) + 4);
            uint64_t v44 = *(int *)(*(void *)(a1 + 29480) + 8);
LABEL_158:
            *(void *)(a3 + 8) = v44;
            return 2;
          }
          if (a2 == 3408)
          {
            uint64_t ClampedStencilValue = *(unsigned __int8 *)(*(void *)(a1 + 29480) + 20);
            goto LABEL_188;
          }
        }
        else
        {
          if (a2 == 3378)
          {
            uint64_t ClampedStencilValue = 6;
            if (*(unsigned __int8 *)(a1 + 32501) - 3 < 2) {
              uint64_t ClampedStencilValue = 8;
            }
            goto LABEL_188;
          }
          if (a2 == 3379)
          {
            uint64_t ClampedStencilValue = *(unsigned __int16 *)(*(void *)(a1 + 29480) + 160);
            goto LABEL_188;
          }
        }
        goto LABEL_160;
      }
      if (a2 != 3107)
      {
        if (a2 == 3317)
        {
          uint64_t ClampedStencilValue = *(int *)(a1 + 18512);
          goto LABEL_188;
        }
        if (a2 == 3333)
        {
          uint64_t ClampedStencilValue = *(int *)(a1 + 18476);
          goto LABEL_188;
        }
        goto LABEL_160;
      }
      *(void *)a3 = *(unsigned char *)(a1 + 15336) & 1;
      *(void *)(a3 + 8) = *(unsigned char *)(a1 + 15337) & 1;
      *(void *)(a3 + 16) = *(unsigned char *)(a1 + 15338) & 1;
      uint64_t v22 = *(unsigned char *)(a1 + 15339) & 1;
LABEL_136:
      *(void *)(a3 + 24) = v22;
      return 4;
    }
    if (a2 <= 3041)
    {
      switch(a2)
      {
        case 3024:
          uint64_t ClampedStencilValue = *(unsigned __int8 *)(a1 + 15224);
          goto LABEL_188;
        case 3040:
LABEL_72:
          uint64_t ClampedStencilValue = *(unsigned __int16 *)(a1 + 15010);
          goto LABEL_188;
        case 3041:
LABEL_99:
          uint64_t ClampedStencilValue = *v18;
          goto LABEL_188;
      }
      goto LABEL_160;
    }
    if (a2 <= 3088)
    {
      if (a2 == 3042)
      {
        LOBYTE(v19) = *(unsigned char *)(a1 + 15120);
LABEL_126:
        uint64_t ClampedStencilValue = v19 & 1;
        goto LABEL_188;
      }
      if (a2 != 3088) {
        goto LABEL_160;
      }
      *(void *)a3 = *(int *)(a1 + 15560);
      *(void *)(a3 + 8) = *(int *)(a1 + 15564);
      *(void *)(a3 + 16) = *(int *)(a1 + 15568);
      uint64_t v22 = *(int *)(a1 + 15572);
      goto LABEL_136;
    }
    if (a2 == 3089)
    {
      uint64_t ClampedStencilValue = *(unsigned __int8 *)(a1 + 15556);
      goto LABEL_188;
    }
    if (a2 == 3106)
    {
      if ((*(unsigned char *)(a1 + 29803) & 0x10) != 0) {
        gleUpdateAnyDrawBuffersFloat(a1, a6, a7, a8);
      }
      float v27 = *(float *)v14;
      if (*((unsigned char *)v18 + 170))
      {
        *(double *)a3 = fminf(fmaxf(v27, *(float *)(a1 + 288)), *(float *)(a1 + 292));
        *(double *)(a3 + 8) = fminf(fmaxf(*(float *)(v14 + 4), *(float *)(a1 + 288)), *(float *)(a1 + 292));
        *(double *)(a3 + 16) = fminf(fmaxf(*(float *)(v14 + 8), *(float *)(a1 + 288)), *(float *)(a1 + 292));
        float v28 = *(float *)(v14 + 12);
LABEL_85:
        float v29 = fminf(fmaxf(v28, *(float *)(a1 + 288)), *(float *)(a1 + 292));
      }
      else
      {
        *(double *)a3 = v27;
        *(double *)(a3 + 8) = *(float *)(v14 + 4);
        *(double *)(a3 + 16) = *(float *)(v14 + 8);
        float v29 = *(float *)(v14 + 12);
      }
      goto LABEL_184;
    }
  }
LABEL_160:
  int v49 = *(unsigned __int8 *)(a1 + 32501);
  if ((v49 - 2) > 2) {
    goto LABEL_323;
  }
  switch(a2)
  {
    case 3410:
      if (*(void *)(a1 + 28960))
      {
        uint64_t v50 = 32860;
        goto LABEL_213;
      }
      uint64_t ClampedStencilValue = *(unsigned __int8 *)(*(void *)(a1 + 29480) + 48);
      goto LABEL_188;
    case 3411:
      if (*(void *)(a1 + 28960))
      {
        uint64_t v50 = 32861;
        goto LABEL_213;
      }
      uint64_t ClampedStencilValue = *(unsigned __int8 *)(*(void *)(a1 + 29480) + 49);
      goto LABEL_188;
    case 3412:
      if (*(void *)(a1 + 28960))
      {
        uint64_t v50 = 32862;
        goto LABEL_213;
      }
      uint64_t ClampedStencilValue = *(unsigned __int8 *)(*(void *)(a1 + 29480) + 50);
      goto LABEL_188;
    case 3413:
      if (!*(void *)(a1 + 28960))
      {
        uint64_t ClampedStencilValue = *(unsigned __int8 *)(*(void *)(a1 + 29480) + 51);
        goto LABEL_188;
      }
      uint64_t v50 = 32863;
LABEL_213:
      gleGetAttachmentsParameters(a1, v50, (void *)a3);
      return 1;
    case 3414:
      uint64_t v64 = *(void *)(a1 + 28960);
      if (!v64)
      {
        uint64_t ClampedStencilValue = *(unsigned __int8 *)(*(void *)(a1 + 29480) + 56);
        goto LABEL_188;
      }
      uint64_t v65 = *(void *)(v64 + 168);
      if (!v65) {
        goto LABEL_177;
      }
      uint64_t v66 = *(unsigned int *)(v64 + 428);
      uint64_t v67 = *(unsigned int *)(v64 + 432);
      uint64_t v68 = v65 + 8 * *(unsigned __int8 *)(a1 + 32500);
      v118[0] = 0;
      (*(void (**)(void, void, uint64_t, uint64_t, uint64_t, _DWORD *))(*(void *)(a1 + 29496) + 376))(*(void *)(a1 + 29464), *(void *)(v68 + 40), v66, v67, 34890, v118);
      goto LABEL_206;
    case 3415:
      uint64_t v69 = *(void *)(a1 + 28960);
      if (!v69)
      {
        uint64_t ClampedStencilValue = *(unsigned __int8 *)(*(void *)(a1 + 29480) + 57);
        goto LABEL_188;
      }
      uint64_t v70 = *(void *)(v69 + 184);
      if (!v70) {
        goto LABEL_177;
      }
      uint64_t v71 = *(unsigned int *)(v69 + 444);
      uint64_t v72 = *(unsigned int *)(v69 + 448);
      uint64_t v73 = v70 + 8 * *(unsigned __int8 *)(a1 + 32500);
      v118[0] = 0;
      (*(void (**)(void, void, uint64_t, uint64_t, uint64_t, _DWORD *))(*(void *)(a1 + 29496) + 376))(*(void *)(a1 + 29464), *(void *)(v73 + 40), v71, v72, 35057, v118);
      goto LABEL_206;
    default:
      if (a2 == 33170)
      {
        uint64_t ClampedStencilValue = *(unsigned __int16 *)(a1 + 15296);
        goto LABEL_188;
      }
      if (a2 == 33901)
      {
        *(void *)a3 = (uint64_t)*(float *)(*(void *)(a1 + 29480) + 60);
        float v48 = *(float *)(*(void *)(a1 + 29480) + 64);
        goto LABEL_157;
      }
      if (v49 == 2)
      {
        if (a2 < 12288)
        {
          if (a2 <= 2849)
          {
            if (a2 == 2833)
            {
              float v25 = *(float *)(a1 + 15344);
              goto LABEL_179;
            }
            if (a2 != 2834)
            {
              if (a2 != 2848) {
                goto LABEL_323;
              }
              uint64_t ClampedStencilValue = *(unsigned __int8 *)(a1 + 15315);
              goto LABEL_188;
            }
            *(double *)a3 = *(float *)(*(void *)(a1 + 29480) + 68);
            float v76 = *(float *)(*(void *)(a1 + 29480) + 72);
          }
          else
          {
            if (a2 > 3057)
            {
              if (a2 == 3058)
              {
                uint64_t ClampedStencilValue = *(unsigned __int8 *)(a1 + 15319);
              }
              else
              {
                if (a2 != 3154) {
                  goto LABEL_323;
                }
                uint64_t ClampedStencilValue = *(unsigned __int16 *)(a1 + 15288);
              }
              goto LABEL_188;
            }
            if (a2 != 2850)
            {
              if (a2 != 3056) {
                goto LABEL_323;
              }
              uint64_t ClampedStencilValue = *(unsigned __int16 *)(a1 + 15316);
              goto LABEL_188;
            }
            *(double *)a3 = *(float *)(*(void *)(a1 + 29480) + 88);
            float v76 = *(float *)(*(void *)(a1 + 29480) + 92);
          }
          *(double *)(a3 + 8) = v76;
          *a4 = 5130;
          return 2;
        }
        if (a2 > 32924)
        {
          switch(a2)
          {
            case 33064:
              float v25 = *(float *)(a1 + 15356);
              goto LABEL_179;
            case 32927:
              uint64_t ClampedStencilValue = *(unsigned __int8 *)(a1 + 17682);
              break;
            case 32925:
              uint64_t ClampedStencilValue = *(unsigned __int8 *)(a1 + 17680);
              break;
            default:
              goto LABEL_323;
          }
          goto LABEL_188;
        }
        if ((a2 - 12288) >= 6) {
          goto LABEL_323;
        }
        unsigned int v74 = *(_DWORD *)v16;
        goto LABEL_374;
      }
      if (a2 > 35659)
      {
        if (a2 > 36002)
        {
          if (a2 <= 36004)
          {
            if (a2 != 36003)
            {
              uint64_t ClampedStencilValue = *(unsigned int *)(a1 + 15628);
              goto LABEL_188;
            }
            unsigned int v32 = *(_DWORD *)(a1 + 15632);
LABEL_110:
            uint64_t ClampedStencilValue = gleGetClampedStencilValue(a1, v32);
            goto LABEL_188;
          }
          if (a2 == 36005)
          {
            uint64_t ClampedStencilValue = *(unsigned int *)(a1 + 15332);
            goto LABEL_188;
          }
          if (a2 == 37137)
          {
            uint64_t ClampedStencilValue = -1;
            goto LABEL_188;
          }
        }
        else if (a2 > 35722)
        {
          if (a2 == 35723)
          {
            uint64_t ClampedStencilValue = *(unsigned __int16 *)(a1 + 15300);
            goto LABEL_188;
          }
          if (a2 == 35725)
          {
            uint64_t ClampedStencilValue = *(void *)(a1 + 24768);
            if (ClampedStencilValue) {
              goto LABEL_187;
            }
            goto LABEL_188;
          }
        }
        else
        {
          if (a2 == 35660)
          {
            uint64_t v75 = *(void *)(a1 + 29480);
LABEL_277:
            uint64_t ClampedStencilValue = *(unsigned __int16 *)(v75 + 156);
            goto LABEL_188;
          }
          if (a2 == 35661)
          {
            uint64_t ClampedStencilValue = *(unsigned __int16 *)(*(void *)(a1 + 29480) + 154);
            goto LABEL_188;
          }
        }
      }
      else
      {
        if (a2 > 34815)
        {
          switch(a2)
          {
            case 34816:
              uint64_t ClampedStencilValue = *(unsigned __int16 *)(a1 + 15636);
              goto LABEL_188;
            case 34817:
              uint64_t ClampedStencilValue = *(unsigned __int16 *)(a1 + 15638);
              goto LABEL_188;
            case 34818:
              uint64_t ClampedStencilValue = *(unsigned __int16 *)(a1 + 15640);
              goto LABEL_188;
            case 34819:
              uint64_t ClampedStencilValue = *(unsigned __int16 *)(a1 + 15642);
              goto LABEL_188;
            default:
              if (a2 != 34930) {
                goto LABEL_293;
              }
              uint64_t ClampedStencilValue = *(unsigned __int8 *)(*(void *)(a1 + 29480) + 175);
              break;
          }
          goto LABEL_188;
        }
        switch(a2)
        {
          case 32773:
            if ((*(unsigned char *)(a1 + 29803) & 0x10) != 0) {
              gleUpdateAnyDrawBuffersFloat(a1, a6, a7, a8);
            }
            float v77 = *(float *)(v14 + 16);
            if (*((unsigned char *)v18 + 170))
            {
              *(double *)a3 = fminf(fmaxf(v77, *(float *)(a1 + 288)), *(float *)(a1 + 292));
              *(double *)(a3 + 8) = fminf(fmaxf(*(float *)(v14 + 20), *(float *)(a1 + 288)), *(float *)(a1 + 292));
              *(double *)(a3 + 16) = fminf(fmaxf(*(float *)(v14 + 24), *(float *)(a1 + 288)), *(float *)(a1 + 292));
              float v28 = *(float *)(v14 + 28);
              goto LABEL_85;
            }
            *(double *)a3 = v77;
            *(double *)(a3 + 8) = *(float *)(v14 + 20);
            *(double *)(a3 + 16) = *(float *)(v14 + 24);
            float v29 = *(float *)(v14 + 28);
            goto LABEL_184;
          case 34068:
            uint64_t ClampedStencilValue = *(void *)(a1 + 88 * *(unsigned __int16 *)(a1 + 23768) + 20776);
            goto LABEL_187;
          case 34076:
            uint64_t ClampedStencilValue = *(unsigned __int16 *)(*(void *)(a1 + 29480) + 168);
            goto LABEL_188;
        }
      }
LABEL_293:
      if (v49 != 4)
      {
        uint64_t result = 0;
        switch(a2)
        {
          case 36344:
            return result;
          case 36345:
            goto LABEL_177;
          case 36346:
            goto LABEL_172;
          case 36347:
LABEL_301:
            unint64_t v78 = *(unsigned int *)(*(void *)(a1 + 29480) + 344);
            goto LABEL_321;
          case 36348:
LABEL_319:
            unint64_t v78 = *(unsigned int *)(*(void *)(a1 + 29480) + 448);
            goto LABEL_321;
          case 36349:
LABEL_320:
            unint64_t v78 = *(unsigned __int16 *)(*(void *)(a1 + 29480) + 332);
LABEL_321:
            uint64_t ClampedStencilValue = v78 >> 2;
            goto LABEL_188;
          default:
            if (a2 == 33370) {
              goto LABEL_315;
            }
            int v49 = 3;
            goto LABEL_323;
        }
      }
      uint64_t result = 0;
      if (a2 <= 35052)
      {
        if (a2 <= 34814)
        {
          if (a2 <= 32873)
          {
            if (a2 <= 3315)
            {
              switch(a2)
              {
                case 3074:
                  uint64_t v117 = *(void *)(a1 + 28968);
                  if (v117) {
                    uint64_t ClampedStencilValue = *(unsigned __int16 *)(v117 + 516);
                  }
                  else {
                    uint64_t ClampedStencilValue = *(unsigned __int16 *)(v14 + 172);
                  }
                  goto LABEL_188;
                case 3314:
                  uint64_t ClampedStencilValue = v15[9];
                  goto LABEL_188;
                case 3315:
                  uint64_t ClampedStencilValue = v15[13];
                  goto LABEL_188;
              }
            }
            else if (a2 > 3330)
            {
              if (a2 == 3331)
              {
                uint64_t ClampedStencilValue = v15[4];
                goto LABEL_188;
              }
              if (a2 == 3332)
              {
                uint64_t ClampedStencilValue = v15[5];
                goto LABEL_188;
              }
            }
            else
            {
              if (a2 == 3316)
              {
                uint64_t ClampedStencilValue = v15[14];
                goto LABEL_188;
              }
              if (a2 == 3330)
              {
                uint64_t ClampedStencilValue = *v15;
                goto LABEL_188;
              }
            }
            goto LABEL_323;
          }
          if (a2 <= 33306)
          {
            switch(a2)
            {
              case 32874:
                uint64_t ClampedStencilValue = *(void *)(a1 + 88 * *((unsigned __int16 *)v15 + 2660) + 20784);
                goto LABEL_187;
              case 32875:
              case 32876:
              case 32879:
              case 32880:
              case 32881:
              case 32882:
                goto LABEL_323;
              case 32877:
                uint64_t ClampedStencilValue = v15[15];
                goto LABEL_188;
              case 32878:
                uint64_t ClampedStencilValue = v15[11];
                goto LABEL_188;
              case 32883:
                uint64_t ClampedStencilValue = *(unsigned __int16 *)(*(void *)(a1 + 29480) + 164);
                goto LABEL_188;
              default:
                if (a2 == 33000)
                {
                  uint64_t ClampedStencilValue = 0xFFFFFLL;
                }
                else
                {
                  if (a2 != 33001) {
                    goto LABEL_323;
                  }
                  uint64_t ClampedStencilValue = 150000;
                }
                break;
            }
            goto LABEL_188;
          }
          if (a2 <= 33308)
          {
            if (a2 == 33307)
            {
              gleDeriveVersion(a1);
              uint64_t v110 = *v13;
            }
            else
            {
              gleDeriveVersion(a1);
              uint64_t v110 = v13[2];
            }
            uint64_t ClampedStencilValue = v110 - 48;
            goto LABEL_188;
          }
          if (a2 != 33309)
          {
            if (a2 == 33370)
            {
LABEL_315:
              uint64_t ClampedStencilValue = *(void *)(a1 + 24776);
              if (!ClampedStencilValue) {
                goto LABEL_188;
              }
              goto LABEL_187;
            }
            if (a2 != 34814) {
              goto LABEL_323;
            }
LABEL_177:
            *(void *)a3 = 0;
            return 1;
          }
          gleGetFilteredExtensions(a1, (uint64_t)v118);
          uint64_t v115 = 0;
          LODWORD(ClampedStencilValue) = 0;
          do
          {
            if (((uint64_t)(&gleExtensionTable)[v115 + 1] & 0x110) == 0x10)
            {
              int v116 = *((__int16 *)&gleExtensionTable + 4 * v115 + 6);
              if (v116 == -1 || ((v118[v116 >> 5] >> v116) & 1) != 0) {
                LODWORD(ClampedStencilValue) = ClampedStencilValue + 1;
              }
            }
            v115 += 2;
          }
          while (v115 != 488);
          goto LABEL_21;
        }
        if (a2 <= 34856)
        {
          unsigned int v108 = a2 - 34853;
          if ((a2 - 34853) >= 4)
          {
            if (a2 == 34815) {
              return result;
            }
            if (a2 == 34852)
            {
              uint64_t ClampedStencilValue = *(unsigned __int8 *)(*(void *)(a1 + 29480) + 21);
              goto LABEL_188;
            }
            goto LABEL_323;
          }
          uint64_t v109 = *(void *)(a1 + 28960);
          if (v109)
          {
            uint64_t v81 = v109 + 2 * v108;
            goto LABEL_540;
          }
          uint64_t v30 = a1 + 2 * v108;
          uint64_t v31 = 29836;
        }
        else
        {
          if ((a2 - 34857) >= 0xC) {
            goto LABEL_323;
          }
          unsigned int v79 = a2 - 34853;
          if ((a2 - 34853) > 7) {
            goto LABEL_177;
          }
          uint64_t v80 = *(void *)(a1 + 28960);
          if (v80)
          {
            uint64_t v81 = v80 + 2 * v79;
LABEL_540:
            uint64_t ClampedStencilValue = *(unsigned __int16 *)(v81 + 500);
            goto LABEL_188;
          }
          uint64_t v30 = a1 + 2 * v79;
          uint64_t v31 = 15180;
        }
LABEL_108:
        uint64_t ClampedStencilValue = *(unsigned __int16 *)(v30 + v31);
        goto LABEL_188;
      }
      if (a2 > 35967)
      {
        if (a2 <= 36386)
        {
          switch(a2)
          {
            case 36344:
              return result;
            case 36345:
              goto LABEL_177;
            case 36346:
              goto LABEL_172;
            case 36347:
              goto LABEL_301;
            case 36348:
              goto LABEL_319;
            case 36349:
              goto LABEL_320;
            default:
              switch(a2)
              {
                case 35977:
                  uint64_t ClampedStencilValue = *(unsigned __int8 *)(a1 + 17984);
                  goto LABEL_188;
                case 35978:
                  uint64_t ClampedStencilValue = *(unsigned int *)(*(void *)(a1 + 29480) + 488);
                  goto LABEL_188;
                case 35979:
                  uint64_t ClampedStencilValue = *(unsigned int *)(*(void *)(a1 + 29480) + 480);
                  goto LABEL_188;
                case 35980:
                case 35981:
                case 35982:
                  goto LABEL_323;
                case 35983:
                  uint64_t ClampedStencilValue = *(void *)(a1 + 19352);
                  if (!ClampedStencilValue) {
                    goto LABEL_188;
                  }
                  goto LABEL_187;
                default:
                  if (a2 != 35968) {
                    goto LABEL_323;
                  }
                  uint64_t ClampedStencilValue = *(unsigned int *)(*(void *)(a1 + 29480) + 484);
                  break;
              }
              goto LABEL_188;
          }
          return result;
        }
        if (a2 <= 36661)
        {
          switch(a2)
          {
            case 36387:
              uint64_t ClampedStencilValue = *(unsigned __int8 *)(*(void *)(a1 + 26432) + 41);
              goto LABEL_188;
            case 36388:
              uint64_t ClampedStencilValue = *(__int16 *)(*(void *)(a1 + 26432) + 42) != -1;
              goto LABEL_188;
            case 36389:
              uint64_t ClampedStencilValue = *(void *)(a1 + 26432);
              if (!ClampedStencilValue) {
                goto LABEL_188;
              }
              goto LABEL_187;
          }
        }
        else if (a2 > 37153)
        {
          if (a2 == 37154 || a2 == 37157)
          {
            uint64_t ClampedStencilValue = *(unsigned int *)(*(void *)(a1 + 29480) + 348);
            goto LABEL_188;
          }
        }
        else
        {
          if (a2 == 36662)
          {
            uint64_t ClampedStencilValue = *(void *)(a1 + 19368);
            if (!ClampedStencilValue) {
              goto LABEL_188;
            }
            goto LABEL_187;
          }
          if (a2 == 36663)
          {
            uint64_t ClampedStencilValue = *(void *)(a1 + 19376);
            if (!ClampedStencilValue) {
              goto LABEL_188;
            }
            goto LABEL_187;
          }
        }
      }
      else if (a2 <= 35367)
      {
        if (a2 > 35075)
        {
          if (a2 == 35076)
          {
            uint64_t ClampedStencilValue = *(int *)(*(void *)(a1 + 29480) + 428);
            goto LABEL_188;
          }
          if (a2 == 35077)
          {
            uint64_t ClampedStencilValue = *(int *)(*(void *)(a1 + 29480) + 432);
            goto LABEL_188;
          }
          if (a2 != 35097) {
            goto LABEL_323;
          }
          uint64_t ClampedStencilValue = *(void *)(a1 + 8 * *((unsigned __int16 *)v15 + 2660) + 23936);
          if (ClampedStencilValue) {
            goto LABEL_187;
          }
          goto LABEL_177;
        }
        switch(a2)
        {
          case 35053:
            uint64_t ClampedStencilValue = *(void *)(a1 + 19328);
            if (!ClampedStencilValue) {
              goto LABEL_188;
            }
            goto LABEL_187;
          case 35055:
            uint64_t ClampedStencilValue = *(void *)(a1 + 19336);
            if (!ClampedStencilValue) {
              goto LABEL_188;
            }
            goto LABEL_187;
          case 35071:
            uint64_t ClampedStencilValue = *(unsigned __int16 *)(*(void *)(a1 + 29480) + 162);
            goto LABEL_188;
        }
      }
      else
      {
        if (a2 <= 35656)
        {
          switch(a2)
          {
            case 35368:
              uint64_t ClampedStencilValue = *(void *)(a1 + 19344);
              if (!ClampedStencilValue) {
                goto LABEL_188;
              }
              goto LABEL_187;
            case 35371:
              uint64_t ClampedStencilValue = *(unsigned __int16 *)(*(void *)(a1 + 29480) + 352);
              goto LABEL_188;
            case 35373:
              uint64_t ClampedStencilValue = *(unsigned __int16 *)(*(void *)(a1 + 29480) + 334);
              goto LABEL_188;
            case 35374:
              uint64_t ClampedStencilValue = *(unsigned __int16 *)(*(void *)(a1 + 29480) + 446);
              goto LABEL_188;
            case 35375:
              uint64_t ClampedStencilValue = *(unsigned __int8 *)(*(void *)(a1 + 29480) + 506);
              goto LABEL_188;
            case 35376:
              uint64_t ClampedStencilValue = *(unsigned int *)(*(void *)(a1 + 29480) + 452);
              goto LABEL_188;
            case 35377:
              uint64_t v111 = *(void *)(a1 + 29480);
              unsigned int v112 = *(_DWORD *)(v111 + 452) * *(unsigned __int16 *)(v111 + 352);
              int v113 = *(_DWORD *)(v111 + 344);
              break;
            case 35379:
              uint64_t v114 = *(void *)(a1 + 29480);
              unsigned int v112 = *(_DWORD *)(v114 + 452) * *(unsigned __int16 *)(v114 + 334);
              int v113 = *(unsigned __int16 *)(v114 + 332);
              break;
            case 35380:
              uint64_t ClampedStencilValue = *(unsigned __int16 *)(*(void *)(a1 + 29480) + 504);
              goto LABEL_188;
            default:
              goto LABEL_323;
          }
          uint64_t ClampedStencilValue = v113 + (v112 >> 2);
          goto LABEL_188;
        }
        switch(a2)
        {
          case 35657:
            uint64_t ClampedStencilValue = *(unsigned __int16 *)(*(void *)(a1 + 29480) + 332);
            goto LABEL_188;
          case 35658:
            uint64_t ClampedStencilValue = *(unsigned int *)(*(void *)(a1 + 29480) + 344);
            goto LABEL_188;
          case 35869:
            uint64_t ClampedStencilValue = *(void *)(a1 + 88 * *((unsigned __int16 *)v15 + 2660) + 20816);
            goto LABEL_187;
        }
      }
LABEL_323:
      if (a2 >> 1 == 17869 && (v49 - 2) <= 2)
      {
        if (*(void *)(a1 + 28968))
        {
          os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
          if (gleCheckFramebufferStatus(a1, *(void *)(a1 + 28968) + 40) == 36053)
          {
            gleUpdateReadFramebufferStateInline_0(a1, v82, v83, v84);
            uint64_t v85 = *(void *)(a1 + 28968) + 560;
            if (a2 == 35739)
            {
              uint64_t v86 = *(unsigned __int16 *)(v85 + 88 * v13[93] + 84);
            }
            else
            {
              uint64_t v86 = *(unsigned __int16 *)(v85 + 88 * v13[93] + 86);
              *(void *)a3 = v86;
              if (v86 == 36193 && v13[95] == 4) {
                uint64_t v86 = 5131;
              }
            }
            *(void *)a3 = v86;
          }
          else if (!*(_WORD *)(v14 + 160))
          {
            *(_WORD *)(v14 + 160) = 1286;
          }
          os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
        }
        else if (!*(_WORD *)(v14 + 160))
        {
          *(_WORD *)(v14 + 160) = 1286;
        }
        return 1;
      }
      if (a2 == 35659 && v49 == 4)
      {
        uint64_t ClampedStencilValue = *(unsigned int *)(*(void *)(a1 + 29480) + 448);
        goto LABEL_188;
      }
      if (v49 == 4)
      {
        if (a2 != 35410)
        {
          if (a2 == 36201)
          {
            uint64_t ClampedStencilValue = *(unsigned __int8 *)(v16 + 144);
            goto LABEL_188;
          }
          if (a2 == 36203)
          {
            uint64_t ClampedStencilValue = 0xFFFFFFFFLL;
            goto LABEL_188;
          }
          return 0xFFFFFFFFLL;
        }
LABEL_343:
        uint64_t ClampedStencilValue = *(unsigned __int8 *)(*(void *)(a1 + 29480) + 337);
        goto LABEL_188;
      }
      if ((v49 - 3) <= 1)
      {
        if (a2 != 35410) {
          return 0xFFFFFFFFLL;
        }
        goto LABEL_343;
      }
      uint64_t result = 0xFFFFFFFFLL;
      if (a2 > 32883)
      {
        if (a2 <= 34593)
        {
          if (a2 <= 33062)
          {
            switch(a2)
            {
              case 32884:
                uint64_t ClampedStencilValue = (*(void *)(*(void *)(a1 + 26384) + 904) >> 16) & 1;
                goto LABEL_188;
              case 32885:
                uint64_t ClampedStencilValue = (*(void *)(*(void *)(a1 + 26384) + 904) >> 17) & 1;
                goto LABEL_188;
              case 32886:
                uint64_t ClampedStencilValue = (*(void *)(*(void *)(a1 + 26384) + 904) >> 18) & 1;
                goto LABEL_188;
              case 32887:
              case 32889:
              case 32893:
              case 32896:
              case 32900:
              case 32901:
              case 32902:
              case 32903:
                return result;
              case 32888:
                uint64_t ClampedStencilValue = (*(void *)(*(void *)(a1 + 26384) + 904) >> *((_WORD *)v15 + 2661) >> 24) & 1;
                goto LABEL_188;
              case 32890:
                uint64_t ClampedStencilValue = *(char *)(*(void *)(a1 + 26384) + 158);
                goto LABEL_188;
              case 32891:
                uint64_t v75 = *(void *)(a1 + 26384);
                goto LABEL_277;
              case 32892:
                uint64_t ClampedStencilValue = *(int *)(*(void *)(a1 + 26384) + 152);
                goto LABEL_188;
              case 32894:
                uint64_t v96 = *(unsigned __int16 *)(*(void *)(a1 + 26384) + 180);
                goto LABEL_490;
              case 32895:
                uint64_t ClampedStencilValue = *(int *)(*(void *)(a1 + 26384) + 176);
                goto LABEL_188;
              case 32897:
                uint64_t ClampedStencilValue = *(char *)(*(void *)(a1 + 26384) + 206);
                if (ClampedStencilValue == 5) {
                  uint64_t ClampedStencilValue = 32993;
                }
                goto LABEL_188;
              case 32898:
                uint64_t v96 = *(unsigned __int16 *)(*(void *)(a1 + 26384) + 204);
                goto LABEL_490;
              case 32899:
                uint64_t ClampedStencilValue = *(int *)(*(void *)(a1 + 26384) + 200);
                goto LABEL_188;
              case 32904:
                uint64_t ClampedStencilValue = *(char *)(*(void *)(a1 + 26384) + 24 * *((unsigned __int16 *)v15 + 2661) + 350);
                goto LABEL_188;
              case 32905:
                uint64_t ClampedStencilValue = *(unsigned __int16 *)(*(void *)(a1 + 26384)
                                                          + 24 * *((unsigned __int16 *)v15 + 2661)
                                                          + 348);
                goto LABEL_188;
              case 32906:
                uint64_t ClampedStencilValue = *(int *)(*(void *)(a1 + 26384) + 24 * *((unsigned __int16 *)v15 + 2661) + 344);
                goto LABEL_188;
              default:
                if (a2 != 33062) {
                  return result;
                }
                float v25 = *(float *)(a1 + 15348);
                break;
            }
            goto LABEL_179;
          }
          if (a2 > 34017)
          {
            switch(a2)
            {
              case 34468:
                goto LABEL_487;
              case 34469:
              case 34470:
              case 34471:
              case 34476:
                return result;
              case 34472:
                *(double *)a3 = *(float *)(a1 + 8496);
                *(double *)(a3 + 8) = *(float *)(a1 + 8500);
                *(double *)(a3 + 16) = *(float *)(a1 + 8504);
                float v29 = *(float *)(a1 + 8508);
                goto LABEL_184;
              case 34473:
                uint64_t v96 = *(unsigned __int16 *)(*(void *)(a1 + 26384) + 252);
                goto LABEL_490;
              case 34474:
                uint64_t ClampedStencilValue = *(int *)(*(void *)(a1 + 26384) + 248);
                goto LABEL_188;
              case 34475:
                uint64_t ClampedStencilValue = *(char *)(*(void *)(a1 + 26384) + 254);
                goto LABEL_188;
              case 34477:
                uint64_t ClampedStencilValue = (*(void *)(*(void *)(a1 + 26384) + 904) >> 20) & 1;
                goto LABEL_188;
              default:
                if (a2 == 34018)
                {
                  uint64_t ClampedStencilValue = *(unsigned __int16 *)(*(void *)(a1 + 29480) + 152);
                  goto LABEL_188;
                }
                if (a2 != 34058) {
                  return result;
                }
                uint64_t v94 = 9680;
                break;
            }
LABEL_517:
            v92 = (float32x2_t *)(a1 + v94);
LABEL_518:
            gleGetMatrixd(v92, (float64x2_t *)a3);
            *a4 = 5130;
            return 16;
          }
          if (a2 != 33063)
          {
            if (a2 != 33065)
            {
              if (a2 != 34017) {
                return result;
              }
              uint64_t v42 = *((unsigned __int16 *)v15 + 2661);
LABEL_124:
              uint64_t ClampedStencilValue = v42 + 33984;
              goto LABEL_188;
            }
            *(double *)a3 = *(float *)(a1 + 15360);
            *(double *)(a3 + 8) = *(float *)(a1 + 15364);
            *(double *)(a3 + 16) = *(float *)(a1 + 15368);
            *a4 = 5130;
            return 3;
          }
          float v25 = *(float *)(a1 + 15352);
LABEL_179:
          *(double *)a3 = v25;
          *a4 = 5130;
          return 1;
        }
        if (a2 <= 34965)
        {
          switch(a2)
          {
            case 34880:
              unint64_t v89 = a1 + ((unint64_t)*((unsigned __int8 *)v15 + 2047) << 6);
              uint64_t v90 = 9680;
              goto LABEL_402;
            case 34881:
            case 34884:
            case 34885:
              return result;
            case 34882:
              uint64_t ClampedStencilValue = 11;
              goto LABEL_188;
            case 34883:
              uint64_t ClampedStencilValue = *((unsigned __int8 *)v15 + 2047);
              goto LABEL_188;
            case 34886:
              uint64_t ClampedStencilValue = *(char *)(*(void *)(a1 + 26384) + 326);
              goto LABEL_188;
            case 34887:
              uint64_t v96 = *(unsigned __int16 *)(*(void *)(a1 + 26384) + 324);
LABEL_490:
              uint64_t ClampedStencilValue = v96 & 0xFFFFFFFFFFFFDFFFLL;
              goto LABEL_188;
            case 34888:
              uint64_t ClampedStencilValue = *(int *)(*(void *)(a1 + 26384) + 320);
              goto LABEL_188;
            default:
              if ((a2 - 34594) < 2)
              {
                unint64_t v89 = a1 + ((unint64_t)(a2 - 34588) << 6);
                uint64_t v90 = 9360;
                goto LABEL_402;
              }
              if (a2 != 34913) {
                return result;
              }
              uint64_t ClampedStencilValue = *((unsigned __int8 *)v17 + 93);
              break;
          }
          goto LABEL_188;
        }
        if (a2 <= 35209)
        {
          switch(a2)
          {
            case 34966:
              uint64_t ClampedStencilValue = *(void *)(*(void *)(a1 + 26384) + 1240);
              if (!ClampedStencilValue) {
                goto LABEL_188;
              }
              goto LABEL_187;
            case 34967:
              uint64_t ClampedStencilValue = *(void *)(*(void *)(a1 + 26384) + 1248);
              if (!ClampedStencilValue) {
                goto LABEL_188;
              }
              goto LABEL_187;
            case 34968:
              uint64_t ClampedStencilValue = *(void *)(*(void *)(a1 + 26384) + 1256);
              if (!ClampedStencilValue) {
                goto LABEL_188;
              }
              goto LABEL_187;
            case 34970:
              uint64_t ClampedStencilValue = *(void *)(*(void *)(a1 + 26384) + 8 * *((unsigned __int16 *)v15 + 2661) + 1304);
              if (!ClampedStencilValue) {
                goto LABEL_188;
              }
              goto LABEL_187;
            case 34974:
              uint64_t ClampedStencilValue = *(void *)(*(void *)(a1 + 26384) + 1272);
              if (!ClampedStencilValue) {
                goto LABEL_188;
              }
              goto LABEL_187;
            default:
              return result;
          }
          return result;
        }
        if (a2 <= 35739)
        {
          switch(a2)
          {
            case 35210:
              uint64_t ClampedStencilValue = *(unsigned __int16 *)(*(void *)(a1 + 26384) + 300);
              goto LABEL_188;
            case 35211:
              uint64_t ClampedStencilValue = *(int *)(*(void *)(a1 + 26384) + 296);
              goto LABEL_188;
            case 35213:
              gleGetMatrixd((float32x2_t *)(a1 + 9616), (float64x2_t *)a3);
              for (uint64_t i = 0; i != 128; i += 8)
              {
                float v98 = *(double *)(a3 + i);
                *(float *)(a3 + i) = v98;
                uint64_t result = 16;
              }
              break;
            case 35214:
              gleGetMatrixd((float32x2_t *)(a1 + 9552), (float64x2_t *)a3);
              for (uint64_t j = 0; j != 128; j += 8)
              {
                float v100 = *(double *)(a3 + j);
                *(float *)(a3 + j) = v100;
                uint64_t result = 16;
              }
              break;
            case 35215:
              unint64_t v101 = *((unsigned __int16 *)v15 + 2660);
              if (v101 > 7) {
                return 4294967294;
              }
              gleGetMatrixd((float32x2_t *)(a1 + (v101 << 6) + 10384), (float64x2_t *)a3);
              for (uint64_t k = 0; k != 128; k += 8)
              {
                float v103 = *(double *)(a3 + k);
                *(float *)(a3 + k) = v103;
                uint64_t result = 16;
              }
              break;
            default:
              return result;
          }
          return result;
        }
        switch(a2)
        {
          case 35740:
            uint64_t ClampedStencilValue = (*(void *)(*(void *)(a1 + 26384) + 904) >> 22) & 1;
            goto LABEL_188;
          case 35742:
            uint64_t ClampedStencilValue = *(void *)(*(void *)(a1 + 26384) + 1296);
            if (!ClampedStencilValue) {
              goto LABEL_188;
            }
            break;
          case 35743:
            uint64_t ClampedStencilValue = *(void *)(*(void *)(a1 + 26384) + 1288);
            if (!ClampedStencilValue) {
              goto LABEL_188;
            }
            break;
          default:
            return result;
        }
LABEL_187:
        uint64_t ClampedStencilValue = *(unsigned int *)(ClampedStencilValue + 16);
        goto LABEL_188;
      }
      if (a2 > 3007)
      {
        if (a2 <= 3552)
        {
          if (a2 > 3152)
          {
            switch(a2)
            {
              case 3377:
                uint64_t ClampedStencilValue = 8;
                goto LABEL_188;
              case 3378:
              case 3379:
              case 3380:
              case 3381:
              case 3383:
                return result;
              case 3382:
                if (v49 == 2) {
                  goto LABEL_483;
                }
                uint64_t ClampedStencilValue = 32;
                goto LABEL_188;
              case 3384:
                if (v49 != 2) {
                  goto LABEL_488;
                }
                uint64_t ClampedStencilValue = 2;
                goto LABEL_188;
              case 3385:
                if (v49 == 2) {
LABEL_487:
                }
                  uint64_t ClampedStencilValue = 4;
                else {
LABEL_488:
                }
                  uint64_t ClampedStencilValue = 10;
                goto LABEL_188;
              default:
                if (a2 == 3153)
                {
                  uint64_t ClampedStencilValue = v17[1];
                }
                else
                {
                  if (a2 != 3156) {
                    return result;
                  }
                  uint64_t ClampedStencilValue = v17[4];
                }
                break;
            }
            goto LABEL_188;
          }
          if (a2 <= 3009)
          {
            if (a2 == 3008) {
              uint64_t ClampedStencilValue = *(unsigned __int8 *)(a1 + 15006);
            }
            else {
              uint64_t ClampedStencilValue = *(unsigned __int16 *)(a1 + 15004);
            }
            goto LABEL_188;
          }
          if (a2 == 3010)
          {
            if ((*(unsigned char *)(v14 + 131) & 0x10) != 0) {
              gleUpdateAnyDrawBuffersFloat(a1, a6, a7, a8);
            }
            float v95 = *(float *)(v14 + 32);
            if (*((unsigned char *)v18 + 170)) {
              float v95 = fminf(fmaxf(v95, *(float *)(a1 + 288)), *(float *)(a1 + 292));
            }
            double v46 = v95;
LABEL_153:
            *(double *)a3 = v46;
            *a4 = 5130;
            uint64_t result = 1;
            *a5 = 1;
          }
          else if (a2 == 3152)
          {
            uint64_t ClampedStencilValue = *v17;
            goto LABEL_188;
          }
          return result;
        }
        if (a2 >= 0x4000)
        {
          if ((a2 - 0x4000) < 8)
          {
            unsigned int v74 = *(_DWORD *)(a1 + 14880);
LABEL_374:
            uint64_t ClampedStencilValue = (v74 >> a2) & 1;
            goto LABEL_188;
          }
          if (a2 == 32826)
          {
            uint64_t ClampedStencilValue = *(unsigned __int8 *)(a1 + 12517);
            goto LABEL_188;
          }
          return result;
        }
        if (a2 != 3553)
        {
          if (a2 != 5888) {
            return result;
          }
LABEL_414:
          uint64_t v94 = 9616;
          goto LABEL_517;
        }
        unint64_t v104 = *((unsigned __int16 *)v15 + 2660);
        if (v104 < 8)
        {
          uint64_t ClampedStencilValue = ((unint64_t)*(unsigned int *)(a1 + 76 * v104 + 15684) >> 3) & 1;
          goto LABEL_188;
        }
        if (!*(_WORD *)(v14 + 160)) {
          *(_WORD *)(v14 + 160) = 1282;
        }
        goto LABEL_177;
      }
      if (a2 <= 2831)
      {
        if (a2 != 2816)
        {
          if (a2 == 2818)
          {
            *(double *)a3 = *(float *)(a1 + 8448);
            *(double *)(a3 + 8) = *(float *)(a1 + 8452);
            *(double *)(a3 + 16) = *(float *)(a1 + 8456);
            *a4 = 5130;
            *a5 = 1;
            return 3;
          }
          if (a2 != 2819) {
            return result;
          }
          unint64_t v88 = *((unsigned __int16 *)v15 + 2660);
          if (v88 > 7) {
            return 4294967294;
          }
          v93 = (float *)(a1 + 16 * v88);
          *(double *)a3 = v93[2140];
          *(double *)(a3 + 8) = v93[2141];
          *(double *)(a3 + 16) = v93[2142];
          *(double *)(a3 + 24) = v93[2143];
          *a4 = 5130;
          return 4;
        }
        *(double *)a3 = *(float *)(a1 + 8464);
        *(double *)(a3 + 8) = *(float *)(a1 + 8468);
        *(double *)(a3 + 16) = *(float *)(a1 + 8472);
        float v29 = *(float *)(a1 + 8476);
LABEL_184:
        *(double *)(a3 + 24) = v29;
        *a4 = 5130;
        *a5 = 1;
        return 4;
      }
      switch(a2)
      {
        case 2896:
          uint64_t ClampedStencilValue = *(unsigned __int8 *)(a1 + 14890);
          goto LABEL_188;
        case 2897:
        case 2901:
        case 2902:
        case 2904:
        case 2905:
        case 2906:
        case 2907:
        case 2908:
        case 2909:
        case 2910:
        case 2911:
        case 2913:
          return result;
        case 2898:
          uint64_t ClampedStencilValue = *(unsigned __int8 *)(a1 + 14892);
          goto LABEL_188;
        case 2899:
          *(double *)a3 = *(float *)(a1 + 12528);
          *(double *)(a3 + 8) = *(float *)(a1 + 12532);
          *(double *)(a3 + 16) = *(float *)(a1 + 12536);
          float v29 = *(float *)(a1 + 12540);
          goto LABEL_184;
        case 2900:
          uint64_t ClampedStencilValue = *(unsigned int *)(a1 + 15592);
          goto LABEL_188;
        case 2903:
          uint64_t ClampedStencilValue = *(unsigned __int8 *)(a1 + 14891);
          goto LABEL_188;
        case 2912:
          uint64_t ClampedStencilValue = *((unsigned __int8 *)v18 + 274);
          goto LABEL_188;
        case 2914:
          float v25 = *(float *)(a1 + 15244);
          goto LABEL_179;
        case 2915:
          float v25 = *(float *)(a1 + 15248);
          goto LABEL_179;
        case 2916:
          float v25 = *(float *)(a1 + 15252);
          goto LABEL_179;
        case 2917:
          uint64_t ClampedStencilValue = v18[134];
          goto LABEL_188;
        case 2918:
          *(double *)a3 = *(float *)(a1 + 15228);
          *(double *)(a3 + 8) = *(float *)(a1 + 15232);
          *(double *)(a3 + 16) = *(float *)(a1 + 15236);
          float v29 = *(float *)(a1 + 15240);
          goto LABEL_184;
        default:
          switch(a2)
          {
            case 2976:
              int v91 = v15[509];
              if ((v91 - 5) >= 0xB)
              {
                switch(v91)
                {
                  case 2:
                    uint64_t ClampedStencilValue = 6144;
                    break;
                  case 3:
                    uint64_t ClampedStencilValue = 5889;
                    break;
                  case 4:
                    uint64_t ClampedStencilValue = 5888;
                    break;
                  default:
                    uint64_t ClampedStencilValue = 5890;
                    break;
                }
              }
              else
              {
                uint64_t ClampedStencilValue = 34880;
              }
              goto LABEL_188;
            case 2977:
              uint64_t ClampedStencilValue = *(unsigned __int8 *)(a1 + 12516);
              goto LABEL_188;
            case 2978:
              return result;
            case 2979:
              uint64_t v105 = v15[392];
              goto LABEL_515;
            case 2980:
              uint64_t v105 = v15[391];
              goto LABEL_515;
            case 2981:
              unint64_t v106 = *((unsigned __int16 *)v15 + 2660);
              if (v106 > 7) {
                return 4294967294;
              }
              uint64_t v105 = *(int *)(a1 + 4 * v106 + 20064);
LABEL_515:
              uint64_t ClampedStencilValue = v105 + 1;
              goto LABEL_188;
            case 2982:
              goto LABEL_414;
            case 2983:
              uint64_t v94 = 9552;
              goto LABEL_517;
            case 2984:
              unint64_t v107 = *((unsigned __int16 *)v15 + 2660);
              if (v107 > 7) {
                return 4294967294;
              }
              unint64_t v89 = a1 + (v107 << 6);
              uint64_t v90 = 10384;
LABEL_402:
              v92 = (float32x2_t *)(v89 + v90);
              goto LABEL_518;
            default:
              if (a2 != 2832) {
                return result;
              }
              uint64_t ClampedStencilValue = *((unsigned __int8 *)v17 + 92);
              break;
          }
          goto LABEL_188;
      }
      return result;
  }
}

uint64_t gliQueryRendererInfo(void *a1, int a2)
{
  if (!a1) {
    return 10014;
  }
  *a1 = 0;
  size_t Devices = gfxGetDevices();
  if (!Devices) {
    return 10015;
  }
  size_t v5 = Devices;
  LODWORD(Devices) = 0;
  do
  {
    if ((*(_DWORD *)(v5 + 20) & a2) != 0) {
      size_t Devices = (Devices + 1);
    }
    else {
      size_t Devices = Devices;
    }
    size_t v5 = *(void *)v5;
  }
  while (v5);
  if (!Devices) {
    return 0;
  }
  unsigned int v6 = (char *)malloc_type_calloc(Devices, 0x88uLL, 0x2BF3136CuLL);
  if (!v6) {
    abort();
  }
  uint64_t v7 = v6;
  uint64_t v8 = gfxGetDevices();
  if (v8)
  {
    uint64_t v9 = v8;
    int v10 = 0;
    while (1)
    {
      if ((*(_DWORD *)(v9 + 20) & a2) != 0)
      {
        uint64_t v11 = (*(uint64_t (**)(void, char *))(*(void *)(v9 + 8) + 1080))(*(void *)(v9 + 24), &v7[136 * v10]);
        if (v11)
        {
          uint64_t v12 = v11;
          free(v7);
          uint64_t v7 = 0;
          goto LABEL_23;
        }
        *(void *)&v7[136 * v10] = &v7[136 * v10 + 136];
        *(_DWORD *)&v7[136 * v10++ + 8] |= 0x20000u;
      }
      uint64_t v9 = *(void *)v9;
      if (!v9) {
        goto LABEL_21;
      }
    }
  }
  int v10 = 0;
LABEL_21:
  uint64_t v12 = 0;
  *(void *)&v7[136 * v10 - 136] = 0;
LABEL_23:
  *a1 = v7;
  return v12;
}

uint64_t gliDestroyRendererInfo(void *a1)
{
  if (!a1) {
    return 10014;
  }
  free(a1);
  return 0;
}

uint64_t gliAttachDrawableWithOptions(unint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  unint64_t v10 = a1 + 28652;
  if (*(void *)(a1 + 27648)) {
    (*(void (**)(unint64_t))(a1 + 27752))(a1);
  }
  if (*(_DWORD *)(v10 + 1140) != 878944803) {
    return 10004;
  }
  if ((a2 != 0) == (a3 == 0)) {
    return 10005;
  }
  if (*(void *)(a1 + 28992)) {
    gleFallbackForceEnd(a1);
  }
  if ((a4 & 0x80000000) != 0 || *(unsigned __int8 *)(a1 + 32496) <= a4) {
    return 10008;
  }
  *(unsigned char *)(a1 + 32498) = a4;
  int v11 = *(unsigned __int8 *)(a1 + 32499);
  if (v11 != a4) {
    (*(void (**)(void))(*(void *)(a1 + 29448) + 240))(*(void *)(a1 + 29016));
  }
  uint64_t v12 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, unint64_t))(*(void *)(a1 + 1672 * a4 + 34160)
                                                                                       + 1184))(*(void *)(a1 + 1672 * a4 + 32512), a2, a3, a5, a1 + 29632);
  uint64_t v13 = v12;
  if (v12 <= 3 && *(unsigned __int8 *)(a1 + 32499) != a4)
  {
    int v16 = 1;
LABEL_34:
    int v15 = 1;
    goto LABEL_35;
  }
  if ((int)v12 > 2)
  {
    int v16 = 0;
    int v15 = 0;
    if (v12 == 3)
    {
LABEL_35:
      int v14 = 1;
      goto LABEL_36;
    }
    if (v12 != 10016) {
      goto LABEL_45;
    }
    if (!a2)
    {
      uint64_t v13 = 10016;
      goto LABEL_45;
    }
    unsigned int v17 = *(unsigned __int8 *)(a1 + 32497);
    uint64_t v13 = 10016;
    if (v17 == 255 || v17 == a4) {
      goto LABEL_45;
    }
    if (v11 == a4)
    {
      unsigned int v18 = *(unsigned __int8 *)(a1 + 32497);
      (*(void (**)(void))(*(void *)(a1 + 29448) + 240))(*(void *)(a1 + 29016));
      unsigned int v17 = v18;
    }
    a4 = v17;
    uint64_t v19 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, unint64_t))(*(void *)(a1 + 1672 * v17 + 34160)
                                                                                         + 1184))(*(void *)(a1 + 1672 * v17 + 32512), a2, a3, a5, a1 + 29632);
    uint64_t v13 = v19;
    if (v19 > 3 || a4 == *(unsigned __int8 *)(a1 + 32499))
    {
      int v14 = 0;
      if (v19 < 2)
      {
        int v15 = 0;
        int v16 = 0;
        goto LABEL_36;
      }
      if (v19 == 3)
      {
        int v15 = 0;
        goto LABEL_56;
      }
      if (v19 != 2) {
        goto LABEL_45;
      }
    }
    else
    {
      int v14 = 1;
    }
    int v15 = 1;
LABEL_56:
    int v16 = v14;
    int v14 = 1;
    goto LABEL_36;
  }
  if (v12 < 2)
  {
    int v14 = 0;
    int v15 = 0;
    int v16 = 0;
LABEL_36:
    *(_DWORD *)unint64_t v10 = 0;
    *(_DWORD *)(v10 + 1148) |= 0xC0000000;
    if (v16)
    {
      *(int8x16_t *)(a1 + 1520) = vorrq_s8(*(int8x16_t *)(a1 + 1520), (int8x16_t)xmmword_227DC2030);
      *(int8x16_t *)(a1 + 1536) = vorrq_s8(*(int8x16_t *)(a1 + 1536), (int8x16_t)xmmword_227DC2040);
      *(_DWORD *)(v10 + 1148) |= 0xDE3C0478;
      *(void *)(a1 + 28648) = 0;
      *(unsigned char *)(v10 + 28) = 0;
      *(unsigned char *)(v10 + 30) = 0;
      int v20 = a4;
      int v21 = v15;
      gleSwitchPlugin(a1, v20);
      int v15 = v21;
    }
    if (v15) {
      gleUpdatePluginConfig(a1);
    }
    if (*(void *)(a1 + 28960)) {
      char v22 = 0;
    }
    else {
      char v22 = *(unsigned char *)(*(void *)(a1 + 29032) + 41);
    }
    uint64_t v13 = 0;
    *(unsigned char *)(a1 + 32483) = v22;
    *(void *)(a1 + 29008) = a3;
    goto LABEL_46;
  }
  int v16 = 0;
  if (v12 == 2) {
    goto LABEL_34;
  }
LABEL_45:
  LOWORD(a2) = 0;
  int v14 = 0;
  *(void *)(a1 + 29008) = 0;
LABEL_46:
  *(_WORD *)(v10 + 1176) = a2;
  gliUpdateDispatchState((int8x16_t *)a1, v14);
  if (!*(void *)(a1 + 28960) && *(unsigned char *)(a1 + 32477) && *(void *)(a1 + 29008))
  {
    *(unsigned char *)(a1 + 32470) = *(unsigned char *)(a1 + 32483);
    char v24 = *(unsigned char *)(a1 + 32473);
    *(unsigned char *)(a1 + 32471) = v24;
    *(unsigned char *)(a1 + 32472) |= v24;
  }
  else
  {
    *(_WORD *)(a1 + 32470) = 0;
  }
  return v13;
}

uint64_t gleUpdateDispatchCodeChange(unint64_t a1, char a2, unsigned int a3)
{
  unint64_t v4 = a1 + 29632;
  size_t v5 = (_DWORD *)(a1 + 28652);
  if ((a2 & 4) != 0)
  {
    uint64_t v7 = 0;
    *(unsigned char *)(a1 + 32482) = 0;
  }
  else
  {
    unsigned int v6 = *(unsigned __int8 *)(a1 + 32497);
    if (v6 == 255 || v6 == *(unsigned __int8 *)(a1 + 32499))
    {
      a2 = 0;
      *(unsigned char *)(a1 + 32482) = 1;
      uint64_t v7 = 1282;
    }
    else
    {
      uint64_t v28 = *(void *)(a1 + 28960);
      if (v28)
      {
        int v29 = *(unsigned __int16 *)(v28 + 474);
        int v30 = *(unsigned __int16 *)(v28 + 476);
      }
      else
      {
        int v29 = *(_DWORD *)v4;
        int v30 = *(_DWORD *)(a1 + 29636);
      }
      v42[0] = v29;
      v42[1] = v30;
      unsigned int v31 = (*(uint64_t (**)(void, uint64_t, _DWORD *, void, void))(*(void *)(a1 + 1672 * v6 + 34160)
                                                                                 + 1184))(*(void *)(a1 + 1672 * v6 + 32512), 92, v42, 0, 0);
      a2 = 0;
      if (v31 <= 3) {
        a2 = gleFallbackBegin(a1, a3);
      }
      uint64_t v7 = 0;
    }
  }
  int v8 = *(unsigned __int8 *)(v4 + 2849);
  if ((a2 & 1) == v8)
  {
    if (v8 != *(unsigned __int8 *)(*(void *)(a1 + 29032) + 101) && !*(_WORD *)(a1 + 2276))
    {
      *(_WORD *)(v4 + 202) = 0;
      *(_WORD *)(a1 + 2276) = 1;
      *size_t v5 = 0;
      *(_DWORD *)(a1 + 1544) |= 0x40000000u;
    }
  }
  else
  {
    uint64_t v9 = (unsigned char *)(a1 + 17985);
    if (a2)
    {
      *(unsigned char *)(v4 + 2849) = 1;
    }
    else
    {
      *(unsigned char *)(v4 + 2849) = 0;
      if (*(_WORD *)(a1 + 2276) != 1)
      {
        *(_WORD *)(v4 + 202) = 0;
        *(_WORD *)(a1 + 2276) = 1;
      }
      *size_t v5 = 0;
      *(_DWORD *)(a1 + 1544) |= 0x40000000u;
    }
    gleUpdateContextStateData(a1, 0);
    *(_DWORD *)(v4 + 164) = *(_DWORD *)(v4 + 164) & 0xFFFFFFBE | (*(unsigned char *)(v4 + 2849) != 0) | ((*(unsigned __int8 *)(v4 + 2849) != *(unsigned __int8 *)(*(void *)(a1 + 29032) + 101)) << 6);
    gleSetColorMaterialEnable(a1);
    gleUpdateDrawArraysFuncs(a1);
    gleSelectVertexSubmitFunc(a1);
    gleSelectPrimitiveFunc(a1);
    int v10 = *(unsigned __int16 *)(a1 + 17986);
    if (*(unsigned char *)(v4 + 2849))
    {
      if (v10 == 0xFFFF && !*v9)
      {
        uint64_t v32 = *(void *)(a1 + 26432);
        int v33 = *(unsigned __int16 *)(v32 + 42);
        if (v33 != 0xFFFF && !*(unsigned char *)(v32 + 41))
        {
          uint64_t v34 = *(unsigned __int8 *)(v4 + 2864);
          if (*(unsigned char *)(v4 + 2864))
          {
            uint64_t v35 = (void *)(v4 + 3952);
            do
            {
              *uint64_t v35 = 0;
              v35 += 209;
              --v34;
            }
            while (v34);
            LOWORD(v33) = *(_WORD *)(v32 + 42);
          }
          *(_WORD *)(a1 + 17986) = v33;
          *size_t v5 = 0;
          *(_DWORD *)(a1 + 1524) |= 0x40000000u;
          (*(void (**)(void, void))(*(void *)(a1 + 29496) + 168))(*(void *)(a1 + 29464), 0);
          if (*(unsigned char *)(v4 + 2864))
          {
            uint64_t v36 = 0;
            uint64_t v37 = *(void *)(a1 + 26432);
            long long v38 = (void *)(v4 + 3952);
            uint64_t v39 = 8 * *(unsigned __int8 *)(v4 + 2864);
            do
            {
              *long long v38 = *(void *)(*(void *)(v37 + 160) + v36 + 40);
              v36 += 8;
              v38 += 209;
            }
            while (v39 != v36);
          }
        }
      }
      uint64_t v11 = *(void *)(a1 + 26432);
      *uint64_t v9 = *(unsigned char *)(v11 + 41);
      *(_WORD *)(a1 + 17986) = *(_WORD *)(v11 + 42);
      if (*(__int16 *)(v11 + 42) != -1 && !*(unsigned char *)(v11 + 41))
      {
        uint64_t v12 = *(void *)(a1 + 24768);
        if (!v12)
        {
          uint64_t v13 = *(void *)(a1 + 24776);
          if (v13)
          {
            uint64_t v14 = v13 + 40;
            unsigned int v15 = 3;
            while (1)
            {
              uint64_t v12 = *(void *)(v14 + 8 * v15);
              if (v12) {
                break;
              }
              if (--v15 == -1) {
                goto LABEL_25;
              }
            }
          }
          else
          {
LABEL_25:
            uint64_t v12 = 0;
          }
        }
        for (uint64_t i = 0; i != 5; ++i)
        {
          if ((*(_DWORD *)(v12 + 3724) >> i))
          {
            uint64_t v17 = *(void *)(*(void *)(a1 + 26432) + 8 * i + 128);
            if (*(unsigned char *)(v17 + 165))
            {
              if (!*(void *)(v17 + 192)) {
                gfxWaitBufferOnDevices();
              }
            }
          }
        }
        *size_t v5 = 0;
        *(_DWORD *)(a1 + 1524) |= 0x40000000u;
        (*(void (**)(void, void))(*(void *)(a1 + 29496) + 168))(*(void *)(a1 + 29464), 0);
      }
    }
    else if (v10 != 0xFFFF)
    {
      uint64_t v18 = *(void *)(a1 + 24768);
      if (!v18)
      {
        uint64_t v18 = *(void *)(a1 + 24776);
        if (v18)
        {
          uint64_t v40 = v18 + 40;
          unsigned int v41 = 3;
          while (1)
          {
            uint64_t v18 = *(void *)(v40 + 8 * v41);
            if (v18) {
              break;
            }
            if (--v41 == -1)
            {
              uint64_t v18 = 0;
              break;
            }
          }
        }
      }
      uint64_t v19 = 0;
      *uint64_t v9 = 1;
      *(_WORD *)(a1 + 17986) = -1;
      do
      {
        if ((*(_DWORD *)(v18 + 3724) >> v19))
        {
          uint64_t v20 = *(void *)(*(void *)(a1 + 26432) + 8 * v19 + 128);
          uint64_t v21 = *(void *)(a1 + 29024);
          *(unsigned char *)(v20 + 167) = 0;
          *(void *)(v20 + 192) = v21;
          uint64_t v22 = *(void *)(a1 + 26384);
          if (v22) {
            *(unsigned char *)(v22 + 1216) = 0;
          }
        }
        ++v19;
      }
      while (v19 != 5);
      *size_t v5 = 0;
      *(_DWORD *)(a1 + 1524) |= 0x40000000u;
      (*(void (**)(void, void))(*(void *)(a1 + 29496) + 168))(*(void *)(a1 + 29464), 0);
      gleResetTransformFeedbackBufferCachePointers((void *)a1);
    }
    uint64_t v23 = *(void *)(a1 + 25960);
    if (*(unsigned char *)(v4 + 2849))
    {
      if (v23) {
        gleRestartPluginQuery(a1, v23 + 40);
      }
      uint64_t v24 = *(void *)(a1 + 25968);
      if (v24) {
        gleRestartPluginQuery(a1, v24 + 40);
      }
    }
    else
    {
      if (v23 && *(void *)(v23 + 232)) {
        gleSynchronizePluginQuery(a1, v23 + 40);
      }
      uint64_t v25 = *(void *)(a1 + 25968);
      if (v25 && *(void *)(v25 + 232)) {
        gleSynchronizePluginQuery(a1, v25 + 40);
      }
    }
  }
  return v7;
}

uint64_t glScissor_Exec(uint64_t a1, int a2, int a3, int a4, int a5)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  v6[3] = a5;
  return glScissorArrayv_Core(a1, 0, 1, (uint64_t)v6);
}

uint64_t glViewport_Exec(uint64_t a1, int a2, int a3, int a4, int a5)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v6[0] = (float)a2;
  v6[1] = (float)a3;
  v6[2] = (float)a4;
  v6[3] = (float)a5;
  return glViewportArrayv_Core(a1, 0, 1, (uint64_t)v6);
}

float glGetFloatv_Exec(uint64_t a1, int a2, float *a3, double a4, double a5, double a6)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  char v19 = 0;
  int v18 = 0;
  int State = gleGetState(a1, a2, (uint64_t)v20, &v18, &v19, a4, a5, a6);
  if (State == -2)
  {
    int v10 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return result;
    }
    __int16 v11 = 1282;
    goto LABEL_7;
  }
  if (State == -1)
  {
    int v10 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return result;
    }
    __int16 v11 = 1280;
LABEL_7:
    *int v10 = v11;
    return result;
  }
  if (v18 == 5124)
  {
    if (State >= 1)
    {
      uint64_t v12 = State;
      uint64_t v13 = (uint64_t *)v20;
      do
      {
        uint64_t v14 = *v13++;
        float result = (float)v14;
        *a3++ = (float)v14;
        --v12;
      }
      while (v12);
    }
  }
  else if (State >= 1)
  {
    uint64_t v15 = State;
    int v16 = (double *)v20;
    do
    {
      double v17 = *v16++;
      float result = v17;
      *a3++ = result;
      --v15;
    }
    while (v15);
  }
  return result;
}

uint64_t glGetString_Exec(uint64_t a1, int a2)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t v3 = (unsigned char *)(a1 + 31894);
  unint64_t v4 = (_WORD *)(a1 + 29832);
  if (a2 <= 34931)
  {
    switch(a2)
    {
      case 7936:
      case 7937:
      case 7940:
        size_t v5 = *(uint64_t (**)(uint64_t))(*(void *)(a1 + 29496) + 176);
        uint64_t v6 = *(void *)(*(void *)(a1 + 1672 * *(unsigned __int8 *)(a1 + 32500) + 34168) + 24);
        return v5(v6);
      case 7938:
        gleDeriveVersion(a1);
        uint64_t v9 = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)(a1 + 29496) + 176))(*(void *)(*(void *)(a1 + 1672 * v3[606] + 34168) + 24), 7938);
        int v8 = (_WORD *)(a1 + 32410);
        if (v3[607] == 2) {
          int v10 = "OpenGL ES-CM ";
        }
        else {
          int v10 = "OpenGL ES ";
        }
        snprintf_l((char *)(a1 + 32410), 0x3CuLL, 0, "%s%s %s", v10, (const char *)(a1 + 32406), v9);
        return (uint64_t)v8;
      case 7939:
        gleGetFilteredExtensions(a1, (uint64_t)v37);
        int v8 = v4 + 7;
        unsigned int v11 = v3[607] - 2;
        if (v11 > 2) {
          int v12 = 1;
        }
        else {
          int v12 = dword_227DC1598[(char)v11];
        }
        uint64_t v19 = 0;
        uint64_t v20 = (char *)(v4 + 7);
        break;
      default:
        goto LABEL_10;
    }
    while (1)
    {
      uint64_t v21 = &(&gleExtensionTable)[2 * v19];
      if ((v21[1] & v12) != 0 && (v21[1] & 0x100) == 0)
      {
        int v23 = *((__int16 *)v21 + 6);
        if (v23 == -1)
        {
          uint64_t v24 = *v21;
LABEL_41:
          char v25 = *v24;
          if (*v24)
          {
            float v26 = (unsigned __int8 *)(v24 + 1);
            do
            {
              *v20++ = v25;
              int v27 = *v26++;
              char v25 = v27;
            }
            while (v27);
          }
          *v20++ = 32;
          goto LABEL_45;
        }
        if ((v37[v23 >> 5] >> v23))
        {
          uint64_t v24 = *v21;
          if (v23 == 1 && (*(unsigned char *)(*(void *)(a1 + 19296) + 344) & 2) != 0) {
            uint64_t v24 = "GL_IMG_texture_format_BGRA8888";
          }
          goto LABEL_41;
        }
      }
LABEL_45:
      if (++v19 == 244)
      {
        char *v20 = 0;
        return (uint64_t)v8;
      }
    }
  }
  if (a2 == 34932) {
    return *(void *)(a1 + 24192);
  }
  if (a2 != 35358)
  {
    if (a2 == 35724 && *(unsigned char *)(a1 + 32501) != 2)
    {
      gleDeriveVersion(a1);
      uint64_t v15 = 0;
      uint64_t v16 = v3[607];
      double v17 = (const void *)(a1 + 32406);
      do
      {
        if (glGetString_Exec_versions[v15] == v16)
        {
          if (v15 == 6) {
            return glGetString_Exec_versions[v15 + 2];
          }
          size_t v18 = strlen((const char *)glGetString_Exec_versions[v15 + 1]);
          if (!memcmp(v17, (const void *)glGetString_Exec_versions[v15 + 1], v18)) {
            return glGetString_Exec_versions[v15 + 2];
          }
        }
        v15 += 3;
      }
      while (v15 != 21);
    }
    else
    {
LABEL_10:
      if (!*v4)
      {
        int v8 = 0;
        *unint64_t v4 = 1280;
        return (uint64_t)v8;
      }
    }
    return 0;
  }
  gleGetFilteredExtensions(a1, (uint64_t)v37);
  unsigned int v13 = v3[607] - 2;
  if (v13 > 2) {
    int v14 = 0;
  }
  else {
    int v14 = dword_227DC1598[(char)v13];
  }
  uint64_t v28 = 0;
  int v29 = v3;
  do
  {
    int v30 = &(&gleExtensionTable)[2 * v28];
    if ((v30[1] & v14) != 0 && (v30[1] & 0x100) != 0)
    {
      int v32 = *((__int16 *)v30 + 6);
      if (v32 == -1 || ((v37[v32 >> 5] >> v32) & 1) != 0)
      {
        int v33 = *v30;
        int v34 = **v30;
        if (v34)
        {
          uint64_t v35 = (unsigned __int8 *)(v33 + 1);
          do
          {
            *v29++ = v34;
            int v36 = *v35++;
            LOBYTE(v34) = v36;
          }
          while (v36);
        }
        *v29++ = 32;
      }
    }
    ++v28;
  }
  while (v28 != 244);
  unsigned char *v29 = 0;
  return (uint64_t)v3;
}

uint64_t glActiveTexture_Exec(uint64_t result, int a2)
{
  if (a2 - 33984 < 0 || a2 - 33984 >= *(unsigned __int16 *)(*(void *)(result + 29480) + 154))
  {
    if (!*(_WORD *)(result + 29832)) {
      *(_WORD *)(result + 29832) = 1280;
    }
  }
  else
  {
    *(_WORD *)(result + 23768) = a2 + 31552;
    if ((*(_DWORD *)(result + 20484) & 0xFFFFFFF8) == 0x10)
    {
      *(_DWORD *)(result + 20484) = a2 - 33968;
      return gleUpdateMatrixMode(result);
    }
  }
  return result;
}

void glGenTextures_Exec(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  if ((a2 & 0x80000000) != 0)
  {
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1281;
    }
  }
  else
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    int v6 = gleGenHashNames(*(void *)(a1 + 19296) + 72, a2);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (v6) {
      BOOL v7 = a2 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
      uint64_t v8 = a2;
      do
      {
        *a3++ = v6++;
        --v8;
      }
      while (v8);
    }
  }
}

uint64_t gleGenHashNames(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  unint64_t v4 = *(uint64_t **)(a1 + 16);
  if (!v4)
  {
    uint64_t v8 = gfxLibAlloc();
    *(void *)uint64_t v8 = 0;
LABEL_8:
    uint64_t v6 = 1;
    *(_DWORD *)(v8 + 8) = 1;
    *(_DWORD *)(v8 + 12) = a2;
    *(void *)(a1 + 16) = v8;
    return v6;
  }
  unsigned int v5 = *((_DWORD *)v4 + 2);
  if (v5 != a2 + 1)
  {
    if (v5 > a2)
    {
      uint64_t v8 = gfxLibAlloc();
      *(void *)uint64_t v8 = v4;
      goto LABEL_8;
    }
    while (1)
    {
      int v9 = *((_DWORD *)v4 + 3);
      uint64_t v6 = v9 + v5;
      unsigned int v10 = v6 + a2;
      if (__CFADD__(v6, a2)) {
        break;
      }
      unsigned int v11 = v4;
      unint64_t v4 = (uint64_t *)*v4;
      if (!v4 || (unsigned int v5 = *((_DWORD *)v4 + 2), v10 < v5))
      {
        *((_DWORD *)v11 + 3) = v9 + a2;
        return v6;
      }
      if (v10 == v5)
      {
        *((_DWORD *)v11 + 3) = v9 + a2 + *((_DWORD *)v4 + 3);
        *unsigned int v11 = *v4;
        MEMORY[0x22A686F90](v4);
        return v6;
      }
    }
    return 0;
  }
  uint64_t v6 = 1;
  unsigned int v7 = *((_DWORD *)v4 + 3) + a2;
  *((_DWORD *)v4 + 2) = 1;
  *((_DWORD *)v4 + 3) = v7;
  return v6;
}

void glBindTexture_Exec(uint64_t a1, int a2, unsigned int a3)
{
  unsigned int v5 = (unsigned char *)(a1 + 32501);
  uint64_t v6 = (unsigned __int16 *)(a1 + 23768);
  if (a2 > 35863)
  {
    if (a2 == 35866 && (*v5 & 0xFE) != 2)
    {
      unsigned int v7 = 5;
      goto LABEL_19;
    }
  }
  else if (a2 > 34036)
  {
    if (a2 == 34067 && *v5 != 2)
    {
      unsigned int v7 = 0;
      goto LABEL_19;
    }
  }
  else if (a2 != 3552)
  {
    if (a2 == 3553)
    {
      unsigned int v7 = 3;
      goto LABEL_19;
    }
    if (a2 == 32879 && (*v5 & 0xFE) != 2)
    {
      unsigned int v7 = 1;
LABEL_19:
      os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
      gleBindTexture(a1, v7, a3, *v6);
      uint64_t v8 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
      os_unfair_lock_unlock(v8);
      return;
    }
  }
  if (!*(_WORD *)(a1 + 29832)) {
    *(_WORD *)(a1 + 29832) = 1280;
  }
}

void gleBindTexture(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v7 = a1 + 28652;
  if (a3)
  {
    uint64_t v9 = *(void *)(a1 + 19296) + 72;
    unsigned int v10 = gleLookupHashObject(v9, a3);
    if (v10)
    {
      unsigned int v11 = v10;
      if ((v10[101] & 0xE3FF) != a2)
      {
        if (!*(_WORD *)(v7 + 1180)) {
          *(_WORD *)(v7 + 1180) = 1282;
        }
        return;
      }
    }
    else
    {
      TextureObject = (uint64_t *)gleCreateTextureObject(*(void *)(a1 + 19296), a2, a3);
      unsigned int v11 = TextureObject;
      if (*(unsigned char *)(v7 + 3849) == 4) {
        *((_WORD *)TextureObject + 461) = 6403;
      }
      gleAddHashNameAndObject(a1, v9, (uint64_t)TextureObject);
    }
  }
  else
  {
    unsigned int v11 = *(uint64_t **)(a1 + 8 * a2 + 23592);
  }
  ++*((_DWORD *)v11 + 5);
  uint64_t v13 = a1 + 88 * a4 + 8 * a2 + 20776;
  uint64_t v14 = *(void *)v13;
  int v15 = *(_DWORD *)(*(void *)v13 + 20) - 1;
  *(_DWORD *)(*(void *)v13 + 20) = v15;
  if (!v15)
  {
    gleUnbindTextureObject(a1, v14);
    gleFreeTextureObject(*(void *)(a1 + 19296), v14);
  }
  *(void *)uint64_t v13 = v11;
  uint64_t v16 = v11[72];
  if (!v16 || v16 == *(void *)(a1 + 29024))
  {
    int v17 = *(_DWORD *)(v7 + 1172);
    int v18 = *(_DWORD *)(*(void *)(a1 + 19296) + 4);
    if (v17 != v18)
    {
      uint64_t v19 = *(void *)(a1 + 28960);
      uint64_t v20 = *(void *)(a1 + 28968);
      if (*(_OWORD *)(a1 + 28960) != 0)
      {
        if (v19 && *(_DWORD *)(v19 + 556) != v17)
        {
          *(_DWORD *)uint64_t v7 = 0;
          *(_DWORD *)(v7 + 1148) |= 0x50000000u;
        }
        if (v20 && *(_DWORD *)(v20 + 556) != v17) {
          *(_DWORD *)(v7 + 1148) |= 0x82000000;
        }
        if (v19 && *(_DWORD *)(v19 + 556) != v18)
        {
          gleUpdateFBODirtyStateForTexStampChange(a1, (_DWORD *)(v19 + 40), (v19 == v20) | 2);
          *(_DWORD *)(v19 + 556) = *(_DWORD *)(*(void *)(a1 + 19296) + 4);
        }
        if (v20 != v19 && v20 && *(_DWORD *)(v20 + 556) != *(_DWORD *)(*(void *)(a1 + 19296) + 4))
        {
          gleUpdateFBODirtyStateForTexStampChange(a1, (_DWORD *)(v20 + 40), 1);
          *(_DWORD *)(v20 + 556) = *(_DWORD *)(*(void *)(a1 + 19296) + 4);
        }
      }
      gleUpdateCtxDirtyStateForTexStampChange(a1);
      *(_DWORD *)(v7 + 1172) = *(_DWORD *)(*(void *)(a1 + 19296) + 4);
    }
  }
  else
  {
    gleSynchronizePluginTextureLevels(a1, (uint64_t)(v11 + 5));
  }
  if (a2 == 7)
  {
    uint64_t v21 = v11[71];
    if (v21)
    {
      uint64_t v22 = *(void *)(v21 + 192);
      if (v22)
      {
        if (v22 != *(void *)(a1 + 29024))
        {
          gleSynchronizePluginBufferStorage(a1, v21 + 40);
          if (*(unsigned char *)(v7 + 3844))
          {
            unint64_t v23 = 0;
            uint64_t v24 = (char *)v11 + 156;
            do
            {
              *v24 |= 8u;
              v24 += 24;
              ++v23;
            }
            while (v23 < *(unsigned __int8 *)(v7 + 3844));
          }
        }
      }
      unsigned int v25 = *(unsigned __int8 *)(v7 + 3844);
      if (*(unsigned char *)(v7 + 3844))
      {
        unint64_t v26 = 0;
        int v27 = (int *)(v21 + 304);
        uint64_t v28 = (char *)v11 + 156;
        do
        {
          int v29 = *v27;
          v27 += 2;
          if (v29)
          {
            *v28 |= 8u;
            unsigned int v25 = *(unsigned __int8 *)(v7 + 3844);
          }
          ++v26;
          v28 += 24;
        }
        while (v26 < v25);
      }
      uint64_t v30 = *(void *)(a1 + 23776) | (1 << a4);
    }
    else
    {
      uint64_t v30 = *(void *)(a1 + 23776) & ~(1 << a4);
    }
    *(void *)(a1 + 23776) = v30;
  }
  if (((*(void *)(a1 + 8 * (a4 >> 4) + 14976) >> (4 * (a4 & 0xF))) & 0xF) == a2)
  {
    int v31 = 1 << (a4 & 0xF);
    *(_DWORD *)(a1 + 1524) |= v31;
    *(_DWORD *)(a1 + 1536) |= v31;
    int v32 = *(_DWORD *)(a1 + 1548) | 0x8000000;
  }
  else
  {
    int v32 = *(_DWORD *)(a1 + 1548);
  }
  *(_DWORD *)uint64_t v7 = 0;
  *(_DWORD *)(a1 + 1548) = v32 | 0x22000;
}

uint64_t *gleLookupHashObject(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(_DWORD *)(a1 + 24) & a2;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(v3 + 8 * v2);
  if (!v4) {
    return 0;
  }
  if (*(_DWORD *)(v4 + 16) == a2) {
    return *(uint64_t **)(v3 + 8 * v2);
  }
  float result = *(uint64_t **)(v3 + 8 * v2);
  while (1)
  {
    uint64_t v6 = result;
    float result = (uint64_t *)*result;
    if (!result) {
      break;
    }
    if (*((_DWORD *)result + 4) == a2)
    {
      void *v6 = *result;
      *float result = v4;
      *(void *)(v3 + 8 * v2) = result;
      return result;
    }
  }
  return result;
}

uint64_t gleAddHashNameAndObject(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = gleAddHashName(a2, *(_DWORD *)(a3 + 16));
  gleAddHashObject(a2, a3);
  return v5;
}

uint64_t gleAddHashObject(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 24);
  if (v4 <= 0xFFFE && *(_DWORD *)(result + 28) > v4)
  {
    uint64_t v5 = *(void *)(result + 8);
    float result = gfxLibCalloc();
    if (result)
    {
      uint64_t v6 = result;
      uint64_t v7 = 0;
      int v8 = (2 * v4) | 1;
      do
      {
        uint64_t v9 = *(uint64_t ***)(v5 + 8 * v7);
        if (v9)
        {
          do
          {
            unsigned int v10 = v9[2] & v8;
            unsigned int v11 = *v9;
            *uint64_t v9 = *(uint64_t **)(result + 8 * v10);
            *(void *)(result + 8 * v10) = v9;
            uint64_t v9 = (uint64_t **)v11;
          }
          while (v11);
        }
        ++v7;
      }
      while (v7 != v4 + 1);
      *(_DWORD *)(v3 + 24) = v8;
      float result = MEMORY[0x22A686F90](v5);
      *(void *)(v3 + 8) = v6;
      LODWORD(v4) = (2 * v4) | 1;
    }
  }
  unsigned int v12 = *(_DWORD *)(a2 + 16) & v4;
  uint64_t v13 = *(void *)(v3 + 8);
  *(void *)a2 = *(void *)(v13 + 8 * v12);
  *(void *)(v13 + 8 * v12) = a2;
  ++*(_DWORD *)(v3 + 28);
  return result;
}

uint64_t glPixelStorei_Exec(uint64_t result, int a2, unsigned int a3)
{
  uint64_t v3 = (__int16 *)(result + 29832);
  if (a2 == 3333)
  {
    if (a3 <= 8 && ((1 << a3) & 0x116) != 0)
    {
      *(_DWORD *)(result + 18476) = a3;
      return result;
    }
    goto LABEL_40;
  }
  if (a2 == 3317)
  {
    if (a3 <= 8 && ((1 << a3) & 0x116) != 0)
    {
      *(_DWORD *)(result + 18512) = a3;
      return result;
    }
    goto LABEL_40;
  }
  if ((*(unsigned char *)(result + 32501) & 0xFE) != 2)
  {
    if (a2 > 3330)
    {
      if (a2 > 32876)
      {
        if (a2 == 32877)
        {
          if ((a3 & 0x80000000) == 0)
          {
            *(_DWORD *)(result + 18508) = a3;
            return result;
          }
        }
        else
        {
          if (a2 != 32878) {
            goto LABEL_10;
          }
          if ((a3 & 0x80000000) == 0)
          {
            *(_DWORD *)(result + 18492) = a3;
            return result;
          }
        }
      }
      else if (a2 == 3331)
      {
        if ((a3 & 0x80000000) == 0)
        {
          *(_DWORD *)(result + 18464) = a3;
          return result;
        }
      }
      else
      {
        if (a2 != 3332) {
          goto LABEL_10;
        }
        if ((a3 & 0x80000000) == 0)
        {
          *(_DWORD *)(result + 18468) = a3;
          return result;
        }
      }
    }
    else if (a2 > 3315)
    {
      if (a2 == 3316)
      {
        if ((a3 & 0x80000000) == 0)
        {
          *(_DWORD *)(result + 18504) = a3;
          return result;
        }
      }
      else
      {
        if (a2 != 3330) {
          goto LABEL_10;
        }
        if ((a3 & 0x80000000) == 0)
        {
          *(_DWORD *)(result + 18448) = a3;
          return result;
        }
      }
    }
    else if (a2 == 3314)
    {
      if ((a3 & 0x80000000) == 0)
      {
        *(_DWORD *)(result + 18484) = a3;
        return result;
      }
    }
    else
    {
      if (a2 != 3315) {
        goto LABEL_10;
      }
      if ((a3 & 0x80000000) == 0)
      {
        *(_DWORD *)(result + 18500) = a3;
        return result;
      }
    }
LABEL_40:
    if (!*v3)
    {
      __int16 v4 = 1281;
      goto LABEL_42;
    }
    return result;
  }
LABEL_10:
  if (!*v3)
  {
    __int16 v4 = 1280;
LABEL_42:
    *uint64_t v3 = v4;
  }
  return result;
}

uint64_t glTexParameteri_Exec(uint64_t a1, int a2, int a3, int a4)
{
  int v5 = a4;
  return glTexParameterI_Exec(a1, a2, a3, &v5);
}

uint64_t glTexParameterI_Exec(uint64_t a1, int a2, int a3, int *a4)
{
  uint64_t v8 = a1 + 28652;
  uint64_t result = gleLookUpNonProxyNonFaceTexture(a1, a2);
  if (!result) {
    goto LABEL_124;
  }
  uint64_t v10 = result;
  if (a3 > 34045)
  {
    if (a3 <= 35454)
    {
      if (a3 <= 34235)
      {
        if (a3 != 34046)
        {
          if (a3 == 34230)
          {
            char v16 = *(unsigned char *)(result + 898);
            if ((*a4 != 0) != ((v16 & 2) == 0)) {
              return result;
            }
            gleEvaluateTextureParameterChange(a1, result, *(_DWORD *)(result + 884), *(_DWORD *)(result + 888), *a4 != 0, v16 & 1);
            int v17 = 0;
            goto LABEL_113;
          }
          goto LABEL_124;
        }
        int v30 = *a4;
        if (*a4 <= 0)
        {
LABEL_60:
          if (*(_WORD *)(v8 + 1180)) {
            return result;
          }
          __int16 v25 = 1281;
LABEL_126:
          *(_WORD *)(v8 + 1180) = v25;
          return result;
        }
        if (*(float *)(result + 928) == (float)v30) {
          return result;
        }
        *(float *)(result + 928) = (float)v30;
      }
      else
      {
        if (a3 <= 34892)
        {
          if (a3 != 34236)
          {
            if (a3 != 34892) {
              goto LABEL_124;
            }
            if (*(unsigned char *)(v8 + 3849) == 2) {
              goto LABEL_124;
            }
            if ((*(unsigned char *)(*(void *)(a1 + 29032) + 577) & 0x10) == 0) {
              goto LABEL_124;
            }
            int v11 = *a4;
            if (*a4)
            {
              if (v11 != 34894) {
                goto LABEL_124;
              }
            }
            if (v11 == *(unsigned __int16 *)(result + 918)) {
              return result;
            }
            *(_WORD *)(result + 918) = v11;
            goto LABEL_108;
          }
          int v28 = *a4;
          if ((*a4 - 34237) < 3)
          {
            if (v28 == *(unsigned __int16 *)(result + 552)) {
              return result;
            }
            int v17 = 0;
            *(_WORD *)(result + 552) = v28;
            goto LABEL_112;
          }
LABEL_124:
          if (*(_WORD *)(v8 + 1180)) {
            return result;
          }
          __int16 v25 = 1280;
          goto LABEL_126;
        }
        if (a3 != 34893) {
          goto LABEL_124;
        }
        if (*(unsigned char *)(v8 + 3849) == 2) {
          goto LABEL_124;
        }
        if ((*(unsigned char *)(*(void *)(a1 + 29032) + 577) & 0x10) == 0) {
          goto LABEL_124;
        }
        int v29 = *a4;
        if ((*a4 & 0xFFFFFFF8) != 0x200) {
          goto LABEL_124;
        }
        if (v29 == *(unsigned __int16 *)(result + 916)) {
          return result;
        }
        *(_WORD *)(result + 916) = v29;
      }
LABEL_108:
      uint64_t v40 = *(unsigned __int8 *)(v8 + 3844);
      if (*(unsigned char *)(v8 + 3844))
      {
        unsigned int v41 = (unsigned char *)(result + 480);
        do
        {
          *v41 |= 1u;
          v41 += 4;
          --v40;
        }
        while (v40);
      }
      int v17 = 1;
LABEL_112:
      gfxUpdatePluginTextureLevelGeometry();
LABEL_113:
      *(_DWORD *)uint64_t v8 = 0;
      *(_DWORD *)(a1 + 1548) |= 0x22000u;
      uint64_t v21 = a1;
      uint64_t v22 = v10;
      int v23 = v17;
LABEL_114:
      return gleDirtyTextureObjectCurrentBindPointsData(v21, v22, v23);
    }
    switch(a3)
    {
      case 36418:
        if ((*(unsigned char *)(v8 + 3849) & 0xFE) == 2) {
          goto LABEL_124;
        }
        int v13 = 0;
        switch(*a4)
        {
          case 6403:
            break;
          case 6404:
            int v13 = 1;
            break;
          case 6405:
            int v13 = 2;
            break;
          case 6406:
            int v13 = 3;
            break;
          default:
            int v13 = 4;
            break;
        }
        __int16 v50 = *(_WORD *)(result + 896);
        if ((v50 & 7) == v13) {
          return result;
        }
        int v17 = 0;
        __int16 v47 = v50 & 0xFFF8 | v13;
        goto LABEL_153;
      case 36419:
        if ((*(unsigned char *)(v8 + 3849) & 0xFE) == 2) {
          goto LABEL_124;
        }
        int v42 = 0;
        switch(*a4)
        {
          case 6403:
            break;
          case 6404:
            int v42 = 1;
            break;
          case 6405:
            int v42 = 2;
            break;
          case 6406:
            int v42 = 3;
            break;
          default:
            int v42 = 4;
            break;
        }
        unsigned int v48 = *(unsigned __int16 *)(result + 896);
        if (((v48 >> 3) & 7) == v42) {
          return result;
        }
        int v17 = 0;
        __int16 v47 = v48 & 0xFFC7 | (8 * v42);
        goto LABEL_153;
      case 36420:
        if ((*(unsigned char *)(v8 + 3849) & 0xFE) == 2) {
          goto LABEL_124;
        }
        int v45 = 0;
        switch(*a4)
        {
          case 6403:
            break;
          case 6404:
            int v45 = 1;
            break;
          case 6405:
            int v45 = 2;
            break;
          case 6406:
            int v45 = 3;
            break;
          default:
            int v45 = 4;
            break;
        }
        unsigned int v49 = *(unsigned __int16 *)(result + 896);
        if (((v49 >> 6) & 7) == v45) {
          return result;
        }
        int v17 = 0;
        __int16 v47 = v49 & 0xFE3F | ((_WORD)v45 << 6);
        goto LABEL_153;
      case 36421:
        if ((*(unsigned char *)(v8 + 3849) & 0xFE) == 2) {
          goto LABEL_124;
        }
        int v35 = 0;
        switch(*a4)
        {
          case 6403:
            break;
          case 6404:
            int v35 = 1;
            break;
          case 6405:
            int v35 = 2;
            break;
          case 6406:
            int v35 = 3;
            break;
          default:
            int v35 = 4;
            break;
        }
        unsigned int v46 = *(unsigned __int16 *)(result + 896);
        if (((v46 >> 9) & 7) == v35) {
          return result;
        }
        int v17 = 0;
        __int16 v47 = v46 & 0xF1FF | ((_WORD)v35 << 9);
LABEL_153:
        *(_WORD *)(result + 896) = v47;
        goto LABEL_112;
      case 36422:
        goto LABEL_124;
      default:
        if (a3 == 35455)
        {
          int v43 = *a4;
          if (*a4 >= 2) {
            goto LABEL_124;
          }
          unsigned int v44 = *(unsigned __int8 *)(result + 898);
          if (v43 != ((v44 >> 2) & 1))
          {
            int v17 = 0;
            *(unsigned char *)(result + 898) = v44 & 0xFB | (4 * (v43 & 1));
            goto LABEL_112;
          }
        }
        else
        {
          if (a3 != 35741 || *(unsigned char *)(v8 + 3849) != 2) {
            goto LABEL_124;
          }
          if (*(_DWORD *)(result + 740) != *a4
            || *(_DWORD *)(result + 744) != a4[1]
            || *(_DWORD *)(result + 748) != a4[2]
            || *(_DWORD *)(result + 752) != a4[3])
          {
            *(_DWORD *)(result + 740) = *a4;
            *(_DWORD *)(result + 744) = a4[1];
            *(_DWORD *)(result + 748) = a4[2];
            *(_DWORD *)(result + 752) = a4[3];
          }
        }
        break;
    }
    return result;
  }
  if (a3 > 32881)
  {
    if (a3 > 33081)
    {
      switch(a3)
      {
        case 33082:
          if ((*(unsigned char *)(v8 + 3849) & 0xFE) == 2) {
            goto LABEL_124;
          }
          float v12 = (float)*a4;
          if (*(float *)(result + 932) != v12)
          {
            *(float *)(result + 932) = v12;
            goto LABEL_108;
          }
          break;
        case 33083:
          if ((*(unsigned char *)(v8 + 3849) & 0xFE) == 2) {
            goto LABEL_124;
          }
          float v27 = (float)*a4;
          if (*(float *)(result + 936) != v27)
          {
            *(float *)(result + 936) = v27;
            goto LABEL_108;
          }
          break;
        case 33084:
          if ((*(unsigned char *)(v8 + 3849) & 0xFE) == 2) {
            goto LABEL_124;
          }
          int v24 = *a4;
          if (*a4 < 0 || a2 == 34037 && v24) {
            goto LABEL_60;
          }
          if (*(_DWORD *)(result + 884) != v24)
          {
            if (v24) {
              *(unsigned char *)(result + 558) = 1;
            }
            int v26 = *(_DWORD *)(result + 888);
            goto LABEL_68;
          }
          break;
        case 33085:
          int v26 = *a4;
          if (*a4 < 0) {
            goto LABEL_60;
          }
          if (*(_DWORD *)(result + 888) != v26)
          {
            if (v26 && v26 != 1000) {
              *(unsigned char *)(result + 558) = 1;
            }
            int v24 = *(_DWORD *)(result + 884);
LABEL_68:
            gleEvaluateTextureParameterChange(a1, result, v24, v26, (*(unsigned char *)(result + 898) & 2) != 0, *(unsigned char *)(result + 898) & 1);
            int v17 = 0;
            *(_DWORD *)(a1 + 1548) |= 0x8000000u;
            goto LABEL_113;
          }
          break;
        default:
          if (a3 != 33169) {
            goto LABEL_124;
          }
          if (*(unsigned __int8 *)(v8 + 3849) - 3 < 2) {
            goto LABEL_124;
          }
          int v19 = *a4;
          if (*a4 >= 2) {
            goto LABEL_124;
          }
          char v20 = *(unsigned char *)(result + 898);
          if (v19 != (v20 & 1))
          {
            if (v19) {
              *(unsigned char *)(result + 558) = 1;
            }
            gleEvaluateTextureParameterChange(a1, result, *(_DWORD *)(result + 884), *(_DWORD *)(result + 888), (v20 & 2) != 0, v19);
            goto LABEL_55;
          }
          break;
      }
      return result;
    }
    if (a3 != 32882)
    {
      if (a3 == 32959)
      {
        float v18 = fminf(fmaxf((float)*a4, *(float *)(a1 + 288)), *(float *)(a1 + 292));
        if (*(float *)(result + 892) == v18) {
          return result;
        }
        *(float *)(result + 892) = v18;
        gfxUpdatePluginTextureLevelGeometry();
LABEL_55:
        *(_DWORD *)uint64_t v8 = 0;
        *(_DWORD *)(a1 + 1548) |= 0x22000u;
        uint64_t v21 = a1;
        uint64_t v22 = v10;
        int v23 = 0;
        goto LABEL_114;
      }
      goto LABEL_124;
    }
    if ((*(unsigned char *)(v8 + 3849) & 0xFE) == 2) {
      goto LABEL_124;
    }
    int v31 = *a4;
    if (*a4 == 10497) {
      goto LABEL_85;
    }
    if (v31 <= 34625)
    {
      if (v31 != 33071)
      {
        int v53 = 33648;
LABEL_189:
        if (v31 != v53) {
          goto LABEL_124;
        }
        goto LABEL_85;
      }
    }
    else
    {
      if ((v31 - 34626) < 2)
      {
LABEL_85:
        if (a2 == 34037) {
          goto LABEL_124;
        }
        char v32 = *(unsigned char *)(result + 557) | 0x40;
        goto LABEL_87;
      }
      if (v31 != 37905)
      {
        int v53 = 35090;
        goto LABEL_189;
      }
    }
    char v32 = *(unsigned char *)(result + 557) & 0xBF;
LABEL_87:
    *(unsigned char *)(result + 557) = v32;
    if (v31 == *(unsigned __int16 *)(result + 924)) {
      return result;
    }
    *(_WORD *)(result + 924) = v31;
    goto LABEL_108;
  }
  switch(a3)
  {
    case 10240:
      int v14 = *a4;
      if (*a4 == 9729) {
        goto LABEL_25;
      }
      if (v14 == 35416)
      {
        if ((*(unsigned char *)(*(void *)(a1 + 29480) + 579) & 1) == 0) {
          goto LABEL_124;
        }
LABEL_25:
        char v15 = *(unsigned char *)(result + 557) | 4;
      }
      else
      {
        if (v14 != 9728) {
          goto LABEL_124;
        }
        char v15 = *(unsigned char *)(result + 557) & 0xFB;
      }
      *(unsigned char *)(result + 557) = v15;
      if (v14 != *(unsigned __int16 *)(result + 914))
      {
        *(_WORD *)(result + 914) = v14;
        goto LABEL_108;
      }
      return result;
    case 10241:
      int v38 = *a4;
      if ((*a4 - 9985) < 3)
      {
        if (a2 == 34037) {
          goto LABEL_124;
        }
        char v39 = *(unsigned char *)(result + 557) | 0xA;
LABEL_105:
        *(unsigned char *)(result + 557) = v39;
        *(unsigned char *)(result + 558) = 1;
        goto LABEL_106;
      }
      if (v38 > 9983)
      {
        if (v38 != 35416)
        {
          if (v38 != 9984 || a2 == 34037) {
            goto LABEL_124;
          }
          char v39 = *(unsigned char *)(result + 557) & 0xF5 | 2;
          goto LABEL_105;
        }
        if ((*(unsigned char *)(*(void *)(a1 + 29480) + 579) & 1) == 0) {
          goto LABEL_124;
        }
      }
      else
      {
        if (v38 == 9728)
        {
          char v54 = *(unsigned char *)(result + 557) & 0xF5;
          goto LABEL_197;
        }
        if (v38 != 9729) {
          goto LABEL_124;
        }
      }
      char v54 = *(unsigned char *)(result + 557) & 0xF5 | 8;
LABEL_197:
      *(unsigned char *)(result + 557) = v54;
LABEL_106:
      if (v38 != *(unsigned __int16 *)(result + 912))
      {
        *(_WORD *)(result + 912) = v38;
        goto LABEL_108;
      }
      return result;
    case 10242:
      int v33 = *a4;
      if (*a4 == 10497) {
        goto LABEL_90;
      }
      if (v33 <= 34625)
      {
        if (v33 != 33071)
        {
          int v51 = 33648;
LABEL_175:
          if (v33 != v51) {
            goto LABEL_124;
          }
LABEL_90:
          if (a2 == 34037) {
            goto LABEL_124;
          }
          char v34 = *(unsigned char *)(result + 557) | 0x10;
LABEL_92:
          *(unsigned char *)(result + 557) = v34;
          if (v33 != *(unsigned __int16 *)(result + 920))
          {
            *(_WORD *)(result + 920) = v33;
            goto LABEL_108;
          }
          return result;
        }
      }
      else
      {
        if ((v33 - 34626) < 2) {
          goto LABEL_90;
        }
        if (v33 != 37905)
        {
          int v51 = 35090;
          goto LABEL_175;
        }
      }
      char v34 = *(unsigned char *)(result + 557) & 0xEF;
      goto LABEL_92;
    case 10243:
      int v36 = *a4;
      if (*a4 == 10497) {
        goto LABEL_98;
      }
      if (v36 > 34625)
      {
        if ((v36 - 34626) < 2) {
          goto LABEL_98;
        }
        if (v36 != 37905)
        {
          int v52 = 35090;
          goto LABEL_179;
        }
LABEL_186:
        char v37 = *(unsigned char *)(result + 557) & 0xDF;
        goto LABEL_100;
      }
      if (v36 == 33071) {
        goto LABEL_186;
      }
      int v52 = 33648;
LABEL_179:
      if (v36 != v52) {
        goto LABEL_124;
      }
LABEL_98:
      if (a2 == 34037) {
        goto LABEL_124;
      }
      char v37 = *(unsigned char *)(result + 557) | 0x20;
LABEL_100:
      *(unsigned char *)(result + 557) = v37;
      if (v36 != *(unsigned __int16 *)(result + 922))
      {
        *(_WORD *)(result + 922) = v36;
        goto LABEL_108;
      }
      return result;
    default:
      if (a3 != 10495) {
        goto LABEL_124;
      }
      *(unsigned char *)(result + 792) = (4 * (*(unsigned char *)a4 & 1)) | *(unsigned char *)(result + 792) & 0xFB;
      return result;
  }
}

uint64_t gleLookUpNonProxyTexture(uint64_t a1, int a2)
{
  uint64_t result = 0;
  __int16 v4 = (unsigned char *)(a1 + 32501);
  uint64_t v5 = a1 + 20776;
  unsigned int v6 = *(unsigned __int16 *)(a1 + 23768);
  if (a2 <= 34068)
  {
    if (a2 == 3553)
    {
      uint64_t v7 = (void *)(v5 + 88 * v6 + 24);
    }
    else
    {
      if (a2 != 32879) {
        return result;
      }
      if ((*v4 & 0xFE) == 2) {
        return 0;
      }
      uint64_t v7 = (void *)(v5 + 88 * v6 + 8);
    }
  }
  else if ((a2 - 34069) >= 6)
  {
    if (a2 != 35866) {
      return result;
    }
    if ((*v4 & 0xFE) == 2) {
      return 0;
    }
    uint64_t v7 = (void *)(v5 + 88 * v6 + 40);
  }
  else
  {
    if (*v4 == 2) {
      return 0;
    }
    uint64_t v7 = (void *)(v5 + 88 * v6);
  }
  return *v7 + 40;
}

unsigned char *glTexImage2D_Exec(unsigned char *result, int a2, uint64_t a3, int a4, int a5, unsigned int a6, int a7, unsigned int a8, unsigned int a9, uint64_t a10)
{
  unsigned int v10 = a8;
  uint64_t v15 = (uint64_t)result;
  uint64_t v16 = a10;
  int v17 = result + 29832;
  float v18 = result + 18504;
  double v84 = result + 29832;
  if (!a10 && result[18518])
  {
    if (*v17) {
      return result;
    }
    __int16 v24 = 1281;
LABEL_17:
    *(_WORD *)double v84 = v24;
    return result;
  }
  double v83 = result + 18504;
  if (result[32501] == 3 && ((a4 & 0xFFFFFFFD) == 0x8C40 || (a8 | 2) == 0x8C42))
  {
    if (a4 != a8)
    {
      if (*v17) {
        return result;
      }
LABEL_16:
      __int16 v24 = 1282;
      goto LABEL_17;
    }
    if (a8 == 35904) {
      unsigned int v10 = 6407;
    }
    else {
      unsigned int v10 = 6408;
    }
  }
  unint64_t v85 = 0;
  uint64_t result = (unsigned char *)gleCheckTexImage2DArgs((uint64_t)result, a2, a3, a4, a5, a6, a7, v10, a9, &v85);
  if (result)
  {
    uint64_t v19 = (uint64_t)result;
    if (!result[770])
    {
      int v80 = a5;
      uint64_t v20 = *(void *)(v15 + 19336);
      uint64_t v79 = v20;
      if (v20)
      {
        unint64_t v21 = gleOffsetLimitStorage((int *)(v15 + 18484), v80, a6, v85, a10);
        uint64_t v22 = v20;
        int v23 = v80;
        uint64_t result = (unsigned char *)gleHandleUnpackBufferInEngineNoSync(v15, v22, v21, (BYTE4(v85) & 0x1F) + 1, a10);
        uint64_t v16 = (uint64_t)result;
        if (!result) {
          return result;
        }
      }
      else
      {
        int v23 = v80;
      }
      if (v84[2671]) {
        uint64_t result = (unsigned char *)mach_absolute_time();
      }
      else {
        uint64_t result = 0;
      }
      __int16 v25 = *(_WORD *)(v19 + 768);
      if ((v25 & 0x1C00) == 0x1000) {
        goto LABEL_28;
      }
      if ((*(_WORD *)(v19 + 768) & 0x1C00) == 0)
      {
        *(_WORD *)(v19 + 768) = v25 | 0x1000;
        goto LABEL_28;
      }
      if ((*(_WORD *)(v19 + 768) & 0xC00) == 0)
      {
LABEL_28:
        unint64_t v78 = result;
        unsigned int v26 = gleStandardizeIntegerFormat(v10);
        if ((*(unsigned char *)(v15 + 1540) & 4) != 0)
        {
          unsigned int v31 = v26;
          int MatrixIdentifier = gleGenerateMatrixIdentifier(v15, v15 + 9488, v27, v28, v29);
          unsigned int v26 = v31;
          unsigned int v30 = *((_DWORD *)v18 + 162) & 0xFFFFFEFF | ((MatrixIdentifier != -1074791426) << 8);
          *((_DWORD *)v18 + 162) = v30;
          *((_DWORD *)v18 + 2807) = MatrixIdentifier;
        }
        else
        {
          unsigned int v30 = *((_DWORD *)v18 + 162);
        }
        unsigned int v33 = v23;
        unsigned int v34 = a6;
        if ((v30 & 6) != 0)
        {
          if ((v30 & 2) != 0)
          {
            unsigned int v33 = v23;
            unsigned int v34 = a6;
            if (*((unsigned __int16 *)v18 + 176) != 32790) {
              goto LABEL_39;
            }
            unsigned int v33 = v23 - *((_DWORD *)v18 + 92) + 1;
            int v35 = v18 + 372;
          }
          else
          {
            unsigned int v33 = v23;
            unsigned int v34 = a6;
            if ((v30 & 4) == 0) {
              goto LABEL_39;
            }
            unsigned int v33 = v23;
            unsigned int v34 = a6;
            if (*((unsigned __int16 *)v18 + 212) != 32790) {
              goto LABEL_39;
            }
            unsigned int v33 = v23 - *((_DWORD *)v18 + 110) + 1;
            int v35 = v18 + 444;
          }
          unsigned int v34 = a6 - *v35 + 1;
        }
LABEL_39:
        if (v34) {
          uint64_t v36 = v33;
        }
        else {
          uint64_t v36 = 0;
        }
        if (v34) {
          int v37 = a7;
        }
        else {
          int v37 = 0;
        }
        if ((a2 - 34069) >= 6) {
          uint64_t v38 = 0;
        }
        else {
          uint64_t v38 = (a2 - 34069);
        }
        char v39 = (int *)(v19 + 480 * v38 + 32 * (int)a3 + 1032);
        LOWORD(v68) = 256;
        unsigned int v77 = v26;
        unsigned int v67 = a4;
        uint64_t v40 = v36;
        int v41 = gleEvaluateTextureImageChange(v15, v19, (uint64_t)v39, v38, a3, v36, v34, 1, v37, v67, v26, a9, v68, v16);
        int v42 = v41;
        if (!v40)
        {
          uint64_t result = 0;
          __int16 v47 = v84;
          goto LABEL_95;
        }
        int v43 = v83;
        if (!v16
          || (__int16 v44 = *(_WORD *)(v19 + 768), (v44 & 0x100) != 0)
          || !*(unsigned char *)(*(void *)(v15 + 29032) + 174)
          || a9 == 6656 && (*v83 & 7) != 0
          || (*(unsigned char *)(v19 + 480 * v38 + 32 * (int)a3 + 1043) & 1) != 0
          || *(unsigned __int8 *)(v19 + 976) > (int)a3
          || *(unsigned __int8 *)(v19 + 978) < (int)a3
          || ((*(unsigned __int16 *)(v19 + 2 * v38 + 984) >> a3) & 1) == 0)
        {
          __int16 v47 = v84;
          if (v79 && *(void *)(v79 + 192))
          {
            int v48 = v41;
            gleSynchronizeBufferOnCurrentDevicesForRead(v15, v79 + 40);
            int v42 = v48;
            int v43 = v83;
          }
          int v49 = 0;
          if (!v16) {
            goto LABEL_89;
          }
        }
        else
        {
          uint64_t v45 = v79;
          int v76 = v41;
          if (*(unsigned char *)(v19 + 898))
          {
            int v73 = 0;
            char v46 = 1;
            if (*(_DWORD *)(v19 + 884) == a3 && (v44 & 0xF) != 2)
            {
              gleGenerateEmptyMipmaps(v15, v19, v38, a3, *(unsigned __int8 *)(v19 + 975), 0, 0);
              uint64_t v45 = v79;
              int v43 = v83;
              char v46 = 0;
              int v73 = 1;
            }
          }
          else
          {
            int v73 = 0;
            char v46 = 1;
          }
          char v74 = v46;
          uint64_t v53 = *(void *)(v15 + 8 * *((unsigned __int16 *)v43 + 2632) + 23936);
          if (v53) {
            char v54 = (unsigned char *)(v53 + 198);
          }
          else {
            char v54 = (unsigned char *)(v19 + 926);
          }
          BOOL v55 = (*v54 & 1) == 0;
          int v56 = *(__int16 *)(v19 + 982);
          uint64_t v57 = (v56 >> 15);
          uint64_t v58 = (((v56 >> 13) & 1) - 1) & (v56 >> 15);
          unsigned int v59 = v77;
          *(_WORD *)(v19 + 968) = v77;
          *(_WORD *)(v19 + 970) = a9;
          if (v45)
          {
            uint64_t v71 = v45 + 40;
            unsigned int v70 = v56 >> 15;
            uint64_t v60 = (((v56 >> 13) & 1) - 1) & (v56 >> 15);
            BOOL v72 = v55;
            uint64_t result = (unsigned char *)(*(uint64_t (**)(void, void, uint64_t, uint64_t))(*(void *)(v15 + 29448)
                                                                                          + 368))(*(void *)(v15 + 29016), *(void *)(v19 + 8 * v84[2667]), v38, a3);
            if (result) {
              goto LABEL_83;
            }
            unsigned int v59 = v77;
            uint64_t v40 = v40;
            uint64_t v57 = v70;
            uint64_t v58 = v60;
            BOOL v55 = v72;
            if (*(void *)(v79 + 192))
            {
              gleSynchronizeBufferOnCurrentDevicesForRead(v15, v71);
              BOOL v55 = v72;
              uint64_t v58 = v60;
              uint64_t v57 = v70;
              unsigned int v59 = v77;
            }
          }
          uint64_t result = (unsigned char *)(*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, unint64_t, uint64_t, _DWORD, void, BOOL))(*(void *)(v15 + 29448) + 368))(*(void *)(v15 + 29016), *(void *)(v19 + 8 * v84[2667]), v38, a3, v57, v58, 0, v40, v34 | 0x100000000, __PAIR64__(a9, v59), v16, 0, 0, v55);
          if (result)
          {
LABEL_83:
            *(void *)(v19 + 536) = *(void *)(v15 + 29024);
            uint64_t v75 = v19 + 480 * v38 + 32 * (int)a3;
            *(unsigned char *)(v75 + 1043) |= 0x40u;
            if (v74)
            {
              int v43 = v83;
              __int16 v47 = v84;
            }
            else
            {
              int v61 = *(unsigned __int8 *)(v19 + 975);
              int v62 = a3;
              int v43 = v83;
              __int16 v47 = v84;
              if (v61 > (int)a3)
              {
                uint64_t v63 = (unsigned char *)(32 * (a3 + 1) + 480 * v38 + v19 + 1043);
                do
                {
                  *v63 |= 0x40u;
                  v63 += 32;
                  ++v62;
                }
                while (v62 < v61);
                int v42 = v76;
LABEL_97:
                if ((v42 & 0xC0000001) != 0)
                {
                  if (v42 < 0) {
                    int v66 = 134356992;
                  }
                  else {
                    int v66 = 139264;
                  }
                  *((_DWORD *)v43 + 2537) = 0;
                  *(_DWORD *)(v15 + 1548) |= v66;
                }
                else if (result == 1)
                {
                  goto LABEL_104;
                }
                uint64_t result = (unsigned char *)gleDirtyTextureLevelCurrentBindPointsGeom(v15, v19, v39);
LABEL_104:
                if (v47[2671])
                {
                  uint64_t result = (unsigned char *)mach_absolute_time();
                  *(void *)(v15 + 19168) += result - v78;
                }
                return result;
              }
            }
            int v42 = v76;
            goto LABEL_97;
          }
          int v43 = v83;
          __int16 v47 = v84;
          int v42 = v76;
          int v23 = v80;
          int v49 = v73;
        }
        if ((*(_WORD *)(v19 + 768) & 0x100) == 0)
        {
          int v50 = v42;
          uint64_t v51 = v19 + 480 * v38 + 32 * (int)a3;
          if ((*(unsigned char *)(v51 + 1043) & 1) != 0 || gfxAllocateTextureLevel())
          {
            LOBYTE(v69) = 1;
            gleTextureImagePut((_DWORD *)v15, v19, (uint64_t)v39, 0, 0, 0, v23, a6, 1, v85, v69, v15 + 18484, v16);
            *(_DWORD *)(v19 + 968) = *(_DWORD *)(v19 + 480 * v38 + 32 * (int)a3 + 1048);
            *(unsigned char *)(v51 + 1043) |= 0x10u;
            *(_WORD *)(v19 + 2 * v38 + 996) |= *(_WORD *)(v19 + 2 * v38 + 984) & (unsigned __int16)(1 << a3);
            __int16 v47 = v84;
            uint64_t v52 = v19 + 24 * v84[2667];
            *(unsigned char *)(v52 + 116) |= 4u;
            *(_WORD *)(v52 + 2 * v38 + 104) |= 1 << a3;
          }
          else
          {
            __int16 v47 = v84;
            if (!*(_WORD *)v84) {
              *(_WORD *)double v84 = 1285;
            }
          }
          int v43 = v83;
          int v42 = v50;
          goto LABEL_90;
        }
LABEL_89:
        *(_DWORD *)(v19 + 968) = 65538;
LABEL_90:
        if (!*(void *)(v19 + 480 * v38 + 32 * (int)a3 + 1056)
          && (*(_WORD *)(v19 + 768) & 0x100) == 0
          || (*(unsigned char *)(v19 + 898) & 1) == 0
          || *(_DWORD *)(v19 + 884) != a3)
        {
          uint64_t result = 0;
          goto LABEL_97;
        }
        BOOL v64 = v49 == 0;
        int v65 = v42;
        uint64_t result = (unsigned char *)gleGenMipmaps(v15, v19, v38, a3, 1, v64);
        int v42 = v65;
LABEL_95:
        int v43 = v83;
        goto LABEL_97;
      }
      if (*(_WORD *)v84) {
        return result;
      }
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t gleLookUpTexture2D(uint64_t a1, int a2)
{
  uint64_t v2 = a1 + 20776;
  if ((a2 - 34069) >= 6)
  {
    if (a2 == 3553)
    {
      uint64_t v3 = (void *)(v2 + 88 * *(unsigned __int16 *)(a1 + 23768) + 24);
      return *v3 + 40;
    }
  }
  else if (*(unsigned char *)(a1 + 32501) != 2)
  {
    uint64_t v3 = (void *)(v2 + 88 * *(unsigned __int16 *)(a1 + 23768));
    return *v3 + 40;
  }
  return 0;
}

uint64_t gleCheckTexImageArgs(uint64_t a1, unsigned int a2, int a3, int a4, unint64_t a5, int a6, int a7)
{
  unsigned int v7 = a5;
  uint64_t v8 = (__int16 *)(a1 + 29832);
  if ((a5 & 0x800000000000000) == 0)
  {
    uint64_t v9 = (unsigned __int16)*v8;
    if (*v8) {
      return 0;
    }
    if ((a5 & 0x4000000000000000) != 0) {
      __int16 v10 = 1282;
    }
    else {
      __int16 v10 = 1280;
    }
    goto LABEL_7;
  }
  if (a2 >= 0xF || a6)
  {
    uint64_t v9 = (unsigned __int16)*v8;
    if (*v8) {
      return 0;
    }
    __int16 v10 = 1281;
LABEL_7:
    *uint64_t v8 = v10;
    return v9;
  }
  if (a3 > 35447)
  {
    switch(a3)
    {
      case 35448:
        int v11 = *(unsigned __int8 *)(a1 + 32501);
        if (a4 == 6403 && v11 == 4) {
          return 1;
        }
        goto LABEL_39;
      case 35904:
        int v11 = *(unsigned __int8 *)(a1 + 32501);
        if (v11 != 2 && v11 != 4 && (*(unsigned char *)(*(void *)(a1 + 29032) + 577) & 0x20) != 0)
        {
          int v12 = 6407;
LABEL_29:
          if (a4 == v12) {
            return 1;
          }
          goto LABEL_39;
        }
LABEL_49:
        uint64_t v9 = (unsigned __int16)*v8;
        if (*v8) {
          return 0;
        }
        __int16 v10 = 1280;
        goto LABEL_7;
      case 35906:
        int v11 = *(unsigned __int8 *)(a1 + 32501);
        if (v11 != 2 && v11 != 4 && (*(unsigned char *)(*(void *)(a1 + 29032) + 577) & 0x20) != 0)
        {
          int v12 = 6408;
          goto LABEL_29;
        }
        goto LABEL_49;
    }
LABEL_38:
    LOBYTE(v11) = *(unsigned char *)(a1 + 32501);
LABEL_39:
    if (a3 != a4 && (v11 & 0xFE) == 2) {
      goto LABEL_51;
    }
    int v14 = 0;
    if (!gleCheckTexFormatArgs(a1, a3, a4, a5, a7, &v14)) {
      return 0;
    }
    if (v14 != v7 >> 31)
    {
LABEL_51:
      uint64_t v9 = (unsigned __int16)*v8;
      if (*v8) {
        return 0;
      }
      __int16 v10 = 1282;
      goto LABEL_7;
    }
    return 1;
  }
  if (a3 != 6407)
  {
    if (a3 == 6408)
    {
      if (a4 == 32993) {
        return 1;
      }
      int v11 = *(unsigned __int8 *)(a1 + 32501);
      if ((a4 - 37903) <= 1 && (v11 - 3) < 2) {
        return 1;
      }
      goto LABEL_39;
    }
    goto LABEL_38;
  }
  int v11 = *(unsigned __int8 *)(a1 + 32501);
  if ((v11 - 3) > 1) {
    goto LABEL_39;
  }
  uint64_t v9 = 1;
  if (((a4 - 35429) > 0xF || ((1 << (a4 - 101)) & 0xFCFF) == 0)
    && ((a4 - 37875) > 0x1B || ((1 << (a4 + 13)) & 0x800073F) == 0)
    && a4 != 35359)
  {
    goto LABEL_39;
  }
  return v9;
}

uint64_t gleCreateTextureLevel(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, char a8, unsigned int a9, unsigned int a10, uint64_t a11)
{
  __int16 v11 = a6;
  __int16 v12 = a5;
  if ((*(unsigned char *)(a3 + 11) & 0x40) != 0) {
    ++*(_DWORD *)(*(void *)(result + 19296) + 316);
  }
  if (a5 && a6 && a7)
  {
    if (!*(unsigned char *)(a2 + 554))
    {
      *(unsigned char *)(a2 + 554) = 1;
      int v15 = *(unsigned __int16 *)(a2 + 552);
      *(_WORD *)(a2 + 880) = v15;
      if (v15 == 34237 && *(float *)(a2 + 776) == 0.0) {
        *(_WORD *)(a2 + 880) = -31298;
      }
    }
    *(_WORD *)(a3 + 4) = a5;
    *(_WORD *)(a3 + 6) = a6;
    *(_WORD *)(a3 + 8) = a7;
    *(unsigned char *)(a3 + 10) = a8;
    if (*(unsigned char *)(a2 + 769))
    {
      *(unsigned char *)(a3 + 11) = 32;
      *(_WORD *)(a3 + 16) = a9;
      *(_WORD *)(a3 + 18) = a10;
      *(_DWORD *)(a3 + 12) = 0;
      *(_DWORD *)a3 = 0;
      *(void *)(a3 + 24) = 0;
    }
    else
    {
      if (a9 == 6400
        || !a11
        || !*(unsigned char *)(result + 18518)
        || *(unsigned char *)(result + 18516)
        || (*(_WORD *)(result + 19152) & 0x1FF) != 0
        || (*(_DWORD *)(result + 19160) & 0xFF0FF1) != 0)
      {
        goto LABEL_27;
      }
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      if ((*(_WORD *)(a2 + 982) & 0x1800) == 0x1000)
      {
        char v16 = 4;
      }
      else
      {
        char v16 = 3;
        if ((*(_WORD *)(a2 + 982) & 0x2000) != 0)
        {
          if ((*(_WORD *)(a2 + 982) & 0x600) != 0) {
            char v16 = 4;
          }
          else {
            char v16 = 3;
          }
        }
      }
      uint64_t result = glePixelPackSettings(result, a9, a10, a5, a6, (int *)(result + 18484), (_DWORD *)&v21 + 1, &v21, (_DWORD *)&v20 + 1, (int *)&v20, v16);
      unsigned int v17 = HIDWORD(v20);
      int v18 = HIDWORD(v20) / HIDWORD(v21);
      if (HIDWORD(v20) % HIDWORD(v21))
      {
LABEL_27:
        *(unsigned char *)(a3 + 11) = 32;
        *(_WORD *)(a3 + 12) = v12;
        *(_WORD *)(a3 + 14) = v11;
        *(void *)(a3 + 24) = 0;
        return gleTexLevelStorage(a4, a9, a10, (__int16 *)(a3 + 16), (_WORD *)(a3 + 18));
      }
      else
      {
        uint64_t v19 = v21 + a11;
        *(unsigned char *)(a3 + 11) = 33;
        *(_WORD *)(a3 + 14) = v20 / v17;
        *(void *)(a3 + 24) = v19;
        *(_WORD *)(a3 + 16) = a9;
        *(_WORD *)(a3 + 18) = a10;
        if (!(_WORD)a10) {
          LOWORD(v18) = v12;
        }
        *(_WORD *)(a3 + 12) = v18;
      }
    }
  }
  else
  {
    *(void *)(a3 + 24) = 0;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 0;
  }
  return result;
}

uint64_t glTexSubImage2D_Exec(uint64_t a1, int a2, uint64_t a3, unsigned int a4, int a5, uint64_t a6, unsigned int a7, unsigned int a8, int a9, uint64_t a10)
{
  uint64_t v57 = a1 + 29832;
  unint64_t v58 = 0;
  if (*(unsigned char *)(a1 + 32501) == 3)
  {
    uint64_t result = gleLookUpNonProxyTexture2D(a1, a2);
    if (result)
    {
      unsigned int v19 = a2 - 34069;
      if ((a2 - 34069) >= 6) {
        unsigned int v19 = 0;
      }
      if ((int v20 = *(unsigned __int16 *)(result + 30 * v19 + 2 * (int)a3 + 560), a8 != 35904) && v20 == 35905
        || a8 != 35906 && v20 == 35907)
      {
        if (!*(_WORD *)v57) {
          *(_WORD *)uint64_t v57 = 1282;
        }
        return result;
      }
    }
    if (a8 == 35906) {
      int v21 = 6408;
    }
    else {
      int v21 = a8;
    }
    if (a8 == 35904) {
      a8 = 6407;
    }
    else {
      a8 = v21;
    }
  }
  unsigned int v56 = a5;
  uint64_t result = gleCheckTexSubImage2DArgs(a1, a2, a3, a4, a5, a6, a7, a8, a9, &v58);
  if (result)
  {
    uint64_t v22 = result;
    if (!*(unsigned char *)(result + 770))
    {
      uint64_t v23 = a10;
      uint64_t v24 = *(void *)(a1 + 19336);
      uint64_t v55 = v24;
      if (!v24
        || (uint64_t v53 = result,
            unint64_t v25 = gleOffsetLimitStorage((int *)(a1 + 18484), a6, a7, v58, a10),
            uint64_t v22 = v53,
            uint64_t result = gleHandleUnpackBufferInEngineNoSync(a1, v24, v25, (BYTE4(v58) & 0x1F) + 1, a10),
            (uint64_t v23 = result) != 0))
      {
        if (a6 && a7)
        {
          uint64_t v52 = v23;
          if (*(unsigned char *)(v57 + 2671)) {
            uint64_t v51 = mach_absolute_time();
          }
          else {
            uint64_t v51 = 0;
          }
          unsigned int v54 = gleStandardizeIntegerFormat(a8);
          if ((*(unsigned char *)(a1 + 1540) & 4) != 0)
          {
            int MatrixIdentifier = gleGenerateMatrixIdentifier(a1, a1 + 9488, v26, v27, v28);
            *(_DWORD *)(a1 + 19152) = *(_DWORD *)(a1 + 19152) & 0xFFFFFEFF | ((MatrixIdentifier != -1074791426) << 8);
            *(_DWORD *)(a1 + 29732) = MatrixIdentifier;
          }
          if ((a2 - 34069) >= 6) {
            uint64_t v30 = 0;
          }
          else {
            uint64_t v30 = (a2 - 34069);
          }
          if (a9 == 6656 && (*(unsigned char *)(a1 + 18504) & 7) != 0)
          {
            uint64_t v31 = v22 + 480 * v30 + 32 * (int)a3 + 1032;
            BOOL v32 = 0;
          }
          else
          {
            uint64_t v31 = v22 + 480 * v30 + 32 * (int)a3 + 1032;
            BOOL v32 = checkFastPath(a1, v31, a4, v56, 0, a6, a7, v58, v52, 2) != 0;
          }
          if (!*(void *)(v22 + 536) && (*(_WORD *)(v22 + 768) & 0x800) == 0) {
            gfxWaitTextureOnDevices();
          }
          if (v32
            && *(unsigned __int8 *)(v22 + 976) <= (int)a3
            && *(unsigned __int8 *)(v22 + 978) >= (int)a3
            && ((1 << a3) & *(unsigned __int16 *)(v22 + 2 * v30 + 984)) != 0)
          {
            uint64_t v33 = *(void *)(a1 + 8 * *(unsigned __int16 *)(a1 + 23768) + 23936);
            if (v33) {
              unsigned int v34 = (unsigned char *)(v33 + 198);
            }
            else {
              unsigned int v34 = (unsigned char *)(v22 + 926);
            }
            BOOL v35 = (*v34 & 1) == 0;
            if (*(unsigned char *)(v22 + 898))
            {
              uint64_t v36 = v31;
              if (*(_DWORD *)(v22 + 884) == a3 && (*(_WORD *)(v22 + 768) & 0xF) != 2)
              {
                BOOL v41 = (*v34 & 1) == 0;
                gleGenerateEmptyMipmaps(a1, v22, v30, a3, *(unsigned __int8 *)(v22 + 975), 0, 0);
                BOOL v35 = v41;
                char v49 = 0;
                int v50 = 1;
              }
              else
              {
                char v49 = 1;
                int v50 = 0;
              }
            }
            else
            {
              char v49 = 1;
              int v50 = 0;
              uint64_t v36 = v31;
            }
            *(_WORD *)(v22 + 968) = v54;
            *(_WORD *)(v22 + 970) = a9;
            unsigned int v42 = v54;
            if (v55)
            {
              BOOL v48 = v35;
              uint64_t result = (*(uint64_t (**)(void, void, uint64_t, uint64_t, void, void, void, uint64_t, uint64_t, unint64_t, uint64_t, _DWORD, void, BOOL))(*(void *)(a1 + 29448) + 368))(*(void *)(a1 + 29016), *(void *)(v22 + 8 * *(unsigned __int8 *)(v57 + 2667)), v30, a3, a4, v56, 0, a6, a7 | 0x100000000, __PAIR64__(a9, v54), v52, 0, *(void *)(v55 + 40 + 8 * *(unsigned __int8 *)(v57 + 2667)), v35);
              if (result) {
                goto LABEL_83;
              }
              BOOL v35 = v48;
              unsigned int v42 = v54;
              if (*(void *)(v55 + 192))
              {
                gleSynchronizeBufferOnCurrentDevicesForRead(a1, v55 + 40);
                unsigned int v42 = v54;
                BOOL v35 = v48;
              }
            }
            uint64_t result = (*(uint64_t (**)(void, void, uint64_t, uint64_t, void, void, void, uint64_t, uint64_t, unint64_t, uint64_t, _DWORD, void, BOOL))(*(void *)(a1 + 29448) + 368))(*(void *)(a1 + 29016), *(void *)(v22 + 8 * *(unsigned __int8 *)(v57 + 2667)), v30, a3, a4, v56, 0, a6, a7 | 0x100000000, __PAIR64__(a9, v42), v52, 0, 0, v35);
            if (result)
            {
LABEL_83:
              if ((*(_WORD *)(v22 + 768) & 0x800) == 0)
              {
                *(void *)(v22 + 536) = *(void *)(a1 + 29024);
                int v43 = (char *)(v22 + 480 * v30 + 32 * (int)a3 + 1043);
                char v44 = *v43;
                if ((*v43 & 0x10) != 0)
                {
                  if ((*v43 & 9) == 0)
                  {
                    uint64_t result = gfxFreeTextureLevel();
                    char v44 = *v43;
                  }
                  v44 &= ~0x10u;
                  *(_WORD *)(v22 + 2 * v30 + 996) &= ~(unsigned __int16)(1 << a3);
                }
                *int v43 = v44 | 0x40;
                if ((v49 & 1) == 0)
                {
                  int v45 = *(unsigned __int8 *)(v22 + 975);
                  if (v45 > (int)a3)
                  {
                    char v46 = (unsigned char *)(32 * a3 + 480 * v30 + v22 + 1075);
                    do
                    {
                      *v46 |= 0x40u;
                      v46 += 32;
                      LODWORD(a3) = a3 + 1;
                    }
                    while ((int)a3 < v45);
                  }
                }
              }
LABEL_70:
              if (*(unsigned char *)(v57 + 2671))
              {
                uint64_t result = mach_absolute_time();
                *(void *)(a1 + 19168) += result - v51;
              }
              return result;
            }
          }
          else if (v24)
          {
            uint64_t v36 = v31;
            if (*(void *)(v24 + 192)) {
              gleSynchronizeBufferOnCurrentDevicesForRead(a1, v24 + 40);
            }
            int v50 = 0;
          }
          else
          {
            int v50 = 0;
            uint64_t v36 = v31;
          }
          int v37 = (char *)(v22 + 480 * v30 + 32 * (int)a3 + 1043);
          char v38 = *v37;
          if ((*v37 & 0x40) != 0)
          {
            gleSynchronizeTextureLevelOnCurrentDevices(a1, v22);
          }
          else if ((*v37 & 0x10) == 0)
          {
            if (!*(void *)(v22 + 480 * v30 + 32 * (int)a3 + 1056))
            {
              if (!gfxAllocateTextureLevel())
              {
                if (!*(_WORD *)v57) {
                  *(_WORD *)uint64_t v57 = 1285;
                }
                goto LABEL_60;
              }
              char v38 = *v37;
            }
            *int v37 = v38 | 0x10;
          }
LABEL_60:
          gfxModifyPluginTextureLevel();
          if ((*(_WORD *)(v22 + 768) & 0x800) == 0) {
            (*(void (**)(void, uint64_t, void, void))(*(void *)(a1 + 29496) + 280))(*(void *)(a1 + 29464), 1, 0, *(void *)(v22 + 8 * *(unsigned __int8 *)(v57 + 2668)));
          }
          if ((*v37 & 0x10) != 0)
          {
            int v39 = *(unsigned __int8 *)(v22 + 480 * v30 + 32 * (int)a3 + 1042);
            unsigned int v40 = v39 + a4;
            if ((*(_WORD *)(v22 + 982) & 0x600) == 0) {
              int v39 = 0;
            }
            LOBYTE(v47) = 1;
            gleTextureImagePut((_DWORD *)a1, v22, v36, v40, v39 + v56, 0, a6, a7, 1, v58, v47, a1 + 18484, v52);
          }
          if ((*(unsigned char *)(v22 + 898) & 1) == 0
            || *(_DWORD *)(v22 + 884) != a3
            || (uint64_t result = gleGenMipmaps(a1, v22, v30, a3, 1, v50 == 0), !result))
          {
            uint64_t result = gleDirtyTextureLevelCurrentBindPointsData(a1, v22, v36);
          }
          goto LABEL_70;
        }
      }
    }
  }
  return result;
}

uint64_t gleCheckTexSubImage2DArgs(uint64_t a1, int a2, unsigned int a3, int a4, int a5, int a6, int a7, int a8, int a9, unint64_t *a10)
{
  int v15 = (__int16 *)(a1 + 29832);
  uint64_t v16 = gleLookUpNonProxyTexture2D(a1, a2);
  unint64_t v17 = glePixelStorageFromFormatType(a1, a8, a9);
  *a10 = v17;
  if (!v16)
  {
    if (!*v15)
    {
      uint64_t v16 = 0;
      __int16 v24 = 1280;
      goto LABEL_31;
    }
    return 0;
  }
  unsigned int v18 = v17;
  if (a8 == 35359 && ((a6 & 1) != 0 || a3 || (a4 & 1) != 0 || (*(_WORD *)(v16 + 768) & 0xF) == 0)) {
    goto LABEL_20;
  }
  BOOL v19 = a8 == 6402 || a8 == 34041;
  int v20 = v19;
  int v21 = *(unsigned __int16 *)(v16 + 772);
  BOOL v22 = v21 == 6402 || v21 == 34041;
  int v23 = v22;
  if (v20 != v23) {
    goto LABEL_20;
  }
  if ((v17 & 0x800000000000000) == 0)
  {
    if (!*v15)
    {
      uint64_t v16 = 0;
      if ((v17 & 0x4000000000000000) != 0) {
        __int16 v24 = 1282;
      }
      else {
        __int16 v24 = 1280;
      }
      goto LABEL_31;
    }
    return 0;
  }
  if (a3 >= 0xF || a2 == 34037 && a3)
  {
LABEL_28:
    if (!*v15)
    {
      uint64_t v16 = 0;
      __int16 v24 = 1281;
      goto LABEL_31;
    }
    return 0;
  }
  if ((a2 - 34069) >= 6) {
    unsigned int v26 = 0;
  }
  else {
    unsigned int v26 = a2 - 34069;
  }
  if ((*(unsigned char *)(v16 + 480 * v26 + 32 * a3 + 1043) & 0x20) == 0) {
    goto LABEL_20;
  }
  int v40 = 0;
  int v27 = *(unsigned __int16 *)(v16 + 30 * v26 + 2 * a3 + 560);
  if (v27 == 32856 && *(unsigned __int16 *)(v16 + 480 * v26 + 32 * a3 + 1048) != a8) {
    goto LABEL_20;
  }
  if ((a8 == 35359 || a8 == 34233) && *(unsigned __int16 *)(v16 + 480 * v26 + 32 * a3 + 1050) != a9) {
    goto LABEL_20;
  }
  unsigned int v28 = v26;
  if (!gleCheckTexFormatArgs(a1, v27, a8, v17, 1, &v40)) {
    return 0;
  }
  if (v40 != v18 >> 31) {
    goto LABEL_20;
  }
  unsigned int v29 = v28;
  int v30 = *(unsigned __int16 *)(v16 + 480 * v28 + 32 * a3 + 1050);
  int v31 = a7;
  if (v30) {
    goto LABEL_45;
  }
  if ((a6 & 3) != 0 && a5 | a4 && a6 + a4 != *(unsigned __int16 *)(v16 + 480 * v29 + 32 * a3 + 1036))
  {
LABEL_20:
    if (!*v15)
    {
      uint64_t v16 = 0;
      __int16 v24 = 1282;
LABEL_31:
      *int v15 = v24;
      return v16;
    }
    return 0;
  }
  if ((a7 & 3) != 0)
  {
    if (a5 | a4) {
      BOOL v34 = a7 + a5 == *(unsigned __int16 *)(v16 + 480 * v29 + 32 * a3 + 1038);
    }
    else {
      BOOL v34 = 1;
    }
    char v35 = v34;
    if ((a4 & 3) != 0 || (v35 & 1) == 0) {
      goto LABEL_20;
    }
  }
  else if ((a4 & 3) != 0)
  {
    goto LABEL_20;
  }
  if ((a5 & 3) != 0) {
    goto LABEL_20;
  }
LABEL_45:
  int v32 = *(_DWORD *)(a1 + 19152);
  if ((v32 & 6) != 0)
  {
    if ((v32 & 2) != 0)
    {
      if (*(unsigned __int16 *)(a1 + 18856) == 32790)
      {
        a6 = a6 - *(_DWORD *)(a1 + 18872) + 1;
        uint64_t v33 = (_DWORD *)(a1 + 18876);
        goto LABEL_65;
      }
    }
    else if ((v32 & 4) != 0 && *(unsigned __int16 *)(a1 + 18928) == 32790)
    {
      a6 = a6 - *(_DWORD *)(a1 + 18944) + 1;
      uint64_t v33 = (_DWORD *)(a1 + 18948);
LABEL_65:
      int v31 = a7 - *v33 + 1;
    }
  }
  if (a6 < 0) {
    goto LABEL_28;
  }
  int v36 = *(unsigned __int8 *)(v16 + 480 * v29 + 32 * a3 + 1042);
  if (-v36 > a4 || a6 + a4 > *(unsigned __int16 *)(v16 + 480 * v29 + 32 * a3 + 1036) + v36) {
    goto LABEL_28;
  }
  if (a2 == 35864)
  {
    if ((v31 | a5) < 0 || v31 + a5 > *(unsigned __int16 *)(v16 + 480 * v29 + 32 * a3 + 1038)) {
      goto LABEL_28;
    }
  }
  else if (v31 < 0 || -v36 > a5 || v31 + a5 > *(unsigned __int16 *)(v16 + 480 * v29 + 32 * a3 + 1038) + v36)
  {
    goto LABEL_28;
  }
  return v16;
}

uint64_t gleLookUpNonProxyTexture2D(uint64_t a1, int a2)
{
  uint64_t v2 = a1 + 20776;
  if ((a2 - 34069) >= 6)
  {
    if (a2 == 3553)
    {
      uint64_t v3 = (void *)(v2 + 88 * *(unsigned __int16 *)(a1 + 23768) + 24);
      return *v3 + 40;
    }
  }
  else if (*(unsigned char *)(a1 + 32501) != 2)
  {
    uint64_t v3 = (void *)(v2 + 88 * *(unsigned __int16 *)(a1 + 23768));
    return *v3 + 40;
  }
  return 0;
}

uint64_t checkFastPath(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, unint64_t a8, uint64_t a9, char a10)
{
  if ((*(unsigned char *)(a2 + 11) & 1) == 0) {
    return 1;
  }
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  int v18 = glePixelBytes(*(unsigned __int16 *)(a2 + 16), *(unsigned __int16 *)(a2 + 18));
  int v19 = gleRowBytes(*(unsigned __int16 *)(a2 + 16), *(unsigned __int16 *)(a2 + 18), *(unsigned __int16 *)(a2 + 12));
  uint64_t v20 = *(void *)(a2 + 24) + (a3 + (a4 + *(unsigned __int16 *)(a2 + 14) * a5) * *(unsigned __int16 *)(a2 + 12)) * v18;
  glePixelStorageSettings(a1, a8, a6, a7, (int *)(a1 + 18484), &v24, (int *)&v23 + 1, (_DWORD *)&v24 + 1, (int *)&v23, a10);
  uint64_t result = 0;
  if (a9 + HIDWORD(v23) != v20 || HIDWORD(v24) != v19) {
    return 1;
  }
  return result;
}

uint64_t glMatrixMode_Exec(uint64_t result, int a2)
{
  if (a2 <= 34879)
  {
    if (a2 > 34057)
    {
      if ((a2 - 34594) < 2)
      {
        int v2 = -34588;
        goto LABEL_11;
      }
      if (a2 == 34058)
      {
        int v3 = 5;
        goto LABEL_12;
      }
    }
    else
    {
      switch(a2)
      {
        case 5888:
          int v3 = 4;
          goto LABEL_12;
        case 5889:
          int v3 = 3;
          goto LABEL_12;
        case 5890:
          int v3 = *(unsigned __int16 *)(result + 23768) + 16;
LABEL_12:
          *(_DWORD *)(result + 20484) = v3;
          return gleUpdateMatrixMode(result);
      }
    }
  }
  else
  {
    if ((a2 - 35008) < 8)
    {
      int v2 = -35000;
LABEL_11:
      int v3 = a2 + v2;
      goto LABEL_12;
    }
    if (a2 == 34880)
    {
      int v3 = *(unsigned __int8 *)(result + 20495) + 5;
      goto LABEL_12;
    }
  }
  if (!*(_WORD *)(result + 29832)) {
    *(_WORD *)(result + 29832) = 1280;
  }
  return result;
}

uint64_t glLoadIdentity_Exec(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = (_DWORD *)(result + 20484);
  if (*(int *)(result + 20484) < 24)
  {
    int v3 = *(_OWORD **)(result + 19976);
    uint64_t result = gleMakeIdentityMatrix((uint64_t)v3);
    int v4 = v2[1];
    *(_DWORD *)(v1 + 1528) |= v4;
    v2[2042] = 0;
    *(_DWORD *)(v1 + 1540) |= v4;
    if ((v4 & 0xFFFFFC & *(_DWORD *)(v1 + 2216)) != 0)
    {
      uint64_t v5 = *(_OWORD **)(v1 + 19984);
      *uint64_t v5 = *v3;
      v5[1] = v3[1];
      v5[2] = v3[2];
      v5[3] = v3[3];
      v2[2311] = -1074791426;
      int v6 = *(_DWORD *)(v1 + 1544) & ~(v4 & 0xFFFFFC);
      v4 &= 0xFF000003;
    }
    else
    {
      int v6 = *(_DWORD *)(v1 + 1544);
    }
    v2[2042] = 0;
    *(_DWORD *)(v1 + 1544) = v6 | v4;
  }
  else if (!*(_WORD *)(result + 29832))
  {
    *(_WORD *)(result + 29832) = 1282;
  }
  return result;
}

int8x8_t glOrtho_Exec(uint64_t a1, int8x8_t result, double a3, double a4, double a5, double a6, double a7)
{
  unsigned int v7 = (__int16 *)(a1 + 29832);
  if (*(int *)(a1 + 20484) < 24)
  {
    float v9 = a3 - *(double *)&result;
    float v10 = -v9;
    if (v9 >= 0.0) {
      float v10 = a3 - *(double *)&result;
    }
    if (v10 < 0.000005) {
      goto LABEL_13;
    }
    float v11 = a5 - a4;
    float v12 = -v11;
    if (v11 >= 0.0) {
      float v12 = a5 - a4;
    }
    if (v12 < 0.000005) {
      goto LABEL_13;
    }
    float v13 = a6 - a7;
    float v14 = -v13;
    if (v13 >= 0.0) {
      float v14 = a6 - a7;
    }
    if (v14 >= 0.000005)
    {
      int v15 = *(float32x4_t **)(a1 + 19976);
      float v16 = 1.0 / v9;
      float v17 = 1.0 / v11;
      float v18 = -((*(double *)&result + a3) * v16);
      float v19 = -((a4 + a5) * v17);
      float v20 = (a6 + a7) * (float)(1.0 / v13);
      float32x4_t v21 = *v15;
      float32x4_t v22 = v15[1];
      *int v15 = vmulq_n_f32(*v15, v16 + v16);
      v15[1] = vmulq_n_f32(v22, v17 + v17);
      float32x4_t v23 = v15[2];
      float32x4_t v24 = vaddq_f32(v15[3], vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v22, v19), v21, v18), v23, v20));
      v15[2] = vmulq_n_f32(v23, (float)(1.0 / v13) + (float)(1.0 / v13));
      v15[3] = v24;
      LODWORD(v15) = *(_DWORD *)(a1 + 20488);
      *(_DWORD *)(a1 + 1528) |= v15;
      *(_DWORD *)(a1 + 28652) = 0;
      uint64_t result = vorr_s8(*(int8x8_t *)(a1 + 1540), (int8x8_t)vdup_n_s32(v15));
      *(double *)(a1 + 1540) = *(double *)&result;
    }
    else
    {
LABEL_13:
      if (!*v7)
      {
        __int16 v8 = 1281;
        goto LABEL_16;
      }
    }
  }
  else if (!*v7)
  {
    __int16 v8 = 1282;
LABEL_16:
    *unsigned int v7 = v8;
  }
  return result;
}

uint64_t glEnable_Exec(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 19304) + 32 * ((a2 + 7) ^ BYTE1(a2));
  do
  {
    if (*(_DWORD *)v2 == a2) {
      return (*(uint64_t (**)(void))(v2 + 8))();
    }
    uint64_t v2 = *(void *)(v2 + 16);
  }
  while (v2);
  if (!*(_WORD *)(result + 29832)) {
    *(_WORD *)(result + 29832) = 1280;
  }
  return result;
}

void *gleSetVertexSubmitFunc(uint64_t a1, uint64_t a2, float32_t a3, float a4, float32_t a5, float32_t a6)
{
  gleGetVertexSubmitFuncObjectAndKey(a1, 0, 0, 0, (void **)(a1 + 26248));
  *(void *)(a1 + 26152) = gleLLVMSubmitFunc;
  *(void *)(a1 + 26160) = gleLLVMSubmitFunc;
  if ((*(__int16 *)(a1 + 28660) & 0x80000000) == 0) {
    *(void *)(a1 + 26136) = gleLLVMSubmitFunc;
  }
  float v13 = *(unint64_t **)(a1 + 26248);
  *(float *)v12.i32 = a4;

  return gleRunVertexSubmitImmediate((void *)a1, a2, 0, 0, 0, v13, a3, v12, a5, a6);
}

uint64_t gleClipPoly(uint64_t result, char *a2, int a3, int a4, char *a5, _DWORD *a6, int a7)
{
  unsigned int v7 = a2;
  uint64_t v8 = result;
  if (a7)
  {
    if (a3 < 1) {
      goto LABEL_38;
    }
    int v9 = 0;
    char v10 = -1;
    float v11 = (uint64_t *)a2;
    do
    {
      uint64_t v12 = *v11++;
      int v13 = *(unsigned __int8 *)(v12 + 3);
      v10 &= v13;
      v9 |= v13;
    }
    while (v11 < (uint64_t *)&a2[8 * a3]);
    if (!(_BYTE)v9)
    {
LABEL_38:
      *a6 = -1;
      return result;
    }
    if (v10)
    {
      *a6 = 0;
      return result;
    }
  }
  else
  {
    int v9 = a4;
  }
  LODWORD(v14) = 0;
  uint64_t v15 = *(void *)(result + 26008);
  unsigned __int8 v16 = 1;
  float v17 = a5;
  float v18 = &a2[8 * a3];
  do
  {
    if ((v9 & v16) != 0)
    {
      *(void *)float v18 = *(void *)v7;
      float v19 = v17;
      if (v7 < v18)
      {
        float v20 = (uint64_t *)v7;
        do
        {
          uint64_t v21 = *v20;
          uint64_t v23 = v20[1];
          ++v20;
          uint64_t v22 = v23;
          if ((v16 & *(unsigned char *)(v21 + 3)) != 0)
          {
            if ((v16 & *(unsigned char *)(v22 + 3)) == 0)
            {
              if (!*(unsigned char *)(v21 + 1) || v21 == *(void *)v7)
              {
                uint64_t v24 = v15 + 640;
              }
              else
              {
                uint64_t v24 = v15;
                uint64_t v15 = v21;
              }
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v8 + 27896))(v8, v21, v22, v15, v16);
              v9 |= result;
              *(void *)float v19 = v15;
              v19 += 8;
LABEL_27:
              uint64_t v15 = v24;
            }
          }
          else
          {
            *(void *)float v19 = v21;
            if ((v16 & *(unsigned char *)(v22 + 3)) != 0)
            {
              if (*(unsigned char *)(v22 + 1) && v22 == *(void *)v7)
              {
                uint64_t v24 = v15;
                uint64_t v15 = v22;
              }
              else
              {
                uint64_t v24 = v15 + 640;
              }
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 27896))(v8, v22);
              v9 |= result;
              *(unsigned char *)(v15 + 1) = 2;
              *((void *)v19 + 1) = v15;
              v19 += 16;
              goto LABEL_27;
            }
            v19 += 8;
          }
        }
        while (v20 < (uint64_t *)v18);
      }
      unint64_t v14 = (unint64_t)(v19 - v17) >> 3;
      if ((int)v14 <= 2)
      {
        *a6 = 0;
        return result;
      }
      float v18 = &v17[(v19 - v17) & 0x7FFFFFFF8];
      unint64_t v25 = (uint64_t *)v17;
      float v17 = v7;
      unsigned int v7 = (char *)v25;
    }
    else
    {
      unint64_t v25 = (uint64_t *)v7;
    }
    v16 *= 2;
  }
  while ((v16 & 0xFEu) < 0x21);
  unsigned int v26 = a5;
  if (v25 != (uint64_t *)a5 && (int)v14 >= 1)
  {
    uint64_t v27 = v14;
    do
    {
      uint64_t v28 = *v25++;
      *(void *)unsigned int v26 = v28;
      v26 += 8;
      --v27;
    }
    while (v27);
  }
  *a6 = v14;
  *(void *)(v8 + 26008) = v15;
  return result;
}

uint64_t gleSetClipInterpFunc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  gleBuildInterpolateFunc(a1, 1);
  char v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 27896);

  return v10(a1, a2, a3, a4, a5);
}

uint64_t gleBuildInterpolateFunc(uint64_t result, int a2)
{
  if (*(unsigned char *)(result + 14890)) {
    BOOL v2 = *(unsigned char *)(result + 1452) != 0;
  }
  else {
    BOOL v2 = 0;
  }
  int v3 = 0;
  if (*(unsigned char *)(result + 15205)) {
    BOOL v4 = a2 == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4) {
    int v5 = 5;
  }
  else {
    int v5 = 1;
  }
  int v6 = *(unsigned __int16 *)(result + 29830);
  if (v6 == 7170)
  {
    LODWORD(v12) = 0;
    uint64_t v13 = 0;
    goto LABEL_80;
  }
  if (v6 != 7169)
  {
    LODWORD(v7) = 0;
    uint64_t v8 = 0;
    if (v6 == 7168)
    {
      uint64_t v9 = *(void *)(result + 19216);
      unint64_t v7 = *(void *)(result + 19224);
      uint64_t v8 = HIDWORD(v7);
      int v10 = *(_DWORD *)(result + 24864);
      if ((v10 & 0xFFFFFFE8) == 8)
      {
        uint64_t v11 = *(void *)(result + 24768);
        if (!v11) {
          uint64_t v11 = *(void *)(*(void *)(result + 24776) + 64);
        }
        int v3 = (*(_DWORD *)(v11 + 2824) | v9) & 0xC0 | v9 & 0x6000000 | 0x800;
        if (*(void *)(result + 24480)) {
          goto LABEL_44;
        }
      }
      else
      {
        int v3 = v9 & 0x60008C0;
        if (*(void *)(result + 24480)) {
          goto LABEL_44;
        }
      }
      if ((v10 & 1) == 0 && !*(unsigned char *)(result + 24756))
      {
        if (a2 != 2 && *(unsigned char *)(result + 14890))
        {
          if ((*(unsigned char *)(*(void *)(result + 29032) + 120) & 0x10) != 0 && *(_WORD *)(result + 15284) == 4353) {
            v5 |= 8u;
          }
          if (a2 == 1) {
            v5 |= 0x10u;
          }
          if (*(unsigned char *)(result + 14892)) {
            int v14 = 13312;
          }
          else {
            int v14 = 5120;
          }
          v5 |= v14;
          if (*(unsigned char *)(result + 19233))
          {
            v7 &= 0xFFFFFFF3FFFFFFF3;
            uint64_t v8 = HIDWORD(v7);
            v3 &= 0x1FFFFFFu;
            LODWORD(v12) = v7;
            uint64_t v13 = HIDWORD(v7);
            if (!v2) {
              goto LABEL_80;
            }
            goto LABEL_75;
          }
          v7 &= 0xFFFFFFFBFFFFFFFBLL;
          uint64_t v8 = HIDWORD(v7);
LABEL_42:
          v3 &= 0x1FFFFFFu;
          LODWORD(v12) = v7;
          uint64_t v13 = v8;
          if (!v2) {
            goto LABEL_80;
          }
          goto LABEL_75;
        }
        goto LABEL_41;
      }
LABEL_44:
      if (a2 != 2 && *(unsigned char *)(result + 17701))
      {
        uint64_t v15 = (v7 >> 1) & 0x200000002 | v7;
        unint64_t v7 = (v3 & 0x2000000) != 0 ? v15 : v7;
        uint64_t v8 = (v3 & 0x2000000) != 0 ? HIDWORD(v15) : v8;
        if ((v3 & 0x4000000) != 0)
        {
          v7 |= (2 * (v7 | (v8 << 32))) & 0x1000000010 | (v8 << 32);
          uint64_t v8 = HIDWORD(v7);
        }
      }
      if ((v10 & 0xFFFFFFEC) == 4)
      {
        uint64_t v16 = *(void *)(result + 24768);
        if (!v16) {
          uint64_t v16 = *(void *)(*(void *)(result + 24776) + 56);
        }
        float v17 = (_DWORD *)(v16 + 2120);
      }
      else
      {
        if ((v10 & 0xFFFFFFEF) != 1)
        {
          LOBYTE(v2) = 0;
          goto LABEL_64;
        }
        uint64_t v18 = *(void *)(result + 24768);
        if (!v18) {
          uint64_t v18 = *(void *)(*(void *)(result + 24776) + 40);
        }
        float v17 = (_DWORD *)(v18 + 712);
      }
      LOBYTE(v2) = 0;
      v3 |= *v17 & 0xC0;
      goto LABEL_64;
    }
LABEL_41:
    if (*(unsigned char *)(result + 14890)) {
      goto LABEL_42;
    }
    goto LABEL_64;
  }
  if (*(void *)(result + 24480) || *(unsigned char *)(result + 24756) || (*(unsigned char *)(result + 24864) & 1) != 0)
  {
    LOBYTE(v2) = 0;
    int v3 = 0x2000000;
    uint64_t v8 = 260;
    LODWORD(v7) = 260;
    goto LABEL_64;
  }
  if (a2 == 2)
  {
    LODWORD(v7) = 260;
    int v3 = 0x2000000;
    uint64_t v8 = 260;
    goto LABEL_41;
  }
  int v28 = v5 | 0x400;
  if (*(unsigned char *)(result + 14890))
  {
    int v3 = 0;
    int v29 = v5 | 0x410;
    if (a2 != 1) {
      int v29 = v28;
    }
    if (*(unsigned char *)(result + 14892)) {
      int v30 = 12288;
    }
    else {
      int v30 = 4096;
    }
    int v5 = v30 | v29;
    LODWORD(v7) = 260;
    uint64_t v8 = 260;
    LODWORD(v12) = 260;
    uint64_t v13 = 260;
    if (v2) {
      goto LABEL_75;
    }
    goto LABEL_80;
  }
  int v3 = 0x2000000;
  uint64_t v8 = 260;
  v5 |= 0x400u;
  LODWORD(v7) = 260;
LABEL_64:
  if ((v3 & 0x2000000) != 0 && *(unsigned char *)(result + 17702) != 0) {
    v5 |= 0x60000u;
  }
  if ((v3 & 0x4000000) != 0 && *(unsigned char *)(result + 17703) != 0) {
    v5 |= 0x180000u;
  }
  v3 &= 0x1FFFFFFu;
  LODWORD(v12) = v7;
  uint64_t v13 = v8;
  if (v2)
  {
LABEL_75:
    uint64_t v21 = 0x8000000000;
    if ((v5 & 8) == 0) {
      uint64_t v21 = 0x8000000080;
    }
    uint64_t v22 = 128;
    if (*(_DWORD *)(result + 15592) != 7424) {
      uint64_t v22 = v21;
    }
    unint64_t v12 = v7 | (unint64_t)(v8 << 32) | v22;
    uint64_t v13 = HIDWORD(v12);
  }
LABEL_80:
  int v23 = *(_DWORD *)(result + 15592);
  if (v12 & 4 | (v13 << 32) & 0x400000004) {
    uint64_t v24 = v12 | 4;
  }
  else {
    uint64_t v24 = v12;
  }
  if (v12 & 4 | (v13 << 32) & 0x400000004) {
    uint64_t v25 = v13 & 0xFFFFFFFB;
  }
  else {
    uint64_t v25 = v13;
  }
  if (((v24 | (v25 << 32)) & 0x800000008) != 0)
  {
    LODWORD(v24) = v24 | 8;
    LODWORD(v25) = v25 & 0xFFFFFFF7;
  }
  BOOL v26 = v23 == 7425;
  if (v23 == 7425)
  {
    int v27 = v13;
  }
  else
  {
    LODWORD(v12) = v24;
    int v27 = v25;
  }
  if (v26) {
    v5 |= 2u;
  }
  if (a2 == 2)
  {
    *(void *)(result + 27912) = gleLLVMVecCopyFlatVaryings;
    *(void *)(result + 27920) = gleLLVMVecCopyFlatVaryings;
    *(_DWORD *)(result + 28000) = v5;
    *(_DWORD *)(result + 28004) = v3;
    *(_DWORD *)(result + 28008) = 0;
    *(_DWORD *)(result + 28012) = v12;
    *(_DWORD *)(result + 28016) = v27;
  }
  else if (a2)
  {
    *(void *)(result + 27896) = gleLLVMVecInterpolateClip;
    *(void *)(result + 27904) = gleLLVMVecInterpolateClip;
    *(_DWORD *)(result + 27980) = v5;
    *(_DWORD *)(result + 27984) = v3;
    *(_DWORD *)(result + 27988) = 0;
    *(_DWORD *)(result + 27992) = v12;
    *(_DWORD *)(result + 27996) = v27;
  }
  else
  {
    *(void *)(result + 27880) = gleLLVMVecInterpolateEye;
    *(void *)(result + 27888) = gleLLVMVecInterpolateEye;
    *(_DWORD *)(result + 27960) = v5;
    *(_DWORD *)(result + 27964) = v3;
    *(_DWORD *)(result + 27968) = 0;
    *(_DWORD *)(result + 27972) = v12;
    *(_DWORD *)(result + 27976) = v27;
  }
  return result;
}

uint64_t gliDestroyContext(uint64_t a1)
{
  if (!a1) {
    return 10004;
  }
  uint64_t v2 = a1 + 29792;
  if (*(_DWORD *)(a1 + 29792) != 878944803) {
    return 10004;
  }
  if (*(void *)(a1 + 27648)) {
    (*(void (**)(uint64_t))(a1 + 27752))(a1);
  }
  uint64_t v3 = gleTerminateContext(a1);
  gfxClearSyncObjectsInHash();
  if (*(unsigned char *)(v2 + 2704))
  {
    unint64_t v4 = 0;
    int v5 = (void *)(a1 + 32512);
    do
    {
      unsigned int v6 = (*(uint64_t (**)(void))(v5[206] + 1176))(*v5);
      if (v3) {
        uint64_t v3 = v3;
      }
      else {
        uint64_t v3 = v6;
      }
      ++v4;
      v5 += 209;
    }
    while (v4 < *(unsigned __int8 *)(v2 + 2704));
  }
  gfxReleaseSharedStateAndHash();
  os_unfair_lock_lock((os_unfair_lock_t)&gl_list_lock);
  uint64_t v7 = 0;
  uint64_t v8 = *(unsigned __int8 *)(v2 + 2709);
  uint64_t v9 = &gl_list[v8];
  int v10 = v9;
  do
  {
    uint64_t v11 = v7;
    uint64_t v7 = *v10;
    int v10 = (void *)(*v10 + 29512);
    if (v7) {
      BOOL v12 = v7 == a1;
    }
    else {
      BOOL v12 = 1;
    }
  }
  while (!v12);
  uint64_t v13 = *(void *)(a1 + 29512);
  if (v11)
  {
    *(void *)(v11 + 29512) = v13;
    if (*v9) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  *uint64_t v9 = v13;
  if (!v13) {
LABEL_19:
  }
    gleDestroyEnableHashTable(v8);
LABEL_20:
  os_unfair_lock_unlock((os_unfair_lock_t)&gl_list_lock);
  for (uint64_t i = 2222; i != 2227; ++i)
    free(*(void **)(a1 + 8 * i));
  free((void *)a1);
  return v3;
}

uint64_t gleTerminateContext(uint64_t a1)
{
  if (*(void *)(a1 + 27648)) {
    gleDestroyCmdBufMachine(a1);
  }
  gleFreeOrphans((int64x2_t *)a1);
  gleFreeVertexMachine(a1);
  gleFreePixelMap((void *)a1);
  gleFreeMaterials(a1);
  gleFreeAllAttrib(a1);
  gleFreeQueryMachine((void *)a1);
  gleFreeCtxHashMachine(a1, a1 + 25872, (void (*)(uint64_t))gleFreeFenceObject);
  gleFreeVertexArrayState((uint64_t *)a1);
  gleFreeCtxHashMachine(a1, a1 + 26352, (void (*)(uint64_t))gleFreeCtxVertexArrayHashObject);
  gleFreeBufferState((void *)a1);
  gleFreeSamplerState(a1);
  gleFreeTransformFeedbackState(a1);
  gleLLVMFree(a1);
  gleFreeShaderProgramState(a1);
  gleFreeProgramPipelineState(a1);
  gleFreePipelineProgramState(a1);
  gleReclaimDrawCopyPixelResources(a1);
  gleReclaimBitmapResources(a1);
  gleReclaimAccumResources(a1);
  gleFreeFramebufferState((uint64_t *)a1);
  gleFreeTextureState(a1);
  gleClearTextures((void *)a1);
  gleCleanUpDerivedState(a1);
  free(*(void **)(a1 + 19288));
  free(*(void **)(a1 + 29520));
  free(*(void **)(a1 + 17816));
  glgDestroyProcessor();
  free(*(void **)(a1 + 18792));
  free(*(void **)(a1 + 18864));
  free(*(void **)(a1 + 18936));
  free(*(void **)(a1 + 19008));
  gleCleanUpGLDState((_OWORD *)(a1 + 2272));
  return 0;
}

void gleFreeOrphans(int64x2_t *a1)
{
  uint64_t v2 = (void *)a1[1809].i64[0];
  if (v2)
  {
    uint64_t v3 = (unint64_t *)a1[1806].i64[1];
    if (v3 != &a1[1805].u64[1])
    {
      do
      {
        gleFreeOrphan(a1, v3);
        uint64_t v3 = (unint64_t *)a1[1806].i64[1];
      }
      while (v3 != &a1[1805].u64[1]);
      uint64_t v2 = (void *)a1[1809].i64[0];
    }
    free(v2);
    a1[1809].i64[0] = 0;
    unint64_t v4 = (void *)a1[1805].i64[0];
    if (v4)
    {
      free(v4);
      a1[1805].i64[0] = 0;
    }
  }
}

void gleFreeVertexMachine(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 26000);
  if (v2)
  {
    uint64_t v3 = (_OWORD *)(a1 + 26000);
    free((void *)(v2 - 1280));
    *(void *)(a1 + 26032) = 0;
    *uint64_t v3 = 0u;
    *(_OWORD *)(a1 + 26016) = 0u;
    *(void *)(a1 + 26096) = 0;
    *(void *)(a1 + 26088) = 0;
  }
  if (*(_DWORD *)(a1 + 26104))
  {
    unint64_t v4 = *(void **)(a1 + 26056);
    if (v4) {
      free(v4);
    }
    *(_DWORD *)(a1 + 26104) = 0;
    *(void *)(a1 + 26080) = 0;
    *(void *)(a1 + 26112) = 0;
    *(void *)(a1 + 26056) = 0;
    *(void *)(a1 + 26064) = 0;
  }
}

void gleFreePixelMap(void *a1)
{
  uint64_t v2 = (void *)a1[2321];
  if (v2 != &gle_default_pix_map_i)
  {
    free(v2);
    a1[2321] = &gle_default_pix_map_i;
  }
  uint64_t v3 = (void *)a1[2330];
  if (v3 != &gle_default_pix_map_i)
  {
    free(v3);
    a1[2330] = &gle_default_pix_map_i;
  }
  unint64_t v4 = (void *)a1[2322];
  if (v4 != &gle_default_pix_map_f)
  {
    free(v4);
    a1[2322] = &gle_default_pix_map_f;
  }
  int v5 = (void *)a1[2323];
  if (v5 != &gle_default_pix_map_f)
  {
    free(v5);
    a1[2323] = &gle_default_pix_map_f;
  }
  unsigned int v6 = (void *)a1[2324];
  if (v6 != &gle_default_pix_map_f)
  {
    free(v6);
    a1[2324] = &gle_default_pix_map_f;
  }
  uint64_t v7 = (void *)a1[2325];
  if (v7 != &gle_default_pix_map_f)
  {
    free(v7);
    a1[2325] = &gle_default_pix_map_f;
  }
  uint64_t v8 = (void *)a1[2326];
  if (v8 != &gle_default_pix_map_f)
  {
    free(v8);
    a1[2326] = &gle_default_pix_map_f;
  }
  uint64_t v9 = (void *)a1[2327];
  if (v9 != &gle_default_pix_map_f)
  {
    free(v9);
    a1[2327] = &gle_default_pix_map_f;
  }
  int v10 = (void *)a1[2328];
  if (v10 != &gle_default_pix_map_f)
  {
    free(v10);
    a1[2328] = &gle_default_pix_map_f;
  }
  uint64_t v11 = (void *)a1[2329];
  if (v11 != &gle_default_pix_map_f)
  {
    free(v11);
    a1[2329] = &gle_default_pix_map_f;
  }
}

void *gleFreeMaterials(uint64_t a1)
{
  uint64_t v2 = 0;
  char v3 = 1;
  do
  {
    char v4 = v3;
    uint64_t v5 = a1 + 8 * v2;
    unsigned int v6 = *(void **)(v5 + 1424);
    uint64_t v7 = (void *)v6[64];
    if (v7)
    {
      do
      {
        uint64_t v8 = v7;
        free(v6);
        uint64_t v7 = (void *)v8[64];
        unsigned int v6 = v8;
      }
      while (v7);
    }
    else
    {
      uint64_t v8 = *(void **)(v5 + 1424);
    }
    char v3 = 0;
    *(void *)(v5 + 1424) = v8;
    uint64_t v2 = 1;
  }
  while ((v4 & 1) != 0);
  uint64_t result = *(void **)(a1 + 1440);
  if (result)
  {
    do
    {
      int v10 = (void *)result[64];
      free(result);
      uint64_t result = v10;
    }
    while (v10);
  }
  *(void *)(a1 + 1440) = 0;
  return result;
}

double gleFreeAllAttrib(uint64_t a1)
{
  uint64_t v2 = (int *)(a1 + 20768);
  uint64_t v3 = a1 + 20496;
  int v4 = *(_DWORD *)(a1 + 20768);
  if (v4 >= 1)
  {
    for (uint64_t i = 0; i < v4; *(void *)(v3 + 8 * i++) = 0)
    {
      unsigned int v6 = *(void **)(v3 + 8 * i);
      if (v6)
      {
        do
        {
          uint64_t v7 = (void *)v6[1018];
          free(v6);
          unsigned int v6 = v7;
        }
        while (v7);
        int v4 = *v2;
      }
    }
  }
  int v8 = v2[1];
  if (v8 >= 1)
  {
    for (uint64_t j = 0; j < v8; ++j)
    {
      uint64_t v10 = a1 + 8 * j;
      uint64_t v11 = *(void **)(v10 + 20632);
      if (v11)
      {
        do
        {
          BOOL v12 = (void *)v11[121];
          free(v11);
          uint64_t v11 = v12;
        }
        while (v12);
        int v8 = v2[1];
      }
      *(void *)(v10 + 20632) = 0;
    }
  }
  *(void *)(a1 + 20624) = v3;
  double result = 0.0;
  *(void *)(a1 + 20768) = 0;
  *(void *)(a1 + 20760) = a1 + 20632;
  return result;
}

uint64_t gleFreeQueryMachine(void *a1)
{
  uint64_t v2 = a1[3242];
  if (v2)
  {
    int v3 = *(_DWORD *)(v2 + 20) - 1;
    *(_DWORD *)(v2 + 20) = v3;
    if (!v3) {
      gleFreeQueryObject((uint64_t)a1, (void *)v2);
    }
    a1[3242] = 0;
  }
  uint64_t v4 = a1[3243];
  if (v4)
  {
    int v5 = *(_DWORD *)(v4 + 20) - 1;
    *(_DWORD *)(v4 + 20) = v5;
    if (!v5) {
      gleFreeQueryObject((uint64_t)a1, (void *)v4);
    }
    a1[3243] = 0;
  }
  uint64_t v6 = a1[3245];
  if (v6)
  {
    int v7 = *(_DWORD *)(v6 + 20) - 1;
    *(_DWORD *)(v6 + 20) = v7;
    if (!v7) {
      gleFreeQueryObject((uint64_t)a1, (void *)v6);
    }
    a1[3245] = 0;
  }
  uint64_t v8 = a1[3246];
  if (v8)
  {
    int v9 = *(_DWORD *)(v8 + 20) - 1;
    *(_DWORD *)(v8 + 20) = v9;
    if (!v9) {
      gleFreeQueryObject((uint64_t)a1, (void *)v8);
    }
    a1[3246] = 0;
  }

  return gleFreeCtxHashMachine((uint64_t)a1, (uint64_t)(a1 + 3238), (void (*)(uint64_t))gleFreeQueryObject);
}

void gleFreeVertexArrayState(uint64_t *a1)
{
  uint64_t v1 = a1[3298];
  if (v1)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1[2412] + 324));
    if (*(_DWORD *)(v1 + 16))
    {
      int v3 = *(_DWORD *)(v1 + 20) - 1;
      *(_DWORD *)(v1 + 20) = v3;
      if (!v3) {
        gleFreeVertexArrayHashObject(a1[2412], (char *)v1);
      }
    }
    uint64_t v4 = (char *)a1[3299];
    if (v4) {
      gleFreeVertexArrayHashObject(a1[2412], v4);
    }
    int v5 = (os_unfair_lock_s *)(a1[2412] + 324);
    os_unfair_lock_unlock(v5);
  }
}

void gleFreeBufferState(void *a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(a1[2412] + 324));
  uint64_t v2 = a1[3288];
  if (v2)
  {
    int v3 = *(_DWORD *)(v2 + 20) - 1;
    *(_DWORD *)(v2 + 20) = v3;
    if (!v3) {
      gleUnbindAndFreeBufferObject((uint64_t)a1, (void *)v2);
    }
  }
  uint64_t v4 = a1[2414];
  if (v4)
  {
    int v5 = *(_DWORD *)(v4 + 20) - 1;
    *(_DWORD *)(v4 + 20) = v5;
    if (!v5) {
      gleUnbindAndFreeBufferObject((uint64_t)a1, (void *)v4);
    }
  }
  uint64_t v6 = a1[2415];
  if (v6)
  {
    int v7 = *(_DWORD *)(v6 + 20) - 1;
    *(_DWORD *)(v6 + 20) = v7;
    if (!v7) {
      gleUnbindAndFreeBufferObject((uint64_t)a1, (void *)v6);
    }
  }
  uint64_t v8 = a1[2416];
  if (v8)
  {
    int v9 = *(_DWORD *)(v8 + 20) - 1;
    *(_DWORD *)(v8 + 20) = v9;
    if (!v9) {
      gleUnbindAndFreeBufferObject((uint64_t)a1, (void *)v8);
    }
  }
  uint64_t v10 = a1[2417];
  if (v10)
  {
    int v11 = *(_DWORD *)(v10 + 20) - 1;
    *(_DWORD *)(v10 + 20) = v11;
    if (!v11) {
      gleUnbindAndFreeBufferObject((uint64_t)a1, (void *)v10);
    }
  }
  uint64_t v12 = a1[2418];
  if (v12)
  {
    int v13 = *(_DWORD *)(v12 + 20) - 1;
    *(_DWORD *)(v12 + 20) = v13;
    if (!v13) {
      gleUnbindAndFreeBufferObject((uint64_t)a1, (void *)v12);
    }
  }
  uint64_t v14 = a1[2419];
  if (v14)
  {
    int v15 = *(_DWORD *)(v14 + 20) - 1;
    *(_DWORD *)(v14 + 20) = v15;
    if (!v15) {
      gleUnbindAndFreeBufferObject((uint64_t)a1, (void *)v14);
    }
  }
  uint64_t v16 = a1[2420];
  if (v16)
  {
    int v17 = *(_DWORD *)(v16 + 20) - 1;
    *(_DWORD *)(v16 + 20) = v17;
    if (!v17) {
      gleUnbindAndFreeBufferObject((uint64_t)a1, (void *)v16);
    }
  }
  uint64_t v18 = a1[2421];
  if (v18)
  {
    int v19 = *(_DWORD *)(v18 + 20) - 1;
    *(_DWORD *)(v18 + 20) = v19;
    if (!v19) {
      gleUnbindAndFreeBufferObject((uint64_t)a1, (void *)v18);
    }
  }
  uint64_t v20 = a1[2422];
  if (v20)
  {
    int v21 = *(_DWORD *)(v20 + 20) - 1;
    *(_DWORD *)(v20 + 20) = v21;
    if (!v21) {
      gleUnbindAndFreeBufferObject((uint64_t)a1, (void *)v20);
    }
  }
  uint64_t v22 = (os_unfair_lock_s *)(a1[2412] + 324);

  os_unfair_lock_unlock(v22);
}

void gleFreePipelineProgramState(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24192);
  if (v2)
  {
    free(v2);
    *(void *)(a1 + 24192) = 0;
  }
  uint64_t v3 = 0;
  uint64_t v4 = (unsigned char *)(a1 + 32496);
  int v5 = (void *)(a1 + 33472);
  do
  {
    uint64_t v6 = a1 + 8 * v3;
    if (*(void *)(v6 + 24600))
    {
      int v7 = (void *)(v6 + 24600);
      cvmHashObjectRelease();
      *(void *)(a1 + 24192 + 8 * v3 + 440) = 0;
      *int v7 = 0;
    }
    uint64_t v8 = *v4;
    if (*v4)
    {
      int v9 = v5;
      do
      {
        *int v9 = 0;
        v9 += 209;
        --v8;
      }
      while (v8);
    }
    ++v3;
    ++v5;
  }
  while (v3 != 4);
  uint64_t v10 = 0;
  int v11 = (void *)(a1 + 33432);
  do
  {
    uint64_t v12 = (void *)(a1 + 8 * v10);
    if (v12[3065])
    {
      if (v12[3070])
      {
        cvmHashObjectRelease();
        v12[3070] = 0;
        int v13 = (void *)(a1 + 8 * v10 + 24480);
      }
      else
      {
        uint64_t v14 = a1 + 8 * v10;
        int v15 = *(void **)(v14 + 24480);
        if (!v15)
        {
LABEL_17:
          cvmDestroyHashMachine();
          v12[3065] = 0;
          goto LABEL_18;
        }
        int v13 = (void *)(v14 + 24480);
        gleDestroyStateProgram(a1, v15);
      }
      *int v13 = 0;
      goto LABEL_17;
    }
LABEL_18:
    uint64_t v16 = v12[3050];
    if (v16 && *(_DWORD *)(v16 + 16))
    {
      os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
      int v17 = *(_DWORD *)(v16 + 20) - 1;
      *(_DWORD *)(v16 + 20) = v17;
      if (v17)
      {
        if (*v4)
        {
          unint64_t v18 = 0;
          uint64_t v19 = v16 + 40;
          uint64_t v20 = (void *)(a1 + 32512);
          do
          {
            (*(void (**)(void, void))(v20[206] + 1648))(*v20, *(void *)(v19 + 8 * v18++));
            v20 += 209;
          }
          while (v18 < *v4);
        }
      }
      else
      {
        gleUnbindAndFreePipelineProgramObject(a1, v16);
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    }
    uint64_t v21 = *(void *)(a1 + 8 * v10 + 24440);
    if (v21) {
      gleUnbindAndFreePipelineProgramObject(a1, v21);
    }
    uint64_t v22 = *v4;
    if (*v4)
    {
      int v23 = v11;
      do
      {
        *int v23 = 0;
        v23 += 209;
        --v22;
      }
      while (v22);
    }
    ++v10;
    ++v11;
  }
  while (v10 != 5);
}

void gleFreePipelineProgramObject(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a2 + 168);
  if (v4)
  {
    free(v4);
    *(void *)(a2 + 168) = 0;
  }
  *(_DWORD *)(a2 + 176) = 0;
  *(void *)(a2 + 440) = 0;
  *(_DWORD *)(a2 + 448) = 0;
  if (*(unsigned char *)(a2 + 466) == 4)
  {
    *(_DWORD *)(a2 + 4412) = 0;
    *(_WORD *)(a2 + 4416) = 0;
  }
  else if (!*(unsigned char *)(a2 + 466) && *(void *)(a2 + 4408))
  {
    MEMORY[0x22A686880]();
    *(void *)(a2 + 4408) = 0;
  }
  if (*(void *)(a2 + 472))
  {
    MEMORY[0x22A686880]();
    *(void *)(a2 + 472) = 0;
  }
  int v5 = *(void **)(a2 + 504);
  if (v5)
  {
    free(v5);
    *(void *)(a2 + 504) = 0;
  }
  free(*(void **)(a2 + 480));
  *(void *)(a2 + 480) = 0;
  free(*(void **)(a2 + 520));
  *(void *)(a2 + 520) = 0;
  free(*(void **)(a2 + 144));
  *(void *)(a2 + 144) = 0;
  if (*(unsigned char *)(a1 + 320))
  {
    unint64_t v6 = 0;
    uint64_t v7 = a2 + 40;
    uint64_t v8 = a1 + 360;
    do
    {
      (*(void (**)(void, void))(*(void *)v8 + 1656))(*(void *)(v8 - 8), *(void *)(v7 + 8 * v6));
      *(void *)(v7 + 8 * v6++) = 0;
      v8 += 32;
    }
    while (v6 < *(unsigned __int8 *)(a1 + 320));
  }

  free((void *)a2);
}

void gleFreeFramebufferState(uint64_t *a1)
{
  uint64_t v2 = a1[3620];
  uint64_t v3 = a1[3621];
  uint64_t v4 = a1[3619];
  if (v2)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1[2412] + 324));
    int v5 = *(_DWORD *)(v2 + 20) - 1;
    *(_DWORD *)(v2 + 20) = v5;
    if (!v5) {
      gleFreeFramebufferObject(a1[2412], (char *)v2);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1[2412] + 324));
  }
  if (v3)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1[2412] + 324));
    int v6 = *(_DWORD *)(v3 + 20) - 1;
    *(_DWORD *)(v3 + 20) = v6;
    if (!v6) {
      gleFreeFramebufferObject(a1[2412], (char *)v3);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1[2412] + 324));
  }
  if (v4)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1[2412] + 324));
    int v7 = *(_DWORD *)(v4 + 20) - 1;
    *(_DWORD *)(v4 + 20) = v7;
    if (!v7) {
      gleUnbindAndFreeTextureObject((uint64_t)a1, v4);
    }
    uint64_t v8 = (os_unfair_lock_s *)(a1[2412] + 324);
    os_unfair_lock_unlock(v8);
  }
}

void gleFreeTextureState(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = a1 + 20776;
  do
  {
    for (uint64_t i = 0; i != 88; i += 8)
    {
      uint64_t v5 = *(void *)(v3 + i);
      if (v5 && *(_DWORD *)(v5 + 16))
      {
        os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
        int v6 = *(_DWORD *)(v5 + 20) - 1;
        *(_DWORD *)(v5 + 20) = v6;
        if (!v6)
        {
          gleUnbindTextureObject(a1, v5);
          gleFreeTextureObject(*(void *)(a1 + 19296), v5);
        }
        os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
      }
    }
    ++v2;
    v3 += 88;
  }
  while (v2 != 32);
  uint64_t v7 = -48;
  do
  {
    uint64_t v8 = *(void **)(a1 + v7 + 18744);
    if (v8)
    {
      free(v8);
      *(void *)(a1 + v7 + 18744) = 0;
    }
    v7 += 16;
  }
  while (v7);
  uint64_t v9 = -88;
  do
  {
    uint64_t v10 = *(void *)(a1 + v9 + 23680);
    if (v10)
    {
      gleUnbindTextureObject(a1, *(void *)(a1 + v9 + 23680));
      gleFreeTextureObject(*(void *)(a1 + 19296), v10);
    }
    uint64_t v11 = *(void *)(a1 + v9 + 23768);
    if (v11)
    {
      gleUnbindTextureObject(a1, *(void *)(a1 + v9 + 23768));
      gleFreeTextureObject(*(void *)(a1 + 19296), v11);
    }
    v9 += 8;
  }
  while (v9);
}

uint64_t gleIterateHashMachineObjects(uint64_t result, uint64_t a2, uint64_t (*a3)(uint64_t, void *))
{
  uint64_t v5 = result;
  uint64_t v6 = 0;
  uint64_t v7 = (*(_DWORD *)(result + 24) + 1);
  do
  {
    for (uint64_t i = *(void **)(*(void *)(v5 + 8) + 8 * v6); i; uint64_t i = (void *)*i)
      double result = a3(a2, i);
    ++v6;
  }
  while (v6 != v7);
  return result;
}

void glDeleteTextures_Exec(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  if ((a2 & 0x80000000) != 0)
  {
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1281;
    }
  }
  else if (a2)
  {
    uint64_t v6 = *(os_unfair_lock_s **)(a1 + 19296);
    uint64_t v7 = (uint64_t)&v6[18];
    os_unfair_lock_lock(v6 + 81);
    uint64_t v8 = 0;
    uint64_t v9 = *(void *)(a1 + 28960);
    BOOL v10 = v9 != 0;
    uint64_t v11 = (uint64_t **)(v9 + 40);
    if (!v9) {
      uint64_t v11 = 0;
    }
    int v29 = v11;
    uint64_t v12 = *(void *)(a1 + 28968);
    uint64_t v31 = *(void *)(a1 + 28960);
    BOOL v13 = v12 != v9 && v12 != 0;
    uint64_t v14 = (uint64_t **)(v12 + 40);
    if (!v13) {
      uint64_t v14 = 0;
    }
    int v28 = v14;
    unsigned int v15 = *a3;
    BOOL v30 = v13;
    BOOL v32 = v10 || v13;
    unint64_t v16 = a2;
    unsigned int v17 = *a3;
    do
    {
      if (a3[v8])
      {
        uint64_t v18 = 0;
        uint64_t v19 = a1 + 20776;
        do
        {
          uint64_t v20 = 0;
          while (*(_DWORD *)(*(void *)(v19 + 8 * v20) + 16) != a3[v8])
          {
            if (++v20 == 11) {
              goto LABEL_15;
            }
          }
          gleBindTexture(a1, v20, 0, v18);
LABEL_15:
          ++v18;
          v19 += 88;
        }
        while (v18 != 32);
        if (v32)
        {
          uint64_t v21 = gleLookupHashObject(v7, a3[v8]);
          if (v21)
          {
            uint64_t v22 = v21;
            if (v31)
            {
              uint64_t v23 = 0;
              uint64_t v24 = v29;
              do
              {
                if (v22 == *v24) {
                  gleFramebufferTexture(a1, *(void *)(a1 + 28960) + 40, v23, 0, 0, 0, 0, 0, 0);
                }
                ++v23;
                v24 += 2;
              }
              while (v23 != 10);
            }
            if (v30)
            {
              uint64_t v25 = 0;
              BOOL v26 = v28;
              do
              {
                if (v22 == *v26) {
                  gleFramebufferTexture(a1, *(void *)(a1 + 28968) + 40, v25, 0, 0, 0, 0, 0, 0);
                }
                ++v25;
                v26 += 2;
              }
              while (v25 != 10);
            }
          }
        }
        if (a3[v8] != v15)
        {
          gleUnbindDeleteHashNamesAndObjects(a1, v7, gleUnbindTextureObject, v17, v15 - v17);
          unsigned int v17 = a3[v8];
          unsigned int v15 = v17;
        }
      }
      else
      {
        gleUnbindDeleteHashNamesAndObjects(a1, v7, gleUnbindTextureObject, v17, v15 - v17);
        if (v8 + 1 >= v16) {
          goto LABEL_34;
        }
        unsigned int v17 = a3[v8 + 1];
        unsigned int v15 = v17 - 1;
      }
      ++v8;
      ++v15;
    }
    while (v8 != v16);
    gleUnbindDeleteHashNamesAndObjects(a1, v7, gleUnbindTextureObject, v17, v15 - v17);
LABEL_34:
    int v27 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
    os_unfair_lock_unlock(v27);
  }
}

uint64_t *gleRemoveHashObject(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = (uint64_t **)(*(void *)(a1 + 8) + 8 * (*(_DWORD *)(a1 + 24) & a2));
  double result = *v3;
  if (*v3)
  {
    while (*((_DWORD *)result + 4) != a2)
    {
      uint64_t v3 = (uint64_t **)result;
      double result = (uint64_t *)*result;
      if (!result) {
        return result;
      }
    }
    --*(_DWORD *)(a1 + 28);
    *uint64_t v3 = (uint64_t *)*result;
  }
  return result;
}

void gleDestroyEnableHashTable(int a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)&gle_enable_hash_table_lock);
  uint64_t v2 = (char *)gle_enable_hash_table[a1];
  if (v2)
  {
    gle_enable_hash_table[a1] = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)&gle_enable_hash_table_lock);
    for (uint64_t i = 16; i != 8208; i += 32)
    {
      uint64_t v4 = *(void **)&v2[i];
      if (v4) {
        gleFreeEnableHashObject(v4);
      }
    }
    free(v2);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)&gle_enable_hash_table_lock);
  }
}

void gleFreeEnableHashObject(void *a1)
{
  if (a1[2]) {
    gleFreeEnableHashObject();
  }

  free(a1);
}

uint64_t glTestObjectAPPLE_Exec(uint64_t a1, int a2, unsigned int a3)
{
  if (a2 > 35337)
  {
    switch(a2)
    {
      case 35338:
        return 1;
      case 35339:
        int v3 = 0;
        return gleTestObject(a1, v3, a3, 1);
      case 36161:
        int v3 = 4;
        return gleTestObject(a1, v3, a3, 1);
    }
  }
  else
  {
    switch(a2)
    {
      case 5890:
        int v3 = 1;
        return gleTestObject(a1, v3, a3, 1);
      case 32884:
        int v3 = 2;
        return gleTestObject(a1, v3, a3, 1);
      case 34227:
        int v3 = 3;
        return gleTestObject(a1, v3, a3, 1);
    }
  }
  uint64_t v5 = (_WORD *)(a1 + 29832);
  if (*(_WORD *)(a1 + 29832)) {
    return 0;
  }
  uint64_t result = 0;
  *uint64_t v5 = 1280;
  return result;
}

unint64_t gleTestObject(uint64_t a1, int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = a1 + 29832;
  switch(a2)
  {
    case 0:
      unint64_t result = (unint64_t)gleLookupHashObject(a1 + 25872, a3);
      if (!result) {
        goto LABEL_43;
      }
      unsigned int v8 = *(unsigned __int8 *)(v6 + 2664);
      if (!*(unsigned char *)(v6 + 2664)) {
        return 1;
      }
      unint64_t v9 = 0;
      BOOL v10 = (uint64_t *)(result + 40);
      uint64_t v11 = (void *)(a1 + 32512);
      LOBYTE(result) = 1;
      do
      {
        if ((_BYTE)result)
        {
          unint64_t result = (*(unsigned int (**)(void, void, void, uint64_t, uint64_t))(v11[206] + 1320))(*v11, 0, 0, a4, v10[v9]) != 0;
          unsigned int v8 = *(unsigned __int8 *)(v6 + 2664);
        }
        else
        {
          unint64_t result = 0;
        }
        ++v9;
        v11 += 209;
      }
      while (v9 < v8);
      return result;
    case 1:
      unint64_t result = (unint64_t)gleLookupHashObject(*(void *)(a1 + 19296) + 72, a3);
      if (!result) {
        goto LABEL_43;
      }
      unsigned int v12 = *(unsigned __int8 *)(v6 + 2664);
      if (!*(unsigned char *)(v6 + 2664)) {
        return 1;
      }
      unint64_t v13 = 0;
      uint64_t v14 = (uint64_t *)(result + 40);
      unsigned int v15 = (void *)(a1 + 32512);
      LOBYTE(result) = 1;
      do
      {
        if ((_BYTE)result)
        {
          unint64_t result = (*(unsigned int (**)(void, uint64_t, void, uint64_t, uint64_t))(v15[206] + 1320))(*v15, 1, 0, a4, v14[v13]) != 0;
          unsigned int v12 = *(unsigned __int8 *)(v6 + 2664);
        }
        else
        {
          unint64_t result = 0;
        }
        ++v13;
        v15 += 209;
      }
      while (v13 < v12);
      return result;
    case 2:
      unint64_t result = (unint64_t)gleLookupHashObject(a1 + 26352, a3);
      if (!result) {
        goto LABEL_43;
      }
      unsigned int v16 = *(unsigned __int8 *)(v6 + 2664);
      if (!*(unsigned char *)(v6 + 2664)) {
        return 1;
      }
      unint64_t v17 = 0;
      uint64_t v18 = (uint64_t *)(result + 40);
      uint64_t v19 = (void *)(a1 + 32512);
      LOBYTE(result) = 1;
      do
      {
        if ((_BYTE)result)
        {
          unint64_t result = (*(unsigned int (**)(void, uint64_t, void, uint64_t, uint64_t))(v19[206] + 1320))(*v19, 2, 0, a4, v18[v17]) != 0;
          unsigned int v16 = *(unsigned __int8 *)(v6 + 2664);
        }
        else
        {
          unint64_t result = 0;
        }
        ++v17;
        v19 += 209;
      }
      while (v17 < v16);
      return result;
    case 3:
      unint64_t result = (unint64_t)gleLookupHashObject(*(void *)(a1 + 19296) + 264, a3);
      if (!result) {
        goto LABEL_43;
      }
      unsigned int v20 = *(unsigned __int8 *)(v6 + 2664);
      if (!*(unsigned char *)(v6 + 2664)) {
        return 1;
      }
      unint64_t v21 = 0;
      uint64_t v22 = (uint64_t *)(result + 40);
      uint64_t v23 = (void *)(a1 + 32512);
      LOBYTE(result) = 1;
      do
      {
        if ((_BYTE)result)
        {
          unint64_t result = (*(unsigned int (**)(void, uint64_t, void, uint64_t, uint64_t))(v23[206] + 1320))(*v23, 3, 0, a4, v22[v21]) != 0;
          unsigned int v20 = *(unsigned __int8 *)(v6 + 2664);
        }
        else
        {
          unint64_t result = 0;
        }
        ++v21;
        v23 += 209;
      }
      while (v21 < v20);
      return result;
    case 4:
      unint64_t result = (unint64_t)gleLookupHashObject(*(void *)(a1 + 19296) + 40, a3);
      if (!result)
      {
LABEL_43:
        if (!*(_WORD *)v6) {
          *(_WORD *)uint64_t v6 = 1282;
        }
        return 1;
      }
      unsigned int v24 = *(unsigned __int8 *)(v6 + 2664);
      if (!*(unsigned char *)(v6 + 2664)) {
        return 1;
      }
      unint64_t v25 = 0;
      BOOL v26 = (uint64_t *)(result + 40);
      int v27 = (void *)(a1 + 32512);
      LOBYTE(result) = 1;
      do
      {
        if ((_BYTE)result)
        {
          unint64_t result = (*(unsigned int (**)(void, uint64_t, void, uint64_t, uint64_t))(v27[206] + 1320))(*v27, 1, 0, a4, v26[v25]) != 0;
          unsigned int v24 = *(unsigned __int8 *)(v6 + 2664);
        }
        else
        {
          unint64_t result = 0;
        }
        ++v25;
        v27 += 209;
      }
      while (v25 < v24);
      return result;
    default:
      return 1;
  }
}

int8x8_t glFrustum_Exec(uint64_t a1, int8x8_t result, double a3, double a4, double a5, double a6, double a7)
{
  uint64_t v7 = (__int16 *)(a1 + 29832);
  if (*(int *)(a1 + 20484) < 24)
  {
    if (a6 <= 0.0 || a7 <= 0.0) {
      goto LABEL_15;
    }
    float v9 = a3 - *(double *)&result;
    float v10 = -v9;
    if (v9 >= 0.0) {
      float v10 = a3 - *(double *)&result;
    }
    if (v10 < 0.000005) {
      goto LABEL_15;
    }
    float v11 = a5 - a4;
    float v12 = -v11;
    if (v11 >= 0.0) {
      float v12 = a5 - a4;
    }
    if (v12 < 0.000005) {
      goto LABEL_15;
    }
    float v13 = a6 - a7;
    float v14 = -v13;
    if (v13 >= 0.0) {
      float v14 = a6 - a7;
    }
    if (v14 >= 0.000005)
    {
      unsigned int v15 = *(float32x4_t **)(a1 + 19976);
      float v16 = 1.0 / v9;
      float v17 = 1.0 / v11;
      float v18 = 1.0 / v13;
      float v19 = a6 + a6;
      float v20 = v16 * v19;
      float v21 = (*(double *)&result + a3) * v16;
      float v22 = (a4 + a5) * v17;
      float v23 = (a6 + a7) * v18;
      float v24 = v19 * a7 * v18;
      float32x4_t v26 = *v15;
      float32x4_t v25 = v15[1];
      float32x4_t v27 = vmulq_n_f32(v25, v17 * v19);
      float32x4_t v28 = v15[2];
      v15[2] = vsubq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v25, v22), *v15, v21), v28, v23), v15[3]);
      v15[3] = vmulq_n_f32(v28, v24);
      *unsigned int v15 = vmulq_n_f32(v26, v20);
      v15[1] = v27;
      LODWORD(v15) = *(_DWORD *)(a1 + 20488);
      *(_DWORD *)(a1 + 1528) |= v15;
      *(_DWORD *)(a1 + 28652) = 0;
      unint64_t result = vorr_s8(*(int8x8_t *)(a1 + 1540), (int8x8_t)vdup_n_s32(v15));
      *(double *)(a1 + 1540) = *(double *)&result;
    }
    else
    {
LABEL_15:
      if (!*v7)
      {
        __int16 v8 = 1281;
        goto LABEL_18;
      }
    }
  }
  else if (!*v7)
  {
    __int16 v8 = 1282;
LABEL_18:
    *uint64_t v7 = v8;
  }
  return result;
}

_DWORD *gleSetEnable_TEXTURE_2D(_DWORD *result, uint64_t a2, int a3)
{
  unsigned int v3 = *((unsigned __int16 *)result + 11884);
  if (v3 >= 8)
  {
    if (!*((_WORD *)result + 14916)) {
      *((_WORD *)result + 14916) = 1282;
    }
  }
  else
  {
    uint64_t v4 = &result[19 * *((unsigned __int16 *)result + 11884)];
    int v5 = v4[3921];
    unsigned int v6 = v5 & 0xFFFFFFF7 | (8 * a3);
    if (v5 != v6)
    {
      v4[3921] = v6;
      return gleUpdateTextureParams(result, v3);
    }
  }
  return result;
}

uint64_t glTexEnvf_Exec(uint64_t result, int a2, int a3, double a4)
{
  uint64_t v4 = *(unsigned __int16 *)(result + 23768);
  if (a2 == 8960)
  {
    if (v4 >= 8) {
      goto LABEL_10;
    }
    if (a3 > 34161)
    {
      switch(a3)
      {
        case 34176:
          int v8 = (int)*(float *)&a4;
          if (((int)*(float *)&a4 - 34166) >= 3 && v8 != 5890) {
            goto LABEL_126;
          }
          uint64_t v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
          uint64_t v11 = 15696;
          goto LABEL_124;
        case 34177:
          int v8 = (int)*(float *)&a4;
          if (((int)*(float *)&a4 - 34166) >= 3 && v8 != 5890) {
            goto LABEL_126;
          }
          uint64_t v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
          uint64_t v11 = 15698;
          goto LABEL_124;
        case 34178:
          int v8 = (int)*(float *)&a4;
          if (((int)*(float *)&a4 - 34166) >= 3 && v8 != 5890) {
            goto LABEL_126;
          }
          uint64_t v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
          uint64_t v11 = 15700;
          goto LABEL_124;
        case 34179:
        case 34180:
        case 34181:
        case 34182:
        case 34183:
        case 34187:
        case 34188:
        case 34189:
        case 34190:
        case 34191:
        case 34195:
        case 34196:
        case 34197:
        case 34198:
        case 34199:
          goto LABEL_126;
        case 34184:
          int v8 = (int)*(float *)&a4;
          if (((int)*(float *)&a4 - 34166) >= 3 && v8 != 5890) {
            goto LABEL_126;
          }
          uint64_t v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
          uint64_t v11 = 15702;
          goto LABEL_124;
        case 34185:
          int v8 = (int)*(float *)&a4;
          if (((int)*(float *)&a4 - 34166) >= 3 && v8 != 5890) {
            goto LABEL_126;
          }
          uint64_t v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
          uint64_t v11 = 15704;
          goto LABEL_124;
        case 34186:
          int v8 = (int)*(float *)&a4;
          if (((int)*(float *)&a4 - 34166) >= 3 && v8 != 5890) {
            goto LABEL_126;
          }
          uint64_t v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
          uint64_t v11 = 15706;
          goto LABEL_124;
        case 34192:
          int v8 = (int)*(float *)&a4;
          if (((int)*(float *)&a4 & 0xFFFFFFFC) != 0x300) {
            goto LABEL_126;
          }
          uint64_t v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
          uint64_t v11 = 15708;
          goto LABEL_124;
        case 34193:
          int v8 = (int)*(float *)&a4;
          if (((int)*(float *)&a4 & 0xFFFFFFFC) != 0x300) {
            goto LABEL_126;
          }
          uint64_t v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
          uint64_t v11 = 15710;
          goto LABEL_124;
        case 34194:
          int v8 = (int)*(float *)&a4;
          if (((int)*(float *)&a4 & 0xFFFFFFFC) != 0x300) {
            goto LABEL_126;
          }
          uint64_t v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
          uint64_t v11 = 15712;
          goto LABEL_124;
        case 34200:
          int v8 = (int)*(float *)&a4;
          if (((int)*(float *)&a4 & 0xFFFFFFFE) != 0x302) {
            goto LABEL_126;
          }
          uint64_t v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
          uint64_t v11 = 15714;
          goto LABEL_124;
        case 34201:
          int v8 = (int)*(float *)&a4;
          if (((int)*(float *)&a4 & 0xFFFFFFFE) != 0x302) {
            goto LABEL_126;
          }
          uint64_t v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
          uint64_t v11 = 15716;
          goto LABEL_124;
        case 34202:
          int v8 = (int)*(float *)&a4;
          if (((int)*(float *)&a4 & 0xFFFFFFFE) != 0x302) {
            goto LABEL_126;
          }
          uint64_t v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
          uint64_t v11 = 15718;
          goto LABEL_124;
        default:
          if (a3 != 34162)
          {
            if (a3 != 34163) {
              goto LABEL_126;
            }
            if (*(float *)&a4 == 4.0 || *(float *)&a4 == 1.0 || *(float *)&a4 == 2.0)
            {
              *(_DWORD *)(result + 76 * *(unsigned __int16 *)(result + 23768) + 15720) = LODWORD(a4);
              goto LABEL_125;
            }
            goto LABEL_61;
          }
          int v8 = (int)*(float *)&a4;
          if ((int)*(float *)&a4 > 34022)
          {
            if ((v8 - 34164) >= 2)
            {
              int v26 = 34023;
LABEL_122:
              if (v8 != v26) {
                goto LABEL_126;
              }
            }
          }
          else if (v8 != 260 && v8 != 7681)
          {
            int v26 = 8448;
            goto LABEL_122;
          }
          uint64_t v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
          uint64_t v11 = 15694;
          goto LABEL_124;
      }
    }
    if (a3 == 3356)
    {
      if (*(float *)&a4 != 4.0 && *(float *)&a4 != 1.0 && *(float *)&a4 != 2.0)
      {
LABEL_61:
        if (!*(_WORD *)(result + 29832)) {
          *(_WORD *)(result + 29832) = 1281;
        }
        goto LABEL_125;
      }
      *(_DWORD *)(result + 76 * *(unsigned __int16 *)(result + 23768) + 15724) = LODWORD(a4);
LABEL_125:
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1548) |= 0x20000u;
      return result;
    }
    if (a3 == 8704)
    {
      int v8 = *(float *)&a4;
      if ((int)*(float *)&a4 > 8447)
      {
        if ((v8 - 8448) >= 2 && v8 != 34160) {
          goto LABEL_126;
        }
      }
      else if (v8 != 260 && v8 != 3042 && v8 != 7681)
      {
        goto LABEL_126;
      }
      uint64_t v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
      uint64_t v11 = 15688;
      goto LABEL_124;
    }
    if (a3 != 34161) {
      goto LABEL_126;
    }
    int v8 = (int)*(float *)&a4;
    if ((int)*(float *)&a4 > 34022)
    {
      if ((v8 - 34164) >= 2 && (v8 - 34478) >= 2)
      {
        int v18 = 34023;
LABEL_108:
        if (v8 != v18) {
          goto LABEL_126;
        }
      }
    }
    else if (v8 != 260 && v8 != 7681)
    {
      int v18 = 8448;
      goto LABEL_108;
    }
    uint64_t v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
    uint64_t v11 = 15692;
LABEL_124:
    *(_WORD *)(v10 + v11) = v8;
    goto LABEL_125;
  }
  if (a2 != 34048)
  {
    if (a2 == 34913 && a3 == 34914)
    {
      if (v4 < 8)
      {
        if (*(float *)&a4 < 2)
        {
          int v5 = 1 << v4;
          if (*(float *)&a4 == 1) {
            int v6 = *(_DWORD *)(result + 15384) | v5;
          }
          else {
            int v6 = *(_DWORD *)(result + 15384) & ~v5;
          }
          *(_DWORD *)(result + 15384) = v6;
          *(_DWORD *)(result + 28652) = 0;
          *(_DWORD *)(result + 1520) |= 0x400000u;
          return result;
        }
        goto LABEL_126;
      }
LABEL_10:
      if (*(_WORD *)(result + 29832)) {
        return result;
      }
      __int16 v7 = 1282;
      goto LABEL_129;
    }
LABEL_126:
    if (*(_WORD *)(result + 29832)) {
      return result;
    }
    __int16 v7 = 1280;
LABEL_129:
    *(_WORD *)(result + 29832) = v7;
    return result;
  }
  if (a3 != 34049) {
    goto LABEL_126;
  }
  *(_DWORD *)(result + 2272 + 4 * v4 + 13988) = LODWORD(a4);
  *(int32x4_t *)(result + 2272 + 76 * v4 + 13396) = vdupq_lane_s32(*(int32x2_t *)&a4, 0);
  if ((*(_WORD *)(*(void *)(result + 29032) + 26) & 0x2000) != 0)
  {
    uint64_t v12 = *(void *)(result + 19248);
    if (v12)
    {
      unint64_t v13 = *(unsigned __int16 *)(v12 + 2 * v4 + 3752);
      if (v13 <= 0x3FF)
      {
        *(_DWORD *)(result + ((v13 >> 3) & 0x1FFC) + 1552) |= 1 << v13;
        *(_DWORD *)(result + 28652) = 0;
        *(_DWORD *)(result + 1532) |= 0x800000u;
      }
    }
    uint64_t v14 = *(void *)(result + 19272);
    if (v14)
    {
      unint64_t v15 = *(unsigned __int16 *)(v14 + 2 * v4 + 3752);
      if (v15 <= 0x3FF)
      {
        *(_DWORD *)(result + ((v15 >> 3) & 0x1FFC) + 1936) |= 1 << v15;
        *(_DWORD *)(result + 28652) = 0;
        *(_DWORD *)(result + 1532) |= 0x4000000u;
      }
    }
    uint64_t v16 = *(void *)(result + 19280);
    if (v16)
    {
      unint64_t v17 = *(unsigned __int16 *)(v16 + 2 * v4 + 3752);
      if (v17 <= 0x3FF)
      {
        *(_DWORD *)(result + ((v17 >> 3) & 0x1FFC) + 2064) |= 1 << v17;
        *(_DWORD *)(result + 28652) = 0;
        *(_DWORD *)(result + 1532) |= 0x8000000u;
      }
    }
  }
  else
  {
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1536) |= 0x10000 << (v4 & 7);
  }
  return result;
}

_DWORD *gleSetEnable_BLEND(_DWORD *result, uint64_t a2, int a3)
{
  unsigned int v3 = result + 3780;
  if (a3) {
    int v4 = 255;
  }
  else {
    int v4 = 0;
  }
  if (v4 != *v3)
  {
    *unsigned int v3 = v4;
    result[380] |= 2u;
    result[7163] = 0;
    result[387] |= 0x40000u;
  }
  return result;
}

uint64_t glBlendFunc_Exec(uint64_t result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = (_DWORD *)(result + 28652);
  int v4 = *(_DWORD *)(result + 29812);
  unsigned int v5 = v4 & 0xFFFFFF00;
  if (a2 < 2) {
    goto LABEL_2;
  }
  if ((int)a2 <= 0x8000)
  {
    if (a2 - 770 < 7) {
      goto LABEL_2;
    }
    if (a2 - 768 >= 2) {
      goto LABEL_35;
    }
    goto LABEL_32;
  }
  if (a2 - 32769 < 4)
  {
LABEL_32:
    if (*(unsigned char *)(result + 32501) == 2) {
      goto LABEL_35;
    }
    goto LABEL_2;
  }
  if (a2 - 35065 >= 3 && a2 != 34185) {
    goto LABEL_35;
  }
  unsigned int v5 = v4 | 0xFF;
LABEL_2:
  if (a3 < 2)
  {
LABEL_3:
    if (v4 != v5)
    {
      *(_DWORD *)(result + 29812) = v5;
      *unsigned int v3 = 0;
      *(_DWORD *)(result + 1548) |= 0x80000u;
    }
    unint64_t v6 = 0;
    unint64_t v7 = ((unint64_t)a2 << 32) | ((unint64_t)a3 << 48) | ((unint64_t)a3 << 16) | a2;
    int v8 = (uint64_t *)(result + 15008);
    do
    {
      uint64_t v10 = *v8;
      int v8 = (uint64_t *)((char *)v8 + 12);
      uint64_t v9 = v10;
    }
    while (v10 == v7 && v6++ < 7);
    if (v9 != v7)
    {
      for (uint64_t i = 0; i != 96; i += 12)
        *(void *)(result + 15008 + i) = v7;
      *(unsigned char *)(result + 15121) &= ~1u;
      *(_DWORD *)(result + 1520) |= 2u;
      *unsigned int v3 = 0;
      *(_DWORD *)(result + 1548) |= 0x40000u;
    }
    return result;
  }
  if ((int)a3 <= 0x8000)
  {
    if (a3 - 768 > 8) {
      goto LABEL_35;
    }
    if (((1 << a3) & 0x13F) != 0) {
      goto LABEL_3;
    }
    goto LABEL_34;
  }
  if (a3 - 32769 < 4)
  {
LABEL_34:
    if (*(unsigned char *)(result + 32501) != 2) {
      goto LABEL_3;
    }
    goto LABEL_35;
  }
  if (a3 - 35065 < 3 || a3 == 34185)
  {
    v5 |= 0xFFu;
    goto LABEL_3;
  }
LABEL_35:
  if (!*(_WORD *)(result + 29832)) {
    *(_WORD *)(result + 29832) = 1280;
  }
  return result;
}

uint64_t glGetError_Exec(uint64_t a1)
{
  uint64_t v2 = a1 + 29832;
  uint64_t result = *(unsigned __int16 *)(a1 + 29832);
  *(_WORD *)uint64_t v2 = 0;
  if (!result)
  {
    int v4 = (void *)(a1 + 32512);
    uint64_t v5 = -1;
    while (++v5 < (unint64_t)*(unsigned __int8 *)(v2 + 2664))
    {
      unint64_t v6 = v4 + 209;
      uint64_t result = (*(uint64_t (**)(void))(v4[206] + 1240))(*v4);
      int v4 = v6;
      if (result) {
        return result;
      }
    }
    return 0;
  }
  return result;
}

uint64_t glDisable_Exec(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 19304) + 32 * ((a2 + 7) ^ BYTE1(a2));
  do
  {
    if (*(_DWORD *)v2 == a2) {
      return (*(uint64_t (**)(void))(v2 + 8))();
    }
    uint64_t v2 = *(void *)(v2 + 16);
  }
  while (v2);
  if (!*(_WORD *)(result + 29832)) {
    *(_WORD *)(result + 29832) = 1280;
  }
  return result;
}

unint64_t glClear_Exec(unint64_t result, uint64_t a2, double a3, double a4, double a5)
{
  uint64_t v5 = (_WORD *)(result + 29830);
  if ((a2 & 0xFFFFB8FF) != 0)
  {
    if (!*(_WORD *)(result + 29832)) {
      *(_WORD *)(result + 29832) = 1281;
    }
  }
  else
  {
    uint64_t v6 = a2;
    uint64_t v7 = result;
    unint64_t v8 = result + 17984;
    if ((a2 & 0x200) == 0) {
      goto LABEL_9;
    }
    if (*(unsigned char *)(*(void *)(result + 29480) + 52)
      && !*(unsigned char *)v8
      && !*(void *)(result + 28968)
      && !*(void *)(result + 28960))
    {
      uint64_t result = gleAccumFast(result, 5376, 0.0);
    }
    uint64_t v6 = v6 & 0xFFFFFDFF;
    if (v6)
    {
LABEL_9:
      if ((*(unsigned char *)(v7 + 1540) & 4) != 0)
      {
        uint64_t result = gleGenerateMatrixIdentifier(v7, v7 + 9488, a3, a4, a5);
        *(_DWORD *)(v8 + 1168) = *(_DWORD *)(v8 + 1168) & 0xFFFFFEFF | ((result != -1074791426) << 8);
        *(_DWORD *)(v8 + 11748) = result;
      }
      if ((*(_DWORD *)(v8 + 11816) & 0x743C0478) != 0)
      {
        uint64_t result = gleUpdateDrawFramebufferState(v7, a3, a4, a5);
        if (result)
        {
          if (result != 16711680 && !v5[1]) {
            v5[1] = result;
          }
          return result;
        }
      }
      if (*v5 != 7168 || *(unsigned char *)v8) {
        return result;
      }
      uint64_t v9 = (_WORD *)(v7 + 15342);
      if (*(unsigned char *)(*(void *)(v7 + 29480) + 110))
      {
        int v10 = *v9 & 0xFBFF;
        if ((v6 & 0x4000) == 0) {
          int v10 = *v9 & 0xFB00;
        }
        if ((v6 & 0x100) == 0) {
          v10 &= 0xFEFFu;
        }
        if ((v6 & 0x400) != 0)
        {
          if ((v10 & 0x200) != 0)
          {
LABEL_45:
            uint64_t result = (*(uint64_t (**)(void))(*(void *)(v7 + 29496) + 208))(*(void *)(v7 + 29464));
LABEL_46:
            int v11 = *(_DWORD *)(*(void *)(v7 + 19296) + 316);
            if (*(_DWORD *)(v8 + 11832) != v11)
            {
              if (*(void *)(v7 + 28960))
              {
                uint64_t result = gleInvalidateCurrentDrawFramebufferTextures(v7);
                int v11 = *(_DWORD *)(*(void *)(v7 + 19296) + 316);
              }
              *(_DWORD *)(v8 + 11832) = v11;
            }
            return result;
          }
        }
        else
        {
          v10 &= ~0x200u;
        }
        if (!v10) {
          return result;
        }
        goto LABEL_45;
      }
      if ((v6 & 0x4000) != 0)
      {
        if (*(unsigned char *)v9) {
          uint64_t v6 = v6;
        }
        else {
          uint64_t v6 = v6 & 0xFFFFBFFF;
        }
        if ((v6 & 0x100) == 0)
        {
LABEL_24:
          if ((v6 & 0x400) == 0) {
            goto LABEL_43;
          }
LABEL_41:
          if ((*v9 & 0x200) != 0)
          {
LABEL_44:
            uint64_t result = (**(uint64_t (***)(void, uint64_t))(v7 + 29488))(*(void *)(v7 + 29464), v6);
            goto LABEL_46;
          }
          uint64_t v6 = v6 & 0xFFFFFBFF;
LABEL_43:
          if (!v6) {
            return result;
          }
          goto LABEL_44;
        }
      }
      else if ((v6 & 0x100) == 0)
      {
        goto LABEL_24;
      }
      if ((*v9 & 0x100) != 0) {
        uint64_t v6 = v6;
      }
      else {
        uint64_t v6 = v6 & 0xFFFFFEFF;
      }
      if ((v6 & 0x400) == 0) {
        goto LABEL_43;
      }
      goto LABEL_41;
    }
  }
  return result;
}

uint64_t glPushMatrix_Exec(uint64_t result)
{
  uint64_t v1 = (__int16 *)(result + 29832);
  uint64_t v2 = *(int *)(result + 20484);
  if ((int)v2 < 24)
  {
    int v4 = (int *)(result + 4 * v2 + 20000);
    uint64_t v5 = *(void *)(result + 19992);
    int v6 = *(_DWORD *)(v5 + 4 * v2);
    int v7 = *v4;
    if (*v4 >= *(_DWORD *)(v5 + 4 * ((int)v2 + 1)) - v6)
    {
      if (!*v1)
      {
        __int16 v3 = 1283;
        goto LABEL_12;
      }
    }
    else
    {
      int v8 = v6 + v7;
      uint64_t v9 = (_OWORD *)(result + (v2 << 6));
      int v10 = (_OWORD *)(*(void *)(result + 19288) + ((uint64_t)(2 * v8) << 6));
      *int v10 = v9[585];
      v10[1] = v9[586];
      v10[2] = v9[587];
      v10[3] = v9[588];
      int v11 = 1 << v2;
      if ((*(_DWORD *)(result + 1544) & v11) != 0)
      {
        *(_DWORD *)(*(void *)(result + 19288) + (((uint64_t)(2 * v8) << 6) | 0x40)) = 2143289344;
      }
      else
      {
        uint64_t v12 = (_OWORD *)(*(void *)(result + 19288) + (((uint64_t)v8 << 7) | 0x40));
        *uint64_t v12 = v9[681];
        v12[1] = v9[682];
        v12[2] = v9[683];
        v12[3] = v9[684];
        int v13 = 1 << v8;
        if ((*(_DWORD *)(result + 12520) & v11) != 0)
        {
          uint64_t v14 = *(void *)(result + 29520);
          int v15 = v8 >> 5;
          int v16 = *(_DWORD *)(v14 + 4 * v15) | v13;
        }
        else
        {
          uint64_t v14 = *(void *)(result + 29520);
          int v15 = v8 >> 5;
          int v16 = *(_DWORD *)(v14 + 4 * v15) & ~v13;
        }
        *(_DWORD *)(v14 + 4 * v15) = v16;
      }
      *int v4 = v7 + 1;
    }
  }
  else if (!*v1)
  {
    __int16 v3 = 1282;
LABEL_12:
    *uint64_t v1 = v3;
  }
  return result;
}

uint64_t gleModelMatInvert(uint64_t a1)
{
  uint64_t v2 = (_DWORD *)(a1 + 28652);
  *(_DWORD *)(a1 + 1544) &= ~0x10u;
  gleInvertMatrix(a1, 4);
  if (*(unsigned char *)(a1 + 12517))
  {
    uint64_t v6 = 0;
    uint64_t v7 = a1 + 11152;
    *(float *)&double v3 = 1.0
                  / sqrtf((float)((float)(*(float *)(a1 + 11160) * *(float *)(a1 + 11160))+ (float)(*(float *)(a1 + 11176) * *(float *)(a1 + 11176)))+ (float)(*(float *)(a1 + 11192) * *(float *)(a1 + 11192)));
    do
    {
      float32x4_t v4 = vmulq_n_f32(*(float32x4_t *)(v7 + v6), *(float *)&v3);
      *(float32x4_t *)(v7 + v6) = v4;
      v6 += 16;
    }
    while (v6 != 64);
    *(_DWORD *)(a1 + 12512) = LODWORD(v3);
    uint64_t v8 = *(void *)(a1 + 19248);
    if (v8)
    {
      unint64_t v9 = *(unsigned __int16 *)(v8 + 3794);
      if (v9 <= 0x3FF)
      {
        *(_DWORD *)(a1 + ((v9 >> 3) & 0x1FFC) + 1552) |= 1 << v9;
        *uint64_t v2 = 0;
        *(_DWORD *)(a1 + 1532) |= 0x800000u;
      }
    }
    uint64_t v10 = *(void *)(a1 + 19272);
    if (v10)
    {
      unint64_t v11 = *(unsigned __int16 *)(v10 + 3794);
      if (v11 <= 0x3FF)
      {
        *(_DWORD *)(a1 + ((v11 >> 3) & 0x1FFC) + 1936) |= 1 << v11;
        *uint64_t v2 = 0;
        *(_DWORD *)(a1 + 1532) |= 0x4000000u;
      }
    }
    uint64_t v12 = *(void *)(a1 + 19280);
    if (v12)
    {
      unint64_t v13 = *(unsigned __int16 *)(v12 + 3794);
      if (v13 <= 0x3FF)
      {
        *(_DWORD *)(a1 + ((v13 >> 3) & 0x1FFC) + 2064) |= 1 << v13;
        *uint64_t v2 = 0;
        *(_DWORD *)(a1 + 1532) |= 0x8000000u;
      }
    }
  }
  else
  {
    LODWORD(v3) = *(_DWORD *)(a1 + 12512);
    v4.i32[0] = 1.0;
    if (*(float *)&v3 != 1.0)
    {
      uint64_t v14 = *(void *)(a1 + 19248);
      if (v14)
      {
        unint64_t v15 = *(unsigned __int16 *)(v14 + 3794);
        if (v15 <= 0x3FF)
        {
          *(_DWORD *)(a1 + ((v15 >> 3) & 0x1FFC) + 1552) |= 1 << v15;
          *uint64_t v2 = 0;
          *(_DWORD *)(a1 + 1532) |= 0x800000u;
        }
      }
      uint64_t v16 = *(void *)(a1 + 19272);
      if (v16)
      {
        unint64_t v17 = *(unsigned __int16 *)(v16 + 3794);
        if (v17 <= 0x3FF)
        {
          *(_DWORD *)(a1 + ((v17 >> 3) & 0x1FFC) + 1936) |= 1 << v17;
          *uint64_t v2 = 0;
          *(_DWORD *)(a1 + 1532) |= 0x4000000u;
        }
      }
      uint64_t v18 = *(void *)(a1 + 19280);
      if (v18)
      {
        unint64_t v19 = *(unsigned __int16 *)(v18 + 3794);
        if (v19 <= 0x3FF)
        {
          *(_DWORD *)(a1 + ((v19 >> 3) & 0x1FFC) + 2064) |= 1 << v19;
          *uint64_t v2 = 0;
          *(_DWORD *)(a1 + 1532) |= 0x8000000u;
        }
      }
      *(_DWORD *)(a1 + 12512) = 1065353216;
    }
  }
  uint64_t result = gleGenerateMatrixIdentifier(a1, a1 + 11152, v3, *(double *)v4.i64, v5);
  int v21 = v2[269];
  int v22 = v21 & 0x3FCFF3FC;
  BOOL v23 = (v21 & 0x3FCFF3FC) == 1070593020;
  int v24 = (result == -1074791426) ^ (v21 == -1074791426);
  if (v22 != 1070593020) {
    int v24 = 1;
  }
  if ((~result & 0x3FCFF3FC) != 0) {
    int v24 = v23;
  }
  if (v24 == 1)
  {
    *uint64_t v2 = 0;
    *(_DWORD *)(a1 + 1548) |= 0x10010u;
  }
  v2[269] = result;
  return result;
}

uint64_t glPixelZoom_Exec(uint64_t result, float a2, float a3)
{
  *(float *)(result + 18440) = a2;
  *(float *)(result + 18444) = a3;
  *(_DWORD *)(result + 19160) = *(_DWORD *)(result + 19160) & 0xFFFF3FFF | ((a2 != 1.0) << 14) | ((a3 != 1.0) << 15);
  return result;
}

int8x8_t glLoadMatrixf_Exec(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 20484;
  if (*(int *)(a1 + 20484) < 24)
  {
    float32x4_t v4 = (int8x8_t *)(a1 + 1540);
    gleLoadMatrixf(a2, *(void *)(a1 + 19976));
    unsigned int v5 = *(_DWORD *)(v3 + 4);
    *(_DWORD *)(a1 + 1528) |= v5;
    *(_DWORD *)(v3 + 8168) = 0;
    int8x8_t result = vorr_s8(*v4, (int8x8_t)vdup_n_s32(v5));
    *float32x4_t v4 = result;
  }
  else if (!*(_WORD *)(a1 + 29832))
  {
    *(_WORD *)(a1 + 29832) = 1282;
  }
  return result;
}

float gleLoadMatrixf(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a2 = *(_DWORD *)a1;
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a2 + 20) = *(_DWORD *)(a1 + 20);
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(a2 + 44) = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 48);
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(a1 + 52);
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  float result = *(float *)(a1 + 60);
  *(float *)(a2 + 60) = result;
  return result;
}

uint64_t glPopMatrix_Exec(uint64_t result, double a2, double a3, double a4)
{
  float32x4_t v4 = (__int16 *)(result + 29832);
  uint64_t v5 = result + 20484;
  uint64_t v6 = *(int *)(result + 20484);
  if ((int)v6 >= 24)
  {
    if (*v4) {
      return result;
    }
    __int16 v7 = 1282;
LABEL_11:
    *float32x4_t v4 = v7;
    return result;
  }
  uint64_t v8 = result;
  unint64_t v9 = (int *)(result + 4 * v6 + 20000);
  if (*v9 <= 0)
  {
    if (*v4) {
      return result;
    }
    __int16 v7 = 1284;
    goto LABEL_11;
  }
  int v10 = *(_DWORD *)(*(void *)(result + 19992) + 4 * v6);
  int v11 = *v9 - 1;
  *unint64_t v9 = v11;
  int v12 = v10 + v11;
  unint64_t v13 = (_OWORD *)(*(void *)(result + 19288) + ((uint64_t)(2 * v12) << 6));
  uint64_t v14 = (_OWORD *)(result + (v6 << 6));
  v14[585] = *v13;
  v14[586] = v13[1];
  v14[587] = v13[2];
  v14[588] = v13[3];
  int v15 = *(_DWORD *)(result + 20488);
  *(_DWORD *)(result + 1528) |= v15;
  *(_DWORD *)(result + 28652) = 0;
  *(_DWORD *)(result + 1540) |= v15;
  if ((v15 & 0xFFFFFC & *(_DWORD *)(result + 2216)) != 0)
  {
    uint64_t v16 = (_OWORD *)(*(void *)(result + 19288) + (((uint64_t)v12 << 7) | 0x40));
    if (*(_DWORD *)v16 != 2143289344)
    {
      unint64_t v17 = (_OWORD *)(result + (v6 << 6));
      v17[681] = *v16;
      v17[682] = v16[1];
      v17[683] = v16[2];
      long long v18 = v16[3];
      v17[684] = v18;
      int v19 = 1 << v6;
      if ((*(_DWORD *)(*(void *)(result + 29520) + 4 * (v12 >> 5)) >> v12)) {
        int v20 = *(_DWORD *)(result + 12520) | v19;
      }
      else {
        int v20 = *(_DWORD *)(result + 12520) & ~v19;
      }
      *(_DWORD *)(result + 12520) = v20;
      if (v6 == 4)
      {
        float result = gleGenerateMatrixIdentifier(result, result + 11152, *(double *)&v18, a3, a4);
        int v21 = *(_DWORD *)(v5 + 9244);
        int v22 = v21 & 0x3FCFF3FC;
        BOOL v23 = (v21 & 0x3FCFF3FC) == 1070593020;
        int v24 = (result == -1074791426) ^ (v21 == -1074791426);
        if (v22 != 1070593020) {
          int v24 = 1;
        }
        if ((~result & 0x3FCFF3FC) != 0) {
          int v24 = v23;
        }
        if (v24 == 1) {
          *(_DWORD *)(v8 + 1548) |= 0x10010u;
        }
        *(_DWORD *)(v5 + 9244) = result;
      }
      *(_DWORD *)(v8 + 1544) &= ~(v15 & 0xFFFFFC);
      v15 &= 0xFF000003;
    }
  }
  *(_DWORD *)(v5 + 8168) = 0;
  *(_DWORD *)(v8 + 1544) |= v15;
  return result;
}

uint64_t gleTexLevelStorage(uint64_t result, unsigned int a2, unsigned int a3, __int16 *a4, _WORD *a5)
{
  unsigned int v5 = a3 & 0xFFFFFFFE;
  if (a2 == 34233 && v5 == 34234)
  {
    __int16 v6 = -31303;
LABEL_7:
    *a4 = v6;
LABEL_22:
    *a5 = a3;
    return result;
  }
  if (a2 == 35359 && v5 == 34234)
  {
    __int16 v6 = -30177;
    goto LABEL_7;
  }
  BOOL v8 = a2 == 37883 || a2 - 35429 < 2;
  if (a3 == 5121 && v8) {
    goto LABEL_16;
  }
  if (a2 == 37902 && a3 == 5121)
  {
    __int16 v9 = -27634;
LABEL_20:
    *a4 = v9;
    goto LABEL_21;
  }
  BOOL v11 = a2 - 35431 < 0xE || a2 >> 1 == 18942;
  if (a3 == 5121 && v11 || a2 - 37875 <= 5 && a3 == 5121 || a2 - 37903 <= 1 && a3 == 5121)
  {
LABEL_16:
    *a4 = a2;
LABEL_21:
    LOWORD(a3) = 5121;
    goto LABEL_22;
  }
  if ((int)result > 36193)
  {
    if ((int)result <= 37487)
    {
      switch((int)result)
      {
        case 36194:
LABEL_190:
          *a4 = 6407;
          LOWORD(a3) = -31901;
          goto LABEL_22;
        case 36195:
        case 36196:
        case 36197:
        case 36198:
        case 36199:
        case 36200:
        case 36201:
        case 36202:
        case 36203:
        case 36204:
        case 36205:
        case 36206:
        case 36207:
        case 36244:
        case 36245:
        case 36246:
        case 36247:
        case 36248:
        case 36249:
        case 36250:
        case 36251:
        case 36252:
        case 36253:
        case 36254:
        case 36255:
        case 36256:
        case 36257:
        case 36258:
        case 36259:
        case 36260:
        case 36261:
        case 36262:
        case 36263:
        case 36264:
        case 36265:
        case 36266:
        case 36267:
        case 36268:
        case 36269:
        case 36270:
        case 36271:
        case 36272:
        case 36273:
        case 36274:
        case 36275:
        case 36276:
        case 36277:
        case 36278:
        case 36279:
        case 36280:
        case 36281:
        case 36282:
          return result;
        case 36208:
          BOOL v25 = a2 == 32993;
          __int16 v12 = 6408;
          __int16 v26 = -32543;
          goto LABEL_120;
        case 36209:
          BOOL v25 = a2 == 32992;
          __int16 v12 = 6407;
          __int16 v26 = -32544;
LABEL_120:
          if (v25) {
            __int16 v12 = v26;
          }
          goto LABEL_147;
        case 36210:
          __int16 v12 = 6406;
          goto LABEL_147;
        case 36211:
        case 36212:
          __int16 v12 = 6409;
          goto LABEL_147;
        case 36213:
          __int16 v12 = 6410;
          goto LABEL_147;
        case 36214:
LABEL_74:
          BOOL v16 = a2 == 32993;
          __int16 v13 = 6408;
          __int16 v17 = -32543;
          goto LABEL_75;
        case 36215:
LABEL_73:
          BOOL v16 = a2 == 32992;
          __int16 v13 = 6407;
          __int16 v17 = -32544;
LABEL_75:
          if (v16) {
            __int16 v13 = v17;
          }
          goto LABEL_97;
        case 36216:
LABEL_72:
          __int16 v13 = 6406;
          goto LABEL_97;
        case 36217:
        case 36218:
LABEL_47:
          __int16 v13 = 6409;
          goto LABEL_97;
        case 36219:
LABEL_68:
          __int16 v13 = 6410;
LABEL_97:
          *a4 = v13;
LABEL_98:
          LOWORD(a3) = 5123;
          goto LABEL_22;
        case 36220:
LABEL_199:
          BOOL v34 = a2 == 32993;
          __int16 v9 = 6408;
          __int16 v35 = -32543;
          goto LABEL_200;
        case 36221:
LABEL_193:
          BOOL v34 = a2 == 32992;
          __int16 v9 = 6407;
          __int16 v35 = -32544;
LABEL_200:
          if (v34) {
            __int16 v9 = v35;
          }
          goto LABEL_20;
        case 36222:
LABEL_71:
          __int16 v9 = 6406;
          goto LABEL_20;
        case 36223:
        case 36224:
LABEL_61:
          __int16 v9 = 6409;
          goto LABEL_20;
        case 36225:
LABEL_67:
          __int16 v9 = 6410;
          goto LABEL_20;
        case 36226:
          BOOL v27 = a2 == 32993;
          __int16 v18 = 6408;
          __int16 v28 = -32543;
          goto LABEL_127;
        case 36227:
          BOOL v27 = a2 == 32992;
          __int16 v18 = 6407;
          __int16 v28 = -32544;
LABEL_127:
          if (v27) {
            __int16 v18 = v28;
          }
          goto LABEL_145;
        case 36228:
          __int16 v18 = 6406;
          goto LABEL_145;
        case 36229:
        case 36230:
          __int16 v18 = 6409;
          goto LABEL_145;
        case 36231:
          __int16 v18 = 6410;
LABEL_145:
          *a4 = v18;
          LOWORD(a3) = 5124;
          goto LABEL_22;
        case 36232:
LABEL_87:
          BOOL v22 = a2 == 32993;
          __int16 v19 = 6408;
          __int16 v23 = -32543;
          goto LABEL_88;
        case 36233:
LABEL_86:
          BOOL v22 = a2 == 32992;
          __int16 v19 = 6407;
          __int16 v23 = -32544;
LABEL_88:
          if (v22) {
            __int16 v19 = v23;
          }
          goto LABEL_134;
        case 36234:
          __int16 v19 = 6406;
          goto LABEL_134;
        case 36235:
        case 36236:
          __int16 v19 = 6409;
          goto LABEL_134;
        case 36237:
          __int16 v19 = 6410;
LABEL_134:
          *a4 = v19;
          LOWORD(a3) = 5122;
          goto LABEL_22;
        case 36238:
LABEL_82:
          BOOL v20 = a2 == 32993;
          __int16 v15 = 6408;
          __int16 v21 = -32543;
          goto LABEL_83;
        case 36239:
LABEL_81:
          BOOL v20 = a2 == 32992;
          __int16 v15 = 6407;
          __int16 v21 = -32544;
LABEL_83:
          if (v20) {
            __int16 v15 = v21;
          }
          break;
        case 36240:
          __int16 v15 = 6406;
          break;
        case 36241:
        case 36242:
          __int16 v15 = 6409;
          break;
        case 36243:
          __int16 v15 = 6410;
          break;
        case 36283:
        case 36284:
        case 36285:
        case 36286:
          goto LABEL_49;
        default:
          switch((int)result)
          {
            case 36756:
LABEL_58:
              __int16 v15 = 6403;
              goto LABEL_137;
            case 36757:
LABEL_91:
              __int16 v15 = -32217;
              goto LABEL_137;
            case 36758:
              goto LABEL_81;
            case 36759:
              goto LABEL_82;
            case 36760:
LABEL_92:
              __int16 v19 = 6403;
              goto LABEL_134;
            case 36761:
LABEL_93:
              __int16 v19 = -32217;
              goto LABEL_134;
            case 36762:
              goto LABEL_86;
            case 36763:
              goto LABEL_87;
            default:
              if (result != 36975) {
                return result;
              }
LABEL_115:
              if (a3 == 33640 || a3 == 32822) {
                goto LABEL_205;
              }
              *a4 = 6408;
              LOWORD(a3) = -32714;
              break;
          }
          goto LABEL_22;
      }
LABEL_137:
      *a4 = v15;
      LOWORD(a3) = 5120;
      goto LABEL_22;
    }
    switch((int)result)
    {
      case 37793:
        __int16 v9 = -32543;
        goto LABEL_20;
      case 37794:
      case 37795:
      case 37796:
      case 37797:
      case 37798:
      case 37799:
      case 37800:
      case 37801:
      case 37802:
      case 37803:
      case 37804:
      case 37805:
      case 37806:
      case 37807:
      case 37822:
      case 37823:
      case 37824:
      case 37825:
      case 37826:
      case 37827:
      case 37828:
      case 37829:
      case 37830:
      case 37831:
      case 37832:
      case 37833:
      case 37834:
      case 37835:
      case 37836:
      case 37837:
      case 37838:
      case 37839:
      case 37854:
      case 37855:
      case 37856:
      case 37857:
      case 37858:
      case 37859:
      case 37860:
      case 37861:
      case 37862:
      case 37863:
      case 37864:
      case 37865:
      case 37866:
      case 37867:
      case 37868:
      case 37869:
      case 37870:
      case 37871:
      case 37872:
      case 37873:
      case 37882:
        return result;
      case 37808:
      case 37809:
      case 37810:
      case 37811:
      case 37812:
      case 37813:
      case 37814:
      case 37815:
      case 37816:
      case 37817:
      case 37818:
      case 37819:
      case 37820:
      case 37821:
      case 37886:
      case 37887:
      case 37888:
      case 37889:
      case 37890:
      case 37891:
      case 37892:
      case 37893:
      case 37894:
      case 37895:
      case 37896:
      case 37897:
      case 37898:
      case 37899:
      case 37900:
      case 37901:
LABEL_49:
        LOWORD(a3) = 0;
        *a4 = result;
        goto LABEL_22;
      case 37840:
        LOWORD(a3) = 0;
        __int16 v6 = -27728;
        goto LABEL_7;
      case 37841:
        LOWORD(a3) = 0;
        __int16 v6 = -27727;
        goto LABEL_7;
      case 37842:
        LOWORD(a3) = 0;
        __int16 v6 = -27726;
        goto LABEL_7;
      case 37843:
        LOWORD(a3) = 0;
        __int16 v6 = -27725;
        goto LABEL_7;
      case 37844:
        LOWORD(a3) = 0;
        __int16 v6 = -27724;
        goto LABEL_7;
      case 37845:
        LOWORD(a3) = 0;
        __int16 v6 = -27723;
        goto LABEL_7;
      case 37846:
        LOWORD(a3) = 0;
        __int16 v6 = -27722;
        goto LABEL_7;
      case 37847:
        LOWORD(a3) = 0;
        __int16 v6 = -27721;
        goto LABEL_7;
      case 37848:
        LOWORD(a3) = 0;
        __int16 v6 = -27720;
        goto LABEL_7;
      case 37849:
        LOWORD(a3) = 0;
        __int16 v6 = -27719;
        goto LABEL_7;
      case 37850:
        LOWORD(a3) = 0;
        __int16 v6 = -27718;
        goto LABEL_7;
      case 37851:
        LOWORD(a3) = 0;
        __int16 v6 = -27717;
        goto LABEL_7;
      case 37852:
        LOWORD(a3) = 0;
        __int16 v6 = -27716;
        goto LABEL_7;
      case 37853:
        LOWORD(a3) = 0;
        __int16 v6 = -27715;
        goto LABEL_7;
      case 37874:
        *a4 = a2;
        LOWORD(a3) = -31896;
        goto LABEL_22;
      case 37875:
      case 37876:
      case 37877:
      case 37878:
      case 37879:
      case 37880:
      case 37883:
      case 37884:
      case 37885:
      case 37902:
      case 37903:
      case 37904:
        goto LABEL_16;
      case 37881:
        *a4 = a2;
        LOWORD(a3) = -27654;
        goto LABEL_22;
      default:
        switch((int)result)
        {
          case 37488:
          case 37489:
          case 37490:
          case 37491:
          case 37492:
          case 37494:
          case 37496:
            goto LABEL_49;
          case 37493:
            LOWORD(a3) = 0;
            __int16 v6 = -28044;
            goto LABEL_7;
          case 37495:
            LOWORD(a3) = 0;
            __int16 v6 = -28042;
            goto LABEL_7;
          case 37497:
            LOWORD(a3) = 0;
            __int16 v6 = -28040;
            goto LABEL_7;
          default:
            return result;
        }
    }
  }
  else
  {
    if ((int)result <= 34835)
    {
      if ((int)result > 33189)
      {
        switch((int)result)
        {
          case 33321:
          case 33330:
            __int16 v9 = 6403;
            goto LABEL_20;
          case 33322:
          case 33332:
            __int16 v13 = 6403;
            goto LABEL_97;
          case 33323:
          case 33336:
            __int16 v9 = -32217;
            goto LABEL_20;
          case 33324:
          case 33338:
            __int16 v13 = -32217;
            goto LABEL_97;
          case 33325:
            __int16 v24 = 6403;
            goto LABEL_180;
          case 33326:
            __int16 v14 = 6403;
            goto LABEL_183;
          case 33327:
            __int16 v24 = -32217;
LABEL_180:
            *a4 = v24;
            LOWORD(a3) = 5131;
            goto LABEL_22;
          case 33328:
            __int16 v14 = -32217;
            goto LABEL_183;
          case 33329:
            goto LABEL_58;
          case 33331:
            goto LABEL_92;
          case 33333:
            __int16 v18 = 6403;
            goto LABEL_145;
          case 33334:
            __int16 v12 = 6403;
            break;
          case 33335:
            goto LABEL_91;
          case 33337:
            goto LABEL_93;
          case 33339:
            __int16 v18 = -32217;
            goto LABEL_145;
          case 33340:
            __int16 v12 = -32217;
            break;
          default:
            if ((result - 33776) < 4) {
              goto LABEL_49;
            }
            if ((result - 33190) >= 2) {
              return result;
            }
            __int16 v12 = 6402;
            break;
        }
LABEL_147:
        *a4 = v12;
        LOWORD(a3) = 5125;
      }
      else
      {
        switch((int)result)
        {
          case 32827:
          case 32828:
            goto LABEL_71;
          case 32829:
          case 32830:
            goto LABEL_72;
          case 32831:
          case 32832:
          case 32842:
          case 32843:
            goto LABEL_61;
          case 32833:
          case 32834:
          case 32844:
          case 32845:
            goto LABEL_47;
          case 32835:
          case 32836:
          case 32837:
            goto LABEL_67;
          case 32838:
          case 32839:
          case 32840:
            goto LABEL_68;
          case 32841:
          case 32846:
            return result;
          case 32847:
            if (a3 - 33635 < 4 || a3 - 32819 <= 1) {
              break;
            }
            goto LABEL_113;
          case 32848:
            if ((a3 - 33635 > 3 || a3 == 33637) && a3 != 32820) {
              goto LABEL_190;
            }
            break;
          case 32849:
            if (a3 - 33639 >= 2 && a3 - 32821 > 1) {
              goto LABEL_193;
            }
            break;
          case 32850:
          case 32857:
            goto LABEL_115;
          case 32851:
          case 32852:
            goto LABEL_73;
          case 32853:
          case 32854:
            if (a3 == 33637 || a3 == 32819) {
              break;
            }
LABEL_113:
            *a4 = 6408;
            LOWORD(a3) = -32717;
            goto LABEL_22;
          case 32855:
            if (a3 == 33638 || a3 == 32820) {
              break;
            }
            *a4 = 6408;
            LOWORD(a3) = -32716;
            goto LABEL_22;
          case 32856:
            if (a3 != 33639 && a3 != 32821) {
              goto LABEL_199;
            }
            break;
          case 32858:
          case 32859:
            goto LABEL_74;
          default:
            if (result != 10768)
            {
              if (result != 33189) {
                return result;
              }
              *a4 = 6402;
              if (a3 >> 2 == 1280) {
                LOWORD(a3) = 5123;
              }
              else {
                LOWORD(a3) = 5125;
              }
              goto LABEL_22;
            }
            if (a3 != 33634 && a3 != 32818)
            {
              *a4 = 6407;
              LOWORD(a3) = -32718;
              goto LABEL_22;
            }
            break;
        }
LABEL_205:
        *a4 = a2;
      }
      goto LABEL_22;
    }
    if ((int)result <= 35839)
    {
      if ((int)result > 35407)
      {
        switch((int)result)
        {
          case 35408:
            __int16 v29 = -31303;
            goto LABEL_150;
          case 35409:
            __int16 v29 = -30177;
LABEL_150:
            *a4 = v29;
            if (a3 == 34235) {
              LOWORD(a3) = -31301;
            }
            else {
              LOWORD(a3) = -31302;
            }
            goto LABEL_22;
          case 35412:
            LOWORD(a3) = 0;
            __int16 v6 = -29695;
            goto LABEL_7;
          case 35413:
            LOWORD(a3) = 0;
            __int16 v6 = -29696;
            goto LABEL_7;
          case 35414:
            LOWORD(a3) = 0;
            __int16 v6 = -29693;
            goto LABEL_7;
          case 35415:
            LOWORD(a3) = 0;
            __int16 v6 = -29694;
            goto LABEL_7;
          case 35420:
          case 35421:
            goto LABEL_49;
          case 35422:
            LOWORD(a3) = 0;
            __int16 v6 = -30116;
            goto LABEL_7;
          case 35423:
            LOWORD(a3) = 0;
            __int16 v6 = -30115;
            goto LABEL_7;
          case 35429:
          case 35430:
          case 35431:
          case 35432:
          case 35433:
          case 35434:
          case 35435:
          case 35436:
          case 35437:
          case 35438:
          case 35439:
          case 35440:
          case 35441:
          case 35442:
          case 35443:
          case 35444:
            goto LABEL_16;
          case 35446:
          case 35447:
            *a4 = a2;
            goto LABEL_98;
          default:
            return result;
        }
      }
      switch((int)result)
      {
        case 34836:
          BOOL v30 = a2 == 32993;
          __int16 v14 = 6408;
          __int16 v31 = -32543;
          goto LABEL_168;
        case 34837:
          BOOL v30 = a2 == 32992;
          __int16 v14 = 6407;
          __int16 v31 = -32544;
LABEL_168:
          if (v30) {
            __int16 v14 = v31;
          }
          goto LABEL_183;
        case 34838:
          __int16 v14 = 6406;
          goto LABEL_183;
        case 34839:
        case 34840:
          __int16 v14 = 6409;
          goto LABEL_183;
        case 34841:
          __int16 v14 = 6410;
          goto LABEL_183;
        case 34842:
          BOOL v32 = a2 == 32993;
          __int16 v24 = 6408;
          __int16 v33 = -32543;
          goto LABEL_175;
        case 34843:
          BOOL v32 = a2 == 32992;
          __int16 v24 = 6407;
          __int16 v33 = -32544;
LABEL_175:
          if (v32) {
            __int16 v24 = v33;
          }
          goto LABEL_180;
        case 34844:
          __int16 v24 = 6406;
          goto LABEL_180;
        case 34845:
        case 34846:
          __int16 v24 = 6409;
          goto LABEL_180;
        case 34847:
          __int16 v24 = 6410;
          goto LABEL_180;
        default:
          __int16 v6 = -30665;
          if (result == 34871)
          {
            LOWORD(a3) = 0;
            goto LABEL_7;
          }
          if (result != 35056) {
            return result;
          }
          *a4 = -31495;
          LOWORD(a3) = -31494;
          break;
      }
      goto LABEL_22;
    }
    if ((int)result > 36011)
    {
      if ((result - 36166) < 4)
      {
        __int16 v9 = 6401;
        goto LABEL_20;
      }
      if (result == 36012)
      {
        __int16 v14 = 6402;
LABEL_183:
        *a4 = v14;
        LOWORD(a3) = 5126;
        goto LABEL_22;
      }
      if (result == 36013)
      {
        *a4 = -31495;
        LOWORD(a3) = -29267;
        goto LABEL_22;
      }
    }
    else
    {
      switch((int)result)
      {
        case 35898:
          *a4 = 6407;
          LOWORD(a3) = -29637;
          goto LABEL_22;
        case 35899:
        case 35900:
        case 35902:
        case 35903:
        case 35904:
        case 35906:
        case 35908:
        case 35910:
        case 35912:
        case 35913:
        case 35914:
        case 35915:
          return result;
        case 35901:
          *a4 = 6407;
          LOWORD(a3) = -29634;
          goto LABEL_22;
        case 35905:
          __int16 v9 = 6407;
          goto LABEL_20;
        case 35907:
          __int16 v9 = 6408;
          goto LABEL_20;
        case 35909:
          goto LABEL_67;
        case 35911:
          goto LABEL_61;
        case 35916:
          LOWORD(a3) = 0;
          __int16 v6 = -31760;
          goto LABEL_7;
        case 35917:
          LOWORD(a3) = 0;
          __int16 v6 = -31759;
          goto LABEL_7;
        case 35918:
          LOWORD(a3) = 0;
          __int16 v6 = -31758;
          goto LABEL_7;
        case 35919:
          LOWORD(a3) = 0;
          __int16 v6 = -31757;
          goto LABEL_7;
        default:
          if ((result - 35840) < 4) {
            goto LABEL_49;
          }
          break;
      }
    }
  }
  return result;
}

uint64_t glGetTexLevelParameteriv_Exec(int8x16_t *a1, int a2, uint64_t a3, int a4, int *a5)
{
  int v10 = &a1[1864].i8[8];
  uint64_t result = gleLookUpTexture((uint64_t)a1, a2);
  if (!result) {
    goto LABEL_90;
  }
  if (a3 >= 0xF
    || (uint64_t v15 = result, v16 = *(unsigned __int16 *)(result + 768), v17 = v16 & 0xF, a3)
    && (v17 <= 9 ? (BOOL v18 = ((1 << v17) & 0x384) == 0) : (BOOL v18 = 1), !v18))
  {
    if (!*(_WORD *)v10)
    {
      __int16 v19 = 1281;
LABEL_92:
      *(_WORD *)int v10 = v19;
      return result;
    }
    return result;
  }
  int v20 = 0;
  int v43 = 0;
  if ((a2 - 34069) >= 6) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = (a2 - 34069);
  }
  LODWORD(v22) = 1;
  if (a4 <= 34464)
  {
    if (a4 > 32859)
    {
      switch(a4)
      {
        case 32860:
          if (v17 != 7) {
            goto LABEL_65;
          }
          uint64_t v23 = *(void *)(result + 528);
          if (v23 && *(void *)(v23 + 152))
          {
            uint64_t v24 = v21;
            uint64_t result = gleInternalFormatFromSizedEnum(*(unsigned __int16 *)(result + 960));
            uint64_t v21 = v24;
            int v25 = 0;
            int v20 = (((result >> 14) & 0x3F) + ((32 * (int)result) >> 31)) & ((8 * (int)result) >> 31);
            int v43 = v20;
          }
          else
          {
            int v20 = 0;
            int v25 = 0;
            int v43 = 0;
          }
          goto LABEL_134;
        case 32861:
          if (v17 != 7) {
            goto LABEL_65;
          }
          uint64_t v29 = *(void *)(result + 528);
          if (v29 && *(void *)(v29 + 152))
          {
            uint64_t v30 = v21;
            uint64_t result = gleInternalFormatFromSizedEnum(*(unsigned __int16 *)(result + 960));
            uint64_t v21 = v30;
            int v25 = 0;
            int v20 = (result >> 14) & ((4 * (int)result) >> 31) & 0x3F;
            int v43 = v20;
          }
          else
          {
            int v20 = 0;
            int v25 = 0;
            int v43 = 0;
          }
          goto LABEL_134;
        case 32862:
          if (v17 != 7) {
            goto LABEL_65;
          }
          uint64_t v31 = *(void *)(result + 528);
          if (v31 && *(void *)(v31 + 152))
          {
            uint64_t v32 = v21;
            uint64_t result = gleInternalFormatFromSizedEnum(*(unsigned __int16 *)(result + 960));
            uint64_t v21 = v32;
            int v25 = 0;
            int v20 = (((result >> 14) & 0x3F) + ((16 * (int)result) >> 31)) & ((2 * (int)result) >> 31);
            int v43 = v20;
          }
          else
          {
            int v20 = 0;
            int v25 = 0;
            int v43 = 0;
          }
          goto LABEL_134;
        case 32863:
          if (v17 != 7) {
            goto LABEL_65;
          }
          uint64_t v33 = *(void *)(result + 528);
          if (v33 && *(void *)(v33 + 152))
          {
            uint64_t v34 = v21;
            uint64_t result = gleInternalFormatFromSizedEnum(*(unsigned __int16 *)(result + 960));
            uint64_t v21 = v34;
            int v25 = 0;
            int v20 = (result >> 20) & 0x3F;
            int v43 = v20;
          }
          else
          {
            int v20 = 0;
            int v25 = 0;
            int v43 = 0;
          }
          goto LABEL_134;
        default:
          if (a4 == 32881)
          {
            int v25 = (v16 >> 8) & 1;
            if (v17 == 7)
            {
              uint64_t v38 = *(void *)(result + 528);
              if (v38) {
                int v20 = *(void *)(v38 + 152) != 0;
              }
              else {
                int v20 = 0;
              }
            }
            else
            {
              int v20 = *(unsigned __int16 *)(result + 480 * v21 + 32 * a3 + 1040);
            }
            int v43 = v20;
            goto LABEL_134;
          }
          int v25 = 0;
          if (a4 != 34464) {
            goto LABEL_72;
          }
          if ((v16 & 0x100) == 0
            && *(_WORD *)(result + 480 * v21 + 32 * a3 + 1036)
            && *(_WORD *)(result + 480 * v21 + 32 * a3 + 1038)
            && *(_WORD *)(result + 480 * v21 + 32 * a3 + 1040)
            && *(unsigned char *)(result + 555))
          {
            uint64_t v28 = v21;
            glgConvertType();
            uint64_t v44 = 0;
            glgConvertType();
            uint64_t result = glgGetCompressedImageBytes();
            uint64_t v21 = v28;
            int v20 = result;
            int v25 = 0;
            int v43 = result;
            goto LABEL_134;
          }
          if (!*(_WORD *)v10)
          {
            __int16 v19 = 1282;
            goto LABEL_92;
          }
          break;
      }
      return result;
    }
    if (a4 == 4096)
    {
      int v25 = (v16 >> 8) & 1;
      if (v17 == 7)
      {
        if (!*(void *)(result + 528))
        {
          int v20 = 0;
          int v43 = 0;
          goto LABEL_134;
        }
        uint64_t v36 = v21;
        uint64_t result = gleInternalFormatFromSizedEnum(*(unsigned __int16 *)(result + 960));
        uint64_t v21 = v36;
        int v20 = *(_DWORD *)(*(void *)(v15 + 528) + 152)
            / ((int)(((result >> 14) & 0x3F & ((4 * (int)result) >> 31))
                   + ((result >> 20) & 0x3F)
                   + ((((result >> 14) & 0x3F) + ((32 * (int)result) >> 31)) & ((8 * (int)result) >> 31))
                   + ((((result >> 14) & 0x3F) + ((16 * (int)result) >> 31)) & ((2 * (int)result) >> 31))) >> 3);
      }
      else
      {
        int v20 = *(unsigned __int16 *)(result + 480 * v21 + 32 * a3 + 1036);
      }
      int v43 = v20;
      goto LABEL_134;
    }
    if (a4 == 4097)
    {
      int v25 = (v16 >> 8) & 1;
      if (v17 == 7)
      {
        uint64_t v37 = *(void *)(result + 528);
        if (v37) {
          int v20 = *(void *)(v37 + 152) != 0;
        }
        else {
          int v20 = 0;
        }
      }
      else
      {
        int v20 = *(unsigned __int16 *)(result + 480 * v21 + 32 * a3 + 1038);
      }
      int v43 = v20;
      goto LABEL_134;
    }
    int v25 = 0;
    if (a4 == 4099)
    {
      int v25 = *(_WORD *)(result + 480 * v21 + 32 * a3 + 1036)
         && *(_WORD *)(result + 480 * v21 + 32 * a3 + 1038)
         && *(_WORD *)(result + 480 * v21 + 32 * a3 + 1040)
         && *(unsigned char *)(result + 555) == 0;
      if (v17 == 7)
      {
        uint64_t v39 = *(void *)(result + 528);
        if (!v39 || !*(void *)(v39 + 152))
        {
          int v20 = 32832;
LABEL_133:
          int v43 = v20;
          goto LABEL_134;
        }
      }
      else if (!*(_WORD *)(result + 962))
      {
        int v20 = 1;
        goto LABEL_133;
      }
      int v20 = *(unsigned __int16 *)(result + 960);
      goto LABEL_133;
    }
    goto LABEL_72;
  }
  if (a4 <= 35855)
  {
    if (a4 == 34465)
    {
      int v25 = 0;
      int v20 = *(unsigned __int8 *)(result + 555);
      int v43 = v20;
      goto LABEL_134;
    }
    if (a4 == 34890) {
      goto LABEL_65;
    }
    int v27 = 35057;
  }
  else
  {
    if ((a4 - 35856) < 4)
    {
      int v43 = 0;
      if (v17 == 7)
      {
        uint64_t v22 = *(void *)(result + 528);
        if (v22)
        {
          uint64_t v22 = *(void *)(v22 + 152);
          if (v22)
          {
            uint64_t v26 = v21;
            uint64_t result = gleGetInternalFormatType(*(unsigned __int16 *)(result + 960));
LABEL_70:
            uint64_t v21 = v26;
            int v20 = result;
            int v25 = 0;
            LODWORD(v22) = 0;
            int v43 = result;
            goto LABEL_72;
          }
        }
LABEL_71:
        int v20 = 0;
        int v25 = 0;
        goto LABEL_72;
      }
      LODWORD(v22) = *(unsigned __int16 *)(result + 480 * v21 + 32 * a3 + 1036);
      if (!*(_WORD *)(result + 480 * v21 + 32 * a3 + 1036)) {
        goto LABEL_71;
      }
      LODWORD(v22) = *(unsigned __int16 *)(result + 480 * v21 + 32 * a3 + 1038);
      if (!*(_WORD *)(result + 480 * v21 + 32 * a3 + 1038)) {
        goto LABEL_71;
      }
      LODWORD(v22) = *(unsigned __int16 *)(result + 480 * v21 + 32 * a3 + 1040);
      if (!*(_WORD *)(result + 480 * v21 + 32 * a3 + 1040)) {
        goto LABEL_71;
      }
      LODWORD(v22) = *(unsigned __int8 *)(result + 555);
      if (!*(unsigned char *)(result + 555))
      {
        int v20 = 0;
        a4 -= 2996;
        int v25 = 2;
        goto LABEL_72;
      }
LABEL_69:
      uint64_t v26 = v21;
      uint64_t result = gleGetCompressedTextureLevelInfo(*(unsigned __int16 *)(result + 960), a4);
      goto LABEL_70;
    }
    if (a4 == 35862)
    {
      int v43 = 0;
      if (*(_WORD *)(result + 480 * v21 + 32 * a3 + 1036)
        && *(_WORD *)(result + 480 * v21 + 32 * a3 + 1038))
      {
        int v20 = 0;
        if (*(_WORD *)(result + 480 * v21 + 32 * a3 + 1040)) {
          int v25 = 2 * (*(unsigned char *)(result + 555) == 0);
        }
        else {
          int v25 = 0;
        }
      }
      else
      {
        int v20 = 0;
        int v25 = 0;
      }
      goto LABEL_134;
    }
    int v27 = 35903;
  }
  if (a4 == v27)
  {
LABEL_65:
    int v43 = 0;
    LODWORD(v22) = *(unsigned __int16 *)(result + 480 * v21 + 32 * a3 + 1036);
    if (!*(_WORD *)(result + 480 * v21 + 32 * a3 + 1036)) {
      goto LABEL_71;
    }
    LODWORD(v22) = *(unsigned __int16 *)(result + 480 * v21 + 32 * a3 + 1038);
    if (!*(_WORD *)(result + 480 * v21 + 32 * a3 + 1038)) {
      goto LABEL_71;
    }
    LODWORD(v22) = *(unsigned __int16 *)(result + 480 * v21 + 32 * a3 + 1040);
    if (!*(_WORD *)(result + 480 * v21 + 32 * a3 + 1040)) {
      goto LABEL_71;
    }
    LODWORD(v22) = *(unsigned __int8 *)(result + 555);
    if (!*(unsigned char *)(result + 555))
    {
      int v20 = 0;
      int v25 = 1;
      goto LABEL_72;
    }
    goto LABEL_69;
  }
  int v25 = 0;
LABEL_72:
  if ((a4 - 32864) < 2)
  {
    int v43 = 0;
    if (*(_WORD *)(v15 + 480 * v21 + 32 * a3 + 1036)
      && *(_WORD *)(v15 + 480 * v21 + 32 * a3 + 1038)
      && *(_WORD *)(v15 + 480 * v21 + 32 * a3 + 1040))
    {
      if (!*(unsigned char *)(v15 + 555))
      {
        int v20 = 0;
        int v25 = 1;
        goto LABEL_134;
      }
LABEL_83:
      uint64_t v35 = v21;
      uint64_t result = gleGetCompressedTextureLevelInfo(*(unsigned __int16 *)(v15 + 960), a4);
      uint64_t v21 = v35;
      int v20 = result;
      int v43 = result;
      goto LABEL_134;
    }
LABEL_84:
    int v20 = 0;
    goto LABEL_134;
  }
  if ((a4 - 35860) < 2)
  {
    int v43 = 0;
    if (*(_WORD *)(v15 + 480 * v21 + 32 * a3 + 1036)
      && *(_WORD *)(v15 + 480 * v21 + 32 * a3 + 1038)
      && *(_WORD *)(v15 + 480 * v21 + 32 * a3 + 1040))
    {
      if (!*(unsigned char *)(v15 + 555))
      {
        int v20 = 0;
        int v25 = 2;
        goto LABEL_134;
      }
      goto LABEL_83;
    }
    goto LABEL_84;
  }
  if (a4 == 4101)
  {
    if ((v16 & 0x100) != 0) {
      int v25 = 1;
    }
    int v20 = *(unsigned __int8 *)(v15 + 480 * v21 + 32 * a3 + 1042);
    int v43 = v20;
    goto LABEL_134;
  }
  if (!v22)
  {
LABEL_134:
    if ((*(_WORD *)(v15 + 768) & 0x100) != 0
      && a1[138].i32[2] & a1[96].i32[2] | a1[138].i32[1] & a1[96].i32[1] | a1[138].i32[3] & a1[96].i32[3])
    {
      int v40 = v10[2669];
      if ((v40 - 3) >= 2)
      {
        uint64_t v41 = v21;
        if (v40 == 1) {
          uint64_t result = gleUpdateDeferredStateGL3(a1, 0, 0, 0, 0);
        }
        else {
          uint64_t result = gleUpdateDeferredState((uint64_t)a1, 0, 0, 0, 0, v12, v13, v14);
        }
      }
      else
      {
        uint64_t v41 = v21;
        uint64_t result = gleUpdateDeferredStateES2(a1, 0, 0, 0, 0);
      }
      uint64_t v21 = v41;
    }
    if (v25)
    {
      uint64_t v42 = v21;
      uint64_t result = (*(uint64_t (**)(uint64_t, void))(a1[1840].i64[1] + 376))(a1[1813].i64[1], *(void *)(v15 + 8 * v10[2667]));
      int v20 = v43;
      if (v25 == 2)
      {
        if (v43)
        {
          (*(void (**)(uint64_t, void, uint64_t, uint64_t, uint64_t, int *))(a1[1840].i64[1] + 376))(a1[1813].i64[1], *(void *)(v15 + 8 * v10[2667]), v42, a3, 4099, &v43);
          uint64_t result = gleGetInternalFormatType(v43);
          int v20 = result;
        }
      }
    }
    *a5 = v20;
    return result;
  }
LABEL_90:
  if (!*(_WORD *)v10)
  {
    __int16 v19 = 1280;
    goto LABEL_92;
  }
  return result;
}

uint64_t gleLookUpTexture(uint64_t a1, int a2)
{
  uint64_t result = 0;
  float32x4_t v4 = (unsigned char *)(a1 + 32501);
  uint64_t v5 = a1 + 20776;
  unsigned int v6 = *(unsigned __int16 *)(a1 + 23768);
  if (a2 <= 34068)
  {
    if (a2 == 3553)
    {
      __int16 v7 = (void *)(v5 + 88 * v6 + 24);
    }
    else
    {
      if (a2 != 32879) {
        return result;
      }
      if ((*v4 & 0xFE) == 2) {
        return 0;
      }
      __int16 v7 = (void *)(v5 + 88 * v6 + 8);
    }
  }
  else if ((a2 - 34069) >= 6)
  {
    if (a2 != 35866) {
      return result;
    }
    if ((*v4 & 0xFE) == 2) {
      return 0;
    }
    __int16 v7 = (void *)(v5 + 88 * v6 + 40);
  }
  else
  {
    if (*v4 == 2) {
      return 0;
    }
    __int16 v7 = (void *)(v5 + 88 * v6);
  }
  return *v7 + 40;
}

uint64_t gleSetEnable_DEPTH_TEST(uint64_t result, uint64_t a2, int a3)
{
  if (*(unsigned __int8 *)(result + 15204) != a3)
  {
    *(unsigned char *)(result + 15204) = a3;
    *(_DWORD *)(result + 1520) |= 0x200u;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1548) |= 0x40000u;
  }
  return result;
}

uint64_t glAlphaFunc_Exec(uint64_t result, int a2, double a3, double a4, double a5)
{
  uint64_t v5 = result + 29832;
  if ((a2 - 520) <= 0xFFFFFFF7)
  {
    if (!*(_WORD *)v5) {
      *(_WORD *)uint64_t v5 = 1280;
    }
  }
  else
  {
    float v6 = *(float *)&a3;
    __int16 v7 = a2;
    uint64_t v8 = result;
    __int16 v9 = (float *)(result + 15004);
    LODWORD(a3) = *(_DWORD *)(result + 29704);
    if (*(float *)&a3 != v6 || *(unsigned __int16 *)v9 != a2)
    {
      if ((*(unsigned char *)(result + 29803) & 0x10) != 0) {
        uint64_t result = gleUpdateAnyDrawBuffersFloat(result, a3, a4, a5);
      }
      v9[3675] = v6;
      if (!*(unsigned char *)(v5 + 2656) && (*(unsigned char *)(*(void *)(v8 + 29032) + 561) & 0x40) == 0) {
        float v6 = fminf(fmaxf(v6, *(float *)(v8 + 288)), *(float *)(v8 + 292));
      }
      *(float *)(v8 + 15000) = v6;
      *(_WORD *)__int16 v9 = v7;
      *(_DWORD *)(v8 + 1520) |= 1u;
      v9[3412] = 0.0;
      *(_DWORD *)(v8 + 1548) |= 0x40000u;
    }
  }
  return result;
}

uint64_t gleSetEnable_ALPHA_TEST(uint64_t result, uint64_t a2, int a3)
{
  if (*(unsigned __int8 *)(result + 15006) != a3)
  {
    *(unsigned char *)(result + 15006) = a3;
    *(_DWORD *)(result + 1520) |= 1u;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1548) |= 0x40000u;
  }
  return result;
}

uint64_t glShadeModel_Exec(uint64_t result, int a2)
{
  if ((a2 - 7426) <= 0xFFFFFFFD)
  {
    if (!*(_WORD *)(result + 29832)) {
      *(_WORD *)(result + 29832) = 1280;
    }
  }
  else if (*(_DWORD *)(result + 15592) != a2)
  {
    *(_DWORD *)(result + 15592) = a2;
    *(_DWORD *)(result + 1520) |= 0x8000000u;
    *(_DWORD *)(result + 28652) = 0;
    int v2 = *(_DWORD *)(result + 1548);
    *(_DWORD *)(result + 1548) = v2 | 0x8400;
    uint64_t v3 = *(void *)(result + 29032);
    if ((*(unsigned char *)(v3 + 27) & 0x10) != 0 || (*(unsigned char *)(v3 + 25) & 0x7F) != 0) {
      *(_DWORD *)(result + 1548) = v2 | 0x70038400;
    }
  }
  return result;
}

uint64_t gleSetEnable_LIGHTING(uint64_t result, uint64_t a2, int a3)
{
  if (*(unsigned __int8 *)(result + 14890) != a3)
  {
    *(unsigned char *)(result + 14890) = a3;
    int v3 = *(unsigned __int8 *)(result + 24756);
    int v4 = *(_DWORD *)(result + 24864);
    if (*(unsigned char *)(result + 24756)) {
      BOOL v5 = 0;
    }
    else {
      BOOL v5 = (*(_DWORD *)(result + 24864) & 1) == 0;
    }
    if (v5)
    {
      int v6 = a3 ? *(unsigned __int16 *)(result + 14888) == 33274 : *(unsigned __int8 *)(result + 32506);
      if (v6 != *(unsigned __int8 *)(result + 15283))
      {
        *(unsigned char *)(result + 15283) = v6;
        *(_DWORD *)(result + 1548) |= 0x20000u;
      }
    }
    *(_DWORD *)(result + 28652) = 0;
    int v7 = *(_DWORD *)(result + 1548);
    *(_DWORD *)(result + 1548) = v7 | 0x18402;
    int v8 = v4 & 9;
    if (v3) {
      BOOL v9 = 0;
    }
    else {
      BOOL v9 = v8 == 0;
    }
    if (v9)
    {
      if ((_BYTE)a3) {
        int v10 = *(unsigned char *)(result + 14892) != 0;
      }
      else {
        int v10 = 0;
      }
    }
    else
    {
      int v10 = *(unsigned __int8 *)(result + 24751);
    }
    if (v10 != *(unsigned __int8 *)(result + 17701))
    {
      *(unsigned char *)(result + 17701) = v10;
      *(_DWORD *)(result + 1532) |= 0x40000000u;
      *(_DWORD *)(result + 1548) = v7 | 0x10018402;
      if ((*(unsigned char *)(*(void *)(result + 29032) + 25) & 0x7F) != 0) {
        *(_DWORD *)(result + 1548) = v7 | 0x10038402;
      }
    }
    return gleUpdateInverseNeeds(result);
  }
  return result;
}

uint64_t gleSetEnable_CULL_FACE(uint64_t result, uint64_t a2, int a3)
{
  if (*(unsigned __int8 *)(result + 15534) != a3)
  {
    *(unsigned char *)(result + 15534) = a3;
    *(_DWORD *)(result + 1520) |= 0x800000u;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1548) |= 0x8000u;
  }
  return result;
}

uint64_t glEnableClientState_Exec(uint64_t a1, int a2)
{
  return gleSetClientEnableFlag(a1, a2, 1);
}

uint64_t gleSetClientEnableFlag(uint64_t result, int a2, int a3)
{
  uint64_t v5 = result;
  uint64_t v6 = result + 28652;
  int v7 = (unsigned char *)(result + 17700);
  uint64_t v8 = *(void *)(result + 26384);
  if (a2 <= 34476)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0x10000;
    switch(a2)
    {
      case 32884:
        goto LABEL_13;
      case 32885:
        uint64_t v9 = 1;
        uint64_t v10 = 0x20000;
        goto LABEL_13;
      case 32886:
        uint64_t v9 = 2;
        uint64_t v10 = 0x40000;
        goto LABEL_13;
      case 32888:
        uint64_t v11 = *(unsigned __int16 *)(result + 23770);
        uint64_t v10 = 0x1000000 << v11;
        uint64_t v9 = v11 + 8;
        goto LABEL_13;
      default:
        goto LABEL_21;
    }
  }
  if (a2 == 34477)
  {
    uint64_t v9 = 4;
    uint64_t v10 = 0x100000;
    goto LABEL_13;
  }
  if (a2 == 34884)
  {
    if (*(unsigned char *)(result + 32501) == 2)
    {
      uint64_t v9 = 7;
      uint64_t v10 = 0x800000;
      goto LABEL_13;
    }
LABEL_21:
    if (!*(_WORD *)(result + 29832)) {
      *(_WORD *)(result + 29832) = 1280;
    }
    return result;
  }
  if (a2 != 35740) {
    goto LABEL_21;
  }
  uint64_t v9 = 6;
  uint64_t v10 = 0x400000;
LABEL_13:
  uint64_t v12 = *(void *)(v8 + 904);
  if (a3)
  {
    if ((v12 & v10) != 0) {
      return result;
    }
    uint64_t v13 = v12 | v10;
    *(void *)(v8 + 904) = v12 | v10;
    uint64_t v14 = *(void *)(v8 + 912);
    if ((v13 & ~v14) == v10)
    {
      uint64_t result = gleUpdateDrawArraysFuncs(result);
    }
    else if ((v14 & v10) != 0 && *(void *)(*(void *)(v8 + 8 * v9 + 1240) + 192))
    {
      *(unsigned char *)(v8 + 1216) = 0;
    }
    uint64_t v15 = v10 | *(void *)(v8 + 944) | 0x10;
  }
  else
  {
    if (!(v12 | v10)) {
      return result;
    }
    *(void *)(v8 + 904) = v12 & ~v10;
    if ((v12 & ~*(void *)(v8 + 912)) == v10) {
      uint64_t result = gleUpdateDrawArraysFuncs(result);
    }
    uint64_t v15 = *(void *)(v8 + 944) | v10;
  }
  *(void *)(v8 + 944) = v15;
  *(void *)(v8 + 952) |= v10;
  if (a2 == 35740 && *(unsigned char *)(v6 + 3849) == 2)
  {
    *(unsigned char *)(v5 + 15379) = a3;
    if ((*(unsigned char *)(v5 + 24864) & 9) != 0 || *(unsigned char *)(v5 + 24756))
    {
      int v16 = *(unsigned __int8 *)(v5 + 24750);
    }
    else if (a3)
    {
      int v16 = 1;
    }
    else
    {
      int v16 = *(unsigned char *)(v5 + 15378) != 0;
    }
    if (v16 == *v7)
    {
      int v17 = *(_DWORD *)(v5 + 1548);
    }
    else
    {
      *int v7 = v16;
      *(_DWORD *)(v5 + 1532) |= 0x40000000u;
      *(_DWORD *)uint64_t v6 = 0;
      int v17 = *(_DWORD *)(v5 + 1548) | 0x10000000;
    }
    *(_DWORD *)(v5 + 1548) = v17 | 0x1800A;
  }
  *(void *)(v5 + 26184) = gleSetVertexArrayFunc;
  *(void *)(v5 + 26192) = gleSetVertexArrayFunc;
  *(void *)(v5 + 26200) = gleSetVertexElemFunc;
  *(void *)(v5 + 26208) = gleSetVertexElemFunc;
  if ((v10 & 0xFF000000) != 0) {
    *(_DWORD *)(v5 + 1548) |= 0x4000u;
  }
  *(_DWORD *)uint64_t v6 = 0;
  *(_DWORD *)(v5 + 1532) |= 0x1000u;
  return result;
}

uint64_t glClearColor_Exec(uint64_t result, double a2, double a3, double a4, float a5)
{
  uint64_t v5 = (float32x4_t *)result;
  uint64_t v6 = (float32x4_t *)(result + 29672);
  *(_DWORD *)(result + 29672) = LODWORD(a2);
  *(_DWORD *)(result + 29676) = LODWORD(a3);
  *(_DWORD *)(result + 29680) = LODWORD(a4);
  *(float *)(result + 29684) = a5;
  if ((*(unsigned char *)(result + 29803) & 0x10) != 0) {
    uint64_t result = gleUpdateAnyDrawBuffersFloat(result, a2, a3, a4);
  }
  if (v6[176].i8[0] || (*(unsigned char *)(v5[1814].i64[1] + 561) & 0x40) != 0)
  {
    float32x4_t v11 = *v6;
  }
  else
  {
    f32 = v5[18].f32;
    uint64_t v8 = &v5[18].f32[1];
    float32x4_t v9 = vld1q_dup_f32(f32);
    float32x4_t v10 = vld1q_dup_f32(v8);
    float32x4_t v11 = vminnmq_f32(vmaxnmq_f32(*v6, v9), v10);
  }
  v5[947] = v11;
  if (!*(unsigned char *)(v5[1842].i64[1] + 110))
  {
    v5[1790].i32[3] = 0;
    v6[8].i32[0] |= 8u;
  }
  return result;
}

uint64_t glFlush_Exec(uint64_t a1, double a2, double a3, double a4)
{
  uint64_t v5 = a1 + 29800;
  if (*(unsigned char *)(a1 + 32472))
  {
    if (!*(unsigned char *)(a1 + 32471) && (*(_WORD *)(a1 + 32493) & 0x400) != 0)
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 29496) + 240))(*(void *)(a1 + 29464));
    }
    else if ((*(_DWORD *)v5 & 0x743C0478) == 0 {
           || (uint64_t result = gleUpdateDrawFramebufferState(a1, a2, a3, a4), !result))
    }
    {
      uint64_t result = (*(uint64_t (**)(void, void))(*(void *)(a1 + 29496) + 232))(*(void *)(a1 + 29464), 0);
    }
    *(unsigned char *)(v5 + 2672) = *(unsigned char *)(v5 + 2671);
  }
  else
  {
    int v7 = *(uint64_t (**)(uint64_t))(*(void *)(a1 + 29496) + 240);
    uint64_t v8 = *(void *)(a1 + 29464);
    return v7(v8);
  }
  return result;
}

void glColorPointer_Exec(uint64_t a1, int a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t v5 = a1 + 28652;
  if (a2 < 3
    || (v6 = a5, uint64_t v10 = *(void *)(a1 + 26384), (a2 - 3) >= 2) && a2 != 32993
    || (a3 != 5121 ? (BOOL v11 = a2 == 32993) : (BOOL v11 = 0), v11 || (a4 & 0x80000000) != 0 || a2 == 3))
  {
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v15 = 1281;
    goto LABEL_25;
  }
  uint64_t v12 = *(void *)(a1 + 19312);
  if (!v12 && v10 != *(void *)(a1 + 26392) && a5 && !*(unsigned char *)(a1 + 32502))
  {
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v15 = 1282;
LABEL_25:
    *(_WORD *)(a1 + 29832) = v15;
    return;
  }
  if (a3 == 5121)
  {
    int v14 = 1;
    uint64_t v13 = 0x340100000000;
  }
  else
  {
    if (a3 != 5126 && (a3 != 5132 || *(unsigned char *)(a1 + 32501) != 2))
    {
      if (*(_WORD *)(a1 + 29832)) {
        return;
      }
      __int16 v15 = 1280;
      goto LABEL_25;
    }
    uint64_t v13 = a3 << 32;
    int v14 = 4;
  }
  if (a2 == 32993) {
    int v16 = 4;
  }
  else {
    int v16 = a2;
  }
  *(void *)(v10 + 944) |= 0x40000uLL;
  *(void *)(v10 + 184) = a5;
  uint64_t v17 = *(void *)(v10 + 1256);
  if (v12 != v17)
  {
    if (v17 && (int v18 = *(_DWORD *)(v17 + 20) - 1, (*(_DWORD *)(v17 + 20) = v18) == 0))
    {
      int v36 = v16;
      int v26 = v14;
      uint64_t v27 = v13;
      gleUnbindAndFreeBufferObject(a1, (void *)v17);
      uint64_t v13 = v27;
      int v14 = v26;
      int v16 = v36;
      if (v12) {
        goto LABEL_34;
      }
    }
    else if (v12)
    {
LABEL_34:
      ++*(_DWORD *)(v12 + 20);
      uint64_t v19 = *(void *)(v10 + 912);
      if ((v19 & 0x40000) == 0)
      {
        *(void *)(v10 + 912) = v19 | 0x40000;
        if ((*(unsigned char *)(v10 + 906) & 4) != 0)
        {
          int v35 = v16;
          int v20 = v14;
          uint64_t v21 = v13;
          gleUpdateDrawArraysFuncs(a1);
          uint64_t v13 = v21;
          int v14 = v20;
          int v16 = v35;
        }
      }
      uint64_t v22 = *(unsigned __int8 *)(v5 + 3844);
      if (*(unsigned char *)(v5 + 3844))
      {
        uint64_t v23 = (uint64_t *)(v12 + 40);
        uint64_t v24 = (void *)(v10 + 1512);
        do
        {
          uint64_t v25 = *v23++;
          *uint64_t v24 = v25;
          v24 += 35;
          --v22;
        }
        while (v22);
      }
      if (v17) {
        goto LABEL_50;
      }
      goto LABEL_49;
    }
    uint64_t v28 = *(void *)(v10 + 912);
    if ((v28 & 0x40000) != 0)
    {
      *(void *)(v10 + 912) = v28 & 0xFFFFFFFFFFFBFFFFLL;
      if ((*(unsigned char *)(v10 + 906) & 4) != 0)
      {
        uint64_t v29 = v13;
        gleUpdateDrawArraysFuncs(a1);
        uint64_t v13 = v29;
      }
    }
    uint64_t v30 = *(unsigned __int8 *)(v5 + 3844);
    if (*(unsigned char *)(v5 + 3844))
    {
      uint64_t v31 = (void *)(v10 + 1512);
      do
      {
        *uint64_t v31 = 0;
        v31 += 35;
        --v30;
      }
      while (v30);
    }
LABEL_49:
    *(void *)(v10 + 952) |= 0x40000uLL;
LABEL_50:
    *(_DWORD *)uint64_t v5 = 0;
    *(_DWORD *)(a1 + 1532) |= 0x1000u;
    *(void *)(v10 + 944) |= 0x40010uLL;
    *(void *)(v10 + 1256) = v12;
  }
  if (v12)
  {
    v6 += *(void *)(v12 + 136);
    if (*(void *)(v12 + 192))
    {
      if ((*(unsigned char *)(v10 + 906) & 4) != 0) {
        *(unsigned char *)(v10 + 1216) = 0;
      }
    }
  }
  *(void *)(v10 + 976) = v6;
  LODWORD(v32) = v14 * v16;
  if (a4) {
    uint64_t v32 = a4;
  }
  else {
    uint64_t v32 = v32;
  }
  if (a2 == 32993) {
    uint64_t v33 = 5;
  }
  else {
    uint64_t v33 = a2;
  }
  unint64_t v34 = v13 | v32 | (v33 << 48) | ((unint64_t)(((v32 | v6) & 0xF) == 0) << 57);
  if (*(void *)(v10 + 200) != v34)
  {
    *(void *)(v10 + 952) |= 0x40000uLL;
    *(void *)(v10 + 200) = v34;
    *(void *)(a1 + 26184) = gleSetVertexArrayFunc;
    *(void *)(a1 + 26192) = gleSetVertexArrayFunc;
    *(void *)(a1 + 26200) = gleSetVertexElemFunc;
    *(void *)(a1 + 26208) = gleSetVertexElemFunc;
    *(_DWORD *)uint64_t v5 = 0;
    *(_DWORD *)(a1 + 1532) |= 0x1000u;
  }
}

void glVertexPointer_Exec(uint64_t a1, int a2, int a3, unsigned int a4, uint64_t a5)
{
  uint64_t v5 = a1 + 28652;
  if ((a2 - 5) >= 0xFFFFFFFD && (a4 & 0x80000000) == 0)
  {
    uint64_t v7 = a5;
    unsigned __int16 v8 = a3;
    uint64_t v11 = *(void *)(a1 + 26384);
    uint64_t v12 = *(void *)(a1 + 19312);
    if (!v12 && v11 != *(void *)(a1 + 26392) && a5 && !*(unsigned char *)(a1 + 32502))
    {
      if (!*(_WORD *)(a1 + 29832))
      {
        __int16 v15 = 1282;
LABEL_28:
        *(_WORD *)(a1 + 29832) = v15;
        return;
      }
      return;
    }
    HIDWORD(v13) = a3;
    LODWORD(v13) = a3 - 5120;
    int v14 = 4;
    switch((v13 >> 1))
    {
      case 0u:
        if (*(unsigned char *)(a1 + 32501) != 2) {
          goto LABEL_26;
        }
        int v14 = 1;
        goto LABEL_14;
      case 1u:
        int v14 = 2;
        goto LABEL_14;
      case 3u:
        goto LABEL_14;
      case 6u:
        if (*(unsigned char *)(a1 + 32501) != 2) {
          goto LABEL_26;
        }
LABEL_14:
        *(void *)(v11 + 944) |= 0x10000uLL;
        *(void *)(v11 + 136) = a5;
        uint64_t v16 = *(void *)(v11 + 1240);
        if (v12 == v16) {
          goto LABEL_38;
        }
        if (v16 && (int v17 = *(_DWORD *)(v16 + 20) - 1, (*(_DWORD *)(v16 + 20) = v17) == 0))
        {
          gleUnbindAndFreeBufferObject(a1, (void *)v16);
          if (v12) {
            goto LABEL_18;
          }
        }
        else if (v12)
        {
LABEL_18:
          ++*(_DWORD *)(v12 + 20);
          uint64_t v18 = *(void *)(v11 + 912);
          if ((v18 & 0x10000) == 0)
          {
            *(void *)(v11 + 912) = v18 | 0x10000;
            if (*(unsigned char *)(v11 + 906)) {
              gleUpdateDrawArraysFuncs(a1);
            }
          }
          uint64_t v19 = *(unsigned __int8 *)(v5 + 3844);
          if (*(unsigned char *)(v5 + 3844))
          {
            int v20 = (uint64_t *)(v12 + 40);
            uint64_t v21 = (void *)(v11 + 1496);
            do
            {
              uint64_t v22 = *v20++;
              *uint64_t v21 = v22;
              v21 += 35;
              --v19;
            }
            while (v19);
          }
          if (v16)
          {
LABEL_37:
            *(_DWORD *)uint64_t v5 = 0;
            *(_DWORD *)(a1 + 1532) |= 0x1000u;
            *(void *)(v11 + 944) |= 0x10010uLL;
            *(void *)(v11 + 1240) = v12;
LABEL_38:
            if (v12)
            {
              v7 += *(void *)(v12 + 136);
              if (*(void *)(v12 + 192))
              {
                if (*(unsigned char *)(v11 + 906)) {
                  *(unsigned char *)(v11 + 1216) = 0;
                }
              }
            }
            *(void *)(v11 + 960) = v7;
            LODWORD(v26) = v14 * a2;
            if (a4) {
              uint64_t v26 = a4;
            }
            else {
              uint64_t v26 = v26;
            }
            unint64_t v27 = ((unint64_t)a2 << 48) | ((unint64_t)(((v26 | v7) & 0xF) == 0) << 57) | ((unint64_t)v8 << 32) | v26;
            if (*(void *)(v11 + 152) != v27)
            {
              *(void *)(v11 + 952) |= 0x10000uLL;
              *(void *)(v11 + 152) = v27;
              *(void *)(a1 + 26184) = gleSetVertexArrayFunc;
              *(void *)(a1 + 26192) = gleSetVertexArrayFunc;
              *(void *)(a1 + 26200) = gleSetVertexElemFunc;
              *(void *)(a1 + 26208) = gleSetVertexElemFunc;
              *(_DWORD *)uint64_t v5 = 0;
              *(_DWORD *)(a1 + 1532) |= 0x1000u;
            }
            return;
          }
LABEL_36:
          *(void *)(v11 + 952) |= 0x10000uLL;
          goto LABEL_37;
        }
        uint64_t v23 = *(void *)(v11 + 912);
        if ((v23 & 0x10000) != 0)
        {
          *(void *)(v11 + 912) = v23 & 0xFFFFFFFFFFFEFFFFLL;
          if (*(unsigned char *)(v11 + 906)) {
            gleUpdateDrawArraysFuncs(a1);
          }
        }
        uint64_t v24 = *(unsigned __int8 *)(v5 + 3844);
        if (*(unsigned char *)(v5 + 3844))
        {
          uint64_t v25 = (void *)(v11 + 1496);
          do
          {
            *uint64_t v25 = 0;
            v25 += 35;
            --v24;
          }
          while (v24);
        }
        goto LABEL_36;
      default:
LABEL_26:
        if (*(_WORD *)(a1 + 29832)) {
          return;
        }
        __int16 v15 = 1280;
        goto LABEL_28;
    }
  }
  if (!*(_WORD *)(a1 + 29832))
  {
    __int16 v15 = 1281;
    goto LABEL_28;
  }
}

void glTexCoordPointer_Exec(uint64_t a1, int a2, int a3, unsigned int a4, uint64_t a5)
{
  uint64_t v5 = a1 + 28652;
  uint64_t v6 = *(unsigned __int16 *)(a1 + 23770);
  if (v6 < 9 && (a2 - 5) >= 0xFFFFFFFC && (a4 & 0x80000000) == 0)
  {
    uint64_t v9 = a5;
    unsigned __int16 v10 = a3;
    uint64_t v12 = *(void *)(a1 + 26384);
    int v13 = *(unsigned __int8 *)(a1 + 32501);
    if (a2 != 1 || v13 != 2)
    {
      uint64_t v14 = *(void *)(a1 + 19312);
      if (!v14 && v12 != *(void *)(a1 + 26392) && a5 && !*(unsigned char *)(a1 + 32502))
      {
        if (!*(_WORD *)(a1 + 29832))
        {
          __int16 v17 = 1282;
LABEL_31:
          *(_WORD *)(a1 + 29832) = v17;
          return;
        }
        return;
      }
      HIDWORD(v15) = a3;
      LODWORD(v15) = a3 - 5120;
      int v16 = 4;
      switch((v15 >> 1))
      {
        case 0u:
          if (v13 != 2) {
            goto LABEL_29;
          }
          int v16 = 1;
          goto LABEL_17;
        case 1u:
          int v16 = 2;
          goto LABEL_17;
        case 3u:
          goto LABEL_17;
        case 6u:
          if (v13 != 2) {
            goto LABEL_29;
          }
LABEL_17:
          uint64_t v18 = v6 + 8;
          uint64_t v19 = v12 + 136;
          uint64_t v20 = (0x1000000 << v6);
          *(void *)(v12 + 944) |= v20;
          *(void *)(v12 + 136 + 24 * (v6 + 8)) = a5;
          uint64_t v21 = v12 + 1240;
          uint64_t v22 = *(void *)(v12 + 1240 + 8 * (v6 + 8));
          if (v14 == v22) {
            goto LABEL_41;
          }
          if (v22 && (int v23 = *(_DWORD *)(v22 + 20) - 1, (*(_DWORD *)(v22 + 20) = v23) == 0))
          {
            uint64_t v51 = a1 + 28652;
            char v42 = v6;
            int v48 = v16;
            gleUnbindAndFreeBufferObject(a1, (void *)v22);
            uint64_t v21 = v12 + 1240;
            uint64_t v19 = v12 + 136;
            int v16 = v48;
            LOBYTE(v6) = v42;
            uint64_t v5 = v51;
            if (v14) {
              goto LABEL_21;
            }
          }
          else if (v14)
          {
LABEL_21:
            ++*(_DWORD *)(v14 + 20);
            uint64_t v24 = *(void *)(v12 + 912);
            if ((v24 & v20) == 0)
            {
              *(void *)(v12 + 912) = v24 | v20;
              if ((*(void *)(v12 + 904) & v20) != 0)
              {
                uint64_t v50 = v5;
                char v41 = v6;
                uint64_t v43 = v21;
                int v47 = v16;
                uint64_t v45 = v19;
                gleUpdateDrawArraysFuncs(a1);
                uint64_t v21 = v43;
                uint64_t v19 = v45;
                int v16 = v47;
                LOBYTE(v6) = v41;
                uint64_t v5 = v50;
              }
            }
            uint64_t v25 = *(unsigned __int8 *)(v5 + 3844);
            if (*(unsigned char *)(v5 + 3844))
            {
              uint64_t v26 = (uint64_t *)(v14 + 40);
              unint64_t v27 = (void *)(v12 + 8 * v18 + 1496);
              do
              {
                uint64_t v28 = *v26++;
                *unint64_t v27 = v28;
                v27 += 35;
                --v25;
              }
              while (v25);
            }
            if (v22)
            {
LABEL_40:
              *(_DWORD *)uint64_t v5 = 0;
              *(_DWORD *)(a1 + 1532) |= 0x1000u;
              *(void *)(v12 + 944) |= v20 | 0x10;
              *(void *)(v21 + 8 * v18) = v14;
LABEL_41:
              if (v14)
              {
                v9 += *(void *)(v14 + 136);
                if (*(void *)(v14 + 192))
                {
                  if ((*(void *)(v12 + 904) & v20) != 0) {
                    *(unsigned char *)(v12 + 1216) = 0;
                  }
                }
              }
              *(void *)(v12 + 8 * v18 + 960) = v9;
              if (a4) {
                uint64_t v33 = a4;
              }
              else {
                uint64_t v33 = (v16 * a2);
              }
              uint64_t v34 = v19 + 24 * v18;
              uint64_t v37 = *(void *)(v34 + 16);
              int v35 = (unint64_t *)(v34 + 16);
              uint64_t v36 = v37;
              unint64_t v38 = ((unint64_t)a2 << 48) | ((unint64_t)(((v33 | v9) & 0xF) == 0) << 57) | ((unint64_t)v10 << 32) | v33;
              if (v37 != v38)
              {
                if ((a2 == 4) == ((v36 & 0xFF000000000000) != 0x4000000000000))
                {
                  char v39 = *(unsigned char *)(v12 + 1220);
                  if (a2 == 4) {
                    char v40 = v39 & ~(1 << v6);
                  }
                  else {
                    char v40 = v39 | (1 << v6);
                  }
                  *(unsigned char *)(v12 + 1220) = v40;
                  *(_DWORD *)(a1 + 1548) |= 0x4000u;
                }
                *(void *)(v12 + 952) |= v20;
                *int v35 = v38;
                *(void *)(a1 + 26184) = gleSetVertexArrayFunc;
                *(void *)(a1 + 26192) = gleSetVertexArrayFunc;
                *(void *)(a1 + 26200) = gleSetVertexElemFunc;
                *(void *)(a1 + 26208) = gleSetVertexElemFunc;
                *(_DWORD *)uint64_t v5 = 0;
                *(_DWORD *)(a1 + 1532) |= 0x1000u;
              }
              return;
            }
LABEL_39:
            *(void *)(v12 + 952) |= v20;
            goto LABEL_40;
          }
          uint64_t v29 = *(void *)(v12 + 912);
          if ((v29 & v20) != 0)
          {
            *(void *)(v12 + 912) = v29 & ~v20;
            if ((*(void *)(v12 + 904) & v20) != 0)
            {
              uint64_t v52 = v5;
              char v30 = v6;
              int v49 = v16;
              uint64_t v44 = v21;
              uint64_t v46 = v19;
              gleUpdateDrawArraysFuncs(a1);
              uint64_t v21 = v44;
              uint64_t v19 = v46;
              int v16 = v49;
              LOBYTE(v6) = v30;
              uint64_t v5 = v52;
            }
          }
          uint64_t v31 = *(unsigned __int8 *)(v5 + 3844);
          if (*(unsigned char *)(v5 + 3844))
          {
            uint64_t v32 = (void *)(v12 + 8 * v18 + 1496);
            do
            {
              *uint64_t v32 = 0;
              v32 += 35;
              --v31;
            }
            while (v31);
          }
          goto LABEL_39;
        default:
LABEL_29:
          if (*(_WORD *)(a1 + 29832)) {
            return;
          }
          __int16 v17 = 1280;
          goto LABEL_31;
      }
    }
  }
  if (!*(_WORD *)(a1 + 29832))
  {
    __int16 v17 = 1281;
    goto LABEL_31;
  }
}

unint64_t glDrawArrays_Exec(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5, double a6, double a7)
{
  uint64_t v7 = (unsigned __int16 *)(result + 26336);
  if (a2 >= 7)
  {
    if (*(_WORD *)(result + 29832)) {
      return result;
    }
    __int16 v21 = 1280;
    goto LABEL_35;
  }
  unint64_t v8 = result;
  uint64_t v9 = *(void *)(result + 26384);
  if ((~*(_DWORD *)(v9 + 904) & 0x900000) != 0 && *(unsigned char *)(result + 17699) != 0
    || (*(void *)(v9 + 904) & 0x100010000) == 0)
  {
    return result;
  }
  if ((int)a4 <= 0)
  {
    if ((a4 & 0x80000000) == 0 || *(_WORD *)(result + 29832)) {
      return result;
    }
    __int16 v21 = 1281;
    goto LABEL_35;
  }
  uint64_t v15 = *(void *)(result + 26432);
  if (*(__int16 *)(v15 + 42) != -1 && !*(unsigned char *)(v15 + 41))
  {
    unsigned int v22 = a4;
    switch((int)a2)
    {
      case 0:
      case 2:
        break;
      case 1:
        unsigned int v22 = a4 >> 1;
        break;
      case 3:
        unsigned int v22 = a4 - 1;
        break;
      case 4:
        unsigned int v22 = a4 / 3;
        break;
      case 5:
      case 6:
        unsigned int v22 = a4 - 2;
        break;
      default:
        unsigned int v22 = 0;
        break;
    }
    unsigned int v23 = v22 + *(_DWORD *)(v15 + 176);
    if (v23 <= *(_DWORD *)(v15 + 180))
    {
      *(_DWORD *)(v15 + 176) = v23;
      goto LABEL_12;
    }
    if (*(_WORD *)(result + 29832)) {
      return result;
    }
    __int16 v21 = 1282;
LABEL_35:
    *(_WORD *)(result + 29832) = v21;
    return result;
  }
LABEL_12:
  if (*v7 != 5375)
  {
    *(void *)(result + 26312) = 0;
    *uint64_t v7 = 5375;
  }
  uint64_t result = gleDrawArraysOrElements_Entries_Body(result, 2, a2, 1u, v9 + 40, a5, a6, a7);
  if (result != 2)
  {
    int v19 = result;
    if (!result
      || (uint64_t result = (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t, void, void, uint64_t, void))(v8 + 29232))(*(void *)(v8 + 29016), 0, a2, a3, a4, *v7, *(void *)(v8 + 26312), 1, 0), !result))
    {
      if ((*((_DWORD *)v7 + 579) & (1 << a2)) != 0
        && (*((unsigned char *)v7 + 2345) & 1) != 0
        && (*((unsigned char *)v7 + 2347) & 2) != 0)
      {
        if (!*(unsigned char *)(v8 + 32482))
        {
LABEL_21:
          if (v19 && *(void *)(v9 + 912) && !*(unsigned char *)(v9 + 1216)) {
            gleSynchronizeBuffersInArray(v8, v9 + 40);
          }
          uint64_t result = gleDrawArraysOrElements_ExecCore(v8, a2, a3, a4, 0, v9 + 40, 1);
        }
      }
      else
      {
        uint64_t result = gleDoDrawDispatchCore(v8, 1 << a2, 1u, 2u, v16, v17, v18);
        if (result) {
          goto LABEL_21;
        }
      }
    }
    int v20 = *(_DWORD *)(*(void *)(v8 + 19296) + 316);
    if (*((_DWORD *)v7 + 870) != v20)
    {
      if (*(void *)(v8 + 28960))
      {
        uint64_t result = gleInvalidateCurrentDrawFramebufferTextures(v8);
        int v20 = *(_DWORD *)(*(void *)(v8 + 19296) + 316);
      }
      *((_DWORD *)v7 + 870) = v20;
    }
  }
  return result;
}

uint64_t gleFlushAtomicFunc(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(a1 + 28144))();
  *(unsigned char *)(a1 + 28668) = 1;
  *(void *)(a1 + 26008) = *(void *)(a1 + 26000);
  return result;
}

uint64_t glGetBooleanv_Exec(uint64_t a1, int a2, BOOL *a3, double a4, double a5, double a6)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  char v18 = 0;
  int v17 = 0;
  uint64_t result = gleGetState(a1, a2, (uint64_t)v19, &v17, &v18, a4, a5, a6);
  if (result == -2)
  {
    uint64_t v9 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return result;
    }
    __int16 v10 = 1282;
    goto LABEL_7;
  }
  if (result == -1)
  {
    uint64_t v9 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return result;
    }
    __int16 v10 = 1280;
LABEL_7:
    *uint64_t v9 = v10;
    return result;
  }
  if (v17 == 5124)
  {
    if ((int)result >= 1)
    {
      uint64_t v11 = result;
      uint64_t v12 = (uint64_t *)v19;
      do
      {
        uint64_t v13 = *v12++;
        *a3++ = v13 != 0;
        --v11;
      }
      while (v11);
    }
  }
  else if ((int)result >= 1)
  {
    uint64_t v14 = result;
    uint64_t v15 = (double *)v19;
    do
    {
      double v16 = *v15++;
      *a3++ = v16 != 0.0;
      --v14;
    }
    while (v14);
  }
  return result;
}

uint64_t gleGetEnabled(uint64_t a1, int a2)
{
  if (a2 < 12288)
  {
    if (a2 > 3023)
    {
      switch(a2)
      {
        case 3024:
          return *(unsigned __int8 *)(a1 + 15224);
        case 3042:
          LOBYTE(v3) = *(unsigned char *)(a1 + 15120);
          return v3 & 1;
        case 3089:
          return *(unsigned __int8 *)(a1 + 15556);
      }
    }
    else
    {
      switch(a2)
      {
        case 2884:
          return *(unsigned __int8 *)(a1 + 15534);
        case 2929:
          return *(unsigned __int8 *)(a1 + 15204);
        case 2960:
          LOBYTE(v3) = *(unsigned char *)(a1 + 15644);
          return v3 & 1;
      }
    }
  }
  else if (a2 > 32822)
  {
    switch(a2)
    {
      case 32823:
        return *(unsigned __int8 *)(a1 + 15537);
      case 32926:
        return *(unsigned __int8 *)(a1 + 17681);
      case 32928:
        return *(unsigned __int8 *)(a1 + 17683);
    }
  }
  else if ((a2 - 12288) < 6)
  {
LABEL_4:
    unsigned int v2 = *(_DWORD *)(a1 + 17572);
LABEL_5:
    unsigned int v3 = v2 >> a2;
    return v3 & 1;
  }
  uint64_t v5 = (__int16 *)(a1 + 29832);
  int v6 = *(unsigned __int8 *)(a1 + 32501);
  if (v6 != 2)
  {
    if (a2 == 35977 && v6 == 4) {
      return *(unsigned __int8 *)(a1 + 17984);
    }
    if (a2 == 36201 && v6 == 4) {
      return *(unsigned __int8 *)(a1 + 17716);
    }
    if (a2 >> 1 == 6147 && (v6 - 3) <= 1) {
      goto LABEL_4;
    }
    goto LABEL_47;
  }
  if (a2 > 32825)
  {
    if (a2 > 32926)
    {
      if (a2 > 34883)
      {
        switch(a2)
        {
          case 34884:
            return (*(_DWORD *)(*(void *)(a1 + 26384) + 904) >> 23) & 1;
          case 34913:
            return *(unsigned __int8 *)(a1 + 15377);
          case 35740:
            return (*(_DWORD *)(*(void *)(a1 + 26384) + 904) >> 22) & 1;
          default:
            goto LABEL_47;
        }
      }
      else
      {
        switch(a2)
        {
          case 32927:
            return *(unsigned __int8 *)(a1 + 17682);
          case 34477:
            return (*(_DWORD *)(*(void *)(a1 + 26384) + 904) >> 20) & 1;
          case 34880:
            return *(unsigned __int8 *)(a1 + 17699);
          default:
            goto LABEL_47;
        }
      }
    }
    else
    {
      switch(a2)
      {
        case 32884:
          LOBYTE(v3) = *(unsigned char *)(*(void *)(a1 + 26384) + 906);
          return v3 & 1;
        case 32885:
          return (*(_DWORD *)(*(void *)(a1 + 26384) + 904) >> 17) & 1;
        case 32886:
          return (*(_DWORD *)(*(void *)(a1 + 26384) + 904) >> 18) & 1;
        case 32887:
          goto LABEL_47;
        case 32888:
          return (*(void *)(*(void *)(a1 + 26384) + 904) >> *(_WORD *)(a1 + 23770) >> 24) & 1;
        default:
          if (a2 == 32826)
          {
            uint64_t result = *(unsigned __int8 *)(a1 + 12517);
          }
          else
          {
            if (a2 != 32925) {
              goto LABEL_47;
            }
            uint64_t result = *(unsigned __int8 *)(a1 + 17680);
          }
          break;
      }
    }
  }
  else if (a2 > 3057)
  {
    if ((a2 - 0x4000) < 8)
    {
      unsigned int v2 = *(_DWORD *)(a1 + 14880);
      goto LABEL_5;
    }
    if (a2 != 3058)
    {
      if (a2 == 3553)
      {
        if (*(unsigned __int16 *)(a1 + 23768) < 8uLL) {
          return (*(unsigned __int8 *)(a1 + 76 * *(unsigned __int16 *)(a1 + 23768) + 15684) >> 3) & 1;
        }
        if (*v5) {
          return 0;
        }
        uint64_t result = 0;
        __int16 v7 = 1282;
        goto LABEL_73;
      }
LABEL_47:
      if (*v5) {
        return 0;
      }
      uint64_t result = 0;
      __int16 v7 = 1280;
LABEL_73:
      *uint64_t v5 = v7;
      return result;
    }
    return *(unsigned __int8 *)(a1 + 15319);
  }
  else if (a2 <= 2902)
  {
    switch(a2)
    {
      case 2832:
        return *(unsigned char *)(a1 + 32507) & 0x7F;
      case 2848:
        return *(unsigned __int8 *)(a1 + 15315);
      case 2896:
        return *(unsigned __int8 *)(a1 + 14890);
      default:
        goto LABEL_47;
    }
  }
  else if (a2 > 2976)
  {
    if (a2 != 2977)
    {
      if (a2 == 3008) {
        return *(unsigned __int8 *)(a1 + 15006);
      }
      goto LABEL_47;
    }
    return *(unsigned __int8 *)(a1 + 12516);
  }
  else
  {
    if (a2 != 2903)
    {
      if (a2 == 2912) {
        return *(unsigned __int8 *)(a1 + 15282);
      }
      goto LABEL_47;
    }
    return *(unsigned __int8 *)(a1 + 14891);
  }
  return result;
}

uint64_t gleSetEnable_SCISSOR_TEST(uint64_t result, uint64_t a2, int a3)
{
  int v3 = a3 != 0;
  if (*(_DWORD *)(result + 15576) != v3)
  {
    int v4 = (_DWORD *)(result + 28652);
    *(_DWORD *)(result + 15576) = v3;
    uint64_t result = gleUpdateViewScissorData(result);
    *int v4 = 0;
    v4[287] |= 0x4000000u;
  }
  return result;
}

uint64_t gleSetEnable_DITHER(uint64_t result, uint64_t a2, int a3)
{
  if (*(unsigned __int8 *)(result + 15224) != a3)
  {
    *(unsigned char *)(result + 15224) = a3;
    *(_DWORD *)(result + 29800) |= 0x400u;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1548) |= 0x40000u;
  }
  return result;
}

uint64_t glColorMask_Exec(uint64_t result, int a2, int a3, int a4, int a5)
{
  uint64_t v5 = (char *)(result + 15336);
  if (a2) {
    int v6 = 255;
  }
  else {
    int v6 = 0;
  }
  if (a2) {
    char v7 = -1;
  }
  else {
    char v7 = 0;
  }
  if (a3) {
    unsigned __int8 v8 = -1;
  }
  else {
    unsigned __int8 v8 = 0;
  }
  if (a4) {
    unsigned __int8 v9 = -1;
  }
  else {
    unsigned __int8 v9 = 0;
  }
  if (a5) {
    unsigned __int8 v10 = -1;
  }
  else {
    unsigned __int8 v10 = 0;
  }
  if (*v5 != v6
    || *(unsigned __int8 *)(result + 15337) != v8
    || *(unsigned __int8 *)(result + 15338) != v9
    || *(unsigned __int8 *)(result + 15339) != v10)
  {
    *uint64_t v5 = v7;
    *(unsigned char *)(result + 15337) = v8;
    *(unsigned char *)(result + 15338) = v9;
    *(unsigned char *)(result + 15339) = v10;
    if (a3 | a2 | a4 | a5) {
      int v11 = 255;
    }
    else {
      int v11 = 0;
    }
    unsigned int v12 = *(_DWORD *)(result + 29804) & 0xFFFFFF00 | v11;
    *(_DWORD *)(result + 29804) = v12;
    uint64_t v13 = *(void *)(result + 28960);
    if (v13) {
      uint64_t v14 = (_DWORD *)(v13 + 552);
    }
    else {
      uint64_t v14 = (_DWORD *)(result + 29808);
    }
    *(_WORD *)(result + 15342) = *v14 & v12;
    *(_DWORD *)(result + 29800) |= 0x40000u;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1548) |= 0x40000u;
  }
  return result;
}

uint64_t glDepthMask_Exec(uint64_t result, int a2)
{
  int v2 = a2 != 0;
  if (*(unsigned __int8 *)(result + 15340) != v2)
  {
    *(unsigned char *)(result + 15340) = v2;
    unsigned int v3 = *(_DWORD *)(result + 29804) & 0xFFFFFEFF | ((a2 != 0) << 8);
    *(_DWORD *)(result + 29804) = v3;
    uint64_t v4 = *(void *)(result + 28960);
    if (v4) {
      uint64_t v5 = (_DWORD *)(v4 + 552);
    }
    else {
      uint64_t v5 = (_DWORD *)(result + 29808);
    }
    *(_WORD *)(result + 15342) = *v5 & v3;
    *(_DWORD *)(result + 29800) |= 0x80000u;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1548) |= 0x40000u;
  }
  return result;
}

uint64_t glStencilMask_Exec(uint64_t result, int a2)
{
  int v2 = (_DWORD *)(result + 28652);
  if (*(_DWORD *)(result + 29776) == 1028)
  {
    if (*(_DWORD *)(result + 15324) == a2 && *(_DWORD *)(result + 15332) == a2) {
      return result;
    }
    *(_DWORD *)(result + 15324) = a2;
    *(_DWORD *)(result + 15332) = a2;
    int v3 = *(_DWORD *)(result + 15644);
    if (v3 == 65)
    {
      LOBYTE(v4) = 1;
      *(_DWORD *)(result + 15644) = 1;
      *int v2 = 0;
      *(_DWORD *)(result + 1548) |= 0x8000u;
    }
    else
    {
      LOBYTE(v4) = v3 & 0xBF;
      *(_DWORD *)(result + 15644) = v3 & 0xFFFFFFBF;
    }
  }
  else
  {
    if (*(_DWORD *)(result + 15328) == a2) {
      return result;
    }
    *(_DWORD *)(result + 15328) = a2;
    int v4 = *(_DWORD *)(result + 15644);
    a2 = *(_DWORD *)(result + 15324);
  }
  uint64_t v5 = 8;
  if ((v4 & 4) != 0) {
    uint64_t v5 = 4;
  }
  unsigned int v6 = *(_DWORD *)(result + 29804) & 0xFFFFF9FF;
  if (a2) {
    v6 |= 0x200u;
  }
  *(_DWORD *)(result + 29804) = v6;
  if (*(_DWORD *)(result + v5 + 15324))
  {
    v6 |= 0x400u;
    *(_DWORD *)(result + 29804) = v6;
  }
  uint64_t v7 = *(void *)(result + 28960);
  if (v7) {
    unsigned __int8 v8 = (_WORD *)(v7 + 552);
  }
  else {
    unsigned __int8 v8 = (_WORD *)(result + 29808);
  }
  *(_WORD *)(result + 15342) = *v8 & v6;
  *(_DWORD *)(result + 29800) |= 0x100000u;
  *int v2 = 0;
  *(_DWORD *)(result + 1548) |= 0x40000u;
  return result;
}

uint64_t glHint_Exec(uint64_t result, int a2, int a3)
{
  int v3 = (_WORD *)(result + 29832);
  if ((a3 - 4355) <= 0xFFFFFFFC) {
    goto LABEL_2;
  }
  int v4 = *(unsigned __int8 *)(result + 32501);
  if (a2 == 3154 && v4 == 2)
  {
    *(_WORD *)(result + 15288) = a3;
LABEL_13:
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1524) |= 0x8000000u;
    return result;
  }
  if (a2 == 35723 && (v4 - 3) <= 1)
  {
    *(_WORD *)(result + 15300) = a3;
    goto LABEL_13;
  }
  if (a2 == 33170)
  {
    *(_WORD *)(result + 15296) = a3;
    goto LABEL_13;
  }
  if (v4 == 2)
  {
    switch(a2)
    {
      case 3156:
        *(_WORD *)(result + 15292) = a3;
        return gleUpdateFogData(result);
      case 3153:
        *(_WORD *)(result + 15286) = a3;
        goto LABEL_13;
      case 3152:
        *(_WORD *)(result + 15284) = a3;
        *(_DWORD *)(result + 1548) |= 0x30400u;
        goto LABEL_13;
    }
  }
LABEL_2:
  if (!*v3) {
    *int v3 = 1280;
  }
  return result;
}

void glePPUpdateProgram(uint64_t a1, int16x4_t *a2)
{
  if ((a2[53].i8[2] & 0xFB) != 0) {
    int v4 = 0;
  }
  else {
    int v4 = 67109888;
  }
  int __pattern4 = v4;
  uint64_t v5 = a2 + 71;
  memset_pattern4(&a2[71], &__pattern4, 0xED8uLL);
  a2[17].i32[1] = 0;
  int16x4_t v6 = a2[54];
  if (v6)
  {
    uint64_t v13 = v5;
    if (a2[52].i8[1]) {
      BOOL v7 = (*(_WORD *)(*(void *)(a1 + 19296) + 346) & 1) == 0;
    }
    else {
      BOOL v7 = 0;
    }
    a2[52].i8[2] = glePPSetParamRemap(0xFFFFFFFF, *(void *)&v6 + 8 * *(unsigned int *)(*(void *)&v6 + 60), *(_DWORD *)(*(void *)&v6 + 56), v7, &v13, (uint64_t)&a2[18], (uint64_t)&a2[34], (int *)&a2[17] + 1);
    PPStreamTokenConvertParamBindings();
  }
  if (a2[55])
  {
    unsigned __int8 v8 = (int *)a2[13];
    if (v8)
    {
      int v11 = *v8;
      uint64_t v9 = (uint64_t)(v8 + 4);
      int v10 = v11;
      uint64_t v13 = v5;
      if (a2[52].i8[1]) {
        BOOL v12 = (*(_WORD *)(*(void *)(a1 + 19296) + 346) & 1) == 0;
      }
      else {
        BOOL v12 = 0;
      }
      a2[52].i8[2] = glePPSetParamRemap(0xFFFFFFFF, v9, v10, v12, &v13, (uint64_t)&a2[18], (uint64_t)&a2[34], (int *)&a2[17] + 1);
      PPStreamTokenConvertParamBindingsToGeneric();
    }
  }
}

uint64_t gleVPEnable(uint64_t a1)
{
  int v2 = (_DWORD *)(a1 + 28652);
  int v3 = (unsigned char *)(a1 + 17700);
  *(unsigned char *)(*(void *)(a1 + 1424) + 496) |= 0x1Eu;
  *(unsigned char *)(*(void *)(a1 + 1432) + 496) |= 0x1Eu;
  int v4 = *(_DWORD *)(a1 + 24864);
  if ((v4 & 8) != 0)
  {
    uint64_t v7 = *(void *)(a1 + 24768);
    if (!v7) {
      uint64_t v7 = *(void *)(*(void *)(a1 + 24776) + 64);
    }
    if (*(unsigned char *)(v7 + 2326)) {
      int v5 = 0;
    }
    else {
      int v5 = *(unsigned __int8 *)(a1 + 29714);
    }
    if (!*(unsigned char *)(v7 + 2327)) {
      goto LABEL_17;
    }
    goto LABEL_14;
  }
  if (v4)
  {
    uint64_t v8 = *(void *)(a1 + 24768);
    if (!v8) {
      uint64_t v8 = *(void *)(*(void *)(a1 + 24776) + 40);
    }
    if (*(unsigned char *)(v8 + 214)) {
      int v5 = 0;
    }
    else {
      int v5 = *(unsigned __int8 *)(a1 + 29714);
    }
    if (!*(unsigned char *)(v8 + 215))
    {
LABEL_17:
      int v6 = *(unsigned __int8 *)(a1 + 29714);
      goto LABEL_18;
    }
LABEL_14:
    int v6 = 0;
    goto LABEL_18;
  }
  int v5 = *(unsigned __int8 *)(a1 + 29714);
  int v6 = v5;
LABEL_18:
  uint64_t v9 = (unsigned char *)(a1 + 14890);
  if (v5 != *(unsigned __int8 *)(a1 + 17702) || v6 != *(unsigned __int8 *)(a1 + 17703))
  {
    *(unsigned char *)(a1 + 17702) = v5;
    *(unsigned char *)(a1 + 17703) = v6;
    *(_DWORD *)(a1 + 1524) |= 0x400000u;
    *int v2 = 0;
    *(_DWORD *)(a1 + 1548) |= 0x400u;
  }
  int v10 = v4 & 9;
  if (v10 || *(unsigned char *)(a1 + 24756))
  {
    int v11 = *(unsigned __int8 *)(a1 + 24750);
  }
  else if (*(unsigned char *)(a1 + 15379))
  {
    int v11 = 1;
  }
  else
  {
    int v11 = *(unsigned char *)(a1 + 15378) != 0;
  }
  if (v11 != *v3)
  {
    *int v3 = v11;
    *(_DWORD *)(a1 + 1532) |= 0x40000000u;
    *int v2 = 0;
    *(_DWORD *)(a1 + 1548) |= 0x10000000u;
  }
  if (v10 || *(unsigned char *)(a1 + 24756))
  {
    int v12 = *(unsigned __int8 *)(a1 + 24751);
  }
  else
  {
    int v12 = *v9;
    if (*v9) {
      int v12 = *(unsigned char *)(a1 + 14892) != 0;
    }
  }
  if (v12 != *(unsigned __int8 *)(a1 + 17701))
  {
    *(unsigned char *)(a1 + 17701) = v12;
    *(_DWORD *)(a1 + 1532) |= 0x40000000u;
    *int v2 = 0;
    int v13 = *(_DWORD *)(a1 + 1548);
    *(_DWORD *)(a1 + 1548) = v13 | 0x10008400;
    if ((*(unsigned char *)(*(void *)(a1 + 29032) + 25) & 0x7F) != 0) {
      *(_DWORD *)(a1 + 1548) = v13 | 0x10038400;
    }
  }
  gleVPChangedCore(a1);

  return gleSetColorMaterialEnable(a1);
}

uint64_t gleVPChanged(uint64_t a1)
{
  uint64_t v1 = (_DWORD *)(a1 + 28652);
  int v2 = (unsigned char *)(a1 + 17700);
  int v3 = *(_DWORD *)(a1 + 24864);
  if ((v3 & 8) != 0)
  {
    uint64_t v6 = *(void *)(a1 + 24768);
    if (!v6) {
      uint64_t v6 = *(void *)(*(void *)(a1 + 24776) + 64);
    }
    if (*(unsigned char *)(v6 + 2326)) {
      int v4 = 0;
    }
    else {
      int v4 = *(unsigned __int8 *)(a1 + 29714);
    }
    if (!*(unsigned char *)(v6 + 2327)) {
      goto LABEL_17;
    }
    goto LABEL_14;
  }
  if (v3)
  {
    uint64_t v7 = *(void *)(a1 + 24768);
    if (!v7) {
      uint64_t v7 = *(void *)(*(void *)(a1 + 24776) + 40);
    }
    if (*(unsigned char *)(v7 + 214)) {
      int v4 = 0;
    }
    else {
      int v4 = *(unsigned __int8 *)(a1 + 29714);
    }
    if (!*(unsigned char *)(v7 + 215))
    {
LABEL_17:
      int v5 = *(unsigned __int8 *)(a1 + 29714);
      goto LABEL_18;
    }
LABEL_14:
    int v5 = 0;
    goto LABEL_18;
  }
  int v4 = *(unsigned __int8 *)(a1 + 29714);
  int v5 = v4;
LABEL_18:
  uint64_t v8 = (unsigned char *)(a1 + 14890);
  if (v4 != *(unsigned __int8 *)(a1 + 17702) || v5 != *(unsigned __int8 *)(a1 + 17703))
  {
    *(unsigned char *)(a1 + 17702) = v4;
    *(unsigned char *)(a1 + 17703) = v5;
    *(_DWORD *)(a1 + 1524) |= 0x400000u;
    *uint64_t v1 = 0;
    *(_DWORD *)(a1 + 1548) |= 0x400u;
  }
  int v9 = v3 & 9;
  if (v9 || *(unsigned char *)(a1 + 24756))
  {
    int v10 = *(unsigned __int8 *)(a1 + 24750);
  }
  else if (*(unsigned char *)(a1 + 15379))
  {
    int v10 = 1;
  }
  else
  {
    int v10 = *(unsigned char *)(a1 + 15378) != 0;
  }
  if (v10 != *v2)
  {
    *int v2 = v10;
    *(_DWORD *)(a1 + 1532) |= 0x40000000u;
    *uint64_t v1 = 0;
    *(_DWORD *)(a1 + 1548) |= 0x10000000u;
  }
  if (v9 || *(unsigned char *)(a1 + 24756))
  {
    int v11 = *(unsigned __int8 *)(a1 + 24751);
  }
  else
  {
    int v11 = *v8;
    if (*v8) {
      int v11 = *(unsigned char *)(a1 + 14892) != 0;
    }
  }
  if (v11 != *(unsigned __int8 *)(a1 + 17701))
  {
    *(unsigned char *)(a1 + 17701) = v11;
    *(_DWORD *)(a1 + 1532) |= 0x40000000u;
    *uint64_t v1 = 0;
    int v12 = *(_DWORD *)(a1 + 1548);
    *(_DWORD *)(a1 + 1548) = v12 | 0x10008400;
    if ((*(unsigned char *)(*(void *)(a1 + 29032) + 25) & 0x7F) != 0) {
      *(_DWORD *)(a1 + 1548) = v12 | 0x10038400;
    }
  }
  return gleVPChangedCore(a1);
}

uint64_t gleGPEnable(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 1424) + 496) |= 0x1Eu;
  *(unsigned char *)(*(void *)(a1 + 1432) + 496) |= 0x1Eu;
  return gleGPChanged(a1);
}

uint64_t gleGPChanged(uint64_t a1)
{
  uint64_t v2 = a1 + 28652;
  int v3 = (unsigned __int16 *)(a1 + 14888);
  int v4 = *(_DWORD *)(a1 + 24864);
  if ((v4 & 9) != 0 || *(unsigned char *)(a1 + 24756))
  {
    int v5 = *(unsigned __int8 *)(a1 + 24751);
  }
  else
  {
    int v5 = *(unsigned __int8 *)(a1 + 14890);
    if (*(unsigned char *)(a1 + 14890)) {
      int v5 = *(unsigned char *)(a1 + 14892) != 0;
    }
  }
  if (v5 != *(unsigned __int8 *)(a1 + 17701))
  {
    *(unsigned char *)(a1 + 17701) = v5;
    *(_DWORD *)(a1 + 1532) |= 0x40000000u;
    *(_DWORD *)uint64_t v2 = 0;
    int v6 = *(_DWORD *)(a1 + 1548);
    *(_DWORD *)(a1 + 1548) = v6 | 0x10008400;
    if ((*(unsigned char *)(*(void *)(a1 + 29032) + 25) & 0x7F) != 0) {
      *(_DWORD *)(a1 + 1548) = v6 | 0x10038400;
    }
  }
  if ((v4 & 9) != 0 || *(unsigned char *)(a1 + 24756))
  {
    int v7 = *(unsigned __int8 *)(a1 + 24750);
  }
  else if (*(unsigned char *)(a1 + 15379))
  {
    int v7 = 1;
  }
  else
  {
    int v7 = *(unsigned char *)(a1 + 15378) != 0;
  }
  if (v7 != *(unsigned __int8 *)(a1 + 17700))
  {
    *(unsigned char *)(a1 + 17700) = v7;
    *(_DWORD *)(a1 + 1532) |= 0x40000000u;
    *(_DWORD *)uint64_t v2 = 0;
    *(_DWORD *)(a1 + 1548) |= 0x10000000u;
  }
  if ((v4 & 8) != 0)
  {
    uint64_t v10 = *(void *)(a1 + 24768);
    if (!v10) {
      uint64_t v10 = *(void *)(*(void *)(a1 + 24776) + 64);
    }
    if (*(unsigned char *)(v10 + 2326)) {
      int v8 = 0;
    }
    else {
      int v8 = *(unsigned __int8 *)(a1 + 29714);
    }
    if (!*(unsigned char *)(v10 + 2327)) {
      goto LABEL_32;
    }
    goto LABEL_25;
  }
  if (v4)
  {
    uint64_t v11 = *(void *)(a1 + 24768);
    if (!v11) {
      uint64_t v11 = *(void *)(*(void *)(a1 + 24776) + 40);
    }
    if (*(unsigned char *)(v11 + 214)) {
      int v8 = 0;
    }
    else {
      int v8 = *(unsigned __int8 *)(a1 + 29714);
    }
    if (!*(unsigned char *)(v11 + 215))
    {
LABEL_32:
      int v9 = *(unsigned __int8 *)(a1 + 29714);
      goto LABEL_33;
    }
LABEL_25:
    int v9 = 0;
    goto LABEL_33;
  }
  int v8 = *(unsigned __int8 *)(a1 + 29714);
  int v9 = v8;
LABEL_33:
  if (v8 != *(unsigned __int8 *)(a1 + 17702) || v9 != *(unsigned __int8 *)(a1 + 17703))
  {
    *(unsigned char *)(a1 + 17702) = v8;
    *(unsigned char *)(a1 + 17703) = v9;
    *(_DWORD *)(a1 + 1524) |= 0x400000u;
    *(_DWORD *)uint64_t v2 = 0;
    *(_DWORD *)(a1 + 1548) |= 0x400u;
  }
  if ((v4 & 8) != 0)
  {
    uint64_t v13 = *(void *)(a1 + 24768);
    if (!v13) {
      uint64_t v13 = *(void *)(*(void *)(a1 + 24776) + 64);
    }
    uint64_t v12 = *(void *)(v13 + 2280);
    if (*(unsigned char *)(v13 + 2325))
    {
      uint64_t v14 = 0;
      uint64_t v15 = v13 + 2340;
      do
      {
        *(_DWORD *)(a1 + 1936 + v14) = *(_DWORD *)(v15 + v14);
        v14 += 4;
      }
      while (v14 != 128);
      int v16 = 69271552;
      goto LABEL_45;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  *(_OWORD *)(a1 + 2048) = 0u;
  *(_OWORD *)(a1 + 2032) = 0u;
  *(_OWORD *)(a1 + 2016) = 0u;
  *(_OWORD *)(a1 + 2000) = 0u;
  *(_OWORD *)(a1 + 1984) = 0u;
  *(_OWORD *)(a1 + 1968) = 0u;
  *(_OWORD *)(a1 + 1952) = 0u;
  int v16 = 2162688;
  *(_OWORD *)(a1 + 1936) = 0u;
LABEL_45:
  *(void *)(a1 + 24352) = gleSetGPTransformFuncAll;
  *(void *)(a1 + 24360) = gleSetGPTransformFuncAll;
  gleUpdateInverseNeeds(a1);
  if (*((unsigned char *)v3 + 2))
  {
    int v17 = (v4 & 8) != 0 ? *(unsigned __int8 *)(v2 + 3854) : (*v3 == 33274);
    if (v17 != *((unsigned __int8 *)v3 + 395))
    {
      *((unsigned char *)v3 + 395) = v17;
      *(_DWORD *)uint64_t v2 = 0;
      *(_DWORD *)(a1 + 1548) |= 0x20000u;
    }
  }
  uint64_t result = gleUpdateInvalidPrimitives(a1);
  if (*(void *)(a1 + 19272) == v12) {
    int v16 = 2162688;
  }
  else {
    *(void *)(a1 + 19272) = v12;
  }
  *(_DWORD *)(a1 + 1532) |= v16;
  *(_DWORD *)uint64_t v2 = 0;
  *(_DWORD *)(a1 + 1548) |= 0x808202u;
  return result;
}

uint64_t gleFPChanged(uint64_t a1)
{
  uint64_t v2 = a1 + 24760;
  if ((*(unsigned char *)(a1 + 24864) & 0x10) != 0)
  {
    uint64_t v6 = *(void *)(a1 + 24768);
    if (!v6) {
      uint64_t v6 = *(void *)(*(void *)(a1 + 24776) + 72);
    }
    int v7 = (uint64_t *)(v6 + 3044);
    int v8 = *(uint64_t **)(v6 + 2984);
    int v9 = *(unsigned __int8 *)(v6 + 3029);
  }
  else
  {
    int v3 = (unsigned char *)(a1 + 32496);
    if (*(unsigned char *)v2)
    {
      uint64_t v4 = *(void *)(a1 + 24432);
      int v5 = (uint64_t *)(v4 + 40);
      if (!*(void *)(v4 + 472))
      {
        *(_DWORD *)(a1 + 28652) = 0;
        *(_DWORD *)(a1 + 1540) |= 0x20000000u;
      }
    }
    else
    {
      int v5 = *(uint64_t **)(a1 + 24512);
    }
    int v7 = v5 + 34;
    int v8 = v5 + 71;
    int v9 = *((unsigned __int8 *)v5 + 418);
    uint64_t v10 = *v3;
    if (*v3)
    {
      uint64_t v11 = (void *)(a1 + 33464);
      do
      {
        uint64_t v12 = *v5++;
        *uint64_t v11 = v12;
        v11 += 209;
        --v10;
      }
      while (v10);
    }
  }
  if (v9)
  {
    for (uint64_t i = 0; i != 128; i += 4)
      *(_DWORD *)(a1 + 2064 + i) = *(_DWORD *)((char *)v7 + i);
  }
  else
  {
    *(_OWORD *)(a1 + 2176) = 0u;
    *(_OWORD *)(a1 + 2160) = 0u;
    *(_OWORD *)(a1 + 2144) = 0u;
    *(_OWORD *)(a1 + 2128) = 0u;
    *(_OWORD *)(a1 + 2112) = 0u;
    *(_OWORD *)(a1 + 2096) = 0u;
    *(_OWORD *)(a1 + 2080) = 0u;
    *(_OWORD *)(a1 + 2064) = 0u;
  }
  gleUpdateFogData(a1);
  uint64_t result = gleUpdateInverseNeeds(a1);
  int v15 = 4325376;
  if (*(uint64_t **)(a1 + 19280) != v8)
  {
    *(void *)(a1 + 19280) = v8;
    if (v9) {
      int v15 = 138543104;
    }
    else {
      int v15 = 4325376;
    }
  }
  *(_DWORD *)(a1 + 1532) |= v15;
  *(_DWORD *)(v2 + 3892) = 0;
  *(_DWORD *)(a1 + 1548) |= 0x71018402u;
  return result;
}

uint64_t gleModifyPluginPipelineProgram(uint64_t result, uint64_t a2, int a3)
{
  int v3 = (unsigned __int8 *)(result + 32496);
  unsigned int v4 = *(unsigned __int8 *)(result + 32496);
  if (*(unsigned char *)(result + 32496))
  {
    unint64_t v7 = 0;
    uint64_t v8 = a3 & 5;
    int v9 = (void *)(result + 32520);
    do
    {
      *(_DWORD *)(a2 + 4 * v7 + 520) |= a3;
      if (v8)
      {
        uint64_t result = (*(uint64_t (**)(void, void, uint64_t))(v9[205] + 1640))(*v9, *(void *)(a2 + 8 * v7), v8);
        unsigned int v4 = *v3;
      }
      ++v7;
      v9 += 209;
    }
    while (v7 < v4);
  }
  return result;
}

float32x2_t *gleUpdateLightRGBASums(float32x2_t *result, float32x2_t *a2, int a3)
{
  __int8 v3 = a2[62].i8[0];
  float32x2_t v4 = a2[64];
  if (v4) {
    int v5 = (a2[62].u8[1] | *(unsigned __int8 *)(*(void *)&v4 + 496)) ^ 0xFF;
  }
  else {
    int v5 = 0;
  }
  if ((a2[62].i8[0] & 0xF) != 0)
  {
    if ((~v5 & 0xF) != 0)
    {
      a2[58] = vmla_f32(a2[6], *a2, result[1566]);
      a2[59].f32[0] = a2[7].f32[0] + (float)(result[1567].f32[0] * a2[1].f32[0]);
      a2[59].i32[1] = a2[3].i32[1];
      float32x2_t v7 = result[2406];
      if (v7)
      {
        unint64_t v8 = *(unsigned __int16 *)(*(void *)&v7 + 12 * a3 + 2826);
        if (v8 <= 0x3FF)
        {
          *(__int32 *)((char *)result[194].i32 + ((v8 >> 3) & 0x1FFC)) |= 1 << v8;
          result[3581].i32[1] = 0;
          result[191].i32[1] |= 0x800000u;
        }
      }
      uint64_t v6 = a2 + 58;
      float32x2_t v9 = result[2409];
      if (v9)
      {
        unint64_t v10 = *(unsigned __int16 *)(*(void *)&v9 + 12 * a3 + 2826);
        if (v10 <= 0x3FF)
        {
          *(__int32 *)((char *)result[242].i32 + ((v10 >> 3) & 0x1FFC)) |= 1 << v10;
          result[3581].i32[1] = 0;
          result[191].i32[1] |= 0x4000000u;
        }
      }
      float32x2_t v11 = result[2410];
      if (v11)
      {
        unint64_t v12 = *(unsigned __int16 *)(*(void *)&v11 + 12 * a3 + 2826);
        if (v12 <= 0x3FF)
        {
          *(__int32 *)((char *)result[258].i32 + ((v12 >> 3) & 0x1FFC)) |= 1 << v12;
          result[3581].i32[1] = 0;
          result[191].i32[1] |= 0x8000000u;
        }
      }
    }
    else
    {
      *(_OWORD *)a2[58].f32 = *(_OWORD *)(*(void *)&v4 + 464);
      uint64_t v6 = (float32x2_t *)(*(void *)&v4 + 480);
    }
    *(_OWORD *)a2[60].f32 = *(_OWORD *)v6->f32;
  }
  unsigned int v13 = result[1860].u32[0];
  if (v13)
  {
    uint64_t v14 = 0;
    int v15 = (_DWORD *)&result[3581] + 1;
    BOOL v17 = (~v5 & 0xF) == 0 || (v3 & 0xF) == 0;
    char v18 = (float *)&result[1573];
    uint64_t v19 = 6 * a3;
    uint64_t v20 = *(void *)&v4 + 112;
    do
    {
      if (v13)
      {
        __int16 v21 = &a2[v14 + 10];
        if ((v3 & 4) != 0)
        {
          if ((v5 & 4) != 0)
          {
            *(_OWORD *)v21->f32 = *(_OWORD *)(v20 + v14 * 8 - 32);
          }
          else
          {
            *__int16 v21 = vmul_f32(*(float32x2_t *)(v18 - 10), *a2);
            __int32 v22 = a2[1].i32[1];
            unsigned int v23 = &a2[v14];
            v23[11].f32[0] = *(v18 - 8) * a2[1].f32[0];
            v23[11].i32[1] = v22;
            float32x2_t v24 = result[2406];
            if (v24)
            {
              unint64_t v25 = *(unsigned __int16 *)(*(void *)&v24 + v19 + 2720);
              if (v25 <= 0x3FF)
              {
                *(__int32 *)((char *)result[194].i32 + ((v25 >> 3) & 0x1FFC)) |= 1 << v25;
                *int v15 = 0;
                result[191].i32[1] |= 0x800000u;
              }
            }
            float32x2_t v26 = result[2409];
            if (v26)
            {
              unint64_t v27 = *(unsigned __int16 *)(*(void *)&v26 + v19 + 2720);
              if (v27 <= 0x3FF)
              {
                *(__int32 *)((char *)result[242].i32 + ((v27 >> 3) & 0x1FFC)) |= 1 << v27;
                *int v15 = 0;
                result[191].i32[1] |= 0x4000000u;
              }
            }
            float32x2_t v28 = result[2410];
            if (v28)
            {
              unint64_t v29 = *(unsigned __int16 *)(*(void *)&v28 + v19 + 2720);
              if (v29 <= 0x3FF)
              {
                *(__int32 *)((char *)result[258].i32 + ((v29 >> 3) & 0x1FFC)) |= 1 << v29;
                *int v15 = 0;
                result[191].i32[1] |= 0x8000000u;
              }
            }
          }
        }
        if (!v17)
        {
          a2[60] = vadd_f32(*v21, a2[60]);
          a2[61].f32[0] = a2[v14 + 11].f32[0] + a2[61].f32[0];
        }
        if ((v3 & 8) != 0)
        {
          char v30 = &a2[v14];
          if ((v5 & 8) != 0)
          {
            *(_OWORD *)v30[12].f32 = *(_OWORD *)(v20 + v14 * 8 - 16);
          }
          else
          {
            v30[12] = vmul_f32(*(float32x2_t *)(v18 - 6), a2[2]);
            __int32 v31 = a2[3].i32[1];
            v30[13].f32[0] = *(v18 - 4) * a2[3].f32[0];
            v30[13].i32[1] = v31;
            float32x2_t v32 = result[2406];
            if (v32)
            {
              unint64_t v33 = *(unsigned __int16 *)(*(void *)&v32 + v19 + 2722);
              if (v33 <= 0x3FF)
              {
                *(__int32 *)((char *)result[194].i32 + ((v33 >> 3) & 0x1FFC)) |= 1 << v33;
                *int v15 = 0;
                result[191].i32[1] |= 0x800000u;
              }
            }
            float32x2_t v34 = result[2409];
            if (v34)
            {
              unint64_t v35 = *(unsigned __int16 *)(*(void *)&v34 + v19 + 2722);
              if (v35 <= 0x3FF)
              {
                *(__int32 *)((char *)result[242].i32 + ((v35 >> 3) & 0x1FFC)) |= 1 << v35;
                *int v15 = 0;
                result[191].i32[1] |= 0x4000000u;
              }
            }
            float32x2_t v36 = result[2410];
            if (v36)
            {
              unint64_t v37 = *(unsigned __int16 *)(*(void *)&v36 + v19 + 2722);
              if (v37 <= 0x3FF)
              {
                *(__int32 *)((char *)result[258].i32 + ((v37 >> 3) & 0x1FFC)) |= 1 << v37;
                *int v15 = 0;
                result[191].i32[1] |= 0x8000000u;
              }
            }
          }
        }
        if ((v3 & 0x10) != 0)
        {
          unint64_t v38 = &a2[v14];
          if ((v5 & 0x10) != 0)
          {
            *(_OWORD *)v38[14].f32 = *(_OWORD *)(v20 + v14 * 8);
          }
          else
          {
            v38[14] = vmul_f32(*(float32x2_t *)(v18 - 2), a2[4]);
            __int32 v39 = a2[5].i32[1];
            v38[15].f32[0] = *v18 * a2[5].f32[0];
            v38[15].i32[1] = v39;
            float32x2_t v40 = result[2406];
            if (v40)
            {
              unint64_t v41 = *(unsigned __int16 *)(*(void *)&v40 + v19 + 2724);
              if (v41 <= 0x3FF)
              {
                *(__int32 *)((char *)result[194].i32 + ((v41 >> 3) & 0x1FFC)) |= 1 << v41;
                *int v15 = 0;
                result[191].i32[1] |= 0x800000u;
              }
            }
            float32x2_t v42 = result[2409];
            if (v42)
            {
              unint64_t v43 = *(unsigned __int16 *)(*(void *)&v42 + v19 + 2724);
              if (v43 <= 0x3FF)
              {
                *(__int32 *)((char *)result[242].i32 + ((v43 >> 3) & 0x1FFC)) |= 1 << v43;
                *int v15 = 0;
                result[191].i32[1] |= 0x4000000u;
              }
            }
            float32x2_t v44 = result[2410];
            if (v44)
            {
              unint64_t v45 = *(unsigned __int16 *)(*(void *)&v44 + v19 + 2724);
              if (v45 <= 0x3FF)
              {
                *(__int32 *)((char *)result[258].i32 + ((v45 >> 3) & 0x1FFC)) |= 1 << v45;
                *int v15 = 0;
                result[191].i32[1] |= 0x8000000u;
              }
            }
          }
        }
      }
      v18 += 40;
      v14 += 6;
      v19 += 12;
      BOOL v46 = v13 > 1;
      v13 >>= 1;
    }
    while (v46);
  }
  a2[62].i8[0] = 0;
  return result;
}

uint64_t gleVPDisable(uint64_t a1)
{
  uint64_t v2 = a1 + 28652;
  int v3 = *(_DWORD *)(a1 + 24864);
  if ((v3 & 8) != 0)
  {
    uint64_t v6 = *(void *)(a1 + 24768);
    if (!v6) {
      uint64_t v6 = *(void *)(*(void *)(a1 + 24776) + 64);
    }
    if (*(unsigned char *)(v6 + 2326)) {
      int v4 = 0;
    }
    else {
      int v4 = *(unsigned __int8 *)(a1 + 29714);
    }
    if (!*(unsigned char *)(v6 + 2327)) {
      goto LABEL_17;
    }
    goto LABEL_14;
  }
  if (v3)
  {
    uint64_t v7 = *(void *)(a1 + 24768);
    if (!v7) {
      uint64_t v7 = *(void *)(*(void *)(a1 + 24776) + 40);
    }
    if (*(unsigned char *)(v7 + 214)) {
      int v4 = 0;
    }
    else {
      int v4 = *(unsigned __int8 *)(a1 + 29714);
    }
    if (!*(unsigned char *)(v7 + 215))
    {
LABEL_17:
      int v5 = *(unsigned __int8 *)(a1 + 29714);
      goto LABEL_18;
    }
LABEL_14:
    int v5 = 0;
    goto LABEL_18;
  }
  int v4 = *(unsigned __int8 *)(a1 + 29714);
  int v5 = v4;
LABEL_18:
  if (v4 != *(unsigned __int8 *)(a1 + 17702) || v5 != *(unsigned __int8 *)(a1 + 17703))
  {
    *(unsigned char *)(a1 + 17702) = v4;
    *(unsigned char *)(a1 + 17703) = v5;
    *(_DWORD *)(a1 + 1524) |= 0x400000u;
    *(_DWORD *)uint64_t v2 = 0;
    *(_DWORD *)(a1 + 1548) |= 0x400u;
  }
  int v8 = v3 & 9;
  if (v8 || *(unsigned char *)(a1 + 24756))
  {
    int v9 = *(unsigned __int8 *)(a1 + 24750);
  }
  else if (*(unsigned char *)(a1 + 15379))
  {
    int v9 = 1;
  }
  else
  {
    int v9 = *(unsigned char *)(a1 + 15378) != 0;
  }
  if (v9 != *(unsigned __int8 *)(a1 + 17700))
  {
    *(unsigned char *)(a1 + 17700) = v9;
    *(_DWORD *)(a1 + 1532) |= 0x40000000u;
    *(_DWORD *)uint64_t v2 = 0;
    *(_DWORD *)(a1 + 1548) |= 0x10000000u;
  }
  if (v8 || *(unsigned char *)(a1 + 24756))
  {
    int v10 = *(unsigned __int8 *)(a1 + 24751);
  }
  else
  {
    int v10 = *(unsigned __int8 *)(a1 + 14890);
    if (*(unsigned char *)(a1 + 14890)) {
      int v10 = *(unsigned char *)(a1 + 14892) != 0;
    }
  }
  if (v10 != *(unsigned __int8 *)(a1 + 17701))
  {
    *(unsigned char *)(a1 + 17701) = v10;
    *(_DWORD *)(a1 + 1532) |= 0x40000000u;
    *(_DWORD *)uint64_t v2 = 0;
    int v11 = *(_DWORD *)(a1 + 1548);
    *(_DWORD *)(a1 + 1548) = v11 | 0x10008400;
    if ((*(unsigned char *)(*(void *)(a1 + 29032) + 25) & 0x7F) != 0) {
      *(_DWORD *)(a1 + 1548) = v11 | 0x10038400;
    }
  }
  if (*(unsigned char *)(a1 + 14890))
  {
    int v12 = *(unsigned __int16 *)(a1 + 14888) == 33274;
    if (*(unsigned __int8 *)(a1 + 15283) != v12)
    {
      *(unsigned char *)(a1 + 15283) = v12;
      *(_DWORD *)uint64_t v2 = 0;
      *(_DWORD *)(a1 + 1548) |= 0x20000u;
    }
  }
  *(void *)(a1 + 19248) = *(void *)(a1 + 24440) + 608;
  *(void *)(a1 + 24200) = gleSetVPTransformFuncAll;
  *(void *)(a1 + 24208) = gleSetVPTransformFuncAll;
  gleUpdateInverseNeeds(a1);
  uint64_t result = gleSetColorMaterialEnable(a1);
  uint64_t v14 = *(unsigned __int8 *)(v2 + 3844);
  if (*(unsigned char *)(v2 + 3844))
  {
    int v15 = (void *)(a1 + 33432);
    do
    {
      *int v15 = 0;
      v15 += 209;
      --v14;
    }
    while (v14);
  }
  *(_DWORD *)(a1 + 1532) |= 0x40000u;
  *(_DWORD *)uint64_t v2 = 0;
  *(_DWORD *)(a1 + 1548) |= 0x108202u;
  return result;
}

uint64_t gleGPDisable(uint64_t a1)
{
  uint64_t v2 = a1 + 28652;
  int v3 = (unsigned __int8 *)(a1 + 24750);
  int v4 = (unsigned __int8 *)(a1 + 14888);
  if (*(unsigned char *)(a1 + 14890))
  {
    int v5 = *(unsigned __int16 *)v4 == 33274;
    if (*(unsigned __int8 *)(a1 + 15283) != v5)
    {
      *(unsigned char *)(a1 + 15283) = v5;
      *(_DWORD *)uint64_t v2 = 0;
      *(_DWORD *)(a1 + 1548) |= 0x20000u;
    }
  }
  *(void *)(a1 + 19272) = 0;
  *(void *)(a1 + 24352) = gleSetGPTransformFuncAll;
  *(void *)(a1 + 24360) = gleSetGPTransformFuncAll;
  gleUpdateInverseNeeds(a1);
  uint64_t result = gleUpdateInvalidPrimitives(a1);
  int v7 = *(_DWORD *)(v3 + 114);
  if ((v7 & 9) != 0 || v3[6])
  {
    int v8 = v3[1];
  }
  else
  {
    int v8 = v4[2];
    if (v4[2]) {
      int v8 = v4[4] != 0;
    }
  }
  if (v8 != v4[2813])
  {
    v4[2813] = v8;
    *(_DWORD *)(a1 + 1532) |= 0x40000000u;
    *(_DWORD *)uint64_t v2 = 0;
    int v9 = *(_DWORD *)(a1 + 1548);
    *(_DWORD *)(a1 + 1548) = v9 | 0x10008400;
    if ((*(unsigned char *)(*(void *)(a1 + 29032) + 25) & 0x7F) != 0) {
      *(_DWORD *)(a1 + 1548) = v9 | 0x10038400;
    }
  }
  if ((v7 & 9) != 0 || v3[6])
  {
    int v10 = *v3;
  }
  else if (v4[491])
  {
    int v10 = 1;
  }
  else
  {
    int v10 = v4[490] != 0;
  }
  if (v10 != v4[2812])
  {
    v4[2812] = v10;
    *(_DWORD *)(a1 + 1532) |= 0x40000000u;
    *(_DWORD *)uint64_t v2 = 0;
    *(_DWORD *)(a1 + 1548) |= 0x10000000u;
  }
  if ((v7 & 8) != 0)
  {
    uint64_t v13 = *(void *)(a1 + 24768);
    if (!v13) {
      uint64_t v13 = *(void *)(*(void *)(a1 + 24776) + 64);
    }
    if (*(unsigned char *)(v13 + 2326)) {
      int v11 = 0;
    }
    else {
      int v11 = *(unsigned __int8 *)(v2 + 1062);
    }
    if (!*(unsigned char *)(v13 + 2327)) {
      goto LABEL_35;
    }
    goto LABEL_28;
  }
  if (v7)
  {
    uint64_t v14 = *(void *)(a1 + 24768);
    if (!v14) {
      uint64_t v14 = *(void *)(*(void *)(a1 + 24776) + 40);
    }
    if (*(unsigned char *)(v14 + 214)) {
      int v11 = 0;
    }
    else {
      int v11 = *(unsigned __int8 *)(v2 + 1062);
    }
    if (!*(unsigned char *)(v14 + 215))
    {
LABEL_35:
      int v12 = *(unsigned __int8 *)(v2 + 1062);
      goto LABEL_36;
    }
LABEL_28:
    int v12 = 0;
    goto LABEL_36;
  }
  int v11 = *(unsigned __int8 *)(v2 + 1062);
  int v12 = v11;
LABEL_36:
  if (v11 == v4[2814] && v12 == v4[2815])
  {
    int v15 = *(_DWORD *)(a1 + 1548);
  }
  else
  {
    v4[2814] = v11;
    v4[2815] = v12;
    *(_DWORD *)(a1 + 1524) |= 0x400000u;
    int v15 = *(_DWORD *)(a1 + 1548) | 0x400;
  }
  *(_DWORD *)(a1 + 1532) |= 0x200000u;
  *(_DWORD *)uint64_t v2 = 0;
  *(_DWORD *)(a1 + 1548) = v15 | 0x808202;
  return result;
}

uint64_t gleCreateSurfaceLevel(uint64_t a1, uint64_t a2, __int16 a3, __int16 a4, __int16 a5, __int16 a6)
{
  *(void *)(a2 + 24) = 0;
  *(_WORD *)(a2 + 4) = a3;
  *(_WORD *)(a2 + 6) = a4;
  *(void *)(a2 + 8) = 838860801;
  *(_WORD *)(a2 + 16) = a5;
  *(_WORD *)(a2 + 18) = a6;
  return 0;
}

uint64_t gleDeleteHashNameAndObject(uint64_t a1, void (**a2)(uint64_t, uint64_t), unsigned int a3)
{
  uint64_t result = gleRemoveHashName((uint64_t)a2, a3);
  if (result)
  {
    uint64_t result = (uint64_t)gleRemoveHashObject((uint64_t)a2, a3);
    if (result)
    {
      int v7 = *(_DWORD *)(result + 20) - 1;
      *(_DWORD *)(result + 20) = v7;
      if (!v7) {
        (*a2)(a1, result);
      }
      return 1;
    }
  }
  return result;
}

uint64_t glTexParameterf_Exec(uint64_t a1, int a2, int a3, float32_t a4)
{
  var4.f32[0] = a4;
  return glTexParameterF_Exec(a1, a2, a3, &var4);
}

uint64_t glTexParameterF_Exec(uint64_t a1, int a2, int a3, float32x2_t *a4)
{
  uint64_t v8 = a1 + 28652;
  uint64_t result = gleLookUpNonProxyNonFaceTexture(a1, a2);
  if (!result) {
    goto LABEL_46;
  }
  uint64_t v10 = result;
  if (a3 > 34229)
  {
    if (a3 <= 35454)
    {
      if (a3 > 34891)
      {
        if (a3 == 34892)
        {
          if (*(unsigned char *)(v8 + 3849) != 2 && (*(unsigned char *)(*(void *)(a1 + 29032) + 577) & 0x10) != 0)
          {
            unsigned int v26 = a4->f32[0];
            if (!v26 || v26 == 34894)
            {
              if (*(unsigned __int16 *)(result + 918) == v26) {
                return result;
              }
              *(_WORD *)(result + 918) = v26;
              goto LABEL_127;
            }
          }
        }
        else if (a3 == 34893 && *(unsigned char *)(v8 + 3849) != 2 && (*(unsigned char *)(*(void *)(a1 + 29032) + 577) & 0x10) != 0)
        {
          unsigned int v38 = a4->f32[0];
          if ((v38 & 0xFFFFFFF8) == 0x200)
          {
            if (*(unsigned __int16 *)(result + 916) == v38) {
              return result;
            }
            *(_WORD *)(result + 916) = v38;
            goto LABEL_127;
          }
        }
      }
      else
      {
        if (a3 == 34230)
        {
          char v25 = *(unsigned char *)(result + 898);
          if ((a4->f32[0] != 0.0) != ((v25 & 2) == 0)) {
            return result;
          }
          gleEvaluateTextureParameterChange(a1, result, *(_DWORD *)(result + 884), *(_DWORD *)(result + 888), a4->f32[0] != 0.0, v25 & 1);
          int v24 = 0;
          goto LABEL_132;
        }
        if (a3 == 34236)
        {
          unsigned int v37 = a4->f32[0];
          if (v37 - 34237 < 3)
          {
            if (*(unsigned __int16 *)(result + 552) == v37) {
              return result;
            }
            int v24 = 0;
            *(_WORD *)(result + 552) = v37;
            goto LABEL_131;
          }
        }
      }
      goto LABEL_46;
    }
    switch(a3)
    {
      case 36418:
        if ((*(unsigned char *)(v8 + 3849) & 0xFE) == 2) {
          goto LABEL_46;
        }
        int v11 = 0;
        switch(a4->f32[0])
        {
          case 0x1903u:
            break;
          case 0x1904u:
            int v11 = 1;
            break;
          case 0x1905u:
            int v11 = 2;
            break;
          case 0x1906u:
            int v11 = 3;
            break;
          default:
            int v11 = 4;
            break;
        }
        __int16 v53 = *(_WORD *)(result + 896);
        if ((v53 & 7) == v11) {
          return result;
        }
        int v24 = 0;
        __int16 v50 = v53 & 0xFFF8 | v11;
        goto LABEL_157;
      case 36419:
        if ((*(unsigned char *)(v8 + 3849) & 0xFE) == 2) {
          goto LABEL_46;
        }
        int v39 = 0;
        switch(a4->f32[0])
        {
          case 0x1903u:
            break;
          case 0x1904u:
            int v39 = 1;
            break;
          case 0x1905u:
            int v39 = 2;
            break;
          case 0x1906u:
            int v39 = 3;
            break;
          default:
            int v39 = 4;
            break;
        }
        unsigned int v51 = *(unsigned __int16 *)(result + 896);
        if (((v51 >> 3) & 7) == v39) {
          return result;
        }
        int v24 = 0;
        __int16 v50 = v51 & 0xFFC7 | (8 * v39);
        goto LABEL_157;
      case 36420:
        if ((*(unsigned char *)(v8 + 3849) & 0xFE) == 2) {
          goto LABEL_46;
        }
        int v42 = 0;
        switch(a4->f32[0])
        {
          case 0x1903u:
            break;
          case 0x1904u:
            int v42 = 1;
            break;
          case 0x1905u:
            int v42 = 2;
            break;
          case 0x1906u:
            int v42 = 3;
            break;
          default:
            int v42 = 4;
            break;
        }
        unsigned int v52 = *(unsigned __int16 *)(result + 896);
        if (((v52 >> 6) & 7) == v42) {
          return result;
        }
        int v24 = 0;
        __int16 v50 = v52 & 0xFE3F | ((_WORD)v42 << 6);
        goto LABEL_157;
      case 36421:
        if ((*(unsigned char *)(v8 + 3849) & 0xFE) == 2) {
          goto LABEL_46;
        }
        int v36 = 0;
        switch(a4->f32[0])
        {
          case 0x1903u:
            break;
          case 0x1904u:
            int v36 = 1;
            break;
          case 0x1905u:
            int v36 = 2;
            break;
          case 0x1906u:
            int v36 = 3;
            break;
          default:
            int v36 = 4;
            break;
        }
        unsigned int v49 = *(unsigned __int16 *)(result + 896);
        if (((v49 >> 9) & 7) == v36) {
          return result;
        }
        int v24 = 0;
        __int16 v50 = v49 & 0xF1FF | ((_WORD)v36 << 9);
LABEL_157:
        *(_WORD *)(result + 896) = v50;
        goto LABEL_131;
      case 36422:
        goto LABEL_46;
      default:
        if (a3 != 35455)
        {
          if (a3 == 35741 && *(unsigned char *)(v8 + 3849) == 2)
          {
            int v14 = (int)a4->f32[0];
            if (*(_DWORD *)(result + 740) == v14)
            {
              int v15 = (int)a4->f32[1];
              if (*(_DWORD *)(result + 744) == v15
                && *(_DWORD *)(result + 748) == (int)a4[1].f32[0]
                && *(_DWORD *)(result + 752) == (int)a4[1].f32[1])
              {
                return result;
              }
            }
            else
            {
              int v15 = (int)a4->f32[1];
            }
            *(_DWORD *)(result + 740) = v14;
            *(_DWORD *)(result + 744) = v15;
            *(int32x2_t *)(result + 748) = vcvt_s32_f32(a4[1]);
            return result;
          }
          goto LABEL_46;
        }
        unsigned int v34 = a4->f32[0];
        if (v34 >= 2) {
          goto LABEL_46;
        }
        unsigned int v35 = *(unsigned __int8 *)(result + 898);
        if (((v35 >> 2) & 1) != v34)
        {
          int v24 = 0;
          *(unsigned char *)(result + 898) = v35 & 0xFB | (4 * (v34 & 1));
          goto LABEL_131;
        }
        break;
    }
    return result;
  }
  if (a3 > 32958)
  {
    if (a3 <= 33168)
    {
      switch(a3)
      {
        case 33082:
          if ((*(unsigned char *)(v8 + 3849) & 0xFE) == 2) {
            goto LABEL_46;
          }
          if (*(float *)(result + 932) == a4->f32[0]) {
            return result;
          }
          *(_DWORD *)(result + 932) = a4->i32[0];
          goto LABEL_127;
        case 33083:
          if ((*(unsigned char *)(v8 + 3849) & 0xFE) == 2) {
            goto LABEL_46;
          }
          if (*(float *)(result + 936) == a4->f32[0]) {
            return result;
          }
          *(_DWORD *)(result + 936) = a4->i32[0];
          goto LABEL_127;
        case 33084:
          if ((*(unsigned char *)(v8 + 3849) & 0xFE) == 2) {
            goto LABEL_46;
          }
          float v20 = 0.5;
          if (a4->f32[0] < 0.0) {
            float v20 = -0.5;
          }
          int v21 = (int)(float)(a4->f32[0] + v20);
          if (v21 < 0 || a2 == 34037 && v21) {
            goto LABEL_174;
          }
          if (*(_DWORD *)(result + 884) == v21) {
            return result;
          }
          if (v21) {
            *(unsigned char *)(result + 558) = 1;
          }
          int v22 = *(_DWORD *)(result + 888);
LABEL_68:
          gleEvaluateTextureParameterChange(a1, result, v21, v22, (*(unsigned char *)(result + 898) & 2) != 0, *(unsigned char *)(result + 898) & 1);
          int v24 = 0;
          *(_DWORD *)(a1 + 1548) |= 0x8000000u;
          break;
        case 33085:
          float v23 = 0.5;
          if (a4->f32[0] < 0.0) {
            float v23 = -0.5;
          }
          int v22 = (int)(float)(a4->f32[0] + v23);
          if (v22 < 0) {
            goto LABEL_174;
          }
          if (*(_DWORD *)(result + 888) == v22) {
            return result;
          }
          if (v22 && v22 != 1000) {
            *(unsigned char *)(result + 558) = 1;
          }
          int v21 = *(_DWORD *)(result + 884);
          goto LABEL_68;
        default:
          goto LABEL_46;
      }
      goto LABEL_132;
    }
    if (a3 == 33169)
    {
      unsigned int v28 = a4->f32[0];
      if (*(unsigned __int8 *)(v8 + 3849) - 3 >= 2 && v28 < 2)
      {
        char v30 = *(unsigned char *)(result + 898);
        if ((v30 & 1) == v28) {
          return result;
        }
        if (v28) {
          *(unsigned char *)(result + 558) = 1;
        }
        gleEvaluateTextureParameterChange(a1, result, *(_DWORD *)(result + 884), *(_DWORD *)(result + 888), (v30 & 2) != 0, v28);
        *(_DWORD *)uint64_t v8 = 0;
        *(_DWORD *)(a1 + 1548) |= 0x22000u;
        uint64_t v31 = a1;
        uint64_t v32 = v10;
        int v33 = 0;
        goto LABEL_133;
      }
    }
    else if (a3 == 34046)
    {
      float v18 = a4->f32[0];
      if (a4->f32[0] >= 1.0)
      {
        if (*(float *)(result + 928) == v18) {
          return result;
        }
        *(float *)(result + 928) = v18;
LABEL_127:
        uint64_t v47 = *(unsigned __int8 *)(v8 + 3844);
        if (*(unsigned char *)(v8 + 3844))
        {
          int v48 = (unsigned char *)(result + 480);
          do
          {
            *v48 |= 1u;
            v48 += 4;
            --v47;
          }
          while (v47);
        }
        int v24 = 1;
LABEL_131:
        gfxUpdatePluginTextureLevelGeometry();
LABEL_132:
        *(_DWORD *)uint64_t v8 = 0;
        *(_DWORD *)(a1 + 1548) |= 0x22000u;
        uint64_t v31 = a1;
        uint64_t v32 = v10;
        int v33 = v24;
LABEL_133:
        return gleDirtyTextureObjectCurrentBindPointsData(v31, v32, v33);
      }
LABEL_174:
      if (*(_WORD *)(v8 + 1180)) {
        return result;
      }
      __int16 v19 = 1281;
LABEL_48:
      *(_WORD *)(v8 + 1180) = v19;
      return result;
    }
LABEL_46:
    if (*(_WORD *)(v8 + 1180)) {
      return result;
    }
    __int16 v19 = 1280;
    goto LABEL_48;
  }
  switch(a3)
  {
    case 10240:
      unsigned int v12 = a4->f32[0];
      switch(v12)
      {
        case 0x2601u:
          goto LABEL_16;
        case 0x8A58u:
          if ((*(unsigned char *)(*(void *)(a1 + 29480) + 579) & 1) == 0) {
            goto LABEL_46;
          }
LABEL_16:
          char v13 = *(unsigned char *)(result + 557) | 4;
          break;
        case 0x2600u:
          char v13 = *(unsigned char *)(result + 557) & 0xFB;
          break;
        default:
          goto LABEL_46;
      }
      *(unsigned char *)(result + 557) = v13;
      if (*(unsigned __int16 *)(result + 914) != v12)
      {
        *(_WORD *)(result + 914) = v12;
        goto LABEL_127;
      }
      return result;
    case 10241:
      int v45 = a4->f32[0];
      if ((v45 - 9985) < 3)
      {
        if (a2 == 34037) {
          goto LABEL_46;
        }
        char v46 = *(unsigned char *)(result + 557) | 0xA;
LABEL_124:
        *(unsigned char *)(result + 557) = v46;
        *(unsigned char *)(result + 558) = 1;
        goto LABEL_125;
      }
      if (v45 > 9983)
      {
        if (v45 != 35416)
        {
          if (v45 != 9984 || a2 == 34037) {
            goto LABEL_46;
          }
          char v46 = *(unsigned char *)(result + 557) & 0xF5 | 2;
          goto LABEL_124;
        }
        if ((*(unsigned char *)(*(void *)(a1 + 29480) + 579) & 1) == 0) {
          goto LABEL_46;
        }
      }
      else
      {
        if (v45 == 9728)
        {
          char v57 = *(unsigned char *)(result + 557) & 0xF5;
          goto LABEL_203;
        }
        if (v45 != 9729) {
          goto LABEL_46;
        }
      }
      char v57 = *(unsigned char *)(result + 557) & 0xF5 | 8;
LABEL_203:
      *(unsigned char *)(result + 557) = v57;
LABEL_125:
      if (*(unsigned __int16 *)(result + 912) != v45)
      {
        *(_WORD *)(result + 912) = v45;
        goto LABEL_127;
      }
      return result;
    case 10242:
      int v40 = a4->f32[0];
      if (v40 == 10497) {
        goto LABEL_109;
      }
      if (v40 <= 34625)
      {
        if (v40 != 33071)
        {
          int v54 = 33648;
LABEL_181:
          if (v40 != v54) {
            goto LABEL_46;
          }
LABEL_109:
          if (a2 == 34037) {
            goto LABEL_46;
          }
          char v41 = *(unsigned char *)(result + 557) | 0x10;
LABEL_111:
          *(unsigned char *)(result + 557) = v41;
          if (*(unsigned __int16 *)(result + 920) != v40)
          {
            *(_WORD *)(result + 920) = v40;
            goto LABEL_127;
          }
          return result;
        }
      }
      else
      {
        if ((v40 - 34626) < 2) {
          goto LABEL_109;
        }
        if (v40 != 37905)
        {
          int v54 = 35090;
          goto LABEL_181;
        }
      }
      char v41 = *(unsigned char *)(result + 557) & 0xEF;
      goto LABEL_111;
    case 10243:
      int v43 = a4->f32[0];
      if (v43 == 10497) {
        goto LABEL_117;
      }
      if (v43 <= 34625)
      {
        if (v43 != 33071)
        {
          int v55 = 33648;
LABEL_185:
          if (v43 != v55) {
            goto LABEL_46;
          }
LABEL_117:
          if (a2 == 34037) {
            goto LABEL_46;
          }
          char v44 = *(unsigned char *)(result + 557) | 0x20;
LABEL_119:
          *(unsigned char *)(result + 557) = v44;
          if (*(unsigned __int16 *)(result + 922) != v43)
          {
            *(_WORD *)(result + 922) = v43;
            goto LABEL_127;
          }
          return result;
        }
      }
      else
      {
        if ((v43 - 34626) < 2) {
          goto LABEL_117;
        }
        if (v43 != 37905)
        {
          int v55 = 35090;
          goto LABEL_185;
        }
      }
      char v44 = *(unsigned char *)(result + 557) & 0xDF;
      goto LABEL_119;
    default:
      if (a3 != 32882 || (*(unsigned char *)(v8 + 3849) & 0xFE) == 2) {
        goto LABEL_46;
      }
      int v16 = a4->f32[0];
      if (v16 == 10497) {
        goto LABEL_37;
      }
      if (v16 > 34625)
      {
        if ((v16 - 34626) < 2) {
          goto LABEL_37;
        }
        if (v16 != 37905)
        {
          int v56 = 35090;
          goto LABEL_195;
        }
LABEL_199:
        char v17 = *(unsigned char *)(result + 557) & 0xBF;
        goto LABEL_39;
      }
      if (v16 == 33071) {
        goto LABEL_199;
      }
      int v56 = 33648;
LABEL_195:
      if (v16 != v56) {
        goto LABEL_46;
      }
LABEL_37:
      if (a2 == 34037) {
        goto LABEL_46;
      }
      char v17 = *(unsigned char *)(result + 557) | 0x40;
LABEL_39:
      *(unsigned char *)(result + 557) = v17;
      if (*(unsigned __int16 *)(result + 924) != v16)
      {
        *(_WORD *)(result + 924) = v16;
        goto LABEL_127;
      }
      return result;
  }
}

uint64_t glDisableClientState_Exec(uint64_t a1, int a2)
{
  return gleSetClientEnableFlag(a1, a2, 0);
}

_DWORD *gleSetEnable_STENCIL_TEST(_DWORD *result, uint64_t a2, int a3)
{
  int v3 = result[3911];
  unsigned int v4 = v3 & 0xFFFFFFFE | a3;
  if (v3 != v4)
  {
    result[3911] = v4;
    if (v3 & 4 | a3 & 4) {
      BOOL v5 = 1;
    }
    else {
      BOOL v5 = (v3 & 0x70 | a3 & 0x70) == 0;
    }
    int v6 = result[387];
    if (!v5) {
      v6 |= 0x8000u;
    }
    result[380] |= 0x10000000u;
    result[7163] = 0;
    result[387] = v6 | 0x40000;
  }
  return result;
}

uint64_t glDepthFunc_Exec(uint64_t result, int a2)
{
  if ((a2 - 520) <= 0xFFFFFFF7)
  {
    if (!*(_WORD *)(result + 29832)) {
      *(_WORD *)(result + 29832) = 1280;
    }
  }
  else if (*(unsigned __int16 *)(result + 15200) != a2)
  {
    *(_WORD *)(result + 15200) = a2;
    *(_DWORD *)(result + 1520) |= 0x200u;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1548) |= 0x40000u;
  }
  return result;
}

uint64_t glCullFace_Exec(uint64_t result, int a2)
{
  if ((a2 - 1028) <= 4 && ((1 << (a2 - 4)) & 0x13) != 0)
  {
    if (*(unsigned __int16 *)(result + 15530) != a2)
    {
      *(_WORD *)(result + 15530) = a2;
      *(_DWORD *)(result + 1520) |= 0x800000u;
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1548) |= 0x8000u;
    }
  }
  else if (!*(_WORD *)(result + 29832))
  {
    *(_WORD *)(result + 29832) = 1280;
  }
  return result;
}

uint64_t glClientActiveTexture_Exec(uint64_t result, int a2)
{
  if ((a2 - 33984) < 8)
  {
    *(_WORD *)(result + 23770) = a2 + 31552;
  }
  else if (!*(_WORD *)(result + 29832))
  {
    *(_WORD *)(result + 29832) = 1280;
  }
  return result;
}

uint64_t glTexEnvi_Exec(uint64_t result, int a2, int a3, int a4, double a5)
{
  uint64_t v5 = *(unsigned __int16 *)(result + 23768);
  if (a2 == 8960)
  {
    if (v5 >= 8) {
      goto LABEL_10;
    }
    if (a3 > 34161)
    {
      switch(a3)
      {
        case 34176:
          if ((a4 - 34166) >= 3 && a4 != 5890) {
            goto LABEL_98;
          }
          uint64_t v9 = result + 76 * *(unsigned __int16 *)(result + 23768);
          uint64_t v10 = 15696;
          goto LABEL_96;
        case 34177:
          if ((a4 - 34166) >= 3 && a4 != 5890) {
            goto LABEL_98;
          }
          uint64_t v9 = result + 76 * *(unsigned __int16 *)(result + 23768);
          uint64_t v10 = 15698;
          goto LABEL_96;
        case 34178:
          if ((a4 - 34166) >= 3 && a4 != 5890) {
            goto LABEL_98;
          }
          uint64_t v9 = result + 76 * *(unsigned __int16 *)(result + 23768);
          uint64_t v10 = 15700;
          goto LABEL_96;
        case 34179:
        case 34180:
        case 34181:
        case 34182:
        case 34183:
        case 34187:
        case 34188:
        case 34189:
        case 34190:
        case 34191:
        case 34195:
        case 34196:
        case 34197:
        case 34198:
        case 34199:
          goto LABEL_98;
        case 34184:
          if ((a4 - 34166) >= 3 && a4 != 5890) {
            goto LABEL_98;
          }
          uint64_t v9 = result + 76 * *(unsigned __int16 *)(result + 23768);
          uint64_t v10 = 15702;
          goto LABEL_96;
        case 34185:
          if ((a4 - 34166) >= 3 && a4 != 5890) {
            goto LABEL_98;
          }
          uint64_t v9 = result + 76 * *(unsigned __int16 *)(result + 23768);
          uint64_t v10 = 15704;
          goto LABEL_96;
        case 34186:
          if ((a4 - 34166) >= 3 && a4 != 5890) {
            goto LABEL_98;
          }
          uint64_t v9 = result + 76 * *(unsigned __int16 *)(result + 23768);
          uint64_t v10 = 15706;
          goto LABEL_96;
        case 34192:
          if ((a4 & 0xFFFFFFFC) != 0x300) {
            goto LABEL_98;
          }
          uint64_t v9 = result + 76 * *(unsigned __int16 *)(result + 23768);
          uint64_t v10 = 15708;
          goto LABEL_96;
        case 34193:
          if ((a4 & 0xFFFFFFFC) != 0x300) {
            goto LABEL_98;
          }
          uint64_t v9 = result + 76 * *(unsigned __int16 *)(result + 23768);
          uint64_t v10 = 15710;
          goto LABEL_96;
        case 34194:
          if ((a4 & 0xFFFFFFFC) != 0x300) {
            goto LABEL_98;
          }
          uint64_t v9 = result + 76 * *(unsigned __int16 *)(result + 23768);
          uint64_t v10 = 15712;
          goto LABEL_96;
        case 34200:
          if ((a4 & 0xFFFFFFFE) != 0x302) {
            goto LABEL_98;
          }
          uint64_t v9 = result + 76 * *(unsigned __int16 *)(result + 23768);
          uint64_t v10 = 15714;
          goto LABEL_96;
        case 34201:
          if ((a4 & 0xFFFFFFFE) != 0x302) {
            goto LABEL_98;
          }
          uint64_t v9 = result + 76 * *(unsigned __int16 *)(result + 23768);
          uint64_t v10 = 15716;
          goto LABEL_96;
        case 34202:
          if ((a4 & 0xFFFFFFFE) != 0x302) {
            goto LABEL_98;
          }
          uint64_t v9 = result + 76 * *(unsigned __int16 *)(result + 23768);
          uint64_t v10 = 15718;
          goto LABEL_96;
        default:
          if (a3 != 34162)
          {
            if (a3 != 34163) {
              goto LABEL_98;
            }
            if (a4 <= 4 && ((1 << a4) & 0x16) != 0)
            {
              *(float *)(result + 76 * *(unsigned __int16 *)(result + 23768) + 15720) = (float)a4;
              goto LABEL_97;
            }
            goto LABEL_90;
          }
          if (a4 > 34022)
          {
            if ((a4 - 34164) >= 2)
            {
              int v19 = 34023;
LABEL_94:
              if (a4 != v19) {
                goto LABEL_98;
              }
            }
          }
          else if (a4 != 260 && a4 != 7681)
          {
            int v19 = 8448;
            goto LABEL_94;
          }
          uint64_t v9 = result + 76 * *(unsigned __int16 *)(result + 23768);
          uint64_t v10 = 15694;
          goto LABEL_96;
      }
    }
    if (a3 == 3356)
    {
      if (a4 > 4 || ((1 << a4) & 0x16) == 0)
      {
LABEL_90:
        if (!*(_WORD *)(result + 29832)) {
          *(_WORD *)(result + 29832) = 1281;
        }
        goto LABEL_97;
      }
      *(float *)(result + 76 * *(unsigned __int16 *)(result + 23768) + 15724) = (float)a4;
LABEL_97:
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1548) |= 0x20000u;
      return result;
    }
    if (a3 != 8704)
    {
      if (a3 != 34161) {
        goto LABEL_98;
      }
      if (a4 > 34022)
      {
        if ((a4 - 34164) >= 2 && (a4 - 34478) >= 2)
        {
          int v17 = 34023;
LABEL_80:
          if (a4 != v17) {
            goto LABEL_98;
          }
        }
      }
      else if (a4 != 260 && a4 != 7681)
      {
        int v17 = 8448;
        goto LABEL_80;
      }
      uint64_t v9 = result + 76 * *(unsigned __int16 *)(result + 23768);
      uint64_t v10 = 15692;
LABEL_96:
      *(_WORD *)(v9 + v10) = a4;
      goto LABEL_97;
    }
    if (a4 > 8447)
    {
      if ((a4 - 8448) >= 2)
      {
        int v18 = 34160;
LABEL_88:
        if (a4 != v18) {
          goto LABEL_98;
        }
      }
    }
    else if (a4 != 260 && a4 != 3042)
    {
      int v18 = 7681;
      goto LABEL_88;
    }
    uint64_t v9 = result + 76 * *(unsigned __int16 *)(result + 23768);
    uint64_t v10 = 15688;
    goto LABEL_96;
  }
  if (a2 != 34048)
  {
    if (a2 == 34913 && a3 == 34914)
    {
      if (v5 < 8)
      {
        if (a4 < 2)
        {
          int v6 = 1 << v5;
          if (a4 == 1) {
            int v7 = *(_DWORD *)(result + 15384) | v6;
          }
          else {
            int v7 = *(_DWORD *)(result + 15384) & ~v6;
          }
          *(_DWORD *)(result + 15384) = v7;
          *(_DWORD *)(result + 28652) = 0;
          *(_DWORD *)(result + 1520) |= 0x400000u;
          return result;
        }
        goto LABEL_98;
      }
LABEL_10:
      if (*(_WORD *)(result + 29832)) {
        return result;
      }
      __int16 v8 = 1282;
      goto LABEL_101;
    }
LABEL_98:
    if (*(_WORD *)(result + 29832)) {
      return result;
    }
    __int16 v8 = 1280;
LABEL_101:
    *(_WORD *)(result + 29832) = v8;
    return result;
  }
  if (a3 != 34049) {
    goto LABEL_98;
  }
  *(float *)&a5 = (float)a4;
  *(float *)(result + 2272 + 4 * v5 + 13988) = (float)a4;
  *(int32x4_t *)(result + 2272 + 76 * v5 + 13396) = vdupq_lane_s32(*(int32x2_t *)&a5, 0);
  if ((*(_WORD *)(*(void *)(result + 29032) + 26) & 0x2000) != 0)
  {
    uint64_t v11 = *(void *)(result + 19248);
    if (v11)
    {
      unint64_t v12 = *(unsigned __int16 *)(v11 + 2 * v5 + 3752);
      if (v12 <= 0x3FF)
      {
        *(_DWORD *)(result + ((v12 >> 3) & 0x1FFC) + 1552) |= 1 << v12;
        *(_DWORD *)(result + 28652) = 0;
        *(_DWORD *)(result + 1532) |= 0x800000u;
      }
    }
    uint64_t v13 = *(void *)(result + 19272);
    if (v13)
    {
      unint64_t v14 = *(unsigned __int16 *)(v13 + 2 * v5 + 3752);
      if (v14 <= 0x3FF)
      {
        *(_DWORD *)(result + ((v14 >> 3) & 0x1FFC) + 1936) |= 1 << v14;
        *(_DWORD *)(result + 28652) = 0;
        *(_DWORD *)(result + 1532) |= 0x4000000u;
      }
    }
    uint64_t v15 = *(void *)(result + 19280);
    if (v15)
    {
      unint64_t v16 = *(unsigned __int16 *)(v15 + 2 * v5 + 3752);
      if (v16 <= 0x3FF)
      {
        *(_DWORD *)(result + ((v16 >> 3) & 0x1FFC) + 2064) |= 1 << v16;
        *(_DWORD *)(result + 28652) = 0;
        *(_DWORD *)(result + 1532) |= 0x8000000u;
      }
    }
  }
  else
  {
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1536) |= 0x10000 << (v5 & 7);
  }
  return result;
}

uint64_t glStencilFunc_Exec(uint64_t result, int a2, int a3, int a4)
{
  if ((a2 - 520) <= 0xFFFFFFF7)
  {
    if (!*(_WORD *)(result + 29832)) {
      *(_WORD *)(result + 29832) = 1280;
    }
  }
  else
  {
    unsigned int v4 = (_WORD *)(result + 15604);
    int v5 = a3 & ~(a3 >> 31);
    if (*(_DWORD *)(result + 29776) == 1028)
    {
      if ((unsigned __int16)*v4 != a2
        || *(_DWORD *)(result + 15600) != v5
        || *(_DWORD *)(result + 15596) != a4
        || *(unsigned __int16 *)(result + 15636) != a2
        || *(_DWORD *)(result + 15632) != v5
        || *(_DWORD *)(result + 15628) != a4)
      {
        *unsigned int v4 = a2;
        *(_DWORD *)(result + 15600) = v5;
        *(_DWORD *)(result + 15596) = a4;
        *(_WORD *)(result + 15636) = a2;
        *(_DWORD *)(result + 15632) = v5;
        *(_DWORD *)(result + 15628) = a4;
        int v6 = *(_DWORD *)(result + 15644);
        if (v6 == 17)
        {
          *(_DWORD *)(result + 15644) = 1;
          *(_DWORD *)(result + 1548) |= 0x8000u;
        }
        else
        {
          *(_DWORD *)(result + 15644) = v6 & 0xFFFFFFEF;
        }
        goto LABEL_16;
      }
    }
    else if (*(unsigned __int16 *)(result + 15620) != a2 {
           || *(_DWORD *)(result + 15616) != v5
    }
           || *(_DWORD *)(result + 15612) != a4)
    {
      *(_WORD *)(result + 15620) = a2;
      *(_DWORD *)(result + 15616) = v5;
      *(_DWORD *)(result + 15612) = a4;
LABEL_16:
      *(_DWORD *)(result + 1520) |= 0x10000000u;
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1548) |= 0x40000u;
    }
  }
  return result;
}

unint64_t glDrawElements_Exec(unint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, __n128 a6, double a7, double a8)
{
  __int16 v8 = (unsigned __int16 *)(result + 26336);
  if (a2 >= 7) {
    goto LABEL_57;
  }
  unint64_t v9 = result;
  uint64_t v10 = *(void *)(result + 26384);
  if ((~*(_DWORD *)(v10 + 904) & 0x900000) != 0 && *(unsigned char *)(result + 17699) != 0
    || (*(void *)(v10 + 904) & 0x100010000) == 0)
  {
    return result;
  }
  if (a4 != 5123 && a4 != 5121 && a4 != 5125)
  {
LABEL_57:
    if (!*(_WORD *)(result + 29832))
    {
      __int16 v23 = 1280;
LABEL_41:
      *(_WORD *)(result + 29832) = v23;
      return result;
    }
    return result;
  }
  if ((int)a3 > 0)
  {
    uint64_t v15 = *(void *)(result + 26432);
    if (*(__int16 *)(v15 + 42) != -1 && !*(unsigned char *)(v15 + 41))
    {
      unsigned int v24 = a3;
      switch((int)a2)
      {
        case 0:
        case 2:
          break;
        case 1:
          unsigned int v24 = a3 >> 1;
          break;
        case 3:
          unsigned int v24 = a3 - 1;
          break;
        case 4:
          unsigned int v24 = a3 / 3;
          break;
        case 5:
        case 6:
          unsigned int v24 = a3 - 2;
          break;
        default:
          unsigned int v24 = 0;
          break;
      }
      unsigned int v25 = v24 + *(_DWORD *)(v15 + 176);
      if (v25 > *(_DWORD *)(v15 + 180))
      {
        if (!*(_WORD *)(result + 29832))
        {
          __int16 v23 = 1282;
          goto LABEL_41;
        }
        return result;
      }
      *(_DWORD *)(v15 + 176) = v25;
    }
    uint64_t v16 = *(void *)(v10 + 1232);
    if (v16) {
      a5 += *(void *)(v16 + 136);
    }
    *(void *)(result + 26312) = a5;
    *__int16 v8 = a4;
    if ((a4 - 5121) > 4) {
      LOBYTE(v17) = 1;
    }
    else {
      int v17 = dword_227DC1EA8[a4 - 5121];
    }
    uint64_t result = gleDrawArraysOrElements_Entries_Body(result, 2, a2, v17, v10 + 40, a6, a7, a8);
    if (result == 2) {
      return result;
    }
    int v21 = result;
    if (!result
      || (uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, void, uint64_t, void, void, uint64_t, void))(v9 + 29232))(*(void *)(v9 + 29016), 1, a2, 0, a3, *v8, *(void *)(v9 + 26312), 1, 0), !result))
    {
      if ((*((_DWORD *)v8 + 579) & (1 << a2)) != 0
        && (*((unsigned char *)v8 + 2345) & 1) != 0
        && (*((unsigned char *)v8 + 2347) & 2) != 0)
      {
        if (!*(unsigned char *)(v9 + 32482))
        {
LABEL_25:
          if (v21 && *(void *)(v10 + 912) && !*(unsigned char *)(v10 + 1216)) {
            gleSynchronizeBuffersInArray(v9, v10 + 40);
          }
          uint64_t result = gleDrawArraysOrElements_ExecCore(v9, a2, 0, a3, 1, v10 + 40, 1);
        }
      }
      else
      {
        uint64_t result = gleDoDrawDispatchCore(v9, 1 << a2, 1u, 2u, v18, v19, v20);
        if (result) {
          goto LABEL_25;
        }
      }
    }
    int v22 = *(_DWORD *)(*(void *)(v9 + 19296) + 316);
    if (*((_DWORD *)v8 + 870) != v22)
    {
      if (*(void *)(v9 + 28960))
      {
        uint64_t result = gleInvalidateCurrentDrawFramebufferTextures(v9);
        int v22 = *(_DWORD *)(*(void *)(v9 + 19296) + 316);
      }
      *((_DWORD *)v8 + 870) = v22;
    }
    return result;
  }
  if ((a3 & 0x80000000) != 0 && !*(_WORD *)(result + 29832))
  {
    __int16 v23 = 1281;
    goto LABEL_41;
  }
  return result;
}

uint64_t glClearStencil_Exec(uint64_t result, unsigned __int8 a2)
{
  if (!*(unsigned char *)(*(void *)(result + 29480) + 110))
  {
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 29800) |= 0x20u;
  }
  *(_DWORD *)(result + 15172) = a2;
  return result;
}

uint64_t glPolygonOffset_Exec(uint64_t result, float a2, float a3)
{
  *(float *)(result + 15516) = a2;
  *(float *)(result + 15520) = a3;
  *(_DWORD *)(result + 28652) = 0;
  *(_DWORD *)(result + 1520) |= 0x800000u;
  return result;
}

uint64_t glEnableVertexAttribArrayARB_Exec(uint64_t result, unsigned int a2)
{
  uint64_t v2 = (_DWORD *)(result + 28652);
  uint64_t v3 = *(void *)(result + 26384);
  if (!v3)
  {
    if (*(_WORD *)(result + 29832)) {
      return result;
    }
    __int16 v4 = 1282;
    goto LABEL_7;
  }
  if (a2 >= 0x10)
  {
    if (*(_WORD *)(result + 29832)) {
      return result;
    }
    __int16 v4 = 1281;
LABEL_7:
    *(_WORD *)(result + 29832) = v4;
    return result;
  }
  uint64_t v5 = 0x100000000 << a2;
  uint64_t v6 = *(void *)(v3 + 904);
  if ((v6 & (0x100000000 << a2)) == 0)
  {
    uint64_t v7 = result;
    uint64_t v8 = v6 | v5;
    *(void *)(v3 + 904) = v6 | v5;
    uint64_t v9 = *(void *)(v3 + 912);
    if ((v8 & ~v9) == v5)
    {
      uint64_t result = gleUpdateDrawArraysFuncs(result);
    }
    else if ((v9 & v5) != 0)
    {
      if (*(void *)(*(void *)(v3 + 8 * (a2 + 16) + 1240) + 192)) {
        *(unsigned char *)(v3 + 1216) = 0;
      }
    }
    *(void *)(v3 + 944) |= v5 | 0x10;
    *(void *)(v3 + 952) |= v5;
    *(void *)(v7 + 26184) = gleSetVertexArrayFunc;
    *(void *)(v7 + 26192) = gleSetVertexArrayFunc;
    *(void *)(v7 + 26200) = gleSetVertexElemFunc;
    *(void *)(v7 + 26208) = gleSetVertexElemFunc;
    *uint64_t v2 = 0;
    *(_DWORD *)(v7 + 1532) |= 0x1000u;
  }
  return result;
}

void glVertexAttribPointerARB_Exec(uint64_t a1, unsigned int a2, unsigned int a3, int a4, int a5, unsigned int a6, uint64_t a7)
{
  uint64_t v7 = a1 + 28652;
  if (a3 - 5 >= 0xFFFFFFFC && (a6 & 0x80000000) == 0 && a2 < 0x10)
  {
    uint64_t v9 = a7;
    uint64_t v11 = *(void *)(a1 + 26384);
    if (v11)
    {
      unsigned __int16 v12 = a4;
      uint64_t v13 = *(void *)(a1 + 19312);
      if (v13 || !a7 || v11 == *(void *)(a1 + 26392))
      {
        int v14 = 0;
        int v15 = 4;
        switch(a4)
        {
          case 5120:
          case 5121:
            goto LABEL_9;
          case 5122:
          case 5123:
            int v15 = 2;
            goto LABEL_18;
          case 5124:
          case 5125:
            if ((*(unsigned char *)(a1 + 32501) & 0xFE) != 2) {
              goto LABEL_18;
            }
            goto LABEL_53;
          case 5126:
          case 5132:
            goto LABEL_19;
          case 5127:
          case 5128:
          case 5129:
          case 5130:
            goto LABEL_53;
          case 5131:
            if ((*(unsigned char *)(a1 + 32501) & 0xFE) == 2) {
              goto LABEL_53;
            }
            int v14 = 0;
            int v15 = 2;
            goto LABEL_19;
          default:
            if ((a4 == 33640 || a4 == 36255) && (*(unsigned char *)(a1 + 32501) & 0xFE) != 2)
            {
              if (a3 <= 3) {
                goto LABEL_14;
              }
LABEL_9:
              int v15 = 1;
LABEL_18:
              int v14 = a5;
LABEL_19:
              uint64_t v17 = a2 + 16;
              uint64_t v18 = v11 + 136;
              unint64_t v19 = (unint64_t)(1 << a2) << 32;
              *(void *)(v11 + 944) |= v19;
              *(void *)(v11 + 136 + 24 * v17) = a7;
              uint64_t v20 = *(void *)(v11 + 1240 + 8 * v17);
              if (v13 == v20) {
                goto LABEL_40;
              }
              if (v20 && (int v21 = *(_DWORD *)(v20 + 20) - 1, (*(_DWORD *)(v20 + 20) = v21) == 0))
              {
                uint64_t v48 = a1 + 28652;
                unsigned int v38 = a3;
                int v42 = v14;
                int v45 = v15;
                gleUnbindAndFreeBufferObject(a1, (void *)v20);
                uint64_t v18 = v11 + 136;
                int v14 = v42;
                int v15 = v45;
                a3 = v38;
                uint64_t v7 = v48;
                if (v13) {
                  goto LABEL_23;
                }
              }
              else if (v13)
              {
LABEL_23:
                ++*(_DWORD *)(v13 + 20);
                uint64_t v22 = *(void *)(v11 + 912);
                if ((v22 & v19) == 0)
                {
                  *(void *)(v11 + 912) = v22 | v19;
                  if ((*(void *)(v11 + 904) & v19) != 0)
                  {
                    uint64_t v47 = v7;
                    unsigned int v37 = a3;
                    int v41 = v14;
                    int v44 = v15;
                    uint64_t v39 = v18;
                    gleUpdateDrawArraysFuncs(a1);
                    uint64_t v18 = v39;
                    int v14 = v41;
                    int v15 = v44;
                    a3 = v37;
                    uint64_t v7 = v47;
                  }
                }
                uint64_t v23 = *(unsigned __int8 *)(v7 + 3844);
                if (*(unsigned char *)(v7 + 3844))
                {
                  unsigned int v24 = (uint64_t *)(v13 + 40);
                  unsigned int v25 = (void *)(v11 + 8 * v17 + 1496);
                  do
                  {
                    uint64_t v26 = *v24++;
                    *unsigned int v25 = v26;
                    v25 += 35;
                    --v23;
                  }
                  while (v23);
                }
                if (v20) {
                  goto LABEL_39;
                }
                goto LABEL_38;
              }
              uint64_t v27 = *(void *)(v11 + 912);
              if ((v27 & v19) != 0)
              {
                *(void *)(v11 + 912) = v27 & ~v19;
                if ((*(void *)(v11 + 904) & v19) != 0)
                {
                  uint64_t v49 = v7;
                  unsigned int v28 = a3;
                  int v43 = v14;
                  int v46 = v15;
                  uint64_t v40 = v18;
                  gleUpdateDrawArraysFuncs(a1);
                  uint64_t v18 = v40;
                  int v14 = v43;
                  int v15 = v46;
                  a3 = v28;
                  uint64_t v7 = v49;
                }
              }
              uint64_t v29 = *(unsigned __int8 *)(v7 + 3844);
              if (*(unsigned char *)(v7 + 3844))
              {
                char v30 = (void *)(v11 + 8 * v17 + 1496);
                do
                {
                  void *v30 = 0;
                  v30 += 35;
                  --v29;
                }
                while (v29);
              }
LABEL_38:
              *(void *)(v11 + 952) |= v19;
LABEL_39:
              *(_DWORD *)uint64_t v7 = 0;
              *(_DWORD *)(a1 + 1532) |= 0x1000u;
              *(void *)(v11 + 944) |= v19 | 0x10;
              *(void *)(v11 + 1240 + 8 * v17) = v13;
LABEL_40:
              if (v13)
              {
                v9 += *(void *)(v13 + 136);
                if (*(void *)(v13 + 192))
                {
                  if ((*(void *)(v11 + 904) & v19) != 0) {
                    *(unsigned char *)(v11 + 1216) = 0;
                  }
                }
              }
              *(void *)(v11 + 8 * v17 + 960) = v9;
              if (a6) {
                uint64_t v31 = a6;
              }
              else {
                uint64_t v31 = v15 * a3;
              }
              if (v14) {
                unsigned __int16 v32 = v12 | 0x2000;
              }
              else {
                unsigned __int16 v32 = v12;
              }
              uint64_t v33 = v18 + 24 * v17;
              uint64_t v35 = *(void *)(v33 + 16);
              unsigned int v34 = (unint64_t *)(v33 + 16);
              unint64_t v36 = ((unint64_t)a3 << 48) | ((unint64_t)(((v31 | v9) & 0xF) == 0) << 57) | ((unint64_t)v32 << 32) | v31;
              if (v35 != v36)
              {
                *(void *)(v11 + 952) |= v19;
                *unsigned int v34 = v36;
                *(void *)(a1 + 26184) = gleSetVertexArrayFunc;
                *(void *)(a1 + 26192) = gleSetVertexArrayFunc;
                *(void *)(a1 + 26200) = gleSetVertexElemFunc;
                *(void *)(a1 + 26208) = gleSetVertexElemFunc;
                *(_DWORD *)uint64_t v7 = 0;
                *(_DWORD *)(a1 + 1532) |= 0x1000u;
              }
              return;
            }
LABEL_53:
            if (*(_WORD *)(a1 + 29832)) {
              return;
            }
            __int16 v16 = 1280;
            break;
        }
        goto LABEL_55;
      }
    }
    else if (!a7)
    {
      return;
    }
LABEL_14:
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v16 = 1282;
    goto LABEL_55;
  }
  if (!*(_WORD *)(a1 + 29832))
  {
    __int16 v16 = 1281;
LABEL_55:
    *(_WORD *)(a1 + 29832) = v16;
  }
}

int8x16_t glDisableVertexAttribArrayARB_Exec(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = (_DWORD *)(a1 + 28652);
  uint64_t v3 = *(int8x16_t **)(a1 + 26384);
  if (!v3)
  {
    if (*(_WORD *)(a1 + 29832)) {
      return result;
    }
    __int16 v4 = 1282;
    goto LABEL_7;
  }
  if (a2 >= 0x10)
  {
    if (*(_WORD *)(a1 + 29832)) {
      return result;
    }
    __int16 v4 = 1281;
LABEL_7:
    *(_WORD *)(a1 + 29832) = v4;
    return result;
  }
  unint64_t v6 = 0x100000000 << a2;
  uint64_t v7 = v3[56].i64[1];
  v3[56].i64[1] = v7 & ~(0x100000000 << a2);
  if ((v7 & ~v3[57].i64[0]) == 0x100000000 << a2) {
    gleUpdateDrawArraysFuncs(a1);
  }
  int8x16_t result = vorrq_s8(v3[59], (int8x16_t)vdupq_n_s64(v6));
  v3[59] = result;
  *(void *)(a1 + 26184) = gleSetVertexArrayFunc;
  *(void *)(a1 + 26192) = gleSetVertexArrayFunc;
  *(void *)(a1 + 26200) = gleSetVertexElemFunc;
  *(void *)(a1 + 26208) = gleSetVertexElemFunc;
  *uint64_t v2 = 0;
  *(_DWORD *)(a1 + 1532) |= 0x1000u;
  return result;
}

uint64_t gleSetEnable_POLYGON_OFFSET_FILL(uint64_t result, uint64_t a2, int a3)
{
  if (*(unsigned __int8 *)(result + 15537) != a3)
  {
    *(unsigned char *)(result + 15537) = a3;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1520) |= 0x800000u;
  }
  return result;
}

uint64_t glTexEnvfv_Exec(uint64_t result, int a2, int a3, uint64_t a4)
{
  uint64_t v4 = *(unsigned __int16 *)(result + 23768);
  if (a2 != 8960)
  {
    if (a2 != 34048)
    {
      if (a2 == 34913 && a3 == 34914)
      {
        if (v4 < 8)
        {
          unsigned int v5 = *(float *)a4;
          if (v5 < 2)
          {
            int v6 = 1 << v4;
            if (v5 == 1) {
              int v7 = *(_DWORD *)(result + 15384) | v6;
            }
            else {
              int v7 = *(_DWORD *)(result + 15384) & ~v6;
            }
            *(_DWORD *)(result + 15384) = v7;
            *(_DWORD *)(result + 28652) = 0;
            *(_DWORD *)(result + 1520) |= 0x400000u;
            return result;
          }
          goto LABEL_160;
        }
LABEL_10:
        if (*(_WORD *)(result + 29832)) {
          return result;
        }
        __int16 v8 = 1282;
        goto LABEL_163;
      }
LABEL_160:
      if (*(_WORD *)(result + 29832)) {
        return result;
      }
      __int16 v8 = 1280;
LABEL_163:
      *(_WORD *)(result + 29832) = v8;
      return result;
    }
    if (a3 != 34049) {
      goto LABEL_160;
    }
    *(_DWORD *)(result + 2272 + 4 * v4 + 13988) = *(_DWORD *)a4;
    uint64_t v9 = (_DWORD *)(result + 2272 + 76 * v4);
    v9[3349] = *(_DWORD *)a4;
    v9[3350] = *(_DWORD *)a4;
    v9[3351] = *(_DWORD *)a4;
    v9[3352] = *(_DWORD *)a4;
    if ((*(_WORD *)(*(void *)(result + 29032) + 26) & 0x2000) == 0)
    {
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1536) |= 0x10000 << (v4 & 7);
      return result;
    }
    uint64_t v14 = *(void *)(result + 19248);
    if (v14)
    {
      unint64_t v15 = *(unsigned __int16 *)(v14 + 2 * v4 + 3752);
      if (v15 <= 0x3FF)
      {
        *(_DWORD *)(result + ((v15 >> 3) & 0x1FFC) + 1552) |= 1 << v15;
        *(_DWORD *)(result + 28652) = 0;
        *(_DWORD *)(result + 1532) |= 0x800000u;
      }
    }
    uint64_t v16 = *(void *)(result + 19272);
    if (v16)
    {
      unint64_t v17 = *(unsigned __int16 *)(v16 + 2 * v4 + 3752);
      if (v17 <= 0x3FF)
      {
        *(_DWORD *)(result + ((v17 >> 3) & 0x1FFC) + 1936) |= 1 << v17;
        *(_DWORD *)(result + 28652) = 0;
        *(_DWORD *)(result + 1532) |= 0x4000000u;
      }
    }
    uint64_t v18 = *(void *)(result + 19280);
    if (v18)
    {
      unint64_t v19 = *(unsigned __int16 *)(v18 + 2 * v4 + 3752);
      goto LABEL_31;
    }
    return result;
  }
  if (v4 >= 8) {
    goto LABEL_10;
  }
  if (a3 > 34161)
  {
    switch(a3)
    {
      case 34176:
        int v10 = (int)*(float *)a4;
        if ((v10 - 34166) >= 3 && v10 != 5890) {
          goto LABEL_160;
        }
        uint64_t v12 = result + 76 * *(unsigned __int16 *)(result + 23768);
        uint64_t v13 = 15696;
        goto LABEL_158;
      case 34177:
        int v10 = (int)*(float *)a4;
        if ((v10 - 34166) >= 3 && v10 != 5890) {
          goto LABEL_160;
        }
        uint64_t v12 = result + 76 * *(unsigned __int16 *)(result + 23768);
        uint64_t v13 = 15698;
        goto LABEL_158;
      case 34178:
        int v10 = (int)*(float *)a4;
        if ((v10 - 34166) >= 3 && v10 != 5890) {
          goto LABEL_160;
        }
        uint64_t v12 = result + 76 * *(unsigned __int16 *)(result + 23768);
        uint64_t v13 = 15700;
        goto LABEL_158;
      case 34179:
      case 34180:
      case 34181:
      case 34182:
      case 34183:
      case 34187:
      case 34188:
      case 34189:
      case 34190:
      case 34191:
      case 34195:
      case 34196:
      case 34197:
      case 34198:
      case 34199:
        goto LABEL_160;
      case 34184:
        int v10 = (int)*(float *)a4;
        if ((v10 - 34166) >= 3 && v10 != 5890) {
          goto LABEL_160;
        }
        uint64_t v12 = result + 76 * *(unsigned __int16 *)(result + 23768);
        uint64_t v13 = 15702;
        goto LABEL_158;
      case 34185:
        int v10 = (int)*(float *)a4;
        if ((v10 - 34166) >= 3 && v10 != 5890) {
          goto LABEL_160;
        }
        uint64_t v12 = result + 76 * *(unsigned __int16 *)(result + 23768);
        uint64_t v13 = 15704;
        goto LABEL_158;
      case 34186:
        int v10 = (int)*(float *)a4;
        if ((v10 - 34166) >= 3 && v10 != 5890) {
          goto LABEL_160;
        }
        uint64_t v12 = result + 76 * *(unsigned __int16 *)(result + 23768);
        uint64_t v13 = 15706;
        goto LABEL_158;
      case 34192:
        int v10 = (int)*(float *)a4;
        if ((v10 & 0xFFFFFFFC) != 0x300) {
          goto LABEL_160;
        }
        uint64_t v12 = result + 76 * *(unsigned __int16 *)(result + 23768);
        uint64_t v13 = 15708;
        goto LABEL_158;
      case 34193:
        int v10 = (int)*(float *)a4;
        if ((v10 & 0xFFFFFFFC) != 0x300) {
          goto LABEL_160;
        }
        uint64_t v12 = result + 76 * *(unsigned __int16 *)(result + 23768);
        uint64_t v13 = 15710;
        goto LABEL_158;
      case 34194:
        int v10 = (int)*(float *)a4;
        if ((v10 & 0xFFFFFFFC) != 0x300) {
          goto LABEL_160;
        }
        uint64_t v12 = result + 76 * *(unsigned __int16 *)(result + 23768);
        uint64_t v13 = 15712;
        goto LABEL_158;
      case 34200:
        int v10 = (int)*(float *)a4;
        if ((v10 & 0xFFFFFFFE) != 0x302) {
          goto LABEL_160;
        }
        uint64_t v12 = result + 76 * *(unsigned __int16 *)(result + 23768);
        uint64_t v13 = 15714;
        goto LABEL_158;
      case 34201:
        int v10 = (int)*(float *)a4;
        if ((v10 & 0xFFFFFFFE) != 0x302) {
          goto LABEL_160;
        }
        uint64_t v12 = result + 76 * *(unsigned __int16 *)(result + 23768);
        uint64_t v13 = 15716;
        goto LABEL_158;
      case 34202:
        int v10 = (int)*(float *)a4;
        if ((v10 & 0xFFFFFFFE) != 0x302) {
          goto LABEL_160;
        }
        uint64_t v12 = result + 76 * *(unsigned __int16 *)(result + 23768);
        uint64_t v13 = 15718;
        goto LABEL_158;
      default:
        if (a3 == 34162)
        {
          int v10 = (int)*(float *)a4;
          if (v10 > 34022)
          {
            if ((v10 - 34164) >= 2 && v10 != 34023) {
              goto LABEL_160;
            }
          }
          else if (v10 != 260 && v10 != 7681 && v10 != 8448)
          {
            goto LABEL_160;
          }
          uint64_t v12 = result + 76 * *(unsigned __int16 *)(result + 23768);
          uint64_t v13 = 15694;
          goto LABEL_158;
        }
        if (a3 != 34163) {
          goto LABEL_160;
        }
        float v23 = *(float *)a4;
        if (*(float *)a4 == 4.0 || v23 == 1.0 || v23 == 2.0)
        {
          *(float *)(result + 76 * *(unsigned __int16 *)(result + 23768) + 15720) = v23;
          goto LABEL_159;
        }
        break;
    }
    goto LABEL_73;
  }
  if (a3 <= 8704)
  {
    if (a3 == 3356)
    {
      float v24 = *(float *)a4;
      if (*(float *)a4 != 4.0 && v24 != 1.0 && v24 != 2.0)
      {
LABEL_73:
        if (!*(_WORD *)(result + 29832)) {
          *(_WORD *)(result + 29832) = 1281;
        }
        goto LABEL_159;
      }
      *(float *)(result + 76 * *(unsigned __int16 *)(result + 23768) + 15724) = v24;
LABEL_159:
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1548) |= 0x20000u;
      return result;
    }
    if (a3 != 8704) {
      goto LABEL_160;
    }
    int v10 = *(float *)a4;
    if (v10 > 8447)
    {
      if ((v10 - 8448) >= 2 && v10 != 34160) {
        goto LABEL_160;
      }
    }
    else if (v10 != 260 && v10 != 3042 && v10 != 7681)
    {
      goto LABEL_160;
    }
    uint64_t v12 = result + 76 * *(unsigned __int16 *)(result + 23768);
    uint64_t v13 = 15688;
LABEL_158:
    *(_WORD *)(v12 + v13) = v10;
    goto LABEL_159;
  }
  if (a3 != 8705)
  {
    if (a3 != 34161) {
      goto LABEL_160;
    }
    int v10 = (int)*(float *)a4;
    if (v10 > 34022)
    {
      if ((v10 - 34164) >= 2 && (v10 - 34478) >= 2 && v10 != 34023) {
        goto LABEL_160;
      }
    }
    else if (v10 != 260 && v10 != 7681 && v10 != 8448)
    {
      goto LABEL_160;
    }
    uint64_t v12 = result + 76 * *(unsigned __int16 *)(result + 23768);
    uint64_t v13 = 15692;
    goto LABEL_158;
  }
  uint64_t v27 = (float32x4_t *)(result + 16 * v4 + 23808);
  v28.i32[0] = *(_DWORD *)a4;
  v27->i32[0] = *(_DWORD *)a4;
  __int32 v29 = *(_DWORD *)(a4 + 4);
  v27->i32[1] = v29;
  __int32 v30 = *(_DWORD *)(a4 + 8);
  v27->i32[2] = v30;
  __int32 v31 = *(_DWORD *)(a4 + 12);
  v27->i32[3] = v31;
  if (*(unsigned char *)(result + 15178))
  {
    unsigned __int16 v32 = (const float *)(result + 288);
    v28.i32[1] = v29;
    v28.i64[1] = __PAIR64__(v31, v30);
    float32x4_t v33 = vld1q_dup_f32(v32);
    unsigned int v34 = (const float *)(result + 292);
    float32x4_t v35 = vmaxnmq_f32(v28, v33);
    float32x4_t v36 = vld1q_dup_f32(v34);
    float32x4_t v37 = vminnmq_f32(v35, v36);
  }
  else
  {
    float32x4_t v37 = *v27;
  }
  *(float32x4_t *)(result + 76 * v4 + 15652) = v37;
  if (*(__int16 *)(result + 23772) <= v4) {
    *(_WORD *)(result + 23772) = v4 + 1;
  }
  uint64_t v48 = *(void *)(result + 19248);
  if (v48)
  {
    unint64_t v49 = *(unsigned __int16 *)(v48 + 2 * v4 + 3736);
    if (v49 <= 0x3FF)
    {
      *(_DWORD *)(result + ((v49 >> 3) & 0x1FFC) + 1552) |= 1 << v49;
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1532) |= 0x800000u;
    }
  }
  uint64_t v50 = *(void *)(result + 19272);
  if (v50)
  {
    unint64_t v51 = *(unsigned __int16 *)(v50 + 2 * v4 + 3736);
    if (v51 <= 0x3FF)
    {
      *(_DWORD *)(result + ((v51 >> 3) & 0x1FFC) + 1936) |= 1 << v51;
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1532) |= 0x4000000u;
    }
  }
  uint64_t v52 = *(void *)(result + 19280);
  if (v52)
  {
    unint64_t v19 = *(unsigned __int16 *)(v52 + 2 * v4 + 3736);
LABEL_31:
    if (v19 <= 0x3FF)
    {
      *(_DWORD *)(result + ((v19 >> 3) & 0x1FFC) + 2064) |= 1 << v19;
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1532) |= 0x8000000u;
    }
  }
  return result;
}

uint64_t glReadBuffer_Exec(uint64_t result, unsigned int a2)
{
  uint64_t v2 = (_WORD *)(result + 29832);
  uint64_t v3 = *(void *)(result + 28968);
  if (v3)
  {
    if (!a2)
    {
      if (!*(_DWORD *)(v3 + 544)) {
        return result;
      }
      int v6 = 0;
      int v7 = (_DWORD *)(v3 + 40);
      *(_WORD *)(v3 + 516) = 0;
      uint64_t v8 = *(void *)(result + 29480);
LABEL_27:
      LOWORD(a2) = 0;
LABEL_28:
      *(_WORD *)(v3 + 472) = a2;
      *(_DWORD *)(v3 + 544) = v6;
      if ((*(unsigned char *)(v8 + 561) & 0x40) != 0) {
        unsigned int v9 = (v7[127] | v7[126] | 0xFFFFFF00) & v7[125];
      }
      else {
        unsigned int v9 = v7[125];
      }
      v7[114] = v9;
      return gleSetUnknownFramebufferCompleteness(result, (uint64_t)v7);
    }
    if (a2 >> 5 >= 0x467)
    {
      uint64_t v8 = *(void *)(result + 29480);
      if (*(unsigned __int8 *)(v8 + 22) + 36064 > a2)
      {
        int v6 = 1 << a2;
        if (*(_DWORD *)(v3 + 544) == 1 << a2) {
          return result;
        }
        int v7 = (_DWORD *)(v3 + 40);
        *(_WORD *)(v3 + 516) = a2;
        if ((*(_DWORD *)(v3 + 540) & v6) != 0) {
          goto LABEL_28;
        }
        goto LABEL_27;
      }
    }
    if (a2 - 1024 > 0xC) {
      goto LABEL_7;
    }
    if (((1 << a2) & 0x1EDF) != 0)
    {
      if (*(unsigned char *)(result + 32501) == 4)
      {
LABEL_7:
        if (*v2) {
          return result;
        }
        LOWORD(v3) = 1280;
        goto LABEL_38;
      }
    }
    else if (a2 != 1029)
    {
      goto LABEL_7;
    }
    if (*v2) {
      return result;
    }
    LOWORD(v3) = 1282;
LABEL_38:
    *uint64_t v2 = v3;
    return result;
  }
  if (a2)
  {
    if (a2 != 1029)
    {
      LOWORD(v3) = 1280;
      if (a2 >> 5 >= 0x467)
      {
        if (*(unsigned __int8 *)(*(void *)(result + 29480) + 22) + 36064 <= a2) {
          LOWORD(v3) = 1280;
        }
        else {
          LOWORD(v3) = 1282;
        }
      }
    }
  }
  if (a2 && a2 != 1029)
  {
    if (*v2) {
      return result;
    }
    goto LABEL_38;
  }
  uint64_t v4 = (_WORD *)(result + 15176);
  *(_WORD *)(result + 29844) = a2;
  if (a2 == 1029) {
    int v5 = 1026;
  }
  else {
    int v5 = a2;
  }
  if (v5 != (unsigned __int16)*v4)
  {
    *uint64_t v4 = v5;
    *(_DWORD *)(result + 29800) |= 0x80000000;
  }
  return result;
}

uint64_t glCopyTexSubImage2D_Exec(uint64_t result, int a2, uint64_t a3, int a4, int a5, unsigned int a6, unsigned int a7, int a8, double a9, double a10, double a11, int a12)
{
  unint64_t v19 = (void *)result;
  uint64_t v20 = result + 29832;
  uint64_t v21 = result + 19152;
  if ((*(unsigned char *)(result + 1540) & 4) != 0)
  {
    int8x16_t result = gleGenerateMatrixIdentifier(result, result + 9488, a9, a10, a11);
    *(_DWORD *)uint64_t v21 = *(_DWORD *)v21 & 0xFFFFFEFF | ((result != -1074791426) << 8);
    *(_DWORD *)(v21 + 10580) = result;
  }
  if ((*(unsigned char *)(v21 + 10651) & 0x8A) != 0)
  {
    int8x16_t result = gleUpdateReadFramebufferState((uint64_t)v19);
    if (result)
    {
      if (result != 16711680 && !*(_WORD *)v20) {
        *(_WORD *)uint64_t v20 = result;
      }
      return result;
    }
  }
  unsigned int v45 = a6;
  if (!a8) {
    return result;
  }
  if (!a12) {
    return result;
  }
  int8x16_t result = gleCheckCopyTexSubImage2DArgs((uint64_t)v19, a2, a3, a4, a5, a8, a12);
  if (!result) {
    return result;
  }
  uint64_t v22 = result;
  if (*(unsigned char *)(result + 770)) {
    return result;
  }
  if (*(unsigned char *)(v20 + 2671)) {
    uint64_t v43 = mach_absolute_time();
  }
  else {
    uint64_t v43 = 0;
  }
  if ((a2 - 34069) >= 6) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = (a2 - 34069);
  }
  uint64_t v24 = (int)a3;
  uint64_t v44 = v22 + 480 * v23 + 32 * (int)a3 + 1032;
  if (!*(void *)(v22 + 536) && (*(_WORD *)(v22 + 768) & 0x800) == 0)
  {
    gfxWaitTextureOnDevices();
    uint64_t v24 = (int)a3;
  }
  if (*(unsigned __int8 *)(v22 + 976) > (int)a3
    || *(unsigned __int8 *)(v22 + 978) < (int)a3
    || ((1 << a3) & *(unsigned __int16 *)(v22 + 2 * v23 + 984)) == 0)
  {
    int v42 = 0;
    goto LABEL_31;
  }
  uint64_t v46 = 0;
  uint64_t v41 = v24;
  if ((*(unsigned char *)(v22 + 898) & 1) != 0 && *(_DWORD *)(v22 + 884) == a3 && (*(_WORD *)(v22 + 768) & 0xF) != 2)
  {
    gleGenerateEmptyMipmaps((uint64_t)v19, v22, v23, a3, *(unsigned __int8 *)(v22 + 975), 0, 0);
    if (*(_DWORD *)(v19[3621] + 480))
    {
      int8x16_t result = gleUpdateReadFramebufferStateInline((uint64_t)v19, v37, v38, v39);
      if (!result) {
        return result;
      }
    }
    char v40 = 0;
    int v42 = 1;
  }
  else
  {
    int v42 = 0;
    char v40 = 1;
  }
  uint64_t v25 = v19[3621];
  if (v25)
  {
    int v26 = *(unsigned __int16 *)(v25 + 474);
    int v27 = *(unsigned __int16 *)(v25 + 476);
  }
  else
  {
    int v26 = *(_DWORD *)(v21 + 10480);
    int v27 = *(_DWORD *)(v21 + 10484);
  }
  unsigned int v50 = v45;
  int v48 = a8;
  unsigned int v49 = a7;
  int v47 = a12;
  gleClipReadableRange((uint64_t)v19, v26, v27, (int *)&v50, (int *)&v49, &v48, &v47, (_DWORD *)&v46 + 1, &v46);
  uint64_t v30 = v19[*(unsigned __int16 *)(v21 + 4616) + 2992];
  if (v30) {
    __int32 v31 = (char *)(v30 + 198);
  }
  else {
    __int32 v31 = (char *)(v22 + 926);
  }
  char v32 = *v31;
  *(_DWORD *)(v22 + 968) = 65540;
  if (v48 < 1
    || v47 < 1
    || (int8x16_t result = (*(uint64_t (**)(void, void, uint64_t, uint64_t, void, void, void, void, unint64_t, unint64_t))(v19[3681] + 360))(v19[3627], *(void *)(v22 + 8 * *(unsigned __int8 *)(v20 + 2667)), v23, a3, (HIDWORD(v46) + a4), (v46 + a5), 0, v50, __PAIR64__(v48, v49), __PAIR64__((v32 & 1) == 0, v47)), !result))
  {
    uint64_t v24 = v41;
LABEL_31:
    float32x4_t v28 = (char *)(v22 + 480 * v23 + 32 * v24 + 1043);
    char v29 = *v28;
    if ((*v28 & 0x40) != 0)
    {
      gleSynchronizeTextureLevelOnCurrentDevices((uint64_t)v19, v22);
    }
    else if ((*v28 & 0x10) == 0)
    {
      if (!*(void *)(v22 + 480 * v23 + 32 * v24 + 1056))
      {
        if (!gfxAllocateTextureLevel())
        {
          if (!*(_WORD *)v20) {
            *(_WORD *)uint64_t v20 = 1285;
          }
          goto LABEL_38;
        }
        char v29 = *v28;
      }
      char *v28 = v29 | 0x10;
    }
LABEL_38:
    gfxModifyPluginTextureLevel();
    if ((*(_WORD *)(v22 + 768) & 0x800) == 0) {
      (*(void (**)(void, uint64_t, void, void))(v19[3687] + 280))(v19[3683], 1, 0, *(void *)(v22 + 8 * *(unsigned __int8 *)(v20 + 2668)));
    }
    if ((*v28 & 0x10) != 0) {
      gleTextureSubImageCopy((uint64_t)v19, v22, v44, a4, a5, 0, v45, a7, a8, a12);
    }
    if ((*(unsigned char *)(v22 + 898) & 1) == 0
      || *(_DWORD *)(v22 + 884) != a3
      || (int8x16_t result = gleGenMipmaps((uint64_t)v19, v22, v23, a3, 1, v42 == 0), !result))
    {
      int8x16_t result = gleDirtyTextureLevelCurrentBindPointsData((uint64_t)v19, v22, v44);
    }
    goto LABEL_46;
  }
  if ((*(_WORD *)(v22 + 768) & 0x800) == 0)
  {
    *(void *)(v22 + 536) = v19[3628];
    float32x4_t v33 = (char *)(v22 + 480 * v23 + 32 * v41 + 1043);
    char v34 = *v33;
    if ((*v33 & 0x10) != 0)
    {
      if ((*v33 & 9) == 0)
      {
        int8x16_t result = gfxFreeTextureLevel();
        char v34 = *v33;
      }
      v34 &= ~0x10u;
      *(_WORD *)(v22 + 2 * v23 + 996) &= ~(unsigned __int16)(1 << a3);
    }
    *float32x4_t v33 = v34 | 0x40;
    if ((v40 & 1) == 0)
    {
      int v35 = *(unsigned __int8 *)(v22 + 975);
      if (v35 > (int)a3)
      {
        float32x4_t v36 = (unsigned char *)(32 * a3 + 480 * v23 + v22 + 1075);
        do
        {
          *v36 |= 0x40u;
          v36 += 32;
          LODWORD(a3) = a3 + 1;
        }
        while ((int)a3 < v35);
      }
    }
  }
LABEL_46:
  if (*(unsigned char *)(v20 + 2671))
  {
    int8x16_t result = mach_absolute_time();
    v19[2396] += result - v43;
  }
  return result;
}

uint64_t gleCheckCopyTexSubImage2DArgs(uint64_t a1, int a2, signed int a3, int a4, int a5, int a6, int a7)
{
  uint64_t v14 = (__int16 *)(a1 + 29832);
  uint64_t v15 = gleLookUpNonProxyTexture2D(a1, a2);
  if (!v15)
  {
    if (!*v14)
    {
      uint64_t v16 = 0;
      __int16 v21 = 1280;
      goto LABEL_30;
    }
    return 0;
  }
  uint64_t v16 = v15;
  unsigned int v17 = *(unsigned __int16 *)(v15 + 960);
  BOOL v19 = v17 == 36975 || v17 - 33329 < 0xC;
  int v20 = v17 - 36208 < 0x24 || v19;
  if (!gleCheckCopyTexSubImageArgs(a1, a3, *(unsigned __int16 *)(v15 + 772), v17, v20, 0)) {
    return 0;
  }
  if (a2 == 34037 && a3 >= 1)
  {
LABEL_14:
    if (!*v14)
    {
      uint64_t v16 = 0;
      __int16 v21 = 1281;
LABEL_30:
      *uint64_t v14 = v21;
      return v16;
    }
    return 0;
  }
  unsigned int v22 = a2 - 34069;
  if ((a2 - 34069) >= 6) {
    unsigned int v22 = 0;
  }
  if ((*(unsigned char *)(v16 + 480 * v22 + 32 * a3 + 1043) & 0x20) == 0)
  {
LABEL_21:
    if (!*v14)
    {
      uint64_t v16 = 0;
      __int16 v21 = 1282;
      goto LABEL_30;
    }
    return 0;
  }
  if (!*(_WORD *)(v16 + 480 * v22 + 32 * a3 + 1050))
  {
    if ((a6 & 3) != 0 && a5 | a4 && a6 + a4 != *(unsigned __int16 *)(v16 + 480 * v22 + 32 * a3 + 1036)) {
      goto LABEL_21;
    }
    if ((a7 & 3) != 0)
    {
      if (a5 | a4) {
        BOOL v26 = a7 + a5 == *(unsigned __int16 *)(v16 + 480 * v22 + 32 * a3 + 1038);
      }
      else {
        BOOL v26 = 1;
      }
      char v27 = v26;
      if ((a4 & 3) != 0 || (v27 & 1) == 0) {
        goto LABEL_21;
      }
    }
    else if ((a4 & 3) != 0)
    {
      goto LABEL_21;
    }
    if ((a5 & 3) != 0) {
      goto LABEL_21;
    }
  }
  int v23 = *(_DWORD *)(a1 + 19152);
  if ((v23 & 6) != 0)
  {
    if ((v23 & 2) != 0)
    {
      if (*(unsigned __int16 *)(a1 + 18856) == 32790)
      {
        a6 = a6 - *(_DWORD *)(a1 + 18872) + 1;
        uint64_t v24 = (_DWORD *)(a1 + 18876);
        goto LABEL_47;
      }
    }
    else if ((v23 & 4) != 0 && *(unsigned __int16 *)(a1 + 18928) == 32790)
    {
      a6 = a6 - *(_DWORD *)(a1 + 18944) + 1;
      uint64_t v24 = (_DWORD *)(a1 + 18948);
LABEL_47:
      a7 = a7 - *v24 + 1;
    }
  }
  if (a6 < 0) {
    goto LABEL_14;
  }
  int v28 = *(unsigned __int8 *)(v16 + 480 * v22 + 32 * a3 + 1042);
  if (-v28 > a4 || a6 + a4 > *(unsigned __int16 *)(v16 + 480 * v22 + 32 * a3 + 1036) + v28) {
    goto LABEL_14;
  }
  if (a2 == 35864)
  {
    if ((a7 | a5) < 0 || a7 + a5 > *(unsigned __int16 *)(v16 + 480 * v22 + 32 * a3 + 1038)) {
      goto LABEL_14;
    }
  }
  else if (a7 < 0 || -v28 > a5 || a7 + a5 > *(unsigned __int16 *)(v16 + 480 * v22 + 32 * a3 + 1038) + v28)
  {
    goto LABEL_14;
  }
  return v16;
}

void glNormalPointer_Exec(uint64_t a1, int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4 = a1 + 28652;
  if ((a3 & 0x80000000) == 0)
  {
    uint64_t v5 = a4;
    uint64_t v8 = *(void *)(a1 + 26384);
    uint64_t v9 = *(void *)(a1 + 19312);
    if (!v9 && v8 != *(void *)(a1 + 26392) && a4 && !*(unsigned char *)(a1 + 32502))
    {
      if (!*(_WORD *)(a1 + 29832))
      {
        __int16 v13 = 1282;
LABEL_26:
        *(_WORD *)(a1 + 29832) = v13;
        return;
      }
      return;
    }
    HIDWORD(v10) = a2;
    LODWORD(v10) = a2 - 5120;
    unsigned int v11 = 3;
    unint64_t v12 = 0x340000000000;
    switch((v10 >> 1))
    {
      case 0u:
        goto LABEL_12;
      case 1u:
        unsigned int v11 = 6;
        unint64_t v12 = 0x340200000000;
        goto LABEL_12;
      case 3u:
        goto LABEL_11;
      case 6u:
        if (*(unsigned char *)(a1 + 32501) != 2) {
          goto LABEL_24;
        }
LABEL_11:
        unint64_t v12 = (unint64_t)(unsigned __int16)a2 << 32;
        unsigned int v11 = 12;
LABEL_12:
        *(void *)(v8 + 944) |= 0x20000uLL;
        *(void *)(v8 + 160) = a4;
        uint64_t v14 = *(void *)(v8 + 1248);
        if (v9 == v14) {
          goto LABEL_36;
        }
        if (v14 && (int v15 = *(_DWORD *)(v14 + 20) - 1, (*(_DWORD *)(v14 + 20) = v15) == 0))
        {
          gleUnbindAndFreeBufferObject(a1, (void *)v14);
          if (v9) {
            goto LABEL_16;
          }
        }
        else if (v9)
        {
LABEL_16:
          ++*(_DWORD *)(v9 + 20);
          uint64_t v16 = *(void *)(v8 + 912);
          if ((v16 & 0x20000) == 0)
          {
            *(void *)(v8 + 912) = v16 | 0x20000;
            if ((*(unsigned char *)(v8 + 906) & 2) != 0) {
              gleUpdateDrawArraysFuncs(a1);
            }
          }
          uint64_t v17 = *(unsigned __int8 *)(v4 + 3844);
          if (*(unsigned char *)(v4 + 3844))
          {
            uint64_t v18 = (uint64_t *)(v9 + 40);
            BOOL v19 = (void *)(v8 + 1504);
            do
            {
              uint64_t v20 = *v18++;
              *BOOL v19 = v20;
              v19 += 35;
              --v17;
            }
            while (v17);
          }
          if (v14)
          {
LABEL_35:
            *(_DWORD *)uint64_t v4 = 0;
            *(_DWORD *)(a1 + 1532) |= 0x1000u;
            *(void *)(v8 + 944) |= 0x20010uLL;
            *(void *)(v8 + 1248) = v9;
LABEL_36:
            if (v9)
            {
              v5 += *(void *)(v9 + 136);
              if (*(void *)(v9 + 192))
              {
                if ((*(unsigned char *)(v8 + 906) & 2) != 0) {
                  *(unsigned char *)(v8 + 1216) = 0;
                }
              }
            }
            *(void *)(v8 + 968) = v5;
            if (a3) {
              uint64_t v24 = a3;
            }
            else {
              uint64_t v24 = v11;
            }
            uint64_t v25 = 0x3000000000000;
            if (((v24 | v5) & 0xF) == 0) {
              uint64_t v25 = 0x203000000000000;
            }
            unint64_t v26 = v12 | v24 | v25;
            if (*(void *)(v8 + 176) != v26)
            {
              *(void *)(v8 + 952) |= 0x20000uLL;
              *(void *)(v8 + 176) = v26;
              *(void *)(a1 + 26184) = gleSetVertexArrayFunc;
              *(void *)(a1 + 26192) = gleSetVertexArrayFunc;
              *(void *)(a1 + 26200) = gleSetVertexElemFunc;
              *(void *)(a1 + 26208) = gleSetVertexElemFunc;
              *(_DWORD *)uint64_t v4 = 0;
              *(_DWORD *)(a1 + 1532) |= 0x1000u;
            }
            return;
          }
LABEL_34:
          *(void *)(v8 + 952) |= 0x20000uLL;
          goto LABEL_35;
        }
        uint64_t v21 = *(void *)(v8 + 912);
        if ((v21 & 0x20000) != 0)
        {
          *(void *)(v8 + 912) = v21 & 0xFFFFFFFFFFFDFFFFLL;
          if ((*(unsigned char *)(v8 + 906) & 2) != 0) {
            gleUpdateDrawArraysFuncs(a1);
          }
        }
        uint64_t v22 = *(unsigned __int8 *)(v4 + 3844);
        if (*(unsigned char *)(v4 + 3844))
        {
          int v23 = (void *)(v8 + 1504);
          do
          {
            *int v23 = 0;
            v23 += 35;
            --v22;
          }
          while (v22);
        }
        goto LABEL_34;
      default:
LABEL_24:
        if (*(_WORD *)(a1 + 29832)) {
          return;
        }
        __int16 v13 = 1280;
        goto LABEL_26;
    }
  }
  if (!*(_WORD *)(a1 + 29832))
  {
    __int16 v13 = 1281;
    goto LABEL_26;
  }
}

uint64_t glCopyTexImage2D_Exec(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, int a7, unsigned int a8, double a9, double a10, double a11, int a12)
{
  uint64_t v20 = a1 + 29832;
  uint64_t v21 = (unsigned __int16 *)(a1 + 18856);
  if ((*(unsigned char *)(a1 + 1540) & 4) != 0)
  {
    int MatrixIdentifier = gleGenerateMatrixIdentifier(a1, a1 + 9488, a9, a10, a11);
    *((_DWORD *)v21 + 74) = *((_DWORD *)v21 + 74) & 0xFFFFFEFF | ((MatrixIdentifier != -1074791426) << 8);
    *((_DWORD *)v21 + 2719) = MatrixIdentifier;
  }
  if ((*((unsigned char *)v21 + 10947) & 0x8A) != 0)
  {
    uint64_t result = gleUpdateReadFramebufferState(a1);
    if (result)
    {
      if (result != 16711680 && !*(_WORD *)v20) {
        *(_WORD *)uint64_t v20 = result;
      }
      return result;
    }
  }
  unsigned int v65 = a6;
  unsigned int v66 = a5;
  uint64_t result = gleCheckCopyTexImage2DArgs(a1, a2, a3, a4, a7, a8, a12);
  if (!result) {
    return result;
  }
  uint64_t v24 = result;
  if (*(unsigned char *)(result + 770)) {
    return result;
  }
  if (*(unsigned char *)(v20 + 2671)) {
    uint64_t result = mach_absolute_time();
  }
  else {
    uint64_t result = 0;
  }
  __int16 v25 = *(_WORD *)(v24 + 768);
  if ((v25 & 0x1C00) == 0x1000) {
    goto LABEL_19;
  }
  if ((*(_WORD *)(v24 + 768) & 0x1C00) == 0)
  {
    *(_WORD *)(v24 + 768) = v25 | 0x1000;
    goto LABEL_19;
  }
  if ((*(_WORD *)(v24 + 768) & 0xC00) == 0)
  {
LABEL_19:
    int v26 = *((_DWORD *)v21 + 74);
    if ((v26 & 2) != 0)
    {
      int v27 = a8;
      int v28 = a7;
      if (*v21 != 32790) {
        goto LABEL_26;
      }
      int v28 = a7 - *((_DWORD *)v21 + 4) + 1;
      char v29 = v21 + 10;
    }
    else
    {
      int v27 = a8;
      int v28 = a7;
      if ((v26 & 4) == 0) {
        goto LABEL_26;
      }
      int v27 = a8;
      int v28 = a7;
      if (v21[36] != 32790) {
        goto LABEL_26;
      }
      int v28 = a7 - *((_DWORD *)v21 + 22) + 1;
      char v29 = v21 + 46;
    }
    int v27 = a8 - *v29 + 1;
LABEL_26:
    unsigned int v61 = a7;
    unsigned int v59 = a8;
    uint64_t v62 = result;
    if (v27) {
      int v30 = a12;
    }
    else {
      int v30 = 0;
    }
    int v63 = v30;
    if (v27) {
      int v31 = v28;
    }
    else {
      int v31 = 0;
    }
    if ((a2 - 34069) >= 6) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = (a2 - 34069);
    }
    int v33 = v27;
    unsigned int Framebuffer = gleTypeFromReadFramebuffer(a1, a4);
    LOWORD(v55) = 256;
    int v54 = v63;
    BOOL v64 = (int *)(v24 + 480 * v32 + 32 * (int)a3 + 1032);
    uint64_t v60 = v32;
    int v35 = v33;
    int v36 = gleEvaluateTextureImageChange(a1, v24, (uint64_t)v64, v32, a3, v31, v33, 1, v54, a4, 0x1908u, Framebuffer, v55, 0);
    int v37 = v36;
    if (!v31)
    {
LABEL_47:
      uint64_t result = 0;
      goto LABEL_48;
    }
    int v58 = v36;
    if (*(unsigned __int8 *)(v24 + 976) <= (int)a3 && *(unsigned __int8 *)(v24 + 978) >= (int)a3)
    {
      if ((*(unsigned __int16 *)(v24 + 2 * v32 + 984) >> a3))
      {
        unsigned int v68 = 0;
        unsigned int v67 = 0;
        unsigned int v38 = v66;
        unsigned int v40 = v61;
        if ((*(unsigned char *)(v24 + 898) & 1) != 0
          && *(_DWORD *)(v24 + 884) == a3
          && (*(_WORD *)(v24 + 768) & 0xF) != 2)
        {
          gleGenerateEmptyMipmaps(a1, v24, v60, a3, *(unsigned __int8 *)(v24 + 975), 0, 0);
          char v56 = 0;
          int v57 = 1;
        }
        else
        {
          char v56 = 1;
          int v57 = 0;
        }
        uint64_t v44 = *(void *)(a1 + 28968);
        if (v44)
        {
          int v45 = *(unsigned __int16 *)(v44 + 474);
          int v46 = *(unsigned __int16 *)(v44 + 476);
        }
        else
        {
          int v45 = *((_DWORD *)v21 + 2694);
          int v46 = *((_DWORD *)v21 + 2695);
        }
        unsigned int v71 = v65;
        unsigned int v72 = v66;
        int v69 = v35;
        int v70 = v31;
        gleClipReadableRange(a1, v45, v46, (int *)&v72, (int *)&v71, &v70, &v69, &v68, &v67);
        uint64_t v47 = *(void *)(a1 + 8 * v21[2456] + 23936);
        if (v47) {
          int v48 = (unsigned char *)(v47 + 198);
        }
        else {
          int v48 = (unsigned char *)(v24 + 926);
        }
        BOOL v49 = (*v48 & 1) == 0;
        unsigned int v50 = *(unsigned __int16 *)(v24 + 982);
        if ((v50 & 0x8000) != 0)
        {
          --v68;
          if ((v50 & 0x2000) == 0) {
            v67 -= v50 >> 15;
          }
        }
        *(_DWORD *)(v24 + 968) = 65540;
        if (v70 >= 1 && v69 >= 1)
        {
          uint64_t result = (*(uint64_t (**)(void, void, uint64_t, uint64_t, void, void, void, void, unint64_t, unint64_t))(*(void *)(a1 + 29448) + 360))(*(void *)(a1 + 29016), *(void *)(v24 + 8 * *(unsigned __int8 *)(v20 + 2667)), v60, a3, v68, v67, 0, v72, __PAIR64__(v70, v71), __PAIR64__(v49, v69));
          if (result)
          {
            *(void *)(v24 + 536) = *(void *)(a1 + 29024);
            uint64_t v51 = v24 + 480 * v60 + 32 * (int)a3;
            *(unsigned char *)(v51 + 1043) |= 0x40u;
            if (v56)
            {
LABEL_45:
              int v37 = v58;
              goto LABEL_48;
            }
            int v52 = *(unsigned __int8 *)(v24 + 975);
            int v37 = v58;
            if (v52 > (int)a3)
            {
              __int16 v53 = (unsigned char *)(32 * a3 + 480 * v60 + v24 + 1075);
              do
              {
                *v53 |= 0x40u;
                v53 += 32;
                LODWORD(a3) = a3 + 1;
              }
              while ((int)a3 < v52);
            }
            goto LABEL_48;
          }
        }
        double v39 = (unsigned __int16 *)v64;
LABEL_40:
        if (gfxAllocateTextureLevel())
        {
          gleTextureImageCopy(a1, v24, v39, a4, v38, v65, v40, v59);
          uint64_t v41 = v24 + 480 * v60 + 32 * (int)a3;
          *(_DWORD *)(v24 + 968) = *(_DWORD *)(v41 + 1048);
          *(unsigned char *)(v41 + 1043) |= 0x10u;
          *(_WORD *)(v24 + 2 * v60 + 996) |= *(_WORD *)(v24 + 2 * v60 + 984) & (unsigned __int16)(1 << a3);
          uint64_t v42 = v24 + 24 * *(unsigned __int8 *)(v20 + 2667);
          *(unsigned char *)(v42 + 116) |= 4u;
          *(_WORD *)(v42 + 2 * v60 + 104) |= 1 << a3;
          if ((*(unsigned char *)(v24 + 898) & 1) != 0 && *(_DWORD *)(v24 + 884) == a3) {
            uint64_t result = gleGenMipmaps(a1, v24, v60, a3, 1, v57 == 0);
          }
          else {
            uint64_t result = 0;
          }
          goto LABEL_45;
        }
        int v37 = v58;
        if (*(_WORD *)v20) {
          goto LABEL_47;
        }
        uint64_t result = 0;
        *(_WORD *)uint64_t v20 = 1285;
LABEL_48:
        if ((v37 & 0xC0000001) != 0)
        {
          if (v37 < 0) {
            int v43 = 134356992;
          }
          else {
            int v43 = 139264;
          }
          *((_DWORD *)v21 + 2449) = 0;
          *(_DWORD *)(a1 + 1548) |= v43;
        }
        else if (result == 1)
        {
          goto LABEL_55;
        }
        uint64_t result = gleDirtyTextureLevelCurrentBindPointsGeom(a1, v24, v64);
LABEL_55:
        if (*(unsigned char *)(v20 + 2671))
        {
          uint64_t result = mach_absolute_time();
          *(void *)(a1 + 19168) += result - v62;
        }
        return result;
      }
      int v57 = 0;
      unsigned int v38 = v66;
      double v39 = (unsigned __int16 *)v64;
    }
    else
    {
      int v57 = 0;
      unsigned int v38 = v66;
      double v39 = (unsigned __int16 *)v64;
    }
    unsigned int v40 = v61;
    goto LABEL_40;
  }
  if (!*(_WORD *)v20) {
    *(_WORD *)uint64_t v20 = 1282;
  }
  return result;
}

uint64_t gleCheckCopyTexImage2DArgs(uint64_t a1, int a2, signed int a3, signed int a4, int a5, unsigned int a6, int a7)
{
  uint64_t v13 = a1 + 29832;
  uint64_t v14 = gleLookUpNonProxyTexture2D(a1, a2);
  if (v14)
  {
    uint64_t v15 = v14;
    if (!*(unsigned char *)(v14 + 559))
    {
      unsigned int v16 = a5 - 2 * a7;
      unsigned int v17 = a6 - 2 * a7;
      int v18 = *(_DWORD *)(a1 + 19152);
      if ((v18 & 6) == 0) {
        goto LABEL_13;
      }
      if ((v18 & 2) != 0)
      {
        if (*(unsigned __int16 *)(a1 + 18856) != 32790) {
          goto LABEL_13;
        }
        unsigned int v16 = v16 - *(_DWORD *)(a1 + 18872) + 1;
        BOOL v19 = (_DWORD *)(a1 + 18876);
      }
      else
      {
        if ((v18 & 4) == 0 || *(unsigned __int16 *)(a1 + 18928) != 32790)
        {
LABEL_13:
          int v22 = 1;
          switch(*(_WORD *)(v14 + 768) & 0xF)
          {
            case 0:
              if (v16 != v17) {
                goto LABEL_61;
              }
              uint64_t v23 = *(void *)(a1 + 29032);
              if ((int)v16 > *(unsigned __int16 *)(v23 + 168)) {
                goto LABEL_61;
              }
              int v22 = *(_DWORD *)(v23 + 572) >> 31;
              goto LABEL_17;
            case 2:
              if ((v16 & 0x80000000) != 0) {
                goto LABEL_61;
              }
              unsigned int v30 = *(unsigned __int16 *)(*(void *)(a1 + 29032) + 166);
              if (v16 > v30 || v17 > v30 || a3 > 0 || a7) {
                goto LABEL_61;
              }
              goto LABEL_49;
            case 3:
LABEL_17:
              if ((v16 & 0x80000000) != 0 || a7 && !v16) {
                goto LABEL_61;
              }
              if ((v16 & (v16 - 1)) != 0)
              {
                int v24 = *(unsigned __int8 *)(v13 + 2669);
                if (v24 != 4 && (a3 || v24 != 3 && (*(unsigned char *)(*(void *)(a1 + 29032) + 578) & 0x10) == 0)) {
                  goto LABEL_61;
                }
              }
              uint64_t v25 = *(void *)(a1 + 29032);
              unsigned int v26 = *(unsigned __int16 *)(v25 + 160);
              if (v16 > v26) {
                goto LABEL_61;
              }
              BOOL v27 = a7 && v17 == 0;
              BOOL v28 = v27;
              if ((v17 & 0x80000000) != 0) {
                goto LABEL_61;
              }
              if (v28) {
                goto LABEL_61;
              }
              if ((v17 & (v17 - 1)) != 0)
              {
                int v29 = *(unsigned __int8 *)(v13 + 2669);
                if (v29 != 4 && (a3 || v29 != 3 && (*(unsigned char *)(v25 + 578) & 0x10) == 0)) {
                  goto LABEL_61;
                }
              }
              if (v17 > v26) {
                goto LABEL_61;
              }
              goto LABEL_49;
            case 6:
              if ((v16 & 0x80000000) == 0 && (!a7 || v16))
              {
                if ((v16 & (v16 - 1)) == 0
                  || (int v31 = *(unsigned __int8 *)(v13 + 2669), v31 == 4)
                  || !a3 && (v31 == 3 || (*(unsigned char *)(*(void *)(a1 + 29032) + 578) & 0x10) != 0))
                {
                  uint64_t v32 = *(void *)(a1 + 29032);
                  if (v16 <= *(unsigned __int16 *)(v32 + 160)
                    && (a6 & 0x80000000) == 0
                    && *(unsigned __int16 *)(v32 + 162) >= a6)
                  {
                    goto LABEL_49;
                  }
                }
              }
LABEL_61:
              if (*(_WORD *)v13) {
                return 0;
              }
              uint64_t result = 0;
              __int16 v21 = 1281;
              break;
            default:
LABEL_49:
              if (gleCheckCopyTexImageArgs(a1, a3, a4, a7, v22)) {
                return v15;
              }
              else {
                return 0;
              }
          }
          goto LABEL_64;
        }
        unsigned int v16 = v16 - *(_DWORD *)(a1 + 18944) + 1;
        BOOL v19 = (_DWORD *)(a1 + 18948);
      }
      unsigned int v17 = v17 - *v19 + 1;
      goto LABEL_13;
    }
    if (!*(_WORD *)v13)
    {
      uint64_t result = 0;
      __int16 v21 = 1282;
      goto LABEL_64;
    }
    return 0;
  }
  if (*(_WORD *)v13) {
    return 0;
  }
  uint64_t result = 0;
  __int16 v21 = 1280;
LABEL_64:
  *(_WORD *)uint64_t v13 = v21;
  return result;
}

uint64_t gleCheckCopyTexImageArgs(uint64_t a1, unsigned int a2, signed int a3, int a4, int a5)
{
  uint64_t v5 = (__int16 *)(a1 + 29832);
  if (!a4)
  {
    int v12 = 0;
    if (a3 <= 35055)
    {
      if (a3 > 33316)
      {
        if (a3 <= 34024)
        {
          switch(a3)
          {
            case 33319:
              goto LABEL_46;
            case 33321:
            case 33323:
            case 33325:
            case 33326:
            case 33327:
            case 33328:
              goto LABEL_50;
            case 33329:
            case 33330:
            case 33331:
            case 33332:
            case 33333:
            case 33334:
            case 33335:
            case 33336:
            case 33337:
            case 33338:
            case 33339:
            case 33340:
              goto LABEL_30;
            default:
              goto LABEL_65;
          }
        }
        if (a3 > 34835)
        {
          char v13 = a3 - 20;
          if ((a3 - 34836) > 0x23 || ((1 << v13) & 0x800000F3CLL) != 0 || ((1 << v13) & 0xC3) == 0) {
            goto LABEL_65;
          }
          goto LABEL_50;
        }
        if ((a3 - 34025) < 4 || (a3 - 34029) < 2) {
          goto LABEL_65;
        }
        int v16 = 34041;
        goto LABEL_57;
      }
      if (a3 > 10767)
      {
        char v14 = a3 - 59;
        if ((a3 - 32827) > 0x20) {
          goto LABEL_20;
        }
        if (((1 << v14) & 0x7FFFF) != 0 || ((1 << v14) & 0x187B00000) != 0) {
          goto LABEL_65;
        }
        if (((1 << v14) & 0x78400000) == 0)
        {
LABEL_20:
          if ((a3 - 33189) >= 3) {
            goto LABEL_65;
          }
          goto LABEL_60;
        }
LABEL_50:
        int v18 = *(unsigned char *)(a1 + 32501) & 0xFE;
LABEL_51:
        if (v18 != 2) {
          goto LABEL_52;
        }
LABEL_65:
        int v17 = (unsigned __int16)*v5;
LABEL_66:
        if (!v17)
        {
          uint64_t result = 0;
          __int16 v7 = 1280;
          goto LABEL_69;
        }
        return 0;
      }
      if ((a3 - 6406) >= 5)
      {
        if (a3 != 6402)
        {
          if (a3 != 6403) {
            goto LABEL_65;
          }
LABEL_46:
          int v18 = *(unsigned __int8 *)(a1 + 32501);
          goto LABEL_51;
        }
        goto LABEL_60;
      }
LABEL_53:
      int v19 = gfxReqToBase();
      return gleCheckCopyTexSubImageArgs(a1, a2, v19, a3, v12, a5);
    }
    if (a3 <= 36193)
    {
      if (a3 <= 35897)
      {
        if (a3 <= 35727)
        {
          if (a3 > 35445)
          {
            if ((a3 - 35446) >= 2) {
              goto LABEL_65;
            }
          }
          else if (a3 != 35056)
          {
            if (a3 != 35409) {
              goto LABEL_65;
            }
            goto LABEL_50;
          }
        }
        else
        {
          if ((a3 - 35728) >= 0xA) {
            goto LABEL_65;
          }
          if (*(unsigned char *)(a1 + 32501) != 2)
          {
LABEL_52:
            int v12 = 0;
            goto LABEL_53;
          }
        }
        goto LABEL_60;
      }
      char v15 = a3 - 58;
      if ((a3 - 35898) <= 0x15)
      {
        if (((1 << v15) & 0x3CC140) != 0 || ((1 << v15) & 0x33C00) != 0) {
          goto LABEL_65;
        }
        if (((1 << v15) & 0x289) != 0) {
          goto LABEL_50;
        }
      }
      if (a3 != 36012)
      {
        int v16 = 36013;
        goto LABEL_57;
      }
    }
    else
    {
      if (a3 <= 36755)
      {
        switch(a3)
        {
          case 36194:
            goto LABEL_64;
          case 36208:
          case 36209:
          case 36214:
          case 36215:
          case 36220:
          case 36221:
          case 36226:
          case 36227:
          case 36232:
          case 36233:
          case 36238:
          case 36239:
LABEL_30:
            if ((*(unsigned char *)(a1 + 32501) & 0xFE) == 2) {
              goto LABEL_65;
            }
            int v12 = 1;
            break;
          default:
            goto LABEL_65;
        }
        goto LABEL_53;
      }
      if (a3 <= 36974)
      {
        if ((a3 - 36756) >= 8) {
          goto LABEL_65;
        }
        int v17 = (unsigned __int16)*v5;
        if (*(unsigned char *)(a1 + 32501) != 4) {
          goto LABEL_66;
        }
LABEL_61:
        if (!v17)
        {
          uint64_t result = 0;
          __int16 v7 = 1282;
          goto LABEL_69;
        }
        return 0;
      }
      if (a3 == 36975)
      {
        int v12 = 1;
LABEL_64:
        if ((*(unsigned char *)(a1 + 32501) & 0xFE) == 2) {
          goto LABEL_65;
        }
        goto LABEL_53;
      }
      if (a3 != 37874)
      {
        int v16 = 37881;
LABEL_57:
        if (a3 != v16) {
          goto LABEL_65;
        }
      }
    }
LABEL_60:
    int v17 = (unsigned __int16)*v5;
    goto LABEL_61;
  }
  if (*v5) {
    return 0;
  }
  uint64_t result = 0;
  __int16 v7 = 1281;
LABEL_69:
  *uint64_t v5 = v7;
  return result;
}

uint64_t gleIsHashName(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 16);
  while (1)
  {
    uint64_t v2 = (uint64_t *)*v2;
    if (!v2) {
      break;
    }
    unsigned int v3 = *((_DWORD *)v2 + 2);
    if (v3 > a2) {
      break;
    }
    if (*((_DWORD *)v2 + 3) + v3 > a2) {
      return 1;
    }
  }
  return 0;
}

uint64_t gleSetEnable_LINE_SMOOTH(uint64_t result, uint64_t a2, int a3)
{
  if (*(unsigned __int8 *)(result + 15315) != a3)
  {
    *(unsigned char *)(result + 15315) = a3;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1520) |= 0x4000u;
  }
  return result;
}

uint64_t glFrontFace_Exec(uint64_t result, int a2)
{
  if ((a2 - 2306) <= 0xFFFFFFFD)
  {
    if (!*(_WORD *)(result + 29832)) {
      *(_WORD *)(result + 29832) = 1280;
    }
  }
  else if (*(unsigned __int16 *)(result + 15528) != a2)
  {
    *(_WORD *)(result + 15528) = a2;
    *(_DWORD *)(result + 1520) |= 0x800000u;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1548) |= 0x8000u;
  }
  return result;
}

uint64_t glPointSize_Exec(uint64_t result, float a2)
{
  uint64_t v2 = (_DWORD *)(result + 28652);
  if (a2 <= 0.0)
  {
    if (!*(_WORD *)(result + 29832)) {
      *(_WORD *)(result + 29832) = 1281;
    }
  }
  else
  {
    uint64_t v3 = result;
    if (*(float *)(result + 15344) != a2)
    {
      *(float *)(result + 15344) = a2;
      uint64_t result = gleUpdatePointAttenuation(result);
      uint64_t v4 = *(void *)(v3 + 19248);
      if (v4)
      {
        unint64_t v5 = *(unsigned __int16 *)(v4 + 3788);
        if (v5 <= 0x3FF)
        {
          *(_DWORD *)(v3 + ((v5 >> 3) & 0x1FFC) + 1552) |= 1 << v5;
          *(_DWORD *)(v3 + 1532) |= 0x800000u;
        }
      }
      uint64_t v6 = *(void *)(v3 + 19272);
      if (v6)
      {
        unint64_t v7 = *(unsigned __int16 *)(v6 + 3788);
        if (v7 <= 0x3FF)
        {
          *(_DWORD *)(v3 + ((v7 >> 3) & 0x1FFC) + 1936) |= 1 << v7;
          *(_DWORD *)(v3 + 1532) |= 0x4000000u;
        }
      }
      uint64_t v8 = *(void *)(v3 + 19280);
      if (v8)
      {
        unint64_t v9 = *(unsigned __int16 *)(v8 + 3788);
        if (v9 <= 0x3FF)
        {
          *(_DWORD *)(v3 + ((v9 >> 3) & 0x1FFC) + 2064) |= 1 << v9;
          *(_DWORD *)(v3 + 1532) |= 0x8000000u;
        }
      }
      *uint64_t v2 = 0;
      *(_DWORD *)(v3 + 1520) |= 0x400000u;
    }
  }
  return result;
}

uint64_t glLineWidth_Exec(uint64_t result, float a2)
{
  if (a2 <= 0.0)
  {
    if (!*(_WORD *)(result + 29832)) {
      *(_WORD *)(result + 29832) = 1281;
    }
  }
  else if (*(float *)(result + 15304) != a2)
  {
    *(float *)(result + 15304) = a2;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1520) |= 0x4000u;
  }
  return result;
}

uint64_t gleSetEnable_COLOR_MATERIAL(uint64_t result, uint64_t a2, int a3)
{
  if (*(unsigned __int8 *)(result + 14891) != a3)
  {
    uint64_t v4 = result;
    unint64_t v5 = (_DWORD *)(result + 28652);
    *(unsigned char *)(result + 14891) = a3;
    uint64_t result = gleSetColorMaterialEnable(result);
    if (a3)
    {
      unsigned int v6 = *(_DWORD *)(v4 + 1544) | 0x2000000;
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 1456))(v4, v4 + 8464);
      unsigned int v6 = *(_DWORD *)(v4 + 1544) & 0xFCFFFFFF | 0x1000000;
    }
    *(_DWORD *)(v4 + 1544) = v6;
    *unint64_t v5 = 0;
    *(_DWORD *)(v4 + 1548) |= 0x18422u;
  }
  return result;
}

uint64_t gleGetAttrib(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3 = (_DWORD *)(result + 17572);
  uint64_t v4 = (unsigned char *)(result + 12516);
  if (a2 > 1023)
  {
    if (a2 < 0x4000)
    {
      if (a2 > 4095)
      {
        if (a2 == 4096)
        {
          uint64_t v54 = 0;
          *(_DWORD *)a3 = *(_DWORD *)(result + 20484);
          *(unsigned char *)(a3 + 8) = *v4;
          *(unsigned char *)(a3 + 9) = *(unsigned char *)(result + 12517);
          *(_DWORD *)(a3 + 108) = *v3;
          uint64_t v55 = result + 17584;
          do
          {
            char v56 = (_DWORD *)(a3 + 24 + v54);
            *(v56 - 3) = *(_DWORD *)(v55 + v54 - 8);
            *(v56 - 2) = *(_DWORD *)(v55 + v54 - 4);
            *(v56 - 1) = *(_DWORD *)(v55 + v54);
            *char v56 = *(_DWORD *)(v55 + v54 + 4);
            v54 += 16;
          }
          while (v54 != 96);
          *(unsigned char *)(a3 + 10) = *(unsigned char *)(result + 17697);
          *(_DWORD *)(a3 + 4) = *(unsigned __int8 *)(result + 17696);
          *(unsigned char *)(a3 + 11) = *(unsigned char *)(result + 20494);
          *(unsigned char *)(a3 + 112) = *(unsigned char *)(result + 15205);
        }
        else if (a2 == 0x2000)
        {
          uint64_t v38 = 0;
          *(unsigned char *)(a3 + 123) = *(unsigned char *)(result + 15282);
          *(unsigned char *)(a3 + 124) = *(unsigned char *)(result + 14890);
          *(unsigned char *)(a3 + 126) = *(unsigned char *)(result + 15314);
          *(unsigned char *)(a3 + 135) = *(unsigned char *)(result + 15532);
          *(unsigned char *)(a3 + 120) = *(unsigned char *)(result + 15534);
          *(unsigned char *)(a3 + 116) = *(unsigned char *)(result + 15006);
          *(unsigned char *)(a3 + 118) = *(unsigned char *)(result + 15120);
          *(unsigned char *)(a3 + 127) = *(unsigned char *)(result + 15319);
          *(unsigned char *)(a3 + 128) = *(unsigned char *)(result + 15318);
          *(unsigned char *)(a3 + 122) = *(unsigned char *)(result + 15224);
          *(unsigned char *)(a3 + 121) = *(unsigned char *)(result + 15204);
          *(unsigned char *)(a3 + 130) = *(unsigned char *)(result + 32507) & 0x7F;
          *(unsigned char *)(a3 + 148) = *(unsigned char *)(result + 15377);
          *(unsigned char *)(a3 + 125) = *(unsigned char *)(result + 15315);
          *(unsigned char *)(a3 + 134) = *(unsigned char *)(result + 15533);
          *(_DWORD *)(a3 + 76) = *(_DWORD *)(result + 15576);
          *(unsigned char *)(a3 + 119) = *(unsigned char *)(result + 14891);
          *(unsigned char *)(a3 + 129) = *v4;
          *(unsigned char *)(a3 + 140) = *(unsigned char *)(result + 12517);
          *(unsigned char *)(a3 + 131) = *(unsigned char *)(result + 15537);
          *(unsigned char *)(a3 + 132) = *(unsigned char *)(result + 15536);
          *(unsigned char *)(a3 + 133) = *(unsigned char *)(result + 15535);
          *(unsigned char *)(a3 + 141) = *(unsigned char *)(result + 20494);
          *(unsigned char *)(a3 + 142) = *(unsigned char *)(result + 17680);
          *(unsigned char *)(a3 + 136) = *(unsigned char *)(result + 17681);
          *(unsigned char *)(a3 + 137) = *(unsigned char *)(result + 17682);
          *(unsigned char *)(a3 + 138) = *(unsigned char *)(result + 17683);
          *(unsigned char *)(a3 + 139) = *(unsigned char *)(result + 17697);
          double v39 = (int *)(result + 15684);
          do
          {
            int v40 = *v39;
            v39 += 19;
            *(_DWORD *)(a3 + 32 + v38) = v40;
            v38 += 4;
          }
          while (v38 != 32);
          uint64_t v41 = 0;
          uint64_t v42 = (char *)(result + 16535);
          do
          {
            int v43 = (unsigned char *)(a3 + 83 + v41);
            *(v43 - 3) = *(v42 - 3);
            *(v43 - 2) = *(v42 - 2);
            *(v43 - 1) = *(v42 - 1);
            char v44 = *v42;
            v42 += 148;
            *int v43 = v44;
            v41 += 4;
          }
          while (v41 != 32);
          *(_DWORD *)(a3 + 72) = *(_DWORD *)(result + 15644);
          *(_DWORD *)(a3 + 68) = *v3;
          *(_DWORD *)(a3 + 64) = *(_DWORD *)(result + 14880);
          *(unsigned char *)(a3 + 112) = *(unsigned char *)(result + 24756);
          *(unsigned char *)(a3 + 113) = *(unsigned char *)(result + 24760);
          *(unsigned char *)(a3 + 114) = *(unsigned char *)(result + 24750);
          *(unsigned char *)(a3 + 115) = *(unsigned char *)(result + 24751);
          *(unsigned char *)(a3 + 149) = *(unsigned char *)(result + 32506);
          *(unsigned char *)(a3 + 144) = *(unsigned char *)(result + 15206);
          *(unsigned char *)(a3 + 145) = *(unsigned char *)(result + 15205);
          *(unsigned char *)(a3 + 146) = *(unsigned char *)(result + 15196);
          *(_WORD *)(a3 + 150) = *(_WORD *)(result + 29708);
          *(_WORD *)(a3 + 152) = *(_WORD *)(result + 29710);
          *(_WORD *)(a3 + 154) = *(_WORD *)(result + 29712);
          *(unsigned char *)(a3 + 147) = *(unsigned char *)(result + 15379);
        }
      }
      else if (a2 == 1024)
      {
        uint64_t v46 = 0;
        uint64_t v47 = (__int16 *)(result + 15610);
        int v48 = (int *)(result + 15324);
        do
        {
          uint64_t v49 = a3 + v46;
          *(_WORD *)(v49 + 8) = *(v47 - 3);
          *(_DWORD *)uint64_t v49 = *(_DWORD *)(v47 - 5);
          *(_DWORD *)(v49 + 4) = *(_DWORD *)(v47 - 7);
          *(_WORD *)(v49 + 10) = *(v47 - 2);
          *(_WORD *)(v49 + 12) = *(v47 - 1);
          __int16 v50 = *v47;
          v47 += 8;
          *(_WORD *)(v49 + 14) = v50;
          int v51 = *v48++;
          *(_DWORD *)(v49 + 16) = v51;
          v46 += 20;
        }
        while (v46 != 60);
        *(_DWORD *)(a3 + 64) = *(_DWORD *)(result + 15644);
        *(_DWORD *)(a3 + 60) = *(_DWORD *)(result + 15172);
        *(_WORD *)(a3 + 68) = *(_DWORD *)(result + 29776);
      }
      else if (a2 == 2048)
      {
        *(void *)a3 = *(void *)(result + 9280);
        *(void *)(a3 + 8) = *(void *)(result + 9288);
        *(_DWORD *)(a3 + 16) = *(_DWORD *)(result + 9312);
        *(_DWORD *)(a3 + 20) = *(_DWORD *)(result + 9316);
        *(_DWORD *)(a3 + 24) = *(_DWORD *)(result + 9320);
        *(_DWORD *)(a3 + 28) = *(_DWORD *)(result + 9324);
      }
    }
    else if (a2 < 0x40000)
    {
      if (a2 == 0x4000)
      {
        for (uint64_t i = 0; i != 16; i += 2)
          *(_WORD *)(a3 + i + 20) = *(_WORD *)(result + 15180 + i);
        *(_WORD *)(a3 + 92) = *(_WORD *)(result + 29836);
        *(_WORD *)(a3 + 94) = *(_WORD *)(result + 29838);
        *(_WORD *)(a3 + 96) = *(_WORD *)(result + 29840);
        *(_WORD *)(a3 + 98) = *(_WORD *)(result + 29842);
        *(unsigned char *)(a3 + 76) = *(unsigned char *)(result + 15006);
        *(_WORD *)(a3 + 4) = *(_WORD *)(result + 15004);
        *(_DWORD *)a3 = *(_DWORD *)(result + 29704);
        *(unsigned char *)(a3 + 77) = *(unsigned char *)(result + 15120);
        *(_WORD *)(a3 + 6) = *(_WORD *)(result + 15008);
        *(_WORD *)(a3 + 8) = *(_WORD *)(result + 15010);
        *(_WORD *)(a3 + 10) = *(_WORD *)(result + 15012);
        *(_WORD *)(a3 + 12) = *(_WORD *)(result + 15014);
        *(_WORD *)(a3 + 14) = *(_WORD *)(result + 15016);
        *(_WORD *)(a3 + 16) = *(_WORD *)(result + 15018);
        *(_DWORD *)(a3 + 36) = *(_DWORD *)(result + 29688);
        *(_DWORD *)(a3 + 40) = *(_DWORD *)(result + 29692);
        *(_DWORD *)(a3 + 44) = *(_DWORD *)(result + 29696);
        *(_DWORD *)(a3 + 48) = *(_DWORD *)(result + 29700);
        *(unsigned char *)(a3 + 78) = *(unsigned char *)(result + 15224);
        *(unsigned char *)(a3 + 79) = *(unsigned char *)(result + 15319);
        *(unsigned char *)(a3 + 80) = *(unsigned char *)(result + 15318);
        *(_WORD *)(a3 + 18) = *(_WORD *)(result + 15316);
        *(_DWORD *)(a3 + 52) = *(_DWORD *)(result + 29672);
        *(_DWORD *)(a3 + 56) = *(_DWORD *)(result + 29676);
        *(_DWORD *)(a3 + 60) = *(_DWORD *)(result + 29680);
        *(_DWORD *)(a3 + 64) = *(_DWORD *)(result + 29684);
        *(unsigned char *)(a3 + 81) = *(unsigned char *)(result + 15336);
        *(unsigned char *)(a3 + 82) = *(unsigned char *)(result + 15337);
        *(unsigned char *)(a3 + 83) = *(unsigned char *)(result + 15338);
        *(unsigned char *)(a3 + 84) = *(unsigned char *)(result + 15339);
        float v53 = *(float *)(result + 15168) * 0.00389105058;
        *(float *)(a3 + 68) = v53;
        *(_DWORD *)(a3 + 72) = *(_DWORD *)(result + 15320);
        *(unsigned char *)(a3 + 85) = *(unsigned char *)(result + 15196);
        *(_WORD *)(a3 + 88) = *(_WORD *)(result + 29710);
        *(_WORD *)(a3 + 90) = *(_WORD *)(result + 29712);
      }
      else if (a2 == 0x8000)
      {
        *(_WORD *)a3 = *(_WORD *)(result + 15284);
        *(_WORD *)(a3 + 2) = *(_WORD *)(result + 15286);
        *(_WORD *)(a3 + 4) = *(_WORD *)(result + 15288);
        *(_WORD *)(a3 + 6) = *(_WORD *)(result + 15290);
        *(_WORD *)(a3 + 8) = *(_WORD *)(result + 15292);
        *(_WORD *)(a3 + 10) = *(_WORD *)(result + 15294);
        *(_WORD *)(a3 + 12) = *(_WORD *)(result + 15296);
        *(_WORD *)(a3 + 14) = *(_WORD *)(result + 15298);
        *(_WORD *)(a3 + 16) = *(_WORD *)(result + 15300);
        *(_WORD *)(a3 + 18) = *(_WORD *)(result + 15302);
        *(_WORD *)(a3 + 20) = *(_DWORD *)(result + 20384);
      }
    }
    else
    {
      switch(a2)
      {
        case 0x20000000:
          *(_DWORD *)a3 = *(_DWORD *)(result + 17672);
          *(unsigned char *)(a3 + 4) = *(unsigned char *)(result + 17680);
          *(unsigned char *)(a3 + 5) = *(unsigned char *)(result + 17681);
          *(unsigned char *)(a3 + 6) = *(unsigned char *)(result + 17682);
          *(unsigned char *)(a3 + 7) = *(unsigned char *)(result + 17683);
          *(unsigned char *)(a3 + 8) = *(unsigned char *)(result + 17684);
          break;
        case 0x80000:
          *(_OWORD *)a3 = *(_OWORD *)(result + 15560);
          *(_DWORD *)(a3 + 16) = *(_DWORD *)(result + 15576);
          break;
        case 0x40000:
          uint64_t v15 = 0;
          int v16 = (unsigned char *)(result + 16535);
          do
          {
            uint64_t v17 = a3 + v15;
            *(_DWORD *)uint64_t v17 = *(_DWORD *)(v16 - 127);
            *(_DWORD *)(v17 + 4) = *(_DWORD *)(v16 - 123);
            *(_DWORD *)(v17 + 8) = *(_DWORD *)(v16 - 119);
            *(_DWORD *)(v17 + 12) = *(_DWORD *)(v16 - 115);
            *(_DWORD *)(v17 + 16) = *(_DWORD *)(v16 - 143);
            *(_DWORD *)(v17 + 20) = *(_DWORD *)(v16 - 139);
            *(_DWORD *)(v17 + 24) = *(_DWORD *)(v16 - 135);
            *(_DWORD *)(v17 + 28) = *(_DWORD *)(v16 - 131);
            *(_DWORD *)(v17 + 36) = *(_DWORD *)(v16 - 91);
            *(_DWORD *)(v17 + 40) = *(_DWORD *)(v16 - 87);
            *(_DWORD *)(v17 + 44) = *(_DWORD *)(v16 - 83);
            *(_DWORD *)(v17 + 48) = *(_DWORD *)(v16 - 79);
            *(_DWORD *)(v17 + 52) = *(_DWORD *)(v16 - 107);
            *(_DWORD *)(v17 + 56) = *(_DWORD *)(v16 - 103);
            *(_DWORD *)(v17 + 60) = *(_DWORD *)(v16 - 99);
            *(_DWORD *)(v17 + 64) = *(_DWORD *)(v16 - 95);
            *(_DWORD *)(v17 + 72) = *(_DWORD *)(v16 - 55);
            *(_DWORD *)(v17 + 76) = *(_DWORD *)(v16 - 51);
            *(_DWORD *)(v17 + 80) = *(_DWORD *)(v16 - 47);
            *(_DWORD *)(v17 + 84) = *(_DWORD *)(v16 - 43);
            *(_DWORD *)(v17 + 88) = *(_DWORD *)(v16 - 71);
            *(_DWORD *)(v17 + 92) = *(_DWORD *)(v16 - 67);
            *(_DWORD *)(v17 + 96) = *(_DWORD *)(v16 - 63);
            *(_DWORD *)(v17 + 100) = *(_DWORD *)(v16 - 59);
            *(_DWORD *)(v17 + 108) = *(_DWORD *)(v16 - 19);
            *(_DWORD *)(v17 + 112) = *(_DWORD *)(v16 - 15);
            *(_DWORD *)(v17 + 116) = *(_DWORD *)(v16 - 11);
            *(_DWORD *)(v17 + 120) = *(_DWORD *)(v16 - 7);
            *(_DWORD *)(v17 + 124) = *(_DWORD *)(v16 - 35);
            *(_DWORD *)(v17 + 128) = *(_DWORD *)(v16 - 31);
            *(_DWORD *)(v17 + 132) = *(_DWORD *)(v16 - 27);
            *(_DWORD *)(v17 + 136) = *(_DWORD *)(v16 - 23);
            *(unsigned char *)(v17 + 34) = *(v16 - 3);
            *(unsigned char *)(v17 + 70) = *(v16 - 2);
            *(unsigned char *)(v17 + 106) = *(v16 - 1);
            *(unsigned char *)(v17 + 142) = *v16;
            *(_WORD *)(v17 + 32) = *(_WORD *)(v16 - 147);
            *(_WORD *)(v17 + 68) = *(_WORD *)(v16 - 111);
            *(_WORD *)(v17 + 104) = *(_WORD *)(v16 - 75);
            *(_WORD *)(v17 + 140) = *(_WORD *)(v16 - 39);
            v15 += 144;
            v16 += 148;
          }
          while (v15 != 1152);
          uint64_t v18 = 0;
          int v19 = (uint64_t *)(result + 20776);
          uint64_t v20 = a3;
          do
          {
            uint64_t v21 = 0;
            *(_DWORD *)(a3 + 856 * v18 + 2004) = *(_DWORD *)(result + 76 * v18 + 15684);
            int v22 = v19;
            do
            {
              uint64_t v23 = *v22;
              uint64_t v24 = v20 + v21;
              *(_DWORD *)(v24 + 1152) = *(_DWORD *)(*v22 + 984);
              *(_DWORD *)(v24 + 1156) = *(_DWORD *)(v23 + 988);
              *(_DWORD *)(v24 + 1160) = *(_DWORD *)(v23 + 992);
              *(_DWORD *)(v24 + 1164) = *(_DWORD *)(v23 + 996);
              *(_WORD *)(v24 + 1204) = *(_WORD *)(v23 + 952);
              *(_WORD *)(v24 + 1206) = *(_WORD *)(v23 + 954);
              *(_WORD *)(v24 + 1208) = *(_WORD *)(v23 + 960);
              *(_WORD *)(v24 + 1210) = *(_WORD *)(v23 + 962);
              *(_WORD *)(v24 + 1212) = *(_WORD *)(v23 + 964);
              uint64_t v25 = *v22++;
              *(_DWORD *)(v24 + 1168) = *(_DWORD *)(v25 + 16);
              *(_DWORD *)(v24 + 1172) = *(_DWORD *)(v23 + 816);
              *(_DWORD *)(v24 + 1176) = *(_DWORD *)(v23 + 968);
              *(_DWORD *)(v24 + 1180) = *(_DWORD *)(v23 + 972);
              *(_DWORD *)(v24 + 1184) = *(_DWORD *)(v23 + 976);
              *(_DWORD *)(v24 + 1188) = *(_DWORD *)(v23 + 980);
              *(_DWORD *)(v24 + 1196) = *(_DWORD *)(v23 + 924);
              *(_DWORD *)(v24 + 1200) = *(_DWORD *)(v23 + 928);
              *(_WORD *)(v24 + 1214) = *(_WORD *)(v23 + 958);
              *(_WORD *)(v24 + 1216) = *(_WORD *)(v23 + 956);
              *(_DWORD *)(v24 + 1192) = *(_DWORD *)(v23 + 932);
              *(_WORD *)(v24 + 1218) = *(_WORD *)(v23 + 922);
              char v26 = *(unsigned char *)(v20 + v21 + 1220) & 0xFE | *(unsigned char *)(v23 + 938) & 1;
              *(unsigned char *)(v24 + 1220) = v26;
              *(unsigned char *)(v24 + 1220) = (2 * (*(unsigned char *)(v23 + 966) & 1)) | v26 & 0xFD;
              *(unsigned char *)(v24 + 1221) = *(unsigned char *)(v23 + 597);
              v21 += 72;
            }
            while (v21 != 792);
            uint64_t v27 = a3 + 856 * v18;
            *(_DWORD *)(v27 + 1944) = *(_DWORD *)(result + 16 * v18 + 23808);
            *(_DWORD *)(v27 + 1948) = *(_DWORD *)(result + 16 * v18 + 23812);
            *(_DWORD *)(v27 + 1952) = *(_DWORD *)(result + 16 * v18 + 23816);
            *(_DWORD *)(v27 + 1956) = *(_DWORD *)(result + 16 * v18 + 23820);
            uint64_t v28 = result + 76 * v18;
            *(_WORD *)(v27 + 1960) = *(_WORD *)(v28 + 15688);
            *(_WORD *)(v27 + 1964) = *(_WORD *)(v28 + 15692);
            *(_WORD *)(v27 + 1966) = *(_WORD *)(v28 + 15694);
            *(_WORD *)(v27 + 1968) = *(_WORD *)(v28 + 15696);
            *(_WORD *)(v27 + 1970) = *(_WORD *)(v28 + 15698);
            *(_WORD *)(v27 + 1972) = *(_WORD *)(v28 + 15700);
            *(_WORD *)(v27 + 1974) = *(_WORD *)(v28 + 15702);
            *(_WORD *)(v27 + 1976) = *(_WORD *)(v28 + 15704);
            *(_WORD *)(v27 + 1978) = *(_WORD *)(v28 + 15706);
            *(_WORD *)(v27 + 1980) = *(_WORD *)(v28 + 15708);
            *(_WORD *)(v27 + 1982) = *(_WORD *)(v28 + 15710);
            *(_WORD *)(v27 + 1984) = *(_WORD *)(v28 + 15712);
            *(_WORD *)(v27 + 1986) = *(_WORD *)(v28 + 15714);
            *(_WORD *)(v27 + 1988) = *(_WORD *)(v28 + 15716);
            *(_WORD *)(v27 + 1990) = *(_WORD *)(v28 + 15718);
            *(_DWORD *)(v27 + 1992) = *(_DWORD *)(v28 + 15720);
            *(_DWORD *)(v27 + 1996) = *(_DWORD *)(v28 + 15724);
            ++v18;
            v20 += 856;
            v19 += 11;
          }
          while (v18 != 8);
          uint64_t v29 = 0;
          *(_WORD *)(a3 + 8130) = *(_WORD *)(result + 23772);
          do
          {
            *(_DWORD *)(a3 + 8000 + v29) = *(_DWORD *)(result + 16260 + v29);
            v29 += 4;
          }
          while (v29 != 128);
          *(_WORD *)(a3 + 8128) = *(_WORD *)(result + 23768) - 31552;
          break;
      }
    }
  }
  else if (a2 > 31)
  {
    if (a2 <= 127)
    {
      if (a2 == 32)
      {
        *(_WORD *)(a3 + 8) = *(_WORD *)(result + 15176);
        *(_WORD *)(a3 + 10) = *(_WORD *)(result + 29844);
        *(_DWORD *)a3 = *(_DWORD *)(result + 18440);
        *(_DWORD *)(a3 + 4) = *(_DWORD *)(result + 18444);
        *(_DWORD *)(a3 + 16) = *(_DWORD *)(result + 18520);
        *(_DWORD *)(a3 + 20) = *(_DWORD *)(result + 18524);
        *(_DWORD *)(a3 + 24) = *(_DWORD *)(result + 18528);
        *(_DWORD *)(a3 + 28) = *(_DWORD *)(result + 18532);
        *(_DWORD *)(a3 + 32) = *(_DWORD *)(result + 18536);
        *(_DWORD *)(a3 + 36) = *(_DWORD *)(result + 18540);
        *(_DWORD *)(a3 + 40) = *(_DWORD *)(result + 18544);
        *(_DWORD *)(a3 + 44) = *(_DWORD *)(result + 18548);
        *(_DWORD *)(a3 + 48) = *(_DWORD *)(result + 18552);
        *(_DWORD *)(a3 + 52) = *(_DWORD *)(result + 18556);
        *(_DWORD *)(a3 + 56) = *(_DWORD *)(result + 18560);
        *(_DWORD *)(a3 + 60) = *(_DWORD *)(result + 18564);
        *(_DWORD *)(a3 + 12) = *(unsigned __int16 *)(result + 19160);
      }
      else if (a2 == 64)
      {
        uint64_t v30 = 0;
        *(_WORD *)a3 = *(_DWORD *)(result + 15592);
        *(_WORD *)(a3 + 2) = *(_DWORD *)(result + 17704);
        *(_WORD *)(a3 + 8) = *(_WORD *)(result + 29708);
        *(_WORD *)(a3 + 4) = *(_WORD *)(result + 14884);
        *(_WORD *)(a3 + 6) = *(_WORD *)(result + 14886);
        *(_WORD *)(a3 + 10) = *(_WORD *)(result + 14888);
        *(_DWORD *)(a3 + 12) = *(_DWORD *)(result + 12528);
        *(_DWORD *)(a3 + 16) = *(_DWORD *)(result + 12532);
        *(_DWORD *)(a3 + 20) = *(_DWORD *)(result + 12536);
        *(_DWORD *)(a3 + 24) = *(_DWORD *)(result + 12540);
        *(unsigned char *)(a3 + 28) = *(unsigned char *)(result + 14891);
        *(unsigned char *)(a3 + 29) = *(unsigned char *)(result + 14893);
        *(unsigned char *)(a3 + 30) = *(unsigned char *)(result + 14892);
        *(unsigned char *)(a3 + 31) = *(unsigned char *)(result + 14894);
        *(unsigned char *)(a3 + 32) = *(unsigned char *)(result + 14890);
        *(_DWORD *)(a3 + 36) = *(_DWORD *)(result + 14880);
        int v31 = (_DWORD *)(result + 12544);
        do
        {
          uint64_t v32 = (_DWORD *)(a3 + 68 + v30);
          v32[5] = v31[12];
          v32[6] = v31[13];
          v32[7] = v31[14];
          v32[8] = v31[15];
          *(v32 - 7) = *v31;
          *(v32 - 6) = v31[1];
          *(v32 - 5) = v31[2];
          *(v32 - 4) = v31[3];
          *(v32 - 3) = v31[4];
          *(v32 - 2) = v31[5];
          *(v32 - 1) = v31[6];
          *uint64_t v32 = v31[7];
          v32[1] = v31[8];
          v32[2] = v31[9];
          v32[3] = v31[10];
          v32[4] = v31[11];
          v32[9] = v31[16];
          v32[10] = v31[17];
          v32[11] = v31[18];
          v32[12] = v31[23];
          v32[13] = v31[36];
          v32[14] = v31[19];
          v32[15] = v31[20];
          v32[16] = v31[21];
          v32[17] = v31[22];
          v30 += 100;
          v31 += 40;
        }
        while (v30 != 800);
        uint64_t v33 = 0;
        char v34 = 1;
        do
        {
          uint64_t v35 = result + 8 * v33;
          int v36 = (_DWORD *)(a3 + 80 * v33);
          v36[210] = **(_DWORD **)(v35 + 1424);
          v36[211] = *(_DWORD *)(*(void *)(v35 + 1424) + 4);
          v36[212] = *(_DWORD *)(*(void *)(v35 + 1424) + 8);
          v36[213] = *(_DWORD *)(*(void *)(v35 + 1424) + 12);
          v36[214] = *(_DWORD *)(*(void *)(v35 + 1424) + 16);
          v36[215] = *(_DWORD *)(*(void *)(v35 + 1424) + 20);
          v36[216] = *(_DWORD *)(*(void *)(v35 + 1424) + 24);
          v36[217] = *(_DWORD *)(*(void *)(v35 + 1424) + 28);
          v36[218] = *(_DWORD *)(*(void *)(v35 + 1424) + 32);
          v36[219] = *(_DWORD *)(*(void *)(v35 + 1424) + 36);
          v36[220] = *(_DWORD *)(*(void *)(v35 + 1424) + 40);
          v36[221] = *(_DWORD *)(*(void *)(v35 + 1424) + 44);
          v36[222] = *(_DWORD *)(*(void *)(v35 + 1424) + 48);
          v36[223] = *(_DWORD *)(*(void *)(v35 + 1424) + 52);
          v36[224] = *(_DWORD *)(*(void *)(v35 + 1424) + 56);
          v36[225] = *(_DWORD *)(*(void *)(v35 + 1424) + 60);
          v36[229] = *(_DWORD *)(*(void *)(v35 + 1424) + 64);
          int v37 = (_DWORD *)(result + 12 * v33 + 29604);
          v36[226] = *v37;
          LOBYTE(v35) = v34;
          v36[227] = v37[1];
          v36[228] = v37[2];
          uint64_t v33 = 1;
          char v34 = 0;
        }
        while ((v35 & 1) != 0);
      }
    }
    else
    {
      switch(a2)
      {
        case 128:
          *(_DWORD *)a3 = *(_DWORD *)(result + 29576);
          *(_DWORD *)(a3 + 4) = *(_DWORD *)(result + 29580);
          *(_DWORD *)(a3 + 8) = *(_DWORD *)(result + 29584);
          *(_DWORD *)(a3 + 12) = *(_DWORD *)(result + 29588);
          *(_DWORD *)(a3 + 20) = *(_DWORD *)(result + 15244);
          *(_DWORD *)(a3 + 24) = *(_DWORD *)(result + 15248);
          *(_DWORD *)(a3 + 28) = *(_DWORD *)(result + 15252);
          *(_DWORD *)(a3 + 16) = *(_DWORD *)(result + 29600);
          *(_WORD *)(a3 + 32) = *(_WORD *)(result + 15276);
          *(_WORD *)(a3 + 34) = *(_WORD *)(result + 15278);
          *(_WORD *)(a3 + 36) = *(_WORD *)(result + 15280);
          *(unsigned char *)(a3 + 38) = *(unsigned char *)(result + 15282);
          *(unsigned char *)(a3 + 39) = *(unsigned char *)(result + 32506);
          break;
        case 256:
          *(unsigned char *)(a3 + 28) = *(unsigned char *)(result + 15204);
          *(_WORD *)(a3 + 24) = *(_WORD *)(result + 15200);
          *(void *)a3 = *(void *)(result + 15128);
          *(unsigned char *)(a3 + 29) = *(unsigned char *)(result + 15340);
          *(unsigned char *)(a3 + 30) = *(unsigned char *)(result + 15206);
          *(void *)(a3 + 8) = *(void *)(result + 15208);
          *(void *)(a3 + 16) = *(void *)(result + 15216);
          break;
        case 512:
          *(_DWORD *)a3 = *(_DWORD *)(result + 15136);
          *(_DWORD *)(a3 + 4) = *(_DWORD *)(result + 15140);
          *(_DWORD *)(a3 + 8) = *(_DWORD *)(result + 15144);
          *(_DWORD *)(a3 + 12) = *(_DWORD *)(result + 15148);
          break;
      }
    }
  }
  else
  {
    switch(a2)
    {
      case 1:
        uint64_t v5 = 0;
        uint64_t v6 = *(void *)(result + 26000);
        *(_DWORD *)(a3 + 428) = *(_DWORD *)(result + 29596);
        *(_DWORD *)(a3 + 416) = *(_DWORD *)(result + 8448);
        *(_DWORD *)(a3 + 420) = *(_DWORD *)(result + 8452);
        *(_DWORD *)(a3 + 424) = *(_DWORD *)(result + 8456);
        *(_DWORD *)(a3 + 400) = *(_DWORD *)(result + 8464);
        *(_DWORD *)(a3 + 404) = *(_DWORD *)(result + 8468);
        *(_DWORD *)(a3 + 408) = *(_DWORD *)(result + 8472);
        *(_DWORD *)(a3 + 412) = *(_DWORD *)(result + 8476);
        *(_DWORD *)(a3 + 432) = *(_DWORD *)(result + 8480);
        *(_DWORD *)(a3 + 436) = *(_DWORD *)(result + 8484);
        *(_DWORD *)(a3 + 440) = *(_DWORD *)(result + 8488);
        *(_DWORD *)(a3 + 384) = *(_DWORD *)(result + 8496);
        *(_DWORD *)(a3 + 388) = *(_DWORD *)(result + 8500);
        *(_DWORD *)(a3 + 392) = *(_DWORD *)(result + 8504);
        *(_DWORD *)(a3 + 396) = *(_DWORD *)(result + 8508);
        *(_DWORD *)(a3 + 444) = *(_DWORD *)(result + 8512);
        *(_DWORD *)(a3 + 668) = *(_DWORD *)(result + 8528);
        unint64_t v7 = (_DWORD *)(v6 - 1184);
        uint64_t v8 = v6 - 1056;
        uint64_t v9 = result + 8572;
        do
        {
          unint64_t v10 = (_DWORD *)(a3 + v5);
          *unint64_t v10 = *(_DWORD *)(v9 + v5 - 12);
          v10[1] = *(_DWORD *)(v9 + v5 - 8);
          v10[2] = *(_DWORD *)(v9 + v5 - 4);
          v10[3] = *(_DWORD *)(v9 + v5);
          v10[128] = *(_DWORD *)(v8 + v5);
          v10[129] = *(_DWORD *)(v8 + v5 + 4);
          v10[130] = *(_DWORD *)(v8 + v5 + 8);
          v10[131] = *(_DWORD *)(v8 + v5 + 12);
          v5 += 16;
        }
        while (v5 != 128);
        uint64_t v11 = 0;
        int v12 = (_DWORD *)(a3 + 140);
        uint64_t v13 = result + 8700;
        do
        {
          *(v12 - 3) = *(_DWORD *)(v13 + v11 - 12);
          *(v12 - 2) = *(_DWORD *)(v13 + v11 - 8);
          *(v12 - 1) = *(_DWORD *)(v13 + v11 - 4);
          *int v12 = *(_DWORD *)(v13 + v11);
          v12 += 4;
          v11 += 32;
        }
        while (v11 != 512);
        *(_DWORD *)(a3 + 448) = *(_DWORD *)(result + 2256);
        *(_DWORD *)(a3 + 452) = *(_DWORD *)(result + 2260);
        *(_DWORD *)(a3 + 456) = *(_DWORD *)(result + 2264);
        char v14 = (_DWORD *)(v6 - 1280);
        *(_DWORD *)(a3 + 460) = v14[19];
        *(_DWORD *)(a3 + 464) = *v7;
        *(_DWORD *)(a3 + 468) = v14[25];
        *(_DWORD *)(a3 + 472) = v14[26];
        *(_DWORD *)(a3 + 476) = v14[27];
        *(_DWORD *)(a3 + 480) = v14[20];
        *(_DWORD *)(a3 + 484) = v14[21];
        *(_DWORD *)(a3 + 488) = v14[22];
        *(_DWORD *)(a3 + 492) = v14[23];
        *(_DWORD *)(a3 + 496) = v14[28];
        *(_DWORD *)(a3 + 500) = v14[29];
        *(_DWORD *)(a3 + 504) = v14[30];
        *(_DWORD *)(a3 + 640) = v14[32];
        *(_DWORD *)(a3 + 644) = v14[33];
        *(_DWORD *)(a3 + 648) = v14[34];
        *(_DWORD *)(a3 + 652) = v14[35];
        *(_DWORD *)(a3 + 656) = v14[36];
        *(_DWORD *)(a3 + 660) = v14[37];
        *(_DWORD *)(a3 + 664) = v14[38];
        *(_DWORD *)(a3 + 508) = 1065353216;
        *(unsigned char *)(a3 + 673) = *(unsigned char *)(result + 32491);
        break;
      case 2:
        *(_DWORD *)a3 = *(_DWORD *)(result + 15344);
        *(_DWORD *)(a3 + 4) = *(_DWORD *)(result + 15348);
        *(_DWORD *)(a3 + 8) = *(_DWORD *)(result + 15352);
        *(_DWORD *)(a3 + 12) = *(_DWORD *)(result + 15356);
        *(_DWORD *)(a3 + 16) = *(_DWORD *)(result + 15360);
        *(_DWORD *)(a3 + 20) = *(_DWORD *)(result + 15364);
        *(_DWORD *)(a3 + 24) = *(_DWORD *)(result + 15368);
        *(unsigned char *)(a3 + 28) = *(unsigned char *)(result + 32507) & 0x7F;
        *(unsigned char *)(a3 + 29) = *(unsigned char *)(result + 15377);
        *(unsigned char *)(a3 + 30) = *(unsigned char *)(result + 15378);
        *(_WORD *)(a3 + 32) = *(_WORD *)(result + 15380);
        *(_WORD *)(a3 + 34) = *(_WORD *)(result + 15382);
        *(_DWORD *)(a3 + 36) = *(_DWORD *)(result + 15384);
        break;
      case 3:
      case 5:
      case 6:
      case 7:
        return result;
      case 4:
        *(unsigned char *)(a3 + 11) = *(unsigned char *)(result + 15315);
        *(unsigned char *)(a3 + 10) = *(unsigned char *)(result + 15314);
        *(_WORD *)(a3 + 8) = *(_WORD *)(result + 15312);
        *(_DWORD *)(a3 + 4) = *(_DWORD *)(result + 15308);
        *(_DWORD *)a3 = *(_DWORD *)(result + 15304);
        break;
      case 8:
        *(unsigned char *)(a3 + 18) = *(unsigned char *)(result + 15534);
        *(_WORD *)(a3 + 14) = *(_WORD *)(result + 15530);
        *(_WORD *)(a3 + 12) = *(_WORD *)(result + 15528);
        *(_WORD *)(a3 + 8) = *(_WORD *)(result + 15524);
        *(_WORD *)(a3 + 10) = *(_WORD *)(result + 15526);
        *(unsigned char *)(a3 + 17) = *(unsigned char *)(result + 15533);
        *(unsigned char *)(a3 + 16) = *(unsigned char *)(result + 15532);
        *(unsigned char *)(a3 + 21) = *(unsigned char *)(result + 15537);
        *(unsigned char *)(a3 + 20) = *(unsigned char *)(result + 15536);
        *(unsigned char *)(a3 + 19) = *(unsigned char *)(result + 15535);
        *(_DWORD *)a3 = *(_DWORD *)(result + 15516);
        *(_DWORD *)(a3 + 4) = *(_DWORD *)(result + 15520);
        break;
      default:
        if (a2 == 16)
        {
          for (uint64_t j = 0; j != 128; ++j)
            *(unsigned char *)(a3 + j) = *(unsigned char *)(result + 15388 + j);
        }
        break;
    }
  }
  return result;
}

uint64_t glTranslate_Exec(uint64_t result, double a2, double a3, double a4)
{
  if (*(int *)(result + 20484) < 24)
  {
    int v4 = *(_DWORD *)(result + 20488);
    *(float32x4_t *)(*(void *)(result + 19976) + 48) = vaddq_f32(*(float32x4_t *)(*(void *)(result + 19976) + 48), vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)(*(void *)(result + 19976) + 16), *(float *)&a3), *(float32x4_t *)*(void *)(result + 19976), *(float *)&a2), *(float32x4_t *)(*(void *)(result + 19976) + 32), *(float *)&a4));
    *(_DWORD *)(result + 1528) |= v4;
    *(_DWORD *)(result + 1540) |= v4;
    int v5 = *(_DWORD *)(result + 1544);
    if ((v4 & ~v5 & *(_DWORD *)(result + 2216) & 0xFFFFFC) != 0)
    {
      uint64_t v6 = *(float32x4_t **)(result + 19984);
      float32x4_t v8 = v6[2];
      float32x4_t v7 = v6[3];
      float32x4_t v9 = vmlsq_lane_f32(v6[1], v7, *(float32x2_t *)&a3, 0);
      float32x4_t *v6 = vmlsq_lane_f32(*v6, v7, *(float32x2_t *)&a2, 0);
      v6[1] = v9;
      v6[2] = vmlsq_lane_f32(v8, v7, *(float32x2_t *)&a4, 0);
      v4 &= 0xFF000003;
    }
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1544) = v4 | v5;
  }
  else if (!*(_WORD *)(result + 29832))
  {
    *(_WORD *)(result + 29832) = 1282;
  }
  return result;
}

void glWeightPointerARB_Exec(uint64_t a1, int a2, int a3, unsigned int a4, uint64_t a5)
{
  uint64_t v5 = a1 + 28652;
  if ((a2 - 5) < 0xFFFFFFFC || (a4 & 0x80000000) != 0)
  {
    if (!*(_WORD *)(a1 + 29832))
    {
      __int16 v20 = 1281;
      goto LABEL_25;
    }
    return;
  }
  uint64_t v7 = a5;
  unsigned __int16 v8 = a3;
  uint64_t v11 = *(void *)(a1 + 26384);
  uint64_t v12 = *(void *)(a1 + 19312);
  if (!v12 && v11 != *(void *)(a1 + 26392) && a5 && !*(unsigned char *)(a1 + 32502))
  {
    if (!*(_WORD *)(a1 + 29832))
    {
      __int16 v20 = 1282;
LABEL_25:
      *(_WORD *)(a1 + 29832) = v20;
      return;
    }
    return;
  }
  if (a3 == 5126 || a3 == 5132)
  {
    *(void *)(v11 + 944) |= 0x100000uLL;
    *(void *)(v11 + 232) = a5;
    uint64_t v13 = *(void *)(v11 + 1272);
    if (v12 == v13) {
      goto LABEL_35;
    }
    if (v13 && (int v14 = *(_DWORD *)(v13 + 20) - 1, (*(_DWORD *)(v13 + 20) = v14) == 0))
    {
      gleUnbindAndFreeBufferObject(a1, (void *)v13);
      if (v12) {
        goto LABEL_10;
      }
    }
    else if (v12)
    {
LABEL_10:
      ++*(_DWORD *)(v12 + 20);
      uint64_t v15 = *(void *)(v11 + 912);
      if ((v15 & 0x100000) == 0)
      {
        *(void *)(v11 + 912) = v15 | 0x100000;
        if ((*(unsigned char *)(v11 + 906) & 0x10) != 0) {
          gleUpdateDrawArraysFuncs(a1);
        }
      }
      uint64_t v16 = *(unsigned __int8 *)(v5 + 3844);
      if (*(unsigned char *)(v5 + 3844))
      {
        uint64_t v17 = (uint64_t *)(v12 + 40);
        uint64_t v18 = (void *)(v11 + 1528);
        do
        {
          uint64_t v19 = *v17++;
          *uint64_t v18 = v19;
          v18 += 35;
          --v16;
        }
        while (v16);
      }
      if (v13) {
        goto LABEL_34;
      }
      goto LABEL_33;
    }
    uint64_t v21 = *(void *)(v11 + 912);
    if ((v21 & 0x100000) != 0)
    {
      *(void *)(v11 + 912) = v21 & 0xFFFFFFFFFFEFFFFFLL;
      if ((*(unsigned char *)(v11 + 906) & 0x10) != 0) {
        gleUpdateDrawArraysFuncs(a1);
      }
    }
    uint64_t v22 = *(unsigned __int8 *)(v5 + 3844);
    if (*(unsigned char *)(v5 + 3844))
    {
      uint64_t v23 = (void *)(v11 + 1528);
      do
      {
        *uint64_t v23 = 0;
        v23 += 35;
        --v22;
      }
      while (v22);
    }
LABEL_33:
    *(void *)(v11 + 952) |= 0x100000uLL;
LABEL_34:
    *(_DWORD *)uint64_t v5 = 0;
    *(_DWORD *)(a1 + 1532) |= 0x1000u;
    *(void *)(v11 + 944) |= 0x100010uLL;
    *(void *)(v11 + 1272) = v12;
LABEL_35:
    if (v12)
    {
      v7 += *(void *)(v12 + 136);
      if (*(void *)(v12 + 192))
      {
        if ((*(unsigned char *)(v11 + 906) & 0x10) != 0) {
          *(unsigned char *)(v11 + 1216) = 0;
        }
      }
    }
    *(void *)(v11 + 992) = v7;
    LODWORD(v24) = 4 * a2;
    if (a4) {
      uint64_t v24 = a4;
    }
    else {
      uint64_t v24 = v24;
    }
    unint64_t v25 = ((unint64_t)a2 << 48) | ((unint64_t)(((v24 | v7) & 0xF) == 0) << 57) | ((unint64_t)v8 << 32) | v24;
    if (*(void *)(v11 + 248) != v25)
    {
      *(void *)(v11 + 952) |= 0x100000uLL;
      *(void *)(v11 + 248) = v25;
      *(void *)(a1 + 26184) = gleSetVertexArrayFunc;
      *(void *)(a1 + 26192) = gleSetVertexArrayFunc;
      *(void *)(a1 + 26200) = gleSetVertexElemFunc;
      *(void *)(a1 + 26208) = gleSetVertexElemFunc;
      *(_DWORD *)uint64_t v5 = 0;
      *(_DWORD *)(a1 + 1532) |= 0x1000u;
    }
    return;
  }
  if (!*(_WORD *)(a1 + 29832))
  {
    __int16 v20 = 1280;
    goto LABEL_25;
  }
}

float gleSetAttrib(uint64_t a1, int a2, unsigned __int16 *a3, __n128 a4)
{
  int v4 = a3;
  uint64_t v100 = a1 + 29836;
  uint64_t v6 = a1 + 29576;
  uint64_t v7 = a1 + 18440;
  uint64_t v8 = a1 + 17572;
  uint64_t v9 = a1 + 15284;
  uint64_t v10 = a1 + 15008;
  uint64_t v11 = (unsigned char *)(a1 + 12516);
  if (a2 > 1023)
  {
    if (a2 < 0x4000)
    {
      if (a2 > 4095)
      {
        if (a2 == 4096)
        {
          uint64_t v93 = 0;
          *(_DWORD *)(a1 + 20484) = *(_DWORD *)a3;
          *uint64_t v11 = *((unsigned char *)a3 + 8);
          *(unsigned char *)(a1 + 12517) = *((unsigned char *)a3 + 9);
          *(_DWORD *)uint64_t v8 = *((_DWORD *)a3 + 27);
          uint64_t v94 = a3 + 12;
          do
          {
            float v95 = (_DWORD *)(a1 + 17584 + v93 * 2);
            *(v95 - 2) = *(_DWORD *)&v94[v93 - 6];
            *(v95 - 1) = *(_DWORD *)&v94[v93 - 4];
            _DWORD *v95 = *(_DWORD *)&v94[v93 - 2];
            a4.n128_u32[0] = *(_DWORD *)&v94[v93];
            v95[1] = a4.n128_u32[0];
            v93 += 8;
          }
          while (v93 != 48);
          *(unsigned char *)(a1 + 17697) = *((unsigned char *)a3 + 10);
          *(unsigned char *)(a1 + 17696) = *((_DWORD *)a3 + 1);
          *(unsigned char *)(a1 + 20494) = *((unsigned char *)a3 + 11);
          *(unsigned char *)(a1 + 15205) = *((unsigned char *)a3 + 112);
        }
        else if (a2 == 0x2000)
        {
          int v57 = *((unsigned __int8 *)a3 + 119);
          if (*(unsigned __int8 *)(a1 + 14891) != v57)
          {
            *(unsigned char *)(a1 + 14891) = v57;
            if (!*((unsigned char *)a3 + 119)) {
              (*(void (**)(uint64_t, uint64_t))(a1 + 1456))(a1, a1 + 8464);
            }
          }
          uint64_t v58 = 0;
          *(unsigned char *)(v10 + 274) = *((unsigned char *)v4 + 123);
          v11[2374] = *((unsigned char *)v4 + 124);
          *(unsigned char *)(v9 + 30) = *((unsigned char *)v4 + 126);
          *(unsigned char *)(v9 + 248) = *((unsigned char *)v4 + 135);
          *(unsigned char *)(v9 + 250) = *((unsigned char *)v4 + 120);
          v11[2490] = *((unsigned char *)v4 + 116);
          *(unsigned char *)(v10 + 112) = *((unsigned char *)v4 + 118);
          *(unsigned char *)(v9 + 35) = *((unsigned char *)v4 + 127);
          *(unsigned char *)(v9 + 34) = *((unsigned char *)v4 + 128);
          *(unsigned char *)(v10 + 216) = *((unsigned char *)v4 + 122);
          *(unsigned char *)(v10 + 196) = *((unsigned char *)v4 + 121);
          *(unsigned char *)(v100 + 2671) = *(unsigned char *)(v100 + 2671) & 0x80 | v4[65] & 0x7F;
          *(unsigned char *)(v9 + 93) = *((unsigned char *)v4 + 148);
          *(unsigned char *)(v9 + 31) = *((unsigned char *)v4 + 125);
          *(unsigned char *)(v9 + 249) = *((unsigned char *)v4 + 134);
          *(_DWORD *)(a1 + 15576) = *((_DWORD *)v4 + 19);
          *uint64_t v11 = *((unsigned char *)v4 + 129);
          v11[1] = *((unsigned char *)v4 + 140);
          *(unsigned char *)(v9 + 253) = *((unsigned char *)v4 + 131);
          *(unsigned char *)(v9 + 252) = *((unsigned char *)v4 + 132);
          *(unsigned char *)(v9 + 251) = *((unsigned char *)v4 + 133);
          *(unsigned char *)(v7 + 2054) = *((unsigned char *)v4 + 141);
          *(unsigned char *)(v8 + 108) = *((unsigned char *)v4 + 142);
          *(unsigned char *)(v8 + 109) = *((unsigned char *)v4 + 136);
          *(unsigned char *)(v8 + 110) = *((unsigned char *)v4 + 137);
          *(unsigned char *)(v8 + 111) = *((unsigned char *)v4 + 138);
          *(unsigned char *)(v8 + 125) = *((unsigned char *)v4 + 139);
          unsigned int v59 = (_DWORD *)(a1 + 15684);
          do
          {
            *unsigned int v59 = *(_DWORD *)&v4[v58 + 16];
            v59 += 19;
            v58 += 2;
          }
          while (v58 != 16);
          uint64_t v60 = 0;
          unsigned int v61 = (char *)v4 + 83;
          uint64_t v62 = (unsigned char *)(v9 + 1249);
          do
          {
            *(v62 - 1) = v61[v60 - 3];
            *uint64_t v62 = v61[v60 - 2];
            v62[1] = v61[v60 - 1];
            v62[2] = v61[v60];
            v60 += 4;
            v62 += 148;
          }
          while (v60 != 32);
          *(_DWORD *)(a1 + 15644) = *((_DWORD *)v4 + 18);
          *(_DWORD *)uint64_t v8 = *((_DWORD *)v4 + 17);
          *(_DWORD *)(a1 + 14880) = *((_DWORD *)v4 + 16);
          *(unsigned char *)(a1 + 24756) = *((unsigned char *)v4 + 112);
          *(unsigned char *)(a1 + 24760) = *((unsigned char *)v4 + 113);
          *(unsigned char *)(a1 + 24750) = *((unsigned char *)v4 + 114);
          *(unsigned char *)(a1 + 24751) = *((unsigned char *)v4 + 115);
          *(unsigned char *)(v100 + 2670) = *((unsigned char *)v4 + 149);
          *(unsigned char *)(v10 + 198) = *((unsigned char *)v4 + 144);
          *(unsigned char *)(v10 + 197) = *((unsigned char *)v4 + 145);
          *(unsigned char *)(v10 + 188) = *((unsigned char *)v4 + 146);
          *(_WORD *)(v6 + 132) = v4[75];
          *(_WORD *)(v6 + 134) = v4[76];
          *(_WORD *)(v6 + 136) = v4[77];
          *(unsigned char *)(v9 + 95) = *((unsigned char *)v4 + 147);
        }
      }
      else
      {
        if (a2 == 1024)
        {
          int v73 = a3 + 4;
          uint64_t v74 = 15596;
          uint64_t v75 = 3831;
          uint64_t v76 = 15610;
          do
          {
            unsigned int v77 = (_DWORD *)(a1 + v74);
            unint64_t v78 = (_WORD *)(a1 + v76);
            *(v78 - 3) = *v73;
            _DWORD *v77 = *((_DWORD *)v73 - 1);
            v77[1] = *((_DWORD *)v73 - 2);
            *(v78 - 2) = v73[1];
            *(v78 - 1) = v73[2];
            _WORD *v78 = v73[3];
            *(_DWORD *)(a1 + 4 * v75) = *((_DWORD *)v73 + 2);
            v74 += 16;
            ++v75;
            v73 += 10;
            v76 += 16;
          }
          while (v75 != 3834);
          int v79 = *((_DWORD *)a3 + 16);
          *(_DWORD *)(a1 + 15644) = v79;
          *(_DWORD *)(a1 + 15172) = *((_DWORD *)a3 + 15);
          *(_DWORD *)(a1 + 29776) = a3[34];
          if ((v79 & 4) != 0) {
            uint64_t v80 = 1;
          }
          else {
            uint64_t v80 = 2;
          }
          unsigned int v72 = *(_DWORD *)(a1 + 29804) & 0xFFFFF9FF;
          *(_DWORD *)(a1 + 29804) = v72;
          if (*(_DWORD *)(a1 + 15324))
          {
            v72 |= 0x200u;
            *(_DWORD *)(a1 + 29804) = v72;
          }
          if (!*(_DWORD *)(a1 + 4 * v80 + 15324)) {
            goto LABEL_90;
          }
          v72 |= 0x400u;
LABEL_89:
          *(_DWORD *)(a1 + 29804) = v72;
LABEL_90:
          uint64_t v81 = *(void *)(a1 + 28960);
          if (v81) {
            double v82 = (_DWORD *)(v81 + 552);
          }
          else {
            double v82 = (_DWORD *)(a1 + 29808);
          }
          int v83 = *v82 & v72;
          goto LABEL_100;
        }
        if (a2 == 2048)
        {
          *(void *)(a1 + 9280) = *(void *)a3;
          *(void *)(a1 + 9288) = *((void *)a3 + 1);
          *(_DWORD *)(a1 + 9312) = *((_DWORD *)a3 + 4);
          *(_DWORD *)(a1 + 9316) = *((_DWORD *)a3 + 5);
          *(_DWORD *)(a1 + 9320) = *((_DWORD *)a3 + 6);
          a4.n128_u32[0] = *((_DWORD *)a3 + 7);
          *(_DWORD *)(a1 + 9324) = a4.n128_u32[0];
        }
      }
    }
    else if (a2 < 0x40000)
    {
      if (a2 == 0x4000)
      {
        for (uint64_t i = 0; i != 8; ++i)
          *(_WORD *)(a1 + 15180 + i * 2) = a3[i + 10];
        *(_WORD *)uint64_t v100 = a3[46];
        *(_WORD *)(a1 + 29838) = a3[47];
        *(_WORD *)(a1 + 29840) = a3[48];
        *(_WORD *)(a1 + 29842) = a3[49];
        *(unsigned char *)(a1 + 15006) = *((unsigned char *)a3 + 76);
        *(_WORD *)(a1 + 15004) = a3[2];
        *(_DWORD *)(a1 + 29704) = *(_DWORD *)a3;
        *(unsigned char *)(a1 + 15120) = *((unsigned char *)a3 + 77);
        *(_WORD *)uint64_t v10 = a3[3];
        *(_WORD *)(a1 + 15010) = a3[4];
        *(_WORD *)(a1 + 15012) = a3[5];
        *(_WORD *)(a1 + 15014) = a3[6];
        *(_WORD *)(a1 + 15016) = a3[7];
        *(_WORD *)(a1 + 15018) = a3[8];
        *(_DWORD *)(a1 + 29688) = *((_DWORD *)a3 + 9);
        *(_DWORD *)(a1 + 29692) = *((_DWORD *)a3 + 10);
        *(_DWORD *)(a1 + 29696) = *((_DWORD *)a3 + 11);
        *(_DWORD *)(a1 + 29700) = *((_DWORD *)a3 + 12);
        *(unsigned char *)(a1 + 15224) = *((unsigned char *)a3 + 78);
        *(unsigned char *)(a1 + 15319) = *((unsigned char *)a3 + 79);
        *(unsigned char *)(a1 + 15318) = *((unsigned char *)a3 + 80);
        *(_WORD *)(a1 + 15316) = a3[9];
        *(_DWORD *)(a1 + 29672) = *((_DWORD *)a3 + 13);
        *(_DWORD *)(a1 + 29676) = *((_DWORD *)a3 + 14);
        *(_DWORD *)(a1 + 29680) = *((_DWORD *)a3 + 15);
        *(_DWORD *)(a1 + 29684) = *((_DWORD *)a3 + 16);
        char v85 = *((unsigned char *)a3 + 81);
        *(unsigned char *)(a1 + 15336) = v85;
        char v86 = *((unsigned char *)a3 + 82);
        *(unsigned char *)(a1 + 15337) = v86;
        char v87 = *((unsigned char *)a3 + 83);
        *(unsigned char *)(a1 + 15338) = v87;
        char v88 = *((unsigned char *)a3 + 84);
        *(unsigned char *)(a1 + 15339) = v88;
        a4.n128_f32[0] = *((float *)a3 + 17) * 257.0;
        *(_DWORD *)(a1 + 15168) = a4.n128_u32[0];
        *(_DWORD *)(a1 + 15320) = *((_DWORD *)a3 + 18);
        *(unsigned char *)(a1 + 15196) = *((unsigned char *)a3 + 85);
        *(_WORD *)(a1 + 29710) = a3[44];
        *(_WORD *)(a1 + 29712) = a3[45];
        unsigned int v89 = *(_DWORD *)(a1 + 29804) & 0xFFFFFF00 | (v86 | v85 | v87 | v88);
        *(_DWORD *)(a1 + 29804) = v89;
        uint64_t v90 = *(void *)(a1 + 28960);
        if (v90) {
          int v91 = (_DWORD *)(v90 + 552);
        }
        else {
          int v91 = (_DWORD *)(a1 + 29808);
        }
        int v83 = *v91 & v89;
LABEL_100:
        *(_WORD *)(a1 + 15342) = v83;
        return a4.n128_f32[0];
      }
      if (a2 == 0x8000)
      {
        *(_WORD *)uint64_t v9 = *a3;
        *(_WORD *)(a1 + 15286) = a3[1];
        *(_WORD *)(a1 + 15288) = a3[2];
        *(_WORD *)(a1 + 15290) = a3[3];
        *(_WORD *)(a1 + 15292) = a3[4];
        *(_WORD *)(a1 + 15294) = a3[5];
        *(_WORD *)(a1 + 15296) = a3[6];
        *(_WORD *)(a1 + 15298) = a3[7];
        *(_WORD *)(a1 + 15300) = a3[8];
        *(_WORD *)(a1 + 15302) = a3[9];
        *(_DWORD *)(a1 + 20384) = a3[10];
      }
    }
    else
    {
      switch(a2)
      {
        case 0x20000000:
          a4.n128_u32[0] = *(_DWORD *)a3;
          *(_DWORD *)(a1 + 17672) = *(_DWORD *)a3;
          *(unsigned char *)(a1 + 17680) = *((unsigned char *)a3 + 4);
          *(unsigned char *)(a1 + 17681) = *((unsigned char *)a3 + 5);
          *(unsigned char *)(a1 + 17682) = *((unsigned char *)a3 + 6);
          *(unsigned char *)(a1 + 17683) = *((unsigned char *)a3 + 7);
          *(unsigned char *)(a1 + 17684) = *((unsigned char *)a3 + 8);
          break;
        case 0x80000:
          a4 = *(__n128 *)a3;
          *(_OWORD *)(a1 + 15560) = *(_OWORD *)a3;
          *(_DWORD *)(a1 + 15576) = *((_DWORD *)a3 + 4);
          break;
        case 0x40000:
          uint64_t v97 = a1 + 18440;
          uint64_t v21 = 0;
          uint64_t v22 = 16535;
          uint64_t v23 = 16464;
          uint64_t v24 = 16388;
          do
          {
            unint64_t v25 = &a3[v21];
            char v26 = (_DWORD *)(a1 + v23);
            *(v26 - 14) = *(_DWORD *)&a3[v21];
            *(v26 - 13) = *(_DWORD *)&a3[v21 + 2];
            *(v26 - 12) = *(_DWORD *)&a3[v21 + 4];
            *(v26 - 11) = *(_DWORD *)&a3[v21 + 6];
            *(v26 - 18) = *(_DWORD *)&a3[v21 + 8];
            *(v26 - 17) = *(_DWORD *)&a3[v21 + 10];
            *(v26 - 16) = *(_DWORD *)&a3[v21 + 12];
            *(v26 - 15) = *(_DWORD *)&a3[v21 + 14];
            *(v26 - 5) = *(_DWORD *)&a3[v21 + 18];
            *(v26 - 4) = *(_DWORD *)&a3[v21 + 20];
            *(v26 - 3) = *(_DWORD *)&a3[v21 + 22];
            *(v26 - 2) = *(_DWORD *)&a3[v21 + 24];
            *(v26 - 9) = *(_DWORD *)&a3[v21 + 26];
            *(v26 - 8) = *(_DWORD *)&a3[v21 + 28];
            *(v26 - 7) = *(_DWORD *)&a3[v21 + 30];
            *(v26 - 6) = *(_DWORD *)&a3[v21 + 32];
            v26[4] = *(_DWORD *)&a3[v21 + 36];
            v26[5] = *(_DWORD *)&a3[v21 + 38];
            v26[6] = *(_DWORD *)&a3[v21 + 40];
            v26[7] = *(_DWORD *)&a3[v21 + 42];
            *char v26 = *(_DWORD *)&a3[v21 + 44];
            v26[1] = *(_DWORD *)&a3[v21 + 46];
            v26[2] = *(_DWORD *)&a3[v21 + 48];
            v26[3] = *(_DWORD *)&a3[v21 + 50];
            v26[13] = *(_DWORD *)&a3[v21 + 54];
            v26[14] = *(_DWORD *)&a3[v21 + 56];
            v26[15] = *(_DWORD *)&a3[v21 + 58];
            v26[16] = *(_DWORD *)&a3[v21 + 60];
            v26[9] = *(_DWORD *)&a3[v21 + 62];
            v26[10] = *(_DWORD *)&a3[v21 + 64];
            v26[11] = *(_DWORD *)&a3[v21 + 66];
            v26[12] = *(_DWORD *)&a3[v21 + 68];
            uint64_t v27 = (unsigned char *)(a1 + v22);
            *(v27 - 3) = a3[v21 + 17];
            *(v27 - 2) = a3[v21 + 35];
            *(v27 - 1) = a3[v21 + 53];
            *uint64_t v27 = a3[v21 + 71];
            uint64_t v28 = (_WORD *)(a1 + v24);
            _WORD *v28 = a3[v21 + 16];
            v28[18] = a3[v21 + 34];
            v28[36] = a3[v21 + 52];
            v21 += 72;
            v28[54] = v25[70];
            v22 += 148;
            v23 += 148;
            v24 += 148;
          }
          while (v21 != 576);
          uint64_t v29 = 0;
          uint64_t v30 = (unsigned int *)(a3 + 584);
          do
          {
            int v31 = &v4[428 * v29];
            uint64_t v32 = v31 + 576;
            *(_DWORD *)(a1 + 76 * v29 + 15684) = *((_DWORD *)v31 + 501);
            os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
            uint64_t v33 = 0;
            v99 = v30;
            do
            {
              unsigned int v34 = *v30;
              v30 += 18;
              gleBindTexture(a1, v33++, v34, v29);
            }
            while (v33 != 11);
            os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
            for (uint64_t j = 0; j != 11; ++j)
            {
              uint64_t v36 = *(void *)(a1 + 20776 + 88 * v29 + 8 * j);
              int v37 = &v32[36 * j];
              *(_DWORD *)(v36 + 984) = *(_DWORD *)v37;
              *(_DWORD *)(v36 + 988) = *((_DWORD *)v37 + 1);
              *(_DWORD *)(v36 + 992) = *((_DWORD *)v37 + 2);
              *(_DWORD *)(v36 + 996) = *((_DWORD *)v37 + 3);
              *(_WORD *)(v36 + 952) = v37[26];
              *(_WORD *)(v36 + 954) = v37[27];
              *(_WORD *)(v36 + 960) = v37[28];
              *(_WORD *)(v36 + 962) = v37[29];
              *(_WORD *)(v36 + 964) = v37[30];
              *(_DWORD *)(v36 + 968) = *((_DWORD *)v37 + 6);
              *(_DWORD *)(v36 + 972) = *((_DWORD *)v37 + 7);
              *(_DWORD *)(v36 + 976) = *((_DWORD *)v37 + 8);
              *(_DWORD *)(v36 + 980) = *((_DWORD *)v37 + 9);
              *(_WORD *)(v36 + 958) = v37[31];
              *(_WORD *)(v36 + 956) = v37[32];
              *(unsigned char *)(v36 + 966) = *(unsigned char *)(v36 + 966) & 0xFE | ((v37[34] & 2) != 0);
              *(_DWORD *)(v36 + 816) = *((_DWORD *)v37 + 5);
              int v38 = *((_DWORD *)v37 + 11);
              *(_DWORD *)(v36 + 924) = v38;
              int v39 = *((_DWORD *)v37 + 12);
              *(_DWORD *)(v36 + 928) = v39;
              *(_DWORD *)(v36 + 932) = *((_DWORD *)v37 + 10);
              *(_WORD *)(v36 + 922) = v37[33];
              char v40 = *((unsigned char *)v37 + 68);
              *(unsigned char *)(v36 + 938) = *(unsigned char *)(v36 + 938) & 0xFE | v40 & 1;
              *(unsigned char *)(v36 + 597) = *((unsigned char *)v37 + 69);
              if (v39 != 1000 && v39 || v38 | v40 & 1) {
                *(unsigned char *)(v36 + 598) = 1;
              }
              uint64_t v41 = *(unsigned __int8 *)(v100 + 2660);
              if (*(unsigned char *)(v100 + 2660))
              {
                uint64_t v42 = (unsigned char *)(v36 + 520);
                do
                {
                  *v42 |= 1u;
                  v42 += 4;
                  --v41;
                }
                while (v41);
              }
              uint64_t v43 = v36 + 40;
              gfxUpdatePluginTextureLevelGeometry();
              *(_DWORD *)(a1 + 28652) = 0;
              *(_DWORD *)(a1 + 1548) |= 0x22000u;
              gleDirtyTextureObjectCurrentBindPointsData(a1, v43, 1);
            }
            int v4 = a3;
            char v44 = &a3[428 * v29];
            int v45 = (_DWORD *)(a1 + 16 * v29 + 23808);
            *int v45 = *((_DWORD *)v44 + 486);
            v45[1] = *((_DWORD *)v44 + 487);
            v45[2] = *((_DWORD *)v44 + 488);
            v45[3] = *((_DWORD *)v44 + 489);
            uint64_t v46 = a1 + 76 * v29;
            *(_WORD *)(v46 + 15688) = v44[980];
            *(_WORD *)(v46 + 15692) = v44[982];
            *(_WORD *)(v46 + 15694) = v44[983];
            *(_WORD *)(v46 + 15696) = v44[984];
            *(_WORD *)(v46 + 15698) = v44[985];
            *(_WORD *)(v46 + 15700) = v44[986];
            *(_WORD *)(v46 + 15702) = v44[987];
            *(_WORD *)(v46 + 15704) = v44[988];
            *(_WORD *)(v46 + 15706) = v44[989];
            *(_WORD *)(v46 + 15708) = v44[990];
            *(_WORD *)(v46 + 15710) = v44[991];
            *(_WORD *)(v46 + 15712) = v44[992];
            *(_WORD *)(v46 + 15714) = v44[993];
            *(_WORD *)(v46 + 15716) = v44[994];
            *(_WORD *)(v46 + 15718) = v44[995];
            *(_DWORD *)(v46 + 15720) = *((_DWORD *)v44 + 498);
            *(_DWORD *)(v46 + 15724) = *((_DWORD *)v44 + 499);
            ++v29;
            uint64_t v30 = v99 + 214;
          }
          while (v29 != 8);
          int v47 = (__int16)a3[4065];
          if (*(__int16 *)(v97 + 5332) < v47) {
            *(_WORD *)(v97 + 5332) = v47;
          }
          for (uint64_t k = 0; k != 64; k += 2)
          {
            a4.n128_u32[0] = *(_DWORD *)&a3[k + 4000];
            *(_DWORD *)(a1 + 16260 + k * 2) = a4.n128_u32[0];
          }
          *(_WORD *)(v97 + 5328) = a3[4064] + 31552;
          break;
      }
    }
  }
  else
  {
    if (a2 <= 31)
    {
      switch(a2)
      {
        case 1:
          uint64_t v12 = 0;
          uint64_t v13 = *(void *)(a1 + 26000);
          *(_DWORD *)(a1 + 29596) = *((_DWORD *)a3 + 107);
          *(_DWORD *)(a1 + 8448) = *((_DWORD *)a3 + 104);
          *(_DWORD *)(a1 + 8452) = *((_DWORD *)a3 + 105);
          *(_DWORD *)(a1 + 8456) = *((_DWORD *)a3 + 106);
          *(_DWORD *)(a1 + 8464) = *((_DWORD *)a3 + 100);
          *(_DWORD *)(a1 + 8468) = *((_DWORD *)a3 + 101);
          *(_DWORD *)(a1 + 8472) = *((_DWORD *)a3 + 102);
          *(_DWORD *)(a1 + 8476) = *((_DWORD *)a3 + 103);
          *(_DWORD *)(a1 + 8480) = *((_DWORD *)a3 + 108);
          *(_DWORD *)(a1 + 8484) = *((_DWORD *)a3 + 109);
          *(_DWORD *)(a1 + 8488) = *((_DWORD *)a3 + 110);
          *(_DWORD *)(a1 + 8496) = *((_DWORD *)a3 + 96);
          *(_DWORD *)(a1 + 8500) = *((_DWORD *)a3 + 97);
          *(_DWORD *)(a1 + 8504) = *((_DWORD *)a3 + 98);
          *(_DWORD *)(a1 + 8508) = *((_DWORD *)a3 + 99);
          *(_DWORD *)(a1 + 8512) = *((_DWORD *)a3 + 111);
          *(_DWORD *)(a1 + 8528) = *((_DWORD *)a3 + 167);
          int v14 = (_DWORD *)(v13 - 1184);
          do
          {
            uint64_t v15 = (_DWORD *)(a1 + 8572 + v12 * 2);
            *(v15 - 3) = *(_DWORD *)&a3[v12];
            *(v15 - 2) = *(_DWORD *)&a3[v12 + 2];
            *(v15 - 1) = *(_DWORD *)&a3[v12 + 4];
            *uint64_t v15 = *(_DWORD *)&a3[v12 + 6];
            uint64_t v16 = (_DWORD *)(v13 - 1056 + v12 * 2);
            _DWORD *v16 = *(_DWORD *)&a3[v12 + 256];
            v16[1] = *(_DWORD *)&a3[v12 + 258];
            v16[2] = *(_DWORD *)&a3[v12 + 260];
            v16[3] = *(_DWORD *)&a3[v12 + 262];
            v12 += 8;
          }
          while (v12 != 64);
          uint64_t v17 = 0;
          uint64_t v18 = a3 + 70;
          uint64_t v19 = (_DWORD *)(a1 + 8700);
          do
          {
            *(v19 - 3) = *(_DWORD *)&v18[v17 - 6];
            *(v19 - 2) = *(_DWORD *)&v18[v17 - 4];
            *(v19 - 1) = *(_DWORD *)&v18[v17 - 2];
            *uint64_t v19 = *(_DWORD *)&v18[v17];
            v19 += 8;
            v17 += 8;
          }
          while (v17 != 128);
          *(_DWORD *)(a1 + 2256) = *((_DWORD *)a3 + 112);
          *(_DWORD *)(a1 + 2260) = *((_DWORD *)a3 + 113);
          *(_DWORD *)(a1 + 2264) = *((_DWORD *)a3 + 114);
          __int16 v20 = (_DWORD *)(v13 - 1280);
          v20[19] = *((_DWORD *)a3 + 115);
          *int v14 = *((_DWORD *)a3 + 116);
          v20[25] = *((_DWORD *)a3 + 117);
          v20[26] = *((_DWORD *)a3 + 118);
          v20[27] = *((_DWORD *)a3 + 119);
          v20[20] = *((_DWORD *)a3 + 120);
          v20[21] = *((_DWORD *)a3 + 121);
          v20[22] = *((_DWORD *)a3 + 122);
          v20[23] = *((_DWORD *)a3 + 123);
          v20[28] = *((_DWORD *)a3 + 124);
          v20[29] = *((_DWORD *)a3 + 125);
          v20[30] = *((_DWORD *)a3 + 126);
          v20[32] = *((_DWORD *)a3 + 160);
          v20[33] = *((_DWORD *)a3 + 161);
          v20[34] = *((_DWORD *)a3 + 162);
          v20[35] = *((_DWORD *)a3 + 163);
          v20[36] = *((_DWORD *)a3 + 164);
          v20[37] = *((_DWORD *)a3 + 165);
          a4.n128_u32[0] = *((_DWORD *)a3 + 166);
          v20[38] = a4.n128_u32[0];
          *(unsigned char *)(a1 + 32491) = *((unsigned char *)a3 + 673);
          break;
        case 2:
          *(_DWORD *)(a1 + 15344) = *(_DWORD *)a3;
          *(_DWORD *)(a1 + 15348) = *((_DWORD *)a3 + 1);
          *(_DWORD *)(a1 + 15352) = *((_DWORD *)a3 + 2);
          *(_DWORD *)(a1 + 15356) = *((_DWORD *)a3 + 3);
          *(_DWORD *)(a1 + 15360) = *((_DWORD *)a3 + 4);
          *(_DWORD *)(a1 + 15364) = *((_DWORD *)a3 + 5);
          a4.n128_u32[0] = *((_DWORD *)a3 + 6);
          *(_DWORD *)(a1 + 15368) = a4.n128_u32[0];
          *(unsigned char *)(a1 + 32507) = *(unsigned char *)(a1 + 32507) & 0x80 | a3[14] & 0x7F;
          *(unsigned char *)(a1 + 15377) = *((unsigned char *)a3 + 29);
          *(unsigned char *)(a1 + 15378) = *((unsigned char *)a3 + 30);
          *(_WORD *)(a1 + 15380) = a3[16];
          *(_WORD *)(a1 + 15382) = a3[17];
          *(_DWORD *)(a1 + 15384) = *((_DWORD *)a3 + 9);
          break;
        case 3:
        case 5:
        case 6:
        case 7:
          return a4.n128_f32[0];
        case 4:
          *(unsigned char *)(a1 + 15315) = *((unsigned char *)a3 + 11);
          *(unsigned char *)(a1 + 15314) = *((unsigned char *)a3 + 10);
          *(_WORD *)(a1 + 15312) = a3[4];
          *(_DWORD *)(a1 + 15308) = *((_DWORD *)a3 + 1);
          a4.n128_u32[0] = *(_DWORD *)a3;
          *(_DWORD *)(a1 + 15304) = *(_DWORD *)a3;
          break;
        case 8:
          *(unsigned char *)(a1 + 15534) = *((unsigned char *)a3 + 18);
          *(_WORD *)(a1 + 15530) = a3[7];
          *(_WORD *)(a1 + 15528) = a3[6];
          *(_WORD *)(a1 + 15524) = a3[4];
          *(_WORD *)(a1 + 15526) = a3[5];
          BOOL v64 = a3[4] == 6914 && a3[5] == 6914;
          *(unsigned char *)(a1 + 15538) = v64;
          *(unsigned char *)(a1 + 15533) = *((unsigned char *)a3 + 17);
          *(unsigned char *)(a1 + 15532) = *((unsigned char *)a3 + 16);
          *(unsigned char *)(a1 + 15537) = *((unsigned char *)a3 + 21);
          *(unsigned char *)(a1 + 15536) = *((unsigned char *)a3 + 20);
          *(unsigned char *)(a1 + 15535) = *((unsigned char *)a3 + 19);
          *(_DWORD *)(a1 + 15516) = *(_DWORD *)a3;
          a4.n128_u32[0] = *((_DWORD *)a3 + 1);
          *(_DWORD *)(a1 + 15520) = a4.n128_u32[0];
          break;
        default:
          if (a2 == 16)
          {
            for (uint64_t m = 0; m != 128; ++m)
              *(unsigned char *)(a1 + 15388 + m) = *((unsigned char *)a3 + m);
          }
          break;
      }
      return a4.n128_f32[0];
    }
    if (a2 <= 127)
    {
      if (a2 == 32)
      {
        *(_WORD *)(a1 + 15176) = a3[4];
        *(_WORD *)(a1 + 29844) = a3[5];
        *(_DWORD *)uint64_t v7 = *(_DWORD *)a3;
        *(_DWORD *)(a1 + 18444) = *((_DWORD *)a3 + 1);
        *(_DWORD *)(a1 + 18520) = *((_DWORD *)a3 + 4);
        *(_DWORD *)(a1 + 18524) = *((_DWORD *)a3 + 5);
        *(_DWORD *)(a1 + 18528) = *((_DWORD *)a3 + 6);
        *(_DWORD *)(a1 + 18532) = *((_DWORD *)a3 + 7);
        *(_DWORD *)(a1 + 18536) = *((_DWORD *)a3 + 8);
        *(_DWORD *)(a1 + 18540) = *((_DWORD *)a3 + 9);
        *(_DWORD *)(a1 + 18544) = *((_DWORD *)a3 + 10);
        *(_DWORD *)(a1 + 18548) = *((_DWORD *)a3 + 11);
        *(_DWORD *)(a1 + 18552) = *((_DWORD *)a3 + 12);
        a4.n128_u32[0] = *((_DWORD *)a3 + 13);
        *(_DWORD *)(a1 + 18556) = a4.n128_u32[0];
        *(_DWORD *)(a1 + 18560) = *((_DWORD *)a3 + 14);
        *(_DWORD *)(a1 + 18564) = *((_DWORD *)a3 + 15);
        int v92 = *(unsigned __int16 *)(a1 + 19162);
        *(_DWORD *)(a1 + 19160) = v92 << 16;
        *(_DWORD *)(a1 + 19160) = *((_DWORD *)a3 + 3) | (v92 << 16);
      }
      else if (a2 == 64)
      {
        uint64_t v49 = 0;
        *(_DWORD *)(a1 + 15592) = *a3;
        *(_DWORD *)(a1 + 17704) = a3[1];
        *(_WORD *)(a1 + 29708) = a3[4];
        *(_WORD *)(a1 + 14884) = a3[2];
        *(_WORD *)(a1 + 14886) = a3[3];
        *(_WORD *)(a1 + 14888) = a3[5];
        *(_DWORD *)(a1 + 12528) = *((_DWORD *)a3 + 3);
        *(_DWORD *)(a1 + 12532) = *((_DWORD *)a3 + 4);
        *(_DWORD *)(a1 + 12536) = *((_DWORD *)a3 + 5);
        *(_DWORD *)(a1 + 12540) = *((_DWORD *)a3 + 6);
        *(unsigned char *)(a1 + 14891) = *((unsigned char *)a3 + 28);
        *(unsigned char *)(a1 + 14893) = *((unsigned char *)a3 + 29);
        *(unsigned char *)(a1 + 14892) = *((unsigned char *)a3 + 30);
        *(unsigned char *)(a1 + 14894) = *((unsigned char *)a3 + 31);
        *(unsigned char *)(a1 + 14890) = *((unsigned char *)a3 + 32);
        *(_DWORD *)(a1 + 14880) = *((_DWORD *)a3 + 9);
        __int16 v50 = a3 + 34;
        int v51 = (_DWORD *)(a1 + 12544);
        do
        {
          v51[12] = *(_DWORD *)&v50[v49 + 10];
          v51[13] = *(_DWORD *)&v50[v49 + 12];
          v51[14] = *(_DWORD *)&v50[v49 + 14];
          v51[15] = *(_DWORD *)&v50[v49 + 16];
          *int v51 = *(_DWORD *)&v50[v49 - 14];
          v51[1] = *(_DWORD *)&v50[v49 - 12];
          v51[2] = *(_DWORD *)&v50[v49 - 10];
          v51[3] = *(_DWORD *)&v50[v49 - 8];
          v51[4] = *(_DWORD *)&v50[v49 - 6];
          v51[5] = *(_DWORD *)&v50[v49 - 4];
          v51[6] = *(_DWORD *)&v50[v49 - 2];
          v51[7] = *(_DWORD *)&v50[v49];
          v51[8] = *(_DWORD *)&v50[v49 + 2];
          v51[9] = *(_DWORD *)&v50[v49 + 4];
          v51[10] = *(_DWORD *)&v50[v49 + 6];
          v51[11] = *(_DWORD *)&v50[v49 + 8];
          v51[16] = *(_DWORD *)&v50[v49 + 18];
          v51[17] = *(_DWORD *)&v50[v49 + 20];
          v51[18] = *(_DWORD *)&v50[v49 + 22];
          v51[23] = *(_DWORD *)&v50[v49 + 24];
          v51[36] = *(_DWORD *)&v50[v49 + 26];
          v51[19] = *(_DWORD *)&v50[v49 + 28];
          v51[20] = *(_DWORD *)&v50[v49 + 30];
          v51[21] = *(_DWORD *)&v50[v49 + 32];
          v51[22] = *(_DWORD *)&v50[v49 + 34];
          v49 += 50;
          v51 += 40;
        }
        while (v49 != 400);
        uint64_t v52 = 0;
        char v53 = 1;
        do
        {
          uint64_t v54 = &a3[40 * v52];
          uint64_t v55 = *(_DWORD **)(a1 + 8 * v52 + 1424);
          *uint64_t v55 = *((_DWORD *)v54 + 210);
          v55[1] = *((_DWORD *)v54 + 211);
          v55[2] = *((_DWORD *)v54 + 212);
          v55[3] = *((_DWORD *)v54 + 213);
          v55[4] = *((_DWORD *)v54 + 214);
          v55[5] = *((_DWORD *)v54 + 215);
          v55[6] = *((_DWORD *)v54 + 216);
          v55[7] = *((_DWORD *)v54 + 217);
          v55[8] = *((_DWORD *)v54 + 218);
          v55[9] = *((_DWORD *)v54 + 219);
          v55[10] = *((_DWORD *)v54 + 220);
          v55[11] = *((_DWORD *)v54 + 221);
          v55[12] = *((_DWORD *)v54 + 222);
          v55[13] = *((_DWORD *)v54 + 223);
          v55[14] = *((_DWORD *)v54 + 224);
          v55[15] = *((_DWORD *)v54 + 225);
          v55[16] = *((_DWORD *)v54 + 229);
          char v56 = (_DWORD *)(a1 + 12 * v52 + 29604);
          *char v56 = *((_DWORD *)v54 + 226);
          LOBYTE(v55) = v53;
          v56[1] = *((_DWORD *)v54 + 227);
          a4.n128_u32[0] = *((_DWORD *)v54 + 228);
          v56[2] = a4.n128_u32[0];
          uint64_t v52 = 1;
          char v53 = 0;
        }
        while ((v55 & 1) != 0);
      }
    }
    else
    {
      if (a2 != 128)
      {
        if (a2 != 256)
        {
          if (a2 == 512)
          {
            *(_DWORD *)(a1 + 15136) = *(_DWORD *)a3;
            *(_DWORD *)(a1 + 15140) = *((_DWORD *)a3 + 1);
            *(_DWORD *)(a1 + 15144) = *((_DWORD *)a3 + 2);
            a4.n128_u32[0] = *((_DWORD *)a3 + 3);
            *(_DWORD *)(a1 + 15148) = a4.n128_u32[0];
          }
          return a4.n128_f32[0];
        }
        *(unsigned char *)(a1 + 15204) = *((unsigned char *)a3 + 28);
        *(_WORD *)(a1 + 15200) = a3[12];
        *(void *)(a1 + 15128) = *(void *)a3;
        BOOL v71 = *((unsigned char *)a3 + 29) != 0;
        *(unsigned char *)(a1 + 15340) = *((unsigned char *)a3 + 29);
        *(unsigned char *)(a1 + 15206) = *((unsigned char *)a3 + 30);
        *(void *)(a1 + 15208) = *((void *)a3 + 1);
        a4.n128_u64[0] = *((void *)a3 + 2);
        *(void *)(a1 + 15216) = a4.n128_u64[0];
        unsigned int v72 = *(_DWORD *)(a1 + 29804) & 0xFFFFFEFF | (v71 << 8);
        goto LABEL_89;
      }
      *(_DWORD *)uint64_t v6 = *(_DWORD *)a3;
      *(_DWORD *)(a1 + 29580) = *((_DWORD *)a3 + 1);
      *(_DWORD *)(a1 + 29584) = *((_DWORD *)a3 + 2);
      *(_DWORD *)(a1 + 29588) = *((_DWORD *)a3 + 3);
      float v65 = *((float *)a3 + 5);
      *(float *)(a1 + 15244) = v65;
      float v66 = *((float *)a3 + 6);
      *(float *)(a1 + 15248) = v66;
      float v67 = *((float *)a3 + 7);
      *(float *)(a1 + 15252) = v67;
      *(_DWORD *)(a1 + 29600) = *((_DWORD *)a3 + 4);
      *(_WORD *)(a1 + 15276) = a3[16];
      *(_WORD *)(a1 + 15278) = a3[17];
      *(_WORD *)(a1 + 15280) = a3[18];
      *(unsigned char *)(a1 + 15282) = *((unsigned char *)a3 + 38);
      *(unsigned char *)(a1 + 32506) = *((unsigned char *)a3 + 39);
      float v68 = v67 - v66;
      BOOL v69 = v68 > -0.000005 && v68 < 0.000005;
      float v70 = 1.0 / v68;
      if (v69) {
        float v70 = 200000.0;
      }
      *(float *)(a1 + 15256) = v70;
      *(float *)(a1 + 15272) = v67 * v70;
      a4.n128_u64[0] = (unint64_t)vmul_n_f32((float32x2_t)0x3F99BE613FB8AA3BLL, v65);
      *(void *)(a1 + 15260) = a4.n128_u64[0];
    }
  }
  return a4.n128_f32[0];
}

void glLightfv_Exec(float32x4_t *a1, int a2, int a3, float *a4)
{
  int v4 = &a1[1790].i32[3];
  unsigned int v5 = a2 - 0x4000;
  if ((a2 - 0x4000) < 8)
  {
    switch(a3)
    {
      case 4608:
        uint64_t v8 = &a1[10 * v5];
        v8[784].f32[0] = *a4;
        v8[784].f32[1] = a4[1];
        v8[784].f32[2] = a4[2];
        v8[784].f32[3] = a4[3];
        *(unsigned char *)(a1[89].i64[0] + 496) |= 4u;
        *(unsigned char *)(a1[89].i64[1] + 496) |= 4u;
        *int v4 = 0;
        a1[96].i32[2] |= 0x1000000u;
        uint64_t v9 = a1[1203].i64[0];
        if (v9)
        {
          unint64_t v10 = *(unsigned __int16 *)(v9 + 20 * v5 + 2560);
          if (v10 <= 0x3FF)
          {
            *(__int32 *)((char *)a1[97].i32 + ((v10 >> 3) & 0x1FFC)) |= 1 << v10;
            *int v4 = 0;
            a1[95].i32[3] |= 0x800000u;
          }
        }
        uint64_t v11 = a1[1204].i64[1];
        if (v11)
        {
          unint64_t v12 = *(unsigned __int16 *)(v11 + 20 * v5 + 2560);
          if (v12 <= 0x3FF)
          {
            *(__int32 *)((char *)a1[121].i32 + ((v12 >> 3) & 0x1FFC)) |= 1 << v12;
            *int v4 = 0;
            a1[95].i32[3] |= 0x4000000u;
          }
        }
        uint64_t v13 = a1[1205].i64[0];
        if (!v13) {
          return;
        }
        unint64_t v14 = *(unsigned __int16 *)(v13 + 20 * v5 + 2560);
        goto LABEL_68;
      case 4609:
        uint64_t v15 = &a1[10 * v5];
        v15[785].f32[0] = *a4;
        v15[785].f32[1] = a4[1];
        v15[785].f32[2] = a4[2];
        v15[785].f32[3] = a4[3];
        *(unsigned char *)(a1[89].i64[0] + 496) |= 8u;
        *(unsigned char *)(a1[89].i64[1] + 496) |= 8u;
        *int v4 = 0;
        a1[96].i32[2] |= 0x1000000u;
        uint64_t v16 = a1[1203].i64[0];
        if (v16)
        {
          unint64_t v17 = *(unsigned __int16 *)(v16 + 20 * v5 + 2562);
          if (v17 <= 0x3FF)
          {
            *(__int32 *)((char *)a1[97].i32 + ((v17 >> 3) & 0x1FFC)) |= 1 << v17;
            *int v4 = 0;
            a1[95].i32[3] |= 0x800000u;
          }
        }
        uint64_t v18 = a1[1204].i64[1];
        if (v18)
        {
          unint64_t v19 = *(unsigned __int16 *)(v18 + 20 * v5 + 2562);
          if (v19 <= 0x3FF)
          {
            *(__int32 *)((char *)a1[121].i32 + ((v19 >> 3) & 0x1FFC)) |= 1 << v19;
            *int v4 = 0;
            a1[95].i32[3] |= 0x4000000u;
          }
        }
        uint64_t v20 = a1[1205].i64[0];
        if (!v20) {
          return;
        }
        unint64_t v14 = *(unsigned __int16 *)(v20 + 20 * v5 + 2562);
        goto LABEL_68;
      case 4610:
        uint64_t v21 = &a1[10 * v5];
        v21[786].f32[0] = *a4;
        v21[786].f32[1] = a4[1];
        v21[786].f32[2] = a4[2];
        v21[786].f32[3] = a4[3];
        *(unsigned char *)(a1[89].i64[0] + 496) |= 0x10u;
        *(unsigned char *)(a1[89].i64[1] + 496) |= 0x10u;
        *int v4 = 0;
        a1[96].i32[2] |= 0x1000000u;
        uint64_t v22 = a1[1203].i64[0];
        if (v22)
        {
          unint64_t v23 = *(unsigned __int16 *)(v22 + 20 * v5 + 2564);
          if (v23 <= 0x3FF)
          {
            *(__int32 *)((char *)a1[97].i32 + ((v23 >> 3) & 0x1FFC)) |= 1 << v23;
            *int v4 = 0;
            a1[95].i32[3] |= 0x800000u;
          }
        }
        uint64_t v24 = a1[1204].i64[1];
        if (v24)
        {
          unint64_t v25 = *(unsigned __int16 *)(v24 + 20 * v5 + 2564);
          if (v25 <= 0x3FF)
          {
            *(__int32 *)((char *)a1[121].i32 + ((v25 >> 3) & 0x1FFC)) |= 1 << v25;
            *int v4 = 0;
            a1[95].i32[3] |= 0x4000000u;
          }
        }
        uint64_t v26 = a1[1205].i64[0];
        if (!v26) {
          return;
        }
        unint64_t v14 = *(unsigned __int16 *)(v26 + 20 * v5 + 2564);
        goto LABEL_68;
      case 4611:
        float v27 = *a4;
        uint64_t v28 = &a1[10 * v5];
        v28[787].f32[0] = *a4;
        float v29 = a4[1];
        v28[787].f32[1] = v29;
        float v30 = a4[2];
        v28[787].f32[2] = v30;
        v28[787] = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(a1[602], v29), a1[601], v27), a1[603], v30), a1[604], a4[3]);
        int v31 = a2 - 0x4000;
        gleUpdateLightPosition((uint64_t)a1, v31);
        return;
      case 4612:
        uint64_t v32 = &a1[10 * v5];
        v32[788].f32[0] = *a4;
        v32[788].f32[1] = a4[1];
        v32[788].f32[2] = a4[2];
        int v33 = a2 - 0x4000;
        gleTransformLightDirection((uint64_t)a1, v33);
        return;
      case 4613:
        float v34 = *a4;
        if (*a4 < 0.0 || v34 > (float)*(int *)(a1[1814].i64[1] + 128)) {
          goto LABEL_58;
        }
        a1[10 * v5 + 789].f32[3] = v34;
        gleUpdateLightExponents((uint64_t)a1, a2 - 0x4000);
        uint64_t v35 = a1[1203].i64[0];
        if (v35)
        {
          unint64_t v36 = *(unsigned __int16 *)(v35 + 20 * v5 + 2570);
          if (v36 <= 0x3FF)
          {
            *(__int32 *)((char *)a1[97].i32 + ((v36 >> 3) & 0x1FFC)) |= 1 << v36;
            *int v4 = 0;
            a1[95].i32[3] |= 0x800000u;
          }
        }
        uint64_t v37 = a1[1204].i64[1];
        if (v37)
        {
          unint64_t v38 = *(unsigned __int16 *)(v37 + 20 * v5 + 2570);
          if (v38 <= 0x3FF)
          {
            *(__int32 *)((char *)a1[121].i32 + ((v38 >> 3) & 0x1FFC)) |= 1 << v38;
            *int v4 = 0;
            a1[95].i32[3] |= 0x4000000u;
          }
        }
        uint64_t v39 = a1[1205].i64[0];
        if (!v39) {
          return;
        }
        unint64_t v14 = *(unsigned __int16 *)(v39 + 20 * v5 + 2570);
        goto LABEL_68;
      case 4614:
        float v40 = *a4;
        if (*a4 < 0.0 || v40 > 90.0)
        {
          if (v40 != 180.0)
          {
LABEL_58:
            if (a1[1864].i16[4]) {
              return;
            }
            __int16 v6 = 1281;
            goto LABEL_4;
          }
          uint64_t v42 = &a1[10 * v5];
          v42[788].i32[3] = -1082130432;
          v42[793].i32[0] = 1127481344;
        }
        else
        {
          uint64_t v43 = &a1[10 * v5];
          v43[793].f32[0] = v40;
          v43[788].f32[3] = cosf(*a4 * 0.017453);
        }
        gleUpdateLightExponents((uint64_t)a1, v5);
        uint64_t v44 = a1[1203].i64[0];
        if (v44)
        {
          unint64_t v45 = *(unsigned __int16 *)(v44 + 20 * v5 + 2568);
          if (v45 <= 0x3FF)
          {
            *(__int32 *)((char *)a1[97].i32 + ((v45 >> 3) & 0x1FFC)) |= 1 << v45;
            *int v4 = 0;
            a1[95].i32[3] |= 0x800000u;
          }
        }
        uint64_t v46 = a1[1204].i64[1];
        if (v46)
        {
          unint64_t v47 = *(unsigned __int16 *)(v46 + 20 * v5 + 2568);
          if (v47 <= 0x3FF)
          {
            *(__int32 *)((char *)a1[121].i32 + ((v47 >> 3) & 0x1FFC)) |= 1 << v47;
            *int v4 = 0;
            a1[95].i32[3] |= 0x4000000u;
          }
        }
        uint64_t v48 = a1[1205].i64[0];
        if (v48)
        {
          unint64_t v14 = *(unsigned __int16 *)(v48 + 20 * v5 + 2568);
LABEL_68:
          if (v14 <= 0x3FF)
          {
            *(__int32 *)((char *)a1[129].i32 + ((v14 >> 3) & 0x1FFC)) |= 1 << v14;
            *int v4 = 0;
            a1[95].i32[3] |= 0x8000000u;
          }
        }
        return;
      case 4615:
        if (*a4 < 0.0) {
          goto LABEL_58;
        }
        a1[10 * v5 + 789].f32[0] = *a4;
        goto LABEL_72;
      case 4616:
        if (*a4 < 0.0) {
          goto LABEL_58;
        }
        a1[10 * v5 + 789].f32[1] = *a4;
        goto LABEL_72;
      case 4617:
        if (*a4 < 0.0) {
          goto LABEL_58;
        }
        a1[10 * v5 + 789].f32[2] = *a4;
LABEL_72:
        int v49 = a2 - 0x4000;
        gleUpdateLightAttenuation((uint64_t)a1, v49);
        return;
      default:
        break;
    }
  }
  if (!a1[1864].i16[4])
  {
    __int16 v6 = 1280;
LABEL_4:
    a1[1864].i16[4] = v6;
  }
}

uint64_t gleSetEnable_LIGHT(uint64_t result, int a2, int a3)
{
  int v3 = *(_DWORD *)(result + 14880);
  int v4 = v3 & ~(1 << a2) | (a3 << a2);
  if (v3 != v4)
  {
    uint64_t v5 = result;
    *(_DWORD *)(result + 14880) = v4;
    *(unsigned char *)(*(void *)(result + 1424) + 496) = 63;
    *(unsigned char *)(*(void *)(result + 1432) + 496) = 63;
    uint64_t result = gleUpdateLightFast(result, a2 - 0x4000);
    *(_DWORD *)(v5 + 28652) = 0;
    *(_DWORD *)(v5 + 1548) |= 0x10020u;
  }
  return result;
}

uint64_t glLightModelfv_Exec(uint64_t a1, int a2, _DWORD *a3)
{
  int v3 = (_DWORD *)(a1 + 28652);
  int v4 = (_WORD *)(a1 + 14888);
  if (a2 > 2898)
  {
    if (a2 != 34224)
    {
      if (a2 != 33272)
      {
        if (a2 == 2899)
        {
          *(_DWORD *)(a1 + 12528) = *a3;
          *(_DWORD *)(a1 + 12532) = a3[1];
          *(_DWORD *)(a1 + 12536) = a3[2];
          *(_DWORD *)(a1 + 12540) = a3[3];
          *(unsigned char *)(*(void *)(a1 + 1424) + 496) |= 4u;
          *(unsigned char *)(*(void *)(a1 + 1432) + 496) |= 4u;
          uint64_t v5 = *(void *)(a1 + 19248);
          if (v5)
          {
            unint64_t v6 = *(unsigned __int16 *)(v5 + 3786);
            if (v6 <= 0x3FF)
            {
              *(_DWORD *)(a1 + ((v6 >> 3) & 0x1FFC) + 1552) |= 1 << v6;
              *(_DWORD *)(a1 + 1532) |= 0x800000u;
            }
          }
          uint64_t v7 = *(void *)(a1 + 19272);
          if (v7)
          {
            unint64_t v8 = *(unsigned __int16 *)(v7 + 3786);
            if (v8 <= 0x3FF)
            {
              *(_DWORD *)(a1 + ((v8 >> 3) & 0x1FFC) + 1936) |= 1 << v8;
              *(_DWORD *)(a1 + 1532) |= 0x4000000u;
            }
          }
          uint64_t v9 = *(void *)(a1 + 19280);
          if (v9)
          {
            unint64_t v10 = *(unsigned __int16 *)(v9 + 3786);
            if (v10 <= 0x3FF)
            {
              *(_DWORD *)(a1 + ((v10 >> 3) & 0x1FFC) + 2064) |= 1 << v10;
              *(_DWORD *)(a1 + 1532) |= 0x8000000u;
            }
          }
          *int v3 = 0;
          *(_DWORD *)(a1 + 1544) |= 0x1000000u;
          return a1;
        }
        goto LABEL_34;
      }
      unsigned int v16 = *(float *)a3;
      if ((unsigned __int16)*v4 == v16) {
        return a1;
      }
      if (v16 - 33273 <= 1)
      {
        *int v4 = v16;
        if (*(unsigned char *)(a1 + 14890))
        {
          if (!*(unsigned char *)(a1 + 24756) && (*(unsigned char *)(a1 + 24864) & 1) == 0)
          {
            int v17 = (unsigned __int16)v16 == 33274;
            if (*(unsigned __int8 *)(a1 + 15283) != v17)
            {
              *(unsigned char *)(a1 + 15283) = v17;
              *int v3 = 0;
              *(_DWORD *)(a1 + 1548) |= 0x20000u;
            }
          }
        }
        return gleUpdateLightModel(a1);
      }
LABEL_34:
      if (!*(_WORD *)(a1 + 29832)) {
        *(_WORD *)(a1 + 29832) = 1280;
      }
      return a1;
    }
    int v15 = *(float *)a3 != 0.0;
    if (*(unsigned __int8 *)(a1 + 14894) == v15) {
      return a1;
    }
    *(unsigned char *)(a1 + 14894) = v15;
    return gleUpdateLightModel(a1);
  }
  if (a2 == 2897)
  {
    int v18 = *(float *)a3 != 0.0;
    if (*(unsigned __int8 *)(a1 + 14893) == v18) {
      return a1;
    }
    *(unsigned char *)(a1 + 14893) = v18;
    return gleUpdateLightModel(a1);
  }
  if (a2 != 2898) {
    goto LABEL_34;
  }
  float v11 = *(float *)a3;
  int v12 = *(float *)a3 != 0.0;
  if (*(unsigned __int8 *)(a1 + 14892) != v12)
  {
    *(unsigned char *)(a1 + 14892) = v12;
    if ((*(unsigned char *)(a1 + 24864) & 9) != 0 || *(unsigned char *)(a1 + 24756)) {
      int v13 = *(unsigned __int8 *)(a1 + 24751);
    }
    else {
      int v13 = v11 != 0.0 && *(unsigned char *)(a1 + 14890) != 0;
    }
    if (v13 == *(unsigned __int8 *)(a1 + 17701))
    {
      int v14 = *(_DWORD *)(a1 + 1548);
    }
    else
    {
      *(unsigned char *)(a1 + 17701) = v13;
      *(_DWORD *)(a1 + 1532) |= 0x40000000u;
      *int v3 = 0;
      int v14 = *(_DWORD *)(a1 + 1548) | 0x10008400;
      *(_DWORD *)(a1 + 1548) = v14;
      if ((*(unsigned char *)(*(void *)(a1 + 29032) + 25) & 0x7F) != 0) {
        v14 |= 0x30000u;
      }
    }
    *int v3 = 0;
    *(_DWORD *)(a1 + 1548) = v14 | 0x18402;
  }
  return a1;
}

uint64_t glStencilOp_Exec(uint64_t result, int a2, int a3, int a4)
{
  if (((a2 - 7680) < 4 || (a2 - 34055) < 2 || !a2 || a2 == 5386)
    && ((a3 - 7680) < 4 || (a3 - 34055) < 2 || !a3 || a3 == 5386)
    && ((a4 - 7680) < 4 || (a4 - 34055) < 2 || !a4 || a4 == 5386))
  {
    int v4 = (_WORD *)(result + 15606);
    if (*(_DWORD *)(result + 29776) == 1028)
    {
      if ((unsigned __int16)*v4 == a2
        && *(unsigned __int16 *)(result + 15608) == a3
        && *(unsigned __int16 *)(result + 15610) == a4
        && *(unsigned __int16 *)(result + 15638) == a2
        && *(unsigned __int16 *)(result + 15640) == a3
        && *(unsigned __int16 *)(result + 15642) == a4)
      {
        return result;
      }
      *int v4 = a2;
      *(_WORD *)(result + 15608) = a3;
      *(_WORD *)(result + 15610) = a4;
      *(_WORD *)(result + 15638) = a2;
      *(_WORD *)(result + 15640) = a3;
      *(_WORD *)(result + 15642) = a4;
      int v5 = *(_DWORD *)(result + 15644);
      if (v5 == 33)
      {
        *(_DWORD *)(result + 15644) = 1;
        *(_DWORD *)(result + 1548) |= 0x8000u;
      }
      else
      {
        *(_DWORD *)(result + 15644) = v5 & 0xFFFFFFDF;
      }
    }
    else
    {
      if (*(unsigned __int16 *)(result + 15622) == a2
        && *(unsigned __int16 *)(result + 15624) == a3
        && *(unsigned __int16 *)(result + 15626) == a4)
      {
        return result;
      }
      *(_WORD *)(result + 15622) = a2;
      *(_WORD *)(result + 15624) = a3;
      *(_WORD *)(result + 15626) = a4;
    }
    *(_DWORD *)(result + 1520) |= 0x10000000u;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1548) |= 0x40000u;
    return result;
  }
  if (!*(_WORD *)(result + 29832)) {
    *(_WORD *)(result + 29832) = 1280;
  }
  return result;
}

uint64_t gleFlushAndSubmit(uint64_t a1, float a2, float a3, float a4, float a5)
{
  (*(void (**)(void))(a1 + 28152))();
  unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(a1 + 26136);
  uint64_t v11 = *(void *)(a1 + 26008);
  v12.n128_f32[0] = a2;
  v13.n128_f32[0] = a3;
  v14.n128_f32[0] = a4;
  v15.n128_f32[0] = a5;

  return v10(a1, v11, v12, v13, v14, v15);
}

unint64_t gleClipLines(uint64_t a1, char *a2, unint64_t a3, int a4)
{
  int v5 = a2;
  uint64_t v7 = *(void *)(a1 + 26008);
  unint64_t v8 = a2 - 8;
  unsigned __int8 v9 = 1;
  unsigned int v16 = a2 - 8;
  do
  {
    if ((v9 & a4) == 0) {
      goto LABEL_15;
    }
    unint64_t v10 = (unint64_t)&v8[8 * (int)a3];
    uint64_t v11 = v5;
    if (v10 <= (unint64_t)v5) {
      goto LABEL_14;
    }
    do
    {
      uint64_t v13 = *(void *)v5;
      uint64_t v12 = *((void *)v5 + 1);
      if ((v9 & *(unsigned char *)(*(void *)v5 + 3)) != 0)
      {
        if ((v9 & *(unsigned char *)(v12 + 3)) != 0) {
          goto LABEL_12;
        }
        a4 |= (*(uint64_t (**)(uint64_t, void, void, void, void))(a1 + 27896))(a1, *(void *)v5, *((void *)v5 + 1), *(void *)v5, v9);
        *(void *)uint64_t v11 = v13;
LABEL_11:
        *((void *)v11 + 1) = v12;
        v11 += 16;
        goto LABEL_12;
      }
      *(void *)uint64_t v11 = v13;
      if ((v9 & *(unsigned char *)(v12 + 3)) == 0) {
        goto LABEL_11;
      }
      uint64_t v14 = v7 + 640 * (*(unsigned char *)(v12 + 1) == 0);
      if (*(unsigned char *)(v12 + 1)) {
        uint64_t v7 = v12;
      }
      a4 |= (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(a1 + 27896))(a1, v12, v13, v7, v9);
      *((void *)v11 + 1) = v7;
      v11 += 16;
      uint64_t v7 = v14;
LABEL_12:
      v5 += 16;
    }
    while ((unint64_t)v5 < v10);
    unint64_t v8 = v16;
    int v5 = a2;
LABEL_14:
    a3 = (unint64_t)(v11 - v5) >> 3;
    if ((int)a3 < 2) {
      return 0;
    }
LABEL_15:
    v9 *= 2;
  }
  while ((v9 & 0xFEu) < 0x21);
  *(void *)(a1 + 26008) = v7;
  return a3;
}

void *glMatrixMode_Comp(uint64_t a1, int a2)
{
  uint64_t result = gleAddCommand(a1, (uint64_t)glMatrixMode_ListExec, 4);
  *(_DWORD *)uint64_t result = a2;
  return result;
}

void *glPushMatrix_Comp(uint64_t a1)
{
  return gleAddCommand(a1, (uint64_t)glPushMatrix_ListExec, 0);
}

float *glScalef_Comp(uint64_t a1, float a2, float a3, float a4)
{
  uint64_t result = (float *)gleAddCommand(a1, (uint64_t)glScale_ListExec, 12);
  *uint64_t result = a2;
  result[1] = a3;
  result[2] = a4;
  return result;
}

void glRotatef_Comp(uint64_t a1, float a2, float a3, float a4, float a5)
{
  float v6 = *(float *)(a1 + 288);
  if (v6 == a4 && v6 == a5)
  {
    __float2 v10 = __sincosf_stret(flt_227DC1568[v6 > a3] * a2);
    float sinval = v10.__sinval;
    float cosval = v10.__cosval;
    uint64_t v13 = glRotateX_ListExec;
LABEL_19:
    unsigned int v16 = (float *)gleAddCommand(a1, (uint64_t)v13, 8);
    float *v16 = sinval;
    v16[1] = cosval;
    return;
  }
  if (v6 == a3 && v6 == a5)
  {
    __float2 v14 = __sincosf_stret(flt_227DC1568[v6 > a4] * a2);
    float sinval = v14.__sinval;
    float cosval = v14.__cosval;
    uint64_t v13 = glRotateY_ListExec;
    goto LABEL_19;
  }
  if (v6 == a3 && v6 == a4)
  {
    __float2 v15 = __sincosf_stret(flt_227DC1568[v6 > a5] * a2);
    float sinval = v15.__sinval;
    float cosval = v15.__cosval;
    uint64_t v13 = glRotateZ_ListExec;
    goto LABEL_19;
  }

  glRotateXYZ_Comp(a1, a2, a3, a4, a5);
}

float *glNormal3f_Comp(uint64_t a1, float a2, float a3, float a4)
{
  uint64_t result = (float *)gleAddCommand(a1, (uint64_t)glNormal_ListExec, 12);
  *uint64_t result = a2;
  result[1] = a3;
  result[2] = a4;
  return result;
}

float *glTranslatef_Comp(uint64_t a1, float a2, float a3, float a4)
{
  uint64_t result = (float *)gleAddCommand(a1, (uint64_t)glTranslate_ListExec, 12);
  *uint64_t result = a2;
  result[1] = a3;
  result[2] = a4;
  return result;
}

void *glPopMatrix_Comp(uint64_t a1)
{
  return gleAddCommand(a1, (uint64_t)glPopMatrix_ListExec, 0);
}

uint64_t gleSetEnable_NORMALIZE(uint64_t result, uint64_t a2, int a3)
{
  if (*(unsigned __int8 *)(result + 12516) != a3)
  {
    *(unsigned char *)(result + 12516) = a3;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1548) |= 0x10010u;
  }
  return result;
}

uint64_t gleSetEnable_FOG(uint64_t result, uint64_t a2, int a3)
{
  if (*(unsigned __int8 *)(result + 15282) != a3)
  {
    *(unsigned char *)(result + 15282) = a3;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1548) |= 0x20000u;
    return gleUpdateFogData(result);
  }
  return result;
}

float *glNormal3f_Exec(float *result, float a2, float a3, float a4)
{
  result[2112] = a2;
  result[2113] = a3;
  result[2114] = a4;
  return result;
}

float *glMaterialfv_Exec(float *result, int a2, int a3, float *a4)
{
  int v4 = result;
  int v5 = result + 7163;
  long long v8 = 0uLL;
  if (a3 <= 5631)
  {
    switch(a3)
    {
      case 4608:
        long long v8 = *(_OWORD *)a4;
        if (a2 == 1032)
        {
          uint64_t result = (float *)gleLightMaterialRGBAChange_FB_A((uint64_t)result, &v8);
          goto LABEL_18;
        }
        break;
      case 4609:
        long long v8 = *(_OWORD *)a4;
        if (a2 == 1032)
        {
          uint64_t result = (float *)gleLightMaterialRGBAChange_FB_D((uint64_t)result, &v8);
          goto LABEL_18;
        }
        break;
      case 4610:
        long long v8 = *(_OWORD *)a4;
        if (a2 == 1032)
        {
          uint64_t result = (float *)gleLightMaterialRGBAChange_FB_S((uint64_t)result, &v8);
LABEL_18:
          *int v5 = 0;
          *((_DWORD *)v4 + 386) |= 0x1000000u;
          return result;
        }
        break;
    }
    goto LABEL_27;
  }
  if (a3 == 5632)
  {
    long long v8 = *(_OWORD *)a4;
    if (a2 == 1032)
    {
      uint64_t result = (float *)gleLightMaterialRGBAChange_FB_E((uint64_t)result, &v8);
      goto LABEL_18;
    }
    goto LABEL_27;
  }
  if (a3 != 5633)
  {
    if (a3 == 5634)
    {
      long long v8 = *(_OWORD *)a4;
      if (a2 == 1032)
      {
        uint64_t result = (float *)gleLightMaterialRGBAChange_FB_AD((uint64_t)result, &v8);
        goto LABEL_18;
      }
    }
    goto LABEL_27;
  }
  float v6 = *a4;
  if (*a4 < 0.0 || v6 > (float)*(int *)(*((void *)result + 3629) + 124))
  {
    if (*((_WORD *)result + 14916)) {
      return result;
    }
    __int16 v7 = 1281;
LABEL_29:
    *((_WORD *)result + 14916) = v7;
    return result;
  }
  if (a2 != 1032)
  {
LABEL_27:
    if (*((_WORD *)result + 14916)) {
      return result;
    }
    __int16 v7 = 1280;
    goto LABEL_29;
  }

  return gleLightMaterialShineChange_FB((uint64_t)result, v6);
}

void *gleLightMaterialRGBAChange_F_AD(uint64_t a1, void *a2)
{
  uint64_t result = glePushMaterial(a1, 0);
  *uint64_t result = *a2;
  result[1] = a2[1];
  result[2] = *a2;
  result[3] = a2[1];
  *((_WORD *)result + 248) |= 0xC0Cu;
  uint64_t v5 = *(void *)(a1 + 19248);
  if (v5)
  {
    unint64_t v6 = *(unsigned __int16 *)(v5 + 2816);
    if (v6 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v6 >> 3) & 0x1FFC) + 1552) |= 1 << v6;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x800000u;
    }
  }
  uint64_t v7 = *(void *)(a1 + 19272);
  if (v7)
  {
    unint64_t v8 = *(unsigned __int16 *)(v7 + 2816);
    if (v8 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v8 >> 3) & 0x1FFC) + 1936) |= 1 << v8;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x4000000u;
    }
  }
  uint64_t v9 = *(void *)(a1 + 19280);
  if (v9)
  {
    unint64_t v10 = *(unsigned __int16 *)(v9 + 2816);
    if (v10 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v10 >> 3) & 0x1FFC) + 2064) |= 1 << v10;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x8000000u;
    }
  }
  if (v5)
  {
    unint64_t v11 = *(unsigned __int16 *)(v5 + 2818);
    if (v11 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v11 >> 3) & 0x1FFC) + 1552) |= 1 << v11;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x800000u;
    }
  }
  if (v7)
  {
    unint64_t v12 = *(unsigned __int16 *)(v7 + 2818);
    if (v12 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v12 >> 3) & 0x1FFC) + 1936) |= 1 << v12;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x4000000u;
    }
  }
  if (v9)
  {
    unint64_t v13 = *(unsigned __int16 *)(v9 + 2818);
    if (v13 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v13 >> 3) & 0x1FFC) + 2064) |= 1 << v13;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x8000000u;
    }
  }
  return result;
}

void *glePushMaterial(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = a1 + 8 * a2;
  uint64_t v3 = *(void *)(v2 + 1424);
  if (*(_DWORD *)(v3 + 500))
  {
    uint64_t v5 = *(void **)(a1 + 1440);
    if (v5)
    {
      *(void *)(a1 + 1440) = v5[64];
    }
    else
    {
      uint64_t v5 = malloc_type_malloc(0x210uLL, 0x577B5147uLL);
      if (!v5) {
        abort();
      }
      *((_DWORD *)v5 + 17) = 0;
      *((_DWORD *)v5 + 18) = 0;
      *((_DWORD *)v5 + 19) = 1065353216;
    }
    v5[63] = 0;
    v5[64] = v3;
    *(void *)(v3 + 504) = v5;
    *(void *)(v2 + 1424) = v5;
    v5[62] = 63;
    *uint64_t v5 = *(void *)v3;
    v5[1] = *(void *)(v3 + 8);
    v5[2] = *(void *)(v3 + 16);
    v5[3] = *(void *)(v3 + 24);
    v5[4] = *(void *)(v3 + 32);
    v5[5] = *(void *)(v3 + 40);
    v5[6] = *(void *)(v3 + 48);
    v5[7] = *(void *)(v3 + 56);
    *((_DWORD *)v5 + 16) = *(_DWORD *)(v3 + 64);
    return v5;
  }
  return (void *)v3;
}

void *gleLightMaterialRGBAChange_F_E(uint64_t a1, void *a2)
{
  uint64_t result = glePushMaterial(a1, 0);
  result[6] = *a2;
  result[7] = a2[1];
  *((_WORD *)result + 248) |= 0x202u;
  uint64_t v5 = *(void *)(a1 + 19248);
  if (v5)
  {
    unint64_t v6 = *(unsigned __int16 *)(v5 + 2822);
    if (v6 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v6 >> 3) & 0x1FFC) + 1552) |= 1 << v6;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x800000u;
    }
  }
  uint64_t v7 = *(void *)(a1 + 19272);
  if (v7)
  {
    unint64_t v8 = *(unsigned __int16 *)(v7 + 2822);
    if (v8 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v8 >> 3) & 0x1FFC) + 1936) |= 1 << v8;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x4000000u;
    }
  }
  uint64_t v9 = *(void *)(a1 + 19280);
  if (v9)
  {
    unint64_t v10 = *(unsigned __int16 *)(v9 + 2822);
    if (v10 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v10 >> 3) & 0x1FFC) + 2064) |= 1 << v10;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x8000000u;
    }
  }
  return result;
}

void *gleLightMaterialRGBAChange_F_S(uint64_t a1, void *a2)
{
  uint64_t result = glePushMaterial(a1, 0);
  result[4] = *a2;
  result[5] = a2[1];
  *((_WORD *)result + 248) |= 0x1010u;
  uint64_t v5 = *(void *)(a1 + 19248);
  if (v5)
  {
    unint64_t v6 = *(unsigned __int16 *)(v5 + 2820);
    if (v6 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v6 >> 3) & 0x1FFC) + 1552) |= 1 << v6;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x800000u;
    }
  }
  uint64_t v7 = *(void *)(a1 + 19272);
  if (v7)
  {
    unint64_t v8 = *(unsigned __int16 *)(v7 + 2820);
    if (v8 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v8 >> 3) & 0x1FFC) + 1936) |= 1 << v8;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x4000000u;
    }
  }
  uint64_t v9 = *(void *)(a1 + 19280);
  if (v9)
  {
    unint64_t v10 = *(unsigned __int16 *)(v9 + 2820);
    if (v10 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v10 >> 3) & 0x1FFC) + 2064) |= 1 << v10;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x8000000u;
    }
  }
  return result;
}

uint64_t glMaterialf_Exec(uint64_t a1, float a2, int a3, int a4)
{
  if (a4 == 5633)
  {
    if (a2 < 0.0 || (float)*(int *)(*(void *)(a1 + 29032) + 124) < a2)
    {
      int v4 = (__int16 *)(a1 + 29832);
      if (*(_WORD *)(a1 + 29832)) {
        return a1;
      }
      __int16 v5 = 1281;
LABEL_11:
      *int v4 = v5;
      return a1;
    }
    if (a3 == 1032) {
      return (uint64_t)gleLightMaterialShineChange_FB(a1, a2);
    }
  }
  int v4 = (__int16 *)(a1 + 29832);
  if (!*(_WORD *)(a1 + 29832))
  {
    __int16 v5 = 1280;
    goto LABEL_11;
  }
  return a1;
}

uint64_t gleCullTriangle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, _DWORD *a6)
{
  int v6 = *(unsigned __int8 *)(a1 + 28748) == (float)((float)((float)(*(float *)(a4 + 64) - *(float *)(a2 + 64))
                                                         * (float)(*(float *)(a4 + 68) - *(float *)(a3 + 68)))
                                                 - (float)((float)(*(float *)(a4 + 64) - *(float *)(a3 + 64))
                                                         * (float)(*(float *)(a4 + 68) - *(float *)(a2 + 68)))) > 0.0;
  if (*(unsigned char *)(a1 + 28750) == (v6 != a5)) {
    return 1;
  }
  uint64_t result = 0;
  *a6 = v6 == a5;
  return result;
}

uint64_t glScale_Exec(uint64_t result, float a2, float a3, float a4)
{
  if (*(int *)(result + 20484) < 24)
  {
    int v4 = *(_DWORD *)(result + 20488);
    __int16 v5 = *(float32x4_t **)(result + 19976);
    float32x4_t v6 = vmulq_n_f32(v5[1], a3);
    *__int16 v5 = vmulq_n_f32(*v5, a2);
    v5[1] = v6;
    v5[2] = vmulq_n_f32(v5[2], a4);
    *(_DWORD *)(result + 1528) |= v4;
    *(_DWORD *)(result + 1540) |= v4;
    int v7 = *(_DWORD *)(result + 1544);
    if (!*(unsigned char *)(result + 12517) && (v4 & ~v7 & *(_DWORD *)(result + 2216) & 0xFFFFFC) != 0)
    {
      float v8 = a2 < 0.0 ? -a2 : a2;
      if (v8 >= 0.000005)
      {
        float v9 = -a3;
        if (a3 >= 0.0) {
          float v9 = a3;
        }
        if (v9 >= 0.000005)
        {
          float v10 = -a4;
          if (a4 >= 0.0) {
            float v10 = a4;
          }
          if (v10 >= 0.000005)
          {
            unint64_t v11 = *(float32x4_t **)(result + 19984);
            float32x4_t v12 = vmulq_n_f32(v11[1], 1.0 / a3);
            *unint64_t v11 = vmulq_n_f32(*v11, 1.0 / a2);
            v11[1] = v12;
            v11[2] = vmulq_n_f32(v11[2], 1.0 / a4);
            v4 &= 0xFF000003;
          }
        }
      }
    }
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1544) = v7 | v4;
  }
  else if (!*(_WORD *)(result + 29832))
  {
    *(_WORD *)(result + 29832) = 1282;
  }
  return result;
}

uint64_t glRotateX_Exec(uint64_t result, double a2, double a3)
{
  if (*(int *)(result + 20484) < 24)
  {
    int v3 = *(_DWORD *)(result + 20488);
    uint64_t v4 = *(void *)(result + 19976);
    float32x2_t v5 = (float32x2_t)vdupq_lane_s32(*(int32x2_t *)&a2, 0).u64[0];
    float32x4_t v6 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
    float32x4_t v8 = *(float32x4_t *)(v4 + 16);
    float32x4_t v7 = *(float32x4_t *)(v4 + 32);
    *(float32x2_t *)(v4 + 16) = vmla_f32(vmul_f32(*(float32x2_t *)v7.f32, v5), *(float32x2_t *)v6.f32, *(float32x2_t *)v8.f32);
    *(float32x2_t *)(v4 + 24) = vmla_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL), v5), *(float32x2_t *)v6.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL));
    *(float32x4_t *)(v4 + 32) = vmlaq_n_f32(vmulq_n_f32(vnegq_f32(v8), *(float *)&a2), v7, *(float *)&a3);
    *(_DWORD *)(result + 1528) |= v3;
    *(_DWORD *)(result + 1540) |= v3;
    int v9 = *(_DWORD *)(result + 1544);
    if ((v3 & ~v9 & *(_DWORD *)(result + 2216) & 0xFFFFFC) != 0)
    {
      uint64_t v10 = *(void *)(result + 19984);
      float32x4_t v12 = *(float32x4_t *)(v10 + 16);
      float32x4_t v11 = *(float32x4_t *)(v10 + 32);
      *(float32x2_t *)(v10 + 16) = vmla_f32(vmul_f32(*(float32x2_t *)v11.f32, v5), *(float32x2_t *)v6.f32, *(float32x2_t *)v12.f32);
      *(float32x2_t *)(v10 + 24) = vmla_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL), v5), *(float32x2_t *)v6.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL));
      *(float32x4_t *)(v10 + 32) = vmlaq_f32(vmulq_n_f32(vnegq_f32(v12), *(float *)&a2), v6, v11);
      v3 &= 0xFF000003;
    }
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1544) = v3 | v9;
  }
  else if (!*(_WORD *)(result + 29832))
  {
    *(_WORD *)(result + 29832) = 1282;
  }
  return result;
}

uint64_t gleCullQuad(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  int v6 = *(unsigned __int8 *)(a1 + 28748);
  int v7 = (float)((float)((float)((float)((float)(*(float *)(a2 + 64) * *(float *)(a3 + 68))
                                     - (float)(*(float *)(a3 + 64) * *(float *)(a2 + 68)))
                             + (float)((float)(*(float *)(a3 + 64) * *(float *)(a4 + 68))
                                     - (float)(*(float *)(a4 + 64) * *(float *)(a3 + 68))))
                     + (float)((float)(*(float *)(a4 + 64) * *(float *)(a5 + 68))
                             - (float)(*(float *)(a5 + 64) * *(float *)(a4 + 68))))
             + (float)((float)(*(float *)(a5 + 64) * *(float *)(a2 + 68))
                     - (float)(*(float *)(a2 + 64) * *(float *)(a5 + 68)))) > 0.0;
  if (*(unsigned char *)(a1 + 28750) == (v6 == v7)) {
    return 1;
  }
  uint64_t result = 0;
  *a6 = v6 != v7;
  return result;
}

void glRotatef_Exec(uint64_t a1, float a2, float a3, float a4, float a5)
{
  float v6 = *(float *)(a1 + 288);
  if (v6 == a4 && v6 == a5)
  {
    __float2 v12 = __sincosf_stret(flt_227DC1568[v6 > a3] * a2);
    *(float *)&double v11 = v12.__cosval;
    *(float *)&double v10 = v12.__sinval;
    glRotateX_Exec(a1, v10, v11);
  }
  else if (v6 == a3 && v6 == a5)
  {
    __float2 v14 = __sincosf_stret(flt_227DC1568[v6 > a4] * a2);
    *(float *)&double v13 = v14.__cosval;
    glRotateY_Exec(a1, v14.__sinval, v13);
  }
  else if (v6 == a3 && v6 == a4)
  {
    __float2 v17 = __sincosf_stret(flt_227DC1568[v6 > a5] * a2);
    *(float *)&double v16 = v17.__cosval;
    *(float *)&double v15 = v17.__sinval;
    glRotateZ_Exec(a1, v15, v16);
  }
  else
  {
    glRotateXYZ_Exec(a1, a2, a3, a4, a5);
  }
}

uint64_t glRotateY_Exec(uint64_t result, float a2, double a3)
{
  if (*(int *)(result + 20484) < 24)
  {
    int v3 = *(_DWORD *)(result + 20488);
    uint64_t v4 = *(float32x4_t **)(result + 19976);
    float32x4_t v5 = *v4;
    float32x4_t v6 = v4[2];
    *uint64_t v4 = vmlaq_n_f32(vmulq_n_f32(vnegq_f32(v6), a2), *v4, *(float *)&a3);
    v4[2] = vmlaq_n_f32(vmulq_n_f32(v5, a2), v6, *(float *)&a3);
    *(_DWORD *)(result + 1528) |= v3;
    *(_DWORD *)(result + 1540) |= v3;
    int v7 = *(_DWORD *)(result + 1544);
    if ((v3 & ~v7 & *(_DWORD *)(result + 2216) & 0xFFFFFC) != 0)
    {
      float32x4_t v8 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
      int v9 = *(float32x4_t **)(result + 19984);
      float32x4_t v10 = *v9;
      float32x4_t v11 = v9[2];
      *int v9 = vmlaq_f32(vmulq_n_f32(vnegq_f32(v11), a2), v8, *v9);
      v9[2] = vmlaq_f32(vmulq_n_f32(v10, a2), v8, v11);
      v3 &= 0xFF000003;
    }
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1544) = v3 | v7;
  }
  else if (!*(_WORD *)(result + 29832))
  {
    *(_WORD *)(result + 29832) = 1282;
  }
  return result;
}

float64x2_t gleGetMatrixd(float32x2_t *a1, float64x2_t *a2)
{
  float64x2_t v2 = vcvtq_f64_f32(a1[1]);
  *a2 = vcvtq_f64_f32(*a1);
  a2[1] = v2;
  float64x2_t v3 = vcvtq_f64_f32(a1[3]);
  a2[2] = vcvtq_f64_f32(a1[2]);
  a2[3] = v3;
  float64x2_t v4 = vcvtq_f64_f32(a1[5]);
  a2[4] = vcvtq_f64_f32(a1[4]);
  a2[5] = v4;
  float64x2_t result = vcvtq_f64_f32(a1[6]);
  float64x2_t v6 = vcvtq_f64_f32(a1[7]);
  a2[6] = result;
  a2[7] = v6;
  return result;
}

unint64_t glReadPixels_Exec(unint64_t result, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, int a7, uint64_t a8)
{
  unsigned int v71 = a3;
  unsigned int v72 = a2;
  unsigned int v69 = a5;
  unsigned int v70 = a4;
  float32x4_t v8 = (__int16 *)(result + 29832);
  if (((a5 | a4) & 0x80000000) != 0)
  {
    if (*v8) {
      return result;
    }
    __int16 v65 = 1281;
    goto LABEL_115;
  }
  uint64_t v13 = result;
  unint64_t v14 = result + 32493;
  float64x2_t result = glePixelStorageFromFormatType(result, a6, a7);
  unint64_t v18 = result;
  if ((result & 0x2000000000000000) != 0 || result && (*(_WORD *)v14 & 0x2000) != 0)
  {
    if (a6 != 35359 && a6 != 34233 || (a4 & 1) == 0)
    {
      unint64_t v19 = (unsigned int *)(v13 + 18448);
      if ((*(unsigned char *)(v13 + 1540) & 4) != 0)
      {
        int MatrixIdentifier = gleGenerateMatrixIdentifier(v13, v13 + 9488, v15, v16, v17);
        *(_DWORD *)(v13 + 19152) = *(_DWORD *)(v13 + 19152) & 0xFFFFFEFF | ((MatrixIdentifier != -1074791426) << 8);
        *(_DWORD *)(v13 + 29732) = MatrixIdentifier;
      }
      if ((*(unsigned char *)(v13 + 29803) & 0x8A) != 0)
      {
        float64x2_t result = gleUpdateReadFramebufferState(v13);
        if (result)
        {
          if (result != 16711680 && !*v8) {
            *float32x4_t v8 = result;
          }
          return result;
        }
      }
      float64x2_t result = gleCheckReadPixelsNeeds(v13, a6, 0, (v18 >> 31) & 1);
      if (!result) {
        return result;
      }
      uint64_t v68 = 0;
      if (*(unsigned char *)(v14 + 8) == 4 && a7 == 5131) {
        int v22 = 36193;
      }
      else {
        int v22 = a7;
      }
      if ((*(_WORD *)v14 & 0x2000) != 0) {
        goto LABEL_58;
      }
      uint64_t v23 = *(void *)(v13 + 28968);
      uint64_t v24 = v23 + 40 + 88 * *(unsigned __int8 *)(v14 + 6);
      int v25 = *(unsigned __int16 *)(v24 + 604);
      int v26 = *(unsigned __int16 *)(v24 + 606);
      BOOL v29 = a6 == 6408 && v25 == 32993 && v26 == 33638;
      BOOL v30 = v22 == 32820;
      if (v30 && v29) {
        int v31 = 6408;
      }
      else {
        int v31 = v25;
      }
      if (v30 && v29) {
        __int16 v32 = -32716;
      }
      else {
        __int16 v32 = v26;
      }
      if ((*(unsigned char *)(*(void *)(v13 + 19296) + 344) & 4) != 0)
      {
        int v25 = v31;
        LOWORD(v26) = v32;
      }
      if (v25 == a6 && v22 == (unsigned __int16)v26) {
        goto LABEL_58;
      }
      unsigned __int16 v34 = *(_WORD *)(*(void *)(v23 + 40 + 16 * (*(unsigned __int16 *)(v23 + 472) - 36064)) + 1000);
      int v35 = v34;
      unsigned int v36 = v34 - 34836;
      unsigned int v37 = v34 - 33325;
      int v38 = v34 & 0xFFFE;
      if (v36 < 0xC || v37 < 4 || v38 == 36012 || v35 == 35901 || v35 == 35898)
      {
        if (a6 == 6408 && v22 == 5126) {
          goto LABEL_58;
        }
        if (a6 != 6407 || (*(unsigned char *)(*(void *)(v13 + 29480) + 578) & 1) == 0) {
          goto LABEL_113;
        }
        if (v22 == 35899 && v35 == 35898) {
          goto LABEL_58;
        }
        if (v22 != 35902) {
          goto LABEL_113;
        }
        int v59 = 35901;
        goto LABEL_86;
      }
      if ((v35 - 36208) < 0x12) {
        goto LABEL_89;
      }
      if ((v35 - 33330) > 0xA)
      {
        if (v35 != 36975)
        {
          if ((v35 - 36226) < 0x12) {
            goto LABEL_110;
          }
          int v63 = v35 & 1;
          goto LABEL_108;
        }
      }
      else if (v35)
      {
        int v63 = 1;
LABEL_108:
        if ((v35 - 33340) >= 0xFFFFFFF5 && v63)
        {
LABEL_110:
          if (a6 == 36249)
          {
            int v60 = 5124;
LABEL_91:
            if (v22 != v60) {
              goto LABEL_113;
            }
LABEL_58:
            unsigned int v67 = v22;
            unsigned int v43 = gleStandardizeIntegerFormat(a6);
            uint64_t v44 = *(void *)(v13 + 28968);
            unsigned int v66 = v43;
            if (v44)
            {
              int v45 = *(unsigned __int16 *)(v44 + 474);
              int v46 = *(unsigned __int16 *)(v44 + 476);
            }
            else
            {
              int v45 = *(_DWORD *)(v13 + 29632);
              int v46 = *(_DWORD *)(v13 + 29636);
            }
            uint64_t v47 = (BYTE4(v18) & 0x1Fu) + 1;
            int v48 = v47 + v47 * ((v18 >> 37) & 3);
            int v49 = *(_DWORD *)(v13 + 18452);
            if (!v49)
            {
              unsigned int v50 = *v19;
              if (!*v19) {
                unsigned int v50 = a4;
              }
              int v49 = (*(_DWORD *)(v13 + 18476) + v50 * v48 - 1) & -*(_DWORD *)(v13 + 18476);
            }
            float64x2_t result = gleClipReadableRange(v13, v45, v46, (int *)&v72, (int *)&v71, (int *)&v70, (int *)&v69, (_DWORD *)&v68 + 1, &v68);
            if (result) {
              a8 += HIDWORD(v68) * v48 + (int)v68 * v49;
            }
            int v51 = v70;
            if ((int)v70 < 1) {
              return result;
            }
            int v52 = v69;
            if ((int)v69 < 1) {
              return result;
            }
            int v53 = *(_DWORD *)(v13 + 18452);
            *(_DWORD *)(v13 + 18452) = v49;
            uint64_t v54 = *(void *)(v13 + 19328);
            if (v54)
            {
              float64x2_t result = gleOffsetLimitStorage((int *)(v13 + 18448), v51, v52, v18, a8);
              if (result > *(void *)(v54 + 152) || a8 % v47 || *(unsigned char *)(v54 + 292))
              {
                if (!*v8) {
                  *float32x4_t v8 = 1282;
                }
                goto LABEL_100;
              }
              if (*(unsigned char *)(v54 + 164))
              {
LABEL_100:
                *(_DWORD *)(v13 + 18452) = v53;
                return result;
              }
              uint64_t v55 = v54 + 40;
              uint64_t v56 = *(void *)(v54 + 136) + a8;
              if (*(unsigned char *)(v54 + 165))
              {
                (*(void (**)(void, void))(*(void *)(v13 + 29448) + 1024))(*(void *)(v13 + 29016), *(void *)(v55 + 8 * *(unsigned __int8 *)(v14 + 7)));
                if (!*(void *)(v54 + 192)) {
                  gfxWaitBufferOnDevices();
                }
              }
              float64x2_t result = (*(uint64_t (**)(void, void, void, void, void, void, void, uint64_t, _DWORD, void))(*(void *)(v13 + 29496) + 224))(*(void *)(v13 + 29464), v72, v71, v70, v69, v66, v67, v56, 0, *(void *)(v55 + 8 * *(unsigned __int8 *)(v14 + 7)));
              if (result)
              {
                uint64_t v57 = *(void *)(v13 + 29472);
                *(unsigned char *)(v54 + 167) = 0;
                *(void *)(v54 + 192) = v57;
                uint64_t v58 = *(void *)(v13 + 26384);
                if (v58) {
                  *(unsigned char *)(v58 + 1216) = 0;
                }
                goto LABEL_100;
              }
              if (*(void *)(v54 + 192)) {
                gleSynchronizeBufferOnCurrentDevices(v13, v54 + 40);
              }
              *(unsigned char *)(v54 + 167) = 1;
              uint64_t v61 = *(unsigned __int8 *)(v14 + 3);
              if (*(unsigned char *)(v14 + 3))
              {
                uint64_t v62 = (_DWORD *)(v54 + 304);
                do
                {
                  *v62 |= 4u;
                  v62 += 2;
                  --v61;
                }
                while (v61);
              }
              gleDirtyBufferObjectCurrentBindPoints(v13, v54 + 40);
            }
            float64x2_t result = (*(uint64_t (**)(void, void, void))(*(void *)(v13 + 29496) + 224))(*(void *)(v13 + 29464), v72, v71);
            goto LABEL_100;
          }
LABEL_113:
          if (*v8) {
            return result;
          }
          __int16 v65 = 1280;
          goto LABEL_115;
        }
        int v64 = v22;
        float64x2_t result = gleInternalFormatIsSigned(v35);
        if (result) {
          goto LABEL_113;
        }
        int v22 = v64;
        if (a6 == 6408 && v64 == 5121) {
          goto LABEL_58;
        }
        if (a6 != 6408 || v64 != 33640) {
          goto LABEL_113;
        }
        int v59 = 32857;
LABEL_86:
        if (v35 == v59) {
          goto LABEL_58;
        }
        goto LABEL_113;
      }
LABEL_89:
      if (a6 == 36249)
      {
        int v60 = 5125;
        goto LABEL_91;
      }
      goto LABEL_113;
    }
    if (*v8) {
      return result;
    }
    __int16 v65 = 1282;
LABEL_115:
    *float32x4_t v8 = v65;
    return result;
  }
  if (!*v8)
  {
    if (result) {
      __int16 v65 = 1282;
    }
    else {
      __int16 v65 = 1280;
    }
    goto LABEL_115;
  }
  return result;
}

void *gleLightMaterialRGBAChange_FB_AD(uint64_t a1, void *a2)
{
  uint64_t v4 = 0;
  float32x4_t v5 = (_DWORD *)(a1 + 28652);
  char v6 = 1;
  do
  {
    char v7 = v6;
    float64x2_t result = glePushMaterial(a1, v4);
    *float64x2_t result = *a2;
    result[1] = a2[1];
    result[2] = *a2;
    result[3] = a2[1];
    *((_WORD *)result + 248) |= 0xC0Cu;
    uint64_t v9 = *(void *)(a1 + 19248);
    if (v9)
    {
      unint64_t v10 = *(unsigned __int16 *)(v9 + 12 * v4 + 2816);
      if (v10 <= 0x3FF)
      {
        *(_DWORD *)(a1 + ((v10 >> 3) & 0x1FFC) + 1552) |= 1 << v10;
        *float32x4_t v5 = 0;
        *(_DWORD *)(a1 + 1532) |= 0x800000u;
      }
    }
    uint64_t v11 = *(void *)(a1 + 19272);
    if (v11)
    {
      unint64_t v12 = *(unsigned __int16 *)(v11 + 12 * v4 + 2816);
      if (v12 <= 0x3FF)
      {
        *(_DWORD *)(a1 + ((v12 >> 3) & 0x1FFC) + 1936) |= 1 << v12;
        *float32x4_t v5 = 0;
        *(_DWORD *)(a1 + 1532) |= 0x4000000u;
      }
    }
    uint64_t v13 = *(void *)(a1 + 19280);
    if (v13)
    {
      unint64_t v14 = *(unsigned __int16 *)(v13 + 12 * v4 + 2816);
      if (v14 <= 0x3FF)
      {
        *(_DWORD *)(a1 + ((v14 >> 3) & 0x1FFC) + 2064) |= 1 << v14;
        *float32x4_t v5 = 0;
        *(_DWORD *)(a1 + 1532) |= 0x8000000u;
      }
    }
    if (v9)
    {
      unint64_t v15 = *(unsigned __int16 *)(v9 + 12 * v4 + 2818);
      if (v15 <= 0x3FF)
      {
        *(_DWORD *)(a1 + ((v15 >> 3) & 0x1FFC) + 1552) |= 1 << v15;
        *float32x4_t v5 = 0;
        *(_DWORD *)(a1 + 1532) |= 0x800000u;
      }
    }
    if (v11)
    {
      unint64_t v16 = *(unsigned __int16 *)(v11 + 12 * v4 + 2818);
      if (v16 <= 0x3FF)
      {
        *(_DWORD *)(a1 + ((v16 >> 3) & 0x1FFC) + 1936) |= 1 << v16;
        *float32x4_t v5 = 0;
        *(_DWORD *)(a1 + 1532) |= 0x4000000u;
      }
    }
    if (v13)
    {
      unint64_t v17 = *(unsigned __int16 *)(v13 + 12 * v4 + 2818);
      if (v17 <= 0x3FF)
      {
        *(_DWORD *)(a1 + ((v17 >> 3) & 0x1FFC) + 2064) |= 1 << v17;
        *float32x4_t v5 = 0;
        *(_DWORD *)(a1 + 1532) |= 0x8000000u;
      }
    }
    char v6 = 0;
    uint64_t v4 = 1;
  }
  while ((v7 & 1) != 0);
  return result;
}

void *gleLightMaterialRGBAChange_FB_E(uint64_t a1, void *a2)
{
  uint64_t v4 = 0;
  float32x4_t v5 = (_DWORD *)(a1 + 28652);
  char v6 = 1;
  do
  {
    char v7 = v6;
    float64x2_t result = glePushMaterial(a1, v4);
    result[6] = *a2;
    result[7] = a2[1];
    *((_WORD *)result + 248) |= 0x202u;
    uint64_t v9 = *(void *)(a1 + 19248);
    if (v9)
    {
      unint64_t v10 = *(unsigned __int16 *)(v9 + 12 * v4 + 2822);
      if (v10 <= 0x3FF)
      {
        *(_DWORD *)(a1 + ((v10 >> 3) & 0x1FFC) + 1552) |= 1 << v10;
        *float32x4_t v5 = 0;
        *(_DWORD *)(a1 + 1532) |= 0x800000u;
      }
    }
    uint64_t v11 = *(void *)(a1 + 19272);
    if (v11)
    {
      unint64_t v12 = *(unsigned __int16 *)(v11 + 12 * v4 + 2822);
      if (v12 <= 0x3FF)
      {
        *(_DWORD *)(a1 + ((v12 >> 3) & 0x1FFC) + 1936) |= 1 << v12;
        *float32x4_t v5 = 0;
        *(_DWORD *)(a1 + 1532) |= 0x4000000u;
      }
    }
    uint64_t v13 = *(void *)(a1 + 19280);
    if (v13)
    {
      unint64_t v14 = *(unsigned __int16 *)(v13 + 12 * v4 + 2822);
      if (v14 <= 0x3FF)
      {
        *(_DWORD *)(a1 + ((v14 >> 3) & 0x1FFC) + 2064) |= 1 << v14;
        *float32x4_t v5 = 0;
        *(_DWORD *)(a1 + 1532) |= 0x8000000u;
      }
    }
    char v6 = 0;
    uint64_t v4 = 1;
  }
  while ((v7 & 1) != 0);
  return result;
}

void *gleLightMaterialRGBAChange_FB_S(uint64_t a1, void *a2)
{
  uint64_t v4 = 0;
  float32x4_t v5 = (_DWORD *)(a1 + 28652);
  char v6 = 1;
  do
  {
    char v7 = v6;
    float64x2_t result = glePushMaterial(a1, v4);
    result[4] = *a2;
    result[5] = a2[1];
    *((_WORD *)result + 248) |= 0x1010u;
    uint64_t v9 = *(void *)(a1 + 19248);
    if (v9)
    {
      unint64_t v10 = *(unsigned __int16 *)(v9 + 12 * v4 + 2820);
      if (v10 <= 0x3FF)
      {
        *(_DWORD *)(a1 + ((v10 >> 3) & 0x1FFC) + 1552) |= 1 << v10;
        *float32x4_t v5 = 0;
        *(_DWORD *)(a1 + 1532) |= 0x800000u;
      }
    }
    uint64_t v11 = *(void *)(a1 + 19272);
    if (v11)
    {
      unint64_t v12 = *(unsigned __int16 *)(v11 + 12 * v4 + 2820);
      if (v12 <= 0x3FF)
      {
        *(_DWORD *)(a1 + ((v12 >> 3) & 0x1FFC) + 1936) |= 1 << v12;
        *float32x4_t v5 = 0;
        *(_DWORD *)(a1 + 1532) |= 0x4000000u;
      }
    }
    uint64_t v13 = *(void *)(a1 + 19280);
    if (v13)
    {
      unint64_t v14 = *(unsigned __int16 *)(v13 + 12 * v4 + 2820);
      if (v14 <= 0x3FF)
      {
        *(_DWORD *)(a1 + ((v14 >> 3) & 0x1FFC) + 2064) |= 1 << v14;
        *float32x4_t v5 = 0;
        *(_DWORD *)(a1 + 1532) |= 0x8000000u;
      }
    }
    char v6 = 0;
    uint64_t v4 = 1;
  }
  while ((v7 & 1) != 0);
  return result;
}

float *gleLightMaterialShineChange_FB(uint64_t a1, float a2)
{
  uint64_t v4 = 0;
  float32x4_t v5 = (_DWORD *)(a1 + 28652);
  char v6 = 1;
  do
  {
    char v7 = v6;
    float64x2_t result = (float *)glePushMaterial(a1, v4);
    result[16] = a2;
    *((_WORD *)result + 248) |= 0x2020u;
    uint64_t v9 = *(void *)(a1 + 19248);
    if (v9)
    {
      unint64_t v10 = *(unsigned __int16 *)(v9 + 12 * v4 + 2824);
      if (v10 <= 0x3FF)
      {
        *(_DWORD *)(a1 + ((v10 >> 3) & 0x1FFC) + 1552) |= 1 << v10;
        *float32x4_t v5 = 0;
        *(_DWORD *)(a1 + 1532) |= 0x800000u;
      }
    }
    uint64_t v11 = *(void *)(a1 + 19272);
    if (v11)
    {
      unint64_t v12 = *(unsigned __int16 *)(v11 + 12 * v4 + 2824);
      if (v12 <= 0x3FF)
      {
        *(_DWORD *)(a1 + ((v12 >> 3) & 0x1FFC) + 1936) |= 1 << v12;
        *float32x4_t v5 = 0;
        *(_DWORD *)(a1 + 1532) |= 0x4000000u;
      }
    }
    uint64_t v13 = *(void *)(a1 + 19280);
    if (v13)
    {
      unint64_t v14 = *(unsigned __int16 *)(v13 + 12 * v4 + 2824);
      if (v14 <= 0x3FF)
      {
        *(_DWORD *)(a1 + ((v14 >> 3) & 0x1FFC) + 2064) |= 1 << v14;
        *float32x4_t v5 = 0;
        *(_DWORD *)(a1 + 1532) |= 0x8000000u;
      }
    }
    char v6 = 0;
    uint64_t v4 = 1;
  }
  while ((v7 & 1) != 0);
  return result;
}

uint64_t gleCullPolygonPtrStack(uint64_t a1, uint64_t *a2, int a3, _DWORD *a4, float *a5)
{
  uint64_t v5 = *a2;
  float v7 = *(float *)(*a2 + 64);
  float v6 = *(float *)(*a2 + 68);
  float v8 = 0.0;
  float v9 = v7;
  float v10 = v6;
  if (a3 >= 2)
  {
    uint64_t v11 = a2 + 1;
    uint64_t v12 = a3 - 1;
    float v13 = *(float *)(*a2 + 68);
    float v14 = *(float *)(*a2 + 64);
    do
    {
      uint64_t v15 = *v11++;
      float v9 = *(float *)(v15 + 64);
      float v10 = *(float *)(v15 + 68);
      float v8 = v8 + (float)((float)(v14 * v10) - (float)(v9 * v13));
      float v13 = v10;
      float v14 = v9;
      --v12;
    }
    while (v12);
  }
  float v16 = v8 + (float)((float)(v9 * v6) - (float)(v7 * v10));
  int v17 = *(unsigned __int8 *)(a1 + 28748);
  int v18 = v16 > 0.0;
  if (*(unsigned char *)(a1 + 28750) == (v17 == v18)) {
    return 1;
  }
  *a4 = v17 != v18;
  if (!a5) {
    return 0;
  }
  uint64_t v20 = (unsigned __int16 *)(a1 + 15526);
  if (v17 == v18) {
    uint64_t v20 = (unsigned __int16 *)(a1 + 15524);
  }
  int v21 = *v20;
  float v22 = 0.0;
  if (v21 != 6913)
  {
    if (v21 != 6912 || !*(unsigned char *)(a1 + 15535)) {
      goto LABEL_26;
    }
LABEL_15:
    if (v16 == 0.0)
    {
      float v36 = 0.0;
      float v37 = 0.0;
    }
    else
    {
      float v23 = -v7;
      float v24 = *(float *)(v5 + 72);
      float v25 = 0.0;
      float v26 = 1.0 / v16;
      if (a3 < 2)
      {
        float v34 = v7;
        float v33 = v6;
        float v29 = 0.0;
        float v35 = *(float *)(v5 + 72);
      }
      else
      {
        float v27 = (float **)(a2 + 1);
        uint64_t v28 = a3 - 1;
        float v29 = 0.0;
        float v30 = v24;
        float v31 = v6;
        do
        {
          __int16 v32 = *v27++;
          float v34 = v32[16];
          float v33 = v32[17];
          float v35 = v32[18];
          float v25 = v25 + (float)((float)(v7 * v35) - (float)(v34 * v30));
          float v29 = v29 + (float)((float)(v31 * v35) - (float)(v33 * v30));
          float v30 = v35;
          float v31 = v33;
          float v7 = v34;
          --v28;
        }
        while (v28);
      }
      float v38 = v26 * (float)(v25 + (float)((float)(v35 * v23) + (float)(v34 * v24)));
      float v39 = v26 * (float)(v29 + (float)((float)(v33 * v24) - (float)(v6 * v35)));
      float v36 = fabsf(v38);
      float v37 = fabsf(v39);
    }
    if (v36 <= v37) {
      float v36 = v37;
    }
    float v22 = (float)(*(float *)(a1 + 15520) * *(float *)(*(void *)(a1 + 29032) + 140))
        + (float)((float)(*(float *)(a1 + 15516) * v36) * *(float *)(*(void *)(a1 + 29032) + 136));
    goto LABEL_26;
  }
  if (*(unsigned char *)(a1 + 15536)) {
    goto LABEL_15;
  }
LABEL_26:
  uint64_t result = 0;
  *a5 = v22;
  return result;
}

uint64_t glCompressedTexImage2D_Exec(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, unsigned int a6, int a7, int a8, uint64_t a9)
{
  LODWORD(v12) = a5;
  unsigned int v13 = a4;
  uint64_t v16 = a1;
  uint64_t v69 = a1 + 28652;
  uint64_t v17 = a1 + 18518;
  uint64_t result = gleSRGBToFormat(a4);
  uint64_t v68 = a9;
  if (!a9 && *(unsigned char *)v17)
  {
    if (!*(_WORD *)(v69 + 1180))
    {
      __int16 v26 = 1281;
LABEL_17:
      *(_WORD *)(v69 + 1180) = v26;
      return result;
    }
    return result;
  }
  unint64_t v76 = 0;
  uint64_t v67 = v16 + 32493;
  unsigned int v19 = *(_WORD *)(v16 + 32493) & 0x10;
  BOOL v20 = v13 == 33776;
  BOOL v21 = (v20 & (v19 >> 4)) == 0;
  if ((v20 & (v19 >> 4)) != 0) {
    int v22 = 33777;
  }
  else {
    int v22 = result;
  }
  unsigned int v74 = v22;
  if (v21) {
    unsigned int v23 = v13;
  }
  else {
    unsigned int v23 = 33777;
  }
  uint64_t v70 = a3;
  unsigned int v65 = v23;
  int v66 = a6;
  uint64_t result = gleCheckCompressedTexImage2DArgs(v16, a2, a3, v23, v12, a6, a7, a8, &v76);
  if (!result) {
    return result;
  }
  uint64_t v24 = result;
  if (*(unsigned char *)(result + 770)) {
    return result;
  }
  uint64_t v25 = *(void *)(v16 + 19336);
  if (v25)
  {
    uint64_t result = gleHandleUnpackBufferInEngineNoSync(v16, *(void *)(v16 + 19336), a9 + a8, 1, a9);
    uint64_t v68 = result;
    if (!result) {
      return result;
    }
  }
  if (*(unsigned char *)(v16 + 32503)) {
    uint64_t result = mach_absolute_time();
  }
  else {
    uint64_t result = 0;
  }
  __int16 v27 = *(_WORD *)(v24 + 768);
  if ((v27 & 0x1C00) == 0x1000) {
    goto LABEL_25;
  }
  if ((*(_WORD *)(v24 + 768) & 0x1C00) == 0)
  {
    *(_WORD *)(v24 + 768) = v27 | 0x1000;
    goto LABEL_25;
  }
  if ((*(_WORD *)(v24 + 768) & 0xC00) == 0)
  {
LABEL_25:
    uint64_t v61 = result;
    if (a6) {
      uint64_t v12 = v12;
    }
    else {
      uint64_t v12 = 0;
    }
    if ((a2 - 34069) >= 6) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = (a2 - 34069);
    }
    signed int v29 = v65 - 35728;
    if (v65 - 35728 <= 9)
    {
      unsigned int v30 = dword_227DC15B0[v29];
      unsigned int v72 = dword_227DC15D8[v29];
      uint64_t v75 = v16;
      if (v25 && *(void *)(v25 + 192))
      {
        uint64_t v31 = v16;
        uint64_t v32 = v28;
        gleSynchronizeBufferOnCurrentDevicesForRead(v31, v25 + 40);
        uint64_t v28 = v32;
        uint64_t v16 = v75;
      }
      unsigned int v33 = 0;
      int v34 = 0;
      unsigned int v71 = -(int)v70;
      uint64_t v35 = v24 + 2 * v28;
      uint64_t v62 = (_WORD *)(v35 + 996);
      int v63 = (_WORD *)(v35 + 984);
      int v64 = v12;
      unsigned int v36 = v12;
      unsigned int v37 = a6;
      do
      {
        uint64_t v38 = v33;
        uint64_t v39 = v24 + 480 * v28 + 32 * v33 + 1032;
        LOWORD(v59) = 256;
        uint64_t v40 = v16;
        uint64_t v41 = v28;
        int v42 = gleEvaluateTextureImageChange(v40, v24, v39, v28, v33, v36, v37, 1, 0, v30, v30, v72, v59, v68);
        if (v36 && v68 && (*(_WORD *)(v24 + 768) & 0x100) == 0)
        {
          if (gfxAllocateTextureLevel())
          {
            gleCompressedPalettedTextureImagePut(v75, v24, v39, v38, v64, v66, v65, v68);
            uint64_t v28 = v41;
            uint64_t v43 = v24 + 480 * v41 + 32 * v38;
            *(_DWORD *)(v24 + 968) = *(_DWORD *)(v43 + 1048);
            *(unsigned char *)(v43 + 1043) |= 0x10u;
            *v62 |= *v63 & (unsigned __int16)(1 << v38);
            uint64_t v44 = v24 + 24 * *(unsigned __int8 *)(v67 + 6);
            *(unsigned char *)(v44 + 116) |= 4u;
            *(_WORD *)(v44 + 2 * v41 + 104) |= 1 << v38;
          }
          else
          {
            uint64_t v28 = v41;
            if (!*(_WORD *)(v69 + 1180)) {
              *(_WORD *)(v69 + 1180) = 1285;
            }
          }
        }
        else
        {
          *(_DWORD *)(v24 + 968) = 65538;
          uint64_t v28 = v41;
        }
        v34 |= v42;
        v36 >>= v36 > 1;
        v37 >>= v37 > 1;
        unsigned int v33 = v38 + 1;
        uint64_t v16 = v75;
      }
      while ((int)v38 + 1 <= v71);
      BOOL v55 = v34 < 0;
      goto LABEL_78;
    }
    if (a6) {
      int v45 = a7;
    }
    else {
      int v45 = 0;
    }
    uint64_t v46 = v24 + 480 * v28 + 32 * (int)v70 + 1032;
    LOWORD(v59) = 256;
    uint64_t v47 = v28;
    int v48 = gleEvaluateTextureImageChange(v16, v24, v46, v28, v70, v12, a6, 1, v45, v65, v74, 0, v59, v68);
    if (!v12) {
      goto LABEL_75;
    }
    uint64_t v49 = v47;
    if (v68
      && (*(_WORD *)(v24 + 768) & 0x100) == 0
      && *(unsigned char *)(*(void *)(v16 + 29032) + 174)
      && *(unsigned __int8 *)(v24 + 976) <= (int)v70
      && *(unsigned __int8 *)(v24 + 978) >= (int)v70
      && ((*(unsigned __int16 *)(v24 + 2 * v47 + 984) >> v70) & 1) != 0)
    {
      uint64_t v50 = *(void *)(v16 + 8 * *(unsigned __int16 *)(v17 + 5250) + 23936);
      if (v50) {
        int v51 = (unsigned char *)(v50 + 198);
      }
      else {
        int v51 = (unsigned char *)(v24 + 926);
      }
      BOOL v52 = (*v51 & 1) == 0;
      unsigned int v53 = v74;
      *(_DWORD *)(v24 + 968) = (unsigned __int16)v74;
      if (v25)
      {
        BOOL v73 = v52;
        uint64_t result = (*(uint64_t (**)(void, void, uint64_t, uint64_t, void, void, void, uint64_t, uint64_t, void, uint64_t, _DWORD, void, BOOL))(*(void *)(v16 + 29448) + 368))(*(void *)(v16 + 29016), *(void *)(v24 + 8 * *(unsigned __int8 *)(v16 + 32499)), v47, v70, 0, 0, 0, v12, a6 | 0x100000000, v74, v68, 0, *(void *)(v25 + 40 + 8 * *(unsigned __int8 *)(v16 + 32499)), v52);
        uint64_t v49 = v47;
        if (result)
        {
LABEL_64:
          *(void *)(v24 + 536) = *(void *)(v16 + 29024);
          uint64_t v54 = v24 + 480 * v49 + 32 * (int)v70;
          *(unsigned char *)(v54 + 1043) |= 0x40u;
LABEL_76:
          if ((v48 & 0xC0000001) == 0)
          {
            if (result == 1)
            {
LABEL_83:
              if (*(unsigned char *)(v67 + 10))
              {
                uint64_t result = mach_absolute_time();
                *(void *)(v16 + 19168) += result - v61;
              }
              return result;
            }
LABEL_82:
            uint64_t result = gleDirtyTextureObjectCurrentBindPointsNoFBO(v16, v24);
            goto LABEL_83;
          }
          BOOL v55 = v48 < 0;
LABEL_78:
          if (v55) {
            int v58 = 134356992;
          }
          else {
            int v58 = 139264;
          }
          *(_DWORD *)uint64_t v69 = 0;
          *(_DWORD *)(v16 + 1548) |= v58;
          goto LABEL_82;
        }
        unsigned int v53 = v74;
        BOOL v52 = v73;
        if (*(void *)(v25 + 192))
        {
          gleSynchronizeBufferOnCurrentDevicesForRead(v16, v25 + 40);
          BOOL v52 = v73;
          unsigned int v53 = v74;
          uint64_t v49 = v47;
        }
      }
      uint64_t result = (*(uint64_t (**)(void, void, uint64_t, uint64_t, void, void, void, uint64_t, uint64_t, void, uint64_t, _DWORD, void, BOOL))(*(void *)(v16 + 29448) + 368))(*(void *)(v16 + 29016), *(void *)(v24 + 8 * *(unsigned __int8 *)(v16 + 32499)), v49, v70, 0, 0, 0, v12, a6 | 0x100000000, v53, v68, 0, 0, v52);
      LODWORD(v49) = v47;
      if (result) {
        goto LABEL_64;
      }
    }
    else
    {
      if (v25 && *(void *)(v25 + 192))
      {
        gleSynchronizeBufferOnCurrentDevicesForRead(v16, v25 + 40);
        LODWORD(v49) = v47;
      }
      if (!v68) {
        goto LABEL_73;
      }
    }
    if ((*(_WORD *)(v24 + 768) & 0x100) == 0)
    {
      uint64_t v56 = v24 + 480 * v49 + 32 * (int)v70;
      if ((*(unsigned char *)(v56 + 1043) & 1) != 0 || gfxAllocateTextureLevel())
      {
        LOBYTE(v60) = 0;
        gleTextureImagePut((_DWORD *)v16, v24, v46, 0, 0, 0, v12, a6, 1, v76, v60, 0, v68);
        uint64_t result = 0;
        *(unsigned char *)(v56 + 1043) |= 0x10u;
        *(_DWORD *)(v24 + 968) = *(_DWORD *)(v24 + 480 * v47 + 32 * (int)v70 + 1048);
        *(_WORD *)(v24 + 2 * v47 + 996) |= *(_WORD *)(v24 + 2 * v47 + 984) & (unsigned __int16)(1 << v70);
        uint64_t v57 = v24 + 24 * *(unsigned __int8 *)(v16 + 32499);
        *(unsigned char *)(v57 + 116) |= 4u;
        *(_WORD *)(v57 + 2 * v47 + 104) |= 1 << v70;
        goto LABEL_76;
      }
      if (!*(_WORD *)(v69 + 1180))
      {
        uint64_t result = 0;
        *(_WORD *)(v69 + 1180) = 1285;
        goto LABEL_76;
      }
LABEL_75:
      uint64_t result = 0;
      goto LABEL_76;
    }
LABEL_73:
    uint64_t result = 0;
    *(_DWORD *)(v24 + 968) = 65538;
    goto LABEL_76;
  }
  if (!*(_WORD *)(v69 + 1180))
  {
    __int16 v26 = 1282;
    goto LABEL_17;
  }
  return result;
}

uint64_t gleCheckCompressedTexImage2DArgs(uint64_t a1, int a2, int a3, unsigned int a4, int a5, int a6, int a7, int a8, unint64_t *a9)
{
  uint64_t v16 = a1 + 29832;
  uint64_t v17 = gleLookUpTexture2D(a1, a2);
  unint64_t v18 = glePixelStorageFromCompressedFormat(a1, a4);
  *a9 = v18;
  if (v17)
  {
    if (!*(unsigned char *)(v17 + 559))
    {
      int v20 = a5 - 2 * a7;
      unsigned int v21 = a6 - 2 * a7;
      switch(*(_WORD *)(v17 + 768) & 0xF)
      {
        case 0:
          if (a5 == a6 && v20 <= *(unsigned __int16 *)(*(void *)(a1 + 29032) + 168)) {
            goto LABEL_8;
          }
          goto LABEL_27;
        case 2:
        case 6:
          goto LABEL_4;
        case 3:
LABEL_8:
          if ((v20 & 0x80000000) == 0)
          {
            if ((v20 & (v20 - 1)) == 0
              || (int v24 = *(unsigned __int8 *)(v16 + 2669), v24 == 4)
              || !a3 && (v24 == 3 || (*(unsigned char *)(*(void *)(a1 + 29032) + 578) & 0x10) != 0))
            {
              uint64_t v25 = *(void *)(a1 + 29032);
              unsigned int v26 = *(unsigned __int16 *)(v25 + 160);
              if (v20 <= v26 && (v21 & 0x80000000) == 0)
              {
                if ((v21 & (v21 - 1)) == 0
                  || (int v27 = *(unsigned __int8 *)(v16 + 2669), v27 == 4)
                  || !a3 && (v27 == 3 || (*(unsigned char *)(v25 + 578) & 0x10) != 0))
                {
                  if (v21 <= v26) {
                    goto LABEL_16;
                  }
                }
              }
            }
          }
LABEL_27:
          if (*(_WORD *)v16) {
            return 0;
          }
          uint64_t result = 0;
          __int16 v23 = 1281;
          goto LABEL_30;
        default:
LABEL_16:
          if (a4 >> 2 == 8853
            && (*(unsigned char *)(v16 + 2669) == 2 || (*(unsigned char *)(*(void *)(a1 + 29032) + 577) & 1) == 0))
          {
            goto LABEL_4;
          }
          if (gleCheckCompressedTexImageArgs(a1, a3, a7, v20, v21, 1, a8, v18, v19)) {
            return v17;
          }
          else {
            return 0;
          }
      }
    }
    if (!*(_WORD *)v16)
    {
      uint64_t result = 0;
      __int16 v23 = 1282;
      goto LABEL_30;
    }
    return 0;
  }
LABEL_4:
  if (*(_WORD *)v16) {
    return 0;
  }
  uint64_t result = 0;
  __int16 v23 = 1280;
LABEL_30:
  *(_WORD *)uint64_t v16 = v23;
  return result;
}

uint64_t gleCheckCompressedTexImageArgs(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, unint64_t a8, int8x8_t a9)
{
  if ((a8 & 0x800000000000000) == 0)
  {
    uint64_t v16 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return 0;
    }
    uint64_t result = 0;
    if ((a8 & 0x4000000000000000) != 0) {
      __int16 v18 = 1282;
    }
    else {
      __int16 v18 = 1280;
    }
    goto LABEL_37;
  }
  unsigned int v9 = (a8 >> 6) & 0xF;
  if (v9 - 11 >= 2)
  {
    if (v9 == 4)
    {
      int v10 = 4;
    }
    else
    {
      if (v9 != 5)
      {
        int v11 = 0;
        int v10 = 0;
        goto LABEL_10;
      }
      int v10 = 8;
    }
    int v11 = (((a8 >> 37) & 3) + 1 + (((a8 >> 37) & 3) + 1) * (BYTE4(a8) & 0x1F)) << v10;
LABEL_10:
    char v12 = 1;
    goto LABEL_11;
  }
  int v11 = 0;
  int v10 = 0;
  char v12 = 0;
LABEL_11:
  if (a3) {
    goto LABEL_38;
  }
  if (v11)
  {
    if ((a2 - 1) < 0xFFFFFFF1)
    {
LABEL_34:
      uint64_t v16 = (__int16 *)(a1 + 29832);
      if (*(_WORD *)(a1 + 29832)) {
        return 0;
      }
      uint64_t result = 0;
      __int16 v18 = 1281;
      goto LABEL_37;
    }
    int v13 = 0;
    int v14 = 1 - a2;
    if (1 - a2 <= 1) {
      int v14 = 1;
    }
    while (a4 != 1 || a5 != 1)
    {
      v13 += (a5 * v10 * a4) >> 3;
      a4 = a4 >> (a4 > 1);
      a5 = a5 >> (a5 > 1);
      ++a2;
      if (!--v14) {
        goto LABEL_30;
      }
    }
    if (a2) {
      goto LABEL_34;
    }
    ++v13;
LABEL_30:
    int v19 = v13 + v11;
LABEL_32:
    if (v19 == a7) {
      return 1;
    }
    goto LABEL_34;
  }
  if ((v12 & 1) == 0)
  {
    if (a4 != a5 || (a9.i32[0] = a4, uint8x8_t v15 = (uint8x8_t)vcnt_s8(a9), v15.i16[0] = vaddlv_u8(v15), v15.i32[0] >= 2u))
    {
LABEL_38:
      uint64_t v16 = (__int16 *)(a1 + 29832);
      if (*(_WORD *)(a1 + 29832)) {
        return 0;
      }
      uint64_t result = 0;
      __int16 v18 = 1282;
      goto LABEL_37;
    }
  }
  if ((a8 & 0x1CF800000000000) != 0x9800000000000
    && (v9 != 14 || (*(unsigned char *)(*(void *)(a1 + 29032) + 576) & 0x20) != 0))
  {
    int v20 = a6 + a6 * ((a8 >> 37) & 3);
    int v19 = (v20 + v20 * (BYTE4(a8) & 0x1F))
        * ((int)(((a8 >> 39) & 0xF) + a4)
         / (int)(((a8 >> 39) & 0xF) + 1))
        * ((int)(((a8 >> 43) & 0xF) + a5)
         / (int)(((a8 >> 43) & 0xF) + 1));
    goto LABEL_32;
  }
  uint64_t v16 = (__int16 *)(a1 + 29832);
  if (*(_WORD *)(a1 + 29832)) {
    return 0;
  }
  uint64_t result = 0;
  __int16 v18 = 1280;
LABEL_37:
  __int16 *v16 = v18;
  return result;
}

int8x8_t glMultMatrixf_Exec(uint64_t a1, float32x2_t *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v3 = a1 + 20484;
  if (*(int *)(a1 + 20484) < 24)
  {
    uint64_t v4 = (int8x8_t *)(a1 + 1540);
    long long v9 = 0u;
    long long v10 = 0u;
    float32x4_t v7 = 0u;
    long long v8 = 0u;
    gleMultMatrixf(*(float32x4_t **)(a1 + 19976), a2, &v7);
    uint64_t v5 = *(void *)(a1 + 19976);
    *(float32x4_t *)uint64_t v5 = v7;
    *(_OWORD *)(v5 + 16) = v8;
    *(_OWORD *)(v5 + 32) = v9;
    *(_OWORD *)(v5 + 48) = v10;
    LODWORD(v5) = *(_DWORD *)(v3 + 4);
    *(_DWORD *)(a1 + 1528) |= v5;
    *(_DWORD *)(v3 + 8168) = 0;
    int8x8_t result = vorr_s8(*v4, (int8x8_t)vdup_n_s32(v5));
    *uint64_t v4 = result;
  }
  else if (!*(_WORD *)(a1 + 29832))
  {
    *(_WORD *)(a1 + 29832) = 1282;
  }
  return result;
}

__n128 gleMultMatrixf(float32x4_t *a1, float32x2_t *a2, float32x4_t *a3)
{
  __n128 result = *(__n128 *)a2->f32;
  float32x4_t v4 = a1[1];
  float32x4_t v5 = a1[2];
  float32x4_t v6 = a1[3];
  float32x4_t v7 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a1, COERCE_FLOAT(*(_OWORD *)a2[2].f32)), v4, a2[2], 1), v5, *(float32x4_t *)a2[2].f32, 2), v6, *(float32x4_t *)a2[2].f32, 3);
  float32x4_t v8 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a1, COERCE_FLOAT(*(_OWORD *)a2[4].f32)), v4, a2[4], 1), v5, *(float32x4_t *)a2[4].f32, 2), v6, *(float32x4_t *)a2[4].f32, 3);
  float32x4_t v9 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a1, COERCE_FLOAT(*(_OWORD *)a2[6].f32)), v4, a2[6], 1), v5, *(float32x4_t *)a2[6].f32, 2), v6, *(float32x4_t *)a2[6].f32, 3);
  *a3 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a1, COERCE_FLOAT(*(_OWORD *)a2->f32)), v4, *a2, 1), v5, *(float32x4_t *)a2->f32, 2), v6, *(float32x4_t *)a2->f32, 3);
  a3[1] = v7;
  a3[2] = v8;
  a3[3] = v9;
  return result;
}

void *gleLightMaterialRGBAChange_F_A(uint64_t a1, void *a2)
{
  __n128 result = glePushMaterial(a1, 0);
  *__n128 result = *a2;
  result[1] = a2[1];
  *((_WORD *)result + 248) |= 0x404u;
  uint64_t v5 = *(void *)(a1 + 19248);
  if (v5)
  {
    unint64_t v6 = *(unsigned __int16 *)(v5 + 2816);
    if (v6 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v6 >> 3) & 0x1FFC) + 1552) |= 1 << v6;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x800000u;
    }
  }
  uint64_t v7 = *(void *)(a1 + 19272);
  if (v7)
  {
    unint64_t v8 = *(unsigned __int16 *)(v7 + 2816);
    if (v8 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v8 >> 3) & 0x1FFC) + 1936) |= 1 << v8;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x4000000u;
    }
  }
  uint64_t v9 = *(void *)(a1 + 19280);
  if (v9)
  {
    unint64_t v10 = *(unsigned __int16 *)(v9 + 2816);
    if (v10 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v10 >> 3) & 0x1FFC) + 2064) |= 1 << v10;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x8000000u;
    }
  }
  return result;
}

void *gleLightMaterialRGBAChange_F_D(uint64_t a1, void *a2)
{
  __n128 result = glePushMaterial(a1, 0);
  result[2] = *a2;
  result[3] = a2[1];
  *((_WORD *)result + 248) |= 0x808u;
  uint64_t v5 = *(void *)(a1 + 19248);
  if (v5)
  {
    unint64_t v6 = *(unsigned __int16 *)(v5 + 2818);
    if (v6 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v6 >> 3) & 0x1FFC) + 1552) |= 1 << v6;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x800000u;
    }
  }
  uint64_t v7 = *(void *)(a1 + 19272);
  if (v7)
  {
    unint64_t v8 = *(unsigned __int16 *)(v7 + 2818);
    if (v8 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v8 >> 3) & 0x1FFC) + 1936) |= 1 << v8;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x4000000u;
    }
  }
  uint64_t v9 = *(void *)(a1 + 19280);
  if (v9)
  {
    unint64_t v10 = *(unsigned __int16 *)(v9 + 2818);
    if (v10 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v10 >> 3) & 0x1FFC) + 2064) |= 1 << v10;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x8000000u;
    }
  }
  return result;
}

uint64_t glGetPointerv_Exec(uint64_t result, int a2, void *a3)
{
  uint64_t v3 = *(void **)(result + 26384);
  if (a2 <= 34475)
  {
    switch(a2)
    {
      case 32910:
        uint64_t v4 = v3[17];
        goto LABEL_16;
      case 32911:
        uint64_t v4 = v3[20];
        goto LABEL_16;
      case 32912:
        uint64_t v4 = v3[23];
        goto LABEL_16;
      case 32914:
        uint64_t v4 = v3[3 * *(unsigned __int16 *)(result + 23770) + 41];
        goto LABEL_16;
      default:
        goto LABEL_17;
    }
  }
  if (a2 > 35211)
  {
    if (a2 == 35212)
    {
      uint64_t v4 = v3[35];
      goto LABEL_16;
    }
    if (a2 == 35342)
    {
      uint64_t v4 = v3[117];
      goto LABEL_16;
    }
  }
  else
  {
    if (a2 == 34476)
    {
      uint64_t v4 = v3[29];
      goto LABEL_16;
    }
    if (a2 == 34889)
    {
      uint64_t v4 = v3[38];
LABEL_16:
      *a3 = v4;
      return result;
    }
  }
LABEL_17:
  if (!*(_WORD *)(result + 29832)) {
    *(_WORD *)(result + 29832) = 1280;
  }
  return result;
}

void *glActiveTexture_Comp(uint64_t a1, int a2)
{
  __n128 result = gleAddCommand(a1, (uint64_t)glActiveTexture_ListExec, 4);
  *(_DWORD *)__n128 result = a2;
  return result;
}

uint64_t glActiveTexture_ListExec(uint64_t a1, int *a2)
{
  return 4;
}

void *glClientActiveTexture_PackThread(void *result, int a2)
{
  float64x2_t v2 = (_DWORD *)result + 6645;
  if ((a2 - 33992) > 0xFFFFFFF7)
  {
    int v4 = a2 - 33984;
    __n128 result = gleAddCommand((uint64_t)result, (uint64_t)glClientActiveTexture_UnpackThread, 4);
    *(_DWORD *)__n128 result = a2;
    *float64x2_t v2 = v4;
  }
  else if (!*((_WORD *)result + 14916))
  {
    *((_WORD *)result + 14916) = 1280;
  }
  return result;
}

uint64_t glClientActiveTexture_UnpackThread(uint64_t a1, _WORD *a2)
{
  if ((*(_DWORD *)a2 - 33984) < 8)
  {
    *(_WORD *)(a1 + 23770) = *a2 + 31552;
  }
  else if (!*(_WORD *)(a1 + 29832))
  {
    *(_WORD *)(a1 + 29832) = 1280;
  }
  return 4;
}

float *glAlphaFunc_Comp(uint64_t a1, int a2, float a3)
{
  __n128 result = (float *)gleAddCommand(a1, (uint64_t)glAlphaFunc_ListExec, 8);
  *(_DWORD *)__n128 result = a2;
  result[1] = a3;
  return result;
}

uint64_t glAlphaFunc_ListExec(uint64_t a1, int *a2, double a3, double a4, double a5)
{
  LODWORD(a3) = a2[1];
  glAlphaFunc_Exec(a1, *a2, a3, a4, a5);
  return 8;
}

uint64_t glAlphaFuncx_Exec(uint64_t a1, int a2, int a3, double a4, double a5, double a6)
{
  LODWORD(a5) = 931135488;
  *(float *)&a4 = (float)a3 * 0.000015259;
  return glAlphaFunc_Exec(a1, a2, a4, a5, a6);
}

float *glAlphaFuncx_PackThread(uint64_t a1, int a2, int a3)
{
  float v4 = (float)a3 * 0.000015259;
  __n128 result = (float *)gleAddCommand(a1, (uint64_t)glAlphaFunc_ListExec, 8);
  *(_DWORD *)__n128 result = a2;
  result[1] = v4;
  return result;
}

_DWORD *glBlendFunc_Comp(uint64_t a1, int a2, int a3)
{
  __n128 result = gleAddCommand(a1, (uint64_t)glBlendFunc_ListExec, 8);
  *__n128 result = a2;
  result[1] = a3;
  return result;
}

uint64_t glBlendFunc_ListExec(uint64_t a1, unsigned int *a2)
{
  return 8;
}

float *glBlendColor_Comp(uint64_t a1, float a2, float a3, float a4, float a5)
{
  __n128 result = (float *)gleAddCommand(a1, (uint64_t)glBlendColor_ListExec, 16);
  *__n128 result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  return result;
}

uint64_t glBlendColor_ListExec(uint64_t a1, uint64_t a2, double a3, double a4, double a5)
{
  LODWORD(a3) = *(_DWORD *)a2;
  LODWORD(a4) = *(_DWORD *)(a2 + 4);
  LODWORD(a5) = *(_DWORD *)(a2 + 8);
  glBlendColor_Exec(a1, a3, a4, a5, *(float *)(a2 + 12));
  return 16;
}

uint64_t glBlendColor_Exec(uint64_t result, double a2, double a3, double a4, float a5)
{
  float v6 = *(float *)&a4;
  float v7 = *(float *)&a3;
  float v8 = *(float *)&a2;
  uint64_t v9 = result;
  uint64_t v10 = result + 29688;
  LODWORD(a2) = *(_DWORD *)(result + 29688);
  if (*(float *)&a2 != v8
    || (LODWORD(a2) = *(_DWORD *)(result + 29692), *(float *)&a2 != *(float *)&a3)
    || (LODWORD(a2) = *(_DWORD *)(result + 29696), *(float *)&a2 != *(float *)&a4)
    || (LODWORD(a2) = *(_DWORD *)(result + 29700), *(float *)&a2 != a5))
  {
    if ((*(unsigned char *)(result + 29803) & 0x10) != 0) {
      __n128 result = gleUpdateAnyDrawBuffersFloat(result, a2, a3, a4);
    }
    *(float *)uint64_t v10 = v8;
    *(float *)(v10 + 4) = v7;
    *(float *)(v10 + 8) = v6;
    *(float *)(v10 + 12) = a5;
    if (*(unsigned char *)(v10 + 2800) || (*(unsigned char *)(*(void *)(v9 + 29032) + 561) & 0x40) != 0)
    {
      *(_OWORD *)(v9 + 15104) = *(_OWORD *)v10;
    }
    else
    {
      float v11 = *(float *)(v9 + 288);
      float v12 = *(float *)(v9 + 292);
      *(float *)(v9 + 15104) = fminf(fmaxf(v8, v11), v12);
      *(float *)(v9 + 15108) = fminf(fmaxf(v7, v11), v12);
      *(float *)(v9 + 15112) = fminf(fmaxf(v6, v11), v12);
      *(float *)(v9 + 15116) = fminf(fmaxf(a5, v11), v12);
    }
    *(_DWORD *)(v9 + 28652) = 0;
    *(_DWORD *)(v9 + 1520) |= 4u;
  }
  return result;
}

void *glBlendEquation_Comp(uint64_t a1, int a2)
{
  __n128 result = gleAddCommand(a1, (uint64_t)glBlendEquation_ListExec, 4);
  *(_DWORD *)__n128 result = a2;
  return result;
}

uint64_t glBlendEquation_ListExec(uint64_t a1, int *a2)
{
  return 4;
}

uint64_t glBlendEquation_Exec(uint64_t result, int a2)
{
  if ((a2 - 32774) < 3
    || (a2 - 32778) < 2
    || (a2 - 34685) < 2
    || a2 == 35445 && (*(unsigned char *)(*(void *)(result + 29032) + 578) & 4) != 0)
  {
    unint64_t v2 = 0;
    int v3 = a2 | (a2 << 16);
    float v4 = (int *)(result + 15016);
    do
    {
      int v6 = *v4;
      v4 += 3;
      int v5 = v6;
    }
    while (v6 == v3 && v2++ < 7);
    if (v5 != v3)
    {
      for (uint64_t i = 0; i != 96; i += 12)
        *(_DWORD *)(result + 15016 + i) = v3;
      *(unsigned char *)(result + 15121) &= ~2u;
      *(_DWORD *)(result + 1520) |= 2u;
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1548) |= 0x40000u;
    }
  }
  else if (!*(_WORD *)(result + 29832))
  {
    *(_WORD *)(result + 29832) = 1280;
  }
  return result;
}

_DWORD *glBlendFuncSeparate_Comp(uint64_t a1, int a2, int a3, int a4, int a5)
{
  __n128 result = gleAddCommand(a1, (uint64_t)glBlendFuncSeparate_ListExec, 16);
  *__n128 result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  return result;
}

uint64_t glBlendFuncSeparate_ListExec(uint64_t a1, int *a2)
{
  return 16;
}

uint64_t glBlendFuncSeparate_Exec(uint64_t result, int a2, int a3, int a4, int a5)
{
  int v5 = (_DWORD *)(result + 28652);
  int v6 = *(_DWORD *)(result + 29812);
  unsigned int v7 = v6 & 0xFFFFFF00;
  if (a2 < 2) {
    goto LABEL_2;
  }
  if (a2 <= 0x8000)
  {
    if ((a2 - 770) < 7) {
      goto LABEL_2;
    }
    if ((a2 - 768) >= 2) {
      goto LABEL_57;
    }
    goto LABEL_50;
  }
  if ((a2 - 32769) < 4)
  {
LABEL_50:
    if (*(unsigned char *)(result + 32501) == 2) {
      goto LABEL_57;
    }
    goto LABEL_2;
  }
  if ((a2 - 35065) >= 3 && a2 != 34185) {
    goto LABEL_57;
  }
  unsigned int v7 = v6 | 0xFF;
LABEL_2:
  if (a3 < 2) {
    goto LABEL_3;
  }
  if (a3 <= 0x8000)
  {
    if ((a3 - 768) > 8) {
      goto LABEL_57;
    }
    if (((1 << a3) & 0x13F) != 0) {
      goto LABEL_3;
    }
    goto LABEL_52;
  }
  if ((a3 - 32769) < 4)
  {
LABEL_52:
    if (*(unsigned char *)(result + 32501) == 2) {
      goto LABEL_57;
    }
    goto LABEL_3;
  }
  if ((a3 - 35065) >= 3 && a3 != 34185) {
    goto LABEL_57;
  }
  v7 |= 0xFFu;
LABEL_3:
  if (a4 < 2) {
    goto LABEL_4;
  }
  if (a4 <= 0x8000)
  {
    if ((a4 - 770) < 7) {
      goto LABEL_4;
    }
    if ((a4 - 768) >= 2) {
      goto LABEL_57;
    }
    goto LABEL_54;
  }
  if ((a4 - 32769) < 4)
  {
LABEL_54:
    if (*(unsigned char *)(result + 32501) == 2) {
      goto LABEL_57;
    }
    goto LABEL_4;
  }
  if ((a4 - 35065) >= 3 && a4 != 34185) {
    goto LABEL_57;
  }
  v7 |= 0xFFu;
LABEL_4:
  if (a5 < 2)
  {
LABEL_5:
    if (v6 != v7)
    {
      *(_DWORD *)(result + 29812) = v7;
      *int v5 = 0;
      *(_DWORD *)(result + 1548) |= 0x80000u;
    }
    unint64_t v8 = 0;
    unint64_t v9 = a2 | ((unint64_t)a3 << 16) | ((unint64_t)a4 << 32) | ((unint64_t)a5 << 48);
    uint64_t v10 = (uint64_t *)(result + 15008);
    do
    {
      uint64_t v12 = *v10;
      uint64_t v10 = (uint64_t *)((char *)v10 + 12);
      uint64_t v11 = v12;
    }
    while (v12 == v9 && v8++ < 7);
    if (v11 != v9)
    {
      for (uint64_t i = 0; i != 96; i += 12)
        *(void *)(result + 15008 + i) = v9;
      *(unsigned char *)(result + 15121) &= ~1u;
      *(_DWORD *)(result + 1520) |= 2u;
      *int v5 = 0;
      *(_DWORD *)(result + 1548) |= 0x40000u;
    }
    return result;
  }
  if (a5 <= 0x8000)
  {
    if ((a5 - 768) > 8) {
      goto LABEL_57;
    }
    if (((1 << a5) & 0x13F) != 0) {
      goto LABEL_5;
    }
    goto LABEL_56;
  }
  if ((a5 - 32769) < 4)
  {
LABEL_56:
    if (*(unsigned char *)(result + 32501) != 2) {
      goto LABEL_5;
    }
    goto LABEL_57;
  }
  if ((a5 - 35065) < 3 || a5 == 34185)
  {
    v7 |= 0xFFu;
    goto LABEL_5;
  }
LABEL_57:
  if (!*(_WORD *)(result + 29832)) {
    *(_WORD *)(result + 29832) = 1280;
  }
  return result;
}

_DWORD *glBlendEquationSeparateEXT_Comp(uint64_t a1, int a2, int a3)
{
  __n128 result = gleAddCommand(a1, (uint64_t)glBlendEquationSeparateEXT_ListExec, 8);
  *__n128 result = a2;
  result[1] = a3;
  return result;
}

uint64_t glBlendEquationSeparateEXT_ListExec(uint64_t a1, int *a2)
{
  return 8;
}

uint64_t glBlendEquationSeparateEXT_Exec(uint64_t result, int a2, int a3)
{
  if (((a2 - 32774) < 3
     || (a2 - 32778) < 2
     || (a2 - 34685) < 2
     || a2 == 35445 && (*(unsigned char *)(*(void *)(result + 29032) + 578) & 4) != 0)
    && ((a3 - 32774) < 3
     || (a3 - 32778) < 2
     || (a3 - 34685) < 2
     || a3 == 35445 && (*(unsigned char *)(*(void *)(result + 29032) + 578) & 4) != 0))
  {
    unint64_t v3 = 0;
    int v4 = a2 | (a3 << 16);
    int v5 = (int *)(result + 15016);
    do
    {
      int v7 = *v5;
      v5 += 3;
      int v6 = v7;
    }
    while (v7 == v4 && v3++ < 7);
    if (v6 != v4)
    {
      for (uint64_t i = 0; i != 96; i += 12)
        *(_DWORD *)(result + 15016 + i) = v4;
      *(unsigned char *)(result + 15121) &= ~2u;
      *(_DWORD *)(result + 1520) |= 2u;
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1548) |= 0x40000u;
    }
  }
  else if (!*(_WORD *)(result + 29832))
  {
    *(_WORD *)(result + 29832) = 1280;
  }
  return result;
}

void glBindBuffer_Exec(uint64_t a1, int a2, unsigned int a3)
{
  if ((a2 - 34962) < 2)
  {
LABEL_2:
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    gleBindBufferObject(a1, a2, a3);
    int v6 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
    os_unfair_lock_unlock(v6);
    return;
  }
  int v7 = (_WORD *)(a1 + 29832);
  if (a2 > 35981)
  {
    if ((a2 - 36662) >= 2 && a2 != 35982) {
      goto LABEL_12;
    }
  }
  else if ((a2 - 35051) >= 2 && a2 != 35345)
  {
    goto LABEL_12;
  }
  if ((*(unsigned char *)(a1 + 32501) & 0xFE) != 2) {
    goto LABEL_2;
  }
LABEL_12:
  if (!*v7) {
    *int v7 = 1280;
  }
}

void *glBindBuffer_PackThread(void *a1, int a2, unsigned int a3)
{
  if ((a2 - 34962) < 2) {
    return gleBindBufferObject_Thread(a1, a2, a3);
  }
  unint64_t v3 = a1 + 3729;
  if (a2 > 35981)
  {
    if ((a2 - 36662) >= 2 && a2 != 35982) {
      goto LABEL_10;
    }
  }
  else if ((a2 - 35051) >= 2 && a2 != 35345)
  {
    goto LABEL_10;
  }
  if ((*((unsigned char *)a1 + 32501) & 0xFE) != 2) {
    return gleBindBufferObject_Thread(a1, a2, a3);
  }
LABEL_10:
  if (!*v3) {
    *unint64_t v3 = 1280;
  }
  return a1;
}

void glDeleteBuffers_Exec(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3 = (_DWORD *)(a1 + 28652);
  if ((a2 & 0x80000000) == 0)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    uint64_t v68 = *(void **)(a1 + 26384);
    if (v68) {
      int v6 = v68 + 5;
    }
    else {
      int v6 = 0;
    }
    uint64_t v7 = *(void *)(a1 + 19312);
    if (v7) {
      int v77 = *(_DWORD *)(v7 + 16);
    }
    else {
      int v77 = 0;
    }
    if (v68)
    {
      uint64_t v8 = v68[154];
      if (v8)
      {
LABEL_10:
        int v76 = *(_DWORD *)(v8 + 16);
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v8 = *(void *)(a1 + 19320);
      if (v8) {
        goto LABEL_10;
      }
    }
    int v76 = 0;
LABEL_13:
    uint64_t v9 = *(void *)(a1 + 19328);
    if (v9) {
      int v75 = *(_DWORD *)(v9 + 16);
    }
    else {
      int v75 = 0;
    }
    uint64_t v10 = *(void *)(a1 + 19336);
    if (v10) {
      int v74 = *(_DWORD *)(v10 + 16);
    }
    else {
      int v74 = 0;
    }
    uint64_t v11 = *(void *)(a1 + 19352);
    if (v11) {
      int v73 = *(_DWORD *)(v11 + 16);
    }
    else {
      int v73 = 0;
    }
    uint64_t v12 = *(void *)(a1 + 19344);
    if (v12) {
      int v72 = *(_DWORD *)(v12 + 16);
    }
    else {
      int v72 = 0;
    }
    uint64_t v13 = *(void *)(a1 + 19360);
    if (v13) {
      int v71 = *(_DWORD *)(v13 + 16);
    }
    else {
      int v71 = 0;
    }
    uint64_t v14 = *(void *)(a1 + 19368);
    if (v14) {
      int v70 = *(_DWORD *)(v14 + 16);
    }
    else {
      int v70 = 0;
    }
    uint64_t v15 = *(void *)(a1 + 19376);
    if (v15)
    {
      int v69 = *(_DWORD *)(v15 + 16);
      if (!a2) {
        goto LABEL_131;
      }
    }
    else
    {
      int v69 = 0;
      if (!a2) {
        goto LABEL_131;
      }
    }
    uint64_t v81 = v3;
    uint64_t v16 = 0;
    uint64_t v67 = 0;
    int v17 = 0;
    uint64_t v78 = a2;
    do
    {
      unsigned int v18 = *(_DWORD *)(a3 + 4 * v16);
      if (v18)
      {
        if (v18 == v77) {
          gleBindBufferObject(a1, 34962, 0);
        }
        if (v18 == v76) {
          gleBindBufferObject(a1, 34963, 0);
        }
        if (v18 == v75) {
          gleBindBufferObject(a1, 35051, 0);
        }
        if (v18 == v74) {
          gleBindBufferObject(a1, 35052, 0);
        }
        if (v18 == v73) {
          gleBindBufferObject(a1, 35982, 0);
        }
        if (v18 == v72) {
          gleBindBufferObject(a1, 36334, 0);
        }
        if (v18 == v71) {
          gleBindBufferObject(a1, 35882, 0);
        }
        if (v18 == v70) {
          gleBindBufferObject(a1, 36662, 0);
        }
        uint64_t v80 = v16;
        if (v18 == v69) {
          gleBindBufferObject(a1, 36663, 0);
        }
        uint64_t v19 = *(unsigned int *)(*(void *)(a1 + 26432) + 168);
        if (v19)
        {
          unint64_t v20 = 0;
          unsigned int v21 = (void *)(a1 + 33552);
          do
          {
            uint64_t v22 = *(void *)(a1 + 26432);
            uint64_t v23 = *(void *)(v22 + 8 * v20 + 128);
            if (v23 && v18 == *(_DWORD *)(v23 + 16))
            {
              int v24 = *(_DWORD *)(v23 + 20) - 1;
              *(_DWORD *)(v23 + 20) = v24;
              if (!v24)
              {
                gleUnbindAndFreeBufferObject(a1, (void *)v23);
                uint64_t v22 = *(void *)(a1 + 26432);
              }
              *(void *)(v22 + 8 * v20 + 128) = 0;
              *(_DWORD *)(*(void *)(a1 + 26432) + 168) &= ~(1 << v20);
              uint64_t v25 = *(unsigned __int8 *)(a1 + 32496);
              if (*(unsigned char *)(a1 + 32496))
              {
                unsigned int v26 = v21;
                do
                {
                  *unsigned int v26 = 0;
                  v26 += 209;
                  --v25;
                }
                while (v25);
              }
              v17 |= 8u;
              unint64_t v27 = a1 + 8 * v20;
              *(void *)(v27 + 17992) = 0;
              *(void *)(v27 + 18024) = 0;
            }
            v19 &= ~(1 << v20);
            if (!v19) {
              break;
            }
            ++v21;
            BOOL v28 = v20++ >= 3;
          }
          while (!v28);
        }
        unint64_t v29 = *(void *)(a1 + 24896);
        for (unint64_t i = v29; i; i &= ~(1 << v31))
        {
          unint64_t v31 = __clz(__rbit64(i));
          uint64_t v32 = *(void *)(a1 + 24888);
          uint64_t v33 = *(void *)(v32 + 8 * v31);
          if (v33 && v18 == *(_DWORD *)(v33 + 16))
          {
            int v34 = *(_DWORD *)(v33 + 20) - 1;
            *(_DWORD *)(v33 + 20) = v34;
            if (!v34)
            {
              gleUnbindAndFreeBufferObject(a1, (void *)v33);
              uint64_t v32 = *(void *)(a1 + 24888);
              unint64_t v29 = *(void *)(a1 + 24896);
            }
            v17 |= 4u;
            *(void *)(v32 + 8 * v31) = 0;
            uint64_t v35 = (void *)(a1 + 18056 + 16 * v31);
            v29 &= ~(1 << v31);
            *uint64_t v35 = 0;
            v35[1] = 0;
            *(void *)(a1 + 24896) = v29;
            uint64_t v36 = *(unsigned __int8 *)(a1 + 32496);
            if (*(unsigned char *)(a1 + 32496))
            {
              unsigned int v37 = (void *)(a1 + 33704 + 8 * v31);
              do
              {
                *unsigned int v37 = 0;
                v37 += 209;
                --v36;
              }
              while (v36);
            }
          }
        }
        uint64_t v38 = *(void *)(a1 + 24768);
        if (v38)
        {
          uint64_t v67 = v38 + 40;
          if (*(_DWORD *)(v38 + 3748))
          {
            unint64_t v39 = 0;
            do
            {
              uint64_t v40 = *(void *)(v38 + 3704);
              uint64_t v41 = *(void *)(v40 + 8 * v39);
              if (v41 && v18 == *(_DWORD *)(v41 + 16))
              {
                int v42 = *(_DWORD *)(v41 + 20) - 1;
                *(_DWORD *)(v41 + 20) = v42;
                if (!v42)
                {
                  gleUnbindAndFreeBufferObject(a1, (void *)v41);
                  uint64_t v40 = *(void *)(v38 + 3704);
                }
                v17 |= 0x10u;
                *(void *)(v40 + 8 * v39) = 0;
                uint64_t v43 = *(unsigned __int8 *)(a1 + 32496);
                if (*(unsigned char *)(a1 + 32496))
                {
                  uint64_t v44 = (uint64_t *)(v38 + 4056);
                  do
                  {
                    uint64_t v45 = *v44;
                    v44 += 9;
                    *(void *)(v45 + 8 * v39) = 0;
                    --v43;
                  }
                  while (v43);
                }
              }
              ++v39;
            }
            while (v39 < *(unsigned int *)(v38 + 3748));
          }
        }
        if ((*(_WORD *)(a1 + 32493) & 0x20) == 0)
        {
          if (v68)
          {
            uint64_t v46 = v68[114];
            if (v46)
            {
              unint64_t v47 = 0;
              int v48 = v6 + 182;
              do
              {
                uint64_t v49 = &v6[v47];
                uint64_t v50 = v49[150];
                if (v50 && v18 == *(_DWORD *)(v50 + 16))
                {
                  int v51 = *(_DWORD *)(v50 + 20) - 1;
                  *(_DWORD *)(v50 + 20) = v51;
                  if (!v51) {
                    gleUnbindAndFreeBufferObject(a1, (void *)v50);
                  }
                  v49[150] = 0;
                  v6[113] |= (0x10000 << v47) | 0x10;
                  v6[109] &= ~(0x10000 << v47);
                  v6[v47 + 115] = v6[3 * v47 + 12];
                  if ((v6[108] & (0x10000 << v47)) != 0) {
                    int v52 = 3;
                  }
                  else {
                    int v52 = 1;
                  }
                  uint64_t v53 = *(unsigned __int8 *)(a1 + 32496);
                  if (*(unsigned char *)(a1 + 32496))
                  {
                    uint64_t v54 = v48;
                    do
                    {
                      void *v54 = 0;
                      v54 += 35;
                      --v53;
                    }
                    while (v53);
                  }
                  v17 |= v52;
                  if (*(void *)(a1 + 27648))
                  {
                    uint64_t v55 = *(void *)(a1 + 26448);
                    *(void *)(v55 + 8 * v47 + 8) = 0;
                    *(void *)(v55 + 264) = v6[109];
                  }
                }
                v46 &= ~(0x10000 << v47);
                if (!v46) {
                  break;
                }
                ++v48;
                BOOL v28 = v47++ >= 0x1F;
              }
              while (!v28);
            }
          }
        }
        unint64_t v56 = *(void *)(a1 + 23776);
        if (v56)
        {
          uint64_t v57 = 0;
          do
          {
            if (v56)
            {
              uint64_t v58 = *(void *)(a1 + 20776 + 88 * v57 + 56);
              uint64_t v59 = *(void *)(v58 + 568);
              if (v59)
              {
                if (v18 == *(_DWORD *)(v59 + 16))
                {
                  int v60 = *(_DWORD *)(v59 + 20) - 1;
                  *(_DWORD *)(v59 + 20) = v60;
                  if (!v60) {
                    gleUnbindAndFreeBufferObject(a1, (void *)v59);
                  }
                  *(void *)(v58 + 568) = 0;
                  *(void *)(a1 + 23776) &= -2 << v57;
                  uint64_t v61 = *(unsigned __int8 *)(a1 + 32496);
                  if (*(unsigned char *)(a1 + 32496))
                  {
                    uint64_t v62 = (unsigned char *)(v58 + 156);
                    do
                    {
                      *(void *)(v62 - 20) = 0;
                      *v62 |= 8u;
                      v62 += 24;
                      --v61;
                    }
                    while (v61);
                  }
                  _DWORD *v81 = 0;
                  *(_DWORD *)(a1 + 1548) |= 0x22000u;
                  gleDirtyTextureObjectCurrentBindPointsGeom(a1, v58 + 40);
                }
              }
            }
            ++v57;
            BOOL v63 = v56 > 1;
            v56 >>= 1;
          }
          while (v63);
        }
        int v64 = gleLookupHashObject(*(void *)(a1 + 19296) + 264, v18);
        if (v64 && *((_DWORD *)v64 + 5) == 1)
        {
          uint64_t v65 = (uint64_t)(v64 + 5);
          (*(void (**)(void, uint64_t))(*(void *)(a1 + 29448) + 1024))(*(void *)(a1 + 29016), v64[*(unsigned __int8 *)(a1 + 32500) + 5]);
          gleOrphanBufferObject(a1, v65);
        }
        gleUnbindDeleteHashNameAndObject(a1, (void (**)(void, uint64_t))(*(void *)(a1 + 19296) + 264), (void (*)(uint64_t, uint64_t))gleUnbindBufferObject, v18);
        uint64_t v16 = v80;
      }
      ++v16;
    }
    while (v16 != v78);
    if (!v17) {
      goto LABEL_131;
    }
    if ((v17 & 2) != 0)
    {
      gleUpdateDrawArraysFuncs(a1);
      if ((v17 & 1) == 0)
      {
LABEL_127:
        if ((v17 & 4) == 0) {
          goto LABEL_128;
        }
        goto LABEL_136;
      }
    }
    else if ((v17 & 1) == 0)
    {
      goto LABEL_127;
    }
    _DWORD *v81 = 0;
    *(_DWORD *)(a1 + 1532) |= 0x1000u;
    if ((v17 & 4) == 0)
    {
LABEL_128:
      if ((v17 & 8) == 0) {
        goto LABEL_129;
      }
      goto LABEL_137;
    }
LABEL_136:
    *(_DWORD *)(a1 + 1532) |= 0x20000000u;
    _DWORD *v81 = 0;
    *(_DWORD *)(a1 + 1548) |= 0x200u;
    if ((v17 & 8) == 0)
    {
LABEL_129:
      if ((v17 & 0x10) != 0)
      {
LABEL_130:
        *(_DWORD *)(v67 + 3656) |= 0x10u;
        *(_DWORD *)(a1 + 1532) |= 0x30000000u;
        _DWORD *v81 = 0;
        *(_DWORD *)(a1 + 1540) |= 0x10000000u;
      }
LABEL_131:
      int v66 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
      os_unfair_lock_unlock(v66);
      return;
    }
LABEL_137:
    _DWORD *v81 = 0;
    *(_DWORD *)(a1 + 1524) |= 0x40000000u;
    if ((v17 & 0x10) == 0) {
      goto LABEL_131;
    }
    goto LABEL_130;
  }
  if (!*(_WORD *)(a1 + 29832)) {
    *(_WORD *)(a1 + 29832) = 1281;
  }
}

void glDeleteBuffers_ExecThread(uint64_t a1, unsigned int a2, uint64_t a3)
{
  (*(void (**)(void))(a1 + 27752))();

  glDeleteBuffers_Exec(a1, a2, a3);
}

void glGenBuffers_Exec(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  if ((a2 & 0x80000000) != 0)
  {
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1281;
    }
  }
  else
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    int v6 = gleGenHashNames(*(void *)(a1 + 19296) + 264, a2);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (v6) {
      BOOL v7 = a2 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
      uint64_t v8 = a2;
      do
      {
        *a3++ = v6++;
        --v8;
      }
      while (v8);
    }
  }
}

void glGenBuffers_ExecThread(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  (*(void (**)(void))(a1 + 27752))();

  glGenBuffers_Exec(a1, a2, a3);
}

BOOL glIsBuffer_Exec(uint64_t a1, unsigned int a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  int v4 = gleLookupHashObject(*(void *)(a1 + 19296) + 264, a2);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  return v4 != 0;
}

BOOL glIsBuffer_ExecThread(uint64_t a1, unsigned int a2)
{
  (*(void (**)(void))(a1 + 27752))();

  return glIsBuffer_Exec(a1, a2);
}

BOOL *gleCreateTransformFeedbackBuffer(uint64_t a1)
{
  unint64_t v2 = (BOOL *)malloc_type_malloc(8 * *(unsigned __int8 *)(a1 + 32496) + 304, 0x577B5147uLL);
  if (!v2) {
    abort();
  }
  unint64_t v3 = v2;
  int64_t v4 = (*(void *)(*(void *)(a1 + 29032) + 640) + 55) & -*(void *)(*(void *)(a1 + 29032) + 640);
  if (v4 < 0x20000)
  {
    unsigned int v5 = (v4 - 1) | ((v4 - 1) >> 1) | (((v4 - 1) | ((v4 - 1) >> 1)) >> 2);
    unsigned int v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
    int64_t v4 = (v6 | HIWORD(v6)) + 1;
  }
  *(void *)unint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 4) = 0;
  *((_OWORD *)v2 + 1) = xmmword_227DC14D0;
  gfxInitializeBufferObject();
  gfxCreatePluginBuffer();
  mach_vm_address_t WCMemory = allocateWCMemory(a1, 36671, 35002, v4, v3 + 166);
  if (WCMemory)
  {
    *(void *)(WCMemory + 48) = 0;
    *(_OWORD *)(WCMemory + 16) = 0u;
    *(_OWORD *)(WCMemory + 32) = 0u;
    *(_OWORD *)mach_vm_address_t WCMemory = 0u;
    *((void *)v3 + 18) = v4;
    *((void *)v3 + 19) = 56;
    *((void *)v3 + 17) = WCMemory;
  }
  else
  {
    free(v3);
    return 0;
  }
  return v3;
}

mach_vm_address_t allocateWCMemory(uint64_t a1, int a2, int a3, mach_vm_size_t size, BOOL *a5)
{
  BOOL v7 = 0;
  uint64_t v8 = (_WORD *)(a1 + 29832);
  vm_map_t v9 = *MEMORY[0x263EF8960];
  mach_vm_address_t address = 0;
  BOOL v11 = a3 == 35048 || (a3 & 0xFFFFFFFB) == 35040;
  if (a2 == 34962 && v11)
  {
    uint64_t v12 = *(void *)(a1 + 29032);
    if (*(unsigned char *)(v12 + 101) && *(unsigned __int8 *)(a1 + 32492) >= 6u)
    {
      int v13 = *(unsigned __int8 *)(v12 + 106);
      BOOL v7 = v13 != 0;
      if (v13)
      {
        vm_prot_t v14 = 67371011;
        goto LABEL_15;
      }
    }
    else
    {
      BOOL v7 = 0;
    }
  }
  vm_prot_t v14 = 17039363;
LABEL_15:
  *a5 = v7;
  if (mach_vm_allocate(v9, &address, size, 3))
  {
    if (*v8) {
      return 0;
    }
    mach_vm_address_t result = 0;
    *uint64_t v8 = 1285;
  }
  else
  {
    if (*a5)
    {
      mach_port_t object_handle = 0;
      memory_object_size_t sizea = size;
      if (mach_make_memory_entry_64(v9, &sizea, address, v14, &object_handle, 0)) {
        BOOL v16 = 1;
      }
      else {
        BOOL v16 = object_handle == 0;
      }
      if (v16 || sizea < size)
      {
        if (object_handle) {
          mach_port_deallocate(v9, object_handle);
        }
        mach_vm_deallocate(v9, address, size);
        if (!*v8) {
          *uint64_t v8 = 1285;
        }
        return 0;
      }
      mach_port_deallocate(v9, object_handle);
    }
    return address;
  }
  return result;
}

uint64_t glBufferData_Exec(uint64_t result, int a2, size_t a3, const void *a4, int a5)
{
  vm_map_t v9 = (void *)result;
  uint64_t v10 = (__int16 *)(result + 29832);
  if (a2 > 35344)
  {
    if (a2 <= 36333)
    {
      if (a2 != 35345)
      {
        if (a2 != 35982) {
          goto LABEL_49;
        }
        uint64_t v11 = 19352;
        goto LABEL_25;
      }
    }
    else if (a2 != 36334)
    {
      if (a2 == 36662)
      {
        if ((*(unsigned char *)(result + 32501) & 0xFE) == 2) {
          goto LABEL_49;
        }
        uint64_t v11 = 19368;
      }
      else
      {
        if (a2 != 36663 || (*(unsigned char *)(result + 32501) & 0xFE) == 2) {
          goto LABEL_49;
        }
        uint64_t v11 = 19376;
      }
      goto LABEL_25;
    }
    uint64_t v11 = 19344;
LABEL_25:
    int v13 = (unsigned char **)(result + v11);
    goto LABEL_26;
  }
  if (a2 > 35050)
  {
    if (a2 == 35051)
    {
      uint64_t v11 = 19328;
    }
    else
    {
      if (a2 != 35052) {
        goto LABEL_49;
      }
      uint64_t v11 = 19336;
    }
    goto LABEL_25;
  }
  if (a2 == 34962)
  {
    uint64_t v11 = 19312;
    goto LABEL_25;
  }
  if (a2 != 34963) {
    goto LABEL_49;
  }
  uint64_t v12 = *(void *)(result + 26384);
  if (v12) {
    int v13 = (unsigned char **)(v12 + 1232);
  }
  else {
    int v13 = (unsigned char **)(result + 19320);
  }
LABEL_26:
  vm_prot_t v14 = *v13;
  if (!*v13 || v14[292])
  {
    if (*v10) {
      return result;
    }
    __int16 v22 = 1282;
    goto LABEL_51;
  }
  if ((a3 & 0x8000000000000000) != 0)
  {
    if (*v10) {
      return result;
    }
    __int16 v22 = 1281;
    goto LABEL_51;
  }
  if ((a5 - 35040) > 0xA || ((1 << (a5 + 32)) & 0x777) == 0)
  {
LABEL_49:
    if (*v10) {
      return result;
    }
    __int16 v22 = 1280;
    goto LABEL_51;
  }
  if (v14[164]) {
    return result;
  }
  uint64_t v15 = (uint64_t *)(v14 + 136);
  (*(void (**)(void, void))(*(void *)(result + 29448) + 1024))(*(void *)(result + 29016), *(void *)&v14[8 * *(unsigned __int8 *)(result + 32500) + 40]);
  gleOrphanBufferObject((uint64_t)v9, (uint64_t)(v14 + 40));
  BOOL v16 = gleAcquireBufferData((uint64_t)v9, (uint64_t)(v14 + 136), a3, a2, a5);
  gleApplyBufferData((uint64_t)v9, (uint64_t)(v14 + 40), (uint64_t)v16);
  if (!a3) {
    goto LABEL_36;
  }
  mach_vm_address_t result = *v15;
  if (!*v15)
  {
    if (*v10) {
      return result;
    }
    __int16 v22 = 1285;
LABEL_51:
    *uint64_t v10 = v22;
    return result;
  }
  if (a4)
  {
    memcpy((void *)result, a4, a3);
    v14[167] = 1;
  }
LABEL_36:
  if (v9[3111])
  {
    uint64_t v17 = 0;
    unsigned int v18 = v9 + 2258;
    do
    {
      if (*(unsigned char **)(v9[3111] + v17) == v14) {
        gleTransferBufferBindingToGLD((uint64_t)v14, *(void *)(v9[3109] + v17), *(void *)(v9[3110] + v17), v18 - 1, v18, *(unsigned __int16 *)(v9[3685] + 504), 1);
      }
      v18 += 2;
      v17 += 8;
    }
    while (v17 != 192);
  }
  if (*(_DWORD *)(v9[3304] + 168))
  {
    uint64_t v19 = 0;
    unint64_t v20 = v9 + 2253;
    do
    {
      unsigned int v21 = (void *)(v9[3304] + v19);
      if ((unsigned char *)v21[16] == v14) {
        gleTransferBufferBindingToGLD((uint64_t)v14, v21[6], v21[11], v20 - 4, v20, 4, 4);
      }
      ++v20;
      v19 += 8;
    }
    while (v19 != 32);
  }

  return gleDirtyBufferObjectCurrentBindPoints((uint64_t)v9, (uint64_t)(v14 + 40));
}

uint64_t *gleAcquireBufferData(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  char v22 = 0;
  if (!a3)
  {
    char v15 = 0;
    mach_vm_address_t result = 0;
    mach_vm_address_t v17 = 0;
    int64_t v18 = 0;
LABEL_21:
    *(unsigned char *)(a2 + 31) = 0;
    *(void *)(a2 + 8) = v18;
    *(void *)(a2 + 16) = a3;
    *(_WORD *)(a2 + 24) = a5;
    *(void *)a2 = v17;
    *(unsigned char *)(a2 + 30) = v15;
    return result;
  }
  int v10 = 0;
  uint64_t v11 = (_WORD *)(a1 + 29832);
  BOOL v13 = a5 == 35048 || (a5 & 0xFFFFFFFB) == 35040;
  if (a4 == 34962 && v13)
  {
    uint64_t v14 = *(void *)(a1 + 29032);
    int v10 = *(unsigned char *)(v14 + 101) && *(unsigned __int8 *)(a1 + 32492) >= 6u && *(unsigned __int8 *)(v14 + 106) != 0;
  }
  mach_vm_address_t result = gleGetFreeOrphanNode(a1, a3, (unsigned __int16)a5, v10);
  if (result)
  {
    mach_vm_address_t v17 = result[4];
    int64_t v18 = result[5];
    char v15 = *((unsigned char *)result + 50);
    goto LABEL_21;
  }
  int64_t v18 = (a3 + *(void *)(*(void *)(a1 + 29032) + 640) - 1) & -*(void *)(*(void *)(a1 + 29032) + 640);
  if (v18 < 0x20000)
  {
    unsigned int v19 = (v18 - 1) | ((v18 - 1) >> 1) | (((v18 - 1) | ((v18 - 1) >> 1)) >> 2);
    unsigned int v20 = v19 | (v19 >> 4) | ((v19 | (v19 >> 4)) >> 8);
    int64_t v18 = (v20 | HIWORD(v20)) + 1;
  }
  mach_vm_address_t WCMemory = allocateWCMemory(a1, a4, a5, v18, (BOOL *)&v22);
  if (WCMemory)
  {
    mach_vm_address_t v17 = WCMemory;
    mach_vm_address_t result = 0;
    char v15 = v22;
    goto LABEL_21;
  }
  if (!*v11) {
    *uint64_t v11 = 1285;
  }
  mach_vm_address_t result = 0;
  *(_WORD *)(a2 + 26) = 0;
  *(unsigned char *)(a2 + 30) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  return result;
}

void gleApplyBufferData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    gleBufferObjectAdoptOrphan(a1, a2, a3);
  }
  else
  {
    if (*(void *)(a2 + 112)) {
      int v4 = 5;
    }
    else {
      int v4 = 1;
    }
    uint64_t v5 = *(unsigned __int8 *)(a1 + 32496);
    if (*(unsigned char *)(a1 + 32496))
    {
      unsigned int v6 = (_DWORD *)(a2 + 264);
      do
      {
        *v6 |= v4;
        v6 += 2;
        --v5;
      }
      while (v5);
    }
  }
  *(void *)(a2 + 152) = 0;
}

void *glBufferData_PackThread(void *result, int a2, size_t a3, const void *a4, int a5)
{
  uint64_t v8 = (uint64_t)result;
  vm_map_t v9 = (__int16 *)(result + 3729);
  if (a2 > 35344)
  {
    if (a2 <= 36333)
    {
      if (a2 != 35345)
      {
        if (a2 != 35982) {
          goto LABEL_42;
        }
        uint64_t v10 = 3313;
        goto LABEL_25;
      }
    }
    else if (a2 != 36334)
    {
      if (a2 == 36662)
      {
        if ((*((unsigned char *)result + 32501) & 0xFE) == 2) {
          goto LABEL_42;
        }
        uint64_t v10 = 3315;
      }
      else
      {
        if (a2 != 36663 || (*((unsigned char *)result + 32501) & 0xFE) == 2) {
          goto LABEL_42;
        }
        uint64_t v10 = 3316;
      }
      goto LABEL_25;
    }
    uint64_t v10 = 3312;
LABEL_25:
    uint64_t v11 = &result[v10];
    goto LABEL_26;
  }
  if (a2 > 35050)
  {
    if (a2 == 35051)
    {
      uint64_t v10 = 3310;
    }
    else
    {
      if (a2 != 35052) {
        goto LABEL_42;
      }
      uint64_t v10 = 3311;
    }
    goto LABEL_25;
  }
  if (a2 == 34962)
  {
    uint64_t v10 = 3308;
    goto LABEL_25;
  }
  if (a2 != 34963) {
    goto LABEL_42;
  }
  uint64_t v11 = (uint64_t *)result[3306];
  if (!v11) {
    uint64_t v11 = result + 3309;
  }
LABEL_26:
  uint64_t v12 = *v11;
  if (!*v11)
  {
    if (*v9) {
      return result;
    }
    __int16 v19 = 1282;
    goto LABEL_44;
  }
  if ((a3 & 0x8000000000000000) != 0)
  {
    if (*v9) {
      return result;
    }
    __int16 v19 = 1281;
    goto LABEL_44;
  }
  if ((a5 - 35040) > 0xA || ((1 << (a5 + 32)) & 0x777) == 0)
  {
LABEL_42:
    if (*v9) {
      return result;
    }
    __int16 v19 = 1280;
    goto LABEL_44;
  }
  if (*(unsigned char *)(v12 + 28)) {
    return result;
  }
  BOOL v13 = gleAcquireBufferData((uint64_t)result, v12, a3, a2, a5);
  if (!a3) {
    goto LABEL_35;
  }
  mach_vm_address_t result = *(void **)v12;
  if (!*(void *)v12)
  {
    if (*v9) {
      return result;
    }
    __int16 v19 = 1285;
LABEL_44:
    *vm_map_t v9 = v19;
    return result;
  }
  if (a4)
  {
    memcpy(result, a4, a3);
    *(unsigned char *)(v12 + 31) = 1;
  }
LABEL_35:
  *(unsigned char *)(v12 + 56) = 0;
  mach_vm_address_t result = gleAddCommand(v8, (uint64_t)glBufferData_UnpackThread, 72);
  *((_DWORD *)result + 16) = a2;
  long long v14 = *(_OWORD *)(v12 + 32);
  uint64_t v15 = *(void *)(v12 + 48);
  long long v16 = *(_OWORD *)v12;
  *((_OWORD *)result + 1) = *(_OWORD *)(v12 + 16);
  *((_OWORD *)result + 2) = v14;
  *(_OWORD *)mach_vm_address_t result = v16;
  result[6] = v15;
  result[7] = v13;
  if (a3) {
    BOOL v17 = a4 == 0;
  }
  else {
    BOOL v17 = 0;
  }
  char v18 = v17;
  *((unsigned char *)result + 68) = v18;
  return result;
}

uint64_t glBufferData_UnpackThread(uint64_t a1, long long *a2)
{
  uint64_t v4 = 0;
  int v5 = *((_DWORD *)a2 + 16);
  if (v5 <= 35344)
  {
    if (v5 > 35050)
    {
      if (v5 == 35051)
      {
        uint64_t v4 = *(void *)(a1 + 19328);
      }
      else if (v5 == 35052)
      {
        uint64_t v4 = *(void *)(a1 + 19336);
      }
    }
    else if (v5 == 34962)
    {
      uint64_t v4 = *(void *)(a1 + 19312);
    }
    else if (v5 == 34963)
    {
      uint64_t v6 = *(void *)(a1 + 26384);
      if (v6) {
        uint64_t v4 = *(void *)(v6 + 1232);
      }
      else {
        uint64_t v4 = *(void *)(a1 + 19320);
      }
    }
    goto LABEL_26;
  }
  if (v5 <= 36333)
  {
    if (v5 != 35345)
    {
      if (v5 == 35982) {
        uint64_t v4 = *(void *)(a1 + 19352);
      }
      goto LABEL_26;
    }
LABEL_19:
    uint64_t v4 = *(void *)(a1 + 19344);
    goto LABEL_26;
  }
  if (v5 == 36334) {
    goto LABEL_19;
  }
  if (v5 != 36662)
  {
    if (v5 != 36663) {
      goto LABEL_26;
    }
    if ((*(unsigned char *)(a1 + 32501) & 0xFE) != 2)
    {
      uint64_t v4 = *(void *)(a1 + 19376);
      goto LABEL_26;
    }
    goto LABEL_21;
  }
  if ((*(unsigned char *)(a1 + 32501) & 0xFE) == 2)
  {
LABEL_21:
    uint64_t v4 = 0;
    goto LABEL_26;
  }
  uint64_t v4 = *(void *)(a1 + 19368);
LABEL_26:
  gleOrphanBufferObject(a1, v4 + 40);
  long long v7 = *a2;
  long long v8 = a2[1];
  long long v9 = a2[2];
  *(void *)(v4 + 184) = *((void *)a2 + 6);
  *(_OWORD *)(v4 + 168) = v9;
  *(_OWORD *)(v4 + 152) = v8;
  *(_OWORD *)(v4 + 136) = v7;
  gleApplyBufferData(a1, v4 + 40, *((void *)a2 + 7));
  if (*(void *)(a1 + 24888))
  {
    uint64_t v10 = 0;
    uint64_t v11 = (uint64_t *)(a1 + 18064);
    do
    {
      if (*(void *)(*(void *)(a1 + 24888) + v10) == v4) {
        gleTransferBufferBindingToGLD(v4, *(void *)(*(void *)(a1 + 24872) + v10), *(void *)(*(void *)(a1 + 24880) + v10), v11 - 1, v11, *(unsigned __int16 *)(*(void *)(a1 + 29480) + 504), 1);
      }
      v11 += 2;
      v10 += 8;
    }
    while (v10 != 192);
  }
  if (*(_DWORD *)(*(void *)(a1 + 26432) + 168))
  {
    uint64_t v12 = 0;
    BOOL v13 = (uint64_t *)(a1 + 18024);
    do
    {
      long long v14 = (void *)(*(void *)(a1 + 26432) + v12);
      if (v14[16] == v4) {
        gleTransferBufferBindingToGLD(v4, v14[6], v14[11], v13 - 4, v13, 4, 4);
      }
      ++v13;
      v12 += 8;
    }
    while (v12 != 32);
  }
  gleDirtyBufferObjectCurrentBindPoints(a1, v4 + 40);
  return 72;
}

void *glBufferSubData_Exec(void *result, int a2, uint64_t a3, size_t a4, const void *a5)
{
  long long v8 = result;
  long long v9 = (char *)(result + 3729);
  if (a2 > 35344)
  {
    if (a2 <= 36333)
    {
      if (a2 != 35345)
      {
        if (a2 == 35982)
        {
          uint64_t v10 = 2419;
          goto LABEL_28;
        }
LABEL_22:
        if (*(_WORD *)v9) {
          return result;
        }
        __int16 v13 = 1280;
        goto LABEL_24;
      }
    }
    else if (a2 != 36334)
    {
      if (a2 == 36662)
      {
        if ((*((unsigned char *)result + 32501) & 0xFE) != 2)
        {
          uint64_t v10 = 2421;
          goto LABEL_28;
        }
      }
      else if (a2 == 36663 && (*((unsigned char *)result + 32501) & 0xFE) != 2)
      {
        uint64_t v10 = 2422;
LABEL_28:
        uint64_t v12 = &result[v10];
        goto LABEL_29;
      }
      goto LABEL_22;
    }
    uint64_t v10 = 2418;
    goto LABEL_28;
  }
  if (a2 > 35050)
  {
    if (a2 == 35051)
    {
      uint64_t v10 = 2416;
      goto LABEL_28;
    }
    if (a2 == 35052)
    {
      uint64_t v10 = 2417;
      goto LABEL_28;
    }
    goto LABEL_22;
  }
  if (a2 == 34962)
  {
    uint64_t v10 = 2414;
    goto LABEL_28;
  }
  if (a2 != 34963) {
    goto LABEL_22;
  }
  uint64_t v11 = result[3298];
  if (v11) {
    uint64_t v12 = (uint64_t *)(v11 + 1232);
  }
  else {
    uint64_t v12 = result + 2415;
  }
LABEL_29:
  uint64_t v14 = *v12;
  if (!*v12 || *(unsigned char *)(v14 + 292))
  {
    if (*(_WORD *)v9) {
      return result;
    }
    __int16 v13 = 1282;
    goto LABEL_24;
  }
  if (((a4 | a3) & 0x8000000000000000) != 0) {
    goto LABEL_61;
  }
  if (!a4 || *(unsigned char *)(v14 + 164)) {
    return result;
  }
  if (a4 + a3 > *(void *)(v14 + 152))
  {
LABEL_61:
    if (*(_WORD *)v9) {
      return result;
    }
    __int16 v13 = 1281;
LABEL_24:
    *(_WORD *)long long v9 = v13;
    return result;
  }
  uint64_t v15 = v14 + 40;
  (*(void (**)(void, void))(result[3681] + 1024))(result[3627], *(void *)(v14 + 40 + 8 * *((unsigned __int8 *)result + 32500)));
  if (*(unsigned char *)(v14 + 165) && !*(void *)(v14 + 192)) {
    gfxWaitBufferOnDevices();
  }
  if (v9[2649]
    && (*(unsigned char *)(v14 + 165) || *(unsigned char *)(v8[3629] + 102))
    && (mach_vm_address_t result = (void *)(*(uint64_t (**)(void, void, uint64_t, size_t, const void *))(v8[3681] + 416))(v8[3627], *(void *)(v15 + 8 * v9[2667]), a3, a4, a5), result))
  {
    uint64_t v16 = v8[3628];
    *(unsigned char *)(v14 + 167) = 0;
    *(void *)(v14 + 192) = v16;
    uint64_t v17 = v8[3298];
    if (v17) {
      *(unsigned char *)(v17 + 1216) = 0;
    }
  }
  else
  {
    if (*(void *)(v14 + 192))
    {
      gleSynchronizeBufferOnCurrentDevices((uint64_t)v8, v14 + 40);
    }
    else if (*(unsigned char *)(v14 + 165))
    {
      (*(void (**)(void, uint64_t, void, void))(v8[3681] + 280))(v8[3627], 3, 0, *(void *)(v15 + 8 * v9[2667]));
    }
    *(unsigned char *)(v14 + 167) = 1;
    uint64_t v18 = v9[2664];
    if (v9[2664])
    {
      __int16 v19 = (_DWORD *)(v14 + 304);
      do
      {
        *v19 |= 4u;
        v19 += 2;
        --v18;
      }
      while (v18);
    }
    gleDirtyBufferObjectCurrentBindPoints((uint64_t)v8, v14 + 40);
    unsigned int v20 = (void *)(*(void *)(v14 + 136) + a3);
    return memcpy(v20, a5, a4);
  }
  return result;
}

void *glBufferSubData_PackThread(void *result, int a2, uint64_t a3, size_t a4, const void *a5)
{
  long long v9 = result;
  uint64_t v10 = (__int16 *)(result + 3729);
  if (a2 > 35344)
  {
    if (a2 <= 36333)
    {
      if (a2 != 35345)
      {
        if (a2 == 35982)
        {
          uint64_t v11 = 3313;
          goto LABEL_28;
        }
LABEL_22:
        if (*v10) {
          return result;
        }
        __int16 v13 = 1280;
        goto LABEL_24;
      }
    }
    else if (a2 != 36334)
    {
      if (a2 == 36662)
      {
        if ((*((unsigned char *)result + 32501) & 0xFE) != 2)
        {
          uint64_t v11 = 3315;
          goto LABEL_28;
        }
      }
      else if (a2 == 36663 && (*((unsigned char *)result + 32501) & 0xFE) != 2)
      {
        uint64_t v11 = 3316;
LABEL_28:
        uint64_t v12 = &result[v11];
        goto LABEL_29;
      }
      goto LABEL_22;
    }
    uint64_t v11 = 3312;
    goto LABEL_28;
  }
  if (a2 > 35050)
  {
    if (a2 == 35051)
    {
      uint64_t v11 = 3310;
      goto LABEL_28;
    }
    if (a2 == 35052)
    {
      uint64_t v11 = 3311;
      goto LABEL_28;
    }
    goto LABEL_22;
  }
  if (a2 == 34962)
  {
    uint64_t v11 = 3308;
    goto LABEL_28;
  }
  if (a2 != 34963) {
    goto LABEL_22;
  }
  uint64_t v12 = (uint64_t *)result[3306];
  if (!v12) {
    uint64_t v12 = result + 3309;
  }
LABEL_29:
  uint64_t v14 = *v12;
  if (!v14 || *(unsigned char *)(v14 + 56))
  {
    if (*v10) {
      return result;
    }
    __int16 v13 = 1282;
    goto LABEL_24;
  }
  if (((a4 | a3) & 0x8000000000000000) != 0) {
    goto LABEL_49;
  }
  if (!a4 || *(unsigned char *)(v14 + 28)) {
    return result;
  }
  if (a4 + a3 > *(void *)(v14 + 16))
  {
LABEL_49:
    if (*v10) {
      return result;
    }
    __int16 v13 = 1281;
LABEL_24:
    *uint64_t v10 = v13;
    return result;
  }
  uint64_t v15 = gleAddLargeCommand((uint64_t)result, (uint64_t)glBufferSubData_UnpackThread, a4 + 24);
  if (v15)
  {
    *((_DWORD *)v15 + 4) = a2;
    *uint64_t v15 = a3;
    v15[1] = a4;
    uint64_t v16 = v15 + 3;
    return memcpy(v16, a5, a4);
  }
  else
  {
    ((void (*)(void *))v9[3469])(v9);
    return glBufferSubData_Exec(v9, a2, a3, a4, a5);
  }
}

uint64_t glBufferSubData_UnpackThread(void *a1, uint64_t a2)
{
  return (*(_DWORD *)(a2 + 8) + 24);
}

uint64_t glMapBuffer_Exec(uint64_t a1, int a2, int a3)
{
  uint64_t v4 = a1 + 29832;
  if (a2 > 35344)
  {
    if (a2 <= 36333)
    {
      if (a2 != 35345)
      {
        if (a2 != 35982) {
          goto LABEL_34;
        }
        uint64_t v5 = 19352;
        goto LABEL_25;
      }
    }
    else if (a2 != 36334)
    {
      if (a2 == 36662)
      {
        if ((*(unsigned char *)(a1 + 32501) & 0xFE) == 2) {
          goto LABEL_34;
        }
        uint64_t v5 = 19368;
      }
      else
      {
        if (a2 != 36663 || (*(unsigned char *)(a1 + 32501) & 0xFE) == 2) {
          goto LABEL_34;
        }
        uint64_t v5 = 19376;
      }
      goto LABEL_25;
    }
    uint64_t v5 = 19344;
LABEL_25:
    long long v7 = (uint64_t *)(a1 + v5);
    goto LABEL_26;
  }
  if (a2 > 35050)
  {
    if (a2 == 35051)
    {
      uint64_t v5 = 19328;
    }
    else
    {
      if (a2 != 35052) {
        goto LABEL_34;
      }
      uint64_t v5 = 19336;
    }
    goto LABEL_25;
  }
  if (a2 == 34962)
  {
    uint64_t v5 = 19312;
    goto LABEL_25;
  }
  if (a2 != 34963) {
    goto LABEL_34;
  }
  uint64_t v6 = *(void *)(a1 + 26384);
  if (v6) {
    long long v7 = (uint64_t *)(v6 + 1232);
  }
  else {
    long long v7 = (uint64_t *)(a1 + 19320);
  }
LABEL_26:
  uint64_t v8 = *v7;
  if (!*v7 || *(unsigned char *)(v8 + 292))
  {
    if (*(_WORD *)v4) {
      return 0;
    }
    uint64_t result = 0;
    __int16 v10 = 1282;
    goto LABEL_37;
  }
  if (a3 != 35001)
  {
LABEL_34:
    if (*(_WORD *)v4) {
      return 0;
    }
    uint64_t result = 0;
    __int16 v10 = 1280;
LABEL_37:
    *(_WORD *)uint64_t v4 = v10;
    return result;
  }
  if (*(unsigned char *)(v8 + 164)) {
    return 0;
  }
  *(unsigned char *)(v8 + 292) = 1;
  *(void *)(v8 + 280) = *(void *)(v8 + 152);
  *(_DWORD *)(v8 + 288) = 2;
  *(_WORD *)(v8 + 162) = -30535;
  (*(void (**)(void, void))(*(void *)(a1 + 29448) + 1024))(*(void *)(a1 + 29016), *(void *)(v8 + 40 + 8 * *(unsigned __int8 *)(a1 + 32500)));
  if (*(void *)(v8 + 192) && !*(unsigned char *)(v8 + 167))
  {
    gleSynchronizeBufferOnCurrentDevices(a1, v8 + 40);
  }
  else if (*(unsigned char *)(v8 + 165))
  {
    (*(void (**)(void, uint64_t, void, void))(*(void *)(a1 + 29448) + 272))(*(void *)(a1 + 29016), 3, 0, *(void *)(v8 + 40 + 8 * *(unsigned __int8 *)(v4 + 2667)));
    gfxWaitBufferOnDevices();
  }
  if (*(unsigned char *)(v4 + 2649)
    && !*(unsigned char *)(v8 + 294)
    && (*(unsigned char *)(v8 + 165) || *(unsigned char *)(*(void *)(a1 + 29032) + 102)))
  {
    LOBYTE(v11) = *(unsigned char *)(v8 + 167);
    if ((_BYTE)v11) {
      int v11 = (*(unsigned __int8 *)(v8 + 8 * *(unsigned __int8 *)(v4 + 2667) + 304) >> 2) & 1;
    }
  }
  else
  {
    LOBYTE(v11) = 1;
  }
  *(unsigned char *)(v8 + 298) = v11;
  return *(void *)(v8 + 136);
}

uint64_t gleNeedsFlushOnUnmap(uint64_t a1, unsigned char *a2)
{
  if (!*(unsigned char *)(a1 + 32481) || a2[294] || !a2[165] && !*(unsigned char *)(*(void *)(a1 + 29032) + 102)) {
    return 1;
  }
  if (a2[167]) {
    return (*(_DWORD *)&a2[8 * *(unsigned __int8 *)(a1 + 32499) + 304] >> 2) & 1;
  }
  return 0;
}

uint64_t glMapBuffer_PackThread(uint64_t a1, int a2, int a3)
{
  uint64_t v5 = (__int16 *)(a1 + 29832);
  if (a2 > 35344)
  {
    if (a2 <= 36333)
    {
      if (a2 != 35345)
      {
        if (a2 != 35982) {
          goto LABEL_35;
        }
        uint64_t v6 = 26504;
        goto LABEL_25;
      }
    }
    else if (a2 != 36334)
    {
      if (a2 == 36662)
      {
        if ((*(unsigned char *)(a1 + 32501) & 0xFE) == 2) {
          goto LABEL_35;
        }
        uint64_t v6 = 26520;
      }
      else
      {
        if (a2 != 36663 || (*(unsigned char *)(a1 + 32501) & 0xFE) == 2) {
          goto LABEL_35;
        }
        uint64_t v6 = 26528;
      }
      goto LABEL_25;
    }
    uint64_t v6 = 26496;
LABEL_25:
    long long v7 = (uint64_t *)(a1 + v6);
    goto LABEL_26;
  }
  if (a2 > 35050)
  {
    if (a2 == 35051)
    {
      uint64_t v6 = 26480;
    }
    else
    {
      if (a2 != 35052) {
        goto LABEL_35;
      }
      uint64_t v6 = 26488;
    }
    goto LABEL_25;
  }
  if (a2 == 34962)
  {
    uint64_t v6 = 26464;
    goto LABEL_25;
  }
  if (a2 != 34963) {
    goto LABEL_35;
  }
  long long v7 = *(uint64_t **)(a1 + 26448);
  if (!v7) {
    long long v7 = (uint64_t *)(a1 + 26472);
  }
LABEL_26:
  uint64_t v8 = *v7;
  if (!*v7 || *(unsigned char *)(v8 + 56))
  {
    if (*v5) {
      return 0;
    }
    uint64_t result = 0;
    __int16 v12 = 1282;
    goto LABEL_38;
  }
  if (a3 != 35001)
  {
LABEL_35:
    if (*v5) {
      return 0;
    }
    uint64_t result = 0;
    __int16 v12 = 1280;
LABEL_38:
    *uint64_t v5 = v12;
    return result;
  }
  if (*(unsigned char *)(v8 + 28)) {
    return 0;
  }
  __int16 v9 = *(_WORD *)(v8 + 57);
  if ((v9 & 0xA) != 0 || (v9 & 1) != 0 && *(unsigned char *)(v8 + 29) || !*(void *)v8)
  {
    (*(void (**)(uint64_t))(a1 + 27752))(a1);
    uint64_t result = glMapBuffer_Exec(a1, a2, 35001);
  }
  else
  {
    __int16 v10 = gleAddCommand(a1, (uint64_t)glMapBuffer_UnpackThread, 8);
    *__int16 v10 = a2;
    v10[1] = 35001;
    uint64_t result = *(void *)v8;
  }
  *(unsigned char *)(v8 + 56) = 1;
  *(_WORD *)(v8 + 26) = -30535;
  return result;
}

uint64_t glMapBuffer_UnpackThread(uint64_t a1, int *a2)
{
  uint64_t v2 = 0;
  int v3 = *a2;
  if (*a2 <= 35344)
  {
    if (v3 > 35050)
    {
      if (v3 == 35051)
      {
        uint64_t v2 = *(void *)(a1 + 19328);
      }
      else if (v3 == 35052)
      {
        uint64_t v2 = *(void *)(a1 + 19336);
      }
    }
    else if (v3 == 34962)
    {
      uint64_t v2 = *(void *)(a1 + 19312);
    }
    else if (v3 == 34963)
    {
      uint64_t v4 = *(void *)(a1 + 26384);
      if (v4) {
        uint64_t v2 = *(void *)(v4 + 1232);
      }
      else {
        uint64_t v2 = *(void *)(a1 + 19320);
      }
    }
    goto LABEL_26;
  }
  if (v3 <= 36333)
  {
    if (v3 != 35345)
    {
      if (v3 == 35982) {
        uint64_t v2 = *(void *)(a1 + 19352);
      }
      goto LABEL_26;
    }
LABEL_19:
    uint64_t v2 = *(void *)(a1 + 19344);
    goto LABEL_26;
  }
  if (v3 == 36334) {
    goto LABEL_19;
  }
  if (v3 != 36662)
  {
    if (v3 != 36663) {
      goto LABEL_26;
    }
    if ((*(unsigned char *)(a1 + 32501) & 0xFE) != 2)
    {
      uint64_t v2 = *(void *)(a1 + 19376);
      goto LABEL_26;
    }
    goto LABEL_21;
  }
  if ((*(unsigned char *)(a1 + 32501) & 0xFE) == 2)
  {
LABEL_21:
    uint64_t v2 = 0;
    goto LABEL_26;
  }
  uint64_t v2 = *(void *)(a1 + 19368);
LABEL_26:
  LOBYTE(v5) = 1;
  *(unsigned char *)(v2 + 292) = 1;
  *(void *)(v2 + 280) = *(void *)(v2 + 152);
  *(_DWORD *)(v2 + 288) = a2[1] - 34999;
  *(_WORD *)(v2 + 162) = a2[1];
  if (*(unsigned char *)(a1 + 32481))
  {
    if (!*(unsigned char *)(v2 + 294) && (*(unsigned char *)(v2 + 165) || *(unsigned char *)(*(void *)(a1 + 29032) + 102)))
    {
      LOBYTE(v5) = *(unsigned char *)(v2 + 167);
      if ((_BYTE)v5) {
        int v5 = (*(unsigned __int8 *)(v2 + 8 * *(unsigned __int8 *)(a1 + 32499) + 304) >> 2) & 1;
      }
    }
    else
    {
      LOBYTE(v5) = 1;
    }
  }
  *(unsigned char *)(v2 + 298) = v5;
  return 8;
}

uint64_t glUnmapBuffer_Exec(uint64_t a1, int a2)
{
  uint64_t v2 = (__int16 *)(a1 + 29832);
  if (a2 > 35344)
  {
    if (a2 <= 36333)
    {
      if (a2 != 35345)
      {
        if (a2 == 35982)
        {
          uint64_t v3 = 19352;
          goto LABEL_29;
        }
LABEL_22:
        if (!*v2)
        {
          uint64_t result = 0;
          __int16 v7 = 1280;
LABEL_27:
          *uint64_t v2 = v7;
          return result;
        }
        return 0;
      }
    }
    else if (a2 != 36334)
    {
      if (a2 == 36662)
      {
        if ((*(unsigned char *)(a1 + 32501) & 0xFE) != 2)
        {
          uint64_t v3 = 19368;
          goto LABEL_29;
        }
      }
      else if (a2 == 36663 && (*(unsigned char *)(a1 + 32501) & 0xFE) != 2)
      {
        uint64_t v3 = 19376;
LABEL_29:
        int v5 = (uint64_t *)(a1 + v3);
        goto LABEL_30;
      }
      goto LABEL_22;
    }
    uint64_t v3 = 19344;
    goto LABEL_29;
  }
  if (a2 > 35050)
  {
    if (a2 == 35051)
    {
      uint64_t v3 = 19328;
      goto LABEL_29;
    }
    if (a2 == 35052)
    {
      uint64_t v3 = 19336;
      goto LABEL_29;
    }
    goto LABEL_22;
  }
  if (a2 == 34962)
  {
    uint64_t v3 = 19312;
    goto LABEL_29;
  }
  if (a2 != 34963) {
    goto LABEL_22;
  }
  uint64_t v4 = *(void *)(a1 + 26384);
  if (v4) {
    int v5 = (uint64_t *)(v4 + 1232);
  }
  else {
    int v5 = (uint64_t *)(a1 + 19320);
  }
LABEL_30:
  uint64_t v8 = *v5;
  if (!*v5 || !*(unsigned char *)(v8 + 292))
  {
    if (!*v2)
    {
      uint64_t result = 0;
      __int16 v7 = 1282;
      goto LABEL_27;
    }
    return 0;
  }
  glUnmapBuffer_Core(a1, v8);
  return 1;
}

uint64_t glUnmapBuffer_Core(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = (unsigned char *)(result + 32496);
  uint64_t v5 = a2 + 40;
  if (*(unsigned char *)(a2 + 292) == 2)
  {
    if (*(unsigned char *)(a2 + 298))
    {
      if ((*(_DWORD *)(a2 + 288) & 0x12) == 2)
      {
        *(unsigned char *)(a2 + 298) = 0;
        uint64_t result = (*(uint64_t (**)(void, void, void, void, void))(*(void *)(result + 29448) + 416))(*(void *)(result + 29016), *(void *)(v5 + 8 * *(unsigned __int8 *)(result + 32499)), *(void *)(a2 + 272), *(void *)(a2 + 280), *(void *)(a2 + 136) + *(void *)(a2 + 272));
        if (!result) {
          *(unsigned char *)(a2 + 298) = 1;
        }
      }
    }
    *(unsigned char *)(a2 + 165) = *(unsigned char *)(a2 + 297);
    *(unsigned char *)(a2 + 294) = *(unsigned char *)(a2 + 296);
  }
  *(void *)(a2 + 272) = 0;
  *(void *)(a2 + 280) = 0;
  *(void *)(a2 + 285) = 0;
  if (*(unsigned char *)(a2 + 298))
  {
    *(void *)(a2 + 192) = 0;
    *(unsigned char *)(a2 + 167) = 1;
    uint64_t v6 = *v4;
    if (*v4)
    {
      __int16 v7 = (_DWORD *)(a2 + 304);
      do
      {
        *v7 |= 4u;
        v7 += 2;
        --v6;
      }
      while (v6);
    }
    return gleDirtyBufferObjectCurrentBindPoints(v3, v5);
  }
  else
  {
    *(void *)(a2 + 192) = *(void *)(v3 + 29024);
    *(unsigned char *)(a2 + 167) = 1;
  }
  return result;
}

uint64_t glUnmapBuffer_PackThread(uint64_t a1, int a2)
{
  uint64_t v2 = (__int16 *)(a1 + 29832);
  if (a2 > 35344)
  {
    if (a2 <= 36333)
    {
      if (a2 != 35345)
      {
        if (a2 == 35982)
        {
          uint64_t v3 = 26504;
          goto LABEL_29;
        }
LABEL_22:
        if (!*v2)
        {
          uint64_t result = 0;
          __int16 v6 = 1280;
LABEL_27:
          *uint64_t v2 = v6;
          return result;
        }
        return 0;
      }
    }
    else if (a2 != 36334)
    {
      if (a2 == 36662)
      {
        if ((*(unsigned char *)(a1 + 32501) & 0xFE) != 2)
        {
          uint64_t v3 = 26520;
          goto LABEL_29;
        }
      }
      else if (a2 == 36663 && (*(unsigned char *)(a1 + 32501) & 0xFE) != 2)
      {
        uint64_t v3 = 26528;
LABEL_29:
        uint64_t v4 = (uint64_t *)(a1 + v3);
        goto LABEL_30;
      }
      goto LABEL_22;
    }
    uint64_t v3 = 26496;
    goto LABEL_29;
  }
  if (a2 > 35050)
  {
    if (a2 == 35051)
    {
      uint64_t v3 = 26480;
      goto LABEL_29;
    }
    if (a2 == 35052)
    {
      uint64_t v3 = 26488;
      goto LABEL_29;
    }
    goto LABEL_22;
  }
  if (a2 == 34962)
  {
    uint64_t v3 = 26464;
    goto LABEL_29;
  }
  if (a2 != 34963) {
    goto LABEL_22;
  }
  uint64_t v4 = *(uint64_t **)(a1 + 26448);
  if (!v4) {
    uint64_t v4 = (uint64_t *)(a1 + 26472);
  }
LABEL_30:
  uint64_t v7 = *v4;
  if (!v7 || !*(unsigned char *)(v7 + 56))
  {
    if (!*v2)
    {
      uint64_t result = 0;
      __int16 v6 = 1282;
      goto LABEL_27;
    }
    return 0;
  }
  *(unsigned char *)(v7 + 56) = 0;
  *(_DWORD *)gleAddCommand(a1, (uint64_t)glUnmapBuffer_UnpackThread, 4) = a2;
  return 1;
}

uint64_t glUnmapBuffer_UnpackThread(uint64_t a1, int *a2)
{
  uint64_t v3 = 0;
  int v4 = *a2;
  if (v4 <= 35344)
  {
    if (v4 > 35050)
    {
      if (v4 == 35051)
      {
        uint64_t v3 = *(void *)(a1 + 19328);
      }
      else if (v4 == 35052)
      {
        uint64_t v3 = *(void *)(a1 + 19336);
      }
    }
    else if (v4 == 34962)
    {
      uint64_t v3 = *(void *)(a1 + 19312);
    }
    else if (v4 == 34963)
    {
      uint64_t v5 = *(void *)(a1 + 26384);
      if (v5) {
        uint64_t v3 = *(void *)(v5 + 1232);
      }
      else {
        uint64_t v3 = *(void *)(a1 + 19320);
      }
    }
    goto LABEL_26;
  }
  if (v4 <= 36333)
  {
    if (v4 != 35345)
    {
      if (v4 == 35982) {
        uint64_t v3 = *(void *)(a1 + 19352);
      }
      goto LABEL_26;
    }
LABEL_19:
    uint64_t v3 = *(void *)(a1 + 19344);
    goto LABEL_26;
  }
  switch(v4)
  {
    case 36334:
      goto LABEL_19;
    case 36662:
      if ((*(unsigned char *)(a1 + 32501) & 0xFE) != 2)
      {
        uint64_t v3 = *(void *)(a1 + 19368);
        break;
      }
      goto LABEL_21;
    case 36663:
      if ((*(unsigned char *)(a1 + 32501) & 0xFE) != 2)
      {
        uint64_t v3 = *(void *)(a1 + 19376);
        break;
      }
LABEL_21:
      uint64_t v3 = 0;
      break;
  }
LABEL_26:
  glUnmapBuffer_Core(a1, v3);
  return 4;
}

uint64_t glGetBufferParameteriv_Exec(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  uint64_t v6 = 0;
  uint64_t result = gleGetBufferParameterCore(a1, a2, a3, &v6);
  if (result) {
    *a4 = v6;
  }
  return result;
}

uint64_t gleGetBufferParameterCore(uint64_t a1, int a2, int a3, void *a4)
{
  int v4 = (__int16 *)(a1 + 29832);
  if (a2 > 35344)
  {
    if (a2 <= 36333)
    {
      if (a2 != 35345)
      {
        if (a2 != 35982) {
          goto LABEL_37;
        }
        uint64_t v5 = 19352;
        goto LABEL_25;
      }
    }
    else if (a2 != 36334)
    {
      if (a2 == 36662)
      {
        if ((*(unsigned char *)(a1 + 32501) & 0xFE) == 2) {
          goto LABEL_37;
        }
        uint64_t v5 = 19368;
      }
      else
      {
        if (a2 != 36663 || (*(unsigned char *)(a1 + 32501) & 0xFE) == 2) {
          goto LABEL_37;
        }
        uint64_t v5 = 19376;
      }
      goto LABEL_25;
    }
    uint64_t v5 = 19344;
LABEL_25:
    uint64_t v7 = (uint64_t *)(a1 + v5);
    goto LABEL_26;
  }
  if (a2 > 35050)
  {
    if (a2 == 35051)
    {
      uint64_t v5 = 19328;
    }
    else
    {
      if (a2 != 35052) {
        goto LABEL_37;
      }
      uint64_t v5 = 19336;
    }
    goto LABEL_25;
  }
  if (a2 == 34962)
  {
    uint64_t v5 = 19312;
    goto LABEL_25;
  }
  if (a2 != 34963) {
    goto LABEL_37;
  }
  uint64_t v6 = *(void *)(a1 + 26384);
  if (v6) {
    uint64_t v7 = (uint64_t *)(v6 + 1232);
  }
  else {
    uint64_t v7 = (uint64_t *)(a1 + 19320);
  }
LABEL_26:
  uint64_t v8 = *v7;
  if (!v8)
  {
    if (*v4) {
      return 0;
    }
    uint64_t result = 0;
    __int16 v11 = 1282;
    goto LABEL_43;
  }
  if (a3 <= 35345)
  {
    if (a3 > 35002)
    {
      if (a3 == 35003)
      {
        uint64_t v9 = *(unsigned __int16 *)(v8 + 162);
        goto LABEL_48;
      }
      if (a3 == 35004)
      {
        uint64_t v9 = *(unsigned char *)(v8 + 292) != 0;
        goto LABEL_48;
      }
    }
    else
    {
      if (a3 == 34660)
      {
        uint64_t v9 = *(void *)(v8 + 152);
        goto LABEL_48;
      }
      if (a3 == 34661)
      {
        uint64_t v9 = *(unsigned __int16 *)(v8 + 160);
        goto LABEL_48;
      }
    }
    goto LABEL_37;
  }
  if (a3 <= 37150) {
    goto LABEL_37;
  }
  if (a3 == 37151)
  {
    uint64_t v9 = *(unsigned int *)(v8 + 288);
    goto LABEL_48;
  }
  if (a3 == 37152)
  {
    uint64_t v9 = *(void *)(v8 + 280);
    goto LABEL_48;
  }
  if (a3 != 37153)
  {
LABEL_37:
    if (*v4) {
      return 0;
    }
    uint64_t result = 0;
    __int16 v11 = 1280;
LABEL_43:
    *int v4 = v11;
    return result;
  }
  uint64_t v9 = *(void *)(v8 + 272);
LABEL_48:
  *a4 = v9;
  return 1;
}

uint64_t glGetBufferParameteriv_ExecThread(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  (*(void (**)(void))(a1 + 27752))();
  uint64_t v9 = 0;
  uint64_t result = gleGetBufferParameterCore(a1, a2, a3, &v9);
  if (result) {
    *a4 = v9;
  }
  return result;
}

uint64_t glGetBufferParameteri64v_ExecThread(uint64_t a1, int a2, int a3, void *a4)
{
  (*(void (**)(void))(a1 + 27752))();

  return gleGetBufferParameterCore(a1, a2, a3, a4);
}

uint64_t glGetBufferPointerv_Exec(uint64_t result, int a2, int a3, void *a4)
{
  int v4 = (__int16 *)(result + 29832);
  if (a2 > 35344)
  {
    if (a2 <= 36333)
    {
      if (a2 != 35345)
      {
        if (a2 != 35982) {
          goto LABEL_30;
        }
        uint64_t v5 = 19352;
        goto LABEL_25;
      }
    }
    else if (a2 != 36334)
    {
      if (a2 == 36662)
      {
        if ((*(unsigned char *)(result + 32501) & 0xFE) == 2) {
          goto LABEL_30;
        }
        uint64_t v5 = 19368;
      }
      else
      {
        if (a2 != 36663 || (*(unsigned char *)(result + 32501) & 0xFE) == 2) {
          goto LABEL_30;
        }
        uint64_t v5 = 19376;
      }
      goto LABEL_25;
    }
    uint64_t v5 = 19344;
LABEL_25:
    uint64_t v7 = (uint64_t *)(result + v5);
    goto LABEL_26;
  }
  if (a2 > 35050)
  {
    if (a2 == 35051)
    {
      uint64_t v5 = 19328;
    }
    else
    {
      if (a2 != 35052) {
        goto LABEL_30;
      }
      uint64_t v5 = 19336;
    }
    goto LABEL_25;
  }
  if (a2 == 34962)
  {
    uint64_t v5 = 19312;
    goto LABEL_25;
  }
  if (a2 != 34963) {
    goto LABEL_30;
  }
  uint64_t v6 = *(void *)(result + 26384);
  if (v6) {
    uint64_t v7 = (uint64_t *)(v6 + 1232);
  }
  else {
    uint64_t v7 = (uint64_t *)(result + 19320);
  }
LABEL_26:
  uint64_t v8 = *v7;
  if (!v8)
  {
    if (*v4) {
      return result;
    }
    __int16 v10 = 1282;
LABEL_33:
    *int v4 = v10;
    return result;
  }
  if (a3 != 35005)
  {
LABEL_30:
    if (*v4) {
      return result;
    }
    __int16 v10 = 1280;
    goto LABEL_33;
  }
  if (*(unsigned char *)(v8 + 292)) {
    uint64_t v9 = *(void *)(v8 + 136) + *(void *)(v8 + 272);
  }
  else {
    uint64_t v9 = 0;
  }
  *a4 = v9;
  return result;
}

uint64_t glGetBufferPointerv_ExecThread(uint64_t a1, int a2, int a3, void *a4)
{
  (*(void (**)(void))(a1 + 27752))();

  return glGetBufferPointerv_Exec(a1, a2, a3, a4);
}

void glBindBufferRange_Exec(uint64_t a1, int a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  if (a2 == 35982)
  {
    if (a3 < 4)
    {
      if (*(__int16 *)(*(void *)(a1 + 26432) + 42) != -1)
      {
        uint64_t v14 = (__int16 *)(a1 + 29832);
        if (*(_WORD *)(a1 + 29832)) {
          return;
        }
        __int16 v15 = 1282;
        goto LABEL_16;
      }
      if (!a4)
      {
        os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
        goto LABEL_29;
      }
      if (a6 >= 1 && ((a6 | a5) & 3) == 0)
      {
        __int16 v13 = (os_unfair_lock_s **)(a1 + 19296);
        os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
        goto LABEL_22;
      }
    }
    goto LABEL_9;
  }
  if (a2 != 35345)
  {
    uint64_t v14 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v15 = 1280;
    goto LABEL_16;
  }
  uint64_t v12 = *(void *)(a1 + 29480);
  if (*(unsigned __int8 *)(v12 + 506) <= a3 || a6 < 1 || ((*(unsigned __int16 *)(v12 + 504) - 1) & a5) != 0)
  {
LABEL_9:
    uint64_t v14 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v15 = 1281;
LABEL_16:
    *uint64_t v14 = v15;
    return;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  if (!a4) {
    goto LABEL_29;
  }
  __int16 v13 = (os_unfair_lock_s **)(a1 + 19296);
LABEL_22:
  if (!gleLookupHashObject((uint64_t)&(*v13)[66], a4))
  {
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1281;
    }
    uint64_t v16 = *v13 + 81;
    os_unfair_lock_unlock(v16);
    return;
  }
LABEL_29:
  gleBindBufferObject(a1, a2, a4);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));

  gleBindBufferRange(a1, a2, a3, a5, a6);
}

void gleBindBufferRange(uint64_t a1, int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = a1 + 28652;
  if (a2 == 35982)
  {
    uint64_t v10 = *(void *)(a1 + 26432) + 128;
    uint64_t v11 = *(void *)(v10 + 8 * a3);
    uint64_t v12 = *(void *)(a1 + 19352);
    int v13 = 1 << a3;
    if (v12)
    {
      *(void *)(v10 + 8 * a3) = v12;
      *(_DWORD *)(*(void *)(a1 + 26432) + 168) |= v13;
      ++*(_DWORD *)(v12 + 20);
      uint64_t v14 = *(unsigned __int8 *)(v9 + 3844);
      if (*(unsigned char *)(v9 + 3844))
      {
        __int16 v15 = (uint64_t *)(v12 + 40);
        uint64_t v16 = (void *)(a1 + 8 * a3 + 33552);
        do
        {
          uint64_t v17 = *v15++;
          void *v16 = v17;
          v16 += 209;
          --v14;
        }
        while (v14);
      }
    }
    else
    {
      *(void *)(v10 + 8 * a3) = 0;
      *(_DWORD *)(*(void *)(a1 + 26432) + 168) &= ~v13;
      uint64_t v29 = *(unsigned __int8 *)(v9 + 3844);
      if (*(unsigned char *)(v9 + 3844))
      {
        unsigned int v30 = (void *)(a1 + 8 * a3 + 33552);
        do
        {
          void *v30 = 0;
          v30 += 209;
          --v29;
        }
        while (v29);
      }
      a4 = 0;
      a5 = 0;
    }
    *(void *)(*(void *)(a1 + 26432) + 8 * a3 + 48) = a4;
    *(void *)(*(void *)(a1 + 26432) + 8 * a3 + 88) = a5;
    uint64_t v31 = *(void *)(a1 + 26432) + 8 * a3;
    gleTransferBufferBindingToGLD(v12, *(void *)(v31 + 48), *(void *)(v31 + 88), (uint64_t *)(a1 + 8 * a3 + 17992), (uint64_t *)(a1 + 8 * a3 + 18024), 4, 4);
    *(_DWORD *)uint64_t v9 = 0;
    uint64_t v32 = (_DWORD *)(a1 + 1524);
    int v33 = 0x40000000;
    goto LABEL_29;
  }
  uint64_t v18 = *(void **)(a1 + 24888);
  if (!v18)
  {
    __int16 v19 = malloc_type_calloc(0x18uLL, 8uLL, 0x2BF3136CuLL);
    if (!v19
      || (*(void *)(a1 + 24872) = v19, (unsigned int v20 = malloc_type_calloc(0x18uLL, 8uLL, 0x2BF3136CuLL)) == 0)
      || (*(void *)(a1 + 24880) = v20, (unsigned int v21 = malloc_type_calloc(0x18uLL, 8uLL, 0x2BF3136CuLL)) == 0))
    {
      abort();
    }
    uint64_t v18 = v21;
    *(void *)(a1 + 24888) = v21;
  }
  uint64_t v11 = v18[a3];
  uint64_t v22 = *(void *)(a1 + 19344);
  uint64_t v23 = 1 << a3;
  if (v22)
  {
    v18[a3] = v22;
    *(void *)(a1 + 8 * (a3 >> 6) + 24896) |= v23;
    uint64_t v24 = *(void *)(a1 + 24872);
    *(void *)(v24 + 8 * a3) = a4;
    *(void *)(*(void *)(a1 + 24880) + 8 * a3) = a5;
    ++*(_DWORD *)(v22 + 20);
    uint64_t v25 = *(unsigned __int8 *)(v9 + 3844);
    if (*(unsigned char *)(v9 + 3844))
    {
      unsigned int v26 = (uint64_t *)(v22 + 40);
      unint64_t v27 = (void *)(a1 + 8 * a3 + 33704);
      do
      {
        uint64_t v28 = *v26++;
        *unint64_t v27 = v28;
        v27 += 209;
        --v25;
      }
      while (v25);
    }
  }
  else
  {
    v18[a3] = 0;
    *(void *)(a1 + 8 * (a3 >> 6) + 24896) &= ~v23;
    uint64_t v24 = *(void *)(a1 + 24872);
    *(void *)(v24 + 8 * a3) = 0;
    *(void *)(*(void *)(a1 + 24880) + 8 * a3) = 0;
    uint64_t v34 = *(unsigned __int8 *)(v9 + 3844);
    if (*(unsigned char *)(v9 + 3844))
    {
      uint64_t v35 = (void *)(a1 + 8 * a3 + 33704);
      do
      {
        *uint64_t v35 = 0;
        v35 += 209;
        --v34;
      }
      while (v34);
    }
    a5 = 0;
  }
  gleTransferBufferBindingToGLD(v22, *(void *)(v24 + 8 * a3), a5, (uint64_t *)(a1 + 16 * a3 + 18056), (uint64_t *)(a1 + 16 * a3 + 18064), *(unsigned __int16 *)(*(void *)(a1 + 29480) + 504), 1);
  *(_DWORD *)uint64_t v9 = 0;
  *(_DWORD *)(a1 + 1532) |= 0x20000000u;
  uint64_t v36 = *(void *)(a1 + 24768);
  if (v36 && *(_DWORD *)(v36 + 3780))
  {
    uint64_t v32 = (_DWORD *)(a1 + 1548);
    int v33 = 512;
LABEL_29:
    *v32 |= v33;
  }
  if (v11)
  {
    int v37 = *(_DWORD *)(v11 + 20) - 1;
    *(_DWORD *)(v11 + 20) = v37;
    if (!v37)
    {
      gleUnbindAndFreeBufferObject(a1, (void *)v11);
    }
  }
}

void glBindBufferBase_Exec(uint64_t a1, int a2, unsigned int a3, unsigned int a4)
{
  if (a2 != 35982)
  {
    if (a2 != 35345)
    {
      uint64_t v8 = (__int16 *)(a1 + 29832);
      if (*(_WORD *)(a1 + 29832)) {
        return;
      }
      __int16 v9 = 1280;
      goto LABEL_13;
    }
    if (*(unsigned __int8 *)(*(void *)(a1 + 29480) + 506) > a3) {
      goto LABEL_15;
    }
LABEL_6:
    uint64_t v8 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v9 = 1281;
LABEL_13:
    *uint64_t v8 = v9;
    return;
  }
  if (a3 >= 4) {
    goto LABEL_6;
  }
  if (*(__int16 *)(*(void *)(a1 + 26432) + 42) != -1)
  {
    uint64_t v8 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v9 = 1282;
    goto LABEL_13;
  }
LABEL_15:
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  gleBindBufferObject(a1, a2, a4);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));

  gleBindBufferRange(a1, a2, a3, 0, 0);
}

void glBindBufferRange_PackThread(uint64_t a1, int a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  if (a2 == 35982)
  {
    if (a3 < 4)
    {
      if (*(__int16 *)(*(void *)(a1 + 26432) + 42) != -1)
      {
        int v13 = (__int16 *)(a1 + 29832);
        if (*(_WORD *)(a1 + 29832)) {
          return;
        }
        __int16 v14 = 1282;
        goto LABEL_16;
      }
      if (!a4)
      {
LABEL_23:
        gleBindBufferObject_Thread((void *)a1, a2, a4);
        __int16 v15 = gleAddCommand(a1, (uint64_t)glBindBufferRange_UnpackThread, 24);
        *(_DWORD *)__int16 v15 = a2;
        *((_DWORD *)v15 + 1) = a3;
        v15[1] = a5;
        v15[2] = a6;
        return;
      }
      if (a6 >= 1 && ((a6 | a5) & 3) == 0) {
        goto LABEL_21;
      }
    }
    goto LABEL_9;
  }
  if (a2 != 35345)
  {
    int v13 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v14 = 1280;
    goto LABEL_16;
  }
  uint64_t v12 = *(void *)(a1 + 29480);
  if (*(unsigned __int8 *)(v12 + 506) <= a3 || a6 < 1 || ((*(unsigned __int16 *)(v12 + 504) - 1) & a5) != 0)
  {
LABEL_9:
    int v13 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v14 = 1281;
LABEL_16:
    *int v13 = v14;
    return;
  }
  if (!a4) {
    goto LABEL_23;
  }
LABEL_21:
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  if (gleLookupHashObject(*(void *)(a1 + 19296) + 264, a4))
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    goto LABEL_23;
  }
  if (!*(_WORD *)(a1 + 29832)) {
    *(_WORD *)(a1 + 29832) = 1281;
  }
  uint64_t v16 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);

  os_unfair_lock_unlock(v16);
}

uint64_t glBindBufferRange_UnpackThread(uint64_t a1, uint64_t a2)
{
  return 24;
}

void *glBindBufferBase_PackThread(void *result, int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v6 = (uint64_t)result;
  if (a2 != 35982)
  {
    if (a2 != 35345)
    {
      uint64_t v7 = (__int16 *)(result + 3729);
      if (*((_WORD *)result + 14916)) {
        return result;
      }
      __int16 v8 = 1280;
      goto LABEL_13;
    }
    if (*(unsigned __int8 *)(result[3685] + 506) > a3) {
      goto LABEL_14;
    }
LABEL_6:
    uint64_t v7 = (__int16 *)(result + 3729);
    if (*((_WORD *)result + 14916)) {
      return result;
    }
    __int16 v8 = 1281;
LABEL_13:
    *uint64_t v7 = v8;
    return result;
  }
  if (a3 >= 4) {
    goto LABEL_6;
  }
  if (*(__int16 *)(result[3304] + 42) != -1)
  {
    uint64_t v7 = (__int16 *)(result + 3729);
    if (*((_WORD *)result + 14916)) {
      return result;
    }
    __int16 v8 = 1282;
    goto LABEL_13;
  }
LABEL_14:
  gleBindBufferObject_Thread(result, a2, a4);
  uint64_t result = gleAddCommand(v6, (uint64_t)glBindBufferRange_UnpackThread, 24);
  *(_DWORD *)uint64_t result = a2;
  *((_DWORD *)result + 1) = a3;
  result[1] = 0;
  result[2] = 0;
  return result;
}

uint64_t glCopyBufferSubData_Exec(uint64_t result, int a2, int a3, uint64_t a4, uint64_t a5, size_t a6)
{
  uint64_t v6 = 0;
  char v7 = 0;
  __int16 v8 = (__int16 *)(result + 29832);
  if (a2 <= 35344)
  {
    if (a2 > 35050)
    {
      if (a2 == 35051)
      {
        uint64_t v6 = *(void *)(result + 19328);
      }
      else
      {
        if (a2 != 35052) {
          goto LABEL_27;
        }
        uint64_t v6 = *(void *)(result + 19336);
      }
    }
    else if (a2 == 34962)
    {
      uint64_t v6 = *(void *)(result + 19312);
    }
    else
    {
      if (a2 != 34963) {
        goto LABEL_27;
      }
      uint64_t v9 = *(void *)(result + 26384);
      if (v9) {
        uint64_t v6 = *(void *)(v9 + 1232);
      }
      else {
        uint64_t v6 = *(void *)(result + 19320);
      }
    }
    goto LABEL_26;
  }
  if (a2 <= 36333)
  {
    if (a2 != 35345)
    {
      if (a2 != 35982) {
        goto LABEL_27;
      }
      uint64_t v6 = *(void *)(result + 19352);
      goto LABEL_26;
    }
    goto LABEL_19;
  }
  if (a2 == 36334)
  {
LABEL_19:
    uint64_t v6 = *(void *)(result + 19344);
    goto LABEL_26;
  }
  if (a2 == 36662)
  {
    if ((*(unsigned char *)(result + 32501) & 0xFE) != 2)
    {
      uint64_t v6 = *(void *)(result + 19368);
      goto LABEL_26;
    }
LABEL_21:
    char v7 = 0;
    uint64_t v6 = 0;
    goto LABEL_27;
  }
  if (a2 != 36663) {
    goto LABEL_27;
  }
  if ((*(unsigned char *)(result + 32501) & 0xFE) == 2) {
    goto LABEL_21;
  }
  uint64_t v6 = *(void *)(result + 19376);
LABEL_26:
  char v7 = 1;
LABEL_27:
  if (a3 > 35344)
  {
    if (a3 <= 36333)
    {
      if (a3 != 35345)
      {
        if (a3 != 35982) {
          goto LABEL_48;
        }
        uint64_t v10 = 19352;
        goto LABEL_53;
      }
    }
    else if (a3 != 36334)
    {
      if (a3 != 36662)
      {
        if (a3 != 36663 || (*(unsigned char *)(result + 32501) & 0xFE) == 2) {
          goto LABEL_48;
        }
        uint64_t v10 = 19376;
        goto LABEL_53;
      }
      if ((*(unsigned char *)(result + 32501) & 0xFE) == 2)
      {
LABEL_48:
        if (*v8) {
          return result;
        }
        __int16 v13 = 1280;
        goto LABEL_62;
      }
      uint64_t v10 = 19368;
LABEL_53:
      uint64_t v12 = (uint64_t *)(result + v10);
      goto LABEL_54;
    }
    uint64_t v10 = 19344;
    goto LABEL_53;
  }
  if (a3 > 35050)
  {
    if (a3 == 35051)
    {
      uint64_t v10 = 19328;
    }
    else
    {
      if (a3 != 35052) {
        goto LABEL_48;
      }
      uint64_t v10 = 19336;
    }
    goto LABEL_53;
  }
  if (a3 == 34962)
  {
    uint64_t v10 = 19312;
    goto LABEL_53;
  }
  if (a3 != 34963) {
    goto LABEL_48;
  }
  uint64_t v11 = *(void *)(result + 26384);
  if (v11) {
    uint64_t v12 = (uint64_t *)(v11 + 1232);
  }
  else {
    uint64_t v12 = (uint64_t *)(result + 19320);
  }
LABEL_54:
  if ((v7 & 1) == 0) {
    goto LABEL_48;
  }
  if (!v6 || (uint64_t v14 = *v12) == 0 || *(unsigned char *)(v6 + 292) || *(unsigned char *)(v14 + 292))
  {
    if (*v8) {
      return result;
    }
    __int16 v13 = 1282;
LABEL_62:
    *__int16 v8 = v13;
    return result;
  }
  if (((a5 | a4 | a6) & 0x8000000000000000) != 0
    || a6 + a4 > *(void *)(v6 + 152)
    || a6 + a5 > *(void *)(v14 + 152)
    || (uint64_t)(a6 + a4) > a5 && (uint64_t)(a6 + a5) > a4 && v6 == v14)
  {
    if (!*v8)
    {
      __int16 v13 = 1281;
      goto LABEL_62;
    }
  }
  else if (!*(unsigned char *)(v6 + 164) && !*(unsigned char *)(v14 + 164))
  {
    return glCopyBufferSubData_Core((void *)result, v6 + 40, v14 + 40, a4, a5, a6);
  }
  return result;
}

uint64_t glCopyBufferSubData_Core(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, size_t a6)
{
  uint64_t v12 = (unsigned __int8 *)(a1 + 4062);
  if (!*(void *)(a3 + 152)) {
    gfxWaitBufferOnDevices();
  }
  uint64_t result = (*(uint64_t (**)(void, void, void, uint64_t, uint64_t, size_t))(a1[3681] + 424))(a1[3627], *(void *)(a2 + 8 * v12[3]), *(void *)(a3 + 8 * v12[3]), a4, a5, a6);
  if (result) {
    goto LABEL_9;
  }
  uint64_t v14 = (const void *)(*(void *)(a2 + 96) + a4);
  if (*(void *)(a2 + 152)) {
    gleSynchronizeBufferOnCurrentDevicesForRead((uint64_t)a1, a2);
  }
  if ((*(unsigned char *)(a3 + 125) || *(unsigned char *)(a1[3629] + 102))
    && (uint64_t result = (*(uint64_t (**)(void, void, uint64_t, size_t, const void *))(a1[3681] + 416))(a1[3627], *(void *)(a3 + 8 * v12[3]), a5, a6, v14), result))
  {
LABEL_9:
    uint64_t v15 = a1[3628];
    *(unsigned char *)(a3 + 127) = 0;
    *(void *)(a3 + 152) = v15;
    uint64_t v16 = a1[3298];
    if (v16) {
      *(unsigned char *)(v16 + 1216) = 0;
    }
  }
  else
  {
    uint64_t v17 = (void *)(*(void *)(a3 + 96) + a5);
    if (*(void *)(a3 + 152))
    {
      gleSynchronizeBufferOnCurrentDevices((uint64_t)a1, a3);
    }
    else if (*(unsigned char *)(a3 + 125))
    {
      (*(void (**)(void, uint64_t, void, void))(a1[3681] + 280))(a1[3627], 3, 0, *(void *)(a3 + 8 * v12[3]));
    }
    memcpy(v17, v14, a6);
    *(unsigned char *)(a3 + 127) = 1;
    uint64_t v18 = *v12;
    if (*v12)
    {
      __int16 v19 = (_DWORD *)(a3 + 264);
      do
      {
        *v19 |= 4u;
        v19 += 2;
        --v18;
      }
      while (v18);
    }
    return gleDirtyBufferObjectCurrentBindPoints((uint64_t)a1, a3);
  }
  return result;
}

void *glCopyBufferSubData_PackThread(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = gleAddCommand(a1, (uint64_t)glCopyBufferSubData_UnpackThread, 32);
  *(_DWORD *)uint64_t result = a2;
  *((_DWORD *)result + 1) = a3;
  result[1] = a4;
  result[2] = a5;
  result[3] = a6;
  return result;
}

uint64_t glCopyBufferSubData_UnpackThread(uint64_t a1, uint64_t a2)
{
  return 32;
}

uint64_t glMapBufferRange_Exec(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v9 = a1 + 29832;
  if (*(unsigned __int8 *)(a1 + 32492) <= 8u) {
    unsigned int v10 = a5 & 0xFFFFFFF7;
  }
  else {
    unsigned int v10 = a5;
  }
  if (a2 > 35344)
  {
    if (a2 <= 36333)
    {
      if (a2 != 35345)
      {
        if (a2 == 35982)
        {
          uint64_t v11 = 19352;
          goto LABEL_30;
        }
LABEL_25:
        if (!*(_WORD *)v9)
        {
          uint64_t v14 = 0;
          __int16 v15 = 1280;
LABEL_45:
          *(_WORD *)uint64_t v9 = v15;
          return v14;
        }
        return 0;
      }
    }
    else if (a2 != 36334)
    {
      if (a2 == 36662)
      {
        if ((*(unsigned char *)(a1 + 32501) & 0xFE) != 2)
        {
          uint64_t v11 = 19368;
          goto LABEL_30;
        }
      }
      else if (a2 == 36663 && (*(unsigned char *)(a1 + 32501) & 0xFE) != 2)
      {
        uint64_t v11 = 19376;
LABEL_30:
        __int16 v13 = (uint64_t *)(a1 + v11);
        goto LABEL_31;
      }
      goto LABEL_25;
    }
    uint64_t v11 = 19344;
    goto LABEL_30;
  }
  if (a2 > 35050)
  {
    if (a2 == 35051)
    {
      uint64_t v11 = 19328;
      goto LABEL_30;
    }
    if (a2 == 35052)
    {
      uint64_t v11 = 19336;
      goto LABEL_30;
    }
    goto LABEL_25;
  }
  if (a2 == 34962)
  {
    uint64_t v11 = 19312;
    goto LABEL_30;
  }
  if (a2 != 34963) {
    goto LABEL_25;
  }
  uint64_t v12 = *(void *)(a1 + 26384);
  if (v12) {
    __int16 v13 = (uint64_t *)(v12 + 1232);
  }
  else {
    __int16 v13 = (uint64_t *)(a1 + 19320);
  }
LABEL_31:
  uint64_t v16 = *v13;
  if (!*v13 || *(unsigned char *)(v16 + 292)) {
    goto LABEL_40;
  }
  if ((a4 | a3) < 0 || (unint64_t v17 = *(void *)(v16 + 152), a4 + a3 > v17) || v10 >= 0x40)
  {
    if (!*(_WORD *)v9)
    {
      uint64_t v14 = 0;
      __int16 v15 = 1281;
      goto LABEL_45;
    }
    return 0;
  }
  if ((v10 & 3) == 0 || (v10 & 1) != 0 && (v10 & 0x2C) != 0 || (v10 & 0x12) == 0x10)
  {
LABEL_40:
    if (!*(_WORD *)v9)
    {
      uint64_t v14 = 0;
      __int16 v15 = 1282;
      goto LABEL_45;
    }
    return 0;
  }
  if (*(unsigned char *)(v16 + 164)) {
    return 0;
  }
  uint64_t v19 = *(void *)(v16 + 136);
  if (!v19 || !*(void *)(v16 + 144)) {
    goto LABEL_40;
  }
  uint64_t v25 = v16 + 40;
  int v20 = 1;
  if (a4 && (v10 & 0xC) != 0)
  {
    if (v17 == a4) {
      char v21 = 8;
    }
    else {
      char v21 = v10;
    }
    if ((v10 & 4) == 0) {
      char v21 = v10;
    }
    if ((v21 & 8) != 0)
    {
      int v24 = *(unsigned __int16 *)(v16 + 160);
      gleOrphanBufferObject(a1, v25);
      uint64_t v22 = gleAcquireBufferData(a1, v16 + 136, v17, a2, v24);
      gleApplyBufferData(a1, v25, (uint64_t)v22);
      gleDirtyBufferObjectCurrentBindPoints(a1, v25);
      uint64_t v19 = *(void *)(v16 + 136);
      if (v19)
      {
        int v20 = 0;
        goto LABEL_60;
      }
      if (!*(_WORD *)v9)
      {
        uint64_t v14 = 0;
        __int16 v15 = 1285;
        goto LABEL_45;
      }
      return 0;
    }
  }
LABEL_60:
  uint64_t v14 = v19 + a3;
  if (v10)
  {
    if ((v10 & 2) != 0) {
      __int16 v23 = -30534;
    }
    else {
      __int16 v23 = -30536;
    }
  }
  else
  {
    if ((v10 & 2) == 0) {
      goto LABEL_67;
    }
    __int16 v23 = -30535;
  }
  *(_WORD *)(v16 + 162) = v23;
LABEL_67:
  *(unsigned char *)(v16 + 297) = *(unsigned char *)(v16 + 165);
  *(unsigned char *)(v16 + 296) = *(unsigned char *)(v16 + 294);
  *(unsigned char *)(v16 + 165) = (v10 & 0x20) == 0;
  *(unsigned char *)(v16 + 294) = (v10 & 0x10) == 0;
  *(unsigned char *)(v16 + 292) = 2;
  *(void *)(v16 + 272) = a3;
  *(void *)(v16 + 280) = a4;
  *(_DWORD *)(v16 + 288) = v10;
  *(unsigned char *)(v16 + 298) = gleNeedsFlushOnUnmap(a1, (unsigned char *)v16);
  if (v20)
  {
    (*(void (**)(void, void))(*(void *)(a1 + 29448) + 1024))(*(void *)(a1 + 29016), *(void *)(v25 + 8 * *(unsigned __int8 *)(v9 + 2668)));
    if (*(void *)(v16 + 192) && !*(unsigned char *)(v16 + 167))
    {
      gleSynchronizeBufferOnCurrentDevices(a1, v25);
    }
    else if (*(unsigned char *)(v16 + 165))
    {
      (*(void (**)(void, uint64_t, void, void))(*(void *)(a1 + 29448) + 272))(*(void *)(a1 + 29016), 3, 0, *(void *)(v25 + 8 * *(unsigned __int8 *)(v9 + 2667)));
      gfxWaitBufferOnDevices();
    }
  }
  return v14;
}

uint64_t glFlushMappedBufferRange_Exec(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  int v4 = (__int16 *)(result + 29832);
  if (a2 > 35344)
  {
    if (a2 <= 36333)
    {
      if (a2 != 35345)
      {
        if (a2 == 35982)
        {
          uint64_t v5 = 19352;
          goto LABEL_28;
        }
LABEL_22:
        if (*v4) {
          return result;
        }
        __int16 v8 = 1280;
        goto LABEL_24;
      }
    }
    else if (a2 != 36334)
    {
      if (a2 == 36662)
      {
        if ((*(unsigned char *)(result + 32501) & 0xFE) != 2)
        {
          uint64_t v5 = 19368;
          goto LABEL_28;
        }
      }
      else if (a2 == 36663 && (*(unsigned char *)(result + 32501) & 0xFE) != 2)
      {
        uint64_t v5 = 19376;
LABEL_28:
        char v7 = (uint64_t *)(result + v5);
        goto LABEL_29;
      }
      goto LABEL_22;
    }
    uint64_t v5 = 19344;
    goto LABEL_28;
  }
  if (a2 > 35050)
  {
    if (a2 == 35051)
    {
      uint64_t v5 = 19328;
      goto LABEL_28;
    }
    if (a2 == 35052)
    {
      uint64_t v5 = 19336;
      goto LABEL_28;
    }
    goto LABEL_22;
  }
  if (a2 == 34962)
  {
    uint64_t v5 = 19312;
    goto LABEL_28;
  }
  if (a2 != 34963) {
    goto LABEL_22;
  }
  uint64_t v6 = *(void *)(result + 26384);
  if (v6) {
    char v7 = (uint64_t *)(v6 + 1232);
  }
  else {
    char v7 = (uint64_t *)(result + 19320);
  }
LABEL_29:
  uint64_t v9 = *v7;
  if (!*v7 || !*(unsigned char *)(v9 + 292) || *(unsigned char *)(v9 + 294))
  {
    if (*v4) {
      return result;
    }
    __int16 v8 = 1282;
    goto LABEL_24;
  }
  if ((a4 | a3) < 0 || (unint64_t)(a4 + a3) > *(void *)(v9 + 280))
  {
    if (*v4) {
      return result;
    }
    __int16 v8 = 1281;
LABEL_24:
    *int v4 = v8;
    return result;
  }
  if (a4 && !*(unsigned char *)(v9 + 164) && !*(unsigned char *)(v9 + 298))
  {
    uint64_t result = (*(uint64_t (**)(void, void))(*(void *)(result + 29448) + 416))(*(void *)(result + 29016), *(void *)(v9 + 40 + 8 * *(unsigned __int8 *)(result + 32499)));
    if (!result) {
      *(unsigned char *)(v9 + 298) = 1;
    }
  }
  return result;
}

uint64_t glMapBufferRange_ExecThread(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v10 = 0;
  char v11 = 0;
  uint64_t v12 = (__int16 *)(a1 + 29832);
  if (a2 <= 35344)
  {
    if (a2 > 35050)
    {
      if (a2 == 35051)
      {
        uint64_t v10 = *(void *)(a1 + 26480);
        goto LABEL_26;
      }
      if (a2 == 35052)
      {
        uint64_t v10 = *(void *)(a1 + 26488);
        goto LABEL_26;
      }
    }
    else
    {
      if (a2 == 34962)
      {
        uint64_t v10 = *(void *)(a1 + 26464);
        goto LABEL_26;
      }
      if (a2 == 34963)
      {
        __int16 v13 = *(uint64_t **)(a1 + 26448);
        if (v13) {
          uint64_t v10 = *v13;
        }
        else {
          uint64_t v10 = *(void *)(a1 + 26472);
        }
        goto LABEL_26;
      }
    }
    goto LABEL_27;
  }
  if (a2 <= 36333)
  {
    if (a2 != 35345)
    {
      if (a2 == 35982)
      {
        uint64_t v10 = *(void *)(a1 + 26504);
        goto LABEL_26;
      }
      goto LABEL_27;
    }
LABEL_19:
    uint64_t v10 = *(void *)(a1 + 26496);
    goto LABEL_26;
  }
  switch(a2)
  {
    case 36334:
      goto LABEL_19;
    case 36662:
      if ((*(unsigned char *)(a1 + 32501) & 0xFE) != 2)
      {
        uint64_t v10 = *(void *)(a1 + 26520);
        goto LABEL_26;
      }
LABEL_21:
      char v11 = 0;
      uint64_t v10 = 0;
      break;
    case 36663:
      if ((*(unsigned char *)(a1 + 32501) & 0xFE) != 2)
      {
        uint64_t v10 = *(void *)(a1 + 26528);
LABEL_26:
        char v11 = 1;
        break;
      }
      goto LABEL_21;
  }
LABEL_27:
  if (a4 && (a5 & 8) != 0)
  {
    if ((v11 & 1) == 0)
    {
      if (!*v12)
      {
        uint64_t result = 0;
        __int16 v16 = 1280;
        goto LABEL_52;
      }
      return 0;
    }
    if (v10 && !*(unsigned char *)(v10 + 56))
    {
      if ((a4 | a3) < 0 || (unint64_t v14 = *(void *)(v10 + 16), a4 + a3 > v14) || a5 >= 0x40)
      {
        if (!*v12)
        {
          uint64_t result = 0;
          __int16 v16 = 1281;
          goto LABEL_52;
        }
        return 0;
      }
      if ((a5 & 3) != 0 && ((a5 & 1) == 0 || (a5 & 0x2C) == 0) && (a5 & 0x12) != 0x10)
      {
        if (*(unsigned char *)(v10 + 28)) {
          return 0;
        }
        if (*(void *)v10 && *(void *)(v10 + 8))
        {
          if (v14 == a4) {
            char v22 = 8;
          }
          else {
            char v22 = a5;
          }
          if ((a5 & 4) != 0) {
            char v23 = v22;
          }
          else {
            char v23 = a5;
          }
          int v24 = gleAddCommand(a1, (uint64_t)glMapBufferRange_UnpackThread, 96);
          *((_DWORD *)v24 + 16) = a2;
          *((_DWORD *)v24 + 17) = a5;
          v24[9] = a3;
          v24[10] = a4;
          if ((v23 & 8) == 0)
          {
            uint64_t result = 0;
            char v25 = *((unsigned char *)v24 + 88);
LABEL_79:
            *(unsigned char *)(v10 + 56) = v25;
            return result;
          }
          v24[7] = gleAcquireBufferData(a1, v10, *(void *)(v10 + 16), a2, *(unsigned __int16 *)(v10 + 24));
          *(_WORD *)(v10 + 26) = -30535;
          long long v28 = *(_OWORD *)v10;
          long long v29 = *(_OWORD *)(v10 + 16);
          long long v30 = *(_OWORD *)(v10 + 32);
          v24[6] = *(void *)(v10 + 48);
          *((_OWORD *)v24 + 1) = v29;
          *((_OWORD *)v24 + 2) = v30;
          *(_OWORD *)int v24 = v28;
          uint64_t v31 = *(void *)v10;
          if (*(void *)v10)
          {
            char v25 = 2;
            *((unsigned char *)v24 + 88) = 2;
            uint64_t result = v31 + a3;
            goto LABEL_79;
          }
          if (!*v12)
          {
            uint64_t result = 0;
            __int16 v16 = 1285;
            goto LABEL_52;
          }
          return 0;
        }
      }
    }
    if (!*v12)
    {
      uint64_t result = 0;
      __int16 v16 = 1282;
LABEL_52:
      *uint64_t v12 = v16;
      return result;
    }
    return 0;
  }
  (*(void (**)(uint64_t))(a1 + 27752))(a1);
  uint64_t result = glMapBufferRange_Exec(a1, a2, a3, a4, a5);
  if (result)
  {
    if (a2 <= 35344)
    {
      if (a2 > 35050)
      {
        BOOL v17 = a2 == 35051;
        uint64_t v18 = (uint64_t *)(a1 + 19328);
        uint64_t v19 = 19336;
LABEL_56:
        char v21 = (uint64_t *)(a1 + v19);
        if (!v17) {
          uint64_t v18 = v21;
        }
        goto LABEL_75;
      }
      if (a2 != 34962)
      {
        uint64_t v26 = *(void *)(a1 + 26384);
        if (v26) {
          uint64_t v18 = (uint64_t *)(v26 + 1232);
        }
        else {
          uint64_t v18 = (uint64_t *)(a1 + 19320);
        }
        goto LABEL_75;
      }
      uint64_t v20 = 19312;
    }
    else
    {
      if (a2 <= 36333)
      {
        if (a2 != 35345)
        {
          uint64_t v20 = 19352;
          goto LABEL_74;
        }
      }
      else if (a2 != 36334)
      {
        BOOL v17 = a2 == 36662;
        uint64_t v18 = (uint64_t *)(a1 + 19368);
        uint64_t v19 = 19376;
        goto LABEL_56;
      }
      uint64_t v20 = 19344;
    }
LABEL_74:
    uint64_t v18 = (uint64_t *)(a1 + v20);
LABEL_75:
    uint64_t v27 = *v18;
    *(unsigned char *)(v10 + 56) = 2;
    *(_WORD *)(v10 + 26) = *(_WORD *)(v27 + 162);
  }
  return result;
}

uint64_t glMapBufferRange_UnpackThread(uint64_t a1, long long *a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = (unsigned char *)(a1 + 32481);
  int v6 = *((_DWORD *)a2 + 16);
  if (v6 <= 35344)
  {
    if (v6 > 35050)
    {
      if (v6 == 35051)
      {
        uint64_t v4 = *(void *)(a1 + 19328);
      }
      else if (v6 == 35052)
      {
        uint64_t v4 = *(void *)(a1 + 19336);
      }
    }
    else if (v6 == 34962)
    {
      uint64_t v4 = *(void *)(a1 + 19312);
    }
    else if (v6 == 34963)
    {
      uint64_t v7 = *(void *)(a1 + 26384);
      if (v7) {
        uint64_t v4 = *(void *)(v7 + 1232);
      }
      else {
        uint64_t v4 = *(void *)(a1 + 19320);
      }
    }
    goto LABEL_26;
  }
  if (v6 <= 36333)
  {
    if (v6 != 35345)
    {
      if (v6 == 35982) {
        uint64_t v4 = *(void *)(a1 + 19352);
      }
      goto LABEL_26;
    }
LABEL_19:
    uint64_t v4 = *(void *)(a1 + 19344);
    goto LABEL_26;
  }
  if (v6 == 36334) {
    goto LABEL_19;
  }
  if (v6 != 36662)
  {
    if (v6 != 36663) {
      goto LABEL_26;
    }
    if ((*(unsigned char *)(a1 + 32501) & 0xFE) != 2)
    {
      uint64_t v4 = *(void *)(a1 + 19376);
      goto LABEL_26;
    }
    goto LABEL_21;
  }
  if ((*(unsigned char *)(a1 + 32501) & 0xFE) == 2)
  {
LABEL_21:
    uint64_t v4 = 0;
    goto LABEL_26;
  }
  uint64_t v4 = *(void *)(a1 + 19368);
LABEL_26:
  if (*((unsigned char *)a2 + 88) == 2)
  {
    gleOrphanBufferObject(a1, v4 + 40);
    long long v8 = *a2;
    long long v9 = a2[1];
    long long v10 = a2[2];
    *(void *)(v4 + 184) = *((void *)a2 + 6);
    *(_OWORD *)(v4 + 168) = v10;
    *(_OWORD *)(v4 + 152) = v9;
    *(_OWORD *)(v4 + 136) = v8;
    gleApplyBufferData(a1, v4 + 40, *((void *)a2 + 7));
    gleDirtyBufferObjectCurrentBindPoints(a1, v4 + 40);
  }
  *(unsigned char *)(v4 + 297) = *(unsigned char *)(v4 + 165);
  *(unsigned char *)(v4 + 296) = *(unsigned char *)(v4 + 294);
  int v11 = *((_DWORD *)a2 + 17);
  *(unsigned char *)(v4 + 165) = (v11 & 0x20) == 0;
  int v12 = *((_DWORD *)a2 + 17) & 0x10;
  *(unsigned char *)(v4 + 294) = v12 == 0;
  *(unsigned char *)(v4 + 292) = *((unsigned char *)a2 + 88);
  *(void *)(v4 + 272) = *((void *)a2 + 9);
  *(void *)(v4 + 280) = *((void *)a2 + 10);
  *(_DWORD *)(v4 + 288) = *((_DWORD *)a2 + 17);
  LOBYTE(v13) = 1;
  if (*v5 && v12 && ((v11 & 0x20) == 0 || *(unsigned char *)(*(void *)(a1 + 29032) + 102)))
  {
    if (*(unsigned char *)(v4 + 167)) {
      int v13 = (*(unsigned __int8 *)(v4 + 8 * v5[18] + 304) >> 2) & 1;
    }
    else {
      LOBYTE(v13) = 0;
    }
  }
  *(unsigned char *)(v4 + 298) = v13;
  return 96;
}

void *glFlushMappedBufferRange_PackThread(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = gleAddCommand(a1, (uint64_t)glFlushMappedBufferRange_UnpackThread, 24);
  *((_DWORD *)result + 4) = a2;
  *uint64_t result = a3;
  result[1] = a4;
  return result;
}

uint64_t glFlushMappedBufferRange_UnpackThread(uint64_t a1, uint64_t a2)
{
  return 24;
}

void *glClear_Comp(uint64_t a1, int a2)
{
  uint64_t result = gleAddCommand(a1, (uint64_t)glClear_ListExec, 4);
  *(_DWORD *)uint64_t result = a2;
  return result;
}

uint64_t glClear_ListExec(unint64_t a1, unsigned int *a2, double a3, double a4, double a5)
{
  return 4;
}

uint64_t glClearBufferfv_Exec(uint64_t result, int a2, unsigned int a3, float32x4_t *a4, double a5, double a6, double a7)
{
  uint64_t v7 = a4;
  uint64_t v8 = result;
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v9 = result + 29832;
  uint64_t v10 = *(void *)(result + 29480);
  if (!*(unsigned char *)(v10 + 110))
  {
    switch(a2)
    {
      case 6144:
        int v13 = 0x4000;
        break;
      case 6145:
        int v13 = 256;
        break;
      case 6146:
        LODWORD(a5) = a4->i32[0];
        v23.i32[1] = a4->i32[0];
        int v13 = 1024;
        uint64_t v7 = &v23;
        break;
      default:
        goto LABEL_11;
    }
    return glClearBuffer_Core(result, v13, a3, 1, v7->f32, a5, a6, a7);
  }
  float32x4_t v23 = 0uLL;
  int v25 = 0;
  uint64_t v24 = 0;
  if (a2 == 6144)
  {
    if ((a3 & 0x80000000) == 0 && *(unsigned __int8 *)(v10 + 21) > a3)
    {
      int v12 = 1 << a3;
      float32x4_t v11 = *a4;
      float32x4_t v22 = *a4;
      float32x4_t v23 = *a4;
      goto LABEL_19;
    }
    goto LABEL_40;
  }
  if (a2 == 6145)
  {
    if (!a3)
    {
      LODWORD(v24) = a4->i32[0];
      v11.i64[0] = 0;
      float32x4_t v22 = 0u;
      int v12 = 256;
      goto LABEL_19;
    }
    goto LABEL_40;
  }
  if (a2 != 6146)
  {
LABEL_11:
    if (*(_WORD *)v9) {
      return result;
    }
    __int16 v14 = 1280;
    goto LABEL_13;
  }
  if (a3)
  {
LABEL_40:
    if (*(_WORD *)v9) {
      return result;
    }
    __int16 v14 = 1281;
LABEL_13:
    *(_WORD *)uint64_t v9 = v14;
    return result;
  }
  HIDWORD(v24) = a4->f32[0];
  v11.i64[0] = 0;
  float32x4_t v22 = 0u;
  int v12 = 512;
LABEL_19:
  __int16 v15 = (unsigned char *)(result + 17984);
  if ((*(unsigned char *)(result + 1540) & 4) != 0)
  {
    uint64_t result = gleGenerateMatrixIdentifier(result, result + 9488, *(double *)v11.i64, a6, a7);
    *(_DWORD *)(v8 + 19152) = *(_DWORD *)(v8 + 19152) & 0xFFFFFEFF | ((result != -1074791426) << 8);
    *(_DWORD *)(v8 + 29732) = result;
  }
  if ((*(_DWORD *)(v8 + 29800) & 0x743C0478) != 0
    && (uint64_t result = gleUpdateDrawFramebufferState(v8, *(double *)v11.i64, a6, a7), result))
  {
    if (result != 16711680 && !*(_WORD *)v9) {
      *(_WORD *)uint64_t v9 = result;
    }
  }
  else if (!*v15)
  {
    int v16 = *(unsigned __int16 *)(v8 + 15342);
    if ((v12 & v16) != 0)
    {
      if ((v12 & v16) != 0
        && !*(unsigned char *)(v9 + 2656)
        && (*(unsigned char *)(*(void *)(v8 + 29032) + 561) & 0x40) == 0)
      {
        BOOL v17 = (const float *)(v8 + 288);
        float32x4_t v18 = vld1q_dup_f32(v17);
        uint64_t v19 = (const float *)(v8 + 292);
        float32x4_t v20 = vld1q_dup_f32(v19);
        float32x4_t v23 = vminnmq_f32(vmaxnmq_f32(v22, v18), v20);
      }
      int v25 = 0;
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(v8 + 29496) + 208))(*(void *)(v8 + 29464));
      int v21 = *(_DWORD *)(*(void *)(v8 + 19296) + 316);
      if (*(_DWORD *)(v8 + 29816) != v21)
      {
        if (*(void *)(v8 + 28960))
        {
          uint64_t result = gleInvalidateCurrentDrawFramebufferTextures(v8);
          int v21 = *(_DWORD *)(*(void *)(v8 + 19296) + 316);
        }
        *(_DWORD *)(v8 + 29816) = v21;
      }
    }
  }
  return result;
}

uint64_t glClearBuffer_Core(uint64_t result, int a2, unsigned int a3, int a4, float *a5, double a6, double a7, double a8)
{
  LODWORD(v9) = a2;
  uint64_t v10 = result;
  float32x4_t v11 = (_WORD *)(result + 29832);
  uint64_t v12 = result + 17984;
  int v13 = (unsigned __int8 *)(result + 15336);
  *(void *)&long long v14 = 0;
  long long v35 = 0u;
  uint64_t v34 = result + 29832;
  if ((a2 & 0x4000) != 0)
  {
    if ((a3 & 0x80000000) == 0 && *(unsigned __int8 *)(*(void *)(result + 29480) + 21) > a3)
    {
      int v18 = 1 << a3;
      if ((*(unsigned char *)(result + 29803) & 0x10) != 0) {
        uint64_t result = gleUpdateAnyDrawBuffersFloat(result, 0.0, a7, a8);
      }
      int v17 = *v13;
      int v20 = v13[1];
      int v15 = v13[2];
      int v16 = v13[3];
      *int v13 = v17 & v18;
      int v33 = v20;
      int v21 = v20 & v18;
      v13[1] = v21;
      v13[2] = v15 & v18;
      v13[3] = v16 & v18;
      unsigned int v22 = *(_DWORD *)(v12 + 11820) & 0xFFFFFF00 | v21 | v17 & v18 | v15 & v18 | v16 & v18;
      *(_DWORD *)(v12 + 11820) = v22;
      uint64_t v23 = *(void *)(v10 + 28960);
      if (v23) {
        uint64_t v24 = (_WORD *)(v23 + 552);
      }
      else {
        uint64_t v24 = (_WORD *)(v12 + 11824);
      }
      *((_WORD *)v13 + 3) = *v24 & v22;
      long long v14 = *(_OWORD *)(v10 + 15152);
      long long v35 = v14;
      if (!a4 || *(unsigned char *)(v34 + 2656) || (*(unsigned char *)(*(void *)(v10 + 29032) + 561) & 0x40) != 0)
      {
        *(float *)(v10 + 15152) = *a5;
        *(float *)(v10 + 15156) = a5[1];
        *(float *)(v10 + 15160) = a5[2];
        *(float *)&long long v14 = a5[3];
      }
      else
      {
        LODWORD(a7) = *(_DWORD *)(v10 + 288);
        LODWORD(a8) = *(_DWORD *)(v10 + 292);
        *(float *)(v10 + 15152) = fminf(fmaxf(*a5, *(float *)&a7), *(float *)&a8);
        *(float *)(v10 + 15156) = fminf(fmaxf(a5[1], *(float *)&a7), *(float *)&a8);
        *(float *)(v10 + 15160) = fminf(fmaxf(a5[2], *(float *)&a7), *(float *)&a8);
        *(float *)&long long v14 = fminf(fmaxf(a5[3], *(float *)&a7), *(float *)&a8);
      }
      *(_DWORD *)(v10 + 15164) = v14;
      *(_DWORD *)(v12 + 10668) = 0;
      *(_DWORD *)(v12 + 11816) |= 0x40008u;
LABEL_17:
      uint64_t v25 = 0;
      if ((v9 & 0x100) != 0)
      {
        LOWORD(v18) = v18 | 0x100;
        uint64_t v25 = *(void *)(v10 + 15128);
        a7 = 0.0;
        a8 = 1.0;
        if (*a5 <= 1.0) {
          a8 = *a5;
        }
        if (*a5 >= 0.0) {
          *(double *)&long long v14 = a8;
        }
        else {
          *(double *)&long long v14 = 0.0;
        }
        *(void *)(v10 + 15128) = v14;
        *(_DWORD *)(v12 + 10668) = 0;
        *(_DWORD *)(v12 + 11816) |= 0x10u;
      }
      if ((v9 & 0x400) != 0)
      {
        LOWORD(v18) = v18 | 0x200;
        int v26 = *(_DWORD *)(v10 + 15172);
        *(_DWORD *)(v10 + 15172) = *((unsigned __int8 *)a5 + 4);
        *(_DWORD *)(v12 + 10668) = 0;
        *(_DWORD *)(v12 + 11816) |= 0x20u;
      }
      else
      {
        int v26 = 0;
      }
      if ((*(unsigned char *)(v10 + 1540) & 4) != 0)
      {
        uint64_t result = gleGenerateMatrixIdentifier(v10, v10 + 9488, *(double *)&v14, a7, a8);
        *(_DWORD *)(v12 + 1168) = *(_DWORD *)(v12 + 1168) & 0xFFFFFEFF | ((result != -1074791426) << 8);
        *(_DWORD *)(v12 + 11748) = result;
      }
      if ((*(_DWORD *)(v12 + 11816) & 0x743C0478) != 0
        && (uint64_t result = gleUpdateDrawFramebufferState(v10, *(double *)&v14, a7, a8), result))
      {
        if (result != 16711680 && !*(_WORD *)v34) {
          *(_WORD *)uint64_t v34 = result;
        }
      }
      else if (!*(unsigned char *)v12)
      {
        __int16 v27 = v18 & *((_WORD *)v13 + 3);
        if (v27)
        {
          unsigned int v28 = v9 & 0xFFFFFEFF;
          if ((v27 & 0x100) != 0) {
            unsigned int v28 = v9;
          }
          if ((v27 & 0x200) != 0) {
            uint64_t v9 = v28;
          }
          else {
            uint64_t v9 = v28 & 0xFFFFFBFF;
          }
          uint64_t result = (**(uint64_t (***)(void, uint64_t))(v10 + 29488))(*(void *)(v10 + 29464), v9);
          int v29 = *(_DWORD *)(*(void *)(v10 + 19296) + 316);
          if (*(_DWORD *)(v12 + 11832) != v29)
          {
            if (*(void *)(v10 + 28960))
            {
              uint64_t result = gleInvalidateCurrentDrawFramebufferTextures(v10);
              int v29 = *(_DWORD *)(*(void *)(v10 + 19296) + 316);
            }
            *(_DWORD *)(v12 + 11832) = v29;
          }
        }
      }
      if ((v9 & 0x4000) != 0)
      {
        *int v13 = v17;
        v13[1] = v33;
        v13[2] = v15;
        v13[3] = v16;
        unsigned int v30 = *(_DWORD *)(v12 + 11820) & 0xFFFFFF00 | v15 | v33 | v16 | v17;
        *(_DWORD *)(v12 + 11820) = v30;
        uint64_t v31 = *(void *)(v10 + 28960);
        if (v31) {
          uint64_t v32 = (_DWORD *)(v31 + 552);
        }
        else {
          uint64_t v32 = (_DWORD *)(v12 + 11824);
        }
        *((_WORD *)v13 + 3) = *v32 & v30;
        *(_OWORD *)(v10 + 15152) = v35;
        *(_DWORD *)(v12 + 10668) = 0;
        *(_DWORD *)(v12 + 11816) |= 0x40008u;
        if ((v9 & 0x100) == 0)
        {
LABEL_47:
          if ((v9 & 0x400) == 0) {
            return result;
          }
LABEL_54:
          *(_DWORD *)(v10 + 15172) = v26;
          *(_DWORD *)(v12 + 10668) = 0;
          *(_DWORD *)(v12 + 11816) |= 0x20u;
          return result;
        }
      }
      else if ((v9 & 0x100) == 0)
      {
        goto LABEL_47;
      }
      *(void *)(v10 + 15128) = v25;
      *(_DWORD *)(v12 + 10668) = 0;
      *(_DWORD *)(v12 + 11816) |= 0x10u;
      if ((v9 & 0x400) == 0) {
        return result;
      }
      goto LABEL_54;
    }
  }
  else if (!a3)
  {
    int v33 = 0;
    int v15 = 0;
    int v16 = 0;
    int v17 = 0;
    LOWORD(v18) = 0;
    goto LABEL_17;
  }
  if (!*v11) {
    *float32x4_t v11 = 1281;
  }
  return result;
}

uint64_t glClearBufferiv_Exec(uint64_t result, int a2, unsigned int a3, float *a4, __n128 a5, double a6, double a7)
{
  uint64_t v7 = a4;
  uint64_t v8 = result;
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v9 = (__int16 *)(result + 29832);
  uint64_t v10 = *(void *)(result + 29480);
  if (!*(unsigned char *)(v10 + 110))
  {
    switch(a2)
    {
      case 6144:
        int v12 = 0x4000;
        break;
      case 6145:
        int v12 = 256;
        break;
      case 6146:
        v17.n128_f32[1] = *a4;
        int v12 = 1024;
        uint64_t v7 = (float *)&v17;
        break;
      default:
        goto LABEL_11;
    }
    return glClearBuffer_Core(result, v12, a3, 0, v7, a5.n128_f64[0], a6, a7);
  }
  __n128 v17 = 0uLL;
  int v19 = 0;
  uint64_t v18 = 0;
  if (a2 == 6144)
  {
    if ((a3 & 0x80000000) == 0 && *(unsigned __int8 *)(v10 + 21) > a3)
    {
      a5 = *(__n128 *)a4;
      int v11 = 1 << a3;
      __n128 v17 = *(__n128 *)a4;
      int v19 = 1;
      goto LABEL_19;
    }
    goto LABEL_36;
  }
  if (a2 == 6145)
  {
    if (!a3)
    {
      *(float *)&uint64_t v18 = *a4;
      int v19 = 1;
      int v11 = 256;
      goto LABEL_19;
    }
    goto LABEL_36;
  }
  if (a2 != 6146)
  {
LABEL_11:
    if (*v9) {
      return result;
    }
    __int16 v13 = 1280;
    goto LABEL_13;
  }
  if (a3)
  {
LABEL_36:
    if (*v9) {
      return result;
    }
    __int16 v13 = 1281;
LABEL_13:
    *uint64_t v9 = v13;
    return result;
  }
  *((float *)&v18 + 1) = *a4;
  int v11 = 512;
LABEL_19:
  long long v14 = (unsigned char *)(result + 17984);
  if ((*(unsigned char *)(result + 1540) & 4) != 0)
  {
    uint64_t result = gleGenerateMatrixIdentifier(result, result + 9488, a5.n128_f64[0], a6, a7);
    *(_DWORD *)(v8 + 19152) = *(_DWORD *)(v8 + 19152) & 0xFFFFFEFF | ((result != -1074791426) << 8);
    *(_DWORD *)(v8 + 29732) = result;
  }
  if ((*(_DWORD *)(v8 + 29800) & 0x743C0478) != 0
    && (uint64_t result = gleUpdateDrawFramebufferState(v8, a5.n128_f64[0], a6, a7), result))
  {
    if (result != 16711680 && !*v9) {
      *uint64_t v9 = result;
    }
  }
  else if (!*v14)
  {
    unsigned int v15 = *(unsigned __int16 *)(v8 + 15342);
    if ((v11 & v15) != 0)
    {
      uint64_t result = (*(uint64_t (**)(void, void, __n128 *))(*(void *)(v8 + 29496) + 208))(*(void *)(v8 + 29464), v11 & v15, &v17);
      int v16 = *(_DWORD *)(*(void *)(v8 + 19296) + 316);
      if (*(_DWORD *)(v8 + 29816) != v16)
      {
        if (*(void *)(v8 + 28960))
        {
          uint64_t result = gleInvalidateCurrentDrawFramebufferTextures(v8);
          int v16 = *(_DWORD *)(*(void *)(v8 + 19296) + 316);
        }
        *(_DWORD *)(v8 + 29816) = v16;
      }
    }
  }
  return result;
}

uint64_t glClearBufferuiv_Exec(uint64_t result, int a2, unsigned int a3, float *a4, __n128 a5, double a6, double a7)
{
  uint64_t v7 = a4;
  uint64_t v8 = result;
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v9 = (__int16 *)(result + 29832);
  uint64_t v10 = *(void *)(result + 29480);
  if (!*(unsigned char *)(v10 + 110))
  {
    switch(a2)
    {
      case 6144:
        int v12 = 0x4000;
        break;
      case 6145:
        int v12 = 256;
        break;
      case 6146:
        v17.n128_f32[1] = *a4;
        int v12 = 1024;
        uint64_t v7 = (float *)&v17;
        break;
      default:
        goto LABEL_11;
    }
    return glClearBuffer_Core(result, v12, a3, 0, v7, a5.n128_f64[0], a6, a7);
  }
  __n128 v17 = 0uLL;
  int v19 = 0;
  uint64_t v18 = 0;
  if (a2 == 6144)
  {
    if ((a3 & 0x80000000) == 0 && *(unsigned __int8 *)(v10 + 21) > a3)
    {
      a5 = *(__n128 *)a4;
      int v11 = 1 << a3;
      __n128 v17 = *(__n128 *)a4;
      int v19 = 1;
      goto LABEL_19;
    }
    goto LABEL_36;
  }
  if (a2 == 6145)
  {
    if (!a3)
    {
      *(float *)&uint64_t v18 = *a4;
      int v19 = 1;
      int v11 = 256;
      goto LABEL_19;
    }
    goto LABEL_36;
  }
  if (a2 != 6146)
  {
LABEL_11:
    if (*v9) {
      return result;
    }
    __int16 v13 = 1280;
    goto LABEL_13;
  }
  if (a3)
  {
LABEL_36:
    if (*v9) {
      return result;
    }
    __int16 v13 = 1281;
LABEL_13:
    *uint64_t v9 = v13;
    return result;
  }
  *((float *)&v18 + 1) = *a4;
  int v11 = 512;
LABEL_19:
  long long v14 = (unsigned char *)(result + 17984);
  if ((*(unsigned char *)(result + 1540) & 4) != 0)
  {
    uint64_t result = gleGenerateMatrixIdentifier(result, result + 9488, a5.n128_f64[0], a6, a7);
    *(_DWORD *)(v8 + 19152) = *(_DWORD *)(v8 + 19152) & 0xFFFFFEFF | ((result != -1074791426) << 8);
    *(_DWORD *)(v8 + 29732) = result;
  }
  if ((*(_DWORD *)(v8 + 29800) & 0x743C0478) != 0
    && (uint64_t result = gleUpdateDrawFramebufferState(v8, a5.n128_f64[0], a6, a7), result))
  {
    if (result != 16711680 && !*v9) {
      *uint64_t v9 = result;
    }
  }
  else if (!*v14)
  {
    unsigned int v15 = *(unsigned __int16 *)(v8 + 15342);
    if ((v11 & v15) != 0)
    {
      uint64_t result = (*(uint64_t (**)(void, void, __n128 *))(*(void *)(v8 + 29496) + 208))(*(void *)(v8 + 29464), v11 & v15, &v17);
      int v16 = *(_DWORD *)(*(void *)(v8 + 19296) + 316);
      if (*(_DWORD *)(v8 + 29816) != v16)
      {
        if (*(void *)(v8 + 28960))
        {
          uint64_t result = gleInvalidateCurrentDrawFramebufferTextures(v8);
          int v16 = *(_DWORD *)(*(void *)(v8 + 19296) + 316);
        }
        *(_DWORD *)(v8 + 29816) = v16;
      }
    }
  }
  return result;
}

uint64_t glClearBufferfi_Exec(uint64_t result, int a2, unsigned int a3, unsigned int a4, double a5, double a6, double a7)
{
  uint64_t v7 = result;
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v8 = (__int16 *)(result + 29832);
  if (!*(unsigned char *)(*(void *)(result + 29480) + 110))
  {
    if (a2 == 34041)
    {
      v13[0] = __PAIR64__(a4, LODWORD(a5));
      return glClearBuffer_Core(result, 1280, a3, 0, (float *)v13, a5, a6, a7);
    }
    goto LABEL_19;
  }
  v13[0] = 0;
  v13[1] = 0;
  if (a2 != 34041)
  {
LABEL_19:
    if (*v8) {
      return result;
    }
    __int16 v12 = 1280;
    goto LABEL_21;
  }
  if (a3)
  {
    if (*v8) {
      return result;
    }
    __int16 v12 = 1281;
LABEL_21:
    *uint64_t v8 = v12;
    return result;
  }
  uint64_t v9 = (unsigned char *)(result + 17984);
  int v14 = LODWORD(a5);
  unsigned int v15 = a4;
  if ((*(unsigned char *)(result + 1540) & 4) != 0)
  {
    uint64_t result = gleGenerateMatrixIdentifier(result, result + 9488, a5, a6, a7);
    *(_DWORD *)(v7 + 19152) = *(_DWORD *)(v7 + 19152) & 0xFFFFFEFF | ((result != -1074791426) << 8);
    *(_DWORD *)(v7 + 29732) = result;
  }
  if ((*(_DWORD *)(v7 + 29800) & 0x743C0478) != 0
    && (uint64_t result = gleUpdateDrawFramebufferState(v7, a5, a6, a7), result))
  {
    if (result != 16711680 && !*v8) {
      *uint64_t v8 = result;
    }
  }
  else if (!*v9)
  {
    uint64_t v10 = *(_WORD *)(v7 + 15342) & 0x300;
    if ((*(_WORD *)(v7 + 15342) & 0x300) != 0)
    {
      int v16 = 0;
      uint64_t result = (*(uint64_t (**)(void, uint64_t, void *))(*(void *)(v7 + 29496) + 208))(*(void *)(v7 + 29464), v10, v13);
      int v11 = *(_DWORD *)(*(void *)(v7 + 19296) + 316);
      if (*(_DWORD *)(v7 + 29816) != v11)
      {
        if (*(void *)(v7 + 28960))
        {
          uint64_t result = gleInvalidateCurrentDrawFramebufferTextures(v7);
          int v11 = *(_DWORD *)(*(void *)(v7 + 19296) + 316);
        }
        *(_DWORD *)(v7 + 29816) = v11;
      }
    }
  }
  return result;
}

_DWORD *glClearBufferfv_PackThread(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  uint64_t result = gleAddCommand(a1, (uint64_t)glClearBufferfv_UnpackThread, 24);
  *uint64_t result = a2;
  result[1] = a3;
  if ((a2 - 6145) >= 2)
  {
    if (a2 == 6144)
    {
      result[2] = *a4;
      result[3] = a4[1];
      result[4] = a4[2];
      result[5] = a4[3];
    }
  }
  else
  {
    result[2] = *a4;
  }
  return result;
}

uint64_t glClearBufferfv_UnpackThread(uint64_t a1, uint64_t a2, double a3, double a4, double a5)
{
  return 24;
}

_DWORD *glClearBufferiv_PackThread(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  uint64_t result = gleAddCommand(a1, (uint64_t)glClearBufferiv_UnpackThread, 24);
  *uint64_t result = a2;
  result[1] = a3;
  if ((a2 - 6145) >= 2)
  {
    if (a2 == 6144)
    {
      result[2] = *a4;
      result[3] = a4[1];
      result[4] = a4[2];
      result[5] = a4[3];
    }
  }
  else
  {
    result[2] = *a4;
  }
  return result;
}

uint64_t glClearBufferiv_UnpackThread(uint64_t a1, uint64_t a2, __n128 a3, double a4, double a5)
{
  return 24;
}

_DWORD *glClearBufferuiv_PackThread(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  uint64_t result = gleAddCommand(a1, (uint64_t)glClearBufferuiv_UnpackThread, 24);
  *uint64_t result = a2;
  result[1] = a3;
  if ((a2 - 6145) >= 2)
  {
    if (a2 == 6144)
    {
      result[2] = *a4;
      result[3] = a4[1];
      result[4] = a4[2];
      result[5] = a4[3];
    }
  }
  else
  {
    result[2] = *a4;
  }
  return result;
}

uint64_t glClearBufferuiv_UnpackThread(uint64_t a1, uint64_t a2, __n128 a3, double a4, double a5)
{
  return 24;
}

void *glClearBufferfi_PackThread(uint64_t a1, int a2, int a3, int a4, float a5)
{
  uint64_t result = gleAddCommand(a1, (uint64_t)glClearBufferfi_UnpackThread, 24);
  *(_DWORD *)uint64_t result = a2;
  *((_DWORD *)result + 1) = a3;
  if (a2 == 34041)
  {
    *((float *)result + 2) = a5;
    *((_DWORD *)result + 3) = a4;
  }
  return result;
}

uint64_t glClearBufferfi_UnpackThread(uint64_t a1, int *a2, double a3, double a4, double a5)
{
  LODWORD(a3) = a2[2];
  glClearBufferfi_Exec(a1, *a2, a2[1], a2[3], a3, a4, a5);
  return 24;
}

float *glClearColor_FlushExecThread(uint64_t a1, float a2, float a3, float a4, float a5)
{
  *(_WORD *)(a1 + 32493) &= ~1u;
  uint64_t v9 = *(void **)(a1 + 28984);
  uint64_t v10 = *(void **)(a1 + 28976);
  if (v9[301]) {
    uint64_t v11 = *(void *)(a1 + 28984);
  }
  else {
    uint64_t v11 = *(void *)(a1 + 28976);
  }
  *(void *)(v11 + 2408) = glTexImage2D_PackThread;
  if (v9[307]) {
    __int16 v12 = v9;
  }
  else {
    __int16 v12 = v10;
  }
  v12[307] = glTexSubImage2D_PackThread;
  if (v9[380]) {
    __int16 v13 = v9;
  }
  else {
    __int16 v13 = v10;
  }
  v13[380] = glCompressedTexImage2D_PackThread;
  if (v9[383]) {
    int v14 = v9;
  }
  else {
    int v14 = v10;
  }
  v14[383] = glCompressedTexSubImage2D_PackThread;
  if (!v9[12]) {
    uint64_t v9 = v10;
  }
  v9[12] = glClearColor_Comp;
  uint64_t result = (float *)gleAddCommand(a1, (uint64_t)glClearColor_ListExec, 16);
  *uint64_t result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  return result;
}

float *glClearColor_Comp(uint64_t a1, float a2, float a3, float a4, float a5)
{
  uint64_t result = (float *)gleAddCommand(a1, (uint64_t)glClearColor_ListExec, 16);
  *uint64_t result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  return result;
}

uint64_t glClearColor_ListExec(uint64_t a1, uint64_t a2, double a3, double a4, double a5)
{
  LODWORD(a3) = *(_DWORD *)a2;
  LODWORD(a4) = *(_DWORD *)(a2 + 4);
  LODWORD(a5) = *(_DWORD *)(a2 + 8);
  glClearColor_Exec(a1, a3, a4, a5, *(float *)(a2 + 12));
  return 16;
}

uint64_t glClearColor_FlushExec(uint64_t result, double a2, double a3, double a4, float a5)
{
  *(_WORD *)(result + 32493) &= ~1u;
  uint64_t v5 = *(void **)(result + 28984);
  int v6 = *(void **)(result + 28976);
  if (v5[301]) {
    uint64_t v7 = *(void *)(result + 28984);
  }
  else {
    uint64_t v7 = *(void *)(result + 28976);
  }
  *(void *)(v7 + 2408) = glTexImage2D_Exec;
  if (v5[307]) {
    uint64_t v8 = v5;
  }
  else {
    uint64_t v8 = v6;
  }
  v8[307] = glTexSubImage2D_Exec;
  if (v5[380]) {
    uint64_t v9 = v5;
  }
  else {
    uint64_t v9 = v6;
  }
  v9[380] = glCompressedTexImage2D_Exec;
  if (v5[383]) {
    uint64_t v10 = v5;
  }
  else {
    uint64_t v10 = v6;
  }
  v10[383] = glCompressedTexSubImage2D_Exec;
  if (!v5[12]) {
    uint64_t v5 = v6;
  }
  v5[12] = glClearColor_Exec;
  return glClearColor_Exec(result, a2, a3, a4, a5);
}

uint64_t glClearColorx_Exec(uint64_t a1, int a2, int a3, int a4, int a5, double a6, double a7, double a8)
{
  *(float *)&a6 = (float)a2 * 0.000015259;
  *(float *)&a7 = (float)a3 * 0.000015259;
  *(float *)&a8 = (float)a4 * 0.000015259;
  return glClearColor_Exec(a1, a6, a7, a8, (float)a5 * 0.000015259);
}

float32x4_t glClearColorx_PackThread(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  v5.i64[0] = __PAIR64__(a3, a2);
  v5.i64[1] = __PAIR64__(a5, a4);
  float32x4_t v8 = vcvtq_f32_s32(v5);
  int v6 = (float32x4_t *)gleAddCommand(a1, (uint64_t)glClearColor_ListExec, 16);
  float32x4_t result = vmulq_f32(v8, (float32x4_t)vdupq_n_s32(0x37800000u));
  float32x4_t *v6 = result;
  return result;
}

uint64_t glClearDepth_ListExec(uint64_t a1, double *a2)
{
  double v2 = *a2;
  if (!*(unsigned char *)(*(void *)(a1 + 29480) + 110))
  {
    *(_DWORD *)(a1 + 28652) = 0;
    *(_DWORD *)(a1 + 29800) |= 0x10u;
  }
  double v3 = 1.0;
  if (v2 <= 1.0) {
    double v3 = v2;
  }
  BOOL v4 = v2 < 0.0;
  double v5 = 0.0;
  if (!v4) {
    double v5 = v3;
  }
  *(double *)(a1 + 15128) = v5;
  return 8;
}

uint64_t glClearDepthf_Exec(uint64_t result, float a2)
{
  if (!*(unsigned char *)(*(void *)(result + 29480) + 110))
  {
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 29800) |= 0x10u;
  }
  double v2 = a2;
  if (a2 > 1.0) {
    double v2 = 1.0;
  }
  BOOL v3 = a2 < 0.0;
  double v4 = 0.0;
  if (!v3) {
    double v4 = v2;
  }
  *(double *)(result + 15128) = v4;
  return result;
}

double *glClearDepthf_PackThread(uint64_t a1, float a2)
{
  double v2 = a2;
  float32x4_t result = (double *)gleAddCommand(a1, (uint64_t)glClearDepth_ListExec, 8);
  *float32x4_t result = v2;
  return result;
}

uint64_t glClearDepthx_Exec(uint64_t result, int a2)
{
  if (!*(unsigned char *)(*(void *)(result + 29480) + 110))
  {
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 29800) |= 0x10u;
  }
  float v2 = (float)a2 * 0.000015259;
  double v3 = v2;
  if (v2 > 1.0) {
    double v3 = 1.0;
  }
  BOOL v4 = v2 < 0.0;
  double v5 = 0.0;
  if (!v4) {
    double v5 = v3;
  }
  *(double *)(result + 15128) = v5;
  return result;
}

double *glClearDepthx_PackThread(uint64_t a1, int a2)
{
  double v2 = (float)((float)a2 * 0.000015259);
  float32x4_t result = (double *)gleAddCommand(a1, (uint64_t)glClearDepth_ListExec, 8);
  *float32x4_t result = v2;
  return result;
}

void *glClearStencil_Comp(uint64_t a1, int a2)
{
  float32x4_t result = gleAddCommand(a1, (uint64_t)glClearStencil_ListExec, 4);
  *(_DWORD *)float32x4_t result = a2;
  return result;
}

uint64_t glClearStencil_ListExec(uint64_t a1, unsigned __int8 *a2)
{
  int v2 = *a2;
  if (!*(unsigned char *)(*(void *)(a1 + 29480) + 110))
  {
    *(_DWORD *)(a1 + 28652) = 0;
    *(_DWORD *)(a1 + 29800) |= 0x20u;
  }
  *(_DWORD *)(a1 + 15172) = v2;
  return 4;
}

uint64_t glClipPlane_ListExec(uint64_t a1, uint64_t a2)
{
  return 40;
}

uint64_t glClipPlane_Exec(uint64_t result, int a2, double *a3)
{
  double v3 = (_DWORD *)(result + 28652);
  uint64_t v4 = (a2 - 12288);
  if (v4 >= 6)
  {
    if (!*(_WORD *)(result + 29832)) {
      *(_WORD *)(result + 29832) = 1280;
    }
  }
  else
  {
    double v5 = (float32x4_t *)result;
    int v6 = (float *)(result + 16 * v4 + 17576);
    float v7 = *a3;
    float v8 = a3[1];
    *(float *)(result + 16 * v4 + 17580) = v8;
    uint64_t v9 = (float *)(result + 16 * v4 + 17580);
    double v10 = a3[3];
    float v11 = a3[2];
    *(float *)(result + 16 * v4 + 17584) = v11;
    __int16 v12 = (float *)(result + 16 * v4 + 17584);
    float *v6 = v7;
    float v13 = v10;
    *(float *)(result + 16 * v4 + 17588) = v13;
    int v14 = (float *)(result + 16 * v4 + 17588);
    if ((*(unsigned char *)(result + 1544) & 0x10) != 0)
    {
      float32x4_t result = gleModelMatInvert(result);
      float v7 = *v6;
      float v8 = *v9;
      float v11 = *v12;
      float v13 = *v14;
    }
    *(float32x4_t *)int v6 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v5[698], v8), v5[697], v7), v5[699], v11), v5[700], v13);
    uint64_t v15 = v5[1203].i64[0];
    if (v15)
    {
      unint64_t v16 = *(unsigned __int16 *)(v15 + 2 * v4 + 3768);
      if (v16 <= 0x3FF)
      {
        *(__int32 *)((char *)v5[97].i32 + ((v16 >> 3) & 0x1FFC)) |= 1 << v16;
        v5[95].i32[3] |= 0x800000u;
      }
    }
    uint64_t v17 = v5[1204].i64[1];
    if (v17)
    {
      unint64_t v18 = *(unsigned __int16 *)(v17 + 2 * v4 + 3768);
      if (v18 <= 0x3FF)
      {
        *(__int32 *)((char *)v5[121].i32 + ((v18 >> 3) & 0x1FFC)) |= 1 << v18;
        v5[95].i32[3] |= 0x4000000u;
      }
    }
    uint64_t v19 = v5[1205].i64[0];
    if (v19)
    {
      unint64_t v20 = *(unsigned __int16 *)(v19 + 2 * v4 + 3768);
      if (v20 <= 0x3FF)
      {
        *(__int32 *)((char *)v5[129].i32 + ((v20 >> 3) & 0x1FFC)) |= 1 << v20;
        v5[95].i32[3] |= 0x8000000u;
      }
    }
    *double v3 = 0;
    v5[95].i32[2] |= 0x1000000 << v4;
  }
  return result;
}

uint64_t glClipPlanef_Exec(uint64_t a1, int a2, float32x2_t *a3)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  float64x2_t v3 = vcvtq_f64_f32(a3[1]);
  v5[0] = vcvtq_f64_f32(*a3);
  v5[1] = v3;
  return glClipPlane_Exec(a1, a2, (double *)v5);
}

uint64_t glClipPlanex_Exec(uint64_t a1, int a2, int32x2_t *a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  float32x2_t v3 = (float32x2_t)vdup_n_s32(0x37800000u);
  float64x2_t v4 = vcvtq_f64_f32(vmul_f32(vcvt_f32_s32(a3[1]), v3));
  v6[0] = vcvtq_f64_f32(vmul_f32(vcvt_f32_s32(*a3), v3));
  v6[1] = v4;
  return glClipPlane_Exec(a1, a2, (double *)v6);
}

__n128 glClipPlanef_PackThread(uint64_t a1, int a2, float32x2_t *a3)
{
  float64x2_t v6 = vcvtq_f64_f32(*a3);
  float64x2_t v7 = vcvtq_f64_f32(a3[1]);
  float64x2_t v4 = gleAddCommand(a1, (uint64_t)glClipPlane_ListExec, 40);
  *((_DWORD *)v4 + 8) = a2;
  __n128 result = (__n128)v7;
  *(float64x2_t *)float64x2_t v4 = v6;
  *((float64x2_t *)v4 + 1) = v7;
  return result;
}

__n128 glClipPlanex_PackThread(uint64_t a1, int a2, int32x2_t *a3)
{
  float32x2_t v4 = (float32x2_t)vdup_n_s32(0x37800000u);
  float64x2_t v7 = vcvtq_f64_f32(vmul_f32(vcvt_f32_s32(a3[1]), v4));
  float64x2_t v8 = vcvtq_f64_f32(vmul_f32(vcvt_f32_s32(*a3), v4));
  double v5 = gleAddCommand(a1, (uint64_t)glClipPlane_ListExec, 40);
  *((_DWORD *)v5 + 8) = a2;
  __n128 result = (__n128)v7;
  *(float64x2_t *)double v5 = v8;
  *((float64x2_t *)v5 + 1) = v7;
  return result;
}

uint64_t glGetClipPlane_Exec(uint64_t result, int a2, float64x2_t *a3)
{
  if ((a2 - 12288) >= 6)
  {
    if (!*(_WORD *)(result + 29832)) {
      *(_WORD *)(result + 29832) = 1280;
    }
  }
  else
  {
    float32x2_t v3 = (float32x2_t *)(result + 16 * (a2 - 12288));
    float64x2_t v4 = vcvtq_f64_f32(v3[2198]);
    *a3 = vcvtq_f64_f32(v3[2197]);
    a3[1] = v4;
  }
  return result;
}

float64_t glGetClipPlanef_Exec(uint64_t a1, int a2, float32x4_t *a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  float64x2_t v5 = 0u;
  float64x2_t v6 = 0u;
  glGetClipPlane_Exec(a1, a2, &v5);
  float64_t result = v6.f64[0];
  *a3 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v5), v6);
  return result;
}

int32x4_t glGetClipPlanex_Exec(uint64_t a1, int a2, int32x4_t *a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  float64x2_t v7 = 0u;
  float64x2_t v8 = 0u;
  glGetClipPlane_Exec(a1, a2, &v7);
  v4.i64[0] = 0x3F0000003F000000;
  v4.i64[1] = 0x3F0000003F000000;
  float32x4_t v5 = vmlaq_f32(v4, (float32x4_t)vdupq_n_s32(0x47800000u), vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v7), v8));
  int32x4_t result = vcvtq_s32_f32((float32x4_t)vbslq_s8((int8x16_t)vcgezq_f32(v5), (int8x16_t)v5, (int8x16_t)vaddq_f32(v5, (float32x4_t)vdupq_n_s32(0xBF7FFE5D))));
  *a3 = result;
  return result;
}

float64_t glGetClipPlanef_ExecThread(uint64_t a1, int a2, float32x4_t *a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  (*(void (**)(void))(a1 + 27752))();
  float64x2_t v7 = 0u;
  float64x2_t v8 = 0u;
  glGetClipPlane_Exec(a1, a2, &v7);
  float64_t result = v8.f64[0];
  *a3 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v7), v8);
  return result;
}

double glGetClipPlanex_ExecThread(uint64_t a1, int a2, int32x4_t *a3)
{
  (*(void (**)(void))(a1 + 27752))();

  *(void *)&double result = glGetClipPlanex_Exec(a1, a2, a3).u64[0];
  return result;
}

uint64_t glColor4_ListExec(uint64_t a1, _OWORD *a2)
{
  *(_OWORD *)(a1 + 8464) = *a2;
  return 16;
}

float *glColor4f_Comp(uint64_t a1, float a2, float a3, float a4, float a5)
{
  double result = (float *)gleAddCommand(a1, (uint64_t)glColor4_ListExec, 16);
  *double result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  return result;
}

float *glColor4f_Exec(float *result, float a2, float a3, float a4, float a5)
{
  result[2116] = a2;
  result[2117] = a3;
  result[2118] = a4;
  result[2119] = a5;
  return result;
}

float32x4_t glColor4x_Exec(float32x4_t *a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  v5.i64[0] = __PAIR64__(a3, a2);
  v5.i64[1] = __PAIR64__(a5, a4);
  float32x4_t result = vmulq_f32(vcvtq_f32_s32(v5), (float32x4_t)vdupq_n_s32(0x37800000u));
  a1[529] = result;
  return result;
}

float32x4_t glColor4x_PackThread(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  v5.i64[0] = __PAIR64__(a3, a2);
  v5.i64[1] = __PAIR64__(a5, a4);
  float32x4_t v8 = vcvtq_f32_s32(v5);
  float64x2_t v6 = (float32x4_t *)gleAddCommand(a1, (uint64_t)glColor4_ListExec, 16);
  float32x4_t result = vmulq_f32(v8, (float32x4_t)vdupq_n_s32(0x37800000u));
  float32x4_t *v6 = result;
  return result;
}

float glColor4ub_Comp(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v9 = *(void *)(a1 + 19240) + 128;
  double v10 = gleAddCommand(a1, (uint64_t)glColor4_ListExec, 16);
  *(_DWORD *)double v10 = *(_DWORD *)(v9 + 4 * a2);
  *((_DWORD *)v10 + 1) = *(_DWORD *)(v9 + 4 * a3);
  *((_DWORD *)v10 + 2) = *(_DWORD *)(v9 + 4 * a4);
  float result = *(float *)(v9 + 4 * a5);
  *((float *)v10 + 3) = result;
  return result;
}

float glColor4ub_Exec(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v5 = *(void *)(a1 + 19240) + 128;
  float result = *(float *)(v5 + 4 * a2);
  int v7 = *(_DWORD *)(v5 + 4 * a3);
  int v8 = *(_DWORD *)(v5 + 4 * a4);
  int v9 = *(_DWORD *)(v5 + 4 * a5);
  *(float *)(a1 + 8464) = result;
  *(_DWORD *)(a1 + 8468) = v7;
  *(_DWORD *)(a1 + 8472) = v8;
  *(_DWORD *)(a1 + 8476) = v9;
  return result;
}

void *glCullFace_Comp(uint64_t a1, int a2)
{
  float result = gleAddCommand(a1, (uint64_t)glCullFace_ListExec, 4);
  *(_DWORD *)float result = a2;
  return result;
}

uint64_t glCullFace_ListExec(uint64_t a1, int *a2)
{
  return 4;
}

void glLabelObjectEXT_Exec(uint64_t a1, int a2, unsigned int a3, int a4, char *a5)
{
  if (a2 > 36159)
  {
    if ((a2 - 37201) <= 3 && a2 != 37202 || (a2 - 36160) < 2 || a2 == 36386) {
      goto LABEL_21;
    }
  }
  else
  {
    if (a2 > 35410)
    {
      if (a2 == 35411 || a2 == 35648) {
        goto LABEL_21;
      }
      int v5 = 35656;
    }
    else
    {
      if (a2 == 5890 || a2 == 33510) {
        goto LABEL_21;
      }
      int v5 = 35407;
    }
    if (a2 == v5)
    {
LABEL_21:
      gleLabelObject(a1, a2, a3, a4, a5);
      return;
    }
  }
  if (!*(_WORD *)(a1 + 29832)) {
    *(_WORD *)(a1 + 29832) = 1280;
  }
}

void glGetObjectLabelEXT_Exec(uint64_t a1, int a2, unsigned int a3, int a4, _DWORD *a5, unsigned char *a6)
{
  if (a2 > 36159)
  {
    if ((a2 - 37201) <= 3 && a2 != 37202 || (a2 - 36160) < 2 || a2 == 36386) {
      goto LABEL_21;
    }
  }
  else
  {
    if (a2 > 35410)
    {
      if (a2 == 35411 || a2 == 35648) {
        goto LABEL_21;
      }
      int v6 = 35656;
    }
    else
    {
      if (a2 == 5890 || a2 == 33510) {
        goto LABEL_21;
      }
      int v6 = 35407;
    }
    if (a2 == v6)
    {
LABEL_21:
      gleGetObjectLabel(a1, a2, a3, a4, a5, a6);
      return;
    }
  }
  if (!*(_WORD *)(a1 + 29832)) {
    *(_WORD *)(a1 + 29832) = 1280;
  }
}

void glLabelObjectEXT_ExecThread(uint64_t a1, int a2, unsigned int a3, int a4, char *a5)
{
  (*(void (**)(void))(a1 + 27752))();

  glLabelObjectEXT_Exec(a1, a2, a3, a4, a5);
}

void glGetObjectLabelEXT_ExecThread(uint64_t a1, int a2, unsigned int a3, int a4, _DWORD *a5, unsigned char *a6)
{
  (*(void (**)(void))(a1 + 27752))();

  glGetObjectLabelEXT_Exec(a1, a2, a3, a4, a5, a6);
}

void glLabelObjectWithResponsibleProcessAPPLE_Exec(uint64_t a1, int a2, unsigned int a3, int a4)
{
  if (a2 > 36159)
  {
    if ((a2 - 37201) <= 3 && a2 != 37202 || (a2 - 36160) < 2 || a2 == 36386) {
      goto LABEL_21;
    }
  }
  else
  {
    if (a2 > 35410)
    {
      if (a2 == 35411 || a2 == 35648) {
        goto LABEL_21;
      }
      int v4 = 35656;
    }
    else
    {
      if (a2 == 5890 || a2 == 33510) {
        goto LABEL_21;
      }
      int v4 = 35407;
    }
    if (a2 == v4)
    {
LABEL_21:
      gleLabelObjectWithResponsibleProcess(a1, a2, a3, a4);
      return;
    }
  }
  if (!*(_WORD *)(a1 + 29832)) {
    *(_WORD *)(a1 + 29832) = 1280;
  }
}

void glLabelObjectWithResponsibleProcessAPPLE_ExecThread(uint64_t a1, int a2, unsigned int a3, int a4)
{
  (*(void (**)(void))(a1 + 27752))();

  glLabelObjectWithResponsibleProcessAPPLE_Exec(a1, a2, a3, a4);
}

void *glDepthFunc_Comp(uint64_t a1, int a2)
{
  float result = gleAddCommand(a1, (uint64_t)glDepthFunc_ListExec, 4);
  *(_DWORD *)float result = a2;
  return result;
}

uint64_t glDepthFunc_ListExec(uint64_t a1, int *a2)
{
  return 4;
}

uint64_t glDepthRange_ListExec(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  *(_OWORD *)float32x2_t v3 = *a2;
  glDepthRangeArrayv_Core(a1, 0, 1, v3);
  return 16;
}

uint64_t glDepthRangef_Exec(uint64_t a1, float a2, float a3)
{
  v4[2] = *(double *)MEMORY[0x263EF8340];
  v4[0] = a2;
  v4[1] = a3;
  return glDepthRangeArrayv_Core(a1, 0, 1, v4);
}

double *glDepthRangef_PackThread(uint64_t a1, float a2, float a3)
{
  double v3 = a2;
  double v4 = a3;
  float result = (double *)gleAddCommand(a1, (uint64_t)glDepthRange_ListExec, 16);
  *float result = v3;
  result[1] = v4;
  return result;
}

uint64_t glDepthRangex_Exec(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  float64x2_t v4 = vcvtq_f64_f32(vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(a3, a2)), (float32x2_t)vdup_n_s32(0x37800000u)));
  return glDepthRangeArrayv_Core(a1, 0, 1, v4.f64);
}

double *glDepthRangex_PackThread(uint64_t a1, int a2, int a3)
{
  double v3 = (float)((float)a2 * 0.000015259);
  double v4 = (float)((float)a3 * 0.000015259);
  float result = (double *)gleAddCommand(a1, (uint64_t)glDepthRange_ListExec, 16);
  *float result = v3;
  result[1] = v4;
  return result;
}

uint64_t glDepthRangeArrayv_Core(uint64_t result, unsigned int a2, int a3, double *a4)
{
  LODWORD(v5) = a3;
  unsigned int v6 = a2;
  uint64_t v7 = result;
  uint64_t v8 = result + 15580;
  if (a3 + a2 >= 2 && !*(unsigned char *)v8) {
    float result = gleSwitchToMultiViewportMode(result);
  }
  if ((int)v5 >= 1)
  {
    int v9 = 0;
    uint64_t v10 = v7 + 9216;
    uint64_t v5 = v5;
    do
    {
      double v11 = a4[1];
      if (*a4 <= 1.0) {
        double v12 = *a4;
      }
      else {
        double v12 = 1.0;
      }
      if (*a4 < 0.0) {
        double v12 = 0.0;
      }
      if (v11 <= 1.0) {
        double v13 = a4[1];
      }
      else {
        double v13 = 1.0;
      }
      if (v11 < 0.0) {
        double v13 = 0.0;
      }
      uint64_t v14 = v10 + 144 * v6;
      double v16 = *(double *)(v14 + 64);
      uint64_t v15 = (double *)(v14 + 64);
      if (v16 != v12 || *(double *)(v10 + 144 * v6 + 72) != v13)
      {
        *uint64_t v15 = v12;
        *(double *)(v10 + 144 * v6 + 72) = v13;
        float result = gleUpdateDepthRangeDataIndexed(v7, v6);
        int v9 = 1;
      }
      ++v6;
      a4 += 2;
      --v5;
    }
    while (v5);
    if (v9)
    {
      uint64_t v17 = *(void *)(v7 + 19248);
      if (v17)
      {
        unint64_t v18 = *(unsigned __int16 *)(v17 + 3792);
        if (v18 <= 0x3FF)
        {
          *(_DWORD *)(v7 + ((v18 >> 3) & 0x1FFC) + 1552) |= 1 << v18;
          *(_DWORD *)(v8 + 13072) = 0;
          *(_DWORD *)(v7 + 1532) |= 0x800000u;
        }
      }
      uint64_t v19 = *(void *)(v7 + 19272);
      if (v19)
      {
        unint64_t v20 = *(unsigned __int16 *)(v19 + 3792);
        if (v20 <= 0x3FF)
        {
          *(_DWORD *)(v7 + ((v20 >> 3) & 0x1FFC) + 1936) |= 1 << v20;
          *(_DWORD *)(v8 + 13072) = 0;
          *(_DWORD *)(v7 + 1532) |= 0x4000000u;
        }
      }
      uint64_t v21 = *(void *)(v7 + 19280);
      if (v21)
      {
        unint64_t v22 = *(unsigned __int16 *)(v21 + 3792);
        if (v22 <= 0x3FF)
        {
          *(_DWORD *)(v7 + ((v22 >> 3) & 0x1FFC) + 2064) |= 1 << v22;
          *(_DWORD *)(v8 + 13072) = 0;
          *(_DWORD *)(v7 + 1532) |= 0x8000000u;
        }
      }
    }
  }
  return result;
}

void *glDrawBuffersARB_Comp(uint64_t a1, int a2, int *a3)
{
  if (*(unsigned __int8 *)(*(void *)(a1 + 29480) + 21) < a2)
  {
    return gleSetErrorInList(a1, 1281);
  }
  else
  {
    float result = gleAddCommand(a1, (uint64_t)glDrawBuffersARB_ListExec, 36);
    *(_DWORD *)float result = a2;
    if (a2 >= 1)
    {
      uint64_t v6 = a2;
      uint64_t v7 = (_DWORD *)result + 1;
      do
      {
        int v8 = *a3++;
        *v7++ = v8;
        --v6;
      }
      while (v6);
    }
  }
  return result;
}

uint64_t glDrawBuffersARB_ListExec(uint64_t a1, int *a2)
{
  return 36;
}

void glDrawBuffersARB_Exec(uint64_t a1, int a2, int *a3)
{
  uint64_t v3 = a1 + 28652;
  double v4 = *(unsigned __int8 **)(a1 + 29480);
  if (v4[21] < a2)
  {
    if (!*(_WORD *)(a1 + 29832))
    {
      __int16 v42 = 1281;
LABEL_79:
      *(_WORD *)(v3 + 1180) = v42;
    }
    return;
  }
  int v6 = a2;
  uint64_t v8 = a2;
  int v9 = *(_DWORD **)(a1 + 28960);
  if (!v9)
  {
    if (a2 > 1)
    {
      __int16 v43 = 1281;
    }
    else
    {
      if (a2 != 1 || (unsigned int v21 = *a3) == 0 || v21 == 1029)
      {
        if (*(unsigned char *)(a1 + 32473))
        {
          *(unsigned char *)(a1 + 32473) = 0;
          LOBYTE(v22) = *(unsigned char *)(a1 + 32477);
          if ((_BYTE)v22)
          {
            uint64_t v22 = *(void *)(a1 + 29008);
            if (v22) {
              LOBYTE(v22) = *(unsigned char *)(a1 + 32483);
            }
          }
          *(unsigned char *)(a1 + 32470) = v22;
          *(unsigned char *)(a1 + 32471) = 0;
        }
        unsigned int v23 = *(_DWORD *)(a1 + 29808) & 0xFFFFFF00;
        *(_DWORD *)(a1 + 29808) = v23;
        if (a2 < 1)
        {
          int v28 = 0;
        }
        else
        {
          uint64_t v24 = (_WORD *)(a1 + 29836);
          uint64_t v25 = a2;
          int v26 = a3;
          do
          {
            int v27 = *v26++;
            *v24++ = v27;
            --v25;
          }
          while (v25);
          int v28 = a2;
        }
        bzero((void *)(a1 + (2 * v28 + 29836)), ((2 * v28) ^ 6u) + 2);
        if (v6 < 1)
        {
          int v6 = 0;
        }
        else
        {
          uint64_t v37 = 0;
          do
          {
            int v38 = a3[v37];
            *(_WORD *)(a1 + 15180 + 2 * v37) = v38;
            if (v38)
            {
              v23 |= 1 << v37;
              *(_DWORD *)(v3 + 1156) = v23;
            }
            ++v37;
          }
          while (v8 != v37);
          if (v8 > 7) {
            goto LABEL_59;
          }
        }
        bzero((void *)(a1 + (2 * v6 + 15180)), ((2 * v6) ^ 0xEu) + 2);
LABEL_59:
        uint64_t v36 = 0;
        *(_DWORD *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 1148) |= 0x40000000u;
LABEL_60:
        if (v36) {
          unint64_t v39 = (_DWORD *)(v36 + 552);
        }
        else {
          unint64_t v39 = (_DWORD *)(v3 + 1156);
        }
        *(_WORD *)(a1 + 15342) = *(_DWORD *)(v3 + 1152) & *v39;
        if (*(_DWORD *)(v3 + 1160)) {
          int v40 = *(_DWORD *)(a1 + 1548) | 0x80000;
        }
        else {
          int v40 = *(_DWORD *)(a1 + 1548);
        }
        *(_DWORD *)uint64_t v3 = 0;
        *(_DWORD *)(a1 + 1548) = v40 | 0x40000;
        return;
      }
      __int16 v43 = 1280;
      if (v21 >> 5 >= 0x467)
      {
        if (v21 >= v4[22] + 36064) {
          __int16 v43 = 1280;
        }
        else {
          __int16 v43 = 1282;
        }
      }
    }
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = v43;
    }
    return;
  }
  if (a2 >= 1)
  {
    char v10 = 0;
    int v11 = 0;
    double v12 = (unsigned __int16 *)(v9 + 125);
    uint64_t v13 = 36064;
    uint64_t v14 = a2;
    uint64_t v15 = (unsigned int *)a3;
    while (1)
    {
      unsigned int v17 = *v15++;
      uint64_t v16 = v17;
      if (v17 && v13 != v16) {
        break;
      }
      int v19 = 1 << v16;
      if (!v16) {
        int v19 = 0;
      }
      if ((v19 & v11) != 0)
      {
        if (*(_WORD *)(v3 + 1180)) {
          return;
        }
        goto LABEL_76;
      }
      v11 |= v19;
      int v20 = *v12++;
      if (v16 != v20) {
        char v10 = 1;
      }
      ++v13;
      if (!--v14)
      {
        if (v10) {
          goto LABEL_33;
        }
        goto LABEL_32;
      }
    }
    if (v16 == 1029 || (v16 - 36080) > 0xFFFFFFEF)
    {
      if (*(_WORD *)(v3 + 1180)) {
        return;
      }
LABEL_76:
      __int16 v42 = 1282;
      goto LABEL_79;
    }
    if (!*(_WORD *)(v3 + 1180))
    {
      __int16 v42 = 1280;
      goto LABEL_79;
    }
    return;
  }
  int v11 = 0;
LABEL_32:
  if (v9[137] != v11)
  {
LABEL_33:
    unsigned int v29 = v9[138] & 0xFFFFFF00;
    v9[138] = v29;
    if (a2 < 1)
    {
      int v6 = 0;
    }
    else
    {
      for (uint64_t i = 0; i != a2; ++i)
      {
        int v31 = a3[i];
        uint64_t v32 = (char *)v9 + 2 * i;
        *((_WORD *)v32 + 250) = v31;
        if (v31)
        {
          if ((v9[135] >> v31))
          {
            v29 |= 1 << i;
            v9[138] = v29;
            int v31 = a3[i];
          }
          else
          {
            LOWORD(v31) = 0;
          }
        }
        *((_WORD *)v32 + 228) = v31;
      }
      if (a2 > 7) {
        goto LABEL_45;
      }
    }
    uint64_t v33 = 2 * v6;
    do
    {
      uint64_t v34 = (char *)v9 + v33;
      *((_WORD *)v34 + 250) = 0;
      *((_WORD *)v34 + 228) = 0;
      v33 += 2;
    }
    while (v33 != 16);
LABEL_45:
    v9[137] = v11;
    if ((v4[561] & 0x40) != 0) {
      unsigned int v35 = (v11 | v9[136] | 0xFFFFFF00) & v9[135];
    }
    else {
      unsigned int v35 = v9[135];
    }
    v9[124] = v35;
    gleSetUnknownFramebufferCompleteness(a1, (uint64_t)(v9 + 10));
    uint64_t v36 = *(void *)(a1 + 28960);
    goto LABEL_60;
  }
}

uint64_t glDrawTexsOES_Exec(uint64_t result, int a2, int a3, int a4, int a5, int a6, __n128 a7, __n128 a8, __n128 a9, __n128 a10, __n128 a11)
{
  if ((a6 | a5) < 0)
  {
    if (!*(_WORD *)(result + 29832)) {
      *(_WORD *)(result + 29832) = 1281;
    }
  }
  else
  {
    a11.n128_f32[0] = (float)a6;
    a10.n128_f32[0] = (float)a5;
    a9.n128_f32[0] = (float)a4;
    a8.n128_f32[0] = (float)a3;
    a7.n128_f32[0] = (float)a2;
    return gleDrawTexture(result, a7, a8, a9, a10, a11);
  }
  return result;
}

uint64_t glDrawTexfOES_Exec(uint64_t result, __n128 a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  if (a5.n128_f32[0] >= 0.0 && a6.n128_f32[0] >= 0.0) {
    return gleDrawTexture(result, a2, a3, a4, a5, a6);
  }
  if (!*(_WORD *)(result + 29832)) {
    *(_WORD *)(result + 29832) = 1281;
  }
  return result;
}

uint64_t glDrawTexiOES_Exec(uint64_t result, int a2, int a3, int a4, int a5, int a6, __n128 a7, __n128 a8, __n128 a9, __n128 a10, __n128 a11)
{
  if ((a6 | a5) < 0)
  {
    if (!*(_WORD *)(result + 29832)) {
      *(_WORD *)(result + 29832) = 1281;
    }
  }
  else
  {
    a11.n128_f32[0] = (float)a6;
    a10.n128_f32[0] = (float)a5;
    a9.n128_f32[0] = (float)a4;
    a8.n128_f32[0] = (float)a3;
    a7.n128_f32[0] = (float)a2;
    return gleDrawTexture(result, a7, a8, a9, a10, a11);
  }
  return result;
}

uint64_t glDrawTexxOES_Exec(uint64_t result, int a2, int a3, int a4, int a5, int a6, __n128 a7, __n128 a8, __n128 a9, __n128 a10, __n128 a11)
{
  a10.n128_f32[0] = (float)a5 * 0.000015259;
  if (a10.n128_f32[0] < 0.0 || (a11.n128_f32[0] = (float)a6 * 0.000015259, a11.n128_f32[0] < 0.0))
  {
    if (!*(_WORD *)(result + 29832)) {
      *(_WORD *)(result + 29832) = 1281;
    }
  }
  else
  {
    a9.n128_f32[0] = (float)a4 * 0.000015259;
    a8.n128_f32[0] = (float)a3 * 0.000015259;
    a7.n128_f32[0] = (float)a2 * 0.000015259;
    return gleDrawTexture(result, a7, a8, a9, a10, a11);
  }
  return result;
}

uint64_t glDrawTexsvOES_Exec(uint64_t result, __int16 *a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7)
{
  int v7 = (unsigned __int16)a2[3];
  int v8 = (unsigned __int16)a2[4];
  if (((v8 | v7) & 0x8000) != 0)
  {
    if (!*(_WORD *)(result + 29832)) {
      *(_WORD *)(result + 29832) = 1281;
    }
  }
  else
  {
    a7.n128_f32[0] = (float)(__int16)v8;
    a6.n128_f32[0] = (float)(__int16)v7;
    a5.n128_f32[0] = (float)a2[2];
    a4.n128_f32[0] = (float)a2[1];
    a3.n128_f32[0] = (float)*a2;
    return gleDrawTexture(result, a3, a4, a5, a6, a7);
  }
  return result;
}

uint64_t glDrawTexivOES_Exec(uint64_t result, int *a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7)
{
  int v7 = a2[3];
  int v8 = a2[4];
  if ((v8 | v7) < 0)
  {
    if (!*(_WORD *)(result + 29832)) {
      *(_WORD *)(result + 29832) = 1281;
    }
  }
  else
  {
    a7.n128_f32[0] = (float)v8;
    a6.n128_f32[0] = (float)v7;
    a5.n128_f32[0] = (float)a2[2];
    a4.n128_f32[0] = (float)a2[1];
    a3.n128_f32[0] = (float)*a2;
    return gleDrawTexture(result, a3, a4, a5, a6, a7);
  }
  return result;
}

uint64_t glDrawTexxvOES_Exec(uint64_t result, int *a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7)
{
  a6.n128_f32[0] = (float)a2[3] * 0.000015259;
  if (a6.n128_f32[0] < 0.0 || (a7.n128_f32[0] = (float)a2[4] * 0.000015259, a7.n128_f32[0] < 0.0))
  {
    if (!*(_WORD *)(result + 29832)) {
      *(_WORD *)(result + 29832) = 1281;
    }
  }
  else
  {
    a5.n128_f32[0] = (float)a2[2] * 0.000015259;
    a4.n128_f32[0] = (float)a2[1] * 0.000015259;
    a3.n128_f32[0] = (float)*a2 * 0.000015259;
    return gleDrawTexture(result, a3, a4, a5, a6, a7);
  }
  return result;
}

uint64_t glDrawTexfvOES_Exec(uint64_t result, unsigned __int32 *a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7)
{
  a6.n128_u32[0] = a2[3];
  if (a6.n128_f32[0] < 0.0 || (a7.n128_u32[0] = a2[4], a7.n128_f32[0] < 0.0))
  {
    if (!*(_WORD *)(result + 29832)) {
      *(_WORD *)(result + 29832) = 1281;
    }
  }
  else
  {
    a4.n128_u32[0] = a2[1];
    a5.n128_u32[0] = a2[2];
    a3.n128_u32[0] = *a2;
    return gleDrawTexture(result, a3, a4, a5, a6, a7);
  }
  return result;
}

uint64_t glDrawTexsOES_ExecThread(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  return glDrawTexfOES_ExecThread(a1, (float)a2, (float)a3, (float)a4, (float)a5, (float)a6);
}

uint64_t glDrawTexfOES_ExecThread(uint64_t a1, float a2, float a3, float a4, float a5, float a6)
{
  uint64_t result = (*(uint64_t (**)(void))(a1 + 27752))();
  if (a5 < 0.0 || a6 < 0.0)
  {
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1281;
    }
  }
  else
  {
    v13.n128_f32[0] = a2;
    v14.n128_f32[0] = a3;
    v15.n128_f32[0] = a4;
    v16.n128_f32[0] = a5;
    v17.n128_f32[0] = a6;
    return gleDrawTexture(a1, v13, v14, v15, v16, v17);
  }
  return result;
}

uint64_t glDrawTexiOES_ExecThread(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  return glDrawTexfOES_ExecThread(a1, (float)a2, (float)a3, (float)a4, (float)a5, (float)a6);
}

uint64_t glDrawTexxOES_ExecThread(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  return glDrawTexfOES_ExecThread(a1, (float)a2 * 0.000015259, (float)a3 * 0.000015259, (float)a4 * 0.000015259, (float)a5 * 0.000015259, (float)a6 * 0.000015259);
}

uint64_t glDrawTexsvOES_ExecThread(uint64_t a1, __int16 *a2)
{
  return glDrawTexfOES_ExecThread(a1, (float)*a2, (float)a2[1], (float)a2[2], (float)a2[3], (float)a2[4]);
}

uint64_t glDrawTexivOES_ExecThread(uint64_t a1, int *a2)
{
  return glDrawTexfOES_ExecThread(a1, (float)*a2, (float)a2[1], (float)a2[2], (float)a2[3], (float)a2[4]);
}

uint64_t glDrawTexxvOES_ExecThread(uint64_t a1, int *a2)
{
  return glDrawTexfOES_ExecThread(a1, (float)*a2 * 0.000015259, (float)a2[1] * 0.000015259, (float)a2[2] * 0.000015259, (float)a2[3] * 0.000015259, (float)a2[4] * 0.000015259);
}

uint64_t glDrawTexfvOES_ExecThread(uint64_t a1, float *a2)
{
  return glDrawTexfOES_ExecThread(a1, *a2, a2[1], a2[2], a2[3], a2[4]);
}

void *glEnable_Comp(uint64_t a1, int a2)
{
  uint64_t result = gleAddCommand(a1, (uint64_t)glEnable_ListExec, 4);
  *(_DWORD *)uint64_t result = a2;
  return result;
}

uint64_t glEnable_ListExec(uint64_t a1, int *a2)
{
  return 4;
}

void *glDisable_Comp(uint64_t a1, int a2)
{
  uint64_t result = gleAddCommand(a1, (uint64_t)glDisable_ListExec, 4);
  *(_DWORD *)uint64_t result = a2;
  return result;
}

uint64_t glDisable_ListExec(uint64_t a1, int *a2)
{
  return 4;
}

uint64_t glIsEnabled_ExecThread(uint64_t a1, int a2)
{
  (*(void (**)(void))(a1 + 27752))();

  return gleGetEnabled(a1, a2);
}

uint64_t gleGetClientEnableBit(uint64_t a1, int a2)
{
  if (a2 > 34476)
  {
    switch(a2)
    {
      case 34477:
        return 0x100000;
      case 34884:
        return 0x800000;
      case 35740:
        return 0x400000;
      default:
        return 0;
    }
  }
  else
  {
    uint64_t result = 0x10000;
    switch(a2)
    {
      case 32884:
        return result;
      case 32885:
        uint64_t result = 0x20000;
        break;
      case 32886:
        uint64_t result = 0x40000;
        break;
      case 32888:
        uint64_t result = 0x1000000 << *(_DWORD *)(a1 + 26580);
        break;
      default:
        return 0;
    }
  }
  return result;
}

uint64_t glDisableClientState_PackThread(uint64_t a1, int a2)
{
  *(_DWORD *)gleAddCommand(a1, (uint64_t)glDisableClientState_UnpackThread, 4) = a2;
  uint64_t result = gleGetClientEnableBit(a1, a2);
  *(void *)(*(void *)(a1 + 26448) + 272) &= ~result;
  return result;
}

uint64_t glDisableClientState_UnpackThread(uint64_t a1, int *a2)
{
  return 4;
}

uint64_t glEnableClientState_PackThread(uint64_t a1, int a2)
{
  *(_DWORD *)gleAddCommand(a1, (uint64_t)glEnableClientState_UnpackThread, 4) = a2;
  uint64_t result = gleGetClientEnableBit(a1, a2);
  *(void *)(*(void *)(a1 + 26448) + 272) |= result;
  return result;
}

uint64_t glEnableClientState_UnpackThread(uint64_t a1, int *a2)
{
  return 4;
}

uint64_t glGetError_ExecThread(uint64_t a1)
{
  (*(void (**)(void))(a1 + 27752))();

  return glGetError_Exec(a1);
}

uint64_t glGetError_NoSync()
{
  return 0;
}

uint64_t glGenFencesAPPLE_Exec(uint64_t result, unsigned int a2, _DWORD *a3)
{
  if ((a2 & 0x80000000) != 0)
  {
    if (!*(_WORD *)(result + 29832)) {
      *(_WORD *)(result + 29832) = 1281;
    }
  }
  else
  {
    uint64_t result = gleGenHashNames(result + 25872, a2);
    if (result && a2)
    {
      uint64_t v5 = a2;
      do
      {
        *a3++ = result;
        uint64_t result = (result + 1);
        --v5;
      }
      while (v5);
    }
  }
  return result;
}

uint64_t glDeleteFencesAPPLE_Exec(uint64_t result, unsigned int a2, unsigned int *a3)
{
  uint64_t v3 = result;
  if ((a2 & 0x80000000) != 0)
  {
    if (!*(_WORD *)(result + 29832)) {
      *(_WORD *)(result + 29832) = 1281;
    }
  }
  else if (a2)
  {
    uint64_t v5 = a2;
    do
    {
      unsigned int v6 = *a3++;
      uint64_t result = gleDeleteContextHashNameAndObject(v3, v3 + 25872, (uint64_t (*)(uint64_t, uint64_t))gleFreeFenceObject, v6);
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t glTestFenceAPPLE_Exec(BOOL a1, unsigned int a2)
{
  return gleTestFence(a1, 0, a2, 1);
}

uint64_t *glFinishFenceAPPLE_Exec(uint64_t *a1, unsigned int a2)
{
  return gleFinishFence(a1, 0, a2);
}

uint64_t *glFinishObjectAPPLE_Exec(uint64_t *result, int a2, unsigned int a3)
{
  if (a2 <= 35337)
  {
    switch(a2)
    {
      case 5890:
        int v3 = 1;
        return gleFinishObject(result, v3, a3);
      case 32884:
        int v3 = 2;
        return gleFinishObject(result, v3, a3);
      case 34227:
        int v3 = 3;
        return gleFinishObject(result, v3, a3);
    }
  }
  else if (a2 > 36159)
  {
    if (a2 == 36160)
    {
      int v3 = 5;
      return gleFinishObject(result, v3, a3);
    }
    if (a2 == 36161)
    {
      int v3 = 4;
      return gleFinishObject(result, v3, a3);
    }
  }
  else
  {
    if (a2 == 35338) {
      return result;
    }
    if (a2 == 35339)
    {
      int v3 = 0;
      return gleFinishObject(result, v3, a3);
    }
  }
  if (!*((_WORD *)result + 14916)) {
    *((_WORD *)result + 14916) = 1280;
  }
  return result;
}

BOOL glIsFenceAPPLE_Exec(uint64_t a1, unsigned int a2)
{
  return gleLookupHashObject(a1 + 25872, a2) != 0;
}

uint64_t glFenceSync_Exec(uint64_t a1, int a2, int a3)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v6 = gleFenceSync(a1, 0, a2, a3);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  return v6;
}

BOOL glIsSync_Exec(uint64_t a1, unsigned int a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  double v4 = gleLookupHashObject(*(void *)(a1 + 19296) + 200, a2);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  return v4 != 0;
}

void glDeleteSync_Exec(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    double v4 = gleLookupHashObject(*(void *)(a1 + 19296) + 200, a2);
    uint64_t v5 = *(void *)(a1 + 19296);
    if (v4)
    {
      gleDeleteHashNameAndObject(v5, (void (**)(uint64_t, uint64_t))(v5 + 200), a2);
      uint64_t v6 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
      os_unfair_lock_unlock(v6);
    }
    else
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 324));
      if (!*(_WORD *)(a1 + 29832)) {
        *(_WORD *)(a1 + 29832) = 1281;
      }
    }
  }
}

uint64_t glClientWaitSync_Exec(uint64_t a1, unsigned int a2, unsigned int a3, unint64_t a4)
{
  if (a2
    && (os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324)),
        int v8 = gleLookupHashObject(*(void *)(a1 + 19296) + 200, a2),
        os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324)),
        v8)
    && a3 < 2)
  {
    if (a4)
    {
      if (a4 == -1 && !*((_DWORD *)v8 + 34))
      {
        if (gleTestSync(a1, a3, (uint64_t)v8)) {
          return 37146;
        }
        if (v8[18] != a1)
        {
          uint64_t v13 = mach_absolute_time();
          if (gleIsSyncQueued(*(void *)(a1 + 19296), (uint64_t)v8))
          {
            unint64_t v14 = 0;
            unint64_t v15 = 0;
            do
            {
              if (!v15)
              {
                unint64_t v15 = (unint64_t)(*(double *)(a1 + 432) * 10000.0);
                unint64_t v14 = v15;
              }
              if (mach_absolute_time() - v13 > v15)
              {
                sched_yield();
                v15 += v14;
              }
            }
            while (gleIsSyncQueued(*(void *)(a1 + 19296), (uint64_t)v8));
          }
        }
        gleFinishSync(a1, (uint64_t)v8);
      }
      else
      {
        uint64_t v9 = mach_absolute_time();
        double v10 = *(double *)(a1 + 432);
        if (gleTestSync(a1, a3, (uint64_t)v8)) {
          return 37146;
        }
        unint64_t v12 = (unint64_t)(v10 * (double)a4);
        if (!v12 || mach_absolute_time() - v9 > v12) {
          return 37147;
        }
        if (!gleTestSync(a1, a3, (uint64_t)v8))
        {
          unint64_t v16 = 0;
          unint64_t v17 = 0;
          while (1)
          {
            if (!v17)
            {
              unint64_t v17 = (unint64_t)(*(double *)(a1 + 432) * 10000.0);
              unint64_t v16 = v17;
            }
            unint64_t v18 = mach_absolute_time() - v9;
            if (v18 > v12) {
              break;
            }
            if (v18 > v17)
            {
              sched_yield();
              v17 += v16;
            }
            int v19 = gleTestSync(a1, a3, (uint64_t)v8);
            uint64_t result = 37148;
            if (v19) {
              return result;
            }
          }
          return 37147;
        }
      }
      return 37148;
    }
    else if (gleTestSync(a1, a3, (uint64_t)v8))
    {
      return 37146;
    }
    else
    {
      return 37147;
    }
  }
  else
  {
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1281;
    }
    return 37149;
  }
}

void glWaitSync_Exec(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  if (a2
    && (os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324)),
        int v8 = gleLookupHashObject(*(void *)(a1 + 19296) + 200, a2),
        os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324)),
        v8)
    && !a3
    && a4 == -1)
  {
    gleTestSync(a1, 0, (uint64_t)v8);
  }
  else if (!*(_WORD *)(a1 + 29832))
  {
    *(_WORD *)(a1 + 29832) = 1281;
  }
}

void glGetSynciv_Exec(uint64_t a1, unsigned int a2, int a3, int a4, int *a5, int *a6)
{
  if (!a2
    || a4 < 0
    || (os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324)),
        unint64_t v12 = gleLookupHashObject(*(void *)(a1 + 19296) + 200, a2),
        os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324)),
        !v12))
  {
    unint64_t v14 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v15 = 1281;
    goto LABEL_10;
  }
  if ((a3 - 37138) >= 4)
  {
    unint64_t v14 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v15 = 1280;
LABEL_10:
    *unint64_t v14 = v15;
    return;
  }
  switch(a3)
  {
    case 37138:
      if (!a4) {
        goto LABEL_19;
      }
      int v13 = 37142;
      goto LABEL_21;
    case 37139:
      if (!a4) {
        goto LABEL_19;
      }
      int v13 = 37143;
      goto LABEL_21;
    case 37140:
      if (!a4) {
        goto LABEL_19;
      }
      if (gleTestSync(a1, 0, (uint64_t)v12)) {
        int v13 = 37145;
      }
      else {
        int v13 = 37144;
      }
LABEL_21:
      *a6 = v13;
      int v16 = 1;
      break;
    case 37141:
      int v13 = 0;
      int v16 = 0;
      if (a4) {
        goto LABEL_21;
      }
      break;
    default:
LABEL_19:
      int v16 = 0;
      break;
  }
  if (a5) {
    *a5 = v16;
  }
}

uint64_t glFenceSync_ExecThread(uint64_t a1, int a2, int a3)
{
  if (a2 != 37143)
  {
    double v4 = (__int16 *)(a1 + 29832);
    if (!*(_WORD *)(a1 + 29832))
    {
      uint64_t result = 0;
      __int16 v6 = 1280;
      goto LABEL_9;
    }
    return 0;
  }
  if (!a3)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    uint64_t v7 = *(void *)(a1 + 19296) + 200;
    unsigned int v8 = gleGenHashNames(v7, 1u);
    gleCreateSyncObject(v8);
    uint64_t v10 = v9;
    gleAddHashNameAndObject(a1, v7, v9);
    *(void *)(v10 + 144) = a1;
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    *gleAddCommand(a1, (uint64_t)glFenceSyncObject_UnpackThread, 8) = v10;
    return v8;
  }
  double v4 = (__int16 *)(a1 + 29832);
  if (*(_WORD *)(a1 + 29832)) {
    return 0;
  }
  uint64_t result = 0;
  __int16 v6 = 1281;
LABEL_9:
  *double v4 = v6;
  return result;
}

uint64_t glFenceSyncObject_UnpackThread(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  v3 += 40;
  gleCreatePluginFence(*(void *)(a1 + 19296), v3);
  (*(void (**)(void, void))(*(void *)(a1 + 29496) + 680))(*(void *)(a1 + 29464), *(void *)(v3 + 8 * *(unsigned __int8 *)(a1 + 32500)));
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  return 8;
}

void glDeleteSync_ExecThread(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    double v4 = gleDeleteHashNameAndObject_NoDecrement(*(void *)(a1 + 19296) + 200, a2);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (v4)
    {
      *gleAddCommand(a1, (uint64_t)glDeleteSyncObject_UnpackThread, 8) = v4;
    }
    else if (!*(_WORD *)(a1 + 29832))
    {
      *(_WORD *)(a1 + 29832) = 1281;
    }
  }
}

uint64_t glDeleteSyncObject_UnpackThread(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  int v4 = *(_DWORD *)(v3 + 20) - 1;
  *(_DWORD *)(v3 + 20) = v4;
  if (!v4) {
    gleFreeSyncObject(*(void *)(a1 + 19296), (char *)v3);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  return 8;
}

uint64_t glClientWaitSync_ExecThread(intptr_t a1, unsigned int a2, unsigned int a3, unint64_t a4)
{
  if (a2
    && (os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324)),
        unsigned int v8 = gleLookupHashObject(*(void *)(a1 + 19296) + 200, a2),
        os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324)),
        v8)
    && a3 < 2)
  {
    if (a4)
    {
      uint64_t v9 = mach_absolute_time();
      unint64_t v10 = (unint64_t)(*(double *)(a1 + 432) * (double)a4);
    }
    else
    {
      unint64_t v10 = 0;
      uint64_t v9 = 0;
    }
    v12[0] = glClientWaitSync_CallbackThread;
    v12[1] = 40;
    v12[2] = v8;
    v12[3] = v10;
    v12[4] = v9;
    unsigned int v13 = a3;
    unsigned int v14 = 0;
    uint64_t v15 = 1;
    gleProcessCallback(a1, (uint64_t)v12);
    return v14;
  }
  else
  {
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1281;
    }
    return 37149;
  }
}

uint64_t glClientWaitSync_CallbackThread(uint64_t a1, uint64_t a2)
{
  if (*(__int16 *)(a1 + 28660) == -1
    && *(void *)(*(void *)a2 + 40)
    && gleTestSync(a1, *(_DWORD *)(a2 + 24), *(void *)a2))
  {
    if (*(unsigned char *)(a2 + 32)) {
      int v5 = 37146;
    }
    else {
      int v5 = 37148;
    }
    *(_DWORD *)(a2 + 28) = v5;
  }
  if (!*(_DWORD *)(a2 + 28))
  {
    if (*(void *)(a2 + 8) && mach_absolute_time() - *(void *)(a2 + 16) <= *(void *)(a2 + 8))
    {
      int v6 = *(_DWORD *)(a2 + 28);
      *(unsigned char *)(a2 + 32) = 0;
      if (!v6) {
        return 40;
      }
      goto LABEL_7;
    }
    *(_DWORD *)(a2 + 28) = 37147;
  }
  *(unsigned char *)(a2 + 32) = 0;
LABEL_7:
  gleFinishCallback(a1);
  return 40;
}

void glGetSynciv_ExecThread(uint64_t a1, unsigned int a2, int a3, int a4, int *a5, int *a6)
{
  (*(void (**)(void))(a1 + 27752))();

  glGetSynciv_Exec(a1, a2, a3, a4, a5, a6);
}

void *glWaitSync_Comp(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = gleAddCommand(a1, (uint64_t)glWaitSync_ListExec, 24);
  *uint64_t result = a2;
  *((_DWORD *)result + 2) = a3;
  result[2] = a4;
  return result;
}

uint64_t glWaitSync_ListExec(uint64_t a1, uint64_t a2)
{
  return 24;
}

uint64_t glGenFencesAPPLE_ExecThread(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  (*(void (**)(void))(a1 + 27752))();

  return glGenFencesAPPLE_Exec(a1, a2, a3);
}

uint64_t glDeleteFencesAPPLE_ExecThread(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  (*(void (**)(void))(a1 + 27752))();

  return glDeleteFencesAPPLE_Exec(a1, a2, a3);
}

void *glSetFenceAPPLE_PackThread(os_unfair_lock_s *a1, unsigned int a2)
{
  uint64_t v4 = (uint64_t)&a1[6468];
  int v5 = a1 + 6946;
  os_unfair_lock_lock(a1 + 6946);
  int v6 = gleLookupHashObject(v4, a2);
  if (!v6)
  {
    gleCreateFenceObject(a2);
    int v6 = (uint64_t *)v7;
    gleAddHashNameAndObject((uint64_t)a1, v4, v7);
  }
  atomic_fetch_add_explicit((atomic_uint *volatile)v6 + 35, 1u, memory_order_relaxed);
  os_unfair_lock_unlock(v5);
  uint64_t result = gleAddCommand((uint64_t)a1, (uint64_t)glSetFenceAPPLE_UnpackThread, 4);
  *(_DWORD *)uint64_t result = a2;
  return result;
}

uint64_t glSetFenceAPPLE_UnpackThread(uint64_t a1, unsigned int *a2)
{
  unsigned int v3 = *a2;
  uint64_t v4 = a1 + 25872;
  int v5 = (os_unfair_lock_s *)(a1 + 27784);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 27784));
  int v6 = gleLookupHashObject(v4, v3);
  if (!v6[5]) {
    gleCreatePluginFence(*(void *)(a1 + 19296), (uint64_t)(v6 + 5));
  }
  gleSetFence(a1, v3);
  atomic_fetch_add_explicit((atomic_uint *volatile)v6 + 35, 0xFFFFFFFF, memory_order_relaxed);
  os_unfair_lock_unlock(v5);
  return 4;
}

uint64_t glTestFenceAPPLE_ExecThread(intptr_t a1, unsigned int a2)
{
  uint64_t v4 = a1 + 25872;
  int v5 = (os_unfair_lock_s *)(a1 + 27784);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 27784));
  int v6 = gleLookupHashObject(v4, a2);
  if (v6)
  {
    uint64_t v7 = v6;
    os_unfair_lock_unlock(v5);
    v9[2] = v7;
    v9[0] = glTestFenceAPPLE_CallbackThread;
    v9[1] = 16;
    unsigned int v10 = a2;
    int v11 = 1;
    gleProcessCallback(a1, (uint64_t)v9);
    return v11;
  }
  else
  {
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
    os_unfair_lock_unlock(v5);
    return 1;
  }
}

uint64_t glTestFenceAPPLE_CallbackThread(uint64_t a1, uint64_t a2)
{
  if (*(__int16 *)(a1 + 28660) == -1 && !*(_DWORD *)(*(void *)a2 + 140))
  {
    *(unsigned char *)(a2 + 12) = gleTestFence(a1, 0, *(_DWORD *)(a2 + 8), 1);
    gleFinishCallback(a1);
  }
  return 16;
}

uint64_t glTestObjectAPPLE_ExecThread(intptr_t a1, int a2, unsigned int a3)
{
  if (a2 == 35339)
  {
    return glTestFenceAPPLE_ExecThread(a1, a3);
  }
  else
  {
    (*(void (**)(intptr_t))(a1 + 27752))(a1);
    return glTestObjectAPPLE_Exec(a1, a2, a3);
  }
}

void glFinishFenceAPPLE_ExecThread(intptr_t a1, unsigned int a2)
{
  uint64_t v4 = a1 + 25872;
  int v5 = (os_unfair_lock_s *)(a1 + 27784);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 27784));
  int v6 = gleLookupHashObject(v4, a2);
  if (v6)
  {
    uint64_t v7 = v6;
    os_unfair_lock_unlock(v5);
    v8[2] = v7;
    v8[0] = glFinishFenceAPPLE_CallbackThread;
    v8[1] = 16;
    v8[3] = a2;
    gleProcessCallback(a1, (uint64_t)v8);
  }
  else
  {
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
    os_unfair_lock_unlock(v5);
  }
}

uint64_t glFinishFenceAPPLE_CallbackThread(uint64_t a1, unsigned int *a2)
{
  if (*(__int16 *)(a1 + 28660) == -1 && !*(_DWORD *)(*(void *)a2 + 140))
  {
    gleFinishFence((uint64_t *)a1, 0, a2[2]);
    gleFinishCallback(a1);
  }
  return 16;
}

void glFinishObjectAPPLE_ExecThread(intptr_t a1, int a2, unsigned int a3)
{
  if (a2 == 35339)
  {
    glFinishFenceAPPLE_ExecThread(a1, a3);
  }
  else
  {
    (*(void (**)(intptr_t))(a1 + 27752))(a1);
    glFinishObjectAPPLE_Exec((uint64_t *)a1, a2, a3);
  }
}

BOOL glIsFenceAPPLE_ExecThread(uint64_t a1, unsigned int a2)
{
  return gleLookupHashObject(a1 + 25872, a2) != 0;
}

uint64_t glFinish_ExecThread(uint64_t a1)
{
  (*(void (**)(void))(a1 + 27752))();

  return glFinish_Exec(a1, v2, v3, v4);
}

uint64_t glFinish_Exec(uint64_t a1, double a2, double a3, double a4)
{
  uint64_t v5 = a1 + 29800;
  if (*(unsigned char *)(a1 + 32472))
  {
    if ((*(_DWORD *)v5 & 0x743C0478) == 0 || (uint64_t result = gleUpdateDrawFramebufferState(a1, a2, a3, a4), !result)) {
      uint64_t result = (*(uint64_t (**)(void, void))(*(void *)(a1 + 29496) + 232))(*(void *)(a1 + 29464), 0);
    }
    *(unsigned char *)(v5 + 2672) = *(unsigned char *)(v5 + 2671);
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 29496) + 240))(*(void *)(a1 + 29464));
  }
  if (*(unsigned char *)(v5 + 2696))
  {
    unint64_t v7 = 0;
    unsigned int v8 = (void *)(a1 + 32512);
    do
    {
      uint64_t result = (*(uint64_t (**)(void))(v8[206] + 1312))(*v8);
      ++v7;
      v8 += 209;
    }
    while (v7 < *(unsigned __int8 *)(v5 + 2696));
  }
  return result;
}

uint64_t glFlush_ExecThread(uint64_t a1)
{
  (*(void (**)(void))(a1 + 27752))();

  return glFlush_Exec(a1, v2, v3, v4);
}

void glGenRenderbuffersEXT_Exec(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  if ((a2 & 0x80000000) != 0)
  {
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1281;
    }
  }
  else
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    int v6 = gleGenHashNames(*(void *)(a1 + 19296) + 40, a2);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (v6) {
      BOOL v7 = a2 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
      uint64_t v8 = a2;
      do
      {
        *a3++ = v6++;
        --v8;
      }
      while (v8);
    }
  }
}

void glDeleteRenderbuffersEXT_Exec(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if ((a2 & 0x80000000) == 0)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    uint64_t v6 = *(void *)(a1 + 28960);
    if (v6)
    {
      uint64_t v27 = *(void *)(a1 + 19296) + 40;
      uint64_t v24 = (uint64_t **)(v6 + 40);
    }
    else
    {
      uint64_t v27 = 0;
      uint64_t v24 = 0;
    }
    uint64_t v7 = *(void *)(a1 + 28968);
    BOOL v8 = v7 == v6 || v7 == 0;
    int v9 = !v8;
    int v25 = v9;
    if (v8)
    {
      unsigned int v23 = 0;
    }
    else
    {
      uint64_t v27 = *(void *)(a1 + 19296) + 40;
      unsigned int v23 = (uint64_t **)(v7 + 40);
    }
    uint64_t v10 = *(void *)(a1 + 28952);
    uint64_t v26 = *(void *)(a1 + 28960);
    if (v10)
    {
      int v11 = *(_DWORD *)(v10 + 16);
      if (!a2) {
        goto LABEL_42;
      }
    }
    else
    {
      int v11 = 0;
      if (!a2)
      {
LABEL_42:
        uint64_t v22 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
        os_unfair_lock_unlock(v22);
        return;
      }
    }
    uint64_t v12 = 0;
    if (v6) {
      int v13 = 1;
    }
    else {
      int v13 = v9;
    }
    uint64_t v14 = a2;
    do
    {
      unsigned int v15 = *(_DWORD *)(a3 + 4 * v12);
      if (v15)
      {
        if (v15 == v11) {
          gleBindRenderbuffer(a1, 0);
        }
        if (v13)
        {
          int v16 = gleLookupHashObject(v27, v15);
          if (v16)
          {
            unint64_t v17 = v16;
            if (v26)
            {
              uint64_t v18 = 0;
              int v19 = v24;
              do
              {
                if (v17 == *v19) {
                  gleFramebufferTexture(a1, *(void *)(a1 + 28960) + 40, v18, 0, 0, 0, 0, 0, 0);
                }
                ++v18;
                v19 += 2;
              }
              while (v18 != 10);
            }
            if (v25)
            {
              uint64_t v20 = 0;
              unsigned int v21 = v23;
              do
              {
                if (v17 == *v21) {
                  gleFramebufferTexture(a1, *(void *)(a1 + 28968) + 40, v20, 0, 0, 0, 0, 0, 0);
                }
                ++v20;
                v21 += 2;
              }
              while (v20 != 10);
            }
          }
        }
        gleUnbindDeleteHashNameAndObject(a1, (void (**)(void, uint64_t))(*(void *)(a1 + 19296) + 40), (void (*)(uint64_t, uint64_t))gleUnbindTextureObject, v15);
      }
      ++v12;
    }
    while (v12 != v14);
    goto LABEL_42;
  }
  if (!*(_WORD *)(a1 + 29832)) {
    *(_WORD *)(a1 + 29832) = 1281;
  }
}

void glBindRenderbuffer_Exec(uint64_t a1, int a2, unsigned int a3)
{
  if (a2 == 36161)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    gleBindRenderbuffer(a1, a3);
    uint64_t v5 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
    os_unfair_lock_unlock(v5);
  }
  else if (!*(_WORD *)(a1 + 29832))
  {
    *(_WORD *)(a1 + 29832) = 1280;
  }
}

uint64_t glRenderbufferStorageEXT_Exec(uint64_t a1, int a2, int a3, unsigned int a4, unsigned int a5)
{
  return glRenderbufferStorageInline(a1, a2, 0, a3, a4, a5);
}

uint64_t glRenderbufferStorageInline(uint64_t a1, int a2, signed int a3, int a4, unsigned int a5, unsigned int a6)
{
  uint64_t result = gleCheckRenderbufferStorageArgs(a1, a2, a3, a4, a5, a6);
  if (!result) {
    return result;
  }
  int v12 = a6 ? a5 : 0;
  uint64_t v13 = *(void *)(a1 + 28952);
  if (!v13) {
    return result;
  }
  __int16 v14 = *(_WORD *)(v13 + 808);
  if ((v14 & 0x1C00) == 0x1000) {
    goto LABEL_10;
  }
  if ((*(_WORD *)(v13 + 808) & 0x1C00) == 0)
  {
    v14 |= 0x1000u;
    *(_WORD *)(v13 + 808) = v14;
LABEL_10:
    if (!*(void *)(v13 + 800) && (v14 & 0x800) == 0)
    {
      if (a3 >= 1 && !*(unsigned char *)(*(void *)(a1 + 29032) + 616))
      {
        if (a4 <= 34835)
        {
          if (((a4 - 33321) > 0xF || ((1 << (a4 - 41)) & 0xC3F5) == 0)
            && ((a4 - 32848) > 9 || ((1 << (a4 - 80)) & 0x3C3) == 0)
            && (a4 - 6407) >= 2)
          {
            goto LABEL_34;
          }
          goto LABEL_33;
        }
        if (a4 > 36193)
        {
          if ((a4 - 36194) <= 0x2D && ((1 << (a4 - 98)) & 0x30000C000001) != 0) {
            goto LABEL_33;
          }
          int v15 = 36975;
        }
        else
        {
          if ((a4 - 34836) <= 7 && ((1 << (a4 - 20)) & 0xC3) != 0 || a4 == 35898) {
            goto LABEL_33;
          }
          int v15 = 35907;
        }
        if (a4 == v15) {
LABEL_33:
        }
          *(unsigned char *)(v13 + 832) |= 1u;
      }
LABEL_34:
      BYTE1(v16) = 1;
      LOBYTE(v16) = a3;
      gleEvaluateTextureImageChange(a1, v13 + 40, v13 + 1072, 0, 0, v12, a6, 1, 0, a4, 0x1908u, 0x1401u, v16, 0);
      *(_DWORD *)(v13 + 1008) = 65541;
      return gleDirtyRenderbufferCurrentBindPointsGeom(a1, v13 + 40);
    }
    goto LABEL_21;
  }
  if ((*(_WORD *)(v13 + 808) & 0xC00) == 0) {
    goto LABEL_10;
  }
LABEL_21:
  if (!*(_WORD *)(a1 + 29832)) {
    *(_WORD *)(a1 + 29832) = 1282;
  }
  return result;
}

BOOL glIsRenderbufferEXT_Exec(uint64_t a1, unsigned int a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  double v4 = gleLookupHashObject(*(void *)(a1 + 19296) + 40, a2);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  return v4 != 0;
}

uint64_t glGetRenderbufferParameterivEXT_Exec(uint64_t result, int a2, int a3, int *a4)
{
  double v4 = (__int16 *)(result + 29832);
  if (a2 != 36161)
  {
LABEL_16:
    if (*v4) {
      return result;
    }
    __int16 v10 = 1280;
    goto LABEL_18;
  }
  uint64_t v5 = *(unsigned __int16 **)(result + 28952);
  if (!v5)
  {
    if (*v4) {
      return result;
    }
    __int16 v10 = 1282;
LABEL_18:
    *double v4 = v10;
    return result;
  }
  switch(a3)
  {
    case 36162:
      int v8 = v5[538];
      goto LABEL_9;
    case 36163:
      int v8 = v5[539];
      goto LABEL_9;
    case 36164:
      int v7 = v5[538];
      if (v5[538]) {
        int v7 = v5[539] != 0;
      }
      if (v5[501]) {
        int v8 = v5[500];
      }
      else {
        int v8 = 32854;
      }
      int v11 = v8;
      uint64_t v9 = 4099;
      goto LABEL_7;
    case 36165:
    case 36166:
    case 36167:
    case 36168:
    case 36169:
    case 36170:
    case 36171:
    case 36172:
    case 36173:
    case 36174:
    case 36175:
      goto LABEL_16;
    case 36176:
    case 36177:
    case 36178:
    case 36179:
      int v7 = v5[538];
      if (v5[538]) {
        int v7 = v5[539] != 0;
      }
      int v8 = 0;
      uint64_t v9 = (a3 - 3316);
      int v11 = 0;
      goto LABEL_7;
    case 36180:
      int v7 = v5[538];
      if (v5[538]) {
        int v7 = v5[539] != 0;
      }
      int v8 = 0;
      int v11 = 0;
      uint64_t v9 = 34890;
      goto LABEL_7;
    case 36181:
      int v7 = v5[538];
      if (v5[538]) {
        int v7 = v5[539] != 0;
      }
      int v8 = 0;
      int v11 = 0;
      uint64_t v9 = 35057;
      goto LABEL_7;
    default:
      if (a3 != 36011) {
        goto LABEL_16;
      }
      int v7 = v5[538];
      if (v5[538]) {
        int v7 = v5[539] != 0;
      }
      int v8 = 0;
      int v11 = 0;
      uint64_t v9 = 36011;
LABEL_7:
      if (v7)
      {
        uint64_t result = (*(uint64_t (**)(void, void, void, void, uint64_t, int *))(*(void *)(result + 29496)
                                                                                           + 376))(*(void *)(result + 29464), *(void *)&v5[4 * *(unsigned __int8 *)(result + 32500) + 20], 0, 0, v9, &v11);
        int v8 = v11;
      }
LABEL_9:
      *a4 = v8;
      break;
  }
  return result;
}

void glGenFramebuffersEXT_Exec(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  if ((a2 & 0x80000000) != 0)
  {
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1281;
    }
  }
  else
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    int v6 = gleGenHashNames(*(void *)(a1 + 19296) + 8, a2);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (v6) {
      BOOL v7 = a2 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
      uint64_t v8 = a2;
      do
      {
        *a3++ = v6++;
        --v8;
      }
      while (v8);
    }
  }
}

void glDeleteFramebuffersEXT_Exec(int8x16_t *a1, unsigned int a2, unsigned int *a3)
{
  if ((a2 & 0x80000000) == 0)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1[1206].i64[0] + 324));
    uint64_t v6 = a1[1810].i64[0];
    if (v6) {
      int v7 = *(_DWORD *)(v6 + 16);
    }
    else {
      int v7 = 0;
    }
    uint64_t v8 = a1[1810].i64[1];
    if (v8)
    {
      int v9 = *(_DWORD *)(v8 + 16);
      if (!a2) {
        goto LABEL_23;
      }
    }
    else
    {
      int v9 = 0;
      if (!a2)
      {
LABEL_23:
        int v15 = (os_unfair_lock_s *)(a1[1206].i64[0] + 324);
        os_unfair_lock_unlock(v15);
        return;
      }
    }
    uint64_t v10 = a2;
    do
    {
      unsigned int v12 = *a3++;
      unsigned int v11 = v12;
      if (v12)
      {
        if (v11 == v7) {
          gleBindFramebuffer(a1, 36009, 0);
        }
        if (v11 == v9) {
          gleBindFramebuffer(a1, 36008, 0);
        }
        uint64_t v13 = gleDeleteHashNameAndObject_NoDecrement(a1[1206].i64[0] + 8, v11);
        if (v13)
        {
          int v14 = *((_DWORD *)v13 + 5) - 1;
          *((_DWORD *)v13 + 5) = v14;
          if (v14) {
            gleUnbindFramebufferObject((uint64_t)a1, (uint64_t)v13);
          }
          else {
            gleUnbindAndFreeFramebufferObject((uint64_t)a1, (char *)v13);
          }
        }
      }
      --v10;
    }
    while (v10);
    goto LABEL_23;
  }
  if (!a1[1864].i16[4]) {
    a1[1864].i16[4] = 1281;
  }
}

void glBindFramebuffer_Exec(int8x16_t *a1, int a2, unsigned int a3)
{
  if ((a2 - 36008) < 2 || a2 == 36160)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1[1206].i64[0] + 324));
    gleBindFramebuffer(a1, a2, a3);
    int v7 = (os_unfair_lock_s *)(a1[1206].i64[0] + 324);
    os_unfair_lock_unlock(v7);
  }
  else if (!a1[1864].i16[4])
  {
    a1[1864].i16[4] = 1280;
  }
}

void glFramebufferTexture2DEXT_Exec(uint64_t a1, int a2, int a3, int a4, unsigned int a5, unsigned int a6)
{
  if (a2 == 36008)
  {
    uint64_t v10 = 28968;
  }
  else
  {
    if (a2 != 36160 && a2 != 36009) {
      goto LABEL_43;
    }
    uint64_t v10 = 28960;
  }
  uint64_t v11 = *(void *)(a1 + v10);
  if (!v11)
  {
LABEL_34:
    unsigned int v12 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v13 = 1282;
    goto LABEL_45;
  }
  if (a5 && (a6 & 0x80000000) != 0) {
    goto LABEL_9;
  }
  unsigned int v14 = 8;
  if (a3 != 33306 && a3 != 36096)
  {
    if (a3 == 36128)
    {
      unsigned int v14 = 9;
    }
    else
    {
      unsigned int v14 = a3 - 36064;
      if (a3 - 36064 >= *(unsigned __int8 *)(*(void *)(a1 + 29032) + 22)) {
        goto LABEL_43;
      }
    }
  }
  if (!a5)
  {
    uint64_t v22 = (os_unfair_lock_s **)(a1 + 19296);
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    int v19 = 0;
    LOWORD(v18) = 0;
    uint64_t v21 = 0;
    goto LABEL_28;
  }
  if (a4 <= 34068)
  {
    if (a4 == 3553)
    {
      unsigned int v25 = 0;
      do
      {
        unsigned int v26 = v25 + 1;
        if (v25 > 0x1F) {
          break;
        }
        int v27 = *(unsigned __int16 *)(*(void *)(a1 + 29032) + 160) << v25++;
      }
      while ((v27 & 0x80000000) == 0);
      if (32 - v26 < a6) {
        goto LABEL_9;
      }
      int v19 = 0;
      int v18 = 3;
      goto LABEL_24;
    }
    if (a4 == 34037)
    {
      if (!a6)
      {
        int v19 = 0;
        int v18 = 2;
        goto LABEL_24;
      }
LABEL_9:
      unsigned int v12 = (__int16 *)(a1 + 29832);
      if (*(_WORD *)(a1 + 29832)) {
        return;
      }
      __int16 v13 = 1281;
LABEL_45:
      *unsigned int v12 = v13;
      return;
    }
LABEL_43:
    unsigned int v12 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v13 = 1280;
    goto LABEL_45;
  }
  if ((a4 - 34069) >= 6)
  {
    if (a4 == 37120)
    {
      if (!a6)
      {
        int v19 = 0;
        int v18 = 8;
        goto LABEL_24;
      }
      goto LABEL_9;
    }
    goto LABEL_43;
  }
  unsigned int v15 = 0;
  do
  {
    unsigned int v16 = v15 + 1;
    if (v15 > 0x1F) {
      break;
    }
    int v17 = *(unsigned __int16 *)(*(void *)(a1 + 29032) + 168) << v15++;
  }
  while ((v17 & 0x80000000) == 0);
  if (32 - v16 < a6) {
    goto LABEL_9;
  }
  int v18 = 0;
  int v19 = a4 - 34069;
LABEL_24:
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v20 = gleLookupHashObject(*(void *)(a1 + 19296) + 72, a5);
  if (!v20 || (uint64_t v21 = (uint64_t)v20, v18 != (v20[101] & 0xF)))
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    goto LABEL_34;
  }
  uint64_t v22 = (os_unfair_lock_s **)(a1 + 19296);
LABEL_28:
  uint64_t v23 = v11 + 40;
  gleFramebufferTexture(a1, v23, v14, v18, v21, v19, a6, 0, 0);
  if (a3 == 33306) {
    gleFramebufferTexture(a1, v23, 9u, v18, v21, v19, a6, 0, 0);
  }
  uint64_t v24 = *v22 + 81;

  os_unfair_lock_unlock(v24);
}

uint64_t glFramebufferParameterivAPPLE_Exec(uint64_t result, int a2, int a3, int *a4)
{
  if (a2 == 36008)
  {
    uint64_t v4 = 28968;
  }
  else
  {
    if (a2 != 36160 && a2 != 36009) {
      goto LABEL_10;
    }
    uint64_t v4 = 28960;
  }
  uint64_t v5 = (uint64_t *)(result + v4);
  if (a3 == 35449)
  {
    int v6 = *a4;
    if ((*a4 - 35450) <= 3)
    {
      uint64_t v7 = *v5;
      if (v6 != *(_DWORD *)(v7 + 492))
      {
        *(_DWORD *)(v7 + 492) = v6;
        return gleSetUnknownFramebufferCompleteness(result, v7 + 40);
      }
      return result;
    }
  }
LABEL_10:
  if (!*(_WORD *)(result + 29832)) {
    *(_WORD *)(result + 29832) = 1280;
  }
  return result;
}

void glGetFramebufferParameterivAPPLE_Exec(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  *a4 = 0;
  if (a2 == 36008)
  {
    uint64_t v5 = 28968;
  }
  else
  {
    if (a2 != 36160 && a2 != 36009) {
      goto LABEL_9;
    }
    uint64_t v5 = 28960;
  }
  uint64_t v6 = a1 + v5;
  if (a3 == 35449)
  {
    *a4 = *(_DWORD *)(*(void *)v6 + 492);
    return;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
LABEL_9:
  if (!*(_WORD *)(a1 + 29832)) {
    *(_WORD *)(a1 + 29832) = 1280;
  }
}

_DWORD *glFramebufferParameterivAPPLE_PackThread(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  uint64_t result = gleAddCommand(a1, (uint64_t)glFramebufferParameterivAPPLE_UnpackThread, 12);
  *uint64_t result = a2;
  result[1] = a3;
  result[2] = *a4;
  return result;
}

uint64_t glFramebufferParameterivAPPLE_UnpackThread(uint64_t a1, int *a2)
{
  return 12;
}

void glGetFramebufferParameterivAPPLE_ExecThread(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  (*(void (**)(void))(a1 + 27752))();

  glGetFramebufferParameterivAPPLE_Exec(a1, a2, a3, a4);
}

void glFramebufferRenderbufferEXT_Exec(uint64_t a1, int a2, int a3, int a4, unsigned int a5)
{
  if (a4 != 36161 && a5 != 0) {
    goto LABEL_20;
  }
  if (a2 == 36008)
  {
    uint64_t v9 = 28968;
  }
  else
  {
    if (a2 != 36160 && a2 != 36009) {
      goto LABEL_20;
    }
    uint64_t v9 = 28960;
  }
  uint64_t v10 = *(void *)(a1 + v9);
  if (!v10)
  {
LABEL_29:
    unsigned int v15 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v16 = 1282;
    goto LABEL_31;
  }
  unsigned int v11 = 8;
  if (a3 != 33306 && a3 != 36096)
  {
    if (a3 == 36128)
    {
      unsigned int v11 = 9;
      goto LABEL_17;
    }
    unsigned int v11 = a3 - 36064;
    if (a3 - 36064 >= *(unsigned __int8 *)(*(void *)(a1 + 29032) + 22))
    {
LABEL_20:
      unsigned int v15 = (__int16 *)(a1 + 29832);
      if (*(_WORD *)(a1 + 29832)) {
        return;
      }
      __int16 v16 = 1280;
LABEL_31:
      *unsigned int v15 = v16;
      return;
    }
  }
LABEL_17:
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  if (!a5)
  {
    __int16 v14 = 0;
    uint64_t v13 = 0;
    goto LABEL_23;
  }
  unsigned int v12 = gleLookupHashObject(*(void *)(a1 + 19296) + 40, a5);
  if (!v12)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    goto LABEL_29;
  }
  uint64_t v13 = (uint64_t)v12;
  __int16 v14 = 0x2000;
LABEL_23:
  uint64_t v17 = v10 + 40;
  gleFramebufferTexture(a1, v17, v11, v14, v13, 0, 0, 0, 0);
  if (a3 == 33306) {
    gleFramebufferTexture(a1, v17, 9u, v14, v13, 0, 0, 0, 0);
  }
  int v18 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);

  os_unfair_lock_unlock(v18);
}

BOOL glIsFramebufferEXT_Exec(uint64_t a1, unsigned int a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v4 = gleLookupHashObject(*(void *)(a1 + 19296) + 8, a2);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  return v4 != 0;
}

uint64_t glCheckFramebufferStatusEXT_Exec(uint64_t a1, int a2)
{
  if (a2 == 36008)
  {
    uint64_t v3 = 28968;
LABEL_6:
    uint64_t v4 = *(void *)(a1 + v3);
    if (v4)
    {
      os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
      uint64_t v5 = gleCheckFramebufferStatus(a1, v4 + 40);
      os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
      return v5;
    }
    else if (*(void *)(a1 + 29008))
    {
      return 36053;
    }
    else
    {
      return 33305;
    }
  }
  if (a2 == 36160 || a2 == 36009)
  {
    uint64_t v3 = 28960;
    goto LABEL_6;
  }
  if (*(_WORD *)(a1 + 29832)) {
    return 0;
  }
  uint64_t result = 0;
  *(_WORD *)(a1 + 29832) = 1280;
  return result;
}

uint64_t glGetFramebufferAttachmentParameterivEXT_Exec(uint64_t result, int a2, int a3, int a4, int *a5)
{
  uint64_t v7 = (__int16 *)(result + 29832);
  if (a2 == 36008)
  {
    uint64_t v8 = 28968;
  }
  else
  {
    if (a2 != 36160 && a2 != 36009) {
      goto LABEL_116;
    }
    uint64_t v8 = 28960;
  }
  uint64_t v9 = *(void *)(result + v8);
  if (!v9)
  {
    if ((*(unsigned char *)(*(void *)(result + 29032) + 561) & 0x40) == 0)
    {
LABEL_17:
      if (*v7) {
        return result;
      }
      __int16 v14 = 1282;
LABEL_118:
      *uint64_t v7 = v14;
      return result;
    }
    switch(a3)
    {
      case 1024:
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        BOOL v13 = *(void *)(result + 29008) == 0;
        goto LABEL_30;
      case 1025:
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        int v17 = *(unsigned __int8 *)(*(void *)(result + 29480) + 42);
        goto LABEL_29;
      case 1026:
        goto LABEL_28;
      case 1027:
        if (*(unsigned char *)(result + 32483))
        {
          uint64_t v11 = 0;
          uint64_t v12 = 0;
          BOOL v13 = *(unsigned char *)(*(void *)(result + 29480) + 42) == 0;
LABEL_30:
          if (v13) {
            unsigned int v10 = 0;
          }
          else {
            unsigned int v10 = 6144;
          }
        }
        else
        {
          unsigned int v10 = 0;
          uint64_t v11 = 0;
          uint64_t v12 = 0;
        }
        break;
      case 1028:
        goto LABEL_116;
      case 1029:
        if (*(unsigned char *)(result + 32501) != 4) {
          goto LABEL_116;
        }
LABEL_28:
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        int v17 = *(unsigned __int8 *)(result + 32483);
LABEL_29:
        BOOL v13 = v17 == 0;
        goto LABEL_30;
      default:
        int v15 = 6145;
        if (a3 == 6145)
        {
          uint64_t v11 = 0;
          uint64_t v12 = 0;
          int v16 = *(unsigned __int8 *)(*(void *)(result + 29480) + 56);
        }
        else
        {
          int v15 = 6146;
          if (a3 != 6146) {
            goto LABEL_116;
          }
          uint64_t v11 = 0;
          uint64_t v12 = 0;
          int v16 = *(unsigned __int8 *)(*(void *)(result + 29480) + 57);
        }
        if (v16) {
          unsigned int v10 = v15;
        }
        else {
          unsigned int v10 = 0;
        }
        break;
    }
LABEL_41:
    if (a4 <= 36047)
    {
      switch(a4)
      {
        case 33296:
          if (v11) {
            goto LABEL_44;
          }
          if (!v10) {
            goto LABEL_124;
          }
          if (v10 == 6144)
          {
            LODWORD(v12) = 9729;
            if (*(unsigned char *)(*(void *)(result + 29032) + 45))
            {
              if (*(unsigned char *)(result + 15196)) {
                LODWORD(v12) = 35904;
              }
              else {
                LODWORD(v12) = 9729;
              }
            }
          }
          else
          {
            LODWORD(v12) = 9729;
          }
          goto LABEL_106;
        case 33297:
          if (v11)
          {
            int v18 = 33297;
            goto LABEL_76;
          }
          if (!v10) {
            goto LABEL_124;
          }
          if (v10 == 6144)
          {
            if (*(unsigned char *)(*(void *)(result + 29032) + 43)) {
              LODWORD(v12) = 5126;
            }
            else {
              LODWORD(v12) = 35863;
            }
          }
          else
          {
            LODWORD(v12) = 35863;
          }
          break;
        case 33298:
          if (v11) {
            goto LABEL_65;
          }
          if (v10 != 6144) {
            goto LABEL_105;
          }
          LODWORD(v12) = *(unsigned __int8 *)(*(void *)(result + 29032) + 48);
          goto LABEL_106;
        case 33299:
          if (v11) {
            goto LABEL_67;
          }
          if (v10 != 6144) {
            goto LABEL_105;
          }
          LODWORD(v12) = *(unsigned __int8 *)(*(void *)(result + 29032) + 49);
          goto LABEL_106;
        case 33300:
          if (v11) {
            goto LABEL_69;
          }
          if (v10 != 6144) {
            goto LABEL_105;
          }
          LODWORD(v12) = *(unsigned __int8 *)(*(void *)(result + 29032) + 50);
          goto LABEL_106;
        case 33301:
          if (v11) {
            goto LABEL_71;
          }
          if (v10 != 6144) {
            goto LABEL_105;
          }
          LODWORD(v12) = *(unsigned __int8 *)(*(void *)(result + 29032) + 51);
          goto LABEL_106;
        case 33302:
          if (v11) {
            goto LABEL_73;
          }
          if (v10 != 6145) {
            goto LABEL_105;
          }
          LODWORD(v12) = *(unsigned __int8 *)(*(void *)(result + 29032) + 56);
          goto LABEL_106;
        case 33303:
          if (v11) {
            goto LABEL_75;
          }
          if (v10 == 6146) {
            LODWORD(v12) = *(unsigned __int8 *)(*(void *)(result + 29032) + 57);
          }
          else {
LABEL_105:
          }
            LODWORD(v12) = 0;
          goto LABEL_106;
        default:
          goto LABEL_56;
      }
      goto LABEL_106;
    }
    if (a4 != 36263)
    {
      if (a4 != 36049)
      {
        if (a4 == 36048)
        {
          if (!v11)
          {
            if (v10) {
              LODWORD(v12) = 33304;
            }
            else {
              LODWORD(v12) = 0;
            }
            goto LABEL_106;
          }
LABEL_49:
          if (v12)
          {
            if ((*(_WORD *)(v12 + 808) & 0x2000) != 0) {
              LODWORD(v12) = 36161;
            }
            else {
              LODWORD(v12) = 5890;
            }
            goto LABEL_106;
          }
          goto LABEL_124;
        }
LABEL_56:
        if (v12)
        {
          __int16 v19 = *(_WORD *)(v12 + 808);
          if ((v19 & 0x2000) == 0)
          {
            if (a4 <= 36050)
            {
              if (a4 == 35419)
              {
                uint64_t result = gleTextureTargetExtractor(v12);
                *a5 = result;
                return result;
              }
              if (a4 == 36050)
              {
                LODWORD(v12) = *(_DWORD *)(v11 + 16 * v10 + 264);
LABEL_106:
                *a5 = v12;
                return result;
              }
              goto LABEL_116;
            }
            if (a4 == 36051)
            {
              if ((v19 & 0xF) == 0)
              {
                LODWORD(v12) = *(_DWORD *)(v11 + 16 * v10 + 260) + 34069;
                goto LABEL_106;
              }
              goto LABEL_124;
            }
            if (a4 == 36052)
            {
              if ((v19 & 0xFu) <= 0xA && ((1 << (v19 & 0xF)) & 0x662) != 0)
              {
                LODWORD(v12) = *(_DWORD *)(v11 + 16 * v10 + 268);
                goto LABEL_106;
              }
LABEL_124:
              *a5 = 0;
              return result;
            }
          }
        }
LABEL_116:
        if (*v7) {
          return result;
        }
        __int16 v14 = 1280;
        goto LABEL_118;
      }
LABEL_54:
      if (v12) {
        LODWORD(v12) = *(_DWORD *)(v12 + 16);
      }
      goto LABEL_106;
    }
LABEL_52:
    if (v12) {
      LODWORD(v12) = *(char *)(v11 + 16 * v10 + 9);
    }
    goto LABEL_106;
  }
  unsigned int v10 = 8;
  if (a3 != 33306 && a3 != 36096)
  {
    if (a3 == 36128)
    {
      uint64_t v11 = v9 + 40;
      uint64_t v12 = *(void *)(v9 + 184);
      unsigned int v10 = 9;
      goto LABEL_41;
    }
    unsigned int v10 = a3 - 36064;
    if (a3 - 36064 >= *(unsigned __int8 *)(*(void *)(result + 29032) + 22)) {
      goto LABEL_116;
    }
  }
  uint64_t v11 = v9 + 40;
  uint64_t v12 = *(void *)(v9 + 40 + 16 * v10);
  if (a3 != 33306) {
    goto LABEL_41;
  }
  if (v12 != *(void *)(v9 + 184)) {
    goto LABEL_17;
  }
  if (a4 > 36047)
  {
    if (a4 == 36048) {
      goto LABEL_49;
    }
    if (a4 == 36049) {
      goto LABEL_54;
    }
    if (a4 != 36263) {
      goto LABEL_56;
    }
    goto LABEL_52;
  }
  switch(a4)
  {
    case 33296:
LABEL_44:
      int v18 = 33296;
      break;
    case 33297:
      goto LABEL_17;
    case 33298:
LABEL_65:
      int v18 = 32860;
      break;
    case 33299:
LABEL_67:
      int v18 = 32861;
      break;
    case 33300:
LABEL_69:
      int v18 = 32862;
      break;
    case 33301:
LABEL_71:
      int v18 = 32863;
      break;
    case 33302:
LABEL_73:
      int v18 = 34890;
      break;
    case 33303:
LABEL_75:
      int v18 = 35057;
      break;
    default:
      goto LABEL_56;
  }
LABEL_76:

  return gleGetAttachmentInfo(result, v9, v10, v18, a5);
}

void glGenerateMipmapEXT_Exec(uint64_t a1, int a2)
{
  uint64_t v4 = a1 + 29832;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  if (a2 > 35863)
  {
    if (a2 > 36872 || a2 != 35866) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (a2 <= 32878)
  {
    if (a2 != 3553) {
      goto LABEL_13;
    }
LABEL_15:
    uint64_t v5 = 1;
    goto LABEL_16;
  }
  if (a2 == 32879)
  {
LABEL_12:
    if ((*(unsigned char *)(v4 + 2669) & 0xFE) == 2) {
      goto LABEL_13;
    }
    goto LABEL_15;
  }
  if (a2 != 34067)
  {
LABEL_13:
    if (*(_WORD *)v4) {
      goto LABEL_30;
    }
    __int16 v6 = 1280;
LABEL_29:
    *(_WORD *)uint64_t v4 = v6;
    goto LABEL_30;
  }
  uint64_t v5 = 6;
LABEL_16:
  uint64_t v7 = gleLookUpNonProxyNonFaceTexture(a1, a2);
  if (!v7) {
    goto LABEL_13;
  }
  int v8 = *(unsigned __int8 *)(v4 + 2669);
  if (((v8 & 0xFE) == 2 || (*(unsigned char *)(*(void *)(a1 + 29032) + 565) & 0x40) == 0)
    && ((*(_WORD *)(v7 + 962) & (unsigned __int16)(*(_WORD *)(v7 + 962) - 1)) != 0
     || (*(_WORD *)(v7 + 964) & (unsigned __int16)(*(_WORD *)(v7 + 964) - 1)) != 0))
  {
    goto LABEL_27;
  }
  if (*(unsigned char *)(v7 + 555)) {
    goto LABEL_27;
  }
  int v9 = *(unsigned __int16 *)(v7 + 772);
  if (v9 == 34041) {
    goto LABEL_27;
  }
  if (v9 == 6402) {
    goto LABEL_27;
  }
  unsigned __int16 v10 = *(_WORD *)(v7 + 960);
  if (v10 - 36208 < 0x24) {
    goto LABEL_27;
  }
  if (v10 - 33329 < 0xC) {
    goto LABEL_27;
  }
  int v11 = *(unsigned __int16 *)(v7 + 960);
  if ((v11 - 36756) < 8 || v11 == 36975) {
    goto LABEL_27;
  }
  if (v8 != 4)
  {
LABEL_47:
    if (v11 == 35905 || v8 == 3 && v11 == 35907) {
      goto LABEL_27;
    }
    goto LABEL_50;
  }
  if ((v11 - 34836) < 0xC || (v11 - 33325) < 4)
  {
    int v13 = v11 & 0xFFFE;
    goto LABEL_42;
  }
  int v13 = 36012;
  if ((v11 & 0xFFFE) == 0x8CAC)
  {
LABEL_42:
    if (v13 != 34842 && (v11 & 0xFFFFFFFD) != 0x822D)
    {
      if (v11 == 35898 || v11 == 35901) {
        goto LABEL_52;
      }
LABEL_27:
      if (*(_WORD *)v4) {
        goto LABEL_30;
      }
      __int16 v6 = 1282;
      goto LABEL_29;
    }
    goto LABEL_47;
  }
  if (*(unsigned __int16 *)(v7 + 960) <= 0x8C3Cu)
  {
    int v13 = v11 & 0xFFFE;
    if (v11 != 35898)
    {
LABEL_50:
      int v14 = 35409;
      goto LABEL_51;
    }
    goto LABEL_42;
  }
  int v13 = v11 & 0xFFFE;
  if (v11 == 35901) {
    goto LABEL_42;
  }
  int v14 = 35905;
LABEL_51:
  if (v11 == v14) {
    goto LABEL_27;
  }
LABEL_52:
  int v15 = (unsigned __int16 *)(v7 + 984);
  while (1)
  {
    int v16 = *v15++;
    if (((1 << (*(_WORD *)(v7 + 982) & 0xF)) & v16) == 0) {
      break;
    }
    if (!--v5)
    {
      gleGenerateMipmap(a1, a2);
      goto LABEL_30;
    }
  }
  if (a2 == 34067) {
    goto LABEL_27;
  }
LABEL_30:
  uint64_t v12 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);

  os_unfair_lock_unlock(v12);
}

void glFramebufferTextureLayerEXT_Exec(uint64_t a1, int a2, int a3, unsigned int a4, unsigned int a5, int a6)
{
  if (a2 == 36008)
  {
    uint64_t v11 = 28968;
  }
  else
  {
    if (a2 != 36160 && a2 != 36009) {
      goto LABEL_24;
    }
    uint64_t v11 = 28960;
  }
  uint64_t v12 = *(void *)(a1 + v11);
  if (!v12) {
    goto LABEL_33;
  }
  if (a4 && ((a6 | a5) & 0x80000000) != 0)
  {
LABEL_9:
    int v13 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v14 = 1281;
LABEL_35:
    *int v13 = v14;
    return;
  }
  unsigned int v15 = 8;
  if (a3 == 33306 || a3 == 36096) {
    goto LABEL_16;
  }
  if (a3 == 36128)
  {
    unsigned int v15 = 9;
    goto LABEL_16;
  }
  unsigned int v15 = a3 - 36064;
  if (a3 - 36064 >= *(unsigned __int8 *)(*(void *)(a1 + 29032) + 22))
  {
LABEL_24:
    int v13 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v14 = 1280;
    goto LABEL_35;
  }
LABEL_16:
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  if (a4)
  {
    int v16 = gleLookupHashObject(*(void *)(a1 + 19296) + 72, a4);
    if (v16)
    {
      uint64_t v17 = (uint64_t)v16;
      int v18 = v16[101] & 0xF;
      switch(v18)
      {
        case 1:
          unsigned int v24 = 0;
          do
          {
            unsigned int v25 = v24 + 1;
            if (v24 > 0x1F) {
              break;
            }
            int v26 = *(unsigned __int16 *)(*(void *)(a1 + 29032) + 164) << v24++;
          }
          while ((v26 & 0x80000000) == 0);
          if (32 - v25 < a5) {
            goto LABEL_48;
          }
          LOWORD(v18) = 1;
          goto LABEL_27;
        case 5:
        case 6:
          unsigned int v19 = 0;
          do
          {
            unsigned int v20 = v19 + 1;
            if (v19 > 0x1F) {
              break;
            }
            int v21 = *(unsigned __int16 *)(*(void *)(a1 + 29032) + 160) << v19++;
          }
          while ((v21 & 0x80000000) == 0);
          if (32 - v20 >= a5) {
            goto LABEL_27;
          }
          goto LABEL_48;
        case 9:
          if (a5) {
            goto LABEL_48;
          }
          LOWORD(v18) = 9;
          goto LABEL_27;
        case 10:
          unsigned int v27 = 0;
          do
          {
            unsigned int v28 = v27 + 1;
            if (v27 > 0x1F) {
              break;
            }
            int v29 = *(unsigned __int16 *)(*(void *)(a1 + 29032) + 168) << v27++;
          }
          while ((v29 & 0x80000000) == 0);
          if (32 - v28 < a5)
          {
LABEL_48:
            os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
            goto LABEL_9;
          }
          LOWORD(v18) = 10;
          break;
        default:
          goto LABEL_32;
      }
      goto LABEL_27;
    }
LABEL_32:
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
LABEL_33:
    int v13 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v14 = 1282;
    goto LABEL_35;
  }
  LOWORD(v18) = 0;
  uint64_t v17 = 0;
LABEL_27:
  uint64_t v22 = v12 + 40;
  gleFramebufferTexture(a1, v22, v15, v18, v17, 0, a5, a6, 0);
  if (a3 == 33306) {
    gleFramebufferTexture(a1, v22, 9u, v18, v17, 0, a5, a6, 0);
  }
  uint64_t v23 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);

  os_unfair_lock_unlock(v23);
}

BOOL glIsRenderbufferEXT_ExecThread(uint64_t a1, unsigned int a2)
{
  (*(void (**)(void))(a1 + 27752))();

  return glIsRenderbufferEXT_Exec(a1, a2);
}

_DWORD *glBindRenderbufferEXT_PackThread(uint64_t a1, int a2, int a3)
{
  uint64_t result = gleAddCommand(a1, (uint64_t)glBindRenderbufferEXT_UnpackThread, 8);
  *uint64_t result = a2;
  result[1] = a3;
  return result;
}

uint64_t glBindRenderbufferEXT_UnpackThread(uint64_t a1, uint64_t a2)
{
  return 8;
}

void glDeleteRenderbuffersEXT_ExecThread(uint64_t a1, unsigned int a2, uint64_t a3)
{
  (*(void (**)(void))(a1 + 27752))();

  glDeleteRenderbuffersEXT_Exec(a1, a2, a3);
}

void glGenRenderbuffersEXT_ExecThread(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  (*(void (**)(void))(a1 + 27752))();

  glGenRenderbuffersEXT_Exec(a1, a2, a3);
}

_DWORD *glRenderbufferStorageEXT_PackThread(uint64_t a1, int a2, int a3, int a4, int a5)
{
  uint64_t result = gleAddCommand(a1, (uint64_t)glRenderbufferStorageMultisampleEXT_UnpackThread, 20);
  *uint64_t result = a2;
  result[1] = 0;
  result[2] = a3;
  result[3] = a4;
  result[4] = a5;
  return result;
}

uint64_t glRenderbufferStorageMultisampleEXT_UnpackThread(uint64_t a1, uint64_t a2)
{
  return 20;
}

uint64_t glGetRenderbufferParameterivEXT_ExecThread(uint64_t a1, int a2, int a3, int *a4)
{
  (*(void (**)(void))(a1 + 27752))();

  return glGetRenderbufferParameterivEXT_Exec(a1, a2, a3, a4);
}

BOOL glIsFramebufferEXT_ExecThread(uint64_t a1, unsigned int a2)
{
  (*(void (**)(void))(a1 + 27752))();

  return glIsFramebufferEXT_Exec(a1, a2);
}

_DWORD *glBindFramebufferEXT_PackThread(uint64_t a1, int a2, int a3)
{
  uint64_t result = gleAddCommand(a1, (uint64_t)glBindFramebufferEXT_UnpackThread, 8);
  *uint64_t result = a2;
  result[1] = a3;
  return result;
}

uint64_t glBindFramebufferEXT_UnpackThread(int8x16_t *a1, uint64_t a2)
{
  return 8;
}

void glDeleteFramebuffersEXT_ExecThread(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  (*(void (**)(void))(a1 + 27752))();

  glDeleteFramebuffersEXT_Exec((int8x16_t *)a1, a2, a3);
}

void glGenFramebuffersEXT_ExecThread(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  (*(void (**)(void))(a1 + 27752))();

  glGenFramebuffersEXT_Exec(a1, a2, a3);
}

uint64_t glCheckFramebufferStatusEXT_ExecThread(uint64_t a1, int a2)
{
  (*(void (**)(void))(a1 + 27752))();

  return glCheckFramebufferStatusEXT_Exec(a1, a2);
}

_DWORD *glFramebufferTexture2DEXT_PackThread(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  uint64_t result = gleAddCommand(a1, (uint64_t)glFramebufferTexture2DEXT_UnpackThread, 24);
  *uint64_t result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  result[4] = a6;
  return result;
}

uint64_t glFramebufferTexture2DEXT_UnpackThread(uint64_t a1, uint64_t a2)
{
  return 24;
}

_DWORD *glFramebufferRenderbufferEXT_PackThread(uint64_t a1, int a2, int a3, int a4, int a5)
{
  uint64_t result = gleAddCommand(a1, (uint64_t)glFramebufferRenderbufferEXT_UnpackThread, 24);
  *uint64_t result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  return result;
}

uint64_t glFramebufferRenderbufferEXT_UnpackThread(uint64_t a1, uint64_t a2)
{
  return 24;
}

uint64_t glGetFramebufferAttachmentParameterivEXT_ExecThread(uint64_t a1, int a2, int a3, int a4, int *a5)
{
  (*(void (**)(void))(a1 + 27752))();

  return glGetFramebufferAttachmentParameterivEXT_Exec(a1, a2, a3, a4, a5);
}

void *glGenerateMipmapEXT_PackThread(uint64_t a1, int a2)
{
  uint64_t result = gleAddCommand(a1, (uint64_t)glGenerateMipmapEXT_UnpackThread, 4);
  *(_DWORD *)uint64_t result = a2;
  return result;
}

uint64_t glGenerateMipmapEXT_UnpackThread(uint64_t a1, int *a2)
{
  return 4;
}

_DWORD *glFramebufferTextureLayerEXT_PackThread(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  uint64_t result = gleAddCommand(a1, (uint64_t)glFramebufferTextureLayerEXT_UnpackThread, 24);
  *uint64_t result = a2;
  result[1] = a3;
  result[3] = a4;
  result[4] = a5;
  result[5] = a6;
  return result;
}

uint64_t glFramebufferTextureLayerEXT_UnpackThread(uint64_t a1, uint64_t a2)
{
  return 24;
}

void *glBlitFramebufferEXT_Comp(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10)
{
  uint64_t result = gleAddCommand(a1, (uint64_t)glBlitFramebufferEXT_ListExec, 40);
  *(_DWORD *)uint64_t result = a2;
  *((_DWORD *)result + 1) = a3;
  *((_DWORD *)result + 2) = a4;
  *((_DWORD *)result + 3) = a5;
  *((_DWORD *)result + 4) = a6;
  *((_DWORD *)result + 5) = a7;
  *((_DWORD *)result + 6) = a8;
  *(void *)((char *)result + 28) = a9;
  *((_DWORD *)result + 9) = a10;
  return result;
}

uint64_t glBlitFramebufferEXT_ListExec(uint64_t a1, uint64_t a2, double a3, __n128 a4, double a5)
{
  return 40;
}

uint64_t glBlitFramebufferEXT_Exec(uint64_t result, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6, int a7, int a8, double a9, __n128 a10, double a11, int a12, unsigned int a13, unsigned int a14)
{
  __int16 v14 = (_WORD *)(result + 29832);
  if ((a13 & 0xFFFFBAFF) != 0)
  {
    if (*v14) {
      return result;
    }
    LOWORD(v29) = 1281;
LABEL_53:
    *__int16 v14 = v29;
    return result;
  }
  uint64_t v21 = result;
  if (a14 != 9728)
  {
    if (a14 - 37050 >= 2)
    {
      if (a14 == 9729)
      {
LABEL_154:
        if ((a13 & 0x500) != 0)
        {
LABEL_51:
          LOWORD(v29) = 1282;
          goto LABEL_52;
        }
        goto LABEL_3;
      }
    }
    else if ((*(unsigned char *)(*(void *)(result + 29480) + 568) & 0x80) != 0)
    {
      goto LABEL_154;
    }
    LOWORD(v29) = 1280;
    goto LABEL_52;
  }
LABEL_3:
  uint64_t v22 = (_WORD *)(result + 15176);
  if ((*(unsigned char *)(result + 1540) & 4) != 0)
  {
    uint64_t result = gleGenerateMatrixIdentifier(result, result + 9488, a9, a10.n128_f64[0], a11);
    *(_DWORD *)(v21 + 19152) = *(_DWORD *)(v21 + 19152) & 0xFFFFFEFF | ((result != -1074791426) << 8);
    *(_DWORD *)(v21 + 29732) = result;
  }
  if ((*(unsigned char *)(v21 + 29803) & 0x8A) != 0)
  {
    uint64_t result = gleUpdateReadFramebufferState(v21);
    if (result) {
      goto LABEL_11;
    }
  }
  if ((*(unsigned char *)(v21 + 1540) & 4) != 0)
  {
    uint64_t result = gleGenerateMatrixIdentifier(v21, v21 + 9488, a9, a10.n128_f64[0], a11);
    *(_DWORD *)(v21 + 19152) = *(_DWORD *)(v21 + 19152) & 0xFFFFFEFF | ((result != -1074791426) << 8);
    *(_DWORD *)(v21 + 29732) = result;
  }
  if ((*(_DWORD *)(v21 + 29800) & 0x743C0478) != 0)
  {
    uint64_t result = gleUpdateDrawFramebufferState(v21, a9, a10.n128_f64[0], a11);
    if (result)
    {
LABEL_11:
      if (result != 16711680 && !*v14) {
        *__int16 v14 = result;
      }
      return result;
    }
  }
  unsigned int v103 = a3;
  unsigned int v104 = a5;
  unsigned int v105 = a4;
  uint64_t v23 = *(void *)(v21 + 28968);
  uint64_t v24 = *(void *)(v21 + 28960);
  uint64_t v25 = v23 + 40;
  uint64_t v26 = v24 + 40;
  if ((a13 & 0x4000) == 0 || (unsigned int v27 = *(unsigned __int16 *)(v23 + 472) - 36064, v27 > 7))
  {
    int v29 = 0;
    if ((a13 & 0x100) == 0) {
      goto LABEL_45;
    }
    goto LABEL_33;
  }
  uint64_t v28 = 0;
  int v29 = 0;
  uint64_t v30 = *(void *)(v25 + 16 * (*(unsigned __int16 *)(v23 + 472) - 36064));
  uint64_t v31 = v23 + 16 * v27;
  a9 = *(double *)(v31 + 304);
  do
  {
    unsigned int v32 = *(unsigned __int16 *)(v24 + 456 + v28) - 36064;
    if (v32 <= 7 && v30 != 0)
    {
      uint64_t v34 = (int32x2_t *)(v24 + 296 + 16 * v32);
      BOOL v35 = v30 == *(void *)(v26 + 16 * (*(unsigned __int16 *)(v24 + 456 + v28) - 36064))
         && *(_DWORD *)(v31 + 300) == v34->i32[1];
      BOOL v36 = v35;
      a10.n128_u64[0] = (unint64_t)vceq_s32(*(int32x2_t *)&a9, v34[1]);
      uint64_t result = a10.n128_u32[0];
      if ((v36 & a10.n128_u32[0] & a10.n128_u32[1]) != 0) {
        int v29 = 1282;
      }
    }
    v28 += 2;
  }
  while (v28 != 16);
  if ((a13 & 0x100) != 0)
  {
LABEL_33:
    uint64_t v37 = *(void *)(v23 + 168);
    if (v37)
    {
      BOOL v38 = *(_DWORD *)(v23 + 436) == *(_DWORD *)(v24 + 436) && *(_DWORD *)(v23 + 432) == *(_DWORD *)(v24 + 432);
      BOOL v39 = v38 && *(_DWORD *)(v23 + 428) == *(_DWORD *)(v24 + 428);
      if (v39 && v37 == *(void *)(v24 + 168)) {
        int v29 = 1282;
      }
    }
  }
LABEL_45:
  int v41 = a14;
  if ((a13 & 0x400) != 0)
  {
    uint64_t v42 = *(void *)(v23 + 184);
    if (v42)
    {
      if (v42 == *(void *)(v24 + 184)
        && *(_DWORD *)(v23 + 444) == *(_DWORD *)(v24 + 444)
        && *(_DWORD *)(v23 + 448) == *(_DWORD *)(v24 + 448)
        && *(_DWORD *)(v23 + 452) == *(_DWORD *)(v24 + 452))
      {
        goto LABEL_51;
      }
    }
  }
  if (v29)
  {
LABEL_52:
    if (*v14) {
      return result;
    }
    goto LABEL_53;
  }
  if (v23)
  {
    __int16 v43 = (unsigned char *)(v23 + 478);
    if (v24)
    {
LABEL_57:
      uint64_t v44 = (unsigned char *)(v24 + 478);
      goto LABEL_60;
    }
  }
  else
  {
    __int16 v43 = (unsigned char *)(*(void *)(v21 + 29032) + 59);
    if (v24) {
      goto LABEL_57;
    }
  }
  uint64_t v44 = (unsigned char *)(*(void *)(v21 + 29032) + 59);
LABEL_60:
  if (*v44) {
    goto LABEL_160;
  }
  int v102 = a6;
  int v45 = a12;
  int v46 = *v43;
  if (a14 >> 1 == 18525)
  {
    if (!*v43) {
      goto LABEL_160;
    }
  }
  else if (*v43 && (v104 != a12 || v103 != a7 || a2 != v102 || v105 != a8))
  {
    goto LABEL_160;
  }
  unsigned int v47 = a13 & 0xFFFFBFFF;
  if (v23)
  {
    if (*(_WORD *)(v23 + 472)) {
      unsigned int v47 = a13;
    }
    if (!*(void *)(v23 + 168)) {
      v47 &= ~0x100u;
    }
    unsigned int v48 = v47 & 0xFFFFFBFF;
    BOOL v49 = *(void *)(v23 + 184) == 0;
  }
  else
  {
    if (*v22) {
      unsigned int v47 = a13;
    }
    uint64_t v50 = *(void *)(v21 + 29480);
    if (!*(unsigned char *)(v50 + 56)) {
      v47 &= ~0x100u;
    }
    unsigned int v48 = v47 & 0xFFFFFBFF;
    BOOL v49 = *(unsigned char *)(v50 + 57) == 0;
  }
  if (v49) {
    unsigned int v47 = v48;
  }
  uint64_t v51 = 0;
  if (v24)
  {
    while (!*(_WORD *)(v24 + 456 + v51))
    {
      v51 += 2;
      if (v51 == 16)
      {
        v47 &= ~0x4000u;
        break;
      }
    }
    if (!*(void *)(v24 + 168)) {
      v47 &= ~0x100u;
    }
    unsigned int v52 = v47 & 0xFFFFFBFF;
    BOOL v53 = *(void *)(v24 + 184) == 0;
  }
  else
  {
    while (!*(_WORD *)(v21 + 15180 + v51))
    {
      v51 += 2;
      if (v51 == 16)
      {
        v47 &= ~0x4000u;
        break;
      }
    }
    uint64_t v54 = *(void *)(v21 + 29480);
    if (!*(unsigned char *)(v54 + 56)) {
      v47 &= ~0x100u;
    }
    unsigned int v52 = v47 & 0xFFFFFBFF;
    BOOL v53 = *(unsigned char *)(v54 + 57) == 0;
  }
  if (v53) {
    unsigned int v55 = v52;
  }
  else {
    unsigned int v55 = v47;
  }
  if (!v55) {
    return result;
  }
  uint64_t result = v55 & 0x4000;
  if ((result & *(_DWORD *)(*(void *)(v21 + 29032) + 560)) == 0) {
    goto LABEL_113;
  }
  BOOL v56 = 1;
  if (v23)
  {
    int v57 = 1 << *(_WORD *)(v23 + 472);
    int v58 = v57 & *(_DWORD *)(v23 + 528);
    BOOL v59 = v58 != 0;
    int v60 = v57 & *(_DWORD *)(v23 + 532);
    int v61 = v58 | v60;
    BOOL v62 = v60 != 0;
    BOOL v56 = v61 == 0;
    if (v24) {
      goto LABEL_102;
    }
LABEL_105:
    BOOL v64 = 0;
    BOOL v66 = 0;
    BOOL v67 = 1;
    if (!v56) {
      goto LABEL_107;
    }
LABEL_106:
    if (!v64 && !v66) {
      goto LABEL_107;
    }
LABEL_160:
    if (*v14) {
      return result;
    }
    LOWORD(v29) = 1282;
    goto LABEL_53;
  }
  BOOL v59 = 0;
  BOOL v62 = 0;
  if (!v24) {
    goto LABEL_105;
  }
LABEL_102:
  int v63 = *(_DWORD *)(v24 + 528);
  BOOL v64 = v63 != 0;
  int v65 = *(_DWORD *)(v24 + 532);
  BOOL v66 = v65 != 0;
  BOOL v67 = (*(_DWORD *)(v24 + 496) & ~(v65 | v63)) != 0;
  if (v56) {
    goto LABEL_106;
  }
LABEL_107:
  if (v59 && (v66 || v67)) {
    goto LABEL_160;
  }
  if (v62 && (v64 || v67)) {
    goto LABEL_160;
  }
  int v41 = a14;
  if (a14 != 9728 && (v62 || v59)) {
    goto LABEL_160;
  }
LABEL_113:
  int v99 = a7;
  int v100 = a8;
  uint64_t v68 = v14;
  if (v23) {
    BOOL v69 = v24 == 0;
  }
  else {
    BOOL v69 = 1;
  }
  int v70 = !v69;
  unsigned int v101 = v55;
  if (!v69 && (v55 & 0x100) != 0)
  {
    uint64_t v71 = *(void *)(v23 + 168);
    unsigned int v72 = *(unsigned __int16 *)(v71 + 1000);
    unsigned int v108 = v72;
    uint64_t v73 = *(void *)(v24 + 168);
    unsigned int v74 = *(unsigned __int16 *)(v73 + 1000);
    unsigned int v107 = v74;
    if (v72 != v74)
    {
      unsigned int v94 = v55 & 0x4000;
      int v75 = v46;
      (*(void (**)(void, void, void, void, uint64_t, unsigned int *))(*(void *)(v21 + 29496) + 376))(*(void *)(v21 + 29464), *(void *)(v71 + 8 * *((unsigned __int8 *)v68 + 2668) + 40), *(unsigned int *)(v23 + 428), *(unsigned int *)(v23 + 432), 4099, &v108);
      (*(void (**)(void, void, void, void, uint64_t, unsigned int *))(*(void *)(v21 + 29496) + 376))(*(void *)(v21 + 29464), *(void *)(v73 + 8 * *((unsigned __int8 *)v68 + 2668) + 40), *(unsigned int *)(v24 + 428), *(unsigned int *)(v24 + 432), 4099, &v107);
      uint64_t result = v94;
      int v46 = v75;
      unsigned int v55 = v101;
      uint64_t v25 = v23 + 40;
      int v41 = a14;
      unsigned int v74 = v107;
      unsigned int v72 = v108;
    }
    if (v72 != v74) {
      goto LABEL_168;
    }
  }
  char v76 = v70 ^ 1;
  if ((v55 & 0x400) == 0) {
    char v76 = 1;
  }
  if ((v76 & 1) == 0)
  {
    uint64_t v77 = *(void *)(v23 + 184);
    unsigned int v78 = *(unsigned __int16 *)(v77 + 1000);
    unsigned int v108 = v78;
    uint64_t v79 = *(void *)(v24 + 184);
    unsigned int v80 = *(unsigned __int16 *)(v79 + 1000);
    unsigned int v107 = v80;
    if (v78 != v80)
    {
      unsigned int v95 = result;
      uint64_t v97 = v25;
      int v81 = v46;
      (*(void (**)(void, void, void, void, uint64_t, unsigned int *))(*(void *)(v21 + 29496) + 376))(*(void *)(v21 + 29464), *(void *)(v77 + 8 * *((unsigned __int8 *)v68 + 2668) + 40), *(unsigned int *)(v23 + 444), *(unsigned int *)(v23 + 448), 4099, &v108);
      (*(void (**)(void, void, void, void, uint64_t, unsigned int *))(*(void *)(v21 + 29496) + 376))(*(void *)(v21 + 29464), *(void *)(v79 + 8 * *((unsigned __int8 *)v68 + 2668) + 40), *(unsigned int *)(v24 + 444), *(unsigned int *)(v24 + 448), 4099, &v107);
      uint64_t result = v95;
      int v46 = v81;
      unsigned int v55 = v101;
      uint64_t v25 = v97;
      int v41 = a14;
      unsigned int v80 = v107;
      unsigned int v78 = v108;
    }
    if (v78 != v80)
    {
LABEL_168:
      if (!*v68) {
        _WORD *v68 = 1282;
      }
      return result;
    }
  }
  if (v46) {
    BOOL v82 = result == 0;
  }
  else {
    BOOL v82 = 1;
  }
  if (v82) {
    int v83 = 0;
  }
  else {
    int v83 = v70;
  }
  if (v83 != 1) {
    goto LABEL_146;
  }
  unsigned int v84 = *(unsigned __int16 *)(v23 + 472) - 36064;
  uint64_t v85 = v23 + 16 * v84;
  unsigned int v107 = 0;
  uint64_t v86 = *(void *)(v25 + 16 * v84);
  uint64_t v98 = v86 + 40;
  uint64_t result = gleSRGBToFormat(*(unsigned __int16 *)(v86 + 1000));
  uint64_t v87 = 0;
  int v88 = 0;
  unsigned int v108 = result;
  uint64_t v89 = v24 + 296;
  uint64_t v90 = v24 + 456;
  uint64_t v93 = (unsigned int *)(v85 + 304);
  uint64_t v96 = (unsigned int *)(v85 + 300);
  while (1)
  {
    uint64_t v91 = *(unsigned __int16 *)(v90 + v87) - 36064;
    if (v91 > 7) {
      goto LABEL_144;
    }
    uint64_t v92 = *(void *)(v26 + 16 * (*(unsigned __int16 *)(v90 + v87) - 36064));
    uint64_t result = gleSRGBToFormat(*(unsigned __int16 *)(v92 + 1000));
    unsigned int v107 = result;
    if (v108 == result) {
      goto LABEL_144;
    }
    if (!v88)
    {
      (*(void (**)(void, void, void, void, uint64_t, unsigned int *))(*(void *)(v21 + 29496) + 376))(*(void *)(v21 + 29464), *(void *)(v98 + 8 * *((unsigned __int8 *)v68 + 2668)), *v96, *v93, 4099, &v108);
      unsigned int v108 = gleSRGBToFormat(v108);
    }
    (*(void (**)(void, void, void, void, uint64_t, unsigned int *))(*(void *)(v21 + 29496) + 376))(*(void *)(v21 + 29464), *(void *)(v92 + 40 + 8 * *((unsigned __int8 *)v68 + 2668)), *(unsigned int *)(v89 + 16 * v91 + 4), *(unsigned int *)(v89 + 16 * v91 + 8), 4099, &v107);
    uint64_t result = gleSRGBToFormat(v107);
    unsigned int v107 = result;
    if (v108 != result) {
      break;
    }
    int v88 = 1;
LABEL_144:
    v87 += 2;
    if (v87 == 16) {
      goto LABEL_145;
    }
  }
  if (!*v68) {
    _WORD *v68 = 1282;
  }
LABEL_145:
  int v41 = a14;
  int v45 = a12;
  unsigned int v55 = v101;
LABEL_146:
  if (a2 != v105 && v103 != v104 && v102 != v100 && v99 != v45) {
    return gleBlitFramebuffer(v21, a2, v103, v105, v104, v102, v99, v100, a9, a10, v45, v55, v41);
  }
  return result;
}

_DWORD *glRenderbufferStorageMultisampleEXT_PackThread(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  uint64_t result = gleAddCommand(a1, (uint64_t)glRenderbufferStorageMultisampleEXT_UnpackThread, 20);
  *uint64_t result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  result[4] = a6;
  return result;
}

uint64_t glDiscardFramebufferEXT_Exec(uint64_t result, int a2, unsigned int a3, unsigned int *a4, double a5, double a6, double a7)
{
  uint64_t v9 = result;
  uint64_t v10 = result + 29832;
  if (a2 == 36008)
  {
    uint64_t v11 = 28968;
  }
  else
  {
    if (a2 != 36160 && a2 != 36009) {
      goto LABEL_47;
    }
    uint64_t v11 = 28960;
  }
  uint64_t v12 = (uint64_t *)(result + v11);
  if ((a3 & 0x80000000) != 0)
  {
    if (!*(_WORD *)v10)
    {
      __int16 v23 = 1281;
LABEL_49:
      *(_WORD *)uint64_t v10 = v23;
      return result;
    }
    return result;
  }
  uint64_t v13 = *v12;
  if (a3)
  {
    int v14 = 0;
    int v15 = 0;
    int v16 = 0;
    int v17 = 0;
    int v18 = a4;
    uint64_t v19 = a3;
    do
    {
      unsigned int v21 = *v18++;
      unsigned int v20 = v21;
      uint64_t result = v21 - 6144;
      if (result >= 3)
      {
        uint64_t result = v20 >> 4;
        if (result == 2254)
        {
          if (v20 - 36064 >= *(unsigned __int8 *)(*(void *)(v9 + 29480) + 22)) {
            int v16 = 1;
          }
          int v14 = 1;
        }
        else if ((v20 & 0xFFFFFFDF) == 0x8D00)
        {
          int v14 = 1;
        }
        else
        {
          int v17 = 1;
        }
      }
      else
      {
        int v15 = 1;
      }
      --v19;
    }
    while (v19);
    if (!v17)
    {
      BOOL v22 = v13 == 0;
      if (!v13) {
        int v15 = v14;
      }
      if (!v15)
      {
        if (v16)
        {
          if (*(_WORD *)v10) {
            return result;
          }
          __int16 v23 = 1282;
          goto LABEL_49;
        }
        goto LABEL_27;
      }
    }
LABEL_47:
    if (*(_WORD *)v10) {
      return result;
    }
    __int16 v23 = 1280;
    goto LABEL_49;
  }
  BOOL v22 = v13 == 0;
LABEL_27:
  uint64_t v24 = (unsigned int *)(v9 + 19152);
  int v25 = *(_DWORD *)(v9 + 1540);
  if (a2 == 36008)
  {
    if ((v25 & 4) != 0)
    {
      uint64_t result = gleGenerateMatrixIdentifier(v9, v9 + 9488, a5, a6, a7);
      *uint64_t v24 = *v24 & 0xFFFFFEFF | ((result != -1074791426) << 8);
      *(_DWORD *)(v9 + 29732) = result;
    }
    if ((*(unsigned char *)(v9 + 29803) & 0x8A) == 0 || (uint64_t result = gleUpdateReadFramebufferState(v9), !result))
    {
LABEL_40:
      if (*(unsigned char *)(v10 + 2664))
      {
        unint64_t v26 = 0;
        uint64_t v27 = v13 + 200;
        uint64_t v28 = (void *)(v9 + 32512);
        do
        {
          if (v22) {
            uint64_t v29 = 0;
          }
          else {
            uint64_t v29 = *(void *)(v27 + 8 * v26);
          }
          uint64_t result = (*(uint64_t (**)(void, uint64_t, void, unsigned int *))(v28[206] + 1600))(*v28, v29, a3, a4);
          ++v26;
          v28 += 209;
        }
        while (v26 < *(unsigned __int8 *)(v10 + 2664));
      }
      return result;
    }
  }
  else
  {
    if ((v25 & 4) != 0)
    {
      uint64_t result = gleGenerateMatrixIdentifier(v9, v9 + 9488, a5, a6, a7);
      *uint64_t v24 = *v24 & 0xFFFFFEFF | ((result != -1074791426) << 8);
      *(_DWORD *)(v9 + 29732) = result;
    }
    if ((*(_DWORD *)(v9 + 29800) & 0x743C0478) == 0) {
      goto LABEL_40;
    }
    uint64_t result = gleUpdateDrawFramebufferState(v9, a5, a6, a7);
    if (!result) {
      goto LABEL_40;
    }
  }
  if (result != 16711680 && !*(_WORD *)v10) {
    *(_WORD *)uint64_t v10 = result;
  }
  return result;
}

void *glDiscardFramebufferEXT_PackThread(void *result, int a2, unsigned int a3, int *a4)
{
  if ((a3 & 0x80000000) != 0)
  {
    if (!*((_WORD *)result + 14916)) {
      *((_WORD *)result + 14916) = 1281;
    }
  }
  else
  {
    uint64_t result = gleAddCommand((uint64_t)result, (uint64_t)glDiscardFramebufferEXT_UnpackThread, (int)(4 * a3 + 8));
    *(_DWORD *)uint64_t result = a2;
    *((_DWORD *)result + 1) = a3;
    if (a3)
    {
      uint64_t v7 = a3;
      int v8 = result + 1;
      do
      {
        int v9 = *a4++;
        *v8++ = v9;
        --v7;
      }
      while (v7);
    }
  }
  return result;
}

uint64_t glDiscardFramebufferEXT_UnpackThread(uint64_t a1, uint64_t a2, double a3, double a4, double a5)
{
  return (4 * *(_DWORD *)(a2 + 4) + 8);
}

uint64_t glInvalidateSubFramebuffer_Exec(uint64_t result, int a2, unsigned int a3, unsigned int *a4, double a5, double a6, double a7, int a8, int a9, int a10, int a11)
{
  if (a2 == 36008)
  {
    uint64_t v11 = 28968;
  }
  else
  {
    if (a2 != 36160 && a2 != 36009)
    {
      int v14 = (__int16 *)(result + 29832);
      if (*(_WORD *)(result + 29832)) {
        return result;
      }
      __int16 v15 = 1280;
      goto LABEL_16;
    }
    uint64_t v11 = 28960;
  }
  uint64_t v12 = (uint64_t *)(result + v11);
  if ((a11 | a10) < 0)
  {
    int v14 = (__int16 *)(result + 29832);
    if (*(_WORD *)(result + 29832)) {
      return result;
    }
    __int16 v15 = 1281;
LABEL_16:
    *int v14 = v15;
    return result;
  }
  if (a8 <= 0)
  {
    uint64_t v13 = *v12;
    if (v13)
    {
      if (a9 <= 0 && a10 + a8 >= *(unsigned __int16 *)(v13 + 474) && a11 + a9 >= *(unsigned __int16 *)(v13 + 476)) {
        return glDiscardFramebufferEXT_Exec(result, a2, a3, a4, a5, a6, a7);
      }
    }
  }
  return result;
}

void *glInvalidateSubFramebuffer_PackThread(void *result, int a2, unsigned int a3, int *a4, int a5, int a6, int a7, int a8)
{
  if ((a3 & 0x80000000) != 0)
  {
    if (!*((_WORD *)result + 14916)) {
      *((_WORD *)result + 14916) = 1281;
    }
  }
  else
  {
    uint64_t result = gleAddCommand((uint64_t)result, (uint64_t)glInvalidateSubFramebuffer_UnpackThread, (int)(4 * a3 + 24));
    *(_DWORD *)uint64_t result = a2;
    *((_DWORD *)result + 1) = a5;
    *((_DWORD *)result + 2) = a6;
    *((_DWORD *)result + 3) = a7;
    *((_DWORD *)result + 4) = a8;
    *((_DWORD *)result + 5) = a3;
    if (a3)
    {
      uint64_t v15 = a3;
      int v16 = result + 3;
      do
      {
        int v17 = *a4++;
        *v16++ = v17;
        --v15;
      }
      while (v15);
    }
  }
  return result;
}

uint64_t glInvalidateSubFramebuffer_UnpackThread(uint64_t a1, uint64_t a2, double a3, double a4, double a5)
{
  return (4 * *(_DWORD *)(a2 + 20) + 24);
}

uint64_t glResolveMultisampleFramebufferAPPLE_Exec(uint64_t result, double a2, double a3, double a4)
{
  uint64_t v4 = result;
  uint64_t v5 = result + 29832;
  uint64_t v6 = result + 19152;
  if ((*(unsigned char *)(result + 1540) & 4) != 0)
  {
    uint64_t result = gleGenerateMatrixIdentifier(result, result + 9488, a2, a3, a4);
    *(_DWORD *)uint64_t v6 = *(_DWORD *)v6 & 0xFFFFFEFF | ((result != -1074791426) << 8);
    *(_DWORD *)(v6 + 10580) = result;
  }
  if ((*(unsigned char *)(v6 + 10651) & 0x8A) != 0)
  {
    uint64_t result = gleUpdateReadFramebufferState(v4);
    if (result) {
      goto LABEL_9;
    }
  }
  if ((*(unsigned char *)(v4 + 1540) & 4) != 0)
  {
    uint64_t result = gleGenerateMatrixIdentifier(v4, v4 + 9488, a2, a3, a4);
    *(_DWORD *)uint64_t v6 = *(_DWORD *)v6 & 0xFFFFFEFF | ((result != -1074791426) << 8);
    *(_DWORD *)(v6 + 10580) = result;
  }
  if ((*(_DWORD *)(v6 + 10648) & 0x743C0478) != 0
    && (uint64_t result = gleUpdateDrawFramebufferState(v4, a2, a3, a4), result))
  {
LABEL_9:
    if (result != 16711680 && !*(_WORD *)v5) {
      *(_WORD *)uint64_t v5 = result;
    }
  }
  else
  {
    uint64_t v7 = *(void *)(v4 + 28968);
    if (v7 && (uint64_t v8 = *(void *)(v4 + 28960)) != 0 && *(unsigned char *)(v5 + 2653) && *(unsigned char *)(v5 + 2654))
    {
      uint64_t result = gleCheckMultisampleResolveFramebuffers(v4, v7 + 40, (uint64_t *)(v8 + 40));
      if (result) {
        return gleBlitFramebuffer(v4, 0, 0, *(unsigned __int16 *)(v7 + 474), *(unsigned __int16 *)(v7 + 476), 0, 0, *(unsigned __int16 *)(v8 + 474), v9, v10, *(unsigned __int16 *)(v8 + 476), 0x4000u, 9728);
      }
    }
    else if (!*(_WORD *)v5)
    {
      *(_WORD *)uint64_t v5 = 1286;
    }
  }
  return result;
}

void *glResolveMultisampleFramebufferAPPLE_PackThread(uint64_t a1)
{
  return gleAddCommand(a1, (uint64_t)glResolveMultisampleFramebufferAPPLE_UnpackThread, 0);
}

uint64_t glResolveMultisampleFramebufferAPPLE_UnpackThread(uint64_t a1, double a2, double a3, double a4)
{
  return 0;
}

void glGetInternalformativ_Exec(uint64_t *a1, int a2, unsigned int a3, int a4, int a5, _DWORD *a6)
{
  uint64_t v6 = a1 + 3729;
  if (a2 != 36161) {
    goto LABEL_34;
  }
  int v7 = a5;
  if (a5 < 0)
  {
    if (*(_WORD *)v6) {
      return;
    }
    __int16 v14 = 1281;
LABEL_11:
    *(_WORD *)uint64_t v6 = v14;
    return;
  }
  if (!gleCheckRenderableFormatArgs((uint64_t)a1, 36161, 0, a3)) {
    return;
  }
  if (a4 != 37760 && a4 != 32937)
  {
LABEL_34:
    if (*(_WORD *)v6) {
      return;
    }
    __int16 v14 = 1280;
    goto LABEL_11;
  }
  if (v7)
  {
    int v23 = a4;
    int v24 = 0;
    uint64_t v12 = a1[3685];
    BOOL v22 = a6;
    if (a3 - 36208 < 0x24 || a3 == 36975 || a3 - 33341 >= 0xFFFFFFF4) {
      uint64_t v13 = (unsigned __int8 *)(v12 + 173);
    }
    else {
      uint64_t v13 = (unsigned __int8 *)(v12 + 170);
    }
    int v15 = *v13;
    TextureObject = gleCreateTextureObject(a1[2412], 8194, 0);
    if (v15 < 2)
    {
      int v18 = 0;
    }
    else
    {
      int v17 = 0;
      int v18 = 0;
      do
      {
        BYTE1(v21) = 1;
        LOBYTE(v21) = v15;
        gleEvaluateTextureImageChange((uint64_t)a1, (uint64_t)(TextureObject + 10), (uint64_t)(TextureObject + 268), 0, 0, 1, 1, 1, 0, a3, 0x1908u, 0x1401u, v21, 0);
        TextureObject[252] = 65541;
        (*(void (**)(uint64_t, void, void, void, uint64_t, int *))(a1[3687] + 376))(a1[3683], *(void *)&TextureObject[2 * *((unsigned __int8 *)v6 + 2668) + 10], 0, 0, 36011, &v24);
        int v19 = v24;
        if (v24 != v17)
        {
          if (v23 == 32937)
          {
            *v22++ = v24;
            --v7;
            int v19 = v24;
          }
          ++v18;
          int v17 = v19;
        }
        if (!v7) {
          break;
        }
      }
      while (v15-- > 2);
    }
    if (v23 == 37760) {
      _DWORD *v22 = v18;
    }
    gleFreeTextureObject(a1[2412], (uint64_t)TextureObject);
  }
}

void glGetInternalformativ_ExecThread(uint64_t a1, int a2, unsigned int a3, int a4, int a5, _DWORD *a6)
{
  (*(void (**)(void))(a1 + 27752))();

  glGetInternalformativ_Exec((uint64_t *)a1, a2, a3, a4, a5, a6);
}

float *glFogf_Comp(uint64_t a1, int a2, float a3)
{
  uint64_t result = (float *)gleAddCommand(a1, (uint64_t)glFogf_ListExec, 8);
  *(_DWORD *)uint64_t result = a2;
  result[1] = a3;
  return result;
}

uint64_t glFogf_ListExec(uint64_t a1, uint64_t a2)
{
  return 8;
}

uint64_t glFogf_Exec(uint64_t result, int a2, float a3)
{
  uint64_t v3 = (__int16 *)(result + 29832);
  switch(a2)
  {
    case 2914:
      if (a3 < 0.0)
      {
        if (!*v3)
        {
          __int16 v26 = 1281;
          goto LABEL_61;
        }
      }
      else if (*(float *)(result + 15244) != a3)
      {
        *(float *)(result + 15244) = a3;
        *(float32x2_t *)(result + 15260) = vmul_n_f32((float32x2_t)0x3F99BE613FB8AA3BLL, a3);
        goto LABEL_30;
      }
      return result;
    case 2915:
      if (*(float *)(result + 15248) != a3)
      {
        *(float *)(result + 15248) = a3;
        float v6 = *(float *)(result + 15252);
        float v7 = v6 - a3;
        BOOL v8 = v7 > -0.000005 && v7 < 0.000005;
        float v9 = 1.0 / v7;
        if (v8) {
          float v9 = 200000.0;
        }
        *(float *)(result + 15256) = v9;
        float v10 = v6 * v9;
        goto LABEL_29;
      }
      return result;
    case 2916:
      if (*(float *)(result + 15252) != a3)
      {
        *(float *)(result + 15252) = a3;
        float v11 = a3 - *(float *)(result + 15248);
        BOOL v12 = v11 > -0.000005 && v11 < 0.000005;
        float v13 = 1.0 / v11;
        if (v12) {
          float v13 = 200000.0;
        }
        *(float *)(result + 15256) = v13;
        float v10 = v13 * a3;
LABEL_29:
        *(float *)(result + 15272) = v10;
LABEL_30:
        uint64_t v14 = *(void *)(result + 19248);
        if (v14)
        {
          unint64_t v15 = *(unsigned __int16 *)(v14 + 3782);
          if (v15 <= 0x3FF)
          {
            *(_DWORD *)(result + ((v15 >> 3) & 0x1FFC) + 1552) |= 1 << v15;
            *(_DWORD *)(result + 28652) = 0;
            *(_DWORD *)(result + 1532) |= 0x800000u;
          }
        }
        uint64_t v16 = *(void *)(result + 19272);
        if (v16)
        {
          unint64_t v17 = *(unsigned __int16 *)(v16 + 3782);
          if (v17 <= 0x3FF)
          {
            *(_DWORD *)(result + ((v17 >> 3) & 0x1FFC) + 1936) |= 1 << v17;
            *(_DWORD *)(result + 28652) = 0;
            *(_DWORD *)(result + 1532) |= 0x4000000u;
          }
        }
        uint64_t v18 = *(void *)(result + 19280);
        if (v18)
        {
          unint64_t v19 = *(unsigned __int16 *)(v18 + 3782);
          if (v19 <= 0x3FF)
          {
            *(_DWORD *)(result + ((v19 >> 3) & 0x1FFC) + 2064) |= 1 << v19;
            *(_DWORD *)(result + 28652) = 0;
            *(_DWORD *)(result + 1532) |= 0x8000000u;
          }
        }
        if (v14)
        {
          unint64_t v20 = *(unsigned __int16 *)(v14 + 3784);
          if (v20 <= 0x3FF)
          {
            *(_DWORD *)(result + ((v20 >> 3) & 0x1FFC) + 1552) |= 1 << v20;
            *(_DWORD *)(result + 28652) = 0;
            *(_DWORD *)(result + 1532) |= 0x800000u;
          }
        }
        if (v16)
        {
          unint64_t v21 = *(unsigned __int16 *)(v16 + 3784);
          if (v21 <= 0x3FF)
          {
            *(_DWORD *)(result + ((v21 >> 3) & 0x1FFC) + 1936) |= 1 << v21;
            *(_DWORD *)(result + 28652) = 0;
            *(_DWORD *)(result + 1532) |= 0x4000000u;
          }
        }
        if (v18)
        {
          unint64_t v22 = *(unsigned __int16 *)(v18 + 3784);
          if (v22 <= 0x3FF)
          {
            *(_DWORD *)(result + ((v22 >> 3) & 0x1FFC) + 2064) |= 1 << v22;
            *(_DWORD *)(result + 28652) = 0;
            *(_DWORD *)(result + 1532) |= 0x8000000u;
          }
        }
      }
      return result;
    case 2917:
      unsigned int v23 = a3;
      if (a3 - 2048 >= 2 && v23 != 9729) {
        goto LABEL_58;
      }
      if (*(unsigned __int16 *)(result + 15276) != v23)
      {
        *(_WORD *)(result + 15276) = v23;
        return gleUpdateFogData(result);
      }
      return result;
    default:
      if (a2 == 33872)
      {
        unsigned int v25 = a3;
        if (a3 - 33873 >= 2) {
          goto LABEL_58;
        }
        if (*(unsigned __int16 *)(result + 15278) == v25) {
          return result;
        }
        *(_WORD *)(result + 15278) = v25;
        return gleUpdateFogData(result);
      }
      if (a2 == 34138)
      {
        unsigned int v4 = a3;
        if (a3 - 34139 < 2 || v4 == 9474)
        {
          if (*(unsigned __int16 *)(result + 15280) == v4) {
            return result;
          }
          *(_WORD *)(result + 15280) = v4;
          return gleUpdateFogData(result);
        }
      }
LABEL_58:
      if (!*v3)
      {
        __int16 v26 = 1280;
LABEL_61:
        *uint64_t v3 = v26;
      }
      return result;
  }
}

uint64_t glFogx_Exec(uint64_t a1, int a2, int a3)
{
  float v3 = (float)a3;
  if (a2 != 2917) {
    float v3 = v3 * 0.000015259;
  }
  return glFogf_Exec(a1, a2, v3);
}

float *glFogx_PackThread(uint64_t a1, int a2, int a3)
{
  float v3 = (float)a3;
  if (a2 == 2917)
  {
    uint64_t result = (float *)gleAddCommand(a1, (uint64_t)glFogf_ListExec, 8);
    *(_DWORD *)uint64_t result = 2917;
  }
  else
  {
    float v3 = v3 * 0.000015259;
    uint64_t result = (float *)gleAddCommand(a1, (uint64_t)glFogf_ListExec, 8);
    *(_DWORD *)uint64_t result = a2;
  }
  result[1] = v3;
  return result;
}

float glFogfv_Comp(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5 = gleAddCommand(a1, (uint64_t)glFogfv_ListExec, 20);
  *(_DWORD *)uint64_t v5 = a2;
  *((_DWORD *)v5 + 1) = *(_DWORD *)a3;
  *((_DWORD *)v5 + 2) = *(_DWORD *)(a3 + 4);
  *((_DWORD *)v5 + 3) = *(_DWORD *)(a3 + 8);
  float result = *(float *)(a3 + 12);
  *((float *)v5 + 4) = result;
  return result;
}

uint64_t glFogfv_ListExec(uint64_t a1, uint64_t a2)
{
  return 20;
}

uint64_t glFogfv_Exec(uint64_t result, int a2, float *a3)
{
  float v3 = (float *)(result + 29576);
  unsigned int v4 = (_DWORD *)(result + 28652);
  switch(a2)
  {
    case 2914:
      float v5 = *a3;
      if (*a3 < 0.0)
      {
        if (!*(_WORD *)(result + 29832))
        {
          __int16 v36 = 1281;
          goto LABEL_66;
        }
      }
      else if (*(float *)(result + 15244) != v5)
      {
        *(float *)(result + 15244) = v5;
        *(float32x2_t *)(result + 15260) = vmul_n_f32((float32x2_t)0x3F99BE613FB8AA3BLL, v5);
        goto LABEL_30;
      }
      return result;
    case 2915:
      float v8 = *a3;
      if (*(float *)(result + 15248) != *a3)
      {
        *(float *)(result + 15248) = v8;
        float v9 = *(float *)(result + 15252);
        float v10 = v9 - v8;
        BOOL v11 = v10 > -0.000005 && v10 < 0.000005;
        float v12 = 1.0 / v10;
        if (v11) {
          float v12 = 200000.0;
        }
        *(float *)(result + 15256) = v12;
        float v13 = v9 * v12;
        goto LABEL_29;
      }
      return result;
    case 2916:
      float v14 = *a3;
      if (*(float *)(result + 15252) != *a3)
      {
        *(float *)(result + 15252) = v14;
        float v15 = v14 - *(float *)(result + 15248);
        BOOL v16 = v15 > -0.000005 && v15 < 0.000005;
        float v17 = 1.0 / v15;
        if (v16) {
          float v17 = 200000.0;
        }
        *(float *)(result + 15256) = v17;
        float v13 = v14 * v17;
LABEL_29:
        *(float *)(result + 15272) = v13;
LABEL_30:
        uint64_t v18 = *(void *)(result + 19248);
        if (v18)
        {
          unint64_t v19 = *(unsigned __int16 *)(v18 + 3782);
          if (v19 <= 0x3FF)
          {
            *(_DWORD *)(result + ((v19 >> 3) & 0x1FFC) + 1552) |= 1 << v19;
            *unsigned int v4 = 0;
            *(_DWORD *)(result + 1532) |= 0x800000u;
          }
        }
        uint64_t v20 = *(void *)(result + 19272);
        if (v20)
        {
          unint64_t v21 = *(unsigned __int16 *)(v20 + 3782);
          if (v21 <= 0x3FF)
          {
            *(_DWORD *)(result + ((v21 >> 3) & 0x1FFC) + 1936) |= 1 << v21;
            *unsigned int v4 = 0;
            *(_DWORD *)(result + 1532) |= 0x4000000u;
          }
        }
        uint64_t v22 = *(void *)(result + 19280);
        if (v22)
        {
          unint64_t v23 = *(unsigned __int16 *)(v22 + 3782);
          if (v23 <= 0x3FF)
          {
            *(_DWORD *)(result + ((v23 >> 3) & 0x1FFC) + 2064) |= 1 << v23;
            *unsigned int v4 = 0;
            *(_DWORD *)(result + 1532) |= 0x8000000u;
          }
        }
        if (v18)
        {
          unint64_t v24 = *(unsigned __int16 *)(v18 + 3784);
          if (v24 <= 0x3FF)
          {
            *(_DWORD *)(result + ((v24 >> 3) & 0x1FFC) + 1552) |= 1 << v24;
            *unsigned int v4 = 0;
            *(_DWORD *)(result + 1532) |= 0x800000u;
          }
        }
        if (v20)
        {
          unint64_t v25 = *(unsigned __int16 *)(v20 + 3784);
          if (v25 <= 0x3FF)
          {
            *(_DWORD *)(result + ((v25 >> 3) & 0x1FFC) + 1936) |= 1 << v25;
            *unsigned int v4 = 0;
            *(_DWORD *)(result + 1532) |= 0x4000000u;
          }
        }
        if (v22)
        {
          unint64_t v26 = *(unsigned __int16 *)(v22 + 3784);
          goto LABEL_76;
        }
      }
      return result;
    case 2917:
      unsigned int v27 = *a3;
      if (v27 - 2048 >= 2 && v27 != 9729) {
        goto LABEL_63;
      }
      if (*(unsigned __int16 *)(result + 15276) != v27)
      {
        *(_WORD *)(result + 15276) = v27;
        return gleUpdateFogData(result);
      }
      return result;
    case 2918:
      float v30 = *a3;
      float v29 = a3[1];
      float v32 = a3[2];
      float v31 = a3[3];
      if (*v3 != *a3
        || *(float *)(result + 29580) != v29
        || *(float *)(result + 29584) != v32
        || *(float *)(result + 29588) != v31)
      {
        *float v3 = v30;
        *(float *)(result + 29580) = v29;
        *(float *)(result + 29584) = v32;
        *(float *)(result + 29588) = v31;
        if (*(unsigned char *)(result + 15178))
        {
          float v33 = *(float *)(result + 288);
          float v34 = *(float *)(result + 292);
          *(float *)(result + 15228) = fminf(fmaxf(v30, v33), v34);
          *(float *)(result + 15232) = fminf(fmaxf(v29, v33), v34);
          *(float *)(result + 15236) = fminf(fmaxf(v32, v33), v34);
          *(float *)(result + 15240) = fminf(fmaxf(v31, v33), v34);
        }
        else
        {
          *(_OWORD *)(result + 15228) = *(_OWORD *)v3;
        }
        uint64_t v37 = *(void *)(result + 19248);
        if (v37)
        {
          unint64_t v38 = *(unsigned __int16 *)(v37 + 3780);
          if (v38 <= 0x3FF)
          {
            *(_DWORD *)(result + ((v38 >> 3) & 0x1FFC) + 1552) |= 1 << v38;
            *unsigned int v4 = 0;
            *(_DWORD *)(result + 1532) |= 0x800000u;
          }
        }
        uint64_t v39 = *(void *)(result + 19272);
        if (v39)
        {
          unint64_t v40 = *(unsigned __int16 *)(v39 + 3780);
          if (v40 <= 0x3FF)
          {
            *(_DWORD *)(result + ((v40 >> 3) & 0x1FFC) + 1936) |= 1 << v40;
            *unsigned int v4 = 0;
            *(_DWORD *)(result + 1532) |= 0x4000000u;
          }
        }
        uint64_t v41 = *(void *)(result + 19280);
        if (v41)
        {
          unint64_t v26 = *(unsigned __int16 *)(v41 + 3780);
LABEL_76:
          if (v26 <= 0x3FF)
          {
            *(_DWORD *)(result + ((v26 >> 3) & 0x1FFC) + 2064) |= 1 << v26;
            *unsigned int v4 = 0;
            *(_DWORD *)(result + 1532) |= 0x8000000u;
          }
        }
      }
      return result;
    default:
      if (a2 == 33872)
      {
        unsigned int v35 = *a3;
        if (v35 - 33873 >= 2) {
          goto LABEL_63;
        }
        if (*(unsigned __int16 *)(result + 15278) == v35) {
          return result;
        }
        *(_WORD *)(result + 15278) = v35;
        return gleUpdateFogData(result);
      }
      if (a2 == 34138)
      {
        unsigned int v6 = *a3;
        if (v6 - 34139 < 2 || v6 == 9474)
        {
          if (*(unsigned __int16 *)(result + 15280) == v6) {
            return result;
          }
          *(_WORD *)(result + 15280) = v6;
          return gleUpdateFogData(result);
        }
      }
LABEL_63:
      if (!*(_WORD *)(result + 29832))
      {
        __int16 v36 = 1280;
LABEL_66:
        *(_WORD *)(result + 29832) = v36;
      }
      return result;
  }
}

uint64_t glFogxv_Exec(uint64_t a1, int a2, int32x4_t *a3)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (a2 == 2918)
  {
    float32x4_t v5 = vmulq_f32(vcvtq_f32_s32(*a3), (float32x4_t)vdupq_n_s32(0x37800000u));
  }
  else
  {
    if (a2 == 2917) {
      float v3 = (float)a3->i32[0];
    }
    else {
      float v3 = (float)a3->i32[0] * 0.000015259;
    }
    v5.f32[0] = v3;
  }
  return glFogfv_Exec(a1, a2, v5.f32);
}

__n128 glFogxv_PackThread(uint64_t a1, int a2, int32x4_t *a3, float32x4_t a4)
{
  if (a2 == 2918)
  {
    a4 = vmulq_f32(vcvtq_f32_s32(*a3), (float32x4_t)vdupq_n_s32(0x37800000u));
  }
  else if (a2 == 2917)
  {
    a4.f32[0] = (float)a3->i32[0];
  }
  else
  {
    a4.f32[0] = (float)a3->i32[0] * 0.000015259;
  }
  __n128 v7 = (__n128)a4;
  float32x4_t v5 = gleAddCommand(a1, (uint64_t)glFogfv_ListExec, 20);
  *(_DWORD *)float32x4_t v5 = a2;
  __n128 result = v7;
  *(__n128 *)((char *)v5 + 4) = v7;
  return result;
}

void *glFrontFace_Comp(uint64_t a1, int a2)
{
  __n128 result = gleAddCommand(a1, (uint64_t)glFrontFace_ListExec, 4);
  *(_DWORD *)__n128 result = a2;
  return result;
}

uint64_t glFrontFace_ListExec(uint64_t a1, int *a2)
{
  return 4;
}

float glFrustum_Comp(uint64_t a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  if (a6 <= 0.0 || a7 <= 0.0) {
    goto LABEL_13;
  }
  double v10 = a3 - a2;
  float v11 = v10;
  float v12 = v11 < 0.0 ? -v11 : v10;
  if (v12 < 0.000005) {
    goto LABEL_13;
  }
  float v15 = a5 - a4;
  float v16 = -v15;
  if (v15 >= 0.0) {
    float v16 = a5 - a4;
  }
  if (v16 < 0.000005) {
    goto LABEL_13;
  }
  float v18 = a6 - a7;
  float v19 = -v18;
  if (v18 >= 0.0) {
    float v19 = a6 - a7;
  }
  if (v19 >= 0.000005)
  {
    float v27 = a6 - a7;
    unint64_t v21 = (float *)gleAddCommand(a1, (uint64_t)glFrustum_ListExec, 24);
    float v22 = a6 + a6;
    *unint64_t v21 = (float)(1.0 / v11) * v22;
    v21[1] = (float)(1.0 / v15) * v22;
    float v23 = (a2 + a3) * (float)(1.0 / v11);
    float v24 = (a4 + a5) * (float)(1.0 / v15);
    v21[2] = v23;
    v21[3] = v24;
    double v25 = (float)(1.0 / v27);
    float v26 = (a6 + a7) * v25;
    float result = v22 * a7 * v25;
    v21[4] = v26;
    v21[5] = result;
  }
  else
  {
LABEL_13:
    gleSetErrorInList(a1, 1281);
  }
  return result;
}

uint64_t glFrustum_ListExec(uint64_t a1, float *a2)
{
  if (*(int *)(a1 + 20484) < 24)
  {
    double v2 = *(float32x4_t **)(a1 + 19976);
    float v3 = *a2;
    float32x4_t v5 = *v2;
    float32x4_t v4 = v2[1];
    float32x4_t v6 = vmulq_n_f32(v4, a2[1]);
    float32x4_t v7 = vmulq_n_f32(v4, a2[3]);
    float32x4_t v8 = v2[2];
    float32x4_t v9 = vmulq_n_f32(v8, a2[5]);
    v2[2] = vsubq_f32(vmlaq_n_f32(vmlaq_n_f32(v7, *v2, a2[2]), v8, a2[4]), v2[3]);
    v2[3] = v9;
    *double v2 = vmulq_n_f32(v5, v3);
    v2[1] = v6;
    LODWORD(v2) = *(_DWORD *)(a1 + 20488);
    *(_DWORD *)(a1 + 1528) |= v2;
    *(_DWORD *)(a1 + 28652) = 0;
    *(int8x8_t *)(a1 + 1540) = vorr_s8(*(int8x8_t *)(a1 + 1540), (int8x8_t)vdup_n_s32(v2));
  }
  else if (!*(_WORD *)(a1 + 29832))
  {
    *(_WORD *)(a1 + 29832) = 1282;
  }
  return 24;
}

int8x8_t glFrustumf_Exec(uint64_t a1, float a2, float a3, float a4, float a5, float a6, float a7)
{
  return glFrustum_Exec(a1, COERCE_INT8X8_T(a2), a3, a4, a5, a6, a7);
}

int8x8_t glFrustumx_Exec(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  return glFrustum_Exec(a1, COERCE_INT8X8_T((float)((float)a2 * 0.000015259)), (float)((float)a3 * 0.000015259), (float)((float)a4 * 0.000015259), (float)((float)a5 * 0.000015259), (float)((float)a6 * 0.000015259), (float)((float)a7 * 0.000015259));
}

float glFrustumf_PackThread(uint64_t a1, float a2, float a3, float a4, float a5, float a6, float a7)
{
  return glFrustum_Comp(a1, a2, a3, a4, a5, a6, a7);
}

float glFrustumx_PackThread(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  return glFrustum_Comp(a1, (float)((float)a2 * 0.000015259), (float)((float)a3 * 0.000015259), (float)((float)a4 * 0.000015259), (float)((float)a5 * 0.000015259), (float)((float)a6 * 0.000015259), (float)((float)a7 * 0.000015259));
}

_DWORD *glHint_Comp(uint64_t a1, int a2, int a3)
{
  float result = gleAddCommand(a1, (uint64_t)glHint_ListExec, 8);
  *float result = a2;
  result[1] = a3;
  return result;
}

uint64_t glHint_ListExec(uint64_t a1, int *a2)
{
  return 8;
}

void *glLightf_Comp(uint64_t a1, int a2, int a3, float a4)
{
  float result = gleAddCommand(a1, (uint64_t)glLightf_ListExec, 12);
  *(_DWORD *)float result = a2;
  *((_DWORD *)result + 1) = a3;
  *((float *)result + 2) = a4;
  return result;
}

uint64_t glLightf_ListExec(uint64_t a1, uint64_t a2)
{
  return 12;
}

void glLightf_Exec(uint64_t a1, int a2, int a3, float a4)
{
  float32x4_t v4 = (_DWORD *)(a1 + 28652);
  unsigned int v5 = a2 - 0x4000;
  if ((a2 - 0x4000) < 8)
  {
    switch(a3)
    {
      case 4613:
        if (a4 < 0.0 || (float)*(int *)(*(void *)(a1 + 29032) + 128) < a4) {
          goto LABEL_28;
        }
        *(float *)(a1 + 160 * v5 + 12636) = a4;
        gleUpdateLightExponents(a1, a2 - 0x4000);
        uint64_t v8 = *(void *)(a1 + 19248);
        if (v8)
        {
          unint64_t v9 = *(unsigned __int16 *)(v8 + 20 * v5 + 2570);
          if (v9 <= 0x3FF)
          {
            *(_DWORD *)(a1 + ((v9 >> 3) & 0x1FFC) + 1552) |= 1 << v9;
            *float32x4_t v4 = 0;
            *(_DWORD *)(a1 + 1532) |= 0x800000u;
          }
        }
        uint64_t v10 = *(void *)(a1 + 19272);
        if (v10)
        {
          unint64_t v11 = *(unsigned __int16 *)(v10 + 20 * v5 + 2570);
          if (v11 <= 0x3FF)
          {
            *(_DWORD *)(a1 + ((v11 >> 3) & 0x1FFC) + 1936) |= 1 << v11;
            *float32x4_t v4 = 0;
            *(_DWORD *)(a1 + 1532) |= 0x4000000u;
          }
        }
        uint64_t v12 = *(void *)(a1 + 19280);
        if (!v12) {
          return;
        }
        unint64_t v13 = *(unsigned __int16 *)(v12 + 20 * v5 + 2570);
        goto LABEL_41;
      case 4614:
        if (a4 < 0.0 || a4 > 90.0)
        {
          if (a4 != 180.0)
          {
LABEL_28:
            if (*(_WORD *)(a1 + 29832)) {
              return;
            }
            __int16 v6 = 1281;
            goto LABEL_30;
          }
          *(_DWORD *)(a1 + 160 * v5 + 12688) = 1127481344;
          float v14 = -1.0;
        }
        else
        {
          *(float *)(a1 + 160 * v5 + 12688) = a4;
          float v14 = cosf(a4 * 0.017453);
        }
        *(float *)(a1 + 160 * v5 + 12620) = v14;
        gleUpdateLightExponents(a1, v5);
        uint64_t v16 = *(void *)(a1 + 19248);
        if (v16)
        {
          unint64_t v17 = *(unsigned __int16 *)(v16 + 20 * v5 + 2568);
          if (v17 <= 0x3FF)
          {
            *(_DWORD *)(a1 + ((v17 >> 3) & 0x1FFC) + 1552) |= 1 << v17;
            *float32x4_t v4 = 0;
            *(_DWORD *)(a1 + 1532) |= 0x800000u;
          }
        }
        uint64_t v18 = *(void *)(a1 + 19272);
        if (v18)
        {
          unint64_t v19 = *(unsigned __int16 *)(v18 + 20 * v5 + 2568);
          if (v19 <= 0x3FF)
          {
            *(_DWORD *)(a1 + ((v19 >> 3) & 0x1FFC) + 1936) |= 1 << v19;
            *float32x4_t v4 = 0;
            *(_DWORD *)(a1 + 1532) |= 0x4000000u;
          }
        }
        uint64_t v20 = *(void *)(a1 + 19280);
        if (v20)
        {
          unint64_t v13 = *(unsigned __int16 *)(v20 + 20 * v5 + 2568);
LABEL_41:
          if (v13 <= 0x3FF)
          {
            *(_DWORD *)(a1 + ((v13 >> 3) & 0x1FFC) + 2064) |= 1 << v13;
            *float32x4_t v4 = 0;
            *(_DWORD *)(a1 + 1532) |= 0x8000000u;
          }
        }
        return;
      case 4615:
        if (a4 < 0.0) {
          goto LABEL_28;
        }
        *(float *)(a1 + 160 * v5 + 12624) = a4;
        goto LABEL_24;
      case 4616:
        if (a4 < 0.0) {
          goto LABEL_28;
        }
        *(float *)(a1 + 160 * v5 + 12628) = a4;
        goto LABEL_24;
      case 4617:
        if (a4 < 0.0) {
          goto LABEL_28;
        }
        *(float *)(a1 + 160 * v5 + 12632) = a4;
LABEL_24:
        int v15 = a2 - 0x4000;
        gleUpdateLightAttenuation(a1, v15);
        return;
      default:
        break;
    }
  }
  if (*(_WORD *)(a1 + 29832)) {
    return;
  }
  __int16 v6 = 1280;
LABEL_30:
  *(_WORD *)(a1 + 29832) = v6;
}

void glLightx_Exec(uint64_t a1, int a2, int a3, int a4)
{
}

void *glLightx_PackThread(uint64_t a1, int a2, int a3, int a4)
{
  float v6 = (float)a4 * 0.000015259;
  float result = gleAddCommand(a1, (uint64_t)glLightf_ListExec, 12);
  *(_DWORD *)float result = a2;
  *((_DWORD *)result + 1) = a3;
  *((float *)result + 2) = v6;
  return result;
}

float glLightfv_Comp(uint64_t a1, int a2, int a3, uint64_t a4)
{
  float32x4_t v7 = gleAddCommand(a1, (uint64_t)glLightfv_ListExec, 24);
  *(_DWORD *)float32x4_t v7 = a2;
  *((_DWORD *)v7 + 1) = a3;
  switch(a3)
  {
    case 4608:
    case 4609:
    case 4610:
    case 4611:
      *((_DWORD *)v7 + 2) = *(_DWORD *)a4;
      *((_DWORD *)v7 + 3) = *(_DWORD *)(a4 + 4);
      *((_DWORD *)v7 + 4) = *(_DWORD *)(a4 + 8);
      float result = *(float *)(a4 + 12);
      *((float *)v7 + 5) = result;
      break;
    case 4612:
      *((_DWORD *)v7 + 2) = *(_DWORD *)a4;
      *((_DWORD *)v7 + 3) = *(_DWORD *)(a4 + 4);
      float result = *(float *)(a4 + 8);
      *((float *)v7 + 4) = result;
      break;
    case 4613:
    case 4614:
    case 4615:
    case 4616:
    case 4617:
      float result = *(float *)a4;
      *((_DWORD *)v7 + 2) = *(_DWORD *)a4;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t glLightfv_ListExec(float32x4_t *a1, uint64_t a2)
{
  return 24;
}

void glLightxv_Exec(float32x4_t *a1, int a2, int a3, int *a4)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v6[0] = (float)*a4 * 0.000015259;
  if ((a3 - 4608) >= 4)
  {
    if (a3 != 4612) {
      goto LABEL_4;
    }
    uint64_t v4 = 2;
    uint64_t v5 = 1;
  }
  else
  {
    v6[1] = (float)a4[1] * 0.000015259;
    uint64_t v4 = 3;
    uint64_t v5 = 2;
  }
  v6[v5] = (float)a4[v5] * 0.000015259;
  v6[v4] = (float)a4[v4] * 0.000015259;
LABEL_4:
  glLightfv_Exec(a1, a2, a3, v6);
}

float glLightxv_PackThread(uint64_t a1, int a2, int a3, int *a4)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  v7[0] = (float)*a4 * 0.000015259;
  if ((a3 - 4608) >= 4)
  {
    if (a3 != 4612) {
      return glLightfv_Comp(a1, a2, a3, (uint64_t)v7);
    }
    uint64_t v4 = 2;
    uint64_t v5 = 1;
  }
  else
  {
    v7[1] = (float)a4[1] * 0.000015259;
    uint64_t v4 = 3;
    uint64_t v5 = 2;
  }
  v7[v5] = (float)a4[v5] * 0.000015259;
  v7[v4] = (float)a4[v4] * 0.000015259;
  return glLightfv_Comp(a1, a2, a3, (uint64_t)v7);
}

uint64_t glGetLightfv_ExecThread(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  (*(void (**)(void))(a1 + 27752))();

  return glGetLightfv_Exec(a1, a2, a3, a4);
}

uint64_t glGetLightfv_Exec(uint64_t result, int a2, int a3, _DWORD *a4)
{
  unsigned int v4 = a2 - 0x4000;
  if ((a2 - 0x4000) < 8)
  {
    switch(a3)
    {
      case 4608:
        uint64_t v5 = (_DWORD *)(result + 160 * v4);
        *a4 = v5[3136];
        a4[1] = v5[3137];
        a4[2] = v5[3138];
        int v6 = v5[3139];
        goto LABEL_10;
      case 4609:
        uint64_t v7 = (_DWORD *)(result + 160 * v4);
        *a4 = v7[3140];
        a4[1] = v7[3141];
        a4[2] = v7[3142];
        int v6 = v7[3143];
        goto LABEL_10;
      case 4610:
        uint64_t v8 = (_DWORD *)(result + 160 * v4);
        *a4 = v8[3144];
        a4[1] = v8[3145];
        a4[2] = v8[3146];
        int v6 = v8[3147];
        goto LABEL_10;
      case 4611:
        unint64_t v9 = (_DWORD *)(result + 160 * v4);
        *a4 = v9[3148];
        a4[1] = v9[3149];
        a4[2] = v9[3150];
        int v6 = v9[3151];
LABEL_10:
        a4[3] = v6;
        return result;
      case 4612:
        uint64_t v10 = (_DWORD *)(result + 160 * v4);
        *a4 = v10[3152];
        a4[1] = v10[3153];
        a4[2] = v10[3154];
        return result;
      case 4613:
        int v11 = *(_DWORD *)(result + 160 * v4 + 12636);
        goto LABEL_17;
      case 4614:
        int v11 = *(_DWORD *)(result + 160 * v4 + 12688);
        goto LABEL_17;
      case 4615:
        int v11 = *(_DWORD *)(result + 160 * v4 + 12624);
        goto LABEL_17;
      case 4616:
        int v11 = *(_DWORD *)(result + 160 * v4 + 12628);
        goto LABEL_17;
      case 4617:
        int v11 = *(_DWORD *)(result + 160 * v4 + 12632);
LABEL_17:
        *a4 = v11;
        break;
      default:
        goto LABEL_2;
    }
  }
  else
  {
LABEL_2:
    if (!*(_WORD *)(result + 29832)) {
      *(_WORD *)(result + 29832) = 1280;
    }
  }
  return result;
}

uint64_t glGetLightxv_Exec(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t result = glGetLightfv_Exec(a1, a2, a3, v14);
  float v7 = (float)(v14[0] * 65536.0) + 0.5;
  if (v7 < 0.0) {
    float v7 = v7 + -0.99998;
  }
  *a4 = (int)v7;
  if ((a3 - 4608) >= 4)
  {
    if (a3 != 4612) {
      return result;
    }
    uint64_t v9 = 2;
    uint64_t v10 = 1;
  }
  else
  {
    float v8 = (float)(v14[1] * 65536.0) + 0.5;
    if (v8 < 0.0) {
      float v8 = v8 + -0.99998;
    }
    a4[1] = (int)v8;
    uint64_t v9 = 3;
    uint64_t v10 = 2;
  }
  float v11 = (float)(v14[v10] * 65536.0) + 0.5;
  if (v11 < 0.0) {
    float v11 = v11 + -0.99998;
  }
  a4[v10] = (int)v11;
  float v12 = (float)(v14[v9] * 65536.0) + 0.5;
  float v13 = v12 + -0.99998;
  if (v12 >= 0.0) {
    float v13 = (float)(v14[v9] * 65536.0) + 0.5;
  }
  a4[v9] = (int)v13;
  return result;
}

uint64_t glGetLightxv_ExecThread(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  (*(void (**)(void))(a1 + 27752))();

  return glGetLightxv_Exec(a1, a2, a3, a4);
}

float *glLightModelf_Comp(uint64_t a1, int a2, float a3)
{
  uint64_t result = (float *)gleAddCommand(a1, (uint64_t)glLightModelf_ListExec, 8);
  *(_DWORD *)uint64_t result = a2;
  result[1] = a3;
  return result;
}

uint64_t glLightModelf_ListExec(uint64_t a1, uint64_t a2)
{
  return 8;
}

uint64_t glLightModelf_Exec(uint64_t a1, int a2, float a3)
{
  if (a2 == 34224)
  {
    int v7 = a3 != 0.0;
    if (*(unsigned __int8 *)(a1 + 14894) != v7)
    {
      *(unsigned char *)(a1 + 14894) = v7;
      return gleUpdateLightModel(a1);
    }
  }
  else
  {
    float v3 = (_DWORD *)(a1 + 28652);
    if (a2 == 2898)
    {
      int v4 = a3 != 0.0;
      if (*(unsigned __int8 *)(a1 + 14892) != v4)
      {
        *(unsigned char *)(a1 + 14892) = v4;
        if ((*(unsigned char *)(a1 + 24864) & 9) != 0 || *(unsigned char *)(a1 + 24756)) {
          int v5 = *(unsigned __int8 *)(a1 + 24751);
        }
        else {
          int v5 = a3 != 0.0 && *(unsigned char *)(a1 + 14890) != 0;
        }
        if (v5 == *(unsigned __int8 *)(a1 + 17701))
        {
          int v6 = *(_DWORD *)(a1 + 1548);
        }
        else
        {
          *(unsigned char *)(a1 + 17701) = v5;
          *(_DWORD *)(a1 + 1532) |= 0x40000000u;
          *float v3 = 0;
          int v6 = *(_DWORD *)(a1 + 1548) | 0x10008400;
          *(_DWORD *)(a1 + 1548) = v6;
          if ((*(unsigned char *)(*(void *)(a1 + 29032) + 25) & 0x7F) != 0) {
            v6 |= 0x30000u;
          }
        }
        *float v3 = 0;
        *(_DWORD *)(a1 + 1548) = v6 | 0x18402;
      }
    }
    else if (!*(_WORD *)(a1 + 29832))
    {
      *(_WORD *)(a1 + 29832) = 1280;
    }
  }
  return a1;
}

uint64_t glLightModelx_Exec(uint64_t a1, int a2, int a3)
{
  return glLightModelf_Exec(a1, a2, (float)a3 * 0.000015259);
}

float *glLightModelx_PackThread(uint64_t a1, int a2, int a3)
{
  float v4 = (float)a3 * 0.000015259;
  uint64_t result = (float *)gleAddCommand(a1, (uint64_t)glLightModelf_ListExec, 8);
  *(_DWORD *)uint64_t result = a2;
  result[1] = v4;
  return result;
}

float glLightModelfv_Comp(uint64_t a1, int a2, uint64_t a3)
{
  int v5 = gleAddCommand(a1, (uint64_t)glLightModelfv_ListExec, 20);
  *(_DWORD *)int v5 = a2;
  if (a2 <= 33271)
  {
    if ((a2 - 2897) >= 2)
    {
      if (a2 == 2899)
      {
        *((_DWORD *)v5 + 1) = *(_DWORD *)a3;
        *((_DWORD *)v5 + 2) = *(_DWORD *)(a3 + 4);
        *((_DWORD *)v5 + 3) = *(_DWORD *)(a3 + 8);
        float result = *(float *)(a3 + 12);
        *((float *)v5 + 4) = result;
      }
      return result;
    }
LABEL_7:
    float result = *(float *)a3;
    *((_DWORD *)v5 + 1) = *(_DWORD *)a3;
    return result;
  }
  if (a2 == 33272 || a2 == 34224) {
    goto LABEL_7;
  }
  return result;
}

uint64_t glLightModelfv_ListExec(uint64_t a1, int *a2)
{
  return 20;
}

uint64_t glLightModelxv_Exec(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  float v4 = (float)*(int *)a3 * 0.000015259;
  if (a2 == 2899)
  {
    float32x2_t v5 = vmul_f32(vcvt_f32_s32(*(int32x2_t *)(a3 + 4)), (float32x2_t)vdup_n_s32(0x37800000u));
    float v6 = (float)*(int *)(a3 + 12) * 0.000015259;
  }
  return glLightModelfv_Exec(a1, a2, &v4);
}

float glLightModelxv_PackThread(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  float v4 = (float)*(int *)a3 * 0.000015259;
  if (a2 == 2899)
  {
    float32x2_t v5 = vmul_f32(vcvt_f32_s32(*(int32x2_t *)(a3 + 4)), (float32x2_t)vdup_n_s32(0x37800000u));
    float v6 = (float)*(int *)(a3 + 12) * 0.000015259;
  }
  return glLightModelfv_Comp(a1, a2, (uint64_t)&v4);
}

float *glLineWidth_Comp(uint64_t a1, float a2)
{
  float result = (float *)gleAddCommand(a1, (uint64_t)glLineWidth_ListExec, 4);
  *float result = a2;
  return result;
}

uint64_t glLineWidth_ListExec(uint64_t a1, float *a2)
{
  float v2 = *a2;
  if (*a2 <= 0.0)
  {
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1281;
    }
  }
  else if (*(float *)(a1 + 15304) != v2)
  {
    *(float *)(a1 + 15304) = v2;
    *(_DWORD *)(a1 + 28652) = 0;
    *(_DWORD *)(a1 + 1520) |= 0x4000u;
  }
  return 4;
}

uint64_t glLineWidthx_Exec(uint64_t result, int a2)
{
  float v2 = (float)a2 * 0.000015259;
  if (v2 <= 0.0)
  {
    if (!*(_WORD *)(result + 29832)) {
      *(_WORD *)(result + 29832) = 1281;
    }
  }
  else if (*(float *)(result + 15304) != v2)
  {
    *(float *)(result + 15304) = v2;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1520) |= 0x4000u;
  }
  return result;
}

float *glLineWidthx_PackThread(uint64_t a1, int a2)
{
  float v2 = (float)a2 * 0.000015259;
  float result = (float *)gleAddCommand(a1, (uint64_t)glLineWidth_ListExec, 4);
  *float result = v2;
  return result;
}

void *glLogicOp_Comp(uint64_t a1, int a2)
{
  float result = gleAddCommand(a1, (uint64_t)glLogicOp_ListExec, 4);
  *(_DWORD *)float result = a2;
  return result;
}

uint64_t glLogicOp_ListExec(uint64_t a1, _DWORD *a2)
{
  if (*a2 >> 4 == 336)
  {
    *(_WORD *)(a1 + 15316) = *a2;
    *(_DWORD *)(a1 + 1520) |= 0x20000u;
    *(_DWORD *)(a1 + 28652) = 0;
    *(_DWORD *)(a1 + 1548) |= 0x40000u;
  }
  else if (!*(_WORD *)(a1 + 29832))
  {
    *(_WORD *)(a1 + 29832) = 1280;
  }
  return 4;
}

uint64_t glLogicOp_Exec(uint64_t result, unsigned int a2)
{
  if (a2 >> 4 == 336)
  {
    *(_WORD *)(result + 15316) = a2;
    *(_DWORD *)(result + 1520) |= 0x20000u;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1548) |= 0x40000u;
  }
  else if (!*(_WORD *)(result + 29832))
  {
    *(_WORD *)(result + 29832) = 1280;
  }
  return result;
}

unsigned char *glColorMask_Comp(uint64_t a1, char a2, char a3, char a4, char a5)
{
  float result = gleAddCommand(a1, (uint64_t)glColorMask_ListExec, 4);
  *float result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  return result;
}

uint64_t glColorMask_ListExec(uint64_t a1, unsigned __int8 *a2)
{
  return 4;
}

void *glDepthMask_Comp(uint64_t a1, char a2)
{
  float result = gleAddCommand(a1, (uint64_t)glDepthMask_ListExec, 4);
  *(unsigned char *)float result = a2;
  return result;
}

uint64_t glDepthMask_ListExec(uint64_t a1, unsigned __int8 *a2)
{
  return 4;
}

void *glStencilMask_Comp(uint64_t a1, int a2)
{
  float result = gleAddCommand(a1, (uint64_t)glStencilMask_ListExec, 4);
  *(_DWORD *)float result = a2;
  return result;
}

uint64_t glStencilMask_ListExec(uint64_t a1, int *a2)
{
  return 4;
}

_DWORD *glStencilMaskSeparate_Comp(uint64_t a1, int a2, int a3)
{
  float result = gleAddCommand(a1, (uint64_t)glStencilMaskSeparate_ListExec, 8);
  *float result = a2;
  result[1] = a3;
  return result;
}

uint64_t glStencilMaskSeparate_ListExec(uint64_t a1, int *a2)
{
  return 8;
}

uint64_t glStencilMaskSeparate_Exec(uint64_t result, int a2, int a3)
{
  float v3 = (_DWORD *)(result + 28652);
  switch(a2)
  {
    case 1028:
      if (*(_DWORD *)(result + 15324) == a3) {
        return result;
      }
      *(_DWORD *)(result + 15324) = a3;
      goto LABEL_7;
    case 1029:
      if (*(_DWORD *)(result + 15332) == a3) {
        return result;
      }
      *(_DWORD *)(result + 15332) = a3;
LABEL_7:
      int v4 = *(_DWORD *)(result + 15644);
      if (v4 == 1)
      {
        unsigned int v5 = 65;
LABEL_14:
        *(_DWORD *)(result + 15644) = v5;
        *float v3 = 0;
        *(_DWORD *)(result + 1548) |= 0x8000u;
LABEL_18:
        if ((v5 & 4) != 0) {
          uint64_t v7 = 1;
        }
        else {
          uint64_t v7 = 2;
        }
        unsigned int v8 = *(_DWORD *)(result + 29804) & 0xFFFFF9FF;
        *(_DWORD *)(result + 29804) = v8;
        if (*(_DWORD *)(result + 15324))
        {
          v8 |= 0x200u;
          *(_DWORD *)(result + 29804) = v8;
        }
        if (*(_DWORD *)(result + 4 * v7 + 15324))
        {
          v8 |= 0x400u;
          *(_DWORD *)(result + 29804) = v8;
        }
        uint64_t v9 = *(void *)(result + 28960);
        if (v9) {
          uint64_t v10 = (_DWORD *)(v9 + 552);
        }
        else {
          uint64_t v10 = (_DWORD *)(result + 29808);
        }
        *(_WORD *)(result + 15342) = *v10 & v8;
        *(_DWORD *)(result + 29800) |= 0x100000u;
        *float v3 = 0;
        *(_DWORD *)(result + 1548) |= 0x40000u;
        return result;
      }
      unsigned int v5 = v4 | 0x40;
      goto LABEL_17;
    case 1032:
      if (*(_DWORD *)(result + 15324) == a3 && *(_DWORD *)(result + 15332) == a3) {
        return result;
      }
      *(_DWORD *)(result + 15324) = a3;
      *(_DWORD *)(result + 15332) = a3;
      int v6 = *(_DWORD *)(result + 15644);
      if (v6 == 65)
      {
        unsigned int v5 = 1;
        goto LABEL_14;
      }
      unsigned int v5 = v6 & 0xFFFFFFBF;
LABEL_17:
      *(_DWORD *)(result + 15644) = v5;
      goto LABEL_18;
  }
  if (!*(_WORD *)(result + 29832)) {
    *(_WORD *)(result + 29832) = 1280;
  }
  return result;
}

void *glMaterialf_Comp(uint64_t a1, int a2, int a3, float a4)
{
  float result = gleAddCommand(a1, (uint64_t)glMaterialf_ListExec, 12);
  *(_DWORD *)float result = a2;
  *((_DWORD *)result + 1) = a3;
  *((float *)result + 2) = a4;
  return result;
}

uint64_t glMaterialf_ListExec(uint64_t a1, uint64_t a2)
{
  return 12;
}

uint64_t glMaterialx_Exec(uint64_t a1, int a2, int a3, int a4)
{
  return glMaterialf_Exec(a1, (float)a4 * 0.000015259, a2, a3);
}

void *glMaterialx_PackThread(uint64_t a1, int a2, int a3, int a4)
{
  float v6 = (float)a4 * 0.000015259;
  float result = gleAddCommand(a1, (uint64_t)glMaterialf_ListExec, 12);
  *(_DWORD *)float result = a2;
  *((_DWORD *)result + 1) = a3;
  *((float *)result + 2) = v6;
  return result;
}

float glMaterialfv_Comp(uint64_t a1, int a2, int a3, uint64_t a4)
{
  unsigned int v8 = gleAddCommand(a1, (uint64_t)glMaterialfv_ListExec, 24);
  if (v8)
  {
    if (a3 <= 5631)
    {
      int v10 = 4608;
      if (a3 == 4608 || (int v10 = 4609, a3 == 4609) || (int v10 = 4610, a3 == 4610))
      {
LABEL_13:
        *(_DWORD *)unsigned int v8 = a2;
        *((_DWORD *)v8 + 1) = v10;
        *((_DWORD *)v8 + 2) = *(_DWORD *)a4;
        *((_DWORD *)v8 + 3) = *(_DWORD *)(a4 + 4);
        *((_DWORD *)v8 + 4) = *(_DWORD *)(a4 + 8);
        float result = *(float *)(a4 + 12);
        *((float *)v8 + 5) = result;
      }
      else
      {
LABEL_8:
        gleSetErrorInList(a1, 1280);
      }
    }
    else
    {
      switch(a3)
      {
        case 5632:
          int v10 = 5632;
          goto LABEL_13;
        case 5633:
          *(_DWORD *)unsigned int v8 = a2;
          *((_DWORD *)v8 + 1) = 5633;
          float result = *(float *)a4;
          *((_DWORD *)v8 + 2) = *(_DWORD *)a4;
          break;
        case 5634:
          int v10 = 5634;
          goto LABEL_13;
        case 5635:
          *(_DWORD *)unsigned int v8 = a2;
          *((_DWORD *)v8 + 1) = 5635;
          *((_DWORD *)v8 + 2) = *(_DWORD *)a4;
          *((_DWORD *)v8 + 3) = *(_DWORD *)(a4 + 4);
          float result = *(float *)(a4 + 8);
          *((float *)v8 + 4) = result;
          break;
        default:
          goto LABEL_8;
      }
    }
  }
  return result;
}

uint64_t glMaterialfv_ListExec(float *a1, uint64_t a2)
{
  return 24;
}

float *glMaterialxv_Exec(float *a1, int a2, int a3, int32x4_t *a4)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (a3 <= 5631)
  {
    if ((a3 - 4608) >= 3) {
      return glMaterialfv_Exec(a1, a2, a3, v5.f32);
    }
    goto LABEL_8;
  }
  if (a3 == 5632 || a3 == 5634)
  {
LABEL_8:
    float32x4_t v5 = vmulq_f32(vcvtq_f32_s32(*a4), (float32x4_t)vdupq_n_s32(0x37800000u));
    return glMaterialfv_Exec(a1, a2, a3, v5.f32);
  }
  if (a3 == 5633) {
    v5.f32[0] = (float)a4->i32[0] * 0.000015259;
  }
  return glMaterialfv_Exec(a1, a2, a3, v5.f32);
}

float glMaterialxv_PackThread(uint64_t a1, int a2, int a3, int32x4_t *a4)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (a3 <= 5631)
  {
    if ((a3 - 4608) >= 3) {
      return glMaterialfv_Comp(a1, a2, a3, (uint64_t)&v5);
    }
    goto LABEL_8;
  }
  if (a3 == 5632 || a3 == 5634)
  {
LABEL_8:
    float32x4_t v5 = vmulq_f32(vcvtq_f32_s32(*a4), (float32x4_t)vdupq_n_s32(0x37800000u));
    return glMaterialfv_Comp(a1, a2, a3, (uint64_t)&v5);
  }
  if (a3 == 5633) {
    v5.f32[0] = (float)a4->i32[0] * 0.000015259;
  }
  return glMaterialfv_Comp(a1, a2, a3, (uint64_t)&v5);
}

uint64_t glGetMaterialfv_ExecThread(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  (*(void (**)(void))(a1 + 27752))();

  return glGetMaterialfv_Exec(a1, a2, a3, a4);
}

uint64_t glGetMaterialfv_Exec(uint64_t result, int a2, int a3, _DWORD *a4)
{
  uint64_t v7 = result;
  unsigned int v8 = (_WORD *)(result + 29832);
  if (*(unsigned char *)(result + 14891)) {
    float result = (*(uint64_t (**)(uint64_t, uint64_t))(result + 1456))(result, result + 8464);
  }
  if (a2 == 1028)
  {
    uint64_t v9 = 0;
  }
  else
  {
    if (a2 != 1029) {
      goto LABEL_15;
    }
    uint64_t v9 = 1;
  }
  if (a3 > 4609)
  {
    switch(a3)
    {
      case 4610:
        float v12 = *(_DWORD **)(v7 + 8 * v9 + 1424);
        *a4 = v12[8];
        a4[1] = v12[9];
        a4[2] = v12[10];
        int v11 = v12[11];
        break;
      case 5632:
        float v13 = *(_DWORD **)(v7 + 8 * v9 + 1424);
        *a4 = v13[12];
        a4[1] = v13[13];
        a4[2] = v13[14];
        int v11 = v13[15];
        break;
      case 5633:
        *a4 = *(_DWORD *)(*(void *)(v7 + 8 * v9 + 1424) + 64);
        return result;
      default:
        goto LABEL_15;
    }
LABEL_20:
    a4[3] = v11;
    return result;
  }
  if (a3 == 4608)
  {
    float v14 = *(_DWORD **)(v7 + 8 * v9 + 1424);
    *a4 = *v14;
    a4[1] = v14[1];
    a4[2] = v14[2];
    int v11 = v14[3];
    goto LABEL_20;
  }
  if (a3 == 4609)
  {
    int v10 = *(_DWORD **)(v7 + 8 * v9 + 1424);
    *a4 = v10[4];
    a4[1] = v10[5];
    a4[2] = v10[6];
    int v11 = v10[7];
    goto LABEL_20;
  }
LABEL_15:
  if (!*v8) {
    *unsigned int v8 = 1280;
  }
  return result;
}

uint64_t glGetMaterialxv_Exec(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t result = glGetMaterialfv_Exec(a1, a2, a3, v14);
  float v7 = (float)(v14[0] * 65536.0) + 0.5;
  if (v7 < 0.0) {
    float v7 = v7 + -0.99998;
  }
  *a4 = (int)v7;
  if ((a3 - 4608) < 3)
  {
LABEL_6:
    float v8 = (float)(v14[1] * 65536.0) + 0.5;
    if (v8 < 0.0) {
      float v8 = v8 + -0.99998;
    }
    a4[1] = (int)v8;
    uint64_t v9 = 3;
    uint64_t v10 = 2;
    goto LABEL_9;
  }
  if (a3 != 5635)
  {
    if (a3 != 5632) {
      return result;
    }
    goto LABEL_6;
  }
  uint64_t v9 = 2;
  uint64_t v10 = 1;
LABEL_9:
  float v11 = (float)(v14[v10] * 65536.0) + 0.5;
  if (v11 < 0.0) {
    float v11 = v11 + -0.99998;
  }
  a4[v10] = (int)v11;
  float v12 = (float)(v14[v9] * 65536.0) + 0.5;
  float v13 = v12 + -0.99998;
  if (v12 >= 0.0) {
    float v13 = (float)(v14[v9] * 65536.0) + 0.5;
  }
  a4[v9] = (int)v13;
  return result;
}

uint64_t glGetMaterialxv_ExecThread(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  (*(void (**)(void))(a1 + 27752))();

  return glGetMaterialxv_Exec(a1, a2, a3, a4);
}

void *glLoadIdentity_Comp(uint64_t a1)
{
  return gleAddCommand(a1, (uint64_t)glLoadIdentity_ListExec, 0);
}

uint64_t glLoadIdentity_ListExec(uint64_t a1)
{
  return 0;
}

float glLoadMatrixf_Comp(uint64_t a1, uint64_t a2)
{
  float v3 = gleAddCommand(a1, (uint64_t)glLoadMatrixf_ListExec, 64);
  for (uint64_t i = 0; i != 64; i += 4)
  {
    float result = *(float *)(a2 + i);
    *(float *)((char *)v3 + i) = result;
  }
  return result;
}

uint64_t glLoadMatrixf_ListExec(uint64_t a1, uint64_t a2)
{
  return 64;
}

int8x8_t glLoadMatrixx_Exec(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v6 = *MEMORY[0x263EF8340];
  float32x4_t v3 = (float32x4_t)vdupq_n_s32(0x37800000u);
  do
  {
    *(float32x4_t *)&v5[v2] = vmulq_f32(vcvtq_f32_s32(*(int32x4_t *)(a2 + v2)), v3);
    v2 += 16;
  }
  while (v2 != 64);
  return glLoadMatrixf_Exec(a1, (uint64_t)v5);
}

double glLoadMatrixx_PackThread(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v11 = *MEMORY[0x263EF8340];
  float32x4_t v3 = (float32x4_t)vdupq_n_s32(0x37800000u);
  do
  {
    v8[v2] = vmulq_f32(vcvtq_f32_s32(*(int32x4_t *)(a2 + v2 * 16)), v3);
    ++v2;
  }
  while (v2 != 4);
  int v4 = gleAddCommand(a1, (uint64_t)glLoadMatrixf_ListExec, 64);
  long long v5 = v8[1];
  *int v4 = v8[0];
  v4[1] = v5;
  double result = *(double *)&v9;
  long long v7 = v10;
  v4[2] = v9;
  double v4[3] = v7;
  return result;
}

uint64_t glPopMatrix_ListExec(uint64_t a1, double a2, double a3, double a4)
{
  return 0;
}

uint64_t glPushMatrix_ListExec(uint64_t a1)
{
  return 0;
}

uint64_t glMatrixMode_ListExec(uint64_t a1, int *a2)
{
  return 4;
}

uint64_t glCurrentPaletteMatrixOES_Exec(uint64_t result, unsigned int a2)
{
  if (a2 < 0x10)
  {
    *(unsigned char *)(result + 20495) = a2;
    if ((*(_DWORD *)(result + 20484) - 5) <= 0xA)
    {
      *(_DWORD *)(result + 20484) = a2 + 5;
      return gleUpdateMatrixMode(result);
    }
  }
  else if (!*(_WORD *)(result + 29832))
  {
    *(_WORD *)(result + 29832) = 1281;
  }
  return result;
}

uint64_t glLoadPaletteFromModelViewMatrixOES_Exec(uint64_t a1)
{
  uint64_t v2 = (_DWORD *)(a1 + 20484);
  float32x4_t v3 = (int8x8_t *)(a1 + 1540);
  int v4 = *(_DWORD *)(a1 + 20484);
  *(_DWORD *)(a1 + 20484) = *(unsigned __int8 *)(a1 + 20495) + 5;
  gleUpdateMatrixMode(a1);
  long long v5 = *(_OWORD **)(a1 + 19976);
  *long long v5 = *(_OWORD *)(a1 + 9616);
  v5[1] = *(_OWORD *)(a1 + 9632);
  _OWORD v5[2] = *(_OWORD *)(a1 + 9648);
  v5[3] = *(_OWORD *)(a1 + 9664);
  LODWORD(v5) = v2[1];
  *(_DWORD *)(a1 + 1528) |= v5;
  v2[2042] = 0;
  *float32x4_t v3 = vorr_s8(*v3, (int8x8_t)vdup_n_s32(v5));
  *uint64_t v2 = v4;

  return gleUpdateMatrixMode(a1);
}

void *glCurrentPaletteMatrixOES_PackThread(uint64_t a1, int a2)
{
  double result = gleAddCommand(a1, (uint64_t)glCurrentPaletteMatrixOES_UnpackThread, 4);
  *(_DWORD *)double result = a2;
  return result;
}

uint64_t glCurrentPaletteMatrixOES_UnpackThread(uint64_t a1, unsigned int *a2)
{
  return 4;
}

void *glLoadPaletteFromModelViewMatrixOES_PackThread(uint64_t a1)
{
  return gleAddCommand(a1, (uint64_t)glLoadPaletteFromModelViewMatrixOES_UnpackThread, 0);
}

uint64_t glLoadPaletteFromModelViewMatrixOES_UnpackThread(uint64_t a1)
{
  return 0;
}

float glMultMatrixf_Comp(uint64_t a1, uint64_t a2)
{
  float32x4_t v3 = gleAddCommand(a1, (uint64_t)glMultMatrixf_ListExec, 64);
  for (uint64_t i = 0; i != 64; i += 4)
  {
    float result = *(float *)(a2 + i);
    *(float *)((char *)v3 + i) = result;
  }
  return result;
}

uint64_t glMultMatrixf_ListExec(uint64_t a1, float32x2_t *a2)
{
  return 64;
}

int8x8_t glMultMatrixx_Exec(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  v5[8] = *(float32x2_t *)MEMORY[0x263EF8340];
  float32x4_t v3 = (float32x4_t)vdupq_n_s32(0x37800000u);
  do
  {
    *(float32x4_t *)v5[v2].f32 = vmulq_f32(vcvtq_f32_s32(*(int32x4_t *)(a2 + v2 * 8)), v3);
    v2 += 2;
  }
  while (v2 != 8);
  return glMultMatrixf_Exec(a1, v5);
}

double glMultMatrixx_PackThread(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v11 = *MEMORY[0x263EF8340];
  float32x4_t v3 = (float32x4_t)vdupq_n_s32(0x37800000u);
  do
  {
    v8[v2] = vmulq_f32(vcvtq_f32_s32(*(int32x4_t *)(a2 + v2 * 16)), v3);
    ++v2;
  }
  while (v2 != 4);
  int v4 = gleAddCommand(a1, (uint64_t)glMultMatrixf_ListExec, 64);
  long long v5 = v8[1];
  *int v4 = v8[0];
  v4[1] = v5;
  double result = *(double *)&v9;
  long long v7 = v10;
  v4[2] = v9;
  double v4[3] = v7;
  return result;
}

uint64_t glNormal_ListExec(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 8448) = *(void *)a2;
  *(_DWORD *)(a1 + 8456) = v2;
  return 12;
}

float32_t glNormal3x_Exec(float32x2_t *a1, unsigned int a2, unsigned int a3, int a4)
{
  float32_t result = (float)a4 * 0.000015259;
  a1[1056] = vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(a3, a2)), (float32x2_t)vdup_n_s32(0x37800000u));
  a1[1057].f32[0] = result;
  return result;
}

float32_t glNormal3x_PackThread(uint64_t a1, unsigned int a2, unsigned int a3, int a4)
{
  long long v7 = (float32x2_t *)gleAddCommand(a1, (uint64_t)glNormal_ListExec, 12);
  *long long v7 = vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(a3, a2)), (float32x2_t)vdup_n_s32(0x37800000u));
  float32_t result = (float)a4 * 0.000015259;
  v7[1].f32[0] = result;
  return result;
}

uint64_t glGenQueries_Exec(uint64_t result, unsigned int a2, _DWORD *a3)
{
  if ((a2 & 0x80000000) != 0)
  {
    if (!*(_WORD *)(result + 29832)) {
      *(_WORD *)(result + 29832) = 1281;
    }
  }
  else
  {
    float32_t result = gleGenHashNames(result + 25904, a2);
    if (result && a2)
    {
      uint64_t v5 = a2;
      do
      {
        *a3++ = result;
        float32_t result = (result + 1);
        --v5;
      }
      while (v5);
    }
  }
  return result;
}

uint64_t glDeleteQueries_Exec(uint64_t result, int a2, unsigned int *a3)
{
  if (a2 < 0)
  {
    if (!*(_WORD *)(result + 29832)) {
      *(_WORD *)(result + 29832) = 1281;
    }
  }
  else
  {
    float32x4_t v3 = a3;
    uint64_t v4 = result;
    uint64_t v5 = *(void *)(result + 25952);
    if (v5) {
      BOOL v6 = a2 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      long long v7 = (void *)(result + 33696);
      uint64_t v8 = a2;
      long long v9 = a3;
      while (1)
      {
        int v10 = *v9++;
        if (v10 == *(_DWORD *)(v5 + 16)) {
          break;
        }
        if (!--v8) {
          goto LABEL_13;
        }
      }
      *(unsigned char *)(v5 + 254) = 0;
      *(void *)(result + 25952) = 0;
      uint64_t v11 = *(unsigned __int8 *)(result + 32496);
      if (*(unsigned char *)(result + 32496))
      {
        do
        {
          *long long v7 = 0;
          v7 += 209;
          --v11;
        }
        while (v11);
      }
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1524) |= 0x800000u;
    }
LABEL_13:
    if (a2 >= 1)
    {
      uint64_t v12 = a2;
      do
      {
        unsigned int v13 = *v3++;
        float32_t result = gleDeleteContextHashNameAndObject(v4, v4 + 25904, (uint64_t (*)(uint64_t, uint64_t))gleFreeQueryObject, v13);
        --v12;
      }
      while (v12);
    }
  }
  return result;
}

void glBeginQuery_Exec(uint64_t a1, int a2, unsigned int a3)
{
  float32x4_t v3 = (_DWORD *)(a1 + 25976);
  if (!a3)
  {
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v20 = 1282;
    goto LABEL_46;
  }
  __int16 v5 = a2;
  if (a2 > 35974)
  {
    if (a2 == 35975)
    {
      int v11 = 0;
      int v10 = (char **)(a1 + 25960);
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1548) |= 0x8000u;
      char v8 = 1;
      uint64_t v9 = 2;
      uint64_t v21 = a1 + 25976;
    }
    else
    {
      if (a2 != 35976)
      {
        int v7 = 36202;
LABEL_9:
        if (a2 == v7) {
          goto LABEL_10;
        }
        if (*(_WORD *)(a1 + 29832)) {
          return;
        }
        __int16 v20 = 1280;
LABEL_46:
        *(_WORD *)(a1 + 29832) = v20;
        return;
      }
      int v11 = 0;
      int v10 = (char **)(a1 + 25968);
      uint64_t v21 = a1 + 25976;
      float32x4_t v3 = (_DWORD *)(a1 + 25980);
      char v8 = 1;
      uint64_t v9 = 6;
    }
  }
  else
  {
    if (a2 != 35007)
    {
      if (a2 == 35092)
      {
LABEL_10:
        uint64_t v21 = a1 + 25976;
        char v8 = 0;
        float32x4_t v3 = 0;
        uint64_t v9 = 0;
        int v10 = (char **)(a1 + 25936);
        int v11 = 1;
        goto LABEL_14;
      }
      int v7 = 35887;
      goto LABEL_9;
    }
    uint64_t v21 = a1 + 25976;
    float32x4_t v3 = 0;
    int v10 = (char **)(a1 + 25944);
    int v11 = 1;
    char v8 = 1;
    uint64_t v9 = 1;
  }
LABEL_14:
  if (*v10)
  {
    if (!*(_WORD *)(v21 + 3856)) {
      *(_WORD *)(v21 + 3856) = 1282;
    }
    return;
  }
  if (*(void *)(a1 + 27648)) {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 27780));
  }
  uint64_t v12 = gleLookupHashObject(a1 + 25904, a3);
  if (!v12)
  {
    if (gleIsHashName(a1 + 25904, a3))
    {
      QueryObject = gleCreateQueryObject(a1, a3);
      gleAddHashNameAndObject(a1, a1 + 25904, (uint64_t)QueryObject);
      goto LABEL_23;
    }
LABEL_34:
    if (!*(_WORD *)(v21 + 3856)) {
      *(_WORD *)(v21 + 3856) = 1282;
    }
    if (*(void *)(a1 + 27648))
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 27780));
    }
    return;
  }
  QueryObject = (char *)v12;
  if (*((unsigned char *)v12 + 254) || *(uint64_t **)(a1 + 25984) == v12) {
    goto LABEL_34;
  }
  v12[29] = 0;
  v12[30] = 0;
  *((unsigned char *)v12 + 255) = -1;
LABEL_23:
  uint64_t v15 = QueryObject + 40;
  uint64_t v14 = *((void *)QueryObject + 5);
  ++*((_DWORD *)QueryObject + 5);
  QueryObject[254] = 1;
  *((_WORD *)QueryObject + 126) = v5;
  if (!v14) {
    gleCreateQueryObjectGLDState(a1, (uint64_t)QueryObject);
  }
  if (*(void *)(a1 + 27648)) {
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 27780));
  }
  *int v10 = QueryObject;
  uint64_t v16 = *(unsigned __int8 *)(a1 + 32496);
  if (*(unsigned char *)(a1 + 32496))
  {
    unint64_t v17 = (void *)(a1 + 8 * v9 + 33608);
    uint64_t v18 = (uint64_t *)(QueryObject + 40);
    do
    {
      uint64_t v19 = *v18++;
      *unint64_t v17 = v19;
      v17 += 209;
      --v16;
    }
    while (v16);
  }
  if (v11)
  {
    if ((v8 & 1) == 0) {
      *(_WORD *)(a1 + 17710) = v5;
    }
    uint64_t v22 = 0;
    (*(void (**)(void, void, void, uint64_t *))(*(void *)(a1 + 29496) + 768))(*(void *)(a1 + 29464), *(void *)&v15[8 * *(unsigned __int8 *)(a1 + 32500)], 0, &v22);
    *((void *)QueryObject + 29) = *(void *)(a1 + 29472);
    QueryObject[255] = *(unsigned char *)(a1 + 32500);
    *(_DWORD *)(v21 + 2676) = 0;
    goto LABEL_43;
  }
  if (*(unsigned char *)(a1 + 32481))
  {
    if (*(unsigned char *)(*(void *)(a1 + 29032) + 107))
    {
      uint64_t v22 = 0;
      (*(void (**)(void, void, void, uint64_t *))(*(void *)(a1 + 29448) + 768))(*(void *)(a1 + 29016), *(void *)&v15[8 * *(unsigned __int8 *)(a1 + 32499)], 0, &v22);
      *((void *)QueryObject + 29) = *(void *)(a1 + 29024);
      QueryObject[255] = *(unsigned char *)(a1 + 32499);
      *(_DWORD *)(v21 + 2676) = 0;
LABEL_43:
      *(_DWORD *)(a1 + 1524) |= 0x800000u;
    }
  }
  else
  {
    *float32x4_t v3 = 0;
  }
}

void glBeginQuery_PackThread(uint64_t a1, int a2, unsigned int a3)
{
  if (a2 > 35974)
  {
    if (a2 == 35975)
    {
      uint64_t v7 = 26560;
    }
    else
    {
      if (a2 != 35976)
      {
        int v6 = 36202;
        goto LABEL_8;
      }
      uint64_t v7 = 26568;
    }
  }
  else
  {
    if (a2 != 35007)
    {
      if (a2 == 35092)
      {
LABEL_9:
        uint64_t v7 = 26536;
        goto LABEL_13;
      }
      int v6 = 35887;
LABEL_8:
      if (a2 != v6)
      {
        char v8 = (__int16 *)(a1 + 29832);
        if (*(_WORD *)(a1 + 29832)) {
          return;
        }
        __int16 v9 = 1280;
        goto LABEL_22;
      }
      goto LABEL_9;
    }
    uint64_t v7 = 26544;
  }
LABEL_13:
  if (*(void *)(a1 + v7))
  {
    char v8 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v9 = 1282;
LABEL_22:
    *char v8 = v9;
    return;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 27780));
  int v10 = gleLookupHashObject(a1 + 25904, a3);
  if (v10)
  {
    QueryObject = (char *)v10;
    uint64_t v12 = v10[1];
    if (*(unsigned char *)(v12 + 18) || *(uint64_t **)(a1 + 25984) == v10) {
      goto LABEL_29;
    }
LABEL_25:
    *(_WORD *)(v12 + 18) = 1;
    *(_WORD *)(v12 + 16) = a2;
    *(void *)(v12 + 8) = 0;
    if (a2 > 35974)
    {
      if (a2 == 35975)
      {
        *(void *)(a1 + 26560) = v12;
        goto LABEL_42;
      }
      if (a2 == 35976)
      {
        *(void *)(a1 + 26568) = v12;
        goto LABEL_42;
      }
      int v13 = 36202;
    }
    else
    {
      if (a2 == 35007)
      {
        *(void *)(a1 + 26544) = v12;
        goto LABEL_42;
      }
      if (a2 == 35092) {
        goto LABEL_38;
      }
      int v13 = 35887;
    }
    if (a2 != v13)
    {
LABEL_42:
      atomic_fetch_add_explicit((atomic_uint *volatile)QueryObject + 64, 1u, memory_order_relaxed);
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 27780));
      uint64_t v14 = gleAddCommand(a1, (uint64_t)glBeginQueryIndexed_FullUnpackThread, 12);
      *uint64_t v14 = a2;
      v14[1] = 0;
      v14[2] = a3;
      return;
    }
LABEL_38:
    *(void *)(a1 + 26536) = v12;
    goto LABEL_42;
  }
  if (gleIsHashName(a1 + 25904, a3))
  {
    QueryObject = gleCreateQueryObject(a1, a3);
    gleAddHashNameAndObject(a1, a1 + 25904, (uint64_t)QueryObject);
    uint64_t v12 = *((void *)QueryObject + 1);
    goto LABEL_25;
  }
LABEL_29:
  if (!*(_WORD *)(a1 + 29832)) {
    *(_WORD *)(a1 + 29832) = 1282;
  }

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 27780));
}

void glEndQuery_Exec(uint64_t a1, int a2)
{
  if (a2 > 35974)
  {
    if (a2 == 35975)
    {
      int v8 = 0;
      uint64_t v7 = (uint64_t *)(a1 + 25960);
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1548) |= 0x8000u;
      char v4 = 1;
      uint64_t v6 = 2;
      __int16 v5 = (_DWORD *)(a1 + 25976);
      goto LABEL_13;
    }
    if (a2 == 35976)
    {
      int v8 = 0;
      uint64_t v7 = (uint64_t *)(a1 + 25968);
      __int16 v5 = (_DWORD *)(a1 + 25980);
      char v4 = 1;
      uint64_t v6 = 6;
      goto LABEL_13;
    }
    int v3 = 36202;
    goto LABEL_8;
  }
  if (a2 == 35007)
  {
    __int16 v5 = 0;
    uint64_t v7 = (uint64_t *)(a1 + 25944);
    int v8 = 1;
    char v4 = 1;
    uint64_t v6 = 1;
    goto LABEL_13;
  }
  if (a2 != 35092)
  {
    int v3 = 35887;
LABEL_8:
    if (a2 != v3)
    {
      if (*(_WORD *)(a1 + 29832)) {
        return;
      }
      __int16 v16 = 1280;
      goto LABEL_35;
    }
  }
  char v4 = 0;
  __int16 v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = (uint64_t *)(a1 + 25936);
  int v8 = 1;
LABEL_13:
  uint64_t v9 = *v7;
  if (!*v7 || *(unsigned __int16 *)(v9 + 252) != a2)
  {
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v16 = 1282;
LABEL_35:
    *(_WORD *)(a1 + 29832) = v16;
    return;
  }
  *uint64_t v7 = 0;
  uint64_t v10 = *(unsigned __int8 *)(a1 + 32496);
  if (*(unsigned char *)(a1 + 32496))
  {
    int v11 = (void *)(a1 + 8 * v6 + 33608);
    do
    {
      *int v11 = 0;
      v11 += 209;
      --v10;
    }
    while (v10);
  }
  *(unsigned char *)(v9 + 254) = 0;
  if (v8)
  {
    if ((v4 & 1) == 0) {
      *(_WORD *)(a1 + 17710) = 0;
    }
LABEL_23:
    *(_DWORD *)(a1 + 28652) = 0;
    *(_DWORD *)(a1 + 1524) |= 0x800000u;
    goto LABEL_25;
  }
  if (!*(unsigned char *)(a1 + 32481))
  {
    *(void *)(v9 + 240) = *v5;
    *__int16 v5 = 0;
    goto LABEL_25;
  }
  if (*(unsigned char *)(*(void *)(a1 + 29032) + 107)) {
    goto LABEL_23;
  }
LABEL_25:
  if (*(unsigned char *)(a1 + 32496))
  {
    unint64_t v12 = 0;
    int v13 = (void *)(a1 + 32512);
    do
    {
      uint64_t v14 = v9 + 8 * v12;
      (*(void (**)(void, void, void, void))(v13[206] + 1832))(*v13, *(void *)(v14 + 40), 0, 0);
      (*(void (**)(void, void))(v13[206] + 1736))(*v13, *(void *)(v14 + 136));
      ++v12;
      v13 += 209;
    }
    while (v12 < *(unsigned __int8 *)(a1 + 32496));
  }
  int v15 = *(_DWORD *)(v9 + 20) - 1;
  *(_DWORD *)(v9 + 20) = v15;
  if (!v15)
  {
    gleFreeQueryObject(a1, (void *)v9);
  }
}

void *glEndQuery_PackThread(void *result, int a2)
{
  if (a2 > 35974)
  {
    if (a2 == 35975)
    {
      uint64_t v4 = 3320;
      goto LABEL_13;
    }
    if (a2 == 35976)
    {
      uint64_t v4 = 3321;
      goto LABEL_13;
    }
    int v3 = 36202;
    goto LABEL_8;
  }
  if (a2 == 35007)
  {
    uint64_t v4 = 3318;
    goto LABEL_13;
  }
  if (a2 != 35092)
  {
    int v3 = 35887;
LABEL_8:
    if (a2 != v3)
    {
      uint64_t v7 = (__int16 *)(result + 3729);
      if (*((_WORD *)result + 14916)) {
        return result;
      }
      __int16 v8 = 1280;
      goto LABEL_28;
    }
  }
  uint64_t v4 = 3317;
LABEL_13:
  uint64_t v5 = result[v4];
  if (!v5 || *(unsigned __int16 *)(v5 + 16) != a2)
  {
    uint64_t v7 = (__int16 *)(result + 3729);
    if (*((_WORD *)result + 14916)) {
      return result;
    }
    __int16 v8 = 1282;
LABEL_28:
    *uint64_t v7 = v8;
    return result;
  }
  *(unsigned char *)(v5 + 18) = 0;
  if (a2 > 35974)
  {
    if (a2 == 35975)
    {
      result[3320] = 0;
      goto LABEL_32;
    }
    if (a2 == 35976)
    {
      result[3321] = 0;
      goto LABEL_32;
    }
    int v6 = 36202;
  }
  else
  {
    if (a2 == 35007)
    {
      result[3318] = 0;
      goto LABEL_32;
    }
    if (a2 == 35092) {
      goto LABEL_25;
    }
    int v6 = 35887;
  }
  if (a2 == v6) {
LABEL_25:
  }
    result[3317] = 0;
LABEL_32:
  float32_t result = gleAddCommand((uint64_t)result, (uint64_t)glEndQueryIndexed_FullUnpackThread, 8);
  *(_DWORD *)float32_t result = a2;
  *((_DWORD *)result + 1) = 0;
  return result;
}

BOOL glIsQuery_Exec(uint64_t a1, unsigned int a2)
{
  return gleLookupHashObject(a1 + 25904, a2) != 0;
}

uint64_t glGetQueryiv_Exec(uint64_t result, int a2, int a3, int *a4)
{
  if (a2 <= 35974)
  {
    if (a2 == 35007 || a2 == 35092) {
      goto LABEL_9;
    }
    int v4 = 35887;
  }
  else
  {
    if ((a2 - 35975) < 2 || a2 == 36202) {
      goto LABEL_9;
    }
    int v4 = 36392;
  }
  if (a2 != v4) {
    goto LABEL_34;
  }
LABEL_9:
  if (a3 == 34917)
  {
    if (a2 <= 35974)
    {
      switch(a2)
      {
        case 35007:
          uint64_t v6 = *(void *)(result + 25944);
          if (!v6) {
            goto LABEL_54;
          }
          goto LABEL_52;
        case 35092:
          uint64_t v6 = *(void *)(result + 25936);
          if (!v6) {
            goto LABEL_54;
          }
          int v8 = *(unsigned __int16 *)(v6 + 252);
          int v9 = 35092;
          break;
        case 35887:
          uint64_t v6 = *(void *)(result + 25936);
          if (!v6) {
            goto LABEL_54;
          }
          int v8 = *(unsigned __int16 *)(v6 + 252);
          int v9 = 35887;
          break;
        default:
          goto LABEL_54;
      }
    }
    else
    {
      if (a2 <= 36201)
      {
        if (a2 == 35975)
        {
          uint64_t v6 = *(void *)(result + 25960);
          if (!v6) {
            goto LABEL_54;
          }
        }
        else
        {
          if (a2 != 35976) {
            goto LABEL_54;
          }
          uint64_t v6 = *(void *)(result + 25968);
          if (!v6) {
            goto LABEL_54;
          }
        }
        goto LABEL_52;
      }
      if (a2 != 36202)
      {
        if (a2 != 36392) {
          goto LABEL_54;
        }
        uint64_t v6 = *(void *)(result + 25952);
        if (!v6) {
          goto LABEL_54;
        }
        goto LABEL_52;
      }
      uint64_t v6 = *(void *)(result + 25936);
      if (!v6) {
        goto LABEL_54;
      }
      int v8 = *(unsigned __int16 *)(v6 + 252);
      int v9 = 36202;
    }
    if (v8 != v9) {
      goto LABEL_54;
    }
LABEL_52:
    int v5 = *(_DWORD *)(v6 + 16);
    goto LABEL_53;
  }
  if (a3 == 34916)
  {
    if (a2 <= 35974)
    {
      if (a2 == 35007)
      {
        int v5 = 32;
        goto LABEL_53;
      }
      if (a2 == 35092)
      {
        int v5 = *(_DWORD *)(*(void *)(result + 29032) + 132);
        goto LABEL_53;
      }
      int v7 = 35887;
LABEL_32:
      if (a2 == v7)
      {
        int v5 = *(_DWORD *)(*(void *)(result + 29032) + 132) != 0;
        goto LABEL_53;
      }
      goto LABEL_34;
    }
    if (a2 <= 36201)
    {
      if (a2 == 35975)
      {
        int v5 = *(_DWORD *)(*(void *)(result + 29032) + 492);
        goto LABEL_53;
      }
      if (a2 == 35976)
      {
        int v5 = *(_DWORD *)(*(void *)(result + 29032) + 496);
LABEL_53:
        *a4 = v5;
        return result;
      }
      goto LABEL_34;
    }
    if (a2 != 36392)
    {
      int v7 = 36202;
      goto LABEL_32;
    }
LABEL_54:
    *a4 = 0;
    return result;
  }
LABEL_34:
  if (!*(_WORD *)(result + 29832)) {
    *(_WORD *)(result + 29832) = 1280;
  }
  return result;
}

uint64_t glGetQueryObjectiv_Exec(uint64_t a1, unsigned int a2, int a3, _DWORD *a4)
{
  v7[1] = *MEMORY[0x263EF8340];
  uint64_t result = glGetQueryObject_Core(a1, a2, a3, v7);
  if (result)
  {
    int64_t v6 = v7[0];
    if (v7[0] >= 0x7FFFFFFF) {
      int64_t v6 = 0x7FFFFFFFLL;
    }
    if (v6 <= (uint64_t)0xFFFFFFFF80000000) {
      LODWORD(v6) = 0x80000000;
    }
    *a4 = v6;
  }
  return result;
}

uint64_t glGetQueryObject_Core(uint64_t a1, unsigned int a2, int a3, uint64_t *a4)
{
  uint64_t v7 = a1 + 29832;
  int v8 = gleLookupHashObject(a1 + 25904, a2);
  if (!v8 || (int v9 = v8, *((unsigned char *)v8 + 254)))
  {
    if (*(_WORD *)v7) {
      return 0;
    }
    uint64_t v13 = 0;
    __int16 v18 = 1282;
    goto LABEL_23;
  }
  uint64_t v10 = v8[29];
  if (v10 && *(unsigned char *)(v7 + 2664))
  {
    uint64_t v11 = 0;
    unint64_t v12 = (void *)(a1 + 32520);
    while (*v12 != v10)
    {
      ++v11;
      v12 += 209;
      if (*(unsigned __int8 *)(v7 + 2664) == v11) {
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    LODWORD(v11) = -1;
  }
  if (a3 == 34918)
  {
    if (v11 != -1)
    {
      uint64_t v20 = 0;
      uint64_t v14 = a1 + 1672 * (int)v11;
      (*(void (**)(void, void, uint64_t, uint64_t))(*(void *)(v14 + 34160) + 1336))(*(void *)(v14 + 32512), 0, 2, v8[(int)v11 + 17]);
      (*(void (**)(void, uint64_t, uint64_t, uint64_t *))(*(void *)(v14 + 34160) + 1832))(*(void *)(v14 + 32512), v9[(int)v11 + 5], 34918, &v20);
      uint64_t v15 = v9[30] + v20;
      v9[29] = 0;
      v9[30] = v15;
    }
    int v16 = *((unsigned __int16 *)v9 + 126);
    switch(v16)
    {
      case 35887:
        goto LABEL_18;
      case 36392:
        *a4 = 0;
        return 1;
      case 36202:
LABEL_18:
        uint64_t v17 = v9[30] != 0;
        break;
      default:
        uint64_t v17 = v9[30];
        break;
    }
    *a4 = v17;
    return 1;
  }
  if (a3 != 34919)
  {
    if (*(_WORD *)v7) {
      return 0;
    }
    uint64_t v13 = 0;
    __int16 v18 = 1280;
LABEL_23:
    *(_WORD *)uint64_t v7 = v18;
    return v13;
  }
  uint64_t v13 = 1;
  if (v11 == -1) {
    *a4 = 1;
  }
  else {
    *a4 = (*(int (**)(void, void, void, uint64_t, uint64_t))(*(void *)(a1 + 1672 * (int)v11 + 34160)
  }
                                                                          + 1320))(*(void *)(a1 + 1672 * (int)v11 + 32512), 0, 0, 1, v8[(int)v11 + 17]);
  return v13;
}

uint64_t glGetQueryObjectuiv_Exec(uint64_t a1, unsigned int a2, int a3, _DWORD *a4)
{
  v7[1] = *MEMORY[0x263EF8340];
  uint64_t result = glGetQueryObject_Core(a1, a2, a3, v7);
  if (result)
  {
    uint64_t v6 = v7[0];
    if (v7[0] >= 0xFFFFFFFFLL) {
      uint64_t v6 = 0xFFFFFFFFLL;
    }
    *a4 = v6 & ~(v6 >> 63);
  }
  return result;
}

uint64_t glGenQueries_ExecThread(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  (*(void (**)(void))(a1 + 27752))();

  return glGenQueries_Exec(a1, a2, a3);
}

uint64_t glDeleteQueries_ExecThread(uint64_t a1, int a2, unsigned int *a3)
{
  (*(void (**)(void))(a1 + 27752))();

  return glDeleteQueries_Exec(a1, a2, a3);
}

BOOL glIsQuery_ExecThread(uint64_t a1, unsigned int a2)
{
  return gleLookupHashObject(a1 + 25904, a2) != 0;
}

uint64_t glGetQueryiv_ExecThread(uint64_t a1, int a2, int a3, int *a4)
{
  (*(void (**)(void))(a1 + 27752))();

  return glGetQueryiv_Exec(a1, a2, a3, a4);
}

uint64_t glGetQueryObjectiv_ExecThread(intptr_t a1, unsigned int a2, int a3, _DWORD *a4)
{
  v7[1] = *MEMORY[0x263EF8340];
  uint64_t result = glGetQueryObject_CoreExecThread(a1, a2, a3, v7);
  if (result)
  {
    int64_t v6 = v7[0];
    if (v7[0] >= 0x7FFFFFFF) {
      int64_t v6 = 0x7FFFFFFFLL;
    }
    if (v6 <= (uint64_t)0xFFFFFFFF80000000) {
      LODWORD(v6) = 0x80000000;
    }
    *a4 = v6;
  }
  return result;
}

uint64_t glGetQueryObject_CoreExecThread(intptr_t a1, unsigned int a2, int a3, uint64_t *a4)
{
  uint64_t v8 = a1 + 25904;
  int v9 = (os_unfair_lock_s *)(a1 + 27780);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 27780));
  uint64_t v10 = gleLookupHashObject(v8, a2);
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = v10[1];
    if (!*(unsigned char *)(v12 + 18))
    {
      if (*(unsigned char *)(v12 + 19))
      {
        if (a3 == 34919)
        {
          uint64_t v16 = 1;
        }
        else
        {
          if (a3 != 34918)
          {
            uint64_t v13 = (__int16 *)(a1 + 29832);
            if (*(_WORD *)(a1 + 29832)) {
              goto LABEL_6;
            }
            __int16 v14 = 1280;
            goto LABEL_5;
          }
          uint64_t v16 = *(void *)(v12 + 8);
        }
        *a4 = v16;
        os_unfair_lock_unlock(v9);
      }
      else if (a3 == 34919 && *((_DWORD *)v10 + 64))
      {
        *a4 = 0;
        os_unfair_lock_unlock(v9);
        (*(void (**)(intptr_t))(a1 + 27744))(a1);
      }
      else
      {
        os_unfair_lock_unlock(v9);
        v17[0] = glGetQueryObjectiv_CallbackThread;
        v17[1] = 24;
        unsigned int v18 = a2;
        int v19 = a3;
        uint64_t v20 = a4;
        uint64_t v21 = v11;
        gleProcessCallback(a1, (uint64_t)v17);
        if (a3 == 34918)
        {
          *(void *)(v12 + 8) = *a4;
          *(unsigned char *)(v12 + 19) = 1;
        }
      }
      return 1;
    }
  }
  uint64_t v13 = (__int16 *)(a1 + 29832);
  if (!*(_WORD *)(a1 + 29832))
  {
    __int16 v14 = 1282;
LABEL_5:
    *uint64_t v13 = v14;
  }
LABEL_6:
  os_unfair_lock_unlock(v9);
  return 0;
}

uint64_t glGetQueryObjectuiv_ExecThread(intptr_t a1, unsigned int a2, int a3, _DWORD *a4)
{
  v7[1] = *MEMORY[0x263EF8340];
  uint64_t result = glGetQueryObject_CoreExecThread(a1, a2, a3, v7);
  if (result)
  {
    uint64_t v6 = v7[0];
    if (v7[0] >= 0xFFFFFFFFLL) {
      uint64_t v6 = 0xFFFFFFFFLL;
    }
    *a4 = v6 & ~(v6 >> 63);
  }
  return result;
}

uint64_t glBeginQueryIndexed_FullUnpackThread(uint64_t a1, int *a2)
{
  uint64_t v2 = a1 + 28652;
  unsigned int v3 = a2[2];
  if (!v3) {
    goto LABEL_48;
  }
  int v5 = *a2;
  if (*a2 > 35974)
  {
    uint64_t v7 = a2[1];
    if (v5 == 35975)
    {
      int v12 = 0;
      uint64_t v11 = (char **)(a1 + 25904 + 8 * v7 + 56);
      int v10 = v7 + 2;
      int v9 = (_DWORD *)(a1 + 25904 + 4 * v7 + 72);
      *(_DWORD *)uint64_t v2 = 0;
      *(_DWORD *)(a1 + 1548) |= 0x8000u;
    }
    else
    {
      if (v5 != 35976)
      {
        int v6 = 36202;
        goto LABEL_9;
      }
      int v12 = 0;
      uint64_t v11 = (char **)(a1 + 25904 + 8 * v7 + 64);
      int v10 = v7 + 6;
      int v9 = (_DWORD *)(a1 + 25904 + 4 * v7 + 76);
    }
    char v8 = 1;
  }
  else
  {
    if (v5 != 35007)
    {
      if (v5 == 35092)
      {
LABEL_10:
        char v8 = 0;
        int v9 = 0;
        int v10 = 0;
        uint64_t v11 = (char **)(a1 + 25936);
        int v12 = 1;
        goto LABEL_15;
      }
      int v6 = 35887;
LABEL_9:
      if (v5 != v6)
      {
        if (*(_WORD *)(a1 + 29832)) {
          return 12;
        }
        __int16 v22 = 1280;
LABEL_45:
        *(_WORD *)(a1 + 29832) = v22;
        return 12;
      }
      goto LABEL_10;
    }
    int v9 = 0;
    uint64_t v11 = (char **)(a1 + 25944);
    int v12 = 1;
    char v8 = 1;
    int v10 = 1;
  }
LABEL_15:
  if (*v11)
  {
LABEL_48:
    if (*(_WORD *)(a1 + 29832)) {
      return 12;
    }
    __int16 v22 = 1282;
    goto LABEL_45;
  }
  int v24 = v10;
  if (*(void *)(a1 + 27648)) {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 27780));
  }
  uint64_t v13 = gleLookupHashObject(a1 + 25904, v3);
  if (!v13)
  {
    if (gleIsHashName(a1 + 25904, v3))
    {
      QueryObject = gleCreateQueryObject(a1, v3);
      gleAddHashNameAndObject(a1, a1 + 25904, (uint64_t)QueryObject);
      goto LABEL_24;
    }
LABEL_35:
    if (!*(_WORD *)(v2 + 1180)) {
      *(_WORD *)(v2 + 1180) = 1282;
    }
    if (*(void *)(a1 + 27648)) {
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 27780));
    }
    return 12;
  }
  QueryObject = (char *)v13;
  if (*((unsigned char *)v13 + 254) || *(uint64_t **)(a1 + 25984) == v13) {
    goto LABEL_35;
  }
  v13[29] = 0;
  v13[30] = 0;
  *((unsigned char *)v13 + 255) = -1;
LABEL_24:
  uint64_t v16 = QueryObject + 40;
  uint64_t v15 = *((void *)QueryObject + 5);
  ++*((_DWORD *)QueryObject + 5);
  QueryObject[254] = 1;
  *((_WORD *)QueryObject + 126) = v5;
  if (!v15) {
    gleCreateQueryObjectGLDState(a1, (uint64_t)QueryObject);
  }
  if (*(void *)(a1 + 27648)) {
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 27780));
  }
  *uint64_t v11 = QueryObject;
  uint64_t v17 = *(unsigned __int8 *)(v2 + 3844);
  if (*(unsigned char *)(v2 + 3844))
  {
    unsigned int v18 = (void *)(a1 + 8 * v24 + 33608);
    int v19 = (uint64_t *)(QueryObject + 40);
    do
    {
      uint64_t v20 = *v19++;
      *unsigned int v18 = v20;
      v18 += 209;
      --v17;
    }
    while (v17);
  }
  if (v12)
  {
    if ((v8 & 1) == 0) {
      *(_WORD *)(a1 + 17710) = v5;
    }
    uint64_t v25 = 0;
    (*(void (**)(void, void, void, uint64_t *))(*(void *)(a1 + 29496) + 768))(*(void *)(a1 + 29464), *(void *)&v16[8 * *(unsigned __int8 *)(v2 + 3848)], 0, &v25);
    *((void *)QueryObject + 29) = *(void *)(a1 + 29472);
    char v21 = *(unsigned char *)(v2 + 3848);
    goto LABEL_42;
  }
  if (!*(unsigned char *)(v2 + 3829))
  {
    *int v9 = 0;
    return 12;
  }
  if (*(unsigned char *)(*(void *)(a1 + 29032) + 107))
  {
    uint64_t v25 = 0;
    (*(void (**)(void, void, void, uint64_t *))(*(void *)(a1 + 29448) + 768))(*(void *)(a1 + 29016), *(void *)&v16[8 * *(unsigned __int8 *)(v2 + 3847)], 0, &v25);
    *((void *)QueryObject + 29) = *(void *)(a1 + 29024);
    char v21 = *(unsigned char *)(v2 + 3847);
LABEL_42:
    QueryObject[255] = v21;
    *(_DWORD *)uint64_t v2 = 0;
    *(_DWORD *)(a1 + 1524) |= 0x800000u;
  }
  return 12;
}

uint64_t glEndQueryIndexed_FullUnpackThread(uint64_t a1, int *a2)
{
  uint64_t v3 = 0;
  uint64_t v4 = a1 + 28652;
  int v5 = *a2;
  if (*a2 <= 35974)
  {
    if (v5 == 35007)
    {
      uint64_t v3 = *(void *)(a1 + 25944);
      goto LABEL_26;
    }
    if (v5 != 35092 && v5 != 35887) {
      goto LABEL_9;
    }
LABEL_8:
    uint64_t v3 = *(void *)(a1 + 25936);
    goto LABEL_9;
  }
  switch(v5)
  {
    case 35975:
      uint64_t v7 = a2[1];
      uint64_t v3 = *(void *)(a1 + 8 * v7 + 25960);
LABEL_28:
      int v13 = 0;
      int v12 = (uint64_t *)(a1 + 25904 + 8 * v7 + 56);
      int v11 = v7 + 2;
      int v10 = (_DWORD *)(a1 + 25904 + 4 * v7 + 72);
      *(_DWORD *)uint64_t v4 = 0;
      *(_DWORD *)(a1 + 1548) |= 0x8000u;
LABEL_31:
      char v9 = 1;
      goto LABEL_32;
    case 35976:
      uint64_t v7 = a2[1];
      uint64_t v3 = *(void *)(a1 + 8 * v7 + 25968);
      goto LABEL_30;
    case 36202:
      goto LABEL_8;
  }
LABEL_9:
  if (v5 > 35974)
  {
    if (v5 == 36202)
    {
LABEL_24:
      char v9 = 0;
      int v10 = 0;
      int v11 = 0;
      int v12 = (uint64_t *)(a1 + 25936);
      int v13 = 1;
LABEL_32:
      uint64_t v14 = *v12;
      if (!*v12 || v5 != *(unsigned __int16 *)(v14 + 252))
      {
        if (*(_WORD *)(a1 + 29832)) {
          goto LABEL_49;
        }
        __int16 v8 = 1282;
        goto LABEL_23;
      }
      *int v12 = 0;
      uint64_t v15 = *(unsigned __int8 *)(a1 + 32496);
      if (*(unsigned char *)(a1 + 32496))
      {
        uint64_t v16 = (void *)(a1 + 8 * v11 + 33608);
        do
        {
          void *v16 = 0;
          v16 += 209;
          --v15;
        }
        while (v15);
      }
      *(unsigned char *)(v14 + 254) = 0;
      if (v13)
      {
        if ((v9 & 1) == 0) {
          *(_WORD *)(a1 + 17710) = 0;
        }
      }
      else
      {
        if (!*(unsigned char *)(a1 + 32481))
        {
          *(void *)(v14 + 240) = *v10;
          *int v10 = 0;
          goto LABEL_44;
        }
        if (!*(unsigned char *)(*(void *)(a1 + 29032) + 107))
        {
LABEL_44:
          if (*(unsigned char *)(a1 + 32496))
          {
            unint64_t v17 = 0;
            unsigned int v18 = (void *)(a1 + 32512);
            do
            {
              uint64_t v19 = v14 + 8 * v17;
              (*(void (**)(void, void, void, void))(v18[206] + 1832))(*v18, *(void *)(v19 + 40), 0, 0);
              (*(void (**)(void, void))(v18[206] + 1736))(*v18, *(void *)(v19 + 136));
              ++v17;
              v18 += 209;
            }
            while (v17 < *(unsigned __int8 *)(v4 + 3844));
          }
          int v20 = *(_DWORD *)(v14 + 20) - 1;
          *(_DWORD *)(v14 + 20) = v20;
          if (!v20) {
            gleFreeQueryObject(a1, (void *)v14);
          }
          goto LABEL_49;
        }
      }
      *(_DWORD *)uint64_t v4 = 0;
      *(_DWORD *)(a1 + 1524) |= 0x800000u;
      goto LABEL_44;
    }
    uint64_t v7 = a2[1];
    if (v5 != 35976)
    {
      if (v5 != 35975) {
        goto LABEL_21;
      }
      goto LABEL_28;
    }
LABEL_30:
    int v13 = 0;
    int v12 = (uint64_t *)(a1 + 25904 + 8 * v7 + 64);
    int v11 = v7 + 6;
    int v10 = (_DWORD *)(a1 + 25904 + 4 * v7 + 76);
    goto LABEL_31;
  }
  if (v5 == 35007)
  {
LABEL_26:
    int v10 = 0;
    int v12 = (uint64_t *)(a1 + 25944);
    int v13 = 1;
    char v9 = 1;
    int v11 = 1;
    goto LABEL_32;
  }
  if (v5 == 35092 || v5 == 35887) {
    goto LABEL_24;
  }
LABEL_21:
  if (!*(_WORD *)(a1 + 29832))
  {
    __int16 v8 = 1280;
LABEL_23:
    *(_WORD *)(a1 + 29832) = v8;
  }
LABEL_49:
  atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 256), 0xFFFFFFFF, memory_order_relaxed);
  return 8;
}

uint64_t glGetQueryObjectiv_CallbackThread(uint64_t a1, uint64_t a2)
{
  if (*(__int16 *)(a1 + 28660) == -1 && !*(_DWORD *)(*(void *)(a2 + 16) + 256))
  {
    glGetQueryObject_Core(a1, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(uint64_t **)(a2 + 8));
    gleFinishCallback(a1);
  }
  return 24;
}

float glOrtho_Comp(uint64_t a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  double v9 = a3 - a2;
  float v10 = v9;
  if (v10 < 0.0) {
    float v11 = -v10;
  }
  else {
    float v11 = v9;
  }
  if (v11 < 0.000005) {
    goto LABEL_11;
  }
  float v14 = a5 - a4;
  float v15 = -v14;
  if (v14 >= 0.0) {
    float v15 = a5 - a4;
  }
  if (v15 < 0.000005) {
    goto LABEL_11;
  }
  float v17 = a6 - a7;
  float v18 = -v17;
  if (v17 >= 0.0) {
    float v18 = a6 - a7;
  }
  if (v18 >= 0.000005)
  {
    int v20 = (float *)gleAddCommand(a1, (uint64_t)glOrtho_ListExec, 24);
    float *v20 = (float)(1.0 / v10) + (float)(1.0 / v10);
    v20[1] = (float)(1.0 / v14) + (float)(1.0 / v14);
    float v21 = -((a2 + a3) * (float)(1.0 / v10));
    v20[2] = (float)(1.0 / v17) + (float)(1.0 / v17);
    v20[3] = v21;
    float v22 = -((a4 + a5) * (float)(1.0 / v14));
    float result = (a6 + a7) * (float)(1.0 / v17);
    v20[4] = v22;
    v20[5] = result;
  }
  else
  {
LABEL_11:
    gleSetErrorInList(a1, 1281);
  }
  return result;
}

uint64_t glOrtho_ListExec(uint64_t a1, float *a2)
{
  if (*(int *)(a1 + 20484) < 24)
  {
    uint64_t v2 = *(float32x4_t **)(a1 + 19976);
    float v3 = a2[2];
    float v4 = a2[3];
    float v5 = a2[4];
    float v6 = a2[5];
    float32x4_t v7 = *v2;
    float32x4_t v8 = v2[1];
    float32x4_t v9 = vmulq_n_f32(v8, a2[1]);
    *uint64_t v2 = vmulq_n_f32(*v2, *a2);
    v2[1] = v9;
    float32x4_t v10 = v2[2];
    float32x4_t v11 = vaddq_f32(v2[3], vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v8, v5), v7, v4), v10, v6));
    v2[2] = vmulq_n_f32(v10, v3);
    v2[3] = v11;
    LODWORD(v2) = *(_DWORD *)(a1 + 20488);
    *(_DWORD *)(a1 + 1528) |= v2;
    *(_DWORD *)(a1 + 28652) = 0;
    *(int8x8_t *)(a1 + 1540) = vorr_s8(*(int8x8_t *)(a1 + 1540), (int8x8_t)vdup_n_s32(v2));
  }
  else if (!*(_WORD *)(a1 + 29832))
  {
    *(_WORD *)(a1 + 29832) = 1282;
  }
  return 24;
}

int8x8_t glOrthof_Exec(uint64_t a1, float a2, float a3, float a4, float a5, float a6, float a7)
{
  return glOrtho_Exec(a1, COERCE_INT8X8_T(a2), a3, a4, a5, a6, a7);
}

int8x8_t glOrthox_Exec(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  return glOrtho_Exec(a1, COERCE_INT8X8_T((float)((float)a2 * 0.000015259)), (float)((float)a3 * 0.000015259), (float)((float)a4 * 0.000015259), (float)((float)a5 * 0.000015259), (float)((float)a6 * 0.000015259), (float)((float)a7 * 0.000015259));
}

float glOrthof_PackThread(uint64_t a1, float a2, float a3, float a4, float a5, float a6, float a7)
{
  return glOrtho_Comp(a1, a2, a3, a4, a5, a6, a7);
}

float glOrthox_PackThread(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  return glOrtho_Comp(a1, (float)((float)a2 * 0.000015259), (float)((float)a3 * 0.000015259), (float)((float)a4 * 0.000015259), (float)((float)a5 * 0.000015259), (float)((float)a6 * 0.000015259), (float)((float)a7 * 0.000015259));
}

void *glPixelStorei_PackThread(void *result, int a2, unsigned int a3)
{
  switch(a2)
  {
    case 3312:
    case 3328:
    case 3329:
    case 3330:
    case 3331:
    case 3332:
    case 3333:
      goto LABEL_6;
    case 3313:
      if (a3) {
        *((unsigned char *)result + 26661) = 1;
      }
      else {
        *((unsigned char *)result + 26661) = 0;
      }
      goto LABEL_6;
    case 3314:
      if ((a3 & 0x80000000) != 0) {
        goto LABEL_19;
      }
      *((_DWORD *)result + 6657) = a3;
      goto LABEL_6;
    case 3315:
      if ((a3 & 0x80000000) != 0) {
        goto LABEL_19;
      }
      *((_DWORD *)result + 6661) = a3;
      goto LABEL_6;
    case 3316:
      if ((a3 & 0x80000000) != 0) {
        goto LABEL_19;
      }
      *((_DWORD *)result + 6662) = a3;
      goto LABEL_6;
    case 3317:
      if (a3 <= 8 && ((1 << a3) & 0x116) != 0)
      {
        *((_DWORD *)result + 6664) = a3;
LABEL_6:
        float result = gleAddCommand((uint64_t)result, (uint64_t)glPixelStorei_UnpackThread, 8);
        *(_DWORD *)float result = a2;
        *((_DWORD *)result + 1) = a3;
      }
      else
      {
LABEL_19:
        if (!*((_WORD *)result + 14916))
        {
          __int16 v5 = 1281;
LABEL_21:
          *((_WORD *)result + 14916) = v5;
        }
      }
      return result;
    case 3318:
    case 3319:
    case 3320:
    case 3321:
    case 3322:
    case 3323:
    case 3324:
    case 3325:
    case 3326:
    case 3327:
      goto LABEL_8;
    default:
      if ((a2 - 32875) < 4 || (a2 - 35349) < 4) {
        goto LABEL_6;
      }
LABEL_8:
      if (*((_WORD *)result + 14916)) {
        return result;
      }
      __int16 v5 = 1280;
      goto LABEL_21;
  }
}

uint64_t glPixelStorei_UnpackThread(uint64_t a1, uint64_t a2)
{
  return 8;
}

uint64_t gleUpdatePointAttenuation(uint64_t a1)
{
  uint64_t v1 = (unsigned char *)(a1 + 15378);
  if (*(float *)(a1 + 15360) != *(float *)(a1 + 292)
    || (float v2 = *(float *)(a1 + 288), *(float *)(a1 + 15364) != v2)
    || *(float *)(a1 + 15368) != v2)
  {
LABEL_4:
    int v3 = 1;
    goto LABEL_5;
  }
  float v8 = *(float *)(a1 + 15348);
  if (*(unsigned char *)(a1 + 15379))
  {
    float32x4_t v9 = *(float **)(a1 + 29032);
    float v10 = v9[15];
    if (v10 > v9[17]) {
      float v10 = v9[17];
    }
    if (v8 > v10) {
      goto LABEL_4;
    }
    float v11 = *(float *)(a1 + 15352);
  }
  else
  {
    float v12 = *(float *)(a1 + 15344);
    if (v8 > v12)
    {
      uint64_t v13 = *(void *)(a1 + 29032);
      float v14 = *(float *)(v13 + 60);
      if (v14 > *(float *)(v13 + 68)) {
        float v14 = *(float *)(v13 + 68);
      }
      if (v8 > v14) {
        goto LABEL_4;
      }
    }
    float v11 = *(float *)(a1 + 15352);
    if (v11 >= v12)
    {
      int v3 = 0;
      goto LABEL_5;
    }
    float32x4_t v9 = *(float **)(a1 + 29032);
  }
  float v15 = v9[16];
  if (v15 < v9[18]) {
    float v15 = v9[18];
  }
  int v3 = v11 < v15;
LABEL_5:
  if (*v1 == v3) {
    return 0;
  }
  __int16 v5 = (unsigned char *)(a1 + 17700);
  *uint64_t v1 = v3;
  if ((*(unsigned char *)(a1 + 24864) & 9) != 0 || *(unsigned char *)(a1 + 24756))
  {
    int v6 = *(unsigned __int8 *)(a1 + 24750);
  }
  else if (*(unsigned char *)(a1 + 15379))
  {
    int v6 = 1;
  }
  else
  {
    int v6 = v3;
  }
  if (v6 == *v5)
  {
    int v7 = *(_DWORD *)(a1 + 1548);
  }
  else
  {
    *__int16 v5 = v6;
    *(_DWORD *)(a1 + 1532) |= 0x40000000u;
    int v7 = *(_DWORD *)(a1 + 1548) | 0x10000000;
  }
  *(_DWORD *)(a1 + 28652) = 0;
  *(_DWORD *)(a1 + 1548) = v7 | 0x18008;
  return 1;
}

uint64_t glPointParameterf_Exec(uint64_t result, int a2, float a3)
{
  uint64_t v3 = result;
  float v4 = (__int16 *)(result + 29832);
  __int16 v5 = (unsigned __int16 *)(result + 15380);
  if (a2 <= 33063)
  {
    if (a2 == 33062)
    {
      if (a3 >= 0.0)
      {
        if (*(float *)(result + 15348) == a3) {
          return result;
        }
        *(float *)(result + 15348) = a3;
        float result = gleUpdatePointAttenuation(result);
        uint64_t v12 = *(void *)(v3 + 19248);
        if (v12)
        {
          unint64_t v13 = *(unsigned __int16 *)(v12 + 3788);
          if (v13 <= 0x3FF)
          {
            *(_DWORD *)(v3 + ((v13 >> 3) & 0x1FFC) + 1552) |= 1 << v13;
            *((_DWORD *)v5 + 3318) = 0;
            *(_DWORD *)(v3 + 1532) |= 0x800000u;
          }
        }
        uint64_t v14 = *(void *)(v3 + 19272);
        if (!v14) {
          goto LABEL_34;
        }
        unint64_t v15 = *(unsigned __int16 *)(v14 + 3788);
        if (v15 > 0x3FF) {
          goto LABEL_34;
        }
        *(_DWORD *)(v3 + ((v15 >> 3) & 0x1FFC) + 1936) |= 1 << v15;
        goto LABEL_33;
      }
    }
    else
    {
      if (a2 != 33063) {
        goto LABEL_43;
      }
      if (a3 >= 0.0)
      {
        if (*(float *)(result + 15352) == a3) {
          return result;
        }
        *(float *)(result + 15352) = a3;
        *(unsigned char *)(result + 32504) = 1;
        float result = gleUpdatePointAttenuation(result);
LABEL_16:
        uint64_t v7 = *(void *)(v3 + 19248);
        if (v7)
        {
          unint64_t v8 = *(unsigned __int16 *)(v7 + 3788);
          if (v8 <= 0x3FF)
          {
            *(_DWORD *)(v3 + ((v8 >> 3) & 0x1FFC) + 1552) |= 1 << v8;
            *(_DWORD *)(v3 + 1532) |= 0x800000u;
          }
        }
        uint64_t v9 = *(void *)(v3 + 19272);
        if (!v9) {
          goto LABEL_34;
        }
        unint64_t v10 = *(unsigned __int16 *)(v9 + 3788);
        if (v10 > 0x3FF) {
          goto LABEL_34;
        }
        *(_DWORD *)(v3 + ((v10 >> 3) & 0x1FFC) + 1936) |= 1 << v10;
        *((_DWORD *)v5 + 3318) = 0;
LABEL_33:
        *(_DWORD *)(v3 + 1532) |= 0x4000000u;
LABEL_34:
        uint64_t v16 = *(void *)(v3 + 19280);
        if (v16)
        {
          unint64_t v17 = *(unsigned __int16 *)(v16 + 3788);
          if (v17 <= 0x3FF)
          {
            *(_DWORD *)(v3 + ((v17 >> 3) & 0x1FFC) + 2064) |= 1 << v17;
            *(_DWORD *)(v3 + 1532) |= 0x8000000u;
          }
        }
LABEL_37:
        *((_DWORD *)v5 + 3318) = 0;
        *(_DWORD *)(v3 + 1520) |= 0x400000u;
        return result;
      }
    }
  }
  else
  {
    if (a2 != 33064)
    {
      if (a2 == 34915)
      {
        unsigned int v11 = a3;
        if (!a3 || (v11 != 0x2000 ? (BOOL v18 = v11 == 8194) : (BOOL v18 = 1), v18))
        {
          if (*(unsigned __int16 *)(result + 15382) == v11) {
            return result;
          }
          *(_WORD *)(result + 15382) = v11;
          goto LABEL_37;
        }
      }
      else if (a2 == 36000)
      {
        unsigned int v6 = a3;
        if (a3 - 36001 < 2)
        {
          if (*v5 == v6) {
            return result;
          }
          *__int16 v5 = v6;
          goto LABEL_37;
        }
      }
LABEL_43:
      if (!*v4)
      {
        __int16 v19 = 1280;
LABEL_45:
        *float v4 = v19;
        return result;
      }
      return result;
    }
    if (a3 >= 0.0)
    {
      if (*(float *)(result + 15356) == a3) {
        return result;
      }
      *(float *)(result + 15356) = a3;
      goto LABEL_16;
    }
  }
  if (!*v4)
  {
    __int16 v19 = 1281;
    goto LABEL_45;
  }
  return result;
}

uint64_t glPointParameterx_Exec(uint64_t a1, int a2, int a3)
{
  return glPointParameterf_Exec(a1, a2, (float)a3 * 0.000015259);
}

float *glPointParameterx_PackThread(uint64_t a1, int a2, int a3)
{
  float v4 = (float)a3 * 0.000015259;
  float result = (float *)gleAddCommand(a1, (uint64_t)glPointParameterf_ListExec, 8);
  *(_DWORD *)float result = a2;
  result[1] = v4;
  return result;
}

float *glPointParameterf_Comp(uint64_t a1, int a2, float a3)
{
  float result = (float *)gleAddCommand(a1, (uint64_t)glPointParameterf_ListExec, 8);
  *(_DWORD *)float result = a2;
  result[1] = a3;
  return result;
}

uint64_t glPointParameterf_ListExec(uint64_t a1, uint64_t a2)
{
  return 8;
}

uint64_t glPointParameterfv_Exec(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3 = result;
  float v4 = (__int16 *)(result + 29832);
  __int16 v5 = (unsigned __int16 *)(result + 15380);
  switch(a2)
  {
    case 33062:
      float v6 = *(float *)a3;
      if (*(float *)a3 < 0.0) {
        goto LABEL_45;
      }
      if (*(float *)(result + 15348) != v6)
      {
        *(float *)(result + 15348) = v6;
        float result = gleUpdatePointAttenuation(result);
        uint64_t v7 = *(void *)(v3 + 19248);
        if (v7)
        {
          unint64_t v8 = *(unsigned __int16 *)(v7 + 3788);
          if (v8 <= 0x3FF)
          {
            *(_DWORD *)(v3 + ((v8 >> 3) & 0x1FFC) + 1552) |= 1 << v8;
            *((_DWORD *)v5 + 3318) = 0;
            *(_DWORD *)(v3 + 1532) |= 0x800000u;
          }
        }
        uint64_t v9 = *(void *)(v3 + 19272);
        if (v9)
        {
          unint64_t v10 = *(unsigned __int16 *)(v9 + 3788);
          if (v10 <= 0x3FF)
          {
            *(_DWORD *)(v3 + ((v10 >> 3) & 0x1FFC) + 1936) |= 1 << v10;
            goto LABEL_27;
          }
        }
        goto LABEL_28;
      }
      return result;
    case 33063:
      float v12 = *(float *)a3;
      if (*(float *)a3 < 0.0) {
        goto LABEL_45;
      }
      if (*(float *)(result + 15352) != v12)
      {
        *(float *)(result + 15352) = v12;
        *(unsigned char *)(result + 32504) = 1;
        float result = gleUpdatePointAttenuation(result);
        goto LABEL_21;
      }
      return result;
    case 33064:
      float v13 = *(float *)a3;
      if (*(float *)a3 < 0.0)
      {
LABEL_45:
        if (!*v4)
        {
          __int16 v26 = 1281;
          goto LABEL_53;
        }
      }
      else if (*(float *)(result + 15356) != v13)
      {
        *(float *)(result + 15356) = v13;
LABEL_21:
        uint64_t v14 = *(void *)(v3 + 19248);
        if (v14)
        {
          unint64_t v15 = *(unsigned __int16 *)(v14 + 3788);
          if (v15 <= 0x3FF)
          {
            *(_DWORD *)(v3 + ((v15 >> 3) & 0x1FFC) + 1552) |= 1 << v15;
            *(_DWORD *)(v3 + 1532) |= 0x800000u;
          }
        }
        uint64_t v16 = *(void *)(v3 + 19272);
        if (v16)
        {
          unint64_t v17 = *(unsigned __int16 *)(v16 + 3788);
          if (v17 <= 0x3FF)
          {
            *(_DWORD *)(v3 + ((v17 >> 3) & 0x1FFC) + 1936) |= 1 << v17;
            *((_DWORD *)v5 + 3318) = 0;
LABEL_27:
            *(_DWORD *)(v3 + 1532) |= 0x4000000u;
          }
        }
LABEL_28:
        uint64_t v18 = *(void *)(v3 + 19280);
        if (v18)
        {
          unint64_t v19 = *(unsigned __int16 *)(v18 + 3788);
          goto LABEL_38;
        }
        goto LABEL_43;
      }
      return result;
    case 33065:
      *(_DWORD *)(result + 15360) = *(_DWORD *)a3;
      *(_DWORD *)(result + 15364) = *(_DWORD *)(a3 + 4);
      *(_DWORD *)(result + 15368) = *(_DWORD *)(a3 + 8);
      float result = gleUpdatePointAttenuation(result);
      uint64_t v20 = *(void *)(v3 + 19248);
      if (v20)
      {
        unint64_t v21 = *(unsigned __int16 *)(v20 + 3790);
        if (v21 <= 0x3FF)
        {
          *(_DWORD *)(v3 + ((v21 >> 3) & 0x1FFC) + 1552) |= 1 << v21;
          *(_DWORD *)(v3 + 1532) |= 0x800000u;
        }
      }
      uint64_t v22 = *(void *)(v3 + 19272);
      if (v22)
      {
        unint64_t v23 = *(unsigned __int16 *)(v22 + 3790);
        if (v23 <= 0x3FF)
        {
          *(_DWORD *)(v3 + ((v23 >> 3) & 0x1FFC) + 1936) |= 1 << v23;
          *((_DWORD *)v5 + 3318) = 0;
          *(_DWORD *)(v3 + 1532) |= 0x4000000u;
        }
      }
      uint64_t v24 = *(void *)(v3 + 19280);
      if (v24)
      {
        unint64_t v19 = *(unsigned __int16 *)(v24 + 3790);
LABEL_38:
        if (v19 <= 0x3FF)
        {
          *(_DWORD *)(v3 + ((v19 >> 3) & 0x1FFC) + 2064) |= 1 << v19;
          *(_DWORD *)(v3 + 1532) |= 0x8000000u;
        }
      }
      goto LABEL_43;
    default:
      if (a2 == 34915)
      {
        unsigned int v25 = *(float *)a3;
        if (!v25 || (v25 != 0x2000 ? (BOOL v27 = v25 == 8194) : (BOOL v27 = 1), v27))
        {
          if (*(unsigned __int16 *)(result + 15382) == v25) {
            return result;
          }
          *(_WORD *)(result + 15382) = v25;
          goto LABEL_43;
        }
      }
      else if (a2 == 36000)
      {
        unsigned int v11 = *(float *)a3;
        if (v11 - 36001 < 2)
        {
          if (*v5 == v11) {
            return result;
          }
          *__int16 v5 = v11;
LABEL_43:
          *((_DWORD *)v5 + 3318) = 0;
          *(_DWORD *)(v3 + 1520) |= 0x400000u;
          return result;
        }
      }
      if (!*v4)
      {
        __int16 v26 = 1280;
LABEL_53:
        *float v4 = v26;
      }
      return result;
  }
}

uint64_t glPointParameterxv_Exec(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  float v4 = (float)*(int *)a3 * 0.000015259;
  if (a2 == 33065) {
    float32x2_t v5 = vmul_f32(vcvt_f32_s32(*(int32x2_t *)(a3 + 4)), (float32x2_t)vdup_n_s32(0x37800000u));
  }
  return glPointParameterfv_Exec(a1, a2, (uint64_t)&v4);
}

_DWORD *glPointParameterxv_PackThread(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  float v4 = (float)*(int *)a3 * 0.000015259;
  if (a2 == 33065) {
    float32x2_t v5 = vmul_f32(vcvt_f32_s32(*(int32x2_t *)(a3 + 4)), (float32x2_t)vdup_n_s32(0x37800000u));
  }
  return glPointParameterfv_Comp(a1, a2, (int *)&v4);
}

_DWORD *glPointParameterfv_Comp(uint64_t a1, int a2, int *a3)
{
  if (a2 == 33065) {
    uint64_t v5 = 3;
  }
  else {
    uint64_t v5 = 1;
  }
  uint64_t v6 = gleAddCommand(a1, (uint64_t)glPointParameterfv_ListExec, (4 * v5 + 4));
  *(_DWORD *)uint64_t v6 = a2;
  float result = (_DWORD *)v6 + 1;
  do
  {
    int v8 = *a3++;
    *result++ = v8;
    --v5;
  }
  while (v5);
  return result;
}

uint64_t glPointParameterfv_ListExec(uint64_t a1, int *a2)
{
  int v2 = *a2;
  glPointParameterfv_Exec(a1, *a2, (uint64_t)(a2 + 1));
  if (v2 == 33065) {
    return 16;
  }
  else {
    return 8;
  }
}

float *glPointSize_Comp(uint64_t a1, float a2)
{
  float result = (float *)gleAddCommand(a1, (uint64_t)glPointSize_ListExec, 4);
  *float result = a2;
  return result;
}

uint64_t glPointSize_ListExec(uint64_t a1, float *a2)
{
  return 4;
}

uint64_t glPointSizex_Exec(uint64_t a1, int a2)
{
  return glPointSize_Exec(a1, (float)a2 * 0.000015259);
}

float *glPointSizex_PackThread(uint64_t a1, int a2)
{
  float v2 = (float)a2 * 0.000015259;
  float result = (float *)gleAddCommand(a1, (uint64_t)glPointSize_ListExec, 4);
  *float result = v2;
  return result;
}

float *glPolygonOffset_Comp(uint64_t a1, float a2, float a3)
{
  float result = (float *)gleAddCommand(a1, (uint64_t)glPolygonOffset_ListExec, 8);
  *float result = a2;
  result[1] = a3;
  return result;
}

uint64_t glPolygonOffset_ListExec(uint64_t a1, void *a2)
{
  *(void *)(a1 + 15516) = *a2;
  *(_DWORD *)(a1 + 28652) = 0;
  *(_DWORD *)(a1 + 1520) |= 0x800000u;
  return 8;
}

float glPolygonOffsetx_Exec(uint64_t a1, int a2, int a3)
{
  float result = (float)a2 * 0.000015259;
  *(float *)(a1 + 15516) = result;
  *(float *)(a1 + 15520) = (float)a3 * 0.000015259;
  *(_DWORD *)(a1 + 28652) = 0;
  *(_DWORD *)(a1 + 1520) |= 0x800000u;
  return result;
}

float32x2_t glPolygonOffsetx_PackThread(uint64_t a1, unsigned int a2, unsigned int a3)
{
  float32x2_t v3 = vcvt_f32_s32((int32x2_t)__PAIR64__(a3, a2));
  float v4 = (float32x2_t *)gleAddCommand(a1, (uint64_t)glPolygonOffset_ListExec, 8);
  float32x2_t result = vmul_f32(v3, (float32x2_t)vdup_n_s32(0x37800000u));
  *float v4 = result;
  return result;
}

void glGetProgramBinary_Exec(uint64_t a1, unsigned int a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  if (gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2))
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    float v4 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v5 = 1282;
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    float v4 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v5 = 1281;
  }
  *float v4 = v5;
}

void glProgramBinary_Exec(uint64_t a1, unsigned int a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  float v4 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
  if (v4)
  {
    int v5 = *((_DWORD *)v4 + 6);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    uint64_t v6 = (__int16 *)(a1 + 29832);
    if (v5 == 8)
    {
      if (*(_WORD *)(a1 + 29832)) {
        return;
      }
      __int16 v7 = 1280;
    }
    else
    {
      if (*(_WORD *)(a1 + 29832)) {
        return;
      }
      __int16 v7 = 1282;
    }
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    uint64_t v6 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v7 = 1281;
  }
  __int16 *v6 = v7;
}

void glGetProgramBinary_ExecThread(uint64_t a1, unsigned int a2)
{
  (*(void (**)(void))(a1 + 27752))();

  glGetProgramBinary_Exec(a1, a2);
}

void glProgramBinary_ExecThread(uint64_t a1, unsigned int a2)
{
  (*(void (**)(void))(a1 + 27752))();

  glProgramBinary_Exec(a1, a2);
}

void glUseProgramStages_Exec(uint64_t *a1, unsigned int a2, int a3, unsigned int a4)
{
  int v8 = a1 + 3729;
  os_unfair_lock_lock((os_unfair_lock_t)(a1[2412] + 324));
  uint64_t ProgramPipelineHashObject = gleLookupHashObject(a1[2412] + 136, a2);
  if (!ProgramPipelineHashObject
    && (!gleIsHashName(a1[2412] + 136, a2)
     || (uint64_t ProgramPipelineHashObject = gleCreateProgramPipelineHashObject((uint64_t)a1, a2)) == 0))
  {
LABEL_13:
    if (!*(_WORD *)v8)
    {
      __int16 v14 = 1282;
LABEL_17:
      *(_WORD *)int v8 = v14;
      goto LABEL_37;
    }
    goto LABEL_37;
  }
  if ((a3 + 1) >= 5) {
    goto LABEL_15;
  }
  uint64_t v10 = a1[3304];
  if (*(__int16 *)(v10 + 42) == -1 || *(unsigned char *)(v10 + 41))
  {
    if (!a4)
    {
      float v13 = 0;
      float v12 = 0;
      goto LABEL_19;
    }
    unsigned int v11 = gleLookupHashObject(a1[2412] + 168, a4);
    if (v11)
    {
      float v12 = v11;
      if (*((_DWORD *)v11 + 6) == 8)
      {
        if (*((unsigned char *)v11 + 3976) != 1 || !*((unsigned char *)v11 + 3981)) {
          goto LABEL_13;
        }
        float v13 = v11 + 5;
LABEL_19:
        uint64_t v15 = 0;
        uint64_t v16 = (char *)(ProgramPipelineHashObject + 10);
        ProgramPipelineHashObject[26] |= 1u;
        do
        {
          if ((dword_227DC1540[2 * v15] & a3) != 0)
          {
            uint64_t v17 = dword_227DC1540[2 * v15 + 1];
            uint64_t v18 = *(void *)&v16[8 * v17];
            *(void *)&v16[8 * v17] = v12;
            if (v12) {
              ++*((_DWORD *)v12 + 5);
            }
            if (ProgramPipelineHashObject == (_DWORD *)a1[3097] && !a1[3096])
            {
              uint64_t v19 = *((unsigned __int8 *)v8 + 2664);
              if (*((unsigned char *)v8 + 2664))
              {
                uint64_t v20 = &a1[v17 + 4188];
                unint64_t v21 = v13;
                do
                {
                  if (v13) {
                    uint64_t v22 = *v21;
                  }
                  else {
                    uint64_t v22 = 0;
                  }
                  uint64_t *v20 = v22;
                  v20 += 209;
                  ++v21;
                  --v19;
                }
                while (v19);
              }
            }
            if (v18)
            {
              int v23 = *(_DWORD *)(v18 + 20) - 1;
              *(_DWORD *)(v18 + 20) = v23;
              if (v23 == 1) {
                gleDeleteHashNameAndObject(a1[2412], (void (**)(uint64_t, uint64_t))(a1[2412] + 168), *(_DWORD *)(v18 + 16));
              }
            }
          }
          ++v15;
        }
        while (v15 != 5);
        if (ProgramPipelineHashObject == (_DWORD *)a1[3097]) {
          gleBindProgramPipelineObject((uint64_t)a1, (uint64_t)ProgramPipelineHashObject);
        }
        goto LABEL_37;
      }
    }
LABEL_15:
    if (!*(_WORD *)v8)
    {
      __int16 v14 = 1281;
      goto LABEL_17;
    }
LABEL_37:
    uint64_t v24 = (os_unfair_lock_s *)(a1[2412] + 324);
    os_unfair_lock_unlock(v24);
    return;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1[2412] + 324));
  if (!*(_WORD *)v8) {
    *(_WORD *)int v8 = 1282;
  }
}

void glActiveShaderProgram_Exec(uint64_t a1, unsigned int a2, unsigned int a3)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t ProgramPipelineHashObject = gleLookupHashObject(*(void *)(a1 + 19296) + 136, a2);
  if (!ProgramPipelineHashObject
    && (!gleIsHashName(*(void *)(a1 + 19296) + 136, a2)
     || (uint64_t ProgramPipelineHashObject = gleCreateProgramPipelineHashObject(a1, a2)) == 0))
  {
LABEL_8:
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
    goto LABEL_14;
  }
  uint64_t v7 = ProgramPipelineHashObject[10];
  if (a3)
  {
    int v8 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a3);
    if (!v8 || *((unsigned char *)v8 + 3976) != 1) {
      goto LABEL_8;
    }
    ++*((_DWORD *)v8 + 5);
  }
  else
  {
    int v8 = 0;
  }
  ProgramPipelineHashObject[10] = v8;
  if (v7)
  {
    int v9 = *(_DWORD *)(v7 + 20) - 1;
    *(_DWORD *)(v7 + 20) = v9;
    if (v9 == 1) {
      gleDeleteHashNameAndObject(*(void *)(a1 + 19296), (void (**)(uint64_t, uint64_t))(*(void *)(a1 + 19296) + 168), *(_DWORD *)(v7 + 16));
    }
  }
LABEL_14:
  uint64_t v10 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);

  os_unfair_lock_unlock(v10);
}

uint64_t glCreateShaderProgramv_Exec(size_t a1, int a2, int a3, const void **a4)
{
  uint64_t ShaderObjectARB_Exec = glCreateShaderObjectARB_Exec(a1, a2);
  if (!ShaderObjectARB_Exec) {
    return 0;
  }
  uint64_t v8 = ShaderObjectARB_Exec;
  glShaderSourceARB_Exec(a1, ShaderObjectARB_Exec, a3, a4, 0);
  glCompileShaderARB_Exec(a1, v8);
  uint64_t ProgramObjectARB_Exec = glCreateProgramObjectARB_Exec(a1);
  if (ProgramObjectARB_Exec)
  {
    int v13 = 0;
    glGetShaderiv_Exec(a1, v8, 35713, &v13);
    glProgramParameteriEXT_Exec(a1, ProgramObjectARB_Exec, 33368, 1);
    if (v13)
    {
      glAttachObjectARB_Exec(a1, ProgramObjectARB_Exec, v8);
      glLinkProgramARB_Exec(a1, ProgramObjectARB_Exec);
      glDetachObjectARB_Exec(a1, ProgramObjectARB_Exec, v8);
    }
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    uint64_t v10 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, ProgramObjectARB_Exec);
    unsigned int v11 = (const char *)gleLookupHashObject(*(void *)(a1 + 19296) + 168, v8)[5];
    if (v11) {
      gleAppendStringToInfoLog(v11, (const void **)v10 + 17, (_DWORD *)v10 + 981);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  glDeleteObjectARB_Exec(a1, v8);
  return ProgramObjectARB_Exec;
}

void glBindProgramPipeline_Exec(uint64_t a1, unsigned int a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  if (a2)
  {
    uint64_t ProgramPipelineHashObject = gleLookupHashObject(*(void *)(a1 + 19296) + 136, a2);
    if (!ProgramPipelineHashObject
      && (!gleIsHashName(*(void *)(a1 + 19296) + 136, a2)
       || (uint64_t ProgramPipelineHashObject = gleCreateProgramPipelineHashObject(a1, a2)) == 0)
      || ProgramPipelineHashObject[6] != 6
      || (uint64_t v5 = *(void *)(a1 + 26432), *(__int16 *)(v5 + 42) != -1) && !*(unsigned char *)(v5 + 41))
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
      if (!*(_WORD *)(a1 + 29832)) {
        *(_WORD *)(a1 + 29832) = 1282;
      }
      return;
    }
  }
  else
  {
    uint64_t ProgramPipelineHashObject = 0;
  }
  gleBindProgramPipelineObject(a1, (uint64_t)ProgramPipelineHashObject);
  uint64_t v6 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);

  os_unfair_lock_unlock(v6);
}

void glDeleteProgramPipelines_Exec(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  gleDeleteProgramPipelines(a1, a2, a3);
  uint64_t v6 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);

  os_unfair_lock_unlock(v6);
}

void glGenProgramPipelines_Exec(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  gleGenProgramPipelines(a1, a2, a3);
  uint64_t v6 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);

  os_unfair_lock_unlock(v6);
}

BOOL glIsProgramPipeline_Exec(uint64_t a1, unsigned int a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  float v4 = gleLookupHashObject(*(void *)(a1 + 19296) + 136, a2);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  return v4 != 0;
}

void glGetProgramPipelineiv_Exec(uint64_t a1, unsigned int a2, int a3, _DWORD *a4)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t ProgramPipelineHashObject = gleLookupHashObject(*(void *)(a1 + 19296) + 136, a2);
  if (!ProgramPipelineHashObject
    && (!gleIsHashName(*(void *)(a1 + 19296) + 136, a2)
     || (uint64_t ProgramPipelineHashObject = gleCreateProgramPipelineHashObject(a1, a2)) == 0))
  {
    uint64_t v10 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      goto LABEL_21;
    }
    __int16 v11 = 1282;
    goto LABEL_26;
  }
  if (a3 <= 35632)
  {
    if (a3 == 33369)
    {
      uint64_t v9 = ProgramPipelineHashObject[10];
      if (!v9) {
        goto LABEL_20;
      }
    }
    else
    {
      if (a3 != 35632) {
        goto LABEL_24;
      }
      uint64_t v9 = ProgramPipelineHashObject[9];
      if (!v9) {
        goto LABEL_20;
      }
    }
LABEL_19:
    LODWORD(v9) = *(_DWORD *)(v9 + 16);
    goto LABEL_20;
  }
  switch(a3)
  {
    case 35633:
      uint64_t v9 = ProgramPipelineHashObject[5];
      if (!v9) {
        goto LABEL_20;
      }
      goto LABEL_19;
    case 35715:
      LODWORD(v9) = *((unsigned __int8 *)ProgramPipelineHashObject + 100);
      goto LABEL_20;
    case 35716:
      LODWORD(v9) = *((_DWORD *)ProgramPipelineHashObject + 24);
LABEL_20:
      *a4 = v9;
      goto LABEL_21;
  }
LABEL_24:
  uint64_t v10 = (__int16 *)(a1 + 29832);
  if (*(_WORD *)(a1 + 29832)) {
    goto LABEL_21;
  }
  __int16 v11 = 1280;
LABEL_26:
  *uint64_t v10 = v11;
LABEL_21:
  float v12 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);

  os_unfair_lock_unlock(v12);
}

void glValidateProgramPipeline_Exec(unint64_t a1, unsigned int a2)
{
  unint64_t v4 = a1 + 29832;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t ProgramPipelineHashObject = gleLookupHashObject(*(void *)(a1 + 19296) + 136, a2);
  if (!ProgramPipelineHashObject
    && (!gleIsHashName(*(void *)(a1 + 19296) + 136, a2)
     || (uint64_t ProgramPipelineHashObject = gleCreateProgramPipelineHashObject(a1, a2)) == 0))
  {
    if (!*(_WORD *)v4) {
      *(_WORD *)unint64_t v4 = 1282;
    }
    goto LABEL_53;
  }
  *((unsigned char *)ProgramPipelineHashObject + 100) = 0;
  uint64_t v9 = *(_DWORD **)(a1 + 24768);
  if (v9)
  {
    ++v9[5];
    gleUseProgramObject(a1, 0);
  }
  uint64_t v10 = *(void *)(a1 + 24776);
  if (ProgramPipelineHashObject != (void *)v10)
  {
    if (v10) {
      ++*(_DWORD *)(v10 + 20);
    }
    gleBindProgramPipelineObject(a1, (uint64_t)ProgramPipelineHashObject);
  }
  int v11 = *(unsigned __int8 *)(v4 + 2669);
  if ((*(unsigned char *)(a1 + 28655) & 8) != 0 && *(char *)(a1 + 28681) < 0 && *(char *)(a1 + 28683) < 0)
  {
    int v13 = 0;
  }
  else
  {
    if ((v11 - 3) >= 2)
    {
      if (v11 == 1) {
        int v12 = gleDoSelectiveDispatchNoErrorCoreGL3(a1, 0x8000000u, 0x80u, 0x80u, 0xF8000000, v6.n128_f64[0], v7, v8);
      }
      else {
        int v12 = gleDoSelectiveDispatchNoErrorCore(a1, 0x8000000u, 0x80u, 0x80u, 0xF8000000, v6, v7, v8);
      }
    }
    else
    {
      int v12 = gleDoSelectiveDispatchNoErrorCoreES2(a1, 0x8000000u, 0x80u, 0x80u, 0xF8000000, v6.n128_f64[0], v7, v8);
    }
    int v13 = v12;
  }
  __int16 v14 = (void *)*((void *)ProgramPipelineHashObject + 11);
  if (v14) {
    free(v14);
  }
  *((_DWORD *)ProgramPipelineHashObject + 24) = 0;
  *((void *)ProgramPipelineHashObject + 11) = 0;
  if (*(unsigned char *)(v4 + 2650))
  {
    gleAppendStringToInfoLog("Validation Failed: Fragment program failed to compile with current context state.\n", (const void **)ProgramPipelineHashObject + 11, (_DWORD *)ProgramPipelineHashObject + 24);
    *(unsigned char *)(v4 + 2652) = 0;
  }
  if (!*(unsigned char *)(v4 + 2649) && *(unsigned char *)(*(void *)(a1 + 29032) + 101))
  {
    gleAppendStringToInfoLog("Validation Failed: Vertex program failed to compile with current context state.\n", (const void **)ProgramPipelineHashObject + 11, (_DWORD *)ProgramPipelineHashObject + 24);
    *(unsigned char *)(v4 + 2652) = 0;
  }
  if (*(unsigned char *)(v4 + 2654) && (*(void *)(a1 + 29008) || *(void *)(a1 + 28960)))
  {
    if (*(unsigned char *)(v4 + 2652) && !v13)
    {
      *((unsigned char *)ProgramPipelineHashObject + 100) = 1;
      goto LABEL_48;
    }
    *((unsigned char *)ProgramPipelineHashObject + 100) = 0;
    if (*((unsigned char *)ProgramPipelineHashObject + 101))
    {
      uint64_t v16 = *((void *)ProgramPipelineHashObject + 5);
      if (v16 && (*(unsigned char *)(v16 + 3720) & 1) != 0)
      {
        uint64_t v17 = *((void *)ProgramPipelineHashObject + 9);
        if (v17 && (*(unsigned char *)(v17 + 3720) & 2) != 0 || *(unsigned char *)(a1 + 17984))
        {
          if (!v13) {
            goto LABEL_48;
          }
          uint64_t v15 = "Validation Failed\n";
        }
        else
        {
          uint64_t v15 = "Validation Failed: Program does not contain fragment shader. Results will be undefined.\n";
        }
      }
      else
      {
        uint64_t v15 = "Validation Failed: Program does not contain vertex shader. Results will be undefined.\n";
      }
    }
    else
    {
      uint64_t v15 = "Validation Failed: Sampler error:\n"
            "  Samplers of different types use the same texture image unit.\n"
            "   - or -\n"
            "  A sampler's texture unit is out of range (greater than max allowed or negative).\n";
    }
  }
  else
  {
    *((unsigned char *)ProgramPipelineHashObject + 100) = 0;
    uint64_t v15 = "Validation Failed: Current draw framebuffer is invalid.\n";
  }
  gleAppendStringToInfoLog(v15, (const void **)ProgramPipelineHashObject + 11, (_DWORD *)ProgramPipelineHashObject + 24);
LABEL_48:
  if (ProgramPipelineHashObject != (void *)v10)
  {
    gleBindProgramPipelineObject(a1, v10);
    if (v10) {
      --*(_DWORD *)(v10 + 20);
    }
  }
  if (v9)
  {
    gleUseProgramObject(a1, v9);
    --v9[5];
  }
LABEL_53:
  uint64_t v18 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);

  os_unfair_lock_unlock(v18);
}

void glGetProgramPipelineInfoLog_Exec(uint64_t a1, unsigned int a2, int a3, _DWORD *a4, void *a5)
{
  if (a3 < 0)
  {
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1281;
    }
  }
  else
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    uint64_t ProgramPipelineHashObject = gleLookupHashObject(*(void *)(a1 + 19296) + 136, a2);
    if (ProgramPipelineHashObject
      || gleIsHashName(*(void *)(a1 + 19296) + 136, a2)
      && (uint64_t ProgramPipelineHashObject = gleCreateProgramPipelineHashObject(a1, a2)) != 0)
    {
      gleGetString(*((const void **)ProgramPipelineHashObject + 11), *((_DWORD *)ProgramPipelineHashObject + 24), a3, a4, a5);
    }
    else if (!*(_WORD *)(a1 + 29832))
    {
      *(_WORD *)(a1 + 29832) = 1282;
    }
    int v11 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
    os_unfair_lock_unlock(v11);
  }
}

_DWORD *glUseProgramStages_PackThread(uint64_t a1, int a2, int a3, int a4)
{
  float32x2_t result = gleAddCommand(a1, (uint64_t)glUseProgramStages_UnpackThread, 12);
  *float32x2_t result = a2;
  result[1] = a3;
  result[2] = a4;
  return result;
}

uint64_t glUseProgramStages_UnpackThread(uint64_t *a1, uint64_t a2)
{
  return 12;
}

_DWORD *glActiveShaderProgram_PackThread(uint64_t a1, int a2, int a3)
{
  float32x2_t result = gleAddCommand(a1, (uint64_t)glActiveShaderProgram_UnpackThread, 8);
  *float32x2_t result = a2;
  result[1] = a3;
  return result;
}

uint64_t glActiveShaderProgram_UnpackThread(uint64_t a1, unsigned int *a2)
{
  return 8;
}

uint64_t glCreateShaderProgramv_ExecThread(size_t a1, int a2, int a3, const void **a4)
{
  (*(void (**)(void))(a1 + 27752))();

  return glCreateShaderProgramv_Exec(a1, a2, a3, a4);
}

void *glBindProgramPipeline_PackThread(uint64_t a1, int a2)
{
  float32x2_t result = gleAddCommand(a1, (uint64_t)glBindProgramPipeline_UnpackThread, 4);
  *(_DWORD *)float32x2_t result = a2;
  return result;
}

uint64_t glBindProgramPipeline_UnpackThread(uint64_t a1, unsigned int *a2)
{
  return 4;
}

void glDeleteProgramPipelines_ExecThread(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  (*(void (**)(void))(a1 + 27752))();

  glDeleteProgramPipelines_Exec(a1, a2, a3);
}

void glGenProgramPipelines_ExecThread(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  (*(void (**)(void))(a1 + 27752))();

  glGenProgramPipelines_Exec(a1, a2, a3);
}

BOOL glIsProgramPipeline_ExecThread(uint64_t a1, unsigned int a2)
{
  (*(void (**)(void))(a1 + 27752))();

  return glIsProgramPipeline_Exec(a1, a2);
}

void glGetProgramPipelineiv_ExecThread(uint64_t a1, unsigned int a2, int a3, _DWORD *a4)
{
  (*(void (**)(void))(a1 + 27752))();

  glGetProgramPipelineiv_Exec(a1, a2, a3, a4);
}

void *glValidateProgramPipeline_PackThread(uint64_t a1, int a2)
{
  float32x2_t result = gleAddCommand(a1, (uint64_t)glValidateProgramPipeline_UnpackThread, 4);
  *(_DWORD *)float32x2_t result = a2;
  return result;
}

uint64_t glValidateProgramPipeline_UnpackThread(unint64_t a1, unsigned int *a2)
{
  return 4;
}

void glGetProgramPipelineInfoLog_ExecThread(uint64_t a1, unsigned int a2, int a3, _DWORD *a4, void *a5)
{
  (*(void (**)(void))(a1 + 27752))();

  glGetProgramPipelineInfoLog_Exec(a1, a2, a3, a4, a5);
}

void *glReadBuffer_Comp(uint64_t a1, int a2)
{
  float32x2_t result = gleAddCommand(a1, (uint64_t)glReadBuffer_ListExec, 4);
  *(_DWORD *)float32x2_t result = a2;
  return result;
}

uint64_t glReadBuffer_ListExec(uint64_t a1, unsigned int *a2)
{
  return 4;
}

uint64_t gleInternalFormatIsSigned(int a1)
{
  if ((a1 - 34836) < 0xC || (a1 - 33325) < 4) {
    return 1;
  }
  if ((a1 - 36226) >= 0x12) {
    int v3 = ((a1 - 33329) < 0xB) & a1;
  }
  else {
    int v3 = 1;
  }
  if (a1 == 36286) {
    int v4 = 1;
  }
  else {
    int v4 = v3;
  }
  if (a1 == 36284) {
    unsigned int v5 = 1;
  }
  else {
    unsigned int v5 = v4;
  }
  if ((a1 - 36756) >= 8) {
    return v5;
  }
  else {
    return 1;
  }
}

void *glReadPixels_PackThread(unint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, int a7, uint64_t a8)
{
  if (*(void *)(a1 + 26480))
  {
    float32x2_t result = gleAddCommand(a1, (uint64_t)glReadPixels_UnpackThread, 32);
    *(_DWORD *)float32x2_t result = a2;
    *((_DWORD *)result + 1) = a3;
    *((_DWORD *)result + 2) = a4;
    *((_DWORD *)result + 3) = a5;
    *((_DWORD *)result + 4) = a6;
    *((_DWORD *)result + 5) = a7;
    result[3] = a8;
  }
  else
  {
    (*(void (**)(unint64_t))(a1 + 27752))(a1);
    return (void *)glReadPixels_Exec(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return result;
}

uint64_t glReadPixels_UnpackThread(unint64_t a1, uint64_t a2)
{
  return 32;
}

float glRotateXYZ_Comp(uint64_t a1, float a2, float a3, float a4, float a5)
{
  float v9 = *(float *)(a1 + 292);
  uint64_t v10 = (float *)gleAddCommand(a1, (uint64_t)glRotateXYZ_ListExec, 36);
  __float2 v11 = __sincosf_stret(a2 * 0.017453);
  float v12 = v9 / sqrtf((float)((float)(a4 * a4) + (float)(a3 * a3)) + (float)(a5 * a5));
  float v13 = v12 * a3;
  float v14 = v12 * a4;
  float v15 = v12 * a5;
  float v16 = v13 * v13;
  float v17 = v14 * v14;
  float v18 = (float)(v9 - v11.__cosval) * (float)(v13 * v14);
  float v19 = (float)(v9 - v11.__cosval) * (float)(v14 * v15);
  float v20 = (float)(v9 - v11.__cosval) * (float)(v15 * v13);
  float v21 = v11.__sinval * v13;
  float v22 = v11.__sinval * v14;
  *uint64_t v10 = v16 + (float)(v11.__cosval * (float)(v9 - v16));
  v10[1] = (float)(v11.__sinval * v15) + v18;
  v10[2] = v20 - v22;
  v10[3] = v18 - (float)(v11.__sinval * v15);
  v10[4] = v17 + (float)(v11.__cosval * (float)(v9 - v17));
  v10[5] = v21 + v19;
  v10[6] = v22 + v20;
  v10[7] = v19 - v21;
  float result = (float)(v15 * v15) + (float)(v11.__cosval * (float)(v9 - (float)(v15 * v15)));
  v10[8] = result;
  return result;
}

uint64_t glRotateZ_Exec(uint64_t result, double a2, double a3)
{
  if (*(int *)(result + 20484) < 24)
  {
    int v3 = *(_DWORD *)(result + 20488);
    uint64_t v4 = *(void *)(result + 19976);
    float32x2_t v5 = (float32x2_t)vdupq_lane_s32(*(int32x2_t *)&a2, 0).u64[0];
    float32x4_t v6 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
    float32x4_t v8 = *(float32x4_t *)v4;
    float32x4_t v7 = *(float32x4_t *)(v4 + 16);
    *(float32x2_t *)uint64_t v4 = vmla_f32(vmul_f32(*(float32x2_t *)v7.f32, v5), *(float32x2_t *)v6.f32, *(float32x2_t *)v4);
    *(float32x2_t *)(v4 + 8) = vmla_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL), v5), *(float32x2_t *)v6.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL));
    *(float32x4_t *)(v4 + 16) = vmlaq_n_f32(vmulq_n_f32(vnegq_f32(v8), *(float *)&a2), v7, *(float *)&a3);
    *(_DWORD *)(result + 1528) |= v3;
    *(_DWORD *)(result + 1540) |= v3;
    int v9 = *(_DWORD *)(result + 1544);
    if ((v3 & ~v9 & *(_DWORD *)(result + 2216) & 0xFFFFFC) != 0)
    {
      uint64_t v10 = *(void *)(result + 19984);
      float32x4_t v12 = *(float32x4_t *)v10;
      float32x4_t v11 = *(float32x4_t *)(v10 + 16);
      *(float32x2_t *)uint64_t v10 = vmla_f32(vmul_f32(*(float32x2_t *)v11.f32, v5), *(float32x2_t *)v6.f32, *(float32x2_t *)v10);
      *(float32x2_t *)(v10 + 8) = vmla_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL), v5), *(float32x2_t *)v6.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL));
      *(float32x4_t *)(v10 + 16) = vmlaq_f32(vmulq_n_f32(vnegq_f32(v12), *(float *)&a2), v6, v11);
      v3 &= 0xFF000003;
    }
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1544) = v3 | v9;
  }
  else if (!*(_WORD *)(result + 29832))
  {
    *(_WORD *)(result + 29832) = 1282;
  }
  return result;
}

void glRotateXYZ_Exec(uint64_t a1, float a2, float a3, float a4, float a5)
{
  uint64_t v6 = a1 + 20484;
  if (*(int *)(a1 + 20484) < 24)
  {
    int v10 = *(_DWORD *)(a1 + 20488);
    float v11 = *(float *)(a1 + 292);
    float32x4_t v12 = *(float **)(a1 + 19976);
    __float2 v13 = __sincosf_stret(a2 * 0.017453);
    float v14 = v11 / sqrtf((float)((float)(a4 * a4) + (float)(a3 * a3)) + (float)(a5 * a5));
    float v15 = v14 * a3;
    float v16 = v14 * a4;
    float v17 = v14 * a5;
    float v18 = v16 * v16;
    float v19 = v17 * v17;
    float v20 = (float)(v11 - v13.__cosval) * (float)(v15 * v16);
    float v21 = (float)(v11 - v13.__cosval) * (float)(v16 * v17);
    float v22 = (float)(v11 - v13.__cosval) * (float)(v17 * v15);
    float v23 = v13.__sinval * v15;
    float v24 = v13.__sinval * v16;
    float v25 = v13.__sinval * v17;
    float v26 = (float)(v15 * v15) + (float)(v13.__cosval * (float)(v11 - (float)(v15 * v15)));
    float v27 = v25 + v20;
    float v28 = v22 - v24;
    float v29 = v20 - v25;
    float v30 = v18 + (float)(v13.__cosval * (float)(v11 - v18));
    float v31 = v23 + v21;
    float v32 = v24 + v22;
    float v33 = v21 - v23;
    float v34 = v19 + (float)(v13.__cosval * (float)(v11 - v19));
    float v35 = v12[4];
    float v36 = v12[5];
    float v37 = v12[1];
    float v38 = (float)(v35 * v30) + (float)(*v12 * v29);
    float v39 = v12[8];
    float v40 = v12[9];
    float v41 = (float)((float)(v35 * v27) + (float)(*v12 * v26)) + (float)(v39 * v28);
    float v42 = (float)((float)(v35 * v33) + (float)(*v12 * v32)) + (float)(v39 * v34);
    *float32x4_t v12 = v41;
    v12[1] = (float)((float)(v27 * v36) + (float)(v37 * v26)) + (float)(v40 * v28);
    v12[4] = v38 + (float)(v39 * v31);
    void v12[5] = (float)((float)(v30 * v36) + (float)(v37 * v29)) + (float)(v40 * v31);
    v12[8] = v42;
    v12[9] = (float)((float)(v33 * v36) + (float)(v37 * v32)) + (float)(v40 * v34);
    float v43 = v12[6];
    float v44 = v12[7];
    float v45 = v12[2];
    float v46 = v12[3];
    float v47 = (float)(v27 * v43) + (float)(v45 * v26);
    float v48 = (float)(v30 * v43) + (float)(v45 * v29);
    float v49 = (float)(v33 * v43) + (float)(v45 * v32);
    float v50 = v12[10];
    float v51 = v12[11];
    v12[2] = v47 + (float)(v50 * v28);
    v12[3] = (float)((float)(v27 * v44) + (float)(v46 * v26)) + (float)(v51 * v28);
    v12[6] = v48 + (float)(v50 * v31);
    v12[7] = (float)((float)(v30 * v44) + (float)(v46 * v29)) + (float)(v51 * v31);
    v12[10] = v49 + (float)(v50 * v34);
    v12[11] = (float)((float)(v33 * v44) + (float)(v46 * v32)) + (float)(v51 * v34);
    *(_DWORD *)(a1 + 1528) |= v10;
    *(_DWORD *)(a1 + 1540) |= v10;
    int v52 = *(_DWORD *)(a1 + 1544);
    if ((v10 & ~v52 & *(_DWORD *)(a1 + 2216) & 0xFFFFFC) != 0)
    {
      BOOL v53 = *(float **)(a1 + 19984);
      float v54 = v53[4];
      float v55 = v53[5];
      float v56 = v53[1];
      float v57 = (float)(v30 * v54) + (float)(*v53 * v29);
      float v58 = v53[8];
      float v59 = v53[9];
      float v60 = (float)((float)(v27 * v54) + (float)(*v53 * v26)) + (float)(v58 * v28);
      float v61 = (float)((float)(v33 * v54) + (float)(*v53 * v32)) + (float)(v58 * v34);
      *BOOL v53 = v60;
      v53[1] = (float)((float)(v27 * v55) + (float)(v56 * v26)) + (float)(v59 * v28);
      v53[4] = v57 + (float)(v58 * v31);
      v53[5] = (float)((float)(v30 * v55) + (float)(v56 * v29)) + (float)(v59 * v31);
      v53[8] = v61;
      v53[9] = (float)((float)(v33 * v55) + (float)(v56 * v32)) + (float)(v59 * v34);
      float v62 = v53[6];
      float v63 = v53[7];
      float v64 = v53[2];
      float v65 = v53[3];
      float v66 = (float)(v27 * v62) + (float)(v64 * v26);
      float v67 = (float)(v30 * v62) + (float)(v64 * v29);
      float v68 = (float)(v33 * v62) + (float)(v64 * v32);
      float v69 = v53[10];
      float v70 = v53[11];
      v53[2] = v66 + (float)(v69 * v28);
      v53[3] = (float)((float)(v27 * v63) + (float)(v65 * v26)) + (float)(v70 * v28);
      v53[6] = v67 + (float)(v69 * v31);
      v53[7] = (float)((float)(v30 * v63) + (float)(v65 * v29)) + (float)(v70 * v31);
      v53[10] = v68 + (float)(v69 * v34);
      v53[11] = (float)((float)(v33 * v63) + (float)(v65 * v32)) + (float)(v70 * v34);
      v10 &= 0xFF000003;
    }
    *(_DWORD *)(v6 + 8168) = 0;
    *(_DWORD *)(a1 + 1544) = v10 | v52;
  }
  else if (!*(_WORD *)(a1 + 29832))
  {
    *(_WORD *)(a1 + 29832) = 1282;
  }
}

void glRotatex_Exec(uint64_t a1, int a2, int a3, int a4, int a5)
{
}

void glRotatex_PackThread(uint64_t a1, int a2, int a3, int a4, int a5)
{
}

uint64_t glRotateX_ListExec(uint64_t a1, _DWORD *a2, double a3, double a4)
{
  LODWORD(a3) = *a2;
  LODWORD(a4) = a2[1];
  glRotateX_Exec(a1, a3, a4);
  return 8;
}

uint64_t glRotateY_ListExec(uint64_t a1, uint64_t a2, double a3, double a4)
{
  LODWORD(a4) = *(_DWORD *)(a2 + 4);
  glRotateY_Exec(a1, *(float *)a2, a4);
  return 8;
}

uint64_t glRotateZ_ListExec(uint64_t a1, _DWORD *a2, double a3, double a4)
{
  LODWORD(a3) = *a2;
  LODWORD(a4) = a2[1];
  glRotateZ_Exec(a1, a3, a4);
  return 8;
}

uint64_t glRotateXYZ_ListExec(uint64_t a1, float *a2)
{
  if (*(int *)(a1 + 20484) < 24)
  {
    float v2 = *(float **)(a1 + 19976);
    float v3 = *a2;
    float v4 = a2[1];
    float v6 = a2[2];
    float v5 = a2[3];
    float v7 = a2[4];
    float v8 = a2[5];
    float v9 = a2[6];
    float v10 = a2[7];
    float v11 = a2[8];
    float v12 = v2[4];
    float v13 = v2[5];
    float v14 = v2[1];
    float v15 = v2[8];
    float v16 = v2[9];
    float v17 = (float)((float)(v4 * v12) + (float)(*v2 * *a2)) + (float)(v15 * v6);
    float v18 = (float)((float)(v7 * v12) + (float)(*v2 * v5)) + (float)(v15 * v8);
    float v19 = (float)((float)(v10 * v12) + (float)(*v2 * v9)) + (float)(v15 * v11);
    float v20 = (float)((float)(v4 * v13) + (float)(v14 * *a2)) + (float)(v16 * v6);
    *float v2 = v17;
    v2[1] = v20;
    v2[4] = v18;
    v2[5] = (float)((float)(v7 * v13) + (float)(v14 * v5)) + (float)(v16 * v8);
    v2[8] = v19;
    v2[9] = (float)((float)(v10 * v13) + (float)(v14 * v9)) + (float)(v16 * v11);
    float v21 = v2[6];
    float v22 = v2[7];
    float v23 = v2[2];
    float v24 = v2[3];
    float v25 = (float)(v4 * v21) + (float)(v23 * v3);
    float v26 = (float)(v7 * v21) + (float)(v23 * v5);
    float v27 = (float)(v10 * v21) + (float)(v23 * v9);
    float v28 = v2[10];
    float v29 = v2[11];
    v2[2] = v25 + (float)(v28 * v6);
    v2[3] = (float)((float)(v4 * v22) + (float)(v24 * v3)) + (float)(v29 * v6);
    v2[6] = v26 + (float)(v28 * v8);
    v2[7] = (float)((float)(v7 * v22) + (float)(v24 * v5)) + (float)(v29 * v8);
    int v30 = *(_DWORD *)(a1 + 20488);
    v2[10] = v27 + (float)(v28 * v11);
    v2[11] = (float)((float)(v10 * v22) + (float)(v24 * v9)) + (float)(v29 * v11);
    *(_DWORD *)(a1 + 1528) |= v30;
    *(_DWORD *)(a1 + 1540) |= v30;
    int v31 = *(_DWORD *)(a1 + 1544);
    if ((v30 & ~v31 & *(_DWORD *)(a1 + 2216) & 0xFFFFFC) != 0)
    {
      float v32 = *(float **)(a1 + 19984);
      float v33 = v32[4];
      float v34 = v32[5];
      float v35 = v32[1];
      float v36 = (float)(v7 * v33) + (float)(*v32 * v5);
      float v37 = v32[8];
      float v38 = v32[9];
      float v39 = (float)((float)(v4 * v33) + (float)(*v32 * v3)) + (float)(v37 * v6);
      float v40 = (float)((float)(v10 * v33) + (float)(*v32 * v9)) + (float)(v37 * v11);
      *float v32 = v39;
      v32[1] = (float)((float)(v4 * v34) + (float)(v35 * v3)) + (float)(v38 * v6);
      v32[4] = v36 + (float)(v37 * v8);
      v32[5] = (float)((float)(v7 * v34) + (float)(v35 * v5)) + (float)(v38 * v8);
      v32[8] = v40;
      v32[9] = (float)((float)(v10 * v34) + (float)(v35 * v9)) + (float)(v38 * v11);
      float v41 = v32[6];
      float v42 = v32[7];
      float v43 = v32[2];
      float v44 = v32[3];
      float v45 = (float)(v4 * v41) + (float)(v43 * v3);
      float v46 = (float)(v7 * v41) + (float)(v43 * v5);
      float v47 = (float)(v10 * v41) + (float)(v43 * v9);
      float v48 = v32[10];
      float v49 = v32[11];
      v32[2] = v45 + (float)(v48 * v6);
      v32[3] = (float)((float)(v4 * v42) + (float)(v44 * v3)) + (float)(v49 * v6);
      v32[6] = v46 + (float)(v48 * v8);
      v32[7] = (float)((float)(v7 * v42) + (float)(v44 * v5)) + (float)(v49 * v8);
      v32[10] = v47 + (float)(v48 * v11);
      v32[11] = (float)((float)(v10 * v42) + (float)(v44 * v9)) + (float)(v49 * v11);
      v30 &= 0xFF000003;
    }
    *(_DWORD *)(a1 + 28652) = 0;
    *(_DWORD *)(a1 + 1544) = v30 | v31;
  }
  else if (!*(_WORD *)(a1 + 29832))
  {
    *(_WORD *)(a1 + 29832) = 1282;
  }
  return 36;
}

void *glSampleCoverage_Comp(uint64_t a1, char a2, float a3)
{
  float result = gleAddCommand(a1, (uint64_t)glSampleCoverage_ListExec, 8);
  *(float *)float result = a3;
  *((unsigned char *)result + 4) = a2;
  return result;
}

uint64_t glSampleCoverage_ListExec(uint64_t a1, uint64_t a2)
{
  return 8;
}

uint64_t glSampleCoverage_Exec(uint64_t result, int a2, float a3)
{
  float v3 = fminf(fmaxf(a3, *(float *)(result + 288)), *(float *)(result + 292));
  if (*(float *)(result + 17672) != v3 || *(unsigned char *)(result + 17684) != (a2 != 0))
  {
    *(float *)(result + 17672) = v3;
    *(unsigned char *)(result + 17684) = a2 != 0;
    *(_DWORD *)(result + 1520) |= 0x20000000u;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1548) |= 0x40000u;
  }
  return result;
}

uint64_t glSampleCoveragex_Exec(uint64_t a1, int a2, int a3)
{
  return glSampleCoverage_Exec(a1, a3, (float)a2 * 0.000015259);
}

void *glSampleCoveragex_PackThread(uint64_t a1, int a2, char a3)
{
  float v4 = (float)a2 * 0.000015259;
  float result = gleAddCommand(a1, (uint64_t)glSampleCoverage_ListExec, 8);
  *(float *)float result = v4;
  *((unsigned char *)result + 4) = a3;
  return result;
}

void glGenSamplers_ExecThread(uint64_t a1, int a2, int *a3)
{
  (*(void (**)(void))(a1 + 27752))();

  glGenSamplers_Exec(a1, a2, a3);
}

void glGenSamplers_Exec(uint64_t a1, int a2, int *a3)
{
  if (a2 < 0)
  {
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1281;
    }
  }
  else
  {
    LODWORD(v5) = a2;
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    int v6 = gleGenHashNames(*(void *)(a1 + 19296) + 232, v5);
    if (v6) {
      BOOL v7 = v5 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
      int v8 = v6;
      uint64_t v5 = v5;
      do
      {
        *a3++ = v8;
        SamplerHashObject = gleCreateSamplerHashObject(a1, v8);
        gleAddHashNameAndObject(a1, *(void *)(a1 + 19296) + 232, (uint64_t)SamplerHashObject);
        ++v8;
        --v5;
      }
      while (v5);
    }
    float v10 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
    os_unfair_lock_unlock(v10);
  }
}

void glDeleteSamplers_ExecThread(uint64_t a1, unsigned int a2, uint64_t a3)
{
  (*(void (**)(void))(a1 + 27752))();

  glDeleteSamplers_Exec(a1, a2, a3);
}

void glDeleteSamplers_Exec(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if ((a2 & 0x80000000) != 0)
  {
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1281;
    }
  }
  else
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (a2)
    {
      uint64_t v6 = 0;
      uint64_t v7 = a2;
      do
      {
        unsigned int v8 = *(_DWORD *)(a3 + 4 * v6);
        if (v8)
        {
          for (uint64_t i = 2992; i != 3024; ++i)
          {
            uint64_t v10 = *(void *)(a1 + 8 * i);
            if (v10 && v8 == *(_DWORD *)(v10 + 16)) {
              gleBindSamplerObject(a1, i - 2992, 0);
            }
          }
          gleDeleteHashNameAndObject(*(void *)(a1 + 19296), (void (**)(uint64_t, uint64_t))(*(void *)(a1 + 19296) + 232), v8);
        }
        ++v6;
      }
      while (v6 != v7);
    }
    float v11 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
    os_unfair_lock_unlock(v11);
  }
}

BOOL glIsSampler_ExecThread(uint64_t a1, unsigned int a2)
{
  (*(void (**)(void))(a1 + 27752))();

  return glIsSampler_Exec(a1, a2);
}

BOOL glIsSampler_Exec(uint64_t a1, unsigned int a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  float v4 = gleLookupHashObject(*(void *)(a1 + 19296) + 232, a2);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  return v4 != 0;
}

_DWORD *glBindSampler_PackThread(uint64_t a1, int a2, int a3)
{
  float result = gleAddCommand(a1, (uint64_t)glBindSampler_UnpackThread, 8);
  *float result = a2;
  result[1] = a3;
  return result;
}

uint64_t glBindSampler_UnpackThread(uint64_t a1, unsigned int *a2)
{
  return 8;
}

void glBindSampler_Exec(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (*(unsigned __int16 *)(*(void *)(a1 + 29480) + 154) <= a2)
  {
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1281;
    }
  }
  else
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    gleBindSamplerObject(a1, a2, a3);
    uint64_t v6 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
    os_unfair_lock_unlock(v6);
  }
}

void glSamplerParameteri_Exec(uint64_t a1, unsigned int a2, int a3, int a4)
{
  int v8 = a4;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  glSamplerParameterI_Exec(a1, a2, a3, &v8);
  uint64_t v7 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);

  os_unfair_lock_unlock(v7);
}

uint64_t *glSamplerParameterI_Exec(uint64_t a1, unsigned int a2, int a3, int *a4)
{
  uint64_t v7 = a1 + 29832;
  float result = gleLookupHashObject(*(void *)(a1 + 19296) + 232, a2);
  if (!result)
  {
    if (*(_WORD *)v7) {
      return result;
    }
    __int16 v11 = 1282;
    goto LABEL_24;
  }
  if (a3 > 33082)
  {
    if (a3 > 34891)
    {
      if (a3 == 34892)
      {
        int v21 = *a4;
        if (!*a4 || v21 == 34894)
        {
          if (v21 == *((unsigned __int16 *)result + 95)) {
            return result;
          }
          *((_WORD *)result + 95) = v21;
          goto LABEL_52;
        }
      }
      else if (a3 == 34893)
      {
        int v22 = *a4;
        if ((*a4 & 0xFFFFFFF8) == 0x200)
        {
          if (v22 == *((unsigned __int16 *)result + 94)) {
            return result;
          }
          *((_WORD *)result + 94) = v22;
          goto LABEL_52;
        }
      }
    }
    else
    {
      if (a3 == 33083)
      {
        float v19 = (float)*a4;
        if (*((float *)result + 52) == v19) {
          return result;
        }
        *((float *)result + 52) = v19;
        goto LABEL_52;
      }
      if (a3 == 34046)
      {
        int v20 = *a4;
        if (*a4 > 0)
        {
          if (*((float *)result + 50) == (float)v20) {
            return result;
          }
          *((float *)result + 50) = (float)v20;
          goto LABEL_52;
        }
        if (*(_WORD *)v7) {
          return result;
        }
        __int16 v11 = 1281;
LABEL_24:
        *(_WORD *)uint64_t v7 = v11;
        return result;
      }
    }
LABEL_22:
    if (*(_WORD *)v7) {
      return result;
    }
    __int16 v11 = 1280;
    goto LABEL_24;
  }
  if (a3 > 32881)
  {
    if (a3 != 32882)
    {
      if (a3 == 33082)
      {
        float v12 = (float)*a4;
        if (*((float *)result + 51) == v12) {
          return result;
        }
        *((float *)result + 51) = v12;
        goto LABEL_52;
      }
      goto LABEL_22;
    }
    int v23 = *a4;
    if (*a4 == 10497) {
      goto LABEL_49;
    }
    if (v23 <= 34625)
    {
      if (v23 != 33071)
      {
        int v34 = 33648;
LABEL_94:
        if (v23 != v34) {
          goto LABEL_22;
        }
LABEL_49:
        char v24 = *((unsigned char *)result + 232) | 0x40;
LABEL_50:
        *((unsigned char *)result + 232) = v24;
        if (v23 == *((unsigned __int16 *)result + 98)) {
          return result;
        }
        *((_WORD *)result + 98) = v23;
        goto LABEL_52;
      }
    }
    else
    {
      if ((v23 - 34626) < 2) {
        goto LABEL_49;
      }
      if (v23 != 37905)
      {
        int v34 = 35090;
        goto LABEL_94;
      }
    }
    char v24 = result[29] & 0xBF;
    goto LABEL_50;
  }
  switch(a3)
  {
    case 10240:
      int v9 = *a4;
      if (*a4 == 9729) {
        goto LABEL_6;
      }
      if (v9 == 35416)
      {
        if ((*(unsigned char *)(*(void *)(a1 + 29480) + 579) & 1) == 0) {
          goto LABEL_22;
        }
LABEL_6:
        char v10 = *((unsigned char *)result + 232) | 4;
      }
      else
      {
        if (v9 != 9728) {
          goto LABEL_22;
        }
        char v10 = result[29] & 0xFB;
      }
      *((unsigned char *)result + 232) = v10;
      if (v9 == *((unsigned __int16 *)result + 93)) {
        return result;
      }
      *((_WORD *)result + 93) = v9;
      break;
    case 10241:
      int v13 = *a4;
      if ((*a4 - 9985) < 3)
      {
        char v14 = *((unsigned char *)result + 232) | 0xA;
        goto LABEL_27;
      }
      if (v13 <= 9983)
      {
        if (v13 == 9728)
        {
          char v14 = result[29] & 0xF5;
          goto LABEL_27;
        }
        if (v13 != 9729) {
          goto LABEL_22;
        }
        goto LABEL_110;
      }
      if (v13 == 35416)
      {
        if ((*(unsigned char *)(*(void *)(a1 + 29480) + 579) & 1) == 0) {
          goto LABEL_22;
        }
LABEL_110:
        char v14 = result[29] & 0xF5 | 8;
        goto LABEL_27;
      }
      if (v13 != 9984) {
        goto LABEL_22;
      }
      char v14 = result[29] & 0xF5 | 2;
LABEL_27:
      *((unsigned char *)result + 232) = v14;
      if (v13 == *((unsigned __int16 *)result + 92)) {
        return result;
      }
      *((_WORD *)result + 92) = v13;
      break;
    case 10242:
      int v15 = *a4;
      if (*a4 == 10497) {
        goto LABEL_30;
      }
      if (v15 <= 34625)
      {
        if (v15 != 33071)
        {
          int v32 = 33648;
LABEL_86:
          if (v15 != v32) {
            goto LABEL_22;
          }
          goto LABEL_30;
        }
      }
      else
      {
        if ((v15 - 34626) < 2)
        {
LABEL_30:
          char v16 = *((unsigned char *)result + 232) | 0x10;
          goto LABEL_31;
        }
        if (v15 != 37905)
        {
          int v32 = 35090;
          goto LABEL_86;
        }
      }
      char v16 = result[29] & 0xEF;
LABEL_31:
      *((unsigned char *)result + 232) = v16;
      if (v15 == *((unsigned __int16 *)result + 96)) {
        return result;
      }
      *((_WORD *)result + 96) = v15;
      break;
    case 10243:
      int v17 = *a4;
      if (*a4 == 10497) {
        goto LABEL_34;
      }
      if (v17 <= 34625)
      {
        if (v17 != 33071)
        {
          int v33 = 33648;
LABEL_90:
          if (v17 != v33) {
            goto LABEL_22;
          }
          goto LABEL_34;
        }
      }
      else
      {
        if ((v17 - 34626) < 2)
        {
LABEL_34:
          char v18 = *((unsigned char *)result + 232) | 0x20;
          goto LABEL_35;
        }
        if (v17 != 37905)
        {
          int v33 = 35090;
          goto LABEL_90;
        }
      }
      char v18 = result[29] & 0xDF;
LABEL_35:
      *((unsigned char *)result + 232) = v18;
      if (v17 == *((unsigned __int16 *)result + 97)) {
        return result;
      }
      *((_WORD *)result + 97) = v17;
      break;
    default:
      goto LABEL_22;
  }
LABEL_52:
  uint64_t v25 = 0;
  if (*(unsigned __int8 *)(a1 + 14996) <= 1u) {
    uint64_t v26 = 1;
  }
  else {
    uint64_t v26 = *(unsigned __int8 *)(a1 + 14996);
  }
  do
  {
    uint64_t v27 = *(void *)(a1 + 8 * v25 + 14976);
    if (v27 != -1)
    {
      unint64_t v28 = ~v27;
      do
      {
        unint64_t v29 = __clz(__rbit64(v28));
        if (*(uint64_t **)(a1 + 23936 + 8 * ((16 * v25) | (v29 >> 2))) == result)
        {
          *(_DWORD *)(a1 + 1536) |= 1 << (v29 >> 2);
          *(_DWORD *)(a1 + 28652) = 0;
          *(_DWORD *)(a1 + 1548) |= 0x8000000u;
        }
        v28 &= ~(15 << (v29 & 0x3C));
      }
      while (v28);
    }
    ++v25;
  }
  while (v25 != v26);
  uint64_t v30 = *(unsigned __int8 *)(v7 + 2664);
  if (*(unsigned char *)(v7 + 2664))
  {
    int v31 = result + 17;
    do
    {
      *v31 |= 1u;
      v31 += 4;
      --v30;
    }
    while (v30);
  }
  return result;
}

void glSamplerParameteriv_Exec(uint64_t a1, unsigned int a2, int a3, int *a4)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  glSamplerParameterI_Exec(a1, a2, a3, a4);
  int v8 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);

  os_unfair_lock_unlock(v8);
}

void glSamplerParameterf_Exec(uint64_t a1, unsigned int a2, int a3, float a4)
{
  float v8 = a4;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  glSamplerParameterF_Exec(a1, a2, a3, &v8);
  uint64_t v7 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);

  os_unfair_lock_unlock(v7);
}

float *glSamplerParameterF_Exec(uint64_t a1, unsigned int a2, int a3, float *a4)
{
  uint64_t v8 = a1 + 29832;
  float result = (float *)gleLookupHashObject(*(void *)(a1 + 19296) + 232, a2);
  if (!result)
  {
    if (*(_WORD *)v8) {
      return result;
    }
    __int16 v10 = 1282;
    goto LABEL_15;
  }
  if (a3 <= 33082)
  {
    if (a3 == 4100)
    {
LABEL_13:
      if (*(_WORD *)v8) {
        return result;
      }
      __int16 v10 = 1280;
      goto LABEL_15;
    }
    if (a3 != 33082)
    {
LABEL_34:
      float v19 = 0.5;
      if (*a4 < 0.0) {
        float v19 = -0.5;
      }
      int v20 = (int)(float)(*a4 + v19);
      return (float *)glSamplerParameterI_Exec(a1, a2, a3, &v20);
    }
    if (result[51] == *a4) {
      return result;
    }
    result[51] = *a4;
  }
  else
  {
    switch(a3)
    {
      case 33083:
        if (result[52] == *a4) {
          return result;
        }
        result[52] = *a4;
        break;
      case 34046:
        float v11 = *a4;
        if (*a4 < 1.0)
        {
          if (*(_WORD *)v8) {
            return result;
          }
          __int16 v10 = 1281;
LABEL_15:
          *(_WORD *)uint64_t v8 = v10;
          return result;
        }
        if (result[50] == v11) {
          return result;
        }
        result[50] = v11;
        break;
      case 34049:
        goto LABEL_13;
      default:
        goto LABEL_34;
    }
  }
  uint64_t v12 = 0;
  if (*(unsigned __int8 *)(a1 + 14996) <= 1u) {
    uint64_t v13 = 1;
  }
  else {
    uint64_t v13 = *(unsigned __int8 *)(a1 + 14996);
  }
  do
  {
    uint64_t v14 = *(void *)(a1 + 8 * v12 + 14976);
    if (v14 != -1)
    {
      unint64_t v15 = ~v14;
      do
      {
        unint64_t v16 = __clz(__rbit64(v15));
        if (*(float **)(a1 + 23936 + 8 * ((16 * v12) | (v16 >> 2))) == result)
        {
          *(_DWORD *)(a1 + 1536) |= 1 << (v16 >> 2);
          *(_DWORD *)(a1 + 28652) = 0;
          *(_DWORD *)(a1 + 1548) |= 0x8000000u;
        }
        v15 &= ~(15 << (v16 & 0x3C));
      }
      while (v15);
    }
    ++v12;
  }
  while (v12 != v13);
  uint64_t v17 = *(unsigned __int8 *)(v8 + 2664);
  if (*(unsigned char *)(v8 + 2664))
  {
    char v18 = result + 34;
    do
    {
      *v18 |= 1u;
      v18 += 4;
      --v17;
    }
    while (v17);
  }
  return result;
}

void glSamplerParameterfv_Exec(uint64_t a1, unsigned int a2, int a3, float *a4)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  glSamplerParameterF_Exec(a1, a2, a3, a4);
  uint64_t v8 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);

  os_unfair_lock_unlock(v8);
}

void glGetSamplerParameteriv_Exec(uint64_t a1, unsigned int a2, int a3, int *a4)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  glGetSamplerParameterIv_Exec(a1, a2, a3, a4);
  uint64_t v8 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);

  os_unfair_lock_unlock(v8);
}

uint64_t *glGetSamplerParameterIv_Exec(uint64_t a1, unsigned int a2, int a3, int *a4)
{
  float result = gleLookupHashObject(*(void *)(a1 + 19296) + 232, a2);
  if (result)
  {
    if (a3 > 33082)
    {
      if (a3 <= 34891)
      {
        if (a3 == 33083)
        {
          float v9 = *((float *)result + 52);
          goto LABEL_24;
        }
        if (a3 == 34046)
        {
          float v9 = *((float *)result + 50);
          goto LABEL_24;
        }
        goto LABEL_16;
      }
      if (a3 == 34892)
      {
        int v8 = *((unsigned __int16 *)result + 95);
      }
      else
      {
        if (a3 != 34893)
        {
LABEL_16:
          __int16 v10 = (__int16 *)(a1 + 29832);
          if (*(_WORD *)(a1 + 29832)) {
            return result;
          }
          __int16 v11 = 1280;
LABEL_18:
          *__int16 v10 = v11;
          return result;
        }
        int v8 = *((unsigned __int16 *)result + 94);
      }
    }
    else
    {
      if (a3 <= 32881)
      {
        switch(a3)
        {
          case 10240:
            int v8 = *((unsigned __int16 *)result + 93);
            goto LABEL_30;
          case 10241:
            int v8 = *((unsigned __int16 *)result + 92);
            goto LABEL_30;
          case 10242:
            int v8 = *((unsigned __int16 *)result + 96);
            goto LABEL_30;
          case 10243:
            int v8 = *((unsigned __int16 *)result + 97);
            goto LABEL_30;
          default:
            goto LABEL_16;
        }
      }
      if (a3 != 32882)
      {
        if (a3 == 33082)
        {
          float v9 = *((float *)result + 51);
LABEL_24:
          float v12 = 0.5;
          if (v9 < 0.0) {
            float v12 = -0.5;
          }
          int v8 = (int)(float)(v9 + v12);
          goto LABEL_30;
        }
        goto LABEL_16;
      }
      int v8 = *((unsigned __int16 *)result + 98);
    }
LABEL_30:
    *a4 = v8;
    return result;
  }
  __int16 v10 = (__int16 *)(a1 + 29832);
  if (!*(_WORD *)(a1 + 29832))
  {
    __int16 v11 = 1282;
    goto LABEL_18;
  }
  return result;
}

void glGetSamplerParameterfv_Exec(uint64_t a1, unsigned int a2, int a3, float *a4)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  int v8 = (float *)gleLookupHashObject(*(void *)(a1 + 19296) + 232, a2);
  if (v8)
  {
    if (a3 <= 33082)
    {
      if (a3 == 4100)
      {
LABEL_10:
        __int16 v10 = (__int16 *)(a1 + 29832);
        if (*(_WORD *)(a1 + 29832)) {
          goto LABEL_17;
        }
        __int16 v11 = 1280;
        goto LABEL_12;
      }
      if (a3 != 33082)
      {
LABEL_15:
        int v13 = 0;
        glGetSamplerParameterIv_Exec(a1, a2, a3, &v13);
        float v9 = (float)v13;
        goto LABEL_16;
      }
      float v9 = v8[51];
    }
    else
    {
      switch(a3)
      {
        case 33083:
          float v9 = v8[52];
          break;
        case 34046:
          float v9 = v8[50];
          break;
        case 34049:
          goto LABEL_10;
        default:
          goto LABEL_15;
      }
    }
LABEL_16:
    *a4 = v9;
    goto LABEL_17;
  }
  __int16 v10 = (__int16 *)(a1 + 29832);
  if (!*(_WORD *)(a1 + 29832))
  {
    __int16 v11 = 1282;
LABEL_12:
    *__int16 v10 = v11;
  }
LABEL_17:
  float v12 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);

  os_unfair_lock_unlock(v12);
}

void *glSamplerParameteri_PackThread(uint64_t a1, int a2, int a3, int a4)
{
  int __src = a4;
  uint64_t v6 = gleAddCommand(a1, (uint64_t)glSamplerParameteri_UnpackThread, 24);
  _DWORD *v6 = a2;
  v6[1] = a3;
  int SamplerParameterNumParams = glGetSamplerParameterNumParams(a3, 0);
  return memcpy(v6 + 2, &__src, (4 * SamplerParameterNumParams));
}

uint64_t glSamplerParameteri_UnpackThread(uint64_t a1, uint64_t a2)
{
  return 24;
}

uint64_t glGetSamplerParameterNumParams(int a1, int a2)
{
  uint64_t result = 1;
  if (a1 <= 33081)
  {
    if ((a1 - 10240) < 4) {
      return result;
    }
    if (a1 == 4100) {
      return 4;
    }
    int v4 = 32882;
    goto LABEL_12;
  }
  if (a1 <= 34048)
  {
    if ((a1 - 33082) < 2) {
      return result;
    }
    int v4 = 34046;
    goto LABEL_12;
  }
  if ((a1 - 34892) >= 2 && a1 != 34049)
  {
    int v4 = 35400;
LABEL_12:
    if (a1 != v4) {
      return a2 != 0;
    }
  }
  return result;
}

void *glSamplerParameteriv_PackThread(uint64_t a1, int a2, int a3, const void *a4)
{
  uint64_t v7 = gleAddCommand(a1, (uint64_t)glSamplerParameteriv_UnpackThread, 24);
  *uint64_t v7 = a2;
  v7[1] = a3;
  size_t v8 = 4 * glGetSamplerParameterNumParams(a3, 0);

  return memcpy(v7 + 2, a4, v8);
}

uint64_t glSamplerParameteriv_UnpackThread(uint64_t a1, uint64_t a2)
{
  return 24;
}

void *glSamplerParameterf_PackThread(uint64_t a1, int a2, int a3, float a4)
{
  float __src = a4;
  uint64_t v6 = gleAddCommand(a1, (uint64_t)glSamplerParameterf_UnpackThread, 24);
  _DWORD *v6 = a2;
  v6[1] = a3;
  int SamplerParameterNumParams = glGetSamplerParameterNumParams(a3, 1);
  return memcpy(v6 + 2, &__src, (4 * SamplerParameterNumParams));
}

uint64_t glSamplerParameterf_UnpackThread(uint64_t a1, uint64_t a2)
{
  return 24;
}

void *glSamplerParameterfv_PackThread(uint64_t a1, int a2, int a3, const void *a4)
{
  uint64_t v7 = gleAddCommand(a1, (uint64_t)glSamplerParameterfv_UnpackThread, 24);
  *uint64_t v7 = a2;
  v7[1] = a3;
  size_t v8 = 4 * glGetSamplerParameterNumParams(a3, 1);

  return memcpy(v7 + 2, a4, v8);
}

uint64_t glSamplerParameterfv_UnpackThread(uint64_t a1, uint64_t a2)
{
  return 24;
}

void glGetSamplerParameteriv_ExecThread(uint64_t a1, unsigned int a2, int a3, int *a4)
{
  (*(void (**)(void))(a1 + 27752))();

  glGetSamplerParameteriv_Exec(a1, a2, a3, a4);
}

void glGetSamplerParameterfv_ExecThread(uint64_t a1, unsigned int a2, int a3, float *a4)
{
  (*(void (**)(void))(a1 + 27752))();

  glGetSamplerParameterfv_Exec(a1, a2, a3, a4);
}

uint64_t glScale_ListExec(uint64_t a1, float *a2)
{
  return 12;
}

uint64_t glScalex_Exec(uint64_t a1, int a2, int a3, int a4)
{
  return glScale_Exec(a1, (float)a2 * 0.000015259, (float)a3 * 0.000015259, (float)a4 * 0.000015259);
}

float32x2_t glScalex_PackThread(uint64_t a1, unsigned int a2, unsigned int a3, int a4)
{
  float32x2_t v4 = vcvt_f32_s32((int32x2_t)__PAIR64__(a3, a2));
  float32_t v5 = (float)a4 * 0.000015259;
  uint64_t v6 = (float32x2_t *)gleAddCommand(a1, (uint64_t)glScale_ListExec, 12);
  float32x2_t result = vmul_f32(v4, (float32x2_t)vdup_n_s32(0x37800000u));
  float32x2_t *v6 = result;
  v6[1].f32[0] = v5;
  return result;
}

_DWORD *glScissor_Comp(uint64_t a1, int a2, int a3, int a4, int a5)
{
  float32x2_t result = gleAddCommand(a1, (uint64_t)glScissor_ListExec, 16);
  *float32x2_t result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  return result;
}

uint64_t glScissor_ListExec(uint64_t a1, long long *a2)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  long long v3 = *a2;
  glScissorArrayv_Core(a1, 0, 1, (uint64_t)&v3);
  return 16;
}

uint64_t glScissorArrayv_Core(uint64_t result, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v4 = (long long *)a4;
  unsigned int v6 = a2;
  uint64_t v7 = result;
  if (a3 < 1)
  {
LABEL_6:
    if (a3 + a2 >= 2 && !*(unsigned char *)(result + 15580)) {
      float32x2_t result = gleSwitchToMultiViewportMode(result);
    }
    if (a3 >= 1)
    {
      int v11 = 0;
      uint64_t v12 = v7 + 15560;
      uint64_t v13 = a3;
      do
      {
        long long v14 = *v4;
        unint64_t v15 = (_OWORD *)(v12 + 16 * v6);
        if (*(_DWORD *)v15 != *v4
          || *(void *)(v12 + 16 * v6 + 4) != *(void *)((char *)&v14 + 4)
          || *(_DWORD *)(v12 + 16 * v6 + 12) != HIDWORD(v14))
        {
          *unint64_t v15 = v14;
          float32x2_t result = gleUpdateViewScissorDataIndexed(v7, v6);
          int v11 = 1;
        }
        ++v4;
        ++v6;
        --v13;
      }
      while (v13);
      if (v11)
      {
        *(_DWORD *)(v7 + 28652) = 0;
        *(_DWORD *)(v7 + 29800) |= 0x4000000u;
      }
    }
  }
  else
  {
    size_t v8 = (_WORD *)(result + 29832);
    float v9 = (_DWORD *)(a4 + 12);
    int v10 = a3;
    while ((*(v9 - 1) & 0x80000000) == 0 && (*v9 & 0x80000000) == 0)
    {
      v9 += 4;
      if (!--v10) {
        goto LABEL_6;
      }
    }
    if (!*v8) {
      *size_t v8 = 1281;
    }
  }
  return result;
}

void *glShadeModel_Comp(uint64_t a1, int a2)
{
  float32x2_t result = gleAddCommand(a1, (uint64_t)glShadeModel_ListExec, 4);
  *(_DWORD *)float32x2_t result = a2;
  return result;
}

uint64_t glShadeModel_ListExec(uint64_t a1, int *a2)
{
  return 4;
}

void glUseProgramObjectARB_Exec(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  if (a2)
  {
    uint64_t v4 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
    if (!v4)
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
      float v9 = (__int16 *)(a1 + 29832);
      if (*(_WORD *)(a1 + 29832)) {
        return;
      }
      __int16 v10 = 1281;
      goto LABEL_18;
    }
    float32_t v5 = v4;
    if (*((_DWORD *)v4 + 6) != 8
      || *((unsigned char *)v4 + 3976) != 1
      || (uint64_t v6 = *(void *)(a1 + 26432), *(__int16 *)(v6 + 42) != -1) && !*(unsigned char *)(v6 + 41))
    {
LABEL_14:
      os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
      float v9 = (__int16 *)(a1 + 29832);
      if (*(_WORD *)(a1 + 29832)) {
        return;
      }
      __int16 v10 = 1282;
LABEL_18:
      *float v9 = v10;
      return;
    }
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 26432);
    if (*(__int16 *)(v7 + 42) != -1 && !*(unsigned char *)(v7 + 41)) {
      goto LABEL_14;
    }
    float32_t v5 = 0;
  }
  gleUseProgramObject(a1, v5);
  size_t v8 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);

  os_unfair_lock_unlock(v8);
}

void *glUseProgramObjectARB_Comp(uint64_t a1, uint64_t a2)
{
  float32x2_t result = gleAddCommand(a1, (uint64_t)glUseProgramObjectARB_ListExec, 8);
  *float32x2_t result = a2;
  return result;
}

uint64_t glUseProgramObjectARB_ListExec(uint64_t a1, uint64_t *a2)
{
  return 8;
}

uint64_t glCreateShaderObjectARB_Exec(uint64_t a1, int a2)
{
  uint64_t v4 = 0;
  BOOL v5 = 0;
  do
  {
    while (v5)
    {
      ++v4;
      BOOL v5 = 1;
      if (v4 == 5) {
        goto LABEL_7;
      }
    }
    int v6 = gle_shader_targets[v4];
    BOOL v5 = v6 == a2;
    ++v4;
  }
  while (v4 != 5);
  if (v6 == a2)
  {
LABEL_7:
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    uint64_t ShaderObject = gleCreateShaderObject(a1, a2);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    return ShaderObject;
  }
  uint64_t ShaderObject = 0;
  if (!*(_WORD *)(a1 + 29832)) {
    *(_WORD *)(a1 + 29832) = 1280;
  }
  return ShaderObject;
}

uint64_t glCreateProgramObjectARB_Exec(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t ProgramObject = gleCreateProgramObject(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  return ProgramObject;
}

void glDeleteObjectARB_Exec(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return;
  }
  unsigned int v2 = a2;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v4 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, v2);
  if (!v4)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    uint64_t v7 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v8 = 1281;
LABEL_12:
    *uint64_t v7 = v8;
    return;
  }
  if (*((_DWORD *)v4 + 6) != 8)
  {
    if (!*((unsigned char *)v4 + 64))
    {
      int v9 = *((_DWORD *)v4 + 5) - 1;
      *((_DWORD *)v4 + 5) = v9;
      int v6 = (void (*)(uint64_t, uint64_t))gleUnbindShaderObject;
      if (v9 != 1)
      {
        *((unsigned char *)v4 + 64) = 1;
        goto LABEL_17;
      }
      goto LABEL_15;
    }
    goto LABEL_10;
  }
  if (*((unsigned char *)v4 + 3979))
  {
LABEL_10:
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    uint64_t v7 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v8 = 1282;
    goto LABEL_12;
  }
  int v5 = *((_DWORD *)v4 + 5) - 1;
  *((_DWORD *)v4 + 5) = v5;
  int v6 = (void (*)(uint64_t, uint64_t))gleUnbindProgramObject;
  if (v5 == 1)
  {
LABEL_15:
    gleUnbindDeleteHashNameAndObject(a1, (void (**)(void, uint64_t))(*(void *)(a1 + 19296) + 168), v6, v2);
    goto LABEL_17;
  }
  *((unsigned char *)v4 + 3979) = 1;
LABEL_17:
  __int16 v10 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);

  os_unfair_lock_unlock(v10);
}

void glAttachObjectARB_Exec(uint64_t a1, unsigned int a2, unsigned int a3)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  int v6 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
  if (!v6) {
    goto LABEL_15;
  }
  uint64_t v7 = v6;
  __int16 v8 = *(os_unfair_lock_s **)(a1 + 19296);
  if (*((_DWORD *)v6 + 6) != 8)
  {
LABEL_18:
    os_unfair_lock_unlock(v8 + 81);
    float v19 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v20 = 1282;
    goto LABEL_20;
  }
  int v9 = gleLookupHashObject((uint64_t)&v8[42], a3);
  if (!v9)
  {
LABEL_15:
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    float v19 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v20 = 1281;
LABEL_20:
    *float v19 = v20;
    return;
  }
  __int16 v10 = v9;
  if (*((_DWORD *)v9 + 6) != 7)
  {
LABEL_17:
    __int16 v8 = *(os_unfair_lock_s **)(a1 + 19296);
    goto LABEL_18;
  }
  int v11 = *((_DWORD *)v7 + 982);
  if (v11 >= 1)
  {
    uint64_t v12 = v7[20];
    uint64_t v13 = *((unsigned int *)v7 + 982);
    while (*(uint64_t **)v12 != v9 && *(_DWORD *)(*(void *)v12 + 68) != *((_DWORD *)v9 + 17))
    {
      v12 += 8;
      if (!--v13) {
        goto LABEL_10;
      }
    }
    goto LABEL_17;
  }
LABEL_10:
  long long v14 = malloc_type_malloc(8 * (v11 + 1), 0x577B5147uLL);
  if (!v14) {
    abort();
  }
  unint64_t v15 = v14;
  uint64_t v16 = *((unsigned int *)v7 + 982);
  if ((int)v16 < 1)
  {
    uint64_t v18 = 0;
  }
  else
  {
    for (uint64_t i = 0; i != v16; ++i)
      v14[i] = *(void *)(v7[20] + i * 8);
    uint64_t v18 = v16;
  }
  v14[v18] = v10;
  *((_DWORD *)v7 + 982) = v16 + 1;
  int v21 = (void *)v7[20];
  if (v21) {
    free(v21);
  }
  v7[20] = (uint64_t)v15;
  ++*((_DWORD *)v10 + 5);
  int v22 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);

  os_unfair_lock_unlock(v22);
}

void glDetachObjectARB_Exec(uint64_t a1, unsigned int a2, unsigned int a3)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  int v6 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
  if (!v6) {
    goto LABEL_15;
  }
  uint64_t v7 = v6;
  __int16 v8 = *(os_unfair_lock_s **)(a1 + 19296);
  if (*((_DWORD *)v6 + 6) != 8)
  {
LABEL_13:
    os_unfair_lock_unlock(v8 + 81);
    unint64_t v15 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v16 = 1282;
LABEL_17:
    *unint64_t v15 = v16;
    return;
  }
  int v9 = gleLookupHashObject((uint64_t)&v8[42], a3);
  if (!v9)
  {
LABEL_15:
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    unint64_t v15 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v16 = 1281;
    goto LABEL_17;
  }
  unint64_t v10 = *((unsigned int *)v7 + 982);
  if ((int)v10 < 1) {
    goto LABEL_12;
  }
  int v11 = v9;
  unint64_t v12 = 0;
  do
    uint64_t v13 = *(uint64_t **)(v7[20] + 8 * v12++);
  while (v9 != v13 && v12 < v10);
  if (v9 != v13)
  {
LABEL_12:
    __int16 v8 = *(os_unfair_lock_s **)(a1 + 19296);
    goto LABEL_13;
  }
  int v17 = v10 - 1;
  if (v17)
  {
    uint64_t v18 = malloc_type_malloc(8 * v17, 0x577B5147uLL);
    if (!v18) {
      abort();
    }
    float v19 = v18;
    uint64_t v20 = *((unsigned int *)v7 + 982);
    if ((int)v20 >= 1)
    {
      uint64_t v21 = 0;
      int v22 = 0;
      do
      {
        int v23 = *(uint64_t **)(v7[20] + v21);
        if (v11 != v23) {
          v18[v22++] = v23;
        }
        v21 += 8;
      }
      while (8 * v20 != v21);
    }
  }
  else
  {
    float v19 = 0;
    LODWORD(v20) = 1;
  }
  *((_DWORD *)v7 + 982) = v20 - 1;
  char v24 = (void *)v7[20];
  if (v24) {
    free(v24);
  }
  v7[20] = (uint64_t)v19;
  int v25 = *((_DWORD *)v11 + 5) - 1;
  *((_DWORD *)v11 + 5) = v25;
  if (v25 == 1) {
    gleUnbindDeleteHashNameAndObject(a1, (void (**)(void, uint64_t))(*(void *)(a1 + 19296) + 168), (void (*)(uint64_t, uint64_t))gleUnbindShaderObject, a3);
  }
  uint64_t v26 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);

  os_unfair_lock_unlock(v26);
}

void glShaderSourceARB_Exec(uint64_t a1, unsigned int a2, int a3, const void **a4, int *a5)
{
  if (a3 <= 0) {
    goto LABEL_25;
  }
  LODWORD(v8) = a3;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  unint64_t v10 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
  if (!v10)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
LABEL_25:
    int v23 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v24 = 1281;
LABEL_29:
    *int v23 = v24;
    return;
  }
  int v11 = v10;
  if (*((_DWORD *)v10 + 6) != 7)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    int v23 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v24 = 1282;
    goto LABEL_29;
  }
  int v12 = 0;
  uint64_t v13 = v8;
  uint64_t v8 = v8;
  long long v14 = a5;
  unint64_t v15 = (const char **)a4;
  do
  {
    if (!a5 || (int v16 = *v14, *v14 < 0)) {
      int v16 = strlen(*v15);
    }
    v12 += v16;
    ++v15;
    ++v14;
    --v8;
  }
  while (v8);
  int v17 = malloc_type_malloc(v12 + 2, 0x577B5147uLL);
  if (!v17) {
    abort();
  }
  uint64_t v18 = v17;
  float v19 = (unsigned int *)a5;
  uint64_t v20 = v17;
  do
  {
    if (!a5 || (size_t v21 = *v19, (v21 & 0x80000000) != 0))
    {
      uint64_t v20 = (unsigned char *)__stpcpy_chk();
    }
    else
    {
      memcpy(v20, *a4, v21);
      v20 += (int)*v19;
    }
    ++a4;
    ++v19;
    --v13;
  }
  while (v13);
  uint64_t v22 = 0;
  unsigned char *v20 = 0;
  while (1)
  {
    while (v18[v22] == 13)
    {
      if (v18[v22 + 1] == 10) {
        v18[v22] = 32;
      }
      else {
        v18[v22] = 10;
      }
      ++v22;
    }
    if (!v18[v22]) {
      break;
    }
    ++v22;
  }
  if (v18[(int)v22 - 1] != 10)
  {
    v18[v22] = 10;
    v18[(v22 + 1)] = 0;
    ++v12;
  }
  int v25 = (void *)v11[6];
  if (v25) {
    free(v25);
  }
  *((unsigned char *)v11 + 65) = 1;
  *((_DWORD *)v11 + 15) = v12;
  v11[6] = (uint64_t)v18;
  uint64_t v26 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);

  os_unfair_lock_unlock(v26);
}

void glCompileShaderARB_Exec(size_t a1, unsigned int a2)
{
}

void glLinkProgramARB_Exec(uint64_t a1, unsigned int a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v4 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
  if (!v4)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    int v5 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v6 = 1281;
    goto LABEL_8;
  }
  if (*((_DWORD *)v4 + 6) != 8 || *((_DWORD *)v4 + 993))
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    int v5 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v6 = 1282;
LABEL_8:
    *int v5 = v6;
    return;
  }
  gleLinkProgram(a1, (uint64_t)(v4 + 5));
  uint64_t v7 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);

  os_unfair_lock_unlock(v7);
}

void glValidateProgramARB_Exec(unint64_t a1, unsigned int a2)
{
  unint64_t v4 = a1 + 29832;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  int v5 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
  if (!v5)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (*(_WORD *)v4) {
      return;
    }
    __int16 v14 = 1281;
LABEL_20:
    *(_WORD *)unint64_t v4 = v14;
    return;
  }
  int v9 = v5;
  if (*((_DWORD *)v5 + 6) != 8)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (*(_WORD *)v4) {
      return;
    }
    __int16 v14 = 1282;
    goto LABEL_20;
  }
  if ((*(_WORD *)(a1 + 32493) & 0x40) != 0)
  {
    *((unsigned char *)v5 + 3977) = 1;
  }
  else
  {
    unint64_t v10 = (void *)v5[17];
    if (v10) {
      free(v10);
    }
    v9[17] = 0;
    *((_DWORD *)v9 + 981) = 0;
    if (*((unsigned char *)v9 + 3976))
    {
      int v11 = *(uint64_t **)(a1 + 24768);
      if (v9 != v11)
      {
        if (v11) {
          ++*((_DWORD *)v11 + 5);
        }
        gleUseProgramObject(a1, v9);
      }
      int v12 = *(unsigned __int8 *)(a1 + 32501);
      if ((*(unsigned char *)(a1 + 28655) & 8) != 0 && *(char *)(a1 + 28681) < 0 && *(char *)(a1 + 28683) < 0)
      {
        int v15 = 0;
      }
      else
      {
        if ((v12 - 3) >= 2)
        {
          if (v12 == 1) {
            int v13 = gleDoSelectiveDispatchNoErrorCoreGL3(a1, 0x8000000u, 0x80u, 0x80u, 0xF8000000, v6.n128_f64[0], v7, v8);
          }
          else {
            int v13 = gleDoSelectiveDispatchNoErrorCore(a1, 0x8000000u, 0x80u, 0x80u, 0xF8000000, v6, v7, v8);
          }
        }
        else
        {
          int v13 = gleDoSelectiveDispatchNoErrorCoreES2(a1, 0x8000000u, 0x80u, 0x80u, 0xF8000000, v6.n128_f64[0], v7, v8);
        }
        int v15 = v13;
      }
      if (*(unsigned char *)(v4 + 2650))
      {
        gleAppendStringToInfoLog("Validation Failed: Fragment program failed to compile with current context state.\n", (const void **)v9 + 17, (_DWORD *)v9 + 981);
        *(unsigned char *)(v4 + 2652) = 0;
      }
      if (!*(unsigned char *)(v4 + 2649) && *(unsigned char *)(*(void *)(a1 + 29032) + 101))
      {
        gleAppendStringToInfoLog("Validation Failed: Vertex program failed to compile with current context state.\n", (const void **)v9 + 17, (_DWORD *)v9 + 981);
        *(unsigned char *)(v4 + 2652) = 0;
      }
      if (*(unsigned char *)(v4 + 2654) && (*(void *)(a1 + 29008) || *(void *)(a1 + 28960)))
      {
        if (*(unsigned char *)(v4 + 2652) && !v15)
        {
          *((unsigned char *)v9 + 3977) = 1;
LABEL_41:
          if (v9 != v11)
          {
            gleUseProgramObject(a1, v11);
            if (v11) {
              --*((_DWORD *)v11 + 5);
            }
          }
          goto LABEL_44;
        }
        *((unsigned char *)v9 + 3977) = 0;
        if (*((unsigned char *)v9 + 3978))
        {
          if (*((_DWORD *)v9 + 936))
          {
            int v16 = "Validation Failed: Bindable Uniform error:\n  Incomplete bindable uniform buffers.\n";
          }
          else
          {
            int v18 = *((_DWORD *)v9 + 930);
            if (v18)
            {
              if ((v18 & 0x10) != 0 || *(unsigned char *)(a1 + 17984))
              {
                if (!v15) {
                  goto LABEL_41;
                }
                int v16 = "Validation Failed\n";
              }
              else
              {
                int v16 = "Validation Failed: Program does not contain fragment shader. Results will be undefined.\n";
              }
            }
            else
            {
              int v16 = "Validation Failed: Program does not contain vertex shader. Results will be undefined.\n";
            }
          }
        }
        else
        {
          int v16 = "Validation Failed: Sampler error:\n"
                "  Samplers of different types use the same texture image unit.\n"
                "   - or -\n"
                "  A sampler's texture unit is out of range (greater than max allowed or negative).\n";
        }
      }
      else
      {
        *((unsigned char *)v9 + 3977) = 0;
        int v16 = "Validation Failed: Current draw framebuffer is invalid.\n";
      }
      gleAppendStringToInfoLog(v16, (const void **)v9 + 17, (_DWORD *)v9 + 981);
      goto LABEL_41;
    }
    *((unsigned char *)v9 + 3977) = 0;
    gleAppendStringToInfoLog("Validation Failed: Link error:\n  Program is not successfully linked.\n", (const void **)v9 + 17, (_DWORD *)v9 + 981);
  }
LABEL_44:
  int v17 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);

  os_unfair_lock_unlock(v17);
}

void glProgramParameteriEXT_Exec(uint64_t a1, unsigned int a2, int a3, int a4)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  double v8 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
  if (!v8)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    int v9 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v10 = 1281;
LABEL_10:
    *int v9 = v10;
    return;
  }
  if (*((_DWORD *)v8 + 6) != 8)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    int v9 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v10 = 1282;
    goto LABEL_10;
  }
  if (a3 == 33367)
  {
    *((unsigned char *)v8 + 3982) = a4 != 0;
  }
  else if (a3 == 33368)
  {
    *((unsigned char *)v8 + 3980) = a4 != 0;
  }
  else if (!*(_WORD *)(a1 + 29832))
  {
    *(_WORD *)(a1 + 29832) = 1280;
  }
  int v11 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);

  os_unfair_lock_unlock(v11);
}

void glGetShaderiv_Exec(uint64_t a1, unsigned int a2, int a3, _DWORD *a4)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  double v8 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
  if (!v8)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    int v11 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v12 = 1281;
LABEL_13:
    *int v11 = v12;
    return;
  }
  if (*((_DWORD *)v8 + 6) != 7)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    int v11 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v12 = 1282;
    goto LABEL_13;
  }
  int v13 = 0;
  if (a3 == 35662) {
    int v9 = 35663;
  }
  else {
    int v9 = a3;
  }
  int ObjectParameter = gleGetObjectParameter(a1, (uint64_t)v8, v9, &v13);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  if (ObjectParameter)
  {
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = ObjectParameter;
    }
  }
  else
  {
    *a4 = v13;
  }
}

void glGetProgramiv_Exec(uint64_t a1, unsigned int a2, int a3, _DWORD *a4)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  double v8 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
  if (!v8)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    __int16 v10 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v11 = 1281;
LABEL_10:
    *__int16 v10 = v11;
    return;
  }
  if (*((_DWORD *)v8 + 6) != 8)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    __int16 v10 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v11 = 1282;
    goto LABEL_10;
  }
  int v12 = 0;
  int ObjectParameter = gleGetObjectParameter(a1, (uint64_t)v8, a3, &v12);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  if (ObjectParameter)
  {
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = ObjectParameter;
    }
  }
  else
  {
    *a4 = v12;
  }
}

void glGetShaderInfoLog_Exec(uint64_t a1, unsigned int a2, int a3, _DWORD *a4, void *a5)
{
  if (a3 < 0) {
    goto LABEL_8;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  __int16 v10 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
  if (!v10)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
LABEL_8:
    int v12 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v13 = 1281;
LABEL_12:
    *int v12 = v13;
    return;
  }
  if (*((_DWORD *)v10 + 6) != 7)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    int v12 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v13 = 1282;
    goto LABEL_12;
  }
  gleGetString((const void *)v10[5], *((_DWORD *)v10 + 14), a3, a4, a5);
  __int16 v11 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);

  os_unfair_lock_unlock(v11);
}

void glGetProgramInfoLog_Exec(uint64_t a1, unsigned int a2, int a3, _DWORD *a4, void *a5)
{
  if (a3 < 0) {
    goto LABEL_8;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  __int16 v10 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
  if (!v10)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
LABEL_8:
    int v12 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v13 = 1281;
LABEL_12:
    *int v12 = v13;
    return;
  }
  if (*((_DWORD *)v10 + 6) != 8)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    int v12 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v13 = 1282;
    goto LABEL_12;
  }
  gleGetString((const void *)v10[17], *((_DWORD *)v10 + 981), a3, a4, a5);
  __int16 v11 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);

  os_unfair_lock_unlock(v11);
}

BOOL glIsShader_Exec(uint64_t a1, unsigned int a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  unint64_t v4 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
  if (v4) {
    BOOL v5 = *((_DWORD *)v4 + 6) == 7;
  }
  else {
    BOOL v5 = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  return v5;
}

BOOL glIsProgram_Exec(uint64_t a1, unsigned int a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  unint64_t v4 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
  if (v4) {
    BOOL v5 = *((_DWORD *)v4 + 6) == 8;
  }
  else {
    BOOL v5 = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  return v5;
}

void glGetAttachedShaders_Exec(uint64_t a1, unsigned int a2, unsigned int a3, _DWORD *a4, uint64_t a5)
{
  if ((a3 & 0x80000000) != 0) {
    goto LABEL_15;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  __int16 v10 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
  if (!v10)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
LABEL_15:
    __int16 v13 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v14 = 1281;
LABEL_19:
    *__int16 v13 = v14;
    return;
  }
  if (*((_DWORD *)v10 + 6) != 8)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    __int16 v13 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v14 = 1282;
    goto LABEL_19;
  }
  LODWORD(v11) = 0;
  if (a3 && *((int *)v10 + 982) >= 1)
  {
    unint64_t v11 = 0;
    do
    {
      *(_DWORD *)(a5 + 4 * v11) = *(_DWORD *)(*(void *)(v10[20] + 8 * v11) + 16);
      ++v11;
    }
    while (v11 < a3 && (uint64_t)v11 < *((int *)v10 + 982));
  }
  if (a4) {
    *a4 = v11;
  }
  int v12 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);

  os_unfair_lock_unlock(v12);
}

void glGetShaderSourceARB_Exec(uint64_t a1, unsigned int a2, int a3, _DWORD *a4, void *a5)
{
  if (a3 < 0) {
    goto LABEL_8;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  __int16 v10 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
  if (!v10)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
LABEL_8:
    int v12 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v13 = 1281;
LABEL_12:
    *int v12 = v13;
    return;
  }
  if (*((_DWORD *)v10 + 6) != 7)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    int v12 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v13 = 1282;
    goto LABEL_12;
  }
  gleGetString((const void *)v10[6], *((_DWORD *)v10 + 15), a3, a4, a5);
  unint64_t v11 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);

  os_unfair_lock_unlock(v11);
}

void glBindAttribLocationARB_Exec(uint64_t a1, unsigned int a2, unsigned int a3, unsigned char *a4)
{
  if (a4 && *a4 == 103 && a4[1] == 108 && a4[2] == 95) {
    goto LABEL_15;
  }
  if (a3 >= 0x10)
  {
LABEL_12:
    double v8 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v9 = 1281;
LABEL_17:
    *double v8 = v9;
    return;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  __n128 v6 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
  if (!v6)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    goto LABEL_12;
  }
  if (*((_DWORD *)v6 + 6) != 8)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
LABEL_15:
    double v8 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v9 = 1282;
    goto LABEL_17;
  }
  ShAttributeBindingRequest();
  double v7 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);

  os_unfair_lock_unlock(v7);
}

uint64_t glGetAttribLocationARB_Exec(uint64_t a1, unsigned int a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  unint64_t v4 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
  if (v4)
  {
    if (*((_DWORD *)v4 + 6) == 8 && *((unsigned char *)v4 + 3976) == 1)
    {
      uint64_t AttribLocation = ShGetAttribLocation();
      os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
      return AttribLocation;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    double v7 = (__int16 *)(a1 + 29832);
    if (!*(_WORD *)(a1 + 29832))
    {
      __int16 v8 = 1282;
LABEL_9:
      *double v7 = v8;
    }
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    double v7 = (__int16 *)(a1 + 29832);
    if (!*(_WORD *)(a1 + 29832))
    {
      __int16 v8 = 1281;
      goto LABEL_9;
    }
  }
  return 0xFFFFFFFFLL;
}

void glGetActiveAttribARB_Exec(uint64_t a1, unsigned int a2, unsigned int a3, int a4)
{
  if (a4 < 0) {
    goto LABEL_8;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  double v7 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
  if (!v7)
  {
LABEL_7:
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
LABEL_8:
    __int16 v9 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v10 = 1281;
    goto LABEL_13;
  }
  if (*((_DWORD *)v7 + 6) == 8)
  {
    if (*((_DWORD *)v7 + 983) > a3)
    {
      int ActiveAttrib = ShGetActiveAttrib();
      os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
      if (ActiveAttrib) {
        return;
      }
      goto LABEL_11;
    }
    goto LABEL_7;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
LABEL_11:
  __int16 v9 = (__int16 *)(a1 + 29832);
  if (*(_WORD *)(a1 + 29832)) {
    return;
  }
  __int16 v10 = 1282;
LABEL_13:
  *__int16 v9 = v10;
}

uint64_t glGetFragDataLocationEXT_Exec(uint64_t a1, unsigned int a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  unint64_t v4 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
  if (v4)
  {
    if (*((_DWORD *)v4 + 6) == 8 && *((unsigned char *)v4 + 3976) == 1)
    {
      uint64_t FragDataLocation = ShGetFragDataLocation();
      os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
      return FragDataLocation;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    double v7 = (__int16 *)(a1 + 29832);
    if (!*(_WORD *)(a1 + 29832))
    {
      __int16 v8 = 1282;
LABEL_9:
      *double v7 = v8;
    }
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    double v7 = (__int16 *)(a1 + 29832);
    if (!*(_WORD *)(a1 + 29832))
    {
      __int16 v8 = 1281;
      goto LABEL_9;
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t glCreateShaderObjectARB_ExecThread(uint64_t a1, int a2)
{
  (*(void (**)(void))(a1 + 27752))();

  return glCreateShaderObjectARB_Exec(a1, a2);
}

uint64_t glCreateProgramObjectARB_ExecThread(uint64_t a1)
{
  (*(void (**)(void))(a1 + 27752))();

  return glCreateProgramObjectARB_Exec(a1);
}

void glDeleteObjectARB_ExecThread(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(a1 + 27752))();

  glDeleteObjectARB_Exec(a1, a2);
}

void *glAttachObjectARB_PackThread(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float32x2_t result = gleAddCommand(a1, (uint64_t)glAttachObjectARB_UnpackThread, 16);
  *float32x2_t result = a2;
  result[1] = a3;
  return result;
}

uint64_t glAttachObjectARB_UnpackThread(uint64_t a1, void *a2)
{
  return 16;
}

void *glDetachObjectARB_PackThread(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float32x2_t result = gleAddCommand(a1, (uint64_t)glDetachObjectARB_UnpackThread, 16);
  *float32x2_t result = a2;
  result[1] = a3;
  return result;
}

uint64_t glDetachObjectARB_UnpackThread(uint64_t a1, void *a2)
{
  return 16;
}

void glShaderSourceARB_ExecThread(uint64_t a1, unsigned int a2, int a3, const void **a4, int *a5)
{
  (*(void (**)(void))(a1 + 27752))();

  glShaderSourceARB_Exec(a1, a2, a3, a4, a5);
}

void *glCompileShaderARB_PackThread(uint64_t a1, uint64_t a2)
{
  float32x2_t result = gleAddCommand(a1, (uint64_t)glCompileShaderARB_UnpackThread, 8);
  *float32x2_t result = a2;
  return result;
}

uint64_t glCompileShaderARB_UnpackThread(size_t a1, unsigned int *a2)
{
  return 8;
}

void *glLinkProgramARB_PackThread(uint64_t a1, uint64_t a2)
{
  float32x2_t result = gleAddCommand(a1, (uint64_t)glLinkProgramARB_UnpackThread, 8);
  *float32x2_t result = a2;
  return result;
}

uint64_t glLinkProgramARB_UnpackThread(uint64_t a1, void *a2)
{
  return 8;
}

void *glValidateProgramARB_PackThread(uint64_t a1, uint64_t a2)
{
  float32x2_t result = gleAddCommand(a1, (uint64_t)glValidateProgramARB_UnpackThread, 8);
  *float32x2_t result = a2;
  return result;
}

uint64_t glValidateProgramARB_UnpackThread(unint64_t a1, void *a2)
{
  return 8;
}

_DWORD *glProgramParameteriEXT_PackThread(uint64_t a1, int a2, int a3, int a4)
{
  float32x2_t result = gleAddCommand(a1, (uint64_t)glProgramParameteriEXT_UnpackThread, 12);
  *float32x2_t result = a2;
  result[1] = a3;
  result[2] = a4;
  return result;
}

uint64_t glProgramParameteriEXT_UnpackThread(uint64_t a1, uint64_t a2)
{
  return 12;
}

BOOL glIsShader_ExecThread(uint64_t a1, unsigned int a2)
{
  (*(void (**)(void))(a1 + 27752))();

  return glIsShader_Exec(a1, a2);
}

BOOL glIsProgram_ExecThread(uint64_t a1, unsigned int a2)
{
  (*(void (**)(void))(a1 + 27752))();

  return glIsProgram_Exec(a1, a2);
}

void glGetShaderiv_ExecThread(uint64_t a1, unsigned int a2, int a3, _DWORD *a4)
{
  (*(void (**)(void))(a1 + 27752))();

  glGetShaderiv_Exec(a1, a2, a3, a4);
}

void glGetProgramiv_ExecThread(uint64_t a1, unsigned int a2, int a3, _DWORD *a4)
{
  (*(void (**)(void))(a1 + 27752))();

  glGetProgramiv_Exec(a1, a2, a3, a4);
}

void glGetShaderInfoLog_ExecThread(uint64_t a1, unsigned int a2, int a3, _DWORD *a4, void *a5)
{
  (*(void (**)(void))(a1 + 27752))();

  glGetShaderInfoLog_Exec(a1, a2, a3, a4, a5);
}

void glGetProgramInfoLog_ExecThread(uint64_t a1, unsigned int a2, int a3, _DWORD *a4, void *a5)
{
  (*(void (**)(void))(a1 + 27752))();

  glGetProgramInfoLog_Exec(a1, a2, a3, a4, a5);
}

void glGetAttachedShaders_ExecThread(uint64_t a1, unsigned int a2, unsigned int a3, _DWORD *a4, uint64_t a5)
{
  (*(void (**)(void))(a1 + 27752))();

  glGetAttachedShaders_Exec(a1, a2, a3, a4, a5);
}

void glGetShaderSourceARB_ExecThread(uint64_t a1, unsigned int a2, int a3, _DWORD *a4, void *a5)
{
  (*(void (**)(void))(a1 + 27752))();

  glGetShaderSourceARB_Exec(a1, a2, a3, a4, a5);
}

void glBindAttribLocationARB_PackThread(uint64_t a1, uint64_t a2, unsigned int a3, char *__s)
{
  uint64_t v8 = strlen(__s) + 25;
  __int16 v9 = gleAddLargeCommand(a1, (uint64_t)glBindAttribLocationARB_UnpackThread, v8);
  if (v9)
  {
    *__int16 v9 = a2;
    *((_DWORD *)v9 + 2) = a3;
    v9[2] = v8;
    __int16 v10 = (char *)(v9 + 3);
    strcpy(v10, __s);
  }
  else
  {
    (*(void (**)(uint64_t))(a1 + 27752))(a1);
    glBindAttribLocationARB_Exec(a1, a2, a3, __s);
  }
}

uint64_t glBindAttribLocationARB_UnpackThread(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 16);
}

void glGetActiveAttribARB_ExecThread(uint64_t a1, unsigned int a2, unsigned int a3, int a4)
{
  (*(void (**)(void))(a1 + 27752))();

  glGetActiveAttribARB_Exec(a1, a2, a3, a4);
}

uint64_t glGetAttribLocationARB_ExecThread(uint64_t a1, unsigned int a2)
{
  (*(void (**)(void))(a1 + 27752))();

  return glGetAttribLocationARB_Exec(a1, a2);
}

uint64_t glGetFragDataLocationEXT_ExecThread(uint64_t a1, unsigned int a2)
{
  (*(void (**)(void))(a1 + 27752))();

  return glGetFragDataLocationEXT_Exec(a1, a2);
}

uint64_t glShaderBinaryOES_Exec(uint64_t result)
{
  if (!*(_WORD *)(result + 29832)) {
    *(_WORD *)(result + 29832) = 1280;
  }
  return result;
}

uint64_t glGetShaderPrecisionFormatOES_Exec(uint64_t result, unsigned int a2, int a3, _DWORD *a4, _DWORD *a5)
{
  if (a2 >> 1 != 17816 && !*(_WORD *)(result + 29832)) {
    *(_WORD *)(result + 29832) = 1280;
  }
  switch(a3)
  {
    case 36336:
      uint64_t v5 = *(void *)(result + 29032);
      int v6 = *(unsigned __int16 *)(v5 + 470);
      *a4 = v6;
      a4[1] = v6;
      int v7 = *(unsigned __int8 *)(v5 + 476);
      goto LABEL_10;
    case 36337:
      uint64_t v8 = *(void *)(result + 29032);
      int v9 = *(unsigned __int16 *)(v8 + 472);
      *a4 = v9;
      a4[1] = v9;
      int v7 = *(unsigned __int8 *)(v8 + 477);
      goto LABEL_10;
    case 36338:
      uint64_t v10 = *(void *)(result + 29032);
      int v11 = *(unsigned __int16 *)(v10 + 474);
      *a4 = v11;
      a4[1] = v11;
      int v7 = *(unsigned __int8 *)(v10 + 478);
LABEL_10:
      *a5 = v7;
      return result;
    case 36339:
      int v12 = *(unsigned __int16 *)(*(void *)(result + 29032) + 464);
      goto LABEL_14;
    case 36340:
      int v12 = *(unsigned __int16 *)(*(void *)(result + 29032) + 466);
      goto LABEL_14;
    case 36341:
      int v12 = *(unsigned __int16 *)(*(void *)(result + 29032) + 468);
LABEL_14:
      *a4 = v12;
      a4[1] = v12 - (v12 != 23);
      *a5 = 0;
      break;
    default:
      if (!*(_WORD *)(result + 29832)) {
        *(_WORD *)(result + 29832) = 1280;
      }
      break;
  }
  return result;
}

uint64_t glReleaseShaderCompilerOES_ExecThread(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 27752))();
}

uint64_t glShaderBinaryOES_ExecThread(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(a1 + 27752))();
  if (!*(_WORD *)(a1 + 29832)) {
    *(_WORD *)(a1 + 29832) = 1280;
  }
  return result;
}

uint64_t glGetShaderPrecisionFormatOES_ExecThread(uint64_t a1, unsigned int a2, int a3, _DWORD *a4, _DWORD *a5)
{
  (*(void (**)(void))(a1 + 27752))();

  return glGetShaderPrecisionFormatOES_Exec(a1, a2, a3, a4, a5);
}

uint64_t validatePathName(uint64_t a1, int a2, char *__big, int a4)
{
  if (a2 && __big)
  {
    int v7 = a2;
    if (a2 <= 0) {
      int v7 = strlen(__big);
    }
    if (*__big == 47 && !strnstr(__big, "//", v7))
    {
      if (v7 < 1)
      {
LABEL_20:
        if (__big[v7 - 1] != 47) {
          return 1;
        }
      }
      else
      {
        uint64_t v9 = v7;
        uint64_t v10 = __big;
        while (1)
        {
          int v12 = *v10++;
          int v11 = v12;
          unsigned int v13 = ((v12 & 0xDF) - 65);
          BOOL v14 = (v12 - 48) >= 0xA && v13 >= 0x1A;
          if (v14 && !memchr("_ .+-/*%[](){}^|&~=!:;,?", v11, 0x19uLL)) {
            break;
          }
          if (!--v9) {
            goto LABEL_20;
          }
        }
      }
    }
  }
  if (!a4 || *(_WORD *)(a1 + 29832)) {
    return 0;
  }
  uint64_t result = 0;
  *(_WORD *)(a1 + 29832) = 1281;
  return result;
}

uint64_t findOrAddNamedString(const __CFDictionary **a1, int a2, char *__s, const void *a4, const __CFArray *a5, const __CFArray *cf, void *a7)
{
  *(void *)&v36[255] = *MEMORY[0x263EF8340];
  CFDictionaryRef ValueAtIndex = *a1;
  CFArrayRef Mutable = cf;
  if (!cf) {
    CFArrayRef Mutable = CFArrayCreateMutable(0, 1, MEMORY[0x263EFFF70]);
  }
  if (a4 && !ValueAtIndex)
  {
    CFDictionaryRef ValueAtIndex = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    *a1 = ValueAtIndex;
  }
  if (ValueAtIndex)
  {
    int v33 = a7;
    if (a2 <= 0) {
      strlen(__s);
    }
    __strlcpy_chk();
    __strlcat_chk();
    __stringp = v36;
    int v16 = strsep(&__stringp, "/");
    if (v16)
    {
      int v17 = v16;
      int v32 = a1;
      unsigned int v34 = 0;
      while (1)
      {
        size_t v18 = strlen(v17);
        CFDataRef v19 = CFDataCreate(0, (const UInt8 *)v17, v18);
        Value = CFDictionaryGetValue(ValueAtIndex, v19);
        if (Value) {
          break;
        }
        if (!strcmp(v17, ".")) {
          goto LABEL_37;
        }
        if (!strcmp(v17, ".."))
        {
          if (CFArrayGetCount(Mutable))
          {
            if (a5)
            {
              CFIndex Count = CFArrayGetCount(a5);
              CFArrayRemoveValueAtIndex(a5, Count - 1);
            }
            CFIndex v27 = CFArrayGetCount(Mutable);
            CFArrayRemoveValueAtIndex(Mutable, v27 - 1);
          }
          if (CFArrayGetCount(Mutable))
          {
            CFIndex v28 = CFArrayGetCount(Mutable);
            CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(Mutable, v28 - 1);
          }
          else
          {
            CFDictionaryRef ValueAtIndex = *v32;
          }
LABEL_37:
          int v23 = 1;
          goto LABEL_38;
        }
        if (a4)
        {
          if (__stringp)
          {
            CFMutableDictionaryRef v24 = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
            CFDictionarySetValue(ValueAtIndex, v19, v24);
            CFRelease(v24);
            int v23 = 1;
            CFDictionaryRef ValueAtIndex = v24;
            goto LABEL_38;
          }
          CFDictionarySetValue(ValueAtIndex, v19, a4);
        }
        int v23 = 0;
LABEL_38:
        CFRelease(v19);
        unint64_t v29 = strsep(&__stringp, "/");
        if (v23)
        {
          int v17 = v29;
          if (v29) {
            continue;
          }
        }
        goto LABEL_45;
      }
      size_t v21 = Value;
      if (a5) {
        CFArrayAppendValue(a5, v19);
      }
      CFArrayAppendValue(Mutable, v21);
      CFTypeID v22 = CFGetTypeID(v21);
      if (v22 == CFDictionaryGetTypeID())
      {
        int v23 = 1;
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)v21;
        goto LABEL_38;
      }
      CFTypeID v25 = CFGetTypeID(v21);
      if (v25 == CFDataGetTypeID())
      {
        if (__stringp)
        {
          int v23 = 0;
          CFDictionaryRef ValueAtIndex = 0;
        }
        else
        {
          if (a4) {
            CFDictionarySetValue(ValueAtIndex, v19, a4);
          }
          int v23 = 0;
          CFDictionaryRef ValueAtIndex = 0;
          if (v33) {
            *int v33 = v21;
          }
          unsigned int v34 = 1;
        }
        goto LABEL_38;
      }
      goto LABEL_37;
    }
    unsigned int v34 = 0;
LABEL_45:
    uint64_t v30 = v34;
    if (!cf) {
      goto LABEL_46;
    }
  }
  else
  {
    uint64_t v30 = 0;
    if (!cf) {
LABEL_46:
    }
      CFRelease(Mutable);
  }
  return v30;
}

void glCompileShaderIncludeARB_Exec(size_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  if ((a3 & 0x80000000) == 0)
  {
    if (!a3) {
      goto LABEL_11;
    }
    if (a4)
    {
      uint64_t v10 = a3;
      while (v10)
      {
        if (a5) {
          int v11 = *(_DWORD *)(a5 - 4 + 4 * v10);
        }
        else {
          int v11 = -1;
        }
        if (!validatePathName(a1, v11, *(char **)(a4 - 8 + 8 * v10--), 1)) {
          return;
        }
      }
LABEL_11:
      os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
      unsigned int v13 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
      if (v13)
      {
        if (*((_DWORD *)v13 + 6) == 7)
        {
          uint64_t v14 = (uint64_t)(v13 + 5);
          if (a3)
          {
            CFMutableArrayRef Mutable = CFArrayCreateMutable(0, a3, MEMORY[0x263EFFF70]);
            CFMutableArrayRef cf = Mutable;
            if ((int)a3 >= 1)
            {
              int v16 = Mutable;
              unint64_t v17 = a3 + 1;
              do
              {
                uint64_t v18 = (v17 - 2);
                if (a5 && (int v19 = *(_DWORD *)(a5 + 4 * v18), v19 >= 1))
                {
                  uint64_t v20 = *(const char **)(a4 + 8 * v18);
                }
                else
                {
                  uint64_t v20 = *(const char **)(a4 + 8 * v18);
                  int v19 = strlen(v20);
                }
                CFDataRef v21 = CFDataCreate(0, (const UInt8 *)v20, v19);
                CFArrayAppendValue(v16, v21);
                CFRelease(v21);
                --v17;
              }
              while (v17 > 1);
            }
          }
          else
          {
            CFMutableArrayRef cf = 0;
          }
          gleShaderParse(a1, v14);
          if (cf) {
            CFRelease(cf);
          }
          os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
          return;
        }
        CFTypeID v22 = (__int16 *)(a1 + 29832);
        if (*(_WORD *)(a1 + 29832)) {
          goto LABEL_29;
        }
        __int16 v23 = 1282;
      }
      else
      {
        CFTypeID v22 = (__int16 *)(a1 + 29832);
        if (*(_WORD *)(a1 + 29832))
        {
LABEL_29:
          CFMutableDictionaryRef v24 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
          os_unfair_lock_unlock(v24);
          return;
        }
        __int16 v23 = 1281;
      }
      __int16 *v22 = v23;
      goto LABEL_29;
    }
  }
  if (!*(_WORD *)(a1 + 29832)) {
    *(_WORD *)(a1 + 29832) = 1281;
  }
}

const UInt8 *getInclude(uint64_t *a1, const char *a2)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  CFDataRef theData = 0;
  uint64_t v4 = *a1;
  int v5 = *(unsigned __int8 *)a2;
  if (v5 == 60) {
    goto LABEL_22;
  }
  uint64_t result = 0;
  if (v5 != 34) {
    return result;
  }
  CFArrayRef v7 = (const __CFArray *)a1[2];
  if (!v7) {
    goto LABEL_7;
  }
  if (a2[1] == 47)
  {
    LODWORD(v7) = 0;
    goto LABEL_7;
  }
  LODWORD(v7) = CFArrayGetCount(v7);
  if ((v7 & 0x80000000) == 0)
  {
LABEL_7:
    uint64_t v32 = v4;
    uint64_t v8 = (const __CFDictionary **)(v4 + 336);
    uint64_t v9 = v7;
    while (1)
    {
      if (v9)
      {
        CFDataRef ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex((CFArrayRef)a1[2], (v9 - 1));
        int Length = CFDataGetLength(ValueAtIndex);
        BytePtr = (const char *)CFDataGetBytePtr(ValueAtIndex);
        unsigned int v13 = "/";
      }
      else
      {
        int Length = 0;
        BytePtr = 0;
        unsigned int v13 = (const char *)&unk_227DC2C32;
      }
      int v14 = strlen(a2 + 1);
      unsigned int v15 = snprintf_l(__s, 0x100uLL, 0, "%.*s%s%.*s", Length, BytePtr, v13, v14 - 1, a2 + 1);
      if (v15 > 0xFF) {
        return 0;
      }
      int v16 = findOrAddNamedString(v8, v15, __s, 0, 0, 0, &theData);
      BOOL v17 = v9-- < 1;
      if (v17 || v16)
      {
        int v18 = *(unsigned __int8 *)a2;
        if (v18 != 60)
        {
          uint64_t v4 = v32;
          goto LABEL_20;
        }
        uint64_t v4 = v32;
        if (v16) {
          goto LABEL_34;
        }
        goto LABEL_22;
      }
    }
  }
  int v18 = *(unsigned __int8 *)a2;
  if (v18 == 60) {
    goto LABEL_22;
  }
  int v16 = 0;
LABEL_20:
  if (v18 == 34 && !v16)
  {
LABEL_22:
    CFArrayRef v19 = (const __CFArray *)a1[1];
    if (!v19) {
      goto LABEL_26;
    }
    if (a2[1] == 47)
    {
      LODWORD(v19) = 0;
      goto LABEL_26;
    }
    LODWORD(v19) = CFArrayGetCount(v19);
    if ((v19 & 0x80000000) == 0)
    {
LABEL_26:
      uint64_t v20 = a2 + 1;
      uint64_t v21 = v19;
      while (1)
      {
        if (v21)
        {
          CFDataRef v22 = (const __CFData *)CFArrayGetValueAtIndex((CFArrayRef)a1[1], (v21 - 1));
          int v23 = CFDataGetLength(v22);
          CFMutableDictionaryRef v24 = (const char *)CFDataGetBytePtr(v22);
          int v25 = v23;
          uint64_t v26 = "/";
        }
        else
        {
          int v25 = 0;
          CFMutableDictionaryRef v24 = 0;
          uint64_t v26 = (const char *)&unk_227DC2C32;
        }
        int v27 = strlen(v20);
        unsigned int v28 = snprintf_l(__s, 0x100uLL, 0, "%.*s%s%.*s", v25, v24, v26, v27 - 1, v20);
        if (v28 > 0xFF) {
          break;
        }
        int v16 = findOrAddNamedString((const __CFDictionary **)(v4 + 336), v28, __s, 0, 0, 0, &theData);
        BOOL v17 = v21-- < 1;
        if (v17 || v16) {
          goto LABEL_33;
        }
      }
    }
    return 0;
  }
LABEL_33:
  if (!v16) {
    return 0;
  }
LABEL_34:
  unint64_t v29 = strrchr(__s, 47);
  if (v29 <= __s) {
    CFIndex v30 = 1;
  }
  else {
    CFIndex v30 = (int)(v29 - __s);
  }
  if (!a1[2]) {
    a1[2] = (uint64_t)CFArrayCreateMutable(0, 1, MEMORY[0x263EFFF70]);
  }
  CFDataRef v31 = CFDataCreate(0, (const UInt8 *)__s, v30);
  CFArrayAppendValue((CFMutableArrayRef)a1[2], v31);
  CFRelease(v31);
  return CFDataGetBytePtr(theData);
}

void freeInclude(uint64_t a1)
{
  CFArrayRef v2 = *(const __CFArray **)(a1 + 16);
  CFIndex Count = CFArrayGetCount(v2);
  CFArrayRemoveValueAtIndex(v2, Count - 1);
  if (!CFArrayGetCount(*(CFArrayRef *)(a1 + 16)))
  {
    CFRelease(*(CFTypeRef *)(a1 + 16));
    *(void *)(a1 + 16) = 0;
  }
}

float glGetFloatv_ExecThread(uint64_t a1, int a2, float *a3)
{
  (*(void (**)(void))(a1 + 27752))();

  return glGetFloatv_Exec(a1, a2, a3, v6, v7, v8);
}

uint64_t glGetFixedv_Exec(uint64_t a1, int a2, _DWORD *a3, double a4, double a5, double a6)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  char v20 = 0;
  int v19 = 0;
  uint64_t result = gleGetState(a1, a2, (uint64_t)v21, &v19, &v20, a4, a5, a6);
  if (result == -2)
  {
    uint64_t v9 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return result;
    }
    __int16 v10 = 1282;
    goto LABEL_7;
  }
  if (result == -1)
  {
    uint64_t v9 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return result;
    }
    __int16 v10 = 1280;
LABEL_7:
    *uint64_t v9 = v10;
    return result;
  }
  if (v19 == 5124)
  {
    if ((int)result >= 1)
    {
      uint64_t v11 = result;
      int v12 = (int *)v21;
      do
      {
        int v13 = *v12;
        v12 += 2;
        *a3++ = v13 << 16;
        --v11;
      }
      while (v11);
    }
  }
  else if ((int)result >= 1)
  {
    uint64_t v14 = result;
    unsigned int v15 = (double *)v21;
    do
    {
      double v16 = *v15++;
      float v17 = v16;
      float v18 = (float)(v17 * 65536.0) + 0.5;
      if (v18 < 0.0) {
        float v18 = v18 + -0.99998;
      }
      *a3++ = (int)v18;
      --v14;
    }
    while (v14);
  }
  return result;
}

uint64_t glGetFixedv_ExecThread(uint64_t a1, int a2, _DWORD *a3)
{
  (*(void (**)(void))(a1 + 27752))();

  return glGetFixedv_Exec(a1, a2, a3, v6, v7, v8);
}

double glGetInteger64v_ExecThread(uint64_t a1, int a2, void *a3)
{
  (*(void (**)(void))(a1 + 27752))();

  return glGetInteger64v_Exec(a1, a2, a3, v6, v7, v8);
}

double glGetInteger64v_Exec(uint64_t a1, int a2, void *a3, double a4, double a5, double a6)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  char v22 = 0;
  int v21 = 0;
  int State = gleGetState(a1, a2, (uint64_t)__src, &v21, &v22, a4, a5, a6);
  if (State == -2)
  {
    __int16 v10 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return result;
    }
    __int16 v11 = 1282;
    goto LABEL_7;
  }
  if (State == -1)
  {
    __int16 v10 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return result;
    }
    __int16 v11 = 1280;
LABEL_7:
    *__int16 v10 = v11;
    return result;
  }
  if (v21 == 5124)
  {
    if (State >= 1) {
      memcpy(a3, __src, 8 * State);
    }
  }
  else if (v22)
  {
    if (State >= 1)
    {
      uint64_t v12 = State;
      int v13 = (double *)__src;
      double result = 1.0;
      do
      {
        double v14 = *v13++;
        double v15 = v14;
        if (v14 <= 1.0) {
          double v16 = v15;
        }
        else {
          double v16 = 1.0;
        }
        if (v15 >= -1.0) {
          double v17 = v16;
        }
        else {
          double v17 = -1.0;
        }
        *a3++ = (int)(v17 * 2147483520.0) + (int)(v17 * 127.999985);
        --v12;
      }
      while (v12);
    }
  }
  else if (State >= 1)
  {
    uint64_t v18 = State;
    int v19 = (double *)__src;
    do
    {
      double v20 = *v19++;
      double result = v20;
      *a3++ = llround(v20);
      --v18;
    }
    while (v18);
  }
  return result;
}

float glGetIntegerv_ExecThread(uint64_t a1, int a2, _DWORD *a3, double a4, double a5, double a6)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  char v28 = 0;
  int v27 = 0;
  if (a2 <= 33309)
  {
    if ((a2 - 3377) <= 0xA && ((1 << (a2 - 49)) & 0x5FB) != 0 || (a2 - 3120) < 2) {
      goto LABEL_21;
    }
    int v9 = 32947;
    goto LABEL_20;
  }
  if (a2 > 36343)
  {
    if (a2 <= 36440)
    {
      if ((a2 - 36344) < 3) {
        goto LABEL_21;
      }
LABEL_48:
      (*(void (**)(uint64_t))(a1 + 27752))(a1);
      goto LABEL_21;
    }
    if (a2 == 36441 || a2 == 37137) {
      goto LABEL_21;
    }
    int v9 = 37158;
LABEL_20:
    if (a2 == v9) {
      goto LABEL_21;
    }
    goto LABEL_48;
  }
  if (a2 > 34881)
  {
    if (a2 == 34882 || a2 == 34921) {
      goto LABEL_21;
    }
    int v9 = 36203;
    goto LABEL_20;
  }
  if ((a2 - 34350) >= 2 && a2 != 33310)
  {
    int v9 = 34468;
    goto LABEL_20;
  }
LABEL_21:
  int State = gleGetState(a1, a2, (uint64_t)v29, &v27, &v28, a4, a5, a6);
  if (State == -2)
  {
    uint64_t v12 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return *(float *)&v11;
    }
    __int16 v13 = 1282;
LABEL_27:
    *uint64_t v12 = v13;
    return *(float *)&v11;
  }
  if (State == -1)
  {
    uint64_t v12 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return *(float *)&v11;
    }
    __int16 v13 = 1280;
    goto LABEL_27;
  }
  if (v27 == 5124)
  {
    if (State >= 1)
    {
      uint64_t v14 = State;
      double v15 = (uint64_t *)v29;
      do
      {
        uint64_t v16 = *v15++;
        *a3++ = v16;
        --v14;
      }
      while (v14);
    }
  }
  else if (v28)
  {
    if (State >= 1)
    {
      uint64_t v17 = State;
      uint64_t v18 = (double *)v29;
      double v11 = 1.0;
      do
      {
        double v19 = *v18++;
        double v20 = v19;
        if (v19 <= 1.0) {
          double v21 = v20;
        }
        else {
          double v21 = 1.0;
        }
        if (v20 >= -1.0) {
          double v22 = v21;
        }
        else {
          double v22 = -1.0;
        }
        *a3++ = (int)(v22 * 2147483520.0) + (int)(v22 * 127.999985);
        --v17;
      }
      while (v17);
    }
  }
  else if (State >= 1)
  {
    uint64_t v23 = State;
    uint64_t v24 = (double *)v29;
    do
    {
      double v25 = *v24++;
      *(float *)&double v11 = round(v25);
      *a3++ = (int)*(float *)&v11;
      --v23;
    }
    while (v23);
  }
  return *(float *)&v11;
}

uint64_t glGetBooleanv_ExecThread(uint64_t a1, int a2, BOOL *a3)
{
  (*(void (**)(void))(a1 + 27752))();

  return glGetBooleanv_Exec(a1, a2, a3, v6, v7, v8);
}

uint64_t glGetPointerv_ExecThread(uint64_t a1, int a2, void *a3)
{
  (*(void (**)(void))(a1 + 27752))();

  return glGetPointerv_Exec(a1, a2, a3);
}

double glGetInteger64i_v_ExecThread(uint64_t a1, int a2, unsigned int a3, void *a4)
{
  (*(void (**)(void))(a1 + 27752))();

  return glGetInteger64i_v_Exec(a1, a2, a3, a4);
}

double glGetInteger64i_v_Exec(uint64_t a1, int a2, unsigned int a3, void *a4)
{
  __src[4] = *MEMORY[0x263EF8340];
  char v20 = 0;
  int v19 = 0;
  Indexedint State = gleGetIndexedState(a1, a2, a3, __src, &v19, &v20);
  if (IndexedState == -2)
  {
    double v8 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return result;
    }
    __int16 v9 = 1282;
    goto LABEL_7;
  }
  if (IndexedState == -1)
  {
    double v8 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return result;
    }
    __int16 v9 = 1280;
LABEL_7:
    *double v8 = v9;
    return result;
  }
  if (v19 == 5124)
  {
    if (IndexedState >= 1) {
      memcpy(a4, __src, 8 * IndexedState);
    }
  }
  else if (v20)
  {
    if (IndexedState >= 1)
    {
      uint64_t v10 = IndexedState;
      double v11 = (double *)__src;
      double result = 1.0;
      do
      {
        double v12 = *v11++;
        double v13 = v12;
        if (v12 <= 1.0) {
          double v14 = v13;
        }
        else {
          double v14 = 1.0;
        }
        if (v13 >= -1.0) {
          double v15 = v14;
        }
        else {
          double v15 = -1.0;
        }
        *a4++ = (int)(v15 * 2147483520.0) + (int)(v15 * 127.999985);
        --v10;
      }
      while (v10);
    }
  }
  else if (IndexedState >= 1)
  {
    uint64_t v16 = IndexedState;
    uint64_t v17 = (double *)__src;
    do
    {
      double v18 = *v17++;
      double result = v18;
      *a4++ = llround(v18);
      --v16;
    }
    while (v16);
  }
  return result;
}

float glGetIntegerIndexedv_ExecThread(uint64_t a1, int a2, unsigned int a3, _DWORD *a4)
{
  (*(void (**)(void))(a1 + 27752))();

  return glGetIntegerIndexedv_Exec(a1, a2, a3, a4);
}

float glGetIntegerIndexedv_Exec(uint64_t a1, int a2, unsigned int a3, _DWORD *a4)
{
  v25[4] = *MEMORY[0x263EF8340];
  char v24 = 0;
  int v23 = 0;
  Indexedint State = gleGetIndexedState(a1, a2, a3, v25, &v23, &v24);
  if (IndexedState == -2)
  {
    double v8 = (__int16 *)(a1 + 29832);
    if (!*(_WORD *)(a1 + 29832))
    {
      __int16 v9 = 1282;
      goto LABEL_7;
    }
  }
  else if (IndexedState == -1)
  {
    double v8 = (__int16 *)(a1 + 29832);
    if (!*(_WORD *)(a1 + 29832))
    {
      __int16 v9 = 1280;
LABEL_7:
      *double v8 = v9;
    }
  }
  else if (v23 == 5124)
  {
    if (IndexedState >= 1)
    {
      uint64_t v10 = IndexedState;
      double v11 = v25;
      do
      {
        uint64_t v12 = *v11++;
        *a4++ = v12;
        --v10;
      }
      while (v10);
    }
  }
  else if (v24)
  {
    if (IndexedState >= 1)
    {
      uint64_t v13 = IndexedState;
      double v14 = (double *)v25;
      double v7 = 1.0;
      do
      {
        double v15 = *v14++;
        double v16 = v15;
        if (v15 <= 1.0) {
          double v17 = v16;
        }
        else {
          double v17 = 1.0;
        }
        if (v16 >= -1.0) {
          double v18 = v17;
        }
        else {
          double v18 = -1.0;
        }
        *a4++ = (int)(v18 * 2147483520.0) + (int)(v18 * 127.999985);
        --v13;
      }
      while (v13);
    }
  }
  else if (IndexedState >= 1)
  {
    uint64_t v19 = IndexedState;
    char v20 = (double *)v25;
    do
    {
      double v21 = *v20++;
      *(float *)&double v7 = round(v21);
      *a4++ = (int)*(float *)&v7;
      --v19;
    }
    while (v19);
  }
  return *(float *)&v7;
}

_DWORD *glStencilFunc_Comp(uint64_t a1, int a2, int a3, int a4)
{
  double result = gleAddCommand(a1, (uint64_t)glStencilFunc_ListExec, 12);
  *double result = a2;
  result[1] = a3;
  result[2] = a4;
  return result;
}

uint64_t glStencilFunc_ListExec(uint64_t a1, int *a2)
{
  return 12;
}

_DWORD *glStencilOp_Comp(uint64_t a1, int a2, int a3, int a4)
{
  double result = gleAddCommand(a1, (uint64_t)glStencilOp_ListExec, 12);
  *double result = a2;
  result[1] = a3;
  result[2] = a4;
  return result;
}

uint64_t glStencilOp_ListExec(uint64_t a1, int *a2)
{
  return 12;
}

_DWORD *glStencilOpSeparateATI_Comp(uint64_t a1, int a2, int a3, int a4, int a5)
{
  double result = gleAddCommand(a1, (uint64_t)glStencilOpSeparateATI_ListExec, 16);
  *double result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  return result;
}

uint64_t glStencilOpSeparateATI_ListExec(uint64_t a1, int *a2)
{
  return 16;
}

uint64_t glStencilOpSeparateATI_Exec(uint64_t result, int a2, int a3, int a4, int a5)
{
  if ((a3 - 7680) >= 4 && (a3 - 34055) >= 2 && a3 && a3 != 5386
    || (a4 - 7680) >= 4 && (a4 - 34055) >= 2 && a4 && a4 != 5386
    || (a5 - 7680) >= 4 && (a5 - 34055) >= 2 && a5 && a5 != 5386)
  {
    goto LABEL_42;
  }
  int v5 = (_WORD *)(result + 15606);
  switch(a2)
  {
    case 1028:
      if ((unsigned __int16)*v5 == a3
        && *(unsigned __int16 *)(result + 15608) == a4
        && *(unsigned __int16 *)(result + 15610) == a5)
      {
        return result;
      }
      *int v5 = a3;
      *(_WORD *)(result + 15608) = a4;
      *(_WORD *)(result + 15610) = a5;
      goto LABEL_14;
    case 1029:
      if (*(unsigned __int16 *)(result + 15638) == a3
        && *(unsigned __int16 *)(result + 15640) == a4
        && *(unsigned __int16 *)(result + 15642) == a5)
      {
        return result;
      }
      *(_WORD *)(result + 15638) = a3;
      *(_WORD *)(result + 15640) = a4;
      *(_WORD *)(result + 15642) = a5;
LABEL_14:
      int v6 = *(_DWORD *)(result + 15644);
      if (v6 == 1)
      {
        int v7 = 33;
LABEL_25:
        *(_DWORD *)(result + 15644) = v7;
        *(_DWORD *)(result + 1548) |= 0x8000u;
LABEL_29:
        *(_DWORD *)(result + 1520) |= 0x10000000u;
        *(_DWORD *)(result + 28652) = 0;
        *(_DWORD *)(result + 1548) |= 0x40000u;
        return result;
      }
      unsigned int v9 = v6 | 0x20;
      goto LABEL_28;
    case 1032:
      if ((unsigned __int16)*v5 == a3
        && *(unsigned __int16 *)(result + 15608) == a4
        && *(unsigned __int16 *)(result + 15610) == a5
        && *(unsigned __int16 *)(result + 15638) == a3
        && *(unsigned __int16 *)(result + 15640) == a4
        && *(unsigned __int16 *)(result + 15642) == a5)
      {
        return result;
      }
      *int v5 = a3;
      *(_WORD *)(result + 15608) = a4;
      *(_WORD *)(result + 15610) = a5;
      *(_WORD *)(result + 15638) = a3;
      *(_WORD *)(result + 15640) = a4;
      *(_WORD *)(result + 15642) = a5;
      int v8 = *(_DWORD *)(result + 15644);
      if (v8 == 33)
      {
        int v7 = 1;
        goto LABEL_25;
      }
      unsigned int v9 = v8 & 0xFFFFFFDF;
LABEL_28:
      *(_DWORD *)(result + 15644) = v9;
      goto LABEL_29;
  }
LABEL_42:
  if (!*(_WORD *)(result + 29832)) {
    *(_WORD *)(result + 29832) = 1280;
  }
  return result;
}

_DWORD *glStencilFuncSeparate_Comp(uint64_t a1, int a2, int a3, int a4, int a5)
{
  double result = gleAddCommand(a1, (uint64_t)glStencilFuncSeparate_ListExec, 16);
  *double result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  return result;
}

uint64_t glStencilFuncSeparate_ListExec(uint64_t a1, int *a2)
{
  return 16;
}

uint64_t glStencilFuncSeparate_Exec(uint64_t result, int a2, int a3, int a4, int a5)
{
  int v5 = (_WORD *)(result + 29832);
  if ((a3 - 520) <= 0xFFFFFFF7) {
    goto LABEL_29;
  }
  int v6 = (_WORD *)(result + 15604);
  int v7 = a4 & ~(a4 >> 31);
  if (a2 != 1028)
  {
    if (a2 == 1029)
    {
      if (*(unsigned __int16 *)(result + 15636) != a3
        || *(_DWORD *)(result + 15632) != v7
        || *(_DWORD *)(result + 15628) != a5)
      {
        *(_WORD *)(result + 15636) = a3;
        *(_DWORD *)(result + 15632) = v7;
        *(_DWORD *)(result + 15628) = a5;
LABEL_12:
        int v8 = *(_DWORD *)(result + 15644);
        if (v8 == 1)
        {
          int v9 = 17;
LABEL_23:
          *(_DWORD *)(result + 15644) = v9;
          *(_DWORD *)(result + 1548) |= 0x8000u;
LABEL_27:
          *(_DWORD *)(result + 1520) |= 0x10000000u;
          *(_DWORD *)(result + 28652) = 0;
          *(_DWORD *)(result + 1548) |= 0x40000u;
          return result;
        }
        unsigned int v11 = v8 | 0x10;
        goto LABEL_26;
      }
      return result;
    }
    if (a2 == 1032)
    {
      if ((unsigned __int16)*v6 != a3
        || *(_DWORD *)(result + 15600) != v7
        || *(_DWORD *)(result + 15596) != a5
        || *(unsigned __int16 *)(result + 15636) != a3
        || *(_DWORD *)(result + 15632) != v7
        || *(_DWORD *)(result + 15628) != a5)
      {
        _WORD *v6 = a3;
        *(_DWORD *)(result + 15600) = v7;
        *(_DWORD *)(result + 15596) = a5;
        *(_WORD *)(result + 15636) = a3;
        *(_DWORD *)(result + 15632) = v7;
        *(_DWORD *)(result + 15628) = a5;
        int v10 = *(_DWORD *)(result + 15644);
        if (v10 == 17)
        {
          int v9 = 1;
          goto LABEL_23;
        }
        unsigned int v11 = v10 & 0xFFFFFFEF;
LABEL_26:
        *(_DWORD *)(result + 15644) = v11;
        goto LABEL_27;
      }
      return result;
    }
LABEL_29:
    if (!*v5) {
      *int v5 = 1280;
    }
    return result;
  }
  if ((unsigned __int16)*v6 != a3 || *(_DWORD *)(result + 15600) != v7 || *(_DWORD *)(result + 15596) != a5)
  {
    _WORD *v6 = a3;
    *(_DWORD *)(result + 15600) = v7;
    *(_DWORD *)(result + 15596) = a5;
    goto LABEL_12;
  }
  return result;
}

uint64_t glGetStringi_Exec(uint64_t a1, int a2, int a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v3 = a1 + 29832;
  if (a2 == 7939)
  {
    gleGetFilteredExtensions(a1, (uint64_t)v12);
    if (*(unsigned char *)(v3 + 2669) == 4) {
      int v5 = 16;
    }
    else {
      int v5 = 2;
    }
    uint64_t v6 = 244;
    int v7 = &word_2648319EC;
    int v8 = -1;
    do
    {
      if ((*((_DWORD *)v7 - 1) & v5) != 0 && (*((_DWORD *)v7 - 1) & 0x100) == 0)
      {
        int v10 = *v7;
        if (v10 == -1 || ((v12[v10 >> 5] >> v10)) && ++v8 == a3) {
          return *(void *)(v7 - 6);
        }
      }
      v7 += 8;
      --v6;
    }
    while (v6);
    if (!*(_WORD *)v3) {
      *(_WORD *)uint64_t v3 = 1281;
    }
    return 0;
  }
  if (*(_WORD *)v3) {
    return 0;
  }
  uint64_t result = 0;
  *(_WORD *)uint64_t v3 = 1280;
  return result;
}

uint64_t glGetStringi_ExecThread(uint64_t a1, int a2, int a3)
{
  (*(void (**)(void))(a1 + 27752))();

  return glGetStringi_Exec(a1, a2, a3);
}

uint64_t glGetString_ExecThread(uint64_t a1, int a2)
{
  (*(void (**)(void))(a1 + 27752))();

  return glGetString_Exec(a1, a2);
}

BOOL glIsTexture_ExecThread(uint64_t a1, unsigned int a2)
{
  (*(void (**)(void))(a1 + 27752))();

  return glIsTexture_Exec(a1, a2);
}

BOOL glIsTexture_Exec(uint64_t a1, unsigned int a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v4 = gleLookupHashObject(*(void *)(a1 + 19296) + 72, a2);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  return v4 != 0;
}

void glGenTextures_ExecThread(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  (*(void (**)(void))(a1 + 27752))();

  glGenTextures_Exec(a1, a2, a3);
}

_DWORD *glBindTexture_Comp(uint64_t a1, int a2, int a3)
{
  uint64_t result = gleAddCommand(a1, (uint64_t)glBindTexture_ListExec, 8);
  *uint64_t result = a2;
  result[1] = a3;
  return result;
}

uint64_t glBindTexture_ListExec(uint64_t a1, uint64_t a2)
{
  return 8;
}

void glDeleteTextures_ExecThread(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  (*(void (**)(void))(a1 + 27752))();

  glDeleteTextures_Exec(a1, a2, a3);
}

uint64_t glCompressedTexImage3D_Exec(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, int a9, uint64_t a10)
{
  unsigned int v14 = a4;
  uint64_t v17 = a10;
  uint64_t v18 = a1 + 28652;
  uint64_t v19 = (unsigned char *)(a1 + 18518);
  uint64_t result = gleSRGBToFormat(a4);
  if (!a10 && *v19)
  {
    if (!*(_WORD *)(v18 + 1180)) {
      *(_WORD *)(v18 + 1180) = 1281;
    }
    return result;
  }
  float v51 = v19;
  unsigned int v52 = result;
  uint64_t v53 = v18;
  unint64_t v56 = 0;
  int v21 = a2;
  uint64_t v55 = a3;
  LODWORD(v18) = a5;
  uint64_t result = gleCheckCompressedTexImage3DArgs(a1, v21, a3, v14, a5, a6, a7, a8, a9, &v56);
  if (!result) {
    return result;
  }
  uint64_t v22 = result;
  if (*(unsigned char *)(result + 770)) {
    return result;
  }
  int v23 = a6;
  uint64_t v24 = *(void *)(a1 + 19336);
  if (v24)
  {
    uint64_t result = gleHandleUnpackBufferInEngineNoSync(a1, *(void *)(a1 + 19336), a10 + a9, 1, a10);
    uint64_t v17 = result;
    if (!result) {
      return result;
    }
  }
  __int16 v25 = *(_WORD *)(v22 + 768);
  if ((v25 & 0x1C00) != 0x1000)
  {
    if ((*(_WORD *)(v22 + 768) & 0x1C00) != 0)
    {
      if ((*(_WORD *)(v22 + 768) & 0xC00) != 0)
      {
        if (!*(_WORD *)(v53 + 1180)) {
          *(_WORD *)(v53 + 1180) = 1282;
        }
        return result;
      }
    }
    else
    {
      *(_WORD *)(v22 + 768) = v25 | 0x1000;
    }
  }
  uint64_t v26 = v24;
  BOOL v27 = v23 != 0;
  BOOL v28 = a7 != 0;
  int v49 = v18;
  if (v27 && v28) {
    uint64_t v18 = v18;
  }
  else {
    uint64_t v18 = 0;
  }
  if (v27 && v28) {
    int v29 = a8;
  }
  else {
    int v29 = 0;
  }
  uint64_t v50 = v22 + 1032;
  LOWORD(v45) = 256;
  int v30 = gleEvaluateTextureImageChange(a1, v22, v22 + 1032 + 32 * (int)v55, 0, v55, v18, v23, a7, v29, v14, v52, 0, v45, v17);
  int v31 = v30;
  if (!v18)
  {
    uint64_t result = 0;
    goto LABEL_48;
  }
  if (!v17
    || (*(_WORD *)(v22 + 768) & 0x100) != 0
    || !*(unsigned char *)(*(void *)(a1 + 29032) + 174)
    || *(unsigned __int8 *)(v22 + 976) > (int)v55
    || *(unsigned __int8 *)(v22 + 978) < (int)v55
    || ((*(unsigned __int16 *)(v22 + 984) >> v55) & 1) == 0)
  {
    if (v24 && *(void *)(v24 + 192))
    {
      uint64_t v37 = v24 + 40;
      int v38 = v30;
      gleSynchronizeBufferOnCurrentDevicesForRead(a1, v37);
      int v31 = v38;
    }
    if (!v17)
    {
LABEL_46:
      uint64_t result = 0;
      *(_DWORD *)(v22 + 968) = 65538;
      goto LABEL_48;
    }
LABEL_41:
    if ((*(_WORD *)(v22 + 768) & 0x100) == 0)
    {
      int v48 = v31;
      uint64_t v39 = v50 + 32 * (int)v55;
      char v41 = *(unsigned char *)(v39 + 11);
      float v40 = (unsigned char *)(v39 + 11);
      if ((v41 & 1) != 0 || gfxAllocateTextureLevel())
      {
        LOBYTE(v46) = 0;
        gleTextureImagePut((_DWORD *)a1, v22, v22 + 1032 + 32 * (int)v55, 0, 0, 0, v49, v23, a7, v56, v46, 0, v17);
        uint64_t result = 0;
        *(_DWORD *)(v22 + 968) = *(_DWORD *)(v50 + 32 * (int)v55 + 16);
        *v40 |= 0x10u;
        float v42 = (_DWORD *)v53;
        *(_WORD *)(v22 + 996) |= *(_WORD *)(v22 + 984) & (unsigned __int16)(1 << v55);
        uint64_t v43 = v22 + 24 * *(unsigned __int8 *)(v53 + 3847);
        *(unsigned char *)(v43 + 116) |= 4u;
        *(_WORD *)(v43 + 104) |= 1 << v55;
      }
      else
      {
        float v42 = (_DWORD *)v53;
        uint64_t result = 0;
        if (!*(_WORD *)(v53 + 1180)) {
          *(_WORD *)(v53 + 1180) = 1285;
        }
      }
      int v31 = v48;
      goto LABEL_49;
    }
    goto LABEL_46;
  }
  uint64_t v32 = v18;
  int v47 = v30;
  uint64_t v33 = *(void *)(a1 + 8 * *((unsigned __int16 *)v51 + 2625) + 23936);
  if (v33) {
    unsigned int v34 = (unsigned char *)(v33 + 198);
  }
  else {
    unsigned int v34 = (unsigned char *)(v22 + 926);
  }
  BOOL v35 = (*v34 & 1) == 0;
  unsigned int v36 = v52;
  *(_WORD *)(v22 + 968) = v52;
  *(_WORD *)(v22 + 970) = 0;
  if (!v26)
  {
LABEL_35:
    uint64_t result = (*(uint64_t (**)(void, void, void, uint64_t, void, void, void, uint64_t, unint64_t, void, uint64_t, _DWORD, void, BOOL))(*(void *)(a1 + 29448) + 368))(*(void *)(a1 + 29016), *(void *)(v22 + 8 * *(unsigned __int8 *)(v53 + 3847)), 0, v55, 0, 0, 0, v32, __PAIR64__(a7, v23), v36, v17, 0, 0, v35);
    int v31 = v47;
    if (result) {
      goto LABEL_36;
    }
    goto LABEL_41;
  }
  uint64_t result = (*(uint64_t (**)(void, void, void, uint64_t, void, void, void))(*(void *)(a1 + 29448)
                                                                                              + 368))(*(void *)(a1 + 29016), *(void *)(v22 + 8 * *(unsigned __int8 *)(v53 + 3847)), 0, v55, 0, 0, 0);
  int v31 = v47;
  if (!result)
  {
    unsigned int v36 = v52;
    uint64_t v32 = v18;
    if (*(void *)(v26 + 192))
    {
      gleSynchronizeBufferOnCurrentDevicesForRead(a1, v26 + 40);
      uint64_t v32 = v18;
      unsigned int v36 = v52;
    }
    goto LABEL_35;
  }
LABEL_36:
  *(void *)(v22 + 536) = *(void *)(a1 + 29024);
  *(unsigned char *)(v50 + 32 * (int)v55 + 11) |= 0x40u;
LABEL_48:
  float v42 = (_DWORD *)v53;
LABEL_49:
  if ((v31 & 0xC0000001) != 0)
  {
    if (v31 < 0) {
      int v44 = 134356992;
    }
    else {
      int v44 = 139264;
    }
    *float v42 = 0;
    *(_DWORD *)(a1 + 1548) |= v44;
  }
  else if (result == 1)
  {
    return result;
  }
  return gleDirtyTextureObjectCurrentBindPointsNoFBO(a1, v22);
}

uint64_t glCompressedTexSubImage3D_Exec(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, unsigned int a10, int a11, uint64_t a12)
{
  unint64_t v44 = 0;
  uint64_t result = gleCheckCompressedTexSubImage3DArgs(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, &v44);
  if (result)
  {
    uint64_t v19 = result;
    if (!*(unsigned char *)(result + 770))
    {
      uint64_t v20 = a12;
      uint64_t v21 = *(void *)(a1 + 19336);
      if (v21)
      {
        uint64_t v22 = *(void *)(a1 + 19336);
        uint64_t result = gleHandleUnpackBufferInEngineNoSync(a1, v21, a12 + a11, 1, a12);
        uint64_t v20 = result;
        if (!result) {
          return result;
        }
      }
      else
      {
        uint64_t v22 = 0;
      }
      if (a7 && a8 && a9)
      {
        float v42 = (unsigned __int8 *)(a1 + 32499);
        uint64_t v40 = v20;
        uint64_t v41 = v19 + 1032;
        unsigned int v23 = gleSRGBToFormat(a10);
        if (!*(void *)(v19 + 536)) {
          gfxWaitTextureOnDevices();
        }
        if (*(unsigned __int8 *)(v19 + 976) <= (int)a3
          && *(unsigned __int8 *)(v19 + 978) >= (int)a3
          && ((1 << a3) & *(unsigned __int16 *)(v19 + 984)) != 0)
        {
          uint64_t v24 = *(void *)(a1 + 8 * *(unsigned __int16 *)(a1 + 23768) + 23936);
          if (v24) {
            __int16 v25 = (unsigned char *)(v24 + 198);
          }
          else {
            __int16 v25 = (unsigned char *)(v19 + 926);
          }
          BOOL v26 = (*v25 & 1) == 0;
          *(_WORD *)(v19 + 968) = v23;
          *(_WORD *)(v19 + 970) = 0;
          if (v22)
          {
            LODWORD(v38) = v26;
            HIDWORD(v38) = v26;
            uint64_t result = (*(uint64_t (**)(void, void, void, uint64_t, uint64_t, uint64_t, void, uint64_t, unint64_t, void, uint64_t, _DWORD, void, uint64_t))(*(void *)(a1 + 29448) + 368))(*(void *)(a1 + 29016), *(void *)(v19 + 8 * *v42), 0, a3, a4, a5, a6, a7, __PAIR64__(a9, a8), v23, v40, 0, *(void *)(v22 + 40 + 8 * *v42), v38);
            if (result)
            {
LABEL_24:
              *(void *)(v19 + 536) = *(void *)(a1 + 29024);
              uint64_t v27 = v41 + 32 * (int)a3;
              char v30 = *(unsigned char *)(v27 + 11);
              int v29 = (char *)(v27 + 11);
              char v28 = v30;
              if ((v30 & 0x10) != 0)
              {
                if ((v28 & 9) == 0)
                {
                  uint64_t result = gfxFreeTextureLevel();
                  char v28 = *v29;
                }
                v28 &= ~0x10u;
                *(_WORD *)(v19 + 996) &= ~(unsigned __int16)(1 << a3);
              }
              char *v29 = v28 | 0x40;
              return result;
            }
            BOOL v26 = v39;
            if (*(void *)(v22 + 192))
            {
              gleSynchronizeBufferOnCurrentDevicesForRead(a1, v22 + 40);
              BOOL v26 = v39;
            }
          }
          uint64_t result = (*(uint64_t (**)(void, void, void, uint64_t, uint64_t, uint64_t, void, uint64_t, unint64_t, void, uint64_t, _DWORD, void, BOOL))(*(void *)(a1 + 29448) + 368))(*(void *)(a1 + 29016), *(void *)(v19 + 8 * *v42), 0, a3, a4, a5, a6, a7, __PAIR64__(a9, a8), v23, v40, 0, 0, v26);
          if (result) {
            goto LABEL_24;
          }
        }
        else if (v22 && *(void *)(v22 + 192))
        {
          gleSynchronizeBufferOnCurrentDevicesForRead(a1, v22 + 40);
        }
        uint64_t v31 = v41 + 32 * (int)a3;
        char v34 = *(unsigned char *)(v31 + 11);
        uint64_t v33 = (char *)(v31 + 11);
        char v32 = v34;
        if ((v34 & 0x40) != 0)
        {
          gleSynchronizeTextureLevelOnCurrentDevices(a1, v19);
          uint64_t v35 = v19 + 1032 + 32 * (int)a3;
        }
        else
        {
          uint64_t v35 = v19 + 1032 + 32 * (int)a3;
          if ((v32 & 0x10) == 0)
          {
            if (!*(void *)(v41 + 32 * (int)a3 + 24))
            {
              if (!gfxAllocateTextureLevel())
              {
                uint64_t v35 = v19 + 1032 + 32 * (int)a3;
                if (!*(_WORD *)(a1 + 29832)) {
                  *(_WORD *)(a1 + 29832) = 1285;
                }
                goto LABEL_39;
              }
              char v32 = *v33;
              uint64_t v35 = v19 + 1032 + 32 * (int)a3;
            }
            *uint64_t v33 = v32 | 0x10;
          }
        }
LABEL_39:
        uint64_t v36 = v35;
        gfxModifyPluginTextureLevel();
        (*(void (**)(void, uint64_t, void, void))(*(void *)(a1 + 29496) + 280))(*(void *)(a1 + 29464), 1, 0, *(void *)(v19 + 8 * *(unsigned __int8 *)(a1 + 32500)));
        if ((*v33 & 0x10) != 0)
        {
          LOBYTE(v37) = 0;
          gleTextureImagePut((_DWORD *)a1, v19, v36, a4, a5, a6, a7, a8, a9, v44, v37, 0, v40);
        }
        return gleDirtyTextureObjectCurrentBindPointsNoFBO(a1, v19);
      }
    }
  }
  return result;
}

uint64_t glCompressedTexSubImage2D_Exec(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, unsigned int a7, unsigned int a8, int a9, uint64_t a10)
{
  unint64_t v40 = 0;
  double v16 = (unsigned __int8 *)(a1 + 32493);
  if (((a8 == 33776) & ((*(_WORD *)(a1 + 32493) & 0x10) >> 4)) != 0) {
    uint64_t v17 = 33777;
  }
  else {
    uint64_t v17 = a8;
  }
  uint64_t result = gleCheckCompressedTexSubImage2DArgs(a1, a2, a3, a4, a5, a6, a7, v17, a9, &v40);
  if (result)
  {
    uint64_t v19 = result;
    if (!*(unsigned char *)(result + 770))
    {
      uint64_t v20 = a10;
      uint64_t v21 = *(void *)(a1 + 19336);
      if (v21)
      {
        uint64_t v22 = *(void *)(a1 + 19336);
        uint64_t result = gleHandleUnpackBufferInEngineNoSync(a1, v21, a10 + a9, 1, a10);
        uint64_t v20 = result;
        if (!result || !a6) {
          return result;
        }
      }
      else
      {
        uint64_t v22 = 0;
        if (!a6) {
          return result;
        }
      }
      if (!a7) {
        return result;
      }
      uint64_t v37 = v20;
      if (v16[10]) {
        uint64_t v36 = mach_absolute_time();
      }
      else {
        uint64_t v36 = 0;
      }
      if ((a2 - 34069) >= 6) {
        uint64_t v23 = 0;
      }
      else {
        uint64_t v23 = (a2 - 34069);
      }
      uint64_t v24 = v23;
      uint64_t v38 = v19 + 480 * v23 + 32 * (int)a3 + 1032;
      unsigned int v25 = gleSRGBToFormat(v17);
      if (!*(void *)(v19 + 536)) {
        gfxWaitTextureOnDevices();
      }
      if (*(unsigned __int8 *)(v19 + 976) <= (int)a3
        && *(unsigned __int8 *)(v19 + 978) >= (int)a3
        && ((1 << a3) & *(unsigned __int16 *)(v19 + 2 * v24 + 984)) != 0)
      {
        uint64_t v26 = *(void *)(a1 + 8 * *(unsigned __int16 *)(a1 + 23768) + 23936);
        if (v26) {
          uint64_t v27 = (unsigned char *)(v26 + 198);
        }
        else {
          uint64_t v27 = (unsigned char *)(v19 + 926);
        }
        BOOL v28 = (*v27 & 1) == 0;
        *(_WORD *)(v19 + 968) = v25;
        *(_WORD *)(v19 + 970) = 0;
        if (v22)
        {
          BOOL v35 = v28;
          uint64_t result = (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t, void, void, uint64_t, uint64_t, void, uint64_t, _DWORD, void, BOOL))(*(void *)(a1 + 29448) + 368))(*(void *)(a1 + 29016), *(void *)(v19 + 8 * v16[6]), v24, a3, a4, a5, 0, a6, a7 | 0x100000000, v25, v37, 0, *(void *)(v22 + 40 + 8 * v16[6]), v28);
          if (result)
          {
LABEL_32:
            *(void *)(v19 + 536) = *(void *)(a1 + 29024);
            int v29 = (char *)(v19 + 480 * v24 + 32 * (int)a3 + 1043);
            char v30 = *v29;
            if ((*v29 & 0x10) != 0)
            {
              if ((*v29 & 9) == 0)
              {
                uint64_t result = gfxFreeTextureLevel();
                char v30 = *v29;
              }
              v30 &= ~0x10u;
              *(_WORD *)(v19 + 2 * v24 + 996) &= ~(unsigned __int16)(1 << a3);
            }
            char *v29 = v30 | 0x40;
LABEL_50:
            if (v16[10])
            {
              uint64_t result = mach_absolute_time();
              *(void *)(a1 + 19168) += result - v36;
            }
            return result;
          }
          BOOL v28 = v35;
          if (*(void *)(v22 + 192))
          {
            gleSynchronizeBufferOnCurrentDevicesForRead(a1, v22 + 40);
            BOOL v28 = v35;
          }
        }
        uint64_t result = (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t, void, void, uint64_t, uint64_t, void, uint64_t, _DWORD, void, BOOL))(*(void *)(a1 + 29448) + 368))(*(void *)(a1 + 29016), *(void *)(v19 + 8 * v16[6]), v24, a3, a4, a5, 0, a6, a7 | 0x100000000, v25, v37, 0, 0, v28);
        if (result) {
          goto LABEL_32;
        }
      }
      else if (v22 && *(void *)(v22 + 192))
      {
        gleSynchronizeBufferOnCurrentDevicesForRead(a1, v22 + 40);
      }
      uint64_t v31 = (char *)(v19 + 480 * v24 + 32 * (int)a3 + 1043);
      char v32 = *v31;
      if ((*v31 & 0x40) != 0)
      {
        uint64_t v33 = v38;
        gleSynchronizeTextureLevelOnCurrentDevices(a1, v19);
      }
      else
      {
        uint64_t v33 = v38;
        if ((*v31 & 0x10) == 0)
        {
          if (!*(void *)(v19 + 480 * v24 + 32 * (int)a3 + 1056))
          {
            if (!gfxAllocateTextureLevel())
            {
              if (!*(_WORD *)(a1 + 29832)) {
                *(_WORD *)(a1 + 29832) = 1285;
              }
              goto LABEL_47;
            }
            char v32 = *v31;
          }
          *uint64_t v31 = v32 | 0x10;
        }
      }
LABEL_47:
      gfxModifyPluginTextureLevel();
      (*(void (**)(void, uint64_t, void, void))(*(void *)(a1 + 29496) + 280))(*(void *)(a1 + 29464), 1, 0, *(void *)(v19 + 8 * v16[7]));
      if ((*v31 & 0x10) != 0)
      {
        LOBYTE(v34) = 0;
        gleTextureImagePut((_DWORD *)a1, v19, v33, a4, a5, 0, a6, a7, 1, v40, v34, 0, v37);
      }
      uint64_t result = gleDirtyTextureObjectCurrentBindPointsNoFBO(a1, v19);
      goto LABEL_50;
    }
  }
  return result;
}

unsigned char *glGetCompressedTexImage_ExecThread(uint64_t a1, int a2, unsigned int a3, uint64_t a4)
{
  (*(void (**)(void))(a1 + 27752))();

  return glGetCompressedTexImage_Exec(a1, a2, a3, a4);
}

unsigned char *glGetCompressedTexImage_Exec(uint64_t a1, int a2, unsigned int a3, uint64_t a4)
{
  uint64_t result = (unsigned char *)gleLookUpNonProxyTexture(a1, a2);
  if (!result)
  {
    int v9 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return result;
    }
    __int16 v10 = 1280;
    goto LABEL_18;
  }
  if (a3 >= 0xF)
  {
    int v9 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return result;
    }
    __int16 v10 = 1281;
LABEL_18:
    *int v9 = v10;
    return result;
  }
  unsigned int v11 = result;
  if (!result[555])
  {
    int v9 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return result;
    }
    __int16 v10 = 1282;
    goto LABEL_18;
  }
  if ((a2 - 34069) >= 6) {
    unsigned int v12 = 0;
  }
  else {
    unsigned int v12 = a2 - 34069;
  }
  uint64_t v13 = a3;
  uint64_t v14 = (uint64_t)&result[480 * v12 + 32 * a3];
  if ((*(unsigned char *)(v14 + 1043) & 0x20) != 0)
  {
    if (result[976] <= a3
      && (*(unsigned char *)(v14 + 1043) & 0x40) != 0
      && result[978] >= a3)
    {
      gleSynchronizeTextureLevelOnCurrentDevices(a1, (uint64_t)result);
      gfxModifyPluginTextureLevel();
    }
    else if ((*(unsigned char *)(v14 + 1043) & 0x10) == 0)
    {
      return result;
    }
    double v15 = (unsigned __int16 *)&v11[480 * v12 + 32 * a3];
    glgConvertType();
    glgConvertType();
    int v16 = gleRowBytes(v15[524], v15[525], v15[522]);
    int v17 = gleSRGBToFormat(*((unsigned __int16 *)v11 + 480));
    gleRowBytes(v17, 0, v15[518]);
    if (v15[525]) {
      int CompressedImageBytes = v16 * *(unsigned __int16 *)&v11[480 * v12 + 1038 + 32 * v13];
    }
    else {
      int CompressedImageBytes = glgGetCompressedImageBytes();
    }
    uint64_t result = (unsigned char *)glgGetCompressedImageBytes();
    int v19 = (int)result;
    uint64_t v20 = *(void *)(a1 + 19328);
    if (!v20
      || (uint64_t result = (unsigned char *)gleHandlePackBufferInEngine(a1, v20, a4 + result, 1, a4),
          (a4 = (uint64_t)result) != 0))
    {
      if ((*(unsigned char *)(v14 + 1043) & 1) == 0 || a4 != *(void *)&v11[480 * v12 + 1056 + 32 * v13] || v15[525])
      {
        uint64_t v21 = (uint64_t)&v11[480 * v12 + 32 * v13];
        if (*(_WORD *)(v21 + 1040))
        {
          int v22 = 0;
          int v23 = 0;
          unint64_t v24 = 0;
          unsigned int v25 = (unsigned __int16 *)(v21 + 1040);
          do
          {
            uint64_t result = (unsigned char *)glgProcessPixelsWithProcessor();
            ++v24;
            v23 += v19;
            v22 += CompressedImageBytes;
          }
          while (v24 < *v25);
        }
      }
    }
  }
  return result;
}

uint64_t glCompressedTexImage2D_FlushExec(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, unsigned int a6, int a7, int a8, uint64_t a9)
{
  glCompressedTexImage2D_Exec(a1, a2, a3, a4, a5, a6, a7, a8, a9);

  return glFlush_Exec(a1, v10, v11, v12);
}

uint64_t glCompressedTexSubImage2D_FlushExec(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, unsigned int a7, unsigned int a8, int a9, uint64_t a10)
{
  glCompressedTexSubImage2D_Exec(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);

  return glFlush_Exec(a1, v11, v12, v13);
}

void *glCompressedTexImage2D_PackThread(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, unsigned int a6, int a7, int a8, uint64_t a9)
{
  if (*(void *)(a1 + 26488) || *(unsigned char *)(a1 + 26662))
  {
    uint64_t result = gleAddCommand(a1, (uint64_t)glCompressedTexImage2D_UnpackThread, 40);
    *(_DWORD *)uint64_t result = a2;
    *((_DWORD *)result + 1) = a3;
    *((_DWORD *)result + 2) = a4;
    *((_DWORD *)result + 3) = a5;
    *((_DWORD *)result + 4) = a6;
    *((_DWORD *)result + 6) = a7;
    *((_DWORD *)result + 7) = a8;
    result[4] = a9;
  }
  else
  {
    (*(void (**)(uint64_t))(a1 + 27752))(a1);
    return (void *)glCompressedTexImage2D_Exec(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  }
  return result;
}

uint64_t glCompressedTexImage2D_UnpackThread(uint64_t a1, uint64_t a2)
{
  return 40;
}

void *glCompressedTexImage3D_PackThread(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, int a9, uint64_t a10)
{
  if (*(void *)(a1 + 26488) || *(unsigned char *)(a1 + 26662))
  {
    uint64_t result = gleAddCommand(a1, (uint64_t)glCompressedTexImage3D_UnpackThread, 40);
    *(_DWORD *)uint64_t result = a2;
    *((_DWORD *)result + 1) = a3;
    *((_DWORD *)result + 2) = a4;
    *((_DWORD *)result + 3) = a5;
    *((_DWORD *)result + 4) = a6;
    *((_DWORD *)result + 5) = a7;
    *((_DWORD *)result + 6) = a8;
    *((_DWORD *)result + 7) = a9;
    result[4] = a10;
  }
  else
  {
    (*(void (**)(uint64_t))(a1 + 27752))(a1);
    return (void *)glCompressedTexImage3D_Exec(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  }
  return result;
}

uint64_t glCompressedTexImage3D_UnpackThread(uint64_t a1, uint64_t a2)
{
  return 40;
}

void *glCompressedTexSubImage2D_PackThread(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, unsigned int a7, unsigned int a8, int a9, uint64_t a10)
{
  if (*(void *)(a1 + 26488) || *(unsigned char *)(a1 + 26662))
  {
    uint64_t result = gleAddCommand(a1, (uint64_t)glCompressedTexSubImage2D_UnpackThread, 48);
    *(_DWORD *)uint64_t result = a2;
    *((_DWORD *)result + 1) = a3;
    *((_DWORD *)result + 2) = a4;
    *((_DWORD *)result + 3) = a5;
    *((_DWORD *)result + 5) = a6;
    *((_DWORD *)result + 6) = a7;
    *((_DWORD *)result + 8) = a8;
    *((_DWORD *)result + 9) = a9;
    result[5] = a10;
  }
  else
  {
    (*(void (**)(uint64_t))(a1 + 27752))(a1);
    return (void *)glCompressedTexSubImage2D_Exec(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  }
  return result;
}

uint64_t glCompressedTexSubImage2D_UnpackThread(uint64_t a1, uint64_t a2)
{
  return 48;
}

void *glCompressedTexSubImage3D_PackThread(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, unsigned int a10, int a11, uint64_t a12)
{
  if (*(void *)(a1 + 26488) || *(unsigned char *)(a1 + 26662))
  {
    uint64_t result = gleAddCommand(a1, (uint64_t)glCompressedTexSubImage3D_UnpackThread, 48);
    *(_DWORD *)uint64_t result = a2;
    *((_DWORD *)result + 1) = a3;
    *((_DWORD *)result + 2) = a4;
    *((_DWORD *)result + 3) = a5;
    *((_DWORD *)result + 4) = a6;
    *((_DWORD *)result + 5) = a7;
    *((_DWORD *)result + 6) = a8;
    *((_DWORD *)result + 7) = a9;
    *((_DWORD *)result + 8) = a10;
    *((_DWORD *)result + 9) = a11;
    result[5] = a12;
  }
  else
  {
    (*(void (**)(uint64_t))(a1 + 27752))(a1);
    return (void *)glCompressedTexSubImage3D_Exec(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  }
  return result;
}

uint64_t glCompressedTexSubImage3D_UnpackThread(uint64_t a1, uint64_t a2)
{
  return 48;
}

uint64_t glCompressedTexImage2D_FlushExecThread(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, unsigned int a6, int a7, int a8, uint64_t a9)
{
  (*(void (**)(void))(a1 + 27752))();
  glCompressedTexImage2D_Exec(a1, a2, a3, a4, a5, a6, a7, a8, a9);

  return glFlush_Exec(a1, v17, v18, v19);
}

uint64_t glCompressedTexSubImage2D_FlushExecThread(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, unsigned int a7, unsigned int a8, int a9, uint64_t a10)
{
  (*(void (**)(void))(a1 + 27752))();
  glCompressedTexSubImage2D_Exec(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);

  return glFlush_Exec(a1, v18, v19, v20);
}

uint64_t glMultiTexCoord4_ListExec(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 16 * (*(_DWORD *)a2 & 7) + 8560) = *(_OWORD *)(a2 + 4);
  return 20;
}

uint64_t glMultiTexCoord4f_Exec(uint64_t result, char a2, float a3, float a4, float a5, float a6)
{
  uint64_t v6 = (float *)(result + 16 * (a2 & 7 | 8u));
  v6[2108] = a3;
  v6[2109] = a4;
  v6[2110] = a5;
  v6[2111] = a6;
  return result;
}

float *glMultiTexCoord4f_Comp(uint64_t a1, int a2, float a3, float a4, float a5, float a6)
{
  int v10 = a2 - 33984;
  uint64_t result = (float *)gleAddCommand(a1, (uint64_t)glMultiTexCoord4_ListExec, 20);
  *(_DWORD *)uint64_t result = v10;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  result[4] = a6;
  return result;
}

float32x4_t glMultiTexCoord4x_Exec(uint64_t a1, char a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6)
{
  v6.i64[0] = __PAIR64__(a4, a3);
  v6.i64[1] = __PAIR64__(a6, a5);
  float32x4_t result = vmulq_f32(vcvtq_f32_s32(v6), (float32x4_t)vdupq_n_s32(0x37800000u));
  *(float32x4_t *)(a1 + 16 * (a2 & 7 | 8u) + 8432) = result;
  return result;
}

float32x4_t glMultiTexCoord4x_PackThread(uint64_t a1, int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6)
{
  v6.i64[0] = __PAIR64__(a4, a3);
  v6.i64[1] = __PAIR64__(a6, a5);
  float32x4_t v10 = vcvtq_f32_s32(v6);
  int v7 = a2 - 33984;
  int v8 = gleAddCommand(a1, (uint64_t)glMultiTexCoord4_ListExec, 20);
  *(_DWORD *)int v8 = v7;
  float32x4_t result = vmulq_f32(v10, (float32x4_t)vdupq_n_s32(0x37800000u));
  *(float32x4_t *)((char *)v8 + 4) = result;
  return result;
}

uint64_t gleUpdateReadFramebufferStateInline(uint64_t a1, double a2, double a3, double a4)
{
  uint64_t v5 = a1 + 19152;
  if ((*(unsigned char *)(a1 + 1540) & 4) != 0)
  {
    int MatrixIdentifier = gleGenerateMatrixIdentifier(a1, a1 + 9488, a2, a3, a4);
    *(_DWORD *)uint64_t v5 = *(_DWORD *)v5 & 0xFFFFFEFF | ((MatrixIdentifier != -1074791426) << 8);
    *(_DWORD *)(v5 + 10580) = MatrixIdentifier;
  }
  if ((*(unsigned char *)(v5 + 10651) & 0x8A) == 0) {
    return 1;
  }
  Framebufferint State = gleUpdateReadFramebufferState(a1);
  if (!FramebufferState) {
    return 1;
  }
  __int16 v8 = FramebufferState;
  if (FramebufferState == 16711680 || *(_WORD *)(a1 + 29832)) {
    return 0;
  }
  uint64_t result = 0;
  *(_WORD *)(a1 + 29832) = v8;
  return result;
}

_DWORD *glCopyTexSubImage2D_Comp(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  uint64_t result = gleAddCommand(a1, (uint64_t)glCopyTexSubImage2D_ListExec, 32);
  *uint64_t result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  result[4] = a6;
  result[5] = a7;
  result[6] = a8;
  result[7] = a9;
  return result;
}

uint64_t glCopyTexSubImage2D_ListExec(uint64_t a1, uint64_t a2, double a3, double a4, double a5)
{
  return 32;
}

_DWORD *glCopyTexSubImage3D_Comp(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  uint64_t result = gleAddCommand(a1, (uint64_t)glCopyTexSubImage3D_ListExec, 36);
  *uint64_t result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  result[4] = a6;
  result[5] = a7;
  result[6] = a8;
  result[7] = a9;
  result[8] = a10;
  return result;
}

uint64_t glCopyTexSubImage3D_ListExec(uint64_t a1, uint64_t a2, double a3, double a4, double a5)
{
  return 36;
}

uint64_t glCopyTexSubImage3D_Exec(uint64_t result, int a2, uint64_t a3, int a4, int a5, uint64_t a6, unsigned int a7, unsigned int a8, double a9, double a10, double a11, int a12, int a13)
{
  double v20 = (void *)result;
  uint64_t v21 = result + 29832;
  uint64_t v22 = result + 19152;
  if ((*(unsigned char *)(result + 1540) & 4) != 0)
  {
    uint64_t result = gleGenerateMatrixIdentifier(result, result + 9488, a9, a10, a11);
    *(_DWORD *)uint64_t v22 = *(_DWORD *)v22 & 0xFFFFFEFF | ((result != -1074791426) << 8);
    *(_DWORD *)(v22 + 10580) = result;
  }
  if ((*(unsigned char *)(v22 + 10651) & 0x8A) != 0)
  {
    uint64_t result = gleUpdateReadFramebufferState((uint64_t)v20);
    if (result)
    {
      if (result != 16711680 && !*(_WORD *)v21) {
        *(_WORD *)uint64_t v21 = result;
      }
      return result;
    }
  }
  if (a12) {
    BOOL v23 = a13 == 0;
  }
  else {
    BOOL v23 = 1;
  }
  if (!v23)
  {
    uint64_t result = gleCheckCopyTexSubImage3DArgs((uint64_t)v20, a2, a3, a4, a5, a6, a12, a13, 1);
    if (result)
    {
      uint64_t v24 = result;
      if (!*(unsigned char *)(result + 770))
      {
        uint64_t v25 = result + 1032;
        uint64_t v26 = (int)a3;
        uint64_t v51 = result + 1032 + 32 * (int)a3;
        if (!*(void *)(result + 536) && (*(_WORD *)(result + 768) & 0x800) == 0)
        {
          uint64_t v48 = result + 1032;
          gfxWaitTextureOnDevices();
          uint64_t v26 = (int)a3;
          uint64_t v25 = v48;
        }
        if (*(unsigned __int8 *)(v24 + 976) <= (int)a3
          && *(unsigned __int8 *)(v24 + 978) >= (int)a3
          && ((1 << a3) & *(unsigned __int16 *)(v24 + 984)) != 0)
        {
          uint64_t v52 = 0;
          uint64_t v47 = v26;
          uint64_t v49 = v25;
          if ((*(unsigned char *)(v24 + 898) & 1) != 0 && *(_DWORD *)(v24 + 884) == a3)
          {
            gleGenerateEmptyMipmaps((uint64_t)v20, v24, 0, a3, *(unsigned __int8 *)(v24 + 975), 0, 0);
            if (*(_DWORD *)(v20[3621] + 480))
            {
              uint64_t result = gleUpdateReadFramebufferStateInline((uint64_t)v20, v27, v28, v29);
              if (!result) {
                return result;
              }
            }
            char v46 = 0;
            int v50 = 1;
          }
          else
          {
            int v50 = 0;
            char v46 = 1;
          }
          uint64_t v34 = v20[3621];
          if (v34)
          {
            int v35 = *(unsigned __int16 *)(v34 + 474);
            int v36 = *(unsigned __int16 *)(v34 + 476);
          }
          else
          {
            int v35 = *(_DWORD *)(v22 + 10480);
            int v36 = *(_DWORD *)(v22 + 10484);
          }
          unsigned int v56 = a7;
          int v54 = a12;
          unsigned int v55 = a8;
          int v53 = a13;
          gleClipReadableRange((uint64_t)v20, v35, v36, (int *)&v56, (int *)&v55, &v54, &v53, (_DWORD *)&v52 + 1, &v52);
          uint64_t v37 = v20[*(unsigned __int16 *)(v22 + 4616) + 2992];
          if (v37) {
            uint64_t v38 = (char *)(v37 + 198);
          }
          else {
            uint64_t v38 = (char *)(v24 + 926);
          }
          char v39 = *v38;
          *(_DWORD *)(v24 + 968) = 65540;
          if (v54 >= 1 && v53 >= 1)
          {
            uint64_t result = (*(uint64_t (**)(void, void, void, uint64_t, void, void, uint64_t, void, unint64_t, unint64_t))(v20[3681] + 360))(v20[3627], *(void *)(v24 + 8 * *(unsigned __int8 *)(v21 + 2667)), 0, a3, (HIDWORD(v52) + a4), (v52 + a5), a6, v56, __PAIR64__(v54, v55), __PAIR64__((v39 & 1) == 0, v53));
            if (result)
            {
              if ((*(_WORD *)(v24 + 768) & 0x800) == 0)
              {
                *(void *)(v24 + 536) = v20[3628];
                uint64_t v40 = v49 + 32 * v47;
                char v43 = *(unsigned char *)(v40 + 11);
                float v42 = (char *)(v40 + 11);
                char v41 = v43;
                if ((v43 & 0x10) != 0)
                {
                  if ((v41 & 9) == 0)
                  {
                    uint64_t result = gfxFreeTextureLevel();
                    char v41 = *v42;
                  }
                  v41 &= ~0x10u;
                  *(_WORD *)(v24 + 996) &= ~(unsigned __int16)(1 << a3);
                }
                *float v42 = v41 | 0x40;
                if ((v46 & 1) == 0)
                {
                  int v44 = *(unsigned __int8 *)(v24 + 975);
                  if (v44 > (int)a3)
                  {
                    uint64_t v45 = (unsigned char *)(v24 + 32 * a3 + 1075);
                    do
                    {
                      *v45 |= 0x40u;
                      v45 += 32;
                      LODWORD(a3) = a3 + 1;
                    }
                    while ((int)a3 < v44);
                  }
                }
              }
              return result;
            }
          }
          uint64_t v26 = v47;
          uint64_t v25 = v49;
        }
        else
        {
          int v50 = 0;
        }
        uint64_t v30 = v25 + 32 * v26;
        char v33 = *(unsigned char *)(v30 + 11);
        char v32 = (char *)(v30 + 11);
        char v31 = v33;
        if ((v33 & 0x40) != 0)
        {
          gleSynchronizeTextureLevelOnCurrentDevices((uint64_t)v20, v24);
        }
        else if ((v31 & 0x10) == 0)
        {
          if (!*(void *)(v25 + 32 * v26 + 24))
          {
            if (!gfxAllocateTextureLevel())
            {
              if (!*(_WORD *)v21) {
                *(_WORD *)uint64_t v21 = 1285;
              }
              goto LABEL_33;
            }
            char v31 = *v32;
          }
          *char v32 = v31 | 0x10;
        }
LABEL_33:
        gfxModifyPluginTextureLevel();
        if ((*(_WORD *)(v24 + 768) & 0x800) == 0) {
          (*(void (**)(void, uint64_t, void, void))(v20[3687] + 280))(v20[3683], 1, 0, *(void *)(v24 + 8 * *(unsigned __int8 *)(v21 + 2668)));
        }
        if ((*v32 & 0x10) != 0) {
          gleTextureSubImageCopy((uint64_t)v20, v24, v51, a4, a5, a6, a7, a8, a12, a13);
        }
        if ((*(unsigned char *)(v24 + 898) & 1) == 0) {
          return gleDirtyTextureLevelCurrentBindPointsData((uint64_t)v20, v24, v51);
        }
        if (*(_DWORD *)(v24 + 884) != a3) {
          return gleDirtyTextureLevelCurrentBindPointsData((uint64_t)v20, v24, v51);
        }
        uint64_t result = gleGenMipmaps((uint64_t)v20, v24, 0, a3, 1, v50 == 0);
        if (!result) {
          return gleDirtyTextureLevelCurrentBindPointsData((uint64_t)v20, v24, v51);
        }
      }
    }
  }
  return result;
}

void *glTexEnvf_Comp(uint64_t a1, int a2, int a3, float a4)
{
  uint64_t result = gleAddCommand(a1, (uint64_t)glTexEnvf_ListExec, 12);
  *(_DWORD *)uint64_t result = a2;
  *((_DWORD *)result + 1) = a3;
  *((float *)result + 2) = a4;
  return result;
}

uint64_t glTexEnvf_ListExec(uint64_t a1, int *a2, double a3)
{
  LODWORD(a3) = a2[2];
  glTexEnvf_Exec(a1, *a2, a2[1], a3);
  return 12;
}

uint64_t glTexEnvx_Exec(uint64_t a1, int a2, int a3, int a4, double a5)
{
  if (a3 == 3356 || a3 == 34163 || a3 == 34049) {
    *(float *)&a5 = (float)a4 * 0.000015259;
  }
  else {
    *(float *)&a5 = (float)a4;
  }
  return glTexEnvf_Exec(a1, a2, a3, a5);
}

void *glTexEnvx_PackThread(uint64_t a1, int a2, int a3, int a4)
{
  if (a3 == 3356 || a3 == 34163 || a3 == 34049) {
    float v6 = (float)a4 * 0.000015259;
  }
  else {
    float v6 = (float)a4;
  }
  uint64_t result = gleAddCommand(a1, (uint64_t)glTexEnvf_ListExec, 12);
  *(_DWORD *)uint64_t result = a2;
  *((_DWORD *)result + 1) = a3;
  *((float *)result + 2) = v6;
  return result;
}

float glTexEnvfv_Comp(uint64_t a1, int a2, int a3, uint64_t a4)
{
  int v7 = gleAddCommand(a1, (uint64_t)glTexEnvfv_ListExec, 24);
  if (a2 == 8960 && a3 == 8705)
  {
    *int v7 = 0x220100002300;
    *((_DWORD *)v7 + 2) = *(_DWORD *)a4;
    *((_DWORD *)v7 + 3) = *(_DWORD *)(a4 + 4);
    *((_DWORD *)v7 + 4) = *(_DWORD *)(a4 + 8);
    float result = *(float *)(a4 + 12);
    *((float *)v7 + 5) = result;
  }
  else
  {
    *(_DWORD *)int v7 = a2;
    *((_DWORD *)v7 + 1) = a3;
    float result = *(float *)a4;
    *((_DWORD *)v7 + 2) = *(_DWORD *)a4;
  }
  return result;
}

uint64_t glTexEnvfv_ListExec(uint64_t a1, int *a2)
{
  return 24;
}

uint64_t glTexEnvxv_Exec(uint64_t a1, int a2, int a3, int32x4_t *a4)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (a3 > 34048)
  {
    if (a3 != 34163 && a3 != 34049) {
      goto LABEL_8;
    }
LABEL_7:
    float v4 = (float)a4->i32[0] * 0.000015259;
LABEL_9:
    v6.f32[0] = v4;
    return glTexEnvfv_Exec(a1, a2, a3, (uint64_t)&v6);
  }
  if (a3 == 3356) {
    goto LABEL_7;
  }
  if (a3 != 8705)
  {
LABEL_8:
    float v4 = (float)a4->i32[0];
    goto LABEL_9;
  }
  float32x4_t v6 = vmulq_f32(vcvtq_f32_s32(*a4), (float32x4_t)vdupq_n_s32(0x37800000u));
  return glTexEnvfv_Exec(a1, a2, a3, (uint64_t)&v6);
}

float glTexEnvxv_PackThread(uint64_t a1, int a2, int a3, int32x4_t *a4)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (a3 > 34048)
  {
    if (a3 != 34163 && a3 != 34049) {
      goto LABEL_8;
    }
LABEL_7:
    float v4 = (float)a4->i32[0] * 0.000015259;
LABEL_9:
    v6.f32[0] = v4;
    return glTexEnvfv_Comp(a1, a2, a3, (uint64_t)&v6);
  }
  if (a3 == 3356) {
    goto LABEL_7;
  }
  if (a3 != 8705)
  {
LABEL_8:
    float v4 = (float)a4->i32[0];
    goto LABEL_9;
  }
  float32x4_t v6 = vmulq_f32(vcvtq_f32_s32(*a4), (float32x4_t)vdupq_n_s32(0x37800000u));
  return glTexEnvfv_Comp(a1, a2, a3, (uint64_t)&v6);
}

_DWORD *glTexEnvi_Comp(uint64_t a1, int a2, int a3, int a4)
{
  float result = gleAddCommand(a1, (uint64_t)glTexEnvi_ListExec, 12);
  *float result = a2;
  result[1] = a3;
  result[2] = a4;
  return result;
}

uint64_t glTexEnvi_ListExec(uint64_t a1, int *a2, double a3)
{
  return 12;
}

void *glTexEnviv_Comp(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  float result = gleAddCommand(a1, (uint64_t)glTexEnviv_ListExec, 24);
  if (a2 == 8960 && a3 == 8705)
  {
    *float result = 0x220100002300;
    *((_DWORD *)result + 2) = *a4;
    *((_DWORD *)result + 3) = a4[1];
    *((_DWORD *)result + 4) = a4[2];
    *((_DWORD *)result + 5) = a4[3];
  }
  else
  {
    *(_DWORD *)float result = a2;
    *((_DWORD *)result + 1) = a3;
    *((_DWORD *)result + 2) = *a4;
  }
  return result;
}

uint64_t glTexEnviv_ListExec(uint64_t a1, uint64_t a2, double a3)
{
  return 24;
}

uint64_t glTexEnviv_Exec(uint64_t result, int a2, int a3, int32x4_t *a4, double a5)
{
  uint64_t v5 = *(unsigned __int16 *)(result + 23768);
  if (a2 == 8960)
  {
    if (v5 >= 8) {
      goto LABEL_10;
    }
    if (a3 > 34161)
    {
      switch(a3)
      {
        case 34176:
          int v9 = a4->i32[0];
          if ((a4->i32[0] - 34166) >= 3 && v9 != 5890) {
            goto LABEL_116;
          }
          uint64_t v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
          uint64_t v11 = 15696;
          goto LABEL_113;
        case 34177:
          int v9 = a4->i32[0];
          if ((a4->i32[0] - 34166) >= 3 && v9 != 5890) {
            goto LABEL_116;
          }
          uint64_t v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
          uint64_t v11 = 15698;
          goto LABEL_113;
        case 34178:
          int v9 = a4->i32[0];
          if ((a4->i32[0] - 34166) >= 3 && v9 != 5890) {
            goto LABEL_116;
          }
          uint64_t v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
          uint64_t v11 = 15700;
          goto LABEL_113;
        case 34179:
        case 34180:
        case 34181:
        case 34182:
        case 34183:
        case 34187:
        case 34188:
        case 34189:
        case 34190:
        case 34191:
        case 34195:
        case 34196:
        case 34197:
        case 34198:
        case 34199:
          goto LABEL_116;
        case 34184:
          int v9 = a4->i32[0];
          if ((a4->i32[0] - 34166) >= 3 && v9 != 5890) {
            goto LABEL_116;
          }
          uint64_t v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
          uint64_t v11 = 15702;
          goto LABEL_113;
        case 34185:
          int v9 = a4->i32[0];
          if ((a4->i32[0] - 34166) >= 3 && v9 != 5890) {
            goto LABEL_116;
          }
          uint64_t v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
          uint64_t v11 = 15704;
          goto LABEL_113;
        case 34186:
          int v9 = a4->i32[0];
          if ((a4->i32[0] - 34166) >= 3 && v9 != 5890) {
            goto LABEL_116;
          }
          uint64_t v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
          uint64_t v11 = 15706;
          goto LABEL_113;
        case 34192:
          int v9 = a4->i32[0];
          if ((a4->i32[0] & 0xFFFFFFFC) != 0x300) {
            goto LABEL_116;
          }
          uint64_t v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
          uint64_t v11 = 15708;
          goto LABEL_113;
        case 34193:
          int v9 = a4->i32[0];
          if ((a4->i32[0] & 0xFFFFFFFC) != 0x300) {
            goto LABEL_116;
          }
          uint64_t v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
          uint64_t v11 = 15710;
          goto LABEL_113;
        case 34194:
          int v9 = a4->i32[0];
          if ((a4->i32[0] & 0xFFFFFFFC) != 0x300) {
            goto LABEL_116;
          }
          uint64_t v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
          uint64_t v11 = 15712;
          goto LABEL_113;
        case 34200:
          int v9 = a4->i32[0];
          if ((a4->i32[0] & 0xFFFFFFFE) != 0x302) {
            goto LABEL_116;
          }
          uint64_t v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
          uint64_t v11 = 15714;
          goto LABEL_113;
        case 34201:
          int v9 = a4->i32[0];
          if ((a4->i32[0] & 0xFFFFFFFE) != 0x302) {
            goto LABEL_116;
          }
          uint64_t v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
          uint64_t v11 = 15716;
          goto LABEL_113;
        case 34202:
          int v9 = a4->i32[0];
          if ((a4->i32[0] & 0xFFFFFFFE) != 0x302) {
            goto LABEL_116;
          }
          uint64_t v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
          uint64_t v11 = 15718;
          goto LABEL_113;
        default:
          if (a3 != 34162)
          {
            if (a3 != 34163) {
              goto LABEL_116;
            }
            int v20 = a4->i32[0];
            if (a4->i32[0] <= 4u && ((1 << v20) & 0x16) != 0)
            {
              *(float *)(result + 76 * *(unsigned __int16 *)(result + 23768) + 15720) = (float)v20;
              goto LABEL_114;
            }
            goto LABEL_96;
          }
          int v9 = a4->i32[0];
          if (a4->i32[0] > 34022)
          {
            if ((v9 - 34164) >= 2)
            {
              int v34 = 34023;
LABEL_111:
              if (v9 != v34) {
                goto LABEL_116;
              }
            }
          }
          else if (v9 != 260 && v9 != 7681)
          {
            int v34 = 8448;
            goto LABEL_111;
          }
          uint64_t v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
          uint64_t v11 = 15694;
          goto LABEL_113;
      }
    }
    if (a3 <= 8704)
    {
      if (a3 == 3356)
      {
        int v21 = a4->i32[0];
        if (a4->i32[0] > 4u || ((1 << v21) & 0x16) == 0)
        {
LABEL_96:
          if (!*(_WORD *)(result + 29832)) {
            *(_WORD *)(result + 29832) = 1281;
          }
          goto LABEL_114;
        }
        *(float *)(result + 76 * *(unsigned __int16 *)(result + 23768) + 15724) = (float)v21;
LABEL_114:
        *(_DWORD *)(result + 28652) = 0;
LABEL_115:
        *(_DWORD *)(result + 1548) |= 0x20000u;
        return result;
      }
      if (a3 != 8704) {
        goto LABEL_116;
      }
      int v9 = a4->i32[0];
      if (a4->i32[0] > 8447)
      {
        if ((v9 - 8448) >= 2)
        {
          int v18 = 34160;
LABEL_89:
          if (v9 != v18) {
            goto LABEL_116;
          }
        }
      }
      else if (v9 != 260 && v9 != 3042)
      {
        int v18 = 7681;
        goto LABEL_89;
      }
      uint64_t v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
      uint64_t v11 = 15688;
LABEL_113:
      *(_WORD *)(v10 + v11) = v9;
      goto LABEL_114;
    }
    if (a3 == 8705)
    {
      uint64_t v22 = (float32x4_t *)(result + 16 * v5);
      v23.i64[0] = 0x3000000030000000;
      v23.i64[1] = 0x3000000030000000;
      float32x4_t v24 = vmulq_f32(vcvtq_f32_s32(*a4), v23);
      __asm { FMOV            V1.4S, #-1.0 }
      float32x4_t v30 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(_Q1, v24), (int8x16_t)_Q1, (int8x16_t)v24);
      v22[1488] = v30;
      if (*(unsigned char *)(result + 15178))
      {
        char v31 = (const float *)(result + 288);
        float32x4_t v32 = vld1q_dup_f32(v31);
        float32x4_t v33 = vmaxnmq_f32(v30, v32);
      }
      else
      {
        float32x4_t v33 = v22[1488];
      }
      *(float32x4_t *)(result + 76 * v5 + 15652) = v33;
      if (*(__int16 *)(result + 23772) <= v5) {
        *(_WORD *)(result + 23772) = v5 + 1;
      }
      uint64_t v35 = *(void *)(result + 19248);
      if (v35)
      {
        unint64_t v36 = *(unsigned __int16 *)(v35 + 2 * v5 + 3736);
        if (v36 <= 0x3FF)
        {
          *(_DWORD *)(result + ((v36 >> 3) & 0x1FFC) + 1552) |= 1 << v36;
          *(_DWORD *)(result + 28652) = 0;
          *(_DWORD *)(result + 1532) |= 0x800000u;
        }
      }
      uint64_t v37 = *(void *)(result + 19272);
      if (v37)
      {
        unint64_t v38 = *(unsigned __int16 *)(v37 + 2 * v5 + 3736);
        if (v38 <= 0x3FF)
        {
          *(_DWORD *)(result + ((v38 >> 3) & 0x1FFC) + 1936) |= 1 << v38;
          *(_DWORD *)(result + 28652) = 0;
          *(_DWORD *)(result + 1532) |= 0x4000000u;
        }
      }
      uint64_t v39 = *(void *)(result + 19280);
      if (!v39) {
        return result;
      }
      unint64_t v17 = *(unsigned __int16 *)(v39 + 2 * v5 + 3736);
      goto LABEL_28;
    }
    if (a3 != 34161) {
      goto LABEL_116;
    }
    int v9 = a4->i32[0];
    if (a4->i32[0] > 34022)
    {
      if ((v9 - 34164) >= 2 && (v9 - 34478) >= 2)
      {
        int v19 = 34023;
LABEL_94:
        if (v9 != v19) {
          goto LABEL_116;
        }
      }
    }
    else if (v9 != 260 && v9 != 7681)
    {
      int v19 = 8448;
      goto LABEL_94;
    }
    uint64_t v10 = result + 76 * *(unsigned __int16 *)(result + 23768);
    uint64_t v11 = 15692;
    goto LABEL_113;
  }
  if (a2 == 34048)
  {
    if (a3 != 34049) {
      goto LABEL_116;
    }
    *(float *)&a5 = (float)a4->i32[0];
    *(_DWORD *)(result + 2272 + 4 * v5 + 13988) = LODWORD(a5);
    *(int32x4_t *)(result + 2272 + 76 * v5 + 13396) = vdupq_lane_s32(*(int32x2_t *)&a5, 0);
    if ((*(_WORD *)(*(void *)(result + 29032) + 26) & 0x2000) == 0)
    {
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1536) |= 0x10000 << (v5 & 7);
      return result;
    }
    uint64_t v12 = *(void *)(result + 19248);
    if (v12)
    {
      unint64_t v13 = *(unsigned __int16 *)(v12 + 2 * v5 + 3752);
      if (v13 <= 0x3FF)
      {
        *(_DWORD *)(result + ((v13 >> 3) & 0x1FFC) + 1552) |= 1 << v13;
        *(_DWORD *)(result + 28652) = 0;
        *(_DWORD *)(result + 1532) |= 0x800000u;
      }
    }
    uint64_t v14 = *(void *)(result + 19272);
    if (v14)
    {
      unint64_t v15 = *(unsigned __int16 *)(v14 + 2 * v5 + 3752);
      if (v15 <= 0x3FF)
      {
        *(_DWORD *)(result + ((v15 >> 3) & 0x1FFC) + 1936) |= 1 << v15;
        *(_DWORD *)(result + 28652) = 0;
        *(_DWORD *)(result + 1532) |= 0x4000000u;
      }
    }
    uint64_t v16 = *(void *)(result + 19280);
    if (!v16) {
      return result;
    }
    unint64_t v17 = *(unsigned __int16 *)(v16 + 2 * v5 + 3752);
LABEL_28:
    if (v17 <= 0x3FF)
    {
      *(_DWORD *)(result + ((v17 >> 3) & 0x1FFC) + 2064) |= 1 << v17;
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1532) |= 0x8000000u;
    }
    return result;
  }
  if (a2 != 34913 || a3 != 34914) {
    goto LABEL_116;
  }
  if (v5 >= 8)
  {
LABEL_10:
    if (*(_WORD *)(result + 29832)) {
      return result;
    }
    __int16 v8 = 1282;
    goto LABEL_119;
  }
  if (a4->i32[0] >= 2u)
  {
LABEL_116:
    if (*(_WORD *)(result + 29832)) {
      return result;
    }
    __int16 v8 = 1280;
LABEL_119:
    *(_WORD *)(result + 29832) = v8;
    return result;
  }
  int v6 = 1 << v5;
  if (a4->i32[0] == 1) {
    int v7 = *(_DWORD *)(result + 15384) | v6;
  }
  else {
    int v7 = *(_DWORD *)(result + 15384) & ~v6;
  }
  *(_DWORD *)(result + 15384) = v7;
  *(_DWORD *)(result + 28652) = 0;
  *(_DWORD *)(result + 1520) |= 0x400000u;
  if ((*(unsigned char *)(*(void *)(result + 29032) + 27) & 8) != 0) {
    goto LABEL_115;
  }
  return result;
}

double glGetTexEnviv_ExecThread(uint64_t a1, int a2, int a3, int32x4_t *a4)
{
  (*(void (**)(void))(a1 + 27752))();

  *(void *)&double result = glGetTexEnviv_Exec(a1, a2, a3, a4, v8, v9).u64[0];
  return result;
}

int32x4_t glGetTexEnviv_Exec(uint64_t a1, int a2, int a3, int32x4_t *a4, int32x4_t result, double a6)
{
  uint64_t v6 = *(unsigned __int16 *)(a1 + 23768);
  if (a2 == 8960)
  {
    if (v6 >= 8) {
      goto LABEL_9;
    }
    if (a3 > 34161)
    {
      switch(a3)
      {
        case 34176:
          uint64_t v9 = a1 + 76 * *(unsigned __int16 *)(a1 + 23768);
          uint64_t v10 = 15696;
          goto LABEL_47;
        case 34177:
          uint64_t v9 = a1 + 76 * *(unsigned __int16 *)(a1 + 23768);
          uint64_t v10 = 15698;
          goto LABEL_47;
        case 34178:
          uint64_t v9 = a1 + 76 * *(unsigned __int16 *)(a1 + 23768);
          uint64_t v10 = 15700;
          goto LABEL_47;
        case 34179:
        case 34180:
        case 34181:
        case 34182:
        case 34183:
        case 34187:
        case 34188:
        case 34189:
        case 34190:
        case 34191:
        case 34195:
        case 34196:
        case 34197:
        case 34198:
        case 34199:
          goto LABEL_28;
        case 34184:
          uint64_t v9 = a1 + 76 * *(unsigned __int16 *)(a1 + 23768);
          uint64_t v10 = 15702;
          goto LABEL_47;
        case 34185:
          uint64_t v9 = a1 + 76 * *(unsigned __int16 *)(a1 + 23768);
          uint64_t v10 = 15704;
          goto LABEL_47;
        case 34186:
          uint64_t v9 = a1 + 76 * *(unsigned __int16 *)(a1 + 23768);
          uint64_t v10 = 15706;
          goto LABEL_47;
        case 34192:
          uint64_t v9 = a1 + 76 * *(unsigned __int16 *)(a1 + 23768);
          uint64_t v10 = 15708;
          goto LABEL_47;
        case 34193:
          uint64_t v9 = a1 + 76 * *(unsigned __int16 *)(a1 + 23768);
          uint64_t v10 = 15710;
          goto LABEL_47;
        case 34194:
          uint64_t v9 = a1 + 76 * *(unsigned __int16 *)(a1 + 23768);
          uint64_t v10 = 15712;
          goto LABEL_47;
        case 34200:
          uint64_t v9 = a1 + 76 * *(unsigned __int16 *)(a1 + 23768);
          uint64_t v10 = 15714;
          goto LABEL_47;
        case 34201:
          uint64_t v9 = a1 + 76 * *(unsigned __int16 *)(a1 + 23768);
          uint64_t v10 = 15716;
          goto LABEL_47;
        case 34202:
          uint64_t v9 = a1 + 76 * *(unsigned __int16 *)(a1 + 23768);
          uint64_t v10 = 15718;
          goto LABEL_47;
        default:
          if (a3 == 34162)
          {
            uint64_t v9 = a1 + 76 * *(unsigned __int16 *)(a1 + 23768);
            uint64_t v10 = 15694;
            goto LABEL_47;
          }
          if (a3 != 34163) {
            goto LABEL_28;
          }
          result.i32[0] = *(_DWORD *)(a1 + 76 * *(unsigned __int16 *)(a1 + 23768) + 15720);
          break;
      }
      goto LABEL_13;
    }
    if (a3 > 8704)
    {
      if (a3 == 8705)
      {
        uint64_t v11 = (float32x4_t *)(a1 + 76 * *(unsigned __int16 *)(a1 + 23768) + 15652);
        if (*(unsigned char *)(a1 + 15178))
        {
          float32x4_t v12 = *v11;
        }
        else
        {
          result.i32[0] = *(_DWORD *)(a1 + 292);
          *(float *)&a6 = -*(float *)result.i32;
          float32x4_t v13 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a6, 0);
          float32x4_t v14 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)result.i8, 0);
          float32x4_t v12 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v13, *v11), (int8x16_t)v13, vbslq_s8((int8x16_t)vcgtq_f32(*v11, v14), (int8x16_t)v14, *(int8x16_t *)v11));
        }
        v15.i64[0] = 0xB1000000B1000000;
        v15.i64[1] = 0xB1000000B1000000;
        double result = vaddq_s32(vcvtq_s32_f32(vmulq_f32(v12, v15)), vcvtq_s32_f32(vmulq_f32(v12, (float32x4_t)vdupq_n_s32(0x42FFFFFEu))));
        *a4 = result;
        return result;
      }
      if (a3 != 34161) {
        goto LABEL_28;
      }
      uint64_t v9 = a1 + 76 * *(unsigned __int16 *)(a1 + 23768);
      uint64_t v10 = 15692;
    }
    else
    {
      if (a3 == 3356)
      {
        result.i32[0] = *(_DWORD *)(a1 + 76 * *(unsigned __int16 *)(a1 + 23768) + 15724);
LABEL_13:
        int v7 = (int)*(float *)result.i32;
LABEL_48:
        a4->i32[0] = v7;
        return result;
      }
      if (a3 != 8704) {
        goto LABEL_28;
      }
      uint64_t v9 = a1 + 76 * *(unsigned __int16 *)(a1 + 23768);
      uint64_t v10 = 15688;
    }
LABEL_47:
    int v7 = *(unsigned __int16 *)(v9 + v10);
    goto LABEL_48;
  }
  if (a2 == 34048)
  {
    if (a3 != 34049) {
      goto LABEL_28;
    }
    result.i32[0] = *(_DWORD *)(a1 + 4 * v6 + 16260);
    goto LABEL_13;
  }
  if (a2 == 34913 && a3 == 34914)
  {
    if (v6 < 8)
    {
      if ((((unint64_t)*(unsigned int *)(a1 + 15384) >> v6) & 1) == 0)
      {
        a4->i32[0] = 0;
        return result;
      }
      int v7 = 1;
      goto LABEL_48;
    }
LABEL_9:
    if (!*(_WORD *)(a1 + 29832))
    {
      __int16 v8 = 1282;
LABEL_31:
      *(_WORD *)(a1 + 29832) = v8;
      return result;
    }
    return result;
  }
LABEL_28:
  if (!*(_WORD *)(a1 + 29832))
  {
    __int16 v8 = 1280;
    goto LABEL_31;
  }
  return result;
}

uint64_t glGetTexEnvfv_ExecThread(uint64_t a1, int a2, int a3, float *a4)
{
  (*(void (**)(void))(a1 + 27752))();

  return glGetTexEnvfv_Exec(a1, a2, a3, a4, v8);
}

uint64_t glGetTexEnvfv_Exec(uint64_t result, int a2, int a3, float *a4, float a5)
{
  uint64_t v5 = *(unsigned __int16 *)(result + 23768);
  if (a2 == 8960)
  {
    if (v5 >= 8) {
      goto LABEL_9;
    }
    if (a3 > 34161)
    {
      switch(a3)
      {
        case 34176:
          uint64_t v8 = result + 76 * *(unsigned __int16 *)(result + 23768);
          uint64_t v9 = 15696;
          goto LABEL_45;
        case 34177:
          uint64_t v8 = result + 76 * *(unsigned __int16 *)(result + 23768);
          uint64_t v9 = 15698;
          goto LABEL_45;
        case 34178:
          uint64_t v8 = result + 76 * *(unsigned __int16 *)(result + 23768);
          uint64_t v9 = 15700;
          goto LABEL_45;
        case 34179:
        case 34180:
        case 34181:
        case 34182:
        case 34183:
        case 34187:
        case 34188:
        case 34189:
        case 34190:
        case 34191:
        case 34195:
        case 34196:
        case 34197:
        case 34198:
        case 34199:
          goto LABEL_27;
        case 34184:
          uint64_t v8 = result + 76 * *(unsigned __int16 *)(result + 23768);
          uint64_t v9 = 15702;
          goto LABEL_45;
        case 34185:
          uint64_t v8 = result + 76 * *(unsigned __int16 *)(result + 23768);
          uint64_t v9 = 15704;
          goto LABEL_45;
        case 34186:
          uint64_t v8 = result + 76 * *(unsigned __int16 *)(result + 23768);
          uint64_t v9 = 15706;
          goto LABEL_45;
        case 34192:
          uint64_t v8 = result + 76 * *(unsigned __int16 *)(result + 23768);
          uint64_t v9 = 15708;
          goto LABEL_45;
        case 34193:
          uint64_t v8 = result + 76 * *(unsigned __int16 *)(result + 23768);
          uint64_t v9 = 15710;
          goto LABEL_45;
        case 34194:
          uint64_t v8 = result + 76 * *(unsigned __int16 *)(result + 23768);
          uint64_t v9 = 15712;
          goto LABEL_45;
        case 34200:
          uint64_t v8 = result + 76 * *(unsigned __int16 *)(result + 23768);
          uint64_t v9 = 15714;
          goto LABEL_45;
        case 34201:
          uint64_t v8 = result + 76 * *(unsigned __int16 *)(result + 23768);
          uint64_t v9 = 15716;
          goto LABEL_45;
        case 34202:
          uint64_t v8 = result + 76 * *(unsigned __int16 *)(result + 23768);
          uint64_t v9 = 15718;
          goto LABEL_45;
        default:
          if (a3 == 34162)
          {
            uint64_t v8 = result + 76 * *(unsigned __int16 *)(result + 23768);
            uint64_t v9 = 15694;
            goto LABEL_45;
          }
          if (a3 != 34163) {
            goto LABEL_27;
          }
          float v7 = *(float *)(result + 76 * *(unsigned __int16 *)(result + 23768) + 15720);
          break;
      }
      goto LABEL_46;
    }
    if (a3 > 8704)
    {
      if (a3 == 8705)
      {
        uint64_t v10 = (float *)(result + 76 * *(unsigned __int16 *)(result + 23768));
        *a4 = v10[3913];
        a4[1] = v10[3914];
        a4[2] = v10[3915];
        a4[3] = v10[3916];
        return result;
      }
      if (a3 != 34161) {
        goto LABEL_27;
      }
      uint64_t v8 = result + 76 * *(unsigned __int16 *)(result + 23768);
      uint64_t v9 = 15692;
    }
    else
    {
      if (a3 == 3356)
      {
        float v7 = *(float *)(result + 76 * *(unsigned __int16 *)(result + 23768) + 15724);
        goto LABEL_46;
      }
      if (a3 != 8704)
      {
LABEL_27:
        if (*(_WORD *)(result + 29832)) {
          return result;
        }
        __int16 v6 = 1280;
LABEL_30:
        *(_WORD *)(result + 29832) = v6;
        return result;
      }
      uint64_t v8 = result + 76 * *(unsigned __int16 *)(result + 23768);
      uint64_t v9 = 15688;
    }
LABEL_45:
    LOWORD(a5) = *(_WORD *)(v8 + v9);
    float v7 = (float)LODWORD(a5);
    goto LABEL_46;
  }
  if (a2 == 34048)
  {
    if (a3 == 34049)
    {
      float v7 = *(float *)(result + 4 * v5 + 16260);
LABEL_46:
      *a4 = v7;
      return result;
    }
    goto LABEL_27;
  }
  if (a2 != 34913 || a3 != 34914) {
    goto LABEL_27;
  }
  if (v5 >= 8)
  {
LABEL_9:
    if (*(_WORD *)(result + 29832)) {
      return result;
    }
    __int16 v6 = 1282;
    goto LABEL_30;
  }
  if (((unint64_t)*(unsigned int *)(result + 15384) >> v5)) {
    *a4 = 1.0;
  }
  else {
    *a4 = 0.0;
  }
  return result;
}

uint64_t glGetTexEnvxv_Exec(uint64_t a1, int a2, int a3, int32x4_t *a4, float a5)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t result = glGetTexEnvfv_Exec(a1, a2, a3, v11.f32, a5);
  if (a3 > 34048)
  {
    if (a3 != 34163 && a3 != 34049) {
      return result;
    }
  }
  else if (a3 != 3356)
  {
    if (a3 == 8705)
    {
      v8.i64[0] = 0x3F0000003F000000;
      v8.i64[1] = 0x3F0000003F000000;
      float32x4_t v9 = vmlaq_f32(v8, (float32x4_t)vdupq_n_s32(0x47800000u), v11);
      *a4 = vcvtq_s32_f32((float32x4_t)vbslq_s8((int8x16_t)vcgezq_f32(v9), (int8x16_t)v9, (int8x16_t)vaddq_f32(v9, (float32x4_t)vdupq_n_s32(0xBF7FFE5D))));
    }
    return result;
  }
  float v10 = (float)(v11.f32[0] * 65536.0) + 0.5;
  if (v10 < 0.0) {
    float v10 = v10 + -0.99998;
  }
  a4->i32[0] = (int)v10;
  return result;
}

uint64_t glGetTexEnvxv_ExecThread(uint64_t a1, int a2, int a3, int32x4_t *a4)
{
  (*(void (**)(void))(a1 + 27752))();

  return glGetTexEnvxv_Exec(a1, a2, a3, a4, v8);
}

void glGetTexImage_Exec(uint64_t a1, int a2, uint64_t a3, unsigned int a4, int a5, uint64_t a6)
{
  float32x4_t v11 = (__int16 *)(a1 + 29832);
  unint64_t v12 = glePixelStorageFromFormatType(a1, a4, a5);
  if (a2 == 36161)
  {
    a3 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = *(void *)(a1 + 28952) + 40;
  }
  else
  {
    uint64_t v17 = gleLookUpNonProxyTexture(a1, a2);
    if ((a2 - 34069) >= 6) {
      uint64_t v13 = 0;
    }
    else {
      uint64_t v13 = (a2 - 34069);
    }
    if (!v17)
    {
      if (*v11) {
        return;
      }
      __int16 v69 = 1280;
      goto LABEL_104;
    }
    if (a3 >= 0xF || (v16 = v17, v15 = a3, uint64_t v14 = v13, a2 == 34037) && a3)
    {
      if (*v11) {
        return;
      }
      __int16 v69 = 1281;
      goto LABEL_104;
    }
  }
  if ((v12 & 0x800000000000000) == 0)
  {
    if (*v11) {
      return;
    }
    if ((v12 & 0x4000000000000000) != 0) {
      __int16 v69 = 1282;
    }
    else {
      __int16 v69 = 1280;
    }
LABEL_104:
    *float32x4_t v11 = v69;
    return;
  }
  int v18 = v12 & 0xF;
  uint64_t v19 = v16 + 480 * v14 + 32 * v15;
  int v20 = *(unsigned __int16 *)(v19 + 1048);
  if (v18 == 9)
  {
    BOOL v21 = v20 == 6400;
    int v20 = 6400;
    if (!v21) {
      goto LABEL_107;
    }
  }
  BOOL v21 = v18 == 10 || v18 == 12;
  int v22 = v21;
  BOOL v23 = v20 == 6402 || v20 == 34041;
  int v24 = v23;
  if (v22 != v24 || v18 == 12 && v20 != 34041) {
    goto LABEL_107;
  }
  int v25 = *(unsigned __int16 *)(v16 + 960);
  unsigned int v26 = v25 - 36208;
  BOOL v28 = v25 == 36975 || (v25 - 33329) < 0xC;
  if (v26 < 0x24) {
    BOOL v28 = 1;
  }
  if (v12 >> 31 != v28)
  {
LABEL_107:
    if (*v11) {
      return;
    }
    __int16 v69 = 1282;
    goto LABEL_104;
  }
  uint64_t v79 = v13;
  unsigned int v77 = a5;
  uint64_t v29 = *(void *)(a1 + 19328);
  if (!v29
    || (float32x4_t v30 = (unsigned __int16 *)(v16 + 480 * v14 + 32 * v15),
        uint64_t v31 = v14,
        unint64_t v32 = gleOffsetLimitStorage3D((int *)(a1 + 18448), v30[518], v30[519], v30[520], v12, a6),
        uint64_t v33 = gleHandlePackBufferInEngineNoClientState(a1, v29, v32, (HIDWORD(v12) & 0x1F) + 1, a6),
        uint64_t v14 = v31,
        (a6 = v33) != 0))
  {
    uint64_t v34 = v16 + 480 * v14 + 32 * v15;
    if ((*(unsigned char *)(v34 + 1043) & 0x20) != 0 && !*(unsigned char *)(v16 + 770))
    {
      uint64_t v35 = (_WORD *)(v19 + 1048);
      if ((*(_WORD *)(a1 + 32493) & 0x2000) != 0 && (*(unsigned char *)(v16 + 980) || (*(_WORD *)(v16 + 768) & 0x800) != 0))
      {
        if (a3 >= *(unsigned __int8 *)(v16 + 976) && a3 <= *(unsigned __int8 *)(v16 + 978))
        {
          __int16 v78 = *v35;
          uint64_t v37 = v16 + 480 * v14 + 32 * v15;
          unsigned int v74 = (_WORD *)(v37 + 1050);
          __int16 v72 = *(_WORD *)(v37 + 1050);
          unint64_t v38 = (_WORD *)(v37 + 1044);
          __int16 v39 = *(_WORD *)(v37 + 1044);
          *uint64_t v35 = a4;
          *(_WORD *)(v37 + 1050) = v77;
          *(_WORD *)(v37 + 1044) = *(_WORD *)(v37 + 1036);
          uint64_t v40 = (void *)(v37 + 1056);
          *(void *)(v37 + 1056) = a6;
          uint64_t v41 = *(void *)(v16 + 536);
          if (v41)
          {
            float v42 = v35;
            char v43 = (unsigned __int8 *)(a1 + 32500);
            if (*(void *)(a1 + 29024) == v41) {
              char v43 = (unsigned __int8 *)(a1 + 32499);
            }
          }
          else
          {
            float v42 = v35;
            char v43 = (unsigned __int8 *)(a1 + 32499);
          }
          uint64_t v68 = *v43;
          (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(a1 + 1672 * v68 + 34160) + 1328))(*(void *)(a1 + 1672 * v68 + 32512), 1, 1, *(void *)(v16 + 8 * v68));
          (*(void (**)(void, void, uint64_t, uint64_t, void, void, uint64_t, uint64_t))(*(void *)(a1 + 29448) + 1016))(*(void *)(*(void *)(a1 + 19296) + 32 * v68 + 352), *(void *)(v16 + 8 * v68), v79, a3, a4, v77, a6, 1);
          *float v42 = v78;
          _WORD *v74 = v72;
          *unint64_t v38 = v39;
          *uint64_t v40 = 0;
        }
      }
      else
      {
        if (a3 >= *(unsigned __int8 *)(v16 + 976)
          && (*(unsigned char *)(v34 + 1043) & 0x40) != 0
          && a3 <= *(unsigned __int8 *)(v16 + 978))
        {
          uint64_t v75 = v14;
          gleSynchronizeTextureLevelOnCurrentDevicesForRead(a1, v16);
          gfxModifyPluginTextureLevel();
          uint64_t v35 = (_WORD *)(v19 + 1048);
          uint64_t v14 = v75;
          char v36 = 0;
        }
        else
        {
          if ((*(unsigned char *)(v34 + 1043) & 0x10) == 0) {
            return;
          }
          char v36 = 1;
        }
        uint64_t v44 = v16 + 480 * v14 + 32 * v15;
        if (*(void *)(v44 + 1056))
        {
          uint64_t v90 = 0;
          unsigned int v80 = (char *)(v34 + 1043);
          long long v88 = 0u;
          long long v89 = 0u;
          long long v86 = 0u;
          long long v87 = 0u;
          uint64_t v84 = 0;
          uint64_t v85 = 0;
          uint64_t v83 = 0;
          char v73 = v36;
          if (a2 == 32879 || a2 == 37122 || a2 == 35866)
          {
            uint64_t v45 = (unsigned char *)(a1 + 18480);
            char v46 = v35;
            char v47 = 4;
          }
          else
          {
            uint64_t v45 = (unsigned char *)(a1 + 18480);
            char v46 = v35;
            char v47 = 3;
          }
          uint64_t v48 = (void *)(v44 + 1056);
          uint64_t v49 = v16 + 480 * v14 + 32 * v15;
          uint64_t v76 = v14;
          glePixelStorageSettings(a1, v12, *(unsigned __int16 *)(v49 + 1036), *(unsigned __int16 *)(v49 + 1038), (int *)(a1 + 18448), (_DWORD *)&v84 + 1, (int *)&v84, (_DWORD *)&v83 + 1, (int *)&v83, v47);
          int v50 = v46;
          if ((*v80 & 1) == 0
            || a6 + v84 != *v48
            || *v46 != a4
            || *(unsigned __int16 *)(v16 + 480 * v76 + 32 * v15 + 1050) != v77
            || __PAIR64__(v83 / HIDWORD(v83), HIDWORD(v83) / HIDWORD(v84)) != __PAIR64__(*(unsigned __int16 *)(v16 + 480 * v76 + 32 * v15 + 1046), *(unsigned __int16 *)(v16 + 480 * v76 + 32 * v15 + 1044))|| *v45)
          {
            int v51 = 393216;
            HIDWORD(v88) = 393216;
            if (*(_WORD *)(v16 + 772) == 6407)
            {
              int v52 = *v50;
              if (v52 == 32993 || v52 == 6408)
              {
                int v51 = 425984;
                HIDWORD(v88) = 425984;
              }
            }
            char v70 = a3;
            uint64_t v71 = v48;
            if (*v45)
            {
              v51 |= 2u;
              HIDWORD(v88) = v51;
            }
            uint64_t v53 = v16 + 480 * v76 + 32 * v15;
            int v54 = (_WORD *)(v53 + 1050);
            unsigned int v55 = gleRowBytes(*v50, *(unsigned __int16 *)(v53 + 1050), *(unsigned __int16 *)(v53 + 1044));
            if ((v12 & 0x80000000) != 0) {
              HIDWORD(v88) = v51 | 0x100000;
            }
            uint64_t v82 = a1;
            unsigned int v56 = (unsigned __int16 *)(v49 + 1038);
            glgConvertType();
            int8x8_t v57 = vand_s8((int8x8_t)vmovn_s64((int64x2_t)vshlq_u64((uint64x2_t)vdupq_n_s64(v12), (uint64x2_t)xmmword_227DC14F0)), (int8x8_t)0x1F0000001FLL);
            if (*v54)
            {
              int v58 = *v56;
              int CompressedImageBytes = v55 * v58;
            }
            else
            {
              int CompressedImageBytes = glgGetCompressedImageBytes();
              int v58 = *v56;
            }
            uint64_t v60 = (int)v83;
            *(void *)&long long v87 = __PAIR64__(HIDWORD(v85), v55);
            *((void *)&v87 + 1) = __PAIR64__(HIDWORD(v83), v85);
            *(int8x8_t *)&long long v88 = v57;
            DWORD2(v88) = 2;
            LODWORD(v89) = 1343490;
            DWORD1(v89) = *(unsigned __int16 *)(v49 + 1036);
            DWORD2(v89) = v58;
            uint64_t v61 = v16 + 480 * v76 + 32 * v15;
            if (*(_WORD *)(v61 + 1040))
            {
              uint64_t v62 = 0;
              unint64_t v63 = 0;
              float v64 = (unsigned __int16 *)(v61 + 1040);
              uint64_t v65 = CompressedImageBytes;
              do
              {
                *(void *)&long long v86 = *v71 + v62;
                *((void *)&v86 + 1) = a6 + v84;
                uint64_t v66 = v60;
                glgProcessPixelsWithProcessor();
                uint64_t v60 = v66;
                ++v63;
                a6 += v66;
                v62 += v65;
              }
              while (v63 < *v64);
            }
            if ((v73 & 1) == 0)
            {
              char v67 = *v80;
              if ((*v80 & 0x10) != 0)
              {
                if ((*v80 & 9) == 0)
                {
                  gfxFreeTextureLevel();
                  char v67 = *v80;
                }
                v67 &= ~0x10u;
                *(_WORD *)(v16 + 2 * v76 + 996) &= ~(1 << v70);
              }
              char *v80 = v67 | 0x40;
            }
            if (*(void *)(v82 + 19328)) {
              gleUpdateCtxDirtyStateForBufStampChange(v82);
            }
          }
        }
      }
    }
  }
}

void glGetTexImage_PackThread(uint64_t a1, int a2, uint64_t a3, unsigned int a4, int a5, uint64_t a6)
{
  if (*(void *)(a1 + 26480))
  {
    unint64_t v12 = gleAddCommand(a1, (uint64_t)glGetTexImage_UnpackThread, 24);
    *(_DWORD *)unint64_t v12 = a2;
    *((_DWORD *)v12 + 1) = a3;
    *((_DWORD *)v12 + 2) = a4;
    *((_DWORD *)v12 + 3) = a5;
    v12[2] = a6;
  }
  else
  {
    (*(void (**)(uint64_t))(a1 + 27752))(a1);
    glGetTexImage_Exec(a1, a2, a3, a4, a5, a6);
  }
}

uint64_t glGetTexImage_UnpackThread(uint64_t a1, uint64_t a2)
{
  return 24;
}

_DWORD *glCopyTexImage2D_Comp(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  uint64_t result = gleAddCommand(a1, (uint64_t)glCopyTexImage2D_ListExec, 32);
  *uint64_t result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  result[4] = a6;
  result[5] = a7;
  result[6] = a8;
  result[7] = a9;
  return result;
}

uint64_t glCopyTexImage2D_ListExec(uint64_t a1, uint64_t a2, double a3, double a4, double a5)
{
  return 32;
}

uint64_t glCopyTextureLevels_Exec(void *a1, unsigned int a2, unsigned int a3, unsigned int a4, int a5)
{
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  uint64_t result = gleCheckCopyTextureLevelsArgs((uint64_t)a1, a2, a3, a4, a5, &v43, &v42);
  if (!result) {
    return result;
  }
  float32x4_t v9 = a1 + 3729;
  uint64_t v10 = *(unsigned __int8 *)(v42 + 979);
  if (!*(void *)(v42 + 536) && (*(_WORD *)(v42 + 768) & 0x800) == 0)
  {
    uint64_t result = gfxWaitTextureOnDevices();
    float32x4_t v9 = a1 + 3729;
  }
  if (!v10) {
    return result;
  }
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = a5 + a4;
  uint64_t result = a4;
  while (v13 <= a4)
  {
LABEL_41:
    ++v12;
    v11 += 480;
    if (v12 == v10) {
      return result;
    }
  }
  uint64_t v14 = result;
  while (1)
  {
    uint64_t v15 = *(unsigned __int8 *)(v43 + 976);
    uint64_t v16 = *(unsigned __int8 *)(v43 + 978);
    if (v15 > v16)
    {
LABEL_43:
      if (!*(_WORD *)v9) {
        *(_WORD *)float32x4_t v9 = 1282;
      }
      return result;
    }
    uint64_t v17 = v42;
    uint64_t v18 = v42 + 480 * v12 + 32 * v14;
    uint64_t v19 = (unsigned char *)(v18 + 1043);
    char v20 = *(unsigned char *)(v18 + 1043);
    BOOL v21 = (unsigned __int16 *)(v18 + 1036);
    int v22 = (unsigned __int16 *)(v18 + 1038);
    uint64_t v23 = v43 + v11;
    uint64_t v24 = v16 + 1;
    uint64_t v25 = 32 * v15;
    uint64_t v26 = *(unsigned __int8 *)(v43 + 976);
    while ((v20 & 0x20) == 0
         || (*(unsigned char *)(v23 + v25 + 1043) & 0x20) == 0
         || *v21 != *(unsigned __int16 *)(v23 + v25 + 1036)
         || *v22 != *(unsigned __int16 *)(v23 + v25 + 1038))
    {
      ++v26;
      v23 += 32;
      if (v24 == v26) {
        goto LABEL_43;
      }
    }
    uint64_t v39 = result;
    uint64_t v40 = v13;
    uint64_t v41 = v9;
    uint64_t v37 = v19;
    uint64_t v38 = v23 + 32 * v15;
    if ((*(unsigned int (**)(void, void, uint64_t, uint64_t, void, uint64_t, uint64_t, void))(a1[3681] + 400))(a1[3627], *(void *)(v43 + 8 * *((unsigned __int8 *)v9 + 2667)), v12, v26, *(void *)(v42 + 8 * *((unsigned __int8 *)v9 + 2667)), v12, v14, 0))
    {
      uint64_t v27 = v43;
      float32x4_t v9 = v41;
      if ((*(_WORD *)(v43 + 768) & 0x800) == 0)
      {
        *(void *)(v43 + 536) = a1[3628];
        uint64_t v28 = v23 + 32 * v15;
        char v29 = *(unsigned char *)(v38 + 1043);
        if ((v29 & 0x10) != 0)
        {
          if ((*(unsigned char *)(v38 + 1043) & 9) == 0)
          {
            gfxFreeTextureLevel();
            uint64_t v28 = v23 + 32 * v15;
            float32x4_t v9 = v41;
            char v29 = *(unsigned char *)(v38 + 1043);
            uint64_t v27 = v43;
          }
          v29 &= ~0x10u;
          *(_WORD *)(v27 + 2 * v12 + 996) &= ~(1 << v26);
        }
        *(unsigned char *)(v28 + 1043) = v29 | 0x40;
      }
      goto LABEL_40;
    }
    float32x4_t v30 = v37;
    char v31 = *v37;
    if ((*v37 & 0x40) != 0)
    {
      gleSynchronizeTextureLevelOnCurrentDevicesForRead((uint64_t)a1, v42);
    }
    else if ((*v37 & 0x10) == 0)
    {
      if (!*(void *)(v17 + 480 * v12 + 32 * v14 + 1056))
      {
        uint64_t result = gfxAllocateTextureLevel();
        if (!result) {
          goto LABEL_49;
        }
        float32x4_t v30 = v37;
        char v31 = *v37;
      }
      unsigned char *v30 = v31 | 0x10;
    }
    gfxModifyPluginTextureLevel();
    uint64_t v32 = v23 + 32 * v15;
    char v33 = *(unsigned char *)(v38 + 1043);
    if ((v33 & 0x40) != 0)
    {
      gleSynchronizeTextureLevelOnCurrentDevices((uint64_t)a1, v43);
      goto LABEL_38;
    }
    if ((*(unsigned char *)(v38 + 1043) & 0x10) == 0) {
      break;
    }
LABEL_38:
    gfxModifyPluginTextureLevel();
    size_t v34 = gfxTextureLevelBytes();
    uint64_t result = gfxTextureLevelBytes();
    if (v34 != result)
    {
      uint64_t v35 = v41;
      if (*v41) {
        return result;
      }
      __int16 v36 = 1282;
      goto LABEL_48;
    }
    memcpy(*(void **)(v23 + 32 * v15 + 1056), *(const void **)(v17 + 480 * v12 + 32 * v14 + 1056), v34);
    gleDirtyTextureLevelCurrentBindPointsData((uint64_t)a1, v43, v38 + 1032);
    float32x4_t v9 = v41;
LABEL_40:
    ++v14;
    uint64_t result = v39;
    uint64_t v13 = v40;
    if (v14 == v40) {
      goto LABEL_41;
    }
  }
  if (*(void *)(v23 + 32 * v15 + 1056))
  {
LABEL_36:
    *(unsigned char *)(v32 + 1043) = v33 | 0x10;
    goto LABEL_38;
  }
  uint64_t result = gfxAllocateTextureLevel();
  if (result)
  {
    uint64_t v32 = v23 + 32 * v15;
    char v33 = *(unsigned char *)(v38 + 1043);
    goto LABEL_36;
  }
LABEL_49:
  uint64_t v35 = v41;
  if (!*v41)
  {
    __int16 v36 = 1285;
LABEL_48:
    *uint64_t v35 = v36;
  }
  return result;
}

_DWORD *glCopyTextureLevels_PackThread(uint64_t a1, int a2, int a3, int a4, int a5)
{
  uint64_t result = gleAddCommand(a1, (uint64_t)glCopyTextureLevels_UnpackThread, 16);
  *uint64_t result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  return result;
}

uint64_t glCopyTextureLevels_UnpackThread(void *a1, uint64_t a2)
{
  return 16;
}

uint64_t glGetTexLevelParameteriv_ExecThread(uint64_t a1, int a2, uint64_t a3, int a4, int *a5)
{
  (*(void (**)(void))(a1 + 27752))();

  return glGetTexLevelParameteriv_Exec((int8x16_t *)a1, a2, a3, a4, a5);
}

uint64_t gleGetCompressedTextureLevelInfo(unsigned int a1, int a2)
{
  unsigned int v2 = 74;
  while (1)
  {
    unsigned int v3 = dword_227DC1608[7 * v2];
    char v4 = v3 > a1;
    if (v3 == a1) {
      break;
    }
    --v2;
    char v4 = (v2 != -1) & __CFADD__(v2, 1);
    if (v2 == -1)
    {
      unsigned int v2 = -1;
      break;
    }
  }
  if (v4)
  {
    switch(a2)
    {
      case 35856:
        if (!v2) {
          return 0;
        }
        uint64_t v5 = (char *)&dword_227DC1608[7 * v2];
        goto LABEL_18;
      case 35857:
        if (!dword_227DC1608[7 * v2 + 3]) {
          return 0;
        }
        goto LABEL_17;
      case 35858:
        if (!dword_227DC1608[7 * v2 + 4]) {
          return 0;
        }
        goto LABEL_17;
      case 35859:
        if (!dword_227DC1608[7 * v2 + 5]) {
          return 0;
        }
LABEL_17:
        uint64_t v5 = (char *)&dword_227DC1608[7 * v2];
LABEL_18:
        __int16 v6 = v5 + 4;
        return *(unsigned int *)v6;
      case 35860:
        if (v2) {
          return 0;
        }
        else {
          return 35863;
        }
      default:
        return 0;
    }
  }
  switch(a2)
  {
    case 32860:
      __int16 v6 = (char *)&dword_227DC1608[7 * v2 + 2];
      break;
    case 32861:
      __int16 v6 = (char *)&dword_227DC1608[7 * v2 + 3];
      break;
    case 32862:
      __int16 v6 = (char *)&dword_227DC1608[7 * v2 + 4];
      break;
    case 32863:
      __int16 v6 = (char *)&dword_227DC1608[7 * v2 + 5];
      break;
    case 32864:
      __int16 v6 = (char *)&dword_227DC1608[7 * v2 + 6];
      break;
    default:
      JUMPOUT(0);
  }
  return *(unsigned int *)v6;
}

uint64_t gleGetInternalFormatType(int a1)
{
  uint64_t v1 = 5126;
  BOOL v2 = (a1 - 34836) >= 0xC && (a1 - 33325) >= 4;
  if (!v2 || (a1 - 36012) < 2 || a1 == 35898 || a1 == 35901) {
    return v1;
  }
  if ((a1 - 36208) < 0x12) {
    return 5125;
  }
  if ((a1 - 33330) > 0xA)
  {
    if (a1 != 36975)
    {
      if ((a1 - 36226) < 0x12) {
        return 5124;
      }
      BOOL v3 = (a1 & 1) == 0;
      goto LABEL_18;
    }
    return 5125;
  }
  if ((a1 & 1) == 0) {
    return 5125;
  }
  BOOL v3 = 0;
LABEL_18:
  if ((a1 - 33340) >= 0xFFFFFFF5 && !v3) {
    return 5124;
  }
  uint64_t v1 = 36764;
  if ((a1 - 36756) >= 8 && a1 != 36284 && a1 != 36286)
  {
    if (a1) {
      return 35863;
    }
    else {
      return 0;
    }
  }
  return v1;
}

float glTexParameterf_Comp(uint64_t a1, int a2, int a3, float a4)
{
  float v5 = a4;
  return glTexParameterF_Comp(a1, a2, a3, (uint64_t)&v5);
}

float glTexParameterF_Comp(uint64_t a1, int a2, int a3, uint64_t a4)
{
  float v7 = gleAddCommand(a1, (uint64_t)glTexParameterf_ListExec, 24);
  *(_DWORD *)float v7 = a2;
  *((_DWORD *)v7 + 1) = a3;
  if (a3 > 34229)
  {
    if (a3 > 35740)
    {
      if (a3 > 36421)
      {
        if (a3 != 36422)
        {
          int v9 = 37167;
          goto LABEL_28;
        }
LABEL_31:
        *((_DWORD *)v7 + 2) = *(_DWORD *)a4;
        *((_DWORD *)v7 + 3) = *(_DWORD *)(a4 + 4);
        *((_DWORD *)v7 + 4) = *(_DWORD *)(a4 + 8);
        float result = *(float *)(a4 + 12);
        *((float *)v7 + 5) = result;
        return result;
      }
      if ((a3 - 36418) < 4) {
        goto LABEL_29;
      }
      int v10 = 35741;
LABEL_17:
      if (a3 != v10) {
        return result;
      }
      goto LABEL_31;
    }
    if (a3 <= 34890)
    {
      if (a3 == 34230) {
        goto LABEL_29;
      }
      int v9 = 34236;
    }
    else
    {
      if ((a3 - 34891) < 3 || a3 == 35400) {
        goto LABEL_29;
      }
      int v9 = 35455;
    }
LABEL_28:
    if (a3 != v9) {
      return result;
    }
    goto LABEL_29;
  }
  if (a3 <= 32958)
  {
    if (a3 <= 32869)
    {
      if ((a3 - 10240) < 4) {
        goto LABEL_29;
      }
      int v10 = 4100;
      goto LABEL_17;
    }
    if (a3 == 32870) {
      goto LABEL_29;
    }
    int v9 = 32882;
    goto LABEL_28;
  }
  if (a3 > 33168)
  {
    if (a3 == 33169 || a3 == 34046) {
      goto LABEL_29;
    }
    int v9 = 34049;
    goto LABEL_28;
  }
  if ((a3 - 33082) >= 4)
  {
    int v9 = 32959;
    goto LABEL_28;
  }
LABEL_29:
  float result = *(float *)a4;
  *((_DWORD *)v7 + 2) = *(_DWORD *)a4;
  return result;
}

uint64_t glTexParameterx_Exec(uint64_t a1, int a2, int a3, int a4)
{
  float v4 = (float)a4;
  if (a3 == 34046) {
    float v4 = (float)a4 * 0.000015259;
  }
  var4.f32[0] = v4;
  return glTexParameterF_Exec(a1, a2, a3, &var4);
}

float glTexParameterx_PackThread(uint64_t a1, int a2, int a3, int a4)
{
  float v4 = (float)a4;
  if (a3 == 34046) {
    float v4 = (float)a4 * 0.000015259;
  }
  float v6 = v4;
  return glTexParameterF_Comp(a1, a2, a3, (uint64_t)&v6);
}

uint64_t glTexParameterxv_Exec(uint64_t a1, int a2, int a3, int *a4)
{
  float v4 = (float)*a4;
  if (a3 == 34046) {
    float v4 = v4 * 0.000015259;
  }
  var4.f32[0] = v4;
  return glTexParameterF_Exec(a1, a2, a3, &var4);
}

float glTexParameterxv_PackThread(uint64_t a1, int a2, int a3, int *a4)
{
  float v4 = (float)*a4;
  if (a3 == 34046) {
    float v4 = v4 * 0.000015259;
  }
  float v6 = v4;
  return glTexParameterF_Comp(a1, a2, a3, (uint64_t)&v6);
}

void *glTexParameteri_Comp(uint64_t a1, int a2, int a3, int a4)
{
  int v5 = a4;
  return glTexParameterI_Comp(a1, a2, a3, &v5, 1);
}

void *glTexParameterI_Comp(uint64_t a1, int a2, int a3, _DWORD *a4, char a5)
{
  float result = gleAddCommand(a1, (uint64_t)glTexParameteri_ListExec, 28);
  *(_DWORD *)float result = a2;
  *((_DWORD *)result + 1) = a3;
  *((unsigned char *)result + 8) = a5;
  if (a3 > 34229)
  {
    if (a3 > 35740)
    {
      if (a3 > 36421)
      {
        if (a3 != 36422)
        {
          int v10 = 37167;
          goto LABEL_28;
        }
LABEL_31:
        *((_DWORD *)result + 3) = *a4;
        *((_DWORD *)result + 4) = a4[1];
        *((_DWORD *)result + 5) = a4[2];
        *((_DWORD *)result + 6) = a4[3];
        return result;
      }
      if ((a3 - 36418) < 4) {
        goto LABEL_29;
      }
      int v11 = 35741;
LABEL_17:
      if (a3 != v11) {
        return result;
      }
      goto LABEL_31;
    }
    if (a3 <= 34890)
    {
      if (a3 == 34230) {
        goto LABEL_29;
      }
      int v10 = 34236;
    }
    else
    {
      if ((a3 - 34891) < 3 || a3 == 35400) {
        goto LABEL_29;
      }
      int v10 = 35455;
    }
LABEL_28:
    if (a3 != v10) {
      return result;
    }
    goto LABEL_29;
  }
  if (a3 <= 32958)
  {
    if (a3 <= 32869)
    {
      if ((a3 - 10240) < 4) {
        goto LABEL_29;
      }
      int v11 = 4100;
      goto LABEL_17;
    }
    if (a3 == 32870) {
      goto LABEL_29;
    }
    int v10 = 32882;
    goto LABEL_28;
  }
  if (a3 > 33168)
  {
    if (a3 == 33169 || a3 == 34046) {
      goto LABEL_29;
    }
    int v10 = 34049;
    goto LABEL_28;
  }
  if ((a3 - 33082) >= 4)
  {
    int v10 = 32959;
    goto LABEL_28;
  }
LABEL_29:
  *((_DWORD *)result + 3) = *a4;
  return result;
}

void *glTexParameteriv_Comp(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  return glTexParameterI_Comp(a1, a2, a3, a4, 1);
}

uint64_t glGetTexParameterfv_ExecThread(uint64_t a1, int a2, int a3, float *a4)
{
  (*(void (**)(void))(a1 + 27752))();

  return glGetTexParameterfv_Exec(a1, a2, a3, a4);
}

uint64_t glGetTexParameterfv_Exec(uint64_t a1, int a2, int a3, float *a4)
{
  uint64_t v7 = a1 + 29832;
  uint64_t result = gleLookUpNonProxyNonFaceTexture(a1, a2);
  if (!result) {
    goto LABEL_70;
  }
  if (a3 <= 34229)
  {
    if (a3 <= 33081)
    {
      if (a3 <= 10494)
      {
        switch(a3)
        {
          case 10240:
            LOWORD(v9) = *(_WORD *)(result + 914);
            goto LABEL_76;
          case 10241:
            LOWORD(v9) = *(_WORD *)(result + 912);
            goto LABEL_76;
          case 10242:
            LOWORD(v9) = *(_WORD *)(result + 920);
            goto LABEL_76;
          case 10243:
            LOWORD(v9) = *(_WORD *)(result + 922);
            goto LABEL_76;
          default:
            goto LABEL_70;
        }
      }
      if (a3 != 10495)
      {
        if (a3 == 32882 && (*(unsigned char *)(v7 + 2669) & 0xFE) != 2)
        {
          LOWORD(v9) = *(_WORD *)(result + 924);
          goto LABEL_76;
        }
        goto LABEL_70;
      }
      unsigned int v12 = *(unsigned __int8 *)(result + 792);
      goto LABEL_60;
    }
    if (a3 <= 33168)
    {
      switch(a3)
      {
        case 33082:
          if ((*(unsigned char *)(v7 + 2669) & 0xFE) == 2) {
            goto LABEL_70;
          }
          float v10 = *(float *)(result + 932);
          goto LABEL_77;
        case 33083:
          if ((*(unsigned char *)(v7 + 2669) & 0xFE) == 2) {
            goto LABEL_70;
          }
          float v10 = *(float *)(result + 936);
          goto LABEL_77;
        case 33084:
          if ((*(unsigned char *)(v7 + 2669) & 0xFE) == 2) {
            goto LABEL_70;
          }
          int v13 = *(_DWORD *)(result + 884);
          goto LABEL_65;
        case 33085:
          int v13 = *(_DWORD *)(result + 888);
          goto LABEL_65;
        default:
          goto LABEL_70;
      }
    }
    switch(a3)
    {
      case 33169:
        if (*(unsigned __int8 *)(v7 + 2669) - 3 > 1)
        {
          unsigned int v15 = *(unsigned char *)(result + 898) & 1;
          goto LABEL_68;
        }
        break;
      case 33503:
        if ((*(unsigned char *)(v7 + 2669) & 0xFE) != 2)
        {
          LOBYTE(v9) = *(unsigned char *)(result + 559);
          goto LABEL_76;
        }
        break;
      case 34046:
        float v10 = *(float *)(result + 928);
LABEL_77:
        *a4 = v10;
        return result;
    }
    goto LABEL_70;
  }
  if (a3 <= 35740)
  {
    if (a3 <= 34891)
    {
      if (a3 == 34230)
      {
        unsigned int v15 = (*(unsigned __int8 *)(result + 898) >> 1) & 1;
        goto LABEL_68;
      }
      if (a3 == 34231)
      {
        int v13 = *(_DWORD *)(result + 900);
LABEL_65:
        float v10 = (float)v13;
        goto LABEL_77;
      }
      if (a3 != 34236) {
        goto LABEL_70;
      }
      LOWORD(v9) = *(_WORD *)(result + 552);
    }
    else
    {
      if (a3 > 35399)
      {
        if (a3 == 35455)
        {
          unsigned int v12 = *(unsigned __int8 *)(result + 898);
LABEL_60:
          unsigned int v15 = (v12 >> 2) & 1;
LABEL_68:
          float v10 = (float)v15;
          goto LABEL_77;
        }
LABEL_70:
        if (!*(_WORD *)v7) {
          *(_WORD *)uint64_t v7 = 1280;
        }
        return result;
      }
      if (a3 == 34892)
      {
        if (*(unsigned char *)(v7 + 2669) == 2 || (*(unsigned char *)(*(void *)(a1 + 29032) + 577) & 0x10) == 0) {
          goto LABEL_70;
        }
        LOWORD(v9) = *(_WORD *)(result + 918);
      }
      else
      {
        if (a3 != 34893 || *(unsigned char *)(v7 + 2669) == 2 || (*(unsigned char *)(*(void *)(a1 + 29032) + 577) & 0x10) == 0) {
          goto LABEL_70;
        }
        LOWORD(v9) = *(_WORD *)(result + 916);
      }
    }
LABEL_76:
    float v10 = (float)v9;
    goto LABEL_77;
  }
  switch(a3)
  {
    case 36418:
      if ((*(unsigned char *)(v7 + 2669) & 0xFE) == 2) {
        goto LABEL_70;
      }
      unint64_t v11 = *(_WORD *)(result + 896) & 7;
      goto LABEL_57;
    case 36419:
      if ((*(unsigned char *)(v7 + 2669) & 0xFE) == 2) {
        goto LABEL_70;
      }
      unint64_t v11 = ((unint64_t)*(unsigned __int16 *)(result + 896) >> 3) & 7;
      goto LABEL_57;
    case 36420:
      if ((*(unsigned char *)(v7 + 2669) & 0xFE) == 2) {
        goto LABEL_70;
      }
      unint64_t v11 = ((unint64_t)*(unsigned __int16 *)(result + 896) >> 6) & 7;
      goto LABEL_57;
    case 36421:
      if ((*(unsigned char *)(v7 + 2669) & 0xFE) == 2) {
        goto LABEL_70;
      }
      unint64_t v11 = ((unint64_t)*(unsigned __int16 *)(result + 896) >> 9) & 7;
LABEL_57:
      unint64_t v14 = v11 - 1;
      if (v14 > 4) {
        float v10 = 6403.0;
      }
      else {
        float v10 = flt_227DC1E40[v14];
      }
      goto LABEL_77;
    case 36422:
      goto LABEL_70;
    default:
      if (a3 != 35741)
      {
        if (a3 != 37167) {
          goto LABEL_70;
        }
        float v10 = 0.0;
        if (*(unsigned char *)(result + 559)) {
          float v10 = 1.0;
        }
        goto LABEL_77;
      }
      if (*(unsigned char *)(v7 + 2669) != 2) {
        goto LABEL_70;
      }
      *(float32x4_t *)a4 = vcvtq_f32_s32(*(int32x4_t *)(result + 740));
      break;
  }
  return result;
}

uint64_t glGetTexParameteriv_ExecThread(uint64_t a1, int a2, int a3, int *a4)
{
  (*(void (**)(void))(a1 + 27752))();

  return glGetTexParameteriv_Exec(a1, a2, a3, a4);
}

uint64_t glGetTexParameteriv_Exec(uint64_t a1, int a2, int a3, int *a4)
{
  uint64_t v7 = a1 + 29832;
  uint64_t result = gleLookUpNonProxyNonFaceTexture(a1, a2);
  if (!result) {
    goto LABEL_69;
  }
  if (a3 <= 34229)
  {
    if (a3 <= 33081)
    {
      if (a3 <= 10494)
      {
        switch(a3)
        {
          case 10240:
            int v9 = *(unsigned __int16 *)(result + 914);
            goto LABEL_75;
          case 10241:
            int v9 = *(unsigned __int16 *)(result + 912);
            goto LABEL_75;
          case 10242:
            int v9 = *(unsigned __int16 *)(result + 920);
            goto LABEL_75;
          case 10243:
            int v9 = *(unsigned __int16 *)(result + 922);
            goto LABEL_75;
          default:
            goto LABEL_69;
        }
      }
      if (a3 != 10495)
      {
        if (a3 == 32882 && (*(unsigned char *)(v7 + 2669) & 0xFE) != 2)
        {
          int v9 = *(unsigned __int16 *)(result + 924);
          goto LABEL_75;
        }
        goto LABEL_69;
      }
      unsigned int v12 = *(unsigned __int8 *)(result + 792);
      goto LABEL_61;
    }
    if (a3 <= 33168)
    {
      switch(a3)
      {
        case 33082:
          if ((*(unsigned char *)(v7 + 2669) & 0xFE) == 2) {
            goto LABEL_69;
          }
          float v10 = *(float *)(result + 932);
          goto LABEL_46;
        case 33083:
          if ((*(unsigned char *)(v7 + 2669) & 0xFE) == 2) {
            goto LABEL_69;
          }
          float v10 = *(float *)(result + 936);
          goto LABEL_46;
        case 33084:
          if ((*(unsigned char *)(v7 + 2669) & 0xFE) == 2) {
            goto LABEL_69;
          }
          int v9 = *(_DWORD *)(result + 884);
          goto LABEL_75;
        case 33085:
          int v9 = *(_DWORD *)(result + 888);
          goto LABEL_75;
        default:
          goto LABEL_69;
      }
    }
    switch(a3)
    {
      case 33169:
        if (*(unsigned __int8 *)(v7 + 2669) - 3 > 1)
        {
          int v9 = *(unsigned char *)(result + 898) & 1;
          goto LABEL_75;
        }
        break;
      case 33503:
        if ((*(unsigned char *)(v7 + 2669) & 0xFE) != 2)
        {
          int v9 = *(unsigned __int8 *)(result + 559);
          goto LABEL_75;
        }
        break;
      case 34046:
        float v10 = *(float *)(result + 928);
LABEL_46:
        float v13 = 0.5;
        if (v10 < 0.0) {
          float v13 = -0.5;
        }
        int v9 = (int)(float)(v10 + v13);
        goto LABEL_75;
    }
    goto LABEL_69;
  }
  if (a3 <= 35740)
  {
    if (a3 <= 34891)
    {
      if (a3 == 34230)
      {
        int v9 = (*(unsigned __int8 *)(result + 898) >> 1) & 1;
        goto LABEL_75;
      }
      if (a3 == 34231)
      {
        int v9 = *(_DWORD *)(result + 900);
        goto LABEL_75;
      }
      if (a3 != 34236) {
        goto LABEL_69;
      }
      int v9 = *(unsigned __int16 *)(result + 552);
    }
    else
    {
      if (a3 > 35399)
      {
        if (a3 == 35455)
        {
          unsigned int v12 = *(unsigned __int8 *)(result + 898);
LABEL_61:
          int v9 = (v12 >> 2) & 1;
          goto LABEL_75;
        }
LABEL_69:
        if (!*(_WORD *)v7) {
          *(_WORD *)uint64_t v7 = 1280;
        }
        return result;
      }
      if (a3 == 34892)
      {
        if (*(unsigned char *)(v7 + 2669) == 2 || (*(unsigned char *)(*(void *)(a1 + 29032) + 577) & 0x10) == 0) {
          goto LABEL_69;
        }
        int v9 = *(unsigned __int16 *)(result + 918);
      }
      else
      {
        if (a3 != 34893 || *(unsigned char *)(v7 + 2669) == 2 || (*(unsigned char *)(*(void *)(a1 + 29032) + 577) & 0x10) == 0) {
          goto LABEL_69;
        }
        int v9 = *(unsigned __int16 *)(result + 916);
      }
    }
LABEL_75:
    *a4 = v9;
    return result;
  }
  switch(a3)
  {
    case 36418:
      if ((*(unsigned char *)(v7 + 2669) & 0xFE) == 2) {
        goto LABEL_69;
      }
      unint64_t v11 = *(_WORD *)(result + 896) & 7;
      goto LABEL_58;
    case 36419:
      if ((*(unsigned char *)(v7 + 2669) & 0xFE) == 2) {
        goto LABEL_69;
      }
      unint64_t v11 = ((unint64_t)*(unsigned __int16 *)(result + 896) >> 3) & 7;
      goto LABEL_58;
    case 36420:
      if ((*(unsigned char *)(v7 + 2669) & 0xFE) == 2) {
        goto LABEL_69;
      }
      unint64_t v11 = ((unint64_t)*(unsigned __int16 *)(result + 896) >> 6) & 7;
      goto LABEL_58;
    case 36421:
      if ((*(unsigned char *)(v7 + 2669) & 0xFE) == 2) {
        goto LABEL_69;
      }
      unint64_t v11 = ((unint64_t)*(unsigned __int16 *)(result + 896) >> 9) & 7;
LABEL_58:
      unint64_t v14 = v11 - 1;
      if (v14 > 4) {
        int v9 = 6403;
      }
      else {
        int v9 = dword_227DC1E54[v14];
      }
      goto LABEL_75;
    case 36422:
      goto LABEL_69;
    default:
      if (a3 != 35741)
      {
        if (a3 != 37167) {
          goto LABEL_69;
        }
        int v9 = *(unsigned char *)(result + 559) != 0;
        goto LABEL_75;
      }
      if (*(unsigned char *)(v7 + 2669) != 2) {
        goto LABEL_69;
      }
      *a4 = *(_DWORD *)(result + 740);
      a4[1] = *(_DWORD *)(result + 744);
      a4[2] = *(_DWORD *)(result + 748);
      a4[3] = *(_DWORD *)(result + 752);
      break;
  }
  return result;
}

uint64_t glGetTexParameterxv_Exec(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t result = glGetTexParameterfv_Exec(a1, a2, a3, v13);
  uint64_t v8 = 1;
  if (a3 <= 33168)
  {
    if ((a3 - 10240) < 4) {
      goto LABEL_12;
    }
    int v9 = 33085;
LABEL_7:
    if (a3 != v9)
    {
LABEL_17:
      if (!*(_WORD *)(a1 + 29832)) {
        *(_WORD *)(a1 + 29832) = 1280;
      }
      return result;
    }
    goto LABEL_12;
  }
  if (a3 <= 35740)
  {
    if (a3 == 33169) {
      goto LABEL_12;
    }
    int v9 = 34046;
    goto LABEL_7;
  }
  if (a3 != 37167)
  {
    if (a3 != 35741) {
      goto LABEL_17;
    }
    uint64_t v8 = 4;
  }
LABEL_12:
  float v10 = v13;
  do
  {
    float v11 = *v10++;
    float v12 = (float)(v11 * 65536.0) + 0.5;
    if (v12 < 0.0) {
      float v12 = v12 + -0.99998;
    }
    *a4++ = (int)v12;
    --v8;
  }
  while (v8);
  return result;
}

uint64_t glGetTexParameterxv_ExecThread(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  (*(void (**)(void))(a1 + 27752))();

  return glGetTexParameterxv_Exec(a1, a2, a3, a4);
}

uint64_t glTexParameterf_ListExec(uint64_t a1, float32x2_t *a2)
{
  return 24;
}

uint64_t glTexParameteri_ListExec(uint64_t a1, int *a2)
{
  return 28;
}

uint64_t glTexImage2D_FlushExec(unsigned char *a1, int a2, uint64_t a3, int a4, int a5, unsigned int a6, int a7, unsigned int a8, unsigned int a9, uint64_t a10)
{
  glTexImage2D_Exec(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);

  return glFlush_Exec((uint64_t)a1, v11, v12, v13);
}

unsigned char *glTexImage2D_PackThread(uint64_t a1, int a2, uint64_t a3, int a4, int a5, unsigned int a6, int a7, unsigned int a8, unsigned int a9, uint64_t a10)
{
  if (*(void *)(a1 + 26488) || *(unsigned char *)(a1 + 26662))
  {
    uint64_t result = gleAddCommand(a1, (uint64_t)glTexImage2D_UnpackThread, 48);
    *(_DWORD *)uint64_t result = a2;
    *((_DWORD *)result + 1) = a3;
    *((_DWORD *)result + 2) = a4;
    *((_DWORD *)result + 3) = a5;
    *((_DWORD *)result + 4) = a6;
    *((_DWORD *)result + 6) = a7;
    *((_DWORD *)result + 7) = a8;
    *((_DWORD *)result + 8) = a9;
    *((void *)result + 5) = a10;
  }
  else
  {
    (*(void (**)(uint64_t))(a1 + 27752))(a1);
    return glTexImage2D_Exec((unsigned char *)a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  }
  return result;
}

uint64_t glTexImage2D_UnpackThread(unsigned char *a1, uint64_t a2)
{
  return 48;
}

uint64_t glTexImage2D_FlushExecThread(uint64_t a1, int a2, uint64_t a3, int a4, int a5, unsigned int a6, int a7, unsigned int a8, unsigned int a9, uint64_t a10)
{
  (*(void (**)(void))(a1 + 27752))();
  glTexImage2D_Exec((unsigned char *)a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);

  return glFlush_Exec(a1, v18, v19, v20);
}

uint64_t glTexStorage2D_Exec(uint64_t a1, int a2, unsigned int a3, int a4, int a5, int a6)
{
  uint64_t result = gleCheckTexStorage2DArgs(a1, a2, a3, a4, a5, a6);
  if (!result) {
    return result;
  }
  uint64_t v9 = result;
  if (*(unsigned char *)(result + 770)) {
    return result;
  }
  __int16 v10 = *(_WORD *)(result + 768);
  if ((v10 & 0x1C00) == 0x1000) {
    goto LABEL_10;
  }
  if ((*(_WORD *)(result + 768) & 0x1C00) == 0)
  {
    v10 |= 0x1000u;
    *(_WORD *)(result + 768) = v10;
    goto LABEL_10;
  }
  if ((*(_WORD *)(result + 768) & 0xC00) == 0)
  {
LABEL_10:
    unint64_t v11 = 0;
    int v12 = 0;
    if (a4 == 37793) {
      int v13 = 32856;
    }
    else {
      int v13 = a4;
    }
    if (a4 == 37793) {
      int v14 = 32993;
    }
    else {
      int v14 = 6408;
    }
    unsigned int v25 = v14;
    unsigned int v26 = v13;
    int v15 = v10 & 0xF;
    unsigned int v16 = *(unsigned __int8 *)(result + 978);
    *(unsigned char *)(result + 559) = a3;
    uint64_t v17 = result + 32 * a3 + 1032;
    do
    {
      LOWORD(v24) = 256;
      uint64_t result = gleEvaluateTextureImageChange(a1, v9, v9 + 480 * v11 + 1032, v11, 0, a5, a6, 1, 0, v26, v25, 0x1401u, v24, 0);
      int v18 = result;
      if (v15 != 2)
      {
        if (v16 <= *(unsigned __int8 *)(v9 + 975)) {
          int v19 = *(unsigned __int8 *)(v9 + 975);
        }
        else {
          int v19 = v16;
        }
        uint64_t result = gleGenerateEmptyMipmaps(a1, v9, v11, 0, v19, 0, 0);
      }
      if (v16 >= a3)
      {
        int v20 = v16 - a3 + 1;
        BOOL v21 = (int *)v17;
        do
        {
          uint64_t result = gleDirtyTextureLevelCurrentBindPointsGeom(a1, v9, v21);
          v21 += 8;
          --v20;
        }
        while (v20);
      }
      v12 |= v18;
      if (v15) {
        break;
      }
      v17 += 480;
    }
    while (v11++ < 5);
    *(_DWORD *)(v9 + 968) = 65538;
    if ((v12 & 0xC0000001) != 0)
    {
      if (v12 < 0) {
        int v23 = 134356992;
      }
      else {
        int v23 = 139264;
      }
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1548) |= v23;
      uint64_t result = gleDirtyTextureObjectCurrentBindPointsGeom(a1, v9);
    }
    if ((*(_WORD *)(v9 + 768) & 0x100) != 0) {
      *(unsigned char *)(v9 + 559) = 0;
    }
    return result;
  }
  if (!*(_WORD *)(a1 + 29832)) {
    *(_WORD *)(a1 + 29832) = 1282;
  }
  return result;
}

uint64_t glTexStorage3D_Exec(uint64_t a1, int a2, unsigned int a3, int a4, int a5, int a6, int a7)
{
  uint64_t result = gleCheckTexStorage3DArgs(a1, a2, a3, a4, a5, a6, a7);
  if (!result) {
    return result;
  }
  uint64_t v14 = result;
  if (*(unsigned char *)(result + 770)) {
    return result;
  }
  __int16 v15 = *(_WORD *)(result + 768);
  if ((v15 & 0x1C00) == 0x1000) {
    goto LABEL_10;
  }
  if ((*(_WORD *)(result + 768) & 0x1C00) == 0)
  {
    *(_WORD *)(result + 768) = v15 | 0x1000;
LABEL_10:
    if (a4 == 37793) {
      unsigned int v16 = 32993;
    }
    else {
      unsigned int v16 = 6408;
    }
    if (a4 == 37793) {
      unsigned int v17 = 32856;
    }
    else {
      unsigned int v17 = a4;
    }
    unsigned int v18 = *(unsigned __int8 *)(result + 978);
    *(unsigned char *)(result + 559) = a3;
    LOWORD(v25) = 256;
    int v19 = gleEvaluateTextureImageChange(a1, result, result + 1032, 0, 0, a5, a6, a7, 0, v17, v16, 0x1401u, v25, 0);
    if (v18 <= *(unsigned __int8 *)(v14 + 975)) {
      int v20 = *(unsigned __int8 *)(v14 + 975);
    }
    else {
      int v20 = v18;
    }
    uint64_t result = gleGenerateEmptyMipmaps(a1, v14, 0, 0, v20, 0, 0);
    unsigned int v21 = v18 - a3;
    if (v18 >= a3)
    {
      int v22 = (int *)(v14 + 32 * a3 + 1032);
      unsigned int v23 = v21 + 1;
      do
      {
        uint64_t result = gleDirtyTextureLevelCurrentBindPointsGeom(a1, v14, v22);
        v22 += 8;
        --v23;
      }
      while (v23);
    }
    *(_DWORD *)(v14 + 968) = 65538;
    if ((v19 & 0xC0000001) != 0)
    {
      if (v19 < 0) {
        int v24 = 134356992;
      }
      else {
        int v24 = 139264;
      }
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1548) |= v24;
      uint64_t result = gleDirtyTextureObjectCurrentBindPointsGeom(a1, v14);
    }
    if ((*(_WORD *)(v14 + 768) & 0x100) != 0) {
      *(unsigned char *)(v14 + 559) = 0;
    }
    return result;
  }
  if ((*(_WORD *)(result + 768) & 0xC00) == 0) {
    goto LABEL_10;
  }
  if (!*(_WORD *)(a1 + 29832)) {
    *(_WORD *)(a1 + 29832) = 1282;
  }
  return result;
}

_DWORD *glTexStorage2D_PackThread(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  uint64_t result = gleAddCommand(a1, (uint64_t)glTexStorage2D_UnpackThread, 24);
  *uint64_t result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  result[4] = a6;
  return result;
}

uint64_t glTexStorage2D_UnpackThread(uint64_t a1, uint64_t a2)
{
  return 24;
}

_DWORD *glTexStorage3D_PackThread(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  uint64_t result = gleAddCommand(a1, (uint64_t)glTexStorage3D_UnpackThread, 24);
  *uint64_t result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  result[4] = a6;
  result[5] = a7;
  return result;
}

uint64_t glTexStorage3D_UnpackThread(uint64_t a1, uint64_t a2)
{
  return 24;
}

uint64_t glTexImage3D_Exec(uint64_t result, int a2, uint64_t a3, unsigned int a4, int a5, int a6, unsigned int a7, int a8, unsigned int a9, unsigned int a10, uint64_t a11)
{
  uint64_t v16 = result;
  uint64_t v17 = a11;
  unsigned int v18 = (_WORD *)(result + 29832);
  if (!a11 && *(unsigned char *)(result + 18518))
  {
    if (!*v18) {
      *unsigned int v18 = 1281;
    }
    return result;
  }
  uint64_t v71 = result + 29832;
  uint64_t v72 = result + 18504;
  unint64_t v74 = 0;
  uint64_t result = gleCheckTexImage3DArgs(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, &v74);
  if (!result) {
    return result;
  }
  uint64_t v19 = result;
  if (*(unsigned char *)(result + 770)) {
    return result;
  }
  int v70 = a5;
  uint64_t v20 = *(void *)(v16 + 19336);
  uint64_t v68 = v20;
  if (v20)
  {
    unint64_t v21 = gleOffsetLimitStorage3D((int *)(v16 + 18484), v70, a6, a7, v74, a11);
    uint64_t v22 = v20;
    LODWORD(v20) = v70;
    uint64_t result = gleHandleUnpackBufferInEngineNoSync(v16, v22, v21, (BYTE4(v74) & 0x1F) + 1, a11);
    uint64_t v17 = result;
    if (!result) {
      return result;
    }
  }
  else
  {
    LODWORD(v20) = v70;
  }
  __int16 v23 = *(_WORD *)(v19 + 768);
  if ((v23 & 0x1C00) != 0x1000)
  {
    if ((*(_WORD *)(v19 + 768) & 0x1C00) != 0)
    {
      if ((*(_WORD *)(v19 + 768) & 0xC00) != 0)
      {
        if (!*(_WORD *)v71) {
          *(_WORD *)uint64_t v71 = 1282;
        }
        return result;
      }
    }
    else
    {
      *(_WORD *)(v19 + 768) = v23 | 0x1000;
    }
  }
  unsigned int v24 = gleStandardizeIntegerFormat(a9);
  if ((*(unsigned char *)(v16 + 1540) & 4) != 0)
  {
    int MatrixIdentifier = gleGenerateMatrixIdentifier(v16, v16 + 9488, v25, v26, v27);
    *(_DWORD *)(v72 + 648) = *(_DWORD *)(v72 + 648) & 0xFFFFFEFF | ((MatrixIdentifier != -1074791426) << 8);
    *(_DWORD *)(v72 + 11228) = MatrixIdentifier;
  }
  BOOL v29 = a6 != 0;
  BOOL v30 = a7 != 0;
  if (v29 && v30) {
    uint64_t v20 = v20;
  }
  else {
    uint64_t v20 = 0;
  }
  if (v29 && v30) {
    int v31 = a8;
  }
  else {
    int v31 = 0;
  }
  uint64_t v67 = v19 + 1032;
  LOWORD(v57) = 256;
  unsigned int v32 = v24;
  unsigned int v56 = a4;
  char v33 = (int *)(v19 + 1032 + 32 * (int)a3);
  int v34 = gleEvaluateTextureImageChange(v16, v19, (uint64_t)v33, 0, a3, v20, a6, a7, v31, v56, v24, a10, v57, v17);
  if (!v20) {
    goto LABEL_70;
  }
  if (!v17
    || (*(_WORD *)(v19 + 768) & 0x100) != 0
    || !*(unsigned char *)(*(void *)(v16 + 29032) + 174)
    || a10 == 6656 && (*(unsigned char *)v72 & 7) != 0
    || (uint64_t v35 = v67 + 32 * (int)a3, v37 = *(unsigned char *)(v35 + 11), v36 = (unsigned char *)(v35 + 11), (v37 & 1) != 0)
    || *(unsigned __int8 *)(v19 + 976) > (int)a3
    || *(unsigned __int8 *)(v19 + 978) < (int)a3
    || ((*(unsigned __int16 *)(v19 + 984) >> a3) & 1) == 0)
  {
    int v38 = v68;
    if (v68)
    {
      uint64_t v39 = (int)a3;
      int v40 = v70;
      if (*(void *)(v68 + 192)) {
        gleSynchronizeBufferOnCurrentDevicesForRead(v16, v68 + 40);
      }
      int v38 = 0;
      if (!v17) {
        goto LABEL_64;
      }
    }
    else
    {
      uint64_t v39 = (int)a3;
      int v40 = v70;
      if (!v17)
      {
LABEL_64:
        *(_DWORD *)(v19 + 968) = 65538;
        goto LABEL_65;
      }
    }
  }
  else
  {
    float v64 = v36;
    if ((*(unsigned char *)(v19 + 898) & 1) != 0 && *(_DWORD *)(v19 + 884) == a3)
    {
      gleGenerateEmptyMipmaps(v16, v19, 0, a3, *(unsigned __int8 *)(v19 + 975), 0, 0);
      char v63 = 0;
      int v65 = 1;
    }
    else
    {
      int v65 = 0;
      char v63 = 1;
    }
    uint64_t v45 = *(void *)(v16 + 8 * *(unsigned __int16 *)(v72 + 5264) + 23936);
    if (v45) {
      char v46 = (unsigned char *)(v45 + 198);
    }
    else {
      char v46 = (unsigned char *)(v19 + 926);
    }
    BOOL v47 = (*v46 & 1) == 0;
    int v48 = *(__int16 *)(v19 + 982);
    uint64_t v49 = (v48 >> 15);
    uint64_t v50 = (((v48 >> 13) & 1) - 1) & (v48 >> 15);
    *(_WORD *)(v19 + 968) = v32;
    *(_WORD *)(v19 + 970) = a10;
    if (v68)
    {
      uint64_t v61 = v68 + 40;
      BOOL v59 = v47;
      unsigned int v60 = v48 >> 15;
      unsigned int v62 = v32;
      uint64_t v51 = (((v48 >> 13) & 1) - 1) & (v48 >> 15);
      uint64_t result = (*(uint64_t (**)(void, void, void, uint64_t))(*(void *)(v16 + 29448) + 368))(*(void *)(v16 + 29016), *(void *)(v19 + 8 * *(unsigned __int8 *)(v71 + 2667)), 0, a3);
      if (result)
      {
LABEL_59:
        *(void *)(v19 + 536) = *(void *)(v16 + 29024);
        *v64 |= 0x40u;
        if ((v63 & 1) == 0)
        {
          int v52 = *(unsigned __int8 *)(v19 + 975);
          int v53 = a3;
          if (v52 > (int)a3)
          {
            int v54 = (unsigned char *)(v19 + 32 * (a3 + 1) + 1043);
            do
            {
              *v54 |= 0x40u;
              v54 += 32;
              ++v53;
            }
            while (v53 < v52);
          }
        }
        goto LABEL_71;
      }
      BOOL v47 = v59;
      uint64_t v49 = v60;
      uint64_t v50 = v51;
      unsigned int v32 = v62;
      if (*(void *)(v68 + 192))
      {
        unsigned int v69 = v50;
        gleSynchronizeBufferOnCurrentDevicesForRead(v16, v61);
        BOOL v47 = v59;
        uint64_t v50 = v69;
        uint64_t v49 = v60;
        unsigned int v32 = v62;
        uint64_t v20 = v20;
      }
    }
    uint64_t result = (*(uint64_t (**)(void, void, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t, _DWORD, void, BOOL))(*(void *)(v16 + 29448) + 368))(*(void *)(v16 + 29016), *(void *)(v19 + 8 * *(unsigned __int8 *)(v71 + 2667)), 0, a3, v49, v49, v50, v20, __PAIR64__(a7, a6), __PAIR64__(a10, v32), v17, 0, 0, v47);
    if (result) {
      goto LABEL_59;
    }
    int v38 = v65;
    int v40 = v70;
    uint64_t v39 = (int)a3;
  }
  if ((*(_WORD *)(v19 + 768) & 0x100) != 0) {
    goto LABEL_64;
  }
  int v66 = v38;
  uint64_t v41 = v67 + 32 * v39;
  char v43 = *(unsigned char *)(v41 + 11);
  uint64_t v42 = (unsigned char *)(v41 + 11);
  if ((v43 & 1) != 0 || gfxAllocateTextureLevel())
  {
    LOBYTE(v58) = 0;
    gleTextureImagePut((_DWORD *)v16, v19, (uint64_t)v33, 0, 0, 0, v40, a6, a7, v74, v58, v16 + 18484, v17);
    *(_DWORD *)(v19 + 968) = *(_DWORD *)(v67 + 32 * v39 + 16);
    *v42 |= 0x10u;
    *(_WORD *)(v19 + 996) |= *(_WORD *)(v19 + 984) & (unsigned __int16)(1 << a3);
    uint64_t v44 = v19 + 24 * *(unsigned __int8 *)(v71 + 2667);
    *(unsigned char *)(v44 + 116) |= 4u;
    *(_WORD *)(v44 + 104) |= 1 << a3;
  }
  else if (!*(_WORD *)v71)
  {
    *(_WORD *)uint64_t v71 = 1285;
  }
  int v38 = v66;
LABEL_65:
  if (!*(void *)(v67 + 32 * v39 + 24) && (*(_WORD *)(v19 + 768) & 0x100) == 0
    || (*(unsigned char *)(v19 + 898) & 1) == 0
    || *(_DWORD *)(v19 + 884) != a3)
  {
LABEL_70:
    uint64_t result = 0;
    goto LABEL_71;
  }
  uint64_t result = gleGenMipmaps(v16, v19, 0, a3, 1, v38 == 0);
LABEL_71:
  if ((v34 & 0xC0000001) != 0)
  {
    if (v34 < 0) {
      int v55 = 134356992;
    }
    else {
      int v55 = 139264;
    }
    *(_DWORD *)(v72 + 10148) = 0;
    *(_DWORD *)(v16 + 1548) |= v55;
  }
  else if (result == 1)
  {
    return result;
  }
  return gleDirtyTextureLevelCurrentBindPointsGeom(v16, v19, v33);
}

void *glTexImage3D_PackThread(uint64_t a1, int a2, uint64_t a3, unsigned int a4, int a5, int a6, unsigned int a7, int a8, unsigned int a9, unsigned int a10, uint64_t a11)
{
  if (*(void *)(a1 + 26488) || *(unsigned char *)(a1 + 26662))
  {
    uint64_t result = gleAddCommand(a1, (uint64_t)glTexImage3D_UnpackThread, 48);
    *(_DWORD *)uint64_t result = a2;
    *((_DWORD *)result + 1) = a3;
    *((_DWORD *)result + 2) = a4;
    *((_DWORD *)result + 3) = a5;
    *((_DWORD *)result + 4) = a6;
    *((_DWORD *)result + 5) = a7;
    *((_DWORD *)result + 6) = a8;
    *((_DWORD *)result + 7) = a9;
    *((_DWORD *)result + 8) = a10;
    result[5] = a11;
  }
  else
  {
    (*(void (**)(uint64_t))(a1 + 27752))(a1);
    return (void *)glTexImage3D_Exec(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  }
  return result;
}

uint64_t glTexImage3D_UnpackThread(uint64_t a1, uint64_t a2)
{
  return 48;
}

uint64_t glTexSubImage2D_FlushExec(uint64_t a1, int a2, uint64_t a3, unsigned int a4, int a5, uint64_t a6, unsigned int a7, unsigned int a8, int a9, uint64_t a10)
{
  glTexSubImage2D_Exec(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);

  return glFlush_Exec(a1, v11, v12, v13);
}

void *glTexSubImage2D_PackThread(uint64_t a1, int a2, uint64_t a3, unsigned int a4, int a5, uint64_t a6, unsigned int a7, unsigned int a8, int a9, unint64_t a10)
{
  uint64_t v17 = *(void *)(a1 + 26488);
  if (!*(unsigned char *)(a1 + 26662)) {
    goto LABEL_9;
  }
  uint64_t v18 = gleLookUpNonProxyTexture2D(a1, a2);
  unsigned int v19 = a2 - 34069;
  if ((a2 - 34069) >= 6) {
    unsigned int v19 = 0;
  }
  uint64_t v20 = v18 + 480 * v19 + 32 * (int)a3;
  unint64_t v21 = *(void *)(v20 + 1056);
  BOOL v22 = !v21 || v21 > a10;
  if (v22)
  {
LABEL_9:
    if (v17)
    {
LABEL_10:
      uint64_t result = gleAddCommand(a1, (uint64_t)glTexSubImage2D_UnpackThread, 48);
      *(_DWORD *)uint64_t result = a2;
      *((_DWORD *)result + 1) = a3;
      *((_DWORD *)result + 2) = a4;
      *((_DWORD *)result + 3) = a5;
      *((_DWORD *)result + 5) = a6;
      *((_DWORD *)result + 6) = a7;
      *((_DWORD *)result + 8) = a8;
      *((_DWORD *)result + 9) = a9;
      result[5] = a10;
      return result;
    }
  }
  else
  {
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    uint64_t v24 = v18 + 480 * v19 + 32 * (int)a3;
    int v28 = a5;
    int v25 = *(unsigned __int16 *)(v24 + 1038) * *(unsigned __int16 *)(v24 + 1044);
    unint64_t v26 = *(void *)(v20 + 1056) + (int)(v25 * glePixelBytes(a8, a9));
    glePixelPackSettings(a1, a8, a9, a6, a7, (int *)(a1 + 18484), (_DWORD *)&v31 + 1, &v31, (_DWORD *)&v30 + 1, (int *)&v30, 2);
    BOOL v22 = a10 + v31 + HIDWORD(v31) * a7 * HIDWORD(v30) > v26;
    a5 = v28;
    if (!v22 || v17 != 0) {
      goto LABEL_10;
    }
  }
  (*(void (**)(uint64_t))(a1 + 27752))(a1);
  return (void *)glTexSubImage2D_Exec(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t glTexSubImage2D_UnpackThread(uint64_t a1, uint64_t a2)
{
  return 48;
}

uint64_t glTexSubImage2D_FlushExecThread(uint64_t a1, int a2, uint64_t a3, unsigned int a4, int a5, uint64_t a6, unsigned int a7, unsigned int a8, int a9, uint64_t a10)
{
  (*(void (**)(void))(a1 + 27752))();
  glTexSubImage2D_Exec(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);

  return glFlush_Exec(a1, v18, v19, v20);
}

uint64_t glTexSubImage3D_Exec(uint64_t a1, int a2, uint64_t a3, unsigned int a4, unsigned int a5, int a6, uint64_t a7, int a8, int a9, unsigned int a10, int a11, uint64_t a12)
{
  unint64_t v60 = 0;
  uint64_t v59 = a3;
  uint64_t result = gleCheckTexSubImage3DArgs(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, &v60);
  if (!result) {
    return result;
  }
  uint64_t v17 = result;
  if (*(unsigned char *)(result + 770)) {
    return result;
  }
  uint64_t v18 = a12;
  uint64_t v19 = *(void *)(a1 + 19336);
  uint64_t v54 = v19;
  if (v19)
  {
    uint64_t v55 = result;
    unint64_t v20 = gleOffsetLimitStorage3D((int *)(a1 + 18484), a7, a8, a9, v60, a12);
    uint64_t v17 = v55;
    uint64_t result = gleHandleUnpackBufferInEngineNoSync(a1, v19, v20, (BYTE4(v60) & 0x1F) + 1, a12);
    uint64_t v18 = result;
    if (!result) {
      return result;
    }
  }
  if (!a7 || !a8 || !a9) {
    return result;
  }
  unsigned int v52 = a6;
  uint64_t v53 = v18;
  unsigned int v21 = gleStandardizeIntegerFormat(a10);
  if ((*(unsigned char *)(a1 + 1540) & 4) != 0)
  {
    int MatrixIdentifier = gleGenerateMatrixIdentifier(a1, a1 + 9488, v22, v23, v24);
    *(_DWORD *)(a1 + 19152) = *(_DWORD *)(a1 + 19152) & 0xFFFFFEFF | ((MatrixIdentifier != -1074791426) << 8);
    *(_DWORD *)(a1 + 29732) = MatrixIdentifier;
  }
  unint64_t v26 = (_WORD *)(a1 + 29832);
  uint64_t v27 = v17 + 1032;
  uint64_t v56 = v17 + 1032 + 32 * (int)v59;
  BOOL v28 = (a11 != 6656 || (*(unsigned char *)(a1 + 18504) & 7) == 0)
     && checkFastPath(a1, v56, a4, a5, v52, a7, a8, v60, v53, 4) != 0;
  if (!*(void *)(v17 + 536) && (*(_WORD *)(v17 + 768) & 0x800) == 0) {
    gfxWaitTextureOnDevices();
  }
  if (v28
    && *(unsigned __int8 *)(v17 + 976) <= (int)v59
    && *(unsigned __int8 *)(v17 + 978) >= (int)v59
    && ((1 << v59) & *(unsigned __int16 *)(v17 + 984)) != 0)
  {
    uint64_t v29 = *(void *)(a1 + 8 * *(unsigned __int16 *)(a1 + 23768) + 23936);
    if (v29) {
      uint64_t v30 = (unsigned char *)(v29 + 198);
    }
    else {
      uint64_t v30 = (unsigned char *)(v17 + 926);
    }
    BOOL v31 = (*v30 & 1) == 0;
    if (*(unsigned char *)(v17 + 898))
    {
      uint64_t v33 = v59;
      if (*(_DWORD *)(v17 + 884) == v59)
      {
        BOOL v42 = (*v30 & 1) == 0;
        gleGenerateEmptyMipmaps(a1, v17, 0, v59, *(unsigned __int8 *)(v17 + 975), 0, 0);
        BOOL v31 = v42;
        uint64_t v33 = v59;
        char v51 = 0;
        int v32 = 1;
      }
      else
      {
        int v32 = 0;
        char v51 = 1;
      }
    }
    else
    {
      int v32 = 0;
      char v51 = 1;
      uint64_t v33 = v59;
    }
    *(_WORD *)(v17 + 968) = v21;
    *(_WORD *)(v17 + 970) = a11;
    if (v54)
    {
      LODWORD(v50) = v31;
      HIDWORD(v50) = v31;
      uint64_t result = (*(uint64_t (**)(void, void, void, uint64_t, void, void, void, uint64_t, unint64_t, unint64_t, uint64_t, _DWORD, void, uint64_t))(*(void *)(a1 + 29448) + 368))(*(void *)(a1 + 29016), *(void *)(v17 + 8 * *(unsigned __int8 *)(a1 + 32499)), 0, v33, a4, a5, v52, a7, __PAIR64__(a9, a8), __PAIR64__(a11, v21), v53, 0, *(void *)(v54 + 40 + 8 * *(unsigned __int8 *)(a1 + 32499)), v50);
      if (result) {
        goto LABEL_61;
      }
      if (*(void *)(v54 + 192)) {
        gleSynchronizeBufferOnCurrentDevicesForRead(a1, v54 + 40);
      }
    }
    uint64_t v49 = v53;
    uint64_t result = (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 29448) + 368))(*(void *)(a1 + 29016), *(void *)(v17 + 8 * *(unsigned __int8 *)(a1 + 32499)), 0);
    if (result)
    {
LABEL_61:
      if ((*(_WORD *)(v17 + 768) & 0x800) == 0)
      {
        *(void *)(v17 + 536) = *(void *)(a1 + 29024);
        uint64_t v43 = v27 + 32 * (int)v59;
        char v46 = *(unsigned char *)(v43 + 11);
        uint64_t v45 = (char *)(v43 + 11);
        char v44 = v46;
        if ((v46 & 0x10) != 0)
        {
          if ((v44 & 9) == 0)
          {
            uint64_t result = gfxFreeTextureLevel();
            char v44 = *v45;
          }
          v44 &= ~0x10u;
          *(_WORD *)(v17 + 996) &= ~(unsigned __int16)(1 << v59);
        }
        *uint64_t v45 = v44 | 0x40;
        if ((v51 & 1) == 0)
        {
          int v47 = *(unsigned __int8 *)(v17 + 975);
          if (v47 > (int)v59)
          {
            int v48 = (unsigned char *)(v17 + 32 * v59 + 1075);
            do
            {
              *v48 |= 0x40u;
              v48 += 32;
              LODWORD(v59) = v59 + 1;
            }
            while ((int)v59 < v47);
          }
        }
      }
      return result;
    }
  }
  else
  {
    if (v54 && *(void *)(v54 + 192)) {
      gleSynchronizeBufferOnCurrentDevicesForRead(a1, v54 + 40);
    }
    int v32 = 0;
  }
  uint64_t v34 = v17 + 1032;
  uint64_t v35 = v27 + 32 * (int)v59;
  char v38 = *(unsigned char *)(v35 + 11);
  char v37 = (char *)(v35 + 11);
  char v36 = v38;
  if ((v38 & 0x40) != 0)
  {
    gleSynchronizeTextureLevelOnCurrentDevices(a1, v17);
  }
  else if ((v36 & 0x10) == 0)
  {
    if (!*(void *)(v34 + 32 * (int)v59 + 24))
    {
      if (!gfxAllocateTextureLevel())
      {
        if (!*v26) {
          *unint64_t v26 = 1285;
        }
        goto LABEL_38;
      }
      char v36 = *v37;
    }
    *char v37 = v36 | 0x10;
  }
LABEL_38:
  gfxModifyPluginTextureLevel();
  if ((*(_WORD *)(v17 + 768) & 0x800) == 0) {
    (*(void (**)(void, uint64_t, void, void))(*(void *)(a1 + 29496) + 280))(*(void *)(a1 + 29464), 1, 0, *(void *)(v17 + 8 * *(unsigned __int8 *)(a1 + 32500)));
  }
  if ((*v37 & 0x10) != 0)
  {
    int v39 = *(unsigned __int8 *)(v34 + 32 * (int)v59 + 10);
    unsigned int v40 = v39 + a4;
    if ((*(_WORD *)(v17 + 982) & 0x600) != 0) {
      int v41 = *(unsigned __int8 *)(v34 + 32 * (int)v59 + 10);
    }
    else {
      int v41 = 0;
    }
    if ((*(_WORD *)(v17 + 982) & 0x1800) == 0) {
      int v39 = 0;
    }
    LOBYTE(v49) = 0;
    gleTextureImagePut((_DWORD *)a1, v17, v56, v40, v41 + a5, v39 + v52, a7, a8, a9, v60, v49, a1 + 18484, v53);
  }
  if ((*(unsigned char *)(v17 + 898) & 1) == 0) {
    return gleDirtyTextureLevelCurrentBindPointsData(a1, v17, v56);
  }
  if (*(_DWORD *)(v17 + 884) != v59) {
    return gleDirtyTextureLevelCurrentBindPointsData(a1, v17, v56);
  }
  uint64_t result = gleGenMipmaps(a1, v17, 0, v59, 1, v32 == 0);
  if (!result) {
    return gleDirtyTextureLevelCurrentBindPointsData(a1, v17, v56);
  }
  return result;
}

void *glTexSubImage3D_PackThread(uint64_t a1, int a2, uint64_t a3, unsigned int a4, unsigned int a5, int a6, unsigned int a7, int a8, int a9, unsigned int a10, int a11, uint64_t a12)
{
  if (*(void *)(a1 + 26488))
  {
    uint64_t result = gleAddCommand(a1, (uint64_t)glTexSubImage3D_UnpackThread, 48);
    *(_DWORD *)uint64_t result = a2;
    *((_DWORD *)result + 1) = a3;
    *((_DWORD *)result + 2) = a4;
    *((_DWORD *)result + 3) = a5;
    *((_DWORD *)result + 4) = a6;
    *((_DWORD *)result + 5) = a7;
    *((_DWORD *)result + 6) = a8;
    *((_DWORD *)result + 7) = a9;
    *((_DWORD *)result + 8) = a10;
    *((_DWORD *)result + 9) = a11;
    result[5] = a12;
  }
  else
  {
    (*(void (**)(uint64_t))(a1 + 27752))(a1);
    return (void *)glTexSubImage3D_Exec(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  }
  return result;
}

uint64_t glTexSubImage3D_UnpackThread(uint64_t a1, uint64_t a2)
{
  return 48;
}

void *glBeginTransformFeedback_Exec(void *result, unsigned int a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  BOOL v2 = (_DWORD *)result + 7163;
  uint64_t v3 = result[3304];
  if (*(__int16 *)(v3 + 42) != -1) {
    goto LABEL_15;
  }
  if (a2 > 4 || ((1 << a2) & 0x13) == 0)
  {
    if (*((_WORD *)result + 14916)) {
      return result;
    }
    __int16 v14 = 1280;
    goto LABEL_61;
  }
  int v5 = result;
  float v6 = (_DWORD *)result[3096];
  if (!v6)
  {
    uint64_t v11 = result[3097];
    if (!v11)
    {
LABEL_15:
      if (*((_WORD *)result + 14916)) {
        return result;
      }
      __int16 v14 = 1282;
LABEL_61:
      *((_WORD *)result + 14916) = v14;
      return result;
    }
    uint64_t v12 = v11 + 40;
    unsigned int v13 = 3;
    while (1)
    {
      float v6 = *(_DWORD **)(v12 + 8 * v13);
      if (v6) {
        break;
      }
      if (--v13 == -1) {
        goto LABEL_15;
      }
    }
  }
  int v7 = v6[931];
  if (!v7 || (v7 & ~*(_DWORD *)(v3 + 168)) != 0) {
    goto LABEL_15;
  }
  if (*((unsigned char *)result + 32481)) {
    *((_WORD *)result + 8993) = a2;
  }
  *(_WORD *)(v3 + 42) = a2;
  *(_DWORD *)(result[3304] + 172) = 0;
  uint64_t v8 = result[3304];
  ++*(_DWORD *)(v8 + 20);
  ++v6[5];
  *(void *)(v8 + 184) = v6;
  ++v6[993];
  uint64_t updated = gleUpdateInvalidPrimitives((uint64_t)result);
  *BOOL v2 = 0;
  *((_DWORD *)v5 + 387) |= 0x8000u;
  BOOL v31 = v2;
  if (a2 > 4) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = qword_227DC1E68[a2];
  }
  v30[1] = v30;
  MEMORY[0x270FA5388](updated);
  uint64_t v17 = (void *)((char *)v30 - v16);
  *(void *)((char *)v30 - v16) = 0;
  if (v15 << 16 >= 1)
  {
    uint64_t v18 = 0;
    if (v15 <= 1) {
      uint64_t v19 = 1;
    }
    else {
      uint64_t v19 = v15;
    }
    do
    {
      uint64_t v32 = 0;
      ShGetTransformFeedbackVarying();
      if ((int)v32 <= 36293)
      {
        int v20 = 4;
        switch((int)v32)
        {
          case 35664:
          case 35667:
          case 35671:
            goto LABEL_26;
          case 35665:
          case 35668:
          case 35672:
            goto LABEL_29;
          case 35666:
          case 35669:
          case 35673:
          case 35674:
            goto LABEL_28;
          case 35670:
            break;
          case 35675:
            int v20 = 36;
            break;
          case 35676:
            int v20 = 64;
            break;
          case 35677:
          case 35678:
          case 35679:
          case 35680:
          case 35681:
          case 35682:
          case 35683:
          case 35684:
            goto LABEL_31;
          case 35685:
          case 35687:
            int v20 = 24;
            break;
          case 35686:
          case 35689:
            int v20 = 32;
            break;
          case 35688:
          case 35690:
            int v20 = 48;
            break;
          default:
            if ((v32 - 5124) >= 3) {
              goto LABEL_31;
            }
            break;
        }
      }
      else
      {
        switch(v32)
        {
          case 0x8DC8:
LABEL_28:
            int v20 = 16;
            break;
          case 0x8DC7:
LABEL_29:
            int v20 = 12;
            break;
          case 0x8DC6:
LABEL_26:
            int v20 = 8;
            break;
          default:
LABEL_31:
            int v20 = 0;
            break;
        }
      }
      uint64_t v21 = SHIDWORD(v32) * (uint64_t)v20;
      if (v6[992] == 35980) {
        *v17 += v21;
      }
      else {
        v17[v18] = v21;
      }
      ++v18;
    }
    while (v19 != v18);
  }
  unsigned int v22 = v6[931];
  if (v22) {
    unint64_t v23 = v5[2253] / (unint64_t)(*v17 * v10);
  }
  else {
    LODWORD(v23) = 0;
  }
  double v24 = v31;
  if (v6[992] == 35981)
  {
    for (uint64_t i = 0; i != 3; ++i)
    {
      if (((v22 >> (i + 1)) & 1) != 0
        && v23 >= (v5[i + 2254] / (unint64_t)(v17[i + 1] * v10)))
      {
        LODWORD(v23) = v5[i + 2254] / (unint64_t)(v17[i + 1] * v10);
      }
    }
  }
  *(_DWORD *)(v5[3304] + 176) = 0;
  *(_DWORD *)(v5[3304] + 180) = v23;
  if (*((unsigned char *)v24 + 3829))
  {
    for (uint64_t j = 0; j != 5; ++j)
    {
      if ((v6[931] >> j))
      {
        uint64_t v27 = *(void *)(v5[3304] + 8 * j + 128);
        if (*(unsigned char *)(v27 + 165))
        {
          if (!*(void *)(v27 + 192)) {
            gfxWaitBufferOnDevices();
          }
        }
      }
    }
    return (void *)(*(uint64_t (**)(void, void))(v5[3687] + 168))(v5[3683], 0);
  }
  else
  {
    uint64_t result = gleResetTransformFeedbackBufferCachePointers(v5);
    uint64_t v28 = v5[3102];
    for (uint64_t k = 16; k != 240; k += 56)
      *(_DWORD *)(v28 + k) = 0;
  }
  return result;
}

void glEndTransformFeedback_Exec(uint64_t a1)
{
  uint64_t v1 = a1 + 28652;
  uint64_t v2 = *(void *)(a1 + 26432);
  if (*(__int16 *)(v2 + 42) == -1)
  {
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
  else
  {
    if (*(unsigned char *)(v2 + 41)) {
      glResumeTransformFeedback_GL3Exec((void *)a1);
    }
    if (*(unsigned char *)(v1 + 3829)) {
      *(_WORD *)(a1 + 17986) = -1;
    }
    *(_WORD *)(*(void *)(a1 + 26432) + 42) = -1;
    *(unsigned char *)(*(void *)(a1 + 26432) + 40) = 1;
    gleUpdateInvalidPrimitives(a1);
    *(_DWORD *)uint64_t v1 = 0;
    *(_DWORD *)(a1 + 1548) |= 0x8000u;
    float v4 = *(unsigned int **)(a1 + 24768);
    if (!v4)
    {
      uint64_t v5 = *(void *)(a1 + 24776);
      float v4 = *(unsigned int **)(v5 + 64);
      if (!v4)
      {
        uint64_t v6 = v5 + 40;
        uint64_t v7 = 2;
        do
          float v4 = *(unsigned int **)(v6 + 8 * v7--);
        while (!v4);
      }
    }
    int v8 = v4[5] - 1;
    v4[5] = v8;
    if (v8 == 1) {
      gleUnbindDeleteHashNameAndObject(a1, (void (**)(void, uint64_t))(*(void *)(a1 + 19296) + 168), (void (*)(uint64_t, uint64_t))gleUnbindProgramObject, v4[4]);
    }
    *(void *)(*(void *)(a1 + 26432) + 184) = 0;
    --v4[993];
    if (*(unsigned char *)(v1 + 3829))
    {
      for (uint64_t i = 0; i != 5; ++i)
      {
        if ((v4[931] >> i))
        {
          uint64_t v10 = *(void *)(*(void *)(a1 + 26432) + 8 * i + 128);
          uint64_t v11 = *(void *)(a1 + 29024);
          *(unsigned char *)(v10 + 167) = 0;
          *(void *)(v10 + 192) = v11;
          uint64_t v12 = *(void *)(a1 + 26384);
          if (v12) {
            *(unsigned char *)(v12 + 1216) = 0;
          }
        }
      }
      (*(void (**)(void, void))(*(void *)(a1 + 29496) + 168))(*(void *)(a1 + 29464), 0);
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = *(void *)(a1 + 24816);
      do
      {
        int v15 = (_DWORD *)(v14 + v13);
        *int v15 = *(_DWORD *)(v14 + v13 + 16);
        v15[4] = 0;
        v13 += 56;
      }
      while (v13 != 224);
      for (uint64_t j = 0; j != 5; ++j)
      {
        if ((v4[931] >> j))
        {
          uint64_t v17 = *(void *)(*(void *)(a1 + 26432) + 8 * j + 128);
          *(unsigned char *)(v17 + 167) = 1;
          uint64_t v18 = *(unsigned __int8 *)(v1 + 3844);
          if (*(unsigned char *)(v1 + 3844))
          {
            uint64_t v19 = (_DWORD *)(v17 + 304);
            do
            {
              *v19 |= 4u;
              v19 += 2;
              --v18;
            }
            while (v18);
          }
          gleDirtyBufferObjectCurrentBindPoints(a1, v17 + 40);
        }
      }
    }
    uint64_t v20 = *(void *)(a1 + 26432);
    int v21 = *(_DWORD *)(v20 + 20) - 1;
    *(_DWORD *)(v20 + 20) = v21;
    if (!v21)
    {
      gleBindTransformFeedback(a1, *(void *)(a1 + 26440));
      unsigned int v22 = *(void **)(a1 + 26432);
      gleFreeTransformFeedbackObject(a1, v22);
    }
  }
}

void *glResumeTransformFeedback_GL3Exec(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = (char *)result + 28652;
  uint64_t v3 = result[3096];
  if (!v3)
  {
    uint64_t v7 = result[3097];
    if (!v7) {
      goto LABEL_15;
    }
    uint64_t v8 = v7 + 40;
    unsigned int v9 = 3;
    while (1)
    {
      uint64_t v3 = *(void *)(v8 + 8 * v9);
      if (v3) {
        break;
      }
      if (--v9 == -1) {
        goto LABEL_15;
      }
    }
  }
  uint64_t v4 = result[3304];
  if (*(__int16 *)(v4 + 42) != -1 && *(unsigned char *)(v4 + 41) && *(void *)(v4 + 184) == v3)
  {
    if (*((unsigned char *)result + 32481))
    {
      *((unsigned char *)result + 17985) = 0;
      *((_WORD *)result + 8993) = *(_WORD *)(v4 + 42);
    }
    *(unsigned char *)(v4 + 41) = 0;
    gleUpdateInvalidPrimitives((uint64_t)result);
    *(_DWORD *)uint64_t v2 = 0;
    *((_DWORD *)v1 + 387) |= 0x8000u;
    if (v2[3829])
    {
      uint64_t v5 = *(uint64_t (**)(uint64_t, void))(v1[3687] + 168);
      uint64_t v6 = v1[3683];
      return (void *)v5(v6, 0);
    }
    else
    {
      return gleResetTransformFeedbackBufferCachePointers(v1);
    }
  }
LABEL_15:
  if (!*((_WORD *)result + 14916)) {
    *((_WORD *)result + 14916) = 1282;
  }
  return result;
}

void glTransformFeedbackVaryingsEXT_Exec(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, int a5)
{
  if ((a5 - 35982) <= 0xFFFFFFFD)
  {
    int v21 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v22 = 1280;
    goto LABEL_32;
  }
  if ((a3 & 0x80000000) != 0 || (int v7 = a5, a5 == 35981) && *(_DWORD *)(*(void *)(a1 + 29032) + 480) < a3)
  {
LABEL_30:
    int v21 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v22 = 1281;
    goto LABEL_32;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v10 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
  if (!v10)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    goto LABEL_30;
  }
  uint64_t v11 = v10;
  if (*((_DWORD *)v10 + 6) != 8) {
    goto LABEL_25;
  }
  if (a3)
  {
    int v23 = v7;
    uint64_t v12 = 0;
    int v13 = 0;
    int v14 = 0;
    do
    {
      uint64_t v15 = 0;
      uint64_t v16 = *(const char **)(a4 + 8 * v12);
      do
      {
        int v17 = strcmp(v16, glTransformFeedbackVaryingsEXT_Exec_special_varyings[v15]);
        if (!v17) {
          ++v14;
        }
        if (!(v17 | v15)) {
          ++v13;
        }
        ++v15;
      }
      while (v15 != 5);
      ++v12;
    }
    while (v12 != a3);
    BOOL v18 = v14 != 0;
    BOOL v19 = v13 > 3;
    int v7 = v23;
  }
  else
  {
    BOOL v18 = 0;
    BOOL v19 = 0;
  }
  if (v7 != 35981) {
    BOOL v18 = 0;
  }
  if (v18 || v19)
  {
LABEL_25:
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    int v21 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v22 = 1282;
LABEL_32:
    *int v21 = v22;
    return;
  }
  ShTransformFeedbackVaryings();
  *((_DWORD *)v11 + 990) = v7;
  *((_DWORD *)v11 + 989) = a3;
  uint64_t v20 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);

  os_unfair_lock_unlock(v20);
}

void glGetTransformFeedbackVaryingEXT_Exec(uint64_t a1, unsigned int a2, unsigned int a3, int a4)
{
  if ((a4 & 0x80000000) == 0)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    int v7 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
    if (v7)
    {
      if (*((_DWORD *)v7 + 6) != 8)
      {
        os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
        goto LABEL_12;
      }
      if (*((unsigned char *)v7 + 3976) == 1 && *((_DWORD *)v7 + 991) > a3)
      {
        int TransformFeedbackVarying = ShGetTransformFeedbackVarying();
        os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
        if (TransformFeedbackVarying) {
          return;
        }
LABEL_12:
        unsigned int v9 = (__int16 *)(a1 + 29832);
        if (!*(_WORD *)(a1 + 29832))
        {
          __int16 v10 = 1282;
          goto LABEL_14;
        }
        return;
      }
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  unsigned int v9 = (__int16 *)(a1 + 29832);
  if (!*(_WORD *)(a1 + 29832))
  {
    __int16 v10 = 1281;
LABEL_14:
    *unsigned int v9 = v10;
  }
}

void glGenTransformFeedbacks_GL3Exec(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  if ((a2 & 0x80000000) != 0)
  {
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1281;
    }
  }
  else
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    int v6 = gleGenHashNames(a1 + 26400, a2);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (v6 && a2)
    {
      uint64_t v7 = a2;
      do
      {
        *a3++ = v6++;
        --v7;
      }
      while (v7);
    }
  }
}

void glDeleteTransformFeedbacks_GL3Exec(uint64_t a1, int a2, unsigned int *a3)
{
  if (a2 < 0)
  {
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1281;
    }
  }
  else
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (a2)
    {
      uint64_t v6 = a2;
      uint64_t v7 = a2;
      uint64_t v8 = a3;
      while (1)
      {
        unsigned int v10 = *v8++;
        unsigned int v9 = v10;
        if (v10)
        {
          uint64_t v11 = gleLookupHashObject(a1 + 26400, v9);
          if (v11)
          {
            if (*((__int16 *)v11 + 21) != -1) {
              break;
            }
          }
        }
        if (!--v7)
        {
          if (a2 >= 1)
          {
            do
            {
              unsigned int v13 = *a3++;
              unsigned int v12 = v13;
              if (v13)
              {
                int v14 = gleDeleteHashNameAndObject_NoDecrement(a1 + 26400, v12);
                if (v14)
                {
                  uint64_t v15 = v14;
                  if (*((_DWORD *)v14 + 4) == *(_DWORD *)(*(void *)(a1 + 26432) + 16)) {
                    gleBindTransformFeedback(a1, *(void *)(a1 + 26440));
                  }
                  int v16 = *((_DWORD *)v15 + 5) - 1;
                  *((_DWORD *)v15 + 5) = v16;
                  if (!v16) {
                    gleFreeTransformFeedbackObject(a1, v15);
                  }
                }
              }
              --v6;
            }
            while (v6);
          }
          goto LABEL_16;
        }
      }
      if (!*(_WORD *)(a1 + 29832)) {
        *(_WORD *)(a1 + 29832) = 1282;
      }
    }
LABEL_16:
    int v17 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
    os_unfair_lock_unlock(v17);
  }
}

void glBindTransformFeedback_GL3Exec(uint64_t a1, int a2, unsigned int a3)
{
  if (a2 != 36386)
  {
    uint64_t v7 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v8 = 1281;
LABEL_16:
    *uint64_t v7 = v8;
    return;
  }
  uint64_t v5 = *(void *)(a1 + 26432);
  if (*(__int16 *)(v5 + 42) != -1 && !*(unsigned char *)(v5 + 41))
  {
LABEL_14:
    uint64_t v7 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v8 = 1282;
    goto LABEL_16;
  }
  if (!a3)
  {
    TransformFeedbackObject = *(void **)(a1 + 26440);
    goto LABEL_9;
  }
  TransformFeedbackObject = gleLookupHashObject(a1 + 26400, a3);
  if (!TransformFeedbackObject)
  {
    if (gleIsHashName(a1 + 26400, a3))
    {
      TransformFeedbackObject = gleCreateTransformFeedbackObject(a1, a3);
      gleAddHashNameAndObject(a1, a1 + 26400, (uint64_t)TransformFeedbackObject);
      goto LABEL_9;
    }
    goto LABEL_14;
  }
LABEL_9:

  gleBindTransformFeedback(a1, (uint64_t)TransformFeedbackObject);
}

void *glPauseTransformFeedback_GL3Exec(void *result)
{
  uint64_t v1 = (char *)result + 28652;
  uint64_t v2 = result[3304];
  if (*(__int16 *)(v2 + 42) == -1 || *(unsigned char *)(v2 + 41))
  {
    if (!*((_WORD *)result + 14916)) {
      *((_WORD *)result + 14916) = 1282;
    }
  }
  else
  {
    uint64_t v3 = result;
    if (*((unsigned char *)result + 32481))
    {
      *((unsigned char *)result + 17985) = 1;
      *((_WORD *)result + 8993) = -1;
    }
    *(unsigned char *)(v2 + 41) = 1;
    gleUpdateInvalidPrimitives((uint64_t)result);
    *(_DWORD *)uint64_t v1 = 0;
    *((_DWORD *)v3 + 387) |= 0x8000u;
    if (v1[3829])
    {
      uint64_t v4 = *(uint64_t (**)(uint64_t, void))(v3[3687] + 168);
      uint64_t v5 = v3[3683];
      return (void *)v4(v5, 0);
    }
    else
    {
      return gleResetTransformFeedbackBufferCachePointers(v3);
    }
  }
  return result;
}

uint64_t *glIsTransformFeedback_GL3Exec(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return (uint64_t *)1;
  }
  uint64_t result = gleLookupHashObject(a1 + 26400, a2);
  if (result) {
    return (uint64_t *)(*((_DWORD *)result + 6) == 14);
  }
  return result;
}

void *glBeginTransformFeedback_PackThread(uint64_t a1, int a2)
{
  uint64_t result = gleAddCommand(a1, (uint64_t)glBeginTransformFeedback_UnpackThread, 4);
  *(_DWORD *)uint64_t result = a2;
  return result;
}

uint64_t glBeginTransformFeedback_UnpackThread(void *a1, unsigned int *a2)
{
  return 4;
}

void *glEndTransformFeedback_PackThread(uint64_t a1)
{
  return gleAddCommand(a1, (uint64_t)glEndTransformFeedback_UnpackThread, 0);
}

uint64_t glEndTransformFeedback_UnpackThread(uint64_t a1)
{
  return 0;
}

void glTransformFeedbackVaryingsEXT_ExecThread(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, int a5)
{
  (*(void (**)(void))(a1 + 27752))();

  glTransformFeedbackVaryingsEXT_Exec(a1, a2, a3, a4, a5);
}

void glGetTransformFeedbackVaryingEXT_ExecThread(uint64_t a1, unsigned int a2, unsigned int a3, int a4)
{
  (*(void (**)(void))(a1 + 27752))();

  glGetTransformFeedbackVaryingEXT_Exec(a1, a2, a3, a4);
}

void glGenTransformFeedbacks_ExecThread(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  (*(void (**)(void))(a1 + 27752))();

  glGenTransformFeedbacks_GL3Exec(a1, a2, a3);
}

void glDeleteTransformFeedbacks_ExecThread(uint64_t a1, int a2, unsigned int *a3)
{
  (*(void (**)(void))(a1 + 27752))();

  glDeleteTransformFeedbacks_GL3Exec(a1, a2, a3);
}

_DWORD *glBindTransformFeedback_PackThread(uint64_t a1, int a2, int a3)
{
  uint64_t result = gleAddCommand(a1, (uint64_t)glBindTransformFeedback_UnpackThread, 8);
  *uint64_t result = a2;
  result[1] = a3;
  return result;
}

uint64_t glBindTransformFeedback_UnpackThread(uint64_t a1, uint64_t a2)
{
  return 8;
}

void *glPauseTransformFeedback_PackThread(uint64_t a1)
{
  return gleAddCommand(a1, (uint64_t)glPauseTransformFeedback_UnpackThread, 0);
}

uint64_t glPauseTransformFeedback_UnpackThread(void *a1)
{
  return 0;
}

void *glResumeTransformFeedback_PackThread(uint64_t a1)
{
  return gleAddCommand(a1, (uint64_t)glResumeTransformFeedback_UnpackThread, 0);
}

uint64_t glResumeTransformFeedback_UnpackThread(void *a1)
{
  return 0;
}

uint64_t *glIsTransformFeedback_ExecThread(uint64_t a1, unsigned int a2)
{
  (*(void (**)(void))(a1 + 27752))();
  if (!a2) {
    return (uint64_t *)1;
  }
  uint64_t result = gleLookupHashObject(a1 + 26400, a2);
  if (result) {
    return (uint64_t *)(*((_DWORD *)result + 6) == 14);
  }
  return result;
}

uint64_t glTranslate_ListExec(uint64_t a1, _DWORD *a2, double a3, double a4, double a5)
{
  LODWORD(a3) = *a2;
  LODWORD(a4) = a2[1];
  LODWORD(a5) = a2[2];
  glTranslate_Exec(a1, a3, a4, a5);
  return 12;
}

uint64_t glTranslatex_Exec(uint64_t a1, int a2, int a3, int a4, double a5, double a6, double a7)
{
  *(float *)&a5 = (float)a2 * 0.000015259;
  *(float *)&a6 = (float)a3 * 0.000015259;
  *(float *)&a7 = (float)a4 * 0.000015259;
  return glTranslate_Exec(a1, a5, a6, a7);
}

float32x2_t glTranslatex_PackThread(uint64_t a1, unsigned int a2, unsigned int a3, int a4)
{
  float32x2_t v4 = vcvt_f32_s32((int32x2_t)__PAIR64__(a3, a2));
  float32_t v5 = (float)a4 * 0.000015259;
  uint64_t v6 = (float32x2_t *)gleAddCommand(a1, (uint64_t)glTranslate_ListExec, 12);
  float32x2_t result = vmul_f32(v4, (float32x2_t)vdup_n_s32(0x37800000u));
  float32x2_t *v6 = result;
  v6[1].f32[0] = v5;
  return result;
}

void glUniform1f_Exec(uint64_t a1, int a2, float a3)
{
  float v7 = a3;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v5 = *(void *)(a1 + 24768);
  if (v5 || (v6 = *(void *)(a1 + 24776)) != 0 && (uint64_t v5 = *(void *)(v6 + 80)) != 0)
  {
    setProgramUniformInner(a1, v5 + 40, a2, 1, 5126, 0, &v7);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

void *glUniform1f_Comp(uint64_t a1, int a2, float a3)
{
  float32x2_t result = gleAddCommand(a1, (uint64_t)glUniform1f_ListExec, 12);
  *(_DWORD *)float32x2_t result = a2;
  *((_DWORD *)result + 1) = 1;
  *((float *)result + 2) = a3;
  return result;
}

uint64_t glUniform1f_ListExec(uint64_t a1, int *a2)
{
  uint64_t v3 = a2 + 2;
  int v4 = *a2;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v5 = *(void *)(a1 + 24768);
  if (v5 || (v6 = *(void *)(a1 + 24776)) != 0 && (uint64_t v5 = *(void *)(v6 + 80)) != 0)
  {
    setProgramUniformInner(a1, v5 + 40, v4, 1, 5126, 0, v3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    return 12;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  if (*(_WORD *)(a1 + 29832)) {
    return 12;
  }
  *(_WORD *)(a1 + 29832) = 1282;
  return 12;
}

void glUniform2f_Exec(uint64_t a1, int a2, float a3, float a4)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  *(float *)__int16 v8 = a3;
  *(float *)&v8[1] = a4;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v6 = *(void *)(a1 + 24768);
  if (v6 || (uint64_t v7 = *(void *)(a1 + 24776)) != 0 && (v6 = *(void *)(v7 + 80)) != 0)
  {
    setProgramUniformInner(a1, v6 + 40, a2, 1, 35664, 0, v8);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

void *glUniform2f_Comp(uint64_t a1, int a2, float a3, float a4)
{
  float32x2_t result = gleAddCommand(a1, (uint64_t)glUniform2f_ListExec, 16);
  *(_DWORD *)float32x2_t result = a2;
  *((_DWORD *)result + 1) = 1;
  *((float *)result + 2) = a3;
  *((float *)result + 3) = a4;
  return result;
}

uint64_t glUniform2f_ListExec(uint64_t a1, int *a2)
{
  uint64_t v3 = a2 + 2;
  int v4 = *a2;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v5 = *(void *)(a1 + 24768);
  if (v5 || (v6 = *(void *)(a1 + 24776)) != 0 && (uint64_t v5 = *(void *)(v6 + 80)) != 0)
  {
    setProgramUniformInner(a1, v5 + 40, v4, 1, 35664, 0, v3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    return 16;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  if (*(_WORD *)(a1 + 29832)) {
    return 16;
  }
  *(_WORD *)(a1 + 29832) = 1282;
  return 16;
}

void glUniform3f_Exec(uint64_t a1, int a2, float a3, float a4, float a5)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  *(float *)uint64_t v9 = a3;
  *(float *)&v9[1] = a4;
  *(float *)&v9[2] = a5;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v7 = *(void *)(a1 + 24768);
  if (v7 || (v8 = *(void *)(a1 + 24776)) != 0 && (uint64_t v7 = *(void *)(v8 + 80)) != 0)
  {
    setProgramUniformInner(a1, v7 + 40, a2, 1, 35665, 0, v9);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

void *glUniform3f_Comp(uint64_t a1, int a2, float a3, float a4, float a5)
{
  float32x2_t result = gleAddCommand(a1, (uint64_t)glUniform3f_ListExec, 20);
  *(_DWORD *)float32x2_t result = a2;
  *((_DWORD *)result + 1) = 1;
  *((float *)result + 2) = a3;
  *((float *)result + 3) = a4;
  *((float *)result + 4) = a5;
  return result;
}

uint64_t glUniform3f_ListExec(uint64_t a1, int *a2)
{
  uint64_t v3 = a2 + 2;
  int v4 = *a2;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v5 = *(void *)(a1 + 24768);
  if (v5 || (v6 = *(void *)(a1 + 24776)) != 0 && (uint64_t v5 = *(void *)(v6 + 80)) != 0)
  {
    setProgramUniformInner(a1, v5 + 40, v4, 1, 35665, 0, v3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    return 20;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  if (*(_WORD *)(a1 + 29832)) {
    return 20;
  }
  *(_WORD *)(a1 + 29832) = 1282;
  return 20;
}

void glUniform4f_Exec(uint64_t a1, int a2, float a3, float a4, float a5, float a6)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  *(float *)uint64_t v10 = a3;
  *(float *)&v10[1] = a4;
  *(float *)&v10[2] = a5;
  *(float *)&v10[3] = a6;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v8 = *(void *)(a1 + 24768);
  if (v8 || (v9 = *(void *)(a1 + 24776)) != 0 && (uint64_t v8 = *(void *)(v9 + 80)) != 0)
  {
    setProgramUniformInner(a1, v8 + 40, a2, 1, 35666, 0, v10);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

void *glUniform4f_Comp(uint64_t a1, int a2, float a3, float a4, float a5, float a6)
{
  float32x2_t result = gleAddCommand(a1, (uint64_t)glUniform4f_ListExec, 24);
  *(_DWORD *)float32x2_t result = a2;
  *((_DWORD *)result + 1) = 1;
  *((float *)result + 2) = a3;
  *((float *)result + 3) = a4;
  *((float *)result + 4) = a5;
  *((float *)result + 5) = a6;
  return result;
}

uint64_t glUniform4f_ListExec(uint64_t a1, int *a2)
{
  uint64_t v3 = a2 + 2;
  int v4 = *a2;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v5 = *(void *)(a1 + 24768);
  if (v5 || (v6 = *(void *)(a1 + 24776)) != 0 && (uint64_t v5 = *(void *)(v6 + 80)) != 0)
  {
    setProgramUniformInner(a1, v5 + 40, v4, 1, 35666, 0, v3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    return 24;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  if (*(_WORD *)(a1 + 29832)) {
    return 24;
  }
  *(_WORD *)(a1 + 29832) = 1282;
  return 24;
}

void glUniform1i_Exec(uint64_t a1, int a2, int a3)
{
  int v7 = a3;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v5 = *(void *)(a1 + 24768);
  if (v5 || (v6 = *(void *)(a1 + 24776)) != 0 && (uint64_t v5 = *(void *)(v6 + 80)) != 0)
  {
    setProgramUniformInner(a1, v5 + 40, a2, 1, 5124, 0, &v7);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

_DWORD *glUniform1i_Comp(uint64_t a1, int a2, int a3)
{
  float32x2_t result = gleAddCommand(a1, (uint64_t)glUniform1i_ListExec, 12);
  *float32x2_t result = a2;
  result[1] = 1;
  result[2] = a3;
  return result;
}

uint64_t glUniform1i_ListExec(uint64_t a1, int *a2)
{
  uint64_t v3 = a2 + 2;
  int v4 = *a2;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v5 = *(void *)(a1 + 24768);
  if (v5 || (v6 = *(void *)(a1 + 24776)) != 0 && (uint64_t v5 = *(void *)(v6 + 80)) != 0)
  {
    setProgramUniformInner(a1, v5 + 40, v4, 1, 5124, 0, v3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    return 12;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  if (*(_WORD *)(a1 + 29832)) {
    return 12;
  }
  *(_WORD *)(a1 + 29832) = 1282;
  return 12;
}

void glUniform2i_Exec(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v8[0] = a3;
  v8[1] = a4;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v6 = *(void *)(a1 + 24768);
  if (v6 || (uint64_t v7 = *(void *)(a1 + 24776)) != 0 && (v6 = *(void *)(v7 + 80)) != 0)
  {
    setProgramUniformInner(a1, v6 + 40, a2, 1, 35667, 0, v8);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

void *glUniform2i_Comp(uint64_t a1, int a2, unsigned int a3, uint64_t a4)
{
  float32x2_t result = gleAddCommand(a1, (uint64_t)glUniform2i_ListExec, 16);
  *(_DWORD *)float32x2_t result = a2;
  *((_DWORD *)result + 1) = 1;
  result[1] = a3 | (unint64_t)(a4 << 32);
  return result;
}

uint64_t glUniform2i_ListExec(uint64_t a1, int *a2)
{
  uint64_t v3 = a2 + 2;
  int v4 = *a2;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v5 = *(void *)(a1 + 24768);
  if (v5 || (v6 = *(void *)(a1 + 24776)) != 0 && (uint64_t v5 = *(void *)(v6 + 80)) != 0)
  {
    setProgramUniformInner(a1, v5 + 40, v4, 1, 35667, 0, v3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    return 16;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  if (*(_WORD *)(a1 + 29832)) {
    return 16;
  }
  *(_WORD *)(a1 + 29832) = 1282;
  return 16;
}

void glUniform3i_Exec(uint64_t a1, int a2, int a3, int a4, int a5)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  v9[0] = a3;
  v9[1] = a4;
  v9[2] = a5;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v7 = *(void *)(a1 + 24768);
  if (v7 || (v8 = *(void *)(a1 + 24776)) != 0 && (uint64_t v7 = *(void *)(v8 + 80)) != 0)
  {
    setProgramUniformInner(a1, v7 + 40, a2, 1, 35668, 0, v9);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

_DWORD *glUniform3i_Comp(uint64_t a1, int a2, int a3, int a4, int a5)
{
  float32x2_t result = gleAddCommand(a1, (uint64_t)glUniform3i_ListExec, 20);
  *float32x2_t result = a2;
  result[1] = 1;
  result[2] = a3;
  result[3] = a4;
  result[4] = a5;
  return result;
}

uint64_t glUniform3i_ListExec(uint64_t a1, int *a2)
{
  uint64_t v3 = a2 + 2;
  int v4 = *a2;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v5 = *(void *)(a1 + 24768);
  if (v5 || (v6 = *(void *)(a1 + 24776)) != 0 && (uint64_t v5 = *(void *)(v6 + 80)) != 0)
  {
    setProgramUniformInner(a1, v5 + 40, v4, 1, 35668, 0, v3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    return 20;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  if (*(_WORD *)(a1 + 29832)) {
    return 20;
  }
  *(_WORD *)(a1 + 29832) = 1282;
  return 20;
}

void glUniform4i_Exec(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  v10[0] = a3;
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v8 = *(void *)(a1 + 24768);
  if (v8 || (v9 = *(void *)(a1 + 24776)) != 0 && (uint64_t v8 = *(void *)(v9 + 80)) != 0)
  {
    setProgramUniformInner(a1, v8 + 40, a2, 1, 35669, 0, v10);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

_DWORD *glUniform4i_Comp(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  float32x2_t result = gleAddCommand(a1, (uint64_t)glUniform4i_ListExec, 24);
  *float32x2_t result = a2;
  result[1] = 1;
  result[2] = a3;
  result[3] = a4;
  result[4] = a5;
  result[5] = a6;
  return result;
}

uint64_t glUniform4i_ListExec(uint64_t a1, int *a2)
{
  uint64_t v3 = a2 + 2;
  int v4 = *a2;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v5 = *(void *)(a1 + 24768);
  if (v5 || (v6 = *(void *)(a1 + 24776)) != 0 && (uint64_t v5 = *(void *)(v6 + 80)) != 0)
  {
    setProgramUniformInner(a1, v5 + 40, v4, 1, 35669, 0, v3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    return 24;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  if (*(_WORD *)(a1 + 29832)) {
    return 24;
  }
  *(_WORD *)(a1 + 29832) = 1282;
  return 24;
}

void glUniform1ui_Exec(uint64_t a1, int a2, int a3)
{
  int v7 = a3;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v5 = *(void *)(a1 + 24768);
  if (v5 || (v6 = *(void *)(a1 + 24776)) != 0 && (uint64_t v5 = *(void *)(v6 + 80)) != 0)
  {
    setProgramUniformInner(a1, v5 + 40, a2, 1, 5125, 0, &v7);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

_DWORD *glUniform1ui_Comp(uint64_t a1, int a2, int a3)
{
  float32x2_t result = gleAddCommand(a1, (uint64_t)glUniform1ui_ListExec, 12);
  *float32x2_t result = a2;
  result[1] = 1;
  result[2] = a3;
  return result;
}

uint64_t glUniform1ui_ListExec(uint64_t a1, int *a2)
{
  uint64_t v3 = a2 + 2;
  int v4 = *a2;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v5 = *(void *)(a1 + 24768);
  if (v5 || (v6 = *(void *)(a1 + 24776)) != 0 && (uint64_t v5 = *(void *)(v6 + 80)) != 0)
  {
    setProgramUniformInner(a1, v5 + 40, v4, 1, 5125, 0, v3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    return 12;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  if (*(_WORD *)(a1 + 29832)) {
    return 12;
  }
  *(_WORD *)(a1 + 29832) = 1282;
  return 12;
}

void glUniform2ui_Exec(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v8[0] = a3;
  v8[1] = a4;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v6 = *(void *)(a1 + 24768);
  if (v6 || (uint64_t v7 = *(void *)(a1 + 24776)) != 0 && (v6 = *(void *)(v7 + 80)) != 0)
  {
    setProgramUniformInner(a1, v6 + 40, a2, 1, 36294, 0, v8);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

void *glUniform2ui_Comp(uint64_t a1, int a2, unsigned int a3, uint64_t a4)
{
  float32x2_t result = gleAddCommand(a1, (uint64_t)glUniform2ui_ListExec, 16);
  *(_DWORD *)float32x2_t result = a2;
  *((_DWORD *)result + 1) = 1;
  result[1] = a3 | (unint64_t)(a4 << 32);
  return result;
}

uint64_t glUniform2ui_ListExec(uint64_t a1, int *a2)
{
  uint64_t v3 = a2 + 2;
  int v4 = *a2;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v5 = *(void *)(a1 + 24768);
  if (v5 || (v6 = *(void *)(a1 + 24776)) != 0 && (uint64_t v5 = *(void *)(v6 + 80)) != 0)
  {
    setProgramUniformInner(a1, v5 + 40, v4, 1, 36294, 0, v3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    return 16;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  if (*(_WORD *)(a1 + 29832)) {
    return 16;
  }
  *(_WORD *)(a1 + 29832) = 1282;
  return 16;
}

void glUniform3ui_Exec(uint64_t a1, int a2, int a3, int a4, int a5)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  v9[0] = a3;
  v9[1] = a4;
  v9[2] = a5;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v7 = *(void *)(a1 + 24768);
  if (v7 || (v8 = *(void *)(a1 + 24776)) != 0 && (uint64_t v7 = *(void *)(v8 + 80)) != 0)
  {
    setProgramUniformInner(a1, v7 + 40, a2, 1, 36295, 0, v9);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

_DWORD *glUniform3ui_Comp(uint64_t a1, int a2, int a3, int a4, int a5)
{
  float32x2_t result = gleAddCommand(a1, (uint64_t)glUniform3ui_ListExec, 20);
  *float32x2_t result = a2;
  result[1] = 1;
  result[2] = a3;
  result[3] = a4;
  result[4] = a5;
  return result;
}

uint64_t glUniform3ui_ListExec(uint64_t a1, int *a2)
{
  uint64_t v3 = a2 + 2;
  int v4 = *a2;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v5 = *(void *)(a1 + 24768);
  if (v5 || (v6 = *(void *)(a1 + 24776)) != 0 && (uint64_t v5 = *(void *)(v6 + 80)) != 0)
  {
    setProgramUniformInner(a1, v5 + 40, v4, 1, 36295, 0, v3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    return 20;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  if (*(_WORD *)(a1 + 29832)) {
    return 20;
  }
  *(_WORD *)(a1 + 29832) = 1282;
  return 20;
}

void glUniform4ui_Exec(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  v10[0] = a3;
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v8 = *(void *)(a1 + 24768);
  if (v8 || (v9 = *(void *)(a1 + 24776)) != 0 && (uint64_t v8 = *(void *)(v9 + 80)) != 0)
  {
    setProgramUniformInner(a1, v8 + 40, a2, 1, 36296, 0, v10);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

_DWORD *glUniform4ui_Comp(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  float32x2_t result = gleAddCommand(a1, (uint64_t)glUniform4ui_ListExec, 24);
  *float32x2_t result = a2;
  result[1] = 1;
  result[2] = a3;
  result[3] = a4;
  result[4] = a5;
  result[5] = a6;
  return result;
}

uint64_t glUniform4ui_ListExec(uint64_t a1, int *a2)
{
  uint64_t v3 = a2 + 2;
  int v4 = *a2;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v5 = *(void *)(a1 + 24768);
  if (v5 || (v6 = *(void *)(a1 + 24776)) != 0 && (uint64_t v5 = *(void *)(v6 + 80)) != 0)
  {
    setProgramUniformInner(a1, v5 + 40, v4, 1, 36296, 0, v3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    return 24;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  if (*(_WORD *)(a1 + 29832)) {
    return 24;
  }
  *(_WORD *)(a1 + 29832) = 1282;
  return 24;
}

void glUniform1fv_Exec(uint64_t a1, int a2, int a3, void *a4)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v8 = *(void *)(a1 + 24768);
  if (v8 || (v9 = *(void *)(a1 + 24776)) != 0 && (uint64_t v8 = *(void *)(v9 + 80)) != 0)
  {
    setProgramUniformInner(a1, v8 + 40, a2, a3, 5126, 0, a4);
    uint64_t v10 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
    os_unfair_lock_unlock(v10);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

void *glUniform1fv_Comp(uint64_t a1, int a2, int a3, const void *a4)
{
  if (a3 < 0)
  {
    return gleSetErrorInList(a1, 1281);
  }
  else
  {
    size_t v8 = (4 * a3);
    uint64_t v9 = gleAddCommand(a1, (uint64_t)glUniform1fv_ListExec, (v8 + 8));
    *uint64_t v9 = a2;
    v9[1] = a3;
    uint64_t v10 = v9 + 2;
    return memcpy(v10, a4, v8);
  }
}

uint64_t glUniform1fv_ListExec(uint64_t a1, int *a2)
{
  int v4 = *a2;
  int v5 = a2[1];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v6 = *(void *)(a1 + 24768);
  if (v6 || (uint64_t v7 = *(void *)(a1 + 24776)) != 0 && (v6 = *(void *)(v7 + 80)) != 0)
  {
    setProgramUniformInner(a1, v6 + 40, v4, v5, 5126, 0, a2 + 2);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
  return (4 * a2[1] + 8);
}

void glUniform2fv_Exec(uint64_t a1, int a2, int a3, void *a4)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v8 = *(void *)(a1 + 24768);
  if (v8 || (v9 = *(void *)(a1 + 24776)) != 0 && (uint64_t v8 = *(void *)(v9 + 80)) != 0)
  {
    setProgramUniformInner(a1, v8 + 40, a2, a3, 35664, 0, a4);
    uint64_t v10 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
    os_unfair_lock_unlock(v10);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

void *glUniform2fv_Comp(uint64_t a1, int a2, int a3, const void *a4)
{
  if (a3 < 0)
  {
    return gleSetErrorInList(a1, 1281);
  }
  else
  {
    size_t v8 = (8 * a3);
    uint64_t v9 = gleAddCommand(a1, (uint64_t)glUniform2fv_ListExec, (v8 + 8));
    *uint64_t v9 = a2;
    v9[1] = a3;
    uint64_t v10 = v9 + 2;
    return memcpy(v10, a4, v8);
  }
}

uint64_t glUniform2fv_ListExec(uint64_t a1, int *a2)
{
  int v4 = *a2;
  int v5 = a2[1];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v6 = *(void *)(a1 + 24768);
  if (v6 || (uint64_t v7 = *(void *)(a1 + 24776)) != 0 && (v6 = *(void *)(v7 + 80)) != 0)
  {
    setProgramUniformInner(a1, v6 + 40, v4, v5, 35664, 0, a2 + 2);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
  return (8 * a2[1] + 8);
}

void glUniform3fv_Exec(uint64_t a1, int a2, int a3, void *a4)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v8 = *(void *)(a1 + 24768);
  if (v8 || (v9 = *(void *)(a1 + 24776)) != 0 && (uint64_t v8 = *(void *)(v9 + 80)) != 0)
  {
    setProgramUniformInner(a1, v8 + 40, a2, a3, 35665, 0, a4);
    uint64_t v10 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
    os_unfair_lock_unlock(v10);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

void *glUniform3fv_Comp(uint64_t a1, int a2, int a3, const void *a4)
{
  if (a3 < 0)
  {
    return gleSetErrorInList(a1, 1281);
  }
  else
  {
    size_t v8 = (12 * a3);
    uint64_t v9 = gleAddCommand(a1, (uint64_t)glUniform3fv_ListExec, (v8 + 8));
    *uint64_t v9 = a2;
    v9[1] = a3;
    uint64_t v10 = v9 + 2;
    return memcpy(v10, a4, v8);
  }
}

uint64_t glUniform3fv_ListExec(uint64_t a1, int *a2)
{
  int v4 = *a2;
  int v5 = a2[1];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v6 = *(void *)(a1 + 24768);
  if (v6 || (uint64_t v7 = *(void *)(a1 + 24776)) != 0 && (v6 = *(void *)(v7 + 80)) != 0)
  {
    setProgramUniformInner(a1, v6 + 40, v4, v5, 35665, 0, a2 + 2);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
  return (12 * a2[1] + 8);
}

void glUniform4fv_Exec(uint64_t a1, int a2, int a3, void *a4)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v8 = *(void *)(a1 + 24768);
  if (v8 || (v9 = *(void *)(a1 + 24776)) != 0 && (uint64_t v8 = *(void *)(v9 + 80)) != 0)
  {
    setProgramUniformInner(a1, v8 + 40, a2, a3, 35666, 0, a4);
    uint64_t v10 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
    os_unfair_lock_unlock(v10);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

void *glUniform4fv_Comp(uint64_t a1, int a2, int a3, const void *a4)
{
  if (a3 < 0)
  {
    return gleSetErrorInList(a1, 1281);
  }
  else
  {
    size_t v8 = (16 * a3);
    uint64_t v9 = gleAddCommand(a1, (uint64_t)glUniform4fv_ListExec, (16 * a3) | 8u);
    *uint64_t v9 = a2;
    v9[1] = a3;
    uint64_t v10 = v9 + 2;
    return memcpy(v10, a4, v8);
  }
}

uint64_t glUniform4fv_ListExec(uint64_t a1, int *a2)
{
  int v4 = *a2;
  int v5 = a2[1];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v6 = *(void *)(a1 + 24768);
  if (v6 || (uint64_t v7 = *(void *)(a1 + 24776)) != 0 && (v6 = *(void *)(v7 + 80)) != 0)
  {
    setProgramUniformInner(a1, v6 + 40, v4, v5, 35666, 0, a2 + 2);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
  return (16 * a2[1]) | 8u;
}

void glUniform1iv_Exec(uint64_t a1, int a2, int a3, void *a4)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v8 = *(void *)(a1 + 24768);
  if (v8 || (v9 = *(void *)(a1 + 24776)) != 0 && (uint64_t v8 = *(void *)(v9 + 80)) != 0)
  {
    setProgramUniformInner(a1, v8 + 40, a2, a3, 5124, 0, a4);
    uint64_t v10 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
    os_unfair_lock_unlock(v10);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

void *glUniform1iv_Comp(uint64_t a1, int a2, int a3, const void *a4)
{
  if (a3 < 0)
  {
    return gleSetErrorInList(a1, 1281);
  }
  else
  {
    size_t v8 = (4 * a3);
    uint64_t v9 = gleAddCommand(a1, (uint64_t)glUniform1iv_ListExec, (v8 + 8));
    *uint64_t v9 = a2;
    v9[1] = a3;
    uint64_t v10 = v9 + 2;
    return memcpy(v10, a4, v8);
  }
}

uint64_t glUniform1iv_ListExec(uint64_t a1, int *a2)
{
  int v4 = *a2;
  int v5 = a2[1];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v6 = *(void *)(a1 + 24768);
  if (v6 || (uint64_t v7 = *(void *)(a1 + 24776)) != 0 && (v6 = *(void *)(v7 + 80)) != 0)
  {
    setProgramUniformInner(a1, v6 + 40, v4, v5, 5124, 0, a2 + 2);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
  return (4 * a2[1] + 8);
}

void glUniform2iv_Exec(uint64_t a1, int a2, int a3, void *a4)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v8 = *(void *)(a1 + 24768);
  if (v8 || (v9 = *(void *)(a1 + 24776)) != 0 && (uint64_t v8 = *(void *)(v9 + 80)) != 0)
  {
    setProgramUniformInner(a1, v8 + 40, a2, a3, 35667, 0, a4);
    uint64_t v10 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
    os_unfair_lock_unlock(v10);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

void *glUniform2iv_Comp(uint64_t a1, int a2, int a3, const void *a4)
{
  if (a3 < 0)
  {
    return gleSetErrorInList(a1, 1281);
  }
  else
  {
    size_t v8 = (8 * a3);
    uint64_t v9 = gleAddCommand(a1, (uint64_t)glUniform2iv_ListExec, (v8 + 8));
    *uint64_t v9 = a2;
    v9[1] = a3;
    uint64_t v10 = v9 + 2;
    return memcpy(v10, a4, v8);
  }
}

uint64_t glUniform2iv_ListExec(uint64_t a1, int *a2)
{
  int v4 = *a2;
  int v5 = a2[1];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v6 = *(void *)(a1 + 24768);
  if (v6 || (uint64_t v7 = *(void *)(a1 + 24776)) != 0 && (v6 = *(void *)(v7 + 80)) != 0)
  {
    setProgramUniformInner(a1, v6 + 40, v4, v5, 35667, 0, a2 + 2);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
  return (8 * a2[1] + 8);
}

void glUniform3iv_Exec(uint64_t a1, int a2, int a3, void *a4)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v8 = *(void *)(a1 + 24768);
  if (v8 || (v9 = *(void *)(a1 + 24776)) != 0 && (uint64_t v8 = *(void *)(v9 + 80)) != 0)
  {
    setProgramUniformInner(a1, v8 + 40, a2, a3, 35668, 0, a4);
    uint64_t v10 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
    os_unfair_lock_unlock(v10);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

void *glUniform3iv_Comp(uint64_t a1, int a2, int a3, const void *a4)
{
  if (a3 < 0)
  {
    return gleSetErrorInList(a1, 1281);
  }
  else
  {
    size_t v8 = (12 * a3);
    uint64_t v9 = gleAddCommand(a1, (uint64_t)glUniform3iv_ListExec, (v8 + 8));
    *uint64_t v9 = a2;
    v9[1] = a3;
    uint64_t v10 = v9 + 2;
    return memcpy(v10, a4, v8);
  }
}

uint64_t glUniform3iv_ListExec(uint64_t a1, int *a2)
{
  int v4 = *a2;
  int v5 = a2[1];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v6 = *(void *)(a1 + 24768);
  if (v6 || (uint64_t v7 = *(void *)(a1 + 24776)) != 0 && (v6 = *(void *)(v7 + 80)) != 0)
  {
    setProgramUniformInner(a1, v6 + 40, v4, v5, 35668, 0, a2 + 2);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
  return (12 * a2[1] + 8);
}

void glUniform4iv_Exec(uint64_t a1, int a2, int a3, void *a4)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v8 = *(void *)(a1 + 24768);
  if (v8 || (v9 = *(void *)(a1 + 24776)) != 0 && (uint64_t v8 = *(void *)(v9 + 80)) != 0)
  {
    setProgramUniformInner(a1, v8 + 40, a2, a3, 35669, 0, a4);
    uint64_t v10 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
    os_unfair_lock_unlock(v10);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

void *glUniform4iv_Comp(uint64_t a1, int a2, int a3, const void *a4)
{
  if (a3 < 0)
  {
    return gleSetErrorInList(a1, 1281);
  }
  else
  {
    size_t v8 = (16 * a3);
    uint64_t v9 = gleAddCommand(a1, (uint64_t)glUniform4iv_ListExec, (16 * a3) | 8u);
    *uint64_t v9 = a2;
    v9[1] = a3;
    uint64_t v10 = v9 + 2;
    return memcpy(v10, a4, v8);
  }
}

uint64_t glUniform4iv_ListExec(uint64_t a1, int *a2)
{
  int v4 = *a2;
  int v5 = a2[1];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v6 = *(void *)(a1 + 24768);
  if (v6 || (uint64_t v7 = *(void *)(a1 + 24776)) != 0 && (v6 = *(void *)(v7 + 80)) != 0)
  {
    setProgramUniformInner(a1, v6 + 40, v4, v5, 35669, 0, a2 + 2);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
  return (16 * a2[1]) | 8u;
}

void glUniform1uiv_Exec(uint64_t a1, int a2, int a3, void *a4)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v8 = *(void *)(a1 + 24768);
  if (v8 || (v9 = *(void *)(a1 + 24776)) != 0 && (uint64_t v8 = *(void *)(v9 + 80)) != 0)
  {
    setProgramUniformInner(a1, v8 + 40, a2, a3, 5125, 0, a4);
    uint64_t v10 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
    os_unfair_lock_unlock(v10);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

void *glUniform1uiv_Comp(uint64_t a1, int a2, int a3, const void *a4)
{
  if (a3 < 0)
  {
    return gleSetErrorInList(a1, 1281);
  }
  else
  {
    size_t v8 = (4 * a3);
    uint64_t v9 = gleAddCommand(a1, (uint64_t)glUniform1uiv_ListExec, (v8 + 8));
    *uint64_t v9 = a2;
    v9[1] = a3;
    uint64_t v10 = v9 + 2;
    return memcpy(v10, a4, v8);
  }
}

uint64_t glUniform1uiv_ListExec(uint64_t a1, int *a2)
{
  int v4 = *a2;
  int v5 = a2[1];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v6 = *(void *)(a1 + 24768);
  if (v6 || (uint64_t v7 = *(void *)(a1 + 24776)) != 0 && (v6 = *(void *)(v7 + 80)) != 0)
  {
    setProgramUniformInner(a1, v6 + 40, v4, v5, 5125, 0, a2 + 2);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
  return (4 * a2[1] + 8);
}

void glUniform2uiv_Exec(uint64_t a1, int a2, int a3, void *a4)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v8 = *(void *)(a1 + 24768);
  if (v8 || (v9 = *(void *)(a1 + 24776)) != 0 && (uint64_t v8 = *(void *)(v9 + 80)) != 0)
  {
    setProgramUniformInner(a1, v8 + 40, a2, a3, 36294, 0, a4);
    uint64_t v10 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
    os_unfair_lock_unlock(v10);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

void *glUniform2uiv_Comp(uint64_t a1, int a2, int a3, const void *a4)
{
  if (a3 < 0)
  {
    return gleSetErrorInList(a1, 1281);
  }
  else
  {
    size_t v8 = (8 * a3);
    uint64_t v9 = gleAddCommand(a1, (uint64_t)glUniform2uiv_ListExec, (v8 + 8));
    *uint64_t v9 = a2;
    v9[1] = a3;
    uint64_t v10 = v9 + 2;
    return memcpy(v10, a4, v8);
  }
}

uint64_t glUniform2uiv_ListExec(uint64_t a1, int *a2)
{
  int v4 = *a2;
  int v5 = a2[1];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v6 = *(void *)(a1 + 24768);
  if (v6 || (uint64_t v7 = *(void *)(a1 + 24776)) != 0 && (v6 = *(void *)(v7 + 80)) != 0)
  {
    setProgramUniformInner(a1, v6 + 40, v4, v5, 36294, 0, a2 + 2);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
  return (8 * a2[1] + 8);
}

void glUniform3uiv_Exec(uint64_t a1, int a2, int a3, void *a4)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v8 = *(void *)(a1 + 24768);
  if (v8 || (v9 = *(void *)(a1 + 24776)) != 0 && (uint64_t v8 = *(void *)(v9 + 80)) != 0)
  {
    setProgramUniformInner(a1, v8 + 40, a2, a3, 36295, 0, a4);
    uint64_t v10 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
    os_unfair_lock_unlock(v10);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

void *glUniform3uiv_Comp(uint64_t a1, int a2, int a3, const void *a4)
{
  if (a3 < 0)
  {
    return gleSetErrorInList(a1, 1281);
  }
  else
  {
    size_t v8 = (12 * a3);
    uint64_t v9 = gleAddCommand(a1, (uint64_t)glUniform3uiv_ListExec, (v8 + 8));
    *uint64_t v9 = a2;
    v9[1] = a3;
    uint64_t v10 = v9 + 2;
    return memcpy(v10, a4, v8);
  }
}

uint64_t glUniform3uiv_ListExec(uint64_t a1, int *a2)
{
  int v4 = *a2;
  int v5 = a2[1];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v6 = *(void *)(a1 + 24768);
  if (v6 || (uint64_t v7 = *(void *)(a1 + 24776)) != 0 && (v6 = *(void *)(v7 + 80)) != 0)
  {
    setProgramUniformInner(a1, v6 + 40, v4, v5, 36295, 0, a2 + 2);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
  return (12 * a2[1] + 8);
}

void glUniform4uiv_Exec(uint64_t a1, int a2, int a3, void *a4)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v8 = *(void *)(a1 + 24768);
  if (v8 || (v9 = *(void *)(a1 + 24776)) != 0 && (uint64_t v8 = *(void *)(v9 + 80)) != 0)
  {
    setProgramUniformInner(a1, v8 + 40, a2, a3, 36296, 0, a4);
    uint64_t v10 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
    os_unfair_lock_unlock(v10);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

void *glUniform4uiv_Comp(uint64_t a1, int a2, int a3, const void *a4)
{
  if (a3 < 0)
  {
    return gleSetErrorInList(a1, 1281);
  }
  else
  {
    size_t v8 = (16 * a3);
    uint64_t v9 = gleAddCommand(a1, (uint64_t)glUniform4uiv_ListExec, (16 * a3) | 8u);
    *uint64_t v9 = a2;
    v9[1] = a3;
    uint64_t v10 = v9 + 2;
    return memcpy(v10, a4, v8);
  }
}

uint64_t glUniform4uiv_ListExec(uint64_t a1, int *a2)
{
  int v4 = *a2;
  int v5 = a2[1];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v6 = *(void *)(a1 + 24768);
  if (v6 || (uint64_t v7 = *(void *)(a1 + 24776)) != 0 && (v6 = *(void *)(v7 + 80)) != 0)
  {
    setProgramUniformInner(a1, v6 + 40, v4, v5, 36296, 0, a2 + 2);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
  return (16 * a2[1]) | 8u;
}

void glUniformMatrix2fv_Exec(uint64_t a1, int a2, int a3, int a4, void *a5)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v10 = *(void *)(a1 + 24768);
  if (v10 || (v11 = *(void *)(a1 + 24776)) != 0 && (uint64_t v10 = *(void *)(v11 + 80)) != 0)
  {
    setProgramUniformInner(a1, v10 + 40, a2, a3, 35674, a4, a5);
    unsigned int v12 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
    os_unfair_lock_unlock(v12);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

void *glUniformMatrix2fv_Comp(uint64_t a1, int a2, int a3, char a4, const void *a5)
{
  if (a3 < 0)
  {
    return gleSetErrorInList(a1, 1281);
  }
  else
  {
    size_t v10 = (16 * a3);
    uint64_t v11 = gleAddCommand(a1, (uint64_t)glUniformMatrix2fv_ListExec, (16 * a3) | 0xCu);
    *(_DWORD *)uint64_t v11 = a2;
    *((_DWORD *)v11 + 1) = a3;
    *((unsigned char *)v11 + 8) = a4;
    unsigned int v12 = (char *)v11 + 12;
    return memcpy(v12, a5, v10);
  }
}

uint64_t glUniformMatrix2fv_ListExec(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)a2;
  int v5 = *(_DWORD *)(a2 + 4);
  int v6 = *(unsigned __int8 *)(a2 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v7 = *(void *)(a1 + 24768);
  if (v7 || (v8 = *(void *)(a1 + 24776)) != 0 && (uint64_t v7 = *(void *)(v8 + 80)) != 0)
  {
    setProgramUniformInner(a1, v7 + 40, v4, v5, 35674, v6, (void *)(a2 + 12));
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
  return (16 * *(_DWORD *)(a2 + 4)) | 0xCu;
}

void glUniformMatrix3fv_Exec(uint64_t a1, int a2, int a3, int a4, void *a5)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v10 = *(void *)(a1 + 24768);
  if (v10 || (v11 = *(void *)(a1 + 24776)) != 0 && (uint64_t v10 = *(void *)(v11 + 80)) != 0)
  {
    setProgramUniformInner(a1, v10 + 40, a2, a3, 35675, a4, a5);
    unsigned int v12 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
    os_unfair_lock_unlock(v12);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

void *glUniformMatrix3fv_Comp(uint64_t a1, int a2, int a3, char a4, const void *a5)
{
  if (a3 < 0)
  {
    return gleSetErrorInList(a1, 1281);
  }
  else
  {
    size_t v10 = (36 * a3);
    uint64_t v11 = gleAddCommand(a1, (uint64_t)glUniformMatrix3fv_ListExec, (v10 + 12));
    *(_DWORD *)uint64_t v11 = a2;
    *((_DWORD *)v11 + 1) = a3;
    *((unsigned char *)v11 + 8) = a4;
    unsigned int v12 = (char *)v11 + 12;
    return memcpy(v12, a5, v10);
  }
}

uint64_t glUniformMatrix3fv_ListExec(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)a2;
  int v5 = *(_DWORD *)(a2 + 4);
  int v6 = *(unsigned __int8 *)(a2 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v7 = *(void *)(a1 + 24768);
  if (v7 || (v8 = *(void *)(a1 + 24776)) != 0 && (uint64_t v7 = *(void *)(v8 + 80)) != 0)
  {
    setProgramUniformInner(a1, v7 + 40, v4, v5, 35675, v6, (void *)(a2 + 12));
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
  return (36 * *(_DWORD *)(a2 + 4) + 12);
}

void glUniformMatrix4fv_Exec(uint64_t a1, int a2, int a3, int a4, void *a5)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v10 = *(void *)(a1 + 24768);
  if (v10 || (v11 = *(void *)(a1 + 24776)) != 0 && (uint64_t v10 = *(void *)(v11 + 80)) != 0)
  {
    setProgramUniformInner(a1, v10 + 40, a2, a3, 35676, a4, a5);
    unsigned int v12 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
    os_unfair_lock_unlock(v12);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

void *glUniformMatrix4fv_Comp(uint64_t a1, int a2, int a3, char a4, const void *a5)
{
  if (a3 < 0)
  {
    return gleSetErrorInList(a1, 1281);
  }
  else
  {
    size_t v10 = (a3 << 6);
    uint64_t v11 = gleAddCommand(a1, (uint64_t)glUniformMatrix4fv_ListExec, (a3 << 6) | 0xCu);
    *(_DWORD *)uint64_t v11 = a2;
    *((_DWORD *)v11 + 1) = a3;
    *((unsigned char *)v11 + 8) = a4;
    unsigned int v12 = (char *)v11 + 12;
    return memcpy(v12, a5, v10);
  }
}

uint64_t glUniformMatrix4fv_ListExec(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)a2;
  int v5 = *(_DWORD *)(a2 + 4);
  int v6 = *(unsigned __int8 *)(a2 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v7 = *(void *)(a1 + 24768);
  if (v7 || (v8 = *(void *)(a1 + 24776)) != 0 && (uint64_t v7 = *(void *)(v8 + 80)) != 0)
  {
    setProgramUniformInner(a1, v7 + 40, v4, v5, 35676, v6, (void *)(a2 + 12));
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
  return (*(_DWORD *)(a2 + 4) << 6) | 0xCu;
}

void glUniformMatrix2x3fv_Exec(uint64_t a1, int a2, int a3, int a4, void *a5)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v10 = *(void *)(a1 + 24768);
  if (v10 || (v11 = *(void *)(a1 + 24776)) != 0 && (uint64_t v10 = *(void *)(v11 + 80)) != 0)
  {
    setProgramUniformInner(a1, v10 + 40, a2, a3, 35685, a4, a5);
    unsigned int v12 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
    os_unfair_lock_unlock(v12);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

void *glUniformMatrix2x3fv_Comp(uint64_t a1, int a2, int a3, char a4, const void *a5)
{
  if (a3 < 0)
  {
    return gleSetErrorInList(a1, 1281);
  }
  else
  {
    size_t v10 = (24 * a3);
    uint64_t v11 = gleAddCommand(a1, (uint64_t)glUniformMatrix2x3fv_ListExec, (v10 + 12));
    *(_DWORD *)uint64_t v11 = a2;
    *((_DWORD *)v11 + 1) = a3;
    *((unsigned char *)v11 + 8) = a4;
    unsigned int v12 = (char *)v11 + 12;
    return memcpy(v12, a5, v10);
  }
}

uint64_t glUniformMatrix2x3fv_ListExec(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)a2;
  int v5 = *(_DWORD *)(a2 + 4);
  int v6 = *(unsigned __int8 *)(a2 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v7 = *(void *)(a1 + 24768);
  if (v7 || (v8 = *(void *)(a1 + 24776)) != 0 && (uint64_t v7 = *(void *)(v8 + 80)) != 0)
  {
    setProgramUniformInner(a1, v7 + 40, v4, v5, 35685, v6, (void *)(a2 + 12));
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
  return (24 * *(_DWORD *)(a2 + 4) + 12);
}

void glUniformMatrix3x2fv_Exec(uint64_t a1, int a2, int a3, int a4, void *a5)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v10 = *(void *)(a1 + 24768);
  if (v10 || (v11 = *(void *)(a1 + 24776)) != 0 && (uint64_t v10 = *(void *)(v11 + 80)) != 0)
  {
    setProgramUniformInner(a1, v10 + 40, a2, a3, 35687, a4, a5);
    unsigned int v12 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
    os_unfair_lock_unlock(v12);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

void *glUniformMatrix3x2fv_Comp(uint64_t a1, int a2, int a3, char a4, const void *a5)
{
  if (a3 < 0)
  {
    return gleSetErrorInList(a1, 1281);
  }
  else
  {
    size_t v10 = (24 * a3);
    uint64_t v11 = gleAddCommand(a1, (uint64_t)glUniformMatrix3x2fv_ListExec, (v10 + 12));
    *(_DWORD *)uint64_t v11 = a2;
    *((_DWORD *)v11 + 1) = a3;
    *((unsigned char *)v11 + 8) = a4;
    unsigned int v12 = (char *)v11 + 12;
    return memcpy(v12, a5, v10);
  }
}

uint64_t glUniformMatrix3x2fv_ListExec(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)a2;
  int v5 = *(_DWORD *)(a2 + 4);
  int v6 = *(unsigned __int8 *)(a2 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v7 = *(void *)(a1 + 24768);
  if (v7 || (v8 = *(void *)(a1 + 24776)) != 0 && (uint64_t v7 = *(void *)(v8 + 80)) != 0)
  {
    setProgramUniformInner(a1, v7 + 40, v4, v5, 35687, v6, (void *)(a2 + 12));
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
  return (24 * *(_DWORD *)(a2 + 4) + 12);
}

void glUniformMatrix2x4fv_Exec(uint64_t a1, int a2, int a3, int a4, void *a5)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v10 = *(void *)(a1 + 24768);
  if (v10 || (v11 = *(void *)(a1 + 24776)) != 0 && (uint64_t v10 = *(void *)(v11 + 80)) != 0)
  {
    setProgramUniformInner(a1, v10 + 40, a2, a3, 35686, a4, a5);
    unsigned int v12 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
    os_unfair_lock_unlock(v12);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

void *glUniformMatrix2x4fv_Comp(uint64_t a1, int a2, int a3, char a4, const void *a5)
{
  if (a3 < 0)
  {
    return gleSetErrorInList(a1, 1281);
  }
  else
  {
    size_t v10 = (32 * a3);
    uint64_t v11 = gleAddCommand(a1, (uint64_t)glUniformMatrix2x4fv_ListExec, (32 * a3) | 0xCu);
    *(_DWORD *)uint64_t v11 = a2;
    *((_DWORD *)v11 + 1) = a3;
    *((unsigned char *)v11 + 8) = a4;
    unsigned int v12 = (char *)v11 + 12;
    return memcpy(v12, a5, v10);
  }
}

uint64_t glUniformMatrix2x4fv_ListExec(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)a2;
  int v5 = *(_DWORD *)(a2 + 4);
  int v6 = *(unsigned __int8 *)(a2 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v7 = *(void *)(a1 + 24768);
  if (v7 || (v8 = *(void *)(a1 + 24776)) != 0 && (uint64_t v7 = *(void *)(v8 + 80)) != 0)
  {
    setProgramUniformInner(a1, v7 + 40, v4, v5, 35686, v6, (void *)(a2 + 12));
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
  return (32 * *(_DWORD *)(a2 + 4)) | 0xCu;
}

void glUniformMatrix4x2fv_Exec(uint64_t a1, int a2, int a3, int a4, void *a5)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v10 = *(void *)(a1 + 24768);
  if (v10 || (v11 = *(void *)(a1 + 24776)) != 0 && (uint64_t v10 = *(void *)(v11 + 80)) != 0)
  {
    setProgramUniformInner(a1, v10 + 40, a2, a3, 35689, a4, a5);
    unsigned int v12 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
    os_unfair_lock_unlock(v12);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

void *glUniformMatrix4x2fv_Comp(uint64_t a1, int a2, int a3, char a4, const void *a5)
{
  if (a3 < 0)
  {
    return gleSetErrorInList(a1, 1281);
  }
  else
  {
    size_t v10 = (32 * a3);
    uint64_t v11 = gleAddCommand(a1, (uint64_t)glUniformMatrix4x2fv_ListExec, (32 * a3) | 0xCu);
    *(_DWORD *)uint64_t v11 = a2;
    *((_DWORD *)v11 + 1) = a3;
    *((unsigned char *)v11 + 8) = a4;
    unsigned int v12 = (char *)v11 + 12;
    return memcpy(v12, a5, v10);
  }
}

uint64_t glUniformMatrix4x2fv_ListExec(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)a2;
  int v5 = *(_DWORD *)(a2 + 4);
  int v6 = *(unsigned __int8 *)(a2 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v7 = *(void *)(a1 + 24768);
  if (v7 || (v8 = *(void *)(a1 + 24776)) != 0 && (uint64_t v7 = *(void *)(v8 + 80)) != 0)
  {
    setProgramUniformInner(a1, v7 + 40, v4, v5, 35689, v6, (void *)(a2 + 12));
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
  return (32 * *(_DWORD *)(a2 + 4)) | 0xCu;
}

void glUniformMatrix3x4fv_Exec(uint64_t a1, int a2, int a3, int a4, void *a5)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v10 = *(void *)(a1 + 24768);
  if (v10 || (v11 = *(void *)(a1 + 24776)) != 0 && (uint64_t v10 = *(void *)(v11 + 80)) != 0)
  {
    setProgramUniformInner(a1, v10 + 40, a2, a3, 35688, a4, a5);
    unsigned int v12 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
    os_unfair_lock_unlock(v12);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

void *glUniformMatrix3x4fv_Comp(uint64_t a1, int a2, int a3, char a4, const void *a5)
{
  if (a3 < 0)
  {
    return gleSetErrorInList(a1, 1281);
  }
  else
  {
    size_t v10 = (48 * a3);
    uint64_t v11 = gleAddCommand(a1, (uint64_t)glUniformMatrix3x4fv_ListExec, (48 * a3) | 0xCu);
    *(_DWORD *)uint64_t v11 = a2;
    *((_DWORD *)v11 + 1) = a3;
    *((unsigned char *)v11 + 8) = a4;
    unsigned int v12 = (char *)v11 + 12;
    return memcpy(v12, a5, v10);
  }
}

uint64_t glUniformMatrix3x4fv_ListExec(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)a2;
  int v5 = *(_DWORD *)(a2 + 4);
  int v6 = *(unsigned __int8 *)(a2 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v7 = *(void *)(a1 + 24768);
  if (v7 || (v8 = *(void *)(a1 + 24776)) != 0 && (uint64_t v7 = *(void *)(v8 + 80)) != 0)
  {
    setProgramUniformInner(a1, v7 + 40, v4, v5, 35688, v6, (void *)(a2 + 12));
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
  return (48 * *(_DWORD *)(a2 + 4)) | 0xCu;
}

void glUniformMatrix4x3fv_Exec(uint64_t a1, int a2, int a3, int a4, void *a5)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v10 = *(void *)(a1 + 24768);
  if (v10 || (v11 = *(void *)(a1 + 24776)) != 0 && (uint64_t v10 = *(void *)(v11 + 80)) != 0)
  {
    setProgramUniformInner(a1, v10 + 40, a2, a3, 35690, a4, a5);
    unsigned int v12 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
    os_unfair_lock_unlock(v12);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

void *glUniformMatrix4x3fv_Comp(uint64_t a1, int a2, int a3, char a4, const void *a5)
{
  if (a3 < 0)
  {
    return gleSetErrorInList(a1, 1281);
  }
  else
  {
    size_t v10 = (48 * a3);
    uint64_t v11 = gleAddCommand(a1, (uint64_t)glUniformMatrix4x3fv_ListExec, (48 * a3) | 0xCu);
    *(_DWORD *)uint64_t v11 = a2;
    *((_DWORD *)v11 + 1) = a3;
    *((unsigned char *)v11 + 8) = a4;
    unsigned int v12 = (char *)v11 + 12;
    return memcpy(v12, a5, v10);
  }
}

uint64_t glUniformMatrix4x3fv_ListExec(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)a2;
  int v5 = *(_DWORD *)(a2 + 4);
  int v6 = *(unsigned __int8 *)(a2 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v7 = *(void *)(a1 + 24768);
  if (v7 || (v8 = *(void *)(a1 + 24776)) != 0 && (uint64_t v7 = *(void *)(v8 + 80)) != 0)
  {
    setProgramUniformInner(a1, v7 + 40, v4, v5, 35690, v6, (void *)(a2 + 12));
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
  return (48 * *(_DWORD *)(a2 + 4)) | 0xCu;
}

void glProgramUniform1f_Exec(uint64_t a1, unsigned int a2, int a3, float a4)
{
  float v8 = a4;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v7 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
  if (v7)
  {
    setProgramUniformInner(a1, (uint64_t)(v7 + 5), a3, 1, 5126, 0, &v8);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

void *glProgramUniform1f_Comp(uint64_t a1, int a2, int a3, float a4)
{
  float32x2_t result = gleAddCommand(a1, (uint64_t)glProgramUniform1f_ListExec, 16);
  *(_DWORD *)float32x2_t result = a2;
  *((_DWORD *)result + 1) = a3;
  *((_DWORD *)result + 2) = 1;
  *((float *)result + 3) = a4;
  return result;
}

uint64_t glProgramUniform1f_ListExec(uint64_t a1, unsigned int *a2)
{
  unsigned int v5 = *a2;
  int v4 = a2[1];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  int v6 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, v5);
  if (v6)
  {
    setProgramUniformInner(a1, (uint64_t)(v6 + 5), v4, 1, 5126, 0, a2 + 3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    return 16;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  if (*(_WORD *)(a1 + 29832)) {
    return 16;
  }
  *(_WORD *)(a1 + 29832) = 1282;
  return 16;
}

void glProgramUniform2f_Exec(uint64_t a1, unsigned int a2, int a3, float a4, float a5)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  *(float *)uint64_t v9 = a4;
  *(float *)&v9[1] = a5;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  float v8 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
  if (v8)
  {
    setProgramUniformInner(a1, (uint64_t)(v8 + 5), a3, 1, 35664, 0, v9);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

void *glProgramUniform2f_Comp(uint64_t a1, int a2, int a3, float a4, float a5)
{
  float32x2_t result = gleAddCommand(a1, (uint64_t)glProgramUniform2f_ListExec, 20);
  *(_DWORD *)float32x2_t result = a2;
  *((_DWORD *)result + 1) = a3;
  *((_DWORD *)result + 2) = 1;
  *((float *)result + 3) = a4;
  *((float *)result + 4) = a5;
  return result;
}

uint64_t glProgramUniform2f_ListExec(uint64_t a1, unsigned int *a2)
{
  unsigned int v5 = *a2;
  int v4 = a2[1];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  int v6 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, v5);
  if (v6)
  {
    setProgramUniformInner(a1, (uint64_t)(v6 + 5), v4, 1, 35664, 0, a2 + 3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    return 20;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  if (*(_WORD *)(a1 + 29832)) {
    return 20;
  }
  *(_WORD *)(a1 + 29832) = 1282;
  return 20;
}

void glProgramUniform3f_Exec(uint64_t a1, unsigned int a2, int a3, float a4, float a5, float a6)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  *(float *)uint64_t v10 = a4;
  *(float *)&v10[1] = a5;
  *(float *)&v10[2] = a6;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v9 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
  if (v9)
  {
    setProgramUniformInner(a1, (uint64_t)(v9 + 5), a3, 1, 35665, 0, v10);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

void *glProgramUniform3f_Comp(uint64_t a1, int a2, int a3, float a4, float a5, float a6)
{
  float32x2_t result = gleAddCommand(a1, (uint64_t)glProgramUniform3f_ListExec, 24);
  *(_DWORD *)float32x2_t result = a2;
  *((_DWORD *)result + 1) = a3;
  *((_DWORD *)result + 2) = 1;
  *((float *)result + 3) = a4;
  *((float *)result + 4) = a5;
  *((float *)result + 5) = a6;
  return result;
}

uint64_t glProgramUniform3f_ListExec(uint64_t a1, unsigned int *a2)
{
  unsigned int v5 = *a2;
  int v4 = a2[1];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  int v6 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, v5);
  if (v6)
  {
    setProgramUniformInner(a1, (uint64_t)(v6 + 5), v4, 1, 35665, 0, a2 + 3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    return 24;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  if (*(_WORD *)(a1 + 29832)) {
    return 24;
  }
  *(_WORD *)(a1 + 29832) = 1282;
  return 24;
}

void glProgramUniform4f_Exec(uint64_t a1, unsigned int a2, int a3, float a4, float a5, float a6, float a7)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  *(float *)uint64_t v11 = a4;
  *(float *)&v11[1] = a5;
  *(float *)&v11[2] = a6;
  *(float *)&v11[3] = a7;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v10 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
  if (v10)
  {
    setProgramUniformInner(a1, (uint64_t)(v10 + 5), a3, 1, 35666, 0, v11);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

void *glProgramUniform4f_Comp(uint64_t a1, int a2, int a3, float a4, float a5, float a6, float a7)
{
  float32x2_t result = gleAddCommand(a1, (uint64_t)glProgramUniform4f_ListExec, 28);
  *(_DWORD *)float32x2_t result = a2;
  *((_DWORD *)result + 1) = a3;
  *((_DWORD *)result + 2) = 1;
  *((float *)result + 3) = a4;
  *((float *)result + 4) = a5;
  *((float *)result + 5) = a6;
  *((float *)result + 6) = a7;
  return result;
}

uint64_t glProgramUniform4f_ListExec(uint64_t a1, unsigned int *a2)
{
  unsigned int v5 = *a2;
  int v4 = a2[1];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  int v6 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, v5);
  if (v6)
  {
    setProgramUniformInner(a1, (uint64_t)(v6 + 5), v4, 1, 35666, 0, a2 + 3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    return 28;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  if (*(_WORD *)(a1 + 29832)) {
    return 28;
  }
  *(_WORD *)(a1 + 29832) = 1282;
  return 28;
}

void glProgramUniform1i_Exec(uint64_t a1, unsigned int a2, int a3, int a4)
{
  int v8 = a4;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v7 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
  if (v7)
  {
    setProgramUniformInner(a1, (uint64_t)(v7 + 5), a3, 1, 5124, 0, &v8);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

_DWORD *glProgramUniform1i_Comp(uint64_t a1, int a2, int a3, int a4)
{
  float32x2_t result = gleAddCommand(a1, (uint64_t)glProgramUniform1i_ListExec, 16);
  *float32x2_t result = a2;
  result[1] = a3;
  result[2] = 1;
  result[3] = a4;
  return result;
}

uint64_t glProgramUniform1i_ListExec(uint64_t a1, unsigned int *a2)
{
  unsigned int v5 = *a2;
  int v4 = a2[1];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  int v6 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, v5);
  if (v6)
  {
    setProgramUniformInner(a1, (uint64_t)(v6 + 5), v4, 1, 5124, 0, a2 + 3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    return 16;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  if (*(_WORD *)(a1 + 29832)) {
    return 16;
  }
  *(_WORD *)(a1 + 29832) = 1282;
  return 16;
}

void glProgramUniform2i_Exec(uint64_t a1, unsigned int a2, int a3, int a4, int a5)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  v9[0] = a4;
  v9[1] = a5;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  int v8 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
  if (v8)
  {
    setProgramUniformInner(a1, (uint64_t)(v8 + 5), a3, 1, 35667, 0, v9);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

void *glProgramUniform2i_Comp(uint64_t a1, int a2, int a3, unsigned int a4, uint64_t a5)
{
  float32x2_t result = gleAddCommand(a1, (uint64_t)glProgramUniform2i_ListExec, 20);
  *(_DWORD *)float32x2_t result = a2;
  *((_DWORD *)result + 1) = a3;
  *((_DWORD *)result + 2) = 1;
  *(void *)((char *)result + 12) = a4 | (unint64_t)(a5 << 32);
  return result;
}

uint64_t glProgramUniform2i_ListExec(uint64_t a1, unsigned int *a2)
{
  unsigned int v5 = *a2;
  int v4 = a2[1];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  int v6 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, v5);
  if (v6)
  {
    setProgramUniformInner(a1, (uint64_t)(v6 + 5), v4, 1, 35667, 0, a2 + 3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    return 20;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  if (*(_WORD *)(a1 + 29832)) {
    return 20;
  }
  *(_WORD *)(a1 + 29832) = 1282;
  return 20;
}

void glProgramUniform3i_Exec(uint64_t a1, unsigned int a2, int a3, int a4, int a5, int a6)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  v10[0] = a4;
  v10[1] = a5;
  v10[2] = a6;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v9 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
  if (v9)
  {
    setProgramUniformInner(a1, (uint64_t)(v9 + 5), a3, 1, 35668, 0, v10);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

_DWORD *glProgramUniform3i_Comp(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  float32x2_t result = gleAddCommand(a1, (uint64_t)glProgramUniform3i_ListExec, 24);
  *float32x2_t result = a2;
  result[1] = a3;
  result[2] = 1;
  result[3] = a4;
  result[4] = a5;
  result[5] = a6;
  return result;
}

uint64_t glProgramUniform3i_ListExec(uint64_t a1, unsigned int *a2)
{
  unsigned int v5 = *a2;
  int v4 = a2[1];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  int v6 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, v5);
  if (v6)
  {
    setProgramUniformInner(a1, (uint64_t)(v6 + 5), v4, 1, 35668, 0, a2 + 3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    return 24;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  if (*(_WORD *)(a1 + 29832)) {
    return 24;
  }
  *(_WORD *)(a1 + 29832) = 1282;
  return 24;
}

void glProgramUniform4i_Exec(uint64_t a1, unsigned int a2, int a3, int a4, int a5, int a6, int a7)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  v11[0] = a4;
  v11[1] = a5;
  v11[2] = a6;
  v11[3] = a7;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v10 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
  if (v10)
  {
    setProgramUniformInner(a1, (uint64_t)(v10 + 5), a3, 1, 35669, 0, v11);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

_DWORD *glProgramUniform4i_Comp(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  float32x2_t result = gleAddCommand(a1, (uint64_t)glProgramUniform4i_ListExec, 28);
  *float32x2_t result = a2;
  result[1] = a3;
  result[2] = 1;
  result[3] = a4;
  result[4] = a5;
  result[5] = a6;
  result[6] = a7;
  return result;
}

uint64_t glProgramUniform4i_ListExec(uint64_t a1, unsigned int *a2)
{
  unsigned int v5 = *a2;
  int v4 = a2[1];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  int v6 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, v5);
  if (v6)
  {
    setProgramUniformInner(a1, (uint64_t)(v6 + 5), v4, 1, 35669, 0, a2 + 3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    return 28;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  if (*(_WORD *)(a1 + 29832)) {
    return 28;
  }
  *(_WORD *)(a1 + 29832) = 1282;
  return 28;
}

void glProgramUniform1ui_Exec(uint64_t a1, unsigned int a2, int a3, int a4)
{
  int v8 = a4;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v7 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
  if (v7)
  {
    setProgramUniformInner(a1, (uint64_t)(v7 + 5), a3, 1, 5125, 0, &v8);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

_DWORD *glProgramUniform1ui_Comp(uint64_t a1, int a2, int a3, int a4)
{
  float32x2_t result = gleAddCommand(a1, (uint64_t)glProgramUniform1ui_ListExec, 16);
  *float32x2_t result = a2;
  result[1] = a3;
  result[2] = 1;
  result[3] = a4;
  return result;
}

uint64_t glProgramUniform1ui_ListExec(uint64_t a1, unsigned int *a2)
{
  unsigned int v5 = *a2;
  int v4 = a2[1];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  int v6 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, v5);
  if (v6)
  {
    setProgramUniformInner(a1, (uint64_t)(v6 + 5), v4, 1, 5125, 0, a2 + 3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    return 16;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  if (*(_WORD *)(a1 + 29832)) {
    return 16;
  }
  *(_WORD *)(a1 + 29832) = 1282;
  return 16;
}

void glProgramUniform2ui_Exec(uint64_t a1, unsigned int a2, int a3, int a4, int a5)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  v9[0] = a4;
  v9[1] = a5;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  int v8 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
  if (v8)
  {
    setProgramUniformInner(a1, (uint64_t)(v8 + 5), a3, 1, 36294, 0, v9);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

void *glProgramUniform2ui_Comp(uint64_t a1, int a2, int a3, unsigned int a4, uint64_t a5)
{
  float32x2_t result = gleAddCommand(a1, (uint64_t)glProgramUniform2ui_ListExec, 20);
  *(_DWORD *)float32x2_t result = a2;
  *((_DWORD *)result + 1) = a3;
  *((_DWORD *)result + 2) = 1;
  *(void *)((char *)result + 12) = a4 | (unint64_t)(a5 << 32);
  return result;
}

uint64_t glProgramUniform2ui_ListExec(uint64_t a1, unsigned int *a2)
{
  unsigned int v5 = *a2;
  int v4 = a2[1];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  int v6 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, v5);
  if (v6)
  {
    setProgramUniformInner(a1, (uint64_t)(v6 + 5), v4, 1, 36294, 0, a2 + 3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    return 20;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  if (*(_WORD *)(a1 + 29832)) {
    return 20;
  }
  *(_WORD *)(a1 + 29832) = 1282;
  return 20;
}

void glProgramUniform3ui_Exec(uint64_t a1, unsigned int a2, int a3, int a4, int a5, int a6)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  v10[0] = a4;
  v10[1] = a5;
  v10[2] = a6;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v9 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
  if (v9)
  {
    setProgramUniformInner(a1, (uint64_t)(v9 + 5), a3, 1, 36295, 0, v10);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

_DWORD *glProgramUniform3ui_Comp(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  float32x2_t result = gleAddCommand(a1, (uint64_t)glProgramUniform3ui_ListExec, 24);
  *float32x2_t result = a2;
  result[1] = a3;
  result[2] = 1;
  result[3] = a4;
  result[4] = a5;
  result[5] = a6;
  return result;
}

uint64_t glProgramUniform3ui_ListExec(uint64_t a1, unsigned int *a2)
{
  unsigned int v5 = *a2;
  int v4 = a2[1];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  int v6 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, v5);
  if (v6)
  {
    setProgramUniformInner(a1, (uint64_t)(v6 + 5), v4, 1, 36295, 0, a2 + 3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    return 24;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  if (*(_WORD *)(a1 + 29832)) {
    return 24;
  }
  *(_WORD *)(a1 + 29832) = 1282;
  return 24;
}

void glProgramUniform4ui_Exec(uint64_t a1, unsigned int a2, int a3, int a4, int a5, int a6, int a7)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  v11[0] = a4;
  v11[1] = a5;
  v11[2] = a6;
  v11[3] = a7;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v10 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
  if (v10)
  {
    setProgramUniformInner(a1, (uint64_t)(v10 + 5), a3, 1, 36296, 0, v11);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

_DWORD *glProgramUniform4ui_Comp(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  float32x2_t result = gleAddCommand(a1, (uint64_t)glProgramUniform4ui_ListExec, 28);
  *float32x2_t result = a2;
  result[1] = a3;
  result[2] = 1;
  result[3] = a4;
  result[4] = a5;
  result[5] = a6;
  result[6] = a7;
  return result;
}

uint64_t glProgramUniform4ui_ListExec(uint64_t a1, unsigned int *a2)
{
  unsigned int v5 = *a2;
  int v4 = a2[1];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  int v6 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, v5);
  if (v6)
  {
    setProgramUniformInner(a1, (uint64_t)(v6 + 5), v4, 1, 36296, 0, a2 + 3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    return 28;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  if (*(_WORD *)(a1 + 29832)) {
    return 28;
  }
  *(_WORD *)(a1 + 29832) = 1282;
  return 28;
}

void glProgramUniform1fv_Exec(uint64_t a1, unsigned int a2, int a3, int a4, void *a5)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v10 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
  if (v10)
  {
    setProgramUniformInner(a1, (uint64_t)(v10 + 5), a3, a4, 5126, 0, a5);
    uint64_t v11 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
    os_unfair_lock_unlock(v11);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

void *glProgramUniform1fv_Comp(uint64_t a1, int a2, int a3, int a4, const void *a5)
{
  if (a4 < 0)
  {
    return gleSetErrorInList(a1, 1281);
  }
  else
  {
    size_t v10 = (4 * a4);
    uint64_t v11 = gleAddCommand(a1, (uint64_t)glProgramUniform1fv_ListExec, (v10 + 12));
    *uint64_t v11 = a2;
    v11[1] = a3;
    v11[2] = a4;
    uint64_t v12 = v11 + 3;
    return memcpy(v12, a5, v10);
  }
}

uint64_t glProgramUniform1fv_ListExec(uint64_t a1, unsigned int *a2)
{
  unsigned int v5 = *a2;
  int v4 = a2[1];
  int v6 = a2[2];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v7 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, v5);
  if (v7)
  {
    setProgramUniformInner(a1, (uint64_t)(v7 + 5), v4, v6, 5126, 0, a2 + 3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
  return 4 * a2[2] + 12;
}

void glProgramUniform2fv_Exec(uint64_t a1, unsigned int a2, int a3, int a4, void *a5)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  size_t v10 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
  if (v10)
  {
    setProgramUniformInner(a1, (uint64_t)(v10 + 5), a3, a4, 35664, 0, a5);
    uint64_t v11 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
    os_unfair_lock_unlock(v11);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

void *glProgramUniform2fv_Comp(uint64_t a1, int a2, int a3, int a4, const void *a5)
{
  if (a4 < 0)
  {
    return gleSetErrorInList(a1, 1281);
  }
  else
  {
    size_t v10 = (8 * a4);
    uint64_t v11 = gleAddCommand(a1, (uint64_t)glProgramUniform2fv_ListExec, (v10 + 12));
    *uint64_t v11 = a2;
    v11[1] = a3;
    v11[2] = a4;
    uint64_t v12 = v11 + 3;
    return memcpy(v12, a5, v10);
  }
}

uint64_t glProgramUniform2fv_ListExec(uint64_t a1, unsigned int *a2)
{
  unsigned int v5 = *a2;
  int v4 = a2[1];
  int v6 = a2[2];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v7 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, v5);
  if (v7)
  {
    setProgramUniformInner(a1, (uint64_t)(v7 + 5), v4, v6, 35664, 0, a2 + 3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
  return 8 * a2[2] + 12;
}

void glProgramUniform3fv_Exec(uint64_t a1, unsigned int a2, int a3, int a4, void *a5)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  size_t v10 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
  if (v10)
  {
    setProgramUniformInner(a1, (uint64_t)(v10 + 5), a3, a4, 35665, 0, a5);
    uint64_t v11 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
    os_unfair_lock_unlock(v11);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

void *glProgramUniform3fv_Comp(uint64_t a1, int a2, int a3, int a4, const void *a5)
{
  if (a4 < 0)
  {
    return gleSetErrorInList(a1, 1281);
  }
  else
  {
    size_t v10 = (12 * a4);
    uint64_t v11 = gleAddCommand(a1, (uint64_t)glProgramUniform3fv_ListExec, (v10 + 12));
    *uint64_t v11 = a2;
    v11[1] = a3;
    v11[2] = a4;
    uint64_t v12 = v11 + 3;
    return memcpy(v12, a5, v10);
  }
}

uint64_t glProgramUniform3fv_ListExec(uint64_t a1, unsigned int *a2)
{
  unsigned int v5 = *a2;
  int v4 = a2[1];
  int v6 = a2[2];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v7 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, v5);
  if (v7)
  {
    setProgramUniformInner(a1, (uint64_t)(v7 + 5), v4, v6, 35665, 0, a2 + 3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
  return 12 * a2[2] + 12;
}

void glProgramUniform4fv_Exec(uint64_t a1, unsigned int a2, int a3, int a4, void *a5)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  size_t v10 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
  if (v10)
  {
    setProgramUniformInner(a1, (uint64_t)(v10 + 5), a3, a4, 35666, 0, a5);
    uint64_t v11 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
    os_unfair_lock_unlock(v11);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

void *glProgramUniform4fv_Comp(uint64_t a1, int a2, int a3, int a4, const void *a5)
{
  if (a4 < 0)
  {
    return gleSetErrorInList(a1, 1281);
  }
  else
  {
    size_t v10 = (16 * a4);
    uint64_t v11 = gleAddCommand(a1, (uint64_t)glProgramUniform4fv_ListExec, (16 * a4) | 0xCu);
    *uint64_t v11 = a2;
    v11[1] = a3;
    v11[2] = a4;
    uint64_t v12 = v11 + 3;
    return memcpy(v12, a5, v10);
  }
}

uint64_t glProgramUniform4fv_ListExec(uint64_t a1, unsigned int *a2)
{
  unsigned int v5 = *a2;
  int v4 = a2[1];
  int v6 = a2[2];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v7 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, v5);
  if (v7)
  {
    setProgramUniformInner(a1, (uint64_t)(v7 + 5), v4, v6, 35666, 0, a2 + 3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
  return (16 * a2[2]) | 0xC;
}

void glProgramUniform1iv_Exec(uint64_t a1, unsigned int a2, int a3, int a4, void *a5)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  size_t v10 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
  if (v10)
  {
    setProgramUniformInner(a1, (uint64_t)(v10 + 5), a3, a4, 5124, 0, a5);
    uint64_t v11 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
    os_unfair_lock_unlock(v11);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

void *glProgramUniform1iv_Comp(uint64_t a1, int a2, int a3, int a4, const void *a5)
{
  if (a4 < 0)
  {
    return gleSetErrorInList(a1, 1281);
  }
  else
  {
    size_t v10 = (4 * a4);
    uint64_t v11 = gleAddCommand(a1, (uint64_t)glProgramUniform1iv_ListExec, (v10 + 12));
    *uint64_t v11 = a2;
    v11[1] = a3;
    v11[2] = a4;
    uint64_t v12 = v11 + 3;
    return memcpy(v12, a5, v10);
  }
}

uint64_t glProgramUniform1iv_ListExec(uint64_t a1, unsigned int *a2)
{
  unsigned int v5 = *a2;
  int v4 = a2[1];
  int v6 = a2[2];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v7 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, v5);
  if (v7)
  {
    setProgramUniformInner(a1, (uint64_t)(v7 + 5), v4, v6, 5124, 0, a2 + 3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
  return 4 * a2[2] + 12;
}

void glProgramUniform2iv_Exec(uint64_t a1, unsigned int a2, int a3, int a4, void *a5)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  size_t v10 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
  if (v10)
  {
    setProgramUniformInner(a1, (uint64_t)(v10 + 5), a3, a4, 35667, 0, a5);
    uint64_t v11 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
    os_unfair_lock_unlock(v11);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

void *glProgramUniform2iv_Comp(uint64_t a1, int a2, int a3, int a4, const void *a5)
{
  if (a4 < 0)
  {
    return gleSetErrorInList(a1, 1281);
  }
  else
  {
    size_t v10 = (8 * a4);
    uint64_t v11 = gleAddCommand(a1, (uint64_t)glProgramUniform2iv_ListExec, (v10 + 12));
    *uint64_t v11 = a2;
    v11[1] = a3;
    v11[2] = a4;
    uint64_t v12 = v11 + 3;
    return memcpy(v12, a5, v10);
  }
}

uint64_t glProgramUniform2iv_ListExec(uint64_t a1, unsigned int *a2)
{
  unsigned int v5 = *a2;
  int v4 = a2[1];
  int v6 = a2[2];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v7 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, v5);
  if (v7)
  {
    setProgramUniformInner(a1, (uint64_t)(v7 + 5), v4, v6, 35667, 0, a2 + 3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
  return 8 * a2[2] + 12;
}

void glProgramUniform3iv_Exec(uint64_t a1, unsigned int a2, int a3, int a4, void *a5)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  size_t v10 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
  if (v10)
  {
    setProgramUniformInner(a1, (uint64_t)(v10 + 5), a3, a4, 35668, 0, a5);
    uint64_t v11 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
    os_unfair_lock_unlock(v11);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

void *glProgramUniform3iv_Comp(uint64_t a1, int a2, int a3, int a4, const void *a5)
{
  if (a4 < 0)
  {
    return gleSetErrorInList(a1, 1281);
  }
  else
  {
    size_t v10 = (12 * a4);
    uint64_t v11 = gleAddCommand(a1, (uint64_t)glProgramUniform3iv_ListExec, (v10 + 12));
    *uint64_t v11 = a2;
    v11[1] = a3;
    v11[2] = a4;
    uint64_t v12 = v11 + 3;
    return memcpy(v12, a5, v10);
  }
}

uint64_t glProgramUniform3iv_ListExec(uint64_t a1, unsigned int *a2)
{
  unsigned int v5 = *a2;
  int v4 = a2[1];
  int v6 = a2[2];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v7 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, v5);
  if (v7)
  {
    setProgramUniformInner(a1, (uint64_t)(v7 + 5), v4, v6, 35668, 0, a2 + 3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
  return 12 * a2[2] + 12;
}

void glProgramUniform4iv_Exec(uint64_t a1, unsigned int a2, int a3, int a4, void *a5)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  size_t v10 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
  if (v10)
  {
    setProgramUniformInner(a1, (uint64_t)(v10 + 5), a3, a4, 35669, 0, a5);
    uint64_t v11 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
    os_unfair_lock_unlock(v11);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

void *glProgramUniform4iv_Comp(uint64_t a1, int a2, int a3, int a4, const void *a5)
{
  if (a4 < 0)
  {
    return gleSetErrorInList(a1, 1281);
  }
  else
  {
    size_t v10 = (16 * a4);
    uint64_t v11 = gleAddCommand(a1, (uint64_t)glProgramUniform4iv_ListExec, (16 * a4) | 0xCu);
    *uint64_t v11 = a2;
    v11[1] = a3;
    v11[2] = a4;
    uint64_t v12 = v11 + 3;
    return memcpy(v12, a5, v10);
  }
}

uint64_t glProgramUniform4iv_ListExec(uint64_t a1, unsigned int *a2)
{
  unsigned int v5 = *a2;
  int v4 = a2[1];
  int v6 = a2[2];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v7 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, v5);
  if (v7)
  {
    setProgramUniformInner(a1, (uint64_t)(v7 + 5), v4, v6, 35669, 0, a2 + 3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
  return (16 * a2[2]) | 0xC;
}

void glProgramUniform1uiv_Exec(uint64_t a1, unsigned int a2, int a3, int a4, void *a5)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  size_t v10 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
  if (v10)
  {
    setProgramUniformInner(a1, (uint64_t)(v10 + 5), a3, a4, 5125, 0, a5);
    uint64_t v11 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
    os_unfair_lock_unlock(v11);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

void *glProgramUniform1uiv_Comp(uint64_t a1, int a2, int a3, int a4, const void *a5)
{
  if (a4 < 0)
  {
    return gleSetErrorInList(a1, 1281);
  }
  else
  {
    size_t v10 = (4 * a4);
    uint64_t v11 = gleAddCommand(a1, (uint64_t)glProgramUniform1uiv_ListExec, (v10 + 12));
    *uint64_t v11 = a2;
    v11[1] = a3;
    v11[2] = a4;
    uint64_t v12 = v11 + 3;
    return memcpy(v12, a5, v10);
  }
}

uint64_t glProgramUniform1uiv_ListExec(uint64_t a1, unsigned int *a2)
{
  unsigned int v5 = *a2;
  int v4 = a2[1];
  int v6 = a2[2];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v7 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, v5);
  if (v7)
  {
    setProgramUniformInner(a1, (uint64_t)(v7 + 5), v4, v6, 5125, 0, a2 + 3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
  return 4 * a2[2] + 12;
}

void glProgramUniform2uiv_Exec(uint64_t a1, unsigned int a2, int a3, int a4, void *a5)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  size_t v10 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
  if (v10)
  {
    setProgramUniformInner(a1, (uint64_t)(v10 + 5), a3, a4, 36294, 0, a5);
    uint64_t v11 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
    os_unfair_lock_unlock(v11);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

void *glProgramUniform2uiv_Comp(uint64_t a1, int a2, int a3, int a4, const void *a5)
{
  if (a4 < 0)
  {
    return gleSetErrorInList(a1, 1281);
  }
  else
  {
    size_t v10 = (8 * a4);
    uint64_t v11 = gleAddCommand(a1, (uint64_t)glProgramUniform2uiv_ListExec, (v10 + 12));
    *uint64_t v11 = a2;
    v11[1] = a3;
    v11[2] = a4;
    uint64_t v12 = v11 + 3;
    return memcpy(v12, a5, v10);
  }
}

uint64_t glProgramUniform2uiv_ListExec(uint64_t a1, unsigned int *a2)
{
  unsigned int v5 = *a2;
  int v4 = a2[1];
  int v6 = a2[2];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v7 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, v5);
  if (v7)
  {
    setProgramUniformInner(a1, (uint64_t)(v7 + 5), v4, v6, 36294, 0, a2 + 3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
  return 8 * a2[2] + 12;
}

void glProgramUniform3uiv_Exec(uint64_t a1, unsigned int a2, int a3, int a4, void *a5)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  size_t v10 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
  if (v10)
  {
    setProgramUniformInner(a1, (uint64_t)(v10 + 5), a3, a4, 36295, 0, a5);
    uint64_t v11 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
    os_unfair_lock_unlock(v11);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

void *glProgramUniform3uiv_Comp(uint64_t a1, int a2, int a3, int a4, const void *a5)
{
  if (a4 < 0)
  {
    return gleSetErrorInList(a1, 1281);
  }
  else
  {
    size_t v10 = (12 * a4);
    uint64_t v11 = gleAddCommand(a1, (uint64_t)glProgramUniform3uiv_ListExec, (v10 + 12));
    *uint64_t v11 = a2;
    v11[1] = a3;
    v11[2] = a4;
    uint64_t v12 = v11 + 3;
    return memcpy(v12, a5, v10);
  }
}

uint64_t glProgramUniform3uiv_ListExec(uint64_t a1, unsigned int *a2)
{
  unsigned int v5 = *a2;
  int v4 = a2[1];
  int v6 = a2[2];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v7 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, v5);
  if (v7)
  {
    setProgramUniformInner(a1, (uint64_t)(v7 + 5), v4, v6, 36295, 0, a2 + 3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
  return 12 * a2[2] + 12;
}

void glProgramUniform4uiv_Exec(uint64_t a1, unsigned int a2, int a3, int a4, void *a5)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  size_t v10 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
  if (v10)
  {
    setProgramUniformInner(a1, (uint64_t)(v10 + 5), a3, a4, 36296, 0, a5);
    uint64_t v11 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
    os_unfair_lock_unlock(v11);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

void *glProgramUniform4uiv_Comp(uint64_t a1, int a2, int a3, int a4, const void *a5)
{
  if (a4 < 0)
  {
    return gleSetErrorInList(a1, 1281);
  }
  else
  {
    size_t v10 = (16 * a4);
    uint64_t v11 = gleAddCommand(a1, (uint64_t)glProgramUniform4uiv_ListExec, (16 * a4) | 0xCu);
    *uint64_t v11 = a2;
    v11[1] = a3;
    v11[2] = a4;
    uint64_t v12 = v11 + 3;
    return memcpy(v12, a5, v10);
  }
}

uint64_t glProgramUniform4uiv_ListExec(uint64_t a1, unsigned int *a2)
{
  unsigned int v5 = *a2;
  int v4 = a2[1];
  int v6 = a2[2];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v7 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, v5);
  if (v7)
  {
    setProgramUniformInner(a1, (uint64_t)(v7 + 5), v4, v6, 36296, 0, a2 + 3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
  return (16 * a2[2]) | 0xC;
}

void glProgramUniformMatrix2fv_Exec(uint64_t a1, unsigned int a2, int a3, int a4, int a5, void *a6)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v12 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
  if (v12)
  {
    setProgramUniformInner(a1, (uint64_t)(v12 + 5), a3, a4, 35674, a5, a6);
    unsigned int v13 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
    os_unfair_lock_unlock(v13);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

void *glProgramUniformMatrix2fv_Comp(uint64_t a1, int a2, int a3, int a4, char a5, const void *a6)
{
  if (a4 < 0)
  {
    return gleSetErrorInList(a1, 1281);
  }
  else
  {
    size_t v12 = (16 * a4);
    unsigned int v13 = gleAddCommand(a1, (uint64_t)glProgramUniformMatrix2fv_ListExec, (v12 + 16));
    *(_DWORD *)unsigned int v13 = a2;
    *((_DWORD *)v13 + 1) = a3;
    *((_DWORD *)v13 + 2) = a4;
    *((unsigned char *)v13 + 12) = a5;
    int v14 = v13 + 2;
    return memcpy(v14, a6, v12);
  }
}

uint64_t glProgramUniformMatrix2fv_ListExec(uint64_t a1, uint64_t a2)
{
  unsigned int v5 = *(_DWORD *)a2;
  int v4 = *(_DWORD *)(a2 + 4);
  int v6 = *(_DWORD *)(a2 + 8);
  int v7 = *(unsigned __int8 *)(a2 + 12);
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  int v8 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, v5);
  if (v8)
  {
    setProgramUniformInner(a1, (uint64_t)(v8 + 5), v4, v6, 35674, v7, (void *)(a2 + 16));
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
  return (16 * *(_DWORD *)(a2 + 8) + 16);
}

void glProgramUniformMatrix3fv_Exec(uint64_t a1, unsigned int a2, int a3, int a4, int a5, void *a6)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  size_t v12 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
  if (v12)
  {
    setProgramUniformInner(a1, (uint64_t)(v12 + 5), a3, a4, 35675, a5, a6);
    unsigned int v13 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
    os_unfair_lock_unlock(v13);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

void *glProgramUniformMatrix3fv_Comp(uint64_t a1, int a2, int a3, int a4, char a5, const void *a6)
{
  if (a4 < 0)
  {
    return gleSetErrorInList(a1, 1281);
  }
  else
  {
    size_t v12 = (36 * a4);
    unsigned int v13 = gleAddCommand(a1, (uint64_t)glProgramUniformMatrix3fv_ListExec, (v12 + 16));
    *(_DWORD *)unsigned int v13 = a2;
    *((_DWORD *)v13 + 1) = a3;
    *((_DWORD *)v13 + 2) = a4;
    *((unsigned char *)v13 + 12) = a5;
    int v14 = v13 + 2;
    return memcpy(v14, a6, v12);
  }
}

uint64_t glProgramUniformMatrix3fv_ListExec(uint64_t a1, uint64_t a2)
{
  unsigned int v5 = *(_DWORD *)a2;
  int v4 = *(_DWORD *)(a2 + 4);
  int v6 = *(_DWORD *)(a2 + 8);
  int v7 = *(unsigned __int8 *)(a2 + 12);
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  int v8 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, v5);
  if (v8)
  {
    setProgramUniformInner(a1, (uint64_t)(v8 + 5), v4, v6, 35675, v7, (void *)(a2 + 16));
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
  return (36 * *(_DWORD *)(a2 + 8) + 16);
}

void glProgramUniformMatrix4fv_Exec(uint64_t a1, unsigned int a2, int a3, int a4, int a5, void *a6)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  size_t v12 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
  if (v12)
  {
    setProgramUniformInner(a1, (uint64_t)(v12 + 5), a3, a4, 35676, a5, a6);
    unsigned int v13 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
    os_unfair_lock_unlock(v13);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

void *glProgramUniformMatrix4fv_Comp(uint64_t a1, int a2, int a3, int a4, char a5, const void *a6)
{
  if (a4 < 0)
  {
    return gleSetErrorInList(a1, 1281);
  }
  else
  {
    size_t v12 = (a4 << 6);
    unsigned int v13 = gleAddCommand(a1, (uint64_t)glProgramUniformMatrix4fv_ListExec, (a4 << 6) | 0x10u);
    *(_DWORD *)unsigned int v13 = a2;
    *((_DWORD *)v13 + 1) = a3;
    *((_DWORD *)v13 + 2) = a4;
    *((unsigned char *)v13 + 12) = a5;
    int v14 = v13 + 2;
    return memcpy(v14, a6, v12);
  }
}

uint64_t glProgramUniformMatrix4fv_ListExec(uint64_t a1, uint64_t a2)
{
  unsigned int v5 = *(_DWORD *)a2;
  int v4 = *(_DWORD *)(a2 + 4);
  int v6 = *(_DWORD *)(a2 + 8);
  int v7 = *(unsigned __int8 *)(a2 + 12);
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  int v8 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, v5);
  if (v8)
  {
    setProgramUniformInner(a1, (uint64_t)(v8 + 5), v4, v6, 35676, v7, (void *)(a2 + 16));
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
  return (*(_DWORD *)(a2 + 8) << 6) | 0x10u;
}

void glProgramUniformMatrix2x3fv_Exec(uint64_t a1, unsigned int a2, int a3, int a4, int a5, void *a6)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  size_t v12 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
  if (v12)
  {
    setProgramUniformInner(a1, (uint64_t)(v12 + 5), a3, a4, 35685, a5, a6);
    unsigned int v13 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
    os_unfair_lock_unlock(v13);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

void *glProgramUniformMatrix2x3fv_Comp(uint64_t a1, int a2, int a3, int a4, char a5, const void *a6)
{
  if (a4 < 0)
  {
    return gleSetErrorInList(a1, 1281);
  }
  else
  {
    size_t v12 = (24 * a4);
    unsigned int v13 = gleAddCommand(a1, (uint64_t)glProgramUniformMatrix2x3fv_ListExec, (v12 + 16));
    *(_DWORD *)unsigned int v13 = a2;
    *((_DWORD *)v13 + 1) = a3;
    *((_DWORD *)v13 + 2) = a4;
    *((unsigned char *)v13 + 12) = a5;
    int v14 = v13 + 2;
    return memcpy(v14, a6, v12);
  }
}

uint64_t glProgramUniformMatrix2x3fv_ListExec(uint64_t a1, uint64_t a2)
{
  unsigned int v5 = *(_DWORD *)a2;
  int v4 = *(_DWORD *)(a2 + 4);
  int v6 = *(_DWORD *)(a2 + 8);
  int v7 = *(unsigned __int8 *)(a2 + 12);
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  int v8 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, v5);
  if (v8)
  {
    setProgramUniformInner(a1, (uint64_t)(v8 + 5), v4, v6, 35685, v7, (void *)(a2 + 16));
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
  return (24 * *(_DWORD *)(a2 + 8) + 16);
}

void glProgramUniformMatrix3x2fv_Exec(uint64_t a1, unsigned int a2, int a3, int a4, int a5, void *a6)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  size_t v12 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
  if (v12)
  {
    setProgramUniformInner(a1, (uint64_t)(v12 + 5), a3, a4, 35687, a5, a6);
    unsigned int v13 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
    os_unfair_lock_unlock(v13);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

void *glProgramUniformMatrix3x2fv_Comp(uint64_t a1, int a2, int a3, int a4, char a5, const void *a6)
{
  if (a4 < 0)
  {
    return gleSetErrorInList(a1, 1281);
  }
  else
  {
    size_t v12 = (24 * a4);
    unsigned int v13 = gleAddCommand(a1, (uint64_t)glProgramUniformMatrix3x2fv_ListExec, (v12 + 16));
    *(_DWORD *)unsigned int v13 = a2;
    *((_DWORD *)v13 + 1) = a3;
    *((_DWORD *)v13 + 2) = a4;
    *((unsigned char *)v13 + 12) = a5;
    int v14 = v13 + 2;
    return memcpy(v14, a6, v12);
  }
}

uint64_t glProgramUniformMatrix3x2fv_ListExec(uint64_t a1, uint64_t a2)
{
  unsigned int v5 = *(_DWORD *)a2;
  int v4 = *(_DWORD *)(a2 + 4);
  int v6 = *(_DWORD *)(a2 + 8);
  int v7 = *(unsigned __int8 *)(a2 + 12);
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  int v8 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, v5);
  if (v8)
  {
    setProgramUniformInner(a1, (uint64_t)(v8 + 5), v4, v6, 35687, v7, (void *)(a2 + 16));
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
  return (24 * *(_DWORD *)(a2 + 8) + 16);
}

void glProgramUniformMatrix2x4fv_Exec(uint64_t a1, unsigned int a2, int a3, int a4, int a5, void *a6)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  size_t v12 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
  if (v12)
  {
    setProgramUniformInner(a1, (uint64_t)(v12 + 5), a3, a4, 35686, a5, a6);
    unsigned int v13 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
    os_unfair_lock_unlock(v13);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

void *glProgramUniformMatrix2x4fv_Comp(uint64_t a1, int a2, int a3, int a4, char a5, const void *a6)
{
  if (a4 < 0)
  {
    return gleSetErrorInList(a1, 1281);
  }
  else
  {
    size_t v12 = (32 * a4);
    unsigned int v13 = gleAddCommand(a1, (uint64_t)glProgramUniformMatrix2x4fv_ListExec, (32 * a4) | 0x10u);
    *(_DWORD *)unsigned int v13 = a2;
    *((_DWORD *)v13 + 1) = a3;
    *((_DWORD *)v13 + 2) = a4;
    *((unsigned char *)v13 + 12) = a5;
    int v14 = v13 + 2;
    return memcpy(v14, a6, v12);
  }
}

uint64_t glProgramUniformMatrix2x4fv_ListExec(uint64_t a1, uint64_t a2)
{
  unsigned int v5 = *(_DWORD *)a2;
  int v4 = *(_DWORD *)(a2 + 4);
  int v6 = *(_DWORD *)(a2 + 8);
  int v7 = *(unsigned __int8 *)(a2 + 12);
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  int v8 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, v5);
  if (v8)
  {
    setProgramUniformInner(a1, (uint64_t)(v8 + 5), v4, v6, 35686, v7, (void *)(a2 + 16));
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
  return (32 * *(_DWORD *)(a2 + 8)) | 0x10u;
}

void glProgramUniformMatrix4x2fv_Exec(uint64_t a1, unsigned int a2, int a3, int a4, int a5, void *a6)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  size_t v12 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
  if (v12)
  {
    setProgramUniformInner(a1, (uint64_t)(v12 + 5), a3, a4, 35689, a5, a6);
    unsigned int v13 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
    os_unfair_lock_unlock(v13);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

void *glProgramUniformMatrix4x2fv_Comp(uint64_t a1, int a2, int a3, int a4, char a5, const void *a6)
{
  if (a4 < 0)
  {
    return gleSetErrorInList(a1, 1281);
  }
  else
  {
    size_t v12 = (32 * a4);
    unsigned int v13 = gleAddCommand(a1, (uint64_t)glProgramUniformMatrix4x2fv_ListExec, (32 * a4) | 0x10u);
    *(_DWORD *)unsigned int v13 = a2;
    *((_DWORD *)v13 + 1) = a3;
    *((_DWORD *)v13 + 2) = a4;
    *((unsigned char *)v13 + 12) = a5;
    int v14 = v13 + 2;
    return memcpy(v14, a6, v12);
  }
}

uint64_t glProgramUniformMatrix4x2fv_ListExec(uint64_t a1, uint64_t a2)
{
  unsigned int v5 = *(_DWORD *)a2;
  int v4 = *(_DWORD *)(a2 + 4);
  int v6 = *(_DWORD *)(a2 + 8);
  int v7 = *(unsigned __int8 *)(a2 + 12);
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  int v8 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, v5);
  if (v8)
  {
    setProgramUniformInner(a1, (uint64_t)(v8 + 5), v4, v6, 35689, v7, (void *)(a2 + 16));
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
  return (32 * *(_DWORD *)(a2 + 8)) | 0x10u;
}

void glProgramUniformMatrix3x4fv_Exec(uint64_t a1, unsigned int a2, int a3, int a4, int a5, void *a6)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  size_t v12 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
  if (v12)
  {
    setProgramUniformInner(a1, (uint64_t)(v12 + 5), a3, a4, 35688, a5, a6);
    unsigned int v13 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
    os_unfair_lock_unlock(v13);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

void *glProgramUniformMatrix3x4fv_Comp(uint64_t a1, int a2, int a3, int a4, char a5, const void *a6)
{
  if (a4 < 0)
  {
    return gleSetErrorInList(a1, 1281);
  }
  else
  {
    size_t v12 = (48 * a4);
    unsigned int v13 = gleAddCommand(a1, (uint64_t)glProgramUniformMatrix3x4fv_ListExec, (v12 + 16));
    *(_DWORD *)unsigned int v13 = a2;
    *((_DWORD *)v13 + 1) = a3;
    *((_DWORD *)v13 + 2) = a4;
    *((unsigned char *)v13 + 12) = a5;
    int v14 = v13 + 2;
    return memcpy(v14, a6, v12);
  }
}

uint64_t glProgramUniformMatrix3x4fv_ListExec(uint64_t a1, uint64_t a2)
{
  unsigned int v5 = *(_DWORD *)a2;
  int v4 = *(_DWORD *)(a2 + 4);
  int v6 = *(_DWORD *)(a2 + 8);
  int v7 = *(unsigned __int8 *)(a2 + 12);
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  int v8 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, v5);
  if (v8)
  {
    setProgramUniformInner(a1, (uint64_t)(v8 + 5), v4, v6, 35688, v7, (void *)(a2 + 16));
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
  return (48 * *(_DWORD *)(a2 + 8) + 16);
}

void glProgramUniformMatrix4x3fv_Exec(uint64_t a1, unsigned int a2, int a3, int a4, int a5, void *a6)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  size_t v12 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
  if (v12)
  {
    setProgramUniformInner(a1, (uint64_t)(v12 + 5), a3, a4, 35690, a5, a6);
    unsigned int v13 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
    os_unfair_lock_unlock(v13);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
}

void *glProgramUniformMatrix4x3fv_Comp(uint64_t a1, int a2, int a3, int a4, char a5, const void *a6)
{
  if (a4 < 0)
  {
    return gleSetErrorInList(a1, 1281);
  }
  else
  {
    size_t v12 = (48 * a4);
    unsigned int v13 = gleAddCommand(a1, (uint64_t)glProgramUniformMatrix4x3fv_ListExec, (v12 + 16));
    *(_DWORD *)unsigned int v13 = a2;
    *((_DWORD *)v13 + 1) = a3;
    *((_DWORD *)v13 + 2) = a4;
    *((unsigned char *)v13 + 12) = a5;
    int v14 = v13 + 2;
    return memcpy(v14, a6, v12);
  }
}

uint64_t glProgramUniformMatrix4x3fv_ListExec(uint64_t a1, uint64_t a2)
{
  unsigned int v5 = *(_DWORD *)a2;
  int v4 = *(_DWORD *)(a2 + 4);
  int v6 = *(_DWORD *)(a2 + 8);
  int v7 = *(unsigned __int8 *)(a2 + 12);
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  int v8 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, v5);
  if (v8)
  {
    setProgramUniformInner(a1, (uint64_t)(v8 + 5), v4, v6, 35690, v7, (void *)(a2 + 16));
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
  }
  return (48 * *(_DWORD *)(a2 + 8) + 16);
}

uint64_t glGetUniformLocationARB_Exec(uint64_t a1, unsigned int a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  int v4 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
  if (v4)
  {
    if (*((_DWORD *)v4 + 6) == 8 && *((unsigned char *)v4 + 3976) == 1)
    {
      uint64_t UniformLocation = ShGetUniformLocation();
      os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
      return UniformLocation;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    int v7 = (__int16 *)(a1 + 29832);
    if (!*(_WORD *)(a1 + 29832))
    {
      __int16 v8 = 1282;
LABEL_9:
      *int v7 = v8;
    }
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    int v7 = (__int16 *)(a1 + 29832);
    if (!*(_WORD *)(a1 + 29832))
    {
      __int16 v8 = 1281;
      goto LABEL_9;
    }
  }
  return 0xFFFFFFFFLL;
}

void glGetActiveUniformARB_Exec(uint64_t a1, unsigned int a2, unsigned int a3, int a4)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  __int16 v8 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
  if (!v8) {
    goto LABEL_9;
  }
  if (*((_DWORD *)v8 + 6) != 8)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    size_t v10 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v11 = 1282;
    goto LABEL_13;
  }
  if (*((_DWORD *)v8 + 979) <= a3 || a4 < 0)
  {
LABEL_9:
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    size_t v10 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v11 = 1281;
LABEL_13:
    *size_t v10 = v11;
    return;
  }
  if (!ShGetActiveUniform() && !*(_WORD *)(a1 + 29832)) {
    *(_WORD *)(a1 + 29832) = 1282;
  }
  uint64_t v9 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);

  os_unfair_lock_unlock(v9);
}

void glGetUniformfvARB_Exec(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
}

void getUniform(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  size_t v10 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, a2);
  if (!v10)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    uint64_t v15 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v16 = 1281;
LABEL_20:
    *uint64_t v15 = v16;
    return;
  }
  __int16 v11 = v10;
  if (*((_DWORD *)v10 + 6) == 8 && a3 != -1 && *((unsigned char *)v10 + 3976) == 1)
  {
    int v20 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v17 = 0;
    if ((signed int)a3 >= *((_DWORD *)v10 + 940))
    {
      if (ShGetBindableUniformTypeInfo())
      {
        getTypeInfo(v20, (int *)&v17);
        if (ShGetActiveBindableUniformBufferIndexOffsetFromLocation())
        {
          int v14 = *(void **)v11[463];
          if (v14)
          {
            if (v14[19] >= (unint64_t)(16 * *(int *)v11[464]))
            {
              if (v14[24]) {
                gleSynchronizeBufferOnCurrentDevicesForRead(a1, (uint64_t)(v14 + 5));
              }
              uint64_t v13 = v14[17];
              goto LABEL_16;
            }
          }
        }
      }
    }
    else if ((a3 & 0x80000000) == 0 && *((_DWORD *)v10 + 996) > (signed int)a3)
    {
      int v20 = *(unsigned __int16 *)(v10[499] + 8 * a3 + 4);
      getTypeInfo(v20, (int *)&v17);
      uint64_t v13 = v11[469] + 16 * a3;
LABEL_16:
      convertValues(a4, a5, SHIDWORD(v17), v17, v13, v19, -1, HIDWORD(v17), v12, v18, 0, 1);
      os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
      return;
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v15 = (__int16 *)(a1 + 29832);
  if (!*(_WORD *)(a1 + 29832))
  {
    __int16 v16 = 1282;
    goto LABEL_20;
  }
}

void glGetUniformivARB_Exec(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
}

void glGetUniformuivEXT_Exec(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
}

void glGetUniformIndices_Exec(uint64_t a1, unsigned int a2, int a3, uint64_t a4, _DWORD *a5)
{
  LODWORD(v7) = a3;
  size_t v10 = *(os_unfair_lock_s **)(a1 + 19296);
  uint64_t v11 = (uint64_t)&v10[42];
  os_unfair_lock_lock(v10 + 81);
  double v12 = gleLookupHashObject(v11, a2);
  if ((v7 & 0x80000000) != 0 || !v12)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    int v14 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v15 = 1281;
LABEL_14:
    *int v14 = v15;
    return;
  }
  if (*((_DWORD *)v12 + 6) != 8)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    int v14 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v15 = 1282;
    goto LABEL_14;
  }
  if (v7)
  {
    uint64_t v7 = v7;
    do
    {
      a4 += 8;
      *a5++ = ShGetUniformIndex();
      --v7;
    }
    while (v7);
  }
  uint64_t v13 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);

  os_unfair_lock_unlock(v13);
}

void glGetActiveUniformsiv_Exec(uint64_t a1, unsigned int a2, int a3, unsigned int *a4, int a5, uint64_t a6)
{
  LODWORD(v9) = a3;
  double v12 = *(os_unfair_lock_s **)(a1 + 19296);
  uint64_t v13 = (uint64_t)&v12[42];
  os_unfair_lock_lock(v12 + 81);
  int v14 = gleLookupHashObject(v13, a2);
  if ((v9 & 0x80000000) != 0 || !v14)
  {
LABEL_20:
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    uint64_t v19 = (__int16 *)(a1 + 29832);
    if (!*(_WORD *)(a1 + 29832))
    {
      __int16 v20 = 1281;
LABEL_18:
      *uint64_t v19 = v20;
      return;
    }
    return;
  }
  if (*((_DWORD *)v14 + 6) == 8)
  {
    if (!v9)
    {
LABEL_8:
      if ((a5 - 35383) > 0x2D || ((1 << (a5 - 55)) & 0x3E00000000FFLL) == 0)
      {
        os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
        uint64_t v19 = (__int16 *)(a1 + 29832);
        if (*(_WORD *)(a1 + 29832)) {
          return;
        }
        __int16 v20 = 1280;
        goto LABEL_18;
      }
      if (v9)
      {
        uint64_t v9 = v9;
        do
        {
          ++a4;
          ShGetActiveUniformIndex();
          a6 += 4;
          --v9;
        }
        while (v9);
      }
      uint64_t v18 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
      os_unfair_lock_unlock(v18);
      return;
    }
    uint64_t v15 = v9;
    __int16 v16 = a4;
    while (1)
    {
      unsigned int v17 = *v16++;
      if (v17 >= *((_DWORD *)v14 + 979)) {
        goto LABEL_20;
      }
      if (!--v15) {
        goto LABEL_8;
      }
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v19 = (__int16 *)(a1 + 29832);
  if (!*(_WORD *)(a1 + 29832))
  {
    __int16 v20 = 1282;
    goto LABEL_18;
  }
}

uint64_t glGetUniformBlockIndex_Exec(uint64_t a1, unsigned int a2)
{
  int v4 = *(os_unfair_lock_s **)(a1 + 19296);
  uint64_t v5 = (uint64_t)&v4[42];
  os_unfair_lock_lock(v4 + 81);
  int v6 = gleLookupHashObject(v5, a2);
  if (v6)
  {
    if (*((_DWORD *)v6 + 6) == 8)
    {
      uint64_t UniformBlockIndex = ShGetUniformBlockIndex();
      os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
      return UniformBlockIndex;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    uint64_t v9 = (__int16 *)(a1 + 29832);
    if (!*(_WORD *)(a1 + 29832))
    {
      __int16 v10 = 1282;
      goto LABEL_8;
    }
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    uint64_t v9 = (__int16 *)(a1 + 29832);
    if (!*(_WORD *)(a1 + 29832))
    {
      __int16 v10 = 1281;
LABEL_8:
      *uint64_t v9 = v10;
    }
  }
  return 0xFFFFFFFFLL;
}

void glGetActiveUniformBlockiv_Exec(uint64_t a1, unsigned int a2, unsigned int a3, int a4, _DWORD *a5)
{
  __int16 v10 = *(os_unfair_lock_s **)(a1 + 19296);
  uint64_t v11 = (uint64_t)&v10[42];
  os_unfair_lock_lock(v10 + 81);
  double v12 = gleLookupHashObject(v11, a2);
  if (!a5 || !v12) {
    goto LABEL_16;
  }
  if (*((_DWORD *)v12 + 6) != 8)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1282;
    }
    return;
  }
  if (*((_DWORD *)v12 + 945) <= a3)
  {
LABEL_16:
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1281;
    }
    return;
  }
  if ((a4 - 35392) < 7 || (a4 - 34032) < 2)
  {
    ShGetActiveUniformBlockiv();
LABEL_8:
    uint64_t v13 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
    os_unfair_lock_unlock(v13);
    return;
  }
  if (a4 == 35391)
  {
    *a5 = *((_DWORD *)v12 + a3 + 946);
    goto LABEL_8;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  if (!*(_WORD *)(a1 + 29832)) {
    *(_WORD *)(a1 + 29832) = 1280;
  }
}

void glGetActiveUniformBlockName_Exec(uint64_t a1, unsigned int a2, unsigned int a3, int a4)
{
  __int16 v8 = *(os_unfair_lock_s **)(a1 + 19296);
  uint64_t v9 = (uint64_t)&v8[42];
  os_unfair_lock_lock(v8 + 81);
  __int16 v10 = gleLookupHashObject(v9, a2);
  if (a4 < 0 || !v10) {
    goto LABEL_8;
  }
  if (*((_DWORD *)v10 + 6) != 8)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    double v12 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v13 = 1282;
    goto LABEL_12;
  }
  if (*((_DWORD *)v10 + 945) <= a3)
  {
LABEL_8:
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    double v12 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v13 = 1281;
LABEL_12:
    *double v12 = v13;
    return;
  }
  ShGetActiveUniformBlockName();
  uint64_t v11 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);

  os_unfair_lock_unlock(v11);
}

void glUniformBlockBinding_Exec(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v8 = a1 + 28652;
  uint64_t v9 = *(os_unfair_lock_s **)(a1 + 19296);
  uint64_t v10 = (uint64_t)&v9[42];
  os_unfair_lock_lock(v9 + 81);
  uint64_t v11 = gleLookupHashObject(v10, a2);
  if (!v11 || *(unsigned __int8 *)(*(void *)(a1 + 29480) + 506) <= a4) {
    goto LABEL_13;
  }
  if (*((_DWORD *)v11 + 6) != 8)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (*(_WORD *)(v8 + 1180)) {
      return;
    }
    __int16 v16 = 1282;
    goto LABEL_17;
  }
  if (*((_DWORD *)v11 + 945) <= a3)
  {
LABEL_13:
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (*(_WORD *)(v8 + 1180)) {
      return;
    }
    __int16 v16 = 1281;
LABEL_17:
    *(_WORD *)(v8 + 1180) = v16;
    return;
  }
  *((_DWORD *)v11 + a3 + 946) = a4;
  uint64_t v12 = *(unsigned __int8 *)(v8 + 3844);
  if (*(unsigned char *)(v8 + 3844))
  {
    __int16 v13 = v11 + 510;
    int v14 = v11;
    do
    {
      *v13 |= 8u;
      v13 += 18;
      *((_DWORD *)v14 + 206) |= 8u;
      *((_DWORD *)v14 + 382) |= 8u;
      *((_DWORD *)v14 + 558) |= 8u;
      *((_DWORD *)v14 + 734) |= 8u;
      *((_DWORD *)v14 + 910) |= 8u;
      int v14 = (uint64_t *)((char *)v14 + 4);
      --v12;
    }
    while (v12);
  }
  if (*(uint64_t **)(a1 + 24768) == v11)
  {
    *(_DWORD *)(a1 + 1532) |= 0x30000000u;
    *(_DWORD *)uint64_t v8 = 0;
    *(_DWORD *)(a1 + 1548) |= 0x200u;
  }
  uint64_t v15 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);

  os_unfair_lock_unlock(v15);
}

uint64_t glGetUniformLocationARB_ExecThread(uint64_t a1, unsigned int a2)
{
  (*(void (**)(void))(a1 + 27752))();

  return glGetUniformLocationARB_Exec(a1, a2);
}

void glGetActiveUniformARB_ExecThread(uint64_t a1, unsigned int a2, unsigned int a3, int a4)
{
  (*(void (**)(void))(a1 + 27752))();

  glGetActiveUniformARB_Exec(a1, a2, a3, a4);
}

void glGetUniformfvARB_ExecThread(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  (*(void (**)(void))(a1 + 27752))();

  getUniform(a1, a2, a3, 5126, a4);
}

void glGetUniformivARB_ExecThread(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  (*(void (**)(void))(a1 + 27752))();

  getUniform(a1, a2, a3, 5124, a4);
}

void glGetUniformuivEXT_ExecThread(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  (*(void (**)(void))(a1 + 27752))();

  getUniform(a1, a2, a3, 5125, a4);
}

void glGetUniformIndices_ExecThread(uint64_t a1, unsigned int a2, int a3, uint64_t a4, _DWORD *a5)
{
  (*(void (**)(void))(a1 + 27752))();

  glGetUniformIndices_Exec(a1, a2, a3, a4, a5);
}

void glGetActiveUniformsiv_ExecThread(uint64_t a1, unsigned int a2, int a3, unsigned int *a4, int a5, uint64_t a6)
{
  (*(void (**)(void))(a1 + 27752))();

  glGetActiveUniformsiv_Exec(a1, a2, a3, a4, a5, a6);
}

uint64_t glGetUniformBlockIndex_ExecThread(uint64_t a1, unsigned int a2)
{
  (*(void (**)(void))(a1 + 27752))();

  return glGetUniformBlockIndex_Exec(a1, a2);
}

void glGetActiveUniformBlockiv_ExecThread(uint64_t a1, unsigned int a2, unsigned int a3, int a4, _DWORD *a5)
{
  (*(void (**)(void))(a1 + 27752))();

  glGetActiveUniformBlockiv_Exec(a1, a2, a3, a4, a5);
}

void glGetActiveUniformBlockName_ExecThread(uint64_t a1, unsigned int a2, unsigned int a3, int a4)
{
  (*(void (**)(void))(a1 + 27752))();

  glGetActiveUniformBlockName_Exec(a1, a2, a3, a4);
}

_DWORD *glUniformBlockBinding_PackThread(uint64_t a1, int a2, int a3, int a4)
{
  float32x2_t result = gleAddCommand(a1, (uint64_t)glUniformBlockBinding_UnpackThread, 12);
  *float32x2_t result = a2;
  result[1] = a3;
  result[2] = a4;
  return result;
}

uint64_t glUniformBlockBinding_UnpackThread(uint64_t a1, unsigned int *a2)
{
  return 12;
}

void setProgramUniformInner(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, void *a7)
{
  uint64_t v265 = 0;
  if (a3 == -1 || !a4) {
    return;
  }
  uint64_t v8 = a1;
  uint64_t v9 = (__int16 *)(a1 + 29832);
  if (a4 < 0 || a6 && *(unsigned char *)(a1 + 32501) == 3)
  {
    if (*v9) {
      return;
    }
    __int16 v179 = 1281;
LABEL_327:
    *uint64_t v9 = v179;
    return;
  }
  char v264 = 0;
  uint64_t v253 = a1 + 32493;
  uint64_t v259 = a1 + 28652;
  uint64_t v263 = 0;
  long long v262 = 0uLL;
  uint64_t v261 = 0;
  long long v260 = 0uLL;
  getTypeInfo(a5, (int *)&v260);
  if (a3 >= *(_DWORD *)(a2 + 3720))
  {
    uint64_t v249 = v8;
    int BindableUniformTypeInfo = ShGetBindableUniformTypeInfo();
    BOOL v23 = HIDWORD(v265) == a5 || BindableUniformTypeInfo == 0;
    char v24 = !v23;
    if (v23)
    {
      long long v262 = v260;
      uint64_t v263 = v261;
      if (!BindableUniformTypeInfo)
      {
LABEL_325:
        if (*v9) {
          return;
        }
        __int16 v179 = 1282;
        goto LABEL_327;
      }
    }
    else
    {
      getTypeInfo(SHIDWORD(v265), (int *)&v262);
    }
    unsigned int v25 = DWORD2(v262);
    if (DWORD2(v262) == DWORD2(v260))
    {
      uint64_t v26 = DWORD1(v262);
      if (DWORD1(v262) == DWORD1(v260))
      {
        uint64_t v27 = v262;
        if (v262 == 35670 || v262 == v260)
        {
          int v248 = v260;
          if (ShGetActiveBindableUniformBufferIndexOffsetFromLocation()
            && (uint64_t v28 = **(void **)(a2 + 3664)) != 0)
          {
            if ((int)v265 > a4) {
              LODWORD(v265) = a4;
            }
            if (*(void *)(v28 + 152) >= (unint64_t)(16 * **(int **)(a2 + 3672)))
            {
              if (*(void *)(v28 + 192))
              {
                gleSynchronizeBufferOnCurrentDevices(v249, v28 + 40);
                uint64_t v29 = (_DWORD *)v259;
              }
              else
              {
                uint64_t v29 = (_DWORD *)v259;
                if (*(unsigned char *)(v28 + 165))
                {
                  (*(void (**)(void, uint64_t, void, void))(*(void *)(v249 + 29448) + 272))(*(void *)(v249 + 29016), 3, 0, *(void *)(v28 + 40 + 8 * *(unsigned __int8 *)(v253 + 6)));
                  gfxWaitBufferOnDevices();
                }
              }
              *(unsigned char *)(v28 + 167) = 1;
              uint64_t v34 = *(unsigned __int8 *)(v253 + 3);
              if (!*(unsigned char *)(v253 + 3)) {
                goto LABEL_59;
              }
              if (v34 == 1)
              {
                uint64_t v35 = 0;
              }
              else
              {
                uint64_t v35 = v34 & 0xFE;
                char v36 = (int *)(v28 + 312);
                uint64_t v37 = v35;
                do
                {
                  int v38 = *v36 | 4;
                  *(v36 - 2) |= 4u;
                  *char v36 = v38;
                  v36 += 4;
                  v37 -= 2;
                }
                while (v37);
                if (v35 == v34) {
                  goto LABEL_59;
                }
              }
              uint64_t v39 = v34 - v35;
              unsigned int v40 = (_DWORD *)(v28 + 8 * v35 + 304);
              do
              {
                *v40 |= 4u;
                v40 += 2;
                --v39;
              }
              while (v39);
LABEL_59:
              gleDirtyBufferObjectCurrentBindPoints(v249, v28 + 40);
              BOOL v42 = *(char **)(v28 + 136);
              int v43 = v263;
              if ((v24 & 1) != 0 || a6 || v26 != v263)
              {
                convertValues(v27, (uint64_t)v42, v263, v248, (uint64_t)a7, v26, v25, v26, v41, v25, a6, v265);
              }
              else
              {
                memcpy(v42, a7, v26 * v25 * v265 * HIDWORD(v263));
                int v43 = v26;
              }
              if ((*(_WORD *)v253 & 0x1000) == 0) {
                goto LABEL_194;
              }
              int v44 = v265;
              if (!v265 || !v25 || !v26) {
                goto LABEL_194;
              }
              if (v27 != 5126)
              {
                if (v27 == 5130)
                {
                  int v45 = v43 * v25;
                  if (v26 < 6)
                  {
                    int v46 = 0;
                    int v47 = 0;
                    do
                    {
                      int v48 = v46;
                      unsigned int v49 = v25;
                      do
                      {
                        *(void *)&v42[8 * v48] = *(void *)&v42[8 * v48];
                        if (v26 != 1)
                        {
                          *(void *)&v42[8 * (v48 + 1)] = *(void *)&v42[8 * (v48 + 1)];
                          if (v26 != 2)
                          {
                            *(void *)&v42[8 * (v48 + 2)] = *(void *)&v42[8 * (v48 + 2)];
                            if (v26 != 3)
                            {
                              *(void *)&v42[8 * (v48 + 3)] = *(void *)&v42[8 * (v48 + 3)];
                              if (v26 != 4) {
                                *(void *)&v42[8 * (v48 + 4)] = *(void *)&v42[8 * (v48 + 4)];
                              }
                            }
                          }
                        }
                        v48 += v43;
                        --v49;
                      }
                      while (v49);
                      ++v47;
                      v46 += v45;
                    }
                    while (v47 != v44);
                    goto LABEL_194;
                  }
                  int v107 = 0;
                  int v108 = 0;
                  while (1)
                  {
                    int v109 = 0;
                    if (!((unint64_t)(v26 - 1) >> 32)) {
                      break;
                    }
                    int v110 = v107;
                    do
                    {
                      int v111 = v110;
                      uint64_t v112 = v26;
                      do
                      {
                        *(void *)&v42[8 * v111] = *(void *)&v42[8 * v111];
                        ++v111;
                        --v112;
                      }
                      while (v112);
                      ++v109;
                      v110 += v43;
                    }
                    while (v109 != v25);
LABEL_159:
                    ++v108;
                    v107 += v45;
                    if (v108 == v44) {
                      goto LABEL_194;
                    }
                  }
                  int v113 = v107;
                  while (1)
                  {
                    if (__CFADD__(v45 * v108 + v43 * v109, v26 - 1))
                    {
                      uint64_t v114 = 0;
                    }
                    else
                    {
                      int v115 = v113;
                      uint64_t v116 = v26 & 0xFFFFFFFC;
                      do
                      {
                        uint64_t v117 = (int8x16_t *)&v42[8 * v115];
                        int8x16_t v118 = vandq_s8(v117[1], vorrq_s8((int8x16_t)vcltzq_f64((float64x2_t)v117[1]), (int8x16_t)vcgezq_f64((float64x2_t)v117[1])));
                        int8x16_t *v117 = vandq_s8(*v117, vorrq_s8((int8x16_t)vcltzq_f64(*(float64x2_t *)v117), (int8x16_t)vcgezq_f64(*(float64x2_t *)v117)));
                        v117[1] = v118;
                        v115 += 4;
                        v116 -= 4;
                      }
                      while (v116);
                      uint64_t v114 = v26 & 0xFFFFFFFC;
                      if (v114 == v26) {
                        goto LABEL_167;
                      }
                    }
                    uint64_t v119 = v26 - v114;
                    int v120 = v113 + v114;
                    do
                    {
                      *(void *)&v42[8 * v120] = *(void *)&v42[8 * v120];
                      ++v120;
                      --v119;
                    }
                    while (v119);
LABEL_167:
                    ++v109;
                    v113 += v43;
                    if (v109 == v25) {
                      goto LABEL_159;
                    }
                  }
                }
LABEL_194:
                uint64_t v135 = *(unsigned __int8 *)(v253 + 3);
                if (*(unsigned char *)(v253 + 3))
                {
                  v136 = (_DWORD *)(a2 + 4040);
                  do
                  {
                    *v136 |= 8u;
                    v136 += 18;
                    *(_DWORD *)(a2 + 784) |= 8u;
                    *(_DWORD *)(a2 + 1488) |= 8u;
                    *(_DWORD *)(a2 + 2192) |= 8u;
                    *(_DWORD *)(a2 + 2896) |= 8u;
                    *(_DWORD *)(a2 + 3600) |= 8u;
                    a2 += 4;
                    --v135;
                  }
                  while (v135);
                }
LABEL_197:
                *(_DWORD *)(v249 + 1532) |= 0x10000000u;
                _DWORD *v29 = 0;
                *(_DWORD *)(v249 + 1540) |= 0x10000000u;
                return;
              }
              int v50 = v43 * v25;
              if (v26 < 8)
              {
                int v51 = 0;
                int v52 = 0;
                do
                {
                  int v53 = v51;
                  unsigned int v54 = v25;
                  do
                  {
                    *(_DWORD *)&v42[4 * v53] = *(_DWORD *)&v42[4 * v53];
                    if (v26 != 1)
                    {
                      *(_DWORD *)&v42[4 * (v53 + 1)] = *(_DWORD *)&v42[4 * (v53 + 1)];
                      if (v26 != 2)
                      {
                        *(_DWORD *)&v42[4 * (v53 + 2)] = *(_DWORD *)&v42[4 * (v53 + 2)];
                        if (v26 != 3)
                        {
                          *(_DWORD *)&v42[4 * (v53 + 3)] = *(_DWORD *)&v42[4 * (v53 + 3)];
                          if (v26 != 4)
                          {
                            *(_DWORD *)&v42[4 * (v53 + 4)] = *(_DWORD *)&v42[4 * (v53 + 4)];
                            if (v26 != 5)
                            {
                              *(_DWORD *)&v42[4 * (v53 + 5)] = *(_DWORD *)&v42[4 * (v53 + 5)];
                              if (v26 != 6) {
                                *(_DWORD *)&v42[4 * (v53 + 6)] = *(_DWORD *)&v42[4 * (v53 + 6)];
                              }
                            }
                          }
                        }
                      }
                    }
                    v53 += v43;
                    --v54;
                  }
                  while (v54);
                  ++v52;
                  v51 += v50;
                }
                while (v52 != v44);
                goto LABEL_194;
              }
              int v121 = 0;
              int v122 = 0;
              while (1)
              {
                int v123 = 0;
                if (!((unint64_t)(v26 - 1) >> 32)) {
                  break;
                }
                int v124 = v121;
                do
                {
                  int v125 = v124;
                  uint64_t v126 = v26;
                  do
                  {
                    *(_DWORD *)&v42[4 * v125] = *(_DWORD *)&v42[4 * v125];
                    ++v125;
                    --v126;
                  }
                  while (v126);
                  ++v123;
                  v124 += v43;
                }
                while (v123 != v25);
LABEL_177:
                ++v122;
                v121 += v50;
                if (v122 == v44) {
                  goto LABEL_194;
                }
              }
              int v127 = v121;
              while (1)
              {
                if (__CFADD__(v50 * v122 + v43 * v123, v26 - 1))
                {
                  uint64_t v128 = 0;
                }
                else
                {
                  int v129 = v127;
                  uint64_t v130 = v26 & 0xFFFFFFF8;
                  do
                  {
                    long long v131 = (int8x16_t *)&v42[4 * v129];
                    int8x16_t v132 = vandq_s8(v131[1], vorrq_s8((int8x16_t)vcltzq_f32((float32x4_t)v131[1]), (int8x16_t)vcgezq_f32((float32x4_t)v131[1])));
                    int8x16_t *v131 = vandq_s8(*v131, vorrq_s8((int8x16_t)vcltzq_f32(*(float32x4_t *)v131), (int8x16_t)vcgezq_f32(*(float32x4_t *)v131)));
                    v131[1] = v132;
                    v129 += 8;
                    v130 -= 8;
                  }
                  while (v130);
                  uint64_t v128 = v26 & 0xFFFFFFF8;
                  if (v128 == v26) {
                    goto LABEL_185;
                  }
                }
                uint64_t v133 = v26 - v128;
                int v134 = v127 + v128;
                do
                {
                  *(_DWORD *)&v42[4 * v134] = *(_DWORD *)&v42[4 * v134];
                  ++v134;
                  --v133;
                }
                while (v133);
LABEL_185:
                ++v123;
                v127 += v43;
                if (v123 == v25) {
                  goto LABEL_177;
                }
              }
            }
          }
          else
          {
            os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(v249 + 19296) + 324));
          }
        }
      }
    }
    goto LABEL_325;
  }
  uint64_t v14 = v259;
  if (a3 < 0 || *(_DWORD *)(a2 + 3944) <= a3) {
    goto LABEL_47;
  }
  uint64_t v15 = *(void *)(a2 + 3952) + 8 * a3;
  int v16 = *(_DWORD *)v15;
  LODWORD(v265) = *(_DWORD *)v15;
  uint64_t v17 = *(unsigned __int16 *)(v15 + 4);
  HIDWORD(v265) = v17;
  char v264 = *(unsigned char *)(v15 + 6);
  char v18 = v264;
  char v19 = *(unsigned char *)(v15 + 7);
  char v247 = v264;
  if (v17 == a5)
  {
    double v20 = *(double *)&v260;
    long long v262 = v260;
    uint64_t v263 = v261;
    unsigned int v21 = DWORD2(v260);
  }
  else
  {
    int v30 = v16;
    uint64_t v31 = v17;
    getTypeInfo(v17, (int *)&v262);
    uint64_t v17 = v31;
    int v16 = v30;
    uint64_t v14 = v259;
    char v18 = v247;
    unsigned int v21 = DWORD2(v262);
    if (DWORD2(v262) != DWORD2(v260)) {
      goto LABEL_47;
    }
  }
  if ((uint64_t v241 = DWORD1(v262), DWORD1(v262) != DWORD1(v260))
    || (int v224 = v260, v225 = v262, v262 != 35670) && v262 != v260
    || ((v19 & 1) == 0 ? (BOOL v32 = a4 > 1) : (BOOL v32 = 0), v32 || (v19 & 2) == 0))
  {
LABEL_47:
    if (!*(_WORD *)(v14 + 1180)) {
      *(_WORD *)(v14 + 1180) = 1282;
    }
    return;
  }
  if (v16 > a4)
  {
    LODWORD(v265) = a4;
    int v16 = a4;
  }
  uint64_t v33 = (char *)(*(void *)(a2 + 3712) + 16 * a3);
  unsigned int v246 = v21;
  if ((int)v17 > 36875)
  {
    if ((v17 - 37128) >= 6 && (v17 - 36876) > 3)
    {
LABEL_259:
      if (v17 == a5 && !a6 && DWORD1(v262) == v263)
      {
        memcpy(v33, a7, DWORD1(v262) * v21 * v16 * HIDWORD(v263));
        int v180 = v241;
        unsigned int v181 = v225;
      }
      else
      {
        char v216 = a6;
        unsigned int v181 = v262;
        int v180 = v263;
        convertValues(v262, (uint64_t)v33, v263, v260, (uint64_t)a7, SDWORD1(v262), v21, DWORD1(v262), v20, v21, v216, v16);
      }
      char v137 = 1;
      char v138 = v247;
      if ((*(_WORD *)v253 & 0x1000) != 0)
      {
        uint64_t v139 = v246;
        if (v16 && v246 && v241)
        {
          if (v181 != 5126)
          {
            if (v181 == 5130)
            {
              int v182 = 0;
              int v183 = 0;
              int v184 = v180 * v246;
              while (1)
              {
                if (v241 <= 5)
                {
                  int v185 = v182;
                  unsigned int v186 = v246;
                  do
                  {
                    *(void *)&v33[8 * v185] = *(void *)&v33[8 * v185];
                    if (v241 != 1)
                    {
                      *(void *)&v33[8 * (v185 + 1)] = *(void *)&v33[8 * (v185 + 1)];
                      if (v241 != 2)
                      {
                        *(void *)&v33[8 * (v185 + 2)] = *(void *)&v33[8 * (v185 + 2)];
                        if (v241 != 3)
                        {
                          *(void *)&v33[8 * (v185 + 3)] = *(void *)&v33[8 * (v185 + 3)];
                          if (v241 != 4) {
                            *(void *)&v33[8 * (v185 + 4)] = *(void *)&v33[8 * (v185 + 4)];
                          }
                        }
                      }
                    }
                    v185 += v180;
                    --v186;
                  }
                  while (v186);
                  goto LABEL_271;
                }
                int v187 = 0;
                if (!((unint64_t)(v241 - 1) >> 32)) {
                  break;
                }
                int v188 = v182;
                do
                {
                  int v189 = v188;
                  uint64_t v190 = v241;
                  do
                  {
                    *(void *)&v33[8 * v189] = *(void *)&v33[8 * v189];
                    ++v189;
                    --v190;
                  }
                  while (v190);
                  ++v187;
                  v188 += v180;
                }
                while (v187 != v246);
LABEL_271:
                ++v183;
                v182 += v184;
                char v137 = 1;
                if (v183 == v16) {
                  goto LABEL_206;
                }
              }
              int v191 = v182;
              while (1)
              {
                if (__CFADD__(v184 * v183 + v180 * v187, v241 - 1))
                {
                  uint64_t v192 = 0;
                }
                else
                {
                  int v193 = v191;
                  uint64_t v194 = v241 & 0xFFFFFFFC;
                  do
                  {
                    v195 = (int8x16_t *)&v33[8 * v193];
                    int8x16_t v196 = vandq_s8(v195[1], vorrq_s8((int8x16_t)vcltzq_f64((float64x2_t)v195[1]), (int8x16_t)vcgezq_f64((float64x2_t)v195[1])));
                    int8x16_t *v195 = vandq_s8(*v195, vorrq_s8((int8x16_t)vcltzq_f64(*(float64x2_t *)v195), (int8x16_t)vcgezq_f64(*(float64x2_t *)v195)));
                    v195[1] = v196;
                    v193 += 4;
                    v194 -= 4;
                  }
                  while (v194);
                  uint64_t v192 = v241 & 0xFFFFFFFC;
                  if (v192 == v241) {
                    goto LABEL_287;
                  }
                }
                uint64_t v197 = v241 - v192;
                int v198 = v191 + v192;
                do
                {
                  *(void *)&v33[8 * v198] = *(void *)&v33[8 * v198];
                  ++v198;
                  --v197;
                }
                while (v197);
LABEL_287:
                ++v187;
                v191 += v180;
                if (v187 == v246) {
                  goto LABEL_271;
                }
              }
            }
            goto LABEL_206;
          }
          int v199 = 0;
          int v200 = 0;
          int v201 = v180 * v246;
          while (1)
          {
            if (v241 <= 7)
            {
              int v202 = v199;
              unsigned int v203 = v246;
              do
              {
                *(_DWORD *)&v33[4 * v202] = *(_DWORD *)&v33[4 * v202];
                if (v241 != 1)
                {
                  *(_DWORD *)&v33[4 * (v202 + 1)] = *(_DWORD *)&v33[4 * (v202 + 1)];
                  if (v241 != 2)
                  {
                    *(_DWORD *)&v33[4 * (v202 + 2)] = *(_DWORD *)&v33[4 * (v202 + 2)];
                    if (v241 != 3)
                    {
                      *(_DWORD *)&v33[4 * (v202 + 3)] = *(_DWORD *)&v33[4 * (v202 + 3)];
                      if (v241 != 4)
                      {
                        *(_DWORD *)&v33[4 * (v202 + 4)] = *(_DWORD *)&v33[4 * (v202 + 4)];
                        if (v241 != 5)
                        {
                          *(_DWORD *)&v33[4 * (v202 + 5)] = *(_DWORD *)&v33[4 * (v202 + 5)];
                          if (v241 != 6) {
                            *(_DWORD *)&v33[4 * (v202 + 6)] = *(_DWORD *)&v33[4 * (v202 + 6)];
                          }
                        }
                      }
                    }
                  }
                }
                v202 += v180;
                --v203;
              }
              while (v203);
              goto LABEL_297;
            }
            int v204 = 0;
            if (!((unint64_t)(v241 - 1) >> 32)) {
              break;
            }
            int v205 = v199;
            do
            {
              int v206 = v205;
              uint64_t v207 = v241;
              do
              {
                *(_DWORD *)&v33[4 * v206] = *(_DWORD *)&v33[4 * v206];
                ++v206;
                --v207;
              }
              while (v207);
              ++v204;
              v205 += v180;
            }
            while (v204 != v246);
LABEL_297:
            ++v200;
            v199 += v201;
            char v137 = 1;
            if (v200 == v16) {
              goto LABEL_206;
            }
          }
          int v208 = v199;
          while (1)
          {
            if (__CFADD__(v201 * v200 + v180 * v204, v241 - 1))
            {
              uint64_t v209 = 0;
            }
            else
            {
              int v210 = v208;
              uint64_t v211 = v241 & 0xFFFFFFF8;
              do
              {
                v212 = (int8x16_t *)&v33[4 * v210];
                int8x16_t v213 = vandq_s8(v212[1], vorrq_s8((int8x16_t)vcltzq_f32((float32x4_t)v212[1]), (int8x16_t)vcgezq_f32((float32x4_t)v212[1])));
                int8x16_t *v212 = vandq_s8(*v212, vorrq_s8((int8x16_t)vcltzq_f32(*(float32x4_t *)v212), (int8x16_t)vcgezq_f32(*(float32x4_t *)v212)));
                v212[1] = v213;
                v210 += 8;
                v211 -= 8;
              }
              while (v211);
              uint64_t v209 = v241 & 0xFFFFFFF8;
              if (v209 == v241) {
                goto LABEL_315;
              }
            }
            uint64_t v214 = v241 - v209;
            int v215 = v208 + v209;
            do
            {
              *(_DWORD *)&v33[4 * v215] = *(_DWORD *)&v33[4 * v215];
              ++v215;
              --v214;
            }
            while (v214);
LABEL_315:
            ++v204;
            v208 += v180;
            if (v204 == v246) {
              goto LABEL_297;
            }
          }
        }
LABEL_206:
        char v240 = v137;
        uint64_t v249 = v8;
        LODWORD(v140) = *(unsigned __int8 *)(v14 + 3844);
        if (*(unsigned char *)(v14 + 3844))
        {
          unint64_t v141 = 0;
          int v142 = a3 + v16 * v139 * HIDWORD(v262);
          int v143 = ((v142 - 1) >> 5) + ~(a3 >> 5);
          unsigned int __srca = 0xFFFFFFFF >> -(char)(a3 + v16 * v139 * BYTE12(v262));
          uint64_t v144 = (uint64_t)a3 >> 5;
          v145 = (int *)(a2 + 4040);
          v146 = (_DWORD *)a2;
          v147 = (int *)(a2 + 4040);
          while (1)
          {
            int *v147 = *v145 | 2;
            v147 += 18;
            if (v138)
            {
              v146[196] |= 2u;
              if ((v138 & 2) == 0)
              {
LABEL_211:
                if ((v138 & 4) == 0) {
                  goto LABEL_212;
                }
                goto LABEL_224;
              }
            }
            else if ((v138 & 2) == 0)
            {
              goto LABEL_211;
            }
            v146[372] |= 2u;
            if ((v138 & 4) == 0)
            {
LABEL_212:
              if ((v138 & 8) != 0) {
                goto LABEL_225;
              }
              goto LABEL_213;
            }
LABEL_224:
            v146[548] |= 2u;
            if ((v138 & 8) != 0)
            {
LABEL_225:
              v146[724] |= 2u;
              if ((v138 & 0x10) == 0) {
                goto LABEL_215;
              }
LABEL_214:
              v146[900] |= 2u;
              goto LABEL_215;
            }
LABEL_213:
            if ((v138 & 0x10) != 0) {
              goto LABEL_214;
            }
LABEL_215:
            int v148 = *(v145 - 2);
            int v149 = *(v145 - 1);
            if (v148 >= a3) {
              int v148 = a3;
            }
            if (v149 <= v142) {
              int v149 = v142;
            }
            *(v145 - 2) = v148;
            *(v145 - 1) = v149;
            uint64_t v150 = *((void *)v145 - 2);
            if (v143 < 0)
            {
              *(_DWORD *)(v150 + 4 * v144) |= __srca & (-1 << a3);
              ++v141;
              ++v146;
              v145 = v147;
              if (v141 >= v140) {
                break;
              }
            }
            else
            {
              memset((void *)(v150 + 4 * (v144 + 1)), 255, (4 * v143));
              char v138 = v247;
              unint64_t v140 = *((void *)v145 - 2);
              *(_DWORD *)(v140 + 4 * v144) |= -1 << a3;
              *(_DWORD *)(v140 + 4 * ((uint64_t)(v142 - 1) >> 5)) |= __srca;
              LODWORD(v140) = *(unsigned __int8 *)(v259 + 3844);
              ++v141;
              ++v146;
              v145 = v147;
              if (v141 >= *(unsigned __int8 *)(v259 + 3844)) {
                break;
              }
            }
          }
        }
        uint64_t v29 = (_DWORD *)v259;
        if ((v240 & 1) == 0)
        {
          v151 = *(unsigned int **)(a2 + 3960);
          if (v151)
          {
            uint64_t v152 = *v151;
            if ((int)v152 >= 1)
            {
              uint64_t v153 = *(void *)(a2 + 3712);
              v154 = *(_DWORD **)(a2 + 3728);
              v155 = (int *)(v151 + 1);
              do
              {
                uint64_t v156 = *v155++;
                *v154++ = *(_DWORD *)(v153 + 16 * v156);
                --v152;
              }
              while (v152);
            }
          }
          uint64_t v157 = v249;
          if (v138)
          {
            *(_DWORD *)(v249 + 1548) |= 0x100000u;
            *(_DWORD *)uint64_t v259 = 0;
            *(_DWORD *)(v249 + 1532) |= 0x40000u;
            if (v140)
            {
              unint64_t v158 = 0;
              v159 = (void *)(v249 + 32520);
              v160 = (uint64_t *)(a2 + 3976);
              do
              {
                *(_DWORD *)(a2 + 784 + 4 * v158) |= 4u;
                uint64_t v161 = *v160;
                v160 += 9;
                (*(void (**)(void, uint64_t, uint64_t, uint64_t))(v159[205] + 1640))(*v159, v161, 4, v139);
                ++v158;
                unint64_t v140 = *(unsigned __int8 *)(v259 + 3844);
                v159 += 209;
              }
              while (v158 < v140);
              uint64_t v157 = v249;
              char v138 = v247;
            }
          }
          if ((v138 & 2) != 0)
          {
            *(_DWORD *)(v157 + 1548) |= 0x200000u;
            *(_DWORD *)uint64_t v259 = 0;
            *(_DWORD *)(v157 + 1532) |= 0x80000u;
            if (v140)
            {
              unint64_t v162 = 0;
              v163 = (uint64_t *)(a2 + 3984);
              v164 = (void *)(v157 + 32520);
              do
              {
                *(_DWORD *)(a2 + 1488 + 4 * v162) |= 4u;
                uint64_t v165 = *v163;
                v163 += 9;
                (*(void (**)(void, uint64_t, uint64_t, uint64_t))(v164[205] + 1640))(*v164, v165, 4, v139);
                ++v162;
                unint64_t v140 = *(unsigned __int8 *)(v259 + 3844);
                v164 += 209;
              }
              while (v162 < v140);
              uint64_t v157 = v249;
              char v138 = v247;
            }
          }
          if ((v138 & 4) != 0)
          {
            *(_DWORD *)(v157 + 1548) |= 0x400000u;
            *(_DWORD *)uint64_t v259 = 0;
            *(_DWORD *)(v157 + 1532) |= 0x100000u;
            if (v140)
            {
              unint64_t v166 = 0;
              v167 = (uint64_t *)(a2 + 3992);
              v168 = (void *)(v157 + 32520);
              do
              {
                *(_DWORD *)(a2 + 2192 + 4 * v166) |= 4u;
                uint64_t v169 = *v167;
                v167 += 9;
                (*(void (**)(void, uint64_t, uint64_t, uint64_t))(v168[205] + 1640))(*v168, v169, 4, v139);
                ++v166;
                unint64_t v140 = *(unsigned __int8 *)(v259 + 3844);
                v168 += 209;
              }
              while (v166 < v140);
              uint64_t v157 = v249;
              char v138 = v247;
            }
          }
          if ((v138 & 8) != 0)
          {
            *(_DWORD *)(v157 + 1548) |= 0x800000u;
            *(_DWORD *)uint64_t v259 = 0;
            *(_DWORD *)(v157 + 1532) |= 0x200000u;
            if (v140)
            {
              unint64_t v170 = 0;
              v171 = (uint64_t *)(a2 + 4000);
              v172 = (void *)(v157 + 32520);
              do
              {
                *(_DWORD *)(a2 + 2896 + 4 * v170) |= 4u;
                uint64_t v173 = *v171;
                v171 += 9;
                (*(void (**)(void, uint64_t, uint64_t, uint64_t))(v172[205] + 1640))(*v172, v173, 4, v139);
                ++v170;
                unint64_t v140 = *(unsigned __int8 *)(v259 + 3844);
                v172 += 209;
              }
              while (v170 < v140);
              char v138 = v247;
            }
          }
          if ((v138 & 0x10) != 0)
          {
            *(_DWORD *)(v249 + 1548) |= 0x1000000u;
            *(_DWORD *)uint64_t v259 = 0;
            *(_DWORD *)(v249 + 1532) |= 0x400000u;
            if (v140)
            {
              unint64_t v174 = 0;
              v175 = (uint64_t *)(a2 + 4008);
              v176 = (void *)(v249 + 32520);
              uint64_t v177 = a2 + 3600;
              do
              {
                *(_DWORD *)(v177 + 4 * v174) |= 4u;
                uint64_t v178 = *v175;
                v175 += 9;
                (*(void (**)(void, uint64_t, uint64_t, uint64_t))(v176[205] + 1640))(*v176, v178, 4, v139);
                ++v174;
                v176 += 209;
              }
              while (v174 < *(unsigned __int8 *)(v259 + 3844));
            }
          }
        }
        goto LABEL_197;
      }
LABEL_205:
      uint64_t v139 = v246;
      goto LABEL_206;
    }
  }
  else if (((v17 - 36288) > 0x18 || ((1 << (v17 + 64)) & 0x1FFFE3F) == 0) {
         && (v17 - 35677) >= 8)
  }
  {
    goto LABEL_259;
  }
  if (v16 < 1)
  {
    LODWORD(v56) = 0;
    uint64_t v57 = a7;
  }
  else
  {
    int v55 = 0;
    uint64_t v56 = 0;
    uint64_t v57 = a7;
    while (*((_DWORD *)a7 + v56) == *(_DWORD *)&v33[4 * v55])
    {
      ++v56;
      v55 += v263;
      if (v16 == v56) {
        return;
      }
    }
  }
  if (v56 != v16)
  {
    uint64_t v58 = *(void *)(v8 + 24776);
    if (v58) {
      *(_DWORD *)(v58 + 104) |= 1u;
    }
    if (*(unsigned char *)(a2 + 3938))
    {
      uint64_t v250 = v8;
      unsigned int v217 = v16;
      if (v16 >= 1)
      {
        int v59 = 0;
        int v60 = v263;
        int v222 = v263;
        int v223 = v18 & 0x1F;
        uint64_t v61 = (unsigned int *)a7;
        uint64_t v62 = v217;
        while (1)
        {
          uint64_t v63 = *(int *)&v33[4 * v59];
          unsigned int v65 = *v61++;
          uint64_t v64 = v65;
          int v66 = v63 + 15;
          if ((int)v63 >= 0) {
            int v66 = *(_DWORD *)&v33[4 * v59];
          }
          if ((v64 & 0x80000000) == 0) {
            break;
          }
          if (v223) {
            goto LABEL_107;
          }
LABEL_108:
          v59 += v60;
          if (!--v62) {
            goto LABEL_152;
          }
        }
        uint64_t v67 = 15 << (4 * (v63 - (v66 & 0xF0u)));
        uint64_t v68 = (uint64_t)v66 >> 4;
        char v69 = 4 * (v64 & 0xF);
        uint64_t v70 = ~(15 << v69);
        uint64_t v71 = v64 >> 4;
        if (v18)
        {
          if (v64 >= *(unsigned __int16 *)(*(void *)(v250 + 29480) + 154)) {
            goto LABEL_107;
          }
          uint64_t v72 = a2 + 4 * v64;
          int v73 = *(_DWORD *)(v72 + 448);
          if (v73 >= 1 && v17 != *(unsigned __int16 *)(a2 + 2 * v64 + 576)) {
            goto LABEL_107;
          }
          v254 = v61;
          *(_DWORD *)(v72 + 448) = v73 + 1;
          *(_WORD *)(a2 + 2 * v64 + 576) = v17;
          if ((int)v63 <= 31)
          {
            uint64_t v74 = a2 + 4 * v63;
            int v75 = *(_DWORD *)(v74 + 448) - 1;
            *(_DWORD *)(v74 + 448) = v75;
            if (!v75) {
              *(void *)(a2 + 8 * v68 + 712) |= v67;
            }
          }
          uint64_t v218 = a2 + 8 * v71;
          *(void *)(v218 + 712) &= v70;
          uint64_t v76 = v17;
          uint64_t v229 = v68;
          uint64_t v236 = v67;
          unsigned int IndexForGLSLSamplerType = gleGetIndexForGLSLSamplerType(v17);
          uint64_t v70 = ~(15 << (4 * (v64 & 0xFu)));
          uint64_t v67 = v236;
          uint64_t v78 = IndexForGLSLSamplerType;
          uint64_t v71 = v64 >> 4;
          uint64_t v68 = v229;
          uint64_t v17 = v76;
          char v69 = 4 * (v64 & 0xF);
          *(void *)(v218 + 712) |= v78 << v69;
          char v18 = v247;
          unsigned int v21 = v246;
          int v60 = v222;
          uint64_t v61 = v254;
        }
        if ((v18 & 2) != 0)
        {
          if (v64 >= *(unsigned __int16 *)(*(void *)(v250 + 29480) + 154)) {
            goto LABEL_107;
          }
          uint64_t v79 = a2 + 4 * v64;
          int v80 = *(_DWORD *)(v79 + 1152);
          if (v80 >= 1 && v17 != *(unsigned __int16 *)(a2 + 2 * v64 + 1280)) {
            goto LABEL_107;
          }
          char v242 = v69;
          v255 = v61;
          *(_DWORD *)(v79 + 1152) = v80 + 1;
          *(_WORD *)(a2 + 2 * v64 + 1280) = v17;
          if ((int)v63 <= 31)
          {
            uint64_t v81 = a2 + 4 * v63;
            int v82 = *(_DWORD *)(v81 + 1152) - 1;
            *(_DWORD *)(v81 + 1152) = v82;
            if (!v82) {
              *(void *)(a2 + 8 * v68 + 1416) |= v67;
            }
          }
          uint64_t v219 = a2 + 8 * v71;
          *(void *)(v219 + 1416) &= v70;
          uint64_t v83 = v17;
          uint64_t v230 = v68;
          uint64_t v233 = v70;
          uint64_t v237 = v67;
          uint64_t v226 = v71;
          unsigned int v84 = gleGetIndexForGLSLSamplerType(v17);
          uint64_t v70 = v233;
          uint64_t v67 = v237;
          uint64_t v85 = v84;
          uint64_t v71 = v226;
          uint64_t v68 = v230;
          uint64_t v17 = v83;
          char v69 = v242;
          *(void *)(v219 + 1416) |= v85 << v242;
          char v18 = v247;
          unsigned int v21 = v246;
          int v60 = v222;
          uint64_t v61 = v255;
        }
        if ((v18 & 4) != 0)
        {
          if (v64 >= *(unsigned __int16 *)(*(void *)(v250 + 29480) + 154)) {
            goto LABEL_107;
          }
          uint64_t v86 = a2 + 4 * v64;
          int v87 = *(_DWORD *)(v86 + 1856);
          if (v87 >= 1 && v17 != *(unsigned __int16 *)(a2 + 2 * v64 + 1984)) {
            goto LABEL_107;
          }
          char v243 = v69;
          v256 = v61;
          *(_DWORD *)(v86 + 1856) = v87 + 1;
          *(_WORD *)(a2 + 2 * v64 + 1984) = v17;
          if ((int)v63 <= 31)
          {
            uint64_t v88 = a2 + 4 * v63;
            int v89 = *(_DWORD *)(v88 + 1856) - 1;
            *(_DWORD *)(v88 + 1856) = v89;
            if (!v89) {
              *(void *)(a2 + 8 * v68 + 2120) |= v67;
            }
          }
          uint64_t v220 = a2 + 8 * v71;
          *(void *)(v220 + 2120) &= v70;
          uint64_t v90 = v17;
          uint64_t v231 = v68;
          uint64_t v234 = v70;
          uint64_t v238 = v67;
          uint64_t v227 = v71;
          unsigned int v91 = gleGetIndexForGLSLSamplerType(v17);
          uint64_t v70 = v234;
          uint64_t v67 = v238;
          uint64_t v92 = v91;
          uint64_t v71 = v227;
          uint64_t v68 = v231;
          uint64_t v17 = v90;
          char v69 = v243;
          *(void *)(v220 + 2120) |= v92 << v243;
          char v18 = v247;
          unsigned int v21 = v246;
          int v60 = v222;
          uint64_t v61 = v256;
        }
        if ((v18 & 8) == 0)
        {
LABEL_144:
          if ((v18 & 0x10) == 0) {
            goto LABEL_108;
          }
          if (v64 < *(unsigned __int16 *)(*(void *)(v250 + 29480) + 154))
          {
            uint64_t v100 = a2 + 4 * v64;
            int v101 = *(_DWORD *)(v100 + 3264);
            if (v101 < 1 || v17 == *(unsigned __int16 *)(a2 + 2 * v64 + 3392))
            {
              char v245 = v69;
              v258 = v61;
              *(_DWORD *)(v100 + 3264) = v101 + 1;
              *(_WORD *)(a2 + 2 * v64 + 3392) = v17;
              if ((int)v63 <= 31)
              {
                uint64_t v102 = a2 + 4 * v63;
                int v103 = *(_DWORD *)(v102 + 3264) - 1;
                *(_DWORD *)(v102 + 3264) = v103;
                if (!v103) {
                  *(void *)(a2 + 8 * v68 + 3528) |= v67;
                }
              }
              uint64_t v104 = a2 + 8 * v71;
              *(void *)(v104 + 3528) &= v70;
              uint64_t v105 = v17;
              unsigned int v106 = gleGetIndexForGLSLSamplerType(v17);
              uint64_t v17 = v105;
              *(void *)(v104 + 3528) |= (unint64_t)v106 << v245;
              char v18 = v247;
              unsigned int v21 = v246;
              uint64_t v61 = v258;
              goto LABEL_108;
            }
          }
          goto LABEL_107;
        }
        if (v64 < *(unsigned __int16 *)(*(void *)(v250 + 29480) + 154))
        {
          uint64_t v93 = a2 + 4 * v64;
          int v94 = *(_DWORD *)(v93 + 2560);
          if (v94 < 1 || v17 == *(unsigned __int16 *)(a2 + 2 * v64 + 2688))
          {
            char v244 = v69;
            v257 = v61;
            *(_DWORD *)(v93 + 2560) = v94 + 1;
            *(_WORD *)(a2 + 2 * v64 + 2688) = v17;
            if ((int)v63 <= 31)
            {
              uint64_t v95 = a2 + 4 * v63;
              int v96 = *(_DWORD *)(v95 + 2560) - 1;
              *(_DWORD *)(v95 + 2560) = v96;
              if (!v96) {
                *(void *)(a2 + 8 * v68 + 2824) |= v67;
              }
            }
            uint64_t v221 = a2 + 8 * v71;
            *(void *)(v221 + 2824) &= v70;
            uint64_t v97 = v17;
            uint64_t v232 = v68;
            uint64_t v235 = v70;
            uint64_t v239 = v67;
            uint64_t v228 = v71;
            unsigned int v98 = gleGetIndexForGLSLSamplerType(v17);
            uint64_t v70 = v235;
            uint64_t v67 = v239;
            uint64_t v99 = v98;
            uint64_t v71 = v228;
            uint64_t v68 = v232;
            uint64_t v17 = v97;
            char v69 = v244;
            *(void *)(v221 + 2824) |= v99 << v244;
            char v18 = v247;
            unsigned int v21 = v246;
            int v60 = v222;
            uint64_t v61 = v257;
            goto LABEL_144;
          }
        }
LABEL_107:
        *(unsigned char *)(a2 + 3938) = 0;
        *(_DWORD *)(a2 + 3680) = 0;
        *(_DWORD *)(a2 + 3656) |= 0x20u;
        goto LABEL_108;
      }
LABEL_152:
      if (v17 == a5 && !a6 && v241 == v263)
      {
        int v16 = v217;
        memcpy(v33, a7, v217 * v21 * v241 * HIDWORD(v263));
      }
      else
      {
        int v16 = v217;
        convertValues(v225, (uint64_t)v33, v263, v224, (uint64_t)a7, v241, v21, v241, v20, v21, a6, v217);
      }
      uint64_t v8 = v250;
      uint64_t v14 = v259;
    }
    else
    {
      if (v17 == a5 && !a6 && v241 == v263) {
        memcpy(v33, v57, v16 * v21 * v241 * HIDWORD(v263));
      }
      else {
        convertValues(v225, (uint64_t)v33, v263, v224, (uint64_t)v57, v241, v21, v241, v20, v21, a6, v16);
      }
      gleEvaluateImageUnits(v8, a2);
    }
    char v137 = 0;
    *(_DWORD *)uint64_t v14 = 0;
    *(_DWORD *)(v8 + 1548) |= 0x2000u;
    char v138 = v247;
    goto LABEL_205;
  }
}

uint64_t getTypeInfo(int a1, int *a2)
{
  int v4 = 0;
  if (a1 <= 36287)
  {
    if ((a1 - 35664) <= 0x1A)
    {
      int v5 = 1 << (a1 - 80);
      if ((v5 & 0x7E01C07) != 0)
      {
LABEL_19:
        int v4 = 5126;
        goto LABEL_22;
      }
      if ((v5 & 0x1FE038) == 0)
      {
        int v4 = 35670;
        goto LABEL_22;
      }
      goto LABEL_18;
    }
    switch(a1)
    {
      case 5124:
        goto LABEL_18;
      case 5125:
        goto LABEL_21;
      case 5126:
        goto LABEL_19;
      case 5130:
        goto LABEL_20;
      default:
        break;
    }
  }
  else
  {
    if (a1 <= 36677)
    {
      if ((a1 - 36288) > 0x18) {
        goto LABEL_22;
      }
      if (((1 << (a1 + 64)) & 0x1FFFE3F) == 0)
      {
LABEL_21:
        int v4 = 5125;
        goto LABEL_22;
      }
LABEL_18:
      int v4 = 5124;
      goto LABEL_22;
    }
    if (a1 > 36875)
    {
      if ((a1 - 37128) < 6 || (a1 - 36876) < 4) {
        goto LABEL_18;
      }
    }
    else if ((a1 - 36678) < 9 || (a1 - 36860) < 3)
    {
LABEL_20:
      int v4 = 5130;
    }
  }
LABEL_22:
  *a2 = v4;
  a2[1] = vecSizeForType(a1);
  uint64_t result = colsForType(a1);
  int v7 = 0;
  a2[2] = result;
  if (a1 <= 36287)
  {
    if ((a1 - 35664) < 0x1B || (a1 - 5124) <= 6 && ((1 << (a1 - 4)) & 0x47) != 0) {
      goto LABEL_27;
    }
    goto LABEL_28;
  }
  if (a1 <= 36677)
  {
    if ((a1 - 36288) >= 0x19) {
      goto LABEL_28;
    }
LABEL_27:
    int v7 = 1;
    goto LABEL_28;
  }
  if ((a1 - 36678) <= 8)
  {
    if (((1 << (a1 - 70)) & 0x15E) == 0) {
      goto LABEL_27;
    }
    goto LABEL_53;
  }
  if ((a1 - 36860) <= 0x13)
  {
    int v9 = 1 << (a1 + 4);
    if ((v9 & 0xF0001) != 0) {
      goto LABEL_27;
    }
    if ((v9 & 6) != 0)
    {
LABEL_53:
      int v7 = 2;
      goto LABEL_28;
    }
  }
  if ((a1 - 37128) < 6) {
    goto LABEL_27;
  }
LABEL_28:
  int v8 = 0;
  a2[3] = v7;
  if (a1 <= 36287)
  {
    if ((a1 - 35664) < 0x1B || (a1 - 5124) < 3) {
      goto LABEL_33;
    }
    if (a1 != 5130) {
      goto LABEL_34;
    }
    goto LABEL_61;
  }
  if (a1 <= 36677)
  {
    if ((a1 - 36288) >= 0x19) {
      goto LABEL_34;
    }
LABEL_33:
    int v8 = 4;
    goto LABEL_34;
  }
  if ((a1 - 36678) <= 8)
  {
    if (((1 << (a1 - 70)) & 0x15E) != 0) {
      goto LABEL_33;
    }
    goto LABEL_61;
  }
  if ((a1 - 36860) <= 0x13)
  {
    if (((1 << (a1 + 4)) & 0xF0006) != 0) {
      goto LABEL_33;
    }
    if (a1 == 36860)
    {
LABEL_61:
      int v8 = 2;
      goto LABEL_34;
    }
  }
  if ((a1 - 37128) < 6) {
    goto LABEL_33;
  }
LABEL_34:
  a2[4] = v8;
  if ((v4 - 5124) < 3)
  {
LABEL_37:
    a2[5] = 4;
    return result;
  }
  if (v4 == 5130)
  {
    a2[5] = 8;
  }
  else
  {
    if (v4 == 35670) {
      goto LABEL_37;
    }
    a2[5] = 0;
  }
  return result;
}

uint64_t convertValues(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, int a6, int a7, unsigned int a8, double a9, unsigned int a10, char a11, int a12)
{
  if (result == 5130 || result != a4 || a11 != 0)
  {
    if (a12) {
      BOOL v14 = a10 == 0;
    }
    else {
      BOOL v14 = 1;
    }
    if (!v14 && a8 != 0)
    {
      unsigned int v16 = 0;
      unsigned int v17 = 0;
      unsigned int v18 = 0;
      int v19 = 0;
      do
      {
        int v20 = 0;
        unsigned int v21 = v16;
        unsigned int v22 = v17;
        unsigned int v23 = v18;
        do
        {
          uint64_t v24 = a8;
          unsigned int v25 = v21;
          unsigned int v26 = v22;
          unsigned int v27 = v23;
          do
          {
            if (a11) {
              unsigned int v29 = v26;
            }
            else {
              unsigned int v29 = v27;
            }
            switch((int)result)
            {
              case 5124:
                switch(a4)
                {
                  case 5124:
                  case 5125:
                    goto LABEL_20;
                  case 5126:
                    unsigned int v28 = llroundf(*(float *)(a5 + 4 * v29));
                    goto LABEL_21;
                  case 5127:
                  case 5128:
                  case 5129:
                    goto LABEL_22;
                  case 5130:
                    a9 = *(double *)(a5 + 8 * v29);
                    unsigned int v28 = llround(a9);
                    goto LABEL_21;
                  default:
                    goto LABEL_38;
                }
              case 5125:
                switch(a4)
                {
                  case 5124:
                  case 5125:
                    goto LABEL_20;
                  case 5126:
                    unsigned int v28 = vcvtas_u32_f32(*(float *)(a5 + 4 * v29));
                    goto LABEL_21;
                  case 5127:
                  case 5128:
                  case 5129:
                    goto LABEL_22;
                  case 5130:
                    a9 = *(double *)(a5 + 8 * v29);
                    unsigned int v28 = vcvtad_u64_f64(a9);
                    goto LABEL_21;
                  default:
LABEL_38:
                    if (a4 != 35670) {
                      goto LABEL_22;
                    }
LABEL_20:
                    unsigned int v28 = *(_DWORD *)(a5 + 4 * v29);
                    break;
                }
                goto LABEL_21;
              case 5126:
                switch(a4)
                {
                  case 5124:
                    goto LABEL_41;
                  case 5125:
                    *(float *)(a2 + 4 * v25) = (float)*(unsigned int *)(a5 + 4 * v29);
                    break;
                  case 5126:
                    *(_DWORD *)(a2 + 4 * v25) = *(_DWORD *)(a5 + 4 * v29);
                    break;
                  case 5127:
                  case 5128:
                  case 5129:
                    goto LABEL_22;
                  case 5130:
                    a9 = *(double *)(a5 + 8 * v29);
                    *(float *)&a9 = a9;
                    *(_DWORD *)(a2 + 4 * v25) = LODWORD(a9);
                    break;
                  default:
                    if (a4 == 35670) {
LABEL_41:
                    }
                      *(float *)(a2 + 4 * v25) = (float)*(int *)(a5 + 4 * v29);
                    break;
                }
                break;
              case 5127:
              case 5128:
              case 5129:
                break;
              case 5130:
                switch(a4)
                {
                  case 5124:
                    goto LABEL_43;
                  case 5125:
                    LODWORD(a9) = *(_DWORD *)(a5 + 4 * v29);
                    a9 = (double)*(unint64_t *)&a9;
                    *(double *)(a2 + 8 * v25) = a9;
                    break;
                  case 5126:
                    a9 = *(float *)(a5 + 4 * v29);
                    *(double *)(a2 + 8 * v25) = a9;
                    break;
                  case 5127:
                  case 5128:
                  case 5129:
                    goto LABEL_22;
                  case 5130:
                    a9 = *(double *)(a5 + 8 * v29);
                    *(double *)(a2 + 8 * v25) = a9;
                    break;
                  default:
                    if (a4 == 35670)
                    {
LABEL_43:
                      a9 = (double)*(int *)(a5 + 4 * v29);
                      *(double *)(a2 + 8 * v25) = a9;
                    }
                    break;
                }
                break;
              default:
                if (result == 35670)
                {
                  switch(a4)
                  {
                    case 5124:
                    case 5125:
                      goto LABEL_45;
                    case 5126:
                      BOOL v30 = *(float *)(a5 + 4 * v29) == 0.0;
                      goto LABEL_53;
                    case 5127:
                    case 5128:
                    case 5129:
                      goto LABEL_22;
                    case 5130:
                      a9 = *(double *)(a5 + 8 * v29);
                      BOOL v30 = a9 == 0.0;
                      goto LABEL_53;
                    default:
                      if (a4 != 35670) {
                        goto LABEL_22;
                      }
LABEL_45:
                      BOOL v30 = *(_DWORD *)(a5 + 4 * v29) == 0;
LABEL_53:
                      unsigned int v28 = !v30;
                      break;
                  }
LABEL_21:
                  *(_DWORD *)(a2 + 4 * v25) = v28;
                }
                break;
            }
LABEL_22:
            ++v27;
            v26 += a7;
            ++v25;
            --v24;
          }
          while (v24);
          ++v20;
          v23 += a6;
          ++v22;
          v21 += a3;
        }
        while (v20 != a10);
        ++v19;
        v18 += a10 * a6;
        v17 += a8 * a7;
        v16 += a10 * a3;
      }
      while (v19 != a12);
    }
    return result;
  }
  switch(a8)
  {
    case 1u:
      if (a12) {
        BOOL v37 = a10 == 0;
      }
      else {
        BOOL v37 = 1;
      }
      if (v37) {
        return result;
      }
      BOOL v39 = a3 != 1 || a6 != 1;
      if (a10 < 0x14)
      {
        unsigned int v40 = 0;
        unsigned int v41 = 0;
        int v42 = 0;
        do
        {
          unsigned int v43 = a10;
          do
          {
            *(_DWORD *)(a2 + 4 * v41) = *(_DWORD *)(a5 + 4 * v40);
            v41 += a3;
            v40 += a6;
            --v43;
          }
          while (v43);
          ++v42;
        }
        while (v42 != a12);
        return result;
      }
      LODWORD(result) = 0;
      unsigned int v90 = 0;
      int v91 = 0;
      unsigned int v92 = a10 - 1;
      while (1)
      {
        unsigned int v93 = 0;
        BOOL v94 = __CFADD__(result, v92);
        char v95 = __CFADD__(v90, v92) || v39;
        if ((v95 & 1) == 0 && !v94)
        {
          if (a2 + 4 * v90 - (a5 + 4 * (unint64_t)result) >= 0x20)
          {
            uint64_t v96 = result + (a10 & 0xFFFFFFF8) * a6;
            unsigned int v97 = v90 + (a10 & 0xFFFFFFF8) * a3;
            unsigned int v99 = a10 & 0xFFFFFFF8;
            do
            {
              uint64_t v100 = (long long *)(a5 + 4 * result);
              long long v101 = *v100;
              long long v102 = v100[1];
              int v103 = (_OWORD *)(a2 + 4 * v90);
              _OWORD *v103 = v101;
              v103[1] = v102;
              LODWORD(result) = result + 8;
              v90 += 8;
              v99 -= 8;
            }
            while (v99);
            unsigned int v93 = a10 & 0xFFFFFFF8;
            if ((a10 & 0xFFFFFFF8) == a10) {
              goto LABEL_169;
            }
            goto LABEL_181;
          }
          unsigned int v93 = 0;
        }
        LODWORD(v96) = result;
        unsigned int v97 = v90;
LABEL_181:
        unsigned int v98 = a10 - v93;
        do
        {
          *(_DWORD *)(a2 + 4 * v97) = *(_DWORD *)(a5 + 4 * v96);
          v97 += a3;
          uint64_t v96 = (v96 + a6);
          --v98;
        }
        while (v98);
LABEL_169:
        ++v91;
        uint64_t result = v96;
        unsigned int v90 = v97;
        if (v91 == a12) {
          return result;
        }
      }
    case 2u:
      if (!a12 || !a10) {
        return result;
      }
      unsigned int v44 = 0;
      unsigned int v45 = 0;
      int v46 = 0;
      unsigned int v47 = a10 - 1;
      BOOL v49 = a3 != 1 || a6 != 1;
      while (1)
      {
        if (a10 >= 0x28)
        {
          LODWORD(result) = 0;
          BOOL v50 = __CFADD__(v44, v47);
          char v51 = __CFADD__(v45, v47) || v49;
          if ((v51 & 1) == 0 && v45 + a10 >= v45 + 1 && !v50 && v44 + a10 >= v44 + 1)
          {
            LODWORD(result) = 0;
            uint64_t v52 = a2 + 4 * (v45 + 1);
            uint64_t v53 = a5 + 4 * (v44 + 1);
            if ((unint64_t)(v52 - v53) >= 0x20)
            {
              uint64_t v54 = a5 + 4 * v44;
              if ((unint64_t)(v52 - v54) >= 0x20)
              {
                uint64_t v55 = a2 + 4 * v45;
                if ((unint64_t)(v53 - v55) >= 0x20
                  && (unint64_t)(v55 - v54) >= 0x20
                  && (unint64_t)(v52 - v55) >= 0x20)
                {
                  unsigned int v56 = v44 + (a10 & 0xFFFFFFF8) * a6;
                  unsigned int v57 = v45 + (a10 & 0xFFFFFFF8) * a3;
                  unsigned int v58 = a10 & 0xFFFFFFF8;
                  do
                  {
                    int v59 = (long long *)(a5 + 4 * v44);
                    long long v60 = *v59;
                    long long v61 = v59[1];
                    uint64_t v62 = (_OWORD *)(a2 + 4 * v45);
                    *uint64_t v62 = v60;
                    v62[1] = v61;
                    uint64_t v63 = (long long *)(a5 + 4 * (v44 + 1));
                    long long v64 = *v63;
                    long long v65 = v63[1];
                    int v66 = (_OWORD *)(a2 + 4 * (v45 + 1));
                    *int v66 = v64;
                    v66[1] = v65;
                    v44 += 8;
                    v45 += 8;
                    v58 -= 8;
                  }
                  while (v58);
                  uint64_t result = a10 & 0xFFFFFFF8;
                  if ((a10 & 0xFFFFFFF8) == a10) {
                    goto LABEL_121;
                  }
                  goto LABEL_119;
                }
              }
            }
          }
        }
        else
        {
          LODWORD(result) = 0;
        }
        unsigned int v56 = v44;
        unsigned int v57 = v45;
LABEL_119:
        int v67 = a10 - result;
        do
        {
          *(_DWORD *)(a2 + 4 * v57) = *(_DWORD *)(a5 + 4 * v56);
          uint64_t result = v57 + 1;
          *(_DWORD *)(a2 + 4 * result) = *(_DWORD *)(a5 + 4 * (v56 + 1));
          v57 += a3;
          v56 += a6;
          --v67;
        }
        while (v67);
LABEL_121:
        ++v46;
        unsigned int v44 = v56;
        unsigned int v45 = v57;
        if (v46 == a12) {
          return result;
        }
      }
    case 3u:
      if (!a12 || !a10) {
        return result;
      }
      BOOL v32 = a3 != 1 || a6 != 1;
      if (a10 < 0x34)
      {
        unsigned int v33 = 0;
        unsigned int v34 = 0;
        for (int i = 0; i != a12; ++i)
        {
          unsigned int v36 = a10;
          do
          {
            *(_DWORD *)(a2 + 4 * v34) = *(_DWORD *)(a5 + 4 * v33);
            *(_DWORD *)(a2 + 4 * (v34 + 1)) = *(_DWORD *)(a5 + 4 * (v33 + 1));
            *(_DWORD *)(a2 + 4 * (v34 + 2)) = *(_DWORD *)(a5 + 4 * (v33 + 2));
            v34 += a3;
            v33 += a6;
            --v36;
          }
          while (v36);
        }
        return result;
      }
      unsigned int v74 = 0;
      unsigned int v75 = 0;
      int v76 = 0;
      unsigned int v77 = a10 - 1;
      while (1)
      {
        LODWORD(result) = 0;
        BOOL v78 = __CFADD__(v74, v77);
        char v79 = __CFADD__(v75, v77) || v32;
        if ((v79 & 1) != 0
          || v75 + a10 < v75 + 1
          || -3 - v75 < v77
          || v78
          || v74 + a10 < v74 + 1
          || -3 - v74 < v77
          || (LODWORD(result) = 0,
              uint64_t v80 = a5 + 4 * (v74 + 1),
              uint64_t v81 = a2 + 4 * (v75 + 1),
              (unint64_t)(v81 - v80) < 0x10)
          || (uint64_t v82 = a5 + 4 * v74, (unint64_t)(v81 - v82) < 0x10)
          || (uint64_t v83 = a5 + 4 * (v74 + 2), v84 = a2 + 4 * v75, (unint64_t)(v83 - v84) < 0x10)
          || (unint64_t)(v80 - v84) < 0x10
          || (unint64_t)(v84 - v82) < 0x10
          || (unint64_t)(v81 - v84) < 0x10
          || (uint64_t v85 = a2 + 4 * (v75 + 2), (unint64_t)(v85 - v84) < 0x10)
          || (unint64_t)(v85 - v81) < 0x10
          || (unint64_t)(v83 - v81) < 0x10
          || (unint64_t)(v85 - v82) < 0x10
          || (unint64_t)(v85 - v80) < 0x10
          || (unint64_t)(v85 - v83) < 0x10)
        {
          unsigned int v86 = v74;
          unsigned int v87 = v75;
        }
        else
        {
          unsigned int v86 = v74 + (a10 & 0xFFFFFFFC) * a6;
          unsigned int v87 = v75 + (a10 & 0xFFFFFFFC) * a3;
          unsigned int v88 = a10 & 0xFFFFFFFC;
          do
          {
            *(_OWORD *)(a2 + 4 * v75) = *(_OWORD *)(a5 + 4 * v74);
            *(_OWORD *)(a2 + 4 * (v75 + 1)) = *(_OWORD *)(a5 + 4 * (v74 + 1));
            *(_OWORD *)(a2 + 4 * (v75 + 2)) = *(_OWORD *)(a5 + 4 * (v74 + 2));
            v74 += 4;
            v75 += 4;
            v88 -= 4;
          }
          while (v88);
          uint64_t result = a10 & 0xFFFFFFFC;
          if ((a10 & 0xFFFFFFFC) == a10) {
            goto LABEL_135;
          }
        }
        int v89 = a10 - result;
        do
        {
          *(_DWORD *)(a2 + 4 * v87) = *(_DWORD *)(a5 + 4 * v86);
          *(_DWORD *)(a2 + 4 * (v87 + 1)) = *(_DWORD *)(a5 + 4 * (v86 + 1));
          uint64_t result = v87 + 2;
          *(_DWORD *)(a2 + 4 * result) = *(_DWORD *)(a5 + 4 * (v86 + 2));
          v87 += a3;
          v86 += a6;
          --v89;
        }
        while (v89);
LABEL_135:
        ++v76;
        unsigned int v74 = v86;
        unsigned int v75 = v87;
        if (v76 == a12) {
          return result;
        }
      }
  }
  if (a12 && a10 && a8)
  {
    if (a8 >= 0x10)
    {
      unsigned int v104 = 0;
      unsigned int v105 = 0;
      int v106 = 0;
      unsigned int v107 = a8 - 1;
      do
      {
        for (int j = 0; j != a10; ++j)
        {
          uint64_t v109 = 0;
          BOOL v110 = __CFADD__(v105, v107);
          BOOL v111 = __CFADD__(v104, v107);
          if (v110) {
            goto LABEL_205;
          }
          if (v111) {
            goto LABEL_205;
          }
          if (((unint64_t)a8 - 1) >> 32) {
            goto LABEL_205;
          }
          if (a2 + 4 * v105 - (a5 + 4 * (unint64_t)v104) < 0x20) {
            goto LABEL_205;
          }
          int v112 = 0;
          uint64_t result = a8 & 0xFFFFFFF8;
          do
          {
            int v113 = (long long *)(a5 + 4 * (v104 + v112));
            long long v114 = *v113;
            long long v115 = v113[1];
            uint64_t v116 = (_OWORD *)(a2 + 4 * (v105 + v112));
            _OWORD *v116 = v114;
            v116[1] = v115;
            v112 += 8;
            result -= 8;
          }
          while (result);
          uint64_t v109 = a8 & 0xFFFFFFF8;
          if (v109 != a8)
          {
LABEL_205:
            uint64_t result = a8 - v109;
            do
            {
              *(_DWORD *)(a2 + 4 * (v105 + v109)) = *(_DWORD *)(a5 + 4 * (v104 + v109));
              LODWORD(v109) = v109 + 1;
              --result;
            }
            while (result);
          }
          v105 += a3;
          v104 += a6;
        }
        ++v106;
      }
      while (v106 != a12);
    }
    else
    {
      int v68 = 0;
      int v69 = 0;
      for (int k = 0; k != a12; ++k)
      {
        for (int m = 0; m != a10; ++m)
        {
          int v72 = 0;
          uint64_t v73 = a8;
          do
          {
            *(_DWORD *)(a2 + 4 * (v69 + v72)) = *(_DWORD *)(a5 + 4 * (v68 + v72));
            ++v72;
            --v73;
          }
          while (v73);
          v69 += a3;
          v68 += a6;
        }
      }
    }
  }
  return result;
}

uint64_t vecSizeForType(int a1)
{
  uint64_t result = 0;
  if (a1 <= 36287)
  {
    switch(a1)
    {
      case 35664:
      case 35667:
      case 35671:
      case 35674:
      case 35687:
      case 35689:
        return 2;
      case 35665:
      case 35668:
      case 35672:
      case 35675:
      case 35685:
      case 35690:
        return 3;
      case 35666:
      case 35669:
      case 35673:
      case 35676:
      case 35686:
      case 35688:
        return 4;
      case 35670:
      case 35677:
      case 35678:
      case 35679:
      case 35680:
      case 35681:
      case 35682:
      case 35683:
      case 35684:
        goto LABEL_17;
      default:
        unsigned int v4 = a1 - 5124;
        if (v4 <= 6 && ((1 << v4) & 0x47) != 0) {
LABEL_17:
        }
          uint64_t result = 1;
        break;
    }
  }
  else if (a1 > 36677)
  {
    char v3 = a1 - 70;
    if ((a1 - 36678) <= 8)
    {
      if (((1 << v3) & 0x54) != 0)
      {
        return 4;
      }
      else if (((1 << v3) & 0xA1) != 0)
      {
        return 2;
      }
      else
      {
        return 3;
      }
    }
    else
    {
      switch(a1)
      {
        case 36860:
          return 2;
        case 36861:
          return 3;
        case 36862:
          return 4;
        case 36863:
        case 36864:
        case 36865:
        case 36866:
        case 36867:
        case 36868:
        case 36869:
        case 36870:
        case 36871:
        case 36872:
        case 36873:
        case 36874:
        case 36875:
          return result;
        case 36876:
        case 36877:
        case 36878:
        case 36879:
          goto LABEL_17;
        default:
          if ((a1 - 37128) < 6) {
            goto LABEL_17;
          }
          break;
      }
    }
  }
  else
  {
    switch(a1)
    {
      case 36288:
      case 36289:
      case 36290:
      case 36291:
      case 36292:
      case 36293:
      case 36297:
      case 36298:
      case 36299:
      case 36300:
      case 36301:
      case 36302:
      case 36303:
      case 36304:
      case 36305:
      case 36306:
      case 36307:
      case 36308:
      case 36309:
      case 36310:
      case 36311:
      case 36312:
        goto LABEL_17;
      case 36294:
        return 2;
      case 36295:
        return 3;
      case 36296:
        return 4;
      default:
        return result;
    }
  }
  return result;
}

uint64_t colsForType(int a1)
{
  uint64_t result = 0;
  if (a1 <= 36287)
  {
    switch(a1)
    {
      case 35664:
      case 35665:
      case 35666:
      case 35667:
      case 35668:
      case 35669:
      case 35670:
      case 35671:
      case 35672:
      case 35673:
      case 35677:
      case 35678:
      case 35679:
      case 35680:
      case 35681:
      case 35682:
      case 35683:
      case 35684:
        return 1;
      case 35674:
      case 35685:
      case 35686:
        return 2;
      case 35675:
      case 35687:
      case 35688:
        return 3;
      case 35676:
      case 35689:
      case 35690:
        return 4;
      default:
        unsigned int v4 = a1 - 5124;
        if (v4 <= 6 && ((1 << v4) & 0x47) != 0) {
          return 1;
        }
        break;
    }
  }
  else
  {
    if (a1 <= 36677)
    {
      if ((a1 - 36288) >= 0x19) {
        return result;
      }
      return 1;
    }
    char v3 = a1 - 70;
    if ((a1 - 36678) <= 8)
    {
      if (((1 << v3) & 0x19) != 0)
      {
        return 2;
      }
      else if (((1 << v3) & 0x62) != 0)
      {
        return 3;
      }
      else
      {
        return 4;
      }
    }
    else if ((a1 - 36860) <= 0x13 && ((1 << (a1 + 4)) & 0xF0007) != 0 || (a1 - 37128) < 6)
    {
      return 1;
    }
  }
  return result;
}

void *glVertexPointer_PackThread(uint64_t a1, char a2, unsigned __int16 a3, int a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a1 + 26448);
  uint64_t result = gleAddCommand(a1, (uint64_t)glVertexPointer_UnpackThread, 24);
  *(unsigned char *)(v10 + 302) = a2;
  *(_WORD *)(v10 + 300) = a3;
  *(_DWORD *)uint64_t result = a2;
  *((_DWORD *)result + 1) = a3;
  *(_DWORD *)(v10 + 296) = a4;
  *((_DWORD *)result + 2) = a4;
  *(void *)(v10 + 280) = a5;
  result[2] = a5;
  uint64_t v12 = *(void *)(a1 + 26448);
  uint64_t v13 = *(void *)(a1 + 26464);
  if (v13 != *(void *)(v12 + 8))
  {
    *(void *)(v12 + 264) = *(void *)(v12 + 264) & 0xFFFFFFFFFFFEFFFFLL | ((unint64_t)(v13 != 0) << 16);
    *(void *)(v12 + 8) = v13;
  }
  return result;
}

uint64_t glVertexPointer_UnpackThread(uint64_t a1, uint64_t a2)
{
  return 24;
}

void *glNormalPointer_PackThread(uint64_t a1, unsigned __int16 a2, int a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 26448);
  uint64_t result = gleAddCommand(a1, (uint64_t)glNormalPointer_UnpackThread, 24);
  *(unsigned char *)(v8 + 326) = 3;
  *(_WORD *)(v8 + 324) = a2;
  *(_DWORD *)uint64_t result = 3;
  *((_DWORD *)result + 1) = a2;
  *(_DWORD *)(v8 + 320) = a3;
  *((_DWORD *)result + 2) = a3;
  *(void *)(v8 + 304) = a4;
  result[2] = a4;
  uint64_t v10 = *(void *)(a1 + 26448);
  uint64_t v11 = *(void *)(a1 + 26464);
  if (v11 != *(void *)(v10 + 16))
  {
    *(void *)(v10 + 264) = *(void *)(v10 + 264) & 0xFFFFFFFFFFFDFFFFLL | ((unint64_t)(v11 != 0) << 17);
    *(void *)(v10 + 16) = v11;
  }
  return result;
}

uint64_t glNormalPointer_UnpackThread(uint64_t a1, uint64_t a2)
{
  return 24;
}

void *glColorPointer_PackThread(uint64_t a1, int a2, unsigned __int16 a3, int a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a1 + 26448);
  uint64_t result = gleAddCommand(a1, (uint64_t)glColorPointer_UnpackThread, 24);
  *(_WORD *)(v10 + 348) = a3;
  *(_DWORD *)uint64_t result = a2;
  *((_DWORD *)result + 1) = a3;
  *(_DWORD *)(v10 + 344) = a4;
  *((_DWORD *)result + 2) = a4;
  *(void *)(v10 + 328) = a5;
  result[2] = a5;
  if (a2 == 32993) {
    char v12 = 5;
  }
  else {
    char v12 = a2;
  }
  *(unsigned char *)(v10 + 350) = v12;
  uint64_t v13 = *(void *)(a1 + 26448);
  uint64_t v14 = *(void *)(a1 + 26464);
  if (v14 != *(void *)(v13 + 24))
  {
    *(void *)(v13 + 264) = *(void *)(v13 + 264) & 0xFFFFFFFFFFFBFFFFLL | ((unint64_t)(v14 != 0) << 18);
    *(void *)(v13 + 24) = v14;
  }
  return result;
}

uint64_t glColorPointer_UnpackThread(uint64_t a1, uint64_t a2)
{
  return 24;
}

void glPointSizePointer_Exec(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t v4 = a1 + 28652;
  if (a3 < 0)
  {
    if (!*(_WORD *)(a1 + 29832))
    {
      __int16 v18 = 1281;
      goto LABEL_20;
    }
    return;
  }
  uint64_t v5 = a4;
  uint64_t v9 = *(void *)(a1 + 26384);
  uint64_t v10 = *(void *)(a1 + 19312);
  if (!v10 && v9 != *(void *)(a1 + 26392) && a4 && !*(unsigned char *)(a1 + 32502))
  {
    if (!*(_WORD *)(a1 + 29832))
    {
      __int16 v18 = 1282;
      goto LABEL_20;
    }
    return;
  }
  if (a2 == 5126 || a2 == 5132 && *(unsigned char *)(a1 + 32501) == 2)
  {
    *(void *)(v9 + 944) |= 0x400000uLL;
    *(void *)(v9 + 280) = a4;
    uint64_t v11 = *(void *)(v9 + 1288);
    if (v10 == v11) {
      goto LABEL_35;
    }
    if (v11 && (int v12 = *(_DWORD *)(v11 + 20) - 1, (*(_DWORD *)(v11 + 20) = v12) == 0))
    {
      gleUnbindAndFreeBufferObject(a1, (void *)v11);
      if (v10) {
        goto LABEL_10;
      }
    }
    else if (v10)
    {
LABEL_10:
      ++*(_DWORD *)(v10 + 20);
      uint64_t v13 = *(void *)(v9 + 912);
      if ((v13 & 0x400000) == 0)
      {
        *(void *)(v9 + 912) = v13 | 0x400000;
        if ((*(unsigned char *)(v9 + 906) & 0x40) != 0) {
          gleUpdateDrawArraysFuncs(a1);
        }
      }
      uint64_t v14 = *(unsigned __int8 *)(v4 + 3844);
      if (*(unsigned char *)(v4 + 3844))
      {
        uint64_t v15 = (uint64_t *)(v10 + 40);
        unsigned int v16 = (void *)(v9 + 1544);
        do
        {
          uint64_t v17 = *v15++;
          void *v16 = v17;
          v16 += 35;
          --v14;
        }
        while (v14);
      }
      if (v11) {
        goto LABEL_34;
      }
      goto LABEL_33;
    }
    uint64_t v19 = *(void *)(v9 + 912);
    if ((v19 & 0x400000) != 0)
    {
      *(void *)(v9 + 912) = v19 & 0xFFFFFFFFFFBFFFFFLL;
      if ((*(unsigned char *)(v9 + 906) & 0x40) != 0) {
        gleUpdateDrawArraysFuncs(a1);
      }
    }
    uint64_t v20 = *(unsigned __int8 *)(v4 + 3844);
    if (*(unsigned char *)(v4 + 3844))
    {
      unsigned int v21 = (void *)(v9 + 1544);
      do
      {
        *unsigned int v21 = 0;
        v21 += 35;
        --v20;
      }
      while (v20);
    }
LABEL_33:
    *(void *)(v9 + 952) |= 0x400000uLL;
LABEL_34:
    *(_DWORD *)uint64_t v4 = 0;
    *(_DWORD *)(a1 + 1532) |= 0x1000u;
    *(void *)(v9 + 944) |= 0x400010uLL;
    *(void *)(v9 + 1288) = v10;
LABEL_35:
    if (v10)
    {
      v5 += *(void *)(v10 + 136);
      if (*(void *)(v10 + 192))
      {
        if ((*(unsigned char *)(v9 + 906) & 0x40) != 0) {
          *(unsigned char *)(v9 + 1216) = 0;
        }
      }
    }
    *(void *)(v9 + 1008) = v5;
    if (a3) {
      int v22 = a3;
    }
    else {
      int v22 = 4;
    }
    if (*(unsigned __int16 *)(v9 + 300) != a2 || *(_DWORD *)(v9 + 296) != v22)
    {
      *(void *)(v9 + 952) |= 0x400000uLL;
      *(_WORD *)(v9 + 300) = a2;
      *(_DWORD *)(v9 + 296) = v22;
      *(void *)(a1 + 26184) = gleSetVertexArrayFunc;
      *(void *)(a1 + 26192) = gleSetVertexArrayFunc;
      *(void *)(a1 + 26200) = gleSetVertexElemFunc;
      *(void *)(a1 + 26208) = gleSetVertexElemFunc;
      *(_DWORD *)uint64_t v4 = 0;
      *(_DWORD *)(a1 + 1532) |= 0x1000u;
    }
    return;
  }
  if (!*(_WORD *)(a1 + 29832))
  {
    __int16 v18 = 1280;
LABEL_20:
    *(_WORD *)(a1 + 29832) = v18;
  }
}

void *glPointSizePointer_PackThread(uint64_t a1, unsigned __int16 a2, int a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 26448);
  uint64_t result = gleAddCommand(a1, (uint64_t)glPointSizePointer_UnpackThread, 24);
  *(_WORD *)(v8 + 444) = a2;
  *(_DWORD *)(v8 + 440) = a3;
  *((_DWORD *)result + 1) = a2;
  *((_DWORD *)result + 2) = a3;
  *(void *)(v8 + 424) = a4;
  result[2] = a4;
  uint64_t v10 = *(void *)(a1 + 26448);
  uint64_t v11 = *(void *)(a1 + 26464);
  if (v11 != *(void *)(v10 + 56))
  {
    *(void *)(v10 + 264) = *(void *)(v10 + 264) & 0xFFFFFFFFFFBFFFFFLL | ((unint64_t)(v11 != 0) << 22);
    *(void *)(v10 + 56) = v11;
  }
  return result;
}

uint64_t glPointSizePointer_UnpackThread(uint64_t a1, uint64_t a2)
{
  return 24;
}

void glMatrixIndexPointerOES_Exec(uint64_t a1, unsigned int a2, int a3, unsigned int a4, uint64_t a5)
{
  uint64_t v5 = a1 + 29832;
  if (a2 - 5 < 0xFFFFFFFC || (a4 & 0x80000000) != 0)
  {
    if (!*(_WORD *)v5)
    {
      __int16 v19 = 1281;
      goto LABEL_19;
    }
    return;
  }
  uint64_t v7 = a5;
  uint64_t v10 = *(void *)(a1 + 26384);
  if (!*(void *)(a1 + 19312) && v10 != *(void *)(a1 + 26392) && a5 && !*(unsigned char *)(a1 + 32502))
  {
    if (!*(_WORD *)v5)
    {
      __int16 v19 = 1282;
      goto LABEL_19;
    }
    return;
  }
  if (a3 == 5121)
  {
    *(unsigned char *)(a1 + 17696) = a2;
    gleUpdateInverseNeeds(a1);
    *(void *)(v10 + 944) |= 0x800000uLL;
    *(void *)(v10 + 304) = v7;
    uint64_t v11 = *(void *)(v10 + 1296);
    uint64_t v12 = *(void *)(a1 + 19312);
    if (v12 == v11) {
      goto LABEL_34;
    }
    if (v11 && (int v13 = *(_DWORD *)(v11 + 20) - 1, (*(_DWORD *)(v11 + 20) = v13) == 0))
    {
      gleUnbindAndFreeBufferObject(a1, (void *)v11);
      if (v12) {
        goto LABEL_9;
      }
    }
    else if (v12)
    {
LABEL_9:
      ++*(_DWORD *)(v12 + 20);
      uint64_t v14 = *(void *)(v10 + 912);
      if ((v14 & 0x800000) == 0)
      {
        *(void *)(v10 + 912) = v14 | 0x800000;
        if ((*(unsigned char *)(v10 + 906) & 0x80) != 0) {
          gleUpdateDrawArraysFuncs(a1);
        }
      }
      uint64_t v15 = *(unsigned __int8 *)(v5 + 2664);
      if (*(unsigned char *)(v5 + 2664))
      {
        unsigned int v16 = (uint64_t *)(v12 + 40);
        uint64_t v17 = (void *)(v10 + 1552);
        do
        {
          uint64_t v18 = *v16++;
          *uint64_t v17 = v18;
          v17 += 35;
          --v15;
        }
        while (v15);
      }
      if (v11) {
        goto LABEL_33;
      }
      goto LABEL_32;
    }
    uint64_t v20 = *(void *)(v10 + 912);
    if ((v20 & 0x800000) != 0)
    {
      *(void *)(v10 + 912) = v20 & 0xFFFFFFFFFF7FFFFFLL;
      if ((*(unsigned char *)(v10 + 906) & 0x80) != 0) {
        gleUpdateDrawArraysFuncs(a1);
      }
    }
    uint64_t v21 = *(unsigned __int8 *)(v5 + 2664);
    if (*(unsigned char *)(v5 + 2664))
    {
      int v22 = (void *)(v10 + 1552);
      do
      {
        void *v22 = 0;
        v22 += 35;
        --v21;
      }
      while (v21);
    }
LABEL_32:
    *(void *)(v10 + 952) |= 0x800000uLL;
LABEL_33:
    *(_DWORD *)(a1 + 28652) = 0;
    *(_DWORD *)(a1 + 1532) |= 0x1000u;
    *(void *)(v10 + 944) |= 0x800010uLL;
    *(void *)(v10 + 1296) = v12;
LABEL_34:
    if (v12)
    {
      v7 += *(void *)(v12 + 136);
      if (*(void *)(v12 + 192))
      {
        if ((*(unsigned char *)(v10 + 906) & 0x80) != 0) {
          *(unsigned char *)(v10 + 1216) = 0;
        }
      }
    }
    *(void *)(v10 + 1016) = v7;
    if (a4) {
      uint64_t v23 = a4;
    }
    else {
      uint64_t v23 = a2;
    }
    unint64_t v24 = ((unint64_t)a2 << 48) | ((unint64_t)(((v23 | v7) & 0xF) == 0) << 57) | v23 | 0x140100000000;
    if (*(void *)(v10 + 320) != v24)
    {
      *(void *)(v10 + 952) |= 0x800000uLL;
      *(void *)(v10 + 320) = v24;
      *(void *)(a1 + 26184) = gleSetVertexArrayFunc;
      *(void *)(a1 + 26192) = gleSetVertexArrayFunc;
      *(void *)(a1 + 26200) = gleSetVertexElemFunc;
      *(void *)(a1 + 26208) = gleSetVertexElemFunc;
      *(_DWORD *)(a1 + 1532) |= 0x1000u;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1548) |= 0x1801Eu;
    }
    return;
  }
  if (!*(_WORD *)v5)
  {
    __int16 v19 = 1280;
LABEL_19:
    *(_WORD *)uint64_t v5 = v19;
  }
}

void *glMatrixIndexPointerOES_PackThread(uint64_t a1, int a2, int a3, int a4, uint64_t a5)
{
  uint64_t result = gleAddCommand(a1, (uint64_t)glMatrixIndexPointerOES_UnpackThread, 24);
  *(_DWORD *)uint64_t result = a2;
  *((_DWORD *)result + 1) = a3;
  *((_DWORD *)result + 2) = a4;
  result[2] = a5;
  uint64_t v11 = *(void *)(a1 + 26448);
  uint64_t v12 = *(void *)(a1 + 26464);
  if (v12 != *(void *)(v11 + 64))
  {
    *(void *)(v11 + 264) = *(void *)(v11 + 264) & 0xFFFFFFFFFF7FFFFFLL | ((unint64_t)(v12 != 0) << 23);
    *(void *)(v11 + 64) = v12;
  }
  return result;
}

uint64_t glMatrixIndexPointerOES_UnpackThread(uint64_t a1, uint64_t a2)
{
  return 24;
}

void *glWeightPointerARB_PackThread(uint64_t a1, int a2, int a3, int a4, uint64_t a5)
{
  uint64_t result = gleAddCommand(a1, (uint64_t)glWeightPointerARB_UnpackThread, 24);
  *(_DWORD *)uint64_t result = a2;
  *((_DWORD *)result + 1) = a3;
  *((_DWORD *)result + 2) = a4;
  result[2] = a5;
  uint64_t v11 = *(void *)(a1 + 26448);
  uint64_t v12 = *(void *)(a1 + 26464);
  if (v12 != *(void *)(v11 + 40))
  {
    *(void *)(v11 + 264) = *(void *)(v11 + 264) & 0xFFFFFFFFFFEFFFFFLL | ((unint64_t)(v12 != 0) << 20);
    *(void *)(v11 + 40) = v12;
  }
  return result;
}

uint64_t glWeightPointerARB_UnpackThread(uint64_t a1, uint64_t a2)
{
  return 24;
}

void *glTexCoordPointer_PackThread(void *result, char a2, unsigned __int16 a3, int a4, uint64_t a5)
{
  int v5 = *((_DWORD *)result + 6645);
  unsigned int v6 = v5 + 8;
  if ((v5 + 8) >= 0x11)
  {
    if (!*((_WORD *)result + 14916)) {
      *((_WORD *)result + 14916) = 1281;
    }
  }
  else
  {
    uint64_t v11 = result;
    uint64_t v12 = result[3306] + 24 * v6;
    uint64_t result = gleAddCommand((uint64_t)result, (uint64_t)glTexCoordPointer_UnpackThread, 24);
    *(unsigned char *)(v12 + 302) = a2;
    *(_WORD *)(v12 + 300) = a3;
    *(_DWORD *)uint64_t result = a2;
    *((_DWORD *)result + 1) = a3;
    *(_DWORD *)(v12 + 296) = a4;
    *((_DWORD *)result + 2) = a4;
    *(void *)(v12 + 280) = a5;
    result[2] = a5;
    uint64_t v13 = v11[3306];
    uint64_t v14 = v13 + 8 * v6;
    uint64_t v16 = *(void *)(v14 + 8);
    uint64_t v15 = (void *)(v14 + 8);
    uint64_t v17 = v11[3308];
    if (v17 != v16)
    {
      uint64_t v18 = (0x1000000 << v5);
      if (v17) {
        uint64_t v19 = *(void *)(v13 + 264) | v18;
      }
      else {
        uint64_t v19 = *(void *)(v13 + 264) & ~v18;
      }
      *(void *)(v13 + 264) = v19;
      *uint64_t v15 = v17;
    }
  }
  return result;
}

uint64_t glTexCoordPointer_UnpackThread(uint64_t a1, uint64_t a2)
{
  return 24;
}

void glVertexAttribIPointerEXT_Exec(uint64_t a1, unsigned int a2, int a3, int a4, unsigned int a5, uint64_t a6)
{
  uint64_t v6 = a1 + 28652;
  if ((a3 - 5) < 0xFFFFFFFC || (a5 & 0x80000000) != 0 || a2 >= 0x10)
  {
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v26 = 1281;
    goto LABEL_23;
  }
  uint64_t v8 = a6;
  uint64_t v10 = *(void *)(a1 + 26384);
  if (!v10)
  {
    if (!a6) {
      return;
    }
    goto LABEL_46;
  }
  unsigned __int16 v11 = a4;
  uint64_t v13 = *(void *)(a1 + 19312);
  if (!v13 && a6 && v10 != *(void *)(a1 + 26392))
  {
LABEL_46:
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v26 = 1282;
LABEL_23:
    *(_WORD *)(a1 + 29832) = v26;
    return;
  }
  if ((a4 - 5120) >= 6)
  {
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v26 = 1280;
    goto LABEL_23;
  }
  uint64_t v14 = a2 + 16;
  int v15 = dword_227DC1E90[a4 - 5120];
  uint64_t v16 = v10 + 136;
  unint64_t v17 = (unint64_t)(1 << a2) << 32;
  *(void *)(v10 + 944) |= v17;
  *(void *)(v10 + 136 + 24 * v14) = a6;
  uint64_t v18 = v10 + 1240;
  uint64_t v19 = *(void *)(v10 + 1240 + 8 * v14);
  if (v13 == v19) {
    goto LABEL_33;
  }
  if (v19 && (int v20 = *(_DWORD *)(v19 + 20) - 1, (*(_DWORD *)(v19 + 20) = v20) == 0))
  {
    uint64_t v43 = a1 + 28652;
    int v40 = v15;
    gleUnbindAndFreeBufferObject(a1, (void *)v19);
    uint64_t v16 = v10 + 136;
    uint64_t v18 = v10 + 1240;
    int v15 = v40;
    uint64_t v6 = v43;
    if (v13) {
      goto LABEL_13;
    }
  }
  else if (v13)
  {
LABEL_13:
    ++*(_DWORD *)(v13 + 20);
    uint64_t v21 = *(void *)(v10 + 912);
    if ((v21 & v17) == 0)
    {
      *(void *)(v10 + 912) = v21 | v17;
      if ((*(void *)(v10 + 904) & v17) != 0)
      {
        uint64_t v42 = v6;
        uint64_t v36 = v16;
        uint64_t v37 = v18;
        int v39 = v15;
        gleUpdateDrawArraysFuncs(a1);
        uint64_t v16 = v36;
        uint64_t v18 = v37;
        int v15 = v39;
        uint64_t v6 = v42;
      }
    }
    uint64_t v22 = *(unsigned __int8 *)(v6 + 3844);
    if (*(unsigned char *)(v6 + 3844))
    {
      uint64_t v23 = (uint64_t *)(v13 + 40);
      unint64_t v24 = (void *)(v10 + 8 * v14 + 1496);
      do
      {
        uint64_t v25 = *v23++;
        *unint64_t v24 = v25;
        v24 += 35;
        --v22;
      }
      while (v22);
    }
    if (v19) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  uint64_t v27 = *(void *)(v10 + 912);
  if ((v27 & v17) != 0)
  {
    *(void *)(v10 + 912) = v27 & ~v17;
    if ((*(void *)(v10 + 904) & v17) != 0)
    {
      uint64_t v44 = v6;
      uint64_t v28 = v16;
      int v41 = v15;
      uint64_t v38 = v18;
      gleUpdateDrawArraysFuncs(a1);
      uint64_t v18 = v38;
      int v15 = v41;
      uint64_t v16 = v28;
      uint64_t v6 = v44;
    }
  }
  uint64_t v29 = *(unsigned __int8 *)(v6 + 3844);
  if (*(unsigned char *)(v6 + 3844))
  {
    BOOL v30 = (void *)(v10 + 8 * v14 + 1496);
    do
    {
      void *v30 = 0;
      v30 += 35;
      --v29;
    }
    while (v29);
  }
LABEL_31:
  *(void *)(v10 + 952) |= v17;
LABEL_32:
  *(_DWORD *)uint64_t v6 = 0;
  *(_DWORD *)(a1 + 1532) |= 0x1000u;
  *(void *)(v10 + 944) |= v17 | 0x10;
  *(void *)(v18 + 8 * v14) = v13;
LABEL_33:
  if (v13)
  {
    v8 += *(void *)(v13 + 136);
    if (*(void *)(v13 + 192))
    {
      if ((*(void *)(v10 + 904) & v17) != 0) {
        *(unsigned char *)(v10 + 1216) = 0;
      }
    }
  }
  *(void *)(v10 + 8 * v14 + 960) = v8;
  if (a5) {
    uint64_t v31 = a5;
  }
  else {
    uint64_t v31 = (v15 * a3);
  }
  uint64_t v32 = v16 + 24 * v14;
  uint64_t v34 = *(void *)(v32 + 16);
  unsigned int v33 = (unint64_t *)(v32 + 16);
  unint64_t v35 = ((unint64_t)a3 << 48) | ((unint64_t)(((v31 | v8) & 0xF) == 0) << 57) | ((unint64_t)(v11 | 0x4000u) << 32) | v31;
  if (v34 != v35)
  {
    *(void *)(v10 + 952) |= v17;
    *unsigned int v33 = v35;
    *(void *)(a1 + 26184) = gleSetVertexArrayFunc;
    *(void *)(a1 + 26192) = gleSetVertexArrayFunc;
    *(void *)(a1 + 26200) = gleSetVertexElemFunc;
    *(void *)(a1 + 26208) = gleSetVertexElemFunc;
    *(_DWORD *)uint64_t v6 = 0;
    *(_DWORD *)(a1 + 1532) |= 0x1000u;
  }
}

void *glVertexAttribPointerARB_PackThread(void *result, unsigned int a2, unsigned int a3, int a4, char a5, int a6, uint64_t a7)
{
  uint64_t v7 = (__int16 *)(result + 3729);
  if (a3 - 5 < 0xFFFFFFFC || a6 < 0 || a2 >= 0x10)
  {
    if (*v7) {
      return result;
    }
    __int16 v16 = 1281;
LABEL_18:
    *uint64_t v7 = v16;
    return result;
  }
  unsigned __int16 v11 = result;
  uint64_t v12 = result[3306];
  if (!v12)
  {
    if (!a7) {
      return result;
    }
    goto LABEL_20;
  }
  if (!result[3308] && a7 && v12 != result[3307])
  {
LABEL_20:
    if (*v7) {
      return result;
    }
    __int16 v16 = 1282;
    goto LABEL_18;
  }
  if ((a4 - 5120) > 0xC) {
    goto LABEL_15;
  }
  if (((1 << a4) & 0x104F) != 0) {
    goto LABEL_22;
  }
  if (((1 << a4) & 0x830) == 0)
  {
LABEL_15:
    if (a4 != 33640 && a4 != 36255 || (*((unsigned char *)result + 32501) & 0xFE) == 2) {
      goto LABEL_16;
    }
    if (a3 > 3) {
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  if ((*((unsigned char *)result + 32501) & 0xFE) == 2)
  {
LABEL_16:
    if (*v7) {
      return result;
    }
    __int16 v16 = 1280;
    goto LABEL_18;
  }
LABEL_22:
  unsigned int v17 = a2 + 16;
  uint64_t result = gleAddCommand((uint64_t)result, (uint64_t)glVertexAttribPointerARB_UnpackThread, 32);
  *(_DWORD *)uint64_t result = a2;
  *((_DWORD *)result + 1) = a3;
  *((_DWORD *)result + 2) = a4;
  *((unsigned char *)result + 12) = a5;
  *((_DWORD *)result + 4) = a6;
  result[3] = a7;
  uint64_t v18 = v11[3306];
  uint64_t v19 = v18 + 8 * v17;
  uint64_t v21 = *(void *)(v19 + 8);
  int v20 = (void *)(v19 + 8);
  uint64_t v22 = v11[3308];
  if (v22 != v21)
  {
    unint64_t v23 = (unint64_t)(1 << a2) << 32;
    if (v22) {
      unint64_t v24 = *(void *)(v18 + 264) | v23;
    }
    else {
      unint64_t v24 = *(void *)(v18 + 264) & ~v23;
    }
    *(void *)(v18 + 264) = v24;
    void *v20 = v22;
  }
  return result;
}

uint64_t glVertexAttribPointerARB_UnpackThread(uint64_t a1, uint64_t a2)
{
  return 32;
}

void *glVertexAttribIPointerEXT_PackThread(void *result, unsigned int a2, int a3, int a4, int a5, uint64_t a6)
{
  uint64_t v6 = result;
  if ((a3 - 5) < 0xFFFFFFFC || a5 < 0 || a2 >= 0x10)
  {
    uint64_t v21 = (__int16 *)(result + 3729);
    if (*((_WORD *)result + 14916)) {
      return result;
    }
    __int16 v22 = 1281;
    goto LABEL_14;
  }
  uint64_t v10 = result[3306];
  if (!v10)
  {
    if (!a6) {
      return result;
    }
    goto LABEL_21;
  }
  if (!result[3308] && a6 && v10 != result[3307])
  {
LABEL_21:
    uint64_t v21 = (__int16 *)(result + 3729);
    if (*((_WORD *)result + 14916)) {
      return result;
    }
    __int16 v22 = 1282;
LABEL_14:
    *uint64_t v21 = v22;
    return result;
  }
  if ((a4 - 5120) >= 6)
  {
    uint64_t v21 = (__int16 *)(result + 3729);
    if (*((_WORD *)result + 14916)) {
      return result;
    }
    __int16 v22 = 1280;
    goto LABEL_14;
  }
  unsigned int v13 = a2 + 16;
  uint64_t result = gleAddCommand((uint64_t)result, (uint64_t)glVertexAttribIPointerEXT_UnpackThread, 32);
  *(_DWORD *)uint64_t result = a2;
  *((_DWORD *)result + 1) = a3;
  *((_DWORD *)result + 2) = a4;
  *((_DWORD *)result + 4) = a5;
  result[3] = a6;
  uint64_t v14 = v6[3306];
  uint64_t v15 = v14 + 8 * v13;
  uint64_t v17 = *(void *)(v15 + 8);
  __int16 v16 = (void *)(v15 + 8);
  uint64_t v18 = v6[3308];
  if (v18 != v17)
  {
    unint64_t v19 = (unint64_t)(1 << a2) << 32;
    if (v18) {
      unint64_t v20 = *(void *)(v14 + 264) | v19;
    }
    else {
      unint64_t v20 = *(void *)(v14 + 264) & ~v19;
    }
    *(void *)(v14 + 264) = v20;
    void *v16 = v18;
  }
  return result;
}

uint64_t glVertexAttribIPointerEXT_UnpackThread(uint64_t a1, uint64_t a2)
{
  return 32;
}

uint64_t glVertexAttribDivisorARB_Exec(uint64_t result, unsigned int a2, int a3)
{
  if (a2 >= 0x10)
  {
    if (*(_WORD *)(result + 29832)) {
      return result;
    }
    __int16 v7 = 1281;
    goto LABEL_10;
  }
  char v3 = *(int8x16_t **)(result + 26384);
  if (!v3)
  {
    if (*(_WORD *)(result + 29832)) {
      return result;
    }
    __int16 v7 = 1282;
LABEL_10:
    *(_WORD *)(result + 29832) = v7;
    return result;
  }
  uint64_t v4 = &v3[24].i8[24 * a2];
  int v6 = *((_DWORD *)v4 + 36);
  int v5 = v4 + 144;
  if (v6 != a3)
  {
    *int v5 = a3;
    v3[59] = vorrq_s8(v3[59], (int8x16_t)vdupq_n_s64((unint64_t)(1 << a2) << 32));
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1532) |= 0x1000u;
  }
  return result;
}

void *glVertexAttribDivisorARB_PackThread(void *result, unsigned int a2, int a3)
{
  if (a2 >= 0x10)
  {
    int v5 = (__int16 *)(result + 3729);
    if (!*((_WORD *)result + 14916))
    {
      __int16 v6 = 1281;
LABEL_9:
      *int v5 = v6;
    }
  }
  else
  {
    if (result[3306])
    {
      uint64_t result = gleAddCommand((uint64_t)result, (uint64_t)glVertexAttribDivisorARB_UnpackThread, 8);
      *(_DWORD *)uint64_t result = a2;
      *((_DWORD *)result + 1) = a3;
      return result;
    }
    int v5 = (__int16 *)(result + 3729);
    if (!*((_WORD *)result + 14916))
    {
      __int16 v6 = 1282;
      goto LABEL_9;
    }
  }
  return result;
}

uint64_t glVertexAttribDivisorARB_UnpackThread(uint64_t a1, uint64_t a2)
{
  return 8;
}

unint64_t glDrawArrays_STD_Exec(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5, double a6, double a7)
{
  __int16 v7 = (unsigned __int16 *)(result + 26336);
  if (a2 >= 7)
  {
    if (*(_WORD *)(result + 29832)) {
      return result;
    }
    __int16 v23 = 1280;
    goto LABEL_53;
  }
  unint64_t v8 = result;
  uint64_t v9 = (unsigned char *)(result + 17692);
  uint64_t v10 = *(void *)(result + 26384);
  if ((~*(_DWORD *)(v10 + 904) & 0x900000) != 0 && *(unsigned char *)(result + 17699) != 0
    || (*(void *)(v10 + 904) & 0x100010000) == 0)
  {
    return result;
  }
  if ((int)a4 <= 0)
  {
    if ((a4 & 0x80000000) == 0 || *(_WORD *)(result + 29832)) {
      return result;
    }
    __int16 v23 = 1281;
    goto LABEL_53;
  }
  uint64_t v16 = *(void *)(result + 26432);
  if (*(__int16 *)(v16 + 42) != -1 && !*(unsigned char *)(v16 + 41))
  {
    unsigned int v24 = a4;
    switch((int)a2)
    {
      case 0:
      case 2:
        break;
      case 1:
        unsigned int v24 = a4 >> 1;
        break;
      case 3:
        unsigned int v24 = a4 - 1;
        break;
      case 4:
        unsigned int v24 = a4 / 3;
        break;
      case 5:
      case 6:
        unsigned int v24 = a4 - 2;
        break;
      default:
        unsigned int v24 = 0;
        break;
    }
    unsigned int v25 = v24 + *(_DWORD *)(v16 + 176);
    if (v25 <= *(_DWORD *)(v16 + 180))
    {
      *(_DWORD *)(v16 + 176) = v25;
      goto LABEL_12;
    }
    if (*(_WORD *)(result + 29832)) {
      return result;
    }
    __int16 v23 = 1282;
LABEL_53:
    *(_WORD *)(result + 29832) = v23;
    return result;
  }
LABEL_12:
  if (*v7 != 5375)
  {
    *(void *)(result + 26312) = 0;
    *__int16 v7 = 5375;
  }
  uint64_t v17 = (unsigned char *)(result + 32481);
  if (*(void *)(v10 + 944))
  {
    int v18 = 0;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1532) |= 0x1000u;
  }
  else
  {
    int v18 = *(_DWORD *)(result + 28652);
  }
  int v19 = 1 << a2;
  if ((v18 & (1 << a2)) != 0 && (*(unsigned char *)(result + 28681) & 1) != 0 && (*(unsigned char *)(result + 28683) & 4) != 0)
  {
    if (*(unsigned char *)(result + 32482)) {
      return result;
    }
  }
  else
  {
    uint64_t result = gleDoDrawDispatchCore(result, 1 << a2, 1u, 4u, a5, a6, a7);
    if (!result) {
      return result;
    }
  }
  if (!*v17)
  {
    uint64_t v20 = *(void *)(v10 + 912);
LABEL_30:
    if (v20 && !*(unsigned char *)(v10 + 1216)) {
      uint64_t result = gleSynchronizeBuffersInArray(v8, v10 + 40);
    }
    char v21 = 1;
    goto LABEL_34;
  }
  if (!*v9 && (*(_WORD *)(v10 + 922) & 0xFFFE) != 0x85BE || !*(_DWORD *)(v10 + 924) || !*(void *)(v10 + 928))
  {
    uint64_t v20 = *(void *)(v10 + 912);
    if ((*(void *)(v10 + 904) & ~v20) != 0) {
      goto LABEL_30;
    }
  }
  uint64_t result = (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t, void, void, uint64_t, void))(v8 + 29232))(*(void *)(v8 + 29016), 0, a2, a3, a4, *v7, *(void *)(v8 + 26312), 1, 0);
  if (result) {
    goto LABEL_43;
  }
  char v21 = 0;
LABEL_34:
  if ((*((_DWORD *)v7 + 579) & v19) != 0 && (*((unsigned char *)v7 + 2345) & 1) != 0 && (*((unsigned char *)v7 + 2347) & 2) != 0)
  {
    if (!v17[1])
    {
LABEL_38:
      if ((v21 & 1) == 0 && *(void *)(v10 + 912) && !*(unsigned char *)(v10 + 1216)) {
        gleSynchronizeBuffersInArray(v8, v10 + 40);
      }
      uint64_t result = gleDrawArraysOrElements_ExecCore(v8, a2, a3, a4, 0, v10 + 40, 1);
    }
  }
  else
  {
    uint64_t result = gleDoDrawDispatchCore(v8, 1 << a2, 1u, 2u, a5, a6, a7);
    if (result) {
      goto LABEL_38;
    }
  }
LABEL_43:
  int v22 = *(_DWORD *)(*(void *)(v8 + 19296) + 316);
  if (*((_DWORD *)v7 + 870) != v22)
  {
    if (*(void *)(v8 + 28960))
    {
      uint64_t result = gleInvalidateCurrentDrawFramebufferTextures(v8);
      int v22 = *(_DWORD *)(*(void *)(v8 + 19296) + 316);
    }
    *((_DWORD *)v7 + 870) = v22;
  }
  return result;
}

void *glDrawArrays_PackThread(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return glDrawArraysInstanced_PackThread(a1, a2, a3, a4, 1);
}

void *glDrawArraysInstanced_PackThread(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9 = (unint64_t)result;
  uint64_t v10 = result[3306];
  if (!v10 || (*(void *)(v10 + 272) & ~*(void *)(v10 + 264)) != 0)
  {
    if (a4 && a5)
    {
      ((void (*)(void *))result[3469])(result);
      if (*(unsigned __int8 *)(v9 + 32501) - 3 >= 2)
      {
        return (void *)glDrawArraysInstanced_STD_Exec(v9, a2, a3, a4, a5, v11, v12, v13);
      }
      else
      {
        return (void *)glDrawArraysInstanced_STD_ES2Exec(v9, a2, a3, a4, a5, v11.n128_f64[0], v12, v13);
      }
    }
  }
  else
  {
    uint64_t result = gleAddCommand((uint64_t)result, (uint64_t)glDrawArrays_UnpackThread, 16);
    *(_DWORD *)uint64_t result = a2;
    *((_DWORD *)result + 1) = a3;
    *((_DWORD *)result + 2) = a4;
    *((_DWORD *)result + 3) = a5;
  }
  return result;
}

uint64_t glDrawArrays_UnpackThread(unint64_t a1, unsigned int *a2, __n128 a3, double a4, double a5)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  uint64_t v8 = a2[2];
  uint64_t v9 = a2[3];
  if (*(unsigned __int8 *)(a1 + 32501) - 3 >= 2) {
    glDrawArraysInstanced_STD_Exec(a1, v6, v7, v8, v9, a3, a4, a5);
  }
  else {
    glDrawArraysInstanced_STD_ES2Exec(a1, v6, v7, v8, v9, a3.n128_f64[0], a4, a5);
  }
  return 16;
}

unint64_t glDrawArraysInstanced_STD_Exec(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __n128 a6, double a7, double a8)
{
  uint64_t v9 = (unsigned __int16 *)(result + 26336);
  if ((int)a5 <= 0)
  {
    if ((a5 & 0x80000000) == 0) {
      return result;
    }
LABEL_57:
    if (*(_WORD *)(result + 29832)) {
      return result;
    }
    __int16 v25 = 1281;
    goto LABEL_59;
  }
  if (a2 >= 7)
  {
    if (*(_WORD *)(result + 29832)) {
      return result;
    }
    __int16 v25 = 1280;
    goto LABEL_59;
  }
  unint64_t v11 = result;
  double v12 = (unsigned char *)(result + 17692);
  uint64_t v13 = *(void *)(result + 26384);
  if ((~*(_DWORD *)(v13 + 904) & 0x900000) != 0 && *(unsigned char *)(result + 17699) != 0
    || (*(void *)(v13 + 904) & 0x100010000) == 0)
  {
    return result;
  }
  if ((int)a4 <= 0)
  {
    if ((a4 & 0x80000000) == 0) {
      return result;
    }
    goto LABEL_57;
  }
  uint64_t v18 = *(void *)(result + 26432);
  if (*(__int16 *)(v18 + 42) != -1 && !*(unsigned char *)(v18 + 41))
  {
    unsigned int v26 = a4;
    switch((int)a2)
    {
      case 0:
      case 2:
        break;
      case 1:
        unsigned int v26 = a4 >> 1;
        break;
      case 3:
        unsigned int v26 = a4 - 1;
        break;
      case 4:
        unsigned int v26 = a4 / 3;
        break;
      case 5:
      case 6:
        unsigned int v26 = a4 - 2;
        break;
      default:
        unsigned int v26 = 0;
        break;
    }
    unsigned int v27 = *(_DWORD *)(v18 + 176) + v26 * a5;
    if (v27 <= *(_DWORD *)(v18 + 180))
    {
      *(_DWORD *)(v18 + 176) = v27;
      goto LABEL_13;
    }
    if (*(_WORD *)(result + 29832)) {
      return result;
    }
    __int16 v25 = 1282;
LABEL_59:
    *(_WORD *)(result + 29832) = v25;
    return result;
  }
LABEL_13:
  if (*v9 != 5375)
  {
    *(void *)(result + 26312) = 0;
    *uint64_t v9 = 5375;
  }
  int v19 = (unsigned char *)(result + 32481);
  if (*(void *)(v13 + 944))
  {
    int v20 = 0;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1532) |= 0x1000u;
  }
  else
  {
    int v20 = *(_DWORD *)(result + 28652);
  }
  int v21 = 1 << a2;
  if ((v20 & (1 << a2)) != 0 && (*(unsigned char *)(result + 28681) & 1) != 0 && (*(unsigned char *)(result + 28683) & 4) != 0)
  {
    if (*(unsigned char *)(result + 32482)) {
      return result;
    }
  }
  else
  {
    uint64_t result = gleDoDrawDispatchCore(result, 1 << a2, 1u, 4u, a6, a7, a8);
    if (!result) {
      return result;
    }
  }
  uint64_t v28 = v13 + 40;
  if (!*v19)
  {
    uint64_t v22 = *(void *)(v13 + 912);
LABEL_31:
    if (v22 && !*(unsigned char *)(v13 + 1216)) {
      uint64_t result = gleSynchronizeBuffersInArray(v11, v28);
    }
    char v23 = 1;
    goto LABEL_35;
  }
  if (!*v12 && (*(_WORD *)(v13 + 922) & 0xFFFE) != 0x85BE || !*(_DWORD *)(v13 + 924) || !*(void *)(v13 + 928))
  {
    uint64_t v22 = *(void *)(v13 + 912);
    if ((*(void *)(v13 + 904) & ~v22) != 0) {
      goto LABEL_31;
    }
  }
  uint64_t result = (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t, void, void, uint64_t, void, uint64_t))(v11 + 29232))(*(void *)(v11 + 29016), 0, a2, a3, a4, *v9, *(void *)(v11 + 26312), a5, 0, v28);
  if (result) {
    goto LABEL_44;
  }
  char v23 = 0;
LABEL_35:
  if ((*((_DWORD *)v9 + 579) & v21) != 0 && (*((unsigned char *)v9 + 2345) & 1) != 0 && (*((unsigned char *)v9 + 2347) & 2) != 0)
  {
    if (!v19[1])
    {
LABEL_39:
      if ((v23 & 1) == 0 && *(void *)(v13 + 912) && !*(unsigned char *)(v13 + 1216)) {
        gleSynchronizeBuffersInArray(v11, v28);
      }
      uint64_t result = gleDrawArraysOrElements_ExecCore(v11, a2, a3, a4, 0, v28, a5);
    }
  }
  else
  {
    uint64_t result = gleDoDrawDispatchCore(v11, 1 << a2, 1u, 2u, a6, a7, a8);
    if (result) {
      goto LABEL_39;
    }
  }
LABEL_44:
  int v24 = *(_DWORD *)(*(void *)(v11 + 19296) + 316);
  if (*((_DWORD *)v9 + 870) != v24)
  {
    if (*(void *)(v11 + 28960))
    {
      uint64_t result = gleInvalidateCurrentDrawFramebufferTextures(v11);
      int v24 = *(_DWORD *)(*(void *)(v11 + 19296) + 316);
    }
    *((_DWORD *)v9 + 870) = v24;
  }
  return result;
}

uint64_t glDrawArraysInstanced_STD_ES2Exec(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7, double a8)
{
  uint64_t v9 = (unsigned __int16 *)(result + 26336);
  if ((int)a5 <= 0)
  {
    if ((a5 & 0x80000000) == 0) {
      return result;
    }
LABEL_50:
    if (*(_WORD *)(result + 29832)) {
      return result;
    }
    __int16 v23 = 1281;
    goto LABEL_52;
  }
  if (a2 >= 7)
  {
    if (*(_WORD *)(result + 29832)) {
      return result;
    }
    __int16 v23 = 1280;
    goto LABEL_52;
  }
  if ((int)a4 <= 0)
  {
    if ((a4 & 0x80000000) == 0) {
      return result;
    }
    goto LABEL_50;
  }
  uint64_t v13 = result;
  uint64_t v14 = *(void *)(result + 26384);
  uint64_t v15 = *(void *)(result + 26432);
  if (*(__int16 *)(v15 + 42) != -1 && !*(unsigned char *)(v15 + 41))
  {
    unsigned int v24 = a4;
    switch((int)a2)
    {
      case 0:
      case 2:
        break;
      case 1:
        unsigned int v24 = a4 >> 1;
        break;
      case 3:
        unsigned int v24 = a4 - 1;
        break;
      case 4:
        unsigned int v24 = a4 / 3;
        break;
      case 5:
      case 6:
        unsigned int v24 = a4 - 2;
        break;
      default:
        unsigned int v24 = 0;
        break;
    }
    unsigned int v25 = *(_DWORD *)(v15 + 176) + v24 * a5;
    if (v25 <= *(_DWORD *)(v15 + 180))
    {
      *(_DWORD *)(v15 + 176) = v25;
      goto LABEL_6;
    }
    if (*(_WORD *)(result + 29832)) {
      return result;
    }
    __int16 v23 = 1282;
LABEL_52:
    *(_WORD *)(result + 29832) = v23;
    return result;
  }
LABEL_6:
  if (*v9 != 5375)
  {
    *(void *)(result + 26312) = 0;
    *uint64_t v9 = 5375;
  }
  uint64_t v16 = (unsigned char *)(result + 32481);
  if (*(void *)(v14 + 944))
  {
    int v17 = 0;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1532) |= 0x1000u;
  }
  else
  {
    int v17 = *(_DWORD *)(result + 28652);
  }
  int v18 = 1 << a2;
  if ((v17 & (1 << a2)) != 0 && (*(unsigned char *)(result + 28681) & 1) != 0 && (*(unsigned char *)(result + 28683) & 4) != 0)
  {
    if (*(unsigned char *)(result + 32482)) {
      return result;
    }
  }
  else
  {
    uint64_t result = gleDoDrawDispatchCoreES2(result, 1 << a2, 1u, 4u, a6, a7, a8);
    if (!result) {
      return result;
    }
  }
  uint64_t v26 = v14 + 40;
  if (!*v16)
  {
    uint64_t v19 = *(void *)(v14 + 912);
LABEL_24:
    uint64_t v20 = a3;
    if (v19 && !*(unsigned char *)(v14 + 1216)) {
      uint64_t result = gleSynchronizeBuffersInArray(v13, v26);
    }
    char v21 = 1;
    goto LABEL_28;
  }
  if (!*(unsigned char *)(v13 + 17692) && (*(_WORD *)(v14 + 922) & 0xFFFE) != 0x85BE
    || !*(_DWORD *)(v14 + 924)
    || !*(void *)(v14 + 928))
  {
    uint64_t v19 = *(void *)(v14 + 912);
    if ((*(void *)(v14 + 904) & ~v19) != 0) {
      goto LABEL_24;
    }
  }
  uint64_t v20 = a3;
  uint64_t result = (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t, void, void, uint64_t, void, uint64_t))(v13 + 29232))(*(void *)(v13 + 29016), 0, a2, a3, a4, *v9, *(void *)(v13 + 26312), a5, 0, v26);
  if (result) {
    goto LABEL_37;
  }
  char v21 = 0;
LABEL_28:
  if ((*((_DWORD *)v9 + 579) & v18) != 0 && (*((unsigned char *)v9 + 2345) & 1) != 0 && (*((unsigned char *)v9 + 2347) & 2) != 0)
  {
    if (!v16[1])
    {
LABEL_32:
      if ((v21 & 1) == 0 && *(void *)(v14 + 912) && !*(unsigned char *)(v14 + 1216)) {
        gleSynchronizeBuffersInArray(v13, v26);
      }
      uint64_t result = gleDrawArraysOrElements_ExecCore(v13, a2, v20, a4, 0, v26, a5);
    }
  }
  else
  {
    uint64_t result = gleDoDrawDispatchCoreES2(v13, 1 << a2, 1u, 2u, a6, a7, a8);
    if (result) {
      goto LABEL_32;
    }
  }
LABEL_37:
  int v22 = *(_DWORD *)(*(void *)(v13 + 19296) + 316);
  if (*((_DWORD *)v9 + 870) != v22)
  {
    if (*(void *)(v13 + 28960))
    {
      uint64_t result = gleInvalidateCurrentDrawFramebufferTextures(v13);
      int v22 = *(_DWORD *)(*(void *)(v13 + 19296) + 316);
    }
    *((_DWORD *)v9 + 870) = v22;
  }
  return result;
}

void *glDrawElementsInstanced_PackThread(void *result, uint64_t a2, uint64_t a3, int a4, const void *a5, uint64_t a6)
{
  unint64_t v11 = (unint64_t)result;
  double v12 = (void *)result[3306];
  if (v12 && (v12[34] & ~v12[33]) == 0 && *v12)
  {
    uint64_t result = gleAddCommand((uint64_t)result, (uint64_t)glDrawElements_UnpackThread, 32);
    *(_WORD *)uint64_t result = a2;
    *((_WORD *)result + 1) = a4;
    result[2] = 0;
    result[3] = a5;
    *((_DWORD *)result + 1) = a3;
    *((_DWORD *)result + 2) = a6;
    return result;
  }
  uint64_t v13 = (__int16 *)(result + 3729);
  if ((int)a3 <= 0)
  {
    if ((a3 & 0x80000000) == 0) {
      return result;
    }
LABEL_41:
    if (*v13) {
      return result;
    }
    __int16 v19 = 1281;
LABEL_31:
    *uint64_t v13 = v19;
    return result;
  }
  if ((int)a6 <= 0)
  {
    if ((a6 & 0x80000000) == 0) {
      return result;
    }
    goto LABEL_41;
  }
  if ((v12[34] & ~v12[33]) != 0 || *v12)
  {
LABEL_10:
    (*(void (**)(unint64_t))(v11 + 27752))(v11);
    if (*(unsigned __int8 *)(v11 + 32501) - 3 >= 2)
    {
      return (void *)glDrawElementsInstanced_STD_Exec(v11, a2, a3, a4, (uint64_t)a5, a6, v14, v15, v16);
    }
    else
    {
      return (void *)glDrawElementsInstanced_STD_ES2Exec(v11, a2, a3, a4, (uint64_t)a5, a6, v14.n128_f64[0], v15, v16);
    }
  }
  int v17 = *((unsigned __int8 *)result + 32501);
  if ((v17 - 2) >= 3)
  {
    if (v17 == 1)
    {
      if (a2 > 0xE || (a2 - 7) <= 2) {
        goto LABEL_29;
      }
    }
    else if (a2 >= 0xE)
    {
      goto LABEL_29;
    }
  }
  else if (a2 >= 7)
  {
    goto LABEL_29;
  }
  switch(a4)
  {
    case 5125:
      int v18 = 4;
      break;
    case 5123:
      int v18 = 2;
      break;
    case 5121:
      int v18 = 1;
      break;
    default:
LABEL_29:
      if (*v13) {
        return result;
      }
      __int16 v19 = 1280;
      goto LABEL_31;
  }
  int v20 = v18 * a3;
  char v21 = gleAddLargeCommand((uint64_t)result, (uint64_t)glDrawElements_UnpackThread, v18 * (int)a3 + 32);
  if (!v21) {
    goto LABEL_10;
  }
  *(_WORD *)char v21 = a2;
  *((_WORD *)v21 + 1) = a4;
  v21[2] = v20;
  v21[3] = 0;
  *((_DWORD *)v21 + 1) = a3;
  *((_DWORD *)v21 + 2) = a6;
  int v22 = v21 + 4;

  return memcpy(v22, a5, v20);
}

uint64_t glDrawElements_UnpackThread(unint64_t a1, unsigned __int16 *a2, __n128 a3, double a4, double a5)
{
  uint64_t v6 = *(void *)(*(void *)(a1 + 26384) + 1232);
  uint64_t v7 = *a2;
  uint64_t v8 = *((unsigned int *)a2 + 1);
  int v9 = a2[1];
  if (*(unsigned __int8 *)(a1 + 32501) - 3 >= 2)
  {
    if (v6) {
      uint64_t v11 = *((void *)a2 + 3);
    }
    else {
      uint64_t v11 = (uint64_t)(a2 + 16);
    }
    glDrawElementsInstanced_STD_Exec(a1, v7, v8, v9, v11, *((unsigned int *)a2 + 2), a3, a4, a5);
  }
  else
  {
    if (v6) {
      uint64_t v10 = *((void *)a2 + 3);
    }
    else {
      uint64_t v10 = (uint64_t)(a2 + 16);
    }
    glDrawElementsInstanced_STD_ES2Exec(a1, v7, v8, v9, v10, *((unsigned int *)a2 + 2), a3.n128_f64[0], a4, a5);
  }
  return (*((_DWORD *)a2 + 4) + 32);
}

unint64_t glDrawElementsInstanced_STD_Exec(unint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, __n128 a7, double a8, double a9)
{
  uint64_t v10 = (unsigned __int16 *)(result + 26336);
  if ((int)a6 <= 0)
  {
    if ((a6 & 0x80000000) == 0) {
      return result;
    }
  }
  else
  {
    if (a2 >= 7) {
      goto LABEL_78;
    }
    unint64_t v12 = result;
    uint64_t v13 = (unsigned char *)(result + 17692);
    uint64_t v14 = *(void *)(result + 26384);
    if ((~*(_DWORD *)(v14 + 904) & 0x900000) != 0 && *(unsigned char *)(result + 17699) != 0
      || (*(void *)(v14 + 904) & 0x100010000) == 0)
    {
      return result;
    }
    if (a4 != 5123 && a4 != 5121 && a4 != 5125)
    {
LABEL_78:
      if (!*(_WORD *)(result + 29832))
      {
        __int16 v27 = 1280;
LABEL_65:
        *(_WORD *)(result + 29832) = v27;
        return result;
      }
      return result;
    }
    if ((int)a3 > 0)
    {
      uint64_t v18 = *(void *)(result + 26432);
      if (*(__int16 *)(v18 + 42) != -1 && !*(unsigned char *)(v18 + 41))
      {
        unsigned int v28 = a3;
        switch((int)a2)
        {
          case 0:
          case 2:
            break;
          case 1:
            unsigned int v28 = a3 >> 1;
            break;
          case 3:
            unsigned int v28 = a3 - 1;
            break;
          case 4:
            unsigned int v28 = a3 / 3;
            break;
          case 5:
          case 6:
            unsigned int v28 = a3 - 2;
            break;
          default:
            unsigned int v28 = 0;
            break;
        }
        unsigned int v29 = *(_DWORD *)(v18 + 176) + v28 * a6;
        if (v29 > *(_DWORD *)(v18 + 180))
        {
          if (!*(_WORD *)(result + 29832))
          {
            __int16 v27 = 1282;
            goto LABEL_65;
          }
          return result;
        }
        *(_DWORD *)(v18 + 176) = v29;
      }
      uint64_t v19 = *(void *)(v14 + 1232);
      if (v19) {
        a5 += *(void *)(v19 + 136);
      }
      *(void *)(result + 26312) = a5;
      *uint64_t v10 = a4;
      if ((a4 - 5121) > 4) {
        unsigned int v20 = 1;
      }
      else {
        unsigned int v20 = dword_227DC1EA8[a4 - 5121];
      }
      char v21 = (unsigned char *)(result + 32481);
      if (*(void *)(v14 + 944))
      {
        int v22 = 0;
        *(_DWORD *)(result + 28652) = 0;
        *(_DWORD *)(result + 1532) |= 0x1000u;
      }
      else
      {
        int v22 = *(_DWORD *)(result + 28652);
      }
      int v23 = 1 << a2;
      if ((v22 & (1 << a2)) != 0
        && (v20 & *(unsigned char *)(result + 28681)) != 0
        && (*(unsigned char *)(result + 28683) & 4) != 0)
      {
        if (*(unsigned char *)(result + 32482)) {
          return result;
        }
      }
      else
      {
        uint64_t result = gleDoDrawDispatchCore(result, 1 << a2, v20, 4u, a7, a8, a9);
        if (!result) {
          return result;
        }
      }
      if (*v21)
      {
        if ((*v13 || (*(_WORD *)(v14 + 922) & 0xFFFE) == 0x85BE) && *(_DWORD *)(v14 + 924) && *(void *)(v14 + 928)
          || (uint64_t v24 = *(void *)(v14 + 912), (*(void *)(v14 + 904) & ~v24) == 0))
        {
          uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, void, uint64_t, void, void, uint64_t, void))(v12 + 29232))(*(void *)(v12 + 29016), 1, a2, 0, a3, *v10, *(void *)(v12 + 26312), a6, 0);
          if (result) {
            goto LABEL_48;
          }
          char v25 = 0;
LABEL_39:
          if ((*((_DWORD *)v10 + 579) & v23) != 0
            && (*((unsigned char *)v10 + 2345) & 1) != 0
            && (*((unsigned char *)v10 + 2347) & 2) != 0)
          {
            if (!v21[1])
            {
LABEL_43:
              if ((v25 & 1) == 0 && *(void *)(v14 + 912) && !*(unsigned char *)(v14 + 1216)) {
                gleSynchronizeBuffersInArray(v12, v14 + 40);
              }
              uint64_t result = gleDrawArraysOrElements_ExecCore(v12, a2, 0, a3, 1, v14 + 40, a6);
            }
          }
          else
          {
            uint64_t result = gleDoDrawDispatchCore(v12, 1 << a2, 1u, 2u, a7, a8, a9);
            if (result) {
              goto LABEL_43;
            }
          }
LABEL_48:
          int v26 = *(_DWORD *)(*(void *)(v12 + 19296) + 316);
          if (*((_DWORD *)v10 + 870) != v26)
          {
            if (*(void *)(v12 + 28960))
            {
              uint64_t result = gleInvalidateCurrentDrawFramebufferTextures(v12);
              int v26 = *(_DWORD *)(*(void *)(v12 + 19296) + 316);
            }
            *((_DWORD *)v10 + 870) = v26;
          }
          return result;
        }
      }
      else
      {
        uint64_t v24 = *(void *)(v14 + 912);
      }
      if (v24 && !*(unsigned char *)(v14 + 1216)) {
        uint64_t result = gleSynchronizeBuffersInArray(v12, v14 + 40);
      }
      char v25 = 1;
      goto LABEL_39;
    }
    if ((a3 & 0x80000000) == 0) {
      return result;
    }
  }
  if (!*(_WORD *)(result + 29832))
  {
    __int16 v27 = 1281;
    goto LABEL_65;
  }
  return result;
}

uint64_t glDrawElementsInstanced_STD_ES2Exec(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, double a7, double a8, double a9)
{
  uint64_t v10 = (unsigned __int16 *)(result + 26336);
  if ((int)a6 <= 0)
  {
    if ((a6 & 0x80000000) == 0) {
      return result;
    }
  }
  else
  {
    if (a2 >= 7) {
      goto LABEL_53;
    }
    uint64_t v13 = result;
    uint64_t v14 = *(void *)(result + 26384);
    uint64_t v15 = *(void *)(result + 26432);
    int v16 = *(unsigned __int16 *)(v15 + 42);
    if (v16 != 0xFFFF && !*(unsigned char *)(v15 + 41)) {
      goto LABEL_68;
    }
    if (a4 != 5123 && a4 != 5121 && a4 != 5125)
    {
LABEL_53:
      if (!*(_WORD *)(result + 29832))
      {
        __int16 v25 = 1280;
LABEL_70:
        *(_WORD *)(result + 29832) = v25;
        return result;
      }
      return result;
    }
    if ((int)a3 > 0)
    {
      if (v16 == 0xFFFF || *(unsigned char *)(v15 + 41))
      {
LABEL_9:
        uint64_t v17 = *(void *)(v14 + 1232);
        if (v17) {
          a5 += *(void *)(v17 + 136);
        }
        *(void *)(result + 26312) = a5;
        *uint64_t v10 = a4;
        if ((a4 - 5121) > 4) {
          unsigned int v18 = 1;
        }
        else {
          unsigned int v18 = dword_227DC1EA8[a4 - 5121];
        }
        uint64_t v19 = (unsigned char *)(result + 32481);
        if (*(void *)(v14 + 944))
        {
          int v20 = 0;
          *(_DWORD *)(result + 28652) = 0;
          *(_DWORD *)(result + 1532) |= 0x1000u;
        }
        else
        {
          int v20 = *(_DWORD *)(result + 28652);
        }
        int v21 = 1 << a2;
        if ((v20 & (1 << a2)) != 0
          && (v18 & *(unsigned char *)(result + 28681)) != 0
          && (*(unsigned char *)(result + 28683) & 4) != 0)
        {
          if (*(unsigned char *)(result + 32482)) {
            return result;
          }
        }
        else
        {
          uint64_t result = gleDoDrawDispatchCoreES2(result, 1 << a2, v18, 4u, a7, a8, a9);
          if (!result) {
            return result;
          }
        }
        if (*v19)
        {
          if ((*(unsigned char *)(v13 + 17692) || (*(_WORD *)(v14 + 922) & 0xFFFE) == 0x85BE)
            && *(_DWORD *)(v14 + 924)
            && *(void *)(v14 + 928)
            || (uint64_t v22 = *(void *)(v14 + 912), (*(void *)(v14 + 904) & ~v22) == 0))
          {
            uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, void, uint64_t, void, void, uint64_t, void))(v13 + 29232))(*(void *)(v13 + 29016), 1, a2, 0, a3, *v10, *(void *)(v13 + 26312), a6, 0);
            if (result) {
              goto LABEL_43;
            }
            char v23 = 0;
LABEL_34:
            if ((*((_DWORD *)v10 + 579) & v21) != 0
              && (*((unsigned char *)v10 + 2345) & 1) != 0
              && (*((unsigned char *)v10 + 2347) & 2) != 0)
            {
              if (!v19[1])
              {
LABEL_38:
                if ((v23 & 1) == 0 && *(void *)(v14 + 912) && !*(unsigned char *)(v14 + 1216)) {
                  gleSynchronizeBuffersInArray(v13, v14 + 40);
                }
                uint64_t result = gleDrawArraysOrElements_ExecCore(v13, a2, 0, a3, 1, v14 + 40, a6);
              }
            }
            else
            {
              uint64_t result = gleDoDrawDispatchCoreES2(v13, 1 << a2, 1u, 2u, a7, a8, a9);
              if (result) {
                goto LABEL_38;
              }
            }
LABEL_43:
            int v24 = *(_DWORD *)(*(void *)(v13 + 19296) + 316);
            if (*((_DWORD *)v10 + 870) != v24)
            {
              if (*(void *)(v13 + 28960))
              {
                uint64_t result = gleInvalidateCurrentDrawFramebufferTextures(v13);
                int v24 = *(_DWORD *)(*(void *)(v13 + 19296) + 316);
              }
              *((_DWORD *)v10 + 870) = v24;
            }
            return result;
          }
        }
        else
        {
          uint64_t v22 = *(void *)(v14 + 912);
        }
        if (v22 && !*(unsigned char *)(v14 + 1216)) {
          uint64_t result = gleSynchronizeBuffersInArray(v13, v14 + 40);
        }
        char v23 = 1;
        goto LABEL_34;
      }
      unsigned int v26 = a3;
      switch((int)a2)
      {
        case 0:
        case 2:
          break;
        case 1:
          unsigned int v26 = a3 >> 1;
          break;
        case 3:
          unsigned int v26 = a3 - 1;
          break;
        case 4:
          unsigned int v26 = a3 / 3;
          break;
        case 5:
        case 6:
          unsigned int v26 = a3 - 2;
          break;
        default:
          unsigned int v26 = 0;
          break;
      }
      unsigned int v27 = *(_DWORD *)(v15 + 176) + v26 * a6;
      if (v27 <= *(_DWORD *)(v15 + 180))
      {
        *(_DWORD *)(v15 + 176) = v27;
        goto LABEL_9;
      }
LABEL_68:
      if (!*(_WORD *)(result + 29832))
      {
        __int16 v25 = 1282;
        goto LABEL_70;
      }
      return result;
    }
    if ((a3 & 0x80000000) == 0) {
      return result;
    }
  }
  if (!*(_WORD *)(result + 29832))
  {
    __int16 v25 = 1281;
    goto LABEL_70;
  }
  return result;
}

void *glDrawElements_PackThread(void *a1, uint64_t a2, uint64_t a3, int a4, const void *a5)
{
  return glDrawElementsInstanced_PackThread(a1, a2, a3, a4, a5, 1);
}

void *glDrawRangeElements_PackThread(void *result, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, int a6, const void *a7)
{
  if (a4 >= a3) {
    return glDrawElementsInstanced_PackThread(result, a2, a5, a6, a7, 1);
  }
  if (!*((_WORD *)result + 14916)) {
    *((_WORD *)result + 14916) = 1281;
  }
  return result;
}

unint64_t glDrawArrays_ES2Exec(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5, double a6, double a7)
{
  uint64_t v7 = (unsigned __int16 *)(result + 26336);
  if (a2 >= 7)
  {
    if (*(_WORD *)(result + 29832)) {
      return result;
    }
    __int16 v17 = 1280;
    goto LABEL_31;
  }
  if ((int)a4 <= 0)
  {
    if ((a4 & 0x80000000) == 0 || *(_WORD *)(result + 29832)) {
      return result;
    }
    __int16 v17 = 1281;
    goto LABEL_31;
  }
  uint64_t v11 = result;
  uint64_t v12 = *(void *)(result + 26384);
  uint64_t v13 = *(void *)(result + 26432);
  if (*(__int16 *)(v13 + 42) != -1 && !*(unsigned char *)(v13 + 41))
  {
    unsigned int v18 = a4;
    switch((int)a2)
    {
      case 0:
      case 2:
        break;
      case 1:
        unsigned int v18 = a4 >> 1;
        break;
      case 3:
        unsigned int v18 = a4 - 1;
        break;
      case 4:
        unsigned int v18 = a4 / 3;
        break;
      case 5:
      case 6:
        unsigned int v18 = a4 - 2;
        break;
      default:
        unsigned int v18 = 0;
        break;
    }
    unsigned int v19 = v18 + *(_DWORD *)(v13 + 176);
    if (v19 <= *(_DWORD *)(v13 + 180))
    {
      *(_DWORD *)(v13 + 176) = v19;
      goto LABEL_5;
    }
    if (*(_WORD *)(result + 29832)) {
      return result;
    }
    __int16 v17 = 1282;
LABEL_31:
    *(_WORD *)(result + 29832) = v17;
    return result;
  }
LABEL_5:
  if (*v7 != 5375)
  {
    *(void *)(result + 26312) = 0;
    *uint64_t v7 = 5375;
  }
  uint64_t result = gleDrawArraysOrElements_Entries_Body(result, 3, a2, 1u, v12 + 40, a5, a6, a7);
  if (result != 2)
  {
    int v14 = result;
    if (!result
      || (uint64_t result = (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t, void, void, uint64_t, void))(v11 + 29232))(*(void *)(v11 + 29016), 0, a2, a3, a4, *v7, *(void *)(v11 + 26312), 1, 0), !result))
    {
      uint64_t v15 = (1 << a2);
      if ((*((_DWORD *)v7 + 579) & v15) != 0
        && (*((unsigned char *)v7 + 2345) & 1) != 0
        && (*((unsigned char *)v7 + 2347) & 2) != 0)
      {
        if (!*(unsigned char *)(v11 + 32482))
        {
LABEL_14:
          if (v14 && *(void *)(v12 + 912) && !*(unsigned char *)(v12 + 1216)) {
            gleSynchronizeBuffersInArray(v11, v12 + 40);
          }
          uint64_t result = gleDrawArraysOrElements_ExecCore(v11, a2, a3, a4, 0, v12 + 40, 1);
        }
      }
      else
      {
        uint64_t result = gleDoDrawDispatchCoreES2(v11, v15);
        if (result) {
          goto LABEL_14;
        }
      }
    }
    int v16 = *(_DWORD *)(*(void *)(v11 + 19296) + 316);
    if (*((_DWORD *)v7 + 870) != v16)
    {
      if (*(void *)(v11 + 28960))
      {
        uint64_t result = gleInvalidateCurrentDrawFramebufferTextures(v11);
        int v16 = *(_DWORD *)(*(void *)(v11 + 19296) + 316);
      }
      *((_DWORD *)v7 + 870) = v16;
    }
  }
  return result;
}

unint64_t glDrawElements_ES2Exec(unint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, __n128 a6, double a7, double a8)
{
  uint64_t v8 = (unsigned __int16 *)(result + 26336);
  if (a2 >= 7)
  {
LABEL_34:
    if (!*(_WORD *)(result + 29832))
    {
      __int16 v20 = 1280;
LABEL_49:
      *(_WORD *)(result + 29832) = v20;
      return result;
    }
    return result;
  }
  uint64_t v11 = result;
  uint64_t v12 = *(void *)(result + 26384);
  uint64_t v13 = *(void *)(result + 26432);
  int v14 = *(unsigned __int16 *)(v13 + 42);
  if (v14 != 0xFFFF && !*(unsigned char *)(v13 + 41)) {
    goto LABEL_47;
  }
  if (a4 != 5123 && a4 != 5121 && a4 != 5125) {
    goto LABEL_34;
  }
  if ((int)a3 > 0)
  {
    if (v14 == 0xFFFF || *(unsigned char *)(v13 + 41))
    {
LABEL_8:
      uint64_t v15 = *(void *)(v12 + 1232);
      if (v15) {
        a5 += *(void *)(v15 + 136);
      }
      *(void *)(result + 26312) = a5;
      *uint64_t v8 = a4;
      if ((a4 - 5121) > 4) {
        LOBYTE(v16) = 1;
      }
      else {
        int v16 = dword_227DC1EA8[a4 - 5121];
      }
      uint64_t result = gleDrawArraysOrElements_Entries_Body(result, 3, a2, v16, v12 + 40, a6, a7, a8);
      if (result == 2) {
        return result;
      }
      int v17 = result;
      if (!result
        || (uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, void, uint64_t, void, void, uint64_t, void))(v11 + 29232))(*(void *)(v11 + 29016), 1, a2, 0, a3, *v8, *(void *)(v11 + 26312), 1, 0), !result))
      {
        uint64_t v18 = (1 << a2);
        if ((*((_DWORD *)v8 + 579) & v18) != 0
          && (*((unsigned char *)v8 + 2345) & 1) != 0
          && (*((unsigned char *)v8 + 2347) & 2) != 0)
        {
          if (!*(unsigned char *)(v11 + 32482))
          {
LABEL_20:
            if (v17 && *(void *)(v12 + 912) && !*(unsigned char *)(v12 + 1216)) {
              gleSynchronizeBuffersInArray(v11, v12 + 40);
            }
            uint64_t result = gleDrawArraysOrElements_ExecCore(v11, a2, 0, a3, 1, v12 + 40, 1);
          }
        }
        else
        {
          uint64_t result = gleDoDrawDispatchCoreES2(v11, v18);
          if (result) {
            goto LABEL_20;
          }
        }
      }
      int v19 = *(_DWORD *)(*(void *)(v11 + 19296) + 316);
      if (*((_DWORD *)v8 + 870) != v19)
      {
        if (*(void *)(v11 + 28960))
        {
          uint64_t result = gleInvalidateCurrentDrawFramebufferTextures(v11);
          int v19 = *(_DWORD *)(*(void *)(v11 + 19296) + 316);
        }
        *((_DWORD *)v8 + 870) = v19;
      }
      return result;
    }
    unsigned int v21 = a3;
    switch((int)a2)
    {
      case 0:
      case 2:
        break;
      case 1:
        unsigned int v21 = a3 >> 1;
        break;
      case 3:
        unsigned int v21 = a3 - 1;
        break;
      case 4:
        unsigned int v21 = a3 / 3;
        break;
      case 5:
      case 6:
        unsigned int v21 = a3 - 2;
        break;
      default:
        unsigned int v21 = 0;
        break;
    }
    unsigned int v22 = v21 + *(_DWORD *)(v13 + 176);
    if (v22 <= *(_DWORD *)(v13 + 180))
    {
      *(_DWORD *)(v13 + 176) = v22;
      goto LABEL_8;
    }
LABEL_47:
    if (!*(_WORD *)(result + 29832))
    {
      __int16 v20 = 1282;
      goto LABEL_49;
    }
    return result;
  }
  if ((a3 & 0x80000000) != 0 && !*(_WORD *)(result + 29832))
  {
    __int16 v20 = 1281;
    goto LABEL_49;
  }
  return result;
}

unint64_t glDrawRangeElements_ES2Exec(unint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, int a6, uint64_t a7, __n128 a8, double a9, double a10)
{
  unint64_t v10 = result + 26320;
  if (a2 >= 7) {
    goto LABEL_43;
  }
  uint64_t v13 = result;
  uint64_t v14 = *(void *)(result + 26384);
  uint64_t v15 = *(void *)(result + 26432);
  if (*(__int16 *)(v15 + 42) != -1 && !*(unsigned char *)(v15 + 41))
  {
    if (!*(_WORD *)(result + 29832))
    {
      __int16 v21 = 1282;
      goto LABEL_40;
    }
    return result;
  }
  if (a6 != 5123 && a6 != 5121 && a6 != 5125)
  {
LABEL_43:
    if (!*(_WORD *)(result + 29832))
    {
      __int16 v21 = 1280;
LABEL_40:
      *(_WORD *)(result + 29832) = v21;
      return result;
    }
    return result;
  }
  if ((int)a5 <= 0)
  {
    if ((a5 & 0x80000000) == 0) {
      return result;
    }
  }
  else if (a4 >= a3)
  {
    uint64_t v16 = *(void *)(v14 + 1232);
    if (v16) {
      a7 += *(void *)(v16 + 136);
    }
    *(void *)(result + 26312) = a7;
    *(_WORD *)(result + 26336) = a6;
    *(_DWORD *)unint64_t v10 = a3;
    *(_DWORD *)(result + 26324) = a4;
    if ((a6 - 5121) > 4) {
      LOBYTE(v17) = 1;
    }
    else {
      int v17 = dword_227DC1EA8[a6 - 5121];
    }
    uint64_t result = gleDrawArraysOrElements_Entries_Body(result, 3, a2, v17, v14 + 40, a8, a9, a10);
    if (result == 2) {
      return result;
    }
    int v18 = result;
    if (!result
      || (uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, void, uint64_t, void, void, uint64_t, void))(v13 + 29232))(*(void *)(v13 + 29016), 3, a2, 0, a5, *(unsigned __int16 *)(v10 + 16), *(void *)(v13 + 26312), 1, 0), !result))
    {
      uint64_t v19 = (1 << a2);
      if ((*(_DWORD *)(v10 + 2332) & v19) != 0
        && (*(unsigned char *)(v10 + 2361) & 1) != 0
        && (*(unsigned char *)(v10 + 2363) & 2) != 0)
      {
        if (!*(unsigned char *)(v13 + 32482))
        {
LABEL_19:
          if (v18 && *(void *)(v14 + 912) && !*(unsigned char *)(v14 + 1216)) {
            gleSynchronizeBuffersInArray(v13, v14 + 40);
          }
          uint64_t result = gleDrawArraysOrElements_ExecCore(v13, a2, 0, a5, 3, v14 + 40, 1);
        }
      }
      else
      {
        uint64_t result = gleDoDrawDispatchCoreES2(v13, v19);
        if (result) {
          goto LABEL_19;
        }
      }
    }
    int v20 = *(_DWORD *)(*(void *)(v13 + 19296) + 316);
    if (*(_DWORD *)(v10 + 3496) != v20)
    {
      if (*(void *)(v13 + 28960))
      {
        uint64_t result = gleInvalidateCurrentDrawFramebufferTextures(v13);
        int v20 = *(_DWORD *)(*(void *)(v13 + 19296) + 316);
      }
      *(_DWORD *)(v10 + 3496) = v20;
    }
    return result;
  }
  if (!*(_WORD *)(result + 29832))
  {
    __int16 v21 = 1281;
    goto LABEL_40;
  }
  return result;
}

unint64_t glDrawArraysInstanced_ES2Exec(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __n128 a6, double a7, double a8)
{
  int v9 = (unsigned __int16 *)(result + 26336);
  if ((int)a5 <= 0)
  {
    if ((a5 & 0x80000000) == 0) {
      return result;
    }
LABEL_32:
    if (*(_WORD *)(result + 29832)) {
      return result;
    }
    __int16 v19 = 1281;
    goto LABEL_34;
  }
  if (a2 >= 7)
  {
    if (*(_WORD *)(result + 29832)) {
      return result;
    }
    __int16 v19 = 1280;
    goto LABEL_34;
  }
  if ((int)a4 <= 0)
  {
    if ((a4 & 0x80000000) == 0) {
      return result;
    }
    goto LABEL_32;
  }
  uint64_t v13 = result;
  uint64_t v14 = *(void *)(result + 26384);
  uint64_t v15 = *(void *)(result + 26432);
  if (*(__int16 *)(v15 + 42) != -1 && !*(unsigned char *)(v15 + 41))
  {
    unsigned int v20 = a4;
    switch((int)a2)
    {
      case 0:
      case 2:
        break;
      case 1:
        unsigned int v20 = a4 >> 1;
        break;
      case 3:
        unsigned int v20 = a4 - 1;
        break;
      case 4:
        unsigned int v20 = a4 / 3;
        break;
      case 5:
      case 6:
        unsigned int v20 = a4 - 2;
        break;
      default:
        unsigned int v20 = 0;
        break;
    }
    unsigned int v21 = *(_DWORD *)(v15 + 176) + v20 * a5;
    if (v21 <= *(_DWORD *)(v15 + 180))
    {
      *(_DWORD *)(v15 + 176) = v21;
      goto LABEL_6;
    }
    if (*(_WORD *)(result + 29832)) {
      return result;
    }
    __int16 v19 = 1282;
LABEL_34:
    *(_WORD *)(result + 29832) = v19;
    return result;
  }
LABEL_6:
  if (*v9 != 5375)
  {
    *(void *)(result + 26312) = 0;
    *int v9 = 5375;
  }
  uint64_t result = gleDrawArraysOrElements_Entries_Body(result, 3, a2, 1u, v14 + 40, a6, a7, a8);
  if (result != 2)
  {
    int v16 = result;
    if (!result
      || (uint64_t result = (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t, void, void, uint64_t, void))(v13 + 29232))(*(void *)(v13 + 29016), 0, a2, a3, a4, *v9, *(void *)(v13 + 26312), a5, 0), !result))
    {
      uint64_t v17 = (1 << a2);
      if ((*((_DWORD *)v9 + 579) & v17) != 0
        && (*((unsigned char *)v9 + 2345) & 1) != 0
        && (*((unsigned char *)v9 + 2347) & 2) != 0)
      {
        if (!*(unsigned char *)(v13 + 32482))
        {
LABEL_15:
          if (v16 && *(void *)(v14 + 912) && !*(unsigned char *)(v14 + 1216)) {
            gleSynchronizeBuffersInArray(v13, v14 + 40);
          }
          uint64_t result = gleDrawArraysOrElements_ExecCore(v13, a2, a3, a4, 0, v14 + 40, a5);
        }
      }
      else
      {
        uint64_t result = gleDoDrawDispatchCoreES2(v13, v17);
        if (result) {
          goto LABEL_15;
        }
      }
    }
    int v18 = *(_DWORD *)(*(void *)(v13 + 19296) + 316);
    if (*((_DWORD *)v9 + 870) != v18)
    {
      if (*(void *)(v13 + 28960))
      {
        uint64_t result = gleInvalidateCurrentDrawFramebufferTextures(v13);
        int v18 = *(_DWORD *)(*(void *)(v13 + 19296) + 316);
      }
      *((_DWORD *)v9 + 870) = v18;
    }
  }
  return result;
}

unint64_t glDrawElementsInstanced_ES2Exec(unint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, __n128 a7, double a8, double a9)
{
  unint64_t v10 = (unsigned __int16 *)(result + 26336);
  if ((int)a6 <= 0)
  {
    if ((a6 & 0x80000000) == 0) {
      return result;
    }
  }
  else
  {
    if (a2 >= 7) {
      goto LABEL_35;
    }
    uint64_t v13 = result;
    uint64_t v14 = *(void *)(result + 26384);
    uint64_t v15 = *(void *)(result + 26432);
    int v16 = *(unsigned __int16 *)(v15 + 42);
    if (v16 != 0xFFFF && !*(unsigned char *)(v15 + 41)) {
      goto LABEL_50;
    }
    if (a4 != 5123 && a4 != 5121 && a4 != 5125)
    {
LABEL_35:
      if (!*(_WORD *)(result + 29832))
      {
        __int16 v22 = 1280;
LABEL_52:
        *(_WORD *)(result + 29832) = v22;
        return result;
      }
      return result;
    }
    if ((int)a3 > 0)
    {
      if (v16 == 0xFFFF || *(unsigned char *)(v15 + 41))
      {
LABEL_9:
        uint64_t v17 = *(void *)(v14 + 1232);
        if (v17) {
          a5 += *(void *)(v17 + 136);
        }
        *(void *)(result + 26312) = a5;
        *unint64_t v10 = a4;
        if ((a4 - 5121) > 4) {
          LOBYTE(v18) = 1;
        }
        else {
          int v18 = dword_227DC1EA8[a4 - 5121];
        }
        uint64_t result = gleDrawArraysOrElements_Entries_Body(result, 3, a2, v18, v14 + 40, a7, a8, a9);
        if (result == 2) {
          return result;
        }
        int v19 = result;
        if (!result
          || (uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, void, uint64_t, void, void, uint64_t, void))(v13 + 29232))(*(void *)(v13 + 29016), 1, a2, 0, a3, *v10, *(void *)(v13 + 26312), a6, 0), !result))
        {
          uint64_t v20 = (1 << a2);
          if ((*((_DWORD *)v10 + 579) & v20) != 0
            && (*((unsigned char *)v10 + 2345) & 1) != 0
            && (*((unsigned char *)v10 + 2347) & 2) != 0)
          {
            if (!*(unsigned char *)(v13 + 32482))
            {
LABEL_21:
              if (v19 && *(void *)(v14 + 912) && !*(unsigned char *)(v14 + 1216)) {
                gleSynchronizeBuffersInArray(v13, v14 + 40);
              }
              uint64_t result = gleDrawArraysOrElements_ExecCore(v13, a2, 0, a3, 1, v14 + 40, a6);
            }
          }
          else
          {
            uint64_t result = gleDoDrawDispatchCoreES2(v13, v20);
            if (result) {
              goto LABEL_21;
            }
          }
        }
        int v21 = *(_DWORD *)(*(void *)(v13 + 19296) + 316);
        if (*((_DWORD *)v10 + 870) != v21)
        {
          if (*(void *)(v13 + 28960))
          {
            uint64_t result = gleInvalidateCurrentDrawFramebufferTextures(v13);
            int v21 = *(_DWORD *)(*(void *)(v13 + 19296) + 316);
          }
          *((_DWORD *)v10 + 870) = v21;
        }
        return result;
      }
      unsigned int v23 = a3;
      switch((int)a2)
      {
        case 0:
        case 2:
          break;
        case 1:
          unsigned int v23 = a3 >> 1;
          break;
        case 3:
          unsigned int v23 = a3 - 1;
          break;
        case 4:
          unsigned int v23 = a3 / 3;
          break;
        case 5:
        case 6:
          unsigned int v23 = a3 - 2;
          break;
        default:
          unsigned int v23 = 0;
          break;
      }
      unsigned int v24 = *(_DWORD *)(v15 + 176) + v23 * a6;
      if (v24 <= *(_DWORD *)(v15 + 180))
      {
        *(_DWORD *)(v15 + 176) = v24;
        goto LABEL_9;
      }
LABEL_50:
      if (!*(_WORD *)(result + 29832))
      {
        __int16 v22 = 1282;
        goto LABEL_52;
      }
      return result;
    }
    if ((a3 & 0x80000000) == 0) {
      return result;
    }
  }
  if (!*(_WORD *)(result + 29832))
  {
    __int16 v22 = 1281;
    goto LABEL_52;
  }
  return result;
}

uint64_t gleUpdateDrawArraysFuncs(uint64_t result)
{
  int v1 = *(unsigned __int16 *)(result + 26340);
  if (!*(_WORD *)(result + 26340)) {
    return result;
  }
  if (!*(unsigned char *)(result + 32481))
  {
    if (v1 == 1) {
      return result;
    }
    goto LABEL_31;
  }
  uint64_t v2 = *(void *)(result + 26384);
  if ((*(unsigned char *)(result + 17692) || (*(_WORD *)(v2 + 922) & 0xFFFE) == 0x85BE)
    && *(_DWORD *)(v2 + 924)
    && *(void *)(v2 + 928))
  {
    if (v1 != 1) {
      return result;
    }
    goto LABEL_11;
  }
  uint64_t v3 = *(void *)(v2 + 904);
  uint64_t v4 = *(void *)(v2 + 912) & v3;
  if (v1 != 1)
  {
    if (v3 == v4) {
      return result;
    }
LABEL_31:
    int v12 = *(unsigned __int8 *)(result + 32501);
    uint64_t v13 = *(void **)(result + 28984);
    uint64_t v14 = *(void **)(result + 28976);
    if (v13[65]) {
      uint64_t v15 = *(void *)(result + 28984);
    }
    else {
      uint64_t v15 = *(void *)(result + 28976);
    }
    if ((v12 - 3) > 1)
    {
      *(void *)(v15 + 520) = glDrawArrays_IMM_Exec;
      if (!v13[67]) {
        uint64_t v13 = v14;
      }
      v13[67] = glDrawElements_IMM_Exec;
    }
    else
    {
      *(void *)(v15 + 520) = glDrawArrays_IMM_ES2Exec;
      if (v13[67]) {
        int v16 = v13;
      }
      else {
        int v16 = v14;
      }
      v16[67] = glDrawElements_IMM_ES2Exec;
      if (v13[762]) {
        uint64_t v17 = v13;
      }
      else {
        uint64_t v17 = v14;
      }
      v17[762] = glDrawArraysInstanced_IMM_ES2Exec;
      if (v13[763]) {
        int v18 = v13;
      }
      else {
        int v18 = v14;
      }
      v18[763] = glDrawElementsInstanced_IMM_ES2Exec;
      if (v12 == 4)
      {
        if (!v13[405]) {
          uint64_t v13 = v14;
        }
        v13[405] = glDrawRangeElements_IMM_ES2Exec;
      }
    }
    __int16 v19 = 1;
    goto LABEL_56;
  }
  if (v3 == v4)
  {
LABEL_11:
    int v5 = *(unsigned __int8 *)(result + 32501);
    uint64_t v6 = *(void **)(result + 28984);
    uint64_t v7 = *(void **)(result + 28976);
    if (v6[65]) {
      uint64_t v8 = *(void *)(result + 28984);
    }
    else {
      uint64_t v8 = *(void *)(result + 28976);
    }
    if ((v5 - 3) > 1)
    {
      *(void *)(v8 + 520) = glDrawArrays_ACC_Exec;
      if (!v6[67]) {
        uint64_t v6 = v7;
      }
      v6[67] = glDrawElements_ACC_Exec;
    }
    else
    {
      *(void *)(v8 + 520) = glDrawArrays_ACC_ES2Exec;
      if (v6[67]) {
        int v9 = v6;
      }
      else {
        int v9 = v7;
      }
      v9[67] = glDrawElements_ACC_ES2Exec;
      if (v6[762]) {
        unint64_t v10 = v6;
      }
      else {
        unint64_t v10 = v7;
      }
      v10[762] = glDrawArraysInstanced_ACC_ES2Exec;
      if (v6[763]) {
        uint64_t v11 = v6;
      }
      else {
        uint64_t v11 = v7;
      }
      v11[763] = glDrawElementsInstanced_ACC_ES2Exec;
      if (v5 == 4)
      {
        if (!v6[405]) {
          uint64_t v6 = v7;
        }
        v6[405] = glDrawRangeElements_ACC_ES2Exec;
      }
    }
    __int16 v19 = 2;
LABEL_56:
    *(_WORD *)(result + 26340) = v19;
  }
  return result;
}

uint64_t gleResetDrawArraysFuncs(uint64_t result)
{
  if (!*(void *)(result + 27648) && *(_WORD *)(result + 26340))
  {
    int v1 = *(unsigned __int8 *)(result + 32501);
    uint64_t v2 = *(void **)(result + 28984);
    uint64_t v3 = *(void **)(result + 28976);
    if (v2[65]) {
      uint64_t v4 = *(void *)(result + 28984);
    }
    else {
      uint64_t v4 = *(void *)(result + 28976);
    }
    if ((v1 - 3) > 1)
    {
      *(void *)(v4 + 520) = glDrawArrays_Exec;
      if (!v2[67]) {
        uint64_t v2 = v3;
      }
      v2[67] = glDrawElements_Exec;
    }
    else
    {
      *(void *)(v4 + 520) = glDrawArrays_ES2Exec;
      if (v2[67]) {
        int v5 = v2;
      }
      else {
        int v5 = v3;
      }
      v5[67] = glDrawElements_ES2Exec;
      if (v2[762]) {
        uint64_t v6 = v2;
      }
      else {
        uint64_t v6 = v3;
      }
      v6[762] = glDrawArraysInstanced_ES2Exec;
      if (v2[763]) {
        uint64_t v7 = v2;
      }
      else {
        uint64_t v7 = v3;
      }
      v7[763] = glDrawElementsInstanced_ES2Exec;
      if (v1 == 4)
      {
        if (!v2[405]) {
          uint64_t v2 = v3;
        }
        v2[405] = glDrawRangeElements_ES2Exec;
      }
    }
    *(_WORD *)(result + 26340) = 0;
  }
  return result;
}

uint64_t gleDrawArraysOrElements_ExecCore(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7)
{
  uint64_t v11 = result;
  uint64_t v58 = *MEMORY[0x263EF8340];
  int v12 = (__int16 *)(result + 26124);
  if (a5 == 3)
  {
    uint64_t v13 = *(void *)(result + 29032);
    if (*(unsigned char *)(v13 + 105))
    {
      if (*(unsigned char *)(result + 32481))
      {
        uint64_t v14 = *(unsigned int *)(result + 26320);
        uint64_t v15 = *(unsigned int *)(result + 26324);
        int v16 = v15 - v14;
        if ((int)v15 - (int)v14 < (int)a4
          && v16 >= *(_DWORD *)(v13 + 28)
          && v16 < *(_DWORD *)(v13 + 32)
          && *(_DWORD *)(v13 + 36) > (int)a4)
        {
          uint64_t v54 = *(void *)(result + 26312);
          uint64_t v17 = *(unsigned __int16 *)(result + 26336);
          uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(result + 29216))(*(void *)(result + 29016), a2, v14, v15, v17, a4);
          if (result)
          {
            uint64_t v56 = *(void *)(v11 + 28152);
            uint64_t v18 = *(void *)(v11 + 26008);
            *(void *)(v11 + 28152) = gleNoopFlushFunc;
            *(void *)(v11 + 26312) = 0;
            v12[106] = 5375;
            if (v12[107] == 5375)
            {
              __int16 v19 = *(uint64_t (**)(uint64_t, int, int))(v11 + 26184);
            }
            else
            {
              __int16 v19 = gleSetVertexArrayFunc;
              *(void *)(v11 + 26184) = gleSetVertexArrayFunc;
              *(void *)(v11 + 26192) = gleSetVertexArrayFunc;
              v12[107] = 5375;
            }
            uint64_t v49 = v16 + 1;
            *((_DWORD *)v12 + 635) = v49;
            uint64_t v50 = v12[5];
            *(void *)(v11 + 26008) = result;
            *(void *)(v11 + 26040) = result + v49 * v50;
            v19(v11, v14, a3);
            uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 29224))(*(void *)(v11 + 29016), a2, v14, v15, v17, a4, v54);
            *(void *)(v11 + 26008) = v18;
            *(void *)(v11 + 28152) = v56;
            goto LABEL_71;
          }
        }
      }
    }
  }
  if ((a4 & 0x80000000) == 0)
  {
    int v20 = (unsigned __int16)v12[106];
    if ((unsigned __int16)v12[107] != v20)
    {
      *(void *)(v11 + 26184) = gleSetVertexArrayFunc;
      *(void *)(v11 + 26192) = gleSetVertexArrayFunc;
      v12[107] = v20;
    }
    memset(v57, 0, sizeof(v57));
    if (a7 >= 2)
    {
      uint64_t v21 = 0;
      __int16 v22 = (int *)(a6 + 488);
      do
      {
        int v23 = *v22;
        v22 += 6;
        if (v23) {
          *(void *)((char *)v57 + v21) = *(void *)(a6 + 1048 + v21);
        }
        v21 += 8;
      }
      while (v21 != 128);
    }
    uint64_t v53 = v11 + 28024;
    uint64_t v51 = a6;
    uint64_t v52 = (int *)(a6 + 496);
    uint64_t v24 = a6 + 1048;
LABEL_20:
    if (*(unsigned char *)(v11 + 17716) && v12[106] != 5375)
    {
      int v25 = 0;
    }
    else
    {
      *((_DWORD *)v12 + 635) = a4;
      v12[1269] = a2;
      v12[1268] = a2;
      uint64_t result = (*(uint64_t (**)(uint64_t))(v53 + 8 * a2))(v11);
      int v25 = a4;
    }
    uint64_t v26 = 0;
    while (1)
    {
      int v27 = v25 - v26;
      if (v25 != v26) {
        goto LABEL_25;
      }
      if (v26 == a4) {
        goto LABEL_55;
      }
      int v32 = (unsigned __int16)v12[106];
      if (v32 == 5123)
      {
        if ((int)v26 >= (int)a4) {
          goto LABEL_53;
        }
        uint64_t v36 = (unsigned __int16 *)(*(void *)(v11 + 26312) + 2 * (int)v26);
        uint64_t v37 = (int)a4 - (uint64_t)(int)v26;
        int v25 = v26;
        while (1)
        {
          int v38 = *v36++;
          if (v38 == (unsigned __int16)*(_DWORD *)(v11 + 17720)) {
            break;
          }
          ++v25;
          if (!--v37)
          {
LABEL_51:
            int v25 = a4;
            break;
          }
        }
      }
      else if (v32 == 5121)
      {
        if ((int)v26 >= (int)a4) {
          goto LABEL_53;
        }
        unsigned int v33 = (unsigned __int8 *)(*(void *)(v11 + 26312) + (int)v26);
        uint64_t v34 = (int)a4 - (uint64_t)(int)v26;
        int v25 = v26;
        while (1)
        {
          int v35 = *v33++;
          if (v35 == *(_DWORD *)(v11 + 17720)) {
            break;
          }
          ++v25;
          if (!--v34) {
            goto LABEL_51;
          }
        }
      }
      else
      {
        if ((int)v26 >= (int)a4) {
          goto LABEL_53;
        }
        int v39 = (int *)(*(void *)(v11 + 26312) + 4 * (int)v26);
        uint64_t v40 = (int)a4 - (uint64_t)(int)v26;
        int v25 = v26;
        while (1)
        {
          int v41 = *v39++;
          if (v41 == *(_DWORD *)(v11 + 17720)) {
            break;
          }
          ++v25;
          if (!--v40) {
            goto LABEL_51;
          }
        }
      }
      int v27 = v25 - v26;
      if (v25 == v26)
      {
LABEL_53:
        uint64_t v26 = (v26 + 1);
        int v25 = v26;
      }
      else
      {
        *((_DWORD *)v12 + 635) = v27;
        v12[1269] = a2;
        v12[1268] = a2;
        (*(void (**)(uint64_t))(v53 + 8 * a2))(v11);
LABEL_25:
        uint64_t v28 = *(void *)(v11 + 26008);
        int v29 = *v12;
        int v30 = (int)(*(void *)(v11 + 26016) - v28) / v29;
        uint64_t v31 = v28 + v27 * v29;
        if (v30 <= v27) {
          uint64_t v31 = *(void *)(v11 + 26016);
        }
        if (v30 < v27) {
          int v27 = v30;
        }
        *(void *)(v11 + 26040) = v31;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 26184))(v11, v26, a3);
        uint64_t v26 = (v27 + v26);
        if (v25 == a4 && v26 == v25)
        {
LABEL_55:
          if (v12[1268] != -1)
          {
            v12[1268] = -1;
            uint64_t result = (*(uint64_t (**)(uint64_t))(v11 + 28144))(v11);
          }
          int v42 = *(_DWORD *)(v11 + 9208) + 1;
          if (v42 < a7)
          {
            uint64_t v43 = 0;
            *(_DWORD *)(v11 + 9208) = v42;
            uint64_t v44 = v52;
            do
            {
              unsigned int v45 = *(v44 - 2);
              if (v45 && !(v42 % v45)) {
                *(void *)(v24 + v43) += *v44;
              }
              v44 += 6;
              v43 += 8;
            }
            while (v43 != 128);
            goto LABEL_20;
          }
          if (a7 >= 2)
          {
            uint64_t v46 = 0;
            unsigned int v47 = (int *)(v51 + 488);
            do
            {
              int v48 = *v47;
              v47 += 6;
              if (v48) {
                *(void *)(v51 + 1048 + v46) = *(void *)((char *)v57 + v46);
              }
              v46 += 8;
            }
            while (v46 != 128);
            *(_DWORD *)(v11 + 9208) = 0;
          }
LABEL_71:
          *((_DWORD *)v12 + 635) = 0;
          return result;
        }
        if (v26 == v25)
        {
          v12[1268] = -1;
          uint64_t result = (*(uint64_t (**)(uint64_t))(v11 + 28144))(v11);
          uint64_t v26 = ++v25;
        }
        else
        {
          uint64_t result = (*(uint64_t (**)(uint64_t))(v11 + 28152))(v11);
        }
      }
    }
  }
  return result;
}

uint64_t gleDrawArraysOrElements_Entries_Body(unint64_t a1, int a2, char a3, unsigned __int8 a4, uint64_t a5, __n128 a6, double a7, double a8)
{
  uint64_t v11 = (unsigned __int8 *)(a1 + 32476);
  int v12 = (_WORD *)(a1 + 26340);
  if (*(void *)(a5 + 904))
  {
    *(_DWORD *)(a1 + 28652) = 0;
    *(_DWORD *)(a1 + 1532) |= 0x1000u;
  }
  uint64_t v13 = (1 << a3);
  if (!a2 && *v11 != 255)
  {
    *uint64_t v11 = -1;
    *(_DWORD *)(a1 + 28652) = 0;
    *(_DWORD *)(a1 + 1548) |= 0x4000u;
  }
  if ((*(_DWORD *)(a1 + 28652) & v13) != 0
    && (*(unsigned char *)(a1 + 28681) & a4) != 0
    && (*(unsigned char *)(a1 + 28683) & 4) != 0)
  {
    if (!*(unsigned char *)(a1 + 32482)) {
      goto LABEL_16;
    }
    return 2;
  }
  if ((a2 - 3) >= 2)
  {
    if (a2 == 1)
    {
      if (!gleDoDrawDispatchCoreGL3(a1, v13, a4, 4u, a6.n128_f64[0], a7, a8)) {
        return 2;
      }
      goto LABEL_16;
    }
    if (gleDoDrawDispatchCore(a1, v13, a4, 4u, a6, a7, a8)) {
      goto LABEL_16;
    }
    return 2;
  }
  if (!gleDoDrawDispatchCoreES2(a1, v13)) {
    return 2;
  }
LABEL_16:
  uint64_t v14 = (unsigned char *)(a1 + 17692);
  if (a2 == 3)
  {
    if (v11[5]
      && ((*v14 || (*(_WORD *)(a5 + 882) & 0xFFFE) == 0x85BE) && *(_DWORD *)(a5 + 884) && *(void *)(a5 + 888)
       || (*(void *)(a5 + 864) & ~*(void *)(a5 + 872)) == 0))
    {
      uint64_t v15 = *(void **)(a1 + 28984);
      int v16 = *(void **)(a1 + 28976);
      if (v15[65]) {
        uint64_t v17 = *(void *)(a1 + 28984);
      }
      else {
        uint64_t v17 = *(void *)(a1 + 28976);
      }
      *(void *)(v17 + 520) = glDrawArrays_ACC_ES2Exec;
      if (v15[67]) {
        uint64_t v18 = v15;
      }
      else {
        uint64_t v18 = v16;
      }
      v18[67] = glDrawElements_ACC_ES2Exec;
      int v19 = v11[25];
      if ((v19 - 3) <= 1)
      {
        int v20 = v15[762] ? v15 : v16;
        v20[762] = glDrawArraysInstanced_ACC_ES2Exec;
        uint64_t v21 = v15[763] ? v15 : v16;
        v21[763] = glDrawElementsInstanced_ACC_ES2Exec;
        if (v19 == 4)
        {
          if (!v15[405]) {
            uint64_t v15 = v16;
          }
          v15[405] = glDrawRangeElements_ACC_ES2Exec;
        }
      }
LABEL_52:
      *int v12 = 2;
      return 1;
    }
    uint64_t v26 = *(void **)(a1 + 28984);
    int v27 = *(void **)(a1 + 28976);
    if (v26[65]) {
      uint64_t v28 = *(void *)(a1 + 28984);
    }
    else {
      uint64_t v28 = *(void *)(a1 + 28976);
    }
    *(void *)(v28 + 520) = glDrawArrays_IMM_ES2Exec;
    if (v26[67]) {
      int v29 = v26;
    }
    else {
      int v29 = v27;
    }
    v29[67] = glDrawElements_IMM_ES2Exec;
    int v30 = v11[25];
    if ((v30 - 3) <= 1)
    {
      uint64_t v31 = v26[762] ? v26 : v27;
      v31[762] = glDrawArraysInstanced_IMM_ES2Exec;
      int v32 = v26[763] ? v26 : v27;
      v32[763] = glDrawElementsInstanced_IMM_ES2Exec;
      if (v30 == 4)
      {
        if (!v26[405]) {
          uint64_t v26 = v27;
        }
        v26[405] = glDrawRangeElements_IMM_ES2Exec;
      }
    }
  }
  else
  {
    if (v11[5]
      && ((*v14 || (*(_WORD *)(a5 + 882) & 0xFFFE) == 0x85BE) && *(_DWORD *)(a5 + 884) && *(void *)(a5 + 888)
       || (*(void *)(a5 + 864) & ~*(void *)(a5 + 872)) == 0))
    {
      uint64_t v22 = *(void *)(a1 + 28984);
      uint64_t v23 = *(void *)(a1 + 28976);
      if (*(void *)(v22 + 520)) {
        uint64_t v24 = *(void *)(a1 + 28984);
      }
      else {
        uint64_t v24 = *(void *)(a1 + 28976);
      }
      *(void *)(v24 + 520) = glDrawArrays_ACC_Exec;
      if (!*(void *)(v22 + 536)) {
        uint64_t v22 = v23;
      }
      *(void *)(v22 + 536) = glDrawElements_ACC_Exec;
      goto LABEL_52;
    }
    uint64_t v33 = *(void *)(a1 + 28984);
    uint64_t v34 = *(void *)(a1 + 28976);
    if (*(void *)(v33 + 520)) {
      uint64_t v35 = *(void *)(a1 + 28984);
    }
    else {
      uint64_t v35 = *(void *)(a1 + 28976);
    }
    *(void *)(v35 + 520) = glDrawArrays_IMM_Exec;
    if (!*(void *)(v33 + 536)) {
      uint64_t v33 = v34;
    }
    *(void *)(v33 + 536) = glDrawElements_IMM_Exec;
  }
  *int v12 = 1;
  if (*(void *)(a5 + 872) && !*(unsigned char *)(a5 + 1176)) {
    gleSynchronizeBuffersInArray(a1, a5);
  }
  return 0;
}

uint64_t glDrawArrays_ACC_ES2Exec(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v7 = (unsigned __int16 *)(result + 26336);
  if (a2 >= 7)
  {
    if (*(_WORD *)(result + 29832)) {
      return result;
    }
    __int16 v20 = 1280;
    goto LABEL_49;
  }
  if ((int)a4 <= 0)
  {
    if ((a4 & 0x80000000) == 0 || *(_WORD *)(result + 29832)) {
      return result;
    }
    __int16 v20 = 1281;
    goto LABEL_49;
  }
  uint64_t v11 = result;
  uint64_t v12 = *(void *)(result + 26384);
  uint64_t v13 = *(void *)(result + 26432);
  if (*(__int16 *)(v13 + 42) != -1 && !*(unsigned char *)(v13 + 41))
  {
    unsigned int v21 = a4;
    switch((int)a2)
    {
      case 0:
      case 2:
        break;
      case 1:
        unsigned int v21 = a4 >> 1;
        break;
      case 3:
        unsigned int v21 = a4 - 1;
        break;
      case 4:
        unsigned int v21 = a4 / 3;
        break;
      case 5:
      case 6:
        unsigned int v21 = a4 - 2;
        break;
      default:
        unsigned int v21 = 0;
        break;
    }
    unsigned int v22 = v21 + *(_DWORD *)(v13 + 176);
    if (v22 <= *(_DWORD *)(v13 + 180))
    {
      *(_DWORD *)(v13 + 176) = v22;
      goto LABEL_5;
    }
    if (*(_WORD *)(result + 29832)) {
      return result;
    }
    __int16 v20 = 1282;
LABEL_49:
    *(_WORD *)(result + 29832) = v20;
    return result;
  }
LABEL_5:
  if (*v7 != 5375)
  {
    *(void *)(result + 26312) = 0;
    *uint64_t v7 = 5375;
  }
  uint64_t v14 = (unsigned char *)(result + 32481);
  if (*(void *)(v12 + 944))
  {
    int v15 = 0;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1532) |= 0x1000u;
  }
  else
  {
    int v15 = *(_DWORD *)(result + 28652);
  }
  int v16 = 1 << a2;
  if ((v15 & (1 << a2)) != 0 && (*(unsigned char *)(result + 28681) & 1) != 0 && (*(unsigned char *)(result + 28683) & 4) != 0)
  {
    if (*(unsigned char *)(result + 32482)) {
      return result;
    }
  }
  else
  {
    uint64_t result = gleDoDrawDispatchCoreES2(result, 1 << a2, 1u, 4u, a5, a6, a7);
    if (!result) {
      return result;
    }
  }
  if (!*v14)
  {
    uint64_t v17 = *(void *)(v12 + 912);
LABEL_23:
    if (v17 && !*(unsigned char *)(v12 + 1216)) {
      uint64_t result = gleSynchronizeBuffersInArray(v11, v12 + 40);
    }
    char v18 = 1;
    goto LABEL_27;
  }
  if (!*(unsigned char *)(v11 + 17692) && (*(_WORD *)(v12 + 922) & 0xFFFE) != 0x85BE
    || !*(_DWORD *)(v12 + 924)
    || !*(void *)(v12 + 928))
  {
    uint64_t v17 = *(void *)(v12 + 912);
    if ((*(void *)(v12 + 904) & ~v17) != 0) {
      goto LABEL_23;
    }
  }
  uint64_t result = (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t, void, void, uint64_t, void))(v11 + 29232))(*(void *)(v11 + 29016), 0, a2, a3, a4, *v7, *(void *)(v11 + 26312), 1, 0);
  if (result) {
    goto LABEL_36;
  }
  char v18 = 0;
LABEL_27:
  if ((*((_DWORD *)v7 + 579) & v16) != 0 && (*((unsigned char *)v7 + 2345) & 1) != 0 && (*((unsigned char *)v7 + 2347) & 2) != 0)
  {
    if (!v14[1])
    {
LABEL_31:
      if ((v18 & 1) == 0 && *(void *)(v12 + 912) && !*(unsigned char *)(v12 + 1216)) {
        gleSynchronizeBuffersInArray(v11, v12 + 40);
      }
      uint64_t result = gleDrawArraysOrElements_ExecCore(v11, a2, a3, a4, 0, v12 + 40, 1);
    }
  }
  else
  {
    uint64_t result = gleDoDrawDispatchCoreES2(v11, 1 << a2, 1u, 2u, a5, a6, a7);
    if (result) {
      goto LABEL_31;
    }
  }
LABEL_36:
  int v19 = *(_DWORD *)(*(void *)(v11 + 19296) + 316);
  if (*((_DWORD *)v7 + 870) != v19)
  {
    if (*(void *)(v11 + 28960))
    {
      uint64_t result = gleInvalidateCurrentDrawFramebufferTextures(v11);
      int v19 = *(_DWORD *)(*(void *)(v11 + 19296) + 316);
    }
    *((_DWORD *)v7 + 870) = v19;
  }
  return result;
}

uint64_t glDrawElements_ACC_ES2Exec(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  int v5 = (unsigned __int16 *)(result + 26336);
  if (a2 >= 7)
  {
LABEL_52:
    if (!*(_WORD *)(result + 29832))
    {
      __int16 v20 = 1280;
LABEL_67:
      *(_WORD *)(result + 29832) = v20;
      return result;
    }
    return result;
  }
  uint64_t v8 = result;
  uint64_t v9 = *(void *)(result + 26384);
  uint64_t v10 = *(void *)(result + 26432);
  int v11 = *(unsigned __int16 *)(v10 + 42);
  if (v11 != 0xFFFF && !*(unsigned char *)(v10 + 41)) {
    goto LABEL_65;
  }
  if (a4 != 5123 && a4 != 5121 && a4 != 5125) {
    goto LABEL_52;
  }
  if ((int)a3 > 0)
  {
    if (v11 == 0xFFFF || *(unsigned char *)(v10 + 41))
    {
LABEL_8:
      uint64_t v12 = *(void *)(v9 + 1232);
      if (v12) {
        a5 += *(void *)(v12 + 136);
      }
      *(void *)(result + 26312) = a5;
      *int v5 = a4;
      if ((a4 - 5121) > 4) {
        LOBYTE(v13) = 1;
      }
      else {
        int v13 = dword_227DC1EA8[a4 - 5121];
      }
      uint64_t v14 = (unsigned char *)(result + 32481);
      if (*(void *)(v9 + 944))
      {
        int v15 = 0;
        *(_DWORD *)(result + 28652) = 0;
        *(_DWORD *)(result + 1532) |= 0x1000u;
      }
      else
      {
        int v15 = *(_DWORD *)(result + 28652);
      }
      int v16 = 1 << a2;
      if ((v15 & (1 << a2)) != 0
        && (v13 & *(unsigned char *)(result + 28681)) != 0
        && (*(unsigned char *)(result + 28683) & 4) != 0)
      {
        if (*(unsigned char *)(result + 32482)) {
          return result;
        }
      }
      else
      {
        uint64_t result = gleDoDrawDispatchCoreES2(result, (1 << a2));
        if (!result) {
          return result;
        }
      }
      if (*v14)
      {
        if ((*(unsigned char *)(v8 + 17692) || (*(_WORD *)(v9 + 922) & 0xFFFE) == 0x85BE)
          && *(_DWORD *)(v9 + 924)
          && *(void *)(v9 + 928)
          || (uint64_t v17 = *(void *)(v9 + 912), (*(void *)(v9 + 904) & ~v17) == 0))
        {
          uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, void, uint64_t, void, void, uint64_t, void))(v8 + 29232))(*(void *)(v8 + 29016), 1, a2, 0, a3, *v5, *(void *)(v8 + 26312), 1, 0);
          if (result) {
            goto LABEL_42;
          }
          char v18 = 0;
LABEL_33:
          if ((*((_DWORD *)v5 + 579) & v16) != 0
            && (*((unsigned char *)v5 + 2345) & 1) != 0
            && (*((unsigned char *)v5 + 2347) & 2) != 0)
          {
            if (!v14[1])
            {
LABEL_37:
              if ((v18 & 1) == 0 && *(void *)(v9 + 912) && !*(unsigned char *)(v9 + 1216)) {
                gleSynchronizeBuffersInArray(v8, v9 + 40);
              }
              uint64_t result = gleDrawArraysOrElements_ExecCore(v8, a2, 0, a3, 1, v9 + 40, 1);
            }
          }
          else
          {
            uint64_t result = gleDoDrawDispatchCoreES2(v8, (1 << a2));
            if (result) {
              goto LABEL_37;
            }
          }
LABEL_42:
          int v19 = *(_DWORD *)(*(void *)(v8 + 19296) + 316);
          if (*((_DWORD *)v5 + 870) != v19)
          {
            if (*(void *)(v8 + 28960))
            {
              uint64_t result = gleInvalidateCurrentDrawFramebufferTextures(v8);
              int v19 = *(_DWORD *)(*(void *)(v8 + 19296) + 316);
            }
            *((_DWORD *)v5 + 870) = v19;
          }
          return result;
        }
      }
      else
      {
        uint64_t v17 = *(void *)(v9 + 912);
      }
      if (v17 && !*(unsigned char *)(v9 + 1216)) {
        uint64_t result = gleSynchronizeBuffersInArray(v8, v9 + 40);
      }
      char v18 = 1;
      goto LABEL_33;
    }
    unsigned int v21 = a3;
    switch((int)a2)
    {
      case 0:
      case 2:
        break;
      case 1:
        unsigned int v21 = a3 >> 1;
        break;
      case 3:
        unsigned int v21 = a3 - 1;
        break;
      case 4:
        unsigned int v21 = a3 / 3;
        break;
      case 5:
      case 6:
        unsigned int v21 = a3 - 2;
        break;
      default:
        unsigned int v21 = 0;
        break;
    }
    unsigned int v22 = v21 + *(_DWORD *)(v10 + 176);
    if (v22 <= *(_DWORD *)(v10 + 180))
    {
      *(_DWORD *)(v10 + 176) = v22;
      goto LABEL_8;
    }
LABEL_65:
    if (!*(_WORD *)(result + 29832))
    {
      __int16 v20 = 1282;
      goto LABEL_67;
    }
    return result;
  }
  if ((a3 & 0x80000000) != 0 && !*(_WORD *)(result + 29832))
  {
    __int16 v20 = 1281;
    goto LABEL_67;
  }
  return result;
}

uint64_t glDrawArraysInstanced_ACC_ES2Exec(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = (unsigned __int16 *)(result + 26336);
  if ((int)a5 <= 0)
  {
    if ((a5 & 0x80000000) == 0) {
      return result;
    }
LABEL_50:
    if (*(_WORD *)(result + 29832)) {
      return result;
    }
    __int16 v20 = 1281;
    goto LABEL_52;
  }
  if (a2 >= 7)
  {
    if (*(_WORD *)(result + 29832)) {
      return result;
    }
    __int16 v20 = 1280;
    goto LABEL_52;
  }
  if ((int)a4 <= 0)
  {
    if ((a4 & 0x80000000) == 0) {
      return result;
    }
    goto LABEL_50;
  }
  uint64_t v10 = result;
  uint64_t v11 = *(void *)(result + 26384);
  uint64_t v12 = *(void *)(result + 26432);
  if (*(__int16 *)(v12 + 42) != -1 && !*(unsigned char *)(v12 + 41))
  {
    unsigned int v21 = a4;
    switch((int)a2)
    {
      case 0:
      case 2:
        break;
      case 1:
        unsigned int v21 = a4 >> 1;
        break;
      case 3:
        unsigned int v21 = a4 - 1;
        break;
      case 4:
        unsigned int v21 = a4 / 3;
        break;
      case 5:
      case 6:
        unsigned int v21 = a4 - 2;
        break;
      default:
        unsigned int v21 = 0;
        break;
    }
    unsigned int v22 = *(_DWORD *)(v12 + 176) + v21 * a5;
    if (v22 <= *(_DWORD *)(v12 + 180))
    {
      *(_DWORD *)(v12 + 176) = v22;
      goto LABEL_6;
    }
    if (*(_WORD *)(result + 29832)) {
      return result;
    }
    __int16 v20 = 1282;
LABEL_52:
    *(_WORD *)(result + 29832) = v20;
    return result;
  }
LABEL_6:
  if (*v6 != 5375)
  {
    *(void *)(result + 26312) = 0;
    unsigned __int16 *v6 = 5375;
  }
  int v13 = (unsigned char *)(result + 32481);
  if (*(void *)(v11 + 944))
  {
    int v14 = 0;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1532) |= 0x1000u;
  }
  else
  {
    int v14 = *(_DWORD *)(result + 28652);
  }
  int v15 = 1 << a2;
  if ((v14 & (1 << a2)) != 0 && (*(unsigned char *)(result + 28681) & 1) != 0 && (*(unsigned char *)(result + 28683) & 4) != 0)
  {
    if (*(unsigned char *)(result + 32482)) {
      return result;
    }
  }
  else
  {
    uint64_t result = gleDoDrawDispatchCoreES2(result, (1 << a2));
    if (!result) {
      return result;
    }
  }
  uint64_t v23 = v11 + 40;
  if (!*v13)
  {
    uint64_t v16 = *(void *)(v11 + 912);
LABEL_24:
    uint64_t v17 = a3;
    if (v16 && !*(unsigned char *)(v11 + 1216)) {
      uint64_t result = gleSynchronizeBuffersInArray(v10, v23);
    }
    char v18 = 1;
    goto LABEL_28;
  }
  if (!*(unsigned char *)(v10 + 17692) && (*(_WORD *)(v11 + 922) & 0xFFFE) != 0x85BE
    || !*(_DWORD *)(v11 + 924)
    || !*(void *)(v11 + 928))
  {
    uint64_t v16 = *(void *)(v11 + 912);
    if ((*(void *)(v11 + 904) & ~v16) != 0) {
      goto LABEL_24;
    }
  }
  uint64_t v17 = a3;
  uint64_t result = (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t, void, void, uint64_t, void, uint64_t))(v10 + 29232))(*(void *)(v10 + 29016), 0, a2, a3, a4, *v6, *(void *)(v10 + 26312), a5, 0, v23);
  if (result) {
    goto LABEL_37;
  }
  char v18 = 0;
LABEL_28:
  if ((*((_DWORD *)v6 + 579) & v15) != 0 && (*((unsigned char *)v6 + 2345) & 1) != 0 && (*((unsigned char *)v6 + 2347) & 2) != 0)
  {
    if (!v13[1])
    {
LABEL_32:
      if ((v18 & 1) == 0 && *(void *)(v11 + 912) && !*(unsigned char *)(v11 + 1216)) {
        gleSynchronizeBuffersInArray(v10, v23);
      }
      uint64_t result = gleDrawArraysOrElements_ExecCore(v10, a2, v17, a4, 0, v23, a5);
    }
  }
  else
  {
    uint64_t result = gleDoDrawDispatchCoreES2(v10, (1 << a2));
    if (result) {
      goto LABEL_32;
    }
  }
LABEL_37:
  int v19 = *(_DWORD *)(*(void *)(v10 + 19296) + 316);
  if (*((_DWORD *)v6 + 870) != v19)
  {
    if (*(void *)(v10 + 28960))
    {
      uint64_t result = gleInvalidateCurrentDrawFramebufferTextures(v10);
      int v19 = *(_DWORD *)(*(void *)(v10 + 19296) + 316);
    }
    *((_DWORD *)v6 + 870) = v19;
  }
  return result;
}

uint64_t glDrawElementsInstanced_ACC_ES2Exec(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = (unsigned __int16 *)(result + 26336);
  if ((int)a6 <= 0)
  {
    if ((a6 & 0x80000000) == 0) {
      return result;
    }
  }
  else
  {
    if (a2 >= 7) {
      goto LABEL_53;
    }
    uint64_t v10 = result;
    uint64_t v11 = *(void *)(result + 26384);
    uint64_t v12 = *(void *)(result + 26432);
    int v13 = *(unsigned __int16 *)(v12 + 42);
    if (v13 != 0xFFFF && !*(unsigned char *)(v12 + 41)) {
      goto LABEL_68;
    }
    if (a4 != 5123 && a4 != 5121 && a4 != 5125)
    {
LABEL_53:
      if (!*(_WORD *)(result + 29832))
      {
        __int16 v22 = 1280;
LABEL_70:
        *(_WORD *)(result + 29832) = v22;
        return result;
      }
      return result;
    }
    if ((int)a3 > 0)
    {
      if (v13 == 0xFFFF || *(unsigned char *)(v12 + 41))
      {
LABEL_9:
        uint64_t v14 = *(void *)(v11 + 1232);
        if (v14) {
          a5 += *(void *)(v14 + 136);
        }
        *(void *)(result + 26312) = a5;
        *uint64_t v7 = a4;
        if ((a4 - 5121) > 4) {
          LOBYTE(v15) = 1;
        }
        else {
          int v15 = dword_227DC1EA8[a4 - 5121];
        }
        uint64_t v16 = (unsigned char *)(result + 32481);
        if (*(void *)(v11 + 944))
        {
          int v17 = 0;
          *(_DWORD *)(result + 28652) = 0;
          *(_DWORD *)(result + 1532) |= 0x1000u;
        }
        else
        {
          int v17 = *(_DWORD *)(result + 28652);
        }
        int v18 = 1 << a2;
        if ((v17 & (1 << a2)) != 0
          && (v15 & *(unsigned char *)(result + 28681)) != 0
          && (*(unsigned char *)(result + 28683) & 4) != 0)
        {
          if (*(unsigned char *)(result + 32482)) {
            return result;
          }
        }
        else
        {
          uint64_t result = gleDoDrawDispatchCoreES2(result, (1 << a2));
          if (!result) {
            return result;
          }
        }
        if (*v16)
        {
          if ((*(unsigned char *)(v10 + 17692) || (*(_WORD *)(v11 + 922) & 0xFFFE) == 0x85BE)
            && *(_DWORD *)(v11 + 924)
            && *(void *)(v11 + 928)
            || (uint64_t v19 = *(void *)(v11 + 912), (*(void *)(v11 + 904) & ~v19) == 0))
          {
            uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, void, uint64_t, void, void, uint64_t, void))(v10 + 29232))(*(void *)(v10 + 29016), 1, a2, 0, a3, *v7, *(void *)(v10 + 26312), a6, 0);
            if (result) {
              goto LABEL_43;
            }
            char v20 = 0;
LABEL_34:
            if ((*((_DWORD *)v7 + 579) & v18) != 0
              && (*((unsigned char *)v7 + 2345) & 1) != 0
              && (*((unsigned char *)v7 + 2347) & 2) != 0)
            {
              if (!v16[1])
              {
LABEL_38:
                if ((v20 & 1) == 0 && *(void *)(v11 + 912) && !*(unsigned char *)(v11 + 1216)) {
                  gleSynchronizeBuffersInArray(v10, v11 + 40);
                }
                uint64_t result = gleDrawArraysOrElements_ExecCore(v10, a2, 0, a3, 1, v11 + 40, a6);
              }
            }
            else
            {
              uint64_t result = gleDoDrawDispatchCoreES2(v10, (1 << a2));
              if (result) {
                goto LABEL_38;
              }
            }
LABEL_43:
            int v21 = *(_DWORD *)(*(void *)(v10 + 19296) + 316);
            if (*((_DWORD *)v7 + 870) != v21)
            {
              if (*(void *)(v10 + 28960))
              {
                uint64_t result = gleInvalidateCurrentDrawFramebufferTextures(v10);
                int v21 = *(_DWORD *)(*(void *)(v10 + 19296) + 316);
              }
              *((_DWORD *)v7 + 870) = v21;
            }
            return result;
          }
        }
        else
        {
          uint64_t v19 = *(void *)(v11 + 912);
        }
        if (v19 && !*(unsigned char *)(v11 + 1216)) {
          uint64_t result = gleSynchronizeBuffersInArray(v10, v11 + 40);
        }
        char v20 = 1;
        goto LABEL_34;
      }
      unsigned int v23 = a3;
      switch((int)a2)
      {
        case 0:
        case 2:
          break;
        case 1:
          unsigned int v23 = a3 >> 1;
          break;
        case 3:
          unsigned int v23 = a3 - 1;
          break;
        case 4:
          unsigned int v23 = a3 / 3;
          break;
        case 5:
        case 6:
          unsigned int v23 = a3 - 2;
          break;
        default:
          unsigned int v23 = 0;
          break;
      }
      unsigned int v24 = *(_DWORD *)(v12 + 176) + v23 * a6;
      if (v24 <= *(_DWORD *)(v12 + 180))
      {
        *(_DWORD *)(v12 + 176) = v24;
        goto LABEL_9;
      }
LABEL_68:
      if (!*(_WORD *)(result + 29832))
      {
        __int16 v22 = 1282;
        goto LABEL_70;
      }
      return result;
    }
    if ((a3 & 0x80000000) == 0) {
      return result;
    }
  }
  if (!*(_WORD *)(result + 29832))
  {
    __int16 v22 = 1281;
    goto LABEL_70;
  }
  return result;
}

uint64_t glDrawRangeElements_ACC_ES2Exec(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, int a6, uint64_t a7)
{
  uint64_t v7 = (unsigned __int16 *)(result + 26336);
  if (a2 >= 7) {
    goto LABEL_61;
  }
  uint64_t v10 = result;
  uint64_t v11 = *(void *)(result + 26384);
  uint64_t v12 = *(void *)(result + 26432);
  if (*(__int16 *)(v12 + 42) != -1 && !*(unsigned char *)(v12 + 41))
  {
    if (!*(_WORD *)(result + 29832))
    {
      __int16 v22 = 1282;
      goto LABEL_58;
    }
    return result;
  }
  if (a6 != 5123 && a6 != 5121 && a6 != 5125)
  {
LABEL_61:
    if (!*(_WORD *)(result + 29832))
    {
      __int16 v22 = 1280;
LABEL_58:
      *(_WORD *)(result + 29832) = v22;
      return result;
    }
    return result;
  }
  if ((int)a5 <= 0)
  {
    if ((a5 & 0x80000000) == 0) {
      return result;
    }
  }
  else if (a4 >= a3)
  {
    int v13 = (unsigned char *)(result + 17692);
    uint64_t v14 = *(void *)(v11 + 1232);
    if (v14) {
      a7 += *(void *)(v14 + 136);
    }
    *(void *)(result + 26312) = a7;
    *uint64_t v7 = a6;
    *(_DWORD *)(result + 26320) = a3;
    *(_DWORD *)(result + 26324) = a4;
    if ((a6 - 5121) > 4) {
      LOBYTE(v15) = 1;
    }
    else {
      int v15 = dword_227DC1EA8[a6 - 5121];
    }
    uint64_t v16 = (unsigned char *)(result + 32481);
    if (*(void *)(v11 + 944))
    {
      int v17 = 0;
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1532) |= 0x1000u;
    }
    else
    {
      int v17 = *(_DWORD *)(result + 28652);
    }
    int v18 = 1 << a2;
    if ((v17 & (1 << a2)) != 0
      && (v15 & *(unsigned char *)(result + 28681)) != 0
      && (*(unsigned char *)(result + 28683) & 4) != 0)
    {
      if (*(unsigned char *)(result + 32482)) {
        return result;
      }
    }
    else
    {
      uint64_t result = gleDoDrawDispatchCoreES2(result, (1 << a2));
      if (!result) {
        return result;
      }
    }
    if (*v16)
    {
      if ((*v13 || (*(_WORD *)(v11 + 922) & 0xFFFE) == 0x85BE) && *(_DWORD *)(v11 + 924) && *(void *)(v11 + 928)
        || (uint64_t v19 = *(void *)(v11 + 912), (*(void *)(v11 + 904) & ~v19) == 0))
      {
        uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, void, uint64_t, void, void, uint64_t, void))(v10 + 29232))(*(void *)(v10 + 29016), 3, a2, 0, a5, *v7, *(void *)(v10 + 26312), 1, 0);
        if (result) {
          goto LABEL_41;
        }
        char v20 = 0;
LABEL_32:
        if ((*((_DWORD *)v7 + 579) & v18) != 0 && (*((unsigned char *)v7 + 2345) & 1) != 0 && (*((unsigned char *)v7 + 2347) & 2) != 0)
        {
          if (!v16[1])
          {
LABEL_36:
            if ((v20 & 1) == 0 && *(void *)(v11 + 912) && !*(unsigned char *)(v11 + 1216)) {
              gleSynchronizeBuffersInArray(v10, v11 + 40);
            }
            uint64_t result = gleDrawArraysOrElements_ExecCore(v10, a2, 0, a5, 3, v11 + 40, 1);
          }
        }
        else
        {
          uint64_t result = gleDoDrawDispatchCoreES2(v10, (1 << a2));
          if (result) {
            goto LABEL_36;
          }
        }
LABEL_41:
        int v21 = *(_DWORD *)(*(void *)(v10 + 19296) + 316);
        if (*((_DWORD *)v7 + 870) != v21)
        {
          if (*(void *)(v10 + 28960))
          {
            uint64_t result = gleInvalidateCurrentDrawFramebufferTextures(v10);
            int v21 = *(_DWORD *)(*(void *)(v10 + 19296) + 316);
          }
          *((_DWORD *)v7 + 870) = v21;
        }
        return result;
      }
    }
    else
    {
      uint64_t v19 = *(void *)(v11 + 912);
    }
    if (v19 && !*(unsigned char *)(v11 + 1216)) {
      uint64_t result = gleSynchronizeBuffersInArray(v10, v11 + 40);
    }
    char v20 = 1;
    goto LABEL_32;
  }
  if (!*(_WORD *)(result + 29832))
  {
    __int16 v22 = 1281;
    goto LABEL_58;
  }
  return result;
}

unint64_t glDrawArrays_ACC_Exec(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5, double a6, double a7)
{
  uint64_t v7 = (unsigned __int16 *)(result + 26336);
  if (a2 >= 7)
  {
    if (*(_WORD *)(result + 29832)) {
      return result;
    }
    __int16 v23 = 1280;
    goto LABEL_53;
  }
  unint64_t v8 = result;
  uint64_t v9 = (unsigned char *)(result + 17692);
  uint64_t v10 = *(void *)(result + 26384);
  if ((~*(_DWORD *)(v10 + 904) & 0x900000) != 0 && *(unsigned char *)(result + 17699) != 0
    || (*(void *)(v10 + 904) & 0x100010000) == 0)
  {
    return result;
  }
  if ((int)a4 <= 0)
  {
    if ((a4 & 0x80000000) == 0 || *(_WORD *)(result + 29832)) {
      return result;
    }
    __int16 v23 = 1281;
    goto LABEL_53;
  }
  uint64_t v16 = *(void *)(result + 26432);
  if (*(__int16 *)(v16 + 42) != -1 && !*(unsigned char *)(v16 + 41))
  {
    unsigned int v24 = a4;
    switch((int)a2)
    {
      case 0:
      case 2:
        break;
      case 1:
        unsigned int v24 = a4 >> 1;
        break;
      case 3:
        unsigned int v24 = a4 - 1;
        break;
      case 4:
        unsigned int v24 = a4 / 3;
        break;
      case 5:
      case 6:
        unsigned int v24 = a4 - 2;
        break;
      default:
        unsigned int v24 = 0;
        break;
    }
    unsigned int v25 = v24 + *(_DWORD *)(v16 + 176);
    if (v25 <= *(_DWORD *)(v16 + 180))
    {
      *(_DWORD *)(v16 + 176) = v25;
      goto LABEL_12;
    }
    if (*(_WORD *)(result + 29832)) {
      return result;
    }
    __int16 v23 = 1282;
LABEL_53:
    *(_WORD *)(result + 29832) = v23;
    return result;
  }
LABEL_12:
  if (*v7 != 5375)
  {
    *(void *)(result + 26312) = 0;
    *uint64_t v7 = 5375;
  }
  int v17 = (unsigned char *)(result + 32481);
  if (*(void *)(v10 + 944))
  {
    int v18 = 0;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1532) |= 0x1000u;
  }
  else
  {
    int v18 = *(_DWORD *)(result + 28652);
  }
  int v19 = 1 << a2;
  if ((v18 & (1 << a2)) != 0 && (*(unsigned char *)(result + 28681) & 1) != 0 && (*(unsigned char *)(result + 28683) & 4) != 0)
  {
    if (*(unsigned char *)(result + 32482)) {
      return result;
    }
  }
  else
  {
    uint64_t result = gleDoDrawDispatchCore(result, 1 << a2, 1u, 4u, a5, a6, a7);
    if (!result) {
      return result;
    }
  }
  if (!*v17)
  {
    uint64_t v20 = *(void *)(v10 + 912);
LABEL_30:
    if (v20 && !*(unsigned char *)(v10 + 1216)) {
      uint64_t result = gleSynchronizeBuffersInArray(v8, v10 + 40);
    }
    char v21 = 1;
    goto LABEL_34;
  }
  if (!*v9 && (*(_WORD *)(v10 + 922) & 0xFFFE) != 0x85BE || !*(_DWORD *)(v10 + 924) || !*(void *)(v10 + 928))
  {
    uint64_t v20 = *(void *)(v10 + 912);
    if ((*(void *)(v10 + 904) & ~v20) != 0) {
      goto LABEL_30;
    }
  }
  uint64_t result = (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t, void, void, uint64_t, void))(v8 + 29232))(*(void *)(v8 + 29016), 0, a2, a3, a4, *v7, *(void *)(v8 + 26312), 1, 0);
  if (result) {
    goto LABEL_43;
  }
  char v21 = 0;
LABEL_34:
  if ((*((_DWORD *)v7 + 579) & v19) != 0 && (*((unsigned char *)v7 + 2345) & 1) != 0 && (*((unsigned char *)v7 + 2347) & 2) != 0)
  {
    if (!v17[1])
    {
LABEL_38:
      if ((v21 & 1) == 0 && *(void *)(v10 + 912) && !*(unsigned char *)(v10 + 1216)) {
        gleSynchronizeBuffersInArray(v8, v10 + 40);
      }
      uint64_t result = gleDrawArraysOrElements_ExecCore(v8, a2, a3, a4, 0, v10 + 40, 1);
    }
  }
  else
  {
    uint64_t result = gleDoDrawDispatchCore(v8, 1 << a2, 1u, 2u, a5, a6, a7);
    if (result) {
      goto LABEL_38;
    }
  }
LABEL_43:
  int v22 = *(_DWORD *)(*(void *)(v8 + 19296) + 316);
  if (*((_DWORD *)v7 + 870) != v22)
  {
    if (*(void *)(v8 + 28960))
    {
      uint64_t result = gleInvalidateCurrentDrawFramebufferTextures(v8);
      int v22 = *(_DWORD *)(*(void *)(v8 + 19296) + 316);
    }
    *((_DWORD *)v7 + 870) = v22;
  }
  return result;
}

unint64_t glDrawElements_ACC_Exec(unint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, __n128 a6, double a7, double a8)
{
  unint64_t v8 = (unsigned __int16 *)(result + 26336);
  if (a2 >= 7) {
    goto LABEL_75;
  }
  unint64_t v9 = result;
  uint64_t v10 = (unsigned char *)(result + 17692);
  uint64_t v11 = *(void *)(result + 26384);
  if ((~*(_DWORD *)(v11 + 904) & 0x900000) != 0 && *(unsigned char *)(result + 17699) != 0
    || (*(void *)(v11 + 904) & 0x100010000) == 0)
  {
    return result;
  }
  if (a4 != 5123 && a4 != 5121 && a4 != 5125)
  {
LABEL_75:
    if (!*(_WORD *)(result + 29832))
    {
      __int16 v25 = 1280;
LABEL_59:
      *(_WORD *)(result + 29832) = v25;
      return result;
    }
    return result;
  }
  if ((int)a3 > 0)
  {
    uint64_t v16 = *(void *)(result + 26432);
    if (*(__int16 *)(v16 + 42) != -1 && !*(unsigned char *)(v16 + 41))
    {
      unsigned int v26 = a3;
      switch((int)a2)
      {
        case 0:
        case 2:
          break;
        case 1:
          unsigned int v26 = a3 >> 1;
          break;
        case 3:
          unsigned int v26 = a3 - 1;
          break;
        case 4:
          unsigned int v26 = a3 / 3;
          break;
        case 5:
        case 6:
          unsigned int v26 = a3 - 2;
          break;
        default:
          unsigned int v26 = 0;
          break;
      }
      unsigned int v27 = v26 + *(_DWORD *)(v16 + 176);
      if (v27 > *(_DWORD *)(v16 + 180))
      {
        if (!*(_WORD *)(result + 29832))
        {
          __int16 v25 = 1282;
          goto LABEL_59;
        }
        return result;
      }
      *(_DWORD *)(v16 + 176) = v27;
    }
    uint64_t v17 = *(void *)(v11 + 1232);
    if (v17) {
      a5 += *(void *)(v17 + 136);
    }
    *(void *)(result + 26312) = a5;
    *unint64_t v8 = a4;
    if ((a4 - 5121) > 4) {
      unsigned int v18 = 1;
    }
    else {
      unsigned int v18 = dword_227DC1EA8[a4 - 5121];
    }
    int v19 = (unsigned char *)(result + 32481);
    if (*(void *)(v11 + 944))
    {
      int v20 = 0;
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1532) |= 0x1000u;
    }
    else
    {
      int v20 = *(_DWORD *)(result + 28652);
    }
    int v21 = 1 << a2;
    if ((v20 & (1 << a2)) != 0
      && (v18 & *(unsigned char *)(result + 28681)) != 0
      && (*(unsigned char *)(result + 28683) & 4) != 0)
    {
      if (*(unsigned char *)(result + 32482)) {
        return result;
      }
    }
    else
    {
      uint64_t result = gleDoDrawDispatchCore(result, 1 << a2, v18, 4u, a6, a7, a8);
      if (!result) {
        return result;
      }
    }
    if (*v19)
    {
      if ((*v10 || (*(_WORD *)(v11 + 922) & 0xFFFE) == 0x85BE) && *(_DWORD *)(v11 + 924) && *(void *)(v11 + 928)
        || (uint64_t v22 = *(void *)(v11 + 912), (*(void *)(v11 + 904) & ~v22) == 0))
      {
        uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, void, uint64_t, void, void, uint64_t, void))(v9 + 29232))(*(void *)(v9 + 29016), 1, a2, 0, a3, *v8, *(void *)(v9 + 26312), 1, 0);
        if (result) {
          goto LABEL_47;
        }
        char v23 = 0;
LABEL_38:
        if ((*((_DWORD *)v8 + 579) & v21) != 0 && (*((unsigned char *)v8 + 2345) & 1) != 0 && (*((unsigned char *)v8 + 2347) & 2) != 0)
        {
          if (!v19[1])
          {
LABEL_42:
            if ((v23 & 1) == 0 && *(void *)(v11 + 912) && !*(unsigned char *)(v11 + 1216)) {
              gleSynchronizeBuffersInArray(v9, v11 + 40);
            }
            uint64_t result = gleDrawArraysOrElements_ExecCore(v9, a2, 0, a3, 1, v11 + 40, 1);
          }
        }
        else
        {
          uint64_t result = gleDoDrawDispatchCore(v9, 1 << a2, 1u, 2u, a6, a7, a8);
          if (result) {
            goto LABEL_42;
          }
        }
LABEL_47:
        int v24 = *(_DWORD *)(*(void *)(v9 + 19296) + 316);
        if (*((_DWORD *)v8 + 870) != v24)
        {
          if (*(void *)(v9 + 28960))
          {
            uint64_t result = gleInvalidateCurrentDrawFramebufferTextures(v9);
            int v24 = *(_DWORD *)(*(void *)(v9 + 19296) + 316);
          }
          *((_DWORD *)v8 + 870) = v24;
        }
        return result;
      }
    }
    else
    {
      uint64_t v22 = *(void *)(v11 + 912);
    }
    if (v22 && !*(unsigned char *)(v11 + 1216)) {
      uint64_t result = gleSynchronizeBuffersInArray(v9, v11 + 40);
    }
    char v23 = 1;
    goto LABEL_38;
  }
  if ((a3 & 0x80000000) != 0 && !*(_WORD *)(result + 29832))
  {
    __int16 v25 = 1281;
    goto LABEL_59;
  }
  return result;
}

uint64_t glDrawArrays_IMM_ES2Exec(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = (unsigned __int16 *)(result + 26336);
  if (a2 >= 7)
  {
    if (*(_WORD *)(result + 29832)) {
      return result;
    }
    __int16 v17 = 1280;
    goto LABEL_49;
  }
  if ((int)a4 <= 0)
  {
    if ((a4 & 0x80000000) == 0 || *(_WORD *)(result + 29832)) {
      return result;
    }
    __int16 v17 = 1281;
    goto LABEL_49;
  }
  uint64_t v8 = result;
  uint64_t v9 = *(void *)(result + 26384);
  uint64_t v10 = *(void *)(result + 26432);
  if (*(__int16 *)(v10 + 42) != -1 && !*(unsigned char *)(v10 + 41))
  {
    unsigned int v18 = a4;
    switch((int)a2)
    {
      case 0:
      case 2:
        break;
      case 1:
        unsigned int v18 = a4 >> 1;
        break;
      case 3:
        unsigned int v18 = a4 - 1;
        break;
      case 4:
        unsigned int v18 = a4 / 3;
        break;
      case 5:
      case 6:
        unsigned int v18 = a4 - 2;
        break;
      default:
        unsigned int v18 = 0;
        break;
    }
    unsigned int v19 = v18 + *(_DWORD *)(v10 + 176);
    if (v19 <= *(_DWORD *)(v10 + 180))
    {
      *(_DWORD *)(v10 + 176) = v19;
      goto LABEL_5;
    }
    if (*(_WORD *)(result + 29832)) {
      return result;
    }
    __int16 v17 = 1282;
LABEL_49:
    *(_WORD *)(result + 29832) = v17;
    return result;
  }
LABEL_5:
  if (*v4 != 5375)
  {
    *(void *)(result + 26312) = 0;
    *uint64_t v4 = 5375;
  }
  uint64_t v11 = (unsigned char *)(result + 32481);
  if (*(void *)(v9 + 944))
  {
    int v12 = 0;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1532) |= 0x1000u;
  }
  else
  {
    int v12 = *(_DWORD *)(result + 28652);
  }
  int v13 = 1 << a2;
  if ((v12 & (1 << a2)) != 0 && (*(unsigned char *)(result + 28681) & 1) != 0 && (*(unsigned char *)(result + 28683) & 4) != 0)
  {
    if (*(unsigned char *)(result + 32482)) {
      return result;
    }
  }
  else
  {
    uint64_t result = gleDoDrawDispatchCoreES2(result, (1 << a2));
    if (!result) {
      return result;
    }
  }
  if (!*v11)
  {
    uint64_t v14 = *(void *)(v9 + 912);
LABEL_23:
    if (v14 && !*(unsigned char *)(v9 + 1216)) {
      uint64_t result = gleSynchronizeBuffersInArray(v8, v9 + 40);
    }
    char v15 = 1;
    goto LABEL_27;
  }
  if (!*(unsigned char *)(v8 + 17692) && (*(_WORD *)(v9 + 922) & 0xFFFE) != 0x85BE
    || !*(_DWORD *)(v9 + 924)
    || !*(void *)(v9 + 928))
  {
    uint64_t v14 = *(void *)(v9 + 912);
    if ((*(void *)(v9 + 904) & ~v14) != 0) {
      goto LABEL_23;
    }
  }
  uint64_t result = (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t, void, void, uint64_t, void))(v8 + 29232))(*(void *)(v8 + 29016), 0, a2, a3, a4, *v4, *(void *)(v8 + 26312), 1, 0);
  if (result) {
    goto LABEL_36;
  }
  char v15 = 0;
LABEL_27:
  if ((*((_DWORD *)v4 + 579) & v13) != 0 && (*((unsigned char *)v4 + 2345) & 1) != 0 && (*((unsigned char *)v4 + 2347) & 2) != 0)
  {
    if (!v11[1])
    {
LABEL_31:
      if ((v15 & 1) == 0 && *(void *)(v9 + 912) && !*(unsigned char *)(v9 + 1216)) {
        gleSynchronizeBuffersInArray(v8, v9 + 40);
      }
      uint64_t result = gleDrawArraysOrElements_ExecCore(v8, a2, a3, a4, 0, v9 + 40, 1);
    }
  }
  else
  {
    uint64_t result = gleDoDrawDispatchCoreES2(v8, (1 << a2));
    if (result) {
      goto LABEL_31;
    }
  }
LABEL_36:
  int v16 = *(_DWORD *)(*(void *)(v8 + 19296) + 316);
  if (*((_DWORD *)v4 + 870) != v16)
  {
    if (*(void *)(v8 + 28960))
    {
      uint64_t result = gleInvalidateCurrentDrawFramebufferTextures(v8);
      int v16 = *(_DWORD *)(*(void *)(v8 + 19296) + 316);
    }
    *((_DWORD *)v4 + 870) = v16;
  }
  return result;
}

uint64_t glDrawElements_IMM_ES2Exec(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  int v5 = (unsigned __int16 *)(result + 26336);
  if (a2 >= 7)
  {
LABEL_52:
    if (!*(_WORD *)(result + 29832))
    {
      __int16 v20 = 1280;
LABEL_67:
      *(_WORD *)(result + 29832) = v20;
      return result;
    }
    return result;
  }
  uint64_t v8 = result;
  uint64_t v9 = *(void *)(result + 26384);
  uint64_t v10 = *(void *)(result + 26432);
  int v11 = *(unsigned __int16 *)(v10 + 42);
  if (v11 != 0xFFFF && !*(unsigned char *)(v10 + 41)) {
    goto LABEL_65;
  }
  if (a4 != 5123 && a4 != 5121 && a4 != 5125) {
    goto LABEL_52;
  }
  if ((int)a3 > 0)
  {
    if (v11 == 0xFFFF || *(unsigned char *)(v10 + 41))
    {
LABEL_8:
      uint64_t v12 = *(void *)(v9 + 1232);
      if (v12) {
        a5 += *(void *)(v12 + 136);
      }
      *(void *)(result + 26312) = a5;
      *int v5 = a4;
      if ((a4 - 5121) > 4) {
        LOBYTE(v13) = 1;
      }
      else {
        int v13 = dword_227DC1EA8[a4 - 5121];
      }
      uint64_t v14 = (unsigned char *)(result + 32481);
      if (*(void *)(v9 + 944))
      {
        int v15 = 0;
        *(_DWORD *)(result + 28652) = 0;
        *(_DWORD *)(result + 1532) |= 0x1000u;
      }
      else
      {
        int v15 = *(_DWORD *)(result + 28652);
      }
      int v16 = 1 << a2;
      if ((v15 & (1 << a2)) != 0
        && (v13 & *(unsigned char *)(result + 28681)) != 0
        && (*(unsigned char *)(result + 28683) & 4) != 0)
      {
        if (*(unsigned char *)(result + 32482)) {
          return result;
        }
      }
      else
      {
        uint64_t result = gleDoDrawDispatchCoreES2(result, (1 << a2));
        if (!result) {
          return result;
        }
      }
      if (*v14)
      {
        if ((*(unsigned char *)(v8 + 17692) || (*(_WORD *)(v9 + 922) & 0xFFFE) == 0x85BE)
          && *(_DWORD *)(v9 + 924)
          && *(void *)(v9 + 928)
          || (uint64_t v17 = *(void *)(v9 + 912), (*(void *)(v9 + 904) & ~v17) == 0))
        {
          uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, void, uint64_t, void, void, uint64_t, void))(v8 + 29232))(*(void *)(v8 + 29016), 1, a2, 0, a3, *v5, *(void *)(v8 + 26312), 1, 0);
          if (result) {
            goto LABEL_42;
          }
          char v18 = 0;
LABEL_33:
          if ((*((_DWORD *)v5 + 579) & v16) != 0
            && (*((unsigned char *)v5 + 2345) & 1) != 0
            && (*((unsigned char *)v5 + 2347) & 2) != 0)
          {
            if (!v14[1])
            {
LABEL_37:
              if ((v18 & 1) == 0 && *(void *)(v9 + 912) && !*(unsigned char *)(v9 + 1216)) {
                gleSynchronizeBuffersInArray(v8, v9 + 40);
              }
              uint64_t result = gleDrawArraysOrElements_ExecCore(v8, a2, 0, a3, 1, v9 + 40, 1);
            }
          }
          else
          {
            uint64_t result = gleDoDrawDispatchCoreES2(v8, (1 << a2));
            if (result) {
              goto LABEL_37;
            }
          }
LABEL_42:
          int v19 = *(_DWORD *)(*(void *)(v8 + 19296) + 316);
          if (*((_DWORD *)v5 + 870) != v19)
          {
            if (*(void *)(v8 + 28960))
            {
              uint64_t result = gleInvalidateCurrentDrawFramebufferTextures(v8);
              int v19 = *(_DWORD *)(*(void *)(v8 + 19296) + 316);
            }
            *((_DWORD *)v5 + 870) = v19;
          }
          return result;
        }
      }
      else
      {
        uint64_t v17 = *(void *)(v9 + 912);
      }
      if (v17 && !*(unsigned char *)(v9 + 1216)) {
        uint64_t result = gleSynchronizeBuffersInArray(v8, v9 + 40);
      }
      char v18 = 1;
      goto LABEL_33;
    }
    unsigned int v21 = a3;
    switch((int)a2)
    {
      case 0:
      case 2:
        break;
      case 1:
        unsigned int v21 = a3 >> 1;
        break;
      case 3:
        unsigned int v21 = a3 - 1;
        break;
      case 4:
        unsigned int v21 = a3 / 3;
        break;
      case 5:
      case 6:
        unsigned int v21 = a3 - 2;
        break;
      default:
        unsigned int v21 = 0;
        break;
    }
    unsigned int v22 = v21 + *(_DWORD *)(v10 + 176);
    if (v22 <= *(_DWORD *)(v10 + 180))
    {
      *(_DWORD *)(v10 + 176) = v22;
      goto LABEL_8;
    }
LABEL_65:
    if (!*(_WORD *)(result + 29832))
    {
      __int16 v20 = 1282;
      goto LABEL_67;
    }
    return result;
  }
  if ((a3 & 0x80000000) != 0 && !*(_WORD *)(result + 29832))
  {
    __int16 v20 = 1281;
    goto LABEL_67;
  }
  return result;
}

uint64_t glDrawArraysInstanced_IMM_ES2Exec(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = (unsigned __int16 *)(result + 26336);
  if ((int)a5 <= 0)
  {
    if ((a5 & 0x80000000) == 0) {
      return result;
    }
LABEL_50:
    if (*(_WORD *)(result + 29832)) {
      return result;
    }
    __int16 v20 = 1281;
    goto LABEL_52;
  }
  if (a2 >= 7)
  {
    if (*(_WORD *)(result + 29832)) {
      return result;
    }
    __int16 v20 = 1280;
    goto LABEL_52;
  }
  if ((int)a4 <= 0)
  {
    if ((a4 & 0x80000000) == 0) {
      return result;
    }
    goto LABEL_50;
  }
  uint64_t v10 = result;
  uint64_t v11 = *(void *)(result + 26384);
  uint64_t v12 = *(void *)(result + 26432);
  if (*(__int16 *)(v12 + 42) != -1 && !*(unsigned char *)(v12 + 41))
  {
    unsigned int v21 = a4;
    switch((int)a2)
    {
      case 0:
      case 2:
        break;
      case 1:
        unsigned int v21 = a4 >> 1;
        break;
      case 3:
        unsigned int v21 = a4 - 1;
        break;
      case 4:
        unsigned int v21 = a4 / 3;
        break;
      case 5:
      case 6:
        unsigned int v21 = a4 - 2;
        break;
      default:
        unsigned int v21 = 0;
        break;
    }
    unsigned int v22 = *(_DWORD *)(v12 + 176) + v21 * a5;
    if (v22 <= *(_DWORD *)(v12 + 180))
    {
      *(_DWORD *)(v12 + 176) = v22;
      goto LABEL_6;
    }
    if (*(_WORD *)(result + 29832)) {
      return result;
    }
    __int16 v20 = 1282;
LABEL_52:
    *(_WORD *)(result + 29832) = v20;
    return result;
  }
LABEL_6:
  if (*v6 != 5375)
  {
    *(void *)(result + 26312) = 0;
    unsigned __int16 *v6 = 5375;
  }
  int v13 = (unsigned char *)(result + 32481);
  if (*(void *)(v11 + 944))
  {
    int v14 = 0;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1532) |= 0x1000u;
  }
  else
  {
    int v14 = *(_DWORD *)(result + 28652);
  }
  int v15 = 1 << a2;
  if ((v14 & (1 << a2)) != 0 && (*(unsigned char *)(result + 28681) & 1) != 0 && (*(unsigned char *)(result + 28683) & 4) != 0)
  {
    if (*(unsigned char *)(result + 32482)) {
      return result;
    }
  }
  else
  {
    uint64_t result = gleDoDrawDispatchCoreES2(result, (1 << a2));
    if (!result) {
      return result;
    }
  }
  uint64_t v23 = v11 + 40;
  if (!*v13)
  {
    uint64_t v16 = *(void *)(v11 + 912);
LABEL_24:
    uint64_t v17 = a3;
    if (v16 && !*(unsigned char *)(v11 + 1216)) {
      uint64_t result = gleSynchronizeBuffersInArray(v10, v23);
    }
    char v18 = 1;
    goto LABEL_28;
  }
  if (!*(unsigned char *)(v10 + 17692) && (*(_WORD *)(v11 + 922) & 0xFFFE) != 0x85BE
    || !*(_DWORD *)(v11 + 924)
    || !*(void *)(v11 + 928))
  {
    uint64_t v16 = *(void *)(v11 + 912);
    if ((*(void *)(v11 + 904) & ~v16) != 0) {
      goto LABEL_24;
    }
  }
  uint64_t v17 = a3;
  uint64_t result = (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t, void, void, uint64_t, void, uint64_t))(v10 + 29232))(*(void *)(v10 + 29016), 0, a2, a3, a4, *v6, *(void *)(v10 + 26312), a5, 0, v23);
  if (result) {
    goto LABEL_37;
  }
  char v18 = 0;
LABEL_28:
  if ((*((_DWORD *)v6 + 579) & v15) != 0 && (*((unsigned char *)v6 + 2345) & 1) != 0 && (*((unsigned char *)v6 + 2347) & 2) != 0)
  {
    if (!v13[1])
    {
LABEL_32:
      if ((v18 & 1) == 0 && *(void *)(v11 + 912) && !*(unsigned char *)(v11 + 1216)) {
        gleSynchronizeBuffersInArray(v10, v23);
      }
      uint64_t result = gleDrawArraysOrElements_ExecCore(v10, a2, v17, a4, 0, v23, a5);
    }
  }
  else
  {
    uint64_t result = gleDoDrawDispatchCoreES2(v10, (1 << a2));
    if (result) {
      goto LABEL_32;
    }
  }
LABEL_37:
  int v19 = *(_DWORD *)(*(void *)(v10 + 19296) + 316);
  if (*((_DWORD *)v6 + 870) != v19)
  {
    if (*(void *)(v10 + 28960))
    {
      uint64_t result = gleInvalidateCurrentDrawFramebufferTextures(v10);
      int v19 = *(_DWORD *)(*(void *)(v10 + 19296) + 316);
    }
    *((_DWORD *)v6 + 870) = v19;
  }
  return result;
}

uint64_t glDrawElementsInstanced_IMM_ES2Exec(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = (unsigned __int16 *)(result + 26336);
  if ((int)a6 <= 0)
  {
    if ((a6 & 0x80000000) == 0) {
      return result;
    }
  }
  else
  {
    if (a2 >= 7) {
      goto LABEL_53;
    }
    uint64_t v10 = result;
    uint64_t v11 = *(void *)(result + 26384);
    uint64_t v12 = *(void *)(result + 26432);
    int v13 = *(unsigned __int16 *)(v12 + 42);
    if (v13 != 0xFFFF && !*(unsigned char *)(v12 + 41)) {
      goto LABEL_68;
    }
    if (a4 != 5123 && a4 != 5121 && a4 != 5125)
    {
LABEL_53:
      if (!*(_WORD *)(result + 29832))
      {
        __int16 v22 = 1280;
LABEL_70:
        *(_WORD *)(result + 29832) = v22;
        return result;
      }
      return result;
    }
    if ((int)a3 > 0)
    {
      if (v13 == 0xFFFF || *(unsigned char *)(v12 + 41))
      {
LABEL_9:
        uint64_t v14 = *(void *)(v11 + 1232);
        if (v14) {
          a5 += *(void *)(v14 + 136);
        }
        *(void *)(result + 26312) = a5;
        *uint64_t v7 = a4;
        if ((a4 - 5121) > 4) {
          LOBYTE(v15) = 1;
        }
        else {
          int v15 = dword_227DC1EA8[a4 - 5121];
        }
        uint64_t v16 = (unsigned char *)(result + 32481);
        if (*(void *)(v11 + 944))
        {
          int v17 = 0;
          *(_DWORD *)(result + 28652) = 0;
          *(_DWORD *)(result + 1532) |= 0x1000u;
        }
        else
        {
          int v17 = *(_DWORD *)(result + 28652);
        }
        int v18 = 1 << a2;
        if ((v17 & (1 << a2)) != 0
          && (v15 & *(unsigned char *)(result + 28681)) != 0
          && (*(unsigned char *)(result + 28683) & 4) != 0)
        {
          if (*(unsigned char *)(result + 32482)) {
            return result;
          }
        }
        else
        {
          uint64_t result = gleDoDrawDispatchCoreES2(result, (1 << a2));
          if (!result) {
            return result;
          }
        }
        if (*v16)
        {
          if ((*(unsigned char *)(v10 + 17692) || (*(_WORD *)(v11 + 922) & 0xFFFE) == 0x85BE)
            && *(_DWORD *)(v11 + 924)
            && *(void *)(v11 + 928)
            || (uint64_t v19 = *(void *)(v11 + 912), (*(void *)(v11 + 904) & ~v19) == 0))
          {
            uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, void, uint64_t, void, void, uint64_t, void))(v10 + 29232))(*(void *)(v10 + 29016), 1, a2, 0, a3, *v7, *(void *)(v10 + 26312), a6, 0);
            if (result) {
              goto LABEL_43;
            }
            char v20 = 0;
LABEL_34:
            if ((*((_DWORD *)v7 + 579) & v18) != 0
              && (*((unsigned char *)v7 + 2345) & 1) != 0
              && (*((unsigned char *)v7 + 2347) & 2) != 0)
            {
              if (!v16[1])
              {
LABEL_38:
                if ((v20 & 1) == 0 && *(void *)(v11 + 912) && !*(unsigned char *)(v11 + 1216)) {
                  gleSynchronizeBuffersInArray(v10, v11 + 40);
                }
                uint64_t result = gleDrawArraysOrElements_ExecCore(v10, a2, 0, a3, 1, v11 + 40, a6);
              }
            }
            else
            {
              uint64_t result = gleDoDrawDispatchCoreES2(v10, (1 << a2));
              if (result) {
                goto LABEL_38;
              }
            }
LABEL_43:
            int v21 = *(_DWORD *)(*(void *)(v10 + 19296) + 316);
            if (*((_DWORD *)v7 + 870) != v21)
            {
              if (*(void *)(v10 + 28960))
              {
                uint64_t result = gleInvalidateCurrentDrawFramebufferTextures(v10);
                int v21 = *(_DWORD *)(*(void *)(v10 + 19296) + 316);
              }
              *((_DWORD *)v7 + 870) = v21;
            }
            return result;
          }
        }
        else
        {
          uint64_t v19 = *(void *)(v11 + 912);
        }
        if (v19 && !*(unsigned char *)(v11 + 1216)) {
          uint64_t result = gleSynchronizeBuffersInArray(v10, v11 + 40);
        }
        char v20 = 1;
        goto LABEL_34;
      }
      unsigned int v23 = a3;
      switch((int)a2)
      {
        case 0:
        case 2:
          break;
        case 1:
          unsigned int v23 = a3 >> 1;
          break;
        case 3:
          unsigned int v23 = a3 - 1;
          break;
        case 4:
          unsigned int v23 = a3 / 3;
          break;
        case 5:
        case 6:
          unsigned int v23 = a3 - 2;
          break;
        default:
          unsigned int v23 = 0;
          break;
      }
      unsigned int v24 = *(_DWORD *)(v12 + 176) + v23 * a6;
      if (v24 <= *(_DWORD *)(v12 + 180))
      {
        *(_DWORD *)(v12 + 176) = v24;
        goto LABEL_9;
      }
LABEL_68:
      if (!*(_WORD *)(result + 29832))
      {
        __int16 v22 = 1282;
        goto LABEL_70;
      }
      return result;
    }
    if ((a3 & 0x80000000) == 0) {
      return result;
    }
  }
  if (!*(_WORD *)(result + 29832))
  {
    __int16 v22 = 1281;
    goto LABEL_70;
  }
  return result;
}

uint64_t glDrawRangeElements_IMM_ES2Exec(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, int a6, uint64_t a7)
{
  uint64_t v7 = (unsigned __int16 *)(result + 26336);
  if (a2 >= 7) {
    goto LABEL_61;
  }
  uint64_t v10 = result;
  uint64_t v11 = *(void *)(result + 26384);
  uint64_t v12 = *(void *)(result + 26432);
  if (*(__int16 *)(v12 + 42) != -1 && !*(unsigned char *)(v12 + 41))
  {
    if (!*(_WORD *)(result + 29832))
    {
      __int16 v22 = 1282;
      goto LABEL_58;
    }
    return result;
  }
  if (a6 != 5123 && a6 != 5121 && a6 != 5125)
  {
LABEL_61:
    if (!*(_WORD *)(result + 29832))
    {
      __int16 v22 = 1280;
LABEL_58:
      *(_WORD *)(result + 29832) = v22;
      return result;
    }
    return result;
  }
  if ((int)a5 <= 0)
  {
    if ((a5 & 0x80000000) == 0) {
      return result;
    }
  }
  else if (a4 >= a3)
  {
    int v13 = (unsigned char *)(result + 17692);
    uint64_t v14 = *(void *)(v11 + 1232);
    if (v14) {
      a7 += *(void *)(v14 + 136);
    }
    *(void *)(result + 26312) = a7;
    *uint64_t v7 = a6;
    *(_DWORD *)(result + 26320) = a3;
    *(_DWORD *)(result + 26324) = a4;
    if ((a6 - 5121) > 4) {
      LOBYTE(v15) = 1;
    }
    else {
      int v15 = dword_227DC1EA8[a6 - 5121];
    }
    uint64_t v16 = (unsigned char *)(result + 32481);
    if (*(void *)(v11 + 944))
    {
      int v17 = 0;
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1532) |= 0x1000u;
    }
    else
    {
      int v17 = *(_DWORD *)(result + 28652);
    }
    int v18 = 1 << a2;
    if ((v17 & (1 << a2)) != 0
      && (v15 & *(unsigned char *)(result + 28681)) != 0
      && (*(unsigned char *)(result + 28683) & 4) != 0)
    {
      if (*(unsigned char *)(result + 32482)) {
        return result;
      }
    }
    else
    {
      uint64_t result = gleDoDrawDispatchCoreES2(result, (1 << a2));
      if (!result) {
        return result;
      }
    }
    if (*v16)
    {
      if ((*v13 || (*(_WORD *)(v11 + 922) & 0xFFFE) == 0x85BE) && *(_DWORD *)(v11 + 924) && *(void *)(v11 + 928)
        || (uint64_t v19 = *(void *)(v11 + 912), (*(void *)(v11 + 904) & ~v19) == 0))
      {
        uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, void, uint64_t, void, void, uint64_t, void))(v10 + 29232))(*(void *)(v10 + 29016), 3, a2, 0, a5, *v7, *(void *)(v10 + 26312), 1, 0);
        if (result) {
          goto LABEL_41;
        }
        char v20 = 0;
LABEL_32:
        if ((*((_DWORD *)v7 + 579) & v18) != 0 && (*((unsigned char *)v7 + 2345) & 1) != 0 && (*((unsigned char *)v7 + 2347) & 2) != 0)
        {
          if (!v16[1])
          {
LABEL_36:
            if ((v20 & 1) == 0 && *(void *)(v11 + 912) && !*(unsigned char *)(v11 + 1216)) {
              gleSynchronizeBuffersInArray(v10, v11 + 40);
            }
            uint64_t result = gleDrawArraysOrElements_ExecCore(v10, a2, 0, a5, 3, v11 + 40, 1);
          }
        }
        else
        {
          uint64_t result = gleDoDrawDispatchCoreES2(v10, (1 << a2));
          if (result) {
            goto LABEL_36;
          }
        }
LABEL_41:
        int v21 = *(_DWORD *)(*(void *)(v10 + 19296) + 316);
        if (*((_DWORD *)v7 + 870) != v21)
        {
          if (*(void *)(v10 + 28960))
          {
            uint64_t result = gleInvalidateCurrentDrawFramebufferTextures(v10);
            int v21 = *(_DWORD *)(*(void *)(v10 + 19296) + 316);
          }
          *((_DWORD *)v7 + 870) = v21;
        }
        return result;
      }
    }
    else
    {
      uint64_t v19 = *(void *)(v11 + 912);
    }
    if (v19 && !*(unsigned char *)(v11 + 1216)) {
      uint64_t result = gleSynchronizeBuffersInArray(v10, v11 + 40);
    }
    char v20 = 1;
    goto LABEL_32;
  }
  if (!*(_WORD *)(result + 29832))
  {
    __int16 v22 = 1281;
    goto LABEL_58;
  }
  return result;
}

unint64_t glDrawArrays_IMM_Exec(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5, double a6, double a7)
{
  uint64_t v7 = (unsigned __int16 *)(result + 26336);
  if (a2 >= 7)
  {
    if (*(_WORD *)(result + 29832)) {
      return result;
    }
    __int16 v23 = 1280;
    goto LABEL_53;
  }
  unint64_t v8 = result;
  uint64_t v9 = (unsigned char *)(result + 17692);
  uint64_t v10 = *(void *)(result + 26384);
  if ((~*(_DWORD *)(v10 + 904) & 0x900000) != 0 && *(unsigned char *)(result + 17699) != 0
    || (*(void *)(v10 + 904) & 0x100010000) == 0)
  {
    return result;
  }
  if ((int)a4 <= 0)
  {
    if ((a4 & 0x80000000) == 0 || *(_WORD *)(result + 29832)) {
      return result;
    }
    __int16 v23 = 1281;
    goto LABEL_53;
  }
  uint64_t v16 = *(void *)(result + 26432);
  if (*(__int16 *)(v16 + 42) != -1 && !*(unsigned char *)(v16 + 41))
  {
    unsigned int v24 = a4;
    switch((int)a2)
    {
      case 0:
      case 2:
        break;
      case 1:
        unsigned int v24 = a4 >> 1;
        break;
      case 3:
        unsigned int v24 = a4 - 1;
        break;
      case 4:
        unsigned int v24 = a4 / 3;
        break;
      case 5:
      case 6:
        unsigned int v24 = a4 - 2;
        break;
      default:
        unsigned int v24 = 0;
        break;
    }
    unsigned int v25 = v24 + *(_DWORD *)(v16 + 176);
    if (v25 <= *(_DWORD *)(v16 + 180))
    {
      *(_DWORD *)(v16 + 176) = v25;
      goto LABEL_12;
    }
    if (*(_WORD *)(result + 29832)) {
      return result;
    }
    __int16 v23 = 1282;
LABEL_53:
    *(_WORD *)(result + 29832) = v23;
    return result;
  }
LABEL_12:
  if (*v7 != 5375)
  {
    *(void *)(result + 26312) = 0;
    *uint64_t v7 = 5375;
  }
  int v17 = (unsigned char *)(result + 32481);
  if (*(void *)(v10 + 944))
  {
    int v18 = 0;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1532) |= 0x1000u;
  }
  else
  {
    int v18 = *(_DWORD *)(result + 28652);
  }
  int v19 = 1 << a2;
  if ((v18 & (1 << a2)) != 0 && (*(unsigned char *)(result + 28681) & 1) != 0 && (*(unsigned char *)(result + 28683) & 4) != 0)
  {
    if (*(unsigned char *)(result + 32482)) {
      return result;
    }
  }
  else
  {
    uint64_t result = gleDoDrawDispatchCore(result, 1 << a2, 1u, 4u, a5, a6, a7);
    if (!result) {
      return result;
    }
  }
  if (!*v17)
  {
    uint64_t v20 = *(void *)(v10 + 912);
LABEL_30:
    if (v20 && !*(unsigned char *)(v10 + 1216)) {
      uint64_t result = gleSynchronizeBuffersInArray(v8, v10 + 40);
    }
    char v21 = 1;
    goto LABEL_34;
  }
  if (!*v9 && (*(_WORD *)(v10 + 922) & 0xFFFE) != 0x85BE || !*(_DWORD *)(v10 + 924) || !*(void *)(v10 + 928))
  {
    uint64_t v20 = *(void *)(v10 + 912);
    if ((*(void *)(v10 + 904) & ~v20) != 0) {
      goto LABEL_30;
    }
  }
  uint64_t result = (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t, void, void, uint64_t, void))(v8 + 29232))(*(void *)(v8 + 29016), 0, a2, a3, a4, *v7, *(void *)(v8 + 26312), 1, 0);
  if (result) {
    goto LABEL_43;
  }
  char v21 = 0;
LABEL_34:
  if ((*((_DWORD *)v7 + 579) & v19) != 0 && (*((unsigned char *)v7 + 2345) & 1) != 0 && (*((unsigned char *)v7 + 2347) & 2) != 0)
  {
    if (!v17[1])
    {
LABEL_38:
      if ((v21 & 1) == 0 && *(void *)(v10 + 912) && !*(unsigned char *)(v10 + 1216)) {
        gleSynchronizeBuffersInArray(v8, v10 + 40);
      }
      uint64_t result = gleDrawArraysOrElements_ExecCore(v8, a2, a3, a4, 0, v10 + 40, 1);
    }
  }
  else
  {
    uint64_t result = gleDoDrawDispatchCore(v8, 1 << a2, 1u, 2u, a5, a6, a7);
    if (result) {
      goto LABEL_38;
    }
  }
LABEL_43:
  int v22 = *(_DWORD *)(*(void *)(v8 + 19296) + 316);
  if (*((_DWORD *)v7 + 870) != v22)
  {
    if (*(void *)(v8 + 28960))
    {
      uint64_t result = gleInvalidateCurrentDrawFramebufferTextures(v8);
      int v22 = *(_DWORD *)(*(void *)(v8 + 19296) + 316);
    }
    *((_DWORD *)v7 + 870) = v22;
  }
  return result;
}

unint64_t glDrawElements_IMM_Exec(unint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, __n128 a6, double a7, double a8)
{
  unint64_t v8 = (unsigned __int16 *)(result + 26336);
  if (a2 >= 7) {
    goto LABEL_75;
  }
  unint64_t v9 = result;
  uint64_t v10 = (unsigned char *)(result + 17692);
  uint64_t v11 = *(void *)(result + 26384);
  if ((~*(_DWORD *)(v11 + 904) & 0x900000) != 0 && *(unsigned char *)(result + 17699) != 0
    || (*(void *)(v11 + 904) & 0x100010000) == 0)
  {
    return result;
  }
  if (a4 != 5123 && a4 != 5121 && a4 != 5125)
  {
LABEL_75:
    if (!*(_WORD *)(result + 29832))
    {
      __int16 v25 = 1280;
LABEL_59:
      *(_WORD *)(result + 29832) = v25;
      return result;
    }
    return result;
  }
  if ((int)a3 > 0)
  {
    uint64_t v16 = *(void *)(result + 26432);
    if (*(__int16 *)(v16 + 42) != -1 && !*(unsigned char *)(v16 + 41))
    {
      unsigned int v26 = a3;
      switch((int)a2)
      {
        case 0:
        case 2:
          break;
        case 1:
          unsigned int v26 = a3 >> 1;
          break;
        case 3:
          unsigned int v26 = a3 - 1;
          break;
        case 4:
          unsigned int v26 = a3 / 3;
          break;
        case 5:
        case 6:
          unsigned int v26 = a3 - 2;
          break;
        default:
          unsigned int v26 = 0;
          break;
      }
      unsigned int v27 = v26 + *(_DWORD *)(v16 + 176);
      if (v27 > *(_DWORD *)(v16 + 180))
      {
        if (!*(_WORD *)(result + 29832))
        {
          __int16 v25 = 1282;
          goto LABEL_59;
        }
        return result;
      }
      *(_DWORD *)(v16 + 176) = v27;
    }
    uint64_t v17 = *(void *)(v11 + 1232);
    if (v17) {
      a5 += *(void *)(v17 + 136);
    }
    *(void *)(result + 26312) = a5;
    *unint64_t v8 = a4;
    if ((a4 - 5121) > 4) {
      unsigned int v18 = 1;
    }
    else {
      unsigned int v18 = dword_227DC1EA8[a4 - 5121];
    }
    int v19 = (unsigned char *)(result + 32481);
    if (*(void *)(v11 + 944))
    {
      int v20 = 0;
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1532) |= 0x1000u;
    }
    else
    {
      int v20 = *(_DWORD *)(result + 28652);
    }
    int v21 = 1 << a2;
    if ((v20 & (1 << a2)) != 0
      && (v18 & *(unsigned char *)(result + 28681)) != 0
      && (*(unsigned char *)(result + 28683) & 4) != 0)
    {
      if (*(unsigned char *)(result + 32482)) {
        return result;
      }
    }
    else
    {
      uint64_t result = gleDoDrawDispatchCore(result, 1 << a2, v18, 4u, a6, a7, a8);
      if (!result) {
        return result;
      }
    }
    if (*v19)
    {
      if ((*v10 || (*(_WORD *)(v11 + 922) & 0xFFFE) == 0x85BE) && *(_DWORD *)(v11 + 924) && *(void *)(v11 + 928)
        || (uint64_t v22 = *(void *)(v11 + 912), (*(void *)(v11 + 904) & ~v22) == 0))
      {
        uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, void, uint64_t, void, void, uint64_t, void))(v9 + 29232))(*(void *)(v9 + 29016), 1, a2, 0, a3, *v8, *(void *)(v9 + 26312), 1, 0);
        if (result) {
          goto LABEL_47;
        }
        char v23 = 0;
LABEL_38:
        if ((*((_DWORD *)v8 + 579) & v21) != 0 && (*((unsigned char *)v8 + 2345) & 1) != 0 && (*((unsigned char *)v8 + 2347) & 2) != 0)
        {
          if (!v19[1])
          {
LABEL_42:
            if ((v23 & 1) == 0 && *(void *)(v11 + 912) && !*(unsigned char *)(v11 + 1216)) {
              gleSynchronizeBuffersInArray(v9, v11 + 40);
            }
            uint64_t result = gleDrawArraysOrElements_ExecCore(v9, a2, 0, a3, 1, v11 + 40, 1);
          }
        }
        else
        {
          uint64_t result = gleDoDrawDispatchCore(v9, 1 << a2, 1u, 2u, a6, a7, a8);
          if (result) {
            goto LABEL_42;
          }
        }
LABEL_47:
        int v24 = *(_DWORD *)(*(void *)(v9 + 19296) + 316);
        if (*((_DWORD *)v8 + 870) != v24)
        {
          if (*(void *)(v9 + 28960))
          {
            uint64_t result = gleInvalidateCurrentDrawFramebufferTextures(v9);
            int v24 = *(_DWORD *)(*(void *)(v9 + 19296) + 316);
          }
          *((_DWORD *)v8 + 870) = v24;
        }
        return result;
      }
    }
    else
    {
      uint64_t v22 = *(void *)(v11 + 912);
    }
    if (v22 && !*(unsigned char *)(v11 + 1216)) {
      uint64_t result = gleSynchronizeBuffersInArray(v9, v11 + 40);
    }
    char v23 = 1;
    goto LABEL_38;
  }
  if ((a3 & 0x80000000) != 0 && !*(_WORD *)(result + 29832))
  {
    __int16 v25 = 1281;
    goto LABEL_59;
  }
  return result;
}

uint64_t glVertexAttrib1fARB_Exec(uint64_t result, unsigned int a2, float a3)
{
  if (a2 >= 0x10)
  {
    if (!*(_WORD *)(result + 29832)) {
      *(_WORD *)(result + 29832) = 1281;
    }
  }
  else
  {
    uint64_t v3 = result + 32 * a2;
    *(float *)(v3 + 8688) = a3;
    uint64_t v4 = *(void *)(result + 288);
    *(_DWORD *)(v3 + 8692) = v4;
    *(void *)(v3 + 8696) = v4;
  }
  return result;
}

float *glVertexAttrib1fARB_Comp(uint64_t a1, int a2, float a3)
{
  uint64_t result = (float *)gleAddCommand(a1, (uint64_t)glVertexAttrib1fvARB_ListExec, 8);
  *(_DWORD *)uint64_t result = a2;
  result[1] = a3;
  return result;
}

uint64_t glVertexAttrib1fvARB_ListExec(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *a2;
  if (v2 >= 0x10)
  {
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1281;
    }
  }
  else
  {
    uint64_t v3 = a1 + 32 * v2;
    *(_DWORD *)(v3 + 8688) = a2[1];
    uint64_t v4 = *(void *)(a1 + 288);
    *(_DWORD *)(v3 + 8692) = v4;
    *(void *)(v3 + 8696) = v4;
  }
  return 8;
}

uint64_t glVertexAttrib2fARB_Exec(uint64_t result, unsigned int a2, float a3, float a4)
{
  if (a2 >= 0x10)
  {
    if (!*(_WORD *)(result + 29832)) {
      *(_WORD *)(result + 29832) = 1281;
    }
  }
  else
  {
    uint64_t v4 = result + 32 * a2;
    *(float *)(v4 + 8688) = a3;
    *(float *)(v4 + 8692) = a4;
    *(void *)(v4 + 8696) = *(void *)(result + 288);
  }
  return result;
}

float *glVertexAttrib2fARB_Comp(uint64_t a1, int a2, float a3, float a4)
{
  uint64_t result = (float *)gleAddCommand(a1, (uint64_t)glVertexAttrib2fvARB_ListExec, 12);
  *(_DWORD *)uint64_t result = a2;
  result[1] = a3;
  result[2] = a4;
  return result;
}

uint64_t glVertexAttrib2fvARB_ListExec(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *a2;
  if (v2 >= 0x10)
  {
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1281;
    }
  }
  else
  {
    int v3 = *(_DWORD *)(a1 + 292);
    uint64_t v4 = a1 + 32 * v2;
    *(void *)(v4 + 8688) = *(void *)(a2 + 1);
    *(_DWORD *)(v4 + 8696) = 0;
    *(_DWORD *)(v4 + 8700) = v3;
  }
  return 12;
}

uint64_t glVertexAttrib3fARB_Exec(uint64_t result, unsigned int a2, float a3, float a4, float a5)
{
  if (a2 >= 0x10)
  {
    if (!*(_WORD *)(result + 29832)) {
      *(_WORD *)(result + 29832) = 1281;
    }
  }
  else
  {
    int v5 = *(_DWORD *)(result + 292);
    uint64_t v6 = result + 32 * a2;
    *(float *)(v6 + 8688) = a3;
    *(float *)(v6 + 8692) = a4;
    *(float *)(v6 + 8696) = a5;
    *(_DWORD *)(v6 + 8700) = v5;
  }
  return result;
}

float *glVertexAttrib3fARB_Comp(uint64_t a1, int a2, float a3, float a4, float a5)
{
  uint64_t result = (float *)gleAddCommand(a1, (uint64_t)glVertexAttrib3fvARB_ListExec, 16);
  *(_DWORD *)uint64_t result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  return result;
}

uint64_t glVertexAttrib3fvARB_ListExec(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *a2;
  if (v2 >= 0x10)
  {
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1281;
    }
  }
  else
  {
    uint64_t v3 = a1 + 32 * v2;
    unsigned int v4 = a2[3];
    int v5 = *(_DWORD *)(a1 + 292);
    *(void *)(v3 + 8688) = *(void *)(a2 + 1);
    *(_DWORD *)(v3 + 8696) = v4;
    *(_DWORD *)(v3 + 8700) = v5;
  }
  return 16;
}

uint64_t glVertexAttrib4fARB_Exec(uint64_t result, unsigned int a2, float a3, float a4, float a5, float a6)
{
  if (a2 >= 0x10)
  {
    if (!*(_WORD *)(result + 29832)) {
      *(_WORD *)(result + 29832) = 1281;
    }
  }
  else
  {
    uint64_t v6 = (float *)(result + 32 * a2);
    v6[2172] = a3;
    v6[2173] = a4;
    v6[2174] = a5;
    v6[2175] = a6;
  }
  return result;
}

float *glVertexAttrib4fARB_Comp(uint64_t a1, int a2, float a3, float a4, float a5, float a6)
{
  uint64_t result = (float *)gleAddCommand(a1, (uint64_t)glVertexAttrib4fvARB_ListExec, 20);
  *(_DWORD *)uint64_t result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  result[4] = a6;
  return result;
}

uint64_t glVertexAttrib4fvARB_ListExec(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *a2;
  if (v2 >= 0x10)
  {
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1281;
    }
  }
  else
  {
    *(_OWORD *)(a1 + 32 * v2 + 8688) = *(_OWORD *)(a2 + 1);
  }
  return 20;
}

uint64_t glVertexAttrib1fvARB_Exec(uint64_t result, unsigned int a2, _DWORD *a3)
{
  if (a2 >= 0x10)
  {
    if (!*(_WORD *)(result + 29832)) {
      *(_WORD *)(result + 29832) = 1281;
    }
  }
  else
  {
    uint64_t v3 = result + 32 * a2;
    *(_DWORD *)(v3 + 8688) = *a3;
    uint64_t v4 = *(void *)(result + 288);
    *(_DWORD *)(v3 + 8692) = v4;
    *(void *)(v3 + 8696) = v4;
  }
  return result;
}

float glVertexAttrib1fvARB_Comp(uint64_t a1, int a2, float *a3)
{
  int v5 = gleAddCommand(a1, (uint64_t)glVertexAttrib1fvARB_ListExec, 8);
  *int v5 = a2;
  float result = *a3;
  v5[1] = *(_DWORD *)a3;
  return result;
}

uint64_t glVertexAttrib2fvARB_Exec(uint64_t result, unsigned int a2, void *a3)
{
  if (a2 >= 0x10)
  {
    if (!*(_WORD *)(result + 29832)) {
      *(_WORD *)(result + 29832) = 1281;
    }
  }
  else
  {
    int v3 = *(_DWORD *)(result + 292);
    uint64_t v4 = result + 32 * a2;
    *(void *)(v4 + 8688) = *a3;
    *(_DWORD *)(v4 + 8696) = 0;
    *(_DWORD *)(v4 + 8700) = v3;
  }
  return result;
}

float glVertexAttrib2fvARB_Comp(uint64_t a1, int a2, uint64_t a3)
{
  int v5 = gleAddCommand(a1, (uint64_t)glVertexAttrib2fvARB_ListExec, 12);
  *(_DWORD *)int v5 = a2;
  *((_DWORD *)v5 + 1) = *(_DWORD *)a3;
  float result = *(float *)(a3 + 4);
  *((float *)v5 + 2) = result;
  return result;
}

uint64_t glVertexAttrib3fvARB_Exec(uint64_t result, unsigned int a2, uint64_t a3)
{
  if (a2 >= 0x10)
  {
    if (!*(_WORD *)(result + 29832)) {
      *(_WORD *)(result + 29832) = 1281;
    }
  }
  else
  {
    int v3 = *(_DWORD *)(a3 + 8);
    int v4 = *(_DWORD *)(result + 292);
    uint64_t v5 = result + 32 * a2;
    *(void *)(v5 + 8688) = *(void *)a3;
    *(_DWORD *)(v5 + 8696) = v3;
    *(_DWORD *)(v5 + 8700) = v4;
  }
  return result;
}

float glVertexAttrib3fvARB_Comp(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5 = gleAddCommand(a1, (uint64_t)glVertexAttrib3fvARB_ListExec, 16);
  *(_DWORD *)uint64_t v5 = a2;
  *((_DWORD *)v5 + 1) = *(_DWORD *)a3;
  *((_DWORD *)v5 + 2) = *(_DWORD *)(a3 + 4);
  float result = *(float *)(a3 + 8);
  *((float *)v5 + 3) = result;
  return result;
}

uint64_t glVertexAttrib4fvARB_Exec(uint64_t result, unsigned int a2, _OWORD *a3)
{
  if (a2 >= 0x10)
  {
    if (!*(_WORD *)(result + 29832)) {
      *(_WORD *)(result + 29832) = 1281;
    }
  }
  else
  {
    *(_OWORD *)(result + 32 * a2 + 8688) = *a3;
  }
  return result;
}

float glVertexAttrib4fvARB_Comp(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5 = gleAddCommand(a1, (uint64_t)glVertexAttrib4fvARB_ListExec, 20);
  *(_DWORD *)uint64_t v5 = a2;
  *((_DWORD *)v5 + 1) = *(_DWORD *)a3;
  *((_DWORD *)v5 + 2) = *(_DWORD *)(a3 + 4);
  *((_DWORD *)v5 + 3) = *(_DWORD *)(a3 + 8);
  float result = *(float *)(a3 + 12);
  *((float *)v5 + 4) = result;
  return result;
}

uint64_t glVertexAttribI4iEXT_Exec(uint64_t result, unsigned int a2, int a3, int a4, int a5, int a6)
{
  if (a2 >= 0x10)
  {
    if (!*(_WORD *)(result + 29832)) {
      *(_WORD *)(result + 29832) = 1281;
    }
  }
  else
  {
    uint64_t v6 = (_DWORD *)(result + 32 * a2);
    v6[2172] = a3;
    v6[2173] = a4;
    v6[2174] = a5;
    v6[2175] = a6;
  }
  return result;
}

_DWORD *glVertexAttribI4iEXT_Comp(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  float result = gleAddCommand(a1, (uint64_t)glVertexAttribI4ivEXT_ListExec, 20);
  *float result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  result[4] = a6;
  return result;
}

uint64_t glVertexAttribI4ivEXT_ListExec(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *a2;
  if (v2 >= 0x10)
  {
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1281;
    }
  }
  else
  {
    uint64_t v3 = a1 + 32 * v2;
    *(void *)(v3 + 8688) = *(void *)(a2 + 1);
    *(void *)(v3 + 8696) = *(void *)(a2 + 3);
  }
  return 20;
}

uint64_t glVertexAttribI4uiEXT_Exec(uint64_t result, unsigned int a2, int a3, int a4, int a5, int a6)
{
  if (a2 >= 0x10)
  {
    if (!*(_WORD *)(result + 29832)) {
      *(_WORD *)(result + 29832) = 1281;
    }
  }
  else
  {
    uint64_t v6 = (_DWORD *)(result + 32 * a2);
    v6[2172] = a3;
    v6[2173] = a4;
    v6[2174] = a5;
    v6[2175] = a6;
  }
  return result;
}

_DWORD *glVertexAttribI4uiEXT_Comp(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  float result = gleAddCommand(a1, (uint64_t)glVertexAttribI4uivEXT_ListExec, 20);
  *float result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  result[4] = a6;
  return result;
}

uint64_t glVertexAttribI4uivEXT_ListExec(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *a2;
  if (v2 >= 0x10)
  {
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1281;
    }
  }
  else
  {
    uint64_t v3 = a1 + 32 * v2;
    *(void *)(v3 + 8688) = *(void *)(a2 + 1);
    *(void *)(v3 + 8696) = *(void *)(a2 + 3);
  }
  return 20;
}

uint64_t glVertexAttribI4ivEXT_Exec(uint64_t result, unsigned int a2, void *a3)
{
  if (a2 >= 0x10)
  {
    if (!*(_WORD *)(result + 29832)) {
      *(_WORD *)(result + 29832) = 1281;
    }
  }
  else
  {
    uint64_t v3 = result + 32 * a2;
    *(void *)(v3 + 8688) = *a3;
    *(void *)(v3 + 8696) = a3[1];
  }
  return result;
}

_DWORD *glVertexAttribI4ivEXT_Comp(uint64_t a1, int a2, _DWORD *a3)
{
  float result = gleAddCommand(a1, (uint64_t)glVertexAttribI4ivEXT_ListExec, 20);
  *float result = a2;
  result[1] = *a3;
  result[2] = a3[1];
  result[3] = a3[2];
  result[4] = a3[3];
  return result;
}

uint64_t glVertexAttribI4uivEXT_Exec(uint64_t result, unsigned int a2, void *a3)
{
  if (a2 >= 0x10)
  {
    if (!*(_WORD *)(result + 29832)) {
      *(_WORD *)(result + 29832) = 1281;
    }
  }
  else
  {
    uint64_t v3 = result + 32 * a2;
    *(void *)(v3 + 8688) = *a3;
    *(void *)(v3 + 8696) = a3[1];
  }
  return result;
}

_DWORD *glVertexAttribI4uivEXT_Comp(uint64_t a1, int a2, _DWORD *a3)
{
  float result = gleAddCommand(a1, (uint64_t)glVertexAttribI4uivEXT_ListExec, 20);
  *float result = a2;
  result[1] = *a3;
  result[2] = a3[1];
  result[3] = a3[2];
  result[4] = a3[3];
  return result;
}

void glBindVertexArray_Exec(uint64_t a1, unsigned int a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  gleBindVertexArray(a1, a2);
  int v4 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);

  os_unfair_lock_unlock(v4);
}

void glDeleteVertexArrays_Exec(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  if ((a2 & 0x80000000) != 0)
  {
    if (!*(_WORD *)(a1 + 29832)) {
      *(_WORD *)(a1 + 29832) = 1281;
    }
  }
  else
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (a2)
    {
      uint64_t v6 = a2;
      do
      {
        unsigned int v8 = *a3++;
        unsigned int v7 = v8;
        if (v8)
        {
          uint64_t v9 = *(void *)(a1 + 26384);
          if (v9)
          {
            if (v7 == *(_DWORD *)(v9 + 16))
            {
              gleBindVertexArray(a1, 0);
              if (*(void *)(a1 + 27648)) {
                *(void *)(a1 + 26448) = *(void *)(a1 + 26456);
              }
            }
          }
          uint64_t v10 = gleDeleteHashNameAndObject_NoDecrement(a1 + 26352, v7);
          if (v10)
          {
            int v11 = *((_DWORD *)v10 + 5) - 1;
            *((_DWORD *)v10 + 5) = v11;
            if (v11) {
              gleUnbindVertexArrayObject(a1, (uint64_t)v10);
            }
            else {
              gleUnbindAndFreeVertexArrayObject(a1, (char *)v10);
            }
          }
        }
        --v6;
      }
      while (v6);
    }
    uint64_t v12 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
    os_unfair_lock_unlock(v12);
  }
}

uint64_t glGenVertexArrays_Exec(uint64_t result, unsigned int a2, _DWORD *a3)
{
  if ((a2 & 0x80000000) != 0)
  {
    if (!*(_WORD *)(result + 29832)) {
      *(_WORD *)(result + 29832) = 1281;
    }
  }
  else
  {
    float result = gleGenHashNames(result + 26352, a2);
    if (result && a2)
    {
      uint64_t v5 = a2;
      do
      {
        *a3++ = result;
        float result = (result + 1);
        --v5;
      }
      while (v5);
    }
  }
  return result;
}

BOOL glIsVertexArray_Exec(uint64_t a1, unsigned int a2)
{
  return gleLookupHashObject(a1 + 26352, a2) != 0;
}

uint64_t *glDeleteVertexArrays_ExecThread(uint64_t *result, unsigned int a2, unsigned int *a3)
{
  uint64_t v3 = (uint64_t)result;
  if ((a2 & 0x80000000) != 0)
  {
    if (!*((_WORD *)result + 14916)) {
      *((_WORD *)result + 14916) = 1281;
    }
  }
  else if (a2)
  {
    uint64_t v5 = a2;
    do
    {
      unsigned int v7 = *a3++;
      unsigned int v6 = v7;
      if (v7)
      {
        uint64_t v8 = *(void *)(v3 + 26448);
        if (v8 && v6 == *(_DWORD *)(*(void *)(v8 + 1088) + 16)) {
          gleBindVertexArray_Thread(v3, 0);
        }
        float result = gleDeleteHashNameAndObject_NoDecrement(v3 + 26352, v6);
        if (result)
        {
          uint64_t v9 = result;
          float result = gleAddCommand(v3, (uint64_t)gleDeleteVertexArrayObject_UnpackThread, 8);
          *float result = (uint64_t)v9;
        }
      }
      --v5;
    }
    while (v5);
  }
  return result;
}

BOOL glIsVertexArray_ExecThread(uint64_t a1, unsigned int a2)
{
  return gleLookupHashObject(a1 + 26352, a2) != 0;
}

void *glEnableVertexAttribArrayARB_PackThread(void *result, unsigned int a2)
{
  uint64_t v2 = result;
  if (!result[3306])
  {
    int v4 = (__int16 *)(result + 3729);
    if (*((_WORD *)result + 14916)) {
      return result;
    }
    __int16 v5 = 1282;
    goto LABEL_7;
  }
  if (a2 >= 0x10)
  {
    int v4 = (__int16 *)(result + 3729);
    if (*((_WORD *)result + 14916)) {
      return result;
    }
    __int16 v5 = 1281;
LABEL_7:
    *int v4 = v5;
    return result;
  }
  float result = gleAddCommand((uint64_t)result, (uint64_t)glEnableVertexAttribArrayARB_UnpackThread, 4);
  *(_DWORD *)float result = a2;
  *(void *)(v2[3306] + 272) |= 0x100000000 << a2;
  return result;
}

uint64_t glEnableVertexAttribArrayARB_UnpackThread(uint64_t a1, unsigned int *a2)
{
  return 4;
}

void *glDisableVertexAttribArrayARB_PackThread(void *result, unsigned int a2)
{
  uint64_t v2 = result;
  if (!result[3306])
  {
    int v4 = (__int16 *)(result + 3729);
    if (*((_WORD *)result + 14916)) {
      return result;
    }
    __int16 v5 = 1282;
    goto LABEL_7;
  }
  if (a2 >= 0x10)
  {
    int v4 = (__int16 *)(result + 3729);
    if (*((_WORD *)result + 14916)) {
      return result;
    }
    __int16 v5 = 1281;
LABEL_7:
    *int v4 = v5;
    return result;
  }
  float result = gleAddCommand((uint64_t)result, (uint64_t)glDisableVertexAttribArrayARB_UnpackThread, 4);
  *(_DWORD *)float result = a2;
  *(void *)(v2[3306] + 272) &= ~(0x100000000 << a2);
  return result;
}

uint64_t glDisableVertexAttribArrayARB_UnpackThread(uint64_t a1, unsigned int *a2)
{
  return 4;
}

uint64_t glGetVertexAttribfvARB_Exec(uint64_t result, unsigned int a2, int a3, float *a4)
{
  if (a2 >= 0x10)
  {
    uint64_t v17 = (__int16 *)(result + 29832);
    if (*(_WORD *)(result + 29832)) {
      return result;
    }
    __int16 v18 = 1281;
LABEL_36:
    *uint64_t v17 = v18;
    return result;
  }
  if (a3 <= 34921)
  {
    switch(a3)
    {
      case 34338:
        uint64_t v4 = *(void *)(result + 26384);
        if (!v4) {
          goto LABEL_40;
        }
        float v5 = 0.0;
        if (((*(void *)(v4 + 904) >> a2) & 0x100000000) != 0) {
          float v5 = 1.0;
        }
        goto LABEL_33;
      case 34339:
        uint64_t v10 = *(void *)(result + 26384);
        if (!v10) {
          goto LABEL_40;
        }
        float v5 = (float)*(char *)(v10 + 24 * (a2 + 16) + 158);
        goto LABEL_33;
      case 34340:
        uint64_t v11 = *(void *)(result + 26384);
        if (!v11) {
          goto LABEL_40;
        }
        float v5 = (float)*(int *)(v11 + 24 * (a2 + 16) + 152);
        goto LABEL_33;
      case 34341:
        uint64_t v12 = *(void *)(result + 26384);
        if (!v12) {
          goto LABEL_40;
        }
        unsigned int v13 = *(_WORD *)(v12 + 24 * (a2 + 16) + 156) & 0x9FFF;
        goto LABEL_32;
      case 34342:
        for (uint64_t i = 0; i != 4; ++i)
          a4[i] = *(float *)(result + 32 * a2 + 8688 + i * 4);
        return result;
      default:
        goto LABEL_34;
    }
  }
  if (a3 <= 35068)
  {
    if (a3 != 34922)
    {
      if (a3 == 34975)
      {
        uint64_t v6 = *(void *)(result + 26384);
        if (v6)
        {
          uint64_t v7 = *(void *)(v6 + 8 * (a2 + 16) + 1240);
          if (!v7)
          {
            float v5 = 0.0;
            goto LABEL_33;
          }
          unsigned int v8 = *(_DWORD *)(v7 + 16);
          goto LABEL_18;
        }
        goto LABEL_40;
      }
      goto LABEL_34;
    }
    uint64_t v15 = *(void *)(result + 26384);
    if (!v15) {
      goto LABEL_40;
    }
    unsigned int v13 = (*(unsigned __int16 *)(v15 + 24 * (a2 + 16) + 156) >> 13) & 1;
LABEL_32:
    float v5 = (float)v13;
    goto LABEL_33;
  }
  if (a3 == 35069)
  {
    uint64_t v16 = *(void *)(result + 26384);
    if (!v16) {
      goto LABEL_40;
    }
    unsigned int v13 = (*(unsigned __int16 *)(v16 + 24 * (a2 + 16) + 156) >> 14) & 1;
    goto LABEL_32;
  }
  if (a3 != 35070)
  {
LABEL_34:
    uint64_t v17 = (__int16 *)(result + 29832);
    if (*(_WORD *)(result + 29832)) {
      return result;
    }
    __int16 v18 = 1280;
    goto LABEL_36;
  }
  uint64_t v9 = *(void *)(result + 26384);
  if (v9)
  {
    unsigned int v8 = *(_DWORD *)(v9 + 24 * (a2 + 16) + 144);
LABEL_18:
    float v5 = (float)v8;
LABEL_33:
    *a4 = v5;
    return result;
  }
LABEL_40:
  uint64_t v17 = (__int16 *)(result + 29832);
  if (!*(_WORD *)(result + 29832))
  {
    __int16 v18 = 1282;
    goto LABEL_36;
  }
  return result;
}

uint64_t glGetVertexAttribivARB_Exec(uint64_t result, unsigned int a2, int a3, int32x4_t *a4)
{
  if (a2 >= 0x10)
  {
    uint64_t v7 = (__int16 *)(result + 29832);
    if (*(_WORD *)(result + 29832)) {
      return result;
    }
    __int16 v8 = 1281;
LABEL_31:
    *uint64_t v7 = v8;
    return result;
  }
  if (a3 <= 34921)
  {
    switch(a3)
    {
      case 34338:
        uint64_t v4 = *(void *)(result + 26384);
        if (!v4) {
          goto LABEL_34;
        }
        a4->i32[0] = (*(void *)(v4 + 904) >> a2 >> 32) & 1;
        return result;
      case 34339:
        uint64_t v6 = *(void *)(result + 26384);
        if (!v6) {
          goto LABEL_34;
        }
        LODWORD(v6) = *(char *)(v6 + 24 * (a2 + 16) + 158);
        goto LABEL_27;
      case 34340:
        uint64_t v6 = *(void *)(result + 26384);
        if (!v6) {
          goto LABEL_34;
        }
        LODWORD(v6) = *(_DWORD *)(v6 + 24 * (a2 + 16) + 152);
        goto LABEL_27;
      case 34341:
        uint64_t v6 = *(void *)(result + 26384);
        if (!v6) {
          goto LABEL_34;
        }
        LODWORD(v6) = *(_WORD *)(v6 + 24 * (a2 + 16) + 156) & 0x9FFF;
        goto LABEL_27;
      case 34342:
        *a4 = vcvtq_s32_f32(*(float32x4_t *)(result + 32 * a2 + 8688));
        return result;
      default:
        goto LABEL_28;
    }
  }
  if (a3 > 35068)
  {
    if (a3 == 35069)
    {
      uint64_t v6 = *(void *)(result + 26384);
      if (!v6) {
        goto LABEL_34;
      }
      LODWORD(v6) = (*(unsigned __int16 *)(v6 + 24 * (a2 + 16) + 156) >> 14) & 1;
    }
    else
    {
      if (a3 != 35070) {
        goto LABEL_28;
      }
      uint64_t v6 = *(void *)(result + 26384);
      if (!v6) {
        goto LABEL_34;
      }
      LODWORD(v6) = *(_DWORD *)(v6 + 24 * (a2 + 16) + 144);
    }
LABEL_27:
    a4->i32[0] = v6;
    return result;
  }
  if (a3 == 34922)
  {
    uint64_t v6 = *(void *)(result + 26384);
    if (!v6) {
      goto LABEL_34;
    }
    LODWORD(v6) = (*(unsigned __int16 *)(v6 + 24 * (a2 + 16) + 156) >> 13) & 1;
    goto LABEL_27;
  }
  if (a3 != 34975)
  {
LABEL_28:
    uint64_t v7 = (__int16 *)(result + 29832);
    if (*(_WORD *)(result + 29832)) {
      return result;
    }
    __int16 v8 = 1280;
    goto LABEL_31;
  }
  uint64_t v5 = *(void *)(result + 26384);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 8 * (a2 + 16) + 1240);
    if (v6) {
      LODWORD(v6) = *(_DWORD *)(v6 + 16);
    }
    goto LABEL_27;
  }
LABEL_34:
  uint64_t v7 = (__int16 *)(result + 29832);
  if (!*(_WORD *)(result + 29832))
  {
    __int16 v8 = 1282;
    goto LABEL_31;
  }
  return result;
}

uint64_t glGetVertexAttribIivEXT_Exec(uint64_t result, unsigned int a2, int a3, _DWORD *a4)
{
  if (a2 >= 0x10)
  {
    __int16 v8 = (__int16 *)(result + 29832);
    if (*(_WORD *)(result + 29832)) {
      return result;
    }
    __int16 v9 = 1281;
LABEL_32:
    *__int16 v8 = v9;
    return result;
  }
  if (a3 <= 34921)
  {
    switch(a3)
    {
      case 34338:
        uint64_t v4 = *(void *)(result + 26384);
        if (!v4) {
          goto LABEL_35;
        }
        *a4 = (*(void *)(v4 + 904) >> a2 >> 32) & 1;
        return result;
      case 34339:
        uint64_t v6 = *(void *)(result + 26384);
        if (!v6) {
          goto LABEL_35;
        }
        LODWORD(v6) = *(char *)(v6 + 24 * (a2 + 16) + 158);
        goto LABEL_29;
      case 34340:
        uint64_t v6 = *(void *)(result + 26384);
        if (!v6) {
          goto LABEL_35;
        }
        LODWORD(v6) = *(_DWORD *)(v6 + 24 * (a2 + 16) + 152);
        goto LABEL_29;
      case 34341:
        uint64_t v6 = *(void *)(result + 26384);
        if (!v6) {
          goto LABEL_35;
        }
        LODWORD(v6) = *(_WORD *)(v6 + 24 * (a2 + 16) + 156) & 0x9FFF;
        goto LABEL_29;
      case 34342:
        for (uint64_t i = 0; i != 4; ++i)
          a4[i] = *(_DWORD *)(result + 32 * a2 + 8688 + i * 4);
        return result;
      default:
        goto LABEL_30;
    }
  }
  if (a3 > 35068)
  {
    if (a3 == 35069)
    {
      uint64_t v6 = *(void *)(result + 26384);
      if (!v6) {
        goto LABEL_35;
      }
      LODWORD(v6) = (*(unsigned __int16 *)(v6 + 24 * (a2 + 16) + 156) >> 14) & 1;
    }
    else
    {
      if (a3 != 35070) {
        goto LABEL_30;
      }
      uint64_t v6 = *(void *)(result + 26384);
      if (!v6) {
        goto LABEL_35;
      }
      LODWORD(v6) = *(_DWORD *)(v6 + 24 * (a2 + 16) + 144);
    }
LABEL_29:
    *a4 = v6;
    return result;
  }
  if (a3 == 34922)
  {
    uint64_t v6 = *(void *)(result + 26384);
    if (!v6) {
      goto LABEL_35;
    }
    LODWORD(v6) = (*(unsigned __int16 *)(v6 + 24 * (a2 + 16) + 156) >> 13) & 1;
    goto LABEL_29;
  }
  if (a3 != 34975)
  {
LABEL_30:
    __int16 v8 = (__int16 *)(result + 29832);
    if (*(_WORD *)(result + 29832)) {
      return result;
    }
    __int16 v9 = 1280;
    goto LABEL_32;
  }
  uint64_t v5 = *(void *)(result + 26384);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 8 * (a2 + 16) + 1240);
    if (v6) {
      LODWORD(v6) = *(_DWORD *)(v6 + 16);
    }
    goto LABEL_29;
  }
LABEL_35:
  __int16 v8 = (__int16 *)(result + 29832);
  if (!*(_WORD *)(result + 29832))
  {
    __int16 v9 = 1282;
    goto LABEL_32;
  }
  return result;
}

uint64_t glGetVertexAttribIuivEXT_Exec(uint64_t result, unsigned int a2, int a3, _DWORD *a4)
{
  if (a2 >= 0x10)
  {
    __int16 v8 = (__int16 *)(result + 29832);
    if (*(_WORD *)(result + 29832)) {
      return result;
    }
    __int16 v9 = 1281;
LABEL_32:
    *__int16 v8 = v9;
    return result;
  }
  if (a3 <= 34921)
  {
    switch(a3)
    {
      case 34338:
        uint64_t v4 = *(void *)(result + 26384);
        if (!v4) {
          goto LABEL_35;
        }
        *a4 = (*(void *)(v4 + 904) >> a2 >> 32) & 1;
        return result;
      case 34339:
        uint64_t v6 = *(void *)(result + 26384);
        if (!v6) {
          goto LABEL_35;
        }
        LODWORD(v6) = *(char *)(v6 + 24 * (a2 + 16) + 158);
        goto LABEL_29;
      case 34340:
        uint64_t v6 = *(void *)(result + 26384);
        if (!v6) {
          goto LABEL_35;
        }
        LODWORD(v6) = *(_DWORD *)(v6 + 24 * (a2 + 16) + 152);
        goto LABEL_29;
      case 34341:
        uint64_t v6 = *(void *)(result + 26384);
        if (!v6) {
          goto LABEL_35;
        }
        LODWORD(v6) = *(_WORD *)(v6 + 24 * (a2 + 16) + 156) & 0x9FFF;
        goto LABEL_29;
      case 34342:
        for (uint64_t i = 0; i != 4; ++i)
          a4[i] = *(_DWORD *)(result + 32 * a2 + 8688 + i * 4);
        return result;
      default:
        goto LABEL_30;
    }
  }
  if (a3 > 35068)
  {
    if (a3 == 35069)
    {
      uint64_t v6 = *(void *)(result + 26384);
      if (!v6) {
        goto LABEL_35;
      }
      LODWORD(v6) = (*(unsigned __int16 *)(v6 + 24 * (a2 + 16) + 156) >> 14) & 1;
    }
    else
    {
      if (a3 != 35070) {
        goto LABEL_30;
      }
      uint64_t v6 = *(void *)(result + 26384);
      if (!v6) {
        goto LABEL_35;
      }
      LODWORD(v6) = *(_DWORD *)(v6 + 24 * (a2 + 16) + 144);
    }
LABEL_29:
    *a4 = v6;
    return result;
  }
  if (a3 == 34922)
  {
    uint64_t v6 = *(void *)(result + 26384);
    if (!v6) {
      goto LABEL_35;
    }
    LODWORD(v6) = (*(unsigned __int16 *)(v6 + 24 * (a2 + 16) + 156) >> 13) & 1;
    goto LABEL_29;
  }
  if (a3 != 34975)
  {
LABEL_30:
    __int16 v8 = (__int16 *)(result + 29832);
    if (*(_WORD *)(result + 29832)) {
      return result;
    }
    __int16 v9 = 1280;
    goto LABEL_32;
  }
  uint64_t v5 = *(void *)(result + 26384);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 8 * (a2 + 16) + 1240);
    if (v6) {
      LODWORD(v6) = *(_DWORD *)(v6 + 16);
    }
    goto LABEL_29;
  }
LABEL_35:
  __int16 v8 = (__int16 *)(result + 29832);
  if (!*(_WORD *)(result + 29832))
  {
    __int16 v9 = 1282;
    goto LABEL_32;
  }
  return result;
}

uint64_t glGetVertexAttribPointervARB_Exec(uint64_t result, unsigned int a2, int a3, void *a4)
{
  if (a2 < 0x10)
  {
    if (a3 == 34373)
    {
      uint64_t v6 = *(void *)(result + 26384);
      if (v6)
      {
        *a4 = *(void *)(v6 + 24 * (a2 + 16) + 136);
        return result;
      }
      uint64_t v4 = (__int16 *)(result + 29832);
      if (!*(_WORD *)(result + 29832))
      {
        __int16 v5 = 1282;
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v4 = (__int16 *)(result + 29832);
      if (!*(_WORD *)(result + 29832))
      {
        __int16 v5 = 1280;
        goto LABEL_12;
      }
    }
  }
  else
  {
    uint64_t v4 = (__int16 *)(result + 29832);
    if (!*(_WORD *)(result + 29832))
    {
      __int16 v5 = 1281;
LABEL_12:
      *uint64_t v4 = v5;
    }
  }
  return result;
}

uint64_t glGetVertexAttribfvARB_ExecThread(uint64_t a1, unsigned int a2, int a3, float *a4)
{
  (*(void (**)(void))(a1 + 27752))();

  return glGetVertexAttribfvARB_Exec(a1, a2, a3, a4);
}

uint64_t glGetVertexAttribivARB_ExecThread(uint64_t a1, unsigned int a2, int a3, int32x4_t *a4)
{
  (*(void (**)(void))(a1 + 27752))();

  return glGetVertexAttribivARB_Exec(a1, a2, a3, a4);
}

uint64_t glGetVertexAttribPointervARB_ExecThread(uint64_t a1, unsigned int a2, int a3, void *a4)
{
  (*(void (**)(void))(a1 + 27752))();

  return glGetVertexAttribPointervARB_Exec(a1, a2, a3, a4);
}

uint64_t glGetVertexAttribIivEXT_ExecThread(uint64_t a1, unsigned int a2, int a3, _DWORD *a4)
{
  (*(void (**)(void))(a1 + 27752))();

  return glGetVertexAttribIivEXT_Exec(a1, a2, a3, a4);
}

uint64_t glGetVertexAttribIuivEXT_ExecThread(uint64_t a1, unsigned int a2, int a3, _DWORD *a4)
{
  (*(void (**)(void))(a1 + 27752))();

  return glGetVertexAttribIuivEXT_Exec(a1, a2, a3, a4);
}

_DWORD *glViewport_Comp(uint64_t a1, int a2, int a3, int a4, int a5)
{
  float result = gleAddCommand(a1, (uint64_t)glViewport_ListExec, 16);
  *float result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  return result;
}

uint64_t glViewport_ListExec(uint64_t a1, int32x4_t *a2)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  float32x4_t v3 = vcvtq_f32_s32(*a2);
  glViewportArrayv_Core(a1, 0, 1, (uint64_t)&v3);
  return 16;
}

uint64_t glViewportArrayv_Core(uint64_t result, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v4 = a4;
  unsigned int v6 = a2;
  uint64_t v7 = result;
  if (a3 < 1)
  {
LABEL_6:
    if (a3 + a2 >= 2 && !*(unsigned char *)(result + 15580)) {
      float result = gleSwitchToMultiViewportMode(result);
    }
    if (a3 >= 1)
    {
      uint64_t v11 = v7 + 9216;
      uint64_t v12 = a3;
      do
      {
        float v13 = *(float *)(v4 + 4);
        float v14 = *(float *)(v4 + 8);
        float v15 = *(float *)(v4 + 12);
        uint64_t v16 = v11 + 144 * v6;
        float v18 = *(float *)(v16 + 96);
        uint64_t v17 = (_DWORD *)(v16 + 96);
        if (v18 != *(float *)v4
          || *(float *)(v11 + 144 * v6 + 100) != v13
          || *(float *)(v11 + 144 * v6 + 104) != v14
          || *(float *)(v11 + 144 * v6 + 108) != v15)
        {
          *uint64_t v17 = *(_DWORD *)v4;
          int v19 = (float *)(v11 + 144 * v6);
          v19[25] = v13;
          v19[26] = v14;
          v19[27] = v15;
          float result = gleUpdateViewScissorDataIndexed(v7, v6);
        }
        ++v6;
        v4 += 16;
        --v12;
      }
      while (v12);
    }
  }
  else
  {
    __int16 v8 = (_WORD *)(result + 29832);
    __int16 v9 = (float *)(a4 + 12);
    int v10 = a3;
    while (*(v9 - 1) >= 0.0 && *v9 >= 0.0)
    {
      v9 += 4;
      if (!--v10) {
        goto LABEL_6;
      }
    }
    if (!*v8) {
      *__int16 v8 = 1281;
    }
  }
  return result;
}

uint64_t gleUpdateVertexStateProgram(uint64_t a1)
{
  uint64_t v2 = (unsigned __int8 *)(a1 + 29592);
  uint64_t v3 = a1 + 17572;
  uint64_t v4 = *(void *)(a1 + 29032);
  unsigned __int16 v5 = *(_WORD *)(v4 + 26);
  __int16 v6 = *(_WORD *)(*(void *)(a1 + 19296) + 346);
  int v7 = *(unsigned __int16 *)(a1 + 29830);
  if (v6) {
    unint64_t v8 = v5 & 0xFFFC | (unint64_t)(v6 & 2) | 1;
  }
  else {
    unint64_t v8 = *(unsigned __int16 *)(v4 + 26);
  }
  BOOL v9 = (v6 & 1) != 0 && v7 != 7170;
  long long v88 = 0u;
  long long v89 = 0u;
  long long v86 = 0u;
  long long v87 = 0u;
  long long v84 = 0u;
  long long v85 = 0u;
  long long v82 = 0u;
  long long v83 = 0u;
  long long v80 = 0u;
  long long v81 = 0u;
  long long v78 = 0u;
  long long v79 = 0u;
  int v10 = *(unsigned char *)(v4 + 25) & 0x7F;
  unint64_t v11 = (v8 << 55) & 0x300000000000000;
  unint64_t v12 = ((unint64_t)(v10 == 2) << 12) | ((unint64_t)(v2[2915] >> 7) << 11);
  uint64_t v76 = 0;
  unint64_t v77 = 0;
  uint64_t v74 = v11;
  unint64_t v75 = 0;
  *(void *)&long long v78 = v12;
  if (*(unsigned char *)(v3 + 127))
  {
    unint64_t v13 = 0;
    v11 |= ((unint64_t)*(unsigned __int8 *)(v3 + 124) << 40) | 0x3C0;
    v12 |= 0x400uLL;
LABEL_11:
    uint64_t v74 = v11;
    unint64_t v75 = 0;
    uint64_t v76 = 0;
    unint64_t v77 = 0;
    uint64_t v14 = 0;
    unint64_t v15 = 0;
    *(void *)&long long v78 = v12;
    goto LABEL_12;
  }
  if (*(unsigned char *)(v3 + 125))
  {
    unint64_t v13 = 0;
    v11 |= (2 * (*(unsigned char *)(v3 + 126) & 1u)) | ((unint64_t)*(unsigned __int8 *)(v3 + 124) << 40) | 0x3C0;
    goto LABEL_11;
  }
  if (v9)
  {
    uint64_t v76 = 0;
    unint64_t v77 = 0;
    uint64_t v74 = v11 | 0x100;
    unint64_t v75 = 0;
    *(void *)&long long v78 = v12;
    if (*((_DWORD *)v2 + 32) == -1074791426)
    {
      unint64_t v13 = 0;
      v11 |= 0x104uLL;
      goto LABEL_11;
    }
    unint64_t v13 = 0;
    uint64_t v14 = 0;
    unint64_t v15 = 0;
    v11 |= 0x100uLL;
  }
  else
  {
    unint64_t v13 = 0;
    uint64_t v14 = 0;
    unint64_t v15 = 0;
  }
LABEL_12:
  if ((v8 & 0x80) != 0)
  {
    unint64_t v13 = (*(_DWORD *)v3 & 0x3FLL) << 24;
    uint64_t v76 = 0;
    unint64_t v77 = 0;
    uint64_t v74 = v11;
    unint64_t v75 = v13;
    *(void *)&long long v78 = v12;
  }
  if (v11 & 0x4000000000000000 | v13 & 0x3F000000)
  {
    v11 |= 0x42C0uLL;
    uint64_t v74 = v11;
    unint64_t v75 = v13;
    uint64_t v76 = 0;
    unint64_t v77 = 0;
    *(void *)&long long v78 = v12;
  }
  if (v7 != 7170)
  {
    if (v7 != 7168)
    {
      int v20 = 0;
      goto LABEL_56;
    }
    int v16 = *(unsigned __int8 *)(a1 + 15379);
    if (*(unsigned char *)(a1 + 15378))
    {
      BOOL v17 = v16 == 0;
      uint64_t v18 = 96;
      if (v17) {
        uint64_t v18 = 64;
      }
      v12 |= v18;
      uint64_t v19 = v11 | 0x42C0;
      if ((v8 & 0x20) != 0) {
        unint64_t v11 = v19 & 0xEFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v11 = v19 | 0x1000000000000000;
      }
    }
    else
    {
      if (!*(unsigned char *)(a1 + 15379) && (v8 & 0x400) == 0) {
        goto LABEL_33;
      }
      v11 |= 0x4000uLL;
      uint64_t v74 = v11;
      unint64_t v75 = v13;
      uint64_t v76 = 0;
      unint64_t v77 = 0;
      *(void *)&long long v78 = v12 | 0x80;
      if (!v16)
      {
        v12 |= 0x80uLL;
        goto LABEL_33;
      }
      v12 |= 0xA0uLL;
    }
    uint64_t v74 = v11;
    unint64_t v75 = v13;
    uint64_t v76 = 0;
    unint64_t v77 = 0;
    *(void *)&long long v78 = v12;
LABEL_33:
    if (*(unsigned char *)(v3 + 1662))
    {
      uint64_t v21 = v11 | 0x4000;
      unsigned int v22 = *v2;
      int v23 = (v22 >> 5) & 3;
      if (v23)
      {
        if (v23 == 2)
        {
          if ((v8 & 0x20) != 0)
          {
            v11 &= ~0x1000000000000000uLL;
            uint64_t v24 = 17088;
          }
          else
          {
            uint64_t v24 = 0x10000000000042C0;
          }
          uint64_t v21 = v11 | v24;
          v13 |= 0xC0000000uLL;
        }
        else if (v23 == 1)
        {
          unint64_t v13 = v13 & 0xFFFFFFFF3FFFFFFFLL | 0x40000000;
        }
      }
      else
      {
        uint64_t v21 = v11 | 0x4280;
        unint64_t v13 = v13 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
      }
      if ((~v22 & 0x90) != 0)
      {
        v12 |= 1uLL;
      }
      else
      {
        uint64_t v25 = 18;
        if ((v22 & 4) == 0) {
          uint64_t v25 = 2;
        }
        unint64_t v26 = v12 | v25;
        if ((v22 & 3) == 2)
        {
          unint64_t v12 = v26 & 0xFFFFFFFFFFFFFFF3 | 8;
        }
        else if ((v22 & 3) == 3)
        {
          unint64_t v12 = v26 | 0xC;
        }
        else
        {
          unint64_t v12 = v26 & 0xFFFFFFFFFFFFFFF3 | 4;
        }
      }
      unint64_t v11 = v21;
      uint64_t v74 = v21;
      unint64_t v75 = v13;
      uint64_t v76 = 0;
      unint64_t v77 = 0;
      *(void *)&long long v78 = v12;
    }
    int v20 = *(unsigned __int8 *)(v3 + 1661);
LABEL_56:
    if (!*(unsigned char *)(a1 + 14890))
    {
      if (*(unsigned char *)(v3 + 1660))
      {
        v11 |= 0x1000uLL;
        uint64_t v74 = v11;
        unint64_t v75 = v13;
        uint64_t v76 = 0;
        unint64_t v77 = 0;
        *(void *)&long long v78 = v12;
      }
      if (!v20)
      {
LABEL_109:
        if (v7 == 7169)
        {
          int v49 = 16843009;
        }
        else
        {
          int v49 = *(_DWORD *)(v3 + 6216);
          if (!v49)
          {
LABEL_127:
            if ((v11 & 0x400) != 0)
            {
              unint64_t v11 = v11 & 0xFFFFFFFFFFFFFFDFLL | (32 * (*(unsigned char *)(a1 + 12516) & 1u));
              uint64_t v76 = v14;
              unint64_t v77 = v15;
              *(void *)&long long v78 = v12;
              uint64_t v74 = v11;
              unint64_t v75 = v13;
              if (!*(unsigned char *)(v3 + 125) && *((_DWORD *)v2 + 34) == -1074791426)
              {
                v11 |= 0x10uLL;
                uint64_t v74 = v11;
                unint64_t v75 = v13;
                uint64_t v76 = v14;
                unint64_t v77 = v15;
                *(void *)&long long v78 = v12;
              }
            }
            goto LABEL_131;
          }
        }
        uint64_t v50 = *(_DWORD *)(v3 + 6220) & v49;
        uint64_t v51 = *(_DWORD *)(v3 + 6224) & v49;
        uint64_t v14 = v50 | (v51 << 32);
        uint64_t v52 = *(_DWORD *)(v3 + 6232) & v49;
        unint64_t v15 = *(_DWORD *)(v3 + 6228) & v49 | (unint64_t)(v52 << 32);
        if (v52 | v51)
        {
          uint64_t v53 = 704;
        }
        else
        {
          if (!v50)
          {
LABEL_117:
            if (v15) {
              uint64_t v54 = v11 | 0x400;
            }
            else {
              uint64_t v54 = v11;
            }
            unsigned int v55 = (0xFFu >> (8 - *(_WORD *)(v4 + 152))) & v49;
            unint64_t v56 = v54 & 0xFFFFFFFF0000FFFFLL | (v55 << 16);
            uint64_t v57 = 0;
            if (v55)
            {
              uint64_t v58 = 0;
              do
              {
                if ((v55 & 1) != 0 && *(_DWORD *)(a1 + 29736 + 4 * v58) == -1074791426) {
                  v57 |= 1 << v58;
                }
                ++v58;
                BOOL v48 = v55 > 1;
                v55 >>= 1;
              }
              while (v48);
            }
            unint64_t v11 = v56 | (v57 << 24);
            uint64_t v76 = v14;
            unint64_t v77 = v15;
            *(void *)&long long v78 = v12;
            uint64_t v74 = v11;
            unint64_t v75 = v13;
            goto LABEL_127;
          }
          uint64_t v53 = 512;
        }
        v11 |= v53;
        goto LABEL_117;
      }
      goto LABEL_68;
    }
    if (!*(unsigned char *)(v3 + 1660))
    {
      if (!v20) {
        goto LABEL_109;
      }
      if (*(unsigned __int16 *)(a1 + 14888) != 33274)
      {
LABEL_68:
        v11 |= 0x2000uLL;
LABEL_108:
        uint64_t v74 = v11;
        unint64_t v75 = v13;
        uint64_t v76 = 0;
        unint64_t v77 = 0;
        *(void *)&long long v78 = v12;
        goto LABEL_109;
      }
    }
    uint64_t v27 = 3776;
    if (!*(_DWORD *)(a1 + 1448)) {
      uint64_t v27 = 3072;
    }
    unint64_t v28 = v11 | v27;
    if (*(unsigned __int16 *)(a1 + 14888) == 33274)
    {
      unint64_t v29 = 0x8000000000000000;
    }
    else
    {
      if (!v20) {
        goto LABEL_72;
      }
      unint64_t v29 = 0x2000;
    }
    v28 |= v29;
LABEL_72:
    unint64_t v30 = v28 & 0xFBFCFF00FFFFFFFFLL | ((unint64_t)(*(unsigned char *)(a1 + 14892) & 1) << 48) | ((unint64_t)(*(unsigned char *)(a1 + 14893) & 1) << 49) | ((unint64_t)(*(unsigned char *)(a1 + 14894) & 1) << 58);
    unint64_t v31 = *(unsigned int *)(a1 + 14880);
    uint64_t v32 = *(_DWORD *)(a1 + 14880);
    uint64_t v76 = 0;
    unint64_t v77 = 0;
    *(void *)&long long v78 = v12;
    unint64_t v11 = v30 | (v32 << 32);
    uint64_t v74 = v11;
    unint64_t v75 = v13;
    if ((v8 & 0x10) != 0)
    {
      uint64_t v33 = 0x800000000000000;
    }
    else
    {
      if ((v8 & 0x40) == 0) {
        goto LABEL_77;
      }
      uint64_t v33 = 0x2000000000000000;
    }
    v11 |= v33;
    uint64_t v74 = v11;
    unint64_t v75 = v13;
    uint64_t v76 = 0;
    unint64_t v77 = 0;
    *(void *)&long long v78 = v12;
LABEL_77:
    if (!*(unsigned char *)(a1 + 14891))
    {
LABEL_93:
      if (!v31) {
        goto LABEL_109;
      }
      char v40 = 0;
      unsigned __int8 v41 = 0;
      unsigned __int8 v42 = 0;
      unsigned __int8 v43 = 0;
      uint64_t v44 = (unsigned char *)(a1 + 812);
      do
      {
        if (v31)
        {
          if (*(v44 - 3)) {
            LOBYTE(v45) = 0;
          }
          else {
            int v45 = 1 << v40;
          }
          v43 |= v45;
          if (*(v44 - 2)) {
            int v46 = 1 << v40;
          }
          else {
            LOBYTE(v46) = 0;
          }
          v42 |= v46;
          if (*v44) {
            LOBYTE(v47) = 0;
          }
          else {
            int v47 = 1 << v40;
          }
          v41 |= v47;
        }
        v44 += 80;
        ++v40;
        BOOL v48 = v31 > 1;
        v31 >>= 1;
      }
      while (v48);
      unint64_t v13 = v13 & 0xFFFFFFFFFF000000 | v43 | (unsigned __int16)(v42 << 8) | ((unint64_t)v41 << 16);
      goto LABEL_108;
    }
    unsigned int v34 = *(unsigned __int16 *)(a1 + 14886);
    if (v34 > 0x1201)
    {
      if (v34 == 4610)
      {
        uint64_t v35 = 0x80000000000000;
        goto LABEL_88;
      }
      if (v34 == 5632)
      {
        uint64_t v35 = 0x10000000000000;
        goto LABEL_88;
      }
    }
    else
    {
      if (v34 == 4608)
      {
        uint64_t v35 = 0x20000000000000;
        goto LABEL_88;
      }
      if (v34 == 4609)
      {
        uint64_t v35 = 0x40000000000000;
LABEL_88:
        unint64_t v36 = v35 | v11 & 0xFF0FFFFFFFFFFFFFLL;
        int v37 = *(unsigned __int16 *)(a1 + 14884);
        unint64_t v38 = v36 & 0xFFF3FFFFFFFFFFFFLL;
        unint64_t v11 = v36 | 0xC000000000000;
        if (v37 == 1028) {
          unint64_t v11 = v38 | 0x4000000000000;
        }
        uint64_t v39 = v38 | 0x8000000000000;
        if (v37 == 1029) {
          unint64_t v11 = v39;
        }
        uint64_t v74 = v11;
        unint64_t v75 = v13;
        uint64_t v76 = 0;
        unint64_t v77 = 0;
        *(void *)&long long v78 = v12;
        goto LABEL_93;
      }
    }
    uint64_t v35 = 0x60000000000000;
    goto LABEL_88;
  }
LABEL_131:
  if (((v5 & 0x1000) != 0 || !v10) && *(_DWORD *)(a1 + 15592) == 7424)
  {
    v12 |= 0x100uLL;
    uint64_t v74 = v11;
    unint64_t v75 = v13;
    uint64_t v76 = v14;
    unint64_t v77 = v15;
    *(void *)&long long v78 = v12;
  }
  if (*(_WORD *)(a1 + 15284) == 4353)
  {
    v12 |= 0x200uLL;
    uint64_t v74 = v11;
    unint64_t v75 = v13;
    uint64_t v76 = v14;
    unint64_t v77 = v15;
    *(void *)&long long v78 = v12;
  }
  if ((v11 & 0x80) != 0 && !*(unsigned char *)(v3 + 125) && *((_DWORD *)v2 + 33) == -1074791426)
  {
    uint64_t v74 = v11 | 8;
    unint64_t v75 = v13;
    uint64_t v76 = v14;
    unint64_t v77 = v15;
    *(void *)&long long v78 = v12;
  }
  StatePrograint m = *(int16x4_t **)(a1 + 24480);
  if (!*(void *)&StateProgram[54] && !*(void *)&StateProgram[55])
  {
    uint64_t Object = cvmHashMachineFindObject();
    if (Object)
    {
      uint64_t v64 = Object;
      gleDestroyStateProgram(a1, StateProgram);
      goto LABEL_152;
    }
    StateProgram[54] = 0;
    StateProgram[55] = 0;
    if (v10)
    {
      StateProgram[55] = (int16x4_t)glpCallVertexStateToLLVMIR();
    }
    else
    {
      if (v2[196])
      {
        StateProgram[55] = (int16x4_t)glpCallVertexStateToLLVMIR();
        free(*(void **)&StateProgram[13]);
        StateProgram[13] = 0;
        free(*(void **)&StateProgram[60]);
        StateProgram[60] = 0;
      }
      StateProgram[54] = (int16x4_t)glpVertexStateToPPStream();
    }
    int v68 = (_DWORD *)StateProgram[13];
    if (v68) {
      LODWORD(v68) = *v68;
    }
    StateProgram[64].i32[0] = (int)v68;
    gleModifyPluginPipelineProgram(a1, (uint64_t)StateProgram, 1);
    StateProgram[52].i8[1] = 1;
LABEL_166:
    glePPUpdateProgram(a1, StateProgram);
    uint64_t v64 = cvmHashObjectCreate();
    uint64_t result = cvmHashMachineAddObject();
    goto LABEL_167;
  }
  uint64_t result = cvmHashObjectGetKey();
  uint64_t v61 = 0;
  int8x16_t v62 = 0uLL;
  do
  {
    int8x16_t v62 = vorrq_s8(veorq_s8(*(int8x16_t *)((char *)&v74 + v61), *(int8x16_t *)(result + v61)), v62);
    v61 += 16;
  }
  while (v61 != 224);
  if (!*(void *)&vorr_s8(*(int8x8_t *)v62.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v62, v62, 8uLL))) {
    return result;
  }
  cvmHashObjectRelease();
  uint64_t v63 = cvmHashMachineFindObject();
  if (!v63)
  {
    if (v10)
    {
      uint64_t v65 = glpCallVertexStateToLLVMIR();
      uint64_t v66 = 0;
    }
    else
    {
      if (v2[196])
      {
        uint64_t v65 = glpCallVertexStateToLLVMIR();
        free(0);
        free(0);
      }
      else
      {
        uint64_t v65 = 0;
      }
      uint64_t v66 = glpVertexStateToPPStream();
    }
    StatePrograint m = (int16x4_t *)gleCreateStateProgram(a1, 0, v66, v65, 0, 0, 0, -1);
    StateProgram[13] = 0;
    StateProgram[60] = 0;
    StateProgram[64].i32[0] = 0;
    StateProgram[52].i8[1] = 1;
    *(void *)(a1 + 24480) = StateProgram;
    goto LABEL_166;
  }
  uint64_t v64 = v63;
LABEL_152:
  uint64_t result = cvmHashObjectGetObject();
  StatePrograint m = (int16x4_t *)result;
  *(void *)(a1 + 24480) = result;
LABEL_167:
  *(void *)(a1 + 24560) = v64;
  *(void *)(a1 + 24200) = gleSetVPTransformFuncAll;
  *(void *)(a1 + 24208) = gleSetVPTransformFuncAll;
  *(void *)(a1 + 19248) = StateProgram + 71;
  uint64_t v69 = v2[2904];
  if (v2[2904])
  {
    uint64_t v70 = v2 + 3840;
    uint64_t v71 = StateProgram;
    do
    {
      uint64_t v72 = (uint64_t)*v71++;
      *uint64_t v70 = v72;
      v70 += 209;
      --v69;
    }
    while (v69);
  }
  for (uint64_t i = 0; i != 32; ++i)
    *(_DWORD *)(a1 + 1552 + i * 4) = StateProgram[34].i32[i] | StateProgram[18].i32[i];
  *(_DWORD *)(v3 + 11080) = 0;
  *(_DWORD *)(a1 + 1532) |= 0x840000u;
  return result;
}

void gleUpdateVertexFallbackProgram(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = (unsigned __int8 *)(a1 + 29592);
  if (a2)
  {
    memset(&v52[1], 0, 184);
    char v4 = *(unsigned char *)(*(void *)(a1 + 29032) + 25);
    uint64_t v5 = (unint64_t)((v4 & 0x7F) == 2) << 12;
    if ((*(unsigned char *)(a1 + 24864) & 0x10) != 0)
    {
      uint64_t v14 = *(void *)(a1 + 24768);
      if (!v14) {
        uint64_t v14 = *(void *)(*(void *)(a1 + 24776) + 72);
      }
      int v7 = (uint64_t *)(v14 + 3552);
      unint64_t v8 = (_DWORD *)(v14 + 3596);
    }
    else
    {
      if (!*(unsigned char *)(a1 + 24760)) {
        goto LABEL_17;
      }
      uint64_t v6 = *(void *)(a1 + 24432);
      int v7 = (uint64_t *)(v6 + 472);
      unint64_t v8 = (_DWORD *)(v6 + 516);
    }
    uint64_t v15 = *v7;
    if (*v7) {
      BOOL v16 = (*v8 & 0x1000) == 0;
    }
    else {
      BOOL v16 = 1;
    }
    if (!v16)
    {
      uint64_t v18 = *(unsigned int *)(v15 + 64);
      if (v18)
      {
        unsigned __int8 v19 = 0;
        int v20 = (unint64_t *)(v15 + 8 * *(unsigned int *)(v15 + 68));
        uint64_t v21 = 8 * v18;
        do
        {
          unint64_t v22 = *v20++;
          int v23 = 1 << ((v22 >> 33) & 7);
          if ((v22 & 0x1F00) != 0x400) {
            LOBYTE(v23) = 0;
          }
          v19 |= v23;
          v21 -= 8;
        }
        while (v21);
        unint64_t v17 = ((unint64_t)v19 << 16) & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)v19 << 24);
      }
      else
      {
        unint64_t v17 = 0;
      }
      goto LABEL_56;
    }
LABEL_17:
    unint64_t v17 = 16842752;
LABEL_56:
    uint64_t v12 = 0;
    unint64_t v30 = v17 | 0x8104;
    goto LABEL_57;
  }
  BOOL v9 = (unsigned char *)(a1 + 17700);
  memset(v52, 0, sizeof(v52));
  long long v50 = 0u;
  long long v51 = 0u;
  uint64_t v10 = *(void *)(a1 + 29032);
  char v4 = *(unsigned char *)(v10 + 25);
  uint64_t v11 = (unint64_t)((v4 & 0x7F) == 2) << 12;
  if (*(unsigned char *)(a1 + 19232))
  {
    uint64_t v12 = 0;
    unint64_t v13 = 37124;
    if (*(unsigned char *)(a1 + 17701)) {
      unint64_t v13 = 0x1000000009104;
    }
  }
  else
  {
    uint64_t v12 = 0;
    unint64_t v13 = 33028;
  }
  if (*(unsigned char *)(a1 + 19233))
  {
    uint64_t v24 = 0x2000;
    if (*(unsigned char *)(a1 + 17701)) {
      uint64_t v24 = 0x1000000002000;
    }
    v13 |= v24;
  }
  if (*(unsigned char *)(a1 + 19234))
  {
    unint64_t v25 = (unint64_t)((v4 & 0x7F) == 2) << 12;
    unint64_t v13 = v13 & 0xFFFFFFFFFFFFBFFFLL | 0x4000;
    int v26 = *v3;
    if ((~v26 & 0x90) != 0)
    {
      uint64_t v11 = v25 | 1;
      uint64_t v12 = 0x40000000;
    }
    else
    {
      uint64_t v27 = 19;
      if ((v26 & 4) == 0) {
        uint64_t v27 = 3;
      }
      *(void *)&long long v50 = v13;
      *((void *)&v50 + 1) = 0x40000000;
      long long v51 = 0uLL;
      v52[0] = v25 | v27;
      unint64_t v28 = ((unint64_t)((v4 & 0x7F) == 2) << 12) | v27 & 0xFFFFFFFFFFFFFFF3;
      uint64_t v11 = v28 | 4;
      if ((v26 & 3) == 3) {
        uint64_t v11 = v52[0] | 0xCLL;
      }
      uint64_t v12 = 0x40000000;
      if ((v26 & 3) == 2) {
        uint64_t v11 = v28 | 8;
      }
    }
  }
  if (*v9) {
    uint64_t v29 = v13 | 0x4000;
  }
  else {
    uint64_t v29 = v13;
  }
  if (*v9) {
    uint64_t v5 = v11 | 0xA0;
  }
  else {
    uint64_t v5 = v11;
  }
  if (((*(_WORD *)(v10 + 26) & 0x1000) != 0 || (v4 & 0x7F) == 0) && *(_DWORD *)(a1 + 15592) == 7424) {
    v5 |= 0x100uLL;
  }
  if ((*(unsigned char *)(a1 + 24864) & 0x10) != 0)
  {
    uint64_t v31 = *(void *)(a1 + 24768);
    if (!v31) {
      uint64_t v31 = *(void *)(*(void *)(a1 + 24776) + 72);
    }
    int v32 = *(_DWORD *)(v31 + 3540) | *(_DWORD *)(v31 + 3536);
    int v33 = *(_DWORD *)(v31 + 3032);
    uint64_t v34 = v33 & v32;
    unint64_t v30 = v29 & 0xBFFFFFFF0000FFFFLL | ((unint64_t)((unsigned __int16)(v32 & ~(_WORD)v33) >> 8) << 16) | ((unint64_t)((unsigned __int16)(v32 & ~(_WORD)v33) >> 8) << 24);
    uint64_t v12 = v12 & 0xC0FFFFFF | (unint64_t)(v34 << 32) | (((*(void *)(v31 + 3528) >> 6) & 3) << 24);
  }
  else
  {
    unint64_t v30 = v29 & 0xFFFFFFFF0000FFFFLL | ((unint64_t)*(unsigned __int8 *)(a1 + 23788) << 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 23788) << 24);
  }
LABEL_57:
  *(void *)&long long v50 = v30;
  *((void *)&v50 + 1) = v12;
  long long v51 = 0uLL;
  v52[0] = v5;
  uint64_t v35 = a2;
  uint64_t v36 = a1 + 8 * a2;
  if (*(void *)(v36 + 24600))
  {
    uint64_t Key = cvmHashObjectGetKey();
    uint64_t v38 = 0;
    int8x16_t v39 = 0uLL;
    do
    {
      int8x16_t v39 = vorrq_s8(veorq_s8(*(int8x16_t *)((char *)&v50 + v38), *(int8x16_t *)(Key + v38)), v39);
      v38 += 16;
    }
    while (v38 != 224);
    if (!*(void *)&vorr_s8(*(int8x8_t *)v39.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v39, v39, 8uLL))) {
      return;
    }
    cvmHashObjectRelease();
  }
  char v40 = (int16x4_t **)(v36 + 24600);
  uint64_t Object = cvmHashMachineFindObject();
  if (Object)
  {
    uint64_t v42 = Object;
    StatePrograint m = (int16x4_t *)cvmHashObjectGetObject();
  }
  else
  {
    if ((v4 & 0x7F) != 0)
    {
      uint64_t v44 = glpCallVertexStateToLLVMIR();
      uint64_t v45 = 0;
    }
    else
    {
      if (v3[196])
      {
        uint64_t v44 = glpCallVertexStateToLLVMIR();
        free(0);
        free(0);
      }
      else
      {
        uint64_t v44 = 0;
      }
      uint64_t v45 = glpVertexStateToPPStream();
    }
    StatePrograint m = (int16x4_t *)gleCreateStateProgram(a1, 0, v45, v44, 0, 0, 0, -1);
    StateProgram[13] = 0;
    StateProgram[60] = 0;
    StateProgram[64].i32[0] = 0;
    uint64_t v42 = cvmHashObjectCreate();
    cvmHashMachineAddObject();
    glePPUpdateProgram(a1, StateProgram);
  }
  *char v40 = StateProgram;
  uint64_t v46 = a1 + 8 * v35;
  *(void *)(v46 + 24632) = v42;
  uint64_t v47 = v3[2904];
  if (v3[2904])
  {
    BOOL v48 = (int16x4_t *)(v46 + 33472);
    do
    {
      int16x4_t v49 = *StateProgram++;
      *BOOL v48 = v49;
      v48 += 209;
      --v47;
    }
    while (v47);
  }
}

uint64_t gleUpdateFragmentStateProgram(uint64_t a1, char a2)
{
  v102[9] = *MEMORY[0x263EF8340];
  uint64_t v3 = (unsigned __int8 *)(a1 + 29592);
  char v4 = (_DWORD *)(a1 + 23784);
  memset(v102, 0, 64);
  int v5 = *(unsigned __int8 *)(a1 + 32502);
  if (*(unsigned char *)(a1 + 32502))
  {
    uint64_t v6 = 2;
    if ((v5 & 1) == 0) {
      uint64_t v6 = 15;
    }
    memset(v98, 0, sizeof(v98));
    uint64_t v101 = 0;
    long long v99 = 0uLL;
    long long v100 = 0uLL;
    uint64_t v7 = -224;
    if ((v5 & 2) == 0) {
      uint64_t v7 = -16;
    }
    unint64_t v8 = v7 | v6;
    *(int64x2_t *)((char *)v98 + 8) = vdupq_n_s64(0x300000000000000uLL);
    unint64_t v9 = ((unint64_t)(v5 & 3) << 8) | 0x40000;
    uint64_t v10 = *(void *)(a1 + 29032);
    goto LABEL_262;
  }
  uint64_t v11 = 0;
  uint64_t v12 = (unsigned char *)(a1 + 15178);
  uint64_t v13 = a1 + 20776;
  do
  {
    uint64_t v14 = 0;
    while (((*(_DWORD *)(a1 + 76 * v11 + 15684) >> v14) & 1) == 0)
    {
      if (++v14 == 5)
      {
        uint64_t v15 = 0;
        LODWORD(v14) = 15;
        goto LABEL_14;
      }
    }
    uint64_t v16 = *(void *)(v13 + 8 * v14);
    int v17 = *(unsigned __int8 *)(v16 + 597);
    int v18 = *(unsigned __int8 *)(v16 + 596);
    uint64_t v15 = v16 + 808;
    if ((v17 & ~v18) != 0)
    {
      uint64_t v15 = 0;
      LODWORD(v14) = 15;
    }
LABEL_14:
    v102[v11] = v15;
    v5 |= v14 << (4 * v11++);
    v13 += 88;
  }
  while (v11 != 8);
  unint64_t v19 = 0;
  uint64_t v101 = 0;
  long long v99 = 0u;
  long long v100 = 0u;
  memset(v98, 0, sizeof(v98));
  if (*(_WORD *)(a1 + 15284) == 4353)
  {
    unint64_t v19 = 1;
    *(void *)&v98[0] = 1;
  }
  uint64_t v10 = *(void *)(a1 + 29032);
  __int16 v20 = *(_WORD *)(v10 + 26);
  if (((v20 & 0x1000) != 0 || (*(unsigned char *)(v10 + 25) & 0x7F) != 0) && *(_DWORD *)(a1 + 15592) == 7424) {
    v19 |= 0x2000000uLL;
  }
  if (*v12) {
    v19 |= 0x10uLL;
  }
  int v21 = *v3;
  int v22 = v21 & 3;
  if ((v21 & 3) != 0)
  {
    if ((v21 & 0x10) != 0)
    {
      v19 |= 0xC0uLL;
    }
    else
    {
      uint64_t v23 = v19 | 0x40;
      unint64_t v24 = v19 & 0xFFFFFFFFFFFFFFB9 | 0x44;
      uint64_t v25 = v19 | 0x46;
      unint64_t v26 = v23 & 0xFFFFFFFFFFFFFFF9 | 2;
      if (v22 != 3) {
        uint64_t v25 = v26;
      }
      if (v22 == 2) {
        uint64_t v25 = v24;
      }
      unint64_t v19 = v25 | (8 * v21) & 0x20;
    }
  }
  if (*(unsigned char *)(a1 + 17701)) {
    v19 |= 0x1000000uLL;
  }
  if (*(unsigned char *)(a1 + 15283)) {
    v19 |= 8uLL;
  }
  unsigned int v27 = (0xFFu >> (8 - *(_WORD *)(v10 + 152))) & *v4;
  if (v27)
  {
    uint64_t v28 = 0;
    uint64_t v29 = (float *)(a1 + 15724);
    while (1)
    {
      if (v27)
      {
        unint64_t v30 = (_WORD *)v102[v28];
        if (v30) {
          break;
        }
      }
LABEL_86:
      ++v28;
      v29 += 19;
      BOOL v48 = v27 > 1;
      v27 >>= 1;
      if (!v48)
      {
        __int16 v20 = *(_WORD *)(v10 + 26);
        goto LABEL_257;
      }
    }
    v19 |= (256 << v28) & 0xFF00;
    *(void *)&v98[0] = v19;
    unsigned int v31 = *((unsigned __int16 *)v29 - 18);
    if (v31 <= 0x20FF)
    {
      if (v31 == 260)
      {
        int v32 = (char *)v98 + 8 * v28;
        unint64_t v33 = *((void *)v32 + 1) & 0xFFFFFFFF8FFFFFFFLL | 0x40000000;
        goto LABEL_57;
      }
      if (v31 == 3042)
      {
        int v32 = (char *)v98 + 8 * v28;
        unint64_t v33 = *((void *)v32 + 1) & 0xFFFFFFFF8FFFFFFFLL | 0x20000000;
        goto LABEL_57;
      }
      goto LABEL_47;
    }
    if (v31 != 34160)
    {
      if (v31 == 8449)
      {
        int v32 = (char *)v98 + 8 * v28;
        unint64_t v33 = *((void *)v32 + 1) & 0xFFFFFFFF8FFFFFFFLL | 0x10000000;
        goto LABEL_57;
      }
      if (v31 == 8448)
      {
        int v32 = (char *)v98 + 8 * v28;
        unint64_t v33 = *((void *)v32 + 1) & 0xFFFFFFFF8FFFFFFFLL;
LABEL_57:
        *((void *)v32 + 1) = v33;
LABEL_58:
        int v39 = (unsigned __int16)v30[2];
        if (v39 == 34041 || v39 == 6402)
        {
          unsigned __int8 v41 = (char *)v98 + 8 * v28;
          *((void *)v41 + 1) = v33 | 0x8000000000000000;
          if (v30[75])
          {
            v33 |= 0xC000000000000000;
            *((void *)v41 + 1) = v33;
          }
          else
          {
            v33 |= 0x8000000000000000;
          }
        }
        switch(*v30 & 0xF)
        {
          case 0:
            uint64_t v42 = (char *)v98 + 8 * v28;
            int64_t v43 = v33 & 0xF8FFFFFFFFFFFFFFLL | 0x100000000000000;
            break;
          case 1:
            uint64_t v42 = (char *)v98 + 8 * v28;
            int64_t v43 = v33 & 0xF8FFFFFFFFFFFFFFLL | 0x200000000000000;
            break;
          case 2:
            uint64_t v42 = (char *)v98 + 8 * v28;
            int64_t v43 = v33 & 0xF8FFFFFFFFFFFFFFLL | 0x300000000000000;
            break;
          case 3:
            uint64_t v42 = (char *)v98 + 8 * v28;
            int64_t v43 = v33 & 0xF8FFFFFFFFFFFFFFLL | 0x400000000000000;
            break;
          default:
            uint64_t v42 = (char *)v98 + 8 * v28;
            int64_t v43 = v33 & 0xF8FFFFFFFFFFFFFFLL | 0x500000000000000;
            break;
        }
        *((void *)v42 + 1) = v43;
        if (v43 >= 0) {
          uint64_t v44 = 2;
        }
        else {
          uint64_t v44 = 57;
        }
        int v45 = (unsigned __int16)v30[v44];
        switch(v30[v44])
        {
          case 0x1903:
          case 0x1907:
            goto LABEL_79;
          case 0x1904:
          case 0x1905:
          case 0x1908:
            goto LABEL_80;
          case 0x1906:
            unint64_t v46 = v43 & 0xC7FFFFFFFFFFFFFFLL;
            goto LABEL_84;
          case 0x1909:
            unint64_t v46 = v43 & 0xC7FFFFFFFFFFFFFFLL | 0x800000000000000;
            goto LABEL_84;
          case 0x190A:
            unint64_t v46 = v43 & 0xC7FFFFFFFFFFFFFFLL | 0x1000000000000000;
            goto LABEL_84;
          default:
            if (v45 == 32841)
            {
              unint64_t v46 = v43 & 0xC7FFFFFFFFFFFFFFLL | 0x1800000000000000;
            }
            else if (v45 == 33319)
            {
LABEL_79:
              unint64_t v46 = v43 & 0xC7FFFFFFFFFFFFFFLL | 0x2000000000000000;
            }
            else
            {
LABEL_80:
              unint64_t v46 = v43 & 0xC7FFFFFFFFFFFFFFLL | 0x2800000000000000;
            }
LABEL_84:
            uint64_t v47 = (char *)v98 + 8 * v28;
            *((void *)v47 + 1) = v46;
            if (((1 << v28) & v3[2882]) != 0) {
              *((void *)v47 + 1) = v46 | 0x80000000;
            }
            break;
        }
        goto LABEL_86;
      }
LABEL_47:
      int v32 = (char *)v98 + 8 * v28;
      unint64_t v33 = *((void *)v32 + 1) & 0xFFFFFFFF8FFFFFFFLL | 0x30000000;
      goto LABEL_57;
    }
    uint64_t v34 = (char *)v98 + 8 * v28;
    unint64_t v35 = *((void *)v34 + 1) & 0xFFFFFFFF8FFFFFFFLL | 0x50000000;
    *((void *)v34 + 1) = v35;
    unsigned int v36 = *((unsigned __int16 *)v29 - 16);
    if (v36 > 0x8574)
    {
      if (*((unsigned __int16 *)v29 - 16) <= 0x86AEu)
      {
        if (v36 == 34165)
        {
          int v37 = 0;
          uint64_t v38 = 4;
          goto LABEL_106;
        }
        if (v36 == 34478)
        {
          int v37 = 0;
          uint64_t v38 = 5;
          goto LABEL_106;
        }
      }
      else
      {
        switch(v36)
        {
          case 0x86AFu:
            int v37 = 0;
            uint64_t v38 = 6;
            goto LABEL_106;
          case 0x8744u:
            int v37 = 0;
            uint64_t v38 = 8;
            goto LABEL_106;
          case 0x8745u:
            int v37 = 0;
            uint64_t v38 = 9;
            goto LABEL_106;
        }
      }
    }
    else if (*((unsigned __int16 *)v29 - 16) <= 0x20FFu)
    {
      if (v36 == 260)
      {
        int v37 = 0;
        uint64_t v38 = 1;
        goto LABEL_106;
      }
      if (v36 == 7681)
      {
        int v37 = 1;
        uint64_t v38 = 7;
        goto LABEL_106;
      }
    }
    else
    {
      switch(v36)
      {
        case 0x2100u:
          int v37 = 0;
          uint64_t v38 = 0;
          goto LABEL_106;
        case 0x84E7u:
          int v37 = 0;
          uint64_t v38 = 2;
          goto LABEL_106;
        case 0x8574u:
          int v37 = 0;
          uint64_t v38 = 3;
          goto LABEL_106;
      }
    }
    int v37 = 0;
    uint64_t v38 = 10;
LABEL_106:
    unsigned int v49 = *((unsigned __int16 *)v29 - 14);
    if (v49 > 0x8575)
    {
      switch(v49)
      {
        case 0x8578u:
          char v50 = 3;
          goto LABEL_120;
        case 0x8577u:
          char v50 = 2;
          goto LABEL_120;
        case 0x8576u:
          char v50 = 1;
          goto LABEL_120;
      }
    }
    else
    {
      if (!*((_WORD *)v29 - 14))
      {
        char v50 = 5;
        goto LABEL_120;
      }
      if (v49 == 1)
      {
        char v50 = 4;
        goto LABEL_120;
      }
      if (v49 == 5890)
      {
        char v50 = 0;
        goto LABEL_120;
      }
    }
    char v50 = v49 + 70;
LABEL_120:
    unint64_t v51 = v50 & 0x1F | v35 & 0xFFFFFFFFDE1FFFE0 | (v38 << 21);
    if (v37)
    {
      unint64_t v52 = v51 & 0xFFFFFFFFDFFFFC1FLL | 0x20;
      char v53 = 1;
LABEL_122:
      char v54 = 1;
      goto LABEL_144;
    }
    unsigned int v55 = *((unsigned __int16 *)v29 - 13);
    if (v55 > 0x8575)
    {
      switch(v55)
      {
        case 0x8578u:
          char v56 = 3;
          goto LABEL_137;
        case 0x8577u:
          char v56 = 2;
          goto LABEL_137;
        case 0x8576u:
          char v56 = 1;
          goto LABEL_137;
      }
    }
    else
    {
      if (!*((_WORD *)v29 - 13))
      {
        char v56 = 5;
        goto LABEL_137;
      }
      if (v55 == 1)
      {
        char v56 = 4;
        goto LABEL_137;
      }
      if (v55 == 5890)
      {
        char v56 = 0;
        goto LABEL_137;
      }
    }
    char v56 = v55 + 70;
LABEL_137:
    unint64_t v52 = (32 * (v56 & 0x1F)) | v51 & 0xFFFFFFFFDFFFFC1FLL;
    if ((0xEFuLL >> v38))
    {
      char v54 = 1;
      char v53 = 1;
      goto LABEL_144;
    }
    unsigned int v57 = *((unsigned __int16 *)v29 - 12);
    if (v57 > 0x8575)
    {
      switch(v57)
      {
        case 0x8578u:
          char v53 = 0;
          char v54 = 3;
          goto LABEL_144;
        case 0x8577u:
          char v53 = 0;
          char v54 = 2;
          goto LABEL_144;
        case 0x8576u:
          char v53 = 0;
          goto LABEL_122;
      }
    }
    else
    {
      if (!*((_WORD *)v29 - 12))
      {
        char v53 = 0;
        char v54 = 5;
        goto LABEL_144;
      }
      if (v57 == 1)
      {
        char v53 = 0;
        char v54 = 4;
        goto LABEL_144;
      }
      if (v57 == 5890)
      {
        char v53 = 0;
        char v54 = 0;
        goto LABEL_144;
      }
    }
    char v53 = 0;
    char v54 = v57 + 70;
LABEL_144:
    if ((unsigned __int16)(*((_WORD *)v29 - 8) - 768) > 3u)
    {
      uint64_t v58 = 98304;
      if ((v37 & 1) == 0) {
        goto LABEL_146;
      }
    }
    else
    {
      uint64_t v58 = qword_227DC1ED8[(__int16)(*((_WORD *)v29 - 8) - 768)];
      if ((v37 & 1) == 0)
      {
LABEL_146:
        if ((unsigned __int16)(*((_WORD *)v29 - 7) - 768) <= 3u)
        {
          uint64_t v59 = qword_227DC1EF8[(__int16)(*((_WORD *)v29 - 7) - 768)];
          if ((v53 & 1) == 0) {
            goto LABEL_148;
          }
LABEL_152:
          uint64_t v60 = 0;
          goto LABEL_156;
        }
        uint64_t v59 = 393216;
        if (v53) {
          goto LABEL_152;
        }
LABEL_148:
        if ((unsigned __int16)(*((_WORD *)v29 - 6) - 768) > 3u) {
          uint64_t v60 = 1572864;
        }
        else {
          uint64_t v60 = qword_227DC1F18[(__int16)(*((_WORD *)v29 - 6) - 768)];
        }
LABEL_156:
        unint64_t v61 = v60 | v59 | v58 | v52 & 0xFFFFFFFFF9E003FFLL | ((unint64_t)(v54 & 0x1F) << 10);
        float v62 = *(v29 - 1);
        uint64_t v63 = 2 * (v62 == 4.0);
        if (v62 == 1.0) {
          uint64_t v63 = 1;
        }
        unint64_t v64 = v61 | (v63 << 25);
        if ((v52 & 0x1E00000) == 0xC00000)
        {
          unint64_t v33 = v64 & 0xFF000000FFFFFFFFLL | (v63 << 54) | 0x1C042100000000;
LABEL_247:
          *((void *)v34 + 1) = v33;
          goto LABEL_58;
        }
        unsigned int v65 = *((unsigned __int16 *)v29 - 15);
        if (v65 > 0x8574)
        {
          if (*((unsigned __int16 *)v29 - 15) <= 0x86AEu)
          {
            if (v65 == 34165)
            {
              int v66 = 0;
              uint64_t v67 = 4;
              goto LABEL_188;
            }
            if (v65 == 34478)
            {
              int v66 = 0;
              uint64_t v67 = 5;
              goto LABEL_188;
            }
          }
          else
          {
            switch(v65)
            {
              case 0x86AFu:
                int v66 = 0;
                uint64_t v67 = 6;
                goto LABEL_188;
              case 0x8744u:
                int v66 = 0;
                uint64_t v67 = 8;
                goto LABEL_188;
              case 0x8745u:
                int v66 = 0;
                uint64_t v67 = 9;
                goto LABEL_188;
            }
          }
        }
        else if (*((unsigned __int16 *)v29 - 15) <= 0x20FFu)
        {
          if (v65 == 260)
          {
            int v66 = 0;
            uint64_t v67 = 1;
            goto LABEL_188;
          }
          if (v65 == 7681)
          {
            int v66 = 1;
            uint64_t v67 = 7;
            goto LABEL_188;
          }
        }
        else
        {
          switch(v65)
          {
            case 0x2100u:
              int v66 = 0;
              uint64_t v67 = 0;
              goto LABEL_188;
            case 0x84E7u:
              int v66 = 0;
              uint64_t v67 = 2;
              goto LABEL_188;
            case 0x8574u:
              int v66 = 0;
              uint64_t v67 = 3;
              goto LABEL_188;
          }
        }
        int v66 = 0;
        uint64_t v67 = 10;
LABEL_188:
        unsigned int v68 = *((unsigned __int16 *)v29 - 11);
        if (v68 > 0x8575)
        {
          switch(v68)
          {
            case 0x8578u:
              char v69 = 3;
              goto LABEL_202;
            case 0x8577u:
              char v69 = 2;
              goto LABEL_202;
            case 0x8576u:
              char v69 = 1;
              goto LABEL_202;
          }
        }
        else
        {
          if (!*((_WORD *)v29 - 11))
          {
            char v69 = 5;
            goto LABEL_202;
          }
          if (v68 == 1)
          {
            char v69 = 4;
            goto LABEL_202;
          }
          if (v68 == 5890)
          {
            char v69 = 0;
            goto LABEL_202;
          }
        }
        char v69 = v68 + 70;
LABEL_202:
        unint64_t v70 = ((unint64_t)(v69 & 0x1F) << 32) | v64 & 0xFFC3FFE0FFFFFFFFLL | (v67 << 50);
        if (v66)
        {
          unint64_t v71 = v70 & 0xFFFFFC1FFFFFFFFFLL | 0x2000000000;
          char v72 = 1;
LABEL_204:
          char v73 = 1;
          goto LABEL_231;
        }
        unsigned int v74 = *((unsigned __int16 *)v29 - 10);
        if (v74 > 0x8575)
        {
          switch(v74)
          {
            case 0x8578u:
              char v75 = 3;
              goto LABEL_224;
            case 0x8577u:
              char v75 = 2;
              goto LABEL_224;
            case 0x8576u:
              char v75 = 1;
              goto LABEL_224;
          }
        }
        else
        {
          if (!*((_WORD *)v29 - 10))
          {
            char v75 = 5;
            goto LABEL_224;
          }
          if (v74 == 1)
          {
            char v75 = 4;
            goto LABEL_224;
          }
          if (v74 == 5890)
          {
            char v75 = 0;
            goto LABEL_224;
          }
        }
        char v75 = v74 + 70;
LABEL_224:
        unint64_t v71 = v70 & 0xFFFFFC1FFFFFFFFFLL | ((unint64_t)(v75 & 0x1F) << 37);
        if ((0xEFuLL >> v67))
        {
          char v73 = 1;
          char v72 = 1;
          goto LABEL_231;
        }
        unsigned int v76 = *((unsigned __int16 *)v29 - 9);
        if (v76 > 0x8575)
        {
          switch(v76)
          {
            case 0x8578u:
              char v72 = 0;
              char v73 = 3;
              goto LABEL_231;
            case 0x8577u:
              char v72 = 0;
              char v73 = 2;
              goto LABEL_231;
            case 0x8576u:
              char v72 = 0;
              goto LABEL_204;
          }
        }
        else
        {
          if (!*((_WORD *)v29 - 9))
          {
            char v72 = 0;
            char v73 = 5;
            goto LABEL_231;
          }
          if (v76 == 1)
          {
            char v72 = 0;
            char v73 = 4;
            goto LABEL_231;
          }
          if (v76 == 5890)
          {
            char v72 = 0;
            char v73 = 0;
            goto LABEL_231;
          }
        }
        char v72 = 0;
        char v73 = v76 + 70;
LABEL_231:
        if ((unsigned __int16)(*((_WORD *)v29 - 5) - 768) > 3u) {
          uint64_t v77 = 0x800000000000;
        }
        else {
          uint64_t v77 = qword_227DC1F38[(__int16)(*((_WORD *)v29 - 5) - 768)];
        }
        if (v66)
        {
          uint64_t v78 = 0;
          if ((v72 & 1) == 0)
          {
LABEL_236:
            if ((unsigned __int16)(*((_WORD *)v29 - 3) - 768) > 3u) {
              uint64_t v79 = 0x2000000000000;
            }
            else {
              uint64_t v79 = qword_227DC1F78[(__int16)(*((_WORD *)v29 - 3) - 768)];
            }
            goto LABEL_244;
          }
        }
        else
        {
          if ((unsigned __int16)(*((_WORD *)v29 - 4) - 768) > 3u) {
            uint64_t v78 = 0x1000000000000;
          }
          else {
            uint64_t v78 = qword_227DC1F58[(__int16)(*((_WORD *)v29 - 4) - 768)];
          }
          if ((v72 & 1) == 0) {
            goto LABEL_236;
          }
        }
        uint64_t v79 = 0;
LABEL_244:
        unint64_t v80 = v78 | v77 | v71 & 0xFF3C03FFFFFFFFFFLL | ((unint64_t)(v73 & 0x1F) << 42);
        unint64_t v81 = (unint64_t)(*v29 == 4.0) << 55;
        if (*v29 == 1.0) {
          unint64_t v81 = 0x40000000000000;
        }
        unint64_t v33 = v81 | v79 | v80;
        goto LABEL_247;
      }
    }
    uint64_t v59 = 0;
    if (v53) {
      goto LABEL_152;
    }
    goto LABEL_148;
  }
LABEL_257:
  unint64_t v8 = *(void *)&v5 | 0xFFFFFFFF00000000;
  if (*(unsigned char *)(a1 + 15377) && (a2 & 1) != 0 && (v20 & 0x800) != 0) {
    unint64_t v19 = v19 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)(*(unsigned char *)(a1 + 15384) & BYTE1(v19)) << 32);
  }
  unint64_t v9 = v19 | ((unint64_t)(v20 & 0x2000) << 27);
LABEL_262:
  int v82 = *(unsigned char *)(v10 + 25) & 0x7F;
  *(void *)&v98[0] = v9 & 0xFFFFFDFFFFFFFFFFLL | ((unint64_t)(v82 == 2) << 41);
  StatePrograint m = *(int16x4_t **)(a1 + 24512);
  if (!*(void *)&StateProgram[54] && !*(void *)&StateProgram[55])
  {
    uint64_t Object = cvmHashMachineFindObject();
    if (Object)
    {
      uint64_t v88 = Object;
      gleDestroyStateProgram(a1, StateProgram);
      goto LABEL_273;
    }
    StateProgram[54] = 0;
    StateProgram[55] = 0;
    if (v82)
    {
      StateProgram[55] = (int16x4_t)glpCallFragmentStateToLLVMIR();
    }
    else
    {
      if (v3[196])
      {
        StateProgram[55] = (int16x4_t)glpCallFragmentStateToLLVMIR();
        free(*(void **)&StateProgram[13]);
        StateProgram[13] = 0;
        free(*(void **)&StateProgram[60]);
        StateProgram[60] = 0;
      }
      StateProgram[54] = (int16x4_t)glpFragmentStateToPPStream();
    }
    unsigned int v92 = (_DWORD *)StateProgram[13];
    if (v92) {
      LODWORD(v92) = *v92;
    }
    StateProgram[64].i32[0] = (int)v92;
    StateProgram[53].i8[3] &= ~2u;
    StateProgram[56] = (int16x4_t)v8;
    gleModifyPluginPipelineProgram(a1, (uint64_t)StateProgram, 1);
LABEL_287:
    glePPUpdateProgram(a1, StateProgram);
    uint64_t v88 = cvmHashObjectCreate();
    uint64_t result = cvmHashMachineAddObject();
    goto LABEL_288;
  }
  uint64_t result = cvmHashObjectGetKey();
  uint64_t v85 = 0;
  uint64_t v86 = 0;
  do
  {
    v86 |= *(void *)((char *)v98 + v85) ^ *(void *)(result + v85);
    v85 += 8;
  }
  while (v85 != 72);
  if (!v86) {
    return result;
  }
  cvmHashObjectRelease();
  uint64_t v87 = cvmHashMachineFindObject();
  if (!v87)
  {
    if (v82)
    {
      uint64_t v89 = glpCallFragmentStateToLLVMIR();
      uint64_t v90 = 0;
    }
    else
    {
      if (v3[196])
      {
        uint64_t v89 = glpCallFragmentStateToLLVMIR();
        free(0);
        free(0);
      }
      else
      {
        uint64_t v89 = 0;
      }
      uint64_t v90 = glpFragmentStateToPPStream();
    }
    StatePrograint m = (int16x4_t *)gleCreateStateProgram(a1, 4, v90, v89, 0, 0, 0, v8);
    StateProgram[53].i8[3] &= ~2u;
    StateProgram[13] = 0;
    StateProgram[60] = 0;
    StateProgram[64].i32[0] = 0;
    *(void *)(a1 + 24512) = StateProgram;
    goto LABEL_287;
  }
  uint64_t v88 = v87;
LABEL_273:
  uint64_t result = cvmHashObjectGetObject();
  StatePrograint m = (int16x4_t *)result;
  *(void *)(a1 + 24512) = result;
LABEL_288:
  *(void *)(a1 + 24592) = v88;
  *(void *)(a1 + 19280) = StateProgram + 71;
  uint64_t v93 = v3[2904];
  if (v3[2904])
  {
    BOOL v94 = v3 + 3872;
    char v95 = StateProgram;
    do
    {
      uint64_t v96 = (uint64_t)*v95++;
      void *v94 = v96;
      v94 += 209;
      --v93;
    }
    while (v93);
  }
  for (uint64_t i = 0; i != 32; ++i)
    *(_DWORD *)(a1 + 2064 + i * 4) = StateProgram[34].i32[i] | StateProgram[18].i32[i];
  v4[1217] = 0;
  *(_DWORD *)(a1 + 1532) |= 0x8400000u;
  return result;
}

uint64_t gleUpdateFragmentFallbackProgram(uint64_t a1, unsigned int a2)
{
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  int v3 = *(unsigned char *)(*(void *)(a1 + 29032) + 25) & 0x7F;
  unint64_t v4 = (unint64_t)(v3 == 2) << 41;
  if ((*(unsigned char *)(a1 + 24864) & 0x10) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 24768);
    if (!v8) {
      uint64_t v8 = *(void *)(*(void *)(a1 + 24776) + 72);
    }
    uint64_t v6 = (_DWORD *)(v8 + 3596);
    uint64_t v7 = (uint64_t *)(v8 + 3552);
  }
  else
  {
    if (!*(unsigned char *)(a1 + 24760))
    {
LABEL_12:
      unint64_t v12 = 256;
      goto LABEL_20;
    }
    uint64_t v5 = *(void *)(a1 + 24432);
    uint64_t v6 = (_DWORD *)(v5 + 516);
    uint64_t v7 = (uint64_t *)(v5 + 472);
  }
  uint64_t v9 = *v7;
  int v10 = *v6 & 0x1000;
  if (v9) {
    BOOL v11 = v10 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11) {
    goto LABEL_12;
  }
  v4 |= 0x10000uLL;
  uint64_t v13 = *(unsigned int *)(v9 + 64);
  if (v13)
  {
    unsigned __int8 v14 = 0;
    uint64_t v15 = (unint64_t *)(v9 + 8 * *(unsigned int *)(v9 + 68));
    uint64_t v16 = 8 * v13;
    do
    {
      unint64_t v17 = *v15++;
      int v18 = 1 << ((v17 >> 33) & 7);
      if ((v17 & 0x1F00) != 0x400) {
        LOBYTE(v18) = 0;
      }
      v14 |= v18;
      v16 -= 8;
    }
    while (v16);
    unint64_t v12 = (unint64_t)v14 << 8;
  }
  else
  {
    unint64_t v12 = 0;
  }
LABEL_20:
  uint64_t v35 = v4 | v12 | 0x20000;
  uint64_t v19 = a1 + 8 * a2;
  uint64_t v20 = a2;
  if (*(void *)(v19 + 24600))
  {
    uint64_t result = cvmHashObjectGetKey();
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    do
    {
      v23 |= *(uint64_t *)((char *)&v35 + v22) ^ *(void *)(result + v22);
      v22 += 8;
    }
    while (v22 != 72);
    if (!v23) {
      return result;
    }
    cvmHashObjectRelease();
  }
  unint64_t v24 = (unsigned char *)(a1 + 32496);
  uint64_t v25 = (uint64_t *)(v19 + 24600);
  uint64_t Object = cvmHashMachineFindObject();
  if (Object)
  {
    uint64_t v27 = Object;
    uint64_t result = cvmHashObjectGetObject();
    StatePrograint m = result;
  }
  else
  {
    if (v3)
    {
      uint64_t v29 = glpCallFragmentStateToLLVMIR();
      uint64_t v30 = 0;
    }
    else
    {
      uint64_t v30 = glpFragmentStateToPPStream();
      uint64_t v29 = 0;
    }
    StatePrograint m = gleCreateStateProgram(a1, 4, v30, v29, 0, 0, 0, -1);
    *(void *)(StateProgram + 104) = 0;
    *(void *)(StateProgram + 480) = 0;
    *(_DWORD *)(StateProgram + 512) = 0;
    uint64_t v27 = cvmHashObjectCreate();
    uint64_t result = cvmHashMachineAddObject();
  }
  *uint64_t v25 = StateProgram;
  uint64_t v31 = a1 + 8 * v20;
  *(void *)(v31 + 24632) = v27;
  uint64_t v32 = *v24;
  if (*v24)
  {
    unint64_t v33 = (void *)(v31 + 33472);
    do
    {
      uint64_t v34 = *(void *)StateProgram;
      StateProgram += 8;
      *unint64_t v33 = v34;
      v33 += 209;
      --v32;
    }
    while (v32);
  }
  return result;
}

uint64_t gleCreateFragmentUtilProgram(uint64_t a1)
{
  if ((*(unsigned char *)(*(void *)(a1 + 29032) + 25) & 0x7F) != 0)
  {
    uint64_t v2 = glpCallFragmentStateToLLVMIR();
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = glpFragmentStateToPPStream();
    uint64_t v2 = 0;
  }
  uint64_t result = gleCreateStateProgram(a1, 4, v3, v2, 0, 0, 0, -14);
  *(void *)(result + 104) = 0;
  *(void *)(result + 480) = 0;
  *(_DWORD *)(result + 512) = 0;
  return result;
}

double gleInitAccumObject(uint64_t a1)
{
  *(void *)(a1 + 28832) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 28816) = 0u;
  *(_OWORD *)(a1 + 28800) = 0u;
  return result;
}

void gleReclaimAccumResources(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 28800);
  if (v2)
  {
    gleDestroyStateProgram(a1, v2);
    *(void *)(a1 + 28800) = 0;
  }
  uint64_t v3 = *(void **)(a1 + 28808);
  if (v3)
  {
    gleDestroyStateProgram(a1, v3);
    *(void *)(a1 + 28808) = 0;
  }
  unint64_t v4 = *(void **)(a1 + 28816);
  if (v4)
  {
    gleDestroyAccumTexture(a1, v4);
    *(void *)(a1 + 28816) = 0;
  }
  uint64_t v5 = *(void **)(a1 + 28824);
  if (v5)
  {
    gleDestroyAccumTexture(a1, v5);
    *(void *)(a1 + 28824) = 0;
  }
  uint64_t v6 = *(char **)(a1 + 28832);
  if (v6)
  {
    if (*(unsigned char *)(a1 + 32496))
    {
      unint64_t v7 = 0;
      uint64_t v8 = (void *)(a1 + 32512);
      uint64_t v9 = v6 + 160;
      do
      {
        (*(void (**)(void, void))(v8[206] + 1592))(*v8, *(void *)&v9[8 * v7]);
        (*(void (**)(void, void))(v8[206] + 1616))(v8[1], *(void *)&v9[8 * v7++]);
        v8 += 209;
      }
      while (v7 < *(unsigned __int8 *)(a1 + 32496));
    }
    free(v6);
    *(void *)(a1 + 28832) = 0;
  }
}

void gleDestroyAccumTexture(uint64_t a1, void *a2)
{
  uint64_t v3 = (unsigned __int8 *)(a1 + 32496);
  if (*(unsigned char *)(a1 + 32496))
  {
    unint64_t v4 = 0;
    uint64_t v5 = (void *)(a1 + 32512);
    do
    {
      (*(void (**)(void, void))(v5[206] + 1392))(*v5, a2[v4++]);
      v5 += 209;
    }
    while (v4 < *v3);
  }
  gfxDestroyPluginTexture();
  if (a2[132]) {
    gfxFreeTextureLevel();
  }

  free(a2);
}

uint64_t gleAccumFast(unint64_t a1, int a2, float a3)
{
  unint64_t v6 = a1 + 28696;
  unint64_t v7 = a1 + 24748;
  unsigned int v8 = *(_DWORD *)(a1 + 29632);
  int v9 = *(_DWORD *)(a1 + 29636);
  bzero(&v118, 0x2F8uLL);
  if ((*(unsigned char *)(v7 + 116) & 0x10) != 0)
  {
    __int16 v10 = 3;
  }
  else if (*(unsigned char *)(v7 + 12))
  {
    __int16 v10 = 2;
  }
  else
  {
    __int16 v10 = 1;
  }
  int v11 = a2 - 256;
  switch(a2)
  {
    case 256:
      v10 |= 0x200u;
      goto LABEL_10;
    case 257:
LABEL_10:
      int v14 = 0;
      __int16 v13 = v10 | 8;
      int v12 = 1;
      goto LABEL_12;
    case 258:
      int v14 = 0;
      int v12 = 0;
      __int16 v13 = v10 | 4;
      goto LABEL_12;
    case 259:
    case 260:
      v10 |= 0x200u;
      goto LABEL_8;
    default:
LABEL_8:
      int v12 = 0;
      __int16 v13 = v10 | 0xC;
      int v14 = 1;
LABEL_12:
      if (*(unsigned char *)(*(void *)(a1 + 29480) + 101))
      {
        int v15 = *(_DWORD *)(a1 + 1544);
        if ((v15 & 0x40000000) == 0)
        {
          *(_DWORD *)(v7 + 3904) = 0;
          *(_DWORD *)(a1 + 1544) = v15 | 0x40000000;
        }
      }
      int v112 = a2;
      if (v14)
      {
        if (!*(void *)(a1 + 28800))
        {
          AccumTexture = 0;
          *(void *)(a1 + 28800) = gleCreateFragmentUtilProgram(a1);
          goto LABEL_26;
        }
        goto LABEL_25;
      }
      if (*(void *)(a1 + 28808))
      {
        if (v12) {
          goto LABEL_20;
        }
LABEL_25:
        AccumTexture = 0;
        goto LABEL_26;
      }
      *(void *)(a1 + 28808) = gleCreateFragmentUtilProgram(a1);
      if (!v12) {
        goto LABEL_25;
      }
LABEL_20:
      AccumTexture = *(unsigned char **)(a1 + 28816);
      if (AccumTexture)
      {
        if (v8 != *((unsigned __int16 *)AccumTexture + 518) || v9 != *((unsigned __int16 *)AccumTexture + 519)) {
          gleResizeAccumTexture(a1, *(void *)(a1 + 28816), v8, v9);
        }
      }
      else
      {
        AccumTexture = gleCreateAccumTexture(a1, v8, v9);
        *(void *)(a1 + 28816) = AccumTexture;
      }
LABEL_26:
      unint64_t v17 = *(unsigned char **)(a1 + 28824);
      int v116 = v9;
      if (v17)
      {
        if (v8 == *((unsigned __int16 *)v17 + 518) && v9 == *((unsigned __int16 *)v17 + 519))
        {
          int v113 = 0;
        }
        else
        {
          gleResizeAccumTexture(a1, (uint64_t)v17, v8, v9);
          int v113 = 1;
        }
      }
      else
      {
        unint64_t v17 = gleCreateAccumTexture(a1, v8, v9);
        int v113 = 0;
        *(void *)(a1 + 28824) = v17;
      }
      uint64_t v18 = *(void *)(a1 + 28832);
      if (!v18)
      {
        uint64_t v19 = malloc_type_malloc(88 * *(unsigned __int8 *)(v6 + 3800) + 520, 0x577B5147uLL);
        if (!v19) {
          abort();
        }
        uint64_t v18 = (uint64_t)v19;
        gleInitializeFramebuffer(a1, (uint64_t)v19);
        *(_WORD *)(v18 + 476) = 0;
        *(_DWORD *)(v18 + 504) = 0;
        *(_WORD *)(v18 + 432) = 0;
        *(_DWORD *)(v18 + 440) = 0xFFFF;
        gleCreatePluginFramebuffer(a1, v18);
        int v20 = *(_DWORD *)(v18 + 500) | 1;
        *(_DWORD *)(v18 + 500) = v20;
        *(void *)uint64_t v18 = v17 - 40;
        uint64_t v21 = *(unsigned __int8 *)(v6 + 3800);
        if (*(unsigned char *)(v6 + 3800))
        {
          uint64_t v22 = (void *)(v18 + 520);
          do
          {
            uint64_t v23 = *(void *)v17;
            v17 += 8;
            void *v22 = v23;
            v22 += 11;
            --v21;
          }
          while (v21);
        }
        if ((*(unsigned char *)(*(void *)(a1 + 29480) + 561) & 0x40) != 0) {
          v20 &= *(_DWORD *)(v18 + 508) | *(_DWORD *)(v18 + 504) | 0xFFFFFF00;
        }
        *(_DWORD *)(v18 + 456) = v20;
        *(void *)(a1 + 28832) = v18;
      }
      unsigned int v114 = v8;
      long long v115 = AccumTexture;
      int v117 = v12;
      unint64_t v24 = (void *)(a1 + 33176);
      uint64_t v25 = (unsigned __int8 *)(a1 + 15006);
      int v26 = v13 & 0xC;
      uint64_t v27 = 28808;
      if (v26 == 12) {
        uint64_t v27 = 28800;
      }
      uint64_t v28 = *(uint64_t **)(a1 + v27);
      if (v26 != 4)
      {
        uint64_t v29 = v18 - 40;
        *(void *)(a1 + 28960) = v18 - 40;
        uint64_t v30 = *(unsigned __int8 *)(v6 + 3800);
        if (*(unsigned char *)(v6 + 3800))
        {
          uint64_t v31 = (void *)(a1 + 33592);
          uint64_t v32 = (uint64_t *)(v18 + 160);
          do
          {
            uint64_t v33 = *v32++;
            *uint64_t v31 = v33;
            v31 += 209;
            --v30;
          }
          while (v30);
        }
        *(_DWORD *)(v7 + 3904) = 0;
        *(_DWORD *)(v6 + 1104) |= 0x50000000u;
        if ((**(unsigned char **)(a1 + 29480) & 2) != 0)
        {
          gleUpdateViewScissorData(a1);
          uint64_t v29 = *(void *)(a1 + 28960);
        }
        if (v29) {
          uint64_t v34 = (_DWORD *)(v29 + 552);
        }
        else {
          uint64_t v34 = (_DWORD *)(v6 + 1112);
        }
        *(_WORD *)(a1 + 15342) = *(_DWORD *)(v6 + 1108) & *v34;
        --*(_DWORD *)(v6 + 1120);
      }
      if ((v13 & 3) == 2)
      {
        *(unsigned char *)(v7 + 12) = 0;
      }
      else if ((v13 & 3) == 3)
      {
        *(_DWORD *)(v7 + 116) &= ~0x10u;
        uint64_t v35 = *(unsigned __int8 *)(v6 + 3800);
        if (*(unsigned char *)(v6 + 3800))
        {
          uint64_t v36 = 0;
          long long v37 = v141;
          unint64_t v38 = a1 + 33504;
          do
          {
            for (uint64_t i = 0; i != 40; i += 8)
            {
              *(void *)&v37[i] = *(void *)(v38 + i);
              *(void *)(v38 + i) = 0;
            }
            ++v36;
            v37 += 40;
            v38 += 1672;
          }
          while (v36 != v35);
        }
        char v124 = *(unsigned char *)(v7 + 12);
        *(unsigned char *)(v7 + 12) = 0;
        *(_DWORD *)(a1 + 1532) |= 0x10000000u;
      }
      *(unsigned char *)unint64_t v7 = 1;
      uint64_t v137 = *(void *)(a1 + 24512);
      *(void *)(a1 + 24512) = v28;
      uint64_t v40 = *(unsigned __int8 *)(v6 + 3800);
      if (!*(unsigned char *)(v6 + 3800))
      {
        if (v26 == 12) {
          goto LABEL_75;
        }
        uint64_t v138 = *(void *)(a1 + 20792);
        uint64_t v50 = 28816;
        if (v26 == 4) {
          uint64_t v50 = 28824;
        }
        *(void *)(a1 + 20792) = *(void *)(a1 + v50) - 40;
        goto LABEL_74;
      }
      unsigned __int8 v41 = v139;
      uint64_t v42 = (void *)(a1 + 33464);
      uint64_t v43 = *(unsigned __int8 *)(v6 + 3800);
      do
      {
        *v41++ = *v42;
        uint64_t v44 = *v28++;
        *uint64_t v42 = v44;
        v42 += 209;
        --v43;
      }
      while (v43);
      if (v26 != 12)
      {
        uint64_t v45 = 28816;
        if (v26 == 4) {
          uint64_t v45 = 28824;
        }
        unint64_t v46 = *(uint64_t **)(a1 + v45);
        uint64_t v138 = *(void *)(a1 + 20792);
        *(void *)(a1 + 20792) = v46 - 5;
        uint64_t v47 = v140;
        BOOL v48 = (void *)(a1 + 33176);
        do
        {
          *v47++ = *v48;
          uint64_t v49 = *v46++;
          *BOOL v48 = v49;
          v48 += 209;
          --v40;
        }
        while (v40);
LABEL_74:
        *(_DWORD *)(a1 + 1524) |= 1u;
        *(_DWORD *)(a1 + 1536) |= 1u;
        *(_DWORD *)(a1 + 1548) |= 0x8000000u;
      }
LABEL_75:
      if ((v13 & 0x200) != 0)
      {
        char v130 = *(unsigned char *)(a1 + 15120);
        uint64_t v131 = *(void *)(a1 + 15008);
        int v132 = *(_DWORD *)(a1 + 15016);
        *(unsigned char *)(a1 + 15120) = -1;
        *(_DWORD *)(a1 + 15016) = -2147057658;
        *(_DWORD *)(v7 + 3904) = 0;
      }
      else
      {
        if ((*(unsigned char *)(a1 + 15120) & 1) == 0) {
          goto LABEL_80;
        }
        v13 |= 0x400u;
        char v130 = *(unsigned char *)(a1 + 15120);
        *(unsigned char *)(a1 + 15120) = 0;
      }
      *(_DWORD *)(a1 + 1520) |= 2u;
LABEL_80:
      int v51 = *(unsigned __int8 *)(a1 + 15319);
      if (*v25 | v51)
      {
        v13 |= 0x100u;
        unsigned __int8 v125 = *v25;
        char v126 = v51;
        *uint64_t v25 = 0;
        *(unsigned char *)(a1 + 15319) = 0;
        *(_DWORD *)(v7 + 3904) = 0;
        *(_DWORD *)(a1 + 1520) |= 0x20001u;
      }
      if (v26 == 4)
      {
        char v128 = *(unsigned char *)(a1 + 15204);
        int v52 = *(_DWORD *)(a1 + 15644);
        char v129 = v52 & 1;
        *(unsigned char *)(a1 + 15204) = 0;
        *(_DWORD *)(a1 + 15644) = v52 & 0xFFFFFFFE;
        *(_DWORD *)(a1 + 1520) |= 0x10000200u;
      }
      else
      {
        int v133 = *(_DWORD *)(a1 + 15336);
        char v53 = BYTE1(v133);
        char v54 = BYTE2(v133);
        char v55 = HIBYTE(v133);
        *(unsigned char *)(a1 + 15336) = v133 | 1;
        *(unsigned char *)(a1 + 15337) = v53 | 1;
        *(unsigned char *)(a1 + 15338) = v54 | 1;
        *(unsigned char *)(a1 + 15339) = v55 | 1;
        char v127 = *(unsigned char *)(a1 + 15224);
        *(unsigned char *)(a1 + 15224) = 0;
        *(_DWORD *)(v6 + 1104) |= 0x40400u;
      }
      if (*(_WORD *)(v6 + 1014) == 1)
      {
        v13 |= 0x800u;
        *(_WORD *)(v6 + 1014) = 0;
        *(unsigned char *)(a1 + 15178) = 0;
        *(_DWORD *)(a1 + 1524) |= 0x400000u;
      }
      if (*(unsigned char *)(a1 + 15196))
      {
        v13 |= 0x1000u;
        *(unsigned char *)(a1 + 15196) = 0;
        *(_DWORD *)(v7 + 3904) = 0;
        *(_DWORD *)(v6 + 1104) |= 0x200000u;
      }
      if (*(unsigned char *)(a1 + 15532))
      {
        v13 |= 0x10u;
        char v122 = *(unsigned char *)(a1 + 15532);
        *(unsigned char *)(a1 + 15532) = 0;
        *(_DWORD *)(a1 + 1520) |= 0x2000000u;
      }
      int v56 = *(unsigned __int16 *)(a1 + 15528);
      if (!*(unsigned char *)(a1 + 15534) && v56 == 2305)
      {
        if (*(unsigned char *)(a1 + 15538)) {
          goto LABEL_96;
        }
        LOWORD(v56) = 2305;
      }
      v13 |= 0x20u;
      char v123 = *(unsigned char *)(a1 + 15534);
      __int16 v119 = v56;
      int v118 = *(_DWORD *)(a1 + 15524);
      *(unsigned char *)(a1 + 15534) = 0;
      *(_WORD *)(a1 + 15524) = 6914;
      *(_DWORD *)(a1 + 15526) = 151067394;
      *(unsigned char *)(a1 + 15538) = 1;
      *(_DWORD *)(a1 + 1548) |= 0x8200u;
      *(_DWORD *)(a1 + 1520) |= 0x800000u;
LABEL_96:
      int v57 = *(unsigned __int8 *)(a1 + 15533);
      if (*(unsigned __int8 *)(a1 + 15537) | v57)
      {
        v13 |= 0x40u;
        char v121 = *(unsigned char *)(a1 + 15537);
        char v120 = v57;
        *(unsigned char *)(a1 + 15537) = 0;
        *(unsigned char *)(a1 + 15533) = 0;
        *(_DWORD *)(a1 + 1520) |= 0x800000u;
      }
      *(_DWORD *)(a1 + 1532) |= 0x400000u;
      *(_DWORD *)(v7 + 3904) = 0;
      *(_DWORD *)(a1 + 1548) |= 0x78070082u;
      gleUpdateInverseNeeds(a1);
      switch(v11)
      {
        case 0:
        case 4:
          v58.n128_u64[0] = 0x1000100010001;
          goto LABEL_110;
        case 1:
        case 2:
          goto LABEL_111;
        case 3:
          v58.n128_u64[0] = 0x300000003000000;
LABEL_110:
          *(void *)(a1 + 15008) = v58.n128_u64[0];
LABEL_111:
          float v61 = a3;
          float v62 = a3;
          float v63 = a3;
          if (!v117) {
            goto LABEL_112;
          }
          goto LABEL_103;
        default:
          a3 = 0.0;
          float v61 = 0.0;
          float v62 = 0.0;
          float v63 = 0.0;
          if (v112 == 5376)
          {
            a3 = *(float *)(a1 + 15136);
            float v61 = *(float *)(a1 + 15140);
            float v62 = *(float *)(a1 + 15144);
            float v63 = *(float *)(a1 + 15148);
          }
          if (!v117)
          {
LABEL_112:
            int v64 = v114;
            if (!v113) {
              goto LABEL_116;
            }
            goto LABEL_113;
          }
LABEL_103:
          *((_DWORD *)v115 + 242) = 65540;
          int v64 = v114;
          LODWORD(v111) = 0;
          HIDWORD(v111) = v114;
          int v65 = (*(uint64_t (**)(void, void, void, void, void, void, void, void, uint64_t, void))(*(void *)(a1 + 29448) + 360))(*(void *)(a1 + 29016), *(void *)&v115[8 * *(unsigned __int8 *)(v6 + 3803)], 0, 0, 0, 0, 0, 0, v111, v116);
          if (v65)
          {
            int v66 = v113;
            if (((v65 == 1) & ~v113) != 0) {
              goto LABEL_116;
            }
          }
          else
          {
            (*(void (**)(void, uint64_t, void, void))(*(void *)(a1 + 29496) + 272))(*(void *)(a1 + 29464), 1, 0, *(void *)&v115[8 * *(unsigned __int8 *)(v6 + 3804)]);
            gfxAllocateTextureLevel();
            long long v134 = *(_OWORD *)(a1 + 18448);
            long long v135 = *(_OWORD *)(a1 + 18464);
            int v136 = *(_DWORD *)(a1 + 18480);
            v13 |= 0x80u;
            *(unsigned char *)(a1 + 18480) = 0;
            *(void *)(a1 + 18464) = 0;
            v115[1043] |= 0x10u;
            gfxModifyPluginTextureLevel();
            *(_DWORD *)(a1 + 18452) = 16 * *((unsigned __int16 *)v115 + 522);
            int v66 = 1;
            (*(void (**)(void, void, void, void, void, uint64_t, uint64_t, void, int, void))(*(void *)(a1 + 29496) + 224))(*(void *)(a1 + 29464), 0, 0, v114, v116, 6408, 5126, *((void *)v115 + 132), 1, 0);
          }
          *(_DWORD *)(v7 + 3904) = 0;
          *(_DWORD *)(a1 + 1524) |= 1u;
          if (v66)
          {
LABEL_113:
            uint64_t v67 = *(unsigned __int8 *)(v6 + 3800);
            if (*(unsigned char *)(v6 + 3800))
            {
              unsigned int v68 = (unsigned char *)(v18 + 600);
              do
              {
                unsigned char *v68 = 1;
                v68 += 88;
                --v67;
              }
              while (v67);
            }
          }
LABEL_116:
          if ((*(unsigned char *)(a1 + 1547) & 0x40) != 0) {
            *(unsigned char *)(v6 + 3794) = 1;
          }
          if ((*(unsigned char *)(v7 + 3904) & 0x80) != 0
            && (*(unsigned char *)(v7 + 3933) & 1) != 0
            && (*(unsigned char *)(v7 + 3935) & 1) != 0
            || gleDoSelectiveDispatchCore(a1, 0x80u, 1u, 1u, 0xB8000000, v58, v59, v60))
          {
            float v69 = (float)v64;
            float v70 = (float)v116;
            float v71 = 0.0;
            if ((**(unsigned char **)(a1 + 29032) & 4) != 0)
            {
              int v85 = *(_DWORD *)(v6 + 24);
              if (v85 < 0) {
                goto LABEL_142;
              }
              float v86 = (float)*(int *)(v6 + 20);
              if (v86 > v69) {
                goto LABEL_142;
              }
              int v87 = *(_DWORD *)(v6 + 32);
              if (v87 < 0) {
                goto LABEL_142;
              }
              float v88 = (float)*(int *)(v6 + 28);
              if (v88 > v70) {
                goto LABEL_142;
              }
              float v73 = (float)v87;
              float v71 = fmaxf(v86, 0.0);
              if ((float)v85 < v69) {
                float v69 = (float)v85;
              }
              float v72 = fmaxf(v88, 0.0);
              if (v73 < v70) {
                goto LABEL_125;
              }
            }
            else
            {
              float v72 = 0.0;
            }
            float v73 = (float)v116;
LABEL_125:
            uint64_t v74 = *(void *)(a1 + 26000);
            float v75 = *(float *)(v6 + 4);
            float v76 = v75 + (float)(*(float *)v6 * v71);
            float v77 = v75 + (float)(*(float *)v6 * v69);
            float v78 = *(float *)(v6 + 8);
            float v79 = *(float *)(v6 + 12);
            float v80 = v79 + (float)(v78 * v72);
            float v81 = v79 + (float)(v78 * v73);
            *(_DWORD *)(v74 + 28) = 0;
            *(float *)(v74 + 64) = v76;
            *(float *)(v74 + 68) = v80;
            *(void *)(v74 + 72) = 0x3F80000000000000;
            *(float *)(v74 + 224) = v71;
            *(float *)(v74 + 228) = v72;
            *(void *)(v74 + 232) = 0x3F80000000000000;
            *(float *)(v74 + 240) = a3;
            *(float *)(v74 + 244) = v61;
            *(float *)(v74 + 248) = v62;
            *(float *)(v74 + 252) = v63;
            *(_DWORD *)(v74 + 668) = 0;
            *(float *)(v74 + 704) = v77;
            *(float *)(v74 + 708) = v80;
            *(void *)(v74 + 712) = 0x3F80000000000000;
            *(float *)(v74 + 864) = v69;
            *(float *)(v74 + 868) = v72;
            *(void *)(v74 + 872) = 0x3F80000000000000;
            *(float *)(v74 + 880) = a3;
            *(float *)(v74 + 884) = v61;
            *(float *)(v74 + 888) = v62;
            *(float *)(v74 + 892) = v63;
            *(_DWORD *)(v74 + 1308) = 0;
            *(float *)(v74 + 1344) = v77;
            *(float *)(v74 + 1348) = v81;
            *(void *)(v74 + 1352) = 0x3F80000000000000;
            *(float *)(v74 + 1504) = v69;
            *(float *)(v74 + 1508) = v73;
            *(void *)(v74 + 1512) = 0x3F80000000000000;
            *(float *)(v74 + 1520) = a3;
            *(float *)(v74 + 1524) = v61;
            *(float *)(v74 + 1528) = v62;
            *(float *)(v74 + 1532) = v63;
            *(_DWORD *)(v74 + 1948) = 0;
            *(float *)(v74 + 1984) = v76;
            *(float *)(v74 + 1988) = v81;
            *(void *)(v74 + 1992) = 0x3F80000000000000;
            *(float *)(v74 + 2144) = v71;
            *(float *)(v74 + 2148) = v73;
            *(void *)(v74 + 2152) = 0x3F80000000000000;
            *(float *)(v74 + 2160) = a3;
            *(float *)(v74 + 2164) = v61;
            *(float *)(v74 + 2168) = v62;
            *(float *)(v74 + 2172) = v63;
            if (*(void *)(a1 + 26280))
            {
              uint64_t v82 = *(__int16 *)(v7 + 1384);
              v142[0] = 0;
              unint64_t v83 = (*(uint64_t (**)(void, uint64_t, int *))(a1 + 29200))(*(void *)(a1 + 29016), 7, v142);
              unint64_t v84 = v83 + 4 * v82;
              do
              {
                (*(void (**)(unint64_t, uint64_t, unint64_t))(a1 + 26168))(a1, v74, v83);
                v83 += v82;
                v74 += 640;
              }
              while (v83 < v84);
              (*(void (**)(void, uint64_t, uint64_t, uint64_t))(a1 + 29208))(*(void *)(a1 + 29016), 2, 7, 4);
            }
            else
            {
              (*(void (**)(void, uint64_t, uint64_t, uint64_t))(a1 + 29128))(*(void *)(a1 + 29016), v74, 4, 2);
            }
            int v89 = *(_DWORD *)(*(void *)(a1 + 19296) + 316);
            if (*(_DWORD *)(v6 + 1120) != v89)
            {
              if (*(void *)(a1 + 28960))
              {
                gleInvalidateCurrentDrawFramebufferTextures(a1);
                int v89 = *(_DWORD *)(*(void *)(a1 + 19296) + 316);
              }
              *(_DWORD *)(v6 + 1120) = v89;
            }
          }
LABEL_142:
          if (v117 && *((void *)v115 + 132))
          {
            (*(void (**)(void, uint64_t, void, void))(*(void *)(a1 + 29496) + 272))(*(void *)(a1 + 29464), 1, 0, *(void *)&v115[8 * *(unsigned __int8 *)(v6 + 3804)]);
            gfxFreeTextureLevel();
            v115[1043] &= ~0x10u;
            *((_WORD *)v115 + 498) &= ~1u;
          }
          int v90 = v13 & 0xC;
          if ((v13 & 0x80) != 0)
          {
            *(_DWORD *)(a1 + 18480) = v136;
            *(_OWORD *)(a1 + 18448) = v134;
            *(_OWORD *)(a1 + 18464) = v135;
          }
          if (v90 != 4)
          {
            *(void *)(a1 + 28960) = 0;
            uint64_t v91 = *(unsigned __int8 *)(v6 + 3800);
            if (*(unsigned char *)(v6 + 3800))
            {
              unsigned int v92 = (void *)(a1 + 33592);
              do
              {
                void *v92 = 0;
                v92 += 209;
                --v91;
              }
              while (v91);
            }
            *(_DWORD *)(v7 + 3904) = 0;
            *(_DWORD *)(v6 + 1104) |= 0x50000000u;
            if ((**(unsigned char **)(a1 + 29480) & 2) != 0)
            {
              gleUpdateViewScissorData(a1);
              uint64_t v93 = *(void *)(a1 + 28960);
            }
            else
            {
              uint64_t v93 = 0;
            }
            if (v93) {
              BOOL v94 = (_DWORD *)(v93 + 552);
            }
            else {
              BOOL v94 = (_DWORD *)(v6 + 1112);
            }
            *(_WORD *)(a1 + 15342) = *(_DWORD *)(v6 + 1108) & *v94;
            --*(_DWORD *)(v6 + 1120);
          }
          if ((v13 & 3) == 2)
          {
            *(unsigned char *)(v7 + 12) = 1;
          }
          else if ((v13 & 3) == 3)
          {
            *(_DWORD *)(v7 + 116) |= 0x10u;
            uint64_t v95 = *(unsigned __int8 *)(v6 + 3800);
            if (*(unsigned char *)(v6 + 3800))
            {
              uint64_t v96 = v141;
              unint64_t v97 = a1 + 33504;
              do
              {
                long long v98 = *((_OWORD *)v96 + 1);
                *(_OWORD *)unint64_t v97 = *(_OWORD *)v96;
                *(_OWORD *)(v97 + 16) = v98;
                *(void *)(v97 + 32) = *((void *)v96 + 4);
                v96 += 40;
                v97 += 1672;
                --v95;
              }
              while (v95);
            }
            *(unsigned char *)(v7 + 12) = v124;
            *(_DWORD *)(a1 + 1532) |= 0x10000000u;
          }
          *(unsigned char *)unint64_t v7 = 0;
          *(void *)(a1 + 24512) = v137;
          uint64_t v99 = *(unsigned __int8 *)(v6 + 3800);
          if (!*(unsigned char *)(v6 + 3800))
          {
            if (v90 == 12) {
              goto LABEL_175;
            }
            *(void *)(a1 + 20792) = v138;
            goto LABEL_174;
          }
          long long v100 = (void *)(a1 + 33464);
          uint64_t v101 = (uint64_t *)v139;
          uint64_t v102 = *(unsigned __int8 *)(v6 + 3800);
          do
          {
            uint64_t v103 = *v101++;
            void *v100 = v103;
            v100 += 209;
            --v102;
          }
          while (v102);
          if (v90 != 12)
          {
            *(void *)(a1 + 20792) = v138;
            unsigned int v104 = (uint64_t *)v140;
            do
            {
              uint64_t v105 = *v104++;
              *unint64_t v24 = v105;
              v24 += 209;
              --v99;
            }
            while (v99);
LABEL_174:
            *(_DWORD *)(a1 + 1524) |= 1u;
            *(_DWORD *)(a1 + 1536) |= 1u;
            *(_DWORD *)(a1 + 1548) |= 0x8000000u;
          }
LABEL_175:
          if ((v13 & 0x200) != 0)
          {
            *(unsigned char *)(a1 + 15120) = v130;
            *(void *)(a1 + 15008) = v131;
            *(_DWORD *)(a1 + 15016) = v132;
          }
          else
          {
            if ((v13 & 0x400) == 0) {
              goto LABEL_180;
            }
            *(unsigned char *)(a1 + 15120) = v130;
          }
          *(_DWORD *)(a1 + 1520) |= 2u;
LABEL_180:
          if ((v13 & 0x100) != 0)
          {
            *uint64_t v25 = v125;
            *(unsigned char *)(a1 + 15319) = v126;
            *(_DWORD *)(v7 + 3904) = 0;
            *(_DWORD *)(a1 + 1520) |= 0x20001u;
          }
          if (v90 != 4)
          {
            *(_DWORD *)(a1 + 15336) = v133;
            *(unsigned char *)(a1 + 15224) = v127;
            *(_DWORD *)(v6 + 1104) |= 0x40400u;
            if ((v13 & 0x800) == 0) {
              goto LABEL_189;
            }
            goto LABEL_188;
          }
          *(unsigned char *)(a1 + 15204) = v128;
          if (v129) {
            *(_DWORD *)(a1 + 15644) |= 1u;
          }
          *(_DWORD *)(a1 + 1520) |= 0x10000200u;
          if ((v13 & 0x800) != 0)
          {
LABEL_188:
            *(_WORD *)(v6 + 1014) = 1;
            *(unsigned char *)(a1 + 15178) = 1;
            *(_DWORD *)(v7 + 3904) = 0;
            *(_DWORD *)(a1 + 1524) |= 0x400000u;
          }
LABEL_189:
          if ((v13 & 0x1000) != 0)
          {
            *(unsigned char *)(a1 + 15196) = 1;
            *(_DWORD *)(v6 + 1104) |= 0x200000u;
            if ((v13 & 0x10) == 0)
            {
LABEL_191:
              if ((v13 & 0x20) == 0) {
                goto LABEL_192;
              }
LABEL_197:
              *(unsigned char *)(a1 + 15534) = v123;
              *(_WORD *)(a1 + 15528) = v119;
              int v107 = (unsigned __int16)v118;
              *(_WORD *)(a1 + 15524) = v118;
              int v108 = HIWORD(v118);
              *(_WORD *)(a1 + 15526) = HIWORD(v118);
              BOOL v110 = v107 == 6914 && v108 == 6914;
              *(unsigned char *)(a1 + 15538) = v110;
              *(_DWORD *)(a1 + 1548) |= 0x8200u;
              *(_DWORD *)(a1 + 1520) |= 0x800000u;
              if ((v13 & 0x40) != 0) {
                goto LABEL_193;
              }
              goto LABEL_194;
            }
          }
          else if ((v13 & 0x10) == 0)
          {
            goto LABEL_191;
          }
          *(unsigned char *)(a1 + 15532) = v122;
          *(_DWORD *)(a1 + 1520) |= 0x2000000u;
          if ((v13 & 0x20) != 0) {
            goto LABEL_197;
          }
LABEL_192:
          if ((v13 & 0x40) != 0)
          {
LABEL_193:
            *(unsigned char *)(a1 + 15537) = v121;
            *(unsigned char *)(a1 + 15533) = v120;
            *(_DWORD *)(a1 + 1520) |= 0x800000u;
          }
LABEL_194:
          *(_DWORD *)(a1 + 1532) |= 0x400000u;
          *(_DWORD *)(v7 + 3904) = 0;
          *(_DWORD *)(a1 + 1548) |= 0x78070082u;
          uint64_t result = gleUpdateInverseNeeds(a1);
          *(unsigned char *)(v6 + 3794) = 0;
          return result;
      }
  }
}

unsigned char *gleCreateAccumTexture(uint64_t a1, __int16 a2, __int16 a3)
{
  uint64_t v5 = malloc_type_malloc(0x428uLL, 0x577B5147uLL);
  if (!v5) {
    abort();
  }
  unint64_t v6 = v5;
  gfxInitializeGLTexture();
  v6[771] |= 1u;
  gfxCreatePluginTexture();
  gfxEvaluateTextureForGeometryChange();
  *((_DWORD *)v6 + 258) = 0;
  *((_WORD *)v6 + 522) = a2;
  *((_WORD *)v6 + 523) = a3;
  *((_DWORD *)v6 + 262) = 335943944;
  *((_WORD *)v6 + 518) = a2;
  *((_WORD *)v6 + 519) = a3;
  *((_DWORD *)v6 + 260) = 536870913;
  *((void *)v6 + 132) = 0;
  gfxUpdateTextureForGeometryChange();
  gfxUpdatePluginTextureLevelGeometry();
  *((_DWORD *)v6 + 230) = -2127593169;
  *((_WORD *)v6 + 462) = -32465;
  *((_DWORD *)v6 + 228) = 637543936;
  v6[557] = 1;
  return v6;
}

uint64_t gleResizeAccumTexture(uint64_t a1, uint64_t a2, __int16 a3, __int16 a4)
{
  *(_DWORD *)(a2 + 1032) = 0;
  *(_WORD *)(a2 + 1044) = a3;
  *(_WORD *)(a2 + 1046) = a4;
  *(_WORD *)(a2 + 1036) = a3;
  *(_WORD *)(a2 + 1038) = a4;
  *(_DWORD *)(a2 + 1040) = 536870913;
  *(void *)(a2 + 1056) = 0;
  gfxUpdateTextureForGeometryChange();
  return gfxUpdatePluginTextureLevelGeometry();
}

double gleInitBitmapObject(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 28784) = 0u;
  return result;
}

void gleReclaimBitmapResources(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 28784);
  if (v2)
  {
    gleDestroyStateProgram(a1, v2);
    *(void *)(a1 + 28784) = 0;
  }
  uint64_t v3 = *(void **)(a1 + 28792);
  if (v3)
  {
    if (*(unsigned char *)(a1 + 32496))
    {
      unint64_t v4 = 0;
      uint64_t v5 = (void *)(a1 + 32512);
      do
      {
        (*(void (**)(void, void))(v5[206] + 1392))(*v5, v3[v4++]);
        v5 += 209;
      }
      while (v4 < *(unsigned __int8 *)(a1 + 32496));
    }
    gfxDestroyPluginTexture();
    gfxFreeTextureLevel();
    free(v3);
    *(void *)(a1 + 28792) = 0;
  }
}

__n128 gleCreateVBOClientState(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = malloc_type_malloc(0x48uLL, 0x577B5147uLL);
  if (!v5) {
    abort();
  }
  *a2 = v5;
  v5[8] = a3;
  *(void *)(a3 + 8) = *a2;
  uint64_t v6 = *a2;
  *(unsigned char *)(v6 + 56) = *(unsigned char *)(a3 + 292);
  *(_WORD *)(v6 + 57) = *(_WORD *)(v6 + 57) & 0xFFF7 | (8 * (*(unsigned char *)(a3 + 299) & 1));
  __n128 result = *(__n128 *)(a3 + 136);
  long long v8 = *(_OWORD *)(a3 + 152);
  long long v9 = *(_OWORD *)(a3 + 168);
  *(void *)(v6 + 48) = *(void *)(a3 + 184);
  *(_OWORD *)(v6 + 16) = v8;
  *(_OWORD *)(v6 + 32) = v9;
  *(__n128 *)uint64_t v6 = result;
  return result;
}

uint64_t gleUpdateCtxDirtyStateForBufStampChange(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = result + 28652;
  unint64_t v3 = *(void *)(result + 24896);
  if (v3)
  {
    uint64_t v4 = 0;
    while ((v3 & 1) == 0
         || *(_DWORD *)(*(void *)(*(void *)(result + 24888) + v4) + 200) - *(_DWORD *)(result + 29820) <= 0)
    {
      v4 += 8;
      BOOL v5 = v3 >= 2;
      v3 >>= 1;
      if (!v5) {
        goto LABEL_8;
      }
    }
    *(_DWORD *)(result + 1532) |= 0x20000000u;
    *(_DWORD *)uint64_t v2 = 0;
    *(_DWORD *)(result + 1548) |= 0x200u;
  }
LABEL_8:
  uint64_t v6 = *(void *)(result + 26432);
  unsigned int v7 = *(_DWORD *)(v6 + 168);
  if (v7)
  {
    uint64_t v8 = v6 + 128;
    while ((v7 & 1) == 0 || *(_DWORD *)(*(void *)v8 + 200) - *(_DWORD *)(result + 29820) <= 0)
    {
      v8 += 8;
      BOOL v5 = v7 >= 2;
      v7 >>= 1;
      if (!v5) {
        goto LABEL_15;
      }
    }
    *(_DWORD *)uint64_t v2 = 0;
    *(_DWORD *)(result + 1524) |= 0x40000000u;
  }
LABEL_15:
  uint64_t v9 = *(void *)(result + 24768);
  if (v9)
  {
    uint64_t v10 = *(unsigned int *)(v9 + 3748);
    if ((int)v10 >= 1)
    {
      uint64_t v11 = *(void *)(v9 + 3704);
      while (!*(void *)v11 || *(_DWORD *)(*(void *)v11 + 200) - *(_DWORD *)(result + 29820) <= 0)
      {
        v11 += 8;
        if (!--v10) {
          goto LABEL_23;
        }
      }
      *(_DWORD *)(v9 + 3696) |= 0x10u;
      *(_DWORD *)(result + 1532) |= 0x30000000u;
      *(_DWORD *)uint64_t v2 = 0;
      *(_DWORD *)(result + 1540) |= 0x10000000u;
    }
  }
LABEL_23:
  unint64_t v12 = *(void *)(result + 23776);
  if (v12)
  {
    uint64_t v13 = 0;
    do
    {
      if (v12)
      {
        uint64_t v14 = *(void *)(v1 + 20776 + 88 * v13 + 56);
        if (*(_DWORD *)(*(void *)(v14 + 568) + 200) - *(_DWORD *)(v2 + 1168) >= 1)
        {
          uint64_t v15 = *(unsigned __int8 *)(v2 + 3844);
          if (*(unsigned char *)(v2 + 3844))
          {
            uint64_t v16 = (unsigned char *)(v14 + 156);
            do
            {
              *v16 |= 8u;
              v16 += 24;
              --v15;
            }
            while (v15);
          }
          *(_DWORD *)uint64_t v2 = 0;
          *(_DWORD *)(v1 + 1548) |= 0x22000u;
          __n128 result = gleDirtyTextureObjectCurrentBindPointsNoFBO(v1, v14 + 40);
        }
      }
      ++v13;
      BOOL v17 = v12 > 1;
      v12 >>= 1;
    }
    while (v17);
  }
  return result;
}

uint64_t gleUpdateVAODirtyStateForBufStampChange(uint64_t result, uint64_t a2)
{
  for (unint64_t i = *(void *)(a2 + 872); i; i ^= v4)
  {
    unint64_t v3 = __clz(__rbit64(i));
    uint64_t v4 = 1 << v3;
    int v5 = v3 - 16;
    uint64_t v6 = a2 + 8 * (v3 - 16);
    uint64_t v7 = *(void *)(v6 + 1200);
    if (*(_DWORD *)(v7 + 200) - *(_DWORD *)(a2 + 1184) >= 1)
    {
      *(void *)(a2 + 904) |= v4 | 0x10;
      *(void *)(v6 + 920) = *(void *)(v7 + 136) + *(void *)(a2 + 96 + 24 * v5);
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1532) |= 0x1000u;
    }
  }
  uint64_t v8 = *(void *)(a2 + 1192);
  if (v8)
  {
    if (*(_DWORD *)(v8 + 200) - *(_DWORD *)(a2 + 1184) >= 1)
    {
      *(void *)(a2 + 904) |= 0x14uLL;
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1532) |= 0x1000u;
    }
  }
  return result;
}

uint64_t gleDirtyBufferObjectCurrentBindPoints(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (_DWORD *)(a1 + 28652);
  uint64_t v4 = *(int **)(a1 + 19296);
  int v5 = *v4 + 1;
  *uint64_t v4 = v5;
  *(_DWORD *)(a2 + 160) = v5;
  uint64_t v6 = *(void *)(a1 + 26384);
  if (v6)
  {
    if (*(_DWORD *)(v6 + 1224) != *(_DWORD *)(a1 + 29820))
    {
      *unint64_t v3 = 0;
      *(_DWORD *)(a1 + 1532) |= 0x1000u;
    }
    gleUpdateVAODirtyStateForBufStampChange(a1, v6 + 40);
    *(_DWORD *)(v6 + 1224) = **(_DWORD **)(a1 + 19296);
  }
  uint64_t result = gleUpdateCtxDirtyStateForBufStampChange(a1);
  v3[292] = **(_DWORD **)(a1 + 19296);
  return result;
}

uint64_t gleUnbindBufferObject(uint64_t result, uint64_t a2)
{
  uint64_t v2 = (unsigned __int8 *)(result + 32496);
  if (*(unsigned char *)(result + 32496))
  {
    unint64_t v3 = 0;
    uint64_t v4 = a2 + 40;
    int v5 = (void *)(result + 32512);
    do
    {
      uint64_t result = (*(uint64_t (**)(void, void))(v5[206] + 1504))(*v5, *(void *)(v4 + 8 * v3++));
      v5 += 209;
    }
    while (v3 < *v2);
  }
  return result;
}

void gleUnbindAndFreeBufferObject(uint64_t a1, void *a2)
{
  uint64_t v4 = (unsigned __int8 *)(a1 + 32496);
  if (*(unsigned char *)(a1 + 32496))
  {
    unint64_t v5 = 0;
    uint64_t v6 = (void *)(a1 + 32512);
    do
    {
      (*(void (**)(void, void))(v6[206] + 1504))(*v6, a2[v5++ + 5]);
      v6 += 209;
    }
    while (v5 < *v4);
  }
  uint64_t v7 = *(void *)(a1 + 19296);

  gleFreeBufferObject(v7, a2);
}

void gleFreeBufferObject(uint64_t a1, void *a2)
{
  unint64_t v3 = (void *)a2[4];
  if (v3)
  {
    free(v3);
    a2[4] = 0;
  }
  gfxDestroyPluginBuffer();
  if (a2[17]) {
    gfxFreeBufferObjectStorage();
  }
  uint64_t v4 = (void *)a2[1];
  if (v4) {
    free(v4);
  }

  free(a2);
}

void gleBindBufferObject(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v5 = a1 + 28652;
  if (a3)
  {
    uint64_t v7 = *(void *)(a1 + 19296) + 264;
    Bufferuint64_t Object = (uint64_t)gleLookupHashObject(v7, a3);
    if (!BufferObject)
    {
      Bufferuint64_t Object = gleCreateBufferObject(a1, a3);
      gfxCreatePluginBuffer();
      gleAddHashNameAndObject(a1, v7, BufferObject);
    }
    ++*(_DWORD *)(BufferObject + 20);
  }
  else
  {
    Bufferuint64_t Object = 0;
  }
  if (a2 > 35881)
  {
    if (a2 <= 36333)
    {
      if (a2 == 35882)
      {
        uint64_t v9 = *(void *)(a1 + 19360);
        *(void *)(a1 + 19360) = BufferObject;
        int v10 = 64;
        goto LABEL_40;
      }
      if (a2 == 35982)
      {
        uint64_t v9 = *(void *)(a1 + 19352);
        *(void *)(a1 + 19352) = BufferObject;
        int v10 = 16;
        goto LABEL_40;
      }
      goto LABEL_33;
    }
    if (a2 != 36334)
    {
      if (a2 == 36662)
      {
        uint64_t v9 = *(void *)(a1 + 19368);
        *(void *)(a1 + 19368) = BufferObject;
        int v10 = 128;
        goto LABEL_40;
      }
      if (a2 == 36663)
      {
        uint64_t v9 = *(void *)(a1 + 19376);
        *(void *)(a1 + 19376) = BufferObject;
        int v10 = 256;
        goto LABEL_40;
      }
      goto LABEL_33;
    }
LABEL_21:
    uint64_t v9 = *(void *)(a1 + 19344);
    *(void *)(a1 + 19344) = BufferObject;
    int v10 = 32;
    goto LABEL_40;
  }
  if (a2 > 35051)
  {
    if (a2 == 35052)
    {
      uint64_t v9 = *(void *)(a1 + 19336);
      *(void *)(a1 + 19336) = BufferObject;
      int v10 = 8;
      goto LABEL_40;
    }
    if (a2 != 35345) {
      goto LABEL_33;
    }
    goto LABEL_21;
  }
  if (a2 != 34963)
  {
    if (a2 == 35051)
    {
      uint64_t v9 = *(void *)(a1 + 19328);
      *(void *)(a1 + 19328) = BufferObject;
      int v10 = 4;
      goto LABEL_40;
    }
LABEL_33:
    uint64_t v9 = *(void *)(a1 + 19312);
    *(void *)(a1 + 19312) = BufferObject;
    int v10 = 1;
    goto LABEL_40;
  }
  uint64_t v11 = *(void *)(a1 + 26384);
  uint64_t v12 = v11 + 40;
  if (v11)
  {
    uint64_t v9 = *(void *)(v11 + 1232);
    if (v9 == BufferObject)
    {
      int v10 = 2;
      uint64_t v9 = BufferObject;
      goto LABEL_40;
    }
    *(void *)(v11 + 1232) = BufferObject;
    uint64_t v13 = *(unsigned __int8 *)(v5 + 3844);
    if (BufferObject)
    {
      if (*(unsigned char *)(v5 + 3844))
      {
        uint64_t v14 = (uint64_t *)(BufferObject + 40);
        uint64_t v15 = (void *)(v12 + 1712);
        do
        {
          uint64_t v16 = *v14++;
          *uint64_t v15 = v16;
          v15 += 35;
          --v13;
        }
        while (v13);
      }
    }
    else if (*(unsigned char *)(v5 + 3844))
    {
      BOOL v17 = (void *)(v12 + 1712);
      do
      {
        *BOOL v17 = 0;
        v17 += 35;
        --v13;
      }
      while (v13);
    }
    *(void *)(v12 + 904) |= 0x14uLL;
    *(_DWORD *)uint64_t v5 = 0;
    *(_DWORD *)(a1 + 1532) |= 0x1000u;
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 19320);
    *(void *)(a1 + 19320) = BufferObject;
  }
  int v10 = 2;
LABEL_40:
  if (!*(void *)(a1 + 27648)) {
    goto LABEL_74;
  }
  if (BufferObject) {
    uint64_t v18 = *(void *)(BufferObject + 8);
  }
  else {
    uint64_t v18 = 0;
  }
  if (a2 <= 35881)
  {
    if (a2 > 35051)
    {
      if (a2 == 35052)
      {
        *(void *)(a1 + 26488) = v18;
        if (!BufferObject) {
          goto LABEL_79;
        }
        goto LABEL_75;
      }
      if (a2 == 35345) {
        goto LABEL_62;
      }
    }
    else
    {
      if (a2 == 34963)
      {
        uint64_t v19 = *(void **)(a1 + 26448);
        if (v19)
        {
          *uint64_t v19 = v18;
          if (!BufferObject) {
            goto LABEL_79;
          }
        }
        else
        {
          *(void *)(a1 + 26472) = v18;
          if (!BufferObject) {
            goto LABEL_79;
          }
        }
        goto LABEL_75;
      }
      if (a2 == 35051)
      {
        *(void *)(a1 + 26480) = v18;
        if (!BufferObject) {
          goto LABEL_79;
        }
        goto LABEL_75;
      }
    }
  }
  else
  {
    if (a2 > 36333)
    {
      if (a2 != 36334)
      {
        if (a2 == 36662)
        {
          *(void *)(a1 + 26520) = v18;
          if (!BufferObject) {
            goto LABEL_79;
          }
          goto LABEL_75;
        }
        if (a2 == 36663)
        {
          *(void *)(a1 + 26528) = v18;
          if (!BufferObject) {
            goto LABEL_79;
          }
          goto LABEL_75;
        }
        goto LABEL_73;
      }
LABEL_62:
      *(void *)(a1 + 26496) = v18;
      if (!BufferObject) {
        goto LABEL_79;
      }
      goto LABEL_75;
    }
    if (a2 == 35882)
    {
      *(void *)(a1 + 26512) = v18;
      if (!BufferObject) {
        goto LABEL_79;
      }
      goto LABEL_75;
    }
    if (a2 == 35982)
    {
      *(void *)(a1 + 26504) = v18;
      if (!BufferObject) {
        goto LABEL_79;
      }
      goto LABEL_75;
    }
  }
LABEL_73:
  *(void *)(a1 + 26464) = v18;
LABEL_74:
  if (!BufferObject) {
    goto LABEL_79;
  }
LABEL_75:
  if ((v10 & 0x30) != 0)
  {
    *(unsigned char *)(BufferObject + 299) = 1;
    uint64_t v20 = *(void *)(BufferObject + 8);
    if (v20) {
      *(_WORD *)(v20 + 57) |= 8u;
    }
    goto LABEL_80;
  }
LABEL_79:
  if (!BufferObject) {
    goto LABEL_90;
  }
LABEL_80:
  if ((*(_DWORD *)(*(void *)(a1 + 29504) + 8) & v10) != 0) {
    *(unsigned char *)(BufferObject + 8 * *(unsigned __int8 *)(v5 + 3848) + 308) = 2;
  }
  uint64_t v21 = *(void *)(BufferObject + 192);
  if (v21 && v21 != *(void *)(a1 + 29024))
  {
    gleSynchronizePluginBufferStorage(a1, BufferObject + 40);
    if (!v9) {
      return;
    }
    goto LABEL_91;
  }
  int v22 = *(_DWORD *)(v5 + 1168);
  uint64_t v23 = *(void *)(a1 + 26384);
  if (v22 == **(_DWORD **)(a1 + 19296))
  {
    if (v21 && v23) {
      *(unsigned char *)(v23 + 1216) = 0;
    }
LABEL_90:
    if (!v9) {
      return;
    }
    goto LABEL_91;
  }
  if (v23)
  {
    if (v21)
    {
      *(unsigned char *)(v23 + 1216) = 0;
      int v22 = *(_DWORD *)(v5 + 1168);
    }
    if (*(_DWORD *)(v23 + 1224) != v22)
    {
      *(_DWORD *)uint64_t v5 = 0;
      *(_DWORD *)(a1 + 1532) |= 0x1000u;
      int v22 = *(_DWORD *)(v23 + 1224);
    }
    if (v22 != **(_DWORD **)(a1 + 19296))
    {
      gleUpdateVAODirtyStateForBufStampChange(a1, v23 + 40);
      *(_DWORD *)(v23 + 1224) = **(_DWORD **)(a1 + 19296);
    }
  }
  gleUpdateCtxDirtyStateForBufStampChange(a1);
  *(_DWORD *)(v5 + 1168) = **(_DWORD **)(a1 + 19296);
  if (v9)
  {
LABEL_91:
    int v24 = *(_DWORD *)(v9 + 20) - 1;
    *(_DWORD *)(v9 + 20) = v24;
    if (!v24)
    {
      gleUnbindAndFreeBufferObject(a1, (void *)v9);
    }
  }
}

uint64_t gleCreateBufferObject(uint64_t a1, int a2)
{
  uint64_t v4 = (char *)malloc_type_malloc(8 * *(unsigned __int8 *)(a1 + 32496) + 304, 0x577B5147uLL);
  if (!v4) {
    abort();
  }
  uint64_t v5 = (uint64_t)v4;
  *((_DWORD *)v4 + 4) = a2;
  *(void *)(v4 + 20) = 0xA00000001;
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 4) = 0;
  *((_DWORD *)v4 + 7) = 0;
  uint64_t v6 = gfxInitializeBufferObject();
  *(unsigned char *)(v5 + 292) = 0;
  *(_WORD *)(v5 + 162) = -30535;
  if (*(void *)(a1 + 27648))
  {
    uint64_t v8 = 0;
    gleCreateVBOClientState(v6, &v8, v5);
  }
  return v5;
}

uint64_t gleSynchronizePluginBufferStorage(uint64_t result, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 124))
  {
    uint64_t v3 = result;
    uint64_t v4 = (unsigned char *)(result + 32496);
    uint64_t v5 = *(void *)(a2 + 152);
    if (v5 && *v4)
    {
      uint64_t v6 = 0;
      uint64_t v7 = (void *)(result + 32512);
      while (v7[1] != v5)
      {
        ++v6;
        v7 += 209;
        if (*v4 == v6) {
          goto LABEL_7;
        }
      }
      if (*(unsigned __int8 *)(result + 32499) == v6 || *(unsigned __int8 *)(result + 32500) == v6) {
        (*(void (**)(void, uint64_t, void, void))(v7[206] + 1328))(*v7, 3, 0, *(void *)(a2 + 8 * v6));
      }
    }
    else
    {
LABEL_7:
      LODWORD(v6) = -1;
    }
    gfxUploadPluginBufferData();
    *(void *)(a2 + 152) = 0;
    uint64_t v8 = *v4;
    if (*v4)
    {
      uint64_t v9 = v6;
      int v10 = (_DWORD *)(a2 + 264);
      do
      {
        if (v9) {
          *v10 |= 4u;
        }
        --v9;
        v10 += 2;
        --v8;
      }
      while (v8);
    }
    return gleDirtyBufferObjectCurrentBindPoints(v3, a2);
  }
  return result;
}

void gleOrphanBufferObject(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 28840);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 28840));
  gleInitOrphanHash((void *)a1);
  if (*(void *)(a2 + 96))
  {
    uint64_t v5 = *(void **)(a1 + 28880);
    if (v5)
    {
      *(void *)(a1 + 28880) = 0;
    }
    else
    {
      uint64_t v5 = malloc_type_malloc(8 * *(unsigned __int8 *)(a1 + 32496) + 56, 0x577B5147uLL);
      if (!v5) {
        abort();
      }
    }
    if (*(unsigned char *)(a1 + 32496))
    {
      unint64_t v6 = 0;
      uint64_t v7 = (char *)(v5 + 7);
      uint64_t v8 = (void *)(a1 + 32520);
      do
      {
        (*(void (**)(void, void, char *))(v8[205] + 1536))(*v8, *(void *)(a2 + 8 * v6++), v7);
        v7 += 8;
        v8 += 209;
      }
      while (v6 < *(unsigned __int8 *)(a1 + 32496));
    }
    unint64_t v9 = *(void *)(a2 + 104);
    v5[4] = *(void *)(a2 + 96);
    v5[5] = v9;
    *((_WORD *)v5 + 24) = *(_WORD *)(a2 + 120);
    *((unsigned char *)v5 + 50) = *(unsigned char *)(a2 + 126);
    *(unsigned char *)(a2 + 126) = 0;
    *(void *)(a2 + 96) = 0;
    *(void *)(a2 + 104) = 0;
    int v10 = (int64x2_t *)(*(void *)(a1 + 28944)
                      + 96
                      * (((v9 >> 12) & 0x3FF ^ (v9 >> 22))
                       - 113 * ((((v9 >> 12) & 0x3FF ^ (v9 >> 22)) * (unsigned __int128)0x243F6F0243F6F03uLL) >> 64)));
    uint64_t v11 = *(void *)(a1 + 28912);
    *(void *)(v11 + 16) = v5;
    _OWORD v5[2] = a1 + 28888;
    v5[3] = v11;
    *(void *)(a1 + 28912) = v5;
    uint64_t v12 = (void *)v10[3].i64[0];
    *uint64_t v12 = v5;
    *uint64_t v5 = (char *)v10 + 40;
    v5[1] = v12;
    v10[3].i64[0] = (uint64_t)v5;
    int64x2_t v13 = vdupq_n_s64(1uLL);
    v13.i64[0] = v9;
    *(int64x2_t *)(a1 + 28848) = vaddq_s64(*(int64x2_t *)(a1 + 28848), v13);
    *int v10 = vaddq_s64(*v10, v13);
    gleCleanupOrphans(a1);
  }

  os_unfair_lock_unlock(v4);
}

void *gleInitOrphanHash(void *result)
{
  if (!result[3618])
  {
    uint64_t v1 = result;
    uint64_t v2 = malloc_type_malloc(0x2A60uLL, 0x577B5147uLL);
    if (!v2) {
      goto LABEL_8;
    }
    uint64_t v3 = 0;
    v1[3618] = v2;
    uint64_t v4 = 113;
    do
    {
      uint64_t v5 = v1[3618] + v3;
      int64x2_t v6 = vdupq_n_s64(v5 + 40);
      *(int64x2_t *)(v5 + 56) = v6;
      *(int64x2_t *)(v5 + 40) = v6;
      *(void *)(v5 + 80) = 0;
      *(void *)(v5 + 88) = 0;
      *(void *)(v5 + 72) = 0;
      *(_OWORD *)uint64_t v5 = 0uLL;
      *(_OWORD *)(v5 + 16) = 0uLL;
      *(void *)(v5 + 32) = 0;
      v3 += 96;
      --v4;
    }
    while (v4);
    uint64_t result = malloc_type_malloc(8 * *((unsigned __int8 *)v1 + 32496) + 56, 0x577B5147uLL);
    if (!result) {
LABEL_8:
    }
      abort();
    v1[3610] = result;
  }
  return result;
}

void gleCleanupOrphans(uint64_t a1)
{
  uint64_t v1 = (unsigned int *)(a1 + 28844);
  while (*(void *)(a1 + 28848) > (uint64_t)*v1)
    gleFreeOrphan((int64x2_t *)a1, *(void **)(a1 + 28904));
}

uint64_t *gleGetFreeOrphanNode(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v8 = (os_unfair_lock_s *)(a1 + 28840);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 28840));
  gleInitOrphanHash((void *)a1);
  unint64_t v9 = (a2 + *(void *)(*(void *)(a1 + 29032) + 640) - 1) & -*(void *)(*(void *)(a1 + 29032) + 640);
  if ((uint64_t)v9 < 0x20000)
  {
    unsigned int v10 = (v9 - 1) | ((v9 - 1) >> 1) | (((v9 - 1) | ((v9 - 1) >> 1)) >> 2);
    unsigned int v11 = v10 | (v10 >> 4) | ((v10 | (v10 >> 4)) >> 8);
    unint64_t v9 = (v11 | HIWORD(v11)) + 1;
  }
  uint64_t v12 = ((v9 >> 12) & 0x3FF ^ (v9 >> 22))
      - 113 * ((((v9 >> 12) & 0x3FF ^ (v9 >> 22)) * (unsigned __int128)0x243F6F0243F6F03uLL) >> 64);
  uint64_t v13 = *(void *)(a1 + 28944);
  uint64_t v14 = v13 + 96 * v12;
  BOOL v17 = *(uint64_t **)(v14 + 40);
  uint64_t v15 = (uint64_t *)(v14 + 40);
  for (unint64_t i = v17; i != v15; unint64_t i = (uint64_t *)*i)
  {
    if (*((unsigned __int16 *)i + 24) == a3 && v9 == i[5] && *((unsigned __int8 *)i + 50) == a4)
    {
      unsigned int v18 = *(unsigned __int8 *)(a1 + 32496);
      if (!*(unsigned char *)(a1 + 32496)) {
        goto LABEL_17;
      }
      unint64_t v19 = 0;
      uint64_t v20 = (void *)(a1 + 32520);
      BOOL v21 = 1;
      do
      {
        if (i[v19 + 7])
        {
          if (v21)
          {
            BOOL v21 = (*(unsigned int (**)(void))(v20[205] + 1552))(*v20) != 0;
            unsigned int v18 = *(unsigned __int8 *)(a1 + 32496);
          }
          else
          {
            BOOL v21 = 0;
          }
        }
        ++v19;
        v20 += 209;
      }
      while (v19 < v18);
      uint64_t v13 = *(void *)(a1 + 28944);
      if (v21)
      {
LABEL_17:
        uint64_t v22 = i[3];
        *(void *)(v22 + 16) = i[2];
        *(void *)(i[2] + 24) = v22;
        i[2] = (uint64_t)i;
        i[3] = (uint64_t)i;
        uint64_t v23 = (uint64_t *)i[1];
        *uint64_t v23 = *i;
        *(void *)(*i + 8) = v23;
        *unint64_t i = (uint64_t)i;
        i[1] = (uint64_t)i;
        int64x2_t v24 = *(int64x2_t *)(a1 + 28848);
        v25.i64[1] = -1;
        v25.i64[0] = i[5];
        v26.i64[0] = -1;
        v26.i64[1] = -1;
        *(void *)&long long v27 = vsubq_s64(v24, v25).u64[0];
        *((void *)&v27 + 1) = vaddq_s64(v24, v26).i64[1];
        *(_OWORD *)(a1 + 28848) = v27;
        ++*(void *)(a1 + 28864);
        uint64_t v28 = (int64x2_t *)(v13 + 96 * v12);
        v25.i64[0] = vsubq_s64(*v28, v25).u64[0];
        v25.i64[1] = vaddq_s64(*v28, v26).i64[1];
        int64x2_t *v28 = v25;
        uint64_t v29 = v28 + 1;
        goto LABEL_19;
      }
      break;
    }
  }
  unint64_t i = 0;
  ++*(void *)(a1 + 28872);
  uint64_t v29 = (int64x2_t *)(v13 + 96 * v12 + 24);
LABEL_19:
  ++v29->i64[0];
  os_unfair_lock_unlock(v8);
  return i;
}

void gleBufferObjectAdoptOrphan(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 40);
  *(void *)(a2 + 96) = *(void *)(a3 + 32);
  *(void *)(a2 + 104) = v5;
  *(_WORD *)(a2 + 120) = *(_WORD *)(a3 + 48);
  *(unsigned char *)(a2 + 126) = *(unsigned char *)(a3 + 50);
  int64x2_t v6 = (unsigned __int8 *)(a1 + 32496);
  unsigned int v7 = *(unsigned __int8 *)(a1 + 32496);
  if (*(unsigned char *)(a1 + 32496))
  {
    uint64_t v8 = a2;
    unint64_t v9 = 0;
    unsigned int v10 = (void *)(a1 + 32520);
    do
    {
      *(_DWORD *)(v8 + 264) |= 5u;
      if (*(void *)(a3 + 56 + 8 * v9))
      {
        (*(void (**)(void, void))(v10[205] + 1544))(*v10, *(void *)v8);
        unsigned int v7 = *v6;
      }
      ++v9;
      v8 += 8;
      v10 += 209;
    }
    while (v9 < v7);
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 28840));
  if (*(void *)(a1 + 28880)) {
    free((void *)a3);
  }
  else {
    *(void *)(a1 + 28880) = a3;
  }

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 28840));
}

void gleFreeOrphan(int64x2_t *a1, void *a2)
{
  uint64_t v4 = a2[3];
  *(void *)(v4 + 16) = a2[2];
  *(void *)(a2[2] + 24) = v4;
  a2[2] = a2;
  a2[3] = a2;
  uint64_t v5 = (void *)a2[1];
  *uint64_t v5 = *a2;
  *(void *)(*a2 + 8) = v5;
  *a2 = a2;
  a2[1] = a2;
  int64x2_t v6 = a1 + 2031;
  unsigned int v7 = a1[2031].u8[0];
  if (a1[2031].i8[0])
  {
    unint64_t v8 = 0;
    unint64_t v9 = a2 + 7;
    unsigned int v10 = a1 + 2032;
    do
    {
      if (v9[v8])
      {
        (*(void (**)(uint64_t))(v10[103].i64[0] + 1560))(v10->i64[0]);
        (*(void (**)(uint64_t, void))(v10[103].i64[0] + 1568))(v10->i64[1], v9[v8]);
        unsigned int v7 = v6->u8[0];
      }
      ++v8;
      unsigned int v10 = (int64x2_t *)((char *)v10 + 1672);
    }
    while (v8 < v7);
  }
  mach_vm_deallocate(*MEMORY[0x263EF8960], a2[4], a2[5]);
  int64x2_t v11 = a1[1803];
  v12.i64[1] = -1;
  v12.i64[0] = a2[5];
  v13.i64[0] = -1;
  v13.i64[1] = -1;
  v14.i64[0] = vsubq_s64(v11, v12).u64[0];
  v14.i64[1] = vaddq_s64(v11, v13).i64[1];
  a1[1803] = v14;
  uint64_t v15 = a1[1809].i64[0];
  uint64_t v16 = 96
      * ((((unint64_t)v12.i64[0] >> 12) & 0x3FF ^ ((unint64_t)v12.i64[0] >> 22))
       - 113
       * (((((unint64_t)v12.i64[0] >> 12) & 0x3FF ^ ((unint64_t)v12.i64[0] >> 22))
         * (unsigned __int128)0x243F6F0243F6F03uLL) >> 64));
  int64x2_t v17 = *(int64x2_t *)(v15 + v16);
  v12.i64[0] = vsubq_s64(v17, v12).u64[0];
  v12.i64[1] = vaddq_s64(v17, v13).i64[1];
  *(int64x2_t *)(v15 + v16) = v12;

  free(a2);
}

uint64_t gleSynchronizeBufferOnCurrentDevices(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 124)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = (unsigned __int8 *)(a1 + 32499);
  if (*(void *)(a1 + 29024) != *(void *)(a2 + 152)) {
    uint64_t v4 = (unsigned __int8 *)(a1 + 32500);
  }
  uint64_t v2 = *v4;
  uint64_t v5 = a2 + 8 * v2;
  (*(void (**)(void, uint64_t, void, void))(*(void *)(a1 + 1672 * v2 + 34160) + 1328))(*(void *)(a1 + 1672 * v2 + 32512), 3, 0, *(void *)v5);
  gfxUploadPluginBufferData();
  *(void *)(a2 + 152) = 0;
  *(unsigned char *)(v5 + 268) = 2;
  return v2;
}

uint64_t gleSynchronizeBufferOnCurrentDevicesForRead(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (unsigned char *)(a1 + 32496);
  if (*(unsigned char *)(a2 + 124))
  {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else
  {
    uint64_t v6 = 3;
    if (*(void *)(a1 + 29024) != *(void *)(a2 + 152)) {
      uint64_t v6 = 4;
    }
    uint64_t v5 = v4[v6];
    uint64_t v7 = a2 + 8 * v5;
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(a1 + 1672 * v5 + 34160) + 1328))(*(void *)(a1 + 1672 * v5 + 32512), 3, 1, *(void *)v7);
    gfxUploadPluginBufferData();
    *(void *)(a2 + 152) = 0;
    *(unsigned char *)(v7 + 268) = 2;
  }
  uint64_t v8 = *v4;
  if (*v4)
  {
    unint64_t v9 = (_DWORD *)(a2 + 264);
    do
    {
      if (v5) {
        *v9 |= 4u;
      }
      --v5;
      v9 += 2;
      --v8;
    }
    while (v8);
  }

  return gleDirtyBufferObjectCurrentBindPoints(a1, a2);
}

uint64_t gleSynchronizeBuffersInArray(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(a2 + 1192);
  if (v4 && *(void *)(v4 + 192)) {
    uint64_t result = gleSynchronizeBufferOnCurrentDevicesForRead(result, v4 + 40);
  }
  for (unint64_t i = *(void *)(a2 + 864) & *(void *)(a2 + 872); i; i ^= 1 << v6)
  {
    unint64_t v6 = __clz(__rbit64(i));
    uint64_t v7 = *(void *)(a2 + 8 * v6 + 1072);
    if (*(void *)(v7 + 192)) {
      uint64_t result = gleSynchronizeBufferOnCurrentDevicesForRead(v3, v7 + 40);
    }
  }
  *(unsigned char *)(a2 + 1176) = 1;
  return result;
}

uint64_t gleSynchronizePluginBuffers(uint64_t result, int a2)
{
  uint64_t v2 = (void *)result;
  uint64_t v3 = a2;
  int v4 = *(_DWORD *)(*(void *)(result + 1672 * a2 + 34168) + 40);
  uint64_t v5 = *(void *)(result + 19312);
  if (v5)
  {
    uint64_t v6 = v5 + 40;
    if (*(void *)(v5 + 192)) {
      uint64_t result = gleSynchronizePluginBufferStorage(result, v6);
    }
    if (v4) {
      *(unsigned char *)(v6 + 8 * v3 + 268) = 2;
    }
  }
  uint64_t v7 = v2[2415];
  if (v7)
  {
    uint64_t v8 = v7 + 40;
    if (*(void *)(v7 + 192)) {
      uint64_t result = gleSynchronizePluginBufferStorage((uint64_t)v2, v8);
    }
    if ((v4 & 2) != 0) {
      *(unsigned char *)(v8 + 8 * v3 + 268) = 2;
    }
  }
  uint64_t v9 = v2[3298];
  if (v9)
  {
    uint64_t v10 = *(void *)(v9 + 1232);
    if (v10)
    {
      uint64_t v11 = v10 + 40;
      if (*(void *)(v10 + 192)) {
        uint64_t result = gleSynchronizePluginBufferStorage((uint64_t)v2, v11);
      }
      if ((v4 & 2) != 0) {
        *(unsigned char *)(v11 + 8 * v3 + 268) = 2;
      }
    }
    uint64_t v12 = 0;
    uint64_t v13 = v9 + 1240;
    do
    {
      uint64_t v14 = *(void *)(v13 + v12);
      if (v14)
      {
        uint64_t v15 = v14 + 40;
        if (*(void *)(v14 + 192)) {
          uint64_t result = gleSynchronizePluginBufferStorage((uint64_t)v2, v15);
        }
        if (v4) {
          *(unsigned char *)(v15 + 8 * v3 + 268) = 2;
        }
      }
      v12 += 8;
    }
    while (v12 != 256);
  }
  uint64_t v16 = v2[2416];
  if (v16)
  {
    uint64_t v17 = v16 + 40;
    if (*(void *)(v16 + 192)) {
      uint64_t result = gleSynchronizePluginBufferStorage((uint64_t)v2, v17);
    }
    if ((v4 & 4) != 0) {
      *(unsigned char *)(v17 + 8 * v3 + 268) = 2;
    }
  }
  uint64_t v18 = v2[2417];
  if (v18)
  {
    uint64_t v19 = v18 + 40;
    if (*(void *)(v18 + 192)) {
      uint64_t result = gleSynchronizePluginBufferStorage((uint64_t)v2, v19);
    }
    if ((v4 & 8) != 0) {
      *(unsigned char *)(v19 + 8 * v3 + 268) = 2;
    }
  }
  uint64_t v20 = v2[2419];
  if (v20)
  {
    uint64_t v21 = v20 + 40;
    if (*(void *)(v20 + 192)) {
      uint64_t result = gleSynchronizePluginBufferStorage((uint64_t)v2, v21);
    }
    if ((v4 & 0x10) != 0) {
      *(unsigned char *)(v21 + 8 * v3 + 268) = 2;
    }
  }
  uint64_t v22 = *(unsigned int *)(v2[3304] + 168);
  if (v22)
  {
    unint64_t v23 = 0;
    do
    {
      uint64_t v24 = *(void *)(v2[3304] + 8 * v23 + 128);
      if (v24)
      {
        uint64_t v25 = v24 + 40;
        if (*(void *)(v24 + 192)) {
          uint64_t result = gleSynchronizePluginBufferStorage((uint64_t)v2, v25);
        }
        if ((v4 & 0x10) != 0) {
          *(unsigned char *)(v25 + 8 * v3 + 268) = 2;
        }
      }
      v22 &= ~(1 << v23);
      if (!v22) {
        break;
      }
    }
    while (v23++ < 4);
  }
  uint64_t v27 = v2[2418];
  if (v27)
  {
    uint64_t v28 = v27 + 40;
    if (*(void *)(v27 + 192)) {
      uint64_t result = gleSynchronizePluginBufferStorage((uint64_t)v2, v28);
    }
    if ((v4 & 0x20) != 0) {
      *(unsigned char *)(v28 + 8 * v3 + 268) = 2;
    }
  }
  uint64_t v29 = v2[3096];
  if (v29 && *(_DWORD *)(v29 + 3748))
  {
    unint64_t v30 = 0;
    do
    {
      uint64_t v31 = *(void *)(*(void *)(v29 + 3704) + 8 * v30);
      if (v31)
      {
        uint64_t v32 = v31 + 40;
        if (*(void *)(v31 + 192)) {
          uint64_t result = gleSynchronizePluginBufferStorage((uint64_t)v2, v32);
        }
        if ((v4 & 0x20) != 0) {
          *(unsigned char *)(v32 + 8 * v3 + 268) = 2;
        }
      }
      ++v30;
    }
    while (v30 < *(unsigned int *)(v29 + 3748));
  }
  unint64_t v33 = v2[3112];
  if (v33)
  {
    uint64_t v34 = 0;
    do
    {
      uint64_t v35 = *(void *)(v2[3111] + v34);
      if (v35)
      {
        uint64_t v36 = v35 + 40;
        if (*(void *)(v35 + 192)) {
          uint64_t result = gleSynchronizePluginBufferStorage((uint64_t)v2, v36);
        }
        if ((v4 & 0x20) != 0) {
          *(unsigned char *)(v36 + 8 * v3 + 268) = 2;
        }
      }
      v34 += 8;
      BOOL v37 = v33 > 1;
      v33 >>= 1;
    }
    while (v37);
  }
  uint64_t v38 = v2[2420];
  if (v38)
  {
    uint64_t v39 = v38 + 40;
    if (*(void *)(v38 + 192)) {
      uint64_t result = gleSynchronizePluginBufferStorage((uint64_t)v2, v39);
    }
    if ((v4 & 0x40) != 0) {
      *(unsigned char *)(v39 + 8 * v3 + 268) = 2;
    }
  }
  if (v2[2972])
  {
    uint64_t v40 = 0;
    unsigned __int8 v41 = v2 + 4062;
    do
    {
      uint64_t v42 = v2[11 * v40 + 2604];
      if (v42)
      {
        uint64_t v43 = *(void *)(v42 + 568);
        if (v43)
        {
          uint64_t v44 = v43 + 40;
          if (*(void *)(v43 + 192))
          {
            uint64_t result = gleSynchronizePluginBufferStorage((uint64_t)v2, v44);
            if (*v41)
            {
              unint64_t v45 = 0;
              unint64_t v46 = (unsigned char *)(v42 + 156);
              do
              {
                *v46 |= 8u;
                v46 += 24;
                ++v45;
              }
              while (v45 < *v41);
            }
          }
          if ((v4 & 0x40) != 0) {
            *(unsigned char *)(v44 + 8 * v3 + 268) = 2;
          }
        }
      }
      ++v40;
    }
    while (v40 != 32);
  }
  uint64_t v47 = v2[2421];
  if (v47)
  {
    uint64_t v48 = v47 + 40;
    if (*(void *)(v47 + 192)) {
      uint64_t result = gleSynchronizePluginBufferStorage((uint64_t)v2, v48);
    }
    if ((v4 & 0x80) != 0) {
      *(unsigned char *)(v48 + 8 * v3 + 268) = 2;
    }
  }
  uint64_t v49 = v2[2422];
  if (v49)
  {
    uint64_t v50 = v49 + 40;
    if (*(void *)(v49 + 192)) {
      uint64_t result = gleSynchronizePluginBufferStorage((uint64_t)v2, v50);
    }
    if ((v4 & 0x100) != 0) {
      *(unsigned char *)(v50 + 8 * v3 + 268) = 2;
    }
  }
  return result;
}

uint64_t gleReclaimBufferObjectResources(uint64_t result)
{
  uint64_t v1 = result;
  unsigned int v2 = 0;
  uint64_t v3 = *(void *)(result + 19296);
  uint64_t v11 = *(void *)(v3 + 272);
  unsigned int v4 = *(_DWORD *)(v3 + 288);
  uint64_t v5 = (unsigned char *)(result + 32496);
  uint64_t v6 = (void *)(result + 32512);
  do
  {
    for (unint64_t i = *(uint64_t **)(v11 + 8 * v2); i; unint64_t i = (uint64_t *)*i)
    {
      if (*((_DWORD *)i + 5) == 1)
      {
        if (i[24]) {
          uint64_t result = gleSynchronizePluginBufferStorage(v1, (uint64_t)(i + 5));
        }
        if (*v5)
        {
          unint64_t v8 = 0;
          uint64_t v9 = v6;
          uint64_t v10 = i;
          do
          {
            (*(void (**)(void, uint64_t))(v9[206] + 1504))(*v9, v10[5]);
            uint64_t result = (*(uint64_t (**)(void, uint64_t))(v9[206] + 1512))(v9[1], v10[5]);
            *((_DWORD *)v10 + 76) |= 5u;
            ++v8;
            ++v10;
            v9 += 209;
          }
          while (v8 < *v5);
        }
      }
    }
    ++v2;
  }
  while (v2 <= v4);
  *(void *)(*(void *)(v1 + 26384) + 944) |= 0x10uLL;
  return result;
}

uint64_t gleOffsetLimitStorage3D(int *a1, int a2, int a3, int a4, unint64_t a5, uint64_t a6)
{
  return OffsetLimitStorage3D(a1, a2, a3, a4, a5, a6, a1[6]);
}

uint64_t OffsetLimitStorage3D(int *a1, int a2, int a3, int a4, unint64_t a5, uint64_t a6, int a7)
{
  int v7 = a1[7];
  int v9 = a1[4];
  int v8 = a1[5];
  int v10 = a1[1];
  int v12 = a1[2];
  int v11 = a1[3];
  if (v12 | *a1 | v8 | v9 | v10 | v11)
  {
    int v13 = ((a5 >> 37) & 3) + 1 + (((a5 >> 37) & 3) + 1) * (BYTE4(a5) & 0x1F);
    if (v10)
    {
      uint64_t v14 = (a5 >> 39) & 0xF;
      int v15 = v14 + 1;
    }
    else
    {
      if (*a1 <= 0) {
        int v19 = a2;
      }
      else {
        int v19 = *a1;
      }
      uint64_t v20 = (a5 >> 39) & 0xF;
      int v15 = v20 + 1;
      int v21 = (v19 + (int)v20) / ((int)v20 + 1) * v13;
      int v22 = v7 - 1;
      int v23 = v7 - (v21 & (v7 - 1));
      if ((v21 & v22) == 0) {
        int v23 = 0;
      }
      int v10 = v23 + v21;
      uint64_t v14 = (a5 >> 39) & 0xF;
    }
    if (v12 <= 0) {
      int v12 = a3;
    }
    int v24 = v10 * v12;
    if (!v11) {
      int v11 = v24;
    }
    return a6 + v10 * (a3 + v9 - 1) + ((int)v14 + a2 + v8) / v15 * v13 + v11 * (a4 + a7 - 1);
  }
  else
  {
    int v16 = (((a5 >> 37) & 3) + 1 + (((a5 >> 37) & 3) + 1) * (BYTE4(a5) & 0x1F))
        * ((int)(((a5 >> 39) & 0xF) + a2)
         / (int)(((a5 >> 39) & 0xF) + 1));
    if ((v16 & (v7 - 1)) != 0) {
      int v17 = v7 - (v16 & (v7 - 1));
    }
    else {
      int v17 = 0;
    }
    return a6 + a4 * a3 * (v17 + v16);
  }
}

uint64_t gleOffsetLimitStorage(int *a1, int a2, int a3, unint64_t a4, uint64_t a5)
{
  return OffsetLimitStorage3D(a1, a2, a3, 1, a4, a5, 0);
}

uint64_t gleHandleUnpackBufferInEngineNoSync(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(void *)(a2 + 152) < a3 || a5 % a4 || *(unsigned char *)(a2 + 292))
  {
    uint64_t v6 = (_WORD *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return 0;
    }
    uint64_t result = 0;
    _WORD *v6 = 1282;
  }
  else
  {
    if (*(unsigned char *)(a2 + 164)) {
      return 0;
    }
    return *(void *)(a2 + 136) + a5;
  }
  return result;
}

uint64_t gleHandlePackBufferInEngine(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a1 + 29832;
  if (*(void *)(a2 + 152) < a3 || a5 % a4 || *(unsigned char *)(a2 + 292))
  {
    if (!*(_WORD *)v5)
    {
      uint64_t v8 = 0;
      *(_WORD *)uint64_t v5 = 1282;
      return v8;
    }
    return 0;
  }
  if (*(unsigned char *)(a2 + 164)) {
    return 0;
  }
  uint64_t v10 = *(void *)(a2 + 136);
  if (*(void *)(a2 + 192))
  {
    gleSynchronizeBufferOnCurrentDevices(a1, a2 + 40);
  }
  else if (*(unsigned char *)(a2 + 165))
  {
    (*(void (**)(void, uint64_t, void, void))(*(void *)(a1 + 29448) + 272))(*(void *)(a1 + 29016), 3, 0, *(void *)(a2 + 40 + 8 * *(unsigned __int8 *)(a1 + 32499)));
    gfxWaitBufferOnDevices();
  }
  uint64_t v8 = v10 + a5;
  *(unsigned char *)(a2 + 167) = 1;
  uint64_t v11 = *(unsigned __int8 *)(v5 + 2664);
  if (*(unsigned char *)(v5 + 2664))
  {
    int v12 = (_DWORD *)(a2 + 304);
    do
    {
      *v12 |= 4u;
      v12 += 2;
      --v11;
    }
    while (v11);
  }
  gleDirtyBufferObjectCurrentBindPoints(a1, a2 + 40);
  return v8;
}

uint64_t gleHandlePackBufferInEngineNoClientState(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a1 + 29832;
  if (*(void *)(a2 + 152) < a3 || a5 % a4 || *(unsigned char *)(a2 + 292))
  {
    if (!*(_WORD *)v5)
    {
      uint64_t v8 = 0;
      *(_WORD *)uint64_t v5 = 1282;
      return v8;
    }
    return 0;
  }
  if (*(unsigned char *)(a2 + 164)) {
    return 0;
  }
  uint64_t v10 = *(void *)(a2 + 136);
  if (*(void *)(a2 + 192))
  {
    gleSynchronizeBufferOnCurrentDevices(a1, a2 + 40);
  }
  else if (*(unsigned char *)(a2 + 165))
  {
    (*(void (**)(void, uint64_t, void, void))(*(void *)(a1 + 29448) + 272))(*(void *)(a1 + 29016), 3, 0, *(void *)(a2 + 40 + 8 * *(unsigned __int8 *)(a1 + 32499)));
    gfxWaitBufferOnDevices();
  }
  uint64_t v8 = v10 + a5;
  *(unsigned char *)(a2 + 167) = 1;
  uint64_t v11 = *(unsigned __int8 *)(v5 + 2664);
  if (*(unsigned char *)(v5 + 2664))
  {
    int v12 = (_DWORD *)(a2 + 304);
    do
    {
      *v12 |= 4u;
      v12 += 2;
      --v11;
    }
    while (v11);
  }
  gleDirtyBufferObjectCurrentBindPoints(a1, a2 + 40);
  return v8;
}

void *gleBindBufferObject_Thread(void *a1, int a2, unsigned int a3)
{
  if (a3)
  {
    uint64_t v6 = (os_unfair_lock_s *)a1[2412];
    uint64_t v7 = (uint64_t)&v6[66];
    uint64_t v8 = v6 + 81;
    os_unfair_lock_lock(v6 + 81);
    int v9 = gleLookupHashObject(v7, a3);
    if (v9)
    {
      Bufferuint64_t Object = (uint64_t)v9;
      os_unfair_lock_unlock(v8);
    }
    else
    {
      Bufferuint64_t Object = gleCreateBufferObject((uint64_t)a1, a3);
      gleAddHashNameAndObject((uint64_t)a1, v7, BufferObject);
      os_unfair_lock_unlock(v8);
      *gleAddCommand((uint64_t)a1, (uint64_t)gleCreatePluginBuffer_UnpackThread, 8) = BufferObject + 40;
    }
    uint64_t v11 = *(void *)(BufferObject + 8);
  }
  else
  {
    uint64_t v11 = 0;
    Bufferuint64_t Object = 0;
  }
  if (a2 > 35881)
  {
    if (a2 <= 36333)
    {
      if (a2 == 35882)
      {
        a1[3314] = v11;
        if (!v11) {
          goto LABEL_43;
        }
        goto LABEL_39;
      }
      if (a2 == 35982)
      {
        a1[3313] = v11;
        if (!v11) {
          goto LABEL_43;
        }
        goto LABEL_39;
      }
      goto LABEL_36;
    }
    if (a2 != 36334)
    {
      if (a2 == 36662)
      {
        a1[3315] = v11;
        if (!v11) {
          goto LABEL_43;
        }
        goto LABEL_39;
      }
      if (a2 == 36663)
      {
        a1[3316] = v11;
        if (!v11) {
          goto LABEL_43;
        }
        goto LABEL_39;
      }
      goto LABEL_36;
    }
LABEL_25:
    a1[3312] = v11;
    if (!v11) {
      goto LABEL_43;
    }
    goto LABEL_39;
  }
  if (a2 > 35051)
  {
    if (a2 == 35052)
    {
      a1[3311] = v11;
      if (!v11) {
        goto LABEL_43;
      }
      goto LABEL_39;
    }
    if (a2 != 35345) {
      goto LABEL_36;
    }
    goto LABEL_25;
  }
  if (a2 != 34963)
  {
    if (a2 == 35051)
    {
      a1[3310] = v11;
      if (!v11) {
        goto LABEL_43;
      }
      goto LABEL_39;
    }
LABEL_36:
    a1[3308] = v11;
    if (!v11) {
      goto LABEL_43;
    }
    goto LABEL_39;
  }
  int v12 = (void *)a1[3306];
  if (v12)
  {
    *int v12 = v11;
    if (!v11) {
      goto LABEL_43;
    }
  }
  else
  {
    a1[3309] = v11;
    if (!v11) {
      goto LABEL_43;
    }
  }
LABEL_39:
  if (a2 == 35345 || a2 == 36334 || a2 == 35982) {
    *(_WORD *)(v11 + 57) |= 8u;
  }
LABEL_43:
  uint64_t result = gleAddCommand((uint64_t)a1, (uint64_t)gleBindBufferObject_UnpackThread, 16);
  *(_DWORD *)uint64_t result = a2;
  result[1] = BufferObject;
  return result;
}

uint64_t gleCreatePluginBuffer_UnpackThread()
{
  return 8;
}

uint64_t gleBindBufferObject_UnpackThread(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 28652;
  int v4 = *(_DWORD *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  if (*(int *)a2 <= 35881)
  {
    if (v4 > 35051)
    {
      if (v4 == 35052)
      {
        uint64_t v6 = *(void *)(a1 + 19336);
        *(void *)(a1 + 19336) = v5;
        int v7 = 8;
        goto LABEL_37;
      }
      if (v4 != 35345) {
        goto LABEL_30;
      }
      goto LABEL_17;
    }
    if (v4 != 34963)
    {
      if (v4 == 35051)
      {
        uint64_t v6 = *(void *)(a1 + 19328);
        *(void *)(a1 + 19328) = v5;
        int v7 = 4;
        goto LABEL_37;
      }
LABEL_30:
      uint64_t v6 = *(void *)(a1 + 19312);
      *(void *)(a1 + 19312) = v5;
      int v7 = 1;
      goto LABEL_37;
    }
    uint64_t v9 = *(void *)(a1 + 26384);
    uint64_t v10 = v9 + 40;
    if (v9)
    {
      uint64_t v6 = *(void *)(v9 + 1232);
      if (v6 == v5)
      {
        int v7 = 2;
        uint64_t v6 = *(void *)(a2 + 8);
        goto LABEL_37;
      }
      *(void *)(v9 + 1232) = v5;
      uint64_t v11 = *(unsigned __int8 *)(a1 + 32496);
      if (v5)
      {
        if (*(unsigned char *)(a1 + 32496))
        {
          int v12 = (uint64_t *)(v5 + 40);
          int v13 = (void *)(v10 + 1712);
          do
          {
            uint64_t v14 = *v12++;
            *int v13 = v14;
            v13 += 35;
            --v11;
          }
          while (v11);
        }
      }
      else if (*(unsigned char *)(a1 + 32496))
      {
        int v15 = (void *)(v10 + 1712);
        do
        {
          *int v15 = 0;
          v15 += 35;
          --v11;
        }
        while (v11);
      }
      *(void *)(v10 + 904) |= 0x14uLL;
      *(_DWORD *)uint64_t v3 = 0;
      *(_DWORD *)(a1 + 1532) |= 0x1000u;
    }
    else
    {
      uint64_t v6 = *(void *)(a1 + 19320);
      *(void *)(a1 + 19320) = v5;
    }
    int v7 = 2;
LABEL_37:
    uint64_t v8 = (os_unfair_lock_s **)(a1 + 19296);
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    if (!v5) {
      goto LABEL_52;
    }
    goto LABEL_38;
  }
  if (v4 > 36333)
  {
    if (v4 != 36334)
    {
      if (v4 == 36662)
      {
        uint64_t v6 = *(void *)(a1 + 19368);
        *(void *)(a1 + 19368) = v5;
        int v7 = 128;
        goto LABEL_37;
      }
      if (v4 == 36663)
      {
        uint64_t v6 = *(void *)(a1 + 19376);
        *(void *)(a1 + 19376) = v5;
        int v7 = 256;
        goto LABEL_37;
      }
      goto LABEL_30;
    }
LABEL_17:
    uint64_t v6 = *(void *)(a1 + 19344);
    *(void *)(a1 + 19344) = v5;
    int v7 = 32;
    if (v5) {
      goto LABEL_18;
    }
LABEL_14:
    uint64_t v8 = (os_unfair_lock_s **)(a1 + 19296);
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    goto LABEL_52;
  }
  if (v4 == 35882)
  {
    uint64_t v6 = *(void *)(a1 + 19360);
    *(void *)(a1 + 19360) = v5;
    int v7 = 64;
    goto LABEL_37;
  }
  if (v4 != 35982) {
    goto LABEL_30;
  }
  uint64_t v6 = *(void *)(a1 + 19352);
  *(void *)(a1 + 19352) = v5;
  int v7 = 16;
  if (!v5) {
    goto LABEL_14;
  }
LABEL_18:
  *(unsigned char *)(v5 + 299) = 1;
  uint64_t v8 = (os_unfair_lock_s **)(a1 + 19296);
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
LABEL_38:
  if ((*(_DWORD *)(*(void *)(a1 + 29504) + 8) & v7) != 0) {
    *(unsigned char *)(v5 + 8 * *(unsigned __int8 *)(v3 + 3848) + 308) = 2;
  }
  ++*(_DWORD *)(v5 + 20);
  uint64_t v16 = *(void *)(v5 + 192);
  if (!v16 || v16 == *(void *)(a1 + 29024))
  {
    int v17 = *(_DWORD *)(v3 + 1168);
    if (v17 != **(_DWORD **)(a1 + 19296))
    {
      uint64_t v18 = *(void *)(a1 + 26384);
      if (v18)
      {
        if (v16)
        {
          *(unsigned char *)(v18 + 1216) = 0;
          int v17 = *(_DWORD *)(v3 + 1168);
        }
        if (*(_DWORD *)(v18 + 1224) != v17)
        {
          *(_DWORD *)uint64_t v3 = 0;
          *(_DWORD *)(a1 + 1532) |= 0x1000u;
          int v17 = *(_DWORD *)(v18 + 1224);
        }
        if (v17 != (*v8)->_os_unfair_lock_opaque)
        {
          gleUpdateVAODirtyStateForBufStampChange(a1, v18 + 40);
          *(_DWORD *)(v18 + 1224) = **(_DWORD **)(a1 + 19296);
        }
      }
      gleUpdateCtxDirtyStateForBufStampChange(a1);
      *(_DWORD *)(v3 + 1168) = **(_DWORD **)(a1 + 19296);
    }
  }
  else
  {
    gleSynchronizePluginBufferStorage(a1, v5 + 40);
  }
LABEL_52:
  if (v6)
  {
    int v19 = *(_DWORD *)(v6 + 20) - 1;
    *(_DWORD *)(v6 + 20) = v19;
    if (!v19) {
      gleUnbindAndFreeBufferObject(a1, (void *)v6);
    }
  }
  os_unfair_lock_unlock(*v8 + 81);
  return 16;
}

uint64_t gleTransferBufferBindingToGLD(uint64_t result, unint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  if (result)
  {
    unint64_t v7 = *(void *)(result + 152);
    if (v7 >= a2) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = *(void *)(result + 152);
    }
    uint64_t v9 = v8 & -a6;
    if (a3) {
      uint64_t v10 = a3;
    }
    else {
      uint64_t v10 = *(void *)(result + 152);
    }
    unint64_t v11 = v9 + v10;
    if (v11 < v7) {
      unint64_t v7 = v11;
    }
    uint64_t v12 = (v7 - v9) & -a7;
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v12 = 0;
  }
  *a4 = v9;
  *a5 = v12;
  return result;
}

_DWORD *gleInitCommandBuffer(uint64_t a1)
{
  uint64_t result = malloc_type_malloc(a1 + 24, 0x577B5147uLL);
  if (!result) {
    abort();
  }
  result[4] = 0;
  *(void *)uint64_t result = result + 6;
  *((void *)result + 1) = (char *)result + a1 + 24;
  return result;
}

void *gleAddCommand(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 27336);
  unint64_t v7 = *(void **)v6;
  if (*(void *)(v6 + 8) - *(void *)v6 < (unint64_t)(a3 + 16))
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(a1 + 27344))(a1);
    unint64_t v7 = *(void **)v6;
  }
  *unint64_t v7 = a2;
  v7[1] = a3;
  *(void *)uint64_t v6 = (char *)v7 + a3 + 16;
  ++*(_DWORD *)(v6 + 16);
  return v7 + 2;
}

uint64_t (*gleGet_gleFlushCommandBuffer())()
{
  return gleFlushCommandBuffer;
}

uint64_t (*gleGet_gleFinishCommandBuffer())()
{
  return gleFinishCommandBuffer;
}

void gleCreateClientThreadState(uint64_t a1)
{
  unsigned int v2 = *(os_unfair_lock_s **)(a1 + 19296);
  os_unfair_lock_lock(v2 + 81);
  ++v2[76]._os_unfair_lock_opaque;
  gleIterateHashMachineObjects((uint64_t)&v2[66], a1, (uint64_t (*)(uint64_t, void *))gleCreateVBOClientStateForHash);
  uint64_t v3 = *(void *)(a1 + 19312);
  if (v3) {
    uint64_t v3 = *(void *)(v3 + 8);
  }
  *(void *)(a1 + 26464) = v3;
  uint64_t v4 = *(void *)(a1 + 19320);
  if (v4) {
    uint64_t v4 = *(void *)(v4 + 8);
  }
  *(void *)(a1 + 26472) = v4;
  uint64_t v5 = *(void *)(a1 + 19328);
  if (v5) {
    uint64_t v5 = *(void *)(v5 + 8);
  }
  *(void *)(a1 + 26480) = v5;
  uint64_t v6 = *(void *)(a1 + 19336);
  if (v6) {
    uint64_t v6 = *(void *)(v6 + 8);
  }
  *(void *)(a1 + 26488) = v6;
  uint64_t v7 = *(void *)(a1 + 19352);
  if (v7) {
    uint64_t v7 = *(void *)(v7 + 8);
  }
  *(void *)(a1 + 26504) = v7;
  uint64_t v8 = *(void *)(a1 + 19344);
  if (v8) {
    uint64_t v8 = *(void *)(v8 + 8);
  }
  *(void *)(a1 + 26496) = v8;
  uint64_t v9 = *(void *)(a1 + 19360);
  if (v9) {
    uint64_t v9 = *(void *)(v9 + 8);
  }
  *(void *)(a1 + 26512) = v9;
  uint64_t v10 = *(void *)(a1 + 19368);
  if (v10) {
    uint64_t v10 = *(void *)(v10 + 8);
  }
  *(void *)(a1 + 26520) = v10;
  uint64_t v11 = *(void *)(a1 + 19376);
  if (v11) {
    uint64_t v11 = *(void *)(v11 + 8);
  }
  *(void *)(a1 + 26528) = v11;
  gleIterateHashMachineObjects(a1 + 26352, a1, (uint64_t (*)(uint64_t, void *))gleCreateVAOClientStateForHash);
  uint64_t v12 = *(void **)(a1 + 26392);
  if (v12 && !v12[1]) {
    gleCreateVAOClientState(a1, a1 + 26456, v12);
  }
  uint64_t v13 = *(void *)(a1 + 26384);
  if (v13) {
    uint64_t v13 = *(void *)(v13 + 8);
  }
  *(void *)(a1 + 26448) = v13;
  uint64_t v14 = *(void *)(a1 + 26392);
  if (v14) {
    uint64_t v14 = *(void *)(v14 + 8);
  }
  *(void *)(a1 + 26456) = v14;
  *(_WORD *)(a1 + 26576) = *(_WORD *)(a1 + 28660);
  *(_DWORD *)(a1 + 26580) = *(unsigned __int16 *)(a1 + 23770);
  memcpy((void *)(a1 + 26584), (const void *)(a1 + 18440), 0x2D8uLL);
  gleIterateHashMachineObjects(a1 + 25904, a1, (uint64_t (*)(uint64_t, void *))gleCreateQueryClientStateForHash);
  uint64_t v15 = *(void *)(a1 + 25936);
  if (v15) {
    uint64_t v15 = *(void *)(v15 + 8);
  }
  *(void *)(a1 + 26536) = v15;
  uint64_t v16 = *(void *)(a1 + 25944);
  if (v16) {
    uint64_t v16 = *(void *)(v16 + 8);
  }
  *(void *)(a1 + 26544) = v16;
  uint64_t v17 = *(void *)(a1 + 25952);
  if (v17) {
    uint64_t v17 = *(void *)(v17 + 8);
  }
  *(void *)(a1 + 26552) = v17;
  uint64_t v18 = *(void *)(a1 + 25960);
  if (v18) {
    uint64_t v18 = *(void *)(v18 + 8);
  }
  *(void *)(a1 + 26560) = v18;
  uint64_t v19 = *(void *)(a1 + 25968);
  if (v19) {
    uint64_t v19 = *(void *)(v19 + 8);
  }
  *(void *)(a1 + 26568) = v19;

  os_unfair_lock_unlock(v2 + 81);
}

double gleCreateVBOClientStateForHash(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 8))
  {
    uint64_t v3 = 0;
    *(void *)&double result = gleCreateVBOClientState(a1, &v3, a2).n128_u64[0];
  }
  return result;
}

void gleCreateVAOClientStateForHash(uint64_t a1, void *a2)
{
  if (!a2[1])
  {
    uint64_t v2 = 0;
    gleCreateVAOClientState(a1, (uint64_t)&v2, a2);
  }
}

void *gleCreateQueryClientStateForHash(void *result, uint64_t a2)
{
  if (!*(void *)(a2 + 8))
  {
    uint64_t v2 = 0;
    return gleCreateQueryObjectClientState((uint64_t)result, &v2, a2);
  }
  return result;
}

void gleDestroyClientThreadState(void *a1)
{
  uint64_t v2 = (os_unfair_lock_s *)a1[2412];
  uint64_t v3 = v2 + 81;
  os_unfair_lock_lock(v2 + 81);
  int v4 = v2[76]._os_unfair_lock_opaque - 1;
  v2[76]._os_unfair_lock_opaque = v4;
  if (!v4) {
    gleIterateHashMachineObjects((uint64_t)&v2[66], 0, (uint64_t (*)(uint64_t, void *))gleDestroyVBOClientStateForHash);
  }
  gleIterateHashMachineObjects((uint64_t)(a1 + 3238), 0, (uint64_t (*)(uint64_t, void *))gleDestroyQueryClientStateForHash);
  gleIterateHashMachineObjects((uint64_t)(a1 + 3294), 0, (uint64_t (*)(uint64_t, void *))gleDestroyVAOClientStateForHash);
  uint64_t v5 = a1[3299];
  if (v5)
  {
    uint64_t v6 = *(void **)(v5 + 8);
    if (v6)
    {
      free(v6);
      *(void *)(v5 + 8) = 0;
    }
  }
  bzero(a1 + 3306, 0x368uLL);

  os_unfair_lock_unlock(v3);
}

void gleDestroyVBOClientStateForHash(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a2 + 8);
  if (v2)
  {
    free(v2);
    *(void *)(a2 + 8) = 0;
  }
}

void gleDestroyQueryClientStateForHash(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a2 + 8);
  if (v2)
  {
    free(v2);
    *(void *)(a2 + 8) = 0;
  }
}

void gleDestroyVAOClientStateForHash(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a2 + 8);
  if (v2)
  {
    free(v2);
    *(void *)(a2 + 8) = 0;
  }
}

uint64_t gleCreateCmdBufMachine(uint64_t a1)
{
  *(void *)(a1 + 27344) = gleSubmitCommandBuffer;
  if (!pthread_mutex_init((pthread_mutex_t *)(a1 + 27664), 0))
  {
    intptr_t v2 = *(int *)(a1 + 29768);
    *(_DWORD *)(a1 + 27740) = v2;
    *(void *)(a1 + 27728) = dispatch_semaphore_create(v2);
    *(void *)(a1 + 27320) = 0;
    *(_DWORD *)(a1 + 27736) = 0;
    *(void *)(a1 + 27776) = 0;
    *(_DWORD *)(a1 + 27784) = 0;
    *(void *)(a1 + 27760) = 0;
    *(void *)(a1 + 27768) = dispatch_semaphore_create(0);
    *(void *)(a1 + 27608) = 0x100000;
    uint64_t v3 = (char *)malloc_type_malloc(0x100000uLL, 0x577B5147uLL);
    if (!v3) {
      abort();
    }
    *(void *)(a1 + 27616) = v3;
    *(void *)(a1 + 27624) = v3;
    *(void *)(a1 + 27632) = v3;
    *(void *)(a1 + 27640) = &v3[*(void *)(a1 + 27608)];
    gleFreeOrphans((int64x2_t *)a1);
    uint64_t v4 = 3419;
    while (1)
    {
      inited = gleInitCommandBuffer(0x10000);
      *(void *)(a1 + 8 * v4) = inited;
      if (!inited) {
        break;
      }
      if (++v4 == 3451)
      {
        uint64_t v6 = *(void *)(a1 + 27352);
        *(void *)(a1 + 27328) = v6;
        *(void *)(a1 + 27336) = v6;
        gleCreateClientThreadState(a1);
        *(void *)(a1 + 27648) = dispatch_queue_create("OpenGLMT", 0);
        *(void *)(a1 + 27656) = dispatch_semaphore_create(31);
        *(void *)(a1 + 27744) = gleGet_gleFlushCommandBuffer();
        gleFinishCommandBuffer = gleGet_gleFinishCommandBuffer();
        uint64_t result = 0;
        *(void *)(a1 + 27752) = gleFinishCommandBuffer;
        return result;
      }
    }
    uint64_t v9 = v4 - 3419;
    if (v9)
    {
      for (uint64_t i = 0; i != v9; ++i)
        free(*(void **)(a1 + 27352 + 8 * i));
    }
    free(*(void **)(a1 + 27616));
  }
  return 10019;
}

uint64_t gleSubmitCommandBuffer(uint64_t a1)
{
  return *(void *)(a1 + 27336);
}

void gleDestroyCmdBufMachine(uint64_t a1)
{
  (*(void (**)(void))(a1 + 27752))();
  dispatch_release(*(dispatch_object_t *)(a1 + 27648));
  dispatch_release(*(dispatch_object_t *)(a1 + 27656));
  *(void *)(a1 + 27656) = 0;
  *(void *)(a1 + 27648) = 0;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 27664));
  dispatch_release(*(dispatch_object_t *)(a1 + 27728));
  for (uint64_t i = 3419; i != 3451; ++i)
    gleFreeCommandBuffer(*(void **)(a1 + 8 * i));
  dispatch_release(*(dispatch_object_t *)(a1 + 27768));
  *(void *)(a1 + 27768) = 0;
  free(*(void **)(a1 + 27616));
  gleDestroyClientThreadState((void *)a1);
  *(void *)(a1 + 27336) = 0;
  *(void *)(a1 + 27328) = 0;
}

void gleFlushCommandBuffer(uint64_t a1)
{
}

void gleFlushCommandBuffer_Core(uint64_t a1, int a2)
{
  uint64_t v4 = (int *)(a1 + 27320);
  uint64_t v5 = (os_unfair_lock_s *)(a1 + 27776);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 27776));
  if (*(_DWORD *)(*(void *)(a1 + 27328) + 16))
  {
    ++v4[104];
    if (a2)
    {
      char v6 = 0;
    }
    else
    {
      dispatch_async_f(*(dispatch_queue_t *)(a1 + 27648), (void *)a1, (dispatch_function_t)gleCmdProcessor);
      char v6 = 1;
    }
    goto LABEL_8;
  }
  if (a2)
  {
    int v7 = v4[104];
    if (v7)
    {
      char v6 = 0;
      v4[104] = v7 + 1;
LABEL_8:
      os_unfair_lock_unlock(v5);
      dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 27656), 0xFFFFFFFFFFFFFFFFLL);
      os_unfair_lock_lock(v5);
      uint64_t v8 = a1 + 8 * ((*v4 + 1) & 0x1F);
      *uint64_t v4 = (*v4 + 1) & 0x1F;
      *(void *)(a1 + 27328) = *(void *)(v8 + 27352);
      os_unfair_lock_unlock(v5);
      uint64_t v9 = *(NSObject **)(a1 + 27648);
      if (v9)
      {
        uint64_t v10 = *(void *)(a1 + 27328);
        uint64_t v11 = gleSubmitCommandBuffer;
      }
      else
      {
        uint64_t v11 = 0;
        uint64_t v10 = 0;
      }
      *(void *)(a1 + 27344) = v11;
      *(void *)(a1 + 27336) = v10;
      if ((v6 & 1) == 0)
      {
        dispatch_sync_f(v9, (void *)a1, (dispatch_function_t)gleCmdProcessor);
      }
      return;
    }
  }

  os_unfair_lock_unlock(v5);
}

void gleFinishCommandBuffer(uint64_t a1)
{
}

void *gleAddLargeCommand(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (a3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (v5 > 0xFF70)
  {
    if (v5 <= 0x80000)
    {
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 27664));
      int v7 = *(void **)(a1 + 27624);
      unint64_t v8 = *(void *)(a1 + 27632);
      if ((unint64_t)v7 >= v8) {
        unint64_t v8 = *(void *)(a1 + 27640);
      }
      unint64_t v9 = v8 - (void)v7;
      if (v9 < v5)
      {
        pthread_mutex_unlock((pthread_mutex_t *)(a1 + 27664));
        (*(void (**)(uint64_t))(a1 + 27752))(a1);
        pthread_mutex_lock((pthread_mutex_t *)(a1 + 27664));
        int v7 = *(void **)(a1 + 27616);
        *(void *)(a1 + 27624) = v7;
        unint64_t v9 = *(void *)(a1 + 27632) - (void)v7;
      }
      if (v9 >= v5)
      {
        *(void *)(a1 + 27624) = (char *)v7 + v5;
        pthread_mutex_unlock((pthread_mutex_t *)(a1 + 27664));
        if (!v7) {
          return v7;
        }
        char v6 = gleAddCommand(a1, (uint64_t)glAddLargeCommand_UnpackThread, 32);
        void *v6 = a2;
        v6[1] = v5;
        *((unsigned char *)v6 + 24) = 0;
        goto LABEL_3;
      }
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 27664));
    }
    return 0;
  }
  char v6 = gleAddCommand(a1, (uint64_t)glAddLargeCommand_UnpackThread, v5 + 32);
  void *v6 = a2;
  v6[1] = v5;
  *((unsigned char *)v6 + 24) = 1;
  int v7 = v6 + 4;
LABEL_3:
  _OWORD v6[2] = v7;
  return v7;
}

uint64_t glAddLargeCommand_UnpackThread(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 24)) {
    return (*(_DWORD *)(a2 + 8) + 32);
  }
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 27664));
  *(void *)(a1 + 27632) = *(void *)(a2 + 16) + *(void *)(a2 + 8);
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 27664));
  return 32;
}

intptr_t gleProcessCallback(intptr_t result, uint64_t a2)
{
  __dmb(0xBu);
  *(void *)(result + 27760) = a2;
  if (*(void *)(result + 27760))
  {
    uint64_t v2 = result;
    uint64_t v3 = (os_unfair_lock_s *)(result + 27776);
    uint64_t v4 = (int *)(result + 27736);
    unint64_t v5 = (void (**)(uint64_t))(result + 27744);
    char v6 = (void (**)(uint64_t))(result + 27752);
    do
    {
      os_unfair_lock_lock(v3);
      int v7 = *v4;
      os_unfair_lock_unlock(v3);
      if (!v7)
      {
        unint64_t v8 = v5;
        if (!*(_DWORD *)(*(void *)(v2 + 27328) + 16))
        {
          gleAddCommand(v2, (uint64_t)glUnpackDummy, 0);
          unint64_t v8 = v6;
        }
        (*v8)(v2);
      }
      uint64_t result = dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v2 + 27768), 0xFFFFFFFFFFFFFFFFLL);
    }
    while (*(void *)(v2 + 27760));
  }
  return result;
}

uint64_t glUnpackDummy()
{
  return 0;
}

intptr_t gleFinishCallback(uint64_t a1)
{
  *(void *)(a1 + 27760) = 0;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 27768));
}

intptr_t gleCmdProcessor(uint64_t a1)
{
  uint64_t v2 = (int *)(a1 + 27324);
  uint64_t v3 = (os_unfair_lock_s *)(a1 + 27776);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 27776));
  uint64_t v4 = *(void *)(a1 + 8 * *v2 + 27352);
  int v5 = *(_DWORD *)(v4 + 16);
  os_unfair_lock_unlock(v3);
  if (v5 >= 1)
  {
    char v6 = (char *)(v4 + 24);
    do
    {
      unint64_t v8 = *(uint64_t (**)(uint64_t, char *))v6;
      int v7 = v6 + 16;
      int v9 = v8(a1, v7);
      uint64_t v10 = *(void (***)(uint64_t, uint64_t))(a1 + 27760);
      if (v10) {
        (*v10)(a1, (uint64_t)(v10 + 2));
      }
      char v6 = &v7[v9];
      --v5;
    }
    while (v5);
  }
  os_unfair_lock_lock(v3);
  if (*(void *)(a1 + 27760) && v2[103] == 1) {
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 27768));
  }
  --v2[103];
  uint64_t v11 = *v2;
  uint64_t v12 = *(void *)(a1 + 8 * v11 + 27352);
  *(_DWORD *)(v12 + 16) = 0;
  *(void *)uint64_t v12 = v12 + 24;
  *uint64_t v2 = ((_BYTE)v11 + 1) & 0x1F;
  os_unfair_lock_unlock(v3);
  uint64_t v13 = *(NSObject **)(a1 + 27656);

  return dispatch_semaphore_signal(v13);
}

uint64_t gleSetBaseTCLState(uint64_t result)
{
  if (*(_WORD *)(result + 29830) == 7168 && !*(unsigned char *)(result + 32478))
  {
    int v1 = *(unsigned __int8 *)(*(void *)(result + 29032) + 101);
    *(_DWORD *)(result + 2224) = 1002685319;
    if (v1) {
      long long v2 = xmmword_227DC2010;
    }
    else {
      long long v2 = xmmword_227DC2020;
    }
    *(_OWORD *)(result + 2228) = v2;
  }
  else
  {
    *(_DWORD *)(result + 2240) = 0;
    *(_OWORD *)(result + 2224) = 0u;
  }
  *(_DWORD *)(result + 2244) = 0;
  *(void *)(result + 2248) = 0;
  return result;
}

double gleUpdateDispatchJIT(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 29240) = 0u;
  *(_OWORD *)(a1 + 29256) = 0u;
  *(void *)(a1 + 29432) = 0;
  *(_OWORD *)(a1 + 29400) = 0u;
  *(_OWORD *)(a1 + 29416) = 0u;
  *(_OWORD *)(a1 + 29368) = 0u;
  *(_OWORD *)(a1 + 29384) = 0u;
  *(_OWORD *)(a1 + 29336) = 0u;
  *(_OWORD *)(a1 + 29352) = 0u;
  *(_OWORD *)(a1 + 29304) = 0u;
  *(_OWORD *)(a1 + 29320) = 0u;
  *(_OWORD *)(a1 + 29272) = 0u;
  *(_OWORD *)(a1 + 29288) = 0u;
  *(void *)(a1 + 29240) = *(void *)(a1 + 29040);
  *(void *)(a1 + 29248) = *(void *)(a1 + 29048);
  *(void *)(a1 + 29256) = *(void *)(a1 + 29056);
  *(void *)(a1 + 29264) = *(void *)(a1 + 29064);
  *(void *)(a1 + 29272) = *(void *)(a1 + 29072);
  *(void *)(a1 + 29280) = *(void *)(a1 + 29080);
  *(void *)(a1 + 29288) = *(void *)(a1 + 29088);
  *(void *)(a1 + 29296) = *(void *)(a1 + 29096);
  *(void *)(a1 + 29304) = *(void *)(a1 + 29104);
  *(void *)(a1 + 29312) = *(void *)(a1 + 29112);
  *(void *)(a1 + 29320) = *(void *)(a1 + 29120);
  *(void *)(a1 + 29328) = *(void *)(a1 + 29128);
  *(void *)(a1 + 29336) = *(void *)(a1 + 29136);
  *(void *)(a1 + 29344) = *(void *)(a1 + 29144);
  *(void *)(a1 + 29352) = *(void *)(a1 + 29152);
  *(void *)(a1 + 29360) = *(void *)(a1 + 29160);
  *(void *)(a1 + 29368) = *(void *)(a1 + 29168);
  *(void *)(a1 + 29376) = *(void *)(a1 + 29176);
  *(void *)(a1 + 29384) = *(void *)(a1 + 29184);
  *(void *)(a1 + 29392) = *(void *)(a1 + 29192);
  *(void *)(a1 + 29400) = *(void *)(a1 + 29200);
  *(void *)(a1 + 29408) = *(void *)(a1 + 29208);
  *(void *)(a1 + 29416) = *(void *)(a1 + 29216);
  *(void *)(a1 + 29424) = *(void *)(a1 + 29224);
  *(void *)(a1 + 29432) = *(void *)(a1 + 29232);
  return result;
}

double glePopulateRenderDispatch(uint64_t a1)
{
  (*(void (**)(void, uint64_t))(*(void *)(a1 + 29448) + 136))(*(void *)(a1 + 29016), a1 + 29040);

  return gleUpdateDispatchJIT(a1);
}

int8x16_t gleReclaimContextResources(uint64_t a1)
{
  uint64_t v2 = a1 + 28652;
  if (*(void *)(a1 + 28944)) {
    gleFreeOrphans((int64x2_t *)a1);
  }
  gleReclaimDrawCopyPixelResources(a1);
  gleReclaimBitmapResources(a1);
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  gleReclaimTextureObjectResources(a1);
  gleReclaimBufferObjectResources(a1);
  gleReclaimVertexArrayResources(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  if (*(unsigned char *)(v2 + 3844))
  {
    unint64_t v3 = 0;
    uint64_t v4 = (void *)(a1 + 32512);
    do
    {
      (*(void (**)(void))(v4[206] + 1168))(*v4);
      ++v3;
      v4 += 209;
    }
    while (v3 < *(unsigned __int8 *)(v2 + 3844));
  }
  *(_DWORD *)uint64_t v2 = 0;
  *(int8x16_t *)(a1 + 1520) = vorrq_s8(*(int8x16_t *)(a1 + 1520), (int8x16_t)xmmword_227DC2030);
  int8x16_t result = vorrq_s8(*(int8x16_t *)(a1 + 1536), (int8x16_t)xmmword_227DC2040);
  *(int8x16_t *)(a1 + 1536) = result;
  *(_DWORD *)(v2 + 1148) |= 0xDE3C0478;
  return result;
}

void gleLabelObject(uint64_t a1, int a2, unsigned int a3, int a4, char *a5)
{
  if (a4 < 0)
  {
    uint64_t v18 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v19 = 1281;
LABEL_24:
    *uint64_t v18 = v19;
    return;
  }
  uint64_t HashMachineFromType = gleGetHashMachineFromType(a1, a2);
  if (!HashMachineFromType)
  {
    uint64_t v18 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v19 = 1280;
    goto LABEL_24;
  }
  uint64_t v11 = HashMachineFromType;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  if (a3)
  {
    uint64_t v12 = gleLookupHashObject(v11, a3);
    uint64_t v13 = a1;
    int v14 = a2;
LABEL_5:
    gleLabelObjectInner(v13, v14, (uint64_t)v12, a4, a5);
    goto LABEL_6;
  }
  if (a2 != 37204)
  {
    if (a2 == 5890)
    {
      for (uint64_t i = 2949; i != 2960; ++i)
      {
        uint64_t v17 = *(void *)(a1 + 8 * i);
        if (v17) {
          gleLabelObjectInner(a1, 5890, v17, a4, a5);
        }
      }
    }
    else if (!*(_WORD *)(a1 + 29832))
    {
      *(_WORD *)(a1 + 29832) = 1282;
    }
    goto LABEL_6;
  }
  uint64_t v12 = *(uint64_t **)(a1 + 26392);
  if (v12)
  {
    uint64_t v13 = a1;
    int v14 = 37204;
    goto LABEL_5;
  }
LABEL_6:
  uint64_t v15 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);

  os_unfair_lock_unlock(v15);
}

uint64_t gleGetHashMachineFromType(uint64_t a1, int a2)
{
  uint64_t result = 0;
  if (a2 > 36159)
  {
    if (a2 > 37200)
    {
      if (a2 == 37201)
      {
        return *(void *)(a1 + 19296) + 264;
      }
      else
      {
        uint64_t v5 = a1 + 25904;
        uint64_t v6 = a1 + 26352;
        if (a2 != 37204) {
          uint64_t v6 = 0;
        }
        if (a2 == 37203) {
          return v5;
        }
        else {
          return v6;
        }
      }
    }
    else if (a2 == 36160)
    {
      return *(void *)(a1 + 19296) + 8;
    }
    else if (a2 == 36161)
    {
      return *(void *)(a1 + 19296) + 40;
    }
    else
    {
      uint64_t v4 = a1 + 26400;
      if (a2 == 36386) {
        return v4;
      }
    }
  }
  else if (a2 > 35410)
  {
    if (a2 == 35411)
    {
      return *(void *)(a1 + 19296) + 200;
    }
    else if (a2 == 35648 || a2 == 35656)
    {
      return *(void *)(a1 + 19296) + 168;
    }
  }
  else
  {
    switch(a2)
    {
      case 5890:
        return *(void *)(a1 + 19296) + 72;
      case 33510:
        return *(void *)(a1 + 19296) + 232;
      case 35407:
        return *(void *)(a1 + 19296) + 136;
    }
  }
  return result;
}

void gleLabelObjectInner(uint64_t a1, int a2, uint64_t a3, int a4, char *__s)
{
  if (a3)
  {
    if (a2 == 35648)
    {
      int v8 = 8;
    }
    else
    {
      if (a2 != 35656)
      {
LABEL_7:
        int v9 = *(void **)(a3 + 32);
        if (v9)
        {
          free(v9);
          *(void *)(a3 + 32) = 0;
        }
        if (__s)
        {
          if (!a4) {
            a4 = strlen(__s);
          }
          uint64_t v10 = malloc_type_malloc(a4 + 1, 0x577B5147uLL);
          if (!v10) {
            abort();
          }
          *(void *)(a3 + 32) = v10;
          memcpy(v10, __s, a4);
          *(unsigned char *)(*(void *)(a3 + 32) + a4) = 0;
        }
        return;
      }
      int v8 = 7;
    }
    if (*(_DWORD *)(a3 + 24) == v8) {
      goto LABEL_7;
    }
  }
  if (!*(_WORD *)(a1 + 29832)) {
    *(_WORD *)(a1 + 29832) = 1282;
  }
}

void gleGetObjectLabel(uint64_t a1, int a2, unsigned int a3, int a4, _DWORD *a5, unsigned char *a6)
{
  if (a4 < 0)
  {
    __int16 v19 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v20 = 1281;
LABEL_24:
    *__int16 v19 = v20;
    return;
  }
  uint64_t HashMachineFromType = gleGetHashMachineFromType(a1, a2);
  if (!HashMachineFromType)
  {
    __int16 v19 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v20 = 1280;
    goto LABEL_24;
  }
  uint64_t v13 = HashMachineFromType;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  if (a3)
  {
    int v14 = gleLookupHashObject(v13, a3);
    size_t v15 = a1;
    int v16 = a2;
  }
  else if (a2 == 37204)
  {
    int v14 = *(uint64_t **)(a1 + 26392);
    if (!v14) {
      goto LABEL_6;
    }
    size_t v15 = a1;
    int v16 = 37204;
  }
  else
  {
    if (a2 != 5890)
    {
      if (!*(_WORD *)(a1 + 29832)) {
        *(_WORD *)(a1 + 29832) = 1282;
      }
      goto LABEL_6;
    }
    uint64_t v18 = 2949;
    while (1)
    {
      int v14 = *(uint64_t **)(a1 + 8 * v18);
      if (v14) {
        break;
      }
      if (++v18 == 2960) {
        goto LABEL_6;
      }
    }
    size_t v15 = a1;
    int v16 = 5890;
  }
  gleGetObjectLabelInner(v15, v16, (uint64_t)v14, a4, a5, a6);
LABEL_6:
  uint64_t v17 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);

  os_unfair_lock_unlock(v17);
}

size_t gleGetObjectLabelInner(size_t result, int a2, uint64_t a3, int a4, _DWORD *a5, unsigned char *a6)
{
  if (a3)
  {
    if (a2 == 35648)
    {
      int v9 = 8;
    }
    else
    {
      if (a2 != 35656) {
        goto LABEL_7;
      }
      int v9 = 7;
    }
    if (*(_DWORD *)(a3 + 24) == v9)
    {
LABEL_7:
      uint64_t v10 = *(const void **)(a3 + 32);
      if (v10)
      {
        uint64_t result = strlen(*(const char **)(a3 + 32));
        if (a6)
        {
          if ((int)result + 1 < a4) {
            int v11 = result + 1;
          }
          else {
            int v11 = a4;
          }
          uint64_t v12 = v11;
          memcpy(a6, v10, v11);
          uint64_t result = v12 - 1;
          a6[v12 - 1] = 0;
        }
        if (a5) {
          *a5 = result;
        }
      }
      else
      {
        if (a5) {
          *a5 = 0;
        }
        if (a4 >= 1 && a6) {
          *a6 = 0;
        }
      }
      return result;
    }
  }
  if (!*(_WORD *)(result + 29832)) {
    *(_WORD *)(result + 29832) = 1282;
  }
  return result;
}

void gleLabelObjectWithResponsibleProcess(uint64_t a1, int a2, unsigned int a3, int a4)
{
  uint64_t HashMachineFromType = gleGetHashMachineFromType(a1, a2);
  if (!HashMachineFromType)
  {
    int v11 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v12 = 1280;
LABEL_10:
    *int v11 = v12;
    return;
  }
  uint64_t v8 = HashMachineFromType;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  int v9 = gleLookupHashObject(v8, a3);
  if (!v9)
  {
    int v11 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return;
    }
    __int16 v12 = 1281;
    goto LABEL_10;
  }
  *((_DWORD *)v9 + 7) = a4;
  uint64_t v10 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);

  os_unfair_lock_unlock(v10);
}

uint64_t gleUpdateDeferredState(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, int a5, __n128 a6, double a7, double a8)
{
  uint64_t v9 = a1 + 29716;
  uint64_t v171 = a1 + 24748;
  if (*(unsigned char *)(a1 + 32503)) {
    uint64_t v167 = mach_absolute_time();
  }
  else {
    uint64_t v167 = 0;
  }
  int v10 = *(_DWORD *)(a1 + 1540);
  if ((a5 & v10 & 0x10000000) != 0)
  {
    gleUpdateCurrentProgramState(a1);
    *(_DWORD *)(a1 + 1532) |= 0x10000000u;
    unsigned int v11 = *(_DWORD *)(a1 + 1540) & 0xEFFFFFFF;
    int v12 = *(unsigned __int8 *)(v9 + 2768);
    uint64_t v13 = v171;
    *(_DWORD *)(v171 + 3904) = 0;
    if (v12) {
      unsigned int v14 = 0x80000000;
    }
    else {
      unsigned int v14 = 1610612736;
    }
    int v10 = v11 | v14;
    *(_DWORD *)(a1 + 1540) = v10;
  }
  else
  {
    uint64_t v13 = v171;
  }
  if (*(_DWORD *)(a1 + 1548) & 0x80000 | v10 & 0x4000000)
  {
    if (*(_DWORD *)(v9 + 96)
      && ((uint64_t v15 = *(void *)(a1 + 28960)) != 0
        ? (int v16 = (unsigned __int8 *)(v15 + 552))
        : (int v16 = (unsigned __int8 *)(v9 + 92)),
          *v16 >> *(unsigned char *)(*(void *)(a1 + 29032) + 507)))
    {
      *(_DWORD *)(v13 + 3904) = 0;
      v10 |= 0x4000000u;
      unsigned int v169 = 1282;
    }
    else
    {
      unsigned int v169 = 0;
      v10 &= ~0x4000000u;
    }
    *(_DWORD *)(a1 + 1540) = v10;
  }
  else
  {
    unsigned int v169 = 0;
  }
  uint64_t v17 = (unsigned char *)(a1 + 12518);
  int v18 = *(_DWORD *)(a1 + 2216) & *(_DWORD *)(a1 + 1544);
  unsigned int v19 = v18 & 0xFFFFFE;
  if ((v18 & 0xFFFFFE) != 0)
  {
    if ((v18 & 0x10) != 0)
    {
      gleModelMatInvert(a1);
      unsigned int v19 = v18 & 0xFFFFEE;
      if ((v18 & 0xFFFFEE) == 0)
      {
        uint64_t v13 = v171;
LABEL_28:
        *(_DWORD *)(a1 + 1544) &= ~v19;
        int v10 = *(_DWORD *)(a1 + 1540);
        goto LABEL_29;
      }
      uint64_t v13 = v171;
    }
    unsigned int v20 = v19 >> 1;
    int v21 = 1;
    do
    {
      if (v20)
      {
        gleInvertMatrix(a1, v21);
        uint64_t v13 = v171;
      }
      unsigned int v20 = v19 >> ++v21;
    }
    while (v19 >> v21);
    goto LABEL_28;
  }
LABEL_29:
  if ((v10 & 0x18) == 0)
  {
    if ((*(unsigned char *)(a1 + 1548) & 1) == 0) {
      goto LABEL_58;
    }
    if (!*v17)
    {
      *(_OWORD *)(a1 + 12432) = *(_OWORD *)(a1 + 9424);
      *(_OWORD *)(a1 + 12448) = *(_OWORD *)(a1 + 9440);
      *(_OWORD *)(a1 + 12464) = *(_OWORD *)(a1 + 9456);
      a6 = *(__n128 *)(a1 + 9472);
      *(__n128 *)(a1 + 12480) = a6;
      *(_DWORD *)uint64_t v9 = *(_DWORD *)(v9 + 4);
      goto LABEL_58;
    }
    goto LABEL_51;
  }
  *(void *)&double v22 = gleMultiplyAlignedMatrix((float32x4_t *)(a1 + 9552), (float32x2_t *)(a1 + 9616), (float32x4_t *)(a1 + 9424)).n128_u64[0];
  int MatrixIdentifier = gleGenerateMatrixIdentifier(a1, a1 + 9424, v22, v23, v24);
  int v26 = *v17;
  if (*v17)
  {
    int v27 = 0x10000;
  }
  else
  {
    *(_OWORD *)(a1 + 12432) = *(_OWORD *)(a1 + 9424);
    *(_OWORD *)(a1 + 12448) = *(_OWORD *)(a1 + 9440);
    *(_OWORD *)(a1 + 12464) = *(_OWORD *)(a1 + 9456);
    a6 = *(__n128 *)(a1 + 9472);
    *(__n128 *)(a1 + 12480) = a6;
    *(_DWORD *)uint64_t v9 = MatrixIdentifier;
    int v27 = 65540;
  }
  uint64_t v13 = v171;
  int v28 = *(_DWORD *)(v9 + 4);
  BOOL v29 = (v28 & 0x3FCFF3FC) == 1070593020;
  int v30 = (MatrixIdentifier == -1074791426) ^ (v28 == -1074791426);
  if (!v29) {
    int v30 = 1;
  }
  if ((~MatrixIdentifier & 0x3FCFF3FC) != 0) {
    int v30 = v29;
  }
  if (v30 == 1)
  {
    *(_DWORD *)(v171 + 3904) = 0;
    *(_DWORD *)(a1 + 1548) |= v27;
  }
  *(_DWORD *)(v9 + 4) = MatrixIdentifier;
  if ((*(unsigned char *)(a1 + 1540) & 0x10) != 0)
  {
    int v31 = gleGenerateMatrixIdentifier(a1, a1 + 9616, a6.n128_f64[0], a7, a8);
    uint64_t v13 = v171;
    int v32 = *(_DWORD *)(v9 + 8);
    BOOL v33 = (v32 & 0x3FCFF3FC) == 1070593020;
    int v34 = (v31 == -1074791426) ^ (v32 == -1074791426);
    if (!v33) {
      int v34 = 1;
    }
    if ((~v31 & 0x3FCFF3FC) != 0) {
      int v34 = v33;
    }
    if (v34 == 1)
    {
      *(_DWORD *)(v171 + 3904) = 0;
      *(_DWORD *)(a1 + 1548) |= 0x10008u;
    }
    *(_DWORD *)(v9 + 8) = v31;
    int v26 = *v17;
  }
  if (v26)
  {
LABEL_51:
    *(void *)&double v35 = gleApplyViewScissorTransform((float32x4_t *)a1).u64[0];
    int v38 = gleGenerateMatrixIdentifier(a1, a1 + 12432, v35, v36, v37);
    uint64_t v13 = v171;
    int v39 = (v38 == -1074791426) ^ (*(_DWORD *)v9 == -1074791426);
    if ((*(_DWORD *)v9 & 0x3FCFF3FC) != 0x3FCFF3FC) {
      int v39 = 1;
    }
    if ((~v38 & 0x3FCFF3FC) != 0) {
      int v39 = (*(_DWORD *)v9 & 0x3FCFF3FC) == 1070593020;
    }
    if (v39 == 1)
    {
      *(_DWORD *)(v171 + 3904) = 0;
      *(_DWORD *)(a1 + 1548) |= 4u;
    }
    *(_DWORD *)uint64_t v9 = v38;
  }
LABEL_58:
  int v40 = *(_DWORD *)(a1 + 1540);
  if ((v40 & 0x10) != 0 && (v18 & 0x10) == 0 && (*(_DWORD *)(a1 + 2216) & 0x10) != 0)
  {
    int v41 = gleGenerateMatrixIdentifier(a1, a1 + 11152, a6.n128_f64[0], a7, a8);
    uint64_t v13 = v171;
    int v42 = *(_DWORD *)(v9 + 12);
    BOOL v43 = (v42 & 0x3FCFF3FC) == 1070593020;
    int v44 = (v41 == -1074791426) ^ (v42 == -1074791426);
    if (!v43) {
      int v44 = 1;
    }
    if ((~v41 & 0x3FCFF3FC) != 0) {
      int v44 = v43;
    }
    if (v44 == 1)
    {
      *(_DWORD *)(v171 + 3904) = 0;
      *(_DWORD *)(a1 + 1548) |= 0x10010u;
    }
    *(_DWORD *)(v9 + 12) = v41;
    int v40 = *(_DWORD *)(a1 + 1540);
  }
  if ((v40 & 4) != 0)
  {
    int v45 = gleGenerateMatrixIdentifier(a1, a1 + 9488, a6.n128_f64[0], a7, a8);
    uint64_t v13 = v171;
    *(_DWORD *)(a1 + 19152) = *(_DWORD *)(a1 + 19152) & 0xFFFFFEFF | ((v45 != -1074791426) << 8);
    *(_DWORD *)(v9 + 16) = v45;
    int v40 = *(_DWORD *)(a1 + 1540);
  }
  unsigned int v46 = v40 & 0xFF0000;
  if (v46)
  {
    uint64_t v47 = 0;
    unsigned int v48 = HIWORD(v46);
    uint64_t v49 = a1 + 10384;
    uint64_t v50 = a1 + 29736;
    do
    {
      int v51 = 1 << v47;
      if (((1 << v47) & v48) != 0)
      {
        int v52 = gleGenerateMatrixIdentifier(a1, v49, a6.n128_f64[0], a7, a8);
        uint64_t v13 = v171;
        int v53 = *(_DWORD *)(v50 + 4 * v47);
        int v54 = (v52 == -1074791426) ^ (v53 == -1074791426);
        if ((v53 & 0x3FCFF3FC) != 0x3FCFF3FC) {
          int v54 = 1;
        }
        if ((~v52 & 0x3FCFF3FC) != 0) {
          int v54 = (v53 & 0x3FCFF3FC) == 1070593020;
        }
        if (v54 == 1)
        {
          *(_DWORD *)(v171 + 3904) = 0;
          *(_DWORD *)(a1 + 1548) |= 0x10040u;
          int v53 = *(_DWORD *)(v50 + 4 * v47);
        }
        if (((v52 & 0x3030303) == 50529026) == ((v53 & 0x3030303) != 50529026))
        {
          char v55 = *(unsigned char *)(v9 + 2759);
          char v56 = v55 & ~(_BYTE)v51;
          char v57 = v55 | v51;
          if ((v52 & 0x3030303) != 0x3030302) {
            char v57 = v56;
          }
          *(unsigned char *)(v9 + 2759) = v57;
          *(_DWORD *)(v171 + 3904) = 0;
          *(_DWORD *)(a1 + 1548) |= 0x4000u;
        }
        *(_DWORD *)(v50 + 4 * v47) = v52;
      }
      ++v47;
      v49 += 64;
    }
    while (v48 >> v47);
  }
  int v58 = *(_DWORD *)(a1 + 1548);
  int v59 = v18;
  if ((v58 & 0x4000) != 0)
  {
    unsigned int v60 = *(unsigned __int8 *)(v9 + 2760);
    if (*(unsigned char *)(v9 + 2760))
    {
      if ((*(unsigned char *)(v13 + 116) & 9) != 0 || *(unsigned char *)(v13 + 8))
      {
        unsigned int v60 = 0;
      }
      else
      {
        uint64_t v155 = *(void *)(a1 + 26384);
        if (!v155 || (v60 &= *(unsigned char *)(v155 + 1220) & *(unsigned char *)(v155 + 907)) != 0) {
          v60 &= *(unsigned char *)(v9 + 2759) & (~(*(_DWORD *)(a1 + 23796) | *(_DWORD *)(a1 + 23792)) >> 24);
        }
      }
    }
    if (v60 != *(unsigned __int8 *)(v9 + 2758))
    {
      *(unsigned char *)(v9 + 2758) = v60;
      *(_DWORD *)(v13 + 3904) = 0;
      *(_DWORD *)(a1 + 1548) = v58 | 0x20000;
    }
  }
  if ((v18 & 0x2000000) != 0)
  {
    (*(void (**)(uint64_t, uint64_t))(a1 + 1456))(a1, a1 + 8464);
    uint64_t v13 = v171;
    int v61 = *(_DWORD *)(a1 + 1544);
    if ((v61 & 0x1000000) == 0)
    {
      *(_DWORD *)(v171 + 3904) = 0;
      int v62 = v61 | 0x1000000;
      *(_DWORD *)(a1 + 1544) = v62;
      int v59 = *(_DWORD *)(a1 + 2216) & v62;
    }
  }
  if ((v59 & 0x1000000) != 0)
  {
    gleUpdateLightRGBASumsUnconditional((float32x2_t *)a1, (float32x2_t *)(a1 + 13824), 0);
    gleUpdateLightRGBASumsUnconditional((float32x2_t *)a1, (float32x2_t *)(a1 + 14352), 1);
    uint64_t v13 = v171;
    *(_DWORD *)(a1 + 1544) &= ~0x1000000u;
  }
  unsigned int v63 = *(_DWORD *)(a1 + 1548);
  int v64 = *(_DWORD *)(a1 + 2220) & v63;
  if ((v64 & 0x20000) != 0 && !*(unsigned char *)v13)
  {
    uint64_t v65 = *(void *)(*(void *)(a1 + 24512) + 448);
    gleUpdateFragmentStateProgram(a1, a2);
    uint64_t v13 = v171;
    unsigned int v63 = *(_DWORD *)(a1 + 1548) & 0xFFFDFFFF;
    *(_DWORD *)(a1 + 1548) = v63;
    if (v65 != *(void *)(*(void *)(a1 + 24512) + 448))
    {
      *(_DWORD *)(v171 + 3904) = 0;
      v63 |= 0x80u;
      *(_DWORD *)(a1 + 1548) = v63;
    }
  }
  if ((v64 & 0x1020000) != 0)
  {
    if ((*(unsigned char *)(v13 + 116) & 0x10) != 0)
    {
      uint64_t v69 = *(void *)(a1 + 24768);
      if (!v69) {
        uint64_t v69 = *(void *)(*(void *)(a1 + 24776) + 72);
      }
      uint64_t v67 = (uint64_t *)(v69 + 3528);
      unsigned int v68 = (uint64_t *)(v69 + 3536);
    }
    else if (*(unsigned char *)(v13 + 12))
    {
      uint64_t v66 = *(void *)(a1 + 24432);
      uint64_t v67 = (uint64_t *)(v66 + 152);
      unsigned int v68 = (uint64_t *)(v66 + 160);
    }
    else
    {
      uint64_t v70 = *(void *)(a1 + 24512);
      uint64_t v67 = (uint64_t *)(v70 + 112);
      unsigned int v68 = (uint64_t *)(v70 + 120);
    }
    uint64_t v71 = *v68;
    uint64_t v72 = *v67;
    uint64_t v73 = *(void *)(a1 + 19224);
    if (v73 == v71)
    {
      int v74 = *(_DWORD *)(a1 + 19216) ^ v72;
      *(void *)(a1 + 19216) = v72;
      if ((v74 & 0x8C0) == 0) {
        goto LABEL_122;
      }
      int v75 = 1024;
    }
    else
    {
      uint64_t v76 = v73 ^ v71;
      if (((v73 ^ v71) & 0xC0000000CLL) != 0)
      {
        *(unsigned char *)(a1 + 19232) = (v71 & 0x400000004) != 0;
        *(unsigned char *)(a1 + 19233) = (v71 & 0x800000008) != 0;
        int v75 = 268534786;
      }
      else
      {
        int v75 = 1024;
      }
      if ((v76 & 0x2000000020) != 0)
      {
        *(unsigned char *)(a1 + 19234) = (v71 & 0x2000000020) != 0;
        int v75 = 268534794;
      }
      if (*(unsigned __int8 *)(a1 + 23788) != ((unsigned __int16)(WORD2(v71) | v71) >> 8))
      {
        *(_DWORD *)(a1 + 23788) = 16843009 * (BYTE5(v71) | BYTE1(v71));
        int v75 = 268534874;
      }
      *(void *)(a1 + 19224) = v71;
      *(void *)(a1 + 19216) = v72;
    }
    *(_DWORD *)(v13 + 3904) = 0;
    v63 |= v75;
    *(_DWORD *)(a1 + 1548) = v63;
    v64 |= *(_DWORD *)(a1 + 2220) & v75;
  }
LABEL_122:
  if ((v64 & 0x10000) != 0)
  {
    gleUpdateVertexStateProgram(a1);
    uint64_t v13 = v171;
    unsigned int v63 = *(_DWORD *)(a1 + 1548) & 0xFFFEFFFF;
    *(_DWORD *)(a1 + 1548) = v63;
  }
  if ((v64 & 0x40000) != 0)
  {
    gleUpdateRasterStateProgram(a1);
    uint64_t v13 = v171;
    unsigned int v63 = *(_DWORD *)(a1 + 1548) & 0xFFFBFFFF;
    *(_DWORD *)(a1 + 1548) = v63;
  }
  if ((v64 & 0x70000000) != 0)
  {
    if ((v64 & 0x40000000) != 0)
    {
      gleUpdateFragmentFallbackProgram(a1, 3u);
      uint64_t v13 = v171;
      unsigned int v63 = *(_DWORD *)(a1 + 1548) & 0xBFFFFFFF;
      *(_DWORD *)(a1 + 1548) = v63;
      if ((v64 & 0x20000000) == 0)
      {
LABEL_129:
        if ((v64 & 0x10000000) == 0) {
          goto LABEL_131;
        }
        goto LABEL_130;
      }
    }
    else if ((v64 & 0x20000000) == 0)
    {
      goto LABEL_129;
    }
    gleUpdateVertexFallbackProgram(a1, 1u);
    uint64_t v13 = v171;
    unsigned int v63 = *(_DWORD *)(a1 + 1548) & 0xDFFFFFFF;
    *(_DWORD *)(a1 + 1548) = v63;
    if ((v64 & 0x10000000) != 0)
    {
LABEL_130:
      gleUpdateVertexFallbackProgram(a1, 0);
      uint64_t v13 = v171;
      unsigned int v63 = *(_DWORD *)(a1 + 1548) & 0xEFFFFFFF;
      *(_DWORD *)(a1 + 1548) = v63;
    }
  }
LABEL_131:
  if ((v63 & 2) != 0)
  {
    gleSelectVertexSubmitFunc(a1);
    uint64_t v13 = v171;
    unsigned int v63 = *(_DWORD *)(a1 + 1548);
    if ((v63 & 0x8000) == 0)
    {
LABEL_133:
      if ((v63 & 4) == 0) {
        goto LABEL_134;
      }
      goto LABEL_146;
    }
  }
  else if ((v63 & 0x8000) == 0)
  {
    goto LABEL_133;
  }
  gleSelectPrimitiveFunc(a1);
  uint64_t v13 = v171;
  unsigned int v63 = *(_DWORD *)(a1 + 1548);
  if ((v63 & 4) == 0)
  {
LABEL_134:
    if ((v63 & 8) == 0) {
      goto LABEL_135;
    }
    goto LABEL_147;
  }
LABEL_146:
  *(void *)(a1 + 20096) = gleSetProjectionFunc;
  *(void *)(a1 + 20104) = gleSetProjectionFunc;
  *(void *)(a1 + 20224) = gleSetProjectionRPosFunc;
  *(void *)(a1 + 20232) = gleSetProjectionRPosFunc;
  if ((v63 & 8) == 0)
  {
LABEL_135:
    if ((v63 & 0x10) == 0) {
      goto LABEL_136;
    }
    goto LABEL_148;
  }
LABEL_147:
  *(void *)(a1 + 20112) = gleSetModelviewFunc;
  *(void *)(a1 + 20120) = gleSetModelviewFunc;
  *(void *)(a1 + 20240) = gleSetModelviewRPosFunc;
  *(void *)(a1 + 20248) = gleSetModelviewRPosFunc;
  if ((v63 & 0x10) == 0)
  {
LABEL_136:
    if ((v63 & 0x40) == 0) {
      goto LABEL_137;
    }
    goto LABEL_149;
  }
LABEL_148:
  *(void *)(a1 + 20128) = gleSetNormalFunc;
  *(void *)(a1 + 20136) = gleSetNormalFunc;
  *(void *)(a1 + 20256) = gleSetNormalRPosFunc;
  *(void *)(a1 + 20264) = gleSetNormalRPosFunc;
  if ((v63 & 0x40) == 0)
  {
LABEL_137:
    if ((v63 & 0x20) == 0) {
      goto LABEL_138;
    }
    goto LABEL_150;
  }
LABEL_149:
  *(void *)(a1 + 20144) = gleSetTextureFunc;
  *(void *)(a1 + 20152) = gleSetTextureFunc;
  *(void *)(a1 + 20272) = gleSetTextureRPosFunc;
  *(void *)(a1 + 20280) = gleSetTextureRPosFunc;
  if ((v63 & 0x20) == 0)
  {
LABEL_138:
    if ((v63 & 0x400) == 0) {
      goto LABEL_140;
    }
    goto LABEL_139;
  }
LABEL_150:
  *(void *)(a1 + 20160) = gleSetLightFrontFunc;
  *(void *)(a1 + 20168) = gleSetLightFrontFunc;
  *(void *)(a1 + 20176) = gleSetLightBackFunc;
  *(void *)(a1 + 20184) = gleSetLightBackFunc;
  *(void *)(a1 + 20192) = gleSetLightPtrFrontFunc;
  *(void *)(a1 + 20200) = gleSetLightPtrFrontFunc;
  *(void *)(a1 + 20208) = gleSetLightPtrBackFunc;
  *(void *)(a1 + 20216) = gleSetLightPtrBackFunc;
  if ((v63 & 0x400) != 0)
  {
LABEL_139:
    *(void *)(a1 + 27880) = gleSetEyeInterpFunc;
    *(void *)(a1 + 27888) = gleSetEyeInterpFunc;
    *(void *)(a1 + 27896) = gleSetClipInterpFunc;
    *(void *)(a1 + 27904) = gleSetClipInterpFunc;
    *(void *)(a1 + 27912) = gleSetFlatCopyFunc;
    *(void *)(a1 + 27920) = gleSetFlatCopyFunc;
  }
LABEL_140:
  if ((v63 & 0x1F00080) != 0)
  {
    *(unsigned char *)(v9 + 2771) = 1;
    if ((v63 & 0x1000080) != 0)
    {
      if ((*(unsigned char *)(v13 + 116) & 0x10) != 0)
      {
        uint64_t v85 = *(void *)(a1 + 24768);
        if (!v85) {
          uint64_t v85 = *(void *)(*(void *)(a1 + 24776) + 72);
        }
        float v77 = (uint64_t *)(v85 + 3568);
      }
      else
      {
        float v77 = (uint64_t *)(*(void *)(a1 + 24512) + 448);
      }
      uint64_t v83 = *v77;
      uint64_t v82 = *(void *)(a1 + 14896) ^ *v77;
      *(void *)(a1 + 14896) = *v77;
      if ((v63 & 0x800000) == 0) {
        goto LABEL_172;
      }
    }
    else
    {
      uint64_t v82 = 0;
      uint64_t v83 = *(void *)(a1 + 14896);
      if ((v63 & 0x800000) == 0)
      {
LABEL_172:
        uint64_t v84 = *(void *)(a1 + 14912);
        goto LABEL_177;
      }
    }
    if ((*(unsigned char *)(v13 + 116) & 8) != 0)
    {
      uint64_t v86 = *(void *)(a1 + 24768);
      if (!v86) {
        uint64_t v86 = *(void *)(*(void *)(a1 + 24776) + 64);
      }
      uint64_t v84 = *(void *)(v86 + 2864);
    }
    else
    {
      uint64_t v84 = -1;
    }
    v82 |= *(void *)(a1 + 14912) ^ v84;
    *(void *)(a1 + 14912) = v84;
LABEL_177:
    int v80 = (v63 >> 13) & 1;
    if (v84 == -1)
    {
      LOBYTE(v79) = 0;
      if ((v63 & 0x100000) == 0)
      {
LABEL_191:
        uint64_t v90 = *(void *)(a1 + 14960);
LABEL_192:
        if (v90 == -1)
        {
          LOBYTE(v80) = 0;
          *(void *)(a1 + 14976) = v83;
          if (v83 == -1)
          {
LABEL_200:
            if (v82)
            {
              unint64_t v92 = ~(v82 | (2 * v82) | (4 * (v82 | (2 * v82))));
              LODWORD(v92) = ((v92 >> 6) & 2 | (v92 >> 3) & 1 | (v92 >> 9) & 4 | (v92 >> 12) & 8 | (v92 >> 15) & 0x10 | (v92 >> 18) & 0x20 | (v92 >> 21) & 0x40 | (v92 >> 31 << 7) | (v92 >> 27) & 0x100 | (v92 >> 30) & 0x200 | (v92 >> 33) & 0x400 | (v92 >> 36) & 0x800 | (v92 >> 39) & 0x1000 | (v92 >> 42) & 0x2000 | (v92 >> 45) & 0x4000 | HIWORD(v92) & 0x8000) ^ 0xFFFF;
              *(_DWORD *)(a1 + 1524) |= v92;
              *(_DWORD *)(a1 + 1536) |= v92;
              *(_DWORD *)(v13 + 3904) = 0;
              v63 |= 0x8000000u;
              *(_DWORD *)(a1 + 1548) = v63;
            }
            goto LABEL_202;
          }
        }
        else
        {
          unint64_t v91 = (v90 | v83) & 0x8888888888888888 | (((v90 | v83) & 0x8888888888888888) >> 1);
          if (((v90 ^ v83) & ~(v91 | (v91 >> 2))) != 0)
          {
            *(unsigned char *)(v9 + 2771) = 0;
            *(_DWORD *)(v13 + 3904) = 0;
            *(_DWORD *)(a1 + 1540) |= 0x60000000u;
            *(void *)(a1 + 14976) = -1;
            goto LABEL_200;
          }
          *(void *)(a1 + 14976) = v90 & v83;
        }
        if (!*(unsigned char *)(a1 + 14996)) {
          *(unsigned char *)(a1 + 14996) = 1;
        }
        goto LABEL_200;
      }
    }
    else
    {
      unint64_t v87 = (v84 | v83) & 0x8888888888888888 | (((v84 | v83) & 0x8888888888888888) >> 1);
      if (((v84 ^ v83) & ~(v87 | (v87 >> 2))) != 0)
      {
        *(unsigned char *)(v9 + 2771) = 0;
        *(_DWORD *)(v13 + 3904) = 0;
        *(_DWORD *)(a1 + 1540) |= 0x60000000u;
        uint64_t v83 = -1;
      }
      else
      {
        v83 &= v84;
      }
      int v79 = (v63 >> 13) & 1;
      if ((v63 & 0x100000) == 0) {
        goto LABEL_191;
      }
    }
    if (*(unsigned char *)(v13 + 116))
    {
      uint64_t v89 = *(void *)(a1 + 24768);
      if (!v89) {
        uint64_t v89 = *(void *)(*(void *)(a1 + 24776) + 40);
      }
      float v88 = (uint64_t *)(v89 + 752);
    }
    else
    {
      if (!*(unsigned char *)(v13 + 8))
      {
        uint64_t v90 = -1;
        goto LABEL_188;
      }
      float v88 = (uint64_t *)(*(void *)(a1 + 24400) + 488);
    }
    uint64_t v90 = *v88;
LABEL_188:
    v82 |= *(void *)(a1 + 14960) ^ v90;
    *(void *)(a1 + 14960) = v90;
    goto LABEL_192;
  }
  if ((v63 & 0x2000) != 0 && (uint64_t v78 = *(unsigned __int8 *)(a1 + 14996), *(unsigned char *)(a1 + 14996)))
  {
    LOBYTE(v79) = 0;
    LOBYTE(v80) = 0;
    float v81 = (void *)(a1 + 14912);
    do
    {
      if (*v81 != -1) {
        LOBYTE(v79) = 1;
      }
      if (v81[6] != -1) {
        LOBYTE(v80) = 1;
      }
      ++v81;
      --v78;
    }
    while (v78);
  }
  else
  {
    LOBYTE(v80) = 0;
    LOBYTE(v79) = 0;
  }
LABEL_202:
  if ((v63 & 0x8000000) != 0)
  {
    uint64_t v93 = *(unsigned __int8 *)(a1 + 14996);
    if (*(unsigned char *)(a1 + 14996))
    {
      int v94 = 0;
      uint64_t v95 = 0;
      int v96 = *(_DWORD *)(a1 + 1524);
      unsigned int v97 = (unsigned __int16)(v96 | *(_DWORD *)(a1 + 1536));
      uint64_t v98 = a1 + 33176;
      uint64_t v99 = a1 + 14896;
      while (!v97)
      {
LABEL_228:
        ++v95;
        v94 += 16;
        if (v95 == v93) {
          goto LABEL_229;
        }
      }
      unint64_t v100 = *(void *)(v99 + 8 * v95 + 80);
      uint64_t v101 = (_WORD *)(v99 + 2 * v95 + 96);
      int v102 = 16 * v95;
      unsigned int v103 = v97;
      while (1)
      {
        unsigned int v104 = __clz(__rbit32(v103));
        int v105 = 1 << v104;
        unint64_t v106 = (v100 >> (4 * v104)) & 0xF;
        if (v106 >= 0xB)
        {
          uint64_t v116 = *(unsigned __int8 *)(v9 + 2780);
          if (*(unsigned char *)(v9 + 2780))
          {
            int v117 = (void *)(v98 + 8 * (v94 + v104));
            do
            {
              void *v117 = 0;
              v117[90] = 0;
              v117 += 209;
              --v116;
            }
            while (v116);
          }
          *v101 &= ~(_WORD)v105;
          goto LABEL_227;
        }
        uint64_t v107 = *(void *)(a1 + 20776 + 88 * (int)(v104 + v102) + 8 * v106);
        uint64_t v108 = *(void *)(a1 + 23936 + 8 * (int)(v104 + v102));
        if (v108)
        {
          uint64_t v109 = *(unsigned __int8 *)(v9 + 2780);
          if (*(unsigned char *)(v9 + 2780))
          {
            BOOL v110 = (uint64_t *)(v107 + 40);
            uint64_t v111 = (uint64_t *)(v108 + 40);
            int v112 = (void *)(v98 + 8 * (v94 + v104));
            do
            {
              uint64_t v113 = *v110++;
              void *v112 = v113;
              uint64_t v114 = *v111++;
              v112[90] = v114;
              v112 += 209;
              --v109;
            }
            while (v109);
          }
          long long v115 = (unsigned __int8 *)(v108 + 232);
        }
        else
        {
          uint64_t v118 = *(unsigned __int8 *)(v9 + 2780);
          if (*(unsigned char *)(v9 + 2780))
          {
            __int16 v119 = (void *)(v98 + 8 * (v94 + v104));
            uint64_t v120 = v107;
            do
            {
              void *v119 = *(void *)(v120 + 40);
              v119[90] = *(void *)(v120 + 424);
              v120 += 8;
              v119 += 209;
              --v118;
            }
            while (v118);
          }
          long long v115 = (unsigned __int8 *)(v107 + 597);
        }
        int v121 = *v115;
        int v122 = *(unsigned __int8 *)(v107 + 596);
        int v123 = (unsigned __int16)*v101;
        int v124 = v105 & v123;
        if ((v121 & ~v122) != 0)
        {
          if (v124)
          {
            __int16 v125 = v123 & ~(_WORD)v105;
LABEL_226:
            _WORD *v101 = v125;
            *(_DWORD *)(v13 + 3904) = 0;
            v96 |= v105;
            *(_DWORD *)(a1 + 1524) = v96;
          }
        }
        else if (!v124)
        {
          __int16 v125 = v123 | v105;
          goto LABEL_226;
        }
LABEL_227:
        v103 ^= v105;
        if (!v103) {
          goto LABEL_228;
        }
      }
    }
  }
LABEL_229:
  if ((v63 & 0x200) == 0)
  {
    if ((_BYTE)v80)
    {
      *(void *)(a1 + 24200) = gleSetVPTransformFuncAll;
      *(void *)(a1 + 24208) = gleSetVPTransformFuncAll;
    }
    goto LABEL_236;
  }
  if (*(void *)(a1 + 24480) || *(unsigned char *)(v13 + 8) || (int v126 = *(_DWORD *)(v13 + 116), (v126 & 1) != 0) || (_BYTE)v80)
  {
    *(void *)(a1 + 24200) = gleSetVPTransformFuncAll;
    *(void *)(a1 + 24208) = gleSetVPTransformFuncAll;
    int v126 = *(_DWORD *)(v13 + 116);
  }
  if ((v126 & 8) == 0)
  {
LABEL_236:
    if (!(_BYTE)v79) {
      goto LABEL_238;
    }
  }
  *(void *)(a1 + 24352) = gleSetGPTransformFuncAll;
  *(void *)(a1 + 24360) = gleSetGPTransformFuncAll;
LABEL_238:
  int v127 = *(_DWORD *)(a1 + 1540);
  if ((a5 & v127 & 0x8000000) != 0)
  {
    if (*(void *)(a1 + 26384))
    {
      v127 &= ~0x8000000u;
      *(_DWORD *)(a1 + 1540) = v127;
    }
    else
    {
      unsigned int v169 = 1282;
    }
  }
  unsigned int v128 = v127 & 0xFFFFFE;
  if ((v127 & 0xFFFFFE) != 0)
  {
    uint64_t v129 = 0;
    unsigned int v130 = v128 >> 1;
    int v131 = *(_DWORD *)(a1 + 2216) & v128;
    do
    {
      if (v130)
      {
        uint64_t v132 = *(void *)(a1 + 19248);
        if (v132)
        {
          uint64_t v133 = v132 + 8 * v129;
          unint64_t v134 = *(void *)(v133 + 2848);
          if (v134 != 0x400040004000400)
          {
            *(_DWORD *)(v13 + 3904) = 0;
            *(_DWORD *)(a1 + 1532) |= 0x800000u;
            if ((unsigned __int16)v134 != 1024) {
              *(_DWORD *)(a1 + 4 * ((unsigned __int16)v134 >> 5) + 1552) |= 1 << v134;
            }
            if ((v134 & 0xFFFF0000) != 0x4000000) {
              *(_DWORD *)(a1 + 4 * (v134 >> 21) + 1552) |= 1 << SBYTE2(v134);
            }
            if ((v134 & 0xFFFF00000000) != 0x40000000000) {
              *(_DWORD *)(a1 + 4 * ((v134 >> 37) & 0x7FF) + 1552) |= 1 << SBYTE4(v134);
            }
            if (HIWORD(v134) != 1024) {
              *(_DWORD *)(a1 + 4 * (v134 >> 53) + 1552) |= 1 << SBYTE6(v134);
            }
          }
          unint64_t v135 = *(void *)(v133 + 3232);
          if (v135 != 0x400040004000400)
          {
            *(_DWORD *)(v13 + 3904) = 0;
            *(_DWORD *)(a1 + 1532) |= 0x800000u;
            if ((unsigned __int16)v135 != 1024) {
              *(_DWORD *)(a1 + 4 * ((unsigned __int16)v135 >> 5) + 1552) |= 1 << v135;
            }
            if ((v135 & 0xFFFF0000) != 0x4000000) {
              *(_DWORD *)(a1 + 4 * (v135 >> 21) + 1552) |= 1 << SBYTE2(v135);
            }
            if ((v135 & 0xFFFF00000000) != 0x40000000000) {
              *(_DWORD *)(a1 + 4 * ((v135 >> 37) & 0x7FF) + 1552) |= 1 << SBYTE4(v135);
            }
            if (HIWORD(v135) != 1024) {
              *(_DWORD *)(a1 + 4 * (v135 >> 53) + 1552) |= 1 << SBYTE6(v135);
            }
          }
        }
        uint64_t v136 = *(void *)(a1 + 19272);
        if (v136)
        {
          uint64_t v137 = v136 + 8 * v129;
          unint64_t v138 = *(void *)(v137 + 2848);
          if (v138 != 0x400040004000400)
          {
            *(_DWORD *)(v13 + 3904) = 0;
            *(_DWORD *)(a1 + 1532) |= 0x4000000u;
            if ((unsigned __int16)v138 != 1024) {
              *(_DWORD *)(a1 + 4 * ((unsigned __int16)v138 >> 5) + 1936) |= 1 << v138;
            }
            if ((v138 & 0xFFFF0000) != 0x4000000) {
              *(_DWORD *)(a1 + 4 * (v138 >> 21) + 1936) |= 1 << SBYTE2(v138);
            }
            if ((v138 & 0xFFFF00000000) != 0x40000000000) {
              *(_DWORD *)(a1 + 4 * ((v138 >> 37) & 0x7FF) + 1936) |= 1 << SBYTE4(v138);
            }
            if (HIWORD(v138) != 1024) {
              *(_DWORD *)(a1 + 4 * (v138 >> 53) + 1936) |= 1 << SBYTE6(v138);
            }
          }
          unint64_t v139 = *(void *)(v137 + 3232);
          if (v139 != 0x400040004000400)
          {
            *(_DWORD *)(v13 + 3904) = 0;
            *(_DWORD *)(a1 + 1532) |= 0x4000000u;
            if ((unsigned __int16)v139 != 1024) {
              *(_DWORD *)(a1 + 4 * ((unsigned __int16)v139 >> 5) + 1936) |= 1 << v139;
            }
            if ((v139 & 0xFFFF0000) != 0x4000000) {
              *(_DWORD *)(a1 + 4 * (v139 >> 21) + 1936) |= 1 << SBYTE2(v139);
            }
            if ((v139 & 0xFFFF00000000) != 0x40000000000) {
              *(_DWORD *)(a1 + 4 * ((v139 >> 37) & 0x7FF) + 1936) |= 1 << SBYTE4(v139);
            }
            if (HIWORD(v139) != 1024) {
              *(_DWORD *)(a1 + 4 * (v139 >> 53) + 1936) |= 1 << SBYTE6(v139);
            }
          }
        }
        uint64_t v140 = *(void *)(a1 + 19280);
        if (v140)
        {
          uint64_t v141 = v140 + 8 * v129;
          unint64_t v142 = *(void *)(v141 + 2848);
          if (v142 != 0x400040004000400)
          {
            *(_DWORD *)(v13 + 3904) = 0;
            *(_DWORD *)(a1 + 1532) |= 0x8000000u;
            if ((unsigned __int16)v142 != 1024) {
              *(_DWORD *)(a1 + 4 * ((unsigned __int16)v142 >> 5) + 2064) |= 1 << v142;
            }
            if ((v142 & 0xFFFF0000) != 0x4000000) {
              *(_DWORD *)(a1 + 4 * (v142 >> 21) + 2064) |= 1 << SBYTE2(v142);
            }
            if ((v142 & 0xFFFF00000000) != 0x40000000000) {
              *(_DWORD *)(a1 + 4 * ((v142 >> 37) & 0x7FF) + 2064) |= 1 << SBYTE4(v142);
            }
            if (HIWORD(v142) != 1024) {
              *(_DWORD *)(a1 + 4 * (v142 >> 53) + 2064) |= 1 << SBYTE6(v142);
            }
          }
          unint64_t v143 = *(void *)(v141 + 3232);
          if (v143 != 0x400040004000400)
          {
            *(_DWORD *)(v13 + 3904) = 0;
            *(_DWORD *)(a1 + 1532) |= 0x8000000u;
            if ((unsigned __int16)v143 != 1024) {
              *(_DWORD *)(a1 + 4 * ((unsigned __int16)v143 >> 5) + 2064) |= 1 << v143;
            }
            if ((v143 & 0xFFFF0000) != 0x4000000) {
              *(_DWORD *)(a1 + 4 * (v143 >> 21) + 2064) |= 1 << SBYTE2(v143);
            }
            if ((v143 & 0xFFFF00000000) != 0x40000000000) {
              *(_DWORD *)(a1 + 4 * ((v143 >> 37) & 0x7FF) + 2064) |= 1 << SBYTE4(v143);
            }
            if (HIWORD(v143) != 1024) {
              *(_DWORD *)(a1 + 4 * (v143 >> 53) + 2064) |= 1 << SBYTE6(v143);
            }
          }
        }
        if ((v131 & (1 << (v129 + 1))) != 0)
        {
          if (v132)
          {
            uint64_t v144 = v132 + 8 * v129;
            unint64_t v145 = *(void *)(v144 + 3040);
            if (v145 != 0x400040004000400)
            {
              *(_DWORD *)(v13 + 3904) = 0;
              *(_DWORD *)(a1 + 1532) |= 0x800000u;
              if ((unsigned __int16)v145 != 1024) {
                *(_DWORD *)(a1 + 4 * ((unsigned __int16)v145 >> 5) + 1552) |= 1 << v145;
              }
              if ((v145 & 0xFFFF0000) != 0x4000000) {
                *(_DWORD *)(a1 + 4 * (v145 >> 21) + 1552) |= 1 << SBYTE2(v145);
              }
              if ((v145 & 0xFFFF00000000) != 0x40000000000) {
                *(_DWORD *)(a1 + 4 * ((v145 >> 37) & 0x7FF) + 1552) |= 1 << SBYTE4(v145);
              }
              if (HIWORD(v145) != 1024) {
                *(_DWORD *)(a1 + 4 * (v145 >> 53) + 1552) |= 1 << SBYTE6(v145);
              }
            }
            unint64_t v146 = *(void *)(v144 + 3424);
            if (v146 != 0x400040004000400)
            {
              *(_DWORD *)(v13 + 3904) = 0;
              *(_DWORD *)(a1 + 1532) |= 0x800000u;
              if ((unsigned __int16)v146 != 1024) {
                *(_DWORD *)(a1 + 4 * ((unsigned __int16)v146 >> 5) + 1552) |= 1 << v146;
              }
              if ((v146 & 0xFFFF0000) != 0x4000000) {
                *(_DWORD *)(a1 + 4 * (v146 >> 21) + 1552) |= 1 << SBYTE2(v146);
              }
              if ((v146 & 0xFFFF00000000) != 0x40000000000) {
                *(_DWORD *)(a1 + 4 * ((v146 >> 37) & 0x7FF) + 1552) |= 1 << SBYTE4(v146);
              }
              if (HIWORD(v146) != 1024) {
                *(_DWORD *)(a1 + 4 * (v146 >> 53) + 1552) |= 1 << SBYTE6(v146);
              }
            }
          }
          if (v136)
          {
            uint64_t v147 = v136 + 8 * v129;
            unint64_t v148 = *(void *)(v147 + 3040);
            if (v148 != 0x400040004000400)
            {
              *(_DWORD *)(v13 + 3904) = 0;
              *(_DWORD *)(a1 + 1532) |= 0x4000000u;
              if ((unsigned __int16)v148 != 1024) {
                *(_DWORD *)(a1 + 4 * ((unsigned __int16)v148 >> 5) + 1936) |= 1 << v148;
              }
              if ((v148 & 0xFFFF0000) != 0x4000000) {
                *(_DWORD *)(a1 + 4 * (v148 >> 21) + 1936) |= 1 << SBYTE2(v148);
              }
              if ((v148 & 0xFFFF00000000) != 0x40000000000) {
                *(_DWORD *)(a1 + 4 * ((v148 >> 37) & 0x7FF) + 1936) |= 1 << SBYTE4(v148);
              }
              if (HIWORD(v148) != 1024) {
                *(_DWORD *)(a1 + 4 * (v148 >> 53) + 1936) |= 1 << SBYTE6(v148);
              }
            }
            unint64_t v149 = *(void *)(v147 + 3424);
            if (v149 != 0x400040004000400)
            {
              *(_DWORD *)(v13 + 3904) = 0;
              *(_DWORD *)(a1 + 1532) |= 0x4000000u;
              if ((unsigned __int16)v149 != 1024) {
                *(_DWORD *)(a1 + 4 * ((unsigned __int16)v149 >> 5) + 1936) |= 1 << v149;
              }
              if ((v149 & 0xFFFF0000) != 0x4000000) {
                *(_DWORD *)(a1 + 4 * (v149 >> 21) + 1936) |= 1 << SBYTE2(v149);
              }
              if ((v149 & 0xFFFF00000000) != 0x40000000000) {
                *(_DWORD *)(a1 + 4 * ((v149 >> 37) & 0x7FF) + 1936) |= 1 << SBYTE4(v149);
              }
              if (HIWORD(v149) != 1024) {
                *(_DWORD *)(a1 + 4 * (v149 >> 53) + 1936) |= 1 << SBYTE6(v149);
              }
            }
          }
          if (v140)
          {
            uint64_t v150 = v140 + 8 * v129;
            unint64_t v151 = *(void *)(v150 + 3040);
            if (v151 != 0x400040004000400)
            {
              *(_DWORD *)(v13 + 3904) = 0;
              *(_DWORD *)(a1 + 1532) |= 0x8000000u;
              if ((unsigned __int16)v151 != 1024) {
                *(_DWORD *)(a1 + 4 * ((unsigned __int16)v151 >> 5) + 2064) |= 1 << v151;
              }
              if ((v151 & 0xFFFF0000) != 0x4000000) {
                *(_DWORD *)(a1 + 4 * (v151 >> 21) + 2064) |= 1 << SBYTE2(v151);
              }
              if ((v151 & 0xFFFF00000000) != 0x40000000000) {
                *(_DWORD *)(a1 + 4 * ((v151 >> 37) & 0x7FF) + 2064) |= 1 << SBYTE4(v151);
              }
              if (HIWORD(v151) != 1024) {
                *(_DWORD *)(a1 + 4 * (v151 >> 53) + 2064) |= 1 << SBYTE6(v151);
              }
            }
            unint64_t v152 = *(void *)(v150 + 3424);
            if (v152 != 0x400040004000400)
            {
              *(_DWORD *)(v13 + 3904) = 0;
              *(_DWORD *)(a1 + 1532) |= 0x8000000u;
              if ((unsigned __int16)v152 != 1024) {
                *(_DWORD *)(a1 + 4 * ((unsigned __int16)v152 >> 5) + 2064) |= 1 << v152;
              }
              if ((v152 & 0xFFFF0000) != 0x4000000) {
                *(_DWORD *)(a1 + 4 * (v152 >> 21) + 2064) |= 1 << SBYTE2(v152);
              }
              if ((v152 & 0xFFFF00000000) != 0x40000000000) {
                *(_DWORD *)(a1 + 4 * ((v152 >> 37) & 0x7FF) + 2064) |= 1 << SBYTE4(v152);
              }
              if (HIWORD(v152) != 1024) {
                *(_DWORD *)(a1 + 4 * (v152 >> 53) + 2064) |= 1 << SBYTE6(v152);
              }
            }
          }
        }
      }
      unsigned int v130 = v128 >> (v129++ + 2);
    }
    while (v130);
  }
  if ((a5 & v127 & 0x60000000) == 0)
  {
LABEL_376:
    if ((v127 & 0x80000000) == 0) {
      goto LABEL_396;
    }
    goto LABEL_389;
  }
  if (!*(unsigned char *)(v9 + 2768) && !*(unsigned char *)(v9 + 2786) || !*(unsigned char *)(v9 + 2771))
  {
    unsigned int v169 = 1282;
    goto LABEL_376;
  }
  int v153 = *(_DWORD *)(v13 + 116);
  if ((v153 & 1) != 0 || !*(unsigned char *)(v13 + 8) || *(void *)(*(void *)(a1 + 24400) + 472))
  {
    v127 &= ~0x40000000u;
    *(_DWORD *)(a1 + 1540) = v127;
    if ((v153 & 0x10) != 0) {
      goto LABEL_388;
    }
  }
  else
  {
    int v156 = v169;
    if ((a5 & 0x40000000) != 0) {
      int v156 = 1282;
    }
    unsigned int v169 = v156;
    if ((v153 & 0x10) != 0)
    {
LABEL_388:
      v127 &= ~0x20000000u;
      *(_DWORD *)(a1 + 1540) = v127;
      if ((v127 & 0x80000000) == 0) {
        goto LABEL_396;
      }
      goto LABEL_389;
    }
  }
  if (!*(unsigned char *)(v13 + 12) || *(void *)(*(void *)(a1 + 24432) + 472)) {
    goto LABEL_388;
  }
  int v154 = v169;
  if ((a5 & 0x20000000) != 0) {
    int v154 = 1282;
  }
  unsigned int v169 = v154;
  if (v127 < 0)
  {
LABEL_389:
    uint64_t v157 = *(void *)(a1 + 28960);
    if (v157 && (*(unsigned char *)(v157 + 479) & 2) != 0 && (*(unsigned char *)(v13 + 116) & 0x10) == 0)
    {
      int v158 = v169;
      if (a5 < 0) {
        int v158 = 1282;
      }
      unsigned int v169 = v158;
    }
    else
    {
      v127 &= ~0x80000000;
    }
  }
LABEL_396:
  *(_DWORD *)(a1 + 1540) = v127 & 0xFC000000;
  int8x8_t v159 = *(int8x8_t *)(a1 + 1544);
  *(int8x8_t *)(a1 + 1544) = vand_s8(v159, (int8x8_t)0x70070000C3FFFFFFLL);
  if (!v169)
  {
    if (a2)
    {
      __int32 v160 = v159.i32[0];
      if ((unsigned __int32)v159.i32[0] >> 30)
      {
        if (v159.i32[0] < 0)
        {
          int8x16_t v162 = vandq_s8(*(int8x16_t *)(a1 + 1520), *(int8x16_t *)(a1 + 2224));
          *(int8x8_t *)v162.i8 = vorr_s8(*(int8x8_t *)v162.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v162, v162, 8uLL));
          if (v162.i32[0] | *(_DWORD *)(a1 + 1536) & *(_DWORD *)(a1 + 2240) | v162.i32[1])
          {
            gleFallbackAttemptToEnd(a1, a2, a3, a4, a5);
            if ((*(_DWORD *)(a1 + 1544) & 0x80000000) == 0) {
              gleUpdateDeferredState(a1, a2, a3, a4, a5);
            }
          }
          *(unsigned char *)(v9 + 2774) = 0;
        }
        else
        {
          if (*(unsigned char *)(v9 + 2774))
          {
            *(unsigned char *)(v9 + 2774) = 0;
            if (!*(unsigned char *)(*(void *)(a1 + 29032) + 101)) {
              *(_DWORD *)(a1 + 1544) = v159.i32[0] & 0x83FFFFFF;
            }
            int v161 = 1;
          }
          else
          {
            int8x16_t v163 = vandq_s8(*(int8x16_t *)(a1 + 1520), *(int8x16_t *)(a1 + 2224));
            *(int8x8_t *)v163.i8 = vorr_s8(*(int8x8_t *)v163.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v163, v163, 8uLL));
            if (v163.i32[0] | *(_DWORD *)(a1 + 1536) & *(_DWORD *)(a1 + 2240) | v163.i32[1])
            {
              int v161 = *(unsigned char *)(*(void *)(a1 + 29032) + 101) == 0;
              *(_DWORD *)(a1 + 1544) = v160 & 0x83FFFFFF;
            }
            else
            {
              int v161 = *(unsigned __int16 *)(a1 + 2276);
            }
          }
          if (*(unsigned __int16 *)(v9 + 118) != v161 || *(unsigned __int16 *)(a1 + 2276) != v161)
          {
            *(_WORD *)(v9 + 118) = v161;
            *(_WORD *)(a1 + 2276) = v161;
            *(_DWORD *)(v13 + 3904) = 0;
            *(_DWORD *)(a1 + 1532) |= 0x80000000;
          }
        }
      }
    }
  }
  if (*(unsigned char *)(v9 + 2787)) {
    *(void *)(a1 + 19192) += mach_absolute_time() - v167;
  }
  return v169;
}

uint64_t gleUpdateDeferredStateGL3(int8x16_t *a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  unsigned int v98 = a5;
  uint64_t v6 = &a1[2030].u8[4];
  int v7 = &a1[1547].i8[4];
  if (a1[2031].i8[7])
  {
    uint64_t v8 = mach_absolute_time();
    a5 = v98;
    uint64_t v96 = v8;
  }
  else
  {
    uint64_t v96 = 0;
  }
  int v9 = a1[96].i32[1];
  if ((a5 & v9 & 0x10000000) != 0)
  {
    gleUpdateCurrentProgramState((uint64_t)a1);
    a1[95].i32[3] |= 0x10000000u;
    unsigned int v10 = a1[96].i32[1] & 0xEFFFFFFF;
    int v11 = *v6;
    *((_DWORD *)v7 + 974) = 0;
    if (v11) {
      unsigned int v12 = 0x80000000;
    }
    else {
      unsigned int v12 = 1610612736;
    }
    int v9 = v10 | v12;
    a1[96].i32[1] = v9;
  }
  unsigned int v13 = a1[96].u32[3];
  if (v13 & 0x80000 | v9 & 0x4000000)
  {
    if (*((_DWORD *)v7 + 1264)
      && ((uint64_t v14 = a1[1810].i64[0]) != 0 ? (v15 = (unsigned __int8 *)(v14 + 552)) : (v15 = (unsigned __int8 *)(v7 + 5052)),
          *v15 >> *(unsigned char *)(a1[1814].i64[1] + 507)))
    {
      *((_DWORD *)v7 + 974) = 0;
      unsigned int v16 = v9 | 0x4000000;
      unsigned int v99 = 1282;
    }
    else
    {
      unsigned int v99 = 0;
      unsigned int v16 = v9 & 0xFBFFFFFF;
    }
    a1[96].i32[1] = v16;
  }
  else
  {
    unsigned int v99 = 0;
  }
  __int32 v17 = a1[138].i32[3];
  int v18 = v17 & v13;
  if ((v17 & v13 & 0x1020000) != 0)
  {
    if ((v7[108] & 0x10) != 0)
    {
      uint64_t v22 = a1[1548].i64[0];
      if (!v22) {
        uint64_t v22 = *(void *)(a1[1548].i64[1] + 72);
      }
      unsigned int v20 = (uint64_t *)(v22 + 3528);
      int v21 = (uint64_t *)(v22 + 3536);
    }
    else if (v7[4])
    {
      uint64_t v19 = a1[1527].i64[0];
      unsigned int v20 = (uint64_t *)(v19 + 152);
      int v21 = (uint64_t *)(v19 + 160);
    }
    else
    {
      uint64_t v23 = a1[1532].i64[0];
      unsigned int v20 = (uint64_t *)(v23 + 112);
      int v21 = (uint64_t *)(v23 + 120);
    }
    uint64_t v24 = *v21;
    uint64_t v25 = *v20;
    uint64_t v26 = (a1[1201].i32[0] ^ v25) & 0x8C0;
    uint64_t v27 = a1[1201].i64[1];
    a1[1201].i64[1] = v24;
    a1[1201].i64[0] = v25;
    if (v27 != v24 || v26 != 0)
    {
      *((_DWORD *)v7 + 974) = 0;
      v13 |= 0x400u;
      a1[96].i32[3] = v13;
      int v18 = v17 & v13;
    }
  }
  if ((v18 & 0x40000) != 0)
  {
    gleUpdateRasterStateProgram((uint64_t)a1);
    unsigned int v13 = a1[96].i32[3] & 0xFFFBFFFF;
    a1[96].i32[3] = v13;
  }
  if ((v18 & 0x70000000) != 0)
  {
    if ((v18 & 0x40000000) != 0)
    {
      gleUpdateFragmentFallbackProgram((uint64_t)a1, 3u);
      unsigned int v13 = a1[96].i32[3] & 0xBFFFFFFF;
      a1[96].i32[3] = v13;
      if ((v18 & 0x20000000) == 0)
      {
LABEL_37:
        if ((v18 & 0x10000000) == 0) {
          goto LABEL_39;
        }
        goto LABEL_38;
      }
    }
    else if ((v18 & 0x20000000) == 0)
    {
      goto LABEL_37;
    }
    gleUpdateVertexFallbackProgram((uint64_t)a1, 1u);
    unsigned int v13 = a1[96].i32[3] & 0xDFFFFFFF;
    a1[96].i32[3] = v13;
    if ((v18 & 0x10000000) != 0)
    {
LABEL_38:
      gleUpdateVertexFallbackProgram((uint64_t)a1, 0);
      unsigned int v13 = a1[96].i32[3] & 0xEFFFFFFF;
      a1[96].i32[3] = v13;
    }
  }
LABEL_39:
  if ((v13 & 2) != 0)
  {
    gleSelectVertexSubmitFunc((uint64_t)a1);
    unsigned int v13 = a1[96].u32[3];
  }
  if ((v13 & 0x8000) != 0)
  {
    gleSelectPrimitiveFunc((uint64_t)a1);
    unsigned int v13 = a1[96].u32[3];
  }
  BOOL v29 = &a1[937].i8[4];
  if ((v13 & 0x400) != 0)
  {
    a1[1742].i64[1] = (uint64_t)gleSetEyeInterpFunc;
    a1[1743].i64[0] = (uint64_t)gleSetEyeInterpFunc;
    a1[1743].i64[1] = (uint64_t)gleSetClipInterpFunc;
    a1[1744].i64[0] = (uint64_t)gleSetClipInterpFunc;
    a1[1744].i64[1] = (uint64_t)gleSetFlatCopyFunc;
    a1[1745].i64[0] = (uint64_t)gleSetFlatCopyFunc;
  }
  if ((v13 & 0x1F00080) != 0)
  {
    uint64_t v30 = 0;
    unint64_t v31 = 0;
    char v32 = 0;
    char v33 = 0;
    int v34 = 1;
    v6[3] = 1;
    double v35 = a1 + 936;
    while (1)
    {
      if (!v34) {
        goto LABEL_107;
      }
      if ((v13 & 0x1000080) != 0)
      {
        if ((v7[108] & 0x10) != 0)
        {
          uint64_t v39 = a1[1548].i64[0];
          if (!v39) {
            uint64_t v39 = *(void *)(a1[1548].i64[1] + 72);
          }
          uint64_t v36 = *(void *)(v39 + 8 * v31 + 3568);
        }
        else
        {
          uint64_t v36 = -1;
        }
        uint64_t v37 = v35[-5].i64[v30] ^ v36;
        v35[-5].i64[v30] = v36;
        if ((v13 & 0x800000) == 0)
        {
LABEL_58:
          uint64_t v38 = v35[-4].i64[v30];
          goto LABEL_63;
        }
      }
      else
      {
        uint64_t v37 = 0;
        uint64_t v36 = v35[-5].i64[v30];
        if ((v13 & 0x800000) == 0) {
          goto LABEL_58;
        }
      }
      if ((v7[108] & 8) != 0)
      {
        uint64_t v40 = a1[1548].i64[0];
        if (!v40) {
          uint64_t v40 = *(void *)(a1[1548].i64[1] + 64);
        }
        uint64_t v38 = *(void *)(v40 + 8 * v31 + 2864);
      }
      else
      {
        uint64_t v38 = -1;
      }
      v37 |= v35[-4].i64[v30] ^ v38;
      v35[-4].i64[v30] = v38;
LABEL_63:
      if (v38 == -1) {
        goto LABEL_68;
      }
      if ((v13 & 0x2000) != 0) {
        char v32 = 1;
      }
      unint64_t v41 = (v38 | v36) & 0x8888888888888888 | (((v38 | v36) & 0x8888888888888888) >> 1);
      if (((v38 ^ v36) & ~(v41 | (v41 >> 2))) != 0)
      {
        int v34 = 0;
        v6[3] = 0;
        *((_DWORD *)v7 + 974) = 0;
        a1[96].i32[1] |= 0x60000000u;
        uint64_t v36 = -1;
LABEL_68:
        if ((v13 & 0x100000) == 0) {
          goto LABEL_69;
        }
        goto LABEL_71;
      }
      v36 &= v38;
      if ((v13 & 0x100000) == 0)
      {
LABEL_69:
        uint64_t v42 = v35[-1].i64[v30];
        goto LABEL_79;
      }
LABEL_71:
      if (v7[108])
      {
        uint64_t v44 = a1[1548].i64[0];
        if (!v44) {
          uint64_t v44 = *(void *)(a1[1548].i64[1] + 40);
        }
        BOOL v43 = (uint64_t *)(v44 + v30 * 8 + 752);
      }
      else
      {
        if (!*v7)
        {
          uint64_t v42 = -1;
          goto LABEL_78;
        }
        BOOL v43 = (uint64_t *)(a1[1525].i64[0] + 8 * v31 + 488);
      }
      uint64_t v42 = *v43;
LABEL_78:
      v37 |= v35[-1].i64[v30] ^ v42;
      v35[-1].i64[v30] = v42;
LABEL_79:
      if (v42 == -1)
      {
        v35->i64[v30] = v36;
        if (v36 != -1) {
          goto LABEL_87;
        }
      }
      else
      {
        if ((v13 & 0x2000) != 0) {
          char v33 = 1;
        }
        unint64_t v45 = (v42 | v36) & 0x8888888888888888 | (((v42 | v36) & 0x8888888888888888) >> 1);
        if (((v42 ^ v36) & ~(v45 | (v45 >> 2))) == 0)
        {
          v35->i64[v30] = v42 & v36;
LABEL_87:
          if (v31 >= *v29) {
            __int8 *v29 = v31 + 1;
          }
          goto LABEL_89;
        }
        int v34 = 0;
        v6[3] = 0;
        *((_DWORD *)v7 + 974) = 0;
        a1[96].i32[1] |= 0x60000000u;
        v35->i64[v30] = -1;
      }
LABEL_89:
      if (v37)
      {
        unint64_t v46 = ~(v37 | (2 * v37) | (4 * (v37 | (2 * v37))));
        LODWORD(v46) = ((v46 >> 6) & 2 | (v46 >> 3) & 1 | (v46 >> 9) & 4 | (v46 >> 12) & 8 | (v46 >> 15) & 0x10 | (v46 >> 18) & 0x20 | (v46 >> 21) & 0x40 | (v46 >> 31 << 7) | (v46 >> 27) & 0x100 | (v46 >> 30) & 0x200 | (v46 >> 33) & 0x400 | (v46 >> 36) & 0x800 | (v46 >> 39) & 0x1000 | (v46 >> 42) & 0x2000 | (v46 >> 45) & 0x4000 | HIWORD(v46) & 0x8000) ^ 0xFFFF;
        a1[95].i32[1] |= v46;
        a1[96].i32[0] |= v46;
        *((_DWORD *)v7 + 974) = 0;
        v13 |= 0x8000000u;
        a1[96].i32[3] = v13;
      }
      ++v31;
      ++v30;
      if (v31 == 2) {
        goto LABEL_107;
      }
    }
  }
  if ((v13 & 0x2000) != 0 && (uint64_t v47 = *v29, *v29))
  {
    char v32 = 0;
    char v33 = 0;
    unsigned int v48 = a1 + 932;
    do
    {
      if (v48->i64[0] != -1) {
        char v32 = 1;
      }
      if (v48[3].i64[0] != -1) {
        char v33 = 1;
      }
      unsigned int v48 = (int8x16_t *)((char *)v48 + 8);
      --v47;
    }
    while (v47);
  }
  else
  {
    char v33 = 0;
    char v32 = 0;
  }
LABEL_107:
  if ((v13 & 0x8000000) != 0)
  {
    uint64_t v49 = *v29;
    if (v49)
    {
      int v50 = 0;
      uint64_t v51 = 0;
      __int32 v52 = a1[95].i32[1];
      unsigned int v53 = (unsigned __int16)(v52 | a1[96].i32[0]);
      int v54 = &a1[2073].i8[8];
      char v55 = a1 + 931;
      while (!v53)
      {
LABEL_133:
        ++v51;
        v50 += 16;
        if (v51 == v49) {
          goto LABEL_134;
        }
      }
      unint64_t v56 = v55[5].u64[v51];
      char v57 = &v55[6].i16[v51];
      int v58 = 16 * v51;
      unsigned int v59 = v53;
      while (1)
      {
        unsigned int v60 = __clz(__rbit32(v59));
        int v61 = 1 << v60;
        unint64_t v62 = (v56 >> (4 * v60)) & 0xF;
        if (v62 >= 0xB)
        {
          uint64_t v72 = v6[12];
          if (v6[12])
          {
            uint64_t v73 = &v54[8 * v50 + 8 * v60];
            do
            {
              *(void *)uint64_t v73 = 0;
              *((void *)v73 + 90) = 0;
              v73 += 1672;
              --v72;
            }
            while (v72);
          }
          *v57 &= ~(_WORD)v61;
          goto LABEL_132;
        }
        uint64_t v63 = a1[1298].i64[11 * (int)(v60 + v58) + 1 + v62];
        uint64_t v64 = a1[1496].i64[v60 + v58];
        if (v64)
        {
          uint64_t v65 = v6[12];
          if (v6[12])
          {
            uint64_t v66 = (uint64_t *)(v63 + 40);
            uint64_t v67 = (uint64_t *)(v64 + 40);
            unsigned int v68 = &v54[8 * v50 + 8 * v60];
            do
            {
              uint64_t v69 = *v66++;
              *(void *)unsigned int v68 = v69;
              uint64_t v70 = *v67++;
              *((void *)v68 + 90) = v70;
              v68 += 1672;
              --v65;
            }
            while (v65);
          }
          uint64_t v71 = (unsigned __int8 *)(v64 + 232);
        }
        else
        {
          uint64_t v74 = v6[12];
          if (v6[12])
          {
            int v75 = &v54[8 * v50 + 8 * v60];
            uint64_t v76 = v63;
            do
            {
              *(void *)int v75 = *(void *)(v76 + 40);
              *((void *)v75 + 90) = *(void *)(v76 + 424);
              v76 += 8;
              v75 += 1672;
              --v74;
            }
            while (v74);
          }
          uint64_t v71 = (unsigned __int8 *)(v63 + 597);
        }
        int v77 = *v71;
        int v78 = (unsigned __int16)*v57;
        int v79 = v61 & v78;
        if ((v77 & ~*(unsigned __int8 *)(v63 + 596)) != 0)
        {
          if (v79)
          {
            __int16 v80 = v78 & ~(_WORD)v61;
LABEL_131:
            *char v57 = v80;
            *((_DWORD *)v7 + 974) = 0;
            v52 |= v61;
            a1[95].i32[1] = v52;
          }
        }
        else if (!v79)
        {
          __int16 v80 = v78 | v61;
          goto LABEL_131;
        }
LABEL_132:
        v59 ^= v61;
        if (!v59) {
          goto LABEL_133;
        }
      }
    }
  }
LABEL_134:
  if ((v13 & 0x200) == 0)
  {
    uint64_t v81 = v98;
    if (v33)
    {
      a1[1512].i64[1] = (uint64_t)gleSetVPTransformFuncAll;
      a1[1513].i64[0] = (uint64_t)gleSetVPTransformFuncAll;
    }
    goto LABEL_141;
  }
  uint64_t v81 = v98;
  if (a1[1530].i64[0] || *v7 || (int v82 = *((_DWORD *)v7 + 27), (v82 & 1) != 0) || v33)
  {
    a1[1512].i64[1] = (uint64_t)gleSetVPTransformFuncAll;
    a1[1513].i64[0] = (uint64_t)gleSetVPTransformFuncAll;
    int v82 = *((_DWORD *)v7 + 27);
  }
  if ((v82 & 8) == 0)
  {
LABEL_141:
    if (!v32) {
      goto LABEL_143;
    }
  }
  a1[1522].i64[0] = (uint64_t)gleSetGPTransformFuncAll;
  a1[1522].i64[1] = (uint64_t)gleSetGPTransformFuncAll;
LABEL_143:
  __int32 v83 = a1[96].i32[1];
  if ((v81 & v83 & 0x8000000) != 0)
  {
    if (a1[1649].i64[0])
    {
      v83 &= ~0x8000000u;
      a1[96].i32[1] = v83;
    }
    else
    {
      unsigned int v99 = 1282;
    }
  }
  if ((v81 & v83 & 0x60000000) == 0)
  {
LABEL_161:
    if ((v83 & 0x80000000) == 0) {
      goto LABEL_169;
    }
    goto LABEL_162;
  }
  if (!*v6 && !v6[18] || !v6[3])
  {
    unsigned int v99 = 1282;
    if ((v83 & 0x80000000) == 0) {
      goto LABEL_169;
    }
    goto LABEL_162;
  }
  int v84 = *((_DWORD *)v7 + 27);
  if (v84)
  {
    v83 &= ~0x40000000u;
    a1[96].i32[1] = v83;
    if ((v84 & 0x10) != 0)
    {
LABEL_160:
      v83 &= ~0x20000000u;
      a1[96].i32[1] = v83;
      goto LABEL_161;
    }
  }
  else
  {
    int v85 = v99;
    if ((v81 & 0x40000000) != 0) {
      int v85 = 1282;
    }
    unsigned int v99 = v85;
    if ((v84 & 0x10) != 0) {
      goto LABEL_160;
    }
  }
  if (a1[1124].i8[0]) {
    goto LABEL_160;
  }
  int v92 = v99;
  if ((v81 & 0x20000000) != 0) {
    int v92 = 1282;
  }
  unsigned int v99 = v92;
  if (v83 < 0)
  {
LABEL_162:
    uint64_t v86 = a1[1810].i64[0];
    if (v86 && (*(unsigned char *)(v86 + 479) & 2) != 0 && (v7[108] & 0x10) == 0)
    {
      int v87 = v99;
      if ((int)v81 < 0) {
        int v87 = 1282;
      }
      unsigned int v99 = v87;
    }
    else
    {
      v83 &= ~0x80000000;
    }
  }
LABEL_169:
  a1[96].i32[1] = v83 & 0xFC000000;
  unsigned __int32 v88 = a1[96].u32[2];
  a1[96].i32[2] = v88 & 0xC3FFFFFF;
  a1[96].i32[3] = v13 & 0x70070000;
  if (!v99 && a2 && v88 >> 30)
  {
    if ((v88 & 0x80000000) != 0)
    {
      int8x16_t v90 = vandq_s8(a1[95], a1[139]);
      *(int8x8_t *)v90.i8 = vorr_s8(*(int8x8_t *)v90.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v90, v90, 8uLL));
      if (v90.i32[0] | a1[96].i32[0] & a1[140].i32[0] | v90.i32[1])
      {
        gleFallbackAttemptToEnd(a1, a2, a3, a4, v81);
        if ((a1[96].i32[2] & 0x80000000) == 0) {
          gleUpdateDeferredStateGL3(a1, a2, a3, a4, v98);
        }
      }
      v6[6] = 0;
    }
    else
    {
      if (v6[6])
      {
        v6[6] = 0;
        if (!*(unsigned char *)(a1[1814].i64[1] + 101)) {
          a1[96].i32[2] = v88 & 0x83FFFFFF;
        }
        int v89 = 1;
      }
      else
      {
        int8x16_t v91 = vandq_s8(a1[95], a1[139]);
        *(int8x8_t *)v91.i8 = vorr_s8(*(int8x8_t *)v91.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v91, v91, 8uLL));
        if (v91.i32[0] | a1[96].i32[0] & a1[140].i32[0] | v91.i32[1])
        {
          int v89 = *(unsigned char *)(a1[1814].i64[1] + 101) == 0;
          a1[96].i32[2] = v88 & 0x83FFFFFF;
        }
        else
        {
          int v89 = a1[142].u16[2];
        }
      }
      if (*((unsigned __int16 *)v7 + 2539) != v89 || a1[142].u16[2] != v89)
      {
        *((_WORD *)v7 + 2539) = v89;
        a1[142].i16[2] = v89;
        *((_DWORD *)v7 + 974) = 0;
        a1[95].i32[3] |= 0x80000000;
      }
    }
  }
  if (v6[19]) {
    a1[1199].i64[1] += mach_absolute_time() - v96;
  }
  return v99;
}

uint64_t gleUpdateDeferredStateES2(int8x16_t *a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  unsigned int v99 = a5;
  uint64_t v6 = &a1[2030].u8[4];
  int v7 = &a1[1547].i8[4];
  if (a1[2031].i8[7])
  {
    uint64_t v8 = mach_absolute_time();
    a5 = v99;
    uint64_t v97 = v8;
  }
  else
  {
    uint64_t v97 = 0;
  }
  int v9 = a1[96].i32[1];
  if ((a5 & v9 & 0x10000000) != 0)
  {
    gleUpdateCurrentProgramState((uint64_t)a1);
    a1[95].i32[3] |= 0x10000000u;
    unsigned int v10 = a1[96].i32[1] & 0xEFFFFFFF;
    int v11 = *v6;
    *((_DWORD *)v7 + 974) = 0;
    if (v11) {
      unsigned int v12 = 0x80000000;
    }
    else {
      unsigned int v12 = 1610612736;
    }
    int v9 = v10 | v12;
    a1[96].i32[1] = v9;
  }
  unsigned int v13 = a1[96].u32[3];
  if (v13 & 0x80000 | v9 & 0x4000000)
  {
    if (*((_DWORD *)v7 + 1264)
      && ((uint64_t v14 = a1[1810].i64[0]) != 0 ? (v15 = (unsigned __int8 *)(v14 + 552)) : (v15 = (unsigned __int8 *)(v7 + 5052)),
          *v15 >> *(unsigned char *)(a1[1814].i64[1] + 507)))
    {
      *((_DWORD *)v7 + 974) = 0;
      unsigned int v16 = v9 | 0x4000000;
      unsigned int v100 = 1282;
    }
    else
    {
      unsigned int v100 = 0;
      unsigned int v16 = v9 & 0xFBFFFFFF;
    }
    a1[96].i32[1] = v16;
  }
  else
  {
    unsigned int v100 = 0;
  }
  __int32 v17 = a1[138].i32[3];
  int v18 = v17 & v13;
  if ((v17 & v13 & 0x1020000) != 0)
  {
    if ((v7[108] & 0x10) != 0)
    {
      uint64_t v22 = a1[1548].i64[0];
      if (!v22) {
        uint64_t v22 = *(void *)(a1[1548].i64[1] + 72);
      }
      unsigned int v20 = (uint64_t *)(v22 + 3528);
      int v21 = (uint64_t *)(v22 + 3536);
    }
    else if (v7[4])
    {
      uint64_t v19 = a1[1527].i64[0];
      unsigned int v20 = (uint64_t *)(v19 + 152);
      int v21 = (uint64_t *)(v19 + 160);
    }
    else
    {
      uint64_t v23 = a1[1532].i64[0];
      unsigned int v20 = (uint64_t *)(v23 + 112);
      int v21 = (uint64_t *)(v23 + 120);
    }
    uint64_t v24 = *v21;
    uint64_t v25 = *v20;
    uint64_t v26 = (a1[1201].i32[0] ^ v25) & 0x8C0;
    uint64_t v27 = a1[1201].i64[1];
    a1[1201].i64[1] = v24;
    a1[1201].i64[0] = v25;
    if (v27 != v24 || v26 != 0)
    {
      *((_DWORD *)v7 + 974) = 0;
      v13 |= 0x400u;
      a1[96].i32[3] = v13;
      int v18 = v17 & v13;
    }
  }
  if ((v18 & 0x40000) != 0)
  {
    gleUpdateRasterStateProgram((uint64_t)a1);
    unsigned int v13 = a1[96].i32[3] & 0xFFFBFFFF;
    a1[96].i32[3] = v13;
  }
  if ((v18 & 0x70000000) != 0)
  {
    if ((v18 & 0x40000000) != 0)
    {
      gleUpdateFragmentFallbackProgram((uint64_t)a1, 3u);
      unsigned int v13 = a1[96].i32[3] & 0xBFFFFFFF;
      a1[96].i32[3] = v13;
      if ((v18 & 0x20000000) == 0)
      {
LABEL_37:
        if ((v18 & 0x10000000) == 0) {
          goto LABEL_39;
        }
        goto LABEL_38;
      }
    }
    else if ((v18 & 0x20000000) == 0)
    {
      goto LABEL_37;
    }
    gleUpdateVertexFallbackProgram((uint64_t)a1, 1u);
    unsigned int v13 = a1[96].i32[3] & 0xDFFFFFFF;
    a1[96].i32[3] = v13;
    if ((v18 & 0x10000000) != 0)
    {
LABEL_38:
      gleUpdateVertexFallbackProgram((uint64_t)a1, 0);
      unsigned int v13 = a1[96].i32[3] & 0xEFFFFFFF;
      a1[96].i32[3] = v13;
    }
  }
LABEL_39:
  if ((v13 & 2) != 0)
  {
    gleSelectVertexSubmitFunc((uint64_t)a1);
    unsigned int v13 = a1[96].u32[3];
  }
  if ((v13 & 0x8000) != 0)
  {
    gleSelectPrimitiveFunc((uint64_t)a1);
    unsigned int v13 = a1[96].u32[3];
  }
  BOOL v29 = &a1[937].i8[4];
  if ((v13 & 0x400) != 0)
  {
    a1[1742].i64[1] = (uint64_t)gleSetEyeInterpFunc;
    a1[1743].i64[0] = (uint64_t)gleSetEyeInterpFunc;
    a1[1743].i64[1] = (uint64_t)gleSetClipInterpFunc;
    a1[1744].i64[0] = (uint64_t)gleSetClipInterpFunc;
    a1[1744].i64[1] = (uint64_t)gleSetFlatCopyFunc;
    a1[1745].i64[0] = (uint64_t)gleSetFlatCopyFunc;
  }
  if ((v13 & 0x1F00080) != 0)
  {
    uint64_t v30 = 0;
    unint64_t v31 = 0;
    char v32 = 0;
    char v33 = 0;
    int v34 = 1;
    v6[3] = 1;
    double v35 = a1 + 936;
    while (1)
    {
      if (!v34) {
        goto LABEL_107;
      }
      if ((v13 & 0x1000080) != 0)
      {
        if ((v7[108] & 0x10) != 0)
        {
          uint64_t v39 = a1[1548].i64[0];
          if (!v39) {
            uint64_t v39 = *(void *)(a1[1548].i64[1] + 72);
          }
          uint64_t v36 = *(void *)(v39 + 8 * v31 + 3568);
        }
        else
        {
          uint64_t v36 = -1;
        }
        uint64_t v37 = v35[-5].i64[v30] ^ v36;
        v35[-5].i64[v30] = v36;
        if ((v13 & 0x800000) == 0)
        {
LABEL_58:
          uint64_t v38 = v35[-4].i64[v30];
          goto LABEL_63;
        }
      }
      else
      {
        uint64_t v37 = 0;
        uint64_t v36 = v35[-5].i64[v30];
        if ((v13 & 0x800000) == 0) {
          goto LABEL_58;
        }
      }
      if ((v7[108] & 8) != 0)
      {
        uint64_t v40 = a1[1548].i64[0];
        if (!v40) {
          uint64_t v40 = *(void *)(a1[1548].i64[1] + 64);
        }
        uint64_t v38 = *(void *)(v40 + 8 * v31 + 2864);
      }
      else
      {
        uint64_t v38 = -1;
      }
      v37 |= v35[-4].i64[v30] ^ v38;
      v35[-4].i64[v30] = v38;
LABEL_63:
      if (v38 == -1) {
        goto LABEL_68;
      }
      if ((v13 & 0x2000) != 0) {
        char v32 = 1;
      }
      unint64_t v41 = (v38 | v36) & 0x8888888888888888 | (((v38 | v36) & 0x8888888888888888) >> 1);
      if (((v38 ^ v36) & ~(v41 | (v41 >> 2))) != 0)
      {
        int v34 = 0;
        v6[3] = 0;
        *((_DWORD *)v7 + 974) = 0;
        a1[96].i32[1] |= 0x60000000u;
        uint64_t v36 = -1;
LABEL_68:
        if ((v13 & 0x100000) == 0) {
          goto LABEL_69;
        }
        goto LABEL_71;
      }
      v36 &= v38;
      if ((v13 & 0x100000) == 0)
      {
LABEL_69:
        uint64_t v42 = v35[-1].i64[v30];
        goto LABEL_79;
      }
LABEL_71:
      if (v7[108])
      {
        uint64_t v44 = a1[1548].i64[0];
        if (!v44) {
          uint64_t v44 = *(void *)(a1[1548].i64[1] + 40);
        }
        BOOL v43 = (uint64_t *)(v44 + v30 * 8 + 752);
      }
      else
      {
        if (!*v7)
        {
          uint64_t v42 = -1;
          goto LABEL_78;
        }
        BOOL v43 = (uint64_t *)(a1[1525].i64[0] + 8 * v31 + 488);
      }
      uint64_t v42 = *v43;
LABEL_78:
      v37 |= v35[-1].i64[v30] ^ v42;
      v35[-1].i64[v30] = v42;
LABEL_79:
      if (v42 == -1)
      {
        v35->i64[v30] = v36;
        if (v36 != -1) {
          goto LABEL_87;
        }
      }
      else
      {
        if ((v13 & 0x2000) != 0) {
          char v33 = 1;
        }
        unint64_t v45 = (v42 | v36) & 0x8888888888888888 | (((v42 | v36) & 0x8888888888888888) >> 1);
        if (((v42 ^ v36) & ~(v45 | (v45 >> 2))) == 0)
        {
          v35->i64[v30] = v42 & v36;
LABEL_87:
          if (v31 >= *v29) {
            __int8 *v29 = v31 + 1;
          }
          goto LABEL_89;
        }
        int v34 = 0;
        v6[3] = 0;
        *((_DWORD *)v7 + 974) = 0;
        a1[96].i32[1] |= 0x60000000u;
        v35->i64[v30] = -1;
      }
LABEL_89:
      if (v37)
      {
        unint64_t v46 = ~(v37 | (2 * v37) | (4 * (v37 | (2 * v37))));
        LODWORD(v46) = ((v46 >> 6) & 2 | (v46 >> 3) & 1 | (v46 >> 9) & 4 | (v46 >> 12) & 8 | (v46 >> 15) & 0x10 | (v46 >> 18) & 0x20 | (v46 >> 21) & 0x40 | (v46 >> 31 << 7) | (v46 >> 27) & 0x100 | (v46 >> 30) & 0x200 | (v46 >> 33) & 0x400 | (v46 >> 36) & 0x800 | (v46 >> 39) & 0x1000 | (v46 >> 42) & 0x2000 | (v46 >> 45) & 0x4000 | HIWORD(v46) & 0x8000) ^ 0xFFFF;
        a1[95].i32[1] |= v46;
        a1[96].i32[0] |= v46;
        *((_DWORD *)v7 + 974) = 0;
        v13 |= 0x8000000u;
        a1[96].i32[3] = v13;
      }
      ++v31;
      ++v30;
      if (v31 == 2) {
        goto LABEL_107;
      }
    }
  }
  if ((v13 & 0x2000) != 0 && (uint64_t v47 = *v29, *v29))
  {
    char v32 = 0;
    char v33 = 0;
    unsigned int v48 = a1 + 932;
    do
    {
      if (v48->i64[0] != -1) {
        char v32 = 1;
      }
      if (v48[3].i64[0] != -1) {
        char v33 = 1;
      }
      unsigned int v48 = (int8x16_t *)((char *)v48 + 8);
      --v47;
    }
    while (v47);
  }
  else
  {
    char v33 = 0;
    char v32 = 0;
  }
LABEL_107:
  if ((v13 & 0x8000000) != 0)
  {
    uint64_t v49 = *v29;
    if (v49)
    {
      int v50 = 0;
      uint64_t v51 = 0;
      __int32 v52 = a1[95].i32[1];
      unsigned int v53 = (unsigned __int16)(v52 | a1[96].i32[0]);
      int v54 = &a1[2073].i8[8];
      char v55 = a1 + 931;
      while (!v53)
      {
LABEL_133:
        ++v51;
        v50 += 16;
        if (v51 == v49) {
          goto LABEL_134;
        }
      }
      unint64_t v56 = v55[5].u64[v51];
      char v57 = &v55[6].i16[v51];
      int v58 = 16 * v51;
      unsigned int v59 = v53;
      while (1)
      {
        unsigned int v60 = __clz(__rbit32(v59));
        int v61 = 1 << v60;
        unint64_t v62 = (v56 >> (4 * v60)) & 0xF;
        if (v62 >= 0xB)
        {
          uint64_t v72 = v6[12];
          if (v6[12])
          {
            uint64_t v73 = &v54[8 * v50 + 8 * v60];
            do
            {
              *(void *)uint64_t v73 = 0;
              *((void *)v73 + 90) = 0;
              v73 += 1672;
              --v72;
            }
            while (v72);
          }
          *v57 &= ~(_WORD)v61;
          goto LABEL_132;
        }
        uint64_t v63 = a1[1298].i64[11 * (int)(v60 + v58) + 1 + v62];
        uint64_t v64 = a1[1496].i64[v60 + v58];
        if (v64)
        {
          uint64_t v65 = v6[12];
          if (v6[12])
          {
            uint64_t v66 = (uint64_t *)(v63 + 40);
            uint64_t v67 = (uint64_t *)(v64 + 40);
            unsigned int v68 = &v54[8 * v50 + 8 * v60];
            do
            {
              uint64_t v69 = *v66++;
              *(void *)unsigned int v68 = v69;
              uint64_t v70 = *v67++;
              *((void *)v68 + 90) = v70;
              v68 += 1672;
              --v65;
            }
            while (v65);
          }
          uint64_t v71 = (unsigned __int8 *)(v64 + 232);
        }
        else
        {
          uint64_t v74 = v6[12];
          if (v6[12])
          {
            int v75 = &v54[8 * v50 + 8 * v60];
            uint64_t v76 = v63;
            do
            {
              *(void *)int v75 = *(void *)(v76 + 40);
              *((void *)v75 + 90) = *(void *)(v76 + 424);
              v76 += 8;
              v75 += 1672;
              --v74;
            }
            while (v74);
          }
          uint64_t v71 = (unsigned __int8 *)(v63 + 597);
        }
        int v77 = *v71;
        int v78 = (unsigned __int16)*v57;
        int v79 = v61 & v78;
        if ((v77 & ~*(unsigned __int8 *)(v63 + 596)) != 0)
        {
          if (v79)
          {
            __int16 v80 = v78 & ~(_WORD)v61;
LABEL_131:
            *char v57 = v80;
            *((_DWORD *)v7 + 974) = 0;
            v52 |= v61;
            a1[95].i32[1] = v52;
          }
        }
        else if (!v79)
        {
          __int16 v80 = v78 | v61;
          goto LABEL_131;
        }
LABEL_132:
        v59 ^= v61;
        if (!v59) {
          goto LABEL_133;
        }
      }
    }
  }
LABEL_134:
  if ((v13 & 0x200) == 0)
  {
    uint64_t v81 = v99;
    if (v33)
    {
      a1[1512].i64[1] = (uint64_t)gleSetVPTransformFuncAll;
      a1[1513].i64[0] = (uint64_t)gleSetVPTransformFuncAll;
    }
    goto LABEL_141;
  }
  uint64_t v81 = v99;
  if (a1[1530].i64[0] || *v7 || (int v82 = *((_DWORD *)v7 + 27), (v82 & 1) != 0) || v33)
  {
    a1[1512].i64[1] = (uint64_t)gleSetVPTransformFuncAll;
    a1[1513].i64[0] = (uint64_t)gleSetVPTransformFuncAll;
    int v82 = *((_DWORD *)v7 + 27);
  }
  if ((v82 & 8) == 0)
  {
LABEL_141:
    if (!v32) {
      goto LABEL_143;
    }
  }
  a1[1522].i64[0] = (uint64_t)gleSetGPTransformFuncAll;
  a1[1522].i64[1] = (uint64_t)gleSetGPTransformFuncAll;
LABEL_143:
  __int32 v83 = a1[96].i32[1];
  if ((v81 & v83 & 0x8000000) != 0)
  {
    if (a1[1649].i64[0])
    {
      v83 &= ~0x8000000u;
      a1[96].i32[1] = v83;
    }
    else
    {
      unsigned int v100 = 1282;
    }
  }
  if ((v81 & v83 & 0x60000000) == 0)
  {
LABEL_164:
    if ((v83 & 0x80000000) == 0) {
      goto LABEL_172;
    }
    goto LABEL_165;
  }
  if (!*v6 && !v6[18] || !v6[3])
  {
    if (a1[1548].i64[0] || a1[1548].i64[1]) {
      int v86 = 1282;
    }
    else {
      int v86 = 16711680;
    }
    unsigned int v100 = v86;
    if ((v83 & 0x80000000) == 0) {
      goto LABEL_172;
    }
    goto LABEL_165;
  }
  int v84 = *((_DWORD *)v7 + 27);
  if (v84)
  {
    v83 &= ~0x40000000u;
    a1[96].i32[1] = v83;
    if ((v84 & 0x10) != 0)
    {
LABEL_163:
      v83 &= ~0x20000000u;
      a1[96].i32[1] = v83;
      goto LABEL_164;
    }
  }
  else
  {
    int v85 = v100;
    if ((v81 & 0x40000000) != 0) {
      int v85 = 1282;
    }
    unsigned int v100 = v85;
    if ((v84 & 0x10) != 0) {
      goto LABEL_163;
    }
  }
  if (a1[1124].i8[0]) {
    goto LABEL_163;
  }
  int v93 = v100;
  if ((v81 & 0x20000000) != 0) {
    int v93 = 1282;
  }
  unsigned int v100 = v93;
  if (v83 < 0)
  {
LABEL_165:
    uint64_t v87 = a1[1810].i64[0];
    if (v87 && (*(unsigned char *)(v87 + 479) & 2) != 0 && (v7[108] & 0x10) == 0)
    {
      int v88 = v100;
      if ((int)v81 < 0) {
        int v88 = 1282;
      }
      unsigned int v100 = v88;
    }
    else
    {
      v83 &= ~0x80000000;
    }
  }
LABEL_172:
  a1[96].i32[1] = v83 & 0xFC000000;
  unsigned __int32 v89 = a1[96].u32[2];
  a1[96].i32[2] = v89 & 0xC3FFFFFF;
  a1[96].i32[3] = v13 & 0x70070000;
  if (!v100 && a2 && v89 >> 30)
  {
    if ((v89 & 0x80000000) != 0)
    {
      int8x16_t v91 = vandq_s8(a1[95], a1[139]);
      *(int8x8_t *)v91.i8 = vorr_s8(*(int8x8_t *)v91.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v91, v91, 8uLL));
      if (v91.i32[0] | a1[96].i32[0] & a1[140].i32[0] | v91.i32[1])
      {
        gleFallbackAttemptToEnd((unint64_t)a1, a2, a3, a4, v81);
        if ((a1[96].i32[2] & 0x80000000) == 0) {
          gleUpdateDeferredStateES2(a1, a2, a3, a4, v99);
        }
      }
      v6[6] = 0;
    }
    else
    {
      if (v6[6])
      {
        v6[6] = 0;
        if (!*(unsigned char *)(a1[1814].i64[1] + 101)) {
          a1[96].i32[2] = v89 & 0x83FFFFFF;
        }
        int v90 = 1;
      }
      else
      {
        int8x16_t v92 = vandq_s8(a1[95], a1[139]);
        *(int8x8_t *)v92.i8 = vorr_s8(*(int8x8_t *)v92.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v92, v92, 8uLL));
        if (v92.i32[0] | a1[96].i32[0] & a1[140].i32[0] | v92.i32[1])
        {
          int v90 = *(unsigned char *)(a1[1814].i64[1] + 101) == 0;
          a1[96].i32[2] = v89 & 0x83FFFFFF;
        }
        else
        {
          int v90 = a1[142].u16[2];
        }
      }
      if (*((unsigned __int16 *)v7 + 2539) != v90 || a1[142].u16[2] != v90)
      {
        *((_WORD *)v7 + 2539) = v90;
        a1[142].i16[2] = v90;
        *((_DWORD *)v7 + 974) = 0;
        a1[95].i32[3] |= 0x80000000;
      }
    }
  }
  if (v6[19]) {
    a1[1199].i64[1] += mach_absolute_time() - v97;
  }
  return v100;
}

uint64_t gleUpdateDrawFramebufferState(uint64_t a1, double a2, double a3, double a4)
{
  uint64_t v5 = a1 + 28652;
  if (*(unsigned char *)(a1 + 32503)) {
    uint64_t v6 = mach_absolute_time();
  }
  else {
    uint64_t v6 = 0;
  }
  unsigned int v7 = *(_DWORD *)(v5 + 1148);
  if ((v7 & 0x10000000) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 28960);
    *(unsigned char *)(v5 + 3834) = 1;
    if (!v8)
    {
      uint64_t v13 = *(void *)(a1 + 29480);
      int v14 = *(unsigned __int8 *)(v13 + 43);
      if (*(unsigned __int8 *)(v5 + 3836) != v14)
      {
        *(unsigned char *)(v5 + 3836) = v14;
        gleUpdateDrawColorClamping(a1, a2, a3, a4);
        uint64_t v13 = *(void *)(a1 + 29480);
      }
      if (!*(unsigned char *)(v13 + 57)) {
        goto LABEL_26;
      }
      *(_DWORD *)uint64_t v5 = 0;
      int v11 = (_DWORD *)(a1 + 1548);
      unsigned int v12 = 0x40000;
      goto LABEL_25;
    }
    int v9 = *(_DWORD *)(v8 + 480);
    if (!v9) {
      goto LABEL_11;
    }
    if (v9 == 0xFFFF)
    {
      gleUpdateFramebufferCompleteness(a1, v8 + 40);
      int v9 = *(_DWORD *)(v8 + 480);
    }
    if (v9)
    {
      *(unsigned char *)(v5 + 3834) = 0;
      *(_DWORD *)uint64_t v5 = 0;
      *(_DWORD *)(v5 + 1148) |= 0x20000000u;
    }
    else if (*(unsigned char *)(v5 + 3834))
    {
LABEL_11:
      if (*(unsigned char *)(v8 + 88 * *(unsigned __int8 *)(v5 + 3848) + 640)) {
        (*(void (**)(void, void))(*(void *)(a1 + 29496) + 528))(*(void *)(a1 + 29472), *(void *)(v8 + 8 * *(unsigned __int8 *)(v5 + 3848) + 200));
      }
    }
    if (*(unsigned char *)(v8 + 88 * *(unsigned __int8 *)(v5 + 3848) + 641))
    {
      *(unsigned char *)(v5 + 3834) = 0;
      *(_DWORD *)uint64_t v5 = 0;
      *(_DWORD *)(v5 + 1148) |= 0x20000000u;
    }
    int v10 = *(_DWORD *)(v8 + 524) != 0;
    if (*(unsigned __int8 *)(v5 + 3836) != v10)
    {
      *(unsigned char *)(v5 + 3836) = v10;
      gleUpdateDrawColorClamping(a1, a2, a3, a4);
    }
    if (*(void *)(v8 + 184))
    {
      *(_DWORD *)uint64_t v5 = 0;
      *(_DWORD *)(a1 + 1548) |= 0x40000u;
    }
    if (!*(unsigned char *)(v5 + 3834)) {
      goto LABEL_26;
    }
    *(_DWORD *)uint64_t v5 = 0;
    int v11 = (_DWORD *)(a1 + 1540);
    unsigned int v12 = 0x80000000;
LABEL_25:
    *v11 |= v12;
LABEL_26:
    gleUpdatePointSmooth(a1);
    unsigned int v7 = *(_DWORD *)(v5 + 1148) & 0xEFFFFFFF;
    *(_DWORD *)(v5 + 1148) = v7;
  }
  if ((v7 & 0x20000000) == 0) {
    goto LABEL_33;
  }
  if (!*(unsigned char *)(v5 + 3834)) {
    goto LABEL_40;
  }
  if (!*(void *)(a1 + 29008) && !*(void *)(a1 + 28960))
  {
    if (!*(unsigned char *)(v5 + 3825) || *(unsigned char *)(v5 + 3849) != 4) {
      goto LABEL_41;
    }
LABEL_40:
    uint64_t v15 = 1286;
    goto LABEL_42;
  }
  if (!*(unsigned char *)(v5 + 3825))
  {
LABEL_41:
    uint64_t v15 = 16711680;
    goto LABEL_42;
  }
  v7 &= ~0x20000000u;
  *(_DWORD *)(v5 + 1148) = v7;
LABEL_33:
  if ((v7 & 0x443C0478) != 0)
  {
    if ((*(unsigned int (**)(void, void))(*(void *)(a1 + 29496) + 160))(*(void *)(a1 + 29464), v7 & 0x443C0478) == 2)
    {
      *(_DWORD *)uint64_t v5 = 0;
      *(_DWORD *)(a1 + 1520) |= 0x80u;
    }
    uint64_t v15 = 0;
    *(_DWORD *)(v5 + 1148) &= 0xBBC3FB87;
  }
  else
  {
    uint64_t v15 = 0;
  }
LABEL_42:
  if (*(unsigned char *)(v5 + 3851)) {
    *(void *)(a1 + 19200) += mach_absolute_time() - v6;
  }
  return v15;
}

uint64_t gleUpdateReadFramebufferState(uint64_t a1)
{
  uint64_t v2 = a1 + 28652;
  if (*(unsigned char *)(a1 + 32503)) {
    uint64_t v3 = mach_absolute_time();
  }
  else {
    uint64_t v3 = 0;
  }
  *(_DWORD *)uint64_t v2 = 0;
  unsigned int v4 = *(_DWORD *)(v2 + 1148);
  if ((v4 & 0x2000000) == 0) {
    goto LABEL_20;
  }
  uint64_t v5 = *(void *)(a1 + 28968);
  *(unsigned char *)(v2 + 3833) = 1;
  if (v5)
  {
    int v6 = *(_DWORD *)(v5 + 480);
    if (!v6) {
      goto LABEL_11;
    }
    if (v6 == 0xFFFF)
    {
      gleUpdateFramebufferCompleteness(a1, v5 + 40);
      int v6 = *(_DWORD *)(v5 + 480);
    }
    if (v6)
    {
      *(unsigned char *)(v2 + 3833) = 0;
      *(_DWORD *)(v2 + 1148) |= 0x8000000u;
    }
    else if (*(unsigned char *)(v2 + 3833))
    {
LABEL_11:
      if (*(unsigned char *)(v5 + 88 * *(unsigned __int8 *)(v2 + 3848) + 640)) {
        (*(void (**)(void, void))(*(void *)(a1 + 29496) + 528))(*(void *)(a1 + 29472), *(void *)(v5 + 8 * *(unsigned __int8 *)(v2 + 3848) + 200));
      }
    }
    if (*(unsigned char *)(v5 + 88 * *(unsigned __int8 *)(v2 + 3848) + 641))
    {
      *(unsigned char *)(v2 + 3833) = 0;
      *(_DWORD *)(v2 + 1148) |= 0x8000000u;
    }
    int v7 = *(unsigned __int8 *)(v2 + 3837);
    int v8 = *(_DWORD *)(v5 + 524) != 0;
    goto LABEL_17;
  }
  int v7 = *(unsigned __int8 *)(v2 + 3837);
  int v8 = *(unsigned __int8 *)(*(void *)(a1 + 29480) + 43);
LABEL_17:
  if (v7 != v8)
  {
    *(unsigned char *)(v2 + 3837) = v8;
    gleUpdateReadColorClamping(a1);
  }
  unsigned int v4 = *(_DWORD *)(v2 + 1148) & 0xFDFFFFFF;
  *(_DWORD *)(v2 + 1148) = v4;
LABEL_20:
  if ((v4 & 0x8000000) == 0) {
    goto LABEL_25;
  }
  if (!*(unsigned char *)(v2 + 3833))
  {
    uint64_t v9 = 1286;
    goto LABEL_29;
  }
  if (*(void *)(a1 + 29008) || *(void *)(a1 + 28968))
  {
    v4 &= ~0x8000000u;
    *(_DWORD *)(v2 + 1148) = v4;
LABEL_25:
    if ((v4 & 0x80000000) != 0)
    {
      (*(void (**)(void, void))(*(void *)(a1 + 29496) + 152))(*(void *)(a1 + 29464), v4 & 0x80000000);
      uint64_t v9 = 0;
      *(_DWORD *)(v2 + 1148) &= ~0x80000000;
    }
    else
    {
      uint64_t v9 = 0;
    }
    goto LABEL_29;
  }
  if (*(unsigned char *)(v2 + 3849) == 4) {
    uint64_t v9 = 1286;
  }
  else {
    uint64_t v9 = 16711680;
  }
LABEL_29:
  if (*(unsigned char *)(v2 + 3851)) {
    *(void *)(a1 + 19208) += mach_absolute_time() - v3;
  }
  return v9;
}

uint64_t gleUpdateDepthRangeDataIndexed(uint64_t result, unsigned int a2)
{
  uint64_t v2 = result + 144 * a2;
  double v3 = *(double *)(v2 + 9280);
  float v4 = v3;
  *(float *)(v2 + 9328) = v4;
  double v5 = *(double *)(v2 + 9288);
  float v6 = v5;
  *(float *)(v2 + 9332) = v6;
  *(float *)(v2 + 9336) = v6 - v4;
  *(float *)&double v3 = v5 - v3;
  *(float *)(v2 + 9256) = *(float *)&v3 * 0.5;
  *(float *)(v2 + 9224) = *(float *)&v3 * 0.5;
  *(float *)&double v3 = v4 + (float)(*(float *)&v3 * 0.5);
  *(_DWORD *)(v2 + 9272) = LODWORD(v3);
  *(_DWORD *)(v2 + 9240) = LODWORD(v3);
  *(_DWORD *)(result + 36 * a2 + 28712) = 1065353216;
  if (*(unsigned char *)(result + 15205)) {
    *(_DWORD *)(result + 1520) |= 0x200u;
  }
  *(_DWORD *)(result + 28652) = 0;
  *(_DWORD *)(result + 1528) |= 1u;
  return result;
}

uint64_t gleDoSelectiveDispatchCore(unint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, __n128 a6, double a7, double a8)
{
  uint64_t v13 = (unsigned __int8 *)(a1 + 28680);
  int v14 = (unsigned int *)(a1 + 19152);
  if ((*(unsigned char *)(a1 + 1540) & 4) != 0)
  {
    int MatrixIdentifier = gleGenerateMatrixIdentifier(a1, a1 + 9488, a6.n128_f64[0], a7, a8);
    *int v14 = *v14 & 0xFFFFFEFF | ((MatrixIdentifier != -1074791426) << 8);
    *((_DWORD *)v13 + 263) = MatrixIdentifier;
  }
  if ((*((_DWORD *)v13 + 280) & 0x743C0478) != 0)
  {
    int updated = gleUpdateDrawFramebufferState(a1, a6.n128_f64[0], a7, a8);
    if (updated) {
      goto LABEL_93;
    }
  }
  unsigned int v18 = v14[2374];
  if ((v18 & a2) == 0)
  {
    if (*(_WORD *)(*(void *)(a1 + 29032) + 26) & 0x800) != 0 && *(unsigned char *)(a1 + 15377) && ((v18 | a2))
    {
      v14[2375] = 0;
      *(_DWORD *)(a1 + 1548) |= 0x30000u;
    }
    *(_DWORD *)(a1 + 1524) |= 0x80000000;
    v14[2374] = 0;
  }
  if ((*v13 & a3) == 0)
  {
    *(_DWORD *)(a1 + 1524) |= 0x2000000u;
    *uint64_t v13 = 0;
  }
  if ((v13[2] & a4) == 0)
  {
    *(_DWORD *)(a1 + 1524) |= 0x4000000u;
    void v13[2] = 0;
  }
  if (*(_DWORD *)(a1 + 2216) & *(_DWORD *)(a1 + 1544) | *(_DWORD *)(a1 + 2220) & *(_DWORD *)(a1 + 1548) | (*(_DWORD *)(a1 + 2212) | a5) & *(_DWORD *)(a1 + 1540))
  {
    int updated = gleUpdateDeferredState(a1, a2, a3, a4, a5, a6, a7, a8);
    if (updated)
    {
LABEL_93:
      if (updated == 16711680 || *((_WORD *)v13 + 576)) {
        return 0;
      }
      uint64_t v17 = 0;
      *((_WORD *)v13 + 576) = updated;
      return v17;
    }
  }
  int8x16_t v19 = *(int8x16_t *)(a1 + 1520);
  int8x16_t v20 = vandq_s8(v19, *(int8x16_t *)(a1 + 2224));
  int8x8_t v21 = vorr_s8(*(int8x8_t *)v20.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL));
  if (v21.i32[0] | *(_DWORD *)(a1 + 1536) & *(_DWORD *)(a1 + 2240) | v21.i32[1])
  {
    if ((v19.i16[6] & 0x1000) != 0)
    {
      uint64_t v22 = *(void **)(a1 + 26384);
      if (v22)
      {
        uint64_t v23 = v22[118];
        if (v23)
        {
          uint64_t v24 = v22 + 118;
          if (v13[3816])
          {
            unint64_t v25 = 0;
            uint64_t v26 = v22[119];
            uint64_t v27 = v22 + 221;
            do
            {
              *(v27 - 1) |= v23;
              *v27 |= v26;
              ++v25;
              v27 += 35;
            }
            while (v25 < v13[3816]);
          }
          *uint64_t v24 = 0;
          v24[1] = 0;
        }
      }
    }
    *(_DWORD *)(a1 + 2280) = a2;
    *(unsigned char *)(a1 + 2284) = a3;
    *(unsigned char *)(a1 + 2285) = a4;
    gleUpdateContextStateBuffers(a1);
    if (v13[3823]) {
      uint64_t v28 = mach_absolute_time();
    }
    else {
      uint64_t v28 = 0;
    }
    int v29 = (*(uint64_t (**)(void, unint64_t, unint64_t))(*(void *)(a1 + 29448) + 144))(*(void *)(a1 + 29016), a1 + 29040, a1 + 1520);
    gleUpdateDispatchJIT(a1);
    if (v13[3823]) {
      *(void *)(a1 + 19176) += mach_absolute_time() - v28;
    }
    int v30 = *((_DWORD *)v13 + 279) ^ v29;
    if ((v30 & 0x47) != 0)
    {
      if ((v30 & 0x45) != 0 && (int v31 = gleUpdateDispatchCodeChange(a1, v29, a5)) != 0)
      {
        uint64_t v17 = 0;
        if (!*((_WORD *)v13 + 576)) {
          *((_WORD *)v13 + 576) = v31;
        }
      }
      else
      {
        uint64_t v17 = 1;
      }
      if ((v29 & 2) != 0)
      {
        BOOL v32 = *(void *)(a1 + 26280) != 0;
        uint64_t v33 = *(void *)(a1 + 29032);
        uint64_t v34 = *(void *)(v33 + 536);
        *(void *)(a1 + 26280) = v34;
        uint64_t v35 = *(void *)(v33 + 544);
        *(void *)(a1 + 26288) = v35;
        if (v34 && !*(unsigned char *)(v34 + 2)) {
          *(unsigned char *)(v34 + 2) = 1;
        }
        char v36 = v32 ^ (v34 == 0);
        if (v35 && !*(unsigned char *)(v35 + 2)) {
          *(unsigned char *)(v35 + 2) = 1;
        }
        if ((v36 & 1) == 0) {
          gleSelectPrimitiveFunc(a1);
        }
        gleSelectVertexSubmitFunc(a1);
      }
      if ((v29 & 0x20) != 0) {
        goto LABEL_52;
      }
    }
    else
    {
      uint64_t v17 = 1;
      if ((v29 & 0x20) != 0) {
        goto LABEL_52;
      }
    }
    unsigned int v37 = v14[2374];
    if ((v37 & a2) != 0)
    {
LABEL_56:
      *(_DWORD *)(a1 + 2280) = v37;
      if ((v29 & 0x80) != 0 || (LODWORD(v40) = *v13, (v40 & a3) == 0))
      {
        uint64_t v41 = 0;
        uint64_t v40 = *(void *)(a1 + 29032);
        do
        {
          if ((*(unsigned char *)(v40 + 632 + v41) & a3) != 0) {
            break;
          }
          ++v41;
        }
        while (v41 != 4);
        LOBYTE(v40) = *(unsigned char *)(v40 + v41 + 632);
        *uint64_t v13 = v40;
      }
      *(unsigned char *)(a1 + 2284) = v40;
      if ((v29 & 0x100) != 0 || (LODWORD(v42) = v13[2], (v42 & a4) == 0))
      {
        uint64_t v43 = 0;
        uint64_t v42 = *(void *)(a1 + 29032);
        do
        {
          if ((*(unsigned char *)(v42 + 636 + v43) & a4) != 0) {
            break;
          }
          ++v43;
        }
        while (v43 != 4);
        LOBYTE(v42) = *(unsigned char *)(v42 + v43 + 636);
        void v13[2] = v42;
      }
      *(unsigned char *)(a1 + 2285) = v42;
      int v44 = *(_DWORD *)(a1 + 1532);
      if ((v44 & 0xF836000) != 0)
      {
        if ((v29 & 1) != 0 && (v44 & 0x802000) != 0)
        {
          *(_OWORD *)(a1 + 1664) = 0u;
          *(_OWORD *)(a1 + 1648) = 0u;
          *(_OWORD *)(a1 + 1632) = 0u;
          *(_OWORD *)(a1 + 1616) = 0u;
          *(_OWORD *)(a1 + 1600) = 0u;
          *(_OWORD *)(a1 + 1584) = 0u;
          *(_OWORD *)(a1 + 1568) = 0u;
          *(_OWORD *)(a1 + 1552) = 0u;
        }
        if ((v29 & 1) != 0 && (v44 & 0x1004000) != 0)
        {
          *(_OWORD *)(a1 + 1792) = 0u;
          *(_OWORD *)(a1 + 1776) = 0u;
          *(_OWORD *)(a1 + 1760) = 0u;
          *(_OWORD *)(a1 + 1744) = 0u;
          *(_OWORD *)(a1 + 1728) = 0u;
          *(_OWORD *)(a1 + 1712) = 0u;
          *(_OWORD *)(a1 + 1696) = 0u;
          *(_OWORD *)(a1 + 1680) = 0u;
        }
        if ((v29 & 1) != 0 && (v44 & 0x2008000) != 0)
        {
          *(_OWORD *)(a1 + 1920) = 0u;
          *(_OWORD *)(a1 + 1904) = 0u;
          *(_OWORD *)(a1 + 1888) = 0u;
          *(_OWORD *)(a1 + 1872) = 0u;
          *(_OWORD *)(a1 + 1856) = 0u;
          *(_OWORD *)(a1 + 1840) = 0u;
          *(_OWORD *)(a1 + 1824) = 0u;
          *(_OWORD *)(a1 + 1808) = 0u;
        }
        if ((v29 & 1) != 0 && (v44 & 0x4010000) != 0)
        {
          *(_OWORD *)(a1 + 2048) = 0u;
          *(_OWORD *)(a1 + 2032) = 0u;
          *(_OWORD *)(a1 + 2016) = 0u;
          *(_OWORD *)(a1 + 2000) = 0u;
          *(_OWORD *)(a1 + 1984) = 0u;
          *(_OWORD *)(a1 + 1968) = 0u;
          *(_OWORD *)(a1 + 1952) = 0u;
          *(_OWORD *)(a1 + 1936) = 0u;
        }
        if ((v29 & 4) != 0 && (v44 & 0x8020000) != 0)
        {
          *(_OWORD *)(a1 + 2176) = 0u;
          *(_OWORD *)(a1 + 2160) = 0u;
          *(_OWORD *)(a1 + 2144) = 0u;
          *(_OWORD *)(a1 + 2128) = 0u;
          *(_OWORD *)(a1 + 2112) = 0u;
          *(_OWORD *)(a1 + 2096) = 0u;
          *(_OWORD *)(a1 + 2080) = 0u;
          *(_OWORD *)(a1 + 2064) = 0u;
        }
      }
      *(void *)(a1 + 1520) = 0;
      *(void *)(a1 + 1528) = 0;
      *(_DWORD *)(a1 + 1536) = 0;
      goto LABEL_85;
    }
LABEL_52:
    uint64_t v38 = 0;
    uint64_t v39 = *(void *)(a1 + 29032);
    do
    {
      if ((*(_DWORD *)(v39 + 584 + 4 * v38) & a2) != 0) {
        break;
      }
      ++v38;
    }
    while (v38 != 8);
    unsigned int v37 = *(_DWORD *)(v39 + 4 * v38 + 584);
    v14[2374] = v37;
    goto LABEL_56;
  }
  uint64_t v17 = 1;
LABEL_85:
  if (!*(_DWORD *)(a1 + 1540))
  {
    v14[2375] = v14[2376] & v14[2374];
    v13[1] = *v13;
    v13[3] = v13[2];
  }
  return v17;
}

uint64_t gleDoDrawDispatchCore(unint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, __n128 a5, double a6, double a7)
{
  int v11 = (unsigned __int8 *)(a1 + 28680);
  unsigned int v12 = (unsigned int *)(a1 + 19152);
  if ((*(unsigned char *)(a1 + 1540) & 4) != 0)
  {
    int MatrixIdentifier = gleGenerateMatrixIdentifier(a1, a1 + 9488, a5.n128_f64[0], a6, a7);
    *unsigned int v12 = *v12 & 0xFFFFFEFF | ((MatrixIdentifier != -1074791426) << 8);
    *((_DWORD *)v11 + 263) = MatrixIdentifier;
  }
  if ((*((_DWORD *)v11 + 280) & 0x743C0478) != 0)
  {
    int updated = gleUpdateDrawFramebufferState(a1, a5.n128_f64[0], a6, a7);
    if (updated) {
      goto LABEL_96;
    }
  }
  unsigned int v16 = v12[2374];
  if ((v16 & a2) == 0)
  {
    if (*(_WORD *)(*(void *)(a1 + 29032) + 26) & 0x800) != 0 && *(unsigned char *)(a1 + 15377) && ((v16 | a2))
    {
      v12[2375] = 0;
      *(_DWORD *)(a1 + 1548) |= 0x30000u;
    }
    *(_DWORD *)(a1 + 1524) |= 0x80000000;
    v12[2374] = 0;
  }
  if ((*v11 & a3) == 0)
  {
    *(_DWORD *)(a1 + 1524) |= 0x2000000u;
    *int v11 = 0;
  }
  if ((v11[2] & a4) == 0)
  {
    *(_DWORD *)(a1 + 1524) |= 0x4000000u;
    v11[2] = 0;
  }
  if (*(_DWORD *)(a1 + 2216) & *(_DWORD *)(a1 + 1544) | *(_DWORD *)(a1 + 2220) & *(_DWORD *)(a1 + 1548) | (*(_DWORD *)(a1 + 2212) | 0xFC000000) & *(_DWORD *)(a1 + 1540))
  {
    int updated = gleUpdateDeferredState(a1, a2, a3, a4, -67108864, a5, a6, a7);
    if (updated)
    {
LABEL_96:
      if (updated != 16711680 && !*((_WORD *)v11 + 576))
      {
        uint64_t v15 = 0;
        *((_WORD *)v11 + 576) = updated;
        return v15;
      }
      return 0;
    }
  }
  if ((v12[2376] & a2) == 0)
  {
    if (!*((_WORD *)v11 + 576))
    {
      uint64_t v15 = 0;
      *((_WORD *)v11 + 576) = 1282;
      return v15;
    }
    return 0;
  }
  int8x16_t v17 = *(int8x16_t *)(a1 + 1520);
  int8x16_t v18 = vandq_s8(v17, *(int8x16_t *)(a1 + 2224));
  int8x8_t v19 = vorr_s8(*(int8x8_t *)v18.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL));
  if (v19.i32[0] | *(_DWORD *)(a1 + 1536) & *(_DWORD *)(a1 + 2240) | v19.i32[1])
  {
    if ((v17.i16[6] & 0x1000) != 0)
    {
      int8x16_t v20 = *(void **)(a1 + 26384);
      if (v20)
      {
        uint64_t v21 = v20[118];
        if (v21)
        {
          uint64_t v22 = v20 + 118;
          if (v11[3816])
          {
            unint64_t v23 = 0;
            uint64_t v24 = v20[119];
            unint64_t v25 = v20 + 221;
            do
            {
              *(v25 - 1) |= v21;
              *v25 |= v24;
              ++v23;
              v25 += 35;
            }
            while (v23 < v11[3816]);
          }
          void *v22 = 0;
          v22[1] = 0;
        }
      }
    }
    *(_DWORD *)(a1 + 2280) = a2;
    *(unsigned char *)(a1 + 2284) = a3;
    *(unsigned char *)(a1 + 2285) = a4;
    gleUpdateContextStateBuffers(a1);
    if (v11[3823]) {
      uint64_t v26 = mach_absolute_time();
    }
    else {
      uint64_t v26 = 0;
    }
    uint64_t v27 = (*(uint64_t (**)(void, unint64_t, unint64_t))(*(void *)(a1 + 29448) + 144))(*(void *)(a1 + 29016), a1 + 29040, a1 + 1520);
    v28.n128_f64[0] = gleUpdateDispatchJIT(a1);
    if (v11[3823]) {
      *(void *)(a1 + 19176) += mach_absolute_time() - v26;
    }
    int v29 = *((_DWORD *)v11 + 279) ^ v27;
    if ((v29 & 0x47) != 0)
    {
      if ((v29 & 0x45) != 0 && (int v30 = gleUpdateDispatchCodeChange(a1, v27, 4227858432, v28)) != 0)
      {
        uint64_t v15 = 0;
        if (!*((_WORD *)v11 + 576)) {
          *((_WORD *)v11 + 576) = v30;
        }
      }
      else
      {
        uint64_t v15 = 1;
      }
      if ((v27 & 2) != 0)
      {
        BOOL v31 = *(void *)(a1 + 26280) != 0;
        uint64_t v32 = *(void *)(a1 + 29032);
        uint64_t v33 = *(void *)(v32 + 536);
        *(void *)(a1 + 26280) = v33;
        uint64_t v34 = *(void *)(v32 + 544);
        *(void *)(a1 + 26288) = v34;
        if (v33 && !*(unsigned char *)(v33 + 2)) {
          *(unsigned char *)(v33 + 2) = 1;
        }
        char v35 = v31 ^ (v33 == 0);
        if (v34 && !*(unsigned char *)(v34 + 2)) {
          *(unsigned char *)(v34 + 2) = 1;
        }
        if ((v35 & 1) == 0) {
          gleSelectPrimitiveFunc(a1);
        }
        gleSelectVertexSubmitFunc(a1);
      }
      if ((v27 & 0x20) != 0) {
        goto LABEL_55;
      }
    }
    else
    {
      uint64_t v15 = 1;
      if ((v27 & 0x20) != 0) {
        goto LABEL_55;
      }
    }
    unsigned int v36 = v12[2374];
    if ((v36 & a2) != 0)
    {
LABEL_59:
      *(_DWORD *)(a1 + 2280) = v36;
      if ((v27 & 0x80) != 0 || (LODWORD(v39) = *v11, (v39 & a3) == 0))
      {
        uint64_t v40 = 0;
        uint64_t v39 = *(void *)(a1 + 29032);
        do
        {
          if ((*(unsigned char *)(v39 + 632 + v40) & a3) != 0) {
            break;
          }
          ++v40;
        }
        while (v40 != 4);
        LOBYTE(v39) = *(unsigned char *)(v39 + v40 + 632);
        *int v11 = v39;
      }
      *(unsigned char *)(a1 + 2284) = v39;
      if ((v27 & 0x100) != 0 || (LODWORD(v41) = v11[2], (v41 & a4) == 0))
      {
        uint64_t v42 = 0;
        uint64_t v41 = *(void *)(a1 + 29032);
        do
        {
          if ((*(unsigned char *)(v41 + 636 + v42) & a4) != 0) {
            break;
          }
          ++v42;
        }
        while (v42 != 4);
        LOBYTE(v41) = *(unsigned char *)(v41 + v42 + 636);
        v11[2] = v41;
      }
      *(unsigned char *)(a1 + 2285) = v41;
      int v43 = *(_DWORD *)(a1 + 1532);
      if ((v43 & 0xF836000) != 0)
      {
        if ((v27 & 1) != 0 && (v43 & 0x802000) != 0)
        {
          *(_OWORD *)(a1 + 1664) = 0u;
          *(_OWORD *)(a1 + 1648) = 0u;
          *(_OWORD *)(a1 + 1632) = 0u;
          *(_OWORD *)(a1 + 1616) = 0u;
          *(_OWORD *)(a1 + 1600) = 0u;
          *(_OWORD *)(a1 + 1584) = 0u;
          *(_OWORD *)(a1 + 1568) = 0u;
          *(_OWORD *)(a1 + 1552) = 0u;
        }
        if ((v27 & 1) != 0 && (v43 & 0x1004000) != 0)
        {
          *(_OWORD *)(a1 + 1792) = 0u;
          *(_OWORD *)(a1 + 1776) = 0u;
          *(_OWORD *)(a1 + 1760) = 0u;
          *(_OWORD *)(a1 + 1744) = 0u;
          *(_OWORD *)(a1 + 1728) = 0u;
          *(_OWORD *)(a1 + 1712) = 0u;
          *(_OWORD *)(a1 + 1696) = 0u;
          *(_OWORD *)(a1 + 1680) = 0u;
        }
        if ((v27 & 1) != 0 && (v43 & 0x2008000) != 0)
        {
          *(_OWORD *)(a1 + 1920) = 0u;
          *(_OWORD *)(a1 + 1904) = 0u;
          *(_OWORD *)(a1 + 1888) = 0u;
          *(_OWORD *)(a1 + 1872) = 0u;
          *(_OWORD *)(a1 + 1856) = 0u;
          *(_OWORD *)(a1 + 1840) = 0u;
          *(_OWORD *)(a1 + 1824) = 0u;
          *(_OWORD *)(a1 + 1808) = 0u;
        }
        if ((v27 & 1) != 0 && (v43 & 0x4010000) != 0)
        {
          *(_OWORD *)(a1 + 2048) = 0u;
          *(_OWORD *)(a1 + 2032) = 0u;
          *(_OWORD *)(a1 + 2016) = 0u;
          *(_OWORD *)(a1 + 2000) = 0u;
          *(_OWORD *)(a1 + 1984) = 0u;
          *(_OWORD *)(a1 + 1968) = 0u;
          *(_OWORD *)(a1 + 1952) = 0u;
          *(_OWORD *)(a1 + 1936) = 0u;
        }
        if ((v27 & 4) != 0 && (v43 & 0x8020000) != 0)
        {
          *(_OWORD *)(a1 + 2176) = 0u;
          *(_OWORD *)(a1 + 2160) = 0u;
          *(_OWORD *)(a1 + 2144) = 0u;
          *(_OWORD *)(a1 + 2128) = 0u;
          *(_OWORD *)(a1 + 2112) = 0u;
          *(_OWORD *)(a1 + 2096) = 0u;
          *(_OWORD *)(a1 + 2080) = 0u;
          *(_OWORD *)(a1 + 2064) = 0u;
        }
      }
      *(void *)(a1 + 1520) = 0;
      *(void *)(a1 + 1528) = 0;
      *(_DWORD *)(a1 + 1536) = 0;
      goto LABEL_88;
    }
LABEL_55:
    uint64_t v37 = 0;
    uint64_t v38 = *(void *)(a1 + 29032);
    do
    {
      if ((*(_DWORD *)(v38 + 584 + 4 * v37) & a2) != 0) {
        break;
      }
      ++v37;
    }
    while (v37 != 8);
    unsigned int v36 = *(_DWORD *)(v38 + 4 * v37 + 584);
    v12[2374] = v36;
    goto LABEL_59;
  }
  uint64_t v15 = 1;
LABEL_88:
  if (!*(_DWORD *)(a1 + 1540))
  {
    v12[2375] = v12[2376] & v12[2374];
    v11[1] = *v11;
    v11[3] = v11[2];
  }
  return v15;
}

uint64_t gleDoDrawDispatchCoreGL3(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, double a5, double a6, double a7)
{
  int v11 = (unsigned __int8 *)(a1 + 28680);
  unsigned int v12 = (unsigned int *)(a1 + 19152);
  if ((*(unsigned char *)(a1 + 1540) & 4) != 0)
  {
    int MatrixIdentifier = gleGenerateMatrixIdentifier(a1, a1 + 9488, a5, a6, a7);
    *unsigned int v12 = *v12 & 0xFFFFFEFF | ((MatrixIdentifier != -1074791426) << 8);
    *((_DWORD *)v11 + 263) = MatrixIdentifier;
  }
  if ((*((_DWORD *)v11 + 280) & 0x743C0478) != 0)
  {
    int updated = gleUpdateDrawFramebufferState(a1, a5, a6, a7);
    if (updated) {
      goto LABEL_96;
    }
  }
  unsigned int v16 = v12[2374];
  if ((v16 & a2) == 0)
  {
    if (*(_WORD *)(*(void *)(a1 + 29032) + 26) & 0x800) != 0 && *(unsigned char *)(a1 + 15377) && ((v16 | a2))
    {
      v12[2375] = 0;
      *(_DWORD *)(a1 + 1548) |= 0x30000u;
    }
    *(_DWORD *)(a1 + 1524) |= 0x80000000;
    v12[2374] = 0;
  }
  if ((*v11 & a3) == 0)
  {
    *(_DWORD *)(a1 + 1524) |= 0x2000000u;
    *int v11 = 0;
  }
  if ((v11[2] & a4) == 0)
  {
    *(_DWORD *)(a1 + 1524) |= 0x4000000u;
    v11[2] = 0;
  }
  if (*(_DWORD *)(a1 + 2216) & *(_DWORD *)(a1 + 1544) | *(_DWORD *)(a1 + 2220) & *(_DWORD *)(a1 + 1548) | (*(_DWORD *)(a1 + 2212) | 0xFC000000) & *(_DWORD *)(a1 + 1540))
  {
    int updated = gleUpdateDeferredStateGL3((int8x16_t *)a1, a2, a3, a4, 0xFC000000);
    if (updated)
    {
LABEL_96:
      if (updated != 16711680 && !*((_WORD *)v11 + 576))
      {
        uint64_t v15 = 0;
        *((_WORD *)v11 + 576) = updated;
        return v15;
      }
      return 0;
    }
  }
  if ((v12[2376] & a2) == 0)
  {
    if (!*((_WORD *)v11 + 576))
    {
      uint64_t v15 = 0;
      *((_WORD *)v11 + 576) = 1282;
      return v15;
    }
    return 0;
  }
  int8x16_t v17 = *(int8x16_t *)(a1 + 1520);
  int8x16_t v18 = vandq_s8(v17, *(int8x16_t *)(a1 + 2224));
  int8x8_t v19 = vorr_s8(*(int8x8_t *)v18.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL));
  if (v19.i32[0] | *(_DWORD *)(a1 + 1536) & *(_DWORD *)(a1 + 2240) | v19.i32[1])
  {
    if ((v17.i16[6] & 0x1000) != 0)
    {
      int8x16_t v20 = *(void **)(a1 + 26384);
      if (v20)
      {
        uint64_t v21 = v20[118];
        if (v21)
        {
          uint64_t v22 = v20 + 118;
          if (v11[3816])
          {
            unint64_t v23 = 0;
            uint64_t v24 = v20[119];
            unint64_t v25 = v20 + 221;
            do
            {
              *(v25 - 1) |= v21;
              *v25 |= v24;
              ++v23;
              v25 += 35;
            }
            while (v23 < v11[3816]);
          }
          void *v22 = 0;
          v22[1] = 0;
        }
      }
    }
    *(_DWORD *)(a1 + 2280) = a2;
    *(unsigned char *)(a1 + 2284) = a3;
    *(unsigned char *)(a1 + 2285) = a4;
    gleUpdateContextStateBuffers(a1);
    if (v11[3823]) {
      uint64_t v26 = mach_absolute_time();
    }
    else {
      uint64_t v26 = 0;
    }
    uint64_t v27 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)(a1 + 29448) + 144))(*(void *)(a1 + 29016), a1 + 29040, a1 + 1520);
    v28.n128_f64[0] = gleUpdateDispatchJIT(a1);
    if (v11[3823]) {
      *(void *)(a1 + 19176) += mach_absolute_time() - v26;
    }
    int v29 = *((_DWORD *)v11 + 279) ^ v27;
    if ((v29 & 0x47) != 0)
    {
      if ((v29 & 0x45) != 0 && (int v30 = gleUpdateDispatchCodeChange(a1, v27, 4227858432, v28)) != 0)
      {
        uint64_t v15 = 0;
        if (!*((_WORD *)v11 + 576)) {
          *((_WORD *)v11 + 576) = v30;
        }
      }
      else
      {
        uint64_t v15 = 1;
      }
      if ((v27 & 2) != 0)
      {
        BOOL v31 = *(void *)(a1 + 26280) != 0;
        uint64_t v32 = *(void *)(a1 + 29032);
        uint64_t v33 = *(void *)(v32 + 536);
        *(void *)(a1 + 26280) = v33;
        uint64_t v34 = *(void *)(v32 + 544);
        *(void *)(a1 + 26288) = v34;
        if (v33 && !*(unsigned char *)(v33 + 2)) {
          *(unsigned char *)(v33 + 2) = 1;
        }
        char v35 = v31 ^ (v33 == 0);
        if (v34 && !*(unsigned char *)(v34 + 2)) {
          *(unsigned char *)(v34 + 2) = 1;
        }
        if ((v35 & 1) == 0) {
          gleSelectPrimitiveFunc(a1);
        }
        gleSelectVertexSubmitFunc(a1);
      }
      if ((v27 & 0x20) != 0) {
        goto LABEL_55;
      }
    }
    else
    {
      uint64_t v15 = 1;
      if ((v27 & 0x20) != 0) {
        goto LABEL_55;
      }
    }
    unsigned int v36 = v12[2374];
    if ((v36 & a2) != 0)
    {
LABEL_59:
      *(_DWORD *)(a1 + 2280) = v36;
      if ((v27 & 0x80) != 0 || (LODWORD(v39) = *v11, (v39 & a3) == 0))
      {
        uint64_t v40 = 0;
        uint64_t v39 = *(void *)(a1 + 29032);
        do
        {
          if ((*(unsigned char *)(v39 + 632 + v40) & a3) != 0) {
            break;
          }
          ++v40;
        }
        while (v40 != 4);
        LOBYTE(v39) = *(unsigned char *)(v39 + v40 + 632);
        *int v11 = v39;
      }
      *(unsigned char *)(a1 + 2284) = v39;
      if ((v27 & 0x100) != 0 || (LODWORD(v41) = v11[2], (v41 & a4) == 0))
      {
        uint64_t v42 = 0;
        uint64_t v41 = *(void *)(a1 + 29032);
        do
        {
          if ((*(unsigned char *)(v41 + 636 + v42) & a4) != 0) {
            break;
          }
          ++v42;
        }
        while (v42 != 4);
        LOBYTE(v41) = *(unsigned char *)(v41 + v42 + 636);
        v11[2] = v41;
      }
      *(unsigned char *)(a1 + 2285) = v41;
      int v43 = *(_DWORD *)(a1 + 1532);
      if ((v43 & 0xF836000) != 0)
      {
        if ((v27 & 1) != 0 && (v43 & 0x802000) != 0)
        {
          *(_OWORD *)(a1 + 1664) = 0u;
          *(_OWORD *)(a1 + 1648) = 0u;
          *(_OWORD *)(a1 + 1632) = 0u;
          *(_OWORD *)(a1 + 1616) = 0u;
          *(_OWORD *)(a1 + 1600) = 0u;
          *(_OWORD *)(a1 + 1584) = 0u;
          *(_OWORD *)(a1 + 1568) = 0u;
          *(_OWORD *)(a1 + 1552) = 0u;
        }
        if ((v27 & 1) != 0 && (v43 & 0x1004000) != 0)
        {
          *(_OWORD *)(a1 + 1792) = 0u;
          *(_OWORD *)(a1 + 1776) = 0u;
          *(_OWORD *)(a1 + 1760) = 0u;
          *(_OWORD *)(a1 + 1744) = 0u;
          *(_OWORD *)(a1 + 1728) = 0u;
          *(_OWORD *)(a1 + 1712) = 0u;
          *(_OWORD *)(a1 + 1696) = 0u;
          *(_OWORD *)(a1 + 1680) = 0u;
        }
        if ((v27 & 1) != 0 && (v43 & 0x2008000) != 0)
        {
          *(_OWORD *)(a1 + 1920) = 0u;
          *(_OWORD *)(a1 + 1904) = 0u;
          *(_OWORD *)(a1 + 1888) = 0u;
          *(_OWORD *)(a1 + 1872) = 0u;
          *(_OWORD *)(a1 + 1856) = 0u;
          *(_OWORD *)(a1 + 1840) = 0u;
          *(_OWORD *)(a1 + 1824) = 0u;
          *(_OWORD *)(a1 + 1808) = 0u;
        }
        if ((v27 & 1) != 0 && (v43 & 0x4010000) != 0)
        {
          *(_OWORD *)(a1 + 2048) = 0u;
          *(_OWORD *)(a1 + 2032) = 0u;
          *(_OWORD *)(a1 + 2016) = 0u;
          *(_OWORD *)(a1 + 2000) = 0u;
          *(_OWORD *)(a1 + 1984) = 0u;
          *(_OWORD *)(a1 + 1968) = 0u;
          *(_OWORD *)(a1 + 1952) = 0u;
          *(_OWORD *)(a1 + 1936) = 0u;
        }
        if ((v27 & 4) != 0 && (v43 & 0x8020000) != 0)
        {
          *(_OWORD *)(a1 + 2176) = 0u;
          *(_OWORD *)(a1 + 2160) = 0u;
          *(_OWORD *)(a1 + 2144) = 0u;
          *(_OWORD *)(a1 + 2128) = 0u;
          *(_OWORD *)(a1 + 2112) = 0u;
          *(_OWORD *)(a1 + 2096) = 0u;
          *(_OWORD *)(a1 + 2080) = 0u;
          *(_OWORD *)(a1 + 2064) = 0u;
        }
      }
      *(void *)(a1 + 1520) = 0;
      *(void *)(a1 + 1528) = 0;
      *(_DWORD *)(a1 + 1536) = 0;
      goto LABEL_88;
    }
LABEL_55:
    uint64_t v37 = 0;
    uint64_t v38 = *(void *)(a1 + 29032);
    do
    {
      if ((*(_DWORD *)(v38 + 584 + 4 * v37) & a2) != 0) {
        break;
      }
      ++v37;
    }
    while (v37 != 8);
    unsigned int v36 = *(_DWORD *)(v38 + 4 * v37 + 584);
    v12[2374] = v36;
    goto LABEL_59;
  }
  uint64_t v15 = 1;
LABEL_88:
  if (!*(_DWORD *)(a1 + 1540))
  {
    v12[2375] = v12[2376] & v12[2374];
    v11[1] = *v11;
    v11[3] = v11[2];
  }
  return v15;
}

uint64_t gleDoDrawDispatchCoreES2(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, double a5, double a6, double a7)
{
  int v11 = (unsigned __int8 *)(a1 + 28680);
  unsigned int v12 = (unsigned int *)(a1 + 19152);
  if ((*(unsigned char *)(a1 + 1540) & 4) != 0)
  {
    int MatrixIdentifier = gleGenerateMatrixIdentifier(a1, a1 + 9488, a5, a6, a7);
    *unsigned int v12 = *v12 & 0xFFFFFEFF | ((MatrixIdentifier != -1074791426) << 8);
    *((_DWORD *)v11 + 263) = MatrixIdentifier;
  }
  if ((*((_DWORD *)v11 + 280) & 0x743C0478) != 0)
  {
    int updated = gleUpdateDrawFramebufferState(a1, a5, a6, a7);
    if (updated) {
      goto LABEL_96;
    }
  }
  unsigned int v16 = v12[2374];
  if ((v16 & a2) == 0)
  {
    if (*(_WORD *)(*(void *)(a1 + 29032) + 26) & 0x800) != 0 && *(unsigned char *)(a1 + 15377) && ((v16 | a2))
    {
      v12[2375] = 0;
      *(_DWORD *)(a1 + 1548) |= 0x30000u;
    }
    *(_DWORD *)(a1 + 1524) |= 0x80000000;
    v12[2374] = 0;
  }
  if ((*v11 & a3) == 0)
  {
    *(_DWORD *)(a1 + 1524) |= 0x2000000u;
    *int v11 = 0;
  }
  if ((v11[2] & a4) == 0)
  {
    *(_DWORD *)(a1 + 1524) |= 0x4000000u;
    v11[2] = 0;
  }
  if (*(_DWORD *)(a1 + 2216) & *(_DWORD *)(a1 + 1544) | *(_DWORD *)(a1 + 2220) & *(_DWORD *)(a1 + 1548) | (*(_DWORD *)(a1 + 2212) | 0xFC000000) & *(_DWORD *)(a1 + 1540))
  {
    int updated = gleUpdateDeferredStateES2((int8x16_t *)a1, a2, a3, a4, 0xFC000000);
    if (updated)
    {
LABEL_96:
      if (updated != 16711680 && !*((_WORD *)v11 + 576))
      {
        uint64_t v15 = 0;
        *((_WORD *)v11 + 576) = updated;
        return v15;
      }
      return 0;
    }
  }
  if ((v12[2376] & a2) == 0)
  {
    if (!*((_WORD *)v11 + 576))
    {
      uint64_t v15 = 0;
      *((_WORD *)v11 + 576) = 1282;
      return v15;
    }
    return 0;
  }
  int8x16_t v17 = *(int8x16_t *)(a1 + 1520);
  int8x16_t v18 = vandq_s8(v17, *(int8x16_t *)(a1 + 2224));
  int8x8_t v19 = vorr_s8(*(int8x8_t *)v18.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL));
  if (v19.i32[0] | *(_DWORD *)(a1 + 1536) & *(_DWORD *)(a1 + 2240) | v19.i32[1])
  {
    if ((v17.i16[6] & 0x1000) != 0)
    {
      int8x16_t v20 = *(void **)(a1 + 26384);
      if (v20)
      {
        uint64_t v21 = v20[118];
        if (v21)
        {
          uint64_t v22 = v20 + 118;
          if (v11[3816])
          {
            unint64_t v23 = 0;
            uint64_t v24 = v20[119];
            unint64_t v25 = v20 + 221;
            do
            {
              *(v25 - 1) |= v21;
              *v25 |= v24;
              ++v23;
              v25 += 35;
            }
            while (v23 < v11[3816]);
          }
          void *v22 = 0;
          v22[1] = 0;
        }
      }
    }
    *(_DWORD *)(a1 + 2280) = a2;
    *(unsigned char *)(a1 + 2284) = a3;
    *(unsigned char *)(a1 + 2285) = a4;
    gleUpdateContextStateBuffers(a1);
    if (v11[3823]) {
      uint64_t v26 = mach_absolute_time();
    }
    else {
      uint64_t v26 = 0;
    }
    uint64_t v27 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)(a1 + 29448) + 144))(*(void *)(a1 + 29016), a1 + 29040, a1 + 1520);
    v28.n128_f64[0] = gleUpdateDispatchJIT(a1);
    if (v11[3823]) {
      *(void *)(a1 + 19176) += mach_absolute_time() - v26;
    }
    int v29 = *((_DWORD *)v11 + 279) ^ v27;
    if ((v29 & 0x47) != 0)
    {
      if ((v29 & 0x45) != 0 && (int v30 = gleUpdateDispatchCodeChange(a1, v27, 4227858432, v28)) != 0)
      {
        uint64_t v15 = 0;
        if (!*((_WORD *)v11 + 576)) {
          *((_WORD *)v11 + 576) = v30;
        }
      }
      else
      {
        uint64_t v15 = 1;
      }
      if ((v27 & 2) != 0)
      {
        BOOL v31 = *(void *)(a1 + 26280) != 0;
        uint64_t v32 = *(void *)(a1 + 29032);
        uint64_t v33 = *(void *)(v32 + 536);
        *(void *)(a1 + 26280) = v33;
        uint64_t v34 = *(void *)(v32 + 544);
        *(void *)(a1 + 26288) = v34;
        if (v33 && !*(unsigned char *)(v33 + 2)) {
          *(unsigned char *)(v33 + 2) = 1;
        }
        char v35 = v31 ^ (v33 == 0);
        if (v34 && !*(unsigned char *)(v34 + 2)) {
          *(unsigned char *)(v34 + 2) = 1;
        }
        if ((v35 & 1) == 0) {
          gleSelectPrimitiveFunc(a1);
        }
        gleSelectVertexSubmitFunc(a1);
      }
      if ((v27 & 0x20) != 0) {
        goto LABEL_55;
      }
    }
    else
    {
      uint64_t v15 = 1;
      if ((v27 & 0x20) != 0) {
        goto LABEL_55;
      }
    }
    unsigned int v36 = v12[2374];
    if ((v36 & a2) != 0)
    {
LABEL_59:
      *(_DWORD *)(a1 + 2280) = v36;
      if ((v27 & 0x80) != 0 || (LODWORD(v39) = *v11, (v39 & a3) == 0))
      {
        uint64_t v40 = 0;
        uint64_t v39 = *(void *)(a1 + 29032);
        do
        {
          if ((*(unsigned char *)(v39 + 632 + v40) & a3) != 0) {
            break;
          }
          ++v40;
        }
        while (v40 != 4);
        LOBYTE(v39) = *(unsigned char *)(v39 + v40 + 632);
        *int v11 = v39;
      }
      *(unsigned char *)(a1 + 2284) = v39;
      if ((v27 & 0x100) != 0 || (LODWORD(v41) = v11[2], (v41 & a4) == 0))
      {
        uint64_t v42 = 0;
        uint64_t v41 = *(void *)(a1 + 29032);
        do
        {
          if ((*(unsigned char *)(v41 + 636 + v42) & a4) != 0) {
            break;
          }
          ++v42;
        }
        while (v42 != 4);
        LOBYTE(v41) = *(unsigned char *)(v41 + v42 + 636);
        v11[2] = v41;
      }
      *(unsigned char *)(a1 + 2285) = v41;
      int v43 = *(_DWORD *)(a1 + 1532);
      if ((v43 & 0xF836000) != 0)
      {
        if ((v27 & 1) != 0 && (v43 & 0x802000) != 0)
        {
          *(_OWORD *)(a1 + 1664) = 0u;
          *(_OWORD *)(a1 + 1648) = 0u;
          *(_OWORD *)(a1 + 1632) = 0u;
          *(_OWORD *)(a1 + 1616) = 0u;
          *(_OWORD *)(a1 + 1600) = 0u;
          *(_OWORD *)(a1 + 1584) = 0u;
          *(_OWORD *)(a1 + 1568) = 0u;
          *(_OWORD *)(a1 + 1552) = 0u;
        }
        if ((v27 & 1) != 0 && (v43 & 0x1004000) != 0)
        {
          *(_OWORD *)(a1 + 1792) = 0u;
          *(_OWORD *)(a1 + 1776) = 0u;
          *(_OWORD *)(a1 + 1760) = 0u;
          *(_OWORD *)(a1 + 1744) = 0u;
          *(_OWORD *)(a1 + 1728) = 0u;
          *(_OWORD *)(a1 + 1712) = 0u;
          *(_OWORD *)(a1 + 1696) = 0u;
          *(_OWORD *)(a1 + 1680) = 0u;
        }
        if ((v27 & 1) != 0 && (v43 & 0x2008000) != 0)
        {
          *(_OWORD *)(a1 + 1920) = 0u;
          *(_OWORD *)(a1 + 1904) = 0u;
          *(_OWORD *)(a1 + 1888) = 0u;
          *(_OWORD *)(a1 + 1872) = 0u;
          *(_OWORD *)(a1 + 1856) = 0u;
          *(_OWORD *)(a1 + 1840) = 0u;
          *(_OWORD *)(a1 + 1824) = 0u;
          *(_OWORD *)(a1 + 1808) = 0u;
        }
        if ((v27 & 1) != 0 && (v43 & 0x4010000) != 0)
        {
          *(_OWORD *)(a1 + 2048) = 0u;
          *(_OWORD *)(a1 + 2032) = 0u;
          *(_OWORD *)(a1 + 2016) = 0u;
          *(_OWORD *)(a1 + 2000) = 0u;
          *(_OWORD *)(a1 + 1984) = 0u;
          *(_OWORD *)(a1 + 1968) = 0u;
          *(_OWORD *)(a1 + 1952) = 0u;
          *(_OWORD *)(a1 + 1936) = 0u;
        }
        if ((v27 & 4) != 0 && (v43 & 0x8020000) != 0)
        {
          *(_OWORD *)(a1 + 2176) = 0u;
          *(_OWORD *)(a1 + 2160) = 0u;
          *(_OWORD *)(a1 + 2144) = 0u;
          *(_OWORD *)(a1 + 2128) = 0u;
          *(_OWORD *)(a1 + 2112) = 0u;
          *(_OWORD *)(a1 + 2096) = 0u;
          *(_OWORD *)(a1 + 2080) = 0u;
          *(_OWORD *)(a1 + 2064) = 0u;
        }
      }
      *(void *)(a1 + 1520) = 0;
      *(void *)(a1 + 1528) = 0;
      *(_DWORD *)(a1 + 1536) = 0;
      goto LABEL_88;
    }
LABEL_55:
    uint64_t v37 = 0;
    uint64_t v38 = *(void *)(a1 + 29032);
    do
    {
      if ((*(_DWORD *)(v38 + 584 + 4 * v37) & a2) != 0) {
        break;
      }
      ++v37;
    }
    while (v37 != 8);
    unsigned int v36 = *(_DWORD *)(v38 + 4 * v37 + 584);
    v12[2374] = v36;
    goto LABEL_59;
  }
  uint64_t v15 = 1;
LABEL_88:
  if (!*(_DWORD *)(a1 + 1540))
  {
    v12[2375] = v12[2376] & v12[2374];
    v11[1] = *v11;
    v11[3] = v11[2];
  }
  return v15;
}

uint64_t gleDoSelectiveDispatchNoErrorCore(unint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, __n128 a6, double a7, double a8)
{
  unint64_t v13 = a1 + 28648;
  if ((*(_DWORD *)(a1 + 29800) & 0x743C0478) == 0
    || (uint64_t result = gleUpdateDrawFramebufferState(a1, a6.n128_f64[0], a7, a8), !result))
  {
    if ((*(_DWORD *)v13 & a2) == 0)
    {
      if ((*(_WORD *)(*(void *)(a1 + 29032) + 26) & 0x800) != 0
        && *(unsigned char *)(a1 + 15377)
        && ((*(_DWORD *)v13 | a2) & 1) != 0)
      {
        *(_DWORD *)(v13 + 4) = 0;
        *(_DWORD *)(a1 + 1548) |= 0x30000u;
      }
      *(_DWORD *)(a1 + 1524) |= 0x80000000;
      *(_DWORD *)unint64_t v13 = 0;
    }
    if ((*(unsigned char *)(v13 + 32) & a3) == 0)
    {
      *(_DWORD *)(a1 + 1524) |= 0x2000000u;
      *(unsigned char *)(v13 + 32) = 0;
    }
    if ((*(unsigned char *)(v13 + 34) & a4) == 0)
    {
      *(_DWORD *)(a1 + 1524) |= 0x4000000u;
      *(unsigned char *)(v13 + 34) = 0;
    }
    if (!(*(_DWORD *)(a1 + 2216) & *(_DWORD *)(a1 + 1544) | *(_DWORD *)(a1 + 2220) & *(_DWORD *)(a1 + 1548) | (*(_DWORD *)(a1 + 2212) | a5) & *(_DWORD *)(a1 + 1540))
      || (uint64_t result = gleUpdateDeferredState(a1, a2, a3, a4, a5, a6, a7, a8), !result))
    {
      int8x16_t v15 = *(int8x16_t *)(a1 + 1520);
      int8x16_t v16 = vandq_s8(v15, *(int8x16_t *)(a1 + 2224));
      int8x8_t v17 = vorr_s8(*(int8x8_t *)v16.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL));
      if (v17.i32[0] | *(_DWORD *)(a1 + 1536) & *(_DWORD *)(a1 + 2240) | v17.i32[1])
      {
        if ((v15.i16[6] & 0x1000) != 0)
        {
          int8x16_t v18 = *(void **)(a1 + 26384);
          if (v18)
          {
            uint64_t v19 = v18[118];
            if (v19)
            {
              int8x16_t v20 = v18 + 118;
              if (*(unsigned char *)(v13 + 3848))
              {
                unint64_t v21 = 0;
                uint64_t v22 = v18[119];
                unint64_t v23 = v18 + 221;
                do
                {
                  *(v23 - 1) |= v19;
                  *v23 |= v22;
                  ++v21;
                  v23 += 35;
                }
                while (v21 < *(unsigned __int8 *)(v13 + 3848));
              }
              void *v20 = 0;
              v20[1] = 0;
            }
          }
        }
        *(_DWORD *)(a1 + 2280) = a2;
        *(unsigned char *)(a1 + 2284) = a3;
        *(unsigned char *)(a1 + 2285) = a4;
        gleUpdateContextStateBuffers(a1);
        if (*(unsigned char *)(v13 + 3855)) {
          uint64_t v24 = mach_absolute_time();
        }
        else {
          uint64_t v24 = 0;
        }
        int v25 = (*(uint64_t (**)(void, unint64_t, unint64_t))(*(void *)(a1 + 29448) + 144))(*(void *)(a1 + 29016), a1 + 29040, a1 + 1520);
        gleUpdateDispatchJIT(a1);
        if (*(unsigned char *)(v13 + 3855)) {
          *(void *)(a1 + 19176) += mach_absolute_time() - v24;
        }
        int v26 = *(_DWORD *)(v13 + 1148) ^ v25;
        if ((v26 & 0x47) != 0)
        {
          if ((v26 & 0x45) != 0) {
            gleUpdateDispatchCodeChange(a1, v25, a5);
          }
          if ((v25 & 2) != 0)
          {
            BOOL v27 = *(void *)(a1 + 26280) != 0;
            uint64_t v28 = *(void *)(a1 + 29032);
            uint64_t v29 = *(void *)(v28 + 536);
            *(void *)(a1 + 26280) = v29;
            uint64_t v30 = *(void *)(v28 + 544);
            *(void *)(a1 + 26288) = v30;
            if (v29 && !*(unsigned char *)(v29 + 2)) {
              *(unsigned char *)(v29 + 2) = 1;
            }
            char v31 = v27 ^ (v29 == 0);
            if (v30 && !*(unsigned char *)(v30 + 2)) {
              *(unsigned char *)(v30 + 2) = 1;
            }
            if ((v31 & 1) == 0) {
              gleSelectPrimitiveFunc(a1);
            }
            gleSelectVertexSubmitFunc(a1);
          }
        }
        if ((v25 & 0x20) != 0 || (int v32 = *(_DWORD *)v13, (*(_DWORD *)v13 & a2) == 0))
        {
          uint64_t v33 = 0;
          uint64_t v34 = *(void *)(a1 + 29032);
          do
          {
            if ((*(_DWORD *)(v34 + 584 + 4 * v33) & a2) != 0) {
              break;
            }
            ++v33;
          }
          while (v33 != 8);
          int v32 = *(_DWORD *)(v34 + 4 * v33 + 584);
          *(_DWORD *)unint64_t v13 = v32;
        }
        *(_DWORD *)(a1 + 2280) = v32;
        if ((v25 & 0x80) != 0 || (LODWORD(v35) = *(unsigned __int8 *)(v13 + 32), (v35 & a3) == 0))
        {
          uint64_t v36 = 0;
          uint64_t v35 = *(void *)(a1 + 29032);
          do
          {
            if ((*(unsigned char *)(v35 + 632 + v36) & a3) != 0) {
              break;
            }
            ++v36;
          }
          while (v36 != 4);
          LOBYTE(v35) = *(unsigned char *)(v35 + v36 + 632);
          *(unsigned char *)(v13 + 32) = v35;
        }
        *(unsigned char *)(a1 + 2284) = v35;
        if ((v25 & 0x100) != 0 || (LODWORD(v37) = *(unsigned __int8 *)(v13 + 34), (v37 & a4) == 0))
        {
          uint64_t v38 = 0;
          uint64_t v37 = *(void *)(a1 + 29032);
          do
          {
            if ((*(unsigned char *)(v37 + 636 + v38) & a4) != 0) {
              break;
            }
            ++v38;
          }
          while (v38 != 4);
          LOBYTE(v37) = *(unsigned char *)(v37 + v38 + 636);
          *(unsigned char *)(v13 + 34) = v37;
        }
        *(unsigned char *)(a1 + 2285) = v37;
        int v39 = *(_DWORD *)(a1 + 1532);
        if ((v39 & 0xF836000) != 0)
        {
          if ((v25 & 1) != 0 && (v39 & 0x802000) != 0)
          {
            *(_OWORD *)(a1 + 1664) = 0u;
            *(_OWORD *)(a1 + 1648) = 0u;
            *(_OWORD *)(a1 + 1632) = 0u;
            *(_OWORD *)(a1 + 1616) = 0u;
            *(_OWORD *)(a1 + 1600) = 0u;
            *(_OWORD *)(a1 + 1584) = 0u;
            *(_OWORD *)(a1 + 1568) = 0u;
            *(_OWORD *)(a1 + 1552) = 0u;
          }
          if ((v25 & 1) != 0 && (v39 & 0x1004000) != 0)
          {
            *(_OWORD *)(a1 + 1792) = 0u;
            *(_OWORD *)(a1 + 1776) = 0u;
            *(_OWORD *)(a1 + 1760) = 0u;
            *(_OWORD *)(a1 + 1744) = 0u;
            *(_OWORD *)(a1 + 1728) = 0u;
            *(_OWORD *)(a1 + 1712) = 0u;
            *(_OWORD *)(a1 + 1696) = 0u;
            *(_OWORD *)(a1 + 1680) = 0u;
          }
          if ((v25 & 1) != 0 && (v39 & 0x2008000) != 0)
          {
            *(_OWORD *)(a1 + 1920) = 0u;
            *(_OWORD *)(a1 + 1904) = 0u;
            *(_OWORD *)(a1 + 1888) = 0u;
            *(_OWORD *)(a1 + 1872) = 0u;
            *(_OWORD *)(a1 + 1856) = 0u;
            *(_OWORD *)(a1 + 1840) = 0u;
            *(_OWORD *)(a1 + 1824) = 0u;
            *(_OWORD *)(a1 + 1808) = 0u;
          }
          if ((v25 & 1) != 0 && (v39 & 0x4010000) != 0)
          {
            *(_OWORD *)(a1 + 2048) = 0u;
            *(_OWORD *)(a1 + 2032) = 0u;
            *(_OWORD *)(a1 + 2016) = 0u;
            *(_OWORD *)(a1 + 2000) = 0u;
            *(_OWORD *)(a1 + 1984) = 0u;
            *(_OWORD *)(a1 + 1968) = 0u;
            *(_OWORD *)(a1 + 1952) = 0u;
            *(_OWORD *)(a1 + 1936) = 0u;
          }
          if ((v25 & 4) != 0 && (v39 & 0x8020000) != 0)
          {
            *(_OWORD *)(a1 + 2176) = 0u;
            *(_OWORD *)(a1 + 2160) = 0u;
            *(_OWORD *)(a1 + 2144) = 0u;
            *(_OWORD *)(a1 + 2128) = 0u;
            *(_OWORD *)(a1 + 2112) = 0u;
            *(_OWORD *)(a1 + 2096) = 0u;
            *(_OWORD *)(a1 + 2080) = 0u;
            *(_OWORD *)(a1 + 2064) = 0u;
          }
        }
        *(void *)(a1 + 1520) = 0;
        *(void *)(a1 + 1528) = 0;
        *(_DWORD *)(a1 + 1536) = 0;
      }
      uint64_t result = 0;
      if (!*(_DWORD *)(a1 + 1540))
      {
        *(_DWORD *)(v13 + 4) = *(_DWORD *)(v13 + 8) & *(_DWORD *)v13;
        *(unsigned char *)(v13 + 33) = *(unsigned char *)(v13 + 32);
        *(unsigned char *)(v13 + 35) = *(unsigned char *)(v13 + 34);
      }
    }
  }
  return result;
}

uint64_t gleDoSelectiveDispatchNoErrorCoreGL3(unint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, double a6, double a7, double a8)
{
  unint64_t v13 = a1 + 28648;
  if ((*(_DWORD *)(a1 + 29800) & 0x743C0478) == 0
    || (uint64_t result = gleUpdateDrawFramebufferState(a1, a6, a7, a8), !result))
  {
    if ((*(_DWORD *)v13 & a2) == 0)
    {
      if ((*(_WORD *)(*(void *)(a1 + 29032) + 26) & 0x800) != 0
        && *(unsigned char *)(a1 + 15377)
        && ((*(_DWORD *)v13 | a2) & 1) != 0)
      {
        *(_DWORD *)(v13 + 4) = 0;
        *(_DWORD *)(a1 + 1548) |= 0x30000u;
      }
      *(_DWORD *)(a1 + 1524) |= 0x80000000;
      *(_DWORD *)unint64_t v13 = 0;
    }
    if ((*(unsigned char *)(v13 + 32) & a3) == 0)
    {
      *(_DWORD *)(a1 + 1524) |= 0x2000000u;
      *(unsigned char *)(v13 + 32) = 0;
    }
    if ((*(unsigned char *)(v13 + 34) & a4) == 0)
    {
      *(_DWORD *)(a1 + 1524) |= 0x4000000u;
      *(unsigned char *)(v13 + 34) = 0;
    }
    if (!(*(_DWORD *)(a1 + 2216) & *(_DWORD *)(a1 + 1544) | *(_DWORD *)(a1 + 2220) & *(_DWORD *)(a1 + 1548) | (*(_DWORD *)(a1 + 2212) | a5) & *(_DWORD *)(a1 + 1540))
      || (uint64_t result = gleUpdateDeferredStateGL3((int8x16_t *)a1, a2, a3, a4, a5), !result))
    {
      int8x16_t v15 = *(int8x16_t *)(a1 + 1520);
      int8x16_t v16 = vandq_s8(v15, *(int8x16_t *)(a1 + 2224));
      int8x8_t v17 = vorr_s8(*(int8x8_t *)v16.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL));
      if (v17.i32[0] | *(_DWORD *)(a1 + 1536) & *(_DWORD *)(a1 + 2240) | v17.i32[1])
      {
        if ((v15.i16[6] & 0x1000) != 0)
        {
          int8x16_t v18 = *(void **)(a1 + 26384);
          if (v18)
          {
            uint64_t v19 = v18[118];
            if (v19)
            {
              int8x16_t v20 = v18 + 118;
              if (*(unsigned char *)(v13 + 3848))
              {
                unint64_t v21 = 0;
                uint64_t v22 = v18[119];
                unint64_t v23 = v18 + 221;
                do
                {
                  *(v23 - 1) |= v19;
                  *v23 |= v22;
                  ++v21;
                  v23 += 35;
                }
                while (v21 < *(unsigned __int8 *)(v13 + 3848));
              }
              void *v20 = 0;
              v20[1] = 0;
            }
          }
        }
        *(_DWORD *)(a1 + 2280) = a2;
        *(unsigned char *)(a1 + 2284) = a3;
        *(unsigned char *)(a1 + 2285) = a4;
        gleUpdateContextStateBuffers(a1);
        if (*(unsigned char *)(v13 + 3855)) {
          uint64_t v24 = mach_absolute_time();
        }
        else {
          uint64_t v24 = 0;
        }
        int v25 = (*(uint64_t (**)(void, unint64_t, unint64_t))(*(void *)(a1 + 29448) + 144))(*(void *)(a1 + 29016), a1 + 29040, a1 + 1520);
        gleUpdateDispatchJIT(a1);
        if (*(unsigned char *)(v13 + 3855)) {
          *(void *)(a1 + 19176) += mach_absolute_time() - v24;
        }
        int v26 = *(_DWORD *)(v13 + 1148) ^ v25;
        if ((v26 & 0x47) != 0)
        {
          if ((v26 & 0x45) != 0) {
            gleUpdateDispatchCodeChange(a1, v25, a5);
          }
          if ((v25 & 2) != 0)
          {
            BOOL v27 = *(void *)(a1 + 26280) != 0;
            uint64_t v28 = *(void *)(a1 + 29032);
            uint64_t v29 = *(void *)(v28 + 536);
            *(void *)(a1 + 26280) = v29;
            uint64_t v30 = *(void *)(v28 + 544);
            *(void *)(a1 + 26288) = v30;
            if (v29 && !*(unsigned char *)(v29 + 2)) {
              *(unsigned char *)(v29 + 2) = 1;
            }
            char v31 = v27 ^ (v29 == 0);
            if (v30 && !*(unsigned char *)(v30 + 2)) {
              *(unsigned char *)(v30 + 2) = 1;
            }
            if ((v31 & 1) == 0) {
              gleSelectPrimitiveFunc(a1);
            }
            gleSelectVertexSubmitFunc(a1);
          }
        }
        if ((v25 & 0x20) != 0 || (int v32 = *(_DWORD *)v13, (*(_DWORD *)v13 & a2) == 0))
        {
          uint64_t v33 = 0;
          uint64_t v34 = *(void *)(a1 + 29032);
          do
          {
            if ((*(_DWORD *)(v34 + 584 + 4 * v33) & a2) != 0) {
              break;
            }
            ++v33;
          }
          while (v33 != 8);
          int v32 = *(_DWORD *)(v34 + 4 * v33 + 584);
          *(_DWORD *)unint64_t v13 = v32;
        }
        *(_DWORD *)(a1 + 2280) = v32;
        if ((v25 & 0x80) != 0 || (LODWORD(v35) = *(unsigned __int8 *)(v13 + 32), (v35 & a3) == 0))
        {
          uint64_t v36 = 0;
          uint64_t v35 = *(void *)(a1 + 29032);
          do
          {
            if ((*(unsigned char *)(v35 + 632 + v36) & a3) != 0) {
              break;
            }
            ++v36;
          }
          while (v36 != 4);
          LOBYTE(v35) = *(unsigned char *)(v35 + v36 + 632);
          *(unsigned char *)(v13 + 32) = v35;
        }
        *(unsigned char *)(a1 + 2284) = v35;
        if ((v25 & 0x100) != 0 || (LODWORD(v37) = *(unsigned __int8 *)(v13 + 34), (v37 & a4) == 0))
        {
          uint64_t v38 = 0;
          uint64_t v37 = *(void *)(a1 + 29032);
          do
          {
            if ((*(unsigned char *)(v37 + 636 + v38) & a4) != 0) {
              break;
            }
            ++v38;
          }
          while (v38 != 4);
          LOBYTE(v37) = *(unsigned char *)(v37 + v38 + 636);
          *(unsigned char *)(v13 + 34) = v37;
        }
        *(unsigned char *)(a1 + 2285) = v37;
        int v39 = *(_DWORD *)(a1 + 1532);
        if ((v39 & 0xF836000) != 0)
        {
          if ((v25 & 1) != 0 && (v39 & 0x802000) != 0)
          {
            *(_OWORD *)(a1 + 1664) = 0u;
            *(_OWORD *)(a1 + 1648) = 0u;
            *(_OWORD *)(a1 + 1632) = 0u;
            *(_OWORD *)(a1 + 1616) = 0u;
            *(_OWORD *)(a1 + 1600) = 0u;
            *(_OWORD *)(a1 + 1584) = 0u;
            *(_OWORD *)(a1 + 1568) = 0u;
            *(_OWORD *)(a1 + 1552) = 0u;
          }
          if ((v25 & 1) != 0 && (v39 & 0x1004000) != 0)
          {
            *(_OWORD *)(a1 + 1792) = 0u;
            *(_OWORD *)(a1 + 1776) = 0u;
            *(_OWORD *)(a1 + 1760) = 0u;
            *(_OWORD *)(a1 + 1744) = 0u;
            *(_OWORD *)(a1 + 1728) = 0u;
            *(_OWORD *)(a1 + 1712) = 0u;
            *(_OWORD *)(a1 + 1696) = 0u;
            *(_OWORD *)(a1 + 1680) = 0u;
          }
          if ((v25 & 1) != 0 && (v39 & 0x2008000) != 0)
          {
            *(_OWORD *)(a1 + 1920) = 0u;
            *(_OWORD *)(a1 + 1904) = 0u;
            *(_OWORD *)(a1 + 1888) = 0u;
            *(_OWORD *)(a1 + 1872) = 0u;
            *(_OWORD *)(a1 + 1856) = 0u;
            *(_OWORD *)(a1 + 1840) = 0u;
            *(_OWORD *)(a1 + 1824) = 0u;
            *(_OWORD *)(a1 + 1808) = 0u;
          }
          if ((v25 & 1) != 0 && (v39 & 0x4010000) != 0)
          {
            *(_OWORD *)(a1 + 2048) = 0u;
            *(_OWORD *)(a1 + 2032) = 0u;
            *(_OWORD *)(a1 + 2016) = 0u;
            *(_OWORD *)(a1 + 2000) = 0u;
            *(_OWORD *)(a1 + 1984) = 0u;
            *(_OWORD *)(a1 + 1968) = 0u;
            *(_OWORD *)(a1 + 1952) = 0u;
            *(_OWORD *)(a1 + 1936) = 0u;
          }
          if ((v25 & 4) != 0 && (v39 & 0x8020000) != 0)
          {
            *(_OWORD *)(a1 + 2176) = 0u;
            *(_OWORD *)(a1 + 2160) = 0u;
            *(_OWORD *)(a1 + 2144) = 0u;
            *(_OWORD *)(a1 + 2128) = 0u;
            *(_OWORD *)(a1 + 2112) = 0u;
            *(_OWORD *)(a1 + 2096) = 0u;
            *(_OWORD *)(a1 + 2080) = 0u;
            *(_OWORD *)(a1 + 2064) = 0u;
          }
        }
        *(void *)(a1 + 1520) = 0;
        *(void *)(a1 + 1528) = 0;
        *(_DWORD *)(a1 + 1536) = 0;
      }
      uint64_t result = 0;
      if (!*(_DWORD *)(a1 + 1540))
      {
        *(_DWORD *)(v13 + 4) = *(_DWORD *)(v13 + 8) & *(_DWORD *)v13;
        *(unsigned char *)(v13 + 33) = *(unsigned char *)(v13 + 32);
        *(unsigned char *)(v13 + 35) = *(unsigned char *)(v13 + 34);
      }
    }
  }
  return result;
}

uint64_t gleDoSelectiveDispatchNoErrorCoreES2(unint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, double a6, double a7, double a8)
{
  unint64_t v13 = a1 + 28648;
  if ((*(_DWORD *)(a1 + 29800) & 0x743C0478) == 0
    || (uint64_t result = gleUpdateDrawFramebufferState(a1, a6, a7, a8), !result))
  {
    if ((*(_DWORD *)v13 & a2) == 0)
    {
      if ((*(_WORD *)(*(void *)(a1 + 29032) + 26) & 0x800) != 0
        && *(unsigned char *)(a1 + 15377)
        && ((*(_DWORD *)v13 | a2) & 1) != 0)
      {
        *(_DWORD *)(v13 + 4) = 0;
        *(_DWORD *)(a1 + 1548) |= 0x30000u;
      }
      *(_DWORD *)(a1 + 1524) |= 0x80000000;
      *(_DWORD *)unint64_t v13 = 0;
    }
    if ((*(unsigned char *)(v13 + 32) & a3) == 0)
    {
      *(_DWORD *)(a1 + 1524) |= 0x2000000u;
      *(unsigned char *)(v13 + 32) = 0;
    }
    if ((*(unsigned char *)(v13 + 34) & a4) == 0)
    {
      *(_DWORD *)(a1 + 1524) |= 0x4000000u;
      *(unsigned char *)(v13 + 34) = 0;
    }
    if (!(*(_DWORD *)(a1 + 2216) & *(_DWORD *)(a1 + 1544) | *(_DWORD *)(a1 + 2220) & *(_DWORD *)(a1 + 1548) | (*(_DWORD *)(a1 + 2212) | a5) & *(_DWORD *)(a1 + 1540))
      || (uint64_t result = gleUpdateDeferredStateES2((int8x16_t *)a1, a2, a3, a4, a5), !result))
    {
      int8x16_t v15 = *(int8x16_t *)(a1 + 1520);
      int8x16_t v16 = vandq_s8(v15, *(int8x16_t *)(a1 + 2224));
      int8x8_t v17 = vorr_s8(*(int8x8_t *)v16.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL));
      if (v17.i32[0] | *(_DWORD *)(a1 + 1536) & *(_DWORD *)(a1 + 2240) | v17.i32[1])
      {
        if ((v15.i16[6] & 0x1000) != 0)
        {
          int8x16_t v18 = *(void **)(a1 + 26384);
          if (v18)
          {
            uint64_t v19 = v18[118];
            if (v19)
            {
              int8x16_t v20 = v18 + 118;
              if (*(unsigned char *)(v13 + 3848))
              {
                unint64_t v21 = 0;
                uint64_t v22 = v18[119];
                unint64_t v23 = v18 + 221;
                do
                {
                  *(v23 - 1) |= v19;
                  *v23 |= v22;
                  ++v21;
                  v23 += 35;
                }
                while (v21 < *(unsigned __int8 *)(v13 + 3848));
              }
              void *v20 = 0;
              v20[1] = 0;
            }
          }
        }
        *(_DWORD *)(a1 + 2280) = a2;
        *(unsigned char *)(a1 + 2284) = a3;
        *(unsigned char *)(a1 + 2285) = a4;
        gleUpdateContextStateBuffers(a1);
        if (*(unsigned char *)(v13 + 3855)) {
          uint64_t v24 = mach_absolute_time();
        }
        else {
          uint64_t v24 = 0;
        }
        int v25 = (*(uint64_t (**)(void, unint64_t, unint64_t))(*(void *)(a1 + 29448) + 144))(*(void *)(a1 + 29016), a1 + 29040, a1 + 1520);
        gleUpdateDispatchJIT(a1);
        if (*(unsigned char *)(v13 + 3855)) {
          *(void *)(a1 + 19176) += mach_absolute_time() - v24;
        }
        int v26 = *(_DWORD *)(v13 + 1148) ^ v25;
        if ((v26 & 0x47) != 0)
        {
          if ((v26 & 0x45) != 0) {
            gleUpdateDispatchCodeChange(a1, v25, a5);
          }
          if ((v25 & 2) != 0)
          {
            BOOL v27 = *(void *)(a1 + 26280) != 0;
            uint64_t v28 = *(void *)(a1 + 29032);
            uint64_t v29 = *(void *)(v28 + 536);
            *(void *)(a1 + 26280) = v29;
            uint64_t v30 = *(void *)(v28 + 544);
            *(void *)(a1 + 26288) = v30;
            if (v29 && !*(unsigned char *)(v29 + 2)) {
              *(unsigned char *)(v29 + 2) = 1;
            }
            char v31 = v27 ^ (v29 == 0);
            if (v30 && !*(unsigned char *)(v30 + 2)) {
              *(unsigned char *)(v30 + 2) = 1;
            }
            if ((v31 & 1) == 0) {
              gleSelectPrimitiveFunc(a1);
            }
            gleSelectVertexSubmitFunc(a1);
          }
        }
        if ((v25 & 0x20) != 0 || (int v32 = *(_DWORD *)v13, (*(_DWORD *)v13 & a2) == 0))
        {
          uint64_t v33 = 0;
          uint64_t v34 = *(void *)(a1 + 29032);
          do
          {
            if ((*(_DWORD *)(v34 + 584 + 4 * v33) & a2) != 0) {
              break;
            }
            ++v33;
          }
          while (v33 != 8);
          int v32 = *(_DWORD *)(v34 + 4 * v33 + 584);
          *(_DWORD *)unint64_t v13 = v32;
        }
        *(_DWORD *)(a1 + 2280) = v32;
        if ((v25 & 0x80) != 0 || (LODWORD(v35) = *(unsigned __int8 *)(v13 + 32), (v35 & a3) == 0))
        {
          uint64_t v36 = 0;
          uint64_t v35 = *(void *)(a1 + 29032);
          do
          {
            if ((*(unsigned char *)(v35 + 632 + v36) & a3) != 0) {
              break;
            }
            ++v36;
          }
          while (v36 != 4);
          LOBYTE(v35) = *(unsigned char *)(v35 + v36 + 632);
          *(unsigned char *)(v13 + 32) = v35;
        }
        *(unsigned char *)(a1 + 2284) = v35;
        if ((v25 & 0x100) != 0 || (LODWORD(v37) = *(unsigned __int8 *)(v13 + 34), (v37 & a4) == 0))
        {
          uint64_t v38 = 0;
          uint64_t v37 = *(void *)(a1 + 29032);
          do
          {
            if ((*(unsigned char *)(v37 + 636 + v38) & a4) != 0) {
              break;
            }
            ++v38;
          }
          while (v38 != 4);
          LOBYTE(v37) = *(unsigned char *)(v37 + v38 + 636);
          *(unsigned char *)(v13 + 34) = v37;
        }
        *(unsigned char *)(a1 + 2285) = v37;
        int v39 = *(_DWORD *)(a1 + 1532);
        if ((v39 & 0xF836000) != 0)
        {
          if ((v25 & 1) != 0 && (v39 & 0x802000) != 0)
          {
            *(_OWORD *)(a1 + 1664) = 0u;
            *(_OWORD *)(a1 + 1648) = 0u;
            *(_OWORD *)(a1 + 1632) = 0u;
            *(_OWORD *)(a1 + 1616) = 0u;
            *(_OWORD *)(a1 + 1600) = 0u;
            *(_OWORD *)(a1 + 1584) = 0u;
            *(_OWORD *)(a1 + 1568) = 0u;
            *(_OWORD *)(a1 + 1552) = 0u;
          }
          if ((v25 & 1) != 0 && (v39 & 0x1004000) != 0)
          {
            *(_OWORD *)(a1 + 1792) = 0u;
            *(_OWORD *)(a1 + 1776) = 0u;
            *(_OWORD *)(a1 + 1760) = 0u;
            *(_OWORD *)(a1 + 1744) = 0u;
            *(_OWORD *)(a1 + 1728) = 0u;
            *(_OWORD *)(a1 + 1712) = 0u;
            *(_OWORD *)(a1 + 1696) = 0u;
            *(_OWORD *)(a1 + 1680) = 0u;
          }
          if ((v25 & 1) != 0 && (v39 & 0x2008000) != 0)
          {
            *(_OWORD *)(a1 + 1920) = 0u;
            *(_OWORD *)(a1 + 1904) = 0u;
            *(_OWORD *)(a1 + 1888) = 0u;
            *(_OWORD *)(a1 + 1872) = 0u;
            *(_OWORD *)(a1 + 1856) = 0u;
            *(_OWORD *)(a1 + 1840) = 0u;
            *(_OWORD *)(a1 + 1824) = 0u;
            *(_OWORD *)(a1 + 1808) = 0u;
          }
          if ((v25 & 1) != 0 && (v39 & 0x4010000) != 0)
          {
            *(_OWORD *)(a1 + 2048) = 0u;
            *(_OWORD *)(a1 + 2032) = 0u;
            *(_OWORD *)(a1 + 2016) = 0u;
            *(_OWORD *)(a1 + 2000) = 0u;
            *(_OWORD *)(a1 + 1984) = 0u;
            *(_OWORD *)(a1 + 1968) = 0u;
            *(_OWORD *)(a1 + 1952) = 0u;
            *(_OWORD *)(a1 + 1936) = 0u;
          }
          if ((v25 & 4) != 0 && (v39 & 0x8020000) != 0)
          {
            *(_OWORD *)(a1 + 2176) = 0u;
            *(_OWORD *)(a1 + 2160) = 0u;
            *(_OWORD *)(a1 + 2144) = 0u;
            *(_OWORD *)(a1 + 2128) = 0u;
            *(_OWORD *)(a1 + 2112) = 0u;
            *(_OWORD *)(a1 + 2096) = 0u;
            *(_OWORD *)(a1 + 2080) = 0u;
            *(_OWORD *)(a1 + 2064) = 0u;
          }
        }
        *(void *)(a1 + 1520) = 0;
        *(void *)(a1 + 1528) = 0;
        *(_DWORD *)(a1 + 1536) = 0;
      }
      uint64_t result = 0;
      if (!*(_DWORD *)(a1 + 1540))
      {
        *(_DWORD *)(v13 + 4) = *(_DWORD *)(v13 + 8) & *(_DWORD *)v13;
        *(unsigned char *)(v13 + 33) = *(unsigned char *)(v13 + 32);
        *(unsigned char *)(v13 + 35) = *(unsigned char *)(v13 + 34);
      }
    }
  }
  return result;
}

double gleInitDrawCopyPixelsObject(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 28768) = 0u;
  *(_OWORD *)(a1 + 28752) = 0u;
  return result;
}

void gleReclaimDrawCopyPixelResources(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 28752);
  if (v2)
  {
    gleDestroyStateProgram(a1, v2);
    *(void *)(a1 + 28752) = 0;
  }
  double v3 = *(void **)(a1 + 28760);
  if (v3)
  {
    gleDestroyStateProgram(a1, v3);
    *(void *)(a1 + 28760) = 0;
  }
  float v4 = *(void **)(a1 + 28768);
  if (v4)
  {
    if (*(unsigned char *)(a1 + 32496))
    {
      unint64_t v5 = 0;
      float v6 = (void *)(a1 + 32512);
      do
      {
        (*(void (**)(void, void))(v6[206] + 1392))(*v6, v4[v5++]);
        v6 += 209;
      }
      while (v5 < *(unsigned __int8 *)(a1 + 32496));
    }
    gfxDestroyPluginTexture();
    gfxFreeTextureLevel();
    free(v4);
    *(void *)(a1 + 28768) = 0;
  }
  int v7 = *(char **)(a1 + 28776);
  if (v7)
  {
    if (*(unsigned char *)(a1 + 32496))
    {
      unint64_t v8 = 0;
      uint64_t v9 = (void *)(a1 + 32512);
      int v10 = v7 + 160;
      do
      {
        (*(void (**)(void, void))(v9[206] + 1592))(*v9, *(void *)&v10[8 * v8]);
        (*(void (**)(void, void))(v9[206] + 1616))(v9[1], *(void *)&v10[8 * v8++]);
        v9 += 209;
      }
      while (v8 < *(unsigned __int8 *)(a1 + 32496));
    }
    free(v7);
    *(void *)(a1 + 28776) = 0;
  }
}

uint64_t gleDrawTexture(uint64_t result, __n128 a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  float v6 = a6.n128_f32[0];
  float v7 = a5.n128_f32[0];
  float v8 = a4.n128_f32[0];
  float v9 = a3.n128_f32[0];
  float v10 = a2.n128_f32[0];
  unint64_t v11 = result;
  uint64_t v12 = result + 23788;
  uint64_t v13 = result + 15282;
  if (*(unsigned char *)(*(void *)(result + 29480) + 101))
  {
    int v14 = *(_DWORD *)(result + 1544);
    if ((v14 & 0x40000000) == 0)
    {
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1544) = v14 | 0x40000000;
    }
  }
  int v15 = *(_DWORD *)(result + 28652);
  char v16 = *(unsigned char *)(result + 15534);
  int v17 = *(unsigned __int16 *)(result + 15528);
  if (!v16 && v17 == 2305)
  {
    if (*(unsigned char *)(result + 15538))
    {
      int v18 = 0;
      int v63 = 0;
      LOWORD(v17) = 0;
      int v19 = 0;
      goto LABEL_10;
    }
    LOWORD(v17) = 2305;
  }
  int v18 = *(unsigned __int16 *)(result + 15524);
  int v63 = *(unsigned __int16 *)(result + 15526);
  *(unsigned char *)(result + 15534) = 0;
  *(_WORD *)(result + 15528) = 2305;
  *(_DWORD *)(result + 15524) = 453122818;
  int v19 = 1;
  *(unsigned char *)(result + 15538) = 1;
  *(_DWORD *)(result + 1548) |= 0x8202u;
  *(_DWORD *)(result + 28652) = 0;
  *(_DWORD *)(result + 1520) |= 0x800000u;
LABEL_10:
  unsigned __int8 v65 = *(unsigned char *)(result + 15537);
  if (v65 | *(unsigned __int8 *)(result + 15533))
  {
    char v62 = *(unsigned char *)(result + 15533);
    v19 |= 2u;
    *(unsigned char *)(result + 15537) = 0;
    *(unsigned char *)(result + 15533) = 0;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1520) |= 0x800000u;
  }
  else
  {
    char v62 = 0;
  }
  uint64_t v20 = result + 28681;
  char v64 = *(unsigned char *)v13;
  if (*(unsigned char *)v13)
  {
    v19 |= 4u;
    *(unsigned char *)uint64_t v13 = 0;
    double result = gleUpdateFogData(result);
  }
  if (v15 == -805306368) {
    goto LABEL_22;
  }
  if ((*(unsigned char *)(v11 + 1547) & 0x40) != 0) {
    *(unsigned char *)(v20 + 3809) = 1;
  }
  if ((*(unsigned char *)(v12 + 4864) & 0x20) != 0 && (*(unsigned char *)v20 & 1) != 0 && (*(unsigned char *)(v20 + 2) & 1) != 0
    || (char v21 = 1,
        double result = gleDoSelectiveDispatchCore(v11, 0x20u, 1u, 1u, 0xB8000000, a2, a3.n128_f64[0], a4.n128_f64[0]),
        result))
  {
LABEL_22:
    if (v8 <= 0.0)
    {
      float v22 = *(float *)(v11 + 9328);
    }
    else if (v8 >= 1.0)
    {
      float v22 = *(float *)(v11 + 9332);
    }
    else
    {
      float v22 = *(float *)(v11 + 9328) + (float)(v8 * *(float *)(v11 + 9336));
    }
    unint64_t v23 = *(__n128 **)(v11 + 26000);
    float v24 = *(float *)(v20 + 15);
    float v25 = *(float *)(v20 + 19);
    v26.n128_f32[0] = v25 + (float)(v24 * v10);
    float v27 = v25 + (float)(v24 * (float)(v10 + v7));
    float v28 = *(float *)(v20 + 23);
    float v29 = *(float *)(v20 + 27);
    float v30 = v29 + (float)(v28 * v9);
    float v31 = v29 + (float)(v28 * (float)(v9 + v6));
    if ((**(unsigned char **)(v11 + 29032) & 4) != 0)
    {
      float v50 = (float)*(int *)(v20 + 35);
      float v51 = (float)*(int *)(v20 + 39);
      float v52 = (float)*(int *)(v20 + 43);
      float v53 = (float)*(int *)(v20 + 47);
      if (v26.n128_f32[0] > v51 || v27 < v50 || v30 > v53 || v31 < v52)
      {
        char v21 = 0;
        goto LABEL_65;
      }
      a2.n128_u64[0] = 0;
      if (v26.n128_f32[0] >= v50)
      {
        int v32 = 0;
        a3.n128_u64[0] = 0;
      }
      else
      {
        float v59 = v27 - v26.n128_f32[0];
        int v32 = 1;
        v26.n128_f32[0] = (float)*(int *)(v20 + 35);
        a3.n128_f32[0] = (float)(v27 - v50) / v59;
      }
      if (v27 <= v51)
      {
        float v51 = v27;
      }
      else
      {
        v32 |= 2u;
        a2.n128_f32[0] = (float)(v51 - v26.n128_f32[0]) / (float)(v27 - v26.n128_f32[0]);
      }
      a5.n128_u64[0] = 0;
      if (v30 >= v52)
      {
        a4.n128_u64[0] = 0;
        float v52 = v30;
      }
      else
      {
        v32 |= 4u;
        a4.n128_f32[0] = (float)(v31 - v52) / (float)(v31 - v30);
      }
      if (v31 <= v53)
      {
        float v27 = v51;
        float v30 = v52;
      }
      else
      {
        v32 |= 8u;
        float v60 = v31 - v52;
        float v27 = v51;
        float v30 = v52;
        float v31 = (float)*(int *)(v20 + 47);
        a5.n128_f32[0] = (float)(v53 - v52) / v60;
      }
    }
    else
    {
      int v32 = 0;
      a3.n128_u64[0] = 0;
      a2.n128_u64[0] = 0;
      a4.n128_u64[0] = 0;
      a5.n128_u64[0] = 0;
    }
    float v33 = v22 * *(float *)(v20 + 31);
    v23[1].n128_u32[3] = 0;
    v23[4].n128_u32[0] = v26.n128_u32[0];
    v23[4].n128_f32[1] = v30;
    v23[4].n128_f32[2] = v33;
    v23[4].n128_u32[3] = 1065353216;
    v23[41].n128_u32[3] = 0;
    v23[44].n128_f32[0] = v27;
    v23[44].n128_f32[1] = v30;
    v23[44].n128_f32[2] = v33;
    v23[44].n128_u32[3] = 1065353216;
    v23[81].n128_u32[3] = 0;
    v23[84].n128_u32[0] = v26.n128_u32[0];
    v23[84].n128_f32[1] = v31;
    v23[84].n128_f32[2] = v33;
    v23[84].n128_u32[3] = 1065353216;
    v23[121].n128_u32[3] = 0;
    v23[124].n128_f32[0] = v27;
    v23[124].n128_f32[1] = v31;
    v23[124].n128_f32[2] = v33;
    v23[124].n128_u32[3] = 1065353216;
    if (*(unsigned char *)(v13 + 3950))
    {
      a6 = *(__n128 *)(v11 + 8464);
      v23[8] = a6;
      v23[48] = a6;
      v23[88] = a6;
      v23[128] = a6;
    }
    if (*(unsigned char *)(v13 + 3951))
    {
      a6 = *(__n128 *)(v11 + 8480);
      v23[9] = a6;
      v23[49] = a6;
      v23[89] = a6;
      v23[129] = a6;
    }
    char v34 = 0;
    uint64_t v35 = 0;
    uint64_t v36 = 15684;
    uint64_t v37 = 20800;
    a6.n128_u64[0] = 0x3F80000000000000;
    do
    {
      if ((*(unsigned char *)(v11 + v36) & 8) != 0)
      {
        uint64_t v39 = *(void *)(v11 + v37);
        v26.n128_u16[0] = *(_WORD *)(v39 + 1002);
        float v40 = (float)v26.n128_u32[0];
        LOWORD(v31) = *(_WORD *)(v39 + 1004);
        float v41 = (float)LODWORD(v31);
        float v42 = (float)*(int *)(v39 + 780);
        float v43 = (float)*(int *)(v39 + 784);
        float v31 = v42 / v40;
        v26.n128_f32[0] = (float)(v42 + (float)*(int *)(v39 + 788)) / v40;
        float v44 = v43 / v41;
        float v45 = (float)(v43 + (float)*(int *)(v39 + 792)) / v41;
        if (v32)
        {
          if (v32) {
            float v31 = v26.n128_f32[0] - (float)((float)(v26.n128_f32[0] - v31) * a3.n128_f32[0]);
          }
          if ((v32 & 2) != 0) {
            v26.n128_f32[0] = v31 + (float)((float)(v26.n128_f32[0] - v31) * a2.n128_f32[0]);
          }
          if ((v32 & 4) != 0) {
            float v44 = v45 - (float)((float)(v45 - v44) * a4.n128_f32[0]);
          }
          if ((v32 & 8) != 0) {
            float v45 = v44 + (float)((float)(v45 - v44) * a5.n128_f32[0]);
          }
        }
        unint64_t v46 = &v23[v35];
        v46[14].n128_f32[0] = v31;
        v46[14].n128_f32[1] = v44;
        v46[14].n128_u64[1] = 0x3F80000000000000;
        v46[54].n128_u32[0] = v26.n128_u32[0];
        v46[54].n128_f32[1] = v44;
        v46[54].n128_u64[1] = 0x3F80000000000000;
        v46[94].n128_f32[0] = v31;
        v46[94].n128_f32[1] = v45;
        v46[94].n128_u64[1] = 0x3F80000000000000;
        v46[134].n128_u32[0] = v26.n128_u32[0];
        v46[134].n128_f32[1] = v45;
        v46[134].n128_u64[1] = 0x3F80000000000000;
      }
      else if (v15 != -805306368 && ((*(_DWORD *)v12 >> v34) & 1) != 0)
      {
        __n128 v26 = *(__n128 *)(v11 + v35 * 16 + 8560);
        uint64_t v38 = &v23[v35];
        v38[14] = v26;
        v38[54] = v26;
        v38[94] = v26;
        v38[134] = v26;
      }
      ++v35;
      ++v34;
      v37 += 88;
      v36 += 76;
    }
    while (v35 != 8);
    if (*(void *)(v11 + 26280))
    {
      char v61 = v16;
      unsigned int v47 = *(__int16 *)(v12 + 2344);
      int v66 = 0;
      uint64_t v48 = (*(uint64_t (**)(void, uint64_t, int *, __n128, __n128, __n128, __n128, __n128))(v11 + 29200))(*(void *)(v11 + 29016), 5, &v66, a2, a3, a4, a5, a6);
      (*(void (**)(unint64_t, __n128 *, uint64_t))(v11 + 26168))(v11, v23, v48);
      (*(void (**)(unint64_t, __n128 *, uint64_t))(v11 + 26168))(v11, v23 + 40, v48 + v47);
      (*(void (**)(unint64_t, __n128 *, uint64_t))(v11 + 26168))(v11, v23 + 80, v48 + v47 + v47);
      uint64_t v49 = v48 + v47 + v47 + v47;
      char v16 = v61;
      (*(void (**)(unint64_t, __n128 *, uint64_t))(v11 + 26168))(v11, v23 + 120, v49);
      double result = (*(uint64_t (**)(void, void, uint64_t, uint64_t))(v11 + 29208))(*(void *)(v11 + 29016), 0, 5, 4);
    }
    else
    {
      double result = (*(uint64_t (**)(void, __n128 *, uint64_t, void, __n128, __n128, __n128, __n128, __n128))(v11 + 29120))(*(void *)(v11 + 29016), v23, 4, 0, a2, a3, a4, a5, a6);
    }
    char v21 = 0;
  }
LABEL_65:
  if ((v19 & 1) == 0)
  {
    if ((v19 & 2) == 0) {
      goto LABEL_67;
    }
LABEL_78:
    *(unsigned char *)(v13 + 255) = v65;
    *(unsigned char *)(v13 + 251) = v62;
    *(_DWORD *)(v12 + 4864) = 0;
    *(_DWORD *)(v11 + 1520) |= 0x800000u;
    if ((v19 & 4) == 0) {
      goto LABEL_68;
    }
LABEL_79:
    *(unsigned char *)uint64_t v13 = v64;
    double result = gleUpdateFogData(v11);
    goto LABEL_80;
  }
  *(unsigned char *)(v13 + 252) = v16;
  *(_WORD *)(v13 + 246) = v17;
  *(_WORD *)(v13 + 242) = v18;
  *(_WORD *)(v13 + 244) = v63;
  BOOL v58 = v18 == 6914 && v63 == 6914;
  *(unsigned char *)(v13 + 256) = v58;
  *(_DWORD *)(v11 + 1548) |= 0x8202u;
  *(_DWORD *)(v12 + 4864) = 0;
  *(_DWORD *)(v11 + 1520) |= 0x800000u;
  if ((v19 & 2) != 0) {
    goto LABEL_78;
  }
LABEL_67:
  if ((v19 & 4) != 0) {
    goto LABEL_79;
  }
LABEL_68:
  if (!v19 && (*(unsigned char *)(v11 + 1547) & 0x40) != 0)
  {
    *(_DWORD *)(v12 + 4864) = 0;
    *(_DWORD *)(v11 + 1520) |= 0x80u;
  }
LABEL_80:
  if ((v21 & 1) == 0) {
    *(_DWORD *)(v12 + 4864) = -805306368;
  }
  *(unsigned char *)(v20 + 3809) = 0;
  return result;
}

uint64_t gleSetEnable_Error(uint64_t result)
{
  if (!*(_WORD *)(result + 29832)) {
    *(_WORD *)(result + 29832) = 1280;
  }
  return result;
}

char *gleFillEnableHashTableEntriesES2(char *a1)
{
  gleAddEnableHashFunc(a1, 2884, (uint64_t)gleSetEnable_CULL_FACE);
  gleAddEnableHashFunc(a1, 3042, (uint64_t)gleSetEnable_BLEND);
  gleAddEnableHashFunc(a1, 3024, (uint64_t)gleSetEnable_DITHER);
  gleAddEnableHashFunc(a1, 2960, (uint64_t)gleSetEnable_STENCIL_TEST);
  gleAddEnableHashFunc(a1, 2929, (uint64_t)gleSetEnable_DEPTH_TEST);
  gleAddEnableHashFunc(a1, 12288, (uint64_t)gleSetEnable_CLIP_PLANE);
  gleAddEnableHashFunc(a1, 12289, (uint64_t)gleSetEnable_CLIP_PLANE);
  gleAddEnableHashFunc(a1, 12290, (uint64_t)gleSetEnable_CLIP_PLANE);
  gleAddEnableHashFunc(a1, 12291, (uint64_t)gleSetEnable_CLIP_PLANE);
  gleAddEnableHashFunc(a1, 12292, (uint64_t)gleSetEnable_CLIP_PLANE);
  gleAddEnableHashFunc(a1, 12293, (uint64_t)gleSetEnable_CLIP_PLANE);
  gleAddEnableHashFunc(a1, 12294, (uint64_t)gleSetEnable_CLIP_PLANE);
  gleAddEnableHashFunc(a1, 12295, (uint64_t)gleSetEnable_CLIP_PLANE);
  gleAddEnableHashFunc(a1, 3089, (uint64_t)gleSetEnable_SCISSOR_TEST);
  gleAddEnableHashFunc(a1, 32823, (uint64_t)gleSetEnable_POLYGON_OFFSET_FILL);
  gleAddEnableHashFunc(a1, 32926, (uint64_t)gleSetEnable_SAMPLE_ALPHA_TO_COVERAGE);

  return gleAddEnableHashFunc(a1, 32928, (uint64_t)gleSetEnable_SAMPLE_COVERAGE);
}

uint64_t gleSetEnable_RASTERIZER_DISCARD_EXT(uint64_t result, uint64_t a2, int a3)
{
  if (*(unsigned __int8 *)(result + 17984) != a3)
  {
    *(unsigned char *)(result + 17984) = a3;
    *(_DWORD *)(result + 1524) |= 0x40000000u;
    *(_DWORD *)(result + 1540) |= 0x10000000u;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1548) |= 0x8000u;
  }
  return result;
}

uint64_t gleSetEnable_PRIMITIVE_RESTART(uint64_t result, uint64_t a2, char a3)
{
  *(unsigned char *)(result + 17716) = a3;
  *(_DWORD *)(result + 28652) = 0;
  *(_DWORD *)(result + 1524) |= 0x80000u;
  return result;
}

uint64_t gleSetEnable_CLIP_PLANE(uint64_t result, char a2, int a3)
{
  double v3 = (int *)(result + 17572);
  int v4 = *(_DWORD *)(result + 17572);
  int v5 = v4 & ~(1 << a2) | (a3 << a2);
  if (v4 != v5)
  {
    uint64_t v6 = result;
    *double v3 = v5;
    double result = gleUpdateClipPlane(result);
    if ((*(_WORD *)(*(void *)(v6 + 29032) + 26) & 0x80) != 0) {
      *(_DWORD *)(v6 + 1548) |= 0x10000u;
    }
    v3[2770] = 0;
    *(_DWORD *)(v6 + 1528) |= 0x1000000 << a2;
  }
  return result;
}

uint64_t gleSetEnable_SAMPLE_ALPHA_TO_COVERAGE(uint64_t result, uint64_t a2, int a3)
{
  if (*(unsigned __int8 *)(result + 17681) != a3)
  {
    *(unsigned char *)(result + 17681) = a3;
    *(_DWORD *)(result + 1520) |= 0x20000000u;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1548) |= 0x40000u;
  }
  return result;
}

uint64_t gleSetEnable_SAMPLE_COVERAGE(uint64_t result, uint64_t a2, int a3)
{
  if (*(unsigned __int8 *)(result + 17683) != a3)
  {
    *(unsigned char *)(result + 17683) = a3;
    *(_DWORD *)(result + 1520) |= 0x20000000u;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1548) |= 0x40000u;
  }
  return result;
}

uint64_t gleSetEnable_POINT_SPRITE_ARB(uint64_t result, uint64_t a2, int a3)
{
  if (*(unsigned __int8 *)(result + 15377) != a3)
  {
    uint64_t v3 = result;
    int v4 = (_DWORD *)(result + 28652);
    *(unsigned char *)(result + 15377) = a3;
    double result = gleUpdatePointSmooth(result);
    *int v4 = 0;
    *(_DWORD *)(v3 + 1520) |= 0x400000u;
    if ((*(unsigned char *)(*(void *)(v3 + 29032) + 27) & 8) != 0) {
      *(_DWORD *)(v3 + 1548) |= 0x20000u;
    }
  }
  return result;
}

uint64_t gleSetEnable_COLOR_LOGIC_OP(uint64_t result, uint64_t a2, int a3)
{
  if (*(unsigned __int8 *)(result + 15319) != a3)
  {
    *(unsigned char *)(result + 15319) = a3;
    *(_DWORD *)(result + 1520) |= 0x20000u;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1548) |= 0x40000u;
  }
  return result;
}

uint64_t gleSetEnable_POINT_SMOOTH(uint64_t result, uint64_t a2, int a3)
{
  char v3 = *(unsigned char *)(result + 32507);
  if ((v3 & 0x7F) != a3)
  {
    *(unsigned char *)(result + 32507) = v3 & 0x80 | a3 & 0x7F;
    return gleUpdatePointSmooth(result);
  }
  return result;
}

uint64_t gleSetEnable_RESCALE_NORMAL_EXT(uint64_t result, uint64_t a2, int a3)
{
  if (*(unsigned __int8 *)(result + 12517) != a3)
  {
    *(unsigned char *)(result + 12517) = a3;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1544) |= 0x10u;
  }
  return result;
}

uint64_t gleSetEnable_MULTISAMPLE(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3 = result + 17680;
  if (*(unsigned __int8 *)(result + 17680) != a3)
  {
    uint64_t v4 = result;
    *(unsigned char *)uint64_t v3 = a3;
    double result = gleUpdatePointSmooth(result);
    *(_DWORD *)(v4 + 1520) |= 0x20000000u;
    *(_DWORD *)(v3 + 10972) = 0;
    *(_DWORD *)(v4 + 1548) |= 0x40000u;
  }
  return result;
}

uint64_t gleSetEnable_SAMPLE_ALPHA_TO_ONE(uint64_t result, uint64_t a2, int a3)
{
  if (*(unsigned __int8 *)(result + 17682) != a3)
  {
    *(unsigned char *)(result + 17682) = a3;
    *(_DWORD *)(result + 1520) |= 0x20000000u;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1548) |= 0x40000u;
  }
  return result;
}

uint64_t gleSetEnable_MATRIX_PALETTE_OES(uint64_t result, uint64_t a2, int a3)
{
  if (*(unsigned __int8 *)(result + 17699) != a3)
  {
    uint64_t v3 = result;
    uint64_t v4 = (_DWORD *)(result + 28652);
    *(unsigned char *)(result + 17699) = a3;
    double result = gleUpdateInverseNeeds(result);
    *uint64_t v4 = 0;
    *(_DWORD *)(v3 + 1548) |= 0x1801Eu;
  }
  return result;
}

void *gleSetErrorInList(uint64_t a1, int a2)
{
  double result = gleAddCommand(a1, (uint64_t)glSetError_ListExec, 4);
  *(_DWORD *)double result = a2;
  return result;
}

uint64_t glSetError_ListExec(uint64_t a1, _DWORD *a2)
{
  if (!*(_WORD *)(a1 + 29832)) {
    *(_WORD *)(a1 + 29832) = *a2;
  }
  return 4;
}

uint64_t gleFeedbackHitRecord(uint64_t result, uint64_t a2)
{
  uint64_t v2 = (int *)(result + 19960);
  if (!*(unsigned char *)(result + 19968))
  {
    uint64_t v4 = result;
    switch(*(_DWORD *)(result + 19964))
    {
      case 0x600:
        int v5 = *(_DWORD **)(result + 19952);
        unint64_t v6 = *(void *)(result + 19944) + 4 * *v2;
        if ((unint64_t)v5 >= v6) {
          goto LABEL_30;
        }
        *int v5 = *(_DWORD *)(a2 + 64);
        *(void *)(result + 19952) = v5 + 1;
        if ((unint64_t)(v5 + 1) >= v6) {
          goto LABEL_30;
        }
        int v7 = *(_DWORD *)(a2 + 68);
        *(void *)(result + 19952) = v5 + 2;
        v5[1] = v7;
        break;
      case 0x601:
        uint64_t v13 = *(_DWORD **)(result + 19952);
        unint64_t v14 = *(void *)(result + 19944) + 4 * *v2;
        if ((unint64_t)v13 >= v14) {
          goto LABEL_30;
        }
        *uint64_t v13 = *(_DWORD *)(a2 + 64);
        *(void *)(result + 19952) = v13 + 1;
        if ((unint64_t)(v13 + 1) >= v14) {
          goto LABEL_30;
        }
        int v15 = *(_DWORD *)(a2 + 68);
        *(void *)(result + 19952) = v13 + 2;
        v13[1] = v15;
        if ((unint64_t)(v13 + 2) >= v14) {
          goto LABEL_30;
        }
        int v16 = *(_DWORD *)(a2 + 72);
        *(void *)(result + 19952) = v13 + 3;
        void v13[2] = v16;
        break;
      case 0x602:
        int v17 = *(_DWORD **)(result + 19952);
        unint64_t v18 = *(void *)(result + 19944) + 4 * *v2;
        if ((unint64_t)v17 >= v18
          || (*int v17 = *(_DWORD *)(a2 + 64), *(void *)(result + 19952) = v17 + 1, (unint64_t)(v17 + 1) >= v18)
          || (int v19 = *(_DWORD *)(a2 + 68),
              *(void *)(result + 19952) = v17 + 2,
              v17[1] = v19,
              (unint64_t)(v17 + 2) >= v18))
        {
          *(unsigned char *)(result + 19968) = 1;
        }
        else
        {
          int v20 = *(_DWORD *)(a2 + 72);
          *(void *)(result + 19952) = v17 + 3;
          void v17[2] = v20;
        }
        double result = gleFeedbackColorTokens(result, (float *)a2);
        break;
      case 0x603:
        char v21 = *(_DWORD **)(result + 19952);
        unint64_t v22 = *(void *)(result + 19944) + 4 * *v2;
        if ((unint64_t)v21 >= v22) {
          goto LABEL_23;
        }
        *char v21 = *(_DWORD *)(a2 + 64);
        *(void *)(result + 19952) = v21 + 1;
        if ((unint64_t)(v21 + 1) >= v22) {
          goto LABEL_23;
        }
        int v23 = *(_DWORD *)(a2 + 68);
        *(void *)(result + 19952) = v21 + 2;
        v21[1] = v23;
        if ((unint64_t)(v21 + 2) >= v22) {
          goto LABEL_23;
        }
        int v24 = *(_DWORD *)(a2 + 72);
        *(void *)(result + 19952) = v21 + 3;
        v21[2] = v24;
        goto LABEL_24;
      default:
        float v8 = *(_DWORD **)(result + 19952);
        unint64_t v9 = *(void *)(result + 19944) + 4 * *v2;
        if ((unint64_t)v8 >= v9) {
          goto LABEL_23;
        }
        *float v8 = *(_DWORD *)(a2 + 64);
        *(void *)(result + 19952) = v8 + 1;
        if ((unint64_t)(v8 + 1) >= v9
          || (int v10 = *(_DWORD *)(a2 + 68),
              *(void *)(result + 19952) = v8 + 2,
              v8[1] = v10,
              (unint64_t)(v8 + 2) >= v9)
          || (int v11 = *(_DWORD *)(a2 + 72),
              *(void *)(result + 19952) = v8 + 3,
              _DWORD v8[2] = v11,
              (unint64_t)(v8 + 3) >= v9))
        {
LABEL_23:
          *(unsigned char *)(result + 19968) = 1;
        }
        else
        {
          int v12 = *(_DWORD *)(a2 + 92);
          *(void *)(result + 19952) = v8 + 4;
          v8[3] = v12;
        }
LABEL_24:
        double result = gleFeedbackColorTokens(result, (float *)a2);
        if (!*((unsigned char *)v2 + 8))
        {
          float v25 = *(_DWORD **)(v4 + 19952);
          unint64_t v26 = *(void *)(v4 + 19944) + 4 * *v2;
          if ((unint64_t)v25 >= v26) {
            goto LABEL_30;
          }
          *float v25 = *(_DWORD *)(a2 + 224);
          *(void *)(v4 + 19952) = v25 + 1;
          if ((unint64_t)(v25 + 1) >= v26
            || (int v27 = *(_DWORD *)(a2 + 228),
                *(void *)(v4 + 19952) = v25 + 2,
                v25[1] = v27,
                (unint64_t)(v25 + 2) >= v26)
            || (int v28 = *(_DWORD *)(a2 + 232),
                *(void *)(v4 + 19952) = v25 + 3,
                v25[2] = v28,
                (unint64_t)(v25 + 3) >= v26))
          {
LABEL_30:
            *((unsigned char *)v2 + 8) = 1;
          }
          else
          {
            int v29 = *(_DWORD *)(a2 + 236);
            *(void *)(v4 + 19952) = v25 + 4;
            v25[3] = v29;
          }
        }
        break;
    }
  }
  return result;
}

uint64_t gleFeedbackPointsPtr(uint64_t result, uint64_t *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a2;
    uint64_t v4 = result;
    int v5 = (int *)(result + 19960);
    unint64_t v6 = (unint64_t)&a2[a3];
    do
    {
      if (!*((unsigned char *)v5 + 8))
      {
        int v7 = *(_DWORD **)(v4 + 19952);
        if ((unint64_t)v7 >= *(void *)(v4 + 19944) + 4 * *v5)
        {
          *((unsigned char *)v5 + 8) = 1;
        }
        else
        {
          *int v7 = 1155538944;
          *(void *)(v4 + 19952) = v7 + 1;
        }
      }
      uint64_t v8 = *v3++;
      double result = gleFeedbackHitRecord(v4, v8);
    }
    while ((unint64_t)v3 < v6);
  }
  return result;
}

uint64_t gleFeedbackLinesPtr(uint64_t result, uint64_t *a2, int a3, int a4)
{
  if (a3 >= 2)
  {
    uint64_t v6 = result;
    int v7 = (int *)(result + 19960);
    int v8 = 1155547136;
    if (a4)
    {
      int v9 = 1155588096;
      if (a4 != 1) {
        int v8 = 1155588096;
      }
    }
    else
    {
      int v9 = 1155547136;
    }
    if (!*(unsigned char *)(result + 19968))
    {
      int v10 = *(int **)(result + 19952);
      if ((unint64_t)v10 >= *(void *)(result + 19944) + 4 * *v7)
      {
        *(unsigned char *)(result + 19968) = 1;
      }
      else
      {
        *int v10 = v9;
        *(void *)(result + 19952) = v10 + 1;
      }
    }
    gleFeedbackHitRecord(result, *a2);
    double result = gleFeedbackHitRecord(v6, a2[1]);
    if (a3 >= 4)
    {
      unint64_t v11 = (unint64_t)&a2[a3 - 1];
      int v12 = a2 + 2;
      do
      {
        if (!*((unsigned char *)v7 + 8))
        {
          uint64_t v13 = *(int **)(v6 + 19952);
          if ((unint64_t)v13 >= *(void *)(v6 + 19944) + 4 * *v7)
          {
            *((unsigned char *)v7 + 8) = 1;
          }
          else
          {
            *uint64_t v13 = v8;
            *(void *)(v6 + 19952) = v13 + 1;
          }
        }
        gleFeedbackHitRecord(v6, *v12);
        double result = gleFeedbackHitRecord(v6, v12[1]);
        v12 += 2;
      }
      while ((unint64_t)v12 < v11);
    }
  }
  return result;
}

uint64_t gleFeedbackPolygonPtr(uint64_t result, uint64_t *a2, int a3, char a4)
{
  uint64_t v4 = (int *)(result + 19960);
  unsigned int v5 = 1799;
  uint64_t v6 = a2;
  uint64_t v7 = result;
  switch(a4 & 3)
  {
    case 1:
      goto LABEL_17;
    case 2:
      if (!*(unsigned char *)(result + 19968))
      {
        unint64_t v11 = *(void *)(result + 19952);
        unint64_t v12 = *(void *)(result + 19944) + 4 * *v4;
        if (v11 >= v12 || (*(_DWORD *)unint64_t v11 = 1155555328, *(void *)(result + 19952) = v11 + 4, v11 + 4 >= v12))
        {
          *(unsigned char *)(result + 19968) = 1;
        }
        else
        {
          *(void *)(result + 19952) = v11 + 8;
          *(float *)(v11 + 4) = (float)a3;
        }
      }
      if (a3 >= 1)
      {
        int v19 = &a2[a3];
        do
        {
          uint64_t v20 = *v6++;
          double result = gleFeedbackHitRecord(v7, v20);
        }
        while (v6 < v19);
      }
      break;
    case 3:
      unsigned int v5 = 1794;
LABEL_17:
      unint64_t v13 = (unint64_t)&a2[a3 - 1];
      if (v13 <= (unint64_t)a2)
      {
        unint64_t v14 = a2;
      }
      else
      {
        unint64_t v14 = a2;
        do
        {
          if (!*((unsigned char *)v4 + 8))
          {
            int v15 = *(float **)(v7 + 19952);
            if ((unint64_t)v15 >= *(void *)(v7 + 19944) + 4 * *v4)
            {
              *((unsigned char *)v4 + 8) = 1;
            }
            else
            {
              *int v15 = (float)v5;
              *(void *)(v7 + 19952) = v15 + 1;
            }
          }
          gleFeedbackHitRecord(v7, *v14);
          uint64_t v16 = v14[1];
          ++v14;
          gleFeedbackHitRecord(v7, v16);
          unsigned int v5 = 1794;
        }
        while ((unint64_t)v14 < v13);
      }
      if (!*((unsigned char *)v4 + 8))
      {
        int v17 = *(float **)(v7 + 19952);
        if ((unint64_t)v17 >= *(void *)(v7 + 19944) + 4 * *v4)
        {
          *((unsigned char *)v4 + 8) = 1;
        }
        else
        {
          *int v17 = (float)v5;
          *(void *)(v7 + 19952) = v17 + 1;
        }
      }
      gleFeedbackHitRecord(v7, *v14);
      uint64_t v18 = *v6;
      double result = gleFeedbackHitRecord(v7, v18);
      break;
    default:
      if (a3 >= 1)
      {
        int v8 = &a2[a3];
        do
        {
          uint64_t v9 = *v6;
          if (!*(unsigned char *)(*v6 + 1))
          {
            if (!*((unsigned char *)v4 + 8))
            {
              int v10 = *(_DWORD **)(v7 + 19952);
              if ((unint64_t)v10 >= *(void *)(v7 + 19944) + 4 * *v4)
              {
                *((unsigned char *)v4 + 8) = 1;
              }
              else
              {
                *int v10 = 1155538944;
                *(void *)(v7 + 19952) = v10 + 1;
                uint64_t v9 = *v6;
              }
            }
            double result = gleFeedbackHitRecord(v7, v9);
          }
          ++v6;
        }
        while (v6 < v8);
      }
      break;
  }
  return result;
}

uint64_t gleFeedbackColorTokens(uint64_t result, float *a2)
{
  uint64_t v2 = (int *)(result + 19960);
  float v3 = a2[32];
  if (*(unsigned char *)(result + 17702))
  {
    if (*(unsigned char *)(result + 19968)) {
      return result;
    }
    uint64_t v4 = *(float **)(result + 19952);
    if ((unint64_t)v4 < *(void *)(result + 19944) + 4 * *v2)
    {
      *uint64_t v4 = fminf(fmaxf(v3, *(float *)(result + 288)), *(float *)(result + 292));
      *(void *)(result + 19952) = v4 + 1;
      if ((unint64_t)(v4 + 1) < *(void *)(result + 19944) + 4 * *v2)
      {
        float v9 = fminf(fmaxf(a2[33], *(float *)(result + 288)), *(float *)(result + 292));
        *(void *)(result + 19952) = v4 + 2;
        v4[1] = v9;
        if ((unint64_t)(v4 + 2) < *(void *)(result + 19944) + 4 * *v2)
        {
          float v10 = fminf(fmaxf(a2[34], *(float *)(result + 288)), *(float *)(result + 292));
          *(void *)(result + 19952) = v4 + 3;
          v4[2] = v10;
          if ((unint64_t)(v4 + 3) < *(void *)(result + 19944) + 4 * *v2)
          {
            float v8 = fminf(fmaxf(a2[35], *(float *)(result + 288)), *(float *)(result + 292));
            goto LABEL_15;
          }
        }
      }
    }
    goto LABEL_16;
  }
  if (!*(unsigned char *)(result + 19968))
  {
    uint64_t v4 = *(float **)(result + 19952);
    unint64_t v5 = *(void *)(result + 19944) + 4 * *v2;
    if ((unint64_t)v4 < v5)
    {
      *uint64_t v4 = v3;
      *(void *)(result + 19952) = v4 + 1;
      if ((unint64_t)(v4 + 1) < v5)
      {
        int v6 = *((_DWORD *)a2 + 33);
        *(void *)(result + 19952) = v4 + 2;
        *((_DWORD *)v4 + 1) = v6;
        if ((unint64_t)(v4 + 2) < v5)
        {
          int v7 = *((_DWORD *)a2 + 34);
          *(void *)(result + 19952) = v4 + 3;
          *((_DWORD *)v4 + 2) = v7;
          if ((unint64_t)(v4 + 3) < v5)
          {
            float v8 = a2[35];
LABEL_15:
            *(void *)(result + 19952) = v4 + 4;
            double v4[3] = v8;
            return result;
          }
        }
      }
    }
LABEL_16:
    *(unsigned char *)(result + 19968) = 1;
  }
  return result;
}

uint64_t gleCreatePluginFence(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(result + 320))
  {
    uint64_t v3 = result;
    unint64_t v4 = 0;
    uint64_t v5 = result + 360;
    do
    {
      double result = (*(uint64_t (**)(void, uint64_t))(*(void *)v5 + 1728))(*(void *)(v5 - 8), a2);
      ++v4;
      a2 += 8;
      v5 += 32;
    }
    while (v4 < *(unsigned __int8 *)(v3 + 320));
  }
  return result;
}

void gleFreeFenceObject(uint64_t a1, char *a2)
{
  uint64_t v3 = *(void *)(a1 + 19296);
  if (*(unsigned char *)(v3 + 320))
  {
    unint64_t v4 = 0;
    uint64_t v5 = a2 + 40;
    uint64_t v6 = v3 + 360;
    do
    {
      (*(void (**)(void, void))(*(void *)v6 + 1808))(*(void *)(v6 - 8), *(void *)&v5[8 * v4]);
      *(void *)&v5[8 * v4++] = 0;
      v6 += 32;
    }
    while (v4 < *(unsigned __int8 *)(v3 + 320));
  }

  free(a2);
}

double gleCreateFenceObject(int a1)
{
  uint64_t v2 = (char *)malloc_type_malloc(0xA8uLL, 0x577B5147uLL);
  if (!v2) {
    abort();
  }
  *((_DWORD *)v2 + 4) = a1;
  *(void *)uint64_t v2 = 0;
  *(void *)(v2 + 20) = 0xD00000001;
  double result = 0.0;
  *(_OWORD *)(v2 + 28) = 0u;
  *(_OWORD *)(v2 + 44) = 0u;
  *(_OWORD *)(v2 + 60) = 0u;
  *(_OWORD *)(v2 + 76) = 0u;
  *(_OWORD *)(v2 + 92) = 0u;
  *(_OWORD *)(v2 + 108) = 0u;
  *(_OWORD *)(v2 + 124) = 0u;
  *((_DWORD *)v2 + 35) = 0;
  *((void *)v2 + 19) = 0;
  *((void *)v2 + 20) = 0;
  return result;
}

uint64_t gleSetFence(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = a1 + 25872;
  uint64_t v5 = gleLookupHashObject(a1 + 25872, a2);
  if (!v5)
  {
    v7.n128_f64[0] = gleCreateFenceObject(a2);
    uint64_t v5 = v6;
    uint64_t v8 = *(void *)(a1 + 19296);
    if (*(unsigned char *)(v8 + 320))
    {
      unint64_t v9 = 0;
      float v10 = v6 + 5;
      uint64_t v11 = v8 + 360;
      do
      {
        (*(void (**)(void, uint64_t *, __n128))(*(void *)v11 + 1728))(*(void *)(v11 - 8), v10, v7);
        ++v9;
        ++v10;
        v11 += 32;
      }
      while (v9 < *(unsigned __int8 *)(v8 + 320));
    }
    gleAddHashNameAndObject(a1, v4, (uint64_t)v5);
  }
  uint64_t v12 = a1 + 1672 * *(unsigned __int8 *)(a1 + 32499);
  unint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v12 + 34160) + 1736);
  uint64_t v14 = *(void *)(v12 + 32512);
  uint64_t v15 = v5[*(unsigned __int8 *)(a1 + 32499) + 5];

  return v13(v14, v15);
}

uint64_t gleTestFence(BOOL a1, int a2, unsigned int a3, uint64_t a4)
{
  if (a2) {
    return 0;
  }
  BOOL v4 = a1;
  uint64_t v6 = a1 + 29832;
  __n128 v7 = gleLookupHashObject(a1 + 25872, a3);
  if (!v7)
  {
    if (!*(_WORD *)v6) {
      *(_WORD *)uint64_t v6 = 1282;
    }
    return 1;
  }
  if (!*(unsigned char *)(v6 + 2664)) {
    return 1;
  }
  unint64_t v8 = 0;
  unint64_t v9 = v7 + 5;
  float v10 = (void *)(v4 + 32512);
  LOBYTE(v4) = 1;
  do
  {
    BOOL v4 = v4
      && (*(unsigned int (**)(void, void, void, uint64_t, uint64_t))(v10[206] + 1320))(*v10, 0, 0, a4, v9[v8]) != 0;
    if (v8 != *(unsigned __int8 *)(v6 + 2667) && v8 != *(unsigned __int8 *)(v6 + 2668)) {
      (*(void (**)(void))(v10[206] + 1296))(*v10);
    }
    ++v8;
    v10 += 209;
  }
  while (v8 < *(unsigned __int8 *)(v6 + 2664));
  return v4;
}

uint64_t *gleFinishFence(uint64_t *result, int a2, unsigned int a3)
{
  if (!a2)
  {
    uint64_t v3 = result;
    BOOL v4 = result + 3729;
    double result = gleLookupHashObject((uint64_t)(result + 3234), a3);
    if (result)
    {
      if (*((unsigned char *)v4 + 2664))
      {
        unint64_t v5 = 0;
        uint64_t v6 = result + 5;
        __n128 v7 = v3 + 4064;
        do
        {
          double result = (uint64_t *)(*(uint64_t (**)(void, void, uint64_t, uint64_t))(v7[206] + 1336))(*v7, 0, 2, v6[v5++]);
          v7 += 209;
        }
        while (v5 < *((unsigned __int8 *)v4 + 2664));
      }
    }
    else if (!*(_WORD *)v4)
    {
      *(_WORD *)BOOL v4 = 1282;
    }
  }
  return result;
}

uint64_t *gleFinishObject(uint64_t *result, int a2, unsigned int a3)
{
  uint64_t v3 = result + 3729;
  BOOL v4 = result;
  switch(a2)
  {
    case 0:
      double result = gleLookupHashObject((uint64_t)(result + 3234), a3);
      if (!result) {
        goto LABEL_29;
      }
      if (*((unsigned char *)v3 + 2664))
      {
        unint64_t v5 = 0;
        uint64_t v6 = result + 5;
        __n128 v7 = v4 + 4064;
        do
        {
          double result = (uint64_t *)(*(uint64_t (**)(void, void, uint64_t, uint64_t))(v7[206] + 1336))(*v7, 0, 2, v6[v5++]);
          v7 += 209;
        }
        while (v5 < *((unsigned __int8 *)v3 + 2664));
      }
      break;
    case 1:
      double result = gleLookupHashObject(result[2412] + 72, a3);
      if (!result) {
        goto LABEL_29;
      }
      if (*((unsigned char *)v3 + 2664))
      {
        unint64_t v9 = 0;
        float v10 = result + 5;
        uint64_t v11 = v4 + 4064;
        do
        {
          double result = (uint64_t *)(*(uint64_t (**)(void, uint64_t, void, uint64_t))(v11[206] + 1336))(*v11, 1, 0, v10[v9++]);
          v11 += 209;
        }
        while (v9 < *((unsigned __int8 *)v3 + 2664));
      }
      break;
    case 2:
      double result = gleLookupHashObject((uint64_t)(result + 3294), a3);
      if (!result) {
        goto LABEL_29;
      }
      if (*((unsigned char *)v3 + 2664))
      {
        unint64_t v12 = 0;
        unint64_t v13 = result + 5;
        uint64_t v14 = v4 + 4064;
        do
        {
          double result = (uint64_t *)(*(uint64_t (**)(void, uint64_t, void, uint64_t))(v14[206] + 1336))(*v14, 2, 0, v13[v12++]);
          v14 += 209;
        }
        while (v12 < *((unsigned __int8 *)v3 + 2664));
      }
      break;
    case 3:
      double result = gleLookupHashObject(result[2412] + 264, a3);
      if (!result) {
        goto LABEL_29;
      }
      if (*((unsigned char *)v3 + 2664))
      {
        unint64_t v15 = 0;
        uint64_t v16 = result + 5;
        int v17 = v4 + 4064;
        do
        {
          double result = (uint64_t *)(*(uint64_t (**)(void, uint64_t, void, uint64_t))(v17[206] + 1336))(*v17, 3, 0, v16[v15++]);
          v17 += 209;
        }
        while (v15 < *((unsigned __int8 *)v3 + 2664));
      }
      break;
    case 4:
      double result = gleLookupHashObject(result[2412] + 40, a3);
      if (result)
      {
        if (*((unsigned char *)v3 + 2664))
        {
          unint64_t v18 = 0;
          int v19 = result + 5;
          uint64_t v20 = v4 + 4064;
          do
          {
            double result = (uint64_t *)(*(uint64_t (**)(void, uint64_t, void, uint64_t))(v20[206] + 1336))(*v20, 1, 0, v19[v18++]);
            v20 += 209;
          }
          while (v18 < *((unsigned __int8 *)v3 + 2664));
        }
      }
      else
      {
LABEL_29:
        if (!*(_WORD *)v3)
        {
          __int16 v8 = 1282;
          goto LABEL_31;
        }
      }
      break;
    case 5:
      return result;
    default:
      if (!*(_WORD *)v3)
      {
        __int16 v8 = 1280;
LABEL_31:
        *(_WORD *)uint64_t v3 = v8;
      }
      break;
  }
  return result;
}

double gleCreateSyncObject(int a1)
{
  uint64_t v2 = (char *)malloc_type_malloc(0xA8uLL, 0x577B5147uLL);
  if (!v2) {
    abort();
  }
  *((_DWORD *)v2 + 4) = a1;
  *(void *)uint64_t v2 = 0;
  *(void *)(v2 + 20) = 0x900000001;
  double result = 0.0;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  *((_OWORD *)v2 + 7) = 0u;
  *(_OWORD *)(v2 + 124) = 0u;
  *((void *)v2 + 19) = 0;
  *((void *)v2 + 20) = 0;
  *((void *)v2 + 18) = 0;
  return result;
}

uint64_t gleFenceSync(uint64_t a1, unsigned int a2, int a3, int a4)
{
  if (a3 != 37143)
  {
    unint64_t v5 = (__int16 *)(a1 + 29832);
    if (!*(_WORD *)(a1 + 29832))
    {
      uint64_t result = 0;
      __int16 v7 = 1280;
      goto LABEL_11;
    }
    return 0;
  }
  if (a4)
  {
    unint64_t v5 = (__int16 *)(a1 + 29832);
    if (!*(_WORD *)(a1 + 29832))
    {
      uint64_t result = 0;
      __int16 v7 = 1281;
LABEL_11:
      *unint64_t v5 = v7;
      return result;
    }
    return 0;
  }
  unsigned int v8 = a2;
  if (!a2) {
    unsigned int v8 = gleGenHashNames(*(void *)(a1 + 19296) + 200, 1u);
  }
  gleSetSync(a1, v8);
  return v8;
}

uint64_t gleSetSync(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(a1 + 19296) + 200;
  unint64_t v5 = gleLookupHashObject(v4, a2);
  if (!v5)
  {
    v7.n128_f64[0] = gleCreateSyncObject(a2);
    unint64_t v5 = v6;
    uint64_t v8 = *(void *)(a1 + 19296);
    if (*(unsigned char *)(v8 + 320))
    {
      unint64_t v9 = 0;
      float v10 = v6 + 5;
      uint64_t v11 = v8 + 360;
      do
      {
        (*(void (**)(void, uint64_t *, __n128))(*(void *)v11 + 1728))(*(void *)(v11 - 8), v10, v7);
        ++v9;
        ++v10;
        v11 += 32;
      }
      while (v9 < *(unsigned __int8 *)(v8 + 320));
    }
    gleAddHashNameAndObject(a1, v4, (uint64_t)v5);
  }
  v5[18] = a1;
  unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 29496) + 680);
  uint64_t v13 = *(void *)(a1 + 29464);
  uint64_t v14 = v5[*(unsigned __int8 *)(a1 + 32500) + 5];

  return v12(v13, v14);
}

void gleFreeSyncObject(uint64_t a1, char *a2)
{
  if (*(unsigned char *)(a1 + 320))
  {
    unint64_t v4 = 0;
    unint64_t v5 = a2 + 40;
    uint64_t v6 = a1 + 360;
    do
    {
      (*(void (**)(void, void))(*(void *)v6 + 1808))(*(void *)(v6 - 8), *(void *)&v5[8 * v4]);
      *(void *)&v5[8 * v4++] = 0;
      v6 += 32;
    }
    while (v4 < *(unsigned __int8 *)(a1 + 320));
  }

  free(a2);
}

uint64_t gleIsSyncQueued(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 320)) {
    return 0;
  }
  uint64_t v3 = 0;
  uint64_t v4 = a2 + 40;
  for (uint64_t i = a1 + 360;
        (*(unsigned int (**)(void, void))(*(void *)i + 1792))(*(void *)(i - 8), *(void *)(v4 + 8 * v3));
        i += 32)
  {
    if (++v3 >= (unint64_t)*(unsigned __int8 *)(a1 + 320)) {
      return 0;
    }
  }
  return 1;
}

uint64_t gleTestSync(uint64_t result, char a2, uint64_t a3)
{
  uint64_t v3 = result + 29832;
  if (!a3)
  {
    if (!*(_WORD *)v3) {
      *(_WORD *)uint64_t v3 = 1282;
    }
    return 1;
  }
  uint64_t v4 = a2 & 1;
  if (*(_DWORD *)(a3 + 136)) {
    return (*(unsigned int (**)(void, void))(a3 + 160))(*(void *)(a3 + 152), a2 & 1) == 37145;
  }
  unsigned int v5 = *(unsigned __int8 *)(result + 32496);
  if (!*(unsigned char *)(result + 32496)) {
    return 1;
  }
  unint64_t v6 = 0;
  uint64_t v7 = a3 + 40;
  uint64_t v8 = (void *)(result + 32512);
  LOBYTE(result) = 1;
  do
  {
    if ((_BYTE)result)
    {
      uint64_t result = (*(unsigned int (**)(void, void, void, uint64_t, void))(v8[206] + 1320))(*v8, 0, 0, v4, *(void *)(v7 + 8 * v6)) != 0;
      unsigned int v5 = *(unsigned __int8 *)(v3 + 2664);
    }
    else
    {
      uint64_t result = 0;
    }
    ++v6;
    v8 += 209;
  }
  while (v6 < v5);
  return result;
}