@interface MPMediaLibraryArtwork
+ (BOOL)artworkExistsForRequest:(id)a3;
+ (BOOL)fetchableArtworkExistsForRequest:(id)a3;
+ (BOOL)needsToFetchArtworkForRequest:(id)a3;
+ (id)availableArtworkWithRequest:(id)a3;
+ (void)cancelFetchingArtworkForRequest:(id)a3;
+ (void)fetchArtworkForRequest:(id)a3 completionHandler:(id)a4;
+ (void)fetchArtworkInfoForRequest:(id)a3 completionHandler:(id)a4;
- (BOOL)isEqual:(id)a3;
- (ML3Artwork)artwork;
- (MPMediaLibraryArtwork)init;
- (MPMediaLibraryArtworkRequest)artworkRequest;
- (NSArray)autogeneratedSizes;
- (NSArray)validSizes;
- (NSDictionary)effectsMetadata;
- (NSURL)originalFileURL;
- (id)imageFileURLForEffect:(id)a3;
- (id)imageFileURLForSize:(CGSize)a3;
- (os_unfair_lock_s)stateLock;
- (unint64_t)hash;
- (void)setArtwork:(id)a3;
- (void)setArtworkRequest:(id)a3;
- (void)setEffectsMetadata:(id)a3;
@end

@implementation MPMediaLibraryArtwork

+ (BOOL)artworkExistsForRequest:(id)a3
{
  id v3 = a3;
  v4 = [v3 availableArtworkToken];
  if ([v4 length])
  {
    BOOL v5 = 1;
  }
  else
  {
    v6 = [v3 fetchableArtworkToken];
    BOOL v5 = [v6 length] != 0;
  }
  return v5;
}

+ (BOOL)needsToFetchArtworkForRequest:(id)a3
{
  id v3 = a3;
  v4 = [v3 fetchableArtworkToken];
  uint64_t v5 = [v4 length];

  if (v5)
  {
    v6 = [v3 musicLibrary];
    v7 = [v3 fetchableArtworkToken];
    int v8 = [v6 isArtworkTokenAvailable:v7];

    if (!v8)
    {
      BOOL v10 = 1;
      goto LABEL_6;
    }
    v9 = [v3 fetchableArtworkToken];
    [v3 setAvailableArtworkToken:v9];

    [v3 setFetchableArtworkToken:0];
    [v3 setLibraryArtwork:0];
  }
  BOOL v10 = 0;
LABEL_6:

  return v10;
}

uint64_t __58__MPMediaLibraryArtwork_fetchableArtworkExistsForRequest___block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  uint64_t result = [*(id *)(a1 + 32) isArtworkFetchableForPersistentID:*(void *)(a1 + 48) entityType:*(void *)(a1 + 56) artworkType:*(void *)(a1 + 64) artworkSourceType:a3];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  *a4 = *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  return result;
}

- (NSArray)validSizes
{
  p_stateLock = &self->_stateLock;
  os_unfair_lock_lock(&self->_stateLock);
  validSizes = self->_validSizes;
  if (!validSizes)
  {
    uint64_t v5 = [(MPMediaLibraryArtwork *)self artworkRequest];
    v6 = +[MPArtworkConfiguration systemConfiguration];
    v7 = objc_msgSend(v6, "supportedSizesForMediaType:artworkType:", objc_msgSend(v5, "mediaType"), objc_msgSend(v5, "artworkType"));
    int v8 = [v7 allObjects];

    v9 = [v8 sortedArrayUsingComparator:&__block_literal_global_389];
    BOOL v10 = self->_validSizes;
    self->_validSizes = v9;

    validSizes = self->_validSizes;
  }
  v11 = validSizes;
  os_unfair_lock_unlock(p_stateLock);

  return v11;
}

+ (id)availableArtworkWithRequest:(id)a3
{
  id v3 = a3;
  v4 = [v3 libraryArtwork];
  if (v4)
  {
    uint64_t v5 = v4;
  }
  else
  {
    v6 = [v3 availableArtworkToken];

    if (!v6) {
      goto LABEL_6;
    }
    id v7 = objc_alloc(MEMORY[0x1E4F79A78]);
    int v8 = [v3 availableArtworkToken];
    uint64_t v9 = [v3 artworkType];
    BOOL v10 = [v3 musicLibrary];
    v11 = (void *)[v7 initWithToken:v8 artworkType:v9 musicLibrary:v10];

    if (v11)
    {
      v12 = objc_alloc_init(MPMediaLibraryArtwork);
      [(MPMediaLibraryArtwork *)v12 setArtworkRequest:v3];
      [(MPMediaLibraryArtwork *)v12 setArtwork:v11];
      [v3 setLibraryArtwork:v12];
      uint64_t v5 = v12;
    }
    else
    {
LABEL_6:
      uint64_t v5 = 0;
    }
  }

  return v5;
}

- (void)setArtworkRequest:(id)a3
{
}

- (void)setArtwork:(id)a3
{
  v4 = (ML3Artwork *)a3;
  os_unfair_lock_lock(&self->_stateLock);
  artwork = self->_artwork;
  self->_artwork = v4;

  os_unfair_lock_unlock(&self->_stateLock);
}

- (MPMediaLibraryArtwork)init
{
  v3.receiver = self;
  v3.super_class = (Class)MPMediaLibraryArtwork;
  uint64_t result = [(MPMediaLibraryArtwork *)&v3 init];
  if (result) {
    result->_stateLock._os_unfair_lock_opaque = 0;
  }
  return result;
}

- (id)imageFileURLForSize:(CGSize)a3
{
  double height = a3.height;
  double width = a3.width;
  p_stateLock = &self->_stateLock;
  os_unfair_lock_lock(&self->_stateLock);
  id v7 = [(MPMediaLibraryArtwork *)self artwork];
  int v8 = objc_msgSend(v7, "fileURLForSize:", width, height);

  os_unfair_lock_unlock(p_stateLock);

  return v8;
}

- (ML3Artwork)artwork
{
  return self->_artwork;
}

- (MPMediaLibraryArtworkRequest)artworkRequest
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_artworkRequest);

  return (MPMediaLibraryArtworkRequest *)WeakRetained;
}

+ (BOOL)fetchableArtworkExistsForRequest:(id)a3
{
  id v3 = a3;
  uint64_t v16 = 0;
  v17 = &v16;
  uint64_t v18 = 0x2020000000;
  char v19 = 0;
  uint64_t v4 = [v3 libraryID];
  uint64_t v5 = [v3 entityType];
  uint64_t v6 = [v3 artworkType];
  id v7 = [v3 musicLibrary];
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __58__MPMediaLibraryArtwork_fetchableArtworkExistsForRequest___block_invoke;
  v10[3] = &unk_1E57F5108;
  v12 = &v16;
  id v8 = v7;
  id v11 = v8;
  uint64_t v13 = v4;
  uint64_t v14 = v5;
  uint64_t v15 = v6;
  [v8 enumerateArtworkTokensForEntityPersistentID:v4 entityType:v5 artworkType:v6 usingBlock:v10];
  LOBYTE(v4) = *((unsigned char *)v17 + 24);

  _Block_object_dispose(&v16, 8);
  return v4;
}

- (void).cxx_destruct
{
  objc_storeStrong((id *)&self->_artwork, 0);
  objc_destroyWeak((id *)&self->_artworkRequest);
  objc_storeStrong((id *)&self->_autogeneratedSizes, 0);

  objc_storeStrong((id *)&self->_validSizes, 0);
}

- (os_unfair_lock_s)stateLock
{
  return self->_stateLock;
}

- (void)setEffectsMetadata:(id)a3
{
  p_stateLock = &self->_stateLock;
  id v5 = a3;
  os_unfair_lock_lock(p_stateLock);
  uint64_t v6 = (void *)[v5 copy];

  [(ML3Artwork *)self->_artwork setInterestDictionary:v6];

  os_unfair_lock_unlock(p_stateLock);
}

- (NSDictionary)effectsMetadata
{
  p_stateLock = &self->_stateLock;
  os_unfair_lock_lock(&self->_stateLock);
  uint64_t v4 = [(ML3Artwork *)self->_artwork interestDictionary];
  uint64_t v5 = [v4 copy];
  uint64_t v6 = (void *)v5;
  id v7 = (void *)MEMORY[0x1E4F1CC08];
  if (v5) {
    id v7 = (void *)v5;
  }
  id v8 = v7;

  os_unfair_lock_unlock(p_stateLock);

  return (NSDictionary *)v8;
}

- (NSArray)autogeneratedSizes
{
  p_stateLock = &self->_stateLock;
  os_unfair_lock_lock(&self->_stateLock);
  autogeneratedSizes = self->_autogeneratedSizes;
  if (!autogeneratedSizes)
  {
    uint64_t v5 = [(MPMediaLibraryArtwork *)self artworkRequest];
    uint64_t v6 = +[MPArtworkConfiguration systemConfiguration];
    id v7 = objc_msgSend(v6, "sizesToAutogenerateForMediaType:artworkType:", objc_msgSend(v5, "mediaType"), objc_msgSend(v5, "artworkType"));
    id v8 = [v7 allObjects];

    uint64_t v9 = [v8 sortedArrayUsingComparator:&__block_literal_global_389];
    BOOL v10 = self->_autogeneratedSizes;
    self->_autogeneratedSizes = v9;

    autogeneratedSizes = self->_autogeneratedSizes;
  }
  id v11 = autogeneratedSizes;
  os_unfair_lock_unlock(p_stateLock);

  return v11;
}

- (id)imageFileURLForEffect:(id)a3
{
  p_stateLock = &self->_stateLock;
  id v5 = a3;
  os_unfair_lock_lock(p_stateLock);
  uint64_t v6 = [(MPMediaLibraryArtwork *)self artwork];
  id v7 = [v6 fileURLForEffect:v5];

  os_unfair_lock_unlock(p_stateLock);

  return v7;
}

- (NSURL)originalFileURL
{
  return (NSURL *)-[MPMediaLibraryArtwork imageFileURLForSize:](self, "imageFileURLForSize:", 1.79769313e308, 1.79769313e308);
}

- (BOOL)isEqual:(id)a3
{
  uint64_t v4 = (MPMediaLibraryArtwork *)a3;
  if (self == v4)
  {
    char v7 = 1;
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v5 = [(MPMediaLibraryArtwork *)self artwork];
      uint64_t v6 = [(MPMediaLibraryArtwork *)v4 artwork];
      char v7 = [v5 isEqual:v6];
    }
    else
    {
      char v7 = 0;
    }
  }

  return v7;
}

- (unint64_t)hash
{
  v2 = [(MPMediaLibraryArtwork *)self artwork];
  unint64_t v3 = [v2 hash];

  return v3;
}

+ (void)fetchArtworkInfoForRequest:(id)a3 completionHandler:(id)a4
{
  v25[1] = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id v6 = a4;
  char v7 = [v5 fetchableArtworkSource];
  uint64_t v8 = [v7 integerValue];

  if (v8)
  {
    uint64_t v9 = 0;
LABEL_3:
    BOOL v10 = [v5 userIdentity];
    id v11 = +[MPCloudController controllerWithUserIdentity:v10];
    uint64_t v12 = [v5 libraryID];
    uint64_t v13 = [v5 entityType];
    uint64_t v14 = [v5 artworkType];
    v22[0] = MEMORY[0x1E4F143A8];
    v22[1] = 3221225472;
    v22[2] = __70__MPMediaLibraryArtwork_fetchArtworkInfoForRequest_completionHandler___block_invoke;
    v22[3] = &unk_1E57F5180;
    id v23 = v6;
    [v11 loadArtworkInfoForEntityPersistentID:v12 entityType:v13 artworkType:v14 artworkSourceType:v8 completionHandler:v22];

    uint64_t v15 = v23;
    goto LABEL_4;
  }
  uint64_t v9 = [v5 availableArtworkToken];

  if (v9)
  {
    id v16 = objc_alloc(MEMORY[0x1E4F79A78]);
    v17 = [v5 availableArtworkToken];
    uint64_t v18 = [v5 artworkType];
    char v19 = [v5 musicLibrary];
    uint64_t v9 = (void *)[v16 initWithToken:v17 artworkType:v18 musicLibrary:v19];

    uint64_t v8 = [v9 sourceType];
    if (v8) {
      goto LABEL_3;
    }
  }
  if (!v6) {
    goto LABEL_5;
  }
  v20 = (void *)MEMORY[0x1E4F28C58];
  uint64_t v24 = *MEMORY[0x1E4F28568];
  v25[0] = @"Unknown artwork source type for artwork info request.";
  uint64_t v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v25 forKeys:&v24 count:1];
  v21 = [v20 errorWithDomain:@"MPMediaLibraryArtworkErrorDomain" code:0 userInfo:v15];
  (*((void (**)(id, void, void *))v6 + 2))(v6, 0, v21);

LABEL_4:
LABEL_5:
}

uint64_t __70__MPMediaLibraryArtwork_fetchArtworkInfoForRequest_completionHandler___block_invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

+ (void)cancelFetchingArtworkForRequest:(id)a3
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v3 = a3;
  uint64_t v4 = [v3 fetchableArtworkSource];
  uint64_t v5 = [v4 integerValue];

  if (v5)
  {
    id v6 = [v3 userIdentity];
    char v7 = +[MPCloudController controllerWithUserIdentity:v6];
    objc_msgSend(v7, "deprioritizeArtworkRequestForEntityPersistentID:entityType:artworkType:artworkSourceType:", objc_msgSend(v3, "libraryID"), objc_msgSend(v3, "entityType"), objc_msgSend(v3, "artworkType"), v5);
  }
  else
  {
    uint64_t v8 = os_log_create("com.apple.amp.mediaplayer", "Artwork");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int v9 = 138543362;
      id v10 = v3;
      _os_log_impl(&dword_1952E8000, v8, OS_LOG_TYPE_ERROR, "[MPArtwork] Failed to deprioritize artwork request %{public}@ – unknown artwork source type", (uint8_t *)&v9, 0xCu);
    }
  }
}

+ (void)fetchArtworkForRequest:(id)a3 completionHandler:(id)a4
{
  v23[1] = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [v6 fetchableArtworkSource];
  uint64_t v9 = [v8 integerValue];

  if (v9)
  {
    id v10 = [v6 userIdentity];
    uint64_t v11 = +[MPCloudController controllerWithUserIdentity:v10];
    uint64_t v12 = [v6 libraryID];
    uint64_t v13 = [v6 entityType];
    uint64_t v14 = [v6 artworkType];
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    v18[2] = __66__MPMediaLibraryArtwork_fetchArtworkForRequest_completionHandler___block_invoke;
    v18[3] = &unk_1E57F5158;
    id v19 = v6;
    id v20 = v7;
    id v21 = a1;
    [v11 loadArtworkForEntityPersistentID:v12 entityType:v13 artworkType:v14 artworkSourceType:v9 completionHandler:v18];

    uint64_t v15 = v19;
LABEL_5:

    goto LABEL_6;
  }
  if (v7)
  {
    id v16 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v22 = *MEMORY[0x1E4F28568];
    v23[0] = @"Unknown artwork source type.";
    uint64_t v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v23 forKeys:&v22 count:1];
    v17 = [v16 errorWithDomain:@"MPMediaLibraryArtworkErrorDomain" code:0 userInfo:v15];
    (*((void (**)(id, void, void *))v7 + 2))(v7, 0, v17);

    goto LABEL_5;
  }
LABEL_6:
}

void __66__MPMediaLibraryArtwork_fetchArtworkForRequest_completionHandler___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v7 = MEMORY[0x1E4F143A8];
  uint64_t v8 = 3221225472;
  uint64_t v9 = __66__MPMediaLibraryArtwork_fetchArtworkForRequest_completionHandler___block_invoke_2;
  id v10 = &unk_1E57F5130;
  id v11 = *(id *)(a1 + 32);
  id v4 = v3;
  uint64_t v12 = v4;
  AnalyticsSendEventLazy();
  if (!v4) {
    objc_msgSend(*(id *)(a1 + 32), "promoteFetchableArtworkTokenIfNeeded", v7, 3221225472, __66__MPMediaLibraryArtwork_fetchArtworkForRequest_completionHandler___block_invoke_2, &unk_1E57F5130, v11, 0);
  }
  objc_msgSend(*(id *)(a1 + 32), "clearFailedFetchableToken", v7, v8, v9, v10);
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5)
  {
    if (v4)
    {
      id v6 = 0;
    }
    else
    {
      id v6 = [*(id *)(a1 + 48) availableArtworkWithRequest:*(void *)(a1 + 32)];
      uint64_t v5 = *(void *)(a1 + 40);
    }
    (*(void (**)(uint64_t, void *, id))(v5 + 16))(v5, v6, v4);
  }
}

id __66__MPMediaLibraryArtwork_fetchArtworkForRequest_completionHandler___block_invoke_2(uint64_t a1)
{
  v2 = [MEMORY[0x1E4F1CA60] dictionary];
  id v3 = [MEMORY[0x1E4F1C9C8] date];
  id v4 = _NSStringFromMPMediaLibraryArtworkType([*(id *)(a1 + 32) artworkType]);
  [v2 setObject:v4 forKeyedSubscript:@"mediaType"];

  if (*(void *)(a1 + 40)) {
    uint64_t v5 = MEMORY[0x1E4F1CC38];
  }
  else {
    uint64_t v5 = MEMORY[0x1E4F1CC28];
  }
  [v2 setObject:v5 forKeyedSubscript:@"success"];
  id v6 = NSNumber;
  [v3 timeIntervalSinceNow];
  uint64_t v8 = [v6 numberWithDouble:fabs(v7)];
  [v2 setObject:v8 forKeyedSubscript:@"duration"];

  return v2;
}

@end