id _LSRecordLog()
{
  void *v0;
  uint64_t vars8;

  if (_LSRecordLog_onceToken != -1) {
    dispatch_once(&_LSRecordLog_onceToken, &__block_literal_global_31);
  }
  v0 = (void *)_LSRecordLog_log;

  return v0;
}

void sub_18295AB54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZNK14LaunchServices15LocalizedString23getDefaultValueUnsafelyEP11_LSDatabase_block_invoke(uint64_t result, int a2, int a3, unsigned char *a4)
{
  if (*(_DWORD *)(result + 40) == a3)
  {
    uint64_t v4 = *(void *)(*(void *)(result + 32) + 8);
    *(_DWORD *)(v4 + 48) = a2;
    *(unsigned char *)(v4 + 52) = 1;
    *a4 = 1;
  }
  return result;
}

void sub_18295AE5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18295AF68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18295B2C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18295B3CC(void *a1)
{
}

void sub_18295B3E4(_Unwind_Exception *a1)
{
}

void sub_18295B570()
{
}

void sub_18295B5A4(_Unwind_Exception *a1)
{
}

void sub_18295B638(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

id LaunchServices::LocalizedString::getAllUnsafeLocalizations(LaunchServices::LocalizedString *this, _LSDatabase *a2, NSString *a3, BOOL *a4, BOOL *a5)
{
  v56[1] = *MEMORY[0x1E4F143B8];
  v9 = a2;
  v44 = a3;
  v45 = v9;
  if (v9)
  {
    if (!a4) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  v40 = [MEMORY[0x1E4F28B00] currentHandler];
  v41 = objc_msgSend(NSString, "stringWithUTF8String:", "NSDictionary<NSString *,NSString *> *LaunchServices::LocalizedString::getAllUnsafeLocalizations(_LSDatabase *__strong _Nonnull, NSString *__strong _Nullable, BOOL * _Nullable, BOOL * _Nullable) const");
  [v40 handleFailureInFunction:v41, @"LSLocalizedString.mm", 308, @"Invalid parameter not satisfying: %@", @"db != nil" file lineNumber description];

  if (a4) {
LABEL_3:
  }
    *a4 = *((unsigned char *)this + 8) & 1;
LABEL_4:
  if (a5) {
    *a5 = (*((unsigned char *)this + 8) & 2) != 0;
  }
  if ((*((unsigned char *)this + 8) & 2) != 0)
  {
    v48 = (void *)_CSStringCopyCFString();
    if (v48)
    {
      if ([(id)__LSDefaultsGetSharedInstance() markLocalizationsStoredInDatabase])
      {
        if (*((unsigned char *)this + 8)) {
          v21 = @"‚ú¥Ô∏è";
        }
        else {
          v21 = @"üîÇ";
        }
        v22 = [v48 stringByAppendingString:v21];
      }
      else
      {
        v22 = v48;
      }
      v55 = @"LSDefaultLocalizedValue";
      v56[0] = v22;
      v11 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v56 forKeys:&v55 count:1];

      goto LABEL_64;
    }
LABEL_28:
    v11 = 0;
    goto LABEL_64;
  }
  if (!*(_DWORD *)this || !*((_DWORD *)this + 1)) {
    goto LABEL_28;
  }
  v47 = _LSDatabaseGetStringArray(v9);
  v43 = _LSDatabaseGetStringArrayWithNullValues((uint64_t)v9, *((unsigned int *)this + 1), 0);
  uint64_t v10 = [v47 count];
  v11 = 0;
  if (v47 && v43)
  {
    unint64_t v12 = v10;
    if (v10 != [v43 count]) {
      goto LABEL_62;
    }
    v13 = (void *)MEMORY[0x18530F680]();
    v14 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithCapacity:", objc_msgSend(v47, "count"));
    if (v14)
    {
      if (v12)
      {
        char v15 = 0;
        uint64_t v16 = 0;
LABEL_15:
        uint64_t v17 = v16;
        do
        {
          v18 = [v47 objectAtIndexedSubscript:v17];
          v19 = [v43 pointerAtIndex:v17];
          v20 = v19;
          if (!v18 || !v19)
          {

            uint64_t v16 = v17 + 1;
            char v15 = 1;
            if (v12 - 1 != v17) {
              goto LABEL_15;
            }
            goto LABEL_32;
          }
          [v14 setObject:v19 forKeyedSubscript:v18];

          ++v17;
        }
        while (v12 != v17);
        if ((v15 & 1) == 0) {
          goto LABEL_41;
        }
LABEL_32:
        v23 = v44;
        if (v23
          || ([v14 objectForKeyedSubscript:@"LSDefaultLocalizedValue"],
              (v23 = (NSString *)objc_claimAutoreleasedReturnValue()) != 0))
        {
          uint64_t v24 = 0;
          if (v12 <= 1) {
            uint64_t v25 = 1;
          }
          else {
            uint64_t v25 = v12;
          }
          do
          {
            v26 = [v47 objectAtIndexedSubscript:v24];
            v27 = [v14 objectForKeyedSubscript:v26];

            if (!v27) {
              [v14 setObject:v23 forKeyedSubscript:v26];
            }

            ++v24;
          }
          while (v25 != v24);
        }
      }
LABEL_41:
      v49 = (void *)[v14 copy];
    }
    else
    {
      v49 = 0;
    }

    if (v49)
    {
      if ([(id)__LSDefaultsGetSharedInstance() markLocalizationsStoredInDatabase])
      {
        context = (void *)MEMORY[0x18530F680]();
        v28 = [v49 objectForKeyedSubscript:@"LSDefaultLocalizedValue"];
        v46 = this;
        v11 = [MEMORY[0x1E4F1CA60] dictionary];
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        id v29 = v47;
        uint64_t v30 = [v29 countByEnumeratingWithState:&v50 objects:v54 count:16];
        if (v30)
        {
          uint64_t v31 = *(void *)v51;
          do
          {
            for (uint64_t i = 0; i != v30; ++i)
            {
              if (*(void *)v51 != v31) {
                objc_enumerationMutation(v29);
              }
              v33 = *(void **)(*((void *)&v50 + 1) + 8 * i);
              if ([v33 isEqual:@"LSDefaultLocalizedValue"])
              {
                v34 = [v28 stringByAppendingString:@"*Ô∏è‚É£"];
              }
              else
              {
                v35 = [v49 objectForKeyedSubscript:v33];
                v36 = v35;
                if (v35)
                {
                  if ((*((unsigned char *)v46 + 8) & 2) != 0) {
                    v37 = @"üîÇ";
                  }
                  else {
                    v37 = @"‚ùáÔ∏è";
                  }
                  uint64_t v38 = [v35 stringByAppendingString:v37];
                }
                else
                {
                  uint64_t v38 = [v28 stringByAppendingString:@"üî¥"];
                }
                v34 = (void *)v38;
              }
              [v11 setObject:v34 forKeyedSubscript:v33];
            }
            uint64_t v30 = [v29 countByEnumeratingWithState:&v50 objects:v54 count:16];
          }
          while (v30);
        }
      }
      else
      {
        v11 = v49;
      }
    }
    else
    {
LABEL_62:
      v11 = 0;
    }
  }

LABEL_64:

  return v11;
}

void sub_18295BBE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::__unordered_map_hasher<objc_selector *,std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::hash<objc_selector *>,std::equal_to<objc_selector *>,true>,std::__unordered_map_equal<objc_selector *,std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::equal_to<objc_selector *>,std::hash<objc_selector *>,true>,std::allocator<std::__hash_value_type<objc_selector *,objc_object * {__strong}>>>::__emplace_unique_key_args<objc_selector *,objc_selector *&,objc_object * const {__strong}&>(uint64_t a1, void *a2, void *a3, id *a4)
{
  unint64_t v8 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v9 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v8 >> 47) ^ v8);
  unint64_t v10 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = (void *)*i)
      {
        unint64_t v15 = i[1];
        if (v15 == v10)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v12.u32[0] > 1uLL)
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
          }
          else
          {
            v15 &= v11 - 1;
          }
          if (v15 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v16 = (void *)(a1 + 16);
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = v10;
  i[2] = *a3;
  i[3] = *a4;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(void *)a1;
  uint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *uint64_t i = *v24;
LABEL_38:
    *uint64_t v24 = i;
    goto LABEL_39;
  }
  *uint64_t i = *v16;
  *uint64_t v16 = i;
  *(void *)(v23 + 8 * v4) = v16;
  if (*i)
  {
    unint64_t v25 = *(void *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v25 >= v11) {
        v25 %= v11;
      }
    }
    else
    {
      v25 &= v11 - 1;
    }
    uint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_18295BF74(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,void *>>>::operator()[abi:nn180100](v2, v1);
  _Unwind_Resume(a1);
}

objc_selector *__LSRECORD_GETTER__<objc_object * {__strong}>(void *a1, LSRecord *a2, const char *a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  v5 = a1;
  os_unfair_recursive_lock_lock_with_options();
  CachedPropertyValue = LaunchServices::Record::getCachedPropertyValue(v5, a2, v6);
  if (v8)
  {
    unint64_t v9 = CachedPropertyValue;
  }
  else
  {
    unint64_t v10 = _LSRecordLog();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      int v22 = 136446978;
      Name = sel_getName(a3);
      __int16 v24 = 2114;
      uint64_t v25 = objc_opt_class();
      __int16 v26 = 2048;
      v27 = v5;
      __int16 v28 = 2082;
      id v29 = sel_getName((SEL)a2);
      _os_log_impl(&dword_182959000, v10, OS_LOG_TYPE_DEBUG, "Invoking selector %{public}s on <%{public}@ %p> to get the value for property %{public}s", (uint8_t *)&v22, 0x2Au);
    }

    unint64_t v11 = v5;
    uint8x8_t v12 = v11;
    v14 = (char *)v11 + 16;
    uint64_t v13 = *((void *)v11 + 2);
    if ((*((unsigned char *)v11 + 31) & 0x40) == 0 && !v13) {
      __LSRECORD_IS_CRASHING_DUE_TO_A_CALLER_BUG__((uint64_t)v11, (const char *)a2);
    }
    if (v13)
    {
      unint64_t v15 = v11;
      uint64_t Unit = CSStoreGetUnit();
      uint64_t v17 = *((unsigned __int16 *)v15 + 14);
      uint64_t v18 = *((unsigned int *)v15 + 6);
      MethodImplementation = (void (*)(LaunchServices::Record *, const char *, char *, uint64_t, uint64_t, uint64_t))object_getMethodImplementation();
      MethodImplementation(v15, a3, v14, v17, v18, Unit);
      unint64_t v9 = (objc_selector *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      unint64_t v9 = 0;
    }

    LaunchServices::Record::setCachedPropertyValue(v12, a2, v9, v20);
  }
  os_unfair_recursive_lock_unlock();

  return v9;
}

void sub_18295C1C0(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    os_unfair_recursive_lock_unlock();
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_18295C224(_Unwind_Exception *a1)
{
  objc_end_catch();

  _Unwind_Resume(a1);
}

void sub_18295C23C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void *LaunchServices::Record::getCachedPropertyValue(LaunchServices::Record *this, LSRecord *a2, objc_selector *a3)
{
  unint64_t v4 = a2;
  result = (void *)*((void *)this + 1);
  if (result)
  {
    result = std::__hash_table<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::__unordered_map_hasher<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::hash<_opaque_pthread_t *>,std::equal_to<_opaque_pthread_t *>,true>,std::__unordered_map_equal<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::equal_to<_opaque_pthread_t *>,std::hash<_opaque_pthread_t *>,true>,std::allocator<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>>>::find<_opaque_pthread_t *>(result, &v4);
    if (result) {
      return (void *)result[3];
    }
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::__unordered_map_hasher<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::hash<_opaque_pthread_t *>,std::equal_to<_opaque_pthread_t *>,true>,std::__unordered_map_equal<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::equal_to<_opaque_pthread_t *>,std::hash<_opaque_pthread_t *>,true>,std::allocator<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>>>::find<_opaque_pthread_t *>(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  char v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void *LaunchServices::Record::setCachedPropertyValue(LaunchServices::Record *this, LSRecord *a2, objc_selector *a3, objc_object *a4)
{
  id v6 = a3;
  unint64_t v7 = a2;
  uint64_t v4 = *((void *)this + 1);
  if (!v4) {
    operator new();
  }
  return std::__hash_table<std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::__unordered_map_hasher<objc_selector *,std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::hash<objc_selector *>,std::equal_to<objc_selector *>,true>,std::__unordered_map_equal<objc_selector *,std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::equal_to<objc_selector *>,std::hash<objc_selector *>,true>,std::allocator<std::__hash_value_type<objc_selector *,objc_object * {__strong}>>>::__emplace_unique_key_args<objc_selector *,objc_selector *&,objc_object * const {__strong}&>(v4, &v7, &v7, &v6);
}

uint64_t _LSPlistLookUpIndexOfCompactedString(NSString *a1)
{
  if (_LSPlistLookUpIndexOfCompactedString(NSString *)::once != -1) {
    dispatch_once(&_LSPlistLookUpIndexOfCompactedString(NSString *)::once, &__block_literal_global_57);
  }
  int8x8_t v2 = [(id)_LSPlistLookUpIndexOfCompactedString(NSString *)::indexes objectForKeyedSubscript:a1];
  unint64_t v3 = v2;
  if (v2) {
    uint64_t v4 = [v2 unsignedIntegerValue];
  }
  else {
    uint64_t v4 = 0x7FFFFFFFFFFFFFFFLL;
  }

  return v4;
}

void sub_18295C478(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__do_rehash<true>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      unint64_t v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *uint64_t v7 = *v11;
            void *v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            unint64_t v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          unint64_t v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    unint64_t v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

id _LSDatabaseGetStringArray(void *a1)
{
  id v1 = a1;
  int8x8_t v2 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:_CSArrayGetCount()];
  id v5 = v1;
  id v6 = v2;
  _CSArrayEnumerateAllValues();
  id v3 = v6;

  return v3;
}

void sub_18295C7D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void _LSDatabaseGetCacheGUIDBytes(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  memset(v3, 0, sizeof(v3));
  _LSDatabaseGetHeader(v3);
  uuid_copy(a2, (const unsigned __int8 *)&v3[11] + 8);
}

__n128 _LSDatabaseGetHeader@<Q0>(_OWORD *a1@<X8>)
{
  int v6 = 0;
  CSStoreGetHeader();
  id v3 = _LSDatabaseGetLog();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v5 = 0;
    _os_log_impl(&dword_182959000, v3, OS_LOG_TYPE_DEFAULT, "Failed to read DB header, generating new one", v5, 2u);
  }

  result.n128_u64[0] = 0;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

void _LSPersistentIdentifierDataMake(uint64_t *a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 24) = 0;
  *(void *)(a4 + 16) = 0;
  *(_DWORD *)(a4 + 4) = a3;
  *(_DWORD *)(a4 + 8) = a2;
  _LSDatabaseGetCacheGUIDBytes(*a1, (unsigned __int8 *)(a4 + 12));
}

void sub_18295CBDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__deallocate_node(a1, *(id **)(a1 + 16));
  int8x8_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__deallocate_node(uint64_t a1, id *a2)
{
  if (a2)
  {
    int8x8_t v2 = a2;
    do
    {
      id v3 = (id *)*v2;

      operator delete(v2);
      int8x8_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t LaunchServices::LocalizedString::Get(LaunchServices::LocalizedString *this, _LSDatabase *a2)
{
  int8x8_t v2 = this;
  if (!v2)
  {
    id v5 = [MEMORY[0x1E4F28B00] currentHandler];
    int v6 = objc_msgSend(NSString, "stringWithUTF8String:", "static const LocalizedString *LaunchServices::LocalizedString::Get(_LSDatabase *__strong _Nonnull, _LSLocalizedStringID)");
    [v5 handleFailureInFunction:v6, @"LSLocalizedString.mm", 154, @"Invalid parameter not satisfying: %@", @"db != nil" file lineNumber description];
  }
  uint64_t Unit = CSStoreGetUnit();

  return Unit;
}

void sub_18295CE18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18295CEB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18295D0E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id LaunchServices::LocalizedString::getBundleLocs(LaunchServices::LocalizedString *this, _LSDatabase *a2)
{
  v9[1] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = v3;
  if ((*((unsigned char *)this + 8) & 2) != 0)
  {
    uint64_t v6 = _CSStringCopyCFString();
    uint64_t v7 = (void *)v6;
    if (v6)
    {
      v9[0] = v6;
      id v5 = [MEMORY[0x1E4F1C978] arrayWithObjects:v9 count:1];
    }
    else
    {
      id v5 = 0;
    }
  }
  else
  {
    id v5 = _LSDatabaseGetStringArray(v3);
  }

  return v5;
}

void sub_18295D230(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18295D36C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

id _LSDatabaseGetStringArrayWithNullValues(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v4 = [MEMORY[0x1E4F28F50] strongObjectsPointerArray];
  if (a3) {
    *a3 = 0;
  }
  id v6 = v4;
  _CSArrayEnumerateAllValues();

  return v6;
}

void sub_18295D4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_18295D7EC(_Unwind_Exception *a1)
{
  uint64_t v4 = v2;

  _Unwind_Resume(a1);
}

id _LSPlistDataGetDictionary(void *a1, id *a2)
{
  uint64_t v4 = (void *)MEMORY[0x18530F680]();
  id v5 = -[_LSPlistHint completeDictionary](a2);
  if (!v5)
  {
    id v5 = _LSPlistRestore(a1);
    -[_LSPlistHint setCompleteDictionary:]((uint64_t)a2, v5);
  }

  return v5;
}

void sub_18295D8B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSPlistRestore(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    int8x8_t v2 = v1;
    id v3 = (void *)MEMORY[0x18530F680]();
    BOOL v9 = 0;
    uint64_t v4 = _LSPlistGetSubdataForFCF(v2, &v9);

    id v5 = [MEMORY[0x1E4F28F98] propertyListWithData:v4 options:0 format:0 error:0];
    if (v5 && _NSIsNSDictionary())
    {
      if (v9) {
        id Transformed = (id)_LSPlistCreateTransformed(v5, (uint64_t)_LSPlistRestoreString, 0);
      }
      else {
        id Transformed = v5;
      }
      uint64_t v7 = Transformed;
    }
    else
    {
      uint64_t v7 = 0;
    }
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_18295D9D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18295DB54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_18295DC00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18295DC80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18295DD38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18295DE70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_18295DF4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18295E028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void _LSEnumerateClaimedTypes(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v14 = v5;
  if (a1)
  {
    if (a2) {
      goto LABEL_3;
    }
LABEL_11:
    unint64_t v10 = [MEMORY[0x1E4F28B00] currentHandler];
    unint64_t v11 = objc_msgSend(NSString, "stringWithUTF8String:", "void _LSEnumerateClaimedTypes(LSContext * _Nonnull, const LSClaimData * _Nonnull, void (^__strong _Nonnull)(NSString *__strong))");
    [v10 handleFailureInFunction:v11, @"LSClaimedTypes.mm", 138, @"Invalid parameter not satisfying: %@", @"inClaimData != NULL" file lineNumber description];

    if (v14) {
      goto LABEL_4;
    }
LABEL_12:
    unint64_t v12 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v13 = objc_msgSend(NSString, "stringWithUTF8String:", "void _LSEnumerateClaimedTypes(LSContext * _Nonnull, const LSClaimData * _Nonnull, void (^__strong _Nonnull)(NSString *__strong))");
    [v12 handleFailureInFunction:v13, @"LSClaimedTypes.mm", 139, @"Invalid parameter not satisfying: %@", @"inBlock != nil" file lineNumber description];

    goto LABEL_4;
  }
  unint64_t v8 = [MEMORY[0x1E4F28B00] currentHandler];
  BOOL v9 = objc_msgSend(NSString, "stringWithUTF8String:", "void _LSEnumerateClaimedTypes(LSContext * _Nonnull, const LSClaimData * _Nonnull, void (^__strong _Nonnull)(NSString *__strong))");
  [v8 handleFailureInFunction:v9, @"LSClaimedTypes.mm", 137, @"Invalid parameter not satisfying: %@", @"inContext != NULL" file lineNumber description];

  id v5 = v14;
  if (!a2) {
    goto LABEL_11;
  }
LABEL_3:
  if (!v5) {
    goto LABEL_12;
  }
LABEL_4:
  if ((*(unsigned char *)(a2 + 8) & 0x20) != 0)
  {
    uint64_t v7 = *(unsigned int *)(a2 + 68);
    if (v7) {
      _LSEnumerateTypesInBindingList(a1, v7, v6, v14);
    }
  }
}

void sub_18295E1FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18295E33C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18295E474(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18295E4D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18295E518(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18295E5D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18295E688(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18295E734(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL _XCFStringEqualCaseInsensitive(const __CFString *a1, const __CFString *a2)
{
  return CFStringCompare(a1, a2, 1uLL) == kCFCompareEqualTo;
}

Boolean UTTypeEqual(CFStringRef inUTI1, CFStringRef inUTI2)
{
  if (inUTI1 && inUTI1 == inUTI2) {
    return 1;
  }
  Boolean v2 = 0;
  if (inUTI1 && inUTI2) {
    return off_1ECB19460(inUTI1, inUTI2);
  }
  return v2;
}

void sub_18295E8F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *_LSCopyHandlerRankStringFromNumericHandlerRank(uint64_t a1)
{
  switch((int)a1)
  {
    case 0:
      Boolean v2 = @"None";
      goto LABEL_4;
    case 1:
      Boolean v2 = @"Alternate";
      goto LABEL_4;
    case 2:
      Boolean v2 = @"Default";
      goto LABEL_4;
    case 3:
      Boolean v2 = @"Owner";
LABEL_4:
      __n128 result = (void *)CFRetain(v2);
      break;
    default:
      __n128 result = (void *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"# (%i)", a1);
      break;
  }
  return result;
}

void sub_18295EC68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void _LSEnumerateClaimedSchemes(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (a1)
  {
    if (a2) {
      goto LABEL_3;
    }
LABEL_9:
    unint64_t v11 = [MEMORY[0x1E4F28B00] currentHandler];
    unint64_t v12 = objc_msgSend(NSString, "stringWithUTF8String:", "void _LSEnumerateClaimedSchemes(LSContext * _Nonnull, const LSClaimData * _Nonnull, void (^__strong _Nonnull)(NSString *__strong))");
    [v11 handleFailureInFunction:v12, @"LSClaimedTypes.mm", 156, @"Invalid parameter not satisfying: %@", @"inClaimData != NULL" file lineNumber description];

    if (v5) {
      goto LABEL_4;
    }
LABEL_10:
    uint64_t v13 = [MEMORY[0x1E4F28B00] currentHandler];
    id v14 = objc_msgSend(NSString, "stringWithUTF8String:", "void _LSEnumerateClaimedSchemes(LSContext * _Nonnull, const LSClaimData * _Nonnull, void (^__strong _Nonnull)(NSString *__strong))");
    [v13 handleFailureInFunction:v14, @"LSClaimedTypes.mm", 157, @"Invalid parameter not satisfying: %@", @"inBlock != nil" file lineNumber description];

    goto LABEL_4;
  }
  BOOL v9 = [MEMORY[0x1E4F28B00] currentHandler];
  unint64_t v10 = objc_msgSend(NSString, "stringWithUTF8String:", "void _LSEnumerateClaimedSchemes(LSContext * _Nonnull, const LSClaimData * _Nonnull, void (^__strong _Nonnull)(NSString *__strong))");
  [v9 handleFailureInFunction:v10, @"LSClaimedTypes.mm", 155, @"Invalid parameter not satisfying: %@", @"inContext != NULL" file lineNumber description];

  if (!a2) {
    goto LABEL_9;
  }
LABEL_3:
  if (!v5) {
    goto LABEL_10;
  }
LABEL_4:
  if ((*(unsigned char *)(a2 + 8) & 0x40) != 0)
  {
    uint64_t v6 = *(unsigned int *)(a2 + 68);
    if (v6)
    {
      uint64_t v7 = *(void **)a1;
      uint64_t v8 = *(unsigned int *)(*(void *)a1 + 752);
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 3221225472;
      v15[2] = ___LSEnumerateClaimedSchemes_block_invoke;
      v15[3] = &unk_1E522DDA8;
      uint64_t v17 = a1;
      id v16 = v5;
      _LSBindingListEnumerateEntryWithClass(v7, v6, v8, v15);
    }
  }
}

void sub_18295EEA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18295F064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_18295F34C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18295F590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Unwind_Resume(a1);
}

void sub_18295F68C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18295F83C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_18295F918(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18295FAF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSBundleGetPreferredLaunchArchitecture(void *a1, int a2)
{
  id v3 = a1;
  uint64_t v4 = _LSBundleGet(v3, a2);
  CFArrayRef v5 = _LSBundleCopyArchitecturesValidOnCurrentSystem(v3, a2);
  CFArrayRef v6 = v5;
  uint64_t v7 = 0;
  if (v4 && v5)
  {
    if ([(__CFArray *)v5 count])
    {
      uint64_t v7 = [(__CFArray *)v6 objectAtIndexedSubscript:0];
    }
    else
    {
      uint64_t v7 = 0;
    }
  }

  return v7;
}

void sub_18295FC28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18295FD88(_Unwind_Exception *a1)
{
  Boolean v2 = v1;

  _Unwind_Resume(a1);
}

void sub_18295FF28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Unwind_Resume(a1);
}

void sub_182960050(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182960168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1829601F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182960294(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182960340(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829603E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829604D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_182960580(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829607EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182960884(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182960A08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182960BD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSEnumerateTypesInBindingList(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6 = a4;
  if (a1)
  {
    if (a2) {
      goto LABEL_3;
    }
LABEL_6:
    unint64_t v12 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v13 = objc_msgSend(NSString, "stringWithUTF8String:", "void _LSEnumerateTypesInBindingList(LSContext * _Nonnull, LSBindingListID, const LSClaimData * _Nullable, void (^__strong _Nonnull)(NSString *__strong))");
    [v12 handleFailureInFunction:v13, @"LSClaimedTypes.mm", 69, @"Invalid parameter not satisfying: %@", @"inBindingList != kCSStoreNullID" file lineNumber description];

    if (v6) {
      goto LABEL_4;
    }
LABEL_7:
    id v14 = [MEMORY[0x1E4F28B00] currentHandler];
    unint64_t v15 = objc_msgSend(NSString, "stringWithUTF8String:", "void _LSEnumerateTypesInBindingList(LSContext * _Nonnull, LSBindingListID, const LSClaimData * _Nullable, void (^__strong _Nonnull)(NSString *__strong))");
    [v14 handleFailureInFunction:v15, @"LSClaimedTypes.mm", 70, @"Invalid parameter not satisfying: %@", @"inBlock != nil" file lineNumber description];

    goto LABEL_4;
  }
  unint64_t v10 = [MEMORY[0x1E4F28B00] currentHandler];
  unint64_t v11 = objc_msgSend(NSString, "stringWithUTF8String:", "void _LSEnumerateTypesInBindingList(LSContext * _Nonnull, LSBindingListID, const LSClaimData * _Nullable, void (^__strong _Nonnull)(NSString *__strong))");
  [v10 handleFailureInFunction:v11, @"LSClaimedTypes.mm", 68, @"Invalid parameter not satisfying: %@", @"inContext != NULL" file lineNumber description];

  if (!a2) {
    goto LABEL_6;
  }
LABEL_3:
  if (!v6) {
    goto LABEL_7;
  }
LABEL_4:
  uint64_t v7 = *(void **)a1;
  uint64_t v8 = *(unsigned int *)(*(void *)a1 + 232);
  v20[0] = 0;
  v20[1] = v20;
  v20[2] = 0x2020000000;
  char v21 = 0;
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  v16[2] = ___LSEnumerateTypesInBindingList_block_invoke;
  v16[3] = &unk_1E522DD80;
  uint64_t v18 = v20;
  uint64_t v19 = a1;
  id v9 = v6;
  id v17 = v9;
  _LSBindingListEnumerateEntryWithClass(v7, a2, v8, v16);

  _Block_object_dispose(v20, 8);
}

void sub_182960E58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _UTTypeGetIconNames(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = 0;
  if (v3 && a2)
  {
    uint64_t v4 = [MEMORY[0x1E4F1CA48] array];
    uint64_t v5 = 0;
    uint64_t v6 = a2 + 28;
    do
    {
      if (!*(_DWORD *)(v6 + v5)) {
        break;
      }
      uint64_t v7 = (void *)_CSStringCopyCFString();
      if (v7) {
        [v4 addObject:v7];
      }
      v5 += 4;
    }
    while (v5 != 32);
  }

  return v4;
}

void sub_18296108C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _UTTypeGetIconName(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = 0;
  if (v3 && a2)
  {
    if (*(_DWORD *)(a2 + 60)) {
      uint64_t v4 = (void *)_CSStringCopyCFString();
    }
    else {
      uint64_t v4 = 0;
    }
  }

  return v4;
}

void sub_182961134(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _UTTypeGetGlyphName(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = 0;
  if (v3 && a2)
  {
    if (*(_DWORD *)(a2 + 64)) {
      uint64_t v4 = (void *)_CSStringCopyCFString();
    }
    else {
      uint64_t v4 = 0;
    }
  }

  return v4;
}

void sub_1829611C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829613BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182961494(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182961574(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182961604(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18296166C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182961720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id __LAUNCH_SERVICES_IS_GETTING_ENTITLEMENTS_FROM_THE_KERNEL__(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  Boolean v2 = (void *)xpc_copy_entitlements_data_for_token();
  id v3 = v2;
  if (!v2 || object_getClass(v2) != (Class)MEMORY[0x1E4F14580])
  {
    uint64_t v4 = 0;
    goto LABEL_17;
  }
  id v5 = objc_alloc(MEMORY[0x1E4F1C9B8]);
  bytes_ptr = xpc_data_get_bytes_ptr(v3);
  uint64_t v7 = (void *)[v5 initWithBytesNoCopy:bytes_ptr length:xpc_data_get_length(v3) freeWhenDone:0];
  if (v7)
  {
    id v14 = 0;
    uint64_t v8 = [MEMORY[0x1E4F28F98] propertyListWithData:v7 options:0 format:0 error:&v14];
    id v9 = v14;
    if (v8)
    {
      if (_NSIsNSDictionary())
      {
        uint64_t v4 = +[_LSLazyPropertyList lazyPropertyListWithPropertyList:]((uint64_t)_LSLazyPropertyList, v8);
LABEL_15:

        goto LABEL_16;
      }
      unint64_t v10 = _LSRecordLog();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        uint64_t v12 = objc_opt_class();
        *(_DWORD *)buf = 138412546;
        uint64_t v16 = a1;
        __int16 v17 = 2114;
        uint64_t v18 = v12;
        unint64_t v11 = "Entitlements for audit-token-based bundle record %@ were of type %{public}@ instead of NSDictionary. Please file a radar.";
        goto LABEL_13;
      }
    }
    else
    {
      unint64_t v10 = _LSRecordLog();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412546;
        uint64_t v16 = a1;
        __int16 v17 = 2112;
        uint64_t v18 = (uint64_t)v9;
        unint64_t v11 = "Error reading entitlements from data blob for audit-token-based bundle record %@: %@";
LABEL_13:
        _os_log_impl(&dword_182959000, v10, OS_LOG_TYPE_ERROR, v11, buf, 0x16u);
      }
    }

    uint64_t v4 = 0;
    goto LABEL_15;
  }
  uint64_t v4 = 0;
LABEL_16:

LABEL_17:

  return v4;
}

void sub_1829619CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL30_LSPlistCreateTransformedValueP11objc_objectPFP8NSStringS2_PbES3__block_invoke_3(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  uint64_t v8 = (*(void (**)(void *, uint64_t))(a1 + 48))(a2, *(void *)(*(void *)(a1 + 32) + 8) + 24);

  if (v8 != a2
    || _NSIsNSString()
    && ((*(void (**)(void *, uint64_t))(a1 + 48))(a3, *(void *)(*(void *)(a1 + 32) + 8) + 24),
        id v9 = objc_claimAutoreleasedReturnValue(),
        v9,
        v9 != a3))
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    *a4 = 1;
  }
}

uint64_t _LSBundleMatchesNode(void *a1, int a2, uint64_t a3, void *a4, uint64_t a5)
{
  id v9 = a1;
  id v10 = a4;
  unint64_t v11 = v10;
  uint64_t v12 = 0;
  if (a2 && a3 && v10) {
    uint64_t v12 = _LSAliasAndInodeOnContainerMatchesNode(v9, *(_DWORD *)a3, 0, *(unsigned int *)(a3 + 4), v10, a5);
  }

  return v12;
}

void sub_182961D0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSAliasAndInodeOnContainerMatchesNode(void *a1, int a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  id v11 = a1;
  id v12 = a5;
  uint64_t Unit = CSStoreGetUnit();
  if (Unit
    && ((v19 = 0, uint64_t v18 = 0, !_LSContainerCheckState(v11, a4, Unit, &v19, &v18))
      ? (BOOL v14 = v19 == 1)
      : (BOOL v14 = 0),
        v14 ? (BOOL v15 = v18 == a6) : (BOOL v15 = 0),
        v15))
  {
    uint64_t v16 = _LSAliasCompareToNode(v11, a2, a6, a3, v12);
  }
  else
  {
    uint64_t v16 = 0;
  }

  return v16;
}

void sub_182961E14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSAliasCompareToNode(void *a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v7 = a5;
  uint64_t v8 = _LSAliasGet(a1, a2);
  id v9 = v8;
  if (v8) {
    uint64_t v10 = _LSAliasMatchesNode(v8, v7);
  }
  else {
    uint64_t v10 = 0;
  }

  return v10;
}

void sub_182961E9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSAliasMatchesNode(void *a1, void *a2)
{
  id v3 = a1;
  uint64_t v4 = (void *)MEMORY[0x18530F680]();
  id v5 = [a2 canonicalPathWithError:0];
  uint64_t v6 = v5;
  uint64_t v7 = 0;
  if (v3 && v5) {
    uint64_t v7 = _LSAliasDataMatchesPath_NoIO(v3, v5, 0);
  }

  return v7;
}

void sub_182961F38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829620A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1829623C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1829624AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSBundleCopyOrCheckNode(void *a1, unsigned int a2, int a3, int a4, void **a5)
{
  *(void *)&v41[5] = *MEMORY[0x1E4F143B8];
  id v9 = a1;
  __int16 v37 = 0;
  if (a5)
  {
    uint64_t v10 = *a5;
    *a5 = 0;
  }
  uint64_t v11 = _LSBundleGet(v9, a2);
  if (v11 && (uint64_t v12 = *(unsigned int *)(v11 + 4), (v13 = _LSContainerGet()) != 0))
  {
    int v14 = _LSContainerCheckState(v9, v12, v13, (unsigned char *)&v37 + 1, 0);
    if (!a4 || (BOOL v15 = 0, v16 = 4294967261, !v14) && HIBYTE(v37) == 1)
    {
      id v36 = 0;
      BOOL v15 = _LSBundleCreateNode(v9, a2, a4 != 0, (BOOL *)&v37, &v36);
      id v17 = v36;
      uint64_t v18 = v17;
      if (v15)
      {
        uint64_t v16 = 0;
      }
      else
      {
        uint64_t v16 = _LSGetOSStatusFromNSError(v17);
        char v19 = _LSDefaultLog();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          v39 = "_LSBundleCopyOrCheckNode";
          __int16 v40 = 1026;
          *(_DWORD *)v41 = a2;
          v41[2] = 1024;
          *(_DWORD *)&v41[3] = v16;
          _os_log_impl(&dword_182959000, v19, OS_LOG_TYPE_DEFAULT, "%s: cached node not found, _LSBundleCreateNode for bundleID %{public}u returned %d", buf, 0x18u);
        }
      }
      if (a4 && !v16 && (_BYTE)v37)
      {
        unint64_t v20 = _LSDefaultLog();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          v39 = "_LSBundleCopyOrCheckNode";
          __int16 v40 = 2112;
          *(void *)v41 = v15;
          _os_log_impl(&dword_182959000, v20, OS_LOG_TYPE_DEFAULT, "%s: cached node not found, registering new node %@", buf, 0x16u);
        }

        id v35 = 0;
        BOOL v21 = _LSRegisterBundleNode(0, v15, 1u, 0, &v35);
        id v22 = v35;
        if (!v21)
        {
          uint64_t v23 = _LSDefaultLog();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
            _LSBundleCopyOrCheckNode((uint64_t)v15, (uint64_t)v22, v23);
          }
        }
      }

      if (v15) {
        BOOL v24 = a5 != 0;
      }
      else {
        BOOL v24 = 0;
      }
      if (v24)
      {
        if (a3)
        {
          uint64_t v25 = (void *)_CSStringCopyCFString();
          uint64_t v26 = _CSStringCopyCFString();
          v27 = (void *)v26;
          uint64_t v16 = 4294957797;
          if (v25 && v26)
          {
            __int16 v28 = [v25 stringByAppendingString:v26];
            if (v28)
            {
              id v34 = 0;
              uint64_t v29 = [v15 childNodeWithRelativePath:v28 flags:1 error:&v34];
              id v30 = v34;
              uint64_t v31 = *a5;
              *a5 = (void *)v29;

              if (*a5) {
                uint64_t v16 = 0;
              }
              else {
                uint64_t v16 = _LSGetOSStatusFromNSError(v30);
              }
            }
            else
            {
              uint64_t v16 = 4294967255;
            }
          }
        }
        else
        {
          id v32 = v15;
          uint64_t v25 = *a5;
          *a5 = v32;
        }
      }
    }
  }
  else
  {
    BOOL v15 = 0;
    uint64_t v16 = 4294956479;
  }

  return v16;
}

void sub_182962858(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSContainerCheckState(void *a1, uint64_t a2, uint64_t Unit, unsigned char *a4, void *a5)
{
  id v9 = a1;
  uint64_t v10 = 4294967246;
  if (v9 && a2)
  {
    if (!Unit)
    {
      uint64_t Unit = CSStoreGetUnit();
      if (!Unit)
      {
        uint64_t v10 = 4294967261;
        goto LABEL_14;
      }
    }
    if (*(unsigned char *)(Unit + 2))
    {
      long long v11 = *(_OWORD *)Unit;
      int v14 = *(_DWORD *)(Unit + 16);
      long long v13 = v11;
    }
    else
    {
      uint64_t v10 = _LSUpdateContainerState(v9, a2, (uint64_t)&v13);
      if (v10) {
        goto LABEL_14;
      }
    }
    if (a4) {
      *a4 = BYTE2(v13);
    }
    uint64_t v10 = 0;
    if (a5) {
      *a5 = *(void *)((char *)&v13 + 4);
    }
  }
LABEL_14:

  return v10;
}

void sub_182962AD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSContainerGet()
{
  return CSStoreGetUnit();
}

BOOL _LSGetNSErrorFromOSStatusImpl(int a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (a1 && a2)
  {
    uint64_t v6 = (a1 - 100000);
    if (v6 > 0x3E7)
    {
      if ((a1 + 3278) > 0x4E)
      {
        uint64_t v7 = (void *)*MEMORY[0x1E4F28760];
        uint64_t v6 = a1;
      }
      else
      {
        uint64_t v7 = (void *)*MEMORY[0x1E4F28798];
        uint64_t v6 = (-3200 - a1);
      }
    }
    else
    {
      uint64_t v7 = (void *)*MEMORY[0x1E4F28798];
    }
    uint64_t v8 = _LSMakeNSErrorImpl(v7, v6, a3, a4, 0);
    id v9 = _LSErrorLog();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
      _LSGetNSErrorFromOSStatusImpl_cold_1();
    }

    id v10 = v8;
    *a2 = v10;
  }
  return a1 == 0;
}

void ___ZN14LaunchServices17BindingEvaluationL22addBundlesInBindingMapERNS0_5StateE14LSBindingMapIDj_block_invoke(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v3 = a3 & 0xFFFFFFFC;
  if ((a3 & 0xFFFFFFFC) != 0)
  {
    uint64_t v5 = _LSBundleGet(***(void ****)(a1 + 32), a3 & 0xFFFFFFFC);
    if (v5)
    {
      long long v14 = 0u;
      long long v15 = 0u;
      long long v12 = 0u;
      long long v13 = 0u;
      long long v11 = 0u;
      *(void *)&long long v10 = v3;
      *((void *)&v10 + 1) = v5;
      uint64_t v6 = *(void *)(a1 + 32);
      if (LaunchServices::BindingEvaluation::gIsReasonTrackingEnabled || (*(unsigned char *)(v6 + 118) & 2) != 0)
      {
        uint64_t v7 = _LSDatabaseGetBindingMapDebugName(**(void **)v6, *(_DWORD *)(a1 + 40));
        uint64_t v8 = objc_msgSend(@"Bundle in binding map ", "stringByAppendingString:", v7, v10, v11, (void)v12);
        id v9 = (void *)*((void *)&v12 + 1);
        *((void *)&v12 + 1) = v8;

        uint64_t v6 = *(void *)(a1 + 32);
      }
      LaunchServices::BindingEvaluation::pushBackBinding((LaunchServices::BindingEvaluation *)v6, (uint64_t *)(v6 + 176), (LaunchServices::BindingEvaluation::State *)&v10);
    }
  }
}

void sub_182962CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  LaunchServices::BindingEvaluation::ExtendedBinding::~ExtendedBinding(&a9);
  _Unwind_Resume(a1);
}

uint64_t _LSBundleGet(void *a1, int a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = a1;
  uint64_t Unit = 0;
  if (v3)
  {
    if (a2)
    {
      uint64_t Unit = CSStoreGetUnit();
      if (!Unit)
      {
        uint64_t v5 = _LSRegistrationLog();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        {
          uint64_t v6 = v3[1];
          v8[0] = 67240451;
          v8[1] = a2;
          __int16 v9 = 2113;
          uint64_t v10 = v6;
          _os_log_impl(&dword_182959000, v5, OS_LOG_TYPE_ERROR, "Failed to get unit %{public}d from store %{private}@", (uint8_t *)v8, 0x12u);
        }

        uint64_t Unit = 0;
      }
    }
  }

  return Unit;
}

void sub_182962E24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSBundleCreateNode(void *a1, unsigned int a2, int a3, BOOL *a4, void *a5)
{
  id v9 = a1;
  uint64_t v10 = v9;
  BOOL v24 = 0;
  if (a3)
  {
    id v11 = v9;
    long long v12 = (int *)_LSBundleGet(v11, a2);
    long long v13 = v12;
    if (v12 && (_LSAliasGetPath(v11, *v12), (long long v14 = objc_claimAutoreleasedReturnValue()) != 0))
    {
      long long v15 = (void *)[objc_alloc(MEMORY[0x1E4F1CB10]) initFileURLWithPath:v14 isDirectory:(v13[46] >> 3) & 1];
      BOOL v16 = +[FSNode canReadMetadataOfURL:v15 fromSandboxWithAuditToken:0];

      if (!v16)
      {
        if (a5)
        {
          _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -43, (uint64_t)"_LSBundleCreateNode", 1598, 0);
          id v17 = 0;
          *a5 = (id)objc_claimAutoreleasedReturnValue();
          goto LABEL_20;
        }
        goto LABEL_19;
      }
    }
    else
    {
    }
  }
  uint64_t v18 = (int *)_LSBundleGet(v10, a2);
  id v17 = _LSAliasCopyResolvedNode(v10, *v18, 0, (uint64_t)&v24, a5);
  if (!v17)
  {
    uint64_t v20 = _LSContainerGet();
    if (!v20
      || (int v21 = *(_DWORD *)(v20 + 12)) == 0
      || (id v22 = _LSAliasCopyResolvedNode(v10, v21, 0, (uint64_t)&v24, a5)) == 0)
    {
LABEL_19:
      id v17 = 0;
      goto LABEL_20;
    }
    id v17 = _LSAliasCopyResolvedNode(v10, *v18, v22, (uint64_t)&v24, a5);
    if (!v17)
    {

      goto LABEL_20;
    }
  }
  BOOL v19 = v24;
  if (a3 && !v24)
  {
    BOOL v19 = _LSNodeHasChanged(v17, (uint64_t)v10, a2, (uint64_t)v18, 0) != 0;
    BOOL v24 = v19;
  }
  if (a4) {
    *a4 = v19;
  }
LABEL_20:

  return v17;
}

void sub_182963054(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *_LSAliasCopyResolvedNode(void *a1, int a2, void *a3, uint64_t a4, void *a5)
{
  id v9 = a3;
  uint64_t v10 = _LSAliasGet(a1, a2);
  if (v10)
  {
    id v11 = [[FSNode alloc] initByResolvingBookmarkData:v10 relativeToNode:v9 bookmarkDataIsStale:a4 error:a5];
    long long v12 = v11;
    if (v11) {
      id v13 = v11;
    }
  }
  else if (a5)
  {
    _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -9499, (uint64_t)"_LSAliasCopyResolvedNode", 301, 0);
    long long v12 = 0;
    *a5 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    long long v12 = 0;
  }

  return v12;
}

void sub_182963180(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSPlistDataGetValuesForKeys(NSData *a1, void *a2, id *a3)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  id v50 = a2;
  id v48 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA60]), "initWithCapacity:", objc_msgSend(v50, "count"));
  if (!a1 || !v50)
  {
    id v11 = v50;
    goto LABEL_82;
  }
  context = (void *)MEMORY[0x18530F680]();
  BOOL v56 = 0;
  _LSPlistDataIsBinary(a1, &v56);
  if (!a3)
  {
    id v11 = v50;
    goto LABEL_19;
  }
  BOOL v3 = v56;
  long long v53 = -[_LSPlistHint completeDictionary](a3);
  if (v53)
  {
    uint64_t v4 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA60]), "initWithCapacity:", objc_msgSend(v50, "count"));
    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    id v5 = v50;
    uint64_t v6 = [v5 countByEnumeratingWithState:&v57 objects:buf count:16];
    if (v6)
    {
      uint64_t v7 = *(void *)v58;
      do
      {
        for (uint64_t i = 0; i != v6; ++i)
        {
          if (*(void *)v58 != v7) {
            objc_enumerationMutation(v5);
          }
          uint64_t v9 = *(void *)(*((void *)&v57 + 1) + 8 * i);
          uint64_t v10 = [v53 objectForKeyedSubscript:v9];
          [v4 setObject:v10 forKeyedSubscript:v9];
        }
        uint64_t v6 = [v5 countByEnumeratingWithState:&v57 objects:buf count:16];
      }
      while (v6);
    }

    id v11 = 0;
    id v12 = 0;
    goto LABEL_13;
  }
  long long v59 = 0u;
  long long v60 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  obuint64_t j = v50;
  id v12 = 0;
  uint64_t v4 = 0;
  uint64_t v26 = [obj countByEnumeratingWithState:&v57 objects:buf count:16];
  if (v26)
  {
    uint64_t v27 = *(void *)v58;
    do
    {
      for (uint64_t j = 0; j != v26; ++j)
      {
        if (*(void *)v58 != v27) {
          objc_enumerationMutation(obj);
        }
        uint64_t v29 = (NSString *)*(id *)(*((void *)&v57 + 1) + 8 * j);
        id v30 = v29;
        uint64_t v31 = v29;
        if (v3)
        {
          uint64_t v31 = _LSPlistCompactString(v29, 0);
        }
        id v32 = -[_LSPlistHint cachedValueForKey:]((uint64_t)a3, (uint64_t)v31);
        if (v32)
        {
          if (!v4) {
            uint64_t v4 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA60]), "initWithCapacity:", objc_msgSend(obj, "count"));
          }
          [v4 setObject:v32 forKeyedSubscript:v30];
        }
        else if ([a3[1] containsObject:v31])
        {
          goto LABEL_58;
        }
        if (!v12) {
          id v12 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
        }
        [v12 addObject:v30];
LABEL_58:
      }
      uint64_t v26 = [obj countByEnumeratingWithState:&v57 objects:buf count:16];
    }
    while (v26);
  }

  if ([v12 count])
  {
    v33 = (void *)[obj mutableCopy];
    id v11 = v33;
    if (v12) {
      [v33 minusSet:v12];
    }
    if (!v3) {
      [v11 intersectSet:a3[1]];
    }
  }
  else
  {
    id v11 = obj;
  }
LABEL_13:

  if (v4) {
    [v48 addEntriesFromDictionary:v4];
  }

  if (!v11) {
    goto LABEL_23;
  }
LABEL_19:
  if ([v11 count])
  {
    if (_NSIsNSString())
    {
      if ([v11 containsString:@":"])
      {
LABEL_76:
        v41 = (void *)MEMORY[0x18530F680]();
        v42 = _LSPlistRestore(a1);
        v43 = [v11 allObjects];
        id v13 = [v42 dictionaryWithValuesForKeys:v43];

        uint64_t v38 = _LSDefaultLog();
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
        {
          v44 = [v11 allObjects];
          v45 = [v44 componentsJoinedByString:@", "];
          _LSPlistDataGetValuesForKeys_cold_1(v45, buf, v38, v44);
        }
LABEL_78:

        if (v13)
        {
          [v48 addEntriesFromDictionary:v13];
          if (a3)
          {
            v54[0] = MEMORY[0x1E4F143A8];
            v54[1] = 3221225472;
            v54[2] = ___LSPlistDataGetValuesForKeys_block_invoke;
            v54[3] = &unk_1E522FEE8;
            BOOL v55 = v56;
            v54[4] = a3;
            [v13 enumerateKeysAndObjectsUsingBlock:v54];
          }
        }
        goto LABEL_81;
      }
    }
    else if (_NSIsNSSet())
    {
      long long v59 = 0u;
      long long v60 = 0u;
      long long v57 = 0u;
      long long v58 = 0u;
      id v14 = v11;
      uint64_t v15 = [v14 countByEnumeratingWithState:&v57 objects:buf count:16];
      if (v15)
      {
        uint64_t v16 = *(void *)v58;
        while (2)
        {
          for (uint64_t k = 0; k != v15; ++k)
          {
            if (*(void *)v58 != v16) {
              objc_enumerationMutation(v14);
            }
            if ([*(id *)(*((void *)&v57 + 1) + 8 * k) containsString:@":"])
            {

              goto LABEL_76;
            }
          }
          uint64_t v15 = [v14 countByEnumeratingWithState:&v57 objects:buf count:16];
          if (v15) {
            continue;
          }
          break;
        }
      }
    }
    id v62 = 0;
    BOOL v61 = 0;
    uint64_t v18 = _LSPlistGetSubdataForFCF(a1, &v61);
    if (v61)
    {
      BOOL v19 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA80]), "initWithCapacity:", objc_msgSend(v11, "count"));
      long long v59 = 0u;
      long long v60 = 0u;
      long long v57 = 0u;
      long long v58 = 0u;
      id v20 = v11;
      uint64_t v21 = [v20 countByEnumeratingWithState:&v57 objects:buf count:16];
      if (v21)
      {
        uint64_t v22 = *(void *)v58;
        do
        {
          for (uint64_t m = 0; m != v21; ++m)
          {
            if (*(void *)v58 != v22) {
              objc_enumerationMutation(v20);
            }
            BOOL v24 = _LSPlistCompactString(*(NSString **)(*((void *)&v57 + 1) + 8 * m), 0);
            [v19 addObject:v24];
          }
          uint64_t v21 = [v20 countByEnumeratingWithState:&v57 objects:buf count:16];
        }
        while (v21);
      }

      uint64_t v25 = v19;
    }
    else
    {
      uint64_t v25 = 0;
    }
    if (_CFPropertyListCreateFiltered() && (_NSIsNSDictionary() & 1) == 0)
    {
      id v34 = v62;
      id v62 = 0;
    }
    id v35 = v62;
    if (v62 && v61)
    {
      id Transformed = (void *)_LSPlistCreateTransformed(v62, (uint64_t)_LSPlistRestoreString, 0);
      id v37 = v62;
      id v62 = Transformed;

      id v35 = v62;
    }
    id v13 = v35;

    uint64_t v38 = _LSDefaultLog();
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
    {
      v39 = [v11 allObjects];
      __int16 v40 = [v39 componentsJoinedByString:@", "];
      _LSPlistDataGetValuesForKeys_cold_2(v40, buf, v38, v39);
    }
    goto LABEL_78;
  }
LABEL_23:
  id v13 = 0;
LABEL_81:

LABEL_82:

  return v48;
}

void sub_18296397C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_182963BAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

NSData *_LSPlistGetSubdataForFCF(NSData *a1, BOOL *a2)
{
  BOOL v8 = 0;
  _LSPlistDataIsBinary(a1, &v8);
  if (v8)
  {
    id v4 = objc_alloc(MEMORY[0x1E4F1C9B8]);
    id v5 = a1;
    uint64_t v6 = (NSData *)objc_msgSend(v4, "initWithBytesNoCopy:length:freeWhenDone:", -[NSData bytes](v5, "bytes") + 4, -[NSData length](v5, "length") - 4, 0);
    if (!a2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v6 = a1;
  if (a2) {
LABEL_3:
  }
    *a2 = v8;
LABEL_4:

  return v6;
}

NSUInteger _LSPlistDataIsBinary(NSData *a1, BOOL *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  NSUInteger result = [(NSData *)a1 length];
  if (result < 0xA)
  {
    BOOL v6 = 0;
    if (!a2) {
      return result;
    }
    goto LABEL_11;
  }
  NSUInteger result = [(NSData *)a1 getBytes:&v7 length:10];
  BOOL v6 = v7 == 0x696C706268636E6CLL && v8 == 29811;
  if (a2) {
LABEL_11:
  }
    *a2 = v6;
  return result;
}

void sub_182963F0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSAliasMatchesPath_NoIO(void *a1, int a2, void *a3, uint64_t a4)
{
  id v7 = a1;
  id v8 = a3;
  uint64_t v9 = v8;
  if (v7)
  {
    if (v8) {
      goto LABEL_3;
    }
  }
  else
  {
    id v14 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v15 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL _LSAliasMatchesPath_NoIO(__strong LSDatabaseRef, LSAliasID, NSString *__strong, LSAliasPathMatchType)");
    [v14 handleFailureInFunction:v15, @"LSAlias.mm", 235, @"Invalid parameter not satisfying: %@", @"inDB != nil" file lineNumber description];

    if (v9) {
      goto LABEL_3;
    }
  }
  uint64_t v16 = [MEMORY[0x1E4F28B00] currentHandler];
  id v17 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL _LSAliasMatchesPath_NoIO(__strong LSDatabaseRef, LSAliasID, NSString *__strong, LSAliasPathMatchType)");
  [v16 handleFailureInFunction:v17, @"LSAlias.mm", 236, @"Invalid parameter not satisfying: %@", @"inPath != nil" file lineNumber description];

LABEL_3:
  uint64_t v10 = _LSAliasGet(v7, a2);
  id v11 = v10;
  if (v10) {
    uint64_t v12 = _LSAliasDataMatchesPath_NoIO(v10, v9, a4);
  }
  else {
    uint64_t v12 = 0;
  }

  return v12;
}

void sub_1829640B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSAliasDataMatchesPath_NoIO(void *a1, void *a2, uint64_t a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = v6;
  if (v5)
  {
    if (v6) {
      goto LABEL_3;
    }
  }
  else
  {
    id v17 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v18 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL _LSAliasDataMatchesPath_NoIO(NSData *__strong, NSString *__strong, LSAliasPathMatchType)");
    [v17 handleFailureInFunction:v18, @"LSUtils.mm", 783, @"Invalid parameter not satisfying: %@", @"inAlias != nil" file lineNumber description];

    if (v7) {
      goto LABEL_3;
    }
  }
  BOOL v19 = [MEMORY[0x1E4F28B00] currentHandler];
  id v20 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL _LSAliasDataMatchesPath_NoIO(NSData *__strong, NSString *__strong, LSAliasPathMatchType)");
  [v19 handleFailureInFunction:v20, @"LSUtils.mm", 784, @"Invalid parameter not satisfying: %@", @"inPath != nil" file lineNumber description];

LABEL_3:
  id v8 = (void *)MEMORY[0x18530F680]();
  uint64_t v9 = +[FSNode pathForBookmarkData:v5 error:0];
  if (!v9) {
    goto LABEL_9;
  }
  if (!a3)
  {
    while (([v7 hasSuffix:@"/"] & 1) != 0)
    {
      uint64_t v14 = objc_msgSend(v7, "stringByReplacingCharactersInRange:withString:", objc_msgSend(v7, "length") - 1, 1, &stru_1ECB1A570);

      id v7 = (void *)v14;
    }
    while ([v9 hasSuffix:@"/"])
    {
      uint64_t v15 = objc_msgSend(v9, "stringByReplacingCharactersInRange:withString:", objc_msgSend(v9, "length") - 1, 1, &stru_1ECB1A570);

      uint64_t v9 = (void *)v15;
    }
  }
  uint64_t v10 = v9;
  id v11 = v7;
  switch(a3)
  {
    case 2:
LABEL_15:
      uint64_t v12 = [v10 hasPrefix:v11];
      goto LABEL_16;
    case 1:
      uint64_t v10 = v7;
      id v11 = v9;
      goto LABEL_15;
    case 0:
      uint64_t v12 = [v7 isEqual:v9];
LABEL_16:
      uint64_t v13 = v12;
      goto LABEL_17;
  }
LABEL_9:
  uint64_t v13 = 0;
LABEL_17:

  return v13;
}

void sub_18296435C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182964560(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182964610(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL25_LSPlistCreateTransformedP12NSDictionaryIP8NSStringP11objc_objectEPFS1_S1_PbES6__block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (*(void (**)(id, uint64_t))(a1 + 48))(v5, *(void *)(*(void *)(a1 + 40) + 8) + 24);

  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v34 = 0;
  id v35 = &v34;
  uint64_t v36 = 0x2020000000;
  char v37 = 0;
  if (_NSIsNSArray())
  {
    uint64_t v30 = 0;
    uint64_t v31 = &v30;
    uint64_t v32 = 0x2020000000;
    char v33 = 0;
    uint64_t v23 = MEMORY[0x1E4F143A8];
    uint64_t v24 = 3221225472;
    uint64_t v25 = ___ZL30_LSPlistCreateTransformedValueP11objc_objectPFP8NSStringS2_PbES3__block_invoke;
    uint64_t v26 = &unk_1E522FF38;
    __int16 v28 = &v30;
    uint64_t v29 = v8;
    uint64_t v27 = &v34;
    [v6 enumerateObjectsUsingBlock:&v23];
    if (*((unsigned char *)v31 + 24))
    {
      uint64_t v10 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v6, "count"));
      uint64_t v16 = MEMORY[0x1E4F143A8];
      uint64_t v17 = 3221225472;
      uint64_t v18 = ___ZL30_LSPlistCreateTransformedValueP11objc_objectPFP8NSStringS2_PbES3__block_invoke_2;
      BOOL v19 = &unk_1E522FF60;
      uint64_t v21 = &v34;
      uint64_t v22 = v8;
      id v11 = v10;
      id v20 = v11;
      [v6 enumerateObjectsUsingBlock:&v16];
      uint64_t v12 = objc_msgSend(v11, "copy", v16, v17, v18, v19);
LABEL_7:
      id v14 = (id)v12;

      goto LABEL_9;
    }
    goto LABEL_8;
  }
  if (_NSIsNSDictionary())
  {
    uint64_t v30 = 0;
    uint64_t v31 = &v30;
    uint64_t v32 = 0x2020000000;
    char v33 = 0;
    uint64_t v23 = MEMORY[0x1E4F143A8];
    uint64_t v24 = 3221225472;
    uint64_t v25 = ___ZL30_LSPlistCreateTransformedValueP11objc_objectPFP8NSStringS2_PbES3__block_invoke_3;
    uint64_t v26 = &unk_1E522FF88;
    __int16 v28 = &v30;
    uint64_t v29 = v8;
    uint64_t v27 = &v34;
    [v6 enumerateKeysAndObjectsUsingBlock:&v23];
    if (*((unsigned char *)v31 + 24))
    {
      uint64_t v13 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA60]), "initWithCapacity:", objc_msgSend(v6, "count"));
      uint64_t v16 = MEMORY[0x1E4F143A8];
      uint64_t v17 = 3221225472;
      uint64_t v18 = ___ZL30_LSPlistCreateTransformedValueP11objc_objectPFP8NSStringS2_PbES3__block_invoke_4;
      BOOL v19 = &unk_1E522FF10;
      uint64_t v21 = &v34;
      uint64_t v22 = v8;
      id v11 = v13;
      id v20 = v11;
      [v6 enumerateKeysAndObjectsUsingBlock:&v16];
      uint64_t v12 = objc_msgSend(v11, "copy", v16, v17, v18, v19);
      goto LABEL_7;
    }
LABEL_8:
    id v14 = 0;
LABEL_9:
    _Block_object_dispose(&v30, 8);
    if (v14) {
      goto LABEL_11;
    }
  }
  id v14 = v6;
LABEL_11:
  if (*(unsigned char *)(v9 + 24)) {
    BOOL v15 = 1;
  }
  else {
    BOOL v15 = *((unsigned char *)v35 + 24) != 0;
  }
  *(unsigned char *)(v9 + 24) = v15;
  _Block_object_dispose(&v34, 8);

  [*(id *)(a1 + 32) setObject:v14 forKeyedSubscript:v7];
}

void sub_18296495C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v18 - 112), 8);

  _Unwind_Resume(a1);
}

NSString *_LSPlistRestoreString(NSString *a1, BOOL *a2)
{
  NSUInteger v4 = [(NSString *)a1 length];
  if (!a1 || !v4) {
    goto LABEL_14;
  }
  if ([(NSString *)a1 characterAtIndex:0] == 8)
  {
    id v5 = [(NSString *)a1 substringFromIndex:1];
    if (!v5)
    {
LABEL_14:
      id v5 = a1;
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v6 = _LSPlistLookUpIndexOfCompactedString(a1);
    if (v6 == 0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_14;
    }
    unint64_t v7 = v6;
    uint64_t v8 = _LSPlistGetCommonStrings();
    if (v7 >= [v8 count])
    {
      id v5 = 0;
    }
    else
    {
      id v5 = [v8 objectAtIndexedSubscript:v7];
    }

    if (!v5) {
      goto LABEL_14;
    }
  }
  if (a2 && v5 != a1) {
    *a2 = 1;
  }
LABEL_15:

  return v5;
}

void sub_182964AB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSAliasGet(void *a1, int a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (a2)
  {
    uint64_t Unit = (void *)CSStoreGetUnit();
    if (Unit)
    {
      id v5 = (void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytesNoCopy:Unit length:0 freeWhenDone:0];
      uint64_t Unit = v5;
      if (v5)
      {
        if ([v5 length])
        {
          uint64_t v6 = _LSDefaultLog();
          if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218496;
            uint64_t v9 = Unit;
            __int16 v10 = 2048;
            uint64_t v11 = [Unit length];
            __int16 v12 = 2048;
            uint64_t v13 = 0;
            _os_log_error_impl(&dword_182959000, v6, OS_LOG_TYPE_ERROR, "bad alias at %p, size %ld, CSStore size %lu\n", buf, 0x20u);
          }
        }
        else
        {
          if ((unint64_t)[Unit length] <= 0x2000) {
            goto LABEL_12;
          }
          uint64_t v6 = _LSDefaultLog();
          if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
            _LSAliasGet_cold_1((uint64_t)Unit, buf, [Unit length], v6);
          }
        }
      }
    }
  }
  else
  {
    uint64_t Unit = 0;
  }
LABEL_12:

  return Unit;
}

void sub_182964C78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NSString *_LSPlistCompactString(NSString *a1, BOOL *a2)
{
  NSUInteger v4 = [(NSString *)a1 length];
  if (!a1) {
    goto LABEL_14;
  }
  if (!v4)
  {
    unint64_t v7 = [NSString stringWithCharacters:&_LSPlistEscapeCharacter length:1];
    if (v7) {
      goto LABEL_10;
    }
LABEL_14:
    unint64_t v7 = a1;
    goto LABEL_15;
  }
  if ([(NSString *)a1 characterAtIndex:0] == 8
    || _LSPlistLookUpIndexOfCompactedString(a1) != 0x7FFFFFFFFFFFFFFFLL)
  {
    id v5 = objc_msgSend(MEMORY[0x1E4F28E78], "stringWithCapacity:", -[NSString length](a1, "length") + 1);
    uint64_t v8 = [NSString stringWithCharacters:&_LSPlistEscapeCharacter length:1];
    [v5 appendString:v8];

    [v5 appendString:a1];
    uint64_t v9 = [v5 copy];
  }
  else
  {
    id v5 = _LSPlistGetCommonStrings();
    unint64_t v6 = [v5 indexOfObject:a1];
    if (v6 == 0x7FFFFFFFFFFFFFFFLL)
    {
      unint64_t v7 = 0;
      goto LABEL_9;
    }
    uint64_t v9 = _LSPlistLookUpCompactedStringByIndex(v6);
  }
  unint64_t v7 = (NSString *)v9;
LABEL_9:

  if (!v7) {
    goto LABEL_14;
  }
LABEL_10:
  if (a2 && v7 != a1) {
    *a2 = 1;
  }
LABEL_15:

  return v7;
}

void sub_182964E34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSPlistGetCommonStrings(void)
{
  if (_LSPlistGetCommonStrings(void)::once != -1) {
    dispatch_once(&_LSPlistGetCommonStrings(void)::once, &__block_literal_global_29_0);
  }
  v0 = (void *)_LSPlistGetCommonStrings(void)::result;

  return v0;
}

id _LSPlistLookUpCompactedStringByIndex(unint64_t a1)
{
  if (_LSPlistLookUpCompactedStringByIndex(unsigned long)::once != -1) {
    dispatch_once(&_LSPlistLookUpCompactedStringByIndex(unsigned long)::once, &__block_literal_global_804);
  }
  if ([(id)_LSPlistLookUpCompactedStringByIndex(unsigned long)::strings count] <= a1)
  {
    Boolean v2 = 0;
  }
  else
  {
    Boolean v2 = [(id)_LSPlistLookUpCompactedStringByIndex(unsigned long)::strings objectAtIndexedSubscript:a1];
  }

  return v2;
}

void sub_182965054(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18296541C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182965514(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSPlistGet(uint64_t a1, unsigned int a2)
{
  DataWithUnitNoCopy = 0;
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (a1 && a2)
  {
    DataWithUnitNoCopy = (void *)_CSStoreCreateDataWithUnitNoCopy();
    id v5 = _LSDefaultLog();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      int v7 = 134218496;
      uint64_t v8 = DataWithUnitNoCopy;
      __int16 v9 = 2048;
      uint64_t v10 = a2;
      __int16 v11 = 2048;
      uint64_t v12 = a1;
      _os_log_debug_impl(&dword_182959000, v5, OS_LOG_TYPE_DEBUG, "Got plist data %p for unit %llx from database %p", (uint8_t *)&v7, 0x20u);
    }
  }

  return DataWithUnitNoCopy;
}

void sub_182965650(_Unwind_Exception *exception_object)
{
}

id _LSDefaultLog()
{
  if (_LSDefaultLog_onceToken != -1) {
    dispatch_once(&_LSDefaultLog_onceToken, &__block_literal_global_52);
  }
  v0 = (void *)_LSDefaultLog_log;

  return v0;
}

void sub_18296571C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829657BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSPlistCreateTransformed(void *a1, uint64_t a2, BOOL *a3)
{
  uint64_t v15 = 0;
  uint64_t v16 = &v15;
  uint64_t v17 = 0x2020000000;
  char v18 = 0;
  unint64_t v6 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA60]), "initWithCapacity:", objc_msgSend(a1, "count"));
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = ___ZL25_LSPlistCreateTransformedP12NSDictionaryIP8NSStringP11objc_objectEPFS1_S1_PbES6__block_invoke;
  v11[3] = &unk_1E522FF10;
  uint64_t v13 = &v15;
  uint64_t v14 = a2;
  id v7 = v6;
  id v12 = v7;
  [a1 enumerateKeysAndObjectsUsingBlock:v11];
  uint64_t v8 = [v7 copy];

  if (a3)
  {
    BOOL v9 = *a3 || *((unsigned char *)v16 + 24) != 0;
    *a3 = v9;
  }
  _Block_object_dispose(&v15, 8);
  return v8;
}

void sub_1829659AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_182965B10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL30_LSPlistCreateTransformedValueP11objc_objectPFP8NSStringS2_PbES3__block_invoke(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  if (_NSIsNSString())
  {
    id v7 = (*(void (**)(void *, uint64_t))(a1 + 48))(a2, *(void *)(*(void *)(a1 + 32) + 8) + 24);
    if (v7 != a2)
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
      *a4 = 1;
    }
  }
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
}

uint64_t __Block_byref_object_dispose__2(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::~__hash_table(a1 + 48);
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
}

{
  void *v2;

  Boolean v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 48);
  std::vector<LSApplicationRecord * {__strong}>::__destroy_vector::operator()[abi:nn180100](&v1);
}

void __Block_byref_object_dispose__6(uint64_t a1)
{
  Boolean v2 = (uint64_t *)(a1 + 224);
  std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__destroy_vector::operator()[abi:nn180100](&v2);
  LaunchServices::BindingEvaluator::~BindingEvaluator((id *)(a1 + 56));
}

void __Block_byref_object_dispose__7(uint64_t a1)
{
}

{
}

void __Block_byref_object_dispose__8(uint64_t a1)
{
}

void __Block_byref_object_dispose__9(uint64_t a1)
{
  Boolean v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void __Block_byref_object_dispose__10(uint64_t a1)
{
}

void __Block_byref_object_dispose__12(uint64_t a1)
{
  Boolean v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void __Block_byref_object_dispose__13(uint64_t a1)
{
}

void __Block_byref_object_dispose__14(uint64_t a1)
{
}

void __Block_byref_object_dispose__15(uint64_t a1)
{
}

void __Block_byref_object_dispose__16(uint64_t a1)
{
  Boolean v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void __Block_byref_object_dispose__17(uint64_t a1)
{
}

void __Block_byref_object_dispose__18(uint64_t a1)
{
  Boolean v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void __Block_byref_object_dispose__19(uint64_t a1)
{
}

void __Block_byref_object_dispose__20(uint64_t a1)
{
}

void __Block_byref_object_dispose__21(uint64_t a1)
{
}

void __Block_byref_object_dispose__22(uint64_t a1)
{
}

void __Block_byref_object_dispose__23(uint64_t a1)
{
}

void __Block_byref_object_dispose__24(uint64_t a1)
{
}

void __Block_byref_object_dispose__25(uint64_t a1)
{
}

{
  void **v1;

  uint64_t v1 = (void **)(a1 + 48);
  std::vector<LaunchServices::Types::EnumeratedTypeUnitOrDynamicTypeIdentifier>::__destroy_vector::operator()[abi:nn180100](&v1);
}

uint64_t __Block_byref_object_dispose__26(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::~__hash_table(a1 + 48);
}

void __Block_byref_object_dispose__27(uint64_t a1)
{
}

{
  void *v2;

  Boolean v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void __Block_byref_object_dispose__28(uint64_t a1)
{
}

{
}

void __Block_byref_object_dispose__29(uint64_t a1)
{
}

void __Block_byref_object_dispose__30(uint64_t a1)
{
}

void __Block_byref_object_dispose__31(uint64_t a1)
{
}

void __Block_byref_object_dispose__32(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 48);
  std::vector<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::__destroy_vector::operator()[abi:nn180100](&v1);
}

{
}

void __Block_byref_object_dispose__35(uint64_t a1)
{
}

void __Block_byref_object_dispose__36(uint64_t a1)
{
}

void __Block_byref_object_dispose__37(uint64_t a1)
{
}

{
  const void *v2;

  Boolean v2 = *(const void **)(a1 + 48);
  if (v2) {
    CFRelease(v2);
  }
  *(void *)(a1 + 48) = 0;
}

void __Block_byref_object_dispose__38(uint64_t a1)
{
}

void __Block_byref_object_dispose__39(uint64_t a1)
{
}

void __Block_byref_object_dispose__40(uint64_t a1)
{
}

void __Block_byref_object_dispose__41(uint64_t a1)
{
}

void __Block_byref_object_dispose__42(uint64_t a1)
{
  Boolean v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void __Block_byref_object_dispose__43(uint64_t a1)
{
}

void __Block_byref_object_dispose__44(uint64_t a1)
{
}

void __Block_byref_object_dispose__45(uint64_t a1)
{
}

{
  LaunchServices::DumpWriter::~DumpWriter((id *)(a1 + 48));
}

void __Block_byref_object_dispose__46(uint64_t a1)
{
}

void __Block_byref_object_dispose__47(uint64_t a1)
{
}

void __Block_byref_object_dispose__48(uint64_t a1)
{
}

void __Block_byref_object_dispose__49(uint64_t a1)
{
}

void __Block_byref_object_dispose__50(uint64_t a1)
{
}

void __Block_byref_object_dispose__51(uint64_t a1)
{
}

{
}

void __Block_byref_object_dispose__52(uint64_t a1)
{
}

void __Block_byref_object_dispose__53(uint64_t a1)
{
}

uint64_t __Block_byref_object_dispose__54(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>>>::~__hash_table(a1 + 48);
}

void __Block_byref_object_dispose__55(uint64_t a1)
{
}

void __Block_byref_object_dispose__56(uint64_t a1)
{
}

void LaunchServices::BindingEvaluator::setFilter(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = [a3 copy];
  unint64_t v6 = *(void **)(a1 + 136);
  *(void *)(a1 + 136) = v5;

  uint64_t v7 = [a2 copy];
  uint64_t v8 = *(void **)(a1 + 144);
  *(void *)(a1 + 144) = v7;
}

void sub_1829664DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose((const void *)(v29 - 160), 8);
  _Block_object_dispose(&a23, 8);
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a27);

  _Unwind_Resume(a1);
}

uint64_t LaunchServices::Database::Context::_get(LaunchServices::Database::Context *this, _LSDServiceDomain *a2, uint64_t a3)
{
  uint64_t v5 = a2;
  uint64_t v6 = *(void *)this;
  if (!*(void *)this)
  {
    if (*((void *)this + 3))
    {
      uint64_t v6 = 0;
    }
    else
    {
      uint64_t v7 = (void *)MEMORY[0x18530F680]();
      id v12 = 0;
      int v8 = _LSContextInitWithOptions((char *)this + 8, v5, a3, &v12);
      id v9 = v12;
      id v10 = v12;
      if (v8)
      {
        *(void *)this = (char *)this + 8;
        *((unsigned char *)this + 16) = 1;
      }
      else
      {
        objc_storeStrong((id *)this + 3, v9);
      }

      uint64_t v6 = *(void *)this;
    }
  }

  return v6;
}

void sub_182966698(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182966880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  _Block_object_dispose(&a21, 8);

  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

uint64_t __LSRECORD_IS_PERFORMING_IO_FOR_A_CALLER__(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

void sub_182966C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

__n128 LaunchServices::BindingEvaluator::CreateWithBundleInfo@<Q0>(LaunchServices::BindingEvaluator *this@<X0>, NSString *a2@<X1>, NSString *a3@<X2>, LSVersionNumber *a4@<X4>, _OWORD *a5@<X3>, uint64_t a6@<X8>)
{
  char v6 = (char)a4;
  unsigned int v8 = a3;
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  LaunchServices::BindingEvaluator::BindingEvaluator((LaunchServices::BindingEvaluator *)a6);
  id v12 = _LSBindingLog();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v13 = (id)_LSCopyStringForOSType(v8);
    long long v14 = a5[1];
    v27[0] = *a5;
    v27[1] = v14;
    uint64_t v15 = _LSVersionNumberGetStringRepresentation(v27);
    *(_DWORD *)buf = 138478595;
    uint64_t v29 = this;
    __int16 v30 = 2113;
    uint64_t v31 = a2;
    __int16 v32 = 2114;
    char v33 = v13;
    __int16 v34 = 2114;
    id v35 = v15;
    _os_log_impl(&dword_182959000, v12, OS_LOG_TYPE_DEBUG, "BindingEvaluator::CreateWithBundleInfo(ID=%{private}@, name=%{private}@, CC=%{public}@, vers=%{public}@)", buf, 0x2Au);
  }
  uint64_t v16 = (__CFString *)_LSCopyStringForOSType(v8);
  long long v17 = a5[1];
  v26[0] = *a5;
  v26[1] = v17;
  char v18 = _LSVersionNumberGetStringRepresentation(v26);
  LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"Creating binding evaluator for bundle info: ID=%@, name=%@, CC=%@, vers=%@", v19, this, a2, v16, v18);

  uint64_t v20 = [(LaunchServices::BindingEvaluator *)this copy];
  uint64_t v21 = *(void **)(a6 + 32);
  *(void *)(a6 + 32) = v20;

  uint64_t v22 = [(NSString *)a2 copy];
  uint64_t v23 = *(void **)(a6 + 40);
  *(void *)(a6 + 40) = v22;

  __n128 result = *(__n128 *)a5;
  long long v25 = a5[1];
  *(_OWORD *)(a6 + 48) = *a5;
  *(_OWORD *)(a6 + 64) = v25;
  *(unsigned char *)(a6 + 88) = 1;
  *(unsigned char *)(a6 + 89) = v6;
  return result;
}

void sub_182966EF0(_Unwind_Exception *a1)
{
  LaunchServices::BindingEvaluator::~BindingEvaluator(v1);
  _Unwind_Resume(a1);
}

__CFString *_LSVersionNumberGetStringRepresentation(_OWORD *a1)
{
  long long v1 = a1[1];
  v4[0] = *a1;
  v4[1] = v1;
  Boolean v2 = (__CFString *)LaunchServices::VersionNumber::copyStringRepresentation((LaunchServices::VersionNumber *)v4);

  return v2;
}

CFStringRef LaunchServices::VersionNumber::copyStringRepresentation(LaunchServices::VersionNumber *this)
{
  if (!*(void *)this && !*((void *)this + 1) && !*((void *)this + 2)) {
    return 0;
  }
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v8);
  Boolean v2 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v2, (uint64_t)".", 1);
  std::ostream::operator<<();
  if (*((void *)this + 2))
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v8, (uint64_t)".", 1);
    std::ostream::operator<<();
  }
  std::stringbuf::str();
  if (v7 >= 0) {
    p_p = (const char *)&__p;
  }
  else {
    p_p = (const char *)__p;
  }
  CFStringRef v4 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], p_p, 0x8000100u);
  if (v7 < 0) {
    operator delete(__p);
  }
  v8[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v8[1] = MEMORY[0x1E4FBA470] + 16;
  if (v9 < 0) {
    operator delete((void *)v8[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x18530EAC0](&v10);
  return v4;
}

void sub_182967158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

LaunchServices::BindingEvaluator *LaunchServices::BindingEvaluator::BindingEvaluator(LaunchServices::BindingEvaluator *this)
{
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 3) = kLSVersionNumberNull;
  *((_OWORD *)this + 4) = *(_OWORD *)algn_182AF9270;
  *((void *)this + 10) = 0;
  *((_WORD *)this + 44) = 0;
  *((void *)this + 12) = 32;
  *((_DWORD *)this + 26) = 14;
  *(void *)((char *)this + 108) = 0;
  *(void *)((char *)this + 124) = 0;
  *(void *)((char *)this + 116) = 0;
  *((_DWORD *)this + 33) = 0;
  Boolean v2 = operator new(4uLL);
  *((void *)this + 14) = v2;
  *v2++ = 2;
  *((void *)this + 15) = v2;
  *((void *)this + 16) = v2;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  return this;
}

void sub_18296721C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CFStringRef _LSCopyStringForOSType(unsigned int a1)
{
  if (a1) {
    unsigned int v1 = a1;
  }
  else {
    unsigned int v1 = 1061109567;
  }
  *(_DWORD *)bytes = bswap32(v1);
  return CFStringCreateWithBytes(0, bytes, 4, 0, 0);
}

BOOL _LSBundleFindWithInfoAndNo_IOFilter(uint64_t a1, NSString *a2, void *a3, int a4, _OWORD *a5, int a6, int a7, void *a8, void *a9, _DWORD *a10, void *a11, void *a12)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  char v18 = a3;
  id v19 = a8;
  id v20 = a9;
  v37[0] = 0;
  char v38 = 0;
  if (a4)
  {
    if (!a12)
    {
LABEL_19:
      BOOL v23 = 0;
      goto LABEL_20;
    }
    _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -4, (uint64_t)"_LSBundleFindWithInfoAndNo_IOFilter", 775, 0);
    *a12 = (id)objc_claimAutoreleasedReturnValue();
  }
  else if (v18 || a2 && a2 != 1061109567)
  {
    long long v21 = a5[1];
    v30[0] = *a5;
    v30[1] = v21;
    LaunchServices::BindingEvaluator::CreateWithBundleInfo(v18, 0, a2, 0, v30, (uint64_t)&__p);
    std::optional<LaunchServices::BindingEvaluator>::operator=[abi:nn180100]<LaunchServices::BindingEvaluator,void>((LaunchServices::BindingEvaluator *)v37, (const LaunchServices::BindingEvaluator *)&__p);
    LaunchServices::BindingEvaluator::~BindingEvaluator((LaunchServices::BindingEvaluator *)&__p);
  }
  else if (a12)
  {
    uint64_t v28 = *MEMORY[0x1E4F28228];
    uint64_t v29 = @"inBundleID || inHFSCreator";
    long long v25 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v29 forKeys:&v28 count:1];
    _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -50, (uint64_t)"_LSBundleFindWithInfoAndNo_IOFilter", 781, v25);
    *a12 = (id)objc_claimAutoreleasedReturnValue();
  }
  if (!v38) {
    goto LABEL_19;
  }
  LaunchServices::BindingEvaluator::setLimit((uint64_t)v37, 1uLL);
  LaunchServices::BindingEvaluator::setOptions((uint64_t)v37, a7);
  uint64_t v22 = operator new(4uLL);
  __p = v22;
  _DWORD *v22 = a6;
  __int16 v32 = v22 + 1;
  char v33 = v22 + 1;
  LaunchServices::BindingEvaluator::setAllowedBundleClasses((uint64_t)v37, (uint64_t)&__p);
  if (__p)
  {
    __int16 v32 = __p;
    operator delete(__p);
  }
  if (v20)
  {
    v26[0] = MEMORY[0x1E4F143A8];
    v26[1] = 3221225472;
    _OWORD v26[2] = ___LSBundleFindWithInfoAndNo_IOFilter_block_invoke;
    v26[3] = &unk_1E522D660;
    id v27 = v20;
    LaunchServices::BindingEvaluator::setFilter((uint64_t)v37, v19, v26);
  }
  LaunchServices::BindingEvaluator::getBestBinding((LaunchServices::BindingEvaluator *)v37, (uint64_t *)&__p);
  BOOL v23 = v36 != 0;
  if (v36)
  {
    if (a10) {
      *a10 = __p;
    }
    if (a11) {
      *a11 = v32;
    }
  }
  if (v38) {
    LaunchServices::BindingEvaluator::~BindingEvaluator((LaunchServices::BindingEvaluator *)v37);
  }
LABEL_20:

  return v23;
}

void sub_182967580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a64) {
    LaunchServices::BindingEvaluator::~BindingEvaluator((LaunchServices::BindingEvaluator *)&a43);
  }

  _Unwind_Resume(a1);
}

void LaunchServices::BindingEvaluator::~BindingEvaluator(id *this)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  Boolean v2 = _LSBindingLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    char v6 = this;
    _os_log_impl(&dword_182959000, v2, OS_LOG_TYPE_DEBUG, "BindingEvaluator::~BindingEvaluator(%p)", buf, 0xCu);
  }

  LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"Destroying binding evaluator %p", v3, this);
  id v4 = this[14];
  if (v4)
  {
    this[15] = v4;
    operator delete(v4);
  }
}

void sub_182967720(_Unwind_Exception *a1)
{
  id v3 = *(void **)(v1 + 112);
  if (v3)
  {
    *(void *)(v1 + 120) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(a1);
}

void LaunchServices::BindingEvaluator::getBestBinding(uint64_t *__return_ptr a1@<X8>, LaunchServices::BindingEvaluator *a2@<X0>, LSContext *a3@<X1>, void **a4@<X2>, void *a5@<X3>)
{
  v22[12] = *(id *)MEMORY[0x1E4F143B8];
  *(unsigned char *)a1 = 0;
  *((unsigned char *)a1 + 48) = 0;
  LaunchServices::BindingEvaluation::State::State((LaunchServices::BindingEvaluation::State *)&v20, a3, a2);
  if (a4)
  {
    uint64_t v9 = LaunchServices::BindingEvaluation::State::getTypeRecord((LaunchServices::BindingEvaluation::State *)&v20);
    uint64_t v10 = *a4;
    *a4 = (void *)v9;
  }
  v21[12] = (id)1;
  LaunchServices::BindingEvaluation::runEvaluator(&v20, a5, (uint64_t *)v16);
  __int16 v11 = v16[0];
  if (v16[0] != v16[1])
  {
    id v12 = _LSBindingLog();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v13 = [[_LSBindingForLog alloc] initWithState:&v20 binding:v11];
      *(_DWORD *)buf = 134349315;
      *(void *)&uint8_t buf[4] = a2;
      __int16 v18 = 2113;
      id v19 = v13;
      _os_log_impl(&dword_182959000, v12, OS_LOG_TYPE_DEBUG, "Best binding found for evaluator %{public}p: %{private}@", buf, 0x16u);
    }
    long long v14 = [[_LSBindingForLog alloc] initWithState:&v20 binding:v11];
    LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"Best binding found for evaluator %p: %@", v15, a2, v14);

    std::optional<LSBinding>::operator=[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding const&,void>((uint64_t)a1, (uint64_t)v11);
  }
  *(void *)buf = v16;
  std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__destroy_vector::operator()[abi:nn180100]((uint64_t **)buf);

  v16[0] = (uint64_t *)v22;
  std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__destroy_vector::operator()[abi:nn180100](v16);
  LaunchServices::BindingEvaluator::~BindingEvaluator(v21);
}

void sub_182967970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  __int16 v11 = va_arg(va2, uint64_t *);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);

  va_copy((va_list)v11, va);
  std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__destroy_vector::operator()[abi:nn180100]((uint64_t **)va1);
  LaunchServices::BindingEvaluation::State::~State((id *)va2);
  std::__optional_destruct_base<LSBinding,false>::~__optional_destruct_base[abi:nn180100](v3);
  _Unwind_Resume(a1);
}

void LaunchServices::BindingEvaluation::pushBackBinding(LaunchServices::BindingEvaluation *a1, uint64_t *a2, LaunchServices::BindingEvaluation::State *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (*((void *)a3 + 1))
  {
    if (LaunchServices::BindingEvaluation::isBindingOK_NoIO(a1, a3, a3))
    {
      uint64_t v6 = _LSBindingLog();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v7 = [[_LSBindingForLog alloc] initWithState:a1 binding:a3];
        uint64_t v8 = *((void *)a3 + 5);
        *(_DWORD *)buf = 138543618;
        uint64_t v16 = v7;
        __int16 v17 = 2114;
        uint64_t v18 = v8;
        _os_log_impl(&dword_182959000, v6, OS_LOG_TYPE_DEBUG, "+++ %{public}@ %{public}@", buf, 0x16u);
      }
      uint64_t v9 = [[_LSBindingForLog alloc] initWithState:a1 binding:a3];
      LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"+++ %@ %@", v10, v9, *((void *)a3 + 5));

      unint64_t v11 = a2[1];
      if (v11 >= a2[2])
      {
        uint64_t v12 = std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__push_back_slow_path<LaunchServices::BindingEvaluation::ExtendedBinding const&>(a2, (uint64_t)a3);
      }
      else
      {
        std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>::construct[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding,LaunchServices::BindingEvaluation::ExtendedBinding const&>((uint64_t)(a2 + 3), a2[1], (uint64_t)a3);
        uint64_t v12 = v11 + 96;
        a2[1] = v11 + 96;
      }
      a2[1] = v12;
    }
  }
  else
  {
    uint64_t v13 = _LSBindingLog();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
    {
      uint64_t v14 = (_LSBindingForLog *)*(unsigned int *)a3;
      *(_DWORD *)buf = 134217984;
      uint64_t v16 = v14;
      _os_log_impl(&dword_182959000, v13, OS_LOG_TYPE_FAULT, "pushing back binding for unit %llu that had no bundle data pointer!?", buf, 0xCu);
    }
  }
}

void sub_182967B94(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

uint64_t LaunchServices::BindingEvaluation::isBindingOK_NoIO(LaunchServices::BindingEvaluation *this, LaunchServices::BindingEvaluation::State *a2, const LaunchServices::BindingEvaluation::ExtendedBinding *a3)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)a2 + 91))
  {
    uint64_t v6 = (void *)*((void *)this + 21);
    uint64_t v7 = (uint64_t (**)(void, void, void))MEMORY[0x18530F950](*((void *)this + 20));

    if (v7
      && (((uint64_t (**)(void, void, LaunchServices::BindingEvaluation::State *))v7)[2](v7, *(void *)this, a2) & 1) == 0)
    {
      uint64_t v12 = [v6 UTF8String];
      if (v12) {
        uint64_t v13 = (const char *)v12;
      }
      else {
        uint64_t v13 = "caller-supplied no-I/O filter";
      }
      uint64_t v8 = [[_LSBindingForLog alloc] initWithState:this binding:a2];
      LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"%s: %@ FILTERED", v14, v13, v8);
      goto LABEL_15;
    }
    if ((*((unsigned char *)this + 117) & 0x80) != 0)
    {
      uint64_t result = 1;
LABEL_17:
      *((_WORD *)a2 + 45) = result | 0x100;
      return result;
    }
    if (_LSBundleDataGetUnsupportedFormatFlag())
    {
      uint64_t v8 = [[_LSBindingForLog alloc] initWithState:this binding:a2];
      LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"%s: %@ FILTERED", v9, "unsupported format", v8);
LABEL_15:

LABEL_16:
      uint64_t result = 0;
      goto LABEL_17;
    }
    uint64_t v16 = (_DWORD *)*((void *)this + 15);
    uint64_t v15 = (_DWORD *)*((void *)this + 16);
    if (v16 != v15)
    {
      while (*v16 != *(_DWORD *)(*((void *)a2 + 1) + 168))
      {
        if (++v16 == v15)
        {
          uint64_t v16 = (_DWORD *)*((void *)this + 16);
          break;
        }
      }
      if (v15 == v16)
      {
        uint64_t v8 = [[_LSBindingForLog alloc] initWithState:this binding:a2];
        LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"%s: %@ FILTERED", v28, "disallowed bundle class", v8);
        goto LABEL_15;
      }
    }
    long long v17 = *(_OWORD *)((char *)this + 72);
    long long v41 = *(_OWORD *)((char *)this + 56);
    long long v42 = v17;
    v40[0] = v41;
    v40[1] = v17;
    memset(v39, 0, sizeof(v39));
    if (_LSVersionNumberCompare(v40, v39))
    {
      v38[0] = v41;
      v38[1] = v42;
      uint64_t v18 = *((void *)a2 + 1);
      long long v19 = *(_OWORD *)(v18 + 44);
      v37[0] = *(_OWORD *)(v18 + 28);
      v37[1] = v19;
      if (_LSVersionNumberCompare(v38, v37))
      {
        uint64_t v20 = [[_LSBindingForLog alloc] initWithState:this binding:a2];
        LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"%s: %@ FILTERED", v21, "version does not match", v20);

        goto LABEL_16;
      }
    }
    uint64_t v22 = *((void *)a2 + 1);
    int v23 = *(_DWORD *)(v22 + 168);
    if (v23 == 16)
    {
      __int16 v30 = (_DWORD *)*((void *)this + 15);
      uint64_t v29 = (_DWORD *)*((void *)this + 16);
      if (v30 == v29) {
        goto LABEL_40;
      }
      while (*v30 != 14)
      {
        if (++v30 == v29)
        {
          __int16 v30 = (_DWORD *)*((void *)this + 16);
          break;
        }
      }
      if (v29 == v30)
      {
LABEL_40:
        uint64_t v26 = [[_LSBindingForLog alloc] initWithState:this binding:a2];
        LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"%s: %@ FILTERED", v31, "remote placeholder", v26);
        goto LABEL_50;
      }
    }
    else if (v23 == 14)
    {
      long long v25 = (_DWORD *)*((void *)this + 15);
      uint64_t v24 = (_DWORD *)*((void *)this + 16);
      if (v25 == v24) {
        goto LABEL_33;
      }
      while (*v25 != 14)
      {
        if (++v25 == v24)
        {
          long long v25 = (_DWORD *)*((void *)this + 16);
          break;
        }
      }
      if (v24 == v25)
      {
LABEL_33:
        uint64_t v26 = [[_LSBindingForLog alloc] initWithState:this binding:a2];
        LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"%s: %@ FILTERED", v27, "system placeholder", v26);
LABEL_50:

        goto LABEL_16;
      }
    }
    else if (((*(_DWORD *)(v22 + 172) >> 18) & 1) != (*((_DWORD *)this + 29) & 0x400u) >> 10)
    {
      if ((*((_DWORD *)this + 29) & 0x400) != 0) {
        char v33 = "placeholder";
      }
      else {
        char v33 = "not placeholder";
      }
      uint64_t v26 = [[_LSBindingForLog alloc] initWithState:this binding:a2];
      LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"%s: %@ FILTERED", v34, v33, v26);
      goto LABEL_50;
    }
    if ((*((unsigned char *)this + 117) & 0x10) != 0 || (uint64_t v32 = *((void *)a2 + 3)) == 0 || *(_WORD *)(v32 + 12))
    {
      uint64_t result = LaunchServices::BindingEvaluation::checkApplicationIdentifier(this, (uint64_t)a2);
      goto LABEL_17;
    }
    id v35 = [[_LSBindingForLog alloc] initWithState:this binding:a2];
    LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"%s: %@ FILTERED", v36, "handler rank 'none'", v35);

    goto LABEL_16;
  }
  if (*((unsigned char *)a2 + 90)) {
    return 1;
  }
  uint64_t v10 = [[_LSBindingForLog alloc] initWithState:this binding:a2];
  LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"%s: %@ FILTERED", v11, "(no-I/O) previously found to be not-OK", v10);

  return *((unsigned char *)a2 + 90) != 0;
}

void sub_1829680A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSBundleDataGetUnsupportedFormatFlag()
{
  return 0;
}

void LaunchServices::BindingEvaluation::runEvaluator(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  uint64_t BindingMemoryResource = LaunchServices::BindingEvaluation::getBindingMemoryResource((LaunchServices::BindingEvaluation *)a1);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  a3[3] = BindingMemoryResource;
  uint64_t v6 = _LSBindingLog();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    *(void *)&uint8_t buf[4] = a1 + 1;
    _os_log_impl(&dword_182959000, v6, OS_LOG_TYPE_DEBUG, "Running evaluator %p", buf, 0xCu);
  }

  uint64_t v7 = (void **)(a1 + 1);
  LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"Running evaluator %p", v8, a1 + 1);
  if (*((unsigned char *)a1 + 96)) {
    goto LABEL_4;
  }
  uint64_t v14 = (void *)a1[27];
  if (!v14) {
    goto LABEL_4;
  }
  if ((*((unsigned char *)a1 + 117) & 2) != 0)
  {
    BOOL v16 = 0;
    int IsDenylistedForBinding = 0;
  }
  else
  {
    int IsDenylistedForBinding = _UTTypeIsDenylistedForBinding(v14);
    BOOL v16 = a1[27] == 0;
    if (IsDenylistedForBinding) {
      goto LABEL_81;
    }
  }
  if (!v16)
  {
    if ((*((unsigned char *)a1 + 117) & 8) != 0) {
      goto LABEL_4;
    }
    TypeApplication = (const LaunchServices::BindingEvaluation::State *)_UTTypeGetTypeApplication(*(_LSDatabase **)*a1);
    int IsDenylistedForBinding = LaunchServices::BindingEvaluation::conformsTo((void ***)a1, TypeApplication, @"com.apple.application", v70);
  }
LABEL_81:
  if (IsDenylistedForBinding)
  {
    v71 = _LSBindingLog();
    if (os_log_type_enabled(v71, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v72 = a1[27];
      *(_DWORD *)buf = 138412290;
      *(void *)&uint8_t buf[4] = v72;
      _os_log_impl(&dword_182959000, v71, OS_LOG_TYPE_DEBUG, "Denylisted type: %@", buf, 0xCu);
    }

    LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"Denylisted type: %@", v73, a1[27]);
    goto LABEL_22;
  }
LABEL_4:
  *((unsigned char *)a1 + 208) = 1;
  uint64_t v9 = _LSBindingLog();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_182959000, v9, OS_LOG_TYPE_DEBUG, "Adding user preferences", buf, 2u);
  }

  LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"Adding user preferences", v10);
  LaunchServices::BindingEvaluation::addAndEvaluate(a1, (void (*)(LaunchServices::BindingEvaluation *))LaunchServices::BindingEvaluation::addUserPreferences, (uint64_t)a3);
  *((unsigned char *)a1 + 208) = 0;
  if (*((unsigned char *)a1 + 96))
  {
    unint64_t v11 = _LSBindingLog();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_182959000, v11, OS_LOG_TYPE_DEBUG, "Adding and sorting bundles", buf, 2u);
    }

    uint64_t v12 = (void (*)(LaunchServices::BindingEvaluation *))LaunchServices::BindingEvaluation::addBundles;
    LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"Adding and sorting bundles", v13);
  }
  else
  {
    long long v17 = _LSBindingLog();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_182959000, v17, OS_LOG_TYPE_DEBUG, "Adding and sorting claims", buf, 2u);
    }

    LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"Adding and sorting claims", v18);
    LaunchServices::BindingEvaluation::addAndEvaluate(a1, (void (*)(LaunchServices::BindingEvaluation *))LaunchServices::BindingEvaluation::addClaims, (uint64_t)a3);
    long long v19 = _LSBindingLog();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_182959000, v19, OS_LOG_TYPE_DEBUG, "Adding and sorting alternate UTI claims", buf, 2u);
    }

    LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"Adding and sorting alternate UTI claims", v20);
    LaunchServices::BindingEvaluation::addAndEvaluate(a1, (void (*)(LaunchServices::BindingEvaluation *))LaunchServices::BindingEvaluation::addAlternateUTIClaims, (uint64_t)a3);
    long long v21 = _LSBindingLog();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_182959000, v21, OS_LOG_TYPE_DEBUG, "Adding and sorting parent UTI claims", buf, 2u);
    }

    uint64_t v12 = (void (*)(LaunchServices::BindingEvaluation *))LaunchServices::BindingEvaluation::addParentUTIClaims;
    LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"Adding and sorting parent UTI claims", v22);
  }
  LaunchServices::BindingEvaluation::addAndEvaluate(a1, v12, (uint64_t)a3);
LABEL_22:
  if (*a3 == a3[1] && !*((unsigned char *)a1 + 96))
  {
    int v23 = *v7;
    if (*v7)
    {
      uint64_t v24 = (const LaunchServices::BindingEvaluation::State *)_UTTypeGetTypeApplication(*(_LSDatabase **)*a1);
      if (LaunchServices::BindingEvaluation::conformsTo((void ***)a1, v24, @"com.apple.application", v25))
      {
        uint64_t v26 = _LSBindingLog();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412290;
          *(void *)&uint8_t buf[4] = v23;
          _os_log_impl(&dword_182959000, v26, OS_LOG_TYPE_DEBUG, "Binding application %@ to itself", buf, 0xCu);
        }

        LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"Binding application %@ to itself", v27, v23);
        int v75 = 0;
        *(void *)v76 = 0;
        if (!_LSBundleFindWithNode(*a1, v23, &v75, v76))
        {
          long long v83 = 0u;
          long long v84 = 0u;
          long long v81 = 0u;
          long long v82 = 0u;
          *(_DWORD *)&uint8_t buf[4] = 0;
          long long v80 = 0u;
          *(_DWORD *)buf = v75;
          *(void *)&buf[8] = *(void *)v76;
          objc_storeStrong((id *)&v83, v23);
          if (LaunchServices::BindingEvaluation::gIsReasonTrackingEnabled || (*((unsigned char *)a1 + 118) & 2) != 0)
          {
            uint64_t v28 = (void *)*((void *)&v81 + 1);
            *((void *)&v81 + 1) = @"Application bound to self";
          }
          LaunchServices::BindingEvaluation::pushBackBinding((LaunchServices::BindingEvaluation *)a1, a3, (LaunchServices::BindingEvaluation::State *)buf);
        }
      }
    }
  }
  uint64_t v30 = *a3;
  uint64_t v29 = a3[1];
  unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((v29 - *a3) >> 5);
  unint64_t v32 = a1[13];
  if (v31 > v32)
  {
    std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::erase((uint64_t)a3, v30 + 96 * v32, v29);
    uint64_t v30 = *a3;
    uint64_t v29 = a3[1];
    unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((v29 - *a3) >> 5);
  }
  if (v31 >= 2)
  {
    uint64_t v33 = *(void *)(v30 + 24);
    if (v33)
    {
      if ((*(unsigned char *)(v33 + 8) & 2) != 0) {
        std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::erase((uint64_t)a3, v30 + 96, v29);
      }
    }
  }
  if ((*((_DWORD *)a1 + 29) & 0x80200) != 0)
  {
    {
      LaunchServices::BindingEvaluation::runEvaluator(LaunchServices::BindingEvaluation::State &,NSError * {__autoreleasing}*)::options = 77998;
    }
    uint64_t v35 = *a3;
    uint64_t v34 = a3[1];
    if (*a3 != v34)
    {
      do
      {
        if (!*(void *)(v35 + 24))
        {
          *(_DWORD *)buf = 0;
          *(void *)&buf[8] = 0;
          LODWORD(v80) = 0;
          long long v81 = 0uLL;
          *((void *)&v80 + 1) = 0;
          uint64_t v36 = *a1;
          char v37 = (LaunchServices::BindingEvaluator *)(id)a1[2];
          LODWORD(v36) = _LSGetBindingForNodeOrSchemeOrUTI(v36, 0, v37, (LaunchServices::BindingEvaluator *)a1[27], *(_DWORD *)v35, -1, 0, LaunchServices::BindingEvaluation::runEvaluator(LaunchServices::BindingEvaluation::State &,NSError * {__autoreleasing}*)::options, (uint64_t)buf) == 0;

          if (v36)
          {
            char v38 = _LSBindingLog();
            if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v39 = [[_LSBindingForLog alloc] initWithState:a1 binding:v35];
              __int16 v40 = [[_LSBindingForLog alloc] initWithState:a1 binding:buf];
              *(_DWORD *)v76 = 138412546;
              *(void *)&v76[4] = v39;
              __int16 v77 = 2112;
              v78 = v40;
              _os_log_impl(&dword_182959000, v38, OS_LOG_TYPE_DEBUG, "Had claimless binding %@, but found a claim-based binding %@ to substitute", v76, 0x16u);
            }
            long long v41 = [[_LSBindingForLog alloc] initWithState:a1 binding:v35];
            long long v42 = [[_LSBindingForLog alloc] initWithState:a1 binding:buf];
            LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"Had claimless binding %@, but found a claim-based binding %@ to substitute", v43, v41, v42);

            *(_DWORD *)(v35 + 16) = v80;
            *(void *)(v35 + 24) = *((void *)&v80 + 1);
          }
        }
        v35 += 96;
      }
      while (v35 != v34);
    }
  }
  uint64_t v45 = *a3;
  uint64_t v44 = a3[1];
  if ((*((unsigned char *)a1 + 117) & 2) != 0)
  {
    if (v45 == v44) {
      goto LABEL_65;
    }
    while (1)
    {
      uint64_t v46 = *(void *)(v45 + 24);
      if (!v46 || !*(_DWORD *)(v46 + 28)) {
        break;
      }
      v45 += 96;
      if (v45 == v44)
      {
        uint64_t v47 = a3[1];
        goto LABEL_66;
      }
    }
    id v48 = [[_LSBindingForLog alloc] initWithState:a1 binding:v45];
    LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"%s: %@ FILTERED", v49, "no icon (required one)", v48);

    uint64_t v47 = v44;
    if (v45 == v44) {
      goto LABEL_66;
    }
    uint64_t v50 = v45 + 96;
    if (v45 + 96 == v44)
    {
LABEL_65:
      uint64_t v47 = v45;
    }
    else
    {
      uint64_t v47 = v45;
      do
      {
        if ((*((unsigned char *)a1 + 117) & 2) == 0 || (uint64_t v51 = *(void *)(v50 + 24)) != 0 && *(_DWORD *)(v51 + 28))
        {
          long long v52 = *(_OWORD *)(v50 + 16);
          *(_OWORD *)uint64_t v47 = *(_OWORD *)v50;
          *(_OWORD *)(v47 + 16) = v52;
          uint64_t v53 = *(void *)(v50 + 32);
          *(void *)(v50 + 32) = 0;
          v54 = *(void **)(v47 + 32);
          *(void *)(v47 + 32) = v53;

          uint64_t v55 = *(void *)(v50 + 40);
          *(void *)(v50 + 40) = 0;
          BOOL v56 = *(void **)(v47 + 40);
          *(void *)(v47 + 40) = v55;

          *(_WORD *)(v47 + 48) = *(_WORD *)(v50 + 48);
          uint64_t v57 = *(void *)(v50 + 56);
          *(void *)(v50 + 56) = 0;
          long long v58 = *(void **)(v47 + 56);
          *(void *)(v47 + 56) = v57;

          uint64_t v59 = *(void *)(v50 + 64);
          *(void *)(v50 + 64) = 0;
          long long v60 = *(void **)(v47 + 64);
          *(void *)(v47 + 64) = v59;

          *(unsigned char *)(v47 + 72) = *(unsigned char *)(v50 + 72);
          uint64_t v61 = *(void *)(v50 + 80);
          *(void *)(v50 + 80) = 0;
          id v62 = *(void **)(v47 + 80);
          *(void *)(v47 + 80) = v61;

          *(_DWORD *)(v47 + 88) = *(_DWORD *)(v50 + 88);
          v47 += 96;
        }
        else
        {
          v63 = [[_LSBindingForLog alloc] initWithState:a1 binding:v50];
          LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"%s: %@ FILTERED", v64, "no icon (required one)", v63);
        }
        v50 += 96;
      }
      while (v50 != v44);
    }
LABEL_66:
    std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::erase((uint64_t)a3, v47, a3[1]);
    uint64_t v45 = *a3;
    uint64_t v44 = a3[1];
  }
  if (v45 != v44) {
    return;
  }
  int v65 = *((_DWORD *)a1 + 56);
  if (v65 == _UTTypeGetTypeWindowsExecutable(*(_LSDatabase **)*a1))
  {
    if (!a2) {
      return;
    }
    uint64_t v66 = 1744;
    uint64_t v67 = -10661;
    goto LABEL_75;
  }
  v68 = _LSBindingLog();
  if (os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_182959000, v68, OS_LOG_TYPE_DEBUG, "Unable to bind to an executable or application, returning kLSApplicationNotFoundErr.", buf, 2u);
  }

  if (a2)
  {
    uint64_t v66 = 1747;
    uint64_t v67 = -10814;
LABEL_75:
    _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], v67, (uint64_t)"runEvaluator", v66, 0);
    *a2 = (id)objc_claimAutoreleasedReturnValue();
  }
}

void sub_182968B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  LaunchServices::BindingEvaluation::ExtendedBinding::~ExtendedBinding((id *)va);
  std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__destroy_vector::operator()[abi:nn180100]((uint64_t **)va);
  _Unwind_Resume(a1);
}

void LaunchServices::BindingEvaluation::logToFile(LaunchServices::BindingEvaluation *this, NSString *a2, ...)
{
  va_start(va, a2);
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (this && LaunchServices::BindingEvaluation::logFile)
  {
    va_copy(v8, va);
    uint64_t v2 = (void *)[[NSString alloc] initWithFormat:this arguments:va];
    uint64_t v3 = v2;
    if (v2)
    {
      uint64_t v4 = [v2 length];
      uint64_t v6 = 0;
      for (i = v4; i; uint64_t v4 = i)
      {
        size_t __size = 0;
        if ((objc_msgSend(v3, "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:", __ptr, 512, &__size, 4, 0, v6, v4, &v6) & 1) == 0)break; {
        fwrite(__ptr, __size, 1uLL, (FILE *)LaunchServices::BindingEvaluation::logFile);
        }
        fputc(10, (FILE *)LaunchServices::BindingEvaluation::logFile);
      }
    }
  }
}

void sub_182968CE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSBindingLog()
{
  if (_LSBindingLog_once != -1) {
    dispatch_once(&_LSBindingLog_once, &__block_literal_global_40);
  }
  v0 = (void *)_LSBindingLog_result;

  return v0;
}

uint64_t LaunchServices::BindingEvaluation::getBindingMemoryResource(LaunchServices::BindingEvaluation *this)
{
  if (LaunchServices::BindingEvaluation::getLocalAllocatorInfo(void)::onceToken != -1) {
    dispatch_once(&LaunchServices::BindingEvaluation::getLocalAllocatorInfo(void)::onceToken, &__block_literal_global_320);
  }

  return MEMORY[0x1F417EAE0]();
}

LaunchServices::BindingEvaluation::State *LaunchServices::BindingEvaluation::State::State(LaunchServices::BindingEvaluation::State *this, LSContext *a2, const LaunchServices::BindingEvaluator *a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  *(void *)this = a2;
  uint64_t v5 = (void *)((char *)this + 176);
  uint64_t v6 = (LaunchServices::BindingEvaluation::State *)((char *)this + 8);
  uint64_t v7 = LaunchServices::BindingEvaluator::BindingEvaluator((LaunchServices::BindingEvaluation::State *)((char *)this + 8), a3);
  uint64_t BindingMemoryResource = LaunchServices::BindingEvaluation::getBindingMemoryResource(v7);
  void *v5 = 0;
  v5[1] = 0;
  v5[2] = 0;
  *((void *)this + 27) = 0;
  uint64_t v9 = (CFStringRef *)((char *)this + 216);
  *((void *)this + 25) = BindingMemoryResource;
  *((_DWORD *)this + 56) = 0;
  *((void *)this + 29) = 0;
  *((unsigned char *)this + 208) = 0;
  *((unsigned char *)this + 240) = 0;
  *((void *)this + 31) = 0;
  *((_WORD *)this + 128) = 0;
  *((void *)this + 33) = 0;
  uint64_t v10 = (LaunchServices::BindingEvaluator *)*((void *)this + 1);
  if ([(LaunchServices::BindingEvaluator *)v10 isSideFault])
  {
    unint64_t v11 = _LSBindingLog();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      int v23 = v10;
      _os_log_impl(&dword_182959000, v11, OS_LOG_TYPE_DEBUG, "Node %@ was an iCloud Drive fault file. Substituting binding evaluator.", buf, 0xCu);
    }

    LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"Node %@ was an iCloud Drive fault file. Substituting binding evaluator.", v12, v10);
    id v21 = 0;
    uint64_t v13 = +[UTTypeRecord _typeRecordWithContext:a2 forPromiseAtNode:v10 error:&v21];
    id v14 = v21;
    if (v13)
    {
      uint64_t v15 = [v13 identifier];
      BOOL v16 = _LSBindingLog();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412290;
        int v23 = v15;
        _os_log_impl(&dword_182959000, v16, OS_LOG_TYPE_DEBUG, "iCloud Drive fault file looks like it has UTI %@.", buf, 0xCu);
      }

      LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"iCloud Drive fault file looks like it has UTI %@.", v17, v15);
      LaunchServices::BindingEvaluator::CreateWithUTI(v15, *((NSString **)this + 4), (LaunchServices::BindingEvaluator *)buf);
      LaunchServices::BindingEvaluator::setAllPropertiesFromBindingEvaluator((LaunchServices::BindingEvaluator *)buf, v6);
      LaunchServices::BindingEvaluator::operator=((uint64_t)v6, (uint64_t)buf);
      LaunchServices::BindingEvaluator::~BindingEvaluator((id *)buf);
    }
    else
    {
      uint64_t v18 = _LSBindingLog();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412546;
        int v23 = v10;
        __int16 v24 = 2112;
        id v25 = v14;
        _os_log_impl(&dword_182959000, v18, OS_LOG_TYPE_DEBUG, "Node %@ was an iCloud Drive fault file, but we couldn't figure out its type: %@", buf, 0x16u);
      }

      LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"Node %@ was an iCloud Drive fault file, but we couldn't figure out its type: %@", v19, v10, v14);
    }
  }
  LaunchServices::BindingEvaluation::calculateUTI(*(LSContext **)this, (uint64_t)v6, (id *)this + 27, (unint64_t)this + 224, (unint64_t)this + 232);
  if (!*((void *)this + 29) && *v9) {
    *((unsigned char *)this + 240) = UTTypeIsDynamic(*v9) != 0;
  }
  return this;
}

void sub_182969068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);

  std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__destroy_vector::operator()[abi:nn180100]((uint64_t **)va);
  LaunchServices::BindingEvaluator::~BindingEvaluator(v5);
  _Unwind_Resume(a1);
}

LaunchServices::BindingEvaluator *LaunchServices::BindingEvaluator::BindingEvaluator(LaunchServices::BindingEvaluator *this, const LaunchServices::BindingEvaluator *a2)
{
  *(void *)this = *(id *)a2;
  *((void *)this + 1) = *((id *)a2 + 1);
  *((void *)this + 2) = *((id *)a2 + 2);
  *((void *)this + 3) = *((id *)a2 + 3);
  *((void *)this + 4) = *((id *)a2 + 4);
  *((void *)this + 5) = *((id *)a2 + 5);
  long long v4 = *((_OWORD *)a2 + 4);
  *((_OWORD *)this + 3) = *((_OWORD *)a2 + 3);
  *((_OWORD *)this + 4) = v4;
  *((void *)this + 10) = *((id *)a2 + 10);
  uint64_t v5 = *((void *)a2 + 13);
  *(_OWORD *)((char *)this + 88) = *(_OWORD *)((char *)a2 + 88);
  *((void *)this + 13) = v5;
  std::vector<LSBundleClass>::vector((std::vector<unsigned int> *)((char *)this + 112), (const std::vector<unsigned int> *)((char *)a2 + 112));
  *((void *)this + 17) = MEMORY[0x18530F950](*((void *)a2 + 17));
  *((void *)this + 18) = *((id *)a2 + 18);
  *((void *)this + 19) = MEMORY[0x18530F950](*((void *)a2 + 19));
  *((void *)this + 20) = *((id *)a2 + 20);
  return this;
}

void sub_1829691BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

std::vector<unsigned int> *__cdecl std::vector<LSBundleClass>::vector(std::vector<unsigned int> *this, const std::vector<unsigned int> *__x)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  std::vector<unsigned int>::pointer begin = __x->__begin_;
  end = __x->__end_;
  int64_t v5 = (char *)end - (char *)__x->__begin_;
  if (end != __x->__begin_)
  {
    std::vector<unsigned int>::__vallocate[abi:nn180100](this, v5 >> 2);
    std::vector<unsigned int>::pointer v6 = this->__end_;
    memmove(v6, begin, v5);
    this->__end_ = (std::vector<unsigned int>::pointer)((char *)v6 + v5);
  }
  return this;
}

char *std::vector<unsigned int>::__vallocate[abi:nn180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    abort();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(4 * a2);
}

void LaunchServices::BindingEvaluation::calculateUTI(LSContext *a1, uint64_t a2, id *a3, unint64_t a4, unint64_t a5)
{
  int v24 = 0;
  uint64_t v10 = (__CFString *)*(id *)(a2 + 16);
  if (v10)
  {
    if (a4 | a5) {
      active = (void *)_UTGetActiveTypeForCFStringIdentifier(a1->db, v10, &v24);
    }
    else {
      active = 0;
    }
  }
  else
  {
    active = *(void **)a2;
    if (*(void *)a2)
    {
      uint64_t v12 = _LSBindingLog();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_182959000, v12, OS_LOG_TYPE_DEBUG, "Calculating UTI because we don't have it yet", (uint8_t *)&buf, 2u);
      }

      LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"Calculating UTI because we don't have it yet", v13);
      LaunchServices::TypeEvaluator::TypeEvaluator(v23, active);
      if ((*(unsigned char *)(a2 + 108) & 0x10) != 0) {
        LaunchServices::TypeEvaluator::setSniffIfNeeded((LaunchServices::TypeEvaluator *)v23, 1);
      }
      LaunchServices::TypeEvaluator::evaluateType((uint64_t)v23, (void **)&a1->db, 0, (uint64_t)&buf);
      if (v22)
      {
        if (v21)
        {
          id v14 = [active nameWithError:0];
          uint64_t v15 = LaunchServices::TypeEvaluator::Result::getTypeIdentifier(&buf, a1);
          LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"Calculated UTI of file %@ was %@, but sniffed something better: %@", v16, v14, 0, v15);
        }
        active = v19;
        if (v19)
        {
          int v24 = (int)buf;
          long long v17 = (__CFString *)_CSStringCopyCFString();
        }
        else
        {
          long long v17 = (__CFString *)v20;
        }
        uint64_t v10 = v17;
        if (v22) {
      }
        }
      else
      {
        uint64_t v10 = 0;
        active = 0;
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
  }
  if (a3) {
    objc_storeStrong(a3, v10);
  }
  if (a4) {
    *(_DWORD *)a4 = v24;
  }
  if (a5) {
    *(void *)a5 = active;
  }
}

void sub_1829694DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, char a17, void *a18)
{
  if (a17) {
  _Unwind_Resume(a1);
  }
}

uint64_t *LaunchServices::BindingEvaluator::getBestBinding@<X0>(LaunchServices::BindingEvaluator *a1@<X0>, uint64_t *a2@<X8>)
{
  return LaunchServices::BindingEvaluator::getBestBinding(a2, a1);
}

uint64_t LaunchServices::BindingEvaluator::setOptions(uint64_t this, int a2)
{
  *(_DWORD *)(this + 108) = a2;
  return this;
}

uint64_t _LSVersionNumberCompare(void *a1, void *a2)
{
  if (*a1 > *a2) {
    return 1;
  }
  if (*a1 < *a2) {
    return -1;
  }
  unint64_t v3 = a1[1];
  unint64_t v4 = a1[2];
  unint64_t v5 = a2[1];
  unint64_t v6 = a2[2];
  BOOL v7 = v4 > v6;
  if (v4 >= v6) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = -1;
  }
  if (v7) {
    uint64_t v8 = 1;
  }
  BOOL v9 = v3 > v5;
  if (v3 >= v5) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = -1;
  }
  if (v9) {
    return 1;
  }
  else {
    return v10;
  }
}

uint64_t std::optional<LSBinding>::operator=[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding const&,void>(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 48);
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  if (v4)
  {
    objc_storeStrong((id *)(a1 + 32), *(id *)(a2 + 32));
    objc_storeStrong((id *)(a1 + 40), *(id *)(a2 + 40));
  }
  else
  {
    *(void *)(a1 + 32) = *(id *)(a2 + 32);
    *(void *)(a1 + 40) = *(id *)(a2 + 40);
    *(unsigned char *)(a1 + 48) = 1;
  }
  return a1;
}

LaunchServices::BindingEvaluator *std::optional<LaunchServices::BindingEvaluator>::operator=[abi:nn180100]<LaunchServices::BindingEvaluator,void>(LaunchServices::BindingEvaluator *this, const LaunchServices::BindingEvaluator *a2)
{
  if (*((unsigned char *)this + 168))
  {
    LaunchServices::BindingEvaluator::operator=((uint64_t)this, (uint64_t)a2);
  }
  else
  {
    LaunchServices::BindingEvaluator::BindingEvaluator(this, a2);
    *((unsigned char *)this + 168) = 1;
  }
  return this;
}

char *std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  BOOL v7 = result;
  uint64_t v8 = *((void *)result + 2);
  BOOL v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *BOOL v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62) {
      abort();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<unsigned int>::__vallocate[abi:nn180100](v7, v11);
    uint64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    BOOL v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      long long v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  id v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  BOOL v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    BOOL v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    long long v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *uint64_t v12 = &v9[v17];
  return result;
}

uint64_t LaunchServices::BindingEvaluator::setLimit(uint64_t this, unint64_t a2)
{
  uint64_t v2 = 1024;
  if (a2 < 0x400) {
    uint64_t v2 = a2;
  }
  *(void *)(this + 96) = v2;
  return this;
}

char *LaunchServices::BindingEvaluator::setAllowedBundleClasses(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(char **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v3 == (char *)v4)
  {
LABEL_5:
    uint64_t v6 = v4;
  }
  else
  {
    uint64_t v6 = (uint64_t)v3;
    BOOL v7 = v3;
    while (*(_DWORD *)v7)
    {
      v7 += 4;
      v6 += 4;
      if (v7 == (char *)v4) {
        goto LABEL_5;
      }
    }
  }
  uint64_t result = (char *)(a1 + 112);
  if (v4 != v6)
  {
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    unint64_t v9 = 0;
    return std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>(result, v3, v4, v9);
  }
  if (result != (char *)a2)
  {
    unint64_t v9 = (v4 - (uint64_t)v3) >> 2;
    return std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>(result, v3, v4, v9);
  }
  return result;
}

uint64_t LaunchServices::BindingEvaluation::checkApplicationIdentifier(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[11];
  if (v2)
  {
    long long v5 = +[_LSLazyPropertyList lazyPropertyListWithContext:*a1 unit:*(unsigned int *)(*(void *)(a2 + 8) + 140)];
    uint64_t v6 = [v5 _applicationIdentifier];
    BOOL v7 = v6;
    if (v6)
    {
      if ([v6 isEqual:v2])
      {
        uint64_t v8 = 1;
LABEL_9:

        return v8;
      }
      unint64_t v9 = [[_LSBindingForLog alloc] initWithState:a1 binding:a2];
      LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"%s: %@ FILTERED", v11, "app ID", v9);
    }
    else
    {
      unint64_t v9 = [[_LSBindingForLog alloc] initWithState:a1 binding:a2];
      LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"%s: %@ FILTERED", v10, "no app ID", v9);
    }

    uint64_t v8 = 0;
    goto LABEL_9;
  }
  return 1;
}

void sub_1829698F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

pthread_mutex_t *_LSContextDestroy(void **a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;

  if (_LSDatabaseGetNoServerLock::once != -1) {
    dispatch_once(&_LSDatabaseGetNoServerLock::once, &__block_literal_global_112);
  }
  uint64_t result = (pthread_mutex_t *)_LSDatabaseGetNoServerLock::result;
  if (_LSDatabaseGetNoServerLock::result)
  {
    return (pthread_mutex_t *)pthread_mutex_unlock(result);
  }
  return result;
}

uint64_t _LSDatabaseContextGetCurrentContext(LaunchServices::DatabaseContext *a1)
{
  return *(void *)LaunchServices::DatabaseContext::getPerThreadStateReference(a1);
}

void *LaunchServices::DatabaseContext::getPerThreadStateReference(LaunchServices::DatabaseContext *this)
{
  if (LaunchServices::DatabaseContext::getPerThreadStateReference(void)::once != -1) {
    dispatch_once(&LaunchServices::DatabaseContext::getPerThreadStateReference(void)::once, &__block_literal_global_82);
  }
  uint64_t v1 = pthread_getspecific(LaunchServices::DatabaseContext::getPerThreadStateReference(void)::key);
  if (!v1) {
    operator new();
  }
  return v1;
}

void sub_182969C7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182969D6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182969EC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSGetPlugin(uint64_t a1, int a2)
{
  if (a1 && a2) {
    return CSStoreGetUnit();
  }
  else {
    return 0;
  }
}

void *std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18530E9F0](v13, a1);
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v10 = std::locale::use_facet(&v14, MEMORY[0x1E4FBA258]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!std::__pad_and_output[abi:nn180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x18530EA00](v13);
  return a1;
}

void sub_18296A1A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
}

uint64_t std::ostringstream::basic_ostringstream[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA498] + 64;
  *(void *)(a1 + 112) = MEMORY[0x1E4FBA498] + 64;
  uint64_t v3 = *(void *)(MEMORY[0x1E4FBA418] + 16);
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA418] + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  long long v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  uint64_t v6 = MEMORY[0x1E4FBA498] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)a1 = v6;
  *(void *)(a1 + 112) = v2;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_18296A340(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x18530EAC0](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:nn180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      std::string::basic_string[abi:nn180100](__p, v12, __c);
      uint64_t v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_18296A4D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_18296A56C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t _UTTypeGetTypeWindowsExecutable(_LSDatabase *a1)
{
  return _UTTypeGetCachedType(a1, @"com.microsoft.windows-executable", (unsigned int *)a1->schema._cache + 72);
}

void sub_18296A93C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL36_LSPlistLookUpIndexOfCompactedStringP8NSString_block_invoke()
{
  id v5 = [MEMORY[0x1E4F1CA60] dictionaryWithCapacity:256];
  for (unint64_t i = 0; i != 256; ++i)
  {
    uint64_t v1 = _LSPlistLookUpCompactedStringByIndex(i);
    if (v1)
    {
      uint64_t v2 = [NSNumber numberWithUnsignedInteger:i];
      [v5 setObject:v2 forKeyedSubscript:v1];
    }
  }
  uint64_t v3 = [v5 copy];
  uint64_t v4 = (void *)_LSPlistLookUpIndexOfCompactedString(NSString *)::indexes;
  _LSPlistLookUpIndexOfCompactedString(NSString *)::indexes = v3;
}

void sub_18296AEC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__2(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::__hash_table(a1 + 48, (uint64_t *)(a2 + 48));
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

__n128 __Block_byref_object_copy__5(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

__n128 __Block_byref_object_copy__6(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = a2[3].n128_u64[0];
  LaunchServices::BindingEvaluator::BindingEvaluator((LaunchServices::BindingEvaluator *)&a1[3].n128_i8[8], (const LaunchServices::BindingEvaluator *)&a2[3].n128_i8[8]);
  a1[14].n128_u64[0] = 0;
  a1[14].n128_u64[1] = 0;
  a1[15].n128_u64[0] = 0;
  a1[15].n128_u64[1] = a2[15].n128_u64[1];
  a1[14] = a2[14];
  a1[15].n128_u64[0] = a2[15].n128_u64[0];
  a2[14].n128_u64[1] = 0;
  a2[15].n128_u64[0] = 0;
  a2[14].n128_u64[0] = 0;
  a1[16].n128_u8[0] = a2[16].n128_u8[0];
  unint64_t v4 = a2[16].n128_u64[1];
  a2[16].n128_u64[1] = 0;
  a1[16].n128_u64[1] = v4;
  __n128 result = a2[17];
  a1[18].n128_u8[0] = a2[18].n128_u8[0];
  a1[17] = result;
  unint64_t v6 = a2[18].n128_u64[1];
  a2[18].n128_u64[1] = 0;
  a1[18].n128_u64[1] = v6;
  a1[19].n128_u16[0] = a2[19].n128_u16[0];
  unint64_t v7 = a2[19].n128_u64[1];
  a2[19].n128_u64[1] = 0;
  a1[19].n128_u64[1] = v7;
  return result;
}

id __Block_byref_object_copy__7(uint64_t a1, uint64_t a2)
{
  CSStore2::AttributedStringWriter::AttributedStringWriter((CSStore2::AttributedStringWriter *)(a1 + 48), (const CSStore2::AttributedStringWriter *)(a2 + 48));
  *(void *)(a1 + 48) = &unk_1ECB17698;
  id result = *(id *)(a2 + 304);
  *(void *)(a1 + 304) = result;
  return result;
}

uint64_t __Block_byref_object_copy__8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

__n128 __Block_byref_object_copy__9(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

uint64_t __Block_byref_object_copy__10(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void *__Block_byref_object_copy__11(uint64_t a1, uint64_t a2)
{
  return memcpy((void *)(a1 + 48), (const void *)(a2 + 48), 0x230uLL);
}

__n128 __Block_byref_object_copy__12(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

uint64_t __Block_byref_object_copy__13(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__14(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__15(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

__n128 __Block_byref_object_copy__16(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

uint64_t __Block_byref_object_copy__17(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

__n128 __Block_byref_object_copy__18(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

uint64_t __Block_byref_object_copy__19(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__20(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__21(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__22(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__23(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__24(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__25(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__26(uint64_t result, void *a2)
{
  uint64_t v2 = a2[6];
  a2[6] = 0;
  *(void *)(result + 48) = v2;
  *(void *)(result + 56) = a2[7];
  a2[7] = 0;
  uint64_t v5 = a2[8];
  uint64_t v3 = a2 + 8;
  uint64_t v4 = v5;
  *(void *)(result + 64) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 72) = v6;
  *(_DWORD *)(result + 80) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 64;
    *uint64_t v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t __Block_byref_object_copy__27(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__28(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

id __Block_byref_object_copy__29(uint64_t a1, uint64_t a2)
{
  CSStore2::AttributedStringWriter::AttributedStringWriter((CSStore2::AttributedStringWriter *)(a1 + 48), (const CSStore2::AttributedStringWriter *)(a2 + 48));
  *(void *)(a1 + 48) = &unk_1ECB17698;
  id result = *(id *)(a2 + 304);
  *(void *)(a1 + 304) = result;
  return result;
}

uint64_t __Block_byref_object_copy__30(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__31(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

__n128 __Block_byref_object_copy__32(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

uint64_t __Block_byref_object_copy__33(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(result + 52) = *(unsigned char *)(a2 + 52);
  *(_DWORD *)(result + 48) = v2;
  return result;
}

uint64_t __Block_byref_object_copy__34(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(unsigned char *)(result + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(result + 48) = v2;
  return result;
}

uint64_t __Block_byref_object_copy__35(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__36(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(result + 48) = v2;
  return result;
}

uint64_t __Block_byref_object_copy__37(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__38(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__39(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(result + 48) = v2;
  return result;
}

uint64_t __Block_byref_object_copy__40(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__41(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(result + 48) = v2;
  return result;
}

__n128 __Block_byref_object_copy__42(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

uint64_t __Block_byref_object_copy__43(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__44(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__45(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__46(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__47(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__48(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__49(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__50(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__51(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__52(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__53(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__54(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::__hash_table(a1 + 48, (uint64_t *)(a2 + 48));
}

uint64_t __Block_byref_object_copy__55(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__56(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_18296B558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t _LSExtensionPointFindWithStringID(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, void *a6)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v19 = 0;
  id v20 = &v19;
  uint64_t v21 = 0x2020000000;
  int v22 = 0;
  uint64_t v15 = 0;
  BOOL v16 = &v15;
  uint64_t v17 = 0x2020000000;
  uint64_t v18 = 0;
  id v8 = a1;
  _LSDatabaseEnumeratingBindingMap();
  int v9 = *((_DWORD *)v20 + 6);
  if (!v9)
  {
    uint64_t v10 = (void *)_CSStringCopyCFString();
    uint64_t v11 = _LSDefaultLog();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 138412290;
      int v24 = v10;
      _os_log_impl(&dword_182959000, v11, OS_LOG_TYPE_DEFAULT, "Extension point %@ not in the binding map, scanning all extension points", buf, 0xCu);
    }

    _CSStoreEnumerateUnits();
    int v9 = *((_DWORD *)v20 + 6);
    if (!v9) {
      goto LABEL_10;
    }
  }
  uint64_t v12 = v16[3];
  if (v12)
  {
    if (a5) {
      *a5 = v9;
    }
    uint64_t v13 = 0;
    if (a6) {
      *a6 = v12;
    }
  }
  else
  {
LABEL_10:
    uint64_t v13 = 4294956482;
  }

  _Block_object_dispose(&v15, 8);
  _Block_object_dispose(&v19, 8);

  return v13;
}

void sub_18296B870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a29, 8);

  _Unwind_Resume(a1);
}

uint64_t ___ZL32_UTTypeSearchConformsToTypesCoreP14UTTypeSearchPB_block_invoke(uint64_t a1, uint64_t a2, int a3, unsigned char *a4)
{
  *(void *)(*(void *)(a1 + 48) + 64) = _UTGetActiveTypeForIdentifier(*(void **)(a1 + 32), a3, (_DWORD *)(*(void *)(a1 + 48) + 56));
  uint64_t result = *(void *)(a1 + 48);
  if (*(void *)(result + 64))
  {
    uint64_t result = _UTTypeSearchConformsToTypesCore();
    if (result)
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
      *a4 = 1;
    }
  }
  return result;
}

uint64_t _UTGetActiveTypeForIdentifier(void *a1, int a2, _DWORD *a3)
{
  id v5 = a1;
  uint64_t v6 = v5;
  uint64_t v22 = 0;
  int v23 = &v22;
  uint64_t v24 = 0x2020000000;
  uint64_t v25 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = &v18;
  uint64_t v20 = 0x2020000000;
  int v21 = 0;
  if (v5 && a2)
  {
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = ___UTGetActiveTypeForIdentifier_block_invoke;
    v13[3] = &unk_1E5231628;
    int v17 = a2;
    uint64_t v15 = &v18;
    BOOL v16 = &v22;
    id v7 = v5;
    id v14 = v7;
    _LSSchemaCacheRead((uint64_t)v6 + 16, v13);
    if (!*((_DWORD *)v19 + 6) || !v23[3])
    {
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 3221225472;
      v12[2] = ___UTGetActiveTypeForIdentifier_block_invoke_2;
      v12[3] = &unk_1E5231650;
      v12[4] = &v18;
      v12[5] = &v22;
      _UTEnumerateTypesForIdentifier(v7, a2, v12);
      if (*((_DWORD *)v19 + 6))
      {
        v10[0] = MEMORY[0x1E4F143A8];
        v10[1] = 3221225472;
        v10[2] = ___UTGetActiveTypeForIdentifier_block_invoke_3;
        v10[3] = &unk_1E5231678;
        int v11 = a2;
        v10[4] = &v18;
        _LSSchemaCacheWrite((uint64_t)v7 + 16, v10);
      }
    }
  }
  if (a3) {
    *a3 = *((_DWORD *)v19 + 6);
  }
  uint64_t v8 = v23[3];
  _Block_object_dispose(&v18, 8);
  _Block_object_dispose(&v22, 8);

  return v8;
}

void sub_18296BB38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  _Block_object_dispose((const void *)(v26 - 144), 8);
  _Block_object_dispose((const void *)(v26 - 112), 8);

  _Unwind_Resume(a1);
}

void _LSSchemaCacheRead(uint64_t a1, void *a2)
{
  uint64_t v4 = a2;
  if (a1)
  {
    if (v4)
    {
      uint64_t v3 = *(pthread_rwlock_t **)(a1 + 1616);
      if (v3)
      {
        pthread_rwlock_rdlock(v3);
        v4[2](v4, v3);
        pthread_rwlock_unlock(v3);
      }
    }
  }
}

void sub_18296BBE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t _UTTypeSearchConformsToTypesCore(uint64_t a1)
{
  uint64_t v2 = (unsigned int *)(a1 + 56);
  if (std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::find<unsigned int>((void *)a1, (unsigned int *)(a1 + 56)))
  {
    return 0;
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int &>(a1, v2, v2);
  *(void *)(a1 + 72) = *(unsigned int *)(a1 + 88);
  if ((*(unsigned int (**)(uint64_t))(a1 + 80))(a1 + 40)) {
    return 1;
  }
  if (!*(_DWORD *)(*(void *)(a1 + 64) + 84) || *(void *)(a1 + 96) <= (uint64_t)*(unsigned int *)(a1 + 88)) {
    return 0;
  }
  id v5 = (unsigned int *)*(id *)(a1 + 40);
  int v6 = *(_DWORD *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  ++*(_DWORD *)(a1 + 88);
  uint64_t v8 = v5[58];
  uint64_t v15 = 0;
  BOOL v16 = &v15;
  uint64_t v17 = 0x2020000000;
  char v18 = 0;
  uint64_t v9 = *(unsigned int *)(v7 + 84);
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = ___ZL32_UTTypeSearchConformsToTypesCoreP14UTTypeSearchPB_block_invoke;
  v11[3] = &unk_1E522C0B8;
  uint64_t v14 = a1;
  uint64_t v10 = v5;
  uint64_t v12 = v10;
  uint64_t v13 = &v15;
  _LSBindingListEnumerateEntryWithClass(v10, v9, v8, v11);
  if (*((unsigned char *)v16 + 24))
  {

    _Block_object_dispose(&v15, 8);
    uint64_t v3 = 1;
  }
  else
  {
    --*(_DWORD *)(a1 + 88);
    *(_DWORD *)(a1 + 56) = v6;
    *(void *)(a1 + 64) = v7;

    _Block_object_dispose(&v15, 8);
    uint64_t v3 = 0;
  }

  return v3;
}

void sub_18296BE34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__swap_out_circular_buffer(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 3);
  std::__uninitialized_allocator_move_if_noexcept[abi:nn180100]<std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>,std::reverse_iterator<LaunchServices::BindingEvaluation::ExtendedBinding*>,std::reverse_iterator<LaunchServices::BindingEvaluation::ExtendedBinding*>,std::reverse_iterator<LaunchServices::BindingEvaluation::ExtendedBinding*>>((uint64_t)(a1 + 3), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_copy_impl[abi:nn180100]<std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>,std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>>,std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>>,LaunchServices::BindingEvaluation::ExtendedBinding*>(v7, a3, a1[1], a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__push_back_slow_path<LaunchServices::BindingEvaluation::ExtendedBinding const&>(uint64_t *a1, uint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x2AAAAAAAAAAAAAALL) {
    abort();
  }
  uint64_t v6 = (uint64_t)(a1 + 3);
  if (0x5555555555555556 * ((a1[2] - *a1) >> 5) > v3) {
    unint64_t v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 5);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 5) >= 0x155555555555555) {
    unint64_t v7 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v7 = v3;
  }
  uint64_t v15 = a1 + 3;
  if (v7) {
    uint64_t v8 = std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>::allocate[abi:nn180100]((uint64_t)(a1 + 3), v7);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v11 = v8;
  uint64_t v12 = v8 + 96 * v2;
  unint64_t v14 = v8 + 96 * v7;
  std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>::construct[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding,LaunchServices::BindingEvaluation::ExtendedBinding const&>(v6, v12, a2);
  uint64_t v13 = v12 + 96;
  std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__swap_out_circular_buffer(a1, &v11);
  uint64_t v9 = a1[1];
  std::__split_buffer<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding> &>::~__split_buffer(&v11);
  return v9;
}

void sub_18296C00C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding> &>::~__split_buffer((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *LaunchServices::BindingEvaluation::addAndEvaluate(uint64_t *result, void (*a2)(LaunchServices::BindingEvaluation *), uint64_t a3)
{
  uint64_t v167 = *MEMORY[0x1E4F143B8];
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 5) < result[13])
  {
    v153 = (LaunchServices::BindingEvaluation *)result;
    uint64_t v4 = result[22];
    v142 = result + 22;
    uint64_t v5 = result[23];
    if (v5 != v4)
    {
      uint64_t v6 = (uint64_t)(result + 25);
      do
      {
        v5 -= 96;
        std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>::destroy[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding>(v6, v5);
      }
      while (v5 != v4);
    }
    *((void *)v153 + 23) = v4;
    a2(v153);
    unint64_t v7 = v142;
    LaunchServices::BindingEvaluation::ensureBundlePointersInBindings(v142);
    if (!*((unsigned char *)v153 + 208))
    {
      uint64_t v8 = (LaunchServices::BindingEvaluation::State *)*((void *)v153 + 23);
      v152 = (LaunchServices::BindingEvaluation::State *)*((void *)v153 + 22);
      unint64_t v140 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v152) >> 5);
      if (*((void *)v153 + 13) >= v140) {
        uint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v152) >> 5);
      }
      else {
        uint64_t v9 = *((void *)v153 + 13);
      }
      v154 = v153;
      if (v9)
      {
        if (v9 >= 2)
        {
          unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
          unint64_t v11 = v10 + 1;
          uint64_t v12 = (long long *)((char *)v152 + 96 * v10);
          do
          {
            std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,LaunchServices::BindingEvaluation::sort(LaunchServices::BindingEvaluation::State &)::$_0 &,std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding *>>((uint64_t)v152, &v154, v9, v12);
            v12 -= 6;
            --v11;
          }
          while (v11);
        }
        v151 = (LaunchServices::BindingEvaluation::State *)((char *)v152 + 96 * v9);
        if (v151 != v8)
        {
          for (unint64_t i = (LaunchServices::BindingEvaluation::State *)((char *)v152 + 96 * v9);
                i != v8;
                unint64_t i = (LaunchServices::BindingEvaluation::State *)((char *)i + 96))
          {
            unint64_t v14 = (void *)MEMORY[0x18530F680]();
            int v16 = LaunchServices::BindingEvaluation::compareBindings(v153, i, v152, v15);
            if (v16 == -1)
            {
              uint64_t v19 = v153;
              if (!LaunchServices::BindingEvaluation::isBindingOK(v153, i, v17)) {
                goto LABEL_23;
              }
            }
            else
            {
              if (v16 == 1)
              {
                char isBindingOK = LaunchServices::BindingEvaluation::isBindingOK(v153, i, v17);
                if ((isBindingOK & 1) == 0) {
                  continue;
                }
LABEL_21:
                std::swap[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding>((long long *)i, (long long *)v152);
                std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,LaunchServices::BindingEvaluation::sort(LaunchServices::BindingEvaluation::State &)::$_0 &,std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding *>>((uint64_t)v152, &v154, v9, (long long *)v152);
                continue;
              }
              uint64_t v19 = v153;
              if ((LaunchServices::BindingEvaluation::isBindingOK(v153, i, v17) & 1) == 0)
              {
LABEL_23:
                continue;
              }
            }
            char v21 = LaunchServices::BindingEvaluation::isBindingOK(v19, v152, v20);
            if ((v21 & 1) == 0) {
              goto LABEL_21;
            }
          }
        }
        if (v9 >= 2)
        {
          int64_t v22 = 96 * v9 / 0x60uLL;
          do
          {
            uint64_t v23 = 0;
            uint64_t v24 = v151;
            uint64_t v25 = (uint64_t)v152;
            long long v155 = *(_OWORD *)v152;
            long long v156 = *((_OWORD *)v152 + 1);
            uint64_t v146 = *((void *)v152 + 4);
            uint64_t v147 = *((void *)v152 + 5);
            *((_OWORD *)v152 + 2) = 0u;
            __int16 v26 = *((_WORD *)v152 + 24);
            uint64_t v148 = *((void *)v152 + 7);
            uint64_t v149 = *((void *)v152 + 8);
            *(_OWORD *)((char *)v152 + 56) = 0u;
            char v144 = *((unsigned char *)v152 + 72);
            __int16 v145 = v26;
            uint64_t v150 = *((void *)v152 + 10);
            *((void *)v152 + 10) = 0;
            int v143 = *((_DWORD *)v152 + 22);
            do
            {
              uint64_t v27 = v25 + 96 * v23 + 96;
              uint64_t v28 = 2 * v23;
              uint64_t v23 = (2 * v23) | 1;
              uint64_t v29 = v28 + 2;
              if (v28 + 2 >= v22) {
                goto LABEL_39;
              }
              uint64_t v30 = (void *)MEMORY[0x18530F680]();
              int v32 = LaunchServices::BindingEvaluation::compareBindings(v154, (LaunchServices::BindingEvaluation::State *)v27, (const LaunchServices::BindingEvaluation::ExtendedBinding *)(v27 + 96), v31);
              if (v32 == -1)
              {
                if (LaunchServices::BindingEvaluation::isBindingOK(v154, (LaunchServices::BindingEvaluation::State *)v27, v33))goto LABEL_36; {
LABEL_38:
                }
                goto LABEL_39;
              }
              if (v32 != 1)
              {
                if (LaunchServices::BindingEvaluation::isBindingOK(v154, (LaunchServices::BindingEvaluation::State *)v27, v33))
                {
LABEL_36:
                  char v36 = LaunchServices::BindingEvaluation::isBindingOK(v154, (LaunchServices::BindingEvaluation::State *)(v27 + 96), v35);
                  if (v36) {
                    goto LABEL_39;
                  }
LABEL_37:
                  v27 += 96;
                  uint64_t v23 = v29;
                  goto LABEL_39;
                }
                goto LABEL_38;
              }
              int v34 = LaunchServices::BindingEvaluation::isBindingOK(v154, (LaunchServices::BindingEvaluation::State *)v27, v33);
              if (v34) {
                goto LABEL_37;
              }
LABEL_39:
              long long v37 = *(_OWORD *)(v27 + 16);
              *(_OWORD *)uint64_t v25 = *(_OWORD *)v27;
              *(_OWORD *)(v25 + 16) = v37;
              uint64_t v38 = *(void *)(v27 + 32);
              *(void *)(v27 + 32) = 0;
              uint64_t v39 = *(void **)(v25 + 32);
              *(void *)(v25 + 32) = v38;

              uint64_t v40 = *(void *)(v27 + 40);
              *(void *)(v27 + 40) = 0;
              long long v41 = *(void **)(v25 + 40);
              *(void *)(v25 + 40) = v40;

              *(_WORD *)(v25 + 48) = *(_WORD *)(v27 + 48);
              uint64_t v42 = *(void *)(v27 + 56);
              *(void *)(v27 + 56) = 0;
              uint64_t v43 = *(void **)(v25 + 56);
              *(void *)(v25 + 56) = v42;

              uint64_t v44 = *(void *)(v27 + 64);
              *(void *)(v27 + 64) = 0;
              uint64_t v45 = *(void **)(v25 + 64);
              *(void *)(v25 + 64) = v44;

              *(unsigned char *)(v25 + 72) = *(unsigned char *)(v27 + 72);
              uint64_t v46 = *(void *)(v27 + 80);
              *(void *)(v27 + 80) = 0;
              uint64_t v47 = *(void **)(v25 + 80);
              *(void *)(v25 + 80) = v46;

              *(_DWORD *)(v25 + 88) = *(_DWORD *)(v27 + 88);
              uint64_t v25 = v27;
            }
            while (v23 <= (uint64_t)((unint64_t)(v22 - 2) >> 1));
            v151 = (LaunchServices::BindingEvaluation::State *)((char *)v151 - 96);
            if ((LaunchServices::BindingEvaluation::State *)v27 == (LaunchServices::BindingEvaluation::State *)((char *)v24 - 96))
            {
              long long v72 = v156;
              *(_OWORD *)uint64_t v27 = v155;
              *(_OWORD *)(v27 + 16) = v72;
              v73 = *(void **)(v27 + 32);
              *(void *)(v27 + 32) = v146;

              v74 = *(void **)(v27 + 40);
              *(void *)(v27 + 40) = v147;

              *(_WORD *)(v27 + 48) = v145;
              int v75 = *(void **)(v27 + 56);
              *(void *)(v27 + 56) = v148;

              v76 = *(void **)(v27 + 64);
              *(void *)(v27 + 64) = v149;

              *(unsigned char *)(v27 + 72) = v144;
              __int16 v77 = *(void **)(v27 + 80);
              *(void *)(v27 + 80) = v150;

              *(_DWORD *)(v27 + 88) = v143;
              continue;
            }
            long long v48 = *((_OWORD *)v24 - 5);
            *(_OWORD *)uint64_t v27 = *((_OWORD *)v24 - 6);
            *(_OWORD *)(v27 + 16) = v48;
            uint64_t v49 = *((void *)v24 - 8);
            *((void *)v24 - 8) = 0;
            uint64_t v50 = *(void **)(v27 + 32);
            *(void *)(v27 + 32) = v49;

            uint64_t v51 = *((void *)v24 - 7);
            *((void *)v24 - 7) = 0;
            long long v52 = *(void **)(v27 + 40);
            *(void *)(v27 + 40) = v51;

            *(_WORD *)(v27 + 48) = *((_WORD *)v24 - 24);
            uint64_t v53 = *((void *)v24 - 5);
            *((void *)v24 - 5) = 0;
            v54 = *(void **)(v27 + 56);
            *(void *)(v27 + 56) = v53;

            uint64_t v55 = *((void *)v24 - 4);
            *((void *)v24 - 4) = 0;
            BOOL v56 = *(void **)(v27 + 64);
            *(void *)(v27 + 64) = v55;

            uint64_t v57 = *((void *)v24 - 2);
            *(unsigned char *)(v27 + 72) = *((unsigned char *)v24 - 24);
            *((void *)v24 - 2) = 0;
            long long v58 = *(void **)(v27 + 80);
            *(void *)(v27 + 80) = v57;

            *(_DWORD *)(v27 + 88) = *((_DWORD *)v24 - 2);
            *(_OWORD *)v151 = v155;
            *((_OWORD *)v151 + 1) = v156;
            uint64_t v59 = (void *)*((void *)v24 - 8);
            *((void *)v24 - 8) = v146;

            long long v60 = (void *)*((void *)v24 - 7);
            *((void *)v24 - 7) = v147;

            *((_WORD *)v24 - 24) = v145;
            uint64_t v61 = (void *)*((void *)v24 - 5);
            *((void *)v24 - 5) = v148;

            id v62 = (void *)*((void *)v24 - 4);
            *((void *)v24 - 4) = v149;

            *((unsigned char *)v24 - 24) = v144;
            v63 = (void *)*((void *)v24 - 2);
            *((void *)v24 - 2) = v150;

            *((_DWORD *)v24 - 2) = v143;
            uint64_t v64 = v27 + 96 - (void)v152;
            if (v64 < 97) {
              continue;
            }
            int v65 = (void *)MEMORY[0x18530F680]();
            unint64_t v66 = (v64 / 0x60uLL - 2) >> 1;
            uint64_t v67 = (LaunchServices::BindingEvaluation::State *)((char *)v152 + 96 * v66);
            int v69 = LaunchServices::BindingEvaluation::compareBindings(v154, v67, (const LaunchServices::BindingEvaluation::ExtendedBinding *)v27, v68);
            if (v69 == -1)
            {
              v78 = v154;
              if (LaunchServices::BindingEvaluation::isBindingOK(v154, v67, v70))
              {
LABEL_50:
                char v80 = LaunchServices::BindingEvaluation::isBindingOK(v78, (LaunchServices::BindingEvaluation::State *)v27, v79);
                if (v80) {
                  continue;
                }
LABEL_51:
                long long v81 = *(_OWORD *)(v27 + 16);
                *(_OWORD *)id buf = *(_OWORD *)v27;
                long long v160 = v81;
                long long v82 = *(_OWORD *)(v27 + 32);
                *(_OWORD *)(v27 + 32) = 0u;
                long long v161 = v82;
                __int16 v162 = *(_WORD *)(v27 + 48);
                long long v83 = *(_OWORD *)(v27 + 56);
                *(_OWORD *)(v27 + 56) = 0u;
                long long v163 = v83;
                char v164 = *(unsigned char *)(v27 + 72);
                long long v84 = *(void **)(v27 + 80);
                *(void *)(v27 + 80) = 0;
                id v165 = v84;
                int v166 = *(_DWORD *)(v27 + 88);
                uint64_t v85 = v154;
                while (1)
                {
                  uint64_t v86 = (uint64_t)v67;
                  long long v87 = *((_OWORD *)v67 + 1);
                  *(_OWORD *)uint64_t v27 = *(_OWORD *)v67;
                  *(_OWORD *)(v27 + 16) = v87;
                  uint64_t v88 = *((void *)v67 + 4);
                  *((void *)v67 + 4) = 0;
                  v89 = *(void **)(v27 + 32);
                  *(void *)(v27 + 32) = v88;

                  uint64_t v90 = *((void *)v67 + 5);
                  *((void *)v67 + 5) = 0;
                  v91 = *(void **)(v27 + 40);
                  *(void *)(v27 + 40) = v90;

                  *(_WORD *)(v27 + 48) = *((_WORD *)v67 + 24);
                  uint64_t v92 = *((void *)v67 + 7);
                  *((void *)v67 + 7) = 0;
                  v93 = *(void **)(v27 + 56);
                  *(void *)(v27 + 56) = v92;

                  uint64_t v94 = *((void *)v67 + 8);
                  *((void *)v67 + 8) = 0;
                  v95 = *(void **)(v27 + 64);
                  *(void *)(v27 + 64) = v94;

                  *(unsigned char *)(v27 + 72) = *((unsigned char *)v67 + 72);
                  uint64_t v96 = *((void *)v67 + 10);
                  *((void *)v67 + 10) = 0;
                  v97 = *(void **)(v27 + 80);
                  *(void *)(v27 + 80) = v96;

                  *(_DWORD *)(v27 + 88) = *((_DWORD *)v67 + 22);
                  if (!v66)
                  {
LABEL_64:
                    long long v105 = v160;
                    *(_OWORD *)uint64_t v86 = *(_OWORD *)buf;
                    *(_OWORD *)(v86 + 16) = v105;
                    uint64_t v106 = v161;
                    *(void *)&long long v161 = 0;
                    v107 = *(void **)(v86 + 32);
                    *(void *)(v86 + 32) = v106;

                    uint64_t v108 = *((void *)&v161 + 1);
                    *((void *)&v161 + 1) = 0;
                    v109 = *(void **)(v86 + 40);
                    *(void *)(v86 + 40) = v108;

                    *(_WORD *)(v86 + 48) = v162;
                    uint64_t v110 = v163;
                    *(void *)&long long v163 = 0;
                    v111 = *(void **)(v86 + 56);
                    *(void *)(v86 + 56) = v110;

                    uint64_t v112 = *((void *)&v163 + 1);
                    *((void *)&v163 + 1) = 0;
                    v113 = *(void **)(v86 + 64);
                    *(void *)(v86 + 64) = v112;

                    *(unsigned char *)(v86 + 72) = v164;
                    id v114 = v165;
                    id v165 = 0;
                    v115 = *(void **)(v86 + 80);
                    *(void *)(v86 + 80) = v114;

                    *(_DWORD *)(v86 + 88) = v166;
                    goto LABEL_65;
                  }
                  v98 = (void *)MEMORY[0x18530F680]();
                  unint64_t v66 = (v66 - 1) >> 1;
                  uint64_t v67 = (LaunchServices::BindingEvaluation::State *)((char *)v152 + 96 * v66);
                  int v100 = LaunchServices::BindingEvaluation::compareBindings(v85, v67, (const LaunchServices::BindingEvaluation::ExtendedBinding *)buf, v99);
                  if (v100 == -1)
                  {
                    if (!LaunchServices::BindingEvaluation::isBindingOK(v85, v67, v101)) {
                      goto LABEL_63;
                    }
                  }
                  else
                  {
                    if (v100 == 1)
                    {
                      char v102 = LaunchServices::BindingEvaluation::isBindingOK(v85, v67, v101);
                      uint64_t v27 = v86;
                      if ((v102 & 1) == 0) {
                        goto LABEL_64;
                      }
                      continue;
                    }
                    if (!LaunchServices::BindingEvaluation::isBindingOK(v85, v67, v101))
                    {
LABEL_63:
                      goto LABEL_64;
                    }
                  }
                  char v104 = LaunchServices::BindingEvaluation::isBindingOK(v85, (LaunchServices::BindingEvaluation::State *)buf, v103);
                  uint64_t v27 = v86;
                  if (v104) {
                    goto LABEL_64;
                  }
                }
              }
LABEL_62:
              continue;
            }
            if (v69 != 1)
            {
              v78 = v154;
              if (LaunchServices::BindingEvaluation::isBindingOK(v154, v67, v70)) {
                goto LABEL_50;
              }
              goto LABEL_62;
            }
            int v71 = LaunchServices::BindingEvaluation::isBindingOK(v154, v67, v70);
            if (v71) {
              goto LABEL_51;
            }
LABEL_65:
            ;
          }
          while (v22-- > 2);
        }
      }
      unint64_t v117 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v153 + 23) - *((void *)v153 + 22)) >> 5);
      unint64_t v7 = v142;
      if (v117 != v140)
      {
        objc_msgSend(NSString, "stringWithFormat:", @"binding count unexpectedly changed from %zu to %zu; please file a bug and relate to rdar://126722263",
          v140,
          v117);
        v139 = (NSString *)objc_claimAutoreleasedReturnValue();
        _LSSetCrashMessage(v139);
        abort();
      }
    }
    LaunchServices::BindingEvaluation::ensureBundlePointersInBindings(v7);
    v118 = _LSBindingLog();
    if (os_log_type_enabled(v118, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v119 = *((void *)v153 + 13);
      *(_DWORD *)id buf = 134217984;
      *(void *)&uint8_t buf[4] = v119;
      _os_log_impl(&dword_182959000, v118, OS_LOG_TYPE_DEBUG, "Truncating a list of bindings to max %lu known-good ones.", buf, 0xCu);
    }

    LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"Truncating a list of bindings to max %lu known-good ones.", v120, *((void *)v153 + 13));
    uint64_t v121 = *(void *)(a3 + 24);
    long long v155 = 0uLL;
    *(void *)&long long v156 = 0;
    *((void *)&v156 + 1) = v121;
    std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::reserve((uint64_t *)&v155, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v153 + 23) - *((void *)v153 + 22)) >> 5));
    size_t v122 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 5);
    v154 = *(LaunchServices::BindingEvaluation **)(a3 + 24);
    std::unordered_set<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::pmr::polymorphic_allocator<unsigned int>>::unordered_set((unint64_t)buf, v122, (uint64_t)&v158, (uint64_t)&v157, (uint64_t *)&v154);
    v124 = *(unsigned int **)a3;
    v123 = *(unsigned int **)(a3 + 8);
    while (v124 != v123)
    {
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::pmr::polymorphic_allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((unint64_t)buf, v124, v124);
      v124 += 24;
    }
    v126 = (unsigned int *)*((void *)v153 + 22);
    for (uint64_t j = (unsigned int *)*((void *)v153 + 23); v126 != j; v126 += 24)
    {
      if (!std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::find<unsigned int>(buf, v126))
      {
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::pmr::polymorphic_allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((unint64_t)buf, v126, v126);
        uint64_t v127 = *((void *)&v155 + 1);
        if (*((void *)&v155 + 1) >= (unint64_t)v156)
        {
          uint64_t v128 = std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__push_back_slow_path<LaunchServices::BindingEvaluation::ExtendedBinding const&>((uint64_t *)&v155, (uint64_t)v126);
        }
        else
        {
          std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>::construct[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding,LaunchServices::BindingEvaluation::ExtendedBinding const&>((uint64_t)&v156 + 8, *((uint64_t *)&v155 + 1), (uint64_t)v126);
          uint64_t v128 = v127 + 96;
        }
        *((void *)&v155 + 1) = v128;
      }
    }
    std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__move_assign(v142, (uint64_t *)&v155);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::pmr::polymorphic_allocator<unsigned int>>::~__hash_table((uint64_t)buf);
    *(void *)id buf = &v155;
    std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__destroy_vector::operator()[abi:nn180100]((uint64_t **)buf);
    uint64_t v129 = *(void *)(a3 + 24);
    memset(buf, 0, sizeof(buf));
    *(void *)&long long v160 = 0;
    *((void *)&v160 + 1) = v129;
    std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::reserve((uint64_t *)buf, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v153 + 23) - *((void *)v153 + 22)) >> 5));
    v131 = v153;
    v133 = (LaunchServices::BindingEvaluation::State *)*((void *)v153 + 22);
    v132 = (LaunchServices::BindingEvaluation::State *)*((void *)v153 + 23);
    if (v133 != v132)
    {
      do
      {
        if (LaunchServices::BindingEvaluation::isBindingOK(v131, v133, v130)) {
          LaunchServices::BindingEvaluation::pushBackBinding(v153, (uint64_t *)buf, v133);
        }
        v131 = v153;
        v133 = (LaunchServices::BindingEvaluation::State *)((char *)v133 + 96);
      }
      while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 5) < *((void *)v153 + 13)
           && v133 != v132);
    }
    std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__move_assign(v142, (uint64_t *)buf);
    *(void *)&long long v155 = buf;
    std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__destroy_vector::operator()[abi:nn180100]((uint64_t **)&v155);
    LaunchServices::BindingEvaluation::ensureBundlePointersInBindings(v142);
    if (!*((unsigned char *)v153 + 208)
      && (LaunchServices::BindingEvaluation::gIsReasonTrackingEnabled || (*((unsigned char *)v153 + 118) & 2) != 0))
    {
      unint64_t v136 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v153 + 23) - *((void *)v153 + 22)) >> 5);
      if (v136 >= 2)
      {
        unint64_t v137 = v136 - 1;
        uint64_t v138 = 96;
        do
        {
          LaunchServices::BindingEvaluation::compareBindings(v153, (LaunchServices::BindingEvaluation::State *)(*((void *)v153 + 22) + v138 - 96), (const LaunchServices::BindingEvaluation::ExtendedBinding *)(*((void *)v153 + 22) + v138), v135);
          v138 += 96;
          --v137;
        }
        while (v137);
      }
    }
    return (uint64_t *)std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>,std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>>((uint64_t *)a3, *(void *)(a3 + 8), *((void *)v153 + 22), *((void *)v153 + 23), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v153 + 23) - *((void *)v153 + 22)) >> 5));
  }
  return result;
}

void sub_18296CCCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t *a33)
{
  a33 = &a27;
  std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__destroy_vector::operator()[abi:nn180100](&a33);
  _Unwind_Resume(a1);
}

uint64_t **std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__destroy_vector::operator()[abi:nn180100](uint64_t **result)
{
  uint64_t v1 = *result;
  uint64_t v2 = **result;
  if (v2)
  {
    uint64_t v3 = v1[1];
    uint64_t v4 = *result;
    if (v3 != v2)
    {
      uint64_t v5 = result;
      do
      {
        v3 -= 96;
        std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>::destroy[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding>((uint64_t)(v1 + 3), v3);
      }
      while (v3 != v2);
      uint64_t v4 = *v5;
    }
    v1[1] = v2;
    uint64_t v6 = *(uint64_t (**)(void))(*(void *)v4[3] + 24);
    return (uint64_t **)v6();
  }
  return result;
}

uint64_t *LaunchServices::BindingEvaluation::ensureBundlePointersInBindings(uint64_t *result)
{
  uint64_t v1 = *result;
  uint64_t v2 = result[1];
  if (*result != v2)
  {
    uint64_t v3 = 0;
    do
    {
      if (!*(void *)(v1 + v3 + 8))
      {
        objc_msgSend(NSString, "stringWithFormat:", @"bundle data for bundle %llx was nil; binding %zu of %zu; please file a bug and relate to rdar://126722263",
          *(unsigned int *)(v1 + v3),
          0xAAAAAAAAAAAAAAABLL * (v3 >> 5),
          0xAAAAAAAAAAAAAAABLL * ((v2 - v1) >> 5));
        uint64_t v4 = (NSString *)objc_claimAutoreleasedReturnValue();
        _LSSetCrashMessage(v4);
        abort();
      }
      v3 += 96;
    }
    while (v1 + v3 != v2);
  }
  return result;
}

void sub_18296CF18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__move_assign(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a1[3];
  if (v4 == a2[3] || ((*(uint64_t (**)(uint64_t))(*(void *)v4 + 32))(v4) & 1) != 0)
  {
    std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__vdeallocate(a1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    uint64_t v5 = *a2;
    uint64_t v6 = a2[1];
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a2) >> 5);
    std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__assign_with_size[abi:nn180100]<std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>>,std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>>>(a1, v5, v6, v7);
  }
}

uint64_t *std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__vdeallocate(uint64_t *result)
{
  uint64_t v1 = *result;
  if (*result)
  {
    uint64_t v2 = result;
    uint64_t v3 = result[1];
    uint64_t v4 = *result;
    if (v3 != v1)
    {
      do
      {
        v3 -= 96;
        std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>::destroy[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding>((uint64_t)(v2 + 3), v3);
      }
      while (v3 != v1);
      uint64_t v4 = *v2;
    }
    v2[1] = v1;
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v2[3] + 24))(v2[3], v4, v2[2] - v4, 8);
    *uint64_t v2 = 0;
    v2[1] = 0;
    v2[2] = 0;
  }
  return result;
}

uint64_t *std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::reserve(uint64_t *result, unint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((result[2] - *result) >> 5) < a2)
  {
    if (a2 >= 0x2AAAAAAAAAAAAABLL) {
      abort();
    }
    uint64_t v3 = result;
    uint64_t v4 = result[1] - *result;
    v5[4] = result + 3;
    v5[0] = std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>::allocate[abi:nn180100]((uint64_t)(result + 3), a2);
    v5[1] = v5[0] + v4;
    v5[2] = v5[0] + v4;
    v5[3] = v5[0] + 96 * a2;
    std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__swap_out_circular_buffer(v3, v5);
    return std::__split_buffer<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding> &>::~__split_buffer(v5);
  }
  return result;
}

void sub_18296D128(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding> &>::~__split_buffer((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>::destroy[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 32);
}

id std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>::construct[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding,LaunchServices::BindingEvaluation::ExtendedBinding const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v5 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v5;
  *(void *)(a2 + 32) = *(id *)(a3 + 32);
  *(void *)(a2 + 40) = *(id *)(a3 + 40);
  *(_WORD *)(a2 + 48) = *(_WORD *)(a3 + 48);
  *(void *)(a2 + 56) = *(id *)(a3 + 56);
  *(void *)(a2 + 64) = *(id *)(a3 + 64);
  *(unsigned char *)(a2 + 72) = *(unsigned char *)(a3 + 72);
  id result = *(id *)(a3 + 80);
  *(void *)(a2 + 80) = result;
  *(_DWORD *)(a2 + 88) = *(_DWORD *)(a3 + 88);
  return result;
}

void *std::__split_buffer<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding> &>::~__split_buffer(void *a1)
{
  if (*a1) {
    (*(void (**)(void, void, void, uint64_t))(**(void **)a1[4] + 24))(*(void *)a1[4], *a1, a1[3] - *a1, 8);
  }
  return a1;
}

void std::__split_buffer<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding> &>::clear[abi:nn180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 96;
    std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>::destroy[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding>(v4, i - 96);
  }
}

uint64_t std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>::allocate[abi:nn180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(**(void **)a1 + 16);

  return v2();
}

uint64_t std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:nn180100]<std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>,std::reverse_iterator<LaunchServices::BindingEvaluation::ExtendedBinding*>,std::reverse_iterator<LaunchServices::BindingEvaluation::ExtendedBinding*>,std::reverse_iterator<LaunchServices::BindingEvaluation::ExtendedBinding*>>((uint64_t)(a1 + 3), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:nn180100]<std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>,std::reverse_iterator<LaunchServices::BindingEvaluation::ExtendedBinding*>,std::reverse_iterator<LaunchServices::BindingEvaluation::ExtendedBinding*>,std::reverse_iterator<LaunchServices::BindingEvaluation::ExtendedBinding*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = a6;
  if (a3 != a5)
  {
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = a7 + v8;
      uint64_t v10 = a3 + v8;
      long long v11 = *(_OWORD *)(a3 + v8 - 80);
      *(_OWORD *)(v9 - 96) = *(_OWORD *)(a3 + v8 - 96);
      *(_OWORD *)(v9 - 80) = v11;
      long long v12 = *(_OWORD *)(a3 + v8 - 64);
      *(_OWORD *)(v10 - 64) = 0uLL;
      *(_OWORD *)(v9 - 64) = v12;
      *(_WORD *)(v9 - 48) = *(_WORD *)(a3 + v8 - 48);
      long long v13 = *(_OWORD *)(a3 + v8 - 40);
      *(_OWORD *)(v10 - 40) = 0uLL;
      *(_OWORD *)(v9 - 40) = v13;
      *(unsigned char *)(v9 - 24) = *(unsigned char *)(a3 + v8 - 24);
      uint64_t v14 = *(void *)(a3 + v8 - 16);
      *(void *)(v10 - 16) = 0;
      *(void *)(v9 - 16) = v14;
      *(_DWORD *)(v9 - 8) = *(_DWORD *)(a3 + v8 - 8);
      v8 -= 96;
    }
    while (a3 + v8 != a5);
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::find<unsigned int>(void *a1, unsigned int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (v2.i32[0] - 1) & v3;
  }
  uint64_t v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (uint64_t result = *v6; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

unint64_t std::unordered_set<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::pmr::polymorphic_allocator<unsigned int>>::unordered_set(unint64_t a1, size_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6 = *a5;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = *a5;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 1065353216;
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::pmr::polymorphic_allocator<unsigned int>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_18296D518(_Unwind_Exception *a1)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::pmr::polymorphic_allocator<unsigned int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::pmr::polymorphic_allocator<unsigned int>>::__rehash<true>(unint64_t result, size_t __n)
{
  uint64_t v2 = result;
  if (__n == 1)
  {
    unint64_t v3 = 2;
  }
  else
  {
    unint64_t v3 = __n;
    if ((__n & (__n - 1)) != 0)
    {
      uint64_t result = std::__next_prime(__n);
      unint64_t v3 = result;
    }
  }
  int8x8_t v4 = *(int8x8_t *)(v2 + 8);
  if (v3 > *(void *)&v4) {
    goto LABEL_16;
  }
  if (v3 < *(void *)&v4)
  {
    uint64_t result = vcvtps_u32_f32((float)*(unint64_t *)(v2 + 40) / *(float *)(v2 + 48));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4), v5.i16[0] = vaddlv_u8(v5), v5.u32[0] > 1uLL))
    {
      uint64_t result = std::__next_prime(result);
    }
    else
    {
      uint64_t v6 = 1 << -(char)__clz(result - 1);
      if (result >= 2) {
        uint64_t result = v6;
      }
    }
    if (v3 <= result) {
      unint64_t v3 = result;
    }
    if (v3 < *(void *)&v4)
    {
LABEL_16:
      return std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::pmr::polymorphic_allocator<unsigned int>>::__do_rehash<true>(v2, v3);
    }
  }
  return result;
}

uint64_t *std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::pmr::polymorphic_allocator<unsigned int>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      (*(void (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32));
      uint64_t v2 = v3;
    }
    while (v3);
  }

  return std::unique_ptr<std::__hash_node_base<std::__hash_node<unsigned int,void *> *> *[],std::__bucket_list_deallocator<std::pmr::polymorphic_allocator<std::__hash_node_base<std::__hash_node<unsigned int,void *> *> *>>>::~unique_ptr[abi:nn180100]((uint64_t *)a1);
}

uint64_t std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>,std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    unint64_t v10 = a1[1];
    uint64_t v9 = a1[2];
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - v10) >> 5)) >= a5)
    {
      uint64_t v19 = v10 - a2;
      if (a5 <= (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - a2) >> 5)))
      {
        uint64_t v20 = a3 + 96 * a5;
      }
      else
      {
        uint64_t v20 = a3 + 32 * ((uint64_t)(v10 - a2) >> 5);
        std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__construct_at_end<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>,std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>>(a1, v20, a4);
        if (v19 < 1) {
          return v5;
        }
      }
      std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__move_range((uint64_t)a1, v5, v10, v5 + 96 * a5);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding *,LaunchServices::BindingEvaluation::ExtendedBinding *,LaunchServices::BindingEvaluation::ExtendedBinding *>((uint64_t)v26, v7, v20, v5);
    }
    else
    {
      uint64_t v11 = *a1;
      unint64_t v12 = a5 - 0x5555555555555555 * ((uint64_t)(v10 - *a1) >> 5);
      if (v12 > 0x2AAAAAAAAAAAAAALL) {
        abort();
      }
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v11) >> 5);
      uint64_t v14 = (uint64_t)(a1 + 3);
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v11) >> 5);
      uint64_t v16 = 2 * v15;
      if (2 * v15 <= v12) {
        uint64_t v16 = v12;
      }
      if (v15 >= 0x155555555555555) {
        unint64_t v17 = 0x2AAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v17 = v16;
      }
      uint64_t v29 = a1 + 3;
      if (v17) {
        uint64_t v18 = std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>::allocate[abi:nn180100](v14, v17);
      }
      else {
        uint64_t v18 = 0;
      }
      uint64_t v21 = v18 + 96 * v13;
      v26[0] = v18;
      v26[1] = v21;
      uint64_t v27 = v21;
      unint64_t v28 = v18 + 96 * v17;
      uint64_t v22 = 3 * a5;
      uint64_t v23 = v21 + 96 * a5;
      uint64_t v24 = 32 * v22;
      do
      {
        std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>::construct[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding,LaunchServices::BindingEvaluation::ExtendedBinding const&>((uint64_t)v29, v21, v7);
        v21 += 96;
        v7 += 96;
        v24 -= 96;
      }
      while (v24);
      uint64_t v27 = v23;
      uint64_t v5 = std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__swap_out_circular_buffer(a1, v26, v5);
      std::__split_buffer<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding> &>::~__split_buffer(v26);
    }
  }
  return v5;
}

void sub_18296D85C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding> &>::~__split_buffer((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__hash_node_base<std::__hash_node<unsigned int,void *> *> *[],std::__bucket_list_deallocator<std::pmr::polymorphic_allocator<std::__hash_node_base<std::__hash_node<unsigned int,void *> *> *>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2) {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1[2] + 24))(a1[2], v2, 8 * a1[1], 8);
  }
  return a1;
}

uint64_t LaunchServices::BindingEvaluation::isBindingOK(LaunchServices::BindingEvaluation *this, LaunchServices::BindingEvaluation::State *a2, const LaunchServices::BindingEvaluation::ExtendedBinding *a3)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)a2 + 89))
  {
    uint64_t v6 = (void *)*((void *)this + 19);
    uint64_t v7 = (uint64_t (**)(void, void, void))MEMORY[0x18530F950](*((void *)this + 18));

    if (v7
      && (((uint64_t (**)(void, void, LaunchServices::BindingEvaluation::State *))v7)[2](v7, *(void *)this, a2) & 1) == 0)
    {
      uint64_t v31 = [v6 UTF8String];
      if (v31) {
        int v32 = (const char *)v31;
      }
      else {
        int v32 = "caller-supplied filter";
      }
      uint64_t v33 = [[_LSBindingForLog alloc] initWithState:this binding:a2];
      LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"%s: %@ FILTERED", v34, v32, v33);

      goto LABEL_44;
    }
    uint64_t result = LaunchServices::BindingEvaluation::isBindingOK_NoIO(this, a2, v8);
    if (!result)
    {
LABEL_53:
      *((_WORD *)a2 + 44) = result | 0x100;
      *((_WORD *)a2 + 45) = result | 0x100;
      return result;
    }
    if ((*((unsigned char *)this + 117) & 0x80) == 0)
    {
      if (*((void *)a2 + 3))
      {
        uint64_t v9 = _LSDatabaseGetStringArray(**(void ***)this);
        uint64_t v45 = v9;
        unint64_t v10 = v9;
        if (v9)
        {
          uint64_t v11 = [v9 count];
          unint64_t v10 = v45;
          if (v11)
          {
            if (!*((void *)this + 33))
            {
              uint64_t v12 = [MEMORY[0x1E4F1CA60] dictionary];
              unint64_t v13 = (void *)*((void *)this + 33);
              *((void *)this + 33) = v12;
            }
            long long v49 = 0u;
            long long v50 = 0u;
            long long v47 = 0u;
            long long v48 = 0u;
            obuint64_t j = v45;
            uint64_t v14 = [obj countByEnumeratingWithState:&v47 objects:v51 count:16];
            if (v14)
            {
              uint64_t v15 = *(void *)v48;
              do
              {
                for (uint64_t i = 0; i != v14; ++i)
                {
                  if (*(void *)v48 != v15) {
                    objc_enumerationMutation(obj);
                  }
                  uint64_t v17 = *(void *)(*((void *)&v47 + 1) + 8 * i);
                  uint64_t v18 = [*((id *)this + 33) objectForKeyedSubscript:v17];
                  if (v18) {
                    goto LABEL_19;
                  }
                  uint64_t v19 = (void *)MGCopyAnswer();
                  if (!v19 || (objc_opt_respondsToSelector() & 1) == 0)
                  {

                    uint64_t v18 = 0;
                    goto LABEL_26;
                  }
                  uint64_t v18 = objc_msgSend(NSNumber, "numberWithBool:", objc_msgSend(v19, "BOOLValue"));
                  [*((id *)this + 33) setObject:v18 forKeyedSubscript:v17];

                  if (v18)
                  {
LABEL_19:
                    if (([v18 BOOLValue] & 1) == 0)
                    {
                      id v35 = [NSString stringWithFormat:@"missing capability %@", v17];
                      uint64_t v36 = [v35 UTF8String];
                      long long v37 = [[_LSBindingForLog alloc] initWithState:this binding:a2];
                      LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"%s: %@ FILTERED", v38, v36, v37);

                      goto LABEL_44;
                    }
                  }
LABEL_26:
                }
                uint64_t v14 = [obj countByEnumeratingWithState:&v47 objects:v51 count:16];
              }
              while (v14);
            }

            unint64_t v10 = v45;
          }
        }
      }
      if ((!*((unsigned char *)this + 96) || *((unsigned char *)this + 97)) && (*((unsigned char *)this + 118) & 1) == 0)
      {
        uint64_t v20 = *((void *)a2 + 3);
        if (!v20 || (*(unsigned char *)(v20 + 9) & 1) == 0)
        {
          uint64_t v21 = +[LSApplicationRestrictionsManager sharedInstance]();
          uint64_t v22 = [NSNumber numberWithUnsignedLongLong:*(void *)(*((void *)a2 + 1) + 416)];
          BOOL v23 = -[LSApplicationRestrictionsManager isRatingAllowed:](v21, v22);

          if (!v23)
          {
            uint64_t v24 = [[_LSBindingForLog alloc] initWithState:this binding:a2];
            LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"%s: %@ FILTERED", v39, "restricted due to rating", v24);
            goto LABEL_46;
          }
          if (*(_DWORD *)(*((void *)a2 + 1) + 12))
          {
            uint64_t v24 = (_LSBindingForLog *)_CSStringCopyCFString();
            +[LSApplicationRestrictionsManager sharedInstance]();
            uint64_t v25 = (id *)objc_claimAutoreleasedReturnValue();
            unsigned int v26 = -[LSApplicationRestrictionsManager isApplicationRestricted:checkFlags:](v25, v24, *(void *)(*((void *)a2 + 1) + 172));

            if (v26)
            {
              uint64_t v27 = [[_LSBindingForLog alloc] initWithState:this binding:a2];
              LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"%s: %@ FILTERED", v28, "restricted by Managed Configuration", v27);

LABEL_46:
LABEL_44:
              uint64_t result = 0;
              goto LABEL_53;
            }
          }
        }
      }
      if (!LaunchServices::BindingEvaluation::BindingEligibilityChecker::checkBindingIsEligibile((LaunchServices::BindingEvaluation::BindingEligibilityChecker *)&LaunchServices::BindingEvaluation::BindingEligibilityChecker::shared(void)::checker, this, a2))
      {
        long long v41 = [[_LSBindingForLog alloc] initWithState:this binding:a2];
        LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"%s: %@ FILTERED", v42, "not eligible", v41);

        goto LABEL_44;
      }
      if (*((void *)a2 + 3))
      {
        uint64_t v40 = *((void *)a2 + 1);
        if (v40)
        {
          if (((*(unsigned __int16 *)(v40 + 189) | (*(unsigned __int8 *)(v40 + 191) << 16)) & 0x100000) != 0)
          {
            uint64_t v43 = [[_LSBindingForLog alloc] initWithState:this binding:a2];
            LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"%s: %@ FILTERED", v44, "hidden by app protection", v43);

            goto LABEL_44;
          }
        }
      }
    }
    uint64_t result = 1;
    goto LABEL_53;
  }
  if (*((unsigned char *)a2 + 88)) {
    return 1;
  }
  uint64_t v29 = [[_LSBindingForLog alloc] initWithState:this binding:a2];
  LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"%s: %@ FILTERED", v30, "previously found to be not-OK", v29);

  return *((unsigned char *)a2 + 88) != 0;
}

void sub_18296DE74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void LaunchServices::BindingEvaluation::addUserPreferences(LaunchServices::BindingEvaluation *this, LaunchServices::BindingEvaluation::State *a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if ((*((unsigned char *)this + 116) & 4) != 0)
  {
    uint64_t v6 = _LSBindingLog();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)id buf = 0;
      _os_log_impl(&dword_182959000, v6, OS_LOG_TYPE_DEBUG, "Skipping weak binding due to options", buf, 2u);
    }

    LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"Skipping weak binding due to options", v7);
    goto LABEL_36;
  }
  CFStringRef v3 = (const __CFString *)*((void *)this + 27);
  if (v3)
  {
    *(_DWORD *)id buf = 0;
    int TagForContentType = LSHandlerPref::GetTagForContentType(**(void ***)this, v3, (int *)buf);
    if (!TagForContentType)
    {
LABEL_27:
      uint64_t v17 = _LSBindingLog();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)id buf = 0;
        _os_log_impl(&dword_182959000, v17, OS_LOG_TYPE_DEBUG, "Adding weak binding", buf, 2u);
      }

      LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"Adding weak binding", v18);
      goto LABEL_36;
    }
    uint64_t HandlerPref = LSHandlerPref::GetHandlerPref(**(void ***)this, TagForContentType, *(int *)buf, 0);
  }
  else
  {
    CFStringRef v8 = (const __CFString *)*((void *)this + 2);
    if (!v8) {
      goto LABEL_27;
    }
    int StringForCFString = _LSDatabaseGetStringForCFString(**(void ***)this, v8, 1);
    if (!StringForCFString) {
      goto LABEL_27;
    }
    uint64_t HandlerPref = LSHandlerPref::GetHandlerPref(**(void ***)this, StringForCFString, 5, 0);
  }
  unint64_t v10 = (LSHandlerPref *)HandlerPref;
  if (!HandlerPref) {
    goto LABEL_27;
  }
  uint64_t v11 = _LSBindingLog();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)id buf = 0;
    _os_log_impl(&dword_182959000, v11, OS_LOG_TYPE_DEBUG, "Adding weak binding", buf, 2u);
  }

  LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"Adding weak binding", v12);
  memset(&v36, 0, sizeof(v36));
  if (LSHandlerPref::roleHandler(v10, *((_DWORD *)this + 28), &v36))
  {
    unint64_t v13 = (LaunchServices::BindingEvaluator *)_CSStringCopyCFString();
    uint64_t v14 = v13;
    if (!v13)
    {
LABEL_35:

      goto LABEL_36;
    }
    LOBYTE(v22) = 0;
    char v26 = 0;
    memset(&v36, 0, sizeof(v36));
    memset(v32, 0, sizeof(v32));
    LaunchServices::BindingEvaluator::CreateWithBundleInfo(v13, 0, 0, 0, v32, (uint64_t)buf);
    int v35 = 128;
    LaunchServices::BindingEvaluator::getBestBinding((uint64_t *)&v27, (LaunchServices::BindingEvaluator *)buf);
    std::__optional_storage_base<LSBinding,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<LSBinding,false>>((uint64_t)&v22, (uint64_t)&v27);
    if ((_BYTE)v29)
    {
    }
    LSVersionNumber v27 = v36;
    long long v37 = kLSVersionNumberNull;
    long long v38 = *(_OWORD *)algn_182AF9270;
    if (_LSVersionNumberCompare(&v27, &v37))
    {
      if (v26) {
        goto LABEL_23;
      }
      long long v37 = kLSVersionNumberNull;
      long long v38 = *(_OWORD *)algn_182AF9270;
      LaunchServices::BindingEvaluator::CreateWithBundleInfo(v14, 0, 0, 0, &v37, (uint64_t)&v27);
      LaunchServices::BindingEvaluator::operator=((uint64_t)buf, (uint64_t)&v27);
      LaunchServices::BindingEvaluator::~BindingEvaluator((id *)&v27);
      int v35 = 128;
      LaunchServices::BindingEvaluator::getBestBinding((uint64_t *)&v27, (LaunchServices::BindingEvaluator *)buf);
      std::__optional_storage_base<LSBinding,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<LSBinding,false>>((uint64_t)&v22, (uint64_t)&v27);
      if ((_BYTE)v29)
      {
      }
    }
    if (!v26)
    {
LABEL_33:
      LaunchServices::BindingEvaluator::~BindingEvaluator((id *)buf);
      if (v26)
      {
      }
      goto LABEL_35;
    }
LABEL_23:
    long long v31 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    *(_OWORD *)&v27._opaque[16] = 0u;
    long long v28 = 0u;
    *(void *)v27._opaque = v22;
    *(void *)&v27._opaque[8] = v23;
    if (LaunchServices::BindingEvaluation::gIsReasonTrackingEnabled || (*((unsigned char *)this + 118) & 2) != 0)
    {
      if (v25)
      {
        id v15 = [NSString alloc];
        uint64_t v16 = (__CFString *)[v15 initWithFormat:@"Weak Binding (%@)", v25];
      }
      else
      {
        uint64_t v16 = @"Weak Binding";
      }
      *((void *)&v28 + 1) = v16;
    }
    LaunchServices::BindingEvaluation::pushBackBinding(this, (uint64_t *)this + 22, (LaunchServices::BindingEvaluation::State *)&v27);

    goto LABEL_33;
  }
LABEL_36:
  uint64_t v19 = _LSBindingLog();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 23) - *((void *)this + 22)) >> 5);
    *(_DWORD *)id buf = 134217984;
    unint64_t v34 = v20;
    _os_log_impl(&dword_182959000, v19, OS_LOG_TYPE_DEBUG, "%llu bindings found", buf, 0xCu);
  }

  LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"%llu bindings found", v21, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 23) - *((void *)this + 22)) >> 5));
}

void sub_18296E404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,id a43)
{
  LaunchServices::BindingEvaluator::~BindingEvaluator(&a43);
  if (a16)
  {
  }
  _Unwind_Resume(a1);
}

void LaunchServices::BindingEvaluation::addBundles(LaunchServices::BindingEvaluation *this, LaunchServices::BindingEvaluation::State *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  CFStringRef v3 = (const __CFString *)*((void *)this + 5);
  if (v3)
  {
    int StringForCFString = _LSDatabaseGetStringForCFString(**(void ***)this, v3, 0);
    LaunchServices::BindingEvaluation::addBundlesInBindingMap((uint64_t)this, 6, StringForCFString);
  }
  CFStringRef v5 = (const __CFString *)*((void *)this + 6);
  if (v5)
  {
    int v6 = _LSDatabaseGetStringForCFString(**(void ***)this, v5, 1);
    LaunchServices::BindingEvaluation::addBundlesInBindingMap((uint64_t)this, 7, v6);
  }
  uint64_t v7 = _LSBindingLog();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 23) - *((void *)this + 22)) >> 5);
    *(_DWORD *)id buf = 134217984;
    unint64_t v11 = v8;
    _os_log_impl(&dword_182959000, v7, OS_LOG_TYPE_DEBUG, "%llu bindings found", buf, 0xCu);
  }

  LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"%llu bindings found", v9, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 23) - *((void *)this + 22)) >> 5));
}

uint64_t _LSDatabaseGetStringForCFString(void *a1, const __CFString *a2, int a3)
{
  v10[20] = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  if (!a2 || (CFTypeID v6 = CFGetTypeID(a2), v6 != CFStringGetTypeID()))
  {
    XCFBufInit((uint64_t)v10);
    goto LABEL_6;
  }
  CFIndex Length = CFStringGetLength(a2);
  if (!XCFBufInitWithCFStringRange((uint64_t)v10, a2, 0, Length, a3))
  {
LABEL_6:
    uint64_t v8 = 0;
    goto LABEL_7;
  }
  uint64_t v8 = _CSGetStringForCharacters();
  XCFBufDestroy((uint64_t)v10);
LABEL_7:

  return v8;
}

void sub_18296E6A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void XCFBufDestroy(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2) {
    free(v2);
  }
  *(unsigned char *)(a1 + 28) = 0;
  *(void *)a1 = a1 + 28;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 127;
  *(void *)(a1 + 16) = 0;
}

uint64_t XCFBufInitWithCFStringRange(uint64_t a1, const __CFString *a2, CFIndex a3, CFIndex a4, int a5)
{
  uint64_t result = 0;
  *(unsigned char *)(a1 + 28) = 0;
  CFIndex maxBufLen = 0;
  *(void *)a1 = a1 + 28;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 127;
  *(void *)(a1 + 16) = 0;
  if (a2 && a3 != -1)
  {
    CFTypeID TypeID = CFStringGetTypeID();
    if (TypeID != CFGetTypeID(a2)) {
      return 0;
    }
    if (!a4) {
      return 1;
    }
    v21.location = a3;
    v21.length = a4;
    if (a4 == CFStringGetBytes(a2, v21, 0x8000100u, 0, 0, *(UInt8 **)a1, 127, &maxBufLen))
    {
      uint64_t v12 = maxBufLen;
      *(_DWORD *)(a1 + 8) = maxBufLen;
LABEL_11:
      *(unsigned char *)(*(void *)a1 + v12) = 0;
      if (a5)
      {
        uint64_t v16 = *(unsigned int *)(a1 + 8);
        if (v16)
        {
          uint64_t v17 = *(unsigned char **)a1;
          do
          {
            int v18 = *v17;
            if ((v18 - 65) <= 0x19) {
              *uint64_t v17 = v18 + 32;
            }
            ++v17;
            --v16;
          }
          while (v16);
        }
      }
      return 1;
    }
    v22.location = a3;
    v22.length = a4;
    if (CFStringGetBytes(a2, v22, 0x8000100u, 0, 0, 0, 0, &maxBufLen) >= 1)
    {
      unint64_t v13 = (UInt8 *)malloc_type_malloc(maxBufLen + 1, 0xAE5AA1C7uLL);
      *(void *)(a1 + 16) = v13;
      *(void *)a1 = v13;
      CFIndex v14 = maxBufLen;
      *(_DWORD *)(a1 + 24) = maxBufLen;
      v23.location = a3;
      v23.length = a4;
      CFIndex Bytes = CFStringGetBytes(a2, v23, 0x8000100u, 0, 0, v13, v14, &maxBufLen);
      LODWORD(v12) = maxBufLen;
      *(_DWORD *)(a1 + 8) = maxBufLen;
      if (Bytes)
      {
        uint64_t v12 = v12;
        goto LABEL_11;
      }
    }
    uint64_t v19 = *(void **)(a1 + 16);
    if (v19) {
      free(v19);
    }
    uint64_t result = 0;
    *(void *)a1 = a1 + 28;
    *(_DWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 24) = 127;
    *(void *)(a1 + 16) = 0;
    *(unsigned char *)(a1 + 28) = 0;
  }
  return result;
}

uint64_t LaunchServices::BindingEvaluation::addBundlesInBindingMap(uint64_t a1, uint64_t a2, int a3)
{
  if (a3) {
    return _LSDatabaseEnumeratingBindingMap();
  }
  return result;
}

uint64_t _LSDatabaseEnumeratingBindingMap()
{
  return _CSStringBindingEnumerate();
}

uint64_t std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::pmr::polymorphic_allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(unint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(uint64_t **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = *(void *)i)
      {
        unint64_t v11 = *(void *)(i + 8);
        if (v11 == v6)
        {
          if (*(_DWORD *)(i + 16) == v6) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), 24, 8);
  *(void *)uint64_t i = 0;
  *(void *)(i + 8) = v6;
  *(_DWORD *)(i + 16) = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 40) + 1);
  float v13 = *(float *)(a1 + 48);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::pmr::polymorphic_allocator<unsigned int>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  int v18 = *(uint64_t **)(*(void *)a1 + 8 * v3);
  if (v18)
  {
    *(void *)uint64_t i = *v18;
LABEL_38:
    uint64_t *v18 = i;
    goto LABEL_39;
  }
  *(void *)uint64_t i = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = i;
  *(void *)(*(void *)a1 + 8 * v3) = a1 + 24;
  if (*(void *)i)
  {
    unint64_t v19 = *(void *)(*(void *)i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v19 >= v7) {
        v19 %= v7;
      }
    }
    else
    {
      v19 &= v7 - 1;
    }
    int v18 = (uint64_t *)(*(void *)a1 + 8 * v19);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 40);
  return i;
}

void sub_18296EBC4(_Unwind_Exception *a1)
{
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v1 + 32) + 24))(*(void *)(v1 + 32), v2, 24, 8);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:nn180100]<std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>,std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>>,std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>>,LaunchServices::BindingEvaluation::ExtendedBinding*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  for (uint64_t result = a4; a2 != a3; a2 += 96)
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)uint64_t result = *(_OWORD *)a2;
    *(_OWORD *)(result + 16) = v5;
    long long v6 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a2 + 32) = 0uLL;
    *(_OWORD *)(result + 32) = v6;
    *(_WORD *)(result + 48) = *(_WORD *)(a2 + 48);
    long long v7 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a2 + 56) = 0uLL;
    *(_OWORD *)(result + 56) = v7;
    *(unsigned char *)(result + 72) = *(unsigned char *)(a2 + 72);
    uint64_t v8 = *(void *)(a2 + 80);
    *(void *)(a2 + 80) = 0;
    *(void *)(result + 80) = v8;
    *(_DWORD *)(result + 88) = *(_DWORD *)(a2 + 88);
    result += 96;
  }
  return result;
}

uint64_t std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::pmr::polymorphic_allocator<unsigned int>>::__do_rehash<true>(uint64_t result, unint64_t a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    uint64_t result = std::pmr::polymorphic_allocator<std::__hash_node_base<std::__hash_node<unsigned int,void *> *> *>::allocate[abi:nn180100](result + 16, a2);
    uint64_t v4 = *(void *)v2;
    *(void *)uint64_t v2 = result;
    if (v4) {
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v2 + 16) + 24))(*(void *)(v2 + 16), v4, 8 * *(void *)(v2 + 8), 8);
    }
    uint64_t v5 = 0;
    *(void *)(v2 + 8) = a2;
    do
      *(void *)(*(void *)v2 + 8 * v5++) = 0;
    while (a2 != v5);
    long long v6 = *(void **)(v2 + 24);
    if (v6)
    {
      unint64_t v7 = v6[1];
      uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v8.i16[0] = vaddlv_u8(v8);
      if (v8.u32[0] > 1uLL)
      {
        if (v7 >= a2) {
          v7 %= a2;
        }
      }
      else
      {
        v7 &= a2 - 1;
      }
      *(void *)(*(void *)v2 + 8 * v7) = v2 + 24;
      unint64_t v10 = (void *)*v6;
      if (*v6)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= a2) {
              v11 %= a2;
            }
          }
          else
          {
            v11 &= a2 - 1;
          }
          if (v11 != v7)
          {
            if (!*(void *)(*(void *)v2 + 8 * v11))
            {
              *(void *)(*(void *)v2 + 8 * v11) = v6;
              goto LABEL_23;
            }
            void *v6 = *v10;
            *unint64_t v10 = **(void **)(*(void *)v2 + 8 * v11);
            **(void **)(*(void *)v2 + 8 * v11) = v10;
            unint64_t v10 = v6;
          }
          unint64_t v11 = v7;
LABEL_23:
          long long v6 = v10;
          unint64_t v10 = (void *)*v10;
          unint64_t v7 = v11;
        }
        while (v10);
      }
    }
  }
  else
  {
    uint64_t v9 = *(void *)result;
    *(void *)uint64_t result = 0;
    if (v9) {
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(result + 16) + 24))(*(void *)(result + 16), v9, 8 * *(void *)(result + 8), 8);
    }
    *(void *)(v2 + 8) = 0;
  }
  return result;
}

uint64_t std::pmr::polymorphic_allocator<std::__hash_node_base<std::__hash_node<unsigned int,void *> *> *>::allocate[abi:nn180100](uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(**(void **)a1 + 16);

  return v2();
}

BOOL LaunchServices::BindingEvaluation::BindingEligibilityChecker::checkBindingIsEligibile(LaunchServices::BindingEvaluation::BindingEligibilityChecker *this, const LaunchServices::BindingEvaluation::State *a2, const LaunchServices::BindingEvaluation::ExtendedBinding *a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)a2 + 96) || (*((unsigned char *)a2 + 118) & 1) != 0) {
    return 1;
  }
  uint64_t v6 = *((void *)a3 + 1);
  int v7 = *(_DWORD *)(v6 + 180);
  if ((v7 & 0x2000000) != 0)
  {
    uint8x8_t v8 = +[LSEligibilityPredicateEvaluator sharedCachingEligibilityPredicateEvaluator];
    uint64_t v9 = *(unsigned int *)a3;
    uint64_t v10 = *((void *)a3 + 1);
    uint64_t v11 = **(void **)a2;
    id v26 = 0;
    float v12 = [v8 evaluateBundle:v9 bundleData:v10 database:v11 error:&v26];
    id v13 = v26;
    if (v12)
    {
      if (([v12 BOOLValue] & 1) == 0)
      {

        return 0;
      }
    }
    else
    {
      unint64_t v15 = _LSBindingLog();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        uint64_t v16 = *(unsigned int *)a3;
        *(_DWORD *)id buf = 134218242;
        uint64_t v28 = v16;
        __int16 v29 = 2112;
        id v30 = v13;
        _os_log_impl(&dword_182959000, v15, OS_LOG_TYPE_ERROR, "Couldn't check eligibility of %llx: %@", buf, 0x16u);
      }
    }
    uint64_t v6 = *((void *)a3 + 1);
    int v7 = *(_DWORD *)(v6 + 180);
  }
  if ((v7 & 0x4000000) != 0)
  {
    size_t v17 = +[LSFeatureFlagPredicateEvaluator defaultEvaluator];
    uint64_t v18 = *(unsigned int *)a3;
    uint64_t v19 = *((void *)a3 + 1);
    uint64_t v20 = **(void **)a2;
    id v25 = 0;
    CFRange v21 = [v17 evaluateBundle:v18 bundleData:v19 database:v20 error:&v25];
    id v22 = v25;
    if (v21)
    {
      if (([v21 BOOLValue] & 1) == 0)
      {

        return 0;
      }
    }
    else
    {
      CFRange v23 = _LSBindingLog();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        uint64_t v24 = *(unsigned int *)a3;
        *(_DWORD *)id buf = 134218242;
        uint64_t v28 = v24;
        __int16 v29 = 2112;
        id v30 = v22;
        _os_log_impl(&dword_182959000, v23, OS_LOG_TYPE_ERROR, "Couldn't check eligibility of %llx: %@", buf, 0x16u);
      }
    }
    uint64_t v6 = *((void *)a3 + 1);
  }
  return LaunchServices::BindingEvaluation::BindingEligibilityChecker::isBundleEligibleFromFlags(this, *(void *)(v6 + 172), *(unsigned __int16 *)(v6 + 189) | (*(unsigned __int8 *)(v6 + 191) << 16), *(unsigned __int8 *)(v6 + 149));
}

void sub_18296F0D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int &>(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v10 = operator new(0x18uLL);
  *uint64_t v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *uint64_t v10 = *v19;
LABEL_38:
    void *v19 = v10;
    goto LABEL_39;
  }
  *uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_18296F324(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _LSBindingListEnumerateEntryWithClass(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v6 = a4;
  uint64_t EntryWithClass = _LSBindingListGetEntryWithClass(a1);
  uint64_t v8 = EntryWithClass;
  if (EntryWithClass)
  {
    unint64_t v9 = *(unsigned int *)(EntryWithClass + 4);
    char v11 = 0;
    if (v9)
    {
      uint64_t v10 = 2;
      do
      {
        v6[2](v6, a3, *(unsigned int *)(v8 + 4 * v10), &v11);
        if (v10 - 1 >= v9) {
          break;
        }
        ++v10;
      }
      while (!v11);
    }
  }
}

void sub_18296F3E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSBindingListGetEntryWithClass(void *a1)
{
  id v1 = a1;
  CSStoreGetUnit();

  return 0;
}

void sub_18296F4E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _UTTypeSearchConformsToTypesWithBlock::$_0::__invoke(uint64_t a1)
{
  unsigned __int8 v2 = 0;
  (*(void (**)(void, void, void, void, unsigned __int8 *))(*(void *)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), &v2);
  return v2;
}

BOOL evaluateBundleNoIOCommon(LSContext *a1, uint64_t a2, const LSBundleData *a3)
{
  if ((a3 & 1) == 0) {
    return 1;
  }
  if (a2 && (*(unsigned char *)(a2 + 164) & 1) != 0) {
    return 1;
  }
  uint64_t v5 = _LSEnumeratorLog;
  BOOL result = os_log_type_enabled((os_log_t)_LSEnumeratorLog, OS_LOG_TYPE_DEBUG);
  if (result)
  {
    evaluateBundleNoIOCommon((uint64_t)a1, v5, v6, v7, v8, v9, v10, v11);
    return 0;
  }
  return result;
}

void sub_18296F654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t _LSClaimGet()
{
  return CSStoreGetUnit();
}

void sub_18296F714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18296F7C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18296F8C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL _UTTypeSearchEqual(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16) == *(void *)(a1 + 8);
}

BOOL _UTGetLocalizedDescriptionImpl(uint64_t a1)
{
  unsigned __int8 v2 = *(int **)(a1 + 8);
  if (LaunchServices::LocalizedString::Get(*(LaunchServices::LocalizedString **)a1, (_LSDatabase *)*(unsigned int *)(*(void *)(a1 + 24) + 24)))
  {
    int v3 = *(_DWORD *)(*(void *)(a1 + 24) + 24);
    *unsigned __int8 v2 = v3;
  }
  else
  {
    int v3 = *v2;
  }
  return v3 != 0;
}

void std::swap[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding>(long long *a1, long long *a2)
{
  long long v28 = *a1;
  long long v29 = a1[1];
  uint64_t v5 = *((void *)a1 + 4);
  uint64_t v4 = *((void *)a1 + 5);
  a1[2] = 0u;
  __int16 v6 = *((_WORD *)a1 + 24);
  uint64_t v8 = *((void *)a1 + 7);
  uint64_t v7 = *((void *)a1 + 8);
  *(long long *)((char *)a1 + 56) = 0u;
  char v9 = *((unsigned char *)a1 + 72);
  uint64_t v10 = *((void *)a1 + 10);
  *((void *)a1 + 10) = 0;
  int v11 = *((_DWORD *)a1 + 22);
  long long v12 = a2[1];
  *a1 = *a2;
  a1[1] = v12;
  uint64_t v13 = *((void *)a2 + 4);
  *((void *)a2 + 4) = 0;
  BOOL v14 = (void *)*((void *)a1 + 4);
  *((void *)a1 + 4) = v13;

  uint64_t v15 = *((void *)a2 + 5);
  *((void *)a2 + 5) = 0;
  unint64_t v16 = (void *)*((void *)a1 + 5);
  *((void *)a1 + 5) = v15;

  *((_WORD *)a1 + 24) = *((_WORD *)a2 + 24);
  uint64_t v17 = *((void *)a2 + 7);
  *((void *)a2 + 7) = 0;
  uint64_t v18 = (void *)*((void *)a1 + 7);
  *((void *)a1 + 7) = v17;

  uint64_t v19 = *((void *)a2 + 8);
  *((void *)a2 + 8) = 0;
  unint64_t v20 = (void *)*((void *)a1 + 8);
  *((void *)a1 + 8) = v19;

  *((unsigned char *)a1 + 72) = *((unsigned char *)a2 + 72);
  uint64_t v21 = *((void *)a2 + 10);
  *((void *)a2 + 10) = 0;
  id v22 = (void *)*((void *)a1 + 10);
  *((void *)a1 + 10) = v21;

  *((_DWORD *)a1 + 22) = *((_DWORD *)a2 + 22);
  *a2 = v28;
  a2[1] = v29;
  CFRange v23 = (void *)*((void *)a2 + 4);
  *((void *)a2 + 4) = v5;

  uint64_t v24 = (void *)*((void *)a2 + 5);
  *((void *)a2 + 5) = v4;

  *((_WORD *)a2 + 24) = v6;
  id v25 = (void *)*((void *)a2 + 7);
  *((void *)a2 + 7) = v8;

  id v26 = (void *)*((void *)a2 + 8);
  *((void *)a2 + 8) = v7;

  *((unsigned char *)a2 + 72) = v9;
  LSVersionNumber v27 = (void *)*((void *)a2 + 10);
  *((void *)a2 + 10) = v10;

  *((_DWORD *)a2 + 22) = v11;
}

void std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,LaunchServices::BindingEvaluation::sort(LaunchServices::BindingEvaluation::State &)::$_0 &,std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding *>>(uint64_t a1, LaunchServices::BindingEvaluation **a2, uint64_t a3, long long *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v5 = a4;
    uint64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 5)))
    {
      uint64_t v10 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 5)) | 1;
      int v11 = (long long *)(a1 + 96 * v10);
      uint64_t v12 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 5) + 2;
      if (v12 < a3
        && LaunchServices::BindingEvaluation::sort(LaunchServices::BindingEvaluation::State &)::$_0::operator()(a2, (LaunchServices::BindingEvaluation::State *)(a1 + 96 * v10), (const LaunchServices::BindingEvaluation::ExtendedBinding *)(v11 + 6)))
      {
        v11 += 6;
        uint64_t v10 = v12;
      }
      if ((LaunchServices::BindingEvaluation::sort(LaunchServices::BindingEvaluation::State &)::$_0::operator()(a2, (LaunchServices::BindingEvaluation::State *)v11, (const LaunchServices::BindingEvaluation::ExtendedBinding *)v5) & 1) == 0)
      {
        long long v13 = v5[1];
        long long v41 = *v5;
        long long v42 = v13;
        long long v14 = v5[2];
        v5[2] = 0u;
        long long v43 = v14;
        __int16 v44 = *((_WORD *)v5 + 24);
        long long v15 = *(long long *)((char *)v5 + 56);
        *(long long *)((char *)v5 + 56) = 0u;
        char v46 = *((unsigned char *)v5 + 72);
        unint64_t v16 = (void *)*((void *)v5 + 10);
        *((void *)v5 + 10) = 0;
        id v47 = v16;
        int v48 = *((_DWORD *)v5 + 22);
        long long v45 = v15;
        do
        {
          uint64_t v17 = v5;
          uint64_t v5 = v11;
          long long v18 = v11[1];
          *uint64_t v17 = *v11;
          v17[1] = v18;
          uint64_t v19 = *((void *)v11 + 4);
          *((void *)v11 + 4) = 0;
          unint64_t v20 = (void *)*((void *)v17 + 4);
          *((void *)v17 + 4) = v19;

          uint64_t v21 = *((void *)v11 + 5);
          *((void *)v11 + 5) = 0;
          id v22 = (void *)*((void *)v17 + 5);
          *((void *)v17 + 5) = v21;

          *((_WORD *)v17 + 24) = *((_WORD *)v11 + 24);
          uint64_t v23 = *((void *)v11 + 7);
          *((void *)v11 + 7) = 0;
          uint64_t v24 = (void *)*((void *)v17 + 7);
          *((void *)v17 + 7) = v23;

          uint64_t v25 = *((void *)v11 + 8);
          *((void *)v11 + 8) = 0;
          id v26 = (void *)*((void *)v17 + 8);
          *((void *)v17 + 8) = v25;

          *((unsigned char *)v17 + 72) = *((unsigned char *)v11 + 72);
          uint64_t v27 = *((void *)v11 + 10);
          *((void *)v11 + 10) = 0;
          long long v28 = (void *)*((void *)v17 + 10);
          *((void *)v17 + 10) = v27;

          *((_DWORD *)v17 + 22) = *((_DWORD *)v11 + 22);
          if (v7 < v10) {
            break;
          }
          uint64_t v29 = (2 * v10) | 1;
          int v11 = (long long *)(a1 + 96 * v29);
          uint64_t v10 = 2 * v10 + 2;
          if (v10 >= a3)
          {
            uint64_t v10 = v29;
          }
          else if (LaunchServices::BindingEvaluation::sort(LaunchServices::BindingEvaluation::State &)::$_0::operator()(a2, (LaunchServices::BindingEvaluation::State *)(a1 + 96 * v29), (const LaunchServices::BindingEvaluation::ExtendedBinding *)(v11 + 6)))
          {
            v11 += 6;
          }
          else
          {
            uint64_t v10 = v29;
          }
        }
        while (!LaunchServices::BindingEvaluation::sort(LaunchServices::BindingEvaluation::State &)::$_0::operator()(a2, (LaunchServices::BindingEvaluation::State *)v11, (const LaunchServices::BindingEvaluation::ExtendedBinding *)&v41));
        long long v30 = v42;
        long long *v5 = v41;
        v5[1] = v30;
        uint64_t v31 = v43;
        *(void *)&long long v43 = 0;
        int v32 = (void *)*((void *)v5 + 4);
        *((void *)v5 + 4) = v31;

        uint64_t v33 = *((void *)&v43 + 1);
        *((void *)&v43 + 1) = 0;
        unint64_t v34 = (void *)*((void *)v5 + 5);
        *((void *)v5 + 5) = v33;

        *((_WORD *)v5 + 24) = v44;
        uint64_t v35 = v45;
        *(void *)&long long v45 = 0;
        LSVersionNumber v36 = (void *)*((void *)v5 + 7);
        *((void *)v5 + 7) = v35;

        uint64_t v37 = *((void *)&v45 + 1);
        *((void *)&v45 + 1) = 0;
        long long v38 = (void *)*((void *)v5 + 8);
        *((void *)v5 + 8) = v37;

        *((unsigned char *)v5 + 72) = v46;
        id v39 = v47;
        id v47 = 0;
        uint64_t v40 = (void *)*((void *)v5 + 10);
        *((void *)v5 + 10) = v39;

        *((_DWORD *)v5 + 22) = v48;
      }
    }
  }
}

void sub_18296FD48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
}

void _UTEnumerateTypesForIdentifier(void *a1, int a2, void *a3)
{
  id v5 = a1;
  id v6 = a3;
  uint64_t v7 = v6;
  if (v5 && a2 && v6)
  {
    id v8 = v5;
    id v9 = v7;
    _LSDatabaseEnumeratingBindingMap();
  }
}

void sub_18296FE40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_182970018(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18297012C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1829701CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZL30_LSPlistCreateTransformedValueP11objc_objectPFP8NSStringS2_PbES3__block_invoke_2(uint64_t a1, void *a2)
{
  id v6 = a2;
  int v3 = _NSIsNSString();
  id v4 = v6;
  if (v3)
  {
    uint64_t v5 = (*(void (**)(id, uint64_t))(a1 + 48))(v6, *(void *)(*(void *)(a1 + 40) + 8) + 24);

    id v4 = (id)v5;
  }
  id v7 = v4;
  objc_msgSend(*(id *)(a1 + 32), "addObject:");
}

void sub_182970374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182970754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,id a46)
{
  _Unwind_Resume(a1);
}

void sub_1829709BC(_Unwind_Exception *exception_object)
{
}

uint64_t __LSRECORD_GETTER__<unsigned int>(void *a1, LSRecord *a2, const char *a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1;
  os_unfair_recursive_lock_lock_with_options();
  CachedPropertyValue = LaunchServices::Record::getCachedPropertyValue(v5, a2, v6);
  if (v8)
  {
    uint64_t v9 = [CachedPropertyValue unsignedIntValue];
  }
  else
  {
    uint64_t v10 = _LSRecordLog();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      int v23 = 136446978;
      Name = sel_getName(a3);
      __int16 v25 = 2114;
      uint64_t v26 = objc_opt_class();
      __int16 v27 = 2048;
      long long v28 = v5;
      __int16 v29 = 2082;
      long long v30 = sel_getName((SEL)a2);
      _os_log_impl(&dword_182959000, v10, OS_LOG_TYPE_DEBUG, "Invoking selector %{public}s on <%{public}@ %p> to get the value for property %{public}s", (uint8_t *)&v23, 0x2Au);
    }

    int v11 = v5;
    uint64_t v12 = v11;
    long long v14 = (char *)v11 + 16;
    uint64_t v13 = *((void *)v11 + 2);
    if ((*((unsigned char *)v11 + 31) & 0x40) == 0 && !v13) {
      __LSRECORD_IS_CRASHING_DUE_TO_A_CALLER_BUG__((uint64_t)v11, (const char *)a2);
    }
    if (v13)
    {
      long long v15 = v11;
      uint64_t Unit = CSStoreGetUnit();
      uint64_t v17 = *((unsigned __int16 *)v15 + 14);
      uint64_t v18 = *((unsigned int *)v15 + 6);
      MethodImplementation = (uint64_t (*)(LaunchServices::Record *, const char *, char *, uint64_t, uint64_t, uint64_t))object_getMethodImplementation();
      uint64_t v9 = MethodImplementation(v15, a3, v14, v17, v18, Unit);
    }
    else
    {
      uint64_t v9 = 0;
    }

    unint64_t v20 = [NSNumber numberWithUnsignedInt:v9];
    LaunchServices::Record::setCachedPropertyValue(v12, a2, v20, v21);
  }
  os_unfair_recursive_lock_unlock();

  return v9;
}

void sub_182970C50(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {

    objc_begin_catch(exception_object);
    os_unfair_recursive_lock_unlock();
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_182970CB8(_Unwind_Exception *a1)
{
  objc_end_catch();

  _Unwind_Resume(a1);
}

void sub_182970CCC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

BOOL __LSRECORD_GETTER__<BOOL>(void *a1, LSRecord *a2, const char *a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1;
  os_unfair_recursive_lock_lock_with_options();
  CachedPropertyValue = LaunchServices::Record::getCachedPropertyValue(v5, a2, v6);
  if (v8)
  {
    if ((void *)*MEMORY[0x1E4F1CFD0] == CachedPropertyValue)
    {
      LODWORD(v9) = 1;
    }
    else if ((void *)*MEMORY[0x1E4F1CFC8] == CachedPropertyValue)
    {
      LODWORD(v9) = 0;
    }
    else
    {
      LODWORD(v9) = [CachedPropertyValue BOOLValue];
    }
  }
  else
  {
    uint64_t v10 = _LSRecordLog();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      int v23 = 136446978;
      Name = sel_getName(a3);
      __int16 v25 = 2114;
      uint64_t v26 = objc_opt_class();
      __int16 v27 = 2048;
      long long v28 = v5;
      __int16 v29 = 2082;
      long long v30 = sel_getName((SEL)a2);
      _os_log_impl(&dword_182959000, v10, OS_LOG_TYPE_DEBUG, "Invoking selector %{public}s on <%{public}@ %p> to get the value for property %{public}s", (uint8_t *)&v23, 0x2Au);
    }

    int v11 = v5;
    uint64_t v12 = v11;
    long long v14 = (char *)v11 + 16;
    uint64_t v13 = *((void *)v11 + 2);
    if ((*((unsigned char *)v11 + 31) & 0x40) == 0 && !v13) {
      __LSRECORD_IS_CRASHING_DUE_TO_A_CALLER_BUG__((uint64_t)v11, (const char *)a2);
    }
    if (v13)
    {
      long long v15 = v11;
      uint64_t Unit = CSStoreGetUnit();
      uint64_t v17 = *((unsigned __int16 *)v15 + 14);
      uint64_t v18 = *((unsigned int *)v15 + 6);
      MethodImplementation = (uint64_t (*)(LaunchServices::Record *, const char *, char *, uint64_t, uint64_t, uint64_t))object_getMethodImplementation();
      uint64_t v9 = MethodImplementation(v15, a3, v14, v17, v18, Unit);
    }
    else
    {
      uint64_t v9 = 0;
    }

    unint64_t v20 = [NSNumber numberWithBool:v9];
    LaunchServices::Record::setCachedPropertyValue(v12, a2, v20, v21);
  }
  os_unfair_recursive_lock_unlock();

  return v9 != 0;
}

void sub_182970F5C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {

    objc_begin_catch(exception_object);
    os_unfair_recursive_lock_unlock();
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_182970FC4(_Unwind_Exception *a1)
{
  objc_end_catch();

  _Unwind_Resume(a1);
}

void sub_182970FD8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t __LSRECORD_GETTER__<unsigned char>(void *a1, LSRecord *a2, const char *a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1;
  os_unfair_recursive_lock_lock_with_options();
  CachedPropertyValue = LaunchServices::Record::getCachedPropertyValue(v5, a2, v6);
  if (v8)
  {
    uint64_t v9 = [CachedPropertyValue unsignedCharValue];
  }
  else
  {
    uint64_t v10 = _LSRecordLog();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      int v23 = 136446978;
      Name = sel_getName(a3);
      __int16 v25 = 2114;
      uint64_t v26 = objc_opt_class();
      __int16 v27 = 2048;
      long long v28 = v5;
      __int16 v29 = 2082;
      long long v30 = sel_getName((SEL)a2);
      _os_log_impl(&dword_182959000, v10, OS_LOG_TYPE_DEBUG, "Invoking selector %{public}s on <%{public}@ %p> to get the value for property %{public}s", (uint8_t *)&v23, 0x2Au);
    }

    int v11 = v5;
    uint64_t v12 = v11;
    long long v14 = (char *)v11 + 16;
    uint64_t v13 = *((void *)v11 + 2);
    if ((*((unsigned char *)v11 + 31) & 0x40) == 0 && !v13) {
      __LSRECORD_IS_CRASHING_DUE_TO_A_CALLER_BUG__((uint64_t)v11, (const char *)a2);
    }
    if (v13)
    {
      long long v15 = v11;
      uint64_t Unit = CSStoreGetUnit();
      uint64_t v17 = *((unsigned __int16 *)v15 + 14);
      uint64_t v18 = *((unsigned int *)v15 + 6);
      MethodImplementation = (uint64_t (*)(LaunchServices::Record *, const char *, char *, uint64_t, uint64_t, uint64_t))object_getMethodImplementation();
      uint64_t v9 = MethodImplementation(v15, a3, v14, v17, v18, Unit);
    }
    else
    {
      uint64_t v9 = 0;
    }

    unint64_t v20 = [NSNumber numberWithUnsignedChar:v9];
    LaunchServices::Record::setCachedPropertyValue(v12, a2, v20, v21);
  }
  os_unfair_recursive_lock_unlock();

  return v9;
}

void sub_182971228(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {

    objc_begin_catch(exception_object);
    os_unfair_recursive_lock_unlock();
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_182971290(_Unwind_Exception *a1)
{
  objc_end_catch();

  _Unwind_Resume(a1);
}

void sub_1829712A4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_182971580(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
}

void sub_1829715E8(_Unwind_Exception *a1)
{
}

uint64_t __LSRECORD_GETTER__<unsigned long>(void *a1, LSRecord *a2, const char *a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1;
  os_unfair_recursive_lock_lock_with_options();
  CachedPropertyValue = LaunchServices::Record::getCachedPropertyValue(v5, a2, v6);
  if (v8)
  {
    uint64_t v9 = [CachedPropertyValue unsignedLongValue];
  }
  else
  {
    uint64_t v10 = _LSRecordLog();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      int v23 = 136446978;
      Name = sel_getName(a3);
      __int16 v25 = 2114;
      uint64_t v26 = objc_opt_class();
      __int16 v27 = 2048;
      long long v28 = v5;
      __int16 v29 = 2082;
      long long v30 = sel_getName((SEL)a2);
      _os_log_impl(&dword_182959000, v10, OS_LOG_TYPE_DEBUG, "Invoking selector %{public}s on <%{public}@ %p> to get the value for property %{public}s", (uint8_t *)&v23, 0x2Au);
    }

    int v11 = v5;
    uint64_t v12 = v11;
    long long v14 = (char *)v11 + 16;
    uint64_t v13 = *((void *)v11 + 2);
    if ((*((unsigned char *)v11 + 31) & 0x40) == 0 && !v13) {
      __LSRECORD_IS_CRASHING_DUE_TO_A_CALLER_BUG__((uint64_t)v11, (const char *)a2);
    }
    if (v13)
    {
      long long v15 = v11;
      uint64_t Unit = CSStoreGetUnit();
      uint64_t v17 = *((unsigned __int16 *)v15 + 14);
      uint64_t v18 = *((unsigned int *)v15 + 6);
      MethodImplementation = (uint64_t (*)(LaunchServices::Record *, const char *, char *, uint64_t, uint64_t, uint64_t))object_getMethodImplementation();
      uint64_t v9 = MethodImplementation(v15, a3, v14, v17, v18, Unit);
    }
    else
    {
      uint64_t v9 = 0;
    }

    unint64_t v20 = [NSNumber numberWithUnsignedLong:v9];
    LaunchServices::Record::setCachedPropertyValue(v12, a2, v20, v21);
  }
  os_unfair_recursive_lock_unlock();

  return v9;
}

void sub_18297183C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {

    objc_begin_catch(exception_object);
    os_unfair_recursive_lock_unlock();
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_1829718A4(_Unwind_Exception *a1)
{
  objc_end_catch();

  _Unwind_Resume(a1);
}

void sub_1829718B8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_182971994(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182971AB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __LSRECORD_GETTER__<unsigned long long>(void *a1, LSRecord *a2, const char *a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1;
  os_unfair_recursive_lock_lock_with_options();
  CachedPropertyValue = LaunchServices::Record::getCachedPropertyValue(v5, a2, v6);
  if (v8)
  {
    uint64_t v9 = [CachedPropertyValue unsignedLongLongValue];
  }
  else
  {
    uint64_t v10 = _LSRecordLog();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      int v23 = 136446978;
      Name = sel_getName(a3);
      __int16 v25 = 2114;
      uint64_t v26 = objc_opt_class();
      __int16 v27 = 2048;
      long long v28 = v5;
      __int16 v29 = 2082;
      long long v30 = sel_getName((SEL)a2);
      _os_log_impl(&dword_182959000, v10, OS_LOG_TYPE_DEBUG, "Invoking selector %{public}s on <%{public}@ %p> to get the value for property %{public}s", (uint8_t *)&v23, 0x2Au);
    }

    int v11 = v5;
    uint64_t v12 = v11;
    long long v14 = (char *)v11 + 16;
    uint64_t v13 = *((void *)v11 + 2);
    if ((*((unsigned char *)v11 + 31) & 0x40) == 0 && !v13) {
      __LSRECORD_IS_CRASHING_DUE_TO_A_CALLER_BUG__((uint64_t)v11, (const char *)a2);
    }
    if (v13)
    {
      long long v15 = v11;
      uint64_t Unit = CSStoreGetUnit();
      uint64_t v17 = *((unsigned __int16 *)v15 + 14);
      uint64_t v18 = *((unsigned int *)v15 + 6);
      MethodImplementation = (uint64_t (*)(LaunchServices::Record *, const char *, char *, uint64_t, uint64_t, uint64_t))object_getMethodImplementation();
      uint64_t v9 = MethodImplementation(v15, a3, v14, v17, v18, Unit);
    }
    else
    {
      uint64_t v9 = 0;
    }

    unint64_t v20 = [NSNumber numberWithUnsignedLongLong:v9];
    LaunchServices::Record::setCachedPropertyValue(v12, a2, v20, v21);
  }
  os_unfair_recursive_lock_unlock();

  return v9;
}

void sub_182971D20(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {

    objc_begin_catch(exception_object);
    os_unfair_recursive_lock_unlock();
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_182971D88(_Unwind_Exception *a1)
{
  objc_end_catch();

  _Unwind_Resume(a1);
}

void sub_182971D9C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_182971F10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182971FA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __LSRECORD_GETTER__<LSBundleBaseFlags>(void *a1, LSRecord *a2, const char *a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1;
  unsigned __int8 v23 = 0;
  os_unfair_recursive_lock_lock_with_options();
  CachedPropertyValue = LaunchServices::Record::getCachedPropertyValue(v5, a2, v6);
  if (v8)
  {
    [CachedPropertyValue getBytes:&v23 length:1];
  }
  else
  {
    uint64_t v9 = _LSRecordLog();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)id buf = 136446978;
      Name = sel_getName(a3);
      __int16 v26 = 2114;
      uint64_t v27 = objc_opt_class();
      __int16 v28 = 2048;
      __int16 v29 = v5;
      __int16 v30 = 2082;
      uint64_t v31 = sel_getName((SEL)a2);
      _os_log_impl(&dword_182959000, v9, OS_LOG_TYPE_DEBUG, "Invoking selector %{public}s on <%{public}@ %p> to get the value for property %{public}s", buf, 0x2Au);
    }

    uint64_t v10 = v5;
    int v11 = v10;
    uint64_t v13 = (char *)v10 + 16;
    uint64_t v12 = *((void *)v10 + 2);
    if ((*((unsigned char *)v10 + 31) & 0x40) == 0 && !v12) {
      __LSRECORD_IS_CRASHING_DUE_TO_A_CALLER_BUG__((uint64_t)v10, (const char *)a2);
    }
    if (v12)
    {
      long long v14 = v10;
      uint64_t Unit = CSStoreGetUnit();
      uint64_t v16 = *((unsigned __int16 *)v14 + 14);
      uint64_t v17 = *((unsigned int *)v14 + 6);
      MethodImplementation = (uint64_t (*)(LaunchServices::Record *, const char *, char *, uint64_t, uint64_t, uint64_t))object_getMethodImplementation();
      unsigned __int8 v23 = MethodImplementation(v14, a3, v13, v16, v17, Unit);
    }
    uint64_t v19 = (objc_selector *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:&v23 length:1];
    LaunchServices::Record::setCachedPropertyValue(v11, a2, v19, v20);
  }
  os_unfair_recursive_lock_unlock();

  uint64_t v21 = v23;
  return v21;
}

void sub_182972FEC(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {

    objc_begin_catch(exception_object);
    os_unfair_recursive_lock_unlock();
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_182973054(_Unwind_Exception *a1)
{
  objc_end_catch();

  _Unwind_Resume(a1);
}

void sub_182973068(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1829733CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id postprocessLocalizedNameishStringFromStringRecord(LSBundleRecord *a1, NSString *a2)
{
  int v3 = a2;
  id v4 = v3;
  if (!v3 || ![(NSString *)v3 length])
  {
    uint64_t v5 = [(LSBundleRecord *)a1 _fallbackLocalizedName];

    id v4 = (void *)v5;
  }

  return v4;
}

void sub_182973458(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __LSRECORD_GETTER__<LSVersionNumber>(void *a1@<X0>, LSRecord *a2@<X1>, const char *a3@<X2>, _OWORD *a4@<X8>)
{
  void (*MethodImplementation)(unsigned char *__return_ptr, LaunchServices::Record *, const char *, char *, uint64_t, uint64_t, uint64_t);
  long long v21;
  objc_selector *v22;
  objc_object *v23;
  unsigned char v24[32];
  __int16 v25;
  const char *Name;
  uint64_t v27;

  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  *a4 = 0u;
  a4[1] = 0u;
  os_unfair_recursive_lock_lock_with_options();
  CachedPropertyValue = LaunchServices::Record::getCachedPropertyValue(v7, a2, v8);
  if (v10)
  {
    [CachedPropertyValue getBytes:a4 length:32];
  }
  else
  {
    int v11 = _LSRecordLog();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t v24 = 136446978;
      *(void *)&v24[4] = sel_getName(a3);
      *(_WORD *)&v24[12] = 2114;
      *(void *)&v24[14] = objc_opt_class();
      *(_WORD *)&v24[22] = 2048;
      *(void *)&v24[24] = v7;
      __int16 v25 = 2082;
      Name = sel_getName((SEL)a2);
      _os_log_impl(&dword_182959000, v11, OS_LOG_TYPE_DEBUG, "Invoking selector %{public}s on <%{public}@ %p> to get the value for property %{public}s", v24, 0x2Au);
    }

    uint64_t v12 = v7;
    uint64_t v13 = v12;
    long long v15 = (char *)v12 + 16;
    uint64_t v14 = *((void *)v12 + 2);
    if ((*((unsigned char *)v12 + 31) & 0x40) == 0 && !v14) {
      __LSRECORD_IS_CRASHING_DUE_TO_A_CALLER_BUG__((uint64_t)v12, (const char *)a2);
    }
    if (v14)
    {
      uint64_t v16 = v12;
      uint64_t Unit = CSStoreGetUnit();
      uint64_t v18 = *((unsigned __int16 *)v16 + 14);
      uint64_t v19 = *((unsigned int *)v16 + 6);
      MethodImplementation = (void (*)(unsigned char *__return_ptr, LaunchServices::Record *, const char *, char *, uint64_t, uint64_t, uint64_t))object_getMethodImplementation();
      MethodImplementation(v24, v16, a3, v15, v18, v19, Unit);
      uint64_t v21 = *(_OWORD *)&v24[16];
      *a4 = *(_OWORD *)v24;
      a4[1] = v21;
    }
    id v22 = (objc_selector *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:a4 length:32];
    LaunchServices::Record::setCachedPropertyValue(v13, a2, v22, v23);
  }
  os_unfair_recursive_lock_unlock();
}

void sub_18297377C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {

    objc_begin_catch(exception_object);
    os_unfair_recursive_lock_unlock();
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_1829737E4(_Unwind_Exception *a1)
{
  objc_end_catch();

  _Unwind_Resume(a1);
}

void sub_1829737F8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_182973AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t _LSDatabaseGetSequenceNumber()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  long long v2 = 0u;
  long long v3 = 0u;
  memset(v1, 0, sizeof(v1));
  _LSDatabaseGetHeader(v1);
  return v2;
}

id _LSDatabaseGetCacheGUID()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  memset(v2, 0, sizeof(v2));
  _LSDatabaseGetHeader(v2);
  v0 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDBytes:(char *)&v2[11] + 8];

  return v0;
}

void sub_182973D0C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_182973D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t __LSRECORD_GETTER__<LSBundleMoreFlags>(void *a1, LSRecord *a2, const char *a3)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1;
  unsigned __int16 v25 = 0;
  unsigned __int8 v26 = 0;
  os_unfair_recursive_lock_lock_with_options();
  CachedPropertyValue = LaunchServices::Record::getCachedPropertyValue(v5, a2, v6);
  if (v8)
  {
    [CachedPropertyValue getBytes:&v25 length:3];
  }
  else
  {
    uint64_t v9 = _LSRecordLog();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)id buf = 136446978;
      Name = sel_getName(a3);
      __int16 v29 = 2114;
      uint64_t v30 = objc_opt_class();
      __int16 v31 = 2048;
      uint64_t v32 = v5;
      __int16 v33 = 2082;
      unint64_t v34 = sel_getName((SEL)a2);
      _os_log_impl(&dword_182959000, v9, OS_LOG_TYPE_DEBUG, "Invoking selector %{public}s on <%{public}@ %p> to get the value for property %{public}s", buf, 0x2Au);
    }

    char v10 = v5;
    int v11 = v10;
    uint64_t v13 = (char *)v10 + 16;
    uint64_t v12 = *((void *)v10 + 2);
    if ((*((unsigned char *)v10 + 31) & 0x40) == 0 && !v12) {
      __LSRECORD_IS_CRASHING_DUE_TO_A_CALLER_BUG__((uint64_t)v10, (const char *)a2);
    }
    if (v12)
    {
      uint64_t v14 = v10;
      uint64_t Unit = CSStoreGetUnit();
      uint64_t v16 = *((unsigned __int16 *)v14 + 14);
      uint64_t v17 = *((unsigned int *)v14 + 6);
      MethodImplementation = (uint64_t (*)(LaunchServices::Record *, const char *, char *, uint64_t, uint64_t, uint64_t))object_getMethodImplementation();
      uint64_t v19 = MethodImplementation(v14, a3, v13, v16, v17, Unit);
      unsigned __int16 v25 = v19;
      unsigned __int8 v26 = BYTE2(v19);
    }
    unint64_t v20 = (objc_selector *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:&v25 length:3];
    LaunchServices::Record::setCachedPropertyValue(v11, a2, v20, v21);
  }
  os_unfair_recursive_lock_unlock();

  int v22 = v26;
  int v23 = v25;

  return v23 | (v22 << 16);
}

void sub_182973FF8(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {

    objc_begin_catch(exception_object);
    os_unfair_recursive_lock_unlock();
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_182974060(_Unwind_Exception *a1)
{
  objc_end_catch();

  _Unwind_Resume(a1);
}

void sub_182974074(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

BOOL _LSDatabaseContextGetDetachProxyObjects(LaunchServices::DatabaseContext *a1)
{
  return *((unsigned char *)LaunchServices::DatabaseContext::getPerThreadStateReference(a1) + 40) == 0;
}

void sub_1829741E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSBundleDataGetModTime(uint64_t a1)
{
  return *(unsigned int *)(a1 + 196);
}

void sub_182974334(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t MCFeatureSystemAppRemovalAllowedFunction()
{
  return constantMCFeatureSystemAppRemovalAllowed;
}

void sub_182974650(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<void const*,std::vector<std::pair<objc_selector *,void (*)(objc_object *,objc_selector *)>>>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,std::vector<std::pair<objc_selector *,void (*)(objc_object *,objc_selector *)>>>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,std::vector<std::pair<objc_selector *,void (*)(objc_object *,objc_selector *)>>>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,std::vector<std::pair<objc_selector *,void (*)(objc_object *,objc_selector *)>>>>>::__emplace_unique_key_args<void const*,void const*,std::vector<std::pair<objc_selector *,void (*)(objc_object *,objc_selector *)>>>(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  unint64_t v8 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v9 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v8 >> 47) ^ v8);
  unint64_t v10 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    uint64_t v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      uint64_t v14 = (char *)*v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = *((void *)v14 + 1);
          if (v15 == v10)
          {
            if (*((void *)v14 + 2) == *a2) {
              return v14;
            }
          }
          else
          {
            if (v12.u32[0] > 1uLL)
            {
              if (v15 >= v11) {
                v15 %= v11;
              }
            }
            else
            {
              v15 &= v11 - 1;
            }
            if (v15 != v4) {
              break;
            }
          }
          uint64_t v14 = *(char **)v14;
        }
        while (v14);
      }
    }
  }
  uint64_t v16 = (void *)(a1 + 16);
  uint64_t v14 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v14 = 0;
  *((void *)v14 + 1) = v10;
  *((void *)v14 + 2) = *a3;
  *(_OWORD *)(v14 + 24) = *(_OWORD *)a4;
  *((void *)v14 + 5) = *(void *)(a4 + 16);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(void *)a1;
  uint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *(void *)uint64_t v14 = *v24;
LABEL_38:
    *uint64_t v24 = v14;
    goto LABEL_39;
  }
  *(void *)uint64_t v14 = *v16;
  *uint64_t v16 = v14;
  *(void *)(v23 + 8 * v4) = v16;
  if (*(void *)v14)
  {
    unint64_t v25 = *(void *)(*(void *)v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v25 >= v11) {
        v25 %= v11;
      }
    }
    else
    {
      v25 &= v11 - 1;
    }
    uint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_182974998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<void const*,std::vector<std::pair<objc_selector *,void (*)(objc_object *,objc_selector *)>>>,void *>>>::operator()[abi:nn180100](v11, v10);
  _Unwind_Resume(a1);
}

void sub_182974B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

uint64_t initMCFeatureSystemAppRemovalAllowed()
{
  v0 = (void *)ManagedConfigurationLibrary_frameworkLibrary;
  if (!ManagedConfigurationLibrary_frameworkLibrary)
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/ManagedConfiguration.framework/ManagedConfiguration", 2);
    ManagedConfigurationLibrary_frameworkLibrary = (uint64_t)v0;
  }
  uint64_t result = *(void *)dlsym(v0, "MCFeatureSystemAppRemovalAllowed");
  constantMCFeatureSystemAppRemovalAllowed = result;
  getMCFeatureSystemAppRemovalAllowed[0] = MCFeatureSystemAppRemovalAllowedFunction;
  return result;
}

void sub_182974C60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182974CF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182974F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);

  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)va);
  _Unwind_Resume(a1);
}

uint64_t findPluginDataInContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, void *a8)
{
  uint64_t v19 = 0;
  unint64_t v20 = &v19;
  uint64_t v21 = 0x3032000000;
  size_t v22 = __Block_byref_object_copy__0;
  uint64_t v23 = __Block_byref_object_dispose__0;
  id v24 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = &v15;
  uint64_t v17 = 0x2020000000;
  uint64_t v18 = 0;
  if (a5) {
    char v9 = 4;
  }
  else {
    char v9 = 0;
  }
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = ___ZL23findPluginDataInContextP9LSContextP6NSUUIDP6FSNodeP8NSStringbjPjPU15__autoreleasingP7NSError_block_invoke;
  v12[3] = &unk_1E522BAC8;
  v12[4] = a2;
  v12[5] = a4;
  char v14 = v9;
  void v12[6] = a3;
  v12[7] = &v15;
  int v13 = a6;
  v12[9] = a1;
  v12[10] = a7;
  v12[8] = &v19;
  __LSRECORD_IS_PERFORMING_IO_FOR_A_CALLER__((uint64_t)v12);
  if (a8) {
    *a8 = (id) v20[5];
  }
  uint64_t v10 = v16[3];
  _Block_object_dispose(&v15, 8);
  _Block_object_dispose(&v19, 8);

  return v10;
}

void sub_182975090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 64), 8);

  _Unwind_Resume(a1);
}

void _LSAssertRunningInServer(uint64_t a1)
{
  if (([(id)__LSDefaultsGetSharedInstance() isServer] & 1) == 0)
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v2 = [NSString stringWithUTF8String:"void _LSAssertRunningInServer(const char *)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v2, @"LSUtils.mm", 1086, @"Must call %s from within the Launch Services daemon.", a1);
  }
}

void sub_18297516C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18297530C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);

  _Unwind_Resume(a1);
}

void sub_182975488(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829755A0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_18297574C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);

  _Unwind_Resume(a1);
}

void sub_182975874(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_recursive_lock_unlock();
  objc_exception_rethrow();
}

void sub_182975898(_Unwind_Exception *a1)
{
}

void sub_182975914(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSDNCBalanceBiDiControlCharacters(NSString *a1)
{
  uint64_t v1 = a1;
  long long v2 = v1;
  if (v1)
  {
    uint64_t v11 = 0;
    uint8x8_t v12 = &v11;
    uint64_t v13 = 0x2020000000;
    uint64_t v14 = 0;
    uint64_t v7 = 0;
    unint64_t v8 = &v7;
    uint64_t v9 = 0x2020000000;
    uint64_t v10 = 0;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    v6[2] = ___ZL34_LSDNCBalanceBiDiControlCharactersP8NSString_block_invoke;
    v6[3] = &unk_1E522EB70;
    v6[4] = &v11;
    v6[5] = &v7;
    _LSDNCWithInlineBuffer(v1, v6);
    _LSDNCBalanceBiDiControlCharacterInString(8236, v2, v12[3]);
    id v3 = (NSString *)objc_claimAutoreleasedReturnValue();

    unint64_t v4 = _LSDNCBalanceBiDiControlCharacterInString(8297, v3, v8[3]);

    _Block_object_dispose(&v7, 8);
    _Block_object_dispose(&v11, 8);
  }
  else
  {
    unint64_t v4 = 0;
  }

  return v4;
}

void sub_182975A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);

  _Unwind_Resume(a1);
}

NSString *_LSDNCBalanceBiDiControlCharacterInString(__int16 a1, NSString *a2, uint64_t a3)
{
  __int16 v14 = a1;
  unint64_t v4 = a2;
  uint64_t v5 = v4;
  id v6 = v4;
  if (a3)
  {
    uint64_t v7 = (void *)[(NSString *)v4 mutableCopy];
    id v6 = v5;
    if (v7)
    {
      if (a3 <= 0)
      {
        do
          [v7 appendCharacters:&v14 length:1];
        while (!__CFADD__(a3++, 1));
      }
      else
      {
        unint64_t v8 = (void *)[[NSString alloc] initWithCharacters:&v14 length:1];
        uint64_t v9 = a3 + 1;
        do
        {
          uint64_t v11 = [v7 rangeOfString:v8 options:4];
          if (v11 != 0x7FFFFFFFFFFFFFFFLL) {
            objc_msgSend(v7, "deleteCharactersInRange:", v11, v10);
          }
          --v9;
        }
        while (v9 > 1);
      }
      id v6 = (NSString *)[v7 copy];
    }
  }

  return v6;
}

void sub_182975BAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NSString *_LSDNCReplaceForbiddenCharacters(NSString *a1, char a2)
{
  id v3 = a1;
  unint64_t v4 = _LSDNCGetForbiddenCharacters(a2);
  uint64_t v16 = 0;
  uint64_t v17 = &v16;
  uint64_t v18 = 0x3032000000;
  uint64_t v19 = __Block_byref_object_copy__21;
  unint64_t v20 = __Block_byref_object_dispose__21;
  id v21 = 0;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = ___ZL32_LSDNCReplaceForbiddenCharactersP8NSStringj_block_invoke;
  v12[3] = &unk_1E522EB48;
  id v5 = v4;
  id v13 = v5;
  uint64_t v15 = &v16;
  id v6 = v3;
  __int16 v14 = v6;
  _LSDNCWithInlineBuffer(v6, v12);
  uint64_t v7 = (void *)v17[5];
  unint64_t v8 = v6;
  if (v7)
  {
    unint64_t v8 = v7;
  }
  uint64_t v9 = v14;
  uint64_t v10 = v8;

  _Block_object_dispose(&v16, 8);

  return v10;
}

void sub_182975D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void _LSDNCWithInlineBuffer(void *a1, void *a2)
{
  id v3 = a1;
  unint64_t v4 = a2;
  uint64_t v5 = [(__CFString *)v3 length];
  unint64_t v8 = v3;
  uint64_t v11 = 0;
  uint64_t v12 = v5;
  if (CFStringGetCharactersPtr(v3)) {
    CStringPtr = 0;
  }
  else {
    CStringPtr = CFStringGetCStringPtr(v3, 0x600u);
  }
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v10 = CStringPtr;
  v4[2](v4, v7, v5);
}

void sub_182975E14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSDNCGetForbiddenCharacters(char a1)
{
  if (_LSDNCGetForbiddenCharacters::once != -1) {
    dispatch_once(&_LSDNCGetForbiddenCharacters::once, &__block_literal_global_164);
  }
  long long v2 = &_LSDNCGetForbiddenCharacters::forbiddenWithNewlines;
  if (a1) {
    long long v2 = &_LSDNCGetForbiddenCharacters::forbiddenWithoutNewlines;
  }
  id v3 = (void *)*v2;

  return v3;
}

void ___ZL34_LSDNCBalanceBiDiControlCharactersP8NSString_block_invoke(uint64_t a1, UniChar *buffer, uint64_t a3)
{
  if (a3)
  {
    uint64_t v6 = 0;
    int64_t v7 = 0;
    uint64_t v8 = 64;
    do
    {
      if ((unint64_t)v7 >= 4) {
        uint64_t v9 = 4;
      }
      else {
        uint64_t v9 = v7;
      }
      if (v7 < 0) {
        goto LABEL_35;
      }
      int64_t v10 = *((void *)buffer + 20);
      if (v10 <= v7) {
        goto LABEL_35;
      }
      uint64_t v11 = *((void *)buffer + 17);
      if (v11)
      {
        UniChar v12 = *(_WORD *)(v11 + 2 * (v7 + *((void *)buffer + 19)));
      }
      else
      {
        uint64_t v13 = *((void *)buffer + 18);
        if (v13)
        {
          UniChar v12 = *(char *)(v13 + *((void *)buffer + 19) + v7);
        }
        else
        {
          if (*((void *)buffer + 22) <= v7 || (int64_t v14 = *((void *)buffer + 21), v14 > v7))
          {
            uint64_t v15 = -v9;
            uint64_t v16 = v9 + v6;
            uint64_t v17 = v8 - v9;
            int64_t v18 = v7 + v15;
            int64_t v19 = v18 + 64;
            if (v18 + 64 >= v10) {
              int64_t v19 = *((void *)buffer + 20);
            }
            *((void *)buffer + 21) = v18;
            *((void *)buffer + 22) = v19;
            if (v10 >= v17) {
              int64_t v10 = v17;
            }
            v25.length = v10 + v16;
            v25.location = v18 + *((void *)buffer + 19);
            CFStringGetCharacters(*((CFStringRef *)buffer + 16), v25, buffer);
            int64_t v14 = *((void *)buffer + 21);
          }
          UniChar v12 = buffer[v7 - v14];
        }
      }
      if (v12 > 0x2065u)
      {
        if (v12 - 8294 < 3)
        {
          uint64_t v21 = *(void *)(a1 + 40);
LABEL_28:
          size_t v22 = (void *)(*(void *)(v21 + 8) + 24);
          uint64_t v23 = -1;
          goto LABEL_34;
        }
        if (v12 == 8297)
        {
          uint64_t v24 = *(void *)(a1 + 40);
LABEL_33:
          size_t v22 = (void *)(*(void *)(v24 + 8) + 24);
          uint64_t v23 = 1;
LABEL_34:
          *v22 += v23;
        }
      }
      else
      {
        if (v12 - 8234 < 2 || v12 - 8237 < 2)
        {
          uint64_t v21 = *(void *)(a1 + 32);
          goto LABEL_28;
        }
        if (v12 == 8236)
        {
          uint64_t v24 = *(void *)(a1 + 32);
          goto LABEL_33;
        }
      }
LABEL_35:
      ++v7;
      --v6;
      ++v8;
    }
    while (a3 != v7);
  }
}

uint64_t ___ZL32_LSDNCReplaceForbiddenCharactersP8NSStringj_block_invoke(uint64_t result, CFStringInlineBuffer *a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v5 = result;
    uint64_t v6 = 0;
    CFIndex v7 = 0;
    uint64_t v8 = 64;
    do
    {
      if ((unint64_t)v7 >= 4) {
        uint64_t v9 = 4;
      }
      else {
        uint64_t v9 = v7;
      }
      if (v7 < 0 || (CFIndex v10 = a2->rangeToBuffer.length, v10 <= v7))
      {
        UniChar v12 = 0;
      }
      else
      {
        directUniCharBuffer = a2->directUniCharBuffer;
        if (directUniCharBuffer)
        {
          UniChar v12 = directUniCharBuffer[v7 + a2->rangeToBuffer.location];
        }
        else
        {
          directCStringBuffer = a2->directCStringBuffer;
          if (directCStringBuffer)
          {
            UniChar v12 = directCStringBuffer[a2->rangeToBuffer.location + v7];
          }
          else
          {
            if (a2->bufferedRangeEnd <= v7 || (CFIndex bufferedRangeStart = a2->bufferedRangeStart, bufferedRangeStart > v7))
            {
              uint64_t v19 = -v9;
              uint64_t v20 = v9 + v6;
              CFIndex v21 = v8 - v9;
              CFIndex v22 = v7 + v19;
              CFIndex length = v22 + 64;
              if (v22 + 64 >= v10) {
                CFIndex length = a2->rangeToBuffer.length;
              }
              a2->CFIndex bufferedRangeStart = v22;
              a2->bufferedRangeEnd = length;
              if (v10 >= v21) {
                CFIndex v10 = v21;
              }
              v24.CFIndex length = v10 + v20;
              v24.location = v22 + a2->rangeToBuffer.location;
              CFStringGetCharacters(a2->theString, v24, a2->buffer);
              CFIndex bufferedRangeStart = a2->bufferedRangeStart;
            }
            UniChar v12 = a2->buffer[v7 - bufferedRangeStart];
          }
        }
      }
      uint64_t result = _LSDNCCharacterSetContainsCharacterFromInlineBuffer(*(NSCharacterSet **)(v5 + 32), v12, a2, v7);
      if (result)
      {
        uint64_t v13 = *(void **)(*(void *)(*(void *)(v5 + 48) + 8) + 40);
        if (!v13)
        {
          uint64_t v14 = [*(id *)(v5 + 40) mutableCopy];
          uint64_t v15 = *(void *)(*(void *)(v5 + 48) + 8);
          uint64_t v16 = *(void **)(v15 + 40);
          *(void *)(v15 + 40) = v14;

          uint64_t v13 = *(void **)(*(void *)(*(void *)(v5 + 48) + 8) + 40);
        }
        uint64_t result = objc_msgSend(v13, "replaceCharactersInRange:withCharacters:length:", v7, 1, &_LSDisplayNameConstructorForbiddenCharacterSubstitute, 1);
      }
      ++v7;
      --v6;
      ++v8;
    }
    while (a3 != v7);
  }
  return result;
}

uint64_t _LSDNCCharacterSetContainsCharacterFromInlineBuffer(NSCharacterSet *a1, uint64_t a2, CFStringInlineBuffer *a3, uint64_t a4)
{
  CFIndex v7 = a1;
  if (![(NSCharacterSet *)v7 characterIsMember:a2])
  {
    if ((a2 & 0xF800 | 0x400) != 0xDC00)
    {
      uint64_t v8 = 0;
      goto LABEL_23;
    }
    if (a4 == 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v16 = [MEMORY[0x1E4F28B00] currentHandler];
      uint64_t v17 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL _LSDNCCharacterSetContainsCharacterFromInlineBuffer(NSCharacterSet *__strong, unichar, CFStringInlineBuffer *, CFIndex)");
      [v16 handleFailureInFunction:v17 file:@"LSDisplayNameConstructor.mm" lineNumber:1704 description:@"Insanely long string for display name"];
    }
    else if (a4 >= -1)
    {
      int64_t v9 = a4 + 1;
      CFIndex length = a3->rangeToBuffer.length;
      if (length > a4 + 1)
      {
        directUniCharBuffer = a3->directUniCharBuffer;
        if (directUniCharBuffer)
        {
          UniChar v12 = directUniCharBuffer[a3->rangeToBuffer.location + v9];
        }
        else
        {
          directCStringBuffer = a3->directCStringBuffer;
          if (directCStringBuffer)
          {
            UniChar v12 = directCStringBuffer[a3->rangeToBuffer.location + v9];
          }
          else
          {
            if (a3->bufferedRangeEnd <= v9 || (CFIndex bufferedRangeStart = a3->bufferedRangeStart, bufferedRangeStart > v9))
            {
              CFIndex v15 = a4 - 3;
              if ((unint64_t)v9 < 4) {
                CFIndex v15 = 0;
              }
              if (v15 + 64 < length) {
                CFIndex length = v15 + 64;
              }
              a3->CFIndex bufferedRangeStart = v15;
              a3->bufferedRangeEnd = length;
              v19.location = a3->rangeToBuffer.location + v15;
              v19.CFIndex length = length - v15;
              CFStringGetCharacters(a3->theString, v19, a3->buffer);
              CFIndex bufferedRangeStart = a3->bufferedRangeStart;
            }
            UniChar v12 = a3->buffer[v9 - bufferedRangeStart];
          }
        }
        goto LABEL_22;
      }
    }
    UniChar v12 = 0;
LABEL_22:
    uint64_t v8 = [(NSCharacterSet *)v7 longCharacterIsMember:(a2 << 10) + v12 - 56613888];
    goto LABEL_23;
  }
  uint64_t v8 = 1;
LABEL_23:

  return v8;
}

void sub_182976394(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NSObject *LaunchServices::LocalizedString::localizeUnsafely(uint64_t a1, void *a2, void *a3)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  CFArrayRef prefArray = a3;
  __int16 v29 = v5;
  if (!v5)
  {
    uint64_t v23 = [MEMORY[0x1E4F28B00] currentHandler];
    CFRange v24 = objc_msgSend(NSString, "stringWithUTF8String:", "NSString *LaunchServices::LocalizedString::localizeUnsafely(_LSDatabase *__strong _Nonnull, NSArray<NSString *> *__strong _Nullable) const");
    [v23 handleFailureInFunction:v24, @"LSLocalizedString.mm", 163, @"Invalid parameter not satisfying: %@", @"db != nil" file lineNumber description];
  }
  context = (void *)MEMORY[0x18530F680]();
  if ((*(unsigned char *)(a1 + 8) & 2) != 0)
  {
    uint64_t v19 = _CSStringCopyCFString();
    if (*(unsigned char *)(a1 + 8)) {
      uint64_t v20 = @"‚ú¥Ô∏è";
    }
    else {
      uint64_t v20 = @"üîÇ";
    }
    uint64_t v13 = v19;
  }
  else
  {
    if (!*(_DWORD *)a1 || (uint64_t v28 = *(unsigned int *)(a1 + 4), !v28))
    {
      uint64_t v13 = 0;
      goto LABEL_47;
    }
    if (!prefArray)
    {
      CFArrayRef prefArray = [(id)__LSDefaultsGetSharedInstance() preferredLocalizations];
    }
    _LSDatabaseGetStringArray(v5);
    CFArrayRef v6 = (const __CFArray *)objc_claimAutoreleasedReturnValue();
    CFArrayRef v7 = 0;
    if (prefArray && v6) {
      CFArrayRef v7 = CFBundleCopyLocalizationsForPreferences(v6, prefArray);
    }
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    CFArrayRef v8 = v7;
    CFArrayRef v27 = v8;
    uint64_t v9 = [(__CFArray *)v8 countByEnumeratingWithState:&v32 objects:v44 count:16];
    if (v9)
    {
      uint64_t v10 = *(void *)v33;
      do
      {
        uint64_t v11 = 0;
        do
        {
          if (*(void *)v33 != v10) {
            objc_enumerationMutation(v8);
          }
          CFArrayRef v12 = *(const __CFArray **)(*((void *)&v32 + 1) + 8 * v11);
          if ([(__CFArray *)v12 isEqual:@"LSDefaultLocalizedValue"])
          {
            uint64_t v13 = _LSDefaultLog();
            if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
              LaunchServices::LocalizedString::localizeUnsafely(&v30, v31, v13);
            }
          }
          else
          {
            unint64_t v14 = [(__CFArray *)v6 indexOfObject:v12];
            if (v14 == 0x7FFFFFFFFFFFFFFFLL || v14 >= [(__CFArray *)v6 count])
            {
              uint64_t v13 = _LSDefaultLog();
              if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)id buf = 138543618;
                unint64_t v37 = (unint64_t)v12;
                __int16 v38 = 2114;
                CFArrayRef v39 = v6;
                _os_log_debug_impl(&dword_182959000, v13, OS_LOG_TYPE_DEBUG, "Unexpected: localization %{public}@ was not found in bundle localizations list %{public}@", buf, 0x16u);
              }
            }
            else
            {
              int ValueAtIndex = _CSArrayGetValueAtIndex();
              uint64_t v16 = _CSStringCopyCFString();
              uint64_t v13 = v16;
              CFArrayRef v8 = v27;
              if (v16)
              {
                if ([v16 length])
                {

                  goto LABEL_41;
                }
              }
              else
              {
                if (!ValueAtIndex) {
                  goto LABEL_33;
                }
                uint64_t v17 = _LSDefaultLog();
                if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)id buf = 134218754;
                  unint64_t v37 = v14;
                  __int16 v38 = 2114;
                  CFArrayRef v39 = v12;
                  __int16 v40 = 2048;
                  uint64_t v41 = v28;
                  __int16 v42 = 2048;
                  uint64_t v43 = v28;
                  _os_log_debug_impl(&dword_182959000, v17, OS_LOG_TYPE_DEBUG, "Unexpected: could not get value #%lu (key %{public}@) from localized name array %llu(%llx)", buf, 0x2Au);
                }
              }
            }
          }

          ++v11;
        }
        while (v9 != v11);
        uint64_t v18 = [(__CFArray *)v8 countByEnumeratingWithState:&v32 objects:v44 count:16];
        uint64_t v9 = v18;
      }
      while (v18);
    }
LABEL_33:

    if ([(__CFArray *)v8 count]
      && [(__CFArray *)v6 indexOfObject:@"LSDefaultLocalizedValue"] != 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v13 = _LSDatabaseGetNSStringFromArray(v29);
      uint64_t v20 = @"üî¥";
    }
    else
    {
      uint64_t v13 = 0;
LABEL_41:
      uint64_t v20 = @"‚ùáÔ∏è";
    }
  }
  if (v13 && [(id)__LSDefaultsGetSharedInstance() markLocalizationsStoredInDatabase])
  {
    uint64_t v21 = [v13 stringByAppendingString:v20];

    uint64_t v13 = v21;
  }
LABEL_47:

  return v13;
}

void sub_1829768EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

id _LSDatabaseGetNSStringFromArray(void *a1)
{
  id v1 = a1;
  _CSArrayGetValueAtIndex();
  long long v2 = (void *)_CSStringCopyCFString();

  return v2;
}

void sub_182976B3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSContextInit(id *a1)
{
  IsCurrentThreadInLSContextInitReference = getIsCurrentThreadInLSContextInitReference();
  ++*IsCurrentThreadInLSContextInitReference;
  id v3 = +[_LSDServiceDomain defaultServiceDomain]();
  id v8 = 0;
  LOBYTE(a1) = _LSContextInitCommon(a1, v3, 0, &v8);
  id v4 = v8;

  if (a1) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = _LSGetOSStatusFromNSError(v4);
  }
  CFArrayRef v6 = getIsCurrentThreadInLSContextInitReference();
  --*v6;

  return v5;
}

void sub_182976C00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL _LSDatabaseNeedsUpdate(_LSDatabase *a1)
{
  id v1 = a1;
  if ((*((unsigned char *)v1 + 1664) & 6) != 0)
  {
    BOOL v2 = 0;
  }
  else
  {
    os_unfair_recursive_lock_lock_with_options();
    if (*((unsigned char *)v1 + 1664))
    {
      BOOL v2 = 1;
    }
    else
    {
      LSSessionKey sessionKey = v1->sessionKey;
      BOOL v2 = _LSDatabaseNotificationCheck(sessionKey);
      *((unsigned char *)v1 + 1664) = *((unsigned char *)v1 + 1664) & 0xFE | v2;
    }
    os_unfair_recursive_lock_unlock();
  }

  return v2;
}

void sub_182976CA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL _LSDatabaseNotificationCheck(LSSessionKey a1)
{
  os_unfair_recursive_lock_lock_with_options();
  LSSessionKey v2 = a1;
  id v3 = (unsigned int *)(_LSGetSession(v2) + 16);
  int v4 = atomic_load(v3);
  if (!notify_is_valid_token(v4))
  {
    uint64_t v5 = [(id)__LSDefaultsGetSharedInstance() databaseUpdateNotificationNameForSessionKey:a1];
    LaunchServices::notifyd::NotifyToken::RegisterCheck(v5, &v11);
    LaunchServices::notifyd::NotifyToken::operator=((atomic_uint *)v3, (atomic_uint *)&v11);
    LaunchServices::notifyd::NotifyToken::~NotifyToken((LaunchServices::notifyd::NotifyToken *)&v11);
  }
  if (([(id)__LSDefaultsGetSharedInstance() hasServer] & 1) != 0
    || [(id)__LSDefaultsGetSharedInstance() isServer])
  {
    int v6 = atomic_load(v3);
    if (notify_is_valid_token(v6))
    {
      unint64_t v7 = LaunchServices::notifyd::NotifyToken::checkValue((LaunchServices::notifyd::NotifyToken *)v3);
      BOOL v9 = (v7 & 0xFF00000000) == 0 || v7 != 0;
    }
    else
    {
      BOOL v9 = 1;
    }
  }
  else
  {
    BOOL v9 = 0;
  }
  os_unfair_recursive_lock_unlock();
  return v9;
}

void sub_182976D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11)
{
  LaunchServices::notifyd::NotifyToken::~NotifyToken((LaunchServices::notifyd::NotifyToken *)&a11);

  _Unwind_Resume(a1);
}

uint64_t _LSContextInitCommon(id *a1, void *a2, char a3, void *a4)
{
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  IsCurrentThreadInLSContextInitReference = getIsCurrentThreadInLSContextInitReference();
  ++*IsCurrentThreadInLSContextInitReference;
  __LAUNCH_SERVICES_IS_GENERATING_A_SANDBOX_EXCEPTION_BECAUSE_THIS_PROCESS_MAY_NOT_MAP_THE_DATABASE__();
  __LAUNCH_SERVICES_IS_ABORTING_BECAUSE_THIS_PROCESS_MAY_NOT_MAP_THE_DATABASE__();
  *a1 = 0;
  if ([(id)__LSDefaultsGetSharedInstance() isServer])
  {
    id v67 = 0;
    BOOL v9 = (void *)_LSServer_CopyLocalDatabase(&v67);
    if (!v9)
    {
      unint64_t v10 = _LSServer_SelfSessionKey();
      unsigned int v11 = _LSDatabaseCreateFromPersistentStore(7, 0, &v67);
      CFArrayRef v12 = v11;
      if (!v11)
      {
        BOOL v9 = 0;
        if ((a3 & 4) == 0)
        {
LABEL_7:
          if (v9) {
            objc_storeStrong(a1, v9);
          }
          BOOL v15 = v9 == 0;

          id v16 = v67;
          if (!v15) {
            goto LABEL_10;
          }
          goto LABEL_67;
        }
LABEL_6:
        id v14 = _LSDatabaseCreateSnapshot(v9, &v67);

        BOOL v9 = v14;
        goto LABEL_7;
      }
      _LSSetLocalDatabase(v11);
      id v13 = _LSCopyLocalDatabase(v10, &v67);

      BOOL v9 = v13;
    }
    if ((a3 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v18 = (_LSDServiceDomain *)v7;
  id location = 0;
  uint64_t v19 = -[_LSDServiceDomain resolvedSessionKey]((uint64_t)v18);
  if ((os_unfair_recursive_lock_trylock() & 1) == 0)
  {
    if (a3)
    {
      unint64_t v66 = a4;
      uint64_t v20 = v18;
      uint64_t v21 = availabilityStateForServiceDomain(v20);
      CFIndex v22 = v21;
      if (atomic_load_explicit((atomic_uchar *volatile)v21, memory_order_acquire))
      {

        goto LABEL_25;
      }
      unint64_t explicit = atomic_load_explicit(v21 + 1, memory_order_acquire);
      os_unfair_lock_lock((os_unfair_lock_t)v21 + 4);
      if (explicit == v22[1])
      {
        unint64_t v65 = explicit;
        CFRange v24 = v20;
        CFRange v25 = objc_opt_class();
        unsigned __int8 v26 = _LSDServiceGetXPCConnection(v25, (uint64_t)v24);
        CFArrayRef v27 = [v26 synchronousRemoteObjectProxyWithErrorHandler:&__block_literal_global_378];

        obuint64_t j = 0;
        p_obuint64_t j = &obj;
        uint64_t v78 = 0x2020000000;
        int v79 = 0;
        int v71 = 0;
        long long v72 = &v71;
        uint64_t v73 = 0x2020000000;
        char v74 = 0;
        *(void *)&block[0] = MEMORY[0x1E4F143A8];
        *((void *)&block[0] + 1) = 3221225472;
        *(void *)&block[1] = ___ZL34LSCheckDatabaseAvailableWithServerP17_LSDServiceDomain_block_invoke_379;
        *((void *)&block[1] + 1) = &unk_1E522E470;
        *(void *)&long long v81 = &obj;
        *((void *)&v81 + 1) = &v71;
        [v27 getServerStatusWithCompletionHandler:block];
        if (*((unsigned char *)v72 + 24))
        {
          BOOL v28 = (p_obj[3] & 0x80) == 0;
          _Block_object_dispose(&v71, 8);
          _Block_object_dispose(&obj, 8);

          a4 = v66;
          if (v28)
          {
            atomic_store(1u, (unsigned __int8 *)v22);
            atomic_store(v65 + 1, v22 + 1);
            os_unfair_lock_unlock((os_unfair_lock_t)v22 + 4);

            goto LABEL_25;
          }
        }
        else
        {
          _Block_object_dispose(&v71, 8);
          _Block_object_dispose(&obj, 8);

          a4 = v66;
        }
        atomic_store(v65 + 1, v22 + 1);
        os_unfair_lock_unlock((os_unfair_lock_t)v22 + 4);
      }
      else
      {
        unsigned __int8 v44 = *(unsigned char *)v22;
        os_unfair_lock_unlock((os_unfair_lock_t)v22 + 4);

        if (v44) {
          goto LABEL_25;
        }
      }
      obuint64_t j = (id)*MEMORY[0x1E4F28228];
      *(void *)&block[0] = @"Database not availabile yet";
      long long v49 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:block forKeys:&obj count:1];
      v63 = _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28798], 36, (uint64_t)"_LSContextInitClient", 3035, v49);
      id v64 = location;
      id location = v63;

      goto LABEL_56;
    }
LABEL_25:
    os_unfair_recursive_lock_lock_with_options();
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)&gSessionLock);
  obuint64_t j = location;
  __int16 v29 = (_LSDatabase *)_LSCopyLocalDatabase(v19, &obj);
  objc_storeStrong(&location, obj);
  if (v29)
  {
    BOOL v30 = _LSDatabaseNeedsUpdate(v29);
    if ((a3 & 2) == 0 && !v30)
    {
      os_unfair_recursive_lock_unlock();
LABEL_62:
      objc_storeStrong(a1, v29);
      id v50 = 0;
      char v51 = 1;
      goto LABEL_66;
    }
  }
  else
  {
    LSSessionKey v31 = (LSSessionKey)v19;
    _LSDatabaseNotificationCheck(v31);
  }
  long long v32 = _LSDatabaseGetLog();
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
  {
    pid_t v61 = getpid();
    id v62 = (void *)_LSSessionKeyCopyDescription(v19);
    LODWORD(block[0]) = 134218498;
    *(void *)((char *)block + 4) = v61;
    WORD6(block[0]) = 2112;
    *(void *)((char *)block + 14) = v62;
    WORD3(block[1]) = 2048;
    *((void *)&block[1] + 1) = v29;
    _os_log_debug_impl(&dword_182959000, v32, OS_LOG_TYPE_DEBUG, "LS DB needs to be mapped into process %llu for session %@ (existing DB @ %p).", (uint8_t *)block, 0x20u);
  }
  int v71 = 0;
  CFTypeRef cf = 0;
  if ([(id)__LSDefaultsGetSharedInstance() hasServer]
    && (CFTypeRef cf = 0, _LSCopyServerStore(v18, a3, &v71, &cf, &location)))
  {
    id v68 = location;
    long long v33 = _LSDatabaseCreate(v71, v19, cf, &v68);
    objc_storeStrong(&location, v68);

    __int16 v29 = (_LSDatabase *)v33;
    if (v33)
    {
      LSSessionKey v34 = (LSSessionKey)v33[206];
      if ([(id)__LSDefaultsGetSharedInstance() hasServer])
      {
        os_unfair_recursive_lock_lock_with_options();
        LSSessionKey v35 = v34;
        LSVersionNumber v36 = (unsigned int *)(_LSGetSession(v35) + 12);
        int v37 = atomic_load(v36);
        if (!notify_is_valid_token(v37))
        {
          __int16 v38 = [(id)__LSDefaultsGetSharedInstance() databaseUpdateNotificationNameForSessionKey:v34];
          CFArrayRef v39 = _LSGetDispatchTokenQueue();
          *(void *)&block[0] = MEMORY[0x1E4F143A8];
          *((void *)&block[0] + 1) = 3221225472;
          *(void *)&block[1] = ___ZL31_LSDatabaseNotificationRegister12LSSessionKey_block_invoke;
          *((void *)&block[1] + 1) = &unk_1E522BA28;
          id v40 = v38;
          *(void *)&long long v81 = v40;
          *((LSSessionKey *)&v81 + 1) = v34;
          LaunchServices::notifyd::NotifyToken::RegisterDispatch(v40, v39, block, &v75);
          LaunchServices::notifyd::NotifyToken::operator=((atomic_uint *)v36, (atomic_uint *)&v75);
          LaunchServices::notifyd::NotifyToken::~NotifyToken((LaunchServices::notifyd::NotifyToken *)&v75);
        }
        os_unfair_recursive_lock_unlock();
      }
      LSSessionKey v41 = (LSSessionKey)v19;
      uint64_t v42 = _LSGetSession(v41);
      *(unsigned char *)(v42 + 20) |= 4u;
      int v43 = 1;
    }
    else
    {
      int v43 = 0;
    }
    atomic_store(1u, (unsigned __int8 *)availabilityStateForServiceDomain(v18));
    if (v43) {
      goto LABEL_57;
    }
  }
  else
  {
    int v43 = 0;
  }
  if (!location)
  {
    uint64_t v45 = _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -10813, (uint64_t)"_LSContextInitClient", 3129, 0);
    char v46 = location;
    id location = v45;
LABEL_48:

    goto LABEL_49;
  }
LABEL_57:
  if (v43 && v29)
  {
    _LSSetLocalDatabase(v29);
    long long v90 = 0u;
    long long v91 = 0u;
    long long v88 = 0u;
    long long v89 = 0u;
    long long v86 = 0u;
    long long v87 = 0u;
    long long v84 = 0u;
    long long v85 = 0u;
    long long v82 = 0u;
    long long v83 = 0u;
    long long v81 = 0u;
    memset(block, 0, sizeof(block));
    _LSDatabaseGetHeader(block);
    char v46 = _LSDatabaseGetLog();
    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG)) {
      _LSContextInitCommon();
    }
    goto LABEL_48;
  }
LABEL_49:
  if (cf) {
    CFRelease(cf);
  }

  os_unfair_recursive_lock_unlock();
  if (v29) {
    BOOL v47 = 0;
  }
  else {
    BOOL v47 = v43 != 0;
  }
  if (v47)
  {
    int v48 = _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -10813, (uint64_t)"_LSContextInitClient", 3143, 0);
    long long v49 = location;
    id location = v48;
LABEL_56:

    __int16 v29 = 0;
    goto LABEL_63;
  }
  if (v43) {
    goto LABEL_62;
  }
LABEL_63:
  id v52 = *a1;
  *a1 = 0;

  uint64_t v53 = _LSDatabaseGetLog();
  if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR)) {
    _LSContextInitCommon();
  }

  id v50 = location;
  char v51 = 0;
LABEL_66:

  id v16 = v50;
  if (v51)
  {
LABEL_10:
    if (_LSDatabaseGetNoServerLock::once != -1) {
      dispatch_once(&_LSDatabaseGetNoServerLock::once, &__block_literal_global_112);
    }
    if (_LSDatabaseGetNoServerLock::result) {
      pthread_mutex_lock((pthread_mutex_t *)_LSDatabaseGetNoServerLock::result);
    }
    uint64_t v17 = 1;
    goto LABEL_74;
  }
LABEL_67:
  v54 = (void *)MEMORY[0x18530F680]();
  id v55 = [NSString stringWithFormat:@"_LSContextInitReturningError() failed with error %@", v16];
  if (_LSLoggingQueue(void)::onceToken != -1) {
    dispatch_once(&_LSLoggingQueue(void)::onceToken, &__block_literal_global_227);
  }
  BOOL v56 = _LSLoggingQueue(void)::logQueue;
  *(void *)&block[0] = MEMORY[0x1E4F143A8];
  *((void *)&block[0] + 1) = 3221225472;
  *(void *)&block[1] = ___ZL18_LSSetCrashMessageP8NSString_block_invoke_0;
  *((void *)&block[1] + 1) = &unk_1E522D3E8;
  *(void *)&long long v81 = v55;
  id v57 = v55;
  dispatch_sync(v56, block);

  dispatch_time_t v58 = dispatch_time(0, 2000000000);
  if (_LSLoggingQueue(void)::onceToken != -1) {
    dispatch_once(&_LSLoggingQueue(void)::onceToken, &__block_literal_global_227);
  }
  dispatch_after(v58, (dispatch_queue_t)_LSLoggingQueue(void)::logQueue, &__block_literal_global_384);

  if (a4)
  {
    id v16 = v16;
    uint64_t v17 = 0;
    *a4 = v16;
  }
  else
  {
    uint64_t v17 = 0;
  }
LABEL_74:
  uint64_t v59 = getIsCurrentThreadInLSContextInitReference();
  --*v59;

  return v17;
}

void sub_18297776C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, os_unfair_lock_t lock, uint64_t a13, uint64_t a14, uint64_t a15, CFTypeRef cf, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,char a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
  LaunchServices::notifyd::NotifyToken::~NotifyToken((LaunchServices::notifyd::NotifyToken *)&a23);

  if (cf) {
    CFRelease(cf);
  }

  _Unwind_Resume(a1);
}

uint64_t __LSDefaultsGetSharedInstance()
{
  if (__LSDefaultsGetSharedInstance_onceToken != -1) {
    dispatch_once(&__LSDefaultsGetSharedInstance_onceToken, &__block_literal_global_27);
  }
  return __LSDefaultsGetSharedInstance_sharedInstance;
}

void *getIsCurrentThreadInLSContextInitReference(void)
{
  if (getIsCurrentThreadInLSContextInitReference(void)::once != -1) {
    dispatch_once(&getIsCurrentThreadInLSContextInitReference(void)::once, &__block_literal_global_386);
  }
  v0 = pthread_getspecific(getIsCurrentThreadInLSContextInitReference(void)::key);
  if (!v0)
  {
    v0 = malloc_type_calloc(1uLL, 4uLL, 0x100004052888210uLL);
    pthread_setspecific(getIsCurrentThreadInLSContextInitReference(void)::key, v0);
  }
  return v0;
}

id _LSCopyLocalDatabase(unint64_t a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  os_unfair_recursive_lock_lock_with_options();
  LSSessionKey v4 = (LSSessionKey)a1;
  uint64_t v5 = _LSGetSession(v4);
  if (!*(void *)(v5 + 24))
  {
    if (a2)
    {
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -10813, (uint64_t)"_LSCopyLocalDatabase", 799, 0);
      id v9 = (id)objc_claimAutoreleasedReturnValue();
LABEL_13:
      id v8 = 0;
      *a2 = v9;
      goto LABEL_15;
    }
LABEL_14:
    id v8 = 0;
    goto LABEL_15;
  }
  uint64_t v6 = v5;
  unint64_t v7 = *(void *)(*(void *)(v5 + 24) + 1648);
  if ((v7 & 0x100000000) == 0)
  {
    if ((a1 & 0x100000000) == 0 && v7 == a1) {
      goto LABEL_5;
    }
LABEL_9:
    unint64_t v10 = _LSDatabaseGetLog();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
    {
      id v12 = *(id *)(v6 + 24);
      id v13 = (id)_LSSessionKeyCopyDescription(a1);
      id v14 = (void *)_LSSessionKeyCopyDescription(v7);
      int v15 = 138543874;
      id v16 = v12;
      __int16 v17 = 2112;
      id v18 = v13;
      __int16 v19 = 2112;
      uint64_t v20 = v14;
      _os_log_fault_impl(&dword_182959000, v10, OS_LOG_TYPE_FAULT, "session key of database %{public}@ was expected to be %@, but was %@!", (uint8_t *)&v15, 0x20u);
    }
    if (a2)
    {
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -10817, (uint64_t)"_LSCopyLocalDatabase", 794, 0);
      id v9 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_13;
    }
    goto LABEL_14;
  }
  if ((a1 & 0x100000000) == 0) {
    goto LABEL_9;
  }
LABEL_5:
  id v8 = *(id *)(v5 + 24);
LABEL_15:
  os_unfair_recursive_lock_unlock();
  return v8;
}

void sub_182977B48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSGetSession(LSSessionKey a1)
{
  LSSessionKey v4 = a1;
  uint64_t v1 = _LSGetSessions();
  uint64_t v5 = &v4;
  uint64_t v2 = std::__hash_table<std::__hash_value_type<LSSessionKey,LSSession *>,std::__unordered_map_hasher<LSSessionKey,std::__hash_value_type<LSSessionKey,LSSession *>,LSSessionKeyHasher,LSSessionKeyComparator,true>,std::__unordered_map_equal<LSSessionKey,std::__hash_value_type<LSSessionKey,LSSession *>,LSSessionKeyComparator,LSSessionKeyHasher,true>,std::allocator<std::__hash_value_type<LSSessionKey,LSSession *>>>::__emplace_unique_key_args<LSSessionKey,std::piecewise_construct_t const&,std::tuple<LSSessionKey const&>,std::tuple<>>(v1, (unsigned int *)&v4, (uint64_t)&std::piecewise_construct, (void **)&v5)[3];
  if (!v2) {
    operator new();
  }
  return v2;
}

void *std::__hash_table<std::__hash_value_type<LSSessionKey,LSSession *>,std::__unordered_map_hasher<LSSessionKey,std::__hash_value_type<LSSessionKey,LSSession *>,LSSessionKeyHasher,LSSessionKeyComparator,true>,std::__unordered_map_equal<LSSessionKey,std::__hash_value_type<LSSessionKey,LSSession *>,LSSessionKeyComparator,LSSessionKeyHasher,true>,std::allocator<std::__hash_value_type<LSSessionKey,LSSession *>>>::__emplace_unique_key_args<LSSessionKey,std::piecewise_construct_t const&,std::tuple<LSSessionKey const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, void **a4)
{
  if (*((unsigned char *)a2 + 4)) {
    unint64_t v7 = 1;
  }
  else {
    unint64_t v7 = *a2;
  }
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = v7;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unsigned int v11 = *v10;
      if (*v10)
      {
        uint64_t v12 = *(void *)a2;
        do
        {
          unint64_t v13 = v11[1];
          if (v13 == v7)
          {
            uint64_t v14 = v11[2];
            if ((v14 & 0x100000000) != 0)
            {
              if ((v12 & 0x100000000) != 0) {
                return v11;
              }
            }
            else if ((v12 & 0x100000000) == 0 && v14 == v12)
            {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v13 >= v8) {
                v13 %= v8;
              }
            }
            else
            {
              v13 &= v8 - 1;
            }
            if (v13 != v4) {
              break;
            }
          }
          unsigned int v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  unsigned int v11 = operator new(0x20uLL);
  void *v11 = 0;
  v11[1] = v7;
  v11[2] = **a4;
  v11[3] = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v21 = *(void *)a1;
  CFIndex v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    void *v11 = *v22;
LABEL_46:
    void *v22 = v11;
    goto LABEL_47;
  }
  void *v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v23 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8) {
        v23 %= v8;
      }
    }
    else
    {
      v23 &= v8 - 1;
    }
    CFIndex v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_46;
  }
LABEL_47:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_182977E64(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _LSGetSessions(void)
{
  if (_LSSessionInitMemoryWarningListener(void)::once != -1) {
    dispatch_once(&_LSSessionInitMemoryWarningListener(void)::once, &__block_literal_global_223);
  }
  if (_LSGetSessions(void)::once != -1) {
    dispatch_once(&_LSGetSessions(void)::once, &__block_literal_global_221);
  }
  return _LSGetSessions(void)::sessions;
}

uint64_t __LAUNCH_SERVICES_IS_GENERATING_A_SANDBOX_EXCEPTION_BECAUSE_THIS_PROCESS_MAY_NOT_MAP_THE_DATABASE__()
{
  uint64_t result = _LSCurrentProcessMayMapDatabase();
  if (!result) {
    return __LAUNCH_SERVICES_IS_GENERATING_A_SANDBOX_EXCEPTION__("forbidden-map-ls-database");
  }
  return result;
}

uint64_t __LAUNCH_SERVICES_IS_ABORTING_BECAUSE_THIS_PROCESS_MAY_NOT_MAP_THE_DATABASE__()
{
  uint64_t result = _LSCurrentProcessMayMapDatabase();
  if (!result)
  {
    uint64_t result = [(id)__LSDefaultsGetSharedInstance() abortIfMayNotMapDatabase];
    if (result) {
      abort();
    }
  }
  return result;
}

uint64_t _LSCurrentProcessMayMapDatabase()
{
  if (_LSCurrentProcessMayMapDatabase::once != -1) {
    dispatch_once(&_LSCurrentProcessMayMapDatabase::once, &__block_literal_global_181);
  }
  unsigned __int8 v0 = atomic_load(mayMapDatabase);
  return v0 & 1;
}

void sub_182978220(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t LaunchServices::notifyd::NotifyToken::checkValue(LaunchServices::notifyd::NotifyToken *this)
{
  checuint64_t k = 0;
  int v1 = atomic_load((unsigned int *)this);
  uint32_t v2 = notify_check(v1, &check);
  if (v2) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = check;
  }
  return v3 | ((unint64_t)(v2 == 0) << 32);
}

void sub_182978308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182978418(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id LaunchServices::LocalizedString::getDefaultValueUnsafely(LaunchServices::LocalizedString *this, _LSDatabase *a2)
{
  uint64_t v3 = a2;
  if (!v3)
  {
    unsigned int v11 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v12 = [NSString stringWithUTF8String:"NSString *LaunchServices::LocalizedString::getDefaultValueUnsafely(_LSDatabase *__strong _Nonnull) const"];
    [v11 handleFailureInFunction:v12, @"LSLocalizedString.mm", 265, @"Invalid parameter not satisfying: %@", @"db != nil" file lineNumber description];
  }
  unint64_t v4 = (void *)MEMORY[0x18530F680]();
  if ((*((unsigned char *)this + 8) & 2) != 0)
  {
    uint64_t v7 = _CSStringCopyCFString();
    if (*((unsigned char *)this + 8)) {
      uint64_t v6 = @"‚ú¥Ô∏è";
    }
    else {
      uint64_t v6 = @"üîÇ";
    }
    uint64_t v5 = (void *)v7;
  }
  else
  {
    if (!*(_DWORD *)this
      || !*((_DWORD *)this + 1)
      || !_LSDatabaseGetStringForCFString(v3, @"LSDefaultLocalizedValue", 0))
    {
      uint64_t v5 = 0;
      goto LABEL_20;
    }
    uint64_t v13 = 0;
    uint64_t v14 = &v13;
    uint64_t v15 = 0x3812000000;
    float v16 = __Block_byref_object_copy__33;
    BOOL v17 = __Block_byref_object_dispose__33;
    uint64_t v18 = 0;
    char v19 = 0;
    char v20 = 0;
    _CSArrayEnumerateAllValues();
    if (*((unsigned char *)v14 + 52))
    {
      uint64_t v5 = _LSDatabaseGetNSStringFromArray(v3);
      uint64_t v6 = @"üî¥";
    }
    else
    {
      uint64_t v5 = 0;
      uint64_t v6 = 0;
    }
    _Block_object_dispose(&v13, 8);
  }
  if (v5) {
    BOOL v8 = v6 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8 && [(id)__LSDefaultsGetSharedInstance() markLocalizationsStoredInDatabase])
  {
    uint64_t v9 = [v5 stringByAppendingString:v6];

    uint64_t v5 = (void *)v9;
  }
LABEL_20:

  return v5;
}

void sub_182978700(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182978970(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSDatabaseGetLog()
{
  if (_LSDatabaseGetLog_once != -1) {
    dispatch_once(&_LSDatabaseGetLog_once, &__block_literal_global_25_1);
  }
  unsigned __int8 v0 = (void *)_LSDatabaseGetLog_result;

  return v0;
}

atomic_uint *LaunchServices::notifyd::NotifyToken::operator=(atomic_uint *a1, atomic_uint *a2)
{
  return a1;
}

uint64_t LaunchServices::notifyd::NotifyToken::_moveFrom(atomic_uint *this, atomic_uint *a2)
{
  int v4 = atomic_exchange(this, 0xFFFFFFFF);
  uint64_t result = notify_is_valid_token(v4);
  if (result) {
    uint64_t result = notify_cancel(v4);
  }
  atomic_store(atomic_exchange(a2, 0xFFFFFFFF), (unsigned int *)this);
  return result;
}

void LaunchServices::notifyd::NotifyToken::~NotifyToken(LaunchServices::notifyd::NotifyToken *this)
{
  int v2 = atomic_load((unsigned int *)this);
  if (notify_is_valid_token(v2))
  {
    int v3 = atomic_load((unsigned int *)this);
    notify_cancel(v3);
  }
}

id _LSGetDispatchTokenQueue(void)
{
  if (_LSGetDispatchTokenQueue(void)::once != -1) {
    dispatch_once(&_LSGetDispatchTokenQueue(void)::once, &__block_literal_global_388_0);
  }
  unsigned __int8 v0 = (void *)_LSGetDispatchTokenQueue(void)::result;

  return v0;
}

void LaunchServices::notifyd::NotifyToken::RegisterCheck(LaunchServices::notifyd::NotifyToken *this@<X0>, unsigned int *a2@<X8>)
{
  int v4 = this;
  *a2 = -1;
  uint64_t v5 = (void *)MEMORY[0x18530F680]();
  int out_token = -1;
  uint64_t v6 = v4;
  if (!notify_register_check((const char *)[(LaunchServices::notifyd::NotifyToken *)v6 UTF8String], &out_token))atomic_store(out_token, a2); {
}
  }

void sub_182978BD0(_Unwind_Exception *a1)
{
  LaunchServices::notifyd::NotifyToken::~NotifyToken(v1);

  _Unwind_Resume(a1);
}

void sub_1829790AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829792B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182979428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

void sub_182979578(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18297966C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182979714(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829797BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182979868(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *_LSCopyGroupContainerIdentifiersFromEntitlements(void *a1, void *a2)
{
  id v3 = a2;
  [a1 UTF8String];
  uint64_t v13 = MEMORY[0x1E4F143A8];
  id v4 = v3;
  uint64_t v14 = v4;
  uint64_t v5 = (void *)container_entitlements_copy_container_identifiers();
  if (object_getClass(v5) != (Class)MEMORY[0x1E4F14568])
  {
    unsigned int v11 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v12 = objc_msgSend(NSString, "stringWithUTF8String:", "NSSet<NSString *> * _Nonnull _LSCopyGroupContainerIdentifiersFromEntitlements(NSString *__strong _Nonnull, LSPropertyList *__strong _Nonnull)");
    [v11 handleFailureInFunction:v12, @"LSContainerHelpers.m", 152, @"Returned XPC object %@ was not an array, cannot continue", v5, v13, 3221225472, ___LSCopyGroupContainerIdentifiersFromEntitlements_block_invoke, &unk_1E522DFF0, v4 file lineNumber description];
  }
  size_t count = xpc_array_get_count(v5);
  uint64_t v7 = (void *)[objc_alloc(MEMORY[0x1E4F1CA80]) initWithCapacity:count];
  if (count)
  {
    for (size_t i = 0; i != count; ++i)
    {
      uint64_t v9 = objc_msgSend([NSString alloc], "initWithUTF8String:", xpc_array_get_string(v5, i));
      if (v9) {
        [v7 addObject:v9];
      }
    }
  }

  return v7;
}

void sub_182979B84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182979C1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182979E8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18297A408(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18297A664(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18297A8E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  _Unwind_Resume(a1);
}

void sub_18297A994(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSPlistGetValueForKey(_LSDatabase *a1, unsigned int a2, NSString *a3, _LSPlistHint *a4)
{
  uint64_t v6 = a3;
  _LSPlistGet((uint64_t)a1, a2);
  uint64_t v7 = (NSData *)objc_claimAutoreleasedReturnValue();
  BOOL v8 = _LSPlistDataGetValueForKey(v7, (uint64_t)v6, 0);

  return v8;
}

void sub_18297AA1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18297AB38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_18297AC40(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18297AFC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18297B0EC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

id _LSPlistDataGetValueForKey(NSData *a1, uint64_t a2, id *a3)
{
  id v3 = 0;
  uint64_t v9 = a2;
  if (a1 && a2)
  {
    uint64_t v6 = (void *)[objc_alloc(MEMORY[0x1E4F1CAD0]) initWithObjects:&v9 count:1];
    uint64_t v7 = _LSPlistDataGetValuesForKeys(a1, v6, a3);
    id v3 = [v7 objectForKeyedSubscript:v9];
  }

  return v3;
}

void sub_18297B1B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18297B26C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *_LSPlistDataGetHint(void *a1)
{
  int v1 = a1;
  int v2 = _LSDefaultLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    _LSPlistDataGetHint_cold_1((uint64_t)v1, v2);
  }

  if (v1)
  {
    id v3 = (void *)MEMORY[0x18530F680]();
    BOOL v9 = 0;
    id v4 = _LSPlistGetSubdataForFCF(v1, &v9);

    uint64_t v5 = (void *)_CFPropertyListCopyTopLevelKeys();
    if (v5)
    {
      uint64_t v6 = [_LSPlistHint alloc];
      uint64_t v7 = -[_LSPlistHint initWithKeys:compacted:](v6, v5, v9);
    }
    else
    {
      uint64_t v7 = 0;
    }
  }
  else
  {
    uint64_t v7 = 0;
    id v4 = 0;
  }

  return v7;
}

void sub_18297B37C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18297B44C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18297B9A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_18297BA74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18297BD64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18297BE20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18297BF2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Block_object_dispose((const void *)(v16 - 48), 8);
  _Unwind_Resume(a1);
}

id getValueForKeyFromPlugin(NSString *a1, const LSPluginData *a2, _LSDatabase *a3)
{
  uint64_t v5 = a1;
  uint64_t v6 = a3;
  if ([(NSString *)v5 isEqualToString:@"NSExtensionIdentifier"]
    || [(NSString *)v5 isEqualToString:@"NSExtensionPointName"]
    || [(NSString *)v5 isEqualToString:@"NSExtensionPointIdentifier"]
    || [(NSString *)v5 isEqualToString:@"com.apple.uuid"])
  {
    uint64_t v7 = (void *)_CSStringCopyCFString();
  }
  else
  {
    if ([(NSString *)v5 isEqualToString:@"NSExtensionContainingApp"])
    {
      unsigned int var8 = a2->var8;
      if (var8)
      {
        if (v6)
        {
          unint64_t v10 = (int *)_LSBundleGet(v6, var8);
          if (v10 && *v10)
          {
            unsigned int v11 = _LSAliasCopyResolvedNode(v6, *v10, 0, 0, 0);
            uint64_t v12 = v11;
            if (v11)
            {
              uint64_t v13 = [v11 URL];
              uint64_t v7 = [v13 path];
            }
            else
            {
              uint64_t v7 = 0;
            }

            goto LABEL_6;
          }
        }
        else
        {
          uint64_t v14 = _LSDefaultLog();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
            getValueForKeyFromPlugin(v14);
          }
        }
      }
    }
    uint64_t v7 = 0;
  }
LABEL_6:

  return v7;
}

void sub_18297C10C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18297C4C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _LSPlistGetDictionary(_LSDatabase *a1, unsigned int a2, _LSPlistHint *a3)
{
  id v3 = _LSPlistGet((uint64_t)a1, a2);
  id v4 = _LSPlistDataGetDictionary(v3, 0);

  return v4;
}

{
  void *v3;
  void *v4;
  uint64_t vars8;

  id v3 = _LSPlistGet((uint64_t)a1, a2);
  id v4 = _LSPlistDataGetDictionary(v3, 0);

  return v4;
}

{
  void *v3;
  void *v4;
  uint64_t vars8;

  id v3 = _LSPlistGet((uint64_t)a1, a2);
  id v4 = _LSPlistDataGetDictionary(v3, 0);

  return v4;
}

void sub_18297C544(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18297C5A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18297C604(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSPluginGetSDKDictionaryDataUnit(void *a1, int a2, uint64_t a3)
{
  id v5 = a1;
  uint64_t v6 = v5;
  if (a3 || (a3 = _LSGetPlugin((uint64_t)v5, a2)) != 0)
  {
    int v9 = 0;
    uint64_t v8 = 0;
    if (_LSExtensionPointFindWithStringID(v6, *(unsigned int *)(a3 + 180), *(unsigned int *)(a3 + 20), 0, &v9, &v8))a3 = 0; {
    else
    }
      a3 = *(unsigned int *)(v8 + 48);
  }

  return a3;
}

void sub_18297C6A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18297C878(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_18297CBE0(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    os_unfair_lock_unlock((os_unfair_lock_t)&currentLock);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_18297CC28(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x18297CBECLL);
}

void sub_18297D508(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _LSGetExtensionPointData(uint64_t a1, int a2)
{
  if (a1 && a2) {
    return CSStoreGetUnit();
  }
  else {
    return 0;
  }
}

void sub_18297D5C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18297D9C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18297DB4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18297DD8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::URLPropertyProvider::copyValues(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4, void **a5, uint64_t a6)
{
  if (a6 < 1) {
    return 1;
  }
  uint64_t v6 = a6;
  do
  {
    uint64_t v10 = MEMORY[0x18530E320](a2, **a5, a4);
    if (!v10) {
      break;
    }
    if (*a4) {
      CFRetain(*a4);
    }
    ++a4;
    ++a5;
    --v6;
  }
  while (v6);
  return v10;
}

void sub_18297E1AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18297E384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18297E550(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18297E988(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18297ECD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t _LSContextInitReturningError(id *a1, void *a2)
{
  id v4 = +[_LSDServiceDomain defaultServiceDomain]();
  uint64_t inited = _LSContextInitCommon(a1, v4, 0, a2);

  return inited;
}

void sub_18297ED5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18297F168(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18297F904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

uint64_t _LSBundleDataGetRegTime(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

void sub_18297FDAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18297FEC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSFindBundleWithInfo(void *a1, unint64_t a2, void *a3, int a4, const void *a5, uint64_t a6, void *a7)
{
  return _LSFindBundleWithInfo_NoIOFiltered(a1, a2, a3, a4, a5, a6, 0, 0, a7);
}

void sub_182980154(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSFindBundleWithInfo_NoIOFiltered(void *a1, unint64_t a2, void *a3, int a4, const void *a5, uint64_t a6, void *a7, void *a8, void *a9)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  id v37 = a7;
  id v16 = a8;
  uint64_t v52 = 0;
  uint64_t v53 = &v52;
  uint64_t v54 = 0x2020000000;
  int v55 = 0;
  uint64_t v48 = 0;
  long long v49 = &v48;
  uint64_t v50 = 0x2020000000;
  char v51 = 0;
  if (!a1)
  {
    LSSessionKey v35 = [MEMORY[0x1E4F28B00] currentHandler];
    LSVersionNumber v36 = objc_msgSend(NSString, "stringWithUTF8String:", "LSBundleID _LSFindBundleWithInfo_NoIOFiltered(LSContext * _Nonnull, LSBundleType, CFStringRef _Nullable, Boolean, CFURLRef _Nullable, UInt64, NSString *__strong _Nullable, BOOL (^__strong _Nullable)(LSContext *, LSBundleID, const LSBundleData *), NSError *__autoreleasing * _Nullable)");
    [v35 handleFailureInFunction:v36, @"LSBundleProxy.m", 130, @"Invalid parameter not satisfying: %@", @"inContext != NULL" file lineNumber description];
  }
  if (a3)
  {
    if (a2 == 7)
    {
      long long v56 = kLSVersionNumberNull;
      long long v57 = *(_OWORD *)algn_182AF9270;
      BOOL v17 = _LSBundleFindWithInfoAndNo_IOFilter((uint64_t)a1, 0, a3, a4 != 0, &v56, 14, 1152, v37, v16, (_DWORD *)v53 + 6, 0, a9);
      *((unsigned char *)v49 + 24) = v17;
      goto LABEL_39;
    }
    if (a2 >= 2)
    {
      id v26 = 0;
      if (!*((unsigned char *)v49 + 24))
      {
LABEL_20:
        if (a2 == 3 || !a2)
        {
          id v46 = v26;
          long long v56 = kLSVersionNumberNull;
          long long v57 = *(_OWORD *)algn_182AF9270;
          BOOL v27 = _LSBundleFindWithInfoAndNo_IOFilter((uint64_t)a1, 0, a3, a4 != 0, &v56, 2, 1152, v37, v16, (_DWORD *)v53 + 6, 0, &v46);
          id v28 = v46;

          *((unsigned char *)v49 + 24) = v27;
          id v26 = v28;
          if (v27) {
            goto LABEL_28;
          }
        }
        if ((a2 | 8) == 8)
        {
          id v45 = v26;
          long long v56 = kLSVersionNumberNull;
          long long v57 = *(_OWORD *)algn_182AF9270;
          BOOL v29 = _LSBundleFindWithInfoAndNo_IOFilter((uint64_t)a1, 0, a3, a4 != 0, &v56, 16, 32896, v37, v16, (_DWORD *)v53 + 6, 0, &v45);
          id v28 = v45;

          *((unsigned char *)v49 + 24) = v29;
          if (v29) {
            goto LABEL_28;
          }
        }
        else
        {
          id v28 = v26;
        }
        if (a2 != 5 && a2) {
          goto LABEL_47;
        }
        id v44 = v28;
        long long v56 = kLSVersionNumberNull;
        long long v57 = *(_OWORD *)algn_182AF9270;
        BOOL v33 = _LSBundleFindWithInfoAndNo_IOFilter((uint64_t)a1, 0, a3, a4 != 0, &v56, 13, 128, v37, v16, (_DWORD *)v53 + 6, 0, &v44);
        id v34 = v44;

        *((unsigned char *)v49 + 24) = v33;
        id v28 = v34;
        if (!v33)
        {
LABEL_47:
          if (!v28)
          {
            _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -10814, (uint64_t)"_LSFindBundleWithInfo_NoIOFiltered", 166, 0);
            id v28 = (id)objc_claimAutoreleasedReturnValue();
          }
        }
        goto LABEL_28;
      }
    }
    else
    {
      id v47 = 0;
      long long v56 = kLSVersionNumberNull;
      long long v57 = *(_OWORD *)algn_182AF9270;
      BOOL v25 = _LSBundleFindWithInfoAndNo_IOFilter((uint64_t)a1, 0, a3, a4 != 0, &v56, 2, 128, v37, v16, (_DWORD *)v53 + 6, 0, &v47);
      id v26 = v47;
      *((unsigned char *)v49 + 24) = v25;
      if (!v25) {
        goto LABEL_20;
      }
    }
    id v28 = v26;
LABEL_28:
    if (a9) {
      *a9 = v28;
    }

    goto LABEL_39;
  }
  if (a5)
  {
    CFErrorRef v18 = _LSCreateResolvedURL(a5);
    char v19 = [[FSNode alloc] initWithURL:v18 flags:0 error:a9];
    if (v19)
    {
      *(void *)&long long v56 = 0;
      int v20 = _LSBundleFindWithNode((uint64_t)a1, v19, (_DWORD *)v53 + 6, &v56);
      BOOL v21 = _LSGetNSErrorFromOSStatusImpl(v20, a9, (uint64_t)"_LSFindBundleWithInfo_NoIOFiltered", 178);
      *((unsigned char *)v49 + 24) = v21;
      if (v16 && v21)
      {
        char v23 = (*((uint64_t (**)(id, void *, void, void))v16 + 2))(v16, a1, *((unsigned int *)v53 + 6), v56);
        *((unsigned char *)v49 + 24) = v23;
        char v24 = a9 ? v23 : 1;
        if ((v24 & 1) == 0)
        {
          _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -10814, (uint64_t)"_LSFindBundleWithInfo_NoIOFiltered", 185, 0);
          *a9 = (id)objc_claimAutoreleasedReturnValue();
        }
      }
    }
  }
  else if (a6)
  {
    if (a2 == 5) {
      uint64_t v30 = 13;
    }
    else {
      uint64_t v30 = 2;
    }
    v38[0] = MEMORY[0x1E4F143A8];
    v38[1] = 3221225472;
    _OWORD v38[2] = ___LSFindBundleWithInfo_NoIOFiltered_block_invoke;
    v38[3] = &unk_1E522D8C0;
    uint64_t v42 = a6;
    id v39 = v16;
    id v40 = &v52;
    int v43 = a1;
    LSSessionKey v41 = &v48;
    _LSEnumerateViableBundlesOfClass(a1, v30, v38);
    if (a9 && !*((unsigned char *)v49 + 24))
    {
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -10814, (uint64_t)"_LSFindBundleWithInfo_NoIOFiltered", 203, 0);
      *a9 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
LABEL_39:
  if (*((unsigned char *)v49 + 24))
  {
    uint64_t v31 = *((unsigned int *)v53 + 6);
  }
  else
  {
    uint64_t v31 = 0;
    *((_DWORD *)v53 + 6) = 0;
  }
  _Block_object_dispose(&v48, 8);
  _Block_object_dispose(&v52, 8);

  return v31;
}

void sub_182980770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

CFErrorRef _LSCreateResolvedURL(const void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (!CFURLGetFileSystemRepresentation((CFURLRef)a1, 1u, buffer, 1024))
  {
    CFAllocatorRef v9 = CFGetAllocator(a1);
    CFErrorRef v7 = CFErrorCreate(v9, (CFErrorDomain)*MEMORY[0x1E4F1D148], 4, 0);
    uint64_t v8 = _LSDefaultLog();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
      _LSCreateResolvedURL_cold_2();
    }
    goto LABEL_7;
  }
  uint64_t v15 = 0;
  long long v14 = xmmword_182AF8F50;
  memset(v16, 0, 512);
  int v2 = getattrlist((const char *)buffer, &v14, v16, 0x40CuLL, 0x21u);
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFAllocatorRef v4 = v3;
  if (v2)
  {
    CFStringRef v5 = (const __CFString *)*MEMORY[0x1E4F1D160];
    uint64_t v6 = __error();
    CFErrorRef v7 = CFErrorCreate(v4, v5, *v6, 0);
    uint64_t v8 = _LSDefaultLog();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
      _LSCreateResolvedURL_cold_3();
    }
LABEL_7:

    goto LABEL_8;
  }
  CFStringRef v12 = CFStringCreateWithFileSystemRepresentation(v3, (const char *)v16 + SDWORD1(v16[0]) + 4);
  if (v12)
  {
    CFStringRef v13 = v12;
    CFErrorRef v7 = CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v12, kCFURLPOSIXPathStyle, 1u);
    CFRelease(v13);
    if (v7) {
      return v7;
    }
  }
  else
  {
    CFErrorRef v7 = 0;
  }
LABEL_8:
  uint64_t v10 = _LSDefaultLog();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
    _LSCreateResolvedURL_cold_1();
  }

  if (v7) {
    CFRelease(v7);
  }
  return (CFErrorRef)CFRetain(a1);
}

id _LSDBEnumeratorGetNextObject(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v23 = 0;
  if (*(unsigned char *)(a1 + 80)) {
    goto LABEL_21;
  }
  +[_LSDServiceDomain defaultServiceDomain]();
  int v2 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  uint64_t v3 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)(a1 + 32), v2, 0);

  if (!v3)
  {
    +[_LSDServiceDomain defaultServiceDomain]();
    long long v14 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
    uint64_t v15 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)(a1 + 32), v14, 0);

    if (v15) {
      id v16 = 0;
    }
    else {
      id v16 = *(id *)(a1 + 56);
    }
    _LSEnumeratorFireErrorHandler((atomic_uchar *)a1, v16);

LABEL_21:
    if (*(unsigned char *)(a1 + 80))
    {
      id v13 = 0;
    }
    else
    {
      *(unsigned char *)(a1 + 80) |= 1u;
      *(void *)(a1 + 64) = -1;
      uint64_t v17 = a1 + 32;
      if (*(void *)v17 && *(unsigned char *)(v17 + 16)) {
        _LSContextDestroy(*(void ***)v17);
      }
      uint64_t v18 = *(void **)(v17 + 8);
      *(void *)uint64_t v17 = 0;
      *(void *)(v17 + 8) = 0;

      *(unsigned char *)(v17 + 16) = 0;
      char v19 = *(void **)(v17 + 24);
      *(void *)(v17 + 24) = 0;

      id v13 = v23;
    }
    goto LABEL_27;
  }
  if (!_LSDBEnumeratorPrepareIfNeeded(a1)) {
    goto LABEL_21;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 64);
  *(void *)&long long v4 = 138478083;
  long long v22 = v4;
  do
  {
    CFErrorRef v7 = (void *)MEMORY[0x18530F680]();
    uint64_t v8 = _LSEnumeratorLog;
    if (os_log_type_enabled((os_log_t)_LSEnumeratorLog, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)id buf = v22;
      uint64_t v25 = a1;
      __int16 v26 = 2048;
      uint64_t v27 = v6;
      _os_log_debug_impl(&dword_182959000, v8, OS_LOG_TYPE_DEBUG, "Enumerator %{private}@ iteration %llu", buf, 0x16u);
    }
    int v9 = objc_msgSend((id)a1, "_getObject:atIndex:context:", &v23, v6, v3, v22);
    if (v23 && v5 && ((*(uint64_t (**)(uint64_t))(v5 + 16))(v5) & 1) == 0)
    {
      id v10 = v23;
      id v23 = 0;
    }
    uint64_t v11 = v6 + 1;
    int v12 = (v6 != -1) & ~((uint64_t)((unint64_t)(v6 == -1) << 63) >> 63 != (v6 == -1));
    id v13 = v23;
    if (v23) {
      int v12 = 0;
    }
    ++v6;
  }
  while ((v12 & v9 & 1) != 0);
  *(void *)(a1 + 64) = v11;
  if (!v13) {
    goto LABEL_21;
  }
LABEL_27:
  id v20 = v13;

  return v20;
}

void sub_182980F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_182981250(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829813DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSDBEnumeratorPrepareIfNeeded(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if ((*(unsigned char *)(a1 + 80) & 2) == 0)
  {
    *(unsigned char *)(a1 + 80) |= 2u;
    if (*(void *)(a1 + 64))
    {
      id v13 = [MEMORY[0x1E4F28B00] currentHandler];
      long long v14 = [NSString stringWithUTF8String:"BOOL _LSDBEnumeratorPrepareIfNeeded(_LSDBEnumerator *const __strong _Nonnull)"];
      [v13 handleFailureInFunction:v14 file:@"LSEnumerator.mm" lineNumber:226 description:@"Need to prepare after first iteration. This should not be possible."];
    }
    int v2 = (void *)MEMORY[0x18530F680]();
    +[_LSDServiceDomain defaultServiceDomain]();
    uint64_t v3 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
    uint64_t v4 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)(a1 + 32), v3, 0);

    if (v4)
    {
      id v15 = 0;
      int v5 = [(id)a1 _prepareWithContext:v4 error:&v15];
      id v6 = v15;
      CFErrorRef v7 = _LSEnumeratorLog;
      if (v5)
      {
        if (os_log_type_enabled((os_log_t)_LSEnumeratorLog, OS_LOG_TYPE_DEBUG)) {
          _LSDBEnumeratorPrepareIfNeeded_cold_2(a1, v7);
        }
        *(unsigned char *)(a1 + 80) |= 4u;
      }
      else
      {
        if (os_log_type_enabled((os_log_t)_LSEnumeratorLog, OS_LOG_TYPE_ERROR)) {
          _LSDBEnumeratorPrepareIfNeeded_cold_3();
        }
        _LSEnumeratorFireErrorHandler((atomic_uchar *)a1, v6);
      }
    }
    else
    {
      uint64_t v8 = (id)_LSEnumeratorLog;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        int v9 = LaunchServices::Database::Context::error((id *)(a1 + 32));
        _LSDBEnumeratorPrepareIfNeeded_cold_1(a1, v9, buf, v8);
      }

      +[_LSDServiceDomain defaultServiceDomain]();
      id v10 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
      uint64_t v11 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)(a1 + 32), v10, 0);

      if (v11) {
        id v6 = 0;
      }
      else {
        id v6 = *(id *)(a1 + 56);
      }
      _LSEnumeratorFireErrorHandler((atomic_uchar *)a1, v6);
    }
  }
  return (*(unsigned __int8 *)(a1 + 80) >> 2) & 1;
}

void sub_182981674(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182981814()
{
}

void sub_182981848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  objc_end_catch();

  _Unwind_Resume(a1);
}

uint64_t __LSRECORD_IS_CONSTRUCTING_A_COMPATIBILITY_OBJECT__(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

void ___ZZ31__LSRecord_compatibilityObject_ENK3__0clEP9LSContextjjPKv_block_invoke(uint64_t a1)
{
  uint64_t v2 = [**(id **)(a1 + 40) _compatibilityObjectWithContext:*(void *)(a1 + 48) tableID:*(unsigned int *)(a1 + 64) unitID:*(unsigned int *)(a1 + 68) unitBytes:*(void *)(a1 + 56)];
  uint64_t v3 = *(void ***)(a1 + 32);
  uint64_t v4 = *v3;
  *uint64_t v3 = (void *)v2;
}

void sub_18298196C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182981B84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182981BDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182981CE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182981DBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182982248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41)
{
  _Unwind_Resume(a1);
}

void sub_1829823B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::TypeEvaluator::PrepareMimicForTypeEvaluation(void *a1, uint64_t a2)
{
  uint64_t result = _LSPrepareMimicForBundleClass(a1, a2);
  if (result)
  {
    v8[0] = sel_isSymbolicLink;
    v8[1] = sel_isAliasFile;
    _DWORD v8[2] = sel_isRegularFile;
    v8[3] = sel_nameWithError_;
    v8[4] = sel_isExecutable;
    id v5 = a1;
    uint64_t v6 = 0;
    LOBYTE(v7) = 1;
    do
    {
      while (!(_BYTE)v7)
      {
        if (++v6 == 5)
        {

          return 0;
        }
        LOBYTE(v7) = 0;
      }
      int v7 = [v5 populateSimpleSelector:v8[v6++] error:a2];
    }
    while (v6 != 5);

    if (v7) {
      return [v5 populateValueForKey:*MEMORY[0x1E4F1C5C0] error:a2];
    }
    return 0;
  }
  return result;
}

void sub_1829824C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829827F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t categorizeSelector(objc_selector *a1)
{
  id v13 = (const char *)a1;
  os_unfair_lock_lock((os_unfair_lock_t)&categorizeSelector(objc_selector *)::categoryCacheMutex);
  if (!categorizeSelector(objc_selector *)::categoryCache) {
    operator new();
  }
  int v1 = std::__hash_table<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::__unordered_map_hasher<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::hash<_opaque_pthread_t *>,std::equal_to<_opaque_pthread_t *>,true>,std::__unordered_map_equal<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::equal_to<_opaque_pthread_t *>,std::hash<_opaque_pthread_t *>,true>,std::allocator<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>>>::find<_opaque_pthread_t *>((void *)categorizeSelector(objc_selector *)::categoryCache, &v13);
  if (!v1)
  {
    uint64_t v2 = categorizeSelector(objc_selector *)::categoryCache;
    SEL aSelector = v13;
    if (_lock_categorizeSelectorWithRuntime(objc_selector *)::onceToken != -1) {
      dispatch_once(&_lock_categorizeSelectorWithRuntime(objc_selector *)::onceToken, &__block_literal_global_249);
    }
    if (std::__hash_table<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::__unordered_map_hasher<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::hash<_opaque_pthread_t *>,std::equal_to<_opaque_pthread_t *>,true>,std::__unordered_map_equal<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::equal_to<_opaque_pthread_t *>,std::hash<_opaque_pthread_t *>,true>,std::allocator<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>>>::find<_opaque_pthread_t *>((void *)_lock_categorizeSelectorWithRuntime(objc_selector *)::knownExceptions, &aSelector))
    {
      uint64_t v3 = 5;
    }
    else
    {
      uint64_t v4 = NSStringFromSelector(aSelector);
      id v5 = (objc_class *)objc_opt_class();
      InstanceMethod = class_getInstanceMethod(v5, aSelector);
      int v7 = method_copyReturnType(InstanceMethod);
      unsigned int NumberOfArguments = method_getNumberOfArguments(InstanceMethod);
      if (!strcmp(v7, "B") && NumberOfArguments == 2)
      {
        uint64_t v3 = 0;
      }
      else if (!strcmp(v7, "@") {
             && NumberOfArguments == 3
      }
             && ([v4 hasSuffix:@"WithError:"] & 1) != 0)
      {
        uint64_t v3 = 1;
      }
      else
      {
        uint64_t v3 = 6;
        if (!strcmp(v7, "B") && NumberOfArguments == 4)
        {
          if ([v4 hasSuffix:@":error:"])
          {
            uint64_t v11 = method_copyArgumentType(InstanceMethod, 2u);
            if (!strcmp(v11, "^I"))
            {
              uint64_t v3 = 2;
            }
            else if (!strcmp(v11, "^Q"))
            {
              uint64_t v3 = 3;
            }
            else if (!strcmp(v11, "^d"))
            {
              uint64_t v3 = 4;
            }
            else
            {
              uint64_t v3 = 6;
            }
            if (v11) {
              free(v11);
            }
          }
          else
          {
            uint64_t v3 = 6;
          }
        }
      }
      if (v7) {
        free(v7);
      }
    }
    v12[0] = v13;
    v12[1] = v3;
    int v1 = std::__hash_table<std::__hash_value_type<objc_selector *,FSSelectorCategory>,std::__unordered_map_hasher<objc_selector *,std::__hash_value_type<objc_selector *,FSSelectorCategory>,std::hash<objc_selector *>,std::equal_to<objc_selector *>,true>,std::__unordered_map_equal<objc_selector *,std::__hash_value_type<objc_selector *,FSSelectorCategory>,std::equal_to<objc_selector *>,std::hash<objc_selector *>,true>,std::allocator<std::__hash_value_type<objc_selector *,FSSelectorCategory>>>::__emplace_unique_key_args<objc_selector *,std::pair<objc_selector *,FSSelectorCategory>>(v2, v12, v12);
  }
  uint64_t v9 = v1[3];
  os_unfair_lock_unlock((os_unfair_lock_t)&categorizeSelector(objc_selector *)::categoryCacheMutex);
  return v9;
}

void sub_182982AF8(_Unwind_Exception *a1)
{
  if (v2) {
    free(v2);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)&categorizeSelector(objc_selector *)::categoryCacheMutex);
  _Unwind_Resume(a1);
}

void sub_182982BB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZL30_LSPlistCreateTransformedValueP11objc_objectPFP8NSStringS2_PbES3__block_invoke_4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  (*(void (**)(id, uint64_t))(a1 + 48))(v5, *(void *)(*(void *)(a1 + 40) + 8) + 24);
  id v8 = (id)objc_claimAutoreleasedReturnValue();

  if (_NSIsNSString())
  {
    uint64_t v7 = (*(void (**)(id, uint64_t))(a1 + 48))(v6, *(void *)(*(void *)(a1 + 40) + 8) + 24);

    id v6 = (id)v7;
  }
  [*(id *)(a1 + 32) setObject:v6 forKey:v8];
}

void sub_182982C90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182982CFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182983230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v36 - 168), 8);
  _Block_object_dispose((const void *)(v36 - 136), 8);

  _Unwind_Resume(a1);
}

uint64_t _LSPluginIsValid(void *a1, unsigned int a2, uint64_t a3, void *a4, char a5, __CFString **a6)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = a1;
  int v12 = a4;
  char v61 = 0;
  if (!a3)
  {
    if (!a6) {
      goto LABEL_15;
    }
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    id v20 = @"No plugin data pointer";
LABEL_20:
    *a6 = v20;
    goto LABEL_21;
  }
  if (!*(_DWORD *)(a3 + 4))
  {
    if (a6) {
      *a6 = @"No container set for plugin";
    }
    BOOL v21 = _LSDefaultLog();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id buf = 0;
      _os_log_impl(&dword_182959000, v21, OS_LOG_TYPE_DEFAULT, "ERROR: No container set for plugin", buf, 2u);
    }

    goto LABEL_15;
  }
  uint64_t v13 = _LSContainerGet();
  if (!v13)
  {
    if (!a6) {
      goto LABEL_15;
    }
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    id v20 = @"No container data for plugin";
    goto LABEL_20;
  }
  uint64_t v14 = _LSContainerCheckState(v11, *(unsigned int *)(a3 + 4), v13, &v61, 0);
  if (!v14)
  {
    if (v61 != 1)
    {
      __int16 v26 = objc_msgSend(NSString, "stringWithFormat:", @"Container state is %i", v61);
      id v16 = v26;
      if (a6) {
        *a6 = (__CFString *)v26;
      }
      goto LABEL_7;
    }
    int v23 = *(_DWORD *)(a3 + 168);
    uint64_t v17 = (void *)_CSStringCopyCFString();
    if (_LSIsNewsWidgetBundleIdentifier(v17))
    {
      char v24 = +[LSApplicationRestrictionsManager sharedInstance]();
      BOOL v25 = -[LSApplicationRestrictionsManager isAppExtensionRestricted:]((BOOL)v24, v17);

      if (v25)
      {
        if (!a6) {
          goto LABEL_16;
        }
        uint64_t v18 = 0;
        uint64_t v19 = 0;
        id v20 = @"News app extension is restricted";
        goto LABEL_20;
      }
    }
    else
    {
      if ((v23 & 8) != 0)
      {
        if (!a6) {
          goto LABEL_16;
        }
        uint64_t v18 = 0;
        uint64_t v19 = 0;
        id v20 = @"Has override";
        goto LABEL_20;
      }
      if ((*(unsigned char *)(a3 + 164) & 2) != 0)
      {
        if (!a6) {
          goto LABEL_16;
        }
        uint64_t v18 = 0;
        uint64_t v19 = 0;
        id v20 = @"Requires GC";
        goto LABEL_20;
      }
      if (v12)
      {
        uint64_t v27 = _LSDatabaseGetNSStringFromString(v11);
        BOOL v29 = _LSPlistGetDictionary(v11, *(_DWORD *)(a3 + 140), v28);
        if (v27) {
          uint64_t v30 = v27;
        }
        else {
          uint64_t v30 = v17;
        }
        if ((((uint64_t (**)(id, void *, void *))v12)[2](v12, v30, v29) & 1) == 0)
        {
          if (a6) {
            *a6 = @"Rejected by filter block";
          }

          goto LABEL_16;
        }
      }
      long long v32 = (unsigned int *)(a3 + 224);
      int v31 = *(_DWORD *)(a3 + 224);
      if (v31)
      {
        uint64_t v33 = _LSBundleGet(v11, v31);
        uint64_t v34 = v33;
        if (!v33)
        {
          LSSessionKey v35 = _LSDefaultLog();
          if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
            _LSPluginIsValid_cold_1(a2, (unsigned int *)(a3 + 224), v35);
          }

          uint64_t v36 = objc_msgSend(NSString, "stringWithFormat:", @"Invalid parent app %llx", *v32);
          id v37 = v36;
          if (a6) {
            *a6 = (__CFString *)v36;
          }

          goto LABEL_16;
        }
        uint64_t v58 = *(void *)(v33 + 172);
        uint64_t v18 = _LSDatabaseGetNSStringFromString(v11);
        if (_LSBundleDataIsInUnsupportedLocation((uint64_t)v11, v34))
        {
          if (!a6) {
            goto LABEL_17;
          }
          uint64_t v19 = 0;
          id v20 = @"Parent app is in an unsupported location";
          goto LABEL_20;
        }
        if ((v58 & 0x40000) != 0)
        {
          if (!a6) {
            goto LABEL_17;
          }
          uint64_t v19 = 0;
          id v20 = @"Parent app is a placeholder";
          goto LABEL_20;
        }
        if ((a5 & 1) == 0 && (v58 & 0x400000000000) != 0)
        {
          if (!a6) {
            goto LABEL_17;
          }
          uint64_t v19 = 0;
          id v20 = @"Parent app has a parallel placeholder";
          goto LABEL_20;
        }
        uint64_t v38 = *(unsigned int *)(a3 + 20);
        if ((v38 | 2) != 2 && dyld_get_base_platform() != 2)
        {
          int v43 = objc_msgSend(NSString, "stringWithFormat:", @"Plugin invalid plugin platform %d on platform %d", v38, 2);
          id v44 = v43;
          if (a6) {
            *a6 = (__CFString *)v43;
          }

          goto LABEL_17;
        }
        int v39 = *(_DWORD *)(v34 + 180);
        if ((v39 & 0x2000000) != 0)
        {
          id v40 = +[LSEligibilityPredicateEvaluator sharedCachingEligibilityPredicateEvaluator];
          uint64_t v41 = *v32;
          id v60 = 0;
          uint64_t v42 = [v40 evaluateBundle:v41 bundleData:v34 database:v11 error:&v60];
          id v56 = v60;
          if (v42)
          {
            if (([v42 BOOLValue] & 1) == 0)
            {
              if (a6) {
                *a6 = @"Parent app is ineligible";
              }

              goto LABEL_17;
            }
          }
          else
          {
            id v45 = _LSBindingLog();
            if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
            {
              uint64_t v46 = *v32;
              *(_DWORD *)id buf = 134218242;
              uint64_t v63 = v46;
              __int16 v64 = 2112;
              id v65 = v56;
              _os_log_impl(&dword_182959000, v45, OS_LOG_TYPE_ERROR, "Couldn't check eligibility of parent app %llx: %@", buf, 0x16u);
            }
          }
          int v39 = *(_DWORD *)(v34 + 180);
        }
        if ((v39 & 0x4000000) != 0)
        {
          id v47 = +[LSFeatureFlagPredicateEvaluator defaultEvaluator];
          uint64_t v48 = *v32;
          id v59 = 0;
          long long v49 = [v47 evaluateBundle:v48 bundleData:v34 database:v11 error:&v59];
          id v57 = v59;
          if (v49)
          {
            if (([v49 BOOLValue] & 1) == 0)
            {
              if (a6) {
                *a6 = @"Parent app is disabled by feature flag";
              }

              goto LABEL_17;
            }
          }
          else
          {
            uint64_t v50 = _LSBindingLog();
            if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
            {
              uint64_t v51 = *v32;
              *(_DWORD *)id buf = 134218242;
              uint64_t v63 = v51;
              __int16 v64 = 2112;
              id v65 = v57;
              _os_log_impl(&dword_182959000, v50, OS_LOG_TYPE_ERROR, "Couldn't check feature flag of parent app %llx: %@", buf, 0x16u);
            }
          }
        }
        if ((v58 & 0x40000000000) == 0)
        {
          uint64_t v52 = +[LSApplicationRestrictionsManager sharedInstance]();
          uint64_t v53 = [NSNumber numberWithUnsignedLongLong:*(void *)(v34 + 416)];
          if (-[LSApplicationRestrictionsManager isRatingAllowed:](v52, v53))
          {
            +[LSApplicationRestrictionsManager sharedInstance]();
            uint64_t v54 = (id *)objc_claimAutoreleasedReturnValue();
            unsigned int v55 = -[LSApplicationRestrictionsManager isApplicationRestricted:](v54, v18);

            if (!v55) {
              goto LABEL_44;
            }
          }
          else
          {
          }
          if (!a6) {
            goto LABEL_17;
          }
          uint64_t v19 = 0;
          id v20 = @"Blocked by ManagedConfiguration";
          goto LABEL_20;
        }
LABEL_44:
        uint64_t v19 = 1;
        goto LABEL_21;
      }
    }
    uint64_t v18 = 0;
    goto LABEL_44;
  }
  id v15 = objc_msgSend(NSString, "stringWithFormat:", @"_LSContainerCheckState() returned %i", v14);
  id v16 = v15;
  if (a6) {
    *a6 = (__CFString *)v15;
  }
LABEL_7:

LABEL_15:
  uint64_t v17 = 0;
LABEL_16:
  uint64_t v18 = 0;
LABEL_17:
  uint64_t v19 = 0;
LABEL_21:

  return v19;
}

void sub_182983A14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSDatabaseGetNSStringFromString(_LSDatabase *a1)
{
  int v1 = (void *)_CSStringCopyCFString();

  return v1;
}

BOOL _LSIsNewsWidgetBundleIdentifier(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1) {
    BOOL v3 = [v1 caseInsensitiveCompare:@"com.apple.news.widget"] == 0;
  }
  else {
    BOOL v3 = 0;
  }

  return v3;
}

void sub_182983BC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t computeIsApplicationRestrictedWithMCStateProvider(void *a1, void *a2, int a3)
{
  id v5 = a1;
  id v6 = a2;
  if (!ManagedConfigurationLibrary_frameworkLibrary)
  {
    ManagedConfigurationLibrary_frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/ManagedConfiguration.framework/ManagedConfiguration", 2);
    if (!ManagedConfigurationLibrary_frameworkLibrary) {
      goto LABEL_10;
    }
  }
  if ([v5 isAllowlistEnabled])
  {
    uint64_t v7 = [v5 allowlistedBundleIDs];
    int v8 = [v7 containsObject:v6];

    if (!v8) {
      goto LABEL_6;
    }
  }
  uint64_t v9 = [v5 restrictedBundleIDs];
  char v10 = [v9 containsObject:v6];

  if ((v10 & 1) != 0
    || a3 && _LSIsNewsBundleIdentifier(v6) && (int v12 = (void *)getMCFeatureNewsAllowed[0](), !isFeatureAllowed(v12)))
  {
LABEL_6:
    uint64_t v11 = 1;
  }
  else
  {
LABEL_10:
    uint64_t v11 = 0;
  }

  return v11;
}

BOOL isFeatureAllowed(void *a1)
{
  id v1 = a1;
  uint64_t v2 = getSharedMCProfileConnection();
  int v3 = [v2 effectiveBoolValueForSetting:v1];

  return v3 != 2;
}

id getSharedMCProfileConnection()
{
  unsigned __int8 v0 = [(Class)getMCProfileConnectionClass[0]() sharedConnection];
  if (!v0)
  {
    id v1 = _LSDefaultLog();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
      getSharedMCProfileConnection_cold_1();
    }
  }

  return v0;
}

id MCProfileConnectionFunction()
{
  return (id)classMCProfileConnection;
}

BOOL _LSIsNewsBundleIdentifier(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1) {
    BOOL v3 = [v1 caseInsensitiveCompare:@"com.apple.news"] == 0;
  }
  else {
    BOOL v3 = 0;
  }

  return v3;
}

void sub_18298416C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSLazyLoadObjectWithLock(id *a1, os_unfair_lock_s *a2, void *a3)
{
  id v5 = a3;
  os_unfair_lock_lock(a2);
  id v6 = *a1;
  if (!v6)
  {
    v5[2](v5);
    id v6 = (id)objc_claimAutoreleasedReturnValue();
    id v7 = *a1;
    *a1 = v6;
  }
  os_unfair_lock_unlock(a2);

  return v6;
}

void sub_1829842A8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);

  _Unwind_Resume(a1);
}

id getValueForKeyFromPlist(NSString *a1, NSDictionary *a2)
{
  BOOL v3 = a1;
  uint64_t v4 = a2;
  id v5 = [(NSDictionary *)v4 objectForKey:@"NSExtension"];
  id v6 = [v5 objectForKey:@"NSExtensionAttributes"];
  id v7 = v6;
  if (!v6 || ([v6 objectForKey:v3], (int v8 = objc_claimAutoreleasedReturnValue()) == 0))
  {
    int v8 = [(NSDictionary *)v4 objectForKey:v3];
  }

  return v8;
}

void sub_182984438(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182984530(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

BOOL _LSBundleDataIsInUnsupportedLocation(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 172);
  _LSContainerGet();
  return (v2 & 0x1000000040) != 0;
}

void sub_1829847C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t _LSNodeIsPackageCommon(LSContext *a1, void *a2, int a3, unsigned char *a4)
{
  id v7 = a2;
  int v8 = v7;
  if (a4) {
    *a4 = 0;
  }
  if ([v7 isDirectory] && (objc_msgSend(v8, "isVolume") & 1) == 0)
  {
    if ([v8 hasPackageBit])
    {
      uint64_t v9 = 1;
    }
    else
    {
      uint64_t v11 = [v8 extensionWithError:0];
      int v12 = v11;
      if (v11)
      {
        if (a1
          && [(__CFString *)v11 length]
          && (_LSIsPackageExtension(a1, a3, v12)
           || ([v8 getHFSType:0 creator:0 error:0] & 1) != 0))
        {
          uint64_t v9 = 1;
        }
        else
        {
          uint64_t v9 = [v8 isAVCHDCollection];
          char v13 = v9 ^ 1;
          if (!a4) {
            char v13 = 1;
          }
          if ((v13 & 1) == 0)
          {
            uint64_t v9 = 1;
            *a4 = 1;
          }
        }
      }
      else
      {
        uint64_t v9 = 0;
      }
    }
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

void sub_18298491C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSGetBundleClassForNode(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (([v3 isVolume] & 1) == 0
    && (([v3 isDirectory] & 1) != 0 || (objc_msgSend(v3, "isResolvable") & 1) == 0))
  {
    id v28 = 0;
    id v5 = [v3 extensionWithError:&v28];
    id v6 = v28;
    id v7 = v6;
    if (!v5 && _LSGetOSStatusFromNSError(v6)) {
      goto LABEL_37;
    }
    uint64_t v8 = [(__CFString *)v5 length];
    uint64_t v9 = v8;
    if (!v8)
    {
LABEL_31:
      if (![v3 isDirectory]) {
        goto LABEL_42;
      }
      int v17 = [v3 hasPackageBit] ^ 1;
      if (v9) {
        LOBYTE(v17) = 0;
      }
      if ((v17 & 1) == 0)
      {
LABEL_42:
        v20[0] = 0;
        if ([v3 getHFSType:v20 creator:0 error:0])
        {
          uint64_t v4 = _LSGetBundleClassForHFSType(v20[0]);
LABEL_38:

          goto LABEL_39;
        }
      }
LABEL_37:
      uint64_t v4 = 0;
      goto LABEL_38;
    }
    BOOL v21 = v5;
    uint64_t v24 = 0;
    uint64_t v25 = v8;
    if (CFStringGetCharactersPtr(v5)) {
      CStringPtr = 0;
    }
    else {
      CStringPtr = CFStringGetCStringPtr(v5, 0x600u);
    }
    int v23 = CStringPtr;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v11 = _LSGetBundleClassForExtensionInlineBuffer((uint64_t)v20);
    uint64_t v4 = v11;
    if (v11)
    {
      if (v11 == 1)
      {
        int v12 = [v3 pathWithError:0];
        char v13 = v12;
        if (v12
          && ![v12 caseInsensitiveCompare:@"/System/Library/CoreServices/MobileCoreTypes.bundle"])
        {

          uint64_t v4 = 11;
        }
        else
        {

          uint64_t v4 = 1;
        }
      }
      goto LABEL_38;
    }
    if ([v3 isDirectory])
    {
      if (a1 && _LSIsKnownExtensionInlineBuffer(a1, (uint64_t)v20)) {
        goto LABEL_37;
      }
      goto LABEL_31;
    }
    int v19 = 1061109567;
    if (a1)
    {
      uint64_t v14 = v5;
      id v15 = v14;
      if (v5 && [(__CFString *)v14 length] == 3)
      {
        uint64_t v16 = [(__CFString *)v15 caseInsensitiveCompare:@"exe"];

        if (!v16) {
          goto LABEL_28;
        }
      }
      else
      {
      }
      if (_LSIsKnownExtensionInlineBuffer(a1, (uint64_t)v20)) {
        goto LABEL_37;
      }
    }
LABEL_28:
    if (![v3 getHFSType:&v19 creator:0 error:0] || v19 == 1061109567 || !v19) {
      goto LABEL_37;
    }
    goto LABEL_31;
  }
  uint64_t v4 = 0;
LABEL_39:

  return v4;
}

void sub_182984BC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _FSNodeGetSimpleBoolValue(FSNode *a1, NSString *a2, uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    if (a2) {
      goto LABEL_3;
    }
LABEL_9:
    char v10 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v11 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL _FSNodeGetSimpleBoolValue(FSNode *const __strong, const __strong NSURLResourceKey, CFURLResourcePropertyFlags, CFURLVolumePropertyFlags)");
    [v10 handleFailureInFunction:v11, @"FSUtils.mm", 657, @"Invalid parameter not satisfying: %@", @"inKey != nil" file lineNumber description];

    if (!a1) {
      goto LABEL_10;
    }
    goto LABEL_4;
  }
  uint64_t v8 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v9 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL _FSNodeGetSimpleBoolValue(FSNode *const __strong, const __strong NSURLResourceKey, CFURLResourcePropertyFlags, CFURLVolumePropertyFlags)");
  [v8 handleFailureInFunction:v9, @"FSUtils.mm", 656, @"Invalid parameter not satisfying: %@", @"inNode != nil" file lineNumber description];

  if (!a2) {
    goto LABEL_9;
  }
LABEL_3:
  if (!a1) {
    goto LABEL_10;
  }
LABEL_4:
  if (a4 | a3 && (*((unsigned char *)a1 + 24) & 8) != 0 && __CFURLResourceInfoPtr())
  {
    id v14 = 0;
    MEMORY[0x18530E300]();
  }
LABEL_10:
  id v14 = 0;
  if ([(FSNode *)a1 getResourceValue:&v14 forKey:a2 options:1 error:0])
  {
    uint64_t v12 = [v14 BOOLValue];
  }
  else
  {
    uint64_t v12 = 0;
  }

  return v12;
}

void sub_182984E68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182985064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t _LSBundleFindWithNode(uint64_t a1, void *a2, _DWORD *a3, void *a4)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  uint64_t v47 = 0;
  uint64_t v48 = &v47;
  uint64_t v49 = 0x2020000000;
  char v50 = 0;
  uint64_t v43 = 0;
  id v44 = &v43;
  uint64_t v45 = 0x2020000000;
  int v46 = 0;
  uint64_t v39 = 0;
  id v40 = &v39;
  uint64_t v41 = 0x2020000000;
  uint64_t v42 = 0;
  id v37 = 0;
  uint64_t v38 = 0;
  uint64_t v8 = [v7 nameWithError:&v37];
  id v9 = v37;
  char v10 = v9;
  if (v8)
  {
  }
  else
  {
    uint64_t v14 = _LSGetOSStatusFromNSError(v9);

    if (v14) {
      goto LABEL_9;
    }
  }
  id v36 = 0;
  int v11 = [v7 getVolumeIdentifier:&v38 error:&v36];
  id v12 = v36;
  char v13 = v12;
  if (v11)
  {
  }
  else
  {
    uint64_t v14 = _LSGetOSStatusFromNSError(v12);

    if (v14) {
      goto LABEL_9;
    }
  }
  if (!*((unsigned char *)v48 + 24))
  {
    memset(v51, 0, sizeof(v51));
    LaunchServices::BindingEvaluator::CreateWithBundleInfo(0, v8, 0, 0, v51, (uint64_t)v52);
    v32[0] = MEMORY[0x1E4F143A8];
    v32[1] = 3221225472;
    _OWORD v32[2] = ___LSBundleFindWithNode_block_invoke;
    v32[3] = &unk_1E522D5E8;
    uint64_t v34 = a1;
    id v19 = v7;
    id v33 = v19;
    uint64_t v35 = v38;
    LaunchServices::BindingEvaluator::setFilter((uint64_t)v52, @"bundle unit matches input node", v32);
    LaunchServices::BindingEvaluator::setOptions((uint64_t)v52, 32910);
    LaunchServices::BindingEvaluator::getBestBinding((LaunchServices::BindingEvaluator *)v52, v30);
    if (v31)
    {
      *((_DWORD *)v44 + 6) = v30[0];
      v40[3] = v30[1];
      *((unsigned char *)v48 + 24) = 1;
    }
    else
    {
      id v20 = _LSDefaultLog();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
        _LSBundleFindWithNode_cold_1((uint64_t)v19, v20);
      }

      v23[1] = (id)MEMORY[0x1E4F143A8];
      id v23[2] = (id)3221225472;
      v23[3] = ___LSBundleFindWithNode_block_invoke_137;
      v23[4] = &unk_1E522D610;
      uint64_t v25 = &v43;
      uint64_t v26 = &v39;
      uint64_t v28 = a1;
      id v21 = v19;
      uint64_t v29 = v38;
      id v24 = v21;
      uint64_t v27 = &v47;
      _CSStoreEnumerateUnits();
    }
    if (v31)
    {
    }
    LaunchServices::BindingEvaluator::~BindingEvaluator((LaunchServices::BindingEvaluator *)v52);
    id v15 = 0;
    goto LABEL_23;
  }
  uint64_t v14 = 0;
LABEL_9:
  if (*((unsigned char *)v48 + 24))
  {
    id v15 = 0;
    goto LABEL_24;
  }
  v23[0] = 0;
  uint64_t v16 = [v7 pathWithError:v23];
  id v17 = v23[0];
  uint64_t v18 = v17;
  if (v16)
  {
  }
  else
  {
    uint64_t v14 = _LSGetOSStatusFromNSError(v17);

    if (v14)
    {
      id v15 = 0;
      goto LABEL_30;
    }
  }
  id v15 = v16;
  _CSStoreEnumerateUnits();

LABEL_23:
  uint64_t v14 = 0;
LABEL_24:
  if (*((unsigned char *)v48 + 24))
  {
    if (a3) {
      *a3 = *((_DWORD *)v44 + 6);
    }
    if (a4) {
      *a4 = v40[3];
    }
  }
  else
  {
    uint64_t v14 = 4294957797;
  }
LABEL_30:

  _Block_object_dispose(&v39, 8);
  _Block_object_dispose(&v43, 8);
  _Block_object_dispose(&v47, 8);

  return v14;
}

void sub_18298554C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,id a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  std::__optional_destruct_base<LSBinding,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&a30);
  LaunchServices::BindingEvaluator::~BindingEvaluator((LaunchServices::BindingEvaluator *)&a63);

  _Block_object_dispose(&a47, 8);
  _Block_object_dispose(&a51, 8);
  _Block_object_dispose(&a55, 8);

  _Unwind_Resume(a1);
}

void sub_182985790(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829858A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_182985944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t _LSGetBundleClassForExtensionInlineBuffer(uint64_t a1)
{
  uint64_t result = 0;
  switch(*(void *)(a1 + 160))
  {
    case 3:
      v11.id location = *(void *)(a1 + 152);
      v11.CFIndex length = 3;
      if (CFStringCompareWithOptions(*(CFStringRef *)(a1 + 128), @"app", v11, 0))
      {
        CFStringRef v3 = *(const __CFString **)(a1 + 128);
        CFRange v4 = *(CFRange *)(a1 + 152);
        CFStringRef v5 = @"xpc";
        goto LABEL_7;
      }
      return 2;
    case 4:
      v12.id location = *(void *)(a1 + 152);
      v12.CFIndex length = 4;
      if (CFStringCompareWithOptions(*(CFStringRef *)(a1 + 128), @"wdgt", v12, 0))
      {
        BOOL v6 = CFStringCompareWithOptions(*(CFStringRef *)(a1 + 128), @"dext", *(CFRange *)(a1 + 152), 0) == kCFCompareEqualTo;
        unsigned int v7 = 15;
        goto LABEL_19;
      }
      return 6;
    case 5:
      CFStringRef v3 = *(const __CFString **)(a1 + 128);
      v4.id location = *(void *)(a1 + 152);
      CFStringRef v5 = @"appex";
      v4.CFIndex length = 5;
LABEL_7:
      BOOL v6 = CFStringCompareWithOptions(v3, v5, v4, 0) == kCFCompareEqualTo;
      unsigned int v7 = 12;
      goto LABEL_19;
    case 6:
      v13.id location = *(void *)(a1 + 152);
      v13.CFIndex length = 6;
      if (CFStringCompareWithOptions(*(CFStringRef *)(a1 + 128), @"bundle", v13, 0))
      {
        BOOL v6 = CFStringCompareWithOptions(*(CFStringRef *)(a1 + 128), @"action", *(CFRange *)(a1 + 152), 0) == kCFCompareEqualTo;
        unsigned int v7 = 5;
        goto LABEL_19;
      }
      uint64_t result = 1;
      break;
    case 7:
      CFStringRef v8 = *(const __CFString **)(a1 + 128);
      v10.id location = *(void *)(a1 + 152);
      CFStringRef v9 = @"service";
      v10.CFIndex length = 7;
      return 2 * (CFStringCompareWithOptions(v8, v9, v10, 0) == kCFCompareEqualTo);
    case 8:
      v14.id location = *(void *)(a1 + 152);
      v14.CFIndex length = 8;
      BOOL v6 = CFStringCompareWithOptions(*(CFStringRef *)(a1 + 128), @"prefpane", v14, 0) == kCFCompareEqualTo;
      unsigned int v7 = 9;
      goto LABEL_19;
    case 9:
      v15.id location = *(void *)(a1 + 152);
      v15.CFIndex length = 9;
      if (CFStringCompareWithOptions(*(CFStringRef *)(a1 + 128), @"framework", v15, 0))
      {
        BOOL v6 = CFStringCompareWithOptions(*(CFStringRef *)(a1 + 128), @"vpnplugin", *(CFRange *)(a1 + 152), 0) == kCFCompareEqualTo;
        unsigned int v7 = 13;
LABEL_19:
        if (v6) {
          uint64_t result = v7;
        }
        else {
          uint64_t result = 0;
        }
      }
      else
      {
        uint64_t result = 3;
      }
      break;
    case 0xALL:
      v16.id location = *(void *)(a1 + 152);
      v16.CFIndex length = 10;
      return 4
           * (CFStringCompareWithOptions(*(CFStringRef *)(a1 + 128), @"mdimporter", v16, 0) == kCFCompareEqualTo);
    case 0xBLL:
      v17.id location = *(void *)(a1 + 152);
      v17.CFIndex length = 11;
      if (CFStringCompareWithOptions(*(CFStringRef *)(a1 + 128), @"qlgenerator", v17, 0) == kCFCompareEqualTo) {
        return 7;
      }
      CFStringRef v8 = *(const __CFString **)(a1 + 128);
      CFRange v10 = *(CFRange *)(a1 + 152);
      CFStringRef v9 = @"placeholder";
      return 2 * (CFStringCompareWithOptions(v8, v9, v10, 0) == kCFCompareEqualTo);
    case 0xCLL:
      v18.id location = *(void *)(a1 + 152);
      v18.CFIndex length = 12;
      BOOL v6 = CFStringCompareWithOptions(*(CFStringRef *)(a1 + 128), @"cannedsearch", v18, 0) == kCFCompareEqualTo;
      unsigned int v7 = 10;
      goto LABEL_19;
    case 0xFLL:
      v19.id location = *(void *)(a1 + 152);
      v19.CFIndex length = 15;
      if (CFStringCompareWithOptions(*(CFStringRef *)(a1 + 128), @"systemextension", v19, 0)) {
        return 0;
      }
      else {
        return 15;
      }
    default:
      return result;
  }
  return result;
}

BOOL _LSIsPackageExtension(LSContext *a1, int a2, CFStringRef theString)
{
  if (!theString) {
    goto LABEL_9;
  }
  CFIndex Length = CFStringGetLength(theString);
  switch(Length)
  {
    case 3:
      CFStringRef v7 = @"app";
      goto LABEL_8;
    case 11:
      CFStringRef v7 = @"placeholder";
LABEL_8:
      BOOL v8 = 1;
      if (CFStringCompare(theString, v7, 1uLL) == kCFCompareEqualTo) {
        return v8;
      }
      break;
    case 7:
      CFStringRef v7 = @"service";
      goto LABEL_8;
  }
LABEL_9:
  uint64_t v14 = 0;
  CFRange v15 = &v14;
  uint64_t v16 = 0x2020000000;
  char v17 = 0;
  if (_LSDatabaseGetStringForCFString(a1->db, theString, 1)) {
    _LSDatabaseEnumeratingBindingMap();
  }
  int v9 = *((unsigned __int8 *)v15 + 24);
  _Block_object_dispose(&v14, 8);
  BOOL v10 = v9 == 0;
  BOOL v8 = v9 != 0;
  BOOL v10 = !v10 || a2 == 0;
  if (!v10)
  {
    db = a1->db;
    int TypePackage = _UTTypeGetTypePackage(db);
    return _UTTypeGetActiveIdentifierForTag(db, @"public.filename-extension", theString, TypePackage, 0) != 0;
  }
  return v8;
}

void sub_182985D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _UTTypeGetActiveIdentifierForTag(void *a1, const __CFString *a2, const __CFString *a3, int a4, uint64_t a5)
{
  id v9 = a1;
  BOOL v10 = v9;
  uint64_t v11 = 0;
  uint64_t v18 = 0;
  CFRange v19 = &v18;
  uint64_t v20 = 0x2020000000;
  uint64_t v21 = 0;
  if (v9 && a2 && a3)
  {
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = ___UTTypeGetActiveIdentifierForTag_block_invoke;
    v13[3] = &unk_1E52316F0;
    int v17 = a4;
    id v14 = v9;
    CFRange v15 = &v18;
    uint64_t v16 = a5;
    _UTEnumerateTypesForTag(v14, a2, a3, v13);

    uint64_t v11 = v19[3];
  }
  _Block_object_dispose(&v18, 8);

  return v11;
}

void sub_182985EB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _LSGetBundleClassForHFSType(int a1)
{
  uint64_t result = 2;
  if (a1 <= 1128547669)
  {
    if ((a1 - 1095782467) <= 9 && ((1 << (a1 - 67)) & 0x207) != 0) {
      return result;
    }
    return a1 == 1112425548;
  }
  if (a1 <= 1634758756)
  {
    if (a1 == 1128547670) {
      return result;
    }
    if (a1 == 1179473739) {
      return 3;
    }
    return 0;
  }
  if (a1 != 1634758757 && a1 != 1667523958 && a1 != 1684433260) {
    return 0;
  }
  return result;
}

void sub_1829861E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _UTTypeGetTypePackage(_LSDatabase *a1)
{
  return _UTTypeGetCachedType(a1, @"com.apple.package", (unsigned int *)a1->schema._cache + 76);
}

void sub_1829862A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182986384(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182986440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<objc_selector *,FSSelectorCategory>,std::__unordered_map_hasher<objc_selector *,std::__hash_value_type<objc_selector *,FSSelectorCategory>,std::hash<objc_selector *>,std::equal_to<objc_selector *>,true>,std::__unordered_map_equal<objc_selector *,std::__hash_value_type<objc_selector *,FSSelectorCategory>,std::equal_to<objc_selector *>,std::hash<objc_selector *>,true>,std::allocator<std::__hash_value_type<objc_selector *,FSSelectorCategory>>>::__emplace_unique_key_args<objc_selector *,std::pair<objc_selector *,FSSelectorCategory>>(uint64_t a1, void *a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (size_t i = *v11; i; size_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  size_t i = operator new(0x20uLL);
  *size_t i = 0;
  i[1] = v8;
  uint64_t v14 = a3[1];
  i[2] = *a3;
  i[3] = v14;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void *)a1;
  long long v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *size_t i = *v22;
LABEL_38:
    void *v22 = i;
    goto LABEL_39;
  }
  *size_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v21 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }
    else
    {
      v23 &= v9 - 1;
    }
    long long v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_182986694(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t MCFeatureNewsAllowedFunction()
{
  return constantMCFeatureNewsAllowed;
}

Class initMCProfileConnection()
{
  if (!ManagedConfigurationLibrary_frameworkLibrary) {
    ManagedConfigurationLibrary_frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/ManagedConfiguration.framework/ManagedConfiguration", 2);
  }
  Class result = objc_getClass("MCProfileConnection");
  classMCProfileConnection = (uint64_t)result;
  getMCProfileConnectionClass[0] = (uint64_t (*)())MCProfileConnectionFunction;
  return result;
}

uint64_t initMCFeatureNewsAllowed()
{
  unsigned __int8 v0 = (void *)ManagedConfigurationLibrary_frameworkLibrary;
  if (!ManagedConfigurationLibrary_frameworkLibrary)
  {
    unsigned __int8 v0 = dlopen("/System/Library/PrivateFrameworks/ManagedConfiguration.framework/ManagedConfiguration", 2);
    ManagedConfigurationLibrary_frameworkLibrary = (uint64_t)v0;
  }
  uint64_t result = *(void *)dlsym(v0, "MCFeatureNewsAllowed");
  constantMCFeatureNewsAllowed = result;
  getMCFeatureNewsAllowed[0] = MCFeatureNewsAllowedFunction;
  return result;
}

void sub_182986ACC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _UTTypeGetBundleBaseData(void *a1, uint64_t a2)
{
  id v3 = a1;
  CFRange v4 = v3;
  int v5 = *(_DWORD *)(a2 + 20);
  if ((*(unsigned char *)(a2 + 9) & 0x20) != 0) {
    uint64_t v6 = _LSGetPlugin((uint64_t)v3, v5);
  }
  else {
    uint64_t v6 = _LSBundleGet(v3, v5);
  }
  uint64_t v7 = v6;

  return v7;
}

void sub_182986B30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182986D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

id _UTDynamicGetFirstTag(const __CFString *a1, const __CFString *cf)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = 0;
  uint8x8_t v10 = &v9;
  uint64_t v11 = 0x3032000000;
  CFRange v12 = __Block_byref_object_copy__53;
  unint64_t v13 = __Block_byref_object_dispose__53;
  id v14 = 0;
  if (cf && (CFTypeID v4 = CFGetTypeID(cf), v4 == CFStringGetTypeID()))
  {
    CFIndex Length = CFStringGetLength(cf);
    if (XCFBufInitWithCFStringRange((uint64_t)v15, cf, 0, Length, 1))
    {
      v8[0] = MEMORY[0x1E4F143A8];
      v8[1] = 3221225472;
      _DWORD v8[2] = ___UTDynamicGetFirstTag_block_invoke;
      v8[3] = &unk_1E5230F28;
      v8[4] = &v9;
      _UTDynamicValuesSearch(0, a1, 2, (uint64_t)v15, (uint64_t (*)(uint64_t *))_UTDynamicValuesSearchWithBlock::$_0::__invoke, (uint64_t)v8);
      XCFBufDestroy((uint64_t)v15);
    }
  }
  else
  {
    XCFBufInit((uint64_t)v15);
  }
  id v6 = (id)v10[5];
  _Block_object_dispose(&v9, 8);

  return v6;
}

void sub_182986FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id a19)
{
  _Unwind_Resume(a1);
}

objc_object *_LSDServiceReplaceObject(objc_object *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0
    && ([(objc_object *)v1 isMemberOfClass:objc_opt_class()] & 1) == 0)
  {
    id v2 = objc_alloc(MEMORY[0x1E4F1CB10]);
    id v3 = [(objc_object *)v1 absoluteString];
    uint64_t v4 = [v2 initWithString:v3];

    id v1 = (objc_object *)v4;
  }

  return v1;
}

void sub_1829870A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182987150(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829872DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829874E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829877DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182987EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,id a42)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a37, 8);

  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)(v43 - 240));
  _Block_object_dispose((const void *)(v43 - 208), 8);

  _Unwind_Resume(a1);
}

uint64_t _LSGetAuditTokenForSelf()
{
  if (_LSGetAuditTokenForSelf::once != -1) {
    dispatch_once(&_LSGetAuditTokenForSelf::once, &__block_literal_global_183);
  }
  return _LSGetAuditTokenForSelf::result;
}

void sub_182988068(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182988174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _LSRetryForConnectionInterrupted(void *a1)
{
  id v1 = a1;
  id v2 = 0;
  int v3 = 9;
  do
  {
    uint64_t v4 = v1[2](v1);

    BOOL IsXPCConnectionInterrupted = _LSNSErrorIsXPCConnectionInterrupted(v4);
    BOOL v7 = v3-- != 0 && IsXPCConnectionInterrupted;
    id v2 = v4;
  }
  while (v7);

  return v4;
}

void sub_182988218(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL _LSNSErrorIsXPCConnectionInterrupted(void *a1)
{
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    int v3 = [v1 domain];
    if ([v3 isEqual:*MEMORY[0x1E4F281F8]]) {
      BOOL v4 = [v2 code] == 4097;
    }
    else {
      BOOL v4 = 0;
    }
  }
  else
  {
    BOOL v4 = 0;
  }

  return v4;
}

void sub_1829882B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18298843C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1829885B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

void LaunchServices::Record::storeWeakSharedRecord(void *a1, id *a2)
{
  id v3 = a1;
  objc_storeWeak(a2, v3);
  if (v3)
  {
    [v3 _setShared:1];
    CFAutorelease(v3);
  }
}

void sub_18298864C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t _LSGetPIDFromToken(_OWORD *a1)
{
  pid_t pidp = 0;
  long long v1 = a1[1];
  *(_OWORD *)atoken.val = *a1;
  *(_OWORD *)&atoken.val[4] = v1;
  audit_token_to_au32(&atoken, 0, 0, 0, 0, 0, &pidp, 0, 0);
  return pidp;
}

void sub_1829887A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _UTDynamicGetPedigree(uint64_t a1, __CFString *a2)
{
  id v2 = 0;
  if (a1 && a2)
  {
    id v5 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
    if (v5)
    {
      id v6 = (void *)[(__CFString *)a2 copy];
      [v5 addObject:v6];

      uint64_t v9 = MEMORY[0x1E4F143A8];
      uint64_t v10 = 3221225472;
      uint64_t v11 = ___UTDynamicGetPedigree_block_invoke;
      CFRange v12 = &unk_1E5230FC8;
      uint64_t v14 = a1;
      id v2 = v5;
      id v13 = v2;
      _UTDynamicEnumerateParentIdentifiers(a2, (uint64_t)&v9);
    }
    else
    {
      id v2 = 0;
    }
  }
  uint64_t v7 = objc_msgSend(v2, "copy", v9, v10, v11, v12);

  return v7;
}

void sub_182988950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t _UTDynamicEnumerateParentIdentifiers(const __CFString *a1, uint64_t a2)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = ___UTDynamicEnumerateParentIdentifiers_block_invoke;
  v3[3] = &unk_1E5230FA0;
  v3[4] = a2;
  return _UTDynamicValuesSearch(0, a1, 1, (uint64_t)&kUTTypeConformsToKeyChars, (uint64_t (*)(uint64_t *))_UTDynamicValuesSearchWithBlock::$_0::__invoke, (uint64_t)v3);
}

CFStringRef _UTTypeCreateDynamicIdentifierForFileInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (!a2 || a4)
  {
    XCFBufInit((uint64_t)&v17);
    if (a4)
    {
      XCFBufAppend(&v17, "?0=", 3u);
      uint64_t v8 = 0;
      uint64_t v9 = (_DWORD *)(a3 + 8);
      do
      {
        if (v8) {
          XCFBufAppend(&v17, ",", 1u);
        }
        uint64_t v10 = (void *)*((void *)v9 - 1);
        unsigned int v11 = *v9;
        v9 += 4;
        XCFBufInitWithBytes((uint64_t)&v19, v10, v11, 0);
        _UTAbbreviateTerm(&v19);
        _UTAppendCharactersAddingEscapes(&v17, v19, v20);
        XCFBufDestroy((uint64_t)&v19);
        ++v8;
      }
      while (a4 != v8);
    }
  }
  else
  {
    if (*(void *)a2) {
      CFStringGetLength(@"public.filename-extension");
    }
    XCFBufInit((uint64_t)&v17);
  }
  if (a1)
  {
    if (v18) {
      XCFBufAppend(&v17, ":", 1u);
    }
    XCFBufInitWithBytes((uint64_t)&v19, *(void **)a2, *(unsigned int *)(a2 + 8), 0);
    _UTAbbreviateTerm(&v19);
    _UTAppendCharactersAddingEscapes(&v17, v19, v20);
    XCFBufDestroy((uint64_t)&v19);
    XCFBufAppend(&v17, "=", 1u);
    _UTAppendCharactersAddingEscapes(&v17, *(unsigned char **)a1, *(_DWORD *)(a1 + 8));
  }
  CFStringRef v12 = 0;
  id v13 = v17;
  if (v17)
  {
    unsigned int v14 = v18;
    if (v18)
    {
      memset(v21, 0, sizeof(v21));
      XCFBufInit((uint64_t)v21);
      XCFBufAppend(v21, "dyn.a", 5u);
      int v15 = _UTBase32EncodedLength(v14);
      XCFBufAddCapacity(v21, v15);
      _UTBase32Encode(v13, v14, (unsigned char *)(*(void *)&v21[0] + DWORD2(v21[0])));
      DWORD2(v21[0]) += v15;
      *(unsigned char *)(*(void *)&v21[0] + DWORD2(v21[0])) = 0;
      CFStringRef v12 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(const UInt8 **)&v21[0], DWORD2(v21[0]), 0x8000100u, 0);
      XCFBufDestroy((uint64_t)v21);
    }
  }
  XCFBufDestroy((uint64_t)&v17);
  return v12;
}

void *XCFBufAppend(_DWORD *a1, const void *a2, unsigned int a3)
{
  XCFBufAddCapacity(a1, a3);
  uint64_t result = memcpy((void *)(*(void *)a1 + a1[2]), a2, a3);
  unsigned int v7 = a1[2] + a3;
  a1[2] = v7;
  *(unsigned char *)(*(void *)a1 + v7) = 0;
  return result;
}

_DWORD *XCFBufAddCapacity(_DWORD *result, int a2)
{
  unsigned int v2 = result[2] + a2;
  unsigned int v3 = result[6];
  if (v2 > v3)
  {
    BOOL v4 = result;
    unsigned int v5 = (2 * v3) | 1;
    if (v2 <= v5) {
      unsigned int v6 = v5;
    }
    else {
      unsigned int v6 = result[2] + a2;
    }
    unsigned int v7 = *(void **)result;
    if (v7 == *((void **)v4 + 2))
    {
      uint64_t result = malloc_type_realloc(v7, v6 + 1, 0xDF88A665uLL);
      *((void *)v4 + 2) = result;
    }
    else
    {
      uint64_t v8 = malloc_type_malloc(v6 + 1, 0xC970C799uLL);
      *((void *)v4 + 2) = v8;
      memcpy(v8, *(const void **)v4, v4[2]);
      uint64_t result = (_DWORD *)*((void *)v4 + 2);
    }
    *(void *)BOOL v4 = result;
    v4[6] = v6;
  }
  return result;
}

_DWORD *_UTAppendCharactersAddingEscapes(_DWORD *a1, unsigned char *a2, unsigned int a3)
{
  uint64_t result = XCFBufAddCapacity(a1, 2 * a3);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = a1[2];
  if (a3)
  {
    uint64_t v9 = (unsigned char *)(v7 + v8);
    uint64_t v10 = a3;
    do
    {
      int v11 = (char)*a2;
      if ((v11 - 44) <= 0x30 && ((1 << (*a2 - 44)) & 0x1000000024001) != 0 || v11 == 0)
      {
        *v9++ = 92;
        ++a1[2];
        LOBYTE(v11) = *a2;
      }
      *v9++ = v11;
      uint64_t v8 = (a1[2] + 1);
      a1[2] = v8;
      ++a2;
      --v10;
    }
    while (v10);
    uint64_t v7 = *(void *)a1;
  }
  *(unsigned char *)(v7 + v8) = 0;
  return result;
}

void sub_1829890A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _UTDynamicValuesSearch(uint64_t a1, const __CFString *a2, int a3, uint64_t a4, uint64_t (*a5)(uint64_t *), uint64_t a6)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  XCFBufInit((uint64_t)&v42);
  if (a2 && (CFTypeID v12 = CFGetTypeID(a2), v12 == CFStringGetTypeID()))
  {
    CFIndex Length = CFStringGetLength(a2);
    XCFBufInitWithCFStringRange((uint64_t)&v44, a2, 0, Length, 0);
  }
  else
  {
    XCFBufInit((uint64_t)&v44);
  }
  if (v45 >= 5 && *(unsigned char *)(v44 + 4) == 97)
  {
    int v14 = _UTBase32DecodedLength(v45 - 5);
    XCFBufAddCapacity(&v42, v14);
    BOOL v15 = _UTBase32Decode(v44 + 5, v45 - 5, v42);
    v42[v14] = 0;
    unsigned int v43 = v14;
    XCFBufDestroy((uint64_t)&v44);
    if (v15)
    {
      uint64_t v51 = a6;
      size_t i = v42;
      uint64_t v44 = a1;
      int v46 = (char *)v42;
      if (v42)
      {
        while (1)
        {
          BOOL v17 = v42;
          unsigned int v18 = &v42[v43];
          if (i - v42 == v43)
          {
            unsigned int v19 = 0;
            goto LABEL_24;
          }
          unsigned int v20 = i;
          uint64_t v21 = i;
          while (1)
          {
            int v22 = *v21;
            if (v22 == 61) {
              break;
            }
            if (v21 + 1 == v18) {
              unint64_t v23 = v21;
            }
            else {
              unint64_t v23 = v21 + 1;
            }
            if (v22 == 92 && v17 != 0) {
              uint64_t v21 = v23;
            }
            unsigned __int8 v25 = *v21++;
            *v20++ = v25;
            if (v21 == v18)
            {
              uint64_t v40 = 0;
              LODWORD(v47) = 0;
              int v46 = 0;
              goto LABEL_79;
            }
          }
          unsigned int v19 = v21 - i;
          for (size_t i = v21; ; size_t i = v29 + 1)
          {
LABEL_24:
            if (i == v18)
            {
              size_t i = 0;
              goto LABEL_38;
            }
            int v26 = *i;
            if (v26 == 58) {
              break;
            }
            if (i + 1 == v18) {
              uint64_t v27 = i;
            }
            else {
              uint64_t v27 = i + 1;
            }
            if (v26 != 92 || v17 == 0) {
              uint64_t v29 = i;
            }
            else {
              uint64_t v29 = v27;
            }
          }
          ++i;
LABEL_38:
          LODWORD(v47) = v19;
          if (v19)
          {
            uint64_t v30 = v46;
            if (*v46 == 63)
            {
              unsigned int v45 = 1;
              uint64_t v30 = ++v46;
              LODWORD(v47) = --v19;
            }
            else
            {
              unsigned int v45 = 2;
            }
            uint64_t v49 = &v30[v19 + 1];
            char v31 = _UTDebreviateTerm(&v46);
            int v46 = v31;
            uint64_t v47 = v32;
            if (!a3 || v45 == a3)
            {
              if (!a4) {
                goto LABEL_52;
              }
              uint64_t v40 = 0;
              if (*(_DWORD *)(a4 + 8) != v32 || !v31) {
                goto LABEL_45;
              }
              if (!strncmp(*(const char **)a4, v31, v32))
              {
LABEL_52:
                int v48 = 0;
                int v33 = (int)v49;
                if (v49)
                {
                  do
                  {
                    if (v43 <= v33 - (int)v42)
                    {
                      uint64_t v38 = 0;
                      uint64_t v40 = 0;
                      LODWORD(v50) = 0;
                    }
                    else
                    {
                      uint64_t v34 = &v42[v33 - v42];
                      if (v33 - v42 != (unint64_t)v43)
                      {
                        uint64_t v35 = &v42[v43];
                        id v36 = &v42[v33 - v42];
                        do
                        {
                          int v37 = *v36;
                          if (v37 == 92)
                          {
                            if (v36 + 1 != v35) {
                              ++v36;
                            }
                            LOBYTE(v37) = *v36;
                          }
                          else if (v37 == 44 || v37 == 58)
                          {
                            if (v37 == 58) {
                              uint64_t v38 = 0;
                            }
                            else {
                              uint64_t v38 = (char *)(v36 + 1);
                            }
                            goto LABEL_69;
                          }
                          ++v36;
                          *v34++ = v37;
                        }
                        while (v36 != v35);
                      }
                      uint64_t v38 = 0;
LABEL_69:
                      LODWORD(v50) = v34 - v33;
                      if (v34 == v33)
                      {
                        uint64_t v40 = 0;
                      }
                      else
                      {
                        if (v45 == 1)
                        {
                          uint64_t v49 = _UTDebreviateTerm(&v49);
                          uint64_t v50 = v39;
                        }
                        uint64_t v40 = a5(&v44);
                      }
                    }
                    uint64_t v49 = v38;
                    ++v48;
                    if (!v38) {
                      break;
                    }
                    int v33 = (int)v38;
                  }
                  while (!v40);
                  goto LABEL_45;
                }
              }
            }
          }
          uint64_t v40 = 0;
LABEL_45:
          int v46 = (char *)i;
          if (!i || v40) {
            goto LABEL_79;
          }
        }
      }
    }
  }
  else
  {
    XCFBufDestroy((uint64_t)&v44);
  }
  uint64_t v40 = 0;
LABEL_79:
  XCFBufDestroy((uint64_t)&v42);
  return v40;
}

char *_UTDebreviateTerm(_DWORD *a1)
{
  if (!a1) {
    return 0;
  }
  unsigned int v2 = *(char **)a1;
  if (!*(void *)a1) {
    return v2;
  }
  unsigned int v3 = a1[2];
  if (!v3) {
    return 0;
  }
  if (v3 <= 2)
  {
    __int16 v8 = 0;
    char __str = *v2;
    if (v3 == 2) {
      LOBYTE(v8) = v2[1];
    }
    *__error() = 0;
    unint64_t v4 = strtoul(&__str, 0, 16);
    if (!v4 && *__error()) {
      return *(char **)a1;
    }
    unint64_t v5 = 0xFFFFFFFFLL;
    if (v4 < 0xFFFFFFFF) {
      unint64_t v5 = v4;
    }
    if (v5 > 0x15)
    {
      return *(char **)a1;
    }
    else
    {
      unsigned int v2 = (&builtins)[v5];
      strlen(v2);
    }
  }
  return v2;
}

void ___ZL23findPluginDataInContextP9LSContextP6NSUUIDP6FSNodeP8NSStringbjPjPU15__autoreleasingP7NSError_block_invoke(uint64_t a1)
{
  unsigned int v2 = **(void ***)(a1 + 72);
  unsigned int v3 = [*(id *)(a1 + 32) UUIDString];
  char v4 = *(unsigned char *)(a1 + 92);
  CFStringRef v5 = *(const __CFString **)(a1 + 40);
  unsigned int v6 = *(void **)(a1 + 48);
  int v7 = *(_DWORD *)(a1 + 88);
  __int16 v8 = *(_DWORD **)(a1 + 80);
  uint64_t v9 = *(void *)(*(void *)(a1 + 64) + 8);
  obuint64_t j = *(id *)(v9 + 40);
  uint64_t v10 = _LSPluginFindWithPlatformInfo(v2, v3, v5, v4 | 3u, v6, v7, v8, &obj);
  objc_storeStrong((id *)(v9 + 40), obj);
  *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = v10;
}

void sub_1829895F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSPluginFindWithPlatformInfo(void *a1, const __CFString *a2, const __CFString *a3, char a4, void *a5, int a6, _DWORD *a7, void *a8)
{
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  id v13 = a1;
  id v14 = a5;
  uint64_t v58 = 0;
  id v59 = &v58;
  uint64_t v60 = 0x2020000000;
  int v61 = 0;
  uint64_t v54 = 0;
  unsigned int v55 = &v54;
  uint64_t v56 = 0x2020000000;
  uint64_t v57 = 0;
  uint64_t v50 = 0;
  uint64_t v51 = &v50;
  uint64_t v52 = 0x2020000000;
  int v53 = 0;
  uint64_t v46 = 0;
  uint64_t v47 = &v46;
  uint64_t v48 = 0x2020000000;
  uint64_t v49 = 0;
  v44[0] = 0;
  v44[1] = v44;
  v44[2] = 0x3032000000;
  v44[3] = __Block_byref_object_copy__37;
  v44[4] = __Block_byref_object_dispose__37;
  id v45 = 0;
  if (!v13)
  {
    char v31 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v32 = objc_msgSend(NSString, "stringWithUTF8String:", "const LSPluginData *_LSPluginFindWithPlatformInfo(__strong LSDatabaseRef, CFStringRef, CFStringRef, LSPluginFindOptions, FSNode *__strong, dyld_platform_t, LSPluginID *, NSError *__autoreleasing *)");
    [v31 handleFailureInFunction:v32, @"LSPluginBundle.mm", 555, @"Invalid parameter not satisfying: %@", @"inDB != NULL" file lineNumber description];
  }
  if (a2 && (CFTypeID v15 = CFGetTypeID(a2), v15 == CFStringGetTypeID()))
  {
    CFIndex Length = CFStringGetLength(a2);
    XCFBufInitWithCFStringRange((uint64_t)v92, a2, 0, Length, 0);
  }
  else
  {
    XCFBufInit((uint64_t)v92);
  }
  if (a3 && (CFTypeID v17 = CFGetTypeID(a3), v17 == CFStringGetTypeID()))
  {
    CFIndex v18 = CFStringGetLength(a3);
    XCFBufInitWithCFStringRange((uint64_t)v91, a3, 0, v18, 0);
  }
  else
  {
    XCFBufInit((uint64_t)v91);
  }
  if (v14)
  {
    uint64_t v35 = [v14 pathWithError:0];
  }
  else
  {
    uint64_t v35 = 0;
  }
  uint64_t v43 = 0;
  int v42 = 0;
  if (DWORD2(v91[0])) {
    CSStringBindingFindStringAndBindings();
  }
  if (DWORD2(v92[0])) {
    CSStringBindingFindStringAndBindings();
  }
  if (v35)
  {
    int v40 = a6;
    id v36 = v13;
    BOOL v41 = (a4 & 4) != 0;
    int v37 = v35;
    uint64_t v38 = &v50;
    uint64_t v39 = &v46;
    _CSStoreEnumerateUnits();

    unsigned int v19 = &v36;
  }
  else
  {
    v63[3] = MEMORY[0x1E4F143A8];
    v63[4] = 3221225472;
    v63[5] = ___LSPluginFindWithPlatformInfo_block_invoke_2;
    v63[6] = &unk_1E5230000;
    id v20 = v13;
    int v85 = a6;
    long long v71 = v91[6];
    long long v72 = v91[7];
    long long v73 = v91[8];
    long long v74 = v91[9];
    long long v67 = v91[2];
    long long v68 = v91[3];
    long long v69 = v91[4];
    long long v70 = v91[5];
    long long v65 = v91[0];
    long long v66 = v91[1];
    long long v81 = v92[6];
    long long v82 = v92[7];
    long long v83 = v92[8];
    long long v84 = v92[9];
    long long v77 = v92[2];
    long long v78 = v92[3];
    long long v79 = v92[4];
    long long v80 = v92[5];
    long long v75 = v92[0];
    long long v76 = v92[1];
    int v86 = v42;
    int v87 = v43;
    BOOL v88 = (a4 & 2) != 0;
    v64[0] = v20;
    v64[1] = v44;
    BOOL v89 = (a4 & 4) != 0;
    char v90 = a4 & 1;
    v64[2] = &v58;
    v64[3] = &v54;
    v64[4] = &v50;
    v64[5] = &v46;
    _CSArrayEnumerateAllValues();
    unsigned int v19 = (id *)v64;
    if (a4)
    {
      int v21 = *((_DWORD *)v59 + 6);
      if (v21)
      {
        uint64_t v22 = v55[3];
        if (v22)
        {
          *((_DWORD *)v51 + 6) = v21;
          v47[3] = v22;
        }
      }
    }
  }

  int v23 = *((_DWORD *)v51 + 6);
  if (v23)
  {
    if (a7) {
      *a7 = v23;
    }
  }
  else
  {
    id v24 = @"UNKNOWN";
    if (v35) {
      id v24 = v35;
    }
    if (a2) {
      id v24 = (__CFString *)a2;
    }
    if (a3) {
      id v24 = (__CFString *)a3;
    }
    unsigned __int8 v25 = v24;
    int v26 = v25;
    if (a8)
    {
      v62[0] = *MEMORY[0x1E4F28228];
      v62[1] = @"SK";
      v63[0] = @"Unable to find this application extension record in the Launch Services database.";
      v63[1] = v25;
      v62[2] = @"IS";
      uint64_t v27 = objc_msgSend(NSNumber, "numberWithBool:", objc_msgSend((id)__LSDefaultsGetSharedInstance(), "isServer"));
      v63[2] = v27;
      uint64_t v28 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v63 forKeys:v62 count:3];
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -10814, (uint64_t)"_LSPluginFindWithPlatformInfo", 691, v28);
      *a8 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  XCFBufDestroy((uint64_t)v92);
  XCFBufDestroy((uint64_t)v91);
  uint64_t v29 = v47[3];

  _Block_object_dispose(v44, 8);
  _Block_object_dispose(&v46, 8);
  _Block_object_dispose(&v50, 8);
  _Block_object_dispose(&v54, 8);
  _Block_object_dispose(&v58, 8);

  return v29;
}

void sub_182989C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose(&a41, 8);
  _Block_object_dispose(&a45, 8);

  _Unwind_Resume(a1);
}

uint64_t XCFBufInit(uint64_t result)
{
  *(unsigned char *)(result + 28) = 0;
  *(void *)uint64_t result = result + 28;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 24) = 127;
  *(void *)(result + 16) = 0;
  return result;
}

id _LSMakeNSErrorImpl(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v9 = a1;
  id v10 = a5;
  id v11 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  CFTypeID v12 = v11;
  if (v10) {
    [v11 addEntriesFromDictionary:v10];
  }
  id v13 = [NSString stringWithUTF8String:a3];
  [v12 setObject:v13 forKeyedSubscript:@"_LSFunction"];

  id v14 = [NSNumber numberWithInt:a4];
  [v12 setObject:v14 forKeyedSubscript:@"_LSLine"];

  CFTypeID v15 = _LSErrorLog();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    int v18 = 138544130;
    id v19 = v9;
    __int16 v20 = 2048;
    uint64_t v21 = a2;
    __int16 v22 = 2082;
    uint64_t v23 = a3;
    __int16 v24 = 1024;
    int v25 = a4;
    _os_log_debug_impl(&dword_182959000, v15, OS_LOG_TYPE_DEBUG, "Constructing NSError %{public}@/%li at %{public}s:%i", (uint8_t *)&v18, 0x26u);
  }

  uint64_t v16 = (void *)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:v9 code:a2 userInfo:v12];

  return v16;
}

void sub_182989EE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSErrorLog(void)
{
  if (_LSErrorLog(void)::once != -1) {
    dispatch_once(&_LSErrorLog(void)::once, &__block_literal_global_40);
  }
  unsigned __int8 v0 = (void *)_LSErrorLog(void)::result;

  return v0;
}

uint64_t _UTBase32DecodedLength(unsigned int a1)
{
  return 5 * (a1 >> 3) + decodedRemainderLen[a1 & 7];
}

BOOL _UTBase32Decode(uint64_t a1, unsigned int a2, unsigned char *a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = a1 + a2;
  uint64_t v6 = a2 & 7;
  if (v5 - v6 != a1)
  {
    uint64_t v7 = a2 - v6;
    while (_UTBase32DecodeDatum(v4, 8, a3))
    {
      v4 += 8;
      a3 += 5;
      v7 -= 8;
      if (!v7)
      {
        uint64_t v4 = v5 - v6;
        break;
      }
    }
  }
  if (v6 && _UTBase32DecodeDatum(v4, v6, a3)) {
    uint64_t v4 = v5;
  }
  return v4 == v5;
}

uint64_t _UTBase32DecodeDatum(uint64_t a1, int a2, unsigned char *a3)
{
  uint64_t v3 = 0;
  v20[1] = *MEMORY[0x1E4F143B8];
  if (a1 && (a2 - 1) <= 7)
  {
    uint64_t v4 = 0;
    v20[0] = 0;
    do
    {
      int v5 = decoder[*(char *)(a1 + v4)];
      if (v5 < 0) {
        return 0;
      }
      *((unsigned char *)v20 + v4++) = v5;
    }
    while (a2 != v4);
    switch(a2)
    {
      case 2:
        *a3 = (BYTE1(v20[0]) >> 2) | (8 * LOBYTE(v20[0]));
        break;
      case 4:
        char v6 = BYTE1(v20[0]);
        *a3 = (BYTE1(v20[0]) >> 2) | (8 * LOBYTE(v20[0]));
        a3[1] = (2 * BYTE2(v20[0])) | (v6 << 6) | (BYTE3(v20[0]) >> 4);
        break;
      case 5:
        char v7 = BYTE1(v20[0]);
        *a3 = (BYTE1(v20[0]) >> 2) | (8 * LOBYTE(v20[0]));
        char v8 = (2 * BYTE2(v20[0])) | (v7 << 6);
        char v9 = BYTE3(v20[0]);
        a3[1] = v8 | (BYTE3(v20[0]) >> 4);
        a3[2] = (BYTE4(v20[0]) >> 1) | (16 * v9);
        break;
      case 7:
        char v10 = BYTE1(v20[0]);
        *a3 = (BYTE1(v20[0]) >> 2) | (8 * LOBYTE(v20[0]));
        char v11 = (2 * BYTE2(v20[0])) | (v10 << 6);
        char v12 = BYTE3(v20[0]);
        a3[1] = v11 | (BYTE3(v20[0]) >> 4);
        char v13 = BYTE4(v20[0]);
        a3[2] = (BYTE4(v20[0]) >> 1) | (16 * v12);
        a3[3] = (4 * BYTE5(v20[0])) | (v13 << 7) | (BYTE6(v20[0]) >> 3);
        break;
      case 8:
        char v14 = BYTE1(v20[0]);
        *a3 = (BYTE1(v20[0]) >> 2) | (8 * LOBYTE(v20[0]));
        char v15 = (2 * BYTE2(v20[0])) | (v14 << 6);
        char v16 = BYTE3(v20[0]);
        a3[1] = v15 | (BYTE3(v20[0]) >> 4);
        char v17 = BYTE4(v20[0]);
        a3[2] = (BYTE4(v20[0]) >> 1) | (16 * v16);
        char v18 = BYTE6(v20[0]);
        a3[3] = (4 * BYTE5(v20[0])) | (v17 << 7) | (BYTE6(v20[0]) >> 3);
        a3[4] = HIBYTE(v20[0]) | (32 * v18);
        break;
      default:
        return 1;
    }
    return 1;
  }
  return v3;
}

_DWORD *_UTAbbreviateTerm(_DWORD *result)
{
  size_t v1 = result[2];
  if (v1 >= 3)
  {
    unsigned int v2 = result;
    uint64_t v3 = 0;
    uint64_t v4 = *(char **)result;
    while (1)
    {
      int v5 = (&builtins)[v3];
      uint64_t result = (_DWORD *)strncmp(v5, v4, v1);
      if (!result && !v5[v1]) {
        break;
      }
      if (++v3 == 22) {
        return result;
      }
    }
    if ((v3 & 0xFFFFFFF0) != 0)
    {
      *uint64_t v4 = a0123456789abcd_0[v3 >> 4];
      *(unsigned char *)(*(void *)v2 + 1) = a0123456789abcd_0[v3 & 0xF];
      *(unsigned char *)(*(void *)v2 + 2) = 0;
      int v6 = 2;
    }
    else
    {
      *uint64_t v4 = a0123456789abcd_0[v3];
      int v6 = 1;
    }
    v2[2] = v6;
  }
  return result;
}

uint64_t XCFBufInitWithBytes(uint64_t a1, void *__src, size_t __len, int a4)
{
  *(unsigned char *)(a1 + 28) = 0;
  uint64_t result = a1 + 28;
  *(void *)a1 = result;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 127;
  *(void *)(a1 + 16) = 0;
  if (!__len) {
    return 0;
  }
  unsigned int v7 = __len;
  if (__len >= 0x80)
  {
    uint64_t result = (uint64_t)malloc_type_malloc((__len + 1), 0xA5D49628uLL);
    if (!result) {
      return result;
    }
    *(void *)(a1 + 16) = result;
    *(void *)a1 = result;
    *(_DWORD *)(a1 + 24) = v7;
  }
  uint64_t v9 = v7;
  memmove((void *)result, __src, v7);
  *(unsigned char *)(*(void *)a1 + v7) = 0;
  *(_DWORD *)(a1 + 8) = v7;
  if (a4)
  {
    char v10 = *(unsigned char **)a1;
    do
    {
      int v11 = *v10;
      if ((v11 - 65) <= 0x19) {
        *char v10 = v11 + 32;
      }
      ++v10;
      --v9;
    }
    while (v9);
  }
  return 1;
}

uint64_t _UTDynamicValuesSearchWithBlock::$_0::__invoke(uint64_t a1)
{
  unsigned int v2 = (void (**)(void, void, void, void, void, void))MEMORY[0x18530F950](*(void *)(a1 + 56));
  unsigned __int8 v5 = 0;
  ((void (**)(void, void, uint64_t, void, uint64_t, unsigned __int8 *))v2)[2](v2, *(unsigned int *)(a1 + 8), a1 + 16, *(unsigned int *)(a1 + 32), a1 + 40, &v5);
  uint64_t v3 = v5;

  return v3;
}

void sub_18298A440(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18298A4D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t _UTBase32EncodedLength(unsigned int a1)
{
  return encodedRemainderLen[a1 % 5] + 8 * (a1 / 5);
}

unsigned __int8 *_UTBase32Encode(unsigned __int8 *result, unsigned int a2, unsigned char *a3)
{
  uint64_t v4 = result;
  unsigned __int8 v5 = &result[a2];
  uint64_t v6 = a2 % 5;
  if (&v5[-v6] > result)
  {
    do
    {
      uint64_t result = _UTBase32EncodeDatum(v4, 5, a3);
      v4 += 5;
      a3 += 8;
    }
    while (v4 < &v5[-v6]);
  }
  if (v6)
  {
    return _UTBase32EncodeDatum(v4, v6, a3);
  }
  return result;
}

unsigned __int8 *_UTBase32EncodeDatum(unsigned __int8 *result, int a2, unsigned char *a3)
{
  switch(a2)
  {
    case 1:
      *a3 = encoder[(unint64_t)*result >> 3];
      uint64_t v3 = 4 * (*result & 7);
      uint64_t v4 = 1;
      goto LABEL_7;
    case 2:
      *a3 = encoder[(unint64_t)*result >> 3];
      a3[1] = encoder[((unint64_t)result[1] >> 6) & 0xFFFFFFFFFFFFFFE3 | (4 * (*result & 7))];
      a3[2] = encoder[((unint64_t)result[1] >> 1) & 0x1F];
      uint64_t v3 = 16 * (result[1] & 1);
      uint64_t v4 = 3;
      goto LABEL_7;
    case 3:
      *a3 = encoder[(unint64_t)*result >> 3];
      a3[1] = encoder[((unint64_t)result[1] >> 6) & 0xFFFFFFFFFFFFFFE3 | (4 * (*result & 7))];
      a3[2] = encoder[((unint64_t)result[1] >> 1) & 0x1F];
      a3[3] = encoder[((unint64_t)result[2] >> 4) & 0xFFFFFFFFFFFFFFEFLL | (16 * (result[1] & 1))];
      uint64_t v3 = 2 * (result[2] & 0xF);
      uint64_t v4 = 4;
      goto LABEL_7;
    case 4:
      *a3 = encoder[(unint64_t)*result >> 3];
      a3[1] = encoder[((unint64_t)result[1] >> 6) & 0xFFFFFFFFFFFFFFE3 | (4 * (*result & 7))];
      a3[2] = encoder[((unint64_t)result[1] >> 1) & 0x1F];
      a3[3] = encoder[((unint64_t)result[2] >> 4) & 0xFFFFFFFFFFFFFFEFLL | (16 * (result[1] & 1))];
      a3[4] = encoder[((unint64_t)result[3] >> 7) & 0xFFFFFFFFFFFFFFE1 | (2 * (result[2] & 0xF))];
      a3[5] = encoder[((unint64_t)result[3] >> 2) & 0x1F];
      uint64_t v3 = 8 * (result[3] & 3);
      uint64_t v4 = 6;
      goto LABEL_7;
    case 5:
      *a3 = encoder[(unint64_t)*result >> 3];
      a3[1] = encoder[((unint64_t)result[1] >> 6) & 0xFFFFFFFFFFFFFFE3 | (4 * (*result & 7))];
      a3[2] = encoder[((unint64_t)result[1] >> 1) & 0x1F];
      a3[3] = encoder[((unint64_t)result[2] >> 4) & 0xFFFFFFFFFFFFFFEFLL | (16 * (result[1] & 1))];
      a3[4] = encoder[((unint64_t)result[3] >> 7) & 0xFFFFFFFFFFFFFFE1 | (2 * (result[2] & 0xF))];
      a3[5] = encoder[((unint64_t)result[3] >> 2) & 0x1F];
      a3[6] = encoder[((unint64_t)result[4] >> 5) & 0xFFFFFFFFFFFFFFE7 | (8 * (result[3] & 3))];
      uint64_t v3 = result[4] & 0x1F;
      uint64_t v4 = 7;
LABEL_7:
      a3[v4] = encoder[v3];
      break;
    default:
      return result;
  }
  return result;
}

void ___ZL36_LSPlistLookUpCompactedStringByIndexm_block_invoke()
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v0 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:256];
  for (unint64_t i = 0; i != 256; ++i)
  {
    unsigned int v2 = v8;
    unint64_t v3 = i;
    memset(v8, 0, sizeof(v8));
    do
    {
      *v2++ = _ZZZL36_LSPlistLookUpCompactedStringByIndexmEUb_E12characterSet[v3 & 0x3F];
      BOOL v4 = v3 > 0x3F;
      v3 >>= 6;
    }
    while (v4);
    unsigned __int8 v5 = [NSString stringWithUTF8String:v8];
    [v0 addObject:v5];
  }
  uint64_t v6 = [v0 copy];
  unsigned int v7 = (void *)_LSPlistLookUpCompactedStringByIndex(unsigned long)::strings;
  _LSPlistLookUpCompactedStringByIndex(unsigned long)::strings = v6;
}

void sub_18298A9B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  _Unwind_Resume(a1);
}

void sub_18298AB04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18298ACB4(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

id _LSPlistHintCopy(void *a1)
{
  size_t v1 = (void *)[a1 copy];

  return v1;
}

void sub_18298AD94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18298AE68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18298AFAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSValidationTokenComputeHMAC(NSData *a1, NSData *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = a1;
  BOOL v4 = a2;
  _LSAssertRunningInServer((uint64_t)"NSData *_LSValidationTokenComputeHMAC(NSData *__strong, NSData *__strong)");
  uint64_t v5 = [(id)__LSDefaultsGetSharedInstance() HMACSecret];
  uint64_t v6 = (void *)v5;
  unsigned int v7 = 0;
  if (v4 && v3 && v5)
  {
    char v8 = (void *)[(NSData *)v3 mutableCopy];
    [v8 appendData:v4];
    id v9 = v6;
    char v10 = (const void *)objc_msgSend(v9, "bytes", 0, 0, 0, 0, 0, 0, 0, 0);
    size_t v11 = [v9 length];
    id v12 = v8;
    CCHmac(4u, v10, v11, (const void *)[v12 bytes], objc_msgSend(v12, "length"), &v14);
    unsigned int v7 = [MEMORY[0x1E4F1C9B8] dataWithBytes:&v14 length:64];
  }

  return v7;
}

void sub_18298B130(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18298B350(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18298B40C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18298B5BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSDatabaseContextStartAccessing(const unsigned int *a1, uint64_t a2, void *a3)
{
  uidPointerToDomain(a1);
  uint64_t v5 = (LaunchServices::DatabaseContext *)objc_claimAutoreleasedReturnValue();
  uint64_t started = _LSDatabaseContextStartAccessingWithDomain(v5, a2, a3);

  return started;
}

void sub_18298B6BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id uidPointerToDomain(const unsigned int *a1)
{
  if (a1)
  {
    size_t v1 = (void *)-[_LSDServiceDomain initWithUID:]([_LSDServiceDomain alloc], *a1);
  }
  else
  {
    size_t v1 = +[_LSDServiceDomain defaultServiceDomain]();
  }

  return v1;
}

uint64_t _LSDatabaseContextStartAccessingWithDomain(LaunchServices::DatabaseContext *a1, uint64_t a2, void *a3)
{
  v34[1] = *MEMORY[0x1E4F143B8];
  PerThreadStateReference = LaunchServices::DatabaseContext::getPerThreadStateReference(a1);
  unsigned int v7 = LaunchServices::DatabaseContext::getLog((LaunchServices::DatabaseContext *)PerThreadStateReference);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
    _LSDatabaseContextStartAccessingWithDomain_cold_1((uint64_t)PerThreadStateReference, a2, v7);
  }

  uint64_t v8 = *((void *)PerThreadStateReference + 4);
  if (v8 == 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v27 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v28 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL _LSDatabaseContextStartAccessingWithDomain(_LSDServiceDomain *const __strong _Nonnull, LSDatabaseContextAccessOptions, NSError *__autoreleasing * _Nullable)");
    [v27 handleFailureInFunction:v28 file:@"LSDatabaseContext.mm" lineNumber:164 description:@"Called +startAccessingReturningError: a ludicrous number of times without calling +stopAccessing. This is likely a bug in the Launch Services client."];

    uint64_t v8 = *((void *)PerThreadStateReference + 4);
  }
  if (v8 < 1)
  {
    int v15 = -[_LSDServiceDomain resolvedDomainUID]((uint64_t)a1);
    int v16 = [(id)__LSDefaultsGetSharedInstance() proxyUIDForCurrentEffectiveUID];
    if (v15
      && v16 != v15
      && v16
      && (uint64_t v17 = _LSGetAuditTokenForSelf(),
          !_LSCheckEntitlementForAuditToken(v17, @"com.apple.private.xpc.launchd.per-user-lookup")))
    {
      if (a3)
      {
        uint64_t v29 = *MEMORY[0x1E4F28228];
        uint64_t v30 = @"This process is not privileged enough to access XPC services on another user account.";
        __int16 v24 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v30 forKeys:&v29 count:1];
        _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28798], 13, (uint64_t)"_LSDatabaseContextStartAccessingWithDomain", 187, v24);
        *a3 = (id)objc_claimAutoreleasedReturnValue();
      }
    }
    else
    {
      if (LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)PerThreadStateReference, (_LSDServiceDomain *)a1, a2))
      {
        uint64_t result = 1;
        *((void *)PerThreadStateReference + 4) = 1;
        return result;
      }
      if (a3)
      {
        +[_LSDServiceDomain defaultServiceDomain]();
        __int16 v20 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
        uint64_t v21 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)PerThreadStateReference, v20, 0);

        if (v21) {
          id v22 = 0;
        }
        else {
          id v22 = *((id *)PerThreadStateReference + 3);
        }
        *a3 = v22;
      }
      if (*(void *)PerThreadStateReference && *((unsigned char *)PerThreadStateReference + 16)) {
        _LSContextDestroy(*(void ***)PerThreadStateReference);
      }
      int v25 = (void *)*((void *)PerThreadStateReference + 1);
      *(void *)PerThreadStateReference = 0;
      *((void *)PerThreadStateReference + 1) = 0;

      *((unsigned char *)PerThreadStateReference + 16) = 0;
      uint64_t v26 = (void *)*((void *)PerThreadStateReference + 3);
      *((void *)PerThreadStateReference + 3) = 0;
    }
    return 0;
  }
  if ((a2 & 2) != 0)
  {
    if (a3)
    {
      uint64_t v33 = *MEMORY[0x1E4F28228];
      v34[0] = @"LSDatabaseContextAccessOptionAlwaysUpdate cannot be specified while the database is already being accessed.";
      id v19 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v34 forKeys:&v33 count:1];
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28798], 16, (uint64_t)"_LSDatabaseContextStartAccessingWithDomain", 171, v19);
      *a3 = (id)objc_claimAutoreleasedReturnValue();
    }
    return 0;
  }
  uint64_t v9 = -[_LSDServiceDomain resolvedSessionKey]((uint64_t)a1);
  if (*(void *)PerThreadStateReference)
  {
    uint64_t v10 = v9;
    uint64_t SessionKey = _LSDatabaseGetSessionKey(**(void **)PerThreadStateReference);
    if ((v10 & 0x100000000) != 0)
    {
      if ((SessionKey & 0x100000000) != 0) {
        goto LABEL_36;
      }
    }
    else
    {
      BOOL v12 = (SessionKey & 0x100000000) == 0 && v10 == SessionKey;
      char v13 = v12;
      if (!v12 && ((SessionKey | v10) & 0x100000000) == 0)
      {
        int v14 = [(id)__LSDefaultsGetSharedInstance() proxyUIDForUID:SessionKey];
        if (v14 == [(id)__LSDefaultsGetSharedInstance() proxyUIDForUID:v10]) {
          goto LABEL_36;
        }
        goto LABEL_31;
      }
      if (v13)
      {
LABEL_36:
        ++*((void *)PerThreadStateReference + 4);
        return 1;
      }
    }
  }
LABEL_31:
  if (a3)
  {
    uint64_t v31 = *MEMORY[0x1E4F28228];
    uint64_t v32 = @"LSDatabaseContext cannot take a user ID while the database is already being accessed.";
    uint64_t v23 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v32 forKeys:&v31 count:1];
    _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28798], 56, (uint64_t)"_LSDatabaseContextStartAccessingWithDomain", 175, v23);
    *a3 = (id)objc_claimAutoreleasedReturnValue();
  }
  return 0;
}

void sub_18298BAEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSDatabaseContextStopAccessing(LaunchServices::DatabaseContext *a1)
{
  PerThreadStateReference = (uint64_t *)LaunchServices::DatabaseContext::getPerThreadStateReference(a1);
  unsigned int v2 = LaunchServices::DatabaseContext::getLog((LaunchServices::DatabaseContext *)PerThreadStateReference);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    _LSDatabaseContextStopAccessing_cold_1((uint64_t)PerThreadStateReference, v2);
  }

  uint64_t v3 = PerThreadStateReference[4];
  if (v3 <= 0)
  {
    unsigned int v7 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v8 = [NSString stringWithUTF8String:"void _LSDatabaseContextStopAccessing()"];
    [v7 handleFailureInFunction:v8 file:@"LSDatabaseContext.mm" lineNumber:220 description:@"Called +stopAccessing when not accessing the database. This is a bug in the Launch Services client."];

    uint64_t v3 = PerThreadStateReference[4];
  }
  uint64_t v4 = v3 - 1;
  PerThreadStateReference[4] = v4;
  if (!v4)
  {
    if (*PerThreadStateReference)
    {
      if (*((unsigned char *)PerThreadStateReference + 16)) {
        _LSContextDestroy((void **)*PerThreadStateReference);
      }
    }
    uint64_t v5 = (void *)PerThreadStateReference[1];
    uint64_t *PerThreadStateReference = 0;
    PerThreadStateReference[1] = 0;

    *((unsigned char *)PerThreadStateReference + 16) = 0;
    uint64_t v6 = (void *)PerThreadStateReference[3];
    PerThreadStateReference[3] = 0;
  }
}

void sub_18298BC20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18298BF28(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }

  _Unwind_Resume(a1);
}

id LaunchServices::DatabaseContext::getLog(LaunchServices::DatabaseContext *this)
{
  if (LaunchServices::DatabaseContext::getLog(void)::once != -1) {
    dispatch_once(&LaunchServices::DatabaseContext::getLog(void)::once, &__block_literal_global_87);
  }
  size_t v1 = (void *)LaunchServices::DatabaseContext::getLog(void)::result;

  return v1;
}

void _LSSetCurrentProcessMayMapDatabase(int a1)
{
  if (_LSCurrentProcessMayMapDatabase::once != -1) {
    dispatch_once(&_LSCurrentProcessMayMapDatabase::once, &__block_literal_global_181);
  }
  atomic_load(mayMapDatabase);
  atomic_store(a1 != 0, mayMapDatabase);
}

void _LSContextObserveChange(void **a1)
{
  if (_LSDatabaseGetNoServerLock::once == -1)
  {
    if (!a1) {
      return;
    }
  }
  else
  {
    dispatch_once(&_LSDatabaseGetNoServerLock::once, &__block_literal_global_112);
    if (!a1) {
      return;
    }
  }
  if (*a1)
  {
    unsigned int v2 = (pthread_mutex_t *)_LSDatabaseGetNoServerLock::result;
    *((unsigned char *)*a1 + 1664) |= 4u;
    if (v2)
    {
      pthread_mutex_lock(v2);
      _LSSetLocalDatabase(*a1);
      _LSSetCurrentProcessMayMapDatabase(1);
      pthread_mutex_unlock(v2);
    }
    else
    {
      _LSSetLocalDatabase(*a1);
      _LSSetCurrentProcessMayMapDatabase(1);
    }
  }
}

void _LSSetLocalDatabase(void *a1)
{
  uint64_t v3 = a1;
  os_unfair_recursive_lock_lock_with_options();
  LSSessionKey sessionKey = v3->sessionKey;
  unsigned int v2 = (LSSession *)_LSGetSession(sessionKey);
  LSSession::setDatabase(v2, v3);
  os_unfair_recursive_lock_unlock();
}

void sub_18298C18C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void LSSession::setDatabase(LSSession *this, _LSDatabase *a2)
{
  uint64_t v10 = a2;
  objc_storeStrong((id *)this + 3, a2);
  uint64_t v4 = (void *)*((void *)this + 4);
  uint64_t v5 = (void *)*((void *)this + 5);
  if (v4 != v5)
  {
    do
    {
      uint64_t v6 = (void (**)(void, void, void, void))MEMORY[0x18530F950](*v4);
      unsigned int v7 = (void *)MEMORY[0x18530F680]();
      v6[2](v6, 0, 0, 0);

      ++v4;
    }
    while (v4 != v5);
    uint64_t v4 = (void *)*((void *)this + 4);
    for (unint64_t i = (void *)*((void *)this + 5); i != v4; --i)
    {
      uint64_t v9 = (void *)*(i - 1);
    }
  }
  *((void *)this + 5) = v4;
  std::vector<void({block_pointer} {__strong})(BOOL,_LSDatabase *,NSError *),std::allocator<void({block_pointer} {__strong})(BOOL,_LSDatabase *,NSError *)>>::shrink_to_fit((char **)this + 4);
}

void sub_18298C280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t std::vector<void({block_pointer} {__strong})(BOOL,_LSDatabase *,NSError *),std::allocator<void({block_pointer} {__strong})(BOOL,_LSDatabase *,NSError *)>>::shrink_to_fit(char **a1)
{
  uint64_t v3 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = (v5 - *a1) >> 3;
  if (v6 < (v3 - *a1) >> 3)
  {
    uint64_t v19 = result;
    if (v5 == v4)
    {
      size_t v11 = 0;
      uint64_t v9 = 8 * v6;
    }
    else
    {
      unsigned int v7 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<os_eligibility_answer_t>>(result, v6);
      uint64_t v4 = *a1;
      uint64_t v8 = a1[1];
      uint64_t v9 = (uint64_t)&v7[8 * v6];
      size_t v11 = &v7[8 * v10];
      uint64_t v17 = v9;
      char v18 = v11;
      if (v8 != v4)
      {
        BOOL v12 = &v7[8 * v6];
        do
        {
          uint64_t v13 = *((void *)v8 - 1);
          v8 -= 8;
          *(void *)uint64_t v8 = 0;
          *((void *)v12 - 1) = v13;
          v12 -= 8;
        }
        while (v8 != v4);
        int v14 = *a1;
        uint64_t v4 = a1[1];
        uint64_t v9 = v17;
        size_t v11 = v18;
        goto LABEL_9;
      }
    }
    int v14 = v4;
    BOOL v12 = (char *)v9;
LABEL_9:
    *a1 = v12;
    a1[1] = (char *)v9;
    int v15 = a1[2];
    a1[2] = v11;
    uint64_t v17 = (uint64_t)v4;
    char v18 = v15;
    v16[0] = v14;
    v16[1] = v14;
    return std::__split_buffer<LSApplicationRecord * {__strong}>::~__split_buffer((uint64_t)v16);
  }
  return result;
}

void sub_18298C57C(_Unwind_Exception *a1)
{
  unint64_t v6 = v4;

  _Unwind_Resume(a1);
}

uint64_t *_LSDatabaseCreateSystemContentDatabaseFromPersistentStore(void *a1)
{
  unsigned int v2 = [FSNode alloc];
  uint64_t v3 = [(id)__LSDefaultsGetSharedInstance() systemContentDatabaseStoreFileURL];
  uint64_t v4 = [(FSNode *)v2 initWithURL:v3 flags:0 error:a1];

  if (v4 && (uint64_t v5 = (const void *)_LSCreateStoreWithFileContents(v4, a1)) != 0)
  {
    uint64_t v6 = _LSServer_SelfSessionKey();
    unsigned int v7 = _LSDatabaseCreateWithAccessContext(v4, v6, v5, 0, a1);
    CFRelease(v5);
  }
  else
  {
    unsigned int v7 = 0;
  }

  return v7;
}

void sub_18298C6B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSCreateStoreWithFileContents(void *a1, void *a2)
{
  id v3 = a1;
  uint64_t v4 = v3;
  id v9 = 0;
  if (!v3)
  {
    _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -50, (uint64_t)"_LSCreateStoreWithFileContents", 555, 0);
    id v9 = (id)objc_claimAutoreleasedReturnValue();
    if (!a2)
    {
LABEL_6:
      uint64_t v6 = 0;
      goto LABEL_9;
    }
LABEL_8:
    uint64_t v6 = 0;
    *a2 = v9;
    goto LABEL_9;
  }
  uint64_t v5 = [v3 URL];
  uint64_t v6 = _CSStoreCreateWithURL();

  if (!v6)
  {
    unsigned int v7 = _LSDatabaseGetLog();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      _LSCreateStoreWithFileContents();
    }

    if (!a2) {
      goto LABEL_6;
    }
    goto LABEL_8;
  }
LABEL_9:

  return v6;
}

void sub_18298C7D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t *_LSDatabaseCreate(void *a1, uint64_t a2, const void *a3, void *a4)
{
  id v7 = a1;
  if ([(id)__LSDefaultsGetSharedInstance() isServer])
  {
    uint64_t v8 = _LSServer_DatabaseExecutionContext();
    id v9 = (const void *)-[LSDBExecutionContext rawWriteAccessContextForDBInit]((uint64_t)v8);
  }
  else
  {
    id v9 = 0;
  }
  uint64_t v10 = _LSDatabaseCreateWithAccessContext(v7, a2, a3, v9, a4);

  return v10;
}

void sub_18298CA6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *_LSDatabaseCreateWithAccessContext(void *a1, uint64_t a2, const void *a3, const void *a4, void *a5)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  id v58 = a1;
  id v60 = 0;
  if (!a3)
  {
    uint64_t v65 = *MEMORY[0x1E4F28228];
    long long v66 = @"inStore";
    int v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v66 forKeys:&v65 count:1];
    int v16 = _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -50, (uint64_t)"_LSDatabaseCreateWithAccessContext", 1386, v15);
    id v17 = v60;
    id v60 = v16;

    goto LABEL_53;
  }
  CFTypeRef cf = a4;
  uint64_t v10 = [[_LSDatabase alloc] _init];
  size_t v11 = (uint64_t *)v10;
  if (!v10)
  {
    char v18 = _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -41, (uint64_t)"_LSDatabaseCreateWithAccessContext", 1381, 0);
    id v19 = v60;
    id v60 = v18;

    goto LABEL_53;
  }
  objc_storeStrong(v10 + 205, a1);
  v11[206] = a2;
  if (![(id)__LSDefaultsGetSharedInstance() isServer])
  {
    CFTypeRef v20 = CFRetain(a3);
    v11[1] = (uint64_t)v20;
    goto LABEL_12;
  }
  uint64_t MutableCopy = CSStoreCreateMutableCopy();
  v11[1] = MutableCopy;
  uint64_t v13 = v11 + 1;
  if (!MutableCopy)
  {
    uint64_t v21 = _LSDatabaseGetLog();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
      _LSDatabaseCreateWithAccessContext_cold_3();
    }

    size_t v11 = 0;
    CFTypeRef v20 = (CFTypeRef)MEMORY[8];
LABEL_12:
    uint64_t v13 = v11 + 1;
    int v14 = v11;
    if (!v20) {
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  int v14 = v11;
LABEL_13:
  if ([(id)__LSDefaultsGetSharedInstance() isServer])
  {
    objc_initWeak(location, v14);
    objc_copyWeak(&v59, location);
    _CSStoreSetUnitIdentifierExhaustionHandler();
    objc_destroyWeak(&v59);
    objc_destroyWeak(location);
  }
LABEL_15:
  uint64_t v22 = *v13;
  if (*v13)
  {
    id v23 = v60;
    id v64 = 0;
    BOOL v24 = _LSSchemaConfigureTable(v22, @"DB Header", (_DWORD *)v14 + 4, &v64);
    id v25 = v64;
    if (!v24)
    {
LABEL_37:
      id v36 = v25;
      goto LABEL_44;
    }
    LODWORD(v63) = 0;
    Header = (unsigned int *)CSStoreGetHeader();
    uint64_t v27 = Header;
    if (!Header)
    {
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -10817, (uint64_t)"_LSSchemaConfigureForStore", 507, &unk_1ECB43A60);
      id v36 = (id)objc_claimAutoreleasedReturnValue();
LABEL_43:

      goto LABEL_44;
    }
    if (v63 == 208)
    {
      unsigned int v28 = *Header;
      if (v28 != [(id)__LSDefaultsGetSharedInstance() currentSchemaVersion])
      {
        *(void *)id buf = @"WrongSchemaVersion";
        uint64_t v49 = [NSNumber numberWithUnsignedInt:*v27];
        long long v68 = @"CurrentSchemaVersion";
        location[0] = v49;
        uint64_t v50 = objc_msgSend(NSNumber, "numberWithUnsignedInt:", objc_msgSend((id)__LSDefaultsGetSharedInstance(), "currentSchemaVersion"));
        location[1] = v50;
        uint64_t v52 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:location forKeys:buf count:2];
        _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -10817, (uint64_t)"_LSSchemaConfigureForStore", 487, v52);
        id v36 = (id)objc_claimAutoreleasedReturnValue();

        id v25 = v52;
        goto LABEL_42;
      }
      if (v27[1] == 208)
      {
        uint64_t v29 = 0;
        while (1)
        {
          uint64_t v30 = *(uint64_t *)((char *)&kLSTableInfo + v29);
          uint64_t v31 = (_DWORD *)(*(char **)((char *)&kLSTableInfo + v29 + 8) + (void)(v14 + 2));
          id v63 = v25;
          BOOL v32 = _LSSchemaConfigureTable(v22, v30, v31, &v63);
          id v33 = v63;

          id v25 = v33;
          if (!v32) {
            goto LABEL_37;
          }
          v29 += 16;
          if (v29 == 192)
          {
            int v34 = CSBindableKeyMapInit();
            id v62 = v33;
            BOOL v35 = _LSGetNSErrorFromOSStatusImpl(v34, &v62, (uint64_t)"_LSSchemaConfigureForStore", 524);
            id v36 = v62;

            if (v35)
            {
              unint64_t v37 = 0;
              uint64_t v38 = v14 + 17;
              uint64_t v39 = &byte_1E522E0C0;
              uint64_t v56 = (void *)*MEMORY[0x1E4F28760];
              int v40 = v36;
              do
              {
                id v61 = v40;
                uint64_t v41 = *((void *)v39 - 1);
                if (!v41 || (strlen(*((const char **)v39 - 1)), _CSGetStringForCharacters()))
                {
                  int v45 = CSStringBindingStoreInit();
                  BOOL v44 = _LSGetNSErrorFromOSStatusImpl(v45, &v61, (uint64_t)"_LSSchemaConfigureBindingMap", 452);
                }
                else
                {
                  *(void *)id buf = @"BindingClassName";
                  int v42 = [NSString stringWithUTF8String:v41];
                  location[0] = v42;
                  uint64_t v43 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:location forKeys:buf count:1];
                  _LSMakeNSErrorImpl(v56, -10817, (uint64_t)"_LSSchemaConfigureBindingMap", 447, v43);
                  id v61 = (id)objc_claimAutoreleasedReturnValue();

                  BOOL v44 = 0;
                }
                id v36 = v61;

                BOOL v47 = v37++ < 0xD && v44;
                v39 += 32;
                v38 += 26;
                int v40 = v36;
              }
              while (v47);
              if (v44)
              {
                char v48 = 1;
                goto LABEL_45;
              }
            }
            goto LABEL_44;
          }
        }
      }
      *(void *)id buf = @"WrongHeaderLength";
      uint64_t v49 = objc_msgSend(NSNumber, "numberWithUnsignedInt:");
      long long v68 = @"ExpectedHeaderLength";
      location[0] = v49;
      location[1] = &unk_1ECB43840;
      uint64_t v50 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:location forKeys:buf count:2];
      uint64_t v51 = _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -10817, (uint64_t)"_LSSchemaConfigureForStore", 491, v50);
    }
    else
    {
      *(void *)id buf = @"WrongHeaderLength";
      uint64_t v49 = objc_msgSend(NSNumber, "numberWithUnsignedInt:");
      long long v68 = @"ExpectedHeaderLength";
      location[0] = v49;
      location[1] = &unk_1ECB43840;
      uint64_t v50 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:location forKeys:buf count:2];
      uint64_t v51 = _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -10817, (uint64_t)"_LSSchemaConfigureForStore", 483, v50);
    }
    id v36 = (id)v51;
LABEL_42:

    id v25 = v49;
    goto LABEL_43;
  }
  _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -50, (uint64_t)"_LSSchemaConfigureForStore", 468, 0);
  id v36 = (id)objc_claimAutoreleasedReturnValue();
LABEL_44:
  id v36 = v36;
  char v48 = 0;
  id v23 = v36;
LABEL_45:

  objc_storeStrong(&v60, v23);
  if (v48)
  {
    if (v14)
    {
      -[_LSDatabase setAccessContext:](v14, cf);
      int v53 = _LSDatabaseGetLog();
      if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
      {
        long long v80 = 0u;
        long long v81 = 0u;
        long long v78 = 0u;
        long long v79 = 0u;
        long long v76 = 0u;
        long long v77 = 0u;
        long long v74 = 0u;
        long long v75 = 0u;
        long long v72 = 0u;
        long long v73 = 0u;
        long long v70 = 0u;
        long long v71 = 0u;
        *(_OWORD *)id location = 0u;
        _LSDatabaseGetHeader(location);
        _LSDatabaseCreateWithAccessContext_cold_1((uint64_t)location, buf, v53);
      }

      goto LABEL_55;
    }
  }
  else
  {
    uint64_t v54 = _LSDatabaseGetLog();
    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR)) {
      _LSDatabaseCreateWithAccessContext_cold_2();
    }
  }
LABEL_53:
  int v14 = 0;
  if (a5) {
    *a5 = v60;
  }
LABEL_55:

  return v14;
}

void sub_18298D2A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id location)
{
  _Unwind_Resume(a1);
}

BOOL _LSSchemaConfigureTable(uint64_t a1, uint64_t a2, _DWORD *a3, void *a4)
{
  v12[1] = *MEMORY[0x1E4F143B8];
  int TableWithName = _CSStoreGetTableWithName();
  int v8 = TableWithName;
  if (TableWithName)
  {
    *a3 = TableWithName;
  }
  else if (a4)
  {
    size_t v11 = @"TableName";
    v12[0] = a2;
    id v9 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v12 forKeys:&v11 count:1];
    _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -9499, (uint64_t)"_LSSchemaConfigureTable", 430, v9);
    *a4 = (id)objc_claimAutoreleasedReturnValue();
  }
  return v8 != 0;
}

void sub_18298D478(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CSBindableKeyMapInit()
{
  return CSMapInit();
}

void sub_18298D5E4(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  MEMORY[0x18530EAF0](v3, 0x10A0C40C7812EA0);

  _Unwind_Resume(a1);
}

void _LSSchemaCache::_LSSchemaCache(_LSSchemaCache *this)
{
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *((_DWORD *)this + 58) = 1065353216;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_DWORD *)this + 68) = 1065353216;
  pthread_rwlock_init((pthread_rwlock_t *)this, 0);
  *(_OWORD *)((char *)this + 324) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
}

void sub_18298D68C(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::~__hash_table(v2);
  std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

id _LSLazyLoadObjectOnQueue(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = a2;
  id v6 = a3;
  uint64_t v19 = 0;
  CFTypeRef v20 = &v19;
  uint64_t v21 = 0x3032000000;
  uint64_t v22 = __Block_byref_object_copy__20;
  id v23 = __Block_byref_object_dispose__20;
  id v24 = 0;
  if (!a1)
  {
    uint64_t v10 = [MEMORY[0x1E4F28B00] currentHandler];
    size_t v11 = objc_msgSend(NSString, "stringWithUTF8String:", "id _LSLazyLoadObjectOnQueue(__strong id volatile *, __strong dispatch_queue_t _Nonnull, NS_NOESCAPE _LSLazyLoadGenerator __strong)");
    [v10 handleFailureInFunction:v11, @"LSDispatchUtils.mm", 164, @"Invalid parameter not satisfying: %@", @"ioAddress != NULL" file lineNumber description];

    if (v5) {
      goto LABEL_3;
    }
LABEL_10:
    BOOL v12 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v13 = objc_msgSend(NSString, "stringWithUTF8String:", "id _LSLazyLoadObjectOnQueue(__strong id volatile *, __strong dispatch_queue_t _Nonnull, NS_NOESCAPE _LSLazyLoadGenerator __strong)");
    [v12 handleFailureInFunction:v13, @"LSDispatchUtils.mm", 165, @"Invalid parameter not satisfying: %@", @"inQueue != NULL" file lineNumber description];

    goto LABEL_3;
  }
  if (!v5) {
    goto LABEL_10;
  }
LABEL_3:
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  _OWORD block[2] = ___LSLazyLoadObjectOnQueue_block_invoke;
  block[3] = &unk_1E522E9E0;
  block[4] = &v19;
  block[5] = a1;
  dispatch_sync(v5, block);
  id v7 = (void *)v20[5];
  if (v6 && !v7)
  {
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = ___LSLazyLoadObjectOnQueue_block_invoke_2;
    v14[3] = &unk_1E522EA08;
    uint64_t v17 = a1;
    id v15 = v6;
    int v16 = &v19;
    dispatch_barrier_sync(v5, v14);

    id v7 = (void *)v20[5];
  }
  id v8 = v7;
  _Block_object_dispose(&v19, 8);

  return v8;
}

void sub_18298DA08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

void sub_18298DAD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)_LSDatabase;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void _LSSchemaCache::~_LSSchemaCache(_LSSchemaCache *this)
{
}

void sub_18298DB3C(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::~__hash_table(v1 + 240);
  std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>>>::~__hash_table(v1 + 200);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::~__hash_table((uint64_t)(v2 + 3));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_18298DCCC(_Unwind_Exception *exception_object)
{
}

void _LSEnumerateExtensionPoints(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v13 = 0;
  int v14 = &v13;
  uint64_t v15 = 0x5812000000;
  int v16 = __Block_byref_object_copy__26;
  uint64_t v17 = __Block_byref_object_dispose__26;
  memset(v18, 0, sizeof(v18));
  uint64_t v19 = 0;
  int v20 = 1065353216;
  uint64_t v7 = MEMORY[0x1E4F143A8];
  uint64_t v8 = 3221225472;
  id v9 = ___LSEnumerateExtensionPoints_block_invoke;
  uint64_t v10 = &unk_1E522D688;
  id v4 = v3;
  id v11 = v4;
  BOOL v12 = &v13;
  _CSStringBindingEnumerateAllBindings();
  char v6 = 0;
  uint64_t v5 = v14 + 8;
  do
  {
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      break;
    }
    (*(void (**)(uint64_t, void, void, char *))(a2 + 16))(a2, *((unsigned int *)v5 + 6), v5[2], &v6);
  }
  while (!v6);

  _Block_object_dispose(&v13, 8);
  std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::~__hash_table((uint64_t)v18 + 8);
}

void sub_18298DE50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, ...)
{
  va_start(va, a8);

  _Block_object_dispose(va, 8);
  std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::~__hash_table(v8);

  _Unwind_Resume(a1);
}

uint64_t ___ZL32_UTTypeSearchConformingTypesCoreP14UTTypeSearchPB_block_invoke(uint64_t result, uint64_t a2, int a3, unsigned char *a4)
{
  unsigned int v4 = a3 & 0xFFFFFFFC;
  if ((~a3 & 3) == 0 && v4 != 0)
  {
    uint64_t v7 = result;
    uint64_t result = CSStoreGetUnit();
    if (result)
    {
      if (*(unsigned char *)(result + 8))
      {
        uint64_t v8 = *(void *)(v7 + 48);
        *(_DWORD *)(v8 + 56) = v4;
        *(void *)(v8 + 64) = result;
        uint64_t result = _UTTypeSearchConformingTypesCore(*(void *)(v7 + 48));
        if (result)
        {
          *(unsigned char *)(*(void *)(*(void *)(v7 + 40) + 8) + 24) = 1;
          *a4 = 1;
        }
      }
    }
  }
  return result;
}

void sub_18298E16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t _UTTypeSearchConformingTypesCommon(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  id v11 = a1;
  memset(v15, 0, sizeof(v15));
  int v16 = 1065353216;
  id v17 = v11;
  uint64_t v18 = a5;
  int v19 = a2;
  uint64_t Unit = CSStoreGetUnit();
  uint64_t v21 = a4;
  int v22 = 0;
  uint64_t v12 = 32;
  if (a3 >= 0) {
    uint64_t v12 = a3;
  }
  uint64_t v23 = v12;
  if (_UTTypeSearchConformingTypesCore((uint64_t)v15))
  {
    if (a6) {
      *a6 = v19;
    }
    uint64_t v13 = Unit;
  }
  else
  {
    uint64_t v13 = 0;
  }
  std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::~__hash_table((uint64_t)v15);

  return v13;
}

void sub_18298E270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::~__hash_table((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t _UTTypeSearchConformingTypesCore(uint64_t a1)
{
  uint64_t v10 = 0;
  id v11 = &v10;
  uint64_t v12 = 0x2020000000;
  char v13 = 0;
  uint64_t v2 = (unsigned int *)(a1 + 56);
  if (std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::find<unsigned int>((void *)a1, (unsigned int *)(a1 + 56)))
  {
    uint64_t v3 = 0;
  }
  else
  {
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int &>(a1, v2, v2);
    *(void *)(a1 + 72) = *(unsigned int *)(a1 + 88);
    if ((*(unsigned int (**)(uint64_t))(a1 + 80))(a1 + 40))
    {
      uint64_t v3 = 1;
    }
    else
    {
      if (*(void *)(a1 + 96) > (uint64_t)*(unsigned int *)(a1 + 88))
      {
        id v4 = *(id *)(a1 + 40);
        int v5 = *(_DWORD *)(a1 + 56);
        uint64_t v6 = *(void *)(a1 + 64);
        ++*(_DWORD *)(a1 + 88);
        id v9 = v4;
        id v7 = v4;
        _LSDatabaseEnumeratingBindingMap();
        --*(_DWORD *)(a1 + 88);
        *(_DWORD *)(a1 + 56) = v5;
        *(void *)(a1 + 64) = v6;
      }
      uint64_t v3 = *((unsigned __int8 *)v11 + 24);
    }
  }
  _Block_object_dispose(&v10, 8);
  return v3;
}

void sub_18298E3F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _UTTypeSearchConformingTypesWithBlock::$_0::__invoke(uint64_t a1)
{
  unsigned __int8 v2 = 0;
  (*(void (**)(void, void, void, void, unsigned __int8 *))(*(void *)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), &v2);
  return v2;
}

void sub_18298E4F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t _UTTypeSearchConformingTypesWithBlock(void *a1, int a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  return _UTTypeSearchConformingTypesCommon(a1, a2, a3, (uint64_t)_UTTypeSearchConformingTypesWithBlock::$_0::__invoke, a5, a4);
}

uint64_t _UTGetLocalizedDescription(void *a1, int a2)
{
  id v3 = a1;
  unsigned int v7 = 0;
  id v4 = (void *)MEMORY[0x18530F680]();
  _UTTypeSearchConformsToTypesCommon((uint64_t)v3, a2, 32, (uint64_t)_UTGetLocalizedDescriptionImpl, (uint64_t)&v7, 0);
  uint64_t v5 = v7;

  return v5;
}

void sub_18298E60C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18298E6F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t _UTTypeSearchConformsToTypesWithBlock(uint64_t a1, int a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  return _UTTypeSearchConformsToTypesCommon(a1, a2, a3, (uint64_t)_UTTypeSearchConformsToTypesWithBlock::$_0::__invoke, a5, a4);
}

uint64_t _UTTypeGetPedigreeInternal(uint64_t *a1, int a2)
{
  id v4 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
  uint64_t v5 = (void *)_CSStringCopyCFString();
  if (v5) {
    [v4 addObject:v5];
  }

  uint64_t v6 = *a1;
  uint64_t v10 = MEMORY[0x1E4F143A8];
  uint64_t v11 = 3221225472;
  uint64_t v12 = ___UTTypeGetPedigreeInternal_block_invoke;
  char v13 = &unk_1E52317B8;
  uint64_t v15 = a1;
  id v7 = v4;
  id v14 = v7;
  _UTTypeSearchConformsToTypesCommon(v6, a2, -1, (uint64_t)_UTTypeSearchConformsToTypesWithBlock::$_0::__invoke, (uint64_t)&v10, 0);
  uint64_t v8 = objc_msgSend(v7, "copy", v10, v11, v12, v13);

  return v8;
}

void sub_18298E8AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _UTTypeSearchConformsToTypesCommon(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  uint64_t Unit = CSStoreGetUnit();
  if (!Unit) {
    return 0;
  }
  memset(v16, 0, sizeof(v16));
  int v17 = 1065353216;
  uint64_t v18 = a1;
  uint64_t v19 = a5;
  int v20 = a2;
  uint64_t v21 = Unit;
  uint64_t v22 = a4;
  int v23 = 0;
  uint64_t v13 = 32;
  if (a3 >= 0) {
    uint64_t v13 = a3;
  }
  uint64_t v24 = v13;
  if (!_UTTypeSearchConformsToTypesCore((uint64_t)v16))
  {
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::~__hash_table((uint64_t)v16);
    return 0;
  }
  if (a6) {
    *a6 = v20;
  }
  uint64_t v14 = v21;
  std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::~__hash_table((uint64_t)v16);
  return v14;
}

void sub_18298E9C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::~__hash_table(uint64_t a1)
{
  unsigned __int8 v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      id v3 = (void *)*v2;
      operator delete(v2);
      unsigned __int8 v2 = v3;
    }
    while (v3);
  }
  id v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void sub_18298EAA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18298EBD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _LSExtensionsLog()
{
  if (_LSExtensionsLog_onceToken != -1) {
    dispatch_once(&_LSExtensionsLog_onceToken, &__block_literal_global_7_0);
  }
  unsigned __int8 v0 = (void *)_LSExtensionsLog_log;

  return v0;
}

void sub_18298EE00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18298EEE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18298EFD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18298F0A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::Database::Context::operator=(uint64_t a1, uint64_t a2)
{
  id v4 = *(void ***)a1;
  if (v4 && *(unsigned char *)(a1 + 16)) {
    _LSContextDestroy(v4);
  }
  uint64_t v5 = *(void **)(a1 + 8);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;

  uint64_t v6 = *(void **)(a1 + 24);
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;

  if (*(void *)a2)
  {
    *(void *)a1 = a1 + 8;
    if (*(unsigned char *)(a2 + 16))
    {
      id v7 = (id *)(a2 + 8);
    }
    else
    {
      id v7 = *(id **)a2;
      if (!*(void *)a2)
      {
LABEL_9:
        *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
        goto LABEL_10;
      }
    }
    objc_storeStrong((id *)(a1 + 8), *v7);
    goto LABEL_9;
  }
LABEL_10:
  objc_storeStrong((id *)(a1 + 24), *(id *)(a2 + 24));
  return a1;
}

void *std::__hash_table<std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::__unordered_map_hasher<objc_selector *,std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::hash<objc_selector *>,std::equal_to<objc_selector *>,true>,std::__unordered_map_equal<objc_selector *,std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::equal_to<objc_selector *>,std::hash<objc_selector *>,true>,std::allocator<std::__hash_value_type<objc_selector *,objc_object * {__strong}>>>::__emplace_unique_key_args<objc_selector *,objc_selector *,decltype(nullptr)>(uint64_t a1, void *a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (unint64_t i = *v11; i; unint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v14 = (void *)(a1 + 16);
  unint64_t i = operator new(0x20uLL);
  *unint64_t i = 0;
  i[1] = v8;
  i[2] = *a3;
  i[3] = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void *)a1;
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *unint64_t i = *v22;
LABEL_38:
    void *v22 = i;
    goto LABEL_39;
  }
  *unint64_t i = *v14;
  void *v14 = i;
  *(void *)(v21 + 8 * v3) = v14;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }
    else
    {
      v23 &= v9 - 1;
    }
    uint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_18298F570(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,void *>>>::operator()[abi:nn180100](v2, v1);
  _Unwind_Resume(a1);
}

uint64_t UTTypeCopyParentIdentifiers(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = (void *)MEMORY[0x18530F680]();
  unint64_t v3 = +[UTTypeRecord typeRecordWithIdentifier:a1];
  id v4 = v3;
  if (v3)
  {
    uint64_t v5 = [v3 parentTypeIdentifiers];
    unint64_t v6 = v5;
    if (v5)
    {
      unint64_t v7 = [v5 array];
      uint64_t v8 = [v7 copy];
    }
    else
    {
      uint64_t v8 = 0;
    }
  }
  else
  {
    uint64_t v8 = 0;
  }

  return v8;
}

void sub_18298F65C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CFStringRef UTTypeCopyPreferredTagWithClass(CFStringRef inUTI, CFStringRef inTagClass)
{
  CFArrayRef v2 = UTTypeCopyAllTagsWithClass(inUTI, inTagClass);
  if (!v2) {
    return 0;
  }
  CFArrayRef v3 = v2;
  if (CFArrayGetCount(v2) < 1)
  {
    CFStringRef v5 = 0;
  }
  else
  {
    int ValueAtIndex = CFArrayGetValueAtIndex(v3, 0);
    CFStringRef v5 = (const __CFString *)CFRetain(ValueAtIndex);
  }
  CFRelease(v3);
  return v5;
}

void ___ZL35_LSSessionInitMemoryWarningListenerv_block_invoke_2()
{
  unsigned __int8 v0 = (void *)MEMORY[0x18530F680]();
  os_unfair_recursive_lock_lock_with_options();
  for (unint64_t i = *(void **)(_LSGetSessions() + 16); i; unint64_t i = (void *)*i)
  {
    uint64_t v2 = i[3];
    if (v2)
    {
      id v3 = *(id *)(v2 + 24);
      id v4 = v3;
      if (v3) {
        _LSSchemaClearLocalizedCaches((uint64_t)v3 + 16);
      }
    }
  }
  os_unfair_recursive_lock_unlock();
}

void sub_18298F7A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSSchemaClearLocalizedCaches(uint64_t a1)
{
}

void sub_18298F880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

Boolean UTTypeConformsTo(CFStringRef inUTI, CFStringRef inConformsToUTI)
{
  Boolean v2 = 0;
  if (inUTI && inConformsToUTI)
  {
    if (inUTI == inConformsToUTI || off_1ECB19460(inUTI, inConformsToUTI))
    {
      return 1;
    }
    else if (_LSCurrentProcessMayMapDatabase() {
           && _UTTypeIdentifierIsDeclarable(inUTI)
    }
           && _UTTypeIdentifierIsDeclarable(inConformsToUTI))
    {
      unint64_t v7 = 0;
      if (_LSContextInit(&v7))
      {
        Boolean v2 = 0;
      }
      else
      {
        uint64_t v6 = 0;
        if (_UTGetActiveTypeForCFStringIdentifier(v7, inUTI, (_DWORD *)&v6 + 1)
          && _UTGetActiveTypeForCFStringIdentifier(v7, inConformsToUTI, &v6))
        {
          Boolean v2 = _UTTypeConformsTo(v7, SHIDWORD(v6), v6);
        }
        else
        {
          Boolean v2 = 0;
        }
        _LSContextDestroy(&v7);
      }
    }
    else
    {
      return +[UTTypeRecord _typeIdentifier:inUTI conformsToTypeIdentifier:inConformsToUTI];
    }
  }
  return v2;
}

void sub_18298F9BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

BOOL _UTTypeIdentifierIsDeclarable(const __CFString *a1)
{
  return !_UTTypeIdentifierIsDynamic(a1) && _UTTypeIdentifierIsValid(a1);
}

Boolean UTTypeIsDynamic(CFStringRef inUTI)
{
  if (inUTI)
  {
    CFStringRef v1 = inUTI;
    LODWORD(inUTI) = _UTTypeIdentifierIsValid(inUTI);
    if (inUTI) {
      LOBYTE(inUTI) = _UTTypeIdentifierIsDynamic(v1) != 0;
    }
  }
  return inUTI;
}

BOOL _UTTypeIdentifierIsValid(CFStringRef theString)
{
  CFStringRef v1 = theString;
  if (theString)
  {
    CFIndex Length = CFStringGetLength(theString);
    if (Length >= 3)
    {
      CFIndex v3 = Length;
      CFStringRef theStringa = v1;
      uint64_t v26 = 0;
      CFIndex v27 = Length;
      CharactersPtr = CFStringGetCharactersPtr(v1);
      CStringPtr = 0;
      uint64_t v24 = CharactersPtr;
      if (!CharactersPtr) {
        CStringPtr = CFStringGetCStringPtr(v1, 0x600u);
      }
      uint64_t v6 = 0;
      LOBYTE(v1) = 0;
      int v7 = 0;
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      id v25 = CStringPtr;
      while (1)
      {
        CFIndex v8 = v7;
        if (v7 < 0 || (uint64_t v9 = v27, v27 <= v7))
        {
          UniChar v10 = 0;
        }
        else if (v24)
        {
          UniChar v10 = v24[v26 + v7];
        }
        else if (v25)
        {
          UniChar v10 = v25[v26 + v7];
        }
        else
        {
          if (v29 <= v7 || v6 > v7)
          {
            uint64_t v17 = v7 - 4;
            if (v7 < 4) {
              uint64_t v17 = 0;
            }
            if (v17 + 64 < v27) {
              uint64_t v9 = v17 + 64;
            }
            uint64_t v28 = v17;
            uint64_t v29 = v9;
            v31.id location = v26 + v17;
            v31.CFIndex length = v9 - v17;
            CFStringGetCharacters(theStringa, v31, v22);
            uint64_t v6 = v28;
          }
          UniChar v10 = v22[v7 - v6];
        }
        if ((unsigned __int16)(v10 - 58) <= 0xFFF5u && (unsigned __int16)((v10 & 0xFFDF) - 91) < 0xFFE6u) {
          goto LABEL_69;
        }
        int v11 = v7 + 1;
        CFIndex v12 = v7 + 1;
        if (v3 <= v12) {
          goto LABEL_40;
        }
        while (1)
        {
          if (v7 < -1 || (CFIndex v13 = v27, v27 <= v12))
          {
            UniChar v10 = 0;
LABEL_19:
            if (v10 != 45 && (unsigned __int16)(v10 - 58) < 0xFFF6u) {
              goto LABEL_69;
            }
            goto LABEL_34;
          }
          if (v24)
          {
            UniChar v10 = v24[v12 + v26];
          }
          else if (v25)
          {
            UniChar v10 = v25[v26 + v12];
          }
          else
          {
            if (v29 <= v12 || v6 > v12)
            {
              uint64_t v14 = v12 - 4;
              if ((v12 & 0xFFFFFFFC) == 0) {
                uint64_t v14 = 0;
              }
              if (v14 + 64 < v27) {
                CFIndex v13 = v14 + 64;
              }
              uint64_t v28 = v14;
              uint64_t v29 = v13;
              v30.id location = v26 + v14;
              v30.CFIndex length = v13 - v14;
              CFStringGetCharacters(theStringa, v30, v22);
              uint64_t v6 = v28;
            }
            UniChar v10 = v22[v12 - v6];
          }
          if (v10 == 46) {
            break;
          }
          if ((unsigned __int16)((v10 & 0xFFDF) - 91) <= 0xFFE5u) {
            goto LABEL_19;
          }
LABEL_34:
          ++v12;
          ++v7;
          if (v3 <= v12) {
            goto LABEL_39;
          }
        }
        UniChar v10 = 46;
LABEL_39:
        CFIndex v8 = v7;
        int v11 = v12;
LABEL_40:
        if ((v7 & 0x80000000) == 0)
        {
          CFIndex v15 = v27;
          if (v27 > v8)
          {
            if (v24)
            {
              UniChar v16 = v24[v26 + v8];
            }
            else if (v25)
            {
              UniChar v16 = v25[v26 + v8];
            }
            else
            {
              if (v29 <= v8 || v6 > v8)
              {
                uint64_t v18 = v8 - 4;
                if (v7 < 4) {
                  uint64_t v18 = 0;
                }
                if (v18 + 64 < v27) {
                  CFIndex v15 = v18 + 64;
                }
                uint64_t v28 = v18;
                uint64_t v29 = v15;
                v32.id location = v26 + v18;
                v32.CFIndex length = v15 - v18;
                CFStringGetCharacters(theStringa, v32, v22);
                uint64_t v6 = v28;
              }
              UniChar v16 = v22[v8 - v6];
            }
            if (v16 == 45) {
              goto LABEL_69;
            }
          }
        }
        if (v10 == 46 && v3 - 1 > v12)
        {
          LOBYTE(v1) = 1;
          v7 += 2;
        }
        else
        {
          int v7 = v11;
        }
        if (v3 <= v7)
        {
          int v19 = 1;
          goto LABEL_70;
        }
      }
    }
    LOBYTE(v1) = 0;
  }
LABEL_69:
  int v19 = 0;
LABEL_70:
  if ((_BYTE)v1) {
    BOOL v20 = v19 == 0;
  }
  else {
    BOOL v20 = 1;
  }
  return !v20;
}

CFArrayRef UTTypeCopyAllTagsWithClass(CFStringRef inUTI, CFStringRef inTagClass)
{
  Boolean v2 = 0;
  if (inUTI && inTagClass)
  {
    CFStringRef v5 = (void *)MEMORY[0x18530F680]();
    uint64_t v6 = +[UTTypeRecord typeRecordWithIdentifier:inUTI];
    int v7 = v6;
    if (v6)
    {
      CFIndex v8 = [v6 tagSpecification];
      uint64_t v9 = objc_opt_class();
      Boolean v2 = [v8 objectForKey:inTagClass ofClass:v9 valuesOfClass:objc_opt_class()];

      if (v2) {
        id v10 = v2;
      }
    }
    else
    {
      Boolean v2 = 0;
    }
  }
  return (CFArrayRef)v2;
}

void sub_18298FEB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829900C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_18299020C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
}

CFStringRef _UTTypeIdentifierIsDynamic(const __CFString *result)
{
  if (result)
  {
    CFStringRef v1 = result;
    if (CFStringGetLength(result) < 5)
    {
      return 0;
    }
    else
    {
      v2.id location = 0;
      v2.CFIndex length = 4;
      return (const __CFString *)(CFStringCompareWithOptions(v1, @"dyn.", v2, 1uLL) == kCFCompareEqualTo);
    }
  }
  return result;
}

void sub_182990634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);

  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)va);
  _Block_object_dispose((const void *)(v15 - 96), 8);

  _Unwind_Resume(a1);
}

uint64_t _UTGetActiveTypeForCFStringIdentifier(void *a1, const __CFString *a2, _DWORD *a3)
{
  id v5 = a1;
  int StringForCFString = _LSDatabaseGetStringForCFString(v5, a2, 1);
  if (StringForCFString) {
    uint64_t active = _UTGetActiveTypeForIdentifier(v5, StringForCFString, a3);
  }
  else {
    uint64_t active = 0;
  }

  return active;
}

void sub_18299072C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _UTEnumerateTypesForTag(void *a1, const __CFString *a2, const __CFString *a3, void *a4)
{
  int v7 = a1;
  id v8 = a4;
  uint64_t v9 = v8;
  if (v7)
  {
    if (a2)
    {
      if (a3)
      {
        if (v8)
        {
          int StringForCFString = _LSDatabaseGetStringForCFString(v7, a2, 1);
          if (StringForCFString)
          {
            int BindingMapIndex = _LSDatabaseFindBindingMapIndex((uint64_t)v7, StringForCFString);
            if (BindingMapIndex != -1)
            {
              if (_LSDatabaseGetStringForCFString(v7, a3, v7[104 * BindingMapIndex + 236]))
              {
                CFIndex v12 = v7;
                id v13 = v9;
                _LSDatabaseEnumeratingBindingMap();
              }
            }
          }
        }
      }
    }
  }
}

void sub_18299087C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t _LSDatabaseFindBindingMapIndex(uint64_t a1, int a2)
{
  uint64_t result = 0;
  id v4 = (int *)(a1 + 232);
  while (1)
  {
    int v5 = *v4;
    v4 += 26;
    if (v5 == a2) {
      break;
    }
    if (++result == 14) {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

id fallbackDynamicOrBaseTypeRecord(LSContext *a1, const __CFString *a2, __CFString *inUTI, __CFString *a4)
{
  if (!a4
    || ![(__CFString *)inUTI isEqual:@"public.filename-extension"]
    || !_UTExtensionLooksLikeAppendedRandomness(a1->db, a2)
    || ([(__CFString *)a4 isEqualToString:@"public.data"] & 1) == 0
    && ([(__CFString *)a4 isEqualToString:@"public.folder"] & 1) == 0
    && ![(__CFString *)a4 isEqualToString:@"public.directory"]
    || (+[UTTypeRecord _typeRecordWithContext:a1 identifier:a4 allowUndeclared:0], (id v8 = (id)objc_claimAutoreleasedReturnValue()) == 0))
  {
    DynamicIdentifierForTag = (__CFString *)_UTTypeCreateDynamicIdentifierForTag((void **)&a1->db, inUTI, a2, a4);
    if (DynamicIdentifierForTag) {
      id v8 = [[_UTDynamicTypeRecord alloc] _initWithContext:a1 dynamicUTI:DynamicIdentifierForTag];
    }
    else {
      id v8 = 0;
    }
  }

  return v8;
}

void sub_182990A08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182990AB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CFStringRef _UTTypeCreateDynamicIdentifierForTag(void **a1, CFStringRef inUTI, const __CFString *a3, const __CFString *a4)
{
  CFStringRef result = 0;
  if (inUTI && a3)
  {
    if (a1)
    {
      int v12 = 0;
      if (!_UTGetActiveTypeForCFStringIdentifier(*a1, inUTI, &v12))
      {
        int v11 = 0;
        return _UTTypeCreateDynamicIdentifierForTagCommon(inUTI, a3, a4, v11);
      }
      unsigned int TypeCaseInsensitiveText = _UTTypeGetTypeCaseInsensitiveText((_LSDatabase *)*a1);
      int v10 = _UTTypeConformsTo(*a1, v12, TypeCaseInsensitiveText);
    }
    else
    {
      int v10 = UTTypeConformsTo(inUTI, @"public.case-insensitive-text");
    }
    int v11 = v10;
    return _UTTypeCreateDynamicIdentifierForTagCommon(inUTI, a3, a4, v11);
  }
  return result;
}

void sub_182990CB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _UTTypeConformsTo(void *a1, int a2, unsigned int a3)
{
  id v5 = a1;
  uint64_t v6 = v5;
  uint64_t v20 = 0;
  uint64_t v21 = &v20;
  uint64_t v22 = 0x2020000000;
  char v23 = 0;
  if (a2 == a3)
  {
    uint64_t v7 = 1;
    char v23 = 1;
  }
  else
  {
    uint64_t v16 = 0;
    uint64_t v17 = &v16;
    uint64_t v18 = 0x2020000000;
    char v19 = 0;
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = ___UTTypeConformsTo_block_invoke;
    v13[3] = &unk_1E5231718;
    int v14 = a2;
    unsigned int v15 = a3;
    void v13[4] = &v20;
    v13[5] = &v16;
    _LSSchemaCacheRead((uint64_t)v5 + 16, v13);
    if (!*((unsigned char *)v17 + 24))
    {
      BOOL v8 = _UTTypeSearchConformsToTypesCommon((uint64_t)v6, a2, 32, (uint64_t)_UTTypeSearchEqual, a3, 0) != 0;
      *((unsigned char *)v21 + 24) = v8;
      v10[0] = MEMORY[0x1E4F143A8];
      v10[1] = 3221225472;
      v10[2] = ___UTTypeConformsTo_block_invoke_2;
      v10[3] = &unk_1E5231740;
      int v11 = a2;
      unsigned int v12 = a3;
      v10[4] = &v20;
      _LSSchemaCacheWrite((uint64_t)v6 + 16, v10);
    }
    _Block_object_dispose(&v16, 8);
    uint64_t v7 = *((unsigned __int8 *)v21 + 24);
  }
  _Block_object_dispose(&v20, 8);

  return v7;
}

void sub_182990E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v16 - 80), 8);

  _Unwind_Resume(a1);
}

void _LSSchemaCacheWrite(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    if (v4)
    {
      CFIndex v3 = *(pthread_rwlock_t **)(a1 + 1616);
      if (v3)
      {
        pthread_rwlock_wrlock(v3);
        v4[2](v4, v3);
        pthread_rwlock_unlock(v3);
      }
    }
  }
}

void sub_182990F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,unsigned int const&,unsigned int &>(uint64_t a1, unsigned int *a2, _DWORD *a3, int *a4)
{
  unint64_t v8 = *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v9 <= v8) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    int v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      unsigned int v12 = *v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (*((_DWORD *)v12 + 4) == v8) {
              return v12;
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4) {
              break;
            }
          }
          unsigned int v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  unsigned int v12 = operator new(0x18uLL);
  *unsigned int v12 = 0;
  v12[1] = v8;
  int v14 = *a4;
  *((_DWORD *)v12 + 4) = *a3;
  *((_DWORD *)v12 + 5) = v14;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void *)a1;
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *unsigned int v12 = *v22;
LABEL_38:
    void *v22 = v12;
    goto LABEL_39;
  }
  *unsigned int v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*v12)
  {
    unint64_t v23 = *(void *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }
    else
    {
      v23 &= v9 - 1;
    }
    uint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_182991164(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

CFStringRef _UTTypeCreateDynamicIdentifierForTagCommon(const __CFString *a1, const __CFString *a2, const __CFString *a3, int a4)
{
  CFStringRef DynamicIdentifierForFileInfo = 0;
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (a1 && a2)
  {
    memset(v20, 0, sizeof(v20));
    CFTypeID v9 = CFGetTypeID(a1);
    if (v9 == CFStringGetTypeID())
    {
      CFIndex Length = CFStringGetLength(a1);
      int v11 = XCFBufInitWithCFStringRange((uint64_t)v20, a1, 0, Length, 1);
    }
    else
    {
      XCFBufInit((uint64_t)v20);
      int v11 = 0;
    }
    memset(v19, 0, sizeof(v19));
    CFTypeID v12 = CFGetTypeID(a2);
    if (v12 == CFStringGetTypeID())
    {
      CFIndex v13 = CFStringGetLength(a2);
      int v14 = XCFBufInitWithCFStringRange((uint64_t)v19, a2, 0, v13, a4);
      if (v11 && v14)
      {
        memset(v18, 0, sizeof(v18));
        if (a3)
        {
          CFTypeID v15 = CFGetTypeID(a3);
          if (v15 == CFStringGetTypeID())
          {
            CFIndex v16 = CFStringGetLength(a3);
            if (XCFBufInitWithCFStringRange((uint64_t)v18, a3, 0, v16, 1))
            {
              CFStringRef DynamicIdentifierForFileInfo = _UTTypeCreateDynamicIdentifierForFileInfo((uint64_t)v19, (uint64_t)v20, (uint64_t)v18, 1);
              XCFBufDestroy((uint64_t)v18);
LABEL_21:
              XCFBufDestroy((uint64_t)v19);
LABEL_22:
              XCFBufDestroy((uint64_t)v20);
              return DynamicIdentifierForFileInfo;
            }
          }
          else
          {
            XCFBufInit((uint64_t)v18);
          }
          CFStringRef DynamicIdentifierForFileInfo = 0;
          goto LABEL_21;
        }
        CFStringRef DynamicIdentifierForFileInfo = _UTTypeCreateDynamicIdentifierForFileInfo((uint64_t)v19, (uint64_t)v20, 0, 0);
        goto LABEL_21;
      }
      if (v14) {
        XCFBufDestroy((uint64_t)v19);
      }
    }
    else
    {
      XCFBufInit((uint64_t)v19);
    }
    CFStringRef DynamicIdentifierForFileInfo = 0;
    if (!v11) {
      return DynamicIdentifierForFileInfo;
    }
    goto LABEL_22;
  }
  return DynamicIdentifierForFileInfo;
}

uint64_t _UTTypeGetTypeCaseInsensitiveText(_LSDatabase *a1)
{
  return _UTTypeGetCachedType(a1, @"public.case-insensitive-text", (unsigned int *)a1->schema._cache + 81);
}

void *std::__hash_table<std::__hash_value_type<unsigned int,BOOL>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,BOOL>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,BOOL>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint8x8_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      int v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          int v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  int v11 = operator new(0x18uLL);
  void *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((unsigned char *)v11 + 20) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  size_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    void *v11 = *v20;
LABEL_38:
    void *v20 = v11;
    goto LABEL_39;
  }
  void *v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    size_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_18299164C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint8x8_t v10 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (unint64_t i = *v10; i; unint64_t i = (uint64_t *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v13 = a1 + 16;
  float v14 = (char *)operator new(0x40uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *(void *)float v14 = 0;
  *((void *)v14 + 1) = v7;
  *((_DWORD *)v14 + 4) = **a4;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *((_DWORD *)v14 + 14) = 1065353216;
  char v25 = 1;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  unint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *(void *)v24[0] = *v21;
    void *v21 = v24[0];
  }
  else
  {
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v4) = v13;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8) {
          v22 %= v8;
        }
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v22) = v24[0];
    }
  }
  unint64_t i = (uint64_t *)v24[0];
  v24[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,void *>>>>::reset[abi:nn180100]((uint64_t)v24, 0);
  return i;
}

void sub_1829918BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,void *>>>>::reset[abi:nn180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void LaunchServices::TypeEvaluation::runEvaluator(void **a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  v71[2] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  *(unsigned char *)a4 = 0;
  *(unsigned char *)(a4 + 32) = 0;
  id v62 = 0;
  if ([*(id *)a2 getCachedResourceValueIfPresent:&v62 forKey:*MEMORY[0x1E4F1C728] error:0])
  {
    if (_UTTypeIdentifierIsDynamic(v62))
    {
      uint64_t v8 = [(__CFString *)v62 copy];
      int v9 = *(unsigned __int8 *)(a4 + 32);
      *(_DWORD *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      if (v9)
      {
        uint8x8_t v10 = *(void **)(a4 + 16);
        *(void *)(a4 + 16) = v8;

LABEL_11:
        *(unsigned char *)(a4 + 24) = 0;
        goto LABEL_12;
      }
      *(void *)(a4 + 16) = v8;
    }
    else
    {
      LODWORD(v64) = 0;
      uint64_t active = _UTGetActiveTypeForCFStringIdentifier(*a1, v62, &v64);
      if (!active) {
        goto LABEL_12;
      }
      int v12 = *(unsigned __int8 *)(a4 + 32);
      *(_DWORD *)a4 = v64;
      *(void *)(a4 + 8) = active;
      if (v12)
      {
        uint64_t v13 = *(void **)(a4 + 16);
        *(void *)(a4 + 16) = 0;

        goto LABEL_11;
      }
      *(void *)(a4 + 16) = 0;
    }
    *(unsigned char *)(a4 + 32) = 1;
    goto LABEL_11;
  }
LABEL_12:
  if (!*(unsigned char *)(a4 + 32))
  {
    id v14 = *(id *)a2;
    __int16 v59 = 256;
    int TypeDirectory = 0;
    id v61 = 0;
    *(void *)uint64_t v57 = a1;
    id v58 = 0;
    objc_storeStrong(&v58, v14);
    if (TypeDirectory) {
      goto LABEL_14;
    }
    LOBYTE(v59) = 0;
    if ([v58 isVolume])
    {
      int TypeVolume = _UTTypeGetTypeVolume(**(_LSDatabase ***)v57);
LABEL_21:
      int TypeDirectory = TypeVolume;
      goto LABEL_83;
    }
    if ([v58 isDirectory])
    {
      LOBYTE(v63) = 0;
      if (_LSNodeIsPackageIgnoringTypeDeclarations(*(LSContext **)v57, v58, &v63))
      {
        size_t v20 = **(_LSDatabase ***)v57;
        if ((_BYTE)v63) {
          int TypeAVCHDCollection = _UTTypeGetTypeAVCHDCollection(v20);
        }
        else {
          int TypeAVCHDCollection = _UTTypeGetTypePackage(v20);
        }
        int TypeDirectory = TypeAVCHDCollection;
        LOBYTE(v59) = (_BYTE)v63 == 0;
      }
      else
      {
        int TypeDirectory = _UTTypeGetTypeDirectory(**(_LSDatabase ***)v57);
        HIBYTE(v59) = 0;
        int v34 = LaunchServices::TypeEvaluation::State::getExtension((LaunchServices::TypeEvaluation::State *)v57);
        LOBYTE(v59) = v34 != 0;
      }
      goto LABEL_82;
    }
    if ([v58 isSymbolicLink])
    {
      int TypeVolume = _UTTypeGetTypeSymbolicLink(**(_LSDatabase ***)v57);
      goto LABEL_21;
    }
    if ([v58 isAliasFile])
    {
      int TypeVolume = _UTTypeGetTypeAliasFile(**(_LSDatabase ***)v57);
      goto LABEL_21;
    }
    if ([v58 isRegularFile])
    {
      int TypeVolume = _UTTypeGetTypeData(**(_LSDatabase ***)v57);
      int TypeDirectory = TypeVolume;
      LOBYTE(v59) = 1;
      goto LABEL_83;
    }
    id v63 = 0;
    uint64_t v52 = (const void *)*MEMORY[0x1E4F1C5C0];
    if (![v58 getResourceValue:&v63 forKey:*MEMORY[0x1E4F1C5C0] options:1 error:a3])
    {
LABEL_118:

LABEL_82:
      int TypeVolume = TypeDirectory;
LABEL_83:
      if (a3 && !TypeVolume)
      {
        if (*a3) {
          goto LABEL_88;
        }
        _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -10813, (uint64_t)"resolveBaseType", 381, 0);
        id v43 = (id)objc_claimAutoreleasedReturnValue();
LABEL_77:
        *a3 = v43;
LABEL_88:
        int v42 = *(unsigned __int8 *)(a4 + 32);
        goto LABEL_89;
      }
      if (!TypeVolume) {
        goto LABEL_88;
      }
LABEL_14:
      if (!(_BYTE)v59) {
        goto LABEL_39;
      }
      LOBYTE(v64) = 0;
      char v68 = 0;
      CFStringRef v15 = (const __CFString *)LaunchServices::TypeEvaluation::State::getExtension((LaunchServices::TypeEvaluation::State *)v57);
      int v16 = TypeDirectory;
      if (v15)
      {
        LODWORD(v71[0]) = 0;
        if (_UTTypeGetActiveIdentifierForTag(**(void ***)v57, @"public.filename-extension", v15, TypeDirectory, (uint64_t)v71))
        {
          int v17 = (int)v71[0];
          if (LODWORD(v71[0]))
          {
            uint64_t v18 = _UTTypeGet();
            LODWORD(v64) = v17;
            uint64_t v65 = v18;
            id v66 = 0;
            char v68 = 1;
            char v67 = 0;
            goto LABEL_37;
          }
        }
        int v16 = TypeDirectory;
      }
      if (!v16 || !(_BYTE)v59 || !HIBYTE(v59))
      {
LABEL_37:
        std::__optional_storage_base<LaunchServices::TypeEvaluator::Result,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<LaunchServices::TypeEvaluator::Result,false>>(a4, (uint64_t)&v64);
        if (v68) {

        }
LABEL_39:
        if (*(unsigned char *)(a4 + 32)) {
          goto LABEL_74;
        }
        LODWORD(v64) = 0;
        int v26 = TypeDirectory;
        if (v26 == _UTTypeGetTypeData(**(_LSDatabase ***)v57))
        {
          CFIndex v27 = [v58 nameWithError:0];
          uint64_t v28 = v27;
          if (v27)
          {
            if (![v27 caseInsensitiveCompare:@"makefile"]
              || ![v28 caseInsensitiveCompare:@"gnumakefile"])
            {
              _UTGetActiveTypeForCFStringIdentifier(**(void ***)v57, @"public.make-source", &v64);
            }
            if (LaunchServices::TypeEvaluation::gnitsFileNames(void)::once != -1) {
              dispatch_once(&LaunchServices::TypeEvaluation::gnitsFileNames(void)::once, &__block_literal_global_49_2);
            }
            if (objc_msgSend((id)LaunchServices::TypeEvaluation::gnitsFileNames(void)::result, "containsObject:", v28, *(void *)v57))_UTGetActiveTypeForCFStringIdentifier(**(void ***)v57, @"public.plain-text", &v64); {
          }
            }

          int v29 = (int)v64;
          if (v64)
          {
            uint64_t v30 = _UTTypeGet();
            int v31 = *(unsigned __int8 *)(a4 + 32);
            *(_DWORD *)a4 = v29;
            *(void *)(a4 + 8) = v30;
            if (v31)
            {
              CFRange v32 = *(void **)(a4 + 16);
              *(void *)(a4 + 16) = 0;
            }
            else
            {
              *(void *)(a4 + 16) = 0;
              *(unsigned char *)(a4 + 32) = 1;
            }
            *(unsigned char *)(a4 + 24) = 0;
          }
        }
        if (*(unsigned char *)(a4 + 32)) {
          goto LABEL_74;
        }
        int v35 = TypeDirectory;
        if (v35 == _UTTypeGetTypeData(**(_LSDatabase ***)v57))
        {
          if ([v58 isExecutable])
          {
            int TypeUnixExecutable = _UTTypeGetTypeUnixExecutable(**(_LSDatabase ***)v57);
            goto LABEL_68;
          }
        }
        else
        {
          int v37 = TypeDirectory;
          if (v37 == _UTTypeGetTypeDirectory(**(_LSDatabase ***)v57))
          {
            int TypeUnixExecutable = _UTTypeGetTypeFolder(**(_LSDatabase ***)v57);
LABEL_68:
            int v38 = TypeUnixExecutable;
            if (TypeUnixExecutable) {
              goto LABEL_70;
            }
          }
        }
        int v38 = TypeDirectory;
        if (!TypeDirectory)
        {
LABEL_74:
          int v42 = *(unsigned __int8 *)(a4 + 32);
          if (!a3 || *(unsigned char *)(a4 + 32))
          {
LABEL_89:
            if (!v42
              || !*(unsigned char *)(a2 + 8)
              || (int v44 = *(_DWORD *)a4,
                  LOBYTE(v64) = 0,
                  char v68 = 0,
                  _UTTypeGetTypeData(**(_LSDatabase ***)v57) != v44))
            {
LABEL_103:

              goto LABEL_104;
            }
            v71[0] = 0;
            int v45 = [v58 URL];
            v71[0] = 0;
            if (_LSCopySniffedExtensionAndTypeIdentifierForURL())
            {
              BOOL v46 = v71[0] == 0;

              if (!v46)
              {
                LODWORD(v70[0]) = 0;
                BOOL v47 = **(void ***)v57;
                CFStringRef v48 = (const __CFString *)v71[0];
                int TypeData = _UTTypeGetTypeData(**(_LSDatabase ***)v57);
                uint64_t ActiveIdentifierForTag = _UTTypeGetActiveIdentifierForTag(v47, @"public.filename-extension", v48, TypeData, (uint64_t)v70);
                if (ActiveIdentifierForTag)
                {
                  LODWORD(v64) = v70[0];
                  uint64_t v65 = ActiveIdentifierForTag;
                  id v66 = 0;
                  int v51 = 1;
                  char v68 = 1;
                  char v67 = 1;
LABEL_98:
                  if (v71[0]) {
                    CFRelease(v71[0]);
                  }
                  if (v51)
                  {
                    std::__optional_storage_base<LaunchServices::TypeEvaluator::Result,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<LaunchServices::TypeEvaluator::Result,false>>(a4, (uint64_t)&v64);
                    if (v68) {
                  }
                    }
                  goto LABEL_103;
                }
              }
            }
            else
            {
            }
            int v51 = 0;
            goto LABEL_98;
          }
          _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -10813, (uint64_t)"runEvaluator", 274, 0);
          id v43 = (id)objc_claimAutoreleasedReturnValue();
          goto LABEL_77;
        }
LABEL_70:
        uint64_t v39 = _UTTypeGet();
        int v40 = *(unsigned __int8 *)(a4 + 32);
        *(_DWORD *)a4 = v38;
        *(void *)(a4 + 8) = v39;
        if (v40)
        {
          uint64_t v41 = *(void **)(a4 + 16);
          *(void *)(a4 + 16) = 0;
        }
        else
        {
          *(void *)(a4 + 16) = 0;
          *(unsigned char *)(a4 + 32) = 1;
        }
        *(unsigned char *)(a4 + 24) = 0;
        goto LABEL_74;
      }
      unint64_t v22 = (__CFString *)LaunchServices::TypeEvaluation::State::getExtension((LaunchServices::TypeEvaluation::State *)v57);
      if (v22)
      {
        if (!_UTExtensionLooksLikeAppendedRandomness(**(void ***)v57, v22))
        {
          unint64_t v23 = @"public.filename-extension";
          unint64_t v22 = v22;
          if (v23)
          {
            if (_UTTypeGet()) {
              id v33 = (__CFString *)_CSStringCopyCFString();
            }
            else {
              id v33 = 0;
            }
            DynamicIdentifierForTag = (__CFString *)_UTTypeCreateDynamicIdentifierForTag(*(void ***)v57, v23, v22, v33);

LABEL_35:
            if (DynamicIdentifierForTag)
            {
              char v25 = (void *)[(__CFString *)DynamicIdentifierForTag copy];
              LODWORD(v64) = 0;
              uint64_t v65 = 0;
              id v66 = v25;
              char v68 = 1;
              char v67 = 0;
            }
            goto LABEL_37;
          }
LABEL_34:
          DynamicIdentifierForTag = 0;
          goto LABEL_35;
        }
        unint64_t v22 = 0;
      }
      unint64_t v23 = 0;
      goto LABEL_34;
    }
    if (LaunchServices::TypeEvaluation::resolveBaseType(LaunchServices::TypeEvaluation::State &,NSError * {__autoreleasing}*)::once != -1) {
      dispatch_once(&LaunchServices::TypeEvaluation::resolveBaseType(LaunchServices::TypeEvaluation::State &,NSError * {__autoreleasing}*)::once, &__block_literal_global_83);
    }
    objc_msgSend((id)LaunchServices::TypeEvaluation::resolveBaseType(LaunchServices::TypeEvaluation::State &,NSError * {__autoreleasing}*)::posixUTIs, "objectForKeyedSubscript:", v63, *(void *)v57);
    int v53 = (__CFString *)objc_claimAutoreleasedReturnValue();
    if (v53)
    {
      uint64_t v54 = _UTGetActiveTypeForCFStringIdentifier(**(void ***)v57, v53, &TypeDirectory);
      if (!a3 || v54) {
        goto LABEL_117;
      }
      v71[0] = *(CFTypeRef *)MEMORY[0x1E4F28228];
      v71[1] = v52;
      id v64 = @"File system object has an unknown POSIX type.";
      uint64_t v65 = (uint64_t)v63;
      unsigned int v55 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v64 forKeys:v71 count:2];
      uint64_t v56 = _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -10815, (uint64_t)"resolveBaseType", 366, v55);
    }
    else
    {
      if (!a3)
      {
LABEL_117:

        goto LABEL_118;
      }
      v69[0] = *MEMORY[0x1E4F28228];
      v69[1] = v52;
      v70[0] = @"File system object has an unknown POSIX type.";
      v70[1] = v63;
      unsigned int v55 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v70 forKeys:v69 count:2];
      uint64_t v56 = _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -10815, (uint64_t)"resolveBaseType", 371, v55);
    }
    *a3 = v56;

    goto LABEL_117;
  }
LABEL_104:
}

void sub_1829921BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  if (*(unsigned char *)(v14 + 32)) {
  _Unwind_Resume(a1);
  }
}

void sub_18299237C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t _UTTypeGet()
{
  return CSStoreGetUnit();
}

uint64_t _UTTypeGetCachedType(_LSDatabase *a1, const __CFString *a2, unsigned int *a3)
{
  id v5 = a1;
  uint64_t v6 = v5;
  uint64_t v7 = *a3;
  if (!v7)
  {
    _UTGetActiveTypeForCFStringIdentifier(v5, a2, a3);
    uint64_t v7 = *a3;
  }

  return v7;
}

void sub_18299241C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id LaunchServices::TypeEvaluation::State::getExtension(LaunchServices::TypeEvaluation::State *this)
{
  CFStringRef v1 = (void *)*((void *)this + 3);
  if (v1
    || ([*((id *)this + 1) extensionWithError:0],
        uint64_t v3 = objc_claimAutoreleasedReturnValue(),
        unint64_t v4 = (void *)*((void *)this + 3),
        *((void *)this + 3) = v3,
        v4,
        (CFStringRef v1 = (void *)*((void *)this + 3)) != 0))
  {
    if ([v1 length]) {
      id v5 = v1;
    }
    else {
      id v5 = 0;
    }
  }
  else
  {
    id v5 = 0;
  }

  return v5;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,void *>>>>::reset[abi:nn180100](uint64_t a1, uint64_t a2)
{
  CFRange v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::~__hash_table((uint64_t)v2 + 24);
    }
    operator delete(v2);
  }
}

uint64_t _UTTypeGetTypeDirectory(_LSDatabase *a1)
{
  return _UTTypeGetCachedType(a1, @"public.directory", (unsigned int *)a1->schema._cache + 79);
}

uint64_t _LSNodeIsPackageIgnoringTypeDeclarations(LSContext *a1, void *a2, unsigned char *a3)
{
  return _LSNodeIsPackageCommon(a1, a2, 0, a3);
}

uint64_t _UTTypeGetTypeData(_LSDatabase *a1)
{
  return _UTTypeGetCachedType(a1, @"public.data", (unsigned int *)a1->schema._cache + 74);
}

void sub_1829925F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829928F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL _UTExtensionLooksLikeAppendedRandomness(void *a1, CFStringRef theString)
{
  if (!theString) {
    return 0;
  }
  CFIndex Length = CFStringGetLength(theString);
  if ((unint64_t)(Length - 12) > 0x74) {
    return 0;
  }
  unint64_t v5 = Length;
  v17.id location = 0;
  v17.CFIndex length = Length;
  CFStringGetCharacters(theString, v17, v16);
  uint64_t v6 = 0;
  uint64_t v7 = &v16[v5];
  uint64_t v8 = v7;
  do
  {
    if (v16[v6] == 45) {
      uint64_t v8 = &v16[v6];
    }
    ++v6;
  }
  while (v5 != v6);
  unint64_t v9 = v7 - v8;
  if ((unint64_t)((char *)v7 - (char *)v8 - 3) > 0x28 || v5 <= v9) {
    return 0;
  }
  while (++v8 != v7)
  {
    int v13 = *v8;
    if ((v13 - 48) >= 0xA && (v13 & 0xFFFFFFDF) - 65 > 0x19)
    {
      if (v8 != v7) {
        return 0;
      }
      break;
    }
  }
  CFStringRef v15 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v16, v5 - v9);
  BOOL v11 = _UTTypeGetActiveIdentifierForTag(a1, @"public.filename-extension", v15, 0, 0) != 0;
  CFRelease(v15);
  return v11;
}

void sub_182992C08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182992CF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182992DE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182992ED8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182992FC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182993120(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829932C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _UTTypeGetTypeFolder(_LSDatabase *a1)
{
  return _UTTypeGetCachedType(a1, @"public.folder", (unsigned int *)a1->schema._cache + 75);
}

void sub_182993444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18299350C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18299363C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1829936C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _UTDynamicGetTagSpecification(const __CFString *a1)
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x3032000000;
  uint64_t v8 = __Block_byref_object_copy__53;
  unint64_t v9 = __Block_byref_object_dispose__53;
  id v10 = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  _OWORD v4[2] = ___UTDynamicGetTagSpecification_block_invoke;
  v4[3] = &unk_1E5230F28;
  v4[4] = &v5;
  _UTDynamicValuesSearch(0, a1, 2, 0, (uint64_t (*)(uint64_t *))_UTDynamicValuesSearchWithBlock::$_0::__invoke, (uint64_t)v4);
  if ([(id)v6[5] count])
  {
    id v1 = objc_alloc(MEMORY[0x1E4F1C9E8]);
    uint64_t v2 = [v1 initWithDictionary:v6[5] copyItems:1];
  }
  else
  {
    uint64_t v2 = 0;
  }
  _Block_object_dispose(&v5, 8);

  return v2;
}

void sub_1829937F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

void sub_182993B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

_DWORD *_LSBindingListGetEntryAtIndex(void *a1, uint64_t a2, unsigned int a3)
{
  id v4 = a1;
  uint64_t Unit = (unsigned int *)CSStoreGetUnit();
  if (*Unit <= a3)
  {
    unint64_t i = 0;
  }
  else
  {
    for (unint64_t i = Unit + 1; a3; --a3)
      i += i[1] + 2;
  }

  return i;
}

void sub_182993C70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unsigned int *_LSBindingListGetEntryCount()
{
  CFStringRef result = (unsigned int *)CSStoreGetUnit();
  if (result) {
    return (unsigned int *)*result;
  }
  return result;
}

_LSEmptyPropertyList *_LSLazyPropertyListGetSharedEmptyPropertyList()
{
  return +[_LSEmptyPropertyList sharedInstance];
}

uint64_t LaunchServices::URLPropertyProvider::prepareValues(void *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void **a7)
{
  uint64_t v73 = 0;
  long long v74 = &v73;
  uint64_t v75 = 0x2020000000;
  char v76 = 1;
  id location = 0;
  BOOL v11 = (void *)MEMORY[0x18530F680]();
  id v71 = 0;
  id v70 = 0;
  char v67 = 0;
  id v68 = 0;
  char v69 = 0;
  v63[0] = 0;
  char v65 = 0;
  id v66 = 0;
  uint64_t v62 = 0;
  if ([(id)__LSDefaultsGetSharedInstance() isServer])
  {
    id v61 = 0;
    [a1 getResourceValue:&v61 forKey:@"_LSMimicKey" error:0];
    id v12 = v61;
  }
  else
  {
    id v12 = 0;
  }
  v60[0] = &v71;
  v60[1] = &location;
  v60[2] = a7;
  v60[3] = (void **)a1;
  uint64_t v49 = a1;
  int v13 = getenv("LS_FORCE_URL_PROPERTY_PREP_OOP");
  if (!v13)
  {
    if (!_LSCurrentProcessMayMapDatabase()) {
      goto LABEL_6;
    }
LABEL_31:
    int v16 = 0;
    goto LABEL_43;
  }
  uint64_t v14 = [NSString stringWithUTF8String:v13];
  char v15 = [v14 BOOLValue];

  if ((v15 & 1) == 0) {
    goto LABEL_31;
  }
LABEL_6:
  BOOL v46 = v11;
  id v47 = v12;
  if (a5 >= 1)
  {
    id v50 = 0;
    int v16 = 0;
    p_obuint64_t j = &obj;
    if (!a7) {
      p_obuint64_t j = 0;
    }
    CFStringRef v48 = p_obj;
    uint64_t v18 = a3;
    unint64_t v19 = a4;
    uint64_t v20 = a5;
    while (1)
    {
      if (!*((unsigned char *)v74 + 24)) {
        goto LABEL_33;
      }
      uint64_t v21 = *v19;
      if (*(void *)(*v19 + 24))
      {
        uint64_t v22 = *v18;
        if (!MEMORY[0x18530E320](a2, *v18, &v62)) {
          break;
        }
      }
LABEL_27:
      ++v19;
      ++v18;
      if (!--v20) {
        goto LABEL_33;
      }
    }
    if (v50)
    {
      if (v16)
      {
LABEL_15:
        int v16 = v16;
        goto LABEL_21;
      }
    }
    else
    {
      id v50 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
      if (v16) {
        goto LABEL_15;
      }
    }
    unint64_t v23 = LaunchServices::URLPropertyProvider::prepareValues(__CFURL const*,__FileCache *,__CFString const* const*,void const**,long,void const*,__CFError **)::$_0::operator()(v60);
    if (v23) {
      uint64_t v24 = [[FSMimicPopulator alloc] initWithNode:v23];
    }
    else {
      uint64_t v24 = 0;
    }

    int v16 = v24;
    if (!v16)
    {
      *((unsigned char *)v74 + 24) = 0;
LABEL_26:

      goto LABEL_27;
    }
LABEL_21:
    char v25 = *(uint64_t (**)(FSMimicPopulator *, uint64_t, uint64_t, unsigned char *, id *))(v21 + 24);
    if (a7) {
      obuint64_t j = location;
    }
    char v26 = v25(v16, a2, v22, v63, v48);
    if (a7) {
      objc_storeStrong(&location, obj);
    }
    *((unsigned char *)v74 + 24) = v26;
    objc_msgSend(v50, "addObject:", v22, v46);
    goto LABEL_26;
  }
  int v16 = 0;
  id v50 = 0;
LABEL_33:
  id v12 = v47;
  if (*((unsigned char *)v74 + 24))
  {
    BOOL v11 = v46;
    if ([v50 count])
    {
      v57[0] = 0;
      v57[1] = v57;
      int v57[2] = 0x3032000000;
      v57[3] = __Block_byref_object_copy__51;
      v57[4] = __Block_byref_object_dispose__51;
      id v58 = 0;
      v56[0] = (void (*)(void, void))MEMORY[0x1E4F143A8];
      v56[1] = (void (*)(void, void))3221225472;
      v56[2] = (void (*)(void, void))___ZN14LaunchServices19URLPropertyProviderL13prepareValuesEPK7__CFURLP11__FileCachePKPK10__CFStringPPKvlSC_PP9__CFError_block_invoke;
      void v56[3] = (void (*)(void, void))&unk_1E522BA78;
      v56[4] = (void (*)(void, void))v57;
      CFIndex v27 = +[_LSDService synchronousXPCProxyWithErrorHandler:]((uint64_t)_LSDReadService, v56);
      if (!v16)
      {
        uint64_t v28 = LaunchServices::URLPropertyProvider::prepareValues(__CFURL const*,__FileCache *,__CFString const* const*,void const**,long,void const*,__CFError **)::$_0::operator()(v60);
        if (v28) {
          int v16 = [[FSMimicPopulator alloc] initWithNode:v28];
        }
        else {
          int v16 = 0;
        }
      }
      int v16 = v16;
      int v29 = [(FSMimicPopulator *)v16 mimic];
      uint64_t v30 = [(id)__LSDefaultsGetSharedInstance() preferredLocalizations];
      v55[0] = MEMORY[0x1E4F143A8];
      v55[1] = 3221225472;
      v55[2] = ___ZN14LaunchServices19URLPropertyProviderL13prepareValuesEPK7__CFURLP11__FileCachePKPK10__CFStringPPKvlSC_PP9__CFError_block_invoke_2;
      v55[3] = &unk_1E5230E38;
      v55[4] = &v73;
      v55[5] = v57;
      v55[6] = a2;
      [v27 getResourceValuesForKeys:v50 mimic:v29 preferredLocalizations:v30 completionHandler:v55];

      _Block_object_dispose(v57, 8);
    }
  }
  else
  {
    BOOL v11 = v46;
  }

LABEL_43:
  if (a5 >= 1)
  {
    if (a7) {
      int v31 = &v54;
    }
    else {
      int v31 = 0;
    }
    do
    {
      if (!*((unsigned char *)v74 + 24)) {
        break;
      }
      uint64_t v32 = *a4;
      if (*(void *)(*a4 + 16))
      {
        uint64_t v33 = *a3;
        if (!MEMORY[0x18530E320](a2, *a3, &v62))
        {
          id v34 = v12;
          if (v12)
          {
            int v35 = v34;
            id v36 = v74;
          }
          else
          {
            uint64_t v37 = LaunchServices::URLPropertyProvider::prepareValues(__CFURL const*,__FileCache *,__CFString const* const*,void const**,long,void const*,__CFError **)::$_0::operator()(v60);
            id v36 = v74;
            if (v37)
            {
              int v35 = (void *)v37;
            }
            else
            {
              int v35 = 0;
              *((unsigned char *)v74 + 24) = 0;
            }
          }
          if (*((unsigned char *)v36 + 24))
          {
            if (a7) {
              id v54 = location;
            }
            int v38 = (*(uint64_t (**)(void ***, void *, uint64_t, uint64_t, unsigned char *, id *))(v32 + 16))(&v67, v35, a2, v33, v63, v31);
            if (a7) {
              objc_storeStrong(&location, v54);
            }
            if (!v38) {
              *((unsigned char *)v74 + 24) = 0;
            }
          }
        }
      }
      ++a4;
      ++a3;
      --a5;
    }
    while (a5);
  }
  id v39 = v71;
  id v40 = v71;
  if (v40 && os_unfair_lock_trylock((os_unfair_lock_t)&LaunchServices::URLPropertyProvider::reusableNodeLock))
  {
    if (!LaunchServices::URLPropertyProvider::reusableNode)
    {
      [v40 prepareForReuse];
      objc_storeStrong((id *)&LaunchServices::URLPropertyProvider::reusableNode, v39);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&LaunchServices::URLPropertyProvider::reusableNodeLock);
  }

  id v41 = v71;
  id v71 = 0;

  if (a7 && !*((unsigned char *)v74 + 24))
  {
    id v53 = location;
    LaunchServices::URLPropertyProvider::normalizeError(v49, 0, &v53);
    objc_storeStrong(&location, v53);
    *a7 = location;
  }

  if (v65) {
  if (v67 && v69)
  }
    _LSContextDestroy(v67);
  id v42 = v68;
  char v67 = 0;
  id v68 = 0;

  char v69 = 0;
  id v43 = v70;
  id v70 = 0;

  uint64_t v44 = *((unsigned __int8 *)v74 + 24);

  _Block_object_dispose(&v73, 8);
  return v44;
}

void sub_182994368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,id a35)
{
  _Block_object_dispose(&a30, 8);
  LaunchServices::URLPropertyProvider::State::~State((id *)(v36 - 240));
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)(v36 - 192));

  _Block_object_dispose((const void *)(v36 - 136), 8);
  _Unwind_Resume(a1);
}

id LaunchServices::URLPropertyProvider::prepareValues(__CFURL const*,__FileCache *,__CFString const* const*,void const**,long,void const*,__CFError **)::$_0::operator()(void ***a1)
{
  uint64_t v2 = **a1;
  if (v2) {
    goto LABEL_15;
  }
  uint64_t v3 = a1[3];
  if (os_unfair_lock_trylock((os_unfair_lock_t)&LaunchServices::URLPropertyProvider::reusableNodeLock))
  {
    if (LaunchServices::URLPropertyProvider::reusableNode)
    {
      id v4 = (id)LaunchServices::URLPropertyProvider::reusableNode;
      uint64_t v5 = (void *)LaunchServices::URLPropertyProvider::reusableNode;
      LaunchServices::URLPropertyProvider::reusableNode = 0;

      os_unfair_lock_unlock((os_unfair_lock_t)&LaunchServices::URLPropertyProvider::reusableNodeLock);
      uint64_t v6 = (void *)[v4 initWithURL:v3 flags:64 error:0];
      uint64_t v7 = v6;
      if (v6) {
        id v8 = v6;
      }

      goto LABEL_9;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&LaunchServices::URLPropertyProvider::reusableNodeLock);
  }
  uint64_t v7 = 0;
LABEL_9:
  unint64_t v9 = **a1;
  **a1 = v7;

  uint64_t v2 = **a1;
  if (!v2)
  {
    id v10 = [FSNode alloc];
    BOOL v11 = a1[3];
    if (a1[2] && (id v12 = a1[1]) != 0)
    {
      obuint64_t j = *v12;
      uint64_t v13 = [(FSNode *)v10 initWithURL:v11 flags:64 error:&obj];
      objc_storeStrong(v12, obj);
    }
    else
    {
      uint64_t v13 = [(FSNode *)v10 initWithURL:v11 flags:64 error:0];
    }
    uint64_t v14 = **a1;
    **a1 = (void *)v13;

    uint64_t v2 = **a1;
  }
LABEL_15:

  return v2;
}

void sub_18299468C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::URLPropertyProvider::prepareIsPackageValue(id *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  +[_LSDServiceDomain defaultServiceDomain]();
  id v10 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  BOOL v11 = (LSContext *)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)a1, v10, 0);

  if (v11)
  {
    int IsPackage = _LSNodeIsPackage(v11, a2, 0);
    uint64_t v13 = (void *)MEMORY[0x1E4F1CFD0];
    if (!IsPackage) {
      uint64_t v13 = (void *)MEMORY[0x1E4F1CFC8];
    }
    MEMORY[0x18530E330](a3, *MEMORY[0x1E4F1D6A0], *v13);
    return 1;
  }
  else if (a6)
  {
    +[_LSDServiceDomain defaultServiceDomain]();
    char v15 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
    uint64_t v16 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)a1, v15, 0);

    if (v16) {
      id v17 = 0;
    }
    else {
      id v17 = a1[3];
    }
    uint64_t result = 0;
    *a6 = v17;
  }
  else
  {
    return 0;
  }
  return result;
}

void sub_182994808(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182994904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182994AB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182994BD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t _LSNodeIsPackage(LSContext *a1, void *a2, unsigned char *a3)
{
  return _LSNodeIsPackageCommon(a1, a2, 1, a3);
}

void sub_182994D44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182994FE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSBundleDisplayNameContextEnumerate(void *a1)
{
  id v1 = a1;
  char v3 = 0;
  uint64_t v2 = (void *)[objc_alloc(MEMORY[0x1E4F28E78]) initWithCapacity:128];
  [v2 appendString:*MEMORY[0x1E4F1CC48]];
  [v2 appendString:@"#"];
  [v2 appendString:@"Car"];
  v1[2](v1, 0, @"Car", v2, &v3);
}

void sub_1829950D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829951D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::URLPropertyProvider::prepareTypeIdentifierAndObjectValue(id *a1, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5, void *a6)
{
  +[_LSDServiceDomain defaultServiceDomain]();
  id v12 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  uint64_t v13 = (LSContext *)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)a1, v12, 0);

  if (!v13)
  {
    if (a6)
    {
      +[_LSDServiceDomain defaultServiceDomain]();
      char v15 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
      uint64_t v16 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)a1, v15, 0);

      if (v16) {
        id v17 = 0;
      }
      else {
        id v17 = a1[3];
      }
      uint64_t result = 0;
      *a6 = v17;
      return result;
    }
    return 0;
  }
  if (!*(unsigned char *)(a5 + 32))
  {
LABEL_11:
    LaunchServices::TypeEvaluator::TypeEvaluator(v29, a2);
    LaunchServices::TypeEvaluator::evaluateType((uint64_t)v29, (void **)&v13->db, a6, (uint64_t)v26);
    std::__optional_storage_base<LaunchServices::TypeEvaluator::Result,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<LaunchServices::TypeEvaluator::Result,false>>(a5, (uint64_t)v26);
    if (v28) {

    }
    if (*(unsigned char *)(a5 + 32)) {
      goto LABEL_14;
    }
    return 0;
  }
  uint64_t v14 = _UTTypeGet();
  *(void *)(a5 + 8) = v14;
  if (!v14)
  {
    if (*(unsigned char *)(a5 + 32))
    {

      *(unsigned char *)(a5 + 32) = 0;
    }
    goto LABEL_11;
  }
  if (!*(unsigned char *)(a5 + 32)) {
    goto LABEL_11;
  }
LABEL_14:
  uint64_t v18 = LaunchServices::TypeEvaluator::Result::getTypeIdentifier((id *)a5, v13);
  uint64_t v19 = *MEMORY[0x1E4F1CD90];
  uint64_t v20 = (LaunchServices::URLPropertyProvider *)CFEqual(a4, (CFTypeRef)*MEMORY[0x1E4F1CD90]);
  if (v20)
  {
    id UTTypeClass = LaunchServices::URLPropertyProvider::getUTTypeClass(v20);
    if (UTTypeClass)
    {
      uint64_t v22 = UTTypeClass;
      if (!*(_DWORD *)a5
        || ([UTTypeClass _constantTypeForURLPropertyProviderWithIdentifier:v18],
            (unint64_t v23 = objc_claimAutoreleasedReturnValue()) == 0))
      {
        uint64_t v24 = LaunchServices::TypeEvaluator::Result::getTypeRecord((LaunchServices::TypeEvaluator::Result *)a5, v13);
        unint64_t v23 = [v22 _typeForURLPropertyProviderWithTypeRecord:v24];
      }
      MEMORY[0x18530E330](a3, v19, v23);
    }
  }
  MEMORY[0x18530E330](a3, *MEMORY[0x1E4F1D778], v18);

  return 1;
}

void sub_182995410(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__n128 std::__optional_storage_base<LaunchServices::TypeEvaluator::Result,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<LaunchServices::TypeEvaluator::Result,false>>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32))
  {
    if (*(unsigned char *)(a1 + 32))
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v4 = *(void *)(a2 + 16);
      *(void *)(a2 + 16) = 0;
      uint64_t v5 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v4;

      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    }
  }
  else if (*(unsigned char *)(a1 + 32))
  {

    *(unsigned char *)(a1 + 32) = 0;
  }
  else
  {
    __n128 result = *(__n128 *)a2;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v7 = *(void *)(a2 + 16);
    *(void *)(a2 + 16) = 0;
    *(void *)(a1 + 16) = v7;
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    *(unsigned char *)(a1 + 32) = 1;
  }
  return result;
}

void LaunchServices::TypeEvaluator::evaluateType(uint64_t a1@<X0>, void **a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
}

uint64_t LaunchServices::TypeEvaluator::TypeEvaluator(uint64_t a1, void *a2)
{
  id v3 = a2;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = 0;
  if (!v3)
  {
    uint64_t v5 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v6 = [NSString stringWithUTF8String:"LaunchServices::TypeEvaluator::TypeEvaluator(const __strong id<FSNodePropertyProviding> _Nonnull)"];
    [v5 handleFailureInFunction:v6, @"UTTypeEvaluator.mm", 97, @"Invalid parameter not satisfying: %@", @"node != nil" file lineNumber description];
  }
  return a1;
}

void sub_1829955B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id LaunchServices::TypeEvaluator::Result::getTypeIdentifier(id *this, LSContext *a2)
{
  if (this[1]) {
    id v2 = (id)_CSStringCopyCFString();
  }
  else {
    id v2 = this[2];
  }

  return v2;
}

id LaunchServices::URLPropertyProvider::getUTTypeClass(LaunchServices::URLPropertyProvider *this)
{
  if (LaunchServices::URLPropertyProvider::getUTTypeClass(void)::once != -1) {
    dispatch_once(&LaunchServices::URLPropertyProvider::getUTTypeClass(void)::once, &__block_literal_global_10_1);
  }
  id v1 = (void *)LaunchServices::URLPropertyProvider::getUTTypeClass(void)::result;

  return v1;
}

id LaunchServices::TypeEvaluator::Result::getTypeRecord(LaunchServices::TypeEvaluator::Result *this, LSContext *a2)
{
  if (*(_DWORD *)this) {
    id v2 = [(LSRecord *)[_UTDeclaredTypeRecord alloc] _initWithContext:a2 tableID:a2->db->schema.utypeTable unitID:*(unsigned int *)this];
  }
  else {
    id v2 = [[_UTDynamicTypeRecord alloc] _initWithContext:a2 dynamicUTI:*((void *)this + 2)];
  }

  return v2;
}

uint64_t LaunchServices::URLPropertyProvider::prepareTypeMimic(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return LaunchServices::TypeEvaluator::PrepareMimicForTypeEvaluation(a1, a5);
}

void sub_1829957EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829958E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829959BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::URLPropertyProvider::prepareLocalizedNameValue(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (_LSContextIsCurrentThreadInitializing())
  {
    BOOL v11 = _LSDefaultLog();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      id v12 = [a2 URL];
      LaunchServices::URLPropertyProvider::prepareLocalizedNameValue(v12, (uint8_t *)&v19, v11);
    }
  }
  else
  {
    if (LaunchServices::URLPropertyProvider::shouldAvoidLocalizingNameBecauseIsInLightweightSystemSession(void)::onceToken != -1) {
      dispatch_once(&LaunchServices::URLPropertyProvider::shouldAvoidLocalizingNameBecauseIsInLightweightSystemSession(void)::onceToken, &__block_literal_global_31_0);
    }
    if (LaunchServices::URLPropertyProvider::shouldAvoidLocalizingNameBecauseIsInLightweightSystemSession(void)::result != 1)
    {
      uint64_t v16 = LaunchServices::URLPropertyProvider::getDisplayNameConstructor(a1, (uint64_t)a2, a5, a6);
      id v17 = v16;
      if (v16)
      {
        uint64_t v14 = [v16 unlocalizedNameWithContextIfNeeded:a1];
      }
      else
      {
        uint64_t v14 = 0;
      }

      if (v14) {
        goto LABEL_10;
      }
LABEL_15:
      uint64_t v15 = 0;
      goto LABEL_16;
    }
    BOOL v11 = _LSDefaultLog();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = [a2 URL];
      int v19 = 138477827;
      uint64_t v20 = v13;
      _os_log_impl(&dword_182959000, v11, OS_LOG_TYPE_DEFAULT, "Not localizing name for %{private}@ because we are in the system session, which has no user preferences.", (uint8_t *)&v19, 0xCu);
    }
  }

  uint64_t v14 = [a2 nameWithError:a6];
  if (!v14) {
    goto LABEL_15;
  }
LABEL_10:
  MEMORY[0x18530E330](a3, *MEMORY[0x1E4F1D718], v14);
  uint64_t v15 = 1;
LABEL_16:

  return v15;
}

void sub_182995BBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN14LaunchServices19URLPropertyProviderL35prepareLocalizedNameDictionaryValueERNS_8Database7ContextEPU34objcproto23FSNodePropertyProviding11objc_objectP11__FileCachePK10__CFStringPNS0_5StateEPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  uint64_t v6 = (void *)MEMORY[0x18530F680]();
  uint64_t v7 = [v5 unlocalizedNameWithContextIfNeeded:*(void *)(a1 + 48) asIfShowingAllExtensions:MEMORY[0x1E4F1CC38]];
  id v8 = [v5 unlocalizedNameWithContextIfNeeded:*(void *)(a1 + 48) asIfShowingAllExtensions:MEMORY[0x1E4F1CC28]];
  if ([v7 isEqual:v8])
  {
    id v9 = v7;

    id v8 = v9;
  }
  [*(id *)(a1 + 32) setObject:v7 forKeyedSubscript:v10];
  [*(id *)(a1 + 40) setObject:v8 forKeyedSubscript:v10];
}

void sub_182995CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182995E00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182995FAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18299614C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182996278(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18299630C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829963E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void _LSDNCWithCharacters(void *a1, void *a2)
{
  id v3 = a1;
  uint64_t v4 = a2;
  unint64_t v5 = [(__CFString *)v3 length];
  CharactersPtr = CFStringGetCharactersPtr(v3);
  if (CharactersPtr)
  {
    v4[2](v4, CharactersPtr, v5);
  }
  else if (v5 > 0xFF)
  {
    __p = 0;
    id v9 = 0;
    uint64_t v10 = 0;
    std::vector<unsigned short>::__vallocate[abi:nn180100](&__p, v5);
    uint64_t v7 = (char *)v9;
    bzero(v9, 2 * v5);
    id v9 = &v7[2 * v5];
    -[__CFString getCharacters:range:](v3, "getCharacters:range:", __p, 0, v5);
    v4[2](v4, (const UniChar *)__p, v5);
    if (__p)
    {
      id v9 = __p;
      operator delete(__p);
    }
  }
  else
  {
    -[__CFString getCharacters:range:](v3, "getCharacters:range:", &__p, 0, v5);
    v4[2](v4, (const UniChar *)&__p, v5);
  }
}

void sub_182996528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  _Unwind_Resume(a1);
}

id LaunchServices::URLPropertyProvider::getDisplayNameConstructor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (id *)(a3 + 40);
  id v8 = *(id *)(a3 + 40);
  if (!v8)
  {
    id v9 = +[_LSDisplayNameConstructor displayNameConstructorWithContextIfNeeded:a1 node:a2 error:a4];
    id v8 = v9;
    if (v8) {
      objc_storeStrong(v7, v9);
    }
  }

  return v8;
}

BOOL _LSContextIsCurrentThreadInitializing()
{
  return *(_DWORD *)getIsCurrentThreadInLSContextInitReference() != 0;
}

void sub_182996BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_182996D30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::URLPropertyProvider::prepareCanSetHiddenExtensionValue(LaunchServices::Database::Context *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v8 = LaunchServices::URLPropertyProvider::getDisplayNameConstructor((uint64_t)a1, a2, a5, a6);
  if (v8)
  {
    +[_LSDServiceDomain defaultServiceDomain]();
    id v9 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
    uint64_t v10 = LaunchServices::Database::Context::_get(a1, v9, 0);

    int v11 = [v8 canSetExtensionHiddenWithContext:v10];
    id v12 = (void *)MEMORY[0x1E4F1CFC8];
    if (v11) {
      id v12 = (void *)MEMORY[0x1E4F1CFD0];
    }
    MEMORY[0x18530E330](a3, *MEMORY[0x1E4F1CD78], *v12);
  }
  else
  {
    MEMORY[0x18530E330](a3, *MEMORY[0x1E4F1CD78], *MEMORY[0x1E4F1CFC8]);
  }

  return 1;
}

void sub_182996E28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::URLPropertyProvider::prepareIsApplicationValue(id *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  int v10 = _LSGetBundleClassForNode(0, a2);
  if (v10 != 2)
  {
LABEL_4:
    uint64_t v13 = (void *)MEMORY[0x1E4F1CFD0];
    if (v10 != 2) {
      uint64_t v13 = (void *)MEMORY[0x1E4F1CFC8];
    }
    MEMORY[0x18530E330](a3, *MEMORY[0x1E4F1D670], *v13);
    return 1;
  }
  +[_LSDServiceDomain defaultServiceDomain]();
  int v11 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  uint64_t v12 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)a1, v11, 0);

  if (v12)
  {
    int v10 = _LSGetBundleClassForNode(v12, a2);
    goto LABEL_4;
  }
  if (!a6) {
    return 0;
  }
  +[_LSDServiceDomain defaultServiceDomain]();
  uint64_t v15 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  uint64_t v16 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)a1, v15, 0);

  if (v16) {
    id v17 = 0;
  }
  else {
    id v17 = a1[3];
  }
  uint64_t result = 0;
  *a6 = v17;
  return result;
}

void sub_182996F64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182997038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t _LSDNCGetBundleClass(id *a1, void *a2, int a3, _DWORD *a4, void *a5)
{
  id v9 = a2;
  if (!a3)
  {
    int v12 = _LSGetBundleClassForNode(0, v9);
    goto LABEL_5;
  }
  +[_LSDServiceDomain defaultServiceDomain]();
  int v10 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  uint64_t v11 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)a1, v10, 0);

  if (v11)
  {
    int v12 = _LSGetBundleClassForNode(v11, v9);
LABEL_5:
    *a4 = v12;
    uint64_t v13 = 1;
    goto LABEL_6;
  }
  if (a5)
  {
    +[_LSDServiceDomain defaultServiceDomain]();
    uint64_t v15 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
    uint64_t v16 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)a1, v15, 0);

    if (v16) {
      id v17 = 0;
    }
    else {
      id v17 = a1[3];
    }
    uint64_t v13 = 0;
    *a5 = v17;
  }
  else
  {
    uint64_t v13 = 0;
  }
LABEL_6:

  return v13;
}

void sub_182997164(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSGetBRDisplayNameForSideFaultFileNode(void *a1)
{
  id v1 = a1;
  id v2 = v1;
  if (!v1) {
    goto LABEL_7;
  }
  if (![v1 isSideFault]) {
    goto LABEL_7;
  }
  id v3 = [v2 URL];

  if (!softLinkBRCopyRepresentedFileNameForFaultFileURL) {
    goto LABEL_7;
  }
  uint64_t v4 = (void *)softLinkBRCopyRepresentedFileNameForFaultFileURL((const __CFURL *)v3);
  if (v4 && (_NSIsNSString() & 1) == 0)
  {

LABEL_7:
    uint64_t v4 = 0;
  }

  return v4;
}

void sub_18299722C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829972C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSGetBRDisplayNameForContainerNode(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v17 = 0;
  uint64_t v18 = &v17;
  uint64_t v19 = 0x3032000000;
  uint64_t v20 = __Block_byref_object_copy__8;
  uint64_t v21 = __Block_byref_object_dispose__8;
  id v22 = 0;
  if (v3 && [v3 isDirectory])
  {
    CFStringRef v5 = [v3 nameWithError:0];
    uint64_t v6 = (__CFString *)v5;
    if (v5
      && (CFStringFind(v5, @"~", 0).location != -1
       || CFEqual(v6, @"Desktop")
       || CFEqual(v6, @"Documents")))
    {
      uint64_t v7 = [v3 URL];

      if (v4)
      {
        v16[0] = MEMORY[0x1E4F143A8];
        v16[1] = 3221225472;
        _OWORD v16[2] = ___LSGetBRDisplayNameForContainerNode_block_invoke;
        v16[3] = &unk_1E522D598;
        void v16[4] = &v17;
        v16[5] = v7;
        [v4 enumerateObjectsUsingBlock:v16];
      }
      id v8 = v18;
      if (!v18[5])
      {
        id v9 = softLinkBRCopyDisplayNameForContainerAtURL;
        if (softLinkBRCopyDisplayNameForContainerAtURL)
        {
          uint64_t v10 = softLinkBRCopyDisplayNameForContainerAtURL((const __CFURL *)v7, 0);
          id v8 = v18;
          id v9 = (uint64_t (*)(const __CFURL *, const __CFString *))v18[5];
        }
        else
        {
          uint64_t v10 = 0;
        }
        void v8[5] = v10;
      }
    }
  }
  uint64_t v11 = v18;
  if (v18[5])
  {
    char v12 = _NSIsNSString();
    uint64_t v11 = v18;
    if ((v12 & 1) == 0)
    {
      uint64_t v13 = (void *)v18[5];
      v18[5] = 0;

      uint64_t v11 = v18;
    }
  }
  id v14 = (id)v11[5];
  _Block_object_dispose(&v17, 8);

  return v14;
}

void sub_1829974E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::URLPropertyProvider::prepareApplicationFlags(id *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  +[_LSDServiceDomain defaultServiceDomain]();
  uint64_t v10 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  uint64_t v11 = (LSContext *)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)a1, v10, 0);

  if (!v11)
  {
    if (a6)
    {
      +[_LSDServiceDomain defaultServiceDomain]();
      uint64_t v24 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
      uint64_t v25 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)a1, v24, 0);

      if (v25)
      {
        id v26 = 0;
LABEL_29:
        uint64_t result = 0;
        *a6 = v26;
        return result;
      }
      id v28 = a1[3];
LABEL_28:
      id v26 = v28;
      goto LABEL_29;
    }
    return 0;
  }
  int v29 = 0;
  int v12 = _LSFindOrFindOrRegisterBundleNode(v11, a2, 0, 0x2000000u, 0, 0, &v29);
  if (v12) {
    BOOL v13 = v12 == -10811;
  }
  else {
    BOOL v13 = 1;
  }
  if (!v13)
  {
    if (a6)
    {
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], v12, (uint64_t)"prepareApplicationFlags", 994, 0);
      id v28 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_28;
    }
    return 0;
  }
  if (!v29
    || ((clas = v29->_clas, BOOL v15 = clas > 0x10, v16 = (1 << clas) & 0x14004, !v15) ? (v17 = v16 == 0) : (v17 = 1), v17))
  {
    MEMORY[0x18530E330](a3, *MEMORY[0x1E4F1CD50], 0);
    uint64_t v22 = *MEMORY[0x1E4F1CD48];
    uint64_t v23 = a3;
    uint64_t v21 = 0;
  }
  else
  {
    uint64_t v18 = *MEMORY[0x1E4F1CFD0];
    uint64_t v19 = *MEMORY[0x1E4F1CFC8];
    if ((*(void *)(&v29->_clas + 1) & 0x40000) != 0) {
      uint64_t v20 = *MEMORY[0x1E4F1CFD0];
    }
    else {
      uint64_t v20 = *MEMORY[0x1E4F1CFC8];
    }
    MEMORY[0x18530E330](a3, *MEMORY[0x1E4F1CD50], v20);
    if ((*(void *)(&v29->_clas + 1) & 0x200000) != 0) {
      uint64_t v21 = v18;
    }
    else {
      uint64_t v21 = v19;
    }
    uint64_t v22 = *MEMORY[0x1E4F1CD48];
    uint64_t v23 = a3;
  }
  MEMORY[0x18530E330](v23, v22, v21);
  return 1;
}

void sub_18299778C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t (*initBRCopyDisplayNameForContainerAtURL(const __CFURL *a1, const __CFString *a2))(const __CFURL *, const __CFString *)
{
  id v4 = (void *)CloudDocsLibrary(void)::frameworkLibrary;
  if (!CloudDocsLibrary(void)::frameworkLibrary)
  {
    id v4 = dlopen("/System/Library/PrivateFrameworks/CloudDocs.framework/CloudDocs", 2);
    CloudDocsLibrary(void)::frameworkLibrary = (uint64_t)v4;
  }
  uint64_t result = (uint64_t (*)(const __CFURL *, const __CFString *))dlsym(v4, "BRCopyDisplayNameForContainerAtURL");
  softLinkBRCopyDisplayNameForContainerAtURL = result;
  if (result)
  {
    return (uint64_t (*)(const __CFURL *, const __CFString *))result(a1, a2);
  }
  return result;
}

uint64_t _LSDatabaseIsMutable(uint64_t a1)
{
  return MEMORY[0x1F4115208](*(void *)(a1 + 8));
}

uint64_t LaunchServices::BindingEvaluation::compareBindings(LaunchServices::BindingEvaluation *this, LaunchServices::BindingEvaluation::State *a2, const LaunchServices::BindingEvaluation::ExtendedBinding *a3, const LaunchServices::BindingEvaluation::ExtendedBinding *a4)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  if ((*((unsigned char *)this + 116) & 0x40) == 0
    || (int v7 = LaunchServices::BindingEvaluation::compareVendors((uint64_t)a2, (uint64_t)a3),
        LaunchServices::BindingEvaluation::logComparison((uint64_t)this, (uint64_t)a2, (uint64_t)a3, (uint64_t)"vendor (prioritized is-Apple check)", v7), !v7)&& (int v7 = LaunchServices::BindingEvaluation::compareBundleClass((uint64_t)a2, (uint64_t)a3), LaunchServices::BindingEvaluation::logComparison((uint64_t)this, (uint64_t)a2, (uint64_t)a3, (uint64_t)"system placeholder (prioritized is-Apple check)", v7), !v7))
  {
    if ((*((unsigned char *)a2 + 49) != 0) == (*((unsigned char *)a3 + 49) == 0))
    {
      int v7 = 0;
    }
    else
    {
      uint64_t v9 = *((void *)a2 + 3);
      if (v9) {
        BOOL v10 = (*(unsigned char *)(v9 + 8) & 1) == 0;
      }
      else {
        BOOL v10 = 1;
      }
      uint64_t v11 = *((void *)a3 + 3);
      if (v11) {
        LODWORD(v11) = *(unsigned char *)(v11 + 8) & 1;
      }
      int v12 = v10 | v11;
      int v13 = (int)((v10 & v11) << 31) >> 31;
      if (v12 == 1) {
        int v7 = v13;
      }
      else {
        int v7 = 1;
      }
    }
    LaunchServices::BindingEvaluation::logComparison((uint64_t)this, (uint64_t)a2, (uint64_t)a3, (uint64_t)"Apple default", v7);
    if (!v7)
    {
      uint64_t v14 = *((void *)a2 + 3);
      if (!v14
        || !*((void *)a3 + 3)
        || ((int v15 = !_LSClaimFlagsAreWildcard(*(_DWORD *)(v14 + 8)),
             int v16 = _LSClaimFlagsAreWildcard(*(_DWORD *)(*((void *)a3 + 3) + 8)),
             (v15 & v16) != 0)
          ? (LOBYTE(v7) = 1)
          : (LOBYTE(v7) = -1),
            v15 != v16))
      {
        LOBYTE(v7) = 0;
      }
      LaunchServices::BindingEvaluation::logComparison((uint64_t)this, (uint64_t)a2, (uint64_t)a3, (uint64_t)"wildcard", (char)v7);
    }
  }
  if (!(_BYTE)v7)
  {
    uint64_t v17 = *((void *)a2 + 3);
    if (v17)
    {
      uint64_t v18 = *((void *)a3 + 3);
      if (v18)
      {
        int v19 = *(__int16 *)(v17 + 12);
        int v20 = *(__int16 *)(v18 + 12);
        if (v19 > v20)
        {
          LOBYTE(v7) = 1;
LABEL_32:
          LaunchServices::BindingEvaluation::logComparison((uint64_t)this, (uint64_t)a2, (uint64_t)a3, (uint64_t)"handler rank", (char)v7);
          goto LABEL_33;
        }
        if (v19 < v20)
        {
          LOBYTE(v7) = -1;
          goto LABEL_32;
        }
      }
    }
    LOBYTE(v7) = 0;
    goto LABEL_32;
  }
LABEL_33:
  if (!(_BYTE)v7)
  {
    if (*((unsigned char *)a3 + 48)) {
      BOOL v21 = *((unsigned char *)a2 + 48) != 0;
    }
    else {
      BOOL v21 = 1;
    }
    int v22 = v21 - 1;
    if (*((unsigned char *)a2 + 48) != 0 && *((unsigned char *)a3 + 48) == 0) {
      int v7 = 1;
    }
    else {
      int v7 = v22;
    }
    LaunchServices::BindingEvaluation::logComparison((uint64_t)this, (uint64_t)a2, (uint64_t)a3, (uint64_t)"legacy claim", v7);
  }
  if (!(_BYTE)v7)
  {
    unsigned int v23 = LaunchServices::BindingEvaluation::compareDirectoryClasses(LaunchServices::BindingEvaluation::State &,LaunchServices::BindingEvaluation::ExtendedBinding const&,LaunchServices::BindingEvaluation::ExtendedBinding const&)::priority[*(unsigned __int8 *)(*((void *)a2 + 1) + 148)];
    unsigned int v24 = LaunchServices::BindingEvaluation::compareDirectoryClasses(LaunchServices::BindingEvaluation::State &,LaunchServices::BindingEvaluation::ExtendedBinding const&,LaunchServices::BindingEvaluation::ExtendedBinding const&)::priority[*(unsigned __int8 *)(*((void *)a3 + 1) + 148)];
    BOOL v25 = v23 >= v24;
    BOOL v26 = v23 > v24;
    if (v25) {
      int v7 = v26;
    }
    else {
      int v7 = -1;
    }
    LaunchServices::BindingEvaluation::logComparison((uint64_t)this, (uint64_t)a2, (uint64_t)a3, (uint64_t)"dir class", v7);
  }
  if ((*((unsigned char *)this + 116) & 0x40) == 0)
  {
    if (!(_BYTE)v7)
    {
      int v27 = LaunchServices::BindingEvaluation::compareVendors((uint64_t)a2, (uint64_t)a3);
      LOBYTE(v7) = v27;
      LaunchServices::BindingEvaluation::logComparison((uint64_t)this, (uint64_t)a2, (uint64_t)a3, (uint64_t)"is Apple", v27);
    }
    if (!(_BYTE)v7)
    {
      int v28 = LaunchServices::BindingEvaluation::compareBundleClass((uint64_t)a2, (uint64_t)a3);
      LOBYTE(v7) = v28;
      LaunchServices::BindingEvaluation::logComparison((uint64_t)this, (uint64_t)a2, (uint64_t)a3, (uint64_t)"system placeholder", v28);
    }
  }
  if (!(_BYTE)v7)
  {
    uint64_t v29 = *((void *)a2 + 1);
    uint64_t v30 = *((void *)a3 + 1);
    if (*(_DWORD *)(v29 + 300) == *(_DWORD *)(v30 + 300))
    {
      long long v31 = *(_OWORD *)(v29 + 44);
      v48[0] = *(_OWORD *)(v29 + 28);
      v48[1] = v31;
      long long v32 = *(_OWORD *)(v30 + 44);
      v47[0] = *(_OWORD *)(v30 + 28);
      v47[1] = v32;
      uint64_t v33 = _LSVersionNumberCompare(v48, v47);
      if (v33 == -1) {
        char v34 = -1;
      }
      else {
        char v34 = 0;
      }
      if (v33 == 1) {
        LOBYTE(v7) = 1;
      }
      else {
        LOBYTE(v7) = v34;
      }
    }
    else
    {
      LOBYTE(v7) = 0;
    }
    LaunchServices::BindingEvaluation::logComparison((uint64_t)this, (uint64_t)a2, (uint64_t)a3, (uint64_t)"bundle version", (char)v7);
  }
  if (!(_BYTE)v7)
  {
    int v35 = (void *)_CSStringCopyCFString();
    uint64_t v36 = _CSStringCopyCFString();
    uint64_t v37 = (void *)v36;
    if (v35) {
      BOOL v38 = v36 == 0;
    }
    else {
      BOOL v38 = 1;
    }
    if (v38)
    {
      LOBYTE(v7) = 0;
    }
    else
    {
      uint64_t v39 = [v35 compare:v36];
      if (v39 == -1) {
        LOBYTE(v7) = -1;
      }
      else {
        LOBYTE(v7) = v39 == 1;
      }
    }

    LaunchServices::BindingEvaluation::logComparison((uint64_t)this, (uint64_t)a2, (uint64_t)a3, (uint64_t)"desperation (bundle ID)", (char)v7);
  }
  if (!(_BYTE)v7)
  {
    id v40 = LaunchServices::BindingEvaluation::getBindingPath((void ***)this, a2, v8);
    uint64_t v42 = LaunchServices::BindingEvaluation::getBindingPath((void ***)this, a3, v41);
    id v43 = (void *)v42;
    LOBYTE(v7) = 0;
    if (v40 && v42)
    {
      uint64_t v44 = [v40 caseInsensitiveCompare:v42];
      if (v44 == 1) {
        char v45 = -1;
      }
      else {
        char v45 = 0;
      }
      if (v44 == -1) {
        LOBYTE(v7) = 1;
      }
      else {
        LOBYTE(v7) = v45;
      }
    }

    LaunchServices::BindingEvaluation::logComparison((uint64_t)this, (uint64_t)a2, (uint64_t)a3, (uint64_t)"last resort", (char)v7);
  }
  return (char)v7;
}

void sub_182997DCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void LaunchServices::BindingEvaluation::logComparison(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  char v5 = a5;
  switch(a5)
  {
    case -1:
      uint64_t v10 = 60;
      break;
    case 0:
      return;
    case 1:
      uint64_t v10 = 62;
      break;
    default:
      uint64_t v10 = 63;
      break;
  }
  uint64_t v11 = [[_LSBindingForLog alloc] initWithState:a1 binding:a2];
  int v12 = [[_LSBindingForLog alloc] initWithState:a1 binding:a3];
  LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"%s: %@ %c %@", v13, a4, v11, v10, v12);

  if (LaunchServices::BindingEvaluation::gIsReasonTrackingEnabled || (*(unsigned char *)(a1 + 118) & 2) != 0)
  {
    uint64_t v14 = [NSString stringWithUTF8String:a4];
    int v15 = *(void **)(a2 + 80);
    *(void *)(a2 + 80) = v14;

    *(unsigned char *)(a2 + 72) = v5;
    uint64_t v16 = [NSString stringWithUTF8String:a4];
    uint64_t v17 = *(void **)(a3 + 80);
    *(void *)(a3 + 80) = v16;

    *(unsigned char *)(a3 + 72) = -v5;
  }
}

void sub_182997F20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::BindingEvaluation::compareBundleClass(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(*(void *)(a1 + 8) + 168);
  int v3 = *(_DWORD *)(*(void *)(a2 + 8) + 168);
  if (v2 == 16 && v3 != 16) {
    return -1;
  }
  if (v2 != 16 && v3 == 16) {
    return 1;
  }
  if (v2 != 14 || v3 == 14) {
    return v2 != 14 && v3 == 14;
  }
  else {
    return -1;
  }
}

uint64_t LaunchServices::BindingEvaluation::compareVendors(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && (*(unsigned char *)(v2 + 164) & 1) != 0)
  {
    uint64_t v5 = *(void *)(a2 + 8);
    return !v5 || (*(unsigned char *)(v5 + 164) & 1) == 0;
  }
  uint64_t v3 = *(void *)(a2 + 8);
  if (!v3 || (*(unsigned char *)(v3 + 164) & 1) == 0) {
    return 0;
  }
  return -1;
}

void sub_1829980B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __workspaceObserverInterface_block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1ECB50E68];
  id v1 = (void *)workspaceObserverInterface_interface;
  workspaceObserverInterface_interface = v0;

  uint64_t v2 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v3 = objc_opt_class();
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_opt_class();
  objc_msgSend(v2, "setWithObjects:", v3, v4, v5, objc_opt_class(), 0);
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  [(id)workspaceObserverInterface_interface setClasses:v6 forSelector:sel_applicationInstallsDidStart_ argumentIndex:0 ofReply:0];
  [(id)workspaceObserverInterface_interface setClasses:v6 forSelector:sel_applicationInstallsDidChange_ argumentIndex:0 ofReply:0];
  [(id)workspaceObserverInterface_interface setClasses:v6 forSelector:sel_applicationInstallsDidUpdateIcon_ argumentIndex:0 ofReply:0];
  [(id)workspaceObserverInterface_interface setClasses:v6 forSelector:sel_applicationsWillInstall_ argumentIndex:0 ofReply:0];
  [(id)workspaceObserverInterface_interface setClasses:v6 forSelector:sel_applicationsDidInstall_ argumentIndex:0 ofReply:0];
  [(id)workspaceObserverInterface_interface setClasses:v6 forSelector:sel_pluginsDidInstall_ argumentIndex:0 ofReply:0];
  [(id)workspaceObserverInterface_interface setClasses:v6 forSelector:sel_applicationsWillUninstall_ argumentIndex:0 ofReply:0];
  [(id)workspaceObserverInterface_interface setClasses:v6 forSelector:sel_pluginsWillUninstall_ argumentIndex:0 ofReply:0];
  [(id)workspaceObserverInterface_interface setClasses:v6 forSelector:sel_applicationsDidUninstall_ argumentIndex:0 ofReply:0];
  [(id)workspaceObserverInterface_interface setClasses:v6 forSelector:sel_pluginsDidUninstall_ argumentIndex:0 ofReply:0];
  [(id)workspaceObserverInterface_interface setClasses:v6 forSelector:sel_applicationsDidFailToInstall_ argumentIndex:0 ofReply:0];
  [(id)workspaceObserverInterface_interface setClasses:v6 forSelector:sel_applicationsDidFailToUninstall_ argumentIndex:0 ofReply:0];
  [(id)workspaceObserverInterface_interface setClasses:v6 forSelector:sel_applicationStateDidChange_ argumentIndex:0 ofReply:0];
  [(id)workspaceObserverInterface_interface setClasses:v6 forSelector:sel_applicationIconDidChange_ argumentIndex:0 ofReply:0];
  [(id)workspaceObserverInterface_interface setClasses:v6 forSelector:sel_applicationInstallsArePrioritized_arePaused_ argumentIndex:0 ofReply:0];
  [(id)workspaceObserverInterface_interface setClasses:v6 forSelector:sel_applicationInstallsArePrioritized_arePaused_ argumentIndex:1 ofReply:0];
  [(id)workspaceObserverInterface_interface setClasses:v6 forSelector:sel_applicationInstallsDidPause_ argumentIndex:0 ofReply:0];
  [(id)workspaceObserverInterface_interface setClasses:v6 forSelector:sel_applicationInstallsDidResume_ argumentIndex:0 ofReply:0];
  [(id)workspaceObserverInterface_interface setClasses:v6 forSelector:sel_applicationInstallsDidCancel_ argumentIndex:0 ofReply:0];
  [(id)workspaceObserverInterface_interface setClasses:v6 forSelector:sel_applicationInstallsDidPrioritize_ argumentIndex:0 ofReply:0];
  [(id)workspaceObserverInterface_interface setClasses:v6 forSelector:sel_applicationsDidChangePersonas_ argumentIndex:0 ofReply:0];
}

void sub_18299962C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _FSNodeGetClasses()
{
  uint64_t v0 = [(id)__LSDefaultsGetSharedInstance() classesWithNameForXCTests:"FSNode"];
  if (!v0)
  {
    uint64_t v0 = [MEMORY[0x1E4F1CAD0] setWithObject:objc_opt_class()];
  }

  return v0;
}

void sub_182999880(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id XNSGetPropertyListClasses()
{
  if (XNSGetPropertyListClasses_once != -1) {
    dispatch_once(&XNSGetPropertyListClasses_once, &__block_literal_global_19);
  }
  uint64_t v0 = (void *)XNSGetPropertyListClasses_result;

  return v0;
}

void sub_182999B48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182999E1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18299A028(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_recursive_lock_unlock();
  objc_exception_rethrow();
}

void sub_18299A088(_Unwind_Exception *a1)
{
}

void sub_18299A120(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id LaunchServices::Record::getNullPlaceholder(LaunchServices::Record *this)
{
  if (LaunchServices::Record::getNullPlaceholder(void)::once != -1) {
    dispatch_once(&LaunchServices::Record::getNullPlaceholder(void)::once, &__block_literal_global_245);
  }
  id v1 = (void *)LaunchServices::Record::getNullPlaceholder(void)::result;

  return v1;
}

uint64_t LaunchServices::Record::checkForExfiltrationRisk(LaunchServices::Record *this, NSCoder *a2)
{
  if (LaunchServices::Record::checkForExfiltrationRisk(NSCoder *)::once != -1) {
    dispatch_once(&LaunchServices::Record::checkForExfiltrationRisk(NSCoder *)::once, &__block_literal_global_236);
  }
  if (LaunchServices::Record::checkForExfiltrationRisk(NSCoder *)::isSafeToSendData) {
    return 0;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return 0;
  }
  uint64_t v3 = [(LaunchServices::Record *)this connection];
  uint64_t v4 = [v3 _xpcConnection];

  if (_LSXPCConnectionMayMapDatabase(v4) || _LSIsXPCConnectionPlatformBinary(v4))
  {
    uint64_t v5 = 0;
  }
  else
  {
    __LAUNCH_SERVICES_CLIENT_MAY_BE_EXFILTRATING_PRIVACY_SENSITIVE_INFORMATION__();
    uint64_t v5 = 1;
  }

  return v5;
}

void sub_18299A2B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18299A474(void *exc_buf)
{
}

void sub_18299A4D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_18299A6B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSIsKindOfClasses(void *a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v4 = a2;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v13;
    while (2)
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v13 != v7) {
          objc_enumerationMutation(v4);
        }
        if (objc_opt_isKindOfClass())
        {

          char isKindOfClass = 1;
          goto LABEL_15;
        }
        ++v8;
      }
      while (v6 != v8);
      uint64_t v6 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }

  if (_LSClassListContainsBundleRecord(v4))
  {
    uint64_t v9 = _LSDefaultLog();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
      _LSIsKindOfClasses_cold_1(v9);
    }

    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
  }
  else
  {
    char isKindOfClass = 0;
  }
LABEL_15:

  return isKindOfClass & 1;
}

uint64_t _LSClassListContainsBundleRecord(void *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v1 = a1;
  uint64_t v2 = [v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v2)
  {
    uint64_t v3 = *(void *)v9;
    while (2)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v9 != v3) {
          objc_enumerationMutation(v1);
        }
        uint64_t v5 = *(__objc2_class **)(*((void *)&v8 + 1) + 8 * i);
        if (v5 == LSRecord || v5 == LSBundleRecord)
        {
          uint64_t v2 = 1;
          goto LABEL_14;
        }
      }
      uint64_t v2 = [v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
LABEL_14:

  return v2;
}

uint64_t _LSIsDictionaryWithKeysAndValuesOfClasses(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  unint64_t v6 = a2;
  unint64_t v7 = a3;
  uint64_t v15 = 0;
  uint64_t v16 = &v15;
  uint64_t v17 = 0x2020000000;
  char v18 = 1;
  if (!v5)
  {
    long long v8 = &v18;
LABEL_7:
    *long long v8 = 0;
    goto LABEL_8;
  }
  if ((_NSIsNSDictionary() & 1) == 0)
  {
    long long v8 = (char *)(v16 + 3);
    goto LABEL_7;
  }
  if (v6 | v7)
  {
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    v11[2] = ___LSIsDictionaryWithKeysAndValuesOfClasses_block_invoke;
    v11[3] = &unk_1E5230F00;
    id v12 = (id)v6;
    id v13 = (id)v7;
    long long v14 = &v15;
    [v5 enumerateKeysAndObjectsUsingBlock:v11];
  }
LABEL_8:
  uint64_t v9 = *((unsigned __int8 *)v16 + 24);
  _Block_object_dispose(&v15, 8);

  return v9;
}

void sub_18299AF2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _LSDecodeURLPropertyDictionary(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 objectForKeyedSubscript:*MEMORY[0x1E4F1CD90]];

  if (v2)
  {
    uint64_t v3 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA60]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    v7[2] = ___LSDecodeURLPropertyDictionary_block_invoke;
    v7[3] = &unk_1E522DB20;
    id v4 = v3;
    id v8 = v4;
    [v1 enumerateKeysAndObjectsUsingBlock:v7];
    uint64_t v5 = [v4 copy];

    id v1 = (id)v5;
  }

  return v1;
}

void sub_18299B04C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_18299B538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t _LSIsArrayWithValuesOfClasses(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = _LSIsSequenceOfClassWithValuesOfClasses(v4, v5, v3);

  return v6;
}

uint64_t _LSIsSetWithValuesOfClass(void *a1, void *a2)
{
  id v3 = a1;
  uint64_t v6 = a2;
  if (a2) {
    a2 = (void *)[objc_alloc(MEMORY[0x1E4F1CAD0]) initWithObjects:&v6 count:1];
  }
  uint64_t v4 = _LSIsSetWithValuesOfClasses(v3, a2);

  return v4;
}

uint64_t _LSIsSetWithValuesOfClasses(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = _LSIsSequenceOfClassWithValuesOfClasses(v4, v5, v3);

  return v6;
}

uint64_t _LSIsSequenceOfClassWithValuesOfClasses(void *a1, uint64_t a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a3;
  if (v5 && (!a2 || (objc_opt_isKindOfClass() & 1) != 0))
  {
    if (v6)
    {
      long long v16 = 0u;
      long long v17 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      id v7 = v5;
      uint64_t v8 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
      if (v8)
      {
        uint64_t v9 = v8;
        uint64_t v10 = *(void *)v15;
        while (2)
        {
          uint64_t v11 = 0;
          do
          {
            if (*(void *)v15 != v10) {
              objc_enumerationMutation(v7);
            }
            if (!_LSIsKindOfClasses(*(void **)(*((void *)&v14 + 1) + 8 * v11), v6))
            {
              uint64_t v12 = 0;
              goto LABEL_16;
            }
            ++v11;
          }
          while (v9 != v11);
          uint64_t v9 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
          if (v9) {
            continue;
          }
          break;
        }
      }
      uint64_t v12 = 1;
LABEL_16:
    }
    else
    {
      uint64_t v12 = 1;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }

  return v12;
}

id _LSURLPropertyProviderAllKeys()
{
  if (_LSURLPropertyProviderAllKeys::onceToken != -1) {
    dispatch_once(&_LSURLPropertyProviderAllKeys::onceToken, &__block_literal_global_78);
  }
  uint64_t v0 = (void *)_LSURLPropertyProviderAllKeys::result;

  return v0;
}

BOOL _LSURLPropertiesNeedReplacement(void *a1)
{
  id v1 = [a1 objectForKeyedSubscript:*MEMORY[0x1E4F1CD90]];
  BOOL v2 = v1 != 0;

  return v2;
}

id _LSResolveRemoteURLPropertiesWithMimic(void *a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  uint64_t v10 = [v7 URL];
  objc_msgSend(v10, "ls_setPreferredLocalizations:", v8);
  [v10 setTemporaryResourceValue:v7 forKey:@"_LSMimicKey"];
  uint64_t v11 = [v9 allObjects];
  uint64_t v12 = [v10 resourceValuesForKeys:v11 error:a4];

  [v10 removeCachedResourceValueForKey:@"_LSMimicKey"];

  return v12;
}

void sub_18299BA18(_Unwind_Exception *a1)
{
  id v6 = v5;

  _Unwind_Resume(a1);
}

void sub_18299BAC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18299BBD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18299BC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

id _LSEncodeURLPropertyDictionary(void *a1)
{
  id v1 = a1;
  BOOL v2 = [v1 objectForKeyedSubscript:*MEMORY[0x1E4F1CD90]];

  if (v2)
  {
    id v3 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA60]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    v7[2] = ___LSEncodeURLPropertyDictionary_block_invoke;
    v7[3] = &unk_1E522DB20;
    id v4 = v3;
    id v8 = v4;
    [v1 enumerateKeysAndObjectsUsingBlock:v7];
    uint64_t v5 = [v4 copy];

    id v1 = (id)v5;
  }

  return v1;
}

void sub_18299BDF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

id _LSGetURLPropertyClasses()
{
  void v7[4] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = XNSGetPropertyListClasses();
  v7[0] = objc_opt_class();
  v7[1] = objc_opt_class();
  v7[2] = objc_opt_class();
  v7[3] = objc_opt_class();
  id v1 = [MEMORY[0x1E4F1C978] arrayWithObjects:v7 count:4];
  BOOL v2 = [v0 setByAddingObjectsFromArray:v1];

  id UTTypeClass = LaunchServices::URLPropertyProvider::getUTTypeClass(v3);
  if (UTTypeClass)
  {
    uint64_t v5 = [v2 setByAddingObject:UTTypeClass];

    BOOL v2 = (void *)v5;
  }

  return v2;
}

void sub_18299BF38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL28_LSIsClaimedPackageExtensionP9LSContextPK10__CFString_block_invoke(uint64_t result, uint64_t a2, int a3, unsigned char *a4)
{
  if ((a3 & 3) == 2 && (a3 & 0xFFFFFFFC) != 0)
  {
    uint64_t v6 = result;
    uint64_t result = _LSClaimGet();
    if (result)
    {
      if ((*(unsigned char *)(result + 8) & 8) != 0)
      {
        *(unsigned char *)(*(void *)(*(void *)(v6 + 32) + 8) + 24) = 1;
        *a4 = 1;
      }
    }
  }
  return result;
}

void __Block_byref_object_dispose__131(uint64_t a1)
{
}

void __destroy_helper_block_ea8_48c14_ZTS9LSContext(uint64_t a1)
{
}

void sub_18299C740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_18299C8F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18299C9D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18299CA4C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18299CC10(_Unwind_Exception *exception_object)
{
}

void sub_18299CD40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18299CE10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_18299D010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  os_unfair_lock_unlock(v25);
  os_unfair_lock_unlock(v26);

  _Unwind_Resume(a1);
}

void LaunchServices::PerThreadContext::releaseDatabase(LaunchServices::PerThreadContext *this)
{
  BOOL v2 = *(void **)this;
  *(void *)this = 0;

  if (!*((void *)this + 1))
  {
    uint64_t v3 = _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -10813, (uint64_t)"releaseDatabase", 60, MEMORY[0x1E4F1CC08]);
    id v4 = (void *)*((void *)this + 1);
    *((void *)this + 1) = v3;
  }
}

id LaunchServices::PerThreadContext::getDatabase(id *a1, void *a2)
{
  LaunchServices::PerThreadContext::initialize((LaunchServices::PerThreadContext *)a1);
  id v4 = *a1;
  if (a2 && !v4)
  {
    *a2 = a1[1];
    id v4 = *a1;
  }

  return v4;
}

void LaunchServices::PerThreadContext::initialize(LaunchServices::PerThreadContext *this)
{
  if (!*((unsigned char *)this + 17))
  {
    unint64_t v2 = _LSServer_SelfSessionKey();
    id v7 = 0;
    id v3 = _LSCopyLocalDatabase(v2, &v7);
    id v4 = v7;
    uint64_t v5 = *(void **)this;
    *(void *)this = v3;

    uint64_t v6 = (void *)*((void *)this + 1);
    *((void *)this + 1) = v4;

    *((unsigned char *)this + 17) = 1;
  }
}

uint64_t _LSServer_SelfSessionKey()
{
  if ([(id)__LSDefaultsGetSharedInstance() isLightweightSystemServer]) {
    return 0x100000000;
  }
  else {
    return _CFGetEUID();
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::__unordered_map_hasher<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::hash<_opaque_pthread_t *>,std::equal_to<_opaque_pthread_t *>,true>,std::__unordered_map_equal<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::equal_to<_opaque_pthread_t *>,std::hash<_opaque_pthread_t *>,true>,std::allocator<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>>>::__erase_unique<_opaque_pthread_t *>(void *a1, void *a2)
{
  uint64_t result = std::__hash_table<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::__unordered_map_hasher<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::hash<_opaque_pthread_t *>,std::equal_to<_opaque_pthread_t *>,true>,std::__unordered_map_equal<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::equal_to<_opaque_pthread_t *>,std::hash<_opaque_pthread_t *>,true>,std::allocator<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>>>::find<_opaque_pthread_t *>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::__unordered_map_hasher<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::hash<_opaque_pthread_t *>,std::equal_to<_opaque_pthread_t *>,true>,std::__unordered_map_equal<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::equal_to<_opaque_pthread_t *>,std::hash<_opaque_pthread_t *>,true>,std::allocator<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::__unordered_map_hasher<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::hash<_opaque_pthread_t *>,std::equal_to<_opaque_pthread_t *>,true>,std::__unordered_map_equal<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::equal_to<_opaque_pthread_t *>,std::hash<_opaque_pthread_t *>,true>,std::allocator<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>>>::erase(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::__unordered_map_hasher<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::hash<_opaque_pthread_t *>,std::equal_to<_opaque_pthread_t *>,true>,std::__unordered_map_equal<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::equal_to<_opaque_pthread_t *>,std::hash<_opaque_pthread_t *>,true>,std::allocator<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>>>::remove(a1, a2, (uint64_t)&__p);
  id v3 = __p;
  __p = 0;
  if (v3) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,void *>>>::operator()[abi:nn180100]((uint64_t)&v6, v3);
  }
  return v2;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,void *>>>::operator()[abi:nn180100](uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    id v3 = (std::__shared_weak_count *)__p[4];
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void std::__shared_weak_count::__release_shared[abi:nn180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void std::__shared_ptr_emplace<LaunchServices::PerThreadContext>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
}

void *std::__hash_table<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::__unordered_map_hasher<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::hash<_opaque_pthread_t *>,std::equal_to<_opaque_pthread_t *>,true>,std::__unordered_map_equal<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::equal_to<_opaque_pthread_t *>,std::hash<_opaque_pthread_t *>,true>,std::allocator<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>>>::remove@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  uint64_t v6 = *(void **)(*result + 8 * v4);
  do
  {
    id v7 = v6;
    uint64_t v6 = (void *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0;
  }
  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*result + 8 * v11) = v7;
      uint64_t v10 = *a2;
    }
  }
  *id v7 = v10;
  *a2 = 0;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = result + 2;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_18299D638(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::__unordered_map_hasher<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::hash<_opaque_pthread_t *>,std::equal_to<_opaque_pthread_t *>,true>,std::__unordered_map_equal<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::equal_to<_opaque_pthread_t *>,std::hash<_opaque_pthread_t *>,true>,std::allocator<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>>>::__emplace_unique_key_args<_opaque_pthread_t *,std::piecewise_construct_t const&,std::tuple<_opaque_pthread_t *&&>,std::tuple<std::shared_ptr<LaunchServices::PerThreadContext>&&>>(uint64_t a1, void *a2, uint64_t a3, void **a4, uint64_t *a5)
{
  unint64_t v9 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v10 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v9 >> 47) ^ v9);
  unint64_t v11 = 0x9DDFEA08EB382D69 * (v10 ^ (v10 >> 47));
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v5 = 0x9DDFEA08EB382D69 * (v10 ^ (v10 >> 47));
      if (v11 >= v12) {
        unint64_t v5 = v11 % v12;
      }
    }
    else
    {
      unint64_t v5 = v11 & (v12 - 1);
    }
    long long v14 = *(void ***)(*(void *)a1 + 8 * v5);
    if (v14)
    {
      long long v15 = (char *)*v14;
      if (*v14)
      {
        do
        {
          unint64_t v16 = *((void *)v15 + 1);
          if (v16 == v11)
          {
            if (*((void *)v15 + 2) == *a2) {
              return v15;
            }
          }
          else
          {
            if (v13.u32[0] > 1uLL)
            {
              if (v16 >= v12) {
                v16 %= v12;
              }
            }
            else
            {
              v16 &= v12 - 1;
            }
            if (v16 != v5) {
              break;
            }
          }
          long long v15 = *(char **)v15;
        }
        while (v15);
      }
    }
  }
  long long v17 = (void *)(a1 + 16);
  long long v15 = (char *)operator new(0x28uLL);
  *(void *)long long v15 = 0;
  *((void *)v15 + 1) = v11;
  uint64_t v18 = *a5;
  *((void *)v15 + 2) = **a4;
  *(_OWORD *)(v15 + 24) = *(_OWORD *)v18;
  *(void *)uint64_t v18 = 0;
  *(void *)(v18 + 8) = 0;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v12 || (float)(v20 * (float)v12) < v19)
  {
    BOOL v21 = 1;
    if (v12 >= 3) {
      BOOL v21 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v12);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>(a1, v24);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        unint64_t v5 = v11 % v12;
      }
      else {
        unint64_t v5 = v11;
      }
    }
    else
    {
      unint64_t v5 = (v12 - 1) & v11;
    }
  }
  uint64_t v25 = *(void *)a1;
  BOOL v26 = *(void **)(*(void *)a1 + 8 * v5);
  if (v26)
  {
    *(void *)long long v15 = *v26;
LABEL_38:
    void *v26 = v15;
    goto LABEL_39;
  }
  *(void *)long long v15 = *v17;
  *long long v17 = v15;
  *(void *)(v25 + 8 * v5) = v17;
  if (*(void *)v15)
  {
    unint64_t v27 = *(void *)(*(void *)v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v27 >= v12) {
        v27 %= v12;
      }
    }
    else
    {
      v27 &= v12 - 1;
    }
    BOOL v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_18299D8D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,void *>>>::operator()[abi:nn180100](v11, v10);
  _Unwind_Resume(a1);
}

uint64_t _LSServer_CopyLocalDatabase(void *a1)
{
  _LSServer_DatabaseExecutionContext();
  uint64_t v2 = (os_unfair_lock_s *)objc_claimAutoreleasedReturnValue();
  int8x8_t v3 = v2;
  if (v2)
  {
    -[LSDBExecutionContext assertActiveForThisThread](v2);
    uint64_t v4 = -[LSDBExecutionContext getPerThreadDatabaseWithError:](v3, a1);
  }
  else
  {
    unint64_t v5 = _LSServer_SelfSessionKey();
    uint64_t v4 = (uint64_t)_LSCopyLocalDatabase(v5, a1);
  }
  uint64_t v6 = v4;

  return v6;
}

void sub_18299D958(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSServer_DatabaseExecutionContext()
{
  uint64_t v0 = (void *)sharedContext;
  if (!sharedContext)
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    int8x8_t v3 = [NSString stringWithUTF8String:"LSDBExecutionContext *_LSServer_DatabaseExecutionContext()"];
    [v2 handleFailureInFunction:v3 file:@"LSDatabase.mm" lineNumber:268 description:@"no execution context in server?"];

    uint64_t v0 = (void *)sharedContext;
  }

  return v0;
}

void sub_18299DA0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18299DAA8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18299DB14(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18299DBD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __LAUNCH_SERVICES_IS_WAITING_FOR_THE_DATABASE_TO_FINISH_SEEDING__(void)
{
  uint64_t v0 = _LSDatabaseGetSeedingGroup();
  dispatch_group_wait(v0, 0xFFFFFFFFFFFFFFFFLL);
}

id _LSDatabaseGetSeedingGroup()
{
  if ([(id)__LSDefaultsGetSharedInstance() isServer]
    && _LSDatabaseGetSeedingGroup::once != -1)
  {
    dispatch_once(&_LSDatabaseGetSeedingGroup::once, &__block_literal_global_116);
  }
  uint64_t v0 = (void *)_LSDatabaseGetSeedingGroup::seedingGroup;

  return v0;
}

void sub_18299DE9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSCheckEntitlementForNSXPCConnection(void *a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    unint64_t v5 = [v3 valueForEntitlement:v4];
    if (v5)
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        if ([v5 compare:@"YES" options:1] && !objc_msgSend(v5, "intValue")) {
          goto LABEL_11;
        }
      }
      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0 || ![v5 integerValue]) {
          goto LABEL_11;
        }
      }
      uint64_t v6 = 1;
LABEL_14:

      goto LABEL_15;
    }
LABEL_11:
    id v7 = _LSDefaultLog();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      [v3 auditToken];
      pid_t v8 = audit_token_to_pid(&v10);
      *(_DWORD *)id buf = 134218242;
      uint64_t v12 = v8;
      __int16 v13 = 2114;
      id v14 = v4;
      _os_log_impl(&dword_182959000, v7, OS_LOG_TYPE_DEFAULT, "Connection from process %llu does not have the required entitlement %{public}@", buf, 0x16u);
    }

    uint64_t v6 = 0;
    goto LABEL_14;
  }
  uint64_t v6 = 0;
LABEL_15:

  return v6;
}

void sub_18299E090(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18299E1C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id LaunchServices::LSStatePlist::read(uint64_t a1, void *a2)
{
  id v4 = (os_unfair_lock_s *)(a1 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
  uint64_t v6 = LaunchServices::LSStatePlist::loadIfNeeded((void *)a1, v5, a2);
  os_unfair_lock_unlock(v4);

  return v6;
}

void sub_18299E23C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

id LaunchServices::LSStatePlist::loadIfNeeded(void *a1, uint64_t a2, void *a3)
{
  v12[1] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (id *)(a1 + 6);
  id v4 = (id)a1[6];
  if (!v4)
  {
    id v7 = [MEMORY[0x1E4F1C9B8] dataWithContentsOfURL:*a1 options:0 error:a3];
    if (v7)
    {
      pid_t v8 = [MEMORY[0x1E4F28F98] propertyListWithData:v7 options:0 format:0 error:a3];
      if (v8)
      {
        if (std::function<BOOL ()(objc_object *)>::operator()((uint64_t)(a1 + 2), v8))
        {
          objc_storeStrong(v5, v8);
        }
        else if (a3)
        {
          uint64_t v11 = *MEMORY[0x1E4F28228];
          v12[0] = @"parsed plist failed validation";
          unint64_t v9 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v12 forKeys:&v11 count:1];
          _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F281F8], 4864, (uint64_t)"loadIfNeeded", 22, v9);
          *a3 = (id)objc_claimAutoreleasedReturnValue();
        }
      }
    }
    id v4 = *v5;
  }

  return v4;
}

void sub_18299E3BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18299E484(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18299E704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18299E940(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id UMUserManagerFunction(void)
{
  return (id)classUMUserManager;
}

{
  return (id)classUMUserManager;
}

{
  return (id)classUMUserManager;
}

void sub_18299F068(_Unwind_Exception *a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);

  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)va);
  _Unwind_Resume(a1);
}

void sub_18299F2C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id UMUserPersonaFunction(void)
{
  return (id)classUMUserPersona;
}

void sub_18299F4EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t _LSCopyBundleURLForXPCConnection(void *a1, int a2)
{
  id v3 = a1;
  if (v3)
  {
    xpc_connection_get_audit_token();
    uint64_t v4 = _LSCopyBundleURLForAuditToken(&v6, a2);
  }
  else
  {
    uint64_t v4 = 0;
  }

  return v4;
}

void sub_18299F56C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18299F5FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t _LSCopyBundleURLForAuditToken(_OWORD *a1, int a2)
{
  if (!a1) {
    return 0;
  }
  if (a2 != 1) {
    goto LABEL_6;
  }
  if ([(id)__LSDefaultsGetSharedInstance() isServer]) {
    goto LABEL_6;
  }
  pid_t v3 = getpid();
  pid_t pidp = 0;
  long long v4 = a1[1];
  *(_OWORD *)atoken.val = *a1;
  *(_OWORD *)&atoken.val[4] = v4;
  audit_token_to_au32(&atoken, 0, 0, 0, 0, 0, &pidp, 0, 0);
  if (v3 != pidp || (_LSGetMainBundleURL(), (uint64_t v5 = objc_claimAutoreleasedReturnValue()) == 0))
  {
LABEL_6:
    CFURLRef v6 = _LSCopyExecutableURLForAuditToken();
    if (v6)
    {
      CFURLRef v7 = v6;
      CFURLRef v8 = (const __CFURL *)_CFBundleCopyBundleURLForExecutableURL();
      CFURLRef v9 = v8;
      if (v8)
      {
        CFStringRef v10 = CFURLCopyPathExtension(v8);
        CFStringRef v11 = v10;
        if (v10)
        {
          if (CFStringGetLength(v10) <= 0)
          {
            CFRelease(v11);
          }
          else
          {
            uint64_t v5 = (uint64_t)CFRetain(v9);
            CFRelease(v11);
            if (v5) {
              goto LABEL_15;
            }
          }
        }
      }
      uint64_t v5 = (uint64_t)CFRetain(v7);
      if (!v9)
      {
LABEL_16:
        CFRelease(v7);
        return v5;
      }
LABEL_15:
      CFRelease(v9);
      goto LABEL_16;
    }
    return 0;
  }
  return v5;
}

void sub_18299F740(_Unwind_Exception *a1)
{
  CFRelease(v3);
  CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

CFURLRef _LSCopyExecutableURLForAuditToken()
{
  uint64_t v0 = (_OWORD *)MEMORY[0x1F4188790]();
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (!v0) {
    return 0;
  }
  long long v1 = v0[1];
  *(_OWORD *)v6.val = *v0;
  *(_OWORD *)&v6.val[4] = v1;
  if (proc_pidpath_audittoken(&v6, buffer, 0x1000u) < 1) {
    return 0;
  }
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFStringRef v3 = CFStringCreateWithFileSystemRepresentation((CFAllocatorRef)*MEMORY[0x1E4F1CF80], buffer);
  if (!v3) {
    return 0;
  }
  CFURLRef v4 = CFURLCreateWithFileSystemPath(v2, v3, kCFURLPOSIXPathStyle, 0);
  CFRelease(v3);
  return v4;
}

void sub_18299F864(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

id _LSGetMainBundleURL()
{
  if (_LSGetMainBundleURL::once != -1) {
    dispatch_once(&_LSGetMainBundleURL::once, &__block_literal_global_38_0);
  }
  uint64_t v0 = (void *)_LSGetMainBundleURL::result;

  return v0;
}

void sub_18299F98C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSPluginFindWithInfo(void *a1, const __CFString *a2, const __CFString *a3, char a4, void *a5, _DWORD *a6, void *a7)
{
  return _LSPluginFindWithPlatformInfo(a1, a2, a3, a4, a5, 0, a6, a7);
}

CFURLRef _LSCopyExecutableURLForXPCConnection(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    xpc_connection_get_audit_token();
    CFURLRef v2 = _LSCopyExecutableURLForAuditToken();
  }
  else
  {
    CFURLRef v2 = 0;
  }

  return v2;
}

void sub_18299FA18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSCheckEntitlementForXPCConnection(void *a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  CFStringRef v3 = a1;
  CFURLRef v4 = v3;
  if (!v3)
  {
LABEL_7:
    uint64_t v5 = 0;
    goto LABEL_8;
  }
  if (!_LSCheckEntitlementForXPCConnectionQuiet(v3, a2))
  {
    audit_token_t v6 = _LSDefaultLog();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 134218242;
      uint64_t pid = xpc_connection_get_pid(v4);
      __int16 v10 = 2114;
      CFStringRef v11 = a2;
      _os_log_impl(&dword_182959000, v6, OS_LOG_TYPE_DEFAULT, "Connection from process %llu does not have the required entitlement %{public}@", (uint8_t *)&v8, 0x16u);
    }

    goto LABEL_7;
  }
  uint64_t v5 = 1;
LABEL_8:

  return v5;
}

void sub_18299FB1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL _LSCheckEntitlementForXPCConnectionQuiet(void *a1, void *a2)
{
  id v3 = a1;
  CFURLRef v4 = v3;
  if (v3)
  {
    uint64_t v5 = _LSCopyEntitlementValueForXPCConnection(v3, a2);
    audit_token_t v6 = v5;
    if (v5) {
      BOOL v7 = _LSGetBooleanValueForEntitlementValue(v5, 0);
    }
    else {
      BOOL v7 = 0;
    }
  }
  else
  {
    BOOL v7 = 0;
  }

  return v7;
}

void sub_18299FBBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSCopyEntitlementValueForXPCConnection(void *a1, void *a2)
{
  id v3 = a1;
  CFURLRef v4 = 0;
  if (v3 && a2)
  {
    uint64_t v5 = (void *)MEMORY[0x18530F680]();
    id v6 = a2;
    if (![v6 UTF8String])
    {
      int v8 = [MEMORY[0x1E4F28B00] currentHandler];
      CFURLRef v9 = objc_msgSend(NSString, "stringWithUTF8String:", "xpc_object_t _LSCopyEntitlementValueForXPCConnection(__strong xpc_connection_t, CFStringRef)");
      [v8 handleFailureInFunction:v9, @"LSEntitlements.mm", 1003, @"Couldn't get C string from entitlement name '%@'", v6 file lineNumber description];
    }
    CFURLRef v4 = (void *)xpc_connection_copy_entitlement_value();
  }

  return v4;
}

void sub_18299FCD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18299FEA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  unint64_t v27 = v26;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1829A015C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829A0258(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id XNSArrayByMappingBlock(void *a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  CFURLRef v4 = a2;
  uint64_t v5 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v3, "count"));
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v6 = v3;
  uint64_t v7 = [v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v13 != v8) {
          objc_enumerationMutation(v6);
        }
        __int16 v10 = v4[2](v4, *(void *)(*((void *)&v12 + 1) + 8 * i));
        objc_msgSend(v5, "addObject:", v10, (void)v12);
      }
      uint64_t v7 = [v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v7);
  }

  return v5;
}

void sub_1829A03E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829A0540(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id computeIdentityBookmark(LSApplicationRecord *a1)
{
  id v1 = a1;
  CFURLRef v2 = [(LSBundleRecord *)v1 bundleIdentifier];
  [(LSBundleRecord *)v1 URL];

  return v2;
}

void sub_1829A05EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id computeIdentityString(LSApplicationRecord *a1, _LSPersonaWithAttributes *a2)
{
  id v3 = a1;
  CFURLRef v4 = a2;
  uint64_t v5 = [(LSBundleRecord *)v3 bundleIdentifier];
  id v6 = [(LSBundleRecord *)v3 URL];
  uint64_t v8 = computeIdentityString(v5, (NSURL *)v4, v7);

  return v8;
}

void sub_1829A06A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id computeIdentityString(NSString *a1, NSURL *a2, _LSPersonaWithAttributes *a3)
{
  CFURLRef v4 = a1;
  uint64_t v5 = a2;
  id v6 = objc_msgSend(NSString, "stringWithFormat:", @"{\"v\":%d,", 2);
  if (v5)
  {
    uint64_t v7 = -[_LSDatabase store]((uint64_t)v5);
    uint64_t v8 = [v6 stringByAppendingFormat:@"\"p\":\"%@\", \"pt\": %lu, ", v7, -[_LSPersonaWithAttributes personaType]((uint64_t)v5)];

    id v6 = (void *)v8;
  }
  if (v4)
  {
    id v16 = 0;
    CFURLRef v9 = [MEMORY[0x1E4F28D90] dataWithJSONObject:v4 options:4 error:&v16];
    id v10 = v16;
    if (v9)
    {
      CFStringRef v11 = (__CFString *)[[NSString alloc] initWithData:v9 encoding:4];
    }
    else
    {
      long long v12 = _LSDefaultLog();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        computeIdentityString((uint64_t)v10, v12);
      }

      CFStringRef v11 = @"\"<ERROR>\"";
    }
    uint64_t v13 = [v6 stringByAppendingFormat:@"\"b\":%@", v11];

    id v6 = (void *)v13;
  }
  else
  {
    id v10 = 0;
  }
  long long v14 = [v6 stringByAppendingString:@"}"];

  return v14;
}

void sub_1829A0884(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829A0A88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829A0C00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829A0E20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSShouldFetchContainersFromContainermanagerForPersona(void *a1, int a2, BOOL *a3)
{
  v18[1] = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  BOOL v6 = 0;
  if ([v5 count] == 1 && (a2 & 1) == 0)
  {
    uint64_t v7 = [v5 firstObject];
    uint64_t v8 = -[_LSPersonaWithAttributes personaType]((uint64_t)v7);

    BOOL v6 = (unint64_t)(v8 - 3) < 0xFFFFFFFFFFFFFFFELL;
  }
  if ((unint64_t)[v5 count] <= 1 && !a2)
  {
    CFURLRef v9 = 0;
    if (!a3) {
      goto LABEL_21;
    }
LABEL_20:
    *a3 = v6;
    goto LABEL_21;
  }
  id v10 = [(Class)getUMUserManagerClass[0]() sharedManager];
  CFStringRef v11 = [v10 currentPersona];

  if (a2
    && (([v11 isDefaultPersona] & 1) != 0 || objc_msgSend(v11, "isSystemPersona"))
    && [v5 count] == 1)
  {
    long long v12 = _LSDefaultLog();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      _LSShouldFetchContainersFromContainermanagerForPersona_cold_2(v12);
    }

    if (_os_feature_enabled_impl())
    {
      uint64_t v13 = _LSDefaultLog();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT)) {
        _LSShouldFetchContainersFromContainermanagerForPersona_cold_1(v13);
      }

      long long v14 = (void *)*MEMORY[0x1E4F28760];
      uint64_t v17 = *MEMORY[0x1E4F28228];
      v18[0] = @"Unable to find this application extension record in the Launch Services database.";
      long long v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v18 forKeys:&v17 count:1];
      CFURLRef v9 = _LSMakeNSErrorImpl(v14, -50, (uint64_t)"_LSShouldFetchContainersFromContainermanagerForPersona", 311, v15);
    }
    else
    {
      CFURLRef v9 = 0;
    }
    BOOL v6 = 0;
  }
  else
  {
    CFURLRef v9 = 0;
    BOOL v6 = 1;
  }

  if (a3) {
    goto LABEL_20;
  }
LABEL_21:

  return v9;
}

void sub_1829A1228(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSCopyRationalizedGroupContainerURLDict(void *a1)
{
  id v1 = a1;
  CFURLRef v2 = v1;
  if (!v1) {
    goto LABEL_3;
  }
  id v3 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithCapacity:", objc_msgSend(v1, "count"));
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = ___LSCopyRationalizedGroupContainerURLDict_block_invoke;
  v7[3] = &unk_1E522E018;
  id v8 = v3;
  id v4 = v3;
  [v2 enumerateKeysAndObjectsUsingBlock:v7];
  uint64_t v5 = [v4 copy];

  if (!v5) {
LABEL_3:
  }
    uint64_t v5 = MEMORY[0x1E4F1CC08];

  return v5;
}

void sub_1829A13D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSCopyRationalizedEnvironmentVariablesDict(void *a1)
{
  id v1 = a1;
  if (!v1) {
    goto LABEL_3;
  }
  CFURLRef v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA60]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = ___LSCopyRationalizedEnvironmentVariablesDict_block_invoke;
  v5[3] = &unk_1E522E018;
  id v3 = v2;
  id v6 = v3;
  [v1 enumerateKeysAndObjectsUsingBlock:v5];

  if (!v3) {
LABEL_3:
  }
    id v3 = (id)MEMORY[0x1E4F1CC08];

  return v3;
}

void sub_1829A156C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSShouldFetchContainersFromContainermanagerForPersona_cold_2(os_log_t log)
{
  *(_WORD *)id v1 = 0;
  _os_log_error_impl(&dword_182959000, log, OS_LOG_TYPE_ERROR, "No active persona/ system persona detected for system persona app", v1, 2u);
}

id UMUserManagerFunction()
{
  return (id)classUMUserManager;
}

id UMUserManagerFunction_0()
{
  return (id)classUMUserManager_0;
}

Class initUMUserManager()
{
  if (!UserManagementLibrary_frameworkLibrary) {
    UserManagementLibrary_frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/UserManagement.framework/UserManagement", 2);
  }
  Class result = objc_getClass("UMUserManager");
  classUMUserManager = (uint64_t)result;
  getUMUserManagerClass[0] = (uint64_t (*)())UMUserManagerFunction;
  return result;
}

Class initUMUserManager_0()
{
  if (!UserManagementLibrary_frameworkLibrary_0) {
    UserManagementLibrary_frameworkLibrary_0 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/UserManagement.framework/UserManagement", 2);
  }
  Class result = objc_getClass("UMUserManager");
  classUMUserManager_0 = (uint64_t)result;
  getUMUserManagerClass_0 = (uint64_t (*)())UMUserManagerFunction_0;
  return result;
}

uint64_t _LSVersionNumberGetMajorComponent(uint64_t a1)
{
  return *(void *)a1;
}

void sub_1829A1C40(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_recursive_lock_unlock();
  objc_exception_rethrow();
}

void sub_1829A1C6C(_Unwind_Exception *a1)
{
}

void sub_1829A1F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  objc_destroyWeak(v26);
  objc_destroyWeak(v25);

  objc_destroyWeak((id *)(v27 - 96));
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a17);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

atomic_uint *_LSContextAddChangeObserver(uint64_t a1, void *a2, void *a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = objc_alloc_init(_LSChangeObserver);
  uint64_t v8 = *(unsigned int *)(*(void *)a1 + 1648);
  uint64_t v9 = *(unsigned int *)(*(void *)a1 + 1652);
  uint64_t v10 = -[_LSDServiceDomain resolvedSessionKey]((uint64_t)v5);
  unint64_t v11 = v10;
  unint64_t v12 = v8 | (v9 << 32);
  if (v9)
  {
    if ((v10 & 0x100000000) != 0) {
      goto LABEL_9;
    }
  }
  else if ((v10 & 0x100000000) == 0 && v8 == v10)
  {
    goto LABEL_9;
  }
  uint64_t v13 = _LSDefaultLog();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
  {
    id v25 = (id)_LSSessionKeyCopyDescription(v12);
    BOOL v26 = (void *)_LSSessionKeyCopyDescription(v11);
    *(_DWORD *)id buf = 138412802;
    id v33 = v25;
    __int16 v34 = 2112;
    id v35 = v5;
    __int16 v36 = 2112;
    uint64_t v37 = v26;
    _os_log_fault_impl(&dword_182959000, v13, OS_LOG_TYPE_FAULT, "Adding change observer for context with session key %@ but service domain %@ implied session key %@", buf, 0x20u);
  }
LABEL_9:
  long long v14 = [(id)__LSDefaultsGetSharedInstance() databaseUpdateNotificationNameForSessionKey:v12];
  uint64_t v15 = MEMORY[0x18530F950](v6);
  id v16 = v7->block;
  v7->blocuint64_t k = (id)v15;

  v7->uid = v8;
  uint64_t v17 = _LSGetDispatchTokenQueue();
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 3221225472;
  id v29[2] = ___LSContextAddChangeObserver_block_invoke;
  v29[3] = &unk_1E522DCE8;
  uint64_t v18 = v7;
  uint64_t v30 = v18;
  id v19 = v5;
  id v31 = v19;
  LaunchServices::notifyd::NotifyToken::RegisterDispatch(v14, v17, v29, (unsigned int *)buf);
  LaunchServices::notifyd::NotifyToken::operator=(v18 + 5, (atomic_uint *)buf);
  LaunchServices::notifyd::NotifyToken::~NotifyToken((LaunchServices::notifyd::NotifyToken *)buf);

  float v20 = _LSGetDispatchTokenQueue();
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  _OWORD block[2] = ___LSContextAddChangeObserver_block_invoke_3;
  block[3] = &unk_1E522D3E8;
  BOOL v21 = v18;
  int v28 = v21;
  dispatch_barrier_async(v20, block);

  unint64_t v22 = v28;
  unint64_t v23 = v21;

  return v23;
}

void sub_1829A2334(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829A26A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id *std::vector<LSRecord * {__weak}>::__insert_with_size[abi:nn180100]<LSRecord * const*,LSRecord * const*>(uint64_t a1, id *a2, void **a3, void **a4, uint64_t a5)
{
  id v5 = a2;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v7 = a3;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    uint64_t v13 = *(id **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 3);
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = a2 - v13;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 2 > v14) {
      unint64_t v14 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    v33[4] = v9;
    if (v17) {
      uint64_t v18 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<os_eligibility_answer_t>>(v9, v17);
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v27 = (id *)&v18[8 * v15];
    v33[0] = v18;
    v33[1] = v27;
    v33[3] = &v18[8 * v17];
    uint64_t v28 = 8 * a5;
    uint64_t v29 = &v27[a5];
    do
    {
      uint64_t v30 = *v7++;
      objc_initWeak(v27++, v30);
      v28 -= 8;
    }
    while (v28);
    v33[2] = v29;
    id v5 = std::vector<LSRecord * {__weak}>::__swap_out_circular_buffer((id **)a1, v33, v5);
    std::__split_buffer<LSRecord * {__weak}>::~__split_buffer((uint64_t)v33);
    return v5;
  }
  uint64_t v19 = v12 - (void)a2;
  uint64_t v20 = (uint64_t)(v12 - (void)a2) >> 3;
  if (v20 >= a5)
  {
    BOOL v26 = &a3[a5];
LABEL_18:
    std::vector<LSRecord * {__weak}>::__move_range(a1, v5, v12, (uint64_t)&v5[a5]);
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,LSRecord * const*,LSRecord * const*,LSRecord * {__weak}*,0>(v7, v26, v5);
    return v5;
  }
  unint64_t v22 = &a3[v20];
  long long v32 = v22;
  uint64_t v23 = *(void *)(v9 - 8);
  if (v22 != a4)
  {
    size_t v24 = *(id **)(v9 - 8);
    do
    {
      id v25 = *v22++;
      objc_initWeak(v24++, v25);
      v23 += 8;
    }
    while (v22 != a4);
  }
  *(void *)(a1 + 8) = v23;
  BOOL v26 = v32;
  if (v19 >= 1) {
    goto LABEL_18;
  }
  return v5;
}

void sub_1829A2894(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<LSRecord * {__weak}>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

id *std::vector<LSRecord * {__weak}>::erase(uint64_t a1, id *a2, id *a3)
{
  if (a2 != a3)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<LSRecord * {__weak}*,LSRecord * {__weak}*,LSRecord * {__weak}*>((int)&v9, a3, *(id **)(a1 + 8), a2);
    id v6 = v5;
    uint64_t v7 = *(id **)(a1 + 8);
    if (v7 != v5)
    {
      do
        objc_destroyWeak(--v7);
      while (v7 != v6);
    }
    *(void *)(a1 + 8) = v6;
  }
  return a2;
}

id *std::remove[abi:nn180100]<std::__wrap_iter<LSRecord * {__weak}*>,decltype(nullptr)>(id *a1, id *a2)
{
  id v3 = std::__find_impl[abi:nn180100]<LSRecord * {__weak}*,LSRecord * {__weak}*,decltype(nullptr),std::__identity>(a1, a2);
  id v4 = v3 + 1;
  if (v3 != a2 && v4 != a2)
  {
    do
    {
      id WeakRetained = objc_loadWeakRetained(v4);

      if (WeakRetained)
      {
        id v7 = objc_loadWeakRetained(v4);
        objc_storeWeak(v3, v7);

        ++v3;
      }
      ++v4;
    }
    while (v4 != a2);
  }
  return v3;
}

id *std::__find_impl[abi:nn180100]<LSRecord * {__weak}*,LSRecord * {__weak}*,decltype(nullptr),std::__identity>(id *location, id *a2)
{
  CFURLRef v2 = location;
  if (location != a2)
  {
    while (1)
    {
      id WeakRetained = objc_loadWeakRetained(v2);

      if (!WeakRetained) {
        break;
      }
      if (++v2 == a2) {
        return a2;
      }
    }
  }
  return v2;
}

id *std::vector<LSRecord * {__weak}>::__swap_out_circular_buffer(id **a1, void *a2, id *from)
{
  id v3 = from;
  id v6 = (id *)a2[1];
  id v7 = *a1;
  uint64_t v8 = v6;
  if (*a1 != from)
  {
    char v9 = from;
    uint64_t v8 = (id *)a2[1];
    do
      objc_moveWeak(--v8, --v9);
    while (v9 != v7);
  }
  a2[1] = v8;
  uint64_t v10 = a1[1];
  uint64_t v11 = (id *)a2[2];
  if (v10 != v3)
  {
    do
      objc_moveWeak(v11++, v3++);
    while (v3 != v10);
    uint64_t v8 = (id *)a2[1];
  }
  a2[2] = v11;
  unint64_t v12 = *a1;
  *a1 = v8;
  a2[1] = v12;
  uint64_t v13 = a1[1];
  a1[1] = (id *)a2[2];
  a2[2] = v13;
  unint64_t v14 = a1[2];
  a1[2] = (id *)a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__split_buffer<LSRecord * {__weak}>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    objc_destroyWeak((id *)(i - 8));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1829A2C78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSDatabaseGetSessionStatus()
{
  os_unfair_recursive_lock_lock_with_options();
  LSSessionKey v0 = (LSSessionKey)_LSServer_SelfSessionKey();
  uint64_t v1 = _LSGetSession(v0);
  uint64_t v2 = ((*(unsigned char *)(v1 + 20) & 2) << 9) | ((*(unsigned char *)(v1 + 20) & 1) << 7);
  id v3 = *(id *)(v1 + 24);
  if (v3)
  {
    id v4 = v3;
    int v5 = -[_LSDatabase isSeedingComplete](*(void *)(v1 + 24));

    if (v5) {
      uint64_t v2 = v2;
    }
    else {
      uint64_t v2 = v2 | 0x200;
    }
  }
  id v6 = *(id *)(v1 + 24);
  if (v6)
  {
    id v7 = v6;
    int v8 = -[_LSDatabase isSeeded](*(void *)(v1 + 24));

    if (v8) {
      uint64_t v2 = v2 | 0x100;
    }
    else {
      uint64_t v2 = v2;
    }
  }
  os_unfair_recursive_lock_unlock();
  return v2;
}

void sub_1829A2D70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829A2FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21)
{
  LaunchServices::notifyd::NotifyToken::~NotifyToken((LaunchServices::notifyd::NotifyToken *)(v24 - 84));

  _Unwind_Resume(a1);
}

void LaunchServices::notifyd::NotifyToken::RegisterDispatch(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, unsigned int *a4@<X8>)
{
  id v7 = a1;
  int v8 = a2;
  id v9 = a3;
  *a4 = -1;
  uint64_t v10 = (void *)MEMORY[0x18530F680]();
  int out_token = -1;
  uint64_t v14 = MEMORY[0x1E4F143A8];
  uint64_t v15 = 3221225472;
  uint64_t v16 = ___ZN14LaunchServices7notifyd11NotifyToken16RegisterDispatchEP8NSStringPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvvE_block_invoke;
  unint64_t v17 = &unk_1E522FD30;
  id v11 = v9;
  id v18 = v11;
  unint64_t v12 = (void *)MEMORY[0x18530F950](&v14);
  id v13 = v7;
  if (!notify_register_dispatch((const char *)objc_msgSend(v13, "UTF8String", v14, v15, v16, v17), &out_token, v8, v12)) {
    atomic_store(out_token, a4);
  }
}

void sub_1829A3140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  LaunchServices::notifyd::NotifyToken::~NotifyToken(v14);

  _Unwind_Resume(a1);
}

void _LSServer_GetServerStoreForConnectionWithCompletionHandler(void *a1, void *a2)
{
  v27[1] = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  _LSAssertRunningInServer((uint64_t)"void _LSServer_GetServerStoreForConnectionWithCompletionHandler(NSXPCConnection *__s"
                                    "trong, void (^__strong)(__strong id, FSNode *__strong, NSError *__strong))");
  _LSServer_DatabaseExecutionContext();
  int v5 = (os_unfair_lock_s *)objc_claimAutoreleasedReturnValue();
  -[LSDBExecutionContext assertActiveForThisThread](v5);

  id v6 = [v3 _xpcConnection];
  int MayMapDatabase = _LSXPCConnectionMayMapDatabase(v6);

  if (MayMapDatabase)
  {
    id v19 = 0;
    int v8 = (void *)_LSServer_CopyLocalDatabase(&v19);
    id v9 = v19;
    if (v8 && (-[_LSDatabase isSeeded]((uint64_t)v8) & 1) != 0) {
      goto LABEL_7;
    }
    uint64_t v10 = _LSDefaultLog();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      int v16 = -[_LSDatabase isSeeded]((uint64_t)v8);
      *(_DWORD *)id buf = 138412802;
      BOOL v21 = v8;
      __int16 v22 = 1024;
      int v23 = v16;
      __int16 v24 = 2114;
      id v25 = v9;
      _os_log_error_impl(&dword_182959000, v10, OS_LOG_TYPE_ERROR, "_LSServer_CopyLocalDatabase returned db %@ (seeded? %d) error %{public}@", buf, 0x1Cu);
    }

    id v11 = (void *)os_transaction_create();
    unint64_t v12 = _LSServer_GetIOQueue();
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 3221225472;
    v17[2] = ___LSServer_GetServerStoreForConnectionWithCompletionHandler_block_invoke;
    v17[3] = &unk_1E522D3E8;
    id v18 = v11;
    id v13 = v11;
    dispatch_async(v12, v17);

    if (v8)
    {
LABEL_7:
      uint64_t v14 = v8[1];
      uint64_t v15 = _LSDatabaseGetNode((uint64_t)v8);
      v4[2](v4, v14, v15, 0);
    }
    else
    {
      ((void (**)(id, uint64_t, void *, id))v4)[2](v4, 0, 0, v9);
    }
  }
  else
  {
    uint64_t v26 = *MEMORY[0x1E4F28228];
    v27[0] = @"process may not map database";
    id v9 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v27 forKeys:&v26 count:1];
    int v8 = _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -54, (uint64_t)"_LSServer_GetServerStoreForConnectionWithCompletionHandler", 71, v9);
    ((void (**)(id, uint64_t, void *, void *))v4)[2](v4, 0, 0, v8);
  }
}

void sub_1829A3460(_Unwind_Exception *a1)
{
  id v6 = v5;

  _Unwind_Resume(a1);
}

uint64_t _LSXPCConnectionMayMapDatabase(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    xpc_connection_get_audit_token();
    uint64_t MayMapDatabase = _LSAuditTokenMayMapDatabase((uint64_t)&v4);
  }
  else
  {
    uint64_t MayMapDatabase = 0;
  }

  return MayMapDatabase;
}

void sub_1829A3540(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSAuditTokenMayMapDatabase(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    BOOL v2 = 0;
    _LSIsAuditTokenSandboxed(result, 0, &v2);
    return !v2
        || _LSCheckEntitlementForAuditTokenWithDefault(v1, @"com.apple.private.coreservices.canmaplsdatabase", 0);
  }
  return result;
}

void _LSIsAuditTokenSandboxed(uint64_t a1, unsigned char *a2, BOOL *a3)
{
  if (!a1) {
    return;
  }
  int v5 = sandbox_check_by_audit_token();
  if (v5 < 0)
  {
    if ([(id)__LSDefaultsGetSharedInstance() isServer])
    {
      int v6 = *__error();
      id v7 = _LSDefaultLog();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT)) {
        _LSIsAuditTokenSandboxed_cold_1(v6, v7);
      }
    }
  }
  else if (!v5)
  {
    if (a2) {
      *a2 = 0;
    }
    if (a3) {
      *a3 = 0;
    }
    return;
  }
  if (a2) {
    *a2 = 1;
  }
  if (a3) {
    *a3 = sandbox_container_path_for_audit_token() == 0;
  }
}

BOOL _LSCheckEntitlementForAuditTokenWithDefault(uint64_t a1, void *a2, BOOL a3)
{
  if (a1)
  {
    uint64_t v4 = _LSCopyEntitlementValueForAuditToken(a1, a2);
    int v5 = v4;
    if (v4) {
      a3 = _LSGetBooleanValueForEntitlementValue(v4, a3);
    }
  }
  return a3;
}

void sub_1829A378C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL _LSGetBooleanValueForEntitlementValue(void *a1, BOOL value)
{
  id v3 = a1;
  uint64_t v4 = v3;
  if (v3)
  {
    Class Class = object_getClass(v3);
    if (Class == (Class)MEMORY[0x1E4F14570])
    {
      value = xpc_BOOL_get_value(v4);
      goto LABEL_14;
    }
    if (Class == (Class)MEMORY[0x1E4F145C0])
    {
      uint64_t v7 = xpc_int64_get_value(v4);
    }
    else
    {
      if (Class != (Class)MEMORY[0x1E4F145F8])
      {
        if (Class != (Class)MEMORY[0x1E4F14598]) {
          goto LABEL_14;
        }
        BOOL v6 = (uint64_t)xpc_double_get_value(v4) == 0;
        goto LABEL_11;
      }
      uint64_t v7 = xpc_uint64_get_value(v4);
    }
    BOOL v6 = v7 == 0;
LABEL_11:
    value = !v6;
  }
LABEL_14:

  return value;
}

void sub_1829A3858(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSCopyEntitlementValueForAuditToken(uint64_t a1, void *a2)
{
  BOOL v2 = 0;
  if (a1 && a2)
  {
    uint64_t v4 = (void *)MEMORY[0x18530F680]();
    id v5 = a2;
    if (![v5 UTF8String])
    {
      uint64_t v7 = [MEMORY[0x1E4F28B00] currentHandler];
      int v8 = objc_msgSend(NSString, "stringWithUTF8String:", "xpc_object_t _LSCopyEntitlementValueForAuditToken(const audit_token_t *, CFStringRef)");
      [v7 handleFailureInFunction:v8, @"LSEntitlements.mm", 1020, @"Couldn't get C string from entitlement name '%@'", v5 file lineNumber description];
    }
    BOOL v2 = (void *)xpc_copy_entitlement_for_token();
  }

  return v2;
}

void sub_1829A3964(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829A3CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *std::string::basic_string[abi:nn180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    BOOL v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    BOOL v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void LSDBHeader::GetCurrentBuildVersion(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  id v3 = _LSGetCurrentSystemBuildVersionString();
  if (v3)
  {
    id v6 = v3;
    uint64_t v4 = [v3 UTF8String];
    if (v4) {
      size_t v5 = (const char *)v4;
    }
    else {
      size_t v5 = "";
    }
    MEMORY[0x18530E9D0](a1, v5);
    id v3 = v6;
  }
}

void sub_1829A3E78(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

uint64_t _LSGetCurrentSystemBuildVersionString()
{
  if (_LSGetCurrentSystemIOSSupportAndBuildVersions(LSVersionNumber *,LSVersionNumber *,__CFString const**,LSVersionNumber *,__CFString const**)::once != -1) {
    dispatch_once(&_LSGetCurrentSystemIOSSupportAndBuildVersions(LSVersionNumber *,LSVersionNumber *,__CFString const**,LSVersionNumber *,__CFString const**)::once, &__block_literal_global_80);
  }
  return _LSGetCurrentSystemIOSSupportAndBuildVersions(LSVersionNumber *,LSVersionNumber *,__CFString const**,LSVersionNumber *,__CFString const**)::cachedBuildVersion;
}

void _LSRegisterFilePropertyProvider()
{
  __p = 0;
  id v13 = 0;
  uint64_t v14 = 0;
  if (getPropertyTable(void)::onceToken != -1) {
    dispatch_once(&getPropertyTable(void)::onceToken, &__block_literal_global_14);
  }
  LSSessionKey v0 = 0;
  uint64_t v1 = *(void **)(LaunchServices::URLPropertyProvider::propertyTable + 8);
  BOOL v2 = *(void **)LaunchServices::URLPropertyProvider::propertyTable;
  do
  {
    if (v0 >= v14)
    {
      uint64_t v3 = (v0 - __p) >> 3;
      if ((unint64_t)(v3 + 1) >> 61) {
        abort();
      }
      unint64_t v4 = (v14 - __p) >> 2;
      if (v4 <= v3 + 1) {
        unint64_t v4 = v3 + 1;
      }
      if ((unint64_t)(v14 - __p) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v5 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v5 = v4;
      }
      if (v5) {
        id v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<os_eligibility_answer_t>>((uint64_t)&v14, v5);
      }
      else {
        id v6 = 0;
      }
      uint64_t v7 = &v6[8 * v3];
      *(void *)uint64_t v7 = *v2;
      LSSessionKey v0 = v7 + 8;
      uint64_t v8 = v13;
      if (v13 != __p)
      {
        do
        {
          uint64_t v9 = *((void *)v8 - 1);
          v8 -= 8;
          *((void *)v7 - 1) = v9;
          v7 -= 8;
        }
        while (v8 != __p);
        uint64_t v8 = __p;
      }
      __p = v7;
      uint64_t v14 = &v6[8 * v5];
      if (v8) {
        operator delete(v8);
      }
    }
    else
    {
      *(void *)LSSessionKey v0 = *v2;
      v0 += 8;
    }
    id v13 = v0;
    v2 += 7;
  }
  while (v2 != v1);
  MEMORY[0x18530E380](LaunchServices::URLPropertyProvider::kLSPropertyProviderCallbacks, 0);
  uint64_t v10 = *(void **)LaunchServices::URLPropertyProvider::propertyTable;
  id v11 = *(void **)(LaunchServices::URLPropertyProvider::propertyTable + 8);
  while (v10 != v11)
  {
    MEMORY[0x18530E390](*v10, v10[1], v10[5], v10[6], v10);
    v10 += 7;
  }
  if (__p) {
    operator delete(__p);
  }
}

void sub_1829A4080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

CFArrayRef _LSBundleCopyArchitecturesValidOnCurrentSystem(void *a1, int a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = _LSBundleGet(v3, a2);
  if (v4)
  {
    unint64_t v5 = (void *)MEMORY[0x18530F680]();
    CFArrayRef v6 = (const __CFArray *)_LSBundleCopyArchitectures_Common(v4);
    if (v6)
    {
      long long v18 = 0u;
      long long v19 = 0u;
      _LSGetCurrentSystemVersion(&v18);
      int v7 = _LSGetCPUType();
      _LSPlistGet((uint64_t)v3, *(_DWORD *)(v4 + 136));
      uint64_t v8 = (NSData *)objc_claimAutoreleasedReturnValue();
      uint64_t v9 = _LSPlistDataGetValueForKey(v8, @"LSMinimumSystemVersionByArchitecture", 0);

      if (v9 && (_NSIsNSDictionary() & 1) == 0)
      {

        uint64_t v9 = 0;
      }
      CFArrayRef MutableCopy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v6);
      CFRelease(v6);
      CFIndex Count = CFArrayGetCount(MutableCopy);
      if (Count >= 1)
      {
        for (unint64_t i = Count + 1; i > 1; --i)
        {
          int ValueAtIndex = CFArrayGetValueAtIndex(MutableCopy, i - 2);
          if (!v9
            || (long long v16 = 0u,
                long long v17 = 0u,
                _LSGetVersionForArchitecture((const __CFDictionary *)v9, ValueAtIndex, &v16),
                v21[0] = v16,
                v21[1] = v17,
                v20[0] = v18,
                v20[1] = v19,
                _LSVersionNumberCompare(v21, v20) != 1))
          {
            if (!CFEqual(ValueAtIndex, @"ppc") && !CFEqual(ValueAtIndex, @"ppc64"))
            {
              switch(v7)
              {
                case 12:
                  if (CFEqual(ValueAtIndex, @"armv6")) {
                    continue;
                  }
                  int v14 = CFEqual(ValueAtIndex, @"armv7");
                  goto LABEL_25;
                case 16777228:
                  if (CFEqual(ValueAtIndex, @"armv6") || CFEqual(ValueAtIndex, @"armv7")) {
                    continue;
                  }
                  int v14 = CFEqual(ValueAtIndex, @"arm64");
LABEL_25:
                  if (v14) {
                    continue;
                  }
                  break;
                case 16777223:
                  if (CFEqual(ValueAtIndex, @"i386")) {
                    continue;
                  }
                  int v14 = CFEqual(ValueAtIndex, @"x86_64");
                  goto LABEL_25;
              }
            }
          }
          CFArrayRemoveValueAtIndex(MutableCopy, i - 2);
        }
      }
    }
    else
    {
      CFArrayRef MutableCopy = 0;
    }
  }
  else
  {
    CFArrayRef MutableCopy = 0;
  }

  return MutableCopy;
}

void sub_1829A4370(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double _LSGetCurrentSystemVersion@<D0>(_OWORD *a1@<X8>)
{
  if (_LSGetCurrentSystemIOSSupportAndBuildVersions(LSVersionNumber *,LSVersionNumber *,__CFString const**,LSVersionNumber *,__CFString const**)::once != -1) {
    dispatch_once(&_LSGetCurrentSystemIOSSupportAndBuildVersions(LSVersionNumber *,LSVersionNumber *,__CFString const**,LSVersionNumber *,__CFString const**)::once, &__block_literal_global_80);
  }
  double result = *(double *)&_LSGetCurrentSystemIOSSupportAndBuildVersions(LSVersionNumber *,LSVersionNumber *,__CFString const**,LSVersionNumber *,__CFString const**)::cachedSystemVersion;
  long long v3 = unk_1EB20D820;
  *a1 = _LSGetCurrentSystemIOSSupportAndBuildVersions(LSVersionNumber *,LSVersionNumber *,__CFString const**,LSVersionNumber *,__CFString const**)::cachedSystemVersion;
  a1[1] = v3;
  return result;
}

id _LSBundleCopyArchitectures_Common(uint64_t a1)
{
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  uint64_t v14 = 0;
  uint64_t v15 = &v14;
  uint64_t v16 = 0x4812000000;
  long long v17 = __Block_byref_object_copy__9;
  long long v18 = __Block_byref_object_dispose__9;
  long long v19 = &unk_182B5933F;
  BOOL v21 = 0;
  uint64_t v22 = 0;
  __p = 0;
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  v13[2] = ___ZL33_LSBundleCopyArchitectures_CommonPK12LSBundleDataP7NSArrayIP8NSStringE_block_invoke;
  v13[3] = &unk_1E522D750;
  void v13[4] = &v14;
  _LSEnumerateSliceMask(*(_WORD *)(a1 + 156), v13);
  uint64_t v3 = v15[6];
  uint64_t v4 = (uint64_t *)v15[7];
  unint64_t v5 = 126 - 2 * __clz(((uint64_t)v4 - v3) >> 3);
  if (v4 == (uint64_t *)v3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v5;
  }
  std::__introsort<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *,false>(v3, v4, v6, 1);
  int v7 = (int *)v15[6];
  for (unint64_t i = (int *)v15[7]; v7 != i; v7 += 2)
  {
    int v9 = *v7;
    if (*v7 > 16777222)
    {
      switch(v9)
      {
        case 16777223:
          uint64_t v10 = @"x86_64";
          goto LABEL_20;
        case 16777234:
          uint64_t v10 = @"ppc64";
          goto LABEL_20;
        case 16777228:
          uint64_t v10 = @"arm64";
          goto LABEL_20;
      }
    }
    else
    {
      switch(v9)
      {
        case 7:
          uint64_t v10 = @"i386";
          goto LABEL_20;
        case 12:
          unsigned int v11 = v7[1] - 6;
          if (v11 > 0xA || ((0x779u >> v11) & 1) == 0) {
            continue;
          }
          uint64_t v10 = off_1E522D838[v11];
          goto LABEL_20;
        case 18:
          uint64_t v10 = @"ppc";
LABEL_20:
          [v2 addObject:v10];
          break;
      }
    }
  }
  _Block_object_dispose(&v14, 8);
  if (__p)
  {
    BOOL v21 = __p;
    operator delete(__p);
  }
  return v2;
}

void sub_1829A4648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  _Block_object_dispose(&a14, 8);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void _LSEnumerateSliceMask(unsigned __int16 a1, void *a2)
{
  uint64_t v3 = a2;
  char v6 = 0;
  uint64_t v4 = (uint64_t *)&_LSEnumerateSliceMask::flagsToTypes;
  do
  {
    while ((*(_WORD *)v4 & a1) == 0)
    {
      uint64_t v4 = (uint64_t *)((char *)v4 + 12);
      if (v4 == &qword_182AF8F48) {
        goto LABEL_10;
      }
    }
    v3[2](v3, *(uint64_t *)((char *)v4 + 4), &v6);
    uint64_t v4 = (uint64_t *)((char *)v4 + 12);
    if (v6) {
      BOOL v5 = 1;
    }
    else {
      BOOL v5 = v4 == &qword_182AF8F48;
    }
  }
  while (!v5);
LABEL_10:
}

void sub_1829A4718(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL33_LSBundleCopyArchitectures_CommonPK12LSBundleDataP7NSArrayIP8NSStringE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 8);
  uint64_t v4 = (void *)v3[7];
  unint64_t v5 = v3[8];
  if ((unint64_t)v4 >= v5)
  {
    uint64_t v7 = v3[6];
    uint64_t v8 = ((uint64_t)v4 - v7) >> 3;
    if ((unint64_t)(v8 + 1) >> 61) {
      abort();
    }
    uint64_t v9 = v5 - v7;
    uint64_t v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
      uint64_t v10 = v8 + 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11) {
      unint64_t v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<os_eligibility_answer_t>>((uint64_t)(v3 + 8), v11);
    }
    else {
      unint64_t v12 = 0;
    }
    id v13 = &v12[8 * v8];
    uint64_t v14 = &v12[8 * v11];
    *(void *)id v13 = a2;
    char v6 = v13 + 8;
    uint64_t v16 = (char *)v3[6];
    uint64_t v15 = (char *)v3[7];
    if (v15 != v16)
    {
      do
      {
        uint64_t v17 = *((void *)v15 - 1);
        v15 -= 8;
        *((void *)v13 - 1) = v17;
        v13 -= 8;
      }
      while (v15 != v16);
      uint64_t v15 = (char *)v3[6];
    }
    v3[6] = v13;
    v3[7] = v6;
    v3[8] = v14;
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    *uint64_t v4 = a2;
    char v6 = v4 + 1;
  }
  v3[7] = v6;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<os_eligibility_answer_t>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(8 * a2);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *,false>(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  v109 = (uint64_t *)result;
  while (2)
  {
    v103 = a2 - 1;
    uint64_t v8 = v109;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v9 = (char *)a2 - (char *)v8;
          uint64_t v10 = a2 - v8;
          v109 = v8;
          if (v5 || !v4)
          {
            switch(v10)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t v40 = *(a2 - 1);
                uint64_t v41 = *v8;
                unsigned int v42 = _LSScoreCPUType(v40);
                double result = _LSScoreCPUType(v41);
                if (v42 < result)
                {
                  *uint64_t v8 = v40;
                  *(a2 - 1) = v41;
                }
                break;
              case 3:
                double result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *>(v8, v8 + 1, v103);
                break;
              case 4:
                double result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *>(v8, v8 + 1, v8 + 2, v103);
                break;
              case 5:
                double result = std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *,0>(v8, v8 + 1, v8 + 2, v8 + 3, v103);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          unint64_t v11 = v8;
          if (v9 <= 191)
          {
            id v43 = v8 + 1;
            BOOL v45 = v8 == a2 || v43 == a2;
            if (a4)
            {
              if (!v45)
              {
                uint64_t v46 = 0;
                id v47 = v8;
                do
                {
                  uint64_t v49 = *v47;
                  uint64_t v48 = v47[1];
                  id v47 = v43;
                  unsigned int v50 = _LSScoreCPUType(v48);
                  double result = _LSScoreCPUType(v49);
                  if (v50 < result)
                  {
                    uint64_t v51 = v46;
                    while (1)
                    {
                      *(uint64_t *)((char *)v8 + v51 + 8) = v49;
                      if (!v51) {
                        break;
                      }
                      uint64_t v49 = *(uint64_t *)((char *)v8 + v51 - 8);
                      double result = _LSScoreCPUType(v49);
                      v51 -= 8;
                      if (v50 >= result)
                      {
                        uint64_t v52 = (uint64_t *)((char *)v8 + v51 + 8);
                        goto LABEL_82;
                      }
                    }
                    uint64_t v52 = v8;
LABEL_82:
                    *uint64_t v52 = v48;
                  }
                  id v43 = v47 + 1;
                  v46 += 8;
                }
                while (v47 + 1 != a2);
              }
            }
            else if (!v45)
            {
              do
              {
                uint64_t v96 = *v109;
                uint64_t v95 = v109[1];
                v97 = v43;
                unsigned int v98 = _LSScoreCPUType(v95);
                double result = _LSScoreCPUType(v96);
                if (v98 < result)
                {
                  v99 = v97;
                  do
                  {
                    uint64_t *v99 = v96;
                    uint64_t v96 = *(v99 - 2);
                    double result = _LSScoreCPUType(v96);
                    --v99;
                  }
                  while (v98 < result);
                  uint64_t *v99 = v95;
                }
                v109 = v97;
                id v43 = v97 + 1;
              }
              while (v97 + 1 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v8 != a2)
            {
              unint64_t v100 = (char *)a2 - (char *)v8;
              int64_t v53 = (unint64_t)(v10 - 2) >> 1;
              int64_t v54 = v53;
              unsigned int v55 = v8;
              uint64_t v102 = a2 - v8;
              do
              {
                int64_t v56 = v54;
                if (v53 >= v54)
                {
                  uint64_t v57 = (2 * v54) | 1;
                  id v58 = &v55[v57];
                  uint64_t v59 = 2 * v54 + 2;
                  uint64_t v60 = *v58;
                  int64_t v104 = v54;
                  if (v59 < v10)
                  {
                    uint64_t v61 = v58[1];
                    unsigned int v62 = _LSScoreCPUType(v60);
                    unsigned int v63 = _LSScoreCPUType(v61);
                    if (v62 < v63) {
                      uint64_t v60 = v61;
                    }
                    unsigned int v55 = v109;
                    if (v62 < v63)
                    {
                      ++v58;
                      uint64_t v57 = v59;
                    }
                  }
                  id v64 = &v55[v56];
                  uint64_t v65 = *v64;
                  unsigned int v66 = _LSScoreCPUType(v60);
                  double result = _LSScoreCPUType(v65);
                  unsigned int v107 = result;
                  BOOL v4 = v66 >= result;
                  unsigned int v55 = v109;
                  if (v4)
                  {
                    uint64_t v101 = v65;
                    do
                    {
                      char v67 = v58;
                      *id v64 = v60;
                      if (v53 < v57) {
                        break;
                      }
                      uint64_t v68 = (2 * v57) | 1;
                      id v58 = &v55[v68];
                      uint64_t v69 = 2 * v57 + 2;
                      uint64_t v60 = *v58;
                      if (v69 < v10)
                      {
                        uint64_t v70 = v58[1];
                        unsigned int v71 = _LSScoreCPUType(*v58);
                        unsigned int v72 = _LSScoreCPUType(v70);
                        if (v71 < v72) {
                          uint64_t v60 = v70;
                        }
                        unsigned int v55 = v109;
                        if (v71 < v72) {
                          ++v58;
                        }
                        uint64_t v10 = v102;
                        if (v71 < v72) {
                          uint64_t v68 = v69;
                        }
                      }
                      double result = _LSScoreCPUType(v60);
                      id v64 = v67;
                      uint64_t v57 = v68;
                    }
                    while (result >= v107);
                    uint64_t *v67 = v101;
                    int64_t v56 = v104;
                  }
                }
                int64_t v54 = v56 - 1;
              }
              while (v56);
              uint64_t v73 = v100 >> 3;
              do
              {
                uint64_t v74 = 0;
                uint64_t v75 = v109;
                uint64_t v105 = *v109;
                uint64_t v108 = a2;
                do
                {
                  char v76 = &v75[v74];
                  uint64_t v79 = v76[1];
                  long long v77 = v76 + 1;
                  uint64_t v78 = v79;
                  uint64_t v80 = (2 * v74) | 1;
                  uint64_t v81 = 2 * v74 + 2;
                  if (v81 < v73)
                  {
                    uint64_t v82 = v77[1];
                    unsigned int v83 = _LSScoreCPUType(v78);
                    double result = _LSScoreCPUType(v82);
                    if (v83 < result)
                    {
                      uint64_t v78 = v82;
                      ++v77;
                      uint64_t v80 = v81;
                    }
                  }
                  *uint64_t v75 = v78;
                  uint64_t v75 = v77;
                  uint64_t v74 = v80;
                }
                while (v80 <= (uint64_t)((unint64_t)(v73 - 2) >> 1));
                long long v84 = v108 - 1;
                if (v77 == v108 - 1)
                {
                  int v85 = v108 - 1;
                  *long long v77 = v105;
                }
                else
                {
                  *long long v77 = *v84;
                  int v85 = v108 - 1;
                  *long long v84 = v105;
                  uint64_t v86 = (char *)v77 - (char *)v109 + 8;
                  if (v86 >= 9)
                  {
                    unint64_t v87 = (((unint64_t)v86 >> 3) - 2) >> 1;
                    BOOL v88 = &v109[v87];
                    uint64_t v89 = *v88;
                    uint64_t v90 = *v77;
                    unsigned int v91 = _LSScoreCPUType(*v88);
                    double result = _LSScoreCPUType(v90);
                    if (v91 < result)
                    {
                      unsigned int v92 = result;
                      do
                      {
                        uint64_t v93 = v88;
                        *long long v77 = v89;
                        if (!v87) {
                          break;
                        }
                        unint64_t v87 = (v87 - 1) >> 1;
                        BOOL v88 = &v109[v87];
                        uint64_t v89 = *v88;
                        double result = _LSScoreCPUType(*v88);
                        long long v77 = v93;
                      }
                      while (result < v92);
                      uint64_t *v93 = v90;
                    }
                  }
                }
                BOOL v94 = v73-- <= 2;
                a2 = v85;
              }
              while (!v94);
            }
            return result;
          }
          unint64_t v12 = (unint64_t)v10 >> 1;
          id v13 = &v8[(unint64_t)v10 >> 1];
          if ((unint64_t)v9 < 0x401)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *>(v13, v8, v103);
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *>(v8, v13, v103);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *>(v8 + 1, v13 - 1, a2 - 2);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *>(v8 + 2, &v8[v12 + 1], a2 - 3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *>(v13 - 1, v13, &v8[v12 + 1]);
            uint64_t v14 = *v8;
            *uint64_t v8 = *v13;
            uint64_t *v13 = v14;
          }
          --a3;
          uint64_t v15 = *v8;
          if (a4) {
            break;
          }
          unsigned int v17 = _LSScoreCPUType(*((_DWORD *)v8 - 2));
          unsigned int v16 = _LSScoreCPUType(v15);
          if (v17 < v16) {
            goto LABEL_13;
          }
          double result = _LSScoreCPUType(*(_DWORD *)v103);
          if (v16 >= result)
          {
            long long v32 = v8 + 1;
            do
            {
              uint64_t v8 = v32;
              if (v32 >= a2) {
                break;
              }
              ++v32;
              double result = _LSScoreCPUType(*(_DWORD *)v8);
            }
            while (v16 >= result);
          }
          else
          {
            do
            {
              int v31 = *((_DWORD *)v8++ + 2);
              double result = _LSScoreCPUType(v31);
            }
            while (v16 >= result);
          }
          id v33 = a2;
          if (v8 < a2)
          {
            id v33 = a2;
            do
            {
              int v34 = *((_DWORD *)v33-- - 2);
              double result = _LSScoreCPUType(v34);
            }
            while (v16 < result);
          }
          if (v8 < v33)
          {
            uint64_t v35 = *v8;
            uint64_t v36 = *v33;
            do
            {
              *uint64_t v8 = v36;
              uint64_t *v33 = v35;
              do
              {
                uint64_t v37 = v8[1];
                ++v8;
                uint64_t v35 = v37;
              }
              while (v16 >= _LSScoreCPUType(v37));
              do
              {
                uint64_t v38 = *--v33;
                uint64_t v36 = v38;
                double result = _LSScoreCPUType(v38);
              }
              while (v16 < result);
            }
            while (v8 < v33);
          }
          uint64_t v39 = v8 - 1;
          BOOL v4 = v8 - 1 >= v11;
          BOOL v5 = v8 - 1 == v11;
          if (v8 - 1 != v11) {
            uint64_t *v11 = *v39;
          }
          a4 = 0;
          uint64_t *v39 = v15;
        }
        unsigned int v16 = _LSScoreCPUType(*v8);
LABEL_13:
        uint64_t v18 = 0;
        do
          uint64_t v19 = v11[++v18];
        while (_LSScoreCPUType(v19) < v16);
        uint64_t v20 = &v11[v18];
        BOOL v21 = a2;
        if (v18 == 1)
        {
          BOOL v21 = a2;
          do
          {
            if (v20 >= v21) {
              break;
            }
            int v23 = *((_DWORD *)v21-- - 2);
          }
          while (_LSScoreCPUType(v23) >= v16);
        }
        else
        {
          do
            int v22 = *((_DWORD *)v21-- - 2);
          while (_LSScoreCPUType(v22) >= v16);
        }
        if (v20 >= v21)
        {
          uint64_t v29 = v20 - 1;
        }
        else
        {
          uint64_t v24 = *v21;
          id v25 = &v11[v18];
          uint64_t v26 = v21;
          do
          {
            *id v25 = v24;
            uint64_t *v26 = v19;
            do
            {
              uint64_t v27 = v25[1];
              ++v25;
              uint64_t v19 = v27;
            }
            while (_LSScoreCPUType(v27) < v16);
            do
            {
              uint64_t v28 = *--v26;
              uint64_t v24 = v28;
            }
            while (_LSScoreCPUType(v28) >= v16);
          }
          while (v25 < v26);
          uint64_t v29 = v25 - 1;
          unint64_t v11 = v109;
        }
        if (v29 != v11) {
          uint64_t *v11 = *v29;
        }
        *uint64_t v29 = v15;
        if (v20 >= v21) {
          break;
        }
LABEL_34:
        double result = std::__introsort<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *,false>(v11, v29, a3, a4 & 1);
        a4 = 0;
        uint64_t v8 = v29 + 1;
      }
      BOOL v30 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *>(v11, v29);
      uint64_t v8 = v29 + 1;
      double result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *>(v29 + 1, a2);
      if (result) {
        break;
      }
      if (!v30) {
        goto LABEL_34;
      }
    }
    a2 = v29;
    if (!v30) {
      continue;
    }
    return result;
  }
}

uint64_t _LSGetCPUType()
{
  if (_LSGetCPUType::once != -1) {
    dispatch_once(&_LSGetCPUType::once, &__block_literal_global_53);
  }
  return _LSGetCPUType::type;
}

BOOL _LSIsCPUTypeSubtypeRunnable(int a1, int a2)
{
  if (a1 == 16777228)
  {
    if (_LSGetCPUType::once != -1) {
      dispatch_once(&_LSGetCPUType::once, &__block_literal_global_53);
    }
    if (_LSGetCPUType::type == 16777228)
    {
      int v4 = a2 & 0xFFFFFF;
      if ((a2 & 0xFFFFFF) == 0 || v4 == 0xFFFFFF || v4 == 2) {
        return 1;
      }
    }
    return 0;
  }
  if (a1 != 16777223) {
    return a1 == -1 && a2 == -1;
  }
  if (_LSGetCPUType::once != -1) {
    dispatch_once(&_LSGetCPUType::once, &__block_literal_global_53);
  }
  if (_LSGetCPUType::type != 16777223) {
    return 0;
  }
  int v5 = a2 & 0xFFFFFF;
  if ((a2 & 0xFFFFFF) == 0xFFFFFF) {
    return 1;
  }
  if (v5 != 8) {
    return v5 == 3;
  }
  if (_LSPlatformSupportsHaswell::onceToken != -1) {
    dispatch_once(&_LSPlatformSupportsHaswell::onceToken, &__block_literal_global_110);
  }
  return _LSPlatformSupportsHaswell::canRun != 0;
}

id _LSDatabaseGetNode(uint64_t a1)
{
  return *(id *)(a1 + 1640);
}

void std::vector<std::pair<objc_selector *,void (*)(objc_object *,objc_selector *)>>::shrink_to_fit(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(void *)(a1 + 16);
  int v4 = *(char **)a1;
  int v5 = *(unsigned char **)(a1 + 8);
  unint64_t v6 = (v5 - v4) >> 4;
  if (v6 >= (v3 - (uint64_t)v4) >> 4) {
    return;
  }
  if (v5 == v4)
  {
    unint64_t v11 = 0;
    uint64_t v9 = 16 * v6;
    goto LABEL_8;
  }
  uint64_t v7 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<unsigned int,NSUUID * {__strong}>>>(v2, v6);
  int v4 = *(char **)a1;
  uint64_t v8 = *(char **)(a1 + 8);
  uint64_t v9 = (uint64_t)&v7[16 * v6];
  unint64_t v11 = &v7[16 * v10];
  if (v8 == *(char **)a1)
  {
LABEL_8:
    uint64_t v12 = v9;
    goto LABEL_9;
  }
  uint64_t v12 = v9;
  do
  {
    *(_OWORD *)(v12 - 16) = *((_OWORD *)v8 - 1);
    v12 -= 16;
    v8 -= 16;
  }
  while (v8 != v4);
  int v4 = *(char **)a1;
LABEL_9:
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v11;
  if (v4)
  {
    operator delete(v4);
  }
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<unsigned int,NSUUID * {__strong}>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(16 * a2);
}

void __create_d2f_port_source_block_invoke(uint64_t a1)
{
}

uint64_t ___ZL42getIsCurrentThreadInLSContextInitReferencev_block_invoke()
{
  return pthread_key_create((pthread_key_t *)&getIsCurrentThreadInLSContextInitReference(void)::key, MEMORY[0x1E4F14838]);
}

uint64_t ___ZN14LaunchServices15DatabaseContextL26getPerThreadStateReferenceEv_block_invoke()
{
  return pthread_key_create((pthread_key_t *)&LaunchServices::DatabaseContext::getPerThreadStateReference(void)::key, (void (__cdecl *)(void *))_ZZZN14LaunchServices15DatabaseContextL26getPerThreadStateReferenceEvEUb_EN3__08__invokeEPv);
}

uint64_t __Block_byref_object_copy__130(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void ___ZL28_LSDNCGetForbiddenCharactersj_block_invoke()
{
  id v6 = objc_alloc_init(MEMORY[0x1E4F28E58]);
  objc_msgSend(v6, "addCharactersInRange:", 0, 1);
  LSSessionKey v0 = [MEMORY[0x1E4F28B88] illegalCharacterSet];
  [v6 formUnionWithCharacterSet:v0];

  uint64_t v1 = [v6 copy];
  uint64_t v2 = (void *)_LSDNCGetForbiddenCharacters::forbiddenWithoutNewlines;
  _LSDNCGetForbiddenCharacters::forbiddenWithoutNewlines = v1;

  uint64_t v3 = [MEMORY[0x1E4F28B88] newlineCharacterSet];
  [v6 formUnionWithCharacterSet:v3];

  uint64_t v4 = [v6 copy];
  int v5 = (void *)_LSDNCGetForbiddenCharacters::forbiddenWithNewlines;
  _LSDNCGetForbiddenCharacters::forbiddenWithNewlines = v4;
}

void sub_1829A5730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unint64_t v11 = v10;

  _Unwind_Resume(a1);
}

void ___ZL30_LSDNCGetBiDiControlCharactersv_block_invoke()
{
  id v0 = objc_alloc_init(MEMORY[0x1E4F28E58]);
  uint64_t v1 = 0;
  id v4 = v0;
  do
  {
    objc_msgSend(v0, "addCharactersInRange:", (unsigned __int16)_LSBiDiControlCharacters[v1++], 1);
    id v0 = v4;
  }
  while (v1 != 12);
  uint64_t v2 = [v4 copy];
  uint64_t v3 = (void *)_LSDNCGetBiDiControlCharacters(void)::result;
  _LSDNCGetBiDiControlCharacters(void)::double result = v2;
}

void sub_1829A57DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN14LaunchServices13PropertyListsL27filterValueFromPropertyListEP11objc_objectP10objc_classS4__block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if (objc_opt_isKindOfClass()) {
    [*(id *)(a1 + 32) setObject:v5 forKeyedSubscript:v6];
  }
}

void sub_1829A5A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1829A5DE4(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);

  _Unwind_Resume(a1);
}

void sub_1829A5ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

double ___ZL27_FSNodeInfoLifetimeAbsolutev_block_invoke()
{
  uint64_t v0 = _LSGetMachTimebase();
  double result = 5000000000.0 / ((double)v0 / (double)HIDWORD(v0));
  _FSNodeInfoLifetimeAbsolute(void)::nodeInfoLifetimeAbsolute = (unint64_t)result;
  return result;
}

uint64_t _LSGetMachTimebase()
{
  if (_LSGetMachTimebase::once != -1) {
    dispatch_once(&_LSGetMachTimebase::once, &__block_literal_global_130);
  }
  return _LSGetMachTimebase::info;
}

void sub_1829A607C(_Unwind_Exception *a1)
{
  uint64_t v2 = v1;

  _Unwind_Resume(a1);
}

CFStringRef UTTypeCreatePreferredIdentifierForTag(CFStringRef inTagClass, CFStringRef inTag, CFStringRef inConformingToUTI)
{
  CFStringRef v3 = 0;
  if (inTagClass && inTag)
  {
    uint64_t v7 = (void *)MEMORY[0x18530F680]();
    uint64_t v8 = +[UTTypeRecord typeRecordWithTag:inTag ofClass:inTagClass conformingToIdentifier:inConformingToUTI];
    uint64_t v9 = v8;
    if (v8)
    {
      CFStringRef v3 = [v8 identifier];
    }
    else
    {
      CFStringRef v3 = 0;
    }
  }
  return v3;
}

void sub_1829A6134(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829A63B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void ___ZL45_LSGetCurrentSystemIOSSupportAndBuildVersionsP15LSVersionNumberS0_PPK10__CFStringS0_S4__block_invoke()
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef v0 = (const __CFDictionary *)_CFCopySystemVersionPlatformDictionary();
  CFDictionaryRef v1 = v0;
  uint64_t v2 = (const void **)MEMORY[0x1E4F1CD30];
  CFStringRef v3 = (const void **)MEMORY[0x1E4F1CD10];
  if (v0)
  {
    Value = (__CFString *)CFDictionaryGetValue(v0, (const void *)*MEMORY[0x1E4F1CD30]);
    if (Value)
    {
      _LSGetVersionFromString(Value, &v13);
      _LSGetCurrentSystemIOSSupportAndBuildVersions(LSVersionNumber *,LSVersionNumber *,__CFString const**,LSVersionNumber *,__CFString const**)::cachedSystemVersion = v13;
      unk_1EB20D820 = v14;
    }
    CFStringRef v5 = (const __CFString *)CFDictionaryGetValue(v1, *v3);
    if (v5) {
      _LSGetCurrentSystemIOSSupportAndBuildVersions(LSVersionNumber *,LSVersionNumber *,__CFString const**,LSVersionNumber *,__CFString const**)::cachedBuildVersion = (uint64_t)CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v5);
    }
  }
  id v6 = [MEMORY[0x1E4F28CB8] defaultManager];
  uint64_t v7 = [v6 contentsAtPath:@"/private/preboot/Cryptexes/OS/SystemVersion.plist"];

  if (v7)
  {
    id v12 = 0;
    uint64_t v8 = [MEMORY[0x1E4F28F98] propertyListWithData:v7 options:0 format:0 error:&v12];
    id v9 = v12;
    if (v8)
    {
      uint64_t v10 = (__CFString *)CFDictionaryGetValue(v1, *v2);
      if (v10)
      {
        _LSGetVersionFromString(v10, &v13);
        _LSGetCurrentSystemIOSSupportAndBuildVersions(LSVersionNumber *,LSVersionNumber *,__CFString const**,LSVersionNumber *,__CFString const**)::cachedCryptexVersion = v13;
        *(_OWORD *)algn_1E8F5F250 = v14;
      }
      CFStringRef v11 = (const __CFString *)CFDictionaryGetValue(v1, *v3);
      if (v11) {
        _LSGetCurrentSystemIOSSupportAndBuildVersions(LSVersionNumber *,LSVersionNumber *,__CFString const**,LSVersionNumber *,__CFString const**)::cachedCryptexBuildVersion = (uint64_t)CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v11);
      }
    }
  }
  if (v1) {
    CFRelease(v1);
  }
}

void sub_1829A669C(_Unwind_Exception *a1)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(a1);
}

void _LSGetVersionFromString(__CFString *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  *a2 = 0u;
  a2[1] = 0u;
  if (a1)
  {
    if (CFStringGetCString(a1, buffer, 1024, 0x8000100u))
    {
      LaunchServices::VersionNumber::FromCString((uint64_t)buffer, a2);
    }
    else
    {
      id v4 = (void *)MEMORY[0x18530F680]();
      uint64_t v5 = [(__CFString *)a1 UTF8String];
      if (v5) {
        LaunchServices::VersionNumber::FromCString(v5, a2);
      }
    }
  }
}

uint64_t LaunchServices::VersionNumber::FromCString@<X0>(uint64_t this@<X0>, _OWORD *a2@<X8>)
{
  v12[3] = *MEMORY[0x1E4F143B8];
  *a2 = 0u;
  a2[1] = 0u;
  if (this)
  {
    CFStringRef v3 = (char *)(this - 1);
    do
    {
      int v4 = *++v3;
      unsigned int v5 = v4 - 48;
      if (v4) {
        BOOL v6 = v5 > 9;
      }
      else {
        BOOL v6 = 0;
      }
    }
    while (v6);
    uint64_t v7 = 0;
    v12[0] = a2;
    v12[1] = (char *)a2 + 8;
    void v12[2] = a2 + 1;
    do
    {
      uint64_t v8 = (uint64_t *)v12[v7];
      char v9 = *v3;
      if (*v3)
      {
        uint64_t v10 = 0;
        ++v3;
        while (v9 != 46)
        {
          if ((v9 - 48) >= 0xAu)
          {
            *uint64_t v8 = v10;
            return this;
          }
          uint64_t v10 = (v9 - 48) + 10 * v10;
          int v11 = *v3++;
          char v9 = v11;
          if (!v11)
          {
            --v3;
            break;
          }
        }
      }
      else
      {
        uint64_t v10 = 0;
      }
      *uint64_t v8 = v10;
      ++v7;
    }
    while (v7 != 3);
  }
  return this;
}

void ___ZL14_LSGetSessionsv_block_invoke()
{
}

void sub_1829A6B14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829A6E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id a29)
{
  _Block_object_dispose(&a24, 8);
  _Unwind_Resume(a1);
}

void ___ZL11_LSErrorLogv_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.launchservices", "error");
  CFDictionaryRef v1 = (void *)_LSErrorLog(void)::result;
  _LSErrorLog(void)::double result = (uint64_t)v0;
}

void ___Z33availabilityStateForServiceDomainP17_LSDServiceDomain_block_invoke()
{
}

void sub_1829A7278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);

  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)va);
  _Unwind_Resume(a1);
}

uint64_t _LSBundleFindWithInfo(uint64_t a1, NSString *a2, void *a3, int a4, _OWORD *a5, int a6, int a7, _DWORD *a8, void *a9)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  long long v9 = a5[1];
  v16[0] = *a5;
  v16[1] = v9;
  id v15 = 0;
  BOOL v10 = _LSBundleFindWithInfoAndNo_IOFilter(a1, a2, a3, a4 != 0, v16, a6, a7, 0, 0, a8, a9, &v15);
  id v11 = v15;
  id v12 = v11;
  if (v10) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = _LSGetOSStatusFromNSError(v11);
  }

  return v13;
}

void sub_1829A73E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829A747C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL37_LSSchemeApprovalGetBouncebackHistoryv_block_invoke_3(uint64_t a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  CFStringRef v3 = [MEMORY[0x1E4F1CA80] set];
  if (SpringBoardServicesLibrary(void)::frameworkLibrary
    || (SpringBoardServicesLibrary(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices", 2)) != 0)
  {
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    int v4 = objc_msgSend(v2, "elements", 0);
    uint64_t v5 = [v4 countByEnumeratingWithState:&v16 objects:v20 count:16];
    if (v5)
    {
      uint64_t v6 = *(void *)v17;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v17 != v6) {
            objc_enumerationMutation(v4);
          }
          uint64_t v8 = *(void **)(*((void *)&v16 + 1) + 8 * i);
          if ([v8 isUIApplicationElement]
            && (unint64_t)([v8 layoutRole] - 1) < 2)
          {
            long long v9 = [v8 bundleIdentifier];
            [v3 addObject:v9];
          }
        }
        uint64_t v5 = [v4 countByEnumeratingWithState:&v16 objects:v20 count:16];
      }
      while (v5);
    }
  }
  _LSSchemeApprovalGetBouncebackHistory();
  id v10 = (id)objc_claimAutoreleasedReturnValue();
  objc_sync_enter(v10);
  uint64_t v11 = [v10 count];
  if (v11)
  {
    id v12 = [v10 objectAtIndexedSubscript:v11 - 1];
    uint64_t v13 = [v12 objectAtIndexedSubscript:0];
    if ([v3 containsObject:v13])
    {
    }
    else
    {
      long long v14 = [v12 objectAtIndexedSubscript:1];
      char v15 = [v3 containsObject:v14];

      if ((v15 & 1) == 0) {
        _LSSchemeApprovalClearBouncebackHistory();
      }
    }
  }
  objc_sync_exit(v10);
}

void sub_1829A786C(_Unwind_Exception *a1)
{
  objc_sync_exit(v3);
  _Unwind_Resume(a1);
}

id _LSSchemeApprovalGetBouncebackHistory(void)
{
  if (_LSSchemeApprovalGetBouncebackHistory(void)::once != -1) {
    dispatch_once(&_LSSchemeApprovalGetBouncebackHistory(void)::once, &__block_literal_global_57);
  }
  os_log_t v0 = (void *)_LSSchemeApprovalGetBouncebackHistory(void)::result;

  return v0;
}

void sub_1829A7A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1829A7C54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829A7CE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829A7F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 144), 8);

  _Block_object_dispose((const void *)(v13 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1829A81E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 96), 8);
  _Unwind_Resume(a1);
}

BOOL _LSCopyServerStore(void *a1, char a2, void **a3, void *a4, id *a5)
{
  uint64_t v109 = *MEMORY[0x1E4F143B8];
  int v7 = 0;
  id v55 = a1;
  unsigned int v50 = (void *)*MEMORY[0x1E4F28798];
  uint64_t v53 = *MEMORY[0x1E4F28760];
  uint64_t v52 = *MEMORY[0x1E4F281F8];
  if (sLastCallToMapDatabaseFailed) {
    int v9 = 0;
  }
  else {
    int v9 = 100000;
  }
  useconds_t v51 = v9;
  *(void *)&long long v8 = 138478339;
  long long v49 = v8;
  while (1)
  {
    id v10 = (_LSDServiceDomain *)v55;
    uint64_t v89 = 0;
    uint64_t v90 = &v89;
    uint64_t v91 = 0x2020000000;
    char v92 = 0;
    uint64_t v83 = 0;
    long long v84 = &v83;
    uint64_t v85 = 0x3032000000;
    uint64_t v86 = __Block_byref_object_copy__25;
    unint64_t v87 = __Block_byref_object_dispose__25;
    id v88 = 0;
    uint64_t v77 = 0;
    uint64_t v78 = &v77;
    uint64_t v79 = 0x3032000000;
    uint64_t v80 = __Block_byref_object_copy__25;
    uint64_t v81 = __Block_byref_object_dispose__25;
    id v82 = 0;
    uint64_t v71 = 0;
    unsigned int v72 = &v71;
    uint64_t v73 = 0x3032000000;
    uint64_t v74 = __Block_byref_object_copy__25;
    uint64_t v75 = __Block_byref_object_dispose__25;
    id v76 = 0;
    uint64_t v67 = 0;
    uint64_t v68 = &v67;
    uint64_t v69 = 0x2020000000;
    char v70 = 0;
    uint64_t v61 = 0;
    unsigned int v62 = &v61;
    uint64_t v63 = 0x3032000000;
    id v64 = __Block_byref_object_copy__25;
    uint64_t v65 = __Block_byref_object_dispose__25;
    id v66 = 0;
    uint64_t v11 = (void *)MEMORY[0x18530F680]();
    *(void *)v99 = MEMORY[0x1E4F143A8];
    uint64_t v100 = 3221225472;
    uint64_t v101 = ___LSCopyStoreFromServer_block_invoke;
    uint64_t v102 = &unk_1E522F4B8;
    v103 = &v83;
    int64_t v104 = &v77;
    uint64_t v105 = &v71;
    uint64_t v106 = &v67;
    unsigned int v107 = &v61;
    uint64_t v108 = &v89;
    id v12 = (void *)MEMORY[0x18530F950](v99);
    uint64_t v13 = objc_opt_class();
    long long v14 = _LSDServiceGetXPCConnection(v13, (uint64_t)v10);
    v59[0] = MEMORY[0x1E4F143A8];
    v59[1] = 3221225472;
    v59[2] = ___LSCopyStoreFromServer_block_invoke_2;
    v59[3] = &unk_1E522C6F0;
    id v15 = v12;
    id v60 = v15;
    long long v16 = [v14 synchronousRemoteObjectProxyWithErrorHandler:v59];

    [v16 getServerStoreNonBlockingWithCompletionHandler:v15];
    uint64_t v17 = v72[5];
    if (!*((unsigned char *)v90 + 24) && (a2 & 1) == 0 && v17)
    {
      long long v18 = _LSDefaultLog();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id buf = 0;
        _os_log_impl(&dword_182959000, v18, OS_LOG_TYPE_DEFAULT, "Database was seeding; client will retry and block. This is not an error.",
          buf,
          2u);
      }

      LSResetDatabaseKnownAvailable(v10);
      id v19 = objc_alloc(MEMORY[0x1E4F29268]);
      uint64_t v20 = (void *)[v19 initWithListenerEndpoint:v72[5]];
      uint64_t v21 = LSDatabaseBlockingFetchInterface();
      [v20 setRemoteObjectInterface:v21];

      int v22 = [v20 synchronousRemoteObjectProxyWithErrorHandler:&__block_literal_global_37];
      [v20 resume];
      v57[0] = MEMORY[0x1E4F143A8];
      v57[1] = 3221225472;
      int v57[2] = ___LSCopyStoreFromServer_block_invoke_65;
      v57[3] = &unk_1E522F4E0;
      id v58 = v15;
      int v23 = (void *)MEMORY[0x18530F950](v57);
      if (_LSCopyStoreFromServer_onceToken != -1) {
        dispatch_once(&_LSCopyStoreFromServer_onceToken, &__block_literal_global_70);
      }
      if (objc_msgSend(MEMORY[0x1E4F29060], "isMainThread", v49))
      {
        if (*((unsigned char *)v68 + 24)) {
          __LAUNCH_SERVICES_IS_WAITING_ON_THE_MAIN_QUEUE_DUE_TO_A_MANUAL_REBUILD__(v22, (uint64_t)v23);
        }
        else {
          __LAUNCH_SERVICES_WAS_ASKED_TO_PERFORM_BLOCKING_IO_ON_THE_MAIN_QUEUE__(v22, (uint64_t)v23);
        }
      }
      else if (*((unsigned char *)v68 + 24))
      {
        __LAUNCH_SERVICES_IS_RESEEDING_ITS_DATABASE_DUE_TO_A_MANUAL_REBUILD_AND_MAY_BLOCK__(v22, (uint64_t)v23);
      }
      else
      {
        __LAUNCH_SERVICES_IS_RESEEDING_ITS_DATABASE_AND_MAY_BLOCK__(v22, (uint64_t)v23);
      }
      [v20 invalidate];

      goto LABEL_23;
    }
    if ((a2 & 1) != 0 && v17)
    {
      uint64_t v24 = _LSMakeNSErrorImpl(v50, 36, (uint64_t)"_LSCopyStoreFromServer", 459, 0);
      uint64_t v20 = (void *)v62[5];
      v62[5] = v24;
LABEL_23:
    }
    if (!*((unsigned char *)v90 + 24))
    {
      uint64_t v29 = _LSDefaultLog();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        uint64_t v41 = v84[5];
        uint64_t v42 = v78[5];
        uint64_t v43 = v62[5];
        *(_DWORD *)id buf = v49;
        uint64_t v94 = v41;
        __int16 v95 = 2113;
        uint64_t v96 = v42;
        __int16 v97 = 2114;
        uint64_t v98 = v43;
        _os_log_error_impl(&dword_182959000, v29, OS_LOG_TYPE_ERROR, "LaunchServices: store %{private}@ or url %{private}@ was nil: %{public}@", buf, 0x20u);
      }

      id v27 = (id)v62[5];
      uint64_t v28 = 0;
      goto LABEL_32;
    }
    if (a4)
    {
      id v25 = (id)v84[5];
      _CSStoreSetMutable();
      *a4 = v25;
    }
    if (a3)
    {
      id v26 = (id)v78[5];
      id v27 = 0;
      uint64_t v28 = *a3;
      *a3 = v26;
LABEL_32:

      goto LABEL_34;
    }
    id v27 = 0;
LABEL_34:
    int v30 = *((unsigned __int8 *)v90 + 24);
    BOOL v31 = *((unsigned char *)v90 + 24) != 0;
    _Block_object_dispose(&v61, 8);

    _Block_object_dispose(&v67, 8);
    _Block_object_dispose(&v71, 8);

    _Block_object_dispose(&v77, 8);
    _Block_object_dispose(&v83, 8);

    _Block_object_dispose(&v89, 8);
    if (v31)
    {
      sLastCallToMapDatabaseFailed = 0;
      goto LABEL_70;
    }
    if (a5) {
      objc_storeStrong(a5, v27);
    }
    sLastCallToMapDatabaseFailed = 1;
    long long v32 = objc_msgSend(v27, "domain", v49);
    if ([v32 isEqual:v53] && objc_msgSend(v27, "code") == -54)
    {
      BOOL v33 = _LSCurrentProcessMayMapDatabase() == 0;

      if (v33)
      {
        BOOL v45 = _LSDefaultLog();
        if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR)) {
          _LSCopyServerStore_cold_1();
        }
        goto LABEL_69;
      }
    }
    else
    {
    }
    if (a2)
    {
      int v34 = [v27 domain];
      if ([v34 isEqual:v50])
      {
        BOOL v35 = [v27 code] == 36;

        if (v35)
        {
          BOOL v45 = _LSDefaultLog();
          if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR)) {
            _LSCopyServerStore_cold_4();
          }
          goto LABEL_69;
        }
      }
      else
      {
      }
    }
    if (!v7)
    {
      uint64_t v36 = _LSGetAuditTokenForSelf();
      uint64_t v37 = objc_opt_class();
      if (!_LSCheckLSDServiceAccessForAuditToken(v36, v37)) {
        break;
      }
    }
    uint64_t v38 = [v27 domain];
    if ([v38 isEqual:v52])
    {
      BOOL v39 = [v27 code] == 4099;

      if (v39)
      {
        BOOL v45 = _LSDefaultLog();
        if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR)) {
          _LSCopyServerStore_cold_3();
        }
        goto LABEL_69;
      }
    }
    else
    {
    }
    uint64_t v40 = _LSDefaultLog();
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v99 = 67109120;
      *(_DWORD *)&v99[4] = v7;
      _os_log_error_impl(&dword_182959000, v40, OS_LOG_TYPE_ERROR, "LaunchServices: Database mapping failed, retries = %d", v99, 8u);
    }

    usleep(v51);
    if (++v7 == 10) {
      goto LABEL_71;
    }
  }
  BOOL v45 = _LSDefaultLog();
  if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR)) {
    _LSCopyServerStore_cold_2();
  }
LABEL_69:

LABEL_70:
LABEL_71:

  return v30 != 0;
}

void sub_1829A8D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  _Block_object_dispose(&a41, 8);
  _Block_object_dispose(&a47, 8);
  _Block_object_dispose(&a51, 8);
  _Block_object_dispose(&a57, 8);
  _Block_object_dispose(&a63, 8);
  _Block_object_dispose(&a69, 8);
  _Unwind_Resume(a1);
}

void sub_1829A8FA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location, id a16)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a16);

  _Unwind_Resume(a1);
}

void sub_1829A91F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_1829A92C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void (**_LSDServiceGetXPCProxyForServiceClass(void *a1, uint64_t a2, int a3, void (**a4)(void, void)))(void, void)
{
  uint64_t v6 = _LSDServiceGetXPCConnection(a1, a2);
  int v7 = v6;
  if (v6)
  {
    if (a3) {
      [v6 synchronousRemoteObjectProxyWithErrorHandler:a4];
    }
    else {
    a4 = [v6 remoteObjectProxyWithErrorHandler:a4];
    }
  }
  else if (a4)
  {
    long long v8 = _LSDefaultLog();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      _LSDServiceGetXPCProxyForServiceClass_cold_1(v8, v9, v10, v11, v12, v13, v14, v15);
    }

    long long v16 = _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -10822, (uint64_t)"_LSDServiceGetXPCProxyForServiceClass", 481, 0);
    ((void (**)(void, void *))a4)[2](a4, v16);

    a4 = 0;
  }

  return a4;
}

void sub_1829A93D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSDServiceGetXPCConnection(void *a1, uint64_t a2)
{
  if (objc_opt_class() == a1)
  {
    uint64_t v9 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v10 = objc_msgSend(NSString, "stringWithUTF8String:", "NSXPCConnection *_LSDServiceGetXPCConnection(__unsafe_unretained Class _Nonnull, _LSDServiceDomain *const __strong _Nonnull)");
    [v9 handleFailureInFunction:v10, @"LSDService.mm", 406, @"Invalid parameter not satisfying: %@", @"self != [_LSDService class]" file lineNumber description];
  }
  if (_LSDServiceGetXPCConnection::once != -1) {
    dispatch_once(&_LSDServiceGetXPCConnection::once, &__block_literal_global_56);
  }
  [(_LSDServiceDomain *)a2 connectionConfigurationStateForServiceClass:(uint64_t)&v17];
  id v4 = v19;
  uint64_t v5 = (void *)_LSDServiceGetXPCConnection::serverConnections;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3321888768;
  v11[2] = ___LSDServiceGetXPCConnection_block_invoke_2;
  v11[3] = &unk_1ECB179F8;
  void v11[4] = a2;
  uint64_t v13 = a1;
  long long v14 = v17;
  uint64_t v15 = v18;
  id v6 = v4;
  id v16 = v6;
  id v12 = v6;
  int v7 = LaunchServices::_LSLazyLoadObjectForKeyWithLock(v5, v6, (os_unfair_lock_s *)&_LSDServiceGetXPCConnection::serverConnectionsLock, v11);

  return v7;
}

void sub_1829A959C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id LaunchServices::_LSLazyLoadObjectForKeyWithLock(void *a1, void *a2, os_unfair_lock_s *a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = v7;
  id v10 = v8;
  uint64_t v11 = a4;
  os_unfair_lock_lock(a3);
  id v12 = [v9 objectForKey:v10];
  if (!v12)
  {
    id v12 = v11[2](v11);
    [v9 setObject:v12 forKey:v10];
  }
  os_unfair_lock_unlock(a3);

  return v12;
}

void sub_1829A96C0(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v3);

  _Unwind_Resume(a1);
}

void sub_1829A98DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1829A9F20(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1829A9FE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSCheckMachPortAccessForAuditToken(uint64_t a1, void *a2)
{
  BOOL v2 = 0;
  if (a1 && a2)
  {
    if (_LSGetAuditTokenForSelf::once != -1) {
      dispatch_once(&_LSGetAuditTokenForSelf::once, &__block_literal_global_183);
    }
    if (_LSGetAuditTokenForSelf::result == a1 && !_LSIsCurrentProcessSandboxed(0))
    {
      return 1;
    }
    else
    {
      uint64_t v5 = (void *)MEMORY[0x18530F680]();
      [a2 UTF8String];
      BOOL v2 = sandbox_check_by_audit_token() == 0;
    }
  }
  return v2;
}

uint64_t _LSIsCurrentProcessSandboxed(unsigned char *a1)
{
  __int16 v3 = 0;
  if ([(id)__LSDefaultsGetSharedInstance() isServer])
  {
    __int16 v3 = 0;
    if (!a1) {
      return HIBYTE(v3);
    }
    goto LABEL_10;
  }
  if (_LSCheckCurrentProcessSandboxEveryTime(void)::once != -1) {
    dispatch_once(&_LSCheckCurrentProcessSandboxEveryTime(void)::once, &__block_literal_global_210);
  }
  if (_LSCheckCurrentProcessSandboxEveryTime(void)::result)
  {
    if (_LSGetAuditTokenForSelf::once != -1) {
      dispatch_once(&_LSGetAuditTokenForSelf::once, &__block_literal_global_183);
    }
    _LSIsAuditTokenSandboxed(_LSGetAuditTokenForSelf::result, (unsigned char *)&v3 + 1, (BOOL *)&v3);
    if (a1) {
LABEL_10:
    }
      *a1 = v3;
  }
  else
  {
    if (_LSIsCurrentProcessSandboxed::once != -1) {
      dispatch_once(&_LSIsCurrentProcessSandboxed::once, &__block_literal_global_185);
    }
    HIBYTE(v3) = _LSIsCurrentProcessSandboxed::sSandbox;
    LOBYTE(v3) = _LSIsCurrentProcessSandboxed::sAppSandbox;
    if (a1) {
      goto LABEL_10;
    }
  }
  return HIBYTE(v3);
}

void sub_1829AA9C4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1829AAB00(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1829AAC28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t shouldConnectToLSD(void *a1)
{
  id v1 = a1;
  if ((objc_opt_respondsToSelector() & 1) != 0
    || (objc_opt_respondsToSelector() & 1) != 0
    || (objc_opt_respondsToSelector() & 1) != 0
    || (objc_opt_respondsToSelector() & 1) != 0
    || (objc_opt_respondsToSelector() & 1) != 0
    || (objc_opt_respondsToSelector() & 1) != 0
    || (objc_opt_respondsToSelector() & 1) != 0
    || (objc_opt_respondsToSelector() & 1) != 0
    || (objc_opt_respondsToSelector() & 1) != 0
    || (objc_opt_respondsToSelector() & 1) != 0)
  {
    uint64_t v2 = 1;
  }
  else
  {
    uint64_t v2 = objc_opt_respondsToSelector() & 1;
  }

  return v2;
}

void performWithLSAWDistributedNotificationNameBasedOnObserverConformance(void *a1, void (*a2)(__CFString *))
{
  id v3 = a1;
  if (objc_opt_respondsToSelector()) {
    a2(@"com.lsinstallprogress.appcontrols.cancel");
  }
  if (objc_opt_respondsToSelector()) {
    a2(@"com.lsinstallprogress.appcontrols.pause");
  }
  if (objc_opt_respondsToSelector()) {
    a2(@"com.lsinstallprogress.appcontrols.prioritize");
  }
  if (objc_opt_respondsToSelector()) {
    a2(@"com.lsinstallprogress.appcontrols.resume");
  }
  if (objc_opt_respondsToSelector()) {
    a2(@"com.lsinstallprogress.networkusagechanged");
  }
  if (objc_opt_respondsToSelector()) {
    a2(@"com.apple.LaunchServices.pluginsregistered");
  }
  if (objc_opt_respondsToSelector()) {
    a2(@"com.apple.LaunchServices.pluginsunregistered");
  }
  if (objc_opt_respondsToSelector()) {
    a2(@"com.apple.LaunchServices.pluginswillberemoved");
  }
  if (objc_opt_respondsToSelector()) {
    a2(@"com.apple.LaunchServices.applicationStateChanged");
  }
}

void subscribeToLSAWDistributedNotification(const __CFString *a1)
{
}

void mutateSubscriberCountForNotificationName(const __CFString *a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (mutateSubscriberCountForNotificationName_onceToken != -1) {
    dispatch_once(&mutateSubscriberCountForNotificationName_onceToken, &__block_literal_global_217);
  }
  os_unfair_lock_lock((os_unfair_lock_t)&mutateSubscriberCountForNotificationName_notificationCountLock);
  id v4 = [(id)mutateSubscriberCountForNotificationName_notificationSubscriberCounts objectForKey:a1];
  uint64_t v5 = v4;
  if (v4) {
    uint64_t v6 = [v4 unsignedIntValue];
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = v3[2](v3, v6);
  uint64_t v8 = v7;
  if (v6 != v7)
  {
    if (v6)
    {
      if (!v7)
      {
        id v9 = _LSInstallLog();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          int v15 = 138412290;
          CFStringRef v16 = a1;
          _os_log_impl(&dword_182959000, v9, OS_LOG_TYPE_DEFAULT, "unregistering for distributed notification %@ in this process", (uint8_t *)&v15, 0xCu);
        }

        DistributedCenter = CFNotificationCenterGetDistributedCenter();
        CFNotificationCenterRemoveObserver(DistributedCenter, +[LSApplicationWorkspace defaultWorkspace], a1, 0);
      }
    }
    else
    {
      uint64_t v11 = _LSInstallLog();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        int v15 = 138412290;
        CFStringRef v16 = a1;
        _os_log_impl(&dword_182959000, v11, OS_LOG_TYPE_DEFAULT, "registering for distributed notification %@ in this process", (uint8_t *)&v15, 0xCu);
      }

      id v12 = CFNotificationCenterGetDistributedCenter();
      CFNotificationCenterAddObserver(v12, +[LSApplicationWorkspace defaultWorkspace], (CFNotificationCallback)LSApplicationWorkspaceNotificationCallback, a1, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
    }
  }
  uint64_t v13 = (void *)mutateSubscriberCountForNotificationName_notificationSubscriberCounts;
  long long v14 = [NSNumber numberWithUnsignedInt:v8];
  [v13 setObject:v14 forKey:a1];

  os_unfair_lock_unlock((os_unfair_lock_t)&mutateSubscriberCountForNotificationName_notificationCountLock);
}

uint64_t __subscribeToLSAWDistributedNotification_block_invoke(uint64_t a1, int a2)
{
  return (a2 + 1);
}

id _LSInstallLog()
{
  if (_LSInstallLog_onceToken != -1) {
    dispatch_once(&_LSInstallLog_onceToken, &__block_literal_global_10_0);
  }
  os_log_t v0 = (void *)_LSInstallLog_log;

  return v0;
}

void sub_1829AB230(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1829AB294(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1829AB54C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, id a17)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a17);
  _Unwind_Resume(a1);
}

id workspaceObserverInterface()
{
  if (workspaceObserverInterface_onceToken != -1) {
    dispatch_once(&workspaceObserverInterface_onceToken, &__block_literal_global_75_1);
  }
  os_log_t v0 = (void *)workspaceObserverInterface_interface;

  return v0;
}

id installProgressInterface()
{
  if (installProgressInterface_onceToken != -1) {
    dispatch_once(&installProgressInterface_onceToken, &__block_literal_global_45);
  }
  os_log_t v0 = (void *)installProgressInterface_interface;

  return v0;
}

id _LSProgressLog()
{
  if (_LSProgressLog_onceToken != -1) {
    dispatch_once(&_LSProgressLog_onceToken, &__block_literal_global_13);
  }
  os_log_t v0 = (void *)_LSProgressLog_log;

  return v0;
}

void sub_1829AB7E0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void *___ZN14LaunchServices19URLPropertyProviderL14getUTTypeClassEv_block_invoke()
{
  double result = objc_getClass("UTType");
  LaunchServices::URLPropertyProvider::getUTTypeClass(void)::double result = (uint64_t)result;
  if (!result)
  {
    if (UniformTypeIdentifiersLibrary(void)::frameworkLibrary
      || (double result = dlopen("/System/Library/Frameworks/UniformTypeIdentifiers.framework/UniformTypeIdentifiers", 2),
          (UniformTypeIdentifiersLibrary(void)::frameworkLibrary = (uint64_t)result) != 0))
    {
      double result = objc_getClass("UTType");
      LaunchServices::URLPropertyProvider::getUTTypeClass(void)::double result = (uint64_t)result;
    }
  }
  return result;
}

id _LSDataSeparationLog()
{
  if (_LSDataSeparationLog_onceToken != -1) {
    dispatch_once(&_LSDataSeparationLog_onceToken, &__block_literal_global_22_1);
  }
  os_log_t v0 = (void *)_LSDataSeparationLog_log;

  return v0;
}

void ___ZL35_LSSessionInitMemoryWarningListenerv_block_invoke()
{
  dispatch_source_t v0 = dispatch_source_create(MEMORY[0x1E4F14468], 0, 6uLL, 0);
  id v1 = (void *)_LSSessionInitMemoryWarningListener(void)::memPressureSource;
  _LSSessionInitMemoryWarningListener(void)::memPressureSource = (uint64_t)v0;

  dispatch_source_set_event_handler((dispatch_source_t)_LSSessionInitMemoryWarningListener(void)::memPressureSource, &__block_literal_global_225);
  uint64_t v2 = _LSSessionInitMemoryWarningListener(void)::memPressureSource;

  dispatch_resume(v2);
}

BOOL _LSPluginCheckExtensionPoint(void *a1, unsigned int a2, uint64_t a3, void *a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = a1;
  int v8 = _LSExtensionPointFindWithStringID(v7, *(unsigned int *)(a3 + 180), *(unsigned int *)(a3 + 20), 0, 0, 0);
  id v14 = 0;
  BOOL v9 = _LSGetNSErrorFromOSStatusImpl(v8, &v14, (uint64_t)"_LSPluginCheckExtensionPoint", 1005);
  id v10 = v14;
  if (!v9)
  {
    if ((*(unsigned char *)(a3 + 164) & 1) != 0
      && [(id)__LSDefaultsGetSharedInstance() isAppleInternal])
    {
      uint64_t v11 = _LSDefaultLog();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        uint64_t v13 = _LSDatabaseGetNSStringFromString(v7);
        *(_DWORD *)id buf = 138478339;
        CFStringRef v16 = v13;
        __int16 v17 = 2048;
        uint64_t v18 = a2;
        __int16 v19 = 2112;
        id v20 = v10;
        _os_log_error_impl(&dword_182959000, v11, OS_LOG_TYPE_ERROR, "Plugin %{private}@ (0x%llx) has a bad extension point identifier specified in its Info.plist: %@", buf, 0x20u);
      }
    }
    if (a4) {
      *a4 = v10;
    }
  }

  return v9;
}

void sub_1829ABE84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id __copy_helper_block_ea8_48c14_ZTS9LSContext(uint64_t a1, uint64_t a2)
{
  id result = *(id *)(a2 + 48);
  *(void *)(a1 + 48) = result;
  return result;
}

void ___ZL24_LSGetDispatchTokenQueuev_block_invoke()
{
  uint64_t v2 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v0 = dispatch_queue_create("LS database changed notification queue", v2);
  id v1 = (void *)_LSGetDispatchTokenQueue(void)::result;
  _LSGetDispatchTokenQueue(void)::id result = (uint64_t)v0;
}

uint64_t _LSPrepareMimicForBundleClass(void *a1, uint64_t a2)
{
  id v3 = a1;
  if (_LSPrepareMimicForIsPackage(v3, a2))
  {
    v8[0] = sel_isResolvable;
    v8[1] = sel_pathWithError_;
    _DWORD v8[2] = sel_getInodeNumber_error_;
    id v4 = v3;
    uint64_t v5 = 0;
    LOBYTE(v6) = 1;
    do
    {
      if ((_BYTE)v6) {
        uint64_t v6 = [v4 populateSimpleSelector:v8[v5] error:a2];
      }
      else {
        uint64_t v6 = 0;
      }
      ++v5;
    }
    while (v5 != 3);
  }
  else
  {
    uint64_t v6 = 0;
  }

  return v6;
}

void sub_1829AC01C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSPrepareMimicForIsPackage(void *a1, uint64_t a2)
{
  v8[0] = sel_isDirectory;
  v8[1] = sel_isVolume;
  _DWORD v8[2] = sel_hasPackageBit;
  void v8[3] = sel_extensionWithError_;
  _OWORD v8[4] = sel_isAVCHDCollection;
  id v3 = a1;
  uint64_t v4 = 0;
  LOBYTE(v5) = 1;
  do
  {
    while (!(_BYTE)v5)
    {
      if (++v4 == 5)
      {

        goto LABEL_10;
      }
      LOBYTE(v5) = 0;
    }
    int v5 = [v3 populateSimpleSelector:v8[v4++] error:a2];
  }
  while (v4 != 5);

  if (v5)
  {
    uint64_t v6 = [v3 populateHFSTypeAndCreatorWithError:a2];
    goto LABEL_11;
  }
LABEL_10:
  uint64_t v6 = 0;
LABEL_11:

  return v6;
}

void sub_1829AC128(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829AC238(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829AC368(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1829AC6F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1829AC804(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN14LaunchServices19URLPropertyProviderL13prepareValuesEPK7__CFURLP11__FileCachePKPK10__CFStringPPKvlSC_PP9__CFError_block_invoke_3(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  uint64_t v6 = v5;
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v7 = _LSReplaceURLPropertyValueForDecoding(v5);

    uint64_t v6 = (void *)v7;
  }
  MEMORY[0x18530E330](*(void *)(a1 + 32), v8, v6);
}

void sub_1829AC938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1829ACD6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  _Block_object_dispose(&a17, 8);

  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

void sub_1829ACF6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t initMCFeatureMaximumAppsRating()
{
  dispatch_queue_t v0 = (void *)ManagedConfigurationLibrary_frameworkLibrary;
  if (!ManagedConfigurationLibrary_frameworkLibrary)
  {
    dispatch_queue_t v0 = dlopen("/System/Library/PrivateFrameworks/ManagedConfiguration.framework/ManagedConfiguration", 2);
    ManagedConfigurationLibrary_frameworkLibrary = (uint64_t)v0;
  }
  uint64_t result = *(void *)dlsym(v0, "MCFeatureMaximumAppsRating");
  constantMCFeatureMaximumAppsRating = result;
  getMCFeatureMaximumAppsRating[0] = MCFeatureMaximumAppsRatingFunction;
  return result;
}

void sub_1829AD2EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1829AD4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void ___ZL27_LSBundleRecordMaybeLogInitP6FSNodeP8NSString_block_invoke()
{
  dispatch_queue_t v0 = _LSPrivacyLog();
  BOOL v1 = os_log_type_enabled(v0, OS_LOG_TYPE_INFO);

  if (v1)
  {
    uint64_t v2 = [MEMORY[0x1E4F28B50] mainBundle];
    id v3 = [v2 bundleURL];
    id v10 = [v3 lastPathComponent];

    if (([v10 hasSuffix:@".app"] & 1) != 0
      || [v10 hasSuffix:@".appex"])
    {
      uint64_t v4 = [MEMORY[0x1E4F28B50] mainBundle];
      id v5 = [v4 bundleIdentifier];
      int v6 = [v5 hasPrefix:@"com.apple."];

      if (v6)
      {
        uint64_t v7 = [MEMORY[0x1E4F28B50] mainBundle];
        uint64_t v8 = [v7 bundleIdentifier];
        BOOL v9 = (void *)_LSBundleRecordMaybeLogInit(FSNode *,NSString *)::myBundleIDIfEnabledAndFirstParty;
        _LSBundleRecordMaybeLogInit(FSNode *,NSString *)::myBundleIDIfEnabledAndFirstParty = v8;
      }
    }
  }
}

void sub_1829AD710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _LSPrivacyLog()
{
  if (_LSPrivacyLog_onceToken != -1) {
    dispatch_once(&_LSPrivacyLog_onceToken, &__block_literal_global_19_0);
  }
  dispatch_queue_t v0 = (void *)_LSPrivacyLog_log;

  return v0;
}

const char *___ZL38_LSCheckCurrentProcessSandboxEveryTimev_block_invoke()
{
  uint64_t result = getenv("LS_PROCESS_WILL_BE_SANDBOXED");
  if (result)
  {
    uint64_t result = (const char *)atoi(result);
    _LSCheckCurrentProcessSandboxEveryTime(void)::uint64_t result = result != 0;
  }
  return result;
}

void sub_1829ADAF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::BindingEvaluator::getOptions(LaunchServices::BindingEvaluator *this)
{
  return *((unsigned int *)this + 27);
}

void LaunchServices::BindingEvaluator::CreateWithApplicationIdentifier(LaunchServices::BindingEvaluator *this@<X0>, NSString *a2@<X1>, uint64_t a3@<X8>)
{
  char v3 = (char)a2;
  LaunchServices::BindingEvaluator::BindingEvaluator((LaunchServices::BindingEvaluator *)a3);
  LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"Creating binding evaluator for application identifier %@", v6, this);
  id v11 = 0;
  id v12 = 0;
  _LSSplitApplicationIdentifier(this, &v12, &v11);
  uint64_t v7 = [v11 copy];
  uint64_t v8 = *(void **)(a3 + 32);
  *(void *)(a3 + 32) = v7;

  if (v12)
  {
    uint64_t v9 = [(LaunchServices::BindingEvaluator *)this copy];
    id v10 = *(void **)(a3 + 80);
    *(void *)(a3 + 80) = v9;
  }
  *(unsigned char *)(a3 + 88) = 1;
  *(unsigned char *)(a3 + 89) = v3;
}

void sub_1829ADC34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  LaunchServices::BindingEvaluator::~BindingEvaluator(v12);
  _Unwind_Resume(a1);
}

void _LSSplitApplicationIdentifier(void *a1, void **a2, id *a3)
{
  id v13 = a1;
  if (a2)
  {
    int v6 = *a2;
    *a2 = 0;
  }
  if (a3) {
    objc_storeStrong(a3, a1);
  }
  if ((unint64_t)[v13 length] >= 0xC && objc_msgSend(v13, "rangeOfString:", @".") == 10)
  {
    uint64_t v8 = v7;
    if (a2)
    {
      uint64_t v9 = [v13 substringToIndex:10];
      id v10 = *a2;
      *a2 = (void *)v9;
    }
    if (a3)
    {
      uint64_t v11 = [v13 substringFromIndex:v8 + 10];
      id v12 = *a3;
      *a3 = (id)v11;
    }
  }
}

void sub_1829ADD40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t _LSLogAppRecordInitsForDataSeparation()
{
  if (_LSLogAppRecordInitsForDataSeparation::onceToken != -1) {
    dispatch_once(&_LSLogAppRecordInitsForDataSeparation::onceToken, &__block_literal_global_5);
  }
  return _LSLogAppRecordInitsForDataSeparation::result;
}

void enumeratePluginsMatchingQuery(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  id v5 = +[_LSQueryContext defaultContext];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __enumeratePluginsMatchingQuery_block_invoke;
  v7[3] = &unk_1E522C8A8;
  id v8 = v3;
  id v6 = v3;
  [v5 enumerateResolvedResultsOfQuery:v4 withBlock:v7];
}

void sub_1829AE274(_Unwind_Exception *a1)
{
  id v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1829AE454(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829AE558(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN14LaunchServices19URLPropertyProviderL13prepareValuesEPK7__CFURLP11__FileCachePKPK10__CFStringPPKvlSC_PP9__CFError_block_invoke_2(void *a1, void *a2, void *a3, void *a4)
{
  unint64_t v7 = a2;
  unint64_t v8 = a3;
  id v9 = a4;
  if (v7 | v8)
  {
    if (v7)
    {
      id v10 = [(id)v7 objectForKeyedSubscript:*MEMORY[0x1E4F1CD90]];
      BOOL v11 = v10 != 0;

      v13[0] = MEMORY[0x1E4F143A8];
      v13[1] = 3221225472;
      v13[2] = ___ZN14LaunchServices19URLPropertyProviderL13prepareValuesEPK7__CFURLP11__FileCachePKPK10__CFStringPPKvlSC_PP9__CFError_block_invoke_3;
      v13[3] = &__block_descriptor_41_e25_v32__0__NSString_8_16_B24l;
      BOOL v14 = v11;
      void v13[4] = a1[6];
      [(id)v7 enumerateKeysAndObjectsUsingBlock:v13];
    }
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    void v12[2] = ___ZN14LaunchServices19URLPropertyProviderL13prepareValuesEPK7__CFURLP11__FileCachePKPK10__CFStringPPKvlSC_PP9__CFError_block_invoke_4;
    v12[3] = &__block_descriptor_40_e22_v24__0__NSString_8_B16l;
    void v12[4] = a1[6];
    [(id)v8 enumerateObjectsUsingBlock:v12];
    *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 1;
  }
  else
  {
    *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 0;
    objc_storeStrong((id *)(*(void *)(a1[5] + 8) + 40), a4);
  }
}

void sub_1829AE81C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829AED80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829AEF68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829AF15C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829AF490(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829AF8E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829AFC60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __mutateSubscriberCountForNotificationName_block_invoke()
{
  id v0 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  BOOL v1 = (void *)mutateSubscriberCountForNotificationName_notificationSubscriberCounts;
  mutateSubscriberCountForNotificationName_notificationSubscriberCounts = (uint64_t)v0;
}

void __FSEventStreamSetDispatchQueue_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v1 + 188))
  {
    if (!*(unsigned char *)(v1 + 189)) {
      process_dir_events(*(_DWORD *)(a1 + 40), (void *)v1);
    }
  }
}

void ___ZN14LaunchServices15DatabaseContextL6getLogEv_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.launchservices", "db-spi");
  uint64_t v1 = (void *)LaunchServices::DatabaseContext::getLog(void)::result;
  LaunchServices::DatabaseContext::getLog(void)::uint64_t result = (uint64_t)v0;
}

void *availabilityStateForServiceDomain(_LSDServiceDomain *a1)
{
  uint64_t v1 = a1;
  if (availabilityStateForServiceDomain(_LSDServiceDomain *)::onceToken != -1) {
    dispatch_once(&availabilityStateForServiceDomain(_LSDServiceDomain *)::onceToken, &__block_literal_global_22);
  }
  os_unfair_lock_lock((os_unfair_lock_t)&availabilityStateForServiceDomain(_LSDServiceDomain *)::m);
  uint64_t v2 = availabilityStateForServiceDomain(_LSDServiceDomain *)::sessionQuickAvailabilityMap;
  uint64_t v5 = -[_LSDServiceDomain resolvedSessionKey]((uint64_t)v1);
  id v6 = &v5;
  id v3 = std::__hash_table<std::__hash_value_type<LSSessionKey,LSQuickSessionAvailabilityState>,std::__unordered_map_hasher<LSSessionKey,std::__hash_value_type<LSSessionKey,LSQuickSessionAvailabilityState>,LSSessionKeyHasher,LSSessionKeyComparator,true>,std::__unordered_map_equal<LSSessionKey,std::__hash_value_type<LSSessionKey,LSQuickSessionAvailabilityState>,LSSessionKeyComparator,LSSessionKeyHasher,true>,std::allocator<std::__hash_value_type<LSSessionKey,LSQuickSessionAvailabilityState>>>::__emplace_unique_key_args<LSSessionKey,std::piecewise_construct_t const&,std::tuple<LSSessionKey&&>,std::tuple<>>(v2, (unsigned int *)&v5, (uint64_t)&std::piecewise_construct, &v6)+ 3;
  os_unfair_lock_unlock((os_unfair_lock_t)&availabilityStateForServiceDomain(_LSDServiceDomain *)::m);

  return v3;
}

void sub_1829AFEC8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock((os_unfair_lock_t)&availabilityStateForServiceDomain(_LSDServiceDomain *)::m);

  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<LSSessionKey,LSQuickSessionAvailabilityState>,std::__unordered_map_hasher<LSSessionKey,std::__hash_value_type<LSSessionKey,LSQuickSessionAvailabilityState>,LSSessionKeyHasher,LSSessionKeyComparator,true>,std::__unordered_map_equal<LSSessionKey,std::__hash_value_type<LSSessionKey,LSQuickSessionAvailabilityState>,LSSessionKeyComparator,LSSessionKeyHasher,true>,std::allocator<std::__hash_value_type<LSSessionKey,LSQuickSessionAvailabilityState>>>::__emplace_unique_key_args<LSSessionKey,std::piecewise_construct_t const&,std::tuple<LSSessionKey&&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t **a4)
{
  if (*((unsigned char *)a2 + 4)) {
    unint64_t v7 = 1;
  }
  else {
    unint64_t v7 = *a2;
  }
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = v7;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    id v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      BOOL v11 = *v10;
      if (*v10)
      {
        uint64_t v12 = *(void *)a2;
        do
        {
          unint64_t v13 = v11[1];
          if (v13 == v7)
          {
            uint64_t v14 = v11[2];
            if ((v14 & 0x100000000) != 0)
            {
              if ((v12 & 0x100000000) != 0) {
                return v11;
              }
            }
            else if ((v12 & 0x100000000) == 0 && v14 == v12)
            {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v13 >= v8) {
                v13 %= v8;
              }
            }
            else
            {
              v13 &= v8 - 1;
            }
            if (v13 != v4) {
              break;
            }
          }
          BOOL v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  BOOL v11 = operator new(0x30uLL);
  void *v11 = 0;
  v11[1] = v7;
  uint64_t v15 = **a4;
  void v11[4] = 0;
  void v11[5] = 0;
  v11[2] = v15;
  v11[3] = 0;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v8 || (float)(v17 * (float)v8) < v16)
  {
    BOOL v18 = 1;
    if (v8 >= 3) {
      BOOL v18 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v8);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>(a1, v21);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v22 = *(void *)a1;
  int v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    void *v11 = *v23;
LABEL_46:
    void *v23 = v11;
    goto LABEL_47;
  }
  void *v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v22 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v24 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v24 >= v8) {
        v24 %= v8;
      }
    }
    else
    {
      v24 &= v8 - 1;
    }
    int v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_46;
  }
LABEL_47:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_1829B0118(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1829B0164(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829B02F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1829B0498(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_1829B04AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  objc_end_catch();
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __create_d2f_port_source_block_invoke_2(uint64_t a1)
{
  dispose_d2f_port(*(_DWORD *)(a1 + 48));
  dispatch_release(*(dispatch_object_t *)(a1 + 32));
  uint64_t v2 = *(__FSEventStream **)(a1 + 40);

  FSEventStreamRelease(v2);
}

void dispose_d2f_port(mach_port_name_t name)
{
  kern_return_t v1;
  mach_error_t v2;
  NSObject *v3;

  if (name)
  {
    uint64_t v1 = mach_port_mod_refs(*MEMORY[0x1E4F14960], name, 1u, -1);
    if (v1)
    {
      uint64_t v2 = v1;
      id v3 = fsevent_default_log();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
        dispose_d2f_port_cold_1(v2);
      }
    }
  }
}

void sub_1829B0A48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ***_ZZZN14LaunchServices15DatabaseContextL26getPerThreadStateReferenceEvEUb_EN3__08__invokeEPv(void ***result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *result;
    if (v2 && *((unsigned char *)v1 + 16)) {
      _LSContextDestroy(v2);
    }
    id v3 = v1[1];
    void *v1 = 0;
    v1[1] = 0;

    *((unsigned char *)v1 + 16) = 0;
    unint64_t v4 = v1[3];
    v1[3] = 0;

    JUMPOUT(0x18530EAF0);
  }
  return result;
}

void sub_1829B0AF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829B0E28(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v2 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1829B0F68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829B1184(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t initMCEffectiveSettingsChangedNotification()
{
  os_log_t v0 = (void *)ManagedConfigurationLibrary_frameworkLibrary;
  if (!ManagedConfigurationLibrary_frameworkLibrary)
  {
    os_log_t v0 = dlopen("/System/Library/PrivateFrameworks/ManagedConfiguration.framework/ManagedConfiguration", 2);
    ManagedConfigurationLibrary_frameworkLibrary = (uint64_t)v0;
  }
  uint64_t result = *(void *)dlsym(v0, "MCEffectiveSettingsChangedNotification");
  constantMCEffectiveSettingsChangedNotification = result;
  getMCEffectiveSettingsChangedNotification[0] = MCEffectiveSettingsChangedNotificationFunction;
  return result;
}

void sub_1829B1934(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829B1A14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id LaunchServices::BindingEvaluation::formatAndSanitizeKindString(LaunchServices::BindingEvaluation *this, LaunchServices::BindingEvaluation::State *a2, NSString *a3, _LSDisplayNameConstructor *a4)
{
  if (a3)
  {
    uint64_t v5 = -[NSString unlocalizedNameWithContext:](a3, "unlocalizedNameWithContext:", *(void *)this, a4);
    uint64_t v6 = objc_msgSend(NSString, "stringWithFormat:", a2, v5);

    unint64_t v7 = (LaunchServices::BindingEvaluation::State *)v6;
  }
  else
  {
    unint64_t v7 = a2;
  }
  unint64_t v8 = _LSBalanceBiDiControlCharacters(v7);

  uint8x8_t v9 = _LSReplaceForbiddenCharacters(v8, 0);

  return v9;
}

void sub_1829B1AE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829B1C34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829B20FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829B25B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __XNSGetPropertyListClasses_block_invoke()
{
  id v0 = objc_alloc(MEMORY[0x1E4F1CAD0]);
  uint64_t v1 = objc_opt_class();
  uint64_t v2 = objc_opt_class();
  uint64_t v3 = objc_opt_class();
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_msgSend(v0, "initWithObjects:", v1, v2, v3, v4, v5, objc_opt_class(), 0);
  unint64_t v7 = (void *)XNSGetPropertyListClasses_result;
  XNSGetPropertyListClasses_uint64_t result = v6;
}

void sub_1829B27D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSCopyDataContainerURLFromContainermanager_cold_1()
{
  OUTLINED_FUNCTION_2_3();
  OUTLINED_FUNCTION_0_6();
  OUTLINED_FUNCTION_1_5(&dword_182959000, v0, v1, "ContainerManager error fetching data container for %{private}@: %llu %{public}s", v2, v3, v4, v5, v6);
}

void OUTLINED_FUNCTION_3(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_19(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_1(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

void OUTLINED_FUNCTION_0_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_2_1(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, NSObject *a4@<X8>)
{
  _os_log_debug_impl(a1, a4, OS_LOG_TYPE_DEBUG, a2, a3, 0x16u);
}

void OUTLINED_FUNCTION_2_2(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_fault_impl(a1, log, OS_LOG_TYPE_FAULT, a4, (uint8_t *)va, 0x16u);
}

uint64_t OUTLINED_FUNCTION_2_3()
{
  return container_get_error_description();
}

void OUTLINED_FUNCTION_2_6(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void sub_1829B2AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id getXPCObjectForNodeAndStore(FSNode *a1, const __CSStore *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  id v11 = 0;
  LODWORD(a1) = [(FSNode *)a1 getFileSystemRepresentation:string error:&v11];
  id v4 = v11;
  if (a1)
  {
    xpc_dictionary_set_string(v3, "path", string);
  }
  else
  {
    uint64_t v5 = _LSDefaultLog();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      getXPCObjectForNodeAndStore((uint64_t)v4, v5);
    }
  }
  CFTypeRef cf = 0;
  uint8_t v6 = _CSStoreCreateXPCRepresentation();
  if (v6)
  {
    xpc_dictionary_set_value(v3, "store", v6);
  }
  else
  {
    unint64_t v7 = _LSDefaultLog();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      getXPCObjectForNodeAndStore((id *)&cf, v7);
    }
  }
  pid_t v8 = getpid();
  xpc_dictionary_set_uint64(v3, "insecureProcessID", v8);
  if (cf) {
    CFRelease(cf);
  }

  return v3;
}

void sub_1829B2C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }

  _Unwind_Resume(a1);
}

void sub_1829B2D74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829B2DEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void __create_f2d_private_port_source_block_invoke_2(uint64_t a1)
{
  dispose_f2d_private_port(*(_DWORD *)(a1 + 48));
  dispatch_release(*(dispatch_object_t *)(a1 + 32));
  uint64_t v2 = *(__FSEventStream **)(a1 + 40);

  FSEventStreamRelease(v2);
}

void dispose_f2d_private_port(mach_port_name_t a1)
{
  kern_return_t v3;
  mach_error_t v4;
  NSObject *v5;

  if (a1)
  {
    if (f2d_unregister_rpc(a1))
    {
      uint64_t v2 = fsevent_default_log();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
        dispose_f2d_private_port_cold_2();
      }
    }
    else
    {
      xpc_object_t v3 = mach_port_deallocate(*MEMORY[0x1E4F14960], a1);
      if (v3)
      {
        id v4 = v3;
        uint64_t v5 = fsevent_default_log();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
          dispose_f2d_private_port_cold_1(v4);
        }
      }
    }
  }
}

uint64_t f2d_unregister_rpc(int a1)
{
  uint64_t v7 = 0;
  *(_OWORD *)&msg[20] = 0u;
  *(_DWORD *)&msg[4] = 0;
  mach_port_name_t special_reply_port = mig_get_special_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = special_reply_port;
  *(_DWORD *)msg = 5395;
  *(void *)&msg[16] = 0x101D600000000;
  if (MEMORY[0x1E4F14B18])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    mach_port_name_t special_reply_port = *(_DWORD *)&msg[12];
  }
  uint64_t v3 = mach_msg((mach_msg_header_t *)msg, 3162115, 0x18u, 0x2Cu, special_reply_port, 0, 0);
  uint64_t v4 = v3;
  if ((v3 - 268435458) > 0xE || ((1 << (v3 - 2)) & 0x4003) == 0)
  {
    if (v3)
    {
      mig_dealloc_special_reply_port();
      return v4;
    }
    if (*(_DWORD *)&msg[20] == 71)
    {
      uint64_t v4 = 4294966988;
    }
    else if (*(_DWORD *)&msg[20] == 66106)
    {
      uint64_t v4 = 4294966996;
      if ((*(_DWORD *)msg & 0x80000000) == 0 && *(_DWORD *)&msg[4] == 36 && !*(_DWORD *)&msg[8])
      {
        uint64_t v4 = *(unsigned int *)&msg[32];
        if (!*(_DWORD *)&msg[32]) {
          return v4;
        }
      }
    }
    else
    {
      uint64_t v4 = 4294966995;
    }
    mach_msg_destroy((mach_msg_header_t *)msg);
  }
  return v4;
}

void ___ZN14LaunchServices6RecordL18getNullPlaceholderEv_block_invoke()
{
  uint64_t v0 = objc_alloc_init(__LSRECORD_NULL_PLACEHOLDER__);
  uint64_t v1 = (void *)LaunchServices::Record::getNullPlaceholder(void)::result;
  LaunchServices::Record::getNullPlaceholder(void)::uint64_t result = (uint64_t)v0;
}

void sub_1829B32E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a9);
  _Unwind_Resume(a1);
}

void sub_1829B3574(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unsigned __int8 *_LSCheckRecordPISizeAndVersionReturningPIInnerBytes(void *a1, void *a2)
{
  v15[1] = *MEMORY[0x1E4F143B8];
  if ((unint64_t)[a1 length] < 0x1C)
  {
    uint64_t v12 = *MEMORY[0x1E4F28228];
    pid_t v8 = objc_msgSend(NSString, "stringWithFormat:", @"data length %zu is too short", objc_msgSend(a1, "length"));
    uint64_t v13 = v8;
    uint64_t v9 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v13 forKeys:&v12 count:1];
    uint64_t v10 = _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -10810, (uint64_t)"_LSCheckRecordPISizeAndVersionReturningPIInnerBytes", 225, v9);
  }
  else
  {
    uint64_t v4 = (unsigned __int8 *)[a1 bytes];
    uint64_t v5 = *v4;
    if (v5 == _LSPersistentIdentifierVersion)
    {
      uint8_t v6 = v4;
      id v7 = 0;
      goto LABEL_9;
    }
    uint64_t v14 = *MEMORY[0x1E4F28228];
    pid_t v8 = objc_msgSend(NSString, "stringWithFormat:", @"identifier version %d is unknown", v5);
    v15[0] = v8;
    uint64_t v9 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v15 forKeys:&v14 count:1];
    uint64_t v10 = _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -10650, (uint64_t)"_LSCheckRecordPISizeAndVersionReturningPIInnerBytes", 222, v9);
  }
  id v7 = (id)v10;

  if (a2)
  {
    id v7 = v7;
    uint8_t v6 = 0;
    *a2 = v7;
  }
  else
  {
    uint8_t v6 = 0;
  }
LABEL_9:

  return v6;
}

void sub_1829B3788(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829B38DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN14LaunchServices19URLPropertyProviderL60shouldAvoidLocalizingNameBecauseIsInLightweightSystemSessionEv_block_invoke()
{
  uint64_t result = _os_feature_enabled_impl();
  if ((result & 1) == 0)
  {
    uint64_t result = xpc_user_sessions_enabled();
    if (result)
    {
      uint64_t result = xpc_user_sessions_get_session_uid();
      if (!result) {
        LaunchServices::URLPropertyProvider::shouldAvoidLocalizingNameBecauseIsInLightweightSystemSession(void)::uint64_t result = 1;
      }
    }
  }
  return result;
}

void sub_1829B3F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::URLPropertyProvider::prepareLocalizedNameDictionaryValue(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  v40[1] = *MEMORY[0x1E4F143B8];
  if ([a2 canIssueIO])
  {
    uint64_t v10 = +[_LSDisplayNameConstructor displayNameConstructorsWithContextIfNeeded:a1 node:a2 error:a6];
    if (!v10)
    {
      uint64_t v18 = 0;
      goto LABEL_11;
    }
    id v11 = [MEMORY[0x1E4F1CA60] dictionary];
    uint64_t v12 = [MEMORY[0x1E4F1CA60] dictionary];
    uint64_t v13 = (void *)v12;
    if (v11)
    {
      if (v12)
      {
LABEL_5:
        uint64_t v32 = MEMORY[0x1E4F143A8];
        uint64_t v33 = 3221225472;
        int v34 = ___ZN14LaunchServices19URLPropertyProviderL35prepareLocalizedNameDictionaryValueERNS_8Database7ContextEPU34objcproto23FSNodePropertyProviding11objc_objectP11__FileCachePK10__CFStringPNS0_5StateEPU15__autoreleasingP7NSError_block_invoke;
        BOOL v35 = &unk_1E5230DF0;
        uint64_t v38 = a1;
        id v14 = v11;
        id v36 = v14;
        id v15 = v13;
        id v37 = v15;
        [v10 enumerateKeysAndObjectsUsingBlock:&v32];
        float v16 = objc_msgSend(v14, "copy", v32, v33, v34, v35);
        MEMORY[0x18530E330](a3, *MEMORY[0x1E4F1CE88], v16);

        float v17 = (void *)[v15 copy];
        MEMORY[0x18530E330](a3, *MEMORY[0x1E4F1CE90], v17);

        uint64_t v18 = 1;
        goto LABEL_11;
      }
    }
    else
    {
      uint64_t v28 = [MEMORY[0x1E4F28B00] currentHandler];
      uint64_t v29 = objc_msgSend(NSString, "stringWithUTF8String:", "Boolean LaunchServices::prepareLocalizedNameDictionaryValue(Context &, __unsafe_unretained id<FSNodePropertyProviding>, _CFURLFileCacheRef, CFStringRef, State *, NSError *__autoreleasing *)");
      [v28 handleFailureInFunction:v29 file:@"LSURLPropertyProvider.mm" lineNumber:828 description:@"Failed to create localized name dictionary."];

      if (v13) {
        goto LABEL_5;
      }
    }
    int v30 = [MEMORY[0x1E4F28B00] currentHandler];
    BOOL v31 = objc_msgSend(NSString, "stringWithUTF8String:", "Boolean LaunchServices::prepareLocalizedNameDictionaryValue(Context &, __unsafe_unretained id<FSNodePropertyProviding>, _CFURLFileCacheRef, CFStringRef, State *, NSError *__autoreleasing *)");
    [v30 handleFailureInFunction:v31 file:@"LSURLPropertyProvider.mm" lineNumber:829 description:@"Failed to create localized name dictionary."];

    goto LABEL_5;
  }
  unint64_t v19 = _LSDefaultLog();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
    LaunchServices::URLPropertyProvider::prepareLocalizedNameDictionaryValue(v19, v20, v21, v22, v23, v24, v25, v26);
  }

  if (!a6) {
    return 0;
  }
  uint64_t v39 = *MEMORY[0x1E4F28228];
  v40[0] = @"can't provide with mimic";
  uint64_t v10 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v40 forKeys:&v39 count:1];
  _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -50, (uint64_t)"prepareLocalizedNameDictionaryValue", 817, v10);
  uint64_t v18 = 0;
  *a6 = (id)objc_claimAutoreleasedReturnValue();
LABEL_11:

  return v18;
}

void sub_1829B4380(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::URLPropertyProvider::prepareVolumeLocalizedNameValue(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  v23[1] = *MEMORY[0x1E4F143B8];
  if ([a2 canIssueIO])
  {
    uint64_t v9 = [a2 volumeNodeWithFlags:16 error:a6];
    uint64_t v10 = v9;
    if (v9)
    {
      id v21 = 0;
      uint64_t v11 = [v9 getResourceValue:&v21 forKey:*MEMORY[0x1E4F1C6C8] options:3 error:a6];
      if (v11) {
        MEMORY[0x18530E330](a3, *MEMORY[0x1E4F1D898], v21);
      }
    }
    else
    {
      uint64_t v11 = 0;
    }
  }
  else
  {
    uint64_t v12 = _LSDefaultLog();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      LaunchServices::URLPropertyProvider::prepareVolumeLocalizedNameValue(v12, v13, v14, v15, v16, v17, v18, v19);
    }

    if (!a6) {
      return 0;
    }
    uint64_t v22 = *MEMORY[0x1E4F28228];
    v23[0] = @"can't provide with mimic";
    uint64_t v10 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v23 forKeys:&v22 count:1];
    _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -50, (uint64_t)"prepareVolumeLocalizedNameValue", 860, v10);
    uint64_t v11 = 0;
    *a6 = (id)objc_claimAutoreleasedReturnValue();
  }

  return v11;
}

void sub_1829B45A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSFindOrFindOrRegisterBundleNode(LSContext *a1, void *a2, unsigned int *a3, unsigned int a4, FSNode *a5, unsigned int *a6, LSBundleData **a7)
{
  id v13 = a2;
  if ([v13 canIssueIO]) {
    uint64_t v14 = _LSFindOrRegisterBundleNode(a1, v13, a3, a4, a5, a6, a7);
  }
  else {
    uint64_t v14 = _LSBundleFindWithNode((uint64_t)a1, v13, a6, a7);
  }
  uint64_t v15 = v14;

  return v15;
}

void sub_1829B466C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSFindOrRegisterBundleNode(LSContext *a1, void *a2, unsigned int *a3, unsigned int a4, FSNode *a5, unsigned int *a6, LSBundleData **a7)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = a2;
  uint64_t v12 = v11;
  id v13 = 0;
  unsigned int v73 = 0;
  unsigned int v72 = 0;
  unsigned int v71 = 0;
  CFArrayRef theArray = 0;
  id v70 = 0;
  uint64_t v14 = 4294967246;
  char v68 = 0;
  if (!a1 || !v11) {
    goto LABEL_120;
  }
  if (a3) {
    unsigned int v15 = *a3;
  }
  else {
    unsigned int v15 = _LSGetBundleClassForNode((uint64_t)a1, v11);
  }
  if (v15 == 11) {
    unsigned int v16 = a4 | 0x10000000;
  }
  else {
    unsigned int v16 = a4;
  }
  BOOL v17 = v15 > 0x10 || ((1 << v15) & 0x16804) == 0;
  if (v17 && (v16 & 0x10000000) == 0)
  {
    int v20 = 0;
    id v13 = 0;
    uint64_t v14 = 4294956485;
    if ((v16 & 0x4000000) == 0) {
      goto LABEL_103;
    }
    goto LABEL_43;
  }
  uint64_t v18 = _LSBundleFindWithNode((uint64_t)a1, v12, &v73, &v72);
  uint64_t v14 = v18;
  if (v18 == -9499)
  {
    BOOL v19 = 1;
  }
  else
  {
    if (v18)
    {
      id v13 = 0;
      goto LABEL_120;
    }
    BOOL v19 = _LSBundleNeedsRegistration(a1, v12, v16, v73, v72) != 0;
  }
  id v13 = 0;
  int v20 = 0;
  if (!a5 || !v19)
  {
LABEL_42:
    if ((v16 & 0x4000000) == 0) {
      goto LABEL_103;
    }
    goto LABEL_43;
  }
  if (!a1->db)
  {
    id v13 = 0;
    uint64_t v14 = 4294956479;
    goto LABEL_120;
  }
  id v67 = 0;
  BOOL v21 = _LSContainerFindOrRegisterWithNode((id *)&a1->db, v12, v16, &v71, 0, &v70, &v67);
  id v22 = v67;
  id v13 = v22;
  if (!v21)
  {
    uint64_t v14 = _LSGetOSStatusFromNSError(v22);
    if (v14) {
      goto LABEL_120;
    }
  }
  unsigned int v73 = 0;
  unsigned int v72 = 0;
  uint64_t v23 = _LSBundleFindWithNode((uint64_t)a1, v12, &v73, &v72);
  uint64_t v14 = v23;
  if (v23 == -9499)
  {
    BOOL v24 = 1;
  }
  else
  {
    if (v23) {
      goto LABEL_120;
    }
    BOOL v24 = _LSBundleNeedsRegistration(a1, v12, v16, v73, v72) != 0;
  }
  if (!v72)
  {
    if (v24)
    {
      unint64_t v59 = 0;
      goto LABEL_37;
    }
    goto LABEL_41;
  }
  if (!v24)
  {
LABEL_41:
    int v20 = 0;
    goto LABEL_42;
  }
  unint64_t v59 = *(void *)&v72->_maxSystemVersion._opaque[28];
  if ((*(unsigned char *)(&v72->_clas + 1) & 0x80) == 0) {
    v16 |= 2u;
  }
LABEL_37:
  uint64_t v25 = (void *)MEMORY[0x18530F680]();
  unsigned int v26 = v71;
  CFArrayRef v27 = theArray;
  id v28 = v70;
  CFArrayRef theArray = 0;
  if (v27) {
    CFRelease(v27);
  }
  id v66 = 0;
  BOOL v29 = _LSRegisterBundleNode(a1, v26, v28, v12, v16, a5, &theArray, (const __CFArray **)&v68, (const __CFURL *)&v73, &v66);
  id v30 = v66;
  BOOL v31 = v30;
  if (v29) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = _LSGetOSStatusFromNSError(v30);
  }

  if (!v14)
  {
    if (theArray && (CFIndex Count = CFArrayGetCount(theArray), Count >= 1))
    {
      for (CFIndex i = 0; i != Count; ++i)
      {
        BOOL v35 = (void *)MEMORY[0x18530F680]();
        LODWORD(v62) = 0;
        *(void *)id buf = 0;
        if (!theArray
          || (ValueAtIndex = CFArrayGetValueAtIndex(theArray, i), CFTypeID v37 = CFURLGetTypeID(), ValueAtIndex)
          && v37
          && CFGetTypeID(ValueAtIndex) != v37)
        {
          int ValueAtIndex = 0;
        }
        if (v68) {
          v16 |= 6u;
        }
        else {
          unsigned int v16 = v16 & 0xFFFFFFF9 | 4;
        }
        uint64_t v14 = FSNodeCreateWithURL((uint64_t)ValueAtIndex, 0, (id *)buf);
        if (!v14)
        {
          id v65 = 0;
          BOOL v38 = _LSRegisterBundleNode(a1, v71, v70, *(void **)buf, v16, a5, 0, 0, (const __CFURL *)&v62, &v65);
          id v39 = v65;
          uint64_t v40 = v39;
          if (v38) {
            uint64_t v14 = 0;
          }
          else {
            uint64_t v14 = _LSGetOSStatusFromNSError(v39);
          }
        }
      }
    }
    else
    {
      uint64_t v14 = 0;
    }
    if ((v16 & 0x3000000) == 0x2000000)
    {
      -[_LSDatabase store]((uint64_t)a1->db);
      unsigned int Generation = CSStoreGetGeneration();
      id v64 = 0;
      int v42 = _LSContextUpdate(&a1->db, 1, &v64);
      id v43 = v64;
      if (v42)
      {
        uint64_t v44 = _LSRegistrationLog();
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
        {
          -[_LSDatabase store]((uint64_t)a1->db);
          unsigned int v45 = CSStoreGetGeneration();
          *(_DWORD *)id buf = 134218240;
          *(void *)&uint8_t buf[4] = Generation;
          __int16 v75 = 2048;
          uint64_t v76 = v45;
          _os_log_impl(&dword_182959000, v44, OS_LOG_TYPE_DEFAULT, "LSFORBN: Caller wants reinitialization, updated store from generation %lu to %lu", buf, 0x16u);
        }
      }
      else
      {
        id v47 = _LSRegistrationLog();
        if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)id buf = 0;
          _os_log_impl(&dword_182959000, v47, OS_LOG_TYPE_ERROR, "LSFORBN: couldn't update context as asked", buf, 2u);
        }

        uint64_t v14 = _LSGetOSStatusFromNSError(v43);
        if (v14)
        {

          goto LABEL_120;
        }
      }
      unsigned int v72 = (LSBundleData *)_LSBundleGet(a1->db, v73);
      if (!v72)
      {
        unsigned int v63 = 0;
        uint64_t v62 = 0;
        if (_LSBundleFindWithNode((uint64_t)a1, v12, &v63, &v62))
        {
          uint64_t v48 = _LSRegistrationLog();
          if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)id buf = 134217984;
            *(void *)&uint8_t buf[4] = v73;
            _os_log_impl(&dword_182959000, v48, OS_LOG_TYPE_ERROR, "Couldn't refind bundle unit after registering %llx", buf, 0xCu);
          }
        }
        else if (*(void *)(v62 + 272) > v59)
        {
          int64_t v54 = _LSRegistrationLog();
          if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)id buf = 134218240;
            *(void *)&uint8_t buf[4] = v73;
            __int16 v75 = 2048;
            uint64_t v76 = v63;
            _os_log_impl(&dword_182959000, v54, OS_LOG_TYPE_ERROR, "After registering bundle unit %llx and reinitializing context, couldn't find it, but did find bundle unit %llx on refetch-by-node; using that",
              buf,
              0x16u);
          }

          unsigned int v73 = v63;
          unsigned int v72 = (LSBundleData *)v62;
        }
      }

      uint64_t v14 = 0;
    }
    else
    {
      unsigned int v72 = 0;
    }
    int v20 = 1;
    if ((v16 & 0x4000000) == 0)
    {
LABEL_103:
      if (v14 && v14 != -10654) {
        goto LABEL_120;
      }
      unsigned int v55 = v73;
      int64_t v56 = v72;
      if (v14 || !v73 || v72)
      {
        if (v14) {
          goto LABEL_116;
        }
      }
      else
      {
        int64_t v56 = (LSBundleData *)_LSBundleGet(a1->db, v73);
        unsigned int v72 = v56;
        unsigned int v55 = v73;
      }
      if (!v55) {
        goto LABEL_123;
      }
      if (((v20 ^ 1 | ((v16 & 0x2000000) >> 25)) & 1) == 0)
      {
        uint64_t v57 = _LSDefaultLog();
        if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG)) {
          _LSFindOrRegisterBundleNode_cold_1((uint64_t *)&v72, v16, v57);
        }

        goto LABEL_116;
      }
      if (!v56)
      {
LABEL_123:
        uint64_t v14 = 4294956482;
        goto LABEL_120;
      }
LABEL_116:
      if (a6) {
        *a6 = v73;
      }
      if (a7) {
        *a7 = v72;
      }
      goto LABEL_120;
    }
LABEL_43:
    if (!v73) {
      goto LABEL_128;
    }
    if (v72)
    {
      int v32 = *((unsigned char *)&v72->_clas + 5) & 1;
    }
    else
    {
      *(void *)id buf = 0;
      if (_LSContextInit((id *)buf))
      {
        int v32 = 0;
      }
      else
      {
        uint64_t v46 = _LSBundleGet(*(void **)buf, v73);
        unsigned int v72 = (LSBundleData *)v46;
        if (v46)
        {
          int v32 = *(unsigned char *)(v46 + 173) & 1;
          unsigned int v72 = 0;
        }
        else
        {
          int v32 = 0;
        }
        _LSContextDestroy((void **)buf);
      }
    }
    if (v32)
    {
LABEL_128:
      long long v49 = [(FSNode *)v12 URL];
      unsigned int v50 = (__CFBundle *)_CFBundleCreateWithExecutableURLIfLooksLikeBundle();

      if (v50)
      {
        CFURLRef v51 = CFBundleCopyBundleURL(v50);
        if (v51)
        {
          uint64_t v52 = [[FSNode alloc] initWithURL:v51 flags:0 error:0];
          if (v52)
          {
            unsigned int v53 = _LSFindOrRegisterBundleNode(a1, v52, 0, v16 & 0xFBFFFFFF, 0, &v73, &v72);
            if (v53) {
              uint64_t v14 = v53;
            }
            else {
              uint64_t v14 = 4294956642;
            }
          }

          CFRelease(v51);
        }
        CFRelease(v50);
      }
    }
    goto LABEL_103;
  }
LABEL_120:

  if (theArray) {
    CFRelease(theArray);
  }

  return v14;
}

void sub_1829B4ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,CFTypeRef cf,void *a23)
{
  if (cf) {
    CFRelease(cf);
  }

  _Unwind_Resume(a1);
}

void sub_1829B504C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t _LSBundleNeedsRegistration(LSContext *a1, FSNode *a2, int a3, unsigned int a4, const LSBundleData *a5)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = a2;
  uint64_t v11 = v9;
  if (v9)
  {
    int HasChanged = _LSNodeHasChanged(v9, v10, a4, (uint64_t)a5, 0);
    BOOL v14 = (a3 & 0x40000000) == 0 || HasChanged == 0;
    if ((a3 & 1) != 0 || !v14) {
      goto LABEL_14;
    }
  }
  else if (a3)
  {
    goto LABEL_14;
  }
  if (-[_LSDatabase isSeeded]((uint64_t)a1->db))
  {
    uint64_t v15 = 0;
    goto LABEL_17;
  }
LABEL_14:
  unsigned int v16 = getNeedsRegistrationLog();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    int v18 = 134217984;
    uint64_t v19 = a4;
    _os_log_impl(&dword_182959000, v16, OS_LOG_TYPE_DEFAULT, "bundle 0x%llx needs registration", (uint8_t *)&v18, 0xCu);
  }

  uint64_t v15 = 1;
LABEL_17:

  return v15;
}

void sub_1829B5180(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSNodeHasChanged(void *a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned char *a5)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v8 = a1;
  double v17 = 0.0;
  int v9 = [v8 getContentModificationDate:&v17 error:0];
  char v10 = v9;
  if (v9)
  {
    double v11 = v17;
    if (_LSBundleDataGetModTime(a4) == (int)v11)
    {
      uint64_t v12 = 0;
      if (!a5) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    id v13 = getNeedsRegistrationLog();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v14 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:(double)(int)_LSBundleDataGetModTime(a4)];
      uint64_t v15 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:v17];
      *(_DWORD *)id buf = 134218498;
      uint64_t v19 = a3;
      __int16 v20 = 2114;
      BOOL v21 = v14;
      __int16 v22 = 2114;
      uint64_t v23 = v15;
      _os_log_impl(&dword_182959000, v13, OS_LOG_TYPE_DEFAULT, "bundle 0x%llx mod date changed from %{public}@ to %{public}@", buf, 0x20u);
    }
  }
  else
  {
    id v13 = getNeedsRegistrationLog();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 134217984;
      uint64_t v19 = a3;
      _os_log_impl(&dword_182959000, v13, OS_LOG_TYPE_DEFAULT, "bundle 0x%llx does not appear to exist anymore", buf, 0xCu);
    }
  }

  uint64_t v12 = 1;
  if (a5) {
LABEL_10:
  }
    *a5 = v10;
LABEL_11:

  return v12;
}

void sub_1829B5368(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _FSNodeGetTimestampValue(void *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (*MEMORY[0x1E4F1C540] == a2 || *MEMORY[0x1E4F1C530] == a2 || *MEMORY[0x1E4F1C518] == a2)
  {
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    *(_OWORD *)uint64_t v12 = 0u;
    long long v13 = 0u;
    char v10 = [a1 URL];
    uint64_t v6 = _CFURLCopyResourcePropertyValuesAndFlags() != 0;

    if (v6)
    {
      if (a3) {
        *a3 = 0;
      }
    }
    else if (a4)
    {
      *a4 = 0;
    }
  }
  else
  {
    v12[0] = 0;
    uint64_t v6 = [a1 getResourceValue:v12 forKey:a2 options:3 error:a4];
    char v7 = v6 ^ 1;
    id v8 = v12[0];
    if (!a3) {
      char v7 = 1;
    }
    if ((v7 & 1) == 0)
    {
      if (v12[0])
      {
        [v12[0] timeIntervalSinceReferenceDate];
        *a3 = v9;
        id v8 = v12[0];
      }
      else
      {
        *a3 = 0;
      }
    }
  }
  return v6;
}

void sub_1829B554C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

id _LSBundleGetLocalizedNameDictionary(void *a1, uint64_t a2, void *a3, void *a4)
{
  char v7 = a1;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = _LSBundleGet(v7, a2);
  double v11 = (_LSDatabase *)*(unsigned int *)(v10 + 112);
  if (!v11) {
    double v11 = (_LSDatabase *)*(unsigned int *)(v10 + 104);
  }
  uint64_t v12 = (LaunchServices::LocalizedString *)LaunchServices::LocalizedString::Get((LaunchServices::LocalizedString *)v7, v11);
  if (v12)
  {
    uint64_t v13 = LaunchServices::LocalizedString::getAllUnsafeLocalizations(v12, v7, 0, 0, 0);
    if (v13)
    {
      long long v14 = _LSDefaultLog();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        _LSBundleGetShortDescription(v7, a2);
        objc_claimAutoreleasedReturnValue();
        _LSBundleGetLocalizedNameDictionary_cold_2();
      }

      long long v15 = (void *)v13;
      goto LABEL_11;
    }
  }
  long long v16 = _LSDefaultLog();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    _LSBundleGetShortDescription(v7, a2);
    objc_claimAutoreleasedReturnValue();
    _LSBundleGetLocalizedNameDictionary_cold_1();
  }

  long long v15 = (void *)_LSBundleCopyStringDictionaryForKey(v7, a2, v8, *MEMORY[0x1E4F1CC48], (uint64_t)v9);
  if (v15)
  {
LABEL_11:
    if ([v15 count] != 1) {
      goto LABEL_16;
    }
  }
  long long v17 = (void *)_LSBundleCopyStringDictionaryForKey(v7, a2, v8, *MEMORY[0x1E4F1D008], (uint64_t)v9);
  long long v18 = v17;
  if (v17 && (unint64_t)[v17 count] >= 2)
  {
    id v19 = v18;

    long long v15 = v19;
  }

LABEL_16:

  return v15;
}

void sub_1829B5778(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void FSEventStreamSetDispatchQueue(FSEventStreamRef streamRef, dispatch_queue_t q)
{
  if (streamRef)
  {
    if (q)
    {
      if (!*((_DWORD *)streamRef + 48))
      {
        if (allocate_d2f_port((uint64_t)"FSEventStreamSetDispatchQueue", (uint64_t)streamRef))
        {
          long long v17 = fsevent_default_log();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
            FSEventStreamSetDispatchQueue_cold_4();
          }
          return;
        }
        pthread_mutex_lock(&FSEvents_streamDict_mutex);
        CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        if (!FSEvents_streamDict) {
          FSEvents_streamDict = (uint64_t)CFDictionaryCreateMutable(v18, 0, MEMORY[0x1E4F1D530], 0);
        }
        CFNumberRef v19 = CFNumberCreate(v18, kCFNumberIntType, (char *)streamRef + 192);
        CFDictionaryAddValue((CFMutableDictionaryRef)FSEvents_streamDict, v19, streamRef);
        pthread_mutex_unlock(&FSEvents_streamDict_mutex);
        CFRelease(v19);
      }
      pthread_mutex_init((pthread_mutex_t *)((char *)streamRef + 240), 0);
      pthread_cond_init((pthread_cond_t *)((char *)streamRef + 304), 0);
      dispatch_retain(q);
      *((void *)streamRef + 44) = q;
      if (create_d2f_port_source((uint64_t)streamRef))
      {
        if ((*((unsigned char *)streamRef + 184) & 4) == 0) {
          return;
        }
        int v4 = *((_DWORD *)streamRef + 102);
        dispatch_source_t v5 = dispatch_source_create(MEMORY[0x1E4F14478], v4, 0, *((dispatch_queue_t *)streamRef + 44));
        if (v5)
        {
          uint64_t v6 = v5;
          dispatch_set_qos_class_fallback();
          FSEventStreamRetain(streamRef);
          handler[0] = MEMORY[0x1E4F143A8];
          handler[1] = 0x40000000;
          handler[2] = __FSEventStreamSetDispatchQueue_block_invoke;
          handler[3] = &__block_descriptor_tmp_0;
          handler[4] = streamRef;
          int v31 = v4;
          dispatch_source_set_event_handler(v6, handler);
          v28[0] = MEMORY[0x1E4F143A8];
          v28[1] = 0x40000000;
          v28[2] = __FSEventStreamSetDispatchQueue_block_invoke_2;
          v28[3] = &__block_descriptor_tmp_24;
          int v29 = v4;
          v28[4] = v6;
          v28[5] = streamRef;
          dispatch_source_set_cancel_handler(v6, v28);
          *((void *)streamRef + 54) = v6;
          *((_DWORD *)streamRef + 110) = 1;
          return;
        }
        uint64_t v20 = fsevent_default_log();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
          FSEventStreamSetDispatchQueue_cold_2(v20, v21, v22, v23, v24, v25, v26, v27);
        }
      }
      else
      {
        id v9 = fsevent_default_log();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
          FSEventStreamSetDispatchQueue_cold_3(v9, v10, v11, v12, v13, v14, v15, v16);
        }
      }
      if (*((void *)streamRef + 54))
      {
        cancel_source((NSObject **)streamRef + 54, (int *)streamRef + 110);
        *((_DWORD *)streamRef + 102) = -1;
      }
      if (*((void *)streamRef + 45))
      {
        cancel_source((NSObject **)streamRef + 45, (int *)streamRef + 92);
        *((_DWORD *)streamRef + 48) = 0;
      }
    }
    else
    {
      if (*((void *)streamRef + 45))
      {
        cancel_source((NSObject **)streamRef + 45, (int *)streamRef + 92);
        *((_DWORD *)streamRef + 48) = 0;
      }
      if (*((void *)streamRef + 47))
      {
        cancel_source((NSObject **)streamRef + 47, (int *)streamRef + 96);
        *((_DWORD *)streamRef + 49) = 0;
      }
      if ((*((unsigned char *)streamRef + 184) & 4) != 0 && *((void *)streamRef + 54))
      {
        cancel_source((NSObject **)streamRef + 54, (int *)streamRef + 110);
        *((_DWORD *)streamRef + 102) = -1;
      }
      id v8 = *((void *)streamRef + 44);
      if (v8)
      {
        dispatch_release(v8);
        *((void *)streamRef + 44) = 0;
      }
    }
  }
  else
  {
    char v7 = fsevent_default_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      FSEventStreamSetDispatchQueue_cold_1();
    }
  }
}

BOOL create_d2f_port_source(uint64_t a1)
{
  uintptr_t v2 = *(unsigned int *)(a1 + 192);
  uint64_t v3 = dispatch_source_create(MEMORY[0x1E4F14458], v2, 0, *(dispatch_queue_t *)(a1 + 352));
  if (v3)
  {
    FSEventStreamRetain((FSEventStreamRef)a1);
    dispatch_set_qos_class_fallback();
    handler[0] = MEMORY[0x1E4F143A8];
    handler[1] = 0x40000000;
    handler[2] = __create_d2f_port_source_block_invoke;
    handler[3] = &__block_descriptor_tmp_66;
    int v8 = v2;
    dispatch_source_set_event_handler(v3, handler);
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 0x40000000;
    v5[2] = __create_d2f_port_source_block_invoke_2;
    v5[3] = &__block_descriptor_tmp_67;
    int v6 = v2;
    void v5[4] = v3;
    void v5[5] = a1;
    dispatch_source_set_cancel_handler(v3, v5);
    *(void *)(a1 + 360) = v3;
    *(_DWORD *)(a1 + 368) = 1;
  }
  return v3 != 0;
}

uint64_t allocate_d2f_port(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = mach_port_allocate(*MEMORY[0x1E4F14960], 1u, (mach_port_name_t *)(a2 + 192));
  if (v2)
  {
    uint64_t v3 = fsevent_default_log();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      allocate_d2f_port_cold_1();
    }
  }
  return v2;
}

CFUUIDRef FSEventsCopyUUIDForDevice(dev_t dev)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (dev <= 0)
  {
    uint64_t v2 = fsevent_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      FSEventsCopyUUIDForDevice_cold_1();
    }
  }
  if (FSEvents_connect()) {
    return 0;
  }
  int v9 = 0;
  memset(v8, 0, sizeof(v8));
  f2d_get_server_uuid_rpc(FSEvents_f2d_public_port, dev, (uint64_t)v8);
  if (LODWORD(v8[0]) == 1429032782 && *(_DWORD *)((char *)v8 + 3) == 1145656661) {
    return 0;
  }
  CFStringRef v6 = CFStringCreateWithBytes(0, (const UInt8 *)v8, 36, 0x600u, 0);
  if (!v6) {
    return 0;
  }
  CFStringRef v7 = v6;
  CFUUIDRef v3 = CFUUIDCreateFromString(0, v6);
  CFRelease(v7);
  return v3;
}

uint64_t f2d_get_server_uuid_rpc(int a1, int a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)&msg[20] = 0u;
  memset(v13, 0, sizeof(v13));
  long long v12 = 0u;
  *(_OWORD *)&msg[4] = 0u;
  *(void *)&msg[24] = *MEMORY[0x1E4F14068];
  *(_DWORD *)&msg[32] = a2;
  mach_port_name_t special_reply_port = mig_get_special_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = special_reply_port;
  *(_DWORD *)msg = 5395;
  *(void *)&msg[16] = 0x101D200000000;
  if (MEMORY[0x1E4F14B18])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    mach_port_name_t special_reply_port = *(_DWORD *)&msg[12];
  }
  uint64_t v6 = mach_msg((mach_msg_header_t *)msg, 3162115, 0x24u, 0x50u, special_reply_port, 0, 0);
  uint64_t v7 = v6;
  if ((v6 - 268435458) > 0xE || ((1 << (v6 - 2)) & 0x4003) == 0)
  {
    if (!v6)
    {
      if (*(_DWORD *)&msg[20] == 71)
      {
        uint64_t v7 = 4294966988;
      }
      else if (*(_DWORD *)&msg[20] == 66102)
      {
        if ((*(_DWORD *)msg & 0x80000000) == 0)
        {
          if (*(_DWORD *)&msg[4] == 72)
          {
            if (!*(_DWORD *)&msg[8])
            {
              uint64_t v7 = *(unsigned int *)&msg[32];
              if (!*(_DWORD *)&msg[32])
              {
                long long v10 = *(_OWORD *)v13;
                *(_OWORD *)a3 = v12;
                *(_OWORD *)(a3 + 16) = v10;
                *(_DWORD *)(a3 + 32) = *(_DWORD *)&v13[16];
                return v7;
              }
              goto LABEL_22;
            }
          }
          else if (*(_DWORD *)&msg[4] == 36)
          {
            if (*(_DWORD *)&msg[8]) {
              BOOL v8 = 1;
            }
            else {
              BOOL v8 = *(_DWORD *)&msg[32] == 0;
            }
            if (v8) {
              uint64_t v7 = 4294966996;
            }
            else {
              uint64_t v7 = *(unsigned int *)&msg[32];
            }
            goto LABEL_22;
          }
        }
        uint64_t v7 = 4294966996;
      }
      else
      {
        uint64_t v7 = 4294966995;
      }
LABEL_22:
      mach_msg_destroy((mach_msg_header_t *)msg);
      return v7;
    }
    mig_dealloc_special_reply_port();
  }
  return v7;
}

FSEventStreamEventId FSEventsGetCurrentEventId(void)
{
  FSEventStreamEventId v2 = 0;
  int v0 = FSEvents_connect();
  FSEventStreamEventId result = 0;
  if (!v0)
  {
    f2d_get_current_event_id_rpc(FSEvents_f2d_public_port, &v2);
    return v2;
  }
  return result;
}

void FSEventStreamInvalidate(FSEventStreamRef streamRef)
{
  if (streamRef)
  {
    if (*((void *)streamRef + 27) || *((void *)streamRef + 45))
    {
      if (*((unsigned char *)streamRef + 188))
      {
        FSEventStreamEventId v2 = fsevent_default_log();
        if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
          FSEventStreamInvalidate_cold_3();
        }
      }
      *((unsigned char *)streamRef + 189) = 1;
      _FSEventStreamUnscheduleFromRunLoops((uint64_t)streamRef);
      CFNumberRef v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, (char *)streamRef + 192);
      pthread_mutex_lock(&FSEvents_streamDict_mutex);
      CFDictionaryRemoveValue((CFMutableDictionaryRef)FSEvents_streamDict, v3);
      pthread_mutex_unlock(&FSEvents_streamDict_mutex);
      CFRelease(v3);
      int v4 = (__CFMachPort *)*((void *)streamRef + 25);
      if (v4)
      {
        CFMachPortInvalidate(v4);
        CFRelease(*((CFTypeRef *)streamRef + 25));
        *((void *)streamRef + 25) = 0;
        dispatch_source_t v5 = (__CFMachPort *)*((void *)streamRef + 26);
        if (v5)
        {
          CFMachPortSetInvalidationCallBack(v5, 0);
          CFRelease(*((CFTypeRef *)streamRef + 26));
          *((void *)streamRef + 26) = 0;
        }
        uint64_t v6 = (const void *)*((void *)streamRef + 27);
        if (v6)
        {
          CFRelease(v6);
          *((void *)streamRef + 27) = 0;
        }
      }
      if (*((void *)streamRef + 45)) {
        cancel_source((NSObject **)streamRef + 45, (int *)streamRef + 92);
      }
      else {
        dispose_d2f_port(*((_DWORD *)streamRef + 48));
      }
      *((_DWORD *)streamRef + 48) = 0;
      if (*((void *)streamRef + 47))
      {
        cancel_source((NSObject **)streamRef + 47, (int *)streamRef + 96);
        *((_DWORD *)streamRef + 49) = 0;
      }
      if ((*((unsigned char *)streamRef + 184) & 4) != 0)
      {
        BOOL v8 = (__CFFileDescriptor *)*((void *)streamRef + 52);
        if (v8)
        {
          CFFileDescriptorInvalidate(v8);
          CFRelease(*((CFTypeRef *)streamRef + 52));
          *((void *)streamRef + 52) = 0;
          int v9 = (const void *)*((void *)streamRef + 53);
          if (v9)
          {
            CFRelease(v9);
            *((void *)streamRef + 53) = 0;
          }
        }
        if (*((void *)streamRef + 54))
        {
          cancel_source((NSObject **)streamRef + 54, (int *)streamRef + 110);
          *((_DWORD *)streamRef + 102) = -1;
        }
      }
    }
    else
    {
      long long v10 = fsevent_default_log();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        FSEventStreamInvalidate_cold_2();
      }
    }
  }
  else
  {
    uint64_t v7 = fsevent_default_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      FSEventStreamInvalidate_cold_1();
    }
  }
}

void _FSEventStreamUnscheduleFromRunLoops(uint64_t a1)
{
  FSEventStreamEventId v2 = *(const void **)(a1 + 224);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 224) = 0;
  }
  CFNumberRef v3 = *(const void **)(a1 + 232);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 232) = 0;
  }
}

void FSEventStreamStop(FSEventStreamRef streamRef)
{
  if (streamRef)
  {
    if (*((unsigned char *)streamRef + 188))
    {
      if (*((_DWORD *)streamRef + 49))
      {
        FSEventStreamEventId v2 = *((void *)streamRef + 45);
        if (v2 && *((_DWORD *)streamRef + 92) == 3)
        {
          dispatch_suspend(v2);
          *((_DWORD *)streamRef + 92) = 2;
        }
        uint64_t v3 = *((void *)streamRef + 47);
        if (v3)
        {
          cancel_source((NSObject **)streamRef + 47, (int *)streamRef + 96);
          *((_DWORD *)streamRef + 49) = 0;
        }
        int v4 = (__CFMachPort *)*((void *)streamRef + 26);
        if (v4)
        {
          CFMachPortSetInvalidationCallBack(v4, 0);
          CFMachPortInvalidate(*((CFMachPortRef *)streamRef + 26));
          CFRelease(*((CFTypeRef *)streamRef + 26));
          *((void *)streamRef + 26) = 0;
        }
        if (!v3)
        {
          dispose_f2d_private_port(*((_DWORD *)streamRef + 49));
          *((_DWORD *)streamRef + 49) = 0;
        }
        dispatch_source_t v5 = (__CFFileDescriptor *)*((void *)streamRef + 52);
        if (v5) {
          CFFileDescriptorDisableCallBacks(v5, 1uLL);
        }
        uint64_t v6 = *((void *)streamRef + 54);
        if (v6)
        {
          if (*((_DWORD *)streamRef + 110) == 3)
          {
            dispatch_suspend(v6);
            *((_DWORD *)streamRef + 110) = 2;
          }
        }
        *((unsigned char *)streamRef + 188) = 0;
      }
      else
      {
        BOOL v8 = fsevent_default_log();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
          FSEventStreamStop_cold_2();
        }
      }
    }
  }
  else
  {
    uint64_t v7 = fsevent_default_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      FSEventStreamStop_cold_1();
    }
  }
}

void cancel_source(NSObject **a1, int *a2)
{
  int v4 = *a1;
  if (v4)
  {
    dispatch_source_cancel(v4);
    resume_source(*a1, a2);
    *a1 = 0;
  }
  *a2 = 0;
}

Boolean FSEventStreamStart(FSEventStreamRef streamRef)
{
  if (!streamRef)
  {
    int v4 = fsevent_default_log();
    BOOL v3 = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    if (!v3) {
      return v3;
    }
    FSEventStreamStart_cold_1();
    goto LABEL_20;
  }
  if (*((unsigned char *)streamRef + 188))
  {
    FSEventStreamEventId v2 = fsevent_default_log();
    BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
    if (!v3) {
      return v3;
    }
    FSEventStreamStart_cold_3();
    goto LABEL_20;
  }
  if (!*((void *)streamRef + 27) && !*((void *)streamRef + 45))
  {
    BOOL v8 = fsevent_default_log();
    BOOL v3 = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if (!v3) {
      return v3;
    }
    FSEventStreamStart_cold_2();
    goto LABEL_20;
  }
  int v5 = *((_DWORD *)streamRef + 46);
  if ((v5 & 4) != 0 && !*((void *)streamRef + 54) && !*((void *)streamRef + 52) && !*((void *)streamRef + 53))
  {
LABEL_20:
    LOBYTE(v3) = 0;
    return v3;
  }
  if (!*((_DWORD *)streamRef + 49))
  {
    if (!register_with_server((uint64_t)streamRef, (uint64_t)"FSEventStreamStart", *((_DWORD *)streamRef + 48), *((_DWORD *)streamRef + 16), *((_DWORD *)streamRef + 18), *((const void ***)streamRef + 10), *((void *)streamRef + 21), *((void *)streamRef + 22), v5, (_DWORD *)streamRef + 49))
    {
      *((unsigned char *)streamRef + 188) = 1;
      if (*((void *)streamRef + 27))
      {
        context.version = 0;
        context.info = streamRef;
        context.retain = (const void *(__cdecl *)(const void *))_FSEventStreamRetainAndReturnSelf;
        context.release = (void (__cdecl *)(const void *))FSEventStreamRelease;
        context.copyDescription = (CFStringRef (__cdecl *)(const void *))FSEventStreamCopyDescription;
        int v9 = CFMachPortCreateWithPort(0, *((_DWORD *)streamRef + 49), (CFMachPortCallBack)FSEventsClientPortCallback, &context, 0);
        *((void *)streamRef + 26) = v9;
        CFMachPortSetInvalidationCallBack(v9, (CFMachPortInvalidationCallBack)server_gone_callback);
      }
      else
      {
        long long v10 = *((void *)streamRef + 45);
        if (v10)
        {
          resume_source(v10, (int *)streamRef + 92);
          if (create_f2d_private_port_source((uint64_t)streamRef)) {
            resume_source(*((NSObject **)streamRef + 47), (int *)streamRef + 96);
          }
        }
      }
      goto LABEL_14;
    }
    goto LABEL_20;
  }
LABEL_14:
  uint64_t v6 = (__CFFileDescriptor *)*((void *)streamRef + 52);
  if (v6) {
    CFFileDescriptorEnableCallBacks(v6, 1uLL);
  }
  uint64_t v7 = *((void *)streamRef + 54);
  if (v7) {
    resume_source(v7, (int *)streamRef + 110);
  }
  LOBYTE(v3) = 1;
  return v3;
}

void resume_source(NSObject *a1, int *a2)
{
  if (a1)
  {
    int v3 = *a2;
    if (*a2)
    {
      if (v3 == 2)
      {
        dispatch_resume(a1);
      }
      else if (v3 == 1)
      {
        dispatch_activate(a1);
      }
      *a2 = 3;
    }
  }
}

uint64_t register_with_server(uint64_t a1, uint64_t a2, int a3, int a4, int a5, const void **a6, uint64_t a7, uint64_t a8, int a9, _DWORD *a10)
{
  uint64_t v17 = FSEvents_connect();
  if (v17) {
    return v17;
  }
  uint64_t v66 = a7;
  CFNumberRef v19 = malloc_type_malloc(4 * a5, 0x100004052888210uLL);
  if (v19)
  {
    uint64_t v20 = v19;
    id v67 = malloc_type_malloc(4 * a5, 0x100004052888210uLL);
    if (v67)
    {
      uint64_t v62 = a8;
      int v65 = a3;
      int v63 = a4;
      uint64_t v21 = a5;
      if (a5 < 1)
      {
        int v22 = 0;
      }
      else
      {
        int v22 = 0;
        uint64_t v23 = a5;
        uint64_t v24 = (const char **)a6;
        uint64_t v25 = v20;
        do
        {
          uint64_t v26 = *v24++;
          int v27 = strlen(v26);
          *v25++ = v27;
          v22 += v27;
          --v23;
        }
        while (v23);
      }
      int v30 = v22 + a5;
      int v31 = (char *)malloc_type_malloc(v22 + a5, 0x6D242494uLL);
      if (!v31)
      {
        uint64_t v46 = fsevent_default_log();
        if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR)) {
          register_with_server_cold_3();
        }
        uint64_t v40 = 0;
        id v47 = 0;
        uint64_t v17 = 4294967293;
        goto LABEL_49;
      }
      int v64 = v30;
      uint64_t v61 = v20;
      int v32 = 0;
      if (a5 >= 1)
      {
        uint64_t v33 = v67;
        int v34 = v20;
        do
        {
          *v33++ = v32;
          int v35 = *v34++;
          int v36 = v35 + 1;
          CFTypeID v37 = *a6++;
          memcpy(&v31[v32], v37, v36);
          v32 += v36;
          --v21;
        }
        while (v21);
      }
      int v38 = v64;
      if (v32 != v64)
      {
        id v39 = fsevent_default_log();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR)) {
          register_with_server_cold_7();
        }
      }
      uint64_t v40 = *(void *)(a1 + 96);
      int v41 = v65;
      if (v40)
      {
        if (v40 < 1)
        {
          size_t v42 = 0;
          uint64_t v20 = v61;
        }
        else
        {
          size_t v42 = 0;
          id v43 = (const char **)(a1 + 104);
          uint64_t v44 = *(void *)(a1 + 96);
          uint64_t v20 = v61;
          do
          {
            unsigned int v45 = *v43++;
            v42 += strlen(v45) + 1;
            --v44;
          }
          while (v44);
        }
        long long v49 = malloc_type_malloc(4 * v40, 0x100004052888210uLL);
        if (!v49)
        {
          uint64_t v57 = fsevent_default_log();
          if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR)) {
            register_with_server_cold_5();
          }
          uint64_t v40 = 0;
          id v47 = 0;
          uint64_t v17 = 4294967292;
          goto LABEL_49;
        }
        id v47 = v49;
        unsigned int v50 = (char *)malloc_type_malloc(v42, 0x1CED7B04uLL);
        if (!v50)
        {
          id v58 = fsevent_default_log();
          if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR)) {
            register_with_server_cold_6();
          }
          uint64_t v40 = 0;
          uint64_t v17 = 4294967291;
          goto LABEL_49;
        }
        uint64_t v40 = (uint64_t)v50;
        uint64_t v48 = *(void *)(a1 + 96);
        if (v48 < 1)
        {
          int v38 = v64;
        }
        else
        {
          id v60 = v31;
          uint64_t v51 = 0;
          int v52 = 0;
          unsigned int v53 = v50;
          uint64_t v54 = a1 + 104;
          do
          {
            v47[v51] = v52;
            size_t v55 = strlen(*(const char **)(v54 + 8 * v51));
            int v56 = v55 + 1;
            memcpy(&v53[v52], *(const void **)(v54 + 8 * v51), v55 + 1);
            v52 += v56;
            ++v51;
            uint64_t v48 = *(void *)(a1 + 96);
          }
          while (v48 > v51);
          uint64_t v20 = v61;
          int v41 = v65;
          int v38 = v64;
          uint64_t v40 = (uint64_t)v53;
          int v31 = v60;
        }
      }
      else
      {
        LODWORD(v48) = 0;
        LODWORD(v42) = 0;
        id v47 = 0;
        uint64_t v20 = v61;
      }
      uint64_t v17 = f2d_register_rpc(FSEvents_f2d_public_port, v41, v63, a5, (uint64_t)v67, a5, (uint64_t)v31, v38, v48, (uint64_t)v47, v48, v40, v42, v62, a9, v66, a10);
      if (v17)
      {
        unint64_t v59 = fsevent_default_log();
        if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR)) {
          register_with_server_cold_4();
        }
      }
LABEL_49:
      free(v20);
      free(v67);
      if (v31) {
        free(v31);
      }
      if (v47) {
        free(v47);
      }
      if (v40) {
        free((void *)v40);
      }
      return v17;
    }
    int v29 = fsevent_default_log();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
      register_with_server_cold_2();
    }
    free(v20);
    return 4294967294;
  }
  else
  {
    id v28 = fsevent_default_log();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
      register_with_server_cold_1();
    }
    return 0xFFFFFFFFLL;
  }
}

uint64_t FSEvents_connect()
{
  pthread_mutex_lock(&FSEvents_f2d_public_port_mutex);
  if (FSEvents_f2d_public_port)
  {
    pthread_mutex_unlock(&FSEvents_f2d_public_port_mutex);
    return 0;
  }
  else
  {
    uint64_t v0 = bootstrap_look_up2();
    pthread_mutex_unlock(&FSEvents_f2d_public_port_mutex);
    if (v0)
    {
      uint64_t v1 = fsevent_default_log();
      if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
        FSEvents_connect_cold_1();
      }
    }
  }
  return v0;
}

uint64_t f2d_register_rpc(int a1, int a2, int a3, int a4, uint64_t a5, int a6, uint64_t a7, int a8, int a9, uint64_t a10, int a11, uint64_t a12, int a13, uint64_t a14, int a15, uint64_t a16, _DWORD *a17)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)&msg[20] = 0u;
  *(_OWORD *)&msg[4] = 0u;
  *(_DWORD *)&msg[24] = 5;
  *(_DWORD *)&msg[28] = a2;
  int v23 = 1310720;
  uint64_t v24 = a5;
  int v25 = 16777472;
  int v26 = 4 * a6;
  uint64_t v27 = a7;
  int v28 = 16777472;
  int v29 = a8;
  uint64_t v30 = a10;
  int v31 = 16777472;
  int v32 = 4 * a11;
  uint64_t v33 = a12;
  int v34 = 16777472;
  int v35 = a13;
  uint64_t v36 = *MEMORY[0x1E4F14068];
  int v37 = a3;
  int v38 = a4;
  int v39 = a6;
  int v40 = a8;
  int v41 = a9;
  int v42 = a11;
  int v43 = a13;
  uint64_t v44 = a14;
  int v45 = a15;
  uint64_t v46 = a16;
  mach_port_name_t special_reply_port = mig_get_special_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = special_reply_port;
  *(_DWORD *)msg = -2147478253;
  *(void *)&msg[16] = 0x101D000000000;
  if (MEMORY[0x1E4F14B18])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    mach_port_name_t special_reply_port = *(_DWORD *)&msg[12];
  }
  uint64_t v19 = mach_msg((mach_msg_header_t *)msg, 3162115, 0xA0u, 0x30u, special_reply_port, 0, 0);
  uint64_t v20 = v19;
  if ((v19 - 268435458) > 0xE || ((1 << (v19 - 2)) & 0x4003) == 0)
  {
    if (!v19)
    {
      if (*(_DWORD *)&msg[20] == 71)
      {
        uint64_t v20 = 4294966988;
      }
      else if (*(_DWORD *)&msg[20] == 66100)
      {
        if ((*(_DWORD *)msg & 0x80000000) == 0)
        {
          if (*(_DWORD *)&msg[4] == 36)
          {
            uint64_t v20 = 4294966996;
            if (*(_DWORD *)&msg[32])
            {
              if (*(_DWORD *)&msg[8]) {
                uint64_t v20 = 4294966996;
              }
              else {
                uint64_t v20 = *(unsigned int *)&msg[32];
              }
            }
          }
          else
          {
            uint64_t v20 = 4294966996;
          }
          goto LABEL_23;
        }
        uint64_t v20 = 4294966996;
        if (*(_DWORD *)&msg[24] == 1 && *(_DWORD *)&msg[4] == 40 && !*(_DWORD *)&msg[8] && HIWORD(v23) << 16 == 1114112)
        {
          uint64_t v20 = 0;
          *a17 = *(_DWORD *)&msg[28];
          return v20;
        }
      }
      else
      {
        uint64_t v20 = 4294966995;
      }
LABEL_23:
      mach_msg_destroy((mach_msg_header_t *)msg);
      return v20;
    }
    mig_dealloc_special_reply_port();
  }
  return v20;
}

BOOL create_f2d_private_port_source(uint64_t a1)
{
  uintptr_t v2 = *(unsigned int *)(a1 + 196);
  int v3 = dispatch_source_create(MEMORY[0x1E4F14460], v2, 1uLL, *(dispatch_queue_t *)(a1 + 352));
  if (v3)
  {
    FSEventStreamRetain((FSEventStreamRef)a1);
    dispatch_set_qos_class_fallback();
    handler[0] = MEMORY[0x1E4F143A8];
    handler[1] = 0x40000000;
    handler[2] = __create_f2d_private_port_source_block_invoke;
    handler[3] = &__block_descriptor_tmp_54;
    void handler[4] = a1;
    dispatch_source_set_event_handler(v3, handler);
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 0x40000000;
    v5[2] = __create_f2d_private_port_source_block_invoke_2;
    v5[3] = &__block_descriptor_tmp_55;
    int v6 = v2;
    void v5[4] = v3;
    void v5[5] = a1;
    dispatch_source_set_cancel_handler(v3, v5);
    *(void *)(a1 + 376) = v3;
    *(_DWORD *)(a1 + 384) = 1;
  }
  return v3 != 0;
}

uint64_t f2d_get_current_event_id_rpc(int a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  long long v10 = 0u;
  *(_OWORD *)&msg[20] = 0u;
  *(_DWORD *)&msg[4] = 0;
  mach_port_name_t special_reply_port = mig_get_special_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = special_reply_port;
  *(_DWORD *)msg = 5395;
  *(void *)&msg[16] = 0x101D300000000;
  if (MEMORY[0x1E4F14B18])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    mach_port_name_t special_reply_port = *(_DWORD *)&msg[12];
  }
  uint64_t v5 = mach_msg((mach_msg_header_t *)msg, 3162115, 0x18u, 0x34u, special_reply_port, 0, 0);
  uint64_t v6 = v5;
  if ((v5 - 268435458) > 0xE || ((1 << (v5 - 2)) & 0x4003) == 0)
  {
    if (!v5)
    {
      if (*(_DWORD *)&msg[20] == 71)
      {
        uint64_t v6 = 4294966988;
      }
      else if (*(_DWORD *)&msg[20] == 66103)
      {
        if ((*(_DWORD *)msg & 0x80000000) == 0)
        {
          if (*(_DWORD *)&msg[4] == 44)
          {
            if (!*(_DWORD *)&msg[8])
            {
              uint64_t v6 = *(unsigned int *)&msg[32];
              if (!*(_DWORD *)&msg[32])
              {
                *a2 = v10;
                return v6;
              }
              goto LABEL_22;
            }
          }
          else if (*(_DWORD *)&msg[4] == 36)
          {
            if (*(_DWORD *)&msg[8]) {
              BOOL v7 = 1;
            }
            else {
              BOOL v7 = *(_DWORD *)&msg[32] == 0;
            }
            if (v7) {
              uint64_t v6 = 4294966996;
            }
            else {
              uint64_t v6 = *(unsigned int *)&msg[32];
            }
            goto LABEL_22;
          }
        }
        uint64_t v6 = 4294966996;
      }
      else
      {
        uint64_t v6 = 4294966995;
      }
LABEL_22:
      mach_msg_destroy((mach_msg_header_t *)msg);
      return v6;
    }
    mig_dealloc_special_reply_port();
  }
  return v6;
}

void receive_and_dispatch_rcv_msg(mach_port_name_t a1)
{
  mach_msg_return_t v7;
  mach_msg_size_t v8;
  mach_msg_header_t *v9;
  NSObject *v10;
  NSObject *v11;
  void v12[2];

  v12[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *MEMORY[0x1E4F14B00];
  uint64_t v3 = ((uint64_t (*)(void))MEMORY[0x1F4188790])();
  int v4 = (mach_msg_header_t *)((char *)v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (_DWORD *)((char *)v12 - v5);
  BOOL v7 = mach_msg(v4, 50331910, 0, v2, a1, 0, 0);
  if (!v7)
  {
LABEL_8:
    int v9 = (mach_msg_header_t *)((char *)v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
    goto LABEL_9;
  }
  if (v7 != 268451844)
  {
    uint64_t v11 = fsevent_default_log();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      receive_and_dispatch_rcv_msg_cold_1();
    }
    goto LABEL_8;
  }
  BOOL v8 = v4->msgh_size + 68;
  int v9 = (mach_msg_header_t *)malloc_type_malloc(v8, 0x34984651uLL);
  if (mach_msg(v9, 262, 0, v8, a1, 0, 0))
  {
    long long v10 = fsevent_default_log();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      receive_and_dispatch_rcv_msg_cold_2();
    }
  }
LABEL_9:
  _DWORD *v6 = 0;
  v6[1] = v2;
  FSEventsD2F_server(v9, (uint64_t)v6);
  if (v9 != v4) {
    free(v9);
  }
}

uint64_t FSEventsD2F_server(_DWORD *a1, uint64_t a2)
{
  unsigned int v2 = a1[2];
  *(_DWORD *)a2 = *a1 & 0x1F;
  *(_DWORD *)(a2 + 4) = 36;
  int v3 = a1[5] + 100;
  *(void *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 20) = v3;
  if (a1[5] == 67000)
  {
    _Xcallback_rpc((uint64_t)a1, a2);
    return 1;
  }
  else
  {
    uint64_t result = 0;
    *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
    *(_DWORD *)(a2 + 32) = -303;
  }
  return result;
}

void _Xcallback_rpc(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 4 && *(_DWORD *)(a1 + 4) == 120)
  {
    if (*(unsigned char *)(a1 + 39) == 1 && *(unsigned char *)(a1 + 55) == 1 && *(unsigned char *)(a1 + 71) == 1 && *(unsigned char *)(a1 + 87) == 1)
    {
      int v3 = *(_DWORD *)(a1 + 40) >> 2;
      if (v3 == *(_DWORD *)(a1 + 104))
      {
        int v4 = *(_DWORD *)(a1 + 56) >> 2;
        if (v4 == *(_DWORD *)(a1 + 108))
        {
          int v5 = *(_DWORD *)(a1 + 72) >> 3;
          if (v5 == *(_DWORD *)(a1 + 112) && *(_DWORD *)(a1 + 88) == *(_DWORD *)(a1 + 116))
          {
            *(_DWORD *)(a2 + 32) = implementation_callback_rpc(*(_DWORD *)(a1 + 12), *(unsigned int *)(a1 + 100), *(void *)(a1 + 28), v3, *(unsigned char **)(a1 + 44), v4, *(__CFArray **)(a1 + 60), v5, *(char **)(a1 + 76), *(_DWORD *)(a1 + 88));
            mig_deallocate(*(void *)(a1 + 76), *(unsigned int *)(a1 + 88));
            *(void *)(a1 + 76) = 0;
            *(_DWORD *)(a1 + 88) = 0;
            mig_deallocate(*(void *)(a1 + 60), *(unsigned int *)(a1 + 72));
            *(void *)(a1 + 60) = 0;
            *(_DWORD *)(a1 + 72) = 0;
            mig_deallocate(*(void *)(a1 + 44), *(unsigned int *)(a1 + 56));
            *(void *)(a1 + 44) = 0;
            *(_DWORD *)(a1 + 56) = 0;
            mig_deallocate(*(void *)(a1 + 28), *(unsigned int *)(a1 + 40));
            *(void *)(a1 + 28) = 0;
            *(_DWORD *)(a1 + 40) = 0;
            return;
          }
        }
      }
    }
    int v6 = -300;
  }
  else
  {
    int v6 = -304;
  }
  *(_DWORD *)(a2 + 32) = v6;
  *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
}

uint64_t implementation_callback_rpc(int a1, uint64_t a2, uint64_t a3, int a4, unsigned char *a5, int a6, __CFArray *a7, int a8, char *a9, int a10)
{
  uint64_t v15 = a2;
  uint64_t v240 = *MEMORY[0x1E4F143B8];
  int valuePtr = a1;
  if (a2 != a4)
  {
    uint64_t v16 = fsevent_default_log();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      implementation_callback_rpc_cold_18();
    }
  }
  if (v15 != a6)
  {
    uint64_t v17 = fsevent_default_log();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      implementation_callback_rpc_cold_17();
    }
  }
  if (v15 == a8 || (CFAllocatorRef v18 = fsevent_default_log(), !os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)))
  {
    if (v15) {
      goto LABEL_10;
    }
LABEL_89:
    int64_t v104 = fsevent_default_log();
    if (os_log_type_enabled(v104, OS_LOG_TYPE_ERROR)) {
      implementation_callback_rpc_cold_1(v104, v105, v106, v107, v108, v109, v110, v111);
    }
    return 4294967278;
  }
  implementation_callback_rpc_cold_16();
  if (!v15) {
    goto LABEL_89;
  }
LABEL_10:
  CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFNumberRef v20 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
  if (!v20)
  {
    uint64_t v36 = fsevent_default_log();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR)) {
      implementation_callback_rpc_cold_2(v36, v37, v38, v39, v40, v41, v42, v43);
    }
    return 4294967279;
  }
  CFNumberRef v21 = v20;
  pthread_mutex_lock(&FSEvents_streamDict_mutex);
  Value = (char *)CFDictionaryGetValue((CFDictionaryRef)FSEvents_streamDict, v21);
  pthread_mutex_unlock(&FSEvents_streamDict_mutex);
  CFRelease(v21);
  if (!Value)
  {
    int v45 = fsevent_default_log();
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR)) {
      implementation_callback_rpc_cold_3(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    return 4294967286;
  }
  *(void *)&long long v225 = a3;
  uint64_t v23 = 0;
  LODWORD(v24) = 0;
  int v25 = 0;
  LODWORD(v230) = a10;
  v229 = a9;
  do
  {
    unsigned int v26 = *(_DWORD *)&a5[v23];
    int v27 = (v26 >> 29) | 4;
    if ((v26 & 0x80000000) == 0) {
      int v27 = (v26 >> 29) & 3;
    }
    int v28 = (v26 << 8) & 0x1000;
    if ((v26 & 0x20) != 0) {
      int v28 = 4096;
    }
    int8x16_t v29 = vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)vdupq_n_s32(v26), (uint32x4_t)xmmword_182AF8B50), (int8x16_t)xmmword_182AF8B60);
    int8x8_t v30 = vorr_s8(*(int8x8_t *)v29.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL));
    unsigned __int32 v31 = v30.i32[0] | v26 & 0x100000 | v30.i32[1] | (v26 >> 4) & 0x40000 | (((v26 >> 19) & 1) << 21) | (v26 << 8) & 0x400F00 | v28 | v27;
    if ((v26 & 0x40) != 0) {
      v31 |= 0xA000u;
    }
    int v32 = (v26 << 6) & 0x8000;
    if ((v26 & 0x400) != 0) {
      int v32 = 0x8000;
    }
    *(_DWORD *)&a5[v23] = (v26 >> 2) & 0x80000 | (((v26 >> 8) & 1) << 14) | (((v26 >> 7) & 1) << 8) | v32 | v31;
    if ((v31 & 6) != 0)
    {
      int v33 = *((_DWORD *)Value + 18);
      int v25 = 1;
    }
    else
    {
      int v33 = 1;
    }
    size_t v24 = (v33 + v24);
    v23 += 4;
  }
  while (4 * v15 != v23);
  int v34 = *((_DWORD *)Value + 46);
  if ((v34 & 0x40) != 0)
  {
    int v35 = malloc_type_calloc(v24, 8uLL, 0x100004000313F17uLL);
    if ((*((_DWORD *)Value + 46) & 0x100) != 0) {
      goto LABEL_27;
    }
LABEL_35:
    v228 = 0;
    goto LABEL_36;
  }
  int v35 = 0;
  if ((v34 & 0x100) == 0) {
    goto LABEL_35;
  }
LABEL_27:
  v228 = malloc_type_calloc(v24, 4uLL, 0x100004052888210uLL);
LABEL_36:
  if (v15 == 1 && (*a5 & 0x10) != 0)
  {
    if (!Value[190]) {
      return 0;
    }
    Value[190] = 0;
  }
  if (!Value[188]) {
    return 4294966297;
  }
  v227 = (const char **)malloc_type_malloc(8 * v24, 0x10040436913F5uLL);
  if (!v227)
  {
    long long v84 = fsevent_default_log();
    if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR)) {
      implementation_callback_rpc_cold_4(v84, v85, v86, v87, v88, v89, v90, v91);
    }
    char v92 = 0;
    uint64_t v44 = 4294967285;
    goto LABEL_227;
  }
  int64_t v219 = v15;
  unsigned int v53 = malloc_type_calloc(v24, 4uLL, 0x100004052888210uLL);
  v223 = v53;
  if (!v53)
  {
    uint64_t v93 = fsevent_default_log();
    if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR)) {
      implementation_callback_rpc_cold_5(v93, v94, v95, v96, v97, v98, v99, v100);
    }
    id v60 = 0;
    uint64_t v57 = 0;
    uint64_t v101 = 0;
    CFArrayRef v102 = 0;
    v103 = 0;
    uint64_t v44 = 4294967285;
    goto LABEL_210;
  }
  size_t v55 = v53;
  CFMutableArrayRef v224 = a7;
  if (!v25)
  {
    size_t v216 = 8 * v24;
    if (!v24)
    {
      uint64_t v57 = a5;
      id v60 = v224;
      goto LABEL_133;
    }
    uint64_t v217 = v15;
    CFAllocatorRef v221 = v19;
    LODWORD(v218) = 0;
    uint64_t v112 = v35;
    v113 = (int *)(v225 + 4);
    *(void *)&long long v54 = 136315394;
    long long v225 = v54;
    id v114 = v227;
    v115 = v228;
    size_t v116 = v24;
    v226 = v112;
    unsigned int v117 = v230;
    while (1)
    {
      if (*(v113 - 1) >= v117)
      {
        v118 = fsevent_default_log();
        BOOL v119 = os_log_type_enabled(v118, OS_LOG_TYPE_ERROR);
        unsigned int v117 = v230;
        if (v119)
        {
          *(_DWORD *)id buf = v225;
          v237 = "implementation_callback_rpc";
          __int16 v238 = 2080;
          v239 = "path_offsets[i] < paths_blobCnt";
          _os_log_error_impl(&dword_182959000, v118, OS_LOG_TYPE_ERROR, "%s(): failed assertion '%s'\n", buf, 0x16u);
          unsigned int v117 = v230;
        }
      }
      uint64_t v120 = *(v113 - 1);
      if (v120 >= v117) {
        uint64_t v121 = "ERROR: failed assertion: path_offsets[i] < paths_blobCnt";
      }
      else {
        uint64_t v121 = &v229[v120];
      }
      *id v114 = v121;
      if (v226)
      {
        int v122 = strlen(v121);
        unsigned int v117 = v230;
        int v123 = (int)v230;
        if (v24 != 1)
        {
          int v123 = (int)v230;
          if (v116 != 1) {
            int v123 = *v113;
          }
        }
        int v124 = v120 + v122 + 1;
        if (v124 == v123)
        {
          uint64_t v125 = 0;
        }
        else
        {
          if (v124 + 8 > (unint64_t)v123) {
            goto LABEL_110;
          }
          uint64_t v125 = *(void *)&v229[v124];
        }
        *uint64_t v112 = v125;
      }
LABEL_110:
      if (v228)
      {
        int v126 = strlen(v121);
        unsigned int v117 = v230;
        int v127 = (int)v230;
        if (v24 != 1)
        {
          int v127 = (int)v230;
          if (v116 != 1) {
            int v127 = *v113;
          }
        }
        int v128 = v120 + v126 + 9;
        if (v128 == v127)
        {
          int v129 = 0;
LABEL_118:
          _DWORD *v115 = v129;
          goto LABEL_119;
        }
        if (v128 + 4 <= (unint64_t)v127)
        {
          int v129 = *(_DWORD *)&v229[v128];
          goto LABEL_118;
        }
      }
LABEL_119:
      ++v115;
      ++v112;
      ++v113;
      ++v114;
      if (!--v116)
      {
        uint64_t v57 = a5;
        size_t v55 = v223;
        id v60 = v224;
LABEL_128:
        int v25 = (int)v218;
        int v35 = v226;
        CFAllocatorRef v19 = v221;
        LODWORD(v15) = v217;
        goto LABEL_133;
      }
    }
  }
  int v56 = malloc_type_malloc(4 * v24, 0x100004052888210uLL);
  if (!v56)
  {
    v131 = fsevent_default_log();
    if (os_log_type_enabled(v131, OS_LOG_TYPE_ERROR)) {
      implementation_callback_rpc_cold_13(v131, v132, v133, v134, v135, v136, v137, v138);
    }
    id v60 = 0;
    uint64_t v57 = 0;
    uint64_t v101 = 0;
    CFArrayRef v102 = 0;
    v103 = 0;
    uint64_t v44 = 4294967281;
    goto LABEL_210;
  }
  uint64_t v57 = v56;
  size_t v216 = 8 * v24;
  id v58 = malloc_type_malloc(v216, 0x100004000313F17uLL);
  if (!v58)
  {
    v139 = fsevent_default_log();
    if (os_log_type_enabled(v139, OS_LOG_TYPE_ERROR)) {
      implementation_callback_rpc_cold_14(v139, v140, v141, v142, v143, v144, v145, v146);
    }
    id v60 = 0;
    uint64_t v101 = 0;
    CFArrayRef v102 = 0;
    v103 = 0;
    uint64_t v44 = 4294967280;
    goto LABEL_210;
  }
  id v60 = v58;
  CFAllocatorRef v221 = v19;
  v226 = v35;
  LODWORD(v218) = v25;
  uint64_t v61 = v15;
  uint64_t v62 = 0;
  unsigned int v63 = 0;
  uint64_t v217 = v61;
  if (v61 <= 1) {
    uint64_t v64 = 1;
  }
  else {
    uint64_t v64 = v61;
  }
  *(void *)&long long v59 = 136315394;
  long long v215 = v59;
  unsigned int v65 = v230;
  *(void *)&long long v220 = v64;
  do
  {
    int v66 = *(_DWORD *)&a5[4 * v62];
    uint64_t v67 = *((void *)v224 + v62);
    if ((v66 & 6) == 0)
    {
      unsigned int v70 = *(_DWORD *)(v225 + 4 * v62);
      LODWORD(v222) = v63;
      if (v70 >= v65)
      {
        unsigned int v71 = fsevent_default_log();
        BOOL v72 = os_log_type_enabled(v71, OS_LOG_TYPE_ERROR);
        unsigned int v63 = v222;
        unsigned int v65 = v230;
        if (v72)
        {
          *(_DWORD *)id buf = v215;
          v237 = "implementation_callback_rpc";
          __int16 v238 = 2080;
          v239 = "path_offsets[i] < paths_blobCnt";
          _os_log_error_impl(&dword_182959000, v71, OS_LOG_TYPE_ERROR, "%s(): failed assertion '%s'\n", buf, 0x16u);
          unsigned int v63 = v222;
          unsigned int v65 = v230;
        }
      }
      uint64_t v73 = *(unsigned int *)(v225 + 4 * v62);
      uint64_t v74 = &v229[v73];
      if (v73 >= v65) {
        uint64_t v74 = "ERROR: failed assertion: path_offsets[i] < paths_blobCnt";
      }
      uint64_t v75 = v63;
      v227[v63] = v74;
      if (v226)
      {
        int v76 = strlen(v227[v62]);
        unsigned int v65 = v230;
        int v77 = (int)v230;
        if (v24 != 1)
        {
          int v77 = (int)v230;
          if (v62 != v24) {
            int v77 = *(_DWORD *)(v225 + 4 * v62 + 4);
          }
        }
        int v78 = v73 + v76 + 1;
        unsigned int v63 = v222;
        if (v78 == v77)
        {
          uint64_t v79 = 0;
        }
        else
        {
          if (v78 + 8 > (unint64_t)v77) {
            goto LABEL_69;
          }
          uint64_t v79 = *(void *)&v229[v78];
        }
        v226[v75] = v79;
      }
LABEL_69:
      if (v228)
      {
        int v80 = strlen(v227[v62]);
        unsigned int v65 = v230;
        int v81 = (int)v230;
        if (v24 != 1)
        {
          int v81 = (int)v230;
          if (v62 != v24) {
            int v81 = *(_DWORD *)(v225 + 4 * v62 + 4);
          }
        }
        int v82 = v73 + v80 + 9;
        unsigned int v63 = v222;
        if (v82 == v81)
        {
          int v83 = 0;
LABEL_77:
          v228[v75] = v83;
          goto LABEL_78;
        }
        if (v82 + 4 <= (unint64_t)v81)
        {
          int v83 = *(_DWORD *)&v229[v82];
          goto LABEL_77;
        }
      }
LABEL_78:
      v57[v75] = v66;
      v60[v75] = v67;
      ++v63;
      size_t v55 = v223;
      uint64_t v64 = v220;
      goto LABEL_79;
    }
    if (*((uint64_t *)Value + 9) >= 1)
    {
      uint64_t v68 = 0;
      uint64_t v69 = v227;
      do
      {
        (&v69[v63])[v68] = *(const char **)(*((void *)Value + 10) + 8 * v68);
        v55[v63 + v68] = *(_DWORD *)(*((void *)Value + 11) + 4 * v68);
        v57[v63 + v68] = v66 | 1;
        v60[v63 + v68++] = v67;
      }
      while (*((void *)Value + 9) > v68);
      v63 += v68;
    }
LABEL_79:
    ++v62;
  }
  while (v62 != v64);
  if (v63 == v24) {
    goto LABEL_128;
  }
  v130 = fsevent_default_log();
  int v25 = (int)v218;
  int v35 = v226;
  LODWORD(v15) = v217;
  if (os_log_type_enabled(v130, OS_LOG_TYPE_ERROR)) {
    implementation_callback_rpc_cold_15();
  }
  size_t v55 = v223;
  CFAllocatorRef v19 = v221;
LABEL_133:
  unint64_t v147 = 0;
  unint64_t v148 = *((void *)Value + 21);
  if (v148 == -1) {
    unint64_t v148 = 0;
  }
  if (v15 <= 1) {
    unsigned int v149 = 1;
  }
  else {
    unsigned int v149 = v15;
  }
  uint64_t v150 = 8 * v149;
  do
  {
    if (v60[v147 / 8] > v148) {
      unint64_t v148 = v60[v147 / 8];
    }
    v147 += 8;
  }
  while (v150 != v147);
  *((void *)Value + 21) = v148;
  int v151 = *((_DWORD *)Value + 46);
  if ((v151 & 0x40) != 0)
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable(v19, v219, MEMORY[0x1E4F1D510]);
    if (Mutable)
    {
      uint64_t v101 = Mutable;
      if (!v24)
      {
LABEL_175:
        v103 = 0;
        CFArrayRef v102 = 0;
        goto LABEL_176;
      }
      CFAllocatorRef v221 = v19;
      CFIndex v154 = 0;
      int64_t v219 = (int64_t)&v235;
      v218 = &v233;
      *(void *)&long long v153 = 136315394;
      long long v220 = v153;
      v229 = (char *)v35;
      CFMutableArrayRef v224 = Mutable;
      *(void *)&long long v225 = v228;
      v226 = v35;
      while (1)
      {
        long long v155 = v227[v154];
        int v156 = v223[v154];
        v230 = CFDictionaryCreateMutable(v221, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (!v230) {
          break;
        }
        char v157 = caller_path(v155, v156);
        CFStringRef v158 = CFStringCreateWithFileSystemRepresentation(v221, v157);
        if (v158)
        {
          CFStringRef v159 = v158;
          CFDictionaryAddValue(v230, @"path", v158);
          CFRelease(v159);
          int v35 = v226;
          uint64_t v101 = v224;
        }
        else
        {
          os_log_t v222 = (os_log_t)fsevent_default_log();
          int v35 = v226;
          uint64_t v101 = v224;
          if (os_log_type_enabled(v222, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)id buf = v220;
            v237 = "implementation_callback_rpc";
            __int16 v238 = 2080;
            v239 = v157;
            _os_log_error_impl(&dword_182959000, v222, OS_LOG_TYPE_ERROR, "%s: ERROR: CFStringCreateWithFileSystemRepresentation('%s') failed", buf, 0x16u);
          }
        }
        if ((*(_DWORD *)&a5[4 * v154] & 0x77FF00) != 0)
        {
          if (v35 && *(void *)v229)
          {
            CFNumberRef v160 = CFNumberCreate(v221, kCFNumberSInt64Type, v229);
            if (v160)
            {
              CFNumberRef v161 = v160;
              CFDictionaryAddValue(v230, @"fileID", v160);
              CFRelease(v161);
            }
            else
            {
              __int16 v162 = fsevent_default_log();
              if (os_log_type_enabled(v162, OS_LOG_TYPE_ERROR)) {
                implementation_callback_rpc_cold_11(v234, (void *)v219, v162);
              }
            }
          }
          if (v228 && *(_DWORD *)v225)
          {
            CFNumberRef v163 = CFNumberCreate(v221, kCFNumberSInt32Type, (const void *)v225);
            if (v163)
            {
              CFNumberRef v164 = v163;
              CFDictionaryAddValue(v230, @"docID", v163);
              CFRelease(v164);
            }
            else
            {
              id v165 = fsevent_default_log();
              if (os_log_type_enabled(v165, OS_LOG_TYPE_ERROR)) {
                implementation_callback_rpc_cold_11(v232, v218, v165);
              }
            }
          }
        }
        CFArraySetValueAtIndex(v101, v154, v230);
        CFRelease(v230);
        ++v154;
        *(void *)&long long v225 = v225 + 4;
        v229 += 8;
        if (v24 == v154) {
          goto LABEL_175;
        }
      }
      v188 = fsevent_default_log();
      if (os_log_type_enabled(v188, OS_LOG_TYPE_ERROR)) {
        implementation_callback_rpc_cold_10(v188, v189, v190, v191, v192, v193, v194, v195);
      }
      CFArrayRef v102 = 0;
      v103 = 0;
      uint64_t v44 = 4294967281;
      int v35 = v226;
      uint64_t v101 = v224;
      goto LABEL_210;
    }
    v180 = fsevent_default_log();
    if (os_log_type_enabled(v180, OS_LOG_TYPE_ERROR)) {
      implementation_callback_rpc_cold_9(v180, v181, v182, v183, v184, v185, v186, v187);
    }
    uint64_t v101 = 0;
    CFArrayRef v102 = 0;
    v103 = 0;
LABEL_191:
    uint64_t v44 = 4294967282;
    goto LABEL_210;
  }
  if (v151)
  {
    int v166 = (const void **)malloc_type_calloc(v24, 8uLL, 0x6004044C4A2DFuLL);
    if (!v166)
    {
      v196 = fsevent_default_log();
      if (os_log_type_enabled(v196, OS_LOG_TYPE_ERROR)) {
        implementation_callback_rpc_cold_6(v196, v197, v198, v199, v200, v201, v202, v203);
      }
      uint64_t v101 = 0;
      CFArrayRef v102 = 0;
      v103 = 0;
      uint64_t v44 = 4294967284;
      goto LABEL_210;
    }
    v103 = v166;
    v226 = v35;
    if (v24)
    {
      uint64_t v167 = 0;
      while (1)
      {
        v168 = caller_path(v227[v167], v55[v167]);
        CFStringRef v169 = CFStringCreateWithFileSystemRepresentation(v19, v168);
        if (!v169) {
          break;
        }
        v103[v167++] = v169;
        if (v24 == v167) {
          goto LABEL_173;
        }
      }
      v204 = fsevent_default_log();
      if (os_log_type_enabled(v204, OS_LOG_TYPE_ERROR)) {
        implementation_callback_rpc_cold_8();
      }
      uint64_t v101 = 0;
      CFArrayRef v102 = 0;
      uint64_t v44 = 4294967283;
      int v35 = v226;
      goto LABEL_210;
    }
LABEL_173:
    CFArrayRef v170 = CFArrayCreate(v19, v103, v24, MEMORY[0x1E4F1D510]);
    if (v170)
    {
      CFArrayRef v102 = v170;
      uint64_t v101 = 0;
      int v35 = v226;
      goto LABEL_176;
    }
    v205 = fsevent_default_log();
    int v35 = v226;
    if (os_log_type_enabled(v205, OS_LOG_TYPE_ERROR)) {
      implementation_callback_rpc_cold_7(v205, v206, v207, v208, v209, v210, v211, v212);
    }
    uint64_t v101 = 0;
    CFArrayRef v102 = 0;
    goto LABEL_191;
  }
  v103 = 0;
  CFArrayRef v102 = 0;
  uint64_t v101 = 0;
LABEL_176:
  if (*((void *)Value + 2) && Value[188] && !Value[189])
  {
    FSEventStreamRetain((FSEventStreamRef)Value);
    int v171 = *((_DWORD *)Value + 46);
    if ((v171 & 0x40) != 0)
    {
      (*((void (**)(char *, void, size_t, __CFArray *, _DWORD *, void *))Value + 2))(Value, *((void *)Value + 4), v24, v101, v57, v60);
    }
    else if (v171)
    {
      (*((void (**)(char *, void, size_t, CFArrayRef, _DWORD *, void *))Value + 2))(Value, *((void *)Value + 4), v24, v102, v57, v60);
    }
    else
    {
      CFMutableArrayRef v224 = v101;
      v226 = v35;
      LODWORD(v218) = v25;
      v229 = (char *)&v215;
      MEMORY[0x1F4188790]();
      if (v216 >= 0x200) {
        size_t v173 = 512;
      }
      else {
        size_t v173 = v216;
      }
      v230 = (__CFDictionary *)((char *)&v215 - ((v172 + 15) & 0xFFFFFFFF0));
      bzero(v230, v173);
      if (v24)
      {
        size_t v174 = v24;
        v175 = v230;
        v176 = v223;
        v177 = v227;
        do
        {
          v179 = *v177++;
          v178 = v179;
          LODWORD(v179) = *v176++;
          *(void *)v175 = caller_path(v178, (char)v179);
          v175 = (__CFDictionary *)((char *)v175 + 8);
          --v174;
        }
        while (v174);
      }
      (*((void (**)(char *, void, size_t, __CFDictionary *, _DWORD *, void *))Value + 2))(Value, *((void *)Value + 4), v24, v230, v57, v60);
      int v25 = (int)v218;
      int v35 = v226;
      uint64_t v101 = v224;
    }
    if (*((void *)Value + 45))
    {
      pthread_mutex_lock((pthread_mutex_t *)(Value + 240));
      pthread_cond_signal((pthread_cond_t *)(Value + 304));
      pthread_mutex_unlock((pthread_mutex_t *)(Value + 240));
    }
    FSEventStreamRelease((FSEventStreamRef)Value);
  }
  uint64_t v44 = 0;
LABEL_210:
  free(v227);
  if (v57 && v25) {
    free(v57);
  }
  if (v60 && v25) {
    free(v60);
  }
  if (v103)
  {
    if (v24)
    {
      v213 = v103;
      do
      {
        if (!*v213) {
          break;
        }
        CFRelease(*v213++);
        --v24;
      }
      while (v24);
    }
    free(v103);
  }
  if (v102) {
    CFRelease(v102);
  }
  if (v101) {
    CFRelease(v101);
  }
  char v92 = v223;
LABEL_227:
  if (v35) {
    free(v35);
  }
  free(v92);
  return v44;
}

const char *caller_path(const char *a1, char a2)
{
  unsigned int v2 = a1;
  if (!(a2 & 3 | strncmp(a1, "/System/Volumes/Data/", 0x15uLL)))
  {
    if (!strncmp(v2 + 20, "/Device/", 8uLL)) {
      v2 += 27;
    }
    else {
      v2 += 20;
    }
  }
  return v2;
}

void FSEventStreamRelease(FSEventStreamRef streamRef)
{
  if (streamRef)
  {
    if ((int)atomic_fetch_add((atomic_uint *volatile)streamRef, 0xFFFFFFFF) <= 1)
    {
      if ((*(_DWORD *)streamRef & 0x80000000) != 0)
      {
        unsigned int v2 = fsevent_default_log();
        if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
          FSEventStreamRelease_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
        }
      }
      else
      {
        _FSEventStreamDeallocate((char *)streamRef);
      }
    }
  }
  else
  {
    uint64_t v1 = fsevent_default_log();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
      FSEventStreamRelease_cold_1();
    }
  }
}

void FSEventStreamRetain(FSEventStreamRef streamRef)
{
  if (streamRef)
  {
    atomic_fetch_add((atomic_uint *volatile)streamRef, 1u);
  }
  else
  {
    uint64_t v1 = fsevent_default_log();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
      FSEventStreamRetain_cold_1();
    }
  }
}

FSEventStreamRef FSEventStreamCreateRelativeToDevice(CFAllocatorRef allocator, FSEventStreamCallback callback, FSEventStreamContext *context, dev_t deviceToWatch, CFArrayRef pathsToWatchRelativeToDevice, FSEventStreamEventId sinceWhen, CFTimeInterval latency, FSEventStreamCreateFlags flags)
{
  if (deviceToWatch > 0) {
    return (FSEventStreamRef)_FSEventStreamCreate("FSEventStreamCreateRelativeToDevice", allocator, (uint64_t)callback, (long long *)&context->version, deviceToWatch, pathsToWatchRelativeToDevice, sinceWhen, (unint64_t)(latency * 1000000.0), flags);
  }
  uint64_t v9 = fsevent_default_log();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
    FSEventStreamCreateRelativeToDevice_cold_1();
  }
  return 0;
}

FSEventStreamRef FSEventStreamCreate(CFAllocatorRef allocator, FSEventStreamCallback callback, FSEventStreamContext *context, CFArrayRef pathsToWatch, FSEventStreamEventId sinceWhen, CFTimeInterval latency, FSEventStreamCreateFlags flags)
{
  return (FSEventStreamRef)_FSEventStreamCreate("FSEventStreamCreate", allocator, (uint64_t)callback, (long long *)&context->version, 0, pathsToWatch, sinceWhen, (unint64_t)(latency * 1000000.0), flags);
}

Boolean FSEventStreamSetExclusionPaths(FSEventStreamRef streamRef, CFArrayRef pathsToExclude)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)streamRef + 188)) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(pathsToExclude);
  *((void *)streamRef + 12) = Count;
  if (Count && Count <= 8)
  {
    if (Count >= 1)
    {
      CFIndex v6 = 0;
      while (1)
      {
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(pathsToExclude, v6);
        CFTypeID TypeID = CFStringGetTypeID();
        if (TypeID != CFGetTypeID(ValueAtIndex) || !CFStringGetFileSystemRepresentation(ValueAtIndex, buffer, 1024)) {
          break;
        }
        if (*((_DWORD *)streamRef + 16) || !fsevent_realpath(buffer, __s1)) {
          __strlcpy_chk();
        }
        *((void *)streamRef + v6++ + 13) = strdup(__s1);
        if (*((void *)streamRef + 12) <= v6) {
          return 1;
        }
      }
      return 0;
    }
    return 1;
  }
  else
  {
    Boolean result = 0;
    *((void *)streamRef + 12) = 0;
  }
  return result;
}

char *_FSEventStreamCreate(const char *a1, const __CFAllocator *Default, uint64_t a3, long long *a4, int a5, CFArrayRef theArray, uint64_t a7, uint64_t a8, int a9)
{
  v81[127] = *MEMORY[0x1E4F143B8];
  if ((a9 & 0x41) == 0x40)
  {
    uint64_t v9 = fsevent_default_log();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      _FSEventStreamCreate_cold_1();
    }
    return 0;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  if ((const __CFAllocator *)*MEMORY[0x1E4F1CF80] == Default) {
    Default = CFAllocatorGetDefault();
  }
  uint64_t v16 = (char *)CFAllocatorAllocate(Default, 456, 0);
  if (!v16)
  {
    uint64_t v49 = fsevent_default_log();
    if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR)) {
      _FSEventStreamCreate_cold_2((uint64_t)a1, v49);
    }
    return 0;
  }
  uint64_t v17 = v16;
  *((void *)v16 + 56) = 0;
  *((_OWORD *)v16 + 26) = 0u;
  *((_OWORD *)v16 + 27) = 0u;
  *((_OWORD *)v16 + 24) = 0u;
  *((_OWORD *)v16 + 25) = 0u;
  *((_OWORD *)v16 + 22) = 0u;
  *((_OWORD *)v16 + 23) = 0u;
  *((_OWORD *)v16 + 20) = 0u;
  *((_OWORD *)v16 + 21) = 0u;
  *((_OWORD *)v16 + 18) = 0u;
  *((_OWORD *)v16 + 19) = 0u;
  *((_OWORD *)v16 + 16) = 0u;
  *((_OWORD *)v16 + 17) = 0u;
  *((_OWORD *)v16 + 14) = 0u;
  *((_OWORD *)v16 + 15) = 0u;
  *((_OWORD *)v16 + 12) = 0u;
  *((_OWORD *)v16 + 13) = 0u;
  *((_OWORD *)v16 + 10) = 0u;
  *((_OWORD *)v16 + 11) = 0u;
  *((_OWORD *)v16 + 8) = 0u;
  *((_OWORD *)v16 + 9) = 0u;
  *((_OWORD *)v16 + 6) = 0u;
  *((_OWORD *)v16 + 7) = 0u;
  *((_OWORD *)v16 + 4) = 0u;
  *((_OWORD *)v16 + 5) = 0u;
  *((_OWORD *)v16 + 2) = 0u;
  *((_OWORD *)v16 + 3) = 0u;
  *(_OWORD *)uint64_t v16 = 0u;
  *((_OWORD *)v16 + 1) = 0u;
  *((void *)v16 + 1) = Default;
  CFRetain(Default);
  *((void *)v17 + 2) = a3;
  if (a4)
  {
    long long v18 = *a4;
    long long v19 = a4[1];
    *((void *)v17 + 7) = *((void *)a4 + 4);
    *(_OWORD *)(v17 + 40) = v19;
    *(_OWORD *)(v17 + 24) = v18;
  }
  CFNumberRef v20 = (void (*)(void))*((void *)v17 + 5);
  if (v20) {
    v20(*((void *)v17 + 4));
  }
  *((_DWORD *)v17 + 16) = a5;
  *((void *)v17 + 9) = Count;
  *((void *)v17 + 10) = CFAllocatorAllocate(Default, 8 * Count, 0);
  *((void *)v17 + 11) = CFAllocatorAllocate(Default, 4 * Count, 0);
  CFNumberRef v21 = (void *)*((void *)v17 + 10);
  if (!v21)
  {
    uint64_t v50 = fsevent_default_log();
    if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR)) {
      _FSEventStreamCreate_cold_3((uint64_t)a1);
    }
    goto LABEL_89;
  }
  bzero(v21, 8 * Count);
  bzero(*((void **)v17 + 11), 4 * Count);
  if ((a9 & 4) == 0)
  {
    *((_DWORD *)v17 + 102) = -1;
    goto LABEL_14;
  }
  int v51 = kqueue();
  *((_DWORD *)v17 + 102) = v51;
  if (v51 < 0)
  {
    long long v54 = fsevent_default_log();
    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR)) {
      _FSEventStreamCreate_cold_7();
    }
    goto LABEL_89;
  }
  uint64_t v52 = CFAllocatorAllocate(Default, 32 * Count, 0);
  *((void *)v17 + 49) = v52;
  if (!v52)
  {
    size_t v55 = fsevent_default_log();
    if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR)) {
      _FSEventStreamCreate_cold_8((uint64_t)a1);
    }
    goto LABEL_89;
  }
  bzero(v52, 32 * Count);
  unsigned int v53 = CFAllocatorAllocate(Default, 32 * Count, 0);
  *((void *)v17 + 50) = v53;
  if (!v53)
  {
    long long v59 = fsevent_default_log();
    if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR)) {
      _FSEventStreamCreate_cold_9((uint64_t)a1);
    }
LABEL_89:
    _FSEventStreamDeallocate(v17);
    return 0;
  }
  bzero(v53, 32 * Count);
LABEL_14:
  if (Count >= 1)
  {
    for (CFIndex i = 0; i != Count; ++i)
    {
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, i);
      CFTypeID TypeID = CFStringGetTypeID();
      if (TypeID != CFGetTypeID(ValueAtIndex))
      {
        int v56 = fsevent_default_log();
        if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR)) {
          _FSEventStreamCreate_cold_6(i, (uint64_t)a1);
        }
        goto LABEL_89;
      }
      if (!CFStringGetFileSystemRepresentation(ValueAtIndex, buffer, 1024))
      {
        uint64_t v57 = fsevent_default_log();
        if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR)) {
          _FSEventStreamCreate_cold_4();
        }
        goto LABEL_89;
      }
      if (a5)
      {
        int v25 = 1000;
        while (1)
        {
          int v26 = getfsstat(0, 0, 2);
          if (v26 < 0) {
            goto LABEL_33;
          }
          int v27 = 2168 * (v26 + 1);
          int v28 = (statfs *)malloc_type_malloc(2168 * (v26 + 1), 0xD7006919uLL);
          if (!v28) {
            goto LABEL_33;
          }
          int8x16_t v29 = v28;
          unsigned int v30 = getfsstat(v28, v27, 2);
          if ((v30 & 0x80000000) == 0) {
            break;
          }
          free(v29);
          if (!--v25) {
            goto LABEL_33;
          }
        }
        if (!v30)
        {
LABEL_33:
          unsigned __int32 v31 = buffer;
          __strlcpy_chk();
LABEL_34:
          *(_DWORD *)(*((void *)v17 + 11) + 4 * i) |= 2u;
          goto LABEL_35;
        }
        uint64_t v32 = 0;
        while (1)
        {
          int v33 = &v29[v32];
          if (v29[v32].f_fsid.val[0] == a5) {
            break;
          }
          if (v30 == ++v32)
          {
            unsigned __int32 v31 = buffer;
            __strlcpy_chk();
LABEL_64:
            free(v29);
            goto LABEL_34;
          }
        }
        f_mntonname = v33->f_mntonname;
        snprintf(__s, 0x400uLL, "%s/%s", v33->f_mntonname, buffer);
        if (realpath_DARWIN_EXTSN(__s, __s1))
        {
          size_t v47 = strlen(f_mntonname);
          if (__s1[v47] == 47) {
            unsigned __int32 v31 = &__s1[v47 + 1];
          }
          else {
            unsigned __int32 v31 = &__s1[v47];
          }
          goto LABEL_64;
        }
        free(v29);
      }
      else
      {
        unsigned __int32 v31 = __s1;
        if (fsevent_realpath(buffer, __s1)) {
          goto LABEL_35;
        }
      }
      if (buffer[0] == 47)
      {
        unsigned __int32 v31 = buffer;
        __strlcpy_chk();
      }
      else
      {
        unsigned __int32 v31 = __s1;
        getcwd(__s1, 0x400uLL);
        __strlcat_chk();
        __strlcat_chk();
      }
LABEL_35:
      size_t v34 = (int)(strlen(v31) + 1);
      *(void *)(*((void *)v17 + 10) + 8 * i) = CFAllocatorAllocate(Default, v34, 0);
      int v35 = *(char **)(*((void *)v17 + 10) + 8 * i);
      if (!v35)
      {
        id v58 = fsevent_default_log();
        if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR)) {
          _FSEventStreamCreate_cold_5((uint64_t)a1);
        }
        goto LABEL_89;
      }
      strlcpy(v35, v31, v34);
      if (*(void *)buffer == 0x2F6D65747379532FLL
        && v81[0] == 0x2F73656D756C6F56
        && *(void *)((char *)v81 + 5) == 0x2F617461442F7365)
      {
        *(_DWORD *)(*((void *)v17 + 11) + 4 * i) |= 1u;
        if ((a9 & 4) == 0) {
          continue;
        }
      }
      else if ((a9 & 4) == 0)
      {
        continue;
      }
      uint64_t v38 = *((void *)v17 + 49);
      CFIndex v39 = v38 + 32 * i;
      *(_DWORD *)(v39 + 4) = -1;
      if (!*((_DWORD *)v17 + 16) || __s1[0] == 47)
      {
        *(void *)(v39 + 24) = strdup(__s1);
      }
      else
      {
        if (!realpath_DARWIN_EXTSN(*(const char **)(*((void *)v17 + 10) + 8 * i), __s))
        {
          getcwd(__s, 0x400uLL);
          int v40 = strlen(__s);
          __s[v40] = 47;
          strlcpy(&__s[v40 + 1], *(const char **)(*((void *)v17 + 10) + 8 * i), 1024 - (v40 + 1));
        }
        *(void *)(*((void *)v17 + 49) + 32 * i + 24) = strdup(__s);
        uint64_t v38 = *((void *)v17 + 49);
      }
      uint64_t v41 = (_DWORD *)(v38 + 32 * i);
      _DWORD *v41 = 8;
      int v42 = watch_path(a1, *((_DWORD *)v17 + 102), __s1, *((void *)v17 + 50) + 32 * i, (uint64_t)v41, i);
      if (v42)
      {
        int v43 = v42;
        uint64_t v44 = fsevent_default_log();
        if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
        {
          uint64_t v48 = strerror(v43);
          *(_DWORD *)__s = 136316674;
          uint64_t v68 = a1;
          __int16 v69 = 2080;
          unsigned int v70 = "_FSEventStreamCreate";
          __int16 v71 = 2080;
          BOOL v72 = v31;
          __int16 v73 = 2080;
          *(void *)uint64_t v74 = __s1;
          *(_WORD *)&v74[8] = 1024;
          *(_DWORD *)&v74[10] = i;
          __int16 v75 = 1024;
          int v76 = v43;
          __int16 v77 = 2080;
          int v78 = v48;
          _os_log_error_impl(&dword_182959000, v44, OS_LOG_TYPE_ERROR, "%s: %s: ERROR: watch_path() failed for srcPath='%s' resolvedPath='%s' index=%d (%d):(%s)", (uint8_t *)__s, 0x40u);
        }
        if ((v43 - 23) < 2) {
          goto LABEL_89;
        }
      }
      int v45 = watch_all_parents((uint64_t)a1, *((_DWORD *)v17 + 102), __s1, *((void *)v17 + 49) + 32 * i, i);
      if (v45)
      {
        int v60 = v45;
        uint64_t v61 = fsevent_default_log();
        if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
        {
          unsigned int v63 = strerror(v60);
          *(_DWORD *)__s = 136316162;
          uint64_t v68 = a1;
          __int16 v69 = 2080;
          unsigned int v70 = "_FSEventStreamCreate";
          __int16 v71 = 2080;
          BOOL v72 = v31;
          __int16 v73 = 1024;
          *(_DWORD *)uint64_t v74 = v60;
          *(_WORD *)&v74[4] = 2080;
          *(void *)&v74[6] = v63;
          _os_log_error_impl(&dword_182959000, v61, OS_LOG_TYPE_ERROR, "%s: %s: ERROR: watch_all_parents() failed for '%s' (%d):(%s)", (uint8_t *)__s, 0x30u);
        }
        goto LABEL_89;
      }
    }
  }
  *((void *)v17 + 21) = a7;
  *((void *)v17 + 22) = a8;
  *((_DWORD *)v17 + 46) = a9;
  v17[188] = 0;
  v17[190] = a7 != -1;
  *((void *)v17 + 27) = 0;
  *((void *)v17 + 45) = 0;
  *((void *)v17 + 54) = 0;
  *((void *)v17 + 24) = 0;
  *((void *)v17 + 25) = 0;
  *(_DWORD *)uint64_t v17 = 1;
  return v17;
}

char *fsevent_realpath(const char *a1, char *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  long long v4 = xmmword_182AF8B70;
  memset(v7, 0, 512);
  int v5 = 0;
  int v6 = 32;
  DWORD1(v4) = 0x80000000;
  if (getattrlist(a1, &v4, v7, 0x420uLL, 0x20u) == -1) {
    return 0;
  }
  if (!a2) {
    return (char *)&v7[1] + SDWORD2(v7[1]) + 8;
  }
  strlcpy(a2, (const char *)&v7[1] + SDWORD2(v7[1]) + 8, 0x400uLL);
  return a2;
}

void sub_1829B92CC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Block_object_dispose((const void *)(v2 - 96), 8);
  _Unwind_Resume(a1);
}

void ___ZL16getPropertyTablev_block_invoke()
{
  {
    uint64_t v12 = *MEMORY[0x1E4F1CDE0];
    once_createPropertyTable(void)::baseDependencyKeys = *MEMORY[0x1E4F1D738];
    *(void *)algn_1EB20DB78 = v12;
    uint64_t v13 = *MEMORY[0x1E4F1D688];
    qword_1EB20DB80 = *MEMORY[0x1E4F1D678];
    unk_1EB20DB88 = v13;
    uint64_t v14 = *MEMORY[0x1E4F1CEA8];
    qword_1EB20DB90 = *MEMORY[0x1E4F1D748];
    unk_1EB20DB98 = v14;
    uint64_t v15 = *MEMORY[0x1E4F1D668];
    qword_1EB20DBA0 = *MEMORY[0x1E4F1CED0];
    unk_1EB20DBA8 = v15;
    uint64_t v16 = *MEMORY[0x1E4F1D660];
    qword_1EB20DBB0 = *MEMORY[0x1E4F1D6E8];
    unk_1EB20DBB8 = v16;
  }
  {
    uint64_t v17 = *MEMORY[0x1E4F1CDE0];
    once_createPropertyTable(void)::isApplicationDependencyKeys = *MEMORY[0x1E4F1D738];
    unk_1EB20DC90 = v17;
    uint64_t v18 = *MEMORY[0x1E4F1D688];
    qword_1EB20DC98 = *MEMORY[0x1E4F1D678];
    unk_1EB20DCA0 = v18;
    uint64_t v19 = *MEMORY[0x1E4F1CEA8];
    qword_1EB20DCA8 = *MEMORY[0x1E4F1D748];
    unk_1EB20DCB0 = v19;
    uint64_t v20 = *MEMORY[0x1E4F1D668];
    qword_1EB20DCB8 = *MEMORY[0x1E4F1CED0];
    unk_1EB20DCC0 = v20;
    uint64_t v21 = *MEMORY[0x1E4F1D588];
    qword_1EB20DCC8 = *MEMORY[0x1E4F1D6E8];
    unk_1EB20DCD0 = v21;
  }
  uint64_t v1 = (uint64_t *)MEMORY[0x1E4F1D718];
  if ((explicit & 1) == 0
  {
    uint64_t v22 = *v1;
    once_createPropertyTable(void)::distinctLocalizedNameKeys = *MEMORY[0x1E4F1D738];
    *(void *)algn_1EB20DC78 = v22;
  }
  {
    uint64_t v23 = *MEMORY[0x1E4F1D8B0];
    once_createPropertyTable(void)::volLocNameDependencyKeys = *MEMORY[0x1E4F1D980];
    unk_1EB20DC40 = v23;
    uint64_t v24 = *MEMORY[0x1E4F1D6E8];
    qword_1EB20DC48 = *MEMORY[0x1E4F1D738];
    unk_1EB20DC50 = v24;
    uint64_t v25 = *MEMORY[0x1E4F1D678];
    qword_1EB20DC58 = *MEMORY[0x1E4F1D698];
    unk_1EB20DC60 = v25;
  }
  {
    once_createPropertyTable(void)::canSetHiddenExtensionKeys = *v1;
  }
  {
    once_createPropertyTable(void)::hiddenBySystemDependencyKeys = *MEMORY[0x1E4F1D670];
  }
  {
    uint64_t v26 = *MEMORY[0x1E4F1CDE0];
    once_createPropertyTable(void)::bindingDependencyKeys = *MEMORY[0x1E4F1D738];
    *(void *)algn_1EB20DC08 = v26;
    uint64_t v27 = *MEMORY[0x1E4F1D748];
    qword_1EB20DC10 = *MEMORY[0x1E4F1CE20];
    unk_1EB20DC18 = v27;
    uint64_t v28 = *MEMORY[0x1E4F1CEA8];
    qword_1EB20DC20 = *MEMORY[0x1E4F1D588];
    unk_1EB20DC28 = v28;
    qword_1EB20DC30 = *MEMORY[0x1E4F1CED0];
  }
  uint64_t v3 = (uint64_t *)MEMORY[0x1E4F1D778];
  {
    once_createPropertyTable(void)::typeDescriptionKeys = *v3;
  }
  {
    uint64_t v4 = *MEMORY[0x1E4F1D670];
  }
  else
  {
    uint64_t v4 = *MEMORY[0x1E4F1D670];
    if (v29)
    {
      once_createPropertyTable(void)::architecturesDependencyKeys = *MEMORY[0x1E4F1D670];
    }
  }
  uint64_t v5 = *MEMORY[0x1E4F1D6A0];
  uint64_t v6 = *MEMORY[0x1E4F1CD50];
  uint64_t v7 = *MEMORY[0x1E4F1CD48];
  uint64_t v8 = *v1;
  uint64_t v9 = *MEMORY[0x1E4F1CDA0];
  uint64_t v10 = *MEMORY[0x1E4F1CE88];
  uint64_t v30 = *MEMORY[0x1E4F1CE90];
  uint64_t v31 = *MEMORY[0x1E4F1CE80];
  uint64_t v32 = *MEMORY[0x1E4F1CD78];
  uint64_t v33 = *v3;
  uint64_t v34 = *MEMORY[0x1E4F1CD90];
  uint64_t v35 = *MEMORY[0x1E4F1D720];
  uint64_t v36 = *MEMORY[0x1E4F1CE98];
  uint64_t v37 = *MEMORY[0x1E4F1CD70];
  uint64_t v38 = *MEMORY[0x1E4F1CDF8];
  uint64_t v39 = *MEMORY[0x1E4F1CD60];
  uint64_t v40 = *MEMORY[0x1E4F1CD38];
  uint64_t v41 = *MEMORY[0x1E4F1D898];
  uint64_t v42 = *MEMORY[0x1E4F1CD40];
  uint64_t v11 = (char *)operator new(0x4D0uLL);
  *(void *)uint64_t v11 = v5;
  *((void *)v11 + 1) = 1;
  *((void *)v11 + 2) = LaunchServices::URLPropertyProvider::prepareIsPackageValue;
  *((void *)v11 + 3) = LaunchServices::URLPropertyProvider::prepareIsPackageMimic;
  *((void *)v11 + 4) = LaunchServices::URLPropertyProvider::setIsPackageValue;
  *((void *)v11 + 5) = &once_createPropertyTable(void)::baseDependencyKeys;
  *((void *)v11 + 6) = 10;
  *((void *)v11 + 7) = v4;
  *((void *)v11 + 8) = 0;
  *((void *)v11 + 9) = LaunchServices::URLPropertyProvider::prepareIsApplicationValue;
  *((void *)v11 + 10) = LaunchServices::URLPropertyProvider::prepareIsApplicationMimic;
  *((void *)v11 + 11) = 0;
  *((void *)v11 + 12) = &once_createPropertyTable(void)::isApplicationDependencyKeys;
  *((void *)v11 + 13) = 10;
  *((void *)v11 + 14) = v6;
  *((void *)v11 + 15) = 0;
  *((void *)v11 + 16) = LaunchServices::URLPropertyProvider::prepareApplicationFlags;
  *((void *)v11 + 17) = LaunchServices::URLPropertyProvider::prepareAppFlagsMimic;
  *((void *)v11 + 18) = 0;
  *((void *)v11 + 19) = &once_createPropertyTable(void)::baseDependencyKeys;
  *((void *)v11 + 20) = 10;
  *((void *)v11 + 21) = v7;
  *((void *)v11 + 22) = 0;
  *((void *)v11 + 23) = LaunchServices::URLPropertyProvider::prepareApplicationFlags;
  *((void *)v11 + 24) = LaunchServices::URLPropertyProvider::prepareAppFlagsMimic;
  *((void *)v11 + 25) = 0;
  *((void *)v11 + 26) = &once_createPropertyTable(void)::baseDependencyKeys;
  *((void *)v11 + 27) = 10;
  *((void *)v11 + 28) = v8;
  *((void *)v11 + 29) = 1;
  *((void *)v11 + 30) = LaunchServices::URLPropertyProvider::prepareLocalizedNameValue;
  *((void *)v11 + 31) = LaunchServices::URLPropertyProvider::prepareDNCMimic;
  *((void *)v11 + 32) = 0;
  *((void *)v11 + 33) = &once_createPropertyTable(void)::baseDependencyKeys;
  *((void *)v11 + 34) = 10;
  *((void *)v11 + 35) = v9;
  *((void *)v11 + 36) = 0;
  *((void *)v11 + 37) = LaunchServices::URLPropertyProvider::prepareDistinctLocalizedNameValue;
  *((_OWORD *)v11 + 19) = 0u;
  *((void *)v11 + 40) = &once_createPropertyTable(void)::distinctLocalizedNameKeys;
  *((void *)v11 + 41) = 2;
  *((void *)v11 + 42) = v10;
  *((void *)v11 + 43) = 0;
  *((void *)v11 + 44) = LaunchServices::URLPropertyProvider::prepareLocalizedNameDictionaryValue;
  *((void *)v11 + 45) = LaunchServices::URLPropertyProvider::prepareDNCMimic;
  *((void *)v11 + 46) = 0;
  *((void *)v11 + 47) = &once_createPropertyTable(void)::baseDependencyKeys;
  *((void *)v11 + 48) = 10;
  *((void *)v11 + 49) = v30;
  *((void *)v11 + 50) = 0;
  *((void *)v11 + 51) = LaunchServices::URLPropertyProvider::prepareLocalizedNameDictionaryValue;
  *((void *)v11 + 52) = LaunchServices::URLPropertyProvider::prepareDNCMimic;
  *((void *)v11 + 53) = 0;
  *((void *)v11 + 54) = &once_createPropertyTable(void)::baseDependencyKeys;
  *((void *)v11 + 55) = 10;
  *((void *)v11 + 56) = v31;
  *((void *)v11 + 57) = 0;
  *((void *)v11 + 58) = LaunchServices::URLPropertyProvider::prepareLocalizedNameComponentsValue;
  *((void *)v11 + 59) = LaunchServices::URLPropertyProvider::prepareDNCMimic;
  *((void *)v11 + 60) = 0;
  *((void *)v11 + 61) = &once_createPropertyTable(void)::baseDependencyKeys;
  *((void *)v11 + 62) = 10;
  *((void *)v11 + 63) = v32;
  *((void *)v11 + 64) = 0;
  *((void *)v11 + 65) = LaunchServices::URLPropertyProvider::prepareCanSetHiddenExtensionValue;
  *((void *)v11 + 66) = LaunchServices::URLPropertyProvider::prepareDNCMimic;
  *((void *)v11 + 67) = 0;
  *((void *)v11 + 68) = &once_createPropertyTable(void)::canSetHiddenExtensionKeys;
  *((void *)v11 + 69) = 1;
  *((void *)v11 + 70) = v33;
  *((void *)v11 + 71) = 1;
  *((void *)v11 + 72) = LaunchServices::URLPropertyProvider::prepareTypeIdentifierAndObjectValue;
  *((void *)v11 + 73) = LaunchServices::URLPropertyProvider::prepareTypeMimic;
  *((void *)v11 + 74) = 0;
  *((void *)v11 + 75) = &once_createPropertyTable(void)::bindingDependencyKeys;
  *((void *)v11 + 76) = 7;
  *((void *)v11 + 77) = v34;
  *((void *)v11 + 78) = 1;
  *((void *)v11 + 79) = LaunchServices::URLPropertyProvider::prepareTypeIdentifierAndObjectValue;
  *((void *)v11 + 80) = LaunchServices::URLPropertyProvider::prepareTypeMimic;
  *((void *)v11 + 81) = 0;
  *((void *)v11 + 82) = &once_createPropertyTable(void)::bindingDependencyKeys;
  *((void *)v11 + 83) = 7;
  *((void *)v11 + 84) = v35;
  *((void *)v11 + 85) = 1;
  *((void *)v11 + 86) = LaunchServices::URLPropertyProvider::prepareLocalizedTypeDescriptionValue;
  *((void *)v11 + 87) = LaunchServices::URLPropertyProvider::prepareBindingMimic;
  *((void *)v11 + 88) = 0;
  *((void *)v11 + 89) = &once_createPropertyTable(void)::typeDescriptionKeys;
  *((void *)v11 + 90) = 1;
  *((void *)v11 + 91) = v36;
  *((void *)v11 + 92) = 0;
  *((void *)v11 + 93) = LaunchServices::URLPropertyProvider::prepareLocalizedTypeDescriptionDictionaryValue;
  *((void *)v11 + 94) = LaunchServices::URLPropertyProvider::prepareBindingMimic;
  *((void *)v11 + 95) = 0;
  *((void *)v11 + 96) = &once_createPropertyTable(void)::typeDescriptionKeys;
  *((void *)v11 + 97) = 1;
  *((void *)v11 + 98) = v37;
  *((void *)v11 + 99) = 0;
  *((void *)v11 + 100) = LaunchServices::URLPropertyProvider::prepareBundleIdentifierValue;
  *((void *)v11 + 101) = LaunchServices::URLPropertyProvider::prepareMimicForBundleLookup;
  *((void *)v11 + 102) = 0;
  *((void *)v11 + 103) = &once_createPropertyTable(void)::baseDependencyKeys;
  *((void *)v11 + 104) = 10;
  *((void *)v11 + 105) = v38;
  *((void *)v11 + 106) = 0;
  *((void *)v11 + 107) = LaunchServices::URLPropertyProvider::prepareHFSTypeCodeValue;
  *((void *)v11 + 108) = LaunchServices::URLPropertyProvider::prepareMimicForBundleLookup;
  *((void *)v11 + 109) = 0;
  *((void *)v11 + 110) = &once_createPropertyTable(void)::baseDependencyKeys;
  *((void *)v11 + 111) = 10;
  *((void *)v11 + 112) = v39;
  *((void *)v11 + 113) = 0;
  *((void *)v11 + 114) = LaunchServices::URLPropertyProvider::prepareArchitecturesValue;
  *((void *)v11 + 115) = LaunchServices::URLPropertyProvider::prepareMimicForBundleLookup;
  *((void *)v11 + 116) = 0;
  *((void *)v11 + 117) = &once_createPropertyTable(void)::architecturesDependencyKeys;
  *((void *)v11 + 118) = 1;
  *((void *)v11 + 119) = v40;
  *((void *)v11 + 120) = 0;
  *((void *)v11 + 121) = LaunchServices::URLPropertyProvider::prepareArchitecturesValue;
  *((void *)v11 + 122) = LaunchServices::URLPropertyProvider::prepareMimicForBundleLookup;
  *((void *)v11 + 123) = 0;
  *((void *)v11 + 124) = &once_createPropertyTable(void)::architecturesDependencyKeys;
  *((void *)v11 + 125) = 1;
  *((void *)v11 + 126) = v41;
  *((void *)v11 + 127) = 0;
  *((void *)v11 + 128) = LaunchServices::URLPropertyProvider::prepareVolumeLocalizedNameValue;
  *(_OWORD *)(v11 + 1032) = 0u;
  *((void *)v11 + 131) = &once_createPropertyTable(void)::volLocNameDependencyKeys;
  *((void *)v11 + 132) = 6;
  *((void *)v11 + 133) = @"_NSURLIsHiddenBySystemKey";
  *((void *)v11 + 134) = 0;
  *((void *)v11 + 135) = LaunchServices::URLPropertyProvider::prepareIsHiddenBySystemValue;
  *((void *)v11 + 136) = LaunchServices::URLPropertyProvider::prepareMimicForBundleLookup;
  *((void *)v11 + 137) = 0;
  *((void *)v11 + 138) = &once_createPropertyTable(void)::hiddenBySystemDependencyKeys;
  *((void *)v11 + 139) = 1;
  *((void *)v11 + 140) = @"_NSURLIsHiddenBySystemChangedNotificationsKey";
  *((void *)v11 + 141) = 0;
  *((void *)v11 + 142) = LaunchServices::URLPropertyProvider::prepareIsHiddenBySystemNotificationsValue;
  *((void *)v11 + 143) = LaunchServices::URLPropertyProvider::prepareMimicForBundleLookup;
  *((void *)v11 + 144) = 0;
  *((void *)v11 + 145) = &once_createPropertyTable(void)::hiddenBySystemDependencyKeys;
  *((void *)v11 + 146) = 1;
  *((void *)v11 + 147) = v42;
  *((void *)v11 + 148) = 0;
  *((void *)v11 + 149) = LaunchServices::URLPropertyProvider::prepareApplicationDeviceManagementPolicyValue;
  *((_OWORD *)v11 + 75) = 0u;
  *((void *)v11 + 152) = &once_createPropertyTable(void)::baseDependencyKeys;
  *((void *)v11 + 153) = 10;
  operator new();
}

void sub_1829B9C94(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1829B9D60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829BA04C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL35_lock_categorizeSelectorWithRuntimeP13objc_selector_block_invoke()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1829BA118(_Unwind_Exception *a1)
{
  MEMORY[0x18530EAF0](v1, 0x10A0C408EF24B1CLL);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<objc_selector *>::unordered_set(uint64_t a1, void *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 8 * a3;
    do
    {
      std::__hash_table<objc_selector *,std::hash<objc_selector *>,std::equal_to<objc_selector *>,std::allocator<objc_selector *>>::__emplace_unique_key_args<objc_selector *,objc_selector * const&>(a1, a2, a2);
      ++a2;
      v5 -= 8;
    }
    while (v5);
  }
  return a1;
}

void sub_1829BA1A0(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<objc_selector *,std::hash<objc_selector *>,std::equal_to<objc_selector *>,std::allocator<objc_selector *>>::__emplace_unique_key_args<objc_selector *,objc_selector * const&>(uint64_t a1, void *a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (CFIndex i = *v11; i; CFIndex i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  CFIndex i = operator new(0x18uLL);
  *CFIndex i = 0;
  i[1] = v8;
  i[2] = *a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *CFIndex i = *v21;
LABEL_38:
    void *v21 = i;
    goto LABEL_39;
  }
  *CFIndex i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }
    else
    {
      v22 &= v9 - 1;
    }
    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1829BA3F4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZN14LaunchServices6RecordL25detachRecordsOnMainThreadEPKP8LSRecordm_block_invoke()
{
  uint64_t v0 = (void **)LaunchServices::Record::detachRecordsOnMainThread(LSRecord * const*,unsigned long)::detachPool;
  uint64_t v1 = *(id **)LaunchServices::Record::detachRecordsOnMainThread(LSRecord * const*,unsigned long)::detachPool;
  unsigned __int8 v2 = *(id **)(LaunchServices::Record::detachRecordsOnMainThread(LSRecord * const*,unsigned long)::detachPool + 8);
  if (*(id **)LaunchServices::Record::detachRecordsOnMainThread(LSRecord * const*,unsigned long)::detachPool == v2) {
    goto LABEL_6;
  }
  unint64_t v3 = *(id **)LaunchServices::Record::detachRecordsOnMainThread(LSRecord * const*,unsigned long)::detachPool;
  do
  {
    id WeakRetained = objc_loadWeakRetained(v3);
    [WeakRetained _resolveAllProperties];

    ++v3;
  }
  while (v3 != v2);
  do
  {
    id v5 = objc_loadWeakRetained(v1);
    [v5 detach];

    ++v1;
  }
  while (v1 != v2);
  uint64_t v0 = (void **)LaunchServices::Record::detachRecordsOnMainThread(LSRecord * const*,unsigned long)::detachPool;
  if (LaunchServices::Record::detachRecordsOnMainThread(LSRecord * const*,unsigned long)::detachPool)
  {
LABEL_6:
    unint64_t v6 = v0;
    std::vector<LSRecord * {__weak}>::__destroy_vector::operator()[abi:nn180100](&v6);
    MEMORY[0x18530EAF0](v0, 0x80C40D6874129);
  }
  LaunchServices::Record::detachRecordsOnMainThread(LSRecord * const*,unsigned long)::detachPool = 0;
  LaunchServices::Record::detachRecordsOnMainThread(LSRecord * const*,unsigned long)::nilScanIndex = 0;
}

void sub_1829BA568(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<LSRecord * {__weak}>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  unsigned __int8 v2 = (id *)**a1;
  if (v2)
  {
    uint64_t v4 = (id *)v1[1];
    id v5 = **a1;
    if (v4 != v2)
    {
      do
        objc_destroyWeak(--v4);
      while (v4 != v2);
      id v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1829BA8C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSEnumerateViableBundlesOfClass(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = v4;
  if (a1)
  {
    if (v4) {
      goto LABEL_3;
    }
  }
  else
  {
    unint64_t v8 = [MEMORY[0x1E4F28B00] currentHandler];
    unint64_t v9 = objc_msgSend(NSString, "stringWithUTF8String:", "OSStatus _LSEnumerateViableBundlesOfClass(LSContext *, LSBundleClass, void (^__strong)(LSBundleID, const LSBundleData *, Boolean *))");
    [v8 handleFailureInFunction:v9, @"LSBundle.mm", 2601, @"Invalid parameter not satisfying: %@", @"inContext != NULL" file lineNumber description];

    if (v5) {
      goto LABEL_3;
    }
  }
  uint8x8_t v10 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v11 = objc_msgSend(NSString, "stringWithUTF8String:", "OSStatus _LSEnumerateViableBundlesOfClass(LSContext *, LSBundleClass, void (^__strong)(LSBundleID, const LSBundleData *, Boolean *))");
  [v10 handleFailureInFunction:v11, @"LSBundle.mm", 2602, @"Invalid parameter not satisfying: %@", @"inSearchBlock != nil" file lineNumber description];

LABEL_3:
  uint64_t v6 = _LSCheckAllContainerStates(a1);
  if (!v6)
  {
    id v12 = v5;
    _CSStoreEnumerateUnits();
  }
  return v6;
}

void sub_1829BAB14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _FSEventStreamDeallocate(char *ptr)
{
  if (ptr)
  {
    if (*(_DWORD *)ptr)
    {
      unsigned __int8 v2 = fsevent_default_log();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
        _FSEventStreamDeallocate_cold_4();
      }
    }
    else
    {
      if (ptr[188])
      {
        id v4 = fsevent_default_log();
        if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
          _FSEventStreamDeallocate_cold_3();
        }
      }
      if (*((void *)ptr + 27) || *((void *)ptr + 45))
      {
        id v5 = fsevent_default_log();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
          _FSEventStreamDeallocate_cold_2();
        }
      }
      CFAllocatorRef v6 = (const __CFAllocator *)*((void *)ptr + 1);
      if (v6)
      {
        unint64_t v7 = (void *)*((void *)ptr + 10);
        if (v7)
        {
          uint64_t v8 = *((void *)ptr + 9);
          *((void *)ptr + 9) = 0;
          if ((int)v8 >= 1)
          {
            uint64_t v9 = 0;
            uint64_t v10 = v8;
            do
            {
              uint64_t v11 = *(void **)(*((void *)ptr + 10) + 8 * v9);
              if (v11) {
                CFAllocatorDeallocate(v6, v11);
              }
              uint64_t v12 = *((void *)ptr + 49);
              if (v12)
              {
                unint64_t v13 = *(void **)(v12 + 32 * v9 + 24);
                if (v13)
                {
                  free(v13);
                  uint64_t v12 = *((void *)ptr + 49);
                }
                uint64_t v14 = v12 + 32 * v9;
                float v15 = *(void **)(v14 + 16);
                if (v15)
                {
                  if (*(int *)(v14 + 8) >= 1)
                  {
                    uint64_t v16 = 0;
                    do
                    {
                      close(*(_DWORD *)(*(void *)(v12 + 32 * v9 + 16) + 4 * v16++));
                      uint64_t v12 = *((void *)ptr + 49);
                      uint64_t v17 = v12 + 32 * v9;
                    }
                    while (v16 < *(int *)(v17 + 8));
                    float v15 = *(void **)(v17 + 16);
                  }
                  free(v15);
                  uint64_t v12 = *((void *)ptr + 49);
                }
                close(*(_DWORD *)(v12 + 32 * v9 + 4));
              }
              ++v9;
            }
            while (v9 != v10);
            unint64_t v7 = (void *)*((void *)ptr + 10);
          }
          CFAllocatorDeallocate(v6, v7);
          CFAllocatorDeallocate(v6, *((void **)ptr + 11));
          unint64_t v18 = (void *)*((void *)ptr + 49);
          if (v18) {
            CFAllocatorDeallocate(v6, v18);
          }
          size_t v19 = (void *)*((void *)ptr + 50);
          if (v19) {
            CFAllocatorDeallocate(v6, v19);
          }
        }
        for (uint64_t i = 104; i != 168; i += 8)
        {
          uint64_t v21 = *(void **)&ptr[i];
          if (v21)
          {
            free(v21);
            *(void *)&ptr[i] = 0;
          }
        }
        *((void *)ptr + 12) = 0;
        unint64_t v22 = *((void *)ptr + 44);
        if (v22) {
          dispatch_release(v22);
        }
        uint64_t v23 = (void (*)(void))*((void *)ptr + 6);
        if (v23) {
          v23(*((void *)ptr + 4));
        }
        *((void *)ptr + 56) = 0;
        *((_OWORD *)ptr + 26) = 0u;
        *((_OWORD *)ptr + 27) = 0u;
        *((_OWORD *)ptr + 24) = 0u;
        *((_OWORD *)ptr + 25) = 0u;
        *((_OWORD *)ptr + 22) = 0u;
        *((_OWORD *)ptr + 23) = 0u;
        *((_OWORD *)ptr + 20) = 0u;
        *((_OWORD *)ptr + 21) = 0u;
        *((_OWORD *)ptr + 18) = 0u;
        *((_OWORD *)ptr + 19) = 0u;
        *((_OWORD *)ptr + 16) = 0u;
        *((_OWORD *)ptr + 17) = 0u;
        *((_OWORD *)ptr + 14) = 0u;
        *((_OWORD *)ptr + 15) = 0u;
        *((_OWORD *)ptr + 12) = 0u;
        *((_OWORD *)ptr + 13) = 0u;
        *((_OWORD *)ptr + 10) = 0u;
        *((_OWORD *)ptr + 11) = 0u;
        *((_OWORD *)ptr + 8) = 0u;
        *((_OWORD *)ptr + 9) = 0u;
        *((_OWORD *)ptr + 6) = 0u;
        *((_OWORD *)ptr + 7) = 0u;
        *((_OWORD *)ptr + 4) = 0u;
        *((_OWORD *)ptr + 5) = 0u;
        *((_OWORD *)ptr + 2) = 0u;
        *((_OWORD *)ptr + 3) = 0u;
        *(_OWORD *)ptr = 0u;
        *((_OWORD *)ptr + 1) = 0u;
        CFAllocatorDeallocate(v6, ptr);
        CFRelease(v6);
      }
    }
  }
  else
  {
    unint64_t v3 = fsevent_default_log();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      _FSEventStreamDeallocate_cold_1();
    }
  }
}

void __installProgressInterface_block_invoke()
{
  uint64_t v0 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v1 = objc_opt_class();
  objc_msgSend(v0, "setWithObjects:", v1, objc_opt_class(), 0);
  id v8 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v2 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1ECB5DBF0];
  unint64_t v3 = (void *)installProgressInterface_interface;
  installProgressInterface_interface = v2;

  [(id)installProgressInterface_interface setClass:objc_opt_class() forSelector:sel_createInstallProgressForApplication_withPhase_andPublishingString_reply_ argumentIndex:0 ofReply:0];
  [(id)installProgressInterface_interface setClass:objc_opt_class() forSelector:sel_createInstallProgressForApplication_withPhase_andPublishingString_reply_ argumentIndex:2 ofReply:0];
  [(id)installProgressInterface_interface setClasses:v8 forSelector:sel_sendNotification_forApplications_withPlugins_ argumentIndex:1 ofReply:0];
  [(id)installProgressInterface_interface setClass:objc_opt_class() forSelector:sel_sendNotification_forApplicationWithBundleIdentifier_completion_ argumentIndex:1 ofReply:0];
  [(id)installProgressInterface_interface setClass:objc_opt_class() forSelector:sel_sendNotification_forApplicationWithBundleIdentifier_completion_ argumentIndex:0 ofReply:1];
  id v4 = (void *)installProgressInterface_interface;
  id v5 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v6 = objc_opt_class();
  unint64_t v7 = objc_msgSend(v5, "setWithObjects:", v6, objc_opt_class(), 0);
  [v4 setClasses:v7 forSelector:sel_setProgressProportionsByPhase_forInstallOfApplicationWithIdentifier_completion_ argumentIndex:0 ofReply:0];

  [(id)installProgressInterface_interface setClass:objc_opt_class() forSelector:sel_setProgressProportionsByPhase_forInstallOfApplicationWithIdentifier_completion_ argumentIndex:1 ofReply:0];
  [(id)installProgressInterface_interface setClass:objc_opt_class() forSelector:sel_setProgressProportionsByPhase_forInstallOfApplicationWithIdentifier_completion_ argumentIndex:0 ofReply:1];
}

void sub_1829BB16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1829BB3D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__CFString *_LSSchemeApprovalGetLocalizedString(NSString *a1, NSString *a2)
{
  unint64_t v3 = a1;
  id v4 = a2;
  id v5 = (__CFBundle *)_LSGetBundle();
  uint64_t v6 = (__CFString *)CFBundleCopyLocalizedString(v5, v4, v4, @"SchemeApproval");
  unint64_t v7 = v6;
  if (!v6) {
    uint64_t v6 = (__CFString *)v3;
  }
  id v8 = v6;

  return v8;
}

void sub_1829BB4DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829BB56C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1829BB66C(_Unwind_Exception *a1)
{
  id v5 = v4;

  _Unwind_Resume(a1);
}

uint64_t LaunchServices::URLPropertyProvider::setValues(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  unint64_t v13 = (void *)MEMORY[0x18530F680]();
  uint64_t v14 = [FSNode alloc];
  if (a8) {
    float v15 = &v46;
  }
  else {
    float v15 = 0;
  }
  if (a8) {
    id v46 = 0;
  }
  uint64_t v33 = [(FSNode *)v14 initWithURL:a1 flags:64 error:v15];
  if (a8) {
    id v16 = v46;
  }
  else {
    id v16 = 0;
  }
  if (!v33)
  {
    uint64_t v24 = 1;
    goto LABEL_31;
  }
  id v45 = 0;
  uint64_t v42 = 0;
  id v43 = 0;
  char v44 = 0;
  v38[0] = 0;
  char v40 = 0;
  uint64_t v41 = 0;
  if (a6 < 1)
  {
    uint64_t v25 = 0;
    BOOL v18 = 0;
    uint64_t v24 = 1;
    goto LABEL_24;
  }
  uint64_t v30 = a1;
  uint64_t v31 = a8;
  uint64_t v32 = v13;
  uint64_t v17 = 0;
  BOOL v18 = 1;
  while (1)
  {
    uint64_t v19 = *(void *)(a3 + 8 * v17);
    if (v19) {
      break;
    }
LABEL_18:
    BOOL v18 = ++v17 < a6;
    if (a6 == v17)
    {
      uint64_t v24 = 1;
      goto LABEL_23;
    }
  }
  uint64_t v20 = *(void *)(a4 + 8 * v17);
  uint64_t v21 = *(uint64_t (**)(void ***, FSNode *, uint64_t, uint64_t, uint64_t, unsigned char *, id *))(*(void *)(a5 + 8 * v17)
                                                                                               + 32);
  if (!v21)
  {
LABEL_16:
    if (!v20) {
      MEMORY[0x18530E2E0](a2, v19);
    }
    goto LABEL_18;
  }
  id v37 = v16;
  int v22 = v21(&v42, v33, a2, v19, v20, v38, &v37);
  id v23 = v37;

  if (v22)
  {
    id v16 = v23;
    goto LABEL_16;
  }
  uint64_t v24 = 0;
  id v16 = v23;
LABEL_23:
  uint64_t v25 = v41;
  a8 = v31;
  unint64_t v13 = v32;
  a1 = v30;
LABEL_24:

  if (v40) {
  if (v42 && v44)
  }
    _LSContextDestroy(v42);
  id v26 = v43;
  uint64_t v42 = 0;
  id v43 = 0;

  char v44 = 0;
  id v27 = v45;
  id v45 = 0;

  if (a8 != 0 && v18)
  {
    id v36 = v16;
    LaunchServices::URLPropertyProvider::normalizeError(a1, 1, &v36);
    id v28 = v36;

    id v16 = v28;
    uint64_t v24 = 0;
    *a8 = v16;
  }
LABEL_31:

  return v24;
}

void sub_1829BB98C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void ___ZL24_LSPlistGetCommonStringsv_block_invoke()
{
  uint64_t v0 = (void *)MEMORY[0x18530F680]();
  uint64_t v1 = [MEMORY[0x1E4F1CA48] array];
  [v1 addObject:@"UISupportedInterfaceOrientations"];
  [v1 addObject:@"com.apple.security.exception.mach-lookup.global-name"];
  [v1 addObject:@"UIInterfaceOrientationLandscapeRight"];
  [v1 addObject:@"UIInterfaceOrientationPortrait"];
  [v1 addObject:@"CFBundleInfoDictionaryVersion"];
  [v1 addObject:@"UIInterfaceOrientationLandscapeLeft"];
  [v1 addObject:@"CFBundleSupportedPlatforms"];
  [v1 addObject:@"CFBundleShortVersionString"];
  [v1 addObject:@"CFBundleDevelopmentRegion"];
  [v1 addObject:@"com.apple.private.security.container-required"];
  [v1 addObject:@"CFBundleNumericVersion"];
  [v1 addObject:@"BuildMachineOSBuild"];
  [v1 addObject:@"CFBundlePackageType"];
  [v1 addObject:@"com.apple.springboard.opensensitiveurl"];
  [v1 addObject:@"CFBundleExecutable"];
  [v1 addObject:@"CFBundleIdentifier"];
  [v1 addObject:@"UIRequiredDeviceCapabilities"];
  [v1 addObject:@"UIViewControllerBasedStatusBarAppearance"];
  [v1 addObject:@"DTPlatformVersion"];
  [v1 addObject:@"com.apple.security.exception.files.home-relative-path.read-write"];
  [v1 addObject:@"MinimumOSVersion"];
  [v1 addObject:@"com.apple.UIKit.vends-view-services"];
  [v1 addObject:@"CFBundleSignature"];
  [v1 addObject:@"CFBundleVersion"];
  [v1 addObject:@"DTPlatformBuild"];
  [v1 addObject:@"CanInheritApplicationStateFromOtherProcesses"];
  [v1 addObject:@"LSRequiresIPhoneOS"];
  [v1 addObject:@"DTPlatformName"];
  [v1 addObject:@"UIDeviceFamily"];
  [v1 addObject:@"com.apple.private.tcc.allow"];
  [v1 addObject:@"CFBundleDisplayName"];
  [v1 addObject:@"com.apple.private.coreservices.canmaplsdatabase"];
  [v1 addObject:@"com.apple.security.exception.shared-preference.read-write"];
  [v1 addObject:@"DTXcodeBuild"];
  [v1 addObject:@"UIViewServiceUsesNSXPCConnection"];
  [v1 addObject:@"UILaunchStoryboardName"];
  [v1 addObject:@"UIInterfaceOrientationPortraitUpsideDown"];
  [v1 addObject:@"com.apple.itunesstored.private"];
  [v1 addObject:@"com.apple.accounts.appleaccount.fullaccess"];
  [v1 addObject:@"com.apple.private.accounts.allaccounts"];
  [v1 addObject:@"CFBundleName"];
  [v1 addObject:@"DTCompiler"];
  [v1 addObject:@"DTSDKBuild"];
  [v1 addObject:@"keychain-access-groups"];
  [v1 addObject:@"CFBundlePrimaryIcon"];
  [v1 addObject:@"com.apple.locationd.effective_bundle"];
  [v1 addObject:@"com.apple.Contacts.database-allow"];
  [v1 addObject:@"DTSDKName"];
  [v1 addObject:@"com.apple.security.exception.files.absolute-path.read-write"];
  [v1 addObject:@"kTCCServiceAddressBook"];
  [v1 addObject:@"com.apple.CommCenter.fine-grained"];
  [v1 addObject:@"com.apple.coremedia.allow-protected-content-playback"];
  [v1 addObject:@"com.apple.springboard.openurlinbackground"];
  [v1 addObject:@"com.apple.private.canModifyAppLinkPermissions"];
  [v1 addObject:@"iPhoneOS"];
  [v1 addObject:@"com.apple.frontboard.launchapplications"];
  [v1 addObject:@"application-identifier"];
  [v1 addObject:@"SBMatchingApplicationGenres"];
  [v1 addObject:@"com.apple.private.tcc.allow.overridable"];
  [v1 addObject:@"UIBackgroundModes"];
  [v1 addObject:@"com.apple.security.exception.files.absolute-path.read-only"];
  [v1 addObject:@"com.apple.security.exception.files.home-relative-path.read-only"];
  [v1 addObject:@"com.apple.private.appleaccount.app-hidden-from-icloud-settings"];
  [v1 addObject:@"com.apple.telephonyutilities.callservicesdaemon.callprovidermanager"];
  [v1 addObject:@"DTXcode"];
  [v1 addObject:@"com.apple.QuartzCore.secure-mode"];
  [v1 addObject:@"platform-application"];
  [v1 addObject:@"com.apple.private.corerecents"];
  [v1 addObject:@"CFBundleIcons"];
  [v1 addObject:@"NSLocationWhenInUseUsageDescription"];
  [v1 addObject:@"kTCCServicePhotos"];
  [v1 addObject:@"com.apple.wifi.manager-access"];
  [v1 addObject:@"CFBundleURLTypes"];
  [v1 addObject:@"UIApplicationSystemWindowsSecureKey"];
  [v1 addObject:@"com.apple.telephonyutilities.callservicesd"];
  [v1 addObject:@"com.apple.private.MobileGestalt.AllowedProtectedKeys"];
  [v1 addObject:@"com.apple.private.canGetAppLinkInfo"];
  [v1 addObject:@"com.apple.managedconfiguration.profiled-access"];
  [v1 addObject:@"SBMachServices"];
  [v1 addObject:@"com.apple.coreaudio.allow-amr-decode"];
  [v1 addObject:@"com.apple.telephonyutilities.callservicesdaemon.callstatecontroller"];
  [v1 addObject:@"SBAppTags"];
  [v1 addObject:@"com.apple.authkit.client.internal"];
  [v1 addObject:@"kTCCServiceCamera"];
  [v1 addObject:@"com.apple.SystemConfiguration.SCPreferences-write-access"];
  [v1 addObject:@"UIRequiresFullScreen"];
  [v1 addObject:@"com.apple.private.suggestions.contacts"];
  [v1 addObject:@"com.apple.developer.icloud-services"];
  [v1 addObject:@"com.apple.authkit.client.private"];
  [v1 addObject:@"com.apple.developer.icloud-container-identifiers"];
  [v1 addObject:@"com.apple.coreduetd.allow"];
  [v1 addObject:@"com.apple.developer.ubiquity-kvstore-identifier"];
  [v1 addObject:@"com.apple.private.coreservices.canopenactivity"];
  [v1 addObject:@"com.apple.springboard.activateRemoteAlert"];
  [v1 addObject:@"NSUserActivityTypes"];
  [v1 addObject:@"kTCCServiceMediaLibrary"];
  [v1 addObject:@"com.apple.accounts.appleidauthentication.defaultaccess"];
  [v1 addObject:@"com.apple.developer.icloud-container-environment"];
  [v1 addObject:@"com.apple.private.assets.accessible-asset-types"];
  [v1 addObject:@"com.apple.private.imcore.imremoteurlconnection"];
  [v1 addObject:@"com.apple.springboard.launchapplications"];
  [v1 addObject:@"CAProcessCanAccessGPU"];
  [v1 addObject:@"kTCCServiceMicrophone"];
  [v1 addObject:@"_LSSupportsRemoval"];
  [v1 addObject:@"UIApplicationShortcutItems"];
  [v1 addObject:@"com.apple.private.suggestions"];
  [v1 addObject:@"com.apple.springboard.shortcutitems.customimage"];
  [v1 addObject:@"SBUninstallIconOverrideStringsFile"];
  [v1 addObject:@"kTCCServiceCalendar"];
  [v1 addObject:@"com.apple.private.persona.read"];
  [v1 addObject:@"com.apple.mobile.deleted.AllowFreeSpace"];
  [v1 addObject:@"com.apple.SystemConfiguration.SCDynamicStore-write-access"];
  [v1 addObject:@"com.apple.springboard.allowallcallurls"];
  [v1 addObject:@"com.apple.security.exception.shared-preference.read-only"];
  [v1 addObject:@"com.apple.security.application-groups"];
  [v1 addObject:@"SBIsLaunchableDuringSetup"];
  [v1 addObject:@"com.apple.private.webinspector.allow-remote-inspection"];
  [v1 addObject:@"com.apple.locationd.usage_oracle"];
  [v1 addObject:@"CFBundleAllowMixedLocalizations"];
  [v1 addObject:@"com.apple.private.game-center.bypass-authentication"];
  [v1 addObject:@"com.apple.avfoundation.allow-still-image-capture-shutter-sound-manipulation"];
  [v1 addObject:@"hidden"];
  [v1 addObject:@"com.apple.mobilemail.mailservices"];
  [v1 addObject:@"armv7"];
  [v1 addObject:@"com.apple.coretelephony.Identity.get"];
  [v1 addObject:@"com.apple.private.healthkit.medicaliddata"];
  [v1 addObject:@"com.apple.coreduetd.people"];
  [v1 addObject:@"com.apple.private.hsa-authentication-processing"];
  [v1 addObject:@"com.apple.private.mobileinstall.upgrade-enabled"];
  [v1 addObject:@"com.apple.private.corespotlight.internal"];
  [v1 addObject:@"com.apple.springboard.appbackgroundstyle"];
  [v1 addObject:@"com.apple.private.subscriptionservice.internal"];
  [v1 addObject:@"com.apple.private.bmk.allow"];
  [v1 addObject:@"com.apple.security.exception.iokit-user-client-class"];
  [v1 addObject:@"com.apple.private.lockdown.finegrained-get"];
  [v1 addObject:@"com.apple.private.mobileinstall.allowedSPI"];
  [v1 addObject:@"CoreSpotlightContinuation"];
  [v1 addObject:@"CoreSpotlightActions"];
  [v1 addObject:@"com.apple.accounts.facebook.defaultaccess"];
  [v1 addObject:@"com.apple.developer.pass-type-identifiers"];
  [v1 addObject:@"com.apple.locationd.authorizeapplications"];
  [v1 addObject:@"com.apple.private.network.socket-delegate"];
  [v1 addObject:@"com.apple.QuartzCore.global-capture"];
  [v1 addObject:@"com.apple.media.ringtones.read-only"];
  [v1 addObject:@"com.apple.managedconfiguration.profiled.configurationprofiles"];
  [v1 addObject:@"com.apple.coremedia.allow-mpeg4streaming"];
  [v1 addObject:@"com.apple.private.cloudkit.systemService"];
  [v1 addObject:@"com.apple.springboard.openurlswhenlocked"];
  [v1 addObject:@"SBIconVisibilitySetByAppPreference"];
  [v1 addObject:@"com.apple.private.launchservices.suppresscustomschemeprompt"];
  [v1 addObject:@"com.apple.private.corespotlight.search.internal"];
  [v1 addObject:@"/private/var/containers/Shared/SystemGroup/systemgroup.com.apple.lsd.iconscache/Library/Caches/com.apple.IconsCache/"];
  [v1 addObject:@"com.apple.developer.healthkit"];
  [v1 addObject:@"CFBundleDocumentTypes"];
  [v1 addObject:@"aps-connection-initiate"];
  [v1 addObject:@"com.apple.private.communicationsfilter"];
  [v1 addObject:@"com.apple.private.social.facebook.like"];
  [v1 addObject:@"com.apple.keystore.device"];
  [v1 addObject:@"com.apple.springboard.activateawayviewplugins"];
  [v1 addObject:@"com.apple.springboard.statusbarstyleoverrides"];
  [v1 addObject:@"fairplay-client"];
  [v1 addObject:@"UIStatusBarStyle"];
  [v1 addObject:@"com.apple.security.system-groups"];
  [v1 addObject:@"com.apple.visualvoicemail.client"];
  [v1 addObject:@"UIMainStoryboardFile"];
  [v1 addObject:@"com.apple.certificates"];
  [v1 addObject:@"com.apple.videoconference.allow-conferencing"];
  [v1 addObject:@"com.apple.appstored.xpc.updates"];
  [v1 addObject:@"com.apple.private.externalaccessory.showallaccessories"];
  [v1 addObject:@"com.apple.private.librarian.container-proxy"];
  [v1 addObject:@"*.pass.com.apple.itunes.storecredit"];
  [v1 addObject:@"access-call-providers"];
  [v1 addObject:@"com.apple.hsa-authentication-server"];
  [v1 addObject:@"NSPrincipalClass"];
  [v1 addObject:@"UTExportedTypeDeclarations"];
  [v1 addObject:@"com.apple.assistant.dictation.prerecorded"];
  [v1 addObject:@"com.apple.private.game-center"];
  [v1 addObject:@"com.apple.safari.credit-cards"];
  [v1 addObject:@"com.apple.CoreRoutine.LocationOfInterest"];
  [v1 addObject:@"com.apple.developer.ubiquity-container-identifiers"];
  [v1 addObject:@"com.apple.private.allow-explicit-graphics-priority"];
  [v1 addObject:@"com.apple.seld.tsmmanager"];
  [v1 addObject:@"com.apple.springboard.wallpaperAnimationSuspension"];
  [v1 addObject:@"com.apple.icloud.fmfd.access"];
  [v1 addObject:@"com.apple.nanosystemsettings"];
  [v1 addObject:@"com.apple.backboardd.launchapplications"];
  [v1 addObject:@"SKRespectApplicationUserInterfaceLayoutDirection"];
  [v1 addObject:@"com.apple.nfcd.hwmanager"];
  [v1 addObject:@"com.apple.private.healthkit.authorization_bypass"];
  [v1 addObject:@"SBAppUsesLocalNotifications"];
  [v1 addObject:@"com.apple.private.ids.messaging.urgent-priority"];
  [v1 addObject:@"com.apple.private.ids.messaging"];
  [v1 addObject:@"com.apple.private.persona.write"];
  [v1 addObject:@"com.apple.security.temporary-exception.mach-lookup.global-name"];
  [v1 addObject:@"com.apple.companionappd.connect.allow"];
  [v1 addObject:@"com.apple.icloud.findmydeviced.access"];
  [v1 addObject:@"com.apple.mediastream.mstreamd-access"];
  [v1 addObject:@"com.apple.private.security.no-sandbox"];
  [v1 addObject:@"com.apple.private.hid.client.service-protected"];
  [v1 addObject:@"unboundedTaskCompletion"];
  [v1 addObject:@"com.apple.TextInput.rdt.me"];
  [v1 addObject:@"com.apple.identities"];
  [v1 addObject:@"com.apple.private.alloy.passbook.provisioning"];
  [v1 addObject:@"kTCCServiceReminders"];
  [v1 addObject:@"com.apple.backboardd.hostCanRequireTouchesFromHostedContent"];
  [v1 addObject:@"com.apple.launchservices.receivereferrerrurl"];
  [v1 addObject:@"com.apple.private.accounts.customaccesssinfo"];
  [v1 addObject:@"com.apple.radios.plist"];
  [v1 addObject:@"com.apple.locationd.prompt_behavior"];
  [v1 addObject:@"/Library/Preferences/com.apple.mobilephone.speeddial.plist"];
  [v1 addObject:@"com.apple.avfoundation.allow-shallow-depth-of-field-effect"];
  [v1 addObject:@"com.apple.excludes-extensions"];
  [v1 addObject:@"com.apple.private.ubiquity-additional-kvstore-identifiers"];
  [v1 addObject:@"UIStatusBarHidden"];
  [v1 addObject:@"com.apple.familycircle.agent"];
  [v1 addObject:@"com.apple.icloud.fmfd"];
  [v1 addObject:@"com.apple.mobile.keybagd.xpc"];
  [v1 addObject:@"com.apple.payment.all-access"];
  [v1 addObject:@"UIApplicationShortcutItemsVersion"];
  [v1 addObject:@"com.apple.bulletinboard.utilities"];
  [v1 addObject:@"com.apple.notificationcenter.widgetcontrollerhascontent"];
  [v1 addObject:@"com.apple.private.cloudkit.setEnvironment"];
  [v1 addObject:@"UIApplicationShortcutWidget"];
  [v1 addObject:@"com.apple.private.healthkit"];
  [v1 addObject:@"com.apple.cards.all-access"];
  [v1 addObject:@"com.apple.managedconfiguration.profiled"];
  [v1 addObject:@"com.apple.springboard.activateassistant"];
  [v1 addObject:@"com.apple.keystore.stash.access"];
  [v1 addObject:@"com.apple.routined.registration"];
  [v1 addObject:@"SBStarkCapable"];
  [v1 addObject:@"com.apple.mobilesafari"];
  [v1 addObject:@"/Media/PhotoData/"];
  [v1 addObject:@"UIBackgroundStyle"];
  [v1 addObject:@"/private/var/mobile/Library/Preferences/com.apple.restrictionspassword.plist"];
  [v1 addObject:@"DataProtectionClass"];
  [v1 addObject:@"SBIconVisibilityDefaultVisible"];
  [v1 addObject:@"UIStatusBarTintParameters"];
  [v1 addObject:@"/private/var/containers/Shared/SystemGroup/systemgroup.com.apple.configurationprofiles/Library/ConfigurationProfiles/CloudConfigurationDetails.plist"];
  [v1 addObject:@"com.apple.intents.extension.discovery"];
  [v1 addObject:@"com.apple.private.healthkit.authorization_manager"];
  [v1 addObject:@"com.apple.passes.add-silently"];
  [v1 addObject:@"com.apple.private.tcc.manager"];
  [v1 addObject:@"com.apple.developer.extension-host.photo-editing"];
  [v1 addObject:@"com.apple.homekit.private-spi-access"];
  [v1 addObject:@"com.apple.nano.nanoregistry.pairunpairobliterate"];
  [v1 addObject:@"com.apple.private.suggestions.events"];
  [v1 addObject:@"com.apple.springboard.allowIconVisibilityChanges"];
  [v1 addObject:@"com.apple.private.ids.idquery-cache"];
  [v1 addObject:@"com.apple.private.ind.client"];
  [v1 addObject:@"continuous"];
  [v1 addObject:@"/private/var/containers/Shared/SystemGroup/systemgroup.com.apple.configurationprofiles/Library/ConfigurationProfiles/MDMAppManagement.plist"];
  [v1 addObject:@"SBLaunchSuspendedAlways"];
  [v1 addObject:@"com.apple.private.can-load-any-content-blocker"];
  [v1 addObject:@"com.apple.springboard.setWantsLockButtonEvents"];
  [v1 addObject:@"com.apple.NPKCompanionAgent.client"];
  [v1 addObject:@"seatbelt-profiles"];
  [v1 addObject:@"/private/var/containers/Shared/SystemGroup/systemgroup.com.apple.configurationprofiles/Library/ConfigurationProfiles/UserSettings.plist"];
  uint64_t v2 = (void *)[v1 copy];

  if (v2)
  {
    uint64_t v3 = [objc_alloc(MEMORY[0x1E4F1CAA0]) initWithArray:v2];
    id v4 = (void *)_LSPlistGetCommonStrings(void)::result;
    _LSPlistGetCommonStrings(void)::Boolean result = v3;
  }
  if (!_LSPlistGetCommonStrings(void)::result)
  {
    id v5 = _LSDefaultLog();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      ___ZL24_LSPlistGetCommonStringsv_block_invoke_cold_1(v5);
    }

    id v6 = objc_alloc_init(MEMORY[0x1E4F1CAA0]);
    unint64_t v7 = (void *)_LSPlistGetCommonStrings(void)::result;
    _LSPlistGetCommonStrings(void)::Boolean result = (uint64_t)v6;
  }
}

void sub_1829BCAB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829BCC98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1829BCD78(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_recursive_lock_unlock();
  objc_exception_rethrow();
}

void sub_1829BCDA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

CFSetRef XCFSetCreateWithArray(const __CFAllocator *a1, CFArrayRef theArray, const CFSetCallBacks *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  unint64_t Count = CFArrayGetCount(theArray);
  CFIndex v7 = Count;
  id v8 = (const void **)v11;
  if (Count >= 0x101) {
    id v8 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
  }
  memset(v11, 0, 512);
  v13.id location = 0;
  v13.CFIndex length = v7;
  CFArrayGetValues(theArray, v13, v8);
  CFSetRef v9 = CFSetCreate(a1, v8, v7, a3);
  if (v8 != (const void **)v11) {
    free(v8);
  }
  return v9;
}

BOOL LaunchServices::Aliases::display(void **a1, uint64_t a2, int a3, CSStore2::AttributedStringWriter *a4)
{
  id v5 = _LSAliasGet(*a1, a3);
  if (v5)
  {
    id v6 = +[FSNode pathForBookmarkData:v5 error:0];
    if (v6)
    {
      CFIndex v7 = (NSURL *)[objc_alloc(MEMORY[0x1E4F1CB10]) initFileURLWithPath:v6 isDirectory:0];
      CSStore2::AttributedStringWriter::link(a4, v7, v6);
      id v8 = (NSString *)objc_claimAutoreleasedReturnValue();
      CSStore2::AttributedStringWriter::string(a4, &cfstr_Path.isa, v8);

      CSStore2::AttributedStringWriter::separator(a4, 45, 0);
    }

    unsigned int v14 = 0;
    if ((unint64_t)[v5 length] >= 5
      && ([v5 getBytes:&v14 length:4], unsigned int v9 = v14, v14 = bswap32(v14), v9 == 1802465122)
      && (uint64_t v10 = (NSAttributedString *)MEMORY[0x18530E280](v5)) != 0)
    {
      uint64_t v11 = (NSAttributedString *)[objc_alloc(MEMORY[0x1E4F28E48]) initWithString:v10];
      uint64_t v12 = [(NSAttributedString *)v11 length];
      -[NSAttributedString addAttribute:value:range:](v11, "addAttribute:value:range:", *MEMORY[0x1E4F5D110], MEMORY[0x1E4F1CC38], 0, v12);
      CSStore2::AttributedStringWriter::attributedString(a4, v11);
    }
    else
    {
      uint64_t v10 = (NSAttributedString *)_CSStoreCopyDebugDescriptionOfUnit();
      CSStore2::AttributedStringWriter::attributedString(a4, v10);
    }
  }
  return v5 != 0;
}

void sub_1829BD0D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void LaunchServices::EligibilityPredicateEvaluation::Predicate::parse_dictionary(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  v68[1] = *MEMORY[0x1E4F143B8];
  id v39 = a1;
  if ((_NSIsNSDictionary() & 1) == 0)
  {
    if (a2)
    {
      uint64_t v67 = *MEMORY[0x1E4F28228];
      v68[0] = @"Predicate was not a dictionary";
      id v6 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v68 forKeys:&v67 count:1];
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -50, (uint64_t)"parse_dictionary", 86, v6);
      *a2 = (id)objc_claimAutoreleasedReturnValue();
    }
    goto LABEL_50;
  }
  uint64_t v3 = objc_opt_class();
  uint64_t v4 = [v39 objectForKey:@"Conditions"];
  id v5 = (void *)v4;
  if (v3 && v4)
  {
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {

      goto LABEL_48;
    }
  }
  else if (!v4)
  {
LABEL_48:
    if (a2)
    {
      uint64_t v65 = *MEMORY[0x1E4F28228];
      int v66 = @"Predicate key Conditions was not a dictionary";
      int v29 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v66 forKeys:&v65 count:1];
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28798], 79, (uint64_t)"parse_dictionary", 92, v29);
      *a2 = (id)objc_claimAutoreleasedReturnValue();
    }
LABEL_50:
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 24) = 0;
    goto LABEL_67;
  }
  long long v59 = 0;
  int v60 = 0;
  id v58 = (uint64_t *)&v59;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  obuint64_t j = v5;
  uint64_t v7 = [obj countByEnumeratingWithState:&v54 objects:v64 count:16];
  if (v7)
  {
    uint64_t v41 = *(void *)v55;
    int v8 = 1;
    while (2)
    {
      uint64_t v40 = v7;
      for (uint64_t i = 0; i != v40; ++i)
      {
        if (*(void *)v55 != v41) {
          objc_enumerationMutation(obj);
        }
        uint64_t v10 = *(void **)(*((void *)&v54 + 1) + 8 * i);
        if ((_NSIsNSString() & 1) == 0) {
          goto LABEL_56;
        }
        uint64_t v53 = 0;
        uint64_t v53 = [v10 longLongValue];
        uint64_t v11 = [obj objectForKey:v10];
        if ((_NSIsNSArray() & 1) == 0)
        {

LABEL_56:
LABEL_57:
          if (a2)
          {
            uint64_t v61 = *MEMORY[0x1E4F28228];
            uint64_t v62 = @"Predicate conditions was not a stringifiedNumber->[number] map";
            uint64_t v32 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v62 forKeys:&v61 count:1];
            _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28798], 79, (uint64_t)"parse_dictionary", 122, v32);
            *a2 = (id)objc_claimAutoreleasedReturnValue();
          }
          *(unsigned char *)a3 = 0;
          *(unsigned char *)(a3 + 24) = 0;
          goto LABEL_66;
        }
        __p = 0;
        int v51 = 0;
        uint64_t v52 = 0;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        id v12 = v11;
        uint64_t v13 = [v12 countByEnumeratingWithState:&v46 objects:v63 count:16];
        if (v13)
        {
          int v36 = v8;
          uint64_t v14 = *(void *)v47;
          while (2)
          {
            for (uint64_t j = 0; j != v13; ++j)
            {
              if (*(void *)v47 != v14) {
                objc_enumerationMutation(v12);
              }
              id v16 = *(void **)(*((void *)&v46 + 1) + 8 * j);
              if ((_NSIsNSNumber() & 1) == 0)
              {
                int v8 = 0;
                goto LABEL_42;
              }
              uint64_t v17 = [v16 unsignedLongLongValue];
              uint64_t v18 = v17;
              uint64_t v19 = v51;
              if (v51 >= v52)
              {
                uint64_t v21 = (char *)__p;
                uint64_t v22 = (v51 - (unsigned char *)__p) >> 3;
                unint64_t v23 = v22 + 1;
                if ((unint64_t)(v22 + 1) >> 61) {
                  abort();
                }
                uint64_t v24 = v52 - (unsigned char *)__p;
                if ((v52 - (unsigned char *)__p) >> 2 > v23) {
                  unint64_t v23 = v24 >> 2;
                }
                if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v25 = v23;
                }
                if (v25)
                {
                  id v26 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<os_eligibility_answer_t>>((uint64_t)&v52, v25);
                  uint64_t v21 = (char *)__p;
                  uint64_t v19 = v51;
                }
                else
                {
                  id v26 = 0;
                }
                id v27 = (uint64_t *)&v26[8 * v22];
                uint64_t *v27 = v18;
                uint64_t v20 = (char *)(v27 + 1);
                while (v19 != v21)
                {
                  uint64_t v28 = *((void *)v19 - 1);
                  v19 -= 8;
                  *--id v27 = v28;
                }
                __p = v27;
                int v51 = v20;
                uint64_t v52 = &v26[8 * v25];
                if (v21) {
                  operator delete(v21);
                }
              }
              else
              {
                *(void *)int v51 = v17;
                uint64_t v20 = v19 + 8;
              }
              int v51 = v20;
            }
            uint64_t v13 = [v12 countByEnumeratingWithState:&v46 objects:v63 count:16];
            if (v13) {
              continue;
            }
            break;
          }
          int v8 = v36;
        }
LABEL_42:

        std::__tree<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::__map_value_compare<os_eligibility_domain_t,std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::less<os_eligibility_domain_t>,true>,std::allocator<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>>>::__emplace_unique_key_args<os_eligibility_domain_t,os_eligibility_domain_t&,std::vector<os_eligibility_answer_t>>(&v58, (unint64_t *)&v53, &v53, (uint64_t)&__p);
        if (__p)
        {
          int v51 = (char *)__p;
          operator delete(__p);
        }
      }
      uint64_t v7 = [obj countByEnumeratingWithState:&v54 objects:v64 count:16];
      if (v7) {
        continue;
      }
      break;
    }

    if ((v8 & 1) == 0) {
      goto LABEL_57;
    }
  }
  else
  {
  }
  uint64_t v31 = v58;
  uint64_t v30 = v59;
  id v43 = v58;
  char v44 = v59;
  id v45 = v60;
  if (v60)
  {
    *((void *)v59 + 2) = &v44;
    id v58 = (uint64_t *)&v59;
    long long v59 = 0;
    int v60 = 0;
    __p = v31;
    int v51 = v30;
    uint64_t v52 = v45;
    if (v45)
    {
      *((void *)v30 + 2) = &v51;
      id v43 = (uint64_t *)&v44;
      char v44 = 0;
      id v45 = 0;
      goto LABEL_62;
    }
  }
  else
  {
    id v43 = (uint64_t *)&v44;
    int v51 = v59;
    uint64_t v52 = 0;
  }
  __p = &v51;
  uint64_t v31 = (uint64_t *)&v51;
LABEL_62:
  *(void *)a3 = v31;
  *(void *)(a3 + 8) = v30;
  uint64_t v33 = a3 + 8;
  uint64_t v34 = v52;
  *(void *)(a3 + 16) = v52;
  if (v34)
  {
    uint64_t v35 = 0;
    *((void *)v30 + 2) = v33;
    __p = &v51;
    int v51 = 0;
    uint64_t v52 = 0;
  }
  else
  {
    *(void *)a3 = v33;
    uint64_t v35 = v51;
  }
  *(unsigned char *)(a3 + 24) = 1;
  std::__tree<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::__map_value_compare<os_eligibility_domain_t,std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::less<os_eligibility_domain_t>,true>,std::allocator<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>>>::destroy((uint64_t)&__p, v35);
  std::__tree<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::__map_value_compare<os_eligibility_domain_t,std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::less<os_eligibility_domain_t>,true>,std::allocator<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>>>::destroy((uint64_t)&v43, v44);
LABEL_66:
  std::__tree<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::__map_value_compare<os_eligibility_domain_t,std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::less<os_eligibility_domain_t>,true>,std::allocator<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>>>::destroy((uint64_t)&v58, v59);

LABEL_67:
}

void sub_1829BD6F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,void *a42)
{
  std::__tree<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::__map_value_compare<os_eligibility_domain_t,std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::less<os_eligibility_domain_t>,true>,std::allocator<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>>>::destroy((uint64_t)&a41, a42);
  _Unwind_Resume(a1);
}

void process_dir_events(int a1, void *a2)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a2[49];
  uint64_t v4 = (kevent *)a2[50];
  uint64_t v6 = a2[9];
  timeout.tv_sec = 0;
  timeout.tv_nsec = 0;
  dev_t v40 = v6;
  unsigned int v7 = kevent(a1, 0, 0, v4, v6, &timeout);
  if ((v7 & 0x80000000) != 0)
  {
    int v38 = *__error();
    id v39 = fsevent_default_log();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR)) {
      process_dir_events_cold_1(v38);
    }
  }
  else if (v7)
  {
    for (uint64_t i = v7; i; --i)
    {
      if ((int)v4->udata < 0) {
        int64_t udata = (uint64_t)v4->udata & 0x7FFFFFFF;
      }
      else {
        int64_t udata = (int64_t)v4->udata;
      }
      if (udata < 0
        || udata >= v40
        || (uint64_t v10 = v5 + 32 * udata, v12 = (int *)(v10 + 4), v11 = *(_DWORD *)(v10 + 4), v11 < 0)
        || (v14 = (char **)(v10 + 24), (uint64_t v13 = *(const char **)(v10 + 24)) == 0))
      {
        uint64_t v22 = fsevent_default_log();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          if (udata >= v40)
          {
            __darwin_time_t v28 = 0;
            dev_t v27 = -1;
          }
          else
          {
            uint64_t v26 = v5 + 32 * udata;
            dev_t v27 = *(_DWORD *)(v26 + 4);
            __darwin_time_t v28 = *(void *)(v26 + 24);
          }
          buf.st_dev = 136316162;
          *(void *)&buf.st_mode = "process_dir_events";
          WORD2(buf.st_ino) = 2048;
          *(__darwin_ino64_t *)((char *)&buf.st_ino + 6) = udata;
          HIWORD(buf.st_gid) = 1024;
          buf.st_rdev = v40;
          *((_WORD *)&buf.st_rdev + 2) = 1024;
          *(dev_t *)((char *)&buf.st_rdev + 6) = v27;
          WORD1(buf.st_atimespec.tv_sec) = 2048;
          *(__darwin_time_t *)((char *)&buf.st_atimespec.tv_sec + 4) = v28;
          p_stat buf = (uint8_t *)&buf;
          uint64_t v19 = v22;
          uint64_t v20 = "%s: index in event (%ld) not valid (%d max; fdtbl %d name %p)";
          uint32_t v21 = 44;
          goto LABEL_39;
        }
      }
      else
      {
        if (*(unsigned char *)v10)
        {
          if (watch_path("process_dir_events", a1, v13, (uint64_t)v4, v5 + 32 * udata, udata))
          {
            unint64_t v23 = fsevent_default_log();
            if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
            {
              int v36 = *v14;
              buf.st_dev = 136315394;
              *(void *)&buf.st_mode = "process_dir_events";
              WORD2(buf.st_ino) = 2080;
              *(__darwin_ino64_t *)((char *)&buf.st_ino + 6) = (__darwin_ino64_t)v36;
              _os_log_error_impl(&dword_182959000, v23, OS_LOG_TYPE_ERROR, "%s: creation: watch_path() failed for '%s'", (uint8_t *)&buf, 0x16u);
            }
          }
          if (*(unsigned char *)v10) {
            goto LABEL_17;
          }
          root_dir_event_callback((uint64_t)a2, udata, 32);
          if ((*(unsigned char *)v10 & 8) == 0) {
            goto LABEL_17;
          }
          if (!watch_all_parents((uint64_t)"process_dir_events", a1, *v14, v5 + 32 * udata, udata)) {
            goto LABEL_17;
          }
          uint64_t v24 = fsevent_default_log();
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
            goto LABEL_17;
          }
          unint64_t v25 = *v14;
          buf.st_dev = 136315394;
          *(void *)&buf.st_mode = "process_dir_events";
          WORD2(buf.st_ino) = 2080;
          *(__darwin_ino64_t *)((char *)&buf.st_ino + 6) = (__darwin_ino64_t)v25;
          p_stat buf = (uint8_t *)&buf;
          uint64_t v19 = v24;
          uint64_t v20 = "%s: creation: watch_all_parents() failed for '%s'";
LABEL_51:
          uint32_t v21 = 22;
          goto LABEL_39;
        }
        uint32_t fflags = v4->fflags;
        if ((fflags & 0x22) == 0)
        {
          if ((fflags & 1) == 0) {
            goto LABEL_17;
          }
          root_dir_event_callback((uint64_t)a2, udata, 32);
          if (watch_path("process_dir_events", a1, *v14, (uint64_t)v4, v5 + 32 * udata, udata))
          {
            int v29 = fsevent_default_log();
            if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
            {
              id v37 = *v14;
              buf.st_dev = 136315394;
              *(void *)&buf.st_mode = "process_dir_events";
              WORD2(buf.st_ino) = 2080;
              *(__darwin_ino64_t *)((char *)&buf.st_ino + 6) = (__darwin_ino64_t)v37;
              _os_log_error_impl(&dword_182959000, v29, OS_LOG_TYPE_ERROR, "%s: delete: watch_path() failed for '%s'", (uint8_t *)&buf, 0x16u);
            }
          }
          if ((*(unsigned char *)v10 & 8) == 0) {
            goto LABEL_17;
          }
          if (!watch_all_parents((uint64_t)"process_dir_events", a1, *v14, v5 + 32 * udata, udata)) {
            goto LABEL_17;
          }
          uint64_t v30 = fsevent_default_log();
          if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
            goto LABEL_17;
          }
          uint64_t v31 = *v14;
          buf.st_dev = 136315394;
          *(void *)&buf.st_mode = "process_dir_events";
          WORD2(buf.st_ino) = 2080;
          *(__darwin_ino64_t *)((char *)&buf.st_ino + 6) = (__darwin_ino64_t)v31;
          p_stat buf = (uint8_t *)&buf;
          uint64_t v19 = v30;
          uint64_t v20 = "%s: delete: watch_all_parents() failed for '%s'";
          goto LABEL_51;
        }
        memset(&buf, 0, sizeof(buf));
        if (!fcntl(v11, 50, __s1))
        {
          if (!strcmp(__s1, *v14) && !lstat(__s1, &buf)) {
            goto LABEL_17;
          }
          root_dir_event_callback((uint64_t)a2, udata, 32);
          if ((*(unsigned char *)v10 & 4) != 0)
          {
            free(*v14);
            FSNode *v14 = strdup(__s1);
          }
          else if (watch_path("process_dir_events", a1, *v14, (uint64_t)v4, v5 + 32 * udata, udata))
          {
            uint64_t v32 = fsevent_default_log();
            if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
            {
              uint64_t v33 = *v14;
              *(_DWORD *)uint64_t v42 = 136315394;
              id v43 = "process_dir_events";
              __int16 v44 = 2080;
              id v45 = v33;
              _os_log_error_impl(&dword_182959000, v32, OS_LOG_TYPE_ERROR, "%s: rename: watch_path() failed for '%s'", v42, 0x16u);
            }
          }
          if ((*(unsigned char *)v10 & 8) == 0) {
            goto LABEL_17;
          }
          if (!watch_all_parents((uint64_t)"process_dir_events", a1, *v14, v5 + 32 * udata, udata)) {
            goto LABEL_17;
          }
          uint64_t v34 = fsevent_default_log();
          if (!os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
            goto LABEL_17;
          }
          uint64_t v35 = *v14;
          *(_DWORD *)uint64_t v42 = 136315394;
          id v43 = "process_dir_events";
          __int16 v44 = 2080;
          id v45 = v35;
          p_stat buf = v42;
          uint64_t v19 = v34;
          uint64_t v20 = "%s: rename: watch_all_parents() failed for '%s'";
          goto LABEL_51;
        }
        id v16 = fsevent_default_log();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          int v17 = *v12;
          *(_DWORD *)uint64_t v42 = 136315394;
          id v43 = "process_dir_events";
          __int16 v44 = 1024;
          LODWORD(v45) = v17;
          p_stat buf = v42;
          uint64_t v19 = v16;
          uint64_t v20 = "%s: failed to get the new path for fd %d";
          uint32_t v21 = 18;
LABEL_39:
          _os_log_error_impl(&dword_182959000, v19, OS_LOG_TYPE_ERROR, v20, p_buf, v21);
        }
      }
LABEL_17:
      ++v4;
    }
  }
}

uint64_t watch_path(const char *a1, int a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v10 = 0;
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  memset(&v42, 0, sizeof(v42));
  int v11 = -1;
  memset(&v41, 0, sizeof(v41));
  int v12 = 1;
  BOOL v13 = 1;
  uint64_t v14 = 0xFFFFFFFFLL;
  while (1)
  {
    unsigned int v15 = v10;
    int v10 = v12;
    realpath_DARWIN_EXTSN(a3, &__s);
    if (v53)
    {
      int v16 = 0;
      while (1)
      {
        int v17 = open(&__s, 0x8000);
        if ((v17 & 0x80000000) == 0) {
          break;
        }
        __error();
        my_dirname(&__s, v54);
        realpath_DARWIN_EXTSN(v54, &__s);
        ++v16;
        if (!v53) {
          goto LABEL_8;
        }
      }
      int v11 = v17;
LABEL_11:
      uint64_t v14 = 0;
      goto LABEL_12;
    }
    int v16 = 0;
    if (v11 < 0)
    {
LABEL_8:
      int v11 = open(&__s, 0x8000);
      if (v11 < 0)
      {
        uint64_t v30 = fsevent_default_log();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
          watch_path_cold_2();
        }
        __error();
        uint64_t v32 = fsevent_default_log();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
          watch_path_cold_1();
        }
        uint64_t v14 = *__error();
        goto LABEL_45;
      }
      goto LABEL_11;
    }
LABEL_12:
    fcntl(v11, 2, 1);
    if (v13 || (int v18 = open(&__s, 0), v18 < 0))
    {
      unsigned int v20 = v15;
    }
    else
    {
      int v19 = v18;
      fstat(v11, &v42);
      fstat(v19, &v41);
      close(v19);
      close(v11);
      if (v42.st_ino == v41.st_ino)
      {
        uint64_t v33 = fsevent_default_log();
        if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
          watch_path_cold_3();
        }
        int v11 = -1;
        goto LABEL_45;
      }
      unsigned int v20 = v15;
      int v11 = -1;
    }
    *(void *)a4 = v11;
    *(void *)(a4 + 8) = 0x270021FFFCLL;
    *(void *)(a4 + 16) = 0;
    *(void *)(a4 + 24) = a6;
    uint64_t v14 = kevent(a2, (const kevent *)a4, 1, 0, 0, 0);
    if ((v14 & 0x80000000) != 0)
    {
      uint32_t v21 = fsevent_default_log();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        uint64_t v37 = *(void *)(a5 + 24);
        uint64_t v26 = __error();
        dev_t v27 = strerror(*v26);
        *(_DWORD *)stat buf = 136316162;
        __int16 v44 = a1;
        __int16 v45 = 2080;
        p_s = "watch_path";
        __int16 v47 = 1024;
        int v48 = v11;
        __int16 v49 = 2080;
        *(void *)uint64_t v50 = v37;
        *(_WORD *)&v50[8] = 2080;
        v51[0] = v27;
        _os_log_error_impl(&dword_182959000, v21, OS_LOG_TYPE_ERROR, "%s: %s: error trying to add kqueue for fd %d (%s; %s)",
          buf,
          0x30u);
      }
    }
    uint64_t v22 = *(unsigned int *)(a5 + 4);
    if ((v22 & 0x80000000) == 0)
    {
      *(void *)a4 = v22;
      *(void *)(a4 + 8) = 0x270002FFFCLL;
      *(void *)(a4 + 16) = 0;
      *(void *)(a4 + 24) = a6;
      uint64_t v14 = kevent(a2, (const kevent *)a4, 1, 0, 0, 0);
      if ((v14 & 0x80000000) != 0)
      {
        unint64_t v23 = fsevent_default_log();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          int v38 = *(_DWORD *)(a5 + 4);
          __darwin_time_t v28 = __error();
          int v29 = strerror(*v28);
          *(_DWORD *)stat buf = 136315906;
          __int16 v44 = a1;
          __int16 v45 = 2080;
          p_s = "watch_path";
          __int16 v47 = 1024;
          int v48 = v38;
          __int16 v49 = 2080;
          *(void *)uint64_t v50 = v29;
          _os_log_error_impl(&dword_182959000, v23, OS_LOG_TYPE_ERROR, "%s: %s: error removing fd %d from kqueue (%s)", buf, 0x26u);
        }
      }
      close(*(_DWORD *)(a5 + 4));
    }
    *(_DWORD *)a5 = *(_DWORD *)a5 & 0xFFFFFFFE | (v16 != 0);
    *(_DWORD *)(a5 + 4) = v11;
    int v24 = open(&__s, 0);
    if (v24 < 0) {
      break;
    }
    fstat(v11, &v42);
    fstat(v24, &v41);
    close(v24);
    if (v42.st_ino == v41.st_ino) {
      goto LABEL_39;
    }
    unint64_t v25 = fsevent_default_log();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)stat buf = 136315394;
      __int16 v44 = "watch_path";
      __int16 v45 = 2080;
      p_s = &__s;
      _os_log_error_impl(&dword_182959000, v25, OS_LOG_TYPE_ERROR, "%s: watching path(%s) renamed while registering watchroot", buf, 0x16u);
    }
LABEL_30:
    BOOL v13 = v24 >= 0;
    int v12 = v10 + 1;
    if (v10 == 1000)
    {
      int v10 = 1001;
      goto LABEL_45;
    }
  }
  if ((*(_DWORD *)a5 & 5) != 4) {
    goto LABEL_30;
  }
  if (!fcntl(*(_DWORD *)(a5 + 4), 50, buf))
  {
    free(*(void **)(a5 + 24));
    *(void *)(a5 + 24) = strdup((const char *)buf);
  }
LABEL_39:
  if (v20 <= 0x3E6 && (v11 & 0x80000000) == 0) {
    return 0;
  }
LABEL_45:
  uint64_t v34 = fsevent_default_log();
  if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
  {
    int v36 = strerror(v14);
    *(_DWORD *)stat buf = 136316418;
    __int16 v44 = "watch_path";
    __int16 v45 = 2080;
    p_s = (char *)a3;
    __int16 v47 = 1024;
    int v48 = v11;
    __int16 v49 = 1024;
    *(_DWORD *)uint64_t v50 = v10;
    *(_WORD *)&v50[4] = 1024;
    *(_DWORD *)&v50[6] = v14;
    LOWORD(v51[0]) = 2080;
    *(void *)((char *)v51 + 2) = v36;
    _os_log_error_impl(&dword_182959000, v34, OS_LOG_TYPE_ERROR, "%s: watching path (%s) fd(%d) retry (%d) failed (%d):(%s)", buf, 0x32u);
  }
  return v14;
}

char *my_dirname(char *__s, char *a2)
{
  if (__s && *__s && (uint64_t v4 = strrchr(__s, 47)) != 0)
  {
    if (v4 > __s)
    {
      while (*v4 == 47)
      {
        if (--v4 <= __s)
        {
          uint64_t v4 = __s;
          break;
        }
      }
    }
    uint64_t v5 = v4 - __s;
    if (v4 - __s > 1023)
    {
      strncpy(a2, __s, 0x3FFuLL);
      a2[1023] = 0;
    }
    else
    {
      uint64_t v6 = v5 + 1;
      strncpy(a2, __s, v5 + 1);
      a2[v6] = 0;
    }
  }
  else
  {
    strcpy(a2, "./");
  }
  return a2;
}

void sub_1829BEA28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829BEDD4(_Unwind_Exception *a1)
{
  unsigned int v7 = v6;

  _Unwind_Resume(a1);
}

void sub_1829BF088(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829BF6F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

id LaunchServices::URLOverrides::getLog(LaunchServices::URLOverrides *this)
{
  if (LaunchServices::URLOverrides::getLog(void)::once != -1) {
    dispatch_once(&LaunchServices::URLOverrides::getLog(void)::once, &__block_literal_global_77);
  }
  uint64_t v1 = (void *)LaunchServices::URLOverrides::getLog(void)::result;

  return v1;
}

uint64_t getFileHandleForOpeningResource(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  v27[1] = *MEMORY[0x1E4F143B8];
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  id v12 = v10;
  if (([v9 isFileURL] & 1) == 0)
  {

    goto LABEL_13;
  }
  uint64_t v13 = objc_opt_class();
  uint64_t v14 = [v11 objectForKey:@"FileProviderString"];
  unsigned int v15 = (void *)v14;
  if (v13 && v14)
  {
    if (objc_opt_isKindOfClass()) {
      goto LABEL_12;
    }
  }
  else if (v14)
  {
    goto LABEL_12;
  }
  uint64_t v16 = objc_opt_class();
  uint64_t v17 = [v12 objectForKey:@"FileProviderString"];
  unsigned int v15 = (void *)v17;
  if (v16 && v17 && (objc_opt_isKindOfClass() & 1) == 0)
  {

    unsigned int v15 = 0;
  }
LABEL_12:

  if (v15)
  {
LABEL_13:
    id v18 = 0;
    if (a4)
    {
LABEL_14:
      id v18 = v18;
      id v19 = 0;
      *a4 = v18;
LABEL_18:
      uint64_t v21 = 1;
      goto LABEL_19;
    }
LABEL_17:
    id v19 = 0;
    goto LABEL_18;
  }
  uint64_t v20 = open((const char *)[v9 fileSystemRepresentation], 0);
  if ((v20 & 0x80000000) == 0)
  {
    id v18 = (id)[objc_alloc(MEMORY[0x1E4F28CB0]) initWithFileDescriptor:v20 closeOnDealloc:1];
    if (a4) {
      goto LABEL_14;
    }
    goto LABEL_17;
  }
  unint64_t v23 = (void *)*MEMORY[0x1E4F28798];
  uint64_t v24 = *__error();
  uint64_t v26 = *MEMORY[0x1E4F28228];
  v27[0] = @"open(2) failed when opening resource to open";
  unint64_t v25 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v27 forKeys:&v26 count:1];
  _LSMakeNSErrorImpl(v23, v24, (uint64_t)"getFileHandleForOpeningResource", 1863, v25);
  id v19 = (id)objc_claimAutoreleasedReturnValue();

  if (a5)
  {
    id v19 = v19;
    id v18 = 0;
    uint64_t v21 = 0;
    *a5 = v19;
  }
  else
  {
    id v18 = 0;
    uint64_t v21 = 0;
  }
LABEL_19:

  return v21;
}

uint64_t ___ZL44_LSSchemeApprovalPromptWithCompletionHandlerP15NSXPCConnectionP8NSStringS2_S2_mU13block_pointerFvbP7NSErrorE_block_invoke_2(uint64_t a1)
{
  CFOptionFlags v7 = 0;
  if (CFUserNotificationDisplayAlert(0.0, 0, 0, 0, 0, *(CFStringRef *)(a1 + 32), *(CFStringRef *)(a1 + 40), *(CFStringRef *)(a1 + 48), *(CFStringRef *)(a1 + 56), 0, &v7))
  {
    uint64_t v2 = *(void *)(a1 + 64);
LABEL_4:
    uint64_t v3 = _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -10826, (uint64_t)"_LSSchemeApprovalPromptWithCompletionHandler_block_invoke_2", 399, 0);
    uint64_t v4 = 0;
    goto LABEL_5;
  }
  uint64_t v2 = *(void *)(a1 + 64);
  if ((v7 & 3) != 0) {
    goto LABEL_4;
  }
  uint64_t v3 = 0;
  uint64_t v4 = 1;
LABEL_5:
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void *))(v2 + 16))(v2, v4, v3);
  if ((v4 & 1) == 0) {

  }
  return MEMORY[0x185310460](v5);
}

void sub_1829BFB4C(_Unwind_Exception *exception_object)
{
  if ((v2 & 1) == 0) {

  }
  _Unwind_Resume(exception_object);
}

__CFString *_LSDatabaseGetBindingMapDebugName(uint64_t a1, unsigned int a2)
{
  if (a2 > 0xD)
  {
    char v2 = @"unknown";
  }
  else
  {
    char v2 = (__CFString *)*((id *)&kLSBindingInfo + 4 * a2);
    if ([(__CFString *)v2 hasSuffix:@"Binding"])
    {
      uint64_t v3 = -[__CFString substringToIndex:](v2, "substringToIndex:", -[__CFString length](v2, "length") - [@"Binding" length]);

      char v2 = (__CFString *)v3;
    }
  }

  return v2;
}

void sub_1829BFC44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829BFCDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829BFF5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829C0070(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829C0428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1829C0784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  uint64_t v22 = v21;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

uint64_t MDTCopierGetTypeID()
{
  int v0 = 0;
  atomic_compare_exchange_strong_explicit(__gMDTCopierTypeInitialized, (unsigned int *)&v0, 1u, memory_order_relaxed, memory_order_relaxed);
  if (!v0)
  {
    __gMDTCopierCFTypeID TypeID = _CFRuntimeRegisterClass();
    pthread_mutex_init(&__gMDTCopierLock, 0);
    __gMDTCopierPorts = (uint64_t)CFDictionaryCreateMutable(0, 0, 0, MEMORY[0x1E4F1D540]);
  }
  return __gMDTCopierTypeID;
}

uint64_t _status(unsigned int a1, uint64_t a2, const UInt8 *a3, unsigned int a4)
{
  pthread_mutex_lock(&__gMDTCopierLock);
  Value = CFDictionaryGetValue((CFDictionaryRef)__gMDTCopierPorts, (const void *)a1);
  pthread_mutex_unlock(&__gMDTCopierLock);
  if (Value)
  {
    if (a4)
    {
      CFDataRef v8 = CFDataCreateWithBytesNoCopy(0, a3, a4, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
      if (v8 && (v9 = v8, CFDataRef v10 = __MDTUnserializePropertyList(v8), CFRelease(v9), v10))
      {
        *((void *)Value + 11) = __MDTCreateURLFromPropertyList(v10);
        CFDictionaryRef v11 = __MDTCreateErrorFromPropertyList(v10);
      }
      else
      {
        CFDictionaryRef v11 = CFErrorCreate(0, (CFErrorDomain)*MEMORY[0x1E4F1D160], 5, 0);
        CFDataRef v10 = 0;
      }
      *((void *)Value + 12) = v11;
    }
    else
    {
      CFDataRef v10 = 0;
      CFDictionaryRef v11 = (const __CFDictionary *)*((void *)Value + 12);
    }
    if (v11) {
      uint64_t v12 = 3;
    }
    else {
      uint64_t v12 = 1;
    }
    (*((void (**)(const void *, uint64_t, void))Value + 2))(Value, v12, *((void *)Value + 11));
    if (v10) {
      CFRelease(v10);
    }
  }
  return 0;
}

CFMachPortRef *MDTCreateCopierWithSandboxExtensionAndReturnError(const __CFAllocator *a1, const __CFURL *a2, const __CFURL *a3, const __CFString *a4, const __CFString *a5, __CFMachPort *a6, __CFMachPort *a7, __CFMachPort *a8, CFErrorRef *a9)
{
  kern_return_t v20;
  kern_return_t v21;
  kern_return_t v22;
  kern_return_t inserted;
  __CFMachPort *v24;
  int v25;
  mach_port_t Port;
  int v27;
  CFURLRef v28;
  CFURLRef v29;
  CFStringRef v30;
  CFStringRef Copy;
  kern_return_t v32;
  __CFDictionary *v33;
  mach_port_t v34;
  CFStringRef v36;
  __CFString *v37;
  CFIndex v38;
  int v39;
  CFErrorRef v40;
  CFIndex v41;
  __CFString *v42;
  CFStringRef v43;
  int v44;
  CFMachPortRef v45;
  CFMachPortRef v46;
  CFMachPortRef v47;
  CFMachPortRef v48;
  CFMachPortRef v49;
  CFMachPortContext v50;
  int v51;
  mach_port_t special_port[2];
  mach_port_t sp[2];

  *(void *)special_port = 0;
  *(void *)sp = 0;
  int v51 = 0;
  if (!a2)
  {
    int v36 = (const __CFString *)*MEMORY[0x1E4F1D160];
    uint64_t v37 = @"NULL source URL";
    int v38 = 22;
    id v39 = 341;
LABEL_27:
    dev_t v40 = MDTCreateError(v36, v38, v39, (uint64_t)v37);
    goto LABEL_53;
  }
  if (!a3)
  {
    int v36 = (const __CFString *)*MEMORY[0x1E4F1D160];
    uint64_t v37 = @"NULL destination URL";
    int v38 = 22;
    id v39 = 342;
    goto LABEL_27;
  }
  if (!a7)
  {
    int v36 = (const __CFString *)*MEMORY[0x1E4F1D160];
    uint64_t v37 = @"NULL callback";
    int v38 = 22;
    id v39 = 343;
    goto LABEL_27;
  }
  MDTCopierGetTypeID();
  Instance = (CFMachPortRef *)_CFRuntimeCreateInstance();
  if (!Instance)
  {
    int v36 = (const __CFString *)*MEMORY[0x1E4F1D160];
    uint64_t v37 = @"Could not create CF instance";
    int v38 = 12;
    id v39 = 348;
    goto LABEL_27;
  }
  id v18 = Instance;
  *((_OWORD *)Instance + 5) = 0u;
  *((_OWORD *)Instance + 6) = 0u;
  *((_OWORD *)Instance + 3) = 0u;
  *((_OWORD *)Instance + 4) = 0u;
  *((_OWORD *)Instance + 1) = 0u;
  *((_OWORD *)Instance + 2) = 0u;
  id v19 = (ipc_space_t *)MEMORY[0x1E4F14960];
  uint64_t v20 = task_get_special_port(*MEMORY[0x1E4F14960], 4, &special_port[1]);
  if (v20)
  {
    stat v41 = v20;
    stat v42 = @"Could not get bootstrap port";
    id v43 = (const __CFString *)*MEMORY[0x1E4F1D150];
    __int16 v44 = 354;
  }
  else if (special_port[1])
  {
    uint64_t v21 = bootstrap_look_up(special_port[1], "com.apple.mdt", &sp[1]);
    if (v21)
    {
      stat v41 = v21;
      stat v42 = @"Could not look up MDT service";
      id v43 = (const __CFString *)*MEMORY[0x1E4F1D150];
      __int16 v44 = 360;
    }
    else if (sp[1])
    {
      v50.version = 0;
      memset(&v50.retain, 0, 24);
      v50.info = v18;
      uint64_t v22 = mach_port_allocate(*v19, 1u, sp);
      if (v22)
      {
        stat v41 = v22;
        stat v42 = @"Could not allocate port receive right";
        id v43 = (const __CFString *)*MEMORY[0x1E4F1D150];
        __int16 v44 = 374;
      }
      else
      {
        inserted = mach_port_insert_right(*v19, sp[0], sp[0], 0x14u);
        if (inserted)
        {
          stat v41 = inserted;
          stat v42 = @"Could not insert send right";
          id v43 = (const __CFString *)*MEMORY[0x1E4F1D150];
          __int16 v44 = 377;
        }
        else
        {
          uint64_t v24 = CFMachPortCreateWithPort(a1, sp[0], (CFMachPortCallBack)__MDTCopierMachCallback, &v50, 0);
          v18[6] = v24;
          if (v24)
          {
            unint64_t v25 = sp[1];
            Port = CFMachPortGetPort(v24);
            dev_t v27 = MDT_create_session(v25, Port, (_DWORD *)v18 + 10, &v51);
            if (v27)
            {
              stat v41 = v27;
              stat v42 = @"Could not create MDT session";
              id v43 = (const __CFString *)*MEMORY[0x1E4F1D150];
              __int16 v44 = 389;
            }
            else
            {
              __darwin_time_t v28 = CFURLCopyAbsoluteURL(a2);
              v18[7] = v28;
              if (v28)
              {
                int v29 = CFURLCopyAbsoluteURL(a3);
                v18[8] = v29;
                if (v29)
                {
                  if (a4 && (uint64_t v30 = CFStringCreateCopy(0, a4), (v18[9] = (CFMachPortRef)v30) == 0))
                  {
                    id v43 = (const __CFString *)*MEMORY[0x1E4F1D160];
                    stat v42 = @"Could not copy unique ID";
                    stat v41 = 12;
                    __int16 v44 = 403;
                  }
                  else if (a5 && (Copy = CFStringCreateCopy(0, a5), (_OWORD v18[10] = (CFMachPortRef)Copy) == 0))
                  {
                    id v43 = (const __CFString *)*MEMORY[0x1E4F1D160];
                    stat v42 = @"Could not copy sandbox extension";
                    stat v41 = 12;
                    __int16 v44 = 410;
                  }
                  else
                  {
                    uint64_t v32 = mach_port_request_notification(*v19, sp[0], 70, 1u, sp[0], 0x15u, special_port);
                    if (v32)
                    {
                      stat v41 = v32;
                      stat v42 = @"Could not request port notification";
                      id v43 = (const __CFString *)*MEMORY[0x1E4F1D150];
                      __int16 v44 = 418;
                    }
                    else
                    {
                      if (!special_port[0])
                      {
                        void v18[2] = a7;
                        v18[3] = a8;
                        v18[13] = a6;
                        pthread_mutex_lock(&__gMDTCopierLock);
                        uint64_t v33 = (__CFDictionary *)__gMDTCopierPorts;
                        uint64_t v34 = CFMachPortGetPort(v18[6]);
                        CFDictionarySetValue(v33, (const void *)v34, v18);
                        pthread_mutex_unlock(&__gMDTCopierLock);
                        return v18;
                      }
                      id v43 = (const __CFString *)*MEMORY[0x1E4F1D160];
                      stat v42 = @"Could not request port notification";
                      stat v41 = 12;
                      __int16 v44 = 420;
                    }
                  }
                }
                else
                {
                  id v43 = (const __CFString *)*MEMORY[0x1E4F1D160];
                  stat v42 = @"Could not copy destination URL";
                  stat v41 = 12;
                  __int16 v44 = 397;
                }
              }
              else
              {
                id v43 = (const __CFString *)*MEMORY[0x1E4F1D160];
                stat v42 = @"Could not copy source URL";
                stat v41 = 12;
                __int16 v44 = 393;
              }
            }
          }
          else
          {
            id v43 = (const __CFString *)*MEMORY[0x1E4F1D160];
            stat v42 = @"Could not create CFMachPort";
            stat v41 = 12;
            __int16 v44 = 381;
          }
        }
      }
    }
    else
    {
      id v43 = (const __CFString *)*MEMORY[0x1E4F1D160];
      stat v42 = @"Could not look up MDT service";
      stat v41 = 12;
      __int16 v44 = 362;
    }
  }
  else
  {
    id v43 = (const __CFString *)*MEMORY[0x1E4F1D160];
    stat v42 = @"Could not get bootstrap port";
    stat v41 = 12;
    __int16 v44 = 356;
  }
  dev_t v40 = MDTCreateError(v43, v41, v44, (uint64_t)v42);
  __int16 v45 = v18[7];
  if (v45) {
    CFRelease(v45);
  }
  long long v46 = v18[8];
  if (v46) {
    CFRelease(v46);
  }
  __int16 v47 = v18[9];
  if (v47) {
    CFRelease(v47);
  }
  int v48 = v18[10];
  if (v48) {
    CFRelease(v48);
  }
  __int16 v49 = v18[6];
  if (v49) {
    CFRelease(v49);
  }
  CFRelease(v18);
LABEL_53:
  if (a9)
  {
    id v18 = 0;
    *a9 = v40;
  }
  else
  {
    if (v40) {
      CFRelease(v40);
    }
    return 0;
  }
  return v18;
}

CFErrorRef MDTCreateError(const __CFString *a1, CFIndex a2, int a3, uint64_t a4)
{
  userInfoKeys[3] = *(void **)MEMORY[0x1E4F143B8];
  int valuePtr = a3;
  userInfoKeys[0] = @"MobileDataTransitErrorFile";
  userInfoKeys[1] = @"MobileDataTransitErrorLine";
  userInfoKeys[2] = *(void **)MEMORY[0x1E4F1D140];
  userInfoValues = @"/Library/Caches/com.apple.xbs/Sources/MobileDataTransit/Client.c";
  CFTypeRef cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  uint64_t v12 = a4;
  CFErrorRef v7 = CFErrorCreateWithUserInfoKeysAndValues(0, a1, a2, (const void *const *)userInfoKeys, (const void *const *)&userInfoValues, 3);
  if (cf) {
    CFRelease(cf);
  }
  return v7;
}

void __MDTCopierMachCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  memset(v8, 0, 60);
  int v5 = *(_DWORD *)(a2 + 20);
  if ((v5 - 78) <= 0xFFFFFFF1)
  {
    MDTR_server(a2, (uint64_t)v8);
    int v5 = *(_DWORD *)(a2 + 20);
  }
  if (v5 == 72 || v5 == 70)
  {
    MDTCopierInvalidate(a4);
    CFErrorRef v7 = CFErrorCreate(0, (CFErrorDomain)*MEMORY[0x1E4F1D160], 57, 0);
    *(void *)(a4 + 96) = v7;
    (*(void (**)(uint64_t, uint64_t, void, CFErrorRef, void))(a4 + 16))(a4, 3, 0, v7, *(void *)(a4 + 24));
  }
}

__CFRunLoopSource *MDTCopierScheduleWithRunLoop(uint64_t a1, __CFRunLoop *a2, const __CFString *a3)
{
  if (!*(void *)(a1 + 32))
  {
    CFAllocatorRef v6 = CFGetAllocator((CFTypeRef)a1);
    Boolean result = CFMachPortCreateRunLoopSource(v6, *(CFMachPortRef *)(a1 + 48), 0);
    *(void *)(a1 + 32) = result;
    if (!result) {
      return result;
    }
    CFRunLoopAddSource(a2, result, a3);
  }
  return (__CFRunLoopSource *)1;
}

void MDTCopierUnscheduleFromRunLoop(uint64_t a1, CFRunLoopRef rl, const __CFString *a3)
{
  uint64_t v3 = *(__CFRunLoopSource **)(a1 + 32);
  if (v3) {
    CFRunLoopRemoveSource(rl, v3, a3);
  }
}

BOOL MDTCopierStart(uint64_t a1)
{
  CFURLRef v2 = copyCStringPath(*(const __CFURL **)(a1 + 56));
  CFURLRef v3 = copyCStringPath(*(const __CFURL **)(a1 + 64));
  uint64_t v4 = *(void *)(a1 + 72);
  if (v4) {
    int v5 = copyCString(*(const __CFString **)(a1 + 72));
  }
  else {
    int v5 = "";
  }
  CFAllocatorRef v6 = copyCString(*(const __CFString **)(a1 + 80));
  int v7 = MDT_start(*(unsigned int *)(a1 + 40));
  CFAllocatorDeallocate(0, v2);
  CFAllocatorDeallocate(0, v3);
  if (v4) {
    CFAllocatorDeallocate(0, v5);
  }
  if (v6) {
    CFAllocatorDeallocate(0, v6);
  }
  return v7 == 0;
}

CFURLRef copyCStringPath(const __CFURL *result)
{
  if (result)
  {
    CFStringRef v1 = CFURLCopyFileSystemPath(result, kCFURLPOSIXPathStyle);
    CFURLRef v2 = copyCString(v1);
    CFRelease(v1);
    return (const __CFURL *)v2;
  }
  return result;
}

char *copyCString(const __CFString *a1)
{
  if (!a1) {
    return 0;
  }
  CFIndex Length = CFStringGetLength(a1);
  CFIndex v3 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
  uint64_t v4 = (char *)CFAllocatorAllocate(0, v3, 0);
  CFStringGetCString(a1, v4, v3, 0x8000100u);
  return v4;
}

void MDTCopierInvalidate(uint64_t a1)
{
  CFURLRef v2 = *(__CFRunLoopSource **)(a1 + 32);
  if (v2) {
    CFRunLoopSourceInvalidate(v2);
  }
  mach_port_name_t v3 = *(_DWORD *)(a1 + 40);
  if (v3)
  {
    mach_port_deallocate(*MEMORY[0x1E4F14960], v3);
    *(_DWORD *)(a1 + 40) = 0;
  }
  uint64_t v4 = *(__CFMachPort **)(a1 + 48);
  if (v4)
  {
    CFMachPortInvalidate(v4);
  }
}

void __MDTCopierFinalize(void *a1)
{
  MDTCopierInvalidate((uint64_t)a1);
  CFURLRef v2 = (const void *)a1[4];
  if (v2) {
    CFRelease(v2);
  }
  mach_port_name_t v3 = (const void *)a1[6];
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)a1[7];
  if (v4) {
    CFRelease(v4);
  }
  int v5 = (const void *)a1[8];
  if (v5) {
    CFRelease(v5);
  }
  CFAllocatorRef v6 = (const void *)a1[9];
  if (v6) {
    CFRelease(v6);
  }
  int v7 = (const void *)a1[10];
  if (v7) {
    CFRelease(v7);
  }
  CFDataRef v8 = (const void *)a1[11];
  if (v8) {
    CFRelease(v8);
  }
  uint64_t v9 = (const void *)a1[12];
  if (v9)
  {
    CFRelease(v9);
  }
}

__CFString *__MDTCopierCopyDescription(void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, @"<MDTCopier %p [%p]> {\n", a1, v2);
  CFStringAppendFormat(Mutable, 0, @"RunLoopSource: %p", a1[4]);
  CFStringAppendFormat(Mutable, 0, @"Source: %@", a1[7]);
  CFStringAppendFormat(Mutable, 0, @"Dest: %@", a1[8]);
  CFStringAppendFormat(Mutable, 0, @"}");
  return Mutable;
}

CFDictionaryRef __MDTCreateErrorFromPropertyList(const __CFDictionary *result)
{
  if (result)
  {
    CFDictionaryRef v1 = result;
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(result, @"Domain");
    CFNumberRef v3 = (const __CFNumber *)CFDictionaryGetValue(v1, @"Code");
    CFDictionaryRef v4 = (const __CFDictionary *)CFDictionaryGetValue(v1, @"UserInfo");
    Boolean result = 0;
    CFIndex valuePtr = 0;
    if (Value)
    {
      if (v3)
      {
        CFNumberGetValue(v3, kCFNumberLongType, &valuePtr);
        return CFErrorCreate(0, Value, valuePtr, v4);
      }
    }
  }
  return result;
}

CFURLRef __MDTCreateURLFromPropertyList(const __CFDictionary *a1)
{
  if (!a1) {
    return 0;
  }
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a1, @"URL");
  if (!Value) {
    return 0;
  }

  return CFURLCreateWithString(0, Value, 0);
}

CFDataRef __MDTUnserializePropertyList(CFDataRef theData)
{
  CFDataRef v1 = theData;
  if (theData)
  {
    BytePtr = CFDataGetBytePtr(theData);
    CFIndex Length = CFDataGetLength(v1);
    CFDictionaryRef v4 = CFReadStreamCreateWithBytesNoCopy(0, BytePtr, Length, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
    if (v4)
    {
      int v5 = v4;
      CFPropertyListFormat format = 0;
      CFReadStreamOpen(v4);
      CFIndex v6 = CFDataGetLength(v1);
      CFDataRef v1 = (const __CFData *)CFPropertyListCreateWithStream(0, v5, v6, 0, &format, 0);
      CFReadStreamClose(v5);
      CFRelease(v5);
    }
    else
    {
      return 0;
    }
  }
  return v1;
}

uint64_t MDT_create_session(int a1, int a2, _DWORD *a3, _DWORD *a4)
{
  *(_OWORD *)&msg[20] = 0u;
  long long v13 = 0u;
  uint64_t v14 = 0;
  *(_DWORD *)&msg[4] = 0;
  *(_DWORD *)&msg[24] = 1;
  *(_DWORD *)&msg[28] = a2;
  LODWORD(v13) = 1114112;
  mach_port_name_t reply_port = mig_get_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = reply_port;
  *(_DWORD *)msg = -2147478253;
  *(void *)&msg[16] = 0x38E38E3900000000;
  if (MEMORY[0x1E4F14B18])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    mach_port_name_t reply_port = *(_DWORD *)&msg[12];
  }
  uint64_t v8 = mach_msg((mach_msg_header_t *)msg, 3, 0x28u, 0x3Cu, reply_port, 0, 0);
  uint64_t v9 = v8;
  if ((v8 - 268435458) <= 0xE && ((1 << (v8 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(*(mach_port_t *)&msg[12]);
  }
  else
  {
    if (!v8)
    {
      if (*(_DWORD *)&msg[20] == 71)
      {
        uint64_t v9 = 4294966988;
      }
      else if (*(_DWORD *)&msg[20] == 954437277)
      {
        if ((*(_DWORD *)msg & 0x80000000) != 0)
        {
          uint64_t v9 = 4294966996;
          if (*(_DWORD *)&msg[24] == 1
            && *(_DWORD *)&msg[4] == 52
            && !*(_DWORD *)&msg[8]
            && WORD1(v13) << 16 == 1114112)
          {
            uint64_t v9 = 0;
            int v10 = HIDWORD(v13);
            *a3 = *(_DWORD *)&msg[28];
            *a4 = v10;
            return v9;
          }
        }
        else if (*(_DWORD *)&msg[4] == 36)
        {
          uint64_t v9 = 4294966996;
          if (*(_DWORD *)&msg[32])
          {
            if (*(_DWORD *)&msg[8]) {
              uint64_t v9 = 4294966996;
            }
            else {
              uint64_t v9 = *(unsigned int *)&msg[32];
            }
          }
        }
        else
        {
          uint64_t v9 = 4294966996;
        }
      }
      else
      {
        uint64_t v9 = 4294966995;
      }
      mach_msg_destroy((mach_msg_header_t *)msg);
      return v9;
    }
    mig_dealloc_reply_port(*(mach_port_t *)&msg[12]);
  }
  return v9;
}

uint64_t MDT_start(uint64_t a1)
{
  unsigned int v1 = MEMORY[0x1F4188790](a1);
  int v4 = v3;
  CFIndex v6 = v5;
  int v8 = v7;
  int v10 = v9;
  uint64_t v12 = v11;
  unsigned int v13 = v1;
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  long long v34 = 0u;
  memset(v35, 0, 464);
  long long v32 = 0u;
  long long v33 = 0u;
  *((void *)&v33 + 1) = *MEMORY[0x1E4F14068];
  uint64_t v14 = MEMORY[0x1E4F149B0];
  if (MEMORY[0x1E4F149B0]) {
    int v15 = mig_strncpy_zerofill((char *)&v34 + 8, v2, 1024);
  }
  else {
    int v15 = mig_strncpy((char *)&v34 + 8, v2, 1024);
  }
  LODWORD(v34) = 0;
  DWORD1(v34) = v15;
  uint64_t v16 = (v15 + 3) & 0xFFFFFFFC;
  uint64_t v17 = (char *)&v32 + v16 - 1024;
  id v18 = (char *)v35 + v16;
  if (v14) {
    int v19 = mig_strncpy_zerofill(v18, v12, 1024);
  }
  else {
    int v19 = mig_strncpy(v18, v12, 1024);
  }
  *((_DWORD *)v17 + 267) = v19;
  *((_DWORD *)v17 + 266) = 0;
  uint64_t v20 = (v19 + 3) & 0xFFFFFFFC;
  uint64_t v21 = &v17[v20];
  uint64_t v22 = (uint64_t)&v17[v20 - 1024];
  unint64_t v23 = v21 + 1080;
  if (v14) {
    int v24 = mig_strncpy_zerofill(v23, v10, 1024);
  }
  else {
    int v24 = mig_strncpy(v23, v10, 1024);
  }
  *(_DWORD *)(v22 + 2100) = v24;
  *(_DWORD *)(v22 + 2096) = 0;
  uint64_t v25 = (v24 + 3) & 0xFFFFFFFC;
  uint64_t v26 = v22 + v25;
  uint64_t v27 = v22 + v25 - 1024;
  *(_DWORD *)(v26 + 2104) = v8;
  __darwin_time_t v28 = (char *)(v26 + 2116);
  if (v14) {
    int v29 = mig_strncpy_zerofill(v28, v6, 1024);
  }
  else {
    int v29 = mig_strncpy(v28, v6, 1024);
  }
  *(_DWORD *)(v27 + 3136) = v29;
  *(_DWORD *)(v27 + 3132) = 0;
  uint64_t v30 = (v29 + 3) & 0xFFFFFFFC;
  *(_DWORD *)(v27 + v30 + 3140) = v4;
  LODWORD(v32) = 19;
  *((void *)&v32 + 1) = v13;
  *(void *)&long long v33 = 0x38E38E3B00000000;
  if (MEMORY[0x1E4F14B18]) {
    voucher_mach_msg_set((mach_msg_header_t *)&v32);
  }
  return mach_msg((mach_msg_header_t *)&v32, 1, v16 + v20 + v25 + v30 + 72, 0, 0, 0, 0);
}

uint64_t MDTR_server(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)a2 = *(_DWORD *)a1 & 0x1F;
  *(_DWORD *)(a2 + 4) = 36;
  int v3 = *(_DWORD *)(a1 + 20) + 100;
  *(_DWORD *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 20) = v3;
  if (*(_DWORD *)(a1 + 20) != 954437178)
  {
    uint64_t result = 0;
    *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
    *(_DWORD *)(a2 + 32) = -303;
    return result;
  }
  if ((*(_DWORD *)a1 & 0x80000000) == 0 || *(_DWORD *)(a1 + 24) != 1 || *(_DWORD *)(a1 + 4) != 60)
  {
    int v7 = -304;
LABEL_10:
    *(_DWORD *)(a2 + 32) = v7;
    *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
    return 1;
  }
  if (*(unsigned char *)(a1 + 39) != 1 || (unsigned int v5 = *(_DWORD *)(a1 + 40), v5 != *(_DWORD *)(a1 + 56)))
  {
    int v7 = -300;
    goto LABEL_10;
  }
  *(_DWORD *)(a2 + 32) = _status(*(_DWORD *)(a1 + 12), *(unsigned int *)(a1 + 52), *(const UInt8 **)(a1 + 28), v5);
  mig_deallocate(*(void *)(a1 + 28), *(unsigned int *)(a1 + 40));
  *(void *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  return 1;
}

uint64_t fsevent_default_log()
{
  if (fsevent_default_log_once != -1) {
    dispatch_once(&fsevent_default_log_once, &__block_literal_global);
  }
  return fsevent_default_log_logger;
}

os_log_t __fsevent_default_log_block_invoke()
{
  os_log_t result = os_log_create("com.apple.fsevents", "client");
  fsevent_default_log_logger = (uint64_t)result;
  return result;
}

atomic_uint *_FSEventStreamRetainAndReturnSelf(atomic_uint *a1)
{
  if (a1)
  {
    atomic_fetch_add(a1, 1u);
  }
  else
  {
    int v2 = fsevent_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      _FSEventStreamRetainAndReturnSelf_cold_1();
    }
  }
  return a1;
}

CFStringRef FSEventStreamCopyDescription(ConstFSEventStreamRef streamRef)
{
  if (!streamRef)
  {
    uint64_t v17 = fsevent_default_log();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      FSEventStreamCopyDescription_cold_1();
    }
    return 0;
  }
  int v2 = (char *)malloc_type_malloc((*((_DWORD *)streamRef + 18) << 10) + 1024, 0x9B632473uLL);
  if (!v2)
  {
    id v18 = fsevent_default_log();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      FSEventStreamCopyDescription_cold_2(v18, v19, v20, v21, v22, v23, v24, v25);
    }
    return 0;
  }
  int v3 = v2;
  int v4 = &v2[sprintf(v2, "FSEventStreamRef @ %p:\n", streamRef)];
  unsigned int v5 = &v4[sprintf(v4, "   allocator = %p\n", *((const void **)streamRef + 1))];
  CFIndex v6 = &v5[sprintf(v5, "   callback = %p\n", *((const void **)streamRef + 2))];
  int v7 = &v6[sprintf(v6, "   context = {%lu, %p, %p, %p, %p}\n", *((void *)streamRef + 3), *((const void **)streamRef + 4), *((const void **)streamRef + 5), *((const void **)streamRef + 6), *((const void **)streamRef + 7))];
  int v8 = &v7[sprintf(v7, "   numPathsToWatch = %lu\n", *((void *)streamRef + 9))];
  uint64_t v9 = &v8[sprintf(v8, "   pathsToWatch = %p\n", *((const void **)streamRef + 10))];
  if (*((uint64_t *)streamRef + 9) >= 1)
  {
    uint64_t v10 = 0;
    do
    {
      v9 += sprintf(v9, "        pathsToWatch[%d] = '%s'\n", v10, *(const char **)(*((void *)streamRef + 10) + 8 * v10));
      ++v10;
    }
    while (*((void *)streamRef + 9) > v10);
  }
  CFDictionaryRef v11 = &v9[sprintf(v9, "   latestEventId = %lld\n", *((void *)streamRef + 21))];
  uint64_t v12 = &v11[sprintf(v11, "   latency = %llu (microseconds)\n", *((void *)streamRef + 22))];
  unsigned int v13 = &v12[sprintf(v12, "   flags = 0x%08x\n", *((_DWORD *)streamRef + 46))];
  int v14 = sprintf(v13, "\trunLoop = %p\n", *((const void **)streamRef + 28));
  sprintf(&v13[v14], "\trunLoopMode = %p\n", *((const void **)streamRef + 29));
  CFStringRef v15 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v3, 0x8000100u);
  free(v3);
  return v15;
}

void FSEventsClientPortCallback()
{
  int v0 = fsevent_default_log();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR)) {
    FSEventsClientPortCallback_cold_1(v0, v1, v2, v3, v4, v5, v6, v7);
  }
}

uint64_t server_gone_callback(uint64_t a1, uint64_t a2)
{
  return server_gone_StreamRef_callback(a2);
}

FSEventStreamEventId FSEventStreamGetLatestEventId(ConstFSEventStreamRef streamRef)
{
  if (streamRef) {
    return *((void *)streamRef + 21);
  }
  uint64_t v2 = fsevent_default_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
    FSEventStreamGetLatestEventId_cold_1();
  }
  return 0;
}

dev_t FSEventStreamGetDeviceBeingWatched(ConstFSEventStreamRef streamRef)
{
  if (streamRef) {
    return *((_DWORD *)streamRef + 16);
  }
  uint64_t v2 = fsevent_default_log();
  dev_t result = os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
  if (result)
  {
    FSEventStreamGetDeviceBeingWatched_cold_1();
    return 0;
  }
  return result;
}

CFArrayRef FSEventStreamCopyPathsBeingWatched(ConstFSEventStreamRef streamRef)
{
  if (!streamRef)
  {
    CFDictionaryRef v11 = fsevent_default_log();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      FSEventStreamCopyPathsBeingWatched_cold_1();
    }
    return 0;
  }
  uint64_t v2 = (const void **)malloc_type_calloc(*((void *)streamRef + 9), 8uLL, 0x6004044C4A2DFuLL);
  if (!v2)
  {
    uint64_t v12 = fsevent_default_log();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      FSEventStreamCopyPathsBeingWatched_cold_2(v12, v13, v14, v15, v16, v17, v18, v19);
    }
    return 0;
  }
  uint64_t v3 = v2;
  CFIndex v4 = *((void *)streamRef + 9);
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (v4 >= 1)
  {
    uint64_t v6 = 0;
    while (1)
    {
      CFStringRef v7 = CFStringCreateWithFileSystemRepresentation(v5, *(const char **)(*((void *)streamRef + 10) + 8 * v6));
      if (!v7) {
        break;
      }
      v3[v6++] = v7;
      CFIndex v4 = *((void *)streamRef + 9);
      if (v4 <= v6) {
        goto LABEL_7;
      }
    }
    uint64_t v20 = fsevent_default_log();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
      FSEventStreamCopyPathsBeingWatched_cold_3((void *)streamRef + 10, v6, v20);
    }
    goto LABEL_20;
  }
LABEL_7:
  CFArrayRef v8 = CFArrayCreate(v5, v3, v4, MEMORY[0x1E4F1D510]);
  if (!v8)
  {
    uint64_t v21 = fsevent_default_log();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
      FSEventStreamCopyPathsBeingWatched_cold_4(v21, v22, v23, v24, v25, v26, v27, v28);
    }
LABEL_20:
    if (*((uint64_t *)streamRef + 9) >= 1)
    {
      uint64_t v29 = 0;
      do
      {
        uint64_t v30 = v3[v29];
        if (!v30) {
          break;
        }
        CFRelease(v30);
        ++v29;
      }
      while (*((void *)streamRef + 9) > v29);
    }
    free(v3);
    return 0;
  }
  CFArrayRef v9 = v8;
  if (*((uint64_t *)streamRef + 9) >= 1)
  {
    uint64_t v10 = 0;
    do
      CFRelease(v3[v10++]);
    while (*((void *)streamRef + 9) > v10);
  }
  free(v3);
  return v9;
}

void FSEventStreamScheduleWithRunLoop(FSEventStreamRef streamRef, CFRunLoopRef runLoop, CFStringRef runLoopMode)
{
  if (streamRef)
  {
    if (runLoop)
    {
      uint64_t v6 = (mach_port_name_t *)((char *)streamRef + 192);
      if (*((_DWORD *)streamRef + 48))
      {
LABEL_4:
        if (_createAndAddRunLoopSource((int)"FSEventStreamScheduleWithRunLoop", (uint64_t)streamRef, runLoop, runLoopMode))
        {
          CFStringRef v7 = fsevent_default_log();
          if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
            FSEventStreamScheduleWithRunLoop_cold_5();
          }
          mach_port_deallocate(*MEMORY[0x1E4F14960], *v6);
          mach_port_name_t *v6 = 0;
        }
        else
        {
          *((void *)streamRef + 28) = CFRetain(runLoop);
          *((void *)streamRef + 29) = CFStringCreateCopy(0, runLoopMode);
          if ((*((unsigned char *)streamRef + 184) & 4) != 0)
          {
            context.version = 0;
            context.info = streamRef;
            context.retain = (void *(__cdecl *)(void *))_FSEventStreamRetainAndReturnSelf;
            context.release = (void (__cdecl *)(void *))FSEventStreamRelease;
            context.copyDescription = (CFStringRef (__cdecl *)(void *))FSEventStreamCopyDescription;
            CFDictionaryRef v11 = CFFileDescriptorCreate(0, *((_DWORD *)streamRef + 102), 1u, (CFFileDescriptorCallBack)cffd_callback, &context);
            *((void *)streamRef + 52) = v11;
            if (v11)
            {
              RunLoopSource = CFFileDescriptorCreateRunLoopSource(0, v11, 0);
              *((void *)streamRef + 53) = RunLoopSource;
              if (RunLoopSource)
              {
                CFRunLoopAddSource(runLoop, RunLoopSource, (CFRunLoopMode)*MEMORY[0x1E4F1D418]);
              }
              else
              {
                uint64_t v23 = fsevent_default_log();
                if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
                  FSEventStreamScheduleWithRunLoop_cold_4(v23, v24, v25, v26, v27, v28, v29, v30);
                }
                CFFileDescriptorInvalidate(*((CFFileDescriptorRef *)streamRef + 52));
                CFRelease(*((CFTypeRef *)streamRef + 52));
                *((void *)streamRef + 52) = 0;
              }
            }
            else
            {
              uint64_t v15 = fsevent_default_log();
              if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
                FSEventStreamScheduleWithRunLoop_cold_3(v15, v16, v17, v18, v19, v20, v21, v22);
              }
            }
          }
        }
        return;
      }
      if (!allocate_d2f_port((uint64_t)"FSEventStreamScheduleWithRunLoop", (uint64_t)streamRef))
      {
        pthread_mutex_lock(&FSEvents_streamDict_mutex);
        CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        if (!FSEvents_streamDict) {
          FSEvents_streamDict = (uint64_t)CFDictionaryCreateMutable(v13, 0, MEMORY[0x1E4F1D530], 0);
        }
        CFNumberRef v14 = CFNumberCreate(v13, kCFNumberIntType, v6);
        CFDictionaryAddValue((CFMutableDictionaryRef)FSEvents_streamDict, v14, streamRef);
        pthread_mutex_unlock(&FSEvents_streamDict_mutex);
        CFRelease(v14);
        goto LABEL_4;
      }
      uint64_t v10 = fsevent_default_log();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        FSEventStreamScheduleWithRunLoop_cold_6();
      }
    }
    else
    {
      CFArrayRef v9 = fsevent_default_log();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        FSEventStreamScheduleWithRunLoop_cold_2();
      }
    }
  }
  else
  {
    CFArrayRef v8 = fsevent_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      FSEventStreamScheduleWithRunLoop_cold_1();
    }
  }
}

uint64_t _createAndAddRunLoopSource(int a1, uint64_t a2, CFRunLoopRef rl, CFRunLoopMode mode)
{
  mach_port_t v5 = *(_DWORD *)(a2 + 192);
  if (!v5)
  {
    uint64_t v10 = fsevent_default_log();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      _createAndAddRunLoopSource_cold_1();
    }
    return 5;
  }
  if (*(void *)(a2 + 200))
  {
    CFArrayRef v8 = *(__CFRunLoopSource **)(a2 + 216);
    if (!v8)
    {
      CFArrayRef v9 = fsevent_default_log();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        _createAndAddRunLoopSource_cold_4();
      }
      return 5;
    }
LABEL_11:
    CFRunLoopAddSource(rl, v8, mode);
    return 0;
  }
  memset(&v16, 0, sizeof(v16));
  CFDictionaryRef v11 = CFMachPortCreateWithPort(0, v5, (CFMachPortCallBack)FSEventsClientProcessMessageCallback, &v16, 0);
  *(void *)(a2 + std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>>>::~__hash_table((uint64_t)this + 200) = v11;
  if (v11)
  {
    CFRunLoopSourceRef RunLoopSource = CFMachPortCreateRunLoopSource((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v11, 0);
    *(void *)(a2 + 216) = RunLoopSource;
    if (RunLoopSource)
    {
      CFArrayRef v8 = RunLoopSource;
      goto LABEL_11;
    }
    uint64_t v15 = fsevent_default_log();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      _createAndAddRunLoopSource_cold_3();
    }
    CFMachPortInvalidate(*(CFMachPortRef *)(a2 + 200));
    CFRelease(*(CFTypeRef *)(a2 + 200));
    *(void *)(a2 + std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>>>::~__hash_table((uint64_t)this + 200) = 0;
  }
  else
  {
    CFNumberRef v14 = fsevent_default_log();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      _createAndAddRunLoopSource_cold_2();
    }
  }
  mach_port_deallocate(*MEMORY[0x1E4F14960], *(_DWORD *)(a2 + 196));
  *(_DWORD *)(a2 + 196) = 0;
  return 5;
}

void cffd_callback(__CFFileDescriptor *a1, int a2, FSEventStreamRef streamRef)
{
  FSEventStreamRetain(streamRef);
  CFFileDescriptorNativeDescriptor NativeDescriptor = CFFileDescriptorGetNativeDescriptor(a1);
  process_dir_events(NativeDescriptor, streamRef);
  if (*(int *)streamRef >= 2 && *((unsigned char *)streamRef + 188)) {
    CFFileDescriptorEnableCallBacks(a1, 1uLL);
  }

  FSEventStreamRelease(streamRef);
}

void FSEventStreamUnscheduleFromRunLoop(FSEventStreamRef streamRef, CFRunLoopRef runLoop, CFStringRef runLoopMode)
{
  if (streamRef)
  {
    if (runLoop)
    {
      mach_port_t v5 = (__CFRunLoopSource *)*((void *)streamRef + 27);
      if (v5)
      {
        CFRunLoopRemoveSource(runLoop, v5, runLoopMode);
        CFStringRef v7 = (__CFRunLoopSource *)*((void *)streamRef + 53);
        if (v7) {
          CFRunLoopRemoveSource(runLoop, v7, runLoopMode);
        }
        _FSEventStreamUnscheduleFromRunLoops((uint64_t)streamRef);
      }
      else
      {
        uint64_t v10 = fsevent_default_log();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
          FSEventStreamUnscheduleFromRunLoop_cold_3();
        }
      }
    }
    else
    {
      CFArrayRef v9 = fsevent_default_log();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        FSEventStreamUnscheduleFromRunLoop_cold_2();
      }
    }
  }
  else
  {
    CFArrayRef v8 = fsevent_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      FSEventStreamUnscheduleFromRunLoop_cold_1();
    }
  }
}

void __FSEventStreamSetDispatchQueue_block_invoke_2(uint64_t a1)
{
  close(*(_DWORD *)(a1 + 48));
  dispatch_release(*(dispatch_object_t *)(a1 + 32));
  uint64_t v2 = *(__FSEventStream **)(a1 + 40);

  FSEventStreamRelease(v2);
}

FSEventStreamEventId FSEventStreamFlushAsync(FSEventStreamRef streamRef)
{
  FSEventStreamEventId v5 = 0;
  if (streamRef)
  {
    if (*((unsigned char *)streamRef + 188))
    {
      if (*((void *)streamRef + 25))
      {
        if (f2d_flush_rpc(*((_DWORD *)streamRef + 49), &v5))
        {
          uint64_t v1 = fsevent_default_log();
          if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
            FSEventStreamFlushAsync_cold_3();
          }
        }
      }
    }
    else
    {
      uint64_t v3 = fsevent_default_log();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
        FSEventStreamFlushAsync_cold_2();
      }
    }
  }
  else
  {
    uint64_t v2 = fsevent_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      FSEventStreamFlushAsync_cold_1();
    }
  }
  return v5;
}

void FSEventStreamFlushSync(FSEventStreamRef streamRef)
{
  uint64_t v14 = 0;
  if (streamRef)
  {
    if (*((unsigned char *)streamRef + 188))
    {
      if (*((void *)streamRef + 25) || *((void *)streamRef + 45))
      {
        uint64_t v2 = (__CFRunLoop *)*((void *)streamRef + 28);
        if (v2 || *((void *)streamRef + 45))
        {
          uint64_t v3 = (__CFRunLoopSource *)*((void *)streamRef + 27);
          if (v3 || *((void *)streamRef + 45))
          {
            if (v2)
            {
              CFRunLoopAddSource(v2, v3, @"com.apple.FSEvents");
              uint64_t v13 = 0;
              while (*((unsigned char *)streamRef + 190)
                   && !_runRunLoopOnceForFlushSync((uint64_t)"FSEventStreamFlushSync:1", (uint64_t)streamRef, (int *)&v13 + 1, &v13));
            }
            else
            {
              pthread_mutex_lock((pthread_mutex_t *)((char *)streamRef + 240));
              while (*((unsigned char *)streamRef + 190))
              {
                if (pthread_cond_wait((pthread_cond_t *)((char *)streamRef + 304), (pthread_mutex_t *)((char *)streamRef + 240)))
                {
                  uint64_t v6 = fsevent_default_log();
                  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
                    FSEventStreamFlushSync_cold_8();
                  }
                  break;
                }
              }
              pthread_mutex_unlock((pthread_mutex_t *)((char *)streamRef + 240));
            }
            if (f2d_flush_rpc(*((_DWORD *)streamRef + 49), &v14))
            {
              CFStringRef v7 = fsevent_default_log();
              if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
                FSEventStreamFlushSync_cold_7();
              }
            }
            if (!v14) {
              goto LABEL_46;
            }
            if (v14 > 0)
            {
              *((void *)streamRef + 56) = v14;
              uint64_t v13 = 0;
              if (*((void *)streamRef + 28))
              {
                while (*((void *)streamRef + 21) < *((void *)streamRef + 56)
                     && !_runRunLoopOnceForFlushSync((uint64_t)"FSEventStreamFlushSync:2", (uint64_t)streamRef, (int *)&v13 + 1, &v13));
              }
              else
              {
                pthread_mutex_lock((pthread_mutex_t *)((char *)streamRef + 240));
                while (*((void *)streamRef + 21) < *((void *)streamRef + 56))
                {
                  if (pthread_cond_wait((pthread_cond_t *)((char *)streamRef + 304), (pthread_mutex_t *)((char *)streamRef + 240)))
                  {
                    CFDictionaryRef v11 = fsevent_default_log();
                    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
                      FSEventStreamFlushSync_cold_5();
                    }
                    break;
                  }
                }
                pthread_mutex_unlock((pthread_mutex_t *)((char *)streamRef + 240));
              }
              *((void *)streamRef + 56) = 0;
LABEL_46:
              uint64_t v12 = (__CFRunLoop *)*((void *)streamRef + 28);
              if (v12) {
                CFRunLoopRemoveSource(v12, *((CFRunLoopSourceRef *)streamRef + 27), @"com.apple.FSEvents");
              }
              return;
            }
            CFArrayRef v8 = fsevent_default_log();
            if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
              FSEventStreamFlushSync_cold_6();
            }
          }
          else
          {
            uint64_t v10 = fsevent_default_log();
            if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
              FSEventStreamFlushSync_cold_4();
            }
          }
        }
        else
        {
          CFArrayRef v9 = fsevent_default_log();
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
            FSEventStreamFlushSync_cold_3();
          }
        }
      }
    }
    else
    {
      FSEventStreamEventId v5 = fsevent_default_log();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        FSEventStreamFlushAsync_cold_2();
      }
    }
  }
  else
  {
    CFIndex v4 = fsevent_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      FSEventStreamFlushSync_cold_1();
    }
  }
}

uint64_t _runRunLoopOnceForFlushSync(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  __int32 v8 = CFRunLoopRunInMode(@"com.apple.FSEvents", 5.0, 1u) - 1;
  uint64_t result = 0;
  switch(v8)
  {
    case 0:
      uint64_t v10 = fsevent_default_log();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        _runRunLoopOnceForFlushSync_cold_1();
      }
      return 1;
    case 1:
      uint64_t v12 = fsevent_default_log();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        _runRunLoopOnceForFlushSync_cold_2();
      }
      return 1;
    case 2:
      int v13 = *a3;
      if ((*a3 & ~(-1 << *a4)) == 0)
      {
        uint64_t v14 = fsevent_default_log();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          double v15 = (double)(*a3 + 1) * 5.0;
          int v16 = 136316162;
          uint64_t v17 = a1;
          __int16 v18 = 2048;
          uint64_t v19 = a2;
          __int16 v20 = 2080;
          uint64_t v21 = "The run loop timed out.";
          __int16 v22 = 1024;
          int v23 = 3;
          __int16 v24 = 2048;
          double v25 = v15;
          _os_log_error_impl(&dword_182959000, v14, OS_LOG_TYPE_ERROR, "%s(streamRef = %p): WARNING: CFRunLoopRunInMode() => %s (%d) (%.2f seconds)", (uint8_t *)&v16, 0x30u);
        }
        ++*a4;
        int v13 = *a3;
      }
      uint64_t result = 0;
      *a3 = v13 + 1;
      return result;
    case 3:
      return result;
    default:
      CFDictionaryRef v11 = fsevent_default_log();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        int v16 = 136315906;
        uint64_t v17 = a1;
        __int16 v18 = 2048;
        uint64_t v19 = a2;
        __int16 v20 = 2080;
        uint64_t v21 = "UNKNOWN";
        __int16 v22 = 1024;
        int v23 = 0;
        _os_log_error_impl(&dword_182959000, v11, OS_LOG_TYPE_ERROR, "%s(streamRef = %p): ERROR: CFRunLoopRunInMode() => %s (%d)", (uint8_t *)&v16, 0x26u);
      }
      return 1;
  }
}

FSEventStreamEventId FSEventsGetLastEventIdForDeviceBeforeTime(dev_t dev, CFAbsoluteTime time)
{
  FSEventStreamEventId v6 = 0;
  int v4 = FSEvents_connect();
  FSEventStreamEventId result = 0;
  if (!v4)
  {
    f2d_get_last_event_for_device_before_time_rpc(FSEvents_f2d_public_port, dev, (unint64_t)time, &v6);
    return v6;
  }
  return result;
}

Boolean FSEventsPurgeEventsForDeviceUpToEventId(dev_t dev, FSEventStreamEventId eventId)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  int v16 = 0;
  int v4 = FSEvents_connect();
  LOBYTE(v5) = 0;
  if (!v4)
  {
    v17[0] = 0;
    int v6 = getfsstat(0, 0, 2);
    if ((v6 & 0x80000000) == 0)
    {
      unsigned int v7 = v6;
      int v8 = 2168 * v6;
      CFArrayRef v9 = (statfs *)malloc_type_malloc(2168 * v6, 0x1156268uLL);
      if (v9)
      {
        uint64_t v10 = v9;
        unsigned int v11 = getfsstat(v9, v8, 2);
        if ((v11 & 0x80000000) == 0)
        {
          uint64_t v12 = v11 >= v7 ? v7 : v11;
          if (v12)
          {
            f_mntonname = v10->f_mntonname;
            while (*((_DWORD *)f_mntonname - 10) != dev)
            {
              f_mntonname += 2168;
              if (!--v12) {
                goto LABEL_14;
              }
            }
            __strlcpy_chk();
          }
        }
LABEL_14:
        free(v10);
      }
    }
    syslog(2, "dev %d (%s) : purging events up to event id %lld", dev, v17, eventId);
    if (f2d_purge_events_for_device_up_to_event_id_rpc(FSEvents_f2d_public_port, dev, eventId, &v16))
    {
      uint64_t v14 = fsevent_default_log();
      BOOL v5 = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
      if (v5)
      {
        FSEventsPurgeEventsForDeviceUpToEventId_cold_1();
        LOBYTE(v5) = 0;
      }
    }
    else
    {
      LOBYTE(v5) = v16 == 0;
    }
  }
  return v5;
}

void FSEventStreamShow(ConstFSEventStreamRef streamRef)
{
  uint64_t v2 = (FILE **)MEMORY[0x1E4F143C8];
  fprintf((FILE *)*MEMORY[0x1E4F143C8], "FSEventStreamRef @ %p:\n", streamRef);
  if (streamRef)
  {
    fprintf(*v2, "   allocator = %p\n", *((const void **)streamRef + 1));
    fprintf(*v2, "   callbacuint64_t k = %p\n", *((const void **)streamRef + 2));
    fprintf(*v2, "   f2d_private_port = 0x%x\n", *((_DWORD *)streamRef + 49));
    fprintf(*v2, "   CFFileDescriptorContext context = {%lu, %p, %p, %p, %p}\n", *((void *)streamRef + 3), *((const void **)streamRef + 4), *((const void **)streamRef + 5), *((const void **)streamRef + 6), *((const void **)streamRef + 7));
    fprintf(*v2, "   numPathsToWatch = %lu\n", *((void *)streamRef + 9));
    fprintf(*v2, "   pathsToWatch = %p\n", *((const void **)streamRef + 10));
    if (*((uint64_t *)streamRef + 9) >= 1)
    {
      uint64_t v3 = 0;
      do
      {
        fprintf(*v2, "        pathsToWatch[%d] = '%s'\n", v3, *(const char **)(*((void *)streamRef + 10) + 8 * v3));
        ++v3;
      }
      while (*((void *)streamRef + 9) > v3);
    }
    fprintf(*v2, "   numPathsToExclude = %lu\n", *((void *)streamRef + 12));
    if (*((uint64_t *)streamRef + 12) >= 1)
    {
      uint64_t v4 = 0;
      do
      {
        fprintf(*v2, "        pathsToExclude[%d] = '%s'\n", v4, *((const char **)streamRef + v4 + 13));
        ++v4;
      }
      while (*((void *)streamRef + 12) > v4);
    }
    fprintf(*v2, "   latestEventId = %lld\n", *((void *)streamRef + 21));
    fprintf(*v2, "   latency = %llu (microseconds)\n", *((void *)streamRef + 22));
    fprintf(*v2, "   flags = 0x%08x\n", *((_DWORD *)streamRef + 46));
    fprintf(*v2, "   runLoop = %p\n", *((const void **)streamRef + 28));
    fprintf(*v2, "   runLoopMode = %p\n", *((const void **)streamRef + 29));
  }
}

void server_gone_StreamRef_callback(uint64_t a1)
{
  if (a1 && !*(unsigned char *)(a1 + 189) && (*(void *)(a1 + 360) || *(void *)(a1 + 224)))
  {
    CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t v3 = (mach_port_name_t *)(a1 + 192);
    CFNumberRef v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, (const void *)(a1 + 192));
    pthread_mutex_lock(&FSEvents_streamDict_mutex);
    CFDictionaryRemoveValue((CFMutableDictionaryRef)FSEvents_streamDict, v4);
    pthread_mutex_unlock(&FSEvents_streamDict_mutex);
    CFRelease(v4);
    pthread_mutex_lock(&FSEvents_f2d_public_port_mutex);
    BOOL v5 = (ipc_space_t *)MEMORY[0x1E4F14960];
    mach_port_deallocate(*MEMORY[0x1E4F14960], FSEvents_f2d_public_port);
    FSEvents_f2d_public_port = 0;
    pthread_mutex_unlock(&FSEvents_f2d_public_port_mutex);
    uint64_t v6 = *(void *)(a1 + 360);
    if (v6)
    {
      cancel_source((NSObject **)(a1 + 360), (int *)(a1 + 368));
      *(_DWORD *)(a1 + 192) = 0;
    }
    uint64_t v7 = *(void *)(a1 + 376);
    if (v7)
    {
      cancel_source((NSObject **)(a1 + 376), (int *)(a1 + 384));
      *(_DWORD *)(a1 + 196) = 0;
    }
    int v8 = *(__CFRunLoopSource **)(a1 + 216);
    if (v8)
    {
      CFRunLoopRemoveSource(*(CFRunLoopRef *)(a1 + 224), v8, *(CFRunLoopMode *)(a1 + 232));
      CFRelease(*(CFTypeRef *)(a1 + 216));
      *(void *)(a1 + 216) = 0;
    }
    CFArrayRef v9 = *(__CFMachPort **)(a1 + 208);
    if (v9)
    {
      CFMachPortSetInvalidationCallBack(v9, 0);
      CFMachPortInvalidate(*(CFMachPortRef *)(a1 + 208));
      CFRelease(*(CFTypeRef *)(a1 + 208));
      *(void *)(a1 + 208) = 0;
    }
    if (!v7)
    {
      mach_port_deallocate(*v5, *(_DWORD *)(a1 + 196));
      *(_DWORD *)(a1 + 196) = 0;
    }
    uint64_t v10 = *(__CFMachPort **)(a1 + 200);
    if (v10)
    {
      CFMachPortInvalidate(v10);
      CFRelease(*(CFTypeRef *)(a1 + 200));
      *(void *)(a1 + std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>>>::~__hash_table((uint64_t)this + 200) = 0;
    }
    if (!v6)
    {
      dispose_d2f_port(*v3);
      *uint64_t v3 = 0;
    }
    if (FSEvents_connect())
    {
      unsigned int v11 = fsevent_default_log();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        server_gone_StreamRef_callback_cold_4();
      }
    }
    else if (allocate_d2f_port((uint64_t)"server_gone_StreamRef_callback", a1))
    {
      uint64_t v12 = fsevent_default_log();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        server_gone_StreamRef_callback_cold_3();
      }
    }
    else
    {
      int v13 = (int *)(a1 + 196);
      int v14 = register_with_server(a1, (uint64_t)"server_gone_StreamRef_callback", *(_DWORD *)(a1 + 192), *(_DWORD *)(a1 + 64), *(_DWORD *)(a1 + 72), *(const void ***)(a1 + 80), -1, *(void *)(a1 + 176), *(_DWORD *)(a1 + 184), (_DWORD *)(a1 + 196));
      if (v14)
      {
        int v15 = v14;
        int v16 = fsevent_default_log();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
          server_gone_StreamRef_callback_cold_2(v13, v15, v16);
        }
      }
      else
      {
        CFNumberRef v17 = CFNumberCreate(v2, kCFNumberIntType, (const void *)(a1 + 192));
        pthread_mutex_lock(&FSEvents_streamDict_mutex);
        CFDictionaryAddValue((CFMutableDictionaryRef)FSEvents_streamDict, v17, (const void *)a1);
        pthread_mutex_unlock(&FSEvents_streamDict_mutex);
        CFRelease(v17);
        if (v6)
        {
          if (create_d2f_port_source(a1)) {
            resume_source(*(NSObject **)(a1 + 360), (int *)(a1 + 368));
          }
          if (create_f2d_private_port_source(a1)) {
            resume_source(*(NSObject **)(a1 + 376), (int *)(a1 + 384));
          }
        }
        else if (*(void *)(a1 + 224))
        {
          context.version = 0;
          context.info = (void *)a1;
          context.retain = (const void *(__cdecl *)(const void *))_FSEventStreamRetainAndReturnSelf;
          context.release = (void (__cdecl *)(const void *))FSEventStreamRelease;
          context.copyDescription = (CFStringRef (__cdecl *)(const void *))FSEventStreamCopyDescription;
          uint64_t v18 = CFMachPortCreateWithPort(0, *(_DWORD *)(a1 + 196), (CFMachPortCallBack)FSEventsClientPortCallback, &context, 0);
          *(void *)(a1 + 208) = v18;
          if (v18)
          {
            CFMachPortSetInvalidationCallBack(v18, (CFMachPortInvalidationCallBack)server_gone_callback);
            _createAndAddRunLoopSource((int)"server_gone_StreamRef_callback", a1, *(CFRunLoopRef *)(a1 + 224), *(CFRunLoopMode *)(a1 + 232));
          }
          else
          {
            uint64_t v19 = fsevent_default_log();
            if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
              server_gone_StreamRef_callback_cold_1(v19, v20, v21, v22, v23, v24, v25, v26);
            }
          }
        }
        FSEventStreamRetain((FSEventStreamRef)a1);
        if (*(uint64_t *)(a1 + 72) >= 1)
        {
          uint64_t v27 = 0;
          do
            root_dir_event_callback(a1, v27++, 5);
          while (*(void *)(a1 + 72) > v27);
        }
        FSEventStreamRelease((FSEventStreamRef)a1);
      }
    }
  }
}

void root_dir_event_callback(uint64_t a1, int a2, int a3)
{
  v41[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void (**)(uint64_t, void, uint64_t, const char **, int *, void *))(a1 + 16);
  if (!v3) {
    return;
  }
  uint64_t v6 = caller_path(*(const char **)(*(void *)(a1 + 80) + 8 * a2), *(_DWORD *)(*(void *)(a1 + 88) + 4 * a2));
  int v38 = v6;
  int v37 = a3;
  v41[0] = 0;
  int v7 = *(_DWORD *)(a1 + 184);
  if ((v7 & 0x40) != 0)
  {
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFArrayRef v9 = (__CFString *)CFStringCreateWithFileSystemRepresentation((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v6);
    if (v9)
    {
      uint64_t v10 = v9;
      values = v9;
      keys = @"path";
      CFTypeRef cf = CFDictionaryCreate(v8, (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (cf)
      {
        CFArrayRef v11 = CFArrayCreate(v8, &cf, 1, MEMORY[0x1E4F1D510]);
        if (v11)
        {
          CFArrayRef v12 = v11;
          (*(void (**)(uint64_t, void, uint64_t, CFArrayRef, int *, void *))(a1 + 16))(a1, *(void *)(a1 + 32), 1, v11, &v37, v41);
          CFRelease(v12);
        }
        else
        {
          uint64_t v20 = fsevent_default_log();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
            root_dir_event_callback_cold_2(v20, v21, v22, v23, v24, v25, v26, v27);
          }
        }
        CFRelease(cf);
      }
      else
      {
        uint64_t v18 = fsevent_default_log();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
          root_dir_event_callback_cold_4();
        }
      }
      CFTypeRef v16 = v10;
      goto LABEL_22;
    }
    CFNumberRef v17 = fsevent_default_log();
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      return;
    }
LABEL_13:
    root_dir_event_callback_cold_1();
    return;
  }
  if ((v7 & 1) == 0)
  {
    v3(a1, *(void *)(a1 + 32), 1, &v38, &v37, v41);
    return;
  }
  CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFTypeRef cf = CFStringCreateWithFileSystemRepresentation((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v6);
  if (!cf)
  {
    uint64_t v19 = fsevent_default_log();
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      return;
    }
    goto LABEL_13;
  }
  CFArrayRef v14 = CFArrayCreate(v13, &cf, 1, MEMORY[0x1E4F1D510]);
  if (v14)
  {
    CFArrayRef v15 = v14;
    (*(void (**)(uint64_t, void, uint64_t, CFArrayRef, int *, void *))(a1 + 16))(a1, *(void *)(a1 + 32), 1, v14, &v37, v41);
    CFRelease(v15);
    CFTypeRef v16 = cf;
LABEL_22:
    CFRelease(v16);
    return;
  }
  uint64_t v28 = fsevent_default_log();
  if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
    root_dir_event_callback_cold_2(v28, v29, v30, v31, v32, v33, v34, v35);
  }
}

void __create_f2d_private_port_source_block_invoke(uint64_t a1)
{
}

uint64_t watch_all_parents(uint64_t a1, int kq, char *__s, uint64_t a4, uint64_t a5)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  memset(&changelist, 0, sizeof(changelist));
  uint64_t v10 = *(void **)(a4 + 16);
  if (v10)
  {
    int v11 = *(_DWORD *)(a4 + 8);
    if (v11 >= 1)
    {
      for (uint64_t i = 0; i < v11; ++i)
      {
        if ((*(_DWORD *)(*(void *)(a4 + 16) + 4 * i) & 0x80000000) == 0)
        {
          changelist.ident = *(unsigned int *)(*(void *)(a4 + 16) + 4 * i);
          *(void *)&changelist.filter = 0x200002FFFCLL;
          changelist.data = 0;
          changelist.int64_t udata = (void *)(a5 | 0x80000000);
          kevent(kq, &changelist, 1, 0, 0, 0);
          close(*(_DWORD *)(*(void *)(a4 + 16) + 4 * i));
          int v11 = *(_DWORD *)(a4 + 8);
        }
      }
      uint64_t v10 = *(void **)(a4 + 16);
    }
    free(v10);
    *(void *)(a4 + 16) = 0;
    *(_DWORD *)(a4 + 8) = 0;
  }
  if (__s && *__s)
  {
    my_dirname(__s, __sa);
    CFAllocatorRef v13 = v39;
    realpath_DARWIN_EXTSN(__sa, v39);
    int v14 = 0;
    do
    {
      while (1)
      {
        int v16 = *v13++;
        int v15 = v16;
        if (v16 != 47) {
          break;
        }
        ++v14;
      }
    }
    while (v15);
    uint64_t v19 = malloc_type_malloc(4 * v14, 0x100004052888210uLL);
    *(void *)(a4 + 16) = v19;
    if (v19)
    {
      uint64_t v20 = 0;
      uint64_t v21 = v14;
      *(_DWORD *)(a4 + 8) = v14;
      do
      {
        int v22 = open(v39, 0x8000);
        *(_DWORD *)(*(void *)(a4 + 16) + 4 * v20) = v22;
        if ((v22 & 0x80000000) == 0)
        {
          fcntl(v22, 2, 1);
          changelist.ident = *(int *)(*(void *)(a4 + 16) + 4 * v20);
          *(void *)&changelist.filter = 0x200021FFFCLL;
          changelist.data = 0;
          changelist.int64_t udata = (void *)(a5 | 0x80000000);
          if (kevent(kq, &changelist, 1, 0, 0, 0) < 0)
          {
            uint64_t v23 = fsevent_default_log();
            if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
            {
              int v24 = *(_DWORD *)(*(void *)(a4 + 16) + 4 * v20);
              uint64_t v25 = __error();
              uint64_t v26 = strerror(*v25);
              *(_DWORD *)stat buf = 136316162;
              uint64_t v29 = a1;
              __int16 v30 = 2080;
              uint64_t v31 = "watch_all_parents";
              __int16 v32 = 1024;
              int v33 = v24;
              __int16 v34 = 2080;
              uint64_t v35 = v39;
              __int16 v36 = 2080;
              int v37 = v26;
              _os_log_error_impl(&dword_182959000, v23, OS_LOG_TYPE_ERROR, "%s: %s: error trying to add kqueue for fd %d (%s; %s)",
                buf,
                0x30u);
            }
          }
        }
        __strcpy_chk();
        my_dirname(__sa, v39);
        uint64_t result = 0;
        ++v20;
      }
      while (v20 < v21 && v39[1]);
    }
    else
    {
      return 12;
    }
  }
  else
  {
    CFNumberRef v17 = fsevent_default_log();
    uint64_t result = os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
    if (result)
    {
      watch_all_parents_cold_1();
      return 0;
    }
  }
  return result;
}

uint64_t FSEventsClientProcessMessageCallback(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  return FSEventsD2F_server(v1, (uint64_t)v3);
}

void OUTLINED_FUNCTION_0_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void OUTLINED_FUNCTION_5(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x1Cu);
}

void OUTLINED_FUNCTION_6(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

void OUTLINED_FUNCTION_13(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x20u);
}

void OUTLINED_FUNCTION_14(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x26u);
}

void OUTLINED_FUNCTION_21(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x26u);
}

void OUTLINED_FUNCTION_22(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x1Cu);
}

void OUTLINED_FUNCTION_23(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x30u);
}

void OUTLINED_FUNCTION_24(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x22u);
}

void FSEventStreamStart_cold_1()
{
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_1(&dword_182959000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
}

void FSEventStreamStart_cold_2()
{
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_1(&dword_182959000, v0, v1, "%s(): failed assertion: %s\n", v2, v3, v4, v5, 2u);
}

void FSEventStreamStart_cold_3()
{
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_1(&dword_182959000, v0, v1, "%s(): failed assertion: %s\n", v2, v3, v4, v5, 2u);
}

void register_with_server_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_1(&dword_182959000, v0, v1, "%s: %s: ERROR: array_of_path_lengths = malloc() failed", v2, v3, v4, v5, 2u);
}

void register_with_server_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_1(&dword_182959000, v0, v1, "%s: %s: ERROR: array_of_path_offsets = malloc() failed", v2, v3, v4, v5, 2u);
}

void register_with_server_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_1(&dword_182959000, v0, v1, "%s: %s: ERROR: paths_blob = malloc() failed", v2, v3, v4, v5, 2u);
}

void register_with_server_cold_4()
{
  OUTLINED_FUNCTION_12();
  mach_error_string(v0);
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_14(&dword_182959000, v1, v2, "%s: %s: ERROR: f2d_register_rpc() => %s (%d)", v3, v4, v5, v6, 2u);
}

void register_with_server_cold_5()
{
  OUTLINED_FUNCTION_16();
  OUTLINED_FUNCTION_6(&dword_182959000, v0, v1, "%s:%d Insufficient Memory", v2, v3, v4, v5, 2u);
}

void register_with_server_cold_6()
{
  OUTLINED_FUNCTION_16();
  OUTLINED_FUNCTION_6(&dword_182959000, v0, v1, "%s:%d Insufficient Memory", v2, v3, v4, v5, 2u);
}

void register_with_server_cold_7()
{
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_1(&dword_182959000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
}

void _FSEventStreamRetainAndReturnSelf_cold_1()
{
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_1(&dword_182959000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
}

void FSEventStreamRelease_cold_1()
{
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_1(&dword_182959000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
}

void FSEventStreamRelease_cold_2(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void FSEventStreamCopyDescription_cold_1()
{
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_1(&dword_182959000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
}

void FSEventStreamCopyDescription_cold_2(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_3(&dword_182959000, a1, a3, "%s: ERROR: cStr = malloc() failed", a5, a6, a7, a8, 2u);
}

void FSEventsClientPortCallback_cold_1(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void FSEventStreamStop_cold_1()
{
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_1(&dword_182959000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
}

void FSEventStreamStop_cold_2()
{
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_1(&dword_182959000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
}

void dispose_f2d_private_port_cold_1(mach_error_t a1)
{
  mach_error_string(a1);
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_24(&dword_182959000, v1, v2, "%s: ERROR: mach_port_deallocate(port = 0x%x) => %s (%d)", v3, v4, v5, v6, 2u);
}

void dispose_f2d_private_port_cold_2()
{
  OUTLINED_FUNCTION_18();
  mach_error_string(v0);
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_5(&dword_182959000, v1, v2, "%s: ERROR: f2d_unregister_rpc() => %s (%d)", v3, v4, v5, v6, 2u);
}

void implementation_callback_rpc_cold_1(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_3(&dword_182959000, a1, a3, "FSEvents: %s: WARNING: num_paths == 0", a5, a6, a7, a8, 2u);
}

void implementation_callback_rpc_cold_2(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_3(&dword_182959000, a1, a3, "%s: ERROR: CFNumberCreate() => NULL", a5, a6, a7, a8, 2u);
}

void implementation_callback_rpc_cold_3(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_3(&dword_182959000, a1, a3, "%s: ERROR: CFDictionaryGetValue(FSEvents_streamDict, cfPortNumber) => NULL", a5, a6, a7, a8, 2u);
}

void implementation_callback_rpc_cold_4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_3(&dword_182959000, a1, a3, "%s: ERROR: eventPaths = malloc() failed", a5, a6, a7, a8, 2u);
}

void implementation_callback_rpc_cold_5(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_3(&dword_182959000, a1, a3, "%s: ERROR: pathFlags = malloc() failed", a5, a6, a7, a8, 2u);
}

void implementation_callback_rpc_cold_6(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_3(&dword_182959000, a1, a3, "%s: ERROR: cfStringRef_eventPaths = calloc() failed", a5, a6, a7, a8, 2u);
}

void implementation_callback_rpc_cold_7(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void implementation_callback_rpc_cold_8()
{
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_0_1(&dword_182959000, v0, v1, "%s: ERROR: CFStringCreateWithFileSystemRepresentation('%s') failed", v2, v3, v4, v5, 2u);
}

void implementation_callback_rpc_cold_9(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_3(&dword_182959000, a1, a3, "%s: ERROR: CFArrayCreateMutable() => NULL\n", a5, a6, a7, a8, 2u);
}

void implementation_callback_rpc_cold_10(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_3(&dword_182959000, a1, a3, "%s: ERROR: CFDictionaryCreateMutable() => NULL\n", a5, a6, a7, a8, 2u);
}

void implementation_callback_rpc_cold_11(uint8_t *buf, void *a2, os_log_t log)
{
  *(_DWORD *)stat buf = 136315138;
  *a2 = "implementation_callback_rpc";
  _os_log_error_impl(&dword_182959000, log, OS_LOG_TYPE_ERROR, "%s: ERROR: CFNumberCreate() => NULL\n", buf, 0xCu);
}

void implementation_callback_rpc_cold_13(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_3(&dword_182959000, a1, a3, "%s: ERROR: eventFlags = malloc() failed", a5, a6, a7, a8, 2u);
}

void implementation_callback_rpc_cold_14(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_3(&dword_182959000, a1, a3, "%s: ERROR: eventIds = malloc() failed", a5, a6, a7, a8, 2u);
}

void implementation_callback_rpc_cold_15()
{
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_1(&dword_182959000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
}

void implementation_callback_rpc_cold_16()
{
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_1(&dword_182959000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
}

void implementation_callback_rpc_cold_17()
{
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_1(&dword_182959000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
}

void implementation_callback_rpc_cold_18()
{
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_1(&dword_182959000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
}

void FSEventStreamRetain_cold_1()
{
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_1(&dword_182959000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
}

void FSEventStreamGetLatestEventId_cold_1()
{
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_1(&dword_182959000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
}

void FSEventStreamGetDeviceBeingWatched_cold_1()
{
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_1(&dword_182959000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
}

void FSEventStreamCopyPathsBeingWatched_cold_1()
{
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_1(&dword_182959000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
}

void FSEventStreamCopyPathsBeingWatched_cold_2(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void FSEventStreamCopyPathsBeingWatched_cold_3(void *a1, uint64_t a2, os_log_t log)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(*a1 + 8 * a2);
  int v4 = 136315394;
  uint64_t v5 = "FSEventStreamCopyPathsBeingWatched";
  __int16 v6 = 2080;
  uint64_t v7 = v3;
  _os_log_error_impl(&dword_182959000, log, OS_LOG_TYPE_ERROR, "%s: ERROR: CFStringCreateWithFileSystemRepresentation('%s') failed", (uint8_t *)&v4, 0x16u);
}

void FSEventStreamCopyPathsBeingWatched_cold_4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _FSEventStreamCreate_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_1(&dword_182959000, v0, v1, "%s: %s: ERROR: parameter error kFSEventStreamCreateFlagUseCFTypes requires  kFSEventStreamCreateFlagUseExtendedData", v2, v3, v4, v5, 2u);
}

void _FSEventStreamCreate_cold_2(uint64_t a1, NSObject *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v2 = 136315650;
  uint64_t v3 = a1;
  __int16 v4 = 2080;
  uint64_t v5 = "_FSEventStreamCreate";
  __int16 v6 = 2048;
  uint64_t v7 = 456;
  _os_log_error_impl(&dword_182959000, a2, OS_LOG_TYPE_ERROR, "%s: %s: ERROR: could not allocate %lu bytes for FSEventStream", (uint8_t *)&v2, 0x20u);
}

void _FSEventStreamCreate_cold_3(uint64_t a1)
{
  LODWORD(v3) = 136315650;
  *(void *)((char *)&v3 + 4) = a1;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_15();
  OUTLINED_FUNCTION_13(&dword_182959000, v1, v2, "%s: %s: ERROR: could not allocate %lu bytes for array of path strings", (const char *)v3, DWORD2(v3), v4);
}

void _FSEventStreamCreate_cold_4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_1(&dword_182959000, v0, v1, "%s: %s: ERROR: CFStringGetCString() failed", v2, v3, v4, v5, 2u);
}

void _FSEventStreamCreate_cold_5(uint64_t a1)
{
  *(_DWORD *)uint64_t v3 = 136315650;
  *(void *)&v3[4] = a1;
  OUTLINED_FUNCTION_2();
  *(void *)&v3[14] = "_FSEventStreamCreate";
  OUTLINED_FUNCTION_22(&dword_182959000, v1, v2, "%s: %s: ERROR: could not allocate %d bytes for path string (2)", *(const char **)v3, *(const char **)&v3[8], (unint64_t)"_FSEventStreamCreate" >> 16);
}

void _FSEventStreamCreate_cold_6(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)uint64_t v4 = 136315650;
  *(void *)&v4[4] = a2;
  OUTLINED_FUNCTION_2();
  *(void *)&v4[14] = "_FSEventStreamCreate";
  OUTLINED_FUNCTION_22(&dword_182959000, v2, v3, "%s: %s: ERROR: (CFStringGetTypeID() != CFGetTypeID(cfStringRef)) (uint64_t i = %d)\n", *(const char **)v4, *(const char **)&v4[8], (unint64_t)"_FSEventStreamCreate" >> 16);
}

void _FSEventStreamCreate_cold_7()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_1(&dword_182959000, v0, v1, "%s: %s: ERROR: could not open kqueue ", v2, v3, v4, v5, 2u);
}

void _FSEventStreamCreate_cold_8(uint64_t a1)
{
  LODWORD(v3) = 136315650;
  *(void *)((char *)&v3 + 4) = a1;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_15();
  OUTLINED_FUNCTION_13(&dword_182959000, v1, v2, "%s: %s: ERROR: could not allocate %lu bytes for array of dir_info structs", (const char *)v3, DWORD2(v3), v4);
}

void _FSEventStreamCreate_cold_9(uint64_t a1)
{
  LODWORD(v3) = 136315650;
  *(void *)((char *)&v3 + 4) = a1;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_15();
  OUTLINED_FUNCTION_13(&dword_182959000, v1, v2, "%s: %s: ERROR: could not allocate %lu bytes for array of kevents", (const char *)v3, DWORD2(v3), v4);
}

void FSEventStreamCreateRelativeToDevice_cold_1()
{
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_1(&dword_182959000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
}

void _FSEventStreamDeallocate_cold_1()
{
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_1(&dword_182959000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
}

void _FSEventStreamDeallocate_cold_2()
{
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_1(&dword_182959000, v0, v1, "%s(): failed assertion: %s\n", v2, v3, v4, v5, 2u);
}

void _FSEventStreamDeallocate_cold_3()
{
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_1(&dword_182959000, v0, v1, "%s(): failed assertion: %s\n", v2, v3, v4, v5, 2u);
}

void _FSEventStreamDeallocate_cold_4()
{
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_1(&dword_182959000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
}

void FSEventStreamScheduleWithRunLoop_cold_1()
{
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_1(&dword_182959000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
}

void FSEventStreamScheduleWithRunLoop_cold_2()
{
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_1(&dword_182959000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
}

void FSEventStreamScheduleWithRunLoop_cold_3(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void FSEventStreamScheduleWithRunLoop_cold_4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void FSEventStreamScheduleWithRunLoop_cold_5()
{
  OUTLINED_FUNCTION_18();
  mach_error_string(v0);
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_5(&dword_182959000, v1, v2, "%s: ERROR: _createAndAddRunLoopSource(...) => %s (%d)", v3, v4, v5, v6, 2u);
}

void FSEventStreamScheduleWithRunLoop_cold_6()
{
  OUTLINED_FUNCTION_18();
  mach_error_string(v0);
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_5(&dword_182959000, v1, v2, "%s: ERROR: allocate_d2f_port(...) => %s (%d)", v3, v4, v5, v6, 2u);
}

void allocate_d2f_port_cold_1()
{
  OUTLINED_FUNCTION_12();
  mach_error_string(v0);
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_14(&dword_182959000, v1, v2, "%s: %s: ERROR: mach_port_allocate() => %s (%d)", v3, v4, v5, v6, 2u);
}

void _createAndAddRunLoopSource_cold_1()
{
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_1(&dword_182959000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
}

void _createAndAddRunLoopSource_cold_2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_1(&dword_182959000, v0, v1, "%s: %s: ERROR: CFMachPortCreateWithPort() => NULL", v2, v3, v4, v5, 2u);
}

void _createAndAddRunLoopSource_cold_3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_1(&dword_182959000, v0, v1, "%s: %s: ERROR: CFMachPortCreateRunLoopSource() => NULL", v2, v3, v4, v5, 2u);
}

void _createAndAddRunLoopSource_cold_4()
{
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_1(&dword_182959000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
}

void FSEventStreamUnscheduleFromRunLoop_cold_1()
{
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_1(&dword_182959000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
}

void FSEventStreamUnscheduleFromRunLoop_cold_2()
{
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_1(&dword_182959000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
}

void FSEventStreamUnscheduleFromRunLoop_cold_3()
{
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_1(&dword_182959000, v0, v1, "%s(): failed assertion: %s\n", v2, v3, v4, v5, 2u);
}

void FSEventStreamSetDispatchQueue_cold_1()
{
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_1(&dword_182959000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
}

void FSEventStreamSetDispatchQueue_cold_2(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void FSEventStreamSetDispatchQueue_cold_3(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void FSEventStreamSetDispatchQueue_cold_4()
{
  OUTLINED_FUNCTION_18();
  mach_error_string(v0);
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_5(&dword_182959000, v1, v2, "%s: ERROR: allocate_d2f_port(...) => %s (%d)", v3, v4, v5, v6, 2u);
}

void process_dir_events_cold_1(int a1)
{
  strerror(a1);
  OUTLINED_FUNCTION_5(&dword_182959000, v1, v2, "%s: kevent returned %d (%s)", v3, v4, v5, v6, 2u);
}

void FSEventStreamFlushAsync_cold_1()
{
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_1(&dword_182959000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
}

void FSEventStreamFlushAsync_cold_2()
{
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_1(&dword_182959000, v0, v1, "%s(): failed assertion: %s\n", v2, v3, v4, v5, 2u);
}

void FSEventStreamFlushAsync_cold_3()
{
  OUTLINED_FUNCTION_18();
  mach_error_string(v0);
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_5(&dword_182959000, v1, v2, "%s: ERROR: f2d_flush_rpc() => %s (%d)", v3, v4, v5, v6, 2u);
}

void FSEventStreamFlushSync_cold_1()
{
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_1(&dword_182959000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
}

void FSEventStreamFlushSync_cold_3()
{
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_1(&dword_182959000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
}

void FSEventStreamFlushSync_cold_4()
{
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_1(&dword_182959000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
}

void FSEventStreamFlushSync_cold_5()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)uint64_t v3 = 136315650;
  OUTLINED_FUNCTION_16();
  *(_DWORD *)&v3[7] = 3370;
  v3[9] = v0;
  int v4 = v1;
  _os_log_error_impl(&dword_182959000, v2, OS_LOG_TYPE_ERROR, "%s:%d: error waiting on the dispatch_cond (%d)\n", (uint8_t *)v3, 0x18u);
}

void FSEventStreamFlushSync_cold_6()
{
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_1(&dword_182959000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
}

void FSEventStreamFlushSync_cold_7()
{
  OUTLINED_FUNCTION_12();
  mach_error_string(v0);
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_14(&dword_182959000, v1, v2, "%s(streamRef = %p): ERROR: f2d_flush_rpc() => %s (%d)", v3, v4, v5, v6, 2u);
}

void FSEventStreamFlushSync_cold_8()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)uint64_t v3 = 136315650;
  OUTLINED_FUNCTION_16();
  *(_DWORD *)&v3[7] = 3329;
  v3[9] = v0;
  int v4 = v1;
  _os_log_error_impl(&dword_182959000, v2, OS_LOG_TYPE_ERROR, "%s:%d: error waiting on the dispatch_cond (%d)\n", (uint8_t *)v3, 0x18u);
}

void _runRunLoopOnceForFlushSync_cold_1()
{
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_21(&dword_182959000, v0, v1, "%s(streamRef = %p): ERROR: CFRunLoopRunInMode() => %s (%d)", v2, v3, v4, v5);
}

void _runRunLoopOnceForFlushSync_cold_2()
{
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_21(&dword_182959000, v0, v1, "%s(streamRef = %p): ERROR: CFRunLoopRunInMode() => %s (%d)", v2, v3, v4, v5);
}

void FSEventStreamInvalidate_cold_1()
{
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_1(&dword_182959000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
}

void FSEventStreamInvalidate_cold_2()
{
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_1(&dword_182959000, v0, v1, "%s(): failed assertion: %s\n", v2, v3, v4, v5, 2u);
}

void FSEventStreamInvalidate_cold_3()
{
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_1(&dword_182959000, v0, v1, "%s(): failed assertion: %s\n", v2, v3, v4, v5, 2u);
}

void dispose_d2f_port_cold_1(mach_error_t a1)
{
  mach_error_string(a1);
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_24(&dword_182959000, v1, v2, "%s: ERROR: mach_port_mod_refs(port = 0x%x, MACH_PORT_RIGHT_RECEIVE, -1) => %s (%d)", v3, v4, v5, v6, 2u);
}

void FSEvents_connect_cold_1()
{
  kern_return_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_12();
  bootstrap_strerror(v0);
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_5(&dword_182959000, v1, v2, "%s: ERROR: FSEvents_connect() => %s (%d)", v3, v4, v5, v6, 2u);
}

void FSEventsCopyUUIDForDevice_cold_1()
{
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_1(&dword_182959000, v0, v1, "%s(): failed assertion '%s'\n", v2, v3, v4, v5, 2u);
}

void FSEventsPurgeEventsForDeviceUpToEventId_cold_1()
{
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_6(&dword_182959000, v0, v1, "%s: f2d_purge_events_for_device_up_to_event_id_rpc() failed: %d", v2, v3, v4, v5, 2u);
}

void server_gone_StreamRef_callback_cold_1(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void server_gone_StreamRef_callback_cold_2(int *a1, int a2, os_log_t log)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  int v3 = *a1;
  int v4 = 136315650;
  uint64_t v5 = "server_gone_StreamRef_callback";
  __int16 v6 = 1024;
  int v7 = a2;
  __int16 v8 = 1024;
  int v9 = v3;
  _os_log_error_impl(&dword_182959000, log, OS_LOG_TYPE_ERROR, "%s: re-registering with server failed and returned %d (f2d port %u)", (uint8_t *)&v4, 0x18u);
}

void server_gone_StreamRef_callback_cold_3()
{
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_6(&dword_182959000, v0, v1, "%s: re-allocating d2f port failed and returned %d", v2, v3, v4, v5, 2u);
}

void server_gone_StreamRef_callback_cold_4()
{
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_6(&dword_182959000, v0, v1, "%s: failed to reconnect to server! (kr 0x%x)", v2, v3, v4, v5, 2u);
}

void root_dir_event_callback_cold_1()
{
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_0_1(&dword_182959000, v0, v1, "%s: ERROR: CFStringCreateWithFileSystemRepresentation('%s') failed", v2, v3, v4, v5, 2u);
}

void root_dir_event_callback_cold_2(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void root_dir_event_callback_cold_4()
{
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_0_1(&dword_182959000, v0, v1, "%s: ERROR: CFDictionaryCreate('%s') failed", v2, v3, v4, v5, 2u);
}

void watch_path_cold_1()
{
  __error();
  uint64_t v0 = __error();
  strerror(*v0);
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_23(&dword_182959000, v1, v2, "%s: %s:2: open('%s', O_RDONLY) failed <3>, errno = %d (%s)", v3, v4, v5, v6, 2u);
}

void watch_path_cold_2()
{
  __error();
  uint64_t v0 = __error();
  strerror(*v0);
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_23(&dword_182959000, v1, v2, "%s: %s:2: open('%s', O_RDONLY) failed <2>, errno = %d (%s)", v3, v4, v5, v6, 2u);
}

void watch_path_cold_3()
{
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_0_1(&dword_182959000, v0, v1, "%s: watching path(%s) renamed and revalidated after watchroot registration", v2, v3, v4, v5, 2u);
}

void watch_all_parents_cold_1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_1(&dword_182959000, v0, v1, "%s: %s: empty watchpath", v2, v3, v4, v5, 2u);
}

void receive_and_dispatch_rcv_msg_cold_1()
{
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_6(&dword_182959000, v0, v1, "%s: mach_msg <2> - err (%d)", v2, v3, v4, v5, 2u);
}

void receive_and_dispatch_rcv_msg_cold_2()
{
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_6(&dword_182959000, v0, v1, "%s: mach_msg <1> - err (%d)", v2, v3, v4, v5, 2u);
}

uint64_t f2d_flush_rpc(int a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  long long v10 = 0u;
  *(_OWORD *)&msg[20] = 0u;
  *(_DWORD *)&msg[4] = 0;
  mach_port_name_t special_reply_port = mig_get_special_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = special_reply_port;
  *(_DWORD *)msg = 5395;
  *(void *)&msg[16] = 0x101D100000000;
  if (MEMORY[0x1E4F14B18])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    mach_port_name_t special_reply_port = *(_DWORD *)&msg[12];
  }
  uint64_t v5 = mach_msg((mach_msg_header_t *)msg, 3162115, 0x18u, 0x34u, special_reply_port, 0, 0);
  uint64_t v6 = v5;
  if ((v5 - 268435458) > 0xE || ((1 << (v5 - 2)) & 0x4003) == 0)
  {
    if (!v5)
    {
      if (*(_DWORD *)&msg[20] == 71)
      {
        uint64_t v6 = 4294966988;
      }
      else if (*(_DWORD *)&msg[20] == 66101)
      {
        if ((*(_DWORD *)msg & 0x80000000) == 0)
        {
          if (*(_DWORD *)&msg[4] == 44)
          {
            if (!*(_DWORD *)&msg[8])
            {
              uint64_t v6 = *(unsigned int *)&msg[32];
              if (!*(_DWORD *)&msg[32])
              {
                *a2 = v10;
                return v6;
              }
              goto LABEL_22;
            }
          }
          else if (*(_DWORD *)&msg[4] == 36)
          {
            if (*(_DWORD *)&msg[8]) {
              BOOL v7 = 1;
            }
            else {
              BOOL v7 = *(_DWORD *)&msg[32] == 0;
            }
            if (v7) {
              uint64_t v6 = 4294966996;
            }
            else {
              uint64_t v6 = *(unsigned int *)&msg[32];
            }
            goto LABEL_22;
          }
        }
        uint64_t v6 = 4294966996;
      }
      else
      {
        uint64_t v6 = 4294966995;
      }
LABEL_22:
      mach_msg_destroy((mach_msg_header_t *)msg);
      return v6;
    }
    mig_dealloc_special_reply_port();
  }
  return v6;
}

uint64_t f2d_get_last_event_for_device_before_time_rpc(int a1, int a2, uint64_t a3, void *a4)
{
  *(_OWORD *)&msg[20] = 0u;
  long long v12 = 0u;
  *(_OWORD *)&msg[4] = 0u;
  *(void *)&msg[24] = *MEMORY[0x1E4F14068];
  *(_DWORD *)&msg[32] = a2;
  *(void *)&long long v12 = a3;
  mach_port_name_t special_reply_port = mig_get_special_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = special_reply_port;
  *(_DWORD *)msg = 5395;
  *(void *)&msg[16] = 0x101D400000000;
  if (MEMORY[0x1E4F14B18])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    mach_port_name_t special_reply_port = *(_DWORD *)&msg[12];
  }
  uint64_t v7 = mach_msg((mach_msg_header_t *)msg, 3162115, 0x2Cu, 0x34u, special_reply_port, 0, 0);
  uint64_t v8 = v7;
  if ((v7 - 268435458) > 0xE || ((1 << (v7 - 2)) & 0x4003) == 0)
  {
    if (!v7)
    {
      if (*(_DWORD *)&msg[20] == 71)
      {
        uint64_t v8 = 4294966988;
      }
      else if (*(_DWORD *)&msg[20] == 66104)
      {
        if ((*(_DWORD *)msg & 0x80000000) == 0)
        {
          if (*(_DWORD *)&msg[4] == 44)
          {
            if (!*(_DWORD *)&msg[8])
            {
              uint64_t v8 = *(unsigned int *)&msg[32];
              if (!*(_DWORD *)&msg[32])
              {
                *a4 = v12;
                return v8;
              }
              goto LABEL_22;
            }
          }
          else if (*(_DWORD *)&msg[4] == 36)
          {
            if (*(_DWORD *)&msg[8]) {
              BOOL v9 = 1;
            }
            else {
              BOOL v9 = *(_DWORD *)&msg[32] == 0;
            }
            if (v9) {
              uint64_t v8 = 4294966996;
            }
            else {
              uint64_t v8 = *(unsigned int *)&msg[32];
            }
            goto LABEL_22;
          }
        }
        uint64_t v8 = 4294966996;
      }
      else
      {
        uint64_t v8 = 4294966995;
      }
LABEL_22:
      mach_msg_destroy((mach_msg_header_t *)msg);
      return v8;
    }
    mig_dealloc_special_reply_port();
  }
  return v8;
}

uint64_t f2d_purge_events_for_device_up_to_event_id_rpc(int a1, int a2, uint64_t a3, _DWORD *a4)
{
  memset(&rcv_name[16], 0, 28);
  *(_OWORD *)rcv_name = 0u;
  *(void *)&rcv_name[20] = *MEMORY[0x1E4F14068];
  *(_DWORD *)&rcv_name[28] = a2;
  *(void *)&rcv_name[32] = a3;
  mach_port_name_t special_reply_port = mig_get_special_reply_port();
  *(_DWORD *)&rcv_name[4] = a1;
  *(_DWORD *)&rcv_name[8] = special_reply_port;
  int v11 = 5395;
  *(void *)&rcv_name[12] = 0x101D500000000;
  if (MEMORY[0x1E4F14B18])
  {
    voucher_mach_msg_set((mach_msg_header_t *)&v11);
    mach_port_name_t special_reply_port = *(_DWORD *)&rcv_name[8];
  }
  uint64_t v7 = mach_msg((mach_msg_header_t *)&v11, 3162115, 0x2Cu, 0x30u, special_reply_port, 0, 0);
  uint64_t v8 = v7;
  if ((v7 - 268435458) > 0xE || ((1 << (v7 - 2)) & 0x4003) == 0)
  {
    if (!v7)
    {
      if (*(_DWORD *)&rcv_name[16] == 71)
      {
        uint64_t v8 = 4294966988;
      }
      else if (*(_DWORD *)&rcv_name[16] == 66105)
      {
        if ((v11 & 0x80000000) == 0)
        {
          if (*(_DWORD *)rcv_name == 40)
          {
            if (!*(_DWORD *)&rcv_name[4])
            {
              uint64_t v8 = *(unsigned int *)&rcv_name[28];
              if (!*(_DWORD *)&rcv_name[28])
              {
                *a4 = *(_DWORD *)&rcv_name[32];
                return v8;
              }
              goto LABEL_22;
            }
          }
          else if (*(_DWORD *)rcv_name == 36)
          {
            if (*(_DWORD *)&rcv_name[4]) {
              BOOL v9 = 1;
            }
            else {
              BOOL v9 = *(_DWORD *)&rcv_name[28] == 0;
            }
            if (v9) {
              uint64_t v8 = 4294966996;
            }
            else {
              uint64_t v8 = *(unsigned int *)&rcv_name[28];
            }
            goto LABEL_22;
          }
        }
        uint64_t v8 = 4294966996;
      }
      else
      {
        uint64_t v8 = 4294966995;
      }
LABEL_22:
      mach_msg_destroy((mach_msg_header_t *)&v11);
      return v8;
    }
    mig_dealloc_special_reply_port();
  }
  return v8;
}

CFTypeRef _XCFRetain(int a1, CFTypeRef cf)
{
  if (!cf)
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = objc_msgSend(NSString, "stringWithUTF8String:", "const void *_XCFRetain(CFAllocatorRef, const void *)");
    [v4 handleFailureInFunction:v5, @"CFUtils.m", 26, @"Invalid parameter not satisfying: %@", @"ptr != NULL" file lineNumber description];
  }

  return CFRetain(cf);
}

void _XCFRelease(int a1, CFTypeRef cf)
{
  if (!cf)
  {
    uint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = objc_msgSend(NSString, "stringWithUTF8String:", "void _XCFRelease(CFAllocatorRef, const void *)");
    [v3 handleFailureInFunction:v4, @"CFUtils.m", 37, @"Invalid parameter not satisfying: %@", @"ptr != NULL" file lineNumber description];
  }

  CFRelease(cf);
}

uint64_t _XCFStringHashCaseInsensitive(const __CFString *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  CStringPtr = CFStringGetCStringPtr(a1, 0x8000100u);
  if (!CStringPtr)
  {
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    *(_OWORD *)int v11 = 0u;
    if (a1 && (CFTypeID v6 = CFGetTypeID(a1), v6 == CFStringGetTypeID()))
    {
      CFIndex Length = CFStringGetLength(a1);
      if (XCFBufInitWithCFStringRange((uint64_t)&v10, a1, 0, Length, 0))
      {
        uint64_t v8 = _XCFHash8BitCaseInsensitive((unsigned __int8 *)v10, DWORD2(v10));
        if (v11[0]) {
          free(v11[0]);
        }
        return v8;
      }
    }
    else
    {
      *(void *)&long long v10 = (char *)&v11[1] + 4;
      DWORD2(v10) = 0;
      LODWORD(v11[1]) = 127;
      v11[0] = 0;
      BYTE4(v11[1]) = 0;
    }
    BOOL v9 = _LSDefaultLog();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      _XCFStringHashCaseInsensitive_cold_1(v9);
    }

    return 0;
  }
  uint64_t v3 = (unsigned __int8 *)CStringPtr;
  unint64_t v4 = strlen(CStringPtr);

  return _XCFHash8BitCaseInsensitive(v3, v4);
}

CFArrayRef XCFArrayCreateWithSet(const __CFAllocator *a1, CFSetRef theSet, const CFArrayCallBacks *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  unint64_t Count = CFSetGetCount(theSet);
  CFIndex v7 = Count;
  uint64_t v8 = (const void **)v11;
  if (Count >= 0x101) {
    uint64_t v8 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
  }
  memset(v11, 0, 512);
  CFSetGetValues(theSet, v8);
  CFArrayRef v9 = CFArrayCreate(a1, v8, v7, a3);
  if (v8 != (const void **)v11) {
    free(v8);
  }
  return v9;
}

CFNumberRef XCFNumberCreateWithHFSTypeAndCreatorCodes(unsigned int a1, unsigned int a2)
{
  if (a2 == 1061109567) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = a2;
  }
  if (a1 == 1061109567) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = a1;
  }
  uint64_t valuePtr = v3 | (v2 << 32);
  return CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, &valuePtr);
}

CFNumberRef XCFNumberGetHFSTypeAndCreatorCodes(const __CFNumber *result, int *a2, int *a3)
{
  if (result)
  {
    uint64_t valuePtr = 0;
    uint64_t result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberSInt64Type, &valuePtr);
    if (a2)
    {
      int v5 = valuePtr;
      if (!valuePtr) {
        int v5 = 1061109567;
      }
      *a2 = v5;
    }
    if (a3)
    {
      int v6 = HIDWORD(valuePtr);
      if (!HIDWORD(valuePtr)) {
        int v6 = 1061109567;
      }
      *a3 = v6;
    }
  }
  return result;
}

uint64_t XCFBufInitWithCFStringInlineBuffer(uint64_t a1, uint64_t a2, int a3)
{
  if (*(void *)(a2 + 144))
  {
    *(_DWORD *)(a1 + 24) = 127;
    *(void *)(a1 + 16) = 0;
    *(unsigned char *)(a1 + 28) = 0;
    uint64_t v3 = (unsigned __int8 *)(*(void *)(a2 + 144) + *(void *)(a2 + 152));
    *(void *)a1 = v3;
    uint64_t v4 = *(void *)(a2 + 160);
    *(_DWORD *)(a1 + 8) = v4;
    if (!a3 || !v4) {
      return 1;
    }
    uint64_t v4 = v4;
    while (1)
    {
      int v5 = *v3++;
      if ((v5 - 65) <= 0x19) {
        break;
      }
      if (!--v4) {
        return 1;
      }
    }
  }
  return XCFBufInitWithCFStringRange(a1, *(const __CFString **)(a2 + 128), *(void *)(a2 + 152), *(void *)(a2 + 160), a3);
}

CFURLRef XCFBundleCopyFolderURL(__CFBundle *a1, const __CFString *a2)
{
  CFURLRef result = CFBundleCopySupportFilesDirectoryURL(a1);
  if (result)
  {
    CFURLRef v5 = result;
    CFAllocatorRef v6 = CFGetAllocator(a1);
    CFURLRef v7 = CFURLCreateWithString(v6, a2, v5);
    CFRelease(v5);
    return v7;
  }
  return result;
}

CFStringRef XCFURLCopyRelativeFileSystemPath(const __CFURL *a1, const __CFURL *a2, CFURLPathStyle a3)
{
  CFURLRef v6 = CFURLCopyAbsoluteURL(a1);
  CFStringRef Copy = (CFStringRef)v6;
  if (v6)
  {
    CFStringRef v8 = CFURLCopyFileSystemPath(v6, a3);
    CFRelease(Copy);
    if (v8)
    {
      CFURLRef v9 = CFURLCopyAbsoluteURL(a2);
      CFStringRef Copy = (CFStringRef)v9;
      if (v9)
      {
        int v10 = CFURLHasDirectoryPath(v9);
        CFStringRef v11 = CFURLCopyFileSystemPath((CFURLRef)Copy, a3);
        CFRelease(Copy);
        CFIndex Length = CFStringGetLength(v8);
        CFIndex v13 = CFStringGetLength(v11);
        if (Length <= v13)
        {
          CFIndex v15 = v13;
          v22.id location = 0;
          v22.CFIndex length = Length;
          CFStringRef Copy = 0;
          if (CFStringCompareWithOptions(v11, v8, v22, 0) == kCFCompareEqualTo)
          {
            if (v15 > Length && CFStringGetCharacterAtIndex(v11, Length) == 47) {
              ++Length;
            }
            CFAllocatorRef v17 = CFGetAllocator(a1);
            v23.CFIndex length = v15 - Length;
            v23.id location = Length;
            CFStringRef v18 = CFStringCreateWithSubstring(v17, v11, v23);
            CFStringRef Copy = v18;
            if (v10)
            {
              if (!CFStringHasSuffix(v18, @"/"))
              {
                CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
                CFArrayRef MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, Copy);
                if (MutableCopy)
                {
                  CFStringRef v21 = MutableCopy;
                  CFStringAppend(MutableCopy, @"/");
                  CFRelease(Copy);
                  CFStringRef Copy = CFStringCreateCopy(v19, v21);
                  CFRelease(v21);
                }
              }
            }
          }
        }
        else
        {
          CFStringRef Copy = 0;
        }
        CFRelease(v8);
        CFStringRef v14 = v11;
      }
      else
      {
        CFStringRef v14 = v8;
      }
      CFRelease(v14);
    }
    else
    {
      return 0;
    }
  }
  return Copy;
}

void XCFURLEnumerate(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v7 = a4;
  CFStringRef v8 = (void (**)(void, void, void, void, void))v7;
  if (a1)
  {
    if (v7) {
      goto LABEL_3;
    }
  }
  else
  {
    CFIndex v15 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v16 = objc_msgSend(NSString, "stringWithUTF8String:", "void XCFURLEnumerate(CFURLRef, CFURLEnumeratorOptions, CFArrayRef, void (^__strong)(CFURLEnumeratorRef, CFURLRef, CFErrorRef, Boolean *))");
    [v15 handleFailureInFunction:v16, @"CFUtils.m", 732, @"Invalid parameter not satisfying: %@", @"inURL != nil" file lineNumber description];

    if (v8) {
      goto LABEL_3;
    }
  }
  CFAllocatorRef v17 = [MEMORY[0x1E4F28B00] currentHandler];
  CFStringRef v18 = objc_msgSend(NSString, "stringWithUTF8String:", "void XCFURLEnumerate(CFURLRef, CFURLEnumeratorOptions, CFArrayRef, void (^__strong)(CFURLEnumeratorRef, CFURLRef, CFErrorRef, Boolean *))");
  [v17 handleFailureInFunction:v18, @"CFUtils.m", 733, @"Invalid parameter not satisfying: %@", @"inBlock != nil" file lineNumber description];

LABEL_3:
  uint64_t v9 = MEMORY[0x18530DE20](*MEMORY[0x1E4F1CF80], a1, a2, a3);
  if (v9)
  {
    int v10 = (const void *)v9;
    char v21 = 0;
    do
    {
      id v19 = 0;
      uint64_t v20 = 0;
      uint64_t v11 = MEMORY[0x18530DE30](v10, &v20, &v19);
      switch(v11)
      {
        case 1:
          ((void (**)(void, const void *, uint64_t, void, char *))v8)[2](v8, v10, v20, 0, &v21);
          break;
        case 2:
          char v21 = 1;
          break;
        case 3:
          uint64_t v12 = _LSDefaultLog();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)stat buf = 138478083;
            uint64_t v23 = a1;
            __int16 v24 = 2114;
            id v25 = v19;
            _os_log_error_impl(&dword_182959000, v12, OS_LOG_TYPE_ERROR, "Error (non-fatal) enumerating %{private}@: %{public}@", buf, 0x16u);
          }

          ((void (**)(void, const void *, void, id, char *))v8)[2](v8, v10, 0, v19, &v21);
          break;
        case 4:
          break;
        default:
          CFIndex v13 = (void *)v11;
          CFStringRef v14 = _LSDefaultLog();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)stat buf = 138478083;
            uint64_t v23 = a1;
            __int16 v24 = 2048;
            id v25 = v13;
            _os_log_debug_impl(&dword_182959000, v14, OS_LOG_TYPE_DEBUG, "Unexpected CFURLEnumeratorResult when enumerating %{private}@: %lli", buf, 0x16u);
          }

          break;
      }
    }
    while (!v21);
    CFRelease(v10);
  }
}

id _LSGetFrontBoardOptionsDictionaryClasses()
{
  if (_LSGetFrontBoardOptionsDictionaryClasses_once != -1) {
    dispatch_once(&_LSGetFrontBoardOptionsDictionaryClasses_once, &__block_literal_global_29);
  }
  uint64_t v0 = (void *)_LSGetFrontBoardOptionsDictionaryClasses_result;

  return v0;
}

uint64_t _XCFHash8BitCaseInsensitive(unsigned __int8 *a1, unint64_t a2)
{
  if (a2 < 0x81)
  {
    if (a2)
    {
      unint64_t v5 = a2;
      uint64_t v3 = a2;
      do
      {
        int v6 = *a1++;
        uint64_t v3 = 17 * v3 + (v6 & 0xFFFFFFDF);
        --v5;
      }
      while (v5);
    }
    else
    {
      uint64_t v3 = 0;
    }
  }
  else
  {
    uint64_t v2 = 0;
    uint64_t v3 = a2;
    do
      uint64_t v3 = 17 * v3 + (a1[v2++] & 0xDF);
    while (v2 != 64);
    uint64_t v4 = -64;
    do
      uint64_t v3 = 17 * v3 + (a1[a2 + v4++] & 0xDF);
    while (v4);
  }
  return (v3 << (a2 & 7)) + v3;
}

Class initBSServiceConnectionEndpoint()
{
  if (!BoardServicesLibrary_frameworkLibrary) {
    BoardServicesLibrary_frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/BoardServices.framework/BoardServices", 2);
  }
  Class result = objc_getClass("BSServiceConnectionEndpoint");
  classBSServiceConnectionEndpoint = (uint64_t)result;
  getBSServiceConnectionEndpointClass[0] = (uint64_t (*)())BSServiceConnectionEndpointFunction;
  return result;
}

id BSServiceConnectionEndpointFunction()
{
  return (id)classBSServiceConnectionEndpoint;
}

Class initUISClickAttribution()
{
  if (!UIKitServicesLibrary_frameworkLibrary) {
    UIKitServicesLibrary_frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/UIKitServices.framework/UIKitServices", 2);
  }
  Class result = objc_getClass("UISClickAttribution");
  classUISClickAttribution = (uint64_t)result;
  getUISClickAttributionClass[0] = (uint64_t (*)())UISClickAttributionFunction;
  return result;
}

id UISClickAttributionFunction()
{
  return (id)classUISClickAttribution;
}

Class initUISPasteSharingToken()
{
  if (!UIKitServicesLibrary_frameworkLibrary) {
    UIKitServicesLibrary_frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/UIKitServices.framework/UIKitServices", 2);
  }
  Class result = objc_getClass("UISPasteSharingToken");
  classUISPasteSharingToken = (uint64_t)result;
  getUISPasteSharingTokenClass Class = (uint64_t (*)())UISPasteSharingTokenFunction;
  return result;
}

id UISPasteSharingTokenFunction()
{
  return (id)classUISPasteSharingToken;
}

uint64_t CSBindableKeyMapAddTable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4115048](a1, a2, 4);
}

uint64_t _CSBindableKeyMapGetHashForUnit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t CSBindableKeyMapNextKey()
{
  Header = (unsigned int *)CSMapGetHeader();
  if (!Header) {
    return 0;
  }
  uint64_t v1 = *Header;
  CSMapWriteToHeader();
  return v1;
}

id fileSystemRealPath(void *a1, void *a2)
{
  if (a1 && [a1 length])
  {
    uint64_t v4 = operator new(0x400uLL);
    bzero(v4, 0x400uLL);
    id v5 = a1;
    int v6 = realpath_DARWIN_EXTSN((const char *)[v5 UTF8String], (char *)v4);
    if (v6)
    {
      id v7 = v5;
      if (!strcmp(v6, (const char *)[v7 UTF8String]))
      {
        id v8 = v7;
      }
      else
      {
        id v8 = [NSString stringWithUTF8String:v6];
      }
      int v10 = v8;
      operator delete(v4);
      uint64_t v9 = 0;
      id v11 = 0;
      if (!a2) {
        goto LABEL_16;
      }
      goto LABEL_13;
    }
    if (a2)
    {
      uint64_t v9 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28798] code:*__error() userInfo:0];
      operator delete(v4);
      goto LABEL_8;
    }
    operator delete(v4);
  }
  else if (a2)
  {
    uint64_t v9 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:-43 userInfo:0];
LABEL_8:
    int v10 = 0;
LABEL_13:
    id v11 = v9;
    *a2 = v11;
    goto LABEL_16;
  }
  id v11 = 0;
  int v10 = 0;
LABEL_16:

  return v10;
}

void sub_1829C86B0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t FSNodeCreateWithURL(uint64_t a1, uint64_t a2, id *a3)
{
  uint64_t v3 = 4294967246;
  if (a1 && a3)
  {
    id v9 = 0;
    id v5 = [[FSNode alloc] initWithURL:a1 flags:a2 error:&v9];
    id v6 = v9;
    id v7 = v6;
    if (v5)
    {
      objc_storeStrong(a3, v5);
      uint64_t v3 = 0;
    }
    else
    {
      uint64_t v3 = _LSGetOSStatusFromNSError(v6);
    }
  }
  return v3;
}

void sub_1829C8768(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829C88C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1829C897C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1829C8B78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829C8CD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829C8ED8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829C9010(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829C9178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_1829C920C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1829C9314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1829C9598(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829C9648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1829C9790(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829C994C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829C9A44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829C9AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1829C9B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1829C9C7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1829C9D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1829C9E64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1829C9F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1829CA310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  for (uint64_t i = 8; i != -8; i -= 8)
  _Unwind_Resume(a1);
}

uint64_t _FSNodeGetNonFictionalDeviceNumber(FSNode *a1)
{
  int v7 = 0;
  id v6 = 0;
  BOOL v1 = [(FSNode *)a1 getDeviceNumber:&v7 error:&v6];
  id v2 = v6;
  if (v1)
  {
    uint64_t v3 = v7;
  }
  else
  {
    uint64_t v4 = _LSDefaultLog();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      _FSNodeGetNonFictionalDeviceNumber((uint64_t)v2, v4);
    }

    uint64_t v3 = 0;
  }

  return v3;
}

void sub_1829CA3F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829CA4AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1829CA534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1829CA64C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829CA780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1829CA9A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  CFRelease(v10);
  _Unwind_Resume(a1);
}

void sub_1829CAA88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1829CAC64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829CADC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829CAEC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829CAF30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829CAFA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829CB048(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829CB0B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829CB128(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829CB198(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829CB240(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829CB608(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829CB8B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829CBA7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829CBC10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829CBCB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829CBDA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829CBE8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829CC034(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829CC200(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829CC380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

id anonymous namespace'::LSDefaultApplicationQueryServerStateManager::modify(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v9 = &unk_1ECB194F8;
  uint64_t v10 = a2;
  uint64_t v12 = &v9;
  uint64_t v3 = LaunchServices::LSStatePlist::modify(a1, (uint64_t)&v9);
  std::__function::__value_func<objc_object * ()(objc_object *,NSError *)>::~__value_func[abi:nn180100](&v9);
  uint64_t v4 = (void *)os_transaction_create();
  id v5 = _LSServer_GetIOQueue();
  id v6 = (atomic_uchar *)(a1 + 64);
  id v9 = (void *)MEMORY[0x1E4F143A8];
  uint64_t v10 = 3221225472;
  id v11 = ___ZN12_GLOBAL__N_143LSDefaultApplicationQueryServerStateManager12scheduleSaveEv_block_invoke;
  uint64_t v12 = (void **)&unk_1E522BA28;
  uint64_t v14 = a1;
  id v7 = v4;
  id v13 = v7;
  _LSDispatchCoalescedAfterDelay(v6, v5, &v9, 1.0);

  return v3;
}

void sub_1829CC50C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void *std::function<anonymous namespace'::LSDefaultApplicationQueryState ()(anonymous namespace'::LSDefaultApplicationQueryState)>::~function(void *a1)
{
  id v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1829CC75C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1829CC878(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829CC8F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829CC9AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829CCA38(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1829CCEEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN12_GLOBAL__N_143LSDefaultApplicationQueryServerStateManager19sharedServerManagerEv_block_invoke()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1829CD114(_Unwind_Exception *a1)
{
  MEMORY[0x18530EAF0](v1, 0x10A0C4046E1F79DLL);
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::LSDefaultApplicationQueryServerStateManager::validatePlist(_anonymous_namespace_::LSDefaultApplicationQueryServerStateManager *this, objc_object *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v2 = this;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    CFStringRef v18 = v2;
    obuint64_t j = v2;
    uint64_t v3 = [(_anonymous_namespace_::LSDefaultApplicationQueryServerStateManager *)obj countByEnumeratingWithState:&v24 objects:v29 count:16];
    if (v3)
    {
      uint64_t v4 = *(void *)v25;
      char v5 = 1;
      do
      {
        for (uint64_t i = 0; i != v3; ++i)
        {
          if (*(void *)v25 != v4) {
            objc_enumerationMutation(obj);
          }
          uint64_t v7 = *(void *)(*((void *)&v24 + 1) + 8 * i);
          if (_NSIsNSString())
          {
            id v8 = [(_anonymous_namespace_::LSDefaultApplicationQueryServerStateManager *)obj objectForKey:v7];
            long long v22 = 0u;
            long long v23 = 0u;
            long long v20 = 0u;
            long long v21 = 0u;
            id v9 = v8;
            uint64_t v10 = [v9 countByEnumeratingWithState:&v20 objects:v28 count:16];
            if (v10)
            {
              uint64_t v11 = *(void *)v21;
              v5 &= 1u;
              do
              {
                for (uint64_t j = 0; j != v10; ++j)
                {
                  if (*(void *)v21 != v11) {
                    objc_enumerationMutation(v9);
                  }
                  uint64_t v13 = *(void *)(*((void *)&v20 + 1) + 8 * j);
                  if (_NSIsNSString())
                  {
                    uint64_t v14 = [v9 objectForKey:v13];
                    if (v5)
                    {
                      uint64_t v15 = +[LSDefaultApplicationQueryEntry createFromPlistRepresentation:v14];
                      char v5 = v15 != 0;
                    }
                    else
                    {
                      char v5 = 0;
                    }
                  }
                  else
                  {
                    char v5 = 0;
                  }
                }
                uint64_t v10 = [v9 countByEnumeratingWithState:&v20 objects:v28 count:16];
              }
              while (v10);
            }
          }
          else
          {
            char v5 = 0;
          }
        }
        uint64_t v3 = [(_anonymous_namespace_::LSDefaultApplicationQueryServerStateManager *)obj countByEnumeratingWithState:&v24 objects:v29 count:16];
      }
      while (v3);
    }
    else
    {
      char v5 = 1;
    }

    uint64_t v16 = v5 & 1;
    id v2 = v18;
  }
  else
  {
    uint64_t v16 = 0;
  }

  return v16;
}

void sub_1829CD384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<BOOL (*)(objc_object *),std::allocator<BOOL (*)(objc_object *)>,BOOL ()(objc_object *)>::~__func()
{
}

void *std::__function::__func<BOOL (*)(objc_object *),std::allocator<BOOL (*)(objc_object *)>,BOOL ()(objc_object *)>::__clone(uint64_t a1)
{
  Class result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1ECB194B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(objc_object *),std::allocator<BOOL (*)(objc_object *)>,BOOL ()(objc_object *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECB194B0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(objc_object *),std::allocator<BOOL (*)(objc_object *)>,BOOL ()(objc_object *)>::operator()(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*a2);
}

void *std::__function::__value_func<BOOL ()(objc_object *)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void anonymous namespace'::LSDefaultApplicationQueryState::fromValidatedPlist(_anonymous_namespace_::LSDefaultApplicationQueryState *this@<X0>, void *a2@<X8>)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v15 = this;
  id v18 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  obuint64_t j = v15;
  uint64_t v3 = -[_anonymous_namespace_::LSDefaultApplicationQueryState countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v27, v34, 16, v15);
  if (v3)
  {
    uint64_t v17 = *(void *)v28;
    do
    {
      uint64_t v19 = v3;
      for (uint64_t i = 0; i != v19; ++i)
      {
        if (*(void *)v28 != v17) {
          objc_enumerationMutation(obj);
        }
        uint64_t v5 = *(void *)(*((void *)&v27 + 1) + 8 * i);
        long long v22 = [(_anonymous_namespace_::LSDefaultApplicationQueryState *)obj objectForKey:v5];
        id v6 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
        uint64_t v21 = v5;
        long long v25 = 0u;
        long long v26 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        id v7 = v22;
        uint64_t v8 = [v7 countByEnumeratingWithState:&v23 objects:v33 count:16];
        if (v8)
        {
          uint64_t v9 = *(void *)v24;
          do
          {
            for (uint64_t j = 0; j != v8; ++j)
            {
              if (*(void *)v24 != v9) {
                objc_enumerationMutation(v7);
              }
              uint64_t v11 = *(void *)(*((void *)&v23 + 1) + 8 * j);
              uint64_t v12 = [v7 objectForKey:v11];
              uint64_t v13 = +[LSDefaultApplicationQueryEntry createFromPlistRepresentation:v12];
              if (v13)
              {
                [v6 setObject:v13 forKey:v11];
              }
              else
              {
                uint64_t v14 = _LSDefaultLog();
                if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
                {
                  *(_DWORD *)stat buf = 138412290;
                  __int16 v32 = v12;
                  _os_log_fault_impl(&dword_182959000, v14, OS_LOG_TYPE_FAULT, "couldn't make query entry from category dict %@!", buf, 0xCu);
                }
              }
            }
            uint64_t v8 = [v7 countByEnumeratingWithState:&v23 objects:v33 count:16];
          }
          while (v8);
        }

        [v18 setObject:v6 forKey:v21];
      }
      uint64_t v3 = [(_anonymous_namespace_::LSDefaultApplicationQueryState *)obj countByEnumeratingWithState:&v27 objects:v34 count:16];
    }
    while (v3);
  }

  *a2 = v18;
}

void sub_1829CD7A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<anonymous namespace'::LSDefaultApplicationQueryServerStateManager::modify(std::function<anonymous namespace'::LSDefaultApplicationQueryState ()(anonymous namespace'::LSDefaultApplicationQueryState)> const&)::{lambda(objc_object *,NSError *)#1},std::allocator<anonymous namespace'::LSDefaultApplicationQueryServerStateManager::modify(std::function<anonymous namespace'::LSDefaultApplicationQueryState ()(anonymous namespace'::LSDefaultApplicationQueryState)> const&)::{lambda(objc_object *,NSError *)#1}>,objc_object * ()(objc_object *,NSError *)>::~__func()
{
}

void *std::__function::__func<anonymous namespace'::LSDefaultApplicationQueryServerStateManager::modify(std::function<anonymous namespace'::LSDefaultApplicationQueryState ()(anonymous namespace'::LSDefaultApplicationQueryState)> const&)::{lambda(objc_object *,NSError *)#1},std::allocator<anonymous namespace'::LSDefaultApplicationQueryServerStateManager::modify(std::function<anonymous namespace'::LSDefaultApplicationQueryState ()(anonymous namespace'::LSDefaultApplicationQueryState)> const&)::{lambda(objc_object *,NSError *)#1}>,objc_object * ()(objc_object *,NSError *)>::__clone(uint64_t a1)
{
  Class result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1ECB194F8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<anonymous namespace'::LSDefaultApplicationQueryServerStateManager::modify(std::function<anonymous namespace'::LSDefaultApplicationQueryState ()(anonymous namespace'::LSDefaultApplicationQueryState)> const&)::{lambda(objc_object *,NSError *)#1},std::allocator<anonymous namespace'::LSDefaultApplicationQueryServerStateManager::modify(std::function<anonymous namespace'::LSDefaultApplicationQueryState ()(anonymous namespace'::LSDefaultApplicationQueryState)> const&)::{lambda(objc_object *,NSError *)#1}>,objc_object * ()(objc_object *,NSError *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECB194F8;
  a2[1] = v2;
  return result;
}

id std::__function::__func<anonymous namespace'::LSDefaultApplicationQueryServerStateManager::modify(std::function<anonymous namespace'::LSDefaultApplicationQueryState ()(anonymous namespace'::LSDefaultApplicationQueryState)> const&)::{lambda(objc_object *,NSError *)#1},std::allocator<anonymous namespace'::LSDefaultApplicationQueryServerStateManager::modify(std::function<anonymous namespace'::LSDefaultApplicationQueryState ()(anonymous namespace'::LSDefaultApplicationQueryState)> const&)::{lambda(objc_object *,NSError *)#1}>,objc_object * ()(objc_object *,NSError *)>::operator()(uint64_t a1, id *a2, void **a3)
{
  v41[16] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a3;
  uint64_t v5 = (_anonymous_namespace_::LSDefaultApplicationQueryState *)*a2;
  long long v22 = v5;
  id v23 = v4;
  id v24 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  id v31 = v24;
  if (v5)
  {
    id v6 = (void *)v41[0];
    id v31 = (id)v41[0];

    id v24 = v6;
  }
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(v7 + 24);
  if (!v8)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(id *__return_ptr))(*(void *)v8 + 48))(&v30);

  id v27 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  obuint64_t j = v30;
  uint64_t v9 = [obj countByEnumeratingWithState:&v36 objects:v41 count:16];
  if (v9)
  {
    uint64_t v26 = *(void *)v37;
    do
    {
      uint64_t v28 = v9;
      for (uint64_t i = 0; i != v28; ++i)
      {
        if (*(void *)v37 != v26) {
          objc_enumerationMutation(obj);
        }
        uint64_t v11 = *(void *)(*((void *)&v36 + 1) + 8 * i);
        id v12 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
        uint64_t v13 = objc_msgSend(v30, "objectForKey:", v11, v22, v23);
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        id v14 = v13;
        uint64_t v15 = [v14 countByEnumeratingWithState:&v32 objects:v40 count:16];
        if (v15)
        {
          uint64_t v16 = *(void *)v33;
          do
          {
            for (uint64_t j = 0; j != v15; ++j)
            {
              if (*(void *)v33 != v16) {
                objc_enumerationMutation(v14);
              }
              uint64_t v18 = *(void *)(*((void *)&v32 + 1) + 8 * j);
              uint64_t v19 = [v14 objectForKey:v18];
              long long v20 = [v19 plistRepresentation];

              [v12 setObject:v20 forKey:v18];
            }
            uint64_t v15 = [v14 countByEnumeratingWithState:&v32 objects:v40 count:16];
          }
          while (v15);
        }

        [v27 setObject:v12 forKey:v11];
      }
      uint64_t v9 = [obj countByEnumeratingWithState:&v36 objects:v41 count:16];
    }
    while (v9);
  }

  return v27;
}

void sub_1829CDBA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void *anonymous namespace'::LSDefaultApplicationQueryState::LSDefaultApplicationQueryState(void *a1, id *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v4 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v5 = *a2;
  uint64_t v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v14;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v14 != v7) {
          objc_enumerationMutation(v5);
        }
        uint64_t v9 = *(void *)(*((void *)&v13 + 1) + 8 * i);
        uint64_t v10 = objc_msgSend(*a2, "objectForKey:", v9, (void)v13);
        uint64_t v11 = (void *)[v10 mutableCopy];
        [v4 setObject:v11 forKey:v9];
      }
      uint64_t v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v6);
  }

  *a1 = v4;
  return a1;
}

void sub_1829CDDB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::__throw_bad_function_call[abi:nn180100]()
{
  std::__libcpp_verbose_abort("bad_function_call was thrown in -fno-exceptions mode");
  return std::__function::__value_func<objc_object * ()(objc_object *,NSError *)>::~__value_func[abi:nn180100](v0);
}

void *std::__function::__value_func<objc_object * ()(objc_object *,NSError *)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void ___ZN12_GLOBAL__N_143LSDefaultApplicationQueryServerStateManager12scheduleSaveEv_block_invoke(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = LaunchServices::LSStatePlist::save(*(os_unfair_lock_s **)(a1 + 40));
  uint64_t v2 = _LSDefaultLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 138412290;
    id v4 = v1;
    _os_log_impl(&dword_182959000, v2, OS_LOG_TYPE_DEFAULT, "LSDefaultApplicationQueryServerStateManager saved state with error %@", (uint8_t *)&v3, 0xCu);
  }
}

void sub_1829CDF44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829CE0FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  long long v14 = v13;

  _Unwind_Resume(a1);
}

void sub_1829CE244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  _Unwind_Resume(a1);
}

uint64_t _LSAliasAdd(void *a1, void *a2, void *a3)
{
  v13[1] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1;
  id v6 = a2;
  uint64_t v7 = v6;
  if (v5 && v6 && v5[1])
  {
    [v6 length];
    [v7 bytes];
    uint64_t v8 = CSStoreAllocUnitWithData();
    uint64_t v9 = v8;
    if (a3 && !v8)
    {
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -9493, (uint64_t)"_LSAliasAdd", 27, 0);
      uint64_t v9 = 0;
      *a3 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    if (a3)
    {
      uint64_t v12 = *MEMORY[0x1E4F28228];
      v13[0] = @"invalid input parameters";
      uint64_t v10 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v13 forKeys:&v12 count:1];
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -50, (uint64_t)"_LSAliasAdd", 31, v10);
      *a3 = (id)objc_claimAutoreleasedReturnValue();
    }
    uint64_t v9 = 0;
  }

  return v9;
}

void sub_1829CE400(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSAliasAddNode(void *a1, void *a2, void *a3)
{
  v13[1] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1;
  id v6 = a2;
  uint64_t v7 = v6;
  if (v5 && v6 && v5[1])
  {
    uint64_t v8 = [v6 bookmarkDataRelativeToNode:0 error:a3];
    if (v8) {
      uint64_t v9 = _LSAliasAdd(v5, v8, a3);
    }
    else {
      uint64_t v9 = 4294956486;
    }
  }
  else
  {
    if (a3)
    {
      uint64_t v12 = *MEMORY[0x1E4F28228];
      v13[0] = @"invalid input parameters";
      uint64_t v10 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v13 forKeys:&v12 count:1];
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -50, (uint64_t)"_LSAliasAddNode", 54, v10);
      *a3 = (id)objc_claimAutoreleasedReturnValue();
    }
    uint64_t v9 = 4294956486;
  }

  return v9;
}

void sub_1829CE574(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSAliasAddURL(void *a1, void *a2, void *a3)
{
  v13[1] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1;
  id v6 = a2;
  uint64_t v7 = v6;
  if (v5 && v6 && v5[1] && [v6 isFileURL])
  {
    uint64_t v8 = [[FSNode alloc] initWithURL:v7 flags:0 error:a3];
    if (v8) {
      uint64_t v9 = _LSAliasAddNode(v5, v8, a3);
    }
    else {
      uint64_t v9 = 4294956486;
    }
  }
  else
  {
    if (a3)
    {
      uint64_t v12 = *MEMORY[0x1E4F28228];
      v13[0] = @"invalid input parameters";
      uint64_t v10 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v13 forKeys:&v12 count:1];
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -50, (uint64_t)"_LSAliasAddURL", 78, v10);
      *a3 = (id)objc_claimAutoreleasedReturnValue();
    }
    uint64_t v9 = 4294956486;
  }

  return v9;
}

void sub_1829CE70C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSAliasRemove(void *a1, int a2)
{
  id v3 = a1;
  id v4 = v3;
  uint64_t v5 = 4294967246;
  if (v3 && a2 && *((void *)v3 + 1))
  {
    CSStoreFreeUnit();
    uint64_t v5 = 0;
  }

  return v5;
}

void sub_1829CE7BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSAliasGetName(void *a1, int a2)
{
  uint64_t v2 = _LSAliasGet(a1, a2);
  if (v2)
  {
    id v3 = +[FSNode nameForBookmarkData:v2 error:0];
  }
  else
  {
    id v3 = 0;
  }

  return v3;
}

void sub_1829CE834(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSAliasGetPath(void *a1, int a2)
{
  uint64_t v2 = _LSAliasGet(a1, a2);
  if (v2)
  {
    id v3 = +[FSNode pathForBookmarkData:v2 error:0];
  }
  else
  {
    id v3 = 0;
  }

  return v3;
}

void sub_1829CE8AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSAliasGetVisualizationFunctions(id (**a1)(void **this, LSContext *a2, int a3)@<X8>)
{
  *a1 = LaunchServices::Aliases::getSummary;
  a1[1] = (id (*)(void **, LSContext *, int))LaunchServices::Aliases::display;
  a1[2] = (id (*)(void **, LSContext *, int))LaunchServices::Aliases::copyBindingForVisualization;
}

id LaunchServices::Aliases::getSummary(void **this, LSContext *a2, int a3)
{
  return _LSAliasGetPath(*this, a3);
}

uint64_t LaunchServices::Aliases::copyBindingForVisualization(LaunchServices::Aliases *this, LSContext *a2)
{
  return 0;
}

void sub_1829CEFE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::DelayedInitable<LaunchServices::EligibilityPredicateEvaluation::Predicate>::emplace<LaunchServices::EligibilityPredicateEvaluation::Predicate>(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v5 = [MEMORY[0x1E4F28B00] currentHandler];
    id v6 = objc_msgSend(NSString, "stringWithUTF8String:", "void LaunchServices::DelayedInitable<LaunchServices::Predicate>::emplace(Args &&...) [T = LaunchServices::Predicate, Args = <LaunchServices::Predicate>]");
    [v5 handleFailureInFunction:v6 file:@"LSObjCPlusPlusHelpers.hpp" lineNumber:34 description:@"can't re-emplace a DelayedInitable"];
  }

  return std::optional<LaunchServices::EligibilityPredicateEvaluation::Predicate>::emplace[abi:nn180100]<LaunchServices::EligibilityPredicateEvaluation::Predicate,void>(a1, a2);
}

void sub_1829CF0BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::EligibilityPredicateEvaluation::Predicate::evaluate(void *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v8 = (void *)*a1;
  id v6 = a1 + 1;
  uint64_t v7 = v8;
  if (v8 == v6)
  {
LABEL_14:
    int v17 = 1;
    int v18 = 1;
  }
  else
  {
    while (1)
    {
      uint64_t v9 = [v5 eligibilityForDomain:v7[4] error:a3];
      uint64_t v10 = v9;
      if (!v9)
      {
        int v18 = 0;
        goto LABEL_17;
      }
      uint64_t v11 = (void *)v7[5];
      uint64_t v12 = (void *)v7[6];
      uint64_t v13 = [v9 unsignedLongLongValue];
      if (v11 != v12)
      {
        while (*v11 != v13)
        {
          if (++v11 == v12)
          {
            uint64_t v11 = v12;
            break;
          }
        }
      }
      if (v11 == (void *)v7[6]) {
        break;
      }

      long long v14 = (void *)v7[1];
      if (v14)
      {
        do
        {
          long long v15 = v14;
          long long v14 = (void *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          long long v15 = (void *)v7[2];
          BOOL v16 = *v15 == (void)v7;
          uint64_t v7 = v15;
        }
        while (!v16);
      }
      uint64_t v7 = v15;
      if (v15 == v6) {
        goto LABEL_14;
      }
    }
    int v18 = 1;
LABEL_17:

    int v17 = 0;
  }

  return v17 | (v18 << 8);
}

void sub_1829CF24C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829CF30C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t LaunchServices::EligibilityPredicateEvaluation::Predicate::to_string(LaunchServices::EligibilityPredicateEvaluation::Predicate *this)
{
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v13);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)"EligibilityPredicate {", 22);
  id v4 = *(char **)this;
  uint64_t v2 = (char *)this + 8;
  id v3 = v4;
  if (v4 != v2)
  {
    char v5 = 1;
    do
    {
      if ((v5 & 1) == 0) {
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)", ", 2);
      }
      std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)": [", 3);
      uint64_t v6 = *((void *)v3 + 5);
      uint64_t v7 = *((void *)v3 + 6);
      if (v6 != v7)
      {
        char v8 = 1;
        do
        {
          if ((v8 & 1) == 0) {
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)", ", 2);
          }
          std::ostream::operator<<();
          char v8 = 0;
          v6 += 8;
        }
        while (v6 != v7);
      }
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)"]", 1);
      uint64_t v9 = (char *)*((void *)v3 + 1);
      if (v9)
      {
        do
        {
          uint64_t v10 = v9;
          uint64_t v9 = *(char **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v10 = (char *)*((void *)v3 + 2);
          BOOL v11 = *(void *)v10 == (void)v3;
          id v3 = v10;
        }
        while (!v11);
      }
      char v5 = 0;
      id v3 = v10;
    }
    while (v10 != v2);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)"}", 1);
  std::stringbuf::str();
  v13[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v13 + *(void *)(v13[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v13[1] = MEMORY[0x1E4FBA470] + 16;
  if (v14 < 0) {
    operator delete((void *)v13[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18530EAC0](&v15);
}

void sub_1829CF578(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1829CF638(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__throw_bad_array_new_length[abi:nn180100]()
{
}

uint64_t **std::__tree<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::__map_value_compare<os_eligibility_domain_t,std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::less<os_eligibility_domain_t>,true>,std::allocator<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>>>::__emplace_unique_key_args<os_eligibility_domain_t,os_eligibility_domain_t&,std::vector<os_eligibility_answer_t>>(uint64_t **a1, unint64_t *a2, void *a3, uint64_t a4)
{
  char v8 = a1 + 1;
  uint64_t v7 = a1[1];
  if (v7)
  {
    unint64_t v9 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v10 = (uint64_t **)v7;
        unint64_t v11 = v7[4];
        if (v9 >= v11) {
          break;
        }
        uint64_t v7 = *v10;
        char v8 = v10;
        if (!*v10) {
          goto LABEL_10;
        }
      }
      if (v11 >= v9) {
        break;
      }
      uint64_t v7 = v10[1];
      if (!v7)
      {
        char v8 = v10 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v10 = a1 + 1;
LABEL_10:
    uint64_t v12 = (char *)operator new(0x40uLL);
    *((void *)v12 + 4) = *a3;
    *(_OWORD *)(v12 + 40) = *(_OWORD *)a4;
    *((void *)v12 + 7) = *(void *)(a4 + 16);
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)a4 = 0;
    std::__tree<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::__map_value_compare<os_eligibility_domain_t,std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::less<os_eligibility_domain_t>,true>,std::allocator<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>>>::__insert_node_at(a1, (uint64_t)v10, v8, (uint64_t *)v12);
    return (uint64_t **)v12;
  }
  return v10;
}

uint64_t *std::__tree<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::__map_value_compare<os_eligibility_domain_t,std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::less<os_eligibility_domain_t>,true>,std::allocator<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  char v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  Class result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      id v3 = (uint64_t *)v2[2];
      id v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (int v8 = *(unsigned __int8 *)(v7 + 24), v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            unint64_t v9 = (uint64_t **)a2[2];
          }
          else
          {
            unint64_t v9 = (uint64_t **)v2[1];
            uint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              id v3 = (uint64_t *)v2[2];
            }
            void v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            char *v9 = v2;
            v2[2] = (uint64_t)v9;
            id v3 = v9[2];
            uint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *id v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), char v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          *uint64_t v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            id v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          id v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        *uint64_t v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      unsigned char *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::__tree<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::__map_value_compare<os_eligibility_domain_t,std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::less<os_eligibility_domain_t>,true>,std::allocator<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::__map_value_compare<os_eligibility_domain_t,std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::less<os_eligibility_domain_t>,true>,std::allocator<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::__map_value_compare<os_eligibility_domain_t,std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::less<os_eligibility_domain_t>,true>,std::allocator<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>>>::destroy(a1, a2[1]);
    id v4 = (void *)a2[5];
    if (v4)
    {
      a2[6] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA418];
  uint64_t v3 = *MEMORY[0x1E4FBA418];
  *(void *)a1 = *MEMORY[0x1E4FBA418];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x18530EAC0](a1 + 112);
  return a1;
}

void *std::string::basic_string[abi:nn180100](void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    int v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    int v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

uint64_t std::optional<LaunchServices::EligibilityPredicateEvaluation::Predicate>::emplace[abi:nn180100]<LaunchServices::EligibilityPredicateEvaluation::Predicate,void>(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    std::__tree<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::__map_value_compare<os_eligibility_domain_t,std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::less<os_eligibility_domain_t>,true>,std::allocator<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>>>::destroy(a1, *(void **)(a1 + 8));
    *(unsigned char *)(a1 + 24) = 0;
  }
  *(void *)a1 = *a2;
  id v4 = a2 + 1;
  uint64_t v5 = a2[1];
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = a1 + 8;
  uint64_t v7 = a2[2];
  *(void *)(a1 + 16) = v7;
  if (v7)
  {
    *(void *)(v5 + 16) = v6;
    *a2 = v4;
    *id v4 = 0;
    a2[2] = 0;
  }
  else
  {
    *(void *)a1 = v6;
  }
  *(unsigned char *)(a1 + 24) = 1;
  return a1;
}

void sub_1829CFC2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void LaunchServices::Database::Context::~Context(LaunchServices::Database::Context *this)
{
  uint64_t v2 = *(void ***)this;
  if (v2 && *((unsigned char *)this + 16)) {
    _LSContextDestroy(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  *(void *)this = 0;
  *((void *)this + 1) = 0;

  *((unsigned char *)this + 16) = 0;
  id v4 = (void *)*((void *)this + 3);
  *((void *)this + 3) = 0;
}

void sub_1829CFCA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829D0424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::~__hash_table((uint64_t)&a53);
  *(void *)(v55 - 256) = &a46;
  std::vector<std::pair<unsigned int,NSUUID * {__strong}>>::__destroy_vector::operator()[abi:nn180100]((void ***)(v55 - 256));

  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a49);
  _Unwind_Resume(a1);
}

void sub_1829D05F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829D064C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829D06A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829D0704(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829D074C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829D086C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829D0A28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829D0C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a27, 8);

  _Unwind_Resume(a1);
}

void sub_1829D0DEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829D0FD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<std::pair<unsigned int,NSUUID * {__strong}>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (id *)**a1;
  if (v2)
  {
    id v4 = (id *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 2;

        id v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<std::pair<unsigned int,NSUUID * {__strong}>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,LSApplicationRecord * {__strong}>>(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v12 = (void *)(a1 + 16);
  uint64_t v10 = operator new(0x20uLL);
  *uint64_t v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *(_DWORD *)a3;
  uint64_t v13 = *(void *)(a3 + 8);
  *(void *)(a3 + 8) = 0;
  v10[3] = v13;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    BOOL v16 = 1;
    if (v7 >= 3) {
      BOOL v16 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v7);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>(a1, v19);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *uint64_t v10 = *v21;
LABEL_38:
    void *v21 = v10;
    goto LABEL_39;
  }
  *uint64_t v10 = *v12;
  *uint64_t v12 = v10;
  *(void *)(v20 + 8 * v3) = v12;
  if (*v10)
  {
    unint64_t v22 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v22 >= v7) {
        v22 %= v7;
      }
    }
    else
    {
      v22 &= v7 - 1;
    }
    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_1829D131C(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,void *>>>::operator()[abi:nn180100](v2, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,void *>>>::operator()[abi:nn180100](uint64_t a1, id *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
  }
  else if (!a2)
  {
    return;
  }

  operator delete(a2);
}

void sub_1829D147C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829D1580(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829D1618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1829D16C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829D197C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a17);
  _Unwind_Resume(a1);
}

void sub_1829D1A48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1829D1B98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829D1CF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829D1FF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829D2180(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829D22E0(_Unwind_Exception *a1)
{
  unint64_t v7 = v5;

  _Unwind_Resume(a1);
}

void sub_1829D24A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829D26E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829D2850(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829D29D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829D2BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_1829D2CB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

Class initUMUserPersonaAttributes(void)
{
  if (!UserManagementLibrary(void)::frameworkLibrary) {
    UserManagementLibrary(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/UserManagement.framework/UserManagement", 2);
  }
  Class result = objc_getClass("UMUserPersonaAttributes");
  classUMUserPersonaAttributes = (uint64_t)result;
  getUMUserPersonaAttributesClass Class = (uint64_t (*)(void))UMUserPersonaAttributesFunction;
  return result;
}

{
  Class result;

  if (!UserManagementLibrary(void)::frameworkLibrary) {
    UserManagementLibrary(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/UserManagement.framework/UserManagement", 2);
  }
  Class result = objc_getClass("UMUserPersonaAttributes");
  classUMUserPersonaAttributes = (uint64_t)result;
  getUMUserPersonaAttributesClass Class = (uint64_t (*)(void))UMUserPersonaAttributesFunction;
  return result;
}

id UMUserPersonaAttributesFunction(void)
{
  return (id)classUMUserPersonaAttributes;
}

{
  return (id)classUMUserPersonaAttributes;
}

void sub_1829D2DB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829D2E70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSAppsAnalyticsStartListening()
{
  _LSAssertRunningInServer((uint64_t)"void _LSAppsAnalyticsStartListening()");
  if ([(id)__LSDefaultsGetSharedInstance() isUserServer]
    && ([(id)__LSDefaultsGetSharedInstance() isLightweightSystemServer] & 1) == 0
    && (CoreAnalyticsLibrary(void)::frameworkLibrary
     || (CoreAnalyticsLibrary(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/CoreAnalytics.framework/CoreAnalytics", 2)) != 0))
  {
    xpc_object_t xdict = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_string(xdict, (const char *)*MEMORY[0x1E4F142C8], (const char *)*MEMORY[0x1E4F142E0]);
    uint64_t v1 = (void *)CFPreferencesCopyValue(@"LSDefaultAppsReportingInterval", (CFStringRef)*MEMORY[0x1E4F1D3B8], (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
    if (v1 && _NSIsNSNumber())
    {
      int64_t v2 = [v1 unsignedLongLongValue];
      unint64_t v3 = (const char *)*MEMORY[0x1E4F141C8];
    }
    else
    {
      unint64_t v3 = (const char *)*MEMORY[0x1E4F141C8];
      int64_t v2 = *MEMORY[0x1E4F14228];
    }
    xpc_dictionary_set_int64(xdict, v3, v2);
    xpc_activity_register("com.apple.launchservices.systemapps.analytics", xdict, &__block_literal_global_3);
  }
  else
  {
    uint64_t v0 = _LSDefaultLog();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)stat buf = 0;
      _os_log_impl(&dword_182959000, v0, OS_LOG_TYPE_DEFAULT, "CoreAnalytics library is not available.", buf, 2u);
    }
  }
}

void sub_1829D3024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1829D31F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSNoteSystemAppInstallOrUninstall(uint64_t a1, unsigned int a2)
{
  unint64_t v3 = [NSString stringWithFormat:@"com.apple.LaunchServices.systemAppRemoval.%@", a1];
  softLinkADClientAddValueForScalarKey(v3, a2);
}

void sub_1829D32A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL ___ZN14LaunchServices13AppsAnalyticsL14handleActivityEPU24objcproto13OS_xpc_object8NSObject_block_invoke(uint64_t a1)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = _LSDefaultLog();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)stat buf = 0;
    _os_log_impl(&dword_182959000, v1, OS_LOG_TYPE_DEFAULT, "Capturing default apps analytics.", buf, 2u);
  }

  int64_t v2 = _LSDefaultLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)stat buf = 0;
    _os_log_impl(&dword_182959000, v2, OS_LOG_TYPE_DEFAULT, "Fetching current apps analytics state", buf, 2u);
  }

  id v78 = 0;
  __int16 v75 = 0;
  id v76 = 0;
  char v77 = 0;
  +[_LSDServiceDomain defaultServiceDomain]();
  unint64_t v3 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  id v4 = (LaunchServices::AppsAnalytics *)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v75, v3, 0);

  if (v4)
  {
    id v5 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    uint64_t v7 = LaunchServices::AppsAnalytics::getBundleIdentifierToHandleURLScheme(v4, (LSContext *)@"https", v6);
    if (v7)
    {
      objc_msgSend(v5, "setObject:forKeyedSubscript:", v7, @"webbrowser", v7);
    }
    else
    {
      uint64_t v13 = [[LSApplicationRecord alloc] initWithBundleIdentifier:@"com.apple.mobilesafari", 0, 0, 0 allowPlaceholder error];
      if (v13) {
        [@"com.apple.mobilesafari" stringByAppendingString:@" - restricted"];
      }
      else {
      float v14 = [@"com.apple.mobilesafari" stringByAppendingString:@" - deleted"];
      }
      [v5 setObject:v14 forKeyedSubscript:@"webbrowser"];
    }
    uint64_t v15 = LaunchServices::AppsAnalytics::getBundleIdentifierToHandleURLScheme(v4, (LSContext *)@"mailto", v8);
    long long v57 = (void *)v15;
    if (v15)
    {
      [v5 setObject:v15 forKeyedSubscript:@"mailclient"];
    }
    else
    {
      BOOL v16 = [[LSApplicationRecord alloc] initWithBundleIdentifier:@"com.apple.mobilemail" allowPlaceholder:0 error:0];
      if (v16) {
        [@"com.apple.mobilemail" stringByAppendingString:@" - restricted"];
      }
      else {
      unint64_t v17 = [@"com.apple.mobilemail" stringByAppendingString:@" - deleted"];
      }
      [v5 setObject:v17 forKeyedSubscript:@"mailclient"];
    }
    softLinkAnalyticsSendEvent(@"com.apple.LaunchServices.DefaultApps", v5);
    int v60 = objc_alloc_init(MEMORY[0x1E4F1CA60]);

    v74[0] = MEMORY[0x1E4F143A8];
    v74[1] = 3221225472;
    v74[2] = ___ZN14LaunchServices13AppsAnalyticsL16sendCurrentStateEv_block_invoke;
    v74[3] = &__block_descriptor_40_e110_v24__0r__LSDefaultAppCategoryInfo_Q____CFString_____CFString_Q____LSDefaultAppCategorySubordinateClaim_Q_8_B16l;
    v74[4] = v4;
    LSEnumerateDefaultAppCategories((uint64_t)v74);
    *(void *)stat buf = 0;
    unint64_t v18 = +[LSMarketplacesPreferences currentPreferencesWithError:buf];
    id v19 = *(id *)buf;
    if (v18)
    {
      uint64_t v20 = [v18 preferredMarketplaces];
      uint64_t v21 = [v20 firstObject];

      if (v21)
      {
        if ([v21 hasPrefix:@"com.apple."]) {
          unint64_t v22 = &unk_1ECB43258;
        }
        else {
          unint64_t v22 = &unk_1ECB43270;
        }
      }
      else
      {
        unint64_t v22 = &unk_1ECB432A0;
      }
    }
    else
    {
      unint64_t v22 = &unk_1ECB43288;
    }
    v79[0] = @"DefaultAppCategorization";
    v80[0] = v22;
    id v23 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v80 forKeys:v79 count:1];
    softLinkAnalyticsSendEvent(@"com.apple.LaunchServices.DefaultAppCategory.Marketplace", v23);

    id v61 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
    long long v72 = 0u;
    long long v73 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    id v24 = +[LSApplicationRecord enumeratorWithOptions:0];
    uint64_t v25 = [v24 countByEnumeratingWithState:&v70 objects:buf count:16];
    if (v25)
    {
      uint64_t v26 = *(void *)v71;
      do
      {
        for (uint64_t i = 0; i != v25; ++i)
        {
          if (*(void *)v71 != v26) {
            objc_enumerationMutation(v24);
          }
          uint64_t v28 = [*(id *)(*((void *)&v70 + 1) + 8 * i) bundleIdentifier];
          [v61 addObject:v28];
        }
        uint64_t v25 = [v24 countByEnumeratingWithState:&v70 objects:buf count:16];
      }
      while (v25);
    }

    id v29 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    id v30 = +[LSApplicationRecord enumeratorWithOptions:64];
    uint64_t v31 = [v30 countByEnumeratingWithState:&v66 objects:v80 count:16];
    if (v31)
    {
      uint64_t v32 = *(void *)v67;
      do
      {
        for (uint64_t j = 0; j != v31; ++j)
        {
          if (*(void *)v67 != v32) {
            objc_enumerationMutation(v30);
          }
          long long v34 = *(void **)(*((void *)&v66 + 1) + 8 * j);
          long long v35 = [v34 bundleIdentifier];
          [v29 setObject:v34 forKeyedSubscript:v35];
        }
        uint64_t v31 = [v30 countByEnumeratingWithState:&v66 objects:v80 count:16];
      }
      while (v31);
    }

    long long v64 = 0u;
    long long v65 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    obuint64_t j = +[LSApplicationRecord systemPlaceholderEnumerator];
    uint64_t v36 = [obj countByEnumeratingWithState:&v62 objects:v79 count:16];
    if (v36)
    {
      uint64_t v37 = *(void *)v63;
      do
      {
        for (uint64_t k = 0; k != v36; ++k)
        {
          if (*(void *)v63 != v37) {
            objc_enumerationMutation(obj);
          }
          long long v39 = *(void **)(*((void *)&v62 + 1) + 8 * k);
          uint64_t v40 = [NSNumber numberWithInt:2];
          stat v41 = [v39 bundleIdentifier];
          if ([v61 containsObject:v41])
          {
            uint64_t v42 = 1;
          }
          else
          {
            id v43 = [v29 objectForKeyedSubscript:v41];
            BOOL v44 = v43 == 0;

            if (v44) {
              goto LABEL_54;
            }
            __int16 v45 = [v29 objectForKeyedSubscript:v41];
            long long v46 = [v45 applicationState];
            uint64_t v47 = [v46 installType];

            if ((unint64_t)(v47 - 7) >= 3) {
              goto LABEL_54;
            }
            uint64_t v42 = dword_182AF8C88[v47 - 7];
          }
          uint64_t v48 = [NSNumber numberWithInt:v42];

          uint64_t v40 = (void *)v48;
LABEL_54:
          __int16 v49 = [v41 componentsSeparatedByString:@"."];
          uint64_t v50 = [v49 lastObject];
          int v51 = [v50 isEqualToString:@"watchkitapp"];

          if (v51) {
            objc_msgSend(v49, "objectAtIndex:", objc_msgSend(v49, "count") - 2);
          }
          else {
          uint64_t v52 = [v49 lastObject];
          }
          [v60 setObject:v40 forKeyedSubscript:v52];
        }
        uint64_t v36 = [obj countByEnumeratingWithState:&v62 objects:v79 count:16];
      }
      while (v36);
    }

    softLinkAnalyticsSendEvent(@"com.apple.LaunchServices.SystemApplicationInstallStatusV2", v60);
    unint64_t v9 = v60;
  }
  else
  {
    unint64_t v9 = _LSDefaultLog();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      +[_LSDServiceDomain defaultServiceDomain]();
      uint64_t v10 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
      uint64_t v11 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v75, v10, 0);

      if (v11) {
        id v12 = 0;
      }
      else {
        id v12 = v78;
      }
      *(_DWORD *)stat buf = 138412290;
      *(void *)&uint8_t buf[4] = v12;
      _os_log_error_impl(&dword_182959000, v9, OS_LOG_TYPE_ERROR, "Error getting LS database during analytics: %@", buf, 0xCu);
    }
  }

  if (v75 && v77) {
    _LSContextDestroy(v75);
  }
  id v53 = v76;
  __int16 v75 = 0;
  id v76 = 0;

  char v77 = 0;
  id v54 = v78;
  id v78 = 0;

  return xpc_activity_set_state(*(xpc_activity_t *)(a1 + 32), 5);
}

void sub_1829D3B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a45);
  _Unwind_Resume(a1);
}

id LaunchServices::AppsAnalytics::getBundleIdentifierToHandleURLScheme(LaunchServices::AppsAnalytics *this, LSContext *a2, NSString *a3)
{
  int v3 = (int)this;
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v4 = a2;
  int v9 = 0;
  uint64_t v10 = 0;
  int v11 = 0;
  id v13 = 0;
  id v14 = 0;
  uint64_t v12 = 0;
  if (_LSGetBindingForNodeOrSchemeOrUTI(v3, 0, (LaunchServices::BindingEvaluator *)v4, 0, 0, 14, 0, 0, (uint64_t)&v9))BOOL v5 = 1; {
  else
  }
    BOOL v5 = v10 == 0;
  if (v5)
  {
    unint64_t v6 = _LSDefaultLog();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)stat buf = 138412290;
      BOOL v16 = v4;
      _os_log_impl(&dword_182959000, v6, OS_LOG_TYPE_INFO, "No default app found for scheme %@, not including in analytics.", buf, 0xCu);
    }

    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = (void *)_CSStringCopyCFString();
  }

  return v7;
}

void sub_1829D3ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void ___ZN14LaunchServices13AppsAnalyticsL16sendCurrentStateEv_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  int v3 = (uint64_t *)(a2 + 8);
  LaunchServices::BindingEvaluator::CreateWithUTI(*(LaunchServices::BindingEvaluator **)(a2 + 8), 0, (LaunchServices::BindingEvaluator *)v18);
  LaunchServices::BindingEvaluator::getBestBinding((LaunchServices::BindingEvaluator *)v18, (uint64_t *)&v13);
  id v4 = 0;
  BOOL v5 = v4;
  if (v17)
  {
    if (v14 && (*(unsigned char *)(v14 + 164) & 1) != 0) {
      unint64_t v6 = &unk_1ECB43258;
    }
    else {
      unint64_t v6 = &unk_1ECB43270;
    }
    goto LABEL_13;
  }
  uint64_t v7 = [v4 domain];
  if ([v7 isEqual:*MEMORY[0x1E4F28760]])
  {
    BOOL v8 = [v5 code] == -10814;

    if (v8)
    {
      unint64_t v6 = &unk_1ECB432A0;
      goto LABEL_13;
    }
  }
  else
  {
  }
  int v9 = _LSDefaultLog();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
    ___ZN14LaunchServices13AppsAnalyticsL16sendCurrentStateEv_block_invoke_cold_1(v3, (uint64_t)v5, v9);
  }

  unint64_t v6 = &unk_1ECB43288;
LABEL_13:
  if (v17)
  {
  }
  uint64_t v10 = *(void **)(a2 + 16);
  uint64_t v12 = @"DefaultAppCategorization";
  id v13 = v6;
  int v11 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v13 forKeys:&v12 count:1];
  softLinkAnalyticsSendEvent(v10, v11);

  LaunchServices::BindingEvaluator::~BindingEvaluator((LaunchServices::BindingEvaluator *)v18);
}

void sub_1829D40BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, char a11, ...)
{
  va_start(va, a11);
  if (a11)
  {
  }
  LaunchServices::BindingEvaluator::~BindingEvaluator((LaunchServices::BindingEvaluator *)va);
  _Unwind_Resume(a1);
}

void initAnalyticsSendEvent(void *a1, void *a2)
{
  id v6 = a1;
  id v3 = a2;
  id v4 = (void *)CoreAnalyticsLibrary(void)::frameworkLibrary;
  if (!CoreAnalyticsLibrary(void)::frameworkLibrary)
  {
    id v4 = dlopen("/System/Library/PrivateFrameworks/CoreAnalytics.framework/CoreAnalytics", 2);
    CoreAnalyticsLibrary(void)::frameworkLibrary = (uint64_t)v4;
  }
  BOOL v5 = (uint64_t (*)())dlsym(v4, "AnalyticsSendEvent");
  softLinkAnalyticsSendEvent = v5;
  if (v5) {
    ((void (*)(id, id))v5)(v6, v3);
  }
}

{
  id v3;
  void *v4;
  uint64_t (*v5)();
  id v6;
  uint64_t vars8;

  id v6 = a1;
  id v3 = a2;
  id v4 = (void *)CoreAnalyticsLibrary_frameworkLibrary;
  if (!CoreAnalyticsLibrary_frameworkLibrary)
  {
    id v4 = dlopen("/System/Library/PrivateFrameworks/CoreAnalytics.framework/CoreAnalytics", 2);
    CoreAnalyticsLibrary_frameworkLibrary = (uint64_t)v4;
  }
  BOOL v5 = (uint64_t (*)())dlsym(v4, "AnalyticsSendEvent");
  softLinkAnalyticsSendEvent[0] = v5;
  if (v5) {
    ((void (*)(id, id))v5)(v6, v3);
  }
}

void sub_1829D41BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t initADClientAddValueForScalarKey(const __CFString *a1, uint64_t a2)
{
  id v4 = (void *)AggregateDictionaryLibrary(void)::frameworkLibrary;
  if (!AggregateDictionaryLibrary(void)::frameworkLibrary)
  {
    id v4 = dlopen("/System/Library/PrivateFrameworks/AggregateDictionary.framework/AggregateDictionary", 2);
    AggregateDictionaryLibrary(void)::frameworkLibrary = (uint64_t)v4;
  }
  BOOL v5 = (uint64_t (*)(const __CFString *, uint64_t))dlsym(v4, "ADClientAddValueForScalarKey");
  softLinkADClientAddValueForScalarKey = v5;

  return v5(a1, a2);
}

uint64_t __Block_byref_object_copy__6(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(result + 48) = v2;
  return result;
}

id init_ISPrimaryIconDataForApplicationProxy(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = a1;
  id v6 = (void *)IconServicesLibrary_frameworkLibrary;
  if (!IconServicesLibrary_frameworkLibrary)
  {
    id v6 = dlopen("/System/Library/PrivateFrameworks/IconServices.framework/IconServices", 2);
    IconServicesLibrary_frameworkLibrary = (uint64_t)v6;
  }
  softLink_ISPrimaryIconDataForApplicationProxy = (uint64_t (*)())dlsym(v6, "_ISPrimaryIconDataForApplicationProxy");
  uint64_t v7 = ((void (*)(id, uint64_t, uint64_t))softLink_ISPrimaryIconDataForApplicationProxy)(v5, a2, a3);

  return v7;
}

id init_ISIconDataForResourceProxy(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = a1;
  id v6 = (void *)IconServicesLibrary_frameworkLibrary;
  if (!IconServicesLibrary_frameworkLibrary)
  {
    id v6 = dlopen("/System/Library/PrivateFrameworks/IconServices.framework/IconServices", 2);
    IconServicesLibrary_frameworkLibrary = (uint64_t)v6;
  }
  softLink_ISIconDataForResourceProxy[0] = (uint64_t (*)())dlsym(v6, "_ISIconDataForResourceProxy");
  uint64_t v7 = ((void (*)(id, uint64_t, uint64_t))softLink_ISIconDataForResourceProxy[0])(v5, a2, a3);

  return v7;
}

{
  id v5;
  void *v6;
  void *v7;
  uint64_t vars8;

  id v5 = a1;
  id v6 = (void *)IconServicesLibrary(void)::frameworkLibrary;
  if (!IconServicesLibrary(void)::frameworkLibrary)
  {
    id v6 = dlopen("/System/Library/PrivateFrameworks/IconServices.framework/IconServices", 2);
    IconServicesLibrary(void)::frameworkLibrary = (uint64_t)v6;
  }
  softLink_ISIconDataForResourceProxy[0] = (uint64_t (*)())dlsym(v6, "_ISIconDataForResourceProxy");
  uint64_t v7 = ((void (*)(id, uint64_t, uint64_t))softLink_ISIconDataForResourceProxy[0])(v5, a2, a3);

  return v7;
}

void sub_1829D622C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829D64C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829D65F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1829D6694(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829D6754(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829D6A48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829D6B70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829D6CB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_DWORD *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,unsigned int const*,unsigned int const*,std::back_insert_iterator<std::vector<unsigned int>>,0>(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  id v3 = a1;
  uint64_t v6 = a3;
  if (a1 == a2) {
    return a1;
  }
  id v4 = a2;
  do
    std::back_insert_iterator<std::vector<unsigned int>>::operator=[abi:nn180100](&v6, v3++);
  while (v3 != v4);
  return v4;
}

uint64_t *std::back_insert_iterator<std::vector<unsigned int>>::operator=[abi:nn180100](uint64_t *a1, _DWORD *a2)
{
  uint64_t v4 = *a1;
  id v5 = *(_DWORD **)(*a1 + 8);
  uint64_t v6 = (void *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    BOOL v8 = *(_DWORD **)v4;
    uint64_t v9 = ((uint64_t)v5 - *(void *)v4) >> 2;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62) {
      abort();
    }
    uint64_t v11 = *v6 - (void)v8;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      id v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)v6, v12);
      BOOL v8 = *(_DWORD **)v4;
      id v5 = *(_DWORD **)(v4 + 8);
    }
    else
    {
      id v13 = 0;
    }
    uint64_t v14 = &v13[4 * v9];
    id v15 = &v13[4 * v12];
    *(_DWORD *)uint64_t v14 = *a2;
    uint64_t v7 = v14 + 4;
    while (v5 != v8)
    {
      int v16 = *--v5;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(void *)uint64_t v4 = v14;
    *(void *)(v4 + 8) = v7;
    *(void *)(v4 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    _DWORD *v5 = *a2;
    uint64_t v7 = v5 + 1;
  }
  *(void *)(v4 + 8) = v7;
  return a1;
}

void OUTLINED_FUNCTION_0_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void sub_1829D6FE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829D71E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829D74B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829D79C4(_Unwind_Exception *a1)
{
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)(v2 - 176));
  _Unwind_Resume(a1);
}

void sub_1829D7BB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829D7CE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829D7E3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829D7EC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829D8048(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829D8438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1829D8718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose((const void *)(v29 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_1829D8B60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(a1);
}

void sub_1829D8D60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829D8E6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829D9018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  id v27 = v26;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1829D9130(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829D91B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1829D9428(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);

  _Unwind_Resume(a1);
}

void sub_1829D9560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1829D961C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1829D9A7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829D9E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_1829DA3A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__671(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__672(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1829DA6B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829DA758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1829DA804(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829DA8CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829DA934(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829DA99C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829DAB1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829DAD1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829DB090(_Unwind_Exception *a1)
{
  id v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1829DB314(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829DB494(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829DB5E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSApplicationRecordPersistentIdentifierGetSequenceNumberInternal(void *a1)
{
  if ((unint64_t)[a1 length] <= 0x23)
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"uint64_t _LSApplicationRecordPersistentIdentifierGetSequenceNumberInternal(const __strong LSPersistentIdentifier _Nonnull)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"LSApplicationRecord.mm", 2924, @"persistent identifier of length %zu is too short to extract sequence number!", objc_msgSend(a1, "length"));
  }
  return *(void *)([a1 bytes] + 28);
}

void sub_1829DB6A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829DB6FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829DB9FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829DBAB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829DBC14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829DBCFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829DBEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  _Block_object_dispose(&a23, 8);

  _Block_object_dispose((const void *)(v28 - 64), 8);
  _Unwind_Resume(a1);
}

id _LSGetApplicationExtensionDiagnosticDescriptionForBundle(uint64_t a1, unsigned int a2)
{
  id v3 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E4F28E78]), "initWithFormat:", @"plugins for bundle %llx:", a2);
  _CSArrayEnumerateAllValues();

  return v3;
}

void sub_1829DC040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1829DC1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a9);
  _Unwind_Resume(a1);
}

void ___ZL11_LSIconsLogv_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.launchservices", "icons");
  uint64_t v1 = (void *)_LSIconsLog(void)::log;
  _LSIconsLog(void)::log = (uint64_t)v0;
}

uint64_t initMobileInstallationCopyAppMetadata(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = (void *)MobileInstallationLibrary(void)::frameworkLibrary;
  if (!MobileInstallationLibrary(void)::frameworkLibrary)
  {
    uint64_t v4 = dlopen("/System/Library/PrivateFrameworks/MobileInstallation.framework/MobileInstallation", 2);
    MobileInstallationLibrary(void)::frameworkLibrary = (uint64_t)v4;
  }
  softLinkMobileInstallationCopyAppMetadata[0] = (uint64_t (*)())dlsym(v4, "MobileInstallationCopyAppMetadata");
  uint64_t v5 = ((uint64_t (*)(id, uint64_t))softLinkMobileInstallationCopyAppMetadata[0])(v3, a2);

  return v5;
}

void sub_1829DC300(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL56_LSGetApplicationExtensionDiagnosticDescriptionForBundleP9LSContextjPK12LSBundleDataPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, uint64_t a2, unsigned int a3)
{
  objc_msgSend(*(id *)(a1 + 32), "appendFormat:", @"\nplugin unit %llx", a3);
  if (_LSGetPlugin(**(void **)(a1 + 40), a3))
  {
    uint64_t v5 = (void *)_CSStringCopyCFString();
    uint64_t v6 = v5;
    if (v5) {
      id v7 = v5;
    }
    else {
      id v7 = (id)_CSStringCopyCFString();
    }
    id v10 = v7;

    uint64_t v9 = (void *)_CSStringCopyCFString();
    [*(id *)(a1 + 32) appendFormat:@" with bundleID \"%@\" is for EPID \"%@\"", v10, v9];
  }
  else
  {
    BOOL v8 = *(void **)(a1 + 32);
    [v8 appendFormat:@" was not found in the database!"];
  }
}

void sub_1829DC4B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::__emplace_unique_key_args<unsigned int,unsigned int &,LSApplicationRecordUpdateAvailability>(uint64_t a1, unsigned int *a2, _DWORD *a3, void *a4)
{
  unint64_t v8 = *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v9 <= v8) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      unint64_t v12 = *v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (*((_DWORD *)v12 + 4) == v8) {
              return v12;
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4) {
              break;
            }
          }
          unint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  unint64_t v12 = operator new(0x20uLL);
  *unint64_t v12 = 0;
  v12[1] = v8;
  *((_DWORD *)v12 + 4) = *a3;
  v12[3] = *a4;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *unint64_t v12 = *v21;
LABEL_38:
    void *v21 = v12;
    goto LABEL_39;
  }
  *unint64_t v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v20 + 8 * v4) = a1 + 16;
  if (*v12)
  {
    unint64_t v22 = *(void *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }
    else
    {
      v22 &= v9 - 1;
    }
    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_1829DC6F0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::__hash_table(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *(void *)__n128 result = v2;
  *(void *)(result + 8) = a2[1];
  a2[1] = 0;
  uint64_t v5 = a2[2];
  id v3 = a2 + 2;
  uint64_t v4 = v5;
  *(void *)(result + 16) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 16;
    *id v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,+[LSApplicationRecord(UserActivity) applicationRecordsForUserActivityType:limit:error:]::$_0 &,std::pair<unsigned int,LSBundleData const*> *,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void ****a6)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,+[LSApplicationRecord(UserActivity) applicationRecordsForUserActivityType:a3 limit:a4 error:a6];
  uint64_t result = _LSBundleCompareForActivityContinuationSuitability(***a6, *(void *)(a5 + 8), *(void *)(a4 + 8));
  if (result == -1)
  {
    int v13 = *(_DWORD *)a4;
    *(_DWORD *)a4 = *(_DWORD *)a5;
    *(_DWORD *)a5 = v13;
    uint64_t v14 = *(void *)(a4 + 8);
    *(void *)(a4 + 8) = *(void *)(a5 + 8);
    *(void *)(a5 + 8) = v14;
    uint64_t result = _LSBundleCompareForActivityContinuationSuitability(***a6, *(void *)(a4 + 8), *(void *)(a3 + 8));
    if (result == -1)
    {
      int v15 = *(_DWORD *)a3;
      *(_DWORD *)a3 = *(_DWORD *)a4;
      *(_DWORD *)a4 = v15;
      uint64_t v16 = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = *(void *)(a4 + 8);
      *(void *)(a4 + 8) = v16;
      uint64_t result = _LSBundleCompareForActivityContinuationSuitability(***a6, *(void *)(a3 + 8), *(void *)(a2 + 8));
      if (result == -1)
      {
        int v17 = *(_DWORD *)a2;
        *(_DWORD *)a2 = *(_DWORD *)a3;
        *(_DWORD *)a3 = v17;
        uint64_t v18 = *(void *)(a2 + 8);
        *(void *)(a2 + 8) = *(void *)(a3 + 8);
        *(void *)(a3 + 8) = v18;
        uint64_t result = _LSBundleCompareForActivityContinuationSuitability(***a6, *(void *)(a2 + 8), *(void *)(a1 + 8));
        if (result == -1)
        {
          int v19 = *(_DWORD *)a1;
          *(_DWORD *)a1 = *(_DWORD *)a2;
          *(_DWORD *)a2 = v19;
          uint64_t v20 = *(void *)(a1 + 8);
          *(void *)(a1 + 8) = *(void *)(a2 + 8);
          *(void *)(a2 + 8) = v20;
        }
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,+[LSApplicationRecord(UserActivity) applicationRecordsForUserActivityType:limit:error:]::$_0 &,std::pair<unsigned int,LSBundleData const*> *>(int *a1, int *a2, int *a3, void ****a4)
{
  unint64_t v8 = (uint64_t *)(a2 + 2);
  unint64_t v9 = (uint64_t *)(a1 + 2);
  uint64_t v10 = _LSBundleCompareForActivityContinuationSuitability(***a4, *((void *)a2 + 1), *((void *)a1 + 1));
  uint64_t result = _LSBundleCompareForActivityContinuationSuitability(***a4, *((void *)a3 + 1), *v8);
  if (v10 == -1)
  {
    int v15 = *a1;
    if (result == -1)
    {
      *a1 = *a3;
      *a3 = v15;
    }
    else
    {
      *a1 = *a2;
      *a2 = v15;
      uint64_t v16 = *((void *)a1 + 1);
      *((void *)a1 + 1) = *((void *)a2 + 1);
      *((void *)a2 + 1) = v16;
      uint64_t result = _LSBundleCompareForActivityContinuationSuitability(***a4, *((void *)a3 + 1), v16);
      if (result != -1) {
        return result;
      }
      int v17 = *a2;
      *a2 = *a3;
      *a3 = v17;
      unint64_t v9 = v8;
    }
    unint64_t v8 = (uint64_t *)(a3 + 2);
    goto LABEL_10;
  }
  if (result == -1)
  {
    int v12 = *a2;
    *a2 = *a3;
    *a3 = v12;
    uint64_t v13 = *((void *)a2 + 1);
    *((void *)a2 + 1) = *((void *)a3 + 1);
    *((void *)a3 + 1) = v13;
    uint64_t result = _LSBundleCompareForActivityContinuationSuitability(***a4, *((void *)a2 + 1), *v9);
    if (result == -1)
    {
      int v14 = *a1;
      *a1 = *a2;
      *a2 = v14;
LABEL_10:
      uint64_t v18 = *v9;
      uint64_t *v9 = *v8;
      *unint64_t v8 = v18;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,+[LSApplicationRecord(UserActivity) applicationRecordsForUserActivityType:limit:error:]::$_0 &,std::pair<unsigned int,LSBundleData const*> *>(uint64_t a1, uint64_t a2, void ****a3)
{
  uint64_t v6 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (_LSBundleCompareForActivityContinuationSuitability(***a3, *(void *)(a2 - 8), *(void *)(a1 + 8)) == -1)
      {
        int v8 = *(_DWORD *)a1;
        *(_DWORD *)a1 = *(_DWORD *)(a2 - 16);
        *(_DWORD *)(a2 - 16) = v8;
        uint64_t v9 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = *(void *)(a2 - 8);
        *(void *)(a2 - 8) = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,+[LSApplicationRecord(UserActivity) applicationRecordsForUserActivityType:limit:error:]::$_0 &,std::pair<unsigned int,LSBundleData const*> *>((int *)a1, (int *)(a1 + 16), (int *)(a2 - 16), a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,+[LSApplicationRecord(UserActivity) applicationRecordsForUserActivityType:a1 + 32 limit:a2 - 16 error:a3];
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,+[LSApplicationRecord(UserActivity) applicationRecordsForUserActivityType:limit:error:]::$_0 &,std::pair<unsigned int,LSBundleData const*> *,0>(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16, a3);
      return 1;
    default:
      uint64_t v10 = a1 + 32;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,+[LSApplicationRecord(UserActivity) applicationRecordsForUserActivityType:limit:error:]::$_0 &,std::pair<unsigned int,LSBundleData const*> *>((int *)a1, (int *)(a1 + 16), (int *)(a1 + 32), a3);
      uint64_t v11 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    if (_LSBundleCompareForActivityContinuationSuitability(***a3, *(void *)(v11 + 8), *(void *)(v10 + 8)) == -1)
    {
      int v14 = *(_DWORD *)v11;
      uint64_t v15 = *(void *)(v11 + 8);
      uint64_t v16 = v12;
      while (1)
      {
        uint64_t v17 = a1 + v16;
        *(_DWORD *)(v17 + 48) = *(_DWORD *)(a1 + v16 + 32);
        *(void *)(v17 + 56) = *(void *)(a1 + v16 + 40);
        if (v16 == -32) {
          break;
        }
        v16 -= 16;
        if (_LSBundleCompareForActivityContinuationSuitability(***a3, v15, *(void *)(v17 + 24)) != -1)
        {
          uint64_t v18 = a1 + v16 + 48;
          goto LABEL_12;
        }
      }
      uint64_t v18 = a1;
LABEL_12:
      *(_DWORD *)uint64_t v18 = v14;
      *(void *)(v18 + 8) = v15;
      if (++v13 == 8) {
        return v11 + 16 == a2;
      }
    }
    uint64_t v10 = v11;
    v12 += 16;
    v11 += 16;
    if (v11 == a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,+[LSApplicationRecord(UserActivity) applicationRecordsForUserActivityType:limit:error:]::$_0 &,std::pair<unsigned int,LSBundleData const*> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void ****a5)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,+[LSApplicationRecord(UserActivity) applicationRecordsForUserActivityType:limit:error:]::$_0 &,std::pair<unsigned int,LSBundleData const*> *>((int *)a1, (int *)a2, (int *)a3, a5);
  uint64_t result = _LSBundleCompareForActivityContinuationSuitability(***a5, *(void *)(a4 + 8), *(void *)(a3 + 8));
  if (result == -1)
  {
    int v11 = *(_DWORD *)a3;
    *(_DWORD *)a3 = *(_DWORD *)a4;
    *(_DWORD *)a4 = v11;
    uint64_t v12 = *(void *)(a3 + 8);
    *(void *)(a3 + 8) = *(void *)(a4 + 8);
    *(void *)(a4 + 8) = v12;
    uint64_t result = _LSBundleCompareForActivityContinuationSuitability(***a5, *(void *)(a3 + 8), *(void *)(a2 + 8));
    if (result == -1)
    {
      int v13 = *(_DWORD *)a2;
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(_DWORD *)a3 = v13;
      uint64_t v14 = *(void *)(a2 + 8);
      *(void *)(a2 + 8) = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = v14;
      uint64_t result = _LSBundleCompareForActivityContinuationSuitability(***a5, *(void *)(a2 + 8), *(void *)(a1 + 8));
      if (result == -1)
      {
        int v15 = *(_DWORD *)a1;
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(_DWORD *)a2 = v15;
        uint64_t v16 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a2 + 8) = v16;
      }
    }
  }
  return result;
}

void OUTLINED_FUNCTION_1_3(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x16u);
}

void LSNoteFirstBootForRestrictions()
{
  os_log_t v0 = _LSDefaultLog();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)stat buf = 0;
    _os_log_impl(&dword_182959000, v0, OS_LOG_TYPE_DEFAULT, "Clearing important app restriction state for boot", buf, 2u);
  }

  CFStringRef v1 = (const __CFString *)*MEMORY[0x1E4F1D3F0];
  CFStringRef v2 = (const __CFString *)*MEMORY[0x1E4F1D3C8];
  CFPreferencesSetValue(@"LSLastSeenImportantAppRestrictionStateKey", 0, @"com.apple.lsd.restrictionhardening", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
  if (!CFPreferencesSynchronize(@"com.apple.lsd.restrictionhardening", v1, v2))
  {
    id v3 = _LSDefaultLog();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl(&dword_182959000, v3, OS_LOG_TYPE_DEFAULT, "error synchronizing after clearing app restriction state!", v4, 2u);
    }
  }
}

void _applicationStateChangedCallback(uint64_t a1, void *a2)
{
  id v4 = a2;
  CFStringRef v2 = [v4 _MCRestrictionManager];
  [v2 invalidateSettings];

  id v3 = [v4 _MCRestrictionManager];
  [v3 invalidateRestrictions];

  [v4 clearAllValues];
}

id computeImportantBundleRestrictionState(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v18 = @"com.apple.news";
  id v3 = objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", &v18, 1, 0);
  uint64_t v4 = [v3 countByEnumeratingWithState:&v14 objects:v19 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v15;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v15 != v6) {
          objc_enumerationMutation(v3);
        }
        int v8 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        uint64_t v9 = objc_msgSend(NSNumber, "numberWithBool:", computeIsApplicationRestrictedWithMCStateProvider(v1, v8, 1));
        [v2 setObject:v9 forKeyedSubscript:v8];
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v14 objects:v19 count:16];
    }
    while (v5);
  }

  uint64_t v10 = NSNumber;
  MCFeatureNewsTodayAllowed = (void *)getMCFeatureNewsTodayAllowed();
  uint64_t v12 = [v10 numberWithInt:!isFeatureAllowed(MCFeatureNewsTodayAllowed)];
  [v2 setObject:v12 forKeyedSubscript:@"com.apple.news.widget"];

  return v2;
}

void saveImportantBundleRestrictionState(void *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = _LSDefaultLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 138543362;
    id v7 = v1;
    _os_log_impl(&dword_182959000, v2, OS_LOG_TYPE_DEFAULT, "saving important bundle restriction state %{public}@", (uint8_t *)&v6, 0xCu);
  }

  CFStringRef v3 = (const __CFString *)*MEMORY[0x1E4F1D3F0];
  CFStringRef v4 = (const __CFString *)*MEMORY[0x1E4F1D3C8];
  CFPreferencesSetValue(@"LSLastSeenImportantAppRestrictionStateKey", v1, @"com.apple.lsd.restrictionhardening", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
  if (!CFPreferencesSynchronize(@"com.apple.lsd.restrictionhardening", v3, v4))
  {
    uint64_t v5 = _LSDefaultLog();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v6) = 0;
      _os_log_impl(&dword_182959000, v5, OS_LOG_TYPE_DEFAULT, "error synchronizing after setting app restriction state!", (uint8_t *)&v6, 2u);
    }
  }
}

void sub_1829DE778(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_1829DE78C(_Unwind_Exception *a1)
{
}

void sub_1829DEA38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1829DEDCC(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_1829DEDE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  objc_end_catch();
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1829DF648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v35 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1829DF960(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_1829DF974(_Unwind_Exception *a1)
{
}

uint64_t MCEffectiveSettingsChangedNotificationFunction()
{
  return constantMCEffectiveSettingsChangedNotification;
}

Class initMCRestrictionManager()
{
  if (!ManagedConfigurationLibrary_frameworkLibrary) {
    ManagedConfigurationLibrary_frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/ManagedConfiguration.framework/ManagedConfiguration", 2);
  }
  Class result = objc_getClass("MCRestrictionManager");
  classMCRestrictionManager = (uint64_t)result;
  getMCRestrictionManagerClass[0] = (uint64_t (*)())MCRestrictionManagerFunction;
  return result;
}

id MCRestrictionManagerFunction()
{
  return (id)classMCRestrictionManager;
}

uint64_t MCFeatureMaximumAppsRatingFunction()
{
  return constantMCFeatureMaximumAppsRating;
}

uint64_t initMCFeatureRemovedSystemAppBundleIDs()
{
  os_log_t v0 = (void *)ManagedConfigurationLibrary_frameworkLibrary;
  if (!ManagedConfigurationLibrary_frameworkLibrary)
  {
    os_log_t v0 = dlopen("/System/Library/PrivateFrameworks/ManagedConfiguration.framework/ManagedConfiguration", 2);
    ManagedConfigurationLibrary_frameworkLibrary = (uint64_t)v0;
  }
  uint64_t result = *(void *)dlsym(v0, "MCFeatureRemovedSystemAppBundleIDs");
  constantMCFeatureRemovedSystemAppBundleIDs = result;
  getMCFeatureRemovedSystemAppBundleIDs[0] = MCFeatureRemovedSystemAppBundleIDsFunction;
  return result;
}

uint64_t MCFeatureRemovedSystemAppBundleIDsFunction()
{
  return constantMCFeatureRemovedSystemAppBundleIDs;
}

uint64_t initMCFeatureNewsTodayAllowed()
{
  os_log_t v0 = (void *)ManagedConfigurationLibrary_frameworkLibrary;
  if (!ManagedConfigurationLibrary_frameworkLibrary)
  {
    os_log_t v0 = dlopen("/System/Library/PrivateFrameworks/ManagedConfiguration.framework/ManagedConfiguration", 2);
    ManagedConfigurationLibrary_frameworkLibrary = (uint64_t)v0;
  }
  uint64_t result = *(void *)dlsym(v0, "MCFeatureNewsTodayAllowed");
  constantMCFeatureNewsTodayAllowed = result;
  getMCFeatureNewsTodayAllowed = MCFeatureNewsTodayAllowedFunction;
  return result;
}

uint64_t MCFeatureNewsTodayAllowedFunction()
{
  return constantMCFeatureNewsTodayAllowed;
}

uint64_t initMCFeatureIdentifierForAdvertisingAllowed()
{
  os_log_t v0 = (void *)ManagedConfigurationLibrary_frameworkLibrary;
  if (!ManagedConfigurationLibrary_frameworkLibrary)
  {
    os_log_t v0 = dlopen("/System/Library/PrivateFrameworks/ManagedConfiguration.framework/ManagedConfiguration", 2);
    ManagedConfigurationLibrary_frameworkLibrary = (uint64_t)v0;
  }
  uint64_t result = *(void *)dlsym(v0, "MCFeatureIdentifierForAdvertisingAllowed");
  constantMCFeatureIdentifierForAdvertisingAllowed = result;
  getMCFeatureIdentifierForAdvertisingAllowed[0] = MCFeatureIdentifierForAdvertisingAllowedFunction;
  return result;
}

uint64_t MCFeatureIdentifierForAdvertisingAllowedFunction()
{
  return constantMCFeatureIdentifierForAdvertisingAllowed;
}

uint64_t initMCFeatureLimitAdTrackingForced()
{
  os_log_t v0 = (void *)ManagedConfigurationLibrary_frameworkLibrary;
  if (!ManagedConfigurationLibrary_frameworkLibrary)
  {
    os_log_t v0 = dlopen("/System/Library/PrivateFrameworks/ManagedConfiguration.framework/ManagedConfiguration", 2);
    ManagedConfigurationLibrary_frameworkLibrary = (uint64_t)v0;
  }
  uint64_t result = *(void *)dlsym(v0, "MCFeatureLimitAdTrackingForced");
  constantMCFeatureLimitAdTrackingForced = result;
  getMCFeatureLimitAdTrackingForced[0] = MCFeatureLimitAdTrackingForcedFunction;
  return result;
}

uint64_t MCFeatureLimitAdTrackingForcedFunction()
{
  return constantMCFeatureLimitAdTrackingForced;
}

void sub_1829E0A68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829E0B70(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1829E0D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14)
{
  os_unfair_lock_unlock(v16);

  a14 = &a11;
  std::vector<std::shared_ptr<LaunchServices::PerThreadContext>>::__destroy_vector::operator()[abi:nn180100]((void ***)&a14);
  os_unfair_lock_unlock(v15);

  _Unwind_Resume(a1);
}

void **std::vector<std::shared_ptr<LaunchServices::PerThreadContext>>::push_back[abi:nn180100](char **a1, long long *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  id v7 = (char *)*(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = (v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      abort();
    }
    uint64_t v12 = v5 - (void)*a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    id v27 = result;
    long long v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<unsigned int,NSUUID * {__strong}>>>((uint64_t)result, v13);
    long long v16 = &v14[16 * v10];
    long long v17 = *a2;
    *(_OWORD *)long long v16 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    int v19 = *a1;
    uint64_t v18 = a1[1];
    if (v18 == *a1)
    {
      int64x2_t v22 = vdupq_n_s64((unint64_t)v18);
      uint64_t v20 = &v14[16 * v10];
    }
    else
    {
      uint64_t v20 = &v14[16 * v10];
      do
      {
        long long v21 = *((_OWORD *)v18 - 1);
        v18 -= 16;
        *((_OWORD *)v20 - 1) = v21;
        v20 -= 16;
        *(void *)uint64_t v18 = 0;
        *((void *)v18 + 1) = 0;
      }
      while (v18 != v19);
      int64x2_t v22 = *(int64x2_t *)a1;
    }
    uint64_t v9 = v16 + 16;
    *a1 = v20;
    a1[1] = v16 + 16;
    int64x2_t v25 = v22;
    id v23 = a1[2];
    a1[2] = &v14[16 * v15];
    uint64_t v26 = v23;
    uint64_t v24 = v22.i64[0];
    uint64_t result = std::__split_buffer<std::shared_ptr<LaunchServices::PerThreadContext>>::~__split_buffer((void **)&v24);
  }
  else
  {
    *(void *)id v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    *((void *)v7 + 1) = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 16;
  }
  a1[1] = v9;
  return result;
}

void sub_1829E0FAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  os_unfair_lock_unlock(v11);
  os_unfair_lock_unlock(v10);

  _Unwind_Resume(a1);
}

void sub_1829E111C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  os_unfair_lock_unlock(v10);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<LaunchServices::PerThreadContext>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1ECB176B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LaunchServices::PerThreadContext>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1ECB176B8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18530EAF0);
}

void std::vector<std::shared_ptr<LaunchServices::PerThreadContext>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  id v2 = *a1;
  if (*v2)
  {
    std::vector<std::shared_ptr<LaunchServices::PerThreadContext>>::__clear[abi:nn180100]((uint64_t *)v2);
    CFStringRef v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::shared_ptr<LaunchServices::PerThreadContext>>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    CFStringRef v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v4);
    }
  }
  a1[1] = v2;
}

void **std::__split_buffer<std::shared_ptr<LaunchServices::PerThreadContext>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::shared_ptr<LaunchServices::PerThreadContext>>::clear[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 16;
    CFStringRef v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:nn180100](v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

uint64_t std::__hash_table<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::__unordered_map_hasher<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::hash<_opaque_pthread_t *>,std::equal_to<_opaque_pthread_t *>,true>,std::__unordered_map_equal<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::equal_to<_opaque_pthread_t *>,std::hash<_opaque_pthread_t *>,true>,std::allocator<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::__unordered_map_hasher<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::hash<_opaque_pthread_t *>,std::equal_to<_opaque_pthread_t *>,true>,std::__unordered_map_equal<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::equal_to<_opaque_pthread_t *>,std::hash<_opaque_pthread_t *>,true>,std::allocator<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::__unordered_map_hasher<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::hash<_opaque_pthread_t *>,std::equal_to<_opaque_pthread_t *>,true>,std::__unordered_map_equal<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::equal_to<_opaque_pthread_t *>,std::hash<_opaque_pthread_t *>,true>,std::allocator<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>>>::__deallocate_node(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      CFStringRef v3 = (void *)*v2;
      CFStringRef v4 = (std::__shared_weak_count *)v2[4];
      if (v4) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void _LSServer_RefreshContentInFrameworkAtURL(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  _LSAssertRunningInServer((uint64_t)"void _LSServer_RefreshContentInFrameworkAtURL(NSURL *__strong, void (^__strong)(NSError *__strong))");
  id v13 = 0;
  unint64_t v5 = ((void (*)(void *, void *, uint64_t))softLinkMobileInstallationCopyFrameworkInfoForLaunchServices[0])(v3, 0, (uint64_t)&v13);
  id v6 = v13;
  if (v5)
  {
    id v7 = _LSServer_DatabaseExecutionContext();
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    void v9[2] = ___LSServer_RefreshContentInFrameworkAtURL_block_invoke;
    v9[3] = &unk_1E522C4D8;
    id v10 = v3;
    id v11 = v5;
    id v12 = v4;
    -[LSDBExecutionContext syncWrite:]((uint64_t)v7, v9);
  }
  else
  {
    uint64_t v8 = _LSInstallLog();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      _LSServer_RefreshContentInFrameworkAtURL_cold_1();
    }

    (*((void (**)(id, id))v4 + 2))(v4, v6);
  }
}

void sub_1829E1C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31)
{
  _Unwind_Resume(a1);
}

id __copy_helper_block_e8_40n6_8_8_s0(uint64_t a1, uint64_t a2)
{
  id result = *(id *)(a2 + 40);
  *(void *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_40n4_8_s0(uint64_t a1)
{
}

void _registerMIPluginDictionary(void *a1, void *a2)
{
  v31[1] = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  kdebug_trace();
  unint64_t v5 = [v3 objectForKey:*MEMORY[0x1E4F1CFF8]];
  id v6 = (void *)[v3 mutableCopy];
  id v7 = [v3 objectForKey:@"Entitlements"];
  uint64_t v8 = [v7 objectForKey:@"com.apple.developer.replace-plugin"];
  if (v8) {
    [v4 addObject:v8];
  }
  if ([v4 containsObject:v5]) {
    [v6 setObject:MEMORY[0x1E4F1CC38] forKey:@"LSHasOverride"];
  }
  id v9 = objc_alloc(MEMORY[0x1E4F1CB10]);
  id v10 = [v3 objectForKey:@"Path"];
  id v11 = (void *)[v9 initFileURLWithPath:v10 isDirectory:1];

  Unique = (const void *)_CFBundleCreateUnique();
  id v13 = [NSString stringWithFormat:@"LaunchServices: registering extension %@"];
  id v27 = v7;
  if (_LSLoggingQueue_onceToken != -1) {
    dispatch_once(&_LSLoggingQueue_onceToken, &__block_literal_global_1131);
  }
  long long v14 = _LSLoggingQueue_logQueue;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  _OWORD block[2] = ___LSSetCrashMessage_block_invoke;
  block[3] = &unk_1E522C268;
  id v29 = v13;
  id v15 = v13;
  dispatch_sync(v14, block);

  _LSLogStepStart(4, 0, v5, @"registering app extension", v16, v17, v18, v19, (uint64_t)v5);
  id v30 = v5;
  v31[0] = v6;
  uint64_t v20 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v31 forKeys:&v30 count:1];
  int v21 = _LSRegisterPluginWithInfo(v11, v20);

  _LSLogStepFinished(4, v21 == 0, v5, @"registered app extension", v22, v23, v24, v25, v26);
  if (Unique) {
    CFRelease(Unique);
  }
  kdebug_trace();
}

uint64_t _LSUnregisterAppWithBundleIDUsingContext(void *a1, unsigned int a2, _LSDatabase **a3, int *a4)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  BOOL v7 = (a2 & 1) == 0;
  BOOL v8 = (a2 & 2) == 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  uint64_t v41 = 0;
  memset(buf, 0, sizeof(buf));
  BOOL v9 = _LSBundleFindWithInfoAndNo_IOFilter((uint64_t)a3, 0, a1, 0, buf, 2, 1152, 0, 0, &v43, &v41, 0);
  id v10 = _LSInstallLog();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    if (v9) {
      id v11 = @"Found";
    }
    else {
      id v11 = @"No";
    }
    *(_DWORD *)stat buf = 138412546;
    *(void *)&uint8_t buf[4] = v11;
    *(_WORD *)&unsigned char buf[12] = 2112;
    *(void *)&buf[14] = a1;
    _os_log_impl(&dword_182959000, v10, OS_LOG_TYPE_DEFAULT, "%@ placeholder to remove for %@", buf, 0x16u);
  }

  memset(buf, 0, sizeof(buf));
  if (_LSBundleFindWithInfoAndNo_IOFilter((uint64_t)a3, 0, a1, 0, buf, 2, 128, 0, 0, (_DWORD *)&v43 + 1, &v42, 0))
  {
    BOOL v12 = 1;
  }
  else
  {
    memset(buf, 0, sizeof(buf));
    BOOL v12 = _LSBundleFindWithInfoAndNo_IOFilter((uint64_t)a3, 0, a1, 0, buf, 13, 128, 0, 0, (_DWORD *)&v43 + 1, &v42, 0);
  }
  int v13 = a2 & v8;
  long long v14 = _LSInstallLog();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    if (v12) {
      id v15 = @"Found";
    }
    else {
      id v15 = @"No";
    }
    *(_DWORD *)stat buf = 138412546;
    *(void *)&uint8_t buf[4] = v15;
    *(_WORD *)&unsigned char buf[12] = 2112;
    *(void *)&buf[14] = a1;
    _os_log_impl(&dword_182959000, v14, OS_LOG_TYPE_DEFAULT, "%@ app to remove for %@", buf, 0x16u);
  }

  if ((v13 & v9 & v12) == 1)
  {
    uint64_t v16 = _LSUnregisterBundle(a3, v43, 0);
    uint64_t v17 = _LSInstallLog();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = [NSNumber numberWithInt:v16 == 0];
      *(_DWORD *)stat buf = 138412546;
      *(void *)&uint8_t buf[4] = a1;
      *(_WORD *)&unsigned char buf[12] = 2112;
      *(void *)&buf[14] = v18;
      _os_log_impl(&dword_182959000, v17, OS_LOG_TYPE_DEFAULT, "_LSUnregisterBundle(%@) returned %@ for placeholder only", buf, 0x16u);
    }
    int v19 = 0;
    int v20 = 10;
  }
  else if (v12 || v9)
  {
    int v21 = v7 & (a2 >> 1);
    int v22 = (a2 >> 2) & 1;
    int v23 = !v9;
    int v19 = v21 ^ 1 | !v9;
    if (v19 != 1) {
      goto LABEL_30;
    }
    int v39 = (a2 >> 2) & 1;
    +[_LSDDeviceIdentifierService clearIdentifiersForUninstallationWithContext:a3 bundleUnit:HIDWORD(v43) bundleData:v42];
    v40[0] = MEMORY[0x1E4F143A8];
    v40[1] = 3221225472;
    void v40[2] = ___LSUnregisterAppWithBundleIDUsingContext_block_invoke;
    v40[3] = &__block_descriptor_40_e20_v20__0B8__NSError_12l;
    v40[4] = a1;
    _LSHandlerPrefRemoveAllWithBundleID(a1, v40);
    uint64_t v24 = objc_alloc_init(LSDefaultApplicationQueryServerDatastore);
    [(LSDefaultApplicationQueryServerDatastore *)v24 removeEntriesForBundleIdentifier:a1];

    int v22 = v39;
    int v25 = v39 ? 0 : v21 ^ 1;
    if ((v25 & v9) == 1)
    {
      int v37 = _LSUnregisterBundle(a3, v43, 0);
      uint64_t v26 = _LSInstallLog();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        long long v38 = [NSNumber numberWithInt:v37 == 0];
        *(_DWORD *)stat buf = 138412546;
        *(void *)&uint8_t buf[4] = a1;
        *(_WORD *)&unsigned char buf[12] = 2112;
        *(void *)&buf[14] = v38;
        _os_log_impl(&dword_182959000, v26, OS_LOG_TYPE_DEFAULT, "_LSUnregisterBundle(%@) returned %@ for placeholder", buf, 0x16u);
      }
      int v20 = 9;
      int v22 = v39;
    }
    else
    {
LABEL_30:
      int v20 = 0;
    }
    if ((v12 & (v13 ^ 1)) == 1)
    {
      uint64_t v16 = _LSUnregisterBundle(a3, HIDWORD(v43), 0);
      uint64_t v28 = _LSInstallLog();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        id v29 = [NSNumber numberWithInt:v16 == 0];
        *(_DWORD *)stat buf = 138412546;
        *(void *)&uint8_t buf[4] = a1;
        *(_WORD *)&unsigned char buf[12] = 2112;
        *(void *)&buf[14] = v29;
        _os_log_impl(&dword_182959000, v28, OS_LOG_TYPE_DEFAULT, "_LSUnregisterBundle(%@) returned %@ for app", buf, 0x16u);
      }
      if (v21 ^ 1 | v23) {
        int v20 = 8;
      }
      else {
        int v20 = 5;
      }
    }
    else
    {
      int v30 = v22;
      uint64_t v31 = _LSInstallLog();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)stat buf = 138413570;
        *(void *)&uint8_t buf[4] = a1;
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v12;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v9;
        *(_WORD *)&uint8_t buf[24] = 1024;
        *(_DWORD *)&buf[26] = v21;
        *(_WORD *)&buf[30] = 1024;
        int v45 = v13;
        __int16 v46 = 1024;
        int v47 = v30;
        _os_log_impl(&dword_182959000, v31, OS_LOG_TYPE_DEFAULT, "no bundles to remove for %@ (found app: %d placeholder: %d app only: %d placeholder only: %d placeholder only if parallel: %d)", buf, 0x2Au);
      }

      uint64_t v16 = 0;
    }
  }
  else
  {
    id v27 = _LSInstallLog();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)stat buf = 138412290;
      *(void *)&uint8_t buf[4] = a1;
      _os_log_impl(&dword_182959000, v27, OS_LOG_TYPE_DEFAULT, "No bundles to remove for %@", buf, 0xCu);
    }

    int v19 = 0;
    uint64_t v16 = 0;
    int v20 = 0;
  }
  uint64_t v32 = (void *)MEMORY[0x18530F680]();
  long long v33 = _LSInstallLog();
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)stat buf = 138412290;
    *(void *)&uint8_t buf[4] = a1;
    _os_log_impl(&dword_182959000, v33, OS_LOG_TYPE_DEFAULT, "Clearing icon cache entries for %@", buf, 0xCu);
  }

  if ((IconServicesLibrary_frameworkLibrary_0
     || (IconServicesLibrary_frameworkLibrary_0 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/IconServices.framework/IconServices", 2)) != 0)&& ([(id)__LSDefaultsGetSharedInstance() isLightweightSystemServer] & 1) == 0)
  {
    ((void (*)(void *))softLink_ISInvalidateCacheEntriesForBundleIdentifier[0])(a1);
    if (v19)
    {
      if ([(id)__LSDefaultsGetSharedInstance() isServer])
      {
        long long v34 = +[LSAltIconManager sharedInstance];
        [v34 clearAlternateNameForBundleIdentifier:a1 validationDictionary:0];
      }
    }
  }
  if (a4) {
    *a4 = v20;
  }
  return v16;
}

uint64_t _LSUnregisterAppWithBundleID(_LSDatabase **a1, void *a2, unsigned int a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v12 = @" (placeholder only)";
  if ((a3 & 3) != 1) {
    BOOL v12 = &stru_1ECB1A570;
  }
  int v30 = 0;
  _LSLogStepStart(6, 0, a2, @"Beginning _LSUnregisterAppWithBundleID%@%@%@", a5, a6, a7, a8, (uint64_t)v12);
  if (a1)
  {
    if (a2)
    {
LABEL_5:
      uint64_t v17 = _LSUnregisterAppWithBundleIDUsingContext(a2, a3, a1, a4);
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v17 = _LSContextInit(&v30);
    if (v17) {
      goto LABEL_14;
    }
    a1 = (_LSDatabase **)&v30;
    if (a2) {
      goto LABEL_5;
    }
  }
  uint64_t v18 = _LSDefaultLog();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
    _LSUnregisterAppWithBundleID_cold_2(v18, v19, v20, v21, v22, v23, v24, v25);
  }

  uint64_t v17 = 4294967246;
LABEL_11:
  if (a1 == (_LSDatabase **)&v30) {
    _LSContextDestroy(&v30);
  }
  if (!v17)
  {
    uint64_t v27 = 1;
    goto LABEL_18;
  }
LABEL_14:
  uint64_t v26 = _LSDefaultLog();
  if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
    _LSUnregisterAppWithBundleID_cold_1();
  }

  uint64_t v27 = 0;
LABEL_18:
  _LSLogStepFinished(6, v27, a2, @"Finished _LSUnregisterAppWithBundleID", v13, v14, v15, v16, v29);

  return v17;
}

void sub_1829E2974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void _LSLogStepStart(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v11 = a3;
  if (a4)
  {
    BOOL v12 = (objc_class *)NSString;
    id v13 = a4;
    a4 = (void *)[[v12 alloc] initWithFormat:v13 arguments:&a9];
  }
  [(Class)getAITransactionLogClass[0]() logStep:a1 byParty:5 phase:1 success:1 forBundleID:v11 description:a4];
}

void _LSLogStepFinished(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v12 = a3;
  if (a4)
  {
    id v13 = (objc_class *)NSString;
    id v14 = a4;
    a4 = (void *)[[v13 alloc] initWithFormat:v14 arguments:&a9];
  }
  [(Class)getAITransactionLogClass[0]() logStep:a1 byParty:5 phase:2 success:a2 forBundleID:v12 description:a4];
}

void _LSInvokeMIForShimmedInstall(void *a1, void *a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  BOOL v8 = _LSInstallLog();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)stat buf = 138412290;
    id v18 = v5;
    _os_log_impl(&dword_182959000, v8, OS_LOG_TYPE_DEFAULT, "Processing install of %@... later.", buf, 0xCu);
  }

  BOOL v9 = getShimInvokeQueue();
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  _OWORD block[2] = ___LSInvokeMIForShimmedInstall_block_invoke;
  block[3] = &unk_1E522C528;
  id v14 = v5;
  id v15 = v6;
  id v16 = v7;
  id v10 = v7;
  id v11 = v6;
  id v12 = v5;
  dispatch_async(v9, block);
}

id getShimInvokeQueue()
{
  if (getShimInvokeQueue_onceToken != -1) {
    dispatch_once(&getShimInvokeQueue_onceToken, &__block_literal_global_1071);
  }
  os_log_t v0 = (void *)getShimInvokeQueue_queue;

  return v0;
}

void _LSInvokeMIForShimmedUninstall(void *a1, void *a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  BOOL v8 = _LSInstallLog();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)stat buf = 138412290;
    id v18 = v5;
    _os_log_impl(&dword_182959000, v8, OS_LOG_TYPE_DEFAULT, "Processing uninstall of %@... later.", buf, 0xCu);
  }

  BOOL v9 = getShimInvokeQueue();
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  _OWORD block[2] = ___LSInvokeMIForShimmedUninstall_block_invoke;
  block[3] = &unk_1E522C528;
  id v14 = v5;
  id v15 = v6;
  id v16 = v7;
  id v10 = v7;
  id v11 = v6;
  id v12 = v5;
  dispatch_async(v9, block);
}

void sub_1829E3898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void LSApplicationWorkspaceNotificationCallback(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  if (([a3 isEqualToString:@"com.lsinstallprogress.appcontrols.cancel"] & 1) != 0
    || ([a3 isEqualToString:@"com.lsinstallprogress.appcontrols.pause"] & 1) != 0
    || ([a3 isEqualToString:@"com.lsinstallprogress.appcontrols.prioritize"] & 1) != 0
    || ([a3 isEqualToString:@"com.lsinstallprogress.appcontrols.resume"] & 1) != 0
    || [a3 isEqualToString:@"com.lsinstallprogress.networkusagechanged"])
  {
    id v8 = a5;
    id v9 = a3;
    id v10 = [a2 remoteObserver];
    uint64_t v18 = MEMORY[0x1E4F143A8];
    uint64_t v19 = 3221225472;
    uint64_t v20 = __LSApplicationWorkspaceObserverCallback_block_invoke;
    uint64_t v21 = &unk_1E522CF78;
    id v22 = v9;
    id v23 = v8;
    id v24 = v10;
    id v11 = v9;
    id v12 = v8;
    id v13 = v10;
    id v14 = "com.apple.launchservices.LSApplicationWorkspaceObserverCallback";
LABEL_7:
    dispatchAsyncToCallbackQueueWithTransaction((uint64_t)v14, &v18);

    return;
  }
  if (([a3 isEqualToString:@"com.apple.LaunchServices.pluginsregistered"] & 1) != 0
    || ([a3 isEqualToString:@"com.apple.LaunchServices.pluginsunregistered"] & 1) != 0
    || [a3 isEqualToString:@"com.apple.LaunchServices.pluginswillberemoved"])
  {
    id v15 = a5;
    id v16 = a3;
    uint64_t v17 = [a2 remoteObserver];
    uint64_t v18 = MEMORY[0x1E4F143A8];
    uint64_t v19 = 3221225472;
    uint64_t v20 = __LSApplicationWorkspacePluginsChangedCallback_block_invoke;
    uint64_t v21 = &unk_1E522CF78;
    id v22 = v16;
    id v23 = v15;
    id v24 = v17;
    id v11 = v16;
    id v12 = v15;
    id v13 = v17;
    id v14 = "com.apple.launchservices.LSApplicationWorkspacePluginsChangedCallback";
    goto LABEL_7;
  }
  if ([a3 isEqualToString:@"com.apple.LaunchServices.applicationStateChanged"])
  {
    LSApplicationStateChangedCallback(a2, (uint64_t)a3, a5);
  }
}

void sub_1829E3ED8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void unsubscribeFromLSAWDistributedNotification(const __CFString *a1)
{
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 3221225472;
  v1[2] = __unsubscribeFromLSAWDistributedNotification_block_invoke;
  v1[3] = &__block_descriptor_40_e8_I12__0I8l;
  v1[4] = a1;
  mutateSubscriberCountForNotificationName(a1, v1);
}

void sub_1829E4428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1829E467C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1829E5570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void _LSCommonOpenApplicationWithBundleIdentifier(void *a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  id v12 = a5;
  if (!v10)
  {
    uint64_t v17 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v18 = objc_msgSend(NSString, "stringWithUTF8String:", "void _LSCommonOpenApplicationWithBundleIdentifier(LSApplicationWorkspace *__strong, NSString *__strong, _LSOpenConfiguration *__strong, BOOL, void (^__strong)(BOOL, NSError *__strong))");
    [v17 handleFailureInFunction:v18, @"LSApplicationWorkspace.m", 2174, @"Invalid parameter not satisfying: %@", @"bundleIdentifier != nil" file lineNumber description];
  }
  uint64_t v13 = [v9 optionsFromOpenConfiguration:v11];
  v21[0] = (void (*)(void, void))MEMORY[0x1E4F143A8];
  v21[1] = (void (*)(void, void))3221225472;
  _OWORD v21[2] = (void (*)(void, void))___LSCommonOpenApplicationWithBundleIdentifier_block_invoke;
  v21[3] = (void (*)(void, void))&unk_1E522C6F0;
  id v14 = v12;
  id v22 = v14;
  uint64_t v15 = +[_LSDService XPCProxyWithErrorHandler:]((uint64_t)_LSDOpenService, v21);
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  v19[2] = ___LSCommonOpenApplicationWithBundleIdentifier_block_invoke_2;
  v19[3] = &unk_1E522D008;
  id v20 = v14;
  id v16 = v14;
  [v15 openApplicationWithIdentifier:v10 options:v13 useClientProcessHandle:a4 completionHandler:v19];
}

id mapBundleIdentifiersToUUIDs(int a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v22 = 0;
  id v23 = &v22;
  uint64_t v24 = 0x3032000000;
  uint64_t v25 = __Block_byref_object_copy__4;
  uint64_t v26 = __Block_byref_object_dispose__4;
  id v27 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = &v16;
  uint64_t v18 = 0x3032000000;
  uint64_t v19 = __Block_byref_object_copy__4;
  id v20 = __Block_byref_object_dispose__4;
  id v21 = 0;
  v15[0] = (void (*)(void, void))MEMORY[0x1E4F143A8];
  v15[1] = (void (*)(void, void))3221225472;
  void v15[2] = (void (*)(void, void))__mapBundleIdentifiersToUUIDs_block_invoke;
  v15[3] = (void (*)(void, void))&unk_1E522C550;
  void v15[4] = (void (*)(void, void))&v16;
  id v6 = +[_LSDService synchronousXPCProxyWithErrorHandler:]((uint64_t)_LSDReadService, v15);
  id v7 = v6;
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  void v13[2] = __mapBundleIdentifiersToUUIDs_block_invoke_2;
  v13[3] = &unk_1E522D030;
  char v14 = a1;
  if (a1) {
    id v8 = 0;
  }
  else {
    id v8 = v5;
  }
  if (a1) {
    id v9 = v5;
  }
  else {
    id v9 = 0;
  }
  void v13[4] = &v22;
  void v13[5] = &v16;
  [v6 mapBundleIdentifiers:v8 orMachOUUIDs:v9 completionHandler:v13];
  id v10 = (void *)v23[5];
  if (a3 && !v10)
  {
    *a3 = (id) v17[5];
    id v10 = (void *)v23[5];
  }
  id v11 = v10;

  _Block_object_dispose(&v16, 8);
  _Block_object_dispose(&v22, 8);

  return v11;
}

void sub_1829E6900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1829E6CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 144), 8);
  _Unwind_Resume(a1);
}

id serviceDomainForRequestContext(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[_LSDServiceDomain defaultServiceDomain]();
  id v3 = [v1 targetUserID];

  if (v3)
  {
    id v4 = [v1 targetUserID];
    uint64_t v5 = [v4 intValue];

    if (v5)
    {
      uint64_t v6 = -[_LSDServiceDomain initWithUID:]([_LSDServiceDomain alloc], v5);
    }
    else
    {
      uint64_t v6 = +[_LSDServiceDomain systemSessionDomain]();
    }
    id v7 = (void *)v6;

    uint64_t v2 = v7;
  }

  return v2;
}

void handleSaveObserverBehavior(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  id v11 = v10;
  if (v7)
  {
    if (v10)
    {
      [v7 operationWithUUID:v9 didFailToSaveWithError:v10];
    }
    else if (v8)
    {
      v20[0] = MEMORY[0x1E4F143A8];
      v20[1] = 3221225472;
      _OWORD v20[2] = __handleSaveObserverBehavior_block_invoke;
      void v20[3] = &unk_1E522D058;
      id v12 = v7;
      id v21 = v12;
      id v13 = v9;
      id v22 = v13;
      char v14 = [v8 remoteObjectProxyWithErrorHandler:v20];
      v17[0] = MEMORY[0x1E4F143A8];
      v17[1] = 3221225472;
      v17[2] = __handleSaveObserverBehavior_block_invoke_2;
      v17[3] = &unk_1E522D080;
      id v18 = v12;
      id v19 = v13;
      [v14 waitForResult:v17];
    }
    else
    {
      uint64_t v15 = _LSInstallLog();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_FAULT)) {
        handleSaveObserverBehavior_cold_1();
      }

      uint64_t v16 = _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -10810, (uint64_t)"handleSaveObserverBehavior", 2467, 0);
      [v7 operationWithUUID:v9 didFailToSaveWithError:v16];
    }
  }
}

void sub_1829E7508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1829E78CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1829E7CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1829E7F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1829E8650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1829E8970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1829E8BF4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1829E8E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1829E9188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t registerApplicationWithDictionary(void *a1, unsigned int a2)
{
  id v3 = a1;
  kdebug_trace();
  id v22 = 0;
  v23.db = 0;
  unsigned int v21 = 0;
  id v20 = 0;
  id v4 = [(FSNode *)v3 objectForKey:@"IsPlaceholder"];
  int v5 = [v4 BOOLValue];

  uint64_t v6 = [(FSNode *)v3 objectForKey:@"IsParallelPlaceholder"];
  int v7 = [v6 BOOLValue];

  id v8 = [(FSNode *)v3 objectForKey:*MEMORY[0x1E4F1CFF8]];
  uint64_t v9 = [(FSNode *)v3 objectForKey:@"Path"];
  if (v9)
  {
    id v10 = &stru_1ECB1A570;
    if (v7) {
      id v10 = @"(parallel)";
    }
    uint64_t v11 = @"app bundle";
    if (v5) {
      uint64_t v11 = @"placeholder";
    }
    id v12 = [NSString stringWithFormat:@"LaunchServices: registering %@%@ for %@", v10, v11, v8];
    if (_LSLoggingQueue_onceToken != -1) {
      dispatch_once(&_LSLoggingQueue_onceToken, &__block_literal_global_1131);
    }
    uint64_t v13 = _LSLoggingQueue_logQueue;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    _OWORD block[2] = ___LSSetCrashMessage_block_invoke;
    block[3] = &unk_1E522C268;
    id v25 = v12;
    id v14 = v12;
    dispatch_sync(v13, block);

    uint64_t v15 = (void *)[objc_alloc(MEMORY[0x1E4F1CB10]) initFileURLWithPath:v9 isDirectory:1];
    uint64_t v16 = FSNodeCreateWithURL((uint64_t)v15, 0, &v22);

    if (!v16)
    {
      uint64_t v16 = _LSContextInit((id *)&v23.db);
      if (!v16)
      {
        uint64_t v16 = _LSFindOrRegisterBundleNode(&v23, v22, 0, (((a2 >> 30) & 1) == 0) | a2 | 0x2000000, v3, &v21, &v20);
        if (!v16)
        {
          if (([(id)__LSDefaultsGetSharedInstance() isLightweightSystemServer] & 1) == 0)
          {
            uint64_t v17 = [(FSNode *)v3 objectForKeyedSubscript:@"IsPlaceholder"];
            char v18 = [v17 BOOLValue];

            if ((v18 & 1) == 0) {
              +[_LSDDeviceIdentifierService generateIdentifiersForInstallationWithContext:&v23 bundleUnit:v21 bundleData:v20];
            }
          }
          if (_LSLoggingQueue_onceToken != -1) {
            dispatch_once(&_LSLoggingQueue_onceToken, &__block_literal_global_1131);
          }
          dispatch_sync((dispatch_queue_t)_LSLoggingQueue_logQueue, &__block_literal_global_1129);
        }
        _LSContextDestroy((void **)&v23.db);
      }
    }
  }
  else
  {
    uint64_t v16 = 4294967246;
  }
  kdebug_trace();

  return v16;
}

void sub_1829E96B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1829E9A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_1829E9CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1829EA000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  _Block_object_dispose(&a24, 8);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v30 - 136), 8);
  _Unwind_Resume(a1);
}

uint64_t _updatePlaceholderInstallType(void *a1, void *a2, uint64_t a3, void *a4)
{
  v24[1] = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v8 = a2;
  uint64_t v9 = v8;
  if (a3
    && (((void (*)(void *, uint64_t, uint64_t, void *, uint64_t))softLinkMobileInstallationUpdatePlaceholderMetadata[0])(v8, a3, 0, 0, 0), (uint64_t v10 = objc_claimAutoreleasedReturnValue()) != 0))
  {
    id v11 = (id)v10;
    id v12 = _LSInstallLog();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      -[LSApplicationWorkspace updatePlaceholderMetadataForApp:installType:failure:underlyingError:source:outError:]();
    }

    uint64_t v17 = 0;
  }
  else
  {
    LSContext v23 = @"LSInstallType";
    char v18 = [NSNumber numberWithUnsignedInteger:a3];
    v24[0] = v18;
    id v19 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v24 forKeys:&v23 count:1];
    id v20 = [MEMORY[0x1E4F29128] UUID];
    id v22 = 0;
    uint64_t v17 = [v7 updateRecordForApp:v9 withSINF:0 iTunesMetadata:0 placeholderMetadata:v19 sendNotification:1 operationUUID:v20 outSaveToken:0 error:&v22];
    id v11 = v22;

    _LSContextInvalidate();
  }
  _LSLogStepFinished(11, v17, v9, @"Updated Placeholder install type with error %@", v13, v14, v15, v16, (uint64_t)v11);
  if (a4) {
    *a4 = v11;
  }

  return v17;
}

BOOL _LSUnregisterPluginsAtURL(void *a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  CFURLRef v3 = a1;
  if (v3)
  {
    id v22 = 0;
    LSContext v23 = 0;
    int inited = _LSContextInitReturningError(&v23, &v22);
    id v5 = v22;
    if (!inited)
    {
      int v13 = 0;
      goto LABEL_23;
    }
    uint64_t v6 = (void *)_LSCopyPluginsWithURL((uint64_t)&v23, v3);
    id v7 = v6;
    if (v6)
    {
      if (![v6 count])
      {
        int v13 = 1;
LABEL_22:
        _LSContextDestroy(&v23);

LABEL_23:
        BOOL v15 = v13 != 0;
        if (!a2) {
          goto LABEL_26;
        }
        goto LABEL_24;
      }
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      id v8 = objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithArray:", v7, 0);
      uint64_t v9 = [v8 countByEnumeratingWithState:&v18 objects:v26 count:16];
      if (v9)
      {
        uint64_t v10 = *(void *)v19;
        while (2)
        {
          for (uint64_t i = 0; i != v9; ++i)
          {
            if (*(void *)v19 != v10) {
              objc_enumerationMutation(v8);
            }
            int v12 = _LSUnregisterPlugin((_LSDatabase **)&v23, [*(id *)(*((void *)&v18 + 1) + 8 * i) unsignedLongLongValue]);
            if (v12)
            {
              uint64_t v16 = _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], v12, (uint64_t)"_LSUnregisterPluginsAtURL", 509, 0);

              int v13 = 0;
              id v5 = (id)v16;
              goto LABEL_21;
            }
          }
          uint64_t v9 = [v8 countByEnumeratingWithState:&v18 objects:v26 count:16];
          int v13 = 1;
          if (v9) {
            continue;
          }
          break;
        }
      }
      else
      {
        int v13 = 0;
      }
    }
    else
    {
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -10814, (uint64_t)"_LSUnregisterPluginsAtURL", 516, 0);
      int v13 = 0;
      id v8 = v5;
      id v5 = (id)objc_claimAutoreleasedReturnValue();
    }
LABEL_21:

    goto LABEL_22;
  }
  uint64_t v24 = *MEMORY[0x1E4F28228];
  id v25 = @"invalid plugin URL";
  uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v25 forKeys:&v24 count:1];
  _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -50, (uint64_t)"_LSUnregisterPluginsAtURL", 523, v14);
  id v5 = (id)objc_claimAutoreleasedReturnValue();

  BOOL v15 = 0;
  if (!a2) {
    goto LABEL_26;
  }
LABEL_24:
  if (!v15) {
    *a2 = v5;
  }
LABEL_26:

  return v15;
}

void sub_1829EAE08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

uint64_t _LSRegisterPluginWithInfo(void *a1, void *a2)
{
  CFURLRef v3 = a1;
  id v4 = a2;
  id v5 = (void *)MEMORY[0x18530F680]();
  id v17 = 0;
  v18.db = 0;
  if (v3)
  {
    uint64_t v6 = _LSContextInit((id *)&v18.db);
    if (v6)
    {
      id v11 = 0;
    }
    else
    {
      id v7 = (void *)_LSCopyPluginsWithURL((uint64_t)&v18, v3);
      id v8 = v7;
      if (v7)
      {
        uint64_t v9 = [v7 objectAtIndex:0];
        unsigned int v10 = [v9 unsignedLongLongValue];
        CFRelease(v8);
      }
      else
      {
        unsigned int v10 = 0;
      }
      uint64_t v6 = FSNodeCreateWithURL((uint64_t)v3, 0, &v17);
      id v11 = v17;
      if (!v6)
      {
        id v16 = 0;
        BOOL v12 = _LSRegisterPluginNode(&v18, v17, v4, 0, v10, &v16);
        id v13 = v16;
        uint64_t v14 = v13;
        if (v12) {
          uint64_t v6 = 0;
        }
        else {
          uint64_t v6 = _LSGetOSStatusFromNSError(v13);
        }

        _LSContextDestroy((void **)&v18.db);
        id v11 = v17;
      }
    }
  }
  else
  {
    id v11 = 0;
    uint64_t v6 = 4294967246;
  }

  return v6;
}

void sub_1829EAF94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1829EB1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1829EB3F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1829EB57C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1829EB818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1829EB9A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1829EBB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1829EBDA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1829EC784(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1829ECA48(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1829ECC10(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1829ECE9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1829ED6BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t _LSServer_UpdateDatabaseWithInfo(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a5;
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    uint64_t v13 = @"sinfData";
  }
  else if (a3)
  {
    uint64_t v13 = @"iTunesData";
  }
  else
  {
    uint64_t v13 = @"placeholderMetadata";
    if (!a4) {
      uint64_t v13 = @"bumping sequence number";
    }
  }
  _LSLogStepStart(11, 0, a1, @"Updating bundle record for app (%@)", a5, a6, a7, a8, (uint64_t)v13);
  uint64_t v14 = (void *)MEMORY[0x18530F680]();
  BOOL v15 = [[LSBundleRecordUpdater alloc] initWithBundleIdentifier:a1 preferPlaceholder:a4 != 0];
  if (v15)
  {
    id v16 = v15;
    if (!v8
      && ![(LSBundleRecordUpdater *)v15 checkNeedsUpdateForiTunesMetadata:a3 SINFo:a2 placeholderMetadata:a4])
    {
      uint64_t v30 = _LSDefaultLog();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)stat buf = 138413058;
        uint64_t v38 = a2;
        __int16 v39 = 2112;
        uint64_t v40 = a3;
        __int16 v41 = 2112;
        uint64_t v42 = a4;
        __int16 v43 = 2112;
        BOOL v44 = a1;
        _os_log_impl(&dword_182959000, v30, OS_LOG_TYPE_DEFAULT, "Updating database with %@ %@ %@ for %@: did not actually need an update, and it was not forced, so skipping", buf, 0x2Au);
      }

      _LSLogStepFinished(11, 1, a1, @"Updated bundle record%@", v31, v32, v33, v34, @" (skipped)");
      return 0;
    }
    [(LSBundleRecordUpdater *)v16 parseSINFDictionary:a2];
    [(LSBundleRecordUpdater *)v16 parseiTunesMetadata:a3];
    [(LSBundleRecordUpdater *)v16 parsePlaceholderMetadata:a4];
    id v36 = 0;
    BOOL v17 = [(LSBundleRecordUpdater *)v16 updateBundleRecord:&v36];
    id v18 = v36;

    if (v17)
    {
      _LSArmSaveTimer(1);
      _LSLogStepFinished(11, 1, a1, @"Updated bundle record%@", v19, v20, v21, v22, (uint64_t)&stru_1ECB1A570);

      return 0;
    }
  }
  else
  {
    LSContext v23 = _LSDefaultLog();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
      _LSServer_UpdateDatabaseWithInfo_cold_2();
    }

    _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -10814, (uint64_t)"_LSServer_UpdateDatabaseWithInfo", 6334, 0);
    id v18 = (id)objc_claimAutoreleasedReturnValue();
  }
  uint64_t v24 = _LSDefaultLog();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
    _LSServer_UpdateDatabaseWithInfo_cold_1((uint64_t)a1);
  }

  _LSLogStepFinished(11, 0, a1, @"Updated bundle record%@", v25, v26, v27, v28, (uint64_t)&stru_1ECB1A570);
  uint64_t v29 = _LSGetOSStatusFromNSError(v18);

  return v29;
}

void _LSLogStepAsync(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v12 = a3;
  if (a4)
  {
    uint64_t v13 = (objc_class *)NSString;
    id v14 = a4;
    a4 = (void *)[[v13 alloc] initWithFormat:v14 arguments:&a9];
  }
  [(Class)getAITransactionLogClass[0]() logStep:a1 byParty:5 phase:3 success:a2 forBundleID:v12 description:a4];
}

void sub_1829EF55C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1829EF940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1829F0E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

id bestRecordForScheme(void *a1, void *a2)
{
  CFURLRef v3 = (objc_class *)MEMORY[0x1E4F29088];
  id v4 = a1;
  id v5 = objc_alloc_init(v3);
  [v5 setScheme:v4];

  uint64_t v6 = [LSClaimBinding alloc];
  id v7 = [v5 URL];
  int v8 = [(LSClaimBinding *)v6 initWithURL:v7 error:a2];

  if (!v8) {
    goto LABEL_6;
  }
  uint64_t v9 = [(LSClaimBinding *)v8 bundleRecord];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  if (isKindOfClass)
  {
    id v11 = [(LSClaimBinding *)v8 bundleRecord];
    goto LABEL_7;
  }
  if (a2)
  {
    _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -10814, (uint64_t)"bestRecordForScheme", 4615, 0);
    id v11 = 0;
    *a2 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
LABEL_6:
    id v11 = 0;
  }
LABEL_7:

  return v11;
}

void sub_1829F1400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1829F19C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v14 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1829F1F04(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void dispatchAsyncToCallbackQueueWithTransaction(uint64_t a1, void *a2)
{
  id v2 = a2;
  CFURLRef v3 = (void *)os_transaction_create();
  id v4 = +[LSApplicationWorkspace callbackQueue];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __dispatchAsyncToCallbackQueueWithTransaction_block_invoke;
  v7[3] = &unk_1E522D0A8;
  id v8 = v3;
  id v9 = v2;
  id v5 = v3;
  id v6 = v2;
  dispatch_async(v4, v7);
}

id filterProxiesForHelperPlaceholders(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v3 = v1;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v13 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        id v9 = objc_msgSend(v8, "correspondingApplicationRecord", (void)v12);
        int v10 = [v9 isWebAppPlaceholder];

        if (v10) {
          [v2 addObject:v8];
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v5);
  }

  return v2;
}

void _LSServer_ExecuteSyncWithQuiescedInstallationActivity(void *a1)
{
  id v1 = a1;
  RegisterInstallResultsLocuint64_t k = (os_unfair_lock_s *)_LSDatabaseGetRegisterInstallResultsLock();
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  uint64_t v6 = ___LSServer_ExecuteSyncWithQuiescedInstallationActivity_block_invoke;
  id v7 = &unk_1E522CF20;
  id v3 = v1;
  id v8 = v3;
  uint64_t v4 = v5;
  os_unfair_lock_lock(RegisterInstallResultsLock);
  v6((uint64_t)v4);
  os_unfair_lock_unlock(RegisterInstallResultsLock);
}

void sub_1829F483C(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_1829F4850(_Unwind_Exception *a1)
{
}

void sub_1829F4DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

BOOL _LSServer_PerformExternalRebuildRegistration(void *a1, void *a2)
{
  v12[1] = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = +[LSDatabaseRebuildContext currentRebuildContextIfExists]();
  if (!v4)
  {
    uint64_t v6 = _LSInstallLog();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      _LSServer_PerformExternalRebuildRegistration_cold_1();
    }

    uint64_t v5 = _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28798], 94, (uint64_t)"_LSServer_PerformExternalRebuildRegistration", 5514, 0);
    if (!a2) {
      goto LABEL_9;
    }
LABEL_8:
    *a2 = v5;
    goto LABEL_9;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    -[LSDatabaseRebuildContext registerItems:]((uint64_t)v4, v3);
    uint64_t v5 = 0;
    if (!a2) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  id v8 = _LSInstallLog();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
    _LSServer_PerformExternalRebuildRegistration_cold_2((uint64_t)v3, v8);
  }

  id v9 = (void *)*MEMORY[0x1E4F28760];
  uint64_t v11 = *MEMORY[0x1E4F28228];
  v12[0] = @"bad registration input";
  int v10 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v12 forKeys:&v11 count:1];
  uint64_t v5 = _LSMakeNSErrorImpl(v9, -50, (uint64_t)"_LSServer_PerformExternalRebuildRegistration", 5510, v10);

  if (a2) {
    goto LABEL_8;
  }
LABEL_9:

  return v5 == 0;
}

void _LSServer_NoteMigratorRunningInMigration()
{
  uint64_t v0 = +[LSDatabaseRebuildContext currentRebuildContextIfExists]();
  id v1 = (void *)v0;
  if (v0)
  {
    -[LSRebuildStatisticsGatherer setMigratorRunning:](*(void *)(v0 + 8), 1);
  }
  else
  {
    id v2 = _LSInstallLog();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      _LSServer_NoteMigratorRunningInMigration_cold_1();
    }
  }
}

uint64_t _LSServer_LSEnumerateAndRegisterAllCryptexContent()
{
  uint64_t v7 = 0;
  id v8 = &v7;
  uint64_t v9 = 0x2020000000;
  char v10 = 0;
  uint64_t v0 = objc_alloc_init(LSRebuildStatisticsGatherer);
  -[LSRebuildStatisticsGatherer setOnlyCryptexContent:]((uint64_t)v0, 1);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  _OWORD v4[2] = ___LSServer_LSEnumerateAndRegisterAllCryptexContent_block_invoke;
  v4[3] = &unk_1E522CD18;
  id v1 = v0;
  uint64_t v5 = v1;
  uint64_t v6 = &v7;
  +[LSDatabaseRebuildContext withStatsGatherer:runWithRebuildContext:]((uint64_t)LSDatabaseRebuildContext, v1, v4);
  -[LSRebuildStatisticsGatherer submitAnalytics]((uint64_t)v1);
  uint64_t v2 = *((unsigned __int8 *)v8 + 24);

  _Block_object_dispose(&v7, 8);
  return v2;
}

void sub_1829F5158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _LSServer_LSEnumerateAndRegisterAllCryptexContentWithContext(void *a1)
{
  id v1 = a1;
  uint64_t v2 = _LSInstallLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)stat buf = 0;
    _os_log_impl(&dword_182959000, v2, OS_LOG_TYPE_DEFAULT, "calling into InstalledContentLibrary to register cryptex content", buf, 2u);
  }

  id v3 = [MEMORY[0x1E4F6F5A0] defaultWorkspace];
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = ___LSServer_LSEnumerateAndRegisterAllCryptexContentWithContext_block_invoke;
  v10[3] = &unk_1E522CD40;
  id v4 = v1;
  id v11 = v4;
  id v9 = 0;
  char v5 = [v3 enumerateCryptexContentWithBlock:v10 error:&v9];
  id v6 = v9;

  if ((v5 & 1) == 0)
  {
    uint64_t v7 = _LSInstallLog();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      _LSServer_LSEnumerateAndRegisterAllCryptexContentWithContext_cold_1();
    }

    -[LSDatabaseRebuildContext noteRebuildError:]((uint64_t)v4, v6);
  }
  id v8 = _LSInstallLog();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)stat buf = 0;
    _os_log_impl(&dword_182959000, v8, OS_LOG_TYPE_DEFAULT, "finished enumerating cryptex content.", buf, 2u);
  }
}

uint64_t _LSServer_LSEnumerateAndRegisterAllBundles(void *a1, __int16 a2)
{
  id v3 = a1;
  uint64_t v16 = 0;
  uint64_t v17 = &v16;
  uint64_t v18 = 0x2020000000;
  char v19 = 0;
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = [v3 objectForKey:@"UserRequestedAppDBRebuild"];
  id v6 = (void *)v5;
  if (v4) {
    BOOL v7 = v5 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7 && (objc_opt_isKindOfClass() & 1) == 0)
  {

    id v6 = 0;
  }
  char v8 = [v6 BOOLValue];

  id v9 = objc_alloc_init(LSRebuildStatisticsGatherer);
  -[LSRebuildStatisticsGatherer setIsUserRequested:]((uint64_t)v9, v8);
  -[LSRebuildStatisticsGatherer setRebuildReasonFlags:]((uint64_t)v9, a2);
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  void v13[2] = ___LSServer_LSEnumerateAndRegisterAllBundles_block_invoke;
  v13[3] = &unk_1E522CDB8;
  char v10 = v9;
  long long v14 = v10;
  long long v15 = &v16;
  -[LSRebuildStatisticsGatherer performRebuild:]((uint64_t)v10, v13);
  -[LSRebuildStatisticsGatherer submitAnalytics]((uint64_t)v10);
  uint64_t v11 = *((unsigned __int8 *)v17 + 24);

  _Block_object_dispose(&v16, 8);
  return v11;
}

void sub_1829F5598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1829F5A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a17, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 112), 8);
  _Unwind_Resume(a1);
}

void _LSServer_LSRegisterICLItem(void *a1, void *a2)
{
  v10[1] = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = [v3 legacyRecordDictionary];
  id v6 = [v5 objectForKeyedSubscript:@"ApplicationType"];

  if (!v6)
  {
    BOOL v7 = (void *)[v5 mutableCopy];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      char v8 = @"PluginKitPlugin";
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
LABEL_8:

        goto LABEL_9;
      }
      char v8 = @"Framework";
    }
    [v7 setObject:v8 forKeyedSubscript:@"ApplicationType"];
    goto LABEL_8;
  }
  BOOL v7 = v5;
LABEL_9:
  v10[0] = v7;
  id v9 = [MEMORY[0x1E4F1C978] arrayWithObjects:v10 count:1];
  -[LSDatabaseRebuildContext registerItems:]((uint64_t)v4, v9);
}

void sub_1829F5ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1829F5FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t _LSServer_RebuildApplicationDatabases(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  v63[1] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = MEMORY[0x185310450]();
  char v8 = (void *)MEMORY[0x18530F680](v7);
  _LSLogStepStart(9, 0, 0, @"Force rebuilding LaunchServices database", v9, v10, v11, v12, v42[0]);
  uint64_t v58 = 0;
  long long v59 = &v58;
  uint64_t v60 = 0x2020000000;
  char v61 = 0;
  v56[0] = 0;
  v56[1] = v56;
  v56[2] = 0x3032000000;
  void v56[3] = __Block_byref_object_copy__4;
  v56[4] = __Block_byref_object_dispose__4;
  id v57 = 0;
  id v13 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  long long v14 = _LSServer_DatabaseExecutionContext();
  v50[0] = MEMORY[0x1E4F143A8];
  v50[1] = 3221225472;
  v50[2] = ___LSServer_RebuildApplicationDatabases_block_invoke;
  v50[3] = &unk_1E522CE08;
  char v54 = a4;
  uint64_t v52 = v56;
  id v53 = &v58;
  id v15 = v13;
  id v51 = v15;
  char v55 = a5;
  -[LSDBExecutionContext syncWrite:]((uint64_t)v14, v50);

  if (*((unsigned char *)v59 + 24))
  {
    uint64_t v20 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:0];
    uint64_t v21 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:0];
    uint64_t v22 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:0];
    LSContext v23 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:0];
    long long v62 = @"UserRequestedAppDBRebuild";
    v63[0] = MEMORY[0x1E4F1CC38];
    uint64_t v24 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v63 forKeys:&v62 count:1];
    int v25 = _LSServer_LSEnumerateAndRegisterAllBundles(v24, 0);
    char v26 = v25;
    _LSLogStepFinished(9, v25 != 0, 0, @"Finished rebuilding LaunchServices database", v27, v28, v29, v30, v42[0]);
    uint64_t v31 = _LSServer_DatabaseExecutionContext();
    v42[0] = MEMORY[0x1E4F143A8];
    v42[1] = 3221225472;
    v42[2] = (uint64_t)___LSServer_RebuildApplicationDatabases_block_invoke_3;
    v42[3] = (uint64_t)&unk_1E522CE58;
    uint64_t v48 = v56;
    char v49 = v26;
    id v43 = v15;
    id v32 = v20;
    id v44 = v32;
    id v33 = v22;
    id v45 = v33;
    id v34 = v21;
    id v46 = v34;
    id v35 = v23;
    id v47 = v35;
    -[LSDBExecutionContext syncWrite:]((uint64_t)v31, v42);
  }
  else
  {
    _LSLogStepFinished(9, 0, 0, @"Skipping rebuild", v16, v17, v18, v19, v42[0]);
  }
  id v36 = _LSDatabaseGetSeedingGroup();
  dispatch_group_leave(v36);

  _Block_object_dispose(v56, 8);
  _Block_object_dispose(&v58, 8);
  MEMORY[0x185310460](v37, v38, v39, v40);
  return 1;
}

void sub_1829F67C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose((const void *)(v28 - 152), 8);
  _Unwind_Resume(a1);
}

void enumeratePlaceholderAndInstalledApplicationRecords(void *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  char v20 = 0;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t v2 = +[LSApplicationRecord enumeratorWithOptions:64];
  uint64_t v3 = [v2 countByEnumeratingWithState:&v16 objects:v22 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v17;
LABEL_3:
    uint64_t v6 = 0;
    while (1)
    {
      if (*(void *)v17 != v5) {
        objc_enumerationMutation(v2);
      }
      v1[2](v1, *(void *)(*((void *)&v16 + 1) + 8 * v6), &v20);
      if (v20) {
        break;
      }
      if (v4 == ++v6)
      {
        uint64_t v4 = [v2 countByEnumeratingWithState:&v16 objects:v22 count:16];
        if (v4) {
          goto LABEL_3;
        }
        break;
      }
    }
  }

  if (!v20)
  {
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    uint64_t v7 = +[LSApplicationRecord enumeratorWithOptions:](LSApplicationRecord, "enumeratorWithOptions:", 0, 0);
    uint64_t v8 = [v7 countByEnumeratingWithState:&v12 objects:v21 count:16];
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(void *)v13;
LABEL_12:
      uint64_t v11 = 0;
      while (1)
      {
        if (*(void *)v13 != v10) {
          objc_enumerationMutation(v7);
        }
        v1[2](v1, *(void *)(*((void *)&v12 + 1) + 8 * v11), &v20);
        if (v20) {
          break;
        }
        if (v9 == ++v11)
        {
          uint64_t v9 = [v7 countByEnumeratingWithState:&v12 objects:v21 count:16];
          if (v9) {
            goto LABEL_12;
          }
          break;
        }
      }
    }
  }
}

id allAppexRecords()
{
  uint64_t v0 = +[LSApplicationExtensionRecord enumeratorWithOptions:0];
  id v1 = [v0 allObjects];

  return v1;
}

void _LSServer_SyncWithMobileInstallation(void *a1)
{
  id v1 = a1;
  uint64_t v2 = _LSDatabaseGetMobileInstallSyncupGroup();
  dispatch_group_enter(v2);

  _LSServer_DatabaseExecutionContext();
  uint64_t v3 = (os_unfair_lock_s *)objc_claimAutoreleasedReturnValue();
  -[LSDBExecutionContext assertNotActiveForThisThread](v3);

  if ((atomic_fetch_or((atomic_uchar *volatile)&sMISyncFlag, 0x80u) & 0x80) == 0)
  {
    uint64_t v4 = _LSInstallLog();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)stat buf = 0;
      _os_log_impl(&dword_182959000, v4, OS_LOG_TYPE_DEFAULT, "Syncing with MobileInstallation once in-flight installation activity is quiesced", buf, 2u);
    }

    MEMORY[0x185310450]();
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    v6[2] = ___LSServer_SyncWithMobileInstallation_block_invoke;
    v6[3] = &unk_1E522CF20;
    id v7 = v1;
    _LSServer_ExecuteSyncWithQuiescedInstallationActivity(v6);
  }
  uint64_t v5 = _LSDatabaseGetMobileInstallSyncupGroup();
  dispatch_group_leave(v5);
}

void sub_1829F78EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1829F7F74(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__996(uint64_t a1, uint64_t a2)
{
  uint64_t result = MEMORY[0x18530F950](*(void *)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__997(uint64_t a1)
{
}

void sub_1829F8178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

id _getBlockToUpdateBundleRecordFromMIAndNotifyIfChanged(uint64_t *a1, void *a2, void *a3, void *a4)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v25 = 0;
  uint64_t v10 = _LSDefaultLog();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)stat buf = 138412546;
    id v27 = v7;
    __int16 v28 = 2112;
    id v29 = v8;
    _os_log_impl(&dword_182959000, v10, OS_LOG_TYPE_DEFAULT, "Checking if %@ needs to be registered at %@", buf, 0x16u);
  }

  if (FSNodeCreateWithURL((uint64_t)v8, 0, &v25))
  {
    uint64_t v11 = _LSDefaultLog();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      _getBlockToUpdateBundleRecordFromMIAndNotifyIfChanged_cold_1();
    }

    long long v12 = 0;
  }
  else
  {
    unsigned int v24 = 0;
    uint64_t v23 = 0;
    int v13 = _LSBundleFindWithNode((uint64_t)a1, v25, &v24, &v23);
    if (v13 || _LSNodeHasChanged(v25, *a1, v24, v23, 0))
    {
      long long v14 = _LSDefaultLog();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        long long v15 = @"missing";
        *(_DWORD *)stat buf = 138412802;
        id v27 = v8;
        __int16 v28 = 2112;
        if (!v13) {
          long long v15 = @"stale";
        }
        id v29 = v7;
        __int16 v30 = 2112;
        uint64_t v31 = v15;
        _os_log_impl(&dword_182959000, v14, OS_LOG_TYPE_DEFAULT, "Registering %@ (%@) because its record is %@", buf, 0x20u);
      }

      v19[0] = MEMORY[0x1E4F143A8];
      v19[1] = 3221225472;
      v19[2] = ___getBlockToUpdateBundleRecordFromMIAndNotifyIfChanged_block_invoke;
      v19[3] = &unk_1E522CF78;
      char v20 = v8;
      id v21 = v9;
      id v22 = v7;
      long long v12 = (void *)MEMORY[0x18530F950](v19);

      long long v16 = v20;
    }
    else
    {
      long long v16 = _LSDefaultLog();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)stat buf = 138412290;
        id v27 = v8;
        _os_log_impl(&dword_182959000, v16, OS_LOG_TYPE_DEFAULT, "Skipping %@ because its record is up-to-date", buf, 0xCu);
      }
      long long v12 = 0;
    }
  }
  long long v17 = (void *)MEMORY[0x18530F950](v12);

  return v17;
}

void sub_1829F889C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1829F8D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a33, 8);

  _Unwind_Resume(a1);
}

void sub_1829F8E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void _LSServer_NoteTerminationRequestForMISync()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  unsigned int v0 = 128;
  atomic_compare_exchange_strong(&sMISyncFlag, &v0, v0);
  BOOL v1 = v0 == 128;
  uint64_t v2 = _LSDefaultLog();
  uint64_t v3 = v2;
  if (v1)
  {
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      _LSServer_NoteTerminationRequestForMISync_cold_1();
    }

    _LSDatabaseSetSyncInterrupted();
  }
  else
  {
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      v4[0] = 67109120;
      v4[1] = sMISyncFlag;
      _os_log_impl(&dword_182959000, v3, OS_LOG_TYPE_DEFAULT, "MI sync was not running, %d.", (uint8_t *)v4, 8u);
    }
  }
}

id initMobileInstallationCopyFrameworkInfoForLaunchServices(void *a1, void *a2, uint64_t a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = (void *)MobileInstallationLibrary_frameworkLibrary;
  if (!MobileInstallationLibrary_frameworkLibrary)
  {
    id v7 = dlopen("/System/Library/PrivateFrameworks/MobileInstallation.framework/MobileInstallation", 2);
    MobileInstallationLibrary_frameworkLibrary = (uint64_t)v7;
  }
  softLinkMobileInstallationCopyFrameworkInfoForLaunchServices[0] = (uint64_t (*)())dlsym(v7, "MobileInstallationCopyFrameworkInfoForLaunchServices");
  id v8 = ((void (*)(id, id, uint64_t))softLinkMobileInstallationCopyFrameworkInfoForLaunchServices[0])(v5, v6, a3);

  return v8;
}

void ___registerExtensionPointsFromMIFrameworkDictionary_block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  CFDictionaryRef v6 = a3;
  id v7 = [NSString stringWithFormat:@"LaunchServices: registering extension point %@"];
  if (_LSLoggingQueue_onceToken != -1) {
    dispatch_once(&_LSLoggingQueue_onceToken, &__block_literal_global_1131);
  }
  id v8 = _LSLoggingQueue_logQueue;
  *(void *)blocuint64_t k = MEMORY[0x1E4F143A8];
  *(void *)&block[8] = 3221225472;
  *(void *)&block[16] = ___LSSetCrashMessage_block_invoke;
  *(void *)&long long v24 = &unk_1E522C268;
  *((void *)&v24 + 1) = v7;
  id v9 = v7;
  dispatch_sync(v8, block);

  _LSLogStepStart(4, 0, v5, @"registering extension point", v10, v11, v12, v13, (uint64_t)v5);
  active_platforuint64_t m = dyld_get_active_platform();
  long long v15 = _LSExtensionsLog();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v21 = *(void *)(a1 + 32);
    *(_DWORD *)blocuint64_t k = 136316162;
    *(void *)&void block[4] = "void _registerExtensionPointsFromMIFrameworkDictionary(NSDictionary<NSString *,id> *__strong)_block_invoke";
    *(_WORD *)&block[12] = 2112;
    *(void *)&block[14] = v5;
    *(_WORD *)&block[22] = 1024;
    LODWORD(v24) = active_platform;
    WORD2(v24) = 2112;
    *(void *)((char *)&v24 + 6) = v21;
    HIWORD(v24) = 2112;
    CFDictionaryRef v25 = v6;
    _os_log_debug_impl(&dword_182959000, v15, OS_LOG_TYPE_DEBUG, "%s Registering extension point with identifier '%@' platform: %d url '%@' SDK Dictionary: %@", block, 0x30u);
  }

  BOOL v16 = _LSRegisterExtensionPoint(0, 0, v5, active_platform, v6, *(void **)(a1 + 32)) == 0;
  _LSLogStepFinished(4, v16, v5, @"registered extension point", v17, v18, v19, v20, v22);
}

void init_ISInvalidateCacheEntriesForBundleIdentifier(void *a1)
{
  id v2 = a1;
  BOOL v1 = (void *)IconServicesLibrary_frameworkLibrary_0;
  if (!IconServicesLibrary_frameworkLibrary_0)
  {
    BOOL v1 = dlopen("/System/Library/PrivateFrameworks/IconServices.framework/IconServices", 2);
    IconServicesLibrary_frameworkLibrary_0 = (uint64_t)v1;
  }
  softLink_ISInvalidateCacheEntriesForBundleIdentifier[0] = (uint64_t (*)())dlsym(v1, "_ISInvalidateCacheEntriesForBundleIdentifier");
  ((void (*)(id))softLink_ISInvalidateCacheEntriesForBundleIdentifier[0])(v2);
}

Class initAITransactionLog()
{
  if (!MobileInstallationLibrary_frameworkLibrary) {
    MobileInstallationLibrary_frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/MobileInstallation.framework/MobileInstallation", 2);
  }
  Class result = objc_getClass("AITransactionLog");
  classAITransactionLog = (uint64_t)result;
  getAITransactionLogClass[0] = (uint64_t (*)())AITransactionLogFunction;
  return result;
}

id AITransactionLogFunction()
{
  return (id)classAITransactionLog;
}

void __getShimInvokeQueue_block_invoke()
{
  id v2 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v0 = dispatch_queue_create("com.apple.LaunchServices.InstallationShimInvoke", v2);
  BOOL v1 = (void *)getShimInvokeQueue_queue;
  getShimInvokeQueue_queue = (uint64_t)v0;
}

Class initMIInstallOptions()
{
  if (!MobileInstallationLibrary_frameworkLibrary) {
    MobileInstallationLibrary_frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/MobileInstallation.framework/MobileInstallation", 2);
  }
  Class result = objc_getClass("MIInstallOptions");
  classMIInstallOptions = (uint64_t)result;
  getMIInstallOptionsClass[0] = (uint64_t (*)())MIInstallOptionsFunction;
  return result;
}

id MIInstallOptionsFunction()
{
  return (id)classMIInstallOptions;
}

uint64_t initMobileInstallationInstallForInstallCoordinationWithError(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  id v15 = a1;
  id v16 = a3;
  id v17 = a4;
  id v18 = a8;
  uint64_t v19 = (void *)MobileInstallationLibrary_frameworkLibrary;
  if (!MobileInstallationLibrary_frameworkLibrary)
  {
    uint64_t v19 = dlopen("/System/Library/PrivateFrameworks/MobileInstallation.framework/MobileInstallation", 2);
    MobileInstallationLibrary_frameworkLibrary = (uint64_t)v19;
  }
  softLinkMobileInstallationInstallForInstallCoordinationWithError[0] = (uint64_t (*)())dlsym(v19, "MobileInstallationInstallForInstallCoordinationWithError");
  uint64_t v20 = ((uint64_t (*)(id, uint64_t, id, id, uint64_t, uint64_t, uint64_t, id))softLinkMobileInstallationInstallForInstallCoordinationWithError[0])(v15, a2, v16, v17, a5, a6, a7, v18);

  return v20;
}

id initMobileInstallationUninstallForInstallCoordinationWithError(void *a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  id v12 = a5;
  uint64_t v13 = (void *)MobileInstallationLibrary_frameworkLibrary;
  if (!MobileInstallationLibrary_frameworkLibrary)
  {
    uint64_t v13 = dlopen("/System/Library/PrivateFrameworks/MobileInstallation.framework/MobileInstallation", 2);
    MobileInstallationLibrary_frameworkLibrary = (uint64_t)v13;
  }
  softLinkMobileInstallationUninstallForInstallCoordinationWithError[0] = (uint64_t (*)())dlsym(v13, "MobileInstallationUninstallForInstallCoordinationWithError");
  long long v14 = ((void (*)(id, id, id, uint64_t, id))softLinkMobileInstallationUninstallForInstallCoordinationWithError[0])(v9, v10, v11, a4, v12);

  return v14;
}

void LSApplicationStateChangedCallback(void *a1, uint64_t a2, void *a3)
{
  id v5 = _LSDefaultLog();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
    LSApplicationStateChangedCallback_cold_1();
  }

  CFDictionaryRef v6 = [a1 remoteObserver];
  id v7 = a3;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  void v10[2] = __LSApplicationStateChangedCallback_block_invoke;
  v10[3] = &unk_1E522BBD8;
  id v11 = v7;
  id v12 = v6;
  id v8 = v6;
  id v9 = v7;
  dispatchAsyncToCallbackQueueWithTransaction((uint64_t)"com.apple.launchservices.LSApplicationStateChangedCallback", v10);
}

void __LSApplicationWorkspaceObserverCallback_block_invoke(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  _LSContextInvalidate();
  int v2 = [*(id *)(a1 + 32) isEqualToString:@"com.lsinstallprogress.networkusagechanged"];
  uint64_t v3 = *(void **)(a1 + 40);
  if (!v2)
  {
    uint64_t v4 = [v3 objectForKeyedSubscript:@"LSApplicationProxiesList"];
    if ([*(id *)(a1 + 32) isEqualToString:@"com.lsinstallprogress.appcontrols.cancel"])
    {
      id v5 = &selRef_applicationInstallsDidCancel_;
    }
    else if ([*(id *)(a1 + 32) isEqualToString:@"com.lsinstallprogress.appcontrols.pause"])
    {
      id v5 = &selRef_applicationInstallsDidPause_;
    }
    else if ([*(id *)(a1 + 32) isEqualToString:@"com.lsinstallprogress.appcontrols.prioritize"])
    {
      id v5 = &selRef_applicationInstallsDidPrioritize_;
    }
    else
    {
      if (![*(id *)(a1 + 32) isEqualToString:@"com.lsinstallprogress.appcontrols.resume"])
      {
LABEL_24:

        return;
      }
      id v5 = &selRef_applicationInstallsDidResume_;
    }
    CFDictionaryRef v6 = *v5;
    if (*v5 && [v4 count] && (objc_opt_respondsToSelector() & 1) != 0)
    {
      id v7 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      long long v15 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      id v8 = v4;
      uint64_t v9 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
      if (v9)
      {
        uint64_t v10 = v9;
        uint64_t v11 = *(void *)v16;
        do
        {
          for (uint64_t i = 0; i != v10; ++i)
          {
            if (*(void *)v16 != v11) {
              objc_enumerationMutation(v8);
            }
            uint64_t v13 = +[LSApplicationProxy applicationProxyForIdentifier:*(void *)(*((void *)&v15 + 1) + 8 * i) placeholder:1];
            [v7 addObject:v13];
          }
          uint64_t v10 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
        }
        while (v10);
      }

      objc_msgSend(*(id *)(a1 + 48), v6, v7);
    }
    goto LABEL_24;
  }
  id v14 = [v3 objectForKeyedSubscript:@"usingNetwork"];
  objc_msgSend(*(id *)(a1 + 48), "networkUsageChanged:", objc_msgSend(v14, "BOOLValue"));
}

void __LSApplicationWorkspacePluginsChangedCallback_block_invoke(id *a1)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  _LSContextInvalidate();
  unint64_t v2 = 0x1E4F1C000uLL;
  id v3 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  if ([a1[4] isEqualToString:@"com.apple.LaunchServices.pluginsregistered"])
  {
    long long v64 = 0u;
    long long v65 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    uint64_t v4 = [a1[5] allKeys];
    uint64_t v5 = [v4 countByEnumeratingWithState:&v62 objects:v76 count:16];
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)v63;
      do
      {
        for (uint64_t i = 0; i != v6; ++i)
        {
          if (*(void *)v63 != v7) {
            objc_enumerationMutation(v4);
          }
          uint64_t v9 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDString:*(void *)(*((void *)&v62 + 1) + 8 * i)];
          [v3 addObject:v9];
        }
        uint64_t v6 = [v4 countByEnumeratingWithState:&v62 objects:v76 count:16];
      }
      while (v6);
    }

    id v61 = 0;
    id v10 = v3;
    if (_LSCurrentProcessMayMapDatabase())
    {
      id v74 = 0;
      uint64_t v11 = +[LSApplicationExtensionRecord applicationExtensionRecordsForUUIDs:v10 outContainingBundleRecords:&v61 error:&v74];
      id v12 = v74;
      uint64_t v13 = v12;
      if (v11)
      {
        id v51 = v12;
        id v52 = v10;
        id v14 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
        long long v70 = 0u;
        long long v71 = 0u;
        long long v72 = 0u;
        long long v73 = 0u;
        id v15 = v11;
        uint64_t v16 = [v15 countByEnumeratingWithState:&v70 objects:v79 count:16];
        if (v16)
        {
          uint64_t v17 = v16;
          uint64_t v18 = *(void *)v71;
          do
          {
            for (uint64_t j = 0; j != v17; ++j)
            {
              if (*(void *)v71 != v18) {
                objc_enumerationMutation(v15);
              }
              uint64_t v20 = *(void **)(*((void *)&v70 + 1) + 8 * j);
              uint64_t v21 = [v20 compatibilityObject];
              if (v21)
              {
                [v14 addObject:v21];
              }
              else
              {
                uint64_t v22 = _LSInstallLog();
                if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)stat buf = 138412290;
                  id v78 = v20;
                  _os_log_error_impl(&dword_182959000, v22, OS_LOG_TYPE_ERROR, "Could not get a proxy for appex record %@; did it go away?",
                    buf,
                    0xCu);
                }
              }
            }
            uint64_t v17 = [v15 countByEnumeratingWithState:&v70 objects:v79 count:16];
          }
          while (v17);
        }

        id v10 = v52;
        unint64_t v2 = 0x1E4F1C000;
        if (v14)
        {
LABEL_47:

          __int16 v30 = (void *)[v61 mutableCopy];
          id v29 = sel_pluginsDidInstall_;

          if (!sel_pluginsDidInstall_) {
            goto LABEL_51;
          }
          goto LABEL_48;
        }
      }
      else
      {
        uint64_t v31 = _LSInstallLog();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
          __LSApplicationWorkspacePluginsChangedCallback_block_invoke_cold_2();
        }
      }
    }
    uint64_t v32 = _LSInstallLog();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
      __LSApplicationWorkspacePluginsChangedCallback_block_invoke_cold_1();
    }

    id v14 = objc_alloc_init(*(Class *)(v2 + 2632));
    long long v66 = 0u;
    long long v67 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    id v33 = v10;
    uint64_t v34 = [v33 countByEnumeratingWithState:&v66 objects:buf count:16];
    if (v34)
    {
      uint64_t v35 = v34;
      uint64_t v36 = *(void *)v67;
      do
      {
        for (uint64_t k = 0; k != v35; ++k)
        {
          if (*(void *)v67 != v36) {
            objc_enumerationMutation(v33);
          }
          uint64_t v38 = +[LSPlugInKitProxy pluginKitProxyForUUID:*(void *)(*((void *)&v66 + 1) + 8 * k)];
          if (v38) {
            [v14 addObject:v38];
          }
        }
        uint64_t v35 = [v33 countByEnumeratingWithState:&v66 objects:buf count:16];
      }
      while (v35);
    }

    goto LABEL_47;
  }
  if (([a1[4] isEqualToString:@"com.apple.LaunchServices.pluginsunregistered"] & 1) == 0
    && ![a1[4] isEqualToString:@"com.apple.LaunchServices.pluginswillberemoved"])
  {
    id v14 = 0;
    __int16 v30 = 0;
    goto LABEL_51;
  }
  id v23 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  id v24 = a1[5];
  v58[0] = MEMORY[0x1E4F143A8];
  v58[1] = 3221225472;
  v58[2] = __LSApplicationWorkspacePluginsChangedCallback_block_invoke_2;
  v58[3] = &unk_1E522CFA0;
  id v59 = v3;
  id v25 = v23;
  id v60 = v25;
  [v24 enumerateKeysAndObjectsUsingBlock:v58];
  id v26 = a1[4];
  id v14 = v25;
  int v27 = [v26 isEqualToString:@"com.apple.LaunchServices.pluginsunregistered"];
  __int16 v28 = &selRef_pluginsDidUninstall_;
  if (!v27) {
    __int16 v28 = &selRef_pluginsWillUninstall_;
  }
  id v29 = *v28;

  __int16 v30 = 0;
  if (v29)
  {
LABEL_48:
    if ([v14 count] && (objc_opt_respondsToSelector() & 1) != 0) {
      objc_msgSend(a1[6], v29, v14);
    }
  }
LABEL_51:
  if ([v30 count])
  {
    do
    {
      uint64_t v39 = MEMORY[0x18530F680]();
      uint64_t v40 = [v30 lastObject];
      CFMachPortContext context = (void *)v39;
      if (objc_opt_respondsToSelector())
      {
        __int16 v41 = [v40 applicationExtensionRecords];
      }
      else
      {
        __int16 v41 = 0;
      }
      [v40 _resolveAllProperties];
      [v40 detach];
      uint64_t v42 = v30;
      [v30 removeLastObject];

      long long v56 = 0u;
      long long v57 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      id v43 = v41;
      uint64_t v44 = [v43 countByEnumeratingWithState:&v54 objects:v75 count:16];
      if (v44)
      {
        uint64_t v45 = v44;
        uint64_t v46 = *(void *)v55;
        do
        {
          for (uint64_t m = 0; m != v45; ++m)
          {
            if (*(void *)v55 != v46) {
              objc_enumerationMutation(v43);
            }
            uint64_t v48 = *(void **)(*((void *)&v54 + 1) + 8 * m);
            char v49 = [v48 uniqueIdentifier];
            int v50 = [v3 containsObject:v49];

            if (v50)
            {
              [v48 _resolveAllProperties];
              [v48 detach];
            }
          }
          uint64_t v45 = [v43 countByEnumeratingWithState:&v54 objects:v75 count:16];
        }
        while (v45);
      }

      __int16 v30 = v42;
    }
    while ([v42 count]);
  }
}

void __LSApplicationWorkspacePluginsChangedCallback_block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = (objc_class *)MEMORY[0x1E4F29128];
  id v7 = a2;
  id v8 = (void *)[[v6 alloc] initWithUUIDString:v7];

  [*(id *)(a1 + 32) addObject:v8];
  id v19 = v5;
  uint64_t v9 = [v19 objectForKeyedSubscript:*MEMORY[0x1E4F1CFF8]];
  id v10 = [v19 objectForKeyedSubscript:@"NSExtensionIdentifier"];
  uint64_t v11 = [v19 objectForKeyedSubscript:@"LSEffectiveIdentifier"];
  id v12 = [v19 objectForKeyedSubscript:*MEMORY[0x1E4F1D020]];
  uint64_t v13 = [v19 objectForKeyedSubscript:@"_LSBundlePath"];
  id v14 = (void *)v13;
  if (v8 && v13)
  {
    BOOL v15 = !v9 || v10 == 0;
    if (!v15 && v12 != 0)
    {
      uint64_t v17 = (void *)[objc_alloc(MEMORY[0x1E4F1CB10]) initFileURLWithPath:v13 isDirectory:1];
      uint64_t v18 = +[LSPlugInKitProxy plugInKitProxyForUUID:v8 bundleIdentifier:v9 pluginIdentifier:v10 effectiveIdentifier:v11 version:v12 bundleURL:v17];
      if (v18) {
        [*(id *)(a1 + 40) addObject:v18];
      }
    }
  }
}

void __LSApplicationStateChangedCallback_block_invoke(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  _LSContextInvalidate();
  unint64_t v2 = [*(id *)(a1 + 32) allKeys];
  id v3 = v2;
  if (v2 && [v2 count] && (objc_opt_respondsToSelector() & 1) != 0)
  {
    uint64_t v4 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v3, "count"));
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    id v5 = v3;
    uint64_t v6 = [v5 countByEnumeratingWithState:&v12 objects:v18 count:16];
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)v13;
      do
      {
        uint64_t v9 = 0;
        do
        {
          if (*(void *)v13 != v8) {
            objc_enumerationMutation(v5);
          }
          id v10 = +[LSApplicationProxy applicationProxyForIdentifier:](LSApplicationProxy, "applicationProxyForIdentifier:", *(void *)(*((void *)&v12 + 1) + 8 * v9), (void)v12);
          [v4 addObject:v10];

          ++v9;
        }
        while (v7 != v9);
        uint64_t v7 = [v5 countByEnumeratingWithState:&v12 objects:v18 count:16];
      }
      while (v7);
    }

    uint64_t v11 = _LSDefaultLog();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)stat buf = 138412290;
      uint64_t v17 = v4;
      _os_log_impl(&dword_182959000, v11, OS_LOG_TYPE_DEFAULT, "Preparing to call applicationStateDidChange: with %@", buf, 0xCu);
    }

    [*(id *)(a1 + 40) applicationStateDidChange:v4];
  }
}

uint64_t __unsubscribeFromLSAWDistributedNotification_block_invoke(uint64_t a1, int a2)
{
  if (a2) {
    return (a2 - 1);
  }
  id v3 = _LSDefaultLog();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT)) {
    __unsubscribeFromLSAWDistributedNotification_block_invoke_cold_1();
  }

  return 0;
}

uint64_t initUISOpenApplicationOptionClickAttribution()
{
  dispatch_queue_t v0 = (void *)UIKitServicesLibrary_frameworkLibrary_0;
  if (!UIKitServicesLibrary_frameworkLibrary_0)
  {
    dispatch_queue_t v0 = dlopen("/System/Library/PrivateFrameworks/UIKitServices.framework/UIKitServices", 2);
    UIKitServicesLibrary_frameworkLibrary_0 = (uint64_t)v0;
  }
  uint64_t result = *(void *)dlsym(v0, "UISOpenApplicationOptionClickAttribution");
  constantUISOpenApplicationOptionClickAttribution = result;
  getUISOpenApplicationOptionClickAttribution[0] = UISOpenApplicationOptionClickAttributionFunction;
  return result;
}

uint64_t UISOpenApplicationOptionClickAttributionFunction()
{
  return constantUISOpenApplicationOptionClickAttribution;
}

uint64_t initUISOpenApplicationOptionPasteSharingToken()
{
  dispatch_queue_t v0 = (void *)UIKitServicesLibrary_frameworkLibrary_0;
  if (!UIKitServicesLibrary_frameworkLibrary_0)
  {
    dispatch_queue_t v0 = dlopen("/System/Library/PrivateFrameworks/UIKitServices.framework/UIKitServices", 2);
    UIKitServicesLibrary_frameworkLibrary_0 = (uint64_t)v0;
  }
  uint64_t result = *(void *)dlsym(v0, "UISOpenApplicationOptionPasteSharingToken");
  constantUISOpenApplicationOptionPasteSharingToken = result;
  getUISOpenApplicationOptionPasteSharingToken[0] = UISOpenApplicationOptionPasteSharingTokenFunction;
  return result;
}

uint64_t UISOpenApplicationOptionPasteSharingTokenFunction()
{
  return constantUISOpenApplicationOptionPasteSharingToken;
}

void __pluginQueryFault_block_invoke()
{
  dispatch_queue_t v0 = _LSPluginFaultLog();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT)) {
    __pluginQueryFault_block_invoke_cold_1();
  }
}

void __enumeratePluginsMatchingQuery_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  uint64_t v6 = (void *)MEMORY[0x18530F680]();
  if (v8)
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    id v7 = v5;
    if (!v7)
    {
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -10810, (uint64_t)"enumeratePluginsMatchingQuery_block_invoke", 324, 0);
      id v7 = (id)objc_claimAutoreleasedReturnValue();
    }
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

void __mapBundleIdentifiersToUUIDs_block_invoke(uint64_t a1, void *a2)
{
}

void __mapBundleIdentifiersToUUIDs_block_invoke_2(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v30 = a2;
  id v7 = a3;
  id v8 = a4;
  if (*(unsigned char *)(a1 + 48)) {
    uint64_t v9 = v30;
  }
  else {
    uint64_t v9 = v7;
  }
  id v10 = v9;
  if (*(unsigned char *)(a1 + 48)) {
    uint64_t v11 = v7;
  }
  else {
    uint64_t v11 = v30;
  }
  id v12 = v11;
  long long v13 = v12;
  if (v10) {
    BOOL v14 = v12 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  if (v14)
  {
    uint64_t v15 = *(void *)(*(void *)(a1 + 40) + 8);
    id v16 = v8;
    uint64_t v17 = *(void **)(v15 + 40);
    *(void *)(v15 + 40) = v16;
  }
  else
  {
    id v29 = v8;
    uint64_t v17 = [MEMORY[0x1E4F1CA60] dictionary];
    unint64_t v18 = [v10 count];
    unint64_t v19 = [v13 count];
    if (v18 >= v19) {
      unint64_t v20 = v19;
    }
    else {
      unint64_t v20 = v18;
    }
    if (v20)
    {
      for (uint64_t i = 0; i != v20; ++i)
      {
        uint64_t v22 = [v10 objectAtIndexedSubscript:i];
        id v23 = [v17 objectForKeyedSubscript:v22];

        if (!v23)
        {
          id v23 = [MEMORY[0x1E4F1CA80] set];
          id v24 = [v10 objectAtIndexedSubscript:i];
          [v17 setObject:v23 forKeyedSubscript:v24];
        }
        id v25 = [v13 objectAtIndexedSubscript:i];
        [v23 addObject:v25];
      }
    }
    uint64_t v26 = [v17 copy];
    uint64_t v27 = *(void *)(*(void *)(a1 + 32) + 8);
    __int16 v28 = *(void **)(v27 + 40);
    *(void *)(v27 + 40) = v26;

    id v8 = v29;
  }
}

uint64_t __handleSaveObserverBehavior_block_invoke(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) operationWithUUID:*(void *)(a1 + 40) didFailToSaveWithError:a2];
}

uint64_t __handleSaveObserverBehavior_block_invoke_2(uint64_t a1, int a2, uint64_t a3)
{
  id v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  if (a2) {
    return objc_msgSend(v5, "operationWithUUIDWasSaved:", v6, a3);
  }
  else {
    return [v5 operationWithUUID:v6 didFailToSaveWithError:a3];
  }
}

void _LSSetCrashReporterMessage(void *a1)
{
  id v1 = a1;
  unint64_t v2 = v1;
  if (v1)
  {
    id v3 = strdup((const char *)[v1 UTF8String]);
    uint64_t v4 = _LSDefaultLog();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
      _LSSetCrashReporterMessage_cold_1();
    }
  }
  else
  {
    id v3 = 0;
  }
  uint64_t v5 = _LSSetCrashReporterMessage_messagePtr;
  uint64_t v6 = _LSSetCrashReporterMessage_messagePtr;
  atomic_compare_exchange_strong_explicit(&_LSSetCrashReporterMessage_messagePtr, (unint64_t *)&v6, (unint64_t)v3, memory_order_relaxed, memory_order_relaxed);
  if (v6 == v5) {
    id v7 = (void *)v5;
  }
  else {
    id v7 = v3;
  }
  free(v7);
  qword_1EB20D5F0 = _LSSetCrashReporterMessage_messagePtr;
}

uint64_t initMobileInstallationUpdatePlaceholderMetadata(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  id v9 = a1;
  id v10 = a4;
  uint64_t v11 = (void *)MobileInstallationLibrary_frameworkLibrary;
  if (!MobileInstallationLibrary_frameworkLibrary)
  {
    uint64_t v11 = dlopen("/System/Library/PrivateFrameworks/MobileInstallation.framework/MobileInstallation", 2);
    MobileInstallationLibrary_frameworkLibrary = (uint64_t)v11;
  }
  softLinkMobileInstallationUpdatePlaceholderMetadata[0] = (uint64_t (*)())dlsym(v11, "MobileInstallationUpdatePlaceholderMetadata");
  uint64_t v12 = ((uint64_t (*)(id, uint64_t, uint64_t, id, uint64_t))softLinkMobileInstallationUpdatePlaceholderMetadata[0])(v9, a2, a3, v10, a5);

  return v12;
}

uint64_t __dispatchAsyncToCallbackQueueWithTransaction_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

void __registerSingleMIDict_block_invoke(void **a1)
{
  unint64_t v2 = _LSDatabaseGetSeedingGroup();
  dispatch_group_enter(v2);

  if (a1[4] && ([a1[5] isEqualToString:@"Framework"] & 1) == 0)
  {
    if ([a1[5] isEqualToString:@"PluginKitPlugin"])
    {
      _registerMIPluginDictionary(a1[4], a1[6]);
    }
    else if (([a1[5] isEqualToString:@"CoreServices"] & 1) != 0 {
           || ([a1[5] isEqualToString:@"Internal"] & 1) != 0
    }
           || ([a1[5] isEqualToString:@"User"] & 1) != 0
           || ([a1[5] isEqualToString:@"System"] & 1) != 0
           || ([a1[5] isEqualToString:@"SystemAppPlaceholder"] & 1) != 0
           || [a1[5] isEqualToString:@"VPNPlugin"])
    {
      id v3 = objc_alloc(MEMORY[0x1E4F1CB10]);
      uint64_t v4 = [a1[4] objectForKey:@"Path"];
      uint64_t v5 = (void *)[v3 initFileURLWithPath:v4 isDirectory:1];

      Unique = (const void *)_CFBundleCreateUnique();
      _LSLogStepStart(4, 0, a1[7], @"registering app bundle", v7, v8, v9, v10, v28);
      BOOL v11 = registerApplicationWithDictionary(a1[4], 0x21u) == 0;
      _LSLogStepFinished(4, v11, a1[7], @"registered app bundle", v12, v13, v14, v15, v29);
      if (Unique) {
        CFRelease(Unique);
      }
      id v16 = [a1[4] objectForKeyedSubscript:@"ParallelPlaceholderPath"];
      if (v16)
      {
        uint64_t v17 = (void *)[a1[4] mutableCopy];
        uint64_t v18 = MEMORY[0x1E4F1CC38];
        [v17 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:@"IsPlaceholder"];
        [v17 setObject:v16 forKeyedSubscript:@"Path"];
        [v17 setObject:v18 forKeyedSubscript:@"IsParallelPlaceholder"];
        _LSLogStepStart(4, 0, a1[7], @"registering parallel placeholder", v19, v20, v21, v22, v30);
        BOOL v23 = registerApplicationWithDictionary(v17, 0x21u) == 0;
        _LSLogStepFinished(4, v23, a1[7], @"registered parallel placeholder", v24, v25, v26, v27, v31);
      }
    }
  }
  if (_LSLoggingQueue_onceToken != -1) {
    dispatch_once(&_LSLoggingQueue_onceToken, &__block_literal_global_1131);
  }
  dispatch_sync((dispatch_queue_t)_LSLoggingQueue_logQueue, &__block_literal_global_1129);
  uint64_t v32 = _LSDatabaseGetSeedingGroup();
  dispatch_group_leave(v32);
}

uint64_t initMobileInstallationEnumerateAllInstalledItemDictionaries(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = (void *)MobileInstallationLibrary_frameworkLibrary;
  if (!MobileInstallationLibrary_frameworkLibrary)
  {
    uint64_t v5 = dlopen("/System/Library/PrivateFrameworks/MobileInstallation.framework/MobileInstallation", 2);
    MobileInstallationLibrary_frameworkLibrary = (uint64_t)v5;
  }
  softLinkMobileInstallationEnumerateAllInstalledItemDictionaries[0] = (uint64_t (*)())dlsym(v5, "MobileInstallationEnumerateAllInstalledItemDictionaries");
  uint64_t v6 = ((uint64_t (*)(id, id))softLinkMobileInstallationEnumerateAllInstalledItemDictionaries[0])(v3, v4);

  return v6;
}

{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;

  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = (void *)MobileInstallationLibrary(void)::frameworkLibrary;
  if (!MobileInstallationLibrary(void)::frameworkLibrary)
  {
    uint64_t v5 = dlopen("/System/Library/PrivateFrameworks/MobileInstallation.framework/MobileInstallation", 2);
    MobileInstallationLibrary(void)::frameworkLibrary = (uint64_t)v5;
  }
  softLinkMobileInstallationEnumerateAllInstalledItemDictionaries[0] = (uint64_t (*)())dlsym(v5, "MobileInstallationEnumerateAllInstalledItemDictionaries");
  uint64_t v6 = ((uint64_t (*)(id, id))softLinkMobileInstallationEnumerateAllInstalledItemDictionaries[0])(v3, v4);

  return v6;
}

void ___getBlockToUpdateBundleRecordFromMIAndNotifyIfChanged_block_invoke(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  Unique = (const void *)_CFBundleCreateUnique();
  int v3 = registerApplicationWithDictionary(*(void **)(a1 + 40), 0x40000000u);
  if (v3)
  {
    int v4 = v3;
    uint64_t v5 = _LSDefaultLog();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      uint64_t v12 = *(void *)(a1 + 48);
      *(_DWORD *)stat buf = 67109634;
      *(_DWORD *)uint64_t v17 = v4;
      *(_WORD *)&void v17[4] = 2112;
      *(void *)&v17[6] = v11;
      *(_WORD *)&v17[14] = 2112;
      *(void *)&v17[16] = v12;
      _os_log_error_impl(&dword_182959000, v5, OS_LOG_TYPE_ERROR, "registerApplicationWithDictionary returned error %d for %@ (%@)", buf, 0x1Cu);
    }
  }
  uint64_t v6 = +[LSApplicationProxy applicationProxyForBundleURL:*(void *)(a1 + 32)];
  if ([v6 isInstalled])
  {
    uint64_t v7 = 7;
  }
  else if ([v6 isPlaceholder])
  {
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v8 = _LSProgressLog();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *(void *)(a1 + 32);
      uint64_t v14 = *(void *)(a1 + 48);
      *(_DWORD *)stat buf = 138412802;
      *(void *)uint64_t v17 = v6;
      *(_WORD *)&v17[8] = 2112;
      *(void *)&v17[10] = v13;
      *(_WORD *)&v17[18] = 2112;
      *(void *)&v17[20] = v14;
      _os_log_error_impl(&dword_182959000, v8, OS_LOG_TYPE_ERROR, "Got app proxy %@ for %@ (%@), not sending any notification", buf, 0x20u);
    }

    uint64_t v7 = 0;
  }
  uint64_t v9 = +[_LSInstallProgressService sharedInstance];
  uint64_t v15 = v6;
  uint64_t v10 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v15 count:1];
  [v9 sendNotification:v7 forAppProxies:v10 Plugins:0 completion:0];

  if (Unique) {
    CFRelease(Unique);
  }
}

void ___getBlockToUpdatePluginRecordFromMIAndNotifyIfChanged_block_invoke(uint64_t a1)
{
  v30[1] = *MEMORY[0x1E4F143B8];
  unint64_t v2 = (void *)(a1 + 32);
  Unique = (const void *)_CFBundleCreateUnique();
  uint64_t v5 = *(void **)(a1 + 40);
  uint64_t v4 = a1 + 40;
  _LSLogStepStart(4, 0, v5, @"registering app extension", v6, v7, v8, v9, v23);
  uint64_t v10 = (void *)*v2;
  uint64_t v11 = *(void *)(v4 + 8);
  uint64_t v29 = *(void **)v4;
  v30[0] = v11;
  uint64_t v12 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v30 forKeys:&v29 count:1];
  int v13 = _LSRegisterPluginWithInfo(v10, v12);

  if (v13)
  {
    uint64_t v14 = _LSDefaultLog();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = (void *)*v2;
      id v16 = *(void **)v4;
      LODWORD(v23) = 67109634;
      HIDWORD(v23) = v13;
      __int16 v24 = 2112;
      uint64_t v25 = v15;
      __int16 v26 = 2112;
      uint64_t v27 = v16;
      _os_log_error_impl(&dword_182959000, v14, OS_LOG_TYPE_ERROR, "_LSRegisterPluginWithInfo returned error %d for %@ (%@)", (uint8_t *)&v23, 0x1Cu);
    }
  }
  else
  {
    uint64_t v14 = +[LSPlugInKitProxy pluginKitProxyForURL:*v2];
    if (v14)
    {
      uint64_t v17 = +[_LSInstallProgressService sharedInstance];
      uint64_t v28 = v14;
      uint64_t v18 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v28 count:1];
      [v17 sendNotification:@"com.apple.LaunchServices.pluginsregistered" ForPlugins:v18];
    }
    else
    {
      uint64_t v17 = _LSDefaultLog();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
        ___getBlockToUpdatePluginRecordFromMIAndNotifyIfChanged_block_invoke_cold_1();
      }
    }
  }
  _LSLogStepFinished(4, v13 == 0, *(void **)v4, @"registered app extension", v19, v20, v21, v22, v23);
  if (Unique) {
    CFRelease(Unique);
  }
}

uint64_t __Block_byref_object_copy__1174(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(result + 48) = v2;
  return result;
}

void __Block_byref_object_dispose__1175(uint64_t a1)
{
}

void ___uninstallMIBundlesNotInSet_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a3 + 168);
  if (v3 == 13 || v3 == 2)
  {
    id v10 = (id)_CSStringCopyCFString();
    uint64_t v8 = [[_LSEnumeratedBundleInfo alloc] initWithBundleID:v10 isPlaceholder:(*(void *)(a3 + 172) >> 18) & 1];
    if (([*(id *)(a1 + 32) containsObject:v8] & 1) == 0)
    {
      uint64_t v9 = -[_LSAppToUnregister initWithContext:bundleUnit:bundleData:]([_LSAppToUnregister alloc], *(void *)(*(void *)(a1 + 48) + 8) + 48, a2, a3);
      [*(id *)(a1 + 40) addObject:v9];
    }
  }
}

void OUTLINED_FUNCTION_4_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_5_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x16u);
}

void OUTLINED_FUNCTION_11_0(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void OUTLINED_FUNCTION_17_0(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x12u);
}

void sub_1829FB6AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829FB814(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829FB8C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829FB9C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829FBA54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829FBBC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829FBC88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829FBD8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829FBEA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829FBFA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829FC074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1829FC1D8(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1829FC4F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829FC5A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1829FC714(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829FC7A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1829FCA84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829FCB1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1829FCD00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_1829FCE48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829FCF38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829FD010(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829FD100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1829FD278(_Unwind_Exception *a1)
{
  uint64_t v5 = v3;

  _Unwind_Resume(a1);
}

void sub_1829FD4B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829FD720(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829FD8F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829FDD1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829FE20C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  _Unwind_Resume(a1);
}

void sub_1829FE4F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829FE814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1829FE9AC(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1829FEBC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829FEDB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829FEE4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829FEEC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829FEF5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829FF0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_1829FF1AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829FF31C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829FF450(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829FF884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,void *a42)
{
  _Unwind_Resume(a1);
}

void sub_1829FF9F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829FFA8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1829FFB5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829FFBE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1829FFC5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1829FFDF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1829FFF70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A00020(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A00174(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A002D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A0037C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A00430(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id __copy_helper_atomic_property_(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  id result = *(id *)(a2 + 40);
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_182A005B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A008F4(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<LSBinding,false>::~__optional_destruct_base[abi:nn180100](v3);
  _Unwind_Resume(a1);
}

uint64_t std::optional<LSBinding>::operator=[abi:nn180100]<LSBinding,void>(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 48);
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  if (v4)
  {
    uint64_t v6 = *(void *)(a2 + 32);
    *(void *)(a2 + 32) = 0;
    uint64_t v7 = *(void **)(a1 + 32);
    *(void *)(a1 + 32) = v6;

    uint64_t v8 = *(void *)(a2 + 40);
    *(void *)(a2 + 40) = 0;
    uint64_t v9 = *(void **)(a1 + 40);
    *(void *)(a1 + 40) = v8;
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 32);
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    *(_OWORD *)(a1 + 32) = v10;
    *(unsigned char *)(a1 + 48) = 1;
  }
  return a1;
}

void sub_182A00B10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A00DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_182A01118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void **a36)
{
  _Block_object_dispose(&a27, 8);
  a36 = a10;
  std::vector<LSApplicationRecord * {__strong}>::__destroy_vector::operator()[abi:nn180100](&a36);

  _Unwind_Resume(a1);
}

void sub_182A012CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

char *std::vector<LSApplicationRecord * {__strong}>::emplace_back<LSApplicationRecord * {__strong}&>(char **a1, id *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = (v7 - *a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      abort();
    }
    uint64_t v10 = v5 - (void)*a1;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v25 = v4;
    if (v12) {
      int v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<os_eligibility_answer_t>>(v4, v12);
    }
    else {
      int v13 = 0;
    }
    uint64_t v14 = &v13[8 * v9];
    uint64_t v15 = &v13[8 * v12];
    __int16 v24 = v15;
    *(void *)uint64_t v14 = *a2;
    uint64_t v8 = v14 + 8;
    v23.i64[1] = (uint64_t)(v14 + 8);
    uint64_t v17 = *a1;
    id v16 = a1[1];
    if (v16 == *a1)
    {
      int64x2_t v19 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *(void *)id v16 = 0;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      int64x2_t v19 = *(int64x2_t *)a1;
      uint64_t v8 = (char *)v23.i64[1];
      uint64_t v15 = v24;
    }
    *a1 = v14;
    a1[1] = v8;
    int64x2_t v23 = v19;
    uint64_t v20 = a1[2];
    a1[2] = v15;
    __int16 v24 = v20;
    uint64_t v22 = v19.i64[0];
    std::__split_buffer<LSApplicationRecord * {__strong}>::~__split_buffer((uint64_t)&v22);
  }
  else
  {
    *(void *)uint64_t v7 = *a2;
    uint64_t v8 = v7 + 8;
  }
  a1[1] = v8;
  return v8 - 8;
}

void sub_182A0147C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A01844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Block_object_dispose((const void *)(v25 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__141(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__142(uint64_t a1)
{
}

void sub_182A019E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

__n128 std::__optional_storage_base<LSBinding,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<LSBinding,false>>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48))
  {
    if (*(unsigned char *)(a1 + 48))
    {
      long long v4 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v4;
      uint64_t v5 = *(void *)(a2 + 32);
      *(void *)(a2 + 32) = 0;
      unint64_t v6 = *(void **)(a1 + 32);
      *(void *)(a1 + 32) = v5;

      uint64_t v7 = *(void *)(a2 + 40);
      *(void *)(a2 + 40) = 0;
      uint64_t v8 = *(void **)(a1 + 40);
      *(void *)(a1 + 40) = v7;
    }
  }
  else if (*(unsigned char *)(a1 + 48))
  {
    std::__optional_destruct_base<LSBinding,false>::reset[abi:nn180100](a1);
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v10;
    __n128 result = *(__n128 *)(a2 + 32);
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    *(__n128 *)(a1 + 32) = result;
    *(unsigned char *)(a1 + 48) = 1;
  }
  return result;
}

void std::__optional_destruct_base<LSBinding,false>::reset[abi:nn180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {

    *(unsigned char *)(a1 + 48) = 0;
  }
}

uint64_t std::__optional_destruct_base<LSBinding,false>::~__optional_destruct_base[abi:nn180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
  }
  return a1;
}

void std::__throw_bad_optional_access[abi:nn180100]()
{
  std::__libcpp_verbose_abort("bad_optional_access was thrown in -fno-exceptions mode");
  std::vector<LSApplicationRecord * {__strong}>::__destroy_vector::operator()[abi:nn180100](v0);
}

void std::vector<LSApplicationRecord * {__strong}>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    long long v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unint64_t v6 = (void *)*((void *)v4 - 1);
        v4 -= 8;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<LSApplicationRecord * {__strong}>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void _LSWriteApplicationPlaceholderToURL(void *a1, void *a2, uint64_t a3, void *a4)
{
  v21[1] = *MEMORY[0x1E4F143B8];
  id v7 = a4;
  if (a1)
  {
    int v8 = _CFURLIsFileURL();
    if (a2)
    {
      if (v8)
      {
        int v9 = _CFURLIsFileURL();
        if (v7)
        {
          if (!a3 && v9)
          {
            id v10 = a1;
            id v11 = a2;
            if (_LSGetPlaceholderQueue(void)::once != -1) {
              dispatch_once(&_LSGetPlaceholderQueue(void)::once, &__block_literal_global_10);
            }
            unint64_t v12 = _LSGetPlaceholderQueue(void)::result;
            v16[0] = MEMORY[0x1E4F143A8];
            v16[1] = 3221225472;
            _OWORD v16[2] = ___LSWriteApplicationPlaceholderToURL_block_invoke;
            v16[3] = &unk_1E522C040;
            id v17 = v10;
            id v18 = v11;
            id v19 = v7;
            id v13 = v11;
            id v14 = v10;
            dispatch_async(v12, v16);

            goto LABEL_12;
          }
        }
      }
    }
  }
  if (v7)
  {
    uint64_t v20 = *MEMORY[0x1E4F28228];
    v21[0] = @"invalid input parameters";
    id v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v21 forKeys:&v20 count:1];
    id v15 = _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -50, (uint64_t)"_LSWriteApplicationPlaceholderToURL", 69, v14);
    (*((void (**)(id, void, id))v7 + 2))(v7, 0, v15);
LABEL_12:
  }
}

void sub_182A01E40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A01F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t _LSWriteBundlePlaceholderToURLInternal(id *a1, NSURL *a2, NSURL *a3)
{
  uint64_t v150 = *MEMORY[0x1E4F143B8];
  long long v4 = a2;
  uint64_t v5 = a3;
  uint64_t v101 = v4;
  CFArrayRef v102 = v5;
  if (v4)
  {
    if (v5) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v95 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v96 = objc_msgSend(NSString, "stringWithUTF8String:", "OSStatus _LSWriteBundlePlaceholderToURLInternal(Context &, NSURL *__strong, NSURL *__strong)");
    [v95 handleFailureInFunction:v96, @"LSAppPlaceholders.mm", 92, @"Invalid parameter not satisfying: %@", @"inSrcURL != nil" file lineNumber description];

    if (v102) {
      goto LABEL_3;
    }
  }
  uint64_t v97 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v98 = objc_msgSend(NSString, "stringWithUTF8String:", "OSStatus _LSWriteBundlePlaceholderToURLInternal(Context &, NSURL *__strong, NSURL *__strong)");
  [v97 handleFailureInFunction:v98, @"LSAppPlaceholders.mm", 93, @"Invalid parameter not satisfying: %@", @"inDestURL != nil" file lineNumber description];

LABEL_3:
  id v145 = 0;
  uint64_t v6 = FSNodeCreateWithURL((uint64_t)v4, 1, &v145);
  if (v6)
  {
LABEL_4:
    id v7 = 0;
LABEL_9:
    uint64_t v99 = 0;
    unsigned int v142 = 0;
    uint64_t v141 = 0;
    int v140 = 0;
    goto LABEL_10;
  }
  if (([v145 isDirectory] & 1) == 0)
  {
    id v7 = 0;
    uint64_t v6 = 4294965889;
    goto LABEL_9;
  }
  path.__pn_.__r_.__value_.__r.__words[0] = 0;
  int v8 = [(NSURL *)v102 URLByDeletingLastPathComponent];
  uint64_t v6 = FSNodeCreateWithURL((uint64_t)v8, 1, (id *)&path.__pn_.__r_.__value_.__l.__data_);

  if (v6)
  {

    goto LABEL_4;
  }
  id v20 = objc_alloc_init(MEMORY[0x1E4F28CB8]);
  uint64_t v21 = [path.__pn_.__r_.__value_.__l.__data_ URL];
  id v144 = 0;
  uint64_t v22 = [v20 URLForDirectory:99 inDomain:1 appropriateForURL:v21 create:1 error:&v144];
  id v23 = v144;

  if (v22)
  {
    id v143 = v23;
    int64_t v104 = [[FSNode alloc] initWithURL:v22 flags:8 error:&v143];
    id v24 = v143;

    if (v104)
    {
      uint64_t v6 = 0;
      goto LABEL_104;
    }
    id v23 = v24;
  }
  uint64_t v6 = _LSGetOSStatusFromNSError(v23);
  int64_t v104 = 0;
  id v24 = v23;
LABEL_104:

  if (v6)
  {
    id v7 = v104;
    goto LABEL_9;
  }
  uint64_t v6 = LaunchServices::Database::Context::status(a1);
  uint64_t v99 = 0;
  unsigned int v142 = 0;
  uint64_t v141 = 0;
  int v140 = 0;
  id v7 = v104;
  if (v6) {
    goto LABEL_10;
  }
  +[_LSDServiceDomain defaultServiceDomain]();
  id v76 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  uint64_t v77 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)a1, v76, 0);

  id v7 = v104;
  int v78 = _LSGetBundleClassForNode(v77, v145);
  if (v78 != 2)
  {
    if (v78 != 12)
    {
      uint64_t v6 = 4294956485;
      goto LABEL_30;
    }
    id v139 = 0;
    uint64_t v79 = [v145 extensionWithError:&v139];
    id v80 = v139;
    int v81 = v80;
    if (v79)
    {
      BOOL v82 = [v79 caseInsensitiveCompare:@"appex"] == 0;

      if (!v82)
      {
        uint64_t v6 = 4294956485;
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v6 = _LSGetOSStatusFromNSError(v80);

      if (v6)
      {
        uint64_t v99 = 0;
LABEL_128:
        id v7 = v104;
        goto LABEL_10;
      }
    }
    +[_LSDServiceDomain defaultServiceDomain]();
    uint64_t v89 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
    uint64_t v90 = (void **)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)a1, v89, 0);

    uint64_t v91 = *v90;
    id v138 = 0;
    uint64_t v92 = _LSPluginFindWithInfo(v91, 0, 0, 0, v145, &v140, &v138);
    id v93 = v138;
    uint64_t v94 = v93;
    uint64_t v99 = v92;
    if (v92) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = _LSGetOSStatusFromNSError(v93);
    }

    goto LABEL_128;
  }
  +[_LSDServiceDomain defaultServiceDomain]();
  uint64_t v86 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  uint64_t v87 = (LSContext *)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)a1, v86, 0);

  id v7 = v104;
  uint64_t v6 = _LSFindOrRegisterBundleNode(v87, v145, 0, 0x2000000u, 0, &v142, &v141);
  if (v6 == -9499)
  {
    uint64_t v88 = _LSDefaultLog();
    if (os_log_type_enabled(v88, OS_LOG_TYPE_INFO))
    {
      LODWORD(path.__pn_.__r_.__value_.__l.__data_) = 138477827;
      *(std::string::size_type *)((char *)path.__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v145;
      _os_log_impl(&dword_182959000, v88, OS_LOG_TYPE_INFO, "Unable to find or register bundle for node %{private}@, so returning kLSApplicationNotFoundErr.", (uint8_t *)&path, 0xCu);
    }

    uint64_t v99 = 0;
    uint64_t v6 = 4294956482;
    id v7 = v104;
    goto LABEL_12;
  }
  uint64_t v99 = 0;
LABEL_10:
  if (v6 && v6 != -10814) {
    goto LABEL_30;
  }
LABEL_12:
  id v137 = 0;
  int64_t v104 = v7;
  int v9 = [v145 bundleInfoDictionaryWithError:&v137];
  id v10 = v137;
  id v11 = v10;
  if (v9)
  {
    unint64_t v12 = (void *)[v9 mutableCopy];
    id v13 = v12;
    if (v12)
    {
      [v12 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:@"IsPlaceholder"];
      [v13 setObject:&unk_1ECB43300 forKeyedSubscript:@"LSInstallType"];
      [v13 removeObjectForKey:@"CFBundleInfoPlistURL"];
      [v13 removeObjectForKey:@"CFBundleRawInfoPlistURL"];
      id v14 = [MEMORY[0x1E4F28F98] dataWithPropertyList:v13 format:200 options:0 error:0];
      if (v14)
      {
        id v15 = [(FSNode *)v7 childNodeWithRelativePath:@"Info.plist" flags:0 error:0];
        id v16 = v15;
        if (v15)
        {
          id v17 = [v15 URL];
          id v136 = 0;
          char v18 = [v14 writeToURL:v17 options:1 error:&v136];
          id v19 = v136;

          if (v18) {
            uint64_t v6 = 0;
          }
          else {
            uint64_t v6 = _LSGetOSStatusFromNSError(v19);
          }
        }
      }
    }
    else
    {
      uint64_t v6 = 4294967255;
    }
  }
  else
  {
    uint64_t v6 = _LSGetOSStatusFromNSError(v10);
  }

  if (v6) {
    goto LABEL_29;
  }
  __int16 v26 = [v145 URL];
  uint64_t v27 = [v26 URLByDeletingLastPathComponent];

  if (v27
    && (uint64_t v28 = (id)_LSCopyiTunesMetadataDictionaryForAppContainerURL((CFURLRef)v27), v28, v28))
  {
    uint64_t v29 = [MEMORY[0x1E4F28F98] dataWithPropertyList:v28 format:200 options:0 error:0];
    if (v29)
    {
      uint64_t v30 = [(FSNode *)v104 childNodeWithRelativePath:@"iTunesMetadata.plist" flags:0 error:0];
      uint64_t v31 = v30;
      if (v30)
      {
        uint64_t v32 = [v30 URL];
        id v135 = 0;
        char v33 = [v29 writeToURL:v32 options:1 error:&v135];
        id v34 = v135;

        if (v33) {
          uint64_t v6 = 0;
        }
        else {
          uint64_t v6 = _LSGetOSStatusFromNSError(v34);
        }
      }
      else
      {
        uint64_t v6 = 0;
      }
    }
    else
    {
      uint64_t v6 = 0;
    }

    if (v6) {
      goto LABEL_29;
    }
  }
  else
  {
    uint64_t v35 = _LSDefaultLog();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
      _LSWriteBundlePlaceholderToURLInternal((uint64_t)v101, v35);
    }
  }
  uint64_t v36 = (__CFBundle *)[v145 copyCFBundleWithError:0];
  if (v36)
  {
    CFTypeRef cf = v36;
    long long v133 = 0u;
    long long v134 = 0u;
    long long v131 = 0u;
    long long v132 = 0u;
    obuint64_t j = CFBundleCopyBundleLocalizations(v36);
    uint64_t v37 = [(__CFArray *)obj countByEnumeratingWithState:&v131 objects:v149 count:16];
    if (v37)
    {
      uint64_t v38 = *(void *)v132;
      do
      {
        for (uint64_t i = 0; i != v37; ++i)
        {
          if (*(void *)v132 != v38) {
            objc_enumerationMutation(obj);
          }
          uint64_t v40 = *(void **)(*((void *)&v131 + 1) + 8 * i);
          __int16 v41 = v104;
          uint64_t v42 = [v40 stringByAppendingPathExtension:@"lproj"];
          _LSCreatePlaceholderSubfolder(v41, v42);
          id v43 = (FSNode *)objc_claimAutoreleasedReturnValue();

          if (v43)
          {
            uint64_t v44 = [@"InfoPlist" stringByAppendingPathExtension:@"strings"];
            _LSCopyResourceFileToPlaceholder(cf, v43, (NSString *)v40, v44);
          }
        }
        uint64_t v37 = [(__CFArray *)obj countByEnumeratingWithState:&v131 objects:v149 count:16];
      }
      while (v37);
    }

    if (IconServicesLibrary(void)::frameworkLibrary
      || (IconServicesLibrary(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/IconServices.framework/IconServices", 2)) != 0)
    {
      objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", @"CFBundlePrimaryIcon", @"CFBundleAlternateIcons", 0);
      CFSetRef v45 = (const __CFSet *)objc_claimAutoreleasedReturnValue();
      if (softLinkLICopyIconPathsFromBundleForStyles) {
        uint64_t v46 = (void *)softLinkLICopyIconPathsFromBundleForStyles(cf, v45);
      }
      else {
        uint64_t v46 = 0;
      }
      long long v129 = 0u;
      long long v130 = 0u;
      long long v127 = 0u;
      long long v128 = 0u;
      CFSetRef v47 = v46;
      uint64_t v48 = [(__CFSet *)v47 countByEnumeratingWithState:&v127 objects:v148 count:16];
      if (v48)
      {
        uint64_t v49 = *(void *)v128;
        do
        {
          for (uint64_t j = 0; j != v48; ++j)
          {
            if (*(void *)v128 != v49) {
              objc_enumerationMutation(v47);
            }
            _LSCopyResourceURLToPlaceholder(cf, v104, *(NSURL **)(*((void *)&v127 + 1) + 8 * j));
          }
          uint64_t v48 = [(__CFSet *)v47 countByEnumeratingWithState:&v127 objects:v148 count:16];
        }
        while (v48);
      }

      _LSCopyResourceFileToPlaceholder(cf, v104, 0, &cfstr_AssetsCar.isa);
    }
    else
    {
      if (!v141) {
        goto LABEL_68;
      }
      +[_LSDServiceDomain defaultServiceDomain]();
      int v83 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
      long long v84 = (id *)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)a1, v83, 0);

      id v85 = *v84;
      uint64_t v120 = MEMORY[0x1E4F143A8];
      uint64_t v121 = 3321888768;
      int v122 = ___ZL38_LSWriteBundlePlaceholderToURLInternalRN14LaunchServices8Database7ContextEP5NSURLS4__block_invoke;
      int v123 = &unk_1ECB17990;
      CFSetRef v45 = (const __CFSet *)v85;
      CFSetRef v124 = v45;
      CFRetain(cf);
      uint64_t v125 = v104;
      _CSArrayEnumerateAllValues();

      CFRelease(cf);
      CFTypeRef v126 = 0;
      CFSetRef v47 = v45;
    }

LABEL_68:
    CFRelease(cf);
  }
  id v51 = v141;
  if (v141)
  {
    if (!v141->iconFileNames) {
      goto LABEL_73;
    }
    +[_LSDServiceDomain defaultServiceDomain]();
    id v52 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
    id v53 = (id *)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)a1, v52, 0);

    id v54 = *v53;
    path.__pn_.__r_.__value_.__r.__words[0] = 0;
    path.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)&path;
    path.__pn_.__r_.__value_.__r.__words[2] = 0x2020000000;
    char v147 = 0;
    v118[0] = 0;
    v118[1] = v118;
    v118[2] = 0x2020000000;
    char v119 = 0;
    uint64_t v109 = MEMORY[0x1E4F143A8];
    uint64_t v110 = 3221225472;
    uint64_t v111 = ___ZL38_LSWriteBundlePlaceholderToURLInternalRN14LaunchServices8Database7ContextEP5NSURLS4__block_invoke_59;
    uint64_t v112 = &unk_1E522D288;
    id v113 = v54;
    p_std::__fs::filesystem::path path = &path;
    size_t v116 = v118;
    id v114 = v104;
    unsigned int v117 = a1;
    id v55 = v54;
    _CSArrayEnumerateAllValues();

    _Block_object_dispose(v118, 8);
    _Block_object_dispose(&path, 8);
    id v51 = v141;
  }
  if (!v51)
  {
LABEL_74:
    if (!v99 || !*(_DWORD *)(v99 + 140)) {
      goto LABEL_87;
    }
    goto LABEL_76;
  }
LABEL_73:
  if (!v51->base.entitlements) {
    goto LABEL_74;
  }
LABEL_76:
  +[_LSDServiceDomain defaultServiceDomain]();
  long long v56 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  long long v57 = (id *)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)a1, v56, 0);

  uint64_t v58 = (_LSDatabase *)*v57;
  id v60 = v58;
  if (v141 && (unsigned int entitlements = v141->base.entitlements) != 0 || v99 && (unsigned int entitlements = *(_DWORD *)(v99 + 140)) != 0)
  {
    long long v62 = _LSPlistGetDictionary(v58, entitlements, v59);
    if (v62)
    {
      long long v63 = [MEMORY[0x1E4F28F98] dataWithPropertyList:v62 format:200 options:0 error:0];
      if (v63)
      {
        long long v64 = [(FSNode *)v104 childNodeWithRelativePath:@"PlaceholderEntitlements.plist" flags:0 error:0];
        long long v65 = v64;
        if (v64)
        {
          long long v66 = [v64 URL];
          [v63 writeToURL:v66 atomically:1];
        }
      }
    }
  }

LABEL_87:
  path.__pn_.__r_.__value_.__r.__words[0] = 0;
  uint64_t v67 = *MEMORY[0x1E4F1C5E8];
  if ([v145 getResourceValue:&path forKey:*MEMORY[0x1E4F1C5E8] options:1 error:0])
  {
    long long v68 = [(FSNode *)v104 URL];
    v107[0] = MEMORY[0x1E4F143A8];
    v107[1] = 3221225472;
    v107[2] = ___ZL38_LSWriteBundlePlaceholderToURLInternalRN14LaunchServices8Database7ContextEP5NSURLS4__block_invoke_2;
    v107[3] = &unk_1E522D2B0;
    uint64_t v108 = path.__pn_.__r_.__value_.__l.__data_;
    XCFURLEnumerate((uint64_t)v68, 1, 0, v107);

    [(FSNode *)v104 setResourceValue:path.__pn_.__r_.__value_.__r.__words[0] forKey:v67 options:3 error:0];
  }

  [(FSNode *)v104 setResourceValue:MEMORY[0x1E4F1CC38] forKey:*MEMORY[0x1E4F1C658] options:3 error:0];
  id v106 = 0;
  BOOL v69 = [(FSNode *)v104 getFileSystemRepresentation:&path error:&v106];
  id v70 = v106;
  long long v71 = v70;
  if (!v69)
  {
    uint64_t v6 = _LSGetOSStatusFromNSError(v70);

    if (!v6) {
      goto LABEL_92;
    }
LABEL_29:
    id v7 = v104;
    goto LABEL_30;
  }

LABEL_92:
  id v7 = v104;
  long long v72 = [(NSURL *)v102 fileSystemRepresentation];
  rename(&path, v72, v73);
  if (!v74)
  {
    uint64_t v6 = 0;
    goto LABEL_34;
  }
  __int16 v75 = __error();
  uint64_t v6 = _LSGetOSStatusFromPOSIXErrorCode(*v75);
LABEL_30:
  if (v7
    && v6
    && [(FSNode *)v7 getFileSystemRepresentation:&path error:0])
  {
    removefile((const char *)&path, 0, 1u);
  }
LABEL_34:

  return v6;
}

void sub_182A02E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *exception_objecta, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void ___ZL22_LSGetPlaceholderQueuev_block_invoke()
{
  uint64_t v2 = dispatch_queue_attr_make_with_autorelease_frequency(MEMORY[0x1E4F14430], DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v0 = dispatch_queue_create("com.apple.launchservices.app-placeholders", v2);
  uint64_t v1 = (void *)_LSGetPlaceholderQueue(void)::result;
  _LSGetPlaceholderQueue(void)::__n128 result = (uint64_t)v0;
}

uint64_t LaunchServices::Database::Context::status(id *this)
{
  +[_LSDServiceDomain defaultServiceDomain]();
  uint64_t v2 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  uint64_t v3 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)this, v2, 0);

  if (v3)
  {
    long long v4 = 0;
  }
  else
  {
    id v6 = this[3];
    long long v4 = v6;
    if (v6)
    {
      uint64_t v5 = _LSGetOSStatusFromNSError(v6);
      goto LABEL_6;
    }
  }
  uint64_t v5 = 0;
LABEL_6:

  return v5;
}

void sub_182A032C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSCopyResourceFileToPlaceholder(__CFBundle *a1, FSNode *a2, NSString *a3, NSString *a4)
{
  id v11 = a2;
  id v7 = a3;
  int v8 = a4;
  if (a1 && v11 && v8)
  {
    if (v7)
    {
      int v9 = (NSURL *)CFBundleCopyResourceURLForLocalization(a1, v8, 0, 0, v7);
      if (!v9) {
        goto LABEL_9;
      }
    }
    else
    {
      CFURLRef v10 = CFBundleCopyBundleURL(a1);
      int v9 = [(__CFURL *)v10 URLByAppendingPathComponent:v8 isDirectory:0];

      if (!v9)
      {
LABEL_9:

        goto LABEL_10;
      }
    }
    _LSCopyResourceURLToPlaceholder(a1, v11, v9);
    goto LABEL_9;
  }
LABEL_10:
}

void sub_182A033C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _LSCopyResourceURLToPlaceholder(__CFBundle *a1, FSNode *a2, NSURL *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (a1 && v5 && v6)
  {
    id v14 = 0;
    BOOL v8 = [(NSURL *)v6 getResourceValue:&v14 forKey:*MEMORY[0x1E4F1C670] error:0];
    id v9 = v14;
    CFURLRef v10 = v9;
    if (v9) {
      BOOL v11 = v8;
    }
    else {
      BOOL v11 = 0;
    }
    if (v11 && [v9 BOOLValue])
    {
      unint64_t v12 = [(NSURL *)v7 lastPathComponent];
      id v13 = [(FSNode *)v5 childNodeWithRelativePath:v12 flags:0 error:0];

      if (v13 && [v13 getFileSystemRepresentation:to error:0]) {
        copyfile([(NSURL *)v7 fileSystemRepresentation], to, 0, 8u);
      }
    }
  }
}

void sub_182A03544(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void ___ZL38_LSWriteBundlePlaceholderToURLInternalRN14LaunchServices8Database7ContextEP5NSURLS4__block_invoke(uint64_t a1)
{
  uint64_t v2 = (NSString *)_CSStringCopyCFString();
  if (v2) {
    _LSCopyResourceFileToPlaceholder(*(__CFBundle **)(a1 + 48), *(FSNode **)(a1 + 40), 0, v2);
  }
}

void sub_182A035F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_ea8_48c31_ZTS10CFReleaserIP10__CFBundleE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 48);
  *(void *)(a1 + 48) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_ea8_48c31_ZTS10CFReleaserIP10__CFBundleE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 48);
  if (v2) {
    CFRelease(v2);
  }
  *(void *)(a1 + 48) = 0;
}

void ___ZL38_LSWriteBundlePlaceholderToURLInternalRN14LaunchServices8Database7ContextEP5NSURLS4__block_invoke_59(uint64_t a1, uint64_t a2, int a3)
{
  long long v4 = (int *)_LSGetPlugin(*(void *)(a1 + 32), a3);
  if (v4 && *v4)
  {
    uint64_t v5 = _LSAliasCopyResolvedNode(*(void **)(a1 + 32), *v4, 0, 0, 0);
    if (v5)
    {
      id v16 = v5;
      id v6 = [v5 URL];
      id v7 = [(NSURL *)v6 lastPathComponent];
      uint64_t v8 = [v7 caseInsensitiveCompare:@"PlugIns"];

      if (v8)
      {
        id v9 = (unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
        CFURLRef v10 = @"Extensions";
      }
      else
      {
        id v9 = (unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
        CFURLRef v10 = @"PlugIns";
      }
      int v11 = *v9;
      unsigned char *v9 = 1;
      if (!v11)
      {
        _LSCreatePlaceholderSubfolder(*(FSNode **)(a1 + 40), &v10->isa);
      }
      unint64_t v12 = [*(id *)(a1 + 40) URL];
      id v13 = [v12 URLByAppendingPathComponent:v10 isDirectory:1];
      id v14 = [(NSURL *)v6 lastPathComponent];
      id v15 = [v13 URLByAppendingPathComponent:v14 isDirectory:1];

      if (v6 && v15) {
        _LSWriteBundlePlaceholderToURLInternal(*(LaunchServices::Database::Context **)(a1 + 64), v6, v15);
      }

      uint64_t v5 = v16;
    }
  }
}

void sub_182A037E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A03834()
{
}

id _LSCreatePlaceholderSubfolder(FSNode *a1, NSString *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  long long v4 = a2;
  uint64_t v5 = v4;
  id v6 = 0;
  if (v3 && v4)
  {
    id v7 = [(FSNode *)v3 childNodeWithRelativePath:v4 flags:8 error:0];
    uint64_t v8 = v7;
    if (v7
      && [v7 getFileSystemRepresentation:v10 error:0]
      && (!mkdir(v10, 0x1C0u) || *__error() == 17))
    {
      id v6 = v8;
    }
    else
    {
      id v6 = 0;
    }
  }

  return v6;
}

void sub_182A03940(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL38_LSWriteBundlePlaceholderToURLInternalRN14LaunchServices8Database7ContextEP5NSURLS4__block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    long long v4 = [[FSNode alloc] initWithURL:a3 flags:0 error:0];
    if (v4) {
      [(FSNode *)v4 setResourceValue:*(void *)(a1 + 32) forKey:*MEMORY[0x1E4F1C5E8] options:3 error:0];
    }
  }
}

void sub_182A03A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t (*initLICopyIconPathsFromBundleForStyles(__CFBundle *a1, const __CFSet *a2))(__CFBundle *, const __CFSet *)
{
  long long v4 = (void *)MobileIconsLibrary(void)::frameworkLibrary;
  if (!MobileIconsLibrary(void)::frameworkLibrary)
  {
    long long v4 = dlopen("/System/Library/PrivateFrameworks/MobileIcons.framework/MobileIcons", 2);
    MobileIconsLibrary(void)::frameworkLibrary = (uint64_t)v4;
  }
  CFTypeRef result = (uint64_t (*)(__CFBundle *, const __CFSet *))dlsym(v4, "LICopyIconPathsFromBundleForStyles");
  softLinkLICopyIconPathsFromBundleForStyles = result;
  if (result)
  {
    return (uint64_t (*)(__CFBundle *, const __CFSet *))result(a1, a2);
  }
  return result;
}

void sub_182A03C64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A03D64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A03EB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

id _LSAppRemovalServiceXPCInterface()
{
  if (_LSAppRemovalServiceXPCInterface_onceToken != -1) {
    dispatch_once(&_LSAppRemovalServiceXPCInterface_onceToken, &__block_literal_global_12);
  }
  dispatch_queue_t v0 = (void *)_LSAppRemovalServiceXPCInterface_interface;

  return v0;
}

void _LSServer_DisplayRemovedAppPrompt(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  id v7 = a3;
  id v41 = a4;
  _LSAssertRunningInServer((uint64_t)"void _LSServer_DisplayRemovedAppPrompt(LSContext * _Nonnull, NSString *__strong _Nul"
                                    "lable, NSURL *__strong _Nullable, void (^__strong _Nonnull)(BOOL, NSError *__strong))");
  id v50 = 0;
  id v8 = v6;
  id v9 = v7;
  CFURLRef v10 = v9;
  if (v8)
  {
    uint64_t v11 = [[LSApplicationRecord alloc] initWithBundleIdentifierOfSystemPlaceholder:v8 error:&v50];
  }
  else
  {
    if ([v9 isFileURL])
    {
      v53[0] = *MEMORY[0x1E4F28228];
      *(void *)&long long buf = @"The app restoration prompt is not available for file URLs.";
      id v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&buf forKeys:v53 count:1];
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -50, (uint64_t)"_LSGetPlaceholderRecordForRemovedAppPrompt", 131, v15);
      id v16 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_18;
    }
    if (!v10)
    {
      v53[0] = *MEMORY[0x1E4F28228];
      *(void *)&long long buf = @"Either bundleID or resourceURL must be specified to present an app restoration prompt.";
      id v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&buf forKeys:v53 count:1];
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -50, (uint64_t)"_LSGetPlaceholderRecordForRemovedAppPrompt", 149, v15);
      id v16 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_18;
    }
    LODWORD(buf) = 0;
    *((void *)&buf + 1) = 0;
    LODWORD(v55) = 0;
    id v57 = 0;
    id v58 = 0;
    uint64_t v56 = 0;
    LODWORD(v51) = 14;
    id v23 = [v10 scheme];
    int v24 = _LSGetBindingForNodeOrSchemeOrUTI(a1, 0, v23, 0, 0, -1, (int *)&v51, 0, (uint64_t)&buf);

    if (v24)
    {
      uint64_t v25 = *MEMORY[0x1E4F289D0];
      v52[0] = *MEMORY[0x1E4F28228];
      v52[1] = v25;
      v53[0] = @"Failed to find an application that could open the specified URL.";
      v53[1] = v10;
      __int16 v26 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v53 forKeys:v52 count:2];
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], v24, (uint64_t)"_LSGetPlaceholderRecordForRemovedAppPrompt", 144, v26);
      id v50 = (id)objc_claimAutoreleasedReturnValue();

      uint64_t v11 = 0;
    }
    else
    {
      uint64_t v39 = [LSApplicationRecord alloc];
      uint64_t v11 = [(LSApplicationRecord *)v39 _initWithContext:a1 bundleID:buf bundleData:*((void *)&buf + 1) error:&v50];
    }
  }
  if (!v11) {
    goto LABEL_20;
  }
  +[LSApplicationRestrictionsManager sharedInstance]();
  unint64_t v12 = (id *)objc_claimAutoreleasedReturnValue();
  id v13 = [(LSBundleRecord *)v11 bundleIdentifier];
  unsigned int v14 = -[LSApplicationRestrictionsManager isApplicationRestricted:](v12, v13);

  if (!v14)
  {
    id v17 = [LSApplicationRecord alloc];
    char v18 = [(LSBundleRecord *)v11 bundleIdentifier];
    id v15 = [(LSApplicationRecord *)v17 initWithBundleIdentifier:v18 allowPlaceholder:1 error:0];

    if (v15)
    {
      id v19 = [(LSApplicationRecord *)v15 applicationState];
      int v20 = [v19 isDowngraded];

      if (v20)
      {
        uint64_t v21 = _LSDefaultLog();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
        {
          uint64_t v22 = [(LSBundleRecord *)v11 bundleIdentifier];
          LODWORD(buf) = 138412290;
          *(void *)((char *)&buf + 4) = v22;
          _os_log_impl(&dword_182959000, v21, OS_LOG_TYPE_INFO, "Application %@ exists as an offloaded placeholder.", (uint8_t *)&buf, 0xCu);
        }
      }
      else
      {

        uint64_t v51 = *MEMORY[0x1E4F28228];
        *(void *)&long long buf = @"The specified application is currently installed or installing.";
        uint64_t v21 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&buf forKeys:&v51 count:1];
        _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -50, (uint64_t)"_LSGetPlaceholderRecordForRemovedAppPrompt", 169, v21);
        uint64_t v11 = 0;
        id v50 = (id)objc_claimAutoreleasedReturnValue();
      }
    }
    goto LABEL_19;
  }

  uint64_t v51 = *MEMORY[0x1E4F28228];
  *(void *)&long long buf = @"The specified application is restricted, so the system cannot prompt to reinstall it.";
  id v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&buf forKeys:&v51 count:1];
  _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -54, (uint64_t)"_LSGetPlaceholderRecordForRemovedAppPrompt", 155, v15);
  id v16 = (id)objc_claimAutoreleasedReturnValue();
LABEL_18:
  uint64_t v11 = 0;
  id v50 = v16;
LABEL_19:

LABEL_20:
  id v27 = v50;
  if (v11)
  {
    uint64_t v28 = [(LSBundleRecord *)v11 localizedName];
    uint64_t v29 = [(LSBundleRecord *)v11 bundleIdentifier];
    *(void *)&long long buf = 0;
    *((void *)&buf + 1) = &buf;
    uint64_t v55 = 0x2020000000;
    uint64_t v56 = 0;
    id v30 = [[LSApplicationRecord alloc] _initWithNode:0 bundleIdentifier:@"com.apple.AppStore" placeholderBehavior:0 systemPlaceholder:0 itemID:0 forceInBundleContainer:0 context:a1 error:0];
    uint64_t v31 = [v30 applicationState];
    char v32 = [v31 isInstalled];

    if (v32)
    {
      char v33 = 0;
    }
    else
    {
      *(void *)(*((void *)&buf + 1) + 24) = 1;
      id v34 = [[LSApplicationRecord alloc] _initWithNode:0 bundleIdentifier:@"com.apple.AppStore" placeholderBehavior:0 systemPlaceholder:1 itemID:0 forceInBundleContainer:0 context:a1 error:0];
      char v33 = [v34 localizedName];
    }
    if (_LSGetAppRemovalPromptQueue(void)::once != -1) {
      dispatch_once(&_LSGetAppRemovalPromptQueue(void)::once, &__block_literal_global_13);
    }
    id v35 = (id)_LSGetAppRemovalPromptQueue(void)::result;
    v42[0] = MEMORY[0x1E4F143A8];
    v42[1] = 3221225472;
    v42[2] = ___LSServer_DisplayRemovedAppPrompt_block_invoke;
    v42[3] = &unk_1E522D2D8;
    id v36 = v28;
    id v43 = v36;
    id v44 = v8;
    id v45 = v33;
    p_long long buf = &buf;
    id v37 = v29;
    id v46 = v37;
    id v47 = v10;
    id v48 = v41;
    id v38 = v33;
    _LSAskForScreenUnlock(v35, v42);

    _Block_object_dispose(&buf, 8);
  }
  else
  {
    (*((void (**)(id, void, id))v41 + 2))(v41, 0, v27);
  }
}

void sub_182A046D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, _Unwind_Exception *exception_object, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  _Unwind_Resume(a1);
}

void sub_182A050E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  CFRelease(v20);
  _Unwind_Resume(a1);
}

void ___ZL27_LSGetAppRemovalPromptQueuev_block_invoke()
{
  uint64_t v2 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v0 = dispatch_queue_create("LS app removal prompt queue", v2);
  uint64_t v1 = (void *)_LSGetAppRemovalPromptQueue(void)::result;
  _LSGetAppRemovalPromptQueue(void)::CFTypeRef result = (uint64_t)v0;
}

__CFString *_LSGetAppRemovalPromptStringForKey(NSString *a1, NSString *a2)
{
  uint64_t v3 = a1;
  long long v4 = a2;
  uint64_t v5 = (__CFBundle *)_LSGetBundle();
  id v6 = (__CFString *)CFBundleCopyLocalizedString(v5, v4, v4, @"AppRemoval");
  if (!v6) {
    id v6 = v3;
  }

  return v6;
}

void sub_182A0539C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL26_LSDisplayRemovedAppPromptP20__CFUserNotificationP8NSStringP5NSURL18LSAppRestoreSourceU13block_pointerFvbP7NSErrorE_block_invoke(void *a1)
{
  v5[3] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = objc_alloc_init(_LSSpringBoardCall);
  [(_LSSpringBoardCall *)v2 setBundleIdentifier:a1[4]];
  v4[0] = getFBSOpenApplicationOptionKeyPayloadURL[0]();
  v5[0] = a1[5];
  v4[1] = getFBSOpenApplicationOptionKeyIsSensitiveURL();
  _DWORD v4[2] = @"__PayloadOptions";
  v5[1] = MEMORY[0x1E4F1CC38];
  void v5[2] = &unk_1ECB43A38;
  uint64_t v3 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v5 forKeys:v4 count:3];
  [(_LSSpringBoardCall *)v2 setLaunchOptions:v3];

  [(_LSSpringBoardCall *)v2 setClientXPCConnection:0];
  [(_LSSpringBoardCall *)v2 setCallCompletionHandlerWhenFullyComplete:1];
  [(_LSSpringBoardCall *)v2 callWithCompletionHandler:a1[6]];
}

void sub_182A054C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t initFBSOpenApplicationOptionKeyPayloadURL(void)
{
  dispatch_queue_t v0 = (void *)FrontBoardServicesLibrary(void)::frameworkLibrary;
  if (!FrontBoardServicesLibrary(void)::frameworkLibrary)
  {
    dispatch_queue_t v0 = dlopen("/System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices", 2);
    FrontBoardServicesLibrary(void)::frameworkLibrary = (uint64_t)v0;
  }
  uint64_t result = *(void *)dlsym(v0, "FBSOpenApplicationOptionKeyPayloadURL");
  constantFBSOpenApplicationOptionKeyPayloadURL = result;
  getFBSOpenApplicationOptionKeyPayloadURL[0] = FBSOpenApplicationOptionKeyPayloadURLFunction;
  return result;
}

{
  void *v0;
  uint64_t result;

  dispatch_queue_t v0 = (void *)FrontBoardServicesLibrary(void)::frameworkLibrary;
  if (!FrontBoardServicesLibrary(void)::frameworkLibrary)
  {
    dispatch_queue_t v0 = dlopen("/System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices", 2);
    FrontBoardServicesLibrary(void)::frameworkLibrary = (uint64_t)v0;
  }
  uint64_t result = *(void *)dlsym(v0, "FBSOpenApplicationOptionKeyPayloadURL");
  constantFBSOpenApplicationOptionKeyPayloadURL = result;
  getFBSOpenApplicationOptionKeyPayloadURL = FBSOpenApplicationOptionKeyPayloadURLFunction;
  return result;
}

{
  void *v0;
  uint64_t result;

  dispatch_queue_t v0 = (void *)FrontBoardServicesLibrary(void)::frameworkLibrary;
  if (!FrontBoardServicesLibrary(void)::frameworkLibrary)
  {
    dispatch_queue_t v0 = dlopen("/System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices", 2);
    FrontBoardServicesLibrary(void)::frameworkLibrary = (uint64_t)v0;
  }
  uint64_t result = *(void *)dlsym(v0, "FBSOpenApplicationOptionKeyPayloadURL");
  constantFBSOpenApplicationOptionKeyPayloadURL = result;
  getFBSOpenApplicationOptionKeyPayloadURL = FBSOpenApplicationOptionKeyPayloadURLFunction;
  return result;
}

uint64_t FBSOpenApplicationOptionKeyPayloadURLFunction(void)
{
  return constantFBSOpenApplicationOptionKeyPayloadURL;
}

{
  return constantFBSOpenApplicationOptionKeyPayloadURL;
}

{
  return constantFBSOpenApplicationOptionKeyPayloadURL;
}

uint64_t initFBSOpenApplicationOptionKeyIsSensitiveURL(void)
{
  dispatch_queue_t v0 = (void *)FrontBoardServicesLibrary(void)::frameworkLibrary;
  if (!FrontBoardServicesLibrary(void)::frameworkLibrary)
  {
    dispatch_queue_t v0 = dlopen("/System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices", 2);
    FrontBoardServicesLibrary(void)::frameworkLibrary = (uint64_t)v0;
  }
  uint64_t result = *(void *)dlsym(v0, "FBSOpenApplicationOptionKeyIsSensitiveURL");
  constantFBSOpenApplicationOptionKeyIsSensitiveURL = result;
  getFBSOpenApplicationOptionKeyIsSensitiveURL = FBSOpenApplicationOptionKeyIsSensitiveURLFunction;
  return result;
}

uint64_t FBSOpenApplicationOptionKeyIsSensitiveURLFunction(void)
{
  return constantFBSOpenApplicationOptionKeyIsSensitiveURL;
}

Class initATTrackingEnforcementManager()
{
  if (!AppTrackingTransparencyLibrary_frameworkLibrary) {
    AppTrackingTransparencyLibrary_frameworkLibrary = (uint64_t)dlopen("/System/Library/Frameworks/AppTrackingTransparency.framework/AppTrackingTransparency", 2);
  }
  Class result = objc_getClass("ATTrackingEnforcementManager");
  classATTrackingEnforcementManager = (uint64_t)result;
  getATTrackingEnforcementManagerClass[0] = (uint64_t (*)())ATTrackingEnforcementManagerFunction;
  return result;
}

id ATTrackingEnforcementManagerFunction()
{
  return (id)classATTrackingEnforcementManager;
}

uint64_t _LSAudioUnitURLOpen(NSURL *a1)
{
  return softLinkAudioUnitURLOpen((const __CFURL *)a1);
}

uint64_t (*initAudioUnitURLOpen(const __CFURL *a1))(const __CFURL *)
{
  uint64_t v2 = (void *)AudioToolboxLibrary(void)::frameworkLibrary;
  if (!AudioToolboxLibrary(void)::frameworkLibrary)
  {
    uint64_t v2 = dlopen("/System/Library/Frameworks/AudioToolbox.framework/AudioToolbox", 2);
    AudioToolboxLibrary(void)::frameworkLibrary = (uint64_t)v2;
  }
  Class result = (uint64_t (*)(const __CFURL *))dlsym(v2, "AudioUnitURLOpen");
  softLinkAudioUnitURLOpen = result;
  if (result)
  {
    return (uint64_t (*)(const __CFURL *))result(a1);
  }
  return result;
}

uint64_t _LSBindableComparePriority(void *a1, char a2, char a3)
{
  id v5 = a1;
  unsigned int v6 = a2 & 3;
  if (v6 == (a3 & 3))
  {
    if (v6 == 3)
    {
      id v7 = (_DWORD *)_UTTypeGet();
      uint64_t v11 = _UTTypeGet();
      id v9 = (_DWORD *)v11;
      if (v7 && v11)
      {
LABEL_10:
        char v10 = _UTTypeComparePriority(v5, v7, v5, v9);
        goto LABEL_18;
      }
    }
    else
    {
      if ((a2 & 3) != 0)
      {
        char v10 = 0;
        goto LABEL_18;
      }
      id v7 = (_DWORD *)_UTTypeGet();
      uint64_t v8 = _UTTypeGet();
      id v9 = (_DWORD *)v8;
      if (v7 && v8) {
        goto LABEL_10;
      }
    }
    if (v9) {
      char v12 = -1;
    }
    else {
      char v12 = 0;
    }
    if (v7) {
      char v10 = 1;
    }
    else {
      char v10 = v12;
    }
  }
  else
  {
    char v10 = v6 < (a3 & 3u);
  }
LABEL_18:

  return v10;
}

void sub_182A0585C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSBindableActivate(void *a1, int a2)
{
  id v3 = a1;
  int v12 = a2;
  if (a2)
  {
    if (_CSStringBindingGetBindings())
    {
      uint64_t v8 = 0;
      id v9 = &v8;
      uint64_t v10 = 0x2020000000;
      int v11 = -1;
      id v7 = v3;
      _CSArrayEnumerateAllValues();
      if (*((_DWORD *)v9 + 6) == -1)
      {
        _CSArrayAppendValue();
      }
      else if (_CSArrayGetValueAtIndex() != a2)
      {
        _CSArrayInsertValueAtIndex();
      }

      _Block_object_dispose(&v8, 8);
      uint64_t v4 = 0;
    }
    else
    {
      uint64_t v8 = 0;
      if (_CSArrayCreate()) {
        uint64_t v5 = CSMapSetValue();
      }
      else {
        uint64_t v5 = _LSGetOSStatusFromNSError(v8);
      }
      uint64_t v4 = v5;
    }
  }
  else
  {
    uint64_t v4 = 4294967246;
  }

  return v4;
}

void sub_182A05A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _LSBindableSetGeneration(void *a1, int a2, int a3)
{
  id v5 = a1;
  uint64_t v6 = a2 & 0xFFFFFFFC;
  id v7 = v5;
  if ((a2 & 3) != 0)
  {
    if ((a2 & 3) == 2) {
      _LSClaimSetGeneration((uint64_t)v5, v6, a3);
    }
  }
  else
  {
    _UTTypeSetGeneration((uint64_t)v5, v6, a3);
  }
}

void sub_182A05BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t _LSBindableDeactivate(void *a1, int a2)
{
  id v3 = a1;
  if (a2)
  {
    if (_CSStringBindingGetBindings())
    {
      uint64_t v7 = 0;
      uint64_t v8 = &v7;
      uint64_t v9 = 0x2020000000;
      int v10 = -1;
      id v6 = v3;
      _CSArrayEnumerateAllValues();
      if (*((_DWORD *)v8 + 6) != -1)
      {
        if (_CSArrayGetCount() == 1)
        {
          uint64_t v4 = CSMapRemoveValue();
          if (v4)
          {
LABEL_11:

            _Block_object_dispose(&v7, 8);
            goto LABEL_12;
          }
          _CSArrayDispose();
        }
        else
        {
          _CSArrayRemoveValueAtIndex();
        }
      }
      uint64_t v4 = 0;
      goto LABEL_11;
    }
    uint64_t v4 = 4294957797;
  }
  else
  {
    uint64_t v4 = 4294967246;
  }
LABEL_12:

  return v4;
}

void sub_182A05DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _LSBindingMapGetVisualizationFunctions(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = LaunchServices::BindingMaps::display;
  a1[2] = 0;
}

BOOL LaunchServices::BindingMaps::display(uint64_t *a1, int a2)
{
  int BindingMapIndexWithTargetTable = _LSDatabaseFindBindingMapIndexWithTargetTable(*a1, a2);
  if (BindingMapIndexWithTargetTable != -1)
  {
    _LSDatabaseFindBindingMapTargetTable((void *)*a1, BindingMapIndexWithTargetTable);
    _CSStringBindingEnumerateAllBindings();
  }
  return BindingMapIndexWithTargetTable != -1;
}

void ___ZN14LaunchServices11BindingMapsL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = (NSString *)_CSStringCopyCFString();
  if (!v4)
  {
    objc_msgSend(NSString, "stringWithFormat:", @"unknown bindable key string (0x%llx):", a2);
    uint64_t v4 = (NSString *)objc_claimAutoreleasedReturnValue();
  }
  id v5 = [MEMORY[0x1E4F1CA48] array];
  _CSArrayEnumerateAllValues();
  CSStore2::AttributedStringWriter::array(*(CSStore2::AttributedStringWriter **)(a1 + 40), v4, v5);
}

void sub_182A0609C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void ___ZN14LaunchServices11BindingMapsL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke_2(uint64_t a1, int a2, uint64_t a3)
{
  unsigned int v3 = a3;
  uint64_t v5 = *(unsigned int *)(a1 + 56);
  if (v5 == *(_DWORD *)(**(void **)(a1 + 40) + 20)
    || v5 == *(_DWORD *)(**(void **)(a1 + 40) + 1604)
    || v5 == *(_DWORD *)(**(void **)(a1 + 40) + 1608))
  {
    uint64_t v6 = CSStore2::AttributedStringWriter::link(*(CSStore2::AttributedStringWriter **)(a1 + 48), v5, a3, 0);
    uint64_t v7 = *(void **)(a1 + 32);
    id v19 = (id)v6;
    uint64_t v8 = [NSString stringWithFormat:@"%@ (0x%llx)", v6, v3];
    [v7 addObject:v8];
  }
  else
  {
    int v9 = a3 & 3;
    switch(a3 & 3)
    {
      case 1:
        uint64_t v15 = CSStore2::AttributedStringWriter::link(*(CSStore2::AttributedStringWriter **)(a1 + 48), *(unsigned int *)(**(void **)(a1 + 40) + 1592), a3 & 0xFFFFFFFC, 0);
        id v16 = *(void **)(a1 + 32);
        id v19 = (id)v15;
        uint64_t v8 = [NSString stringWithFormat:@"handler pref %@ (0x%llx)", v15, v3];
        [v16 addObject:v8];
        break;
      case 2:
        uint64_t v17 = CSStore2::AttributedStringWriter::link(*(CSStore2::AttributedStringWriter **)(a1 + 48), *(unsigned int *)(**(void **)(a1 + 40) + 24), a3 & 0xFFFFFFFC, 0);
        char v18 = *(void **)(a1 + 32);
        id v19 = (id)v17;
        uint64_t v8 = [NSString stringWithFormat:@"%@ (0x%llx)", v17, v3];
        [v18 addObject:v8];
        break;
      default:
        unsigned int v10 = a3 & 0xFFFFFFFC;
        if (v9 != 3) {
          unsigned int v10 = 0;
        }
        if ((a3 & 0xFFFFFFFC) != 0 && v9 == 0) {
          uint64_t v12 = a3 & 0xFFFFFFFC;
        }
        else {
          uint64_t v12 = v10;
        }
        uint64_t v13 = CSStore2::AttributedStringWriter::link(*(CSStore2::AttributedStringWriter **)(a1 + 48), *(unsigned int *)(**(void **)(a1 + 40) + 32), v12, 0);
        unsigned int v14 = *(void **)(a1 + 32);
        id v19 = (id)v13;
        uint64_t v8 = [NSString stringWithFormat:@"%@ (0x%llx)", v13, v3];
        [v14 addObject:v8];
        break;
    }
  }
}

void sub_182A06384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void LaunchServices::BindingEvaluator::CreateWithURL(LaunchServices::BindingEvaluator *this@<X0>, FSNode **a2@<X8>)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  LaunchServices::BindingEvaluator::BindingEvaluator((LaunchServices::BindingEvaluator *)a2);
  uint64_t v5 = _LSBindingLog();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 138478083;
    id v16 = this;
    __int16 v17 = 1024;
    int v18 = [(LaunchServices::BindingEvaluator *)this isFileURL];
    _os_log_impl(&dword_182959000, v5, OS_LOG_TYPE_DEBUG, "BindingEvaluator::CreateWithURL(%{private}@) isFileURL=%{BOOL}d", buf, 0x12u);
  }

  LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"Creating binding evaluator for URL %@", v6, this);
  if ([(LaunchServices::BindingEvaluator *)this isFileURL])
  {
    uint64_t v7 = [[FSNode alloc] initWithURL:this flags:0 error:0];
    uint64_t v8 = *a2;
    *a2 = v7;

    int v9 = a2[1];
    a2[1] = (FSNode *)@"file";

    uint64_t v10 = [(FSNode *)*a2 nameWithError:0];
    int v11 = a2[3];
    a2[3] = (FSNode *)v10;
  }
  else
  {
    uint64_t v12 = (FSNode *)[objc_alloc(MEMORY[0x1E4F29088]) initWithURL:this resolvingAgainstBaseURL:0];
    int v11 = v12;
    if (v12)
    {
      uint64_t v13 = [(FSNode *)v12 scheme];
      unsigned int v14 = a2[1];
      a2[1] = (FSNode *)v13;
    }
  }
}

void sub_182A06558(_Unwind_Exception *a1)
{
  LaunchServices::BindingEvaluator::~BindingEvaluator(v1);
  _Unwind_Resume(a1);
}

void LaunchServices::BindingEvaluator::CreateWithNode(void *a1@<X0>, LaunchServices::BindingEvaluator *a2@<X8>)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  LaunchServices::BindingEvaluator::BindingEvaluator(a2);
  uint64_t v4 = _LSBindingLog();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 138477827;
    uint64_t v10 = a1;
    _os_log_impl(&dword_182959000, v4, OS_LOG_TYPE_DEBUG, "BindingEvaluator::CreateWithNode(%{private}@)", buf, 0xCu);
  }

  LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"Creating binding evaluator for FSNode %@", v5, a1);
  objc_storeStrong((id *)a2, a1);
  uint64_t v6 = (void *)*((void *)a2 + 1);
  *((void *)a2 + 1) = @"file";

  uint64_t v7 = [a1 nameWithError:0];
  uint64_t v8 = (void *)*((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
}

void sub_182A0669C(_Unwind_Exception *a1)
{
  LaunchServices::BindingEvaluator::~BindingEvaluator(v1);
  _Unwind_Resume(a1);
}

void LaunchServices::BindingEvaluator::CreateWithURLScheme(LaunchServices::BindingEvaluator *this@<X0>, id *a2@<X8>)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  LaunchServices::BindingEvaluator::BindingEvaluator((LaunchServices::BindingEvaluator *)a2);
  uint64_t v5 = _LSBindingLog();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 138477827;
    uint64_t v8 = this;
    _os_log_impl(&dword_182959000, v5, OS_LOG_TYPE_DEBUG, "BindingEvaluator::CreateWithURLScheme(%{private}@)", buf, 0xCu);
  }

  LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"Creating binding evaluator for URL scheme %@", v6, this);
  objc_storeStrong(a2 + 1, this);
}

void sub_182A06790(_Unwind_Exception *a1)
{
  LaunchServices::BindingEvaluator::~BindingEvaluator(v1);
  _Unwind_Resume(a1);
}

void LaunchServices::BindingEvaluator::CreateWithUTI(LaunchServices::BindingEvaluator *this@<X0>, NSString *a2@<X1>, LaunchServices::BindingEvaluator *a3@<X8>)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  LaunchServices::BindingEvaluator::BindingEvaluator(a3);
  uint64_t v7 = _LSBindingLog();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 138543362;
    unsigned int v14 = this;
    _os_log_impl(&dword_182959000, v7, OS_LOG_TYPE_DEBUG, "BindingEvaluator::CreateWithUTI(%{public}@)", buf, 0xCu);
  }

  LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"Creating binding evaluator for UTI %@", v8, this);
  uint64_t v9 = [(LaunchServices::BindingEvaluator *)this copy];
  uint64_t v10 = (void *)*((void *)a3 + 2);
  *((void *)a3 + 2) = v9;

  uint64_t v11 = [(NSString *)a2 copy];
  uint64_t v12 = (void *)*((void *)a3 + 3);
  *((void *)a3 + 3) = v11;
}

void sub_182A068A4(_Unwind_Exception *a1)
{
  LaunchServices::BindingEvaluator::~BindingEvaluator(v1);
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::BindingEvaluator::ContentTypeBindingAllowsOverride(LSContext *this, LSContext *a2, NSString *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  LaunchServices::BindingEvaluator::CreateWithUTI((LaunchServices::BindingEvaluator *)a2, 0, (LaunchServices::BindingEvaluator *)v15);
  int v16 = -1;
  int v17 = 142;
  LaunchServices::BindingEvaluator::getBestBinding((uint64_t *)&v9, (LaunchServices::BindingEvaluator *)v15, this, 0, 0);
  if (v14)
  {
    if (v11)
    {
      BOOL v5 = (*(_DWORD *)(v11 + 8) & 2) == 0;

      if (!v5)
      {
        uint64_t v6 = _LSDefaultLog();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          int v9 = 138543362;
          uint64_t v10 = a2;
          _os_log_impl(&dword_182959000, v6, OS_LOG_TYPE_DEFAULT, "Override not allowed for content type %{public}@", (uint8_t *)&v9, 0xCu);
        }
        uint64_t v7 = 0;
        goto LABEL_11;
      }
    }
    else
    {
    }
  }
  uint64_t v6 = _LSDefaultLog();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
    LaunchServices::BindingEvaluator::ContentTypeBindingAllowsOverride((uint64_t)a2, v6);
  }
  uint64_t v7 = 1;
LABEL_11:

  LaunchServices::BindingEvaluator::~BindingEvaluator(v15);
  return v7;
}

void sub_182A06A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  LaunchServices::BindingEvaluator::~BindingEvaluator((id *)va);
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::BindingEvaluator::PrepareMimicForBinding(void *a1, uint64_t a2)
{
  uint64_t result = LaunchServices::TypeEvaluator::PrepareMimicForTypeEvaluation(a1, a2);
  if (result)
  {
    uint64_t result = _LSPrepareMimicForBundleLookup(a1, a2);
    if (result)
    {
      uint64_t result = [a1 populateSimpleSelector:sel_isSideFault error:a2];
      if (result)
      {
        BOOL v5 = [a1 mimic];
        int v6 = [v5 isSideFault];

        if (v6) {
          return [a1 populateSimpleSelector:sel_sideFaultResourceValuesWithError_ error:a2];
        }
        else {
          return 1;
        }
      }
    }
  }
  return result;
}

void sub_182A06AEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id LaunchServices::BindingEvaluator::getCalculatedUTI(LaunchServices::BindingEvaluator *this, LSContext *a2)
{
  id v4 = 0;
  LaunchServices::BindingEvaluation::calculateUTI(a2, (uint64_t)this, &v4, 0, 0);
  id v2 = v4;

  return v2;
}

void sub_182A06B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void LaunchServices::BindingEvaluator::setFilter(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 copy];
  id v4 = *(void **)(a1 + 136);
  *(void *)(a1 + 136) = v3;

  BOOL v5 = *(void **)(a1 + 144);
  *(void *)(a1 + 144) = 0;
}

void LaunchServices::BindingEvaluator::setFilter_NoIO(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = [a3 copy];
  int v6 = *(void **)(a1 + 152);
  *(void *)(a1 + 152) = v5;

  uint64_t v7 = [a2 copy];
  uint64_t v8 = *(void **)(a1 + 160);
  *(void *)(a1 + 160) = v7;
}

void LaunchServices::BindingEvaluator::setAllPropertiesFromBindingEvaluator(LaunchServices::BindingEvaluator *this, const LaunchServices::BindingEvaluator *a2)
{
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)this + 13) = *((void *)a2 + 13);
  if (this != a2) {
    std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((char *)this + 112, *((char **)a2 + 14), *((void *)a2 + 15), (uint64_t)(*((void *)a2 + 15) - *((void *)a2 + 14)) >> 2);
  }
  uint64_t v4 = MEMORY[0x18530F950](*((void *)a2 + 17));
  uint64_t v5 = (void *)*((void *)this + 17);
  *((void *)this + 17) = v4;

  objc_storeStrong((id *)this + 18, *((id *)a2 + 18));
  uint64_t v6 = MEMORY[0x18530F950](*((void *)a2 + 19));
  uint64_t v7 = (void *)*((void *)this + 19);
  *((void *)this + 19) = v6;

  uint64_t v8 = (void *)*((void *)a2 + 20);

  objc_storeStrong((id *)this + 20, v8);
}

void LaunchServices::BindingEvaluator::evaluateBindings(LaunchServices::BindingEvaluator *a1@<X0>, LSContext *a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
}

void LaunchServices::BindingEvaluator::evaluateBindings(LaunchServices::BindingEvaluator *a1@<X0>, LSContext *a2@<X1>, void **a3@<X2>, void *a4@<X3>, uint64_t *a5@<X8>)
{
  v22[12] = *(id *)MEMORY[0x1E4F143B8];
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  LaunchServices::BindingEvaluation::State::State((LaunchServices::BindingEvaluation::State *)&v20, a2, a1);
  if (a3)
  {
    uint64_t v9 = LaunchServices::BindingEvaluation::State::getTypeRecord((LaunchServices::BindingEvaluation::State *)&v20);
    uint64_t v10 = *a3;
    *a3 = (void *)v9;
  }
  LaunchServices::BindingEvaluation::runEvaluator(&v20, a4, (uint64_t *)&v17);
  if (v17 != v18)
  {
    std::vector<LSBinding>::reserve(a5, 0xAAAAAAAAAAAAAAABLL * (((char *)v18 - (char *)v17) >> 5));
    std::vector<LSBinding>::__insert_with_size[abi:nn180100]<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding *>,std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding *>>(a5, *a5, (uint64_t)v17, (uint64_t)v18, 0xAAAAAAAAAAAAAAABLL * (((char *)v18 - (char *)v17) >> 5));
    if ((LaunchServices::BindingEvaluation::gIsReasonTrackingEnabled || (*((unsigned char *)a1 + 110) & 2) != 0) && v18 != v17)
    {
      uint64_t v11 = 0;
      if ((unint64_t)(((char *)v18 - (char *)v17) / 96) <= 1) {
        uint64_t v12 = 1;
      }
      else {
        uint64_t v12 = ((char *)v18 - (char *)v17) / 96;
      }
      uint64_t v13 = 40;
      do
      {
        uint64_t v14 = LaunchServices::BindingEvaluation::getReasonFromBinding((uint64_t)&v17[v11]);
        uint64_t v15 = (void *)v14;
        if (v14) {
          int v16 = (__CFString *)v14;
        }
        else {
          int v16 = &stru_1ECB1A570;
        }
        objc_storeStrong((id *)(*a5 + v13), v16);

        v11 += 12;
        v13 += 48;
        --v12;
      }
      while (v12);
    }
  }
  uint64_t v19 = &v17;
  std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__destroy_vector::operator()[abi:nn180100]((uint64_t **)&v19);

  int v17 = (uint64_t *)v22;
  std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__destroy_vector::operator()[abi:nn180100](&v17);
  LaunchServices::BindingEvaluator::~BindingEvaluator(&v21);
}

void sub_182A06E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13, void **a14)
{
  a13 = &a9;
  std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__destroy_vector::operator()[abi:nn180100](&a13);
  LaunchServices::BindingEvaluation::State::~State((id *)&a14);
  std::vector<LSBinding>::__destroy_vector::operator()[abi:nn180100](&a14);
  _Unwind_Resume(a1);
}

id LaunchServices::BindingEvaluation::State::getTypeRecord(LaunchServices::BindingEvaluation::State *this)
{
  if (*((unsigned char *)this + 240))
  {
    id v1 = [[_UTDynamicTypeRecord alloc] _initWithContext:*(void *)this dynamicUTI:*((void *)this + 27)];
  }
  else if (*((_DWORD *)this + 56))
  {
    id v1 = -[LSRecord _initWithContext:tableID:unitID:]([_UTDeclaredTypeRecord alloc], "_initWithContext:tableID:unitID:");
  }
  else
  {
    id v1 = 0;
  }

  return v1;
}

uint64_t std::vector<LSBinding>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556) {
      abort();
    }
    uint64_t v5 = a1[1] - *a1;
    void v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:nn180100]<std::allocator<LSBinding>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 48 * v6;
    std::vector<LSBinding>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<LSBinding>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_182A07014(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<LSBinding>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

id LaunchServices::BindingEvaluation::getReasonFromBinding(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 80);
  if (v1)
  {
    id v2 = "?";
    int v3 = *(unsigned __int8 *)(a1 + 72);
    if (v3 == 1) {
      id v2 = "beat next";
    }
    if (v3 == 255) {
      uint64_t v4 = "lost to prev";
    }
    else {
      uint64_t v4 = v2;
    }
    id v5 = [NSString stringWithFormat:@"%@ (%s because %@)", *(void *)(a1 + 40), v4, v1];
  }
  else
  {
    id v5 = *(id *)(a1 + 40);
  }

  return v5;
}

void LaunchServices::BindingEvaluation::State::~State(id *this)
{
  id v2 = (uint64_t *)(this + 22);
  std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__destroy_vector::operator()[abi:nn180100](&v2);
  LaunchServices::BindingEvaluator::~BindingEvaluator(this + 1);
}

id LaunchServices::getLocalizedKindStringWithEvaluator(void **a1, void *a2, const LaunchServices::BindingEvaluator *a3, void *a4)
{
  v41[12] = *(id *)MEMORY[0x1E4F143B8];
  id v7 = a2;
  char v33 = a1;
  id v34 = 0;
  char v35 = 0;
  id v36 = 0;
  +[_LSDServiceDomain defaultServiceDomain]();
  uint64_t v8 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  uint64_t v9 = (LSContext *)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v33, v8, 0);

  if (v9)
  {
    LaunchServices::BindingEvaluation::State::State((LaunchServices::BindingEvaluation::State *)&v37, v9, a3);
    v38[12] = (id)1;
    v40 |= 0x1508Au;
    int v39 = 15;
    char v32 = 0;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    memset(v27, 0, sizeof(v27));
    KindStringFromState = (void *)LaunchServices::BindingEvaluation::getKindStringFromState((LaunchServices::BindingEvaluation *)&v37, (LaunchServices::BindingEvaluation::State *)&v32, (BOOL *)v27, v10);
    if (KindStringFromState)
    {
      if (!v7)
      {
        if (*(void *)a3)
        {
          uint64_t v12 = [*(id *)a3 URL];
          objc_msgSend(v12, "ls_preferredLocalizations");
          id v7 = (id)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          id v7 = 0;
        }
      }
      if (v32)
      {
        uint64_t v16 = LaunchServices::BindingEvaluation::getBoundDisplayNameConstructorsForKindString(&v37, (unsigned int *)v27, (uint64_t)v7, 0);
        uint64_t v18 = (NSString *)v16;
        if (v32)
        {
          if (v16)
          {
            uint64_t v19 = (LaunchServices::CanonicalString *)LaunchServices::CanonicalString::Find(*v37, (_LSDatabase *)@"%@ Document", v17);
            if (v19) {
              KindStringFromState = (void *)LaunchServices::CanonicalString::getLocalizedString(v19);
            }
          }
        }
        uint64_t v20 = v18;
      }
      else
      {
        uint64_t v20 = 0;
      }
      LaunchServices::LocalizedString::localizeUnsafely((uint64_t)KindStringFromState, *v37, v7);
      uint64_t v22 = (LaunchServices::BindingEvaluation::State *)objc_claimAutoreleasedReturnValue();
      if (v22)
      {
        KindStringFromState = LaunchServices::BindingEvaluation::formatAndSanitizeKindString((LaunchServices::BindingEvaluation *)&v37, v22, v20, v21);
      }
      else if (a4)
      {
        _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -10813, (uint64_t)"getLocalizedKindStringWithEvaluator", 1048, 0);
        KindStringFromState = 0;
        *a4 = (id)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        KindStringFromState = 0;
      }
    }
    *(void *)&v27[0] = v41;
    std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__destroy_vector::operator()[abi:nn180100]((uint64_t **)v27);
    LaunchServices::BindingEvaluator::~BindingEvaluator(v38);
  }
  else if (a4)
  {
    +[_LSDServiceDomain defaultServiceDomain]();
    uint64_t v13 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
    uint64_t v14 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v33, v13, 0);

    if (v14) {
      id v15 = 0;
    }
    else {
      id v15 = v36;
    }
    KindStringFromState = 0;
    *a4 = v15;
  }
  else
  {
    KindStringFromState = 0;
  }
  id v23 = KindStringFromState;
  if (v33 && v35) {
    _LSContextDestroy(v33);
  }
  id v24 = v34;
  char v33 = 0;
  id v34 = 0;

  char v35 = 0;
  id v25 = v36;
  id v36 = 0;

  return v23;
}

void sub_182A0748C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  LaunchServices::BindingEvaluation::ExtendedBinding::~ExtendedBinding(&a9);
  LaunchServices::BindingEvaluation::State::~State(&a28);
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a23);

  _Unwind_Resume(a1);
}

id LaunchServices::BindingEvaluator::getLocalizedKindString(const LaunchServices::BindingEvaluator *a1, void **a2, void *a3, void *a4)
{
  uint64_t v4 = LaunchServices::getLocalizedKindStringWithEvaluator(a2, a3, a1, a4);

  return v4;
}

id LaunchServices::BindingEvaluator::getLocalizedKindStringDictionary(const LaunchServices::BindingEvaluator *a1, void **a2, void *a3)
{
  v63[12] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v51 = a2;
  id v52 = 0;
  char v53 = 0;
  id v54 = 0;
  +[_LSDServiceDomain defaultServiceDomain]();
  id v5 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  uint64_t v6 = (LSContext *)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v51, v5, 0);

  if (v6)
  {
    uint64_t v55 = 0;
    uint64_t v56 = &v55;
    uint64_t v57 = 0x14012000000;
    id v58 = __Block_byref_object_copy__6;
    uint64_t v59 = __Block_byref_object_dispose__6;
    id v60 = " 5#0%3$0\"2";
    LaunchServices::BindingEvaluation::State::State((LaunchServices::BindingEvaluation::State *)&v61, v6, a1);
    id v7 = v56;
    uint64_t v8 = (LaunchServices::BindingEvaluation *)(v56 + 6);
    v56[19] = 1;
    int v9 = *((_DWORD *)v7 + 41) | 0x1508A;
    *((_DWORD *)v7 + 40) = 15;
    *((_DWORD *)v7 + 41) = v9;
    char v50 = 0;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    *(_OWORD *)id v44 = 0u;
    long long v45 = 0u;
    KindStringFromState = (LaunchServices::LocalizedString *)LaunchServices::BindingEvaluation::getKindStringFromState(v8, (LaunchServices::BindingEvaluation::State *)&v50, v44, v10);
    if (KindStringFromState)
    {
      if (v50)
      {
        uint64_t v12 = LaunchServices::BindingEvaluation::getBoundDisplayNameConstructorsForKindString((void **)v56 + 6, (unsigned int *)v44, 0, 1);
      }
      else
      {
        uint64_t v12 = 0;
      }
      int v17 = [v12 objectForKeyedSubscript:@"LSDefaultLocalizedValue"];
      uint64_t v19 = [v12 allKeys];
      if (v50)
      {
        if (v17)
        {
          uint64_t v20 = (LaunchServices::CanonicalString *)LaunchServices::CanonicalString::Find(*(LaunchServices::CanonicalString **)v56[6], (_LSDatabase *)@"%@ Document", v18);
          if (v20) {
            KindStringFromState = (LaunchServices::LocalizedString *)LaunchServices::CanonicalString::getLocalizedString(v20);
          }
        }
      }
      id v21 = LaunchServices::LocalizedString::getAllUnsafeLocalizations(KindStringFromState, *(_LSDatabase **)v56[6], 0, 0, 0);
      if (v21)
      {
        uint64_t v38 = 0;
        int v39 = &v38;
        uint64_t v40 = 0x3032000000;
        id v41 = __Block_byref_object_copy__31;
        uint64_t v42 = __Block_byref_object_dispose__32;
        id v43 = 0;
        uint64_t v28 = MEMORY[0x1E4F143A8];
        uint64_t v29 = 3221225472;
        long long v30 = ___ZNK14LaunchServices16BindingEvaluator32getLocalizedKindStringDictionaryEP9LSContextPU15__autoreleasingP7NSError_block_invoke;
        long long v31 = &unk_1E522D398;
        id v32 = v12;
        id v33 = v19;
        id v34 = v17;
        id v36 = &v55;
        id v37 = &v38;
        id v16 = v21;
        id v35 = v16;
        [v16 enumerateKeysAndObjectsUsingBlock:&v28];
        uint64_t v22 = (void *)v39[5];
        if (v22)
        {
          uint64_t v23 = objc_msgSend(v22, "copy", v28, v29, v30, v31, v32, v33, v34);

          id v16 = (id)v23;
        }

        _Block_object_dispose(&v38, 8);
      }
      else if (a3)
      {
        _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -10813, (uint64_t)"getLocalizedKindStringDictionary", 1147, 0);
        id v16 = 0;
        *a3 = (id)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        id v16 = 0;
      }
    }
    else if (a3)
    {
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -10813, (uint64_t)"getLocalizedKindStringDictionary", 1150, 0);
      id v16 = 0;
      *a3 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      id v16 = 0;
    }

    _Block_object_dispose(&v55, 8);
    *(void *)id v44 = v63;
    std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__destroy_vector::operator()[abi:nn180100]((uint64_t **)v44);
    LaunchServices::BindingEvaluator::~BindingEvaluator(&v62);
  }
  else if (a3)
  {
    +[_LSDServiceDomain defaultServiceDomain]();
    uint64_t v13 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
    uint64_t v14 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v51, v13, 0);

    if (v14) {
      id v15 = 0;
    }
    else {
      id v15 = v54;
    }
    id v16 = 0;
    *a3 = v15;
  }
  else
  {
    id v16 = 0;
  }
  id v24 = v16;
  if (v51 && v53) {
    _LSContextDestroy(v51);
  }
  id v25 = v52;
  uint64_t v51 = 0;
  id v52 = 0;

  char v53 = 0;
  id v26 = v54;
  id v54 = 0;

  return v24;
}

void sub_182A07A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24,id a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  _Block_object_dispose(&a19, 8);
  LaunchServices::BindingEvaluation::ExtendedBinding::~ExtendedBinding(&a25);
  _Block_object_dispose(&a44, 8);
  LaunchServices::BindingEvaluation::State::~State(v44);
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a39);
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::BindingEvaluation::getKindStringFromState(LaunchServices::BindingEvaluation *this, LaunchServices::BindingEvaluation::State *a2, BOOL *a3, LaunchServices::BindingEvaluation::ExtendedBinding *a4)
{
  *(_OWORD *)long long v49 = 0u;
  *(_OWORD *)char v50 = 0u;
  *(_OWORD *)obuint64_t j = 0u;
  *(_OWORD *)long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  if (*((unsigned char *)this + 96))
  {
    uint64_t v42 = objc_msgSend(MEMORY[0x1E4F28B00], "currentHandler", a3, a4);
    id v43 = objc_msgSend(NSString, "stringWithUTF8String:", "const LocalizedString *LaunchServices::getKindStringFromState(State &, BOOL *, ExtendedBinding *)");
    [v42 handleFailureInFunction:v43 file:@"LSBindingEvaluator.mm" lineNumber:1950 description:@"Attempted to get a kind string when performing bundle lookup."];
  }
  if (!*((_DWORD *)this + 56) && !*((unsigned char *)this + 240))
  {
    id v7 = 0;
LABEL_35:

LABEL_36:
    BOOL v31 = 0;
    goto LABEL_37;
  }
  TypeResolvable = (const LaunchServices::BindingEvaluation::State *)_UTTypeGetTypeResolvable(**(_LSDatabase ***)this);
  if (LaunchServices::BindingEvaluation::conformsTo((void ***)this, TypeResolvable, @"com.apple.resolvable", v9))
  {
    id v7 = @"Alias";
    goto LABEL_35;
  }
  int TypeVolume = (const LaunchServices::BindingEvaluation::State *)_UTTypeGetTypeVolume(**(_LSDatabase ***)this);
  if (LaunchServices::BindingEvaluation::conformsTo((void ***)this, TypeVolume, @"public.volume", v11))
  {
    id v7 = @"Volume";
    goto LABEL_35;
  }
  TypeApplication = (const LaunchServices::BindingEvaluation::State *)_UTTypeGetTypeApplication(**(_LSDatabase ***)this);
  if (LaunchServices::BindingEvaluation::conformsTo((void ***)this, TypeApplication, @"com.apple.application", v13))
  {
    uint64_t v14 = (void *)*((void *)this + 1);
    id v15 = @"Application";
    if (v14)
    {
      LODWORD(v51) = 0;
      v44[0] = 0;
      int v16 = _LSBundleFindWithNode(*(void *)this, v14, &v51, v44);
      if (v44[0])
      {
        if ((*(void *)(v44[0] + 172) & 0x200000) != 0) {
          id v15 = @"Beta Application";
        }
      }
      else
      {
        int v32 = v16;
        id v33 = _LSDefaultLog();
        if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
          LaunchServices::BindingEvaluation::getKindStringFromState((uint64_t)v14, v32, v33);
        }

        id v15 = @"Application";
      }
    }
    id v7 = v15;
    goto LABEL_35;
  }
  int TypePackage = (const LaunchServices::BindingEvaluation::State *)_UTTypeGetTypePackage(**(_LSDatabase ***)this);
  if (LaunchServices::BindingEvaluation::conformsTo((void ***)this, TypePackage, @"com.apple.package", v18))
  {
    id v7 = @"Package";
    goto LABEL_18;
  }
  int TypeDirectory = (const LaunchServices::BindingEvaluation::State *)_UTTypeGetTypeDirectory(**(_LSDatabase ***)this);
  if (LaunchServices::BindingEvaluation::conformsTo((void ***)this, TypeDirectory, @"public.directory", v24))
  {
    id v7 = @"Folder";
    goto LABEL_35;
  }
  int TypeUnixExecutable = (const LaunchServices::BindingEvaluation::State *)_UTTypeGetTypeUnixExecutable(**(_LSDatabase ***)this);
  int v27 = LaunchServices::BindingEvaluation::conformsTo((void ***)this, TypeUnixExecutable, @"public.unix-executable", v26);
  char v28 = v27;
  id v7 = @"Document";
  if (v27) {
    uint64_t v29 = @"Unix Executable File";
  }
  else {
    uint64_t v29 = @"Document";
  }

  if ((v28 & 1) == 0)
  {
LABEL_18:
    LaunchServices::BindingEvaluation::runEvaluator((uint64_t *)this, 0, v44);
    uint64_t v19 = v44[0];
    if (v44[0] == v44[1])
    {
      uint64_t v21 = 0;
    }
    else
    {
      long long v20 = *(_OWORD *)(v44[0] + 16);
      long long v45 = *(_OWORD *)v44[0];
      long long v46 = v20;
      obj[0] = *(id *)(v44[0] + 32);
      obj[1] = *(id *)(v19 + 40);
      LOWORD(v48[0]) = *(_WORD *)(v19 + 48);
      v48[1] = *(id *)(v19 + 56);
      v49[0] = *(id *)(v19 + 64);
      LOBYTE(v49[1]) = *(unsigned char *)(v19 + 72);
      v50[0] = *(id *)(v19 + 80);
      LODWORD(v50[1]) = *(_DWORD *)(v19 + 88);
      uint64_t v21 = *((void *)&v46 + 1);
      if (v46)
      {
        if (*((void *)&v46 + 1))
        {
          if (!_LSClaimFlagsAreWildcard(*(_DWORD *)(*((void *)&v46 + 1) + 8)))
          {
            uint64_t LocalizedString = LaunchServices::LocalizedString::Get(**(LaunchServices::LocalizedString ***)this, (_LSDatabase *)*(unsigned int *)(v21 + 20));
            if (LocalizedString)
            {
              uint64_t v51 = v44;
              std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__destroy_vector::operator()[abi:nn180100](&v51);
              goto LABEL_62;
            }
          }
        }
      }
    }
    int v39 = *((_DWORD *)this + 56);
    if (v39
      && (uint64_t v40 = *((void *)this + 29)) != 0
      && (*(unsigned char *)(v40 + 9) & 2) == 0
      && v39 != _UTTypeGetTypeApplication(**(_LSDatabase ***)this))
    {
      id v41 = (_LSDatabase *)_UTGetLocalizedDescription(**(void ***)this, *((_DWORD *)this + 56));
      uint64_t LocalizedString = LaunchServices::LocalizedString::Get(**(LaunchServices::LocalizedString ***)this, v41);
      uint64_t v51 = v44;
      std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__destroy_vector::operator()[abi:nn180100](&v51);
      if (LocalizedString)
      {
LABEL_62:
        BOOL v31 = 0;
        if (a2) {
          goto LABEL_43;
        }
        goto LABEL_44;
      }
    }
    else
    {
      uint64_t v51 = v44;
      std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__destroy_vector::operator()[abi:nn180100](&v51);
    }
    if (*((void *)&v45 + 1))
    {
      if (v21) {
        BOOL v31 = !_LSClaimFlagsAreWildcard(*(_DWORD *)(v21 + 8));
      }
      else {
        BOOL v31 = 1;
      }
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  BOOL v31 = 0;
  id v7 = @"Unix Executable File";
LABEL_37:
  id v34 = (LaunchServices::CanonicalString *)LaunchServices::CanonicalString::Find(**(LaunchServices::CanonicalString ***)this, (_LSDatabase *)v7, v30);
  if (v34)
  {
    uint64_t LocalizedString = LaunchServices::CanonicalString::getLocalizedString(v34);
    if (!a2) {
      goto LABEL_44;
    }
LABEL_43:
    *(unsigned char *)a2 = v31;
    goto LABEL_44;
  }
  id v35 = _LSDefaultLog();
  if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
    LaunchServices::BindingEvaluation::getKindStringFromState((uint64_t)v7, v35);
  }

  uint64_t LocalizedString = 0;
  if (a2) {
    goto LABEL_43;
  }
LABEL_44:
  if (a3)
  {
    long long v36 = v46;
    *(_OWORD *)a3 = v45;
    *((_OWORD *)a3 + 1) = v36;
    objc_storeStrong((id *)a3 + 4, obj[0]);
    objc_storeStrong((id *)a3 + 5, obj[1]);
    *((_WORD *)a3 + 24) = v48[0];
    objc_storeStrong((id *)a3 + 7, v48[1]);
    objc_storeStrong((id *)a3 + 8, v49[0]);
    a3[72] = (BOOL)v49[1];
    objc_storeStrong((id *)a3 + 10, v50[0]);
    *((_DWORD *)a3 + 22) = v50[1];
  }
  if (!LocalizedString)
  {
    id v37 = _LSDefaultLog();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR)) {
      LaunchServices::BindingEvaluation::getKindStringFromState(v37);
    }
  }
  return LocalizedString;
}

void sub_182A08068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);

  LaunchServices::BindingEvaluation::ExtendedBinding::~ExtendedBinding((id *)va);
  _Unwind_Resume(a1);
}

id LaunchServices::BindingEvaluation::getBoundDisplayNameConstructorsForKindString(void **a1, unsigned int *a2, uint64_t a3, int a4)
{
  uint64_t v8 = (id *)(a2 + 16);
  if (!*((void *)a2 + 8))
  {
    obuint64_t j = 0;
    _LSBundleCopyNode(**a1, *a2, 0, 0, &obj);
    objc_storeStrong(v8, obj);
  }
  int v14 = *(_DWORD *)(*((void *)a2 + 1) + 168);
  CFStringRef v9 = *a1;
  uint64_t v10 = *a2;
  uint64_t v11 = *((void *)a2 + 8);
  if (a4) {
    +[_LSDisplayNameConstructor displayNameConstructorsWithContext:v9 bundle:v10 bundleClass:&v14 node:v11 error:0];
  }
  else {
  uint64_t v12 = +[_LSDisplayNameConstructor displayNameConstructorWithContext:v9 bundle:v10 bundleClass:&v14 node:v11 preferredLocalizations:a3 error:0];
  }

  return v12;
}

void sub_182A081A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void ___ZNK14LaunchServices16BindingEvaluator32getLocalizedKindStringDictionaryEP9LSContextPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, uint64_t a2, LaunchServices::BindingEvaluation::State *a3)
{
  v18[1] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void **)(a1 + 32);
  if (v6)
  {
    uint64_t v8 = [v6 objectForKeyedSubscript:a2];
    if (v8) {
      goto LABEL_9;
    }
    if ((unint64_t)[*(id *)(a1 + 32) count] >= 2)
    {
      CFArrayRef v9 = *(const __CFArray **)(a1 + 40);
      v18[0] = a2;
      CFArrayRef v10 = CFBundleCopyLocalizationsForPreferences(v9, (CFArrayRef)[MEMORY[0x1E4F1C978] arrayWithObjects:v18 count:1]);
      uint64_t v11 = [(__CFArray *)v10 firstObject];
      if (v11)
      {
        uint64_t v12 = [*(id *)(a1 + 32) objectForKeyedSubscript:v11];

        uint64_t v8 = (NSString *)v12;
        if (v12) {
          goto LABEL_9;
        }
      }
      else
      {
      }
    }
  }
  uint64_t v8 = (NSString *)*(id *)(a1 + 48);
LABEL_9:
  LaunchServices::BindingEvaluation::formatAndSanitizeKindString((LaunchServices::BindingEvaluation *)(*(void *)(*(void *)(a1 + 64) + 8) + 48), a3, v8, v7);
  CFStringRef v13 = (LaunchServices::BindingEvaluation::State *)objc_claimAutoreleasedReturnValue();
  if (v13 != a3)
  {
    int v14 = *(void **)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
    if (!v14)
    {
      uint64_t v15 = [*(id *)(a1 + 56) mutableCopy];
      uint64_t v16 = *(void *)(*(void *)(a1 + 72) + 8);
      int v17 = *(void **)(v16 + 40);
      *(void *)(v16 + 40) = v15;

      int v14 = *(void **)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
    }
    [v14 setObject:v13 forKeyedSubscript:a2];
  }
}

void sub_182A0834C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void LaunchServices::BindingEvaluation::ExtendedBinding::~ExtendedBinding(id *this)
{
}

uint64_t LaunchServices::BindingEvaluator::compareBindings(LaunchServices::BindingEvaluator *this, LSContext *a2, const LSBinding *a3, const LSBinding *a4)
{
  v23[12] = *(id *)MEMORY[0x1E4F143B8];
  LaunchServices::BindingEvaluation::State::State((LaunchServices::BindingEvaluation::State *)v21, a2, this);
  long long v15 = 0u;
  long long v16 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  LODWORD(v16) = a3->claim;
  *((void *)&v16 + 1) = a3->claimData;
  LODWORD(v15) = a3->bundle;
  *((void *)&v15 + 1) = a3->bundleData;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  LODWORD(v10) = a4->claim;
  *((void *)&v10 + 1) = a4->claimData;
  LODWORD(v9) = a4->bundle;
  *((void *)&v9 + 1) = a4->bundleData;
  uint64_t v7 = LaunchServices::BindingEvaluation::compareBindings((LaunchServices::BindingEvaluation *)v21, (LaunchServices::BindingEvaluation::State *)&v15, (const LaunchServices::BindingEvaluation::ExtendedBinding *)&v9, v6);

  *(void *)&long long v15 = v23;
  std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__destroy_vector::operator()[abi:nn180100]((uint64_t **)&v15);
  LaunchServices::BindingEvaluator::~BindingEvaluator(&v22);
  return v7;
}

void sub_182A08530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,id a34)
{
}

uint64_t LaunchServices::BindingEvaluator::compareBundles(LaunchServices::BindingEvaluator *this, LSContext *a2, unsigned int a3, LSBundleData *a4, unsigned int a5, LSBundleData *a6)
{
  v8.claiuint64_t m = 0;
  memset(&v8.claimData, 0, 24);
  v8.bundle = a3;
  v8.bundleData = a4;
  v7.claiuint64_t m = 0;
  memset(&v7.claimData, 0, 24);
  v7.bundle = a5;
  v7.bundleData = a6;
  return LaunchServices::BindingEvaluator::compareBindings(this, a2, &v8, &v7);
}

BOOL LaunchServices::BindingEvaluator::IsBundleWithFlagsEligibleToBindAsBrowser(int a1, int a2, int a3)
{
  return (a2 & 1) != 0
      && LaunchServices::BindingEvaluation::BindingEligibilityChecker::isBundleEligibleFromFlags((LaunchServices::EligibilityCache *)&LaunchServices::BindingEvaluation::BindingEligibilityChecker::shared(void)::checker, a1, a2 & 0xFFFFFF, a3);
}

BOOL LaunchServices::BindingEvaluation::BindingEligibilityChecker::isBundleEligibleFromFlags(LaunchServices::EligibilityCache *a1, int a2, int a3, int a4)
{
  if ((a2 & 0x200000) == 0 && (a4 & 0xFFFFFFFD) != 0) {
    return 1;
  }
  if ((a3 & 0x20000) != 0)
  {
    uint64_t v6 = (LaunchServices::EligibilityCache *)LaunchServices::EligibilityCache::shared(a1);
    return LaunchServices::EligibilityCache::getEligibilityGatedBrowsersCanBind(v6);
  }
  else
  {
    if ((a3 & 0x40000) == 0) {
      return 1;
    }
    id v5 = (LaunchServices::EligibilityCache *)LaunchServices::EligibilityCache::shared(a1);
    return LaunchServices::EligibilityCache::getEligibilityGatedBrowserEngineEmbeddersCanBind(v5);
  }
}

uint64_t _LSBindingSetReasonTrackingEnabled(uint64_t result)
{
  LaunchServices::BindingEvaluation::gIsReasonTrackingEnabled = result;
  return result;
}

uint64_t _LSBindingSetLogFile(uint64_t result)
{
  LaunchServices::BindingEvaluation::logFile = result;
  return result;
}

uint64_t _LSGetBindingForNodeOrSchemeOrUTI(int a1, void *a2, LaunchServices::BindingEvaluator *this, LaunchServices::BindingEvaluator *a4, int a5, int a6, int *a7, int a8, uint64_t a9)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  LOBYTE(v31[0]) = 0;
  char v36 = 0;
  if (a2)
  {
    LaunchServices::BindingEvaluator::CreateWithNode(a2, (LaunchServices::BindingEvaluator *)__p);
    std::optional<LaunchServices::BindingEvaluator>::operator=[abi:nn180100]<LaunchServices::BindingEvaluator,void>((LaunchServices::BindingEvaluator *)v31, (const LaunchServices::BindingEvaluator *)__p);
LABEL_7:
    LaunchServices::BindingEvaluator::~BindingEvaluator(__p);
    uint64_t v13 = 4294956486;
    goto LABEL_8;
  }
  if (this)
  {
    LaunchServices::BindingEvaluator::CreateWithURLScheme(this, __p);
    std::optional<LaunchServices::BindingEvaluator>::operator=[abi:nn180100]<LaunchServices::BindingEvaluator,void>((LaunchServices::BindingEvaluator *)v31, (const LaunchServices::BindingEvaluator *)__p);
    goto LABEL_7;
  }
  if (a4)
  {
    LaunchServices::BindingEvaluator::CreateWithUTI(a4, 0, (LaunchServices::BindingEvaluator *)__p);
    std::optional<LaunchServices::BindingEvaluator>::operator=[abi:nn180100]<LaunchServices::BindingEvaluator,void>((LaunchServices::BindingEvaluator *)v31, (const LaunchServices::BindingEvaluator *)__p);
    goto LABEL_7;
  }
  uint64_t v13 = 4294967246;
LABEL_8:
  if (!v36) {
    return v13;
  }
  int v32 = a6;
  if (a5)
  {
    v24[0] = MEMORY[0x1E4F143A8];
    v24[1] = 3221225472;
    void v24[2] = ___LSGetBindingForNodeOrSchemeOrUTI_block_invoke;
    v24[3] = &__block_descriptor_36_e60_B24__0__LSContext___8r__LSBinding_I__LSBundleData_I_______16l;
    int v25 = a5;
    uint64_t v14 = [v24 copy];
    long long v15 = v34;
    id v34 = (void *)v14;

    uint64_t v16 = [@"bundle unit" copy];
    long long v17 = v35;
    id v35 = (void *)v16;
  }
  int v33 = a8;
  if (a7)
  {
    int v18 = *a7;
    long long v19 = operator new(4uLL);
    __p[0] = v19;
    _DWORD *v19 = v18;
    __p[1] = v19 + 1;
    *(void *)&long long v27 = v19 + 1;
    LaunchServices::BindingEvaluator::setAllowedBundleClasses((uint64_t)v31, (uint64_t)__p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  LaunchServices::BindingEvaluator::getBestBinding((uint64_t *)__p, (LaunchServices::BindingEvaluator *)v31);
  id v20 = 0;
  uint64_t v21 = v20;
  if (v30)
  {
    if (!a9)
    {
      uint64_t v13 = 0;
      goto LABEL_21;
    }
    long long v22 = v27;
    *(_OWORD *)a9 = *(_OWORD *)__p;
    *(_OWORD *)(a9 + 16) = v22;
    objc_storeStrong((id *)(a9 + 32), obj);
    objc_storeStrong((id *)(a9 + 40), v29);
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v13 = _LSGetOSStatusFromNSError(v20);
  }
  if (v30)
  {
LABEL_21:
  }
  if (v36) {
    LaunchServices::BindingEvaluator::~BindingEvaluator(v31);
  }
  return v13;
}

void sub_182A088C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,id a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  if (a57) {
    LaunchServices::BindingEvaluator::~BindingEvaluator(&a36);
  }
  _Unwind_Resume(a1);
}

__CFString *LaunchServices::BindingEvaluation::State::getExtension(LaunchServices::BindingEvaluation::State *this)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v2 = (__CFString *)*((void *)this + 31);
  if (!v2)
  {
    int v3 = (void *)*((void *)this + 1);
    if (v3)
    {
      uint64_t v4 = [v3 extensionWithError:0];
      if (v4)
      {
        id v5 = _LSBindingLog();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)long long buf = 138477827;
          uint64_t v16 = v4;
          _os_log_impl(&dword_182959000, v5, OS_LOG_TYPE_DEBUG, "Got extension \".%{private}@\" from file URL.", buf, 0xCu);
        }

        LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"Got extension \".%@\" from file URL.", v6, v4);
      }
    }
    else
    {
      LSBinding v7 = (void *)*((void *)this + 4);
      if (v7)
      {
        LSBinding v8 = [v7 pathExtension];
        long long v9 = [v8 lowercaseString];

        if (v9)
        {
          long long v10 = _LSBindingLog();
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)long long buf = 138477827;
            uint64_t v16 = v9;
            _os_log_impl(&dword_182959000, v10, OS_LOG_TYPE_DEBUG, "Got extension \".%{private}@\" from caller-supplied filename. This is less accurate than passing a file URL.", buf, 0xCu);
          }

          LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"Got extension \".%@\" from caller-supplied filename. This is less accurate than passing a file URL.", v11, v9);
          uint64_t v4 = v9;
        }
        else
        {
          uint64_t v4 = &stru_1ECB1A570;
        }
      }
      else
      {
        uint64_t v4 = &stru_1ECB1A570;
      }
    }
    uint64_t v13 = (void *)*((void *)this + 31);
    long long v12 = (__CFString **)((char *)this + 248);
    *long long v12 = v4;

    id v2 = *v12;
  }

  return v2;
}

void sub_182A08B10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL LaunchServices::BindingEvaluation::State::shouldBindToTagClaims(LaunchServices::BindingEvaluation::State *this)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 257)) {
    return *((unsigned char *)this + 256) != 0;
  }
  if (!*((void *)this + 29) && !*((unsigned char *)this + 240))
  {
    long long v9 = (void *)*((void *)this + 1);
    if (!v9)
    {
      uint64_t v13 = 0;
      goto LABEL_12;
    }
    if ([*((id *)this + 1) isRegularFile])
    {
      uint64_t v8 = [v9 isResolvable];
      goto LABEL_6;
    }
    if (_LSNodeIsPackage(*(LSContext **)this, v9, 0))
    {
      int IsAVCHDCollection = _LSNodeIsAVCHDCollection(v9);
      uint64_t v13 = 0;
      long long v9 = 0;
      BOOL v12 = 0;
      uint64_t v11 = IsAVCHDCollection != 0;
      goto LABEL_21;
    }
    goto LABEL_11;
  }
  int TypeData = (const LaunchServices::BindingEvaluation::State *)_UTTypeGetTypeData(**(_LSDatabase ***)this);
  int v4 = LaunchServices::BindingEvaluation::conformsTo((void ***)this, TypeData, @"public.data", v3);
  id v5 = **(_LSDatabase ***)this;
  if (v4)
  {
    TypeResolvable = (const LaunchServices::BindingEvaluation::State *)_UTTypeGetTypeResolvable(v5);
    uint64_t v8 = LaunchServices::BindingEvaluation::conformsTo((void ***)this, TypeResolvable, @"com.apple.resolvable", v7);
LABEL_6:
    long long v9 = (void *)v8;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    BOOL v12 = 0;
    uint64_t v13 = 1;
    goto LABEL_22;
  }
  int TypeDirectory = (const LaunchServices::BindingEvaluation::State *)_UTTypeGetTypeDirectory(v5);
  if (LaunchServices::BindingEvaluation::conformsTo((void ***)this, TypeDirectory, @"public.directory", v15))
  {
    int TypePackage = (const LaunchServices::BindingEvaluation::State *)_UTTypeGetTypePackage(**(_LSDatabase ***)this);
    if (LaunchServices::BindingEvaluation::conformsTo((void ***)this, TypePackage, @"com.apple.package", v17))
    {
      int TypeAVCHDCollection = (const LaunchServices::BindingEvaluation::State *)_UTTypeGetTypeAVCHDCollection(**(_LSDatabase ***)this);
      uint64_t v11 = LaunchServices::BindingEvaluation::conformsTo((void ***)this, TypeAVCHDCollection, @"public.avchd-collection", v19);
      uint64_t v13 = 0;
      long long v9 = 0;
      BOOL v12 = 0;
LABEL_21:
      uint64_t v10 = 1;
      goto LABEL_22;
    }
    goto LABEL_11;
  }
  if (*((void *)this + 1))
  {
LABEL_11:
    uint64_t v13 = 0;
    long long v9 = 0;
LABEL_12:
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    BOOL v12 = 0;
    goto LABEL_22;
  }
  if (*((void *)this + 29))
  {
    uint64_t v13 = 0;
    long long v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    BOOL v12 = _LSBindingListGetEntryCount() != 0;
  }
  else
  {
    TagSpecification = (void *)_UTDynamicGetTagSpecification(*((const __CFString **)this + 27));
    BOOL v12 = TagSpecification != 0;

    uint64_t v13 = 0;
    long long v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
LABEL_22:
  *((_WORD *)this + 128) = v12 | ~(((unsigned __int16)v9 | ~(_WORD)v13) & (v11 | ~(_WORD)v10)) | 0x100;
  uint64_t v21 = _LSBindingLog();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
  {
    if (*((unsigned char *)this + 256)) {
      long long v22 = "";
    }
    else {
      long long v22 = " NOT";
    }
    *(_DWORD *)long long buf = 136447490;
    char v28 = v22;
    __int16 v29 = 1024;
    int v30 = v13;
    __int16 v31 = 1024;
    int v32 = (int)v9;
    __int16 v33 = 1024;
    int v34 = v10;
    __int16 v35 = 1024;
    int v36 = v11;
    __int16 v37 = 1024;
    BOOL v38 = v12;
    _os_log_impl(&dword_182959000, v21, OS_LOG_TYPE_DEBUG, "Will%{public}s bind to tag claims (regular file? %i; resolvable? %i; package? %i; AVCHD? %i; tagged UTI? %i)",
      buf,
      0x2Au);
  }

  if (*((unsigned char *)this + 256)) {
    CFStringRef v24 = "";
  }
  else {
    CFStringRef v24 = " NOT";
  }
  LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"Will%s bind to tag claims (regular file? %i; resolvable? %i; package? %i; AVCHD? %i; tagged UTI? %i)",
    v23,
    v24,
    v13,
    v9,
    v10,
    v11,
    v12);
  if (!*((unsigned char *)this + 257)) {
    return 1;
  }
  return *((unsigned char *)this + 256) != 0;
}

uint64_t LaunchServices::BindingEvaluation::conformsTo(void ***this, const LaunchServices::BindingEvaluation::State *a2, CFStringRef inConformsToUTI, const __CFString *a4)
{
  unsigned int v5 = a2;
  unsigned int v11 = a2;
  int v7 = *((_DWORD *)this + 56);
  if (v7)
  {
    uint64_t v8 = **this;
    if (!v5)
    {
      uint64_t result = _UTGetActiveTypeForCFStringIdentifier(v8, inConformsToUTI, &v11);
      if (!result) {
        return result;
      }
      uint64_t v8 = **this;
      int v7 = *((_DWORD *)this + 56);
      unsigned int v5 = v11;
    }
    int v10 = _UTTypeConformsTo(v8, v7, v5);
  }
  else
  {
    if (!*((unsigned char *)this + 240)) {
      return 0;
    }
    int v10 = UTTypeConformsTo((CFStringRef)this[27], inConformsToUTI);
  }
  return v10 != 0;
}

void sub_182A09010(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::BindingEvaluator::operator=(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)a1, *(id *)a2);
  objc_storeStrong((id *)(a1 + 8), *(id *)(a2 + 8));
  objc_storeStrong((id *)(a1 + 16), *(id *)(a2 + 16));
  objc_storeStrong((id *)(a1 + 24), *(id *)(a2 + 24));
  objc_storeStrong((id *)(a1 + 32), *(id *)(a2 + 32));
  objc_storeStrong((id *)(a1 + 40), *(id *)(a2 + 40));
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  objc_storeStrong((id *)(a1 + 80), *(id *)(a2 + 80));
  long long v5 = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v5;
  if (a1 != a2) {
    std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((char *)(a1 + 112), *(char **)(a2 + 112), *(void *)(a2 + 120), (uint64_t)(*(void *)(a2 + 120) - *(void *)(a2 + 112)) >> 2);
  }
  uint64_t v6 = MEMORY[0x18530F950](*(void *)(a2 + 136));
  int v7 = *(void **)(a1 + 136);
  *(void *)(a1 + 136) = v6;

  objc_storeStrong((id *)(a1 + 144), *(id *)(a2 + 144));
  uint64_t v8 = MEMORY[0x18530F950](*(void *)(a2 + 152));
  long long v9 = *(void **)(a1 + 152);
  *(void *)(a1 + 152) = v8;

  objc_storeStrong((id *)(a1 + 160), *(id *)(a2 + 160));
  return a1;
}

void LaunchServices::BindingEvaluation::addClaims(LaunchServices::BindingEvaluation *this, LaunchServices::BindingEvaluation::State *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)this + 29);
  if (v3) {
    LaunchServices::BindingEvaluation::addClaimsInBindingMap((uint64_t **)this, 0, *(_DWORD *)(v3 + 12));
  }
  if (LaunchServices::BindingEvaluation::State::shouldBindToTagClaims(this))
  {
    id v4 = *((id *)this + 1);
    if (v4)
    {

      goto LABEL_6;
    }
    if (!*((void *)this + 27))
    {
LABEL_6:
      if (*((void *)this + 1))
      {
        LaunchServices::BindingEvaluation::State::getExtension(this);
        long long v5 = (__CFString *)objc_claimAutoreleasedReturnValue();
        uint64_t v6 = v5;
        if (v5 && [(__CFString *)v5 length])
        {
          int StringForCFString = _LSDatabaseGetStringForCFString(**(void ***)this, v6, 1);
          LaunchServices::BindingEvaluation::addClaimsInBindingMap((uint64_t **)this, 1u, StringForCFString);
        }
      }
      goto LABEL_14;
    }
    v26[0] = 0;
    v26[1] = v26;
    void v26[2] = 0x2020000000;
    int v27 = 0;
    v24[0] = 0;
    v24[1] = v24;
    void v24[2] = 0x2020000000;
    int v25 = -1;
    *(void *)&long long buf = MEMORY[0x1E4F143A8];
    *((void *)&buf + 1) = 3221225472;
    __int16 v29 = ___ZN14LaunchServices17BindingEvaluationL27addExtensionAndOSTypeClaimsERNS0_5StateE_block_invoke;
    int v30 = &unk_1E522D450;
    __int16 v31 = (LaunchServices::BindingEvaluation *)v26;
    int v32 = v24;
    __int16 v33 = this;
    int v18 = (void *)MEMORY[0x18530F950](&buf);
    uint64_t v19 = *((void *)this + 29);
    if (v19)
    {
      _LSBindingListEnumerate(**(void ***)this, *(unsigned int *)(v19 + 80), v18);
    }
    else if (*((unsigned char *)this + 240))
    {
      _UTDynamicEnumerateTagsFoundInDatabase(**(void **)this, *((const __CFString **)this + 27), (uint64_t)v18);
    }

    _Block_object_dispose(v24, 8);
    _Block_object_dispose(v26, 8);
  }
  else
  {
    uint64_t v8 = _LSBindingLog();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_182959000, v8, OS_LOG_TYPE_DEBUG, "Skipping tag claims because the item is not a regular file or package and any UTI has no tags", (uint8_t *)&buf, 2u);
    }

    LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"Skipping tag claims because the item is not a regular file or package and any UTI has no tags", v9);
  }
LABEL_14:
  if (!*((void *)this + 1))
  {
    CFStringRef v10 = (const __CFString *)*((void *)this + 2);
    if (v10)
    {
      int v11 = _LSDatabaseGetStringForCFString(**(void ***)this, v10, 1);
      LaunchServices::BindingEvaluation::addClaimsInBindingMap((uint64_t **)this, 5u, v11);
    }
  }
  if ((*((unsigned char *)this + 117) & 0x20) != 0)
  {
    BOOL v14 = *((void *)this + 27) == 0;
    CFStringRef v15 = _LSBindingLog();
    BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG);
    if (v14)
    {
      if (v16)
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_182959000, v15, OS_LOG_TYPE_DEBUG, "Skipping wildcard document claims because we are not binding to a UTI", (uint8_t *)&buf, 2u);
      }

      LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"Skipping wildcard document claims because we are not binding to a UTI", v20);
    }
    else
    {
      if (v16)
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_182959000, v15, OS_LOG_TYPE_DEBUG, "Adding wildcard document claims from all applications", (uint8_t *)&buf, 2u);
      }

      LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"Adding wildcard document claims from all applications", v17);
      *(void *)&long long buf = MEMORY[0x1E4F143A8];
      *((void *)&buf + 1) = 3221225472;
      __int16 v29 = ___ZN14LaunchServices17BindingEvaluationL17addWildcardClaimsERNS0_5StateE_block_invoke;
      int v30 = &__block_descriptor_40_e19_v32__0I8r_v12I20_24l;
      __int16 v31 = this;
      _CSStoreEnumerateUnits();
    }
  }
  else
  {
    BOOL v12 = _LSBindingLog();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_182959000, v12, OS_LOG_TYPE_DEBUG, "Skipping legacy wildcard document claims", (uint8_t *)&buf, 2u);
    }

    LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"Skipping legacy wildcard document claims", v13);
  }
  uint64_t v21 = _LSBindingLog();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 23) - *((void *)this + 22)) >> 5);
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = v22;
    _os_log_impl(&dword_182959000, v21, OS_LOG_TYPE_DEBUG, "%llu bindings found", (uint8_t *)&buf, 0xCu);
  }

  LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"%llu bindings found", v23, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 23) - *((void *)this + 22)) >> 5));
}

void sub_182A095D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);

  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void LaunchServices::BindingEvaluation::addAlternateUTIClaims(void ***this, LaunchServices::BindingEvaluation::State *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if ((*((unsigned char *)this + 118) & 4) != 0)
  {
    BOOL v12 = _LSBindingLog();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_182959000, v12, OS_LOG_TYPE_DEBUG, "Skipping alternate UTI claims due to options", buf, 2u);
    }

    BOOL v14 = @"Skipping alternate UTI claims due to options";
    goto LABEL_18;
  }
  if (!this[27])
  {
    BOOL v16 = _LSBindingLog();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_182959000, v16, OS_LOG_TYPE_DEBUG, "Skipping alternate UTI claims (no UTI!)", buf, 2u);
    }

    BOOL v14 = @"Skipping alternate UTI claims (no UTI!)";
    goto LABEL_18;
  }
  uint64_t v3 = (__CFString *)LaunchServices::BindingEvaluation::State::getExtension((LaunchServices::BindingEvaluation::State *)this);
  if (!v3 || (CFStringRef v4 = v3, ![(__CFString *)v3 length]))
  {
    CFStringRef v15 = _LSBindingLog();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_182959000, v15, OS_LOG_TYPE_DEBUG, "Skipping alternate UTI claims (no path extension)", buf, 2u);
    }

    BOOL v14 = @"Skipping alternate UTI claims (no path extension)";
LABEL_18:
    LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)v14, v13);
    return;
  }
  int TypePackage = (const LaunchServices::BindingEvaluation::State *)_UTTypeGetTypePackage((_LSDatabase *)**this);
  int TypeData = (const LaunchServices::BindingEvaluation::State *)_UTTypeGetTypeData((_LSDatabase *)**this);
  if (LaunchServices::BindingEvaluation::conformsTo(this, TypePackage, @"com.apple.package", v7))
  {
    uint64_t v9 = _LSBindingLog();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      CFStringRef v10 = this[27];
      *(_DWORD *)long long buf = 138412290;
      int v27 = v10;
      _os_log_impl(&dword_182959000, v9, OS_LOG_TYPE_DEBUG, "Base type of UTI %@ was com.apple.package; looking for alternate UTI claims",
        buf,
        0xCu);
    }
    int v11 = @"Base type of UTI %@ was com.apple.package; looking for alternate UTI claims";
LABEL_24:

    LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)v11, v20, this[27]);
    if (TypePackage)
    {
      uint64_t v21 = **this;
      v24[0] = MEMORY[0x1E4F143A8];
      v24[1] = 3221225472;
      void v24[2] = ___ZN14LaunchServices17BindingEvaluationL21addAlternateUTIClaimsERNS0_5StateE_block_invoke;
      void v24[3] = &__block_descriptor_52_e41_v32__0I8I12r____IIIIiII_8I_IIIIIIII_16_24lu40l8;
      int v25 = (int)TypePackage;
      void v24[4] = this;
      v24[5] = v4;
      _UTEnumerateTypesForTag(v21, @"public.filename-extension", v4, v24);
    }
    return;
  }
  int v17 = LaunchServices::BindingEvaluation::conformsTo(this, TypeData, @"public.data", v8);
  uint64_t v9 = _LSBindingLog();
  BOOL v18 = os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG);
  if (v17)
  {
    if (v18)
    {
      uint64_t v19 = this[27];
      *(_DWORD *)long long buf = 138412290;
      int v27 = v19;
      _os_log_impl(&dword_182959000, v9, OS_LOG_TYPE_DEBUG, "Base type of UTI %@ was public.data; looking for alternate UTI claims",
        buf,
        0xCu);
    }
    int v11 = @"Base type of UTI %@ was public.data; looking for alternate UTI claims";
    LODWORD(TypePackage) = TypeData;
    goto LABEL_24;
  }
  if (v18)
  {
    unint64_t v22 = this[27];
    *(_DWORD *)long long buf = 138412290;
    int v27 = v22;
    _os_log_impl(&dword_182959000, v9, OS_LOG_TYPE_DEBUG, "Base type of UTI %@ was not public.data or com.apple.package; skipping alternate UTI claims",
      buf,
      0xCu);
  }

  LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"Base type of UTI %@ was not public.data or com.apple.package; skipping alternate UTI claims",
    v23,
    this[27]);
}

void LaunchServices::BindingEvaluation::addParentUTIClaims(LaunchServices::BindingEvaluation *this, LaunchServices::BindingEvaluation::State *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 117))
  {
    CFStringRef v7 = _LSBindingLog();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_182959000, v7, OS_LOG_TYPE_DEBUG, "Skipping parent UTI claims due to options", buf, 2u);
    }

    uint64_t v6 = @"Skipping parent UTI claims due to options";
  }
  else
  {
    int v3 = *((_DWORD *)this + 56);
    if (v3 == _UTTypeGetTypeWindowsExecutable(**(_LSDatabase ***)this))
    {
      CFStringRef v4 = _LSBindingLog();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_182959000, v4, OS_LOG_TYPE_DEBUG, "Skipping parent UTI claims because the type is a Windows executable", buf, 2u);
      }

      uint64_t v6 = @"Skipping parent UTI claims because the type is a Windows executable";
    }
    else
    {
      if (*((void *)this + 29))
      {
        CFStringRef v8 = _LSBindingLog();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          unint64_t v9 = *((void *)this + 27);
          *(_DWORD *)long long buf = 138412290;
          unint64_t v20 = v9;
          _os_log_impl(&dword_182959000, v8, OS_LOG_TYPE_DEBUG, "Adding claims for parent UTIs of %@", buf, 0xCu);
        }

        LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"Adding claims for parent UTIs of %@", v10, *((void *)this + 27));
        _UTTypeSearchConformsToTypes(**(void **)this, *((_DWORD *)this + 56), (uint64_t)LaunchServices::BindingEvaluation::searchParentUTIsForClaims, (uint64_t)this, 0);
      }
      else if (*((unsigned char *)this + 240))
      {
        int v11 = _LSBindingLog();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          unint64_t v12 = *((void *)this + 27);
          *(_DWORD *)long long buf = 138412290;
          unint64_t v20 = v12;
          _os_log_impl(&dword_182959000, v11, OS_LOG_TYPE_DEBUG, "Adding claims for parent UTIs of dynamic %@", buf, 0xCu);
        }

        LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"Adding claims for parent UTIs of dynamic %@", v13, *((void *)this + 27));
        CFStringRef v14 = (const __CFString *)*((void *)this + 27);
        v18[0] = MEMORY[0x1E4F143A8];
        v18[1] = 3221225472;
        void v18[2] = ___ZN14LaunchServices17BindingEvaluationL18addParentUTIClaimsERNS0_5StateE_block_invoke;
        v18[3] = &__block_descriptor_40_e22_v24__0__NSString_8_B16l;
        v18[4] = this;
        _UTDynamicEnumerateParentIdentifiers(v14, (uint64_t)v18);
      }
      CFStringRef v15 = _LSBindingLog();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 23) - *((void *)this + 22)) >> 5);
        *(_DWORD *)long long buf = 134217984;
        unint64_t v20 = v16;
        _os_log_impl(&dword_182959000, v15, OS_LOG_TYPE_DEBUG, "%llu bindings found", buf, 0xCu);
      }

      unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 23) - *((void *)this + 22)) >> 5);
      uint64_t v6 = @"%llu bindings found";
    }
  }
  LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)v6, v5, v17);
}

uint64_t std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::erase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding *>>,std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding *>>,LaunchServices::BindingEvaluation::ExtendedBinding *>((uint64_t)&v9, a3, *(void *)(a1 + 8), a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v7 -= 96;
        std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>::destroy[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding>(a1 + 24, v7);
      }
      while (v7 != v6);
    }
    *(void *)(a1 + 8) = v6;
  }
  return a2;
}

void _LSSetCrashMessage(NSString *a1)
{
  uint64_t v1 = a1;
  if (_LSLoggingQueue(void)::onceToken != -1) {
    dispatch_once(&_LSLoggingQueue(void)::onceToken, &__block_literal_global_14);
  }
  id v2 = _LSLoggingQueue(void)::logQueue;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  _OWORD block[2] = ___ZL18_LSSetCrashMessageP8NSString_block_invoke;
  block[3] = &unk_1E522D3E8;
  uint64_t v5 = v1;
  int v3 = v1;
  dispatch_sync(v2, block);
}

{
  NSString *v1;
  NSObject *v2;
  NSString *v3;
  void block[4];
  NSString *v5;

  uint64_t v1 = a1;
  if (_LSLoggingQueue(void)::onceToken != -1) {
    dispatch_once(&_LSLoggingQueue(void)::onceToken, &__block_literal_global_227);
  }
  id v2 = _LSLoggingQueue(void)::logQueue;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  _OWORD block[2] = ___ZL18_LSSetCrashMessageP8NSString_block_invoke_0;
  block[3] = &unk_1E522D3E8;
  uint64_t v5 = v1;
  int v3 = v1;
  dispatch_sync(v2, block);
}

void ___ZL18_LSSetCrashMessageP8NSString_block_invoke(uint64_t a1)
{
  id v1 = *(id *)(a1 + 32);
  id v2 = v1;
  if (v1)
  {
    int v3 = strdup((const char *)[v1 UTF8String]);
    CFStringRef v4 = _LSDefaultLog();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
      ___ZL18_LSSetCrashMessageP8NSString_block_invoke_cold_1((uint64_t)v3, v4);
    }
  }
  else
  {
    int v3 = 0;
  }
  uint64_t v5 = _LSSetCrashReporterMessage(NSString *)::messagePtr;
  uint64_t v6 = _LSSetCrashReporterMessage(NSString *)::messagePtr;
  atomic_compare_exchange_strong_explicit(&_LSSetCrashReporterMessage(NSString *)::messagePtr, (unint64_t *)&v6, (unint64_t)v3, memory_order_relaxed, memory_order_relaxed);
  if (v6 == v5) {
    uint64_t v7 = (void *)v5;
  }
  else {
    uint64_t v7 = v3;
  }
  free(v7);
  qword_1EB20D5F0 = _LSSetCrashReporterMessage(NSString *)::messagePtr;
}

void sub_182A09E90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL15_LSLoggingQueuev_block_invoke()
{
  id v2 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v0 = dispatch_queue_create("com.apple.launchservices.logging", v2);
  id v1 = (void *)_LSLoggingQueue(void)::logQueue;
  _LSLoggingQueue(void)::logQueue = (uint64_t)v0;
}

uint64_t LaunchServices::BindingEvaluation::sort(LaunchServices::BindingEvaluation::State &)::$_0::operator()(LaunchServices::BindingEvaluation **a1, LaunchServices::BindingEvaluation::State *a2, const LaunchServices::BindingEvaluation::ExtendedBinding *a3)
{
  uint64_t v6 = (void *)MEMORY[0x18530F680]();
  int v8 = LaunchServices::BindingEvaluation::compareBindings(*a1, a2, a3, v7);
  if (v8 == -1 || v8 != 1)
  {
    if (LaunchServices::BindingEvaluation::isBindingOK(*a1, a2, v9)) {
      uint64_t isBindingOK = LaunchServices::BindingEvaluation::isBindingOK(*a1, a3, v11) ^ 1;
    }
    else {
      uint64_t isBindingOK = 0;
    }
  }
  else
  {
    uint64_t isBindingOK = LaunchServices::BindingEvaluation::isBindingOK(*a1, a2, v9);
  }
  return isBindingOK;
}

void std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__assign_with_size[abi:nn180100]<std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>>,std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>>>(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 5) < a4)
  {
    std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__vdeallocate(a1);
    if (a4 > 0x2AAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v9 = 0x5555555555555556 * ((a1[2] - *a1) >> 5);
    if (v9 <= a4) {
      unint64_t v9 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 5) >= 0x155555555555555) {
      unint64_t v10 = 0x2AAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v9;
    }
    std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__vallocate[abi:nn180100](a1, v10);
    uint64_t v11 = std::__uninitialized_allocator_copy_impl[abi:nn180100]<std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>,std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>>,std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>>,LaunchServices::BindingEvaluation::ExtendedBinding*>((uint64_t)(a1 + 3), a2, a3, a1[1]);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - v8) >> 5) < a4)
  {
    uint64_t v12 = a2 + 32 * ((a1[1] - v8) >> 5);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding *>>,std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding *>>,LaunchServices::BindingEvaluation::ExtendedBinding *>((uint64_t)&v16, a2, v12, v8);
    uint64_t v11 = std::__uninitialized_allocator_copy_impl[abi:nn180100]<std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>,std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>>,std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>>,LaunchServices::BindingEvaluation::ExtendedBinding*>((uint64_t)(a1 + 3), v12, a3, a1[1]);
LABEL_11:
    a1[1] = v11;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding *>>,std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding *>>,LaunchServices::BindingEvaluation::ExtendedBinding *>((uint64_t)&v17, a2, a3, v8);
  uint64_t v14 = v13;
  uint64_t v15 = a1[1];
  if (v15 != v13)
  {
    do
    {
      v15 -= 96;
      std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>::destroy[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding>((uint64_t)(a1 + 3), v15);
    }
    while (v15 != v14);
  }
  a1[1] = v14;
}

void sub_182A0A11C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_182A0A124(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__vallocate[abi:nn180100](uint64_t *a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL) {
    abort();
  }
  uint64_t result = std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>::allocate[abi:nn180100]((uint64_t)(a1 + 3), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = result + 96 * a2;
  return result;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding *>>,std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding *>>,LaunchServices::BindingEvaluation::ExtendedBinding *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    long long v7 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)v5;
    *(_OWORD *)(a4 + 16) = v7;
    uint64_t v8 = *(void *)(v5 + 32);
    *(void *)(v5 + 32) = 0;
    unint64_t v9 = *(void **)(a4 + 32);
    *(void *)(a4 + 32) = v8;

    uint64_t v10 = *(void *)(v5 + 40);
    *(void *)(v5 + 40) = 0;
    uint64_t v11 = *(void **)(a4 + 40);
    *(void *)(a4 + 40) = v10;

    *(_WORD *)(a4 + 48) = *(_WORD *)(v5 + 48);
    uint64_t v12 = *(void *)(v5 + 56);
    *(void *)(v5 + 56) = 0;
    uint64_t v13 = *(void **)(a4 + 56);
    *(void *)(a4 + 56) = v12;

    uint64_t v14 = *(void *)(v5 + 64);
    *(void *)(v5 + 64) = 0;
    uint64_t v15 = *(void **)(a4 + 64);
    *(void *)(a4 + 64) = v14;

    *(unsigned char *)(a4 + 72) = *(unsigned char *)(v5 + 72);
    uint64_t v16 = *(void *)(v5 + 80);
    *(void *)(v5 + 80) = 0;
    char v17 = *(void **)(a4 + 80);
    *(void *)(a4 + 80) = v16;

    *(_DWORD *)(a4 + 88) = *(_DWORD *)(v5 + 88);
    a4 += 96;
    v5 += 96;
  }
  while (v5 != v6);
  return v6;
}

void *std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__construct_at_end<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>,std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>>(void *result, uint64_t a2, uint64_t a3)
{
  int v3 = result;
  uint64_t v4 = result[1];
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t result = std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>::construct[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding,LaunchServices::BindingEvaluation::ExtendedBinding const&>((uint64_t)(v3 + 3), v4 + v7, a2 + v7);
      v7 += 96;
    }
    while (a2 + v7 != a3);
    v4 += v7;
  }
  v3[1] = v4;
  return result;
}

void sub_182A0A2D0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v9 = v7;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      long long v10 = *(_OWORD *)(v9 + 16);
      *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
      *(_OWORD *)(v8 + 16) = v10;
      long long v11 = *(_OWORD *)(v9 + 32);
      *(_OWORD *)(v9 + 32) = 0uLL;
      *(_OWORD *)(v8 + 32) = v11;
      *(_WORD *)(v8 + 48) = *(_WORD *)(v9 + 48);
      long long v12 = *(_OWORD *)(v9 + 56);
      *(_OWORD *)(v9 + 56) = 0uLL;
      *(_OWORD *)(v8 + 56) = v12;
      *(unsigned char *)(v8 + 72) = *(unsigned char *)(v9 + 72);
      uint64_t v13 = *(void *)(v9 + 80);
      *(void *)(v9 + 80) = 0;
      *(void *)(v8 + 80) = v13;
      *(_DWORD *)(v8 + 88) = *(_DWORD *)(v9 + 88);
      v8 += 96;
      v9 += 96;
    }
    while (v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding *,LaunchServices::BindingEvaluation::ExtendedBinding *,LaunchServices::BindingEvaluation::ExtendedBinding *>((uint64_t)&v15, a2, v7, v6);
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding *,LaunchServices::BindingEvaluation::ExtendedBinding *,LaunchServices::BindingEvaluation::ExtendedBinding *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a3 + v7;
      uint64_t v9 = a4 + v7;
      long long v10 = *(_OWORD *)(a3 + v7 - 80);
      *(_OWORD *)(v9 - 96) = *(_OWORD *)(a3 + v7 - 96);
      *(_OWORD *)(v9 - 80) = v10;
      uint64_t v11 = *(void *)(a3 + v7 - 64);
      *(void *)(a3 + v7 - 64) = 0;
      long long v12 = *(void **)(a4 + v7 - 64);
      *(void *)(v9 - 64) = v11;

      uint64_t v13 = *(void *)(a3 + v7 - 56);
      *(void *)(v8 - 56) = 0;
      uint64_t v14 = *(void **)(a4 + v7 - 56);
      *(void *)(v9 - 56) = v13;

      *(_WORD *)(v9 - 48) = *(_WORD *)(a3 + v7 - 48);
      uint64_t v15 = *(void *)(a3 + v7 - 40);
      *(void *)(v8 - 40) = 0;
      uint64_t v16 = *(void **)(a4 + v7 - 40);
      *(void *)(v9 - 40) = v15;

      uint64_t v17 = *(void *)(a3 + v7 - 32);
      *(void *)(v8 - 32) = 0;
      BOOL v18 = *(void **)(a4 + v7 - 32);
      *(void *)(v9 - 32) = v17;

      *(unsigned char *)(v9 - 24) = *(unsigned char *)(a3 + v7 - 24);
      uint64_t v19 = *(void *)(a3 + v7 - 16);
      *(void *)(v8 - 16) = 0;
      unint64_t v20 = *(void **)(a4 + v7 - 16);
      *(void *)(v9 - 16) = v19;

      *(_DWORD *)(v9 - 8) = *(_DWORD *)(a3 + v7 - 8);
      v7 -= 96;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding *,LaunchServices::BindingEvaluation::ExtendedBinding *,LaunchServices::BindingEvaluation::ExtendedBinding *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    long long v7 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)v5;
    *(_OWORD *)(a4 + 16) = v7;
    objc_storeStrong((id *)(a4 + 32), *(id *)(v5 + 32));
    objc_storeStrong((id *)(a4 + 40), *(id *)(v5 + 40));
    *(_WORD *)(a4 + 48) = *(_WORD *)(v5 + 48);
    objc_storeStrong((id *)(a4 + 56), *(id *)(v5 + 56));
    objc_storeStrong((id *)(a4 + 64), *(id *)(v5 + 64));
    *(unsigned char *)(a4 + 72) = *(unsigned char *)(v5 + 72);
    objc_storeStrong((id *)(a4 + 80), *(id *)(v5 + 80));
    *(_WORD *)(a4 + 88) = *(_WORD *)(v5 + 88);
    *(_WORD *)(a4 + 90) = *(_WORD *)(v5 + 90);
    a4 += 96;
    v5 += 96;
  }
  while (v5 != v6);
  return v6;
}

uint64_t **LaunchServices::BindingEvaluation::addClaimsInBindingMap(uint64_t **result, unsigned int a2, int a3)
{
  if (a3)
  {
    int v3 = _LSDatabaseGetBindingMapDebugName(**result, a2);
    uint64_t v4 = (void *)_CSStringCopyCFString();
    LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"Adding claims for %@ \"%@\"", v5, v3, v4);

    return (uint64_t **)_LSDatabaseEnumeratingBindingMap();
  }
  return result;
}

void sub_182A0A628(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN14LaunchServices17BindingEvaluationL21addClaimsInBindingMapERNS0_5StateE14LSBindingMapIDjb_block_invoke(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v3 = a3 & 0xFFFFFFFC;
  if ((a3 & 3) == 2 && v3 != 0)
  {
    uint64_t v6 = _LSClaimGet();
    if (v6)
    {
      uint64_t v7 = v6;
      int v8 = *(_DWORD *)(v6 + 16);
      if (v8)
      {
        uint64_t v9 = _LSBundleGet(***(void ****)(a1 + 32), v8);
        if (v9)
        {
          long long v17 = 0u;
          long long v18 = 0u;
          long long v15 = 0u;
          long long v16 = 0u;
          long long v13 = 0u;
          *(void *)&long long v14 = v3;
          *((void *)&v14 + 1) = v7;
          LODWORD(v13) = *(_DWORD *)(v7 + 16);
          *((void *)&v13 + 1) = v9;
          uint64_t v10 = *(void *)(a1 + 32);
          if (LaunchServices::BindingEvaluation::gIsReasonTrackingEnabled || (*(unsigned char *)(v10 + 118) & 2) != 0)
          {
            uint64_t v11 = _LSDatabaseGetBindingMapDebugName(**(void **)v10, *(_DWORD *)(a1 + 40));
            if (*(unsigned char *)(a1 + 44)) {
              long long v12 = @"Parent of claim in binding map ";
            }
            else {
              long long v12 = @"Claim in binding map ";
            }

            *((void *)&v15 + 1) = -[__CFString stringByAppendingString:](v12, "stringByAppendingString:", v11, v13, v14, (void)v15);

            uint64_t v10 = *(void *)(a1 + 32);
          }
          LOBYTE(v16) = *(_DWORD *)(a1 + 40) == 0;
          BYTE1(v16) = *(unsigned char *)(a1 + 44);
          LaunchServices::BindingEvaluation::pushBackBinding((LaunchServices::BindingEvaluation *)v10, (uint64_t *)(v10 + 176), (LaunchServices::BindingEvaluation::State *)&v13);
        }
      }
    }
  }
}

void sub_182A0A7AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  LaunchServices::BindingEvaluation::ExtendedBinding::~ExtendedBinding(&a9);
  _Unwind_Resume(a1);
}

uint64_t **___ZN14LaunchServices17BindingEvaluationL27addExtensionAndOSTypeClaimsERNS0_5StateE_block_invoke(uint64_t **result, int a2, int a3)
{
  uint64_t v4 = result;
  uint64_t v5 = result[4][1];
  if (*(_DWORD *)(v5 + 24) != a2)
  {
    *(_DWORD *)(v5 + 24) = a2;
    uint64_t result = (uint64_t **)_LSDatabaseFindBindingMapIndex(*(void *)*result[6], a2);
    *(_DWORD *)(v4[5][1] + 24) = result;
  }
  unsigned int v6 = *(_DWORD *)(v4[5][1] + 24);
  if (v6 != -1 && v6 != 2)
  {
    int v8 = (uint64_t **)v4[6];
    return LaunchServices::BindingEvaluation::addClaimsInBindingMap(v8, v6, a3);
  }
  return result;
}

uint64_t ___ZN14LaunchServices17BindingEvaluationL17addWildcardClaimsERNS0_5StateE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(unsigned char *)(a3 + 175) & 0x10) != 0) {
    return _CSArrayEnumerateAllValues();
  }
  return result;
}

void ___ZN14LaunchServices17BindingEvaluationL17addWildcardClaimsERNS0_5StateE_block_invoke_2(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = _LSClaimGet();
  if (v5 && (*(unsigned char *)(v5 + 8) & 0x10) != 0)
  {
    long long v7 = 0u;
    long long v8 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    LODWORD(v7) = *(_DWORD *)(a1 + 48);
    *((void *)&v7 + 1) = *(void *)(a1 + 40);
    LODWORD(v8) = a3;
    *((void *)&v8 + 1) = v5;
    if (LaunchServices::BindingEvaluation::gIsReasonTrackingEnabled
      || (uint64_t v6 = *(void *)(a1 + 32), (*(unsigned char *)(v6 + 118) & 2) != 0))
    {
      *((void *)&v9 + 1) = @"Wildcard document claim";
      uint64_t v6 = *(void *)(a1 + 32);
    }
    LaunchServices::BindingEvaluation::pushBackBinding((LaunchServices::BindingEvaluation *)v6, (uint64_t *)(v6 + 176), (LaunchServices::BindingEvaluation::State *)&v7);
  }
}

void sub_182A0A9D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
}

uint64_t **___ZN14LaunchServices17BindingEvaluationL21addAlternateUTIClaimsERNS0_5StateE_block_invoke(uint64_t **result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = result[4];
  if (*((_DWORD *)v4 + 56) != a3 && (*(unsigned char *)(a4 + 8) & 1) != 0)
  {
    uint64_t v6 = result;
    uint64_t result = (uint64_t **)_UTTypeConformsTo(*(void **)*v4, a3, *((_DWORD *)result + 12));
    if (result)
    {
      long long v7 = _LSDefaultLog();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        long long v8 = v6[5];
        long long v9 = (void *)_CSStringCopyCFString();
        int v10 = 138412546;
        long long v11 = v8;
        __int16 v12 = 2112;
        long long v13 = v9;
        _os_log_impl(&dword_182959000, v7, OS_LOG_TYPE_INFO, "Found alternate UTI for extension .%@: %@", (uint8_t *)&v10, 0x16u);
      }
      return LaunchServices::BindingEvaluation::addClaimsInBindingMap((uint64_t **)v6[4], 0, *(_DWORD *)(a4 + 12));
    }
  }
  return result;
}

void sub_182A0AB20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::BindingEvaluation::searchParentUTIsForClaims(uint64_t a1)
{
  return 0;
}

uint64_t ___ZN14LaunchServices17BindingEvaluationL18addParentUTIClaimsERNS0_5StateE_block_invoke(uint64_t a1, const __CFString *a2)
{
  int v4 = 0;
  uint64_t result = _UTGetActiveTypeForCFStringIdentifier(***(void ****)(a1 + 32), a2, &v4);
  if (result)
  {
    LaunchServices::BindingEvaluation::addClaimsForParentUTI(*(void *)(a1 + 32), result);
    return _UTTypeSearchConformsToTypes(***(void ***)(a1 + 32), v4, (uint64_t)LaunchServices::BindingEvaluation::searchParentUTIsForClaims, *(void *)(a1 + 32), 0);
  }
  return result;
}

void LaunchServices::BindingEvaluation::addClaimsForParentUTI(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if ((*(unsigned char *)(a2 + 9) & 2) == 0 || (*(unsigned char *)(a1 + 116) & 0x20) != 0)
  {
    int v6 = *(_DWORD *)(a2 + 12);
    LaunchServices::BindingEvaluation::addClaimsInBindingMap((uint64_t **)a1, 0, v6);
  }
  else
  {
    uint64_t v2 = _LSBindingLog();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v3 = (void *)_CSStringCopyCFString();
      *(_DWORD *)long long buf = 138412290;
      long long v8 = v3;
      _os_log_impl(&dword_182959000, v2, OS_LOG_TYPE_DEBUG, "Skipping parent UTI claim for %@ due to options (wildcard UTIs not requested)", buf, 0xCu);
    }
    int v4 = (void *)_CSStringCopyCFString();
    LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"Skipping parent UTI claim for %@ due to options (wildcard UTIs not requested)", v5, v4);
  }
}

void sub_182A0AD48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id LaunchServices::BindingEvaluation::getBindingPath(void ***this, LaunchServices::BindingEvaluation::State *a2, const LaunchServices::BindingEvaluation::ExtendedBinding *a3)
{
  id v5 = *((id *)a2 + 7);
  if (!v5)
  {
    uint64_t v6 = _LSAliasGetPath(**this, **((_DWORD **)a2 + 1));
    long long v7 = (void *)*((void *)a2 + 7);
    *((void *)a2 + 7) = v6;

    id v5 = *((id *)a2 + 7);
  }

  return v5;
}

void std::vector<LSBinding>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    std::vector<LSBinding>::__base_destruct_at_end[abi:nn180100]((uint64_t)v2, *v2);
    unsigned int v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<LSBinding>::__base_destruct_at_end[abi:nn180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 48)
  {
  }
  *(void *)(a1 + 8) = a2;
}

uint64_t *std::vector<LSBinding>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 48;
      long long v6 = *(_OWORD *)(v3 - 32);
      *(_OWORD *)(v4 - 48) = *(_OWORD *)(v3 - 48);
      *(_OWORD *)(v4 - 32) = v6;
      long long v7 = *(_OWORD *)(v3 - 16);
      *(void *)(v3 - 16) = 0;
      *(void *)(v3 - 8) = 0;
      *(_OWORD *)(v4 - 16) = v7;
      v3 -= 48;
      v4 -= 48;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  uint64_t v8 = *result;
  uint64_t *result = v5;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<LSBinding>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(48 * a2);
}

uint64_t std::__split_buffer<LSBinding>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<LSBinding>::__destruct_at_end[abi:nn180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
  }
}

uint64_t std::vector<LSBinding>::__insert_with_size[abi:nn180100]<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding *>,std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding *>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 4)) >= a5)
    {
      uint64_t v20 = v12 - a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - a2) >> 4)) >= a5)
      {
        uint64_t v21 = a3 + 96 * a5;
      }
      else
      {
        uint64_t v21 = a3 + 32 * ((uint64_t)(v12 - a2) >> 4);
        a1[1] = std::__uninitialized_allocator_copy_impl[abi:nn180100]<std::allocator<LSBinding>,LaunchServices::BindingEvaluation::ExtendedBinding *,LaunchServices::BindingEvaluation::ExtendedBinding *,LSBinding*>(v9, v21, a4, *(void *)(v9 - 8));
        if (v20 < 1) {
          return v5;
        }
      }
      std::vector<LSBinding>::__move_range((uint64_t)a1, v5, v12, v5 + 48 * a5);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding *,LaunchServices::BindingEvaluation::ExtendedBinding *,LSBinding *>((uint64_t)&v23, a3, v21, v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 4);
      if (v14 > 0x555555555555555) {
        abort();
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v13) >> 4);
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 4);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v18 = 0x555555555555555;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v27 = v9;
      if (v18) {
        uint64_t v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<LSBinding>>(v9, v18);
      }
      else {
        uint64_t v19 = 0;
      }
      uint64_t v23 = v19;
      CFStringRef v24 = &v19[48 * v15];
      int v25 = v24;
      CFStringRef v26 = &v19[48 * v18];
      std::__split_buffer<LSBinding>::__construct_at_end_with_size<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding *>>(&v23, a3, a5);
      uint64_t v5 = std::vector<LSBinding>::__swap_out_circular_buffer(a1, &v23, v5);
      std::__split_buffer<LSBinding>::~__split_buffer((uint64_t)&v23);
    }
  }
  return v5;
}

void sub_182A0B188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<LSBinding>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = (_OWORD *)v6;
  if (v7 < a3)
  {
    unint64_t v9 = v7;
    uint64_t v8 = *(_OWORD **)(a1 + 8);
    do
    {
      long long v10 = *(_OWORD *)(v9 + 16);
      *uint64_t v8 = *(_OWORD *)v9;
      v8[1] = v10;
      long long v11 = *(_OWORD *)(v9 + 32);
      *(void *)(v9 + 32) = 0;
      *(void *)(v9 + 40) = 0;
      _OWORD v8[2] = v11;
      v8 += 3;
      v9 += 48;
    }
    while (v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<LSBinding *,LSBinding *,LSBinding *>((uint64_t)&v13, a2, v7, v6);
}

void *std::__split_buffer<LSBinding>::__construct_at_end_with_size<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding *>>(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v4 = result[2];
  if (a3)
  {
    uint64_t v6 = v4 + 48 * a3;
    do
    {
      long long v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
      *(_OWORD *)(v4 + 16) = v7;
      *(void *)(v4 + 32) = *(id *)(a2 + 32);
      uint64_t result = *(id *)(a2 + 40);
      *(void *)(v4 + 40) = result;
      v4 += 48;
      a2 += 96;
    }
    while (v4 != v6);
    uint64_t v4 = v6;
  }
  v3[2] = v4;
  return result;
}

uint64_t std::vector<LSBinding>::__swap_out_circular_buffer(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t result = a2[1];
  uint64_t v5 = *a1;
  uint64_t v6 = result;
  if (*a1 != a3)
  {
    uint64_t v7 = a3;
    uint64_t v8 = a2[1];
    do
    {
      uint64_t v6 = v8 - 48;
      long long v9 = *(_OWORD *)(v7 - 32);
      *(_OWORD *)(v8 - 48) = *(_OWORD *)(v7 - 48);
      *(_OWORD *)(v8 - 32) = v9;
      long long v10 = *(_OWORD *)(v7 - 16);
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(_OWORD *)(v8 - 16) = v10;
      v7 -= 48;
      v8 -= 48;
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  uint64_t v11 = a1[1];
  unint64_t v12 = (_OWORD *)a2[2];
  if (v11 != a3)
  {
    do
    {
      long long v13 = *(_OWORD *)(a3 + 16);
      *unint64_t v12 = *(_OWORD *)a3;
      v12[1] = v13;
      long long v14 = *(_OWORD *)(a3 + 32);
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 40) = 0;
      void v12[2] = v14;
      v12 += 3;
      a3 += 48;
    }
    while (a3 != v11);
    uint64_t v6 = a2[1];
  }
  a2[2] = v12;
  uint64_t v15 = *a1;
  *a1 = v6;
  a2[1] = v15;
  uint64_t v16 = a1[1];
  a1[1] = a2[2];
  a2[2] = v16;
  uint64_t v17 = a1[2];
  a1[2] = a2[3];
  a2[3] = v17;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:nn180100]<std::allocator<LSBinding>,LaunchServices::BindingEvaluation::ExtendedBinding *,LaunchServices::BindingEvaluation::ExtendedBinding *,LSBinding*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      long long v7 = *(_OWORD *)(v6 + 16);
      *(_OWORD *)a4 = *(_OWORD *)v6;
      *(_OWORD *)(a4 + 16) = v7;
      *(void *)(a4 + 32) = *(id *)(v6 + 32);
      *(void *)(a4 + 40) = *(id *)(v6 + 40);
      a4 += 48;
      v6 += 96;
    }
    while (v6 != a3);
  }
  return a4;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<LSBinding *,LSBinding *,LSBinding *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = a3;
    do
    {
      long long v8 = *(_OWORD *)(v7 - 32);
      *(_OWORD *)(a4 - 48) = *(_OWORD *)(v7 - 48);
      *(_OWORD *)(a4 - 32) = v8;
      uint64_t v9 = *(void *)(v7 - 16);
      *(void *)(v7 - 16) = 0;
      long long v10 = *(void **)(a4 - 16);
      *(void *)(a4 - 16) = v9;

      uint64_t v11 = *(void *)(v7 - 8);
      *(void *)(v7 - 8) = 0;
      unint64_t v12 = *(void **)(a4 - 8);
      *(void *)(a4 - 8) = v11;

      a4 -= 48;
      v7 -= 48;
    }
    while (v7 != a2);
  }
  return a3;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding *,LaunchServices::BindingEvaluation::ExtendedBinding *,LSBinding *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    long long v7 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)v5;
    *(_OWORD *)(a4 + 16) = v7;
    objc_storeStrong((id *)(a4 + 32), *(id *)(v5 + 32));
    objc_storeStrong((id *)(a4 + 40), *(id *)(v5 + 40));
    a4 += 48;
    v5 += 96;
  }
  while (v5 != v6);
  return v6;
}

double _LSBindingListBufferInit(uint64_t a1, void *a2)
{
  *(void *)&double result = 8184;
  *a2 = 8184;
  return result;
}

uint64_t _LSBindingListBufferAppend(void *a1, unsigned int *a2, unsigned int a3, unsigned int a4)
{
  id v7 = a1;
  long long v8 = a2 + 2;
  unsigned int v9 = a2[1];
  if (!v9)
  {
LABEL_6:
    uint64_t v11 = 0;
LABEL_20:
    uint64_t v16 = *a2;
    if (v16 >= 0xC)
    {
      a2[1] = v9 + 1;
      memmove(v8 + 3, v8, (char *)a2 - (char *)v8 - v16 + 0x2000);
      *long long v8 = a3;
      _CSStringRetain();
      v8[1] = 1;
      _OWORD v8[2] = a4;
      _CSStringRetain();
      *a2 -= 12;
      uint64_t v11 = 1;
    }
    goto LABEL_22;
  }
  int v10 = 0;
  while (1)
  {
    if (*v8 > a3)
    {
      uint64_t v11 = 0;
      goto LABEL_18;
    }
    if (*v8 == a3) {
      break;
    }
    v8 += v8[1] + 2;
    if (v9 == ++v10) {
      goto LABEL_6;
    }
  }
  uint64_t v12 = v8[1];
  if (v12)
  {
    uint64_t v13 = 0;
    while (v8[v13 + 2] != a4)
    {
      if (v12 == ++v13)
      {
        uint64_t v11 = 0;
        goto LABEL_16;
      }
    }
    uint64_t v11 = 1;
  }
  else
  {
    LODWORD(v13) = 0;
    uint64_t v11 = 0;
  }
  if (v13 == v12)
  {
LABEL_16:
    uint64_t v14 = *a2;
    if (v14 < 4) {
      goto LABEL_22;
    }
    v8[1] = v12 + 1;
    uint64_t v15 = &v8[v12 + 2];
    memmove(&v8[(v12 + 1) + 2], v15, (char *)a2 - (char *)v15 - v14 + 0x2000);
    *uint64_t v15 = a4;
    _CSStringRetain();
    unsigned int v9 = a2[1];
    *a2 -= 4;
    uint64_t v11 = 1;
  }
LABEL_18:
  if (v9 == v10 || *v8 != a3) {
    goto LABEL_20;
  }
LABEL_22:

  return v11;
}

void sub_182A0B6A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL _LSBindingListBufferAppendNSString(void *a1, unsigned int *a2, unsigned int a3, void *a4, int a5)
{
  id v9 = a1;
  int v10 = a4;
  unsigned int StringForCFString = _LSDatabaseCreateStringForCFString(v9, v10, a5);
  if (StringForCFString)
  {
    BOOL v12 = _LSBindingListBufferAppend(v9, a2, a3, StringForCFString) != 0;
    _CSStringRelease();
  }
  else
  {
    BOOL v12 = 1;
  }

  return v12;
}

void sub_182A0B75C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double _LSBindingListBufferReset(void *a1, uint64_t a2)
{
  _LSBindingListDataReleaseContents(a1, (unsigned int *)(a2 + 4));
  *(void *)&double result = 8184;
  *(void *)a2 = 8184;
  return result;
}

void _LSBindingListDataReleaseContents(void *a1, unsigned int *a2)
{
  id v7 = a1;
  if (*a2)
  {
    unsigned int v3 = 0;
    uint64_t v4 = a2 + 1;
    do
    {
      _CSStringRelease();
      if (v4[1])
      {
        unint64_t v5 = 0;
        do
        {
          _CSStringRelease();
          ++v5;
          unint64_t v6 = v4[1];
        }
        while (v5 < v6);
      }
      else
      {
        unint64_t v6 = 0;
      }
      v4 += v6 + 2;
      ++v3;
    }
    while (v3 < *a2);
  }
}

void sub_182A0B878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t _LSBindingListCreate(void *a1, _DWORD *a2, _DWORD *a3)
{
  id v5 = a1;
  unint64_t v6 = a2 + 1;
  if (a2[1])
  {
    int v7 = CSStoreAllocUnitWithData();
    *a3 = v7;
    if (v7)
    {
      uint64_t v8 = 0;
    }
    else
    {
      _LSBindingListDataReleaseContents(v5, a2 + 1);
      uint64_t v8 = 4294957803;
    }
    *a2 = 8184;
  }
  else
  {
    uint64_t v8 = 0;
    unint64_t v6 = a3;
  }
  _DWORD *v6 = 0;

  return v8;
}

void sub_182A0B950(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSBindingListDestroy()
{
  id v0 = (id)MEMORY[0x1F4188790]();
  if (CSStoreGetUnit())
  {
    CSStoreGetUnit();
    CSStoreFreeUnit();
  }
  else
  {
    puts("_LSBindingListDestroy: binding list not found");
  }
}

void sub_182A0BA6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSBindingListValidate(void *a1, uint64_t a2, const char **a3)
{
  id v5 = a1;
  if (!a2)
  {
    uint64_t v8 = 0;
    if (!a3) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  uint64_t Unit = (_DWORD *)CSStoreGetUnit();
  a2 = (uint64_t)bindingListDataHasValidLength(Unit, 0);
  if (!a2)
  {
    uint64_t v8 = "Invalid length";
    if (!a3) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  if (!*Unit)
  {
    uint64_t v8 = 0;
    a2 = 1;
    if (!a3) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  int v7 = 0;
  uint64_t v8 = "Bad class string";
  unint64_t v9 = (unint64_t)(Unit + 1);
  while (1)
  {
    if (v9 < (unint64_t)(Unit + 1) || v9 >= (unint64_t)Unit)
    {
      uint64_t v8 = 0;
      goto LABEL_21;
    }
    if (!_CSStringIsValid()) {
      goto LABEL_21;
    }
    if (*(_DWORD *)(v9 + 4)) {
      break;
    }
    unint64_t v11 = 0;
LABEL_14:
    v9 += 4 * v11 + 8;
    if (++v7 >= *Unit)
    {
      uint64_t v8 = 0;
      a2 = 1;
      goto LABEL_21;
    }
  }
  unint64_t v10 = 0;
  while (_CSStringIsValid())
  {
    ++v10;
    unint64_t v11 = *(unsigned int *)(v9 + 4);
    if (v10 >= v11) {
      goto LABEL_14;
    }
  }
  uint64_t v8 = "Bad binding string";
LABEL_21:
  if (a3) {
LABEL_22:
  }
    *a3 = v8;
LABEL_23:

  return a2;
}

void sub_182A0BC1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_DWORD *bindingListDataHasValidLength(_DWORD *result, unsigned int a2)
{
  if (result)
  {
    if (a2 < 4)
    {
      return 0;
    }
    else
    {
      uint64_t v2 = (char *)(result + 1);
      int v3 = *result;
      if (*result)
      {
        uint64_t v4 = (char *)result + a2;
        int v5 = 4;
        unint64_t v6 = (char *)(result + 1);
        while (1)
        {
          double result = 0;
          if (v6 < v2 || v6 >= v4) {
            break;
          }
          uint64_t v7 = *((unsigned int *)v6 + 1);
          v5 += 4 * v7 + 8;
          v6 += 4 * v7 + 8;
          if (!--v3) {
            return (_DWORD *)(v5 == a2);
          }
        }
      }
      else
      {
        int v5 = 4;
        return (_DWORD *)(v5 == a2);
      }
    }
  }
  return result;
}

uint64_t _LSBindingListActivate()
{
  id v0 = (void *)MEMORY[0x1F4188790]();
  int v2 = v1;
  id v3 = v0;
  uint64_t Unit = (_DWORD *)CSStoreGetUnit();
  if (Unit)
  {
    if (bindingListDataHasValidLength(Unit, 0))
    {
      if (__dst)
      {
        int v5 = 0;
        uint64_t v6 = 0;
        uint64_t v7 = &v14;
        do
        {
          int BindingMapIndex = _LSDatabaseFindBindingMapIndex((uint64_t)v3, *v7);
          unint64_t v9 = v7[1];
          if (BindingMapIndex << 16 != -65536 && v7[1])
          {
            unint64_t v10 = 0;
            do
            {
              uint64_t v11 = _LSBindableActivate(v3, v2);
              ++v10;
              unint64_t v9 = v7[1];
            }
            while (v10 < v9);
            uint64_t v6 = v11;
          }
          v7 += v9 + 2;
          ++v5;
        }
        while (v5 != __dst);
      }
      else
      {
        uint64_t v6 = 0;
      }
    }
    else
    {
      uint64_t v6 = 4294957799;
    }
  }
  else
  {
    uint64_t v6 = 4294957797;
  }

  return v6;
}

void sub_182A0BE2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSBindingListDeactivate()
{
  id v0 = (void *)MEMORY[0x1F4188790]();
  int v2 = v1;
  id v3 = v0;
  uint64_t Unit = (_DWORD *)CSStoreGetUnit();
  if (Unit)
  {
    if (bindingListDataHasValidLength(Unit, 0))
    {
      if (__dst)
      {
        int v5 = 0;
        uint64_t v6 = 0;
        uint64_t v7 = &v14;
        do
        {
          int BindingMapIndex = _LSDatabaseFindBindingMapIndex((uint64_t)v3, *v7);
          unint64_t v9 = v7[1];
          if (BindingMapIndex << 16 != -65536 && v7[1])
          {
            unint64_t v10 = 0;
            do
            {
              uint64_t v11 = _LSBindableDeactivate(v3, v2);
              ++v10;
              unint64_t v9 = v7[1];
            }
            while (v10 < v9);
            uint64_t v6 = v11;
          }
          v7 += v9 + 2;
          ++v5;
        }
        while (v5 != __dst);
      }
      else
      {
        uint64_t v6 = 0;
      }
    }
    else
    {
      uint64_t v6 = 4294957799;
    }
  }
  else
  {
    uint64_t v6 = 4294957797;
  }

  return v6;
}

void sub_182A0BFB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSBindingListEnumerate(void *a1, uint64_t a2, void *a3)
{
  id v4 = a1;
  id v5 = a3;
  uint64_t Unit = (unsigned int *)CSStoreGetUnit();
  uint64_t v7 = Unit;
  if (Unit)
  {
    char v12 = 0;
    if (*Unit)
    {
      unsigned int v8 = 0;
      unint64_t v9 = Unit + 1;
      do
      {
        unint64_t v10 = 0;
        while (1)
        {
          unint64_t v11 = v9[1];
          if (v10 >= v11) {
            break;
          }
          (*((void (**)(id, void, void, char *))v5 + 2))(v5, *v9, v9[v10++ + 2], &v12);
          if (v12) {
            goto LABEL_9;
          }
        }
        v9 += v11 + 2;
        ++v8;
      }
      while (v8 < *v7);
    }
  }
LABEL_9:
}

void sub_182A0C0D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSBindingListGetVisualizationFunctions(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = LaunchServices::BindingLists::display;
  a1[2] = 0;
}

uint64_t LaunchServices::BindingLists::display(void **this, LSContext *a2, uint64_t a3, void *a4, LaunchServices::DumpWriter *a5)
{
  if (a3)
  {
    uint64_t v16 = 0;
    if (!_LSBindingListValidate(*this, a3, &v16))
    {
      v15[33] = (id)MEMORY[0x1E4F143A8];
      v15[34] = (id)3221225472;
      v15[35] = ___ZN14LaunchServices12BindingListsL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke;
      v15[36] = &__block_descriptor_48_e5_v8__0l;
      v15[37] = a4;
      v15[38] = (id)v16;
      CSStore2::AttributedStringWriter::withWarningColors();
    }
    _CSStoreGetStringTable();
    uint64_t v6 = (NSMutableAttributedString *)objc_alloc_init(MEMORY[0x1E4F28E48]);
    uint64_t v9 = 0;
    unint64_t v10 = &v9;
    uint64_t v11 = 0x13812000000;
    char v12 = __Block_byref_object_copy__7;
    uint64_t v13 = __Block_byref_object_dispose__7;
    uint64_t v14 = 256;
    LaunchServices::DumpWriter::DumpWriter((LaunchServices::DumpWriter *)v15, v6);
    uint64_t v7 = CSStore2::AttributedStringWriter::getVisualizer((CSStore2::AttributedStringWriter *)a4);
    CSStore2::AttributedStringWriter::setVisualizer();

    CSStore2::AttributedStringWriter::setInsertsNewlines((CSStore2::AttributedStringWriter *)(v10 + 6));
    CSStore2::AttributedStringWriter::withReferenceToUnit();
    CSStore2::AttributedStringWriter::attributedString((CSStore2::AttributedStringWriter *)a4, &v6->super);
    _Block_object_dispose(&v9, 8);
    LaunchServices::DumpWriter::~DumpWriter(v15);
  }
  return 1;
}

void sub_182A0C308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);

  _Block_object_dispose(va, 8);
  LaunchServices::DumpWriter::~DumpWriter(v11);

  _Unwind_Resume(a1);
}

uint64_t ___ZN14LaunchServices12BindingListsL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke(uint64_t a1)
{
  return CSStore2::AttributedStringWriter::format(*(CSStore2::AttributedStringWriter **)(a1 + 32), 0, &cfstr_InvalidBinding.isa, *(void *)(a1 + 40));
}

void ___ZN14LaunchServices12BindingListsL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke_6(uint64_t a1)
{
  v12[0] = 0;
  v12[1] = v12;
  void v12[2] = 0x2020000000;
  int v13 = 0;
  v10[0] = 0;
  v10[1] = v10;
  void v10[2] = 0x2020000000;
  int v11 = -1;
  v8[0] = 0;
  v8[1] = v8;
  _OWORD v8[2] = 0x2020000000;
  char v9 = 1;
  uint64_t v1 = *(unsigned int *)(a1 + 56);
  uint64_t v2 = *(void *)(a1 + 32);
  int v7 = *(_DWORD *)(a1 + 60);
  long long v3 = *(_OWORD *)(a1 + 40);
  id v4 = **(void ***)(a1 + 40);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  void v5[2] = ___ZN14LaunchServices12BindingListsL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke_2;
  v5[3] = &unk_1E522D548;
  void v5[4] = v2;
  void v5[5] = v8;
  void v5[6] = v12;
  v5[7] = v10;
  long long v6 = v3;
  _LSBindingListEnumerate(v4, v1, v5);
  _Block_object_dispose(v8, 8);
  _Block_object_dispose(v10, 8);
  _Block_object_dispose(v12, 8);
}

void sub_182A0C474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 80), 8);
  _Block_object_dispose((const void *)(v13 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN14LaunchServices12BindingListsL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke_2()
{
  return CSStore2::AttributedStringWriter::withReferenceToUnit();
}

void ___ZN14LaunchServices12BindingListsL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke_3(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);
  if (*(unsigned char *)(v2 + 24)) {
    *(unsigned char *)(v2 + 24) = 0;
  }
  else {
    CSStore2::AttributedStringWriter::string((CSStore2::AttributedStringWriter *)(*(void *)(*(void *)(a1 + 40) + 8) + 48), &stru_1ECB1E430.isa);
  }
  long long v3 = (NSString *)_CSStringCopyCFString();
  if (v3)
  {
    int v4 = *(_DWORD *)(a1 + 84);
    uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8);
    if (v4 != *(_DWORD *)(v5 + 24))
    {
      *(_DWORD *)(v5 + 24) = v4;
      *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = _LSDatabaseFindBindingMapIndex(**(void **)(a1 + 64), *(_DWORD *)(a1 + 84));
    }
    int v6 = *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
    if (v6)
    {
      if (v6 == 1)
      {
        CSStore2::AttributedStringWriter::format((CSStore2::AttributedStringWriter *)(*(void *)(*(void *)(a1 + 40) + 8) + 48), 0, &stru_1ECB1E450.isa, v3);
      }
      else if (v6 == 5)
      {
        CSStore2::AttributedStringWriter::format((CSStore2::AttributedStringWriter *)(*(void *)(*(void *)(a1 + 40) + 8) + 48), 0, &stru_1ECB1E470.isa, v3);
      }
      else
      {
        CSStore2::AttributedStringWriter::string((CSStore2::AttributedStringWriter *)(*(void *)(*(void *)(a1 + 40) + 8) + 48), v3);
      }
    }
    else
    {
      unsigned int v11 = 0;
      uint64_t active = _UTGetActiveTypeForIdentifier(**(void ***)(a1 + 64), *(_DWORD *)(a1 + 80), &v11);
      uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
      char v9 = (CSStore2::AttributedStringWriter *)(v8 + 48);
      if (active)
      {
        CSStore2::AttributedStringWriter::link(v9, *(unsigned int *)(**(void **)(a1 + 64) + 32), v11, v3);
        unint64_t v10 = (NSString *)objc_claimAutoreleasedReturnValue();
        CSStore2::AttributedStringWriter::string(v9, v10);
      }
      else
      {
        CSStore2::AttributedStringWriter::string((CSStore2::AttributedStringWriter *)(v8 + 48), v3);
      }
    }
  }
  else
  {
    CSStore2::AttributedStringWriter::withWarningColors();
  }
}

void sub_182A0C74C(_Unwind_Exception *a1)
{
  long long v3 = v2;

  _Unwind_Resume(a1);
}

uint64_t ___ZN14LaunchServices12BindingListsL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke_4(uint64_t a1)
{
  return CSStore2::AttributedStringWriter::format((CSStore2::AttributedStringWriter *)(*(void *)(*(void *)(a1 + 32) + 8) + 48), 0, &cfstr_0xLlx_0.isa, *(unsigned int *)(a1 + 40));
}

void sub_182A0CB74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t (*initBRCopyRepresentedFileNameForFaultFileURL(const __CFURL *a1))(const __CFURL *)
{
  uint64_t v2 = (void *)CloudDocsLibrary(void)::frameworkLibrary;
  if (!CloudDocsLibrary(void)::frameworkLibrary)
  {
    uint64_t v2 = dlopen("/System/Library/PrivateFrameworks/CloudDocs.framework/CloudDocs", 2);
    CloudDocsLibrary(void)::frameworkLibrary = (uint64_t)v2;
  }
  double result = (uint64_t (*)(const __CFURL *))dlsym(v2, "BRCopyRepresentedFileNameForFaultFileURL");
  softLinkBRCopyRepresentedFileNameForFaultFileURL = result;
  if (result)
  {
    return (uint64_t (*)(const __CFURL *))result(a1);
  }
  return result;
}

uint64_t _LSSliceMaskWriteDescription(CSStore2::AttributedStringWriter *a1)
{
  return CSStore2::AttributedStringWriter::endFlags(a1);
}

uint64_t _LSBundleDisplayNameContextGetIndex(void *a1)
{
  id v1 = a1;
  uint64_t v8 = 0;
  char v9 = &v8;
  uint64_t v10 = 0x2020000000;
  uint64_t v11 = -1;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  void v5[2] = ___LSBundleDisplayNameContextGetIndex_block_invoke;
  v5[3] = &unk_1E522D5C0;
  id v6 = v1;
  int v7 = &v8;
  id v2 = v1;
  _LSBundleDisplayNameContextEnumerate(v5);
  uint64_t v3 = v9[3];

  _Block_object_dispose(&v8, 8);
  return v3;
}

void sub_182A0CF04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _LSBundleBaseFlagsWriteDescription(CSStore2::AttributedStringWriter *a1)
{
  return CSStore2::AttributedStringWriter::endFlags(a1);
}

__CFString *_LSBundleClassGetName(unsigned int a1)
{
  if (a1 >= 0x11)
  {
    objc_msgSend(NSString, "stringWithFormat:", @"0x%llx", a1);
    id v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v1 = off_1E522D7B0[a1];
  }

  return v1;
}

uint64_t _LSBundleDataSetModTime(uint64_t result, int a2)
{
  *(_DWORD *)(result + 196) = a2;
  return result;
}

uint64_t _LSBundleDataSetRegTime(uint64_t result, int a2)
{
  *(_DWORD *)(result + 24) = a2;
  return result;
}

uint64_t _LSPrepareMimicForBundleLookup(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = _LSPrepareMimicForBundleClass(v3, a2);
  if (v4)
  {
    char v9 = sel_nameWithError_;
    uint64_t v10 = sel_getVolumeIdentifier_error_;
    uint64_t v11 = sel_getCreationDate_error_;
    char v12 = sel_getFileIdentifier_error_;
    uint64_t v13 = sel_canonicalPathWithError_;
    uint64_t v14 = sel_getInodeNumber_error_;
    id v5 = v3;
    uint64_t v6 = 0;
    char v7 = 1;
    do
    {
      if (v7) {
        char v7 = objc_msgSend(v5, "populateSimpleSelector:error:", (&v9)[v6], a2, v9, v10, v11, v12, v13, v14);
      }
      else {
        char v7 = 0;
      }
      ++v6;
    }
    while (v6 != 6);
  }
  return v4;
}

void sub_182A0D2A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSBundleDataMayBeOnNetwork(void *a1, uint64_t a2)
{
  id v3 = a1;
  if (a2) {
    a2 = *(_DWORD *)(a2 + 4) && (uint64_t v4 = (_WORD *)_LSContainerGet()) != 0 && (*v4 & 1) == 0;
  }

  return a2;
}

void sub_182A0D320(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSBundleDataIsIncomplete(void *a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = v3;
  uint64_t v11 = 0;
  char v12 = &v11;
  uint64_t v13 = 0x2020000000;
  char v14 = 0;
  if (v3 && a2)
  {
    uint64_t v5 = *(void *)(a2 + 172);
    if ((v5 & 0x20000000000200) != 0)
    {
      if ((v5 & 0x2000000000) != 0 && (*(unsigned char *)(a2 + 164) & 1) != 0 && *(unsigned char *)(a2 + 148) == 2)
      {
        uint64_t v6 = _LSDefaultLog();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          char v7 = _LSDatabaseGetNSStringFromString(v4);
          *(_DWORD *)long long buf = 138543362;
          uint64_t v16 = v7;
          _os_log_impl(&dword_182959000, v6, OS_LOG_TYPE_INFO, "Ignoring first-party applet %{public}@ in /Library during incompleteness check", buf, 0xCu);
        }
      }
      else
      {
        char v14 = 1;
      }
    }
    else
    {
      uint64_t v10 = v3;
      _CSArrayEnumerateAllValues();
    }
  }
  uint64_t v8 = *((unsigned __int8 *)v12 + 24);
  _Block_object_dispose(&v11, 8);

  return v8;
}

void sub_182A0D4F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_182A0D65C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSBundleAdd(void *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = v4;
  if (v4 && v4->store)
  {
    int v6 = CSStoreAllocUnitWithData();
    if (v6)
    {
      -[_LSDatabase setApplicationsChanged:](v5, 1);
      uint64_t v7 = 0;
      if (a3) {
        *a3 = v6;
      }
    }
    else
    {
      uint64_t v7 = 4294957803;
    }
  }
  else
  {
    uint64_t v7 = 4294967246;
  }

  return v7;
}

void sub_182A0D718(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSBundleGetRegistrationNotification(void *a1, int a2, char a3, uint64_t a4)
{
  id v7 = a1;
  uint64_t v8 = _LSBundleGet(v7, a2);
  if (v8)
  {
    CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    values = (void *)_CSStringCopyCFString();
    if (values)
    {
      CFArrayRef v11 = CFArrayCreate(v9, (const void **)&values, 1, MEMORY[0x1E4F1D510]);
      if (v11)
      {
        CFDictionaryAddValue(Mutable, @"bundleIDs", v11);
        CFRelease(v11);
      }
      CFRelease(values);
    }
    char v12 = (const void *)_CSStringCopyCFString();
    if (v12)
    {
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F1CC48], v12);
      CFRelease(v12);
    }
    uint64_t v13 = *(void *)(v8 + 172);
    char v14 = (const void *)*MEMORY[0x1E4F1CFD0];
    if ((v13 & 0x40000) != 0) {
      uint64_t v15 = (const void *)*MEMORY[0x1E4F1CFD0];
    }
    else {
      uint64_t v15 = (const void *)*MEMORY[0x1E4F1CFC8];
    }
    CFDictionaryAddValue(Mutable, @"isPlaceholder", v15);
    if (a3) {
      CFDictionaryAddValue(Mutable, @"isForcedUpdate", v14);
    }

    if (Mutable)
    {
      uint64_t v16 = (void *)[objc_alloc(MEMORY[0x1E4F28EA0]) initWithName:a4 object:0 userInfo:Mutable];
      goto LABEL_17;
    }
  }
  else
  {

    CFMutableArrayRef Mutable = 0;
  }
  uint64_t v16 = 0;
LABEL_17:

  return v16;
}

void sub_182A0D8F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSBundleRemove(void *a1, int a2, int a3)
{
  __dst[70] = *(_LSDatabase **)MEMORY[0x1E4F143B8];
  uint64_t v4 = a1;
  uint64_t v5 = (const void *)_LSBundleGet(v4, a2);
  memcpy(__dst, v5, 0x230uLL);
  -[_LSDatabase setApplicationsChanged:](v4, 1);
  if ((HIDWORD(__dst[21]) & 0x40000) != 0)
  {
    id v7 = v17;
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 3221225472;
    v17[2] = ___LSBundleRemove_block_invoke;
    v17[3] = &unk_1E522BC50;
    void v17[4] = v4;
    _LSDatabaseEnumeratingBindingMap();
  }
  else
  {
    int v6 = v4;
    -[_LSDatabase schema]((uint64_t)v6);
    id v7 = v21;
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    void v21[2] = ___LSBundleRemove_block_invoke_2;
    v21[3] = &unk_1E522D6B0;
    memcpy(v22, __dst, sizeof(v22));
    v21[4] = v6;
    _CSStoreEnumerateUnits();
  }

  _LSDatabaseDisposeStringArray(v4, (int)__dst[58]);
  if (HIDWORD(__dst[58]))
  {
    uint64_t v16 = v4;
    _CSArrayEnumerateAllValues();
    _CSArrayDispose();
  }
  if (LODWORD(__dst[59]))
  {
    uint64_t v15 = v4;
    _CSArrayEnumerateAllValues();
    _CSArrayDispose();
  }
  if (HIDWORD(__dst[59]))
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    char v14 = v4;
    _CSArrayEnumerateAllValues();
    _CSArrayDispose();
  }
  else
  {
    CFMutableDictionaryRef Mutable = 0;
  }
  if (HIDWORD(__dst[60]))
  {
    uint64_t v13 = v4;
    _CSArrayEnumerateAllValues();
    _CSArrayDispose();
  }
  _LSBindableDeactivate(v4, a2);
  _LSBindableDeactivate(v4, a2);
  if (HIDWORD(__dst[12])) {
    _LSBindableDeactivate(v4, a2);
  }
  if (LODWORD(__dst[61]))
  {
    _LSBundleDeactivateBindingsForUserActivityTypes(v4, a2, (uint64_t)__dst);
    _CSArrayDispose();
  }
  if (LODWORD(__dst[69])) {
    _LSBindableDeactivate(v4, a2);
  }
  _CSStringRelease();
  _CSStringRelease();
  _CSStringRelease();
  _CSStringRelease();
  _CSStringRelease();
  _CSStringRelease();
  _CSStringRelease();
  _CSStringRelease();
  _CSStringRelease();
  _CSStringRelease();
  _CSStringRelease();
  _CSStringRelease();
  _CSStringRelease();
  _CSStringRelease();
  _CSStringRelease();
  _CSStringRelease();
  _LSDatabaseDisposeStringArray(v4, (int)__dst[60]);
  _CSStringRelease();
  _CSStringRelease();
  _CSStringRelease();
  _CSStringRelease();
  _LSPlistRemove((uint64_t)v4, (int)__dst[55]);
  _CSStringRelease();
  _CSStringRelease();
  _LSDatabaseDisposeStringArray(v4, (int)__dst[38]);
  _LSDatabaseDisposeStringArray(v4, SHIDWORD(__dst[38]));
  _LSDatabaseDisposeStringArray(v4, (int)__dst[66]);
  _LSDatabaseDisposeStringArray(v4, (int)__dst[57]);
  _LSDatabaseDisposeStringArray(v4, SHIDWORD(__dst[61]));
  _LSDatabaseDisposeStringArray(v4, SHIDWORD(__dst[11]));
  _CSStringRelease();
  _CSStringRelease();
  _CSArrayDispose();
  _LSPlistRemove((uint64_t)v4, SHIDWORD(__dst[56]));
  _LSPlistRemove((uint64_t)v4, (int)__dst[17]);
  _LSPlistRemove((uint64_t)v4, SHIDWORD(__dst[17]));
  _LSPlistRemove((uint64_t)v4, (int)__dst[18]);
  _LSPlistRemove((uint64_t)v4, (int)__dst[64]);
  _LSPlistRemove((uint64_t)v4, (int)__dst[19]);
  _LSPlistRemove((uint64_t)v4, SHIDWORD(__dst[67]));
  _CSStringRelease();
  _CSStringRelease();
  _LSDatabaseDisposeStringArray(v4, (int)__dst[62]);
  _LSDatabaseDisposeStringArray(v4, SHIDWORD(__dst[62]));
  LaunchServices::LocalizedString::Remove((LaunchServices::LocalizedString *)v4, (_LSDatabase *)LODWORD(__dst[14]));
  LaunchServices::LocalizedString::Remove((LaunchServices::LocalizedString *)v4, (_LSDatabase *)LODWORD(__dst[13]));
  LaunchServices::LocalizedString::Remove((LaunchServices::LocalizedString *)v4, (_LSDatabase *)HIDWORD(__dst[14]));
  LaunchServices::LocalizedString::Remove((LaunchServices::LocalizedString *)v4, (_LSDatabase *)LODWORD(__dst[15]));
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3221225472;
  void v18[2] = ___LSBundleRemove_block_invoke_5;
  v18[3] = &unk_1E522D700;
  CFAllocatorRef v9 = v4;
  uint64_t v19 = v9;
  memcpy(v20, __dst, sizeof(v20));
  _LSBundleDisplayNameContextEnumerate(v18);
  if (LODWORD(__dst[0])) {
    _LSAliasRemove(v9, (int)__dst[0]);
  }
  if (LODWORD(__dst[63])) {
    _LSAliasRemove(v9, (int)__dst[63]);
  }
  if (LODWORD(__dst[12])) {
    _LSAliasRemove(v9, (int)__dst[12]);
  }
  _LSDatabaseDisposeStringArray(v9, (int)__dst[65]);
  _CSArrayDispose();
  uint64_t v10 = v9;
  _CSArrayEnumerateAllValues();
  _CSArrayDispose();
  _LSPlistRemove((uint64_t)v10, SHIDWORD(__dst[68]));
  CSStoreFreeUnit();
  if (a3 || Mutable)
  {
    _LSDatabaseCommit((uint64_t)v10);
    if (Mutable)
    {
      LSPluginSendNotification(v10, @"com.apple.LaunchServices.pluginsunregistered", Mutable);
      CFRelease(Mutable);
    }
  }

  return 0;
}

void sub_182A0E200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42)
{
  _Unwind_Resume(a1);
}

uint64_t _LSBundleSetFlags()
{
  return _CSStoreWriteToUnit();
}

uint64_t _LSBundleSetMoreFlags()
{
  return _CSStoreWriteToUnit();
}

void _LSBundleSetLegacySpecialApplicationTypes(void *a1, uint64_t a2, int a3, int a4)
{
  __dst[70] = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  uint64_t v8 = (const void *)_LSBundleGet(v7, a2);
  if (v8)
  {
    id v9 = v7;
    if (!LSBundleMeetsBasicDefaultAppRequirements(v9, a2, (uint64_t)v8)) {
      goto LABEL_24;
    }
    uint64_t v10 = LSGetDefaultAppCategoryInfoForCategory(1);
    int v11 = (*((uint64_t (**)(id, uint64_t, const void *, void, void))v10 + 4))(v9, a2, v8, 0, a3 ^ 1u);
    char v12 = LSGetDefaultAppCategoryInfoForCategory(2);
    int v13 = (*((uint64_t (**)(id, uint64_t, const void *, void, void))v12 + 4))(v9, a2, v8, 0, a3 ^ 1u);
    if ((v11 | v13) != 1) {
      goto LABEL_24;
    }
    memcpy(__dst, v8, 0x230uLL);
    if (v13) {
      __int16 v14 = 2;
    }
    else {
      __int16 v14 = 0;
    }
    *(_WORD *)((char *)&__dst[23] + 5) = v14 | v11 | *(_WORD *)((unsigned char *)&__dst[23] + 5) & 0xFFFC;
    if (!a4)
    {
LABEL_23:
      _CSStoreWriteToUnit();
LABEL_24:

      goto LABEL_25;
    }
    int v15 = LSGetDefaultAppsClaimUnitIDForBundle(v9, a2);
    if (a3)
    {
      if (v11)
      {
        if (!v15)
        {
          uint64_t v16 = &unk_1ECB43B28;
LABEL_17:
          if (v13)
          {
            uint64_t v16 = [v16 arrayByAddingObject:@"com.apple.default-app.mail-client"];
          }
          uint64_t v18 = *MEMORY[0x1E4F1CC98];
          v27[0] = @"LSItemContentTypes";
          v27[1] = v18;
          v28[0] = v16;
          v28[1] = @"Viewer";
          _OWORD v27[2] = *MEMORY[0x1E4F1CC90];
          v28[2] = @"Default Apps Claim";
          uint64_t v19 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v28 forKeys:v27 count:3];
          uint64_t v20 = _LSDefaultLog();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 138412546;
            CFStringRef v24 = v16;
            __int16 v25 = 2048;
            uint64_t v26 = a2;
            _os_log_impl(&dword_182959000, v20, OS_LOG_TYPE_DEFAULT, "adding claim for default app types %@ for bundle %llx", buf, 0x16u);
          }

          unint64_t v22 = v19;
          [MEMORY[0x1E4F1C978] arrayWithObjects:&v22 count:1];
          _LSRegisterDocumentTypes((uint64_t)v9);
        }
      }
      else
      {
        if (v15) {
          char v17 = 0;
        }
        else {
          char v17 = v13;
        }
        if (v17)
        {
          uint64_t v16 = (void *)MEMORY[0x1E4F1CBF0];
          goto LABEL_17;
        }
      }
    }
    uint64_t v21 = _LSDatabaseGetSequenceNumber() + 1;
    __dst[34] = v21;
    HIDWORD(__dst[66]) = (int)CFAbsoluteTimeGetCurrent();
    _LSDatabaseSetSequenceNumber((uint64_t)v9, v21);
    goto LABEL_23;
  }
LABEL_25:
}

void sub_182A0E900(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_LSStringLocalizer *_LSBundleGetLocalizer(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a1;
  id v8 = a4;
  id v9 = (void *)MEMORY[0x18530F680]();
  if (!a2 || (uint64_t v10 = _LSBundleGet(v7, a2)) == 0)
  {
    if (v8 && [v8 isDirectory])
    {
      char v12 = [_LSStringLocalizer alloc];
      int v13 = [v8 URL];
      __int16 v14 = [(_LSStringLocalizer *)v12 initWithBundleURL:v13 stringsFile:@"InfoPlist"];

      goto LABEL_13;
    }
    goto LABEL_10;
  }
  if ((*(unsigned char *)(v10 + 184) & 8) == 0)
  {
LABEL_10:
    __int16 v14 = 0;
    goto LABEL_13;
  }
  if (a3 || *(_DWORD *)(v10 + 168) != 11)
  {
    int v11 = [[_LSStringLocalizer alloc] initWithDatabase:v7 bundleUnit:a2 delegate:a3];
  }
  else
  {
    int v11 = +[_LSStringLocalizer coreTypesLocalizer];
  }
  __int16 v14 = v11;
LABEL_13:

  return v14;
}

void sub_182A0EA84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NSObject *_LSBundleGetLocalizedName(void *a1, uint64_t a2, void *a3, void *a4, void *a5, char a6)
{
  id v11 = a1;
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  uint64_t v15 = _LSBundleGet(v11, a2);
  uint64_t v16 = v15;
  if (v12)
  {
    uint64_t Index = _LSBundleDisplayNameContextGetIndex(v12);
    uint64_t v18 = Index;
    if (Index == -1) {
      goto LABEL_12;
    }
    uint64_t v19 = LaunchServices::LocalizedString::Get((LaunchServices::LocalizedString *)v11, (_LSDatabase *)*(unsigned int *)(v16 + 4 * Index + 516));
    if (!v19) {
      goto LABEL_12;
    }
  }
  else
  {
    if ((a6 & 1) != 0 || (uint64_t v20 = (_LSDatabase *)*(unsigned int *)(v15 + 112), !v20)) {
      uint64_t v20 = (_LSDatabase *)*(unsigned int *)(v15 + 104);
    }
    uint64_t v19 = LaunchServices::LocalizedString::Get((LaunchServices::LocalizedString *)v11, v20);
    uint64_t v18 = -1;
    if (!v19) {
      goto LABEL_12;
    }
  }
  uint64_t v21 = LaunchServices::LocalizedString::localizeUnsafely(v19, v11, v14);
  if (v21)
  {
    unint64_t v22 = _LSDefaultLog();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      _LSBundleGetShortDescription(v11, a2);
      objc_claimAutoreleasedReturnValue();
      _LSBundleGetLocalizedName_cold_2();
    }
LABEL_26:

    goto LABEL_27;
  }
LABEL_12:
  uint64_t v23 = _LSDefaultLog();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
  {
    _LSBundleGetShortDescription(v11, a2);
    objc_claimAutoreleasedReturnValue();
    _LSBundleGetLocalizedName_cold_1();
  }

  if (v18 != -1)
  {
    CFStringRef v24 = 0;
    goto LABEL_36;
  }
  __int16 v25 = _LSBundleGetLocalizer(v11, a2, 0, v13);
  unint64_t v22 = v25;
  if (!v25) {
    goto LABEL_33;
  }
  if (v12)
  {
    uint64_t v26 = [NSString stringWithFormat:@"%@#%@", *MEMORY[0x1E4F1CC48], v12];
    uint64_t v21 = [v22 localizedStringWithString:v26 preferredLocalizations:v14];

    if (!v21)
    {
LABEL_33:
      CFStringRef v24 = 0;
LABEL_35:

      goto LABEL_36;
    }
  }
  else if ((a6 & 1) != 0 {
         || ([v25 localizedStringWithString:*MEMORY[0x1E4F1CC48] preferredLocalizations:v14], (uint64_t v21 = objc_claimAutoreleasedReturnValue()) == 0))
  }
  {
    uint64_t v21 = [v22 localizedStringWithString:*MEMORY[0x1E4F1D008] preferredLocalizations:v14];
    if (!v21) {
      goto LABEL_33;
    }
  }
  if (![(id)__LSDefaultsGetSharedInstance() markLocalizationsStoredInDatabase]) {
    goto LABEL_26;
  }
  CFStringRef v24 = [v21 stringByAppendingString:@"üî•"];

  uint64_t v21 = v24;
  if (v24)
  {
LABEL_27:
    unint64_t v27 = [v21 length];
    CFStringRef v24 = 0;
    if (v27 <= 0x400 && v27)
    {
      uint64_t v28 = [v13 extensionWithError:0];
      unint64_t v22 = v28;
      if (v28 && [v28 length])
      {
        CFStringRef v24 = [v21 stringByAppendingPathExtension:v22];
      }
      else
      {
        CFStringRef v24 = v21;
      }
    }
    else
    {
      unint64_t v22 = v21;
    }
    goto LABEL_35;
  }
LABEL_36:

  return v24;
}

void sub_182A0EDE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSBundleGetShortDescription(void *a1, int a2)
{
  id v3 = a1;
  uint64_t v4 = _LSBundleGet(v3, a2);
  uint64_t v5 = v4;
  if (v4)
  {
    uint64_t v6 = LaunchServices::LocalizedString::Get((LaunchServices::LocalizedString *)v3, (_LSDatabase *)*(unsigned int *)(v4 + 112));
    if (v6)
    {
      id v7 = LaunchServices::LocalizedString::localizeUnsafely(v6, v3, 0);
    }
    else
    {
      id v7 = 0;
    }
    uint64_t v8 = LaunchServices::LocalizedString::Get((LaunchServices::LocalizedString *)v3, (_LSDatabase *)*(unsigned int *)(v5 + 104));
    if (v8)
    {
      uint64_t v9 = LaunchServices::LocalizedString::localizeUnsafely(v8, v3, 0);

      id v7 = (void *)v9;
    }
    if (!v7)
    {
      id v7 = (void *)_CSStringCopyCFString();
      if (!v7)
      {
        id v7 = (void *)_CSStringCopyCFString();
        if (!v7)
        {
          id v7 = _LSAliasGetName(v3, *(_DWORD *)v5);
        }
      }
    }
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

void sub_182A0EF84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSBundleGetDisplayNameForNodeWithUnregisteredBundleType(void **a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  if (!_LSBundleNodeHasUnregisteredPersonality(a1, v7, v8, 0))
  {
    uint64_t v10 = 0;
    uint64_t v15 = 0;
    goto LABEL_25;
  }
  id v26 = 0;
  uint64_t v9 = [v7 bundleInfoDictionaryWithError:&v26];
  uint64_t v10 = (uint64_t)v26;
  if (v9)
  {
    uint64_t v11 = objc_opt_class();
    uint64_t v12 = *MEMORY[0x1E4F1CC48];
    uint64_t v13 = [v9 objectForKey:*MEMORY[0x1E4F1CC48]];
    id v14 = (void *)v13;
    if (v11 && v13)
    {
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        uint64_t v15 = 0;
        uint64_t v16 = v14;
        id v17 = (id)v10;
        goto LABEL_22;
      }
LABEL_9:
      id v25 = (id)v10;
      uint64_t v18 = [v7 nameWithError:&v25];
      id v17 = v25;

      if (v18)
      {
        uint64_t v19 = [v18 stringByDeletingPathExtension];
        uint64_t v20 = v19;
        if (v19 && ![v19 caseInsensitiveCompare:v14])
        {
          uint64_t v16 = _LSBundleGetLocalizer(*a1, 0, 0, v7);
        }
        else
        {
          uint64_t v16 = 0;
        }

        if (!v16)
        {
          uint64_t v15 = 0;
LABEL_23:
          uint64_t v10 = (uint64_t)v17;
          goto LABEL_24;
        }
        uint64_t v21 = [v7 URL];
        unint64_t v22 = objc_msgSend(v21, "ls_preferredLocalizations");
        uint64_t v23 = [v16 localizedStringWithString:v12 preferredLocalizations:v22];

        if (v23)
        {
          uint64_t v15 = [v23 stringByAppendingPathExtension:v8];
        }
        else
        {
          uint64_t v15 = 0;
        }
      }
      else
      {
        uint64_t v15 = 0;
        uint64_t v16 = v14;
      }
LABEL_22:

      goto LABEL_23;
    }
    if (v13) {
      goto LABEL_9;
    }
  }
  uint64_t v15 = 0;
LABEL_24:

LABEL_25:
  if (!(v15 | v10))
  {
    uint64_t v10 = _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -10813, (uint64_t)"_LSBundleGetDisplayNameForNodeWithUnregisteredBundleType", 2090, 0);
  }
  if (a4 && !v15) {
    *a4 = (id) v10;
  }

  return (id)v15;
}

void sub_182A0F224(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSBundleNodeHasUnregisteredPersonality(void **a1, void *a2, void *a3, int *a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = v8;
  if (a4)
  {
    int v10 = *a4;
  }
  else
  {
    if (v8) {
      int v11 = _LSGetBundleClassForExtensionNSString(v8);
    }
    else {
      int v11 = _LSGetBundleClassForNode((uint64_t)a1, v7);
    }
    int v10 = v11;
  }
  uint64_t HasUnregisteredPersonality = _LSBundleClassHasUnregisteredPersonality(v10);
  uint64_t v13 = HasUnregisteredPersonality;
  if (!v10 && !HasUnregisteredPersonality)
  {
    CFStringRef inUTI = 0;
    if ([v7 getCachedResourceValueIfPresent:&inUTI forKey:*MEMORY[0x1E4F1C728] error:0])
    {
      uint64_t v13 = UTTypeConformsTo(inUTI, @"com.apple.localizable-name-bundle");
    }
    else
    {
      LaunchServices::TypeEvaluator::TypeEvaluator(v17, v7);
      int v16 = 0;
      if (LaunchServices::TypeEvaluator::getTypeUnit((uint64_t)v17, a1, &v16, 0)
        && (unsigned int TypeLocalizableNameBundle = _UTTypeGetTypeLocalizableNameBundle((_LSDatabase *)*a1)) != 0)
      {
        uint64_t v13 = _UTTypeConformsTo(*a1, v16, TypeLocalizableNameBundle);
      }
      else
      {
        uint64_t v13 = 0;
      }
    }
  }

  return v13;
}

void sub_182A0F3DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t _LSBundleCopyStringDictionaryForKey(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  int v10 = (void *)MEMORY[0x18530F680]();
  int v11 = _LSBundleGetLocalizer(a1, a2, 0, a3);
  uint64_t v12 = v11;
  if (v11)
  {
    uint64_t v13 = [v11 localizedStringDictionaryWithString:a4 defaultValue:a5];
  }
  else
  {
    uint64_t v13 = 0;
  }

  return v13;
}

void sub_182A0F4B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSBundleInfoPlistKeyIsCommon(void *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (_LSBundleInfoPlistKeyIsCommon::once != -1) {
    dispatch_once(&_LSBundleInfoPlistKeyIsCommon::once, &__block_literal_global_15);
  }
  if ([(id)_LSBundleInfoPlistKeyIsCommon::explicitlyIgnoredKeys containsObject:a1]) {
    return 0;
  }
  if ([(id)_LSBundleInfoPlistKeyIsCommon::explicitlyIncludedKeys containsObject:a1]) {
    return 1;
  }
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v3 = (id)_LSBundleInfoPlistKeyIsCommon::prefixes;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v9;
    while (2)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v3);
        }
        if (objc_msgSend(a1, "hasPrefix:", *(void *)(*((void *)&v8 + 1) + 8 * i), (void)v8))
        {
          uint64_t v2 = 1;
          goto LABEL_17;
        }
      }
      uint64_t v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
  uint64_t v2 = 0;
LABEL_17:

  return v2;
}

void sub_182A0F62C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A0F7C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSBundleCopyArchitecturesAvailable(void *a1, int a2)
{
  id v3 = a1;
  uint64_t v4 = v3;
  uint64_t v5 = 0;
  if (v3)
  {
    if (a2)
    {
      uint64_t v5 = _LSBundleGet(v3, a2);
      if (v5)
      {
        uint64_t v6 = (void *)MEMORY[0x18530F680]();
        uint64_t v5 = (uint64_t)_LSBundleCopyArchitectures_Common(v5);
      }
    }
  }

  return v5;
}

void sub_182A0F858(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__CFString *_LSGetDescriptionForPersonaType(unint64_t a1)
{
  if (a1 >= 5) {
    id v1 = (__CFString *)objc_msgSend([NSString alloc], "initWithFormat:", @"InvalidType(%lu)", a1);
  }
  else {
    id v1 = off_1E522D890[a1];
  }

  return v1;
}

void _LSBundleGetVisualizationFunctions(id (**a1)(void **this, LSContext *a2, int a3)@<X8>)
{
  *a1 = LaunchServices::Bundles::getSummary;
  a1[1] = (id (*)(void **, LSContext *, int))LaunchServices::Bundles::display;
  a1[2] = (id (*)(void **, LSContext *, int))LaunchServices::Bundles::copyBindingForVisualization;
}

id LaunchServices::Bundles::getSummary(void **this, LSContext *a2, int a3)
{
  return _LSBundleGetShortDescription(*this, a3);
}

BOOL LaunchServices::Bundles::display(void **this, LSContext *a2, unsigned int a3, CSStore2::AttributedStringWriter *a4, LaunchServices::DumpWriter *a5)
{
  uint64_t v128 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = _LSBundleGet(*this, a3);
  if (v7)
  {
    uint64_t v79 = a4;
    uint64_t v77 = (unsigned int *)v7;
    if (*(unsigned char *)(v7 + 508) != 11)
    {
      objc_msgSend(NSNumber, "numberWithUnsignedChar:");
      long long v8 = (NSNumber *)objc_claimAutoreleasedReturnValue();
      CSStore2::AttributedStringWriter::number(v79, &cfstr_Revision.isa, v8);
    }
    long long v9 = *this;
    id v117 = 0;
    long long v10 = _LSBundleCreateNode(v9, a3, 0, 0, &v117);
    id v11 = v117;
    uint64_t v12 = v11;
    int v74 = v10;
    if (!v10
      || (id v116 = v11,
          char v13 = [v10 checkResourceIsReachableAndReturnError:&v116],
          id v14 = v116,
          v12,
          uint64_t v12 = v14,
          (v13 & 1) == 0))
    {
      uint64_t v110 = MEMORY[0x1E4F143A8];
      uint64_t v111 = 3221225472;
      uint64_t v112 = ___ZN14LaunchServices7BundlesL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke;
      id v113 = &unk_1E522BA28;
      v115 = v79;
      id v14 = v12;
      id v114 = v14;
      CSStore2::AttributedStringWriter::withWarningColors();
    }
    uint64_t v15 = v77[42];
    long long v73 = _LSBundleClassGetName(v77[42]);
    CSStore2::AttributedStringWriter::format(v79, &cfstr_Class.isa, &cfstr_0xLlx.isa, v73, v15);
    CSStore2::AttributedStringWriter::link(v79, *((unsigned int *)*this + 399), v77[1], 0);
    int v16 = (NSString *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::string(v79, &cfstr_Container.isa, v16);

    uint64_t v17 = _LSContainerGet();
    if (v17)
    {
      _LSContainerStateGetDescription(*(char *)(v17 + 2));
      uint64_t v18 = (NSString *)objc_claimAutoreleasedReturnValue();
      CSStore2::AttributedStringWriter::string(v79, &cfstr_MountState.isa, v18);
    }
    CSStore2::AttributedStringWriter::stringArray(v79, &cfstr_DriverExtensio.isa);
    if (*((void *)v77 + 35))
    {
      objc_msgSend(NSNumber, "numberWithUnsignedLongLong:");
      uint64_t v19 = (NSNumber *)objc_claimAutoreleasedReturnValue();
      CSStore2::AttributedStringWriter::number(v79, &cfstr_Compatibility.isa, v19);
    }
    if (*((void *)v77 + 42))
    {
      objc_msgSend(NSNumber, "numberWithUnsignedLongLong:");
      uint64_t v20 = (NSNumber *)objc_claimAutoreleasedReturnValue();
      CSStore2::AttributedStringWriter::number(v79, &cfstr_Installfailure.isa, v20);
    }
    CSStore2::AttributedStringWriter::stringArray(v79, &cfstr_MachOUuids.isa);
    id v76 = [MEMORY[0x1E4F1CA48] array];
    if (v77[74])
    {
      v108[7] = MEMORY[0x1E4F143A8];
      v108[8] = 3221225472;
      v108[9] = ___ZN14LaunchServices7BundlesL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke_2;
      v108[10] = &unk_1E522BC50;
      uint64_t v109 = v76;
      _CSArrayEnumerateAllValues();
    }
    CSStore2::AttributedStringWriter::array(v79, &cfstr_DeviceFamily.isa, v76);
    CSStore2::AttributedStringWriter::stringArray(v79, &cfstr_Counterparts.isa);
    CSStore2::AttributedStringWriter::stringArray(v79, &cfstr_Equivalentids.isa);
    CSStore2::AttributedStringWriter::stringArray(v79, &cfstr_AppClipParents.isa);
    uint64_t v21 = [NSNumber numberWithUnsignedLongLong:*((void *)v77 + 34)];
    CSStore2::AttributedStringWriter::number(v79, &cfstr_Sequencenum.isa, v21);

    unint64_t v22 = [NSNumber numberWithUnsignedLongLong:*((void *)v77 + 36)];
    CSStore2::AttributedStringWriter::number(v79, &cfstr_Itemid.isa, v22);

    uint64_t v23 = [NSNumber numberWithUnsignedLongLong:*((void *)v77 + 47)];
    CSStore2::AttributedStringWriter::number(v79, &cfstr_Familyid.isa, v23);

    CFStringRef v24 = [NSNumber numberWithUnsignedLongLong:*((void *)v77 + 45)];
    CSStore2::AttributedStringWriter::number(v79, &cfstr_Purchaserid.isa, v24);

    id v25 = [NSNumber numberWithUnsignedLongLong:*((void *)v77 + 46)];
    CSStore2::AttributedStringWriter::number(v79, &cfstr_Downloaderid.isa, v25);

    id v26 = [NSNumber numberWithUnsignedLongLong:*((void *)v77 + 44)];
    CSStore2::AttributedStringWriter::number(v79, &cfstr_Staticsize.isa, v26);

    unint64_t v27 = [NSNumber numberWithUnsignedInt:v77[83]];
    CSStore2::AttributedStringWriter::number(v79, &cfstr_Installtype.isa, v27);

    CSStore2::AttributedStringWriter::link(v79, *((unsigned int *)*this + 400), v77[126], 0);
    uint64_t v28 = (NSString *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::string(v79, &cfstr_Appcontainer.isa, v28);

    CSStore2::AttributedStringWriter::link(v79, *((unsigned int *)*this + 400), v77[24], 0);
    __int16 v29 = (NSString *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::string(v79, &cfstr_Datacontainer.isa, v29);

    CSStore2::AttributedStringWriter::link(v79, *((unsigned int *)*this + 400), *v77, 0);
    int v30 = (NSString *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::string(v79, &cfstr_Path.isa, v30);

    LaunchServices::DumpWriter::directoryClass((uint64_t)v79, @"directory", *((unsigned __int8 *)v77 + 148));
    CSStore2::AttributedStringWriter::string(v79, &cfstr_Name.isa);
    CSStore2::AttributedStringWriter::string(v79, &cfstr_Displayname.isa);
    CSStore2::AttributedStringWriter::childUnit(v79, &cfstr_Localizednames.isa);
    CSStore2::AttributedStringWriter::childUnit(v79, &cfstr_Localizedshort.isa);
    CSStore2::AttributedStringWriter::childUnit(v79, &cfstr_Localizedmicro.isa);
    CSStore2::AttributedStringWriter::childUnit(v79, &cfstr_Localizedident.isa);
    v108[0] = MEMORY[0x1E4F143A8];
    v108[1] = 3221225472;
    v108[2] = ___ZN14LaunchServices7BundlesL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke_3;
    v108[3] = &__block_descriptor_56_e37_v40__0q8__NSString_16__NSString_24_32l;
    v108[4] = v79;
    v108[5] = this;
    v108[6] = v77;
    _LSBundleDisplayNameContextEnumerate(v108);
    CSStore2::AttributedStringWriter::string(v79, &cfstr_Itemname.isa);
    CSStore2::AttributedStringWriter::string(v79, &cfstr_Teamid.isa);
    __int16 v31 = [NSNumber numberWithUnsignedLongLong:*(void *)(v77 + 97)];
    CSStore2::AttributedStringWriter::number(v79, &cfstr_Storefront.isa, v31);

    int v32 = [NSNumber numberWithUnsignedLongLong:*(void *)(v77 + 99)];
    CSStore2::AttributedStringWriter::number(v79, &cfstr_Versionid.isa, v32);

    CSStore2::AttributedStringWriter::string(v79, &cfstr_Sourceappbundl.isa);
    CSStore2::AttributedStringWriter::string(v79, &cfstr_Ratinglabel.isa);
    __int16 v33 = [NSNumber numberWithUnsignedLongLong:*((void *)v77 + 52)];
    CSStore2::AttributedStringWriter::number(v79, &cfstr_Ratingrank.isa, v33);

    CSStore2::AttributedStringWriter::string(v79, &cfstr_Genre.isa);
    uint64_t v34 = [NSNumber numberWithUnsignedLongLong:*(void *)(v77 + 107)];
    CSStore2::AttributedStringWriter::number(v79, &cfstr_Genreid.isa, v34);

    CSStore2::AttributedStringWriter::childUnit(v79, &cfstr_Distributorinf.isa);
    unsigned int v107 = 0;
    int v35 = v77[78];
    if (v35 && (_UTGetActiveTypeForIdentifier(*this, v35, &v107), v107))
    {
      CSStore2::AttributedStringWriter::link(v79, *((unsigned int *)*this + 8), v107, 0);
      int v36 = (NSString *)objc_claimAutoreleasedReturnValue();
      CSStore2::AttributedStringWriter::string(v79, &cfstr_Category.isa, v36);
    }
    else
    {
      CSStore2::AttributedStringWriter::string(v79, &cfstr_Category.isa);
    }
    unsigned int v106 = 0;
    int v37 = v77[79];
    if (v37 && (_UTGetActiveTypeForIdentifier(*this, v37, &v106), v106))
    {
      CSStore2::AttributedStringWriter::link(v79, *((unsigned int *)*this + 8), v106, 0);
      BOOL v38 = (NSString *)objc_claimAutoreleasedReturnValue();
      CSStore2::AttributedStringWriter::string(v79, &cfstr_2ryCategory.isa, v38);

      uint64_t v39 = v79;
    }
    else
    {
      uint64_t v39 = v79;
      CSStore2::AttributedStringWriter::string(v79, &cfstr_2ryCategory.isa);
    }
    CSStore2::AttributedStringWriter::string(v39, &cfstr_Identifier.isa);
    if (v77[3] != v77[75]) {
      CSStore2::AttributedStringWriter::string(v39, &cfstr_CanonicalId.isa);
    }
    CSStore2::AttributedStringWriter::string(v39, &cfstr_Vendor.isa);
    CSStore2::AttributedStringWriter::string(v39, &cfstr_Type.isa);
    long long v40 = *(_OWORD *)(v77 + 11);
    *(_OWORD *)v123._opaque = *(_OWORD *)(v77 + 7);
    *(_OWORD *)&v123._opaque[16] = v40;
    LaunchServices::DumpWriter::version(v39, &cfstr_Version.isa, &v123);
    CSStore2::AttributedStringWriter::string(v39, &cfstr_Versionstring.isa);
    CSStore2::AttributedStringWriter::string(v39, &cfstr_Displayversion.isa);
    CSStore2::AttributedStringWriter::string(v39, &cfstr_Codeinfoid.isa);
    CSStore2::AttributedStringWriter::string(v39, &cfstr_Signerorg.isa);
    CSStore2::AttributedStringWriter::string(v39, &cfstr_SignerIdentity.isa);
    CSStore2::AttributedStringWriter::string(v39, &cfstr_Appvariant.isa);
    CSStore2::AttributedStringWriter::string(v39, &cfstr_Managementdecl.isa);
    CSStore2::AttributedStringWriter::timestamp(v39, &cfstr_ModDate.isa, (double)(int)v77[49]);
    CSStore2::AttributedStringWriter::timestamp(v39, &cfstr_RegDate.isa, (double)(int)v77[6]);
    CSStore2::AttributedStringWriter::timestamp(v39, &cfstr_RecModDate.isa, (double)(int)v77[133]);
    if (*((unsigned char *)v77 + 509))
    {
      uint64_t v100 = MEMORY[0x1E4F143A8];
      uint64_t v101 = 3221225472;
      CFArrayRef v102 = ___ZN14LaunchServices7BundlesL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke_4;
      v103 = &__block_descriptor_48_e5_v8__0l;
      int64_t v104 = v39;
      uint64_t v105 = v77;
      CSStore2::AttributedStringWriter::withWarningColors();
    }
    CSStore2::AttributedStringWriter::beginFlags(v39, &cfstr_BundleFlags.isa);
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v126) = 16711680;
    BYTE4(v126) = 1;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v126) = 16711680;
    BYTE4(v126) = 1;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v126) = 16711680;
    BYTE4(v126) = 1;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v126) = 16711680;
    BYTE4(v126) = 1;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v126) = 16711680;
    BYTE4(v126) = 1;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v126) = 16711680;
    BYTE4(v126) = 1;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::missingFlag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v126) = 12566272;
    BYTE4(v126) = 1;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v126) = 16711680;
    BYTE4(v126) = 1;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v126) = 16711680;
    BYTE4(v126) = 1;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v126) = 16711680;
    BYTE4(v126) = 1;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v126) = 16711680;
    BYTE4(v126) = 1;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::endFlags(v39);
    CSStore2::AttributedStringWriter::beginBitfieldFlags(v39, &cfstr_MoreFlags.isa);
    LODWORD(v126) = 8028671;
    BYTE4(v126) = 1;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v126) = 14124031;
    BYTE4(v126) = 1;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v126) = 16727808;
    BYTE4(v126) = 1;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v126) = 16727808;
    BYTE4(v126) = 1;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v126) = 5213952;
    BYTE4(v126) = 1;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v126) = 16711680;
    BYTE4(v126) = 1;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v126) = 16711680;
    BYTE4(v126) = 1;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v126) = 16711680;
    BYTE4(v126) = 1;
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::endFlags(v39);
    if ((v77[45] & 0x10000) != 0)
    {
      if (v77[118]) {
        _CSArrayGetCount();
      }
      if (v77[117]) {
        _CSArrayGetCount();
      }
    }
    CSStore2::AttributedStringWriter::beginFlags(v79, &cfstr_PlistFlags.isa);
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::endFlags(v79);
    CSStore2::AttributedStringWriter::beginFlags(v79, &cfstr_IconFlags.isa);
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::endFlags(v79);
    _LSSliceMaskWriteDescription(v79);
    CSStore2::AttributedStringWriter::beginFlags(v79, &cfstr_ItemFlags.isa);
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v126) = 16711680;
    BYTE4(v126) = 1;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v126) = 16711680;
    BYTE4(v126) = 1;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v126) = 0;
    BYTE4(v126) = 0;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v126) = 16711680;
    BYTE4(v126) = 1;
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::endFlags(v79);
    _LSBundleBaseFlagsWriteDescription(v79);
    if (*((unsigned char *)v77 + 149))
    {
      _LSProfileValidationStateGetVisualizationDescription(*((unsigned __int8 *)v77 + 149));
      id v41 = (NSString *)objc_claimAutoreleasedReturnValue();
      CSStore2::AttributedStringWriter::string(v79, &cfstr_Validation.isa, v41);
    }
    LaunchServices::DumpWriter::platform(v79, &cfstr_Platform.isa, v77[5]);
    CSStore2::AttributedStringWriter::string(v79, &cfstr_Iconname.isa);
    CSStore2::AttributedStringWriter::string(v79, &cfstr_AlternatePrima.isa);
    if (v77[113]) {
      CSStore2::AttributedStringWriter::childUnit(v79, &cfstr_Icondict.isa);
    }
    CSStore2::AttributedStringWriter::stringArray(v79, &cfstr_Icons.isa);
    CSStore2::AttributedStringWriter::string(v79, &cfstr_Executable.isa);
    long long v42 = *(_OWORD *)(v77 + 55);
    long long v126 = *(_OWORD *)(v77 + 51);
    long long v127 = v42;
    long long v124 = kLSVersionNumberNull;
    long long v125 = *(_OWORD *)algn_182AF9270;
    if (_LSVersionNumberCompare(&v126, &v124))
    {
      long long v43 = *(_OWORD *)(v77 + 55);
      *(_OWORD *)v122._opaque = *(_OWORD *)(v77 + 51);
      *(_OWORD *)&v122._opaque[16] = v43;
      LaunchServices::DumpWriter::version(v79, &cfstr_MinVersion.isa, &v122);
      LaunchServices::DumpWriter::platform(v79, &cfstr_MinVersionPlat.isa, v77[50]);
    }
    long long v44 = *(_OWORD *)(v77 + 63);
    long long v126 = *(_OWORD *)(v77 + 59);
    long long v127 = v44;
    long long v124 = kLSVersionNumberNull;
    long long v125 = *(_OWORD *)algn_182AF9270;
    if (_LSVersionNumberCompare(&v126, &v124))
    {
      long long v45 = *(_OWORD *)(v77 + 63);
      *(_OWORD *)v121._opaque = *(_OWORD *)(v77 + 59);
      *(_OWORD *)&v121._opaque[16] = v45;
      LaunchServices::DumpWriter::version(v79, &cfstr_MaxVersion.isa, &v121);
    }
    long long v46 = *(_OWORD *)(v77 + 19);
    long long v126 = *(_OWORD *)(v77 + 15);
    long long v127 = v46;
    long long v124 = kLSVersionNumberNull;
    long long v125 = *(_OWORD *)algn_182AF9270;
    if (_LSVersionNumberCompare(&v126, &v124))
    {
      long long v47 = *(_OWORD *)(v77 + 19);
      *(_OWORD *)v120._opaque = *(_OWORD *)(v77 + 15);
      *(_OWORD *)&v120._opaque[16] = v47;
      LaunchServices::DumpWriter::version(v79, &cfstr_ExecsdkVer.isa, &v120);
    }
    CSStore2::AttributedStringWriter::string(v79, &cfstr_AppStoreToolsB.isa);
    CSStore2::AttributedStringWriter::stringArray(v79, &cfstr_Personas.isa);
    __int16 v75 = (NSArray *)objc_alloc_init(MEMORY[0x1E4F1CA48]);
    if (v77[131])
    {
      uint64_t v95 = MEMORY[0x1E4F143A8];
      uint64_t v96 = 3221225472;
      uint64_t v97 = ___ZN14LaunchServices7BundlesL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke_5;
      uint64_t v98 = &unk_1E522BC50;
      uint64_t v99 = v75;
      _CSArrayEnumerateAllValues();
    }
    CSStore2::AttributedStringWriter::array(v79, &cfstr_Personatypes.isa, v75);
    CSStore2::AttributedStringWriter::childUnit(v79, &cfstr_Infodictionary.isa);
    CSStore2::AttributedStringWriter::string(v79, &cfstr_Library.isa);
    CSStore2::AttributedStringWriter::stringArray(v79, &cfstr_LibraryItems.isa);
    CSStore2::AttributedStringWriter::stringArray(v79, &cfstr_QueriableSchem.isa);
    CSStore2::AttributedStringWriter::stringArray(v79, &cfstr_Bgpermittedids.isa);
    CSStore2::AttributedStringWriter::stringArray(v79, &cfstr_CarplayUrlSche.isa);
    CSStore2::AttributedStringWriter::stringArray(v79, &cfstr_Activitytypes.isa);
    CSStore2::AttributedStringWriter::childUnit(v79, &cfstr_MiInstallIds.isa);
    uint64_t v89 = MEMORY[0x1E4F143A8];
    uint64_t v90 = 3221225472;
    uint64_t v91 = ___ZN14LaunchServices7BundlesL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke_6;
    uint64_t v92 = &__block_descriptor_48_e14_v24__0I8I12_16l;
    id v93 = v79;
    uint64_t v94 = this;
    _CSArrayEnumerateAllValues();
    CSStore2::AttributedStringWriter::string(v79, &cfstr_ManagementDoma.isa);
    CSStore2::AttributedStringWriter::string(v79, &cfstr_LinkedParentBu.isa);
    CSStore2::AttributedStringWriter::childUnit(v79, &cfstr_StashedAppInfo.isa);
    long long v48 = [NSNumber numberWithUnsignedInt:v77[40]];
    CSStore2::AttributedStringWriter::number(v79, &cfstr_CodeSignatureV.isa, v48);

    if (v77[42] == 2)
    {
      CFMachPortContext context = (void *)MEMORY[0x18530F680]();
      long long v49 = [MEMORY[0x1E4F1CA48] array];
      long long v87 = 0u;
      long long v88 = 0u;
      long long v85 = 0u;
      long long v86 = 0u;
      char v50 = _LSGetAllClaimedTypesOrSchemesForBundleID((uint64_t)this, (uint64_t)v77, 14, 1);
      uint64_t v51 = [v50 countByEnumeratingWithState:&v85 objects:v119 count:16];
      if (v51)
      {
        uint64_t v52 = *(void *)v86;
        do
        {
          for (uint64_t i = 0; i != v51; ++i)
          {
            if (*(void *)v86 != v52) {
              objc_enumerationMutation(v50);
            }
            id v54 = (__CFString *)*(id *)(*((void *)&v85 + 1) + 8 * i);
            if (UTTypeIsDynamic(v54))
            {
              CFStringRef v55 = UTTypeCopyPreferredTagWithClass(v54, @"public.filename-extension");
              uint64_t v56 = (__CFString *)v55;
              if (v55)
              {
                [(__CFString *)v54 stringByAppendingFormat:@" (.%@)", v55];
                uint64_t v57 = v54;
                id v54 = (__CFString *)objc_claimAutoreleasedReturnValue();
              }
              else
              {
                CFStringRef v59 = UTTypeCopyPreferredTagWithClass(v54, @"public.mime-type");
                uint64_t v57 = (__CFString *)v59;
                if (v59)
                {
                  uint64_t v60 = [(__CFString *)v54 stringByAppendingFormat:@" (MIME %@)", v59];

                  id v54 = (__CFString *)v60;
                }
              }
            }
            else
            {
              LODWORD(v126) = 0;
              if (_UTGetActiveTypeForCFStringIdentifier(*this, v54, &v126))
              {
                uint64_t v58 = CSStore2::AttributedStringWriter::link(v79, *((unsigned int *)*this + 8), v126, &v54->isa);

                id v54 = (__CFString *)v58;
              }
            }
            [(NSArray *)v49 addObject:v54];
          }
          uint64_t v51 = [v50 countByEnumeratingWithState:&v85 objects:v119 count:16];
        }
        while (v51);
      }

      [(NSArray *)v49 sortUsingSelector:sel_caseInsensitiveCompare_];
      CSStore2::AttributedStringWriter::array(v79, &cfstr_ClaimedUtis.isa, v49);

      inTagClass Class = (__CFString *)MEMORY[0x18530F680]();
      uint64_t v61 = [MEMORY[0x1E4F1CA48] array];
      long long v83 = 0u;
      long long v84 = 0u;
      long long v81 = 0u;
      long long v82 = 0u;
      id v62 = _LSGetAllClaimedTypesOrSchemesForBundleID((uint64_t)this, (uint64_t)v77, 14, 0);
      uint64_t v63 = [v62 countByEnumeratingWithState:&v81 objects:v118 count:16];
      if (v63)
      {
        uint64_t v64 = *(void *)v82;
        do
        {
          for (uint64_t j = 0; j != v63; ++j)
          {
            if (*(void *)v82 != v64) {
              objc_enumerationMutation(v62);
            }
            id v66 = *(id *)(*((void *)&v81 + 1) + 8 * j);
            uint64_t v67 = [NSString stringWithFormat:@"%@:", v66];

            [(NSArray *)v61 addObject:v67];
          }
          uint64_t v63 = [v62 countByEnumeratingWithState:&v81 objects:v118 count:16];
        }
        while (v63);
      }

      [(NSArray *)v61 sortUsingSelector:sel_caseInsensitiveCompare_];
      CSStore2::AttributedStringWriter::array(v79, &cfstr_ClaimedSchemes.isa, v61);
    }
    long long v68 = (void *)MEMORY[0x18530F680]();
    if (v74)
    {
      if ([(id)__LSDefaultsGetSharedInstance() isServer])
      {
        *(void *)&long long v126 = 0;
        if ([v74 getContentModificationDate:&v126 error:0])
        {
          int v69 = v77[49];
          if (v69 != (int)*(double *)&v126)
          {
            CSStore2::AttributedStringWriter::timestamp(v79, &cfstr_Bundlemoddate.isa, (double)v69);
            CSStore2::AttributedStringWriter::timestamp(v79, &cfstr_Nodemoddate.isa, *(double *)&v126);
          }
        }
      }
    }
    id v70 = [MEMORY[0x1E4F1CA48] array];
    _CSArrayEnumerateAllValues();
    CSStore2::AttributedStringWriter::array(v79, &cfstr_PluginIdentifi.isa, v70);
    if (v77[35]) {
      CSStore2::AttributedStringWriter::childUnit(v79, &cfstr_Entitlements_0.isa);
    }
    if (v77[36]) {
      CSStore2::AttributedStringWriter::childUnit(v79, &cfstr_GroupCtrs.isa);
    }
    if (v77[128]) {
      CSStore2::AttributedStringWriter::childUnit(v79, &cfstr_Environment.isa);
    }
    if (v77[38]) {
      CSStore2::AttributedStringWriter::childUnit(v79, &cfstr_Intents.isa);
    }
    if (v77[118]) {
      _CSArrayEnumerateAllValues();
    }
    if (v77[117]) {
      _CSArrayEnumerateAllValues();
    }

    uint64_t v7 = (uint64_t)v77;
  }
  return v7 != 0;
}

void sub_182A12110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::Bundles::copyBindingForVisualization(LaunchServices::Bundles *this, LSContext *a2)
{
  return 0;
}

uint64_t std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *>(a1, a2, a3, a4);
  uint64_t v10 = *a5;
  uint64_t v11 = *a4;
  unsigned int v12 = _LSScoreCPUType(*a5);
  uint64_t result = _LSScoreCPUType(v11);
  if (v12 < result)
  {
    *a4 = v10;
    *a5 = v11;
    uint64_t v14 = *a4;
    uint64_t v15 = *a3;
    unsigned int v16 = _LSScoreCPUType(*a4);
    uint64_t result = _LSScoreCPUType(v15);
    if (v16 < result)
    {
      *a3 = v14;
      *a4 = v15;
      uint64_t v17 = *a3;
      uint64_t v18 = *a2;
      unsigned int v19 = _LSScoreCPUType(*a3);
      uint64_t result = _LSScoreCPUType(v18);
      if (v19 < result)
      {
        *a2 = v17;
        *a3 = v18;
        uint64_t v20 = *a2;
        uint64_t v21 = *a1;
        unsigned int v22 = _LSScoreCPUType(*a2);
        uint64_t result = _LSScoreCPUType(v21);
        if (v22 < result)
        {
          *a1 = v20;
          *a2 = v21;
        }
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  unsigned int v8 = _LSScoreCPUType(*a2);
  unsigned int v9 = _LSScoreCPUType(v7);
  uint64_t v10 = *a3;
  uint64_t result = _LSScoreCPUType(*a3);
  if (v8 >= v9)
  {
    if (result < v8)
    {
      *a2 = v10;
      *a3 = v6;
      uint64_t v12 = *a2;
      uint64_t v13 = *a1;
      unsigned int v14 = _LSScoreCPUType(*a2);
      uint64_t result = _LSScoreCPUType(v13);
      if (v14 < result)
      {
        *a1 = v12;
        *a2 = v13;
      }
    }
  }
  else
  {
    if (result >= v8)
    {
      *a1 = v6;
      *a2 = v7;
      uint64_t v15 = *a3;
      uint64_t result = _LSScoreCPUType(*a3);
      if (result >= v9) {
        return result;
      }
      *a2 = v15;
    }
    else
    {
      *a1 = v10;
    }
    *a3 = v7;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      unsigned int v8 = _LSScoreCPUType(v6);
      if (v8 < _LSScoreCPUType(v7))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      unsigned int v9 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *>(a1, a1 + 1, a1 + 2);
      uint64_t v10 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v11 = 0;
      uint64_t v12 = 24;
      break;
  }
  while (1)
  {
    uint64_t v13 = *v10;
    uint64_t v14 = *v9;
    unsigned int v15 = _LSScoreCPUType(*v10);
    if (v15 < _LSScoreCPUType(v14))
    {
      uint64_t v16 = v12;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v16) = v14;
        uint64_t v17 = v16 - 8;
        if (v16 == 8) {
          break;
        }
        uint64_t v14 = *(uint64_t *)((char *)a1 + v16 - 16);
        unsigned int v18 = _LSScoreCPUType(v14);
        uint64_t v16 = v17;
        if (v15 >= v18)
        {
          unsigned int v19 = (uint64_t *)((char *)a1 + v17);
          goto LABEL_12;
        }
      }
      unsigned int v19 = a1;
LABEL_12:
      uint64_t *v19 = v13;
      if (++v11 == 8) {
        return v10 + 1 == a2;
      }
    }
    unsigned int v9 = v10;
    v12 += 8;
    if (++v10 == a2) {
      return 1;
    }
  }
}

uint64_t _LSScoreCPUType(int a1)
{
  if (a1 == 16777228) {
    int v1 = 1;
  }
  else {
    int v1 = -1;
  }
  if (a1 == 16777234) {
    int v2 = 4;
  }
  else {
    int v2 = v1;
  }
  if (a1 == 16777223) {
    unsigned int v3 = 2;
  }
  else {
    unsigned int v3 = v2;
  }
  if (a1 == 18) {
    unsigned int v4 = 5;
  }
  else {
    unsigned int v4 = -1;
  }
  if (a1 == 12) {
    unsigned int v4 = 6;
  }
  if (a1 == 7) {
    unsigned int v4 = 3;
  }
  if (a1 <= 16777222) {
    return v4;
  }
  else {
    return v3;
  }
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *>(a1, a2, a3);
  uint64_t v8 = *a4;
  uint64_t v9 = *a3;
  unsigned int v10 = _LSScoreCPUType(*a4);
  uint64_t result = _LSScoreCPUType(v9);
  if (v10 < result)
  {
    *a3 = v8;
    *a4 = v9;
    uint64_t v12 = *a3;
    uint64_t v13 = *a2;
    unsigned int v14 = _LSScoreCPUType(*a3);
    uint64_t result = _LSScoreCPUType(v13);
    if (v14 < result)
    {
      *a2 = v12;
      *a3 = v13;
      uint64_t v15 = *a2;
      uint64_t v16 = *a1;
      unsigned int v17 = _LSScoreCPUType(*a2);
      uint64_t result = _LSScoreCPUType(v16);
      if (v17 < result)
      {
        *a1 = v15;
        *a2 = v16;
      }
    }
  }
  return result;
}

uint64_t ___ZN14LaunchServices7BundlesL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke(uint64_t a1)
{
  return CSStore2::AttributedStringWriter::format(*(CSStore2::AttributedStringWriter **)(a1 + 40), 0, &cfstr_BundleNodeNotF.isa, *(void *)(a1 + 32));
}

void ___ZN14LaunchServices7BundlesL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke_2(uint64_t a1)
{
  int v1 = *(void **)(a1 + 32);
  objc_msgSend(NSNumber, "numberWithUnsignedInt:");
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "addObject:");
}

void sub_182A12968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN14LaunchServices7BundlesL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4 = (NSString *)[[NSString alloc] initWithFormat:@"localizedNames#%@", a3];
  CSStore2::AttributedStringWriter::childUnit(*(CSStore2::AttributedStringWriter **)(a1 + 32), v4);
}

void sub_182A12A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN14LaunchServices7BundlesL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke_4(uint64_t a1)
{
  int v1 = *(CSStore2::AttributedStringWriter **)(a1 + 32);
  id v2 = [NSNumber numberWithUnsignedChar:*(unsigned __int8 *)(*(void *)(a1 + 40) + 509)];
  CSStore2::AttributedStringWriter::number(v1, &cfstr_Retries.isa, v2);
}

void sub_182A12A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN14LaunchServices7BundlesL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke_5(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v3 = *(void **)(a1 + 32);
  _LSGetDescriptionForPersonaType(a3);
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "addObject:");
}

void sub_182A12B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN14LaunchServices7BundlesL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke_6(uint64_t a1)
{
  return CSStore2::AttributedStringWriter::childUnit(*(CSStore2::AttributedStringWriter **)(a1 + 32), &cfstr_Supportedgamec.isa);
}

void ___ZN14LaunchServices7BundlesL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke_7(uint64_t a1, uint64_t a2, int a3)
{
  if (_LSGetPlugin(**(void **)(a1 + 40), a3))
  {
    id v4 = (id)_CSStringCopyCFString();
    if (v4) {
      [*(id *)(a1 + 32) addObject:v4];
    }
  }
}

void sub_182A12BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN14LaunchServices7BundlesL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke_8(uint64_t a1)
{
  return MEMORY[0x1F4115360](*(void *)(a1 + 32), *(unsigned int *)(**(void **)(a1 + 40) + 32));
}

uint64_t ___ZN14LaunchServices7BundlesL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke_9(uint64_t a1)
{
  uint64_t result = _LSClaimGet();
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    uint64_t v4 = *(unsigned int *)(**(void **)(a1 + 32) + 24);
    return MEMORY[0x1F4115360](v3, v4);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_4(uint64_t result, unsigned int a2, uint64_t a3, float a4)
{
  *(float *)a3 = a4;
  *(void *)(a3 + 4) = result;
  *(_WORD *)(a3 + 12) = 2048;
  *(void *)(a3 + 14) = a2;
  return result;
}

void sub_182A136EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_182A14974(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A14A20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A14BC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A14DC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A14FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)va);
  _Unwind_Resume(a1);
}

void sub_182A1520C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A15300(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A153E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A15480(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A155BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void yieldAppsMatchingSearch(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v22 = 0;
  unsigned int v19 = 0;
  id v20 = 0;
  char v21 = 0;
  +[_LSDServiceDomain defaultServiceDomain]();
  uint64_t v5 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  uint64_t v6 = (void *)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v19, v5, 0);

  if (v6)
  {
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    void v15[2] = ___ZL23yieldAppsMatchingSearchU13block_pointerFbP14_LSQueryResultP7NSErrorEU13block_pointerFbP11_LSDatabasejPK12LSBundleDataE_block_invoke;
    v15[3] = &unk_1E522D9A0;
    id v16 = v4;
    unsigned int v18 = v6;
    id v7 = v3;
    id v17 = v7;
    int v8 = _LSEnumerateViableBundlesOfClass(v6, 2, v15);
    if (v8)
    {
      uint64_t v9 = _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], v8, (uint64_t)"yieldAppsMatchingSearch", 659, 0);
      (*((void (**)(id, void, void *))v7 + 2))(v7, 0, v9);
    }
    id v10 = v16;
  }
  else
  {
    +[_LSDServiceDomain defaultServiceDomain]();
    int v11 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
    uint64_t v12 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v19, v11, 0);

    if (v12) {
      id v10 = 0;
    }
    else {
      id v10 = v22;
    }
    (*((void (**)(id, void, id))v3 + 2))(v3, 0, v10);
  }

  if (v19 && v21) {
    _LSContextDestroy(v19);
  }
  id v13 = v20;
  unsigned int v19 = 0;
  id v20 = 0;

  char v21 = 0;
  id v14 = v22;
  id v22 = 0;
}

void sub_182A157D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)va);
  _Unwind_Resume(a1);
}

void sub_182A158AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A15994(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A15A78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A15B98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A15CB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A15DBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A15E78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A15F24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A16230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a9);
  _Unwind_Resume(a1);
}

void sub_182A16348(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

void sub_182A163E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A1647C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A16544(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL23yieldAppsMatchingSearchU13block_pointerFbP14_LSQueryResultP7NSErrorEU13block_pointerFbP11_LSDatabasejPK12LSBundleDataE_block_invoke(void *a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  int v8 = (void *)MEMORY[0x18530F680]();
  if (*(_DWORD *)(a3 + 12) && (*(unsigned int (**)(void))(a1[4] + 16))())
  {
    uint64_t v9 = +[LSApplicationProxy applicationProxyWithBundleUnitID:a2 withContext:a1[6]];
    if (v9) {
      *a4 = (*(uint64_t (**)(void))(a1[5] + 16))() ^ 1;
    }
  }
}

void sub_182A16644(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A16780(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A16874(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A16990(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A16A40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A16AD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A16C04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A16CDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A16D54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A16F9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A173A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a27);
  _Unwind_Resume(a1);
}

void sub_182A17798(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A17AE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A17B3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A17E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A1817C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_182A183C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A18EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_182A18FB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A19080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_182A191D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A1933C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A193BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A19738(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL _LSIconDictionarySupportsAlternateIcons(NSDictionary *a1)
{
  id v2 = (void *)MEMORY[0x18530F680]();
  id v3 = [(NSDictionary *)a1 objectForKey:@"CFBundleAlternateIcons"];
  BOOL v4 = (_NSIsNSArray() & 1) != 0 || _NSIsNSDictionary();

  return v4;
}

void sub_182A1985C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A1993C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A19A74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A19CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_182A19ED8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A1BCE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_182A1C1DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A1C2A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A1D134(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A1D4A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_182A1D820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_182A1F7F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  _Unwind_Resume(a1);
}

void std::vector<unsigned int>::reserve(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (__n > value - this->__begin_)
  {
    if (__n >> 62) {
      abort();
    }
    int64_t v5 = (char *)this->__end_ - (char *)this->__begin_;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)p_end_cap, __n);
    id v7 = (unsigned int *)&v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v9 = (unsigned int *)&v6[4 * v8];
    std::vector<unsigned int>::pointer begin = this->__begin_;
    end = this->__end_;
    uint64_t v12 = v7;
    if (end != this->__begin_)
    {
      uint64_t v12 = v7;
      do
      {
        unsigned int v13 = *--end;
        *--uint64_t v12 = v13;
      }
      while (end != begin);
    }
    this->__begin_ = v12;
    this->__end_ = v7;
    this->__end_cap_.__value_ = v9;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

void sub_182A1FB68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A1FC5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A203F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

Class initEXEnumerator(void)
{
  if (!ExtensionFoundationLibrary(void)::frameworkLibrary) {
    ExtensionFoundationLibrary(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/Frameworks/ExtensionFoundation.framework/ExtensionFoundation", 2);
  }
  Class result = objc_getClass("EXEnumerator");
  classEXEnumerator = (uint64_t)result;
  getEXEnumeratorClass Class = (uint64_t (*)(void))EXEnumeratorFunction;
  return result;
}

{
  Class result;

  if (!ExtensionFoundationLibrary(void)::frameworkLibrary) {
    ExtensionFoundationLibrary(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/Frameworks/ExtensionFoundation.framework/ExtensionFoundation", 2);
  }
  Class result = objc_getClass("EXEnumerator");
  classEXEnumerator = (uint64_t)result;
  getEXEnumeratorClass Class = (uint64_t (*)(void))EXEnumeratorFunction;
  return result;
}

id EXEnumeratorFunction(void)
{
  return (id)classEXEnumerator;
}

{
  return (id)classEXEnumerator;
}

void init_ISInvalidateCacheEntriesForBundleIdentifier(NSString *a1)
{
  id v2 = a1;
  uint64_t v1 = (void *)IconServicesLibrary(void)::frameworkLibrary;
  if (!IconServicesLibrary(void)::frameworkLibrary)
  {
    uint64_t v1 = dlopen("/System/Library/PrivateFrameworks/IconServices.framework/IconServices", 2);
    IconServicesLibrary(void)::frameworkLibrary = (uint64_t)v1;
  }
  softLink_ISInvalidateCacheEntriesForBundleIdentifier = (uint64_t (*)(NSString *))dlsym(v1, "_ISInvalidateCacheEntriesForBundleIdentifier");
  softLink_ISInvalidateCacheEntriesForBundleIdentifier(v2);
}

{
  void *v1;
  NSString *v2;
  uint64_t vars8;

  id v2 = a1;
  uint64_t v1 = (void *)IconServicesLibrary(void)::frameworkLibrary;
  if (!IconServicesLibrary(void)::frameworkLibrary)
  {
    uint64_t v1 = dlopen("/System/Library/PrivateFrameworks/IconServices.framework/IconServices", 2);
    IconServicesLibrary(void)::frameworkLibrary = (uint64_t)v1;
  }
  softLink_ISInvalidateCacheEntriesForBundleIdentifier = (uint64_t (*)(NSString *))dlsym(v1, "_ISInvalidateCacheEntriesForBundleIdentifier");
  softLink_ISInvalidateCacheEntriesForBundleIdentifier(v2);
}

{
  void *v1;
  NSString *v2;
  uint64_t vars8;

  id v2 = a1;
  uint64_t v1 = (void *)IconServicesLibrary(void)::frameworkLibrary;
  if (!IconServicesLibrary(void)::frameworkLibrary)
  {
    uint64_t v1 = dlopen("/System/Library/PrivateFrameworks/IconServices.framework/IconServices", 2);
    IconServicesLibrary(void)::frameworkLibrary = (uint64_t)v1;
  }
  softLink_ISInvalidateCacheEntriesForBundleIdentifier = (uint64_t (*)(NSString *))dlsym(v1, "_ISInvalidateCacheEntriesForBundleIdentifier");
  softLink_ISInvalidateCacheEntriesForBundleIdentifier(v2);
}

void sub_182A212F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A213C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A21630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_182A216EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)LSBundleRecordUpdater;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void __clang_call_terminate(void *a1)
{
}

void sub_182A21D60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, void *a15, id a16)
{
  _Unwind_Resume(a1);
}

void sub_182A21F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_182A2204C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A225C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_182A2294C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A22AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_182A22BD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<unsigned int,LSPluginData>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSPluginData>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSPluginData>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSPluginData>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,LSPluginData>>(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      id v10 = (char *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = *((void *)v10 + 1);
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          id v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
  id v10 = (char *)operator new(0x100uLL);
  *(void *)id v10 = 0;
  *((void *)v10 + 1) = v6;
  *((_DWORD *)v10 + 4) = *(_DWORD *)a3;
  *(_OWORD *)(v10 + 196) = *(_OWORD *)(a3 + 180);
  *(_OWORD *)(v10 + 212) = *(_OWORD *)(a3 + 196);
  *(_OWORD *)(v10 + 228) = *(_OWORD *)(a3 + 212);
  *((_OWORD *)v10 + 15) = *(_OWORD *)(a3 + 224);
  *(_OWORD *)(v10 + 132) = *(_OWORD *)(a3 + 116);
  *(_OWORD *)(v10 + 148) = *(_OWORD *)(a3 + 132);
  *(_OWORD *)(v10 + 164) = *(_OWORD *)(a3 + 148);
  *(_OWORD *)(v10 + 180) = *(_OWORD *)(a3 + 164);
  *(_OWORD *)(v10 + 68) = *(_OWORD *)(a3 + 52);
  *(_OWORD *)(v10 + 84) = *(_OWORD *)(a3 + 68);
  *(_OWORD *)(v10 + 100) = *(_OWORD *)(a3 + 84);
  *(_OWORD *)(v10 + 116) = *(_OWORD *)(a3 + 100);
  *(_OWORD *)(v10 + 20) = *(_OWORD *)(a3 + 4);
  *(_OWORD *)(v10 + 36) = *(_OWORD *)(a3 + 20);
  *(_OWORD *)(v10 + 52) = *(_OWORD *)(a3 + 36);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  unsigned int v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *(void *)id v10 = *v19;
LABEL_38:
    void *v19 = v10;
    goto LABEL_39;
  }
  *(void *)id v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*(void *)v10)
  {
    unint64_t v20 = *(void *)(*(void *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    unsigned int v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_182A22EE8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_182A237A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

CFSetRef _LSBundleActivateBindingsForUserActivityTypes(void *a1, int a2, uint64_t a3)
{
  id v5 = a1;
  unint64_t v6 = v5;
  CFSetRef v7 = (const __CFSet *)4294967246;
  if (v5)
  {
    if (a2)
    {
      if (a3)
      {
        CFSetRef v7 = _LSBundleCopyUserActivityTypes(v5, a2, a3);
        if (v7)
        {
          id v9 = v6;
          int v10 = a2;
          CFSetApplyFunction(v7, (CFSetApplierFunction)_LSBundleActivateBindingForUserActivityType, &v9);
          CFRelease(v7);

          CFSetRef v7 = 0;
        }
      }
    }
  }

  return v7;
}

void sub_182A23E1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CFSetRef _LSBundleCopyUserActivityTypes(void *a1, int a2, uint64_t a3)
{
  id v5 = a1;
  CFSetRef Copy = 0;
  if (v5 && a2 && a3)
  {
    if (*(_DWORD *)(a3 + 488)
      && (CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80],
          (CFSetRef Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D548])) != 0))
    {
      id v10 = v5;
      _CSArrayEnumerateAllValues();
      CFSetRef Copy = CFSetCreateCopy(v7, Mutable);
      CFRelease(Mutable);
    }
    else
    {
      CFSetRef Copy = 0;
    }
  }

  return Copy;
}

void sub_182A23F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

CFStringRef _LSBundleActivateBindingForUserActivityType(const __CFString *result, void *a2)
{
  if (result)
  {
    if (a2)
    {
      Class result = (const __CFString *)_LSDatabaseCreateStringForCFString(*(void **)a2, result, 0);
      if (result)
      {
        _LSBindableActivate(*(void **)a2, *((_DWORD *)a2 + 2));
        return (const __CFString *)_CSStringRelease();
      }
    }
  }
  return result;
}

CFSetRef _LSBundleDeactivateBindingsForUserActivityTypes(void *a1, int a2, uint64_t a3)
{
  id v5 = a1;
  unint64_t v6 = v5;
  CFSetRef v7 = (const __CFSet *)4294967246;
  if (v5)
  {
    if (a2)
    {
      if (a3)
      {
        CFSetRef v7 = _LSBundleCopyUserActivityTypes(v5, a2, a3);
        if (v7)
        {
          id v9 = v6;
          int v10 = a2;
          CFSetApplyFunction(v7, (CFSetApplierFunction)_LSBundleDeactivateBindingForUserActivityType, &v9);
          CFRelease(v7);

          CFSetRef v7 = 0;
        }
      }
    }
  }

  return v7;
}

void sub_182A240B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CFStringRef _LSBundleDeactivateBindingForUserActivityType(const __CFString *result, void **a2)
{
  if (result)
  {
    if (a2)
    {
      Class result = (const __CFString *)_LSDatabaseGetStringForCFString(*a2, result, 0);
      if (result)
      {
        unint64_t v3 = *a2;
        int v4 = *((_DWORD *)a2 + 2);
        return (const __CFString *)_LSBindableDeactivate(v3, v4);
      }
    }
  }
  return result;
}

CFSetRef _LSBundleCopyUserActivityDomainNames(uint64_t a1, int a2, uint64_t a3)
{
  CFSetRef Copy = 0;
  if (a1 && a2 && a3)
  {
    uint64_t v4 = _CSStringCopyCFString();
    if (v4)
    {
      id v5 = (const void *)v4;
      CFArrayRef v6 = (const __CFArray *)_LSCopyUserActivityDomainNamesForBundleID(v4);
      if (v6)
      {
        CFArrayRef v7 = v6;
        CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFIndex Count = CFArrayGetCount(v6);
        CFMutableSetRef Mutable = CFSetCreateMutable(v8, Count, MEMORY[0x1E4F1D548]);
        if (Mutable)
        {
          unint64_t v11 = Mutable;
          CFIndex v12 = CFArrayGetCount(v7);
          if (v12 >= 1)
          {
            uint64_t v13 = v12 + 1;
            do
            {
              CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v7, v13 - 2);
              CFSetAddValue(v11, ValueAtIndex);
              --v13;
            }
            while (v13 > 1);
          }
          CFSetRef Copy = CFSetCreateCopy(v8, v11);
          CFRelease(v11);
        }
        else
        {
          CFSetRef Copy = 0;
        }
        CFRelease(v7);
      }
      else
      {
        CFSetRef Copy = 0;
      }
      CFRelease(v5);
    }
    else
    {
      return 0;
    }
  }
  return Copy;
}

BOOL _LSBundleCouldBeSelectedForActivityContinuation(void *a1, int a2, uint64_t a3, void *a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v8 = a4;
  BOOL v9 = 0;
  if (v7 && a2 && a3)
  {
    uint64_t v10 = *(void *)(a3 + 172);
    BOOL v11 = (_LSBundleDataGetUnsupportedFormatFlag() & 0x400000) == 0;
    BOOL v9 = (v10 & 0x80) == 0 && v11;
    CFIndex v12 = (void *)_CSStringCopyCFString();
    uint64_t v13 = +[LSApplicationRestrictionsManager sharedInstance]();
    BOOL v14 = [NSNumber numberWithUnsignedLongLong:*(void *)(a3 + 416)];
    if (-[LSApplicationRestrictionsManager isRatingAllowed:](v13, v14))
    {
      +[LSApplicationRestrictionsManager sharedInstance]();
      unint64_t v15 = (id *)objc_claimAutoreleasedReturnValue();
      unsigned int v16 = -[LSApplicationRestrictionsManager isApplicationRestricted:checkFlags:](v15, v12, *(void *)(a3 + 172));

      if (!v16)
      {
LABEL_14:

        goto LABEL_15;
      }
    }
    else
    {
    }
    size_t v17 = _LSDefaultLog();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = 138412546;
      unint64_t v20 = v12;
      __int16 v21 = 2112;
      id v22 = v8;
      _os_log_impl(&dword_182959000, v17, OS_LOG_TYPE_DEFAULT, "%@ is currently restricted and cannot be returned for activity type %@.", (uint8_t *)&v19, 0x16u);
    }

    BOOL v9 = 0;
    goto LABEL_14;
  }
LABEL_15:

  return v9;
}

void sub_182A2447C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSBundleCompareForActivityContinuationSuitability(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  if (!a2 || !a3)
  {
    uint64_t v13 = [MEMORY[0x1E4F28B00] currentHandler];
    BOOL v14 = objc_msgSend(NSString, "stringWithUTF8String:", "NSComparisonResult _LSBundleCompareForActivityContinuationSuitability(__strong LSDatabaseRef, const LSBundleData *, const LSBundleData *)");
    [v13 handleFailureInFunction:v14 file:@"LSBundleUserActivitySupport.mm" lineNumber:245 description:@"unexpected NULL bundle data"];
  }
  MayBeOnNetworuint64_t k = _LSBundleDataMayBeOnNetwork(v5, a2);
  if ((MayBeOnNetwork != 0) == (_LSBundleDataMayBeOnNetwork(v5, a3) == 0))
  {
    if (MayBeOnNetwork) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = -1;
    }
    goto LABEL_20;
  }
  if (*(_DWORD *)(a2 + 300) == *(_DWORD *)(a3 + 300))
  {
    long long v17 = *(_OWORD *)(a2 + 28);
    long long v18 = *(_OWORD *)(a2 + 44);
    long long v15 = *(_OWORD *)(a3 + 28);
    long long v16 = *(_OWORD *)(a3 + 44);
    long long v21 = v17;
    long long v22 = v18;
    long long v7 = *(_OWORD *)(a3 + 44);
    long long v19 = *(_OWORD *)(a3 + 28);
    long long v20 = v7;
    if (_LSVersionNumberCompare(&v21, &v19) != 1)
    {
      long long v21 = v17;
      long long v22 = v18;
      long long v19 = v15;
      long long v20 = v16;
      if (_LSVersionNumberCompare(&v21, &v19) == -1) {
        goto LABEL_16;
      }
      goto LABEL_15;
    }
LABEL_13:
    uint64_t v8 = -1;
    goto LABEL_20;
  }
  int StringForCFString = _LSDatabaseGetStringForCFString(v5, @"com.apple.mobilephone", 1);
  if (StringForCFString)
  {
    if (*(_DWORD *)(a2 + 300) != StringForCFString)
    {
      if (*(_DWORD *)(a3 + 300) == StringForCFString)
      {
LABEL_16:
        uint64_t v8 = 1;
        goto LABEL_20;
      }
      goto LABEL_15;
    }
    goto LABEL_13;
  }
LABEL_15:
  int RegTime = _LSBundleDataGetRegTime(a2);
  int v11 = _LSBundleDataGetRegTime(a3);
  if (RegTime < v11) {
    goto LABEL_16;
  }
  if (RegTime <= v11) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = -1;
  }
LABEL_20:

  return v8;
}

void sub_182A246CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A24874(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A24934(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSGetSchemeType(NSString *a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  if (!v1)
  {
    int v11 = [MEMORY[0x1E4F28B00] currentHandler];
    CFIndex v12 = [NSString stringWithUTF8String:"_LSURLSchemeType _LSGetSchemeType(NSString *__strong)"];
    [v11 handleFailureInFunction:v12, @"LSCanOpenURLManager.mm", 734, @"Invalid parameter not satisfying: %@", @"scheme != nil" file lineNumber description];
  }
  id v18 = 0;
  long long v15 = 0;
  id v16 = 0;
  char v17 = 0;
  +[_LSDServiceDomain defaultServiceDomain]();
  id v2 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  unint64_t v3 = (LSContext *)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v15, v2, 0);

  if (v3)
  {
    uint64_t v4 = v1;
    if (!v1)
    {
      uint64_t v13 = [MEMORY[0x1E4F28B00] currentHandler];
      BOOL v14 = objc_msgSend(NSString, "stringWithUTF8String:", "_LSURLSchemeType _LSGetSchemeType(LSContext *, NSString *__strong)");
      [v13 handleFailureInFunction:v14, @"LSCanOpenURLManager.mm", 708, @"Invalid parameter not satisfying: %@", @"scheme != nil" file lineNumber description];
    }
    +[_LSCanOpenURLManager bindingEvaluatorForScheme:v4];
    LaunchServices::BindingEvaluator::evaluateBindings((LaunchServices::BindingEvaluator *)v21, v3, 0, v19);
    uint64_t v5 = v19[0];
    uint64_t v6 = -1;
    while (v5 != v19[1])
    {
      uint64_t v7 = *(void *)(v5 + 24);
      if (v7)
      {
        if ((*(unsigned char *)(v7 + 8) & 0x80) != 0)
        {
          uint64_t v6 = 1;
          break;
        }
        uint64_t v6 = 0;
      }
      v5 += 48;
    }
    long long v20 = (void **)v19;
    std::vector<LSBinding>::__destroy_vector::operator()[abi:nn180100](&v20);
    LaunchServices::BindingEvaluator::~BindingEvaluator((LaunchServices::BindingEvaluator *)v21);
  }
  else
  {
    uint64_t v6 = -1;
  }
  if (v15 && v17) {
    _LSContextDestroy(v15);
  }
  id v8 = v16;
  long long v15 = 0;
  id v16 = 0;

  char v17 = 0;
  id v9 = v18;
  id v18 = 0;

  return v6;
}

void sub_182A24BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);

  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)va);
  _Unwind_Resume(a1);
}

void sub_182A24D34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A24DFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A250B0(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_182A25278(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A25518(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A25814(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A25AC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A25DE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A26354(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A26444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A2652C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A265B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  LaunchServices::BindingEvaluator::~BindingEvaluator(v11);
  _Unwind_Resume(a1);
}

void sub_182A26664(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A26758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A26D80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char *a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  a20 = &a24;
  std::vector<LSBinding>::__destroy_vector::operator()[abi:nn180100]((void ***)&a20);

  LaunchServices::BindingEvaluator::~BindingEvaluator((LaunchServices::BindingEvaluator *)&a34);
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a27);

  _Unwind_Resume(a1);
}

void sub_182A26F34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A26FF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSNumericHandlerRankFromHandlerRankString(const __CFString *a1)
{
  if (!a1 || CFStringCompare(a1, @"None", 1uLL) == kCFCompareEqualTo) {
    return 0;
  }
  uint64_t v2 = 1;
  if (CFStringCompare(a1, @"Alternate", 1uLL))
  {
    if (CFStringCompare(a1, @"Default", 1uLL))
    {
      if (CFStringCompare(a1, @"Owner", 1uLL)) {
        return 0;
      }
      else {
        return 3;
      }
    }
    else
    {
      return 2;
    }
  }
  return v2;
}

CFSetRef _LSCopyAllHandlerRankStrings()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  v1[0] = xmmword_1E522DD58;
  v1[1] = *(_OWORD *)off_1E522DD68;
  return CFSetCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)v1, 4, MEMORY[0x1E4F1D548]);
}

BOOL _LSClaimFlagsAreWildcard(__int16 a1)
{
  return (a1 & 0x410) != 0;
}

uint64_t _LSClaimAdd(void *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5 = a1;
  uint64_t v6 = v5;
  uint64_t v7 = 4294967246;
  if (v5 && a2 && v5->store)
  {
    int v8 = CSStoreAllocUnitWithData();
    if (v8 && CSStoreGetUnit())
    {
      CSBindableKeyMapNextKey();
      id v9 = (void *)MEMORY[0x18530F680]();
      if (_CSStoreWriteToUnit()) {
        uint64_t v7 = 0;
      }
      else {
        uint64_t v7 = _LSGetOSStatusFromNSError(0);
      }

      if (!v7)
      {
        CSMapSetValue();
        int v10 = *(_DWORD *)(a2 + 8);
        if ((v10 & 0x20) != 0)
        {
          -[_LSDatabase setDocumentTypesChanged:](v6, 1);
          int v10 = *(_DWORD *)(a2 + 8);
        }
        if ((v10 & 0x40) != 0) {
          -[_LSDatabase setURLTypesChanged:](v6, 1);
        }
        uint64_t v7 = 0;
        if (a3) {
          *a3 = v8;
        }
      }
    }
    else
    {
      uint64_t v7 = 4294957803;
    }
  }

  return v7;
}

void sub_182A2732C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSClaimRemove(void *a1)
{
  uint64_t v1 = a1;
  uint64_t Unit = (_DWORD *)CSStoreGetUnit();
  if (Unit)
  {
    CSMapRemoveValue();
    int v3 = Unit[2];
    if ((v3 & 0x20) != 0)
    {
      -[_LSDatabase setDocumentTypesChanged:](v1, 1);
      int v3 = Unit[2];
    }
    if ((v3 & 0x40) != 0) {
      -[_LSDatabase setURLTypesChanged:](v1, 1);
    }
    LaunchServices::LocalizedString::Remove((LaunchServices::LocalizedString *)v1, (_LSDatabase *)Unit[5]);
    for (uint64_t i = 0; i != 8 && Unit[i + 7]; ++i)
      _CSStringRelease();
    _CSStringRelease();
    _LSDatabaseDisposeStringArray(v1, Unit[6]);
    if (Unit[17])
    {
      uint64_t v5 = _LSBindingListDeactivate();
      _LSBindingListDestroy();
    }
    else
    {
      uint64_t v5 = 0;
    }
    CSStoreFreeUnit();
  }
  else
  {
    uint64_t v5 = 4294957797;
  }

  return v5;
}

void sub_182A274BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSClaimSetGeneration(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result = CSStoreGetUnit();
  if (result) {
    *(_DWORD *)(result + 4) = a3;
  }
  return result;
}

void _LSClaimGetVisualizationFunctions(unsigned int *(**a1)(LaunchServices::LocalizedString **this, LSContext *a2)@<X8>)
{
  *a1 = LaunchServices::Claims::getSummary;
  a1[1] = (unsigned int *(*)(LaunchServices::LocalizedString **, LSContext *))LaunchServices::Claims::display;
  a1[2] = (unsigned int *(*)(LaunchServices::LocalizedString **, LSContext *))LaunchServices::Claims::copyBindingForVisualization;
}

unsigned int *LaunchServices::Claims::getSummary(LaunchServices::LocalizedString **this, LSContext *a2)
{
  uint64_t Unit = (unsigned int *)CSStoreGetUnit();
  if (Unit)
  {
    uint64_t Unit = (unsigned int *)LaunchServices::LocalizedString::Get(*this, (_LSDatabase *)Unit[5]);
    if (Unit)
    {
      LaunchServices::LocalizedString::localizeUnsafely((uint64_t)Unit, *this, 0);
      uint64_t Unit = (unsigned int *)objc_claimAutoreleasedReturnValue();
    }
  }

  return Unit;
}

BOOL LaunchServices::Claims::display(uint64_t a1, uint64_t a2, uint64_t a3, CSStore2::AttributedStringWriter *a4)
{
  uint64_t Unit = CSStoreGetUnit();
  if (Unit)
  {
    CSStore2::AttributedStringWriter::childUnit(a4, &cfstr_Localizednames.isa);
    uint64_t v7 = (NSString *)_LSCopyHandlerRankStringFromNumericHandlerRank(*(__int16 *)(Unit + 12));
    CSStore2::AttributedStringWriter::string(a4, &cfstr_Rank.isa, v7);
    CSStore2::AttributedStringWriter::link(a4, *(unsigned int *)(*(void *)a1 + 20), *(unsigned int *)(Unit + 16), 0);
    int v8 = (NSString *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::string(a4, &cfstr_Bundle.isa, v8);

    CSStore2::AttributedStringWriter::stringArray(a4, &cfstr_Reqcaps.isa);
    CSStore2::AttributedStringWriter::beginFlags(a4, &cfstr_Flags.isa);
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::endFlags(a4);
    CSStore2::AttributedStringWriter::beginFlags(a4, &cfstr_Roles.isa);
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::endFlags(a4);
    CSStore2::AttributedStringWriter::stringArray(a4, &cfstr_Iconfiles.isa, (const unsigned int *)(Unit + 28));
    CSStore2::AttributedStringWriter::string(a4, &cfstr_Iconname.isa);
    CSStore2::AttributedStringWriter::string(a4, &cfstr_Delegate.isa);
    CSStore2::AttributedStringWriter::childUnit(a4, &cfstr_Bindings.isa);
  }
  return Unit != 0;
}

void sub_182A27A68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::Claims::copyBindingForVisualization(LaunchServices::Claims *this, LSContext *a2)
{
  return 0;
}

void _LSEnumerateAllClaimedTypesOrSchemesForBundleID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v7 = a5;
  if (a1)
  {
    if (a2) {
      goto LABEL_3;
    }
LABEL_6:
    int v10 = [MEMORY[0x1E4F28B00] currentHandler];
    int v11 = objc_msgSend(NSString, "stringWithUTF8String:", "void _LSEnumerateAllClaimedTypesOrSchemesForBundleID(LSContext * _Nonnull, const LSBundleData * _Nonnull, LSRolesMask, BOOL, void (^__strong _Nonnull)(NSString *__strong, const LSClaimData *))");
    [v10 handleFailureInFunction:v11, @"LSClaimedTypes.mm", 183, @"Invalid parameter not satisfying: %@", @"inBundleData != NULL" file lineNumber description];

    if (v7) {
      goto LABEL_4;
    }
LABEL_7:
    CFIndex v12 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v13 = objc_msgSend(NSString, "stringWithUTF8String:", "void _LSEnumerateAllClaimedTypesOrSchemesForBundleID(LSContext * _Nonnull, const LSBundleData * _Nonnull, LSRolesMask, BOOL, void (^__strong _Nonnull)(NSString *__strong, const LSClaimData *))");
    [v12 handleFailureInFunction:v13, @"LSClaimedTypes.mm", 184, @"Invalid parameter not satisfying: %@", @"inBlock != nil" file lineNumber description];

    goto LABEL_4;
  }
  int v8 = [MEMORY[0x1E4F28B00] currentHandler];
  id v9 = objc_msgSend(NSString, "stringWithUTF8String:", "void _LSEnumerateAllClaimedTypesOrSchemesForBundleID(LSContext * _Nonnull, const LSBundleData * _Nonnull, LSRolesMask, BOOL, void (^__strong _Nonnull)(NSString *__strong, const LSClaimData *))");
  [v8 handleFailureInFunction:v9, @"LSClaimedTypes.mm", 182, @"Invalid parameter not satisfying: %@", @"inContext != NULL" file lineNumber description];

  if (!a2) {
    goto LABEL_6;
  }
LABEL_3:
  if (!v7) {
    goto LABEL_7;
  }
LABEL_4:
  id v14 = v7;
  _CSArrayEnumerateAllValues();
}

void sub_182A27CB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A27E40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSGetAllClaimedTypesOrSchemesForBundleID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = (void *)MEMORY[0x18530F680]();
  id v9 = [MEMORY[0x1E4F1CA80] set];
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  void v13[2] = ___LSGetAllClaimedTypesOrSchemesForBundleID_block_invoke;
  v13[3] = &unk_1E522DE20;
  id v10 = v9;
  id v14 = v10;
  _LSEnumerateAllClaimedTypesOrSchemesForBundleID(a1, a2, a3, a4, v13);
  int v11 = (void *)[v10 copy];

  return v11;
}

void sub_182A27F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_182A27FEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A28050(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A28124(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A281BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_182A28280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_182A28320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_182A283E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_182A28814(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A28A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)va);
  _Unwind_Resume(a1);
}

void sub_182A28CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);

  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)va);
  _Unwind_Resume(a1);
}

void sub_182A28EA0(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_182A28F68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A29080(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A29150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t CreateBindingEvaluatorWithConfiguration@<X0>(LSClaimBindingConfiguration *a1@<X0>, LaunchServices::BindingEvaluator *a2@<X8>)
{
  uint64_t v4 = [(LSClaimBindingConfiguration *)a1 typeIdentifier];
  LaunchServices::BindingEvaluator::CreateWithUTI(v4, 0, a2);

  if (objc_opt_respondsToSelector())
  {
    __int16 v5 = [(LSClaimBindingConfiguration *)a1 bundleClassMask];
    uint64_t v6 = 0;
    __p = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    if ((v5 & 4) != 0)
    {
      id v7 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)&v23, 1uLL);
      *(_DWORD *)id v7 = 2;
      uint64_t v6 = v7 + 4;
      __p = v7;
      uint64_t v23 = &v7[4 * v8];
      uint64_t v22 = v7 + 4;
    }
    if ((v5 & 0x800) != 0)
    {
      if (v6 >= v23)
      {
        id v10 = (char *)__p;
        uint64_t v11 = (v6 - (unsigned char *)__p) >> 2;
        unint64_t v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 62) {
          abort();
        }
        uint64_t v13 = v23 - (unsigned char *)__p;
        if ((v23 - (unsigned char *)__p) >> 1 > v12) {
          unint64_t v12 = v13 >> 1;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v12;
        }
        if (v14)
        {
          long long v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)&v23, v14);
          id v10 = (char *)__p;
          uint64_t v6 = v22;
        }
        else
        {
          long long v15 = 0;
        }
        id v16 = &v15[4 * v11];
        char v17 = &v15[4 * v14];
        *(_DWORD *)id v16 = 11;
        id v9 = v16 + 4;
        while (v6 != v10)
        {
          int v18 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v16 - 1) = v18;
          v16 -= 4;
        }
        __p = v16;
        uint64_t v22 = v9;
        uint64_t v23 = v17;
        if (v10) {
          operator delete(v10);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v6 = 11;
        id v9 = v6 + 4;
      }
      uint64_t v22 = v9;
    }
    LaunchServices::BindingEvaluator::setAllowedBundleClasses((uint64_t)a2, (uint64_t)&__p);
    if (__p)
    {
      uint64_t v22 = (char *)__p;
      operator delete(__p);
    }
  }
  uint64_t result = [(LSClaimBindingConfiguration *)a1 addClaimRecordIfMissing];
  if (result)
  {
    int Options = LaunchServices::BindingEvaluator::getOptions(a2);
    return LaunchServices::BindingEvaluator::setOptions((uint64_t)a2, Options | 0x80000u);
  }
  return result;
}

void sub_182A29340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  LaunchServices::BindingEvaluator::~BindingEvaluator(v11);
  _Unwind_Resume(a1);
}

void sub_182A2941C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

__CFString *_LSContainerStateGetDescription(int a1)
{
  uint64_t v1 = a1 + 1;
  if (v1 >= 3)
  {
    objc_msgSend(NSString, "stringWithFormat:", @"? (%llu)", a1);
    uint64_t v2 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v2 = off_1E522DFD0[v1];
  }

  return v2;
}

void _LSContainerSetMounted(void *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  uint64_t Unit = CSStoreGetUnit();
  if (Unit)
  {
    id v7 = _LSAliasGetPath(v5, *(_DWORD *)(Unit + 12));
    uint64_t v8 = _LSDefaultLog();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 134218499;
      uint64_t v10 = a2;
      __int16 v11 = 2113;
      unint64_t v12 = v7;
      __int16 v13 = 2048;
      uint64_t v14 = a3;
      _os_log_impl(&dword_182959000, v8, OS_LOG_TYPE_INFO, "Updating state of volume %llx %{private}@ to mounted with volume ID %llu", buf, 0x20u);
    }

    _CSStoreWriteToUnit();
  }
}

void sub_182A29628(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL _LSContainerFindOrRegisterWithNode(id *a1, void *a2, int a3, _DWORD *a4, uint64_t *a5, id *a6, void *a7)
{
  v80[1] = *MEMORY[0x1E4F143B8];
  id v13 = a2;
  uint64_t v14 = v13;
  uint64_t v45 = 0;
  long long v46 = &v45;
  uint64_t v47 = 0x2020000000;
  char v48 = 0;
  if (a1 && v13 && *a1)
  {
    long long v43 = 0;
    obuint64_t j = 0;
    __int16 v42 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = &v38;
    uint64_t v40 = 0x2020000000;
    int v41 = 0;
    BOOL v15 = _LSCreateContainerNodesAndFlagsForNode(v13, &obj, &v43, &v42, a7);
    *((unsigned char *)v46 + 24) = v15;
    if (v15)
    {
      uint64_t v34 = a6;
      char v17 = v43;
      id v16 = obj;
      __int16 v33 = v42;
      int v30 = v39;
      id v18 = *a1;
      id v19 = v16;
      id v35 = v17;
      uint64_t v78 = 0;
      uint64_t v74 = 0;
      __int16 v75 = &v74;
      uint64_t v76 = 0x2020000000;
      int v77 = 0;
      uint64_t v70 = 0;
      long long v71 = &v70;
      uint64_t v72 = 0x2020000000;
      uint64_t v73 = 0;
      __int16 v31 = v18;
      int v32 = v19;
      if ([v19 getVolumeIdentifier:&v78 error:0])
      {
        uint64_t v59 = MEMORY[0x1E4F143A8];
        uint64_t v60 = 3221225472;
        uint64_t v61 = (uint64_t)___ZL33_LSContainerFindWithNodesAndFlagsP11_LSDatabaseP6FSNodeS2_tPjPPK15LSContainerData_block_invoke;
        id v62 = (uint64_t (*)(uint64_t, uint64_t))&unk_1E522DF10;
        __int16 v69 = v33;
        uint64_t v68 = v78;
        long long v20 = (void (*)(uint64_t))v18;
        uint64_t v63 = v20;
        id v21 = v19;
        id v64 = v21;
        id v65 = v35;
        id v66 = &v74;
        uint64_t v67 = &v70;
        _CSStoreEnumerateUnits();

        uint64_t v22 = v34;
        uint64_t v23 = v71[3];
        if (v23) {
          goto LABEL_8;
        }
        uint64_t v49 = MEMORY[0x1E4F143A8];
        uint64_t v50 = 3221225472;
        uint64_t v51 = ___ZL33_LSContainerFindWithNodesAndFlagsP11_LSDatabaseP6FSNodeS2_tPjPPK15LSContainerData_block_invoke_2;
        uint64_t v52 = &unk_1E522DF38;
        __int16 v58 = v33;
        char v53 = v20;
        CFStringRef v55 = &v74;
        uint64_t v56 = &v70;
        uint64_t v57 = v78;
        id v54 = v21;
        _CSStoreEnumerateUnits();

        uint64_t v22 = v34;
        uint64_t v23 = v71[3];
        if (v23) {
LABEL_8:
        }
          *((_DWORD *)v30 + 6) = *((_DWORD *)v75 + 6);
      }
      else
      {
        uint64_t v23 = v71[3];
        uint64_t v22 = v34;
      }
      BOOL v24 = v23 != 0;
      _Block_object_dispose(&v70, 8);
      _Block_object_dispose(&v74, 8);

      *((unsigned char *)v46 + 24) = v24;
      if (v24) {
        goto LABEL_17;
      }
      uint64_t v59 = 0;
      uint64_t v60 = (uint64_t)&v59;
      uint64_t v61 = 0x3032000000;
      id v62 = __Block_byref_object_copy__14;
      uint64_t v63 = __Block_byref_object_dispose__14;
      id v64 = 0;
      v36[0] = MEMORY[0x1E4F143A8];
      v36[1] = 3221225472;
      v36[2] = ___LSContainerFindOrRegisterWithNode_block_invoke;
      v36[3] = &unk_1E522DE70;
      v36[4] = &v38;
      v36[5] = &v45;
      BOOL v37 = a7 != 0;
      v36[6] = &v59;
      _LSContainerAddWithNode((uint64_t)a1, v14, 1, v36);
      int v25 = *((unsigned __int8 *)v46 + 24);
      if (a7 && !*((unsigned char *)v46 + 24))
      {
        *a7 = *(id *)(v60 + 40);
        int v25 = *((unsigned __int8 *)v46 + 24);
      }
      if ((a3 & 0x3000000) == 0x2000000 && v25)
      {
        char v26 = _LSContextUpdate((_LSDatabase **)a1, 1, a7);
        *((unsigned char *)v46 + 24) = v26;
      }
      _Block_object_dispose(&v59, 8);

      if (*((unsigned char *)v46 + 24))
      {
LABEL_17:
        if (a4) {
          *a4 = *((_DWORD *)v39 + 6);
        }
        if (a5) {
          *a5 = CSStoreGetUnit();
        }
        if (v22) {
          objc_storeStrong(v22, obj);
        }
      }
    }
    _Block_object_dispose(&v38, 8);
  }
  else if (a7)
  {
    uint64_t v79 = *MEMORY[0x1E4F28228];
    v80[0] = @"invalid input parameters";
    unint64_t v27 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v80 forKeys:&v79 count:1];
    _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -50, (uint64_t)"_LSContainerFindOrRegisterWithNode", 366, v27);
    *a7 = (id)objc_claimAutoreleasedReturnValue();
  }
  BOOL v28 = *((unsigned char *)v46 + 24) != 0;
  _Block_object_dispose(&v45, 8);

  return v28;
}

void sub_182A29BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id a29,id a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,id a39,id a40)
{
  _Block_object_dispose((const void *)(v41 - 200), 8);
  _Block_object_dispose((const void *)(v41 - 168), 8);

  _Block_object_dispose(&a24, 8);
  _Block_object_dispose(&a31, 8);

  _Unwind_Resume(a1);
}

BOOL _LSCreateContainerNodesAndFlagsForNode(void *a1, void **a2, void **a3, _WORD *a4, void *a5)
{
  v26[1] = *MEMORY[0x1E4F143B8];
  id v9 = a1;
  uint64_t v10 = v9;
  if (v9)
  {
    __int16 v11 = [v9 volumeNodeWithFlags:0 error:a5];
    BOOL v12 = v11 != 0;
    if (v11)
    {
      id v13 = +[FSNode rootVolumeNode];
      char v14 = [v11 isEqual:v13];

      if (v14)
      {
        __int16 v15 = 18;
      }
      else
      {
        id v18 = +[FSNode prebootVolumeNode];
        [v11 isEqual:v18];

        __int16 v15 = 16;
      }
      if ([v11 isOnDiskImage])
      {
        if (a3)
        {
          id v19 = [v11 diskImageURLWithFlags:1 error:0];
          long long v20 = v19;
          if (v19 && [v19 isFileURL]) {
            char v17 = [[FSNode alloc] initWithURL:v20 flags:0 error:0];
          }
          else {
            char v17 = 0;
          }
        }
        else
        {
          char v17 = 0;
        }
        v15 |= 4u;
      }
      else
      {
        char v17 = 0;
      }
      __int16 v21 = [v11 isOnLocalVolume];
      if (a2)
      {
        uint64_t v22 = *a2;
        *a2 = v11;

        __int16 v11 = 0;
      }
      if (a3)
      {
        uint64_t v23 = *a3;
        *a3 = v17;

        char v17 = 0;
      }
      if (a4) {
        *a4 = v15 | v21;
      }
    }
    else
    {
      char v17 = 0;
    }
  }
  else
  {
    if (a5)
    {
      uint64_t v25 = *MEMORY[0x1E4F28228];
      v26[0] = @"inNode";
      id v16 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v26 forKeys:&v25 count:1];
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -50, (uint64_t)"_LSCreateContainerNodesAndFlagsForNode", 206, v16);
      *a5 = (id)objc_claimAutoreleasedReturnValue();
    }
    BOOL v12 = 0;
  }

  return v12;
}

void sub_182A29F2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSContainerAddWithNode(uint64_t a1, void *a2, int a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  id v9 = (void *)MEMORY[0x18530F680]();
  if (([(id)__LSDefaultsGetSharedInstance() isServer] & 1) != 0
    || ([(id)__LSDefaultsGetSharedInstance() hasServer] & 1) == 0)
  {
    MEMORY[0x185310450]();
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    void v21[2] = ___LSContainerAddWithNode_block_invoke;
    v21[3] = &unk_1E522DE98;
    id v22 = v7;
    uint64_t v24 = a1;
    char v25 = a3;
    id v23 = v8;
    uint64_t v12 = MEMORY[0x18530F950](v21);
    id v13 = (void *)v12;
    if (a3)
    {
      (*(void (**)(uint64_t))(v12 + 16))(v12);
    }
    else
    {
      if (a1)
      {
        char v17 = [MEMORY[0x1E4F28B00] currentHandler];
        id v18 = objc_msgSend(NSString, "stringWithUTF8String:", "void _LSContainerAddWithNode(LSContext *, FSNode *__strong, Boolean, void (^__strong)(LSContainerID, NSError *__strong))");
        [v17 handleFailureInFunction:v18 file:@"LSContainer.mm" lineNumber:617 description:@"if asyncing _LSContainerAddWithNode it cannot use a caller's context"];
      }
      char v14 = _LSServer_GetIOQueue();
      dispatch_async(v14, v13);
    }
    __int16 v15 = v22;
  }
  else
  {
    if (a3)
    {
      uint64_t v10 = v20;
      v20[0] = (void (*)(void, void))MEMORY[0x1E4F143A8];
      v20[1] = (void (*)(void, void))3221225472;
      _OWORD v20[2] = (void (*)(void, void))___LSContainerAddWithNode_block_invoke_24;
      void v20[3] = (void (*)(void, void))&unk_1E522BD18;
      void v20[4] = (void (*)(void, void))v8;
      uint64_t v11 = +[_LSDService synchronousXPCProxyWithErrorHandler:]((uint64_t)_LSDModifyService, v20);
    }
    else
    {
      uint64_t v10 = v19;
      v19[0] = (void (*)(void, void))MEMORY[0x1E4F143A8];
      v19[1] = (void (*)(void, void))3221225472;
      v19[2] = (void (*)(void, void))___LSContainerAddWithNode_block_invoke_2;
      uint64_t v19[3] = (void (*)(void, void))&unk_1E522BD18;
      void v19[4] = (void (*)(void, void))v8;
      uint64_t v11 = +[_LSDService XPCProxyWithErrorHandler:]((uint64_t)_LSDModifyService, v19);
    }
    __int16 v15 = (void *)v11;

    id v16 = [v7 URL];
    [v15 registerContainerURL:v16 completionHandler:v8];
  }
}

void sub_182A2A210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24)
{
  _Unwind_Resume(a1);
}

BOOL _LSContainerDataNeedsUpdate(uint64_t a1)
{
  return *(unsigned char *)(a1 + 2) == 0;
}

void sub_182A2A76C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,void *a34,void *a35,void *a36)
{
  _Unwind_Resume(a1);
}

uint64_t _LSContainerAdd(void *a1, uint64_t a2, _DWORD *a3)
{
  id v4 = a1;
  id v5 = v4;
  if (v4 && *((void *)v4 + 1))
  {
    int v6 = CSStoreAllocUnitWithData();
    if (v6)
    {
      uint64_t v7 = 0;
      if (a3) {
        *a3 = v6;
      }
    }
    else
    {
      uint64_t v7 = 4294957803;
    }
  }
  else
  {
    uint64_t v7 = 4294967246;
  }

  return v7;
}

void sub_182A2A8F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSContainerRemove(uint64_t *a1, int a2)
{
  uint64_t result = -[_LSDatabase accessContext](*a1);
  if (result) {
    uint64_t result = _CSStoreAccessContextAssertWriting();
  }
  if (a2)
  {
    uint64_t result = CSStoreGetUnit();
    if (result)
    {
      uint64_t v9 = 0;
      uint64_t v10 = &v9;
      uint64_t v11 = 0x4812000000;
      uint64_t v12 = __Block_byref_object_copy__26;
      id v13 = __Block_byref_object_dispose__27;
      char v14 = &unk_182B5933F;
      id v16 = 0;
      uint64_t v17 = 0;
      __p = 0;
      _CSStoreEnumerateUnits();
      id v5 = (unsigned int *)v10[6];
      int v6 = (unsigned int *)v10[7];
      while (v5 != v6)
        _LSUnregisterBundle((_LSDatabase **)a1, *v5++, 0);
      _Block_object_dispose(&v9, 8);
      if (__p)
      {
        id v16 = __p;
        operator delete(__p);
      }
      uint64_t v9 = 0;
      uint64_t v10 = &v9;
      uint64_t v11 = 0x4812000000;
      uint64_t v12 = __Block_byref_object_copy__26;
      id v13 = __Block_byref_object_dispose__27;
      char v14 = &unk_182B5933F;
      id v16 = 0;
      uint64_t v17 = 0;
      __p = 0;
      _CSStoreEnumerateUnits();
      uint64_t v7 = (int *)v10[6];
      id v8 = (int *)v10[7];
      while (v7 != v8)
        _LSPluginRemove((void *)*a1, *v7++);
      _Block_object_dispose(&v9, 8);
      if (__p)
      {
        id v16 = __p;
        operator delete(__p);
      }
      return CSStoreFreeUnit();
    }
  }
  return result;
}

void sub_182A2AB9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  if (__p)
  {
    a29 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__26(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

uint64_t _LSContainerSet(void *a1, uint64_t a2, uint64_t a3)
{
  id v4 = a1;
  id v5 = v4;
  if (v4 && a3 && *((void *)v4 + 1))
  {
    _CSStoreWriteToUnit();
    int v6 = 0;
  }
  else
  {
    int v6 = _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -50, (uint64_t)"_LSContainerSet", 737, 0);
  }

  return 1;
}

void sub_182A2AEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t _LSCheckAllContainerStates(void *a1)
{
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2020000000;
  char v11 = 0;
  v7[1] = (id)MEMORY[0x1E4F143A8];
  v7[2] = (id)3221225472;
  v7[3] = ___LSCheckAllContainerStates_block_invoke;
  void v7[4] = &unk_1E522DEE8;
  void v7[5] = &v8;
  v7[6] = a1;
  _CSStoreEnumerateUnits();
  if (*((unsigned char *)v9 + 24))
  {
    v7[0] = 0;
    char v2 = _LSContextUpdate((_LSDatabase **)a1, 1, v7);
    id v3 = v7[0];
    id v4 = v3;
    if (v2) {
      uint64_t v5 = 0;
    }
    else {
      uint64_t v5 = _LSGetOSStatusFromNSError(v3);
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_182A2AFEC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v2 - 48), 8);
  _Unwind_Resume(a1);
}

void _LSContainerGetVisualizationFunctions(int *(**a1)(void **this, LSContext *a2)@<X8>)
{
  *a1 = LaunchServices::Containers::getSummary;
  a1[1] = (int *(*)(void **, LSContext *))LaunchServices::Containers::display;
  a1[2] = (int *(*)(void **, LSContext *))LaunchServices::Containers::copyBindingForVisualization;
}

int *LaunchServices::Containers::getSummary(void **this, LSContext *a2)
{
  uint64_t Unit = (int *)CSStoreGetUnit();
  if (Unit)
  {
    _LSAliasGetPath(*this, Unit[3]);
    uint64_t Unit = (int *)objc_claimAutoreleasedReturnValue();
  }

  return Unit;
}

BOOL LaunchServices::Containers::display(uint64_t a1, uint64_t a2, uint64_t a3, CSStore2::AttributedStringWriter *a4)
{
  uint64_t Unit = CSStoreGetUnit();
  uint64_t v7 = Unit;
  if (Unit)
  {
    CSStore2::AttributedStringWriter::link(a4, *(unsigned int *)(*(void *)a1 + 1600), *(unsigned int *)(Unit + 12), 0);
    uint64_t v8 = (NSString *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::string(a4, &cfstr_Path.isa, v8);

    uint64_t v9 = *(unsigned int *)(v7 + 16);
    if (v9)
    {
      CSStore2::AttributedStringWriter::link(a4, *(unsigned int *)(*(void *)a1 + 1600), v9, 0);
      uint64_t v10 = (NSString *)objc_claimAutoreleasedReturnValue();
      CSStore2::AttributedStringWriter::string(a4, &cfstr_DiskImage.isa, v10);
    }
    CSStore2::AttributedStringWriter::beginFlags(a4, &cfstr_Flags.isa);
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::missingFlag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::endFlags(a4);
    _LSContainerStateGetDescription(*(char *)(v7 + 2));
    char v11 = (NSString *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::string(a4, &cfstr_State.isa, v11);
    if (*(unsigned char *)(v7 + 2) == 1)
    {
      uint64_t v12 = [NSNumber numberWithUnsignedLongLong:*(void *)(v7 + 4)];
      CSStore2::AttributedStringWriter::number(a4, &cfstr_Volume_0.isa, v12);
    }
    else
    {
      CSStore2::AttributedStringWriter::string(a4, &cfstr_Volume_0.isa, &stru_1ECB1A570.isa);
    }
  }
  return v7 != 0;
}

void sub_182A2B334(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::Containers::copyBindingForVisualization(LaunchServices::Containers *this, LSContext *a2)
{
  return 0;
}

uint64_t ___ZL33_LSContainerFindWithNodesAndFlagsP11_LSDatabaseP6FSNodeS2_tPjPPK15LSContainerData_block_invoke(uint64_t result, int a2, unsigned __int16 *a3, uint64_t a4, unsigned char *a5)
{
  int v5 = *a3;
  if (v5 != *(unsigned __int16 *)(result + 80)) {
    return result;
  }
  if (*((unsigned char *)a3 + 2) != 1) {
    return result;
  }
  uint64_t v7 = result;
  uint64_t v8 = *(void *)(result + 72);
  if (v8 != *(void *)(a3 + 2)) {
    return result;
  }
  if ((v5 & 2) != 0)
  {
LABEL_9:
    *(_DWORD *)(*(void *)(*(void *)(v7 + 56) + 8) + 24) = a2;
    *(void *)(*(void *)(*(void *)(v7 + 64) + 8) + 24) = a3;
    *a5 = 1;
    return result;
  }
  __n128 result = _LSAliasCompareToNode(*(void **)(result + 32), *((_DWORD *)a3 + 3), v8, 0, *(void **)(result + 40));
  if (!result) {
    return result;
  }
  int v11 = *((_DWORD *)a3 + 4);
  uint64_t v12 = *(void **)(v7 + 48);
  if (!v11)
  {
    if (v12) {
      return result;
    }
    goto LABEL_9;
  }
  if (v12)
  {
    __n128 result = _LSAliasCompareToNode(*(void **)(v7 + 32), v11, 0, 0, v12);
    if (result) {
      goto LABEL_9;
    }
  }
  return result;
}

uint64_t ___ZL33_LSContainerFindWithNodesAndFlagsP11_LSDatabaseP6FSNodeS2_tPjPPK15LSContainerData_block_invoke_2(uint64_t result, uint64_t a2, unsigned __int16 *a3, uint64_t a4, unsigned char *a5)
{
  if (*a3 == *(unsigned __int16 *)(result + 72))
  {
    int v7 = a2;
    uint64_t v8 = result;
    char v11 = 0;
    uint64_t v10 = 0;
    __n128 result = _LSContainerCheckState(*(void **)(result + 32), a2, (uint64_t)a3, &v11, &v10);
    if (result) {
      BOOL v9 = 0;
    }
    else {
      BOOL v9 = v11 == 1;
    }
    if (v9 && v10 == *(void *)(v8 + 64))
    {
      if ((*a3 & 2) != 0
        || (__n128 result = _LSAliasCompareToNode(*(void **)(v8 + 32), *((_DWORD *)a3 + 3), v10, 0, *(void **)(v8 + 40)),
            result))
      {
        *(_DWORD *)(*(void *)(*(void *)(v8 + 48) + 8) + 24) = v7;
        *(void *)(*(void *)(*(void *)(v8 + 56) + 8) + 24) = a3;
        *a5 = 1;
      }
    }
  }
  return result;
}

void ___ZL15_LSContainerAddP9LSContextP6FSNodeP6NSDataS2_S4_tyhU13block_pointerFvjP7NSErrorE_block_invoke(uint64_t a1)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  id v54 = *(void ***)(a1 + 64);
  id v55 = 0;
  char v56 = 0;
  id v57 = 0;
  +[_LSDServiceDomain defaultServiceDomain]();
  uint64_t v2 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  id v3 = (void **)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v54, v2, 0);

  if (!v3)
  {
    uint64_t v11 = *(void *)(a1 + 56);
    +[_LSDServiceDomain defaultServiceDomain]();
    uint64_t v12 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
    uint64_t v13 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v54, v12, 0);

    if (v13) {
      id v14 = 0;
    }
    else {
      id v14 = v57;
    }
    (*(void (**)(uint64_t, void, id))(v11 + 16))(v11, 0, v14);

    goto LABEL_19;
  }
  uint64_t v50 = 0;
  uint64_t v51 = &v50;
  uint64_t v52 = 0x2020000000;
  int v53 = 0;
  id v4 = _LSDefaultLog();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
    ___ZL15_LSContainerAddP9LSContextP6FSNodeP6NSDataS2_S4_tyhU13block_pointerFvjP7NSErrorE_block_invoke_cold_4(a1, v4);
  }

  uint64_t v43 = MEMORY[0x1E4F143A8];
  uint64_t v44 = 3221225472;
  uint64_t v45 = ___ZL15_LSContainerAddP9LSContextP6FSNodeP6NSDataS2_S4_tyhU13block_pointerFvjP7NSErrorE_block_invoke_34;
  int v6 = (uint64_t *)(a1 + 72);
  uint64_t v5 = *(void *)(a1 + 72);
  __int16 v49 = *(_WORD *)(a1 + 80);
  long long v46 = &unk_1E522DF60;
  uint64_t v47 = &v50;
  uint64_t v48 = v5;
  _CSStoreEnumerateUnits();
  if (*((_DWORD *)v51 + 6)) {
    goto LABEL_11;
  }
  int v7 = _LSDefaultLog();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
    ___ZL15_LSContainerAddP9LSContextP6FSNodeP6NSDataS2_S4_tyhU13block_pointerFvjP7NSErrorE_block_invoke_cold_3(a1, v7);
  }

  *(void *)long long buf = 0;
  *(void *)&uint8_t buf[8] = buf;
  *(void *)&uint8_t buf[16] = 0x2020000000;
  id v59 = 0;
  v37[1] = (id)MEMORY[0x1E4F143A8];
  _OWORD v37[2] = (id)3221225472;
  v37[3] = ___ZL15_LSContainerAddP9LSContextP6FSNodeP6NSDataS2_S4_tyhU13block_pointerFvjP7NSErrorE_block_invoke_35;
  v37[4] = &unk_1E522DF88;
  uint64_t v8 = *(void **)(a1 + 32);
  __int16 v42 = *(_WORD *)(a1 + 80);
  uint64_t v39 = buf;
  uint64_t v41 = v3;
  id v38 = v8;
  uint64_t v40 = &v50;
  _CSStoreEnumerateUnits();
  unsigned int v9 = *((_DWORD *)v51 + 6);
  if (v9 && *(void *)(*(void *)&buf[8] + 24)) {
    _LSContainerSetMounted(*v3, v9, *v6);
  }

  _Block_object_dispose(buf, 8);
  if (*((_DWORD *)v51 + 6))
  {
LABEL_11:
    uint64_t v10 = _LSDefaultLog();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
      ___ZL15_LSContainerAddP9LSContextP6FSNodeP6NSDataS2_S4_tyhU13block_pointerFvjP7NSErrorE_block_invoke_cold_2();
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
    goto LABEL_14;
  }
  uint64_t v17 = _LSDefaultLog();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG)) {
    ___ZL15_LSContainerAddP9LSContextP6FSNodeP6NSDataS2_S4_tyhU13block_pointerFvjP7NSErrorE_block_invoke_cold_1();
  }

  id v18 = *(void **)(a1 + 40);
  if (v18)
  {
    id v19 = *v3;
    v37[0] = 0;
    int v20 = _LSAliasAdd(v19, v18, v37);
    id v21 = v37[0];
    id v22 = v21;
    if (!v20)
    {
LABEL_38:
      __int16 v29 = _LSDefaultLog();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        uint64_t v30 = *(void *)(a1 + 32);
        uint64_t v31 = *v6;
        *(_DWORD *)long long buf = 138478339;
        *(void *)&uint8_t buf[4] = v30;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v31;
        *(_WORD *)&buf[22] = 2114;
        id v59 = v22;
        _os_log_error_impl(&dword_182959000, v29, OS_LOG_TYPE_ERROR, "Error adding database record for volume %{private}@ with volume ID %llu: %{public}@", buf, 0x20u);
      }

      id v21 = v22;
      (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
      goto LABEL_42;
    }
  }
  else
  {
    id v21 = 0;
    int v20 = 0;
  }
  id v23 = *(void **)(a1 + 48);
  if (v23)
  {
    uint64_t v24 = *v3;
    id v36 = v21;
    int v25 = _LSAliasAdd(v24, v23, &v36);
    id v22 = v36;

    id v21 = v22;
    if (!v25)
    {
LABEL_36:
      if (v20) {
        _LSAliasRemove(*v3, v20);
      }
      goto LABEL_38;
    }
  }
  else
  {
    int v25 = 0;
  }
  uint64_t v26 = *(void *)(a1 + 72);
  unint64_t v27 = *v3;
  v32[0] = *(_WORD *)(a1 + 80);
  v32[1] = 0;
  uint64_t v33 = v26;
  int v34 = v20;
  int v35 = v25;
  int v28 = _LSContainerAdd(v27, (uint64_t)v32, (_DWORD *)v51 + 6);
  if (v28)
  {
    _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], v28, (uint64_t)"_LSContainerAdd_block_invoke", 520, 0);
    id v22 = (id)objc_claimAutoreleasedReturnValue();

    if (v25) {
      _LSAliasRemove(*v3, v25);
    }
    goto LABEL_36;
  }
  _LSContainerSetMounted(*v3, *((_DWORD *)v51 + 6), *v6);
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
LABEL_42:

LABEL_14:
  _Block_object_dispose(&v50, 8);
LABEL_19:
  MEMORY[0x185310460]();
  if (v54 && v56) {
    _LSContextDestroy(v54);
  }
  id v15 = v55;
  id v54 = 0;
  id v55 = 0;

  char v56 = 0;
  id v16 = v57;
  id v57 = 0;
}

void sub_182A2BA9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)(v32 - 176));
  _Unwind_Resume(a1);
}

uint64_t ___ZL15_LSContainerAddP9LSContextP6FSNodeP6NSDataS2_S4_tyhU13block_pointerFvjP7NSErrorE_block_invoke_34(uint64_t result, int a2, unsigned __int16 *a3, uint64_t a4, unsigned char *a5)
{
  if (*a3 == *(unsigned __int16 *)(result + 48)
    && *((unsigned char *)a3 + 2) == 1
    && *(void *)(result + 40) == *(void *)(a3 + 2))
  {
    *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
    *a5 = 1;
  }
  return result;
}

uint64_t ___ZL15_LSContainerAddP9LSContextP6FSNodeP6NSDataS2_S4_tyhU13block_pointerFvjP7NSErrorE_block_invoke_35(uint64_t result, int a2, uint64_t a3, uint64_t a4, unsigned char *a5)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8) + 24) = a3;
  uint64_t v5 = *(unsigned __int16 **)(*(void *)(*(void *)(result + 40) + 8) + 24);
  if (*v5 == *(unsigned __int16 *)(result + 64))
  {
    uint64_t v8 = result;
    __n128 result = _LSAliasCompareToNode(**(void ***)(result + 56), *((_DWORD *)v5 + 3), *(void *)(v5 + 2), 0, *(void **)(result + 32));
    if (result)
    {
      *(_DWORD *)(*(void *)(*(void *)(v8 + 48) + 8) + 24) = a2;
      *a5 = 1;
    }
  }
  return result;
}

uint64_t ___ZL15_LSContainerAddP9LSContextP6FSNodeP6NSDataS2_S4_tyhU13block_pointerFvjP7NSErrorE_block_invoke_37(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t _LSCopyDataContainerURLFromContainermanager(void *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  int v6 = _LSDefaultLog();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t v13 = 138412802;
    *(void *)&void v13[4] = v5;
    __int16 v14 = 2048;
    uint64_t v15 = a2;
    __int16 v16 = 2048;
    uint64_t v17 = a3;
    _os_log_impl(&dword_182959000, v6, OS_LOG_TYPE_DEFAULT, "querying MCM for container for %@, class %llx, platform %lu", v13, 0x20u);
  }

  *(void *)uint64_t v13 = 1;
  id v7 = v5;
  [v7 UTF8String];
  uint64_t v8 = container_create_or_lookup_path_for_platform();
  if (v8)
  {
    unsigned int v9 = (void *)v8;
    uint64_t v10 = [objc_alloc(MEMORY[0x1E4F1CB10]) initFileURLWithFileSystemRepresentation:v8 isDirectory:1 relativeToURL:0];
    free(v9);
  }
  else
  {
    uint64_t v11 = _LSDefaultLog();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      _LSCopyDataContainerURLFromContainermanager_cold_1();
    }

    uint64_t v10 = 0;
  }

  return v10;
}

id _LSCopyGroupContainerURLSFromContainermanager(void *a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v23 = 1;
  id v1 = a1;
  [v1 UTF8String];
  uint64_t v2 = (void *)container_create_or_lookup_app_group_paths_for_platform();
  if (v2)
  {
    id v18 = v1;
    id v3 = (void *)_CFXPCCreateCFObjectFromXPCObject();
    id v4 = objc_alloc(MEMORY[0x1E4F1CA60]);
    id v5 = [v3 allKeys];
    id v6 = (id)objc_msgSend(v4, "initWithCapacity:", objc_msgSend(v5, "count"));

    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    id v7 = v3;
    uint64_t v8 = [v7 countByEnumeratingWithState:&v19 objects:v24 count:16];
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(void *)v20;
      do
      {
        for (uint64_t i = 0; i != v9; ++i)
        {
          if (*(void *)v20 != v10) {
            objc_enumerationMutation(v7);
          }
          uint64_t v12 = *(void *)(*((void *)&v19 + 1) + 8 * i);
          id v13 = objc_alloc(MEMORY[0x1E4F1CB10]);
          __int16 v14 = [v7 objectForKeyedSubscript:v12];
          uint64_t v15 = (void *)[v13 initFileURLWithPath:v14 isDirectory:1];
          [v6 setObject:v15 forKeyedSubscript:v12];
        }
        uint64_t v9 = [v7 countByEnumeratingWithState:&v19 objects:v24 count:16];
      }
      while (v9);
    }

    id v1 = v18;
  }
  else
  {
    __int16 v16 = _LSDefaultLog();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      _LSCopyGroupContainerURLSFromContainermanager_cold_1();
    }

    id v6 = objc_alloc_init(MEMORY[0x1E4F1C9E8]);
  }

  return v6;
}

uint64_t _LSCopyEnvironmentVariablesFromContainermanager(void *a1, void *a2, unsigned int a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = _LSDefaultLog();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412802;
    id v23 = v5;
    __int16 v24 = 2048;
    uint64_t v25 = a2;
    __int16 v26 = 2048;
    uint64_t v27 = a3;
    _os_log_impl(&dword_182959000, v6, OS_LOG_TYPE_DEFAULT, "querying MCM for environment for %@, class %llx, platform %lu", buf, 0x20u);
  }

  id v7 = v5;
  [v7 UTF8String];
  uint64_t v8 = container_create_or_lookup_path_for_platform();
  if (!v8)
  {
    __int16 v16 = _LSDefaultLog();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      _LSCopyEnvironmentVariablesFromContainermanager_cold_1();
    }

    goto LABEL_14;
  }
  uint64_t v9 = (void *)v8;
  uint64_t v10 = (void *)[objc_alloc(MEMORY[0x1E4F1CB10]) initFileURLWithFileSystemRepresentation:v8 isDirectory:1 relativeToURL:0];
  uint64_t v11 = [v10 URLByAppendingPathComponent:@"tmp" isDirectory:1];
  uint64_t v12 = [v11 path];
  uint64_t v13 = [v10 path];
  __int16 v14 = (void *)v13;
  if (v12 && v13)
  {
    v20[0] = @"HOME";
    v20[1] = @"CFFIXED_USER_HOME";
    v21[0] = v13;
    v21[1] = v13;
    _OWORD v20[2] = @"TMPDIR";
    void v20[3] = @"_DYLD_CLOSURE_HOME";
    void v21[2] = v12;
    v21[3] = v13;
    uint64_t v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v21 forKeys:v20 count:4];
  }
  else
  {
    uint64_t v17 = _LSDefaultLog();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      id v18 = [v11 path];
      *(_DWORD *)long long buf = 138412546;
      id v23 = v18;
      __int16 v24 = 2112;
      uint64_t v25 = v14;
      _os_log_impl(&dword_182959000, v17, OS_LOG_TYPE_DEFAULT, "Error creating env variables-tempURL: %@, containerPath: %@", buf, 0x16u);
    }
    uint64_t v15 = 0;
  }
  free(v9);

  if (!v15) {
LABEL_14:
  }
    uint64_t v15 = MEMORY[0x1E4F1CC08];

  return v15;
}

void OUTLINED_FUNCTION_1_5(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x20u);
}

void _LSGetNodeTypeCreatorInfo(uint64_t a1, void *a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  id v9 = a2;
  if (a3 && *(void *)a3)
  {
    *a4 = *(_DWORD *)(*(void *)a3 + 192);
LABEL_9:
    *a5 = 0;
    goto LABEL_10;
  }
  if (a1
    && _LSGetBundleClassForNode(a1, v9) == 2
    && (uint64_t v11 = 0, !_LSBundleFindWithNode(a1, v9, 0, &v11)))
  {
    uint64_t v10 = v11;
    *a4 = *(_DWORD *)(v11 + 192);
    *a5 = 0;
    if (a3) {
      *(void *)a3 = v10;
    }
  }
  else if (([v9 getHFSType:a4 creator:a5 error:0] & 1) == 0)
  {
    *a4 = 0;
    goto LABEL_9;
  }
LABEL_10:
}

void sub_182A2C3A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSNodeIsAVCHDCollection(void *a1)
{
  return [a1 isAVCHDCollection];
}

BOOL _LSIsKnownExtensionInlineBuffer(uint64_t a1, uint64_t a2)
{
  BOOL v2 = 0;
  v4[20] = *MEMORY[0x1E4F143B8];
  if (a1 && a2)
  {
    if (*(uint64_t *)(a2 + 160) >= 1 && XCFBufInitWithCFStringInlineBuffer((uint64_t)v4, a2, 1))
    {
      BOOL v2 = CSStringBindingFindStringAndBindings() == 0;
      XCFBufDestroy((uint64_t)v4);
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t _LSGetBundleClassForExtensionNSString(void *a1)
{
  id v1 = a1;
  id v6 = v1;
  uint64_t v9 = 0;
  uint64_t v10 = [(__CFString *)v1 length];
  if (CFStringGetCharactersPtr(v1)) {
    CStringPtr = 0;
  }
  else {
    CStringPtr = CFStringGetCStringPtr(v1, 0x600u);
  }
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v8 = CStringPtr;
  uint64_t v3 = _LSGetBundleClassForExtensionInlineBuffer((uint64_t)v5);

  return v3;
}

void sub_182A2C550(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSBundleClassHasUnregisteredPersonality(int a1)
{
  if ((a1 - 9) >= 7) {
    char v1 = 0;
  }
  else {
    char v1 = 0x1000001000101uLL >> (8 * (a1 - 9));
  }
  return v1 & 1;
}

uint64_t _LSGetValidApplicationCategoryTypeSet()
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_lock((os_unfair_lock_t)&_LSGetValidApplicationCategoryTypeSet::lock);
  if (_LSGetValidApplicationCategoryTypeSet::categoryTypeSet) {
    goto LABEL_24;
  }
  if (!_LSCurrentProcessMayMapDatabase())
  {
    id v6 = +[_LSDService synchronousXPCProxyWithErrorHandler:]((uint64_t)_LSDReadService, __block_literal_global_21);
    uint64_t v15 = 0;
    __int16 v16 = (id *)&v15;
    uint64_t v17 = 0x3032000000;
    id v18 = __Block_byref_object_copy__15;
    long long v19 = __Block_byref_object_dispose__15;
    id v20 = 0;
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = ___LSGetValidApplicationCategoryTypeSet_block_invoke_71;
    v14[3] = &unk_1E522E040;
    void v14[4] = &v15;
    [v6 getApplicationCategoryIdentifiersSetWithCompletionHandler:v14];
    _LSGetValidApplicationCategoryTypeSet::categoryTypeSet = [v16[5] copy];
    _Block_object_dispose(&v15, 8);

    goto LABEL_24;
  }
  id v18 = 0;
  uint64_t v15 = 0;
  __int16 v16 = 0;
  LOBYTE(v17) = 0;
  +[_LSDServiceDomain defaultServiceDomain]();
  id v0 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  char v1 = (void **)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v15, v0, 0);

  if (v1)
  {
    int v23 = 0;
    if (_UTGetActiveTypeForCFStringIdentifier(*v1, @"public.app-category", &v23))
    {
      CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFMutableSetRef Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, (const CFSetCallBacks *)&kXCFCaseInsensitiveStringSetCallBacks);
      if (!Mutable)
      {
        uint64_t v12 = [MEMORY[0x1E4F28B00] currentHandler];
        uint64_t v13 = [NSString stringWithUTF8String:"CFSetRef _LSGetValidApplicationCategoryTypeSet()"];
        [v12 handleFailureInFunction:v13 file:@"LSCore.mm" lineNumber:943 description:@"Failed to allocate CFMutableSet for category types."];
      }
      id v4 = *v1;
      int v5 = v23;
      v21[0] = MEMORY[0x1E4F143A8];
      v21[1] = 3321888768;
      void v21[2] = ___LSGetValidApplicationCategoryTypeSet_block_invoke;
      v21[3] = &__block_descriptor_48_ea8_40c27_ZTS10CFReleaserIP7__CFSetE_e41_v36__0I8r____IIIIiII_8I_IIIIIIII_12q20_28l;
      void v21[4] = v1;
      CFTypeRef cf = Mutable;
      if (Mutable) {
        CFRetain(Mutable);
      }
      _UTTypeSearchConformingTypesWithBlock(v4, v5, -1, 0, (uint64_t)v21);
      CFSetRemoveValue(Mutable, @"public.app-category");
      _LSGetValidApplicationCategoryTypeSet::categoryTypeSet = (uint64_t)CFSetCreateCopy(v2, Mutable);
      if (cf) {
        CFRelease(cf);
      }
      CFTypeRef cf = 0;
      if (Mutable) {
        CFRelease(Mutable);
      }
      goto LABEL_20;
    }
    id v7 = _LSDefaultLog();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136446466;
      uint64_t v25 = "CFSetRef _LSGetValidApplicationCategoryTypeSet()";
      __int16 v26 = 2114;
      uint64_t v27 = @"public.app-category";
      _os_log_impl(&dword_182959000, v7, OS_LOG_TYPE_DEFAULT, "%{public}s: unable to get info for type \"%{public}@\"", buf, 0x16u);
    }
  }
  else
  {
    id v7 = _LSDefaultLog();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = LaunchServices::Database::Context::error((id *)&v15);
      _LSGetValidApplicationCategoryTypeSet_cold_1(v8, buf, v7);
    }
  }

LABEL_20:
  if (v15 && (_BYTE)v17) {
    _LSContextDestroy(v15);
  }
  uint64_t v9 = v16;
  uint64_t v15 = 0;
  __int16 v16 = 0;

  LOBYTE(v17) = 0;
  uint64_t v10 = v18;
  id v18 = 0;

LABEL_24:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LSGetValidApplicationCategoryTypeSet::lock);
  return _LSGetValidApplicationCategoryTypeSet::categoryTypeSet;
}

void sub_182A2C974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,CFTypeRef cf)
{
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a15);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_ea8_40c27_ZTS10CFReleaserIP7__CFSetE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 40);
  *(void *)(a1 + 40) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_ea8_40c27_ZTS10CFReleaserIP7__CFSetE(uint64_t a1)
{
  CFAllocatorRef v2 = *(const void **)(a1 + 40);
  if (v2) {
    CFRelease(v2);
  }
  *(void *)(a1 + 40) = 0;
}

id LaunchServices::Database::Context::error(id *this)
{
  +[_LSDServiceDomain defaultServiceDomain]();
  CFAllocatorRef v2 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  uint64_t v3 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)this, v2, 0);

  if (v3) {
    id v4 = 0;
  }
  else {
    id v4 = this[3];
  }

  return v4;
}

void sub_182A2CB70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A2CBD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A2CC68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSCopyApplicationCategoriesForNodeWithDefaultIdentifierProvider(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a3;
  CFBooleanRef propertyValueTypeRefPtr = 0;
  CFURLRef v7 = (const __CFURL *)[v5 URL];
  if (!CFURLCopyResourcePropertyForKey(v7, (CFStringRef)*MEMORY[0x1E4F1D670], &propertyValueTypeRefPtr, 0))
  {
    uint64_t v19 = 4294967253;
    goto LABEL_25;
  }
  if (!propertyValueTypeRefPtr || !CFBooleanGetValue(propertyValueTypeRefPtr))
  {
    uint64_t v19 = 4294956485;
    goto LABEL_25;
  }
  id v21 = 0;
  uint64_t v8 = v6[2](v6, v5, &v21);
  id v9 = v21;
  CFArrayRef v10 = v8;
  CFArrayRef v11 = v10;
  if (v10)
  {
  }
  else
  {
    uint64_t v19 = _LSGetOSStatusFromNSError(v9);

    if (v19 == -1427)
    {
      uint64_t v19 = 0;
      *a2 = CFArrayCreate(0, 0, 0, MEMORY[0x1E4F1D510]);
      goto LABEL_25;
    }
    if (v19) {
      goto LABEL_25;
    }
  }
  CFSetRef valid = (const __CFSet *)_LSGetValidApplicationCategoryTypeSet();
  if (valid)
  {
    CFIndex Count = CFArrayGetCount(v11);
    if (Count >= 1)
    {
      CFArrayRef MutableCopy = 0;
      CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      unint64_t v16 = Count + 1;
      do
      {
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v11, v16 - 2);
        if (!CFSetContainsValue(valid, ValueAtIndex))
        {
          if (!MutableCopy) {
            CFArrayRef MutableCopy = CFArrayCreateMutableCopy(v15, 0, v11);
          }
          CFArrayRemoveValueAtIndex(MutableCopy, v16 - 2);
        }
        --v16;
      }
      while (v16 > 1);
      if (MutableCopy)
      {
        CFArrayRef Copy = CFArrayCreateCopy(v15, MutableCopy);
        if (v11) {
          CFRelease(v11);
        }
        CFRelease(MutableCopy);
        if (!Copy) {
          goto LABEL_18;
        }
LABEL_20:
        *a2 = CFRetain(Copy);
        CFRelease(Copy);
        uint64_t v19 = 0;
        goto LABEL_25;
      }
    }
  }
  CFArrayRef Copy = v11;
  if (v11) {
    goto LABEL_20;
  }
LABEL_18:
  uint64_t v19 = 0;
  *a2 = 0;
LABEL_25:

  return v19;
}

void sub_182A2CE94(_Unwind_Exception *a1)
{
  CFRelease(v4);
  if (v3) {
    CFRelease(v3);
  }

  _Unwind_Resume(a1);
}

uint64_t _LSCopyInfoForNode(LSContext *a1, void *a2, int a3, int *a4)
{
  id v7 = a2;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  *((void *)a4 + 1) = 0;
  *(void *)a4 = 0;
  a4[4] = 0;
  if (!a1 && a3 != 64)
  {
    uint64_t v8 = _LSContextInit(&v40);
    if (v8)
    {
      id v9 = 0;
      goto LABEL_23;
    }
    a1 = (LSContext *)&v40;
  }
  id v38 = 0;
  id v9 = [v7 nameWithError:&v38];
  id v10 = v38;
  CFArrayRef v11 = v10;
  if (v9)
  {
  }
  else
  {
    uint64_t v8 = _LSGetOSStatusFromNSError(v10);

    if (v8) {
      goto LABEL_21;
    }
  }
  _CFGetPathExtensionRangesFromPathComponent();
  if (a3)
  {
    v12.id location = range.location;
    if (range.location != -1)
    {
      v12.CFIndex length = range.length;
      if (range.length >= 1) {
        *(void *)(a4 + 3) = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v9, v12);
      }
    }
  }
  if ([v7 isHidden]) {
    *a4 |= 0x40u;
  }
  if ((a3 & 0x54) != 0)
  {
    v32[0] = 0;
    if ([v7 getResourceValue:v32 forKey:*MEMORY[0x1E4F1C608] options:1 error:0]
      && [v32[0] BOOLValue])
    {
      *a4 |= 0x100000u;
    }
  }
  if (a3 == 64) {
    goto LABEL_20;
  }
  int v14 = _LSGetBundleClassForNode((uint64_t)a1, v7);
  int v15 = v14;
  if (v14) {
    BOOL v16 = v14 == 3;
  }
  else {
    BOOL v16 = 1;
  }
  int v17 = !v16;
  if (![v7 isDirectory])
  {
    if ([v7 isSymbolicLink])
    {
      int v19 = *a4 | 0x30;
      goto LABEL_64;
    }
    if ([v7 isAliasFile])
    {
      int v23 = *a4;
      int v24 = 17;
    }
    else
    {
      int v23 = *a4;
      if (v15 != 2)
      {
        int v19 = v23 | 1;
LABEL_64:
        *a4 = v19;
        memset(v37, 63, sizeof(v37));
        [v7 getHFSType:&v37[1] creator:v37 error:0];
        if ((a3 & 0x14) != 0 && (*(unsigned char *)a4 & 0x10) == 0 && [v7 isExecutable])
        {
          BOOL v26 = (v37[1] == 1061109567 || v37[1] == 0) && range.length == 0;
          if (v26 || v15)
          {
            *a4 |= 0x2000u;
          }
          else
          {
            LODWORD(v32[0]) = 0;
            v32[1] = 0;
            int v33 = 0;
            id v35 = 0;
            id v36 = 0;
            uint64_t v34 = 0;
            if (_LSGetBindingForNodeOrSchemeOrUTI((int)a1, v7, 0, 0, 0, -1, 0, 2, (uint64_t)v32)
              || !v34)
            {
              *a4 |= 0x2000u;
            }
          }
        }
        if ((a3 & 2) != 0)
        {
          a4[1] = v37[1];
          a4[2] = v37[0];
        }
        if ((a3 & 0x18) != 0 && (*a4 & 4) != 0)
        {
          uint64_t v27 = v39;
          if (a1 && !v39)
          {
            _LSFindOrRegisterBundleNode(a1, v7, 0, (a1 == (LSContext *)&v40) << 25, 0, 0, &v39);
            uint64_t v27 = v39;
          }
          if (v27)
          {
            unsigned int plistContentFlags = v27->_plistContentFlags;
            *a4 |= (_LSBundleDataGetUnsupportedFormatFlag() | plistContentFlags) & 0x600F80;
            int v29 = _LSGetItemInfoArchFlagsForBundle(v39);
          }
          else
          {
            int v29 = 0x400000;
          }
          *a4 |= v29;
        }
        goto LABEL_20;
      }
      int v24 = 5;
    }
    int v19 = v23 | v24;
    goto LABEL_64;
  }
  *a4 |= 8u;
  if ([v7 isVolume])
  {
    if ((a3 & 0x14) != 0)
    {
      uint64_t v8 = 0;
      int v18 = *a4 | 0x1000;
LABEL_34:
      *a4 = v18;
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if ((a3 & 0x3E) == 0) {
    goto LABEL_20;
  }
  if (_LSNodeIsPackageCommon(a1, v7, 1, 0)) {
    *a4 |= 2u;
  }
  if ((a3 & 2) != 0 && (*(unsigned char *)a4 & 2) != 0)
  {
    if (v39) {
      int v20 = 0;
    }
    else {
      int v20 = v17;
    }
    if (a1 && v20) {
      _LSFindOrRegisterBundleNode(a1, v7, 0, (a1 == (LSContext *)&v40) << 25, 0, 0, &v39);
    }
    _LSGetNodeTypeCreatorInfo((uint64_t)a1, v7, (uint64_t)&v39, a4 + 1, a4 + 2);
  }
  if ((a3 & 0x3C) == 0) {
    goto LABEL_20;
  }
  uint64_t v8 = 0;
  if ((*a4 & 2) != 0 && v15 == 2)
  {
    *a4 |= 4u;
    if ((a3 & 0x18) != 0)
    {
      id v21 = v39;
      if (a1 && !v39)
      {
        _LSFindOrRegisterBundleNode(a1, v7, 0, (a1 == (LSContext *)&v40) << 25, 0, 0, &v39);
        id v21 = v39;
      }
      if (v21)
      {
        unsigned int v22 = v21->_plistContentFlags;
        *a4 |= (_LSBundleDataGetUnsupportedFormatFlag() | v22) & 0x600F80;
        uint64_t v8 = 0;
        int v18 = *a4 | _LSGetItemInfoArchFlagsForBundle(v39);
        goto LABEL_34;
      }
      CFURLRef v30 = [v7 URL];
      CFDictionaryRef v31 = CFBundleCopyInfoDictionaryInDirectory(v30);

      *a4 |= _LSGetApplicationFlagsFromPlist(v31, v7, 1, 0, 0, 0);
      if (v31) {
        CFRelease(v31);
      }
    }
LABEL_20:
    uint64_t v8 = 0;
  }
LABEL_21:
  if (v40) {
    _LSContextDestroy(&v40);
  }
LABEL_23:

  return v8;
}

void sub_182A2D464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

uint64_t _LSGetItemInfoArchFlagsForBundle(const LSBundleData *a1)
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000;
  int v7 = 0;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = ___ZL32_LSGetItemInfoArchFlagsForBundlePK12LSBundleData_block_invoke;
  v3[3] = &unk_1E522D750;
  v3[4] = &v4;
  _LSEnumerateSliceMask(a1->base._sliceMask, v3);
  uint64_t v1 = *((unsigned int *)v5 + 6);
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_182A2D574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _LSGetApplicationFlagsFromPlist(const __CFDictionary *a1, void *a2, int a3, int a4, int a5, unsigned char *a6)
{
  id v11 = a2;
  if (a1)
  {
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (TypeID == CFGetTypeID(a1))
    {
      if (CFDictionaryGetCount(a1))
      {
        if (_LSGetBooleanFromDict(a1, @"LSRequiresClassic"))
        {
          unsigned int v13 = 256;
        }
        else if (_LSGetBooleanFromDict(a1, @"LSRequiresCarbon"))
        {
          unsigned int v13 = 128;
        }
        else if (_LSGetBooleanFromDict(a1, @"LSPrefersCarbon"))
        {
          unsigned int v13 = 640;
        }
        else if (_LSGetBooleanFromDict(a1, @"LSPrefersClassic"))
        {
          unsigned int v13 = 1152;
        }
        else if (a4)
        {
          unsigned int v13 = 640;
        }
        else
        {
          unsigned int v13 = 128;
        }
        if (CFDictionaryContainsKey(a1, @"AMCustomServiceTypes")) {
          uint64_t v15 = v13 | 0x20000;
        }
        else {
          uint64_t v15 = v13;
        }
        if (!a6) {
          goto LABEL_16;
        }
LABEL_15:
        *a6 = 0;
        goto LABEL_16;
      }
    }
  }
  if (a5) {
    unsigned int v14 = 256;
  }
  else {
    unsigned int v14 = 128;
  }
  if (a3) {
    unsigned int v14 = 0;
  }
  if (a4) {
    uint64_t v15 = 640;
  }
  else {
    uint64_t v15 = v14;
  }
  if (a6) {
    goto LABEL_15;
  }
LABEL_16:

  return v15;
}

void sub_182A2D6DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL _LSGetItemInfoFlagsForNode(LSContext *a1, void *a2, _DWORD *a3, void *a4)
{
  id v7 = a2;
  if (v7)
  {
    if (a3) {
      goto LABEL_3;
    }
  }
  else
  {
    id v10 = [MEMORY[0x1E4F28B00] currentHandler];
    id v11 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL _LSGetItemInfoFlagsForNode(LSContext *, FSNode *__strong, LSItemInfoFlags *, NSError *__autoreleasing *)");
    [v10 handleFailureInFunction:v11, @"LSCore.mm", 1530, @"Invalid parameter not satisfying: %@", @"inNode != nil" file lineNumber description];

    if (a3) {
      goto LABEL_3;
    }
  }
  CFRange v12 = [MEMORY[0x1E4F28B00] currentHandler];
  unsigned int v13 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL _LSGetItemInfoFlagsForNode(LSContext *, FSNode *__strong, LSItemInfoFlags *, NSError *__autoreleasing *)");
  [v12 handleFailureInFunction:v13, @"LSCore.mm", 1531, @"Invalid parameter not satisfying: %@", @"outFlags != NULL" file lineNumber description];

LABEL_3:
  v14[0] = 0;
  v14[1] = 0;
  int v15 = 0;
  int v8 = _LSCopyInfoForNode(a1, v7, 4, (int *)v14);
  if (v8)
  {
    if (a4)
    {
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], v8, (uint64_t)"_LSGetItemInfoFlagsForNode", 1539, 0);
      *a4 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    *a3 = v14[0];
  }

  return v8 == 0;
}

void sub_182A2D880(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSCanBundleHandleNodeOrSchemeOrUTI(int a1, int a2, void *a3, LaunchServices::BindingEvaluator *this, LaunchServices::BindingEvaluator *a5, int a6)
{
  int v9 = 0;
  uint64_t v10 = 0;
  int v11 = 0;
  id v13 = 0;
  id v14 = 0;
  uint64_t v12 = 0;
  if (_LSGetBindingForNodeOrSchemeOrUTI(a1, a3, this, a5, a2, a6, 0, 80046, (uint64_t)&v9))
  {
    uint64_t v7 = 0;
  }
  else if (v11)
  {
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 0;
    if (a3 && v10) {
      uint64_t v7 = (*(_DWORD *)(v10 + 172) >> 28) & 1;
    }
  }

  return v7;
}

void sub_182A2D984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

uint64_t _LSCopySniffedExtensionAndTypeIdentifierForURL()
{
  id v0 = (const void *)_CFBundleCopyFileTypeForFileURL();
  if (v0) {
    CFRelease(v0);
  }
  return 0;
}

__CFSet *_LSCopyPackageExtensions(LSContext *a1)
{
  CFAllocatorRef v2 = a1->db;
  CFMutableSetRef Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D548]);
  if (Mutable)
  {
    CFArrayRef v4 = (const __CFArray *)CSStringBindingCopyCFStrings();
    CFArrayRef v5 = v4;
    if (v4)
    {
      CFIndex Count = CFArrayGetCount(v4);
      if (Count >= 1)
      {
        CFIndex v7 = 0;
        do
        {
          CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v5, v7);
          if (_LSIsPackageExtension(a1, 1, ValueAtIndex))
          {
            int v9 = CFArrayGetValueAtIndex(v5, v7);
            CFSetAddValue(Mutable, v9);
          }
          ++v7;
        }
        while (Count != v7);
      }
      CFRelease(v5);
    }
    if (CFSetGetCount(Mutable) < 1)
    {
      CFRelease(Mutable);
      CFMutableSetRef Mutable = 0;
    }
    else
    {
      CFSetAddValue(Mutable, @"app");
      CFSetAddValue(Mutable, @"service");
    }
  }

  return Mutable;
}

void sub_182A2DB00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSSetKernelPackageExtensions()
{
  CFArrayRef v0 = _LSCopyPackageExtensionsUnion();
  if (v0)
  {
    CFArrayRef v1 = v0;
    CFIndex Count = CFArrayGetCount(v0);
    if (Count >= 1)
    {
      CFIndex v3 = Count;
      pthread_rwlock_wrlock(&packageExtensionsLock);
      if (lastPackageExtensions) {
        CFRelease((CFTypeRef)lastPackageExtensions);
      }
      lastPackageExtensions = (uint64_t)CFRetain(v1);
      pthread_rwlock_unlock(&packageExtensionsLock);
      CFIndex v4 = 0;
      for (CFIndex i = 0; i != v3; ++i)
      {
        CFIndex usedBufLen = 0;
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v1, i);
        v18.CFIndex length = CFStringGetLength(ValueAtIndex);
        v18.id location = 0;
        CFIndex Bytes = CFStringGetBytes(ValueAtIndex, v18, 0x8000100u, 0, 0, 0, 0, &usedBufLen);
        CFIndex v8 = usedBufLen;
        if (usedBufLen <= v4) {
          CFIndex v8 = v4;
        }
        if (Bytes) {
          CFIndex v4 = v8;
        }
      }
      CFIndex v9 = v4 + 1;
      uint64_t v10 = malloc_type_malloc((v4 + 1) * v3, 0xC7446644uLL);
      if (v10)
      {
        int v11 = v10;
        CFIndex v12 = 0;
        id v13 = (char *)v10;
        while (1)
        {
          CFStringRef v14 = (const __CFString *)CFArrayGetValueAtIndex(v1, v12);
          if (!CFStringGetCString(v14, v13, v9, 0x8000100u)) {
            break;
          }
          ++v12;
          v13 += v9;
          if (v3 == v12)
          {
            CFIndex usedBufLen = (CFIndex)v11;
            int v16 = v3;
            int v17 = v9;
            fsctl("/", 0x80104102uLL, &usedBufLen, 0);
            break;
          }
        }
        free(v11);
      }
    }
    CFRelease(v1);
  }
}

CFArrayRef _LSCopyPackageExtensionsUnion(void)
{
  v3.db = 0;
  if (_LSContextInit((id *)&v3.db))
  {
    CFArrayRef v0 = 0;
  }
  else
  {
    CFArrayRef v1 = _LSCopyPackageExtensions(&v3);
    if (v1)
    {
      CFArrayRef v0 = XCFArrayCreateWithSet((const __CFAllocator *)*MEMORY[0x1E4F1CF80], v1, MEMORY[0x1E4F1D510]);
      CFRelease(v1);
    }
    else
    {
      CFArrayRef v0 = 0;
    }
    _LSContextDestroy((void **)&v3.db);
  }

  return v0;
}

void sub_182A2DD24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

CFArrayRef _LSCopyKernelPackageExtensionsAsLSD()
{
  if (!pthread_rwlock_tryrdlock(&packageExtensionsLock))
  {
    if (lastPackageExtensions)
    {
      CFTypeRef v1 = CFRetain((CFTypeRef)lastPackageExtensions);
      pthread_rwlock_unlock(&packageExtensionsLock);
      if (v1) {
        return (CFArrayRef)v1;
      }
    }
    else
    {
      pthread_rwlock_unlock(&packageExtensionsLock);
    }
  }

  return _LSCopyPackageExtensionsUnion();
}

uint64_t ___ZL32_LSGetItemInfoArchFlagsForBundlePK12LSBundleData_block_invoke(uint64_t result, int a2)
{
  if (a2 > 16777222)
  {
    if (a2 == 16777223)
    {
      int v2 = 0x10000000;
    }
    else
    {
      if (a2 != 16777234) {
        return result;
      }
      int v2 = 0x8000000;
    }
  }
  else if (a2 == 7)
  {
    int v2 = 0x4000000;
  }
  else
  {
    if (a2 != 18) {
      return result;
    }
    int v2 = 0x2000000;
  }
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) |= v2;
  return result;
}

void _LSServer_SetDatabaseExecutionContext(id obj)
{
}

uint64_t _LSSetLocalDatabaseIfNewer(void *a1)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  int v2 = a1;
  os_unfair_recursive_lock_lock_with_options();
  LSSessionKey sessionKey = v2->sessionKey;
  CFIndex v4 = (id *)_LSGetSession(sessionKey);
  id v5 = v4[3];
  if (!v5) {
    goto LABEL_7;
  }
  uint64_t v6 = v5;
  id v7 = v4[3];
  CFIndex v8 = _LSDatabaseGetCacheGUID();
  _LSDatabaseGetCacheGUID();
  id v1 = (id)objc_claimAutoreleasedReturnValue();
  int v9 = [v8 isEqual:v1];

  if (!v9)
  {
LABEL_7:
    CFStringRef v14 = _LSDatabaseGetLog();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      int v17 = _LSDatabaseGetCacheGUID();
      id v18 = v4[3];
      if (v18)
      {
        id v1 = v4[3];
        _LSDatabaseGetCacheGUID();
        int v19 = (__CFString *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        int v19 = @"(no db)";
      }
      *(_DWORD *)long long buf = 138412546;
      *(void *)&uint8_t buf[4] = v17;
      *(_WORD *)&unsigned char buf[12] = 2112;
      *(void *)&buf[14] = v19;
      _os_log_debug_impl(&dword_182959000, v14, OS_LOG_TYPE_DEBUG, "Database with GUID %@ does not match existing database GUID %@", buf, 0x16u);
      if (v18)
      {
      }
    }
    goto LABEL_8;
  }
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v22 = 0u;
  memset(buf, 0, sizeof(buf));
  _LSDatabaseGetHeader(buf);
  unint64_t v10 = v31;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v22 = 0u;
  memset(buf, 0, sizeof(buf));
  _LSDatabaseGetHeader(buf);
  if (v10 <= (unint64_t)v31)
  {
    CFStringRef v14 = _LSDatabaseGetLog();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v22 = 0u;
      memset(buf, 0, sizeof(buf));
      _LSDatabaseGetHeader(buf);
      uint64_t v16 = v31;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v22 = 0u;
      memset(buf, 0, sizeof(buf));
      _LSDatabaseGetHeader(buf);
      _LSSetLocalDatabaseIfNewer_cold_2((uint64_t)buf, (uint64_t)v20, v16);
    }
LABEL_8:

    uint64_t v13 = 0;
    goto LABEL_9;
  }
  int v11 = _LSDatabaseGetLog();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v22 = 0u;
    memset(buf, 0, sizeof(buf));
    _LSDatabaseGetHeader(buf);
    uint64_t v12 = v31;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v22 = 0u;
    memset(buf, 0, sizeof(buf));
    _LSDatabaseGetHeader(buf);
    _LSSetLocalDatabaseIfNewer_cold_1((uint64_t)buf, (uint64_t)v20, v12);
  }

  LSSession::setDatabase((LSSession *)v4, v2);
  uint64_t v13 = 1;
LABEL_9:
  os_unfair_recursive_lock_unlock();

  return v13;
}

void sub_182A2E1CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSDatabaseHandleUnitExhaustion(_LSDatabase *a1, unsigned int a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = _CSStoreCopyTableName();
  id v5 = a1->node;
  uint64_t v6 = [FSNode alloc];
  id v7 = [(FSNode *)v5 URL];
  CFIndex v8 = objc_msgSend(NSString, "stringWithFormat:", @"%ld.exhausted", a2);
  int v9 = [v7 URLByAppendingPathExtension:v8];
  id v28 = 0;
  unint64_t v10 = [(FSNode *)v6 initWithURL:v9 flags:0 error:&v28];
  id v11 = v28;

  if (v10)
  {
    uint64_t v12 = _LSDatabaseGetLog();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.__pn_.__r_.__value_.__l.__data_) = 138543874;
      *(std::string::size_type *)((char *)buf.__pn_.__r_.__value_.__r.__words + 4) = v4;
      WORD2(buf.__pn_.__r_.__value_.__r.__words[1]) = 2114;
      *(std::string::size_type *)((char *)&buf.__pn_.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v5;
      HIWORD(buf.__pn_.__r_.__value_.__r.__words[2]) = 2114;
      uint64_t v33 = v10;
      _os_log_error_impl(&dword_182959000, v12, OS_LOG_TYPE_ERROR, "Unit exhaustion in table %{public}@; moving database %{public}@ -> %{public}@",
        (uint8_t *)&buf,
        0x20u);
    }

    id v27 = v11;
    BOOL v13 = [(FSNode *)v5 getFileSystemRepresentation:&buf error:&v27];
    id v14 = v27;

    if (v13)
    {
      id v26 = v14;
      BOOL v15 = [(FSNode *)v10 getFileSystemRepresentation:&__to error:&v26];
      uint64_t v16 = (std::__fs::filesystem::path *)v26;

      if (v15)
      {
        rename(&buf, &__to, v17);
        if (!v18)
        {
          int v20 = _LSDatabaseGetLog();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long v29 = 136446210;
            p_to = &__to;
            _os_log_impl(&dword_182959000, v20, OS_LOG_TYPE_DEFAULT, "moved database to %{public}s", v29, 0xCu);
          }
          goto LABEL_12;
        }
        int v19 = *__error();
        int v20 = _LSDatabaseGetLog();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long v29 = 67109120;
          LODWORD(p_to) = v19;
          id v21 = "rename() failed: %{darwin.errno}d";
          long long v22 = v20;
          uint32_t v23 = 8;
LABEL_11:
          _os_log_error_impl(&dword_182959000, v22, OS_LOG_TYPE_ERROR, v21, v29, v23);
        }
      }
      else
      {
        int v20 = _LSDatabaseGetLog();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long v29 = 138412290;
          p_to = v16;
          id v21 = "couldn't get file system representation of database moved-aside path: %@";
          long long v22 = v20;
          uint32_t v23 = 12;
          goto LABEL_11;
        }
      }
LABEL_12:

      goto LABEL_13;
    }
    long long v25 = _LSDatabaseGetLog();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__to.__pn_.__r_.__value_.__l.__data_) = 138412290;
      *(std::string::size_type *)((char *)__to.__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v14;
      _os_log_error_impl(&dword_182959000, v25, OS_LOG_TYPE_ERROR, "couldn't get file system representation of database path: %@", (uint8_t *)&__to, 0xCu);
    }
  }
  else
  {
    long long v24 = _LSDatabaseGetLog();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.__pn_.__r_.__value_.__l.__data_) = 138412290;
      *(std::string::size_type *)((char *)buf.__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
      _os_log_error_impl(&dword_182959000, v24, OS_LOG_TYPE_ERROR, "couldn't get database aside node: %@", (uint8_t *)&buf, 0xCu);
    }
  }
LABEL_13:
  _LSSetCrashMessage((NSString *)[[NSString alloc] initWithFormat:@"Unit exhaustion in table %@", v4]);
  abort();
}

void sub_182A2E5B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A2E728(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A2E814(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSDatabaseSetSequenceNumber(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  long long v5 = 0u;
  long long v6 = 0u;
  memset(v4, 0, sizeof(v4));
  _LSDatabaseGetHeader(v4);
  *(void *)&long long v5 = a2;
  _LSDatabaseSetHeader(a1);
}

void _LSDatabaseSetHeader(uint64_t a1)
{
  if (a1)
  {
    if (!_CSStoreWriteToHeader())
    {
      id v1 = _LSDatabaseGetLog();
      if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
        _LSDatabaseSetHeader();
      }
    }
  }
}

void sub_182A2E994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t _LSDatabaseSessionSetSeedingInProgress(char a1)
{
  os_unfair_recursive_lock_lock_with_options();
  LSSessionKey v2 = (LSSessionKey)_LSServer_SelfSessionKey();
  uint64_t v3 = _LSGetSession(v2);
  *(unsigned char *)(v3 + 20) = *(unsigned char *)(v3 + 20) & 0xFE | a1;

  return os_unfair_recursive_lock_unlock();
}

uint64_t _LSDatabaseSessionSetSeedingDueToManualRebuild(int a1)
{
  os_unfair_recursive_lock_lock_with_options();
  LSSessionKey v2 = (LSSessionKey)_LSServer_SelfSessionKey();
  uint64_t v3 = _LSGetSession(v2);
  if (a1) {
    char v4 = 2;
  }
  else {
    char v4 = 0;
  }
  *(unsigned char *)(v3 + 20) = *(unsigned char *)(v3 + 20) & 0xFD | v4;

  return os_unfair_recursive_lock_unlock();
}

uint64_t _LSDatabaseGetSessionKey(uint64_t a1)
{
  return *(void *)(a1 + 1648);
}

void sub_182A2ED34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void LSDBHeader::GetCurrentModelCode(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:2];
  char v4 = (void *)MGCopyAnswer();
  if (v4) {
    [v3 addObject:v4];
  }

  long long v5 = (void *)MGCopyAnswer();
  if (v5) {
    [v3 addObject:v5];
  }

  id v6 = [v3 componentsJoinedByString:@"/"];
  if (v6) {
    MEMORY[0x18530E9D0](a1, [v6 UTF8String]);
  }
}

void sub_182A2EE64(_Unwind_Exception *a1)
{
  char v4 = v3;

  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

void LSDBHeader::GetCurrentCryptexVersion(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = _LSGetCurrentCryptexBuildVersionString();
  if (v3)
  {
    id v6 = v3;
    uint64_t v4 = [v3 UTF8String];
    if (v4) {
      long long v5 = (const char *)v4;
    }
    else {
      long long v5 = "";
    }
    MEMORY[0x18530E9D0](a1, v5);
    uint64_t v3 = v6;
  }
}

void sub_182A2EF28(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

void _LSDatabaseSetHeaderFlag(_LSDatabase *a1, int a2, int a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  long long v5 = a1;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  memset(v7, 0, sizeof(v7));
  _LSDatabaseGetHeader(v7);
  if (a3) {
    int v6 = DWORD2(v8) | a2;
  }
  else {
    int v6 = DWORD2(v8) & ~a2;
  }
  DWORD2(v8) = v6;
  _LSDatabaseSetHeader((uint64_t)v5);
}

void sub_182A2F118(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSDatabaseGetSeededSystemVersion()
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  memset(v10, 0, 112);
  memset(v9, 0, sizeof(v9));
  _LSDatabaseGetHeader(v9);
  v8[0] = *(_OWORD *)((char *)v9 + 8);
  v8[1] = *(_OWORD *)((char *)&v9[1] + 8);
  uint64_t v0 = _LSVersionNumberGetStringRepresentation(v8);
  if (v0) {
    uint64_t v1 = (__CFString *)v0;
  }
  else {
    uint64_t v1 = @"?";
  }
  LSSessionKey v2 = NSString;
  *(void *)int __dst = 0;
  uint64_t v12 = 0;
  strlcpy(__dst, v10, 0x10uLL);
  std::string::basic_string[abi:nn180100]<0>(__p, __dst);
  if (v7 >= 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  uint64_t v4 = [v2 stringWithFormat:@"%@ (%s)", v1, v3];
  if (v7 < 0) {
    operator delete(__p[0]);
  }

  return v4;
}

void sub_182A2F260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

id _LSDatabaseGetSeededCryptexVersion(_LSDatabase *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  memset(v10, 0, sizeof(v10));
  _LSDatabaseGetHeader(v10);
  v9[0] = *(_OWORD *)((char *)&v10[2] + 8);
  v9[1] = *(_OWORD *)((char *)&v10[3] + 8);
  uint64_t v1 = _LSVersionNumberGetStringRepresentation(v9);
  if (v1) {
    LSSessionKey v2 = (__CFString *)v1;
  }
  else {
    LSSessionKey v2 = @"?";
  }
  uint64_t v3 = NSString;
  *(void *)int __dst = 0;
  uint64_t v12 = 0;
  strlcpy(__dst, (const char *)&v10[4] + 8, 0x10uLL);
  std::string::basic_string[abi:nn180100]<0>(__p, __dst);
  if (v8 >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  long long v5 = [v3 stringWithFormat:@"%@ (%s)", v2, v4];
  if (v8 < 0) {
    operator delete(__p[0]);
  }

  return v5;
}

void sub_182A2F3C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

id _LSDatabaseGetSeededModelCode()
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  memset(v8, 0, sizeof(v8));
  memset(v7, 0, sizeof(v7));
  _LSDatabaseGetHeader(v7);
  memset(__dst, 0, sizeof(__dst));
  strlcpy((char *)__dst, v8, 0x40uLL);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)__dst);
  unint64_t v0 = v6;
  unsigned __int8 v1 = v6;
  if ((v6 & 0x80u) != 0) {
    unint64_t v0 = (unint64_t)__p[1];
  }
  if (!v0)
  {
    MEMORY[0x18530E9D0](__p, "?");
    unsigned __int8 v1 = v6;
  }
  if ((v1 & 0x80u) == 0) {
    LSSessionKey v2 = __p;
  }
  else {
    LSSessionKey v2 = (void **)__p[0];
  }
  uint64_t v3 = [NSString stringWithUTF8String:v2];
  if ((char)v6 < 0) {
    operator delete(__p[0]);
  }

  return v3;
}

void sub_182A2F518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_182A2F5D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t *_LSDatabaseCreateFromPersistentStore(char a1, _WORD *a2, void *a3)
{
  __int16 v23 = 0;
  unsigned __int8 v6 = (void *)MEMORY[0x18530F680]();
  char v7 = [(id)__LSDefaultsGetSharedInstance() dbRecoveryFileURL];
  int v8 = _LSDatabaseRecoveryFileExists(v7);

  if (v8)
  {
    long long v9 = _LSDatabaseGetLog();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      _LSDatabaseCreateFromPersistentStore_cold_3();
    }

    uint64_t v10 = 0;
    __int16 v23 = 4;
    if ((a1 & 4) == 0)
    {
LABEL_5:
      long long v11 = 0;
      id v12 = v10;
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v13 = [(id)__LSDefaultsGetSharedInstance() dbRecoveryFileURL];
    _LSDatabaseCreateRecoveryFile(v13);

    id v22 = 0;
    long long v14 = _LSDatabaseCreateFromPersistentStoreIgnoringRecoveryFile(a1, 0, &v23, &v22);
    id v15 = v22;
    uint64_t v10 = v15;
    if (v14)
    {
      id v12 = v15;
      long long v11 = v14;
      goto LABEL_15;
    }
    uint64_t v16 = _LSDatabaseGetLog();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      _LSDatabaseCreateFromPersistentStore_cold_2();
    }

    if ((a1 & 4) == 0) {
      goto LABEL_5;
    }
  }
  __int16 v21 = 0;
  id v20 = v10;
  long long v11 = _LSDatabaseCreateFromPersistentStoreIgnoringRecoveryFile(a1, 1, &v21, &v20);
  id v12 = v20;

  v23 |= v21;
  if (!v11)
  {
    int v17 = _LSDatabaseGetLog();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      _LSDatabaseCreateFromPersistentStore_cold_1();
    }
  }
LABEL_15:
  int v18 = [(id)__LSDefaultsGetSharedInstance() dbRecoveryFileURL];
  _LSDatabaseDeleteRecoveryFile(v18);

  if (v11)
  {
    if (a2) {
      *a2 = v23;
    }
  }
  else if (a3)
  {
    *a3 = v12;
  }

  return v11;
}

void sub_182A2F800(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSDatabaseRecoveryFileExists(void *a1)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  uint64_t result = [a1 getFileSystemRepresentation:v2 maxLength:1024];
  if (result) {
    return access(v2, 0) == 0;
  }
  return result;
}

void _LSDatabaseCreateRecoveryFile(void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if ([a1 getFileSystemRepresentation:v14 maxLength:1024])
  {
    int v1 = open_dprotected_np(v14, 2561, 4, 0, 436);
    int v2 = v1;
    if (v1 < 0)
    {
      BOOL v7 = *__error() == 17;
      int v8 = _LSDatabaseGetLog();
      long long v5 = v8;
      if (v7)
      {
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
          _LSDatabaseCreateRecoveryFile_cold_2();
        }
      }
      else if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      {
        long long v9 = __error();
        _LSDatabaseCreateRecoveryFile_cold_3((uint64_t)v14, v9, buf, v5);
      }
    }
    else
    {
      BOOL v3 = close(v1) == 0;
      uint64_t v4 = _LSDatabaseGetLog();
      long long v5 = v4;
      if (v3)
      {
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::__fs::filesystem::path buf = 136446466;
          long long v11 = "void _LSDatabaseCreateRecoveryFile(NSURL *__strong)";
          __int16 v12 = 2082;
          uint64_t v13 = v14;
          _os_log_impl(&dword_182959000, v5, OS_LOG_TYPE_DEFAULT, "%{public}s: Successfully created recovery file %{public}s", buf, 0x16u);
        }
      }
      else if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      {
        unsigned __int8 v6 = __error();
        _LSDatabaseCreateRecoveryFile_cold_1(v6, buf, v2, v5);
      }
    }
  }
}

void sub_182A2FA4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *_LSDatabaseCreateFromPersistentStoreIgnoringRecoveryFile(char a1, int a2, __int16 *a3, void *a4)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v33 = 0;
  int v8 = _LSGetStoreNode();
  long long v9 = v8;
  if (a2)
  {
    if ((a1 & 4) == 0)
    {
      uint64_t v10 = _LSDatabaseGetLog();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        _LSDatabaseCreateFromPersistentStoreIgnoringRecoveryFile();
      }

      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -50, (uint64_t)"_LSDatabaseCreateFromPersistentStoreIgnoringRecoveryFile", 1917, 0);
      __int16 v11 = 64;
      char v12 = 1;
      uint64_t v13 = 0;
      long long v14 = 0;
      id v15 = (id)objc_claimAutoreleasedReturnValue();
      if (!a4)
      {
LABEL_45:
        id v17 = v15;
        if (!a3) {
          goto LABEL_47;
        }
        goto LABEL_46;
      }
      goto LABEL_42;
    }
    id v32 = 0;
    long long v14 = _LSCreateEmptyStore(&v32);
    id v15 = v32;
    if (v14)
    {
      __int16 v11 = 1;
      goto LABEL_11;
    }
    __int16 v21 = _LSDatabaseGetLog();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
      _LSDatabaseCreateFromPersistentStoreIgnoringRecoveryFile();
    }

    uint64_t v13 = 0;
    long long v14 = 0;
    __int16 v11 = 64;
LABEL_41:
    char v12 = 1;
    if (!a4) {
      goto LABEL_45;
    }
    goto LABEL_42;
  }
  id v31 = 0;
  long long v14 = (const void *)_LSCreateStoreWithFileContents(v8, &v31);
  id v15 = v31;
  if (!v14)
  {
    int v18 = _LSDatabaseGetLog();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      _LSDatabaseCreateFromPersistentStoreIgnoringRecoveryFile();
    }

    if (_LSGetOSStatusFromNSError(v15) == -43)
    {
      uint64_t v13 = 0;
      long long v14 = 0;
      __int16 v11 = 8;
      goto LABEL_41;
    }
    id v15 = v15;
    id v22 = [v15 domain];
    uint64_t v23 = *MEMORY[0x1E4F28760];
    if ([v22 isEqualToString:*MEMORY[0x1E4F28760]])
    {
      if ([v15 code] == -9496)
      {

LABEL_40:
        uint64_t v13 = 0;
        long long v14 = 0;
        __int16 v11 = 16;
        goto LABEL_41;
      }
      BOOL v26 = [v15 code] == -9489;

      if (v26) {
        goto LABEL_40;
      }
    }
    else
    {
    }
    id v15 = v15;
    long long v24 = [v15 domain];
    if ([v24 isEqualToString:v23])
    {
      BOOL v25 = [v15 code] == -9493;

      uint64_t v13 = 0;
      long long v14 = 0;
      if (v25) {
        __int16 v11 = 128;
      }
      else {
        __int16 v11 = 256;
      }
    }
    else
    {

      uint64_t v13 = 0;
      long long v14 = 0;
      __int16 v11 = 256;
    }
    goto LABEL_41;
  }
  __int16 v11 = 0;
LABEL_11:
  uint64_t v16 = _LSServer_SelfSessionKey();
  id v30 = v15;
  uint64_t v13 = _LSDatabaseCreate(v9, v16, v14, &v30);
  id v17 = v30;

  uint64_t v33 = v13;
  if (v13)
  {
    if ((a1 & 2) == 0)
    {
      char v12 = 0;
      if (!a3) {
        goto LABEL_47;
      }
LABEL_46:
      *a3 = v11;
      goto LABEL_47;
    }
    id v20 = _LSDatabaseGetLog();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::__fs::filesystem::path buf = 138543362;
      id v35 = v13;
      _os_log_impl(&dword_182959000, v20, OS_LOG_TYPE_INFO, "Cleaning new database object %{public}@", buf, 0xCu);
    }

    _LSDatabaseClean((id *)&v33);
    char v12 = 0;
    uint64_t v13 = v33;
  }
  else
  {
    int v19 = _LSDatabaseGetLog();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      _LSDatabaseCreateFromPersistentStoreIgnoringRecoveryFile();
    }

    uint64_t v13 = 0;
    char v12 = 0;
    v11 |= 0x20u;
  }
  id v15 = v17;
  if (!a4) {
    goto LABEL_45;
  }
LABEL_42:
  if (v13) {
    goto LABEL_45;
  }
  id v17 = v15;
  uint64_t v13 = 0;
  *a4 = v17;
  if (a3) {
    goto LABEL_46;
  }
LABEL_47:
  id v27 = v13;
  id v28 = v27;
  if ((v12 & 1) == 0)
  {
    CFRelease(v14);
    id v28 = v33;
  }

  return v27;
}

void sub_182A2FE84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void _LSDatabaseDeleteRecoveryFile(void *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if ([v1 getFileSystemRepresentation:&__p maxLength:1024])
  {
    if (remove(&__p, v2) && *__error() != 2)
    {
      BOOL v3 = _LSDatabaseGetLog();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
      {
        uint64_t v4 = __error();
        _LSDatabaseDeleteRecoveryFile_cold_1((uint64_t)&__p, v4, (uint8_t *)&v5, v3);
      }
    }
    else
    {
      BOOL v3 = _LSDatabaseGetLog();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        int v5 = 136446210;
        p_p = &__p;
        _os_log_impl(&dword_182959000, v3, OS_LOG_TYPE_DEFAULT, "Successfully removed recovery file %{public}s", (uint8_t *)&v5, 0xCu);
      }
    }
  }
}

void sub_182A30028(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unsigned char *_LSDatabaseCreateCleanForTesting(void *a1)
{
  uint64_t result = _LSCreateEmptyStore(a1);
  if (result)
  {
    BOOL v3 = result;
    unsigned int v4 = _CFGetEUID();
    int v5 = _LSDatabaseCreate(0, v4, v3, a1);
    unsigned __int8 v6 = v5;
    CFRelease(v3);
    if (v5)
    {
      *((unsigned char *)v5 + 1664) |= 2u;
      _LSDatabaseClean((id *)&v6);
      uint64_t result = v6;
      *((unsigned char *)v6 + 1664) |= 2u;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_182A300E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

CFTypeRef _LSCreateEmptyStore(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v15 = 0;
  CFMutableSetRef Mutable = (const void *)CSStoreCreateMutable();
  if (!Mutable)
  {
    CFTypeRef v11 = 0;
    if (!a1) {
      goto LABEL_25;
    }
    goto LABEL_23;
  }
  memset(v20, 0, sizeof(v20));
  if (_CSStoreAddTable())
  {
    LSDBHeader::reset((LSDBHeader *)v20);
    if (_CSStoreWriteToHeader())
    {
      uint64_t v3 = 0;
      while (_CSStoreAddTable())
      {
        v3 += 16;
        if (v3 == 192)
        {
          int v4 = CSBindableKeyMapAddTable((uint64_t)Mutable, @"BindableKeyMap");
          if (v4)
          {
            _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], v4, (uint64_t)"_LSCreateEmptyStore", 595, 0);
            char v12 = 0;
            id v15 = (id)objc_claimAutoreleasedReturnValue();
          }
          else
          {
            for (uint64_t i = 0; i != 448; i += 32)
            {
              uint64_t v6 = *(void *)((char *)&kLSBindingInfo + i);
              int v7 = CSStringBindingStoreAddTable();
              if (v7)
              {
                int v18 = @"Table";
                uint64_t v19 = v6;
                char v12 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v19 forKeys:&v18 count:1];
                _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], v7, (uint64_t)"_LSCreateEmptyStore", 601, v12);
                id v15 = (id)objc_claimAutoreleasedReturnValue();

                goto LABEL_20;
              }
            }
            uint64_t v8 = (const char **)&off_1E522E0B8;
            unint64_t v9 = -6;
            while (1)
            {
              if (v9 >= 8)
              {
                uint64_t v10 = *v8;
                strlen(*v8);
                if (!_CSGetConstStringForCharacters()) {
                  break;
                }
              }
              v8 += 4;
              if (++v9 == 8)
              {
                CFTypeRef v11 = CFRetain(Mutable);
                goto LABEL_22;
              }
            }
            uint64_t v16 = @"BindingClass";
            char v12 = [NSString stringWithUTF8String:v10];
            id v17 = v12;
            uint64_t v13 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v17 forKeys:&v16 count:1];
            _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -10817, (uint64_t)"_LSCreateEmptyStore", 609, v13);
            id v15 = (id)objc_claimAutoreleasedReturnValue();
          }
LABEL_20:

          break;
        }
      }
    }
  }
  CFTypeRef v11 = 0;
LABEL_22:
  CFRelease(Mutable);
  if (a1)
  {
LABEL_23:
    if (!v11)
    {
      CFTypeRef v11 = 0;
      *a1 = v15;
    }
  }
LABEL_25:

  return v11;
}

void sub_182A30414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  CFRelease(v10);
  _Unwind_Resume(a1);
}

void _LSDatabaseClean(id *a1)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  kdebug_trace();
  id location = a1;
  id v53 = *a1;
  uint64_t v48 = MEMORY[0x1E4F143A8];
  uint64_t v49 = 3321888768;
  uint64_t v50 = ___ZL16_LSDatabaseCleanPU8__strongP11_LSDatabase_block_invoke;
  uint64_t v51 = &__block_descriptor_40_ea8_32c14_ZTS9LSContext_e19_v32__0I8r_v12I20_24l;
  id v52 = v53;
  _CSStoreEnumerateUnits();
  int v2 = _LSDatabaseGetLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::__fs::filesystem::path buf = 0;
    _os_log_impl(&dword_182959000, v2, OS_LOG_TYPE_DEFAULT, "Registering CoreTypes bundle", buf, 2u);
  }

  id v59 = @"ApplicationType";
  uint64_t v60 = @"Hidden";
  uint64_t v40 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v60 forKeys:&v59 count:1];
  int v3 = -[_LSDatabase isSeeded]((uint64_t)v53);
  int v4 = [[FSNode alloc] initWithFileSystemRepresentation:"/System/Library/CoreServices/MobileCoreTypes.bundle" flags:0 error:0];
  if (v4 && _LSFindOrRegisterBundleNode(&v53, v4, 0, v3 ^ 1 | 0x11000000u, v40, 0, 0))
  {
    int v5 = _LSDatabaseGetLog();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      _LSDatabaseClean();
    }
  }
  uint64_t v6 = _LSDatabaseGetLog();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::__fs::filesystem::path buf = 0;
    _os_log_impl(&dword_182959000, v6, OS_LOG_TYPE_DEFAULT, "Registering extension points", buf, 2u);
  }

  [(id)getEXEnumeratorClass() extensionPointDefinitionEnumerator];
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  obuint64_t j = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v7 = [obj countByEnumeratingWithState:&v44 objects:v58 count:16];
  if (v7)
  {
    uint64_t v42 = *(void *)v45;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v45 != v42) {
          objc_enumerationMutation(obj);
        }
        unint64_t v9 = *(void **)(*((void *)&v44 + 1) + 8 * i);
        uint64_t v10 = [v9 identifier];
        uint64_t v11 = [v9 platform];
        CFDictionaryRef v12 = [v9 SDKDictionary];
        uint64_t v13 = [v9 url];
        long long v14 = [FSNode alloc];
        id v43 = 0;
        id v15 = [(FSNode *)v14 initWithURL:v13 flags:8 error:&v43];
        id v16 = v43;
        if (!v15)
        {
          id v17 = _LSDatabaseGetLog();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::__fs::filesystem::path buf = 138543618;
            *(void *)&uint8_t buf[4] = v13;
            *(_WORD *)&unsigned char buf[12] = 2114;
            *(void *)&buf[14] = v16;
            _os_log_error_impl(&dword_182959000, v17, OS_LOG_TYPE_ERROR, "Failed to create node for framework %{public}@: %{public}@", buf, 0x16u);
          }
        }
        int v18 = _LSExtensionsLog();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)std::__fs::filesystem::path buf = 136315394;
          *(void *)&uint8_t buf[4] = "void _LSDatabaseClean(LSDatabaseHandle)";
          *(_WORD *)&unsigned char buf[12] = 2112;
          *(void *)&buf[14] = v9;
          _os_log_debug_impl(&dword_182959000, v18, OS_LOG_TYPE_DEBUG, "%s Registering extension point '%@'", buf, 0x16u);
        }

        if (([(id)__LSDefaultsGetSharedInstance() isServer] & 1) != 0
          || [(FSNode *)v15 canReadFromSandboxWithAuditToken:0])
        {
          uint64_t v19 = [NSString stringWithFormat:@"registering extension point %@ at URL %@", v10, v13, location];
          LSCrashMessage::LSCrashMessage((LSCrashMessage *)&v54, v19);

          int v20 = _LSRegisterFrameworkExtensionPointIfNecessary(v53, 0, v10, v11, v12, v13);
          if (v20)
          {
            uint64_t v21 = _LSDatabaseGetLog();
            if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)std::__fs::filesystem::path buf = 134218242;
              *(void *)&uint8_t buf[4] = v20;
              *(_WORD *)&unsigned char buf[12] = 2114;
              *(void *)&buf[14] = v13;
              _os_log_error_impl(&dword_182959000, v21, OS_LOG_TYPE_ERROR, "Error %ld registering extension points inside framework %{public}@", buf, 0x16u);
            }
          }
          LSCrashMessage::~LSCrashMessage((LSCrashMessage *)&v54);
        }
      }
      uint64_t v7 = [obj countByEnumeratingWithState:&v44 objects:v58 count:16];
    }
    while (v7);
  }

  id v22 = _LSDatabaseGetLog();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::__fs::filesystem::path buf = 0;
    _os_log_impl(&dword_182959000, v22, OS_LOG_TYPE_DEFAULT, "Done reregistering extension points", buf, 2u);
  }

  uint64_t v23 = _LSDatabaseGetLog();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::__fs::filesystem::path buf = 0;
    _os_log_impl(&dword_182959000, v23, OS_LOG_TYPE_DEFAULT, "Loading handler preferences", buf, 2u);
  }

  long long v24 = (LSHandlerPref *)v53;
  if (v53) {
    _LSDatabaseSetHeaderFlag((_LSDatabase *)v53, 1, 0);
  }
  BOOL v26 = (_LSDatabase *)LSHandlerPref::CopyHandlers(v24);
  if (v26)
  {
    LSHandlerPref::Load((LSHandlerPref *)v53, v26, v25);
    if (v53) {
      _LSDatabaseSetHeaderFlag((_LSDatabase *)v53, 1, 1);
    }
    CFRelease(v26);
  }
  id v27 = _LSDatabaseGetLog();
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::__fs::filesystem::path buf = 0;
    _os_log_impl(&dword_182959000, v27, OS_LOG_TYPE_DEFAULT, "Registering canonical names", buf, 2u);
  }

  id v28 = v53;
  long long v29 = _LSDatabaseGetLog();
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::__fs::filesystem::path buf = 0;
    _os_log_impl(&dword_182959000, v29, OS_LOG_TYPE_DEFAULT, "Registering canonical names", buf, 2u);
  }

  id v30 = (void *)MEMORY[0x18530F680]();
  id v31 = _LSDatabaseGetLog();
  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::__fs::filesystem::path buf = 0;
    _os_log_impl(&dword_182959000, v31, OS_LOG_TYPE_DEFAULT, "Registering framework bundle localized strings", buf, 2u);
  }

  id v32 = +[_LSStringLocalizer newFrameworkBundleLocalizer];
  id v33 = v28;
  id v34 = v32;
  uint64_t v54 = 0;
  id v55 = &v54;
  uint64_t v56 = 0x2020000000;
  uint64_t v57 = 0;
  *(void *)std::__fs::filesystem::path buf = MEMORY[0x1E4F143A8];
  *(void *)&uint8_t buf[8] = 3221225472;
  *(void *)&uint8_t buf[16] = ___ZL52_LSDatabaseRegisterCanonicalNamesFromStringLocalizerP11_LSDatabaseP18_LSStringLocalizer_block_invoke;
  id v66 = &unk_1E522E3D0;
  id v35 = v33;
  id v67 = v35;
  uint64_t v68 = &v54;
  [v34 enumerateLocalizedStringsUsingBlock:buf];
  if (v55[3])
  {
    uint64_t v36 = _LSDatabaseGetLog();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v37 = v55[3];
      id v38 = [v34 debugDescription];
      *(_DWORD *)uint64_t v61 = 134218242;
      uint64_t v62 = v37;
      __int16 v63 = 2114;
      id v64 = v38;
      _os_log_impl(&dword_182959000, v36, OS_LOG_TYPE_DEFAULT, "Registered %llu new canonical strings from string localizer %{public}@", v61, 0x16u);
    }
  }

  _Block_object_dispose(&v54, 8);

  if (([(id)__LSDefaultsGetSharedInstance() hasServer] & 1) == 0
    && ([(id)__LSDefaultsGetSharedInstance() isServer] & 1) == 0)
  {
    -[_LSDatabase setSeeded:]((uint64_t)v53, 1);
  }
  objc_storeStrong(location, v53);
  kdebug_trace();
}

void sub_182A30D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,void *a36,char a37)
{
  _Block_object_dispose(&a37, 8);
  _Unwind_Resume(a1);
}

void _LSDatabaseCommit(uint64_t a1)
{
  id v1 = [(id)__LSDefaultsGetSharedInstance() databaseUpdateNotificationNameForSessionKey:*(void *)(a1 + 1648)];
  int v2 = _LSDatabaseGetLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    _LSDatabaseCommit_cold_1();
  }

  LaunchServices::notifyd::NotifyToken::Post(v1, v3);
}

void sub_182A30F68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

time_t LSDBHeader::reset(LSDBHeader *this)
{
  *(_DWORD *)this = [(id)__LSDefaultsGetSharedInstance() currentSchemaVersion];
  *((_DWORD *)this + 1) = 208;
  *(_OWORD *)((char *)this + 8) = kLSVersionNumberNull;
  *(_OWORD *)((char *)this + 24) = *(_OWORD *)algn_182AF9270;
  *((void *)this + 11) = 0;
  std::string::basic_string[abi:nn180100]<0>(__p, "");
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  if (v7 >= 0) {
    int v2 = __p;
  }
  else {
    int v2 = (void **)__p[0];
  }
  strlcpy((char *)this + 96, (const char *)v2, 0x10uLL);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "");
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  if (v7 >= 0) {
    int v3 = __p;
  }
  else {
    int v3 = (void **)__p[0];
  }
  strlcpy((char *)this + 72, (const char *)v3, 0x10uLL);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "");
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 8) = 0u;
  if (v7 >= 0) {
    int v4 = __p;
  }
  else {
    int v4 = (void **)__p[0];
  }
  strlcpy((char *)this + 112, (const char *)v4, 0x40uLL);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  *((void *)this + 22) = 0;
  uuid_generate_random((unsigned __int8 *)this + 184);
  time_t result = time(0);
  *((void *)this + 25) = result;
  return result;
}

void sub_182A310BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL _LSDatabaseSaveSystemContentDatabase(void *a1, void *a2)
{
  id v3 = a1;
  int v4 = (void *)MEMORY[0x18530F680]();
  v19[0] = 0;
  id SnapshotAgainstAccessContext = _LSDatabaseCreateSnapshotAgainstAccessContext(v3, 0, v19);
  id v6 = v19[0];
  if (SnapshotAgainstAccessContext)
  {
    id v17 = a2;
    id v18 = v3;
    id v7 = SnapshotAgainstAccessContext;
    uint64_t v39 = 0;
    uint64_t v40 = &v39;
    uint64_t v41 = 0x4812000000;
    uint64_t v42 = __Block_byref_object_copy__16;
    id v43 = __Block_byref_object_dispose__16;
    long long v44 = &unk_182B5933F;
    long long v46 = 0;
    uint64_t v47 = 0;
    long long v45 = 0;
    uint64_t v30 = 0;
    id v31 = &v30;
    uint64_t v32 = 0x4812000000;
    id v33 = __Block_byref_object_copy__16;
    id v34 = __Block_byref_object_dispose__16;
    id v35 = &unk_182B5933F;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    std::__fs::filesystem::path __p = 0;
    uint64_t v23 = MEMORY[0x1E4F143A8];
    uint64_t v24 = 3221225472;
    CFArrayRef v25 = ___ZL41_LSSystemContentDatabaseSanitizeForExportP11_LSDatabase_block_invoke;
    BOOL v26 = &unk_1E522E3F8;
    id v28 = &v39;
    id v8 = v7;
    id v27 = v8;
    long long v29 = &v30;
    _CSStoreEnumerateUnits();
    v19[1] = (id)MEMORY[0x1E4F143A8];
    v19[2] = (id)3221225472;
    uint64_t v19[3] = ___ZL41_LSSystemContentDatabaseSanitizeForExportP11_LSDatabase_block_invoke_2;
    void v19[4] = &unk_1E522E3F8;
    uint64_t v21 = &v39;
    unint64_t v9 = (_LSDatabase *)v8;
    int v20 = v9;
    id v22 = &v30;
    _CSStoreEnumerateUnits();
    uint64_t v10 = (int *)v40[6];
    for (uint64_t i = (int *)v40[7]; v10 != i; ++v10)
      _LSAliasRemove(v9, *v10);
    CFDictionaryRef v12 = (int *)v31[6];
    uint64_t v13 = (int *)v31[7];
    while (v12 != v13)
      _LSPlistRemove((uint64_t)v9, *v12++);

    _Block_object_dispose(&v30, 8);
    if (__p)
    {
      uint64_t v37 = __p;
      operator delete(__p);
    }
    _Block_object_dispose(&v39, 8);
    a2 = v17;
    if (v45)
    {
      long long v46 = v45;
      operator delete(v45);
    }

    -[_LSDatabase setSeeded:]((uint64_t)v9, 1);
    _LSDatabaseSetHeaderFlag(v9, 2, 0);
    objc_msgSend((id)__LSDefaultsGetSharedInstance(), "systemContentDatabaseStoreFileURL", v8);
    _LSDatabaseGetFileResourceProperties();
    BOOL v14 = _CSStoreWriteToURL() != 0;

    id v6 = 0;
    id v3 = v18;
  }
  else
  {
    BOOL v14 = 0;
  }

  if (a2) {
    char v15 = v14;
  }
  else {
    char v15 = 1;
  }
  if ((v15 & 1) == 0) {
    *a2 = v6;
  }

  return v14;
}

void sub_182A3141C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35)
{
  _Block_object_dispose(&a28, 8);
  if (__p)
  {
    a35 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose((const void *)(v36 - 176), 8);
  uint64_t v38 = *(void **)(v36 - 128);
  if (v38)
  {
    *(void *)(v36 - 120) = v38;
    operator delete(v38);
  }

  _Unwind_Resume(a1);
}

id _LSDatabaseGetFileResourceProperties(void)
{
  unint64_t v0 = [MEMORY[0x1E4F1CA60] dictionary];
  if (v0)
  {
    id v1 = CFFileSecurityCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
    if (v1)
    {
      mode_t v2 = [(id)__LSDefaultsGetSharedInstance() databaseStoreFileMode];
      CFFileSecuritySetMode(v1, v2);
      [v0 setObject:v1 forKeyedSubscript:*MEMORY[0x1E4F1C5E8]];
      CFRelease(v1);
    }
    [v0 setObject:*MEMORY[0x1E4F1C598] forKeyedSubscript:*MEMORY[0x1E4F1C590]];
  }

  return v0;
}

void sub_182A31578(_Unwind_Exception *a1)
{
  CFRelease(v2);

  _Unwind_Resume(a1);
}

uint64_t _LSDatabaseFindBindingMapIndexWithTargetTable(uint64_t a1, int a2)
{
  uint64_t result = 0;
  int v4 = (int *)(a1 + 136);
  while (1)
  {
    int v5 = *v4;
    v4 += 26;
    if (v5 == a2) {
      break;
    }
    if (++result == 14) {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t _LSDatabaseFindBindingMapTargetTable(void *a1, int a2)
{
  id v3 = a1;
  if (a2 > 13 || (unint64_t)(a2 - 6) > 7) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = *(unsigned int *)&v3[*((void *)&kLSBindingInfo + 4 * a2 + 3) + 16];
  }

  return v4;
}

uint64_t _LSDatabaseCreateStringForCFString(void *a1, const __CFString *a2, int a3)
{
  v10[20] = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  if (!a2 || (CFTypeID v6 = CFGetTypeID(a2), v6 != CFStringGetTypeID()))
  {
    XCFBufInit((uint64_t)v10);
    goto LABEL_6;
  }
  CFIndex Length = CFStringGetLength(a2);
  if (!XCFBufInitWithCFStringRange((uint64_t)v10, a2, 0, Length, a3))
  {
LABEL_6:
    uint64_t v8 = 0;
    goto LABEL_7;
  }
  uint64_t v8 = _CSCopyStringForCharacters();
  XCFBufDestroy((uint64_t)v10);
LABEL_7:

  return v8;
}

void sub_182A3170C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSDatabaseCreateStringArray(void *a1, void *a2, int a3, unsigned char *a4)
{
  id v7 = a1;
  id v8 = a2;
  uint64_t StringArrayCommon = _LSDatabaseCreateStringArrayCommon(v7, v8, [v8 count], 0, a3, a4);

  return StringArrayCommon;
}

void sub_182A31794(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSDatabaseCreateStringArrayCommon(void *a1, void *a2, std::vector<unsigned int>::size_type a3, int a4, int a5, unsigned char *a6)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  id v47 = a1;
  id v45 = a2;
  if (a6) {
    *a6 = 0;
  }
  memset(&v54, 0, sizeof(v54));
  std::vector<unsigned int>::reserve(&v54, a3);
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  id v10 = v45;
  uint64_t v11 = [v10 countByEnumeratingWithState:&v50 objects:v59 count:16];
  if (v11)
  {
    uint64_t v12 = *(void *)v51;
    do
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        if (*(void *)v51 != v12) {
          objc_enumerationMutation(v10);
        }
        CFStringRef v14 = *(const __CFString **)(*((void *)&v50 + 1) + 8 * i);
        if (v14) {
          BOOL v15 = 1;
        }
        else {
          BOOL v15 = a4 == 0;
        }
        if (v15)
        {
          if (!_NSIsNSString())
          {
            if (a6) {
              *a6 = 1;
            }
            id v28 = _LSDatabaseGetLog();
            if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v40 = (objc_class *)objc_opt_class();
              uint64_t v41 = NSStringFromClass(v40);
              *(_DWORD *)std::__fs::filesystem::path buf = 138478083;
              int64_t v56 = (int64_t)v14;
              __int16 v57 = 2114;
              __int16 v58 = v41;
              _os_log_debug_impl(&dword_182959000, v28, OS_LOG_TYPE_DEBUG, "Expected %{private}@ to be a string, but instead it was a %{public}@", buf, 0x16u);
            }
            goto LABEL_31;
          }
          unsigned int StringForCFString = _LSDatabaseCreateStringForCFString(v47, v14, a5);
          unsigned int v17 = StringForCFString;
          if (!StringForCFString)
          {
            if (a6) {
              *a6 = 1;
            }
            id v28 = _LSDatabaseGetLog();
            if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)std::__fs::filesystem::path buf = 138477827;
              int64_t v56 = (int64_t)v14;
              _os_log_error_impl(&dword_182959000, v28, OS_LOG_TYPE_ERROR, "Could not create a CSString for CFString %{private}@", buf, 0xCu);
            }
LABEL_31:

            continue;
          }
          std::vector<unsigned int>::pointer end = v54.__end_;
          if (v54.__end_ >= v54.__end_cap_.__value_)
          {
            std::vector<unsigned int>::pointer begin = v54.__begin_;
            int64_t v33 = v54.__end_ - v54.__begin_;
            unint64_t v34 = v33 + 1;
            if ((unint64_t)(v33 + 1) >> 62) {
              abort();
            }
            int64_t v35 = (char *)v54.__end_cap_.__value_ - (char *)v54.__begin_;
            if (((char *)v54.__end_cap_.__value_ - (char *)v54.__begin_) >> 1 > v34) {
              unint64_t v34 = v35 >> 1;
            }
            if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v36 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v36 = v34;
            }
            if (v36)
            {
              uint64_t v37 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)&v54.__end_cap_, v36);
              std::vector<unsigned int>::pointer begin = v54.__begin_;
              std::vector<unsigned int>::pointer end = v54.__end_;
            }
            else
            {
              uint64_t v37 = 0;
            }
            uint64_t v38 = (unsigned int *)&v37[4 * v33];
            *uint64_t v38 = v17;
            uint64_t v19 = v38 + 1;
            while (end != begin)
            {
              unsigned int v39 = *--end;
              *--uint64_t v38 = v39;
            }
            v54.__begin_ = v38;
            v54.__end_ = v19;
            v54.__end_cap_.__value_ = (unsigned int *)&v37[4 * v36];
            if (begin) {
              operator delete(begin);
            }
          }
          else
          {
            *v54.__end_ = StringForCFString;
            uint64_t v19 = end + 1;
          }
          v54.__end_ = v19;
        }
        else
        {
          std::vector<unsigned int>::pointer v20 = v54.__end_;
          if (v54.__end_ >= v54.__end_cap_.__value_)
          {
            std::vector<unsigned int>::pointer v22 = v54.__begin_;
            int64_t v23 = v54.__end_ - v54.__begin_;
            unint64_t v24 = v23 + 1;
            if ((unint64_t)(v23 + 1) >> 62) {
              abort();
            }
            int64_t v25 = (char *)v54.__end_cap_.__value_ - (char *)v54.__begin_;
            if (((char *)v54.__end_cap_.__value_ - (char *)v54.__begin_) >> 1 > v24) {
              unint64_t v24 = v25 >> 1;
            }
            if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v26 = v24;
            }
            if (v26)
            {
              id v27 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)&v54.__end_cap_, v26);
              std::vector<unsigned int>::pointer v22 = v54.__begin_;
              std::vector<unsigned int>::pointer v20 = v54.__end_;
            }
            else
            {
              id v27 = 0;
            }
            long long v29 = (unsigned int *)&v27[4 * v23];
            *long long v29 = 0;
            uint64_t v21 = v29 + 1;
            while (v20 != v22)
            {
              unsigned int v30 = *--v20;
              *--long long v29 = v30;
            }
            v54.__begin_ = v29;
            v54.__end_ = v21;
            v54.__end_cap_.__value_ = (unsigned int *)&v27[4 * v26];
            if (v22) {
              operator delete(v22);
            }
          }
          else
          {
            *v54.__end_ = 0;
            uint64_t v21 = v20 + 1;
          }
          v54.__end_ = v21;
          id v31 = _LSDatabaseGetLog();
          if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG)) {
            _LSDatabaseCreateStringArrayCommon(&v48, v49, v31);
          }
        }
      }
      uint64_t v11 = [v10 countByEnumeratingWithState:&v50 objects:v59 count:16];
    }
    while (v11);
  }

  uint64_t v42 = _CSArrayCreate();
  if (!v42)
  {
    id v43 = _LSDatabaseGetLog();
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::__fs::filesystem::path buf = 134218242;
      int64_t v56 = v54.__end_ - v54.__begin_;
      __int16 v57 = 2114;
      __int16 v58 = 0;
      _os_log_error_impl(&dword_182959000, v43, OS_LOG_TYPE_ERROR, "Failed to create CSArray with %zu elements: %{public}@", buf, 0x16u);
    }
  }
  if (v54.__begin_)
  {
    v54.__end_ = v54.__begin_;
    operator delete(v54.__begin_);
  }

  return v42;
}

void sub_182A31C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t _LSDatabaseCreateStringArrayWithNullValues(void *a1, void *a2, int a3, unsigned char *a4)
{
  id v7 = a1;
  id v8 = a2;
  uint64_t StringArrayCommon = _LSDatabaseCreateStringArrayCommon(v7, v8, [v8 count], 1, a3, a4);

  return StringArrayCommon;
}

void sub_182A31D68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSDatabaseDisposeStringArray(void *a1, int a2)
{
  id v3 = a1;
  uint64_t v4 = v3;
  if (a2)
  {
    id v5 = v3;
    _CSArrayEnumerateAllValues();
    _CSArrayDispose();
  }
}

void sub_182A31E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

id _LSDatabaseCreateSnapshot(void *a1, void *a2)
{
  id v3 = a1;
  uint64_t v4 = v3;
  if (v3) {
    uint64_t v5 = v3[207];
  }
  else {
    uint64_t v5 = 0;
  }
  id SnapshotAgainstAccessContext = _LSDatabaseCreateSnapshotAgainstAccessContext(v3, v5, a2);

  return SnapshotAgainstAccessContext;
}

void sub_182A31EB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSDatabaseSetMutable()
{
  return _CSStoreSetMutable();
}

unsigned __int8 *LSResetDatabaseKnownAvailable(_LSDServiceDomain *a1)
{
  uint64_t result = (unsigned __int8 *)availabilityStateForServiceDomain(a1);
  atomic_store(0, result);
  return result;
}

uint64_t __LAUNCH_SERVICES_IS_GENERATING_A_SANDBOX_EXCEPTION_BECAUSE_THIS_PROCESS_IS_USING_INSECURE_SPI__()
{
  uint64_t result = _LSCurrentProcessMayMapDatabase();
  if (result) {
    return __LAUNCH_SERVICES_IS_GENERATING_A_SANDBOX_EXCEPTION__("forbidden-ls-deprecated-symbol");
  }
  return result;
}

uint64_t __LAUNCH_SERVICES_IS_GENERATING_A_SANDBOX_EXCEPTION__(const char *a1)
{
  uint64_t result = [(id)__LSDefaultsGetSharedInstance() issueSandboxExceptionsIfMayNotMapDatabase];
  if (result)
  {
    _LSGetAuditTokenForSelf();
    return sandbox_check_by_audit_token();
  }
  return result;
}

void __LAUNCH_SERVICES_IS_FAULTING_BECAUSE_THIS_PROCESS_IS_USING_VERY_EXPENSIVE_SPI__()
{
  unint64_t v0 = _LSDefaultLog();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)id v1 = 0;
    _os_log_fault_impl(&dword_182959000, v0, OS_LOG_TYPE_FAULT, "This process is not entitled to map the LS database. It is using SPI that is very expensive, causing many megabytes of memory to be dirtied in both the client (this process) and the database server. This will become a hard abort soon.", v1, 2u);
  }
}

void _LSContextInvalidate()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if ([(id)__LSDefaultsGetSharedInstance() isServer])
  {
    unint64_t v0 = _LSDatabaseGetLog();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_DEBUG)) {
      _LSContextInvalidate_cold_1();
    }
  }
  else
  {
    unint64_t v1 = _CFGetEUID();
    LSSessionKey v2 = (LSSessionKey)v1;
    _LSReleaseLocalDatabase(v2);
    unint64_t v0 = _LSDatabaseGetLog();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_DEBUG))
    {
      id v3 = (void *)_LSSessionKeyCopyDescription(v1);
      _LSContextInvalidate_cold_2(v3, v4, v0);
    }
  }
}

void sub_182A32088(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL _LSContextInitWithPath(id *a1, uint64_t a2, void *a3)
{
  if (!a1)
  {
    uint64_t v12 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v13 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL _LSContextInitWithPath(LSContext *, const char *, NSError *__autoreleasing *)");
    [v12 handleFailureInFunction:v13, @"LSDatabase.mm", 3321, @"Invalid parameter not satisfying: %@", @"ioContext != NULL" file lineNumber description];

    if (a2) {
      goto LABEL_3;
    }
LABEL_11:
    CFStringRef v14 = [MEMORY[0x1E4F28B00] currentHandler];
    BOOL v15 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL _LSContextInitWithPath(LSContext *, const char *, NSError *__autoreleasing *)");
    [v14 handleFailureInFunction:v15, @"LSDatabase.mm", 3322, @"Invalid parameter not satisfying: %@", @"inPath != NULL" file lineNumber description];

    goto LABEL_3;
  }
  if (!a2) {
    goto LABEL_11;
  }
LABEL_3:
  *a1 = 0;
  CFTypeID v6 = [[FSNode alloc] initWithFileSystemRepresentation:a2 flags:0 error:a3];
  id v7 = v6;
  if (v6 && (id v8 = (const void *)_LSCreateStoreWithFileContents(v6, a3)) != 0)
  {
    unint64_t v9 = _LSDatabaseCreate(v7, 4294967294, v8, a3);
    BOOL v10 = v9 != 0;
    if (v9) {
      objc_storeStrong(a1, v9);
    }

    CFRelease(v8);
  }
  else
  {
    BOOL v10 = 0;
  }

  return v10;
}

void sub_182A32240(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSContextUpdate(_LSDatabase **a1, int a2, void *a3)
{
  if (a2
    && ([(id)__LSDefaultsGetSharedInstance() isServer] & 1) == 0
    && [(id)__LSDefaultsGetSharedInstance() hasServer])
  {
    if (a1 && *a1)
    {
      LSSessionKey sessionKey = (*a1)->sessionKey;
      _LSReleaseLocalDatabase(sessionKey);
      goto LABEL_9;
    }
    id v7 = +[_LSDServiceDomain defaultServiceDomain]();
    LSSessionKey v8 = (LSSessionKey)-[_LSDServiceDomain resolvedSessionKey]((uint64_t)v7);
    _LSReleaseLocalDatabase(v8);

    if (a1) {
      goto LABEL_9;
    }
    return 1;
  }
  if (!a1 || !_LSDatabaseNeedsUpdate(*a1)) {
    return 1;
  }
LABEL_9:
  _LSContextDestroy((void **)a1);

  return _LSContextInitReturningError((id *)a1, a3);
}

void sub_182A32340(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSReleaseLocalDatabase(LSSessionKey a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  os_unfair_recursive_lock_lock_with_options();
  LSSessionKey v2 = a1;
  id v3 = (id *)_LSGetSession(v2);
  id v4 = v3[3];
  if (v4 && (char v5 = *((unsigned char *)v3[3] + 1664), v4, (v5 & 4) != 0))
  {
    CFTypeID v6 = _LSDatabaseGetLog();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      int v8 = 136446210;
      unint64_t v9 = "void _LSReleaseLocalDatabase(LSSessionKey)";
      _os_log_impl(&dword_182959000, v6, OS_LOG_TYPE_INFO, "Ignoring call to %{public}s because the database was pushed by another process.", (uint8_t *)&v8, 0xCu);
    }
  }
  else
  {
    LSSession::setDatabase((LSSession *)v3, 0);
  }
  return os_unfair_recursive_lock_unlock();
}

uint64_t _LSDatabaseGetNoServerLock()
{
  if (_LSDatabaseGetNoServerLock::once != -1) {
    dispatch_once(&_LSDatabaseGetNoServerLock::once, &__block_literal_global_112);
  }
  return _LSDatabaseGetNoServerLock::result;
}

void sub_182A3255C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_182A32630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void _LSContextRemoveChangeObserver(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    LSSessionKey v2 = _LSGetDispatchTokenQueue();
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = ___LSContextRemoveChangeObserver_block_invoke;
    v3[3] = &unk_1E522DCE8;
    id v4 = v1;
    id v5 = v4;
    dispatch_barrier_async(v2, v3);
  }
}

void _LSContextReleaseObservedChange(LSSessionKey **a1)
{
  if (_LSDatabaseGetNoServerLock::once == -1)
  {
    if (!a1) {
      return;
    }
  }
  else
  {
    dispatch_once(&_LSDatabaseGetNoServerLock::once, &__block_literal_global_112);
    if (!a1) {
      return;
    }
  }
  if (*a1)
  {
    LSSessionKey v2 = (pthread_mutex_t *)_LSDatabaseGetNoServerLock::result;
    if (_LSDatabaseGetNoServerLock::result)
    {
      pthread_mutex_lock((pthread_mutex_t *)_LSDatabaseGetNoServerLock::result);
      LSSessionKey v3 = (*a1)[206];
      _LSReleaseLocalDatabaseEvenIfForced(v3);
      uint64_t v4 = _LSGetAuditTokenForSelf();
      int MayMapDatabase = _LSAuditTokenMayMapDatabase(v4);
      _LSSetCurrentProcessMayMapDatabase(MayMapDatabase);
      pthread_mutex_unlock(v2);
    }
    else
    {
      LSSessionKey v6 = (*a1)[206];
      _LSReleaseLocalDatabaseEvenIfForced(v6);
      uint64_t v7 = _LSGetAuditTokenForSelf();
      int v8 = _LSAuditTokenMayMapDatabase(v7);
      _LSSetCurrentProcessMayMapDatabase(v8);
    }
  }
}

uint64_t _LSReleaseLocalDatabaseEvenIfForced(LSSessionKey a1)
{
  os_unfair_recursive_lock_lock_with_options();
  LSSessionKey v2 = a1;
  LSSessionKey v3 = (LSSession *)_LSGetSession(v2);
  LSSession::setDatabase(v3, 0);

  return os_unfair_recursive_lock_unlock();
}

uint64_t _LSDatabaseSentinelGet()
{
  pthread_mutex_lock(&sentinelLock);
  uint64_t v0 = sentinelCount;
  pthread_mutex_unlock(&sentinelLock);
  if (v0) {
    return 1;
  }
  LSSessionKey v2 = [(id)__LSDefaultsGetSharedInstance() dbSentinelFileURL];
  uint64_t v1 = _LSDatabaseRecoveryFileExists(v2);

  return v1;
}

void sub_182A328FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSDatabaseSentinelIncrement()
{
  pthread_mutex_lock(&sentinelLock);
  uint64_t v0 = sentinelCount;
  if (sentinelCount == -1)
  {
    uint64_t v1 = _LSDatabaseGetLog();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
      _LSDatabaseSentinelIncrement_cold_1();
    }

    abort();
  }
  ++sentinelCount;
  pthread_mutex_unlock(&sentinelLock);
  if (!v0)
  {
    id v2 = [(id)__LSDefaultsGetSharedInstance() dbSentinelFileURL];
    _LSDatabaseCreateRecoveryFile(v2);
  }
}

void sub_182A329C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t _LSDatabaseSentinelDecrement()
{
  pthread_mutex_lock(&sentinelLock);
  if (!sentinelCount)
  {
    uint64_t v1 = _LSDatabaseGetLog();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
      _LSDatabaseSentinelDecrement_cold_1();
    }

    abort();
  }
  --sentinelCount;

  return pthread_mutex_unlock(&sentinelLock);
}

void _LSDatabaseSentinelFlush()
{
  pthread_mutex_lock(&sentinelLock);
  uint64_t v0 = sentinelCount;
  pthread_mutex_unlock(&sentinelLock);
  if (!v0)
  {
    id v1 = [(id)__LSDefaultsGetSharedInstance() dbSentinelFileURL];
    _LSDatabaseDeleteRecoveryFile(v1);
  }
}

void sub_182A32AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t _LSDatabaseGetSyncInterrupted()
{
  uint64_t v0 = [(id)__LSDefaultsGetSharedInstance() dbSyncInterruptedFileURL];
  uint64_t v1 = _LSDatabaseRecoveryFileExists(v0);

  return v1;
}

void sub_182A32B24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSDatabaseSetSyncInterrupted()
{
  id v0 = [(id)__LSDefaultsGetSharedInstance() dbSyncInterruptedFileURL];
  _LSDatabaseCreateRecoveryFile(v0);
}

void sub_182A32B80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _LSDatabaseClearSyncInterrupted()
{
  id v0 = [(id)__LSDefaultsGetSharedInstance() dbSyncInterruptedFileURL];
  _LSDatabaseDeleteRecoveryFile(v0);
}

void sub_182A32BE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _LSDatabaseGetMobileInstallSyncupGroup()
{
  if ([(id)__LSDefaultsGetSharedInstance() isServer]
    && _LSDatabaseGetMobileInstallSyncupGroup::onceToken != -1)
  {
    dispatch_once(&_LSDatabaseGetMobileInstallSyncupGroup::onceToken, &__block_literal_global_114);
  }
  id v0 = (void *)_LSDatabaseGetMobileInstallSyncupGroup::syncupGroup;

  return v0;
}

id _LSDatabaseGetInstallingGroup()
{
  if ([(id)__LSDefaultsGetSharedInstance() isServer]
    && _LSDatabaseGetInstallingGroup::once != -1)
  {
    dispatch_once(&_LSDatabaseGetInstallingGroup::once, &__block_literal_global_118);
  }
  id v0 = (void *)_LSDatabaseGetInstallingGroup::installingGroup;

  return v0;
}

void *_LSDatabaseGetRegisterInstallResultsLock()
{
  return &_LSDatabaseGetRegisterInstallResultsLock::lock;
}

void _LSArmSaveTimerWithObserver(char a1, void *a2)
{
  id v4 = a2;
  [(id)__LSDefaultsGetSharedInstance() databaseSaveInterval];
  _LSArmSaveTimerWithTimeout(a1, v4, v3);
}

void sub_182A32DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _LSArmSaveTimerWithTimeout(char a1, void *a2, double a3)
{
  id v5 = a2;
  if ([(id)__LSDefaultsGetSharedInstance() isServer]
    && ([(id)__LSDefaultsGetSharedInstance() isInSyncBubble] & 1) == 0)
  {
    os_unfair_recursive_lock_lock_with_options();
    LSSessionKey v6 = (LSSessionKey)_LSServer_SelfSessionKey();
    uint64_t v7 = (int64x2_t *)_LSGetSession(v6);
    int v8 = v7;
    v7->i8[0] |= a1;
    if (v5) {
      LSSession::addSaveObserver(v7, v5);
    }
    if ((v8[1].i8[4] & 1) == 0)
    {
      _LSServer_DatabaseExecutionContext();
      unint64_t v9 = (id *)objc_claimAutoreleasedReturnValue();
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 3221225472;
      void v15[2] = ___ZL26_LSArmSaveTimerWithTimeouthdU13block_pointerFvbP11_LSDatabaseP7NSErrorE_block_invoke;
      v15[3] = &__block_descriptor_40_e5_v8__0l;
      void v15[4] = v8;
      uint64_t v10 = (void *)MEMORY[0x18530F950](v15);
      uint64_t v11 = -[LSDBExecutionContext maintenanceQueue](v9);
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 3221225472;
      void v12[2] = ___ZL26_LSArmSaveTimerWithTimeouthdU13block_pointerFvbP11_LSDatabaseP7NSErrorE_block_invoke_390;
      void v12[3] = &unk_1E522C3B0;
      uint64_t v13 = v9;
      id v14 = v10;
      _LSDispatchCoalescedAfterDelay(&v8->i8[8], v11, v12, a3);
    }
    os_unfair_recursive_lock_unlock();
  }
}

void sub_182A32FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void _LSArmSaveTimer(char a1)
{
}

void _LSSaveImmediately(char a1)
{
}

void _LSResetServer()
{
  if ([(id)__LSDefaultsGetSharedInstance() hasServer]
    && ([(id)__LSDefaultsGetSharedInstance() isServer] & 1) == 0)
  {
    int v8 = (void *)MEMORY[0x18530F680]();
    unint64_t v9 = +[_LSDService synchronousXPCProxyWithErrorHandler:]((uint64_t)_LSDModifyService, __block_literal_global_122);
    [v9 resetServerStoreWithCompletionHandler:&__block_literal_global_126];
  }
  else
  {
    id v15 = 0;
    CFTypeRef v0 = _LSCreateEmptyStore(&v15);
    id v1 = v15;
    if (v0)
    {
      id v2 = _LSGetStoreNode();
      uint64_t v3 = _LSServer_SelfSessionKey();
      id v13 = v1;
      id v4 = _LSDatabaseCreate(v2, v3, v0, &v13);
      id v5 = v13;

      uint64_t v14 = (uint64_t)v4;
      if (v4)
      {
        if ([(id)__LSDefaultsGetSharedInstance() isServer])
        {
          LSSessionKey v6 = _LSServer_DatabaseExecutionContext();
          -[LSDBExecutionContext setServerDatabase:]((uint64_t)v6, v4);
        }
        else
        {
          _LSSetLocalDatabase(v4);
        }
        _LSDatabaseClean((id *)&v14);
        int v12 = [(id)__LSDefaultsGetSharedInstance() isServer];
        id v11 = (id)v14;
        if (v12) {
          _LSDatabaseCommit(v14);
        }
      }
      else
      {
        uint64_t v10 = _LSDatabaseGetLog();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
          _LSResetServer_cold_2();
        }

        id v11 = 0;
      }

      CFRelease(v0);
    }
    else
    {
      uint64_t v7 = _LSDatabaseGetLog();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        _LSResetServer_cold_1();
      }

      id v5 = v1;
    }
  }
}

void sub_182A331E4(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_182A33298(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A33304(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSGetStoreNode(void)
{
  if (_LSGetStoreNode(void)::once != -1) {
    dispatch_once(&_LSGetStoreNode(void)::once, &__block_literal_global_415);
  }
  CFTypeRef v0 = (void *)_LSGetStoreNode(void)::result;

  return v0;
}

void _LSDatabaseDisplayHeader(CSStore2::AttributedStringWriter *a1, void *a2, unsigned char *a3)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  if (a3) {
    *a3 = 1;
  }
  CSStore2::AttributedStringWriter::string(a1, &cfstr_CheckingDataIn.isa);
  if (_CSStoreValidate())
  {
    id v47 = v5;
    _CSStoreEnumerateUnits();
    long long v46 = v47;
    _CSStoreEnumerateUnits();
    LSSessionKey v6 = v46;
    id v45 = v6;
    _CSStoreEnumerateUnits();
    CSStore2::AttributedStringWriter::string(a1, &cfstr_Done.isa);
    __int16 v7 = _LSGetStatus();
    if ((v7 & 0x80) != 0) {
      CSStore2::AttributedStringWriter::withTextColor();
    }
    if ((v7 & 0x100) != 0) {
      CSStore2::AttributedStringWriter::withTextColor();
    }
    if ((v7 & 0x200) != 0) {
      CSStore2::AttributedStringWriter::withTextColor();
    }
    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v48 = 0u;
    *(void *)&double v8 = _LSDatabaseGetHeader(&v48).n128_u64[0];
    if (BYTE8(v53)) {
      unint64_t v9 = @"are";
    }
    else {
      unint64_t v9 = @"are NOT";
    }
    CSStore2::AttributedStringWriter::format(a1, &cfstr_Status.isa, &cfstr_PreferencesLoa.isa, v8, v9);
    _LSDatabaseGetSeededSystemVersion();
    uint64_t v10 = (NSString *)objc_claimAutoreleasedReturnValue();
    id v43 = v10;
    if (v10) {
      CSStore2::AttributedStringWriter::string(a1, &cfstr_SeededSystemVe.isa, v10);
    }
    _LSDatabaseGetSeededCryptexVersion(v6);
    id v11 = (NSString *)objc_claimAutoreleasedReturnValue();
    uint64_t v42 = v11;
    if (v11) {
      CSStore2::AttributedStringWriter::string(a1, &cfstr_SeededCryptexV.isa, v11);
    }
    _LSDatabaseGetSeededModelCode();
    int v12 = (NSString *)objc_claimAutoreleasedReturnValue();
    long long v44 = v12;
    if (v12) {
      CSStore2::AttributedStringWriter::string(a1, &cfstr_SeededModelCod.isa, v12);
    }
    id v13 = _LSDatabaseGetCacheGUID();
    uint64_t v14 = v13;
    if (v13)
    {
      id v15 = [v13 UUIDString];
      CSStore2::AttributedStringWriter::string(a1, &cfstr_Cacheguid_0.isa, v15);
    }
    else
    {
      CSStore2::AttributedStringWriter::withWarningColors();
    }
    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v48 = 0u;
    *(void *)&double v16 = _LSDatabaseGetHeader(&v48).n128_u64[0];
    if ((void)v59)
    {
      unsigned int v17 = [NSNumber numberWithUnsignedLongLong:v16];
      CSStore2::AttributedStringWriter::number(a1, &cfstr_Cachesequencen.isa, v17);
    }
    else
    {
      CSStore2::AttributedStringWriter::withWarningColors();
    }
    id v18 = v6;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v48 = 0u;
    _LSDatabaseGetHeader(&v48);
    if (*((void *)&v60 + 1))
    {
      uint64_t v19 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSince1970:(double)*((uint64_t *)&v60 + 1)];

      if (v19)
      {
        [v19 timeIntervalSinceReferenceDate];
        CSStore2::AttributedStringWriter::timestamp(a1, &cfstr_DateInitialize.isa, v20);
      }
    }
    else
    {

      uint64_t v19 = 0;
    }
    uint64_t v21 = [v18[205] pathWithError:0];
    if (v21)
    {
      id v22 = v18[205];
      int64_t v23 = [v22 URL];
      CSStore2::AttributedStringWriter::link(a1, v23, v21);
      unint64_t v24 = (NSString *)objc_claimAutoreleasedReturnValue();
      CSStore2::AttributedStringWriter::string(a1, &cfstr_Path_0.isa, v24);
    }
    else
    {
      CSStore2::AttributedStringWriter::withWarningColors();
    }
    int64_t v25 = [v18 description];
    CSStore2::AttributedStringWriter::string(a1, &cfstr_DbObject.isa, v25);

    unint64_t v26 = (__CFBundle *)_LSGetBundle();
    id v27 = v26;
    id v28 = (CFStringRef *)MEMORY[0x1E4F1D020];
    if (v26)
    {
      long long v29 = (NSURL *)CFBundleCopyBundleURL(v26);
      unsigned int v30 = CFBundleGetValueForInfoDictionaryKey(v27, *v28);
      id v31 = [(NSURL *)v29 path];
      CSStore2::AttributedStringWriter::link(a1, v29, v31);
      uint64_t v32 = (NSString *)objc_claimAutoreleasedReturnValue();
      if (v30) {
        CSStore2::AttributedStringWriter::format(a1, &cfstr_DbBundle.isa, &cfstr_V_0.isa, v32, v30);
      }
      else {
        CSStore2::AttributedStringWriter::string(a1, &cfstr_DbBundle.isa, v32);
      }
    }
    int64_t v33 = [v5[1] description];
    CSStore2::AttributedStringWriter::string(a1, &cfstr_StoreObject.isa, v33);

    unint64_t v34 = [MEMORY[0x1E4F28B50] bundleForClass:_CSStoreGetXPCClass()];
    int64_t v35 = v34;
    if (v34)
    {
      unint64_t v36 = [v34 bundleURL];
      uint64_t v37 = [v35 objectForInfoDictionaryKey:*v28];
      uint64_t v38 = [(NSURL *)v36 path];
      CSStore2::AttributedStringWriter::link(a1, v36, v38);
      unsigned int v39 = (NSString *)objc_claimAutoreleasedReturnValue();
      if (v37) {
        CSStore2::AttributedStringWriter::format(a1, &cfstr_StoreBundle.isa, &cfstr_V_0.isa, v39, v37);
      }
      else {
        CSStore2::AttributedStringWriter::string(a1, &cfstr_StoreBundle.isa, v39);
      }
    }
    uint64_t v40 = (NSAttributedString *)_CSStoreCopyDebugDescriptionOfBytesInRange();
    CSStore2::AttributedStringWriter::attributedString(a1, v40);

    uint64_t v41 = (NSAttributedString *)_CSStoreCopyMemoryStatistics();
    CSStore2::AttributedStringWriter::attributedString(a1, v41);
  }
  else
  {
    CSStore2::AttributedStringWriter::string(a1, &cfstr_DataIntegrityC.isa);
    if (a3) {
      *a3 = 0;
    }
  }
}

void sub_182A33C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61)
{
  _Unwind_Resume(a1);
}

void ___ZL18_LSSetCrashMessageP8NSString_block_invoke_0(uint64_t a1)
{
}

void _LSSetCrashReporterMessage(NSString *a1)
{
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    uint64_t v3 = strdup([(NSString *)v1 UTF8String]);
    id v4 = _LSDefaultLog();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
      _LSSetCrashReporterMessage_cold_1();
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v5 = _LSSetCrashReporterMessage(NSString *)::messagePtr;
  uint64_t v6 = _LSSetCrashReporterMessage(NSString *)::messagePtr;
  atomic_compare_exchange_strong_explicit(&_LSSetCrashReporterMessage(NSString *)::messagePtr, (unint64_t *)&v6, (unint64_t)v3, memory_order_relaxed, memory_order_relaxed);
  if (v6 == v5) {
    __int16 v7 = (void *)v5;
  }
  else {
    __int16 v7 = v3;
  }
  free(v7);
  qword_1EB20D5F0 = _LSSetCrashReporterMessage(NSString *)::messagePtr;
}

void sub_182A342DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL15_LSLoggingQueuev_block_invoke_0()
{
  id v2 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v0 = dispatch_queue_create("com.apple.launchservices.logging", v2);
  id v1 = (void *)_LSLoggingQueue(void)::logQueue;
  _LSLoggingQueue(void)::logQueue = (uint64_t)v0;
}

uint64_t ___ZL16_LSDatabaseCleanPU8__strongP11_LSDatabase_block_invoke(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v11 = *a3;
  int v12 = *((_DWORD *)a3 + 4);
  uint64_t v10 = 0;
  uint64_t v5 = _LSAliasGetPath(*(void **)(a1 + 32), SHIDWORD(v11));
  if (v5)
  {
    uint64_t v6 = [[FSNode alloc] initWithPath:v5 flags:0 error:0];
    __int16 v7 = v6;
    if (v6) {
      BOOL v8 = [(FSNode *)v6 getVolumeIdentifier:&v10 error:0];
    }
    else {
      BOOL v8 = 0;
    }
  }
  else
  {
    BOOL v8 = 0;
  }

  *(void *)((char *)&v11 + 4) = v10;
  BYTE2(v11) = v8;
  return _LSContainerSet(*(void **)(a1 + 32), a2, (uint64_t)&v11);
}

void sub_182A3442C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id __copy_helper_block_ea8_32c14_ZTS9LSContext(uint64_t a1, uint64_t a2)
{
  id result = *(id *)(a2 + 32);
  *(void *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_ea8_32c14_ZTS9LSContext(uint64_t a1)
{
}

void LSCrashMessage::LSCrashMessage(LSCrashMessage *this, NSString *a2)
{
  id v2 = a2;
  if (_LSLoggingQueue(void)::onceToken != -1) {
    dispatch_once(&_LSLoggingQueue(void)::onceToken, &__block_literal_global_227);
  }
  uint64_t v3 = _LSLoggingQueue(void)::logQueue;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  _OWORD block[2] = ___ZL18_LSSetCrashMessageP8NSString_block_invoke_0;
  block[3] = &unk_1E522D3E8;
  uint64_t v6 = v2;
  id v4 = v2;
  dispatch_sync(v3, block);
}

void LSCrashMessage::~LSCrashMessage(LSCrashMessage *this)
{
  if (_LSLoggingQueue(void)::onceToken != -1) {
    dispatch_once(&_LSLoggingQueue(void)::onceToken, &__block_literal_global_227);
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  _OWORD block[2] = ___ZL18_LSSetCrashMessageP8NSString_block_invoke_0;
  block[3] = &unk_1E522D3E8;
  id v2 = 0;
  dispatch_sync((dispatch_queue_t)_LSLoggingQueue(void)::logQueue, block);
}

void ___ZL52_LSDatabaseRegisterCanonicalNamesFromStringLocalizerP11_LSDatabaseP18_LSStringLocalizer_block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  __int16 v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (!LaunchServices::CanonicalString::Find(*(LaunchServices::CanonicalString **)(a1 + 32), v7, v10))
  {
    if (LaunchServices::CanonicalString::Add(*(void **)(a1 + 32), v7, v8))
    {
      ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    }
    else
    {
      long long v11 = _LSDatabaseGetLog();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        int v12 = 138543874;
        id v13 = v7;
        __int16 v14 = 2114;
        id v15 = v8;
        __int16 v16 = 2114;
        id v17 = v9;
        _os_log_error_impl(&dword_182959000, v11, OS_LOG_TYPE_ERROR, "Failed to add canonical string %{public}@, localizations %{public}@, missingLocalizations %{public}@", (uint8_t *)&v12, 0x20u);
      }
    }
  }
}

void sub_182A347A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL41_LSSystemContentDatabaseSanitizeForExportP11_LSDatabase_block_invoke(uint64_t result, uint64_t a2, _DWORD *a3)
{
  uint64_t v4 = result;
  int v5 = a3[24];
  if (v5)
  {
    uint64_t v6 = *(void **)(*(void *)(result + 40) + 8);
    __int16 v7 = (char *)v6[7];
    unint64_t v8 = v6[8];
    if ((unint64_t)v7 >= v8)
    {
      uint64_t v10 = (char *)v6[6];
      uint64_t v11 = (v7 - v10) >> 2;
      unint64_t v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 62) {
        goto LABEL_58;
      }
      uint64_t v13 = v8 - (void)v10;
      if (v13 >> 1 > v12) {
        unint64_t v12 = v13 >> 1;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14)
      {
        id v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)(v6 + 8), v14);
        uint64_t v10 = (char *)v6[6];
        __int16 v7 = (char *)v6[7];
        int v5 = a3[24];
      }
      else
      {
        id v15 = 0;
      }
      __int16 v16 = &v15[4 * v11];
      id v17 = &v15[4 * v14];
      *(_DWORD *)__int16 v16 = v5;
      id v9 = v16 + 4;
      while (v7 != v10)
      {
        int v18 = *((_DWORD *)v7 - 1);
        v7 -= 4;
        *((_DWORD *)v16 - 1) = v18;
        v16 -= 4;
      }
      void v6[6] = v16;
      v6[7] = v9;
      v6[8] = v17;
      if (v10) {
        operator delete(v10);
      }
    }
    else
    {
      *(_DWORD *)__int16 v7 = v5;
      id v9 = v7 + 4;
    }
    v6[7] = v9;
    id result = _CSStoreWriteToUnit();
  }
  int v19 = a3[36];
  if (v19)
  {
    double v20 = *(void **)(*(void *)(v4 + 48) + 8);
    uint64_t v21 = (char *)v20[7];
    unint64_t v22 = v20[8];
    if ((unint64_t)v21 >= v22)
    {
      unint64_t v24 = (char *)v20[6];
      uint64_t v25 = (v21 - v24) >> 2;
      unint64_t v26 = v25 + 1;
      if ((unint64_t)(v25 + 1) >> 62) {
        goto LABEL_58;
      }
      uint64_t v27 = v22 - (void)v24;
      if (v27 >> 1 > v26) {
        unint64_t v26 = v27 >> 1;
      }
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v28 = v26;
      }
      if (v28)
      {
        long long v29 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)(v20 + 8), v28);
        unint64_t v24 = (char *)v20[6];
        uint64_t v21 = (char *)v20[7];
        int v19 = a3[36];
      }
      else
      {
        long long v29 = 0;
      }
      unsigned int v30 = &v29[4 * v25];
      id v31 = &v29[4 * v28];
      *(_DWORD *)unsigned int v30 = v19;
      int64_t v23 = v30 + 4;
      while (v21 != v24)
      {
        int v32 = *((_DWORD *)v21 - 1);
        v21 -= 4;
        *((_DWORD *)v30 - 1) = v32;
        v30 -= 4;
      }
      v20[6] = v30;
      v20[7] = v23;
      v20[8] = v31;
      if (v24) {
        operator delete(v24);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v21 = v19;
      int64_t v23 = v21 + 4;
    }
    v20[7] = v23;
    id result = _CSStoreWriteToUnit();
  }
  int v33 = a3[128];
  if (!v33) {
    return result;
  }
  unint64_t v34 = *(void **)(*(void *)(v4 + 48) + 8);
  int64_t v35 = (char *)v34[7];
  unint64_t v36 = v34[8];
  if ((unint64_t)v35 >= v36)
  {
    uint64_t v38 = (char *)v34[6];
    uint64_t v39 = (v35 - v38) >> 2;
    unint64_t v40 = v39 + 1;
    if (!((unint64_t)(v39 + 1) >> 62))
    {
      uint64_t v41 = v36 - (void)v38;
      if (v41 >> 1 > v40) {
        unint64_t v40 = v41 >> 1;
      }
      if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v42 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v42 = v40;
      }
      if (v42)
      {
        id v43 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)(v34 + 8), v42);
        uint64_t v38 = (char *)v34[6];
        int64_t v35 = (char *)v34[7];
        int v33 = a3[128];
      }
      else
      {
        id v43 = 0;
      }
      long long v44 = &v43[4 * v39];
      id v45 = &v43[4 * v42];
      *(_DWORD *)long long v44 = v33;
      uint64_t v37 = v44 + 4;
      while (v35 != v38)
      {
        int v46 = *((_DWORD *)v35 - 1);
        v35 -= 4;
        *((_DWORD *)v44 - 1) = v46;
        v44 -= 4;
      }
      v34[6] = v44;
      v34[7] = v37;
      v34[8] = v45;
      if (v38) {
        operator delete(v38);
      }
      goto LABEL_55;
    }
LABEL_58:
    abort();
  }
  *(_DWORD *)int64_t v35 = v33;
  uint64_t v37 = v35 + 4;
LABEL_55:
  v34[7] = v37;

  return _CSStoreWriteToUnit();
}

uint64_t ___ZL41_LSSystemContentDatabaseSanitizeForExportP11_LSDatabase_block_invoke_2(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  int v5 = *(_DWORD *)(a3 + 96);
  if (v5)
  {
    uint64_t v6 = *(void **)(*(void *)(result + 40) + 8);
    __int16 v7 = (char *)v6[7];
    unint64_t v8 = v6[8];
    if ((unint64_t)v7 >= v8)
    {
      uint64_t v10 = (char *)v6[6];
      uint64_t v11 = (v7 - v10) >> 2;
      unint64_t v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 62) {
        goto LABEL_40;
      }
      uint64_t v13 = v8 - (void)v10;
      if (v13 >> 1 > v12) {
        unint64_t v12 = v13 >> 1;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14)
      {
        id v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)(v6 + 8), v14);
        uint64_t v10 = (char *)v6[6];
        __int16 v7 = (char *)v6[7];
        int v5 = *(_DWORD *)(a3 + 96);
      }
      else
      {
        id v15 = 0;
      }
      __int16 v16 = &v15[4 * v11];
      id v17 = &v15[4 * v14];
      *(_DWORD *)__int16 v16 = v5;
      id v9 = v16 + 4;
      while (v7 != v10)
      {
        int v18 = *((_DWORD *)v7 - 1);
        v7 -= 4;
        *((_DWORD *)v16 - 1) = v18;
        v16 -= 4;
      }
      void v6[6] = v16;
      v6[7] = v9;
      v6[8] = v17;
      if (v10) {
        operator delete(v10);
      }
    }
    else
    {
      *(_DWORD *)__int16 v7 = v5;
      id v9 = v7 + 4;
    }
    v6[7] = v9;
    id result = _CSStoreWriteToUnit();
  }
  int v19 = *(_DWORD *)(a3 + 144);
  if (!v19) {
    return result;
  }
  double v20 = *(void **)(*(void *)(v4 + 48) + 8);
  uint64_t v21 = (char *)v20[7];
  unint64_t v22 = v20[8];
  if ((unint64_t)v21 >= v22)
  {
    unint64_t v24 = (char *)v20[6];
    uint64_t v25 = (v21 - v24) >> 2;
    unint64_t v26 = v25 + 1;
    if (!((unint64_t)(v25 + 1) >> 62))
    {
      uint64_t v27 = v22 - (void)v24;
      if (v27 >> 1 > v26) {
        unint64_t v26 = v27 >> 1;
      }
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v28 = v26;
      }
      if (v28)
      {
        long long v29 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)(v20 + 8), v28);
        unint64_t v24 = (char *)v20[6];
        uint64_t v21 = (char *)v20[7];
        int v19 = *(_DWORD *)(a3 + 144);
      }
      else
      {
        long long v29 = 0;
      }
      unsigned int v30 = &v29[4 * v25];
      id v31 = &v29[4 * v28];
      *(_DWORD *)unsigned int v30 = v19;
      int64_t v23 = v30 + 4;
      while (v21 != v24)
      {
        int v32 = *((_DWORD *)v21 - 1);
        v21 -= 4;
        *((_DWORD *)v30 - 1) = v32;
        v30 -= 4;
      }
      v20[6] = v30;
      v20[7] = v23;
      v20[8] = v31;
      if (v24) {
        operator delete(v24);
      }
      goto LABEL_37;
    }
LABEL_40:
    abort();
  }
  *(_DWORD *)uint64_t v21 = v19;
  int64_t v23 = v21 + 4;
LABEL_37:
  v20[7] = v23;

  return _CSStoreWriteToUnit();
}

id _LSDatabaseCreateSnapshotAgainstAccessContext(void *a1, uint64_t a2, void *a3)
{
  uint64_t v27 = 0;
  unint64_t v28 = &v27;
  uint64_t v29 = 0x3032000000;
  unsigned int v30 = __Block_byref_object_copy__364;
  id v31 = __Block_byref_object_dispose__365;
  id v32 = 0;
  uint64_t v21 = 0;
  unint64_t v22 = &v21;
  uint64_t v23 = 0x3032000000;
  unint64_t v24 = __Block_byref_object_copy__364;
  uint64_t v25 = __Block_byref_object_dispose__365;
  id v26 = 0;
  int v5 = a1;
  if (v5)
  {
    uint64_t v6 = v5[1];
    uint64_t v7 = v5[207];
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  _OWORD v16[2] = ___ZL45_LSDatabaseCreateSnapshotAgainstAccessContextP11_LSDatabaseP22__CSStoreAccessContextPU15__autoreleasingP7NSError_block_invoke;
  v16[3] = &unk_1E522E420;
  uint64_t v20 = v6;
  int v18 = &v21;
  unint64_t v8 = v5;
  id v17 = v8;
  int v19 = &v27;
  id v9 = (void (**)(void))MEMORY[0x18530F950](v16);
  if (a2)
  {
    if (v7 && v7 != a2)
    {
      uint64_t v13 = [MEMORY[0x1E4F28B00] currentHandler];
      unint64_t v14 = objc_msgSend(NSString, "stringWithUTF8String:", "_LSDatabase *_LSDatabaseCreateSnapshotAgainstAccessContext(_LSDatabase *__strong, CSStoreAccessContextRef, NSError *__autoreleasing *)");
      [v13 handleFailureInFunction:v14 file:@"LSDatabase.mm" lineNumber:2812 description:@"provided a snapshot queue but it was not equal to the queue in the db to snapshot"];
    }
    id v15 = v9;
    _CSStoreAccessContextAccessForRead();
  }
  else
  {
    if (v7) {
      _CSStoreAccessContextAssertReading();
    }
    v9[2](v9);
  }
  if (!v28[5])
  {
    uint64_t v10 = _LSDatabaseGetLog();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      _LSDatabaseCreateSnapshotAgainstAccessContext();
    }

    if (a3) {
      *a3 = (id) v22[5];
    }
  }
  id v11 = (id)v28[5];

  _Block_object_dispose(&v21, 8);
  _Block_object_dispose(&v27, 8);

  return v11;
}

void sub_182A34FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose((const void *)(v32 - 128), 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__364(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__365(uint64_t a1)
{
}

void ___ZL45_LSDatabaseCreateSnapshotAgainstAccessContextP11_LSDatabaseP22__CSStoreAccessContextPU15__autoreleasingP7NSError_block_invoke(void *a1)
{
  if (a1[7])
  {
    uint64_t MutableCopy = CSStoreCreateMutableCopy();
    if (MutableCopy)
    {
      uint64_t v3 = (const void *)MutableCopy;
      uint64_t v4 = a1[4];
      uint64_t v5 = *(void *)(v4 + 1648);
      id v6 = *(id *)(v4 + 1640);
      uint64_t v7 = (const void *)a1[7];
      uint64_t v8 = *(void *)(a1[5] + 8);
      obuint64_t j = *(id *)(v8 + 40);
      id v9 = _LSDatabaseCreateWithAccessContext(v6, v5, v7, 0, &obj);
      objc_storeStrong((id *)(v8 + 40), obj);
      uint64_t v10 = *(void *)(a1[6] + 8);
      id v11 = *(void **)(v10 + 40);
      *(void *)(v10 + 40) = v9;

      CFRelease(v3);
    }
  }
  else
  {
    uint64_t v12 = _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -50, (uint64_t)"_LSDatabaseCreateSnapshotAgainstAccessContext_block_invoke", 2806, 0);
    uint64_t v13 = *(void *)(a1[5] + 8);
    unint64_t v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = v12;
  }
}

void sub_182A35178(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZL45_LSDatabaseCreateSnapshotAgainstAccessContextP11_LSDatabaseP22__CSStoreAccessContextPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void ___ZL34LSCheckDatabaseAvailableWithServerP17_LSDServiceDomain_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  uint64_t v3 = _LSDatabaseGetLog();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    id v4 = v2;
    id v5 = [NSString alloc];
    id v6 = [v4 domain];
    uint64_t v7 = [v4 code];
    uint64_t v8 = [v4 userInfo];
    id v9 = (void *)[v5 initWithFormat:@"(Error domain %@ code %llu, ui: %@)", v6, v7, v8];

    *(_DWORD *)std::__fs::filesystem::path buf = 136315394;
    id v11 = "LSCheckDatabaseAvailableWithServer_block_invoke";
    __int16 v12 = 2112;
    uint64_t v13 = v9;
    _os_log_error_impl(&dword_182959000, v3, OS_LOG_TYPE_ERROR, "%s: Error on proxy: %@", buf, 0x16u);
  }
}

void sub_182A352EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL34LSCheckDatabaseAvailableWithServerP17_LSDServiceDomain_block_invoke_379(uint64_t result, int a2)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = 1;
  return result;
}

uint64_t ___ZL31_LSDatabaseNotificationRegister12LSSessionKey_block_invoke(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v2 = _LSDatabaseGetLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = (void *)_LSSessionKeyCopyDescription(*(void *)(a1 + 40));
    int v9 = 138543618;
    uint64_t v10 = v3;
    __int16 v11 = 2112;
    __int16 v12 = v4;
    _os_log_impl(&dword_182959000, v2, OS_LOG_TYPE_DEFAULT, "NotifyToken::RegisterDispatch(%{public}@) fired for session key %@", (uint8_t *)&v9, 0x16u);
  }
  LSSessionKey v5 = *(LSSessionKey *)(a1 + 40);
  _LSReleaseLocalDatabase(v5);
  os_unfair_recursive_lock_lock_with_options();
  LSSessionKey v6 = *(LSSessionKey *)(a1 + 40);
  uint64_t v7 = _LSGetSession(v6);
  LaunchServices::notifyd::NotifyToken::cancel((atomic_uint *)(v7 + 12));
  return os_unfair_recursive_lock_unlock();
}

void sub_182A35448(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL30_LSClearCrashMessageAfterDelayi_block_invoke()
{
  uint64_t v0 = _LSSetCrashReporterMessage(NSString *)::messagePtr;
  uint64_t v1 = _LSSetCrashReporterMessage(NSString *)::messagePtr;
  atomic_compare_exchange_strong_explicit(&_LSSetCrashReporterMessage(NSString *)::messagePtr, (unint64_t *)&v1, 0, memory_order_relaxed, memory_order_relaxed);
  if (v1 == v0) {
    id v2 = (void *)v0;
  }
  else {
    id v2 = 0;
  }
  free(v2);
  qword_1EB20D5F0 = _LSSetCrashReporterMessage(NSString *)::messagePtr;
}

void LSSession::addSaveObserver(int64x2_t *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 copy];
  unint64_t v5 = a1[3].u64[0];
  LSSessionKey v6 = (uint64_t *)a1[2].i64[1];
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = a1[2].i64[0];
    uint64_t v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      abort();
    }
    uint64_t v10 = v5 - v8;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    unint64_t v24 = a1 + 3;
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<os_eligibility_answer_t>>((uint64_t)a1[3].i64, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = (uint64_t *)&v13[8 * v9];
    id v15 = &v13[8 * v12];
    uint64_t v23 = v15;
    uint64_t *v14 = v4;
    uint64_t v7 = v14 + 1;
    v22.i64[1] = (uint64_t)(v14 + 1);
    id v17 = (void *)a1[2].i64[0];
    __int16 v16 = (void *)a1[2].i64[1];
    if (v16 == v17)
    {
      int64x2_t v19 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        uint64_t v18 = *--v16;
        *__int16 v16 = 0;
        *--uint64_t v14 = v18;
      }
      while (v16 != v17);
      int64x2_t v19 = a1[2];
      uint64_t v7 = (void *)v22.i64[1];
      id v15 = v23;
    }
    a1[2].i64[0] = (uint64_t)v14;
    a1[2].i64[1] = (uint64_t)v7;
    int64x2_t v22 = v19;
    uint64_t v20 = a1[3].i64[0];
    a1[3].i64[0] = (uint64_t)v15;
    uint64_t v23 = (char *)v20;
    uint64_t v21 = v19.i64[0];
    std::__split_buffer<LSApplicationRecord * {__strong}>::~__split_buffer((uint64_t)&v21);
  }
  else
  {
    uint64_t *v6 = v4;
    uint64_t v7 = v6 + 1;
  }
  a1[2].i64[1] = (uint64_t)v7;
}

void sub_182A355C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL26_LSArmSaveTimerWithTimeouthdU13block_pointerFvbP11_LSDatabaseP7NSErrorE_block_invoke(uint64_t a1)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v56 = 0;
  memset(&v58[1], 0, 11);
  long long v54 = 0uLL;
  uint64_t v55 = 0;
  os_unfair_recursive_lock_lock_with_options();
  if (*(void *)(*(void *)(a1 + 32) + 24)) {
    id v2 = *(id *)(*(void *)(a1 + 32) + 24);
  }
  else {
    id v2 = 0;
  }
  id v3 = *(char **)(a1 + 32);
  unsigned __int8 v56 = *v3;
  char v4 = v3[11];
  unint64_t v5 = *(void ***)(v3 + 1);
  LOWORD(v58[2]) = *(_WORD *)(v3 + 9);
  v58[1] = v5;
  BYTE2(v58[2]) = v4;
  if (*v3) {
    *id v3 = 0;
  }
  long long v7 = *((_OWORD *)v3 + 2);
  LSSessionKey v6 = v3 + 32;
  *(_OWORD *)std::__fs::filesystem::path buf = v7;
  *(void *)&uint8_t buf[16] = *((void *)v6 + 2);
  *(void *)LSSessionKey v6 = 0;
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  std::vector<void({block_pointer} {__strong})(BOOL,_LSDatabase *,NSError *),std::allocator<void({block_pointer} {__strong})(BOOL,_LSDatabase *,NSError *)>>::shrink_to_fit((char **)v6);
  std::vector<void({block_pointer} {__strong})(BOOL,_LSDatabase *,NSError *),std::allocator<void({block_pointer} {__strong})(BOOL,_LSDatabase *,NSError *)>>::__vdeallocate((void **)&v54);
  long long v54 = *(_OWORD *)buf;
  uint64_t v55 = *(void *)&buf[16];
  memset(buf, 0, 24);
  *(void *)long long v59 = buf;
  std::vector<LSApplicationRecord * {__strong}>::__destroy_vector::operator()[abi:nn180100]((void ***)v59);
  uint64_t v8 = os_unfair_recursive_lock_unlock();
  if (v2)
  {
    uint64_t v9 = (void *)MEMORY[0x18530F680](v8);
    uint64_t v10 = (unint64_t *)v2;
    unint64_t v12 = v10;
    int v13 = (v56 >> 1) & 1 | v56;
    if ((v56 >> 1) & 1 | v56 & 1)
    {
      uint64_t v14 = v10;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v66 = 0u;
      long long v67 = 0u;
      long long v64 = 0u;
      long long v65 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      long long v61 = 0u;
      memset(buf, 0, sizeof(buf));
      _LSDatabaseGetHeader(buf);
      if ((DWORD2(v64) & 0x1000000) != 0)
      {
        DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
        CFNotificationCenterPostNotification(DarwinNotifyCenter, @"com.apple.LaunchServices.ApplicationsChanged", 0, 0, 1u);
      }
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v66 = 0u;
      long long v67 = 0u;
      long long v64 = 0u;
      long long v65 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      long long v61 = 0u;
      memset(buf, 0, sizeof(buf));
      _LSDatabaseGetHeader(buf);
      if ((DWORD2(v64) & 0x2000000) != 0)
      {
        __int16 v16 = CFNotificationCenterGetDarwinNotifyCenter();
        CFNotificationCenterPostNotification(v16, @"com.apple.LaunchServices.DocumentTypesChanged", 0, 0, 1u);
      }
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v66 = 0u;
      long long v67 = 0u;
      long long v64 = 0u;
      long long v65 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      long long v61 = 0u;
      memset(buf, 0, sizeof(buf));
      _LSDatabaseGetHeader(buf);
      if ((DWORD2(v64) & 0x4000000) != 0)
      {
        id v17 = CFNotificationCenterGetDarwinNotifyCenter();
        CFNotificationCenterPostNotification(v17, @"com.apple.LaunchServices.URLTypesChanged", 0, 0, 1u);
      }
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v66 = 0u;
      long long v67 = 0u;
      long long v64 = 0u;
      long long v65 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      long long v61 = 0u;
      memset(buf, 0, sizeof(buf));
      _LSDatabaseGetHeader(buf);
      if ((DWORD2(v64) & 0x8000000) != 0)
      {
        uint64_t v18 = CFNotificationCenterGetDarwinNotifyCenter();
        CFNotificationCenterPostNotification(v18, @"com.apple.LaunchServices.TypeDeclarationsChanged", 0, 0, 1u);
      }
      int64x2_t v19 = _LSServer_DatabaseExecutionContext();
      *(void *)std::__fs::filesystem::path buf = MEMORY[0x1E4F143A8];
      *(void *)&uint8_t buf[8] = 3221225472;
      *(void *)&uint8_t buf[16] = ___ZL34_LSDatabasePostChangeNotificationsP11_LSDatabase_block_invoke;
      *(void *)&unsigned char buf[24] = &unk_1E522BB38;
      uint64_t v20 = v14;
      *(void *)&long long v61 = v20;
      -[LSDBExecutionContext performAsyncWrite:]((uint64_t)v19, buf);

      uint64_t v21 = CFNotificationCenterGetDarwinNotifyCenter();
      CFNotificationCenterPostNotificationWithOptions(v21, @"com.apple.LaunchServices.DatabaseChange", 0, 0, 0);
    }
    if ((v13 & 4) != 0)
    {
      *(_DWORD *)std::__fs::filesystem::path buf = -1163005939;
      int v22 = *((_DWORD *)v12 + 412);
      if (_LSGetConsoleOwnerUID((uid_t *)buf))
      {
        if (*(_DWORD *)buf != v22) {
          goto LABEL_23;
        }
      }
      else if (v22)
      {
        goto LABEL_23;
      }
      _LSSetKernelPackageExtensions();
    }
LABEL_23:
    if ((v13 & 1) == 0)
    {
      id v23 = 0;
      int v24 = 1;
LABEL_37:
      if ((v13 & 2) != 0 && v24)
      {
        int v31 = LSHandlerPref::Save((LSHandlerPref *)v12, v11);
        if (v31)
        {
          uint64_t v32 = _LSDatabaseGetLog();
          if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
          {
            int v33 = (void *)_LSSessionKeyCopyDescription(v12[206]);
            ___ZL26_LSArmSaveTimerWithTimeouthdU13block_pointerFvbP11_LSDatabaseP7NSErrorE_block_invoke_cold_2(v33, v59, v31, v32);
          }

          _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], v31, (uint64_t)"_LSSessionSave", 916, 0);
          id v23 = (id)objc_claimAutoreleasedReturnValue();
          LOBYTE(v24) = 0;
        }
        else
        {
          LOBYTE(v24) = 1;
        }
      }

      id v34 = v23;
      if ((v24 & 1) == 0)
      {
        int64_t v35 = _LSDatabaseGetLog();
        if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
          ___ZL26_LSArmSaveTimerWithTimeouthdU13block_pointerFvbP11_LSDatabaseP7NSErrorE_block_invoke_cold_1();
        }
      }
      uint64_t v37 = (void *)*((void *)&v54 + 1);
      for (uint64_t i = (void *)v54; i != v37; ++i)
      {
        uint64_t v38 = (void (**)(void, void, void, void))MEMORY[0x18530F950](*i);
        uint64_t v39 = (void *)MEMORY[0x18530F680]();
        ((void (**)(void, uint64_t, unint64_t *, id))v38)[2](v38, 1, v12, v34);
      }
      goto LABEL_52;
    }
    id v57 = 0;
    uint64_t v25 = v12;
    if (![(id)__LSDefaultsGetSharedInstance() isServer]
      || [(id)__LSDefaultsGetSharedInstance() isInSyncBubble])
    {
      _LSDatabaseCommit((uint64_t)v25);
LABEL_28:
      int v24 = 1;
LABEL_29:

      id v26 = v57;
      if (v24)
      {
        uint64_t v27 = _LSDatabaseGetLog();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          unint64_t v28 = (void *)_LSSessionKeyCopyDescription(v25[206]);
          *(_DWORD *)std::__fs::filesystem::path buf = 136446466;
          *(void *)&uint8_t buf[4] = "_LSSessionSave";
          *(_WORD *)&unsigned char buf[12] = 2112;
          *(void *)&buf[14] = v28;
          _os_log_impl(&dword_182959000, v27, OS_LOG_TYPE_DEFAULT, "%{public}s: saved database for session %@", buf, 0x16u);
        }
        id v23 = 0;
      }
      else
      {
        uint64_t v29 = _LSDatabaseGetLog();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          unsigned int v30 = (void *)_LSSessionKeyCopyDescription(v25[206]);
          ___ZL26_LSArmSaveTimerWithTimeouthdU13block_pointerFvbP11_LSDatabaseP7NSErrorE_block_invoke_cold_3(v30, (uint64_t)v26, buf, v29);
        }

        id v23 = v26;
      }

      goto LABEL_37;
    }
    id v40 = (id)v25[205];
    uint64_t v41 = [v40 pathWithError:&v57];

    if (v41)
    {
      int v42 = _CSStoreValidate();
      if (!v42)
      {
        uint64_t v43 = [v41 stringByAppendingString:@"_corrupt"];

        uint64_t v41 = (void *)v43;
      }
      long long v44 = (void *)[objc_alloc(MEMORY[0x1E4F1CB10]) initFileURLWithPath:v41 isDirectory:0];
      if (v44)
      {
        *(void *)std::__fs::filesystem::path buf = 0;
        _LSDatabaseGetFileResourceProperties();
        id v45 = *(const void **)buf;
        *(void *)std::__fs::filesystem::path buf = 0;
        if (v45) {
          CFRelease(v45);
        }
        int v46 = _CSStoreWriteToURL();
        if (v46)
        {
          _LSDatabaseSentinelFlush();
          if (!v42)
          {
            id v47 = _LSDatabaseGetLog();
            if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR)) {
              ___ZL26_LSArmSaveTimerWithTimeouthdU13block_pointerFvbP11_LSDatabaseP7NSErrorE_block_invoke_cold_5();
            }
          }
          id v48 = 0;
        }
        else
        {
          id v48 = *(id *)buf;
        }
        if (*(void *)buf) {
          CFRelease(*(CFTypeRef *)buf);
        }
        if (v46)
        {

          long long v49 = v25;
          if (-[_LSDatabase isSeeded]((uint64_t)v49))
          {
            MEMORY[0x185310450]();
            long long v70 = 0u;
            long long v71 = 0u;
            long long v68 = 0u;
            long long v69 = 0u;
            long long v66 = 0u;
            long long v67 = 0u;
            long long v64 = 0u;
            long long v65 = 0u;
            long long v62 = 0u;
            long long v63 = 0u;
            long long v61 = 0u;
            memset(buf, 0, sizeof(buf));
            _LSDatabaseGetHeader(buf);
            uint64_t v50 = v70;
            long long v51 = _LSServer_DatabaseExecutionContext();
            *(void *)std::__fs::filesystem::path buf = MEMORY[0x1E4F143A8];
            *(void *)&uint8_t buf[8] = 3221225472;
            *(void *)&uint8_t buf[16] = ___ZL16_LSDatabaseRemapP11_LSDatabaseU13block_pointerFvbP7NSErrorP8NSStringE_block_invoke;
            *(void *)&unsigned char buf[24] = &unk_1E522BCF0;
            *(void *)&long long v62 = v50;
            *(void *)&long long v61 = v49;
            *((void *)&v61 + 1) = &__block_literal_global_413;
            -[LSDBExecutionContext performAsyncWrite:]((uint64_t)v51, buf);
          }
          goto LABEL_28;
        }
      }
      else
      {
        _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -37, (uint64_t)"_LSDatabaseSave", 2487, 0);
        id v48 = (id)objc_claimAutoreleasedReturnValue();
      }
      id v52 = v48;
      id v57 = v52;
      long long v53 = _LSDatabaseGetLog();
      if (os_log_type_enabled(v53, OS_LOG_TYPE_FAULT)) {
        ___ZL26_LSArmSaveTimerWithTimeouthdU13block_pointerFvbP11_LSDatabaseP7NSErrorE_block_invoke_cold_4();
      }
    }
    int v24 = 0;
    goto LABEL_29;
  }
LABEL_52:
  v58[0] = (void **)&v54;
  std::vector<LSApplicationRecord * {__strong}>::__destroy_vector::operator()[abi:nn180100](v58);
}

void sub_182A35E08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,CFTypeRef cf,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (cf) {
    CFRelease(cf);
  }

  a14 = &a9;
  std::vector<LSApplicationRecord * {__strong}>::__destroy_vector::operator()[abi:nn180100]((void ***)&a14);

  _Unwind_Resume(a1);
}

void ___ZL26_LSArmSaveTimerWithTimeouthdU13block_pointerFvbP11_LSDatabaseP7NSErrorE_block_invoke_390(uint64_t a1)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = ___ZL26_LSArmSaveTimerWithTimeouthdU13block_pointerFvbP11_LSDatabaseP7NSErrorE_block_invoke_2;
  v2[3] = &unk_1E522D260;
  uint64_t v1 = *(os_unfair_lock_s **)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  -[LSDBExecutionContext syncRead:](v1, v2);
}

void sub_182A35FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL26_LSArmSaveTimerWithTimeouthdU13block_pointerFvbP11_LSDatabaseP7NSErrorE_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void std::vector<void({block_pointer} {__strong})(BOOL,_LSDatabase *,NSError *),std::allocator<void({block_pointer} {__strong})(BOOL,_LSDatabase *,NSError *)>>::__vdeallocate(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    id v3 = (char *)a1[1];
    char v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        unint64_t v5 = (void *)*((void *)v3 - 1);
        v3 -= 8;
      }
      while (v3 != v1);
      char v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void ___ZL34_LSDatabasePostChangeNotificationsP11_LSDatabase_block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id v22 = 0;
  int64x2_t v19 = 0;
  id v20 = 0;
  char v21 = 0;
  +[_LSDServiceDomain defaultServiceDomain]();
  long long v7 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  uint64_t v8 = (_LSDatabase **)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v19, v7, 0);

  if (!v8)
  {
    uint64_t v10 = _LSDefaultLog();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      +[_LSDServiceDomain defaultServiceDomain]();
      __int16 v16 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
      uint64_t v17 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v19, v16, 0);

      if (v17) {
        id v18 = 0;
      }
      else {
        id v18 = v22;
      }
      *(_DWORD *)std::__fs::filesystem::path buf = 136315394;
      int v24 = "_LSDatabasePostChangeNotifications_block_invoke";
      __int16 v25 = 2112;
      id v26 = v18;
      _os_log_error_impl(&dword_182959000, v10, OS_LOG_TYPE_ERROR, "could not connect to database in %s: %@", buf, 0x16u);
    }
    goto LABEL_6;
  }
  uint64_t v9 = *v8;
  if (*v8 != *(_LSDatabase **)(a1 + 32))
  {
    uint64_t v10 = _LSDefaultLog();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::__fs::filesystem::path buf = 0;
      _os_log_impl(&dword_182959000, v10, OS_LOG_TYPE_DEFAULT, "database was reset, not clearing change notification flags.", buf, 2u);
    }
LABEL_6:

    goto LABEL_12;
  }
  if (v9)
  {
    _LSDatabaseSetHeaderFlag(v9, 0x1000000, 0);
    uint64_t v11 = *(_LSDatabase **)(a1 + 32);
    if (v11)
    {
      _LSDatabaseSetHeaderFlag(v11, 0x2000000, 0);
      unint64_t v12 = *(_LSDatabase **)(a1 + 32);
      if (v12)
      {
        _LSDatabaseSetHeaderFlag(v12, 0x4000000, 0);
        int v13 = *(_LSDatabase **)(a1 + 32);
        if (v13) {
          _LSDatabaseSetHeaderFlag(v13, 0x8000000, 0);
        }
      }
    }
  }
LABEL_12:
  if (v19 && v21) {
    _LSContextDestroy(v19);
  }
  id v14 = v20;
  int64x2_t v19 = 0;
  id v20 = 0;

  char v21 = 0;
  id v15 = v22;
  id v22 = 0;
}

void sub_182A362B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v13 = v12;

  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a9);
  _Unwind_Resume(a1);
}

void ___ZL16_LSDatabaseRemapP11_LSDatabaseU13block_pointerFvbP7NSErrorP8NSStringE_block_invoke(uint64_t a1)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  os_unfair_recursive_lock_lock_with_options();
  LSSessionKey v2 = (LSSessionKey)_LSServer_SelfSessionKey();
  uint64_t v3 = _LSGetSession(v2);
  if (!*(void *)(v3 + 24))
  {
    os_unfair_recursive_lock_unlock();
    goto LABEL_9;
  }
  char v4 = (uint64_t *)(v3 + 24);
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  *(_OWORD *)std::__fs::filesystem::path buf = 0u;
  _LSDatabaseGetHeader(buf);
  uint64_t v5 = v38;
  LODWORD(v4) = -[_LSDatabase isSeeded](*v4);
  os_unfair_recursive_lock_unlock();
  if (!v4 || *(void *)(a1 + 48) != v5)
  {
LABEL_9:
    gSkippedRemap = 1;
    id v14 = _LSDatabaseGetLog();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::__fs::filesystem::path buf = 136446210;
      *(void *)&uint8_t buf[4] = "_LSDatabaseRemap_block_invoke";
      _os_log_impl(&dword_182959000, v14, OS_LOG_TYPE_DEFAULT, "%{public}s Skipping database remap because there are unsaved local changes", buf, 0xCu);
    }
LABEL_11:
    id v17 = 0;
    goto LABEL_12;
  }
  id v6 = *(id *)(a1 + 32);
  id v7 = *((id *)v6 + 205);
  uint64_t v8 = v7;
  if (v7)
  {
    *(void *)std::__fs::filesystem::path buf = 0;
    uint64_t v9 = (const void *)_LSCreateStoreWithFileContents(v7, buf);
    id v10 = *(id *)buf;
    uint64_t v11 = v10;
    if (v9)
    {
      uint64_t v12 = *((void *)v6 + 206);
      int v13 = (const void *)*((void *)v6 + 207);
      id v26 = v10;
      id v14 = _LSDatabaseCreateWithAccessContext(v8, v12, v9, v13, &v26);
      id v15 = v26;

      CFRelease(v9);
      if (v14)
      {
        _LSSchemaTransferCache((uint64_t)v6 + 16, (uint64_t)&v14[2]);
        -[_LSDatabase setAccessContext:](v14, *((CFTypeRef *)v6 + 207));

        id v16 = 0;
        goto LABEL_18;
      }
      uint64_t v11 = v15;
    }
  }
  else
  {
    uint64_t v11 = _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -50, (uint64_t)"_LSDatabaseCreateByRemappingDatabase", 1473, 0);
  }

  int64x2_t v19 = _LSDatabaseGetLog();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
    ___ZL16_LSDatabaseRemapP11_LSDatabaseU13block_pointerFvbP7NSErrorP8NSStringE_block_invoke_cold_3();
  }

  id v16 = v11;
  id v14 = 0;
  id v15 = v16;
LABEL_18:

  id v17 = v16;
  if (!v14)
  {
    id v20 = _LSDatabaseGetLog();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
      ___ZL16_LSDatabaseRemapP11_LSDatabaseU13block_pointerFvbP7NSErrorP8NSStringE_block_invoke_cold_2();
    }

    id v25 = v17;
    char v21 = _LSDatabaseCreateFromPersistentStore(7, 0, &v25);
    id v22 = v25;

    if (!v21)
    {
      int v24 = _LSDatabaseGetLog();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
        ___ZL16_LSDatabaseRemapP11_LSDatabaseU13block_pointerFvbP7NSErrorP8NSStringE_block_invoke_cold_1();
      }
      id v14 = 0;
      goto LABEL_31;
    }
    id v17 = v22;
    id v14 = v21;
  }
  if (-[_LSDatabase isSeeded]((uint64_t)v14))
  {

    id v23 = _LSServer_DatabaseExecutionContext();
    -[LSDBExecutionContext setServerDatabase:]((uint64_t)v23, v14);

    _LSDatabaseCommit((uint64_t)v14);
    if (gSkippedRemap == 1)
    {
      gSkippedRemap = 0;
      int v24 = _LSDatabaseGetLog();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::__fs::filesystem::path buf = 136446210;
        *(void *)&uint8_t buf[4] = "_LSDatabaseRemap_block_invoke";
        _os_log_impl(&dword_182959000, v24, OS_LOG_TYPE_DEFAULT, "%{public}s remapped the database after skipping a previous remap", buf, 0xCu);
      }
      id v22 = 0;
LABEL_31:

      id v17 = v22;
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_12:

  uint64_t v18 = (*(uint64_t (**)(void, BOOL, id, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), v17 == 0, v17, 0);
  MEMORY[0x185310460](v18);
}

void sub_182A36714(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL15_LSGetStoreNodev_block_invoke()
{
  uint64_t v0 = (void *)MEMORY[0x18530F680]();
  uint64_t v1 = [(id)__LSDefaultsGetSharedInstance() databaseStoreFileURL];
  if (v1)
  {
    LSSessionKey v2 = [[FSNode alloc] initWithURL:v1 flags:0 error:0];
    uint64_t v3 = (void *)_LSGetStoreNode(void)::result;
    _LSGetStoreNode(void)::id result = (uint64_t)v2;
  }
}

void sub_182A36820(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_4_1(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void OUTLINED_FUNCTION_7_0(float a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(float *)a3 = a1;
  *(void *)(a3 + 4) = a4;
  *(_WORD *)(a3 + 12) = 2048;
  *(void *)(a3 + 14) = v4;
}

id getAppProtectionServiceQueue(void)
{
  if (getAppProtectionServiceQueue(void)::sOnce != -1) {
    dispatch_once(&getAppProtectionServiceQueue(void)::sOnce, &__block_literal_global_23);
  }
  uint64_t v0 = (void *)getAppProtectionServiceQueue(void)::sQueue;

  return v0;
}

void ___Z28getAppProtectionServiceQueuev_block_invoke()
{
  LSSessionKey v2 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v0 = dispatch_queue_create("appProtectionServiceQueue", v2);
  uint64_t v1 = (void *)getAppProtectionServiceQueue(void)::sQueue;
  getAppProtectionServiceQueue(void)::sQueue = (uint64_t)v0;
}

void sub_182A36BA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A36C8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A36D38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A37024(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void computeAddedAndRemovedBundleIDs(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = [MEMORY[0x1E4F1CA80] setWithArray:v8];
  id v10 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v11 = v7;
  uint64_t v12 = [v11 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v12)
  {
    uint64_t v13 = *(void *)v19;
    do
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        if (*(void *)v19 != v13) {
          objc_enumerationMutation(v11);
        }
        uint64_t v15 = *(void *)(*((void *)&v18 + 1) + 8 * i);
        [v9 removeObject:v15];
        if (([v8 containsObject:v15] & 1) == 0) {
          [v10 addObject:v15];
        }
      }
      uint64_t v12 = [v11 countByEnumeratingWithState:&v18 objects:v22 count:16];
    }
    while (v12);
  }

  id v16 = v9;
  *a1 = v16;
  id v17 = v10;
  *a2 = v17;
}

void sub_182A3724C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void notifyLSObservers(void *a1, void *a2, char a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  uint64_t v9 = +[LSDBExecutionContext sharedServerInstance]();
  uint64_t v17 = 0;
  long long v18 = &v17;
  uint64_t v19 = 0x3032000000;
  long long v20 = __Block_byref_object_copy__17;
  long long v21 = __Block_byref_object_dispose__17;
  id v22 = 0;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  void v12[2] = ___ZL17notifyLSObserversP5NSSetS0_bPU15__autoreleasingP7NSError_block_invoke;
  void v12[3] = &unk_1E522E4E0;
  id v10 = v7;
  id v13 = v10;
  char v16 = a3;
  id v11 = v8;
  id v14 = v11;
  uint64_t v15 = &v17;
  -[LSDBExecutionContext syncWrite:]((uint64_t)v9, v12);
  *a4 = (id) v18[5];

  _Block_object_dispose(&v17, 8);
}

void sub_182A373E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_182A376C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A379A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A37AFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A37BA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A37C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A37CD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A37E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_182A37FC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A3808C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A38114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A381B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A3823C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A385A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void ___ZL17notifyLSObserversP5NSSetS0_bPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  CurrentContext = (void **)_LSDatabaseContextGetCurrentContext(v6);
  id v28 = 0;
  char v29 = 0;
  id v30 = 0;
  +[_LSDServiceDomain defaultServiceDomain]();
  id v7 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  id v8 = (LSContext *)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&CurrentContext, v7, 0);

  if (v8)
  {
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    id v9 = *(id *)(a1 + 32);
    uint64_t v10 = [v9 countByEnumeratingWithState:&v23 objects:v32 count:16];
    if (v10)
    {
      uint64_t v11 = *(void *)v24;
      do
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          if (*(void *)v24 != v11) {
            objc_enumerationMutation(v9);
          }
          updateProtectedBundleFlag(v8, *(NSString **)(*((void *)&v23 + 1) + 8 * i));
        }
        uint64_t v10 = [v9 countByEnumeratingWithState:&v23 objects:v32 count:16];
      }
      while (v10);
    }

    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    id v13 = *(id *)(a1 + 40);
    uint64_t v14 = [v13 countByEnumeratingWithState:&v19 objects:v31 count:16];
    if (v14)
    {
      uint64_t v15 = *(void *)v20;
      do
      {
        for (uint64_t j = 0; j != v14; ++j)
        {
          if (*(void *)v20 != v15) {
            objc_enumerationMutation(v13);
          }
          updateProtectedBundleFlag(v8, *(NSString **)(*((void *)&v19 + 1) + 8 * j));
        }
        uint64_t v14 = [v13 countByEnumeratingWithState:&v19 objects:v31 count:16];
      }
      while (v14);
    }

    _LSArmSaveTimer(1);
    _LSDatabaseCommit((uint64_t)v8->db);
    if (v6) {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), a3);
    }
  }
  if (CurrentContext && v29) {
    _LSContextDestroy(CurrentContext);
  }
  id v17 = v28;
  CurrentContext = 0;
  id v28 = 0;

  char v29 = 0;
  id v18 = v30;
  id v30 = 0;
}

void sub_182A3883C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,void *a28)
{
  _Unwind_Resume(a1);
}

void updateProtectedBundleFlag(LSContext *a1, NSString *a2)
{
  uint64_t v3 = a2;
  LSSessionKey v2 = v3;
  _CSStoreEnumerateUnits();
}

void sub_182A38990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL25updateProtectedBundleFlagP9LSContextP8NSStringbb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = _CSGetStringForCFString();
  if (result && *(_DWORD *)(a3 + 12) == result)
  {
    return _LSBundleSetMoreFlags();
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_1_6(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  *(float *)uint64_t result = a4;
  *(void *)(result + 4) = a2;
  *(_WORD *)(result + 12) = 2048;
  *(void *)(result + 14) = a3;
  return result;
}

void sub_182A38AF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A38BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_182A38E94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A390CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A3926C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_182A393F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL47dispatchEnumerateAndRegisterWithDiagnosticFramet_block_invoke()
{
  std::__function::__func<BOOL (*)(objc_object *),std::allocator<BOOL (*)(objc_object *)>,BOOL ()(objc_object *)>::~__func(__LAUNCH_SERVICES_IS_REBUILDING_THE_DATABASE_BECAUSE_CREATION_FROM_STORE_FAILED__);
  std::__function::__func<BOOL (*)(objc_object *),std::allocator<BOOL (*)(objc_object *)>,BOOL ()(objc_object *)>::~__func(__LAUNCH_SERVICES_IS_REBUILDING_THE_DATABASE_BECAUSE_IT_WAS_CORRUPT__);
  std::__function::__func<BOOL (*)(objc_object *),std::allocator<BOOL (*)(objc_object *)>,BOOL ()(objc_object *)>::~__func(__LAUNCH_SERVICES_IS_REBUILDING_THE_DATABASE_BECAUSE_IT_DID_NOT_EXIST__);
  std::__function::__func<BOOL (*)(objc_object *),std::allocator<BOOL (*)(objc_object *)>,BOOL ()(objc_object *)>::~__func(__LAUNCH_SERVICES_IS_REBUILDING_THE_DATABASE_BECAUSE_A_RECOVERY_FILE_EXISTED__);
  std::__function::__func<BOOL (*)(objc_object *),std::allocator<BOOL (*)(objc_object *)>,BOOL ()(objc_object *)>::~__func(__LAUNCH_SERVICES_IS_REBUILDING_THE_DATABASE_BECAUSE_ALLOC_FAILED_DURING_STORE_CREATION__);
  std::__function::__func<BOOL (*)(objc_object *),std::allocator<BOOL (*)(objc_object *)>,BOOL ()(objc_object *)>::~__func(__LAUNCH_SERVICES_IS_REBUILDING_THE_DATABASE_BECAUSE_STORE_CREATION_FAILED_UNEXPECTEDLY__);
  std::__function::__func<BOOL (*)(objc_object *),std::allocator<BOOL (*)(objc_object *)>,BOOL ()(objc_object *)>::~__func(__LAUNCH_SERVICES_IS_REBUILDING_THE_DATABASE_BECAUSE_CREATION_FROM_FRESH_FAILED__);
  std::__function::__func<BOOL (*)(objc_object *),std::allocator<BOOL (*)(objc_object *)>,BOOL ()(objc_object *)>::~__func(__LAUNCH_SERVICES_IS_REBUILDING_THE_DATABASE_BECAUSE_THE_DATABASE_WAS_CREATED_FRESH__);

  return std::__function::__func<BOOL (*)(objc_object *),std::allocator<BOOL (*)(objc_object *)>,BOOL ()(objc_object *)>::~__func(__LAUNCH_SERVICES_IS_REBUILDING_THE_DATABASE_UNEXPECTEDLY__);
}

uint64_t __LAUNCH_SERVICES_IS_REBUILDING_THE_DATABASE_BECAUSE_CREATION_FROM_STORE_FAILED__(__int16 a1)
{
  return _LSServer_LSEnumerateAndRegisterAllBundles(0, a1);
}

uint64_t __LAUNCH_SERVICES_IS_REBUILDING_THE_DATABASE_BECAUSE_IT_WAS_CORRUPT__(__int16 a1)
{
  return _LSServer_LSEnumerateAndRegisterAllBundles(0, a1);
}

uint64_t __LAUNCH_SERVICES_IS_REBUILDING_THE_DATABASE_BECAUSE_IT_DID_NOT_EXIST__(__int16 a1)
{
  return _LSServer_LSEnumerateAndRegisterAllBundles(0, a1);
}

uint64_t __LAUNCH_SERVICES_IS_REBUILDING_THE_DATABASE_BECAUSE_A_RECOVERY_FILE_EXISTED__(__int16 a1)
{
  return _LSServer_LSEnumerateAndRegisterAllBundles(0, a1);
}

uint64_t __LAUNCH_SERVICES_IS_REBUILDING_THE_DATABASE_BECAUSE_ALLOC_FAILED_DURING_STORE_CREATION__(__int16 a1)
{
  return _LSServer_LSEnumerateAndRegisterAllBundles(0, a1);
}

uint64_t __LAUNCH_SERVICES_IS_REBUILDING_THE_DATABASE_BECAUSE_STORE_CREATION_FAILED_UNEXPECTEDLY__(__int16 a1)
{
  return _LSServer_LSEnumerateAndRegisterAllBundles(0, a1);
}

uint64_t __LAUNCH_SERVICES_IS_REBUILDING_THE_DATABASE_BECAUSE_CREATION_FROM_FRESH_FAILED__(__int16 a1)
{
  return _LSServer_LSEnumerateAndRegisterAllBundles(0, a1);
}

uint64_t __LAUNCH_SERVICES_IS_REBUILDING_THE_DATABASE_BECAUSE_THE_DATABASE_WAS_CREATED_FRESH__(__int16 a1)
{
  return _LSServer_LSEnumerateAndRegisterAllBundles(0, a1);
}

uint64_t __LAUNCH_SERVICES_IS_REBUILDING_THE_DATABASE_UNEXPECTEDLY__(__int16 a1)
{
  return _LSServer_LSEnumerateAndRegisterAllBundles(0, a1);
}

void *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = (unsigned __int8 *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t)v28, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(void **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100](a1 + 32, (unsigned __int8 *)i + 16, v5)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v3) {
            break;
          }
        }
      }
    }
  }
  id v17 = (void *)(a1 + 16);
  uint64_t i = operator new(0x28uLL);
  uint64_t v29 = a1 + 16;
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v10;
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  *((void *)i + 4) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  char v30 = 1;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v11 || (float)(v19 * (float)v11) < v18)
  {
    BOOL v20 = 1;
    if (v11 >= 3) {
      BOOL v20 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v11);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>(a1, v23);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v3 = v10 % v11;
      }
      else {
        unint64_t v3 = v10;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v10;
    }
  }
  uint64_t v24 = *(void *)a1;
  long long v25 = *(void **)(*(void *)a1 + 8 * v3);
  if (v25)
  {
    *(void *)uint64_t i = *v25;
LABEL_41:
    *long long v25 = i;
    goto LABEL_42;
  }
  *(void *)uint64_t i = *v17;
  *id v17 = i;
  *(void *)(v24 + 8 * v3) = v17;
  if (*(void *)i)
  {
    unint64_t v26 = *(void *)(*(void *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v26 >= v11) {
        v26 %= v11;
      }
    }
    else
    {
      v26 &= v11 - 1;
    }
    long long v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_41;
  }
LABEL_42:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_182A39884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:nn180100](v11, v10);
  _Unwind_Resume(a1);
}

uint64_t std::equal_to<std::string>::operator()[abi:nn180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unint64_t v3 = a3;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = a3[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a3 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 < 0) {
    unint64_t v3 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a2, v3, *((void *)a2 + 1)) == 0;
  }
  if (!a2[23]) {
    return 1;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a2++;
    int v9 = v10;
    int v12 = *v3++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    uint64_t result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v11 = v7 + v9;
      unint64_t v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      unint64_t v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      unint64_t v14 = v8 + a3 + v7 + v4;
      uint64_t v15 = v14 + v5;
      unint64_t v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      uint64_t v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v18 = v17 + v6 + v9;
      uint64_t v19 = __ROR8__(v18, 44);
      uint64_t v20 = v18 + v10;
      uint64_t v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      uint64_t v23 = *a2;
      unint64_t v22 = a2 + 4;
      unint64_t v24 = v23 - 0x4B6D499041670D8DLL * v5;
      uint64_t v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v26 = *(v22 - 3);
        uint64_t v27 = v24 + v15 + v11 + v26;
        uint64_t v28 = v22[2];
        uint64_t v29 = v22[3];
        uint64_t v30 = v22[1];
        unint64_t v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        uint64_t v31 = v13 + v20;
        uint64_t v32 = *(v22 - 2);
        uint64_t v33 = *(v22 - 1);
        uint64_t v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        uint64_t v35 = v34 + v20 + v33;
        uint64_t v36 = v34 + v26 + v32;
        uint64_t v15 = v36 + v33;
        uint64_t v37 = __ROR8__(v36, 44) + v34;
        unint64_t v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        unint64_t v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        unint64_t v16 = v37 + __ROR8__(v35 + v38, 21);
        unint64_t v39 = v24 + v21 + *v22;
        uint64_t v20 = v39 + v30 + v28 + v29;
        uint64_t v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        unint64_t v13 = v38;
        v25 += 64;
      }
      while (v25);
      unint64_t v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      unint64_t v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:nn180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:nn180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:nn180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:nn180100](_DWORD *a1, unint64_t a2)
{
  if (a2 < 9)
  {
    if (a2 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        unint64_t v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      uint64_t v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    uint64_t v3 = *(void *)((char *)a1 + a2 - 8);
    uint64_t v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:nn180100](void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = 0xB492B66FBE98F273 * *a1;
  uint64_t v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  unint64_t v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8);
  unint64_t v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(void *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:nn180100](void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)((char *)a1 + a2 - 16);
  uint64_t v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v6 = __ROR8__(v3 + v4, 52);
  uint64_t v7 = v3 + a1[1];
  uint64_t v8 = __ROR8__(v7, 7);
  uint64_t v9 = v7 + v5;
  uint64_t v10 = *(void *)((char *)a1 + a2 - 32) + v5;
  uint64_t v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  uint64_t v12 = *(void *)((char *)a1 + a2 - 24) + v10 + v2;
  unint64_t v13 = 0xC3A5C85C97CB3127 * (v12 + *(void *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(void *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(void *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:nn180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void sub_182A39E40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSDatabaseContextAccessWithDomainUsingBlock(LaunchServices::DatabaseContext *a1, uint64_t a2, uint64_t a3)
{
  id v7 = 0;
  uint64_t started = _LSDatabaseContextStartAccessingWithDomain(a1, a2, &v7);
  id v5 = v7;
  uint64_t v6 = (LaunchServices::DatabaseContext *)(*(uint64_t (**)(uint64_t, uint64_t, id))(a3 + 16))(a3, started, v5);
  if (started) {
    _LSDatabaseContextStopAccessing(v6);
  }
}

void sub_182A39F64(_Unwind_Exception *a1)
{
  if (v2) {
    objc_end_catch();
  }

  _Unwind_Resume(a1);
}

void _LSDatabaseContextAccessUsingBlock(const unsigned int *a1, uint64_t a2, uint64_t a3)
{
  uidPointerToDomain(a1);
  id v5 = (LaunchServices::DatabaseContext *)objc_claimAutoreleasedReturnValue();
  _LSDatabaseContextAccessWithDomainUsingBlock(v5, a2, a3);
}

void sub_182A39FFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _LSDatabaseContextAccessContextUsingBlock(LaunchServices::DatabaseContext *a1, uint64_t a2)
{
  PerThreadStateReference = (uint64_t *)LaunchServices::DatabaseContext::getPerThreadStateReference(a1);
  if (PerThreadStateReference[4] >= 1)
  {
    uint64_t v9 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v10 = objc_msgSend(NSString, "stringWithUTF8String:", "void _LSDatabaseContextAccessContextUsingBlock(LSContext * _Nonnull, void (^const __strong _Nonnull)())");
    [v9 handleFailureInFunction:v10 file:@"LSDatabaseContext.mm" lineNumber:251 description:@"Already accessing a database context when asked to access one explicitly. The results of this operation are undefined."];
  }
  uint64_t v11 = (void **)a1;
  id v12 = 0;
  char v13 = 0;
  id v14 = 0;
  LaunchServices::Database::Context::operator=((uint64_t)PerThreadStateReference, (uint64_t)&v11);
  if (v11 && v13) {
    _LSContextDestroy(v11);
  }
  id v5 = v12;
  uint64_t v11 = 0;
  id v12 = 0;

  char v13 = 0;
  id v6 = v14;
  id v14 = 0;

  PerThreadStateReference[4] = 1;
  (*(void (**)(uint64_t))(a2 + 16))(a2);
  PerThreadStateReference[4] = 0;
  if (*PerThreadStateReference && *((unsigned char *)PerThreadStateReference + 16)) {
    _LSContextDestroy((void **)*PerThreadStateReference);
  }
  id v7 = (void *)PerThreadStateReference[1];
  uint64_t *PerThreadStateReference = 0;
  PerThreadStateReference[1] = 0;

  *((unsigned char *)PerThreadStateReference + 16) = 0;
  uint64_t v8 = (void *)PerThreadStateReference[3];
  PerThreadStateReference[3] = 0;
}

void sub_182A3A160(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unsigned char *_LSDatabaseContextSetDetachProxyObjects(LaunchServices::DatabaseContext *a1)
{
  char v1 = a1 ^ 1;
  unint64_t result = LaunchServices::DatabaseContext::getPerThreadStateReference(a1);
  result[40] = v1;
  return result;
}

void sub_182A3A348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_182A3A444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A3A52C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_182A3A628(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id systemIfExistsElseDefaultServiceDomain(void)
{
  if (xpc_user_sessions_enabled() && _os_feature_enabled_impl())
  {
    dispatch_queue_t v0 = +[_LSDServiceDomain systemSessionDomain]();
  }
  else
  {
    dispatch_queue_t v0 = +[_LSDServiceDomain defaultServiceDomain]();
  }

  return v0;
}

void sub_182A3A6F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A3A754(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A3A7C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _LSContextCreateVisualizer(uint64_t a1)
{
}

void sub_182A3B224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::~__hash_table(v67);
  std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::~__hash_table((uint64_t)&a37);
  _Block_object_dispose(&a49, 8);
  std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::~__hash_table(a11);
  _Block_object_dispose(&a60, 8);
  if (__p)
  {
    a67 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__14(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::__hash_table(a1 + 48, (uint64_t *)(a2 + 48));
}

uint64_t __Block_byref_object_dispose__15(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::~__hash_table(a1 + 48);
}

void sub_182A3B69C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  LaunchServices::DumpWriter::~DumpWriter((id *)va);
  _Unwind_Resume(a1);
}

void _LSServer_BeginProvidingVisualizationArchives()
{
  _LSAssertRunningInServer((uint64_t)"void _LSServer_BeginProvidingVisualizationArchives()");
  if ([(id)__LSDefaultsGetSharedInstance() isAppleInternal])
  {
    if (_LSServer_BeginProvidingVisualizationArchives::onceToken != -1) {
      dispatch_once(&_LSServer_BeginProvidingVisualizationArchives::onceToken, &__block_literal_global_45);
    }
    dispatch_queue_t v0 = (void *)MEMORY[0x1E4F5D0F0];
    id v1 = [(id)__LSDefaultsGetSharedInstance() serviceNameForConnectionType:9];
    objc_msgSend(v0, "beginProvidingVisualizationArchivesWithMachServiceName:queue:creatingVisualizersWithBlock:");
  }
}

void sub_182A3B7A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A3B918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_182A3BAC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);

  CFRelease(v5);
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)va);

  _Unwind_Resume(a1);
}

uint64_t _LSDisplayHumanReadableData(uint64_t *a1, FILE *a2, void *a3, void *a4, void *a5, uint64_t a6, void *a7)
{
  id v12 = a3;
  id v27 = a4;
  id v29 = a5;
  int CatalogTable = _CSStoreGetCatalogTable();
  if (LaunchServices::DatabaseVisualization::shouldDumpTable(a1, v12, CatalogTable, a6)) {
    BOOL v14 = v29 == 0;
  }
  else {
    BOOL v14 = 0;
  }
  if (!v14 || (a6 & 0x12) != 0) {
    goto LABEL_8;
  }
  uint64_t v23 = (NSMutableAttributedString *)objc_alloc_init(MEMORY[0x1E4F28E48]);
  if (!v23) {
    goto LABEL_8;
  }
  LaunchServices::DumpWriter::DumpWriter((LaunchServices::DumpWriter *)v34, (_LSDatabase *)*a1, v23);
  LOBYTE(v33.__begin_) = 0;
  _LSDatabaseDisplayHeader((CSStore2::AttributedStringWriter *)v34, (void *)*a1, &v33);
  BOOL v24 = LOBYTE(v33.__begin_) || _LSGetNSErrorFromOSStatusImpl(-10817, a7, (uint64_t)"_LSDisplayHumanReadableData", 267);
  [(NSMutableAttributedString *)v23 cs_writeToFileHandle:a2];
  fputc(10, a2);
  LaunchServices::DumpWriter::~DumpWriter(v34);

  if (!v24)
  {
    uint64_t v21 = 0;
  }
  else
  {
LABEL_8:
    if ((a6 & 2) == 0) {
      _LSContextCreateVisualizer((uint64_t)a1);
    }
    unint64_t v16 = (void *)[objc_alloc(MEMORY[0x1E4F5D0F8]) initWithStore:*(void *)(*a1 + 8) useStandardTableFunctions:0];
    if (!v16)
    {
      uint64_t v25 = [MEMORY[0x1E4F28B00] currentHandler];
      uint64_t v26 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL _LSDisplayHumanReadableData(LSContext * _Nonnull, FILE * _Nonnull, NSSet<NSString *> *__strong _Nullable, NSSet<NSString *> *__strong _Nullable, NSPredicate *__strong _Nullable, _LSDisplayDataOptions, NSError *__autoreleasing * _Nullable)");
      [v25 handleFailureInFunction:v26 file:@"LSDatabaseVisualization.mm" lineNumber:289 description:@"Failed to create database visualizer."];
    }
    uint64_t v17 = [NSNumber numberWithUnsignedInt:a6];
    uint64_t v18 = [v16 userInfo];
    [v18 setObject:v17 forKeyedSubscript:@"Options"];

    v34[0] = 0;
    v34[1] = v34;
    void v34[2] = (id)0x2020000000;
    char v35 = 1;
    if ((a6 & 0x10) != 0) {
      fputc(91, a2);
    }
    LaunchServices::DatabaseVisualization::getTablesToDisplay(a1, v12, a6, &v33);
    std::vector<unsigned int>::pointer begin = v33.__begin_;
    std::vector<unsigned int>::pointer end = v33.__end_;
    if (v33.__begin_ != v33.__end_)
    {
      do
      {
        id v30 = v16;
        id v31 = v27;
        id v32 = v29;
        _CSStoreEnumerateUnits();

        ++begin;
      }
      while (begin != end);
      std::vector<unsigned int>::pointer begin = v33.__begin_;
    }
    if (begin)
    {
      v33.__end_ = begin;
      operator delete(begin);
    }
    if ((a6 & 0x10) != 0) {
      fputc(93, a2);
    }
    _Block_object_dispose(v34, 8);

    uint64_t v21 = 1;
  }

  return v21;
}

void sub_182A3BEE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,char a27)
{
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::DatabaseVisualization::shouldDumpTable(uint64_t *a1, void *a2, int a3, char a4)
{
  id v7 = a2;
  uint64_t v8 = v7;
  if (v7)
  {
    if ([v7 containsObject:@"*"])
    {
      uint64_t v9 = 1;
    }
    else
    {
      uint64_t v10 = (void *)_CSStoreCopyTableName();
      uint64_t v9 = [v8 containsObject:v10];
    }
    goto LABEL_9;
  }
  if (_CSStoreGetStringTable() == a3 || *(_DWORD *)(*a1 + 1612) == a3 || *(_DWORD *)(*a1 + 40) == a3)
  {
LABEL_7:
    uint64_t v9 = 0;
    goto LABEL_9;
  }
  int ArrayTable = _CSStoreGetArrayTable();
  if ((a4 & 1) != 0 || ArrayTable == a3)
  {
    if (ArrayTable == a3) {
      goto LABEL_7;
    }
    uint64_t v13 = *a1;
  }
  else
  {
    uint64_t v13 = *a1;
    if (*(_DWORD *)(*a1 + 1600) == a3) {
      goto LABEL_7;
    }
  }
  BOOL v14 = (_DWORD *)(v13 + 16);
  if (v14[400] == a3 || v14[401] == a3 || v14[402] == a3) {
    goto LABEL_7;
  }
  uint64_t v15 = 30;
  do
  {
    int v16 = v14[v15];
    uint64_t v9 = v16 != a3;
    if (v16 == a3) {
      break;
    }
    BOOL v17 = v15 == 368;
    v15 += 26;
  }
  while (!v17);
LABEL_9:

  return v9;
}

void sub_182A3C154(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void LaunchServices::DatabaseVisualization::getTablesToDisplay(uint64_t *a1@<X0>, void *a2@<X1>, char a3@<W2>, std::vector<unsigned int> *a4@<X8>)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  uint64_t v7 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = (const std::vector<unsigned int> *)&v25;
  uint64_t v27 = 0x4812000000;
  uint64_t v28 = __Block_byref_object_copy__18;
  id v29 = __Block_byref_object_dispose__18;
  id v30 = &unk_182B5933F;
  id v32 = 0;
  uint64_t v33 = 0;
  std::__fs::filesystem::path __p = 0;
  uint64_t v8 = *a1 + 16;
  int v9 = *(_DWORD *)(*a1 + 1596);
  v34[0] = *(_DWORD *)(*a1 + 20);
  v34[1] = v9;
  uint64_t v35 = *(void *)(v8 + 1588);
  int v36 = *(_DWORD *)(v8 + 1576);
  do
  {
    int v10 = v34[v7];
    if (LaunchServices::DatabaseVisualization::shouldDumpTable(a1, v6, v10, a3))
    {
      uint64_t v11 = v26;
      std::vector<unsigned int>::pointer end = (char *)v26[2].__end_;
      value = v26[2].__end_cap_.__value_;
      if (end >= (char *)value)
      {
        std::vector<unsigned int>::pointer begin = v26[2].__begin_;
        uint64_t v16 = (end - (char *)begin) >> 2;
        unint64_t v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 62) {
          abort();
        }
        uint64_t v18 = (char *)value - (char *)begin;
        if (v18 >> 1 > v17) {
          unint64_t v17 = v18 >> 1;
        }
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v17;
        }
        if (v19)
        {
          uint64_t v20 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)&v26[2].__end_cap_, v19);
          std::vector<unsigned int>::pointer begin = v11[2].__begin_;
          std::vector<unsigned int>::pointer end = (char *)v11[2].__end_;
        }
        else
        {
          uint64_t v20 = 0;
        }
        uint64_t v21 = (int *)&v20[4 * v16];
        int *v21 = v10;
        BOOL v14 = (unsigned int *)(v21 + 1);
        while (end != (char *)begin)
        {
          int v22 = *((_DWORD *)end - 1);
          end -= 4;
          *--uint64_t v21 = v22;
        }
        v11[2].__begin_ = (std::vector<unsigned int>::pointer)v21;
        v11[2].__end_ = v14;
        v11[2].__end_cap_.__value_ = (unsigned int *)&v20[4 * v19];
        if (begin) {
          operator delete(begin);
        }
      }
      else
      {
        *(_DWORD *)std::vector<unsigned int>::pointer end = v10;
        BOOL v14 = (unsigned int *)(end + 4);
      }
      v11[2].__end_ = v14;
    }
    ++v7;
  }
  while (v7 != 5);
  id v23 = v6;
  _CSStoreEnumerateTables();
  std::vector<LSBundleClass>::vector(a4, v26 + 2);

  _Block_object_dispose(&v25, 8);
  if (__p)
  {
    id v32 = __p;
    operator delete(__p);
  }
}

void sub_182A3C410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  _Block_object_dispose(&a19, 8);
  if (__p)
  {
    a26 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_182A3CA30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34)
{
  _Block_object_dispose(&a27, 8);
  if (__p)
  {
    a34 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

BOOL _LSDisplayMachineReadableData(uint64_t *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  id v11 = a3;
  id v12 = a4;
  if ((a5 & 2) == 0) {
    _LSContextCreateVisualizer((uint64_t)a1);
  }
  uint64_t v13 = (void *)[objc_alloc(MEMORY[0x1E4F5D0F8]) initWithStore:*(void *)(*a1 + 8) useStandardTableFunctions:0];
  if (!v13)
  {
    uint64_t v21 = [MEMORY[0x1E4F28B00] currentHandler];
    int v22 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL _LSDisplayMachineReadableData(LSContext * _Nonnull, FILE * _Nonnull, NSSet<NSString *> *__strong _Nullable, NSPredicate *__strong _Nullable, _LSDisplayDataOptions, NSError *__autoreleasing * _Nullable)");
    [v21 handleFailureInFunction:v22 file:@"LSDatabaseVisualization.mm" lineNumber:326 description:@"Failed to create database visualizer."];
  }
  BOOL v14 = [NSNumber numberWithUnsignedInt:a5];
  uint64_t v15 = [v13 userInfo];
  [v15 setObject:v14 forKeyedSubscript:@"Options"];

  uint64_t v16 = (void *)[objc_alloc(MEMORY[0x1E4F5D0F0]) initWithVisualizer:v13 fileHandle:a2 closeWhenDone:0 error:a6];
  unint64_t v17 = v16;
  if (v16)
  {
    [v16 setUnitDescriptionPredicate:v12];
    LaunchServices::DatabaseVisualization::getTablesToDisplay(a1, v11, a5, &v23);
    std::vector<unsigned int>::pointer begin = v23.__begin_;
    std::vector<unsigned int>::pointer end = v23.__end_;
    if (v23.__begin_ != v23.__end_)
    {
      do
        [v17 writeAllUnitsInTable:*begin++ block:0];
      while (begin != end);
      std::vector<unsigned int>::pointer begin = v23.__begin_;
    }
    if (begin)
    {
      v23.__end_ = begin;
      operator delete(begin);
    }
    [v17 finishWriting];
  }

  return v17 != 0;
}

void sub_182A3CD78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

BOOL _LSDisplayHumanReadableCopyOfMachineReadableData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  return _LSGetNSErrorFromOSStatusImpl(-4, a7, (uint64_t)"_LSDisplayHumanReadableCopyOfMachineReadableData", 511);
}

uint64_t LaunchServices::DatabaseVisualization::writeTableDescription(void **this, LSContext *a2, int a3, CSStore2::AttributedStringWriter *a4, LaunchServices::DumpWriter *a5)
{
  id v6 = (char *)*this + 16;
  if (*v6 == a3)
  {
    _LSDatabaseDisplayHeader(a4, *this, 0);
  }
  else
  {
    if (*((_DWORD *)*this + 10) != a3)
    {
      uint64_t v7 = 30;
      while (v6[v7] != a3)
      {
        v7 += 26;
        if (v7 == 394) {
          return 0;
        }
      }
    }
    int v9 = (NSAttributedString *)_CSMapCopyDebugDescription();
    CSStore2::AttributedStringWriter::attributedString(a4, v9);
  }
  return 1;
}

void sub_182A3CEEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN14LaunchServices21DatabaseVisualizationL14getAllHandlersEP9LSContext_block_invoke(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v5 = a2;
  if (!std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::find<unsigned int>((void *)(a1 + 32), &v5))
  {
    uint64_t v4 = _LSDefaultLog();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
      ___ZN14LaunchServices21DatabaseVisualizationL14getAllHandlersEP9LSContext_block_invoke_cold_1(a3, v4);
    }
  }
}

uint64_t __copy_helper_block_ea8_32c130_ZTSNSt3__113unordered_mapIj38_LSDatabaseTableVisualizationFunctionsNS_4hashIjEENS_8equal_toIjEENS_9allocatorINS_4pairIKjS1_EEEEEE(uint64_t a1, uint64_t a2)
{
  return std::unordered_map<unsigned int,_LSDatabaseTableVisualizationFunctions>::unordered_map(a1 + 32, a2 + 32);
}

uint64_t __destroy_helper_block_ea8_32c130_ZTSNSt3__113unordered_mapIj38_LSDatabaseTableVisualizationFunctionsNS_4hashIjEENS_8equal_toIjEENS_9allocatorINS_4pairIKjS1_EEEEEE(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::~__hash_table(a1 + 32);
}

void *std::__hash_table<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    int v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      id v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          id v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  id v11 = operator new(0x30uLL);
  void *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  void v11[4] = 0;
  void v11[5] = 0;
  v11[3] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    void *v11 = *v20;
LABEL_38:
    void *v20 = v11;
    goto LABEL_39;
  }
  void *v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    uint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_182A3D194(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<unsigned int,_LSDatabaseTableVisualizationFunctions>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned int **)(a2 + 16); i; uint64_t i = *(unsigned int **)i)
    std::__hash_table<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,_LSDatabaseTableVisualizationFunctions> const&>(a1, i + 4, (_OWORD *)i + 1);
  return a1;
}

void sub_182A3D208(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,_LSDatabaseTableVisualizationFunctions> const&>(uint64_t a1, unsigned int *a2, _OWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint8x8_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      int v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          int v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  int v10 = operator new(0x30uLL);
  *int v10 = 0;
  v10[1] = v6;
  long long v12 = a3[1];
  *((_OWORD *)v10 + 1) = *a3;
  *((_OWORD *)v10 + 2) = v12;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *int v10 = *v20;
LABEL_38:
    void *v20 = v10;
    goto LABEL_39;
  }
  *int v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v19 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v21 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    uint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_182A3D42C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZN14LaunchServices21DatabaseVisualizationL18getTablesToDisplayEP9LSContextP5NSSetIP8NSStringEj_block_invoke(uint64_t a1, int a2)
{
  unsigned int v5 = *(_DWORD **)(*(void *)(*(void *)(a1 + 40) + 8) + 48);
  unint64_t v4 = *(_DWORD **)(*(void *)(*(void *)(a1 + 40) + 8) + 56);
  while (v5 != v4)
  {
    if (*v5 == a2) {
      goto LABEL_6;
    }
    ++v5;
  }
  unsigned int v5 = *(_DWORD **)(*(void *)(*(void *)(a1 + 40) + 8) + 56);
LABEL_6:
  if (v4 == v5
    && LaunchServices::DatabaseVisualization::shouldDumpTable(*(uint64_t **)(a1 + 48), *(void **)(a1 + 32), a2, *(_DWORD *)(a1 + 56)))
  {
    unint64_t v6 = *(void **)(*(void *)(a1 + 40) + 8);
    unint64_t v7 = (int *)v6[7];
    unint64_t v8 = v6[8];
    if ((unint64_t)v7 >= v8)
    {
      int v10 = (int *)v6[6];
      uint64_t v11 = v7 - v10;
      unint64_t v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 62) {
        abort();
      }
      uint64_t v13 = v8 - (void)v10;
      if (v13 >> 1 > v12) {
        unint64_t v12 = v13 >> 1;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14)
      {
        BOOL v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)(v6 + 8), v14);
        int v10 = (int *)v6[6];
        unint64_t v7 = (int *)v6[7];
      }
      else
      {
        BOOL v15 = 0;
      }
      unint64_t v16 = (int *)&v15[4 * v11];
      unint64_t v17 = &v15[4 * v14];
      *unint64_t v16 = a2;
      uint8x8_t v9 = v16 + 1;
      while (v7 != v10)
      {
        int v18 = *--v7;
        *--unint64_t v16 = v18;
      }
      void v6[6] = v16;
      v6[7] = v9;
      v6[8] = v17;
      if (v10) {
        operator delete(v10);
      }
    }
    else
    {
      *unint64_t v7 = a2;
      uint8x8_t v9 = v7 + 1;
    }
    v6[7] = v9;
  }
}

__n128 __Block_byref_object_copy__67(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__68(uint64_t a1)
{
  char v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void ___ZN14LaunchServices21DatabaseVisualizationL20writeUnitDescriptionEP7__sFILEjjP18NSAttributedStringP5NSSetIP8NSStringEP11NSPredicatejPb_block_invoke(uint64_t a1, void *a2, NSUInteger a3, NSUInteger a4, void *a5, NSUInteger a6, NSUInteger a7, unsigned char *a8)
{
  id v29 = a2;
  id v15 = a5;
  if ([*(id *)(a1 + 32) containsObject:v29])
  {
    v31.id location = a3;
    v31.CFIndex length = a4;
    v32.id location = a6;
    v32.CFIndex length = a7;
    NSRange v16 = NSUnionRange(v31, v32);
    unint64_t v17 = *(void **)(*(void *)(a1 + 40) + 8);
    int v18 = (NSRange *)v17[7];
    unint64_t v19 = v17[8];
    if ((unint64_t)v18 >= v19)
    {
      unint64_t v21 = (NSRange *)v17[6];
      uint64_t v22 = v18 - v21;
      unint64_t v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 60) {
        abort();
      }
      uint64_t v24 = v19 - (void)v21;
      if (v24 >> 3 > v23) {
        unint64_t v23 = v24 >> 3;
      }
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v25 = v23;
      }
      if (v25)
      {
        uint64_t v26 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<unsigned int,NSUUID * {__strong}>>>((uint64_t)(v17 + 8), v25);
        unint64_t v21 = (NSRange *)v17[6];
        int v18 = (NSRange *)v17[7];
      }
      else
      {
        uint64_t v26 = 0;
      }
      uint64_t v27 = (NSRange *)&v26[16 * v22];
      uint64_t v28 = &v26[16 * v25];
      NSRange *v27 = v16;
      uint64_t v20 = v27 + 1;
      if (v18 != v21)
      {
        do
        {
          v27[-1] = v18[-1];
          --v27;
          --v18;
        }
        while (v18 != v21);
        unint64_t v21 = (NSRange *)v17[6];
      }
      v17[6] = v27;
      v17[7] = v20;
      v17[8] = v28;
      if (v21) {
        operator delete(v21);
      }
    }
    else
    {
      NSRange *v18 = v16;
      uint64_t v20 = v18 + 1;
    }
    v17[7] = v20;
    if (*(void *)(a1 + 48) == 1) {
      *a8 = 1;
    }
  }
}

void sub_182A3D738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN14LaunchServices21DatabaseVisualizationL34getPropertyListFromUnitDescriptionEjjP18NSAttributedStringP5NSSetIP8NSStringE_block_invoke(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, unsigned char *a8)
{
  id v14 = a2;
  id v11 = a5;
  unint64_t v12 = *(void **)(a1 + 32);
  if (!v12 || [v12 containsObject:v14])
  {
    uint64_t v13 = [v11 string];
    [*(id *)(a1 + 40) setObject:v13 forKeyedSubscript:v14];

    if ((unint64_t)[*(id *)(a1 + 40) count] >= *(void *)(a1 + 48)) {
      *a8 = 1;
    }
  }
}

void sub_182A3D808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned int,NSString * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,NSString * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,NSString * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,NSString * {__strong}>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    int v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      id v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          id v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v13 = (void *)(a1 + 16);
  id v11 = operator new(0x20uLL);
  void *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[3] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  unint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    void *v11 = *v21;
LABEL_38:
    void *v21 = v11;
    goto LABEL_39;
  }
  void *v11 = *v13;
  void *v13 = v11;
  *(void *)(v20 + 8 * v4) = v13;
  if (*v11)
  {
    unint64_t v22 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    unint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_182A3DA64(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,void *>>>::operator()[abi:nn180100](v2, v1);
  _Unwind_Resume(a1);
}

void sub_182A3DB44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unint64_t v12 = v11;

  _Unwind_Resume(a1);
}

void sub_182A3DCB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A3DFC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A3E068(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A3E144(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A3E5E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A3E7A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_182A3E830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A3E9F8(_Unwind_Exception *a1)
{
  unint64_t v7 = v3;

  _Unwind_Resume(a1);
}

void sub_182A3EC50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A3EE38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t initba_is_process_extension(audit_token_t *a1)
{
  uint64_t v2 = (void *)BASupportLibrary(void)::libLibrary;
  if (!BASupportLibrary(void)::libLibrary)
  {
    uint64_t v2 = dlopen("/usr/lib/libBASupport.dylib", 2);
    BASupportLibrary(void)::libLibrary = (uint64_t)v2;
  }
  unint64_t v3 = (uint64_t (*)(audit_token_t *))dlsym(v2, "ba_is_process_extension");
  softLinkba_is_process_extension = v3;

  return v3(a1);
}

uint64_t initTCCAccessPreflightWithAuditToken(const __CFString *a1, audit_token_t *a2, const __CFDictionary *a3)
{
  unint64_t v6 = (void *)TCCLibrary(void)::frameworkLibrary;
  if (!TCCLibrary(void)::frameworkLibrary)
  {
    unint64_t v6 = dlopen("/System/Library/PrivateFrameworks/TCC.framework/TCC", 2);
    TCCLibrary(void)::frameworkLibrary = (uint64_t)v6;
  }
  softLinkTCCAccessPreflightWithAuditToken = (uint64_t (*)(const __CFString *, audit_token_t *__struct_ptr, const __CFDictionary *))dlsym(v6, "TCCAccessPreflightWithAuditToken");
  long long v7 = *(_OWORD *)&a2->val[4];
  v9[0] = *(_OWORD *)a2->val;
  v9[1] = v7;
  return softLinkTCCAccessPreflightWithAuditToken(a1, (audit_token_t *)v9, a3);
}

uint64_t initkTCCServiceUserTracking(void)
{
  dispatch_queue_t v0 = (void *)TCCLibrary(void)::frameworkLibrary;
  if (!TCCLibrary(void)::frameworkLibrary)
  {
    dispatch_queue_t v0 = dlopen("/System/Library/PrivateFrameworks/TCC.framework/TCC", 2);
    TCCLibrary(void)::frameworkLibrary = (uint64_t)v0;
  }
  uint64_t result = *(void *)dlsym(v0, "kTCCServiceUserTracking");
  constantkTCCServiceUserTracking = result;
  getkTCCServiceUserTracking = kTCCServiceUserTrackingFunction;
  return result;
}

uint64_t kTCCServiceUserTrackingFunction(void)
{
  return constantkTCCServiceUserTracking;
}

Class initUMUserManager(void)
{
  if (!UserManagementLibrary(void)::frameworkLibrary) {
    UserManagementLibrary(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/UserManagement.framework/UserManagement", 2);
  }
  Class result = objc_getClass("UMUserManager");
  classUMUserManager = (uint64_t)result;
  getUMUserManagerClass Class = (uint64_t (*)(void))UMUserManagerFunction;
  return result;
}

{
  Class result;

  if (!UserManagementLibrary(void)::frameworkLibrary) {
    UserManagementLibrary(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/UserManagement.framework/UserManagement", 2);
  }
  Class result = objc_getClass("UMUserManager");
  classUMUserManager = (uint64_t)result;
  getUMUserManagerClass Class = (uint64_t (*)(void))UMUserManagerFunction;
  return result;
}

{
  Class result;

  if (!UserManagementLibrary(void)::frameworkLibrary) {
    UserManagementLibrary(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/UserManagement.framework/UserManagement", 2);
  }
  Class result = objc_getClass("UMUserManager");
  classUMUserManager = (uint64_t)result;
  getUMUserManagerClass Class = (uint64_t (*)(void))UMUserManagerFunction;
  return result;
}

uint64_t __LAUNCH_SERVICES_IS_GENERATING_A_SANDBOX_EXCEPTION_BECAUSE_THIS_PROCESS_IS_USING_PRIVATE_SYMBOLS__()
{
  if (__LSDefaultsGetSharedInstance_onceToken != -1) {
    dispatch_once(&__LSDefaultsGetSharedInstance_onceToken, &__block_literal_global_27);
  }
  uint64_t result = [(id)__LSDefaultsGetSharedInstance_sharedInstance issueSandboxExceptionsIfMayNotMapDatabase];
  if (result)
  {
    _LSGetAuditTokenForSelf();
    return sandbox_check_by_audit_token();
  }
  return result;
}

id _LSDefaultsBaseSystemContainerURL()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  dispatch_queue_t v0 = getenv("LS_DATABASE_DIR");
  if (!v0)
  {
    char v16 = 0;
    uint64_t v13 = 1;
    uint64_t v1 = container_system_path_for_identifier();
    if (!v1)
    {
      uint64_t error_description = container_get_error_description();
      unint64_t v6 = _LSDefaultLog();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        _LSDefaultsBaseSystemContainerURL_cold_1(&v13, error_description, v6);
      }

      uint64_t v7 = objc_msgSend(NSString, "stringWithFormat:", @"Error getting container url (%s)! Cannot continue.", error_description);
      unint64_t v8 = (void *)MEMORY[0x1E4F1CA00];
      uint64_t v9 = *MEMORY[0x1E4F1C3B8];
      float v14 = @"LSContainerErrorNumber";
      int v10 = [NSNumber numberWithUnsignedLongLong:v13];
      float v15 = v10;
      id v11 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v15 forKeys:&v14 count:1];
      id v12 = [v8 exceptionWithName:v9 reason:v7 userInfo:v11];

      objc_exception_throw(v12);
    }
    uint64_t v2 = (void *)v1;
    dispatch_queue_t v0 = &v16;
    __strlcpy_chk();
    free(v2);
  }
  unint64_t v3 = (void *)[objc_alloc(MEMORY[0x1E4F1CB10]) initFileURLWithFileSystemRepresentation:v0 isDirectory:1 relativeToURL:0];

  return v3;
}

uint64_t emitSandboxExceptionAndMaybeAbortForSneakyURLUsage()
{
  dispatch_queue_t v0 = _LSDefaultLog();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR)) {
    emitSandboxExceptionAndMaybeAbortForSneakyURLUsage_cold_1(v0);
  }

  return __LAUNCH_SERVICES_IS_GENERATING_A_SANDBOX_EXCEPTION_BECAUSE_THIS_PROCESS_IS_USING_PRIVATE_SYMBOLS__();
}

void sub_182A40984(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A40B18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A40BFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A40D94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A40EDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A41050(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A411D4(_Unwind_Exception *a1)
{
  unint64_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_182A413B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A415D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A419FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSPerUserEntropyURL(void)
{
  dispatch_queue_t v0 = [(id)__LSDefaultsGetSharedInstance() userContainerURL];
  uint64_t v1 = [v0 URLByAppendingPathComponent:@"com.apple.LaunchServices.DeviceIdentifierEntropy" isDirectory:0];

  return v1;
}

void sub_182A41AF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A41CD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

Class initUMUserPersona(void)
{
  if (!UserManagementLibrary(void)::frameworkLibrary) {
    UserManagementLibrary(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/UserManagement.framework/UserManagement", 2);
  }
  Class result = objc_getClass("UMUserPersona");
  classUMUserPersona = (uint64_t)result;
  getUMUserPersonaClass Class = (uint64_t (*)(void))UMUserPersonaFunction;
  return result;
}

uint64_t initMKBDeviceUnlockedSinceBoot(void)
{
  dispatch_queue_t v0 = (void *)MobileKeyBagLibrary(void)::frameworkLibrary;
  if (!MobileKeyBagLibrary(void)::frameworkLibrary)
  {
    dispatch_queue_t v0 = dlopen("/System/Library/PrivateFrameworks/MobileKeyBag.framework/MobileKeyBag", 2);
    MobileKeyBagLibrary(void)::frameworkLibrary = (uint64_t)v0;
  }
  uint64_t v1 = (uint64_t (*)(void))dlsym(v0, "MKBDeviceUnlockedSinceBoot");
  softLinkMKBDeviceUnlockedSinceBoot = v1;

  return v1();
}

void sub_182A428C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A429D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

void sub_182A42A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A42B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

void sub_182A42C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A42D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

void sub_182A42DE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A42F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

void sub_182A42F9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A430C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A431D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

void sub_182A4328C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_182A43578(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A43690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A439B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A43BF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A43D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A44044(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A441C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_182A442B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A4453C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A44740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose((const void *)(v29 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_182A44854(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A44A00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t initMobileInstallationCopyDiskUsageForLaunchServices(const void *a1, const __CFDictionary *a2)
{
  unint64_t v4 = (void *)MobileInstallationLibrary(void)::frameworkLibrary;
  if (!MobileInstallationLibrary(void)::frameworkLibrary)
  {
    unint64_t v4 = dlopen("/System/Library/PrivateFrameworks/MobileInstallation.framework/MobileInstallation", 2);
    MobileInstallationLibrary(void)::frameworkLibrary = (uint64_t)v4;
  }
  unsigned int v5 = (uint64_t (*)(const void *, const __CFDictionary *))dlsym(v4, "MobileInstallationCopyDiskUsageForLaunchServices");
  softLinkMobileInstallationCopyDiskUsageForLaunchServices = v5;

  return v5(a1, a2);
}

uint64_t _LSDispatchCoalescedAfterDelay(atomic_uchar *a1, void *a2, void *a3, double a4)
{
  uint64_t v7 = a2;
  id v8 = a3;
  if (a1)
  {
    if (v7) {
      goto LABEL_3;
    }
  }
  else
  {
    char v16 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v17 = objc_msgSend(NSString, "stringWithUTF8String:", "Boolean _LSDispatchCoalescedAfterDelay(volatile int32_t * _Nonnull, __strong dispatch_queue_t _Nonnull, NSTimeInterval, __strong dispatch_block_t _Nonnull)");
    [v16 handleFailureInFunction:v17, @"LSDispatchUtils.mm", 30, @"Invalid parameter not satisfying: %@", @"ioCoalescingFlag != NULL" file lineNumber description];

    if (v7) {
      goto LABEL_3;
    }
  }
  unint64_t v18 = [MEMORY[0x1E4F28B00] currentHandler];
  size_t v19 = objc_msgSend(NSString, "stringWithUTF8String:", "Boolean _LSDispatchCoalescedAfterDelay(volatile int32_t * _Nonnull, __strong dispatch_queue_t _Nonnull, NSTimeInterval, __strong dispatch_block_t _Nonnull)");
  [v18 handleFailureInFunction:v19, @"LSDispatchUtils.mm", 31, @"Invalid parameter not satisfying: %@", @"inQueue != NULL" file lineNumber description];

LABEL_3:
  if ((*(void *)&a4 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    id v12 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v13 = objc_msgSend(NSString, "stringWithUTF8String:", "Boolean _LSDispatchCoalescedAfterDelay(volatile int32_t * _Nonnull, __strong dispatch_queue_t _Nonnull, NSTimeInterval, __strong dispatch_block_t _Nonnull)");
    [v12 handleFailureInFunction:v13, @"LSDispatchUtils.mm", 32, @"Invalid parameter not satisfying: %@", @"!isinf( inMaxDelay) && !isnan( inMaxDelay)" file lineNumber description];

    if (v8) {
      goto LABEL_5;
    }
  }
  else if (v8)
  {
    goto LABEL_5;
  }
  float v14 = [MEMORY[0x1E4F28B00] currentHandler];
  float v15 = objc_msgSend(NSString, "stringWithUTF8String:", "Boolean _LSDispatchCoalescedAfterDelay(volatile int32_t * _Nonnull, __strong dispatch_queue_t _Nonnull, NSTimeInterval, __strong dispatch_block_t _Nonnull)");
  [v14 handleFailureInFunction:v15, @"LSDispatchUtils.mm", 33, @"Invalid parameter not satisfying: %@", @"inBlock != NULL" file lineNumber description];

LABEL_5:
  if ((atomic_fetch_or(a1, 0x80u) & 0x80) != 0)
  {
    uint64_t v10 = 0;
  }
  else
  {
    MEMORY[0x185310450]();
    dispatch_time_t v9 = dispatch_time(0, (uint64_t)(a4 * 1000000000.0));
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    _OWORD block[2] = ___LSDispatchCoalescedAfterDelay_block_invoke;
    block[3] = &unk_1E522E990;
    id v21 = v8;
    unint64_t v22 = a1;
    dispatch_after(v9, v7, block);

    uint64_t v10 = 1;
  }

  return v10;
}

void sub_182A44D6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_LSDispatchWithTimeoutResult *_LSDispatchWithTimeout(void *a1, void *a2, double a3)
{
  int v36 = a1;
  id v5 = a2;
  unint64_t v6 = objc_alloc_init(_LSDispatchWithTimeoutResult);
  uint64_t v35 = v6;
  if ((*(uint64_t *)&a3 <= -1 || ((*(void *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
    && (unint64_t)(*(void *)&a3 - 1) >= 0xFFFFFFFFFFFFFLL)
  {
    unint64_t v25 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v26 = objc_msgSend(NSString, "stringWithUTF8String:", "_LSDispatchWithTimeoutResult *_LSDispatchWithTimeout(NSTimeInterval, __strong dispatch_queue_t _Nullable, __strong _LSDispatchWithTimeoutWorkBlock _Nonnull)");
    [v25 handleFailureInFunction:v26, @"LSDispatchUtils.mm", 113, @"Invalid parameter not satisfying: %@", @"!isnan( timeout) && !isinf( timeout) && timeout > 0.0" file lineNumber description];

    unint64_t v6 = v35;
    if (v5) {
      goto LABEL_9;
    }
  }
  else if (v5)
  {
    goto LABEL_9;
  }
  uint64_t v27 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v28 = objc_msgSend(NSString, "stringWithUTF8String:", "_LSDispatchWithTimeoutResult *_LSDispatchWithTimeout(NSTimeInterval, __strong dispatch_queue_t _Nullable, __strong _LSDispatchWithTimeoutWorkBlock _Nonnull)");
  [v27 handleFailureInFunction:v28, @"LSDispatchUtils.mm", 114, @"Invalid parameter not satisfying: %@", @"workBlock != nil" file lineNumber description];

  unint64_t v6 = v35;
LABEL_9:
  dispatch_time_t v9 = (void *)MEMORY[0x18530F680]();
  id v10 = objc_alloc_init(MEMORY[0x1E4F28E08]);
  dispatch_semaphore_t v11 = dispatch_semaphore_create(0);
  id v12 = v6;
  id v13 = v10;
  float v14 = v11;
  if (v12)
  {
    if (v13) {
      goto LABEL_11;
    }
LABEL_27:
    NSRange v31 = [MEMORY[0x1E4F28B00] currentHandler];
    NSRange v32 = objc_msgSend(NSString, "stringWithUTF8String:", "_LSDispatchWithTimeoutCompletionHandler _LSGetDispatchWithTimeoutCompletionHandler(_LSDispatchWithTimeoutResult *__strong, __strong id<NSLocking>, __strong dispatch_semaphore_t)");
    [v31 handleFailureInFunction:v32, @"LSDispatchUtils.mm", 69, @"Invalid parameter not satisfying: %@", @"lock != nil" file lineNumber description];

    if (v14) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
  uint64_t v29 = [MEMORY[0x1E4F28B00] currentHandler];
  id v30 = objc_msgSend(NSString, "stringWithUTF8String:", "_LSDispatchWithTimeoutCompletionHandler _LSGetDispatchWithTimeoutCompletionHandler(_LSDispatchWithTimeoutResult *__strong, __strong id<NSLocking>, __strong dispatch_semaphore_t)");
  [v29 handleFailureInFunction:v30, @"LSDispatchUtils.mm", 68, @"Invalid parameter not satisfying: %@", @"resultStruct != nil" file lineNumber description];

  if (!v13) {
    goto LABEL_27;
  }
LABEL_11:
  if (v14) {
    goto LABEL_12;
  }
LABEL_28:
  uint64_t v33 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v34 = objc_msgSend(NSString, "stringWithUTF8String:", "_LSDispatchWithTimeoutCompletionHandler _LSGetDispatchWithTimeoutCompletionHandler(_LSDispatchWithTimeoutResult *__strong, __strong id<NSLocking>, __strong dispatch_semaphore_t)");
  [v33 handleFailureInFunction:v34, @"LSDispatchUtils.mm", 70, @"Invalid parameter not satisfying: %@", @"sem != NULL" file lineNumber description];

LABEL_12:
  v40[0] = MEMORY[0x1E4F143A8];
  v40[1] = 3221225472;
  void v40[2] = ___ZL42_LSGetDispatchWithTimeoutCompletionHandlerP28_LSDispatchWithTimeoutResultPU19objcproto9NSLocking11objc_objectPU32objcproto21OS_dispatch_semaphore8NSObject_block_invoke;
  v40[3] = &unk_1E522EA58;
  id v15 = v13;
  id v41 = v15;
  char v16 = v12;
  int v42 = v16;
  uint64_t v17 = v14;
  uint64_t v43 = v17;
  unint64_t v18 = (void *)MEMORY[0x18530F950](v40);
  size_t v19 = (void *)[v18 copy];

  uint64_t v20 = (void *)MEMORY[0x18530F950](v19);
  if (v36)
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    _OWORD block[2] = ___LSDispatchWithTimeout_block_invoke;
    block[3] = &unk_1E522E9B8;
    id v38 = v5;
    id v39 = v20;
    dispatch_async(v36, block);
  }
  else
  {
    (*((void (**)(id, void *))v5 + 2))(v5, v20);
  }
  dispatch_time_t v21 = dispatch_time(0, (uint64_t)(a3 * 1000000000.0));
  if (!dispatch_semaphore_wait(v17, v21)) {
    goto LABEL_20;
  }
  [v15 lock];
  unint64_t v22 = [(_LSDispatchWithTimeoutResult *)v16 result];
  if (!v22)
  {
    unint64_t v23 = [(_LSDispatchWithTimeoutResult *)v16 error];

    if (v23) {
      goto LABEL_19;
    }
    unint64_t v22 = _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28798], 60, (uint64_t)"_LSDispatchWithTimeout", 147, 0);
    [(_LSDispatchWithTimeoutResult *)v16 setError:v22];
  }

LABEL_19:
  [v15 unlock];
LABEL_20:

  return v16;
}

void sub_182A4538C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

id _LSLazyLoadObjectForKey(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  dispatch_time_t v9 = a3;
  id v10 = a4;
  uint64_t v31 = 0;
  NSRange v32 = &v31;
  uint64_t v33 = 0x3032000000;
  uint64_t v34 = __Block_byref_object_copy__20;
  uint64_t v35 = __Block_byref_object_dispose__20;
  id v36 = 0;
  if (v7)
  {
    if (v8) {
      goto LABEL_3;
    }
LABEL_11:
    unint64_t v18 = [MEMORY[0x1E4F28B00] currentHandler];
    size_t v19 = objc_msgSend(NSString, "stringWithUTF8String:", "id _LSLazyLoadObjectForKey(NSMutableDictionary *__strong _Nonnull, __strong id _Nonnull, __strong dispatch_queue_t _Nonnull, NS_NOESCAPE _LSLazyLoadGenerator __strong)");
    [v18 handleFailureInFunction:v19, @"LSDispatchUtils.mm", 195, @"Invalid parameter not satisfying: %@", @"inKey != nil" file lineNumber description];

    if (v9) {
      goto LABEL_4;
    }
LABEL_12:
    uint64_t v20 = [MEMORY[0x1E4F28B00] currentHandler];
    dispatch_time_t v21 = objc_msgSend(NSString, "stringWithUTF8String:", "id _LSLazyLoadObjectForKey(NSMutableDictionary *__strong _Nonnull, __strong id _Nonnull, __strong dispatch_queue_t _Nonnull, NS_NOESCAPE _LSLazyLoadGenerator __strong)");
    [v20 handleFailureInFunction:v21, @"LSDispatchUtils.mm", 196, @"Invalid parameter not satisfying: %@", @"inQueue != NULL" file lineNumber description];

    goto LABEL_4;
  }
  char v16 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v17 = objc_msgSend(NSString, "stringWithUTF8String:", "id _LSLazyLoadObjectForKey(NSMutableDictionary *__strong _Nonnull, __strong id _Nonnull, __strong dispatch_queue_t _Nonnull, NS_NOESCAPE _LSLazyLoadGenerator __strong)");
  [v16 handleFailureInFunction:v17, @"LSDispatchUtils.mm", 194, @"Invalid parameter not satisfying: %@", @"ioDictionary != nil" file lineNumber description];

  if (!v8) {
    goto LABEL_11;
  }
LABEL_3:
  if (!v9) {
    goto LABEL_12;
  }
LABEL_4:
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  _OWORD block[2] = ___LSLazyLoadObjectForKey_block_invoke;
  block[3] = &unk_1E522DD10;
  id v30 = &v31;
  id v11 = v7;
  id v28 = v11;
  id v12 = v8;
  id v29 = v12;
  dispatch_sync(v9, block);
  id v13 = (void *)v32[5];
  if (v10 && !v13)
  {
    v22[0] = MEMORY[0x1E4F143A8];
    v22[1] = 3221225472;
    v22[2] = ___LSLazyLoadObjectForKey_block_invoke_2;
    v22[3] = &unk_1E522EA30;
    id v23 = v11;
    id v24 = v12;
    id v25 = v10;
    uint64_t v26 = &v31;
    dispatch_barrier_sync(v9, v22);

    id v13 = (void *)v32[5];
  }
  id v14 = v13;

  _Block_object_dispose(&v31, 8);

  return v14;
}

void sub_182A45834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
  id v36 = v34;

  _Block_object_dispose(&a25, 8);
  _Unwind_Resume(a1);
}

void sub_182A45970(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL42_LSGetDispatchWithTimeoutCompletionHandlerP28_LSDispatchWithTimeoutResultPU19objcproto9NSLocking11objc_objectPU32objcproto21OS_dispatch_semaphore8NSObject_block_invoke(uint64_t a1, void *a2, void *a3)
{
  unint64_t v8 = a2;
  uint64_t v5 = a3;
  [*(id *)(a1 + 32) lock];
  unint64_t v6 = [*(id *)(a1 + 40) result];
  if (v6)
  {
  }
  else
  {
    id v7 = [*(id *)(a1 + 40) error];

    if (!v7)
    {
      if (!(v8 | v5))
      {
        uint64_t v5 = _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -10810, (uint64_t)"_LSGetDispatchWithTimeoutCompletionHandler_block_invoke", 84, 0);
      }
      [*(id *)(a1 + 40) setResult:v8];
      [*(id *)(a1 + 40) setError:v5];
    }
  }
  [*(id *)(a1 + 32) unlock];
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

void sub_182A45A78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A45AB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A45B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_182A45C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_182A45E28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A45F28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A4600C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_182A46130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_182A4622C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_182A46334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_182A46458(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id XNSDictionaryObjectForKeyOfClass(NSDictionary *a1, objc_object *a2, objc_class *a3)
{
  uint64_t v4 = [(NSDictionary *)a1 objectForKey:a2];
  uint64_t v5 = (void *)v4;
  if (a3 && v4 && (objc_opt_isKindOfClass() & 1) == 0)
  {

    uint64_t v5 = 0;
  }

  return v5;
}

void sub_182A464DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A4664C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Block_object_dispose((const void *)(v20 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_182A468C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz)
{
  std::vector<int>::size_type v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2) {
      this->__end_ = &this->__begin_[__sz];
    }
  }
  else
  {
    std::vector<int>::__append(this, __sz - v2);
  }
}

void sub_182A46A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_182A46DC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *std::vector<unsigned short>::__vallocate[abi:nn180100](void *a1, uint64_t a2)
{
  if (a2 < 0) {
    abort();
  }
  Class result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned short>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned short>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(2 * a2);
}

void std::vector<int>::__append(std::vector<int> *this, std::vector<int>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  uint64_t v5 = value;
  std::vector<unsigned int>::pointer end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    std::vector<int>::pointer begin = this->__begin_;
    uint64_t v9 = (char *)end - (char *)this->__begin_;
    unint64_t v10 = __n + (v9 >> 2);
    if (v10 >> 62) {
      abort();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      id v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)p_end_cap, v13);
      std::vector<int>::pointer begin = this->__begin_;
      std::vector<unsigned int>::pointer end = this->__end_;
    }
    else
    {
      id v14 = 0;
    }
    id v15 = &v14[4 * v11];
    char v16 = (int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    uint64_t v17 = (int *)&v15[4 * __n];
    while (end != begin)
    {
      int v18 = *--end;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    this->__begin_ = (std::vector<int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

id LaunchServices::DMFSupport::getLog(LaunchServices::DMFSupport *this)
{
  if (LaunchServices::DMFSupport::getLog(void)::once != -1) {
    dispatch_once(&LaunchServices::DMFSupport::getLog(void)::once, &__block_literal_global_12);
  }
  uint64_t v1 = (void *)LaunchServices::DMFSupport::getLog(void)::result;

  return v1;
}

id LaunchServices::DMFSupport::getMonitor(LaunchServices::DMFSupport *this)
{
  if (this)
  {
    if (LaunchServices::DMFSupport::getMonitor(BOOL)::once != -1) {
      dispatch_once(&LaunchServices::DMFSupport::getMonitor(BOOL)::once, &__block_literal_global_16);
    }
    uint64_t v1 = &LaunchServices::DMFSupport::getMonitor(BOOL)::cachingMonitor;
  }
  else
  {
    if (LaunchServices::DMFSupport::getMonitor(BOOL)::once != -1) {
      dispatch_once(&LaunchServices::DMFSupport::getMonitor(BOOL)::once, &__block_literal_global_21);
    }
    uint64_t v1 = &LaunchServices::DMFSupport::getMonitor(BOOL)::nonCachingMonitor;
  }
  id v2 = (id)*v1;

  return v2;
}

id _LSGetDMFPolicyNoCache(void *a1, void *a2)
{
  id v3 = a1;
  uint64_t v4 = v3;
  uint64_t v17 = 0;
  int v18 = &v17;
  uint64_t v19 = 0x3032000000;
  uint64_t v20 = __Block_byref_object_copy__22;
  dispatch_time_t v21 = __Block_byref_object_dispose__22;
  id v22 = &unk_1ECB438D0;
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x3032000000;
  id v14 = __Block_byref_object_copy__22;
  id v15 = __Block_byref_object_dispose__22;
  id v16 = 0;
  if (v3)
  {
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    v7[2] = ___LSGetDMFPolicyNoCache_block_invoke;
    v7[3] = &unk_1E522EB98;
    id v8 = v3;
    uint64_t v9 = &v11;
    unint64_t v10 = &v17;
    LaunchServices::DMFSupport::getPolicyWithCompletionHandler((uint64_t)v8, 0, v7);
  }
  if (a2) {
    *a2 = (id) v12[5];
  }
  id v5 = (id)v18[5];
  _Block_object_dispose(&v11, 8);

  _Block_object_dispose(&v17, 8);

  return v5;
}

void sub_182A477AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);
  _Block_object_dispose((const void *)(v23 - 96), 8);

  _Unwind_Resume(a1);
}

void LaunchServices::DMFSupport::getPolicyWithCompletionHandler(uint64_t a1, unsigned int a2, void *a3)
{
  id v5 = a3;
  unint64_t v6 = [MEMORY[0x1E4F1CAD0] setWithObject:a1];
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  _OWORD v8[2] = ___ZN14LaunchServices10DMFSupportL30getPolicyWithCompletionHandlerEP8NSStringhU13block_pointerFvP8NSNumberP7NSErrorE_block_invoke;
  void v8[3] = &unk_1E522EBE8;
  id v7 = v5;
  id v9 = v7;
  LaunchServices::DMFSupport::getPoliciesWithCompletionHandler(v6, a2, v8);
}

void sub_182A478B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t _LSGetDMFPolicy(LaunchServices::DMFSupport *a1, NSString *a2)
{
  id v2 = LaunchServices::DMFSupport::getCachedPolicy(a1, a2);
  id v3 = v2;
  if (v2) {
    uint64_t v4 = [v2 integerValue];
  }
  else {
    uint64_t v4 = 0;
  }

  return v4;
}

void sub_182A479E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id LaunchServices::DMFSupport::getCachedPolicy(LaunchServices::DMFSupport *this, NSString *a2)
{
  id v2 = this;
  id v3 = LaunchServices::DMFSupport::getMonitor((LaunchServices::DMFSupport *)1);
  if (v2)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&LaunchServices::DMFSupport::allPoliciesLock);
    uint64_t v4 = [(id)LaunchServices::DMFSupport::allPolicies objectForKeyedSubscript:v2];
    os_unfair_lock_unlock((os_unfair_lock_t)&LaunchServices::DMFSupport::allPoliciesLock);
  }
  else
  {
    uint64_t v4 = 0;
  }

  return v4;
}

void sub_182A47A78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSGetDMFPolicyWithCompletionHandler(uint64_t a1, void *a2)
{
  id v3 = a2;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  void v5[2] = ___LSGetDMFPolicyWithCompletionHandler_block_invoke;
  v5[3] = &unk_1E522EBC0;
  id v6 = v3;
  id v4 = v3;
  LaunchServices::DMFSupport::getPolicyWithCompletionHandler(a1, 3u, v5);
}

void sub_182A47B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_182A47B98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void LaunchServices::DMFSupport::getPoliciesWithCompletionHandler(void *a1, unsigned int a2, void *a3)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  uint64_t v37 = a3;
  if (!v5)
  {
    uint64_t v50 = *MEMORY[0x1E4F28228];
    long long v51 = @"bundleIDs";
    id v6 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v51 forKeys:&v50 count:1];
    id v15 = _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -50, (uint64_t)"getPoliciesWithCompletionHandler", 314, v6);
    v37[2](v37, 0, v15);
LABEL_35:

    goto LABEL_36;
  }
  id v6 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  if (a2)
  {
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    id v7 = v5;
    uint64_t v9 = [v7 countByEnumeratingWithState:&v46 objects:v57 count:16];
    if (v9)
    {
      uint64_t v10 = *(void *)v47;
      do
      {
        for (uint64_t i = 0; i != v9; ++i)
        {
          if (*(void *)v47 != v10) {
            objc_enumerationMutation(v7);
          }
          uint64_t v12 = *(LaunchServices::DMFSupport **)(*((void *)&v46 + 1) + 8 * i);
          uint64_t v13 = LaunchServices::DMFSupport::getCachedPolicy(v12, v8);
          if (v13) {
            [v6 setObject:v13 forKeyedSubscript:v12];
          }
        }
        uint64_t v9 = [v7 countByEnumeratingWithState:&v46 objects:v57 count:16];
      }
      while (v9);
    }
  }
  uint64_t v14 = [v6 count];
  if (v14 != [v5 count])
  {
    id v15 = LaunchServices::DMFSupport::getMonitor((LaunchServices::DMFSupport *)(a2 & 1));
    if (v15)
    {
      v43[0] = MEMORY[0x1E4F143A8];
      v43[1] = 3221225472;
      v43[2] = ___ZN14LaunchServices10DMFSupportL32getPoliciesWithCompletionHandlerEP5NSSetIP8NSStringEhU13block_pointerFvP12NSDictionaryIS3_P8NSNumberEP7NSErrorE_block_invoke;
      v43[3] = &unk_1E522EC88;
      char v45 = a2 & 1;
      long long v44 = v37;
      id v16 = (LaunchServices::DMFSupport *)MEMORY[0x18530F950](v43);
      uint64_t v17 = LaunchServices::DMFSupport::getLog(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        uint64_t v18 = [v5 count];
        *(_DWORD *)std::__fs::filesystem::path buf = 134283777;
        uint64_t v54 = v18;
        __int16 v55 = 1024;
        int v56 = (a2 >> 1) & 1;
        _os_log_impl(&dword_182959000, v17, OS_LOG_TYPE_INFO, "requesting DMF policies for %{private}zu identifiers, async? %d", buf, 0x12u);
      }

      [v5 allObjects];
      if ((a2 & 2) != 0) {
        uint64_t v20 = {;
      }
        [v15 requestPoliciesForBundleIdentifiers:v20 completionHandler:v16];
      }
      else {
        uint64_t v19 = {;
      }
        id v42 = 0;
        uint64_t v20 = [v15 requestPoliciesForBundleIdentifiers:v19 withError:&v42];
        id v21 = v42;

        (*((void (**)(LaunchServices::DMFSupport *, void *, id))v16 + 2))(v16, v20, v21);
      }
    }
    else
    {
      id v22 = LaunchServices::DMFSupport::getLog(0);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
        LaunchServices::DMFSupport::getPoliciesWithCompletionHandler(v22, v23, v24, v25, v26, v27, v28, v29);
      }

      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      id v30 = v5;
      uint64_t v31 = [v30 countByEnumeratingWithState:&v38 objects:v52 count:16];
      if (v31)
      {
        uint64_t v32 = *(void *)v39;
        do
        {
          for (uint64_t j = 0; j != v31; ++j)
          {
            if (*(void *)v39 != v32) {
              objc_enumerationMutation(v30);
            }
            uint64_t v34 = *(void *)(*((void *)&v38 + 1) + 8 * j);
            uint64_t v35 = [v6 objectForKeyedSubscript:v34];
            BOOL v36 = v35 == 0;

            if (v36) {
              [v6 setObject:&unk_1ECB438D0 forKeyedSubscript:v34];
            }
          }
          uint64_t v31 = [v30 countByEnumeratingWithState:&v38 objects:v52 count:16];
        }
        while (v31);
      }

      ((void (**)(id, id, void *))v37)[2](v37, v6, 0);
    }
    goto LABEL_35;
  }
  ((void (**)(id, id, void *))v37)[2](v37, v6, 0);
LABEL_36:
}

void sub_182A48034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  _Unwind_Resume(a1);
}

id _LSGetDMFNotificationCenter()
{
  return LaunchServices::DMFSupport::getNotificationCenter((LaunchServices::DMFSupport *)1);
}

id LaunchServices::DMFSupport::getNotificationCenter(LaunchServices::DMFSupport *this)
{
  int v1 = (int)this;
  os_unfair_lock_lock(&LaunchServices::DMFSupport::getNotificationCenter(BOOL)::lock);
  id v2 = (void *)LaunchServices::DMFSupport::getNotificationCenter(BOOL)::center;
  if (LaunchServices::DMFSupport::getNotificationCenter(BOOL)::center) {
    BOOL v3 = 1;
  }
  else {
    BOOL v3 = v1 == 0;
  }
  if (!v3)
  {
    id v4 = LaunchServices::DMFSupport::getMonitor((LaunchServices::DMFSupport *)1);
    id v5 = objc_alloc_init(MEMORY[0x1E4F28EB8]);
    id v6 = (void *)LaunchServices::DMFSupport::getNotificationCenter(BOOL)::center;
    LaunchServices::DMFSupport::getNotificationCenter(BOOL)::center = (uint64_t)v5;

    id v2 = (void *)LaunchServices::DMFSupport::getNotificationCenter(BOOL)::center;
  }
  id v7 = v2;
  os_unfair_lock_unlock(&LaunchServices::DMFSupport::getNotificationCenter(BOOL)::lock);

  return v7;
}

void ___ZN14LaunchServices10DMFSupportL6getLogEv_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.launchservices", "dmfsupport");
  int v1 = (void *)LaunchServices::DMFSupport::getLog(void)::result;
  LaunchServices::DMFSupport::getLog(void)::Class result = (uint64_t)v0;
}

void ___ZN14LaunchServices10DMFSupportL10getMonitorEb_block_invoke(LaunchServices::DMFSupport *a1)
{
  uint64_t v1 = [objc_alloc((Class)LaunchServices::DMFSupport::getDMFApplicationPolicyMonitorClass(a1)) initWithPolicyChangeHandler:&__block_literal_global_18];
  id v2 = (void *)LaunchServices::DMFSupport::getMonitor(BOOL)::cachingMonitor;
  LaunchServices::DMFSupport::getMonitor(BOOL)::cachingMonitor = v1;

  BOOL v3 = (void *)LaunchServices::DMFSupport::getMonitor(BOOL)::cachingMonitor;

  LaunchServices::DMFSupport::reloadAllPolicies(v3);
}

void ___ZN14LaunchServices10DMFSupportL10getMonitorEb_block_invoke_2(LaunchServices::DMFSupport *a1)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = LaunchServices::DMFSupport::getLog(a1);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    int v2 = 136315138;
    BOOL v3 = "getMonitor_block_invoke_2";
    _os_log_impl(&dword_182959000, v1, OS_LOG_TYPE_DEFAULT, "%s: DMF policies changed.", (uint8_t *)&v2, 0xCu);
  }

  LaunchServices::DMFSupport::reloadAllPolicies((void *)LaunchServices::DMFSupport::getMonitor(BOOL)::cachingMonitor);
}

void LaunchServices::DMFSupport::reloadAllPolicies(void *a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  int v2 = [MEMORY[0x1E4F1CA80] set];
  id v20 = 0;
  uint64_t v17 = 0;
  id v18 = 0;
  char v19 = 0;
  +[_LSDServiceDomain defaultServiceDomain]();
  BOOL v3 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  uint64_t v4 = (void **)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v17, v3, 0);

  if (v4)
  {
    int StringForCFString = _LSDatabaseGetStringForCFString(*v4, @"Hidden", 0);
    *(void *)&long long buf = MEMORY[0x1E4F143A8];
    *((void *)&buf + 1) = 3221225472;
    id v22 = ___ZN14LaunchServices10DMFSupportL15getAllBundleIDsEv_block_invoke;
    uint64_t v23 = &unk_1E522EC38;
    int v26 = StringForCFString;
    uint64_t v25 = v4;
    uint64_t v24 = v2;
    _LSEnumerateViableBundlesOfClass(v4, 2, &buf);
    id v7 = v24;
  }
  else
  {
    id v7 = LaunchServices::DMFSupport::getLog(v5);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      +[_LSDServiceDomain defaultServiceDomain]();
      uint64_t v14 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
      uint64_t v15 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v17, v14, 0);

      if (v15) {
        id v16 = 0;
      }
      else {
        id v16 = v20;
      }
      LODWORD(buf) = 138543362;
      *(void *)((char *)&buf + 4) = v16;
      _os_log_error_impl(&dword_182959000, v7, OS_LOG_TYPE_ERROR, "Failed to get database context: %{public}@", (uint8_t *)&buf, 0xCu);
    }
  }

  id v8 = [v2 allObjects];
  if (v17 && v19) {
    _LSContextDestroy(v17);
  }
  id v9 = v18;
  uint64_t v17 = 0;
  id v18 = 0;

  char v19 = 0;
  id v10 = v20;
  id v20 = 0;

  uint64_t v12 = LaunchServices::DMFSupport::getLog(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    uint64_t v13 = [v8 count];
    LODWORD(buf) = 134283521;
    *(void *)((char *)&buf + 4) = v13;
    _os_log_impl(&dword_182959000, v12, OS_LOG_TYPE_INFO, "reloading all DMF policies for %{private}zu identifiers", (uint8_t *)&buf, 0xCu);
  }

  [v1 requestPoliciesForBundleIdentifiers:v8 completionHandler:&__block_literal_global_25];
}

void sub_182A485A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13 = v12;

  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a9);
  _Unwind_Resume(a1);
}

void ___ZN14LaunchServices10DMFSupportL10getMonitorEb_block_invoke_19(LaunchServices::DMFSupport *a1)
{
  uint64_t v1 = [objc_alloc((Class)LaunchServices::DMFSupport::getDMFApplicationPolicyMonitorClass(a1)) initWithPolicyChangeHandler:0];
  int v2 = (void *)LaunchServices::DMFSupport::getMonitor(BOOL)::nonCachingMonitor;
  LaunchServices::DMFSupport::getMonitor(BOOL)::nonCachingMonitor = v1;
}

Class LaunchServices::DMFSupport::initDMFApplicationPolicyMonitor(LaunchServices::DMFSupport *this)
{
  if (!LaunchServices::DMFSupport::DeviceManagementLibrary(void)::frameworkLibrary) {
    LaunchServices::DMFSupport::DeviceManagementLibrary(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/DeviceManagement.framework/DeviceManagement", 2);
  }
  Class result = objc_getClass("DMFApplicationPolicyMonitor");
  LaunchServices::DMFSupport::classDMFApplicationPolicyMonitor = (uint64_t)result;
  LaunchServices::DMFSupport::getDMFApplicationPolicyMonitorClass Class = (uint64_t (*)(LaunchServices::DMFSupport *__hidden))LaunchServices::DMFSupport::DMFApplicationPolicyMonitorFunction;
  return result;
}

id LaunchServices::DMFSupport::DMFApplicationPolicyMonitorFunction(LaunchServices::DMFSupport *this)
{
  return (id)LaunchServices::DMFSupport::classDMFApplicationPolicyMonitor;
}

void ___ZN14LaunchServices10DMFSupportL17reloadAllPoliciesEP27DMFApplicationPolicyMonitor_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  id v6 = LaunchServices::DMFSupport::getLog(v5);
  id v7 = v6;
  if (v4)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
      ___ZN14LaunchServices10DMFSupportL17reloadAllPoliciesEP27DMFApplicationPolicyMonitor_block_invoke_cold_2();
    }

    LaunchServices::DMFSupport::addKnownPoliciesToCache(v4, 1);
  }
  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      ___ZN14LaunchServices10DMFSupportL17reloadAllPoliciesEP27DMFApplicationPolicyMonitor_block_invoke_cold_1();
    }
  }
}

void sub_182A48798(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void LaunchServices::DMFSupport::addKnownPoliciesToCache(void *a1, int a2)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  id v37 = a1;
  BOOL v3 = (void *)[v37 mutableCopy];
  v41[0] = MEMORY[0x1E4F143A8];
  v41[1] = 3221225472;
  void v41[2] = ___ZN14LaunchServices10DMFSupportL23addKnownPoliciesToCacheEP12NSDictionaryIP8NSStringP8NSNumberEb_block_invoke;
  v41[3] = &unk_1E522EC60;
  id v4 = v3;
  id v42 = v4;
  [v37 enumerateKeysAndObjectsUsingBlock:v41];
  id v39 = v4;
  os_unfair_lock_lock((os_unfair_lock_t)&LaunchServices::DMFSupport::allPoliciesLock);
  id v5 = (void *)[(id)LaunchServices::DMFSupport::allPolicies copy];
  id v6 = v5;
  if (a2)
  {
    uint64_t v7 = [v39 copy];
    id v8 = (void *)LaunchServices::DMFSupport::allPolicies;
    LaunchServices::DMFSupport::allPolicies = v7;
  }
  else
  {
    id v9 = (void *)[v5 mutableCopy];
    id v10 = v9;
    if (v9) {
      id v11 = v9;
    }
    else {
      id v11 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    }
    id v8 = v11;

    [v8 addEntriesFromDictionary:v39];
    uint64_t v12 = [v8 copy];
    uint64_t v13 = (void *)LaunchServices::DMFSupport::allPolicies;
    LaunchServices::DMFSupport::allPolicies = v12;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&LaunchServices::DMFSupport::allPoliciesLock);
  id v14 = v6;
  id v40 = v39;
  long long v38 = LaunchServices::DMFSupport::getNotificationCenter(0);
  if (v38)
  {
    uint64_t v15 = [MEMORY[0x1E4F1CA80] set];
    v55[0] = MEMORY[0x1E4F143A8];
    v55[1] = 3221225472;
    v55[2] = ___ZN14LaunchServices10DMFSupportL16postNotificationEP12NSDictionaryIP8NSStringP8NSNumberES7__block_invoke;
    v55[3] = &unk_1E522DBD8;
    id v16 = v40;
    id v56 = v16;
    uint64_t v17 = v15;
    id v57 = v17;
    [v14 enumerateKeysAndObjectsUsingBlock:v55];
    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    id v18 = v16;
    uint64_t v19 = [v18 countByEnumeratingWithState:&v51 objects:v59 count:16];
    if (v19)
    {
      uint64_t v20 = *(void *)v52;
      do
      {
        for (uint64_t i = 0; i != v19; ++i)
        {
          if (*(void *)v52 != v20) {
            objc_enumerationMutation(v18);
          }
          uint64_t v22 = *(void *)(*((void *)&v51 + 1) + 8 * i);
          uint64_t v23 = [v14 objectForKeyedSubscript:v22];
          BOOL v24 = v23 == 0;

          if (v24) {
            [v17 addObject:v22];
          }
        }
        uint64_t v19 = [v18 countByEnumeratingWithState:&v51 objects:v59 count:16];
      }
      while (v19);
    }

    if ([v17 count])
    {
      uint64_t v25 = [MEMORY[0x1E4F1CA48] array];
      id v50 = 0;
      long long v47 = 0;
      id v48 = 0;
      char v49 = 0;
      +[_LSDServiceDomain defaultServiceDomain]();
      int v26 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
      uint64_t v27 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v47, v26, 0);

      if (v27)
      {
        long long v45 = 0u;
        long long v46 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        uint64_t v29 = v17;
        uint64_t v30 = [v29 countByEnumeratingWithState:&v43 objects:v58 count:16];
        if (v30)
        {
          uint64_t v31 = *(void *)v44;
          do
          {
            for (uint64_t j = 0; j != v30; ++j)
            {
              if (*(void *)v44 != v31) {
                objc_enumerationMutation(v29);
              }
              uint64_t v33 = +[LSApplicationProxy applicationProxyForIdentifier:*(void *)(*((void *)&v43 + 1) + 8 * j) withContext:v27];
              if (v33) {
                [v25 addObject:v33];
              }
            }
            uint64_t v30 = [v29 countByEnumeratingWithState:&v43 objects:v58 count:16];
          }
          while (v30);
        }
      }
      uint64_t v34 = LaunchServices::DMFSupport::getLog(v28);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG)) {
        LaunchServices::DMFSupport::addKnownPoliciesToCache();
      }

      [v38 postNotificationName:@"com.apple.launchservices.private._LSDMFPolicyDidChangeNotification" object:v25];
      if (v47 && v49) {
        _LSContextDestroy(v47);
      }
      id v35 = v48;
      long long v47 = 0;
      id v48 = 0;

      char v49 = 0;
      id v36 = v50;
      id v50 = 0;
    }
    else
    {
      uint64_t v25 = LaunchServices::DMFSupport::getLog(0);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG)) {
        LaunchServices::DMFSupport::addKnownPoliciesToCache();
      }
    }
  }
  else
  {
    uint64_t v17 = LaunchServices::DMFSupport::getLog(0);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG)) {
      LaunchServices::DMFSupport::addKnownPoliciesToCache();
    }
  }
}

void sub_182A48CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void ___ZN14LaunchServices10DMFSupportL15getAllBundleIDsEv_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(unsigned char *)(a3 + 177) & 4) == 0)
  {
    int v4 = *(_DWORD *)(a3 + 348);
    if (!v4 || v4 != *(_DWORD *)(a1 + 48))
    {
      id v5 = (id)_CSStringCopyCFString();
      if (v5) {
        [*(id *)(a1 + 32) addObject:v5];
      }
    }
  }
}

void sub_182A48E7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN14LaunchServices10DMFSupportL23addKnownPoliciesToCacheEP12NSDictionaryIP8NSStringP8NSNumberEb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if (![v5 integerValue]) {
    [*(id *)(a1 + 32) setObject:0 forKeyedSubscript:v6];
  }
}

void sub_182A48EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN14LaunchServices10DMFSupportL16postNotificationEP12NSDictionaryIP8NSStringP8NSNumberES7__block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  id v6 = [*(id *)(a1 + 32) objectForKeyedSubscript:v8];
  uint64_t v7 = v6;
  if (!v6 || ([v6 isEqualToNumber:v5] & 1) == 0) {
    [*(id *)(a1 + 40) addObject:v8];
  }
}

void sub_182A48FA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN14LaunchServices10DMFSupportL30getPolicyWithCompletionHandlerEP8NSStringhU13block_pointerFvP8NSNumberP7NSErrorE_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v8 = a3;
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = [a2 allValues];
  uint64_t v7 = [v6 firstObject];
  (*(void (**)(uint64_t, void *, id))(v5 + 16))(v5, v7, v8);
}

void sub_182A4905C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN14LaunchServices10DMFSupportL32getPoliciesWithCompletionHandlerEP5NSSetIP8NSStringEhU13block_pointerFvP12NSDictionaryIS3_P8NSNumberEP7NSErrorE_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = LaunchServices::DMFSupport::getLog(v6);
  id v8 = v7;
  if (v5)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
      ___ZN14LaunchServices10DMFSupportL32getPoliciesWithCompletionHandlerEP5NSSetIP8NSStringEhU13block_pointerFvP12NSDictionaryIS3_P8NSNumberEP7NSErrorE_block_invoke_cold_2();
    }

    if (*(unsigned char *)(a1 + 40)) {
      LaunchServices::DMFSupport::addKnownPoliciesToCache(v5, 0);
    }
  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      ___ZN14LaunchServices10DMFSupportL32getPoliciesWithCompletionHandlerEP5NSSetIP8NSStringEhU13block_pointerFvP12NSDictionaryIS3_P8NSNumberEP7NSErrorE_block_invoke_cold_1();
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_182A4914C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_7(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

void sub_182A493F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A49560(_Unwind_Exception *a1)
{
  int v4 = v3;

  _Unwind_Resume(a1);
}

void sub_182A49874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_182A499B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A49B04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A49BAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A49C18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A49D0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A49DF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A49EE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A49FD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A4A0C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A4A1B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A4A2A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A4A394(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A4A484(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A4A574(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A4A640(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A4A7C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A4A960(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A4AB00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A4ABF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t getFailableNumericFromBaseProperties<unsigned long long>(void *a1, void *a2, const char *a3, void *a4, void *a5)
{
  v21[1] = *MEMORY[0x1E4F143B8];
  id v9 = a1;
  id v10 = a2;
  id v11 = NSStringFromSelector(a3);
  uint64_t v12 = objc_opt_class();
  uint64_t v13 = [v10 objectForKey:v11];
  id v14 = (void *)v13;
  if (v12) {
    BOOL v15 = v13 == 0;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15)
  {
    if (v13)
    {
LABEL_9:
      *a4 = [v14 unsignedLongLongValue];
      uint64_t v17 = 1;
      goto LABEL_13;
    }
  }
  else
  {
    char isKindOfClass = objc_opt_isKindOfClass();
    if (isKindOfClass) {
      goto LABEL_9;
    }
  }
  [v9 askedForMissingSelector:a3];
  if (!a5)
  {
    uint64_t v17 = 0;
    goto LABEL_14;
  }
  uint64_t v20 = *MEMORY[0x1E4F28228];
  v21[0] = v11;
  id v18 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v21 forKeys:&v20 count:1];
  _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28798], 5, (uint64_t)"getFailableNumericFromBaseProperties", 284, v18);
  uint64_t v17 = 0;
  *a5 = (id)objc_claimAutoreleasedReturnValue();
  id v14 = v18;
LABEL_13:

LABEL_14:
  return v17;
}

void sub_182A4ADC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A4AEDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A4AFCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A4B0BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A4B1AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t getFailableNumericFromBaseProperties<double>(void *a1, void *a2, const char *a3, void *a4, void *a5)
{
  v22[1] = *MEMORY[0x1E4F143B8];
  id v9 = a1;
  id v10 = a2;
  id v11 = NSStringFromSelector(a3);
  uint64_t v12 = objc_opt_class();
  uint64_t v13 = [v10 objectForKey:v11];
  id v14 = (void *)v13;
  if (v12) {
    BOOL v15 = v13 == 0;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15)
  {
    if (v13)
    {
LABEL_9:
      [v14 doubleValue];
      *a4 = v17;
      uint64_t v18 = 1;
      goto LABEL_13;
    }
  }
  else
  {
    char isKindOfClass = objc_opt_isKindOfClass();
    if (isKindOfClass) {
      goto LABEL_9;
    }
  }
  [v9 askedForMissingSelector:a3];
  if (!a5)
  {
    uint64_t v18 = 0;
    goto LABEL_14;
  }
  uint64_t v21 = *MEMORY[0x1E4F28228];
  v22[0] = v11;
  uint64_t v19 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v22 forKeys:&v21 count:1];
  _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28798], 5, (uint64_t)"getFailableNumericFromBaseProperties", 284, v19);
  uint64_t v18 = 0;
  *a5 = (id)objc_claimAutoreleasedReturnValue();
  id v14 = v19;
LABEL_13:

LABEL_14:
  return v18;
}

void sub_182A4B37C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A4B63C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A4B858(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A4B974(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A4BA64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A4BB54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A4BCF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A4BECC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A4BF64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A4CF18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

id pendingSaveTokenInterface(void)
{
  if (pendingSaveTokenInterface(void)::onceToken != -1) {
    dispatch_once(&pendingSaveTokenInterface(void)::onceToken, &__block_literal_global_324);
  }
  os_log_t v0 = (void *)pendingSaveTokenInterface(void)::result;

  return v0;
}

void sub_182A4D10C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A4D1B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A4D31C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A4D520(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A4D8D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, void *a20,void *a21,void *a22,uint64_t a23,CFTypeRef a24,uint64_t a25,CFTypeRef cf,char a27)
{
  if (cf) {
    CFRelease(cf);
  }

  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_182A4DCF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }

  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_ea8_112c30_ZTS10CFReleaserIPK9__CFArrayE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 112);
  *(void *)(a1 + 112) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_ea8_112c30_ZTS10CFReleaserIPK9__CFArrayE(uint64_t a1)
{
  int v2 = *(const void **)(a1 + 112);
  if (v2) {
    CFRelease(v2);
  }
  *(void *)(a1 + 112) = 0;
}

void sub_182A4E0F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A4E1E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A4E3A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a9);
  _Unwind_Resume(a1);
}

void sub_182A4E624(_Unwind_Exception *a1)
{
  id v5 = v4;

  _Unwind_Resume(a1);
}

void sub_182A4E72C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_182A4E950(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A4EB78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);

  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)va);
  _Unwind_Resume(a1);
}

void sub_182A4EE74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A4EFC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A4F19C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A4F2C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A4F4B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A4F6A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_182A4F944(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t getDefaultAppCategoryForTypeIdentifier(NSString *a1)
{
  uint64_t v1 = a1;
  InfoFromTypeIdentifier = LSDefaultAppCategoryGetInfoFromTypeIdentifier((uint64_t)v1);
  if (InfoFromTypeIdentifier || (InfoFromTypeIdentifier = LSDefaultAppCategoryGetInfoForPreferenceSet(1, v1)) != 0)
  {
    unint64_t v3 = *InfoFromTypeIdentifier & 0xFFFFFFFFFFFFFF00;
    uint64_t v4 = *InfoFromTypeIdentifier;
  }
  else
  {
    unint64_t v3 = 0;
    uint64_t v4 = 0;
  }

  return v4 | v3;
}

void sub_182A4F9E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A4FB98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A4FD2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_182A4FF30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A5012C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A50310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_182A50598(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A5075C(_Unwind_Exception *a1)
{
  id v5 = v3;

  _Unwind_Resume(a1);
}

void sub_182A508EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_182A50A20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A50B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_182A50CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);
  _Block_object_dispose((const void *)(v24 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_182A50E78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A510A4(_Unwind_Exception *a1)
{
  id v6 = v5;

  _Unwind_Resume(a1);
}

void sub_182A51378(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A515A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose((const void *)(v27 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_182A5171C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A517F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_182A51920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A519B0(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_182A51E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_182A521AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_182A5235C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A524EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A52854(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A529A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A52A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A52BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_182A533AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,id a50)
{
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a41);
  _Block_object_dispose(&a45, 8);

  _Unwind_Resume(a1);
}

void sub_182A535D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A5373C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A53878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_182A53B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_182A53C8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A53EAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A54124(_Unwind_Exception *a1)
{
  id v5 = v4;

  _Unwind_Resume(a1);
}

void sub_182A54348(_Unwind_Exception *a1)
{
  uint64_t v4 = v2;

  _Unwind_Resume(a1);
}

void sub_182A5451C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a9);
  _Unwind_Resume(a1);
}

void sub_182A549C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,id a35)
{
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v40 - 168), 8);

  _Unwind_Resume(a1);
}

void sub_182A54C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13 = v12;

  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a9);
  _Unwind_Resume(a1);
}

void sub_182A5500C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id a29)
{
  _Block_object_dispose(&a24, 8);
  _Block_object_dispose((const void *)(v33 - 120), 8);

  _Unwind_Resume(a1);
}

void sub_182A552C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)va);

  _Unwind_Resume(a1);
}

void sub_182A5543C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_182A555B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_182A55734(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A559B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSDoWithLock(os_unfair_lock_s *a1, void *a2)
{
  unint64_t v3 = a2;
  os_unfair_lock_lock(a1);
  v3[2]();
  os_unfair_lock_unlock(a1);
}

void sub_182A55A94(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_182A55AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A55DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_182A55F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A56094(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A562B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  uint64_t v18 = v16;

  _Unwind_Resume(a1);
}

void sub_182A56390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A56704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
  id v37 = v35;

  _Block_object_dispose(&a19, 8);
  _Block_object_dispose(&a25, 8);

  _Unwind_Resume(a1);
}

void sub_182A5751C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,_Unwind_Exception *exception_objecta,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,char a38,int a39,__int16 a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (__p)
  {
    a69 = (uint64_t)__p;
    operator delete(__p);
  }

  if (a38)
  {
    std::__fs::filesystem::path __p = &a35;
    std::vector<std::tuple<NSString * {__strong},unsigned int>>::__destroy_vector::operator()[abi:nn180100]((void ***)&__p);
  }
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a40);

  _Unwind_Resume(a1);
}

void sub_182A578D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A57A34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A57C78(_Unwind_Exception *a1)
{
  id v5 = v3;

  _Unwind_Resume(a1);
}

uint64_t ___ZL25pendingSaveTokenInterfacev_block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1ECB5C180];
  uint64_t v1 = (void *)pendingSaveTokenInterface(void)::result;
  pendingSaveTokenInterface(void)::CFTypeRef result = v0;

  int v2 = (void *)pendingSaveTokenInterface(void)::result;
  uint64_t v3 = objc_opt_class();

  return [v2 setClass:v3 forSelector:sel_waitForResult_ argumentIndex:1 ofReply:1];
}

uint64_t std::__split_buffer<std::tuple<NSString * {__strong},unsigned int>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<std::tuple<NSString * {__strong},unsigned int>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    id v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        id v6 = (void *)*((void *)v4 - 2);
        v4 -= 16;
      }
      while (v4 != v2);
      id v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

__n128 __Block_byref_object_copy__339(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__340(uint64_t a1)
{
  int v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void ___ZL23pluginsUnitIDsForBundleP9LSContextPK12LSBundleData_block_invoke(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 8);
  id v5 = (char *)v4[7];
  unint64_t v6 = v4[8];
  if ((unint64_t)v5 >= v6)
  {
    id v8 = (char *)v4[6];
    uint64_t v9 = (v5 - v8) >> 2;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62) {
      abort();
    }
    uint64_t v11 = v6 - (void)v8;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)(v4 + 8), v12);
      id v8 = (char *)v4[6];
      id v5 = (char *)v4[7];
    }
    else
    {
      uint64_t v13 = 0;
    }
    id v14 = &v13[4 * v9];
    BOOL v15 = &v13[4 * v12];
    *(_DWORD *)id v14 = a3;
    uint64_t v7 = v14 + 4;
    while (v5 != v8)
    {
      int v16 = *((_DWORD *)v5 - 1);
      v5 -= 4;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    v4[6] = v14;
    v4[7] = v7;
    v4[8] = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(_DWORD *)id v5 = a3;
    uint64_t v7 = v5 + 4;
  }
  v4[7] = v7;
}

id ___ZL45sendPersonaChangedNotificationsForIdentifiersP9LSContextP5NSSetIP8NSStringE_block_invoke(uint64_t a1, uint64_t a2)
{
  int v2 = +[LSApplicationProxy applicationProxyForIdentifier:a2 withContext:*(void *)(a1 + 32)];
  [v2 detach];

  return v2;
}

void sub_182A57FAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unsigned int *std::vector<unsigned int>::__insert_with_size[abi:nn180100]<std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>>(std::vector<unsigned int> *a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  id v5 = (unsigned int *)__dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v7 = (unsigned int *)__src;
  value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<unsigned int> *)&a1->__end_cap_;
  unint64_t v10 = value;
  unint64_t v12 = *((void *)p_end_cap - 1);
  if (a5 > (uint64_t)((uint64_t)value - v12) >> 2)
  {
    std::vector<unsigned int>::pointer begin = a1->__begin_;
    unint64_t v14 = a5 + ((uint64_t)(v12 - (unint64_t)a1->__begin_) >> 2);
    if (v14 >> 62) {
      abort();
    }
    uint64_t v15 = (__dst - (uint64_t)begin) >> 2;
    uint64_t v16 = (char *)v10 - (char *)begin;
    if (v16 >> 1 > v14) {
      unint64_t v14 = v16 >> 1;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    __v.__end_cap_.__value_ = p_end_cap;
    if (v17) {
      uint64_t v18 = (unsigned int *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)p_end_cap, v17);
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v28 = &v18[v15];
    __v.__first_ = v18;
    __v.__begin_ = v28;
    __v.__end_cap_.__value_ = &v18[v17];
    uint64_t v29 = 4 * a5;
    uint64_t v30 = &v28[a5];
    do
    {
      unsigned int v31 = *v7++;
      *v28++ = v31;
      v29 -= 4;
    }
    while (v29);
    __v.__end_ = v30;
    id v5 = std::vector<unsigned int>::__swap_out_circular_buffer(a1, &__v, v5);
    if (__v.__end_ != __v.__begin_) {
      __v.__end_ = (std::__split_buffer<unsigned int>::pointer)((char *)__v.__end_
    }
                                                              + (((char *)__v.__begin_ - (char *)__v.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
    if (__v.__first_) {
      operator delete(__v.__first_);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 2;
  if (v20 >= a5)
  {
    uint64_t v21 = &__src[4 * a5];
    uint64_t v23 = (unsigned int *)*((void *)p_end_cap - 1);
LABEL_17:
    uint64_t v24 = &v5[a5];
    uint64_t v25 = &v23[-a5];
    int v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      int v26 = v23;
      do
      {
        unsigned int v27 = *v25++;
        *v26++ = v27;
      }
      while ((unint64_t)v25 < v12);
    }
    a1->__end_ = v26;
    if (v23 != v24) {
      memmove(&v23[-(v23 - v24)], v5, (char *)v23 - (char *)v24);
    }
    if (v21 != (char *)v7) {
      memmove(v5, v7, v21 - (char *)v7);
    }
    return v5;
  }
  uint64_t v21 = &__src[4 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*((void **)p_end_cap - 1), &__src[4 * v20], a4 - v21);
  }
  uint64_t v23 = (unsigned int *)(v12 + v22);
  a1->__end_ = (std::vector<unsigned int>::pointer)(v12 + v22);
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_182A58190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::vector<unsigned int>::pointer std::vector<unsigned int>::__swap_out_circular_buffer(std::vector<unsigned int> *this, std::__split_buffer<unsigned int> *__v, std::vector<unsigned int>::pointer __p)
{
  std::vector<unsigned int>::pointer begin = __v->__begin_;
  std::vector<unsigned int>::pointer v6 = this->__begin_;
  uint64_t v7 = begin;
  if (this->__begin_ != __p)
  {
    std::vector<unsigned int>::pointer v8 = __p;
    uint64_t v7 = __v->__begin_;
    do
    {
      unsigned int v9 = *--v8;
      *--uint64_t v7 = v9;
    }
    while (v8 != v6);
  }
  __v->__begin_ = v7;
  std::vector<unsigned int>::pointer end = this->__end_;
  std::__split_buffer<unsigned int>::pointer v11 = __v->__end_;
  int64_t v12 = (char *)end - (char *)__p;
  if (end != __p)
  {
    memmove(__v->__end_, __p, (char *)end - (char *)__p);
    uint64_t v7 = __v->__begin_;
  }
  __v->__end_ = (std::__split_buffer<unsigned int>::pointer)((char *)v11 + v12);
  uint64_t v13 = this->__begin_;
  this->__begin_ = v7;
  __v->__begin_ = v13;
  unint64_t v14 = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = v14;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

void OUTLINED_FUNCTION_0_8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void sub_182A58354(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A5841C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A584D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A58698(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A58AAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A58BCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A58E54(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_182A58FB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A59144(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A5922C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A593C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A597BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  LaunchServices::BindingEvaluator::~BindingEvaluator((LaunchServices::BindingEvaluator *)&a9);

  if (*((unsigned char *)v9 + 168)) {
    LaunchServices::BindingEvaluator::~BindingEvaluator(v9);
  }
  _Unwind_Resume(a1);
}

void sub_182A59E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,id a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,id a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v79 = v75;

  if (a71) {
    LaunchServices::BindingEvaluator::~BindingEvaluator(v76);
  }

  _Block_object_dispose(&a16, 8);
  _Block_object_dispose(&a22, 8);

  if (LOBYTE(STACK[0x2A0])) {
    LaunchServices::BindingEvaluator::~BindingEvaluator((LaunchServices::BindingEvaluator *)&a72);
  }
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a29);

  objc_sync_exit(v72);
  _Block_object_dispose(&a36, 8);

  _Unwind_Resume(a1);
}

void sub_182A5A3AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  std::__optional_destruct_base<LSBinding,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

LaunchServices::BindingEvaluator *__copy_helper_block_ea8_64c59_ZTSNSt3__18optionalIN14LaunchServices16BindingEvaluatorEEE(uint64_t a1, uint64_t a2)
{
  return std::__optional_copy_base<LaunchServices::BindingEvaluator,false>::__optional_copy_base[abi:nn180100]((LaunchServices::BindingEvaluator *)(a1 + 64), (const LaunchServices::BindingEvaluator *)(a2 + 64));
}

void __destroy_helper_block_ea8_64c59_ZTSNSt3__18optionalIN14LaunchServices16BindingEvaluatorEEE(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 232)) {
    LaunchServices::BindingEvaluator::~BindingEvaluator((LaunchServices::BindingEvaluator *)(a1 + 64));
  }
}

void sub_182A5A4E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A5A810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  _Unwind_Resume(a1);
}

void sub_182A5AA88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A5ADDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t std::remove_if[abi:nn180100]<std::__wrap_iter<LSBinding *>,BOOL({block_pointer} {__strong})(LSBinding const&)>(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = a3;
  if (a1 != a2)
  {
    while ((v5[2](v5, a1) & 1) == 0)
    {
      a1 += 48;
      if (a1 == a2) {
        goto LABEL_11;
      }
    }
  }
  if (a1 == a2)
  {
LABEL_11:
    a1 = a2;
  }
  else
  {
    for (uint64_t i = a1 + 48; i != a2; i += 48)
    {
      if ((v5[2](v5, i) & 1) == 0)
      {
        long long v7 = *(_OWORD *)(i + 16);
        *(_OWORD *)a1 = *(_OWORD *)i;
        *(_OWORD *)(a1 + 16) = v7;
        uint64_t v8 = *(void *)(i + 32);
        *(void *)(i + 32) = 0;
        unsigned int v9 = *(void **)(a1 + 32);
        *(void *)(a1 + 32) = v8;

        uint64_t v10 = *(void *)(i + 40);
        *(void *)(i + 40) = 0;
        std::__split_buffer<unsigned int>::pointer v11 = *(void **)(a1 + 40);
        *(void *)(a1 + 40) = v10;

        a1 += 48;
      }
    }
  }

  return a1;
}

void sub_182A5AF8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A5B00C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::vector<LSBinding>::erase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<LSBinding *,LSBinding *,LSBinding *>((uint64_t)&v7, a3, *(void *)(a1 + 8), a2);
    std::vector<LSBinding>::__base_destruct_at_end[abi:nn180100](a1, v5);
  }
  return a2;
}

void sub_182A5B5AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a33);

  _Unwind_Resume(a1);
}

void sub_182A5B864(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A5B954(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A5BA44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A5BB58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LaunchServices::BindingEvaluator *std::__optional_copy_base<LaunchServices::BindingEvaluator,false>::__optional_copy_base[abi:nn180100](LaunchServices::BindingEvaluator *this, const LaunchServices::BindingEvaluator *a2)
{
  *(unsigned char *)this = 0;
  *((unsigned char *)this + 168) = 0;
  if (*((unsigned char *)a2 + 168))
  {
    LaunchServices::BindingEvaluator::BindingEvaluator(this, a2);
    *((unsigned char *)this + 168) = 1;
  }
  return this;
}

void sub_182A5BC70(_Unwind_Exception *exception_object)
{
  if (*((unsigned char *)v1 + 168)) {
    LaunchServices::BindingEvaluator::~BindingEvaluator(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_182A5BD28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<LSBinding *,LSBinding *,LSBinding *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    long long v7 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)v5;
    *(_OWORD *)(a4 + 16) = v7;
    uint64_t v8 = *(void *)(v5 + 32);
    *(void *)(v5 + 32) = 0;
    unsigned int v9 = *(void **)(a4 + 32);
    *(void *)(a4 + 32) = v8;

    uint64_t v10 = *(void *)(v5 + 40);
    *(void *)(v5 + 40) = 0;
    std::__split_buffer<unsigned int>::pointer v11 = *(void **)(a4 + 40);
    *(void *)(a4 + 40) = v10;

    a4 += 48;
    v5 += 48;
  }
  while (v5 != v6);
  return v6;
}

void sub_182A5C4B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_182A5C57C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A5C64C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A5C734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_182A5CAA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_182A5CD7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A5D224(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A5D654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  uint64_t v19 = v17;

  _Unwind_Resume(a1);
}

void sub_182A5D86C(_Unwind_Exception *a1)
{
  uint64_t v5 = v3;

  _Unwind_Resume(a1);
}

void sub_182A5D974(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A5D9E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A5DD3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A5E084(_Unwind_Exception *a1)
{
  uint64_t v6 = v4;

  _Unwind_Resume(a1);
}

void sub_182A5E328(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_182A5EBB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_182A5EC40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A5ED2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  CFRelease(v10);

  _Unwind_Resume(a1);
}

void sub_182A5EE5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A5EF0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A5F02C(_Unwind_Exception *a1)
{
  uint64_t v6 = v4;

  _Unwind_Resume(a1);
}

void sub_182A5F318(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A5F4D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A5F5A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  std::__split_buffer<unsigned int>::pointer v11 = v10;

  _Unwind_Resume(a1);
}

void sub_182A5F684(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_182A5F75C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_182A5F818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A5F8FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A5F9F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A5FAFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A5FBE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A5FD64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A5FE38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A5FF04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A601D8(_Unwind_Exception *a1)
{
  uint64_t v6 = v4;

  _Unwind_Resume(a1);
}

void sub_182A60444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, CFTypeRef a11)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a11) {
    CFRelease(a11);
  }

  _Unwind_Resume(a1);
}

void sub_182A6054C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A60CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&STACK[0x200]);
  _Unwind_Resume(a1);
}

void sub_182A60F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A6100C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_182A6111C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_182A612B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A61354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A61778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a29);
  _Unwind_Resume(a1);
}

void sub_182A61900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A6199C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A61ACC(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_182A61CF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A61DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A6205C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  uint64_t v13 = v12;

  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)va);
  _Unwind_Resume(a1);
}

void sub_182A62360(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A6256C(_Unwind_Exception *a1)
{
  uint64_t v4 = v2;

  _Unwind_Resume(a1);
}

void sub_182A628E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A62A44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void configureUIDForUserSession(NSXPCConnection *a1)
{
  id v1 = [(NSXPCConnection *)a1 _xpcConnection];
  xpc_connection_set_target_user_session_uid();
}

void sub_182A62C44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _LSDServiceStartAllServices()
{
  _LSAssertRunningInServer((uint64_t)"void _LSDServiceStartAllServices()");
  if (_LSDServiceStartAllServices::once != -1)
  {
    dispatch_once(&_LSDServiceStartAllServices::once, &__block_literal_global_25_0);
  }
}

void sub_182A62FB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A6322C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A63324(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A633F4(_Unwind_Exception *a1)
{
}

id __copy_helper_block_ea8_56c41_ZTS35ServiceConnectionConfigurationState(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v3;
  id result = *(id *)(a2 + 80);
  *(void *)(a1 + 80) = result;
  return result;
}

void __destroy_helper_block_ea8_56c41_ZTS35ServiceConnectionConfigurationState(uint64_t a1)
{
}

void sub_182A634D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A63540(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_182A635E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSServer_MakeServiceFloorBlock(void *a1)
{
  qos_class_t v2 = qos_class_self();
  if (v2 <= QOS_CLASS_DEFAULT) {
    dispatch_qos_class_t v3 = QOS_CLASS_DEFAULT;
  }
  else {
    dispatch_qos_class_t v3 = v2;
  }
  dispatch_block_t v4 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ASSIGN_CURRENT, v3, 0, a1);

  return v4;
}

void sub_182A637B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A63844(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A638D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LaunchServices::DumpWriter *LaunchServices::DumpWriter::DumpWriter(LaunchServices::DumpWriter *this, _LSDatabase *a2, NSMutableAttributedString *a3)
{
  uint64_t v5 = a2;
  CSStore2::AttributedStringWriter::AttributedStringWriter(this, v5->store, a3);
  *(void *)this = &unk_1ECB17698;
  *((void *)this + 32) = v5;
  return this;
}

void sub_182A63978(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *LaunchServices::DumpWriter::DumpWriter(LaunchServices::DumpWriter *this, NSMutableAttributedString *a2)
{
  id result = (void *)CSStore2::AttributedStringWriter::AttributedStringWriter(this, 0, a2);
  void *result = &unk_1ECB17698;
  result[32] = 0;
  return result;
}

void LaunchServices::DumpWriter::~DumpWriter(id *this)
{
  *this = &unk_1ECB17698;

  CSStore2::AttributedStringWriter::~AttributedStringWriter((CSStore2::AttributedStringWriter *)this);
}

{
  uint64_t vars8;

  *this = &unk_1ECB17698;

  CSStore2::AttributedStringWriter::~AttributedStringWriter((CSStore2::AttributedStringWriter *)this);

  JUMPOUT(0x18530EAF0);
}

void LaunchServices::DumpWriter::platform(LaunchServices::DumpWriter *this, NSString *a2, uint64_t a3)
{
  uint64_t v5 = a2;
  if (a3)
  {
    if (a3 != 6)
    {
      if (dyld_is_simulator_platform())
      {
        uint64_t v6 = (__CFString *)objc_msgSend([NSString alloc], "initWithFormat:", @"simulator (%llu)", dyld_get_base_platform());
        if (v6) {
          goto LABEL_10;
        }
      }
      else if (dyld_get_active_platform() == a3)
      {
        uint64_t v6 = @"native";
        goto LABEL_10;
      }
      uint64_t v8 = v5;
      unsigned int v9 = [NSNumber numberWithUnsignedInt:a3];
      CSStore2::AttributedStringWriter::number(this, v8, v9);

      goto LABEL_11;
    }
    uint64_t v6 = @"Mac Catalyst";
  }
  else
  {
    uint64_t v6 = @"#";
  }
LABEL_10:
  long long v7 = [NSNumber numberWithUnsignedInt:a3];
  uint64_t v10 = v5;
  uint64_t v8 = v6;
  CSStore2::AttributedStringWriter::withAppliedAttribute();

LABEL_11:
}

void sub_182A63C4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN14LaunchServices10DumpWriter8platformEP8NSStringj_block_invoke(uint64_t a1)
{
  return CSStore2::AttributedStringWriter::string(*(CSStore2::AttributedStringWriter **)(a1 + 48), *(NSString **)(a1 + 32), *(NSString **)(a1 + 40));
}

void LaunchServices::DumpWriter::directoryClass(uint64_t a1, void *a2, uint64_t a3)
{
  id v4 = a2;
  if a3 < 9 && ((0x1FDu >> a3))
  {
    uint64_t v5 = off_1E522F440[(char)a3];
  }
  else
  {
    objc_msgSend(NSString, "stringWithFormat:", @"Other (%llu)", a3);
    uint64_t v5 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  uint64_t v6 = [NSNumber numberWithUnsignedChar:a3];
  id v7 = v4;
  uint64_t v8 = v5;
  CSStore2::AttributedStringWriter::withAppliedAttribute();
}

void sub_182A63DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN14LaunchServices10DumpWriter14directoryClassEP8NSString16LSDirectoryClass_block_invoke(uint64_t a1)
{
  return CSStore2::AttributedStringWriter::string(*(CSStore2::AttributedStringWriter **)(a1 + 48), *(NSString **)(a1 + 32), *(NSString **)(a1 + 40));
}

void LaunchServices::DumpWriter::version(LaunchServices::DumpWriter *this, NSString *a2, LSVersionNumber *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a2;
  long long v6 = *(_OWORD *)&a3->_opaque[16];
  v13[0] = *(_OWORD *)a3->_opaque;
  v13[1] = v6;
  memset(v12, 0, sizeof(v12));
  if (_LSVersionNumberCompare(v13, v12))
  {
    long long v7 = *(_OWORD *)&a3->_opaque[16];
    v11[0] = *(_OWORD *)a3->_opaque;
    v11[1] = v7;
    uint64_t v8 = _LSVersionNumberGetStringRepresentation(v11);
    unsigned int v9 = (void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytesNoCopy:a3 length:32 freeWhenDone:0];
    uint64_t v10 = [v9 description];
    CSStore2::AttributedStringWriter::format(this, v5, &stru_1ECB25B70.isa, v8, v10);
  }
  else
  {
    CSStore2::AttributedStringWriter::string(this, v5, &stru_1ECB1A570.isa);
  }
}

void sub_182A63F44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSSetDatabaseIsSeeded(int a1)
{
  uint64_t v8 = 0;
  unsigned int v9 = &v8;
  uint64_t v10 = 0x2020000000;
  int v11 = 0;
  qos_class_t v2 = (void *)MEMORY[0x18530F680]();
  v7[0] = (void (*)(void, void))MEMORY[0x1E4F143A8];
  v7[1] = (void (*)(void, void))3221225472;
  v7[2] = (void (*)(void, void))___LSSetDatabaseIsSeeded_block_invoke;
  v7[3] = (void (*)(void, void))&unk_1E522C550;
  void v7[4] = (void (*)(void, void))&v8;
  dispatch_qos_class_t v3 = +[_LSDService synchronousXPCProxyWithErrorHandler:]((uint64_t)_LSDModifyService, v7);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = ___LSSetDatabaseIsSeeded_block_invoke_2;
  v6[3] = &unk_1E522C680;
  void v6[4] = &v8;
  [v3 setDatabaseIsSeeded:a1 != 0 completionHandler:v6];

  uint64_t v4 = *((unsigned int *)v9 + 6);
  _Block_object_dispose(&v8, 8);
  return v4;
}

void sub_182A64384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _LSRegisterItemInfo(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id v14 = a1;
  id v15 = a2;
  id v16 = a3;
  uint64_t v24 = 0;
  uint64_t v25 = &v24;
  uint64_t v26 = 0x2020000000;
  int v27 = 0;
  unint64_t v17 = (void *)MEMORY[0x18530F680]();
  v23[0] = (void (*)(void, void))MEMORY[0x1E4F143A8];
  v23[1] = (void (*)(void, void))3221225472;
  void v23[2] = (void (*)(void, void))___LSRegisterItemInfo_block_invoke;
  v23[3] = (void (*)(void, void))&unk_1E522C550;
  v23[4] = (void (*)(void, void))&v24;
  uint64_t v18 = +[_LSDService synchronousXPCProxyWithErrorHandler:]((uint64_t)_LSDModifyService, v23);
  v22[0] = MEMORY[0x1E4F143A8];
  v22[1] = 3221225472;
  void v22[2] = ___LSRegisterItemInfo_block_invoke_2;
  v22[3] = &unk_1E522F490;
  void v22[4] = &v24;
  v22[5] = a6;
  v22[6] = a7;
  v22[7] = a8;
  [v18 registerItemInfo:v14 alias:v15 diskImageAlias:v16 bundleURL:a4 installationPlist:a5 completionHandler:v22];

  uint64_t v19 = *((unsigned int *)v25 + 6);
  _Block_object_dispose(&v24, 8);

  return v19;
}

void sub_182A645A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _LSRegisterExtensionPointClient(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = 0;
  id v15 = &v14;
  uint64_t v16 = 0x2020000000;
  int v17 = 0;
  uint64_t v8 = (void *)MEMORY[0x18530F680]();
  v13[0] = (void (*)(void, void))MEMORY[0x1E4F143A8];
  v13[1] = (void (*)(void, void))3221225472;
  _OWORD v13[2] = (void (*)(void, void))___LSRegisterExtensionPointClient_block_invoke;
  v13[3] = (void (*)(void, void))&unk_1E522C550;
  void v13[4] = (void (*)(void, void))&v14;
  unsigned int v9 = +[_LSDService synchronousXPCProxyWithErrorHandler:]((uint64_t)_LSDModifyService, v13);
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  _OWORD v12[2] = ___LSRegisterExtensionPointClient_block_invoke_2;
  void v12[3] = &unk_1E522C680;
  void v12[4] = &v14;
  [v9 registerExtensionPoint:a1 platform:a2 declaringURL:a4 withInfo:a3 completionHandler:v12];

  uint64_t v10 = *((unsigned int *)v15 + 6);
  _Block_object_dispose(&v14, 8);
  return v10;
}

void sub_182A64824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _LSUnregisterExtensionPointClient(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = 0;
  id v15 = &v14;
  uint64_t v16 = 0x2020000000;
  int v17 = 0;
  uint64_t v8 = (void *)MEMORY[0x18530F680]();
  v13[0] = (void (*)(void, void))MEMORY[0x1E4F143A8];
  v13[1] = (void (*)(void, void))3221225472;
  _OWORD v13[2] = (void (*)(void, void))___LSUnregisterExtensionPointClient_block_invoke;
  v13[3] = (void (*)(void, void))&unk_1E522C550;
  void v13[4] = (void (*)(void, void))&v14;
  unsigned int v9 = +[_LSDService synchronousXPCProxyWithErrorHandler:]((uint64_t)_LSDModifyService, v13);
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  _OWORD v12[2] = ___LSUnregisterExtensionPointClient_block_invoke_2;
  void v12[3] = &unk_1E522C680;
  void v12[4] = &v14;
  [v9 unregisterExtensionPoint:a1 platform:a2 withVersion:a3 parentBundleUnit:a4 completionHandler:v12];

  uint64_t v10 = *((unsigned int *)v15 + 6);
  _Block_object_dispose(&v14, 8);
  return v10;
}

void sub_182A64A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _LSSetContentTypeHandler(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v15 = 0;
  uint64_t v16 = &v15;
  uint64_t v17 = 0x2020000000;
  int v18 = 0;
  uint64_t v8 = (void *)MEMORY[0x18530F680]();
  v14[0] = (void (*)(void, void))MEMORY[0x1E4F143A8];
  v14[1] = (void (*)(void, void))3221225472;
  void v14[2] = (void (*)(void, void))___LSSetContentTypeHandler_block_invoke;
  v14[3] = (void (*)(void, void))&unk_1E522C550;
  void v14[4] = (void (*)(void, void))&v15;
  unsigned int v9 = +[_LSDService synchronousXPCProxyWithErrorHandler:]((uint64_t)_LSDModifyService, v14);
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  _OWORD v13[2] = ___LSSetContentTypeHandler_block_invoke_2;
  v13[3] = &unk_1E522C680;
  void v13[4] = &v15;
  long long v10 = a4[1];
  v19[0] = *a4;
  v19[1] = v10;
  [v9 setHandler:a3 version:v19 roles:a2 forContentType:a1 completionHandler:v13];

  uint64_t v11 = *((unsigned int *)v16 + 6);
  _Block_object_dispose(&v15, 8);
  return v11;
}

void sub_182A64C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _LSSetSchemeHandler(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = 0;
  uint64_t v15 = &v14;
  uint64_t v16 = 0x2020000000;
  int v17 = 0;
  long long v6 = (void *)MEMORY[0x18530F680]();
  if (_LSBundleDataGetUnsupportedFormatFlag()
    && (uint64_t v7 = _LSGetAuditTokenForSelf(), !_LSCheckEntitlementForChangingDefaultHandler(v7, a1, 0)))
  {
    *((_DWORD *)v15 + 6) = -10822;
  }
  else
  {
    v13[0] = (void (*)(void, void))MEMORY[0x1E4F143A8];
    v13[1] = (void (*)(void, void))3221225472;
    _OWORD v13[2] = (void (*)(void, void))___LSSetSchemeHandler_block_invoke;
    v13[3] = (void (*)(void, void))&unk_1E522C550;
    void v13[4] = (void (*)(void, void))&v14;
    uint64_t v8 = +[_LSDService synchronousXPCProxyWithErrorHandler:]((uint64_t)_LSDModifyService, v13);
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    _OWORD v12[2] = ___LSSetSchemeHandler_block_invoke_2;
    void v12[3] = &unk_1E522C680;
    void v12[4] = &v14;
    long long v9 = a3[1];
    v18[0] = *a3;
    v18[1] = v9;
    [v8 setHandler:a2 version:v18 forURLScheme:a1 completionHandler:v12];
  }
  uint64_t v10 = *((unsigned int *)v15 + 6);
  _Block_object_dispose(&v14, 8);
  return v10;
}

void sub_182A64E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _LSRemoveSchemeHandler(uint64_t a1)
{
  uint64_t v8 = 0;
  long long v9 = &v8;
  uint64_t v10 = 0x2020000000;
  int v11 = 0;
  qos_class_t v2 = (void *)MEMORY[0x18530F680]();
  v7[0] = (void (*)(void, void))MEMORY[0x1E4F143A8];
  v7[1] = (void (*)(void, void))3221225472;
  v7[2] = (void (*)(void, void))___LSRemoveSchemeHandler_block_invoke;
  v7[3] = (void (*)(void, void))&unk_1E522C550;
  void v7[4] = (void (*)(void, void))&v8;
  dispatch_qos_class_t v3 = +[_LSDService synchronousXPCProxyWithErrorHandler:]((uint64_t)_LSDModifyService, v7);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = ___LSRemoveSchemeHandler_block_invoke_2;
  v6[3] = &unk_1E522C680;
  void v6[4] = &v8;
  [v3 removeHandlerForURLScheme:a1 completionHandler:v6];

  uint64_t v4 = *((unsigned int *)v9 + 6);
  _Block_object_dispose(&v8, 8);
  return v4;
}

void sub_182A6506C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _LSSyncWithMobileInstallation()
{
  uint64_t v0 = (void *)MEMORY[0x18530F680]();
  id v1 = +[_LSDService XPCProxyWithErrorHandler:]((uint64_t)_LSDModifyService, 0);
  [v1 synchronizeWithMobileInstallation];
}

uint64_t __LAUNCH_SERVICES_IS_WAITING_ON_THE_MAIN_QUEUE_DUE_TO_A_MANUAL_REBUILD__(void *a1, uint64_t a2)
{
  return [a1 getServerStoreBlockingWithCompletionHandler:a2];
}

uint64_t __LAUNCH_SERVICES_WAS_ASKED_TO_PERFORM_BLOCKING_IO_ON_THE_MAIN_QUEUE__(void *a1, uint64_t a2)
{
  return [a1 getServerStoreBlockingWithCompletionHandler:a2];
}

uint64_t __LAUNCH_SERVICES_IS_RESEEDING_ITS_DATABASE_DUE_TO_A_MANUAL_REBUILD_AND_MAY_BLOCK__(void *a1, uint64_t a2)
{
  return [a1 getServerStoreBlockingWithCompletionHandler:a2];
}

uint64_t __LAUNCH_SERVICES_IS_RESEEDING_ITS_DATABASE_AND_MAY_BLOCK__(void *a1, uint64_t a2)
{
  return [a1 getServerStoreBlockingWithCompletionHandler:a2];
}

BOOL _LSCheckEntitlementForAuditToken(uint64_t a1, void *a2)
{
  return _LSCheckEntitlementForAuditTokenWithDefault(a1, a2, 0);
}

uint64_t _LSCheckMIAllowedSPIForXPCConnection(void *a1, void *a2)
{
  id v3 = a1;
  uint64_t v4 = v3;
  uint64_t v5 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2020000000;
  char v15 = 0;
  if (v3 && a2)
  {
    long long v6 = _LSCopyEntitlementValueForXPCConnection(v3, @"com.apple.private.mobileinstall.allowedSPI");
    uint64_t v7 = v6;
    if (v6 && object_getClass(v6) == (Class)MEMORY[0x1E4F14568])
    {
      uint64_t v8 = (void *)MEMORY[0x18530F680]();
      uint64_t v9 = [a2 UTF8String];
      v11[0] = MEMORY[0x1E4F143A8];
      v11[1] = 3221225472;
      _OWORD v11[2] = ___LSCheckMIAllowedSPIForXPCConnection_block_invoke;
      v11[3] = &unk_1E522F610;
      void v11[4] = &v12;
      void v11[5] = v9;
      xpc_array_apply(v7, v11);
    }

    uint64_t v5 = *((unsigned __int8 *)v13 + 24);
  }
  _Block_object_dispose(&v12, 8);

  return v5;
}

void sub_182A65420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_182A654D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSCheckOpenSensitiveURLForXPCConnection(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = v3;
  uint64_t v5 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2020000000;
  char v14 = 0;
  if (v3 && a2)
  {
    long long v6 = _LSCopyEntitlementValueForXPCConnection(v3, @"com.apple.springboard.opensensitiveurl");
    uint64_t v7 = v6;
    if (v6)
    {
      if (object_getClass(v6) == (Class)MEMORY[0x1E4F14568])
      {
        v10[0] = MEMORY[0x1E4F143A8];
        v10[1] = 3221225472;
        void v10[2] = ___LSCheckOpenSensitiveURLForXPCConnection_block_invoke;
        void v10[3] = &unk_1E522F610;
        void v10[4] = &v11;
        void v10[5] = a2;
        xpc_array_apply(v7, v10);
      }
      else
      {
        BOOL v8 = _LSGetBooleanValueForEntitlementValue(v7, 0);
        *((unsigned char *)v12 + 24) = v8;
      }
    }

    uint64_t v5 = *((unsigned __int8 *)v12 + 24);
  }
  _Block_object_dispose(&v11, 8);

  return v5;
}

void sub_182A65600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void sub_182A656B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSCheckLSDServiceAccessForAuditToken(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)MEMORY[0x18530F680]();
  if (_LSCheckLSDServiceAccessForAuditToken::once != -1) {
    dispatch_once(&_LSCheckLSDServiceAccessForAuditToken::once, &__block_literal_global_38);
  }
  uint64_t v5 = 0;
  if (a1 && a2)
  {
    if (_LSCheckLSDServiceAccessForAuditToken::lsdServiceClass && !objc_msgSend(a2, "isSubclassOfClass:"))
    {
      uint64_t v5 = 0;
    }
    else
    {
      long long v6 = objc_msgSend((id)__LSDefaultsGetSharedInstance(), "serviceNameForConnectionType:", objc_msgSend(a2, "connectionType"));
      uint64_t v5 = _LSCheckMachPortAccessForAuditToken(a1, v6);
    }
  }
  return v5;
}

void sub_182A6579C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_OWORD *_LSIsAuditTokenPlatformBinary(_OWORD *result)
{
  if (result)
  {
    pid_t pidp = 0;
    long long v1 = result[1];
    *(_OWORD *)atoken.val = *result;
    *(_OWORD *)&atoken.val[4] = v1;
    audit_token_to_au32(&atoken, 0, 0, 0, 0, 0, &pidp, 0, 0);
    if (csops_audittoken()) {
      return 0;
    }
    else {
      return 0;
    }
  }
  return result;
}

_OWORD *_LSIsXPCConnectionPlatformBinary(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    xpc_connection_get_audit_token();
    qos_class_t v2 = _LSIsAuditTokenPlatformBinary(&v4);
  }
  else
  {
    qos_class_t v2 = 0;
  }

  return v2;
}

void sub_182A658B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CFTypeRef _LSCopyBundleIdentifierForAuditToken(_OWORD *a1, int a2)
{
  if (a1)
  {
    long long v4 = _LSCopyEntitlementValueForAuditToken((uint64_t)a1, @"application-identifier");
    uint64_t v5 = v4;
    if (v4 && object_getClass(v4) == (Class)MEMORY[0x1E4F145F0])
    {
      uint64_t v13 = [NSString stringWithUTF8String:xpc_string_get_string_ptr(v5)];
      *(void *)atoken.val = 0;
      _LSSplitApplicationIdentifier(v13, 0, (id *)&atoken);
      if (*(void *)atoken.val)
      {
        CFTypeRef v12 = *(id *)atoken.val;

LABEL_17:
        return v12;
      }
    }
    pid_t v6 = getpid();
    pid_t pidp = 0;
    long long v7 = a1[1];
    *(_OWORD *)atoken.val = *a1;
    *(_OWORD *)&atoken.val[4] = v7;
    audit_token_to_au32(&atoken, 0, 0, 0, 0, 0, &pidp, 0, 0);
    if (v6 == pidp
      && (CFBundleRef MainBundle = CFBundleGetMainBundle()) != 0
      && (Unique = (__CFBundle *)CFRetain(MainBundle)) != 0
      || (uint64_t v10 = (const void *)_LSCopyBundleURLForAuditToken(a1, a2)) != 0
      && (Unique = (__CFBundle *)_CFBundleCreateUnique(), CFRelease(v10), Unique))
    {
      CFStringRef Identifier = CFBundleGetIdentifier(Unique);
      if (Identifier) {
        CFTypeRef v12 = CFRetain(Identifier);
      }
      else {
        CFTypeRef v12 = 0;
      }
      CFRelease(Unique);
    }
    else
    {
      CFTypeRef v12 = 0;
    }
    goto LABEL_17;
  }
  return 0;
}

void sub_182A65A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

unint64_t _LSBundleIdentifierIsWebBrowser(unint64_t result)
{
  if (result)
  {
    id v1 = (const void *)result;
    return CFEqual((CFTypeRef)result, @"com.apple.mobilesafari") || CFEqual(v1, @"com.apple.Safari") != 0;
  }
  return result;
}

BOOL _LSCurrentProcessCanAccessManagedSettings()
{
  if (_LSGetAuditTokenForSelf::once != -1) {
    dispatch_once(&_LSGetAuditTokenForSelf::once, &__block_literal_global_183);
  }
  uint64_t v0 = _LSCopyEntitlementValueForAuditToken(_LSGetAuditTokenForSelf::result, @"com.apple.private.managed-settings.effective-read");
  BOOL v1 = _LSGetBooleanValueForEntitlementValue(v0, 0);

  return v1;
}

void sub_182A65B78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL _LSAuditTokensAreEqual(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

uint64_t _LSGetConsoleOwnerUID(uid_t *a1)
{
  if (lstat("/dev/console", &v3)) {
    return 0;
  }
  if (a1) {
    *a1 = v3.st_uid;
  }
  return 1;
}

CFTypeRef _LSCopyBundleIdentifierForXPCConnection(void *a1, int a2)
{
  id v3 = a1;
  xpc_connection_get_audit_token();
  CFTypeRef v4 = _LSCopyBundleIdentifierForAuditToken(&v6, a2);

  return v4;
}

void sub_182A65C54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A65C80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A65DA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A65EC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A65FB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A661D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A66320(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A663E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSEnumeratorFireErrorHandler(atomic_uchar *a1, void *a2)
{
  v8[1] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if ((atomic_exchange(a1 + 16, 1u) & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)_LSEnumeratorLog, OS_LOG_TYPE_ERROR)) {
      _LSEnumeratorFireErrorHandler_cold_1();
    }
    CFTypeRef v4 = [(atomic_uchar *)a1 errorHandler];
    if (v4)
    {
      uint64_t v5 = (void *)MEMORY[0x18530F680]();
      if (!v3)
      {
        uint64_t v7 = *MEMORY[0x1E4F28228];
        v8[0] = @"Fallback for nil error in enumerator error handler";
        long long v6 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v8 forKeys:&v7 count:1];
        _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -10810, (uint64_t)"_LSEnumeratorFireErrorHandler", 178, v6);
        id v3 = (id)objc_claimAutoreleasedReturnValue();
      }
      ((void (**)(void, id))v4)[2](v4, v3);
    }
  }
}

void sub_182A66568(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A6661C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A666B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A66794(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSGetOSStatusFromPOSIXErrorCode(uint64_t a1)
{
  int v1 = a1;
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1;
  if ((int)a1 < -1) {
    goto LABEL_6;
  }
  if ((a1 - 107) <= 0x37)
  {
    if (a1 == 125) {
      uint64_t v2 = 4294966686;
    }
    else {
      uint64_t v2 = 4294956486;
    }
    goto LABEL_6;
  }
  if ((int)a1 > 44)
  {
    if ((int)a1 > 68)
    {
      if (a1 == 69)
      {
LABEL_21:
        uint64_t v2 = 4294967262;
        goto LABEL_6;
      }
      if (a1 != 78)
      {
        if (a1 == 80)
        {
LABEL_20:
          uint64_t v2 = 4294962296;
          goto LABEL_6;
        }
        goto LABEL_25;
      }
    }
    else if (a1 != 45)
    {
      if (a1 == 63)
      {
        uint64_t v2 = 4294967259;
        goto LABEL_6;
      }
      if (a1 == 66)
      {
LABEL_16:
        uint64_t v2 = 4294967249;
        goto LABEL_6;
      }
LABEL_25:
      uint64_t v2 = 4294967260;
      goto LABEL_6;
    }
    uint64_t v2 = 4294967292;
    goto LABEL_6;
  }
  uint64_t v2 = a1;
  switch((int)a1)
  {
    case -1:
      if (*__error() == -1) {
        goto LABEL_25;
      }
      uint64_t v5 = __error();
      uint64_t v2 = _LSGetOSStatusFromPOSIXErrorCode(*v5);
      break;
    case 0:
      break;
    case 1:
      uint64_t v2 = 4294967242;
      break;
    case 2:
      uint64_t v2 = 4294967253;
      break;
    case 9:
      uint64_t v2 = 4294967245;
      break;
    case 12:
    case 23:
      uint64_t v2 = 4294967255;
      break;
    case 13:
      goto LABEL_20;
    case 16:
      goto LABEL_16;
    case 17:
      uint64_t v2 = 4294967248;
      break;
    case 20:
      uint64_t v2 = 4294967176;
      break;
    case 22:
      uint64_t v2 = 4294967246;
      break;
    case 24:
      uint64_t v2 = 4294967254;
      break;
    case 28:
      goto LABEL_21;
    case 30:
      uint64_t v2 = 4294967235;
      break;
    default:
      goto LABEL_25;
  }
LABEL_6:
  id v3 = _LSErrorLog();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    v6[0] = 67109634;
    v6[1] = v1;
    __int16 v7 = 2082;
    BOOL v8 = strerror(v1);
    __int16 v9 = 2048;
    uint64_t v10 = (int)v2;
    _os_log_debug_impl(&dword_182959000, v3, OS_LOG_TYPE_DEBUG, "Converted POSIX error %i (%{public}s) to OSStatus %li", (uint8_t *)v6, 0x1Cu);
  }

  return v2;
}

void sub_182A669C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSGetOSStatusFromNSError(void *a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    uint64_t v4 = 4294956486;
    goto LABEL_31;
  }
  id v3 = [v1 domain];
  uint64_t v4 = [v2 code];
  uint64_t v5 = [v2 userInfo];
  if (![v3 isEqual:*MEMORY[0x1E4F28760]])
  {
    if (![v3 isEqual:*MEMORY[0x1E4F28798]])
    {
      if ((unint64_t)(v4 - 4096) > 0x80)
      {
        if (v4 == 4 && ([v3 isEqual:*MEMORY[0x1E4F281F8]] & 1) != 0)
        {
          uint64_t v4 = 4294967253;
          goto LABEL_22;
        }
      }
      else if ([v3 isEqual:*MEMORY[0x1E4F281F8]])
      {
        long long v6 = _LSErrorLog();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
          _LSGetOSStatusFromNSError_cold_2((uint64_t)v2, v6);
        }

        uint64_t v4 = 4294956474;
        goto LABEL_22;
      }
      uint64_t v7 = [v5 objectForKeyedSubscript:*MEMORY[0x1E4F28A50]];
      BOOL v8 = (void *)v7;
      if (v7 && (void *)v7 != v2 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
      {
        uint64_t v4 = _LSGetOSStatusFromNSError(v8);
      }
      else
      {
        __int16 v9 = _LSErrorLog();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
          _LSGetOSStatusFromNSError_cold_3((uint64_t)v2, v9);
        }

        uint64_t v4 = 4294956486;
      }

      goto LABEL_22;
    }
    uint64_t v4 = _LSGetOSStatusFromPOSIXErrorCode(v4);
  }
LABEL_22:
  uint64_t v10 = _LSErrorLog();
  BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG);

  if (v11)
  {
    CFTypeRef v12 = [v5 objectForKeyedSubscript:@"_LSFunction"];
    if (v12)
    {
      uint64_t v13 = [v5 objectForKeyedSubscript:@"_LSLine"];
      char v14 = _LSErrorLog();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        int v16 = 138544130;
        int v17 = v12;
        __int16 v18 = 2114;
        uint64_t v19 = v13;
        __int16 v20 = 2048;
        uint64_t v21 = (int)v4;
        __int16 v22 = 2114;
        uint64_t v23 = v2;
        _os_log_debug_impl(&dword_182959000, v14, OS_LOG_TYPE_DEBUG, "Launch Services constructed an error at %{public}@:%{public}@, translating to OSStatus %li: %{public}@", (uint8_t *)&v16, 0x2Au);
      }
    }
    else
    {
      uint64_t v13 = _LSErrorLog();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
        _LSGetOSStatusFromNSError_cold_1();
      }
    }
  }
LABEL_31:

  return v4;
}

void sub_182A66D5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL _LSNSErrorIsFNFError(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = [v1 domain];
    if ([v3 isEqual:*MEMORY[0x1E4F281F8]])
    {
      if ([v2 code] == 260)
      {
        BOOL v4 = 1;
LABEL_16:

        goto LABEL_17;
      }
      uint64_t v7 = [v2 code];

      if (v7 == 4) {
        goto LABEL_14;
      }
    }
    else
    {
    }
    uint64_t v5 = [v2 domain];
    if ([v5 isEqual:*MEMORY[0x1E4F28798]])
    {
      uint64_t v6 = [v2 code];

      if (v6 == 2)
      {
LABEL_14:
        BOOL v4 = 1;
        goto LABEL_17;
      }
    }
    else
    {
    }
    id v3 = [v2 domain];
    if ([v3 isEqual:*MEMORY[0x1E4F28760]]) {
      BOOL v4 = [v2 code] == -43;
    }
    else {
      BOOL v4 = 0;
    }
    goto LABEL_16;
  }
  BOOL v4 = 0;
LABEL_17:

  return v4;
}

void sub_182A66ED4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSParseLoadCommands()
{
  int v0 = MEMORY[0x1F4188790]();
  uint64_t v2 = v1;
  BOOL v4 = v3;
  uint64_t v6 = v5;
  int v7 = v0;
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  id v9 = v8;
  lseek(v7, 0, 0);
  if ((unint64_t)v6 >= 0x2000) {
    uint64_t v10 = 0x2000;
  }
  else {
    uint64_t v10 = v6;
  }
  if (v6 <= 0) {
    size_t v11 = 0x2000;
  }
  else {
    size_t v11 = v10;
  }
  ssize_t v12 = read(v7, &v41, v11);
  if (v12 < 28)
  {
    int v15 = handleWeirdHeaderTypes((unsigned __int8 *)&v41, v12, v4, v9);
    if (v2 && !v15) {
      *uint64_t v2 = 1;
    }
    goto LABEL_53;
  }
  uint32_t magic = v41.magic;
  if ((int)v41.magic <= -805638659)
  {
    if (v41.magic != -1095041334 && v41.magic != -889275714)
    {
      int v14 = -822415874;
LABEL_42:
      if (v41.magic == v14)
      {
        CFDictionaryAddValue(v4, @"LSExecutableFormat", @"LSExecutableMachOFormat");
        appendSliceForCPUTypeSubtype(v9, bswap32(v41.cputype), bswap32(v41.cpusubtype));
        int v16 = &v41;
        goto LABEL_44;
      }
      handleWeirdHeaderTypes((unsigned __int8 *)&v41, v12, v4, v9);
      goto LABEL_53;
    }
    CFDictionaryAddValue(v4, @"LSExecutableFormat", @"LSExecutableMachOFormat");
    unsigned int v17 = bswap32(v41.cputype);
    if (magic == -1095041334) {
      uint64_t cputype = v17;
    }
    else {
      uint64_t cputype = v41.cputype;
    }
    if (!cputype) {
      goto LABEL_53;
    }
    int v16 = 0;
    p_cpusubtype = (unsigned int *)&v41.cpusubtype;
    __int16 v20 = (unsigned int *)((char *)&v39 + v12 + 12);
    while (1)
    {
      if (p_cpusubtype > v20)
      {
LABEL_39:
        if (!v16) {
          goto LABEL_53;
        }
LABEL_44:
        uint64_t v34 = 0;
        id v35 = &v34;
        uint64_t v36 = 0x2020000000;
        int v37 = 0;
        uint64_t v30 = 0;
        unsigned int v31 = &v30;
        uint64_t v32 = 0x2020000000;
        int v33 = 0;
        v28[0] = 0;
        v28[1] = v28;
        v28[2] = 0x2020000000;
        int v29 = 0;
        dyld_get_active_platform();
        dyld_get_image_versions();
        uint64_t v25 = *((unsigned int *)v31 + 6);
        if (v25)
        {
          long long v39 = 0u;
          long long v40 = 0u;
          _LSMakeVersionNumberFromDYLDVersion(v25, &v39);
          v38[0] = v39;
          v38[1] = v40;
          CFStringRef v26 = _LSVersionNumberCopyStringRepresentation(v38);
          if (v26)
          {
            CFDictionarySetValue(v4, @"LSExecutableSDKVersion", v26);
            CFRelease(v26);
          }
        }
        if (*((_DWORD *)v35 + 6))
        {
          CFNumberRef v27 = CFNumberCreate(0, kCFNumberSInt32Type, v35 + 3);
          if (v27)
          {
            CFDictionarySetValue(v4, @"LSExecutablePlatformKey", v27);
            CFRelease(v27);
          }
        }
        if (v16 != &v41) {
          free(v16);
        }
        _Block_object_dispose(v28, 8);
        _Block_object_dispose(&v30, 8);
        _Block_object_dispose(&v34, 8);
        goto LABEL_53;
      }
      unsigned int v21 = p_cpusubtype[2];
      if (magic == -889275714)
      {
        appendSliceForCPUTypeSubtype(v9, *p_cpusubtype, p_cpusubtype[1]);
      }
      else
      {
        appendSliceForCPUTypeSubtype(v9, bswap32(*p_cpusubtype), bswap32(p_cpusubtype[1]));
        unsigned int v21 = bswap32(v21);
      }
      __int16 v22 = (const mach_header *)mallocMachHeader(v7, v21);
      uint64_t v23 = (mach_header *)v22;
      if (v22)
      {
        if ((v22->magic & 0xFFFFFFFE) == 0xFEEDFACE) {
          addUUID(v22, v4);
        }
        if (v16)
        {
          if ((v16->magic & 0xFFFFFFFE) == 0xFEEDFACE)
          {
            uint64_t v24 = v23;
            if (v16 == v23) {
              goto LABEL_38;
            }
          }
          else
          {
            uint64_t v24 = v16;
            int v16 = v23;
          }
          free(v24);
        }
        else
        {
          int v16 = v23;
        }
      }
LABEL_38:
      p_cpusubtype += 5;
      if (!--cputype) {
        goto LABEL_39;
      }
    }
  }
  if (v41.magic + 17958194 >= 2)
  {
    int v14 = -805638658;
    goto LABEL_42;
  }
  CFDictionaryAddValue(v4, @"LSExecutableFormat", @"LSExecutableMachOFormat");
  appendSliceForCPUTypeSubtype(v9, v41.cputype, v41.cpusubtype);
  int v16 = &v41;
  if (machHeaderSize(&v41) <= (unint64_t)v12 || (int v16 = (mach_header *)mallocMachHeader(v7, 0)) != 0)
  {
    addUUID(v16, v4);
    goto LABEL_44;
  }
LABEL_53:
}

void sub_182A6739C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void appendSliceForCPUTypeSubtype(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  if (!v5) {
    goto LABEL_16;
  }
  if ((int)a2 > 16777222)
  {
    if (((a2 - 16777223) > 0xB || ((1 << (a2 - 7)) & 0x821) == 0) && a2 != 33554444)
    {
LABEL_10:
      uint64_t v6 = _LSDefaultLog();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = 134218240;
        uint64_t v10 = (int)a2;
        __int16 v11 = 2048;
        uint64_t v12 = (int)a3;
        _os_log_impl(&dword_182959000, v6, OS_LOG_TYPE_DEFAULT, "LaunchServices: CPU type %lu (subtype %lu) not recognized", (uint8_t *)&v9, 0x16u);
      }

      goto LABEL_16;
    }
LABEL_15:
    int v7 = [[LSSliceInfo alloc] initWithType:a2 subtype:a3];
    [v5 addObject:v7];

    goto LABEL_16;
  }
  if (a2 == 7) {
    goto LABEL_15;
  }
  if (a2 != 12)
  {
    if (a2 != 18) {
      goto LABEL_10;
    }
    goto LABEL_15;
  }
  if (a3 <= 0x10 && ((1 << a3) & 0x1DE40) != 0) {
    goto LABEL_15;
  }
  id v8 = _LSDefaultLog();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 134217984;
    uint64_t v10 = (int)a3;
    _os_log_impl(&dword_182959000, v8, OS_LOG_TYPE_DEFAULT, "LaunchServices: ARM CPU subtype %lu not recognized", (uint8_t *)&v9, 0xCu);
  }

LABEL_16:
}

void sub_182A675DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t machHeaderSize(const mach_header *a1)
{
  uint64_t result = 0;
  uint32_t magic = a1->magic;
  if ((int)a1->magic <= -17958195)
  {
    if (magic != -822415874)
    {
      if (magic == -805638658)
      {
        uint64_t sizeofcmds = bswap32(a1->sizeofcmds);
        return sizeofcmds + 32;
      }
      return result;
    }
    uint64_t v5 = bswap32(a1->sizeofcmds);
    return v5 + 28;
  }
  if (magic == -17958193)
  {
    uint64_t sizeofcmds = a1->sizeofcmds;
    return sizeofcmds + 32;
  }
  if (magic == -17958194)
  {
    uint64_t v5 = a1->sizeofcmds;
    return v5 + 28;
  }
  return result;
}

void *mallocMachHeader(int a1, off_t a2)
{
  if (pread(a1, &__buf, 0x1CuLL, a2) != 28) {
    return 0;
  }
  size_t v4 = machHeaderSize(&__buf);
  if (!v4) {
    return 0;
  }
  ssize_t v5 = v4;
  uint64_t v6 = malloc_type_malloc(v4, 0x2E4897F8uLL);
  if (v6 && pread(a1, v6, v5, a2) < v5)
  {
    free(v6);
    return 0;
  }
  return v6;
}

void addUUID(const mach_header *a1, __CFDictionary *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t ncmds = a1->ncmds;
  uint64_t v5 = machHeaderSize(a1);
  if (a1->magic == -17958194)
  {
    uint64_t v6 = 28;
    if (!ncmds) {
      return;
    }
  }
  else
  {
    if (a1->magic != -17958193) {
      return;
    }
    uint64_t v6 = 32;
    if (!ncmds) {
      return;
    }
  }
  int v7 = (char *)a1 + v5;
  id v8 = (const unsigned __int8 *)a1 + v6;
  for (uint64_t i = ncmds - 1; ; --i)
  {
    if (v8 + 8 >= (const unsigned __int8 *)v7) {
      return;
    }
    uint64_t v10 = *((unsigned int *)v8 + 1);
    if (*(_DWORD *)v8 == 27) {
      break;
    }
    v8 += v10;
    if (v8 >= (const unsigned __int8 *)v7 || i == 0) {
      return;
    }
  }
  if (&v8[v10] < (const unsigned __int8 *)v7)
  {
    memset(v21, 0, sizeof(v21));
    uuid_unparse_upper(v8 + 8, v21);
    CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFStringRef v13 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v21, 0x8000100u);
    if (v13)
    {
      CFStringRef v14 = v13;
      if (CFDictionaryContainsKey(a2, @"MachOUUIDs"))
      {
        CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a2, @"MachOUUIDs");
        if (!Value || (CFArrayRef v16 = Value, v17 = CFGetTypeID(Value), v17 != CFArrayGetTypeID()))
        {
LABEL_24:
          CFRelease(v14);
          return;
        }
        CFIndex Count = CFArrayGetCount(v16);
        uint64_t MutableCopy = CFArrayCreateMutableCopy(v12, Count + 1, v16);
      }
      else
      {
        uint64_t MutableCopy = CFArrayCreateMutable(v12, 1, MEMORY[0x1E4F1D510]);
      }
      __int16 v20 = MutableCopy;
      if (MutableCopy)
      {
        CFArrayAppendValue(MutableCopy, v14);
        CFDictionarySetValue(a2, @"MachOUUIDs", v20);
        CFRelease(v20);
      }
      goto LABEL_24;
    }
  }
}

uint64_t handleWeirdHeaderTypes(unsigned __int8 *a1, unint64_t a2, __CFDictionary *a3, void *a4)
{
  id v7 = a4;
  uint64_t v8 = 0;
  if (a1 && a3)
  {
    if (a2 < 4)
    {
      if (a2 < 2) {
        goto LABEL_16;
      }
      int v9 = *a1;
    }
    else
    {
      int v9 = *a1;
      if (v9 == 74)
      {
        if (a1[1] == 111 && a1[2] == 121 && a1[3] == 33)
        {
          CFDictionaryAddValue(a3, @"LSExecutableFormat", @"LSExecutableCFMFormat");
          if (v7) {
            appendSliceForCPUTypeSubtype(v7, 18, 0);
          }
          goto LABEL_15;
        }
        goto LABEL_16;
      }
    }
    if (v9 == 35 && a1[1] == 33)
    {
      CFDictionaryAddValue(a3, @"LSExecutableFormat", @"LSExecutable#!Format");
LABEL_15:
      uint64_t v8 = 1;
      goto LABEL_17;
    }
LABEL_16:
    uint64_t v8 = 0;
  }
LABEL_17:

  return v8;
}

void sub_182A67A08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSAddExecutableFormatInfo()
{
  int v0 = (void *)MEMORY[0x1F4188790]();
  uint64_t v2 = v1;
  int v4 = v3;
  uint64_t v6 = v5;
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v7 = v0;
  id v8 = v6;
  char v19 = 0;
  id v9 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  int v10 = _LSGetBundleClassForHFSType(v4);
  if (v4 == 1095782476 || v10 != 2)
  {
    if ([v7 getFileSystemRepresentation:v20 error:0])
    {
      uint64_t v18 = 0;
      int v11 = open(v20, 0, 511);
      if (v11 < 0 || ((int v12 = [v7 getLength:&v18 error:0], v18) ? (v13 = v12) : (v13 = 0), v13 != 1))
      {
        char v19 = 1;
        CFDictionaryAddValue(v2, @"_LSNoExecutableInfo", (const void *)*MEMORY[0x1E4F1CFD0]);
        if (v11 < 0) {
          goto LABEL_23;
        }
      }
      else
      {
        fcntl(v11, 48, 1);
        _LSParseLoadCommands();
        if (v18 >= 0x2000) {
          size_t v14 = 0x2000;
        }
        else {
          size_t v14 = v18;
        }
        if (pread(v11, __buf, v14, 0) >= 28)
        {
          id v15 = v8;
          if (v2
            && (CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v2, @"DTPlatformName")) != 0
            && (CFTypeID TypeID = CFStringGetTypeID(), TypeID == CFGetTypeID(Value))
            && (CFStringCompare(Value, @"iphonesimulator", 1uLL) == kCFCompareEqualTo
             || CFStringCompare(Value, @"appletvsimulator", 1uLL) == kCFCompareEqualTo
             || CFStringCompare(Value, @"watchsimulator", 1uLL) == kCFCompareEqualTo))
          {

            CFDictionaryAddValue(v2, @"_LSRequiresIPhoneSimulator", (const void *)*MEMORY[0x1E4F1CFD0]);
          }
          else
          {
          }
        }
      }
      close(v11);
    }
  }
  else
  {
    CFDictionaryAddValue(v2, @"LSExecutableFormat", @"LSExecutableCFMFormat");
    appendSliceForCPUTypeSubtype(v9, 18, 0);
  }
LABEL_23:
  CFDictionaryAddValue(v2, @"_LSSliceInfosKey", v9);
}

void sub_182A67D00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSExtensionPointAdd(void *a1, _DWORD *a2)
{
  id v3 = a1;
  int v4 = v3;
  if (!v3 || !*((void *)v3 + 1))
  {
LABEL_12:
    uint64_t v5 = 0;
    goto LABEL_13;
  }
  *a2 = (int)CFAbsoluteTimeGetCurrent();
  uint64_t v5 = CSStoreAllocUnitWithData();
  if (!v5)
  {
    id v7 = _LSDefaultLog();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v9 = 0;
      _os_log_impl(&dword_182959000, v7, OS_LOG_TYPE_DEFAULT, "Failed to allocate store unit with extension point data", v9, 2u);
    }

    goto LABEL_12;
  }
  if (_LSBindableActivate(v4, v5))
  {
    uint64_t v6 = _LSDefaultLog();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_182959000, v6, OS_LOG_TYPE_DEFAULT, "Failed to activate binding for extension point data, this extension point will not be found", buf, 2u);
    }
  }
  _LSDatabaseCommit((uint64_t)v4);
LABEL_13:

  return v5;
}

void sub_182A67E94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSExtensionPointComparePriority_BindableComparitor(void *a1, int a2, int a3)
{
  id v5 = a1;
  uint64_t v6 = (const LSExtensionPointData *)_LSGetExtensionPointData((uint64_t)v5, a2);
  id v7 = (_LSDatabase *)_LSGetExtensionPointData((uint64_t)v5, a3);
  uint64_t v8 = _LSExtensionPointComparePriority(v7, v6, (const LSExtensionPointData *)v7);

  return v8;
}

void sub_182A67F14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSExtensionPointRemove(void *a1, int a2)
{
  id v5 = a1;
  if (v5 && a2 && v5[1])
  {
    uint64_t Unit = CSStoreGetUnit();
    if (Unit)
    {
      _LSBindableDeactivate(v5, a2);
      _CSStringRelease();
      _CSStringRelease();
      _LSPlistRemove((uint64_t)v5, *(_DWORD *)(Unit + 48));
      int v4 = *(_DWORD *)(Unit + 52);
      if (v4) {
        _LSAliasRemove(v5, v4);
      }
      CSStoreFreeUnit();
    }
    _LSDatabaseCommit((uint64_t)v5);
  }
}

void sub_182A68048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t _LSExtensionPointComparePriority(_LSDatabase *a1, const LSExtensionPointData *a2, const LSExtensionPointData *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a2 == a3) {
    return 0;
  }
  if (!a2) {
    return -1;
  }
  if (!a3) {
    return 1;
  }
  long long v3 = *(_OWORD *)&a2->var2._opaque[16];
  long long v13 = *(_OWORD *)a2->var2._opaque;
  long long v14 = v3;
  long long v4 = *(_OWORD *)&a3->var2._opaque[16];
  long long v11 = *(_OWORD *)a3->var2._opaque;
  long long v12 = v4;
  long long v5 = *(_OWORD *)&a2->var2._opaque[16];
  long long v17 = *(_OWORD *)a2->var2._opaque;
  long long v18 = v5;
  long long v15 = kLSVersionNumberNull;
  long long v16 = *(_OWORD *)algn_182AF9270;
  if (!_LSVersionNumberCompare(&v17, &v15)) {
    return -1;
  }
  long long v17 = v11;
  long long v18 = v12;
  long long v15 = kLSVersionNumberNull;
  long long v16 = *(_OWORD *)algn_182AF9270;
  if (!_LSVersionNumberCompare(&v17, &v15)) {
    return 1;
  }
  v10[0] = v13;
  v10[1] = v14;
  v9[0] = v11;
  v9[1] = v12;
  uint64_t v6 = _LSVersionNumberCompare(v10, v9);
  char v7 = v6 == 1;
  if (v6 == -1) {
    return -1;
  }
  return v7;
}

uint64_t _LSExtensionPointFindWithIdentifier(void *a1, const __CFString *a2, uint64_t a3, uint64_t a4, _DWORD *a5, void *a6)
{
  id v11 = a1;
  uint64_t StringForCFString = _LSDatabaseGetStringForCFString(v11, a2, 0);
  uint64_t v13 = _LSExtensionPointFindWithStringID(v11, StringForCFString, a3, a4, a5, a6);

  return v13;
}

void sub_182A681E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSExtensionPointUnregisterUnderFrameworkURL(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v10 = 0;
  id v11 = &v10;
  uint64_t v12 = 0x4812000000;
  uint64_t v13 = __Block_byref_object_copy__3;
  long long v14 = __Block_byref_object_dispose__4;
  long long v15 = &unk_182B5933F;
  uint64_t v18 = 0;
  std::__fs::filesystem::path __p = 0;
  long long v17 = 0;
  id v5 = v3;
  id v6 = v4;
  _CSStoreEnumerateUnits();
  char v7 = (int *)v11[6];
  uint64_t v8 = (int *)v11[7];
  while (v7 != v8)
    _LSExtensionPointRemove(v5, *v7++);

  _Block_object_dispose(&v10, 8);
  if (__p)
  {
    long long v17 = __p;
    operator delete(__p);
  }

  return 0;
}

void sub_182A68438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  _Block_object_dispose(&a16, 8);
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__3(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_182A685DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSExtensionPointGetVisualizationFunctions(id (**a1)(LaunchServices::ExtensionPoints *this, LSContext *a2, int a3)@<X8>)
{
  *a1 = LaunchServices::ExtensionPoints::getSummary;
  a1[1] = (id (*)(LaunchServices::ExtensionPoints *, LSContext *, int))LaunchServices::ExtensionPoints::display;
  a1[2] = 0;
}

id LaunchServices::ExtensionPoints::getSummary(LaunchServices::ExtensionPoints *this, LSContext *a2, int a3)
{
  id v3 = (void *)_LSGetExtensionPointData(*(void *)this, a3);
  if (v3)
  {
    id v3 = (void *)_CSStringCopyCFString();
    if (!v3) {
      id v3 = (void *)_CSStringCopyCFString();
    }
  }

  return v3;
}

BOOL LaunchServices::ExtensionPoints::display(LaunchServices::ExtensionPoints *this, LSContext *a2, int a3, CSStore2::AttributedStringWriter *a4, LaunchServices::DumpWriter *a5)
{
  char v7 = (int *)_LSGetExtensionPointData(*(void *)this, a3);
  if (v7)
  {
    CSStore2::AttributedStringWriter::string(a4, &cfstr_ExtensionPoint.isa);
    LaunchServices::DumpWriter::platform(a4, &cfstr_Platform_0.isa, v7[11]);
    int v8 = v7[15];
    id v9 = @"internal";
    if (v8 == 1) {
      id v9 = @"public";
    }
    if (v8 == 2) {
      uint64_t v10 = @"3rd party";
    }
    else {
      uint64_t v10 = v9;
    }
    id v11 = v10;
    CSStore2::AttributedStringWriter::string(a4, &cfstr_Type_0.isa, v11);

    CSStore2::AttributedStringWriter::string(a4, &cfstr_Name_0.isa);
    int v12 = v7[14];
    if (v12)
    {
      CSStore2::AttributedStringWriter::link(a4, *(unsigned int *)(*(void *)this + 20), v7[14], 0);
      uint64_t v13 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      uint64_t v13 = @"no parent provided";
    }
    CSStore2::AttributedStringWriter::string(a4, &cfstr_ParentBundleId.isa, &v13->isa);
    if (v12) {

    }
    CSStore2::AttributedStringWriter::link(a4, *(unsigned int *)(*(void *)this + 1600), v7[13], 0);
    long long v14 = (NSString *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::string(a4, &cfstr_Declaringframe.isa, v14);

    int v15 = v7[16];
    long long v16 = @"deny";
    if (v15 == 2) {
      long long v16 = @"prompt-host-personality";
    }
    if (v15 == 1) {
      long long v17 = @"prompt-container-personality";
    }
    else {
      long long v17 = v16;
    }
    uint64_t v18 = v17;
    CSStore2::AttributedStringWriter::string(a4, &cfstr_TccPolicy.isa, v18);

    CSStore2::AttributedStringWriter::timestamp(a4, &cfstr_RegDate.isa, (double)*v7);
    CSStore2::AttributedStringWriter::beginFlags(a4, &cfstr_ExtensionPoint_0.isa);
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::endFlags(a4);
    CSStore2::AttributedStringWriter::childUnit(a4, &cfstr_Sdkdict.isa);
  }
  return v7 != 0;
}

void sub_182A688D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A692A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_182A69438(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A694CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_182A69684(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A69758(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A697EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A69868(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A698E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A69944(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSCheckEntitlementForChangingDefaultHandler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = _LSCopyEntitlementValueForAuditToken(a1, @"com.apple.private.launchservices.changedefaulthandlers");
  uint64_t v6 = _LSCheckEntitlementValueForChangingDefaultHandlerCheckingDefaultApps(v5, a2, a3, 1);

  return v6;
}

void sub_182A699C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSCheckXPCConnectionEntitlementForChangingDefaultHandler(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = a1;
  xpc_connection_get_audit_token();
  uint64_t v6 = _LSCopyEntitlementValueForXPCConnection(v5, @"com.apple.private.launchservices.changedefaulthandlers");
  uint64_t v7 = _LSCheckEntitlementValueForChangingDefaultHandlerCheckingDefaultApps(v6, a2, a3, 1);

  return v7;
}

void sub_182A69A50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSXPCConnectionCanSuppressCustomSchemePrompt(void *a1, uint64_t a2)
{
  id v3 = a1;
  id v4 = v3;
  uint64_t v5 = 0;
  if (v3 && a2)
  {
    uint64_t v6 = _LSCopyEntitlementValueForXPCConnection(v3, @"com.apple.private.launchservices.suppresscustomschemeprompt");
    uint64_t v5 = _LSCheckEntitlementValueForSchemeOrTypeMatch(v6, a2, 0);
  }
  return v5;
}

void sub_182A69AE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSCheckEntitlementValueForSchemeOrTypeMatch(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = a1;
  if (v5 && a2 | a3)
  {
    uint64_t v18 = 0;
    uint64_t v19 = &v18;
    uint64_t v20 = 0x2020000000;
    char v21 = 0;
    uint64_t v14 = 0;
    int v15 = &v14;
    uint64_t v16 = 0x2020000000;
    char v17 = 0;
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    _OWORD v13[2] = ___ZL44_LSCheckEntitlementValueForSchemeOrTypeMatchPU24objcproto13OS_xpc_object8NSObjectPK10__CFStringS4__block_invoke;
    v13[3] = &unk_1E522F798;
    void v13[4] = &v18;
    void v13[5] = &v14;
    void v13[6] = a2;
    v13[7] = a3;
    uint64_t v6 = (void (**)(void, void))MEMORY[0x18530F950](v13);
    if (object_getClass(v5) == (Class)MEMORY[0x1E4F14568])
    {
      applier[0] = MEMORY[0x1E4F143A8];
      applier[1] = 3221225472;
      applier[2] = ___ZL44_LSCheckEntitlementValueForSchemeOrTypeMatchPU24objcproto13OS_xpc_object8NSObjectPK10__CFStringS4__block_invoke_2;
      applier[3] = &unk_1E522F7C0;
      uint64_t v10 = v6;
      id v11 = &v18;
      int v12 = &v14;
      xpc_array_apply(v5, applier);

      if (!a2) {
        goto LABEL_11;
      }
    }
    else
    {
      if (object_getClass(v5) == (Class)MEMORY[0x1E4F145F0]) {
        ((void (**)(void, id))v6)[2](v6, v5);
      }
      if (!a2)
      {
LABEL_11:
        if (!a3 || *((unsigned char *)v15 + 24))
        {
          uint64_t v7 = 1;
LABEL_15:

          _Block_object_dispose(&v14, 8);
          _Block_object_dispose(&v18, 8);
          goto LABEL_16;
        }
LABEL_14:
        uint64_t v7 = 0;
        goto LABEL_15;
      }
    }
    if (!*((unsigned char *)v19 + 24)) {
      goto LABEL_14;
    }
    goto LABEL_11;
  }
  uint64_t v7 = 0;
LABEL_16:

  return v7;
}

void sub_182A69CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v19 - 96), 8);

  _Unwind_Resume(a1);
}

uint64_t _LSCheckEntitlementValueForChangingDefaultHandlerCheckingDefaultApps(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  id v7 = a1;
  char v8 = _os_feature_enabled_impl();
  if (a4) {
    char v9 = v8;
  }
  else {
    char v9 = 0;
  }
  if ((v9 & 1) == 0) {
    goto LABEL_15;
  }
  if (a3)
  {
    InfoFromTypeCFStringRef Identifier = (uint64_t *)LSDefaultAppCategoryGetInfoFromTypeIdentifier(a3);
    if (InfoFromTypeIdentifier)
    {
LABEL_13:
      id v11 = v7;
      if (_LSCheckEntitlementValueForSchemeOrTypeMatch(v11, 0, InfoFromTypeIdentifier[1]))
      {
        unsigned __int8 v12 = 1;
LABEL_34:

        goto LABEL_35;
      }
      if (!InfoFromTypeIdentifier[6])
      {
        unsigned __int8 v12 = 0;
        goto LABEL_34;
      }
      uint64_t v13 = 0;
      unint64_t v14 = 0;
      unsigned __int8 v12 = 1;
      while (1)
      {
        int v15 = (void *)[[NSString alloc] initWithUTF8String:*(void *)(InfoFromTypeIdentifier[5] + v13 + 8)];
        if (!*(unsigned char *)(InfoFromTypeIdentifier[5] + v13)) {
          break;
        }
        if (*(unsigned char *)(InfoFromTypeIdentifier[5] + v13) == 1)
        {
          if (!v12) {
            goto LABEL_30;
          }
          int v16 = _LSCheckEntitlementValueForChangingDefaultHandlerCheckingDefaultApps(v11, 0, v15, 0);
LABEL_29:
          unsigned __int8 v12 = v16 != 0;
        }
LABEL_31:

        ++v14;
        v13 += 24;
        if (v14 >= InfoFromTypeIdentifier[6]) {
          goto LABEL_34;
        }
      }
      if (!v12)
      {
LABEL_30:
        unsigned __int8 v12 = 0;
        goto LABEL_31;
      }
      int v16 = _LSCheckEntitlementValueForChangingDefaultHandlerCheckingDefaultApps(v11, v15, 0, 0);
      goto LABEL_29;
    }
    InfoFromTypeCFStringRef Identifier = LSDefaultAppCategoryGetInfoForPreferenceSet(1, (void *)a3);
    if (!a2) {
      goto LABEL_12;
    }
  }
  else
  {
    InfoFromTypeCFStringRef Identifier = 0;
    if (!a2) {
      goto LABEL_12;
    }
  }
  if (!InfoFromTypeIdentifier) {
    InfoFromTypeCFStringRef Identifier = LSDefaultAppCategoryGetInfoForPreferenceSet(0, (void *)a2);
  }
LABEL_12:
  if (InfoFromTypeIdentifier) {
    goto LABEL_13;
  }
LABEL_15:
  if (a2 || !a3)
  {
    if (a2 | a3) {
      unsigned __int8 v12 = _LSCheckEntitlementValueForSchemeOrTypeMatch(v7, a2, a3);
    }
    else {
      unsigned __int8 v12 = 0;
    }
  }
  else
  {
    unsigned __int8 v12 = 1;
  }
LABEL_35:

  return v12;
}

void sub_182A69EE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL44_LSCheckEntitlementValueForSchemeOrTypeMatchPU24objcproto13OS_xpc_object8NSObjectPK10__CFStringS4__block_invoke(void *a1, void *a2)
{
  id v8 = a2;
  string_ptr = xpc_string_get_string_ptr(v8);
  CFStringRef v4 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], string_ptr, 0x8000100u);
  CFStringRef v5 = v4;
  if (v4)
  {
    if (CFEqual(v4, @"*"))
    {
      *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 1;
    }
    else
    {
      CFStringRef v6 = (const __CFString *)a1[6];
      if (v6 && CFStringCompare(v6, v5, 1uLL) == kCFCompareEqualTo) {
        *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 1;
      }
      CFStringRef v7 = (const __CFString *)a1[7];
      if (!v7 || !UTTypeEqual(v7, v5)) {
        goto LABEL_5;
      }
    }
    *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = 1;
LABEL_5:
    CFRelease(v5);
  }
}

void sub_182A6A000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  CFRelease(v10);

  _Unwind_Resume(a1);
}

BOOL ___ZL44_LSCheckEntitlementValueForSchemeOrTypeMatchPU24objcproto13OS_xpc_object8NSObjectPK10__CFStringS4__block_invoke_2(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (object_getClass(v4) == (Class)MEMORY[0x1E4F145F0]) {
    (*(void (**)(void))(a1[4] + 16))();
  }
  if (*(unsigned char *)(*(void *)(a1[5] + 8) + 24)) {
    BOOL v5 = *(unsigned char *)(*(void *)(a1[6] + 8) + 24) == 0;
  }
  else {
    BOOL v5 = 1;
  }

  return v5;
}

void sub_182A6A0A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A6A118(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A6A548(_Unwind_Exception *a1)
{
  id v4 = v1;

  _Unwind_Resume(a1);
}

void sub_182A6A7DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_182A6A8B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A6A9AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A6AAE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL12getEPFromLSDP8NSStringjPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
}

void ___ZL12getEPFromLSDP8NSStringjPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2);
  BOOL v5 = (id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);

  objc_storeStrong(v5, a3);
}

uint64_t LSInit(int a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (a1 == 1) {
    return 4294967292;
  }
  __int16 v2 = a1;
  if ((a1 & 0x400) == 0 || (uint64_t result = _LSValidateDatabase(0), !result))
  {
    if ((v2 & 0x20) != 0)
    {
      gLogRegistrationErrors = 1;
      if ((v2 & 0x40) == 0)
      {
LABEL_7:
        if ((v2 & 0x10) == 0) {
          goto LABEL_8;
        }
        goto LABEL_12;
      }
    }
    else if ((v2 & 0x40) == 0)
    {
      goto LABEL_7;
    }
    [(id)__LSDefaultsGetSharedInstance() setHasServer:0];
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 0x100) == 0) {
        goto LABEL_16;
      }
      goto LABEL_13;
    }
LABEL_12:
    _LSResetServer();
    if ((v2 & 0x100) == 0)
    {
LABEL_16:
      if ((v2 & 0x80) != 0)
      {
        id v4 = _LSDefaultLog();
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v5 = _CFGetEUID();
          int v6 = 134217984;
          uint64_t v7 = v5;
          _os_log_impl(&dword_182959000, v4, OS_LOG_TYPE_DEFAULT, "LaunchServices: Completed database seeding for uid %lli", (uint8_t *)&v6, 0xCu);
        }

        _LSSetDatabaseIsSeeded(1);
      }
      return 0;
    }
LABEL_13:
    id v3 = _LSDefaultLog();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 134217984;
      uint64_t v7 = _CFGetEUID();
      _os_log_impl(&dword_182959000, v3, OS_LOG_TYPE_DEFAULT, "LaunchServices: Begin database seeding for uid %lli", (uint8_t *)&v6, 0xCu);
    }

    _LSSetDatabaseIsSeeded(0);
    goto LABEL_16;
  }
  return result;
}

void sub_182A6AD60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

OSStatus LSRegisterURL(CFURLRef inURL, Boolean inUpdate)
{
  int v2 = inUpdate;
  id v4 = (void *)MEMORY[0x18530F680]();
  id v9 = 0;
  LOBYTE(inURL) = _LSRegisterBundleURL(0, inURL, (v2 != 0) | 0x8000000, 0, &v9);
  id v5 = v9;
  int v6 = v5;
  if (inURL) {
    OSStatus v7 = 0;
  }
  else {
    OSStatus v7 = _LSGetOSStatusFromNSError(v5);
  }

  return v7;
}

void sub_182A6AE20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSGetStatus()
{
  uint64_t v5 = 0;
  int v6 = &v5;
  uint64_t v7 = 0x2020000000;
  int v8 = 0;
  int v0 = (void *)MEMORY[0x18530F680]();
  id v1 = +[_LSDService synchronousXPCProxyWithErrorHandler:]((uint64_t)_LSDReadService, 0);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  _DWORD v4[2] = ___LSGetStatus_block_invoke;
  void v4[3] = &unk_1E522F838;
  void v4[4] = &v5;
  [v1 getServerStatusWithCompletionHandler:v4];

  uint64_t v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_182A6AF08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _LSValidateDatabase(const char *a1)
{
  uint64_t v7 = 0;
  if (a1)
  {
    id v6 = 0;
    BOOL v1 = _LSContextInitWithPath(&v7, (uint64_t)a1, &v6);
    id v2 = v6;
    id v3 = v2;
    if (v1) {
      uint64_t v4 = 0;
    }
    else {
      uint64_t v4 = _LSGetOSStatusFromNSError(v2);
    }
  }
  else
  {
    uint64_t v4 = _LSContextInit(&v7);
  }
  if (!v4)
  {
    if (_CSStoreValidate()) {
      uint64_t v4 = 0;
    }
    else {
      uint64_t v4 = 4294957805;
    }
    _LSContextDestroy(&v7);
  }

  return v4;
}

void sub_182A6B004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

__CFSet *_LSCreatePackageExtensionsArray(const __CFAllocator *a1)
{
  v4.db = 0;
  if (_LSContextInit((id *)&v4.db))
  {
    id v2 = 0;
  }
  else
  {
    id v2 = _LSCreatePackageExtensionsArrayForContext(a1, &v4);
    _LSContextDestroy((void **)&v4.db);
  }

  return v2;
}

void sub_182A6B088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

__CFSet *_LSCreatePackageExtensionsArrayForContext(const __CFAllocator *a1, LSContext *a2)
{
  uint64_t result = _LSCopyPackageExtensions(a2);
  if (result)
  {
    LSContext v4 = result;
    CFArrayRef v5 = XCFArrayCreateWithSet(a1, result, MEMORY[0x1E4F1D510]);
    CFRelease(v4);
    return v5;
  }
  return result;
}

uint64_t _LSUnregisterPluginsInDirectory(const __CFURL *a1)
{
  id v9 = 0;
  uint64_t v2 = _LSContextInit(&v9);
  if (!v2)
  {
    if (a1 && (v3 = (const __CFArray *)_LSCopyPluginsWithURL((uint64_t)&v9, a1), (CFArrayRef v4 = v3) != 0))
    {
      CFIndex Count = CFArrayGetCount(v3);
      if (Count < 1)
      {
        uint64_t v2 = 0;
      }
      else
      {
        CFIndex v6 = 0;
        uint64_t v2 = 0;
        do
        {
          CFStringRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(v4, v6);
          if (ValueAtIndex) {
            uint64_t v2 = _LSUnregisterPlugin((_LSDatabase **)&v9, [ValueAtIndex unsignedLongLongValue]);
          }
          ++v6;
        }
        while (Count != v6);
      }
      CFRelease(v4);
    }
    else
    {
      uint64_t v2 = 0;
    }
    _LSContextDestroy(&v9);
  }

  return v2;
}

void sub_182A6B1C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t _LSRemoveDefaultRoleHandlerForContentType(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = 0;
  id v11 = &v10;
  uint64_t v12 = 0x2020000000;
  int v13 = 0;
  CFArrayRef v4 = (void *)MEMORY[0x18530F680]();
  v9[0] = (void (*)(void, void))MEMORY[0x1E4F143A8];
  v9[1] = (void (*)(void, void))3221225472;
  _OWORD v9[2] = (void (*)(void, void))___LSRemoveDefaultRoleHandlerForContentType_block_invoke;
  v9[3] = (void (*)(void, void))&unk_1E522BA78;
  void v9[4] = (void (*)(void, void))&v10;
  CFArrayRef v5 = +[_LSDService synchronousXPCProxyWithErrorHandler:]((uint64_t)_LSDModifyService, v9);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  void v8[2] = ___LSRemoveDefaultRoleHandlerForContentType_block_invoke_2;
  void v8[3] = &unk_1E522F860;
  void v8[4] = &v10;
  [v5 removeHandlerForContentType:a1 roles:a2 completionHandler:v8];

  uint64_t v6 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v6;
}

void sub_182A6B320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_182A6B39C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A6B42C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t _LSSetDefaultWebBrowserWithBundleIdentifierAndVersion(uint64_t a1, __CFString *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = _LSGetAuditTokenForSelf();
  int v5 = _LSCheckEntitlementForChangingDefaultHandler(v4, @"http", 0);
  int v6 = v5;
  if (a1)
  {
    long long v10 = 0u;
    long long v11 = 0u;
    if (a2)
    {
      _LSGetVersionFromString(a2, &v10);
      if (!v6) {
        return 4294967242;
      }
      goto LABEL_11;
    }
    long long v10 = kLSVersionNumberNull;
    long long v11 = *(_OWORD *)algn_182AF9270;
    if (v5)
    {
LABEL_11:
      v9[0] = v10;
      v9[1] = v11;
      uint64_t result = _LSSetSchemeHandler(@"http", a1, v9);
      if (!result)
      {
        v8[0] = v10;
        v8[1] = v11;
        return _LSSetSchemeHandler(@"https", a1, v8);
      }
      return result;
    }
    return 4294967242;
  }
  if (!v5) {
    return 4294967242;
  }
  uint64_t result = _LSRemoveSchemeHandler(@"http");
  if (!result)
  {
    return _LSRemoveSchemeHandler(@"https");
  }
  return result;
}

uint64_t _LSAdvertisementBytesKind(uint64_t result)
{
  if (result)
  {
    CFDataRef v1 = (const __CFData *)result;
    if (CFDataGetLength((CFDataRef)result) < 7)
    {
      return 0;
    }
    else
    {
      unsigned int v2 = *CFDataGetBytePtr(v1);
      uint64_t result = 1;
      switch(v2 >> 6)
      {
        case 1u:
          uint64_t result = 2;
          break;
        case 2u:
          return result;
        case 3u:
          uint64_t result = 4;
          break;
        default:
          if (CFDataGetLength(v1) < 7) {
            return 0;
          }
          BytePtr = CFDataGetBytePtr(v1);
          if (BytePtr[1] || BytePtr[2] || BytePtr[3] || BytePtr[4] || BytePtr[5])
          {
            uint64_t v4 = 0;
          }
          else
          {
            uint64_t v4 = 3;
            if (!BytePtr[6]) {
              uint64_t v4 = 0;
            }
          }
          if (BytePtr[5] >= 0x40u) {
            uint64_t result = 5;
          }
          else {
            uint64_t result = v4;
          }
          break;
      }
    }
  }
  return result;
}

uint64_t _LSDebugAdvertismentValue(const __CFData *a1)
{
  return CFDataGetBytePtr(a1)[6];
}

CFStringRef _LSCreateDatabaseLookupStringFromHashedBytesForAdvertising(const __CFData *a1)
{
  if (!a1 || CFDataGetLength(a1) < 7) {
    return 0;
  }
  switch(_LSAdvertisementBytesKind((uint64_t)a1))
  {
    case 1:
      unsigned int v2 = "ua-";
      goto LABEL_14;
    case 2:
      unsigned int v2 = "dns-";
      goto LABEL_14;
    case 3:
      int v3 = CFDataGetBytePtr(a1)[6];
      uint64_t v4 = @"com.apple.NowPlaying";
      if (v3 != 1) {
        uint64_t v4 = 0;
      }
      if (v3 == 2) {
        CFStringRef v5 = @"com.apple.Siri";
      }
      else {
        CFStringRef v5 = v4;
      }
      if (!v5) {
        return 0;
      }
      CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      goto LABEL_22;
    case 4:
      unsigned int v2 = "pv-";
LABEL_14:
      return createDatabaseStringFromHashedBytes(v2, a1);
    case 5:
      int v8 = CFDataGetBytePtr(a1)[5] & 0xC0;
      if (v8 == 64)
      {
        CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFStringRef v5 = @"com.apple.private.handoff.pong";
      }
      else
      {
        if (v8 != 128) {
          return 0;
        }
        CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFStringRef v5 = @"com.apple.private.handoff.ping";
      }
LABEL_22:
      CFStringRef result = CFStringCreateCopy(v6, v5);
      break;
    default:
      return 0;
  }
  return result;
}

CFStringRef createDatabaseStringFromHashedBytes(char *a1, CFDataRef theData)
{
  if ((unint64_t)CFDataGetLength(theData) < 7) {
    return 0;
  }
  BytePtr = CFDataGetBytePtr(theData);
  if (a1) {
    CFStringRef v5 = a1;
  }
  else {
    CFStringRef v5 = "";
  }
  std::string::basic_string[abi:nn180100]<0>(&v11, v5);
  for (uint64_t i = 0; i != 7; ++i)
  {
    std::string::push_back(&v11, a0123456789abcd[(unint64_t)BytePtr[i] >> 4]);
    std::string::push_back(&v11, a0123456789abcd[BytePtr[i] & 0xF]);
  }
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v7 = &v11;
  }
  else {
    uint64_t v7 = (std::string *)v11.__r_.__value_.__r.__words[0];
  }
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    CFIndex size = HIBYTE(v11.__r_.__value_.__r.__words[2]);
  }
  else {
    CFIndex size = v11.__r_.__value_.__l.__size_;
  }
  CFStringRef v9 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UInt8 *)v7, size, 0x8000100u, 0);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return v9;
}

void sub_182A6B908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

CFDataRef _LSCreateHashedBytesForAdvertisingFromString(uint64_t a1, CFStringRef theString)
{
  CFStringRef Copy = theString;
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (a1 == 2 && theString)
  {
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableStringRef MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, theString);
    Systeuint64_t m = CFLocaleGetSystem();
    CFStringLowercase(MutableCopy, System);
    CFStringRef Copy = CFStringCreateCopy(v4, MutableCopy);
    CFRelease(MutableCopy);
    if (!Copy) {
      return 0;
    }
  }
  else
  {
    if (!theString) {
      return 0;
    }
    CFRetain(theString);
  }
  if (CFStringGetCString(Copy, buffer, 1024, 0x8000100u) && (size_t v7 = strlen(buffer), v7 - 1 <= 0x7FFFFFFD))
  {
    memset(v18, 0, sizeof(v18));
    CC_SHA512(buffer, v7, (unsigned __int8 *)v18);
    for (uint64_t i = 7; i != 64; ++i)
    {
      CFStringRef v9 = (unsigned char *)((unint64_t)v18 | (i
                                                             - 7
                                                             * ((((i
                                                                                  - ((unsigned __int16)(37 * i) >> 8)) >> 1)
                                                               + ((37 * i) >> 8)) >> 2)));
      *v9 ^= *((unsigned char *)v18 + i);
    }
    switch(a1)
    {
      case 0:
        *(_DWORD *)((char *)v18 + 3) = 0;
        LODWORD(v18[0]) = 0;
        goto LABEL_32;
      case 1:
        char v11 = v18[0];
        char v12 = 0x80;
        goto LABEL_17;
      case 2:
        char v11 = v18[0];
        char v12 = 64;
LABEL_17:
        LOBYTE(v18[0]) = v12 & 0xC0 | v11 & 0x3F;
        goto LABEL_32;
      case 3:
        *(_DWORD *)((char *)v18 + 3) = 0;
        LODWORD(v18[0]) = 0;
        if (CFEqual(Copy, @"com.apple.Siri"))
        {
          char v13 = 2;
        }
        else if (CFEqual(Copy, @"com.apple.NowPlaying"))
        {
          char v13 = 1;
        }
        else if (CFEqual(Copy, @"com.apple.fetchsamplepayload"))
        {
          char v13 = -1;
        }
        else
        {
          char v13 = 0;
        }
        BYTE6(v18[0]) = v13;
        goto LABEL_32;
      case 4:
        LOBYTE(v18[0]) |= 0xC0u;
        goto LABEL_32;
      case 5:
        *(_DWORD *)((char *)v18 + 3) = 0;
        LODWORD(v18[0]) = 0;
        int v14 = rand();
        BYTE6(v18[0]) = v14 + v14 / 255;
        if (CFEqual(Copy, @"com.apple.private.handoff.ping"))
        {
          char v15 = BYTE5(v18[0]);
          char v16 = 0x80;
        }
        else
        {
          if (!CFEqual(Copy, @"com.apple.private.handoff.pong")) {
            goto LABEL_32;
          }
          char v15 = BYTE5(v18[0]);
          char v16 = 64;
        }
        BYTE5(v18[0]) = v16 & 0xC0 | v15 & 0x3F;
LABEL_32:
        CFDataRef v10 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UInt8 *)v18, 7);
        break;
      default:
        goto LABEL_32;
    }
  }
  else
  {
    CFDataRef v10 = 0;
  }
  CFRelease(Copy);
  return v10;
}

uint64_t _LSCompareHashedBytesFromAdvertisingStrings(CFDataRef theData, const __CFData *a2)
{
  uint64_t result = -1;
  if (theData && a2)
  {
    if (CFDataGetLength(theData) < 7 || CFDataGetLength(a2) < 7)
    {
      return -1;
    }
    else
    {
      BytePtr = (unsigned int *)CFDataGetBytePtr(theData);
      CFAllocatorRef v6 = (unsigned int *)CFDataGetBytePtr(a2);
      unsigned int v7 = bswap32(*BytePtr);
      unsigned int v8 = bswap32(*v6);
      if (v7 == v8
        && (unsigned int v7 = bswap32(*(unsigned int *)((char *)BytePtr + 3)),
            unsigned int v8 = bswap32(*(unsigned int *)((char *)v6 + 3)),
            v7 == v8))
      {
        return 0;
      }
      else if (v7 < v8)
      {
        return -1;
      }
      else
      {
        return 1;
      }
    }
  }
  return result;
}

CFStringRef _LSCopyAdvertisementStringForTeamIdentifierAndActivityType(const __CFAllocator *a1, __CFString *a2, CFStringRef theString)
{
  if (!theString) {
    return 0;
  }
  v9.CFIndex length = CFStringGetLength(theString);
  v9.id location = 0;
  if (!CFStringFindWithOptions(theString, @".", v9, 0, 0)
    && (CFStringHasPrefix(theString, @"NS")
     || CFStringHasPrefix(theString, @"IN")
     || CFEqual(theString, @"TVUserActivityTypeBrowsingChannelGuide")))
  {
    return (CFStringRef)CFRetain(theString);
  }
  else
  {
    CFAllocatorRef v6 = &stru_1ECB1A570;
    if (a2)
    {
      if (!CFEqual(a2, @"0000000000")) {
        CFAllocatorRef v6 = a2;
      }
    }
    return CFStringCreateWithFormat(a1, 0, @"%@:%@", v6, theString);
  }
}

uint64_t _LSCopyClaimedActivityIdentifiersAndDomains(void *a1, void *a2)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t v46 = 0;
  long long v47 = &v46;
  uint64_t v48 = 0x2020000000;
  int v49 = -10810;
  uint64_t v42 = 0;
  long long v43 = &v42;
  uint64_t v44 = 0x2020000000;
  uint64_t v45 = 0;
  uint64_t v38 = 0;
  long long v39 = &v38;
  uint64_t v40 = 0x2020000000;
  uint64_t v41 = 0;
  if (_LSCurrentProcessMayMapDatabase())
  {
    id v37 = 0;
    uint64_t v34 = 0;
    id v35 = 0;
    char v36 = 0;
    +[_LSDServiceDomain defaultServiceDomain]();
    CFAllocatorRef v4 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
    CFStringRef v5 = (void *)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v34, v4, 0);

    if (v5)
    {
      CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFMutableSetRef Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D548]);
      v43[3] = (uint64_t)Mutable;
      CFMutableSetRef v8 = CFSetCreateMutable(v6, 0, MEMORY[0x1E4F1D548]);
      v39[3] = (uint64_t)v8;
      if (v43[3] && v8)
      {
        v33[0] = MEMORY[0x1E4F143A8];
        v33[1] = 3221225472;
        v33[2] = ___LSCopyClaimedActivityIdentifiersAndDomains_block_invoke;
        v33[3] = &unk_1E522F888;
        v33[4] = &v42;
        void v33[5] = &v38;
        v33[6] = v5;
        _LSEnumerateViableBundlesOfClass(v5, 2, v33);
        CFRange v9 = CFArrayCreateMutable(v6, 0, MEMORY[0x1E4F1D510]);
        if (v9)
        {
          for (uint64_t i = 0; i != 4; ++i)
          {
            CFStringRef v11 = _LSCopyAdvertisementStringForTeamIdentifierAndActivityType(v6, 0, off_1E522F8F8[i]);
            if (v11)
            {
              CFArrayAppendValue(v9, v11);
              CFRelease(v11);
            }
          }
          CFArrayRef Copy = CFArrayCreateCopy(v6, v9);
          CFRelease(v9);
        }
        else
        {
          CFArrayRef Copy = 0;
        }
        long long v31 = 0u;
        long long v32 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        CFArrayRef v15 = Copy;
        uint64_t v16 = [(__CFArray *)v15 countByEnumeratingWithState:&v29 objects:v50 count:16];
        if (v16)
        {
          uint64_t v17 = *(void *)v30;
          do
          {
            for (uint64_t j = 0; j != v16; ++j)
            {
              if (*(void *)v30 != v17) {
                objc_enumerationMutation(v15);
              }
              CFSetAddValue((CFMutableSetRef)v43[3], *(const void **)(*((void *)&v29 + 1) + 8 * j));
            }
            uint64_t v16 = [(__CFArray *)v15 countByEnumeratingWithState:&v29 objects:v50 count:16];
          }
          while (v16);
        }
      }
      else
      {
        *((_DWORD *)v47 + 6) = -41;
      }
    }
    if (v34 && v36) {
      _LSContextDestroy(v34);
    }
    id v19 = v35;
    uint64_t v34 = 0;
    id v35 = 0;

    char v36 = 0;
    id v20 = v37;
    id v37 = 0;
  }
  else
  {
    char v13 = (void *)MEMORY[0x18530F680]();
    v28[0] = (void (*)(void, void))MEMORY[0x1E4F143A8];
    v28[1] = (void (*)(void, void))3221225472;
    v28[2] = (void (*)(void, void))___LSCopyClaimedActivityIdentifiersAndDomains_block_invoke_2;
    void v28[3] = (void (*)(void, void))&unk_1E522BA78;
    v28[4] = (void (*)(void, void))&v46;
    int v14 = +[_LSDService synchronousXPCProxyWithErrorHandler:]((uint64_t)_LSDReadService, v28);
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 3221225472;
    _OWORD v27[2] = ___LSCopyClaimedActivityIdentifiersAndDomains_block_invoke_3;
    void v27[3] = &unk_1E522F8B0;
    v27[4] = &v42;
    v27[5] = &v38;
    v27[6] = &v46;
    [v14 getAllUserActivityTypesAndDomainNamesWithCompletionHandler:v27];
  }
  if (!*((_DWORD *)v47 + 6))
  {
    if (a1)
    {
      CFTypeRef v21 = (CFTypeRef)v43[3];
      if (v21) {
        CFTypeRef v21 = CFRetain(v21);
      }
      *a1 = v21;
    }
    if (a2)
    {
      CFTypeRef v22 = (CFTypeRef)v39[3];
      if (v22) {
        CFTypeRef v22 = CFRetain(v22);
      }
      *a2 = v22;
    }
  }
  uint64_t v23 = (const void *)v43[3];
  if (v23) {
    CFRelease(v23);
  }
  uint64_t v24 = (const void *)v39[3];
  if (v24) {
    CFRelease(v24);
  }
  uint64_t v25 = *((unsigned int *)v47 + 6);
  _Block_object_dispose(&v38, 8);
  _Block_object_dispose(&v42, 8);
  _Block_object_dispose(&v46, 8);
  return v25;
}

void sub_182A6C268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a37);
  _Block_object_dispose(&a42, 8);
  _Block_object_dispose(&a46, 8);
  _Block_object_dispose((const void *)(v47 - 248), 8);
  _Unwind_Resume(a1);
}

void sub_182A6C4C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A6C560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A6C63C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t _LSCopyUserActivityDomainNamesForBundleID(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (!a1 || !_LSIsSWCAvailable()) {
    return 0;
  }
  id v2 = objc_alloc((Class)_LSSWCServiceSpecifierClass());
  int v3 = _LSSWCServiceTypeActivityContinuation();
  CFAllocatorRef v4 = (void *)[v2 initWithServiceType:v3 applicationIdentifier:a1 domain:0];

  id v24 = 0;
  CFStringRef v5 = [(id)_LSSWCServiceDetailsClass() serviceDetailsWithServiceSpecifier:v4 error:&v24];
  id v6 = v24;
  id v19 = v6;
  if (v5)
  {
    unsigned int v7 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    id v8 = v5;
    uint64_t v9 = [v8 countByEnumeratingWithState:&v20 objects:v25 count:16];
    if (v9)
    {
      uint64_t v10 = *(void *)v21;
      do
      {
        for (uint64_t i = 0; i != v9; ++i)
        {
          if (*(void *)v21 != v10) {
            objc_enumerationMutation(v8);
          }
          char v12 = *(void **)(*((void *)&v20 + 1) + 8 * i);
          if ([v12 isApproved])
          {
            char v13 = [v12 serviceSpecifier];
            int v14 = [v13 domain];
            CFArrayRef v15 = [v14 lowercaseString];

            if ([v15 length]) {
              [v7 addObject:v15];
            }
          }
        }
        uint64_t v9 = [v8 countByEnumeratingWithState:&v20 objects:v25 count:16];
      }
      while (v9);
    }

    uint64_t v16 = [v7 copy];
  }
  else
  {
    uint64_t v17 = (uint64_t)v6;
    unsigned int v7 = _LSDefaultLog();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      _LSCopyUserActivityDomainNamesForBundleID_cold_1(v17, v7);
    }
    uint64_t v16 = 0;
  }

  return v16;
}

void sub_182A6C880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

CFArrayRef _LSCopyActivityTypesClaimedHashedAdvertisingStrings(uint64_t a1, __CFString *a2, const __CFDictionary *a3, const __CFDictionary *a4)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableSetRef Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D548]);
  if (a1)
  {
    uint64_t v10 = &stru_1ECB1A570;
    if (a2) {
      uint64_t v10 = a2;
    }
    CFStringRef v11 = CFStringCreateWithFormat(v8, 0, @"%@#%@:%@", @"NOTIFICATION", v10, a1);
    appendStringAndHashedBytesOfType(Mutable, 4, v11);
    CFRelease(v11);
  }
  if (a3)
  {
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a3, @"NSUserActivityTypes");
    if (Value)
    {
      CFArrayRef v13 = Value;
      CFTypeID TypeID = CFArrayGetTypeID();
      if (TypeID == CFGetTypeID(v13) && CFArrayGetCount(v13) >= 1)
      {
        CFIndex v15 = 0;
        do
        {
          CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v13, v15);
          if (ValueAtIndex)
          {
            CFStringRef v17 = ValueAtIndex;
            CFTypeID v18 = CFStringGetTypeID();
            if (v18 == CFGetTypeID(v17))
            {
              CFStringRef v19 = _LSCopyAdvertisementStringForTeamIdentifierAndActivityType(v8, a2, v17);
              if (v19)
              {
                CFStringRef v20 = v19;
                appendStringAndHashedBytesOfType(Mutable, 1, v19);
                CFRelease(v20);
              }
            }
          }
          ++v15;
        }
        while (v15 < CFArrayGetCount(v13));
      }
    }
    CFArrayRef v21 = (const __CFArray *)CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E4F1CC50]);
    if (v21)
    {
      CFArrayRef v22 = v21;
      CFTypeID v23 = CFArrayGetTypeID();
      if (v23 == CFGetTypeID(v22))
      {
        CFIndex Count = CFArrayGetCount(v22);
        if (Count >= 1)
        {
          CFIndex v25 = Count;
          for (CFIndex i = 0; i != v25; ++i)
          {
            CFDictionaryRef v27 = (const __CFDictionary *)CFArrayGetValueAtIndex(v22, i);
            if (v27)
            {
              CFDictionaryRef v28 = v27;
              CFTypeID v29 = CFDictionaryGetTypeID();
              if (v29 == CFGetTypeID(v28))
              {
                CFStringRef v30 = (const __CFString *)CFDictionaryGetValue(v28, @"NSUbiquitousDocumentUserActivityType");
                if (v30)
                {
                  CFStringRef v31 = v30;
                  CFTypeID v32 = CFStringGetTypeID();
                  if (v32 == CFGetTypeID(v31))
                  {
                    CFStringRef v33 = _LSCopyAdvertisementStringForTeamIdentifierAndActivityType(v8, a2, v31);
                    if (v33)
                    {
                      CFStringRef v34 = v33;
                      appendStringAndHashedBytesOfType(Mutable, 1, v33);
                      CFRelease(v34);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (a4 && _LSIsSWCAvailable())
  {
    id v35 = (void *)MEMORY[0x18530F680]();
    char v36 = CFDictionaryGetValue(a4, @"com.apple.developer.associated-domains");
    if (v36)
    {
      id v37 = (void *)_LSSWCServiceSpecifierClass();
      uint64_t v38 = _LSSWCServiceTypeActivityContinuation();
      long long v39 = [v37 serviceSpecifiersWithEntitlementValue:v36 serviceType:v38 error:0];

      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      id v40 = v39;
      uint64_t v41 = [v40 countByEnumeratingWithState:&v51 objects:v55 count:16];
      if (v41)
      {
        uint64_t v42 = *(void *)v52;
        do
        {
          uint64_t v43 = 0;
          do
          {
            if (*(void *)v52 != v42) {
              objc_enumerationMutation(v40);
            }
            uint64_t v44 = [*(id *)(*((void *)&v51 + 1) + 8 * v43) domain];
            uint64_t v45 = [v44 lowercaseString];

            appendStringAndHashedBytesOfType(Mutable, 2, v45);
            ++v43;
          }
          while (v41 != v43);
          uint64_t v41 = [v40 countByEnumeratingWithState:&v51 objects:v55 count:16];
        }
        while (v41);
      }
    }
  }
  if (!Mutable) {
    return 0;
  }
  if (CFSetGetCount(Mutable) < 1)
  {
    CFArrayRef v48 = 0;
  }
  else
  {
    if (CFSetGetCount(Mutable))
    {
      CFIndex v46 = CFSetGetCount(Mutable);
      uint64_t v47 = (const void **)malloc_type_malloc(8 * v46, 0xC0040B8AA526DuLL);
    }
    else
    {
      uint64_t v47 = (const void **)v56;
    }
    memset(v56, 0, 512);
    CFSetGetValues(Mutable, v47);
    CFIndex v49 = CFSetGetCount(Mutable);
    CFArrayRef v48 = CFArrayCreate(v8, v47, v49, MEMORY[0x1E4F1D510]);
    if (v47 != (const void **)v56) {
      free(v47);
    }
  }
  CFRelease(Mutable);
  return v48;
}

void sub_182A6CDB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void appendStringAndHashedBytesOfType(__CFSet *a1, uint64_t a2, CFStringRef theString)
{
  CFDataRef v5 = _LSCreateHashedBytesForAdvertisingFromString(a2, theString);
  if (v5)
  {
    CFDataRef v6 = v5;
    CFStringRef v7 = _LSCreateDatabaseLookupStringFromHashedBytesForAdvertising(v5);
    if (v7)
    {
      CFStringRef v8 = v7;
      CFSetAddValue(a1, theString);
      CFSetAddValue(a1, v8);
      CFRelease(v8);
    }
    CFRelease(v6);
  }
}

uint64_t _LSDatabaseCopyURLForUser(uint64_t a1)
{
  id v2 = (void *)MEMORY[0x18530F680]();
  uint64_t v3 = [(id)__LSDefaultsGetSharedInstance() databaseStoreFileURLWithUID:a1];
  return v3;
}

BOOL _LSDisplayData(FILE *a1, const char *a2, unsigned int *a3, void *a4, CFArrayRef theArray, void *a6, uint64_t a7, void *a8)
{
  char v12 = a4;
  if (a4) {
    char v12 = (void *)[objc_alloc(MEMORY[0x1E4F1CAD0]) initWithArray:a4];
  }
  if (theArray) {
    CFArrayRef theArray = XCFSetCreateWithArray((const __CFAllocator *)*MEMORY[0x1E4F1CF80], theArray, (const CFSetCallBacks *)&kXCFCaseInsensitiveStringSetCallBacks);
  }
  id v16 = a6;
  if (!a2)
  {
    v36[0] = 0;
    if (a3)
    {
      uint64_t v24 = -[_LSDServiceDomain initWithUID:]([_LSDServiceDomain alloc], *a3);
    }
    else
    {
      uint64_t v24 = +[_LSDServiceDomain defaultServiceDomain]();
    }
    uint64_t v26 = (void *)v24;
    id v40 = 0;
    int v27 = _LSContextInitWithOptions(v36, v24, 0, &v40);
    id v23 = v40;

    if (!v27) {
      goto LABEL_13;
    }
    goto LABEL_16;
  }
  CFStringRef v17 = [NSString stringWithUTF8String:a2];
  CFTypeID v18 = [v17 lowercaseString];
  int v19 = [v18 hasSuffix:@".csstoredump"];

  if (!v19)
  {
    v36[0] = 0;
    id v41 = 0;
    BOOL v25 = _LSContextInitWithPath(v36, (uint64_t)a2, &v41);
    id v23 = v41;
    if (!v25)
    {
LABEL_13:
      BOOL v22 = 0;
      goto LABEL_20;
    }
LABEL_16:
    if (a7)
    {
      id v39 = v23;
      CFDictionaryRef v28 = &v39;
      uint64_t v29 = _LSDisplayMachineReadableData((uint64_t *)v36, (uint64_t)a1, v12, v16, a7, (uint64_t)&v39);
    }
    else
    {
      id v38 = v23;
      CFDictionaryRef v28 = &v38;
      uint64_t v29 = _LSDisplayHumanReadableData((uint64_t *)v36, a1, v12, theArray, v16, a7, &v38);
    }
    BOOL v22 = v29;
    id v30 = *v28;

    id v23 = v30;
    _LSContextDestroy(v36);
LABEL_20:

    if ((a7 & 4) == 0) {
      goto LABEL_25;
    }
    goto LABEL_21;
  }
  CFStringRef v20 = fopen(a2, "rb");
  CFArrayRef v21 = v20;
  if (v20)
  {
    v42[0] = 0;
    BOOL v22 = _LSDisplayHumanReadableCopyOfMachineReadableData((uint64_t)v20, (uint64_t)a1, (uint64_t)v12, (uint64_t)theArray, (uint64_t)v16, a7, v42);
    id v23 = v42[0];
    fclose(v21);
    if ((a7 & 4) == 0) {
      goto LABEL_25;
    }
  }
  else
  {
    CFStringRef v34 = __error();
    _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28798], *v34, (uint64_t)"_LSDisplayData", 2567, 0);
    id v23 = (id)objc_claimAutoreleasedReturnValue();
    BOOL v22 = 0;
    if ((a7 & 4) == 0) {
      goto LABEL_25;
    }
  }
LABEL_21:
  if (!v22)
  {
    CFStringRef v31 = (NSMutableAttributedString *)objc_alloc_init(MEMORY[0x1E4F28E48]);
    if (v31)
    {
      v36[0] = 0;
      v36[1] = v36;
      v36[2] = (void *)0x13812000000;
      v36[3] = __Block_byref_object_copy__29;
      v36[4] = __Block_byref_object_dispose__29;
      v36[5] = (void *)256;
      LaunchServices::DumpWriter::DumpWriter((LaunchServices::DumpWriter *)v37, v31);
      id v35 = v23;
      CSStore2::AttributedStringWriter::withWarningColors();
      [(NSMutableAttributedString *)v31 cs_writeToFileHandle:*MEMORY[0x1E4F143C8]];

      _Block_object_dispose(v36, 8);
      LaunchServices::DumpWriter::~DumpWriter(v37);
    }
  }
LABEL_25:
  if (a8) {
    char v32 = v22;
  }
  else {
    char v32 = 1;
  }
  if ((v32 & 1) == 0) {
    *a8 = v23;
  }

  return v22;
}

void sub_182A6D2AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_182A6D860(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL22initActivationObserverv_block_invoke()
{
  if (getkNotificationActivationStateChanged())
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFStringRef v1 = (const __CFString *)getkNotificationActivationStateChanged();
    CFNotificationCenterAddObserver(DarwinNotifyCenter, 0, (CFNotificationCallback)handleActivationStateChanged, v1, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  }
  else
  {
    id v2 = _LSDefaultLog();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      ___ZL22initActivationObserverv_block_invoke_cold_1(v2);
    }
  }
}

uint64_t handleActivationStateChanged(__CFNotificationCenter *a1, void *a2, const __CFString *a3, const void *a4, const __CFDictionary *a5)
{
  return +[LSHRNSupport invalidateCache];
}

uint64_t initkNotificationActivationStateChanged(void)
{
  int v0 = (void *)MobileActivationLibrary(void)::frameworkLibrary;
  if (!MobileActivationLibrary(void)::frameworkLibrary)
  {
    int v0 = dlopen("/System/Library/PrivateFrameworks/MobileActivation.framework/MobileActivation", 2);
    MobileActivationLibrary(void)::frameworkLibrary = (uint64_t)v0;
  }
  uint64_t result = *(void *)dlsym(v0, "kNotificationActivationStateChanged");
  constantkNotificationActivationStateChanged = result;
  getkNotificationActivationStateChanged = kNotificationActivationStateChangedFunction;
  return result;
}

uint64_t kNotificationActivationStateChangedFunction(void)
{
  return constantkNotificationActivationStateChanged;
}

uint64_t (*initMAECopyActivationRecordWithError(uint64_t a1))()
{
  id v2 = (void *)MobileActivationLibrary(void)::frameworkLibrary;
  if (!MobileActivationLibrary(void)::frameworkLibrary)
  {
    id v2 = dlopen("/System/Library/PrivateFrameworks/MobileActivation.framework/MobileActivation", 2);
    MobileActivationLibrary(void)::frameworkLibrary = (uint64_t)v2;
  }
  uint64_t v3 = (uint64_t (*)())dlsym(v2, "MAECopyActivationRecordWithError");
  softLinkMAECopyActivationRecordWithError[0] = v3;
  if (v3)
  {
    ((void (*)(uint64_t))v3)(a1);
    uint64_t v3 = (uint64_t (*)())objc_claimAutoreleasedReturnValue();
  }

  return v3;
}

uint64_t _LSValidateEntitlementsOfConnectionForVanillaInstall(void *a1, void *a2, void *a3)
{
  id v6 = a1;
  id v7 = a2;
  CFStringRef v8 = [v6 _xpcConnection];
  uint64_t v9 = _LSCheckMIAllowedSPIForXPCConnection(v8, @"InstallForLaunchServices");

  if (!v9)
  {
    int v14 = _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28798], 1, (uint64_t)"_LSValidateEntitlementsOfConnectionForVanillaInstall", 47, &unk_1ECB43AD8);
    goto LABEL_15;
  }
  uint64_t v10 = [v7 objectForKeyedSubscript:@"VerifyForMigrator"];
  char v11 = [v10 BOOLValue];
  if ((v11 & 1) != 0
    || ([v7 objectForKeyedSubscript:@"SkipBlacklist"],
        uint64_t v3 = objc_claimAutoreleasedReturnValue(),
        ([v3 BOOLValue] & 1) != 0))
  {
    char v12 = [v6 _xpcConnection];
    int v13 = _LSCheckMIAllowedSPIForXPCConnection(v12, @"InstallForDataMigrator");

    if ((v11 & 1) == 0) {
    if (!v13)
    }
    {
      int v14 = _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28798], 1, (uint64_t)"_LSValidateEntitlementsOfConnectionForVanillaInstall", 37, &unk_1ECB43A88);
      uint64_t v9 = 0;
      goto LABEL_11;
    }
  }
  else
  {
  }
  int v14 = 0;
  uint64_t v9 = 1;
LABEL_11:
  CFIndex v15 = [v7 objectForKeyedSubscript:@"AllowInstallLocalProvisioned"];
  if ([v15 BOOLValue])
  {
    id v16 = [v6 _xpcConnection];
    int v17 = _LSCheckMIAllowedSPIForXPCConnection(v16, @"InstallLocalProvisioned");

    if (!v17)
    {
      uint64_t v18 = _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28798], 1, (uint64_t)"_LSValidateEntitlementsOfConnectionForVanillaInstall", 43, &unk_1ECB43AB0);

      uint64_t v9 = 0;
      int v14 = (void *)v18;
    }
  }
  else
  {
  }
LABEL_15:
  if (a3 && (v9 & 1) == 0) {
    *a3 = v14;
  }

  return v9;
}

BOOL _LSValidateEntitlementsOfConnectionForUninstall(void *a1, uint64_t a2, void *a3)
{
  CFAllocatorRef v4 = [a1 _xpcConnection];
  int v5 = _LSCheckMIAllowedSPIForXPCConnection(v4, @"UninstallForLaunchServices");

  if (v5)
  {
    id v6 = 0;
  }
  else
  {
    _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28798], 1, (uint64_t)"_LSValidateEntitlementsOfConnectionForUninstall", 63, &unk_1ECB43B00);
    id v6 = (id)objc_claimAutoreleasedReturnValue();
    if (a3)
    {
      id v6 = v6;
      *a3 = v6;
    }
  }

  return v5 != 0;
}

id installationInterface()
{
  if (installationInterface_once != -1) {
    dispatch_once(&installationInterface_once, &__block_literal_global_43);
  }
  int v0 = (void *)installationInterface_interface;

  return v0;
}

void __installationInterface_block_invoke()
{
  XNSGetPropertyListClasses();
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v0 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1ECB55EA8];
  CFStringRef v1 = (void *)installationInterface_interface;
  installationInterface_interface = v0;

  [(id)installationInterface_interface setClass:objc_opt_class() forSelector:sel_performShimmedInstallOfArtifact_options_completion_ argumentIndex:0 ofReply:0];
  [(id)installationInterface_interface setClasses:v2 forSelector:sel_performShimmedInstallOfArtifact_options_completion_ argumentIndex:1 ofReply:0];
  [(id)installationInterface_interface setClass:objc_opt_class() forSelector:sel_performShimmedInstallOfArtifact_options_completion_ argumentIndex:1 ofReply:1];
  [(id)installationInterface_interface setClass:objc_opt_class() forSelector:sel_performShimmedUninstallOfApplicationWithIdentifier_options_completion_ argumentIndex:0 ofReply:0];
  [(id)installationInterface_interface setClasses:v2 forSelector:sel_performShimmedUninstallOfApplicationWithIdentifier_options_completion_ argumentIndex:1 ofReply:0];
  [(id)installationInterface_interface setClass:objc_opt_class() forSelector:sel_performShimmedUninstallOfApplicationWithIdentifier_options_completion_ argumentIndex:1 ofReply:1];
}

void OUTLINED_FUNCTION_3_1(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x12u);
}

void sub_182A6EF94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A6F044(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A6F2C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A6F538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A6F648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)_LSInProcessSettingsStore;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_182A6F768(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A6F87C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A6F90C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A6F9E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A6FECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_182A70050(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A701E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A703CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A70538(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A705F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A70750(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A70890(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A70928(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A709BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  uint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)_LSClientSettingsStore;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_182A70A98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A70BA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A70C8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A70FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v31 - 192), 8);

  _Block_object_dispose((const void *)(v31 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_182A7113C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A711E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A714B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose((const void *)(v28 - 160), 8);

  _Block_object_dispose((const void *)(v28 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_182A71624(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A716C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id ___ZL29pluginKitUserElectionStoreURLv_block_invoke()
{
  uint64_t v5 = 1;
  uint64_t v0 = container_create_or_lookup_path_for_current_user();
  if (v0)
  {
    CFStringRef v1 = (void *)v0;
    id v2 = [MEMORY[0x1E4F1CB10] fileURLWithFileSystemRepresentation:v0 isDirectory:1 relativeToURL:0];
    free(v1);
  }
  else
  {
    uint64_t v3 = _LSExtensionsLog();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT)) {
      ___ZL29pluginKitUserElectionStoreURLv_block_invoke_cold_1(&v5, v3);
    }

    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F1C3B8], @"unable to locate user container: error %llu", v5);
    id v2 = 0;
  }

  return v2;
}

void ___ZL29pluginKitUserElectionStoreURLv_block_invoke_249(uint64_t a1)
{
  v19[1] = *MEMORY[0x1E4F143B8];
  uint64_t v18 = *MEMORY[0x1E4F28330];
  v19[0] = &unk_1ECB43918;
  id v2 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v19 forKeys:&v18 count:1];
  if (getUMUserManagerClass()
    && ([(id)getUMUserManagerClass() sharedManager],
        uint64_t v3 = objc_claimAutoreleasedReturnValue(),
        int v4 = [v3 isMultiUser],
        v3,
        v4))
  {
    uint64_t v5 = (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    uint64_t v5 = [MEMORY[0x1E4F1CB10] fileURLWithPath:@"/var/db/PlugInKit-Annotations"];
  }
  id v6 = v5;
  id v7 = [v5 URLByAppendingPathComponent:@"com.apple.pluginkit/"];
  CFStringRef v8 = [MEMORY[0x1E4F28CB8] defaultManager];
  id v16 = 0;
  char v9 = [v8 createDirectoryAtURL:v7 withIntermediateDirectories:1 attributes:v2 error:&v16];
  id v10 = v16;

  if ((v9 & 1) == 0)
  {
    char v11 = _LSExtensionsLog();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      ___ZL29pluginKitUserElectionStoreURLv_block_invoke_249_cold_2();
    }
  }
  uint64_t v12 = [v7 URLByAppendingPathComponent:@"Annotations"];
  int v13 = (void *)pluginKitUserElectionStoreURL(void)::annotations;
  pluginKitUserElectionStoreURL(void)::annotations = v12;

  int v14 = _LSExtensionsLog();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    CFIndex v15 = [(id)pluginKitUserElectionStoreURL(void)::annotations path];
    ___ZL29pluginKitUserElectionStoreURLv_block_invoke_249_cold_1(v15, (uint64_t)v17);
  }
}

void sub_182A71A50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t OUTLINED_FUNCTION_9_1(uint64_t result, uint64_t a2, float a3)
{
  *(float *)a2 = a3;
  *(void *)(a2 + 4) = result;
  return result;
}

void OUTLINED_FUNCTION_10_0(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x12u);
}

uint64_t LSBundleMeetsBasicDefaultAppRequirements(void *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = v5;
  if ((*(unsigned char *)(a3 + 174) & 4) != 0)
  {
    id v7 = _LSDefaultLog();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      int v11 = 134217984;
      uint64_t v12 = a2;
      CFStringRef v8 = "Bundle 0x%llx is a placeholder, so it cannot be a default app.";
      goto LABEL_10;
    }
  }
  else if (*(_DWORD *)(a3 + 168) == 2)
  {
    if (_LSBundleDataIsInUnsupportedLocation((uint64_t)v5, a3))
    {
      id v7 = _LSDefaultLog();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        int v11 = 134217984;
        uint64_t v12 = a2;
        CFStringRef v8 = "Bundle 0x%llx is in an unsupported location, so it cannot be a default app.";
LABEL_10:
        _os_log_impl(&dword_182959000, v7, OS_LOG_TYPE_INFO, v8, (uint8_t *)&v11, 0xCu);
      }
    }
    else
    {
      if (!_LSBundleDataGetUnsupportedFormatFlag())
      {
        uint64_t v9 = 1;
        goto LABEL_12;
      }
      id v7 = _LSDefaultLog();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        int v11 = 134217984;
        uint64_t v12 = a2;
        CFStringRef v8 = "Bundle 0x%llx has an unsupported format, so it cannot be a default app.";
        goto LABEL_10;
      }
    }
  }
  else
  {
    id v7 = _LSDefaultLog();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      int v11 = 134217984;
      uint64_t v12 = a2;
      CFStringRef v8 = "Bundle 0x%llx is not an application, so it cannot be a default app.";
      goto LABEL_10;
    }
  }

  uint64_t v9 = 0;
LABEL_12:

  return v9;
}

void sub_182A71D38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *LSGetDefaultAppCategoryInfoForCategory(uint64_t a1)
{
  if ((unint64_t)(a1 - 6) <= 0xFFFFFFFFFFFFFFFALL)
  {
    uint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"const struct LSDefaultAppCategoryInfo *LSGetDefaultAppCategoryInfoForCategory(LSDefaultAppCategory)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"LSDefaultAppsCore.mm", 254, @"Category %llu is out of range", a1);
  }
  return (char *)&LSDefaultAppCategoryInfos + 56 * a1 - 56;
}

void sub_182A71E10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t LSEnumerateDefaultAppCategories(uint64_t a1)
{
  unint64_t v2 = 0;
  char v5 = 0;
  uint64_t v3 = (char *)&LSDefaultAppCategoryInfos;
  do
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, char *, char *))(a1 + 16))(a1, v3, &v5);
    if (v2 > 3) {
      break;
    }
    ++v2;
    v3 += 56;
  }
  while (!v5);
  return result;
}

void LSDefaultAppCategoryCopyName(unint64_t a1)
{
  if (a1 >= 6)
  {
    unint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"NSString *LSDefaultAppCategoryCopyName(LSDefaultAppCategory)"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"LSDefaultAppsCore.mm", 288, @"bogus app category %lu", a1);
  }
}

void sub_182A71F40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t LSDefaultAppCategoryGetFromName(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"LSDefaultAppCategoryInvalid"])
  {
    uint64_t v2 = 0;
  }
  else if ([v1 isEqualToString:@"LSDefaultAppCategoryWebBrowser"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"LSDefaultAppCategoryMailClient"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"LSDefaultAppCategoryMessaging"])
  {
    uint64_t v2 = 3;
  }
  else if ([v1 isEqualToString:@"LSDefaultAppCategoryPhoneCalls"])
  {
    uint64_t v2 = 4;
  }
  else if ([v1 isEqualToString:@"LSDefaultAppCategoryContactlessPayment"])
  {
    uint64_t v2 = 5;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

void sub_182A7202C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *LSDefaultAppCategoryGetInfoForPreferenceSet(int a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = &LSDefaultAppCategoryInfos;
  while (1)
  {
    uint64_t v5 = v4[6];
    if (v5) {
      break;
    }
LABEL_8:
    v4 += 7;
    {
      uint64_t v4 = 0;
      goto LABEL_10;
    }
  }
  id v6 = (const char **)(v4[5] + 16);
  while (*(unsigned char *)v6
       || *((unsigned __int8 *)v6 - 16) != a1
       || strcmp(*(v6 - 1), (const char *)[v3 UTF8String]))
  {
    v6 += 3;
    if (!--v5) {
      goto LABEL_8;
    }
  }
LABEL_10:

  return v4;
}

void sub_182A720F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *LSDefaultAppCategoryGetInfoFromTypeIdentifier(uint64_t a1)
{
  uint64_t v2 = 0;
  while (1)
  {
    id v3 = (char *)&LSDefaultAppCategoryInfos + v2;
    if ([*(id *)((char *)&LSDefaultAppCategoryInfos + v2 + 8) isEqualToString:a1]) {
      break;
    }
    v2 += 56;
    if (v2 == 280) {
      return 0;
    }
  }
  return v3;
}

BOOL LSIdentifierIsDefaultAppTypeIdentifier(void *a1)
{
  id v1 = a1;
  if ([(__CFString *)v1 isEqualToString:@"com.apple.default-app-category"])
  {
    BOOL v2 = 1;
  }
  else
  {
    uint64_t v3 = 8u;
    do
    {
      int v4 = UTTypeEqual(*(CFStringRef *)((char *)&LSDefaultAppCategoryInfos + v3), v1);
      BOOL v2 = v4 != 0;
      if (v4) {
        break;
      }
      BOOL v5 = v3 == 232;
      v3 += 56;
    }
    while (!v5);
  }

  return v2;
}

void sub_182A721E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id LSCopyClaimListWithoutClaimsClaimingDefaultAppTypes(void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v3 = v1;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  uint64_t v5 = v4;
  if (v4)
  {
    uint64_t v6 = *(void *)v11;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v3);
        }
        CFStringRef v8 = *(void **)(*((void *)&v10 + 1) + 8 * v7);
        uint64_t v4 = __LSCopyClaimListWithoutClaimsClaimingDefaultAppTypes_block_invoke(v4, v8);
        if (v4) {
          uint64_t v4 = objc_msgSend(v2, "addObject:", v8, (void)v10);
        }
        ++v7;
      }
      while (v5 != v7);
      uint64_t v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
      uint64_t v5 = v4;
    }
    while (v4);
  }

  return v2;
}

void sub_182A72324(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __LSCopyClaimListWithoutClaimsClaimingDefaultAppTypes_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v7 = 0;
    goto LABEL_23;
  }
  id v3 = v2;
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = [v3 objectForKey:@"LSItemContentTypes"];
  uint64_t v6 = (void *)v5;
  if (v4 && v5)
  {
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {

      goto LABEL_18;
    }
LABEL_8:
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    id v8 = v6;
    uint64_t v9 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v9)
    {
      uint64_t v10 = *(void *)v16;
      while (2)
      {
        uint64_t v11 = 0;
        do
        {
          if (*(void *)v16 != v10) {
            objc_enumerationMutation(v8);
          }
          long long v12 = *(void **)(*((void *)&v15 + 1) + 8 * v11);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0 && LSIdentifierIsDefaultAppTypeIdentifier(v12))
          {
            long long v13 = _LSDefaultLog();
            if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
              __LSCopyClaimListWithoutClaimsClaimingDefaultAppTypes_block_invoke_cold_1();
            }

            uint64_t v7 = 0;
            goto LABEL_22;
          }
          ++v11;
        }
        while (v9 != v11);
        uint64_t v9 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
        if (v9) {
          continue;
        }
        break;
      }
    }

    goto LABEL_18;
  }
  if (v5) {
    goto LABEL_8;
  }
LABEL_18:
  uint64_t v7 = 1;
LABEL_22:

LABEL_23:
  return v7;
}