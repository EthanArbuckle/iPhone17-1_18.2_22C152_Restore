void sub_182A72540(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t LSCopyDefaultAppsClaimForBundle(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  v39[3] = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v8 = a4;
  if (LSBundleMeetsBasicDefaultAppRequirements(v7, a2, a3))
  {
    int64x2_t v32 = 0uLL;
    v33 = 0;
    v9 = (id *)&LSDefaultAppCategoryInfos;
    do
    {
      if (((unsigned int (*)(id, uint64_t, uint64_t, id, uint64_t))v9[4])(v7, a2, a3, v8, 1))
      {
        id v10 = v9[1];
        id v11 = v10;
        uint64_t v12 = v32.i64[1];
        if (v32.i64[1] >= (unint64_t)v33)
        {
          uint64_t v14 = (v32.i64[1] - v32.i64[0]) >> 3;
          if ((unint64_t)(v14 + 1) >> 61) {
            abort();
          }
          unint64_t v15 = (uint64_t)&v33[-v32.i64[0]] >> 2;
          if (v15 <= v14 + 1) {
            unint64_t v15 = v14 + 1;
          }
          if ((unint64_t)&v33[-v32.i64[0]] >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v15;
          }
          v37 = &v33;
          if (v16) {
            v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<os_eligibility_answer_t>>((uint64_t)&v33, v16);
          }
          else {
            v17 = 0;
          }
          v18 = &v17[8 * v14];
          v19 = &v17[8 * v16];
          v36 = v19;
          *(void *)v18 = v11;
          v13 = v18 + 8;
          v35.i64[1] = (uint64_t)(v18 + 8);
          v20 = (void *)v32.i64[1];
          v21 = (void *)v32.i64[0];
          if (v32.i64[1] == v32.i64[0])
          {
            int64x2_t v23 = vdupq_n_s64(v32.u64[1]);
          }
          else
          {
            do
            {
              uint64_t v22 = *--v20;
              void *v20 = 0;
              *((void *)v18 - 1) = v22;
              v18 -= 8;
            }
            while (v20 != v21);
            int64x2_t v23 = v32;
            v13 = (void *)v35.i64[1];
            v19 = v36;
          }
          v32.i64[0] = (uint64_t)v18;
          v32.i64[1] = (uint64_t)v13;
          int64x2_t v35 = v23;
          v24 = v33;
          v33 = v19;
          v36 = v24;
          v34 = (int64x2_t *)v23.i64[0];
          std::__split_buffer<LSApplicationRecord * {__strong}>::~__split_buffer((uint64_t)&v34);
        }
        else
        {
          *(void *)v32.i64[1] = v10;
          v13 = (void *)(v12 + 8);
        }
        v32.i64[1] = (uint64_t)v13;
      }
      v9 += 7;
    }
    if (v32.i64[1] == v32.i64[0])
    {
      uint64_t v27 = 0;
    }
    else
    {
      v25 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:(v32.i64[1] - v32.i64[0]) >> 3];
      for (i = (void *)v32.i64[0]; i != (void *)v32.i64[1]; ++i)
        [v25 addObject:*i];
      v38[0] = @"LSItemContentTypes";
      v28 = (void *)[v25 copy];
      uint64_t v29 = *MEMORY[0x1E4F1CC98];
      v39[0] = v28;
      v39[1] = @"Viewer";
      uint64_t v30 = *MEMORY[0x1E4F1CC90];
      v38[1] = v29;
      v38[2] = v30;
      v39[2] = @"Default Apps Claim";
      uint64_t v27 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v39 forKeys:v38 count:3];
    }
    v34 = &v32;
    std::vector<LSApplicationRecord * {__strong}>::__destroy_vector::operator()[abi:nn180100]((void ***)&v34);
  }
  else
  {
    uint64_t v27 = 0;
  }

  return v27;
}

void sub_182A72848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17)
{
  a17 = (void **)&a9;
  std::vector<LSApplicationRecord * {__strong}>::__destroy_vector::operator()[abi:nn180100](&a17);

  _Unwind_Resume(a1);
}

uint64_t LSGetDefaultAppsClaimUnitIDForBundle(void *a1, int a2)
{
  id v3 = a1;
  uint64_t v7 = 0;
  id v8 = &v7;
  uint64_t v9 = 0x2020000000;
  int v10 = 0;
  if (_LSBundleGet(v3, a2))
  {
    id v6 = v3;
    _CSArrayEnumerateAllValues();
  }
  uint64_t v4 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v7, 8);

  return v4;
}

void sub_182A729A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __LSGetDefaultAppsClaimUnitIDForBundle_block_invoke(uint64_t a1, uint64_t a2, int a3, unsigned char *a4)
{
  uint64_t result = _LSClaimGet();
  if (result)
  {
    if ((*(unsigned char *)(result + 9) & 0x20) != 0)
    {
      *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a3;
      *a4 = 1;
    }
  }
  return result;
}

uint64_t _LSServer_LSRemoveDefaultApp(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  _LSAssertRunningInServer((uint64_t)"OSStatus _LSServer_LSRemoveDefaultApp(LSDefaultAppCategory)");
  v2 = LSGetDefaultAppCategoryInfoForCategory(a1);
  id v3 = v2 + 8;
  uint64_t v4 = _LSServer_RemoveContentTypeHandler(*((const __CFString **)v2 + 1), 14);
  if (!v4)
  {
    if (!*((void *)v2 + 6)) {
      return 0;
    }
    uint64_t v8 = 0;
    unint64_t v9 = 1;
    while (1)
    {
      uint64_t v10 = *((void *)v2 + 5) + v8;
      CFStringRef v11 = (const __CFString *)[[NSString alloc] initWithUTF8String:*(void *)(v10 + 8)];
      uint64_t v12 = (__CFString *)v11;
      if (!*(unsigned char *)v10) {
        break;
      }
      if (*(unsigned char *)v10 == 1)
      {
        uint64_t v13 = _LSServer_RemoveContentTypeHandler(v11, 14);
        goto LABEL_12;
      }
      uint64_t v5 = 0;
LABEL_17:

      if (!v5)
      {
        v8 += 24;
        if (v9++ < *((void *)v2 + 6)) {
          continue;
        }
      }
      return v5;
    }
    uint64_t v13 = _LSServer_RemoveSchemeHandler(v11);
LABEL_12:
    uint64_t v5 = v13;
    if (v13)
    {
      uint64_t v14 = _LSDefaultLog();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412546;
        v17 = v12;
        __int16 v18 = 2048;
        uint64_t v19 = (int)v5;
        _os_log_error_impl(&dword_182959000, v14, OS_LOG_TYPE_ERROR, "Couldn't remove handler for subordinate claim %@: %ld", buf, 0x16u);
      }
    }
    goto LABEL_17;
  }
  uint64_t v5 = v4;
  id v6 = _LSDefaultLog();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
    _LSServer_LSRemoveDefaultApp_cold_1(v3, v5, v6);
  }

  return v5;
}

void sub_182A72C10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSServer_LSSetDefaultAppByTypeIdentifier(uint64_t a1, void *a2, long long *a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a2;
  _LSAssertRunningInServer((uint64_t)"OSStatus _LSServer_LSSetDefaultAppByTypeIdentifier(LSDefaultAppCategory, NSString *_"
                                    "_strong _Nonnull, LSVersionNumber)");
  if (LSDefaultAppCategoryMayBeChanged(a1))
  {
    id v6 = LSGetDefaultAppCategoryInfoForCategory(a1);
    uint64_t v7 = (LSContext *)*((void *)v6 + 1);
    long long v8 = a3[1];
    v27[0] = *a3;
    v27[1] = v8;
    uint64_t v9 = _LSServer_SetContentTypeHandler(v7, 14, v5, v27);
    if (!v9)
    {
      if (!*((void *)v6 + 6))
      {
LABEL_11:
        _LSAssertRunningInServer((uint64_t)"void _LSServer_NotePreferenceSetForCategory(LSDefaultAppCategory)");
        uint64_t v19 = LaunchServices::_LSServer_DefaultAppsExtraStateManager(v18);
        *(void *)buf = &unk_1ECB19D68;
        *(void *)&buf[8] = a1;
        uint64_t v29 = buf;
        uint64_t v14 = LaunchServices::LSDefaultAppsExtraStateManager::modify(v19, (uint64_t)buf);
        std::__function::__value_func<LaunchServices::LSDefaultAppsExtraState ()(std::optional<LaunchServices::LSDefaultAppsExtraState>,NSError *)>::~__value_func[abi:nn180100](buf);
        if (v14)
        {
          uint64_t v20 = _LSDefaultLog();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
            _LSServer_LSSetDefaultAppByTypeIdentifier_cold_1();
          }
        }
        uint64_t v9 = 0;
        goto LABEL_20;
      }
      uint64_t v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        uint64_t v12 = *((void *)v6 + 5);
        uint64_t v13 = (LSContext *)[[NSString alloc] initWithUTF8String:*(void *)(v12 + v10 + 8)];
        uint64_t v14 = v13;
        if (*(unsigned char *)(v12 + v10))
        {
          if (*(unsigned char *)(v12 + v10) != 1) {
            goto LABEL_10;
          }
          long long v15 = a3[1];
          v26[0] = *a3;
          v26[1] = v15;
          uint64_t v16 = _LSServer_SetContentTypeHandler(v13, 14, v5, v26);
        }
        else
        {
          long long v17 = a3[1];
          v25[0] = *a3;
          v25[1] = v17;
          uint64_t v16 = _LSServer_SetSchemeHandler((__CFString *)v13, v5, v25);
        }
        uint64_t v9 = v16;
        if (v16)
        {
          v24 = _LSDefaultLog();
          if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412546;
            *(void *)&uint8_t buf[4] = v14;
            *(_WORD *)&buf[12] = 2048;
            *(void *)&buf[14] = (int)v9;
            _os_log_error_impl(&dword_182959000, v24, OS_LOG_TYPE_ERROR, "Couldn't set handler for %@: %ld", buf, 0x16u);
          }

          goto LABEL_20;
        }
LABEL_10:

        ++v11;
        v10 += 24;
        if (v11 >= *((void *)v6 + 6)) {
          goto LABEL_11;
        }
      }
    }
  }
  else
  {
    v21 = _LSDefaultLog();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
      _LSServer_LSSetDefaultAppByTypeIdentifier_cold_2();
    }

    id v6 = 0;
    uint64_t v9 = 4294967246;
  }
  uint64_t v14 = _LSDefaultLog();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    if (v6)
    {
      int64x2_t v23 = (void *)*((void *)v6 + 1);
    }
    else
    {
      int64x2_t v23 = objc_msgSend(NSString, "stringWithFormat:", @"category %lu", a1);
    }
    *(_DWORD *)buf = 138412546;
    *(void *)&uint8_t buf[4] = v23;
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = (int)v9;
    _os_log_error_impl(&dword_182959000, v14, OS_LOG_TYPE_ERROR, "Couldn't set handler for %@: %ld", buf, 0x16u);
    if (!v6) {
  }
    }
LABEL_20:

  return v9;
}

void sub_182A72F54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t LSDefaultAppCategoryMayBeChanged(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  v2 = LSGetDefaultAppCategoryInfoForCategory(a1);
  unint64_t v3 = *((void *)v2 + 3);
  if (!v3) {
    return 1;
  }
  uint64_t v4 = LaunchServices::EligibilityCache::shared((LaunchServices::EligibilityCache *)v2);
  id v18 = 0;
  unint64_t v5 = LaunchServices::EligibilityCache::cachedAnswerForDomain(v4, v3, &v18);
  char v7 = v6;
  id v8 = v18;
  uint64_t v9 = v8;
  if (v7)
  {
    if (v5 == 2) {
      goto LABEL_12;
    }
    if (v5 == 4)
    {

      return 1;
    }
    unint64_t v11 = _LSDefaultLog();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v3;
      LOWORD(v22) = 1024;
      *(_DWORD *)((char *)&v22 + 2) = v5;
      _os_log_impl(&dword_182959000, v11, OS_LOG_TYPE_DEFAULT, "uncommon answer for domain %d: %d", buf, 0xEu);
    }
  }
  else
  {
    unint64_t v11 = _LSDefaultLog();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      LSDefaultAppCategoryMayBeChanged_cold_2(v3, (uint64_t)v9, v11);
    }
  }

LABEL_12:
  if ([(id)__LSDefaultsGetSharedInstance() isServer]) {
    return _LSServer_HasPreferenceEverBeenSetForDefaultAppCategory(a1);
  }
  *(void *)buf = 0;
  uint64_t v22 = buf;
  uint64_t v23 = 0x3032000000;
  v24 = __Block_byref_object_copy__31;
  v25 = __Block_byref_object_dispose__31;
  id v26 = 0;
  id v18 = 0;
  v19[0] = &v18;
  v19[1] = 0x3032000000;
  v19[2] = __Block_byref_object_copy__31;
  v19[3] = __Block_byref_object_dispose__31;
  id v20 = 0;
  v17[0] = (void (*)(void, void))MEMORY[0x1E4F143A8];
  v17[1] = (void (*)(void, void))3221225472;
  v17[2] = (void (*)(void, void))___ZL48_LSHasPreferenceEverBeenSetForDefaultAppCategory20LSDefaultAppCategory_block_invoke;
  v17[3] = (void (*)(void, void))&unk_1E522BA78;
  v17[4] = (void (*)(void, void))&v18;
  uint64_t v12 = +[_LSDService synchronousXPCProxyWithErrorHandler:]((uint64_t)_LSDReadService, v17);
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  v16[2] = ___ZL48_LSHasPreferenceEverBeenSetForDefaultAppCategory20LSDefaultAppCategory_block_invoke_2;
  v16[3] = &unk_1E522FB38;
  v16[4] = buf;
  v16[5] = &v18;
  [v12 getHasEverChangedPreferredAppForCategory:a1 completion:v16];

  uint64_t v13 = (void *)*((void *)v22 + 5);
  if (v13)
  {
    uint64_t v10 = [v13 BOOLValue];
  }
  else
  {
    uint64_t v14 = _LSDefaultLog();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      LSDefaultAppCategoryMayBeChanged_cold_1((uint64_t)v19, a1, v14);
    }

    uint64_t v10 = 0;
  }
  _Block_object_dispose(&v18, 8);

  _Block_object_dispose(buf, 8);
  return v10;
}

void sub_182A732B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  _Block_object_dispose(&a21, 8);

  _Block_object_dispose((const void *)(v26 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t _LSServer_LSMigratePreferencesForDefaultApps(void **a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  _LSAssertRunningInServer((uint64_t)"NSError * _Nullable _LSServer_LSMigratePreferencesForDefaultApps(LSContext * _Nonnull)");
  v2 = _LSDefaultLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf._opaque = 0;
    _os_log_impl(&dword_182959000, v2, OS_LOG_TYPE_DEFAULT, "Migrating preferences for default apps", buf._opaque, 2u);
  }

  char v20 = 0;
  unint64_t v3 = (char *)&LSDefaultAppCategoryInfos;
  do
  {
    CFStringRef v4 = (const __CFString *)*((void *)v3 + 1);
    int StringForCFString = _LSDatabaseGetStringForCFString(*a1, v4, 1);
    if (StringForCFString && LSHandlerPref::GetHandlerPref(*a1, StringForCFString, 0, 0)) {
      goto LABEL_22;
    }
    memset(&buf, 0, sizeof(buf));
    unint64_t v5 = *((void *)v3 + 6);
    if (!v5) {
      goto LABEL_22;
    }
    char v6 = (void *)(*((void *)v3 + 5) + 8);
    unint64_t v7 = 1;
    do
    {
      id v8 = (__CFString *)[[NSString alloc] initWithUTF8String:*v6];
      int v9 = _LSDatabaseGetStringForCFString(*a1, v8, 1);
      if (!v9) {
        goto LABEL_17;
      }
      if (*((unsigned char *)v6 - 8))
      {
        int v10 = 0;
        int v11 = 0;
        if (*((unsigned char *)v6 - 8) != 1) {
          goto LABEL_18;
        }
      }
      else
      {
        int v10 = 5;
      }
      HandlerPref = (LSHandlerPref *)LSHandlerPref::GetHandlerPref(*a1, v9, v10, 0);
      if (HandlerPref)
      {
        int v11 = LSHandlerPref::roleHandler(HandlerPref, 0xEu, &buf);
        uint64_t v13 = (void *)_CSStringCopyCFString();
        uint64_t v14 = _LSDefaultLog();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint64_t v23 = 138412802;
          v24 = v13;
          __int16 v25 = 2112;
          uint64_t v26 = v8;
          __int16 v27 = 2112;
          CFStringRef v28 = v4;
          _os_log_impl(&dword_182959000, v14, OS_LOG_TYPE_DEFAULT, "found handler %@ for subordinate claim %@; will set handler for %@",
            v23,
            0x20u);
        }
      }
      else
      {
LABEL_17:
        int v11 = 0;
      }
LABEL_18:

      if (v7 >= v5) {
        break;
      }
      ++v7;
      v6 += 3;
    }
    while (!v11);
    if (v11)
    {
      long long v15 = *a1;
      unsigned int v16 = _LSEffectivePreferenceRolesMaskForMask(14);
      LSVersionNumber v22 = buf;
      LSHandlerPref::SetRoleHandlerForTag(v15, StringForCFString, 0, v16, v11, (long long *)&v22);
      char v20 = 1;
    }
LABEL_22:
    v3 += 56;
  }
  long long v17 = _LSDefaultLog();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf._opaque = 67109120;
    *(_DWORD *)&buf._opaque[4] = v20 & 1;
    _os_log_impl(&dword_182959000, v17, OS_LOG_TYPE_DEFAULT, "Done migrating preferences for default apps, made changes? %{BOOL}d", buf._opaque, 8u);
  }

  if (v20)
  {
    LSHandlerPref::Save((LSHandlerPref *)*a1, v18);
    _LSDatabaseCommit((uint64_t)*a1);
  }
  return 0;
}

void sub_182A73630(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSServer_HasPreferenceEverBeenSetForDefaultAppCategory(uint64_t a1)
{
  _LSAssertRunningInServer((uint64_t)"BOOL _LSServer_HasPreferenceEverBeenSetForDefaultAppCategory(LSDefaultAppCategory)");
  uint64_t v3 = LaunchServices::_LSServer_DefaultAppsExtraStateManager(v2);
  id v10 = 0;
  LaunchServices::LSDefaultAppsExtraStateManager::read(v3, &v10, &v11);
  CFStringRef v4 = (LaunchServices *)v10;
  unint64_t v5 = v4;
  if (v12)
  {
    uint64_t hasCategoryBeenSet = LaunchServices::LSDefaultAppsExtraState::hasCategoryBeenSet(&v11, a1);
  }
  else
  {
    LaunchServices::_LSServer_DefaultAppsExtraStateManager(v4);
    int v9 = [MEMORY[0x1E4F1CAD0] set];
    uint64_t hasCategoryBeenSet = LaunchServices::LSDefaultAppsExtraState::hasCategoryBeenSet(&v9, a1);

    unint64_t v7 = _LSDefaultLog();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      _LSServer_HasPreferenceEverBeenSetForDefaultAppCategory_cold_1(hasCategoryBeenSet, a1, v7);
    }
  }
  if (v12) {

  }
  return hasCategoryBeenSet;
}

void sub_182A7374C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, char a12)
{
  if (a12) {

  }
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::LSDefaultAppsExtraState::hasCategoryBeenSet(void **a1, uint64_t a2)
{
  v2 = *a1;
  uint64_t v3 = [NSNumber numberWithUnsignedInteger:a2];
  uint64_t v4 = [v2 containsObject:v3];

  return v4;
}

void sub_182A737E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t LSDefaultAppCategoryForMask(unint64_t a1)
{
  return __clz(__rbit64(a1)) & 0x3F;
}

uint64_t LSDefaultAppCategoryMaskForCategory(uint64_t a1)
{
  if (a1) {
    return 1 << a1;
  }
  else {
    return 0;
  }
}

BOOL BundleIsWebBrowserCandidate(_LSDatabase *a1, int a2, const LSBundleData *a3, NSDictionary *a4, int a5)
{
  int v9 = a1;
  id v10 = a4;
  int v11 = v9;
  char v12 = v11;
  long long v15 = v11;
  BOOL v13 = (!a5 || (BundleHasEntitlementWithMaybePreloadedEntitlements(v11, a3, v10, &cfstr_ComAppleDevelo_2.isa) & 1) != 0)
     && _LSCanBundleHandleNodeOrSchemeOrUTI((int)&v15, a2, 0, (LaunchServices::BindingEvaluator *)@"https", 0, 14)&& _LSCanBundleHandleNodeOrSchemeOrUTI((int)&v15, a2, 0, (LaunchServices::BindingEvaluator *)@"http", 0, 14) != 0;

  return v13;
}

void sub_182A7390C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

BOOL BundleIsMailClientCandidate(_LSDatabase *a1, int a2, const LSBundleData *a3, NSDictionary *a4, int a5)
{
  int v9 = a1;
  id v10 = a4;
  int v11 = v9;
  char v12 = v11;
  unsigned int v16 = v11;
  if (a5 && (BundleHasEntitlementWithMaybePreloadedEntitlements(v11, a3, v10, &cfstr_ComAppleDevelo_3.isa) & 1) == 0)
  {
    BOOL v13 = 0;
    uint64_t v14 = v12;
  }
  else
  {
    BOOL v13 = _LSCanBundleHandleNodeOrSchemeOrUTI((int)&v16, a2, 0, (LaunchServices::BindingEvaluator *)@"mailto", 0, 14) != 0;
    uint64_t v14 = v16;
  }

  return v13;
}

void sub_182A739FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

BOOL BundleIsMessagingAppCandidate(_LSDatabase *a1, int a2, const LSBundleData *a3, NSDictionary *a4)
{
  unint64_t v7 = a1;
  if (BundleCanBeCandidate(v7, a3, a4, &unk_1ECB43B88, @"com.apple.MobileSMS"))
  {
    id v10 = v7;
    BOOL v8 = _LSCanBundleHandleNodeOrSchemeOrUTI((int)&v10, a2, 0, (LaunchServices::BindingEvaluator *)@"im", 0, 14) != 0;
  }
  else
  {
    BOOL v8 = 0;
  }

  return v8;
}

void sub_182A73AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t BundleIsPhoneAppCandidate(_LSDatabase *a1, unsigned int a2, const LSBundleData *a3, NSDictionary *a4)
{
  char v6 = a1;
  unint64_t v7 = a4;
  if (BundleCanBeCandidate(v6, a3, v7, &unk_1ECB43BA0, @"com.apple.mobilephone"))
  {
    BOOL v8 = BundleEntitlementValueWithMaybePreloadedEntitlements(v6, a3, v7, &cfstr_ApplicationIde.isa);
    if ([v8 isEqualToString:@"com.apple.FaceTime"]
      && MGGetBoolAnswer())
    {
      int v9 = _LSDefaultLog();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)char v12 = 0;
        _os_log_impl(&dword_182959000, v9, OS_LOG_TYPE_DEFAULT, "FaceTime is not a candidate for default calling app on this device.", v12, 2u);
      }

      uint64_t v10 = 0;
    }
    else
    {
      uint64_t v10 = 1;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }

  return v10;
}

void sub_182A73BF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t BundleIsPaymentCandidate(_LSDatabase *a1, unsigned int a2, const LSBundleData *a3, NSDictionary *a4)
{
  return 0;
}

uint64_t BundleHasEntitlementWithMaybePreloadedEntitlements(_LSDatabase *a1, const LSBundleData *a2, NSDictionary *a3, NSString *a4)
{
  uint64_t v4 = BundleEntitlementValueWithMaybePreloadedEntitlements(a1, a2, a3, a4);
  if (objc_opt_respondsToSelector()) {
    uint64_t v5 = [v4 BOOLValue];
  }
  else {
    uint64_t v5 = 0;
  }

  return v5;
}

void sub_182A73C7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id BundleEntitlementValueWithMaybePreloadedEntitlements(_LSDatabase *a1, const LSBundleData *a2, NSDictionary *a3, NSString *a4)
{
  unint64_t v7 = a1;
  BOOL v8 = a3;
  int v9 = a4;
  uint64_t v10 = v9;
  if (v8)
  {
    int v11 = [(NSDictionary *)v8 objectForKey:v9];
  }
  else
  {
    unsigned int entitlements = a2->base.entitlements;
    BOOL v13 = v9;
    _LSPlistGet((uint64_t)v7, entitlements);
    uint64_t v14 = (NSData *)objc_claimAutoreleasedReturnValue();
    int v11 = _LSPlistDataGetValueForKey(v14, (uint64_t)v13, 0);
  }

  return v11;
}

void sub_182A73D54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t BundleCanBeCandidate(void *a1, const LSBundleData *a2, void *a3, void *a4, void *a5)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  int v9 = a1;
  uint64_t v10 = a3;
  id v11 = a4;
  id v12 = a5;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v13 = v11;
  uint64_t v14 = [v13 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v14)
  {
    uint64_t v15 = *(void *)v21;
    while (2)
    {
      uint64_t v16 = 0;
      do
      {
        if (*(void *)v21 != v15) {
          objc_enumerationMutation(v13);
        }
        if (BundleHasEntitlementWithMaybePreloadedEntitlements(v9, a2, v10, *(NSString **)(*((void *)&v20 + 1) + 8 * v16)))
        {
          uint64_t v18 = 1;
          long long v17 = v13;
          goto LABEL_12;
        }
        ++v16;
      }
      while (v14 != v16);
      uint64_t v14 = [v13 countByEnumeratingWithState:&v20 objects:v24 count:16];
      if (v14) {
        continue;
      }
      break;
    }
  }

  if (v12)
  {
    long long v17 = BundleEntitlementValueWithMaybePreloadedEntitlements(v9, a2, v10, &cfstr_ApplicationIde.isa);
    uint64_t v18 = objc_msgSend(v12, "isEqual:", v17, (void)v20);
LABEL_12:
  }
  else
  {
    uint64_t v18 = 0;
  }

  return v18;
}

void sub_182A73F1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<_LSServer_NotePreferenceSetForCategory(LSDefaultAppCategory)::$_0,std::allocator<_LSServer_NotePreferenceSetForCategory(LSDefaultAppCategory)::$_0>,LaunchServices::LSDefaultAppsExtraState ()(std::optional<LaunchServices::LSDefaultAppsExtraState>,NSError *)>::~__func()
{
}

void *std::__function::__func<_LSServer_NotePreferenceSetForCategory(LSDefaultAppCategory)::$_0,std::allocator<_LSServer_NotePreferenceSetForCategory(LSDefaultAppCategory)::$_0>,LaunchServices::LSDefaultAppsExtraState ()(std::optional<LaunchServices::LSDefaultAppsExtraState>,NSError *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1ECB19D68;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<_LSServer_NotePreferenceSetForCategory(LSDefaultAppCategory)::$_0,std::allocator<_LSServer_NotePreferenceSetForCategory(LSDefaultAppCategory)::$_0>,LaunchServices::LSDefaultAppsExtraState ()(std::optional<LaunchServices::LSDefaultAppsExtraState>,NSError *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECB19D68;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<_LSServer_NotePreferenceSetForCategory(LSDefaultAppCategory)::$_0,std::allocator<_LSServer_NotePreferenceSetForCategory(LSDefaultAppCategory)::$_0>,LaunchServices::LSDefaultAppsExtraState ()(std::optional<LaunchServices::LSDefaultAppsExtraState>,NSError *)>::operator()(uint64_t a1, uint64_t a2, id *a3)
{
  int v4 = *(unsigned __int8 *)(a2 + 8);
  if (*(unsigned char *)(a2 + 8))
  {
    uint64_t v5 = *(void **)a2;
    *(void *)a2 = 0;
  }
  else
  {
    uint64_t v5 = 0;
  }
  id v6 = *a3;
  unint64_t v7 = [MEMORY[0x1E4F1CAD0] set];
  id v13 = v7;
  if (v4)
  {
    id v8 = v5;
  }
  else
  {
    int v9 = _LSDefaultLog();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      std::__function::__func<_LSServer_NotePreferenceSetForCategory(LSDefaultAppCategory)::$_0,std::allocator<_LSServer_NotePreferenceSetForCategory(LSDefaultAppCategory)::$_0>,LaunchServices::LSDefaultAppsExtraState ()(std::optional<LaunchServices::LSDefaultAppsExtraState>,NSError *)>::operator()();
    }

    LaunchServices::_LSServer_DefaultAppsExtraStateManager(v10);
    id v8 = [MEMORY[0x1E4F1CAD0] set];
  }
  id v13 = v8;

  LaunchServices::LSDefaultAppsExtraState::setCategoryHasBeenSet(&v13, *(void *)(a1 + 8), 1);
  id v11 = v13;
  if (v4) {

  }
  return v11;
}

void sub_182A740DC(_Unwind_Exception *a1)
{
  if (v4) {
  _Unwind_Resume(a1);
  }
}

void LaunchServices::LSDefaultAppsExtraState::setCategoryHasBeenSet(void **a1, uint64_t a2, int a3)
{
  uint64_t v5 = *a1;
  if (a3)
  {
    id v11 = *a1;
    if (!v5)
    {
      id v11 = [MEMORY[0x1E4F1CAD0] set];
    }
    id v6 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", a2, v11);
    uint64_t v7 = [v12 setByAddingObject:v6];
    id v8 = *a1;
    *a1 = (void *)v7;

    if (!v5)
    {
    }
  }
  else
  {
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = ___ZN14LaunchServices23LSDefaultAppsExtraState21setCategoryHasBeenSetE20LSDefaultAppCategoryb_block_invoke;
    v13[3] = &__block_descriptor_40_e22_B24__0__NSNumber_8_B16l;
    v13[4] = a2;
    uint64_t v9 = [v5 objectsPassingTest:v13];
    uint64_t v10 = *a1;
    *a1 = (void *)v9;
  }
}

void sub_182A74230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  if (!v9) {
  _Unwind_Resume(a1);
  }
}

uint64_t ___ZN14LaunchServices23LSDefaultAppsExtraState21setCategoryHasBeenSetE20LSDefaultAppCategoryb_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = [NSNumber numberWithUnsignedInteger:*(void *)(a1 + 32)];
  uint64_t v5 = [v3 isEqual:v4] ^ 1;

  return v5;
}

void sub_182A742B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<LaunchServices::LSDefaultAppsExtraState ()(std::optional<LaunchServices::LSDefaultAppsExtraState>,NSError *)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void ___ZL48_LSHasPreferenceEverBeenSetForDefaultAppCategory20LSDefaultAppCategory_block_invoke(uint64_t a1, void *a2)
{
}

void ___ZL48_LSHasPreferenceEverBeenSetForDefaultAppCategory20LSDefaultAppCategory_block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v11 = v5;

  uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
}

void sub_182A74568(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void LaunchServices::FeatureFlagPredicateEvaluation::Predicate::parse_dictionary(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  v41[1] = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  if (_NSIsNSDictionary())
  {
    uint64_t v32 = 0;
    v33 = &v32;
    uint64_t v34 = 0x4812000000;
    int64x2_t v35 = __Block_byref_object_copy__32;
    v36 = __Block_byref_object_dispose__32;
    v37 = &unk_182B5933F;
    memset(v38, 0, sizeof(v38));
    uint64_t v25 = 0;
    uint64_t v26 = &v25;
    uint64_t v27 = 0x4812000000;
    CFStringRef v28 = __Block_byref_object_copy__32;
    uint64_t v29 = __Block_byref_object_dispose__32;
    uint64_t v30 = &unk_182B5933F;
    memset(v31, 0, sizeof(v31));
    uint64_t v19 = 0;
    long long v20 = &v19;
    uint64_t v21 = 0x3032000000;
    long long v22 = __Block_byref_object_copy__79;
    long long v23 = __Block_byref_object_dispose__80;
    id v24 = 0;
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    v18[2] = ___ZN14LaunchServices30FeatureFlagPredicateEvaluation9Predicate16parse_dictionaryEP12NSDictionaryPU15__autoreleasingP7NSError_block_invoke;
    v18[3] = &unk_1E522FB90;
    v18[4] = &v19;
    v18[5] = &v32;
    v18[6] = &v25;
    [v5 enumerateKeysAndObjectsUsingBlock:v18];
    id v6 = v20[5];
    if (v6)
    {
      if (a2) {
        *a2 = v6;
      }
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 48) = 0;
    }
    else
    {
      id v8 = v33;
      uint64_t v9 = v33[8];
      long long v10 = *((_OWORD *)v33 + 3);
      v33[7] = 0;
      v8[8] = 0;
      v8[6] = 0;
      id v11 = v26;
      id v12 = v26[8];
      long long v13 = *((_OWORD *)v26 + 3);
      v26[7] = 0;
      v11[8] = 0;
      v11[6] = 0;
      memset(v15, 0, sizeof(v15));
      memset(v14, 0, sizeof(v14));
      *(_OWORD *)a3 = v10;
      *(void *)(a3 + 16) = v9;
      v16[0] = 0;
      v16[1] = 0;
      *(_OWORD *)(a3 + 24) = v13;
      *(void *)(a3 + 40) = v12;
      v16[2] = 0;
      memset(v17, 0, sizeof(v17));
      *(unsigned char *)(a3 + 48) = 1;
      v39 = (void **)v17;
      std::vector<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::__destroy_vector::operator()[abi:nn180100](&v39);
      v39 = (void **)v16;
      std::vector<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::__destroy_vector::operator()[abi:nn180100](&v39);
      v39 = (void **)v14;
      std::vector<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::__destroy_vector::operator()[abi:nn180100](&v39);
      v39 = (void **)v15;
      std::vector<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::__destroy_vector::operator()[abi:nn180100](&v39);
    }
    _Block_object_dispose(&v19, 8);

    _Block_object_dispose(&v25, 8);
    uint64_t v19 = (void **)v31;
    std::vector<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::__destroy_vector::operator()[abi:nn180100](&v19);
    _Block_object_dispose(&v32, 8);
    uint64_t v25 = (void **)v38;
    std::vector<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::__destroy_vector::operator()[abi:nn180100](&v25);
  }
  else
  {
    if (a2)
    {
      uint64_t v40 = *MEMORY[0x1E4F28228];
      v41[0] = @"Predicate was not a dictionary";
      uint64_t v7 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v41 forKeys:&v40 count:1];
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -50, (uint64_t)"parse_dictionary", 106, v7);
      *a2 = (id)objc_claimAutoreleasedReturnValue();
    }
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 48) = 0;
  }
}

void sub_182A748AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::DelayedInitable<LaunchServices::FeatureFlagPredicateEvaluation::Predicate>::emplace<LaunchServices::FeatureFlagPredicateEvaluation::Predicate>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 48))
  {
    id v5 = [MEMORY[0x1E4F28B00] currentHandler];
    id v6 = objc_msgSend(NSString, "stringWithUTF8String:", "void LaunchServices::DelayedInitable<LaunchServices::Predicate>::emplace(Args &&...) [T = LaunchServices::Predicate, Args = <LaunchServices::Predicate>]");
    [v5 handleFailureInFunction:v6 file:@"LSObjCPlusPlusHelpers.hpp" lineNumber:34 description:@"can't re-emplace a DelayedInitable"];
  }

  return std::optional<LaunchServices::FeatureFlagPredicateEvaluation::Predicate>::emplace[abi:nn180100]<LaunchServices::FeatureFlagPredicateEvaluation::Predicate,void>(a1, a2);
}

void sub_182A749C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::FeatureFlagPredicateEvaluation::Predicate::evaluate(uint64_t **a1, void *a2)
{
  id v3 = a2;
  int v4 = *a1;
  id v5 = a1[1];
  while (v4 != v5)
  {
    if (*((char *)v4 + 47) >= 0) {
      uint64_t v6 = (uint64_t)(v4 + 3);
    }
    else {
      uint64_t v6 = v4[3];
    }
    if (*((char *)v4 + 23) >= 0) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = (uint64_t *)*v4;
    }
    if (([v3 isFeature:v6 enabledInDomain:v7] & 1) == 0)
    {
      uint64_t v15 = 0;
      goto LABEL_26;
    }
    v4 += 6;
  }
  id v8 = a1[3];
  uint64_t v9 = a1[4];
  if (v8 == v9)
  {
    uint64_t v15 = 1;
  }
  else
  {
    long long v10 = v8 + 3;
    do
    {
      if (*((char *)v10 + 23) >= 0) {
        id v11 = v10;
      }
      else {
        id v11 = (uint64_t *)*v10;
      }
      if (*((char *)v10 - 1) >= 0) {
        uint64_t v12 = (uint64_t)(v10 - 3);
      }
      else {
        uint64_t v12 = *(v10 - 3);
      }
      int v13 = [v3 isFeature:v11 enabledInDomain:v12];
      if (v10 + 3 == v9) {
        int v14 = 1;
      }
      else {
        int v14 = v13;
      }
      v10 += 6;
    }
    while (v14 != 1);
    uint64_t v15 = v13 ^ 1u;
  }
LABEL_26:

  return v15;
}

void sub_182A74AD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A74B6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A74C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__79(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__80(uint64_t a1)
{
}

void ___ZN14LaunchServices30FeatureFlagPredicateEvaluation9Predicate16parse_dictionaryEP12NSDictionaryPU15__autoreleasingP7NSError_block_invoke(void *a1, void *a2, void *a3, unsigned char *a4)
{
  v30[1] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = a2;
  id v8 = a3;
  if ((_NSIsNSString() & 1) == 0)
  {
    uint64_t v29 = *MEMORY[0x1E4F28228];
    v30[0] = @"Predicate key not a feature flag";
    id v11 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v30 forKeys:&v29 count:1];
    uint64_t v12 = _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -50, (uint64_t)"parse_dictionary_block_invoke", 114, v11);
    uint64_t v13 = *(void *)(a1[4] + 8);
    int v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = v12;

LABEL_8:
    *a4 = 1;
    goto LABEL_13;
  }
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
    uint64_t v27 = *MEMORY[0x1E4F28228];
    CFStringRef v28 = @"bad requirement value";
    uint64_t v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v28 forKeys:&v27 count:1];
    uint64_t v16 = _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -50, (uint64_t)"parse_dictionary_block_invoke", 119, v15);
    uint64_t v17 = *(void *)(a1[4] + 8);
    uint64_t v18 = *(void **)(v17 + 40);
    *(void *)(v17 + 40) = v16;

    goto LABEL_8;
  }
  double v9 = LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier::from_nsstring(v7, (uint64_t)v23);
  if (v24)
  {
    if (objc_msgSend(v8, "BOOLValue", v9)) {
      uint64_t v10 = a1[5];
    }
    else {
      uint64_t v10 = a1[6];
    }
    std::vector<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::emplace_back<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>((char **)(*(void *)(v10 + 8) + 48), v23);
  }
  else
  {
    uint64_t v25 = *MEMORY[0x1E4F28228];
    uint64_t v26 = @"Predicate key unparseable";
    uint64_t v19 = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &v26, &v25, 1, v9);
    uint64_t v20 = _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -50, (uint64_t)"parse_dictionary_block_invoke", 125, v19);
    uint64_t v21 = *(void *)(a1[4] + 8);
    long long v22 = *(void **)(v21 + 40);
    *(void *)(v21 + 40) = v20;

    *a4 = 1;
  }
  std::__optional_destruct_base<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v23);
LABEL_13:
}

void sub_182A74F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__optional_destruct_base<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier::from_nsstring@<D0>(LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier *this@<X0>, uint64_t a2@<X8>)
{
  int v4 = (const char *)[(LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier *)this UTF8String];
  if (!v4) {
    goto LABEL_13;
  }
  uint64_t v6 = (char *)v4;
  size_t v7 = strlen(v4);
  id v8 = &v6[v7];
  double v9 = (char *)memchr(v6, 47, v7);
  uint64_t v10 = v9 ? v9 : &v6[v7];
  size_t v11 = v10 - v6;
  BOOL v12 = v10 == v6 || v11 == v7;
  if (v12 || v10 == v8 - 1)
  {
LABEL_13:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 48) = 0;
  }
  else
  {
    LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier::FeatureFlagSpecifier(&v14, v6, v11, v10 + 1, v8 - (v10 + 1));
    *(_OWORD *)a2 = v14;
    *(void *)(a2 + 16) = v15;
    double result = *(double *)&v16;
    *(_OWORD *)(a2 + 24) = v16;
    *(void *)(a2 + 40) = v17;
    *(unsigned char *)(a2 + 48) = 1;
  }
  return result;
}

char *std::vector<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::emplace_back<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>(char **a1, long long *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)*a1) >> 4);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555) {
      abort();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (void)*a1) >> 4);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v14 = 0x555555555555555;
    }
    else {
      unint64_t v14 = v12;
    }
    uint64_t v30 = v4;
    if (v14) {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<LSBinding>>(v4, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    long long v16 = &v15[48 * v11];
    long long v17 = *a2;
    *((void *)v16 + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long v16 = v17;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v18 = *(long long *)((char *)a2 + 24);
    *((void *)v16 + 5) = *((void *)a2 + 5);
    *(_OWORD *)(v16 + 24) = v18;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    uint64_t v20 = *a1;
    unint64_t v19 = (unint64_t)a1[1];
    if ((char *)v19 == *a1)
    {
      int64x2_t v24 = vdupq_n_s64(v19);
      uint64_t v21 = &v15[48 * v11];
    }
    else
    {
      uint64_t v21 = &v15[48 * v11];
      do
      {
        long long v22 = *(_OWORD *)(v19 - 48);
        *((void *)v21 - 4) = *(void *)(v19 - 32);
        *((_OWORD *)v21 - 3) = v22;
        *(void *)(v19 - 40) = 0;
        *(void *)(v19 - 32) = 0;
        *(void *)(v19 - 48) = 0;
        long long v23 = *(_OWORD *)(v19 - 24);
        *((void *)v21 - 1) = *(void *)(v19 - 8);
        *(_OWORD *)(v21 - 24) = v23;
        v21 -= 48;
        *(void *)(v19 - 16) = 0;
        *(void *)(v19 - 8) = 0;
        *(void *)(v19 - 24) = 0;
        v19 -= 48;
      }
      while ((char *)v19 != v20);
      int64x2_t v24 = *(int64x2_t *)a1;
    }
    uint64_t v10 = v16 + 48;
    *a1 = v21;
    a1[1] = v16 + 48;
    int64x2_t v28 = v24;
    uint64_t v25 = a1[2];
    a1[2] = &v15[48 * v14];
    uint64_t v29 = v25;
    uint64_t v27 = v24.i64[0];
    std::__split_buffer<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::~__split_buffer((void **)&v27);
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v9 = *(long long *)((char *)a2 + 24);
    *(void *)(v7 + 40) = *((void *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    uint64_t v10 = (char *)(v7 + 48);
  }
  a1[1] = v10;
  return v10 - 48;
}

void std::vector<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::destroy[abi:nn180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::destroy[abi:nn180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  if (*(char *)(a2 + 23) < 0)
  {
    id v3 = *(void **)a2;
    operator delete(v3);
  }
}

void *LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier::FeatureFlagSpecifier(void *__dst, void *__src, size_t __len, void *a4, size_t a5)
{
  if (__len > 0x7FFFFFFFFFFFFFF7) {
    abort();
  }
  if (__len >= 0x17)
  {
    size_t v11 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v11 = __len | 7;
    }
    size_t v12 = v11 + 1;
    uint64_t v10 = operator new(v11 + 1);
    __dst[1] = __len;
    __dst[2] = v12 | 0x8000000000000000;
    *__dst = v10;
    goto LABEL_8;
  }
  *((unsigned char *)__dst + 23) = __len;
  uint64_t v10 = __dst;
  if (__len) {
LABEL_8:
  }
    memmove(v10, __src, __len);
  *((unsigned char *)v10 + __len) = 0;
  if (a5 > 0x7FFFFFFFFFFFFFF7) {
    abort();
  }
  if (a5 >= 0x17)
  {
    uint64_t v14 = (a5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a5 | 7) != 0x17) {
      uint64_t v14 = a5 | 7;
    }
    uint64_t v15 = v14 + 1;
    unint64_t v13 = (char *)operator new(v14 + 1);
    __dst[4] = a5;
    __dst[5] = v15 | 0x8000000000000000;
    __dst[3] = v13;
  }
  else
  {
    unint64_t v13 = (char *)(__dst + 3);
    *((unsigned char *)__dst + 47) = a5;
    if (!a5) {
      goto LABEL_17;
    }
  }
  memmove(v13, a4, a5);
LABEL_17:
  v13[a5] = 0;
  return __dst;
}

void sub_182A753F0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void **std::__split_buffer<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::clear[abi:nn180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 48;
    std::allocator<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::destroy[abi:nn180100](v4, i - 48);
  }
}

uint64_t std::__optional_destruct_base<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier,false>::~__optional_destruct_base[abi:nn180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    if (*(char *)(a1 + 47) < 0) {
      operator delete(*(void **)(a1 + 24));
    }
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<LaunchServices::FeatureFlagPredicateEvaluation::Predicate,false>::~__optional_destruct_base[abi:nn180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    id v3 = (void **)(a1 + 24);
    std::vector<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::__destroy_vector::operator()[abi:nn180100](&v3);
    id v3 = (void **)a1;
    std::vector<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::__destroy_vector::operator()[abi:nn180100](&v3);
  }
  return a1;
}

uint64_t std::optional<LaunchServices::FeatureFlagPredicateEvaluation::Predicate>::emplace[abi:nn180100]<LaunchServices::FeatureFlagPredicateEvaluation::Predicate,void>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 1;
  return a1;
}

void std::__optional_destruct_base<LaunchServices::FeatureFlagPredicateEvaluation::Predicate,false>::reset[abi:nn180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v2 = (void **)(a1 + 24);
    std::vector<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::__destroy_vector::operator()[abi:nn180100](&v2);
    uint64_t v2 = (void **)a1;
    std::vector<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::__destroy_vector::operator()[abi:nn180100](&v2);
    *(unsigned char *)(a1 + 48) = 0;
  }
}

void sub_182A75614(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A7575C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A7582C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A75A1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A75B10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A75B90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A75CC4(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_182A75D88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A75EF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A76074(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A7618C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A76224(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A762D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t LaunchServices::LocalizedString::Create(void *a1, void *a2, uint64_t a3)
{
  v55[1] = *MEMORY[0x1E4F143B8];
  v39 = a1;
  id v5 = a2;
  id v6 = (id)a3;
  unsigned int v52 = 0;
  unint64_t v51 = 0;
  uint64_t v40 = v6;
  if (!v5 || (id v6 = (id)[v5 count], !v40))
  {
    if (!v6)
    {
      unsigned __int8 v7 = 0;
      goto LABEL_62;
    }
  }
  a3 = MEMORY[0x18530F680](v6);
  long long v8 = [v5 allKeys];
  long long v9 = v8;
  if (v8)
  {
    if ([v8 containsObject:@"LSDefaultLocalizedValue"])
    {
      v38 = v9;
    }
    else
    {
      uint64_t v10 = [v9 arrayByAddingObject:@"LSDefaultLocalizedValue"];

      v38 = (void *)v10;
    }
  }
  else
  {
    v55[0] = @"LSDefaultLocalizedValue";
    v38 = [MEMORY[0x1E4F1C978] arrayWithObjects:v55 count:1];
  }
  size_t v11 = (void *)[objc_alloc(MEMORY[0x1E4F28F50]) initWithOptions:0];
  size_t v12 = +[_LSStringLocalizer missingLocalizationPlaceholder];
  uint64_t v13 = 0;
  unsigned __int8 v7 = 0;
  if (!v38 || !v11) {
    goto LABEL_61;
  }
  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  obuint64_t j = v38;
  uint64_t v14 = [obj countByEnumeratingWithState:&v47 objects:v54 count:16];
  if (!v14) {
    goto LABEL_25;
  }
  uint64_t v15 = *(void *)v48;
  do
  {
    for (uint64_t i = 0; i != v14; ++i)
    {
      if (*(void *)v48 != v15) {
        objc_enumerationMutation(obj);
      }
      long long v17 = *(void **)(*((void *)&v47 + 1) + 8 * i);
      id v18 = [v5 objectForKeyedSubscript:v17];
      if ([v18 isEqual:v12])
      {
      }
      else if (v18)
      {
        goto LABEL_23;
      }
      if ([v17 isEqual:@"LSDefaultLocalizedValue"]) {
        id v18 = v40;
      }
      else {
        id v18 = 0;
      }
LABEL_23:
      [v11 addPointer:v18];
    }
    uint64_t v14 = [obj countByEnumeratingWithState:&v47 objects:v54 count:16];
  }
  while (v14);
LABEL_25:

  id v19 = objc_alloc(MEMORY[0x1E4F1CA80]);
  uint64_t v20 = objc_msgSend(v19, "initWithCapacity:", objc_msgSend(v11, "count"));
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  id v21 = v11;
  uint64_t v22 = [v21 countByEnumeratingWithState:&v43 objects:v53 count:16];
  if (v22)
  {
    uint64_t v23 = *(void *)v44;
    do
    {
      for (uint64_t j = 0; j != v22; ++j)
      {
        if (*(void *)v44 != v23) {
          objc_enumerationMutation(v21);
        }
        uint64_t v25 = *(void **)(*((void *)&v43 + 1) + 8 * j);
        id v26 = v25;
        if (!v25)
        {
          id v19 = [MEMORY[0x1E4F1CA98] null];
          id v26 = v19;
        }
        [v20 addObject:v26];
        if (!v25) {
      }
        }
      uint64_t v22 = [v21 countByEnumeratingWithState:&v43 objects:v53 count:16];
    }
    while (v22);
  }

  __int16 v42 = 0;
  if ([v20 count] == 1 && objc_msgSend(obj, "count") && objc_msgSend(v21, "count"))
  {
    uint64_t v27 = [obj objectAtIndexedSubscript:0];
    int StringForCFString = _LSDatabaseCreateStringForCFString(v39, v27, 0);
    LODWORD(v51) = StringForCFString;

    int v29 = _LSDatabaseCreateStringForCFString(v39, (const __CFString *)[v21 pointerAtIndex:0], 0);
    HIDWORD(v51) = v29;
    LOBYTE(v52) = v52 | 2;
  }
  else
  {
    int StringForCFString = _LSDatabaseCreateStringArray(v39, obj, 0, (unsigned char *)&v42 + 1);
    LODWORD(v51) = StringForCFString;
    int v29 = _LSDatabaseCreateStringArrayWithNullValues(v39, v21, 0, &v42);
    HIDWORD(v51) = v29;
  }
  if ([obj count] == 1)
  {
    uint64_t v30 = [obj objectAtIndexedSubscript:0];
    char v31 = [v30 isEqual:@"LSDefaultLocalizedValue"];
    LOBYTE(v52) = v52 & 0xFE | v31;
  }
  else
  {
    LOBYTE(v52) = v52 & 0xFE;
  }
  if (StringForCFString) {
    BOOL v32 = v29 == 0;
  }
  else {
    BOOL v32 = 1;
  }
  int v34 = !v32 && HIBYTE(v42) == 0;
  BOOL v35 = (_BYTE)v42 == 0;
  unint64_t v36 = v51;
  if ((v34 & v35) != 0) {
    unsigned __int8 v7 = v51;
  }
  else {
    unsigned __int8 v7 = 0;
  }
  if ((v34 & v35) != 0) {
    uint64_t v13 = v52 | 0x100000000;
  }
  else {
    uint64_t v13 = 0;
  }

  a3 = v36 >> 8;
LABEL_61:

  if ((v13 & 0x100000000) == 0) {
LABEL_62:
  }
    LaunchServices::LocalizedString::dispose((LaunchServices::LocalizedString *)&v51, v39);

  return v7 | (unint64_t)(a3 << 8);
}

void sub_182A76828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void LaunchServices::LocalizedString::dispose(LaunchServices::LocalizedString *this, _LSDatabase *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if ((*((unsigned char *)this + 8) & 2) != 0)
  {
    _CSStringRelease();
    _CSStringRelease();
  }
  else
  {
    _LSDatabaseDisposeStringArray(v3, *(_DWORD *)this);
    _LSDatabaseDisposeStringArray(v4, *((_DWORD *)this + 1));
  }
}

void sub_182A76980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::LocalizedString::Add(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (!v5)
  {
    size_t v12 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v13 = objc_msgSend(NSString, "stringWithUTF8String:", "static _LSLocalizedStringID LaunchServices::LocalizedString::Add(_LSDatabase *__strong _Nonnull, NSDictionary<NSString *,NSString *> *__strong _Nonnull, NSString *__strong _Nullable)");
    [v12 handleFailureInFunction:v13, @"LSLocalizedString.mm", 124, @"Invalid parameter not satisfying: %@", @"db != nil" file lineNumber description];
  }
  unint64_t v8 = LaunchServices::LocalizedString::Create(v5, v6, (uint64_t)v7);
  if ((v9 & 0xFF00000000) != 0)
  {
    unint64_t v14 = v8;
    int v15 = v9;
    uint64_t v10 = CSStoreAllocUnitWithData();
    if (!v10) {
      LaunchServices::LocalizedString::dispose((LaunchServices::LocalizedString *)&v14, v5);
    }
  }
  else
  {
    uint64_t v10 = 0;
  }

  return v10;
}

void sub_182A76AD0(_Unwind_Exception *a1)
{
  id v6 = v5;

  _Unwind_Resume(a1);
}

void LaunchServices::LocalizedString::Remove(LaunchServices::LocalizedString *this, _LSDatabase *a2)
{
  id v3 = this;
  id v7 = (_LSDatabase *)v3;
  if (!v3)
  {
    id v5 = [MEMORY[0x1E4F28B00] currentHandler];
    id v6 = objc_msgSend(NSString, "stringWithUTF8String:", "static void LaunchServices::LocalizedString::Remove(_LSDatabase *__strong _Nonnull, _LSLocalizedStringID)");
    [v5 handleFailureInFunction:v6, @"LSLocalizedString.mm", 143, @"Invalid parameter not satisfying: %@", @"db != nil" file lineNumber description];

    id v3 = 0;
  }
  uint64_t v4 = (LaunchServices::LocalizedString *)LaunchServices::LocalizedString::Get(v3, a2);
  if (v4)
  {
    LaunchServices::LocalizedString::dispose(v4, v7);
    CSStoreFreeUnit();
  }
}

void sub_182A76C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void LaunchServices::LocalizedString::GetVisualizationFunctions(id (**a1)(LaunchServices::LocalizedString **this, LSContext *a2, _LSDatabase *a3)@<X8>)
{
  *a1 = LaunchServices::Localization::getSummaryOfLocalizedString;
  a1[1] = (id (*)(LaunchServices::LocalizedString **, LSContext *, _LSDatabase *))LaunchServices::Localization::displayLocalizedString;
  a1[2] = 0;
}

id LaunchServices::Localization::getSummaryOfLocalizedString(LaunchServices::LocalizedString **this, LSContext *a2, _LSDatabase *a3)
{
  uint64_t v4 = (void *)LaunchServices::LocalizedString::Get(*this, a3);
  if (v4)
  {
    uint64_t v4 = LaunchServices::LocalizedString::localizeUnsafely((uint64_t)v4, *this, 0);
  }

  return v4;
}

BOOL LaunchServices::Localization::displayLocalizedString(LaunchServices::LocalizedString **this, LSContext *a2, _LSDatabase *a3, CSStore2::AttributedStringWriter *a4, LaunchServices::DumpWriter *a5)
{
  unint64_t v8 = (LSContext *)LaunchServices::LocalizedString::Get(*this, a3);
  if (v8)
  {
    *(_WORD *)uint64_t v13 = 0;
    LaunchServices::Localization::getLocalizedValuesForDisplay((_LSDatabase **)this, v8, (const LaunchServices::LocalizedString *)&v13[1], v13, v7);
    uint64_t v9 = (NSArray *)objc_claimAutoreleasedReturnValue();
    uint64_t v10 = [NSNumber numberWithBool:v13[1]];
    CSStore2::AttributedStringWriter::number(a4, &cfstr_DefaultOnly.isa, v10);

    size_t v11 = [NSNumber numberWithBool:v13[0]];
    CSStore2::AttributedStringWriter::number(a4, &cfstr_AllValuesEqual.isa, v11);

    CSStore2::AttributedStringWriter::array(a4, v9);
  }
  return v8 != 0;
}

void sub_182A76D94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void LaunchServices::CanonicalString::Create(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, unsigned char *a4@<X8>)
{
  int v15 = a1;
  id v7 = a2;
  id v8 = a3;
  *a4 = 0;
  a4[16] = 0;
  if (!v15)
  {
    size_t v11 = [MEMORY[0x1E4F28B00] currentHandler];
    size_t v12 = objc_msgSend(NSString, "stringWithUTF8String:", "static std::optional<CanonicalString> LaunchServices::CanonicalString::Create(_LSDatabase *__strong _Nonnull, NSString *__strong _Nonnull, NSDictionary<NSString *,NSString *> *__strong _Nonnull)");
    [v11 handleFailureInFunction:v12, @"LSLocalizedString.mm", 429, @"Invalid parameter not satisfying: %@", @"db != nil" file lineNumber description];

    if (v7) {
      goto LABEL_3;
    }
LABEL_13:
    uint64_t v13 = [MEMORY[0x1E4F28B00] currentHandler];
    unint64_t v14 = objc_msgSend(NSString, "stringWithUTF8String:", "static std::optional<CanonicalString> LaunchServices::CanonicalString::Create(_LSDatabase *__strong _Nonnull, NSString *__strong _Nonnull, NSDictionary<NSString *,NSString *> *__strong _Nonnull)");
    [v13 handleFailureInFunction:v14, @"LSLocalizedString.mm", 430, @"Invalid parameter not satisfying: %@", @"canonical != nil" file lineNumber description];

    goto LABEL_3;
  }
  if (!v7) {
    goto LABEL_13;
  }
LABEL_3:
  long long v16 = 0uLL;
  if (v8
    && [v8 count]
    && (LODWORD(v16) = _LSDatabaseCreateStringForCFString(v15, v7, 0), v16)
    && (unint64_t v9 = LaunchServices::LocalizedString::Create(v15, v8, (uint64_t)v7), (v10 & 0xFF00000000) != 0))
  {
    *(void *)((char *)&v16 + 4) = v9;
    HIDWORD(v16) = v10;
    *(_OWORD *)a4 = v16;
    a4[16] = 1;
  }
  else
  {
    LaunchServices::CanonicalString::dispose((LaunchServices::CanonicalString *)&v16, v15);
  }
}

void sub_182A76F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void LaunchServices::CanonicalString::dispose(LaunchServices::CanonicalString *this, _LSDatabase *a2)
{
  id v3 = a2;
  _CSStringRelease();
  LaunchServices::LocalizedString::dispose((LaunchServices::CanonicalString *)((char *)this + 4), v3);
}

void sub_182A7702C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::CanonicalString::Add(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (v5)
  {
    if (v6) {
      goto LABEL_3;
    }
LABEL_9:
    size_t v11 = [MEMORY[0x1E4F28B00] currentHandler];
    size_t v12 = objc_msgSend(NSString, "stringWithUTF8String:", "static _LSCanonicalStringID LaunchServices::CanonicalString::Add(_LSDatabase *__strong _Nonnull, NSString *__strong _Nonnull, NSDictionary<NSString *,NSString *> *__strong _Nonnull)");
    [v11 handleFailureInFunction:v12, @"LSLocalizedString.mm", 464, @"Invalid parameter not satisfying: %@", @"canonical != nil" file lineNumber description];

    if (v7) {
      goto LABEL_4;
    }
LABEL_10:
    uint64_t v8 = 0;
    goto LABEL_11;
  }
  unint64_t v9 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v10 = objc_msgSend(NSString, "stringWithUTF8String:", "static _LSCanonicalStringID LaunchServices::CanonicalString::Add(_LSDatabase *__strong _Nonnull, NSString *__strong _Nonnull, NSDictionary<NSString *,NSString *> *__strong _Nonnull)");
  [v9 handleFailureInFunction:v10, @"LSLocalizedString.mm", 463, @"Invalid parameter not satisfying: %@", @"db != nil" file lineNumber description];

  if (!v6) {
    goto LABEL_9;
  }
LABEL_3:
  if (!v7) {
    goto LABEL_10;
  }
LABEL_4:
  if (![v7 count]) {
    goto LABEL_10;
  }
  LaunchServices::CanonicalString::Create(v5, v6, v7, &v15);
  if (!v16) {
    goto LABEL_10;
  }
  long long v14 = v15;
  uint64_t v8 = CSStoreAllocUnitWithData();
  if (!v8) {
    LaunchServices::CanonicalString::dispose((LaunchServices::CanonicalString *)&v14, v5);
  }
LABEL_11:

  return v8;
}

void sub_182A771FC(_Unwind_Exception *a1)
{
  id v6 = v4;

  _Unwind_Resume(a1);
}

uint64_t LaunchServices::CanonicalString::Get(LaunchServices::CanonicalString *this, _LSDatabase *a2)
{
  uint64_t v2 = this;
  if (!v2)
  {
    id v5 = [MEMORY[0x1E4F28B00] currentHandler];
    id v6 = objc_msgSend(NSString, "stringWithUTF8String:", "static const CanonicalString *LaunchServices::CanonicalString::Get(_LSDatabase *__strong _Nonnull, _LSCanonicalStringID)");
    [v5 handleFailureInFunction:v6, @"LSLocalizedString.mm", 495, @"Invalid parameter not satisfying: %@", @"db != nil" file lineNumber description];
  }
  uint64_t Unit = CSStoreGetUnit();

  return Unit;
}

void sub_182A77320(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::CanonicalString::Find(LaunchServices::CanonicalString *this, _LSDatabase *a2, NSString *a3)
{
  uint64_t v4 = this;
  id v5 = a2;
  uint64_t v8 = 0;
  unint64_t v9 = &v8;
  uint64_t v10 = 0x2020000000;
  uint64_t v11 = 0;
  if (_LSDatabaseGetStringForCFString(v4, (const __CFString *)v5, 0)) {
    _CSStoreEnumerateUnits();
  }
  uint64_t v6 = v9[3];
  _Block_object_dispose(&v8, 8);

  return v6;
}

void sub_182A77454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t ___ZN14LaunchServices15CanonicalString4FindEP11_LSDatabaseP8NSString_block_invoke(uint64_t result, uint64_t a2, _DWORD *a3, uint64_t a4, unsigned char *a5)
{
  if (*a3 == *(_DWORD *)(result + 40))
  {
    *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a3;
    *a5 = 1;
  }
  return result;
}

uint64_t LaunchServices::CanonicalString::getLocalizedString(LaunchServices::CanonicalString *this)
{
  return (uint64_t)this + 4;
}

void LaunchServices::CanonicalString::GetVisualizationFunctions(id (**a1)(LaunchServices::CanonicalString **this, LSContext *a2, _LSDatabase *a3)@<X8>)
{
  *a1 = LaunchServices::Localization::getSummaryOfCanonicalString;
  a1[1] = (id (*)(LaunchServices::CanonicalString **, LSContext *, _LSDatabase *))LaunchServices::Localization::displayCanonicalString;
  a1[2] = 0;
}

id LaunchServices::Localization::getSummaryOfCanonicalString(LaunchServices::CanonicalString **this, LSContext *a2, _LSDatabase *a3)
{
  id v3 = (void *)LaunchServices::CanonicalString::Get(*this, a3);
  if (v3) {
    id v3 = (void *)_CSStringCopyCFString();
  }

  return v3;
}

BOOL LaunchServices::Localization::displayCanonicalString(LaunchServices::CanonicalString **this, LSContext *a2, _LSDatabase *a3, CSStore2::AttributedStringWriter *a4, LaunchServices::DumpWriter *a5)
{
  uint64_t v7 = LaunchServices::CanonicalString::Get(*this, a3);
  if (v7)
  {
    uint64_t v8 = (NSString *)_CSStringCopyCFString();
    CSStore2::AttributedStringWriter::string(a4, &cfstr_Canonical.isa, v8);
    LaunchServices::Localization::getLocalizedValuesForDisplay((_LSDatabase **)this, (LSContext *)(v7 + 4), 0, 0, v9);
    uint64_t v10 = (NSArray *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::array(a4, &cfstr_Localized.isa, v10);
  }
  return v7 != 0;
}

void sub_182A775D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id LaunchServices::Localization::getLocalizedValuesForDisplay(_LSDatabase **this, LSContext *a2, const LaunchServices::LocalizedString *a3, BOOL *a4, BOOL *a5)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  id v35 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  uint64_t v9 = MEMORY[0x18530F680]();
  +[_LSStringLocalizer missingLocalizationPlaceholder];
  context = (void *)v9;
  BOOL v32 = this;
  unint64_t v36 = (NSString *)objc_claimAutoreleasedReturnValue();
  uint64_t v10 = LaunchServices::LocalizedString::getAllUnsafeLocalizations((LaunchServices::LocalizedString *)a2, *this, v36, (BOOL *)a3, a4);
  uint64_t v11 = v10;
  if (!v10) {
    goto LABEL_34;
  }
  objc_msgSend(v10, "allValues", v9);
  obuint64_t j = (id)objc_claimAutoreleasedReturnValue();
  size_t v12 = (void *)[objc_alloc(MEMORY[0x1E4F28BD0]) initWithArray:obj];
  uint64_t v13 = v12;
  if (v12)
  {
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    id v14 = v12;
    uint64_t v15 = [v14 countByEnumeratingWithState:&v43 objects:&v47 count:16];
    if (v15)
    {
      uint64_t v16 = 0;
      long long v17 = 0;
      uint64_t v18 = *(void *)v44;
      do
      {
        for (uint64_t i = 0; i != v15; ++i)
        {
          if (*(void *)v44 != v18) {
            objc_enumerationMutation(v14);
          }
          uint64_t v20 = *(void **)(*((void *)&v43 + 1) + 8 * i);
          if ([v14 countForObject:v20] == 1)
          {
            id v21 = v20;

            ++v16;
            long long v17 = v21;
          }
        }
        uint64_t v15 = [v14 countByEnumeratingWithState:&v43 objects:&v47 count:16];
      }
      while (v15);

      if (v16 == 1 && [v14 count] != 1) {
        goto LABEL_18;
      }
    }
    else
    {

      long long v17 = 0;
    }
  }
  long long v17 = 0;
LABEL_18:

  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  uint64_t v22 = [v11 allKeys];
  id obja = [v22 sortedArrayUsingSelector:sel_caseInsensitiveCompare_];

  uint64_t v23 = [obja countByEnumeratingWithState:&v39 objects:v54 count:16];
  if (v23)
  {
    uint64_t v24 = *(void *)v40;
    do
    {
      for (uint64_t j = 0; j != v23; ++j)
      {
        if (*(void *)v40 != v24) {
          objc_enumerationMutation(obja);
        }
        id v26 = *(void **)(*((void *)&v39 + 1) + 8 * j);
        uint64_t v27 = [v11 objectForKeyedSubscript:v26];
        int64x2_t v28 = v27;
        if (v27)
        {
          if ([(NSString *)v27 isEqual:v17])
          {
            int v29 = (NSMutableAttributedString *)objc_alloc_init(MEMORY[0x1E4F28E48]);
            uint64_t v47 = 0;
            long long v48 = &v47;
            uint64_t v49 = 0x13812000000;
            long long v50 = __Block_byref_object_copy__44;
            unint64_t v51 = __Block_byref_object_dispose__45;
            uint64_t v52 = 256;
            LaunchServices::DumpWriter::DumpWriter((LaunchServices::DumpWriter *)v53, *v32, v29);
            CSStore2::AttributedStringWriter::setInsertsNewlines((CSStore2::AttributedStringWriter *)(v48 + 6));
            v37 = v28;
            v38 = v36;
            CSStore2::AttributedStringWriter::withTextAndBackgroundColor();
            [v35 addObject:v29];

            _Block_object_dispose(&v47, 8);
            LaunchServices::DumpWriter::~DumpWriter(v53);
          }
          else
          {
            int v29 = (NSMutableAttributedString *)objc_msgSend(objc_alloc(MEMORY[0x1E4F28E78]), "initWithCapacity:", objc_msgSend(v26, "length") + -[NSString length](v28, "length") + 7);
            [(NSMutableAttributedString *)v29 appendString:@"\""];
            [(NSMutableAttributedString *)v29 appendString:v26];
            if (v28 == v36)
            {
              [(NSMutableAttributedString *)v29 appendString:@"\" = ?"];
            }
            else
            {
              [(NSMutableAttributedString *)v29 appendString:@"\" = \""];
              [(NSMutableAttributedString *)v29 appendString:v28];
              [(NSMutableAttributedString *)v29 appendString:@"\""];
            }
            [v35 addObject:v29];
          }
        }
      }
      uint64_t v23 = [obja countByEnumeratingWithState:&v39 objects:v54 count:16];
    }
    while (v23);
  }

LABEL_34:

  return v35;
}

void sub_182A77B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

id __Block_byref_object_copy__44(uint64_t a1, uint64_t a2)
{
  CSStore2::AttributedStringWriter::AttributedStringWriter((CSStore2::AttributedStringWriter *)(a1 + 48), (const CSStore2::AttributedStringWriter *)(a2 + 48));
  *(void *)(a1 + 48) = &unk_1ECB17698;
  id result = *(id *)(a2 + 304);
  *(void *)(a1 + 304) = result;
  return result;
}

uint64_t ___ZN14LaunchServices12LocalizationL28getLocalizedValuesForDisplayEP9LSContextPKNS_15LocalizedStringEPbS6__block_invoke(void *a1)
{
  uint64_t v1 = a1[4];
  uint64_t v2 = a1[5];
  uint64_t v3 = a1[6];
  uint64_t v4 = (CSStore2::AttributedStringWriter *)(*(void *)(a1[7] + 8) + 48);
  if (v1 == v2) {
    return CSStore2::AttributedStringWriter::format(v4, 0, &stru_1ECB27590.isa, v3);
  }
  else {
    return CSStore2::AttributedStringWriter::format(v4, 0, &stru_1ECB275B0.isa, v3, v1);
  }
}

void sub_182A77D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  uint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)_LSEligibilityListenerNotificationToken;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void LaunchServices::EligibilityCache::removeEligibilityChangedListener(os_unfair_lock_s *this, objc_object *a2)
{
  uint64_t v3 = a2;
  os_unfair_lock_lock(this);

  uint64_t v4 = v3;
  std::__tree<std::__value_type<unsigned long,void({block_pointer} {__strong})(void)>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void({block_pointer} {__strong})(void)>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void({block_pointer} {__strong})(void)>>>::__erase_unique<unsigned long>((uint64_t)&this[8], (unint64_t *)&v4);
  os_unfair_lock_unlock(this);
}

void sub_182A77E14(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t _LSServer_AcquiesceToDeputizationForDomain(unint64_t a1)
{
  return (a1 < 0x2B) & (0x60000000050uLL >> a1);
}

id LaunchServices::EligibilityCache::getNotifyStateQueue(LaunchServices::EligibilityCache *this)
{
  if (LaunchServices::EligibilityCache::getNotifyStateQueue(void)::onceToken != -1) {
    dispatch_once(&LaunchServices::EligibilityCache::getNotifyStateQueue(void)::onceToken, &__block_literal_global_48);
  }
  uint64_t v1 = (void *)LaunchServices::EligibilityCache::getNotifyStateQueue(void)::result;

  return v1;
}

void ___ZN14LaunchServices16EligibilityCache19getNotifyStateQueueEv_block_invoke()
{
  uint64_t v2 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v0 = dispatch_queue_create("com.apple.launchservices.eligibilitycache", v2);
  uint64_t v1 = (void *)LaunchServices::EligibilityCache::getNotifyStateQueue(void)::result;
  LaunchServices::EligibilityCache::getNotifyStateQueue(void)::id result = (uint64_t)v0;
}

id LaunchServices::EligibilityCache::getCallbackQueue(LaunchServices::EligibilityCache *this)
{
  if (LaunchServices::EligibilityCache::getCallbackQueue(void)::onceToken != -1) {
    dispatch_once(&LaunchServices::EligibilityCache::getCallbackQueue(void)::onceToken, &__block_literal_global_10);
  }
  uint64_t v1 = (void *)LaunchServices::EligibilityCache::getCallbackQueue(void)::result;

  return v1;
}

void ___ZN14LaunchServices16EligibilityCache16getCallbackQueueEv_block_invoke()
{
  uint64_t v2 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v0 = dispatch_queue_create("com.apple.launchservices.eligibilitycache.callbacks", v2);
  uint64_t v1 = (void *)LaunchServices::EligibilityCache::getCallbackQueue(void)::result;
  LaunchServices::EligibilityCache::getCallbackQueue(void)::id result = (uint64_t)v0;
}

void LaunchServices::EligibilityCache::ensureNotificationListener(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 80))
  {
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    v6[2] = ___ZN14LaunchServices16EligibilityCache26ensureNotificationListenerERKNSt3__110lock_guardINS_17unfair_lock_mutexEEE_block_invoke;
    v6[3] = &__block_descriptor_48_e5_v8__0l;
    uint64_t v2 = a1 + 64;
    v6[4] = a1;
    v6[5] = a1;
    uint64_t v3 = (void *)MEMORY[0x18530F950](v6);
    std::__optional_destruct_base<LaunchServices::EligibilityCache::NotifyState,false>::reset[abi:nn180100](v2);
    LaunchServices::EligibilityCache::NotifyState::NotifyState(v2, v3);
    *(unsigned char *)(a1 + 80) = 1;

    uint64_t v4 = _LSDefaultLog();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v5 = 0;
      _os_log_impl(&dword_182959000, v4, OS_LOG_TYPE_DEFAULT, "registered eligibility notification listener", v5, 2u);
    }
  }
}

void sub_182A780D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN14LaunchServices16EligibilityCache26ensureNotificationListenerERKNSt3__110lock_guardINS_17unfair_lock_mutexEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = _LSDefaultLog();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)LSVersionNumber buf = 0;
    _os_log_impl(&dword_182959000, v3, OS_LOG_TYPE_DEFAULT, "eligibility changed for cache", buf, 2u);
  }

  uint64_t v4 = *(os_unfair_lock_s **)(a1 + 40);
  os_unfair_lock_lock(v4);
  uint64_t v6 = *(void **)(v2 + 16);
  id v5 = (void *)(v2 + 16);
  std::__tree<std::__value_type<os_eligibility_domain_t,os_eligibility_answer_t>,std::__map_value_compare<os_eligibility_domain_t,std::__value_type<os_eligibility_domain_t,os_eligibility_answer_t>,std::less<os_eligibility_domain_t>,true>,std::allocator<std::__value_type<os_eligibility_domain_t,os_eligibility_answer_t>>>::destroy((uint64_t)(v5 - 1), v6);
  *(v5 - 1) = v5;
  *id v5 = 0;
  v5[1] = 0;
  *(void *)LSVersionNumber buf = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v8 = (void *)v5[2];
  if (v8 != v5 + 3)
  {
    do
    {
      uint64_t v7 = (LaunchServices::EligibilityCache *)std::vector<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>>::push_back[abi:nn180100]((char **)buf, v8 + 5);
      uint64_t v9 = (void *)v8[1];
      if (v9)
      {
        do
        {
          uint64_t v10 = v9;
          uint64_t v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v10 = (void *)v8[2];
          BOOL v11 = *v10 == (void)v8;
          uint64_t v8 = v10;
        }
        while (!v11);
      }
      uint64_t v8 = v10;
    }
    while (v10 != v5 + 3);
  }
  size_t v12 = LaunchServices::EligibilityCache::getCallbackQueue(v7);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3321888768;
  block[2] = ___ZN14LaunchServices16EligibilityCache26ensureNotificationListenerERKNSt3__110lock_guardINS_17unfair_lock_mutexEEE_block_invoke_12;
  block[3] = &__block_descriptor_56_ea8_32c70_ZTSNSt3__16vectorIU8__strongU13block_pointerFvvENS_9allocatorIS3_EEEE_e5_v8__0l;
  memset(v14, 0, sizeof(v14));
  std::vector<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>>::__init_with_size[abi:nn180100]<void({block_pointer} {__strong}*)(void),void({block_pointer} {__strong}*)(void)>((char *)v14, *(uint64_t **)buf, v16, ((uint64_t)v16 - *(void *)buf) >> 3);
  dispatch_async(v12, block);

  uint64_t v18 = (uint8_t *)v14;
  std::vector<LSApplicationRecord * {__strong}>::__destroy_vector::operator()[abi:nn180100]((void ***)&v18);
  uint64_t v18 = buf;
  std::vector<LSApplicationRecord * {__strong}>::__destroy_vector::operator()[abi:nn180100]((void ***)&v18);
  os_unfair_lock_unlock(v4);
}

void sub_182A78278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  *(void *)(v19 - 40) = &a17;
  std::vector<LSApplicationRecord * {__strong}>::__destroy_vector::operator()[abi:nn180100]((void ***)(v19 - 40));
  os_unfair_lock_unlock(v17);
  _Unwind_Resume(a1);
}

uint64_t std::vector<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>>::push_back[abi:nn180100](char **a1, void *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(uint64_t **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((char *)v7 - *a1) >> 3;
    if ((unint64_t)(v10 + 1) >> 61) {
      abort();
    }
    uint64_t v11 = v5 - (void)*a1;
    uint64_t v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v25 = v4;
    if (v13) {
      id v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<os_eligibility_answer_t>>(v4, v13);
    }
    else {
      id v14 = 0;
    }
    uint64_t v15 = &v14[8 * v10];
    uint64_t v16 = &v14[8 * v13];
    uint64_t v24 = v16;
    *(void *)uint64_t v15 = MEMORY[0x18530F950](*a2);
    uint64_t v9 = v15 + 8;
    v23.i64[1] = (uint64_t)(v15 + 8);
    uint64_t v18 = *a1;
    uint64_t v17 = a1[1];
    if (v17 == *a1)
    {
      int64x2_t v20 = vdupq_n_s64((unint64_t)v17);
    }
    else
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *(void *)uint64_t v17 = 0;
        *((void *)v15 - 1) = v19;
        v15 -= 8;
      }
      while (v17 != v18);
      int64x2_t v20 = *(int64x2_t *)a1;
      uint64_t v9 = (char *)v23.i64[1];
      uint64_t v16 = v24;
    }
    *a1 = v15;
    a1[1] = v9;
    int64x2_t v23 = v20;
    id v21 = a1[2];
    a1[2] = v16;
    uint64_t v24 = v21;
    uint64_t v22 = v20.i64[0];
    uint64_t result = std::__split_buffer<LSApplicationRecord * {__strong}>::~__split_buffer((uint64_t)&v22);
  }
  else
  {
    uint64_t result = MEMORY[0x18530F950](*a2);
    *uint64_t v7 = result;
    uint64_t v9 = (char *)(v7 + 1);
  }
  a1[1] = v9;
  return result;
}

void ___ZN14LaunchServices16EligibilityCache26ensureNotificationListenerERKNSt3__110lock_guardINS_17unfair_lock_mutexEEE_block_invoke_12(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 40);
  while (v1 != v2)
  {
    uint64_t v3 = (void (**)(void))MEMORY[0x18530F950](*v1);
    v3[2]();

    ++v1;
  }
}

void sub_182A7841C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *__copy_helper_block_ea8_32c70_ZTSNSt3__16vectorIU8__strongU13block_pointerFvvENS_9allocatorIS3_EEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v2 = a1 + 32;
  *(void *)(v2 + 16) = 0;
  return std::vector<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>>::__init_with_size[abi:nn180100]<void({block_pointer} {__strong}*)(void),void({block_pointer} {__strong}*)(void)>((char *)v2, *(uint64_t **)(a2 + 32), *(uint64_t **)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3);
}

void __destroy_helper_block_ea8_32c70_ZTSNSt3__16vectorIU8__strongU13block_pointerFvvENS_9allocatorIS3_EEEE(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 32);
  std::vector<LSApplicationRecord * {__strong}>::__destroy_vector::operator()[abi:nn180100](&v1);
}

BOOL LaunchServices::EligibilityCache::refreshAnswerForDomain(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  LaunchServices::EligibilityCache::ensureNotificationListener(a1);
  uint64_t v7 = *(void *)(a1 + 56);
  id v15 = 0;
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, id *))(*(void *)v7 + 16))(v7, a3, &v15);
  char v10 = v9;
  id v11 = v15;
  if (v10)
  {
    *(void *)&long long v14 = a3;
    *((void *)&v14 + 1) = v8;
    std::__tree<std::__value_type<os_eligibility_domain_t,os_eligibility_answer_t>,std::__map_value_compare<os_eligibility_domain_t,std::__value_type<os_eligibility_domain_t,os_eligibility_answer_t>,std::less<os_eligibility_domain_t>,true>,std::allocator<std::__value_type<os_eligibility_domain_t,os_eligibility_answer_t>>>::__emplace_unique_key_args<os_eligibility_domain_t,std::pair<os_eligibility_domain_t,os_eligibility_answer_t>>((uint64_t **)(a1 + 8), (unint64_t *)&v14, &v14);
  }
  else
  {
    uint64_t v12 = _LSDefaultLog();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      LaunchServices::EligibilityCache::refreshAnswerForDomain((uint64_t)v11, a3, v12);
    }

    if (a4) {
      *a4 = v11;
    }
  }

  return v10 != 0;
}

void sub_182A78570(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL LaunchServices::EligibilityCache::getEligibilityGatedBrowsersCanBind(LaunchServices::EligibilityCache *this)
{
  id v8 = 0;
  unint64_t v1 = LaunchServices::EligibilityCache::cachedAnswerForDomain((uint64_t)this, 4uLL, &v8);
  char v3 = v2;
  id v4 = v8;
  if (v3)
  {
    BOOL v5 = interpretEligibilityAnswerForBrowserDomain(v1);
  }
  else
  {
    unint64_t v6 = _LSDefaultLog();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      LaunchServices::EligibilityCache::getEligibilityGatedBrowsersCanBind((uint64_t)v4, v6);
    }

    BOOL v5 = 0;
  }

  return v5;
}

void sub_182A78628(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t LaunchServices::EligibilityCache::cachedAnswerForDomain(uint64_t a1, unint64_t a2, void *a3)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  id v8 = (void *)(a1 + 16);
  uint64_t v7 = *(void **)(a1 + 16);
  if (!v7) {
    goto LABEL_12;
  }
  char v9 = (void *)(a1 + 16);
  do
  {
    unint64_t v10 = v7[4];
    BOOL v11 = v10 >= a2;
    if (v10 >= a2) {
      uint64_t v12 = v7;
    }
    else {
      uint64_t v12 = v7 + 1;
    }
    if (v11) {
      char v9 = v7;
    }
    uint64_t v7 = (void *)*v12;
  }
  while (*v12);
  if (v9 != v8 && v9[4] <= a2)
  {
    uint64_t v23 = v9[5];
    unint64_t v24 = v23 & 0xFFFFFFFFFFFFFF00;
  }
  else
  {
LABEL_12:
    id v26 = 0;
    BOOL refreshed = LaunchServices::EligibilityCache::refreshAnswerForDomain(a1, v6, a2, &v26);
    id v14 = v26;
    id v15 = v14;
    if (refreshed)
    {
      uint64_t v16 = (void *)*v8;
      if (!*v8) {
        goto LABEL_24;
      }
      uint64_t v17 = (void *)(a1 + 16);
      do
      {
        unint64_t v18 = v16[4];
        BOOL v19 = v18 >= a2;
        if (v18 >= a2) {
          int64x2_t v20 = v16;
        }
        else {
          int64x2_t v20 = v16 + 1;
        }
        if (v19) {
          uint64_t v17 = v16;
        }
        uint64_t v16 = (void *)*v20;
      }
      while (*v20);
      if (v17 == v8 || v17[4] > a2)
      {
LABEL_24:
        id v21 = [MEMORY[0x1E4F28B00] currentHandler];
        uint64_t v22 = objc_msgSend(NSString, "stringWithUTF8String:", "std::optional<os_eligibility_answer_t> LaunchServices::EligibilityCache::cachedAnswerForDomain(os_eligibility_domain_t, NSError *__autoreleasing * _Nullable)");
        objc_msgSend(v21, "handleFailureInFunction:file:lineNumber:description:", v22, @"LSEligibility.mm", 225, @"Didn't find domain %llu in domain cache after refreshing successfully", a2);

        uint64_t v17 = (void *)(a1 + 16);
      }
      uint64_t v23 = v17[5];
      unint64_t v24 = v23 & 0xFFFFFFFFFFFFFF00;
    }
    else
    {
      LOBYTE(v23) = 0;
      unint64_t v24 = 0;
      if (a3) {
        *a3 = v14;
      }
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
  return v24 & 0xFFFFFFFFFFFFFF00 | v23;
}

void sub_182A787E8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

BOOL interpretEligibilityAnswerForBrowserDomain(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (a1 != 2 && a1 != 4)
  {
    char v2 = _LSDefaultLog();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315394;
      BOOL v5 = "interpretEligibilityAnswerForBrowserDomain";
      __int16 v6 = 1024;
      int v7 = a1;
      _os_log_impl(&dword_182959000, v2, OS_LOG_TYPE_DEFAULT, "%s: currently not eligible for gated browser (answer %d)", (uint8_t *)&v4, 0x12u);
    }
  }
  return a1 == 4;
}

BOOL LaunchServices::EligibilityCache::getEligibilityGatedBrowserEngineEmbeddersCanBind(LaunchServices::EligibilityCache *this)
{
  id v8 = 0;
  unint64_t v1 = LaunchServices::EligibilityCache::cachedAnswerForDomain((uint64_t)this, 6uLL, &v8);
  char v3 = v2;
  id v4 = v8;
  if (v3)
  {
    BOOL v5 = interpretEligibilityAnswerForBrowserDomain(v1);
  }
  else
  {
    __int16 v6 = _LSDefaultLog();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      LaunchServices::EligibilityCache::getEligibilityGatedBrowserEngineEmbeddersCanBind((uint64_t)v4, v6);
    }

    BOOL v5 = 0;
  }

  return v5;
}

void sub_182A78994(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_LSEligibilityListenerNotificationToken *LaunchServices::EligibilityCache::addEligibilityChangedListener(uint64_t a1, void *a2)
{
  id v3 = a2;
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  LaunchServices::EligibilityCache::ensureNotificationListener(a1);
  id v4 = [[_LSEligibilityListenerNotificationToken alloc] initWithEligibilityCache:a1];
  __int16 v6 = v4;
  id v7 = (id)[v3 copy];
  std::__tree<std::__value_type<unsigned long,void({block_pointer} {__strong})(void)>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void({block_pointer} {__strong})(void)>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void({block_pointer} {__strong})(void)>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long,objc_object * {__strong}>>((uint64_t **)(a1 + 32), (unint64_t *)&v6, (uint64_t *)&v6);

  os_unfair_lock_unlock((os_unfair_lock_t)a1);

  return v4;
}

void sub_182A78A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  os_unfair_lock_unlock(v11);
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::EligibilityCache::shared(LaunchServices::EligibilityCache *this)
{
  if (LaunchServices::EligibilityCache::shared(void)::onceToken != -1) {
    dispatch_once(&LaunchServices::EligibilityCache::shared(void)::onceToken, &__block_literal_global_22_0);
  }
  return LaunchServices::EligibilityCache::shared(void)::result;
}

void ___ZN14LaunchServices16EligibilityCache6sharedEv_block_invoke()
{
  if (([(id)__LSDefaultsGetSharedInstance() isServer] & 1) == 0
    && ([(id)__LSDefaultsGetSharedInstance() hasServer] & 1) != 0)
  {
    operator new();
  }
  operator new();
}

void sub_182A78BB8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<os_eligibility_domain_t,os_eligibility_answer_t>,std::__map_value_compare<os_eligibility_domain_t,std::__value_type<os_eligibility_domain_t,os_eligibility_answer_t>,std::less<os_eligibility_domain_t>,true>,std::allocator<std::__value_type<os_eligibility_domain_t,os_eligibility_answer_t>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<os_eligibility_domain_t,os_eligibility_answer_t>,std::__map_value_compare<os_eligibility_domain_t,std::__value_type<os_eligibility_domain_t,os_eligibility_answer_t>,std::less<os_eligibility_domain_t>,true>,std::allocator<std::__value_type<os_eligibility_domain_t,os_eligibility_answer_t>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<os_eligibility_domain_t,os_eligibility_answer_t>,std::__map_value_compare<os_eligibility_domain_t,std::__value_type<os_eligibility_domain_t,os_eligibility_answer_t>,std::less<os_eligibility_domain_t>,true>,std::allocator<std::__value_type<os_eligibility_domain_t,os_eligibility_answer_t>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

char *std::vector<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>>::__init_with_size[abi:nn180100]<void({block_pointer} {__strong}*)(void),void({block_pointer} {__strong}*)(void)>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    __int16 v6 = result;
    uint64_t result = std::vector<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>>::__vallocate[abi:nn180100](result, a4);
    id v7 = (char **)*((void *)v6 + 1);
    while (a2 != a3)
    {
      uint64_t v8 = *a2++;
      uint64_t result = (char *)MEMORY[0x18530F950](v8);
      *v7++ = result;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

char *std::vector<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>>::__vallocate[abi:nn180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    abort();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<os_eligibility_answer_t>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void std::__optional_destruct_base<LaunchServices::EligibilityCache::NotifyState,false>::reset[abi:nn180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    LaunchServices::notifyd::NotifyToken::~NotifyToken((LaunchServices::notifyd::NotifyToken *)(a1 + 8));

    *(unsigned char *)(a1 + 16) = 0;
  }
}

uint64_t LaunchServices::EligibilityCache::NotifyState::NotifyState(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = LaunchServices::EligibilityCache::getNotifyStateQueue(v3);
  *(void *)a1 = v4;
  LaunchServices::notifyd::NotifyToken::RegisterDispatch(@"com.apple.os-eligibility-domain.change", v4, v3, (unsigned int *)(a1 + 8));

  return a1;
}

void sub_182A78D78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<os_eligibility_domain_t,os_eligibility_answer_t>,std::__map_value_compare<os_eligibility_domain_t,std::__value_type<os_eligibility_domain_t,os_eligibility_answer_t>,std::less<os_eligibility_domain_t>,true>,std::allocator<std::__value_type<os_eligibility_domain_t,os_eligibility_answer_t>>>::__emplace_unique_key_args<os_eligibility_domain_t,std::pair<os_eligibility_domain_t,os_eligibility_answer_t>>(uint64_t **a1, unint64_t *a2, _OWORD *a3)
{
  __int16 v6 = a1 + 1;
  BOOL v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        BOOL v5 = *v8;
        __int16 v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      BOOL v5 = v8[1];
      if (!v5)
      {
        __int16 v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    unint64_t v10 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v10 + 2) = *a3;
    std::__tree<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::__map_value_compare<os_eligibility_domain_t,std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::less<os_eligibility_domain_t>,true>,std::allocator<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t *std::__tree<std::__value_type<unsigned long,void({block_pointer} {__strong})(void)>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void({block_pointer} {__strong})(void)>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void({block_pointer} {__strong})(void)>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long,objc_object * {__strong}>>(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  __int16 v6 = a1 + 1;
  BOOL v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        BOOL v5 = *v8;
        __int16 v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      BOOL v5 = v8[1];
      if (!v5)
      {
        __int16 v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    unint64_t v10 = (uint64_t *)operator new(0x30uLL);
    uint64_t v11 = *a3;
    uint64_t v12 = a3[1];
    a3[1] = 0;
    v10[4] = v11;
    v10[5] = v12;
    std::__tree<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::__map_value_compare<os_eligibility_domain_t,std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::less<os_eligibility_domain_t>,true>,std::allocator<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t std::__tree<std::__value_type<unsigned long,void({block_pointer} {__strong})(void)>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void({block_pointer} {__strong})(void)>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void({block_pointer} {__strong})(void)>>>::__erase_unique<unsigned long>(uint64_t a1, unint64_t *a2)
{
  char v2 = *(void **)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    unint64_t v5 = v2[4];
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      unint64_t v7 = v2;
    }
    else {
      unint64_t v7 = v2 + 1;
    }
    if (v6) {
      uint64_t v4 = (uint64_t)v2;
    }
    char v2 = (void *)*v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(void *)(v4 + 32)) {
    return 0;
  }
  std::__tree<std::__value_type<unsigned long,void({block_pointer} {__strong})(void)>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void({block_pointer} {__strong})(void)>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void({block_pointer} {__strong})(void)>>>::erase((uint64_t **)a1, v4);
  return 1;
}

uint64_t *std::__tree<std::__value_type<unsigned long,void({block_pointer} {__strong})(void)>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void({block_pointer} {__strong})(void)>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void({block_pointer} {__strong})(void)>>>::erase(uint64_t **a1, uint64_t a2)
{
  unint64_t v3 = std::__tree<std::__value_type<unsigned long,void({block_pointer} {__strong})(void)>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void({block_pointer} {__strong})(void)>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void({block_pointer} {__strong})(void)>>>::__remove_node_pointer(a1, (uint64_t *)a2);

  operator delete((void *)a2);
  return v3;
}

uint64_t *std::__tree<std::__value_type<unsigned long,void({block_pointer} {__strong})(void)>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void({block_pointer} {__strong})(void)>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void({block_pointer} {__strong})(void)>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  char v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      unint64_t v3 = v2;
      char v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v4 = a2;
    do
    {
      unint64_t v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      uint64_t v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  BOOL v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

uint64_t *std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      unint64_t v3 = a2;
      goto LABEL_7;
    }
    do
    {
      unint64_t v3 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  BOOL v6 = (uint64_t **)v3[2];
  unint64_t v7 = *v6;
  if (*v6 == v3)
  {
    *BOOL v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      unint64_t v7 = 0;
      uint64_t result = (uint64_t *)v2;
    }
    else
    {
      unint64_t v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    *unint64_t v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 == v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      unint64_t v13 = *(uint64_t **)(v12 + 8);
      uint64_t v14 = *v13;
      *(void *)(v12 + 8) = *v13;
      if (v14) {
        *(void *)(v14 + 16) = v12;
      }
      BOOL v13[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
      uint64_t *v13 = v12;
      *(void *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7) {
        uint64_t result = v7;
      }
      unint64_t v7 = *(uint64_t **)(*v7 + 8);
    }
    id v15 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v15 + 24))
    {
      uint64_t v16 = (uint64_t *)v7[1];
      if (!v16) {
        goto LABEL_56;
      }
LABEL_55:
      if (*((unsigned char *)v16 + 24))
      {
LABEL_56:
        *((unsigned char *)v15 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v22 = v15[1];
        *unint64_t v7 = v22;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        v15[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        uint64_t v16 = v7;
      }
      else
      {
        id v15 = v7;
      }
      uint64_t v23 = v15[2];
      *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v16 + 24) = 1;
      unint64_t v24 = *(uint64_t **)(v23 + 8);
      uint64_t v25 = *v24;
      *(void *)(v23 + 8) = *v24;
      if (v25) {
        *(void *)(v25 + 16) = v23;
      }
      v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      uint64_t *v24 = v23;
      goto LABEL_72;
    }
    uint64_t v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_55;
    }
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      uint64_t v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
LABEL_49:
    unint64_t v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    uint64_t v18 = v7[1];
    *(void *)uint64_t v12 = v18;
    if (v18) {
      *(void *)(v18 + 16) = v12;
    }
    v7[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(void *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12) {
      uint64_t result = v7;
    }
    unint64_t v7 = *(uint64_t **)v12;
  }
  BOOL v19 = (void *)*v7;
  if (*v7 && !*((unsigned char *)v19 + 24)) {
    goto LABEL_68;
  }
  int64x2_t v20 = (uint64_t *)v7[1];
  if (!v20 || *((unsigned char *)v20 + 24))
  {
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  if (v19 && !*((unsigned char *)v19 + 24))
  {
LABEL_68:
    int64x2_t v20 = v7;
  }
  else
  {
    *((unsigned char *)v20 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v26 = *v20;
    v7[1] = *v20;
    if (v26) {
      *(void *)(v26 + 16) = v7;
    }
    v20[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
    uint64_t *v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    BOOL v19 = v7;
  }
  uint64_t v23 = v20[2];
  *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v19 + 24) = 1;
  unint64_t v24 = *(uint64_t **)v23;
  uint64_t v27 = *(void *)(*(void *)v23 + 8);
  *(void *)uint64_t v23 = v27;
  if (v27) {
    *(void *)(v27 + 16) = v23;
  }
  v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

void LaunchServices::DomainEvaluators::ServerDomainEvaluator::~ServerDomainEvaluator(LaunchServices::DomainEvaluators::ServerDomainEvaluator *this)
{
}

uint64_t LaunchServices::DomainEvaluators::ServerDomainEvaluator::eligibilityForDomain(uint64_t a1, uint64_t a2, void *a3)
{
  _LSAssertRunningInServer((uint64_t)"virtual std::optional<os_eligibility_answer_t> LaunchServices::ServerDomainEvaluator"
                                    "::eligibilityForDomain(os_eligibility_domain_t, NSError *__autoreleasing *)");
  int domain_answer = os_eligibility_get_domain_answer();
  if (domain_answer && a3)
  {
    _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28798], domain_answer, (uint64_t)"eligibilityForDomain", 100, 0);
    *a3 = (id)objc_claimAutoreleasedReturnValue();
  }
  return 0;
}

uint64_t LaunchServices::DomainEvaluators::ClientDomainEvaluator::eligibilityForDomain(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v17 = 0;
  uint64_t v18 = &v17;
  uint64_t v19 = 0x4012000000;
  int64x2_t v20 = __Block_byref_object_copy__34;
  BOOL v21 = __Block_byref_object_dispose__34;
  uint64_t v22 = 0;
  char v23 = 0;
  char v24 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x3032000000;
  uint64_t v14 = __Block_byref_object_copy__27;
  id v15 = __Block_byref_object_dispose__28;
  id v16 = 0;
  v10[0] = (void (*)(void, void))MEMORY[0x1E4F143A8];
  v10[1] = (void (*)(void, void))3221225472;
  v10[2] = (void (*)(void, void))___ZN14LaunchServices16DomainEvaluators21ClientDomainEvaluator20eligibilityForDomainE23os_eligibility_domain_tPU15__autoreleasingP7NSError_block_invoke;
  v10[3] = (void (*)(void, void))&unk_1E522BA78;
  v10[4] = (void (*)(void, void))&v11;
  int v5 = +[_LSDService synchronousXPCProxyWithErrorHandler:]((uint64_t)_LSDReadService, v10);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = ___ZN14LaunchServices16DomainEvaluators21ClientDomainEvaluator20eligibilityForDomainE23os_eligibility_domain_tPU15__autoreleasingP7NSError_block_invoke_2;
  v9[3] = &unk_1E522FB38;
  v9[4] = &v17;
  v9[5] = &v11;
  [v5 getEligibilityAnswerForDomain:a2 withCompletionHandler:v9];

  BOOL v6 = v18;
  if (a3 && !*((unsigned char *)v18 + 56))
  {
    *a3 = (id) v12[5];
    BOOL v6 = v18;
  }
  uint64_t v7 = v6[6];
  _Block_object_dispose(&v11, 8);

  _Block_object_dispose(&v17, 8);
  return v7;
}

void sub_182A79644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose((const void *)(v27 - 128), 8);
  _Unwind_Resume(a1);
}

void ___ZN14LaunchServices16DomainEvaluators21ClientDomainEvaluator20eligibilityForDomainE23os_eligibility_domain_tPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
}

void ___ZN14LaunchServices16DomainEvaluators21ClientDomainEvaluator20eligibilityForDomainE23os_eligibility_domain_tPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  if (v10)
  {
    uint64_t v6 = [v10 unsignedLongLongValue];
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
    *(void *)(v7 + 48) = v6;
    *(unsigned char *)(v7 + 56) = 1;
  }
  uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v5;
}

void sub_182A79728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t timeWorkBlock(void *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = mach_absolute_time();
  v1[2](v1);

  return mach_absolute_time() - v2;
}

void sub_182A7A254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_182A7A2E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A7A37C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A7A424(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double ___ZL78_LSGetDefaultPreferredLocalizationsWithFallbackForImproperlyLocalizedProcessesv_block_invoke()
{
  dispatch_queue_t v0 = _LSDefaultLog();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR)) {
    ___ZL78_LSGetDefaultPreferredLocalizationsWithFallbackForImproperlyLocalizedProcessesv_block_invoke_cold_1(v0);
  }

  uint64_t v1 = _LSGetMachTimebase();
  double result = 1.0e10 / ((double)v1 / (double)HIDWORD(v1));
  _LSGetDefaultPreferredLocalizationsWithFallbackForImproperlyLocalizedProcesses(void)::maxCacheTimeAbsolute = (unint64_t)result;
  return result;
}

void ___ZL78_LSGetDefaultPreferredLocalizationsWithFallbackForImproperlyLocalizedProcessesv_block_invoke_43(uint64_t a1, void *a2, void *a3)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2);
  id v5 = (id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);

  objc_storeStrong(v5, a3);
}

void sub_182A7A6E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<objc_object * ()(objc_object *,NSError *)>::~__value_func[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void ___ZL33marketplacesPreferencesStatePlistv_block_invoke()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_182A7A7E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(objc_object *)>::~__value_func[abi:nn180100]((uint64_t *)va);

  MEMORY[0x18530EAF0](v2, 0x10A0C404E20B1D3);
  _Unwind_Resume(a1);
}

uint64_t validateMarketplacesPreferences(objc_object *a1)
{
  uint64_t v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v2 = [(objc_object *)v1 objectForKey:@"version"];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      unint64_t v3 = [(objc_object *)v1 objectForKey:@"preferredMarketplaces"];
      uint64_t v4 = objc_opt_class();
      uint64_t v5 = _LSIsArrayWithValuesOfClass(v3, v4);
    }
    else
    {
      uint64_t v5 = 0;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

void sub_182A7A8F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::LSStatePlist::LSStatePlist(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  std::__function::__value_func<BOOL ()(objc_object *)>::__value_func[abi:nn180100]((uint64_t)v8, a3);
  id v6 = v5;
  *(void *)a1 = v6;
  *(_DWORD *)(a1 + 8) = 0;
  if (v9)
  {
    if (v9 == v8)
    {
      *(void *)(a1 + 40) = a1 + 16;
      (*(void (**)(void *))(v8[0] + 24))(v8);
    }
    else
    {
      *(void *)(a1 + 40) = v9;
      uint64_t v9 = 0;
    }
  }
  else
  {
    *(void *)(a1 + 40) = 0;
  }
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 60) = 0;
  std::__function::__value_func<BOOL ()(objc_object *)>::~__value_func[abi:nn180100](v8);

  return a1;
}

uint64_t std::__function::__value_func<BOOL ()(objc_object *)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = v3;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_182A7AC9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSOpenLog()
{
  if (_LSOpenLog_once != -1) {
    dispatch_once(&_LSOpenLog_once, &__block_literal_global_28);
  }
  uint64_t v0 = (void *)_LSOpenLog_result;

  return v0;
}

id _LSRegistrationLog()
{
  if (_LSRegistrationLog_onceToken != -1) {
    dispatch_once(&_LSRegistrationLog_onceToken, &__block_literal_global_34);
  }
  uint64_t v0 = (void *)_LSRegistrationLog_log;

  return v0;
}

id _LSAppProtectionLog()
{
  if (_LSAppProtectionLog_once != -1) {
    dispatch_once(&_LSAppProtectionLog_once, &__block_literal_global_43);
  }
  uint64_t v0 = (void *)_LSAppProtectionLog_result;

  return v0;
}

id _LSPluginFaultLog()
{
  if (_LSPluginFaultLog_once != -1) {
    dispatch_once(&_LSPluginFaultLog_once, &__block_literal_global_49_0);
  }
  uint64_t v0 = (void *)_LSPluginFaultLog_result;

  return v0;
}

id loggableURL(void *a1)
{
  id v1 = a1;
  int v2 = [v1 isFileURL];
  uint64_t v3 = NSString;
  if (v2)
  {
    id v4 = v1;
    uint64_t v5 = [v4 fileSystemRepresentation];

    id v6 = [v3 stringWithUTF8String:v5];
  }
  else
  {
    uint64_t v7 = [v1 scheme];

    id v6 = [v3 stringWithFormat:@"%@:...", v7];
  }

  return v6;
}

id _LSGetInboxURLForBundleIdentifier(void *a1)
{
  id v1 = a1;
  int v2 = +[LSApplicationProxy applicationProxyForIdentifier:v1];
  uint64_t v3 = [v2 containerURL];

  if (v3)
  {
    id v4 = [v3 path];
    int v5 = [v4 isEqual:@"/var/mobile"];

    if (v5)
    {
      id v6 = [NSString stringWithFormat:@"Library/Application Support/Containers/%@/Documents/Inbox/", v1];
      uint64_t v7 = [v3 URLByAppendingPathComponent:v6 isDirectory:1];
    }
    else
    {
      uint64_t v7 = [v3 URLByAppendingPathComponent:@"Documents/Inbox/" isDirectory:1];
    }
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_182A7B41C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSCopyOrMoveFileResource(void *a1, void *a2, void *a3, void *a4, char a5, void *a6)
{
  id v11 = a1;
  id v12 = a2;
  id v13 = a3;
  id v14 = a4;
  id v15 = a6;
  _LSAssertRunningInServer((uint64_t)"void _LSCopyOrMoveFileResource(NSURL *__strong, NSFileHandle *__strong, NSString *__"
                                    "strong, NSURL *__strong, BOOL, void (^__strong)(NSURL *__strong, NSError *__strong))");
  if (!v15)
  {
    uint64_t v22 = [MEMORY[0x1E4F28B00] currentHandler];
    char v23 = objc_msgSend(NSString, "stringWithUTF8String:", "void _LSCopyOrMoveFileResource(NSURL *__strong, NSFileHandle *__strong, NSString *__strong, NSURL *__strong, BOOL, void (^__strong)(NSURL *__strong, NSError *__strong))");
    [v22 handleFailureInFunction:v23, @"LSMobileDataTransitSupport.mm", 371, @"Invalid parameter not satisfying: %@", @"completionHandler != nil" file lineNumber description];
  }
  MEMORY[0x185310450]();
  id v16 = (void *)MEMORY[0x1E4F29060];
  v24[0] = MEMORY[0x1E4F143A8];
  v24[1] = 3221225472;
  v24[2] = ___LSCopyOrMoveFileResource_block_invoke;
  v24[3] = &unk_1E522FCF8;
  id v17 = v11;
  id v25 = v17;
  char v30 = a5;
  id v18 = v12;
  id v26 = v18;
  id v19 = v14;
  id v27 = v19;
  id v20 = v13;
  id v28 = v20;
  id v21 = v15;
  id v29 = v21;
  [v16 detachNewThreadWithBlock:v24];
}

void sub_182A7B638(_Unwind_Exception *a1)
{
  uint64_t v8 = v3;
  uint64_t v9 = v2;
  uint64_t v10 = v1;

  _Unwind_Resume(a1);
}

void sub_182A7C11C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, void *a20,char a21,CFTypeRef cf)
{
  if (a21) {
  if (cf)
  }
    CFRelease(cf);
  _Unwind_Resume(a1);
}

void _LSCopierCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v8 = a5;
  [v8 setCallbackType:a2];
  if (a2 == 1) {
    goto LABEL_9;
  }
  if (a2 == 2)
  {
LABEL_8:
    a3 = 0;
LABEL_9:
    [v8 setDestURL:a3];
    a4 = 0;
    goto LABEL_10;
  }
  if (a2 != 3)
  {
    uint64_t v9 = _LSDefaultLog();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
      _LSCopierCallback(a2, v9);
    }

    goto LABEL_8;
  }
  [v8 setDestURL:0];
LABEL_10:
  [v8 setError:a4];
  Current = CFRunLoopGetCurrent();
  CFRunLoopStop(Current);
}

void sub_182A7C3C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void copyProvidedResourceToStagingContainerRegularFile(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  v24[1] = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v8 = a2;
  *a4 = 0;
  uint64_t v9 = +[LSOpenStagingDirectoryManager sharedServerInstance];
  uint64_t v10 = [v9 mainDataVolumeStagingURLWithError:a3];

  if (v10)
  {
    id v11 = [MEMORY[0x1E4F29128] UUID];
    id v12 = [v11 UUIDString];
    id v13 = [v10 URLByAppendingPathComponent:v12 isDirectory:1];

    id v14 = getFileProtectionValueForFileHandle(v8, a3);
    if (v14)
    {
      id v15 = [MEMORY[0x1E4F28CB8] defaultManager];
      uint64_t v23 = *MEMORY[0x1E4F1C590];
      v24[0] = v14;
      id v16 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v24 forKeys:&v23 count:1];
      int v17 = [v15 createDirectoryAtURL:v13 withIntermediateDirectories:0 attributes:v16 error:a3];

      if (v17)
      {
        id v18 = [v7 lastPathComponent];
        id v19 = [v13 URLByAppendingPathComponent:v18];

        id v20 = v19;
        int v21 = open((const char *)[v20 fileSystemRepresentation], 16777729, 420);
        if ((v21 & 0x80000000) == 0 && !fcopyfile([v8 fileDescriptor], v21, 0, 0xFu)) {
          operator new();
        }
        if (a3)
        {
          uint64_t v22 = __error();
          _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28798], *v22, (uint64_t)"copyProvidedResourceToStagingContainerRegularFile", 277, 0);
          *a3 = (id)objc_claimAutoreleasedReturnValue();
        }
        if ((v21 & 0x80000000) == 0) {
          close(v21);
        }
      }
    }
  }
}

void sub_182A7C690(_Unwind_Exception *a1)
{
  *uint64_t v3 = 0;
  _Unwind_Resume(a1);
}

id getFileProtectionValueForFileHandle(void *a1, void *a2)
{
  id v3 = a1;
  v9[1] = 0;
  v9[2] = 0;
  v9[0] = 0x4000000000000005;
  if (fgetattrlist([v3 fileDescriptor], v9, &v8, 8uLL, 1u))
  {
    if (a2)
    {
      id v4 = __error();
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28798], *v4, (uint64_t)"getFileProtectionValueForFileHandle", 140, 0);
      id v5 = 0;
      *a2 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      id v5 = 0;
    }
  }
  else
  {
    switch(HIDWORD(v8))
    {
      case 1:
        id v6 = (id *)MEMORY[0x1E4F1C570];
        break;
      case 2:
        id v6 = (id *)MEMORY[0x1E4F1C578];
        break;
      case 3:
        id v6 = (id *)MEMORY[0x1E4F1C580];
        break;
      default:
        id v6 = (id *)MEMORY[0x1E4F1C598];
        break;
    }
    id v5 = *v6;
  }

  return v5;
}

void sub_182A7C898(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void anonymous namespace'::StagedFileResource::~StagedFileResource(_anonymous_namespace_::StagedFileResource *this)
{
  *(void *)this = &unk_1ECB17668;
  id v3 = (uint64_t *)((char *)this + 16);
  int v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    id v4 = [MEMORY[0x1E4F28CB8] defaultManager];
    uint64_t v5 = *v3;
    id v9 = 0;
    char v6 = [v4 removeItemAtURL:v5 error:&v9];
    id v7 = v9;

    if ((v6 & 1) == 0)
    {
      uint64_t v8 = _LSDefaultLog();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
    }
      }
    int v2 = (void *)*v3;
  }
}

{
  uint64_t vars8;

  JUMPOUT(0x18530EAF0);
}

void sub_182A7C98C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void anonymous namespace'::StagedFileResource::sandboxExtensionForTransfer(uint64_t a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  [*(id *)(a1 + 16) fileSystemRepresentation];
  uint64_t v5 = sandbox_extension_issue_file();
  if (!v5)
  {
    if (a2)
    {
      id v9 = (void *)*MEMORY[0x1E4F28798];
      uint64_t v10 = __error();
      _LSMakeNSErrorImpl(v9, *v10, (uint64_t)"sandboxExtensionForContainer", 209, 0);
      *a2 = (id)objc_claimAutoreleasedReturnValue();
    }
    goto LABEL_6;
  }
  char v6 = (void *)v5;
  uint64_t v7 = [[NSString alloc] initWithUTF8String:v5];
  free(v6);
  if (!v7)
  {
LABEL_6:
    char v8 = 0;
    *a3 = 0;
    goto LABEL_7;
  }
  *(void *)a3 = v7;
  char v8 = 1;
LABEL_7:
  a3[8] = v8;
}

uint64_t anonymous namespace'::StagedFileResource::shouldMoveToInbox(_anonymous_namespace_::StagedFileResource *this)
{
  return 1;
}

void anonymous namespace'::FileResource::~FileResource(id *this)
{
}

{
  uint64_t vars8;

  JUMPOUT(0x18530EAF0);
}

void anonymous namespace'::FileResource::sandboxExtensionForTransfer(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
}

uint64_t anonymous namespace'::FileResource::shouldMoveToInbox(_anonymous_namespace_::FileResource *this)
{
  return 0;
}

void std::__optional_storage_base<NSString * {__strong},false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<NSString * {__strong},false>>(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned __int8 *)(a1 + 8) == *((unsigned __int8 *)a2 + 8))
  {
    if (*(unsigned char *)(a1 + 8))
    {
      uint64_t v3 = *a2;
      *a2 = 0;
      id v4 = *(id *)a1;
      *(void *)a1 = v3;
    }
  }
  else if (*(unsigned char *)(a1 + 8))
  {

    *(unsigned char *)(a1 + 8) = 0;
  }
  else
  {
    uint64_t v5 = *a2;
    *a2 = 0;
    *(void *)a1 = v5;
    *(unsigned char *)(a1 + 8) = 1;
  }
}

void sub_182A7CCF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id makeStagingDirectoryURLInContainer(void *a1)
{
  v40[2] = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = *MEMORY[0x1E4F28358];
  uint64_t v3 = *MEMORY[0x1E4F1C630];
  v39[0] = *MEMORY[0x1E4F28370];
  v39[1] = v3;
  v40[0] = v2;
  v40[1] = MEMORY[0x1E4F1CC38];
  id v4 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v40 forKeys:v39 count:2];
  uint64_t v5 = [v1 URLByAppendingPathComponent:@"OpenOperationStaging"];
  char v6 = [MEMORY[0x1E4F28CB8] defaultManager];
  id v32 = 0;
  int v7 = [v6 createDirectoryAtURL:v5 withIntermediateDirectories:0 attributes:v4 error:&v32];
  id v8 = v32;

  if (v7)
  {
    id v9 = v5;
    goto LABEL_24;
  }
  uint64_t v10 = [v8 domain];
  if (![v10 isEqualToString:*MEMORY[0x1E4F281F8]])
  {

    goto LABEL_7;
  }
  BOOL v11 = [v8 code] == 516;

  if (!v11)
  {
LABEL_7:
    id v12 = _LSDefaultLog();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      makeStagingDirectoryURLInContainer((uint64_t)v5, (uint64_t)v8, v12);
    }
  }
  id v13 = [MEMORY[0x1E4F28CB8] defaultManager];
  id v31 = 0;
  id v14 = [v13 URLForDirectory:99 inDomain:1 appropriateForURL:v5 create:1 error:&v31];
  id v15 = v31;

  if (v14)
  {
    id v16 = [MEMORY[0x1E4F28CB8] defaultManager];
    int v17 = [v14 path];
    id v30 = v15;
    char v18 = [v16 setAttributes:v4 ofItemAtPath:v17 error:&v30];
    id v19 = v30;

    if ((v18 & 1) == 0)
    {
      id v20 = _LSDefaultLog();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
        makeStagingDirectoryURLInContainer();
      }
    }
    id v21 = v14;
    uint64_t v22 = (const char *)[v21 fileSystemRepresentation];
    id v23 = v5;
    if (renamex_np(v22, (const char *)[v23 fileSystemRepresentation], 2u))
    {
      int v24 = *__error();
      id v25 = _LSDefaultLog();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)LSVersionNumber buf = 138543874;
        id v34 = v23;
        __int16 v35 = 2114;
        id v36 = v21;
        __int16 v37 = 1024;
        int v38 = v24;
        _os_log_error_impl(&dword_182959000, v25, OS_LOG_TYPE_ERROR, "could not swap old (%{public}@) and new (%{public}@) staging directories: %{darwin.errno}d", buf, 0x1Cu);
      }
      id v9 = 0;
    }
    else
    {
      id v26 = dispatch_get_global_queue(-32768, 0);
      v28[0] = MEMORY[0x1E4F143A8];
      v28[1] = 3221225472;
      v28[2] = ___ZL34makeStagingDirectoryURLInContainerP5NSURLPU15__autoreleasingP7NSError_block_invoke;
      v28[3] = &unk_1E522D3E8;
      id v29 = v21;
      dispatch_async(v26, v28);

      id v9 = v23;
      id v25 = v29;
    }
  }
  else
  {
    id v25 = _LSDefaultLog();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
      makeStagingDirectoryURLInContainer((uint64_t)v15, v25);
    }
    id v9 = 0;
    id v19 = v15;
  }

LABEL_24:

  return v9;
}

void sub_182A7D110(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A7D520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  if (*((unsigned char *)v13 + 24)) {
    LaunchServices::OpenStaging::StagingDirectoryInfo::~StagingDirectoryInfo(v13);
  }

  _Unwind_Resume(a1);
}

LaunchServices::OpenStaging::StagingDirectoryInfo *std::optional<LaunchServices::OpenStaging::StagingDirectoryInfo>::emplace[abi:nn180100]<NSString * {__strong}&,FSNode * {__strong}&,long long &,void>(LaunchServices::OpenStaging::StagingDirectoryInfo *this, void **a2, void **a3, uint64_t *a4)
{
  if (*((unsigned char *)this + 24))
  {
    LaunchServices::OpenStaging::StagingDirectoryInfo::~StagingDirectoryInfo(this);
    *((unsigned char *)this + 24) = 0;
  }
  id v8 = *a2;
  id v9 = *a3;
  uint64_t v10 = *a4;
  id v11 = v8;
  id v12 = v9;
  *(void *)this = v11;
  *((void *)this + 1) = v12;
  *((_DWORD *)this + 4) = v10;
  *((unsigned char *)this + 24) = 1;
  return this;
}

void sub_182A7D788(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A7D8A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A7DAD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A7DDB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A7DE14()
{
}

void sub_182A7DF44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A7E51C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void *std::unordered_map<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>::insert_or_assign[abi:nn180100]<LaunchServices::OpenStaging::StagingDirectoryInfo>(uint64_t a1, unint64_t *a2, LaunchServices::OpenStaging::StagingDirectoryInfo *a3)
{
  id v4 = std::__hash_table<std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>>>::__emplace_unique_key_args<unsigned long long,unsigned long long &,LaunchServices::OpenStaging::StagingDirectoryInfo>(a1, a2, a2, a3);
  uint64_t v5 = v4;
  if (!v6) {
    LaunchServices::OpenStaging::StagingDirectoryInfo::swap((LaunchServices::OpenStaging::StagingDirectoryInfo *)(v4 + 3), a3);
  }
  return v5;
}

void sub_182A7E714(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_182A7E894(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A7E990(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A7EACC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL34makeStagingDirectoryURLInContainerP5NSURLPU15__autoreleasingP7NSError_block_invoke(uint64_t a1)
{
  uint64_t v2 = [MEMORY[0x1E4F28CB8] defaultManager];
  uint64_t v3 = *(void *)(a1 + 32);
  id v7 = 0;
  char v4 = [v2 removeItemAtURL:v3 error:&v7];
  id v5 = v7;

  if ((v4 & 1) == 0)
  {
    char v6 = _LSDefaultLog();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      ___ZL34makeStagingDirectoryURLInContainerP5NSURLPU15__autoreleasingP7NSError_block_invoke_cold_1();
    }
  }
}

void sub_182A7EBF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void LaunchServices::OpenStaging::StagingDirectoryInfo::~StagingDirectoryInfo(LaunchServices::OpenStaging::StagingDirectoryInfo *this)
{
  if (*((_DWORD *)this + 4) != -1) {
    sandbox_extension_release();
  }
}

void sub_182A7EC54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>>>::__emplace_unique_key_args<unsigned long long,unsigned long long &,LaunchServices::OpenStaging::StagingDirectoryInfo>(uint64_t a1, unint64_t *a2, void *a3, LaunchServices::OpenStaging::StagingDirectoryInfo *a4)
{
  unint64_t v8 = *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    id v11 = *(void **)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      id v12 = (void *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == v8) {
              return v12;
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4) {
              break;
            }
          }
          id v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  uint64_t v14 = a1 + 16;
  id v15 = operator new(0x30uLL);
  v25[0] = (uint64_t)v15;
  v25[1] = a1 + 16;
  *id v15 = 0;
  v15[1] = v8;
  v15[2] = *a3;
  v15[4] = 0;
  *((_DWORD *)v15 + 10) = -1;
  void v15[3] = 0;
  LaunchServices::OpenStaging::StagingDirectoryInfo::swap((LaunchServices::OpenStaging::StagingDirectoryInfo *)(v15 + 3), a4);
  char v26 = 1;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>(a1, v21);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *uint64_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v4) = v14;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v23 >= v9) {
          v23 %= v9;
        }
      }
      else
      {
        v23 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  id v12 = (void *)v25[0];
  v25[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,void *>>>>::reset[abi:nn180100](v25, 0);
  return v12;
}

void sub_182A7EED4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,void *>>>>::reset[abi:nn180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void LaunchServices::OpenStaging::StagingDirectoryInfo::swap(LaunchServices::OpenStaging::StagingDirectoryInfo *this, LaunchServices::OpenStaging::StagingDirectoryInfo *a2)
{
  unint64_t v4 = *(void **)this;
  *(void *)this = 0;
  id v5 = *(void **)a2;
  *(void *)a2 = 0;
  char v6 = *(void **)this;
  *(void *)this = v5;

  id v7 = *(void **)a2;
  *(void *)a2 = v4;

  uint64_t v8 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  uint64_t v9 = *((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  uint8x8_t v10 = (void *)*((void *)this + 1);
  *((void *)this + 1) = v9;

  id v11 = (void *)*((void *)a2 + 1);
  *((void *)a2 + 1) = v8;

  int v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,void *>>>>::reset[abi:nn180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16)) {
      LaunchServices::OpenStaging::StagingDirectoryInfo::~StagingDirectoryInfo((LaunchServices::OpenStaging::StagingDirectoryInfo *)(v2 + 24));
    }
    operator delete((void *)v2);
  }
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>>>::find<unsigned long long>(void *a1, unint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  char v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  double result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      double result = (void *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  int8x8_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    int8x8_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      LaunchServices::OpenStaging::StagingDirectoryInfo::~StagingDirectoryInfo((LaunchServices::OpenStaging::StagingDirectoryInfo *)(v2 + 3));
      operator delete(v2);
      int8x8_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t LaunchServices::notifyd::NotifyToken::cancel(atomic_uint *this)
{
  int v1 = atomic_exchange(this, 0xFFFFFFFF);
  uint64_t result = notify_is_valid_token(v1);
  if (result)
  {
    return notify_cancel(v1);
  }
  return result;
}

void ___ZN14LaunchServices7notifyd11NotifyToken16RegisterDispatchEP8NSStringPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  int8x8_t v2 = (void *)MEMORY[0x18530F680]();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void LaunchServices::notifyd::NotifyToken::Post(LaunchServices::notifyd::NotifyToken *this, NSString *a2)
{
  int8x8_t v2 = this;
  unint64_t v3 = (void *)MEMORY[0x18530F680]();
  uint8x8_t v4 = v2;
  notify_post((const char *)[(LaunchServices::notifyd::NotifyToken *)v4 UTF8String]);
}

void sub_182A7F204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::notifyd::NotifyToken::getState(LaunchServices::notifyd::NotifyToken *this)
{
  uint64_t state64 = 0;
  int v1 = atomic_load((unsigned int *)this);
  if (notify_get_state(v1, &state64)) {
    return 0;
  }
  else {
    return state64;
  }
}

uint64_t LaunchServices::notifyd::NotifyToken::setState(LaunchServices::notifyd::NotifyToken *this, uint64_t a2)
{
  int v2 = atomic_load((unsigned int *)this);
  return notify_set_state(v2, a2);
}

void sub_182A7F2A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  uint8x8_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)LSObserver;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_182A7F380(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_recursive_lock_unlock();
  objc_exception_rethrow();
}

void sub_182A7F3AC(_Unwind_Exception *a1)
{
  objc_end_catch();

  _Unwind_Resume(a1);
}

void sub_182A7F470(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_recursive_lock_unlock();
  objc_exception_rethrow();
}

void sub_182A7F49C(_Unwind_Exception *a1)
{
}

void sub_182A7F654(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_182A7F774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_182A7F910(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A7FA94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A7FB8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A7FD3C(_Unwind_Exception *a1)
{
  uint8x8_t v4 = v3;

  _Unwind_Resume(a1);
}

Class initBSServiceConnectionEndpoint(void)
{
  if (!BoardServicesLibrary(void)::frameworkLibrary) {
    BoardServicesLibrary(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/BoardServices.framework/BoardServices", 2);
  }
  Class result = objc_getClass("BSServiceConnectionEndpoint");
  classBSServiceConnectionEndpoint = (uint64_t)result;
  getBSServiceConnectionEndpointClass = (uint64_t (*)(void))BSServiceConnectionEndpointFunction;
  return result;
}

{
  Class result;

  if (!BoardServicesLibrary(void)::frameworkLibrary) {
    BoardServicesLibrary(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/BoardServices.framework/BoardServices", 2);
  }
  Class result = objc_getClass("BSServiceConnectionEndpoint");
  classBSServiceConnectionEndpoint = (uint64_t)result;
  getBSServiceConnectionEndpointClass = (uint64_t (*)(void))BSServiceConnectionEndpointFunction;
  return result;
}

id BSServiceConnectionEndpointFunction(void)
{
  return (id)classBSServiceConnectionEndpoint;
}

{
  return (id)classBSServiceConnectionEndpoint;
}

Class initUISClickAttribution(void)
{
  if (!UIKitServicesLibrary(void)::frameworkLibrary) {
    UIKitServicesLibrary(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/UIKitServices.framework/UIKitServices", 2);
  }
  Class result = objc_getClass("UISClickAttribution");
  classUISClickAttribution = (uint64_t)result;
  getUISClickAttributionClass = (uint64_t (*)(void))UISClickAttributionFunction;
  return result;
}

id UISClickAttributionFunction(void)
{
  return (id)classUISClickAttribution;
}

Class initUISPasteSharingToken(void)
{
  if (!UIKitServicesLibrary(void)::frameworkLibrary) {
    UIKitServicesLibrary(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/UIKitServices.framework/UIKitServices", 2);
  }
  Class result = objc_getClass("UISPasteSharingToken");
  classUISPasteSharingToken = (uint64_t)result;
  getUISPasteSharingTokenClass = (uint64_t (*)(void))UISPasteSharingTokenFunction;
  return result;
}

id UISPasteSharingTokenFunction(void)
{
  return (id)classUISPasteSharingToken;
}

id LSDatabaseBlockingFetchInterface()
{
  if (LSDatabaseBlockingFetchInterface_onceToken != -1) {
    dispatch_once(&LSDatabaseBlockingFetchInterface_onceToken, &__block_literal_global_54);
  }
  uint64_t v0 = (void *)LSDatabaseBlockingFetchInterface_result;

  return v0;
}

uint64_t __LSDatabaseBlockingFetchInterface_block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1ECB5AAC8];
  int v1 = (void *)LSDatabaseBlockingFetchInterface_result;
  LSDatabaseBlockingFetchInterface_Class result = v0;

  [(id)LSDatabaseBlockingFetchInterface_result setClass:_CSStoreGetXPCClass() forSelector:sel_getServerStoreBlockingWithCompletionHandler_ argumentIndex:0 ofReply:1];
  int v2 = (void *)LSDatabaseBlockingFetchInterface_result;
  unint64_t v3 = _FSNodeGetClasses();
  [v2 setClasses:v3 forSelector:sel_getServerStoreBlockingWithCompletionHandler_ argumentIndex:1 ofReply:1];

  uint8x8_t v4 = (void *)LSDatabaseBlockingFetchInterface_result;
  uint64_t v5 = objc_opt_class();

  return [v4 setClass:v5 forSelector:sel_getServerStoreBlockingWithCompletionHandler_ argumentIndex:2 ofReply:1];
}

void sub_182A80450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void __LAUNCH_SERVICES_CLIENTS_ARE_WAITING_FOR_THE_DATABASE_TO_FINISH_SEEDING__()
{
  uint64_t v0 = _LSDatabaseGetSeedingGroup();
  dispatch_group_wait(v0, 0xFFFFFFFFFFFFFFFFLL);
}

void __LAUNCH_SERVICES_CLIENTS_ARE_WAITING_FOR_A_MANUAL_DATABASE_REBUILD_TO_COMPLETE__()
{
  uint64_t v0 = _LSDatabaseGetSeedingGroup();
  dispatch_group_wait(v0, 0xFFFFFFFFFFFFFFFFLL);
}

id _LSOpenResourceOperationDelegateGetXPCInterface()
{
  if (_LSOpenResourceOperationDelegateGetXPCInterface::once != -1) {
    dispatch_once(&_LSOpenResourceOperationDelegateGetXPCInterface::once, &__block_literal_global_55);
  }
  uint64_t v0 = (void *)_LSOpenResourceOperationDelegateGetXPCInterface::result;

  return v0;
}

void sub_182A808E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A80988(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A80A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A80AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A80BA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __LAUNCH_SERVICES_IS_BEING_USED_SYNCHRONOUSLY_ON_THE_MAIN_THREAD_OF_THE_SHELL_APP_AND_WILL_DEADLOCK__()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = getprogname();
  int v1 = _LSDefaultLog();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_FAULT))
  {
    int v2 = 136446466;
    unint64_t v3 = v0;
    __int16 v4 = 2082;
    uint64_t v5 = v0;
    _os_log_fault_impl(&dword_182959000, v1, OS_LOG_TYPE_FAULT, "This Launch Services API is synchronous and makes an XPC call to %{public}s. It will always deadlock when used within %{public}s. You must use asynchronous API instead to avoid a deadlock and subsequent panic. This is a bug in Launch Services' client.", (uint8_t *)&v2, 0x16u);
  }
}

void _LSFaultIfRunningOnMainThreadOfShellApp()
{
  if (pthread_main_np())
  {
    if ([(id)__LSDefaultsGetSharedInstance() isAppleInternal])
    {
      if (FrontBoardServicesLibrary(void)::frameworkLibrary
        || (FrontBoardServicesLibrary(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices", 2)) != 0)
      {
        if ([(id)getFBSOpenApplicationServiceClass() currentProcessServicesDefaultShellEndpoint])
        {
          __LAUNCH_SERVICES_IS_BEING_USED_SYNCHRONOUSLY_ON_THE_MAIN_THREAD_OF_THE_SHELL_APP_AND_WILL_DEADLOCK__();
        }
      }
    }
  }
}

void _LSServer_PerformOpenOperation(void *a1, void *a2, void *a3, char a4, long long *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11)
{
  id v44 = a1;
  id v18 = a2;
  id v19 = a3;
  id v20 = a6;
  id v43 = a7;
  id v42 = a8;
  id v21 = a9;
  id v22 = a10;
  id v23 = a11;
  long long v41 = v21;
  __int16 v37 = (void *)MEMORY[0x18530F950]();
  MEMORY[0x185310450]();
  v60[0] = MEMORY[0x1E4F143A8];
  v60[1] = 3221225472;
  v60[2] = ___LSServer_PerformOpenOperation_block_invoke;
  v60[3] = &unk_1E522BD40;
  id v39 = v37;
  id v61 = v39;
  long long v40 = (void *)MEMORY[0x18530F950](v60);

  long long v58 = 0u;
  long long v59 = 0u;
  int v24 = v20;
  if (a5)
  {
    long long v25 = a5[1];
    long long v58 = *a5;
    long long v59 = v25;
    id v27 = v43;
    char v26 = v44;
    id v28 = v42;
  }
  else
  {
    id v27 = v43;
    char v26 = v44;
    id v28 = v42;
    if (v22) {
      [v22 auditToken];
    }
  }
  v45[0] = MEMORY[0x1E4F143A8];
  v45[1] = 3221225472;
  v45[2] = ___LSServer_PerformOpenOperation_block_invoke_74;
  v45[3] = &unk_1E522FDF8;
  id v29 = v19;
  id v46 = v29;
  id v38 = v26;
  id v47 = v38;
  id v30 = v28;
  id v48 = v30;
  id v31 = v22;
  id v49 = v31;
  char v57 = a4;
  long long v55 = v58;
  long long v56 = v59;
  id v32 = v40;
  id v54 = v32;
  id v33 = v18;
  id v50 = v33;
  id v34 = v24;
  id v51 = v34;
  id v35 = v27;
  id v52 = v35;
  id v36 = v41;
  id v53 = v36;
  _LSAsyncOpenContext(v45);
}

void sub_182A81004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_182A8119C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSAsyncOpenContext(void *a1)
{
  id v1 = a1;
  if (_LSOpenOperationGetQueue(void)::once != -1) {
    dispatch_once(&_LSOpenOperationGetQueue(void)::once, &__block_literal_global_101);
  }
  int v2 = _LSOpenOperationGetQueue(void)::result;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___ZL19_LSAsyncOpenContextU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E522F248;
  id v5 = v1;
  id v3 = v1;
  dispatch_async(v2, block);
}

void sub_182A81B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,char a31)
{
  if (a31) {
  _Unwind_Resume(a1);
  }
}

void _LSOpenOperationPerform(void *a1, void *a2, void *a3, int a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10)
{
  uint64_t v226 = *MEMORY[0x1E4F143B8];
  id v16 = a1;
  id v189 = a2;
  id v197 = a3;
  id v190 = a5;
  id v192 = a6;
  id v195 = a7;
  id v191 = a8;
  id v196 = a9;
  v193 = v16;
  v194 = a10;
  _LSAssertRunningInServer((uint64_t)"void _LSOpenOperationPerform(NSURL *__strong, NSFileHandle *__strong, NSString *__st"
                                    "rong, BOOL, NSString *__strong, NSDictionary<NSString *,id> *__strong, NSDictionary<"
                                    "NSString *,id> *__strong, __strong id<LSOpenResourceOperationDelegate>, NSXPCConnect"
                                    "ion *__strong, __strong _LSDOpenServiceCompletionHandler)");
  if (v16)
  {
    if ([v16 isFileURL])
    {
      v180 = +[LSApplicationProxy applicationProxyForIdentifier:v197];
      uint64_t v17 = objc_opt_class();
      uint64_t v18 = [v195 objectForKey:@"FileProviderString"];
      id v19 = (void *)v18;
      if (v17 && v18)
      {
        if (objc_opt_isKindOfClass()) {
          goto LABEL_35;
        }
      }
      else if (v18)
      {
        goto LABEL_35;
      }
      uint64_t v28 = objc_opt_class();
      uint64_t v29 = [v192 objectForKey:@"FileProviderString"];
      id v30 = (void *)v29;
      if (v28 && v29 && (objc_opt_isKindOfClass() & 1) == 0)
      {

        id v19 = 0;
      }
      else
      {
        id v19 = v30;
      }
LABEL_35:
      uint64_t v46 = objc_opt_class();
      uint64_t v47 = [v195 objectForKey:@"RequireOpenInPlace"];
      id v48 = (void *)v47;
      if (v46 && v47 && (objc_opt_isKindOfClass() & 1) == 0)
      {

        id v48 = 0;
      }
      char v49 = [v48 BOOLValue];

      if (v49)
      {
        unsigned int v187 = 1;
      }
      else
      {
        uint64_t v50 = objc_opt_class();
        uint64_t v51 = [v192 objectForKey:@"RequireOpenInPlace"];
        id v52 = (void *)v51;
        if (v50 && v51 && (objc_opt_isKindOfClass() & 1) == 0)
        {

          id v52 = 0;
        }
        unsigned int v187 = [v52 BOOLValue];
      }
      uint64_t v53 = objc_opt_class();
      uint64_t v54 = [v195 objectForKey:@"LSMoveDocumentOnOpen"];
      long long v55 = (void *)v54;
      if (v53 && v54 && (objc_opt_isKindOfClass() & 1) == 0)
      {

        long long v55 = 0;
      }
      char v56 = [v55 BOOLValue];

      if (v56) {
        goto LABEL_56;
      }
      uint64_t v57 = objc_opt_class();
      uint64_t v58 = [v192 objectForKey:@"LSMoveDocumentOnOpen"];
      long long v59 = (void *)v58;
      if (v57 && v58 && (objc_opt_isKindOfClass() & 1) == 0)
      {

        long long v59 = 0;
      }
      int v60 = [v59 BOOLValue];

      if (v60)
      {
LABEL_56:
        id v61 = [v196 _xpcConnection];
        char v173 = _LSCheckEntitlementForXPCConnection(v61, @"com.apple.launchservices.MoveDocumentOnOpen") != 0;

        if (v19)
        {
LABEL_57:
          BOOL v176 = 0;
          goto LABEL_63;
        }
      }
      else
      {
        char v173 = 0;
        if (v19) {
          goto LABEL_57;
        }
      }
      v62 = [v180 dataContainerURL];
      if (v62)
      {
        v63 = [v16 absoluteString];
        v64 = [v62 absoluteString];
        [v63 rangeOfString:v64 options:8];
        uint64_t v66 = v65;

        BOOL v67 = v66 == 0;
      }
      else
      {
        BOOL v67 = 1;
      }
      BOOL v176 = v67;

LABEL_63:
      if (v187 && ([v180 supportsOpenInPlace] & 1) == 0)
      {
        v87 = _LSDefaultLog();
        if (os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)LSVersionNumber buf = 138412546;
          *(void *)&uint8_t buf[4] = v16;
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v197;
          _os_log_impl(&dword_182959000, v87, OS_LOG_TYPE_DEFAULT, "Document %@ requires open-in-place but target (%@) does not support it.", buf, 0x16u);
        }

        v88 = _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28798], 45, (uint64_t)"_LSOpenOperationPerform", 419, 0);
        v194[2](v194, 0, v88);

        goto LABEL_174;
      }
      id v68 = v196;
      id v69 = v180;
      id v70 = v16;
      if (v68)
      {
        if (v69) {
          goto LABEL_67;
        }
      }
      else
      {
        v165 = [MEMORY[0x1E4F28B00] currentHandler];
        v166 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL _LSCheckIfXPCConnectionCanReadDocument(NSXPCConnection *__strong, LSApplicationProxy *__strong, NSURL *__strong, NSError *__autoreleasing *)");
        [v165 handleFailureInFunction:v166, @"LSOpenOperation.mm", 1026, @"Invalid parameter not satisfying: %@", @"clientXPCConnection != nil" file lineNumber description];

        if (v69) {
          goto LABEL_67;
        }
      }
      v167 = [MEMORY[0x1E4F28B00] currentHandler];
      v168 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL _LSCheckIfXPCConnectionCanReadDocument(NSXPCConnection *__strong, LSApplicationProxy *__strong, NSURL *__strong, NSError *__autoreleasing *)");
      [v167 handleFailureInFunction:v168, @"LSOpenOperation.mm", 1027, @"Invalid parameter not satisfying: %@", @"targetApp != nil" file lineNumber description];

LABEL_67:
      v71 = (void *)MEMORY[0x18530F680]();
      memset(buf, 0, sizeof(buf));
      if (v68) {
        [v68 auditToken];
      }
      if (+[FSNode canReadURL:fromSandboxWithAuditToken:](FSNode, "canReadURL:fromSandboxWithAuditToken:", v70, buf)|| (v72 = (void *)_CFURLCopyPromiseURLOfLogicalURL()) != 0&& (BOOL v73 = +[FSNode canReadURL:v72 fromSandboxWithAuditToken:buf], v72, v73))
      {
        v74 = 0;
        char v75 = 1;
      }
      else
      {
        v76 = _LSDefaultLog();
        if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v220 = 67109635;
          *(_DWORD *)&v220[4] = [v68 processIdentifier];
          *(_WORD *)&v220[8] = 2113;
          *(void *)&v220[10] = v70;
          *(_WORD *)&v220[18] = 2113;
          *(void *)&v220[20] = v69;
          _os_log_impl(&dword_182959000, v76, OS_LOG_TYPE_DEFAULT, "pid %i does not have read access to document %{private}@ in order to open it in target %{private}@.", v220, 0x1Cu);
        }

        v74 = _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28798], 1, (uint64_t)"_LSCheckIfXPCConnectionCanReadDocument", 1055, 0);
        char v75 = 0;
      }
      if (v75) {
        id v77 = 0;
      }
      else {
        id v77 = v74;
      }

      id v78 = v77;
      v79 = v78;
      if ((v75 & 1) == 0)
      {
        v194[2](v194, 0, v78);

        goto LABEL_174;
      }

      id v174 = v69;
      id v177 = v70;
      if (!v69)
      {
        v169 = [MEMORY[0x1E4F28B00] currentHandler];
        v170 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL _LSCheckIfApplicationCanOpenUSBOrSMBDocument(LSApplicationProxy *__strong, NSURL *__strong, NSError *__autoreleasing *)");
        [v169 handleFailureInFunction:v170, @"LSOpenOperation.mm", 1072, @"Invalid parameter not satisfying: %@", @"targetApp != nil" file lineNumber description];
      }
      context = (void *)MEMORY[0x18530F680]();
      *(void *)v214 = 0;
      uint64_t v80 = *MEMORY[0x1E4F1C858];
      char v81 = [v177 getResourceValue:v214 forKey:*MEMORY[0x1E4F1C858] error:0];
      v82 = (void **)*(id *)v214;
      if ((v81 & 1) == 0)
      {
        v83 = (void *)_CFURLCopyPromiseURLOfLogicalURL();
        v209 = 0;
        [v83 getResourceValue:&v209 forKey:v80 error:0];
        v84 = v209;

        v82 = v84;
      }
      if (v82 && ([v82 BOOLValue] & 1) == 0)
      {
        v89 = _LSDefaultLog();
        if (os_log_type_enabled(v89, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)LSVersionNumber buf = 138478083;
          *(void *)&uint8_t buf[4] = v177;
          *(_WORD *)&buf[12] = 2113;
          *(void *)&buf[14] = v174;
          _os_log_impl(&dword_182959000, v89, OS_LOG_TYPE_INFO, "Document %{private}@ is on USB/SMB. Checking if application %{private}@ can open such documents.", buf, 0x16u);
        }

        v90 = [v174 platform];
        int v91 = [v90 unsignedIntegerValue];

        uint64_t v92 = [v174 sdkVersion];
        v93 = (void *)v92;
        v94 = @"1.0";
        if (v92) {
          v94 = (__CFString *)v92;
        }
        v95 = v94;

        if ((v91 - 11) >= 2)
        {
          v109 = +[LSApplicationWorkspace defaultWorkspace];
          int v86 = [v109 isVersion:v95 greaterThanOrEqualToVersion:@"13.0"];

          if (v86)
          {
            v110 = _LSDefaultLog();
            if (os_log_type_enabled(v110, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)LSVersionNumber buf = 138478083;
              *(void *)&uint8_t buf[4] = v174;
              *(_WORD *)&buf[12] = 2114;
              *(void *)&buf[14] = v95;
              _os_log_impl(&dword_182959000, v110, OS_LOG_TYPE_INFO, "Application %{private}@ was linked against SDK %{public}@ and so can open documents on USB/SMB.", buf, 0x16u);
            }
            v85 = 0;
          }
          else
          {
            v111 = _LSDefaultLog();
            if (os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)LSVersionNumber buf = 138478083;
              *(void *)&uint8_t buf[4] = v174;
              *(_WORD *)&buf[12] = 2114;
              *(void *)&buf[14] = v95;
              _os_log_impl(&dword_182959000, v111, OS_LOG_TYPE_DEFAULT, "Application %{private}@ was linked against SDK %{public}@ and so CANNOT open documents on USB/SMB.", buf, 0x16u);
            }

            uint64_t v112 = *MEMORY[0x1E4F28228];
            *(void *)v220 = @"SDKVersion";
            *(void *)&v220[8] = v112;
            *(void *)LSVersionNumber buf = v95;
            *(void *)&uint8_t buf[8] = @"SDK too old to support SMB/USB documents (iOS 13.0 required.)";
            v110 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:buf forKeys:v220 count:2];
            v85 = _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28798], 45, (uint64_t)"_LSCheckIfApplicationCanOpenUSBOrSMBDocument", 1098, v110);
          }
        }
        else
        {
          v85 = 0;
          int v86 = 1;
        }
      }
      else
      {
        v85 = 0;
        int v86 = 1;
      }

      if (v86) {
        id v113 = 0;
      }
      else {
        id v113 = v85;
      }

      id v114 = v113;
      if ((v86 & 1) == 0) {
        v194[2](v194, 0, v114);
      }

      if (((v69 != 0) & v86 & a4) != 1)
      {
        if (!v86) {
          goto LABEL_174;
        }
        goto LABEL_166;
      }
      if (![v177 isFileURL])
      {
LABEL_166:
        if (!v176)
        {
          v138 = _LSDefaultLog();
          if (os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)LSVersionNumber buf = 138412546;
            *(void *)&uint8_t buf[4] = v177;
            *(_WORD *)&buf[12] = 2112;
            *(void *)&buf[14] = v197;
            _os_log_impl(&dword_182959000, v138, OS_LOG_TYPE_DEFAULT, "Not copying %@ to Inbox for %@", buf, 0x16u);
          }

          id v21 = (NSURL *)v177;
          char v22 = 0;
          goto LABEL_175;
        }
        v136 = _LSGetInboxURLForBundleIdentifier(v197);
        if (v136)
        {
          v199[0] = MEMORY[0x1E4F143A8];
          v199[1] = 3221225472;
          v199[2] = ___ZL23_LSOpenOperationPerformP5NSURLP12NSFileHandleP8NSStringbS4_P12NSDictionaryIS4_P11objc_objectES9_PU42objcproto31LSOpenResourceOperationDelegate11objc_objectP15NSXPCConnectionU13block_pointerFvbP7NSErrorE_block_invoke;
          v199[3] = &unk_1E522FE70;
          id v200 = v191;
          id v201 = v68;
          id v202 = v195;
          id v203 = v192;
          id v204 = v197;
          v205 = v194;
          _LSCopyOrMoveFileResource(v177, v189, v190, v136, v173, v199);

          v137 = v200;
        }
        else
        {
          v137 = _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28798], 45, (uint64_t)"_LSOpenOperationPerform", 458, 0);
          v194[2](v194, 0, v137);
        }

LABEL_174:
        id v21 = 0;
        char v22 = 1;
LABEL_175:

        LOBYTE(v16) = 0;
        int v20 = 0;
        goto LABEL_176;
      }
      id v184 = v174;
      id v115 = v177;
      v116 = [FSNode alloc];
      id v213 = 0;
      v117 = [(FSNode *)v116 initWithURL:v115 flags:0 error:&v213];
      id v118 = v213;
      if (!v117)
      {
        v125 = _LSDefaultLog();
        if (os_log_type_enabled(v125, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)LSVersionNumber buf = 138478083;
          *(void *)&uint8_t buf[4] = v115;
          *(_WORD *)&buf[12] = 2114;
          *(void *)&buf[14] = v118;
          _os_log_impl(&dword_182959000, v125, OS_LOG_TYPE_DEFAULT, "Could not create node for resource URL %{private}@ for default handler update: %{public}@", buf, 0x16u);
        }

        goto LABEL_165;
      }
      id v212 = 0;
      v209 = 0;
      id v210 = 0;
      char v211 = 0;
      +[_LSDServiceDomain defaultServiceDomain]();
      v119 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
      v120 = (void **)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v209, v119, 0);

      if (!v120)
      {
        v126 = _LSDefaultLog();
        if (os_log_type_enabled(v126, OS_LOG_TYPE_DEFAULT))
        {
          +[_LSDServiceDomain defaultServiceDomain]();
          v127 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
          uint64_t v128 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v209, v127, 0);

          if (v128) {
            id v129 = 0;
          }
          else {
            id v129 = v212;
          }
          *(_DWORD *)LSVersionNumber buf = 138543362;
          *(void *)&uint8_t buf[4] = v129;
          _os_log_impl(&dword_182959000, v126, OS_LOG_TYPE_DEFAULT, "Could not create database context for default handler update: %{public}@", buf, 0xCu);
        }
        id v175 = v118;
        goto LABEL_161;
      }
      LaunchServices::TypeEvaluator::TypeEvaluator(v208, v117);
      contexta = LaunchServices::TypeEvaluator::getTypeIdentifier((uint64_t)v208, v120, 0);
      if (!contexta)
      {
        v123 = _LSDefaultLog();
        if (os_log_type_enabled(v123, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)LSVersionNumber buf = 138478083;
          *(void *)&uint8_t buf[4] = v117;
          *(_WORD *)&buf[12] = 2114;
          *(void *)&buf[14] = v118;
          _os_log_impl(&dword_182959000, v123, OS_LOG_TYPE_DEFAULT, "Could not get UTI for node %{private}@ for default handler update: %{public}@", buf, 0x16u);
        }
        id v175 = v118;
        goto LABEL_157;
      }
      v121 = [FSNode alloc];
      v122 = [v184 bundleURL];
      id v207 = v118;
      v123 = [(FSNode *)v121 initWithURL:v122 flags:0 error:&v207];
      id v175 = v207;

      if (!v123)
      {
        v130 = _LSDefaultLog();
        if (os_log_type_enabled(v130, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)LSVersionNumber buf = 138478083;
          *(void *)&uint8_t buf[4] = v184;
          *(_WORD *)&buf[12] = 2114;
          *(void *)&buf[14] = v175;
          _os_log_impl(&dword_182959000, v130, OS_LOG_TYPE_DEFAULT, "Could not get node for app %{private}@: %{public}@", buf, 0x16u);
        }

        v123 = 0;
        goto LABEL_157;
      }
      int v206 = 0;
      if (_LSBundleFindWithNode((uint64_t)v120, v123, &v206, 0))
      {
        v124 = _LSDefaultLog();
        if (os_log_type_enabled(v124, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)LSVersionNumber buf = 138477827;
          *(void *)&uint8_t buf[4] = v184;
          _os_log_impl(&dword_182959000, v124, OS_LOG_TYPE_DEFAULT, "Could not get unit for app %{private}@", buf, 0xCu);
        }

        goto LABEL_157;
      }
      *(_DWORD *)LSVersionNumber buf = 0;
      *(void *)&uint8_t buf[8] = 0;
      *(_DWORD *)&buf[16] = 0;
      id v224 = 0;
      id v225 = 0;
      *(void *)&buf[24] = 0;
      if (!_LSGetBindingForNodeOrSchemeOrUTI((int)v120, 0, 0, (LaunchServices::BindingEvaluator *)contexta, v206, 14, 0, 12320, (uint64_t)buf)&& *(void *)&buf[24])
      {
        if (_LSClaimFlagsAreWildcard(*(_DWORD *)(*(void *)&buf[24] + 8)))
        {
          v159 = _LSDefaultLog();
          if (os_log_type_enabled(v159, OS_LOG_TYPE_INFO))
          {
            v160 = [v184 bundleIdentifier];
            *(_DWORD *)v220 = 138478083;
            *(void *)&v220[4] = v160;
            *(_WORD *)&v220[12] = 2113;
            *(void *)&v220[14] = v117;
            _os_log_impl(&dword_182959000, v159, OS_LOG_TYPE_INFO, "App %{private}@ claims %{private}@ via a wildcard UTI, so won't set default handler.", v220, 0x16u);
          }
LABEL_239:

LABEL_156:
LABEL_157:

LABEL_161:
          if (v209 && v211) {
            _LSContextDestroy(v209);
          }
          id v134 = v210;
          v209 = 0;
          id v210 = 0;

          char v211 = 0;
          id v135 = v212;
          id v212 = 0;

          id v118 = v175;
LABEL_165:

          goto LABEL_166;
        }
        if (*(void *)&buf[24] && !*(_WORD *)(*(void *)&buf[24] + 12))
        {
          v159 = _LSDefaultLog();
          if (os_log_type_enabled(v159, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)v220 = 138478083;
            *(void *)&v220[4] = v115;
            *(_WORD *)&v220[12] = 2113;
            *(void *)&v220[14] = v175;
            _os_log_impl(&dword_182959000, v159, OS_LOG_TYPE_INFO, "App %{private}@'s claim for resource URL %{private}@ has a handler rank of None. Will skip weak default handler.", v220, 0x16u);
          }
          goto LABEL_239;
        }
      }
      *(_DWORD *)v220 = 0;
      *(void *)&v220[8] = 0;
      *(_DWORD *)&v220[16] = 0;
      id v221 = 0;
      id v222 = 0;
      *(void *)&v220[24] = 0;
      v131 = v184;
      if (!_LSGetBindingForNodeOrSchemeOrUTI((int)v120, 0, 0, (LaunchServices::BindingEvaluator *)contexta, 0, 14, 0, 12320, (uint64_t)v220)&& (v161 = *v120, [v184 bundleIdentifier], v162 = (__CFString *)objc_claimAutoreleasedReturnValue(), int StringForCFString = _LSDatabaseGetStringForCFString(v161, v162, 0), v162, v131 = v184, *(void *)&v220[8])&& *(_DWORD *)(*(void *)&v220[8] + 12) == StringForCFString)
      {
        v132 = _LSDefaultLog();
        if (os_log_type_enabled(v132, OS_LOG_TYPE_DEBUG))
        {
          v164 = [v184 bundleIdentifier];
          _LSOpenOperationPerform((uint64_t)v117, v164, v214, v132);
        }
      }
      else
      {
        MEMORY[0x185310450]();
        v132 = +[_LSDService XPCProxyWithErrorHandler:]((uint64_t)_LSDModifyService, __block_literal_global_145);
        v133 = [v131 bundleIdentifier];
        memset(v219, 0, sizeof(v219));
        *(void *)v214 = MEMORY[0x1E4F143A8];
        uint64_t v215 = 3221225472;
        v216 = ___ZL23_LSUpdateDefaultHandlerP18LSApplicationProxyP5NSURL_block_invoke_146;
        v217 = &unk_1E522FE98;
        id v218 = v131;
        [v132 setHandler:v133 version:v219 roles:0xFFFFFFFFLL forContentType:contexta completionHandler:v214];
      }
      goto LABEL_156;
    }
    id v23 = [v16 scheme];
    uint64_t v24 = [v23 caseInsensitiveCompare:@"search"];

    if (v24)
    {
      long long v25 = [v16 scheme];
      uint64_t v26 = [v25 caseInsensitiveCompare:@"com-apple-audiounit"];

      if (!v26)
      {
        id v21 = (NSURL *)v16;
        _LSAudioUnitURLOpen(v21);
        v194[2](v194, 1, 0);
        int v20 = 0;
        LOBYTE(v16) = 0;
        id v19 = 0;
        unsigned int v187 = 0;
        long long v40 = v197;
        BOOL v41 = v197 != 0;
LABEL_179:
        char v22 = 1;
        goto LABEL_180;
      }
      id v27 = +[LSApplicationWorkspace defaultWorkspace];
      if (a4)
      {
        id v21 = (NSURL *)v16;
        LOBYTE(v16) = 0;
      }
      else
      {
        uint64_t v42 = objc_opt_class();
        uint64_t v43 = [v195 objectForKey:@"NoOverrides"];
        id v44 = (void *)v43;
        if (v42 && v43 && (objc_opt_isKindOfClass() & 1) == 0)
        {

          id v44 = 0;
        }
        LOBYTE(v16) = [v44 BOOLValue];

        if (v16)
        {
          long long v45 = 0;
        }
        else
        {
          v96 = [[_LSURLOverride alloc] initWithOriginalURL:v193];
          long long v45 = [(_LSURLOverride *)v96 overrideURL];
        }
        v97 = v193;
        if (v45) {
          v97 = v45;
        }
        id v21 = v97;
      }
      if (!v197)
      {
        v98 = [v27 applicationForOpeningResource:v21];
        id v197 = [v98 bundleIdentifier];
      }
      v99 = [(NSURL *)v21 scheme];
      if (!v99) {
        goto LABEL_111;
      }
      v100 = +[_LSCanOpenURLManager sharedManager];
      uint64_t v101 = [v100 schemeTypeOfScheme:v99];

      if (v101 != 1) {
        goto LABEL_111;
      }
      uint64_t v102 = objc_opt_class();
      uint64_t v103 = [v195 objectForKey:@"LSOpenSensitiveURLOption"];
      v104 = (void *)v103;
      if (v102 && v103 && (objc_opt_isKindOfClass() & 1) == 0)
      {

        v104 = 0;
      }
      int v105 = [v104 BOOLValue];

      if (!v105
        || ([v196 _xpcConnection],
            v106 = objc_claimAutoreleasedReturnValue(),
            int v107 = _LSCheckOpenSensitiveURLForXPCConnection(v106, (uint64_t)[(NSURL *)v21 absoluteString]), v106, !v107))
      {
        v108 = _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28798], 1, (uint64_t)"_LSOpenOperationPerform", 551, 0);
        v194[2](v194, 0, v108);

        char v22 = 1;
      }
      else
      {
LABEL_111:
        char v22 = 0;
      }

      unsigned int v187 = 0;
      id v19 = 0;
      int v20 = 1;
    }
    else
    {
      uint64_t v31 = objc_opt_class();
      uint64_t v32 = [v195 objectForKey:@"LSOpenSensitiveURLOption"];
      id v33 = (void *)v32;
      if (v31 && v32 && (objc_opt_isKindOfClass() & 1) == 0)
      {

        id v33 = 0;
      }
      int v34 = [v33 BOOLValue];

      if (!v34
        || ([v196 _xpcConnection],
            id v35 = objc_claimAutoreleasedReturnValue(),
            int v36 = _LSCheckOpenSensitiveURLForXPCConnection(v35, [v16 absoluteString]),
            v35,
            !v36))
      {
        id v38 = _LSDefaultLog();
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)LSVersionNumber buf = 0;
          _os_log_impl(&dword_182959000, v38, OS_LOG_TYPE_DEFAULT, "The 'search:' scheme requires the com.apple.springboard.opensensitiveurl entitlement", buf, 2u);
        }

        id v39 = _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28798], 1, (uint64_t)"_LSOpenOperationPerform", 509, 0);
        v194[2](v194, 0, v39);

        id v21 = 0;
        LOBYTE(v16) = 0;
        id v19 = 0;
        unsigned int v187 = 0;
        long long v40 = v197;
        BOOL v41 = v197 != 0;
        int v20 = 1;
        goto LABEL_179;
      }
      uint64_t v37 = [v16 host];

      id v21 = (NSURL *)v16;
      unsigned int v187 = 0;
      id v19 = 0;
      LOBYTE(v16) = 0;
      char v22 = 0;
      int v20 = 1;
      id v197 = (id)v37;
    }
  }
  else
  {
    unsigned int v187 = 0;
    id v19 = 0;
    int v20 = 0;
    id v21 = 0;
    char v22 = 0;
  }
LABEL_176:
  long long v40 = v197;
  BOOL v41 = v197 != 0;
  if ((v22 & 1) == 0 && !v197)
  {
    v139 = _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28798], 45, (uint64_t)"_LSOpenOperationPerform", 561, 0);
    v194[2](v194, 0, v139);

    BOOL v41 = 0;
    long long v40 = 0;
    goto LABEL_179;
  }
LABEL_180:
  v198 = v40;
  _LSSchemeApprovalRememberForBouncebackCheck(v196, v40);
  if (v22) {
    goto LABEL_225;
  }
  v140 = _LSGetOptionsDictionaryContainingSourceApplication(v196, 0, v21, 0, 0, 0, 0, v195);
  v141 = [MEMORY[0x1E4F1CA60] dictionaryWithDictionary:v192];
  if (v21) {
    [v140 setObject:v21 forKeyedSubscript:getFBSOpenApplicationOptionKeyPayloadURL()];
  }
  if (v20)
  {
    uint64_t v142 = objc_opt_class();
    uint64_t v143 = [v140 objectForKey:@"ReferrerURL"];
    v144 = (void *)v143;
    if (v142 && v143)
    {
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {

        v144 = 0;
        goto LABEL_206;
      }
    }
    else if (!v143)
    {
LABEL_206:
      if ((v16 & 1) != 0 && _LSBundleIdentifierIsWebBrowser((unint64_t)v198)) {
        [v141 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:@"NoOverrides"];
      }
      [v140 removeObjectForKey:@"NoOverrides"];
      if ([v141 count]) {
        [v140 setObject:v141 forKeyedSubscript:getFBSOpenApplicationOptionKeyPayloadAnnotation()];
      }

      goto LABEL_212;
    }
    id v188 = v198;
    v150 = @"com.apple.launchservices.receivereferrerrurl";
    v151 = v150;
    if (v150) {
      BOOL v152 = v41;
    }
    else {
      BOOL v152 = 0;
    }
    if (v152)
    {
      *(void *)v220 = 0;
      if (_LSContextInit((id *)v220))
      {
      }
      else
      {
        LODWORD(v219[0]) = 0;
        v209 = 0;
        memset(buf, 0, sizeof(buf));
        if (_LSBundleFindWithInfo((uint64_t)v220, 0, v188, 0, buf, 0, 128, v219, &v209))
        {
          char v185 = 0;
        }
        else
        {
          uint64_t v181 = *(void *)v220;
          unsigned int v178 = *((_DWORD *)v209 + 35);
          v186 = v151;
          _LSPlistGet(v181, v178);
          v179 = (NSData *)objc_claimAutoreleasedReturnValue();
          v182 = _LSPlistDataGetValueForKey(v179, (uint64_t)v186, 0);

          if (v182 && (objc_opt_respondsToSelector() & 1) != 0) {
            char v185 = [v182 BOOLValue];
          }
          else {
            char v185 = 0;
          }
        }
        _LSContextDestroy((void **)v220);

        if (v185) {
          [v141 setObject:v144 forKeyedSubscript:@"ReferrerURL"];
        }
      }
    }
    else
    {
    }
    [v140 removeObjectForKey:@"ReferrerURL"];
    goto LABEL_206;
  }
  if (v19)
  {
    uint64_t v145 = objc_opt_class();
    uint64_t v146 = [v140 objectForKey:@"__PayloadOptions"];
    v147 = (void *)v146;
    if (v145 && v146 && (objc_opt_isKindOfClass() & 1) == 0)
    {

      v147 = 0;
    }
    v148 = (void *)[v147 mutableCopy];

    [v148 setObject:v19 forKeyedSubscript:@"FileProviderString"];
    v149 = [NSNumber numberWithBool:v187];
    [v148 setObject:v149 forKeyedSubscript:@"RequireOpenInPlace"];

    [v140 setObject:v148 forKeyedSubscript:@"__PayloadOptions"];
    [v140 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:getFBSOpenApplicationOptionKeyDocumentOpen4LS()];
    [v141 removeObjectForKey:@"FileProviderString"];
    [v141 removeObjectForKey:@"RequireOpenInPlace"];
  }
  if ([v141 count]) {
    [v140 setObject:v141 forKeyedSubscript:getFBSOpenApplicationOptionKeyPayloadAnnotation()];
  }
  [v140 setObject:MEMORY[0x1E4F1CC28] forKeyedSubscript:getFBSOpenApplicationOptionKeyActivateSuspended()];
LABEL_212:
  uint64_t v153 = objc_opt_class();
  uint64_t v154 = [v140 objectForKey:@"LSBlockUntilComplete"];
  v155 = (void *)v154;
  if (v153 && v154)
  {
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {

      v155 = 0;
LABEL_218:
      uint64_t v156 = 0;
      goto LABEL_219;
    }
  }
  else if (!v154)
  {
    goto LABEL_218;
  }
  uint64_t v156 = [v155 BOOLValue];
  [v140 removeObjectForKey:@"LSBlockUntilComplete"];
LABEL_219:

  v157 = objc_alloc_init(_LSSpringBoardCall);
  [(_LSSpringBoardCall *)v157 setBundleIdentifier:v198];
  [(_LSSpringBoardCall *)v157 setLaunchOptions:v140];
  if (v19) {
    int v158 = 1;
  }
  else {
    int v158 = v20;
  }
  if (v158 == 1) {
    [(_LSSpringBoardCall *)v157 setClientXPCConnection:v196];
  }
  [(_LSSpringBoardCall *)v157 setCallCompletionHandlerWhenFullyComplete:v156];
  [(_LSSpringBoardCall *)v157 callWithCompletionHandler:v194];

LABEL_225:
}

void sub_182A83B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,char a41)
{
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a41);
  _Unwind_Resume(a1);
}

unsigned char *__copy_helper_block_ea8_96c48_ZTSNSt3__18optionalIU8__strongP12NSDictionaryEE(unsigned char *result, uint64_t a2)
{
  result[96] = 0;
  result[104] = 0;
  if (*(unsigned char *)(a2 + 104))
  {
    int v2 = result;
    Class result = *(id *)(a2 + 96);
    *((void *)v2 + 12) = result;
    v2[104] = 1;
  }
  return result;
}

void __destroy_helper_block_ea8_96c48_ZTSNSt3__18optionalIU8__strongP12NSDictionaryEE(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 104)) {
}
  }

void _LSServer_OpenApplication(void *a1, void *a2, void *a3, int a4, void *a5)
{
  if (a4) {
    unint64_t v5 = 0;
  }
  else {
    unint64_t v5 = 2;
  }
  _LSServer_OpenApplicationCommon(a1, 0, 0, 0, 0, a3, v5, a2, a5);
}

void _LSServer_OpenApplicationCommon(void *a1, void *a2, unsigned int a3, void *a4, void *a5, void *a6, unint64_t a7, void *a8, void *a9)
{
  v32[1] = *MEMORY[0x1E4F143B8];
  id v16 = a1;
  id v17 = a2;
  id v28 = a4;
  id v18 = a5;
  id v19 = a6;
  id v20 = a8;
  id v21 = a9;
  char v22 = (void *)MEMORY[0x18530F680]();
  if (a7) {
    _LSSchemeApprovalRememberForBouncebackCheck(v19, v16);
  }
  if (v16 && [v16 length])
  {
    if (!v17
      || FrontBoardServicesLibrary(void)::frameworkLibrary
      || (FrontBoardServicesLibrary(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices", 2)) != 0)
    {
      id v23 = _LSGetOptionsDictionaryContainingSourceApplication(v19, v17, 0, a3, v28, v18, 1, v20);
      uint64_t v24 = objc_alloc_init(_LSSpringBoardCall);
      [(_LSSpringBoardCall *)v24 setBundleIdentifier:v16];
      [(_LSSpringBoardCall *)v24 setLaunchOptions:v23];
      if ((a7 & 2) == 0) {
        [(_LSSpringBoardCall *)v24 setClientXPCConnection:v19];
      }
      [(_LSSpringBoardCall *)v24 setCallCompletionHandlerWhenFullyComplete:(a7 >> 2) & 1];
      v29[0] = MEMORY[0x1E4F143A8];
      v29[1] = 3221225472;
      v29[2] = ___ZL31_LSServer_OpenApplicationCommonP8NSStringP8BSActionbP9LSAppLinkP19_LSAppLinkOpenStateP15NSXPCConnectionmP12NSDictionaryIS0_P11objc_objectEU13block_pointerFvbP7NSErrorE_block_invoke;
      v29[3] = &unk_1E522BD40;
      id v30 = v21;
      [(_LSSpringBoardCall *)v24 callWithCompletionHandler:v29];
    }
    else if (v21)
    {
      id v27 = _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28798], 45, (uint64_t)"_LSServer_OpenApplicationCommon", 1233, 0);
      (*((void (**)(id, void, void *))v21 + 2))(v21, 0, v27);
    }
  }
  else if (v21)
  {
    uint64_t v31 = *MEMORY[0x1E4F28228];
    v32[0] = @"invalid input parameters";
    long long v25 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v32 forKeys:&v31 count:1];
    uint64_t v26 = _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -50, (uint64_t)"_LSServer_OpenApplicationCommon", 1228, v25);
    (*((void (**)(id, void, void *))v21 + 2))(v21, 0, v26);
  }
}

void sub_182A8450C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void _LSServer_OpenUserActivity(void *a1, void *a2, void *a3, char a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10)
{
  unint64_t v16 = a1;
  unint64_t v17 = a2;
  id v18 = a3;
  id v19 = a5;
  id v44 = a6;
  id v20 = a7;
  id v21 = a8;
  id v22 = a9;
  id v43 = a10;
  if (!(v16 | v17))
  {
    id v30 = v20;
    uint64_t v31 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v32 = objc_msgSend(NSString, "stringWithUTF8String:", "void _LSServer_OpenUserActivity(NSUUID *__strong, NSData *__strong, NSString *__strong, BOOL, NSString *__strong, LSAppLink *__strong, _LSAppLinkOpenState *__strong, NSDictionary<NSString *,id> *__strong, NSXPCConnection *__strong, __strong _LSDOpenServiceCompletionHandler)");
    [v31 handleFailureInFunction:v32, @"LSOpenOperation.mm", 292, @"Invalid parameter not satisfying: %@", @"uuidOrNil != nil || activityDataOrNil != nil" file lineNumber description];

    id v20 = v30;
  }
  id v23 = v44;
  if (!v18)
  {
    id v33 = v20;
    int v34 = [MEMORY[0x1E4F28B00] currentHandler];
    id v35 = objc_msgSend(NSString, "stringWithUTF8String:", "void _LSServer_OpenUserActivity(NSUUID *__strong, NSData *__strong, NSString *__strong, BOOL, NSString *__strong, LSAppLink *__strong, _LSAppLinkOpenState *__strong, NSDictionary<NSString *,id> *__strong, NSXPCConnection *__strong, __strong _LSDOpenServiceCompletionHandler)");
    [v34 handleFailureInFunction:v35, @"LSOpenOperation.mm", 293, @"Invalid parameter not satisfying: %@", @"activityType != nil" file lineNumber description];

    id v23 = v44;
    id v20 = v33;
    if (v19) {
      goto LABEL_5;
    }
LABEL_7:
    id v36 = v20;
    uint64_t v37 = [MEMORY[0x1E4F28B00] currentHandler];
    id v38 = objc_msgSend(NSString, "stringWithUTF8String:", "void _LSServer_OpenUserActivity(NSUUID *__strong, NSData *__strong, NSString *__strong, BOOL, NSString *__strong, LSAppLink *__strong, _LSAppLinkOpenState *__strong, NSDictionary<NSString *,id> *__strong, NSXPCConnection *__strong, __strong _LSDOpenServiceCompletionHandler)");
    [v37 handleFailureInFunction:v38, @"LSOpenOperation.mm", 294, @"Invalid parameter not satisfying: %@", @"bundleID != nil" file lineNumber description];

    id v23 = v44;
    id v20 = v36;
    goto LABEL_5;
  }
  if (!v19) {
    goto LABEL_7;
  }
LABEL_5:
  v45[0] = MEMORY[0x1E4F143A8];
  v45[1] = 3221225472;
  v45[2] = ___LSServer_OpenUserActivity_block_invoke;
  v45[3] = &unk_1E522FE20;
  id v41 = (id)v16;
  id v46 = v41;
  id v40 = (id)v17;
  id v47 = v40;
  id v39 = v18;
  id v48 = v39;
  id v24 = v19;
  id v49 = v24;
  char v55 = a4;
  id v25 = v23;
  id v50 = v25;
  id v26 = v20;
  id v51 = v26;
  id v27 = v22;
  id v52 = v27;
  id v28 = v21;
  id v53 = v28;
  id v29 = v43;
  id v54 = v29;
  _LSAsyncOpenContext(v45);
}

void sub_182A848F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17)
{
  id v26 = v24;
  id v27 = v25;

  _Unwind_Resume(a1);
}

void sub_182A84D70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

Class initFBSOpenApplicationService(void)
{
  if (!FrontBoardServicesLibrary(void)::frameworkLibrary) {
    FrontBoardServicesLibrary(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices", 2);
  }
  Class result = objc_getClass("FBSOpenApplicationService");
  classFBSOpenApplicationService = (uint64_t)result;
  getFBSOpenApplicationServiceClass = (uint64_t (*)(void))FBSOpenApplicationServiceFunction;
  return result;
}

{
  Class result;

  if (!FrontBoardServicesLibrary(void)::frameworkLibrary) {
    FrontBoardServicesLibrary(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices", 2);
  }
  Class result = objc_getClass("FBSOpenApplicationService");
  classFBSOpenApplicationService = (uint64_t)result;
  getFBSOpenApplicationServiceClass = (uint64_t (*)(void))FBSOpenApplicationServiceFunction;
  return result;
}

id FBSOpenApplicationServiceFunction(void)
{
  return (id)classFBSOpenApplicationService;
}

{
  return (id)classFBSOpenApplicationService;
}

void ___ZL19_LSAsyncOpenContextU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  _LSServer_DatabaseExecutionContext();
  int v2 = (os_unfair_lock_s *)objc_claimAutoreleasedReturnValue();
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = ___ZL19_LSAsyncOpenContextU13block_pointerFvvE_block_invoke_2;
  v3[3] = &unk_1E522D260;
  id v4 = *(id *)(a1 + 32);
  -[LSDBExecutionContext syncRead:](v2, v3);
}

void sub_182A84F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL19_LSAsyncOpenContextU13block_pointerFvvE_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void ___ZL24_LSOpenOperationGetQueuev_block_invoke()
{
  int v2 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v0 = dispatch_queue_create("LS open operation queue", v2);
  id v1 = (void *)_LSOpenOperationGetQueue(void)::result;
  _LSOpenOperationGetQueue(void)::Class result = (uint64_t)v0;
}

void ___ZL23_LSOpenOperationPerformP5NSURLP12NSFileHandleP8NSStringbS4_P12NSDictionaryIS4_P11objc_objectES9_PU42objcproto31LSOpenResourceOperationDelegate11objc_objectP15NSXPCConnectionU13block_pointerFvbP7NSErrorE_block_invoke(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    [a1[4] openResourceOperation:0 didFinishCopyingResource:v5];
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    v7[2] = ___ZL23_LSOpenOperationPerformP5NSURLP12NSFileHandleP8NSStringbS4_P12NSDictionaryIS4_P11objc_objectES9_PU42objcproto31LSOpenResourceOperationDelegate11objc_objectP15NSXPCConnectionU13block_pointerFvbP7NSErrorE_block_invoke_2;
    v7[3] = &unk_1E522FE48;
    id v8 = a1[5];
    id v9 = v5;
    id v10 = a1[6];
    id v11 = a1[7];
    id v12 = a1[8];
    id v13 = a1[9];
    _LSAsyncOpenContext(v7);
  }
  else
  {
    (*((void (**)(void))a1[9] + 2))();
  }
}

void sub_182A8512C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void ___ZL23_LSOpenOperationPerformP5NSURLP12NSFileHandleP8NSStringbS4_P12NSDictionaryIS4_P11objc_objectES9_PU42objcproto31LSOpenResourceOperationDelegate11objc_objectP15NSXPCConnectionU13block_pointerFvbP7NSErrorE_block_invoke_2(uint64_t a1)
{
  _LSGetOptionsDictionaryContainingSourceApplication(*(void **)(a1 + 32), 0, *(void **)(a1 + 40), 0, 0, 0, 0, *(void **)(a1 + 48));
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [v4 setObject:*(void *)(a1 + 40) forKeyedSubscript:getFBSOpenApplicationOptionKeyPayloadURL()];
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2) {
    [v4 setObject:v2 forKeyedSubscript:getFBSOpenApplicationOptionKeyPayloadAnnotation()];
  }
  [v4 setObject:MEMORY[0x1E4F1CC28] forKeyedSubscript:getFBSOpenApplicationOptionKeyActivateSuspended()];
  [v4 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:getFBSOpenApplicationOptionKeyDocumentOpen4LS()];
  id v3 = objc_alloc_init(_LSSpringBoardCall);
  [(_LSSpringBoardCall *)v3 setBundleIdentifier:*(void *)(a1 + 64)];
  [(_LSSpringBoardCall *)v3 setLaunchOptions:v4];
  [(_LSSpringBoardCall *)v3 setClientXPCConnection:*(void *)(a1 + 32)];
  [(_LSSpringBoardCall *)v3 setCallCompletionHandlerWhenFullyComplete:0];
  [(_LSSpringBoardCall *)v3 callWithCompletionHandler:*(void *)(a1 + 72)];
}

void sub_182A852AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _LSGetOptionsDictionaryContainingSourceApplication(void *a1, void *a2, void *a3, unsigned int a4, void *a5, void *a6, int a7, void *a8)
{
  v70[1] = *MEMORY[0x1E4F143B8];
  id v64 = a1;
  id v65 = a2;
  id v63 = a3;
  unint64_t v14 = a5;
  unint64_t v15 = a6;
  id v16 = a8;
  v62 = v16;
  if (v16)
  {
    uint64_t v17 = [v16 mutableCopy];
  }
  else
  {
    uint64_t v17 = [MEMORY[0x1E4F1CA60] dictionary];
  }
  id v18 = (void *)v17;
  if (v14 | v15)
  {
LABEL_9:
    if (!a7) {
      goto LABEL_16;
    }
    goto LABEL_10;
  }
  uint64_t v19 = objc_opt_class();
  uint64_t v20 = [v18 objectForKey:@"_LSAppLinkOpenStateLaunchOptionKey"];
  id v21 = (void *)v20;
  if (!v19 || !v20 || (objc_opt_isKindOfClass() & 1) != 0)
  {
    unint64_t v15 = (unint64_t)v21;
    goto LABEL_9;
  }

  unint64_t v15 = 0;
  if (!a7) {
    goto LABEL_16;
  }
LABEL_10:
  if (v15)
  {
    id v22 = [(id)v15 openConfiguration];
    id v23 = [v22 frontBoardOptions];

    if (v23 && [v23 count])
    {
      [v18 addEntriesFromDictionary:v23];
      [v18 removeObjectForKey:getFBSOpenApplicationOptionKeyPayloadIsValid4LS()];
      LOBYTE(a7) = 0;
    }
    else
    {
      LOBYTE(a7) = 1;
    }
  }
LABEL_16:
  [v18 removeObjectForKey:@"_LSAppLinkOpenStateLaunchOptionKey"];
  if (v65 || v14 || v15)
  {
    if (!FrontBoardServicesLibrary(void)::frameworkLibrary)
    {
      FrontBoardServicesLibrary(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices", 2);
      if (!FrontBoardServicesLibrary(void)::frameworkLibrary)
      {
LABEL_49:
        FrontBoardServicesLibrary(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices", 2);
        if (!FrontBoardServicesLibrary(void)::frameworkLibrary) {
          goto LABEL_53;
        }
        goto LABEL_50;
      }
    }
    if (v65 && getFBSOpenApplicationOptionKeyActions())
    {
      v70[0] = v65;
      id v24 = [MEMORY[0x1E4F1C978] arrayWithObjects:v70 count:1];
      [v18 setObject:v24 forKeyedSubscript:getFBSOpenApplicationOptionKeyActions()];
    }
    if (v14 && getFBSOpenApplicationOptionKeyAppLink4LS()) {
      [v18 setObject:v14 forKeyedSubscript:getFBSOpenApplicationOptionKeyAppLink4LS()];
    }
    if (v15)
    {
      id v25 = (id)v15;
      id v26 = [v25 browserState];
      if (v26)
      {
        BOOL v27 = getFBSOpenApplicationOptionKeyBrowserAppLinkState4LS() == 0;

        if (!v27)
        {
          id v28 = [v25 browserState];
          [v18 setObject:v28 forKeyedSubscript:getFBSOpenApplicationOptionKeyBrowserAppLinkState4LS()];
        }
      }
      id v29 = [v25 openConfiguration];
      id v30 = [v29 targetConnectionEndpoint];

      if (v30)
      {
        uint64_t v31 = [v18 objectForKeyedSubscript:@"LSTargetBSServiceConnectionEndpointKey"];
        BOOL v32 = v31 == 0;

        if (v32) {
          [v18 setObject:v30 forKeyedSubscript:@"LSTargetBSServiceConnectionEndpointKey"];
        }
      }
      id v33 = [v25 openConfiguration];
      int v34 = [v33 clickAttribution];

      if (v34)
      {
        if (getUISOpenApplicationOptionClickAttribution())
        {
          id v35 = [v18 objectForKeyedSubscript:getUISOpenApplicationOptionClickAttribution()];
          BOOL v36 = v35 == 0;

          if (v36) {
            [v18 setObject:v34 forKeyedSubscript:getUISOpenApplicationOptionClickAttribution()];
          }
        }
      }
      uint64_t v37 = [v25 openConfiguration];
      id v38 = [v37 pasteSharingToken];

      if (v38)
      {
        if (getUISOpenApplicationOptionPasteSharingToken())
        {
          id v39 = [v18 objectForKeyedSubscript:getUISOpenApplicationOptionPasteSharingToken()];
          BOOL v40 = v39 == 0;

          if (v40) {
            [v18 setObject:v38 forKeyedSubscript:getUISOpenApplicationOptionPasteSharingToken()];
          }
        }
      }
    }
    char v41 = a7 ^ 1;
    if (!v14) {
      char v41 = 1;
    }
    if ((v41 & 1) == 0 && getFBSOpenApplicationOptionKeyPayloadIsValid4LS()) {
      [v18 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:getFBSOpenApplicationOptionKeyPayloadIsValid4LS()];
    }
  }
  if (!FrontBoardServicesLibrary(void)::frameworkLibrary) {
    goto LABEL_49;
  }
LABEL_50:
  if (v65)
  {
    uint64_t v42 = [NSNumber numberWithBool:a4];
    [v18 setObject:v42 forKeyedSubscript:@"__UserActivity4LS"];
  }
  else
  {
    [v18 setObject:0 forKeyedSubscript:@"__UserActivity4LS"];
  }
LABEL_53:
  id v43 = [v18 objectForKeyedSubscript:@"__PayloadOptions"];
  BOOL v44 = v43 == 0;

  if (v44)
  {
    id v46 = [MEMORY[0x1E4F1CA60] dictionary];
    if (!v46) {
      goto LABEL_64;
    }
  }
  else
  {
    uint64_t v45 = [v18 objectForKeyedSubscript:@"__PayloadOptions"];
    id v46 = (void *)[v45 mutableCopy];

    if (!v46) {
      goto LABEL_64;
    }
  }
  [v18 setObject:v46 forKeyedSubscript:@"__PayloadOptions"];
  if (v64)
  {
    id v47 = [v46 objectForKeyedSubscript:@"UIApplicationLaunchOptionsSourceApplicationKey"];
    BOOL v48 = v47 == 0;

    if (!v48)
    {
      id v49 = [v64 _xpcConnection];
      BOOL v50 = _LSCheckEntitlementForXPCConnection(v49, @"com.apple.private.launchservices.canspecifysourceapplication") == 0;

      if (!v50) {
        goto LABEL_64;
      }
      [v46 removeObjectForKey:@"UIApplicationLaunchOptionsSourceApplicationKey"];
    }
    id v51 = [v64 _xpcConnection];
    id v52 = (void *)_LSCopyBundleIdentifierForXPCConnection(v51, 0);

    if (v52) {
      [v46 setObject:v52 forKeyedSubscript:@"UIApplicationLaunchOptionsSourceApplicationKey"];
    }
  }
LABEL_64:
  if (getUISOpenApplicationOptionClickAttribution())
  {
    id v53 = [v18 objectForKeyedSubscript:getUISOpenApplicationOptionClickAttribution()];
    BOOL v54 = v53 == 0;

    if (!v54)
    {
      if (v63)
      {
        char v55 = [v63 scheme];
        BOOL v56 = v55 == 0;

        if (!v56)
        {
          uint64_t v57 = [v63 scheme];
          if (![v57 caseInsensitiveCompare:@"http"])
          {
LABEL_72:

            goto LABEL_73;
          }
          uint64_t v58 = [v63 scheme];
          BOOL v59 = [v58 caseInsensitiveCompare:@"https"] == 0;

          if (v59) {
            goto LABEL_73;
          }
        }
      }
      [v18 removeObjectForKey:getUISOpenApplicationOptionClickAttribution()];
      uint64_t v57 = _LSDefaultLog();
      if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)LSVersionNumber buf = 67109379;
        int v67 = [v64 processIdentifier];
        __int16 v68 = 2113;
        id v69 = v63;
        _os_log_impl(&dword_182959000, v57, OS_LOG_TYPE_DEFAULT, "pid %i not allowed to set click attribution option for URL %{private}@.", buf, 0x12u);
      }
      goto LABEL_72;
    }
  }
LABEL_73:

  return v18;
}

void sub_182A85AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void ___ZL23_LSUpdateDefaultHandlerP18LSApplicationProxyP5NSURL_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = _LSDefaultLog();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    ___ZL23_LSUpdateDefaultHandlerP18LSApplicationProxyP5NSURL_block_invoke_cold_1();
  }

  MEMORY[0x185310460]();
}

void sub_182A85CD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL23_LSUpdateDefaultHandlerP18LSApplicationProxyP5NSURL_block_invoke_146(uint64_t a1, int a2, void *a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (a2)
  {
    id v6 = _LSDefaultLog();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = [*(id *)(a1 + 32) bundleIdentifier];
      int v8 = 138477827;
      id v9 = v7;
      _os_log_impl(&dword_182959000, v6, OS_LOG_TYPE_DEFAULT, "Set default handler to %{private}@", (uint8_t *)&v8, 0xCu);
    }
  }
  else
  {
    id v6 = _LSDefaultLog();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      ___ZL23_LSUpdateDefaultHandlerP18LSApplicationProxyP5NSURL_block_invoke_cold_1();
    }
  }

  MEMORY[0x185310460]();
}

void sub_182A85DE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t initFBSOpenApplicationOptionKeyPayloadIsValid4LS(void)
{
  dispatch_queue_t v0 = (void *)FrontBoardServicesLibrary(void)::frameworkLibrary;
  if (!FrontBoardServicesLibrary(void)::frameworkLibrary)
  {
    dispatch_queue_t v0 = dlopen("/System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices", 2);
    FrontBoardServicesLibrary(void)::frameworkLibrary = (uint64_t)v0;
  }
  uint64_t result = *(void *)dlsym(v0, "FBSOpenApplicationOptionKeyPayloadIsValid4LS");
  constantFBSOpenApplicationOptionKeyPayloadIsValid4LS = result;
  getFBSOpenApplicationOptionKeyPayloadIsValid4LS = FBSOpenApplicationOptionKeyPayloadIsValid4LSFunction;
  return result;
}

uint64_t FBSOpenApplicationOptionKeyPayloadIsValid4LSFunction(void)
{
  return constantFBSOpenApplicationOptionKeyPayloadIsValid4LS;
}

uint64_t initFBSOpenApplicationOptionKeyActions(void)
{
  dispatch_queue_t v0 = (void *)FrontBoardServicesLibrary(void)::frameworkLibrary;
  if (!FrontBoardServicesLibrary(void)::frameworkLibrary)
  {
    dispatch_queue_t v0 = dlopen("/System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices", 2);
    FrontBoardServicesLibrary(void)::frameworkLibrary = (uint64_t)v0;
  }
  uint64_t result = *(void *)dlsym(v0, "FBSOpenApplicationOptionKeyActions");
  constantFBSOpenApplicationOptionKeyActions = result;
  getFBSOpenApplicationOptionKeyActions = FBSOpenApplicationOptionKeyActionsFunction;
  return result;
}

uint64_t FBSOpenApplicationOptionKeyActionsFunction(void)
{
  return constantFBSOpenApplicationOptionKeyActions;
}

uint64_t initFBSOpenApplicationOptionKeyAppLink4LS(void)
{
  dispatch_queue_t v0 = (void *)FrontBoardServicesLibrary(void)::frameworkLibrary;
  if (!FrontBoardServicesLibrary(void)::frameworkLibrary)
  {
    dispatch_queue_t v0 = dlopen("/System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices", 2);
    FrontBoardServicesLibrary(void)::frameworkLibrary = (uint64_t)v0;
  }
  uint64_t result = *(void *)dlsym(v0, "FBSOpenApplicationOptionKeyAppLink4LS");
  constantFBSOpenApplicationOptionKeyAppLink4LS = result;
  getFBSOpenApplicationOptionKeyAppLink4LS = FBSOpenApplicationOptionKeyAppLink4LSFunction;
  return result;
}

uint64_t FBSOpenApplicationOptionKeyAppLink4LSFunction(void)
{
  return constantFBSOpenApplicationOptionKeyAppLink4LS;
}

uint64_t initFBSOpenApplicationOptionKeyBrowserAppLinkState4LS(void)
{
  dispatch_queue_t v0 = (void *)FrontBoardServicesLibrary(void)::frameworkLibrary;
  if (!FrontBoardServicesLibrary(void)::frameworkLibrary)
  {
    dispatch_queue_t v0 = dlopen("/System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices", 2);
    FrontBoardServicesLibrary(void)::frameworkLibrary = (uint64_t)v0;
  }
  uint64_t result = *(void *)dlsym(v0, "FBSOpenApplicationOptionKeyBrowserAppLinkState4LS");
  constantFBSOpenApplicationOptionKeyBrowserAppLinkState4LS = result;
  getFBSOpenApplicationOptionKeyBrowserAppLinkState4LS = FBSOpenApplicationOptionKeyBrowserAppLinkState4LSFunction;
  return result;
}

uint64_t FBSOpenApplicationOptionKeyBrowserAppLinkState4LSFunction(void)
{
  return constantFBSOpenApplicationOptionKeyBrowserAppLinkState4LS;
}

uint64_t initUISOpenApplicationOptionClickAttribution(void)
{
  dispatch_queue_t v0 = (void *)UIKitServicesLibrary(void)::frameworkLibrary;
  if (!UIKitServicesLibrary(void)::frameworkLibrary)
  {
    dispatch_queue_t v0 = dlopen("/System/Library/PrivateFrameworks/UIKitServices.framework/UIKitServices", 2);
    UIKitServicesLibrary(void)::frameworkLibrary = (uint64_t)v0;
  }
  uint64_t result = *(void *)dlsym(v0, "UISOpenApplicationOptionClickAttribution");
  constantUISOpenApplicationOptionClickAttribution = result;
  getUISOpenApplicationOptionClickAttribution = UISOpenApplicationOptionClickAttributionFunction;
  return result;
}

uint64_t UISOpenApplicationOptionClickAttributionFunction(void)
{
  return constantUISOpenApplicationOptionClickAttribution;
}

uint64_t initUISOpenApplicationOptionPasteSharingToken(void)
{
  dispatch_queue_t v0 = (void *)UIKitServicesLibrary(void)::frameworkLibrary;
  if (!UIKitServicesLibrary(void)::frameworkLibrary)
  {
    dispatch_queue_t v0 = dlopen("/System/Library/PrivateFrameworks/UIKitServices.framework/UIKitServices", 2);
    UIKitServicesLibrary(void)::frameworkLibrary = (uint64_t)v0;
  }
  uint64_t result = *(void *)dlsym(v0, "UISOpenApplicationOptionPasteSharingToken");
  constantUISOpenApplicationOptionPasteSharingToken = result;
  getUISOpenApplicationOptionPasteSharingToken = UISOpenApplicationOptionPasteSharingTokenFunction;
  return result;
}

uint64_t UISOpenApplicationOptionPasteSharingTokenFunction(void)
{
  return constantUISOpenApplicationOptionPasteSharingToken;
}

uint64_t initFBSOpenApplicationOptionKeyPayloadAnnotation(void)
{
  dispatch_queue_t v0 = (void *)FrontBoardServicesLibrary(void)::frameworkLibrary;
  if (!FrontBoardServicesLibrary(void)::frameworkLibrary)
  {
    dispatch_queue_t v0 = dlopen("/System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices", 2);
    FrontBoardServicesLibrary(void)::frameworkLibrary = (uint64_t)v0;
  }
  uint64_t result = *(void *)dlsym(v0, "FBSOpenApplicationOptionKeyPayloadAnnotation");
  constantFBSOpenApplicationOptionKeyPayloadAnnotation = result;
  getFBSOpenApplicationOptionKeyPayloadAnnotation = FBSOpenApplicationOptionKeyPayloadAnnotationFunction;
  return result;
}

uint64_t FBSOpenApplicationOptionKeyPayloadAnnotationFunction(void)
{
  return constantFBSOpenApplicationOptionKeyPayloadAnnotation;
}

uint64_t initFBSOpenApplicationOptionKeyActivateSuspended(void)
{
  dispatch_queue_t v0 = (void *)FrontBoardServicesLibrary(void)::frameworkLibrary;
  if (!FrontBoardServicesLibrary(void)::frameworkLibrary)
  {
    dispatch_queue_t v0 = dlopen("/System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices", 2);
    FrontBoardServicesLibrary(void)::frameworkLibrary = (uint64_t)v0;
  }
  uint64_t result = *(void *)dlsym(v0, "FBSOpenApplicationOptionKeyActivateSuspended");
  constantFBSOpenApplicationOptionKeyActivateSuspended = result;
  getFBSOpenApplicationOptionKeyActivateSuspended = FBSOpenApplicationOptionKeyActivateSuspendedFunction;
  return result;
}

uint64_t FBSOpenApplicationOptionKeyActivateSuspendedFunction(void)
{
  return constantFBSOpenApplicationOptionKeyActivateSuspended;
}

uint64_t initFBSOpenApplicationOptionKeyDocumentOpen4LS(void)
{
  dispatch_queue_t v0 = (void *)FrontBoardServicesLibrary(void)::frameworkLibrary;
  if (!FrontBoardServicesLibrary(void)::frameworkLibrary)
  {
    dispatch_queue_t v0 = dlopen("/System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices", 2);
    FrontBoardServicesLibrary(void)::frameworkLibrary = (uint64_t)v0;
  }
  uint64_t result = *(void *)dlsym(v0, "FBSOpenApplicationOptionKeyDocumentOpen4LS");
  constantFBSOpenApplicationOptionKeyDocumentOpen4LS = result;
  getFBSOpenApplicationOptionKeyDocumentOpen4LS = FBSOpenApplicationOptionKeyDocumentOpen4LSFunction;
  return result;
}

uint64_t FBSOpenApplicationOptionKeyDocumentOpen4LSFunction(void)
{
  return constantFBSOpenApplicationOptionKeyDocumentOpen4LS;
}

void ___ZL19_LSTryUniversalLinkP5NSURLP8NSStringP12NSDictionaryIS2_P11objc_objectEP15NSXPCConnectionU13block_pointerFvbE_block_invoke(uint64_t a1)
{
  id v2 = objc_alloc_init(_LSAppLinkOpenState);
  if (!v2)
  {
    int v8 = [MEMORY[0x1E4F28B00] currentHandler];
    id v9 = objc_msgSend(NSString, "stringWithUTF8String:", "void _LSTryUniversalLink(NSURL *__strong, NSString *__strong, NSDictionary<NSString *,id> *__strong, NSXPCConnection *__strong, void (^__strong)(BOOL))_block_invoke");
    [v8 handleFailureInFunction:v9 file:@"LSOpenOperation.mm" lineNumber:960 description:@"failed to create universal link state object"];
  }
  [(_LSAppLinkOpenState *)v2 setURL:*(void *)(a1 + 32)];
  [(_LSAppLinkOpenState *)v2 setXPCConnection:*(void *)(a1 + 40)];
  id v3 = *(void **)(a1 + 48);
  if (v3)
  {
    id v4 = (void *)[v3 mutableCopy];
    [v4 setObject:0 forKeyedSubscript:@"LSBlockUntilComplete"];
    [v4 setObject:0 forKeyedSubscript:@"ReferrerURL"];
    [v4 setObject:0 forKeyedSubscript:@"LSTargetBSServiceConnectionEndpointKey"];
    if (getUISOpenApplicationOptionClickAttribution()) {
      [v4 setObject:0 forKeyedSubscript:getUISOpenApplicationOptionClickAttribution()];
    }
    id v5 = objc_alloc_init(_LSOpenConfiguration);
    [(_LSOpenConfiguration *)v5 setFrontBoardOptions:v4];
    id v6 = [*(id *)(a1 + 48) objectForKeyedSubscript:@"ReferrerURL"];
    [(_LSOpenConfiguration *)v5 setReferrerURL:v6];

    id v7 = [*(id *)(a1 + 48) objectForKeyedSubscript:@"LSTargetBSServiceConnectionEndpointKey"];
    [(_LSOpenConfiguration *)v5 setTargetConnectionEndpoint:v7];

    [(_LSAppLinkOpenState *)v2 setOpenConfiguration:v5];
  }
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = ___ZL19_LSTryUniversalLinkP5NSURLP8NSStringP12NSDictionaryIS2_P11objc_objectEP15NSXPCConnectionU13block_pointerFvbE_block_invoke_2;
  v10[3] = &unk_1E522BD40;
  id v11 = *(id *)(a1 + 56);
  +[LSAppLink _openWithAppLink:0 state:v2 completionHandler:v10];
}

void sub_182A86458(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL19_LSTryUniversalLinkP5NSURLP8NSStringP12NSDictionaryIS2_P11objc_objectEP15NSXPCConnectionU13block_pointerFvbE_block_invoke_2(uint64_t a1, int a2)
{
  if (a2)
  {
    id v2 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
    v2();
  }
  else
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = ___ZL19_LSTryUniversalLinkP5NSURLP8NSStringP12NSDictionaryIS2_P11objc_objectEP15NSXPCConnectionU13block_pointerFvbE_block_invoke_3;
    v3[3] = &unk_1E522F248;
    id v4 = *(id *)(a1 + 32);
    _LSAsyncOpenContext(v3);
  }
}

void sub_182A86570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL19_LSTryUniversalLinkP5NSURLP8NSStringP12NSDictionaryIS2_P11objc_objectEP15NSXPCConnectionU13block_pointerFvbE_block_invoke_3(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void ___ZL31_LSServer_OpenApplicationCommonP8NSStringP8BSActionbP9LSAppLinkP19_LSAppLinkOpenStateP15NSXPCConnectionmP12NSDictionaryIS0_P11objc_objectEU13block_pointerFvbP7NSErrorE_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = v4;
  if (v4)
  {
    uint64_t v6 = [v4 code];
    if (v6)
    {
      id v7 = _LSDefaultLog();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        int v8 = softLinkFBSOpenApplicationErrorCodeToString(v6);
        int v9 = 138412290;
        uint64_t v10 = v8;
        _os_log_impl(&dword_182959000, v7, OS_LOG_TYPE_DEFAULT, "application launch failed - received error %@", (uint8_t *)&v9, 0xCu);
      }
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_182A866A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t initFBSOpenApplicationErrorCodeToString(uint64_t a1)
{
  id v2 = (void *)FrontBoardServicesLibrary(void)::frameworkLibrary;
  if (!FrontBoardServicesLibrary(void)::frameworkLibrary)
  {
    id v2 = dlopen("/System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices", 2);
    FrontBoardServicesLibrary(void)::frameworkLibrary = (uint64_t)v2;
  }
  id v3 = (uint64_t (*)(uint64_t))dlsym(v2, "FBSOpenApplicationErrorCodeToString");
  softLinkFBSOpenApplicationErrorCodeToString = v3;

  return v3(a1);
}

Class initUIActivityContinuationAction(void)
{
  if (!UIKitLibrary(void)::frameworkLibrary) {
    UIKitLibrary(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/Frameworks/UIKit.framework/UIKit", 2);
  }
  Class result = objc_getClass("UIActivityContinuationAction");
  classUIActivityContinuationAction = (uint64_t)result;
  getUIActivityContinuationActionClass = (uint64_t (*)(void))UIActivityContinuationActionFunction;
  return result;
}

id UIActivityContinuationActionFunction(void)
{
  return (id)classUIActivityContinuationAction;
}

uint64_t _LSPersistentIdentifierCompare(void *a1, void *a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  size_t v4 = [a1 length];
  uint64_t v5 = [a2 length];
  uint64_t v6 = 0;
  if (v4 >= 0x1C && v4 == v5)
  {
    id v7 = a1;
    int v8 = (const unsigned __int8 *)[v7 bytes];
    id v9 = a2;
    uint64_t v10 = (const unsigned __int8 *)[v9 bytes];
    uint64_t v11 = (LaunchServices::PersistentIdentifier *)memcmp(v8, v10, v4);
    if (!v11)
    {
      id v16 = LaunchServices::PersistentIdentifier::getLog(v11);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG)) {
        _LSPersistentIdentifierCompare_cold_1();
      }
      uint64_t v6 = 100;
      goto LABEL_13;
    }
    if (*v8 == *v10)
    {
      id v12 = v8 + 12;
      id v13 = v10 + 12;
      unint64_t v14 = (LaunchServices::PersistentIdentifier *)uuid_compare(v12, v10 + 12);
      int v15 = (int)v14;
      id v16 = LaunchServices::PersistentIdentifier::getLog(v14);
      BOOL v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG);
      if (!v15)
      {
        if (v17) {
          _LSPersistentIdentifierCompare_cold_2();
        }
        uint64_t v6 = 200;
        goto LABEL_13;
      }
      if (v17)
      {
        int v24 = 134219266;
        id v25 = v7;
        __int16 v26 = 2048;
        id v27 = v9;
        __int16 v28 = 1040;
        int v29 = 16;
        __int16 v30 = 2096;
        uint64_t v31 = v12;
        __int16 v32 = 1040;
        int v33 = 16;
        __int16 v34 = 2096;
        id v35 = v13;
        id v18 = "Persistent identifiers %p and %p have different databases (%{uuid_t}.16P vs. %{uuid_t}.16P)";
        uint64_t v19 = v16;
        uint32_t v20 = 54;
LABEL_19:
        _os_log_debug_impl(&dword_182959000, v19, OS_LOG_TYPE_DEBUG, v18, (uint8_t *)&v24, v20);
      }
    }
    else
    {
      id v16 = LaunchServices::PersistentIdentifier::getLog(v11);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        int v22 = *v8;
        int v23 = *v10;
        int v24 = 134218752;
        id v25 = v7;
        __int16 v26 = 2048;
        id v27 = v9;
        __int16 v28 = 1024;
        int v29 = v22;
        __int16 v30 = 1024;
        LODWORD(v31) = v23;
        id v18 = "Persistent identifiers %p and %p have different versions (%u vs. %u)";
        uint64_t v19 = v16;
        uint32_t v20 = 34;
        goto LABEL_19;
      }
    }
    uint64_t v6 = 0;
LABEL_13:
  }
  return v6;
}

id LaunchServices::PersistentIdentifier::getLog(LaunchServices::PersistentIdentifier *this)
{
  if (LaunchServices::PersistentIdentifier::getLog(void)::once != -1) {
    dispatch_once(&LaunchServices::PersistentIdentifier::getLog(void)::once, &__block_literal_global_56);
  }
  id v1 = (void *)LaunchServices::PersistentIdentifier::getLog(void)::result;

  return v1;
}

__CFString *_LSPersistentIdentifierGetDebugDescription(void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = [a1 length];
  if (v2 < 0x1C)
  {
    uint64_t v10 = 0;
  }
  else
  {
    unint64_t v3 = v2;
    id v4 = a1;
    uint64_t v5 = (unsigned __int8 *)[v4 bytes];
    memset(out, 0, 37);
    uuid_unparse(v5 + 12, out);
    uint64_t v6 = (void *)[objc_alloc(MEMORY[0x1E4F28E78]) initWithFormat:@"<LSPersistentIdentifier %p> { v = %u, t = 0x%llx, u = 0x%llx, db = %s", v4, *v5, *((unsigned int *)v5 + 2), *((unsigned int *)v5 + 1), out];
    unint64_t v7 = v3 - 28;
    if (v7)
    {
      int v8 = (void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytesNoCopy:v5 + 28 length:v7 freeWhenDone:0];
      id v9 = [v8 description];
      [v6 appendFormat:@", %@", v9];
    }
    [v6 appendString:@" }"];
    uint64_t v10 = (__CFString *)[v6 copy];
  }
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = &stru_1ECB1A570;
  }
  id v12 = v11;

  return v12;
}

void sub_182A86BB4(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

id _LSPersistentIdentifierGetKnowledgeUUIDInternal(void *a1)
{
  if ((unint64_t)[a1 length] <= 0x1B)
  {
    uint64_t v5 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v6 = [NSString stringWithUTF8String:"NSUUID *_LSPersistentIdentifierGetKnowledgeUUIDInternal(const __strong LSPersistentIdentifier _Nonnull)"];
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, @"LSPersistentIdentifier.mm", 102, @"persistent identifier of length %zu is too short to extract database UUID!", objc_msgSend(a1, "length"));
  }
  uint64_t v2 = [a1 bytes];
  unint64_t v3 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDBytes:v2 + 12];

  return v3;
}

void sub_182A86CC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSPersistentIdentifierGetKnowledgeUUID4CoreDevice(void *a1)
{
  if ((unint64_t)[a1 length] < 0x1C)
  {
    uint64_t v2 = 0;
  }
  else
  {
    uint64_t v2 = _LSPersistentIdentifierGetKnowledgeUUIDInternal(a1);
  }

  return v2;
}

id _LSPersistentIdentifierGetSequenceNumber4CoreDevice(void *a1)
{
  if ((unint64_t)[a1 length] < 0x24)
  {
    uint64_t v2 = 0;
  }
  else
  {
    uint64_t v2 = [NSNumber numberWithUnsignedLongLong:_LSApplicationRecordPersistentIdentifierGetSequenceNumberInternal(a1)];
  }

  return v2;
}

void ___ZN14LaunchServices20PersistentIdentifierL6getLogEv_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.launchservices", "record-pi");
  id v1 = (void *)LaunchServices::PersistentIdentifier::getLog(void)::result;
  LaunchServices::PersistentIdentifier::getLog(void)::Class result = (uint64_t)v0;
}

uint64_t _LSPlistAdd(uint64_t a1, void *a2)
{
  id v4 = (void *)MEMORY[0x18530F680]();
  uint64_t v5 = 0;
  if (a1 && a2)
  {
    if (_NSIsNSDictionary())
    {
      uint64_t v6 = _LSPlistCompact(a2);
      unint64_t v7 = v6;
      if (v6)
      {
        [v6 length];
        [v7 bytes];
        uint64_t v5 = CSStoreAllocUnitWithData();
      }
      else
      {
        uint64_t v5 = 0;
      }
    }
    else
    {
      uint64_t v5 = 0;
    }
  }
  return v5;
}

void sub_182A86ECC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSPlistRemove(uint64_t result, int a2)
{
  if (result)
  {
    if (a2) {
      return CSStoreFreeUnit();
    }
  }
  return result;
}

void _LSPlistGetVisualizationFunctions(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = LaunchServices::PropertyLists::display;
  a1[2] = 0;
}

BOOL LaunchServices::PropertyLists::display(LaunchServices::PropertyLists *this, LSContext *a2, uint64_t a3, CSStore2::AttributedStringWriter *a4, LaunchServices::DumpWriter *a5)
{
  int v8 = _LSPlistGet(*(void *)this, a3);
  id v9 = _LSPlistDataGetDictionary(v8, 0);

  uint64_t v10 = (void *)[v9 mutableCopy];
  if (v10)
  {
    [v10 removeObjectForKey:*MEMORY[0x1E4F1CC50]];
    uint64_t v11 = [v10 count];
    id v12 = CSStore2::AttributedStringWriter::link(a4, *(unsigned int *)(*(void *)this + 1616), a3, 0);
    CSStore2::AttributedStringWriter::format(a4, 0, &cfstr_LuValues.isa, v11, v12);

    id v13 = [v10 description];
    if (v13) {
      CSStore2::AttributedStringWriter::string(a4, v13);
    }
  }
  return v10 != 0;
}

void sub_182A8704C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSPlistCompact(void *a1)
{
  if (a1)
  {
    uint64_t v2 = (void *)MEMORY[0x18530F680]();
    BOOL v9 = 0;
    unint64_t v3 = (void *)_LSPlistCreateTransformed(a1, (uint64_t)_LSPlistCompactString, &v9);
    id v4 = [MEMORY[0x1E4F28F98] dataWithPropertyList:v3 format:200 options:0 error:0];
    uint64_t v5 = v4;
    if (v4 && v9)
    {
      uint64_t v6 = objc_msgSend(MEMORY[0x1E4F1CA58], "dataWithCapacity:", objc_msgSend(v4, "length") + 4);
      [v6 appendBytes:&_LSPlistCompactedMarker length:4];
      [v6 appendData:v5];
      uint64_t v7 = [v6 copy];

      uint64_t v5 = (void *)v7;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

void sub_182A87198(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A87254(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSGetPluginNotificationAndIconCacheQueue()
{
  if (_LSGetPluginNotificationAndIconCacheQueue::once != -1) {
    dispatch_once(&_LSGetPluginNotificationAndIconCacheQueue::once, &__block_literal_global_58);
  }
  os_log_t v0 = (void *)_LSGetPluginNotificationAndIconCacheQueue::result;

  return v0;
}

void LSPluginSendNotification(void *a1, uint64_t a2, const void *a3)
{
  id v5 = a1;
  if (CFDictionaryGetCount((CFDictionaryRef)a3) >= 1 && -[_LSDatabase isSeeded]((uint64_t)v5))
  {
    _LSDatabaseCommit((uint64_t)v5);
    CFRetain(a3);
    uint64_t v6 = _LSGetPluginNotificationAndIconCacheQueue();
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    v7[2] = __LSPluginSendNotification_block_invoke;
    v7[3] = &__block_descriptor_48_e5_v8__0l;
    void v7[4] = a2;
    v7[5] = a3;
    dispatch_async(v6, v7);
  }
}

void sub_182A87460(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __LSPluginSendNotification_block_invoke(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)MEMORY[0x18530F680]();
  unint64_t v3 = _LSDefaultLog();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    int v7 = 138412546;
    uint64_t v8 = v4;
    __int16 v9 = 2112;
    uint64_t v10 = v5;
    _os_log_impl(&dword_182959000, v3, OS_LOG_TYPE_INFO, "sending plugin notification %@ with %@", (uint8_t *)&v7, 0x16u);
  }

  DistributedCenter = CFNotificationCenterGetDistributedCenter();
  CFNotificationCenterPostNotificationWithOptions(DistributedCenter, *(CFNotificationName *)(a1 + 32), 0, *(CFDictionaryRef *)(a1 + 40), 2uLL);
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

void LSPluginAddInfoToPayloadDict(void *a1, __CFDictionary *a2, int a3, uint64_t a4, int a5)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v8 = a1;
  __int16 v9 = v8;
  if (a5)
  {
    id v10 = v8;
    if (_LSGetPlugin((uint64_t)v10, a3))
    {
      uint64_t v11 = (void *)_CSStringCopyCFString();
      if (_LSIsNewsWidgetBundleIdentifier(v11))
      {
        id v12 = +[LSApplicationRestrictionsManager sharedInstance]();
        BOOL v13 = -[LSApplicationRestrictionsManager isAppExtensionRestricted:]((BOOL)v12, v11);

        if (v13)
        {
          unint64_t v14 = _LSDefaultLog();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(v27[0]) = 138412290;
            *(void *)((char *)v27 + 4) = v11;
            _os_log_impl(&dword_182959000, v14, OS_LOG_TYPE_DEFAULT, "plugin %@ is restricted for notifications", (uint8_t *)v27, 0xCu);
          }

          goto LABEL_33;
        }
      }
    }
  }
  id v15 = v9;
  if (_LSGetPlugin((uint64_t)v15, a3)) {
    id v16 = (const void *)_CSStringCopyCFString();
  }
  else {
    id v16 = 0;
  }

  id v17 = v15;
  uint64_t v18 = _LSGetPlugin((uint64_t)v17, a3);
  if (v18)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint32_t v20 = (const void *)_CSStringCopyCFString();
    id v21 = (const void *)_CSStringCopyCFString();
    int v22 = (const void *)_CSStringCopyCFString();
    long long v23 = *(_OWORD *)(v18 + 44);
    v27[0] = *(_OWORD *)(v18 + 28);
    v27[1] = v23;
    CFStringRef v24 = _LSVersionNumberCopyStringRepresentation(v27);
    id v25 = _LSAliasGetPath(v17, *(_DWORD *)v18);
    if (v25) {
      CFDictionaryAddValue(Mutable, @"_LSBundlePath", v25);
    }

    if (v20)
    {
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F1CFF8], v20);
      CFRelease(v20);
    }
    if (v21)
    {
      CFDictionaryAddValue(Mutable, @"NSExtensionIdentifier", v21);
      CFRelease(v21);
    }
    if (v22)
    {
      CFDictionaryAddValue(Mutable, @"LSEffectiveIdentifier", v22);
      CFRelease(v22);
    }
    if (v24)
    {
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F1D020], v24);
      CFRelease(v24);
    }

    BOOL v26 = Mutable != 0;
    if (v16 && Mutable)
    {
      CFDictionaryAddValue(a2, v16, Mutable);
      BOOL v26 = 1;
    }
    else if (!v16)
    {
      goto LABEL_31;
    }
  }
  else
  {

    if (!v16) {
      goto LABEL_33;
    }
    Mutable = 0;
    BOOL v26 = 0;
  }
  CFRelease(v16);
LABEL_31:
  if (v26) {
    CFRelease(Mutable);
  }
LABEL_33:
}

void sub_182A87890(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSPluginAdd(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = v3;
  if (v3 && *((void *)v3 + 1))
  {
    *(_DWORD *)(a2 + 24) = (int)CFAbsoluteTimeGetCurrent();
    uint64_t v5 = CSStoreAllocUnitWithData();
    if (v5
      && !_LSBindableActivate(v4, v5)
      && (!*(_DWORD *)(a2 + 176) || !_LSBindableActivate(v4, v5))
      && !_LSBindableActivate(v4, v5)
      && !_LSBindableActivate(v4, v5))
    {
      _LSBindableActivate(v4, v5);
    }
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

void sub_182A87A70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSPluginComparePriority_BindableComparitor()
{
  return 0;
}

void _LSPluginRemove(void *a1, int a2)
{
  id v3 = a1;
  uint64_t v4 = v3;
  if (v3)
  {
    if (a2)
    {
      if (*((void *)v3 + 1))
      {
        uint64_t v5 = (int *)_LSGetPlugin((uint64_t)v3, a2);
        if (v5)
        {
          int v18 = v5[24];
          int v19 = *v5;
          unsigned int v12 = v5[26];
          unsigned int v13 = v5[28];
          int v14 = v5[34];
          int v15 = v5[23];
          int v16 = v5[36];
          int v17 = v5[35];
          int v10 = v5[38];
          unsigned int v11 = v5[29];
          int v9 = v5[42];
          int v20 = v5[44];
          int v6 = v5[58];
          _LSBindableDeactivate(v4, a2);
          if (v20) {
            _LSBindableDeactivate(v4, a2);
          }
          _LSBindableDeactivate(v4, a2);
          _LSBindableDeactivate(v4, a2);
          _CSStringRelease();
          if (v6)
          {
            uint64_t v22 = MEMORY[0x1E4F143A8];
            uint64_t v23 = 3221225472;
            CFStringRef v24 = ___LSPluginRemove_block_invoke;
            id v25 = &unk_1E522BC50;
            id v26 = v4;
            _CSArrayEnumerateAllValues();
            _CSArrayDispose();
          }
          _CSStringRelease();
          _CSStringRelease();
          _CSStringRelease();
          _CSStringRelease();
          _CSStringRelease();
          _CSStringRelease();
          _CSStringRelease();
          _CSStringRelease();
          _CSStringRelease();
          _CSStringRelease();
          _CSStringRelease();
          _CSStringRelease();
          _CSStringRelease();
          _LSPlistRemove((uint64_t)v4, v17);
          _LSPlistRemove((uint64_t)v4, v16);
          _LSDatabaseDisposeStringArray(v4, v15);
          _LSPlistRemove((uint64_t)v4, v14);
          if (v19) {
            _LSAliasRemove(v4, v19);
          }
          if (v18) {
            _LSAliasRemove(v4, v18);
          }
          LaunchServices::LocalizedString::Remove((LaunchServices::LocalizedString *)v4, (_LSDatabase *)v13);
          LaunchServices::LocalizedString::Remove((LaunchServices::LocalizedString *)v4, (_LSDatabase *)v12);
          LaunchServices::LocalizedString::Remove((LaunchServices::LocalizedString *)v4, (_LSDatabase *)v11);
          _LSPlistRemove((uint64_t)v4, v10);
          CSStoreFreeUnit();
          if ((v9 & 4) != 0)
          {
            CFStringRef v7 = (const __CFString *)_CSStringCopyCFString();
            if (v7)
            {
              int v21 = 0;
              uint64_t v8 = _LSPluginFindWithPlatformInfo(v4, 0, v7, 1, 0, 0, &v21, 0);
              if (v8 && (*(_DWORD *)(v8 + 168) & 0xC) == 8) {
                _CSStoreWriteToUnit();
              }
              CFRelease(v7);
            }
          }
        }
      }
    }
  }
}

void sub_182A87E8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSPluginUnregister(void *a1, int a2)
{
  id v3 = a1;
  int v4 = *(_DWORD *)(_LSGetPlugin((uint64_t)v3, a2) + 224);
  uint64_t v5 = (const void *)_CSStringCopyCFString();
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v7 = _LSBundleGet(v3, v4);
  if (v7)
  {
    int v8 = *(_DWORD *)(v7 + 476);
    if (v8)
    {
      v11[5] = MEMORY[0x1E4F143A8];
      v11[6] = 3221225472;
      v11[7] = ___LSPluginUnregister_block_invoke;
      v11[8] = &unk_1E522FFB0;
      int v13 = a2;
      id v12 = v3;
      int v14 = v8;
      int v15 = v4;
      _CSArrayEnumerateAllValues();
    }
  }
  if (v5)
  {
    if (IconServicesLibrary(void)::frameworkLibrary
      || (IconServicesLibrary(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/IconServices.framework/IconServices", 2)) != 0)
    {
      int v9 = _LSGetPluginNotificationAndIconCacheQueue();
      v11[0] = MEMORY[0x1E4F143A8];
      v11[1] = 3221225472;
      v11[2] = ___LSPluginUnregister_block_invoke_2;
      v11[3] = &__block_descriptor_40_e5_v8__0l;
      v11[4] = v5;
      dispatch_async(v9, v11);
    }
    else
    {
      CFRelease(v5);
    }
  }
  LSPluginAddInfoToPayloadDict(v3, Mutable, a2, 0, 0);
  _LSPluginRemove(v3, a2);
  if (Mutable)
  {
    LSPluginSendNotification(v3, @"com.apple.LaunchServices.pluginsunregistered", Mutable);
    CFRelease(Mutable);
  }

  return 0;
}

void sub_182A880CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void _LSPluginGetVisualizationFunctions(unsigned int *(**a1)(LaunchServices::Plugins *this, LSContext *a2, int a3)@<X8>)
{
  *a1 = LaunchServices::Plugins::getSummary;
  a1[1] = (unsigned int *(*)(LaunchServices::Plugins *, LSContext *, int))LaunchServices::Plugins::display;
  a1[2] = 0;
}

unsigned int *LaunchServices::Plugins::getSummary(LaunchServices::Plugins *this, LSContext *a2, int a3)
{
  int v4 = (unsigned int *)_LSGetPlugin(*(void *)this, a3);
  if (v4)
  {
    uint64_t v5 = (int *)v4;
    uint64_t v6 = LaunchServices::LocalizedString::Get(*(LaunchServices::LocalizedString **)this, (_LSDatabase *)v4[26]);
    if (!v6
      || (LaunchServices::LocalizedString::localizeUnsafely(v6, *(void **)this, 0),
          (int v4 = (unsigned int *)objc_claimAutoreleasedReturnValue()) == 0))
    {
      int v4 = (unsigned int *)_CSStringCopyCFString();
      if (!v4)
      {
        _LSAliasGetPath(*(void **)this, *v5);
        int v4 = (unsigned int *)objc_claimAutoreleasedReturnValue();
      }
    }
  }

  return v4;
}

BOOL LaunchServices::Plugins::display(LaunchServices::Plugins *this, LSContext *a2, unsigned int a3, CSStore2::AttributedStringWriter *a4, LaunchServices::DumpWriter *a5)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  int v8 = (unsigned int *)_LSGetPlugin(*(void *)this, a3);
  if (v8)
  {
    int v9 = *(void **)this;
    uint64_t v36 = 0;
    int IsValid = _LSPluginIsValid(v9, a3, (uint64_t)v8, 0, 0, &v36);
    unsigned int v11 = v36;
    id v12 = v11;
    if (!IsValid)
    {
      uint64_t v30 = MEMORY[0x1E4F143A8];
      uint64_t v31 = 3221225472;
      __int16 v32 = ___ZN14LaunchServices7PluginsL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke;
      int v33 = &unk_1E522BA28;
      id v35 = a4;
      __int16 v34 = v11;
      CSStore2::AttributedStringWriter::withWarningColors();
    }
    CSStore2::AttributedStringWriter::link(a4, *(unsigned int *)(*(void *)this + 1596), v8[1], 0);
    int v13 = (NSString *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::string(a4, &cfstr_Container.isa, v13);

    uint64_t v14 = _LSContainerGet();
    int v15 = (unsigned __int16 *)v14;
    if (v14)
    {
      _LSContainerStateGetDescription(*(char *)(v14 + 2));
      int v16 = (NSString *)objc_claimAutoreleasedReturnValue();
      CSStore2::AttributedStringWriter::string(a4, &cfstr_MountState.isa, v16);
      int v17 = [NSNumber numberWithBool:(*v15 >> 1) & 1];
      CSStore2::AttributedStringWriter::number(a4, &cfstr_Isonrootvolume.isa, v17);

      int v18 = [NSNumber numberWithBool:(*v15 >> 4) & 1];
      CSStore2::AttributedStringWriter::number(a4, &cfstr_Issystemmanage.isa, v18);
    }
    CSStore2::AttributedStringWriter::stringArray(a4, &cfstr_MachOUuids.isa);
    LaunchServices::DumpWriter::platform(a4, &cfstr_Platform.isa, v8[5]);
    _LSSliceMaskWriteDescription(a4);
    _LSBundleBaseFlagsWriteDescription(a4);
    CSStore2::AttributedStringWriter::string(a4, &cfstr_Identifier.isa);
    CSStore2::AttributedStringWriter::string(a4, &cfstr_Bundleid.isa);
    CSStore2::AttributedStringWriter::string(a4, &cfstr_Effectiveid.isa);
    CSStore2::AttributedStringWriter::string(a4, &cfstr_Teamid.isa);
    CSStore2::AttributedStringWriter::string(a4, &cfstr_Name.isa);
    CSStore2::AttributedStringWriter::string(a4, &cfstr_Displayname.isa);
    CSStore2::AttributedStringWriter::childUnit(a4, &cfstr_Localizednames.isa);
    CSStore2::AttributedStringWriter::childUnit(a4, &cfstr_Localizedshort.isa);
    CSStore2::AttributedStringWriter::childUnit(a4, &cfstr_Localizedmicro.isa);
    CSStore2::AttributedStringWriter::link(a4, *(unsigned int *)(*(void *)this + 20), v8[56], 0);
    int v19 = (NSString *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::string(a4, &cfstr_Parent.isa, v19);

    CSStore2::AttributedStringWriter::link(a4, *(unsigned int *)(*(void *)this + 1600), *v8, 0);
    int v20 = (NSString *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::string(a4, &cfstr_Path.isa, v20);

    LaunchServices::DumpWriter::directoryClass((uint64_t)a4, @"directory", *((unsigned __int8 *)v8 + 148));
    CSStore2::AttributedStringWriter::link(a4, *(unsigned int *)(*(void *)this + 1600), v8[24], 0);
    int v21 = (NSString *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::string(a4, &cfstr_Datacontainer.isa, v21);

    unsigned int v29 = 0;
    uint64_t v28 = 0;
    _LSExtensionPointFindWithStringID(*(void **)this, v8[45], v8[5], 0, &v29, &v28);
    CSStore2::AttributedStringWriter::link(a4, *(unsigned int *)(*(void *)this + 1608), v29, 0);
    uint64_t v22 = (NSString *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::string(a4, &cfstr_ExtensionPoint_1.isa, v22);

    CSStore2::AttributedStringWriter::string(a4, &cfstr_RawExtensionPo.isa);
    CSStore2::AttributedStringWriter::string(a4, &cfstr_ExtensionPoint_2.isa);
    long long v23 = *(_OWORD *)(v8 + 11);
    *(_OWORD *)v40._opaque = *(_OWORD *)(v8 + 7);
    *(_OWORD *)&v40._opaque[16] = v23;
    LaunchServices::DumpWriter::version(a4, &cfstr_Version.isa, &v40);
    long long v24 = *(_OWORD *)(v8 + 19);
    *(_OWORD *)v39._opaque = *(_OWORD *)(v8 + 15);
    *(_OWORD *)&v39._opaque[16] = v24;
    LaunchServices::DumpWriter::version(a4, &cfstr_Sdkversion.isa, &v39);
    CSStore2::AttributedStringWriter::string(a4, &cfstr_Uuid_0.isa);
    CSStore2::AttributedStringWriter::string(a4, &cfstr_Codeinfoid_0.isa);
    CSStore2::AttributedStringWriter::string(a4, &cfstr_Signerorg.isa);
    CSStore2::AttributedStringWriter::string(a4, &cfstr_SignerIdentity.isa);
    id v25 = [NSNumber numberWithUnsignedInt:v8[40]];
    CSStore2::AttributedStringWriter::number(a4, &cfstr_CodeSignatureV.isa, v25);

    CSStore2::AttributedStringWriter::beginFlags(a4, &cfstr_Flags.isa);
    int v37 = 255;
    char v38 = 1;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v37) = 0;
    char v38 = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v37) = 0;
    char v38 = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v37) = 0;
    char v38 = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v37) = 0;
    char v38 = 0;
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::endFlags(a4);
    if (*((unsigned char *)v8 + 149))
    {
      _LSProfileValidationStateGetVisualizationDescription(*((unsigned __int8 *)v8 + 149));
      id v26 = (NSString *)objc_claimAutoreleasedReturnValue();
      CSStore2::AttributedStringWriter::string(a4, &cfstr_Validation.isa, v26);
    }
    CSStore2::AttributedStringWriter::timestamp(a4, &cfstr_RegDate.isa, (double)(int)v8[6]);
    CSStore2::AttributedStringWriter::string(a4, &cfstr_Appprotectione.isa);
    if (v8[35]) {
      CSStore2::AttributedStringWriter::childUnit(a4, &cfstr_Entitlements_0.isa);
    }
    if (v8[36]) {
      CSStore2::AttributedStringWriter::childUnit(a4, &cfstr_Grpcontainers.isa);
    }
    if (v8[34]) {
      CSStore2::AttributedStringWriter::childUnit(a4, &cfstr_Pkdict.isa);
    }
    if (v8[45])
    {
      if (v29) {
        CSStore2::AttributedStringWriter::childUnit(a4, &cfstr_Sdkdata.isa);
      }
      else {
        CSStore2::AttributedStringWriter::string(a4, &cfstr_Sdkdata.isa, &stru_1ECB1A570.isa);
      }
    }
  }
  return v8 != 0;
}

void sub_182A88A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_182A88B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN14LaunchServices7PluginsL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke(uint64_t a1)
{
  return CSStore2::AttributedStringWriter::format(*(CSStore2::AttributedStringWriter **)(a1 + 40), 0, &cfstr_InvalidPlugin.isa, *(void *)(a1 + 32));
}

void OUTLINED_FUNCTION_1_7(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void sub_182A88CD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A88DE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A88E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_182A88FB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A890C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A89178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A89264(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_182A8955C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);

  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)va);
  _Unwind_Resume(a1);
}

void *std::function<BOOL ()(objc_object *)>::operator()(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3)
  {
    uint64_t v4 = (*(uint64_t (**)(uint64_t, id *))(*(void *)v3 + 48))(v3, &v6);

    return (void *)v4;
  }
  else
  {
    Class result = std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  return result;
}

void sub_182A896A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

id LaunchServices::LSStatePlist::saveToDisk(uint64_t a1)
{
  v26[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 48);
  id v22 = 0;
  uint64_t v3 = [MEMORY[0x1E4F28F98] dataWithPropertyList:v2 format:200 options:0 error:&v22];
  id v4 = v22;
  if (v3)
  {
    id v5 = [*(id *)a1 URLByAppendingPathExtension:@".safesave"];
    uint64_t v6 = open_dprotected_np((const char *)[v5 fileSystemRepresentation], 513, 4, 0, 484);
    if ((v6 & 0x80000000) != 0)
    {
      uint64_t v17 = *__error();
      uint64_t v23 = *MEMORY[0x1E4F28228];
      long long v24 = @"open_dprotected_np failed";
      uint64_t v7 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v24 forKeys:&v23 count:1];
      uint64_t v18 = _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28798], v17, (uint64_t)"saveToDisk", 57, v7);

      id v4 = (id)v18;
      goto LABEL_9;
    }
    uint64_t v7 = (void *)[objc_alloc(MEMORY[0x1E4F28CB0]) initWithFileDescriptor:v6 closeOnDealloc:1];
    id v21 = 0;
    int v8 = [v7 writeData:v3 error:&v21];
    id v9 = v21;

    if (v8)
    {
      id v20 = 0;
      int v10 = [v7 closeAndReturnError:&v20];
      id v4 = v20;

      if (!v10)
      {
LABEL_9:

        goto LABEL_10;
      }
      unsigned int v11 = (const std::__fs::filesystem::path *)[v5 fileSystemRepresentation];
      id v12 = (const std::__fs::filesystem::path *)[*(id *)a1 fileSystemRepresentation];
      rename(v11, v12, v13);
      if (!v14)
      {
        *(unsigned char *)(a1 + 60) = 0;
        goto LABEL_9;
      }
      uint64_t v15 = *__error();
      uint64_t v25 = *MEMORY[0x1E4F28228];
      v26[0] = @"rename failed";
      int v16 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v26 forKeys:&v25 count:1];
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28798], v15, (uint64_t)"saveToDisk", 52, v16);
      id v9 = (id)objc_claimAutoreleasedReturnValue();
    }
    id v4 = v9;
    goto LABEL_9;
  }
LABEL_10:

  return v4;
}

void sub_182A89948(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;

  _Unwind_Resume(a1);
}

id LaunchServices::LSStatePlist::modify(uint64_t a1, uint64_t a2)
{
  id v4 = (os_unfair_lock_s *)(a1 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
  id v15 = 0;
  uint64_t v6 = LaunchServices::LSStatePlist::loadIfNeeded((void *)a1, v5, &v15);
  id v7 = v15;
  int v8 = std::function<objc_object * ()(objc_object *,NSError *)>::operator()(a2, v6, v7);
  id v9 = v8;
  if (v6 && !v8)
  {
    int v10 = _LSDefaultLog();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT)) {
      LaunchServices::LSStatePlist::modify(v10);
    }

    unsigned int v11 = 0;
    id v12 = *(NSObject **)(a1 + 48);
    *(void *)(a1 + 48) = 0;
LABEL_6:

    goto LABEL_11;
  }
  objc_storeStrong((id *)(a1 + 48), v8);
  if (!v9 || ([v6 isEqual:v9] & 1) != 0 || (*(unsigned char *)(a1 + 60) = 1, *(_DWORD *)(a1 + 56)))
  {
    unsigned int v11 = 0;
  }
  else
  {
    unsigned int v11 = LaunchServices::LSStatePlist::saveToDisk(a1);
    if (v11)
    {
      id v12 = _LSDefaultLog();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        LaunchServices::LSStatePlist::modify((uint64_t)v11, v12);
      }
      goto LABEL_6;
    }
  }
LABEL_11:
  id v13 = v11;

  os_unfair_lock_unlock(v4);

  return v13;
}

void sub_182A89B18(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void *std::function<objc_object * ()(objc_object *,NSError *)>::operator()(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v8 = a3;
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5)
  {
    uint64_t v6 = (*(void (**)(uint64_t, id *, id *))(*(void *)v5 + 48))(v5, &v9, &v8);

    return v6;
  }
  else
  {
    Class result = std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  return result;
}

void sub_182A89C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

id LaunchServices::LSStatePlist::save(os_unfair_lock_s *this)
{
  uint64_t v2 = this + 2;
  os_unfair_lock_lock(this + 2);
  if (LOBYTE(this[15]._os_unfair_lock_opaque))
  {
    uint64_t v3 = LaunchServices::LSStatePlist::saveToDisk((uint64_t)this);
    if (v3)
    {
      id v4 = _LSDefaultLog();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        LaunchServices::LSStatePlist::save((uint64_t *)this, (uint64_t)v3, v4);
      }
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  os_unfair_lock_unlock(v2);

  return v3;
}

void sub_182A89CCC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);

  _Unwind_Resume(a1);
}

void sub_182A89EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_182A8AED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t initIMMessagePayloadProviderExtensionPointName()
{
  os_log_t v0 = (void *)IMSharedUtilitiesLibrary_frameworkLibrary;
  if (!IMSharedUtilitiesLibrary_frameworkLibrary)
  {
    os_log_t v0 = dlopen("/System/Library/PrivateFrameworks/IMSharedUtilities.framework/IMSharedUtilities", 2);
    IMSharedUtilitiesLibrary_frameworkLibrary = (uint64_t)v0;
  }
  uint64_t result = *(void *)dlsym(v0, "IMMessagePayloadProviderExtensionPointName");
  constantIMMessagePayloadProviderExtensionPointName = result;
  getIMMessagePayloadProviderExtensionPointName[0] = IMMessagePayloadProviderExtensionPointNameFunction;
  return result;
}

uint64_t IMMessagePayloadProviderExtensionPointNameFunction()
{
  return constantIMMessagePayloadProviderExtensionPointName;
}

id init_ISIconDataForResourceProxy_0(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = a1;
  uint64_t v6 = (void *)IconServicesLibrary_frameworkLibrary_2;
  if (!IconServicesLibrary_frameworkLibrary_2)
  {
    uint64_t v6 = dlopen("/System/Library/PrivateFrameworks/IconServices.framework/IconServices", 2);
    IconServicesLibrary_frameworkLibrary_2 = (uint64_t)v6;
  }
  softLink_ISIconDataForResourceProxy_0[0] = (uint64_t (*)())dlsym(v6, "_ISIconDataForResourceProxy");
  id v7 = ((void (*)(id, uint64_t, uint64_t))softLink_ISIconDataForResourceProxy_0[0])(v5, a2, a3);

  return v7;
}

void sub_182A8B4E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Unwind_Resume(a1);
}

void __pluginQueryFault_block_invoke_0()
{
  os_log_t v0 = _LSPluginFaultLog();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT)) {
    __pluginQueryFault_block_invoke_cold_1_0(v0);
  }
}

void sub_182A8B9F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_182A8BA98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A8BB54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A8BC5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A8BD68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL16pluginQueryFaultv_block_invoke()
{
  os_log_t v0 = _LSPluginFaultLog();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT)) {
    __pluginQueryFault_block_invoke_cold_1_0(v0);
  }
}

void ___ZL39getkMISMinSupportedSignatureVersion_ptrv_block_invoke()
{
  os_log_t v0 = (void *)misLibrary(void)::libLibrary;
  if (misLibrary(void)::libLibrary
    || (os_log_t v0 = dlopen("/usr/lib/libmis.dylib", 2), (misLibrary(void)::libLibrary = (uint64_t)v0) != 0))
  {
    getkMISMinSupportedSignatureVersion_ptr(void)::ptr = (uint64_t)dlsym(v0, "kMISMinSupportedSignatureVersion");
    if (getkMISMinSupportedSignatureVersion_ptr(void)::ptr) {
      return;
    }
    uint64_t v1 = dlerror();
    uint64_t v2 = _LSDefaultLog();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT)) {
      ___ZL39getkMISMinSupportedSignatureVersion_ptrv_block_invoke_cold_2((uint64_t)v1, v2);
    }
  }
  else
  {
    uint64_t v3 = dlerror();
    uint64_t v2 = _LSDefaultLog();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT)) {
      ___ZL39getkMISMinSupportedSignatureVersion_ptrv_block_invoke_cold_1((uint64_t)v3, v2);
    }
  }
}

void sub_182A8C0D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Unwind_Resume(a1);
}

uint64_t LSHandlerPref::Add(void *a1, int a2, int a3)
{
  id v5 = a1;
  uint64_t v6 = CSStoreAllocUnit();
  if (v6)
  {
    long long v25 = 0u;
    long long v24 = 0u;
    long long v23 = 0u;
    long long v22 = 0u;
    long long v21 = 0u;
    long long v20 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    v10[2] = a2;
    v10[3] = v5[26 * a3 + 58];
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v11 = 0;
    for (uint64_t i = 10; i != 58; i += 8)
    {
      id v8 = &v10[i];
      *id v8 = kLSVersionNumberNull;
      v8[1] = *(_OWORD *)algn_182AF9270;
    }
    v10[0] = CSBindableKeyMapNextKey();
    v10[1] = 1;
    _CSStringRetain();
    _CSStringRetain();
    _CSStoreWriteToUnit();
    _LSBindableActivate(v5, v6 | 1);
  }

  return v6;
}

void sub_182A8C5DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void LSHandlerPref::Remove(LSHandlerPref *this, _LSDatabase *a2)
{
  int v2 = (int)a2;
  id v5 = this;
  if (v5 && v2 && *((void *)v5 + 1))
  {
    uint64_t Unit = CSStoreGetUnit();
    CSMapRemoveValue();
    if (_LSDatabaseFindBindingMapIndex((uint64_t)v5, *(_DWORD *)(Unit + 12)) != -1) {
      _LSBindableDeactivate(v5, v2 | 1);
    }
    _CSStringRelease();
    _CSStringRelease();
    for (uint64_t i = 0; i != 24; i += 4)
      _CSStringRelease();
    CSStoreFreeUnit();
  }
}

void sub_182A8C748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t LSHandlerPref::Get(LSHandlerPref *this, _LSDatabase *a2)
{
  if (this && a2) {
    return CSStoreGetUnit();
  }
  else {
    return 0;
  }
}

uint64_t LSHandlerPref::GetOrCreateTagForContentType(void *a1, const __CFString *a2, int a3, int *a4)
{
  id v7 = a1;
  uint64_t v8 = 0;
  if (v7 && a2 && a4)
  {
    *a4 = -1;
    if (_UTTypeIdentifierIsValid(a2))
    {
      if (_UTTypeIdentifierIsDynamic(a2))
      {
        FirstTag = (__CFString *)_UTDynamicGetFirstTag(a2, @"public.filename-extension");
        if (FirstTag)
        {
          int v10 = 1;
        }
        else
        {
          FirstTag = (__CFString *)_UTDynamicGetFirstTag(a2, @"public.mime-type");
          if (!FirstTag)
          {
            uint64_t v12 = 0;
            if (*a4 == -1)
            {
              uint64_t v8 = 0;
LABEL_18:

              goto LABEL_21;
            }
LABEL_14:
            if (a3) {
              uint64_t StringForCFString = _LSDatabaseCreateStringForCFString(v7, v12, 0);
            }
            else {
              uint64_t StringForCFString = _LSDatabaseGetStringForCFString(v7, v12, 0);
            }
            uint64_t v8 = StringForCFString;
            goto LABEL_18;
          }
          int v10 = 2;
        }
        *a4 = v10;
        uint64_t v12 = FirstTag;
        goto LABEL_14;
      }
      *a4 = 0;
      if (a3) {
        uint64_t v11 = _LSDatabaseCreateStringForCFString(v7, a2, 1);
      }
      else {
        uint64_t v11 = _LSDatabaseGetStringForCFString(v7, a2, 1);
      }
      uint64_t v8 = v11;
    }
    else
    {
      uint64_t v8 = 0;
    }
  }
LABEL_21:

  return v8;
}

void sub_182A8C8EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t LSHandlerPref::GetTagForContentType(void *a1, const __CFString *a2, int *a3)
{
  return LSHandlerPref::GetOrCreateTagForContentType(a1, a2, 0, a3);
}

uint64_t LSHandlerPref::CreateTagForContentType(void *a1, const __CFString *a2, int *a3)
{
  return LSHandlerPref::GetOrCreateTagForContentType(a1, a2, 1, a3);
}

uint64_t LSHandlerPref::GetOrAddHandlerPref(void *a1, int a2, int a3, int a4, _DWORD *a5)
{
  uint64_t v13 = 0;
  long long v14 = &v13;
  uint64_t v15 = 0x2020000000;
  uint64_t v16 = 0;
  id v9 = a1;
  _LSDatabaseEnumeratingBindingMap();
  uint64_t v10 = v14[3];
  if (a4 && !v10)
  {
    uint64_t v11 = (_LSDatabase *)LSHandlerPref::Add(v9, a2, a3);
    if (a5) {
      *a5 = v11;
    }
    uint64_t v10 = LSHandlerPref::Get((LSHandlerPref *)v9, v11);
  }

  _Block_object_dispose(&v13, 8);
  return v10;
}

void sub_182A8CA38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN13LSHandlerPref19GetOrAddHandlerPrefEP11_LSDatabasej14LSBindingMapIDhPj_block_invoke(uint64_t result, uint64_t a2, int a3, unsigned char *a4)
{
  id v4 = (_LSDatabase *)(a3 & 0xFFFFFFFC);
  if ((a3 & 3) == 1 && v4 != 0)
  {
    uint64_t v7 = result;
    uint64_t v8 = *(_DWORD **)(result + 48);
    if (v8) {
      *uint64_t v8 = v4;
    }
    uint64_t result = LSHandlerPref::Get(*(LSHandlerPref **)(result + 32), v4);
    *(void *)(*(void *)(*(void *)(v7 + 40) + 8) + 24) = result;
    *a4 = 1;
  }
  return result;
}

uint64_t LSHandlerPref::GetHandlerPref(void *a1, int a2, int a3, _DWORD *a4)
{
  return LSHandlerPref::GetOrAddHandlerPref(a1, a2, a3, 0, a4);
}

void LSHandlerPref::UpdateBindingGenerationForTag(void *a1)
{
  id v1 = a1;
  CSStoreGetGeneration();
  id v2 = v1;
  _LSDatabaseEnumeratingBindingMap();
}

void sub_182A8CB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void ___ZN13LSHandlerPref29UpdateBindingGenerationForTagEP11_LSDatabasej14LSBindingMapID_block_invoke(uint64_t a1, uint64_t a2, int a3)
{
}

void LSHandlerPref::SetRoleHandlerForTag(void *a1, int a2, int a3, unsigned int a4, int a5, long long *a6)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v11 = a1;
  unsigned int v14 = 0;
  LSHandlerPref::GetOrAddHandlerPref(v11, a2, a3, 1, &v14);
  long long v12 = a6[1];
  v15[0] = *a6;
  v15[1] = v12;
  LSHandlerPref::SetRoleHandler((LSHandlerPref *)v11, (_LSDatabase *)v14, a4, a5, v15, v13);
  LSHandlerPref::UpdateBindingGenerationForTag(v11);
}

void sub_182A8CC98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void LSHandlerPref::SetRoleHandler(LSHandlerPref *this, _LSDatabase *a2, unsigned int a3, int a4, long long *a5, LSVersionNumber *a6)
{
  int v9 = (int)a2;
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = this;
  if (v10)
  {
    if (v9)
    {
      uint64_t Unit = CSStoreGetUnit();
      if (Unit)
      {
        long long v12 = *(_OWORD *)Unit;
        long long v13 = *(_OWORD *)(Unit + 32);
        v37[1] = *(_OWORD *)(Unit + 16);
        long long v38 = v13;
        v37[0] = v12;
        long long v14 = *(_OWORD *)(Unit + 48);
        long long v15 = *(_OWORD *)(Unit + 64);
        long long v16 = *(_OWORD *)(Unit + 96);
        long long v41 = *(_OWORD *)(Unit + 80);
        long long v42 = v16;
        long long v39 = v14;
        long long v40 = v15;
        long long v17 = *(_OWORD *)(Unit + 112);
        long long v18 = *(_OWORD *)(Unit + 128);
        long long v19 = *(_OWORD *)(Unit + 160);
        long long v45 = *(_OWORD *)(Unit + 144);
        long long v46 = v19;
        long long v43 = v17;
        long long v44 = v18;
        long long v20 = *(_OWORD *)(Unit + 176);
        long long v21 = *(_OWORD *)(Unit + 192);
        long long v22 = *(_OWORD *)(Unit + 208);
        *(void *)&v48[32] = *(void *)(Unit + 224);
        *(_OWORD *)BOOL v48 = v21;
        *(_OWORD *)&v48[16] = v22;
        long long v47 = v20;
        if (a3 != -1)
        {
          uint64_t v23 = 8;
          uint64_t v24 = 168;
          while (1)
          {
            if ((a3 >> (v23 - 4)))
            {
              int v25 = *((_DWORD *)v37 + v23);
              if (a4)
              {
                if (v25)
                {
                  if (a4 == v25)
                  {
                    long long v26 = a5[1];
                    long long v51 = *a5;
                    long long v52 = v26;
                    long long v27 = *(_OWORD *)((char *)&v37[1] + v24);
                    long long v49 = *(_OWORD *)((char *)v37 + v24);
                    long long v50 = v27;
                    if (!_LSVersionNumberCompare(&v51, &v49)) {
                      goto LABEL_21;
                    }
                  }
                  if (a4 == DWORD1(v38))
                  {
                    a4 = 0;
                    *a5 = kLSVersionNumberNull;
                    a5[1] = *(_OWORD *)algn_182AF9270;
                  }
                  _CSStringRelease();
                  _CSStringRetain();
                }
                else
                {
                  if (a4 == DWORD1(v38))
                  {
                    long long v31 = a5[1];
                    long long v51 = *a5;
                    long long v52 = v31;
                    long long v32 = *(_OWORD *)((char *)&v37[1] + v24);
                    long long v49 = *(_OWORD *)((char *)v37 + v24);
                    long long v50 = v32;
                    if (!_LSVersionNumberCompare(&v51, &v49)) {
                      goto LABEL_21;
                    }
                  }
                  _CSStringRetain();
                }
                *((_DWORD *)v37 + v23) = a4;
                uint64_t v28 = (_OWORD *)((char *)v37 + v24);
                long long v29 = *a5;
                long long v30 = a5[1];
              }
              else
              {
                if (!v25)
                {
                  a4 = 0;
                  goto LABEL_21;
                }
                _CSStringRelease();
                a4 = 0;
                *((_DWORD *)v37 + v23) = 0;
                uint64_t v28 = (_OWORD *)((char *)v37 + v24);
                long long v29 = kLSVersionNumberNull;
                long long v30 = *(_OWORD *)algn_182AF9270;
              }
              long long *v28 = v29;
              v28[1] = v30;
            }
LABEL_21:
            --v23;
            v24 -= 32;
            if (v23 == 3) {
              goto LABEL_31;
            }
          }
        }
        for (uint64_t i = 0; i != -10; i -= 2)
        {
          if (*(_DWORD *)((char *)&v37[2] + i * 2))
          {
            _CSStringRelease();
            *(_DWORD *)((char *)&v37[2] + i * 2) = 0;
            __int16 v34 = &v37[i];
            *(_OWORD *)((char *)v34 + 168) = kLSVersionNumberNull;
            *(_OWORD *)((char *)v34 + 184) = *(_OWORD *)algn_182AF9270;
          }
        }
        if (DWORD1(v38) != a4
          || (long long v51 = *(_OWORD *)&v48[8],
              long long v52 = *(_OWORD *)&v48[24],
              long long v35 = a5[1],
              long long v49 = *a5,
              long long v50 = v35,
              _LSVersionNumberCompare(&v51, &v49)))
        {
          _CSStringRelease();
          _CSStringRetain();
          DWORD1(v38) = a4;
          long long v36 = a5[1];
          *(_OWORD *)&v48[8] = *a5;
          *(_OWORD *)&v48[24] = v36;
        }
LABEL_31:
        DWORD1(v37[0]) = CSStoreGetGeneration() + 1;
        _CSStoreWriteToUnit();
      }
    }
  }
}

void sub_182A8CFE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void LSHandlerPref::RemoveHandlersForTag(void *a1, int a2, int a3)
{
  *(void *)&v7[44] = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  *(_DWORD *)uint64_t v7 = 0;
  if (LSHandlerPref::GetOrAddHandlerPref(v5, a2, a3, 0, v7))
  {
    memset(&v7[4], 0, 32);
    LSHandlerPref::SetRoleHandler(v5, (_LSDatabase *)*(unsigned int *)v7, 0xFFFFFFFF, 0, (long long *)&v7[4], v6);
    LSHandlerPref::UpdateBindingGenerationForTag(v5);
  }
}

void sub_182A8D0CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void LSHandlerPref::RemoveRoleHandlerForTag(void *a1, int a2, int a3, unsigned int a4)
{
  uint64_t v7 = a1;
  unsigned int v27 = 0;
  if (LSHandlerPref::GetOrAddHandlerPref(v7, a2, a3, 0, &v27))
  {
    uint64_t v8 = LSHandlerPref::Get(v7, (_LSDatabase *)v27);
    if (v8)
    {
      long long v9 = *(_OWORD *)v8;
      long long v10 = *(_OWORD *)(v8 + 32);
      v25[1] = *(_OWORD *)(v8 + 16);
      uint64_t v25[2] = v10;
      v25[0] = v9;
      long long v11 = *(_OWORD *)(v8 + 48);
      long long v12 = *(_OWORD *)(v8 + 64);
      long long v13 = *(_OWORD *)(v8 + 96);
      v25[5] = *(_OWORD *)(v8 + 80);
      v25[6] = v13;
      v25[3] = v11;
      v25[4] = v12;
      long long v14 = *(_OWORD *)(v8 + 112);
      long long v15 = *(_OWORD *)(v8 + 128);
      long long v16 = *(_OWORD *)(v8 + 160);
      v25[9] = *(_OWORD *)(v8 + 144);
      v25[10] = v16;
      v25[7] = v14;
      v25[8] = v15;
      long long v17 = *(_OWORD *)(v8 + 176);
      long long v18 = *(_OWORD *)(v8 + 192);
      long long v19 = *(_OWORD *)(v8 + 208);
      uint64_t v26 = *(void *)(v8 + 224);
      v25[12] = v18;
      v25[13] = v19;
      v25[11] = v17;
      uint64_t v20 = 8;
      uint64_t v21 = 168;
      do
      {
        if ((a4 >> (v20 - 4)))
        {
          *((_DWORD *)v25 + v20) = 0;
          long long v22 = (_OWORD *)((char *)v25 + v21);
          *long long v22 = kLSVersionNumberNull;
          v22[1] = *(_OWORD *)algn_182AF9270;
        }
        --v20;
        v21 -= 32;
      }
      while (v20 != 3);
      char v23 = 1;
      for (uint64_t i = 32; i != 12; i -= 4)
      {
        if (*(_DWORD *)((char *)v25 + i)) {
          char v23 = 0;
        }
      }
      if (v23)
      {
        LSHandlerPref::Remove(v7, (_LSDatabase *)v27);
      }
      else if (_CSStoreWriteToUnit())
      {
        LSHandlerPref::UpdateBindingGenerationForTag(v7);
      }
    }
  }
}

void sub_182A8D270(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void LSHandlerPref::RemoveRoleHandlersMatchingBundleID(LSHandlerPref *this, _LSDatabase *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = 0;
  long long v13 = &v12;
  uint64_t v14 = 0x4812000000;
  long long v15 = __Block_byref_object_copy__42;
  long long v16 = __Block_byref_object_dispose__42;
  long long v17 = &unk_182B5933F;
  long long v19 = 0;
  uint64_t v20 = 0;
  __p = 0;
  uint64_t v8 = 0;
  long long v9 = &v8;
  uint64_t v10 = 0x2020000000;
  int v11 = 0;
  id v2 = this;
  _CSStoreEnumerateUnits();
  if (*((_DWORD *)v9 + 6))
  {
    do
    {
      _CSStringRelease();
      int v4 = *((_DWORD *)v9 + 6) - 1;
      *((_DWORD *)v9 + 6) = v4;
    }
    while (v4);
  }
  id v5 = (unsigned int *)v13[6];
  for (uint64_t i = (unsigned int *)v13[7]; v5 != i; ++v5)
  {
    uint64_t v7 = (_LSDatabase *)*v5;
    memset(v21, 0, sizeof(v21));
    LSHandlerPref::SetRoleHandler(v2, v7, 0xFFFFFFFF, 0, v21, v3);
  }

  _Block_object_dispose(&v8, 8);
  _Block_object_dispose(&v12, 8);
  if (__p)
  {
    long long v19 = __p;
    operator delete(__p);
  }
}

void sub_182A8D498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  _Block_object_dispose(&a18, 8);
  _Block_object_dispose(&a22, 8);
  if (__p)
  {
    a29 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void ___ZN13LSHandlerPref34RemoveRoleHandlersMatchingBundleIDEP11_LSDatabasej_block_invoke(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4 = 0;
  char v5 = 0;
  char v6 = 0;
  long long v7 = *(_OWORD *)(a3 + 208);
  v33[12] = *(_OWORD *)(a3 + 192);
  v33[13] = v7;
  uint64_t v34 = *(void *)(a3 + 224);
  long long v8 = *(_OWORD *)(a3 + 144);
  v33[8] = *(_OWORD *)(a3 + 128);
  v33[9] = v8;
  long long v9 = *(_OWORD *)(a3 + 176);
  v33[10] = *(_OWORD *)(a3 + 160);
  v33[11] = v9;
  long long v10 = *(_OWORD *)(a3 + 80);
  v33[4] = *(_OWORD *)(a3 + 64);
  v33[5] = v10;
  long long v11 = *(_OWORD *)(a3 + 112);
  v33[6] = *(_OWORD *)(a3 + 96);
  v33[7] = v11;
  long long v12 = *(_OWORD *)(a3 + 16);
  v33[0] = *(_OWORD *)a3;
  v33[1] = v12;
  long long v13 = *(_OWORD *)(a3 + 48);
  v33[2] = *(_OWORD *)(a3 + 32);
  v33[3] = v13;
  while (1)
  {
    int v14 = *(_DWORD *)(a1 + 56);
    long long v15 = (char *)v33 + 4 * v4;
    int v17 = *((_DWORD *)v15 + 4);
    long long v16 = v15 + 16;
    if (v14 != v17) {
      break;
    }
LABEL_6:
    ++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    *long long v16 = 0;
    long long v19 = &v33[2 * v4];
    *(_OWORD *)((char *)v19 + 40) = kLSVersionNumberNull;
    *(_OWORD *)((char *)v19 + 56) = *(_OWORD *)algn_182AF9270;
    ++v4;
    char v5 = 1;
    if (v4 == 6)
    {
      if ((v6 & 1) == 0)
      {
        uint64_t v20 = *(void **)(*(void *)(a1 + 48) + 8);
        uint64_t v21 = (char *)v20[7];
        unint64_t v22 = v20[8];
        if ((unint64_t)v21 >= v22)
        {
          uint64_t v24 = (char *)v20[6];
          uint64_t v25 = (v21 - v24) >> 2;
          unint64_t v26 = v25 + 1;
          if ((unint64_t)(v25 + 1) >> 62) {
            abort();
          }
          uint64_t v27 = v22 - (void)v24;
          if (v27 >> 1 > v26) {
            unint64_t v26 = v27 >> 1;
          }
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v28 = v26;
          }
          if (v28)
          {
            long long v29 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)(v20 + 8), v28);
            uint64_t v24 = (char *)v20[6];
            uint64_t v21 = (char *)v20[7];
          }
          else
          {
            long long v29 = 0;
          }
          long long v30 = &v29[4 * v25];
          long long v31 = &v29[4 * v28];
          *(_DWORD *)long long v30 = a2;
          char v23 = v30 + 4;
          while (v21 != v24)
          {
            int v32 = *((_DWORD *)v21 - 1);
            v21 -= 4;
            *((_DWORD *)v30 - 1) = v32;
            v30 -= 4;
          }
          v20[6] = v30;
          v20[7] = v23;
          v20[8] = v31;
          if (v24) {
            operator delete(v24);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v21 = a2;
          char v23 = v21 + 4;
        }
        v20[7] = v23;
        return;
      }
LABEL_11:
      _CSStoreWriteToUnit();
      return;
    }
  }
  while (v4 != 5)
  {
    int v18 = v16[1];
    ++v16;
    ++v4;
    if (v14 == v18)
    {
      char v6 = 1;
      goto LABEL_6;
    }
  }
  if (v5) {
    goto LABEL_11;
  }
}

uint64_t LSHandlerPref::roleHandler(LSHandlerPref *this, unsigned int a2, LSVersionNumber *a3)
{
  if (a2 != -1 || (uint64_t v4 = (char *)this + 36, !*((_DWORD *)this + 9)))
  {
    uint64_t v3 = (long long *)((char *)this + 168);
    uint64_t v4 = (char *)this + 32;
    uint64_t v5 = 5;
    while (((a2 >> (v5 - 1)) & 1) == 0 || !*(_DWORD *)v4)
    {
      v3 -= 2;
      v4 -= 4;
      if (!--v5)
      {
        if (a3)
        {
          long long v6 = *(_OWORD *)((char *)this + 216);
          *(_OWORD *)a3->_opaque = *(_OWORD *)((char *)this + 200);
          *(_OWORD *)&a3->_opaque[16] = v6;
        }
        uint64_t v4 = (char *)this + 36;
        return *(unsigned int *)v4;
      }
    }
    if (!a3) {
      return *(unsigned int *)v4;
    }
    long long v7 = *v3;
    long long v8 = v3[1];
    goto LABEL_14;
  }
  if (a3)
  {
    long long v7 = *(_OWORD *)((char *)this + 200);
    long long v8 = *(_OWORD *)((char *)this + 216);
LABEL_14:
    *(_OWORD *)a3->_opaque = v7;
    *(_OWORD *)&a3->_opaque[16] = v8;
  }
  return *(unsigned int *)v4;
}

void LSHandlerPref::GetVisualizationFunctions(id (**a1)(LSHandlerPref **this, LSContext *a2, _LSDatabase *a3)@<X8>)
{
  *a1 = LaunchServices::HandlerPrefs::getSummary;
  a1[1] = (id (*)(LSHandlerPref **, LSContext *, _LSDatabase *))LaunchServices::HandlerPrefs::display;
  a1[2] = 0;
}

id LaunchServices::HandlerPrefs::getSummary(LSHandlerPref **this, LSContext *a2, _LSDatabase *a3)
{
  uint64_t v3 = (void *)LSHandlerPref::Get(*this, a3);
  if (v3) {
    uint64_t v3 = (void *)_CSStringCopyCFString();
  }

  return v3;
}

BOOL LaunchServices::HandlerPrefs::display(LSHandlerPref **this, LSContext *a2, _LSDatabase *a3, CSStore2::AttributedStringWriter *a4, LaunchServices::DumpWriter *a5)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  long long v7 = (int *)LSHandlerPref::Get(*this, a3);
  if (v7)
  {
    v33[0] = xmmword_1E52303C8;
    v33[1] = *(_OWORD *)&off_1E52303D8;
    v33[2] = xmmword_1E52303E8;
    v33[3] = *(_OWORD *)&off_1E52303F8;
    int BindingMapIndex = _LSDatabaseFindBindingMapIndex((uint64_t)*this, v7[3]);
    if (BindingMapIndex <= 0) {
      int v9 = BindingMapIndex;
    }
    else {
      int v9 = 6;
    }
    if (v9)
    {
      CSStore2::AttributedStringWriter::string(a4, *((NSString **)v33 + v9));
    }
    else
    {
      v28[0] = 0;
      _UTGetActiveTypeForIdentifier(*this, v7[2], v28);
      long long v10 = *(NSString **)&v33[0];
      CSStore2::AttributedStringWriter::link(a4, *((unsigned int *)*this + 8), v28[0], 0);
      long long v11 = (NSString *)objc_claimAutoreleasedReturnValue();
      CSStore2::AttributedStringWriter::string(a4, v10, v11);
    }
    int v12 = v7[9];
    if (v12)
    {
LABEL_13:
      long long v15 = (long long *)(v7 + 50);
    }
    else
    {
      uint64_t v13 = -168;
      uint64_t v14 = 8;
      while (1)
      {
        int v12 = v7[v14];
        if (v12) {
          break;
        }
        v13 += 32;
        --v14;
        if (v13 == -8)
        {
          int v12 = 0;
          goto LABEL_13;
        }
      }
      long long v15 = (long long *)&v7[v13 / 0xFFFFFFFFFFFFFFFCLL];
    }
    uint64_t v16 = 0;
    long long v17 = v15[1];
    long long v31 = *v15;
    long long v32 = v17;
    do
    {
      *(_OWORD *)unint64_t v28 = xmmword_1E5230408;
      long long v29 = xmmword_1E5230418;
      long long v30 = @"importer";
      memset(&v27, 0, sizeof(v27));
      int v18 = LSHandlerPref::roleHandler((LSHandlerPref *)v7, 1 << v16, &v27);
      if (v18)
      {
        if (v18 != v12)
        {
          CSStore2::AttributedStringWriter::string(a4, *(NSString **)&v28[2 * v16]);
          long long v35 = kLSVersionNumberNull;
          long long v36 = *(_OWORD *)algn_182AF9270;
          LSVersionNumber v34 = v27;
          if (_LSVersionNumberCompare(&v35, &v34))
          {
            long long v19 = [*(id *)&v28[2 * v16] stringByAppendingString:@" (bundle ver)"];
            LSVersionNumber v26 = v27;
            _LSVersionNumberGetStringRepresentation(&v26);
            uint64_t v20 = (NSString *)objc_claimAutoreleasedReturnValue();
            CSStore2::AttributedStringWriter::string(a4, v19, v20);
          }
        }
      }
      for (uint64_t i = 8; i != -2; i -= 2)

      ++v16;
    }
    while (v16 != 5);
    if (v12)
    {
      CSStore2::AttributedStringWriter::string(a4, &cfstr_AllRoles.isa);
      *(_OWORD *)unint64_t v28 = kLSVersionNumberNull;
      long long v29 = *(_OWORD *)algn_182AF9270;
      long long v35 = v31;
      long long v36 = v32;
      if (_LSVersionNumberCompare(v28, &v35))
      {
        v25[0] = v31;
        v25[1] = v32;
        _LSVersionNumberGetStringRepresentation(v25);
        unint64_t v22 = (NSString *)objc_claimAutoreleasedReturnValue();
        CSStore2::AttributedStringWriter::string(a4, &cfstr_AllRolesBundle.isa, v22);
      }
    }
    for (uint64_t j = 56; j != -8; j -= 8)
  }
  return v7 != 0;
}

void sub_182A8DAD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  for (uint64_t i = 56; i != -8; i -= 8)
  _Unwind_Resume(a1);
}

void LSHandlerPref::RemoveAll(LSHandlerPref *this, _LSDatabase *a2)
{
  id v2 = this;
  uint64_t v5 = 0;
  long long v6 = &v5;
  uint64_t v7 = 0x4812000000;
  long long v8 = __Block_byref_object_copy__42;
  int v9 = __Block_byref_object_dispose__42;
  long long v10 = &unk_182B5933F;
  uint64_t v13 = 0;
  __p = 0;
  int v12 = 0;
  _CSStoreEnumerateUnits();
  uint64_t v3 = (unsigned int *)v6[6];
  uint64_t v4 = (unsigned int *)v6[7];
  while (v3 != v4)
    LSHandlerPref::Remove(v2, (_LSDatabase *)*v3++);
  _Block_object_dispose(&v5, 8);
  if (__p)
  {
    int v12 = __p;
    operator delete(__p);
  }
}

void sub_182A8DC9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  _Block_object_dispose(&a14, 8);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void ___ZN13LSHandlerPref9RemoveAllEP11_LSDatabase_block_invoke(uint64_t a1, int a2)
{
  uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 8);
  uint64_t v4 = (char *)v3[7];
  unint64_t v5 = v3[8];
  if ((unint64_t)v4 >= v5)
  {
    uint64_t v7 = (char *)v3[6];
    uint64_t v8 = (v4 - v7) >> 2;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 62) {
      abort();
    }
    uint64_t v10 = v5 - (void)v7;
    if (v10 >> 1 > v9) {
      unint64_t v9 = v10 >> 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      int v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)(v3 + 8), v11);
      uint64_t v7 = (char *)v3[6];
      uint64_t v4 = (char *)v3[7];
    }
    else
    {
      int v12 = 0;
    }
    uint64_t v13 = &v12[4 * v8];
    uint64_t v14 = &v12[4 * v11];
    *(_DWORD *)uint64_t v13 = a2;
    long long v6 = v13 + 4;
    while (v4 != v7)
    {
      int v15 = *((_DWORD *)v4 - 1);
      v4 -= 4;
      *((_DWORD *)v13 - 1) = v15;
      v13 -= 4;
    }
    v3[6] = v13;
    v3[7] = v6;
    v3[8] = v14;
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v4 = a2;
    long long v6 = v4 + 4;
  }
  v3[7] = v6;
}

uint64_t LSHandlerPref::CopyHandlers(LSHandlerPref *this)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v9 = 0;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = ___ZN13LSHandlerPref12CopyHandlersEv_block_invoke;
  v5[3] = &unk_1E5230268;
  v5[4] = &v6;
  _LSWithSecurePreferences(v5);
  uint64_t v1 = v7[3];
  if (!v1)
  {
    id v2 = _LSDefaultLog();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      int v3 = _CFGetEUID();
      *(_DWORD *)LSVersionNumber buf = 67109120;
      int v11 = v3;
      _os_log_impl(&dword_182959000, v2, OS_LOG_TYPE_DEFAULT, "Handler prefs NOT found, will use empty array; uid = %d\n",
        buf,
        8u);
    }

    uint64_t v1 = MEMORY[0x1E4F1CBF0];
    v7[3] = MEMORY[0x1E4F1CBF0];
  }
  _Block_object_dispose(&v6, 8);
  return v1;
}

void sub_182A8DEE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

CFArrayRef ___ZN13LSHandlerPref12CopyHandlersEv_block_invoke(uint64_t a1, CFDictionaryRef theDict)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  CFArrayRef result = (const __CFArray *)CFDictionaryGetValue(theDict, @"LSHandlers");
  if (result)
  {
    CFArrayRef v4 = result;
    unint64_t v5 = _LSDefaultLog();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      int v6 = _CFGetEUID();
      CFIndex Count = CFArrayGetCount(v4);
      ___ZN13LSHandlerPref12CopyHandlersEv_block_invoke_cold_1(v8, v6, Count, v5);
    }

    CFArrayRef result = (const __CFArray *)CFRetain(v4);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  }
  return result;
}

void sub_182A8DFE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t LSHandlerPref::ValidateHandler(LSHandlerPref *this, const __CFString *a2, LSContext *a3, const __CFString *a4, const __CFString *a5)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = this;
  if (!UTTypeEqual(a2, @"public.url-scheme")) {
    goto LABEL_9;
  }
  uint64_t v9 = 0;
  while (!CFEqual(LSHandlerPref::ValidateHandler(_LSDatabase *,__CFString const*,__CFString const*,__CFString const*)::OTPSchemes[v9], a3))
  {
    if (++v9 == 4) {
      goto LABEL_9;
    }
  }
  if (!a4 || !a3 || !CFEqual(a4, @"com.apple.Preferences"))
  {
LABEL_9:
    int v10 = UTTypeEqual(a2, @"com.apple.uniform-type-identifier");
    uint64_t v11 = 1;
    if (!a3 || !v10) {
      goto LABEL_16;
    }
    *(void *)uint64_t v16 = v8;
    char v13 = LaunchServices::BindingEvaluator::ContentTypeBindingAllowsOverride((LSContext *)v16, a3, v12);

    if (v13)
    {
      uint64_t v11 = 1;
      goto LABEL_16;
    }
  }
  uint64_t v14 = _LSDefaultLog();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t v16 = 138543874;
    *(void *)&v16[4] = a4;
    __int16 v17 = 2114;
    CFStringRef v18 = a2;
    __int16 v19 = 2114;
    uint64_t v20 = a3;
    _os_log_impl(&dword_182959000, v14, OS_LOG_TYPE_DEFAULT, "handler preference for %{public}@ for %{public}@ %{public}@ failed validation", v16, 0x20u);
  }

  uint64_t v11 = 0;
LABEL_16:

  return v11;
}

void sub_182A8E18C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t LSHandlerPref::Load(LSHandlerPref *this, _LSDatabase *a2, const __CFArray *a3)
{
  uint64_t v110 = *MEMORY[0x1E4F143B8];
  CFArrayRef v4 = this;
  unint64_t v5 = (void *)MEMORY[0x18530F680]();
  int v6 = [MEMORY[0x1E4F1CA48] array];
  v83 = a2;
  uint64_t v102 = MEMORY[0x1E4F143A8];
  uint64_t v103 = 3221225472;
  v104 = ___ZN13LSHandlerPref4LoadEP11_LSDatabasePK9__CFArray_block_invoke;
  int v105 = &unk_1E522BC28;
  id v106 = v6;
  _CSStoreEnumerateUnits();
  long long v100 = 0u;
  long long v101 = 0u;
  long long v98 = 0u;
  long long v99 = 0u;
  id v7 = v106;
  uint64_t v8 = [v7 countByEnumeratingWithState:&v98 objects:v108 count:16];
  if (v8)
  {
    uint64_t v9 = *(void *)v99;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v99 != v9) {
          objc_enumerationMutation(v7);
        }
        LSHandlerPref::Remove(v4, (_LSDatabase *)[*(id *)(*((void *)&v98 + 1) + 8 * i) unsignedLongLongValue]);
      }
      uint64_t v8 = [v7 countByEnumeratingWithState:&v98 objects:v108 count:16];
    }
    while (v8);
  }

  CFArrayRef v11 = (const __CFArray *)v83;
  if (v83)
  {
    CFTypeID v12 = CFGetTypeID(v83);
    if (v12 == CFArrayGetTypeID())
    {
      CFIndex Count = CFArrayGetCount((CFArrayRef)v83);
      CFIndex v14 = Count;
      if (Count >= 1)
      {
        CFIndex v15 = 0;
        CFIndex v84 = Count;
        do
        {
          CFIndex v85 = v15;
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v11, v15);
          CFDictionaryRef v17 = ValueAtIndex;
          v87[0] = 0;
          if (!ValueAtIndex) {
            goto LABEL_83;
          }
          CFTypeID v18 = CFGetTypeID(ValueAtIndex);
          if (v18 != CFDictionaryGetTypeID()) {
            goto LABEL_83;
          }
          __int16 v19 = v4;
          if (CFDictionaryContainsKey(v17, @"LSHandlerURLScheme"))
          {
            CFTypeID TypeID = CFStringGetTypeID();
            Value = CFDictionaryGetValue(v17, @"LSHandlerURLScheme");
            unint64_t v22 = Value;
            if (!Value) {
              goto LABEL_48;
            }
            char v23 = CFGetTypeID(Value) == TypeID ? (LSContext *)v22 : 0;
            CFStringRef v24 = @"public.url-scheme";
            if (!@"public.url-scheme") {
              goto LABEL_48;
            }
          }
          else if (CFDictionaryContainsKey(v17, @"LSHandlerContentType"))
          {
            CFTypeID v25 = CFStringGetTypeID();
            LSVersionNumber v26 = CFDictionaryGetValue(v17, @"LSHandlerContentType");
            LSVersionNumber v27 = v26;
            if (!v26) {
              goto LABEL_48;
            }
            char v23 = CFGetTypeID(v26) == v25 ? (LSContext *)v27 : 0;
            CFStringRef v24 = @"com.apple.uniform-type-identifier";
            if (!@"com.apple.uniform-type-identifier") {
              goto LABEL_48;
            }
          }
          else
          {
            CFTypeID v28 = CFStringGetTypeID();
            CFStringRef v29 = (const __CFString *)CFDictionaryGetValue(v17, @"LSHandlerContentTagClass");
            CFStringRef v30 = v29;
            if (v29)
            {
              if (CFGetTypeID(v29) == v28) {
                CFStringRef v24 = v30;
              }
              else {
                CFStringRef v24 = 0;
              }
            }
            else
            {
              CFStringRef v24 = 0;
            }
            CFTypeID v31 = CFStringGetTypeID();
            long long v32 = CFDictionaryGetValue(v17, @"LSHandlerContentTag");
            int v33 = v32;
            if (!v32) {
              goto LABEL_48;
            }
            char v23 = CFGetTypeID(v32) == v31 ? (LSContext *)v33 : 0;
            if (!v24) {
              goto LABEL_48;
            }
          }
          if (v23)
          {
            uint64_t v34 = 5u;
            do
            {
              long long v35 = kLSHandlerRoleKeys[v34];
              CFTypeID v36 = CFStringGetTypeID();
              CFStringRef v37 = (const __CFString *)CFDictionaryGetValue(v17, v35);
              CFStringRef v38 = v37;
              if (v37 && CFGetTypeID(v37) == v36)
              {
                int v40 = LSHandlerPref::ValidateHandler(v19, v24, v23, v38, v39);
                if (!(v34 * 8)) {
                  break;
                }
              }
              else
              {
                int v40 = 1;
                if (!(v34 * 8)) {
                  break;
                }
              }
              --v34;
            }
            while (v40);

            CFIndex v14 = v84;
            if (!v40) {
              goto LABEL_83;
            }
            goto LABEL_49;
          }
LABEL_48:

LABEL_49:
          if (CFDictionaryContainsKey(v17, @"LSHandlerContentType"))
          {
            long long v41 = v19;
            CFTypeID v42 = CFStringGetTypeID();
            CFStringRef v43 = (const __CFString *)CFDictionaryGetValue(v17, @"LSHandlerContentType");
            CFStringRef v44 = v43;
            if (v43)
            {
              if (CFGetTypeID(v43) == v42)
              {
                LODWORD(v44) = _LSDatabaseCreateStringForCFString(v41, v44, 1);
                int BindingMapIndex = 0;
LABEL_60:

                goto LABEL_61;
              }
              LODWORD(v44) = 0;
            }
            int BindingMapIndex = -1;
            goto LABEL_60;
          }
          if (CFDictionaryContainsKey(v17, @"LSHandlerContentTag"))
          {
            CFTypeID v46 = CFStringGetTypeID();
            CFStringRef v47 = (const __CFString *)CFDictionaryGetValue(v17, @"LSHandlerContentTagClass");
            CFStringRef v48 = v47;
            if (v47)
            {
              if (CFGetTypeID(v47) == v46) {
                CFStringRef v49 = v48;
              }
              else {
                CFStringRef v49 = 0;
              }
            }
            else
            {
              CFStringRef v49 = 0;
            }
            int StringForCFString = _LSDatabaseGetStringForCFString(v19, v49, 1);
            if (StringForCFString)
            {
              int BindingMapIndex = _LSDatabaseFindBindingMapIndex((uint64_t)v19, StringForCFString);
              if (BindingMapIndex != -1)
              {
                CFTypeID v78 = CFStringGetTypeID();
                CFStringRef v79 = (const __CFString *)CFDictionaryGetValue(v17, @"LSHandlerContentTag");
                CFStringRef v80 = v79;
                if (v79)
                {
                  if (CFGetTypeID(v79) == v78) {
                    CFStringRef v81 = v80;
                  }
                  else {
                    CFStringRef v81 = 0;
                  }
                }
                else
                {
                  CFStringRef v81 = 0;
                }
                LODWORD(v44) = _LSDatabaseCreateStringForCFString(v19, v81, *((unsigned __int8 *)v19 + 104 * BindingMapIndex + 236));
                goto LABEL_61;
              }
            }
          }
          else if (CFDictionaryContainsKey(v17, @"LSHandlerURLScheme"))
          {
            CFTypeID v73 = CFStringGetTypeID();
            CFStringRef v74 = (const __CFString *)CFDictionaryGetValue(v17, @"LSHandlerURLScheme");
            CFStringRef v75 = v74;
            if (v74)
            {
              if (CFGetTypeID(v74) == v73) {
                CFStringRef v76 = v75;
              }
              else {
                CFStringRef v76 = 0;
              }
            }
            else
            {
              CFStringRef v76 = 0;
            }
            LODWORD(v44) = _LSDatabaseCreateStringForCFString(v19, v76, 1);
            int BindingMapIndex = 5;
LABEL_61:
            if (v44)
            {
              LSHandlerPref::GetOrAddHandlerPref(v19, (int)v44, BindingMapIndex, 1, v87);
              long long v50 = v86;
              for (unint64_t j = 7; j > 1; --j)
              {
                *long long v50 = kLSVersionNumberNull;
                v50[1] = *(_OWORD *)algn_182AF9270;
                v50 += 2;
              }
              if (BindingMapIndex == 5) {
                unint64_t v52 = 5;
              }
              else {
                unint64_t v52 = 0;
              }
              CFDictionaryRef v53 = (const __CFDictionary *)CFDictionaryGetValue(v17, @"LSHandlerPreferredVersions");
              CFDictionaryRef v54 = v53;
              if (v53)
              {
                CFTypeID v55 = CFGetTypeID(v53);
                if (v55 == CFDictionaryGetTypeID())
                {
                  uint64_t v56 = 0;
                  uint64_t v57 = v86;
                  do
                  {
                    uint64_t v58 = (__CFString *)CFDictionaryGetValue(v54, kLSHandlerRoleKeys[v56]);
                    BOOL v59 = v58;
                    if (v58)
                    {
                      CFTypeID v60 = CFGetTypeID(v58);
                      if (v60 == CFStringGetTypeID())
                      {
                        _LSGetVersionFromString(v59, v109);
                        long long v61 = v109[1];
                        *uint64_t v57 = v109[0];
                        v57[1] = v61;
                      }
                    }
                    v57 += 2;
                    ++v56;
                  }
                  while (v56 != 6);
                }
              }
              long long v95 = v86[8];
              long long v96 = v86[9];
              v97[0] = v86[10];
              v97[1] = v86[11];
              long long v91 = v86[4];
              long long v92 = v86[5];
              long long v93 = v86[6];
              long long v94 = v86[7];
              *(_OWORD *)&v87[1] = v86[0];
              long long v88 = v86[1];
              v62 = v97;
              unint64_t v63 = 5;
              long long v89 = v86[2];
              long long v90 = v86[3];
              do
              {
                id v64 = kLSHandlerRoleKeys[v63];
                CFTypeID v65 = CFStringGetTypeID();
                CFStringRef v66 = (const __CFString *)CFDictionaryGetValue(v17, v64);
                CFStringRef v67 = v66;
                if (v66 && CFGetTypeID(v66) == v65)
                {
                  int v68 = _LSDatabaseCreateStringForCFString(v19, v67, 0);
                  if (v63 == 5) {
                    unsigned int v70 = -1;
                  }
                  else {
                    unsigned int v70 = 1 << v63;
                  }
                  long long v71 = v62[1];
                  v107[0] = *v62;
                  v107[1] = v71;
                  LSHandlerPref::SetRoleHandler(v19, (_LSDatabase *)v87[0], v70, v68, v107, v69);
                }
                v62 -= 2;
              }
              while (v63-- > v52);
              CFArrayRef v11 = (const __CFArray *)v83;
              CFIndex v14 = v84;
            }
          }
LABEL_83:
          _CSStringRelease();
          CFIndex v15 = v85 + 1;
        }
        while (v85 + 1 != v14);
      }
    }
  }

  return 0;
}

void sub_182A8E94C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN13LSHandlerPref4LoadEP11_LSDatabasePK9__CFArray_block_invoke(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [NSNumber numberWithUnsignedInt:a2];
  objc_msgSend(v2, "addObject:");
}

void sub_182A8EA2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t LSHandlerPref::Save(LSHandlerPref *this, _LSDatabase *a2)
{
  id v2 = this;
  v17[0] = 0;
  v17[1] = v17;
  v17[2] = 0x3812000000;
  void v17[3] = __Block_byref_object_copy__36;
  v17[4] = __Block_byref_object_dispose__37;
  v17[5] = &unk_182B5933F;
  CFTypeRef v18 = 0;
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (!Mutable)
  {
    CFArrayRef v4 = [MEMORY[0x1E4F28B00] currentHandler];
    unint64_t v5 = [NSString stringWithUTF8String:"static OSStatus LSHandlerPref::Save(__strong LSDatabaseRef)"];
    [v4 handleFailureInFunction:v5 file:@"LSPrefs.mm" lineNumber:1043 description:@"Failed to create empty CFArray."];
  }
  uint64_t v10 = MEMORY[0x1E4F143A8];
  uint64_t v11 = 3321888768;
  CFTypeID v12 = ___ZN13LSHandlerPref4SaveEP11_LSDatabase_block_invoke;
  char v13 = &unk_1ECB178E8;
  int v6 = v2;
  CFIndex v14 = v6;
  CFIndex v15 = v17;
  CFTypeRef v16 = Mutable;
  if (Mutable) {
    CFRetain(Mutable);
  }
  _CSStoreEnumerateUnits();
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3321888768;
  v8[2] = ___ZN13LSHandlerPref4SaveEP11_LSDatabase_block_invoke_53;
  void v8[3] = &__block_descriptor_40_ea8_32c29_ZTS10CFReleaserIP9__CFArrayE_e25_v16__0____CFDictionary__8l;
  CFTypeRef cf = Mutable;
  if (Mutable) {
    CFRetain(Mutable);
  }
  _LSWithMutableSecurePreferences(v8);
  if (cf) {
    CFRelease(cf);
  }
  CFTypeRef cf = 0;
  if (v16) {
    CFRelease(v16);
  }
  CFTypeRef v16 = 0;

  _Block_object_dispose(v17, 8);
  if (v18) {
    CFRelease(v18);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }

  return 0;
}

void sub_182A8EC88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,CFTypeRef a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,CFTypeRef cf)
{
  _Block_object_dispose(&a22, 8);
  if (cf) {
    CFRelease(cf);
  }

  _Unwind_Resume(a1);
}

CFTypeRef __Block_byref_object_copy__36(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 48);
  *(void *)(a1 + 48) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void ___ZN13LSHandlerPref4SaveEP11_LSDatabase_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (!*(_DWORD *)(a3 + 36))
  {
    uint64_t v11 = 32;
    while (!*(_DWORD *)(a3 + v11))
    {
      v11 -= 4;
      if (v11 == 12) {
        return;
      }
    }
  }
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableDictionaryRef v7 = Mutable;
    int BindingMapIndex = _LSDatabaseFindBindingMapIndex(*(void *)(a1 + 32), *(_DWORD *)(a3 + 12));
    uint64_t v9 = (void *)_CSStringCopyCFString();
    if (!v9)
    {
LABEL_32:
      CFRelease(v7);
      return;
    }
    value = v9;
    if (BindingMapIndex == 5)
    {
      uint64_t v10 = @"LSHandlerURLScheme";
    }
    else
    {
      if (BindingMapIndex)
      {
        uint64_t v12 = _CSStringCopyCFString();
        if (!v12)
        {
LABEL_31:
          CFRelease(value);
          goto LABEL_32;
        }
        char v13 = (const void *)v12;
        CFDictionarySetValue(v7, @"LSHandlerContentTag", value);
        CFDictionarySetValue(v7, @"LSHandlerContentTagClass", v13);
        CFRelease(v13);
LABEL_15:
        CFMutableDictionaryRef v14 = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        uint64_t v15 = *(void *)(*(void *)(a1 + 40) + 8);
        CFTypeRef v16 = *(__CFDictionary **)(v15 + 48);
        if (v16 != v14)
        {
          *(void *)(v15 + 48) = v14;
          CFMutableDictionaryRef v14 = v16;
        }
        if (v14) {
          CFRelease(v14);
        }
        uint64_t v17 = 0;
        CFTypeRef v18 = (const void **)kLSHandlerRoleKeys;
        do
        {
          if (*(_DWORD *)(a3 + v17 + 16))
          {
            __int16 v19 = (const void *)_CSStringCopyCFString();
            if (!v19) {
              goto LABEL_31;
            }
            uint64_t v20 = a3 + 8 * v17;
            long long v21 = *(_OWORD *)(v20 + 56);
            v26[0] = *(_OWORD *)(v20 + 40);
            v26[1] = v21;
            CFStringRef v22 = _LSVersionNumberCopyStringRepresentation(v26);
            char v23 = *(__CFDictionary **)(*(void *)(*(void *)(a1 + 40) + 8) + 48);
            CFStringRef v24 = *v18;
            if (v22) {
              CFDictionarySetValue(v23, *v18, v22);
            }
            else {
              CFDictionarySetValue(v23, *v18, @"-");
            }
            CFDictionarySetValue(v7, v24, v19);
            CFRelease(v19);
            if (v22) {
              CFRelease(v22);
            }
          }
          v17 += 4;
          ++v18;
        }
        while (v17 != 24);
        if (CFDictionaryGetCount(*(CFDictionaryRef *)(*(void *)(*(void *)(a1 + 40) + 8) + 48)) >= 1) {
          CFDictionarySetValue(v7, @"LSHandlerPreferredVersions", *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 48));
        }
        CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 48), v7);
        goto LABEL_31;
      }
      uint64_t v10 = @"LSHandlerContentType";
    }
    CFDictionarySetValue(v7, v10, v9);
    goto LABEL_15;
  }
}

void sub_182A8F02C(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_ea8_48c29_ZTS10CFReleaserIP9__CFArrayE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 48);
  *(void *)(a1 + 48) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_ea8_48c29_ZTS10CFReleaserIP9__CFArrayE(uint64_t a1)
{
  id v2 = *(const void **)(a1 + 48);
  if (v2) {
    CFRelease(v2);
  }
  *(void *)(a1 + 48) = 0;
}

void ___ZN13LSHandlerPref4SaveEP11_LSDatabase_block_invoke_53(uint64_t a1, CFMutableDictionaryRef theDict)
{
  id v2 = *(const void **)(a1 + 32);
  if (v2) {
    CFDictionarySetValue(theDict, @"LSHandlers", v2);
  }
  else {
    CFDictionaryRemoveValue(theDict, @"LSHandlers");
  }
}

CFTypeRef __copy_helper_block_ea8_32c29_ZTS10CFReleaserIP9__CFArrayE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 32);
  *(void *)(a1 + 32) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_ea8_32c29_ZTS10CFReleaserIP9__CFArrayE(uint64_t a1)
{
  id v2 = *(const void **)(a1 + 32);
  if (v2) {
    CFRelease(v2);
  }
  *(void *)(a1 + 32) = 0;
}

void _LSHandlerPrefRemoveAllWithBundleID(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  CFAllocatorRef v5 = (void *)os_transaction_create();
  if (([(id)__LSDefaultsGetSharedInstance() isServer] & 1) != 0
    || ([(id)__LSDefaultsGetSharedInstance() hasServer] & 1) == 0)
  {
    v26[0] = MEMORY[0x1E4F143A8];
    v26[1] = 3221225472;
    _OWORD v26[2] = ___LSHandlerPrefRemoveAllWithBundleID_block_invoke;
    v26[3] = &unk_1E52302E0;
    id v27 = v3;
    id v29 = v4;
    id v28 = v5;
    uint64_t v9 = (void (**)(void))MEMORY[0x18530F950](v26);
    uint64_t v10 = &v27;
    uint64_t v11 = &v29;
    uint64_t v12 = &v28;
    if (![(id)__LSDefaultsGetSharedInstance() isServer])
    {
      v9[2](v9);
      goto LABEL_8;
    }
    CFMutableDictionaryRef v14 = +[LSDBExecutionContext sharedServerInstance]();
    v24[0] = MEMORY[0x1E4F143A8];
    v24[1] = 3221225472;
    void v24[2] = ___LSHandlerPrefRemoveAllWithBundleID_block_invoke_59;
    v24[3] = &unk_1E522D260;
    uint64_t v15 = v9;
    CFTypeID v25 = v15;
    -[LSDBExecutionContext performAsyncWrite:]((uint64_t)v14, v24);
    char v13 = (id *)&v25;
    uint64_t v9 = v15;
  }
  else
  {
    v20[0] = (void (*)(void, void))MEMORY[0x1E4F143A8];
    v20[1] = (void (*)(void, void))3221225472;
    v20[2] = (void (*)(void, void))___LSHandlerPrefRemoveAllWithBundleID_block_invoke_2;
    v20[3] = (void (*)(void, void))&unk_1E5230308;
    id v6 = v3;
    id v21 = v6;
    id v7 = v4;
    id v23 = v7;
    id v8 = v5;
    id v22 = v8;
    +[_LSDService XPCProxyWithErrorHandler:]((uint64_t)_LSDModifyService, v20);
    uint64_t v9 = (void (**)(void))objc_claimAutoreleasedReturnValue();
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    v16[2] = ___LSHandlerPrefRemoveAllWithBundleID_block_invoke_63;
    void v16[3] = &unk_1E5230330;
    id v17 = v6;
    id v19 = v7;
    id v18 = v8;
    [v9 removeAllHandlerPrefsForBundleID:v17 completionHandler:v16];
    uint64_t v10 = &v21;
    uint64_t v11 = &v23;
    uint64_t v12 = &v22;
    char v13 = &v17;

    CFMutableDictionaryRef v14 = v19;
  }

LABEL_8:
}

void sub_182A8F3D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,void *a23)
{
  _Unwind_Resume(a1);
}

void sub_182A8F740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a9);
  _Unwind_Resume(a1);
}

void sub_182A8F854(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A8F8EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LaunchServices::PrefsStorage *LaunchServices::PrefsStorage::PrefsStorage(LaunchServices::PrefsStorage *this)
{
  id v2 = (atomic_uint *)((char *)this + 4);
  *(void *)this = 0xFFFFFFFF00000000;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((void *)this + 3) = [MEMORY[0x1E4F1CA60] dictionary];
  id v3 = [(id)__LSDefaultsGetSharedInstance() preferencesUpdateNotificationName];
  LaunchServices::notifyd::NotifyToken::RegisterCheck(v3, &v8);
  LaunchServices::notifyd::NotifyToken::operator=(v2, (atomic_uint *)&v8);
  LaunchServices::notifyd::NotifyToken::~NotifyToken((LaunchServices::notifyd::NotifyToken *)&v8);

  uint64_t State = LaunchServices::notifyd::NotifyToken::getState((LaunchServices::notifyd::NotifyToken *)v2);
  if (v5)
  {
    uint64_t v6 = State;
    os_unfair_lock_lock((os_unfair_lock_t)this);
    *((void *)this + 1) = v6;
    os_unfair_lock_unlock((os_unfair_lock_t)this);
  }
  LaunchServices::PrefsStorage::_update((os_unfair_lock_s *)this);
  return this;
}

void sub_182A8F9BC(_Unwind_Exception *a1)
{
  LaunchServices::notifyd::NotifyToken::~NotifyToken(v1);
  _Unwind_Resume(a1);
}

void LaunchServices::PrefsStorage::_update(os_unfair_lock_s *this)
{
  uint64_t v7 = 0;
  unsigned int v8 = &v7;
  uint64_t v9 = 0x3032000000;
  uint64_t v10 = __Block_byref_object_copy__69;
  uint64_t v11 = __Block_byref_object_dispose__70;
  id v12 = 0;
  if (([(id)__LSDefaultsGetSharedInstance() isServer] & 1) != 0
    || ([(id)__LSDefaultsGetSharedInstance() hasServer] & 1) == 0)
  {
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    v6[2] = ___ZN14LaunchServices12PrefsStorage7_updateEv_block_invoke;
    v6[3] = &unk_1E5230268;
    v6[4] = &v7;
    _LSWithInsecurePreferences(v6);
  }
  else
  {
    uint64_t v2 = +[_LSDService synchronousXPCProxyWithErrorHandler:]((uint64_t)_LSDReadService, __block_literal_global_62);
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    v5[2] = ___ZN14LaunchServices12PrefsStorage7_updateEv_block_invoke_72;
    v5[3] = &unk_1E5230358;
    v5[4] = &v7;
    [v2 getPreferencesWithCompletionHandler:v5];
  }
  if (v8[5])
  {
    os_unfair_lock_lock(this + 4);
    CFPropertyListRef DeepCopy = CFPropertyListCreateDeepCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CFPropertyListRef)v8[5], 1uLL);
    id v4 = *(void **)&this[6]._os_unfair_lock_opaque;
    *(void *)&this[6]._os_unfair_lock_opaque = DeepCopy;

    os_unfair_lock_unlock(this + 4);
  }
  _Block_object_dispose(&v7, 8);
}

void sub_182A8FBA8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v2 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::PrefsStorage::preferenceKeyMayBeSelfSet(LaunchServices::PrefsStorage *this, NSString *a2)
{
  return [MEMORY[0x1E4F1CBF0] containsObject:this];
}

BOOL LaunchServices::PrefsStorage::_needsUpdate(os_unfair_lock_s *this)
{
  uint64_t State = LaunchServices::notifyd::NotifyToken::getState((LaunchServices::notifyd::NotifyToken *)&this[1]);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = State;
  os_unfair_lock_lock(this);
  uint64_t v6 = *(void *)&this[2]._os_unfair_lock_opaque;
  BOOL v7 = v6 != v4;
  if (v6 != v4)
  {
    unsigned int v8 = LaunchServices::PrefsStorage::_GetLog(v5);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
      LaunchServices::PrefsStorage::_needsUpdate(&this[2]._os_unfair_lock_opaque, v4, v8);
    }

    *(void *)&this[2]._os_unfair_lock_opaque = v4;
  }
  os_unfair_lock_unlock(this);
  return v7;
}

id LaunchServices::PrefsStorage::_GetLog(LaunchServices::PrefsStorage *this)
{
  if (LaunchServices::PrefsStorage::_GetLog(void)::once != -1) {
    dispatch_once(&LaunchServices::PrefsStorage::_GetLog(void)::once, &__block_literal_global_87_0);
  }
  uint64_t v1 = (void *)LaunchServices::PrefsStorage::_GetLog(void)::result;

  return v1;
}

uint64_t __Block_byref_object_copy__69(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__70(uint64_t a1)
{
}

void ___ZN14LaunchServices12PrefsStorage7_updateEv_block_invoke(uint64_t a1, void *a2)
{
}

void ___ZN14LaunchServices12PrefsStorage7_updateEv_block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  char v3 = LaunchServices::PrefsStorage::_GetLog(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    ___ZN14LaunchServices12PrefsStorage7_updateEv_block_invoke_2_cold_1();
  }
}

void ___ZN14LaunchServices12PrefsStorage7_updateEv_block_invoke_72(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  BOOL v7 = a3;
  unsigned int v8 = v7;
  if (v6)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2);
  }
  else
  {
    uint64_t v9 = LaunchServices::PrefsStorage::_GetLog(v7);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      ___ZN14LaunchServices12PrefsStorage7_updateEv_block_invoke_2_cold_1();
    }
  }
}

void LaunchServices::PrefsStorage::_updateOtherProcesses(os_unfair_lock_s *this)
{
  os_unfair_lock_lock(this);
  uint64_t State = LaunchServices::notifyd::NotifyToken::getState((LaunchServices::notifyd::NotifyToken *)&this[1]);
  if (v3)
  {
    uint64_t v4 = (LaunchServices::PrefsStorage *)LaunchServices::notifyd::NotifyToken::setState((LaunchServices::notifyd::NotifyToken *)&this[1], State + 1);
    char v5 = LaunchServices::PrefsStorage::_GetLog(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
      LaunchServices::PrefsStorage::_updateOtherProcesses();
    }
  }
  os_unfair_lock_unlock(this);
}

void LaunchServices::PrefsStorage::_setNeedsUpdate(os_unfair_lock_s *this)
{
  os_unfair_lock_lock(this);
  *(void *)&this[2]._os_unfair_lock_opaque = -1;
  char v3 = LaunchServices::PrefsStorage::_GetLog(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
    LaunchServices::PrefsStorage::_setNeedsUpdate(v3);
  }

  os_unfair_lock_unlock(this);
}

__CFString *LaunchServices::PrefsStorage::_GetBundleIdentifierWithAppNode(void *a1, void *a2)
{
  id v3 = a1;
  id v12 = 0;
  uint64_t v4 = [v3 bundleIdentifierWithError:&v12];
  id v5 = v12;
  id v6 = v5;
  if (!v4)
  {
    if ([v5 code] == -10813
      && ([v6 domain],
          BOOL v7 = objc_claimAutoreleasedReturnValue(),
          int v8 = [v7 isEqual:*MEMORY[0x1E4F28760]],
          v7,
          v8))
    {
      uint64_t v10 = LaunchServices::PrefsStorage::_GetLog(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
        LaunchServices::PrefsStorage::_GetBundleIdentifierWithAppNode();
      }

      uint64_t v4 = &stru_1ECB1A570;
    }
    else
    {
      uint64_t v4 = 0;
      if (a2) {
        *a2 = v6;
      }
    }
  }

  return v4;
}

void sub_182A8FFE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::PrefsStorage::_GetIndexOfValueForNodeInPrefsArray(LaunchServices::PrefsStorage *this, NSArray *a2, FSNode *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = this;
  id v5 = a2;
  if (!v5)
  {
    CFTypeRef v16 = [MEMORY[0x1E4F28B00] currentHandler];
    id v17 = objc_msgSend(NSString, "stringWithUTF8String:", "static NSInteger LaunchServices::PrefsStorage::_GetIndexOfValueForNodeInPrefsArray(NSArray *__strong, FSNode *__strong)");
    [v16 handleFailureInFunction:v17, @"LSPrefs.mm", 1353, @"Invalid parameter not satisfying: %@", @"appNode != nil" file lineNumber description];
  }
  id v6 = v5;
  BOOL v7 = v4;
  if (!v7)
  {
    id v18 = [MEMORY[0x1E4F28B00] currentHandler];
    id v19 = objc_msgSend(NSString, "stringWithUTF8String:", "static NSInteger LaunchServices::PrefsStorage::_GetIndexOfValueInPrefsArrayWithPredicate(NSArray *__strong, const Pred &) [Pred = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreServices/LaunchServices.subprj/Source/LaunchServices/Info/LSPrefs.mm:1355:63)]");
    [v18 handleFailureInFunction:v19, @"LSPrefs.mm", 1331, @"Invalid parameter not satisfying: %@", @"prefsArray != nil" file lineNumber description];
  }
  unint64_t v8 = [(LaunchServices::PrefsStorage *)v7 count];
  if (v8)
  {
    for (unint64_t i = 0; i < v8; i += 2)
    {
      uint64_t v10 = [(LaunchServices::PrefsStorage *)v7 objectAtIndexedSubscript:i];
      if (v10
        && _NSIsNSData()
        && (uint64_t v11 = (LaunchServices::PrefsStorage *)_LSAliasMatchesNode(v10, v6), v11)
        && (uint64_t v12 = i + 1, i + 1 < v8))
      {
        char v13 = LaunchServices::PrefsStorage::_GetLog(v11);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
        {
          CFMutableDictionaryRef v14 = [(LaunchServices::PrefsStorage *)v7 objectAtIndexedSubscript:i + 1];
          *(_DWORD *)LSVersionNumber buf = 134218243;
          unint64_t v21 = i;
          __int16 v22 = 2113;
          id v23 = v14;
          _os_log_debug_impl(&dword_182959000, v13, OS_LOG_TYPE_DEBUG, "Found matched pref in prefs array at index %llu. Current value is %{private}@", buf, 0x16u);
        }
      }
      else
      {
        uint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
      }

      if (v12 != 0x7FFFFFFFFFFFFFFFLL) {
        break;
      }
    }
  }
  else
  {
    uint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
  }

  return v12;
}

void sub_182A9028C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL LaunchServices::PrefsStorage::_SetValueForNodeInPrefsArray(void *a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  BOOL v7 = a1;
  unint64_t v8 = a2;
  id v10 = a3;
  if (v7)
  {
    if (v8) {
      goto LABEL_3;
    }
  }
  else
  {
    id v17 = [MEMORY[0x1E4F28B00] currentHandler];
    id v18 = objc_msgSend(NSString, "stringWithUTF8String:", "static BOOL LaunchServices::PrefsStorage::_SetValueForNodeInPrefsArray(NSMutableArray *__strong, FSNode *__strong, __strong id, NSError *__autoreleasing *)");
    [v17 handleFailureInFunction:v18, @"LSPrefs.mm", 1402, @"Invalid parameter not satisfying: %@", @"prefsArray != nil" file lineNumber description];

    if (v8) {
      goto LABEL_3;
    }
  }
  id v19 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v20 = objc_msgSend(NSString, "stringWithUTF8String:", "static BOOL LaunchServices::PrefsStorage::_SetValueForNodeInPrefsArray(NSMutableArray *__strong, FSNode *__strong, __strong id, NSError *__autoreleasing *)");
  [v19 handleFailureInFunction:v20, @"LSPrefs.mm", 1403, @"Invalid parameter not satisfying: %@", @"appNode != nil" file lineNumber description];

LABEL_3:
  IndexOfValueForNodeInPrefsArray = (LaunchServices::PrefsStorage *)LaunchServices::PrefsStorage::_GetIndexOfValueForNodeInPrefsArray(v7, v8, v9);
  uint64_t v12 = LaunchServices::PrefsStorage::_GetLog(IndexOfValueForNodeInPrefsArray);
  BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG);
  if (IndexOfValueForNodeInPrefsArray == (LaunchServices::PrefsStorage *)0x7FFFFFFFFFFFFFFFLL)
  {
    if (v10)
    {
      if (v13) {
        LaunchServices::PrefsStorage::_SetValueForNodeInPrefsArray();
      }

      uint64_t v12 = [(NSArray *)v8 bookmarkDataRelativeToNode:0 error:a4];
      BOOL v14 = v12 != 0;
      if (!v12) {
        goto LABEL_16;
      }
      [(LaunchServices::PrefsStorage *)v7 addObject:v12];
      [(LaunchServices::PrefsStorage *)v7 addObject:v10];
    }
    else if (v13)
    {
      LaunchServices::PrefsStorage::_SetValueForNodeInPrefsArray();
    }
    BOOL v14 = 1;
LABEL_16:

    goto LABEL_21;
  }
  if (v10)
  {
    if (v13)
    {
      CFTypeRef v16 = [(LaunchServices::PrefsStorage *)v7 objectAtIndexedSubscript:IndexOfValueForNodeInPrefsArray];
      *(_DWORD *)LSVersionNumber buf = 138478339;
      __int16 v22 = v16;
      __int16 v23 = 2113;
      uint64_t v24 = v8;
      __int16 v25 = 2113;
      id v26 = v10;
      _os_log_debug_impl(&dword_182959000, v12, OS_LOG_TYPE_DEBUG, "Replacing value %{private}@ for app node %{private}@ with value %{private}@.", buf, 0x20u);
    }
    [(LaunchServices::PrefsStorage *)v7 setObject:v10 atIndexedSubscript:IndexOfValueForNodeInPrefsArray];
  }
  else
  {
    if (v13) {
      LaunchServices::PrefsStorage::_SetValueForNodeInPrefsArray();
    }

    [(LaunchServices::PrefsStorage *)v7 removeObjectAtIndex:IndexOfValueForNodeInPrefsArray];
    [(LaunchServices::PrefsStorage *)v7 removeObjectAtIndex:(char *)IndexOfValueForNodeInPrefsArray - 1];
  }
  BOOL v14 = 1;
LABEL_21:

  return v14;
}

void sub_182A905EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN14LaunchServices12PrefsStorage7_GetLogEv_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.launchservices", "prefs-storage");
  uint64_t v1 = (void *)LaunchServices::PrefsStorage::_GetLog(void)::result;
  LaunchServices::PrefsStorage::_GetLog(void)::CFTypeRef result = (uint64_t)v0;
}

uint64_t LaunchServices::PrefsStorage::GetShared(LaunchServices::PrefsStorage *this)
{
  if (LaunchServices::PrefsStorage::GetShared(void)::once != -1) {
    dispatch_once(&LaunchServices::PrefsStorage::GetShared(void)::once, &__block_literal_global_91);
  }
  if (LaunchServices::PrefsStorage::_needsUpdate((os_unfair_lock_s *)LaunchServices::PrefsStorage::GetShared(void)::result)) {
    LaunchServices::PrefsStorage::_update((os_unfair_lock_s *)LaunchServices::PrefsStorage::GetShared(void)::result);
  }
  return LaunchServices::PrefsStorage::GetShared(void)::result;
}

void ___ZN14LaunchServices12PrefsStorage9GetSharedEv_block_invoke()
{
}

void sub_182A9072C(_Unwind_Exception *a1)
{
  MEMORY[0x18530EAF0](v1, 0x1080C4013E61A9FLL);
  _Unwind_Resume(a1);
}

id LaunchServices::PrefsStorage::getAllPreferences(LaunchServices::PrefsStorage *this)
{
  uint64_t v2 = (os_unfair_lock_s *)((char *)this + 16);
  os_unfair_lock_lock((os_unfair_lock_t)this + 4);
  CFPropertyListRef DeepCopy = (void *)CFPropertyListCreateDeepCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *((CFPropertyListRef *)this + 3), 0);
  os_unfair_lock_unlock(v2);

  return DeepCopy;
}

BOOL LaunchServices::PrefsStorage::setValueForNode(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  uint64_t v33 = 0;
  uint64_t v34 = &v33;
  uint64_t v35 = 0x2020000000;
  char v36 = 0;
  if (([(id)__LSDefaultsGetSharedInstance() isServer] & 1) != 0
    || ![(id)__LSDefaultsGetSharedInstance() hasServer])
  {
    if (v9 && v10)
    {
      BOOL v14 = LaunchServices::PrefsStorage::_GetBundleIdentifierWithAppNode(v10, a5);
      if (v14)
      {
        os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
        uint64_t v15 = [*(id *)(a1 + 24) objectForKeyedSubscript:v9];
        CFTypeRef v16 = [v15 objectForKeyedSubscript:v14];
        id v17 = (void *)[v16 mutableCopy];

        if (!v17)
        {
          id v17 = [MEMORY[0x1E4F1CA48] array];
        }
        BOOL v18 = LaunchServices::PrefsStorage::_SetValueForNodeInPrefsArray(v17, v10, v11, (uint64_t)a5);
        *((unsigned char *)v34 + 24) = v18;
        if (v18)
        {
          id v19 = [*(id *)(a1 + 24) objectForKeyedSubscript:v9];
          if (!v19)
          {
            uint64_t v20 = LaunchServices::PrefsStorage::_GetLog(0);
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
              LaunchServices::PrefsStorage::setValueForNode();
            }

            id v19 = [MEMORY[0x1E4F1CA60] dictionary];
            objc_msgSend(*(id *)(a1 + 24), "setObject:forKeyedSubscript:");
          }
          unint64_t v21 = (void *)[v17 copy];
          [v19 setObject:v21 forKeyedSubscript:v14];

          v28[0] = MEMORY[0x1E4F143A8];
          v28[1] = 3221225472;
          v28[2] = ___ZN14LaunchServices12PrefsStorage15setValueForNodeEP8NSStringP6FSNodeP11objc_objectPU15__autoreleasingP7NSError_block_invoke_96;
          v28[3] = &unk_1E52303A8;
          id v29 = v9;
          id v22 = v19;
          id v30 = v22;
          _LSWithMutableInsecurePreferences(v28);
          LaunchServices::PrefsStorage::_updateOtherProcesses((os_unfair_lock_s *)a1);
        }
        os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16));
        if (*((unsigned char *)v34 + 24))
        {
          uint64_t v24 = LaunchServices::PrefsStorage::_GetLog(v23);
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)LSVersionNumber buf = 138543875;
            *(void *)&uint8_t buf[4] = v9;
            *(_WORD *)&buf[12] = 2113;
            *(void *)&buf[14] = v14;
            *(_WORD *)&unsigned char buf[22] = 2113;
            int v40 = (uint64_t (*)(uint64_t, uint64_t))v11;
            _os_log_debug_impl(&dword_182959000, v24, OS_LOG_TYPE_DEBUG, "SET prefs[%{public}@][%{private}@] = %{private}@", buf, 0x20u);
          }
        }
      }
    }
    else if (a5)
    {
      uint64_t v37 = *MEMORY[0x1E4F28228];
      CFStringRef v38 = @"invalid input parameters";
      __int16 v25 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v38 forKeys:&v37 count:1];
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -50, (uint64_t)"setValueForNode", 1585, v25);
      *a5 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    *(void *)LSVersionNumber buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000;
    int v40 = __Block_byref_object_copy__69;
    long long v41 = __Block_byref_object_dispose__70;
    id v42 = 0;
    v32[0] = (void (*)(void, void))MEMORY[0x1E4F143A8];
    v32[1] = (void (*)(void, void))3221225472;
    void v32[2] = (void (*)(void, void))___ZN14LaunchServices12PrefsStorage15setValueForNodeEP8NSStringP6FSNodeP11objc_objectPU15__autoreleasingP7NSError_block_invoke;
    v32[3] = (void (*)(void, void))&unk_1E522BA78;
    v32[4] = (void (*)(void, void))buf;
    uint64_t v12 = +[_LSDService synchronousXPCProxyWithErrorHandler:]((uint64_t)_LSDModifyService, v32);
    BOOL v13 = [v10 URL];
    v31[0] = MEMORY[0x1E4F143A8];
    v31[1] = 3221225472;
    v31[2] = ___ZN14LaunchServices12PrefsStorage15setValueForNodeEP8NSStringP6FSNodeP11objc_objectPU15__autoreleasingP7NSError_block_invoke_2;
    void v31[3] = &unk_1E5230380;
    v31[4] = &v33;
    v31[5] = buf;
    [v12 setPreferenceValue:v11 forKey:v9 forApplicationAtURL:v13 completionHandler:v31];

    if (*((unsigned char *)v34 + 24))
    {
      LaunchServices::PrefsStorage::_setNeedsUpdate((os_unfair_lock_s *)a1);
    }
    else if (a5)
    {
      *a5 = *(id *)(*(void *)&buf[8] + 40);
    }

    _Block_object_dispose(buf, 8);
  }
  BOOL v26 = *((unsigned char *)v34 + 24) != 0;
  _Block_object_dispose(&v33, 8);

  return v26;
}

void sub_182A90CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void ___ZN14LaunchServices12PrefsStorage15setValueForNodeEP8NSStringP6FSNodeP11objc_objectPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
}

void ___ZN14LaunchServices12PrefsStorage15setValueForNodeEP8NSStringP6FSNodeP11objc_objectPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, char a2, id obj)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a2;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), obj);
}

void ___ZN14LaunchServices12PrefsStorage15setValueForNodeEP8NSStringP6FSNodeP11objc_objectPU15__autoreleasingP7NSError_block_invoke_96(uint64_t a1, CFMutableDictionaryRef theDict)
{
}

void _LSWithMutableInsecurePreferences(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = (void *)MEMORY[0x18530F680]();
    __int16 v5 = 0;
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = ___LSWithMutableInsecurePreferences_block_invoke;
    v3[3] = &unk_1E5230440;
    id v4 = v1;
    _LSPreferences::With(&v5, v3);
  }
}

void sub_182A90E80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSPreferences::With(unsigned char *a1, void *a2)
{
  id v4 = a2;
  if (a1 && v4)
  {
    if (_LSPreferences::With(_LSPreferences::SecurityContext const*,void({block_pointer})(void const*))::once != -1) {
      dispatch_once(&_LSPreferences::With(_LSPreferences::SecurityContext const*,void({block_pointer})(void const*))::once, &__block_literal_global_63);
    }
    id v3 = &_LSPreferences::With(_LSPreferences::SecurityContext const*,void({block_pointer})(void const*))::insecurePrefs;
    if (*a1) {
      id v3 = &_LSPreferences::With(_LSPreferences::SecurityContext const*,void({block_pointer})(void const*))::securePrefs;
    }
    _LSPreferences::with((dispatch_queue_t *)*v3, (uint64_t)a1, v4);
  }
}

void sub_182A90F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _LSWithInsecurePreferences(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = (void *)MEMORY[0x18530F680]();
    __int16 v5 = 256;
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = ___LSWithInsecurePreferences_block_invoke;
    v3[3] = &unk_1E5230440;
    id v4 = v1;
    _LSPreferences::With(&v5, v3);
  }
}

void sub_182A91020(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSWithMutableSecurePreferences(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = (void *)MEMORY[0x18530F680]();
    __int16 v5 = 1;
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = ___LSWithMutableSecurePreferences_block_invoke;
    v3[3] = &unk_1E5230440;
    id v4 = v1;
    _LSPreferences::With(&v5, v3);
  }
}

void sub_182A91108(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSWithSecurePreferences(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = (void *)MEMORY[0x18530F680]();
    __int16 v5 = 257;
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = ___LSWithSecurePreferences_block_invoke;
    v3[3] = &unk_1E5230440;
    id v4 = v1;
    _LSPreferences::With(&v5, v3);
  }
}

void sub_182A911F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSPreferences::_LSPreferences(_LSPreferences *this, char a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)this = a2;
  *((_DWORD *)this + 8) = -1;
  id v3 = (atomic_uint *)((char *)this + 32);
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 1) = 0;
  snprintf(__str, 0x100uLL, "com.apple.launchservices.prefs-%p", this);
  id v4 = dispatch_queue_attr_make_with_autorelease_frequency(MEMORY[0x1E4F14430], DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v5 = dispatch_queue_create(__str, v4);
  id v6 = (void *)*((void *)this + 3);
  *((void *)this + 3) = v5;

  _LSPreferences::load((dispatch_queue_t *)this, 0);
  BOOL v7 = (void *)MEMORY[0x18530F680]();
  unint64_t v8 = [(id)__LSDefaultsGetSharedInstance() preferencesFileChangeNotificationName];
  LaunchServices::notifyd::NotifyToken::RegisterCheck(v8, &v9);
  LaunchServices::notifyd::NotifyToken::operator=(v3, (atomic_uint *)&v9);
  LaunchServices::notifyd::NotifyToken::~NotifyToken((LaunchServices::notifyd::NotifyToken *)&v9);
}

void sub_182A91338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, char a12)
{
  LaunchServices::notifyd::NotifyToken::~NotifyToken((LaunchServices::notifyd::NotifyToken *)&a12);

  LaunchServices::notifyd::NotifyToken::~NotifyToken(v13);
  _Unwind_Resume(a1);
}

void _LSPreferences::load(dispatch_queue_t *this, int a2)
{
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = ___ZN14_LSPreferences4loadEb_block_invoke;
  v7[3] = &__block_descriptor_40_e5_v8__0l;
  void v7[4] = this;
  id v4 = (void (**)(void))MEMORY[0x18530F950](v7);
  dispatch_queue_t v5 = v4;
  if (a2)
  {
    dispatch_block_t v6 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_USER_INITIATED, 0, v4);

    dispatch_barrier_async(this[3], v6);
    dispatch_queue_t v5 = v6;
  }
  else
  {
    v4[2](v4);
  }
}

void sub_182A91460(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN14_LSPreferences4loadEb_block_invoke(uint64_t a1)
{
  id v1 = *(unsigned __int8 **)(a1 + 32);
  if ([(id)__LSDefaultsGetSharedInstance() hasPersistentPreferences])
  {
    uint64_t v2 = (void *)*((void *)v1 + 1);
    *((void *)v1 + 1) = 0;

    id v3 = (void *)MEMORY[0x18530F680]();
    int v4 = *v1;
    SharedInstance = (void *)__LSDefaultsGetSharedInstance();
    if (v4) {
      [SharedInstance securePreferencesFileURL];
    }
    else {
    uint64_t v6 = [SharedInstance preferencesFileURL];
    }
    BOOL v7 = (void *)*((void *)v1 + 2);
    *((void *)v1 + 2) = v6;

    applyStorageACLToURL(*v1, *((NSURL **)v1 + 2));
    unint64_t v8 = (void *)MEMORY[0x18530F680]();
    id v9 = objc_alloc(MEMORY[0x1E4F1C9E8]);
    uint64_t v10 = *((void *)v1 + 2);
    id v24 = 0;
    uint64_t v11 = [v9 initWithContentsOfURL:v10 error:&v24];
    id v12 = v24;
    BOOL v13 = (void *)*((void *)v1 + 1);
    *((void *)v1 + 1) = v11;

    if (!*((void *)v1 + 1))
    {
      char v14 = *v1;
      id v15 = *((id *)v1 + 2);
      CFTypeRef v16 = dispatch_get_global_queue(-2, 0);
      v20[0] = MEMORY[0x1E4F143A8];
      v20[1] = 3221225472;
      v20[2] = ___ZN14_LSPreferences4loadEb_block_invoke_2;
      v20[3] = &unk_1E522F3F8;
      char v23 = v14;
      id v21 = v15;
      id v22 = v12;
      id v17 = v15;
      dispatch_async(v16, v20);
    }
  }
  if (!*((void *)v1 + 1))
  {
    id v18 = objc_alloc_init(MEMORY[0x1E4F1C9E8]);
    id v19 = (void *)*((void *)v1 + 1);
    *((void *)v1 + 1) = v18;
  }
}

void applyStorageACLToURL(int a1, NSURL *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  acl_t acl_p = 0;
  if (!a1 || ([(id)__LSDefaultsGetSharedInstance() isInEducationMode] & 1) != 0)
  {
    char v4 = 0;
    dispatch_queue_t v5 = 0;
    id v6 = 0;
    goto LABEL_23;
  }
  acl_permset_t permset_p = 0;
  acl_entry_t entry_p = 0;
  *(void *)uu = 0;
  *(void *)&uu[8] = 0;
  acl_t acl_p = acl_init(1);
  if (acl_p)
  {
    if (acl_create_entry(&acl_p, &entry_p))
    {
      BOOL v7 = __error();
      unint64_t v8 = (void *)*MEMORY[0x1E4F28798];
      uint64_t v9 = 72;
    }
    else if (mbr_identifier_to_uuid(5, "systemusers", 0xBuLL, uu))
    {
      BOOL v7 = __error();
      unint64_t v8 = (void *)*MEMORY[0x1E4F28798];
      uint64_t v9 = 82;
    }
    else if (acl_get_permset(entry_p, &permset_p))
    {
      BOOL v7 = __error();
      unint64_t v8 = (void *)*MEMORY[0x1E4F28798];
      uint64_t v9 = 88;
    }
    else if (acl_add_perm(permset_p, ACL_CHANGE_OWNER|ACL_WRITE_SECURITY|ACL_READ_SECURITY|ACL_WRITE_EXTATTRIBUTES|ACL_READ_EXTATTRIBUTES|ACL_WRITE_ATTRIBUTES|ACL_READ_ATTRIBUTES|ACL_ADD_SUBDIRECTORY|ACL_DELETE|ACL_ADD_FILE|ACL_LIST_DIRECTORY))
    {
      BOOL v7 = __error();
      unint64_t v8 = (void *)*MEMORY[0x1E4F28798];
      uint64_t v9 = 94;
    }
    else if (acl_set_permset(entry_p, permset_p))
    {
      BOOL v7 = __error();
      unint64_t v8 = (void *)*MEMORY[0x1E4F28798];
      uint64_t v9 = 100;
    }
    else if (acl_set_tag_type(entry_p, ACL_EXTENDED_ALLOW))
    {
      BOOL v7 = __error();
      unint64_t v8 = (void *)*MEMORY[0x1E4F28798];
      uint64_t v9 = 106;
    }
    else
    {
      if (!acl_set_qualifier(entry_p, uu))
      {
        char v4 = 0;
        id v6 = 0;
        dispatch_queue_t v5 = acl_p;
        goto LABEL_23;
      }
      BOOL v7 = __error();
      unint64_t v8 = (void *)*MEMORY[0x1E4F28798];
      uint64_t v9 = 112;
    }
  }
  else
  {
    BOOL v7 = __error();
    unint64_t v8 = (void *)*MEMORY[0x1E4F28798];
    uint64_t v9 = 66;
  }
  _LSMakeNSErrorImpl(v8, *v7, (uint64_t)"copyPreferencesACL", v9, 0);
  id v6 = objc_claimAutoreleasedReturnValue();
  if (acl_p) {
    acl_free(acl_p);
  }
  dispatch_queue_t v5 = 0;
  char v4 = 1;
LABEL_23:

  id v10 = v6;
  if (v4)
  {
    uint64_t v11 = _LSDefaultLog();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uu = 138412802;
      *(void *)&uu[4] = v3;
      *(_WORD *)&uu[12] = 1024;
      *(_DWORD *)&uu[14] = a1;
      __int16 v20 = 2112;
      id v21 = v10;
      _os_log_error_impl(&dword_182959000, v11, OS_LOG_TYPE_ERROR, "could not create ACL to apply to %@ (secure: %d): %@", uu, 0x1Cu);
    }
  }
  else if (v5)
  {
    id v12 = [(NSURL *)v3 path];
    BOOL v13 = acl_set_file((const char *)[v12 fileSystemRepresentation], ACL_TYPE_EXTENDED, v5) == 0;

    if (!v13)
    {
      int v14 = *__error();
      id v15 = _LSDefaultLog();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
        applyStorageACLToURL((uint64_t)v3, v14, v15);
      }
    }
    acl_free(v5);
  }
}

void sub_182A91948(_Unwind_Exception *a1)
{
  acl_free(v3);

  _Unwind_Resume(a1);
}

void ___ZN14_LSPreferences4loadEb_block_invoke_2(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)MEMORY[0x18530F680]();
  id v3 = _LSDefaultLog();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    int v4 = *(unsigned __int8 *)(a1 + 48);
    dispatch_queue_t v5 = [*(id *)(a1 + 32) path];
    uint64_t v6 = *(void *)(a1 + 40);
    v7[0] = 67109634;
    v7[1] = v4;
    __int16 v8 = 2112;
    uint64_t v9 = v5;
    __int16 v10 = 2112;
    uint64_t v11 = v6;
    _os_log_error_impl(&dword_182959000, v3, OS_LOG_TYPE_ERROR, "Failed to read LS preferences (secure? %{BOOL}i) from %@: %@", (uint8_t *)v7, 0x1Cu);
  }
}

void sub_182A91A9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSPreferences::with(dispatch_queue_t *a1, uint64_t a2, void *a3)
{
  dispatch_queue_t v5 = a3;
  if (v5)
  {
    unint64_t v6 = LaunchServices::notifyd::NotifyToken::checkValue((LaunchServices::notifyd::NotifyToken *)(a1 + 4));
    if ((v6 & 0xFF00000000) != 0 && v6) {
      _LSPreferences::load(a1, 1);
    }
    if (*(unsigned char *)(a2 + 1))
    {
      uint64_t v14 = 0;
      id v15 = &v14;
      uint64_t v16 = 0x3032000000;
      id v17 = __Block_byref_object_copy__43;
      id v18 = __Block_byref_object_dispose__43;
      id v19 = 0;
      BOOL v7 = a1[3];
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = ___ZN14_LSPreferences4withEPKNS_15SecurityContextEU13block_pointerFvPKvE_block_invoke;
      block[3] = &unk_1E522E9E0;
      void block[4] = &v14;
      block[5] = a1;
      dispatch_sync(v7, block);
      if (v15[5]) {
        v5[2](v5);
      }
      _Block_object_dispose(&v14, 8);
      __int16 v8 = v19;
    }
    else
    {
      uint64_t v9 = a1[3];
      v10[0] = MEMORY[0x1E4F143A8];
      v10[1] = 3221225472;
      v10[2] = ___ZN14_LSPreferences4withEPKNS_15SecurityContextEU13block_pointerFvPKvE_block_invoke_2;
      v10[3] = &unk_1E522E990;
      uint64_t v12 = a1;
      uint64_t v11 = v5;
      dispatch_barrier_sync(v9, v10);
      __int16 v8 = v11;
    }
  }
}

void sub_182A91C4C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v2 - 80), 8);

  _Unwind_Resume(a1);
}

void ___ZN14_LSPreferences4withEPKNS_15SecurityContextEU13block_pointerFvPKvE_block_invoke(uint64_t a1)
{
  id v1 = *(void **)(*(void *)(a1 + 40) + 8);
  if (v1) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), v1);
  }
}

void ___ZN14_LSPreferences4withEPKNS_15SecurityContextEU13block_pointerFvPKvE_block_invoke_2(uint64_t a1)
{
  uint64_t v2 = *(id **)(a1 + 40);
  id v3 = v2[1];
  if (v3)
  {
    int v4 = (NSDictionary *)[v3 mutableCopy];
    if (v4)
    {
      (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
      if (([v2[1] isEqual:v4] & 1) == 0) {
        _LSPreferences::save((_LSPreferences *)v2, v4);
      }
    }
  }
}

void sub_182A91D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _LSPreferences::save(_LSPreferences *this, NSDictionary *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  int v4 = v3;
  if (v3)
  {
    dispatch_queue_t v5 = (NSDictionary *)*((void *)this + 1);
    if (v5) {
      BOOL v6 = v5 == v3;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      uint64_t v7 = [objc_alloc(MEMORY[0x1E4F1C9E8]) initWithDictionary:v3 copyItems:1];
      __int16 v8 = (void *)*((void *)this + 1);
      *((void *)this + 1) = v7;
    }
    if (*((void *)this + 2)
      && [(id)__LSDefaultsGetSharedInstance() hasPersistentPreferences])
    {
      id v21 = 0;
      uint64_t v9 = [MEMORY[0x1E4F28F98] dataWithPropertyList:v4 format:200 options:0 error:&v21];
      id v10 = v21;
      if (v9)
      {
        uint64_t v11 = [MEMORY[0x1E4F28CB8] defaultManager];
        [(id)v11 removeItemAtURL:*((void *)this + 2) error:0];

        uint64_t v12 = *((void *)this + 2);
        id v20 = v10;
        LOBYTE(v11) = [v9 writeToURL:v12 options:268435457 error:&v20];
        id v13 = v20;

        id v10 = v13;
        if ((v11 & 1) == 0)
        {
          uint64_t v14 = _LSDefaultLog();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          {
            int v18 = *(unsigned __int8 *)this;
            id v19 = [*((id *)this + 2) path];
            *(_DWORD *)LSVersionNumber buf = 67109634;
            int v23 = v18;
            __int16 v24 = 2112;
            __int16 v25 = v19;
            __int16 v26 = 2112;
            id v27 = v10;
            _os_log_error_impl(&dword_182959000, v14, OS_LOG_TYPE_ERROR, "Failed to save LS preferences (secure? %{BOOL}i) to %@: %@", buf, 0x1Cu);
          }
        }
        applyStorageACLToURL(*(unsigned __int8 *)this, *((NSURL **)this + 2));
      }
      else
      {
        id v15 = _LSDefaultLog();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          int v16 = *(unsigned __int8 *)this;
          id v17 = [*((id *)this + 2) path];
          *(_DWORD *)LSVersionNumber buf = 67109634;
          int v23 = v16;
          __int16 v24 = 2112;
          __int16 v25 = v17;
          __int16 v26 = 2112;
          id v27 = v10;
          _os_log_error_impl(&dword_182959000, v15, OS_LOG_TYPE_ERROR, "Failed to serialize LS preferences (secure? %{BOOL}i) to %@: %@", buf, 0x1Cu);
        }
      }
    }
  }
}

void sub_182A91FB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN14_LSPreferences4WithEPKNS_15SecurityContextEU13block_pointerFvPKvE_block_invoke()
{
}

void sub_182A9207C(_Unwind_Exception *a1)
{
  MEMORY[0x18530EAF0](v1, 0x1080C40C4863376);
  _Unwind_Resume(a1);
}

uint64_t _LSGetProfileValidationStateFromInstallDictionary(const __CFDictionary *a1)
{
  uint64_t result = (uint64_t)_LSGetBooleanFromDict(a1, @"ProfileValidated");
  if (result)
  {
    if (_LSGetBooleanFromDict(a1, @"UPPValidated"))
    {
      return 2;
    }
    else if (_LSGetBooleanFromDict(a1, @"FreeProfileValidated"))
    {
      return 3;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

__CFString *_LSProfileValidationStateGetVisualizationDescription(unsigned int a1)
{
  if (a1 > 3) {
    return 0;
  }
  else {
    return off_1E5230460[(char)a1];
  }
}

void sub_182A9214C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A921C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A92354(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A92388(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A9246C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A92580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZL16pluginQueryFaultv_block_invoke_0()
{
  os_log_t v0 = _LSPluginFaultLog();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT)) {
    __pluginQueryFault_block_invoke_cold_1_0(v0);
  }
}

void sub_182A92608(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A926F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A92820(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A929FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A92DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_182A92F00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A92F84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A931A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A93430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_182A93924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,id a38)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a33, 8);

  _Unwind_Resume(a1);
}

void sub_182A93AE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A93B6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A93C88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A93E0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A93EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A93F1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A93FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A94064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A94130(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A94264(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A942D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A94338(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A943C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A945D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a9);
  _Unwind_Resume(a1);
}

void bundleUnitsClaimingDefaultAppCategory(LSContext *a1@<X0>, uint64_t a2@<X1>, void **a3@<X8>)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (_os_feature_enabled_impl())
  {
    BOOL v6 = (LaunchServices::BindingEvaluator **)(LSGetDefaultAppCategoryInfoForCategory(a2) + 8);
    LaunchServices::BindingEvaluator::CreateWithUTI(*v6, 0, (LaunchServices::BindingEvaluator *)&v47);
    id v42 = 0;
    LaunchServices::BindingEvaluator::evaluateBindings((LaunchServices::BindingEvaluator *)&v47, a1, &v42, v43);
    id v7 = v42;
    __int16 v8 = (int *)v43[0];
    uint64_t v9 = v43[1];
    long long v45 = a3;
    while (v8 != (int *)v9)
    {
      int v44 = *v8;
      std::back_insert_iterator<std::vector<unsigned int>>::operator=[abi:nn180100]((uint64_t *)&v45, &v44);
      v8 += 12;
    }
    if (v7)
    {
      id v10 = _LSDefaultLog();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        bundleUnitsClaimingDefaultAppCategory((uint64_t *)v6, (uint64_t)v7, v10);
      }
    }
    CFTypeID v46 = (void **)v43;
    std::vector<LSBinding>::__destroy_vector::operator()[abi:nn180100](&v46);

    LaunchServices::BindingEvaluator::~BindingEvaluator((LaunchServices::BindingEvaluator *)&v47);
  }
  else
  {
    switch(a2)
    {
      case 1:
        bundleUnitIDsForBindingScheme((LaunchServices::BindingEvaluator *)@"https", a1, &__block_literal_global_66, &v47);
        goto LABEL_36;
      case 2:
        bundleUnitIDsForBindingScheme((LaunchServices::BindingEvaluator *)@"mailto", a1, &__block_literal_global_49_1, &v47);
LABEL_36:
        CFTypeID v31 = *a3;
        if (*a3)
        {
          a3[1] = v31;
          operator delete(v31);
          *a3 = 0;
          a3[1] = 0;
          a3[2] = 0;
        }
        *(_OWORD *)a3 = v47;
        a3[2] = v48;
        return;
      case 3:
        uint64_t v21 = nonPlaceholderBundleUnitIDForIdentifier(a1, &cfstr_ComAppleMobile_1.isa);
        int v12 = v21;
        if ((v21 & 0xFF00000000) == 0) {
          return;
        }
        unint64_t v22 = (unint64_t)a3[2];
        uint64_t v14 = a3[1];
        if ((unint64_t)v14 < v22) {
          goto LABEL_34;
        }
        id v15 = *a3;
        uint64_t v23 = ((char *)v14 - (unsigned char *)*a3) >> 2;
        unint64_t v24 = v23 + 1;
        if ((unint64_t)(v23 + 1) >> 62) {
          abort();
        }
        uint64_t v25 = v22 - (void)v15;
        if (v25 >> 1 > v24) {
          unint64_t v24 = v25 >> 1;
        }
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v26 = v24;
        }
        if (v26)
        {
          id v27 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)(a3 + 2), v26);
          id v15 = *a3;
          uint64_t v14 = a3[1];
        }
        else
        {
          id v27 = 0;
        }
        uint64_t v37 = &v27[4 * v23];
        CFStringRef v38 = &v27[4 * v26];
        *(_DWORD *)uint64_t v37 = v12;
        id v30 = v37 + 4;
        while (v14 != v15)
        {
          int v40 = *--v14;
          *((_DWORD *)v37 - 1) = v40;
          v37 -= 4;
        }
        goto LABEL_59;
      case 4:
        uint64_t v28 = nonPlaceholderBundleUnitIDForIdentifier(a1, &cfstr_ComAppleMobile_2.isa);
        int v12 = v28;
        if ((v28 & 0xFF00000000) == 0) {
          return;
        }
        unint64_t v29 = (unint64_t)a3[2];
        uint64_t v14 = a3[1];
        if ((unint64_t)v14 < v29) {
          goto LABEL_34;
        }
        id v15 = *a3;
        uint64_t v32 = ((char *)v14 - (unsigned char *)*a3) >> 2;
        unint64_t v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) >> 62) {
          abort();
        }
        uint64_t v34 = v29 - (void)v15;
        if (v34 >> 1 > v33) {
          unint64_t v33 = v34 >> 1;
        }
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v35 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v35 = v33;
        }
        if (v35)
        {
          char v36 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)(a3 + 2), v35);
          id v15 = *a3;
          uint64_t v14 = a3[1];
        }
        else
        {
          char v36 = 0;
        }
        uint64_t v37 = &v36[4 * v32];
        CFStringRef v38 = &v36[4 * v35];
        *(_DWORD *)uint64_t v37 = v12;
        id v30 = v37 + 4;
        while (v14 != v15)
        {
          int v41 = *--v14;
          *((_DWORD *)v37 - 1) = v41;
          v37 -= 4;
        }
        goto LABEL_59;
      case 5:
        uint64_t v11 = nonPlaceholderBundleUnitIDForIdentifier(a1, &cfstr_ComApplePassbo.isa);
        int v12 = v11;
        if ((v11 & 0xFF00000000) == 0) {
          return;
        }
        unint64_t v13 = (unint64_t)a3[2];
        uint64_t v14 = a3[1];
        if ((unint64_t)v14 < v13)
        {
LABEL_34:
          *uint64_t v14 = v12;
          id v30 = v14 + 1;
        }
        else
        {
          id v15 = *a3;
          uint64_t v16 = ((char *)v14 - (unsigned char *)*a3) >> 2;
          unint64_t v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 62) {
            abort();
          }
          uint64_t v18 = v13 - (void)v15;
          if (v18 >> 1 > v17) {
            unint64_t v17 = v18 >> 1;
          }
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v19 = v17;
          }
          if (v19)
          {
            id v20 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)(a3 + 2), v19);
            id v15 = *a3;
            uint64_t v14 = a3[1];
          }
          else
          {
            id v20 = 0;
          }
          uint64_t v37 = &v20[4 * v16];
          CFStringRef v38 = &v20[4 * v19];
          *(_DWORD *)uint64_t v37 = v12;
          id v30 = v37 + 4;
          while (v14 != v15)
          {
            int v39 = *--v14;
            *((_DWORD *)v37 - 1) = v39;
            v37 -= 4;
          }
LABEL_59:
          *a3 = v37;
          a3[1] = v30;
          a3[2] = v38;
          if (v15) {
            operator delete(v15);
          }
        }
        a3[1] = v30;
        break;
      default:
        return;
    }
  }
}

void sub_182A94A60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  unint64_t v19 = *(void **)v17;
  if (*(void *)v17)
  {
    *(void *)(v17 + 8) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

void sub_182A94D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  std::__tree<std::__value_type<unsigned int,NSString * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,NSString * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,NSString * {__strong}>>>::destroy(v18, a17);
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a9);
  if (v17) {
    operator delete(v17);
  }
  _Unwind_Resume(a1);
}

void sub_182A94EAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void bundleUnitIDsForBindingScheme(LaunchServices::BindingEvaluator *this@<X1>, LSContext *a2@<X0>, void *a3@<X2>, void *a4@<X8>)
{
  v18[21] = *(id *)MEMORY[0x1E4F143B8];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  LaunchServices::BindingEvaluator::CreateWithURLScheme(this, v18);
  LaunchServices::BindingEvaluator::setFilter((uint64_t)v18, a3);
  id v12 = 0;
  LaunchServices::BindingEvaluator::evaluateBindings((LaunchServices::BindingEvaluator *)v18, a2, &v12, (uint64_t *)&v13);
  id v8 = v12;
  id v10 = v13;
  uint64_t v9 = v14;
  if (v14 == v13)
  {
    uint64_t v11 = _LSDefaultLog();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      bundleUnitIDsForBindingScheme((uint64_t)this, (uint64_t)v8, v11);
    }
  }
  else
  {
    uint64_t v16 = a4;
    do
    {
      int v15 = *v10;
      std::back_insert_iterator<std::vector<unsigned int>>::operator=[abi:nn180100]((uint64_t *)&v16, &v15);
      v10 += 12;
    }
    while (v10 != v9);
  }
  uint64_t v17 = (void **)&v13;
  std::vector<LSBinding>::__destroy_vector::operator()[abi:nn180100](&v17);

  LaunchServices::BindingEvaluator::~BindingEvaluator((LaunchServices::BindingEvaluator *)v18);
}

void sub_182A9502C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  va_copy(va2, va1);
  va_arg(va2, void);
  va_copy((va_list)v13, va);
  std::vector<LSBinding>::__destroy_vector::operator()[abi:nn180100]((void ***)va1);

  LaunchServices::BindingEvaluator::~BindingEvaluator((LaunchServices::BindingEvaluator *)va2);
  BOOL v6 = *(void **)v3;
  if (*(void *)v3)
  {
    *(void *)(v3 + 8) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

uint64_t ___ZL37bundleUnitsClaimingDefaultAppCategoryP9LSContext20LSDefaultAppCategory_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_WORD *)(*(void *)(a3 + 8) + 189) & 1;
}

uint64_t ___ZL37bundleUnitsClaimingDefaultAppCategoryP9LSContext20LSDefaultAppCategory_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(unsigned __int16 *)(*(void *)(a3 + 8) + 189) >> 1) & 1;
}

uint64_t nonPlaceholderBundleUnitIDForIdentifier(LSContext *a1, NSString *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unsigned int v7 = 0;
  memset(v8, 0, sizeof(v8));
  int v3 = _LSBundleFindWithInfo((uint64_t)a1, 0, a2, 0, v8, 2, 128, &v7, 0);
  if (!v3) {
    return v7 | 0x100000000;
  }
  int v4 = v3;
  dispatch_queue_t v5 = _LSDefaultLog();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
    nonPlaceholderBundleUnitIDForIdentifier((uint64_t)a2, v4, v5);
  }

  return 0;
}

void std::__tree<std::__value_type<unsigned int,NSString * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,NSString * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,NSString * {__strong}>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned int,NSString * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,NSString * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,NSString * {__strong}>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned int,NSString * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,NSString * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,NSString * {__strong}>>>::destroy(a1, a2[1]);

    operator delete(a2);
  }
}

LABEL_1:
  unint64_t i = a2 - 1;
  unint64_t j = a1;
  id v224 = a2;
  while (1)
  {
    uint64_t v12 = j;
    unint64_t v13 = (char *)a2 - (char *)j;
    uint64_t v14 = a2 - j;
    v234 = j;
    if (v6 || !v5)
    {
      switch(v14)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          long long v92 = *(a2 - 1);
          long long v93 = *v12;
          long long v94 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a3, v92);
          long long v95 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a3, v93);
          long long v96 = v95;
          if (v92) {
            v97 = v93 == 0;
          }
          else {
            v97 = 1;
          }
          if (v97)
          {

            v199 = v234;
            if (!v92) {
              return;
            }
          }
          else
          {
            v199 = v234;
            id v200 = [v94 localizedStandardCompare:v95];

            if (v200 != -1) {
              return;
            }
          }
          id v201 = *v199;
          *v199 = *(a2 - 1);
          *(a2 - 1) = v201;
          return;
        case 3uLL:
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,+[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:i options:a3];
          return;
        case 4uLL:
          std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,+[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_2 &,unsigned int *>(j, j + 1, j + 2, i, a3);
          return;
        case 5uLL:
          std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,+[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_2 &,unsigned int *,0>(j, j + 1, j + 2, j + 3, i, a3);
          return;
        default:
          JUMPOUT(0);
      }
    }
    if (v13 <= 95) {
      break;
    }
    if (!a4)
    {
      if (j == a2) {
        return;
      }
      v219 = (char *)a2 - (char *)j;
      v121 = (v14 - 2) >> 1;
      v122 = v121;
      v227 = a2 - j;
      while (1)
      {
        v123 = v122;
        if (v121 < v122) {
          goto LABEL_192;
        }
        v124 = (2 * v122) | 1;
        v125 = &v234[v124];
        if (2 * v122 + 2 >= (uint64_t)v14) {
          goto LABEL_161;
        }
        v230 = 2 * v122 + 2;
        v126 = *v125;
        v127 = v125 + 1;
        uint64_t v128 = v125[1];
        id v129 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a3, *v125);
        v130 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a3, v128);
        v131 = v130;
        if (v126) {
          v132 = v128 == 0;
        }
        else {
          v132 = 1;
        }
        if (v132)
        {

          v125 = &v234[v124];
          if (v126) {
            goto LABEL_160;
          }
        }
        else
        {
          v159 = [v129 localizedStandardCompare:v130];

          v125 = &v234[v124];
          if (v159 == -1)
          {
LABEL_160:
            v125 = v127;
            v124 = v230;
          }
        }
LABEL_161:
        v133 = v125;
        id v134 = *v125;
        id v221 = v123;
        id v135 = v234[v123];
        v136 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a3, *v125);
        v137 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a3, v135);
        v138 = v137;
        if (v134) {
          v139 = v135 == 0;
        }
        else {
          v139 = 1;
        }
        a2 = v224;
        if (v139)
        {

          uint64_t v14 = v227;
          if (v134) {
            goto LABEL_192;
          }
        }
        else
        {
          v140 = [v136 localizedStandardCompare:v137];

          uint64_t v14 = v227;
          if (v140 == -1) {
            goto LABEL_192;
          }
        }
        id v222 = v234[v123];
        v141 = v133;
        v234[v123] = *v133;
        if (v121 < v124)
        {
          uint64_t v142 = v133;
          uint64_t v143 = v222;
          goto LABEL_191;
        }
        while (1)
        {
          v231 = v141;
          v144 = 2 * v124;
          v124 = (2 * v124) | 1;
          uint64_t v142 = &v234[v124];
          uint64_t v145 = v144 + 2;
          if (v144 + 2 < (uint64_t)v14)
          {
            uint64_t v146 = v121;
            v147 = *v142;
            v148 = v142[1];
            v149 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a3, *v142);
            v150 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a3, v148);
            v151 = v150;
            if (v147) {
              BOOL v152 = v148 == 0;
            }
            else {
              BOOL v152 = 1;
            }
            if (v152)
            {

              v121 = v146;
              if (v147) {
                goto LABEL_178;
              }
            }
            else
            {
              int v158 = [v149 localizedStandardCompare:v150];
              v121 = v146;

              if (v158 == -1)
              {
LABEL_178:
                ++v142;
                v124 = v145;
              }
            }
          }
          uint64_t v153 = *v142;
          uint64_t v154 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a3, *v142);
          uint64_t v143 = v222;
          v155 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a3, v222);
          uint64_t v156 = v155;
          a2 = v224;
          if (v222 && v153)
          {
            v157 = [v154 localizedStandardCompare:v155];

            if (v157 == -1) {
              break;
            }
            goto LABEL_184;
          }

          if (v153) {
            break;
          }
LABEL_184:
          uint64_t v14 = v227;
          *v231 = *v142;
          v141 = v142;
          if (v121 < v124) {
            goto LABEL_191;
          }
        }
        uint64_t v14 = v227;
        uint64_t v142 = v231;
LABEL_191:
        *uint64_t v142 = v143;
        v123 = v221;
LABEL_192:
        v122 = v123 - 1;
        if (!v123)
        {
          v160 = v219 >> 2;
          v161 = (char *)v234;
          while (1)
          {
            v162 = 0;
            v223 = *(_DWORD *)v161;
            v163 = (unint64_t)(v160 - 2) >> 1;
            v164 = (unsigned int *)v161;
            id v225 = a2;
            v228 = v163;
            do
            {
              v165 = v164;
              v164 += v162 + 1;
              v166 = 2 * v162;
              v162 = (2 * v162) | 1;
              v167 = v166 + 2;
              if (v167 >= v160) {
                goto LABEL_203;
              }
              v232 = v167;
              v168 = v160;
              v169 = *v164;
              v170 = v164;
              v172 = v164 + 1;
              v171 = v164[1];
              char v173 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a3, *v164);
              id v174 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a3, v171);
              id v175 = v174;
              if (v169) {
                BOOL v176 = v171 == 0;
              }
              else {
                BOOL v176 = 1;
              }
              if (v176)
              {

                v161 = (char *)v234;
                v160 = v168;
                v164 = v170;
                v163 = v228;
                if (!v169) {
                  goto LABEL_203;
                }
LABEL_202:
                v164 = v172;
                v162 = v232;
                goto LABEL_203;
              }
              id v177 = [v173 localizedStandardCompare:v174];

              v161 = (char *)v234;
              v160 = v168;
              v164 = v170;
              v163 = v228;
              if (v177 == -1) {
                goto LABEL_202;
              }
LABEL_203:
              void *v165 = *v164;
            }
            while (v162 <= v163);
            a2 = v225 - 1;
            if (v164 == v225 - 1)
            {
              void *v164 = v223;
              goto LABEL_229;
            }
            void *v164 = *a2;
            *a2 = v223;
            unsigned int v178 = (char *)v164 - v161 + 4;
            if (v178 >= 5)
            {
              v233 = v160;
              v179 = ((unint64_t)v178 >> 2) - 2;
              v180 = v179 >> 1;
              uint64_t v181 = &v161[4 * (v179 >> 1)];
              v182 = *(_DWORD *)v181;
              v183 = v164;
              id v184 = *v164;
              char v185 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a3, *(unsigned int *)v181);
              v186 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a3, v184);
              unsigned int v187 = v186;
              if (v182) {
                id v188 = v184 == 0;
              }
              else {
                id v188 = 1;
              }
              if (v188)
              {

                v160 = v233;
                v161 = (char *)v234;
                if (!v182) {
                  goto LABEL_229;
                }
              }
              else
              {
                id v189 = [v185 localizedStandardCompare:v186];

                v160 = v233;
                v161 = (char *)v234;
                if (v189 != -1) {
                  goto LABEL_229;
                }
              }
              uint64_t v226 = v225 - 1;
              id v190 = *v183;
              *v183 = *(_DWORD *)v181;
              if (v179 < 2)
              {
                id v191 = v181;
                goto LABEL_228;
              }
              while (1)
              {
                id v192 = v180 - 1;
                v180 = (v180 - 1) >> 1;
                id v191 = &v161[4 * v180];
                v193 = *(_DWORD *)v191;
                v194 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a3, *(unsigned int *)v191);
                id v195 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a3, v190);
                id v196 = v195;
                if (v190 && v193)
                {
                  id v197 = [v194 localizedStandardCompare:v195];

                  if (v197 != -1) {
                    goto LABEL_227;
                  }
                }
                else
                {

                  if (!v193)
                  {
LABEL_227:
                    id v191 = v181;
                    v161 = (char *)v234;
LABEL_228:
                    *(_DWORD *)id v191 = v190;
                    a2 = v226;
                    v160 = v233;
                    break;
                  }
                }
                *(_DWORD *)uint64_t v181 = *(_DWORD *)v191;
                uint64_t v181 = v191;
                v161 = (char *)v234;
                if (v192 <= 1) {
                  goto LABEL_228;
                }
              }
            }
LABEL_229:
            if (v160-- <= 2) {
              return;
            }
          }
        }
      }
    }
    int v15 = v14 >> 1;
    uint64_t v16 = &j[v14 >> 1];
    if ((unint64_t)v13 >= 0x201)
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,+[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:i options:a3];
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,+[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:a2 - 2 options:a3];
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,+[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:a2 - 3 options:a3];
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,+[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:&v12[v15 + 1] options:a3];
      uint64_t v17 = *v12;
      *uint64_t v12 = *v16;
      *uint64_t v16 = v17;
    }
    else
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,+[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:i options:a3];
    }
    --a4;
    if (a5) {
      goto LABEL_25;
    }
    uint64_t v18 = *(v12 - 1);
    unint64_t v19 = *v12;
    id v20 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a3, v18);
    uint64_t v21 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a3, v19);
    unint64_t v22 = v21;
    if (!v18 || !v19)
    {

      if (!v18) {
        goto LABEL_13;
      }
      goto LABEL_25;
    }
    uint64_t v23 = [v20 localizedStandardCompare:v21];

    if (v23 == -1)
    {
LABEL_25:
      unint64_t v35 = 0;
      char v36 = *v12;
      while (1)
      {
        uint64_t v37 = v12[v35 + 1];
        CFStringRef v38 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a3, v37);
        int v39 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a3, v36);
        int v40 = v39;
        if (!v36 || !v37) {
          break;
        }
        int v41 = [v38 localizedStandardCompare:v39];

        if (v41 != -1) {
          goto LABEL_32;
        }
LABEL_31:
        ++v35;
      }

      if (v37) {
        goto LABEL_31;
      }
LABEL_32:
      id v42 = &v12[v35];
      uint64_t v43 = (unint64_t)&v12[v35 + 1];
      if (v35 * 4)
      {
        while (1)
        {
          int v44 = *i;
          long long v45 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a3, *i);
          CFTypeID v46 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a3, v36);
          long long v47 = v46;
          if (v36 && v44)
          {
            CFStringRef v48 = [v45 localizedStandardCompare:v46];

            if (v48 == -1) {
              goto LABEL_49;
            }
          }
          else
          {

            if (v44) {
              goto LABEL_49;
            }
          }
          --i;
        }
      }
      unint64_t i = a2;
      if (v43 < (unint64_t)a2)
      {
        for (unint64_t i = a2 - 1; ; --i)
        {
          uint64_t v49 = *i;
          long long v50 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a3, *i);
          long long v51 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a3, v36);
          unint64_t v52 = v51;
          if (v36 && v49)
          {
            CFDictionaryRef v53 = [v50 localizedStandardCompare:v51];

            if (v43 >= (unint64_t)i || v53 == -1) {
              break;
            }
          }
          else
          {

            if (v43 >= (unint64_t)i || v49) {
              break;
            }
          }
        }
      }
LABEL_49:
      if (v43 >= (unint64_t)i) {
        goto LABEL_64;
      }
      CFDictionaryRef v54 = (unsigned int *)v43;
      CFTypeID v55 = i;
      while (2)
      {
        uint64_t v56 = *v54;
        *v54++ = *v55;
        *CFTypeID v55 = v56;
        while (2)
        {
          uint64_t v57 = *v54;
          uint64_t v58 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a3, *v54);
          BOOL v59 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a3, v36);
          CFTypeID v60 = v59;
          if (v36 && v57)
          {
            long long v61 = [v58 localizedStandardCompare:v59];

            if (v61 != -1) {
              goto LABEL_59;
            }
            goto LABEL_57;
          }

          if (v57)
          {
LABEL_57:
            ++v54;
            continue;
          }
          break;
        }
        do
        {
LABEL_59:
          while (1)
          {
            unint64_t v63 = *--v55;
            v62 = v63;
            id v64 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a3, v63);
            CFTypeID v65 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a3, v36);
            CFStringRef v66 = v65;
            if (v36)
            {
              if (v62) {
                break;
              }
            }

            if (v62) {
              goto LABEL_62;
            }
          }
          CFStringRef v67 = [v64 localizedStandardCompare:v65];
        }
        while (v67 != -1);
LABEL_62:
        if (v54 < v55) {
          continue;
        }
        break;
      }
      id v42 = v54 - 1;
LABEL_64:
      a1 = v234;
      if (v42 != v234) {
        *v234 = *v42;
      }
      *id v42 = v36;
      dispatch_queue_t v5 = v43 >= (unint64_t)i;
      unint64_t i = a2 - 1;
      if (v5)
      {
        int v68 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,+[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_2 &,unsigned int *>(v234, v42, a3);
        unint64_t j = v42 + 1;
        if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,+[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_2 &,unsigned int *>(v42 + 1, a2, a3))
        {
          a2 = v42;
          if (v68) {
            return;
          }
          goto LABEL_1;
        }
        if (!v68) {
          goto LABEL_70;
        }
      }
      else
      {
LABEL_70:
        std::__introsort<std::_ClassicAlgPolicy,+[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_2 &,unsigned int *,false>(v234, v42, a3, a4, a5 & 1);
        a5 = 0;
        unint64_t j = v42 + 1;
      }
    }
    else
    {
LABEL_13:
      unint64_t v24 = *v12;
      uint64_t v25 = *i;
      unint64_t v26 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a3, v24);
      id v27 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a3, v25);
      uint64_t v28 = v27;
      if (v24 && v25)
      {
        unint64_t v29 = [v26 localizedStandardCompare:v27];

        if (v29 == -1) {
          goto LABEL_72;
        }
      }
      else
      {

        if (v24)
        {
LABEL_72:
          for (unint64_t j = v12 + 1; ; ++j)
          {
            id v69 = *j;
            unsigned int v70 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a3, v24);
            long long v71 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a3, v69);
            v72 = v71;
            if (!v69) {
              break;
            }
            CFTypeID v73 = [v70 localizedStandardCompare:v71];

            if (v73 == -1) {
              goto LABEL_78;
            }
          }

          goto LABEL_78;
        }
      }
      for (unint64_t j = v12 + 1; j < a2; ++j)
      {
        id v30 = *j;
        CFTypeID v31 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a3, v24);
        uint64_t v32 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a3, v30);
        unint64_t v33 = v32;
        if (v24 && v30)
        {
          uint64_t v34 = [v31 localizedStandardCompare:v32];

          if (v34 == -1) {
            break;
          }
        }
        else
        {

          if (v24) {
            break;
          }
        }
      }
LABEL_78:
      k = a2;
      if (j >= a2) {
        goto LABEL_96;
      }
      for (k = i; ; --k)
      {
        CFStringRef v75 = *k;
        CFStringRef v76 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a3, v24);
        id v77 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a3, v75);
        CFTypeID v78 = v77;
        if (v24)
        {
          if (v75) {
            break;
          }
        }

        if (!v24) {
          goto LABEL_96;
        }
LABEL_85:
        ;
      }
      CFStringRef v79 = [v76 localizedStandardCompare:v77];

      if (v79 == -1) {
        goto LABEL_85;
      }
LABEL_96:
      while (j < k)
      {
        CFStringRef v80 = *j;
        *j++ = *k;
        *k = v80;
        while (1)
        {
          CFStringRef v81 = *j;
          v82 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a3, v24);
          v83 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a3, v81);
          CFIndex v84 = v83;
          if (!v24 || !v81) {
            break;
          }
          CFIndex v85 = [v82 localizedStandardCompare:v83];

          if (v85 == -1) {
            goto LABEL_94;
          }
LABEL_92:
          ++j;
        }

        if (!v24) {
          goto LABEL_92;
        }
        do
        {
LABEL_94:
          while (1)
          {
            int v86 = *--k;
            v87 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a3, v24);
            long long v88 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a3, v86);
            long long v89 = v88;
            if (v86) {
              break;
            }
          }
          long long v90 = [v87 localizedStandardCompare:v88];
        }
        while (v90 == -1);
      }
      long long v91 = j - 1;
      dispatch_queue_t v5 = j - 1 >= v12;
      BOOL v6 = j - 1 == v12;
      if (j - 1 != v12) {
        *uint64_t v12 = *v91;
      }
      a5 = 0;
      *long long v91 = v24;
    }
  }
  long long v98 = j + 1;
  long long v100 = j == a2 || v98 == a2;
  if ((a5 & 1) == 0)
  {
    if (v100) {
      return;
    }
    while (1)
    {
      id v202 = v12;
      id v203 = v98;
      v205 = *v12;
      id v204 = v12[1];
      int v206 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a3, v204);
      id v207 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a3, v205);
      v208 = v207;
      if (v204) {
        v209 = v205 == 0;
      }
      else {
        v209 = 1;
      }
      if (v209)
      {

        if (!v204) {
          goto LABEL_250;
        }
      }
      else
      {
        id v210 = [v206 localizedStandardCompare:v207];

        if (v210 != -1) {
          goto LABEL_250;
        }
      }
      char v211 = *v203;
      do
      {
        while (1)
        {
          id v212 = v202;
          v202[1] = *v202;
          v214 = *--v202;
          id v213 = v214;
          uint64_t v215 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a3, v211);
          v216 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a3, v214);
          v217 = v216;
          if (!v211 || !v213) {
            break;
          }
          id v218 = [v215 localizedStandardCompare:v216];

          if (v218 != -1) {
            goto LABEL_249;
          }
        }
      }
      while (v211);
LABEL_249:
      *id v212 = v211;
      a2 = v224;
LABEL_250:
      uint64_t v12 = v203;
      long long v98 = v203 + 1;
      if (v203 + 1 == a2) {
        return;
      }
    }
  }
  if (v100) {
    return;
  }
  long long v101 = 0;
  uint64_t v102 = j;
  while (2)
  {
    uint64_t v103 = v102;
    uint64_t v102 = v98;
    int v105 = *v103;
    v104 = v103[1];
    id v106 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a3, v104);
    int v107 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a3, v105);
    v108 = v107;
    if (v104) {
      v109 = v105 == 0;
    }
    else {
      v109 = 1;
    }
    if (v109)
    {

      uint64_t v110 = v234;
      if (!v104) {
        goto LABEL_148;
      }
    }
    else
    {
      v111 = [v106 localizedStandardCompare:v107];

      uint64_t v110 = v234;
      if (v111 != -1) {
        goto LABEL_148;
      }
    }
    uint64_t v112 = v103[1];
    v103[1] = *v103;
    id v113 = v110;
    if (v103 == v110) {
      goto LABEL_147;
    }
    id v114 = v101;
    while (2)
    {
      id v115 = (unsigned int *)((char *)v110 + v114);
      v116 = *(unsigned int *)((char *)v110 + v114 - 4);
      v117 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a3, v112);
      id v118 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a3, v116);
      v119 = v118;
      if (v112 && v116)
      {
        v120 = [v117 localizedStandardCompare:v118];

        if (v120 != -1)
        {
          id v113 = (unsigned int *)((char *)v234 + v114);
          goto LABEL_146;
        }
LABEL_143:
        --v103;
        *id v115 = *(v115 - 1);
        v114 -= 4;
        uint64_t v110 = v234;
        if (!v114)
        {
          id v113 = v234;
          goto LABEL_146;
        }
        continue;
      }
      break;
    }

    if (v112) {
      goto LABEL_143;
    }
    id v113 = v103;
LABEL_146:
    a2 = v224;
LABEL_147:
    *id v113 = v112;
LABEL_148:
    long long v98 = v102 + 1;
    v101 += 4;
    if (v102 + 1 != a2) {
      continue;
    }
    break;
  }
}

void sub_182A96288(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,+[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_2 &,unsigned int *,0>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, void **a6)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,+[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_2 &,unsigned int *>(a1, a2, a3, a4, a6);
  unsigned int v12 = *a5;
  uint64_t v13 = *a4;
  uint64_t v14 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a6, *a5);
  int v15 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a6, v13);
  uint64_t v16 = v15;
  if (v12) {
    BOOL v17 = v13 == 0;
  }
  else {
    BOOL v17 = 1;
  }
  if (v17)
  {

    if (!v12) {
      return;
    }
  }
  else
  {
    uint64_t v18 = [v14 localizedStandardCompare:v15];

    if (v18 != -1) {
      return;
    }
  }
  unsigned int v19 = *a4;
  *a4 = *a5;
  *a5 = v19;
  unsigned int v20 = *a4;
  uint64_t v21 = *a3;
  unint64_t v22 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a6, *a4);
  uint64_t v23 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a6, v21);
  unint64_t v24 = v23;
  if (v20 && v21)
  {
    uint64_t v25 = [v22 localizedStandardCompare:v23];

    if (v25 != -1) {
      return;
    }
  }
  else
  {

    if (!v20) {
      return;
    }
  }
  unsigned int v26 = *a3;
  *a3 = *a4;
  *a4 = v26;
  unsigned int v27 = *a3;
  uint64_t v28 = *a2;
  unint64_t v29 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a6, *a3);
  id v30 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a6, v28);
  CFTypeID v31 = v30;
  if (v27 && v28)
  {
    uint64_t v32 = [v29 localizedStandardCompare:v30];

    if (v32 != -1) {
      return;
    }
  }
  else
  {

    if (!v27) {
      return;
    }
  }
  unsigned int v33 = *a2;
  *a2 = *a3;
  *a3 = v33;
  unsigned int v34 = *a2;
  uint64_t v35 = *a1;
  char v36 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a6, *a2);
  uint64_t v37 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a6, v35);
  CFStringRef v38 = v37;
  if (v34 && v35)
  {
    uint64_t v39 = [v36 localizedStandardCompare:v37];

    if (v39 != -1) {
      return;
    }
  }
  else
  {

    if (!v34) {
      return;
    }
  }
  unsigned int v40 = *a1;
  *a1 = *a2;
  *a2 = v40;
}

void sub_182A965E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,+[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_2 &,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, void **a4)
{
  BOOL v6 = a2;
  unsigned int v7 = (int *)a1;
  unsigned int v8 = *a2;
  uint64_t v9 = *a1;
  uint64_t v10 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a4, *a2);
  uint64_t v11 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a4, v9);
  unsigned int v12 = v11;
  if (v8) {
    BOOL v13 = v9 == 0;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {

    if (!v8) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v26 = [v10 localizedStandardCompare:v11];

    if (v26 != -1)
    {
LABEL_15:
      unsigned int v27 = *a3;
      uint64_t v28 = *v6;
      unint64_t v29 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a4, *a3);
      id v30 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a4, v28);
      CFTypeID v31 = v30;
      if (v27 && v28)
      {
        uint64_t v32 = [v29 localizedStandardCompare:v30];

        if (v32 != -1) {
          return;
        }
      }
      else
      {

        if (!v27) {
          return;
        }
      }
      unsigned int v33 = *v6;
      *BOOL v6 = *a3;
      *a3 = v33;
      unsigned int v34 = *v6;
      uint64_t v35 = *v7;
      char v36 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a4, *v6);
      uint64_t v37 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a4, v35);
      CFStringRef v38 = v37;
      if (v34 && v35)
      {
        uint64_t v39 = [v36 localizedStandardCompare:v37];

        if (v39 != -1) {
          return;
        }
      }
      else
      {

        if (!v34) {
          return;
        }
      }
      goto LABEL_29;
    }
  }
  unsigned int v14 = *a3;
  uint64_t v15 = *v6;
  uint64_t v16 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a4, *a3);
  BOOL v17 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a4, v15);
  uint64_t v18 = v17;
  if (!v14 || !v15)
  {

    if (!v14) {
      goto LABEL_10;
    }
LABEL_20:
    BOOL v6 = a3;
    goto LABEL_29;
  }
  uint64_t v19 = [v16 localizedStandardCompare:v17];

  if (v19 == -1) {
    goto LABEL_20;
  }
LABEL_10:
  uint64_t v20 = *v7;
  *unsigned int v7 = *v6;
  *BOOL v6 = v20;
  unsigned int v21 = *a3;
  unint64_t v22 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a4, *a3);
  uint64_t v23 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a4, v20);
  unint64_t v24 = v23;
  if (v20 && v21)
  {
    uint64_t v25 = [v22 localizedStandardCompare:v23];

    unsigned int v7 = (int *)v6;
    BOOL v6 = a3;
    if (v25 != -1) {
      return;
    }
    goto LABEL_29;
  }

  unsigned int v7 = (int *)v6;
  BOOL v6 = a3;
  if (v21)
  {
LABEL_29:
    unsigned int v40 = *v7;
    *unsigned int v7 = *v6;
    *BOOL v6 = v40;
  }
}

void sub_182A968C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,+[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_2 &,unsigned int *>(unsigned int *a1, unsigned int *a2, void **a3)
{
  int v4 = a2;
  uint64_t v5 = a2 - a1;
  BOOL result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned int v7 = *(a2 - 1);
      uint64_t v8 = *a1;
      uint64_t v9 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a3, v7);
      uint64_t v10 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a3, v8);
      uint64_t v11 = v10;
      if (v7) {
        BOOL v12 = v8 == 0;
      }
      else {
        BOOL v12 = 1;
      }
      if (v12)
      {

        if (!v7) {
          return 1;
        }
        goto LABEL_37;
      }
      uint64_t v32 = [v9 localizedStandardCompare:v10];

      if (v32 == -1)
      {
LABEL_37:
        unsigned int v33 = *a1;
        *a1 = *(v4 - 1);
        *(v4 - 1) = v33;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,+[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:a2 - 1 options:a3];
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,+[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_2 &,unsigned int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,+[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_2 &,unsigned int *,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      BOOL v13 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,+[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:a1 + 2 options:a3];
      unsigned int v14 = a1 + 3;
      if (a1 + 3 == v4) {
        return 1;
      }
      uint64_t v15 = 0;
      int v16 = 0;
      unsigned int v34 = v4;
      while (2)
      {
        unsigned int v17 = *v14;
        uint64_t v18 = *v13;
        uint64_t v19 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a3, *v14);
        uint64_t v20 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a3, v18);
        unsigned int v21 = v20;
        if (v17) {
          BOOL v22 = v18 == 0;
        }
        else {
          BOOL v22 = 1;
        }
        if (v22)
        {

          if (!v17) {
            goto LABEL_32;
          }
        }
        else
        {
          uint64_t v23 = [v19 localizedStandardCompare:v20];

          if (v23 != -1) {
            goto LABEL_32;
          }
        }
        uint64_t v24 = *v14;
        *unsigned int v14 = *v13;
        uint64_t v25 = a1;
        if (v13 == a1) {
          goto LABEL_31;
        }
        uint64_t v26 = v15;
        while (2)
        {
          uint64_t v27 = *(unsigned int *)((char *)a1 + v26 + 4);
          uint64_t v28 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a3, v24);
          unint64_t v29 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a3, v27);
          id v30 = v29;
          if (v24 && v27)
          {
            uint64_t v31 = [v28 localizedStandardCompare:v29];

            if (v31 != -1)
            {
              uint64_t v25 = v13;
              goto LABEL_30;
            }
LABEL_27:
            --v13;
            *(unsigned int *)((char *)a1 + v26 + 8) = *(unsigned int *)((char *)a1 + v26 + 4);
            v26 -= 4;
            if (v26 == -8)
            {
              uint64_t v25 = a1;
              goto LABEL_30;
            }
            continue;
          }
          break;
        }

        if (v24) {
          goto LABEL_27;
        }
        uint64_t v25 = (unsigned int *)((char *)a1 + v26 + 8);
LABEL_30:
        int v4 = v34;
LABEL_31:
        unsigned int *v25 = v24;
        if (++v16 != 8)
        {
LABEL_32:
          BOOL v13 = v14;
          v15 += 4;
          if (++v14 == v4) {
            return 1;
          }
          continue;
        }
        return v14 + 1 == v4;
      }
  }
}

void sub_182A96C14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A96DA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<unsigned int,NSString * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,NSString * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,NSString * {__strong}>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,NSString * {__strong}>>(uint64_t **a1, unsigned int *a2, uint64_t a3)
{
  BOOL v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    unsigned int v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        unsigned int v9 = *((_DWORD *)v5 + 8);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        BOOL v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        BOOL v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = operator new(0x30uLL);
    v10[8] = *(_DWORD *)a3;
    uint64_t v11 = *(void *)(a3 + 8);
    *(void *)(a3 + 8) = 0;
    *((void *)v10 + 5) = v11;
    std::__tree<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::__map_value_compare<os_eligibility_domain_t,std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::less<os_eligibility_domain_t>,true>,std::allocator<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>>>::__insert_node_at(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,+[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_2 &,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, void **a5)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,+[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:a3 options:a5];
  unsigned int v10 = *a4;
  uint64_t v11 = *a3;
  BOOL v12 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a5, *a4);
  BOOL v13 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a5, v11);
  unsigned int v14 = v13;
  if (v10) {
    BOOL v15 = v11 == 0;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15)
  {

    if (!v10) {
      return;
    }
  }
  else
  {
    uint64_t v16 = [v12 localizedStandardCompare:v13];

    if (v16 != -1) {
      return;
    }
  }
  unsigned int v17 = *a3;
  *a3 = *a4;
  *a4 = v17;
  unsigned int v18 = *a3;
  uint64_t v19 = *a2;
  uint64_t v20 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a5, *a3);
  unsigned int v21 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a5, v19);
  BOOL v22 = v21;
  if (v18 && v19)
  {
    uint64_t v23 = [v20 localizedStandardCompare:v21];

    if (v23 != -1) {
      return;
    }
  }
  else
  {

    if (!v18) {
      return;
    }
  }
  unsigned int v24 = *a2;
  *a2 = *a3;
  *a3 = v24;
  unsigned int v25 = *a2;
  uint64_t v26 = *a1;
  uint64_t v27 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a5, *a2);
  uint64_t v28 = +[LSApplicationRecord(Enumeration) displayOrderEnumeratorForViableDefaultAppsForCategory:options:]::$_0::getAndCacheName(*a5, v26);
  unint64_t v29 = v28;
  if (v25 && v26)
  {
    uint64_t v30 = [v27 localizedStandardCompare:v28];

    if (v30 != -1) {
      return;
    }
  }
  else
  {

    if (!v25) {
      return;
    }
  }
  unsigned int v31 = *a1;
  *a1 = *a2;
  *a2 = v31;
}

void sub_182A97064(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A970CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id LaunchServices::Record::findSubclassForTable(LaunchServices::Record *this, LSContext *a2)
{
  if (*(_DWORD *)(*(void *)this + 20) == a2
    || *(_DWORD *)(*(void *)this + 1604) == a2
    || *(_DWORD *)(*(void *)this + 32) == a2
    || *(_DWORD *)(*(void *)this + 24) == a2
    || *(_DWORD *)(*(void *)this + 1608) == a2
    || *(_DWORD *)(*(void *)this + 1620) == a2)
  {
    uint64_t v2 = objc_opt_class();
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

void sub_182A972F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A9744C()
{
}

void sub_182A9748C(_Unwind_Exception *a1)
{
  objc_end_catch();

  _Unwind_Resume(a1);
}

void sub_182A975D8(void *a1)
{
}

void sub_182A975F0(_Unwind_Exception *a1)
{
}

void sub_182A977B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a2)
  {
    MEMORY[0x18530EAF0](v10, 0x10A0C408EF24B1CLL);

    objc_begin_catch(exception_object);
    os_unfair_recursive_lock_unlock();
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_182A978EC(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_recursive_lock_unlock();
  objc_exception_rethrow();
}

void sub_182A97918(_Unwind_Exception *a1)
{
}

void sub_182A979E0(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_recursive_lock_unlock();
  objc_exception_rethrow();
}

void sub_182A97A0C(_Unwind_Exception *a1)
{
}

void sub_182A97BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

void sub_182A97C9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A97D58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __copy_helper_block_ea8_32c58_ZTSNSt3__16vectorIU6__weakP8LSRecordNS_9allocatorIS3_EEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v2 = (void *)(a1 + 32);
  v2[2] = 0;
  std::vector<LSRecord * {__weak}>::__init_with_size[abi:nn180100]<LSRecord * {__weak}*,LSRecord * {__weak}*>(v2, *(id **)(a2 + 32), *(id **)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3);
}

void __destroy_helper_block_ea8_32c58_ZTSNSt3__16vectorIU6__weakP8LSRecordNS_9allocatorIS3_EEEE(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 32);
  std::vector<LSRecord * {__weak}>::__destroy_vector::operator()[abi:nn180100](&v1);
}

void sub_182A97ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  _Unwind_Resume(a1);
}

void std::vector<LSRecord *>::resize(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<LSRecord *>::__append((void **)a1, a2 - v3, a3);
  }
}

void sub_182A97F60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A980E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A98454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, id a17)
{
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a13);
  _Unwind_Resume(a1);
}

void sub_182A985E0()
{
}

void sub_182A98618()
{
}

void sub_182A987F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A98A0C(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }

  _Unwind_Resume(a1);
}

void sub_182A98B3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __LSRECORD_IS_CRASHING_DUE_TO_A_CALLER_BUG__(uint64_t a1, const char *a2)
{
  if (!a2)
  {
    os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v2 = a2;
  os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
  sel_getName(v2);
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
}

void __LAUNCH_SERVICES_CLIENT_MAY_BE_EXFILTRATING_PRIVACY_SENSITIVE_INFORMATION__()
{
  os_log_t v0 = _LSRecordLog();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_impl(&dword_182959000, v0, OS_LOG_TYPE_FAULT, "Process is attempting to encode sensitive data from Launch Services in order to send it to a non-privileged client. This is a privacy bug in this process; please file a bug report.",
      v1,
      2u);
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::__unordered_map_hasher<objc_selector *,std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::hash<objc_selector *>,std::equal_to<objc_selector *>,true>,std::__unordered_map_equal<objc_selector *,std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::equal_to<objc_selector *>,std::hash<objc_selector *>,true>,std::allocator<std::__hash_value_type<objc_selector *,objc_object * {__strong}>>>::__erase_unique<objc_selector *>(void *a1, void *a2)
{
  BOOL result = std::__hash_table<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::__unordered_map_hasher<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::hash<_opaque_pthread_t *>,std::equal_to<_opaque_pthread_t *>,true>,std::__unordered_map_equal<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::equal_to<_opaque_pthread_t *>,std::hash<_opaque_pthread_t *>,true>,std::allocator<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>>>::find<_opaque_pthread_t *>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::__unordered_map_hasher<objc_selector *,std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::hash<objc_selector *>,std::equal_to<objc_selector *>,true>,std::__unordered_map_equal<objc_selector *,std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::equal_to<objc_selector *>,std::hash<objc_selector *>,true>,std::allocator<std::__hash_value_type<objc_selector *,objc_object * {__strong}>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::__unordered_map_hasher<objc_selector *,std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::hash<objc_selector *>,std::equal_to<objc_selector *>,true>,std::__unordered_map_equal<objc_selector *,std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::equal_to<objc_selector *>,std::hash<objc_selector *>,true>,std::allocator<std::__hash_value_type<objc_selector *,objc_object * {__strong}>>>::erase(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::__unordered_map_hasher<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::hash<_opaque_pthread_t *>,std::equal_to<_opaque_pthread_t *>,true>,std::__unordered_map_equal<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::equal_to<_opaque_pthread_t *>,std::hash<_opaque_pthread_t *>,true>,std::allocator<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>>>::remove(a1, a2, (uint64_t)&__p);
  unint64_t v3 = (id *)__p;
  __p = 0;
  if (v3)
  {
    if (v6) {

    }
    operator delete(v3);
  }
  return v2;
}

uint64_t ___ZN14LaunchServices6RecordL24checkForExfiltrationRiskEP7NSCoder_block_invoke()
{
  uint64_t result = [(id)__LSDefaultsGetSharedInstance() isServer];
  if ((result & 1) != 0
    || (uint64_t result = [(id)__LSDefaultsGetSharedInstance() isInXCTestRigInsecure], (result & 1) != 0)
    || (uint64_t v1 = _LSGetAuditTokenForSelf(),
        uint64_t result = _LSCheckEntitlementForAuditToken(v1, @"com.apple.private.launchservices.canEncodeSensitiveData"),
        result)
    || (v2 = (_OWORD *)_LSGetAuditTokenForSelf(), uint64_t result = (uint64_t)_LSIsAuditTokenPlatformBinary(v2), !result))
  {
    LaunchServices::Record::checkForExfiltrationRisk(NSCoder *)::isSafeToSendData = 1;
  }
  return result;
}

id *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<LSRecord * {__weak}*,LSRecord * {__weak}*,LSRecord * {__weak}*>(int a1, id *location, id *a3, id *a4)
{
  uint64_t v5 = location;
  if (location != a3)
  {
    do
    {
      id WeakRetained = objc_loadWeakRetained(v5);
      objc_storeWeak(a4, WeakRetained);

      ++v5;
      ++a4;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

id *std::vector<LSRecord * {__weak}>::__move_range(uint64_t a1, id *a2, unint64_t a3, uint64_t a4)
{
  char v6 = *(id **)(a1 + 8);
  unsigned int v7 = (id *)((char *)v6 + (void)a2 - a4);
  uint64_t v8 = v6;
  if ((unint64_t)v7 < a3)
  {
    uint64_t v10 = (id *)((char *)v6 + (void)a2 - a4);
    uint64_t v8 = *(id **)(a1 + 8);
    do
      objc_moveWeak(v8++, v10++);
    while ((unint64_t)v10 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<LSRecord * {__weak}*,LSRecord * {__weak}*,LSRecord * {__weak}*>((uint64_t)&v12, a2, v7, v6);
}

id *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<LSRecord * {__weak}*,LSRecord * {__weak}*,LSRecord * {__weak}*>(uint64_t a1, id *a2, id *a3, id *a4)
{
  if (a3 != a2)
  {
    unsigned int v7 = a3;
    do
    {
      id WeakRetained = objc_loadWeakRetained(--v7);
      objc_storeWeak(--a4, WeakRetained);
    }
    while (v7 != a2);
  }
  return a3;
}

void **std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,LSRecord * const*,LSRecord * const*,LSRecord * {__weak}*,0>(void **a1, void **a2, id *location)
{
  int v4 = a1;
  if (a1 != a2)
  {
    do
    {
      char v6 = *v4++;
      objc_storeWeak(location++, v6);
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t std::unordered_map<objc_selector *,objc_object * {__strong}>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (unint64_t i = *(void **)(a2 + 16); i; unint64_t i = (void *)*i)
    std::__hash_table<std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::__unordered_map_hasher<objc_selector *,std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::hash<objc_selector *>,std::equal_to<objc_selector *>,true>,std::__unordered_map_equal<objc_selector *,std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::equal_to<objc_selector *>,std::hash<objc_selector *>,true>,std::allocator<std::__hash_value_type<objc_selector *,objc_object * {__strong}>>>::__emplace_unique_key_args<objc_selector *,std::pair<objc_selector * const,objc_object * {__strong}> const&>(a1, i + 2, i + 2);
  return a1;
}

void sub_182A9908C(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::__unordered_map_hasher<objc_selector *,std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::hash<objc_selector *>,std::equal_to<objc_selector *>,true>,std::__unordered_map_equal<objc_selector *,std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::equal_to<objc_selector *>,std::hash<objc_selector *>,true>,std::allocator<std::__hash_value_type<objc_selector *,objc_object * {__strong}>>>::__emplace_unique_key_args<objc_selector *,std::pair<objc_selector * const,objc_object * {__strong}> const&>(uint64_t a1, void *a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (unint64_t i = *v11; i; unint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  unsigned int v14 = (void *)(a1 + 16);
  unint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v8;
  BOOL v15 = (void *)a3[1];
  i[2] = *a3;
  i[3] = v15;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>(a1, v21);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v22 = *(void *)a1;
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v3);
  if (v23)
  {
    void *i = *v23;
LABEL_38:
    *uint64_t v23 = i;
    goto LABEL_39;
  }
  void *i = *v14;
  *unsigned int v14 = i;
  *(void *)(v22 + 8 * v3) = v14;
  if (*i)
  {
    unint64_t v24 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9) {
        v24 %= v9;
      }
    }
    else
    {
      v24 &= v9 - 1;
    }
    uint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_182A99310(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,void *>>>::operator()[abi:nn180100](v2, v1);
  _Unwind_Resume(a1);
}

void *std::vector<LSRecord * {__weak}>::__init_with_size[abi:nn180100]<LSRecord * const*,LSRecord * const*>(void *result, void **a2, void **a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>>::__vallocate[abi:nn180100](result, a4);
    unint64_t v7 = (id *)v6[1];
    while (a2 != a3)
    {
      unint64_t v8 = *a2++;
      uint64_t result = objc_initWeak(v7++, v8);
    }
    v6[1] = v7;
  }
  return result;
}

void std::vector<LSRecord * {__weak}>::__init_with_size[abi:nn180100]<LSRecord * {__weak}*,LSRecord * {__weak}*>(void *a1, id *a2, id *a3, unint64_t a4)
{
  if (a4)
  {
    std::vector<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>>::__vallocate[abi:nn180100](a1, a4);
    unint64_t v7 = (id *)a1[1];
    while (a2 != a3)
      objc_copyWeak(v7++, a2++);
    a1[1] = v7;
  }
}

void std::vector<LSRecord *>::__append(void **a1, unint64_t a2, void *a3)
{
  unint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  unint64_t v7 = v8;
  unint64_t v9 = *(void **)(v6 - 8);
  if (a2 <= (v8 - (unsigned char *)v9) >> 3)
  {
    if (a2)
    {
      uint64_t v16 = 8 * a2;
      float v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 8;
      }
      while (v16);
      unint64_t v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (unsigned char *)*a1;
    unint64_t v11 = a2 + (v10 >> 3);
    if (v11 >> 61) {
      abort();
    }
    uint64_t v12 = v10 >> 3;
    uint64_t v13 = v7 - (unsigned char *)*a1;
    if (v13 >> 2 > v11) {
      unint64_t v11 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      BOOL v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<os_eligibility_answer_t>>(v6, v14);
    }
    else {
      BOOL v15 = 0;
    }
    BOOL v18 = &v15[8 * v12];
    unint64_t v19 = &v18[8 * a2];
    uint64_t v20 = 8 * a2;
    size_t v21 = v18;
    do
    {
      *(void *)size_t v21 = *a3;
      v21 += 8;
      v20 -= 8;
    }
    while (v20);
    uint64_t v22 = &v15[8 * v14];
    unint64_t v24 = (char *)*a1;
    uint64_t v23 = (char *)a1[1];
    if (v23 != *a1)
    {
      do
      {
        uint64_t v25 = *((void *)v23 - 1);
        v23 -= 8;
        *((void *)v18 - 1) = v25;
        v18 -= 8;
      }
      while (v23 != v24);
      uint64_t v23 = (char *)*a1;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
    {
      operator delete(v23);
    }
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<void const*,std::vector<std::pair<objc_selector *,void (*)(objc_object *,objc_selector *)>>>,void *>>>::operator()[abi:nn180100](uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    unint64_t v3 = (void *)__p[3];
    if (v3)
    {
      __p[4] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

id _LSGetCollapsedMIDictionaryForAppAndContentsDictionaries(void *a1)
{
  id v1 = a1;
  uint64_t v13 = 0;
  unint64_t v14 = &v13;
  uint64_t v15 = 0x3032000000;
  uint64_t v16 = __Block_byref_object_copy__47;
  float v17 = __Block_byref_object_dispose__47;
  id v18 = [MEMORY[0x1E4F1CA60] dictionary];
  uint64_t v7 = 0;
  unint64_t v8 = &v7;
  uint64_t v9 = 0x3032000000;
  uint64_t v10 = __Block_byref_object_copy__47;
  unint64_t v11 = __Block_byref_object_dispose__47;
  id v12 = [MEMORY[0x1E4F1CA60] dictionary];
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = ___LSGetCollapsedMIDictionaryForAppAndContentsDictionaries_block_invoke;
  v6[3] = &unk_1E52305E0;
  v6[4] = &v13;
  void v6[5] = &v7;
  [v1 enumerateObjectsUsingBlock:v6];
  uint64_t v2 = (void *)v14[5];
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = ___LSGetCollapsedMIDictionaryForAppAndContentsDictionaries_block_invoke_2;
  v5[3] = &unk_1E522DC28;
  v5[4] = &v7;
  [v2 enumerateKeysAndObjectsUsingBlock:v5];
  id v3 = (id)v8[5];
  _Block_object_dispose(&v7, 8);

  _Block_object_dispose(&v13, 8);

  return v3;
}

void sub_182A998B4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v2 - 96), 8);

  _Unwind_Resume(a1);
}

void sub_182A99A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v13 = v12;

  _Unwind_Resume(a1);
}

void sub_182A99BAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _LSGetTeamIdentifierFromInstallDict(void *a1)
{
  id v1 = a1;
  uint64_t v15 = 0;
  uint64_t v2 = objc_opt_class();
  uint64_t v3 = [v1 objectForKey:@"Entitlements"];
  int v4 = (void *)v3;
  if (v2) {
    BOOL v5 = v3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    char isKindOfClass = objc_opt_isKindOfClass();
    if ((isKindOfClass & 1) == 0)
    {

      int v4 = 0;
      goto LABEL_24;
    }
LABEL_9:
    uint64_t v7 = objc_opt_class();
    unint64_t v8 = [v4 objectForKey:@"com.apple.developer.team-identifier"];
    uint64_t v9 = v8;
    if (v7 && v8)
    {
      if (objc_opt_isKindOfClass())
      {
        uint64_t v15 = v9;
        goto LABEL_24;
      }

      uint64_t v15 = 0;
    }
    else
    {
      uint64_t v15 = v8;
      if (v8) {
        goto LABEL_24;
      }
    }
    uint64_t v10 = objc_opt_class();
    uint64_t v11 = [v4 objectForKey:@"application-identifier"];
    id v12 = (void *)v11;
    if (v10 && v11)
    {
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {

        id v12 = 0;
LABEL_23:

        goto LABEL_24;
      }
    }
    else if (!v11)
    {
      goto LABEL_23;
    }
    _LSSplitApplicationIdentifier(v12, &v15, 0);
    goto LABEL_23;
  }
  if (v3) {
    goto LABEL_9;
  }
LABEL_24:

  uint64_t v13 = v15;

  return v13;
}

void sub_182A99D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

CFTypeRef _LSCopyBundleInfoDictionary(__CFBundle *a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = (void *)MEMORY[0x18530F680]();
  CFDictionaryRef InfoDictionary = CFBundleGetInfoDictionary(a1);
  DeepPropertyListCopy = InfoDictionary;
  if (!InfoDictionary) {
    goto LABEL_7;
  }
  if (CFDictionaryGetCount(InfoDictionary) >= 1)
  {
    CFAllocatorRef v5 = CFGetAllocator(DeepPropertyListCopy);
    DeepPropertyListCopy = dictionaryCreateDeepPropertyListCopy(v5, DeepPropertyListCopy);
    if (DeepPropertyListCopy) {
      goto LABEL_7;
    }
    uint64_t v6 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v7 = [NSString stringWithUTF8String:"CFMutableDictionaryRef _LSCopyBundleInfoDictionary(CFBundleRef)"];
    [v6 handleFailureInFunction:v7, @"LSRegistration.mm", 734, @"Failed to create mutable copy of dictionary, cannot safely proceed, aborting" file lineNumber description];
  }
  DeepPropertyListCopy = 0;
LABEL_7:
  if (!DeepPropertyListCopy) {
    return 0;
  }
  CFTypeRef v8 = CFRetain(DeepPropertyListCopy);
  CFRelease(DeepPropertyListCopy);
  return v8;
}

void sub_182A99EAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__CFDictionary *dictionaryCreateDeepPropertyListCopy(const __CFAllocator *a1, const __CFDictionary *a2)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFIndex Count = CFDictionaryGetCount(a2);
  uint64_t v6 = (const void **)CFAllocatorAllocate(a1, 8 * Count, 0);
  uint64_t v7 = (const void **)CFAllocatorAllocate(a1, 8 * Count, 0);
  CFDictionaryGetKeysAndValues(a2, v6, v7);
  if (Count >= 1)
  {
    CFTypeRef v8 = v6;
    uint64_t v9 = v7;
    while (1)
    {
      CFPropertyListRef DeepCopy = CFPropertyListCreateDeepCopy(a1, *v8, 1uLL);
      CFPropertyListRef v11 = CFPropertyListCreateDeepCopy(a1, *v9, 1uLL);
      id v12 = v11;
      if (DeepCopy && v11 != 0) {
        break;
      }
      if (DeepCopy) {
        goto LABEL_13;
      }
      if (v11) {
        goto LABEL_10;
      }
LABEL_11:
      ++v9;
      ++v8;
      if (!--Count) {
        goto LABEL_15;
      }
    }
    CFDictionaryAddValue(Mutable, DeepCopy, v11);
LABEL_13:
    CFRelease(DeepCopy);
    if (!v12) {
      goto LABEL_11;
    }
LABEL_10:
    CFRelease(v12);
    goto LABEL_11;
  }
LABEL_15:
  CFAllocatorDeallocate(a1, v6);
  CFAllocatorDeallocate(a1, v7);
  return Mutable;
}

__CFDictionary *copyDeepMutableDictionary(__CFDictionary *result)
{
  if (result)
  {
    uint64_t result = dictionaryCreateDeepPropertyListCopy((const __CFAllocator *)*MEMORY[0x1E4F1CF80], result);
    if (!result)
    {
      id v1 = [MEMORY[0x1E4F28B00] currentHandler];
      uint64_t v2 = [NSString stringWithUTF8String:"CFMutableDictionaryRef copyDeepMutableDictionary(CFDictionaryRef)"];
      [v1 handleFailureInFunction:v2, @"LSRegistration.mm", 748, @"Failed to create mutable copy of dictionary, cannot safely proceed, aborting" file lineNumber description];

      return 0;
    }
  }
  return result;
}

void sub_182A9A0D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CFPropertyListRef _LSCopyiTunesMetadataDictionaryForAppContainerURL(CFURLRef url)
{
  if (!url) {
    return 0;
  }
  CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFURLRef v2 = CFURLCreateCopyAppendingPathComponent((CFAllocatorRef)*MEMORY[0x1E4F1CF80], url, @"iTunesMetadata.plist", 0);
  if (!v2) {
    return 0;
  }
  CFURLRef v3 = v2;
  int v4 = CFReadStreamCreateWithFile(v1, v2);
  if (v4)
  {
    CFAllocatorRef v5 = v4;
    if (CFReadStreamOpen(v4))
    {
      CFPropertyListRef v6 = CFPropertyListCreateWithStream(v1, v5, 0, 0, 0, 0);
      if (v6)
      {
        CFTypeID TypeID = CFDictionaryGetTypeID();
        if (TypeID != CFGetTypeID(v6))
        {
          CFRelease(v6);
          CFPropertyListRef v6 = 0;
        }
      }
      CFReadStreamClose(v5);
    }
    else
    {
      CFPropertyListRef v6 = 0;
    }
    CFRelease(v5);
  }
  else
  {
    CFPropertyListRef v6 = 0;
  }
  CFRelease(v3);
  return v6;
}

void _LSPromoteiTunesMetadataKeys(const __CFDictionary *a1, __CFDictionary *a2)
{
  if (a1 && a2)
  {
    Value = CFDictionaryGetValue(a1, @"initialODRSize");
    CFTypeID TypeID = CFNumberGetTypeID();
    if (Value && (!TypeID || CFGetTypeID(Value) == TypeID)) {
      CFDictionaryAddValue(a2, @"initialODRSize", Value);
    }
    CFPropertyListRef v6 = CFDictionaryGetValue(a1, @"itemId");
    CFTypeID v7 = CFNumberGetTypeID();
    if (v6 && (!v7 || CFGetTypeID(v6) == v7)) {
      CFDictionaryAddValue(a2, @"itemId", v6);
    }
    CFTypeRef v8 = CFDictionaryGetValue(a1, @"artistName");
    CFTypeID v9 = CFStringGetTypeID();
    if (v8 && (!v9 || CFGetTypeID(v8) == v9)) {
      CFDictionaryAddValue(a2, @"artistName", v8);
    }
    uint64_t v10 = CFDictionaryGetValue(a1, @"itemName");
    CFTypeID v11 = CFStringGetTypeID();
    if (v10 && (!v11 || CFGetTypeID(v10) == v11)) {
      CFDictionaryAddValue(a2, @"itemName", v10);
    }
    id v12 = CFDictionaryGetValue(a1, @"storeCohort");
    CFTypeID v13 = CFStringGetTypeID();
    if (v12 && (!v13 || CFGetTypeID(v12) == v13)) {
      CFDictionaryAddValue(a2, @"storeCohort", v12);
    }
    unint64_t v14 = CFDictionaryGetValue(a1, @"s");
    CFTypeID v15 = CFNumberGetTypeID();
    if (v14 && (!v15 || CFGetTypeID(v14) == v15)) {
      CFDictionaryAddValue(a2, @"s", v14);
    }
    uint64_t v16 = CFDictionaryGetValue(a1, @"softwareVersionExternalIdentifier");
    CFTypeID v17 = CFNumberGetTypeID();
    if (v16 && (!v17 || CFGetTypeID(v16) == v17)) {
      CFDictionaryAddValue(a2, @"softwareVersionExternalIdentifier", v16);
    }
    id v18 = CFDictionaryGetValue(a1, @"betaExternalVersionIdentifier");
    CFTypeID v19 = CFNumberGetTypeID();
    if (v18 && (!v19 || CFGetTypeID(v18) == v19)) {
      CFDictionaryAddValue(a2, @"betaExternalVersionIdentifier", v18);
    }
    uint64_t v20 = CFDictionaryGetValue(a1, @"DeviceBasedVPP");
    CFTypeID v21 = CFBooleanGetTypeID();
    if (v20 && (!v21 || CFGetTypeID(v20) == v21)) {
      CFDictionaryAddValue(a2, @"DeviceBasedVPP", v20);
    }
    uint64_t v22 = CFDictionaryGetValue(a1, @"is-purchased-redownload");
    CFTypeID v23 = CFBooleanGetTypeID();
    if (v22 && (!v23 || CFGetTypeID(v22) == v23)) {
      CFDictionaryAddValue(a2, @"is-purchased-redownload", v22);
    }
    unint64_t v24 = CFDictionaryGetValue(a1, @"gameCenterEnabled");
    CFTypeID v25 = CFBooleanGetTypeID();
    if (v24 && (!v25 || CFGetTypeID(v24) == v25)) {
      CFDictionaryAddValue(a2, @"gameCenterEnabled", v24);
    }
    uint64_t v26 = CFDictionaryGetValue(a1, @"gameCenterEverEnabled");
    CFTypeID v27 = CFBooleanGetTypeID();
    if (v26 && (!v27 || CFGetTypeID(v26) == v27)) {
      CFDictionaryAddValue(a2, @"gameCenterEverEnabled", v26);
    }
    uint64_t v28 = CFDictionaryGetValue(a1, @"sourceApp");
    CFTypeID v29 = CFStringGetTypeID();
    if (v28 && (!v29 || CFGetTypeID(v28) == v29)) {
      CFDictionaryAddValue(a2, @"sourceApp", v28);
    }
    uint64_t v30 = CFDictionaryGetValue(a1, @"variantID");
    CFTypeID v31 = CFStringGetTypeID();
    if (v30 && (!v31 || CFGetTypeID(v30) == v31)) {
      CFDictionaryAddValue(a2, @"variantID", v30);
    }
    uint64_t v32 = CFDictionaryGetValue(a1, @"managementDeclarationIdentifier");
    CFTypeID v33 = CFStringGetTypeID();
    if (v32 && (!v33 || CFGetTypeID(v32) == v33)) {
      CFDictionaryAddValue(a2, @"managementDeclarationIdentifier", v32);
    }
    unsigned int v34 = CFDictionaryGetValue(a1, @"genre");
    CFTypeID v35 = CFStringGetTypeID();
    if (v34 && (!v35 || CFGetTypeID(v34) == v35)) {
      CFDictionaryAddValue(a2, @"genre", v34);
    }
    char v36 = CFDictionaryGetValue(a1, @"genreId");
    CFTypeID v37 = CFNumberGetTypeID();
    if (v36 && (!v37 || CFGetTypeID(v36) == v37)) {
      CFDictionaryAddValue(a2, @"genreId", v36);
    }
    CFStringRef v38 = CFDictionaryGetValue(a1, @"subgenres");
    CFTypeID v39 = CFArrayGetTypeID();
    if (v38 && (!v39 || CFGetTypeID(v38) == v39)) {
      CFDictionaryAddValue(a2, @"subgenres", v38);
    }
    unsigned int v40 = CFDictionaryGetValue(a1, @"distributorInfo");
    CFTypeID v41 = CFDictionaryGetTypeID();
    if (v40 && (!v41 || CFGetTypeID(v40) == v41)) {
      CFDictionaryAddValue(a2, @"distributorInfo", v40);
    }
    CFTypeID v42 = CFArrayGetTypeID();
    uint64_t v43 = CFDictionaryGetValue(a1, @"categories");
    if (v43)
    {
      int v44 = v43;
      if (CFGetTypeID(v43) == v42) {
        CFDictionaryAddValue(a2, @"categories", v44);
      }
    }
    long long v45 = CFDictionaryGetValue(a1, @"com.apple.iTunesStore.downloadInfo");
    CFTypeID v46 = CFDictionaryGetTypeID();
    if (v45 && (!v46 || CFGetTypeID(v45) == v46))
    {
      CFTypeID v47 = CFGetTypeID(v45);
      if (v47 == CFDictionaryGetTypeID())
      {
        CFStringRef v48 = CFDictionaryGetValue((CFDictionaryRef)v45, @"accountInfo");
        CFTypeID v49 = CFDictionaryGetTypeID();
        if (v48)
        {
          if (!v49 || CFGetTypeID(v48) == v49)
          {
            CFTypeID v50 = CFGetTypeID(v48);
            if (v50 == CFDictionaryGetTypeID())
            {
              if ((long long v51 = CFDictionaryGetValue((CFDictionaryRef)v48, @"PurchaserID"),
                    CFTypeID v52 = CFNumberGetTypeID(),
                    v51)
                && (!v52 || CFGetTypeID(v51) == v52)
                || (long long v51 = CFDictionaryGetValue((CFDictionaryRef)v48, @"DSPersonID"), v53 = CFNumberGetTypeID(),
                                                                                           v51)
                && (!v53 || CFGetTypeID(v51) == v53))
              {
                CFDictionaryAddValue(a2, @"PurchaserID", v51);
              }
            }
          }
        }
      }
    }
    CFDictionaryRef v54 = (const __CFDictionary *)CFDictionaryGetValue(a1, @"rating");
    CFTypeID v55 = CFDictionaryGetTypeID();
    if (v54 && (!v55 || CFGetTypeID(v54) == v55))
    {
      uint64_t v56 = CFDictionaryGetValue(v54, @"rank");
      CFTypeID v57 = CFNumberGetTypeID();
      if (v56 && (!v57 || CFGetTypeID(v56) == v57)) {
        CFDictionaryAddValue(a2, @"rank", v56);
      }
      uint64_t v58 = CFDictionaryGetValue(v54, @"label");
      CFTypeID v59 = CFStringGetTypeID();
      if (v58 && (!v59 || CFGetTypeID(v58) == v59))
      {
        CFDictionaryAddValue(a2, @"label", v58);
      }
    }
  }
}

void sub_182A9AD14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A9AFC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182A9B048()
{
}

void sub_182A9B15C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSPathIsTrusted(const char *a1)
{
  uint64_t v2 = 0;
  while (1)
  {
    size_t v3 = strlen(_LSPathIsTrusted(char const*)::trustedPaths[v2]);
    if (!strncmp(a1, _LSPathIsTrusted(char const*)::trustedPaths[v2], v3)) {
      break;
    }
    if (++v2 == 10) {
      return 0;
    }
  }
  return 1;
}

BOOL _LSRegisterPluginNode(LSContext *a1, void *a2, FSNode *a3, int a4, unsigned int a5, void *a6)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  CFTypeID v11 = a2;
  HIDWORD(v17) = a5;
  id v12 = objc_alloc_init(LSRegistrationInfo);
  LODWORD(v17) = 0;
  CFTypeID v13 = [(FSNode *)v11 bookmarkDataRelativeToNode:0 error:a6];
  if (!v13 || !_LSContainerFindOrRegisterWithNode((id *)&a1->db, v11, a4, &v17, 0, 0, a6)) {
    goto LABEL_11;
  }
  v12->bundleClass = 12;
  v12->version = 7;
  v12->action = 204;
  v12->options = a4;
  v12->containeruint64_t Unit = v17;
  if (a5 || (_LSPluginFindWithInfo(a1->db, 0, 0, 0, v11, (_DWORD *)&v17 + 1, 0), (a5 = HIDWORD(v17)) != 0)) {
    v12->bundleuint64_t Unit = a5;
  }
  if ([(FSNode *)v11 getFileSystemRepresentation:v18 error:a6])
  {
    int v14 = _LSRegisterDirectoryNode(a1, v11, (FSNode *)v12, v13, a3, 0, 0, (const __CFURL *)((char *)&v17 + 4), v17);
    BOOL v15 = v14 == 0;
    if (a6 && v14)
    {
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], v14, (uint64_t)"_LSRegisterPluginNode", 1982, 0);
      BOOL v15 = 0;
      *a6 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
LABEL_11:
    BOOL v15 = 0;
  }

  return v15;
}

void sub_182A9B408(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSRegisterDirectoryNode(LSContext *a1, FSNode *a2, FSNode *a3, LSRegistrationInfo *a4, FSNode *a5, const __CFArray **a6, const __CFArray **a7, const __CFURL *a8, unsigned int *a9)
{
  uint64_t v16 = a2;
  CFTypeID v17 = a3;
  id v18 = a4;
  uint64_t v19 = [(FSNode *)v16 URL];

  uint64_t v20 = _LSDispatchRegistration(a1, (char *)v17, v18, v19, a5, a8, a6, (unsigned __int8 *)a7, v22, v23);
  return v20;
}

void sub_182A9B4F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL _LSRegisterBundleURL(void **a1, void *a2, unsigned int a3, FSNode *a4, void *a5)
{
  id v9 = a2;
  uint64_t v10 = v9;
  if (a3)
  {
    uint64_t v11 = [v9 copy];

    uint64_t v10 = (void *)v11;
  }
  id v12 = [[FSNode alloc] initWithURL:v10 flags:0 error:a5];
  if (v12) {
    BOOL v13 = _LSRegisterBundleNode(a1, v12, a3, a4, a5);
  }
  else {
    BOOL v13 = 0;
  }

  return v13;
}

void sub_182A9B5B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL _LSRegisterBundleNode(void **a1, void *a2, unsigned int a3, FSNode *a4, void *a5)
{
  id v9 = a2;
  CFTypeID v23 = a1;
  id v24 = 0;
  char v25 = 0;
  id v26 = 0;
  +[_LSDServiceDomain defaultServiceDomain]();
  uint64_t v10 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  uint64_t v11 = (LSContext *)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v23, v10, 0);

  if (!v11)
  {
    if (a5)
    {
      +[_LSDServiceDomain defaultServiceDomain]();
      int v14 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
      uint64_t v15 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v23, v14, 0);

      if (v15) {
        id v16 = 0;
      }
      else {
        id v16 = v26;
      }
      goto LABEL_18;
    }
    goto LABEL_16;
  }
  int v12 = _LSFindOrRegisterBundleNode(v11, v9, 0, a3, a4, 0, 0);
  if (v12 == -10811)
  {
    uint64_t v22 = -1;
    CFTypeID v17 = (void *)_LSGetLibraryBundleIdentifierAndItemIndexForNode(v11, v9, &v22);
    if (v17 && v22 == -1)
    {
      BOOL v13 = _LSRegisterLibrary(v11, v17, 1, a5);
      goto LABEL_19;
    }
    if (a5)
    {
      id v18 = _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -10811, (uint64_t)"_LSRegisterBundleNode", 2529, 0);
      goto LABEL_15;
    }
LABEL_16:
    BOOL v13 = 0;
    goto LABEL_19;
  }
  if (v12)
  {
    if (a5)
    {
      id v18 = _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], v12, (uint64_t)"_LSRegisterBundleNode", 2534, 0);
LABEL_15:
      id v16 = v18;
LABEL_18:
      BOOL v13 = 0;
      *a5 = v16;
      goto LABEL_19;
    }
    goto LABEL_16;
  }
  BOOL v13 = 1;
LABEL_19:
  if (v23 && v25) {
    _LSContextDestroy(v23);
  }
  id v19 = v24;
  CFTypeID v23 = 0;
  id v24 = 0;

  char v25 = 0;
  id v20 = v26;
  id v26 = 0;

  return v13;
}

void sub_182A9B7E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);

  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)va);
  _Unwind_Resume(a1);
}

uint64_t _LSGetLibraryBundleIdentifierAndItemIndexForNode(LSContext *a1, FSNode *a2, uint64_t *a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v5 = a2;
  int v24 = 0;
  uint64_t v23 = 0;
  bzero(v26, 0x400uLL);
  *a3 = -1;
  if (![(FSNode *)v5 getFileSystemRepresentation:v26 error:0]) {
    goto LABEL_8;
  }
  size_t v6 = strlen(v26);
  uint64_t v7 = 0;
  while (1)
  {
    getLibIDs();
    CFTypeRef v8 = (const char **)_LSPathForBundleLibraryIdentifier((const __CFString *)getLibIDs(void)::klibIDs[v7]);
    id v9 = v8;
    if (v8)
    {
      size_t v10 = *(int *)v8;
      if (v6 > v10 && !strncasecmp(v26, v8[1], *(int *)v8) && v26[v10] == 47) {
        break;
      }
    }
    if (++v7 == 4) {
      goto LABEL_8;
    }
  }
  getLibIDs();
  BOOL v13 = (void *)getLibIDs(void)::klibIDs[v7];
  memset(v25, 0, sizeof(v25));
  if (_LSBundleFindWithInfo((uint64_t)a1, 0, v13, 0, v25, 8, 128, &v24, &v23))
  {
LABEL_8:
    uint64_t v11 = 0;
  }
  else
  {
    getLibIDs();
    uint64_t v11 = getLibIDs(void)::klibIDs[v7];
    if (v24)
    {
      uint64_t v14 = 0;
      uint64_t v15 = *(int *)v9;
      id v16 = &v26[v15 + 1];
      size_t v17 = ~v15 + v6;
      while (1)
      {
        size_t v18 = kLibrarySubfolders[v14];
        if (v17 > v18
          && !strncasecmp(v16, *(const char **)&kLibrarySubfolders[v14 + 2], kLibrarySubfolders[v14])
          && v16[v18] == 47)
        {
          break;
        }
        v14 += 6;
        if (v14 == 60) {
          goto LABEL_8;
        }
      }
      if (*(_DWORD *)(v23 + 464))
      {
        if ([(FSNode *)v5 isDirectory])
        {
          MEMORY[0x1F4188790]();
          strlcpy((char *)v21 - ((v17 + 17) & 0xFFFFFFFFFFFFFFF0), v16, v19);
          *(_WORD *)((char *)v21 + v17 - ((v17 + 17) & 0xFFFFFFFFFFFFFFF0)) = 47;
          int v20 = _CSGetStringForCharacters();
        }
        else
        {
          int v20 = _CSGetStringForCharacters();
        }
        if (v20)
        {
          v21[0] = MEMORY[0x1E4F143A8];
          v21[1] = 3221225472;
          long long v21[2] = ___ZL48_LSGetLibraryBundleIdentifierAndItemIndexForNodeP9LSContextP6FSNodePl_block_invoke;
          v21[3] = &__block_descriptor_44_e14_v24__0I8I12_16l;
          int v22 = v20;
          v21[4] = a3;
          _CSArrayEnumerateAllValues();
        }
      }
    }
  }

  return v11;
}

void sub_182A9BB24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL _LSRegisterLibrary(LSContext *a1, void *a2, int a3, void *a4)
{
  v26[1] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = a2;
  uint64_t v8 = _LSPathForBundleLibraryIdentifier(v7);
  unsigned int v24 = 0;
  uint64_t v23 = 0;
  unsigned int v22 = 0;
  CFTypeID v21 = 0;
  if (!v8)
  {
    if (a4)
    {
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -43, (uint64_t)"_LSRegisterLibrary", 3034, 0);
      id v17 = (id)objc_claimAutoreleasedReturnValue();
      id v9 = 0;
      goto LABEL_19;
    }
    id v9 = 0;
    goto LABEL_30;
  }
  id v9 = [[FSNode alloc] initWithFileSystemRepresentation:*(void *)(v8 + 8) flags:8 error:a4];
  if (!v9) {
    goto LABEL_30;
  }
  int v10 = _LSBundleFindWithNode((uint64_t)a1, v9, &v24, &v23);
  if (v10 != -9499)
  {
    if (v10)
    {
      if (a4)
      {
        _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], v10, (uint64_t)"_LSRegisterLibrary", 3041, 0);
        id v17 = (id)objc_claimAutoreleasedReturnValue();
LABEL_19:
        BOOL v16 = 0;
        *a4 = v17;
        goto LABEL_31;
      }
LABEL_30:
      BOOL v16 = 0;
      goto LABEL_31;
    }
    if (!_LSBundleNeedsRegistration(a1, v9, a3, v24, v23)) {
      goto LABEL_30;
    }
  }
  if (!_LSContainerFindOrRegisterWithNode((id *)&a1->db, v9, a3, &v22, 0, (id *)&v21, a4)) {
    goto LABEL_30;
  }
  if (!v24)
  {
    int v18 = _LSBundleFindWithNode((uint64_t)a1, v9, &v24, &v23);
    if (v18 != -9499)
    {
      if (!v18)
      {
        if (!_LSBundleNeedsRegistration(a1, v9, a3, v24, v23)) {
          goto LABEL_30;
        }
        goto LABEL_8;
      }
      if (a4)
      {
        _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], v18, (uint64_t)"_LSRegisterLibrary", 3055, 0);
        id v17 = (id)objc_claimAutoreleasedReturnValue();
        goto LABEL_19;
      }
      goto LABEL_30;
    }
  }
LABEL_8:
  uint64_t v11 = objc_alloc_init(LSRegistrationInfo);
  v11->version = 7;
  v11->action = 205;
  v11->options = a3;
  v11->containeruint64_t Unit = v22;
  v11->bundleuint64_t Unit = v24;
  v11->bundleClass = 8;
  if (_LSGetItemInfoFlagsForNode(a1, v9, &v11->itemFlags, a4)
    && [(FSNode *)v9 getContentModificationDate:&v11->contentModDate error:a4]
    && [(FSNode *)v9 getInodeNumber:&v11->inoBundle error:a4]
    && ([(FSNode *)v9 bookmarkDataRelativeToNode:v21 error:a4],
        (int v12 = (LSRegistrationInfo *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    uint64_t v25 = *MEMORY[0x1E4F1CFF8];
    v26[0] = v7;
    BOOL v13 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v26 forKeys:&v25 count:1];
    uint64_t v14 = [(FSNode *)v9 URL];
    int v15 = _LSDispatchRegistration(a1, (char *)v11, v12, v14, v13, (const __CFURL *)&v11->bundleUnit, 0, 0, v20, v21);

    BOOL v16 = v15 == 0;
    if (a4 && v15)
    {
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], v15, (uint64_t)"_LSRegisterLibrary", 3095, 0);
      *a4 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    BOOL v16 = 0;
  }

LABEL_31:
  return v16;
}

void sub_182A9BF5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

id getNeedsRegistrationLog(void)
{
  if (getNeedsRegistrationLog(void)::once != -1) {
    dispatch_once(&getNeedsRegistrationLog(void)::once, &__block_literal_global_290);
  }
  os_log_t v0 = (void *)getNeedsRegistrationLog(void)::result;

  return v0;
}

BOOL _LSRegisterBundleNode(LSContext *a1, unsigned int a2, void *a3, void *a4, unsigned int a5, FSNode *a6, const __CFArray **a7, const __CFArray **a8, const __CFURL *a9, id *a10)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v31 = a3;
  BOOL v16 = a4;
  id v17 = objc_alloc_init(LSRegistrationInfo);
  v17->unsigned int bundleClass = _LSGetBundleClassForNode((uint64_t)a1, v16);
  unsigned int bundleClass = v17->bundleClass;
  if (bundleClass == 3 || bundleClass == 0)
  {
    if (a10)
    {
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -10811, (uint64_t)"_LSRegisterBundleNode", 2057, 0);
      id v20 = (id)objc_claimAutoreleasedReturnValue();
      BOOL v21 = 0;
      unsigned int v22 = 0;
      goto LABEL_26;
    }
    goto LABEL_28;
  }
  if ((a5 & 0x40) != 0 && bundleClass == 2) {
    v17->unsigned int bundleClass = 16;
  }
  v17->version = 7;
  v17->action = 203;
  v17->options = a5;
  v17->containeruint64_t Unit = a2;
  if (*(_DWORD *)a9) {
    v17->bundleuint64_t Unit = *(_DWORD *)a9;
  }
  if (!_LSGetItemInfoFlagsForNode(a1, v16, &v17->itemFlags, a10)
    || ![(FSNode *)v16 getContentModificationDate:&v17->contentModDate error:a10])
  {
LABEL_28:
    BOOL v21 = 0;
    unsigned int v22 = 0;
    goto LABEL_29;
  }
  unsigned int v22 = [(FSNode *)v16 bookmarkDataRelativeToNode:v31 error:a10];
  if (!v22
    || ![(FSNode *)v16 getInodeNumber:&v17->inoBundle error:a10]
    || ![(FSNode *)v16 getFileSystemRepresentation:v33 error:a10])
  {
    goto LABEL_43;
  }
  if ((v17->options & 4) != 0) {
    goto LABEL_23;
  }
  int v32 = -2;
  if (![(FSNode *)v16 getOwnerUID:&v32 error:a10])
  {
LABEL_43:
    BOOL v21 = 0;
    if (!a6) {
      goto LABEL_42;
    }
    goto LABEL_30;
  }
  if (!v32 && _LSPathIsTrusted(v33)) {
    v17->options |= 2u;
  }
LABEL_23:
  uint64_t v23 = (void *)MEMORY[0x18530F680]();
  int v24 = _LSRegisterDirectoryNode(a1, v16, (FSNode *)v17, v22, a6, a7, a8, a9, v29);
  BOOL v21 = v24 == 0;
  if (a10 && v24)
  {
    _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], v24, (uint64_t)"_LSRegisterBundleNode", 2152, 0);
    id v20 = (id)objc_claimAutoreleasedReturnValue();
    BOOL v21 = 0;
LABEL_26:
    *a10 = v20;
    if (!a6) {
      goto LABEL_42;
    }
LABEL_30:
    if (*MEMORY[0x1E4F1CFF8])
    {
      Value = (NSString *)CFDictionaryGetValue((CFDictionaryRef)a6, (const void *)*MEMORY[0x1E4F1CFF8]);
      CFTypeID TypeID = CFStringGetTypeID();
      if (!Value || !TypeID || CFGetTypeID(Value) == TypeID)
      {
        if (v21)
        {
LABEL_35:
          uint64_t v27 = @"success";
LABEL_41:
          _LSLogStepFinished(4, v21, Value, &cfstr_RegisteredBund.isa, v27);

          goto LABEL_42;
        }
LABEL_38:
        if (a10)
        {
          uint64_t v27 = [*a10 description];
        }
        else
        {
          uint64_t v27 = @"untracked error";
        }
        goto LABEL_41;
      }
    }
    else
    {
      CFStringGetTypeID();
    }
    Value = 0;
    if (v21) {
      goto LABEL_35;
    }
    goto LABEL_38;
  }
LABEL_29:
  if (a6) {
    goto LABEL_30;
  }
LABEL_42:

  return v21;
}

void sub_182A9C404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

uint64_t _LSPathForBundleLibraryIdentifier(const __CFString *a1)
{
  if (CFEqual(a1, @"com.apple.system-library"))
  {
    uint64_t v2 = 0;
    return (uint64_t)&libPaths + 16 * v2;
  }
  if (CFEqual(a1, @"com.apple.local-library"))
  {
    uint64_t v2 = 1;
    return (uint64_t)&libPaths + 16 * v2;
  }
  if (CFEqual(a1, @"com.apple.network-library"))
  {
    uint64_t v2 = 2;
    return (uint64_t)&libPaths + 16 * v2;
  }
  if (CFEqual(a1, @"com.apple.apple-internal-library"))
  {
    uint64_t v2 = 3;
    return (uint64_t)&libPaths + 16 * v2;
  }
  return 0;
}

uint64_t _LSDispatchRegistration(LSContext *a1, char *a2, LSRegistrationInfo *a3, NSData *a4, FSNode *a5, const __CFURL *a6, const __CFArray **a7, unsigned __int8 *a8, const __CFArray **a9, unsigned __int8 *a10)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v17 = a2;
  int v18 = a3;
  context = (void *)MEMORY[0x18530F680]();
  if ([(id)__LSDefaultsGetSharedInstance() hasServer])
  {
    if ((v17[19] & 1) == 0)
    {
      uint64_t BundleDataAndRegister = _LSRegisterItemInfo(v17, v18, 0, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, (uint64_t)a8);
      goto LABEL_14;
    }
  }
  else if (!v17)
  {
    id v20 = objc_alloc_init(LSRegistrationInfo);
    goto LABEL_7;
  }
  id v20 = (LSRegistrationInfo *)[v17 mutableCopy];
LABEL_7:
  BOOL v21 = v20;
  uint64_t BundleDataAndRegister = _LSServerCreateBundleDataAndRegister(a1, v20, (NSData *)v18, (const __CFURL *)a4, a5, (unsigned int *)a6, a7, a8);
  if (BundleDataAndRegister == -10675)
  {
    if ((v21->options & 2) != 0)
    {
      uint64_t BundleDataAndRegister = 4294956621;
    }
    else
    {
      unsigned int v22 = _LSInstallLog();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)LSVersionNumber buf = 138412290;
        id v26 = a4;
        _os_log_impl(&dword_182959000, v22, OS_LOG_TYPE_DEFAULT, "Retrying registration of %@ with trusted bit", buf, 0xCu);
      }

      v21->options |= 2u;
      uint64_t BundleDataAndRegister = _LSServerCreateBundleDataAndRegister(a1, v21, (NSData *)v18, (const __CFURL *)a4, a5, (unsigned int *)a6, a7, a8);
    }
  }

LABEL_14:

  return BundleDataAndRegister;
}

void sub_182A9C714(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSUnregisterBundle(_LSDatabase **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v36 = 0;
  CFTypeID v37 = &v36;
  uint64_t v38 = 0x2020000000;
  int v39 = -10810;
  size_t v6 = (void *)MEMORY[0x18530F680]();
  if (([(id)__LSDefaultsGetSharedInstance() isServer] & 1) == 0
    && ([(id)__LSDefaultsGetSharedInstance() hasServer] & 1) != 0)
  {
    v26[0] = (void (*)(void, void))MEMORY[0x1E4F143A8];
    v26[1] = (void (*)(void, void))3221225472;
    void v26[2] = (void (*)(void, void))___LSUnregisterBundle_block_invoke_184;
    v26[3] = (void (*)(void, void))&unk_1E522BA78;
    void v26[4] = (void (*)(void, void))&v36;
    uint64_t v7 = +[_LSDService synchronousXPCProxyWithErrorHandler:]((uint64_t)_LSDModifyService, v26);
    v25[0] = MEMORY[0x1E4F143A8];
    v25[1] = 3221225472;
    _OWORD v25[2] = ___LSUnregisterBundle_block_invoke_2;
    v25[3] = &unk_1E522F860;
    v25[4] = &v36;
    [v7 unregisterBundleUnit:a2 options:a3 completionHandler:v25];
    if ((a3 & 0x3000000) == 0x2000000 && !*((_DWORD *)v37 + 6))
    {
      id v24 = 0;
      char v8 = _LSContextUpdate(a1, 1, &v24);
      id v9 = v24;
      int v10 = v9;
      if (v8) {
        int v11 = 0;
      }
      else {
        int v11 = _LSGetOSStatusFromNSError(v9);
      }
      *((_DWORD *)v37 + 6) = v11;
    }
    goto LABEL_32;
  }
  int v32 = (void **)a1;
  id v33 = 0;
  char v34 = 0;
  id v35 = 0;
  +[_LSDServiceDomain defaultServiceDomain]();
  int v12 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  BOOL v13 = (void **)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v32, v12, 0);

  if (v13)
  {
    *((_DWORD *)v37 + 6) = 0;
    if ((a3 & 0x20000000) != 0)
    {
      if (CSStoreGetUnit())
      {
        int v17 = _LSPluginUnregister(*v13, a2);
LABEL_20:
        *((_DWORD *)v37 + 6) = v17;
        if (!v17)
        {
          uint64_t SequenceNumber = _LSDatabaseGetSequenceNumber();
          _LSDatabaseSetSequenceNumber((uint64_t)*v13, SequenceNumber + 1);
          if (!*((_DWORD *)v37 + 6)) {
            _LSArmSaveTimer(5);
          }
        }
        goto LABEL_25;
      }
    }
    else if (CSStoreGetUnit())
    {
      uint64_t v14 = _LSBundleGet(*v13, a2);
      if (*(_DWORD *)(v14 + 168) == 2)
      {
        uint64_t v28 = 0;
        CFTypeID v29 = &v28;
        uint64_t v30 = 0x2020000000;
        char v31 = 0;
        v26[5] = (void (*)(void, void))MEMORY[0x1E4F143A8];
        v26[6] = (void (*)(void, void))3221225472;
        v26[7] = (void (*)(void, void))___LSUnregisterBundle_block_invoke;
        v26[8] = (void (*)(void, void))&unk_1E5230608;
        int v27 = a2;
        v26[10] = (void (*)(void, void))v13;
        v26[11] = (void (*)(void, void))v14;
        v26[9] = (void (*)(void, void))&v28;
        _LSDatabaseEnumeratingBindingMap();
        if (!*((unsigned char *)v29 + 24))
        {
          int v15 = _LSAppProtectionLog();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
          {
            BOOL v16 = (void *)_CSStringCopyCFString();
            _LSUnregisterBundle_cold_1(v16, (uint64_t)v40, v15);
          }

          +[_LSDAppProtectionClient cleanupDeletedApplication:_CSStringCopyCFString()];
        }
        _Block_object_dispose(&v28, 8);
      }
      int v17 = _LSBundleRemove(*v13, a2, 1);
      goto LABEL_20;
    }
    int v18 = -9499;
  }
  else
  {
    int v18 = LaunchServices::Database::Context::status((id *)&v32);
  }
  *((_DWORD *)v37 + 6) = v18;
LABEL_25:
  if (v32 && v34) {
    _LSContextDestroy(v32);
  }
  id v20 = v33;
  int v32 = 0;
  id v33 = 0;

  char v34 = 0;
  id v21 = v35;
  id v35 = 0;

LABEL_32:
  uint64_t v22 = *((unsigned int *)v37 + 6);
  _Block_object_dispose(&v36, 8);
  return v22;
}

void sub_182A9CB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)(v30 - 176));
  _Block_object_dispose((const void *)(v30 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_182A9CD0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A9CD8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t _LSUpdateContainerState(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = a1;
  uint64_t v60 = 0;
  long long v61 = &v60;
  uint64_t v62 = 0x2020000000;
  int v63 = -10810;
  if (v5)
  {
    if (a2) {
      goto LABEL_3;
    }
  }
  else
  {
    CFTypeID v37 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v38 = objc_msgSend(NSString, "stringWithUTF8String:", "OSStatus _LSUpdateContainerState(__strong LSDatabaseRef, LSContainerID, LSContainerData *)");
    [v37 handleFailureInFunction:v38, @"LSRegistration.mm", 3347, @"Invalid parameter not satisfying: %@", @"inDB != NULL" file lineNumber description];

    if (a2) {
      goto LABEL_3;
    }
  }
  int v39 = [MEMORY[0x1E4F28B00] currentHandler];
  unsigned int v40 = objc_msgSend(NSString, "stringWithUTF8String:", "OSStatus _LSUpdateContainerState(__strong LSDatabaseRef, LSContainerID, LSContainerData *)");
  [v39 handleFailureInFunction:v40, @"LSRegistration.mm", 3348, @"Invalid parameter not satisfying: %@", @"inContainerUnit != kCSStoreNullID" file lineNumber description];

LABEL_3:
  size_t v6 = (void *)MEMORY[0x18530F680]();
  uint64_t v7 = _LSContainerGet();
  if (v7)
  {
    uint64_t v52 = 0;
    CFTypeID v53 = &v52;
    uint64_t v54 = 0x4812000000;
    CFTypeID v55 = __Block_byref_object_copy__196;
    uint64_t v56 = __Block_byref_object_dispose__197;
    CFTypeID v57 = &unk_182B5933F;
    long long v8 = *(_OWORD *)v7;
    int v59 = *(_DWORD *)(v7 + 16);
    long long v58 = v8;
    if (_LSContainerDataNeedsUpdate((uint64_t)&v58))
    {
      if (([(id)__LSDefaultsGetSharedInstance() isServer] & 1) != 0
        || ([(id)__LSDefaultsGetSharedInstance() hasServer] & 1) == 0)
      {
        uint64_t v51 = 0;
        int v10 = *(_DWORD *)(v7 + 12);
        if (v10)
        {
          int v11 = _LSAliasGet(v5, v10);
          if (v11)
          {
            id v50 = 0;
            BOOL v12 = +[FSNode getVolumeIdentifier:&v51 forBookmarkData:v11 error:&v50];
            id v13 = v50;
            uint64_t v14 = v13;
            if (v12) {
              int v15 = 0;
            }
            else {
              int v15 = _LSGetOSStatusFromNSError(v13);
            }
            *((_DWORD *)v61 + 6) = v15;
          }
          else
          {
            *((_DWORD *)v61 + 6) = -41;
          }
        }
        else if ((*(_WORD *)v7 & 2) != 0)
        {
          BOOL v16 = +[FSNode rootVolumeNode];
          id v49 = 0;
          char v17 = [v16 getVolumeIdentifier:&v51 error:&v49];
          id v18 = v49;

          if (v17) {
            int v19 = 0;
          }
          else {
            int v19 = _LSGetOSStatusFromNSError(v18);
          }
          *((_DWORD *)v61 + 6) = v19;
        }
        else
        {
          *((_DWORD *)v61 + 6) = -35;
        }
        id v20 = v61;
        BOOL v21 = *((_DWORD *)v61 + 6) == 0;
        uint64_t v22 = v51;
        BOOL v23 = v51 != 0;
        id v24 = v53;
        BOOL v25 = !v21 || !v23;
        if (v21 && v23) {
          char v26 = 1;
        }
        else {
          char v26 = -1;
        }
        if (v25) {
          uint64_t v22 = 0;
        }
        *((unsigned char *)v53 + 50) = v26;
        *(uint64_t *)((char *)v24 + 52) = v22;
        *((_DWORD *)v20 + 6) = 0;
        uint64_t v27 = v24[6];
        uint64_t v28 = v24[7];
        uint64_t v29 = *((unsigned int *)v24 + 16);
        if (v27 != *(void *)v7 || v28 != *(void *)(v7 + 8) || v29 != *(_DWORD *)(v7 + 16))
        {
          v45[0] = MEMORY[0x1E4F143A8];
          v45[1] = 3221225472;
          v45[2] = ___LSUpdateContainerState_block_invoke;
          v45[3] = &unk_1E5230630;
          CFTypeID v47 = &v52;
          id v46 = v5;
          int v48 = a2;
          int v32 = (void (**)(void))MEMORY[0x18530F950](v45);
          if ([(id)__LSDefaultsGetSharedInstance() isServer])
          {
            id v33 = +[LSDBExecutionContext sharedServerInstance]();
            v43[0] = MEMORY[0x1E4F143A8];
            v43[1] = 3221225472;
            v43[2] = ___LSUpdateContainerState_block_invoke_2;
            uint64_t v43[3] = &unk_1E522D260;
            int v44 = v32;
            -[LSDBExecutionContext performAsyncWrite:]((uint64_t)v33, v43);
          }
          else
          {
            v32[2](v32);
          }
        }
      }
      else
      {
        v42[0] = (void (*)(void, void))MEMORY[0x1E4F143A8];
        v42[1] = (void (*)(void, void))3221225472;
        v42[2] = (void (*)(void, void))___LSUpdateContainerState_block_invoke_3;
        v42[3] = (void (*)(void, void))&unk_1E522BA78;
        v42[4] = (void (*)(void, void))&v60;
        id v9 = +[_LSDService synchronousXPCProxyWithErrorHandler:]((uint64_t)_LSDModifyService, v42);
        v41[0] = MEMORY[0x1E4F143A8];
        v41[1] = 3221225472;
        void v41[2] = ___LSUpdateContainerState_block_invoke_4;
        v41[3] = &unk_1E5230658;
        v41[4] = &v60;
        v41[5] = &v52;
        [v9 updateContainerUnit:a2 completionHandler:v41];
      }
    }
    else
    {
      *((_DWORD *)v61 + 6) = 0;
    }
    if (a3 && !*((_DWORD *)v61 + 6))
    {
      int v34 = *((_DWORD *)v53 + 16);
      *(_OWORD *)a3 = *((_OWORD *)v53 + 3);
      *(_DWORD *)(a3 + 16) = v34;
    }
    _Block_object_dispose(&v52, 8);
  }
  else
  {
    *((_DWORD *)v61 + 6) = -10817;
  }
  uint64_t v35 = *((unsigned int *)v61 + 6);
  _Block_object_dispose(&v60, 8);

  return v35;
}

void sub_182A9D308(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v4 - 128), 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__196(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[4].n128_u32[0] = a2[4].n128_u32[0];
  a1[3] = result;
  return result;
}

void sub_182A9D49C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182A9D578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t _LSRegisterTypeDeclarationsForBundle(void *a1, uint64_t a2, uint64_t a3, const void *a4, void *a5)
{
  id v9 = a1;
  id v10 = a5;
  if (a3) {
    int v11 = *(_DWORD *)(a3 + 472);
  }
  else {
    int v11 = 0;
  }
  uint64_t v12 = _LSRegisterTypeDeclarationsCommon(v9, a2, v11, a4, v10);

  return v12;
}

void sub_182A9D618(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSRegisterTypeDeclarationsCommon(void *a1, uint64_t a2, int a3, const void *a4, void *a5)
{
  id v8 = a1;
  id v9 = a5;
  uint64_t v10 = 0;
  if (v8 && a3 && a4)
  {
    CFTypeID v11 = CFGetTypeID(a4);
    if (v11 == CFArrayGetTypeID())
    {
      CFIndex Count = CFArrayGetCount((CFArrayRef)a4);
      if (Count < 1)
      {
        uint64_t v10 = 0;
      }
      else
      {
        for (CFIndex i = 0; i != Count; ++i)
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a4, i);
          CFTypeID TypeID = CFDictionaryGetTypeID();
          if (ValueAtIndex && TypeID) {
            CFGetTypeID(ValueAtIndex);
          }
          uint64_t v10 = _UTTypeAddWithDeclarationDictionary();
          if (!v10) {
            _CSArrayAppendValue();
          }
        }
      }
    }
    else
    {
      uint64_t v10 = 4294956479;
    }
  }

  return v10;
}

void sub_182A9D774(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSRegisterTypeDeclarationsForPlugin(void *a1, uint64_t a2, uint64_t a3, const void *a4, void *a5)
{
  id v9 = a1;
  id v10 = a5;
  if (a3) {
    int v11 = *(_DWORD *)(a3 + 232);
  }
  else {
    int v11 = 0;
  }
  uint64_t v12 = _LSRegisterTypeDeclarationsCommon(v9, a2, v11, a4, v10);

  return v12;
}

void sub_182A9D818(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSRegisterDocumentTypes(uint64_t a1)
{
  CFAllocatorRef v1 = (void *)MEMORY[0x1F4188790](a1);
  int v3 = v2;
  id v5 = v4;
  CFArrayRef v7 = v6;
  uint64_t v129 = v8;
  unsigned int v122 = v9;
  uint64_t v148 = *MEMORY[0x1E4F143B8];
  v125 = v1;
  id v124 = v5;
  if (v7 && (theArray = v7, CFTypeID v10 = CFGetTypeID(v7), v10 == CFArrayGetTypeID()))
  {
    CFIndex Count = CFArrayGetCount(v7);
    _LSBindingListBufferInit((uint64_t)v125, v130);
    if (Count >= 1)
    {
      CFIndex v12 = 0;
      int v123 = v3 | 0x20;
      int v117 = v3 | 0x820;
      v120 = (void *)*MEMORY[0x1E4F1CC98];
      key = (void *)*MEMORY[0x1E4F1CC90];
      v116 = (void *)*MEMORY[0x1E4F1CFF8];
      id v113 = (void *)*MEMORY[0x1E4F1CC88];
      id v114 = (void *)*MEMORY[0x1E4F1CC80];
      *(void *)&long long v11 = 138412290;
      long long v112 = v11;
      do
      {
        CFIndex idx = v12;
        CFDictionaryRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(theArray, v12);
        CFTypeID TypeID = CFDictionaryGetTypeID();
        if (ValueAtIndex && (!TypeID || CFGetTypeID(ValueAtIndex) == TypeID))
        {
          int v15 = (void *)MEMORY[0x18530F680]();
          CFArrayRef v128 = [MEMORY[0x1E4F1CA48] array];
          uint64_t v16 = objc_opt_class();
          uint64_t v17 = [ValueAtIndex objectForKey:@"LSHandlerRank"];
          id v18 = (void *)v17;
          if (v16 && v17 && (objc_opt_isKindOfClass() & 1) == 0)
          {

            id v18 = 0;
          }
          uint64_t v19 = objc_opt_class();
          uint64_t v20 = [ValueAtIndex objectForKey:@"LSItemContentTypes"];
          BOOL v21 = (void *)v20;
          if (v19 && v20 && (objc_opt_isKindOfClass() & 1) == 0)
          {

            BOOL v21 = 0;
          }
          if (objc_msgSend(v18, "isEqualToString:", @"Owner", v112) && objc_msgSend(v21, "count"))
          {
            uint64_t v22 = [MEMORY[0x1E4F1CA48] array];
            uint64_t v23 = [MEMORY[0x1E4F1CA48] array];
            v126 = v15;
            long long v134 = 0u;
            long long v133 = 0u;
            long long v132 = 0u;
            long long v131 = 0u;
            id v24 = v21;
            uint64_t v25 = [v24 countByEnumeratingWithState:&v131 objects:&v136 count:16];
            if (v25)
            {
              uint64_t v26 = *(void *)v132;
              do
              {
                for (uint64_t i = 0; i != v25; ++i)
                {
                  if (*(void *)v132 != v26) {
                    objc_enumerationMutation(v24);
                  }
                  uint64_t v28 = *(void *)(*((void *)&v131 + 1) + 8 * i);
                  if (_NSIsNSString())
                  {
                    if (_UTTypeIsWildcard(v28)) {
                      uint64_t v29 = (void *)v22;
                    }
                    else {
                      uint64_t v29 = (void *)v23;
                    }
                    [v29 addObject:v28];
                  }
                }
                uint64_t v25 = [v24 countByEnumeratingWithState:&v131 objects:&v136 count:16];
              }
              while (v25);
            }

            int v15 = v126;
            uint64_t v30 = (void *)v23;
            char v31 = (void *)v22;
          }
          else
          {
            uint64_t v30 = 0;
            char v31 = 0;
          }
          if ([v31 count])
          {
            int v34 = _LSDefaultLog();
            if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
            {
              LODWORD(v145) = v112;
              *(void *)((char *)&v145 + 4) = v31;
              _os_log_debug_impl(&dword_182959000, v34, OS_LOG_TYPE_DEBUG, "Decomposeing docuemnt claim for types: %@", (uint8_t *)&v145, 0xCu);
            }

            uint64_t v35 = (void *)[ValueAtIndex mutableCopy];
            [v35 setObject:v31 forKey:@"LSItemContentTypes"];
            [v35 setObject:@"Default" forKey:@"LSHandlerRank"];
            [(__CFArray *)v128 addObject:v35];
            if ([v30 count])
            {
              uint64_t v36 = (void *)[ValueAtIndex mutableCopy];
              [v36 setObject:v30 forKey:@"LSItemContentTypes"];
              [(__CFArray *)v128 addObject:v36];
            }
          }
          else
          {
            [(__CFArray *)v128 addObject:ValueAtIndex];
          }

          if (v128)
          {
            for (CFIndex j = 0; ; ++j)
            {
              if (j >= CFArrayGetCount(v128))
              {
                CFRelease(v128);
                goto LABEL_197;
              }
              uint64_t v38 = CFArrayGetValueAtIndex(v128, j);
              CFTypeID v39 = CFDictionaryGetTypeID();
              if (v38 && v39 && CFGetTypeID(v38) != v39) {
                uint64_t v38 = 0;
              }
              unsigned int v40 = v125;
              id v127 = v124;
              uint64_t v135 = 0;
              uint64_t v140 = 0;
              long long v139 = 0u;
              long long v138 = 0u;
              long long v137 = 0u;
              long long v136 = 0u;
              *(void *)&long long v145 = 0;
              *((void *)&v145 + 1) = &v145;
              uint64_t v146 = 0x2020000000;
              char v147 = 0;
              uint64_t v41 = *(void *)(v129 + 172);
              if (*(_DWORD *)(v129 + 20) == 6 && (v41 & 0x200000000) == 0)
              {
                CFTypeID v42 = _LSRegistrationLog();
                if (!os_log_type_enabled(v42, OS_LOG_TYPE_INFO)) {
                  goto LABEL_95;
                }
                *(_DWORD *)LSVersionNumber buf = 134217984;
                uint64_t v142 = v122;
                uint64_t v43 = v42;
                os_log_type_t v44 = OS_LOG_TYPE_INFO;
                long long v45 = "Skipping document claims for bundle %llu because it is Mac Catalyst but does not support open-in-place";
LABEL_93:
                uint32_t v68 = 12;
                goto LABEL_94;
              }
              if ((v41 & 0x1000000000000000) != 0)
              {
                CFTypeID v42 = _LSDefaultLog();
                if (!os_log_type_enabled(v42, OS_LOG_TYPE_INFO)) {
                  goto LABEL_95;
                }
                *(_DWORD *)LSVersionNumber buf = 134217984;
                uint64_t v142 = v122;
                uint64_t v43 = v42;
                os_log_type_t v44 = OS_LOG_TYPE_INFO;
                long long v45 = "Skipping document claims for bundle %llu because it is an App Clip";
                goto LABEL_93;
              }
              if (v38)
              {
                CFTypeID v46 = CFGetTypeID(v38);
                if (v46 == CFDictionaryGetTypeID())
                {
                  DWORD2(v136) = v123;
                  int v47 = v123;
                  if (_LSGetBooleanFromDict((const __CFDictionary *)v38, @"LSDefaultShareModeCollaboration"))
                  {
                    int v47 = v117;
                    DWORD2(v136) = v117;
                  }
                  if (_LSGetBooleanFromDict((const __CFDictionary *)v38, @"LSTypeIsPackage"))
                  {
                    v47 |= 8u;
                    DWORD2(v136) = v47;
                  }
                  if (_LSGetBooleanFromDict((const __CFDictionary *)v38, @"LSIsAppleDefaultForType"))
                  {
                    v47 |= 1u;
                    DWORD2(v136) = v47;
                    *(unsigned char *)(*((void *)&v145 + 1) + 24) = 1;
                  }
                  if ((*(unsigned char *)(v129 + 164) & 0x10) != 0
                    || (int v48 = (void *)_CSStringCopyCFString(),
                        int v49 = [v48 isEqualToString:@"System"],
                        v48,
                        v49))
                  {
                    if (_LSGetBooleanFromDict((const __CFDictionary *)v38, @"LSIsAppleDefaultNoOverrideForType"))
                    {
                      v47 |= 3u;
                      DWORD2(v136) = v47;
                      *(unsigned char *)(*((void *)&v145 + 1) + 24) = 1;
                    }
                  }
                  if (*(unsigned char *)(v129 + 164)) {
                    DWORD2(v136) = v47 | 4;
                  }
                  WORD6(v136) = _LSGetHandlerRankFromDictKey((const __CFDictionary *)v38, v50);
                  int v51 = _LSGetRoleFromDictKey((const __CFDictionary *)v38, v120);
                  LOBYTE(v52) = v51;
                  HIWORD(v136) = v51;
                  int v53 = *(_DWORD *)(v129 + 168);
                  if (!v51)
                  {
                    if (v53 == 2) {
                      __int16 v52 = 2;
                    }
                    else {
                      __int16 v52 = 1;
                    }
                    HIWORD(v136) = v52;
                  }
                  if (v53 == 2 || (v52 & 0x11) != 0) {
                    break;
                  }
                }
              }
LABEL_96:
              _Block_object_dispose(&v145, 8);

              _LSBindingListBufferReset(v40, (uint64_t)v130);
            }
            CFTypeID v54 = CFStringGetTypeID();
            Value = (void *)CFDictionaryGetValue((CFDictionaryRef)v38, key);
            uint64_t v56 = Value;
            if (Value && CFGetTypeID(Value) == v54)
            {
              id v57 = v56;
              long long v58 = [v127 objectForKeyedSubscript:v57];
              DWORD1(v137) = LaunchServices::LocalizedString::Add(v40, v58, v57);
            }
            if (!_LSGetBooleanFromDict((const __CFDictionary *)v38, @"CFBundleTypeIconSystemGenerated"))
            {
              CFArrayRef v59 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v38, @"CFBundleTypeIconFiles");
              CFTypeID v60 = CFArrayGetTypeID();
              if (v59 && (!v60 || CFGetTypeID(v59) == v60))
              {
                CFIndex v61 = CFArrayGetCount(v59);
                if (v61 >= 1)
                {
                  int v62 = 0;
                  CFIndex v63 = 0;
                  do
                  {
                    CFStringRef v64 = (const __CFString *)CFArrayGetValueAtIndex(v59, v63);
                    CFTypeID v65 = CFStringGetTypeID();
                    if (v64 && (!v65 || CFGetTypeID(v64) == v65))
                    {
                      int StringForCFString = _LSDatabaseCreateStringForCFString(v40, v64, 0);
                      CFStringRef v67 = (char *)&v136 + 4 * v62++;
                      *((_DWORD *)v67 + 7) = StringForCFString;
                    }
                    ++v63;
                  }
                  while (v63 < v61 && v62 < 8);
                }
              }
              else if (v113)
              {
                CFStringRef v69 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v38, v113);
                CFTypeID v70 = CFStringGetTypeID();
                if (v69 && (!v70 || CFGetTypeID(v69) == v70)) {
                  HIDWORD(v137) = _LSDatabaseCreateStringForCFString(v40, v69, 0);
                }
              }
              else
              {
                CFStringGetTypeID();
              }
              CFStringRef v71 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v38, @"LSIconName");
              CFTypeID v72 = CFStringGetTypeID();
              if (v71 && (!v72 || CFGetTypeID(v71) == v72)) {
                HIDWORD(v139) = _LSDatabaseCreateStringForCFString(v40, v71, 0);
              }
            }
            if (_LSGetBooleanFromDict((const __CFDictionary *)v38, @"NSResolvesUbiquitousConflicts")|| CFDictionaryContainsKey((CFDictionaryRef)v38, @"NSDocumentClass"))
            {
              DWORD2(v136) |= 0x200u;
            }
            CFStringRef v73 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v38, @"_LSBundleLibraryDelegate");
            CFTypeID v74 = CFStringGetTypeID();
            if (v73 && v74 && CFGetTypeID(v73) != v74) {
              CFStringRef v73 = 0;
            }
            LODWORD(v140) = _LSDatabaseCreateStringForCFString(v40, v73, 0);
            if (!v140) {
              goto LABEL_126;
            }
            if (v116)
            {
              CFStringRef v75 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v38, v116);
              CFTypeID v76 = CFStringGetTypeID();
              if (v75 && (!v76 || CFGetTypeID(v75) == v76))
              {
                int v77 = DWORD2(v136);
                CFIndex Length = CFStringGetLength(v75);
                if (Length > CFStringGetLength(@"com.apple."))
                {
                  v149.length = CFStringGetLength(@"com.apple.");
                  v149.locatioCFIndex n = 0;
                  if (CFStringCompareWithOptions(v75, @"com.apple.", v149, 1uLL) == kCFCompareEqualTo)
                  {
                    unsigned int v79 = v77 | 4;
                    goto LABEL_125;
                  }
                }
LABEL_124:
                unsigned int v79 = v77 & 0xFFFFFFFB;
LABEL_125:
                DWORD2(v136) = v79;
LABEL_126:
                LODWORD(v137) = v122;
                HIDWORD(v140) = 0;
                CFStringRef v80 = CFDictionaryGetValue((CFDictionaryRef)v38, @"LSItemContentTypes");
                CFTypeID v81 = CFArrayGetTypeID();
                if (v80 && (!v81 || CFGetTypeID(v80) == v81))
                {
                  CFTypeID v82 = CFGetTypeID(v80);
                  if (v82 == CFArrayGetTypeID())
                  {
                    CFIndex v83 = CFArrayGetCount((CFArrayRef)v80);
                    if (v83 >= 1)
                    {
                      int v84 = 0;
                      for (CFIndex k = 0; k != v83; ++k)
                      {
                        CFStringRef v86 = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v80, k);
                        CFTypeID v87 = CFStringGetTypeID();
                        if (v86 && (!v87 || CFGetTypeID(v86) == v87))
                        {
                          CFTypeID v88 = CFStringGetTypeID();
                          if (v88 == CFGetTypeID(v86)
                            && ((v52 & 8) == 0 || !UTTypeEqual(v86, @"com.apple.application")))
                          {
                            uint64_t active = _UTGetActiveTypeForCFStringIdentifier(v40, v86, 0);
                            if (active && (*(unsigned char *)(active + 9) & 2) != 0)
                            {
                              DWORD2(v136) |= 0x400u;
                              int v84 = 1;
                            }
                            unsigned int v90 = _LSDatabaseCreateStringForCFString(v40, v86, 1);
                            if (v90)
                            {
                              if (!_LSBindingListBufferAppend(v40, v130, v125[58], v90)) {
                                goto LABEL_96;
                              }
                              _CSStringRelease();
                            }
                          }
                        }
                      }
                      goto LABEL_186;
                    }
                  }
                  goto LABEL_188;
                }
                if (*(_DWORD *)(v129 + 20) >= 2u)
                {
                  long long v100 = _LSDefaultLog();
                  if (os_log_type_enabled(v100, OS_LOG_TYPE_INFO))
                  {
                    uint64_t v101 = *(unsigned int *)(v129 + 20);
                    *(_DWORD *)LSVersionNumber buf = 134218240;
                    uint64_t v142 = v122;
                    __int16 v143 = 2048;
                    uint64_t v144 = v101;
                    _os_log_impl(&dword_182959000, v100, OS_LOG_TYPE_INFO, "Skipping legacy claim registration for bundle %llu because it's the wrong platform (is %llu)", buf, 0x16u);
                  }

                  goto LABEL_188;
                }
                if (v114)
                {
                  CFArrayRef v91 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v38, v114);
                  CFTypeID v92 = CFArrayGetTypeID();
                  if (v91 && (!v92 || CFGetTypeID(v91) == v92))
                  {
                    CFIndex v93 = CFArrayGetCount(v91);
                    if (v93 >= 1)
                    {
                      int v84 = 0;
                      for (CFIndex m = 0; m != v93; ++m)
                      {
                        CFStringRef v95 = (const __CFString *)CFArrayGetValueAtIndex(v91, m);
                        CFTypeID v96 = CFStringGetTypeID();
                        if (v95 && (!v96 || CFGetTypeID(v95) == v96))
                        {
                          CFTypeID v97 = CFStringGetTypeID();
                          if (v97 == CFGetTypeID(v95) && (CFStringCompare(v95, @"app", 1uLL) || (v52 & 8) == 0))
                          {
                            unsigned int v98 = _LSDatabaseCreateStringForCFString(v40, v95, 1);
                            if (v98)
                            {
                              if (!_LSBindingListBufferAppend(v40, v130, v125[84], v98)) {
                                goto LABEL_96;
                              }
                              _CSStringRelease();
                            }
                            if (CFStringCompare(v95, @"*", 0))
                            {
                              if (*(unsigned char *)(*((void *)&v145 + 1) + 24))
                              {
                                *(void *)&long long v131 = MEMORY[0x1E4F143A8];
                                *((void *)&v131 + 1) = 3221225472;
                                *(void *)&long long v132 = ___ZL23_LSRegisterDocumentTypeP11_LSDatabasejPK12LSBundleDataPK14__CFDictionaryP12NSDictionaryIP8NSStringPS7_IS9_S9_EEjP19LSBindingListBuffer_block_invoke;
                                *((void *)&v132 + 1) = &unk_1E522C0B8;
                                long long v99 = v40;
                                *(void *)&long long v134 = v130;
                                *(void *)&long long v133 = v99;
                                *((void *)&v133 + 1) = &v145;
                                _CSStringBindingEnumerate();
                              }
                            }
                            else
                            {
                              DWORD2(v136) |= 0x10u;
                              int v84 = 1;
                            }
                          }
                        }
                      }
LABEL_173:
                      CFArrayRef v102 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v38, @"CFBundleTypeMIMETypes");
                      CFTypeID v103 = CFArrayGetTypeID();
                      if (v102 && (!v103 || CFGetTypeID(v102) == v103))
                      {
                        CFIndex v104 = CFArrayGetCount(v102);
                        if (v104 >= 1)
                        {
                          for (CFIndex n = 0; n != v104; ++n)
                          {
                            CFStringRef v106 = (const __CFString *)CFArrayGetValueAtIndex(v102, n);
                            CFTypeID v107 = CFStringGetTypeID();
                            if (v106 && v107 && CFGetTypeID(v106) != v107) {
                              CFStringRef v106 = 0;
                            }
                            unsigned int v108 = _LSDatabaseCreateStringForCFString(v40, v106, 1);
                            if (v108)
                            {
                              if (!_LSBindingListBufferAppend(v40, v130, v125[110], v108)) {
                                goto LABEL_96;
                              }
                              _CSStringRelease();
                            }
                          }
                        }
                      }
LABEL_186:
                      if (v84)
                      {
                        _LSBundleGet(v40, v122);
                        _LSBundleSetFlags();
                      }
LABEL_188:
                      int v109 = _LSBindingListCreate(v40, v130, &v135);
                      if (v109
                        || (HIDWORD(v140) = v135, (int v109 = _LSClaimAdd(v40, (uint64_t)&v136, (_DWORD *)&v135 + 1)) != 0)
                        || (_CSArrayAppendValue(), v135)
                        && !_LSBundleDataIsInUnsupportedLocation((uint64_t)v40, v129)
                        && !_LSBundleDataGetUnsupportedFormatFlag()
                        && (int v109 = _LSBindingListActivate()) != 0)
                      {
                        CFTypeID v42 = _LSRegistrationLog();
                        if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)LSVersionNumber buf = 67109120;
                          LODWORD(v142) = v109;
                          uint64_t v43 = v42;
                          os_log_type_t v44 = OS_LOG_TYPE_ERROR;
                          long long v45 = "Failed to register document type with error code: %d";
                          uint32_t v68 = 8;
LABEL_94:
                          _os_log_impl(&dword_182959000, v43, v44, v45, buf, v68);
                        }
LABEL_95:

                        goto LABEL_96;
                      }
                      goto LABEL_96;
                    }
                  }
                }
                else
                {
                  CFArrayGetTypeID();
                }
                int v84 = 0;
                goto LABEL_173;
              }
            }
            else
            {
              CFStringGetTypeID();
            }
            int v77 = DWORD2(v136);
            goto LABEL_124;
          }
        }
        else
        {
          int v32 = _LSRegistrationLog();
          if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
          {
            id v33 = CFArrayGetValueAtIndex(theArray, idx);
            LODWORD(v136) = 138477827;
            *(void *)((char *)&v136 + 4) = v33;
            _os_log_impl(&dword_182959000, v32, OS_LOG_TYPE_ERROR, "Unexpected value in document types array, not dictionary as expected, but %{private}@", (uint8_t *)&v136, 0xCu);
          }
        }
LABEL_197:
        CFIndex v12 = idx + 1;
      }
      while (idx + 1 != Count);
    }
    uint64_t v110 = 0;
  }
  else
  {
    uint64_t v110 = 4294956479;
  }

  return v110;
}

void sub_182A9E9D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,void *a43)
{
  _Unwind_Resume(a1);
}

uint64_t _LSRegisterDefaultAppsClaims(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v8 = a4;
  unsigned int v9 = (const void *)LSCopyDefaultAppsClaimForBundle(v7, a2, a3, v8);
  if (v9)
  {
    CFTypeID v10 = _LSDefaultLog();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)LSVersionNumber buf = 138412290;
      int v15 = v9;
      _os_log_impl(&dword_182959000, v10, OS_LOG_TYPE_DEFAULT, "Registering synthesized claim for default app categories: %@", buf, 0xCu);
    }

    id v13 = v9;
    [MEMORY[0x1E4F1C978] arrayWithObjects:&v13 count:1];
    uint64_t v11 = _LSRegisterDocumentTypes((uint64_t)v7);
    CFRelease(v9);
  }
  else
  {
    uint64_t v11 = 0;
  }

  return v11;
}

void sub_182A9EC78(_Unwind_Exception *a1)
{
  CFRelease(v3);

  _Unwind_Resume(a1);
}

uint64_t _LSRegisterURLTypes(uint64_t a1)
{
  CFAllocatorRef v1 = (void *)MEMORY[0x1F4188790](a1);
  int v3 = v2;
  uint64_t v5 = v4;
  unsigned int v56 = v6;
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  id v7 = v1;
  id v8 = v7;
  int v60 = 0;
  uint64_t v58 = v5;
  if ((*(unsigned char *)(v5 + 179) & 0x10) == 0)
  {
    _LSBindingListBufferInit((uint64_t)v7, v61);
    CFTypeRef cf = (CFTypeRef)_CSStringCopyCFString();
    if (v3)
    {
      CFTypeID v9 = CFGetTypeID(v3);
      if (v9 != CFArrayGetTypeID())
      {
        uint64_t v11 = 4294956479;
LABEL_95:
        if (cf) {
          CFRelease(cf);
        }
        goto LABEL_97;
      }
      CFIndex Count = CFArrayGetCount((CFArrayRef)v3);
      if (Count >= 1)
      {
        CFIndex v57 = Count;
        uint64_t v11 = 0;
        CFIndex v12 = 0;
        CFTypeID v55 = (void *)*MEMORY[0x1E4F1CC98];
        key = (void *)*MEMORY[0x1E4F1CCA8];
        id v50 = (void *)*MEMORY[0x1E4F1CCA0];
        __int16 v52 = (void *)*MEMORY[0x1E4F1CFF8];
        int v53 = (void *)*MEMORY[0x1E4F1CCB0];
        while (1)
        {
          uint64_t v66 = 0;
          long long v64 = 0u;
          long long v65 = 0u;
          long long buf = 0u;
          long long v63 = 0u;
          int v59 = 0;
          id v13 = v3;
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v3, v12);
          CFTypeID TypeID = CFDictionaryGetTypeID();
          if (ValueAtIndex && (!TypeID || CFGetTypeID(ValueAtIndex) == TypeID))
          {
            CFTypeID v16 = CFGetTypeID(ValueAtIndex);
            if (v16 == CFDictionaryGetTypeID())
            {
              DWORD2(buf) |= 0x40u;
              if (_LSGetBooleanFromDict((const __CFDictionary *)ValueAtIndex, @"LSIsAppleDefaultForScheme"))DWORD2(buf) |= 1u; {
              if (*(unsigned char *)(v58 + 164))
              }
                DWORD2(buf) |= 4u;
              WORD6(buf) = _LSGetHandlerRankFromDictKey((const __CFDictionary *)ValueAtIndex, v17);
              int v18 = _LSGetRoleFromDictKey((const __CFDictionary *)ValueAtIndex, v55);
              __int16 v19 = v18 ? v18 : 2;
              HIWORD(buf) = v19;
              int v20 = *(_DWORD *)(v58 + 168);
              if (v20 == 2 || v20 == 14 || v19 == 1)
              {
                Value = (void *)CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, @"CFBundleRequiredCapabilities");
                CFTypeID v22 = CFArrayGetTypeID();
                if (!Value || v22 && CFGetTypeID(Value) != v22)
                {
                  Value = (void *)CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, @"SBRequiredCapabilities");
                  CFTypeID v23 = CFArrayGetTypeID();
                  if (!Value || v23 && CFGetTypeID(Value) != v23) {
                    goto LABEL_29;
                  }
                }
                CFTypeID v24 = CFGetTypeID(Value);
                if (v24 != CFArrayGetTypeID()) {
                  goto LABEL_29;
                }
                DWORD2(v63) = _LSDatabaseCreateStringArray(v8, Value, 0, 0);
                if (DWORD2(v63))
                {
                  uint64_t v11 = 0;
LABEL_29:
                  CFTypeID v25 = CFStringGetTypeID();
                  uint64_t v26 = (void *)CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, key);
                  uint64_t v27 = v26;
                  if (v26 && CFGetTypeID(v26) == v25)
                  {
                    id v28 = v27;
                    DWORD1(v63) = LaunchServices::LocalizedString::Add(v8, MEMORY[0x1E4F1CC08], v28);
                  }
                  if (!_LSGetBooleanFromDict((const __CFDictionary *)ValueAtIndex, @"CFBundleTypeIconSystemGenerated"))
                  {
                    CFStringRef v29 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, @"_LSIconPath");
                    CFTypeID v30 = CFStringGetTypeID();
                    if (v29 && (!v30 || CFGetTypeID(v29) == v30))
                    {
                      CFTypeID v31 = CFStringGetTypeID();
                      if (v31 == CFGetTypeID(v29))
                      {
                        DWORD2(buf) |= 0x1000u;
                        goto LABEL_45;
                      }
                    }
                    if (v50)
                    {
                      CFStringRef v29 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, v50);
                      CFTypeID v32 = CFStringGetTypeID();
                      if (!v29 || !v32 || CFGetTypeID(v29) == v32)
                      {
LABEL_45:
                        HIDWORD(v63) = _LSDatabaseCreateStringForCFString(v8, v29, 0);
                        goto LABEL_46;
                      }
                    }
                    else
                    {
                      CFStringGetTypeID();
                    }
                    CFStringRef v29 = 0;
                    goto LABEL_45;
                  }
LABEL_46:
                  CFStringRef v33 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, @"_LSBundleLibraryDelegate");
                  CFTypeID v34 = CFStringGetTypeID();
                  if (v33 && v34 && CFGetTypeID(v33) != v34) {
                    CFStringRef v33 = 0;
                  }
                  LODWORD(v66) = _LSDatabaseCreateStringForCFString(v8, v33, 0);
                  if (!v66) {
                    goto LABEL_62;
                  }
                  if (v52)
                  {
                    CFStringRef v35 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, v52);
                    CFTypeID v36 = CFStringGetTypeID();
                    if (v35 && (!v36 || CFGetTypeID(v35) == v36))
                    {
                      int v37 = DWORD2(buf);
                      CFIndex Length = CFStringGetLength(v35);
                      if (Length > CFStringGetLength(@"com.apple."))
                      {
                        v68.length = CFStringGetLength(@"com.apple.");
                        v68.locatioCFIndex n = 0;
                        if (CFStringCompareWithOptions(v35, @"com.apple.", v68, 1uLL) == kCFCompareEqualTo)
                        {
                          unsigned int v39 = v37 | 4;
                          goto LABEL_61;
                        }
                      }
LABEL_60:
                      unsigned int v39 = v37 & 0xFFFFFFFB;
LABEL_61:
                      DWORD2(buf) = v39;
LABEL_62:
                      LODWORD(v63) = v56;
                      HIDWORD(v66) = 0;
                      if (!_LSGetBooleanFromDict((const __CFDictionary *)ValueAtIndex, @"CFBundleURLIsPrivate")|| (char v40 = BYTE8(buf), DWORD2(buf) |= 0x80u, (v40 & 4) != 0))
                      {
                        if (_LSGetBooleanFromDict((const __CFDictionary *)ValueAtIndex, @"CFBundleURLAlwaysAvailable"))DWORD2(buf) |= 0x100u; {
                        if (v53)
                        }
                        {
                          CFArrayRef v41 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, v53);
                          CFTypeID v42 = CFArrayGetTypeID();
                          if (v41 && (!v42 || CFGetTypeID(v41) == v42))
                          {
                            CFIndex v43 = CFArrayGetCount(v41);
                            if (v43 >= 1)
                            {
                              for (CFIndex i = 0; i != v43; ++i)
                              {
                                CFStringRef v45 = (const __CFString *)CFArrayGetValueAtIndex(v41, i);
                                CFTypeID v46 = CFStringGetTypeID();
                                if (v45 && (!v46 || CFGetTypeID(v45) == v46))
                                {
                                  unsigned int StringForCFString = _LSDatabaseCreateStringForCFString(v8, v45, 1);
                                  if (StringForCFString)
                                  {
                                    if (!_LSBindingListBufferAppend(v8, v61, v8[188], StringForCFString)) {
                                      goto LABEL_87;
                                    }
                                    _CSStringRelease();
                                  }
                                }
                              }
                            }
                          }
                        }
                        else
                        {
                          CFArrayGetTypeID();
                        }
                        uint64_t v11 = _LSBindingListCreate(v8, v61, &v59);
                        if (!v11)
                        {
                          HIDWORD(v66) = v59;
                          uint64_t v11 = _LSClaimAdd(v8, (uint64_t)&buf, &v60);
                          if (!v11)
                          {
                            _CSArrayAppendValue();
                            if (!v59
                              || _LSBundleDataIsInUnsupportedLocation((uint64_t)v8, v58)
                              || _LSBundleDataGetUnsupportedFormatFlag())
                            {
                              uint64_t v11 = 0;
                            }
                            else
                            {
                              uint64_t v11 = _LSBindingListActivate();
                            }
                          }
                        }
                      }
                      goto LABEL_87;
                    }
                  }
                  else
                  {
                    CFStringGetTypeID();
                  }
                  int v37 = DWORD2(buf);
                  goto LABEL_60;
                }
                uint64_t v11 = 4294957803;
              }
            }
          }
LABEL_87:
          _LSBindingListBufferReset(v8, (uint64_t)v61);
          ++v12;
          int v3 = v13;
          if (v12 == v57) {
            goto LABEL_95;
          }
        }
      }
    }
    uint64_t v11 = 0;
    goto LABEL_95;
  }
  int v48 = _LSDefaultLog();
  if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = v56;
    _os_log_impl(&dword_182959000, v48, OS_LOG_TYPE_INFO, "Skipping URL claims for bundle %llu because it is an App Clip", (uint8_t *)&buf, 0xCu);
  }

  uint64_t v11 = 0;
LABEL_97:

  return v11;
}

void sub_182A9F428(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSGetHandlerRankFromDictKey(const __CFDictionary *a1, const void *a2)
{
  if (!a1)
  {
    CFStringGetTypeID();
    return 2;
  }
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a1, @"LSHandlerRank");
  CFTypeID TypeID = CFStringGetTypeID();
  if (!Value || TypeID && CFGetTypeID(Value) != TypeID) {
    return 2;
  }
  CFTypeID v4 = CFGetTypeID(Value);
  if (v4 != CFStringGetTypeID()) {
    return 2;
  }

  return _LSNumericHandlerRankFromHandlerRankString(Value);
}

uint64_t _LSGetRoleFromDictKey(const __CFDictionary *a1, const void *a2)
{
  if (!a1 || !a2)
  {
    CFStringGetTypeID();
    return 0;
  }
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a1, a2);
  CFTypeID TypeID = CFStringGetTypeID();
  if (!Value || TypeID && CFGetTypeID(Value) != TypeID) {
    return 0;
  }
  CFTypeID v4 = CFGetTypeID(Value);
  if (v4 != CFStringGetTypeID()) {
    return 0;
  }
  uint64_t v5 = 1;
  if (CFStringCompare(Value, @"None", 1uLL))
  {
    if (CFStringCompare(Value, @"Viewer", 1uLL))
    {
      if (CFStringCompare(Value, @"Editor", 1uLL))
      {
        if (CFStringCompare(Value, @"Shell", 1uLL))
        {
          if (CFStringCompare(Value, @"MDImporter", 1uLL)) {
            return 32 * (CFStringCompare(Value, @"QLGenerator", 1uLL) == kCFCompareEqualTo);
          }
          else {
            return 16;
          }
        }
        else
        {
          return 8;
        }
      }
      else
      {
        return 4;
      }
    }
    else
    {
      return 2;
    }
  }
  return v5;
}

uint64_t _LSRegisterExtensionPoint(void *a1, uint64_t a2, __CFString *a3, uint64_t a4, const __CFDictionary *a5, void *a6)
{
  uint64_t v124 = *MEMORY[0x1E4F143B8];
  id v11 = a1;
  if (![(id)__LSDefaultsGetSharedInstance() hasServer])
  {
    if (![(id)__LSDefaultsGetSharedInstance() isServer])
    {
      uint64_t v12 = 0;
      goto LABEL_98;
    }
    id v64 = v11;
    CFTypeID v87 = 0;
    id v13 = _LSRegistrationLog();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 138413058;
      *(void *)&uint8_t buf[4] = a3;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = a4;
      *(_WORD *)&buf[18] = 2112;
      *(void *)&buf[20] = a6;
      *(_WORD *)&buf[28] = 2112;
      *(void *)&buf[30] = a5;
      _os_log_impl(&dword_182959000, v13, OS_LOG_TYPE_INFO, "Registering extension point: %@ platform: %u declaring framework: %@ SDK: %@", buf, 0x26u);
    }

    long long v65 = v64;
    if (!v64)
    {
      uint64_t v12 = _LSContextInit(&v87);
      long long v65 = v87;
      if (v12)
      {
LABEL_97:

        goto LABEL_98;
      }
    }
    long long v122 = kLSVersionNumberNull;
    long long v123 = *(_OWORD *)algn_182AF9270;
    uint64_t v85 = 0;
    uint64_t v86 = 0;
    long long v120 = 0u;
    long long v121 = 0u;
    if (a5)
    {
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a5, @"NSExtension");
      CFTypeID TypeID = CFDictionaryGetTypeID();
      if (Value && (!TypeID || CFGetTypeID(Value) == TypeID))
      {
        CFDictionaryRef v16 = (const __CFDictionary *)CFDictionaryGetValue(Value, @"NSExtensionAttributes");
        CFTypeID v17 = CFDictionaryGetTypeID();
        if (!v16 || !v17 || CFGetTypeID(v16) == v17)
        {
LABEL_20:
          uint64_t v18 = objc_opt_class();
          uint64_t v19 = [(__CFDictionary *)a5 objectForKey:@"EXExtensionPointIsPublic"];
          int v20 = (void *)v19;
          if (v18 && v19 && (objc_opt_isKindOfClass() & 1) == 0)
          {

            int v20 = 0;
          }
          int log = [v20 BOOLValue];

          uint64_t v21 = objc_opt_class();
          uint64_t v22 = [(__CFDictionary *)a5 objectForKey:@"EXRequiresLegacyInfrastructure"];
          CFTypeID v23 = (void *)v22;
          if (v21 && v22 && (objc_opt_isKindOfClass() & 1) == 0)
          {

            CFTypeID v23 = 0;
          }
          char v24 = [v23 BOOLValue];

          if (v24)
          {
            int v61 = 1;
          }
          else
          {
            uint64_t v25 = objc_opt_class();
            uint64_t v26 = [(__CFDictionary *)a5 objectForKey:@"EXTCCPolicy"];
            uint64_t v27 = (void *)v26;
            if (v25 && v26 && (objc_opt_isKindOfClass() & 1) == 0)
            {

              uint64_t v27 = 0;
            }
            if ([v27 isEqualToString:@"prompt-container-personality"])
            {
              int v28 = 1;
            }
            else if ([v27 isEqualToString:@"prompt-host-personality"])
            {
              int v28 = 2;
            }
            else
            {
              int v28 = 0;
            }
            int v61 = v28;
          }
          if (v16
            && (CFStringRef v29 = (__CFString *)CFDictionaryGetValue(v16, @"NSExtensionPointVersion"),
                CFTypeID v30 = CFStringGetTypeID(),
                v29)
            && (!v30 || CFGetTypeID(v29) == v30))
          {
            _LSGetVersionFromString(v29, buf);
            char v31 = 0;
          }
          else
          {
            CFStringRef v29 = 0;
            memset(buf, 0, 32);
            char v31 = 1;
          }
          long long v122 = *(_OWORD *)buf;
          long long v123 = *(_OWORD *)&buf[16];
          if (!_LSExtensionPointFindWithIdentifier(v65, a3, a4, a2, &v86, &v85) && v86)
          {
            long long v32 = *(_OWORD *)(v85 + 24);
            v119[0] = *(_OWORD *)(v85 + 8);
            v119[1] = v32;
            v118[0] = v122;
            v118[1] = v123;
            if (_LSVersionNumberCompare(v119, v118))
            {
              long long v33 = *(_OWORD *)(v85 + 24);
              v117[0] = *(_OWORD *)(v85 + 8);
              v117[1] = v33;
              v116[0] = v122;
              v116[1] = v123;
              if (_LSVersionNumberCompare(v117, v116) != -1)
              {
                loga = _LSRegistrationLog();
                if (os_log_type_enabled(loga, OS_LOG_TYPE_ERROR))
                {
                  long long v34 = *(_OWORD *)(v85 + 24);
                  v88[0] = *(_OWORD *)(v85 + 8);
                  v88[1] = v34;
                  CFStringRef v35 = _LSVersionNumberGetStringRepresentation(v88);
                  *(_DWORD *)long long buf = 138412802;
                  *(void *)&uint8_t buf[4] = a3;
                  *(_WORD *)&buf[12] = 2112;
                  *(void *)&buf[14] = v29;
                  *(_WORD *)&unsigned char buf[22] = 2112;
                  *(void *)&unsigned char buf[24] = v35;
                  _os_log_impl(&dword_182959000, loga, OS_LOG_TYPE_ERROR, "Not registering extension point %@, it has a lower version (%@) than existing registered extension point with that identifer (%@)", buf, 0x20u);
                }
                uint64_t v12 = 0;
                goto LABEL_95;
              }
            }
            _LSExtensionPointRemove(v65, v86);
          }
          if (!v16
            || (CFStringRef v36 = (const __CFString *)CFDictionaryGetValue(v16, @"NSExtensionPointName"),
                CFTypeID v37 = CFStringGetTypeID(),
                !v36)
            || v37 && CFGetTypeID(v36) != v37)
          {
            uint64_t v38 = _LSRegistrationLog();
            if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long buf = 138412290;
              *(void *)&uint8_t buf[4] = a3;
              _os_log_impl(&dword_182959000, v38, OS_LOG_TYPE_ERROR, "ExtensionPoint %@ does not specify NSExtensionPointName", buf, 0xCu);
            }

            CFStringRef v36 = a3;
          }
          if (!CFEqual(v36, a3))
          {
            unsigned int v39 = _LSRegistrationLog();
            if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long buf = 138412546;
              *(void *)&uint8_t buf[4] = a3;
              *(_WORD *)&buf[12] = 2112;
              *(void *)&buf[14] = v36;
            }
          }
          if ([(__CFString *)a3 hasPrefix:@"com.apple."]) {
            int v40 = log;
          }
          else {
            int v40 = 2;
          }
          int v60 = v40;
          loga = a5;
          int StringForCFString = _LSDatabaseCreateStringForCFString(v65, a3, 0);
          int v41 = _LSDatabaseCreateStringForCFString(v65, v36, 0);
          if (v31) {
            memset(buf, 0, 32);
          }
          else {
            _LSGetVersionFromString(v29, buf);
          }
          long long v120 = *(_OWORD *)buf;
          long long v121 = *(_OWORD *)&buf[16];
          int v42 = _LSPlistAdd((uint64_t)v65, loga);
          uint64_t v58 = [loga objectForKey:@"EXDiscoverFromHiddenApps"];
          unsigned int v43 = [v58 BOOLValue];
          if (a6)
          {
            id v84 = 0;
            LODWORD(a6) = _LSAliasAddURL(v65, a6, &v84);
            id v44 = v84;
            if (v44)
            {
              CFStringRef v45 = _LSRegistrationLog();
              if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)long long buf = 138412546;
                *(void *)&uint8_t buf[4] = a3;
                *(_WORD *)&buf[12] = 2112;
                *(void *)&buf[14] = v44;
                _os_log_impl(&dword_182959000, v45, OS_LOG_TYPE_ERROR, "couldn't set declaring framework of extension point %@: %@", buf, 0x16u);
              }
            }
          }
          long long v106 = v120;
          uint64_t v46 = v43;
          v105[0] = 0;
          v105[1] = StringForCFString;
          long long v107 = v121;
          int v108 = v41;
          int v109 = a4;
          int v110 = v42;
          int v111 = (int)a6;
          int v112 = a2;
          int v113 = v60;
          int v114 = v61;
          uint64_t v115 = v43;
          HIDWORD(v86) = _LSExtensionPointAdd(v65, v105);
          if (!HIDWORD(v86))
          {
            uint64_t v12 = 4294956477;
LABEL_94:

LABEL_95:
            if (!v64) {
              _LSContextDestroy(&v87);
            }
            goto LABEL_97;
          }
          uint64_t v47 = _LSBundleGet(v65, a2);
          if (v47)
          {
            if (*(_DWORD *)(v47 + 484))
            {
              _CSArrayAppendValue();
            }
            else
            {
              LODWORD(v88[0]) = 0;
              LODWORD(v88[0]) = _CSArrayCreate();
              if (LODWORD(v88[0]))
              {
                *(void *)long long buf = 0;
                if (_CSStoreWriteToUnit()) {
                  uint64_t v12 = 0;
                }
                else {
                  uint64_t v12 = _LSGetOSStatusFromNSError(*(void **)buf);
                }

                goto LABEL_86;
              }
            }
          }
          else
          {
            int v48 = _LSRegistrationLog();
            if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long buf = 134218242;
              *(void *)&uint8_t buf[4] = a2;
              *(_WORD *)&buf[12] = 2112;
              *(void *)&buf[14] = a3;
              _os_log_impl(&dword_182959000, v48, OS_LOG_TYPE_ERROR, "Failed to fetch app bundle unit: %llu for extension point: %@", buf, 0x16u);
            }
          }
          uint64_t v12 = 0;
LABEL_86:
          uint64_t v78 = 0;
          unsigned int v79 = &v78;
          uint64_t v80 = 0x3032000000;
          CFTypeID v81 = __Block_byref_object_copy__47;
          CFTypeID v82 = __Block_byref_object_dispose__47;
          id v83 = [MEMORY[0x1E4F1CA80] set];
          uint64_t v72 = 0;
          CFStringRef v73 = &v72;
          uint64_t v74 = 0x3032000000;
          CFStringRef v75 = __Block_byref_object_copy__47;
          CFTypeID v76 = __Block_byref_object_dispose__47;
          id v77 = [MEMORY[0x1E4F1CA60] dictionary];
          *(void *)long long buf = MEMORY[0x1E4F143A8];
          *(void *)&uint8_t buf[8] = 3221225472;
          *(void *)&buf[16] = ___ZL31_LSServerRegisterExtensionPointP11_LSDatabasejPK10__CFStringjPK14__CFDictionaryPK7__CFURL_block_invoke;
          *(void *)&unsigned char buf[24] = &unk_1E52307F0;
          int v92 = 0;
          int v93 = StringForCFString;
          long long v94 = v120;
          long long v95 = v121;
          int v96 = v41;
          int v97 = a4;
          int v98 = v42;
          int v99 = (int)a6;
          int v100 = a2;
          int v101 = v60;
          uint64_t v103 = v46;
          int v102 = v61;
          int v104 = v41;
          unsigned int v90 = &v72;
          CFArrayRef v91 = &v78;
          id v49 = v65;
          *(void *)&uint8_t buf[32] = v49;
          id v50 = (void *)MEMORY[0x18530F950](buf);
          _CSStoreEnumerateUnits();
          int v51 = (void *)v73[5];
          v70[0] = MEMORY[0x1E4F143A8];
          v70[1] = 3221225472;
          void v70[2] = ___ZL31_LSServerRegisterExtensionPointP11_LSDatabasejPK10__CFStringjPK14__CFDictionaryPK7__CFURL_block_invoke_2;
          v70[3] = &unk_1E5230818;
          id v52 = v49;
          id v71 = v52;
          [v51 enumerateKeysAndObjectsUsingBlock:v70];
          long long v68 = 0u;
          long long v69 = 0u;
          long long v66 = 0u;
          long long v67 = 0u;
          id v53 = (id)v79[5];
          uint64_t v54 = [v53 countByEnumeratingWithState:&v66 objects:v88 count:16];
          if (v54)
          {
            uint64_t v55 = *(void *)v67;
            do
            {
              for (uint64_t i = 0; i != v54; ++i)
              {
                if (*(void *)v67 != v55) {
                  objc_enumerationMutation(v53);
                }
                _LSBindableActivate(v52, [*(id *)(*((void *)&v66 + 1) + 8 * i) intValue]);
              }
              uint64_t v54 = [v53 countByEnumeratingWithState:&v66 objects:v88 count:16];
            }
            while (v54);
          }

          _Block_object_dispose(&v72, 8);
          _Block_object_dispose(&v78, 8);

          goto LABEL_94;
        }
      }
    }
    else
    {
      CFDictionaryGetTypeID();
    }
    CFDictionaryRef v16 = 0;
    goto LABEL_20;
  }
  uint64_t v12 = _LSRegisterExtensionPointClient((uint64_t)a3, a4, (uint64_t)a5, (uint64_t)a6);
LABEL_98:

  return v12;
}

void sub_182AA01D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61)
{
  _Unwind_Resume(a1);
}

uint64_t _LSRegisterFrameworkExtensionPointIfNecessary(void *a1, int a2, __CFString *a3, uint64_t a4, const __CFDictionary *a5, void *a6)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v11 = a1;
  uint64_t v12 = v11;
  if (!a2 && a6)
  {
    int v24 = 0;
    uint64_t v23 = 0;
    if (_LSExtensionPointFindWithIdentifier(v11, a3, a4, 0, &v24, &v23)
      || !v23
      || !*(_DWORD *)(v23 + 52))
    {
      goto LABEL_25;
    }
    if (a5)
    {
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a5, @"NSExtension");
      CFTypeID TypeID = CFDictionaryGetTypeID();
      if (Value && (!TypeID || CFGetTypeID(Value) == TypeID))
      {
        CFDictionaryRef v15 = (const __CFDictionary *)CFDictionaryGetValue(Value, @"NSExtensionAttributes");
        CFTypeID v16 = CFDictionaryGetTypeID();
        if (v15)
        {
          if (!v16 || CFGetTypeID(v15) == v16)
          {
            CFTypeID v17 = (__CFString *)CFDictionaryGetValue(v15, @"NSExtensionPointVersion");
            CFTypeID v18 = CFStringGetTypeID();
            if (v17)
            {
              if (!v18 || CFGetTypeID(v17) == v18)
              {
                long long v25 = 0u;
                long long v26 = 0u;
                _LSGetVersionFromString(v17, &v25);
LABEL_22:
                long long v21 = *(_OWORD *)(v23 + 24);
                *(_OWORD *)long long buf = *(_OWORD *)(v23 + 8);
                long long v29 = v21;
                v27[0] = v25;
                v27[1] = v26;
                if (!_LSVersionNumberCompare(buf, v27) && v24)
                {
                  uint64_t v20 = 0;
                  goto LABEL_26;
                }
LABEL_25:
                uint64_t v20 = _LSRegisterExtensionPoint(v12, 0, a3, a4, a5, a6);
                goto LABEL_26;
              }
            }
          }
        }
      }
    }
    else
    {
      CFDictionaryGetTypeID();
    }
    long long v25 = kLSVersionNumberNull;
    long long v26 = *(_OWORD *)algn_182AF9270;
    goto LABEL_22;
  }
  uint64_t v19 = _LSRegistrationLog();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_182959000, v19, OS_LOG_TYPE_ERROR, "No declaringFrameworkURL or parentBundleUnit != nullID, so returning kLSApplicationNotFoundErr", buf, 2u);
  }

  uint64_t v20 = 4294956482;
LABEL_26:

  return v20;
}

void sub_182AA05A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSUnregisterExtensionPoint(void *a1, const __CFString *a2, uint64_t a3, uint64_t a4, __CFString *a5)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v9 = a1;
  if ([(id)__LSDefaultsGetSharedInstance() hasServer])
  {
    uint64_t v10 = _LSUnregisterExtensionPointClient((uint64_t)a2, a3, (uint64_t)a5, a4);
  }
  else if ([(id)__LSDefaultsGetSharedInstance() isServer])
  {
    id v11 = v9;
    CFTypeID v17 = 0;
    uint64_t v12 = v11;
    if (v11 || (uint64_t v10 = _LSContextInit(&v17), v12 = v17, !v10))
    {
      int v16 = 0;
      uint64_t v15 = 0;
      uint64_t v10 = _LSExtensionPointFindWithIdentifier(v12, a2, a3, a4, &v16, &v15);
      if (!v10)
      {
        if (!a5
          || (long long v13 = *(_OWORD *)(v15 + 24),
              v19[0] = *(_OWORD *)(v15 + 8),
              v19[1] = v13,
              _LSGetVersionFromString(a5, v18),
              !_LSVersionNumberCompare(v19, v18)))
        {
          _LSExtensionPointRemove(v12, v16);
        }
      }
      if (!v11) {
        _LSContextDestroy(&v17);
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
  }

  return v10;
}

void sub_182AA0750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t _LSRegisterPlugins(void *a1, int a2, int a3, const __CFDictionary *a4, const void *a5, int a6)
{
  id v148 = a1;
  if (!a4 || (CFIndex Count = CFDictionaryGetCount(a4), Count < 1))
  {
    uint64_t v12 = 0;
    goto LABEL_247;
  }
  CFTypeID v9 = CFGetTypeID(a4);
  if (v9 != CFDictionaryGetTypeID() || a5 && (CFTypeID v10 = CFGetTypeID(a5), v10 != CFDictionaryGetTypeID()))
  {
    uint64_t v12 = 4294956479;
    goto LABEL_247;
  }
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (a5) {
    unint64_t v146 = CFDictionaryGetCount((CFDictionaryRef)a5);
  }
  else {
    unint64_t v146 = 0;
  }
  v126 = Mutable;
  keys = 0;
  uint64_t v154 = 0;
  uint64_t v155 = 0;
  std::vector<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>>::__vallocate[abi:nn180100](&keys, Count);
  CFDictionaryRef theDict = (const __CFDictionary *)a5;
  long long v13 = (char *)v154;
  bzero(v154, 8 * Count);
  uint64_t v154 = &v13[8 * Count];
  values = 0;
  v151 = 0;
  uint64_t v152 = 0;
  std::vector<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>>::__vallocate[abi:nn180100](&values, Count);
  uint64_t v14 = (char *)v151;
  bzero(v151, 8 * Count);
  CFIndex v145 = Count;
  v151 = &v14[8 * Count];
  CFDictionaryGetKeysAndValues(a4, (const void **)keys, (const void **)values);
  unint64_t v15 = 0;
  CFTypeRef cf = 0;
  uint64_t v124 = (void *)*MEMORY[0x1E4F1CC70];
  v125 = (void *)*MEMORY[0x1E4F1CFF8];
  long long v122 = (void *)*MEMORY[0x1E4F1CC48];
  long long v123 = (void *)*MEMORY[0x1E4F1D008];
  long long v121 = (void *)*MEMORY[0x1E4F1CFF0];
  do
  {
    int v16 = values[v15];
    if (v15 >= v146) {
      goto LABEL_20;
    }
    if (theDict && (CFTypeID v17 = keys[v15]) != 0)
    {
      CFDictionaryRef Value = (void *)CFDictionaryGetValue(theDict, v17);
      CFTypeID TypeID = CFDictionaryGetTypeID();
      if (Value && (!TypeID || CFGetTypeID(Value) == TypeID))
      {
        CFTypeRef cf = Value;
        goto LABEL_20;
      }
    }
    else
    {
      CFDictionaryGetTypeID();
    }
    CFTypeRef cf = 0;
LABEL_20:
    uint64_t v20 = (_LSDatabase *)v148;
    uint64_t v21 = _LSBundleGet(v20, a3);
    long long v187 = 0u;
    memset(v188, 0, 48);
    long long v185 = 0u;
    *(_OWORD *)v186 = 0u;
    long long v183 = 0u;
    long long v184 = 0u;
    long long v181 = 0u;
    long long v182 = 0u;
    long long v179 = 0u;
    long long v180 = 0u;
    long long v178 = 0u;
    CFTypeID v22 = CFGetTypeID(v16);
    if (v22 != CFDictionaryGetTypeID()) {
      goto LABEL_240;
    }
    if (cf)
    {
      CFTypeID v23 = CFGetTypeID(cf);
      if (v23 != CFDictionaryGetTypeID())
      {
LABEL_240:
        CFURLRef v47 = 0;
        CFURLRef v30 = 0;
        CFDictionaryRef v33 = 0;
        uint64_t v12 = 4294956479;
        goto LABEL_66;
      }
      CFStringRef v24 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, @"Path");
      CFTypeID v25 = CFStringGetTypeID();
      if (!v24) {
        goto LABEL_63;
      }
      CFTypeID v26 = v25;
      if (v25)
      {
LABEL_29:
        if (CFGetTypeID(v24) != v26) {
          goto LABEL_63;
        }
      }
    }
    else
    {
      if (!v16)
      {
        CFStringGetTypeID();
LABEL_63:
        CFURLRef v47 = 0;
        CFURLRef v30 = 0;
        goto LABEL_64;
      }
      CFStringRef v24 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v16, @"Path");
      CFTypeID v27 = CFStringGetTypeID();
      if (!v24) {
        goto LABEL_63;
      }
      CFTypeID v26 = v27;
      if (v27) {
        goto LABEL_29;
      }
    }
    CFTypeID v28 = CFGetTypeID(v24);
    if (v28 != CFStringGetTypeID()) {
      goto LABEL_63;
    }
    CFURLRef v29 = CFURLCreateWithFileSystemPath(allocator, v24, kCFURLPOSIXPathStyle, 1u);
    CFURLRef v30 = v29;
    if (!v29) {
      goto LABEL_77;
    }
    CFTypeID v31 = CFGetTypeID(v29);
    if (v31 != CFURLGetTypeID()) {
      goto LABEL_77;
    }
    long long v32 = (void *)MEMORY[0x18530F680]();
    objc_msgSend(v16, "_ls_normalizedPluginPlist");
    CFDictionaryRef v33 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
    long long v34 = (void *)MEMORY[0x18530F680]();
    CFTypeID v35 = CFNumberGetTypeID();
    CFStringRef v36 = (void *)CFDictionaryGetValue(v33, @"LSExecutablePlatformKey");
    CFTypeID v37 = v36;
    if (v36 && CFGetTypeID(v36) == v35)
    {
      id v38 = v37;
      int v142 = [v38 unsignedLongLongValue];
    }
    else
    {
      int v142 = 0;
    }
    if (!v33)
    {
      CFDictionaryGetTypeID();
LABEL_77:
      CFURLRef v47 = 0;
LABEL_64:
      CFDictionaryRef v33 = 0;
LABEL_65:
      uint64_t v12 = 0;
      goto LABEL_66;
    }
    CFTypeRef v144 = CFDictionaryGetValue(v33, @"NSExtension");
    CFTypeID v39 = CFDictionaryGetTypeID();
    if (!v144 || v39 && CFGetTypeID(v144) != v39 || (CFTypeID v40 = CFGetTypeID(v144), v40 != CFDictionaryGetTypeID()))
    {
      CFURLRef v47 = 0;
      goto LABEL_65;
    }
    if (!cf)
    {
      CFURLRef v47 = 0;
      CFTypeRef v128 = 0;
      CFTypeRef v139 = 0;
      CFTypeRef v135 = 0;
      CFTypeRef v136 = 0;
      CFTypeRef v137 = 0;
LABEL_99:
      CFTypeRef v127 = 0;
      goto LABEL_100;
    }
    CFTypeRef v137 = CFDictionaryGetValue((CFDictionaryRef)cf, @"CodeInfoIdentifier");
    CFTypeID v41 = CFStringGetTypeID();
    if (!v137 || v41 && CFGetTypeID(v137) != v41) {
      CFTypeRef v137 = 0;
    }
    CFTypeRef v136 = CFDictionaryGetValue((CFDictionaryRef)cf, @"SignerOrganization");
    CFTypeID v42 = CFStringGetTypeID();
    if (!v136 || v42 && CFGetTypeID(v136) != v42) {
      CFTypeRef v136 = 0;
    }
    CFTypeRef v135 = CFDictionaryGetValue((CFDictionaryRef)cf, @"SignerIdentity");
    CFTypeID v43 = CFStringGetTypeID();
    if (!v135 || v43 && CFGetTypeID(v135) != v43) {
      CFTypeRef v135 = 0;
    }
    CFTypeRef v139 = CFDictionaryGetValue((CFDictionaryRef)cf, @"Entitlements");
    CFTypeID v44 = CFDictionaryGetTypeID();
    if (!v139 || v44 && CFGetTypeID(v139) != v44) {
      CFTypeRef v139 = 0;
    }
    uint64_t v45 = _LSGetTeamIdentifierFromInstallDict(cf);
    uint64_t v46 = (void *)*((void *)&v181 + 1);
    *((void *)&v181 + 1) = v45;

    if ([(id)__LSDefaultsGetSharedInstance() isInEducationMode])
    {
      CFTypeRef v128 = 0;
LABEL_89:
      CFURLRef v47 = 0;
      goto LABEL_90;
    }
    CFTypeRef v128 = CFDictionaryGetValue((CFDictionaryRef)cf, @"GroupContainers");
    CFTypeID v48 = CFDictionaryGetTypeID();
    if (!v128 || v48 && CFGetTypeID(v128) != v48) {
      CFTypeRef v128 = 0;
    }
    if (!CFDictionaryContainsKey((CFDictionaryRef)cf, @"Container")) {
      goto LABEL_89;
    }
    CFStringRef v49 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, @"Container");
    CFTypeID v50 = CFStringGetTypeID();
    if (v49 && v50 && CFGetTypeID(v49) != v50) {
      CFStringRef v49 = 0;
    }
    CFURLRef v47 = CFURLCreateWithFileSystemPath(allocator, v49, kCFURLPOSIXPathStyle, 1u);
LABEL_90:
    BYTE4(v188[2]) = _LSGetProfileValidationStateFromInstallDictionary((const __CFDictionary *)cf);
    if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"LSHasOverride")) {
      LODWORD(v178) = v178 | 8;
    }
    if (!v139)
    {
      CFTypeRef v139 = 0;
      goto LABEL_99;
    }
    if (!CFDictionaryContainsKey((CFDictionaryRef)v139, @"com.apple.developer.replace-plugin")) {
      goto LABEL_99;
    }
    LODWORD(v178) = v178 | 4;
    CFTypeRef v127 = CFDictionaryGetValue((CFDictionaryRef)v139, @"com.apple.developer.replace-plugin");
    CFTypeID v51 = CFStringGetTypeID();
    if (!v127 || v51 && CFGetTypeID(v127) != v51) {
      goto LABEL_99;
    }
LABEL_100:
    if (CFStringFind(v24, @".framework/", 1uLL).location != -1) {
      LODWORD(v178) = v178 | 2;
    }
    CFTypeID v52 = CFArrayGetTypeID();
    id v53 = (void *)CFDictionaryGetValue(v33, @"_LSSliceInfosKey");
    uint64_t v54 = v53;
    if (v53)
    {
      if (CFGetTypeID(v53) == v52) {
        uint64_t v55 = v54;
      }
      else {
        uint64_t v55 = 0;
      }
    }
    else
    {
      uint64_t v55 = 0;
    }
    objc_storeStrong((id *)v188, v55);
    CFTypeID v56 = CFArrayGetTypeID();
    CFIndex v57 = CFDictionaryGetValue(v33, @"UTExportedTypeDeclarations");
    uint64_t v58 = v57;
    if (v57)
    {
      if (CFGetTypeID(v57) == v56) {
        int v59 = v58;
      }
      else {
        int v59 = 0;
      }
    }
    else
    {
      int v59 = 0;
    }
    *(void *)&v188[1] = v59;
    CFTypeID v60 = CFArrayGetTypeID();
    int v61 = CFDictionaryGetValue(v33, @"UTImportedTypeDeclarations");
    int v62 = v61;
    if (v61)
    {
      if (CFGetTypeID(v61) == v60) {
        long long v63 = v62;
      }
      else {
        long long v63 = 0;
      }
    }
    else
    {
      long long v63 = 0;
    }
    *((void *)&v188[1] + 1) = v63;
    BOOL v64 = _LSGetBooleanFromDict(v33, @"_LSRequiresGarbageCollection") != 0;
    BYTE12(v188[2]) = BYTE12(v188[2]) & 0xFD | (2 * v64);
    BOOL v65 = _LSGetBooleanFromDict(v33, @"NSBuiltWithThreadSanitizer") != 0;
    BYTE12(v188[2]) = BYTE12(v188[2]) & 0xFB | (4 * v65);
    CFTypeRef v138 = CFDictionaryGetValue(v33, @"MachOUUIDs");
    CFTypeID v66 = CFArrayGetTypeID();
    if (!v138 || v66 && CFGetTypeID(v138) != v66) {
      CFTypeRef v138 = 0;
    }
    if (!v125)
    {
      CFStringGetTypeID();
LABEL_127:
      CFStringRef v140 = 0;
      goto LABEL_128;
    }
    CFStringRef v140 = (const __CFString *)CFDictionaryGetValue(v33, v125);
    CFTypeID v67 = CFStringGetTypeID();
    if (!v140 || v67 && CFGetTypeID(v140) != v67) {
      goto LABEL_127;
    }
LABEL_128:
    if (!v124)
    {
      CFStringGetTypeID();
LABEL_134:
      CFStringRef v131 = 0;
      goto LABEL_135;
    }
    CFStringRef v131 = (const __CFString *)CFDictionaryGetValue(v33, v124);
    CFTypeID v68 = CFStringGetTypeID();
    if (!v131 || v68 && CFGetTypeID(v131) != v68) {
      goto LABEL_134;
    }
LABEL_135:
    if (!v123)
    {
      CFStringGetTypeID();
LABEL_141:
      CFTypeRef v134 = 0;
      goto LABEL_142;
    }
    CFTypeRef v134 = CFDictionaryGetValue(v33, v123);
    CFTypeID v69 = CFStringGetTypeID();
    if (!v134 || v69 && CFGetTypeID(v134) != v69) {
      goto LABEL_141;
    }
LABEL_142:
    if (!v122)
    {
      CFStringGetTypeID();
LABEL_148:
      CFTypeRef v133 = 0;
      goto LABEL_149;
    }
    CFTypeRef v133 = CFDictionaryGetValue(v33, v122);
    CFTypeID v70 = CFStringGetTypeID();
    if (!v133 || v70 && CFGetTypeID(v133) != v70) {
      goto LABEL_148;
    }
LABEL_149:
    if (!v121)
    {
      CFStringGetTypeID();
LABEL_155:
      CFTypeRef v132 = 0;
      goto LABEL_156;
    }
    CFTypeRef v132 = CFDictionaryGetValue(v33, v121);
    CFTypeID v71 = CFStringGetTypeID();
    if (!v132 || v71 && CFGetTypeID(v132) != v71) {
      goto LABEL_155;
    }
LABEL_156:
    uint64_t v72 = CFDictionaryGetValue(v33, @"LSExecutableSDKVersion");
    CFTypeID v73 = CFStringGetTypeID();
    if (v72 && v73 && CFGetTypeID(v72) != v73) {
      uint64_t v72 = 0;
    }
    if (CFDictionaryContainsKey(v33, @"_LSIsLinkEnabled"))
    {
      BOOL v74 = _LSGetBooleanFromDict(v33, @"_LSIsLinkEnabled") != 0;
      BYTE12(v188[2]) = BYTE12(v188[2]) & 0xF7 | (8 * v74);
    }
    CFStringRef v75 = CFDictionaryGetValue(v33, @"LSIsSecuredSystemContent");
    CFTypeID v76 = CFBooleanGetTypeID();
    if (v75 && (!v76 || CFGetTypeID(v75) == v76) && CFBooleanGetValue((CFBooleanRef)v75)) {
      BYTE12(v188[2]) |= 0x10u;
    }
    if (v140)
    {
      CFTypeID v77 = CFStringGetTypeID();
      if (v77 == CFGetTypeID(v140))
      {
        if (CFStringHasPrefix(v140, @"com.apple.")) {
          BYTE12(v188[2]) |= 1u;
        }
      }
    }
    if (v21) {
      uint64_t v78 = (void *)_CSStringCopyCFString();
    }
    else {
      uint64_t v78 = 0;
    }
    int v79 = [v78 isEqualToString:@"System"];
    if (v21) {

    }
    if ((v79 | ((BYTE12(v188[2]) & 0x10) >> 4)) == 1)
    {
      CFTypeID v80 = CFStringGetTypeID();
      CFTypeID v81 = CFDictionaryGetValue(v33, @"APSystemPlugInEffectiveContainer");
      CFTypeID v82 = v81;
      if (v81)
      {
        if (CFGetTypeID(v81) == v80) {
          id v83 = v82;
        }
        else {
          id v83 = 0;
        }
      }
      else
      {
        id v83 = 0;
      }
      *((void *)&v188[0] + 1) = v83;
    }
    id v84 = CFDictionaryGetValue(v33, @"APProtectedShieldOptOut");
    CFTypeID v85 = CFBooleanGetTypeID();
    if (v84 && (!v85 || CFGetTypeID(v84) == v85) && CFBooleanGetValue((CFBooleanRef)v84)) {
      LODWORD(v178) = v178 | 0x10;
    }
    unsigned int v86 = BYTE12(v188[2]);
    int v87 = BYTE12(v188[2]) & 0x10;
    if (v21)
    {
      unsigned int v88 = _CSArrayGetCount();
      if (v88 >= 2)
      {
        char v89 = BYTE12(v188[2]);
        goto LABEL_201;
      }
      if (v88 == 1)
      {
        int v90 = _CSArrayGetValueAtIndex() & 0xFFFFFFFD;
        if (v87) {
          BOOL v91 = v90 == 1;
        }
        else {
          BOOL v91 = 0;
        }
        int v87 = v91;
      }
      else
      {
        int v87 = (v86 >> 4) & 1;
      }
    }
    char v89 = BYTE12(v188[2]);
    if (v87)
    {
      char v92 = 32;
      goto LABEL_202;
    }
LABEL_201:
    char v92 = 0;
LABEL_202:
    BYTE12(v188[2]) = v89 & 0xDF | v92;
    *((void *)&v179 + 1) = v30;
    *(void *)&long long v180 = v47;
    *((void *)&v180 + 1) = v140;
    *(void *)&long long v182 = v134;
    *((void *)&v182 + 1) = v133;
    CFTypeID v93 = CFStringGetTypeID();
    long long v94 = (void *)CFDictionaryGetValue(v33, @"NSMicrophoneUsageDescription");
    long long v95 = v94;
    if (v94)
    {
      if (CFGetTypeID(v94) == v93) {
        int v96 = v95;
      }
      else {
        int v96 = 0;
      }
    }
    else
    {
      int v96 = 0;
    }
    objc_storeStrong((id *)&v187, v96);
    *((void *)&v183 + 1) = v136;
    *(void *)&long long v184 = v135;
    *((void *)&v184 + 1) = v139;
    *(void *)&long long v185 = v128;
    LODWORD(v188[2]) = a2;
    *((void *)&v185 + 1) = v132;
    *(void *)&long long v183 = v137;
    *(void *)&long long v181 = v127;
    *((void *)&v178 + 1) = v138;
    *(void *)&long long v179 = v72;
    DWORD1(v178) = v142;
    uint64_t v97 = objc_opt_class();
    uint64_t v98 = [cf objectForKey:@"SignatureVersion"];
    int v99 = (void *)v98;
    if (v97 && v98 && (objc_opt_isKindOfClass() & 1) == 0)
    {

      int v99 = 0;
    }
    DWORD2(v188[2]) = [v99 unsignedLongLongValue];

    int v100 = (void *)MEMORY[0x18530F680]();
    int v101 = [MEMORY[0x1E4F1CA60] dictionary];
    v176[0] = MEMORY[0x1E4F143A8];
    v176[1] = 3221225472;
    v176[2] = ___ZL25_LSPluginRegisterWithInfoP11_LSDatabasePK14__CFDictionaryS3_hPS1_jj_block_invoke;
    v176[3] = &unk_1E522DC00;
    id v102 = v101;
    id v177 = v102;
    [(__CFDictionary *)v33 enumerateKeysAndObjectsUsingBlock:v176];
    id v103 = v102;

    v186[0] = v103;
    int v104 = (void *)MEMORY[0x18530F680]();
    uint64_t v105 = objc_opt_class();
    uint64_t v106 = [v16 objectForKey:@"_LSLocalizedStringsDictionary"];
    long long v107 = (void *)v106;
    if (v105 && v106 && (objc_opt_isKindOfClass() & 1) == 0)
    {

      long long v107 = 0;
    }
    context = 0;
    *(void *)&long long v157 = &context;
    *((void *)&v157 + 1) = 0x2020000000;
    LOBYTE(v158) = 0;
    int v108 = objc_opt_class();
    int v109 = objc_opt_class();
    LOBYTE(v158) = _LSIsDictionaryWithKeysAndValuesOfClass(v107, v108, v109);
    if (*(unsigned char *)(v157 + 24))
    {
      v175[0] = MEMORY[0x1E4F143A8];
      v175[1] = 3221225472;
      v175[2] = ___ZL25_LSPluginRegisterWithInfoP11_LSDatabasePK14__CFDictionaryS3_hPS1_jj_block_invoke_2;
      v175[3] = &unk_1E522DC28;
      v175[4] = &context;
      [v107 enumerateKeysAndObjectsUsingBlock:v175];
      if (*(unsigned char *)(v157 + 24)) {
        objc_storeStrong((id *)&v186[1], v107);
      }
    }
    _Block_object_dispose(&context, 8);

    int v110 = (void *)MEMORY[0x18530F680]();
    uint64_t v111 = objc_opt_class();
    uint64_t v112 = [(__CFDictionary *)v33 objectForKey:@"_LSIntentDefinitionURLs"];
    int v113 = (void *)v112;
    if (v111 && v112 && (objc_opt_isKindOfClass() & 1) == 0)
    {

      int v113 = 0;
    }
    int v114 = (void *)*((void *)&v187 + 1);
    *((void *)&v187 + 1) = v113;

    if (CFDictionaryContainsKey((CFDictionaryRef)v144, @"Multiple"))
    {
      long long v173 = 0u;
      long long v174 = 0u;
      *(_OWORD *)&v172[16] = 0u;
      context = v20;
      long long v157 = v178;
      long long v158 = v179;
      long long v159 = v180;
      uint64_t v160 = v181;
      id v161 = *((id *)&v181 + 1);
      long long v164 = v184;
      long long v165 = v185;
      CFTypeRef v166 = v186[0];
      long long v162 = v182;
      long long v163 = v183;
      id v167 = (id)v186[1];
      id v168 = (id)v187;
      id v169 = *((id *)&v187 + 1);
      id v115 = *(id *)&v188[0];
      long long v171 = *(_OWORD *)((char *)v188 + 8);
      *(_OWORD *)v172 = *(_OWORD *)((char *)&v188[1] + 8);
      *(void *)&v172[14] = *(void *)((char *)&v188[2] + 6);
      id v170 = v115;
      *(void *)&v172[24] = v131;
      *(void *)&long long v173 = v144;
      DWORD2(v173) = a3;
      BYTE12(v173) = a6;
      *(void *)&long long v174 = v126;
      DWORD2(v174) = 0;
      uint64_t v12 = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)v144, @"Multiple");
      CFTypeID v116 = CFDictionaryGetTypeID();
      if (v12)
      {
        if (v116 && CFGetTypeID((CFTypeRef)v12) != v116)
        {
          uint64_t v12 = 0;
        }
        else
        {
          CFDictionaryApplyFunction((CFDictionaryRef)v12, (CFDictionaryApplierFunction)_LSPluginRegistration_CFDictionaryApplier, &context);
          uint64_t v12 = DWORD2(v174);
        }
      }
    }
    else
    {
      int v117 = (__CFString *)CFDictionaryGetValue((CFDictionaryRef)v144, @"NSExtensionAttributes");
      CFTypeID v118 = CFDictionaryGetTypeID();
      if (v117 && v118 && CFGetTypeID(v117) != v118) {
        int v117 = 0;
      }
      LODWORD(context) = 0;
      unsigned int v119 = _LSRegisterPlugin(v20, (const LSPluginInfo *)&v178, v117, v140, v131, (const __CFDictionary *)v144, a3, (unsigned int *)&context);
      if (!a6 && !v119 && context)
      {
        LSPluginAddInfoToPayloadDict(v20, v126, (int)context, 1, 1);
        goto LABEL_65;
      }
      if (v119 == -10651) {
        uint64_t v12 = 0;
      }
      else {
        uint64_t v12 = v119;
      }
    }
LABEL_66:
    if (v186[0]) {
      CFRelease(v186[0]);
    }
    if (v33) {
      CFRelease(v33);
    }
    if (v30) {
      CFRelease(v30);
    }
    if (v47) {
      CFRelease(v47);
    }

    ++v15;
  }
  while (v145 != v15);
  if (values)
  {
    v151 = values;
    operator delete(values);
  }
  if (keys)
  {
    uint64_t v154 = keys;
    operator delete(keys);
  }
  if (v126)
  {
    LSPluginSendNotification(v20, @"com.apple.LaunchServices.pluginsregistered", v126);
    CFRelease(v126);
  }
LABEL_247:

  return v12;
}

void sub_182AA1A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,void *__p,uint64_t a52,uint64_t a53,void *a54)
{
  LSPluginInfo::~LSPluginInfo((id *)&STACK[0x2D0]);

  if (__p) {
    operator delete(__p);
  }
  if (a54) {
    operator delete(a54);
  }

  _Unwind_Resume(a1);
}

uint64_t _LSCopyPluginsWithURL(uint64_t a1, const __CFURL *a2)
{
  uint64_t v8 = 0;
  CFTypeID v9 = &v8;
  uint64_t v10 = 0x2020000000;
  uint64_t v11 = 0;
  int v3 = (void *)MEMORY[0x18530F680]();
  if (a2)
  {
    id v7 = (__CFString *)CFURLCopyFileSystemPath(a2, kCFURLPOSIXPathStyle);
    CFTypeID v4 = v7;
    _CSStoreEnumerateUnits();
  }
  uint64_t v5 = v9[3];
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_182AA1C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _LSUnregisterPlugin(_LSDatabase **a1, uint64_t a2)
{
  return _LSUnregisterBundle(a1, a2, 0x20000000);
}

uint64_t _LSServerBundleRegistration(id *a1, void *a2, void *a3, void *a4, const __CFDictionary *a5, unsigned int *a6, uint64_t a7, char *a8, unsigned char *a9)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  long long v13 = a2;
  id v14 = a3;
  uint64_t v62 = 0;
  unsigned int v61 = 0;
  uint64_t v60 = 0;
  unint64_t v15 = +[LSRecordBuilder recordBuilderForType:0];
  int v16 = 0;
  uint64_t v17 = 4294956479;
  if (!a1 || !v13) {
    goto LABEL_84;
  }
  int v18 = v13[3];
  if (v18 == 203)
  {
    if (!v14)
    {
      int v16 = 0;
      goto LABEL_84;
    }
  }
  else
  {
    int v16 = 0;
    if (!v14 || v18 != 205) {
      goto LABEL_84;
    }
  }
  id v19 = *a1;
  int v16 = v19;
  if (!v19) {
    goto LABEL_84;
  }
  if (!a4) {
    goto LABEL_84;
  }
  if (!*((void *)v19 + 1)) {
    goto LABEL_84;
  }
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (TypeID != CFGetTypeID(a4)) {
    goto LABEL_84;
  }
  [v15 setRegistrationInfo:v13 alias:v14];
  [v15 setDatabase:v16];
  if (a5)
  {
    HIDWORD(v53) = _LSGetBooleanFromDict(a5, @"IsPlaceholder");
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a5, @"ApplicationType");
    CFTypeID v22 = CFStringGetTypeID();
    BOOL v23 = Value
       && (!v22 || CFGetTypeID(Value) == v22)
       && CFStringCompare(Value, @"SystemAppPlaceholder", 1uLL) == kCFCompareEqualTo;
    int v52 = _LSGetBooleanFromDict(a5, @"LSAppDowngrade");
    LODWORD(v53) = v23;
  }
  else
  {
    int v52 = 0;
    uint64_t v53 = 0;
  }
  if (CSStoreGetUnit())
  {
    unsigned int v61 = v13[7];
    uint64_t v24 = _LSBundleGet(v16, v61);
  }
  else
  {
    int v51 = v13[6];
    id v25 = v16;
    uint64_t v63 = 0;
    BOOL v64 = &v63;
    uint64_t v65 = 0x2020000000;
    uint64_t v66 = 0;
    uint64_t v55 = (NSString *)v14;
    +[FSNode nameForBookmarkData:error:](FSNode, "nameForBookmarkData:error:");
    CFTypeID v26 = (__CFString *)objc_claimAutoreleasedReturnValue();
    if (v26)
    {
      int StringForCFString = _LSDatabaseGetStringForCFString(v25, v26, 1);

      if (StringForCFString)
      {
        *(void *)&long long buf = MEMORY[0x1E4F143A8];
        *((void *)&buf + 1) = 3221225472;
        CFTypeID v70 = ___ZL61_LSFindExistingRegisteredBundleWithContainerMatchingAliasDataP11_LSDatabasejP6NSDataPj_block_invoke;
        CFTypeID v71 = &unk_1E5230840;
        int v76 = StringForCFString;
        int v77 = v51;
        id v72 = v25;
        CFTypeID v28 = v55;
        CFStringRef v75 = &v61;
        CFTypeID v73 = v28;
        BOOL v74 = &v63;
        _CSStoreEnumerateUnits();
      }
    }
    uint64_t v24 = v64[3];
    _Block_object_dispose(&v63, 8);
  }
  uint64_t v62 = v24;
  if (v24)
  {
    if (!HIDWORD(v53)
      && (_LSGetBooleanFromDict((const __CFDictionary *)a4, @"_LSInfoPlistIsMissing")
       || _LSGetBooleanFromDict((const __CFDictionary *)a4, @"_LSNoExecutableInfo"))
      && (*(void *)(v62 + 172) & 0x20000000000200) == 0)
    {
      CFStringRef v49 = _LSInstallLog();
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_182959000, v49, OS_LOG_TYPE_DEFAULT, "skipping registration of an incomplete bundle", (uint8_t *)&buf, 2u);
      }

      char v29 = 1;
    }
    else
    {
      char v29 = 0;
    }
    if ((*(unsigned char *)(v62 + 172) & 0x80) == 0 && (v13[4] & 2) == 0)
    {
      CFURLRef v30 = _LSInstallLog();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_182959000, v30, OS_LOG_TYPE_DEFAULT, "refusing to replace a trusted bundle with an untrusted one at the same path", (uint8_t *)&buf, 2u);
      }

      uint64_t v17 = 4294956621;
      goto LABEL_84;
    }
    if (_LSBundleDataIsIncomplete(*a1, v62))
    {
      unsigned int v31 = *(unsigned __int8 *)(v62 + 509);
      if (v31 < 0x3C) {
        LOBYTE(v31) = v31 + 1;
      }
      [v15 setRetries:v31];
    }
    if (v29)
    {
      if (v62)
      {
        char v32 = 0;
LABEL_77:
        if (a6) {
          *a6 = v61;
        }
        if (a8)
        {
          if (!v61) {
            char v32 = 0;
          }
          *a8 = v32;
        }
        _LSDatabaseSetSequenceNumber((uint64_t)v16, v60);
        uint64_t v17 = 0;
        goto LABEL_84;
      }
    }
    else
    {
      [v15 setPreviousInstallType:*(unsigned int *)(v62 + 332)];
      uint64_t v17 = _LSBundleRemove(v16, v61, 0);
      if (v17) {
        goto LABEL_84;
      }
      uint64_t v62 = 0;
      unsigned int v61 = 0;
    }
  }
  if (!CSStoreGetUnit())
  {
    uint64_t v17 = 4294957797;
    goto LABEL_84;
  }
  if (!*MEMORY[0x1E4F1CFF8])
  {
    CFTypeID v34 = CFStringGetTypeID();
LABEL_53:
    CFTypeID v37 = 0;
    goto LABEL_54;
  }
  CFDictionaryRef v33 = (void *)CFDictionaryGetValue((CFDictionaryRef)a4, (const void *)*MEMORY[0x1E4F1CFF8]);
  CFTypeID v34 = CFStringGetTypeID();
  if (!v33) {
    goto LABEL_53;
  }
  CFTypeID v36 = v34;
  if (v34)
  {
    CFTypeID v34 = CFGetTypeID(v33);
    if (v34 != v36) {
      goto LABEL_53;
    }
  }
  CFTypeID v37 = (NSString *)v33;
LABEL_54:
  _LSLogStepStart(v34, 0, v37, v35);
  CFTypeID v56 = v37;
  if (!v37) {
    goto LABEL_67;
  }
  CFTypeID v38 = CFGetTypeID(v37);
  BOOL v39 = v38 == CFStringGetTypeID();
  CFTypeID v40 = v56;
  if (!v39) {
    goto LABEL_67;
  }
  unsigned int v61 = 0;
  int v59 = 0;
  uint64_t v63 = 0;
  if (v53
    || (memset(v68, 0, sizeof(v68)),
        BOOL v54 = _LSBundleFindWithInfoAndNo_IOFilter((uint64_t)a1, 0, v56, 0, v68, 2, 128, 0, 0, &v61, &v62, 0),
        memset(v67, 0, sizeof(v67)),
        BOOL v41 = _LSBundleFindWithInfoAndNo_IOFilter((uint64_t)a1, 0, v56, 0, v67, 2, 1152, 0, 0, &v59, &v63, 0),
        CFTypeID v40 = v56,
        !v54 && !v41))
  {
    CFTypeID v44 = _LSInstallLog();
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v40;
      _os_log_impl(&dword_182959000, v44, OS_LOG_TYPE_DEFAULT, "No bundles to remove for %@", (uint8_t *)&buf, 0xCu);
    }

    goto LABEL_67;
  }
  if (!v41)
  {
    uint64_t v17 = 0;
    uint64_t v63 = 0;
    int v59 = 0;
    if (!v54)
    {
      uint64_t v62 = 0;
      unsigned int v61 = 0;
      goto LABEL_67;
    }
    goto LABEL_89;
  }
  uint64_t v42 = _LSBundleGet(v16, v59);
  [v15 setPreviousInstallType:*(unsigned int *)(v42 + 332)];
  [v15 addBundleFlag:*(void *)(v42 + 172) & 0x80000];
  uint64_t v17 = _LSBundleRemove(v16, v59, 0);
  CFTypeID v43 = _LSInstallLog();
  CFTypeID v40 = v56;
  if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = v56;
    _os_log_impl(&dword_182959000, v43, OS_LOG_TYPE_DEFAULT, "Removed existing registered placeholder for %@", (uint8_t *)&buf, 0xCu);
  }

  uint64_t v63 = 0;
  int v59 = 0;
  if (v54)
  {
LABEL_89:
    if (!HIDWORD(v53) || v52)
    {
      objc_msgSend(v15, "setPreviousInstallType:", *(unsigned int *)(_LSBundleGet(v16, v61) + 332));
      uint64_t v17 = _LSBundleRemove(v16, v61, v52);
      CFTypeID v50 = _LSInstallLog();
      if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v40;
        _os_log_impl(&dword_182959000, v50, OS_LOG_TYPE_DEFAULT, "Removed existing registered bundle for %@", (uint8_t *)&buf, 0xCu);
      }
    }
    else
    {
      [v15 addBundleFlag:0x80000];
      *(void *)&long long buf = *(void *)(v62 + 172) | 0x400000000000;
      _CSStoreWriteToUnit();
      if (objc_msgSend(a4, "_LS_BoolForKey:", @"LSRequiresPostProcessing")) {
        _CSStoreWriteToUnit();
      }
    }
  }
  uint64_t v62 = 0;
  unsigned int v61 = 0;
  if (v17 && v17 != -10814) {
    goto LABEL_84;
  }
LABEL_67:
  unint64_t v45 = _LSDatabaseGetSequenceNumber() + 1;
  uint64_t v60 = v45;
  [v15 setSequenceNumber:v45];
  if ([v15 parseInfoPlist:a4]
    && ([v15 parseInstallationInfo:a5] & 1) != 0)
  {
    uint64_t v17 = 0;
    uint64_t v46 = 1;
  }
  else
  {
    uint64_t v46 = 0;
    uint64_t v17 = 4294967246;
  }
  [v15 parseActivityTypesFromDictionary:a4];
  [v15 parseNSExtensionSDKDefinitionsFromDictionary:a4];
  _LSLogStepFinished(5, v46, v56, &cfstr_BuiltBundleRec.isa);
  unsigned int v61 = [v15 registerBundleRecord:v16 error:0];
  char v47 = [v15 registerChildItemsTrusted];
  if (a9) {
    *a9 = v47;
  }
  if (v46)
  {
    if (v45 < v61)
    {
      uint64_t v60 = v61;
      _CSStoreWriteToUnit();
    }
    _CSStoreGarbageCollect();
    char v32 = 1;
    goto LABEL_77;
  }
LABEL_84:

  return v17;
}

void sub_182AA27C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSLogStepStart(uint64_t a1, uint64_t a2, NSString *a3, NSString *a4, ...)
{
  va_start(va, a4);
  _LSLogStep(5, 1, 1, a3, @"Building bundle record for app", (uint64_t)va);
}

{
  va_list va;

  va_start(va, a4);
  _LSLogStep(1, 0, a3, @"_LSServerRegisterItemInfo begin", (uint64_t)va);
}

{
  va_list va;

  va_start(va, a4);
  _LSLogStep(a1, 1, 1, a3, a4, (uint64_t)va);
}

void _LSLogStepFinished(uint64_t a1, uint64_t a2, NSString *a3, NSString *a4, ...)
{
  va_start(va, a4);
  _LSLogStep(a1, 2, a2, a3, a4, (uint64_t)va);
}

{
  va_list va;

  va_start(va, a4);
  _LSLogStep(2, a2, a3, @"_LSServerRegisterItemInfo __n128 result = %@", (uint64_t)va);
}

{
  va_list va;

  va_start(va, a4);
  _LSLogStep(a1, 2, a2, a3, a4, (uint64_t)va);
}

uint64_t _LSSliceMaskForSliceArray(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v1 = a1;
  int v2 = 0;
  uint64_t v3 = [v1 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v13 != v4) {
          objc_enumerationMutation(v1);
        }
        unsigned int v6 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        int v7 = objc_msgSend(v6, "type", (void)v12);
        if (v7 <= 16777222)
        {
          switch(v7)
          {
            case 7:
              v2 |= 4u;
              break;
            case 12:
              switch([v6 subtype] & 0xFFFFFF)
              {
                case 6:
                  v2 |= 0x20u;
                  break;
                case 9:
                  v2 |= 0x40u;
                  break;
                case 0xALL:
                  v2 |= 0x200u;
                  break;
                case 0xBLL:
                  v2 |= 0x400u;
                  break;
                case 0xCLL:
                  v2 |= 0x800u;
                  break;
                case 0xFLL:
                  v2 |= 0x1000u;
                  break;
                case 0x10:
                  v2 |= 0x2000u;
                  break;
                default:
                  continue;
              }
              break;
            case 18:
              v2 |= 1u;
              break;
          }
        }
        else if (v7 > 16777233)
        {
          if (v7 == 16777234)
          {
            v2 |= 2u;
          }
          else if (v7 == 33554444)
          {
            uint64_t v9 = [v6 subtype] & 0xFFFFFF;
            if (v9 == 1)
            {
              v2 |= 0xFFFF8000;
            }
            else if (!v9)
            {
              v2 |= 0x4000u;
            }
          }
        }
        else if (v7 == 16777223)
        {
          uint64_t v10 = [v6 subtype] & 0xFFFFFF;
          if (v10 == 3)
          {
            v2 |= 8u;
          }
          else if (v10 == 8)
          {
            v2 |= 0x10u;
          }
        }
        else if (v7 == 16777228)
        {
          uint64_t v8 = [v6 subtype] & 0xFFFFFF;
          if (v8 == 2)
          {
            v2 |= 0x100u;
          }
          else if (!v8)
          {
            v2 |= 0x80u;
          }
        }
      }
      uint64_t v3 = [v1 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v3);
  }

  return (unsigned __int16)v2;
}

void sub_182AA2B80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSGetMinimumOSVersionStringAndReferencePlatformForPlatformSDKLinkage(void *a1, uint64_t a2, _OWORD *a3, id *a4, _DWORD *a5)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v8 = a1;
  long long v9 = a3[1];
  v20[0] = *a3;
  v20[1] = v9;
  _LSMakeVersionNumber(14, 5, 0, v19);
  if (_LSVersionNumberCompare(v20, v19) == -1)
  {
    uint64_t v14 = objc_opt_class();
    uint64_t v15 = [v8 objectForKey:@"LSMinimumSystemVersion"];
    long long v13 = (void *)v15;
    if (v14 && v15)
    {
      if (objc_opt_isKindOfClass()) {
        goto LABEL_17;
      }
    }
    else if (v15)
    {
      goto LABEL_17;
    }
    uint64_t v16 = objc_opt_class();
    uint64_t v17 = [v8 objectForKey:@"MinimumOSVersion"];
    long long v13 = (void *)v17;
    if (v16 && v17 && (objc_opt_isKindOfClass() & 1) == 0)
    {

      long long v13 = 0;
    }
  }
  else
  {
    uint64_t v10 = objc_opt_class();
    uint64_t v11 = [v8 objectForKey:@"MinimumOSVersion"];
    long long v12 = (void *)v11;
    if (v10 && v11 && (objc_opt_isKindOfClass() & 1) == 0)
    {

      long long v13 = 0;
    }
    else
    {
      long long v13 = v12;
    }
  }
LABEL_17:
  active_platforCFIndex m = dyld_get_active_platform();
  if (a4) {
    objc_storeStrong(a4, v13);
  }
  if (a5) {
    *a5 = active_platform;
  }
}

void sub_182AA2D98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__CFDictionary *_LSCreateRegistrationData(uint64_t *a1, void *a2, void *a3, FSNode *a4, const __CFArray **a5)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  long long v9 = a2;
  if (a1 && -[_LSDatabase accessContext](*a1)) {
    _CSStoreAccessContextAssertReading();
  }
  int v10 = v9[3];
  if ((v10 - 203) < 2)
  {
    uint64_t v11 = v9;
    if (a3)
    {
      long long v12 = [[FSNode alloc] initWithURL:a3 flags:48 error:0];
      long long v13 = (_LSBundleProvider *)v12;
      if (v12)
      {
        if ([(FSNode *)v12 isDirectory])
        {
          CFTypeRef cf = (__CFBundle *)[(_LSBundleProvider *)v13 copyCFBundleWithError:0];
          if (cf)
          {
            uint64_t v14 = [[_LSBundleProvider alloc] initWithURL:a3 useCacheIfPossible:1];
            CFDictionaryRef theDict = _LSCreateRegistrationDataForDirectoryNode((LSContext *)a1, v11, (const __CFURL *)v14, v13, a4, a5, v15);
            if ([(_LSBundleProvider *)v14 usingCachedItem])
            {
              uint64_t v16 = _LSRegistrationLog();
              if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)long long buf = 138477827;
                BOOL v64 = a3;
                _os_log_impl(&dword_182959000, v16, OS_LOG_TYPE_DEBUG, "Validating item %{private}@, which used the cache for registration", buf, 0xCu);
              }

              int v52 = [[_LSBundleProvider alloc] initWithURL:a3 useCacheIfPossible:0];
              int v18 = _LSCreateRegistrationDataForDirectoryNode((LSContext *)a1, v11, (const __CFURL *)v52, v13, a4, a5, v17);
              v62[0] = MEMORY[0x1E4F143A8];
              v62[1] = 3221225472;
              v62[2] = ___ZL34_LSCreateRegistrationDataForBundleP9LSContextP18LSRegistrationInfoPK7__CFURLPK14__CFDictionaryPPK9__CFArray_block_invoke;
              v62[3] = &__block_descriptor_40_e13_B24__0_v8_v16l;
              v62[4] = theDict;
              if (CFDictionaryApplyBlock(v18, (uint64_t)v62))
              {
                id v19 = _LSRegistrationLog();
                if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)long long buf = 138739971;
                  BOOL v64 = a3;
                  _os_log_impl(&dword_182959000, v19, OS_LOG_TYPE_INFO, "REGISTRATION: Successfully registered %{sensitive}@ using the boot cache", buf, 0xCu);
                }
              }
              if (v18) {
                CFRelease(v18);
              }
            }
            if (theDict)
            {
              CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
              MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, theDict);
              if (softLinkLNIsLinkEnabled)
              {
                int v22 = softLinkLNIsLinkEnabled(cf);
                BOOL v23 = (const void *)*MEMORY[0x1E4F1CFC8];
                if (v22) {
                  uint64_t v24 = (const void *)*MEMORY[0x1E4F1CFD0];
                }
                else {
                  uint64_t v24 = (const void *)*MEMORY[0x1E4F1CFC8];
                }
              }
              else
              {
                BOOL v23 = (const void *)*MEMORY[0x1E4F1CFC8];
                uint64_t v24 = (const void *)*MEMORY[0x1E4F1CFC8];
              }
              CFDictionaryAddValue(MutableCopy, @"_LSIsLinkEnabled", v24);
              CFRelease(theDict);
              CFRelease(cf);
              if (MutableCopy)
              {
                if (CFDictionaryContainsKey(MutableCopy, @"bundlePersonas")
                  || CFDictionaryContainsKey(MutableCopy, @"_LSUsesSystemPersona"))
                {
                  Copy = CFDictionaryCreateMutableCopy(v20, 0, MutableCopy);
                  CFDictionaryRemoveValue(Copy, @"bundlePersonas");
                  CFDictionaryRemoveValue(Copy, @"_LSUsesSystemPersona");
                  CFRelease(MutableCopy);
                  if (!Copy) {
                    goto LABEL_36;
                  }
                }
                else
                {
                  Copy = MutableCopy;
                }
                CFTypeID v34 = (const void *)*MEMORY[0x1E4F1CFF8];
                if (!CFDictionaryContainsKey(Copy, (const void *)*MEMORY[0x1E4F1CFF8]) || v11->action != 203) {
                  goto LABEL_36;
                }
                if (v34)
                {
                  CFStringRef Value = (void *)CFDictionaryGetValue(Copy, v34);
                  CFTypeID TypeID = CFStringGetTypeID();
                  if (!Value || !TypeID || CFGetTypeID(Value) == TypeID) {
                    goto LABEL_58;
                  }
                }
                else
                {
                  CFStringGetTypeID();
                }
                CFStringRef Value = 0;
LABEL_58:
                CFDictionaryRef v37 = Value;
                CFTypeID v38 = CFSetGetTypeID();
                BOOL v39 = (void *)CFDictionaryGetValue((CFDictionaryRef)a4, @"LSPersonaUniqueStrings");
                CFTypeID v40 = v39;
                uint64_t v53 = v23;
                if (v39 && CFGetTypeID(v39) == v38)
                {
                  id v41 = v40;
                  uint64_t v42 = [v41 allObjects];
                }
                else
                {
                  CFTypeID v43 = +[_LSPersonaDatabase sharedInstance]();
                  uint64_t v42 = -[_LSPersonaDatabase personasWithAttributesForBundleIdentifier:](v43, v37);
                  id v41 = v43;
                }

                if ([v42 count])
                {
                  CFDictionaryRef theDicta = v37;
                  CFTypeID v44 = _LSRegistrationLog();
                  if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
                  {
                    *(_DWORD *)long long buf = 138543874;
                    BOOL v64 = v42;
                    __int16 v65 = 2114;
                    uint64_t v66 = a3;
                    __int16 v67 = 2114;
                    CFDictionaryRef v68 = v37;
                    _os_log_impl(&dword_182959000, v44, OS_LOG_TYPE_INFO, "- Got personas %{public}@ for application at %{public}@/%{public}@", buf, 0x20u);
                  }

                  long long v60 = 0u;
                  long long v61 = 0u;
                  long long v58 = 0u;
                  long long v59 = 0u;
                  id v45 = v42;
                  uint64_t v46 = [v45 countByEnumeratingWithState:&v58 objects:buf count:16];
                  CFTypeRef cfa = v42;
                  char v47 = 0;
                  if (v46)
                  {
                    uint64_t v48 = *(void *)v59;
                    do
                    {
                      for (uint64_t i = 0; i != v46; ++i)
                      {
                        if (*(void *)v59 != v48) {
                          objc_enumerationMutation(v45);
                        }
                        v47 |= -[_LSPersonaWithAttributes personaType](*(void *)(*((void *)&v58 + 1) + 8 * i)) == 3;
                      }
                      uint64_t v46 = [v45 countByEnumeratingWithState:&v58 objects:buf count:16];
                    }
                    while (v46);
                  }

                  uint64_t v42 = (void *)cfa;
                  CFDictionaryRef v37 = theDicta;
                  CFTypeID v50 = CFDictionaryCreateMutableCopy(v20, 0, Copy);
                  CFDictionarySetValue(v50, @"bundlePersonas", v45);
                  if (v47) {
                    int v51 = (const void *)*MEMORY[0x1E4F1CFD0];
                  }
                  else {
                    int v51 = v53;
                  }
                  CFDictionarySetValue(v50, @"_LSUsesSystemPersona", v51);
                  CFRelease(Copy);
                  Copy = CFDictionaryCreateCopy(v20, v50);
                  CFRelease(v50);
                }

                goto LABEL_36;
              }
            }
            else
            {
              CFRelease(cf);
            }
          }
        }
      }
    }
    else
    {
      _LSRegistrationLog();
      long long v13 = (_LSBundleProvider *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(&v13->super, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_182959000, &v13->super, OS_LOG_TYPE_ERROR, "Unexpected nil bundle URL when registering.", buf, 2u);
      }
    }
    Copy = 0;
LABEL_36:

    goto LABEL_40;
  }
  if (v10 == 205)
  {
    id v25 = v9;
    if (a4)
    {
      CFTypeID v26 = (const void *)*MEMORY[0x1E4F1CFF8];
      if (*MEMORY[0x1E4F1CFF8])
      {
        CFStringRef v27 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)a4, (const void *)*MEMORY[0x1E4F1CFF8]);
        CFTypeID v28 = CFStringGetTypeID();
        if (v27 && (!v28 || CFGetTypeID(v27) == v28))
        {
          char v29 = (const UInt8 **)_LSPathForBundleLibraryIdentifier(v27);
          CFAllocatorRef v30 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          Copy = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          CFDictionarySetValue(Copy, v26, v27);
          CFURLRef v32 = CFURLCreateFromFileSystemRepresentation(v30, v29[1], *(int *)v29, 1u);
          _LSAddBundleLibraryInfo((LSContext *)a1, v32, 0, v25, Copy, 1, 0);
          if (v32) {
            CFRelease(v32);
          }
          goto LABEL_39;
        }
      }
      else
      {
        CFStringGetTypeID();
      }
    }
    Copy = 0;
LABEL_39:

    goto LABEL_40;
  }
  Copy = 0;
LABEL_40:

  return Copy;
}

void sub_182AA354C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t _LSServerItemInfoRegistration(id *a1, void *a2, void *a3, void *a4, const __CFDictionary *a5, unsigned int *a6, uint64_t a7, char *a8, unsigned char *a9)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  uint64_t v15 = a2;
  id v17 = a3;
  int v18 = v15[3];
  if (v18 == 203 || v18 == 205)
  {
    uint64_t v21 = _LSServerBundleRegistration(a1, v15, v17, a4, a5, a6, v16, a8, a9);
  }
  else
  {
    if (v18 == 204)
    {
      CFStringRef v49 = v15;
      id v19 = v17;
      id v54 = 0;
      int v53 = 0;
      CFDictionaryRef theDict = (CFDictionaryRef)a4;
      keys = 0;
      char v47 = v19;
      id v20 = 0;
      if (!a1)
      {
        uint64_t v48 = 0;
        uint64_t v21 = 4294956479;
        goto LABEL_72;
      }
      uint64_t v21 = 4294956479;
      if (!v19)
      {
        uint64_t v48 = 0;
        goto LABEL_72;
      }
      uint64_t v48 = 0;
      if (v49[3] != 204)
      {
LABEL_72:

        goto LABEL_73;
      }
      id v22 = *a1;
      if (!v22)
      {
        id v20 = 0;
        uint64_t v48 = 0;
        goto LABEL_72;
      }
      uint64_t v48 = v22;
      if (!*((void *)v22 + 1))
      {
        id v20 = 0;
        goto LABEL_72;
      }
      id v50 = 0;
      id v20 = [[FSNode alloc] initByResolvingBookmarkData:v47 relativeToNode:0 bookmarkDataIsStale:0 error:&v50];
      id v23 = v50;
      uint64_t v24 = v23;
      if (v20)
      {
      }
      else
      {
        uint64_t v21 = _LSGetOSStatusFromNSError(v23);

        if (v21) {
          goto LABEL_70;
        }
      }
      CFURLRef v25 = [v20 URL];
      CFStringRef string = CFURLCopyFileSystemPath(v25, kCFURLPOSIXPathStyle);

      if (!string)
      {
        uint64_t v21 = 0;
        if (!a5) {
          goto LABEL_72;
        }
        goto LABEL_71;
      }
      if (!theDict)
      {
LABEL_29:
        if (a5)
        {
          CFRetain(a5);
        }
        else
        {
          if (!keys) {
            goto LABEL_61;
          }
          *(void *)&long long buffer = 0;
          *((void *)&buffer + 1) = &buffer;
          uint64_t v57 = 0x3812000000;
          long long v58 = __Block_byref_object_copy__592;
          long long v59 = __Block_byref_object_dispose__593;
          long long v60 = &unk_182B5933F;
          CFTypeRef cf = 0;
          v55[0] = MEMORY[0x1E4F143A8];
          v55[1] = 3221225472;
          v55[2] = ___ZL31createInstallationDictForPluginPK10__CFString_block_invoke;
          v55[3] = &unk_1E52308D0;
          void v55[4] = &buffer;
          v55[5] = keys;
          ((void (*)(void *, void *))softLinkMobileInstallationEnumerateAllInstalledItemDictionaries[0])(0, v55);
          BOOL v39 = *(const void **)(*((void *)&buffer + 1) + 48);
          if (v39) {
            a5 = (const __CFDictionary *)CFRetain(v39);
          }
          else {
            a5 = 0;
          }
          _Block_object_dispose(&buffer, 8);
          if (cf) {
            CFRelease(cf);
          }
          if (!a5)
          {
LABEL_61:
            uint64_t v42 = _LSRegistrationLog();
            if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
            {
              LODWORD(buffer) = 138412290;
              *(void *)((char *)&buffer + 4) = keys;
              _os_log_impl(&dword_182959000, v42, OS_LOG_TYPE_ERROR, "Cannot register app extension %@ without MobileInstallation data. Installation dictionary was NULL", (uint8_t *)&buffer, 0xCu);
            }

            a5 = 0;
            CFDictionaryRef v45 = 0;
            CFStringRef v37 = 0;
            CFArrayRef v32 = 0;
            uint64_t v21 = 4294956479;
            goto LABEL_64;
          }
        }
        if (theDict && keys)
        {
          CFDictionaryRef v45 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&keys, (const void **)&theDict, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        }
        else
        {
          if (CFStringGetFileSystemRepresentation(string, (char *)&buffer, 1024))
          {
            CFTypeID v28 = _LSDefaultLog();
            if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
              _LSServerItemInfoRegistration_cold_1((uint64_t)&buffer, v28);
            }
          }
          CFDictionaryRef v45 = 0;
        }
        uint64_t v29 = _LSGetPlugin((uint64_t)v48, v49[7]);
        if (v29)
        {
          uint64_t v30 = v49[7];
          int v44 = *(_DWORD *)(v29 + 224);
          int v53 = v44;
          _LSUnregisterBundle((_LSDatabase **)a1, v30, 0x20000000);
          CFURLRef v31 = [v20 URL];
          CFArrayRef v32 = (const __CFArray *)_LSCopyPluginsWithURL((uint64_t)a1, v31);

          if (v32)
          {
            CFIndex Count = CFArrayGetCount(v32);
            if (Count >= 1)
            {
              for (CFIndex i = 0; i != Count; ++i)
              {
                CFDictionaryRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(v32, i);
                CFTypeID TypeID = CFNumberGetTypeID();
                if (ValueAtIndex && (!TypeID || CFGetTypeID(ValueAtIndex) == TypeID)) {
                  _LSUnregisterBundle((_LSDatabase **)a1, [ValueAtIndex unsignedLongLongValue], 0x20000000);
                }
              }
            }
            CFRelease(v32);
            CFArrayRef v32 = 0;
          }
          CFStringRef v37 = 0;
          int v38 = v44;
        }
        else
        {
          CFRange v40 = CFStringFind(string, @".app/", 4uLL);
          if (v40.location == -1)
          {
            int v38 = 0;
            CFArrayRef v32 = 0;
            CFStringRef v37 = 0;
          }
          else
          {
            v63.length = v40.location + v40.length;
            CFAllocatorRef v41 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
            v63.locatioCFIndex n = 0;
            CFStringRef v37 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E4F1CF80], string, v63);
            CFArrayRef v32 = CFURLCreateWithFileSystemPath(v41, v37, kCFURLPOSIXPathStyle, 1u);
            FSNodeCreateWithURL((uint64_t)v32, 0, &v54);
            _LSBundleFindWithNode((uint64_t)a1, v54, &v53, 0);
            int v38 = v53;
          }
        }
        uint64_t v21 = _LSRegisterPlugins(v48, v49[6], v38, v45, a5, 0);
LABEL_64:
        CFRelease(string);
        if (v32) {
          CFRelease(v32);
        }
        if (v37) {
          CFRelease(v37);
        }
        if (v45) {
          CFRelease(v45);
        }
LABEL_70:
        if (a5)
        {
LABEL_71:
          CFRelease(a5);
          goto LABEL_72;
        }
        goto LABEL_72;
      }
      if (*MEMORY[0x1E4F1CFF8])
      {
        CFStringRef Value = (void *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F1CFF8]);
        CFTypeID v27 = CFStringGetTypeID();
        if (!Value || !v27 || CFGetTypeID(Value) == v27) {
          goto LABEL_28;
        }
      }
      else
      {
        CFStringGetTypeID();
      }
      CFStringRef Value = 0;
LABEL_28:
      keys = Value;
      goto LABEL_29;
    }
    uint64_t v21 = 4294967246;
  }
LABEL_73:

  return v21;
}

void sub_182AA3CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,CFTypeRef cf)
{
  _Unwind_Resume(a1);
}

void getLibIDs(void)
{
  {
    getLibIDs(void)::klibIDs = @"com.apple.system-library";
    *(void *)algn_1E8F5F168 = @"com.apple.local-library";
    qword_1E8F5F170 = @"com.apple.network-library";
    unk_1E8F5F178 = @"com.apple.user-library";
    qword_1E8F5F180 = @"com.apple.apple-internal-library";
  }
}

uint64_t ___ZL48_LSGetLibraryBundleIdentifierAndItemIndexForNodeP9LSContextP6FSNodePl_block_invoke(uint64_t result, unsigned int a2, int a3, unsigned char *a4)
{
  if (*(_DWORD *)(result + 40) == a3)
  {
    **(void **)(result + 32) = a2;
    *a4 = 1;
  }
  return result;
}

void ___ZL23getNeedsRegistrationLogv_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.launchservices", "needs-reg");
  id v1 = (void *)getNeedsRegistrationLog(void)::result;
  getNeedsRegistrationLog(void)::__n128 result = (uint64_t)v0;
}

uint64_t _LSServerCreateBundleDataAndRegister(LSContext *a1, LSRegistrationInfo *a2, NSData *a3, const __CFURL *a4, FSNode *a5, unsigned int *a6, const __CFArray **a7, unsigned __int8 *a8)
{
  uint64_t v15 = a2;
  uint64_t v16 = a3;
  kdebug_trace();
  id v17 = _LSCreateRegistrationData((uint64_t *)a1, v15, a4, a5, a7);
  kdebug_trace();
  kdebug_trace();
  uint64_t v19 = _LSServerItemInfoRegistration((id *)&a1->db, v15, v16, v17, (const __CFDictionary *)a5, a6, v18, 0, a8);
  uint64_t v20 = v19;
  if (a1 && !v19) {
    _LSDatabaseCommit((uint64_t)a1->db);
  }
  kdebug_trace();

  return v20;
}

void sub_182AA3FC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL23_LSRegisterDocumentTypeP11_LSDatabasejPK12LSBundleDataPK14__CFDictionaryP12NSDictionaryIP8NSStringPS7_IS9_S9_EEjP19LSBindingListBuffer_block_invoke(uint64_t result, uint64_t a2, int a3, unsigned char *a4)
{
  if ((a3 & 3) == 0 && (a3 & 0xFFFFFFFC) != 0)
  {
    uint64_t v5 = result;
    unsigned int v6 = *(_DWORD **)(result + 32);
    int v7 = *(unsigned int **)(result + 48);
    unsigned int v8 = v6[58];
    uint64_t v9 = _UTTypeGet();
    __n128 result = _LSBindingListBufferAppend(v6, v7, v8, *(_DWORD *)(v9 + 12));
    if (result)
    {
      *(unsigned char *)(*(void *)(*(void *)(v5 + 40) + 8) + 24) = 0;
      *a4 = 1;
    }
  }
  return result;
}

uint64_t ___ZL31_LSServerRegisterExtensionPointP11_LSDatabasejPK10__CFStringjPK14__CFDictionaryPK7__CFURL_block_invoke(uint64_t result, uint64_t a2, _DWORD *a3)
{
  if (a3)
  {
    uint64_t v3 = result;
    if (a3[45] == *(_DWORD *)(result + 60) && a3[5] == *(_DWORD *)(result + 100))
    {
      int v5 = a3[46];
      if (v5 != *(_DWORD *)(result + 132))
      {
        if (v5)
        {
          int v7 = *(void **)(*(void *)(*(void *)(result + 40) + 8) + 40);
          unsigned int v8 = objc_msgSend(NSNumber, "numberWithUnsignedInt:");
          uint64_t v9 = [NSNumber numberWithUnsignedInt:a2];
          [v7 setObject:v8 forKey:v9];
        }
        int v10 = *(void **)(*(void *)(*(void *)(v3 + 48) + 8) + 40);
        uint64_t v11 = [NSNumber numberWithUnsignedInt:a2];
        [v10 addObject:v11];

        _CSStringRetain();
        return _CSStoreWriteToUnit();
      }
    }
  }
  return result;
}

void sub_182AA41E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL31_LSServerRegisterExtensionPointP11_LSDatabasejPK10__CFStringjPK14__CFDictionaryPK7__CFURL_block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  unsigned int v6 = *(void **)(a1 + 32);
  int v7 = [v8 intValue];
  [v5 intValue];
  _LSBindableDeactivate(v6, v7);
  [v5 intValue];
  _CSStringRelease();
}

void sub_182AA42B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZL25_LSPluginRegisterWithInfoP11_LSDatabasePK14__CFDictionaryS3_hPS1_jj_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if (_NSIsNSString()
    && ([v6 hasPrefix:@"DT"] & 1) == 0
    && ([v6 isEqual:@"_LSLocalizedStringsDictionary"] & 1) == 0
    && ([v6 isEqual:@"_LSSliceInfosKey"] & 1) == 0)
  {
    [*(id *)(a1 + 32) setObject:v5 forKeyedSubscript:v6];
  }
}

void sub_182AA4378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZL25_LSPluginRegisterWithInfoP11_LSDatabasePK14__CFDictionaryS3_hPS1_jj_block_invoke_2(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  id v8 = a3;
  id v6 = objc_opt_class();
  int v7 = objc_opt_class();
  if ((_LSIsDictionaryWithKeysAndValuesOfClass(v8, v6, v7) & 1) == 0)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
    *a4 = 1;
  }
}

void sub_182AA4420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _LSPluginRegistration_CFDictionaryApplier(const __CFString *a1, CFDictionaryRef theDict, char *a3)
{
  unsigned int v11 = 0;
  if (!theDict)
  {
    CFDictionaryGetTypeID();
LABEL_7:
    CFStringRef Value = 0;
    goto LABEL_8;
  }
  CFStringRef Value = (__CFString *)CFDictionaryGetValue(theDict, @"NSExtensionAttributes");
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (Value && TypeID && CFGetTypeID(Value) != TypeID) {
    goto LABEL_7;
  }
LABEL_8:
  int v7 = _LSRegisterPlugin(*(_LSDatabase **)a3, (const LSPluginInfo *)(a3 + 8), Value, a1, *((const __CFString **)a3 + 27), *((const __CFDictionary **)a3 + 28), *((_DWORD *)a3 + 58), &v11);
  if (v7 || (unsigned int v8 = v11) == 0)
  {
    if (v7 == -10651) {
      return;
    }
    goto LABEL_15;
  }
  if (a3[236])
  {
LABEL_15:
    *((_DWORD *)a3 + 62) = v7;
    return;
  }
  uint64_t v9 = *(_LSDatabase **)a3;
  int v10 = (__CFDictionary *)*((void *)a3 + 30);

  LSPluginAddInfoToPayloadDict(v9, v10, v8, 1, 1);
}

void LSRegisterPluginState::~LSRegisterPluginState(id *this)
{
}

uint64_t _LSRegisterPlugin(_LSDatabase *a1, const LSPluginInfo *a2, __CFString *a3, const __CFString *a4, const __CFString *a5, const __CFDictionary *a6, int a7, unsigned int *a8)
{
  uint64_t v124 = *MEMORY[0x1E4F143B8];
  long long v13 = a1;
  long long v119 = 0u;
  memset(v120, 0, 60);
  long long v117 = 0u;
  long long v118 = 0u;
  long long v115 = 0u;
  long long v116 = 0u;
  memset(v114, 0, sizeof(v114));
  long long v112 = kLSVersionNumberNull;
  long long v113 = *(_OWORD *)algn_182AF9270;
  uint64_t v102 = 0;
  int v14 = *(_DWORD *)a2;
  unsigned int v87 = *((_DWORD *)a2 + 1);
  int v101 = 0;
  uint64_t v100 = 0;
  if (!a6 || (v86 = a5, v88 = v14, a3) && (CFTypeID v15 = CFGetTypeID(a3), v15 != CFDictionaryGetTypeID()))
  {
    uint64_t v42 = 0;
    uint64_t v30 = 4294967246;
    goto LABEL_139;
  }
  CFTypeRef cf = (__CFString *)CFDictionaryGetValue(a6, @"NSExtensionPointIdentifier");
  CFTypeID TypeID = CFStringGetTypeID();
  if (!cf || TypeID && CFGetTypeID(cf) != TypeID) {
    CFTypeRef cf = 0;
  }
  if (a3)
  {
    if (!CFDictionaryContainsKey((CFDictionaryRef)a3, @"NSExtensionPointName")
      || (CFStringRef Value = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)a3, @"NSExtensionPointName"),
          CFTypeID v18 = CFStringGetTypeID(),
          Value)
      && v18
      && CFGetTypeID(Value) != v18)
    {
      CFStringRef Value = 0;
    }
    if (!CFDictionaryContainsKey((CFDictionaryRef)a3, @"NSExtensionIdentifier")
      || (CFStringRef v19 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)a3, @"NSExtensionIdentifier"),
          CFTypeID v20 = CFStringGetTypeID(),
          v19)
      && v20
      && CFGetTypeID(v19) != v20)
    {
      CFStringRef v19 = 0;
    }
    if (!CFDictionaryContainsKey((CFDictionaryRef)a3, @"NSExtensionVersion")
      || (uint64_t v21 = (__CFString *)CFDictionaryGetValue((CFDictionaryRef)a3, @"NSExtensionVersion"),
          CFTypeID v22 = CFStringGetTypeID(),
          v21)
      && v22
      && CFGetTypeID(v21) != v22)
    {
      uint64_t v21 = 0;
    }
    if (!CFDictionaryContainsKey((CFDictionaryRef)a3, @"NSExtensionPointVersion")
      || (a3 = (__CFString *)CFDictionaryGetValue((CFDictionaryRef)a3, @"NSExtensionPointVersion"),
          CFTypeID v23 = CFStringGetTypeID(),
          a3)
      && v23
      && CFGetTypeID(a3) != v23)
    {
      a3 = 0;
    }
  }
  else
  {
    CFStringRef Value = 0;
    uint64_t v21 = 0;
    CFStringRef v19 = 0;
  }
  if (v19) {
    CFStringRef v24 = v19;
  }
  else {
    CFStringRef v24 = a4;
  }
  char v89 = (__CFString *)v24;
  uint64_t v25 = _LSBundleGet(v13, a7);
  if (!v25
    || (*(unsigned char *)(v25 + 179) & 0x10) == 0
    || cf && ([(__CFString *)cf isEqualToString:@"com.apple.widgetkit-extension"] & 1) != 0)
  {
    CFTypeID v26 = (void *)*((void *)a2 + 3);
    id v99 = 0;
    unsigned int v27 = _LSAliasAddURL(v13, v26, &v99);
    id v28 = v99;
    uint64_t v29 = v28;
    if (v27)
    {
    }
    else
    {
      uint64_t v30 = _LSGetOSStatusFromNSError(v28);

      if (v30) {
        goto LABEL_101;
      }
    }
    *(void *)&v114[0] = __PAIR64__(*((_DWORD *)a2 + 48), v27);
    if ([(id)__LSDefaultsGetSharedInstance() isInEducationMode]) {
      goto LABEL_44;
    }
    CFURLRef v31 = (void *)*((void *)a2 + 4);
    if (!v31) {
      goto LABEL_44;
    }
    id v98 = 0;
    int v32 = _LSAliasAddURL(v13, v31, &v98);
    id v33 = v98;
    CFTypeID v34 = v33;
    LODWORD(v115) = v32;
    if (v32)
    {

      goto LABEL_44;
    }
    uint64_t v30 = _LSGetOSStatusFromNSError(v33);

    if (!v30)
    {
LABEL_44:
      HIDWORD(v114[0]) = _LSDatabaseCreateStringForCFString(v13, *((const __CFString **)a2 + 5), 0);
      CFStringRef v35 = (const __CFString *)*((void *)a2 + 7);
      if (!v35)
      {
        if ((*((unsigned char *)a2 + 204) & 1) == 0) {
          goto LABEL_48;
        }
        CFStringRef v35 = @"0000000000";
      }
      LODWORD(v114[1]) = _LSDatabaseCreateStringForCFString(v13, v35, 0);
LABEL_48:
      if (cf) {
        CFStringRef v36 = cf;
      }
      else {
        CFStringRef v36 = Value;
      }
      int StringForCFString = _LSDatabaseCreateStringForCFString(v13, v89, 0);
      if (v21) {
        int v38 = v21;
      }
      else {
        int v38 = (__CFString *)v86;
      }
      HIDWORD(v119) = StringForCFString;
      _LSGetVersionFromString(v38, buf);
      *(_OWORD *)((char *)&v114[1] + 12) = *(_OWORD *)buf;
      *(_OWORD *)((char *)&v114[2] + 12) = *(_OWORD *)&buf[16];
      if (a3) {
        _LSGetVersionFromString(a3, buf);
      }
      else {
        memset(buf, 0, sizeof(buf));
      }
      *(_OWORD *)((char *)v120 + 12) = *(_OWORD *)buf;
      *(_OWORD *)((char *)&v120[1] + 12) = *(_OWORD *)&buf[16];
      DWORD1(v114[1]) = v87;
      if (Value)
      {
        int v39 = _LSDatabaseCreateStringForCFString(v13, Value, 0);
        goto LABEL_74;
      }
      if (_LSExtensionPointFindWithIdentifier(v13, v36, v87, 0, &v101, &v100) == -10814)
      {
        CFRange v40 = _LSRegistrationLog();
        if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 138412546;
          *(void *)&uint8_t buf[4] = v89;
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v36;
          _os_log_impl(&dword_182959000, v40, OS_LOG_TYPE_INFO, "Registering extension %@ but haven't yet registered extension point %@", buf, 0x16u);
        }
      }
      else
      {
        if (!a3
          || (*(_OWORD *)long long buf = *(_OWORD *)((char *)v120 + 12),
              *(_OWORD *)&uint8_t buf[16] = *(_OWORD *)((char *)&v120[1] + 12),
              long long v43 = *(_OWORD *)(v100 + 24),
              long long v122 = *(_OWORD *)(v100 + 8),
              long long v123 = v43,
              !_LSVersionNumberCompare(buf, &v122)))
        {
LABEL_70:
          if (v100 && (_CSStringRetain(), v100)) {
            int v39 = *(_DWORD *)(v100 + 40);
          }
          else {
            int v39 = 0;
          }
LABEL_74:
          DWORD2(v120[0]) = v39;
          DWORD1(v120[0]) = _LSDatabaseCreateStringForCFString(v13, v36, 0);
          DWORD1(v115) = _LSDatabaseCreateStringForCFString(v13, *((const __CFString **)a2 + 8), 0);
          HIDWORD(v115) = _LSDatabaseCreateStringForCFString(v13, *((const __CFString **)a2 + 9), 0);
          DWORD2(v114[0]) = _LSDatabaseCreateStringForCFString(v13, *((const __CFString **)a2 + 15), 0);
          HIDWORD(v116) = _LSDatabaseCreateStringForCFString(v13, *((const __CFString **)a2 + 10), 0);
          LODWORD(v117) = _LSDatabaseCreateStringForCFString(v13, *((const __CFString **)a2 + 11), 0);
          DWORD1(v117) = _LSDatabaseCreateStringForCFString(v13, *((const __CFString **)a2 + 12), 0);
          uint64_t v42 = [*((id *)a2 + 1) sortedArrayUsingSelector:sel_compare_];
          if ((*((unsigned char *)a2 + 204) & 0x20) != 0)
          {
            CFStringRef v49 = _LSAliasGet(v13, v114[0]);
            id v50 = (void *)[v49 mutableCopy];

            long long v96 = 0u;
            long long v97 = 0u;
            long long v94 = 0u;
            long long v95 = 0u;
            id v51 = v42;
            uint64_t v52 = [v51 countByEnumeratingWithState:&v94 objects:v107 count:16];
            if (v52)
            {
              uint64_t v53 = *(void *)v95;
              do
              {
                for (uint64_t i = 0; i != v52; ++i)
                {
                  if (*(void *)v95 != v53) {
                    objc_enumerationMutation(v51);
                  }
                  uint64_t v55 = [*(id *)(*((void *)&v94 + 1) + 8 * i) dataUsingEncoding:4];
                  [v50 appendData:v55];
                }
                uint64_t v52 = [v51 countByEnumeratingWithState:&v94 objects:v107 count:16];
              }
              while (v52);
            }

            CFTypeID v56 = objc_msgSend(MEMORY[0x1E4F29128], "_LS_UUIDWithData:digestType:", v50, 1);
            uint64_t v48 = [v56 UUIDString];
          }
          else
          {
            CFAllocatorRef v46 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
            CFUUIDRef v47 = CFUUIDCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
            uint64_t v48 = (__CFString *)CFUUIDCreateString(v46, v47);
            CFRelease(v47);
          }
          HIDWORD(v120[2]) = _LSDatabaseCreateStringForCFString(v13, v48, 0);
          if ([v42 count]) {
            int StringArray = _LSDatabaseCreateStringArray(v13, *((void **)a2 + 1), 0, 0);
          }
          else {
            int StringArray = 0;
          }
          long long v58 = (__CFString *)*((void *)a2 + 2);
          if (v58)
          {
            _LSGetVersionFromString(v58, buf);
            long long v112 = *(_OWORD *)buf;
            long long v113 = *(_OWORD *)&buf[16];
          }
          *(_OWORD *)((char *)&v114[3] + 12) = v112;
          *(_OWORD *)((char *)&v114[4] + 12) = v113;
          HIDWORD(v117) = _LSPlistAdd((uint64_t)v13, *((void **)a2 + 13));
          if (([(id)__LSDefaultsGetSharedInstance() isInEducationMode] & 1) == 0) {
            LODWORD(v118) = _LSPlistAdd((uint64_t)v13, *((void **)a2 + 14));
          }
          DWORD2(v117) = _LSPlistAdd((uint64_t)v13, *((void **)a2 + 16));
          HIDWORD(v114[5]) = StringArray;
          LODWORD(v120[3]) = a7;
          if ((*(unsigned char *)a2 & 4) != 0)
          {
            uint64_t v59 = _LSPluginFindWithInfo(v13, 0, *((const __CFString **)a2 + 6), 0, 0, &v102, 0);
            uint64_t v60 = v59;
            if (v59 && *(_DWORD *)(v59 + 184) != DWORD2(v120[0]))
            {
              uint64_t v30 = 0;
              v88 &= ~4u;
            }
            else
            {
              LODWORD(v120[0]) = _LSDatabaseCreateStringForCFString(v13, *((const __CFString **)a2 + 6), 0);
              if (v60)
              {
                LODWORD(v122) = *(_DWORD *)(v60 + 168) | 8;
                *(void *)long long buf = 0;
                if (_CSStoreWriteToUnit()) {
                  uint64_t v30 = 0;
                }
                else {
                  uint64_t v30 = _LSGetOSStatusFromNSError(*(void **)buf);
                }
              }
              else
              {
                uint64_t v30 = 0;
              }
            }
          }
          else
          {
            uint64_t v30 = 0;
            LODWORD(v120[0]) = 0;
          }
          WORD6(v118) = _LSSliceMaskForSliceArray(*((void **)a2 + 20));
          LODWORD(v119) = *((_DWORD *)a2 + 50);
          DWORD2(v119) = v88;
          BYTE4(v119) = *((unsigned char *)a2 + 204);
          long long v61 = (void *)MEMORY[0x18530F680]();
          uint64_t v62 = [[FSNode alloc] initWithURL:*((void *)a2 + 3) flags:0 error:0];
          BYTE4(v118) = _LSGetDirectoryClassForNode(v62);

          CFRange v63 = (void *)MEMORY[0x18530F680]();
          BOOL v64 = [*((id *)a2 + 17) objectForKeyedSubscript:*MEMORY[0x1E4F1CC48]];
          LODWORD(v116) = LaunchServices::LocalizedString::Add(v13, v64, *((void **)a2 + 9));

          __int16 v65 = (void *)MEMORY[0x18530F680]();
          uint64_t v66 = [*((id *)a2 + 17) objectForKeyedSubscript:*MEMORY[0x1E4F1D008]];
          DWORD2(v115) = LaunchServices::LocalizedString::Add(v13, v66, *((void **)a2 + 9));

          __int16 v67 = (void *)MEMORY[0x18530F680]();
          CFDictionaryRef v68 = [*((id *)a2 + 17) objectForKeyedSubscript:@"NSMicrophoneUsageDescription"];
          DWORD1(v116) = LaunchServices::LocalizedString::Add(v13, v68, *((void **)a2 + 18));

          DWORD2(v118) = _LSPlistAdd((uint64_t)v13, *((void **)a2 + 19));
          BYTE5(v118) = *((unsigned char *)a2 + 196);
          long long v105 = *(_OWORD *)((char *)&v114[3] + 12);
          long long v106 = *(_OWORD *)((char *)&v114[4] + 12);
          int v69 = DWORD1(v114[1]) - 1;
          if ((DWORD1(v114[1]) - 1) > 0xA)
          {
            uint64_t v70 = -1;
            uint64_t v71 = -1;
            uint64_t v72 = -1;
          }
          else
          {
            uint64_t v70 = qword_182AF90D0[v69];
            uint64_t v71 = qword_182AF9128[v69];
            uint64_t v72 = qword_182AF9180[v69];
          }
          _LSMakeVersionNumber(v70, v71, v72, v121);
          *(_OWORD *)long long buf = v105;
          *(_OWORD *)&uint8_t buf[16] = v106;
          long long v122 = v121[0];
          long long v123 = v121[1];
          if ((unint64_t)_LSVersionNumberCompare(buf, &v122) > 1)
          {
            CFStringRef v75 = 0;
          }
          else
          {
            CFArrayRef v73 = (const __CFArray *)*((void *)a2 + 22);
            if (v73) {
              CFIndex Count = CFArrayGetCount(v73);
            }
            else {
              CFIndex Count = 0;
            }
            CFArrayRef v76 = (const __CFArray *)*((void *)a2 + 23);
            if (v76) {
              CFArrayRef v76 = (const __CFArray *)CFArrayGetCount(v76);
            }
            CFStringRef v75 = (char *)v76 + Count;
          }
          DWORD1(v120[3]) = _LSDatabaseCreateStringForCFString(v13, *((const __CFString **)a2 + 21), 0);
          if (v75) {
            int v77 = _CSArrayCreateWithCapacity();
          }
          else {
            int v77 = 0;
          }
          DWORD2(v120[3]) = v77;
          v103[12] = v120[1];
          v104[0] = v120[2];
          v103[8] = v117;
          v103[9] = v118;
          v103[10] = v119;
          v103[11] = v120[0];
          v103[4] = v114[4];
          v103[5] = v114[5];
          v103[6] = v115;
          v103[7] = v116;
          v103[0] = v114[0];
          v103[1] = v114[1];
          v103[2] = v114[2];
          v103[3] = v114[3];
          *(_OWORD *)((char *)v104 + 12) = *(_OWORD *)((char *)&v120[2] + 12);
          uint64_t v78 = _LSPluginAdd(v13, (uint64_t)v103);
          HIDWORD(v102) = v78;
          if (v78)
          {
            if (DWORD2(v120[3]))
            {
              if (a7) {
                _LSBundleGet(v13, a7);
              }
              _LSRegisterTypeDeclarationsForPlugin(v13, v78, (uint64_t)v114, *((const void **)a2 + 23), *((void **)a2 + 17));
              _LSRegisterTypeDeclarationsForPlugin(v13, v78, (uint64_t)v114, *((const void **)a2 + 22), *((void **)a2 + 17));
            }
            uint64_t v79 = _LSBundleGet(v13, a7);
            if (!v79) {
              goto LABEL_131;
            }
            if (*(_DWORD *)(v79 + 476))
            {
              _CSArrayAppendValue();
              goto LABEL_131;
            }
            *(void *)long long buf = 0;
            LODWORD(v122) = _CSArrayCreate();
            if (!v122 && (uint64_t v30 = _LSGetOSStatusFromNSError(*(void **)buf), v30))
            {
            }
            else
            {
              if (_CSStoreWriteToUnit())
              {

LABEL_130:
                uint64_t v30 = 0;
LABEL_131:
                if (([(id)__LSDefaultsGetSharedInstance() isLightweightSystemServer] & 1) == 0)
                {
                  CFTypeID v80 = (void *)IconServicesLibrary(void)::frameworkLibrary;
                  if (!IconServicesLibrary(void)::frameworkLibrary)
                  {
                    CFTypeID v80 = dlopen("/System/Library/PrivateFrameworks/IconServices.framework/IconServices", 2);
                    IconServicesLibrary(void)::frameworkLibrary = (uint64_t)v80;
                  }
                  if (v89 && v80)
                  {
                    CFTypeID v81 = v89;
                    CFTypeID v82 = _LSGetPluginNotificationAndIconCacheQueue();
                    block[0] = MEMORY[0x1E4F143A8];
                    block[1] = 3221225472;
                    block[2] = ___ZL17_LSRegisterPluginP11_LSDatabaseRK12LSPluginInfoPK14__CFDictionaryPK10__CFStringS9_S6_jPj_block_invoke;
                    block[3] = &unk_1E522D3E8;
                    id v83 = v81;
                    CFTypeID v93 = v83;
                    dispatch_async(v82, block);
                  }
                }
                goto LABEL_137;
              }
              uint64_t v30 = _LSGetOSStatusFromNSError(*(void **)buf);

              if (!v30) {
                goto LABEL_130;
              }
            }
          }
          else
          {
            uint64_t v30 = 4294956479;
          }
LABEL_137:
          if (v48) {
            CFRelease(v48);
          }
          goto LABEL_139;
        }
        CFRange v40 = _LSRegistrationLog();
        if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
        {
          long long v44 = *(_OWORD *)(v100 + 24);
          v108[0] = *(_OWORD *)(v100 + 8);
          v108[1] = v44;
          _LSVersionNumberGetStringRepresentation(v108);
          id v45 = (id)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)long long buf = 138413058;
          *(void *)&uint8_t buf[4] = v89;
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = a3;
          *(_WORD *)&unsigned char buf[22] = 2112;
          *(void *)&unsigned char buf[24] = v36;
          __int16 v110 = 2112;
          id v111 = v45;
          _os_log_impl(&dword_182959000, v40, OS_LOG_TYPE_INFO, "Extension %@ specified NSExtensionPointVersion %@ that does not match the active extensionPoint <%@:%@>", buf, 0x2Au);
        }
      }

      goto LABEL_70;
    }
LABEL_101:
    uint64_t v42 = 0;
    goto LABEL_139;
  }
  CFAllocatorRef v41 = _LSInstallLog();
  if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR)) {
    _LSRegisterPlugin((uint64_t)v89, (uint64_t)cf, v41);
  }

  uint64_t v42 = 0;
  uint64_t v30 = 4294956645;
LABEL_139:
  if (HIDWORD(v102)) {
    *a8 = HIDWORD(v102);
  }

  return v30;
}

void sub_182AA54B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void LSPluginInfo::~LSPluginInfo(id *this)
{
}

void ___ZL17_LSRegisterPluginP11_LSDatabaseRK12LSPluginInfoPK14__CFDictionaryPK10__CFStringS9_S6_jPj_block_invoke(uint64_t a1)
{
  int v2 = (void *)MEMORY[0x18530F680]();
  softLink_ISInvalidateCacheEntriesForBundleIdentifier(*(NSString **)(a1 + 32));
}

void sub_182AA5744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZL61_LSFindExistingRegisteredBundleWithContainerMatchingAliasDataP11_LSDatabasejP6NSDataPj_block_invoke(uint64_t a1, int a2, int *a3, uint64_t a4, unsigned char *a5)
{
  if (!a3) {
    return;
  }
  if (a3[80] != *(_DWORD *)(a1 + 64)) {
    return;
  }
  int v9 = *(_DWORD *)(a1 + 68);
  if (v9)
  {
    if (v9 != a3[1]) {
      return;
    }
  }
  int v10 = _LSAliasGet(*(void **)(a1 + 32), *a3);
  if (v10)
  {
    id v17 = v10;
    int v11 = +[FSNode compareBookmarkData:*(void *)(a1 + 40) toBookmarkData:v10];
    int v10 = v17;
    if (!v11)
    {
LABEL_12:
      uint64_t v16 = *(_DWORD **)(a1 + 56);
      if (v16) {
        *uint64_t v16 = a2;
      }
      *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = a3;
      *a5 = 1;
      goto LABEL_17;
    }
    if (v11 == 2)
    {
      long long v12 = +[FSNode pathForBookmarkData:*(void *)(a1 + 40) error:0];
      long long v13 = +[FSNode pathForBookmarkData:v17 error:0];
      int v14 = v13;
      if (*(_DWORD *)(a1 + 68) == a3[1] && v12 && v13)
      {
        char v15 = [v12 isEqualToString:v13];

        int v10 = v17;
        if (v15) {
          goto LABEL_12;
        }
      }
      else
      {

        int v10 = v17;
      }
    }
  }
LABEL_17:
}

void sub_182AA58D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _LSLogStep(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6)
{
  id v13 = a4;
  id v11 = a5;
  if (v11) {
    long long v12 = (void *)[[NSString alloc] initWithFormat:v11 arguments:a6];
  }
  else {
    long long v12 = 0;
  }
  [(id)getAITransactionLogClass() logStep:a1 byParty:5 phase:a2 success:a3 forBundleID:v13 description:v12];
}

{
  id v11;
  void *v12;
  id v13;
  uint64_t vars8;

  id v13 = a4;
  id v11 = a5;
  if (v11) {
    long long v12 = (void *)[[NSString alloc] initWithFormat:v11 arguments:a6];
  }
  else {
    long long v12 = 0;
  }
  [(id)getAITransactionLogClass() logStep:a1 byParty:5 phase:a2 success:a3 forBundleID:v13 description:v12];
}

void sub_182AA59CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

Class initAITransactionLog(void)
{
  if (!MobileInstallationLibrary(void)::frameworkLibrary) {
    MobileInstallationLibrary(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/MobileInstallation.framework/MobileInstallation", 2);
  }
  Class result = objc_getClass("AITransactionLog");
  classAITransactionLog = (uint64_t)result;
  getAITransactionLogClass = (uint64_t (*)(void))AITransactionLogFunction;
  return result;
}

{
  Class result;

  if (!MobileInstallationLibrary(void)::frameworkLibrary) {
    MobileInstallationLibrary(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/MobileInstallation.framework/MobileInstallation", 2);
  }
  Class result = objc_getClass("AITransactionLog");
  classAITransactionLog = (uint64_t)result;
  getAITransactionLogClass = (uint64_t (*)(void))AITransactionLogFunction;
  return result;
}

{
  Class result;

  if (!MobileInstallationLibrary(void)::frameworkLibrary) {
    MobileInstallationLibrary(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/MobileInstallation.framework/MobileInstallation", 2);
  }
  Class result = objc_getClass("AITransactionLog");
  classAITransactionLog = (uint64_t)result;
  getAITransactionLogClass = (uint64_t (*)(void))AITransactionLogFunction;
  return result;
}

id AITransactionLogFunction(void)
{
  return (id)classAITransactionLog;
}

{
  return (id)classAITransactionLog;
}

{
  return (id)classAITransactionLog;
}

__CFDictionary *_LSCreateRegistrationDataForDirectoryNode(LSContext *a1, LSRegistrationInfo *a2, const __CFURL *a3, _LSBundleProvider *a4, FSNode *a5, const __CFArray **a6, const __CFArray **a7)
{
  uint64_t v196 = *MEMORY[0x1E4F143B8];
  id v170 = a2;
  CFURLRef v9 = a3;
  BOOL v176 = a4;
  CFURLRef v171 = v9;
  int v10 = [(__CFURL *)v9 infoDictionary];
  CFMutableDictionaryRef Mutable = copyDeepMutableDictionary(v10);

  if (!Mutable) {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  CFDictionaryRef theDict = Mutable;
  if (!CFDictionaryGetCount(Mutable)) {
    CFDictionaryAddValue(Mutable, @"_LSInfoPlistIsMissing", (const void *)*MEMORY[0x1E4F1CFD0]);
  }
  CFDictionaryRemoveValue(Mutable, @"LSIsSecuredSystemContent");
  if ([(_LSBundleProvider *)v176 isSecuredSystemContent]) {
    CFDictionaryAddValue(Mutable, @"LSIsSecuredSystemContent", (const void *)*MEMORY[0x1E4F1CFD0]);
  }
  long long v12 = v176;
  if (a5
    && (CFStringRef Value = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)a5, @"BundleContainer"),
        CFTypeID TypeID = CFStringGetTypeID(),
        Value)
    && (!TypeID || CFGetTypeID(Value) == TypeID))
  {
    CFURLRef v15 = CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x1E4F1CF80], Value, kCFURLPOSIXPathStyle, 1u);
    CFDictionaryRef v16 = (const __CFDictionary *)_LSCopyiTunesMetadataDictionaryForAppContainerURL(v15);
    if (v15) {
      CFRelease(v15);
    }

    if (v16)
    {
      _LSPromoteiTunesMetadataKeys(v16, theDict);
      CFRelease(v16);
    }
  }
  else
  {
  }
  id v17 = (void *)MEMORY[0x18530F680]();
  CFTypeID v18 = (const void *)[NSNumber numberWithUnsignedChar:_LSGetDirectoryClassForNode(v12)];
  CFDictionaryAddValue(theDict, @"_LSDirectoryClass", v18);
  CFStringRef v19 = v171;
  CFTypeID v20 = *(const void **)[(_LSBundleProvider *)v19 provider];
  if (v20)
  {
    CFURLRef v21 = (const __CFURL *)CFRetain(v20);
    CFURLRef v22 = v21;
    if (v21)
    {
      CFStringRef v24 = CFURLCopyFileSystemPath(v21, kCFURLPOSIXPathStyle);
      if (v24)
      {
        _LSPathifyIconKey(v19, theDict, (const __CFString *)*MEMORY[0x1E4F1CC58], v23);
        _LSPathifyIconKeysInPlistKey(v19, theDict, (const __CFString *)*MEMORY[0x1E4F1CC50], (const __CFString *)*MEMORY[0x1E4F1CC88], v25);
        _LSPathifyIconKeysInPlistKey(v19, theDict, (const __CFString *)*MEMORY[0x1E4F1CCB8], (const __CFString *)*MEMORY[0x1E4F1CCA0], v26);
        _LSPathifyIconKeysInPlistKey(v19, theDict, @"UTExportedTypeDeclarations", @"UTTypeIconFile", v27);
        _LSPathifyIconKeysInPlistKey(v19, theDict, @"UTImportedTypeDeclarations", @"UTTypeIconFile", v28);
        CFRelease(v24);
      }
      CFRelease(v22);
    }
  }

  long long v181 = v12;
  *(_DWORD *)long long buf = 0;
  LODWORD(v190) = 0;
  uint64_t v29 = (const void *)*MEMORY[0x1E4F1CC60];
  if (theDict) {
    BOOL v30 = v29 == 0;
  }
  else {
    BOOL v30 = 1;
  }
  char v31 = !v30;
  if (v30)
  {
    CFStringGetTypeID();
  }
  else
  {
    CFStringRef v32 = (const __CFString *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F1CC60]);
    CFTypeID v33 = CFStringGetTypeID();
    if (!v32 || !v33 || CFGetTypeID(v32) == v33) {
      goto LABEL_34;
    }
  }
  CFStringRef v32 = 0;
LABEL_34:
  unsigned int v34 = _LSGetRawOSTypeForPossibleString(v32);
  CFStringRef v35 = (const void *)*MEMORY[0x1E4F1CC78];
  if (theDict) {
    BOOL v36 = v35 == 0;
  }
  else {
    BOOL v36 = 1;
  }
  char v37 = !v36;
  char v182 = v37;
  if (v36)
  {
    CFStringGetTypeID();
LABEL_46:
    CFStringRef v38 = 0;
    goto LABEL_47;
  }
  CFStringRef v38 = (const __CFString *)CFDictionaryGetValue(theDict, v35);
  CFTypeID v39 = CFStringGetTypeID();
  if (v38 && v39 && CFGetTypeID(v38) != v39) {
    goto LABEL_46;
  }
LABEL_47:
  unsigned int v40 = _LSGetRawOSTypeForPossibleString(v38);
  if (([(_LSBundleProvider *)v181 getHFSType:buf creator:&v190 error:0] & 1) == 0) {
    goto LABEL_102;
  }
  int v41 = [(_LSBundleProvider *)v181 isDirectory];
  if (*(_DWORD *)buf != v34)
  {
    if (v31)
    {
      CFStringRef v42 = (const __CFString *)CFDictionaryGetValue(theDict, v29);
      CFTypeID v43 = CFStringGetTypeID();
      if (!v42 || !v43 || CFGetTypeID(v42) == v43)
      {
LABEL_56:
        if (!gLogRegistrationErrors)
        {
LABEL_71:
          if (*(_DWORD *)buf)
          {
            CFStringRef v54 = _LSCopyStringForOSType(*(unsigned int *)buf);
            if (v54)
            {
              CFDictionarySetValue(theDict, v29, v54);
              CFRelease(v54);
            }
          }
          else
          {
            CFDictionaryRemoveValue(theDict, v29);
          }
          goto LABEL_75;
        }
        CFStringRef v44 = _LSCopyStringForOSType(*(unsigned int *)buf);
        id v45 = (__CFString *)v44;
        if (v42)
        {
          CFStringRef v46 = _LSCopyStringForOSType(v34);
          CFUUIDRef v47 = (__CFString *)v46;
          CFAllocatorRef v48 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          CFStringRef v49 = "file";
          if (v41) {
            CFStringRef v49 = "PkgInfo";
          }
          id v50 = (__CFString *)CFStringCreateWithFormat(v48, 0, @"Type mismatch: %s type = '%@', plist CFBundlePackageType = '%@'", v49, v45, v46);

          if (!v50) {
            goto LABEL_66;
          }
        }
        else
        {
          CFAllocatorRef v48 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          id v51 = "file";
          if (v41) {
            id v51 = "PkgInfo";
          }
          id v50 = (__CFString *)CFStringCreateWithFormat(v48, 0, @"Type mismatch: %s type = '%@', plist CFBundlePackageType is missing", v51, v44);
          if (!v50) {
            goto LABEL_66;
          }
        }
        _LSRegistrationWarning(v181, v50);
        CFRelease(v50);
LABEL_66:
        if (v42)
        {
          if (CFStringGetLength(v42) != 4)
          {
            CFIndex Length = CFStringGetLength(v42);
            uint64_t v53 = (__CFString *)CFStringCreateWithFormat(v48, 0, @"Value for CFBundlePackageType key has incorrect length %ld (should be 4)", Length);
            if (v53)
            {
              _LSRegistrationWarning(v181, v53);
              CFRelease(v53);
            }
          }
        }

        goto LABEL_71;
      }
    }
    else
    {
      CFStringGetTypeID();
    }
    CFStringRef v42 = 0;
    goto LABEL_56;
  }
LABEL_75:
  if (v190 == v40) {
    goto LABEL_102;
  }
  if ((v182 & 1) == 0)
  {
    CFStringGetTypeID();
LABEL_82:
    CFStringRef v55 = 0;
    goto LABEL_83;
  }
  CFStringRef v55 = (const __CFString *)CFDictionaryGetValue(theDict, v35);
  CFTypeID v56 = CFStringGetTypeID();
  if (v55 && v56 && CFGetTypeID(v55) != v56) {
    goto LABEL_82;
  }
LABEL_83:
  if (gLogRegistrationErrors)
  {
    CFStringRef v57 = _LSCopyStringForOSType(v190);
    long long v58 = (__CFString *)v57;
    if (v55)
    {
      CFStringRef v59 = _LSCopyStringForOSType(v40);
      uint64_t v60 = (__CFString *)v59;
      CFAllocatorRef v61 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      uint64_t v62 = "file";
      if (v41) {
        uint64_t v62 = "PkgInfo";
      }
      CFRange v63 = (__CFString *)CFStringCreateWithFormat(v61, 0, @"Signature mismatch: %s signature = '%@', plist CFBundleSignature = '%@'", v62, v58, v59);

      if (!v63) {
        goto LABEL_93;
      }
    }
    else
    {
      CFAllocatorRef v61 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      BOOL v64 = "file";
      if (v41) {
        BOOL v64 = "PkgInfo";
      }
      CFRange v63 = (__CFString *)CFStringCreateWithFormat(v61, 0, @"Signature mismatch: %s signature = '%@', plist CFBundleSignature is missing", v64, v57);
      if (!v63) {
        goto LABEL_93;
      }
    }
    _LSRegistrationWarning(v181, v63);
    CFRelease(v63);
LABEL_93:
    if (v55)
    {
      if (CFStringGetLength(v55) != 4)
      {
        CFIndex v65 = CFStringGetLength(v55);
        uint64_t v66 = (__CFString *)CFStringCreateWithFormat(v61, 0, @"Value for CFBundleSignature key has incorrect length %ld (should be 4)", v65);
        if (v66)
        {
          _LSRegistrationWarning(v181, v66);
          CFRelease(v66);
        }
      }
    }
  }
  if (v190)
  {
    CFStringRef v67 = _LSCopyStringForOSType(v190);
    if (v67)
    {
      CFDictionarySetValue(theDict, v35, v67);
      CFRelease(v67);
    }
  }
  else
  {
    CFDictionaryRemoveValue(theDict, v35);
  }
LABEL_102:

  CFDictionaryRef v68 = v19;
  long long v180 = v170;
  long long v183 = v68;
  int v69 = *(const void **)[(_LSBundleProvider *)v68 provider];
  if (v69)
  {
    CFTypeRef v70 = CFRetain(v69);
    if (v70)
    {
      if (a5)
      {
        CFBooleanRef v71 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)a5, @"IsPlaceholder");
        CFTypeID v72 = CFBooleanGetTypeID();
        if (v71)
        {
          if (!v72 || CFGetTypeID(v71) == v72)
          {
            if (CFBooleanGetValue(v71))
            {
              CFArrayRef v73 = _LSRegistrationLog();
              if (os_log_type_enabled(v73, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)long long buf = 138477827;
                *(void *)&uint8_t buf[4] = v70;
                _os_log_impl(&dword_182959000, v73, OS_LOG_TYPE_DEBUG, "bundle at %{private}@ is a placeholder; skipping executable lookup",
                  buf,
                  0xCu);
              }
LABEL_111:

LABEL_155:
              CFRelease(v70);
              goto LABEL_156;
            }
          }
        }
      }
      BOOL v74 = LSBundleProvider::CFBundleCopyExecutableURL((LSBundleProvider *)[(_LSBundleProvider *)v183 provider]);
      if (!v74)
      {
        CFArrayRef v73 = _LSRegistrationLog();
        if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 138477827;
          *(void *)&uint8_t buf[4] = v70;
          _os_log_impl(&dword_182959000, v73, OS_LOG_TYPE_ERROR, "Failed to register bundle %{private}@ because no satisfactory executable could be found.", buf, 0xCu);
        }
        goto LABEL_111;
      }
      if (theDict && *MEMORY[0x1E4F1CFF0])
      {
        CFStringRef v75 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F1CFF0]);
        CFTypeID v76 = CFStringGetTypeID();
        if (v75 && (!v76 || CFGetTypeID(v75) == v76))
        {
          CFStringRef PathComponent = CFURLCopyLastPathComponent(v74);
          CFStringRef v78 = PathComponent;
          if (PathComponent)
          {
            if (CFEqual(PathComponent, v75) || (uint64_t v79 = _CFBundleCopyExecutableURLInDirectory()) == 0) {
              uint64_t v79 = (uint64_t)v74;
            }
            else {
              CFRelease(v74);
            }
            BOOL v74 = (__CFBundle *)v79;
            CFRelease(v78);
          }
        }
      }
      else
      {
        CFStringGetTypeID();
      }
      CFURLRef v80 = CFURLCopyAbsoluteURL((CFURLRef)v70);
      CFStringRef v81 = CFURLCopyFileSystemPath(v80, kCFURLPOSIXPathStyle);
      CFURLRef v82 = CFURLCopyAbsoluteURL(v74);
      if (v80) {
        CFRelease(v80);
      }
      CFStringRef v83 = CFURLCopyFileSystemPath(v82, kCFURLPOSIXPathStyle);
      CFStringRef v84 = v83;
      if (v81)
      {
        if (v83)
        {
          CFStringRef v85 = _LSCopyPathRelativeToBase(v83, v81);
          if (v85) {
            CFDictionaryAddValue(theDict, @"_LSExecutablePath", v85);
          }
          CFStringRef v86 = [[FSNode alloc] initWithURL:v74 flags:1 error:0];
          unsigned int v87 = v86;
          if (v86)
          {
            if ([(FSNode *)v86 isResolvable])
            {
              int v88 = [(FSNode *)v87 resolvedNodeWithFlags:0 error:0];
              char v89 = v88;
              if (v88)
              {
                int v90 = v88;

                unsigned int v87 = v90;
              }
            }
            _LSAddExecutableFormatInfo();
            if (![(FSNode *)v87 getInodeNumber:&v180->inoExec error:0])
            {
              BOOL v91 = _LSRegistrationLog();
              if (os_log_type_enabled(v91, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)long long buf = 138739971;
                *(void *)&uint8_t buf[4] = v87;
                _os_log_impl(&dword_182959000, v91, OS_LOG_TYPE_ERROR, "Unable to get iNode for executable %{sensitive}@", buf, 0xCu);
              }
            }
            if (![(FSNode *)v87 getContentModificationDate:&v180->executableModDate error:0])
            {
              char v92 = _LSRegistrationLog();
              if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)long long buf = 138739971;
                *(void *)&uint8_t buf[4] = v87;
                _os_log_impl(&dword_182959000, v92, OS_LOG_TYPE_ERROR, "Unable to get modification date for bundle executable, %{sensitive}@", buf, 0xCu);
              }
            }
          }

          if (v85) {
            CFRelease(v85);
          }
          CFRelease(v84);
        }
        CFStringRef v84 = v81;
      }
      else if (!v83)
      {
        goto LABEL_152;
      }
      CFRelease(v84);
LABEL_152:
      if (v82) {
        CFRelease(v82);
      }
      CFRelease(v74);
      goto LABEL_155;
    }
  }
LABEL_156:

  CFURLRef v93 = [(_LSBundleProvider *)v181 URL];
  CFURLRef v94 = v93;
  if (softLink_GSIsDocumentRevision)
  {
    BOOL v95 = softLink_GSIsDocumentRevision(v93) == 0;

    if (!v95) {
      CFDictionaryAddValue(theDict, @"_LSBundleIsInGenerationalStorage", (const void *)*MEMORY[0x1E4F1CFD0]);
    }
  }
  else
  {
  }
  long long v96 = LSBundleProvider::intentURLPaths((LSBundleProvider *)[(_LSBundleProvider *)v183 provider]);
  if (v96) {
    CFDictionaryAddValue(theDict, @"_LSIntentDefinitionURLs", v96);
  }

  long long v97 = LSBundleProvider::XCFBundleCopyFolderURL((LSBundleProvider *)[(_LSBundleProvider *)v183 provider], @"Library/");
  if (v97)
  {
    _LSAddBundleLibraryInfo(a1, v97, v183, v180, theDict, 0, a6);
    CFRelease(v97);
  }
  if (a6 && !*a6 && (v180->options & 0x10000000) != 0)
  {
    CFURLRef v98 = CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x1E4F1CF80], @"/System/Library/CoreServices/CoreTypes.bundle/", kCFURLPOSIXPathStyle, 1u);
    id v99 = [[_LSBundleProvider alloc] initWithURL:v98 useCacheIfPossible:1];
    uint64_t v100 = v99;
    if (v99)
    {
      int v101 = LSBundleProvider::XCFBundleCopyFolderURL((LSBundleProvider *)[(_LSBundleProvider *)v99 provider], @"Library/");
      if (v101)
      {
        _LSAddBundleLibraryInfo(a1, v101, v100, v180, theDict, 0, a6);
        CFRelease(v101);
      }
    }

    if (v98) {
      CFRelease(v98);
    }
  }
  if (LSBundleProvider::CFBundleGetIdentifier((LSBundleProvider *)[(_LSBundleProvider *)v183 provider]))
  {
    if ((CFTypeID v102 = CFStringGetTypeID(),
          id v103 = (__CFString *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F1D020]),
          (int v104 = v103) != 0)
      && CFGetTypeID(v103) == v102
      || (CFTypeID v105 = CFStringGetTypeID(),
          long long v106 = (__CFString *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F1CC70]),
          (int v104 = v106) != 0)
      && CFGetTypeID(v106) == v105)
    {
      _LSGetVersionFromString(v104, buf);
    }
  }
  BOOL v107 = LSUseLegacyLocalizationList(theDict);
  +[_LSStringLocalizer gatherLocalizedStringsForCFBundle:LSBundleProvider::bundleRef((LSBundleProvider *)[(_LSBundleProvider *)v183 provider], 1, "making string localizer") infoDictionary:theDict domains:0xFFFFFFFFLL delegatesMightBeMainBundle:0 legacyLocalizationList:v107];
  CFTypeRef cfa = LSBundleProvider::XCFBundleCopyFolderURL((LSBundleProvider *)[(_LSBundleProvider *)v183 provider], @"Extensions/");
  if (cfa)
  {
    if ([(id)__LSDefaultsGetSharedInstance() allowsUnentitledExtensionPointDeclaration])
    {
      context = (void *)MEMORY[0x18530F680]();
      CFDictionaryRef v186 = (CFDictionaryRef)objc_opt_new();
      uint64_t v108 = *MEMORY[0x1E4F1C670];
      v194[0] = *MEMORY[0x1E4F1C670];
      id v168 = [MEMORY[0x1E4F1C978] arrayWithObjects:v194 count:1];
      int v109 = [MEMORY[0x1E4F28CB8] defaultManager];
      __int16 v110 = [v109 enumeratorAtURL:cfa includingPropertiesForKeys:v168 options:1 errorHandler:0];

      long long v192 = 0u;
      long long v193 = 0u;
      long long v190 = 0u;
      long long v191 = 0u;
      id v111 = v110;
      uint64_t v112 = [v111 countByEnumeratingWithState:&v190 objects:buf count:16];
      if (v112)
      {
        uint64_t v113 = *(void *)v191;
        do
        {
          for (uint64_t i = 0; i != v112; ++i)
          {
            if (*(void *)v191 != v113) {
              objc_enumerationMutation(v111);
            }
            long long v115 = *(void **)(*((void *)&v190 + 1) + 8 * i);
            long long v116 = (void *)MEMORY[0x18530F680]();
            id v189 = 0;
            int v117 = [v115 getResourceValue:&v189 forKey:v108 error:0];
            id v118 = v189;
            long long v119 = v118;
            if (v118) {
              int v120 = v117;
            }
            else {
              int v120 = 0;
            }
            if (v120 != 1 || ([v118 BOOLValue] & 1) != 0)
            {
              long long v121 = [v115 pathExtension];
              long long v122 = v121;
              if (v121
                && (![v121 caseInsensitiveCompare:@"appexpt"]
                 || ![v122 caseInsensitiveCompare:@"appextensionpoint"]
                 || ![v122 caseInsensitiveCompare:@"appextensionpoints"]))
              {
                [(__CFDictionary *)v186 addObject:v115];
              }
            }
          }
          uint64_t v112 = [v111 countByEnumeratingWithState:&v190 objects:buf count:16];
        }
        while (v112);
      }

      if ([(__CFDictionary *)v186 count])
      {
        long long v123 = (void *)[(__CFDictionary *)v186 copy];
        [(__CFDictionary *)theDict setObject:v123 forKey:@"_LSBundleExtensionPoints"];
      }
    }
    CFRelease(cfa);
  }
  if (v180->action == 204)
  {
    uint64_t v124 = *(const void **)[(_LSBundleProvider *)v183 provider];
    if (v124)
    {
      CFURLRef v125 = (const __CFURL *)CFRetain(v124);
      CFURLRef v126 = v125;
      if (v125)
      {
        CFStringRef v127 = CFURLCopyFileSystemPath(v125, kCFURLPOSIXPathStyle);
        CFDictionarySetValue(theDict, @"Path", v127);
        CFRelease(v126);
        CFRelease(v127);
      }
    }
    goto LABEL_226;
  }
  CFTypeRef v128 = a5;
  if (a5)
  {
    CFDictionaryRef v187 = (CFDictionaryRef)v128;
    uint64_t v129 = [(FSNode *)v128 objectForKey:@"_LSBundlePlugins"];
    if (!v129 || !_NSIsNSDictionary() || ![v129 count])
    {

      goto LABEL_226;
    }
    CFAllocatorRef cfb = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    v130 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    CFDictionaryRef v178 = (CFDictionaryRef)v129;
    CFStringRef v131 = [v129 allValues];
    long long v192 = 0u;
    long long v193 = 0u;
    long long v190 = 0u;
    long long v191 = 0u;
    id v132 = v131;
    uint64_t v133 = [v132 countByEnumeratingWithState:&v190 objects:buf count:16];
    if (v133)
    {
      uint64_t v134 = *(void *)v191;
      do
      {
        for (uint64_t j = 0; j != v133; ++j)
        {
          if (*(void *)v191 != v134) {
            objc_enumerationMutation(v132);
          }
          CFTypeRef v136 = [*(id *)(*((void *)&v190 + 1) + 8 * j) objectForKey:@"Path"];
          CFTypeRef v137 = (void *)[objc_alloc(MEMORY[0x1E4F1CB10]) initFileURLWithPath:v136 isDirectory:1];
          LSBundleProvider::LSBundleProvider((LSBundleProvider *)v194, v137);
          if (LSBundleProvider::bundleRef((LSBundleProvider *)v194, 1, "checking for validity"))
          {
            CFTypeRef v138 = (const void *)LSBundleProvider::bundleRef((LSBundleProvider *)v194, 1, 0);
            CFArrayAppendValue(v130, v138);
          }
          LSBundleProvider::~LSBundleProvider((LSBundleProvider *)v194);
        }
        uint64_t v133 = [v132 countByEnumeratingWithState:&v190 objects:buf count:16];
      }
      while (v133);
    }

    if (v130)
    {
      if (theDict)
      {
        id v169 = (void *)CFDictionaryGetValue(theDict, @"_LSBundlePlugins");
        CFTypeID v139 = CFDictionaryGetTypeID();
        if (v169 && (!v139 || CFGetTypeID(v169) == v139)) {
          goto LABEL_231;
        }
      }
      else
      {
        CFDictionaryGetTypeID();
      }
      if (CFArrayGetCount(v130) < 1)
      {
        id v169 = 0;
      }
      else
      {
        id v169 = CFDictionaryCreateMutable(cfb, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        CFDictionarySetValue(theDict, @"_LSBundlePlugins", v169);
        CFRelease(v169);
      }
LABEL_231:
      CFTypeID v141 = CFDictionaryGetTypeID();
      CFDictionaryRef v142 = (const __CFDictionary *)CFDictionaryGetValue(v187, @"_LSBundlePlugins");
      CFDictionaryRef v143 = v142;
      if (v142)
      {
        if (CFGetTypeID(v142) == v141) {
          CFDictionaryRef v144 = v143;
        }
        else {
          CFDictionaryRef v144 = 0;
        }
        CFDictionaryRef v188 = v144;
      }
      else
      {
        CFDictionaryRef v188 = 0;
      }
      if (CFArrayGetCount(v130) < 1)
      {
LABEL_272:
        CFRelease(v130);
        goto LABEL_226;
      }
      CFIndex v145 = 0;
      CFTypeRef cfc = (CFTypeRef)*MEMORY[0x1E4F1CFD0];
      CFDictionaryRef v179 = (CFDictionaryRef)*MEMORY[0x1E4F1CFC8];
      while (1)
      {
        CFDictionaryRef ValueAtIndex = (__CFBundle *)CFArrayGetValueAtIndex(v130, v145);
        char v147 = (void *)_LSCopyBundleInfoDictionary(ValueAtIndex);
        id v148 = (void *)MEMORY[0x18530F680]();
        CFAutorelease(v147);
        CFRange v149 = objc_msgSend(v147, "_ls_normalizedPluginPlist");
        v150 = (__CFDictionary *)[v149 mutableCopy];

        CFStringRef Identifier = CFBundleGetIdentifier(ValueAtIndex);
        CFURLRef v152 = CFBundleCopyBundleURL(ValueAtIndex);
        CFURLRef v153 = CFBundleCopyExecutableURL(ValueAtIndex);
        if (v152)
        {
          uint64_t v154 = [[FSNode alloc] initWithURL:v152 flags:0 error:0];
          if ([(FSNode *)v154 isSecuredSystemContent]) {
            CFDictionarySetValue(v150, @"LSIsSecuredSystemContent", cfc);
          }
          CFStringRef v155 = CFURLCopyFileSystemPath(v152, kCFURLPOSIXPathStyle);
          CFDictionarySetValue(v150, @"Path", v155);
          CFRelease(v152);
          CFRelease(v155);
        }
        if (v153)
        {
          uint64_t v156 = [[FSNode alloc] initWithURL:v153 flags:1 error:0];
          if (v156)
          {
            bzero(buf, 0x400uLL);
            if ([(FSNode *)v156 getFileSystemRepresentation:buf error:0])
            {
              *(void *)&long long v190 = 0;
              int v157 = open((const char *)buf, 0, 511);
              if ((v157 & 0x80000000) == 0)
              {
                BOOL v158 = [(FSNode *)v156 getLength:&v190 error:0];
                if ((void)v190) {
                  BOOL v159 = v158;
                }
                else {
                  BOOL v159 = 0;
                }
                if (v159)
                {
                  uint64_t v160 = fcntl(v157, 48, 1);
                  id v161 = (void *)MEMORY[0x18530F680](v160);
                  id v162 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
                  _LSParseLoadCommands();
                  [(__CFDictionary *)v150 setObject:v162 forKey:@"_LSSliceInfosKey"];
                }
                close(v157);
              }
            }
          }

          CFRelease(v153);
        }
        if (v188)
        {
          CFDictionaryGetTypeID();
          long long v163 = CFDictionaryGetValue(v188, Identifier);
          if (v163) {
            CFGetTypeID(v163);
          }
        }
        +[_LSStringLocalizer gatherLocalizedStringsForCFBundle:ValueAtIndex infoDictionary:v150 domains:3 legacyLocalizationList:LSUseLegacyLocalizationList(v150)];
        CFDictionaryRef v164 = v179;
        if (softLinkLNIsLinkEnabled)
        {
          if (softLinkLNIsLinkEnabled(ValueAtIndex)) {
            CFDictionaryRef v164 = (CFDictionaryRef)cfc;
          }
          else {
            CFDictionaryRef v164 = v179;
          }
        }
        CFDictionaryAddValue(v150, @"_LSIsLinkEnabled", v164);
        long long v165 = (void *)MEMORY[0x18530F680]();
        if (softLinkINSchemaURLsForIntentNamesWithBundle)
        {
          CFTypeRef v166 = softLinkINSchemaURLsForIntentNamesWithBundle(ValueAtIndex);
        }
        else
        {
          CFTypeRef v166 = 0;
        }
        if ([v166 count]) {
          CFDictionarySetValue(v150, @"_LSIntentDefinitionURLs", v166);
        }

        if (Identifier)
        {
          if (v150) {
            break;
          }
        }
        if (v150) {
          goto LABEL_270;
        }
LABEL_271:
        if (CFArrayGetCount(v130) <= ++v145) {
          goto LABEL_272;
        }
      }
      CFDictionaryAddValue((CFMutableDictionaryRef)v169, Identifier, v150);
LABEL_270:
      CFRelease(v150);
      goto LABEL_271;
    }
  }
LABEL_226:

  return theDict;
}

void sub_182AA70B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, void *a17, uint64_t a18, void *a19, uint64_t a20,void *a21,_Unwind_Exception *exception_object,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  CFRelease(v35);
  CFRelease(v34);

  _Unwind_Resume(a1);
}

uint64_t ___ZL34_LSCreateRegistrationDataForBundleP9LSContextP18LSRegistrationInfoPK7__CFURLPK14__CFDictionaryPPK9__CFArray_block_invoke(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 32), a2))
  {
    CFStringRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), a2);
    if (CFEqual(a3, Value)) {
      return 1;
    }
    unsigned int v8 = _LSRegistrationLog();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      long long v12 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), a2);
      int v13 = 138543874;
      int v14 = a2;
      __int16 v15 = 2114;
      CFDictionaryRef v16 = a3;
      __int16 v17 = 2114;
      CFTypeID v18 = v12;
      CFURLRef v9 = "REGISTRATION CACHE ERROR: Difference, %{public}@   %{public}@ vs (wrong) %{public}@";
      int v10 = v8;
      uint32_t v11 = 32;
      goto LABEL_8;
    }
  }
  else
  {
    unsigned int v8 = _LSRegistrationLog();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int v13 = 138543618;
      int v14 = a2;
      __int16 v15 = 2114;
      CFDictionaryRef v16 = a3;
      CFURLRef v9 = "REGISTRATION CACHE ERROR: Missing, %{public}@   %{public}@";
      int v10 = v8;
      uint32_t v11 = 22;
LABEL_8:
      _os_log_impl(&dword_182959000, v10, OS_LOG_TYPE_ERROR, v9, (uint8_t *)&v13, v11);
    }
  }

  return 0;
}

void sub_182AA7544(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSAddBundleLibraryInfo(LSContext *a1, const __CFURL *a2, _LSBundleProvider *a3, LSRegistrationInfo *a4, __CFDictionary *a5, int a6, const __CFArray **a7)
{
  int v13 = a3;
  int v14 = a4;
  if ((v14->options & 0x10000000) != 0)
  {
    id v30 = 0;
    if (FSNodeCreateWithURL((uint64_t)a2, 1, &v30))
    {
LABEL_31:

      goto LABEL_32;
    }
    if (a6)
    {
      __int16 v15 = (const void *)[NSNumber numberWithUnsignedChar:_LSGetDirectoryClassForNode(v30)];
      CFDictionaryAddValue(a5, @"_LSDirectoryClass", v15);
    }
    id v29 = 0;
    *(_OWORD *)CFTypeRef cf = 0u;
    *(_OWORD *)CFStringRef v28 = 0u;
    CFTypeRef v16 = CFRetain(a2);
    if (v16) {
      cf[0] = v16;
    }
    CFTypeRef v17 = CFRetain(a5);
    CFTypeRef v18 = v28[0];
    if (v28[0] != v17)
    {
      v28[0] = v17;
      CFTypeRef v17 = v18;
    }
    if (v17) {
      CFRelease(v17);
    }
    objc_storeStrong(&v29, a4);
    if (v13)
    {
      uint64_t v19 = *(const void **)[(_LSBundleProvider *)v13 provider];
      if (v19)
      {
        CFURLRef v20 = (const __CFURL *)CFRetain(v19);
        CFURLRef v21 = v20;
        if (v20)
        {
          CFStringRef v22 = XCFURLCopyRelativeFileSystemPath(v20, a2, kCFURLPOSIXPathStyle);
          if (!v22)
          {
            CFRelease(v21);
            if (a7)
            {
LABEL_22:
              CFArrayRef v24 = (const __CFArray *)v28[1];
              if (v28[1]) {
                CFArrayRef v24 = (const __CFArray *)CFRetain(v28[1]);
              }
              *a7 = v24;
            }
LABEL_25:

            if (v28[1]) {
              CFRelease(v28[1]);
            }
            v28[1] = 0;
            if (v28[0]) {
              CFRelease(v28[0]);
            }
            v28[0] = 0;
            if (cf[0]) {
              CFRelease(cf[0]);
            }
            goto LABEL_31;
          }
          CFDictionarySetValue(a5, @"_LSBundleLibraryPath", v22);
          CFRelease(v22);
          CFRelease(v21);
        }
      }
    }
    if ((v14->options & 0x10000000) != 0)
    {
      long long v25 = xmmword_182AF90B8;
      uint64_t v26 = 1;
      cf[1] = &v25;
      _LSHoistLibraryItems((uint64_t)a1, cf);
    }
    else
    {
      for (uint64_t i = 0; i != 60; i += 6)
      {
        cf[1] = &kLibrarySubfolders[i];
        _LSHoistLibraryItems((uint64_t)a1, cf);
      }
    }
    if (a7) {
      goto LABEL_22;
    }
    goto LABEL_25;
  }
LABEL_32:
}

void sub_182AA77BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  CFRelease(v20);
  CFRelease(v21);
  _LSHoistingState::~_LSHoistingState(&a13);

  _Unwind_Resume(a1);
}

BOOL LSUseLegacyLocalizationList(const __CFDictionary *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = objc_opt_class();
  uint64_t v3 = [(__CFDictionary *)a1 objectForKey:@"LSExecutablePlatformKey"];
  uint64_t v4 = (void *)v3;
  if (v2) {
    BOOL v5 = v3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5 && (objc_opt_isKindOfClass() & 1) == 0)
  {

    uint64_t v4 = 0;
  }
  uint64_t v6 = [v4 unsignedIntegerValue];

  uint64_t v7 = objc_opt_class();
  uint64_t v8 = [(__CFDictionary *)a1 objectForKey:@"LSExecutableSDKVersion"];
  CFURLRef v9 = (void *)v8;
  if (v7 && v8)
  {
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {

      return 0;
    }
  }
  else if (!v8)
  {
    return 0;
  }
  uint64x2_t v13 = 0u;
  uint64x2_t v14 = 0u;
  _LSVersionNumberMakeWithString(&v13, v9);
  v16[0] = v13;
  v16[1] = v14;
  memset(v15, 0, sizeof(v15));
  if (_LSVersionNumberCompare(v16, v15))
  {
    v12[0] = v13;
    v12[1] = v14;
    BOOL v10 = +[_LSStringLocalizer useLegacyLocalizationListForPlatform:v6 sdkVersion:_LSMakeDYLDVersionFromVersionNumber(v12)];
  }
  else
  {
    BOOL v10 = 0;
  }

  return v10;
}

void sub_182AA7998(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSPathifyIconKey(_LSBundleProvider *a1, __CFDictionary *a2, const __CFString *a3, const __CFString *a4)
{
  uint64_t v19 = a1;
  if (!a2 || !a3)
  {
    CFStringGetTypeID();
    goto LABEL_13;
  }
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a2, a3);
  CFTypeID TypeID = CFStringGetTypeID();
  if (Value && (!TypeID || CFGetTypeID(Value) == TypeID))
  {
    uint64_t v8 = LSBundleProvider::copyIconResourceURL((LSBundleProvider *)[(_LSBundleProvider *)v19 provider], Value, 0);
    CFURLRef v9 = (__CFString *)v8;
    int v10 = gLogRegistrationErrors;
    if (v8 || !gLogRegistrationErrors)
    {
      if (v8)
      {
        CFStringRef v12 = CFURLCopyFileSystemPath(v8, kCFURLPOSIXPathStyle);
        if (v12)
        {
          CFStringRef v13 = CFURLCopyFileSystemPath(*(CFURLRef *)[(_LSBundleProvider *)v19 provider], kCFURLPOSIXPathStyle);
          if (v13)
          {
            CFStringRef v14 = _LSCopyPathRelativeToBase(v12, v13);
            if (v14)
            {
              CFDictionarySetValue(a2, @"_LSIconPath", v14);
              CFRelease(v14);
            }
            CFRelease(v13);
          }
          goto LABEL_28;
        }
LABEL_29:
        CFRelease(v9);
        goto LABEL_13;
      }
    }
    else
    {
      uint32_t v11 = LSBundleProvider::CFBundleCopyResourceURL((LSBundleProvider *)[(_LSBundleProvider *)v19 provider], Value, 0, 0);
      if (v11
        || (uint32_t v11 = LSBundleProvider::CFBundleCopyResourceURL((LSBundleProvider *)[(_LSBundleProvider *)v19 provider], Value, @"icns", 0)) != 0)
      {
        CFRelease(v11);
      }
      else
      {
        CFTypeRef v18 = (__CFString *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"Can't find referenced icon resource \"%@\".", Value);
        if (v18)
        {
          _LSRegistrationWarningPath((uint64_t)[(_LSBundleProvider *)v19 bundlePath], v18);
          CFRelease(v18);
        }
      }
      int v10 = gLogRegistrationErrors;
    }
    if (v10)
    {
      CFGetTypeID(Value);
      ClassWithCFTypeID TypeID = _CFRuntimeGetClassWithTypeID();
      CFTypeRef v16 = "<unknown>";
      if (ClassWithTypeID)
      {
        uint64_t v17 = *(const char **)(ClassWithTypeID + 8);
        if (v17) {
          CFTypeRef v16 = v17;
        }
      }
      CFURLRef v9 = (__CFString *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"For plist key %@, value has class %s (should be CFString).", a3, v16);
      if (v9)
      {
        CFStringRef v12 = CFURLCopyFileSystemPath(*(CFURLRef *)[(_LSBundleProvider *)v19 provider], kCFURLPOSIXPathStyle);
        _LSRegistrationWarningPath((uint64_t)v12, v9);
        if (v12)
        {
LABEL_28:
          CFRelease(v12);
          goto LABEL_29;
        }
        goto LABEL_29;
      }
    }
  }
LABEL_13:
}

void sub_182AA7C18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void _LSPathifyIconKeysInPlistKey(_LSBundleProvider *a1, __CFDictionary *a2, const __CFString *a3, const __CFString *a4, const __CFString *a5)
{
  CFTypeRef v16 = a1;
  if (a2 && a3)
  {
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a2, a3);
    CFTypeID TypeID = CFArrayGetTypeID();
    if (Value && (!TypeID || CFGetTypeID(Value) == TypeID))
    {
      CFTypeID v10 = CFArrayGetTypeID();
      if (v10 == CFGetTypeID(Value))
      {
        CFIndex Count = CFArrayGetCount(Value);
        if (Count >= 1)
        {
          for (CFIndex i = 0; i != Count; ++i)
          {
            CFDictionaryRef ValueAtIndex = (__CFDictionary *)CFArrayGetValueAtIndex(Value, i);
            CFTypeID v14 = CFDictionaryGetTypeID();
            if (ValueAtIndex && (!v14 || CFGetTypeID(ValueAtIndex) == v14)) {
              _LSPathifyIconKey(v16, ValueAtIndex, a4, v15);
            }
          }
        }
      }
    }
  }
  else
  {
    CFArrayGetTypeID();
  }
}

void sub_182AA7DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

CFStringRef _LSCopyPathRelativeToBase(const __CFString *a1, const __CFString *a2)
{
  CFIndex Length = CFStringGetLength(a1);
  CFIndex v5 = CFStringGetLength(a2);
  if (Length <= v5) {
    return 0;
  }
  CFIndex v6 = v5;
  v11.locatioCFIndex n = 0;
  v11.length = v5;
  if (CFStringCompareWithOptions(a1, a2, v11, 0)) {
    return 0;
  }
  if (CFStringGetCharacterAtIndex(a1, v6) == 47 && Length <= ++v6) {
    return 0;
  }
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  v9.locatioCFIndex n = v6;

  v9.length = Length - v6;
  return CFStringCreateWithSubstring(v8, a1, v9);
}

uint64_t (*init_GSIsDocumentRevision(const __CFURL *a1))(const __CFURL *)
{
  uint64_t v2 = (void *)GenerationalStorageLibrary(void)::frameworkLibrary;
  if (!GenerationalStorageLibrary(void)::frameworkLibrary)
  {
    uint64_t v2 = dlopen("/System/Library/PrivateFrameworks/GenerationalStorage.framework/GenerationalStorage", 2);
    GenerationalStorageLibrary(void)::frameworkLibrary = (uint64_t)v2;
  }
  Class result = (uint64_t (*)(const __CFURL *))dlsym(v2, "_GSIsDocumentRevision");
  softLink_GSIsDocumentRevisioCFIndex n = result;
  if (result)
  {
    return (uint64_t (*)(const __CFURL *))result(a1);
  }
  return result;
}

void _LSHoistLibraryItems(uint64_t a1, void *a2)
{
  uint64_t v4 = *(const char **)(a2[1] + 8);
  if (!v4)
  {
    if (!*a2) {
      return;
    }
    CFTypeRef v8 = CFRetain((CFTypeRef)*a2);
    if (!v8) {
      return;
    }
    goto LABEL_10;
  }
  size_t v5 = strlen(v4);
  CFURLRef v6 = (const __CFURL *)MEMORY[0x18530DDD0](*MEMORY[0x1E4F1CF80], v4, v5, 1, *a2);
  CFURLRef v7 = v6;
  if (v6)
  {
    CFTypeRef v8 = CFURLResourceIsReachable(v6, 0) ? CFRetain(v7) : 0;
    CFRelease(v7);
    if (v8)
    {
LABEL_10:
      if (_LSGetBasicURLPropertyKeys(void)::once != -1) {
        dispatch_once(&_LSGetBasicURLPropertyKeys(void)::once, &__block_literal_global_554);
      }
      v9[0] = MEMORY[0x1E4F143A8];
      v9[1] = 3221225472;
      v9[2] = ___ZL20_LSHoistLibraryItemsP9LSContextP16_LSHoistingState_block_invoke;
      void v9[3] = &__block_descriptor_48_e59_v40__0____CFURLEnumerator__8____CFURL__16____CFError__24_32l;
      v9[4] = a1;
      v9[5] = a2;
      XCFURLEnumerate((uint64_t)v8, 0, _LSGetBasicURLPropertyKeys(void)::result, v9);
      CFRelease(v8);
    }
  }
}

void sub_182AA8068(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void _LSHoistingState::~_LSHoistingState(id *this)
{
  id v2 = this[3];
  if (v2) {
    CFRelease(v2);
  }
  this[3] = 0;
  id v3 = this[2];
  if (v3) {
    CFRelease(v3);
  }
  this[2] = 0;
  if (*this) {
    CFRelease(*this);
  }
  *this = 0;
}

void ___ZL20_LSHoistLibraryItemsP9LSContextP16_LSHoistingState_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = [[FSNode alloc] initWithURL:a3 flags:0 error:0];
    size_t v5 = v4;
    if (v4)
    {
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 3221225472;
      uint64x2_t v12[2] = ___ZL20_LSHoistLibraryItemsP9LSContextP16_LSHoistingState_block_invoke_2;
      v12[3] = &unk_1E5230888;
      uint64_t v14 = *(void *)(a1 + 32);
      CFURLRef v6 = v4;
      uint64_t v7 = *(void *)(a1 + 40);
      CFStringRef v13 = v6;
      uint64_t v15 = v7;
      CFTypeRef v8 = (void (**)(void))MEMORY[0x18530F950](v12);
      if ([(id)__LSDefaultsGetSharedInstance() isServer] && !*(void *)(a1 + 32))
      {
        CFRange v9 = +[LSDBExecutionContext sharedServerInstance]();
        v10[0] = MEMORY[0x1E4F143A8];
        v10[1] = 3221225472;
        v10[2] = ___ZL20_LSHoistLibraryItemsP9LSContextP16_LSHoistingState_block_invoke_3;
        v10[3] = &unk_1E522D260;
        CFRange v11 = v8;
        -[LSDBExecutionContext syncWrite:]((uint64_t)v9, v10);
      }
      else
      {
        v8[2](v8);
      }
    }
  }
}

void sub_182AA8258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void ___ZL20_LSHoistLibraryItemsP9LSContextP16_LSHoistingState_block_invoke_2(uint64_t a1)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  CFStringRef v28 = *(void ***)(a1 + 40);
  id v29 = 0;
  char v30 = 0;
  id v31 = 0;
  +[_LSDServiceDomain defaultServiceDomain]();
  id v2 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  id v3 = (LSContext *)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v28, v2, 0);

  if (v3
    && (![*(id *)(a1 + 32) isDirectory]
     || _LSGetBundleClassForNode((uint64_t)v3, *(void **)(a1 + 32))
     || _LSNodeIsPackage(v3, *(void **)(a1 + 32), 0)))
  {
    uint64_t v4 = *(const __CFURL ***)(a1 + 48);
    id v5 = *(id *)(a1 + 32);
    CFURLRef v6 = *v4;
    CFURLRef v7 = [v5 URL];
    CFStringRef v8 = XCFURLCopyRelativeFileSystemPath(v6, v7, kCFURLPOSIXPathStyle);

    if (!v8)
    {
LABEL_41:

      goto LABEL_42;
    }
    CFDictionaryRef v9 = v4[2];
    CFTypeID v10 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
    if (v9)
    {
      CFArrayRef Value = (void *)CFDictionaryGetValue(v9, @"_LSBundleLibraryItems");
      CFTypeID TypeID = CFArrayGetTypeID();
      if (Value && (!TypeID || CFGetTypeID(Value) == TypeID))
      {
        CFTypeID v13 = CFArrayGetTypeID();
        if (v13 == CFGetTypeID(Value)) {
          goto LABEL_14;
        }
      }
    }
    else
    {
      CFArrayGetTypeID();
    }
    CFArrayRef Value = CFArrayCreateMutable(*v10, 0, MEMORY[0x1E4F1D510]);
    CFDictionarySetValue(v4[2], @"_LSBundleLibraryItems", Value);
    CFRelease(Value);
LABEL_14:
    CFArrayAppendValue((CFMutableArrayRef)Value, v8);
    int v14 = _LSGetBundleClassForNode((uint64_t)v3, v5);
    if (!v14)
    {
      id v15 = v5;
      if ((*((unsigned char *)v4[4] + 19) & 0x10) == 0
        || ![(id)__LSDefaultsGetSharedInstance() isAppleInternal]
        || ![v15 isSymbolicLink])
      {
        goto LABEL_22;
      }
      CFTypeRef v16 = _LSRegistrationLog();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412290;
        id v33 = v15;
        _os_log_impl(&dword_182959000, v16, OS_LOG_TYPE_INFO, "Symlink %@ will be hoisted into Core Types.", buf, 0xCu);
      }

      id v15 = [v15 resolvedNodeWithFlags:0 error:0];
      if (v15) {
        int v14 = _LSGetBundleClassForNode((uint64_t)v3, v15);
      }
      else {
LABEL_22:
      }
        int v14 = 0;
    }
    CFAllocatorRef v17 = *v10;
    CFURLRef v18 = (const __CFURL *)MEMORY[0x18530DE00](v17, v8, 0, 1, *v4);
    CFURLRef v19 = v18;
    if (v18)
    {
      if (v14 == 2)
      {
        CFURLRef v20 = CFURLCopyAbsoluteURL(v18);
        if (v20)
        {
          CFMutableDictionaryRef Mutable = v4[3];
          if (!Mutable)
          {
            CFMutableDictionaryRef Mutable = CFArrayCreateMutable(v17, 0, MEMORY[0x1E4F1D510]);
            CFStringRef v22 = v4[3];
            CFStringRef v23 = Mutable;
            if (v22 != Mutable)
            {
              v4[3] = Mutable;
              CFStringRef v23 = v22;
            }
            if (v23)
            {
              CFRelease(v23);
              CFMutableDictionaryRef Mutable = v4[3];
            }
          }
          CFArrayAppendValue(Mutable, v20);
          CFRelease(v20);
        }
      }
      if (v14 && v14 == *((_DWORD *)v4[1] + 4))
      {
        LSBundleProvider::LSBundleProvider((LSBundleProvider *)buf, v19);
        if (LSBundleProvider::bundleRef((LSBundleProvider *)buf, 1, "checking for validity"))
        {
          InfoDictionaryRef = (__CFDictionary *)LSBundleProvider::GetInfoDictionaryRef((LSBundleProvider *)buf);
          long long v25 = copyDeepMutableDictionary(InfoDictionaryRef);
          if (v25)
          {
            _LSHoistDelegateDictionaries(v4[2], v25, @"UTExportedTypeDeclarations", v8);
            _LSHoistDelegateDictionaries(v4[2], v25, @"UTImportedTypeDeclarations", v8);
            _LSHoistDelegateDictionaries(v4[2], v25, (const __CFString *)*MEMORY[0x1E4F1CC50], v8);
            _LSHoistDelegateDictionaries(v4[2], v25, (const __CFString *)*MEMORY[0x1E4F1CCB8], v8);
            CFRelease(v25);
          }
        }
        LSBundleProvider::~LSBundleProvider((LSBundleProvider *)buf);
      }
      CFRelease(v19);
    }
    CFRelease(v8);
    goto LABEL_41;
  }
LABEL_42:
  if (v28 && v30) {
    _LSContextDestroy(v28);
  }
  id v26 = v29;
  CFStringRef v28 = 0;
  id v29 = 0;

  char v30 = 0;
  id v27 = v31;
  id v31 = 0;
}

void sub_182AA86DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ___ZL20_LSHoistLibraryItemsP9LSContextP16_LSHoistingState_block_invoke_3(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

CFArrayRef ___ZL26_LSGetBasicURLPropertyKeysv_block_invoke()
{
  v2[3] = *(const void **)MEMORY[0x1E4F143B8];
  os_log_t v0 = (const void *)*MEMORY[0x1E4F1D678];
  v2[0] = *(const void **)MEMORY[0x1E4F1D738];
  v2[1] = v0;
  v2[2] = *(const void **)MEMORY[0x1E4F1D668];
  CFArrayRef result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v2, 3, MEMORY[0x1E4F1D510]);
  _LSGetBasicURLPropertyKeys(void)::CFArrayRef result = (uint64_t)result;
  return result;
}

void _LSHoistDelegateDictionaries(__CFDictionary *a1, CFDictionaryRef theDict, const __CFString *key, const __CFString *a4)
{
  if (theDict && key)
  {
    CFArrayRef Value = CFDictionaryGetValue(theDict, key);
    CFTypeID TypeID = CFArrayGetTypeID();
    if (!Value || TypeID && CFGetTypeID(Value) != TypeID) {
      return;
    }
    CFTypeID v10 = CFGetTypeID(Value);
    if (v10 != CFArrayGetTypeID()) {
      return;
    }
    if (a1)
    {
      CFMutableDictionaryRef Mutable = (void *)CFDictionaryGetValue(a1, key);
      CFTypeID v12 = CFArrayGetTypeID();
      if (Mutable && (!v12 || CFGetTypeID(Mutable) == v12))
      {
        CFTypeID v13 = CFGetTypeID(Mutable);
        if (v13 != CFArrayGetTypeID()) {
          return;
        }
LABEL_18:
        int v14 = (const void *)*MEMORY[0x1E4F1CFF8];
        if (*MEMORY[0x1E4F1CFF8])
        {
          id v15 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F1CFF8]);
          CFTypeID v16 = CFStringGetTypeID();
          if (!v15) {
            goto LABEL_27;
          }
          if (!v16 || CFGetTypeID(v15) == v16)
          {
            CFTypeID v17 = CFGetTypeID(v15);
            if (v17 != CFStringGetTypeID()) {
              id v15 = 0;
            }
            goto LABEL_27;
          }
        }
        else
        {
          CFStringGetTypeID();
        }
        id v15 = 0;
LABEL_27:
        CFIndex Count = CFArrayGetCount((CFArrayRef)Value);
        if (Count >= 1)
        {
          CFIndex v19 = Count;
          for (CFIndex i = 0; i != v19; ++i)
          {
            CFDictionaryRef ValueAtIndex = (__CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)Value, i);
            CFTypeID v22 = CFDictionaryGetTypeID();
            if (ValueAtIndex && (!v22 || CFGetTypeID(ValueAtIndex) == v22))
            {
              CFDictionarySetValue(ValueAtIndex, @"_LSBundleLibraryDelegate", a4);
              if (v15) {
                CFDictionarySetValue(ValueAtIndex, v14, v15);
              }
              CFArrayAppendValue((CFMutableArrayRef)Mutable, ValueAtIndex);
            }
          }
        }
        return;
      }
    }
    else
    {
      CFArrayGetTypeID();
    }
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    CFDictionarySetValue(a1, key, Mutable);
    CFRelease(Mutable);
    goto LABEL_18;
  }

  CFArrayGetTypeID();
}

uint64_t (*initINSchemaURLsForIntentNamesWithBundle(__CFBundle *a1))(__CFBundle *)
{
  id v2 = (void *)IntentsLibrary(void)::frameworkLibrary;
  if (!IntentsLibrary(void)::frameworkLibrary)
  {
    id v2 = dlopen("/System/Library/Frameworks/Intents.framework/Intents", 2);
    IntentsLibrary(void)::frameworkLibrary = (uint64_t)v2;
  }
  id v3 = (uint64_t (*)(__CFBundle *))dlsym(v2, "INSchemaURLsForIntentNamesWithBundle");
  softLinkINSchemaURLsForIntentNamesWithBundle = v3;
  if (v3)
  {
    v3(a1);
    id v3 = (uint64_t (*)(__CFBundle *))objc_claimAutoreleasedReturnValue();
  }

  return v3;
}

{
  void *v2;
  uint64_t (*v3)(__CFBundle *);
  uint64_t vars8;

  id v2 = (void *)IntentsLibrary(void)::frameworkLibrary;
  if (!IntentsLibrary(void)::frameworkLibrary)
  {
    id v2 = dlopen("/System/Library/Frameworks/Intents.framework/Intents", 2);
    IntentsLibrary(void)::frameworkLibrary = (uint64_t)v2;
  }
  id v3 = (uint64_t (*)(__CFBundle *))dlsym(v2, "INSchemaURLsForIntentNamesWithBundle");
  softLinkINSchemaURLsForIntentNamesWithBundle = v3;
  if (v3)
  {
    v3(a1);
    id v3 = (uint64_t (*)(__CFBundle *))objc_claimAutoreleasedReturnValue();
  }

  return v3;
}

uint64_t (*initLNIsLinkEnabled(__CFBundle *a1))(__CFBundle *)
{
  id v2 = (void *)LinkServicesLibrary(void)::frameworkLibrary;
  if (!LinkServicesLibrary(void)::frameworkLibrary)
  {
    id v2 = dlopen("/System/Library/PrivateFrameworks/LinkServices.framework/LinkServices", 2);
    LinkServicesLibrary(void)::frameworkLibrary = (uint64_t)v2;
  }
  CFArrayRef result = (uint64_t (*)(__CFBundle *))dlsym(v2, "LNIsLinkEnabled");
  softLinkLNIsLinkEnabled = result;
  if (result)
  {
    return (uint64_t (*)(__CFBundle *))result(a1);
  }
  return result;
}

CFTypeRef __Block_byref_object_copy__592(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 48);
  *(void *)(a1 + 48) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __Block_byref_object_dispose__593(uint64_t a1)
{
  id v2 = *(const void **)(a1 + 48);
  if (v2) {
    CFRelease(v2);
  }
  *(void *)(a1 + 48) = 0;
}

void ___ZL31createInstallationDictForPluginPK10__CFString_block_invoke(uint64_t a1, void *a2)
{
  id v8 = a2;
  id v3 = [v8 objectForKey:*MEMORY[0x1E4F1CFF8]];
  int v4 = [v3 isEqualToString:*(void *)(a1 + 40)];

  if (v4)
  {
    id v5 = v8;
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
    id v7 = *(id *)(v6 + 48);
    if (v7 != v5)
    {
      *(void *)(v6 + 48) = v5;
      id v5 = v7;
    }
    if (v5) {
      CFRelease(v5);
    }
  }
}

void sub_182AA8C48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182AA8CF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id init_ISIconDataForResourceProxy_1(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = a1;
  uint64_t v6 = (void *)IconServicesLibrary_frameworkLibrary_3;
  if (!IconServicesLibrary_frameworkLibrary_3)
  {
    uint64_t v6 = dlopen("/System/Library/PrivateFrameworks/IconServices.framework/IconServices", 2);
    IconServicesLibrary_frameworkLibrary_3 = (uint64_t)v6;
  }
  softLink_ISIconDataForResourceProxy_1[0] = (uint64_t (*)())dlsym(v6, "_ISIconDataForResourceProxy");
  id v7 = ((void (*)(id, uint64_t, uint64_t))softLink_ISIconDataForResourceProxy_1[0])(v5, a2, a3);

  return v7;
}

void _LSSchemaTransferCache(uint64_t a1, uint64_t a2)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = ___LSSchemaTransferCache_block_invoke;
  v2[3] = &__block_descriptor_40_e9_v16__0_v8l;
  v2[4] = a2;
  _LSSchemaCacheWrite(a1, v2);
}

void _LSSchemaClearAllCaches(uint64_t a1)
{
}

void std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void *std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::clear(void *result)
{
  if (result[3])
  {
    id v1 = result;
    CFTypeRef result = (void *)result[2];
    if (result)
    {
      do
      {
        uint64_t v2 = (void *)*result;
        operator delete(result);
        CFTypeRef result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    uint64_t v3 = v1[1];
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

void std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>>>::clear(a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  id v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  id v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  uint64_t v10 = v7[1];
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v11) = a1 + 16;
    *id v7 = 0;
    v7[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::clear((void *)a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  id v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  id v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  uint64_t v10 = v7[1];
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v11) = a1 + 16;
    *id v7 = 0;
    v7[1] = 0;
  }
}

void _LSSchemeApprovalFindWithCompletionHandler(void *a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  v49[1] = *MEMORY[0x1E4F143B8];
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  id v12 = a5;
  CFTypeID v13 = (void (**)(void, void, void))v12;
  if (!v11 || !v12)
  {
    if (!v12) {
      goto LABEL_52;
    }
    uint64_t v46 = *MEMORY[0x1E4F28228];
    CFUUIDRef v47 = @"invalid input parameters";
    CFTypeID v16 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v47 forKeys:&v46 count:1];
    CFTypeID v17 = _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -50, (uint64_t)"_LSSchemeApprovalFindWithCompletionHandler", 157, v16);
    ((void (**)(void, void, void *))v13)[2](v13, 0, v17);
    goto LABEL_8;
  }
  if (!v9)
  {
    BOOL v18 = 0;
    CFTypeID v16 = 0;
    BOOL v19 = v10 != 0;
    goto LABEL_10;
  }
  int v14 = [v9 _xpcConnection];
  int CanSuppressCustomSchemePrompt = _LSXPCConnectionCanSuppressCustomSchemePrompt(v14, (uint64_t)v11);

  if (!CanSuppressCustomSchemePrompt)
  {
    CFStringRef v28 = [v9 _xpcConnection];
    CFTypeID v16 = (void *)_LSCopyBundleIdentifierForXPCConnection(v28, 0);

    BOOL v18 = v16 != 0;
    BOOL v19 = v10 != 0;
    if (v10 && v16)
    {
      if ([v16 isEqual:v10]) {
        goto LABEL_50;
      }
      id v41 = v10;
      id v29 = +[LSBundleProxy bundleProxyForIdentifier:v16];
      uint64_t v30 = +[LSBundleProxy bundleProxyForIdentifier:v41];
      id v31 = (void *)v30;
      int v32 = 0;
      if (v29 && v30)
      {
        if (objc_opt_respondsToSelector())
        {
          CFTypeID v39 = [v29 teamID];
        }
        else
        {
          CFTypeID v39 = 0;
        }
        if (objc_opt_respondsToSelector())
        {
          uint64_t v37 = [v31 teamID];
          CFStringRef v38 = (void *)v37;
          int v32 = 0;
          if (v39 && v37) {
            int v32 = [v39 isEqual:v37];
          }
        }
        else
        {
          CFStringRef v38 = 0;
          int v32 = 0;
        }
      }
      if (v32) {
        goto LABEL_50;
      }
      BOOL v19 = 1;
      goto LABEL_11;
    }
LABEL_10:
    if (!v18)
    {
LABEL_12:
      if (v19 && _LSSchemeApprovalBundleIsAppleInternal((NSString *)v10)) {
        goto LABEL_50;
      }
      unsigned int v40 = (__CFString *)v10;
      CFURLRef v20 = (__CFString *)v11;
      id v45 = 0;
      CFStringRef v42 = 0;
      id v43 = 0;
      char v44 = 0;
      +[_LSDServiceDomain defaultServiceDomain]();
      CFURLRef v21 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
      CFTypeID v22 = (void **)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v42, v21, 0);

      if (v22)
      {
        int StringForCFString = _LSDatabaseGetStringForCFString(*v22, v20, 1);
        if (StringForCFString
          && (HandlerPref = (LSHandlerPref *)LSHandlerPref::GetHandlerPref(*v22, StringForCFString, 5, 0)) != 0)
        {
          int v25 = LSHandlerPref::roleHandler(HandlerPref, 0xFFFFFFFF, 0);
          int v26 = _LSDatabaseGetStringForCFString(*v22, v40, 0);
          if (v25) {
            BOOL v27 = v25 == v26;
          }
          else {
            BOOL v27 = 0;
          }
          LODWORD(v22) = v27;
        }
        else
        {
          LODWORD(v22) = 0;
        }
      }
      if (v42 && v44) {
        _LSContextDestroy(v42);
      }
      id v33 = v43;
      CFStringRef v42 = 0;
      id v43 = 0;

      char v44 = 0;
      id v34 = v45;
      id v45 = 0;

      if (v22)
      {
        v13[2](v13, 1, 0);
        goto LABEL_51;
      }
      char v35 = !v19;
      if (!v9) {
        char v35 = 1;
      }
      if ((v35 & 1) == 0)
      {
        _LSSchemeApprovalUsePreferenceOrPromptWithCompletionHandler(v9, v16, v40, v20, a4, v13);
        goto LABEL_51;
      }
      uint64_t v48 = *MEMORY[0x1E4F28228];
      v49[0] = @"invalid input parameters";
      CFTypeID v17 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v49 forKeys:&v48 count:1];
      BOOL v36 = _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -50, (uint64_t)"_LSSchemeApprovalFindWithCompletionHandler", 151, v17);
      ((void (**)(void, void, void *))v13)[2](v13, 0, v36);

LABEL_8:
LABEL_51:

      goto LABEL_52;
    }
LABEL_11:
    if (_LSSchemeApprovalBundleIsAppleInternal((NSString *)v16))
    {
LABEL_50:
      v13[2](v13, 1, 0);
      goto LABEL_51;
    }
    goto LABEL_12;
  }
  v13[2](v13, 1, 0);
LABEL_52:
}

void sub_182AA9E5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSSchemeApprovalBundleIsAppleInternal(NSString *a1)
{
  id v1 = a1;
  id v9 = 0;
  p_super = +[LSBundleRecord bundleRecordWithBundleIdentifier:v1 allowPlaceholder:0 error:&v9];
  id v3 = v9;
  if (p_super) {
    goto LABEL_4;
  }
  id v8 = v3;
  uint64_t v4 = [[LSApplicationRecord alloc] initWithBundleIdentifierOfSystemPlaceholder:v1 error:&v8];
  id v5 = v8;

  if (v4)
  {
    p_super = &v4->super.super.super;
    id v3 = v5;
LABEL_4:
    uint64_t v6 = [p_super isAppleInternal];
    goto LABEL_5;
  }
  p_super = _LSDefaultLog();
  if (os_log_type_enabled(p_super, OS_LOG_TYPE_ERROR)) {
    _LSSchemeApprovalBundleIsAppleInternal((uint64_t)v5, p_super);
  }
  uint64_t v6 = 0;
  id v3 = v5;
LABEL_5:

  return v6;
}

void sub_182AAA064(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSSchemeApprovalUsePreferenceOrPromptWithCompletionHandler(void *a1, void *a2, void *a3, void *a4, uint64_t a5, void *a6)
{
  id v10 = a1;
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  int v14 = a6;
  id v15 = v10;
  id v16 = v11;
  id v68 = v13;
  if (v16)
  {
    id v17 = v16;
LABEL_3:
    BOOL v18 = [NSString stringWithFormat:@"%@-->%@", v17, v68];

    goto LABEL_7;
  }
  BOOL v19 = [v15 _xpcConnection];
  CFURLRef v20 = (void *)_LSCopyBundleURLForXPCConnection(v19, 0);

  if (v20)
  {
    id v17 = [v20 path];

    if (v17) {
      goto LABEL_3;
    }
  }
  BOOL v18 = 0;
LABEL_7:

  if (v18)
  {
    CFStringRef v67 = (void *)CFPreferencesCopyValue(v18, @"com.apple.launchservices.schemeapproval", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
    if (v67 && _NSIsNSString() && ([v67 isEqual:v12] & 1) != 0)
    {
      v14[2](v14, 1, 0);
LABEL_48:

      goto LABEL_49;
    }
    BOOL v64 = v14;
    CFIndex v65 = v15;
    _LSSchemeApprovalGetBouncebackHistory();
    id v21 = (id)objc_claimAutoreleasedReturnValue();
    objc_sync_enter(v21);
    unint64_t v22 = [v21 count];
    unint64_t v23 = v22 - 2;
    if (v22 < 2)
    {
      int v30 = 0;
    }
    else
    {
      id v62 = v12;
      CFArrayRef v24 = [v21 objectAtIndexedSubscript:v22 - 1];
      int v25 = [v21 objectAtIndexedSubscript:v23];
      int v26 = [v24 objectAtIndexedSubscript:0];
      BOOL v27 = [v25 objectAtIndexedSubscript:1];
      if ([v26 isEqual:v27])
      {
        CFStringRef v28 = [v24 objectAtIndexedSubscript:1];
        id v29 = [v25 objectAtIndexedSubscript:0];
        int v30 = [v28 isEqual:v29];
      }
      else
      {

        int v30 = 0;
      }

      id v12 = v62;
    }
    objc_sync_exit(v21);

    if (v30)
    {
      int v14 = v64;
      id v15 = v65;
      v64[2](v64, 1, 0);
      goto LABEL_48;
    }
    int v14 = v64;
    id v15 = v65;
    if ((a5 & 1) == 0)
    {
      int v32 = _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -2026, (uint64_t)"_LSSchemeApprovalUsePreferenceOrPromptWithCompletionHandler", 287, 0);
      ((void (**)(id, uint64_t, void *))v64)[2](v64, 0, v32);

      goto LABEL_48;
    }
    v69[0] = MEMORY[0x1E4F143A8];
    v69[1] = 3221225472;
    CFTypeRef v70 = ___ZL59_LSSchemeApprovalUsePreferenceOrPromptWithCompletionHandlerP15NSXPCConnectionP8NSStringS2_S2_mU13block_pointerFvbP7NSErrorE_block_invoke;
    CFBooleanRef v71 = &unk_1E5230990;
    CFTypeID v72 = v18;
    id v73 = v12;
    BOOL v74 = v64;
    id v59 = v65;
    id v33 = (NSString *)v16;
    CFAllocatorRef v61 = (NSString *)v73;
    id v58 = v68;
    uint64_t v60 = v69;
    id v63 = v12;
    CFStringRef v57 = v33;
    if (!v16)
    {
      uint64_t v37 = 0;
LABEL_32:
      unsigned int v40 = applicationBundleNameForIdentifier(v61);
      CFStringRef v55 = v40;
      CFTypeID v56 = v37;
      if (v40)
      {
        id v41 = v57;
        if (v37)
        {
          CFStringRef v42 = _LSSchemeApprovalGetLocalizedString(&cfstr_WantsToOpen.isa, &cfstr_SchemeApproval.isa);
          objc_msgSend(NSString, "stringWithFormat:", v42, v37, v40);
        }
        else
        {
          CFStringRef v42 = _LSSchemeApprovalGetLocalizedString(&cfstr_OpenIn.isa, &cfstr_SchemeApproval_0.isa);
          objc_msgSend(NSString, "stringWithFormat:", v42, v40);
        id v45 = };

        if (_LSSchemeApprovalDebugMode(void)::once != -1) {
          dispatch_once(&_LSSchemeApprovalDebugMode(void)::once, &__block_literal_global_69);
        }
        if (_LSSchemeApprovalDebugMode(void)::result)
        {
          uint64_t v46 = NSString;
          CFUUIDRef v47 = [v59 description];
          uint64_t v48 = v57;
          if (!v16)
          {
            unsigned int v40 = [v59 _xpcConnection];
            uint64_t v48 = (void *)_LSCopyBundleURLForXPCConnection(v40, 0);
          }
          CFStringRef v49 = [v46 stringWithFormat:@"[Internal Build Detected]\n\nSource XPC: %@\nSource: %@\nTarget: %@\nScheme: %@\nOptions: %llx", v47, v48, v61, v58, a5];
          if (!v16)
          {
          }
        }
        else
        {
          CFStringRef v49 = 0;
        }
        id v50 = _LSSchemeApprovalGetLocalizedString(&cfstr_Open.isa, &cfstr_SchemeApproval_1.isa);
        id v51 = _LSSchemeApprovalGetLocalizedString(&cfstr_Cancel.isa, &cfstr_SchemeApproval_2.isa);
        v75[0] = MEMORY[0x1E4F143A8];
        v75[1] = 3221225472;
        v75[2] = ___ZL44_LSSchemeApprovalPromptWithCompletionHandlerP15NSXPCConnectionP8NSStringS2_S2_mU13block_pointerFvbP7NSErrorE_block_invoke;
        v75[3] = &unk_1E52309E0;
        id v43 = v45;
        id v76 = v43;
        id v52 = v49;
        id v77 = v52;
        id v53 = v50;
        id v78 = v53;
        id v79 = v51;
        CFURLRef v80 = v60;
        uint64_t v81 = a5;
        id v54 = v51;
        _LSAskForScreenUnlock(0, v75);

        int v14 = v64;
        id v15 = v65;
        unsigned int v40 = v55;
        uint64_t v37 = v56;
        char v44 = v59;
      }
      else
      {
        _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -10813, (uint64_t)"_LSSchemeApprovalPromptWithCompletionHandler", 416, 0);
        id v43 = (id)objc_claimAutoreleasedReturnValue();
        v70((uint64_t)v60, 0, v43);
        char v44 = v59;
        id v41 = v57;
      }

      id v12 = v63;
      goto LABEL_48;
    }
    id v34 = +[LSApplicationProxy applicationProxyForIdentifier:v33 placeholder:0];
    char v35 = v34;
    if (v34)
    {
      BOOL v36 = [v34 applicationType];
      if ([v36 isEqual:@"Hidden"])
      {

LABEL_29:
        uint64_t v37 = 0;
LABEL_31:

        goto LABEL_32;
      }
      CFStringRef v38 = [v35 appTags];
      char v39 = [v38 containsObject:@"hidden"];

      if (v39) {
        goto LABEL_29;
      }
    }
    uint64_t v37 = applicationBundleNameForIdentifier(v57);
    goto LABEL_31;
  }
  id v31 = _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -4960, (uint64_t)"_LSSchemeApprovalUsePreferenceOrPromptWithCompletionHandler", 291, 0);
  ((void (**)(id, uint64_t, void *))v14)[2](v14, 0, v31);

LABEL_49:
}

void sub_182AAA834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,uint64_t a24,void *a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,void *a32,void *a33)
{
  _Unwind_Resume(a1);
}

void _LSSchemeApprovalRememberForBouncebackCheck(void *a1, void *a2)
{
  uint64x2_t v12[2] = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    id v5 = [v3 _xpcConnection];
    uint64_t v6 = (void *)_LSCopyBundleIdentifierForXPCConnection(v5, 0);
  }
  else
  {
    uint64_t v6 = 0;
  }
  id v7 = v4;
  _LSSchemeApprovalGetBouncebackHistory();
  id v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_sync_enter(v8);
  id v9 = v6;
  if (!v6)
  {
    id v9 = [MEMORY[0x1E4F1CA98] null];
  }
  v12[0] = v9;
  id v10 = v7;
  if (!v7)
  {
    id v10 = [MEMORY[0x1E4F1CA98] null];
  }
  v12[1] = v10;
  id v11 = [MEMORY[0x1E4F1C978] arrayWithObjects:v12 count:2];
  [v8 addObject:v11];

  if (!v7) {
  if (!v6)
  }

  if ((unint64_t)[v8 count] >= 3) {
    objc_msgSend(v8, "removeObjectsInRange:", 0, objc_msgSend(v8, "count") - 2);
  }
  objc_sync_exit(v8);
}

void sub_182AAAC44(_Unwind_Exception *a1)
{
  if (!v3) {

  }
  objc_sync_exit(v5);
  _Unwind_Resume(a1);
}

void ___ZL59_LSSchemeApprovalUsePreferenceOrPromptWithCompletionHandlerP15NSXPCConnectionP8NSStringS2_S2_mU13block_pointerFvbP7NSErrorE_block_invoke(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (a2) {
    CFPreferencesSetValue(*(CFStringRef *)(a1 + 32), *(CFPropertyListRef *)(a1 + 40), @"com.apple.launchservices.schemeapproval", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_182AAAD48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id applicationBundleNameForIdentifier(NSString *a1)
{
  id v1 = a1;
  uint64_t v2 = [[LSApplicationRecord alloc] initWithBundleIdentifier:v1 allowPlaceholder:1 error:0];
  if (v2
    || (uint64_t v2 = [[LSApplicationRecord alloc] initWithBundleIdentifierOfSystemPlaceholder:v1 error:0]) != 0)
  {
    id v3 = [(LSBundleRecord *)v2 localizedName];
  }
  else
  {
    id v3 = 0;
  }

  return v3;
}

void sub_182AAAE00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL44_LSSchemeApprovalPromptWithCompletionHandlerP15NSXPCConnectionP8NSStringS2_S2_mU13block_pointerFvbP7NSErrorE_block_invoke(uint64_t a1, int a2)
{
  if (a2)
  {
    MEMORY[0x185310450]();
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    _DWORD v7[2] = ___ZL44_LSSchemeApprovalPromptWithCompletionHandlerP15NSXPCConnectionP8NSStringS2_S2_mU13block_pointerFvbP7NSErrorE_block_invoke_2;
    v7[3] = &unk_1E52309B8;
    id v8 = *(id *)(a1 + 32);
    id v9 = *(id *)(a1 + 40);
    id v10 = *(id *)(a1 + 48);
    id v11 = *(id *)(a1 + 56);
    id v12 = *(id *)(a1 + 64);
    id v3 = (void *)MEMORY[0x18530F950](v7);
    uint64_t v4 = *(void *)(a1 + 72);
    id v5 = _LSSchemeApprovalGetPromptQueue();
    uint64_t v6 = v5;
    if ((v4 & 2) != 0) {
      dispatch_async(v5, v3);
    }
    else {
      dispatch_sync(v5, v3);
    }
  }
}

id _LSSchemeApprovalGetPromptQueue(void)
{
  if (_LSSchemeApprovalGetPromptQueue(void)::once != -1) {
    dispatch_once(&_LSSchemeApprovalGetPromptQueue(void)::once, &__block_literal_global_54);
  }
  os_log_t v0 = (void *)_LSSchemeApprovalGetPromptQueue(void)::result;

  return v0;
}

void ___ZL26_LSSchemeApprovalDebugModev_block_invoke()
{
  CFPropertyListRef v0 = CFPreferencesCopyValue(@"_DebugMode", @"com.apple.launchservices.schemeapproval", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
  id v1 = (void *)v0;
  if (v0)
  {
    id v3 = (void *)v0;
    char v2 = objc_opt_respondsToSelector();
    id v1 = v3;
    if (v2)
    {
      _LSSchemeApprovalDebugMode(void)::CFTypeRef result = [v3 BOOLValue];
      id v1 = v3;
    }
  }
}

void sub_182AAB024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZL31_LSSchemeApprovalGetPromptQueuev_block_invoke()
{
  char v2 = dispatch_queue_attr_make_with_autorelease_frequency(MEMORY[0x1E4F14430], DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v0 = dispatch_queue_create("LS scheme approval prompt queue", v2);
  id v1 = (void *)_LSSchemeApprovalGetPromptQueue(void)::result;
  _LSSchemeApprovalGetPromptQueue(void)::CFTypeRef result = (uint64_t)v0;
}

void ___ZL37_LSSchemeApprovalGetBouncebackHistoryv_block_invoke()
{
  uint64_t v0 = [objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:3];
  id v1 = (void *)_LSSchemeApprovalGetBouncebackHistory(void)::result;
  _LSSchemeApprovalGetBouncebackHistory(void)::CFTypeRef result = v0;

  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZZL37_LSSchemeApprovalGetBouncebackHistoryvEUb_E14backlightToken, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZZL37_LSSchemeApprovalGetBouncebackHistoryvEUb_E14backlightToken))
  {
    __cxa_atexit((void (*)(void *))LaunchServices::notifyd::NotifyToken::~NotifyToken, _ZZZL37_LSSchemeApprovalGetBouncebackHistoryvEUb_E14backlightToken, &dword_182959000);
    __cxa_guard_release(&_ZGVZZL37_LSSchemeApprovalGetBouncebackHistoryvEUb_E14backlightToken);
  }
  char v2 = dispatch_get_global_queue(0, 0);
  LaunchServices::notifyd::NotifyToken::RegisterDispatch(@"com.apple.backboardd.backlight.changed", v2, &__block_literal_global_63, &v5);
  LaunchServices::notifyd::NotifyToken::operator=(_ZZZL37_LSSchemeApprovalGetBouncebackHistoryvEUb_E14backlightToken, (atomic_uint *)&v5);
  LaunchServices::notifyd::NotifyToken::~NotifyToken((LaunchServices::notifyd::NotifyToken *)&v5);
  if (FrontBoardServicesLibrary(void)::frameworkLibrary
    || (FrontBoardServicesLibrary(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices", 2)) != 0)
  {
    uint64_t v3 = [objc_alloc((Class)getFBSDisplayLayoutMonitorClass()) initWithDisplayType:0 handler:&__block_literal_global_66];
    uint64_t v4 = (void *)_ZZZL37_LSSchemeApprovalGetBouncebackHistoryvEUb_E7monitor;
    _ZZZL37_LSSchemeApprovalGetBouncebackHistoryvEUb_E7monitor = v3;
  }
}

void sub_182AAB1DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11)
{
  LaunchServices::notifyd::NotifyToken::~NotifyToken((LaunchServices::notifyd::NotifyToken *)&a11);

  _Unwind_Resume(a1);
}

void ___ZL37_LSSchemeApprovalGetBouncebackHistoryv_block_invoke_2()
{
  uint64_t State = LaunchServices::notifyd::NotifyToken::getState((LaunchServices::notifyd::NotifyToken *)_ZZZL37_LSSchemeApprovalGetBouncebackHistoryvEUb_E14backlightToken);
  if (v1) {
    BOOL v2 = State == 0;
  }
  else {
    BOOL v2 = 0;
  }
  if (v2)
  {
    _LSSchemeApprovalClearBouncebackHistory();
  }
}

void _LSSchemeApprovalClearBouncebackHistory(void)
{
  _LSSchemeApprovalGetBouncebackHistory();
  obuint64_t j = (id)objc_claimAutoreleasedReturnValue();
  objc_sync_enter(obj);
  [obj removeAllObjects];
  objc_sync_exit(obj);
}

void sub_182AAB2A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  _Unwind_Resume(a1);
}

Class initFBSDisplayLayoutMonitor(void)
{
  if (!FrontBoardServicesLibrary(void)::frameworkLibrary) {
    FrontBoardServicesLibrary(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices", 2);
  }
  Class result = objc_getClass("FBSDisplayLayoutMonitor");
  classFBSDisplayLayoutMonitor = (uint64_t)result;
  getFBSDisplayLayoutMonitorClass = (uint64_t (*)(void))FBSDisplayLayoutMonitorFunction;
  return result;
}

id FBSDisplayLayoutMonitorFunction(void)
{
  return (id)classFBSDisplayLayoutMonitor;
}

void _LSAskForScreenUnlock(void *a1, void *a2)
{
  _OWORD v15[2] = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  _LSAssertRunningInServer((uint64_t)"void _LSAskForScreenUnlock(__strong dispatch_queue_t _Nullable, void (^__strong _Non"
                                    "null)(BOOL, NSError *__strong))");
  if (v3)
  {
    unsigned int v5 = (void *)MEMORY[0x18530F950](v4);
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    v11[2] = ___LSAskForScreenUnlock_block_invoke;
    v11[3] = &unk_1E5230A50;
    id v12 = v3;
    id v13 = v5;
    id v6 = v5;
    uint64_t v7 = MEMORY[0x18530F950](v11);

    id v4 = (id)v7;
  }
  if (softLinkSBSGetScreenLockStatus(0))
  {
    id v8 = objc_alloc_init(_LSSpringBoardCall);
    [(_LSSpringBoardCall *)v8 setBundleIdentifier:@"com.apple.springboard"];
    v14[0] = getFBSOpenApplicationOptionKeyPromptUnlockDevice();
    uint64_t v9 = MEMORY[0x1E4F1CC38];
    v15[0] = MEMORY[0x1E4F1CC38];
    v14[1] = getFBSOpenApplicationOptionKeyUnlockDevice();
    v15[1] = v9;
    id v10 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v15 forKeys:v14 count:2];
    [(_LSSpringBoardCall *)v8 setLaunchOptions:v10];

    [(_LSSpringBoardCall *)v8 setClientXPCConnection:0];
    [(_LSSpringBoardCall *)v8 setCallCompletionHandlerWhenFullyComplete:1];
    [(_LSSpringBoardCall *)v8 callWithCompletionHandler:v4];
  }
  else
  {
    (*((void (**)(id, uint64_t, void))v4 + 2))(v4, 1, 0);
  }
}

void sub_182AAB51C(_Unwind_Exception *a1)
{
  unsigned int v5 = v4;

  _Unwind_Resume(a1);
}

uint64_t initSBSGetScreenLockStatus(unsigned __int8 *a1)
{
  BOOL v2 = (void *)SpringBoardServicesLibrary(void)::frameworkLibrary;
  if (!SpringBoardServicesLibrary(void)::frameworkLibrary)
  {
    BOOL v2 = dlopen("/System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices", 2);
    SpringBoardServicesLibrary(void)::frameworkLibrary = (uint64_t)v2;
  }
  id v3 = (uint64_t (*)(unsigned __int8 *))dlsym(v2, "SBSGetScreenLockStatus");
  softLinkSBSGetScreenLockStatus = v3;

  return v3(a1);
}

uint64_t initFBSOpenApplicationOptionKeyPromptUnlockDevice(void)
{
  uint64_t v0 = (void *)FrontBoardServicesLibrary(void)::frameworkLibrary;
  if (!FrontBoardServicesLibrary(void)::frameworkLibrary)
  {
    uint64_t v0 = dlopen("/System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices", 2);
    FrontBoardServicesLibrary(void)::frameworkLibrary = (uint64_t)v0;
  }
  uint64_t result = *(void *)dlsym(v0, "FBSOpenApplicationOptionKeyPromptUnlockDevice");
  constantFBSOpenApplicationOptionKeyPromptUnlockDevice = result;
  getFBSOpenApplicationOptionKeyPromptUnlockDevice = FBSOpenApplicationOptionKeyPromptUnlockDeviceFunction;
  return result;
}

uint64_t FBSOpenApplicationOptionKeyPromptUnlockDeviceFunction(void)
{
  return constantFBSOpenApplicationOptionKeyPromptUnlockDevice;
}

uint64_t initFBSOpenApplicationOptionKeyUnlockDevice(void)
{
  uint64_t v0 = (void *)FrontBoardServicesLibrary(void)::frameworkLibrary;
  if (!FrontBoardServicesLibrary(void)::frameworkLibrary)
  {
    uint64_t v0 = dlopen("/System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices", 2);
    FrontBoardServicesLibrary(void)::frameworkLibrary = (uint64_t)v0;
  }
  uint64_t result = *(void *)dlsym(v0, "FBSOpenApplicationOptionKeyUnlockDevice");
  constantFBSOpenApplicationOptionKeyUnlockDevice = result;
  getFBSOpenApplicationOptionKeyUnlockDevice = FBSOpenApplicationOptionKeyUnlockDeviceFunction;
  return result;
}

uint64_t FBSOpenApplicationOptionKeyUnlockDeviceFunction(void)
{
  return constantFBSOpenApplicationOptionKeyUnlockDevice;
}

id _LSServer_GetIOQueue()
{
  if (_LSServer_GetIOQueue::once != -1) {
    dispatch_once(&_LSServer_GetIOQueue::once, &__block_literal_global_70);
  }
  uint64_t v0 = (void *)_LSServer_GetIOQueue::result;

  return v0;
}

id _LSServer_GetAsyncWorkQueue()
{
  if (_LSServer_GetAsyncWorkQueue::once != -1) {
    dispatch_once(&_LSServer_GetAsyncWorkQueue::once, &__block_literal_global_3);
  }
  uint64_t v0 = (void *)_LSServer_GetAsyncWorkQueue::result;

  return v0;
}

uint64_t _LSServer_SetDatabaseIsSeeded(int a1)
{
  id v4 = 0;
  _LSDatabaseSessionSetSeedingInProgress(a1 == 0);
  if (_LSContextInit(&v4))
  {
    uint64_t v2 = 0;
  }
  else
  {
    if (v4 && -[_LSDatabase isSeeded]((uint64_t)v4) != a1)
    {
      -[_LSDatabase setSeeded:]((uint64_t)v4, a1 != 0);
      _LSDatabaseCommit((uint64_t)v4);
      uint64_t v2 = 1;
    }
    else
    {
      uint64_t v2 = 0;
    }
    _LSContextDestroy(&v4);
  }

  return v2;
}

void sub_182AAB99C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t _LSServer_RegisterItemInfo(void *a1, void *a2, void *a3, const __CFDictionary *a4, int *a5, uint64_t a6, unsigned char *a7, CFTypeRef *a8)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  id v15 = a1;
  id v16 = a2;
  id v41 = 0;
  int v40 = 0;
  char v39 = 0;
  _LSLogStepStart((uint64_t)v16, 0, 0, v17);
  _LSDatabaseSentinelIncrement();
  if (v15)
  {
    if (v15[2] == 7) {
      goto LABEL_6;
    }
    BOOL v18 = _LSDefaultLog();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      _LSServer_RegisterItemInfo_cold_1((uint64_t)v15, v18);
    }

    if (v15[2] == 7)
    {
LABEL_6:
      uint64_t v19 = _LSContextInit(&v41);
      if (v19)
      {
        BOOL v27 = 0;
      }
      else
      {
        uint64_t v19 = _LSServerItemInfoRegistration(&v41, v15, v16, a3, a4, (unsigned int *)&v40, a6, &v39, a7);
        if (v19) {
          goto LABEL_24;
        }
        CFURLRef v20 = (void *)_LSServer_CopyLocalDatabase(0);
        BOOL v21 = v20 == v41;

        if (!v21)
        {
          int v32 = [MEMORY[0x1E4F28B00] currentHandler];
          id v33 = objc_msgSend(NSString, "stringWithUTF8String:", "OSStatus _LSServer_RegisterItemInfo(const LSRegistrationInfo *__strong, NSData *__strong, CFDictionaryRef, CFDictionaryRef, CSStoreUnitID *, CSStoreUnitID *, Boolean *, CFStringRef *)");
          [v32 handleFailureInFunction:v33 file:@"LSServerInterface.mm" lineNumber:112 description:@"server local database differed from context after registration?"];
        }
        _LSDatabaseCommit((uint64_t)v41);
        if (v15[3] != 203 || v40 == 0) {
          goto LABEL_24;
        }
        if (v39)
        {
          unint64_t v23 = (void *)MEMORY[0x18530F680]();
          CFArrayRef v24 = _LSBundleGetRegistrationNotification(v41, v40, v15[4], @"com.apple.LaunchServices.applicationRegistered");
          if (v24)
          {
            int v25 = _LSServer_GetIOQueue();
            blocCFIndex k = MEMORY[0x1E4F143A8];
            uint64_t v35 = 3221225472;
            BOOL v36 = ___LSServer_RegisterItemInfo_block_invoke;
            uint64_t v37 = &unk_1E522D3E8;
            id v38 = v24;
            dispatch_async(v25, &block);
          }
        }
        else
        {
          int v26 = _LSRegistrationLog();
          if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 134217984;
            uint64_t v43 = v40;
            _os_log_impl(&dword_182959000, v26, OS_LOG_TYPE_DEFAULT, "Registration succeeded, but did not actually register anything new; returning existing bundle 0x%llx and n"
              "ot sending app-registered notification.",
              buf,
              0xCu);
          }
        }
        if (!a8 || !_LSBundleGet(v41, v40)) {
LABEL_24:
        }
          BOOL v27 = 0;
        else {
          BOOL v27 = (void *)_CSStringCopyCFString();
        }
        _LSContextDestroy(&v41);
        if (a8 && v27) {
          *a8 = CFRetain(v27);
        }
        if (a5) {
          *a5 = v40;
        }
      }
    }
    else
    {
      BOOL v27 = 0;
      uint64_t v19 = 4294956474;
    }
  }
  else
  {
    BOOL v27 = 0;
    uint64_t v19 = 4294967246;
  }
  CFStringRef v28 = v27;
  id v29 = [NSNumber numberWithInt:v19];
  _LSLogStepFinished((uint64_t)v29, v19 == 0, v28, v30, v29, block, v35, v36, v37);

  _LSDatabaseSentinelDecrement();
  if (v28) {
    CFRelease(v28);
  }

  return v19;
}

void sub_182AABDB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_182AABEE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _LSIfCanModifyDefaultHandler(void *a1, void *a2, _DWORD *a3, void *a4, void *a5)
{
  id v9 = a4;
  id v10 = a5;
  id v14 = 0;
  LODWORD(a2) = _LSCanModifyDefaultHandler(a1, a2, v9, (uint64_t)&v14);
  id v11 = v14;
  id v12 = v11;
  if (a2) {
    int v13 = v10[2](v10);
  }
  else {
    int v13 = _LSGetOSStatusFromNSError(v11);
  }
  *a3 = v13;
}

void sub_182AABFF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSCanModifyDefaultHandler(void *a1, void *a2, void *a3, uint64_t a4)
{
  v23[1] = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  if (v7 && ![v7 caseInsensitiveCompare:@"file"])
  {
    if (!a4) {
      goto LABEL_20;
    }
    uint64_t v22 = *MEMORY[0x1E4F28228];
    v23[0] = @"inScheme";
    id v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v23 forKeys:&v22 count:1];
    id v16 = _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -50, (uint64_t)"_LSCanModifyDefaultHandler", 195, v15);
LABEL_19:
    *(void *)a4 = v16;

    a4 = 0;
    goto LABEL_20;
  }
  if (_LSCheckXPCConnectionEntitlementForChangingDefaultHandler(v9, (uint64_t)v7, (uint64_t)v8))
  {
    _LSArmSaveTimer(3);
    a4 = 1;
    goto LABEL_20;
  }
  if (v7)
  {
    id v10 = _LSDefaultLog();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      pid_t pid = xpc_connection_get_pid((xpc_connection_t)v9);
      _LSCanModifyDefaultHandler_cold_2((uint64_t)v7, (uint64_t)v21, pid);
    }
  }
  if (v8)
  {
    id v12 = _LSDefaultLog();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      pid_t v13 = xpc_connection_get_pid((xpc_connection_t)v9);
      _LSCanModifyDefaultHandler_cold_1((uint64_t)v8, (uint64_t)v20, v13);
    }
  }
  if (a4)
  {
    uint64_t v18 = *MEMORY[0x1E4F28228];
    id v14 = @"com.apple.private.launchservices.changedefaulthandlers";
    if (!@"com.apple.private.launchservices.changedefaulthandlers") {
      id v14 = @"unknown entitlement";
    }
    uint64_t v19 = v14;
    id v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v19 forKeys:&v18 count:1];
    id v16 = _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -54, (uint64_t)"_LSCanModifyDefaultHandler", 207, v15);
    goto LABEL_19;
  }
LABEL_20:

  return a4;
}

void sub_182AAC248(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSEffectivePreferenceRolesMaskForMask(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (a1 != -1 && (~a1 & 0xE) == 0)
  {
    uint64_t v2 = _LSDefaultLog();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 134218240;
      uint64_t v5 = v1;
      __int16 v6 = 2048;
      uint64_t v7 = 0xFFFFFFFFLL;
      _os_log_impl(&dword_182959000, v2, OS_LOG_TYPE_DEFAULT, "Upgrading requested roles mask for preference write from %lx to %lx", (uint8_t *)&v4, 0x16u);
    }

    return 0xFFFFFFFFLL;
  }
  return v1;
}

uint64_t _LSServer_SetContentTypeHandler(LSContext *a1, uint64_t a2, const __CFString *a3, long long *a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v15 = 0;
  int v14 = 0;
  unsigned int v7 = _LSEffectivePreferenceRolesMaskForMask(a2);
  uint64_t v9 = _LSContextInit((id *)&v15);
  if (!v9)
  {
    if (!a1) {
      goto LABEL_9;
    }
    if (!LSHandlerPref::ValidateHandler(v15, @"com.apple.uniform-type-identifier", a1, a3, v8))
    {
      uint64_t v9 = 4294967242;
      goto LABEL_7;
    }
    int v10 = LSHandlerPref::CreateTagForContentType(v15, (const __CFString *)a1, &v14);
    if (!v10)
    {
      uint64_t v9 = 4294967246;
      goto LABEL_7;
    }
    int StringForCFString = _LSDatabaseCreateStringForCFString(v15, a3, 0);
    if (StringForCFString)
    {
      long long v12 = a4[1];
      v16[0] = *a4;
      v16[1] = v12;
      LSHandlerPref::SetRoleHandlerForTag(v15, v10, v14, v7, StringForCFString, v16);
      _LSDatabaseCommit((uint64_t)v15);
      uint64_t v9 = 0;
    }
    else
    {
LABEL_9:
      uint64_t v9 = 4294956479;
    }
LABEL_7:
    _CSStringRelease();
    _CSStringRelease();
    _LSContextDestroy((void **)&v15);
  }

  return v9;
}

void sub_182AAC4F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t _LSServer_RemoveContentTypeHandler(const __CFString *a1, uint64_t a2)
{
  CFStringRef v8 = 0;
  int v7 = 0;
  unsigned int v3 = _LSEffectivePreferenceRolesMaskForMask(a2);
  uint64_t v4 = _LSContextInit(&v8);
  if (!v4)
  {
    if (a1)
    {
      int TagForContentType = LSHandlerPref::GetTagForContentType(v8, a1, &v7);
      if (TagForContentType)
      {
        LSHandlerPref::RemoveRoleHandlerForTag(v8, TagForContentType, v7, v3);
        _LSDatabaseCommit((uint64_t)v8);
        uint64_t v4 = 0;
      }
      else
      {
        uint64_t v4 = 4294967246;
      }
    }
    else
    {
      uint64_t v4 = 4294956479;
    }
    _LSContextDestroy(&v8);
  }

  return v4;
}

void sub_182AAC5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t _LSServer_SetSchemeHandler(__CFString *a1, const __CFString *a2, long long *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  long long v12 = 0;
  uint64_t v7 = _LSContextInit((id *)&v12);
  if (!v7)
  {
    if (LSHandlerPref::ValidateHandler(v12, @"public.url-scheme", (LSContext *)a1, a2, v6))
    {
      int StringForCFString = _LSDatabaseCreateStringForCFString(v12, a1, 1);
      if (StringForCFString && (int v9 = _LSDatabaseCreateStringForCFString(v12, a2, 0)) != 0)
      {
        long long v10 = a3[1];
        v13[0] = *a3;
        v13[1] = v10;
        LSHandlerPref::SetRoleHandlerForTag(v12, StringForCFString, 5, 0xFFFFFFFF, v9, v13);
        _LSDatabaseCommit((uint64_t)v12);
        uint64_t v7 = 0;
      }
      else
      {
        uint64_t v7 = 4294956479;
      }
    }
    else
    {
      uint64_t v7 = 4294967242;
    }
    _CSStringRelease();
    _CSStringRelease();
    _LSContextDestroy((void **)&v12);
  }

  return v7;
}

void sub_182AAC72C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t _LSServer_RemoveSchemeHandler(const __CFString *a1)
{
  uint64_t v5 = 0;
  uint64_t v2 = _LSContextInit(&v5);
  if (!v2)
  {
    int StringForCFString = _LSDatabaseGetStringForCFString(v5, a1, 1);
    if (StringForCFString)
    {
      LSHandlerPref::RemoveHandlersForTag(v5, StringForCFString, 5);
      _LSDatabaseCommit((uint64_t)v5);
      uint64_t v2 = 0;
    }
    else
    {
      uint64_t v2 = 4294956479;
    }
    _LSContextDestroy(&v5);
  }

  return v2;
}

void sub_182AAC7D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

BOOL _LSServer_RemoveAllHandlers(void *a1)
{
  id v14 = 0;
  id v11 = 0;
  id v12 = 0;
  char v13 = 0;
  +[_LSDServiceDomain defaultServiceDomain]();
  uint64_t v2 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  unsigned int v3 = (LSHandlerPref **)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v11, v2, 0);

  if (v3)
  {
    LSHandlerPref::RemoveAll(*v3, v4);
    _LSDatabaseCommit((uint64_t)*v3);
    _LSArmSaveTimer(3);
  }
  else if (a1)
  {
    +[_LSDServiceDomain defaultServiceDomain]();
    uint64_t v5 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
    uint64_t v6 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v11, v5, 0);

    if (v6) {
      id v7 = 0;
    }
    else {
      id v7 = v14;
    }
    *a1 = v7;
  }
  if (v11 && v13) {
    _LSContextDestroy(v11);
  }
  id v8 = v12;
  id v11 = 0;
  id v12 = 0;

  char v13 = 0;
  id v9 = v14;
  id v14 = 0;

  return v3 != 0;
}

void sub_182AAC8FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a9);
  _Unwind_Resume(a1);
}

void _LSLogStep(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  id v11 = a3;
  id v9 = a4;
  if (v9) {
    long long v10 = (void *)[[NSString alloc] initWithFormat:v9 arguments:a5];
  }
  else {
    long long v10 = 0;
  }
  [(id)getAITransactionLogClass() logStep:4 byParty:5 phase:a1 success:a2 forBundleID:v11 description:v10];
}

void sub_182AACA00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t OUTLINED_FUNCTION_0_13(uint64_t result, uint64_t a2, int a3, float a4)
{
  *(float *)a2 = a4;
  *(void *)(a2 + 4) = result;
  *(_WORD *)(a2 + 12) = 1024;
  *(_DWORD *)(a2 + 14) = a3;
  return result;
}

BOOL LaunchServices::LSDefaultAppsExtraStateManager::validatePlist(LaunchServices::LSDefaultAppsExtraStateManager *this, objc_object *a2)
{
  uint64_t v2 = this;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    unsigned int v3 = [(LaunchServices::LSDefaultAppsExtraStateManager *)v2 objectForKey:@"PreviouslySetCategories"];
    BOOL v5 = 1;
    if (v3)
    {
      uint64_t v4 = objc_opt_class();
      if (!_LSIsArrayWithValuesOfClass(v3, v4)) {
        BOOL v5 = 0;
      }
    }
  }
  else
  {
    BOOL v5 = 0;
  }

  return v5;
}

void sub_182AACB44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id LaunchServices::LSDefaultAppsExtraStateManager::plistFromState(void *a1)
{
  v7[1] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = @"PreviouslySetCategories";
  if (a1)
  {
    uint64_t v2 = a1;
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F1CAD0] set];
  }
  unsigned int v3 = [v2 allObjects];
  v7[0] = v3;
  uint64_t v4 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v7 forKeys:&v6 count:1];

  if (!a1) {

  }
  return v4;
}

void sub_182AACC54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::LSDefaultAppsExtraStateManager::stateFromValidatedPlist(LaunchServices::LSDefaultAppsExtraStateManager *this, objc_object *a2)
{
  uint64_t v2 = this;
  unsigned int v3 = [(LaunchServices::LSDefaultAppsExtraStateManager *)v2 objectForKey:@"PreviouslySetCategories"];
  uint64_t v4 = (void *)[objc_alloc(MEMORY[0x1E4F1CAD0]) initWithArray:v3];
  uint64_t v5 = [v4 copy];

  return v5;
}

void sub_182AACCF8(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void LaunchServices::LSDefaultAppsExtraStateManager::read(uint64_t a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  *a3 = 0;
  a3[8] = 0;
  LaunchServices::LSStatePlist::read(a1, a2);
  uint64_t v4 = (LaunchServices::LSDefaultAppsExtraStateManager *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    uint64_t v6 = v4;
    *(void *)a3 = LaunchServices::LSDefaultAppsExtraStateManager::stateFromValidatedPlist(v4, v5);
    a3[8] = 1;
    uint64_t v4 = v6;
  }
}

void sub_182AACD88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id LaunchServices::LSDefaultAppsExtraStateManager::modify(uint64_t a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1ECB19E38;
  v4[1] = a2;
  v4[3] = v4;
  uint64_t v2 = LaunchServices::LSStatePlist::modify(a1, (uint64_t)v4);
  std::__function::__value_func<objc_object * ()(objc_object *,NSError *)>::~__value_func[abi:nn180100](v4);

  return v2;
}

void sub_182AACE3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<objc_object * ()(objc_object *,NSError *)>::~__value_func[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::_LSServer_DefaultAppsExtraStateManager(LaunchServices *this)
{
  if (LaunchServices::_LSServer_DefaultAppsExtraStateManager(void)::onceToken != -1) {
    dispatch_once(&LaunchServices::_LSServer_DefaultAppsExtraStateManager(void)::onceToken, &__block_literal_global_71);
  }
  return LaunchServices::_LSServer_DefaultAppsExtraStateManager(void)::result;
}

void ___ZN14LaunchServices38_LSServer_DefaultAppsExtraStateManagerEv_block_invoke()
{
}

void sub_182AACF0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  MEMORY[0x18530EAF0](v10, 0x10A0C404E20B1D3);
  _Unwind_Resume(a1);
}

LaunchServices::LSDefaultAppsExtraStateManager *LaunchServices::LSDefaultAppsExtraStateManager::LSDefaultAppsExtraStateManager(LaunchServices::LSDefaultAppsExtraStateManager *this, NSURL *a2)
{
  v4[4] = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1ECB194B0;
  v4[1] = LaunchServices::LSDefaultAppsExtraStateManager::validatePlist;
  v4[3] = v4;
  LaunchServices::LSStatePlist::LSStatePlist((uint64_t)this, a2, (uint64_t)v4);
  std::__function::__value_func<BOOL ()(objc_object *)>::~__value_func[abi:nn180100](v4);
  return this;
}

void sub_182AACFDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(objc_object *)>::~__value_func[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<LaunchServices::LSDefaultAppsExtraStateManager::modify(std::function<LaunchServices::LSDefaultAppsExtraState ()(std::optional<LaunchServices::LSDefaultAppsExtraState>,NSError *)> const&)::$_0,std::allocator<LaunchServices::LSDefaultAppsExtraStateManager::modify(std::function<LaunchServices::LSDefaultAppsExtraState ()(std::optional<LaunchServices::LSDefaultAppsExtraState>,NSError *)> const&)::$_0>,objc_object * ()(objc_object *,NSError *)>::~__func()
{
}

void *std::__function::__func<LaunchServices::LSDefaultAppsExtraStateManager::modify(std::function<LaunchServices::LSDefaultAppsExtraState ()(std::optional<LaunchServices::LSDefaultAppsExtraState>,NSError *)> const&)::$_0,std::allocator<LaunchServices::LSDefaultAppsExtraStateManager::modify(std::function<LaunchServices::LSDefaultAppsExtraState ()(std::optional<LaunchServices::LSDefaultAppsExtraState>,NSError *)> const&)::$_0>,objc_object * ()(objc_object *,NSError *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1ECB19E38;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<LaunchServices::LSDefaultAppsExtraStateManager::modify(std::function<LaunchServices::LSDefaultAppsExtraState ()(std::optional<LaunchServices::LSDefaultAppsExtraState>,NSError *)> const&)::$_0,std::allocator<LaunchServices::LSDefaultAppsExtraStateManager::modify(std::function<LaunchServices::LSDefaultAppsExtraState ()(std::optional<LaunchServices::LSDefaultAppsExtraState>,NSError *)> const&)::$_0>,objc_object * ()(objc_object *,NSError *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECB19E38;
  a2[1] = v2;
  return result;
}

id std::__function::__func<LaunchServices::LSDefaultAppsExtraStateManager::modify(std::function<LaunchServices::LSDefaultAppsExtraState ()(std::optional<LaunchServices::LSDefaultAppsExtraState>,NSError *)> const&)::$_0,std::allocator<LaunchServices::LSDefaultAppsExtraStateManager::modify(std::function<LaunchServices::LSDefaultAppsExtraState ()(std::optional<LaunchServices::LSDefaultAppsExtraState>,NSError *)> const&)::$_0>,objc_object * ()(objc_object *,NSError *)>::operator()(uint64_t a1, id *a2, void **a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = (LaunchServices::LSDefaultAppsExtraStateManager *)*a2;
  id v7 = v4;
  if (v5)
  {
    id v8 = (void *)LaunchServices::LSDefaultAppsExtraStateManager::stateFromValidatedPlist(v5, v6);
    uint64_t v9 = *(void *)(a1 + 8);
    id v10 = v8;
    id v15 = v10;
    char v16 = 1;
  }
  else
  {
    id v10 = 0;
    uint64_t v9 = *(void *)(a1 + 8);
    LOBYTE(v15) = 0;
    char v16 = 0;
  }
  id v11 = std::function<LaunchServices::LSDefaultAppsExtraState ()(std::optional<LaunchServices::LSDefaultAppsExtraState>,NSError *)>::operator()(v9, (uint64_t)&v15, v7);
  if (v16) {

  }
  id v12 = v11;
  char v13 = LaunchServices::LSDefaultAppsExtraStateManager::plistFromState(v11);

  if (v5) {

  }
  return v13;
}

void sub_182AAD168(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::function<LaunchServices::LSDefaultAppsExtraState ()(std::optional<LaunchServices::LSDefaultAppsExtraState>,NSError *)>::operator()(uint64_t a1, uint64_t a2, void *a3)
{
  id v8 = a3;
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, id *))(*(void *)v5 + 48))(v5, a2, &v8);

    return (void *)v6;
  }
  else
  {
    uint64_t result = std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  return result;
}

void sub_182AAD224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void _LSServerCleanEphemeralMobileContainersForFirstBoot(uint64_t *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  uint64_t v13 = MEMORY[0x1E4F143A8];
  uint64_t v14 = 3221225472;
  id v15 = ___LSServerCleanEphemeralMobileContainersForFirstBoot_block_invoke;
  char v16 = &unk_1E5230A78;
  uint64_t v18 = a1;
  id v3 = v2;
  id v17 = v3;
  _CSStoreEnumerateUnits();
  if ([v3 count])
  {
    _LSDatabaseSentinelIncrement();
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    id v4 = v3;
    uint64_t v5 = [v4 countByEnumeratingWithState:&v9 objects:v19 count:16];
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)v10;
      do
      {
        uint64_t v8 = 0;
        do
        {
          if (*(void *)v10 != v7) {
            objc_enumerationMutation(v4);
          }
          _LSContainerRemove(a1, objc_msgSend(*(id *)(*((void *)&v9 + 1) + 8 * v8++), "unsignedIntegerValue", (void)v9));
        }
        while (v6 != v8);
        uint64_t v6 = [v4 countByEnumeratingWithState:&v9 objects:v19 count:16];
      }
      while (v6);
    }

    _LSArmSaveTimer(1);
    _LSDatabaseSentinelDecrement();
  }
}

uint64_t _LSServerMain(int a1, uint64_t a2)
{
  uint64_t v110 = *MEMORY[0x1E4F143B8];
  context = (void *)MEMORY[0x18530F680]();
  [MEMORY[0x1E4F28C58] _setFileNameLocalizationEnabled:0];
  if (setiopolicy_np(9, 0, 1) < 0)
  {
    int v4 = *__error();
    uint64_t v5 = _LSDefaultLog();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      _LSServerMain_cold_5(v4, v5);
    }
  }
  [(id)__LSDefaultsGetSharedInstance() setServer:1];
  if (a1 < 2)
  {
    char v6 = 0;
  }
  else
  {
    char v6 = 0;
    uint64_t v7 = a1 - 1;
    uint64_t v8 = (const char **)(a2 + 8);
    do
    {
      long long v9 = *v8++;
      v6 |= strcasecmp(v9, "systemSessionDaemon") == 0;
      --v7;
    }
    while (v7);
  }
  [(id)__LSDefaultsGetSharedInstance() setLightweightSystemServer:v6 & 1];
  long long v10 = _LSDefaultLog();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136446722;
    *(void *)&uint8_t buf[4] = getprogname();
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = [(id)__LSDefaultsGetSharedInstance() currentSchemaVersion];
    *(_WORD *)&unsigned char buf[22] = 2048;
    unint64_t v104 = _CFGetEUID();
    _os_log_impl(&dword_182959000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s starting with schema version %llu for effective user %llu", buf, 0x20u);
  }

  if (listenForSigterm_onceToken != -1) {
    dispatch_once(&listenForSigterm_onceToken, &__block_literal_global_72);
  }
  if (!_LSServerHasDoneFirstBootWork())
  {
    long long v11 = _LSDefaultLog();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_182959000, v11, OS_LOG_TYPE_DEFAULT, "migrating old preference files on first start after reboot...", buf, 2u);
    }

    long long v12 = (void *)[objc_alloc(MEMORY[0x1E4F1CB10]) initFileURLWithPath:@"/private/var/mobile/Library/Preferences/com.apple.MobileCoreServices/com.apple.launchservices.secure.plist" isDirectory:0];
    uint64_t v13 = (void *)[objc_alloc(MEMORY[0x1E4F1CB10]) initFileURLWithPath:@"/private/var/mobile/Library/Preferences/com.apple.MobileCoreServices/com.apple.LaunchServices.plist" isDirectory:0];
    uint64_t v14 = [MEMORY[0x1E4F28CB8] defaultManager];
    id v15 = [v12 path];
    int v16 = [v14 fileExistsAtPath:v15];

    if (v16)
    {
      id v17 = [(id)__LSDefaultsGetSharedInstance() securePreferencesFileURL];
      moveItemAtURLToURL(v12, v17);
    }
    uint64_t v18 = [MEMORY[0x1E4F28CB8] defaultManager];
    uint64_t v19 = [v13 path];
    int v20 = [v18 fileExistsAtPath:v19];

    if (v20)
    {
      BOOL v21 = [(id)__LSDefaultsGetSharedInstance() preferencesFileURL];
      moveItemAtURLToURL(v13, v21);
    }
    if (([(id)__LSDefaultsGetSharedInstance() isInEducationMode] & 1) == 0)
    {
      uint64_t v22 = [MEMORY[0x1E4F28CB8] defaultManager];
      unint64_t v23 = [(id)__LSDefaultsGetSharedInstance() preSydroFSecurePreferencesFileURL];
      CFArrayRef v24 = [v23 path];
      int v25 = [v22 fileExistsAtPath:v24];

      if (v25)
      {
        int v26 = [(id)__LSDefaultsGetSharedInstance() preSydroFSecurePreferencesFileURL];
        BOOL v27 = [(id)__LSDefaultsGetSharedInstance() securePreferencesFileURL];
        moveItemAtURLToURL(v26, v27);

        CFStringRef v28 = [(id)__LSDefaultsGetSharedInstance() securePreferencesFileURL];
        *(void *)&long long v106 = *MEMORY[0x1E4F1C590];
        *(void *)long long buf = *MEMORY[0x1E4F1C598];
        id v29 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:buf forKeys:&v106 count:1];
        *(void *)uint64_t v100 = 0;
        char v30 = [v28 setResourceValues:v29 error:v100];
        id v31 = *(id *)v100;

        if ((v30 & 1) == 0)
        {
          int v32 = _LSDefaultLog();
          if (os_log_type_enabled(v32, OS_LOG_TYPE_FAULT)) {
            _LSServerMain_cold_4((uint64_t)v31, v32);
          }
        }
      }
    }
    id v33 = [MEMORY[0x1E4F28CB8] defaultManager];
    id v34 = (void *)[objc_alloc(MEMORY[0x1E4F1CB10]) initFileURLWithPath:@"/private/var/db/lsd/com.apple.lsdschemes.plist" isDirectory:0];
    [v33 removeItemAtURL:v34 error:0];

    uint64_t v35 = _LSDefaultLog();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v99 = 0;
      _os_log_impl(&dword_182959000, v35, OS_LOG_TYPE_DEFAULT, "Done migrating old preference files.", v99, 2u);
    }
  }
  BOOL v36 = (void *)MEMORY[0x18530F680]();
  uint64_t v37 = [(id)__LSDefaultsGetSharedInstance() systemContainerURL];
  id v38 = [v37 path];

  char v39 = [MEMORY[0x1E4F28CB8] defaultManager];
  char v40 = [v39 fileExistsAtPath:v38];

  if ((v40 & 1) == 0)
  {
    id v41 = [MEMORY[0x1E4F28CB8] defaultManager];
    *(void *)&long long v106 = *MEMORY[0x1E4F28330];
    *(void *)long long buf = &unk_1ECB439C0;
    CFStringRef v42 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:buf forKeys:&v106 count:1];
    [v41 createDirectoryAtPath:v38 withIntermediateDirectories:1 attributes:v42 error:0];
  }
  BOOL v95 = [MEMORY[0x1E4F28CB8] defaultManager];
  uint64_t v43 = [(id)__LSDefaultsGetSharedInstance() databaseContainerDirectoryURL];
  uint64_t v44 = [MEMORY[0x1E4F1C978] array];
  *(void *)id v99 = 0;
  CFURLRef v94 = [v95 contentsOfDirectoryAtURL:v43 includingPropertiesForKeys:v44 options:0 error:v99];
  id v97 = *(id *)v99;

  if (v97)
  {
    id v45 = _LSDefaultLog();
    uint64_t v46 = v45;
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
    {
      _LSServerMain_cold_3((uint64_t)v97, v45);
      uint64_t v46 = v45;
    }
    goto LABEL_56;
  }
  CFUUIDRef v47 = getenv("LS_NAME_PREFIX");
  uint64_t v48 = "com.apple.LaunchServices";
  if (v47) {
    uint64_t v48 = v47;
  }
  long long v96 = v48;
  CFStringRef v49 = (void *)MEMORY[0x1E4F1CAD0];
  id v50 = [(id)__LSDefaultsGetSharedInstance() databaseStoreFileURL];
  id v51 = [v50 lastPathComponent];
  id v52 = [(id)__LSDefaultsGetSharedInstance() systemContentDatabaseStoreFileURL];
  id v53 = [v52 lastPathComponent];
  objc_msgSend(v49, "setWithObjects:", v51, v53, 0);
  id v97 = (id)objc_claimAutoreleasedReturnValue();

  long long v108 = 0u;
  long long v109 = 0u;
  long long v106 = 0u;
  long long v107 = 0u;
  uint64_t v46 = v94;
  uint64_t v54 = [v46 countByEnumeratingWithState:&v106 objects:buf count:16];
  if (v54)
  {
    uint64_t v55 = *(void *)v107;
    do
    {
      for (uint64_t i = 0; i != v54; ++i)
      {
        if (*(void *)v107 != v55) {
          objc_enumerationMutation(v46);
        }
        CFStringRef v57 = *(void **)(*((void *)&v106 + 1) + 8 * i);
        id v58 = [v57 pathExtension];
        if (![v58 isEqualToString:@"csstore"]) {
          goto LABEL_53;
        }
        id v59 = [v57 lastPathComponent];
        char v60 = [v97 containsObject:v59];

        if (v60) {
          continue;
        }
        id v58 = objc_msgSend(NSString, "stringWithFormat:", @"SystemDataOnly-%s-", v96);
        CFAllocatorRef v61 = objc_msgSend(NSString, "stringWithFormat:", @"%s-", v96);
        id v62 = [v57 lastPathComponent];
        if ([v62 hasPrefix:v58])
        {

LABEL_48:
          id v98 = 0;
          [v95 removeItemAtURL:v57 error:&v98];
          id v65 = v98;
          if (v65)
          {
            uint64_t v66 = v65;
            CFStringRef v67 = _LSDefaultLog();
            if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
            {
              id v68 = [v57 path];
              *(_DWORD *)uint64_t v100 = 138412546;
              *(void *)&v100[4] = v68;
              __int16 v101 = 2112;
              CFTypeID v102 = v66;
              _os_log_error_impl(&dword_182959000, v67, OS_LOG_TYPE_ERROR, "Error removing stale db file at path: %@ %@", v100, 0x16u);
            }
          }
          goto LABEL_52;
        }
        id v63 = [v57 lastPathComponent];
        int v64 = [v63 hasPrefix:v61];

        if (v64) {
          goto LABEL_48;
        }
LABEL_52:

LABEL_53:
      }
      uint64_t v54 = [v46 countByEnumeratingWithState:&v106 objects:buf count:16];
    }
    while (v54);
  }
LABEL_56:

  int v69 = (void *)MEMORY[0x18530F680]();
  CFTypeRef v70 = [(id)__LSDefaultsGetSharedInstance() systemContainerURL];
  setBackupAttributesForURL(v70);

  if (([(id)__LSDefaultsGetSharedInstance() isLightweightSystemServer] & 1) == 0)
  {
    CFBooleanRef v71 = [(id)__LSDefaultsGetSharedInstance() userContainerURL];
    setBackupAttributesForURL(v71);
  }
  CFTypeID v72 = (void *)MEMORY[0x18530F680]();
  *(void *)&long long v106 = 0;
  *((void *)&v106 + 1) = &v106;
  *(void *)&long long v107 = 0x2020000000;
  BYTE8(v107) = 0;
  int SyncInterrupted = _LSDatabaseGetSyncInterrupted();
  _LSDatabaseClearSyncInterrupted();
  if (SyncInterrupted)
  {
    BOOL v74 = _LSDefaultLog();
    if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR)) {
      _LSServerMain_cold_2(v74);
    }

    CFStringRef v75 = [(id)__LSDefaultsGetSharedInstance() dbRecoveryFileURL];
    _LSDatabaseDeleteRecoveryFile(v75);
  }
  id v76 = +[LSDBExecutionContext sharedServerInstance]();
  _LSServer_SetDatabaseExecutionContext(v76);

  id v77 = _LSServer_DatabaseExecutionContext();
  *(void *)long long buf = MEMORY[0x1E4F143A8];
  *(void *)&uint8_t buf[8] = 3221225472;
  *(void *)&uint8_t buf[16] = __seedDatabase_block_invoke;
  unint64_t v104 = (unint64_t)&unk_1E522C608;
  CFTypeID v105 = &v106;
  -[LSDBExecutionContext beginServerDBBootstrap:]((uint64_t)v77, buf);

  if (!*(unsigned char *)(*((void *)&v106 + 1) + 24) && (SyncInterrupted || _LSDatabaseSentinelGet()))
  {
    id v78 = _LSServer_GetIOQueue();
    dispatch_async(v78, &__block_literal_global_38);
  }
  _Block_object_dispose(&v106, 8);
  if (!_LSServerHasDoneFirstBootWork())
  {
    id v79 = _LSDefaultLog();
    if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_182959000, v79, OS_LOG_TYPE_DEFAULT, "Reboot detected, performing first boot work.", buf, 2u);
    }

    CFURLRef v80 = _LSServer_DatabaseExecutionContext();
    -[LSDBExecutionContext syncWrite:]((uint64_t)v80, &__block_literal_global_41_0);

    LSNoteFirstBootForRestrictions();
    uint64_t v81 = _LSDefaultLog();
    if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_182959000, v81, OS_LOG_TYPE_DEFAULT, "First boot work complete!", buf, 2u);
    }

    CFURLRef v82 = sem_open("com.apple.lsd.firstboot", 512, 256, 0);
    if (v82 == (sem_t *)-1)
    {
      CFStringRef v83 = _LSDefaultLog();
      if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR)) {
        _LSServerMain_cold_1(v83);
      }
    }
    else
    {
      sem_close(v82);
    }
  }
  if (_os_feature_enabled_impl())
  {
    CFStringRef v84 = _LSServer_DatabaseExecutionContext();
    -[LSDBExecutionContext syncWrite:]((uint64_t)v84, &__block_literal_global_45_0);
  }
  CFStringRef v85 = _LSServer_DatabaseExecutionContext();
  -[LSDBExecutionContext syncWrite:]((uint64_t)v85, &__block_literal_global_47);

  CFStringRef v86 = (void *)MEMORY[0x18530F680]();
  _LSDServiceStartAllServices();
  unsigned int v87 = +[LSDatabaseBlockingFetchServer sharedInstance];
  [v87 startRunningIfNecessary];

  if (([(id)__LSDefaultsGetSharedInstance() isLightweightSystemServer] & 1) == 0)
  {
    +[_LSInstallProgressService beginListening];
    +[_LSInstallationService beginListening];
    id v88 = +[_LSPersonaDatabase sharedInstance]();
    if (ExtensionFoundationLibrary_frameworkLibrary
      || (ExtensionFoundationLibrary_frameworkLibrary = (uint64_t)dlopen("/System/Library/Frameworks/ExtensionFoundation.framework/ExtensionFoundation", 2)) != 0)
    {
      softLink_EXStartService();
    }
    _LSServer_BeginProvidingVisualizationArchives();
  }
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, 0, (CFNotificationCallback)languagePrefChanged, @"AppleLanguagePreferencesChangedNotification", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  _LSAppsAnalyticsStartListening();
  if ([(id)__LSDefaultsGetSharedInstance() isLightweightSystemServer]) {
    int v90 = runLightweightServerMainRunLoop;
  }
  else {
    int v90 = runServerMainRunLoop;
  }
  uint64_t v91 = std::__function::__func<BOOL (*)(objc_object *),std::allocator<BOOL (*)(objc_object *)>,BOOL ()(objc_object *)>::~__func(v90);
  ((void (*)(uint64_t))v90)(v91);
  return 0;
}

void sub_182AAE30C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void runLightweightServerMainRunLoop()
{
}

void runServerMainRunLoop()
{
}

void __listenForSigterm_block_invoke()
{
  listenForSigterm_sigtermSet = 0x4000;
  if (sigprocmask(1, (const sigset_t *)&listenForSigterm_sigtermSet, 0))
  {
    uint64_t v0 = _LSDefaultLog();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR)) {
      __listenForSigterm_block_invoke_cold_1();
    }
  }
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.lsd.sigact", 0);
  id v2 = (void *)listenForSigterm_handlerQueue;
  listenForSigterm_handlerQueue = (uint64_t)v1;

  dispatch_source_t v3 = dispatch_source_create(MEMORY[0x1E4F14480], 0xFuLL, 0, (dispatch_queue_t)listenForSigterm_handlerQueue);
  int v4 = (void *)listenForSigterm_sigtermSource;
  listenForSigterm_sigtermSource = (uint64_t)v3;

  dispatch_source_set_event_handler((dispatch_source_t)listenForSigterm_sigtermSource, &__block_literal_global_9);
  dispatch_resume((dispatch_object_t)listenForSigterm_sigtermSource);
}

void __listenForSigterm_block_invoke_7()
{
  uint64_t v0 = _LSDefaultLog();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_182959000, v0, OS_LOG_TYPE_DEFAULT, "Received SIGTERM.", buf, 2u);
  }

  _LSServer_NoteTerminationRequestForMISync();
  sigset_t v6 = 0;
  if (sigpending(&v6))
  {
    dispatch_queue_t v1 = _LSDefaultLog();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
      __listenForSigterm_block_invoke_7_cold_2();
    }
  }
  if (sigprocmask(2, (const sigset_t *)&listenForSigterm_sigtermSet, 0))
  {
    id v2 = _LSDefaultLog();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      __listenForSigterm_block_invoke_7_cold_1();
    }
  }
  if ((v6 & 0x4000) == 0)
  {
    dispatch_source_t v3 = _LSDefaultLog();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl(&dword_182959000, v3, OS_LOG_TYPE_DEFAULT, "SIGTERM was consumed. Taking it upon ourselves to deliver it.", v5, 2u);
    }

    pid_t v4 = getpid();
    kill(v4, 15);
  }
  dispatch_source_cancel((dispatch_source_t)listenForSigterm_sigtermSource);
}

BOOL _LSServerHasDoneFirstBootWork()
{
  uint64_t v0 = sem_open("com.apple.lsd.firstboot", 0);
  dispatch_queue_t v1 = v0;
  if (v0 != (sem_t *)-1) {
    sem_close(v0);
  }
  return v1 != (sem_t *)-1;
}

void moveItemAtURLToURL(void *a1, void *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (!v3 || !v4)
  {
    uint64_t v14 = _LSDefaultLog();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412546;
      id v25 = v3;
      __int16 v26 = 2112;
      BOOL v27 = v5;
      id v15 = "LaunchServices: failed trying to migrate file %@ to %@";
      int v16 = v14;
      uint32_t v17 = 22;
LABEL_10:
      _os_log_impl(&dword_182959000, v16, OS_LOG_TYPE_DEFAULT, v15, buf, v17);
    }
LABEL_11:
    id v18 = 0;
LABEL_12:

    goto LABEL_13;
  }
  sigset_t v6 = [MEMORY[0x1E4F28CB8] defaultManager];
  uint64_t v7 = [v3 path];
  int v8 = [v6 fileExistsAtPath:v7];

  if (!v8)
  {
    uint64_t v14 = _LSDefaultLog();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v25 = v3;
      id v15 = "LaunchServices: No file to migrate at URL %@";
      int v16 = v14;
      uint32_t v17 = 12;
      goto LABEL_10;
    }
    goto LABEL_11;
  }
  long long v9 = [MEMORY[0x1E4F28CB8] defaultManager];
  long long v10 = [v5 path];
  char v11 = [v9 fileExistsAtPath:v10];

  if (v11)
  {
    id v12 = 0;
    int v13 = 1;
  }
  else
  {
    uint64_t v19 = [MEMORY[0x1E4F28CB8] defaultManager];
    id v23 = 0;
    int v13 = [v19 copyItemAtURL:v3 toURL:v5 error:&v23];
    id v12 = v23;
  }
  int v20 = [MEMORY[0x1E4F28CB8] defaultManager];
  id v22 = v12;
  char v21 = [v20 removeItemAtURL:v3 error:&v22];
  id v18 = v22;

  if ((!v13 || (v21 & 1) == 0) && [v18 code] != 4)
  {
    uint64_t v14 = _LSDefaultLog();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v25 = v18;
      _os_log_impl(&dword_182959000, v14, OS_LOG_TYPE_DEFAULT, "LaunchServices: Migration move item step failed with error: %@", buf, 0xCu);
    }
    goto LABEL_12;
  }
LABEL_13:
}

void setBackupAttributesForURL(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    uint64_t v3 = *MEMORY[0x1E4F1C630];
    id v9 = 0;
    char v4 = [v1 setResourceValue:MEMORY[0x1E4F1CC38] forKey:v3 error:&v9];
    id v5 = v9;
    if ((v4 & 1) == 0)
    {
      sigset_t v6 = _LSDefaultLog();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = [v5 domain];
        uint64_t v8 = [v5 code];
        *(_DWORD *)long long buf = 138478339;
        char v11 = v2;
        __int16 v12 = 2114;
        int v13 = v7;
        __int16 v14 = 2048;
        uint64_t v15 = v8;
        _os_log_impl(&dword_182959000, v6, OS_LOG_TYPE_DEFAULT, "Error excluding %{private}@ from backup: %{public}@ %lli", buf, 0x20u);
      }
    }
  }
}

void __seedDatabase_block_invoke(uint64_t a1)
{
  id v2 = [LSDatabaseBuilder alloc];
  uint64_t v3 = _LSServer_GetIOQueue();
  uint64_t v7 = [(LSDatabaseBuilder *)v2 initWithIOQueue:v3];

  [(LSDatabaseBuilder *)v7 createAndSeedLocalDatabase:*(void *)(*(void *)(a1 + 32) + 8) + 24];
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  int v6 = *(unsigned __int8 *)(v4 + 24);
  uint64_t v5 = v4 + 24;
  if (!v6) {
    [(LSDatabaseBuilder *)v7 seedCryptexContentIfNeeded:v5];
  }
}

void __seedDatabase_block_invoke_2()
{
}

void __performFirstBootWorkIfNecessary_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  id v9 = 0;
  id v10 = 0;
  int inited = _LSContextInitReturningError(&v10, &v9);
  id v7 = v9;
  if (inited)
  {
    _LSServerCleanEphemeralMobileContainersForFirstBoot((uint64_t *)&v10);
  }
  else
  {
    uint64_t v8 = _LSDefaultLog();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      __performFirstBootWorkIfNecessary_block_invoke_cold_1((uint64_t)v7, v8);
    }
  }
}

void sub_182AAEAD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void __migrateDefaultAppsToNewWorld_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  id v11 = 0;
  __int16 v12 = 0;
  int inited = _LSContextInitReturningError(&v12, &v11);
  id v7 = v11;
  if (inited)
  {
    id v8 = (id)_LSServer_LSMigratePreferencesForDefaultApps(&v12);
  }
  else
  {
    id v9 = _LSDefaultLog();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      __migrateDefaultAppsToNewWorld_block_invoke_cold_1((uint64_t)v7, v9, v10);
    }
  }
}

void sub_182AAEBA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t (*init_EXStartService())()
{
  uint64_t v0 = (void *)ExtensionFoundationLibrary_frameworkLibrary;
  if (!ExtensionFoundationLibrary_frameworkLibrary)
  {
    uint64_t v0 = dlopen("/System/Library/Frameworks/ExtensionFoundation.framework/ExtensionFoundation", 2);
    ExtensionFoundationLibrary_frameworkLibrary = (uint64_t)v0;
  }
  uint64_t result = (uint64_t (*)())dlsym(v0, "_EXStartService");
  softLink_EXStartService = result;
  if (result)
  {
    return (uint64_t (*)())result();
  }
  return result;
}

void languagePrefChanged()
{
  MEMORY[0x185310450]();
  uint64_t v0 = _LSDatabaseGetSeedingGroup();
  dispatch_group_wait(v0, 0xFFFFFFFFFFFFFFFFLL);

  id v1 = _LSDatabaseGetInstallingGroup();
  dispatch_group_wait(v1, 0xFFFFFFFFFFFFFFFFLL);

  id v2 = _LSDatabaseGetMobileInstallSyncupGroup();
  dispatch_group_wait(v2, 0xFFFFFFFFFFFFFFFFLL);

  _LSServer_DatabaseExecutionContext();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  -[LSDBExecutionContext syncWrite:]((uint64_t)v3, &__block_literal_global_58);
}

void __languagePrefChanged_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  _LSSaveImmediately(1);
  MEMORY[0x185310460]();
  int v6 = _LSDefaultLog();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v7 = 0;
    _os_log_impl(&dword_182959000, v6, OS_LOG_TYPE_DEFAULT, "LaunchServices: received languagePrefChanged notification, exiting.", v7, 2u);
  }

  exit(0);
}

void OUTLINED_FUNCTION_0_14(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 8u);
}

void sub_182AAEF3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  objc_sync_exit(v10);
  _Unwind_Resume(a1);
}

void sub_182AAF0F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AAF1BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182AAF2B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AAF394(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AAF934(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AAFA74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_182AAFAF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182AAFDE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_182AAFF7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_182AB0118(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AB0248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182AB03D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AB0484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

Class initFBSOpenApplicationOptions(void)
{
  if (!FrontBoardServicesLibrary(void)::frameworkLibrary) {
    FrontBoardServicesLibrary(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices", 2);
  }
  Class result = objc_getClass("FBSOpenApplicationOptions");
  classFBSOpenApplicationOptions = (uint64_t)result;
  getFBSOpenApplicationOptionsClass = (uint64_t (*)(void))FBSOpenApplicationOptionsFunction;
  return result;
}

id FBSOpenApplicationOptionsFunction(void)
{
  return (id)classFBSOpenApplicationOptions;
}

Class initFBSProcessHandle(void)
{
  if (!FrontBoardServicesLibrary(void)::frameworkLibrary) {
    FrontBoardServicesLibrary(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices", 2);
  }
  Class result = objc_getClass("FBSProcessHandle");
  classFBSProcessHandle = (uint64_t)result;
  getFBSProcessHandleClass = (uint64_t (*)(void))FBSProcessHandleFunction;
  return result;
}

id FBSProcessHandleFunction(void)
{
  return (id)classFBSProcessHandle;
}

void __serviceQueue_block_invoke()
{
  id v2 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v0 = dispatch_queue_create("LS installation serial queue", v2);
  id v1 = (void *)serviceQueue_queue;
  serviceQueue_queue = (uint64_t)v0;
}

void sub_182AB09BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AB0AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182AB0C0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AB0CCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AB11AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AB1358(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AB14B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AB16FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_182AB19AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_182AB223C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_182AB2524(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AB2600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182AB2A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void _LSStringLocalizerPrewarmAllLocalizations(_LSStringLocalizer *a1)
{
  id v1 = a1;
  uint64_t stringsContent = (uint64_t)v1->_stringsContent;
  p_isa = (void **)&v1->super.isa;
  id v3 = [(_LSStringLocalizer *)v1 bundleProvider];
  id v4 = (__CFBundle *)LSBundleProvider::bundleRef((LSBundleProvider *)[v3 provider], 1, 0);
  -[_LSStringsFileContent prewarmAllLocalizationsWithBundle:forLocalizations:](stringsContent, v4, p_isa[3]);
}

void sub_182AB2BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182AB2E10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AB3044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_182AB34E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_182AB37D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AB3A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_182AB3B98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AB3BEC()
{
}

void sub_182AB3D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_182AB3F04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AB3FBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AB4064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182AB4124(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AB41C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AB441C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AB4710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_182AB486C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AB4B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_182AB4DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_182AB4FCC(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

void sub_182AB5184(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AB5400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  int v32 = v30;

  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

void sub_182AB5640(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AB575C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AB5948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf)
{
  if (v14)
  {
    CFRelease(v14);
    if (!v13)
    {
LABEL_4:
      if (cf) {
        CFRelease(cf);
      }

      _Unwind_Resume(a1);
    }
  }
  else if (!v13)
  {
    goto LABEL_4;
  }
  CFRelease(v13);
  goto LABEL_4;
}

void sub_182AB5AD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL18_LSSetCrashMessageP8NSString_block_invoke_1(uint64_t a1)
{
  id v1 = *(id *)(a1 + 32);
  id v2 = v1;
  if (v1)
  {
    id v3 = strdup((const char *)[v1 UTF8String]);
    id v4 = _LSDefaultLog();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
      ___ZL18_LSSetCrashMessageP8NSString_block_invoke_cold_1((uint64_t)v3, v4);
    }
  }
  else
  {
    id v3 = 0;
  }
  uint64_t v5 = _LSSetCrashReporterMessage(NSString *)::messagePtr;
  uint64_t v6 = _LSSetCrashReporterMessage(NSString *)::messagePtr;
  atomic_compare_exchange_strong_explicit(&_LSSetCrashReporterMessage(NSString *)::messagePtr, (unint64_t *)&v6, (unint64_t)v3, memory_order_relaxed, memory_order_relaxed);
  if (v6 == v5) {
    id v7 = (void *)v5;
  }
  else {
    id v7 = v3;
  }
  free(v7);
  qword_1EB20D5F0 = _LSSetCrashReporterMessage(NSString *)::messagePtr;
}

void sub_182AB5C08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL15_LSLoggingQueuev_block_invoke_1()
{
  id v2 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v0 = dispatch_queue_create("com.apple.launchservices.logging", v2);
  id v1 = (void *)_LSLoggingQueue(void)::logQueue;
  _LSLoggingQueue(void)::logQueue = (uint64_t)v0;
}

void ___ZL20_LSClearCrashMessagev_block_invoke()
{
  uint64_t v0 = _LSSetCrashReporterMessage(NSString *)::messagePtr;
  uint64_t v1 = _LSSetCrashReporterMessage(NSString *)::messagePtr;
  atomic_compare_exchange_strong_explicit(&_LSSetCrashReporterMessage(NSString *)::messagePtr, (unint64_t *)&v1, 0, memory_order_relaxed, memory_order_relaxed);
  if (v1 == v0) {
    id v2 = (void *)v0;
  }
  else {
    id v2 = 0;
  }
  free(v2);
  qword_1EB20D5F0 = _LSSetCrashReporterMessage(NSString *)::messagePtr;
}

void LSBundleProvider::LSBundleProvider(LSBundleProvider *this, CFTypeRef cf)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (cf)
  {
    CFRetain(cf);
    *(void *)this = cf;
    *((void *)this + 1) = 0;
    *((_DWORD *)this + 5) = 0;
    *((unsigned char *)this + 16) = 1;
    uint64_t Unique = _CFBundleCreateUnique();
    uint64_t v5 = (const void *)*((void *)this + 1);
    uint64_t v6 = (const void *)Unique;
    if (v5 != (const void *)Unique)
    {
      *((void *)this + 1) = Unique;
      uint64_t v6 = v5;
    }
    if (v6)
    {
      CFRelease(v6);
      uint64_t Unique = *((void *)this + 1);
    }
    if (!Unique)
    {
      id v7 = _LSRegistrationLog();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        uint64_t v8 = *(void *)this;
        int v9 = 138477827;
        uint64_t v10 = v8;
        _os_log_impl(&dword_182959000, v7, OS_LOG_TYPE_ERROR, "Unable to create bundleRef for %{private}@", (uint8_t *)&v9, 0xCu);
      }
    }
  }
  else
  {
    *((_DWORD *)this + 5) = 0;
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    *((unsigned char *)this + 16) = 0;
  }
}

{
  LSBundleProvider::LSBundleProvider(this, cf);
}

void sub_182AB5DE4(_Unwind_Exception *exception_object)
{
}

void LSBundleProvider::LSBundleProvider(LSBundleProvider *this, void *cf)
{
  *((_DWORD *)this + 5) = 0;
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  if (cf)
  {
    CFRetain(cf);
    id v4 = (const void *)*((void *)this + 1);
    CFTypeRef v5 = cf;
    if (v4 == cf || (*((void *)this + 1) = cf, (CFTypeRef v5 = v4) != 0)) {
      CFRelease(v5);
    }
    CFURLRef v6 = CFBundleCopyBundleURL((CFBundleRef)cf);
    CFURLRef v7 = *(const __CFURL **)this;
    if (*(CFURLRef *)this != v6)
    {
      *(void *)this = v6;
      CFURLRef v6 = v7;
    }
    if (v6) {
      CFRelease(v6);
    }
  }
}

void sub_182AB5EA4(_Unwind_Exception *exception_object)
{
  id v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  *(void *)(v1 + 8) = 0;
  if (*(void *)v1) {
    CFRelease(*(CFTypeRef *)v1);
  }
  *(void *)uint64_t v1 = 0;
  _Unwind_Resume(exception_object);
}

void LSBundleProvider::~LSBundleProvider(LSBundleProvider *this)
{
  id v2 = (const void *)*((void *)this + 1);
  if (v2) {
    CFRelease(v2);
  }
  *((void *)this + 1) = 0;
  if (*(void *)this) {
    CFRelease(*(CFTypeRef *)this);
  }
  *(void *)this = 0;
}

uint64_t LSBundleProvider::bundleRef(LSBundleProvider *this, BOOL a2, const char *a3)
{
  return *((void *)this + 1);
}

__CFBundle *LSBundleProvider::bundleIdentifier(LSBundleProvider *this)
{
  CFStringRef Identifier = (__CFBundle *)*((void *)this + 1);
  if (Identifier) {
    CFStringRef Identifier = (__CFBundle *)CFBundleGetIdentifier(Identifier);
  }
  id v2 = Identifier;

  return v2;
}

__CFBundle *LSBundleProvider::infoDictionary(LSBundleProvider *this)
{
  CFDictionaryRef InfoDictionary = (__CFBundle *)*((void *)this + 1);
  if (InfoDictionary) {
    CFDictionaryRef InfoDictionary = CFBundleGetInfoDictionary(InfoDictionary);
  }
  id v2 = InfoDictionary;

  return v2;
}

__CFBundle *LSBundleProvider::CFBundleCopyExecutableURL(LSBundleProvider *this)
{
  Class result = (__CFBundle *)*((void *)this + 1);
  if (result) {
    return CFBundleCopyExecutableURL(result);
  }
  return result;
}

__CFBundle *LSBundleProvider::CFBundleCopyResourceURL(LSBundleProvider *this, const __CFString *a2, const __CFString *a3, const __CFString *a4)
{
  Class result = (__CFBundle *)*((void *)this + 1);
  if (result) {
    return CFBundleCopyResourceURL(result, a2, a3, a4);
  }
  return result;
}

CFStringRef LSBundleProvider::CFBundleCopyDevelopmentRegion(LSBundleProvider *this)
{
  uint64_t v1 = (__CFBundle *)*((void *)this + 1);
  if (!v1) {
    return 0;
  }
  DevelopmentRegioCFIndex n = CFBundleGetDevelopmentRegion(v1);
  CFStringRef v3 = DevelopmentRegion;
  if (DevelopmentRegion) {
    CFRetain(DevelopmentRegion);
  }
  return v3;
}

__CFBundle *LSBundleProvider::CFBundleCopyBundleLocalizations(LSBundleProvider *this)
{
  Class result = (__CFBundle *)*((void *)this + 1);
  if (result) {
    return CFBundleCopyBundleLocalizations(result);
  }
  return result;
}

__CFBundle *LSBundleProvider::copyIconResourceURL(LSBundleProvider *this, const __CFString *a2, const __CFString *a3)
{
  Class result = (__CFBundle *)*((void *)this + 1);
  if (result)
  {
    Class result = CFBundleCopyResourceURLForLocalization(result, a2, a3, 0, 0);
    if (!((unint64_t)a3 | (unint64_t)result))
    {
      CFURLRef v7 = (__CFBundle *)*((void *)this + 1);
      return CFBundleCopyResourceURLForLocalization(v7, a2, @"icns", 0, 0);
    }
  }
  return result;
}

__CFBundle *LSBundleProvider::intentURLPaths(LSBundleProvider *this)
{
  uint64_t v1 = (__CFBundle *)*((void *)this + 1);
  if (v1)
  {
    if (softLinkINSchemaURLsForIntentNamesWithBundle)
    {
      softLinkINSchemaURLsForIntentNamesWithBundle(v1);
      uint64_t v1 = (__CFBundle *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      uint64_t v1 = 0;
    }
  }

  return v1;
}

__CFBundle *LSBundleProvider::XCFBundleCopyFolderURL(LSBundleProvider *this, const __CFString *a2)
{
  Class result = (__CFBundle *)*((void *)this + 1);
  if (result) {
    return XCFBundleCopyFolderURL(result, a2);
  }
  return result;
}

void sub_182AB623C(_Unwind_Exception *a1)
{
  MEMORY[0x18530EAF0](v2, 0x1060C40D21511CDLL);

  _Unwind_Resume(a1);
}

void sub_182AB6308(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  MEMORY[0x18530EAF0](v4, 0x1060C40D21511CDLL);

  _Unwind_Resume(a1);
}

void sub_182AB63A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AB6564(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AB66F8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_182AB6944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  os_unfair_lock_unlock(v18);
  _Unwind_Resume(a1);
}

uint64_t std::optional<NSError * {__strong}>::operator=[abi:nn180100]<NSError * {__strong}&,void>(uint64_t a1, id *a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 8);
  id v4 = *a2;
  if (v3)
  {
    CFTypeRef v5 = *(void **)a1;
    *(void *)a1 = v4;
  }
  else
  {
    *(void *)a1 = v4;
    *(unsigned char *)(a1 + 8) = 1;
  }
  return a1;
}

void sub_182AB6B38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AB6D8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AB7280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,void *a24,uint64_t a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31)
{
  _Unwind_Resume(a1);
}

void sub_182AB7A08(_Unwind_Exception *a1)
{
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)(v6 - 160));
  _Unwind_Resume(a1);
}

void sub_182AB7CA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id registrationCleanupQueue(void)
{
  if (registrationCleanupQueue(void)::onceToken != -1) {
    dispatch_once(&registrationCleanupQueue(void)::onceToken, &__block_literal_global_76);
  }
  uint64_t v0 = (void *)registrationCleanupQueue(void)::queue;

  return v0;
}

void sub_182AB7F04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AB8188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,id a34)
{
  _Block_object_dispose(&a23, 8);

  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v36 - 128), 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__135(uint64_t a1, uint64_t a2)
{
  uint64_t result = MEMORY[0x18530F950](*(void *)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__136(uint64_t a1)
{
}

void sub_182AB8534(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AB86EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AB887C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AB896C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_182AB89F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182AB8A6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AB8AD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AB8BDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AB8C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_182AB8D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182AB8DD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AB8E70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AB8F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_182AB9140(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AB9320(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AB94AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AB95DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZL24registrationCleanupQueuev_block_invoke()
{
  uint64_t v2 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v0 = dispatch_queue_create("com.apple.lsd.registration.postprocessing", v2);
  uint64_t v1 = (void *)registrationCleanupQueue(void)::queue;
  registrationCleanupQueue(void)::queue = (uint64_t)v0;
}

BOOL _LSIsSWCAvailable()
{
  dispatch_queue_t v0 = (void *)SharedWebCredentialsLibrary(void)::frameworkLibrary;
  if (!SharedWebCredentialsLibrary(void)::frameworkLibrary)
  {
    dispatch_queue_t v0 = dlopen("/System/Library/PrivateFrameworks/SharedWebCredentials.framework/SharedWebCredentials", 2);
    SharedWebCredentialsLibrary(void)::frameworkLibrary = (uint64_t)v0;
  }
  return v0 != 0;
}

uint64_t _LSSWCServiceTypeActivityContinuation()
{
  return get_SWCServiceTypeActivityContinuation();
}

uint64_t _LSSWCServiceTypeAppLinks()
{
  return get_SWCServiceTypeAppLinks();
}

uint64_t _LSSWCErrorDomain()
{
  return get_SWCErrorDomain();
}

uint64_t _LSSWCServiceDetailsClass()
{
  return get_SWCServiceDetailsClass();
}

uint64_t _LSSWCServiceSettingsClass()
{
  return get_SWCServiceSettingsClass();
}

uint64_t _LSSWCServiceSpecifierClass()
{
  return get_SWCServiceSpecifierClass();
}

uint64_t init_SWCServiceTypeActivityContinuation(void)
{
  dispatch_queue_t v0 = (void *)SharedWebCredentialsLibrary(void)::frameworkLibrary;
  if (!SharedWebCredentialsLibrary(void)::frameworkLibrary)
  {
    dispatch_queue_t v0 = dlopen("/System/Library/PrivateFrameworks/SharedWebCredentials.framework/SharedWebCredentials", 2);
    SharedWebCredentialsLibrary(void)::frameworkLibrary = (uint64_t)v0;
  }
  uint64_t result = *(void *)dlsym(v0, "_SWCServiceTypeActivityContinuation");
  constant_SWCServiceTypeActivityContinuatioCFIndex n = result;
  get_SWCServiceTypeActivityContinuatioCFIndex n = _SWCServiceTypeActivityContinuationFunction;
  return result;
}

uint64_t _SWCServiceTypeActivityContinuationFunction(void)
{
  return constant_SWCServiceTypeActivityContinuation;
}

uint64_t init_SWCServiceTypeAppLinks(void)
{
  dispatch_queue_t v0 = (void *)SharedWebCredentialsLibrary(void)::frameworkLibrary;
  if (!SharedWebCredentialsLibrary(void)::frameworkLibrary)
  {
    dispatch_queue_t v0 = dlopen("/System/Library/PrivateFrameworks/SharedWebCredentials.framework/SharedWebCredentials", 2);
    SharedWebCredentialsLibrary(void)::frameworkLibrary = (uint64_t)v0;
  }
  uint64_t result = *(void *)dlsym(v0, "_SWCServiceTypeAppLinks");
  constant_SWCServiceTypeAppLinks = result;
  get_SWCServiceTypeAppLinks = _SWCServiceTypeAppLinksFunction;
  return result;
}

uint64_t _SWCServiceTypeAppLinksFunction(void)
{
  return constant_SWCServiceTypeAppLinks;
}

uint64_t init_SWCErrorDomain(void)
{
  dispatch_queue_t v0 = (void *)SharedWebCredentialsLibrary(void)::frameworkLibrary;
  if (!SharedWebCredentialsLibrary(void)::frameworkLibrary)
  {
    dispatch_queue_t v0 = dlopen("/System/Library/PrivateFrameworks/SharedWebCredentials.framework/SharedWebCredentials", 2);
    SharedWebCredentialsLibrary(void)::frameworkLibrary = (uint64_t)v0;
  }
  uint64_t result = *(void *)dlsym(v0, "_SWCErrorDomain");
  constant_SWCErrorDomaiCFIndex n = result;
  get_SWCErrorDomaiCFIndex n = _SWCErrorDomainFunction;
  return result;
}

uint64_t _SWCErrorDomainFunction(void)
{
  return constant_SWCErrorDomain;
}

Class init_SWCServiceDetails(void)
{
  if (!SharedWebCredentialsLibrary(void)::frameworkLibrary) {
    SharedWebCredentialsLibrary(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/SharedWebCredentials.framework/SharedWebCredentials", 2);
  }
  Class result = objc_getClass("_SWCServiceDetails");
  class_SWCServiceDetails = (uint64_t)result;
  get_SWCServiceDetailsClass = (uint64_t (*)(void))_SWCServiceDetailsFunction;
  return result;
}

id _SWCServiceDetailsFunction(void)
{
  return (id)class_SWCServiceDetails;
}

Class init_SWCServiceSettings(void)
{
  if (!SharedWebCredentialsLibrary(void)::frameworkLibrary) {
    SharedWebCredentialsLibrary(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/SharedWebCredentials.framework/SharedWebCredentials", 2);
  }
  Class result = objc_getClass("_SWCServiceSettings");
  class_SWCServiceSettings = (uint64_t)result;
  get_SWCServiceSettingsClass = (uint64_t (*)(void))_SWCServiceSettingsFunction;
  return result;
}

id _SWCServiceSettingsFunction(void)
{
  return (id)class_SWCServiceSettings;
}

Class init_SWCServiceSpecifier(void)
{
  if (!SharedWebCredentialsLibrary(void)::frameworkLibrary) {
    SharedWebCredentialsLibrary(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/SharedWebCredentials.framework/SharedWebCredentials", 2);
  }
  Class result = objc_getClass("_SWCServiceSpecifier");
  class_SWCServiceSpecifier = (uint64_t)result;
  get_SWCServiceSpecifierClass = (uint64_t (*)(void))_SWCServiceSpecifierFunction;
  return result;
}

id _SWCServiceSpecifierFunction(void)
{
  return (id)class_SWCServiceSpecifier;
}

void sub_182AB9CB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AB9D18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AB9E90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  __int16 v12 = v11;

  _Unwind_Resume(a1);
}

id _LSServer_GetiCloudHostNames()
{
  dispatch_queue_t v0 = (LaunchServices::URLOverrides *)[objc_alloc(MEMORY[0x1E4F1CB10]) initFileURLWithPath:@"/var/mobile/Library/Caches/CloudKit/com.apple.cloudkit.launchservices.hostnames.plist" isDirectory:0];
  uint64_t v1 = LaunchServices::URLOverrides::getLog(v0);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG)) {
    _LSServer_GetiCloudHostNames_cold_2();
  }

  int v3 = LaunchServices::URLOverrides::getiCloudHostNamesFromPlistAtURL(v0, v2);
  if (!v3)
  {
    id v4 = (LaunchServices::URLOverrides *)[objc_alloc(MEMORY[0x1E4F1CB10]) initFileURLWithPath:@"/System/Library/CoreServices/com.apple.cloudkit.launchservices.hostnames.plist" isDirectory:0];
    CFTypeRef v5 = LaunchServices::URLOverrides::getLog(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
      _LSServer_GetiCloudHostNames_cold_2();
    }

    int v3 = LaunchServices::URLOverrides::getiCloudHostNamesFromPlistAtURL(v4, v6);

    if (!v3)
    {
      uint64_t v8 = LaunchServices::URLOverrides::getLog(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
        _LSServer_GetiCloudHostNames_cold_1();
      }

      int v3 = [MEMORY[0x1E4F1CAD0] setWithArray:&unk_1ECB43BB8];
    }
  }

  return v3;
}

void sub_182ABA0FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id LaunchServices::URLOverrides::getiCloudHostNamesFromPlistAtURL(LaunchServices::URLOverrides *this, NSURL *a2)
{
  uint64_t v2 = this;
  id v12 = 0;
  int v3 = [MEMORY[0x1E4F1C9E8] dictionaryWithContentsOfURL:v2 error:&v12];
  id v4 = (LaunchServices::URLOverrides *)v12;
  CFTypeRef v5 = v4;
  if (!v3)
  {
    int v9 = LaunchServices::URLOverrides::getLog(v4);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      LaunchServices::URLOverrides::getiCloudHostNamesFromPlistAtURL((uint64_t)v2);
    }
    goto LABEL_12;
  }
  uint64_t v6 = objc_opt_class();
  CFURLRef v7 = [v3 objectForKey:@"host-names"];
  uint64_t v8 = v7;
  if (v6 && v7)
  {
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {

      goto LABEL_10;
    }
LABEL_9:
    int v9 = [(LaunchServices::URLOverrides *)v8 valueForKey:@"lowercaseString"];

    uint64_t v10 = [MEMORY[0x1E4F1CAD0] setWithArray:v9];
    goto LABEL_13;
  }
  if (v7) {
    goto LABEL_9;
  }
LABEL_10:
  int v9 = LaunchServices::URLOverrides::getLog(v7);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
    LaunchServices::URLOverrides::getiCloudHostNamesFromPlistAtURL();
  }
LABEL_12:
  uint64_t v10 = 0;
LABEL_13:

  return v10;
}

void sub_182ABA28C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id LaunchServices::URLOverrides::getURLOverrideCommon(LaunchServices::URLOverrides *this, NSURL *a2)
{
  int v3 = this;
  uint64_t v19 = 0;
  int v20 = (id *)&v19;
  uint64_t v21 = 0x3032000000;
  id v22 = __Block_byref_object_copy__50;
  id v23 = __Block_byref_object_dispose__50;
  id v24 = 0;
  id v4 = (LaunchServices::URLOverrides *)_os_feature_enabled_impl();
  if (v4)
  {
    p_super = LaunchServices::URLOverrides::getLog(v4);
    if (os_log_type_enabled(p_super, OS_LOG_TYPE_DEBUG)) {
      -[_LSURLOverride initWithOriginalURL:checkingForAvailableApplications:]();
    }
  }
  else if (_LSCurrentProcessMayMapDatabase() {
         && ([(id)__LSDefaultsGetSharedInstance() isServer] & 1) == 0)
  }
  {
    uint64_t v8 = [[_LSURLOverride alloc] initWithOriginalURL:v3];
    p_super = &v8->super;
    if (v8)
    {
      uint64_t v9 = [(_LSURLOverride *)v8 overrideURL];
      id v10 = v20[5];
      v20[5] = (id)v9;
    }
  }
  else
  {
    v17[0] = (void (*)(void, void))MEMORY[0x1E4F143A8];
    v17[1] = (void (*)(void, void))3221225472;
    v17[2] = (void (*)(void, void))___ZN14LaunchServices12URLOverridesL20getURLOverrideCommonEP5NSURL_block_invoke;
    void v17[3] = (void (*)(void, void))&unk_1E522BF50;
    uint64_t v6 = v3;
    id v18 = v6;
    CFURLRef v7 = +[_LSDService synchronousXPCProxyWithErrorHandler:]((uint64_t)_LSDOpenService, v17);
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    void v14[2] = ___ZN14LaunchServices12URLOverridesL20getURLOverrideCommonEP5NSURL_block_invoke_233;
    void v14[3] = &unk_1E5230DA8;
    uint64_t v16 = &v19;
    uint64_t v15 = v6;
    [v7 getURLOverrideForURL:v15 completionHandler:v14];

    p_super = v18;
  }

  id v11 = v20[5];
  if (!v11)
  {
    objc_storeStrong(v20 + 5, this);
    id v11 = v20[5];
  }
  id v12 = v11;
  _Block_object_dispose(&v19, 8);

  return v12;
}

void sub_182ABA520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

void sub_182ABA774(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182ABA860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

BOOL LaunchServices::URLOverrides::State::pathHasCaseInsensitivePrefix(id *this, NSString *a2)
{
  int v3 = a2;
  id v4 = [*this path];
  CFTypeRef v5 = v4;
  if (v4) {
    BOOL v6 = [v4 rangeOfString:v3 options:9] != 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    BOOL v6 = 0;
  }

  return v6;
}

void sub_182ABA8E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182ABAA78(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

void sub_182ABAB88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182ABAC44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_182ABACF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_182ABAD9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_182ABAE38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_182ABAEDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_182ABAF78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

LaunchServices::URLOverrides::State *LaunchServices::URLOverrides::State::State(LaunchServices::URLOverrides::State *this, NSURLComponents *a2, char a3)
{
  CFTypeRef v5 = a2;
  *(void *)this = v5;
  *((unsigned char *)this + 8) = a3;
  *(_DWORD *)((char *)this + 9) = 0;
  BOOL v6 = (BOOL *)this + 9;
  *((unsigned char *)this + 13) = 0;
  CFURLRef v7 = [(NSURLComponents *)v5 scheme];
  uint64_t v8 = v7;
  if (v7)
  {
    uint64_t v9 = [v7 caseInsensitiveCompare:@"http"];
    *BOOL v6 = v9 == 0;
    if (v9)
    {
      BOOL v10 = [v8 caseInsensitiveCompare:@"https"] == 0;
      int v11 = *v6;
    }
    else
    {
      BOOL v10 = 0;
      int v11 = 1;
    }
    BOOL v12 = 0;
    *((unsigned char *)this + 10) = v10;
    if (!v11 && !v10) {
      BOOL v12 = [v8 caseInsensitiveCompare:@"itms"] == 0;
    }
    *((unsigned char *)this + 11) = v12;
  }

  if (*v6 || *((unsigned char *)this + 10))
  {
    int v13 = v5;
    pthread_mutex_lock(&LaunchServices::URLOverrides::checkForiCloudHost(NSURLComponents *)::lock);
    if (!LaunchServices::URLOverrides::checkForiCloudHost(NSURLComponents *)::cachedICloudHosts
      || (double v14 = *(double *)&LaunchServices::URLOverrides::checkForiCloudHost(NSURLComponents *)::nextFetchTime,
          [MEMORY[0x1E4F1C9C8] timeIntervalSinceReferenceDate],
          v14 < v15))
    {
      uint64_t v16 = [(id)__LSDefaultsGetSharedInstance() isServer];
      if ((v16 & 1) != 0 || (uint64_t v16 = [(id)__LSDefaultsGetSharedInstance() hasServer], (v16 & 1) == 0))
      {
        uint64_t v19 = LaunchServices::URLOverrides::getLog((LaunchServices::URLOverrides *)v16);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG)) {
          LaunchServices::URLOverrides::State::State();
        }

        id v18 = _LSServer_GetiCloudHostNames();
        uint64_t v20 = [v18 copy];
        uint64_t v21 = (void *)LaunchServices::URLOverrides::checkForiCloudHost(NSURLComponents *)::cachedICloudHosts;
        LaunchServices::URLOverrides::checkForiCloudHost(NSURLComponents *)::cachedICloudHosts = v20;
      }
      else
      {
        uint32_t v17 = LaunchServices::URLOverrides::getLog((LaunchServices::URLOverrides *)v16);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG)) {
          LaunchServices::URLOverrides::State::State();
        }

        id v18 = +[_LSDService synchronousXPCProxyWithErrorHandler:]((uint64_t)_LSDOpenService, 0);
        [v18 getiCloudHostNamesWithCompletionHandler:&__block_literal_global_246_0];
      }

      [MEMORY[0x1E4F1C9C8] timeIntervalSinceReferenceDate];
      *(double *)&LaunchServices::URLOverrides::checkForiCloudHost(NSURLComponents *)::nextFetchTime = v22 + 86400.0;
    }
    id v23 = (void *)[(id)LaunchServices::URLOverrides::checkForiCloudHost(NSURLComponents *)::cachedICloudHosts copy];
    pthread_mutex_unlock(&LaunchServices::URLOverrides::checkForiCloudHost(NSURLComponents *)::lock);
    id v24 = [(NSURLComponents *)v13 host];
    id v25 = [v24 lowercaseString];

    if (v25) {
      char v26 = [v23 containsObject:v25];
    }
    else {
      char v26 = 0;
    }

    *((unsigned char *)this + 12) = v26;
  }
  int v27 = [(id)__LSDefaultsGetSharedInstance() isInXCTestRigInsecure];
  if (!LaunchServices::URLOverrides::gUseMacOverrides) {
    int v27 = 0;
  }
  if (v27 == 1) {
    *((unsigned char *)this + 13) = [(id)LaunchServices::URLOverrides::gUseMacOverrides BOOLValue];
  }

  return this;
}

void sub_182ABB264(_Unwind_Exception *a1)
{
  CFTypeRef v5 = v4;

  _Unwind_Resume(a1);
}

LaunchServices::URLOverrides::State *LaunchServices::URLOverrides::State::State(LaunchServices::URLOverrides::State *this, NSURL *a2, char a3)
{
  CFTypeRef v5 = a2;
  *(void *)this = 0;
  *(void *)((char *)this + 6) = 0;
  BOOL v6 = (NSURLComponents *)[objc_alloc(MEMORY[0x1E4F29088]) initWithURL:v5 resolvingAgainstBaseURL:1];
  if (!v6) {
    BOOL v6 = (NSURLComponents *)objc_alloc_init(MEMORY[0x1E4F29088]);
  }
  LaunchServices::URLOverrides::State::State((LaunchServices::URLOverrides::State *)&obj, v6, a3);
  objc_storeStrong((id *)this, obj);
  *((_DWORD *)this + 2) = v9;
  *((_WORD *)this + 6) = v10;

  return this;
}

void sub_182ABB394(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::URLOverrides::State::isNooverride(id *this)
{
  uint64_t v1 = [*this fragment];
  uint64_t v2 = v1;
  if (v1) {
    uint64_t v3 = [v1 hasSuffix:@":nooverride"];
  }
  else {
    uint64_t v3 = 0;
  }

  return v3;
}

void sub_182ABB410(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182ABB558(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182ABB650(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182ABBCC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,void *a25,void *a26)
{
  _Unwind_Resume(a1);
}

void sub_182ABC2D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_182ABC5B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182ABC730(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182ABC948(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182ABCA6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN14LaunchServices12URLOverridesL6getLogEv_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.launchservices", "urloverrides");
  uint64_t v1 = (void *)LaunchServices::URLOverrides::getLog(void)::result;
  LaunchServices::URLOverrides::getLog(void)::Class result = (uint64_t)v0;
}

void ___ZN14LaunchServices12URLOverridesL20getURLOverrideCommonEP5NSURL_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  id v4 = LaunchServices::URLOverrides::getLog(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    ___ZN14LaunchServices12URLOverridesL20getURLOverrideCommonEP5NSURL_block_invoke_cold_1(a1);
  }
}

void ___ZN14LaunchServices12URLOverridesL20getURLOverrideCommonEP5NSURL_block_invoke_233(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  CFURLRef v7 = a3;
  uint64_t v8 = v7;
  if (v6)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  }
  else
  {
    int v9 = LaunchServices::URLOverrides::getLog(v7);
    __int16 v10 = v9;
    if (v8)
    {
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        ___ZN14LaunchServices12URLOverridesL20getURLOverrideCommonEP5NSURL_block_invoke_233_cold_2(a1);
      }
    }
    else if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      ___ZN14LaunchServices12URLOverridesL20getURLOverrideCommonEP5NSURL_block_invoke_233_cold_1(a1, v10, v11, v12, v13, v14, v15, v16);
    }
  }
}

void ___ZN14LaunchServices12URLOverridesL18checkForiCloudHostEP15NSURLComponents_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = _LSDefaultLog();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
    ___ZN14LaunchServices12URLOverridesL18checkForiCloudHostEP15NSURLComponents_block_invoke_cold_1();
  }

  uint64_t v4 = [v2 copy];
  CFTypeRef v5 = (void *)LaunchServices::URLOverrides::checkForiCloudHost(NSURLComponents *)::cachedICloudHosts;
  LaunchServices::URLOverrides::checkForiCloudHost(NSURLComponents *)::cachedICloudHosts = v4;
}

void sub_182ABCC48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSReplaceURLPropertyValueForEncoding(void *a1)
{
  id v1 = a1;
  if (LaunchServices::URLPropertyProvider::getUTTypeClass((LaunchServices::URLPropertyProvider *)v1)
    && (objc_opt_isKindOfClass() & 1) != 0
    && [v1 _shouldURLPropertyProviderEncodeTypeRecord])
  {
    uint64_t v2 = [v1 _typeRecord];

    id v1 = (id)v2;
  }

  return v1;
}

void sub_182ABCCE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LaunchServices::URLPropertyProvider *_LSReplaceURLPropertyValueForDecoding(void *a1)
{
  id v1 = a1;
  id UTTypeClass = LaunchServices::URLPropertyProvider::getUTTypeClass(v1);
  if (UTTypeClass)
  {
    uint64_t v3 = UTTypeClass;
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      uint64_t v4 = [v3 _typeForURLPropertyProviderWithTypeRecord:v1];

      id v1 = (LaunchServices::URLPropertyProvider *)v4;
    }
  }

  return v1;
}

void sub_182ABCD70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182ABCE00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182ABCE98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182ABCF84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::URLPropertyProvider::prepareIsPackageMimic(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return _LSPrepareMimicForIsPackage(a1, a5);
}

uint64_t LaunchServices::URLPropertyProvider::setIsPackageValue(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, const __CFString *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (!a5 || ![a2 isDirectory]) {
    return 1;
  }
  uint64_t result = [a2 getFinderInfo:v12 error:a7];
  if (result)
  {
    __int16 v11 = _LSGetBooleanFromCFType(a5) != 0;
    __int16 v13 = v13 & 0xDFFF | (v11 << 13);
    return [a2 setFinderInfo:v12 error:a7];
  }
  return result;
}

uint64_t LaunchServices::URLPropertyProvider::prepareIsApplicationMimic(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return _LSPrepareMimicForBundleClass(a1, a5);
}

uint64_t LaunchServices::URLPropertyProvider::prepareAppFlagsMimic(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return _LSPrepareMimicForBundleLookup(a1, a5);
}

uint64_t LaunchServices::URLPropertyProvider::prepareDNCMimic(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return +[_LSDisplayNameConstructor prepareMimicWithPopulator:a1 error:a5];
}

uint64_t LaunchServices::URLPropertyProvider::prepareDistinctLocalizedNameValue(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v23[1] = *MEMORY[0x1E4F143B8];
  if ([a2 canIssueIO])
  {
    id v20 = 0;
    id v21 = 0;
    if ([a2 getResourceValue:&v21 forKey:*MEMORY[0x1E4F1C6E8] options:1 error:a6]
      && [a2 getResourceValue:&v20 forKey:*MEMORY[0x1E4F1C6C8] options:1 error:a6])
    {
      if ([v21 isEqual:v20]) {
        id v9 = 0;
      }
      else {
        id v9 = v20;
      }
      MEMORY[0x18530E330](a3, *MEMORY[0x1E4F1CDA0], v9);
      a6 = 1;
    }
    else
    {
      a6 = 0;
    }
  }
  else
  {
    __int16 v10 = _LSDefaultLog();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      LaunchServices::URLPropertyProvider::prepareDistinctLocalizedNameValue(v10, v11, v12, v13, v14, v15, v16, v17);
    }

    if (a6)
    {
      uint64_t v22 = *MEMORY[0x1E4F28228];
      v23[0] = @"can't provide with mimic";
      id v18 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v23 forKeys:&v22 count:1];
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -50, (uint64_t)"prepareDistinctLocalizedNameValue", 788, v18);
      *(void *)a6 = (id)objc_claimAutoreleasedReturnValue();

      return 0;
    }
  }
  return a6;
}

void sub_182ABD228(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::URLPropertyProvider::prepareLocalizedNameComponentsValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v8 = LaunchServices::URLPropertyProvider::getDisplayNameConstructor(a1, a2, a5, (uint64_t)a6);
  if (v8)
  {
    id v9 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:2];
    if (v9)
    {
      char v17 = 0;
      id v15 = 0;
      id v16 = 0;
      [v8 getUnlocalizedBaseName:&v16 extension:&v15 requiresAdditionalBiDiControlCharacters:&v17];
      id v10 = v16;
      id v11 = v15;
      if (v10) {
        [v9 addObject:v10];
      }
      if (v11) {
        [v9 addObject:v11];
      }

      uint64_t v12 = (void *)[v9 copy];
      MEMORY[0x18530E330](a3, *MEMORY[0x1E4F1CE80], v12);

      uint64_t v13 = 1;
    }
    else if (a6)
    {
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -41, (uint64_t)"prepareLocalizedNameComponentsValue", 907, 0);
      uint64_t v13 = 0;
      *a6 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      uint64_t v13 = 0;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }

  return v13;
}

void sub_182ABD3B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::URLPropertyProvider::prepareLocalizedTypeDescriptionValue(id *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  v18[21] = *MEMORY[0x1E4F143B8];
  +[_LSDServiceDomain defaultServiceDomain]();
  id v10 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  id v11 = (void **)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)a1, v10, 0);

  if (v11)
  {
    LaunchServices::BindingEvaluator::CreateWithNode(a2, (LaunchServices::BindingEvaluator *)v18);
    uint64_t v12 = LaunchServices::BindingEvaluator::getLocalizedKindString((const LaunchServices::BindingEvaluator *)v18, v11, 0, a6);
    if (v12)
    {
      MEMORY[0x18530E330](a3, *MEMORY[0x1E4F1D720], v12);
      uint64_t v13 = 1;
    }
    else
    {
      uint64_t v13 = 0;
    }

    LaunchServices::BindingEvaluator::~BindingEvaluator((LaunchServices::BindingEvaluator *)v18);
  }
  else if (a6)
  {
    +[_LSDServiceDomain defaultServiceDomain]();
    uint64_t v14 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
    uint64_t v15 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)a1, v14, 0);

    if (v15) {
      id v16 = 0;
    }
    else {
      id v16 = a1[3];
    }
    uint64_t v13 = 0;
    *a6 = v16;
  }
  else
  {
    return 0;
  }
  return v13;
}

void sub_182ABD540(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::URLPropertyProvider::prepareBindingMimic(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return LaunchServices::BindingEvaluator::PrepareMimicForBinding(a1, a5);
}

uint64_t LaunchServices::URLPropertyProvider::prepareLocalizedTypeDescriptionDictionaryValue(id *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  v29[1] = *MEMORY[0x1E4F143B8];
  if (([a2 canIssueIO] & 1) == 0)
  {
    uint64_t v14 = _LSDefaultLog();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      LaunchServices::URLPropertyProvider::prepareLocalizedTypeDescriptionDictionaryValue(v14, v15, v16, v17, v18, v19, v20, v21);
    }

    if (a6)
    {
      uint64_t v28 = *MEMORY[0x1E4F28228];
      v29[0] = @"can't provide with mimic";
      uint64_t v22 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v29 forKeys:&v28 count:1];
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -50, (uint64_t)"prepareLocalizedTypeDescriptionDictionaryValue", 1239, v22);
      *a6 = (id)objc_claimAutoreleasedReturnValue();
    }
    return 0;
  }
  +[_LSDServiceDomain defaultServiceDomain]();
  id v10 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  id v11 = (void **)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)a1, v10, 0);

  if (v11)
  {
    LaunchServices::BindingEvaluator::CreateWithNode(a2, (LaunchServices::BindingEvaluator *)v27);
    uint64_t v12 = LaunchServices::BindingEvaluator::getLocalizedKindStringDictionary((const LaunchServices::BindingEvaluator *)v27, v11, a6);
    if (v12)
    {
      MEMORY[0x18530E330](a3, *MEMORY[0x1E4F1CE98], v12);
      uint64_t v13 = 1;
    }
    else
    {
      uint64_t v13 = 0;
    }

    LaunchServices::BindingEvaluator::~BindingEvaluator((LaunchServices::BindingEvaluator *)v27);
    return v13;
  }
  if (!a6) {
    return 0;
  }
  +[_LSDServiceDomain defaultServiceDomain]();
  id v23 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  uint64_t v24 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)a1, v23, 0);

  if (v24) {
    id v25 = 0;
  }
  else {
    id v25 = a1[3];
  }
  uint64_t v13 = 0;
  *a6 = v25;
  return v13;
}

void sub_182ABD780(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::URLPropertyProvider::prepareBundleIdentifierValue(id *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  +[_LSDServiceDomain defaultServiceDomain]();
  id v10 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  id v11 = (LSContext *)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)a1, v10, 0);

  if (v11)
  {
    unsigned int v20 = 0;
    uint64_t v19 = 0;
    int v12 = _LSFindOrFindOrRegisterBundleNode(v11, a2, 0, 0x2000000u, 0, &v20, &v19);
    if (v12 == -10811)
    {
      MEMORY[0x18530E330](a3, *MEMORY[0x1E4F1CD70], 0);
      return 1;
    }
    if (!v12)
    {
      uint64_t v13 = (void *)_CSStringCopyCFString();
      MEMORY[0x18530E330](a3, *MEMORY[0x1E4F1CD70], v13);

      return 1;
    }
    if (a6)
    {
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], v12, (uint64_t)"prepareBundleIdentifierValue", 1558, 0);
      id v18 = (id)objc_claimAutoreleasedReturnValue();
LABEL_14:
      id v16 = v18;
      goto LABEL_15;
    }
    return 0;
  }
  if (!a6) {
    return 0;
  }
  +[_LSDServiceDomain defaultServiceDomain]();
  uint64_t v14 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  uint64_t v15 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)a1, v14, 0);

  if (!v15)
  {
    id v18 = a1[3];
    goto LABEL_14;
  }
  id v16 = 0;
LABEL_15:
  uint64_t result = 0;
  *a6 = v16;
  return result;
}

void sub_182ABD970(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::URLPropertyProvider::prepareMimicForBundleLookup(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return _LSPrepareMimicForBundleLookup(a1, a5);
}

uint64_t LaunchServices::URLPropertyProvider::prepareHFSTypeCodeValue(LaunchServices::Database::Context *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t valuePtr = 0;
  +[_LSDServiceDomain defaultServiceDomain]();
  id v10 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  uint64_t v11 = LaunchServices::Database::Context::_get(a1, v10, 0);

  if (v11
    && (_LSGetNodeTypeCreatorInfo(v11, a2, 0, (_DWORD *)&valuePtr + 1, &valuePtr),
        (CFNumberRef v12 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, (char *)&valuePtr + 4)) != 0))
  {
    CFNumberRef v13 = v12;
    MEMORY[0x18530E330](a3, *MEMORY[0x1E4F1CDF8], v12);
    CFRelease(v13);
    return 1;
  }
  else
  {
    MEMORY[0x18530E330](a3, *MEMORY[0x1E4F1CDF8], 0);
    if (a6)
    {
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -41, (uint64_t)"prepareHFSTypeCodeValue", 1586, 0);
      id v15 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t result = 0;
      *a6 = v15;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_182ABDAD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::URLPropertyProvider::prepareArchitecturesValue(id *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  v36[1] = *MEMORY[0x1E4F143B8];
  if ([a2 canIssueIO])
  {
    id v34 = 0;
    int v10 = [a2 getResourceValue:&v34 forKey:*MEMORY[0x1E4F1C618] options:3 error:0];
    if (!v34) {
      int v10 = 0;
    }
    if (v10 == 1 && [v34 BOOLValue])
    {
      +[_LSDServiceDomain defaultServiceDomain]();
      uint64_t v11 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
      CFNumberRef v12 = (LSContext *)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)a1, v11, 0);

      if (!v12)
      {
        if (a6)
        {
          +[_LSDServiceDomain defaultServiceDomain]();
          char v30 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
          uint64_t v31 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)a1, v30, 0);

          if (v31) {
            id v32 = 0;
          }
          else {
            id v32 = a1[3];
          }
          goto LABEL_31;
        }
LABEL_27:
        uint64_t v28 = 0;
        goto LABEL_19;
      }
      int v33 = 0;
      int v13 = _LSFindOrRegisterBundleNode(v12, a2, 0, 0x2000000u, 0, (unsigned int *)&v33, 0);
      if (v13 != -10811)
      {
        if (!v13)
        {
          uint64_t v14 = (void *)_LSBundleCopyArchitecturesAvailable(v12->db, v33);
          CFArrayRef v15 = _LSBundleCopyArchitecturesValidOnCurrentSystem(v12->db, v33);
          CFArrayRef v16 = v15;
          uint64_t v17 = *MEMORY[0x1E4F1CD38];
          if (v14 && v15)
          {
            MEMORY[0x18530E330](a3, v17, v14);
            CFArrayRef v18 = v16;
          }
          else
          {
            CFArrayRef v18 = (const __CFArray *)MEMORY[0x1E4F1CBF0];
            MEMORY[0x18530E330](a3, v17, MEMORY[0x1E4F1CBF0]);
          }
          MEMORY[0x18530E330](a3, *MEMORY[0x1E4F1CD60], v18);

          goto LABEL_18;
        }
        if (a6)
        {
          _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], v13, (uint64_t)"prepareArchitecturesValue", 2030, 0);
          id v32 = (id)objc_claimAutoreleasedReturnValue();
LABEL_31:
          uint64_t v28 = 0;
          *a6 = v32;
          goto LABEL_19;
        }
        goto LABEL_27;
      }
      MEMORY[0x18530E330](a3, *MEMORY[0x1E4F1CD38], 0);
      MEMORY[0x18530E330](a3, *MEMORY[0x1E4F1CD60], 0);
    }
    else
    {
      MEMORY[0x18530E330](a3, *MEMORY[0x1E4F1CD38], 0);
      MEMORY[0x18530E330](a3, *MEMORY[0x1E4F1CD60], 0);
    }
LABEL_18:
    uint64_t v28 = 1;
LABEL_19:

    return v28;
  }
  uint64_t v19 = _LSDefaultLog();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
    LaunchServices::URLPropertyProvider::prepareArchitecturesValue(v19, v20, v21, v22, v23, v24, v25, v26);
  }

  if (a6)
  {
    uint64_t v35 = *MEMORY[0x1E4F28228];
    v36[0] = @"can't provide with mimic";
    int v27 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v36 forKeys:&v35 count:1];
    _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -50, (uint64_t)"prepareArchitecturesValue", 1982, v27);
    *a6 = (id)objc_claimAutoreleasedReturnValue();
  }
  return 0;
}

void sub_182ABDE2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::URLPropertyProvider::prepareIsHiddenBySystemValue(id *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  {
    __cxa_atexit((void (*)(void *))LaunchServices::notifyd::NotifyToken::~NotifyToken, &LaunchServices::URLPropertyProvider::beginTranslatingHiddenBySystemNotifications(void)::preferenceDistributedNotificationToken, &dword_182959000);
  }
  if (LaunchServices::URLPropertyProvider::beginTranslatingHiddenBySystemNotifications(void)::onceToken != -1) {
    dispatch_once(&LaunchServices::URLPropertyProvider::beginTranslatingHiddenBySystemNotifications(void)::onceToken, &__block_literal_global_47_0);
  }
  if ([0 BOOLValue])
  {
    MEMORY[0x18530E330](a3, a4, *MEMORY[0x1E4F1CFD0]);
    return 1;
  }
  +[_LSDServiceDomain defaultServiceDomain]();
  CFNumberRef v12 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  int v13 = (LSContext *)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)a1, v12, 0);

  if (v13)
  {
    uint64_t v31 = 0;
    unsigned int v30 = 0;
    int v14 = _LSFindOrFindOrRegisterBundleNode(v13, a2, 0, 0x2000000u, 0, &v30, &v31);
    if (v14 == -10811)
    {
      MEMORY[0x18530E330](a3, a4, 0);
      return 1;
    }
    if (!v14)
    {
      int bundleFlags_high = HIDWORD(v31->_bundleFlags);
      CFArrayRef v16 = (uint64_t *)MEMORY[0x1E4F1CFD0];
      if ((bundleFlags_high & 0x2000000) != 0)
      {
        uint64_t v23 = +[LSEligibilityPredicateEvaluator sharedCachingEligibilityPredicateEvaluator];
        uint64_t v24 = [v23 evaluateBundle:v30 bundleData:v31 database:v13->db error:a6];

        BOOL v18 = v24 != 0;
        if (v24)
        {
          int v25 = [v24 BOOLValue];
          uint64_t v26 = (uint64_t *)MEMORY[0x1E4F1CFC8];
          if (!v25) {
            uint64_t v26 = v16;
          }
          uint64_t v17 = *v26;
        }
        else
        {
          uint64_t v17 = 0;
        }

        int bundleFlags_high = HIDWORD(v31->_bundleFlags);
      }
      else
      {
        uint64_t v17 = 0;
        BOOL v18 = 1;
      }
      if ((bundleFlags_high & 0x4000000) != 0 && v18 && (uint64_t v27 = *v16, v17 != *v16))
      {
        uint64_t v28 = +[LSFeatureFlagPredicateEvaluator defaultEvaluator];
        id v29 = [v28 evaluateBundle:v30 bundleData:v31 database:v13->db error:a6];

        if (v29)
        {
          if ([v29 BOOLValue]) {
            uint64_t v17 = *MEMORY[0x1E4F1CFC8];
          }
          else {
            uint64_t v17 = v27;
          }

          goto LABEL_37;
        }
      }
      else if (v18)
      {
LABEL_37:
        MEMORY[0x18530E330](a3, a4, v17);
        return 1;
      }
      return 0;
    }
    if (a6)
    {
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], v14, (uint64_t)"prepareIsHiddenBySystemValue", 2281, 0);
      id v22 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_23;
    }
  }
  else if (a6)
  {
    +[_LSDServiceDomain defaultServiceDomain]();
    uint64_t v19 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
    uint64_t v20 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)a1, v19, 0);

    if (v20)
    {
      id v21 = 0;
LABEL_24:
      uint64_t result = 0;
      *a6 = v21;
      return result;
    }
    id v22 = a1[3];
LABEL_23:
    id v21 = v22;
    goto LABEL_24;
  }
  return 0;
}

void sub_182ABE1A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::URLPropertyProvider::prepareIsHiddenBySystemNotificationsValue(id *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  +[_LSDServiceDomain defaultServiceDomain]();
  uint64_t v11 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  CFNumberRef v12 = (LSContext *)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)a1, v11, 0);

  if (v12)
  {
    id v21 = 0;
    unsigned int v20 = 0;
    int v13 = _LSFindOrFindOrRegisterBundleNode(v12, a2, 0, 0x2000000u, 0, &v20, &v21);
    if (v13 == -10811)
    {
      MEMORY[0x18530E330](a3, a4, 0);
      return 1;
    }
    if (!v13)
    {
      if ((v21->_bundleFlags & 0x200000000000000) != 0)
      {
        int v14 = [MEMORY[0x1E4F1CBF0] arrayByAddingObject:@"kLSHiddenAppsEligibilityChangedNotification"];
      }
      else
      {
        int v14 = (void *)MEMORY[0x1E4F1CBF0];
      }
      MEMORY[0x18530E330](a3, @"_NSURLIsHiddenBySystemChangedNotificationsKey", v14);

      return 1;
    }
    if (a6)
    {
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], v13, (uint64_t)"prepareIsHiddenBySystemNotificationsValue", 2319, 0);
      id v18 = (id)objc_claimAutoreleasedReturnValue();
LABEL_17:
      id v17 = v18;
      goto LABEL_18;
    }
    return 0;
  }
  if (!a6) {
    return 0;
  }
  +[_LSDServiceDomain defaultServiceDomain]();
  CFArrayRef v15 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  uint64_t v16 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)a1, v15, 0);

  if (!v16)
  {
    id v18 = a1[3];
    goto LABEL_17;
  }
  id v17 = 0;
LABEL_18:
  uint64_t result = 0;
  *a6 = v17;
  return result;
}

void sub_182ABE3B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::URLPropertyProvider::prepareApplicationDeviceManagementPolicyValue(id *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  v31[1] = *MEMORY[0x1E4F143B8];
  if (([a2 canIssueIO] & 1) == 0)
  {
    uint64_t v16 = _LSDefaultLog();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      LaunchServices::URLPropertyProvider::prepareApplicationDeviceManagementPolicyValue(v16, v17, v18, v19, v20, v21, v22, v23);
    }

    if (a6)
    {
      uint64_t v30 = *MEMORY[0x1E4F28228];
      v31[0] = @"can't provide with mimic";
      uint64_t v24 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v31 forKeys:&v30 count:1];
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -50, (uint64_t)"prepareApplicationDeviceManagementPolicyValue", 2335, v24);
      *a6 = (id)objc_claimAutoreleasedReturnValue();
    }
    return 0;
  }
  +[_LSDServiceDomain defaultServiceDomain]();
  int v10 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  uint64_t v11 = (LSContext *)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)a1, v10, 0);

  if (!v11)
  {
    if (a6)
    {
      +[_LSDServiceDomain defaultServiceDomain]();
      int v25 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
      uint64_t v26 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)a1, v25, 0);

      if (v26) {
        id v27 = 0;
      }
      else {
        id v27 = a1[3];
      }
      goto LABEL_19;
    }
    return 0;
  }
  id v29 = 0;
  int v12 = _LSFindOrFindOrRegisterBundleNode(v11, a2, 0, 0x2000000u, 0, 0, &v29);
  if (v12 == -10811)
  {
    MEMORY[0x18530E330](a3, *MEMORY[0x1E4F1CD40], 0);
    return 1;
  }
  if (v12)
  {
    if (a6)
    {
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], v12, (uint64_t)"prepareApplicationDeviceManagementPolicyValue", 2361, 0);
      id v27 = (id)objc_claimAutoreleasedReturnValue();
LABEL_19:
      uint64_t v15 = 0;
      *a6 = v27;
      return v15;
    }
    return 0;
  }
  int v13 = (void *)_CSStringCopyCFString();
  int v14 = _LSGetDMFPolicyNoCache(v13, a6);

  if (v14)
  {
    MEMORY[0x18530E330](a3, *MEMORY[0x1E4F1CD40], v14);
    uint64_t v15 = 1;
  }
  else
  {
    uint64_t v15 = 0;
  }

  return v15;
}

void sub_182ABE668(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN14LaunchServices19URLPropertyProviderL43beginTranslatingHiddenBySystemNotificationsEv_block_invoke()
{
  os_log_t v0 = _LSDefaultLog();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_182959000, v0, OS_LOG_TYPE_DEFAULT, "Starting listening to hidden-by-system notifications", buf, 2u);
  }

  id v1 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v2 = dispatch_queue_create("com.apple.launchservices.hiddenPreferenceNotification", v1);
  uint64_t v3 = (void *)LaunchServices::URLPropertyProvider::beginTranslatingHiddenBySystemNotifications(void)::hiddenPreferenceNotificationQueue;
  LaunchServices::URLPropertyProvider::beginTranslatingHiddenBySystemNotifications(void)::hiddenPreferenceNotificationQueue = (uint64_t)v2;

  LaunchServices::notifyd::NotifyToken::RegisterDispatch(@"com.apple.launchservices.setsystemhidden", (void *)LaunchServices::URLPropertyProvider::beginTranslatingHiddenBySystemNotifications(void)::hiddenPreferenceNotificationQueue, &__block_literal_global_54_0, &v8);
  LaunchServices::notifyd::NotifyToken::operator=(LaunchServices::URLPropertyProvider::beginTranslatingHiddenBySystemNotifications(void)::preferenceDistributedNotificationToken, (atomic_uint *)&v8);
  LaunchServices::notifyd::NotifyToken::~NotifyToken((LaunchServices::notifyd::NotifyToken *)&v8);
  uint64_t v5 = LaunchServices::EligibilityCache::shared(v4);
  uint64_t v6 = LaunchServices::EligibilityCache::addEligibilityChangedListener(v5, &__block_literal_global_60);
  CFURLRef v7 = (void *)LaunchServices::URLPropertyProvider::beginTranslatingHiddenBySystemNotifications(void)::eligibilityChangeListenerToken;
  LaunchServices::URLPropertyProvider::beginTranslatingHiddenBySystemNotifications(void)::eligibilityChangeListenerTokeCFIndex n = v6;
}

void sub_182ABE7A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11)
{
}

void ___ZN14LaunchServices19URLPropertyProviderL43beginTranslatingHiddenBySystemNotificationsEv_block_invoke_52()
{
  os_log_t v0 = _LSDefaultLog();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)dispatch_queue_t v2 = 0;
    _os_log_impl(&dword_182959000, v0, OS_LOG_TYPE_DEFAULT, "Received com.apple.launchservices.setsystemhidden, reposting eligibility notification", v2, 2u);
  }

  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterPostNotification(LocalCenter, @"kLSHiddenAppsEligibilityChangedNotification", 0, 0, 1u);
}

void ___ZN14LaunchServices19URLPropertyProviderL43beginTranslatingHiddenBySystemNotificationsEv_block_invoke_58()
{
  os_log_t v0 = _LSDefaultLog();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)dispatch_queue_t v2 = 0;
    _os_log_impl(&dword_182959000, v0, OS_LOG_TYPE_DEFAULT, "Eligibility changed, reposting eligibility notification", v2, 2u);
  }

  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterPostNotification(LocalCenter, @"kLSHiddenAppsEligibilityChangedNotification", 0, 0, 1u);
}

void ___ZN14LaunchServices19URLPropertyProviderL13prepareValuesEPK7__CFURLP11__FileCachePKPK10__CFStringPPKvlSC_PP9__CFError_block_invoke(uint64_t a1, void *a2)
{
}

void ___ZN14LaunchServices19URLPropertyProviderL13prepareValuesEPK7__CFURLP11__FileCachePKPK10__CFStringPPKvlSC_PP9__CFError_block_invoke_4()
{
}

void LaunchServices::URLPropertyProvider::normalizeError(const void *a1, uint64_t a2, id *a3)
{
  if (a1 && a3)
  {
    id v6 = *a3;
    id v11 = v6;
    if (v6)
    {
      CFURLRef v7 = [v6 domain];
      char v8 = [v7 isEqual:*MEMORY[0x1E4F281F8]];

      if ((v8 & 1) == 0)
      {
        CFAllocatorRef v9 = CFGetAllocator(a1);
        int v10 = [v11 domain];
        *a3 = (id)MEMORY[0x18530E2D0](v9, v10, [v11 code], a2, a1, 0);
      }
    }
    else
    {
      _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -10810, (uint64_t)"normalizeError", 222, 0);
      *a3 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
}

void sub_182ABEA0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void LaunchServices::URLPropertyProvider::State::~State(id *this)
{
  if (*((unsigned char *)this + 32)) {
}
  }

void _LSRegistrationWarning(void *a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v4 = a1;
  if ((id)_LSRegistrationWarning::lastNode != v4)
  {
    objc_storeStrong((id *)&_LSRegistrationWarning::lastNode, a1);
    if (v4)
    {
      uint64_t v5 = [v4 pathWithError:0];
      id v6 = (void *)v5;
      CFURLRef v7 = @"<unknown>";
      if (v5) {
        CFURLRef v7 = (__CFString *)v5;
      }
      char v8 = v7;

      CFAllocatorRef v9 = _LSDefaultLog();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = 138477827;
        int v14 = v8;
        _os_log_impl(&dword_182959000, v9, OS_LOG_TYPE_DEFAULT, "*** Registration warnings for %{private}@:", (uint8_t *)&v13, 0xCu);
      }
    }
  }
  if (a2)
  {
    int v10 = (void *)MEMORY[0x18530F680]();
    id v11 = _LSDefaultLog();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = [a2 UTF8String];
      int v13 = 136446210;
      int v14 = (__CFString *)v12;
      _os_log_impl(&dword_182959000, v11, OS_LOG_TYPE_DEFAULT, "    %{public}s", (uint8_t *)&v13, 0xCu);
    }
  }
}

void sub_182ABEBF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSRegistrationWarningPath(uint64_t a1, void *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v4 = _LSDefaultLog();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 138477827;
    uint64_t v9 = a1;
    _os_log_impl(&dword_182959000, v4, OS_LOG_TYPE_DEFAULT, "*** Registration warnings for %{private}@:", (uint8_t *)&v8, 0xCu);
  }

  if (a2)
  {
    uint64_t v5 = (void *)MEMORY[0x18530F680]();
    id v6 = _LSDefaultLog();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = [a2 UTF8String];
      int v8 = 136446210;
      uint64_t v9 = v7;
      _os_log_impl(&dword_182959000, v6, OS_LOG_TYPE_DEFAULT, "    %{public}s", (uint8_t *)&v8, 0xCu);
    }
  }
}

void sub_182ABED48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CFStringRef _LSGetBooleanFromCFType(const __CFString *result)
{
  if (result)
  {
    CFStringRef v1 = result;
    CFTypeID v2 = CFGetTypeID(result);
    if (v2 != CFBooleanGetTypeID())
    {
      if (v2 == CFStringGetTypeID())
      {
        uint64_t result = (const __CFString *)CFStringGetLength(v1);
        if (!result) {
          return result;
        }
        uint64_t result = (const __CFString *)CFStringCompare(v1, @"NO", 1uLL);
        if (!result) {
          return result;
        }
        uint64_t result = (const __CFString *)CFStringCompare(v1, @"0", 0x40uLL);
        if (!result) {
          return result;
        }
        BOOL v3 = CFStringCompare(v1, @"FALSE", 1uLL) == kCFCompareEqualTo;
      }
      else
      {
        if (v2 != CFNumberGetTypeID()) {
          return 0;
        }
        uint64_t valuePtr = 0;
        CFNumberGetValue((CFNumberRef)v1, kCFNumberLongType, &valuePtr);
        BOOL v3 = valuePtr == 0;
      }
      return (const __CFString *)!v3;
    }
    return (const __CFString *)CFBooleanGetValue((CFBooleanRef)v1);
  }
  return result;
}

CFStringRef _LSGetBooleanFromDict(const __CFDictionary *a1, const void *a2)
{
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a1, a2);

  return _LSGetBooleanFromCFType(Value);
}

CFStringRef _LSGetRawOSTypeForPossibleString(const __CFString *result)
{
  *(_DWORD *)long long buffer = 0;
  if (result)
  {
    CFStringRef v1 = result;
    CFTypeID TypeID = CFStringGetTypeID();
    if (TypeID == CFGetTypeID(v1))
    {
      CFIndex Length = CFStringGetLength(v1);
      if (Length >= 4) {
        CFIndex v4 = 4;
      }
      else {
        CFIndex v4 = Length;
      }
      v7.locatioCFIndex n = 0;
      v7.length = v4;
      CFIndex Bytes = CFStringGetBytes(v1, v7, 0, 0, 0, buffer, 4, 0);
      uint64_t result = 0;
      if (v4 == Bytes) {
        return (const __CFString *)bswap32(*(unsigned int *)buffer);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t _LSGetBundle()
{
  if (_LSGetBundle::once != -1) {
    dispatch_once(&_LSGetBundle::once, &__block_literal_global_79);
  }
  return _LSGetBundle::gBundleRef;
}

uint64_t _LSGetDirectoryClassForNode(void *a1)
{
  CFStringRef v1 = a1;
  if (![(FSNode *)v1 isOnLocalVolume]) {
    goto LABEL_21;
  }
  if (_LSNodeIsInDirectoryPath(v1, "/System/Cryptexes/App/System/Applications"))
  {
    unsigned __int8 v2 = 1;
    goto LABEL_22;
  }
  if ((_LSNodeIsInDirectoryPath(v1, "/System/Cryptexes/App/System/Library/CoreServices") & 1) != 0
    || (_LSNodeIsInDirectoryPath(v1, "/System/Library/CoreServices/") & 1) != 0)
  {
    unsigned __int8 v2 = 4;
    goto LABEL_22;
  }
  if (_LSNodeIsInSearchPath(v1, NSLibraryDirectory, 8))
  {
    unsigned __int8 v2 = 3;
    goto LABEL_22;
  }
  if (_LSNodeIsInSearchPath(v1, NSApplicationDirectory, 2))
  {
    unsigned __int8 v2 = 0;
    goto LABEL_22;
  }
  if (_LSNodeIsInSearchPath(v1, NSLibraryDirectory, 2))
  {
    unsigned __int8 v2 = 2;
    goto LABEL_22;
  }
  if (_LSNodeIsInSearchPath(v1, NSApplicationDirectory, 1))
  {
    unsigned __int8 v2 = 5;
    goto LABEL_22;
  }
  if (_LSNodeIsInSearchPath(v1, NSLibraryDirectory, 1))
  {
    unsigned __int8 v2 = 6;
    goto LABEL_22;
  }
  if (![(id)__LSDefaultsGetSharedInstance() isAppleInternal])
  {
LABEL_21:
    unsigned __int8 v2 = -1;
    goto LABEL_22;
  }
  if (_LSNodeIsInDirectoryPath(v1, "/AppleInternal/")) {
    unsigned __int8 v2 = 8;
  }
  else {
    unsigned __int8 v2 = -1;
  }
LABEL_22:

  return v2;
}

void sub_182ABF124(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSNodeIsInDirectoryPath(FSNode *a1, const char *a2)
{
  BOOL v3 = a1;
  CFIndex v4 = (NSURL *)[objc_alloc(MEMORY[0x1E4F1CB10]) initFileURLWithFileSystemRepresentation:a2 isDirectory:1 relativeToURL:0];
  uint64_t v5 = _LSNodeIsInDirectoryURL(v3, v4);

  return v5;
}

void sub_182ABF1A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSNodeIsInSearchPath(FSNode *a1, NSSearchPathDirectory a2, uint64_t a3)
{
  uint64_t v5 = a1;
  id v6 = [MEMORY[0x1E4F28CB8] defaultManager];
  CFRange v7 = [v6 URLsForDirectory:a2 inDomains:a3];
  int v8 = [v7 firstObject];

  uint64_t v9 = _LSNodeIsInDirectoryURL(v5, v8);
  return v9;
}

void sub_182ABF248(_Unwind_Exception *a1)
{
  BOOL v3 = v2;

  _Unwind_Resume(a1);
}

BOOL _LSIconDictionarySupportsAssetCatalogs(void *a1)
{
  unsigned __int8 v2 = (void *)MEMORY[0x18530F680]();
  BOOL v3 = [a1 objectForKey:@"CFBundlePrimaryIcon"];
  if (_NSIsNSString())
  {
    BOOL v4 = 1;
  }
  else if (_NSIsNSDictionary())
  {
    uint64_t v5 = [v3 objectForKey:@"CFBundleIconName"];
    BOOL v4 = v5 != 0;
  }
  else
  {
    BOOL v4 = 0;
  }

  return v4;
}

void sub_182ABF31C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSIconDictionaryGetPrimaryIconName(void *a1)
{
  CFStringRef v1 = [a1 objectForKey:@"CFBundlePrimaryIcon"];
  if (_NSIsNSDictionary())
  {
    id v2 = [v1 objectForKey:@"CFBundleIconName"];
LABEL_5:
    BOOL v3 = v2;
    goto LABEL_7;
  }
  if (_NSIsNSString())
  {
    id v2 = v1;
    goto LABEL_5;
  }
  BOOL v3 = 0;
LABEL_7:

  return v3;
}

void sub_182ABF3B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182ABF4B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182ABF52C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182ABF5DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__CFString *_LSGetPlatformNameSuffix()
{
  return @"-iphoneos";
}

uint64_t _LSGetProductNameSuffix()
{
  if (_LSGetProductNameSuffix::onceToken != -1) {
    dispatch_once(&_LSGetProductNameSuffix::onceToken, &__block_literal_global_116_0);
  }
  return _LSGetProductNameSuffix::suffix;
}

uint64_t _LSSessionKeyCopyDescription(unint64_t a1)
{
  return objc_claimAutoreleasedReturnValue();
}

id _LSGetDataForUserActivity(void *a1, void *a2)
{
  uint64_t v22 = 0;
  uint64_t v23 = &v22;
  uint64_t v24 = 0x3032000000;
  int v25 = __Block_byref_object_copy__52;
  uint64_t v26 = __Block_byref_object_dispose__52;
  id v27 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = &v16;
  uint64_t v18 = 0x3032000000;
  uint64_t v19 = __Block_byref_object_copy__52;
  uint64_t v20 = __Block_byref_object_dispose__52;
  id v21 = 0;
  id v3 = a1;
  dispatch_semaphore_t v4 = dispatch_semaphore_create(0);
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  uint64x2_t v12[2] = ___LSGetDataForUserActivity_block_invoke;
  void v12[3] = &unk_1E5230ED8;
  int v14 = &v22;
  uint64_t v15 = &v16;
  uint64_t v5 = v4;
  int v13 = v5;
  int v6 = [v3 _createUserActivityDataWithOptions:0 completionHandler:v12];

  if (v6)
  {
    dispatch_semaphore_wait(v5, 0xFFFFFFFFFFFFFFFFLL);
  }
  else
  {
    uint64_t v7 = _LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -10817, (uint64_t)"_LSGetDataForUserActivity", 1674, 0);
    int v8 = (void *)v17[5];
    v17[5] = v7;
  }
  uint64_t v9 = (void *)v23[5];
  if (a2 && !v9)
  {
    *a2 = (id) v17[5];
    uint64_t v9 = (void *)v23[5];
  }
  id v10 = v9;

  _Block_object_dispose(&v16, 8);
  _Block_object_dispose(&v22, 8);

  return v10;
}

void sub_182ABFA00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);
  _Block_object_dispose((const void *)(v23 - 80), 8);

  _Unwind_Resume(a1);
}

uint64_t _LSNodeIsInDirectoryURL(FSNode *a1, NSURL *a2)
{
  id v3 = a1;
  dispatch_semaphore_t v4 = a2;
  unint64_t v10 = 2;
  if (v4)
  {
    uint64_t v5 = [MEMORY[0x1E4F28CB8] defaultManager];
    int v6 = [(FSNode *)v3 URL];
    unsigned int v7 = [v5 getRelationship:&v10 ofDirectoryAtURL:v4 toItemAtURL:v6 error:0];

    if (v10 < 2) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
  }
  else
  {
    uint64_t v8 = 0;
  }

  return v8;
}

void sub_182ABFBA8(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

int *___ZL17_LSGetProductNamev_block_invoke()
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  os_log_t v0 = getenv("CLASSIC_SUFFIX");
  if (v0)
  {
    CFStringRef v1 = v0;
    uint64_t result = (int *)strncmp(v0, "iphone", 6uLL);
    if (!result) {
      goto LABEL_13;
    }
    uint64_t result = (int *)strncmp(v1, "ipad", 4uLL);
    if (!result)
    {
LABEL_34:
      dispatch_semaphore_t v4 = @"ipad";
      goto LABEL_36;
    }
  }
  memset(v9, 0, sizeof(v9));
  size_t v8 = 256;
  uint64_t result = (int *)sysctlbyname("hw.machine", v9, &v8, 0, 0);
  if (result)
  {
    if (result != -1) {
      return result;
    }
    uint64_t result = __error();
    if (*result != 12) {
      return result;
    }
  }
  if (v8 >= 6)
  {
    if (LODWORD(v9[0]) != 1869107305 || WORD2(v9[0]) != 25966) {
      goto LABEL_15;
    }
LABEL_13:
    dispatch_semaphore_t v4 = @"iphone";
LABEL_36:
    _LSGetProductName(void)::_cfBundlePlatforCFIndex m = (uint64_t)v4;
    return result;
  }
  if (v8 < 4) {
    return result;
  }
LABEL_15:
  if (LODWORD(v9[0]) == 1685016681)
  {
    dispatch_semaphore_t v4 = @"ipod";
    goto LABEL_36;
  }
  if (LODWORD(v9[0]) == 1684099177) {
    goto LABEL_34;
  }
  if (v8 < 5) {
    return result;
  }
  if (LODWORD(v9[0]) == 1668571479 && BYTE4(v9[0]) == 104)
  {
    dispatch_semaphore_t v4 = @"watch";
    goto LABEL_36;
  }
  if (v8 < 7) {
    return result;
  }
  if (LODWORD(v9[0]) == 1819308097 && *(_DWORD *)((char *)v9 + 3) == 1448371564)
  {
    dispatch_semaphore_t v4 = @"appletv";
    goto LABEL_36;
  }
  if (v8 >= 0xD && *(void *)&v9[0] == 0x447974696C616552 && *(void *)((char *)v9 + 5) == 0x6563697665447974)
  {
    dispatch_semaphore_t v4 = @"reality";
    goto LABEL_36;
  }
  return result;
}

void sub_182ABFFA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AC0108(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double _LSVersionNumberGetCurrentSystemVersion@<D0>(_OWORD *a1@<X8>)
{
  if (_LSGetCurrentSystemIOSSupportAndBuildVersions(LSVersionNumber *,LSVersionNumber *,__CFString const**,LSVersionNumber *,__CFString const**)::once != -1) {
    dispatch_once(&_LSGetCurrentSystemIOSSupportAndBuildVersions(LSVersionNumber *,LSVersionNumber *,__CFString const**,LSVersionNumber *,__CFString const**)::once, &__block_literal_global_80);
  }
  double result = *(double *)&_LSGetCurrentSystemIOSSupportAndBuildVersions(LSVersionNumber *,LSVersionNumber *,__CFString const**,LSVersionNumber *,__CFString const**)::cachedSystemVersion;
  long long v3 = unk_1EB20D820;
  *a1 = _LSGetCurrentSystemIOSSupportAndBuildVersions(LSVersionNumber *,LSVersionNumber *,__CFString const**,LSVersionNumber *,__CFString const**)::cachedSystemVersion;
  a1[1] = v3;
  return result;
}

CFStringRef _LSVersionNumberCopyStringRepresentation(_OWORD *a1)
{
  long long v1 = a1[1];
  v3[0] = *a1;
  v3[1] = v1;
  return LaunchServices::VersionNumber::copyStringRepresentation((LaunchServices::VersionNumber *)v3);
}

uint64_t _LSVersionNumberHash(void *a1)
{
  return a1[1] ^ *a1 ^ a1[2];
}

uint64_t _LSVersionNumberGetMinorComponent(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t _LSVersionNumberGetBugFixComponent(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t _LSMakeVersionNumber@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  a4[3] = 0;
  return result;
}

uint64_t _LSMakeVersionNumberFromDYLDVersion@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = WORD1(result);
  a2[1] = BYTE1(result);
  a2[2] = result;
  a2[3] = 0;
  return result;
}

uint64_t _LSMakeDYLDVersionFromVersionNumber(uint64x2_t *a1)
{
  unint64_t v1 = a1[1].u64[0];
  if (v1 >= 0xFF) {
    LODWORD(v1) = 255;
  }
  int64x2_t v2 = (int64x2_t)vshlq_u64((uint64x2_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)xmmword_182AF9240, *a1), *(int8x16_t *)a1, (int8x16_t)xmmword_182AF9240), (uint64x2_t)xmmword_182AF9250);
  return vorrq_s8((int8x16_t)vdupq_laneq_s64(v2, 1), (int8x16_t)v2).u32[0] | v1;
}

double _LSGetCurrentCryptexVersion@<D0>(_OWORD *a1@<X8>)
{
  if (_LSGetCurrentSystemIOSSupportAndBuildVersions(LSVersionNumber *,LSVersionNumber *,__CFString const**,LSVersionNumber *,__CFString const**)::once != -1) {
    dispatch_once(&_LSGetCurrentSystemIOSSupportAndBuildVersions(LSVersionNumber *,LSVersionNumber *,__CFString const**,LSVersionNumber *,__CFString const**)::once, &__block_literal_global_80);
  }
  double result = *(double *)&_LSGetCurrentSystemIOSSupportAndBuildVersions(LSVersionNumber *,LSVersionNumber *,__CFString const**,LSVersionNumber *,__CFString const**)::cachedCryptexVersion;
  long long v3 = *(_OWORD *)algn_1E8F5F250;
  *a1 = _LSGetCurrentSystemIOSSupportAndBuildVersions(LSVersionNumber *,LSVersionNumber *,__CFString const**,LSVersionNumber *,__CFString const**)::cachedCryptexVersion;
  a1[1] = v3;
  return result;
}

uint64_t _LSGetCurrentCryptexBuildVersionString()
{
  if (_LSGetCurrentSystemIOSSupportAndBuildVersions(LSVersionNumber *,LSVersionNumber *,__CFString const**,LSVersionNumber *,__CFString const**)::once != -1) {
    dispatch_once(&_LSGetCurrentSystemIOSSupportAndBuildVersions(LSVersionNumber *,LSVersionNumber *,__CFString const**,LSVersionNumber *,__CFString const**)::once, &__block_literal_global_80);
  }
  return _LSGetCurrentSystemIOSSupportAndBuildVersions(LSVersionNumber *,LSVersionNumber *,__CFString const**,LSVersionNumber *,__CFString const**)::cachedCryptexBuildVersion;
}

double _LSGetVersionForArchitecture@<D0>(const __CFDictionary *a1@<X0>, const void *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  *a3 = 0u;
  a3[1] = 0u;
  CFStringRef Value = (__CFString *)CFDictionaryGetValue(a1, a2);
  if (Value)
  {
    int v6 = Value;
    CFTypeID TypeID = CFStringGetTypeID();
    if (TypeID == CFGetTypeID(v6))
    {
      _LSGetVersionFromString(v6, v9);
      double result = *(double *)v9;
      long long v8 = v9[1];
      *a3 = v9[0];
      a3[1] = v8;
    }
  }
  return result;
}

void sub_182AC04D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t _LSIsArrayWithValuesOfClass(void *a1, void *a2)
{
  id v3 = a1;
  int v6 = a2;
  if (a2) {
    a2 = (void *)[objc_alloc(MEMORY[0x1E4F1CAD0]) initWithObjects:&v6 count:1];
  }
  uint64_t v4 = _LSIsArrayWithValuesOfClasses(v3, a2);

  return v4;
}

uint64_t _LSIsDictionaryWithKeysAndValuesOfClass(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  long long v8 = a3;
  uint64_t v9 = a2;
  if (a2) {
    a2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CAD0]), "initWithObjects:count:", &v9, 1, v8);
  }
  if (a3) {
    a3 = (void *)[objc_alloc(MEMORY[0x1E4F1CAD0]) initWithObjects:&v8 count:1];
  }
  uint64_t v6 = _LSIsDictionaryWithKeysAndValuesOfClasses(v5, a2, a3);

  return v6;
}

CFStringRef _UTTypeCreateDynamicIdentifierForTaggedPointerObject(__CFString *a1, int a2)
{
  int64x2_t v2 = (const __CFString **)&kUTTypePackage;
  if (!a2) {
    int64x2_t v2 = (const __CFString **)&kUTTypeData;
  }
  return _UTTypeCreateDynamicIdentifierForTagCommon(@"public.filename-extension", a1, *v2, 1);
}

void _UTDynamicEnumerateTagsFoundInDatabase(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  TagSpecificatioCFIndex n = (void *)_UTDynamicGetTagSpecification(a2);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = ___UTDynamicEnumerateTagsFoundInDatabase_block_invoke;
  v6[3] = &unk_1E5230F50;
  v6[4] = a1;
  void v6[5] = a3;
  [TagSpecification enumerateKeysAndObjectsUsingBlock:v6];
}

void sub_182AC0BCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AC0D54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _UTDynamicGetParentIdentifiers(const __CFString *a1)
{
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  id v3 = v2;
  if (v2)
  {
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    void v7[2] = ___UTDynamicGetParentIdentifiers_block_invoke;
    v7[3] = &unk_1E5230F78;
    id v4 = v2;
    id v8 = v4;
    _UTDynamicEnumerateParentIdentifiers(a1, (uint64_t)v7);
    if ([v4 count]) {
      uint64_t v5 = [v4 copy];
    }
    else {
      uint64_t v5 = 0;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

void sub_182AC0E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_182AC0EC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

CFArrayRef UTTypeCreateAllIdentifiersForTag(CFStringRef inTagClass, CFStringRef inTag, CFStringRef inConformingToUTI)
{
  id v3 = 0;
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (inTagClass && inTag)
  {
    unsigned int v7 = (void *)MEMORY[0x18530F680]();
    id v8 = +[UTTypeRecord typeRecordsWithTag:inTag ofClass:inTagClass conformingToIdentifier:inConformingToUTI];
    if (v8)
    {
      id v3 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      long long v17 = 0u;
      long long v18 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      id v9 = v8;
      uint64_t v10 = [v9 countByEnumeratingWithState:&v15 objects:v19 count:16];
      if (v10)
      {
        uint64_t v11 = *(void *)v16;
        do
        {
          for (uint64_t i = 0; i != v10; ++i)
          {
            if (*(void *)v16 != v11) {
              objc_enumerationMutation(v9);
            }
            int v13 = objc_msgSend(*(id *)(*((void *)&v15 + 1) + 8 * i), "identifier", (void)v15);
            [v3 addObject:v13];
          }
          uint64_t v10 = [v9 countByEnumeratingWithState:&v15 objects:v19 count:16];
        }
        while (v10);
      }
    }
    else
    {
      id v3 = 0;
    }
  }
  return (CFArrayRef)v3;
}

void sub_182AC1054(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _UTTypeHash(const __CFString *a1)
{
  return off_1ECB19468(a1);
}

CFStringRef _UTTypeCreateSuggestedFilename(__CFString *a1, uint64_t a2)
{
  id v4 = (void *)MEMORY[0x18530F680]();
  uint64_t v5 = 0;
  if (a1 && a2)
  {
    uint64_t v6 = [(id)_LSGetUTTypeClass() typeWithIdentifier:a2];
    if (v6)
    {
      uint64_t v5 = [(__CFString *)a1 stringByAppendingPathExtensionForType:v6];
    }
    else
    {
      uint64_t v5 = 0;
    }
  }
  if (!a1 || v5) {
    return (CFStringRef)v5;
  }
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];

  return CFStringCreateCopy(v7, a1);
}

void sub_182AC115C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _UTTypePrecachePropertiesOfIdentifiers()
{
  if ([(id)__LSDefaultsGetSharedInstance() isAppleInternal])
  {
    os_log_t v0 = _LSDefaultLog();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR)) {
      _UTTypePrecachePropertiesOfIdentifiers_cold_1(v0);
    }
  }
}

uint64_t _UTTypeIsWildcard(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  id v2 = (void *)MEMORY[0x18530F680]();
  id v3 = +[UTTypeRecord typeRecordWithIdentifier:a1];
  id v4 = v3;
  if (v3) {
    uint64_t v5 = [v3 isWildcard];
  }
  else {
    uint64_t v5 = 0;
  }

  return v5;
}

void sub_182AC1238(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t UTTypeCopyChildIdentifiers(const __CFString *a1)
{
  if (!a1 || !_UTTypeIdentifierIsDeclarable(a1)) {
    return 0;
  }
  id v2 = (void *)MEMORY[0x18530F680]();
  id v3 = +[UTTypeRecord typeRecordWithIdentifier:a1];
  id v4 = v3;
  if (v3)
  {
    uint64_t v5 = [v3 childTypeIdentifiers];
    uint64_t v6 = v5;
    if (v5)
    {
      uint64_t v7 = [v5 allObjects];
    }
    else
    {
      uint64_t v7 = 0;
    }
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_182AC12F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CFStringRef UTTypeCopyDescription(CFStringRef inUTI)
{
  if (!inUTI || !_UTTypeIdentifierIsDeclarable(inUTI)) {
    return 0;
  }
  id v2 = (void *)MEMORY[0x18530F680]();
  id v3 = +[UTTypeRecord typeRecordWithIdentifier:inUTI];
  id v4 = v3;
  if (v3)
  {
    CFStringRef v5 = [v3 localizedDescription];
  }
  else
  {
    CFStringRef v5 = 0;
  }

  return v5;
}

void sub_182AC1394(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

Boolean UTTypeIsDeclared(CFStringRef inUTI)
{
  return _UTTypeGetStatus(inUTI) == 1;
}

uint64_t _UTTypeGetStatus(const __CFString *a1)
{
  if (!_UTTypeIdentifierIsValid(a1)) {
    return -1;
  }
  if (_UTTypeIdentifierIsDynamic(a1)) {
    return 2;
  }
  id v3 = (void *)MEMORY[0x18530F680]();
  id v4 = +[UTTypeRecord typeRecordWithIdentifier:a1];
  CFStringRef v5 = v4;
  if (v4) {
    uint64_t v2 = [v4 isDeclared];
  }
  else {
    uint64_t v2 = 0;
  }

  return v2;
}

void sub_182AC1458(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CFDictionaryRef UTTypeCopyDeclaration(CFStringRef inUTI)
{
  if (!inUTI || !_UTTypeIdentifierIsDeclarable(inUTI)) {
    return 0;
  }
  uint64_t v2 = (void *)MEMORY[0x18530F680]();
  id v3 = +[UTTypeRecord typeRecordWithIdentifier:inUTI];
  id v4 = v3;
  if (v3)
  {
    CFStringRef v5 = [v3 declaration];
    CFDictionaryRef v6 = [v5 _expensiveDictionaryRepresentation];
  }
  else
  {
    CFDictionaryRef v6 = 0;
  }

  return v6;
}

void sub_182AC1500(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CFURLRef UTTypeCopyDeclaringBundleURL(CFStringRef inUTI)
{
  if (!inUTI || !_UTTypeIdentifierIsDeclarable(inUTI)) {
    return 0;
  }
  uint64_t v2 = (void *)MEMORY[0x18530F680]();
  id v3 = +[UTTypeRecord typeRecordWithIdentifier:inUTI];
  id v4 = v3;
  if (v3)
  {
    CFStringRef v5 = [v3 _resolvedPropertyValueForGetter:sel_declaringBundleRecord];
    CFDictionaryRef v6 = v5;
    if (v5)
    {
      CFURLRef v7 = [v5 URL];
    }
    else
    {
      id v8 = [v4 _declaringBundleBookmark];
      if (v8
        && (id v9 = [[FSNode alloc] initByResolvingBookmarkData:v8 relativeToNode:0 bookmarkDataIsStale:0 error:0]) != 0)
      {
        uint64_t v10 = [v4 _delegatePath];
        if (v10)
        {
          uint64_t v11 = [v9 childNodeWithRelativePath:v10 flags:8 error:0];

          id v9 = (id)v11;
        }

        CFURLRef v7 = [v9 URL];
      }
      else
      {
        CFURLRef v7 = 0;
      }
    }
  }
  else
  {
    CFURLRef v7 = 0;
  }

  return v7;
}

void sub_182AC1670(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _UTTypeCopyGlyphName(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = (void *)MEMORY[0x18530F680]();
  id v3 = +[UTTypeRecord typeRecordWithIdentifier:a1];
  id v4 = v3;
  if (v3)
  {
    CFStringRef v5 = [v3 iconDictionary];
    uint64_t v6 = [v5 objectForKeyedSubscript:@"UTTypeGlyphName"];
  }
  else
  {
    uint64_t v6 = 0;
  }

  return v6;
}

void sub_182AC1754(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _UTTypeCopyIconName(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = (void *)MEMORY[0x18530F680]();
  id v3 = +[UTTypeRecord typeRecordWithIdentifier:a1];
  id v4 = v3;
  if (v3)
  {
    CFStringRef v5 = [v3 iconDictionary];
    uint64_t v6 = [v5 objectForKeyedSubscript:@"UTTypeIconName"];
  }
  else
  {
    uint64_t v6 = 0;
  }

  return v6;
}

void sub_182AC180C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CFArrayRef _UTTypeCopyDynamicIdentifiersForTags(__CFString *a1)
{
  values = a1;
  if (_UTTypeIdentifierIsDynamic(a1)) {
    return CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&values, 1, MEMORY[0x1E4F1D510]);
  }
  id v3 = (void *)MEMORY[0x18530F680]();
  id v4 = +[UTTypeRecord typeRecordWithIdentifier:a1];
  if (v4)
  {
    id v5 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
    uint64_t v6 = @"public.data";
    if (([v4 conformsToTypeIdentifier:@"public.data"] & 1) == 0)
    {
      uint64_t v6 = @"com.apple.package";
      if (([v4 conformsToTypeIdentifier:@"com.apple.package"] & 1) == 0)
      {
        if ([v4 conformsToTypeIdentifier:@"public.folder"]) {
          uint64_t v6 = @"public.folder";
        }
        else {
          uint64_t v6 = 0;
        }
      }
    }
    CFURLRef v7 = [v4 tagSpecification];
    id v8 = [v7 _expensiveDictionaryRepresentation];

    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    v11[2] = ___UTTypeCopyDynamicIdentifiersForTags_block_invoke;
    v11[3] = &unk_1E5230FF0;
    int v13 = v6;
    id v9 = v5;
    id v12 = v9;
    [v8 enumerateKeysAndObjectsUsingBlock:v11];
    if ([v9 count])
    {
      uint64_t v2 = [v9 allObjects];
    }
    else
    {
      uint64_t v2 = 0;
    }
  }
  else
  {
    uint64_t v2 = 0;
  }

  return (CFArrayRef)v2;
}

void sub_182AC19EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_182AC1B4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _UTTypeCopyPedigree(const __CFString *a1)
{
  uint64_t v2 = (void *)MEMORY[0x18530F680]();
  id v3 = (void *)_UTTypeCopyPedigreeSet((uint64_t)a1);
  if (v3)
  {
    id v4 = v3;
    if ([v3 count] == 1 && _UTTypeIdentifierIsDynamic(a1))
    {

LABEL_7:
      id v4 = [MEMORY[0x1E4F1CAD0] set];
    }
  }
  else
  {
    if (!a1) {
      goto LABEL_7;
    }
    if (_UTTypeIdentifierIsValid(a1)) {
      goto LABEL_7;
    }
    id v4 = [MEMORY[0x1E4F1CAD0] setWithObject:a1];
    if (!v4) {
      goto LABEL_7;
    }
  }
  uint64_t v5 = [v4 allObjects];

  return v5;
}

void sub_182AC1C4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _UTTypeCopyPedigreeSet(uint64_t a1)
{
  uint64_t v2 = (void *)MEMORY[0x18530F680]();
  id v3 = +[UTTypeRecord typeRecordWithIdentifier:a1];
  id v4 = v3;
  if (v3)
  {
    uint64_t v5 = [v3 pedigree];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

void sub_182AC1CD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *_UTCopyDeclaredTypeIdentifiers()
{
  os_log_t v0 = (void *)MEMORY[0x18530F680]();
  if (_LSCurrentProcessMayMapDatabase())
  {
    id v15 = 0;
    id v12 = 0;
    id v13 = 0;
    char v14 = 0;
    +[_LSDServiceDomain defaultServiceDomain]();
    unint64_t v1 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
    uint64_t v2 = (uint64_t *)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v12, v1, 0);

    if (v2)
    {
      id v3 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      uint64_t v4 = *v2;
      v9[0] = MEMORY[0x1E4F143A8];
      v9[1] = 3221225472;
      _OWORD v9[2] = ___UTCopyDeclaredTypeIdentifiers_block_invoke;
      void v9[3] = &unk_1E5231018;
      uint64_t v11 = v2;
      id v5 = v3;
      id v10 = v5;
      _UTEnumerateActiveTypes(v4, v9);
      uint64_t v2 = (uint64_t *)v5;
    }
    if (v12 && v14) {
      _LSContextDestroy(v12);
    }
    id v6 = v13;
    id v12 = 0;
    id v13 = 0;

    char v14 = 0;
    id v7 = v15;
    id v15 = 0;
  }
  else
  {
    uint64_t v2 = 0;
  }
  return v2;
}

void sub_182AC1E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_182AC1EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *_UTTypeCopyDescriptionLocalizationDictionary(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = (void *)MEMORY[0x18530F680]();
  id v3 = +[UTTypeRecord typeRecordWithIdentifier:a1];
  uint64_t v4 = v3;
  if (v3)
  {
    id v5 = [v3 _localizedDescription];
    id v6 = [v5 allStringValues];

    if (v6) {
      id v7 = v6;
    }
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

void sub_182AC1FA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _UTTypeCopyKindStringForNonMaterializedItem(LaunchServices::BindingEvaluator *a1, void *a2, void *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v6 = (void *)MEMORY[0x18530F680]();
  LaunchServices::BindingEvaluator::CreateWithUTI(a1, 0, (LaunchServices::BindingEvaluator *)v12);
  id v11 = 0;
  uint64_t v7 = LaunchServices::BindingEvaluator::getLocalizedKindString((const LaunchServices::BindingEvaluator *)v12, 0, a2, &v11);
  id v8 = v11;
  id v9 = v8;
  if (a3 && !v7) {
    *a3 = v8;
  }
  LaunchServices::BindingEvaluator::~BindingEvaluator((LaunchServices::BindingEvaluator *)v12);

  return v7;
}

void sub_182AC2090(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _UTTypeCopyKindStringDictionaryForNonMaterializedItem(LaunchServices::BindingEvaluator *a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)MEMORY[0x18530F680]();
  LaunchServices::BindingEvaluator::CreateWithUTI(a1, 0, (LaunchServices::BindingEvaluator *)v10);
  id v9 = 0;
  uint64_t v5 = LaunchServices::BindingEvaluator::getLocalizedKindStringDictionary((const LaunchServices::BindingEvaluator *)v10, 0, &v9);
  id v6 = v9;
  uint64_t v7 = v6;
  if (a2 && !v5) {
    *a2 = v6;
  }
  LaunchServices::BindingEvaluator::~BindingEvaluator((LaunchServices::BindingEvaluator *)v10);

  return v5;
}

void sub_182AC2188(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CFTypeRef _LSCreateDeviceTypeIdentifierWithModelCode(uint64_t a1)
{
  return _LSCreateDeviceTypeIdentifierWithModelCodeAndColorComponents(a1, 0);
}

CFTypeRef _LSCreateDeviceTypeIdentifierWithModelCodeAndColorComponents(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4 = (void *)_LSGetUTTypeClass();
  if (v4)
  {
    uint64_t v5 = v4;
    if (a1)
    {
      if (a2)
      {
        uint64_t v6 = softLink_UTHardwareColorMakeWithRGBComponents
           ? softLink_UTHardwareColorMakeWithRGBComponents(*a2, a2[1], a2[2])
           : 0;
        uint64_t v7 = [v5 _typeWithDeviceModelCode:a1 enclosureColor:v6];
      }
      else
      {
        uint64_t v7 = [v4 _typeWithDeviceModelCode:a1];
      }
    }
    else
    {
      uint64_t v7 = [v4 _typeOfCurrentDevice];
    }
    id v8 = v7;
    if (v7)
    {
      uint64_t v9 = [v7 identifier];

      if (v9) {
        return (CFTypeRef)v9;
      }
    }
  }

  return CFRetain(@"public.device");
}

void sub_182AC22B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t (*init_UTHardwareColorMakeWithRGBComponents(uint64_t a1, uint64_t a2, uint64_t a3))(unsigned __int8, unsigned __int8, unsigned __int8)
{
  uint64_t v6 = (void *)UniformTypeIdentifiersLibrary(void)::frameworkLibrary;
  if (!UniformTypeIdentifiersLibrary(void)::frameworkLibrary)
  {
    uint64_t v6 = dlopen("/System/Library/Frameworks/UniformTypeIdentifiers.framework/UniformTypeIdentifiers", 2);
    UniformTypeIdentifiersLibrary(void)::frameworkLibrary = (uint64_t)v6;
  }
  double result = (uint64_t (*)(unsigned __int8, unsigned __int8, unsigned __int8))dlsym(v6, "_UTHardwareColorMakeWithRGBComponents");
  softLink_UTHardwareColorMakeWithRGBComponents = result;
  if (result)
  {
    return (uint64_t (*)(unsigned __int8, unsigned __int8, unsigned __int8))result(a1, a2, a3);
  }
  return result;
}

uint64_t _UTTypeAdd(void *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5 = a1;
  uint64_t v6 = v5;
  if (v5 && v5->store)
  {
    CSBindableKeyMapNextKey();
    int v7 = CSStoreAllocUnitWithData();
    if (v7)
    {
      CSMapSetValue();
      -[_LSDatabase setTypeDeclarationsChanged:](v6, 1);
      if (a3) {
        *a3 = v7;
      }
      if ((*(unsigned char *)(a2 + 8) & 0x20) != 0) {
        _CSStoreGarbageCollect();
      }
      uint64_t v8 = 0;
    }
    else
    {
      uint64_t v8 = 4294957803;
    }
  }
  else
  {
    uint64_t v8 = 4294967246;
  }

  return v8;
}

void sub_182AC2490(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _UTTypeAddWithDeclarationDictionary()
{
  os_log_t v0 = (void *)MEMORY[0x1F4188790]();
  unint64_t v104 = v1;
  int v3 = v2;
  unsigned int v5 = v4;
  int v7 = v6;
  uint64_t v9 = v8;
  uint64_t v130 = *MEMORY[0x1E4F143B8];
  id v10 = v0;
  id v105 = v7;
  int v122 = 0;
  long long v126 = kLSVersionNumberNull;
  long long v127 = *(_OWORD *)algn_182AF9270;
  if ((v5 & 0x2000) != 0)
  {
    uint64_t v11 = _LSGetPlugin((uint64_t)v10, v3);
    if (!v11) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  uint64_t v11 = _LSBundleGet(v10, v3);
  if (v11)
  {
LABEL_3:
    long long v12 = *(_OWORD *)(v11 + 76);
    long long v126 = *(_OWORD *)(v11 + 60);
    long long v127 = v12;
  }
LABEL_5:
  _LSBindingListBufferInit((uint64_t)v10, v121);
  long long v119 = 0u;
  memset(v120, 0, sizeof(v120));
  long long v117 = 0u;
  long long v118 = 0u;
  *(_OWORD *)long long v116 = 0u;
  if (!v9 || (CFTypeID v13 = CFGetTypeID(v9), v13 != CFDictionaryGetTypeID()))
  {
    uint64_t active = 0;
    goto LABEL_127;
  }
  _OWORD v116[2] = v5;
  CFTypeID TypeID = CFStringGetTypeID();
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v9, @"UTTypeIdentifier");
  CFStringRef v16 = Value;
  if (!Value || CFGetTypeID(Value) != TypeID || !_UTTypeIdentifierIsDeclarable(v16)) {
    goto LABEL_109;
  }
  v116[3] = _LSDatabaseCreateStringForCFString(v10, v16, 1);
  if ((v116[2] & 0x20) != 0) {
    _CSStringMakeConst();
  }
  for (uint64_t i = 0; i != 48; i += 16)
  {
    CFStringRef v18 = *(__CFString **)((char *)&off_1E52315F0 + i);
    CFIndex Length = CFStringGetLength(v18);
    if (CFStringGetLength(v16) > Length)
    {
      v131.locatioCFIndex n = 0;
      v131.length = Length;
      if (CFStringCompareWithOptions(v16, v18, v131, 1uLL) == kCFCompareEqualTo) {
        v116[2] |= *(_DWORD *)((char *)&off_1E52315F0 + i + 8);
      }
    }
  }
  CFTypeID v20 = CFNumberGetTypeID();
  CFNumberRef v21 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v9, @"UTTypeVersion");
  CFNumberRef v22 = v21;
  if (v21 && CFGetTypeID(v21) == v20)
  {
    LODWORD(valuePtr[0]) = 0;
    CFNumberGetValue(v22, kCFNumberSInt32Type, valuePtr);
    LODWORD(v117) = valuePtr[0];
    v116[2] |= 0x100u;
    if ((v5 & 0x20) == 0) {
      goto LABEL_26;
    }
  }
  else
  {
    LODWORD(v117) = 0;
    if ((v5 & 0x20) == 0) {
      goto LABEL_26;
    }
  }
  CFTypeID v23 = CFBooleanGetTypeID();
  CFBooleanRef v24 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)v9, @"UTTypeIsWildcard");
  CFBooleanRef v25 = v24;
  if (v24 && CFGetTypeID(v24) == v23 && CFBooleanGetValue(v25)) {
    v116[2] |= 0x200u;
  }
LABEL_26:
  CFTypeID v26 = CFArrayGetTypeID();
  CFArrayRef v27 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v9, @"UTTypeIconFiles");
  CFArrayRef v28 = v27;
  if (v27 && CFGetTypeID(v27) == v26)
  {
    CFIndex Count = CFArrayGetCount(v28);
    if (Count >= 1)
    {
      uint64_t v30 = 0;
      uint64_t v31 = 1;
      do
      {
        CFTypeID v32 = CFStringGetTypeID();
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v28, v31 - 1);
        CFStringRef v34 = ValueAtIndex;
        if (ValueAtIndex && CFGetTypeID(ValueAtIndex) == v32)
        {
          unsigned int StringForCFString = _LSDatabaseCreateStringForCFString(v10, v34, 0);
          uint64_t v36 = &v116[v30++];
          v36[7] = StringForCFString;
        }
        if (v31 >= Count) {
          break;
        }
        ++v31;
      }
      while (v30 < 8);
    }
  }
  else
  {
    CFTypeID v37 = CFStringGetTypeID();
    CFStringRef v38 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v9, @"UTTypeIconFile");
    CFStringRef v39 = v38;
    if (v38 && CFGetTypeID(v38) == v37) {
      HIDWORD(v117) = _LSDatabaseCreateStringForCFString(v10, v39, 0);
    }
  }
  CFTypeID v40 = CFStringGetTypeID();
  CFStringRef v41 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v9, @"UTTypeIconName");
  CFStringRef v42 = v41;
  if (v41 && CFGetTypeID(v41) == v40) {
    HIDWORD(v119) = _LSDatabaseCreateStringForCFString(v10, v42, 0);
  }
  CFTypeID v43 = CFStringGetTypeID();
  CFStringRef v44 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v9, @"UTTypeGlyphName");
  CFStringRef v45 = v44;
  if (v44 && CFGetTypeID(v44) == v43) {
    *(_DWORD *)int v120 = _LSDatabaseCreateStringForCFString(v10, v45, 0);
  }
  CFTypeID v46 = CFDictionaryGetTypeID();
  CFUUIDRef v47 = (void *)CFDictionaryGetValue((CFDictionaryRef)v9, @"UTTypeIcons");
  uint64_t v48 = v47;
  if (v47)
  {
    if (CFGetTypeID(v47) == v46) {
      CFStringRef v49 = v48;
    }
    else {
      CFStringRef v49 = 0;
    }
  }
  else
  {
    CFStringRef v49 = 0;
  }
  *(_DWORD *)&_OWORD v120[4] = _LSPlistAdd((uint64_t)v10, v49);
  CFTypeID v50 = CFStringGetTypeID();
  id v51 = (void *)CFDictionaryGetValue((CFDictionaryRef)v9, @"UTTypeDescription");
  id v52 = v51;
  if (v51 && CFGetTypeID(v51) == v50)
  {
    id v53 = v52;
    uint64_t v54 = [v105 objectForKeyedSubscript:v53];
    DWORD2(v117) = LaunchServices::LocalizedString::Add(v10, v54, v53);
  }
  DWORD1(v117) = v3;
  CFStringRef v55 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v9, @"_LSBundleLibraryDelegate");
  CFStringRef v56 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v9, @"UTKEXTIdentifier");
  if (v56) {
    v116[2] |= 0x80u;
  }
  *(_DWORD *)&v120[8] = _LSDatabaseCreateStringForCFString(v10, v55, 0);
  *(_DWORD *)&v120[12] = _LSDatabaseCreateStringForCFString(v10, v56, 0);
  if (*(_DWORD *)&v120[8])
  {
    CFTypeID v57 = CFStringGetTypeID();
    CFStringRef v58 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v9, (const void *)*MEMORY[0x1E4F1CFF8]);
    CFStringRef v59 = v58;
    if (v58 && CFGetTypeID(v58) == v57)
    {
      unsigned int v60 = v116[2];
      CFIndex v61 = CFStringGetLength(v59);
      if (v61 > CFStringGetLength(@"com.apple."))
      {
        v132.length = CFStringGetLength(@"com.apple.");
        v132.locatioCFIndex n = 0;
        if (CFStringCompareWithOptions(v59, @"com.apple.", v132, 1uLL) == kCFCompareEqualTo)
        {
          unsigned int v62 = v60 | 4;
LABEL_63:
          _OWORD v116[2] = v62;
          goto LABEL_64;
        }
      }
    }
    else
    {
      unsigned int v60 = v116[2];
    }
    unsigned int v62 = v60 & 0xFFFFFFFB;
    goto LABEL_63;
  }
LABEL_64:
  *(void *)&v120[16] = 0;
  CFTypeID v63 = CFDictionaryGetTypeID();
  CFDictionaryRef v64 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)v9, @"UTTypeTagSpecification");
  CFDictionaryRef v65 = v64;
  if (v64 && CFGetTypeID(v64) == v63)
  {
    char v66 = 0;
    __int16 v101 = &v120[16];
    CFDictionaryRef v102 = v65;
    uint64_t v67 = 1;
    id v103 = v9;
    do
    {
      uint64_t v68 = (uint64_t)&v10->schema + 104 * v67;
      unsigned int v69 = *(_DWORD *)(v68 + 216);
      int v70 = *(unsigned __int8 *)(v68 + 220);
      CFBooleanRef v71 = (const void *)_CSStringCopyCFString();
      if (v71)
      {
        CFTypeID v72 = (void *)CFDictionaryGetValue(v65, v71);
        id v73 = v72;
        if (v72)
        {
          CFTypeID v74 = CFGetTypeID(v72);
          if (v74 == CFStringGetTypeID())
          {
            if (!_LSBindingListBufferAppendNSString(v10, v121, v69, v73, v70 != 0))
            {
LABEL_108:
              CFRelease(v71);
              goto LABEL_109;
            }
            if (v67 == 1) {
              char v66 = 1;
            }
          }
          else
          {
            CFTypeID v75 = CFGetTypeID(v73);
            if (v75 == CFArrayGetTypeID())
            {
              long long v114 = 0u;
              long long v115 = 0u;
              long long v112 = 0u;
              long long v113 = 0u;
              id v76 = v73;
              uint64_t v77 = objc_msgSend(v76, "countByEnumeratingWithState:objects:count:", &v112, v125, 16, v101);
              if (v77)
              {
                uint64_t v78 = *(void *)v113;
                while (2)
                {
                  for (uint64_t j = 0; j != v77; ++j)
                  {
                    if (*(void *)v113 != v78) {
                      objc_enumerationMutation(v76);
                    }
                    if (!_LSBindingListBufferAppendNSString(v10, v121, v69, *(void **)(*((void *)&v112 + 1) + 8 * j), v70 != 0))
                    {

                      goto LABEL_108;
                    }
                    if (v67 == 1) {
                      char v66 = 1;
                    }
                  }
                  uint64_t v77 = [v76 countByEnumeratingWithState:&v112 objects:v125 count:16];
                  if (v77) {
                    continue;
                  }
                  break;
                }
              }

              uint64_t v9 = v103;
              CFDictionaryRef v65 = v102;
            }
          }
        }
        CFRelease(v71);
      }
      ++v67;
    }
    while (v67 != 5);
    uint64_t active = _LSBindingListCreate(v10, v121, v101);
    if (active) {
      goto LABEL_127;
    }
    int v81 = v66 & 1;
  }
  else
  {
    int v81 = 0;
  }
  _LSBindingListBufferReset(v10, (uint64_t)v121);
  CFURLRef v82 = (void *)CFDictionaryGetValue((CFDictionaryRef)v9, @"UTTypeConformsTo");
  CFStringRef v83 = v82;
  if (v82)
  {
    unsigned int bindingClass = v10->schema.bindingMaps[0].bindingClass;
    CFTypeID v85 = CFGetTypeID(v82);
    if (v85 == CFStringGetTypeID())
    {
      if (!_LSBindingListBufferAppendNSString(v10, v121, bindingClass, v83, 1)) {
        goto LABEL_109;
      }
      int v86 = 1;
    }
    else
    {
      CFTypeID v88 = CFGetTypeID(v83);
      if (v88 == CFArrayGetTypeID())
      {
        long long v110 = 0u;
        long long v111 = 0u;
        long long v108 = 0u;
        long long v109 = 0u;
        id v89 = v83;
        uint64_t v90 = [v89 countByEnumeratingWithState:&v108 objects:v124 count:16];
        if (v90)
        {
          uint64_t v91 = v9;
          uint64_t v92 = *(void *)v109;
          while (2)
          {
            for (uint64_t k = 0; k != v90; ++k)
            {
              if (*(void *)v109 != v92) {
                objc_enumerationMutation(v89);
              }
              if (!_LSBindingListBufferAppendNSString(v10, v121, bindingClass, *(void **)(*((void *)&v108 + 1) + 8 * k), 1))
              {

                goto LABEL_109;
              }
            }
            uint64_t v90 = [v89 countByEnumeratingWithState:&v108 objects:v124 count:16];
            if (v90) {
              continue;
            }
            break;
          }
          int v86 = 1;
          uint64_t v9 = v91;
        }
        else
        {
          int v86 = 0;
        }
      }
      else
      {
        int v86 = 0;
      }
    }
    BOOL v87 = v86 != 0;
    if (!v81) {
      goto LABEL_120;
    }
  }
  else
  {
    BOOL v87 = 0;
    if (!v81) {
      goto LABEL_120;
    }
  }
  if ((v116[2] & 4) == 0)
  {
    _LSMakeVersionNumber(13, 1, 0, v123);
    valuePtr[0] = v126;
    valuePtr[1] = v127;
    v128[0] = v123[0];
    v128[1] = v123[1];
    if (_LSVersionNumberCompare(valuePtr, v128) == -1 && !v87)
    {
      CFURLRef v94 = _LSDefaultLog();
      if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
      {
        _LSDatabaseGetNSStringFromString(v10);
        id v95 = (id)objc_claimAutoreleasedReturnValue();
        long long v96 = _LSDatabaseGetNSStringFromString(v10);
        _UTTypeAddWithDeclarationDictionary_cold_1(v95, v96, (uint64_t)valuePtr, v94);
      }

      if (_LSBindingListBufferAppendNSString(v10, v121, v10->schema.bindingMaps[0].bindingClass, @"public.data", 1))
      {
        v116[2] |= 0x400u;
        goto LABEL_120;
      }
LABEL_109:
      uint64_t active = 4294956479;
      goto LABEL_127;
    }
  }
LABEL_120:
  uint64_t active = _LSBindingListCreate(v10, v121, &v120[20]);
  if (!active)
  {
    CFTypeID v97 = CFStringGetTypeID();
    CFStringRef v98 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v9, @"UTTypeReferenceURL");
    CFStringRef v99 = v98;
    if (v98 && CFGetTypeID(v98) == v97) {
      *(_DWORD *)&v120[24] = _LSDatabaseCreateStringForCFString(v10, v99, 0);
    }
    v106[2] = v118;
    v106[3] = v119;
    v107[0] = *(_OWORD *)v120;
    *(_OWORD *)((char *)v107 + 12) = *(_OWORD *)&v120[12];
    v106[0] = *(_OWORD *)v116;
    v106[1] = v117;
    uint64_t active = _UTTypeAdd(v10, (uint64_t)v106, &v122);
    if (!active)
    {
      uint64_t active = _LSBindableActivate(v10, v122);
      if (!active) {
        uint64_t active = _UTUpdateActiveTypeForIdentifier(v10, v116[3]);
      }
    }
  }
LABEL_127:
  if (v104) {
    _DWORD *v104 = v122;
  }
  _LSBindingListBufferReset(v10, (uint64_t)v121);

  return active;
}

void sub_182AC3030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t _UTUpdateActiveTypeForIdentifier(void *a1, int a2)
{
  id v3 = a1;
  uint64_t v29 = 0;
  uint64_t v30 = &v29;
  uint64_t v31 = 0x2020000000;
  int v32 = 0;
  uint64_t v25 = 0;
  CFTypeID v26 = &v25;
  uint64_t v27 = 0x2020000000;
  int v28 = 0;
  uint64_t v21 = 0;
  CFNumberRef v22 = &v21;
  uint64_t v23 = 0x2020000000;
  int v24 = 0;
  uint64_t v17 = 0;
  CFStringRef v18 = &v17;
  uint64_t v19 = 0x2020000000;
  int v20 = 0;
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  long long v16[2] = ___UTUpdateActiveTypeForIdentifier_block_invoke;
  void v16[3] = &unk_1E52316C8;
  void v16[4] = &v17;
  v16[5] = &v25;
  void v16[6] = &v21;
  v16[7] = &v29;
  _UTEnumerateTypesForIdentifier(v3, a2, v16);
  int v4 = *((_DWORD *)v26 + 6);
  if (!v4) {
    goto LABEL_22;
  }
  if (*((_DWORD *)v18 + 6))
  {
    int v5 = *((_DWORD *)v22 + 6);
    if ((v5 & 0x820) == 0)
    {
      *((_DWORD *)v22 + 6) = v5 | 0x800;
      _CSStoreWriteToUnit();
      int v4 = *((_DWORD *)v26 + 6);
    }
  }
  if (v4 == *((_DWORD *)v30 + 6))
  {
LABEL_22:
    uint64_t v9 = 0;
    goto LABEL_23;
  }
  id v6 = v3;
  uint64_t Unit = (_DWORD *)CSStoreGetUnit();
  if (!Unit) {
    goto LABEL_34;
  }
  int v8 = Unit[2];
  if (v8)
  {

LABEL_18:
    if (*((_DWORD *)v30 + 6))
    {
      id v11 = v6;
      long long v12 = (_DWORD *)CSStoreGetUnit();
      if (v12)
      {
        int v13 = v12[2];
        if ((v13 & 1) == 0)
        {
          uint64_t v9 = 0;
          goto LABEL_33;
        }
        unsigned int v34 = v13 & 0xFFFFFFFE;
        if (!v12[20]) {
          goto LABEL_37;
        }
        uint64_t v9 = _LSBindingListDeactivate();
        if (v9) {
          goto LABEL_33;
        }
        long long v12 = (_DWORD *)CSStoreGetUnit();
        if (v12)
        {
LABEL_37:
          if (!v12[21] || (uint64_t v9 = _LSBindingListDeactivate(), !v9))
          {
            id v15 = (void *)MEMORY[0x18530F680]();
            int v33 = 0;
            if (_CSStoreWriteToUnit()) {
              uint64_t v9 = 0;
            }
            else {
              uint64_t v9 = _LSGetOSStatusFromNSError(v33);
            }
          }
          goto LABEL_33;
        }
      }
      goto LABEL_34;
    }
    goto LABEL_22;
  }
  unsigned int v34 = v8 | 1;
  if (Unit[20])
  {
    uint64_t v9 = _LSBindingListActivate();
    if (v9)
    {
LABEL_33:

      goto LABEL_23;
    }
    uint64_t Unit = (_DWORD *)CSStoreGetUnit();
    if (!Unit)
    {
LABEL_34:
      uint64_t v9 = 4294956481;
      goto LABEL_33;
    }
  }
  if (Unit[21])
  {
    uint64_t v9 = _LSBindingListActivate();
    if (v9) {
      goto LABEL_33;
    }
  }
  id v10 = (void *)MEMORY[0x18530F680]();
  int v33 = 0;
  if (_CSStoreWriteToUnit()) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = _LSGetOSStatusFromNSError(v33);
  }

  if (!v9) {
    goto LABEL_18;
  }
LABEL_23:
  _LSSchemaCacheWrite((uint64_t)v3 + 16, &__block_literal_global_81);
  _Block_object_dispose(&v17, 8);
  _Block_object_dispose(&v21, 8);
  _Block_object_dispose(&v25, 8);
  _Block_object_dispose(&v29, 8);

  return v9;
}

void sub_182AC351C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v18 = va_arg(va2, void);
  uint64_t v20 = va_arg(va2, void);
  uint64_t v21 = va_arg(va2, void);
  uint64_t v22 = va_arg(va2, void);

  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va2, 8);
  _Block_object_dispose((const void *)(v11 - 128), 8);

  _Unwind_Resume(a1);
}

uint64_t _UTTypeRemove(void *a1, int a2)
{
  id v3 = a1;
  uint64_t Unit = (long long *)CSStoreGetUnit();
  if (Unit)
  {
    long long v5 = Unit[3];
    long long v11 = Unit[2];
    long long v12 = v5;
    *(_OWORD *)uint64_t v13 = Unit[4];
    *(_OWORD *)&v13[12] = *(long long *)((char *)Unit + 76);
    long long v9 = *Unit;
    *(_OWORD *)id v10 = Unit[1];
    CSMapRemoveValue();
    if (HIDWORD(v9))
    {
      uint64_t active = _LSBindableDeactivate(v3, a2);
      if (BYTE8(v9)) {
        uint64_t active = _UTUpdateActiveTypeForIdentifier(v3, SHIDWORD(v9));
      }
    }
    else
    {
      uint64_t active = 0;
    }
    if (*(_DWORD *)&v13[16])
    {
      uint64_t active = _LSBindingListDeactivate();
      _LSBindingListDestroy();
    }
    if (*(_DWORD *)&v13[20])
    {
      uint64_t active = _LSBindingListDeactivate();
      _LSBindingListDestroy();
    }
    _CSStringRelease();
    LaunchServices::LocalizedString::Remove((LaunchServices::LocalizedString *)v3, (_LSDatabase *)LODWORD(v10[1]));
    for (uint64_t i = 0; i != 32 && *(_DWORD *)((char *)&v10[1] + i + 4); i += 4)
      _CSStringRelease();
    _CSStringRelease();
    _CSStringRelease();
    _CSStringRelease();
    if (*(_DWORD *)&v13[4]) {
      _LSPlistRemove((uint64_t)v3, *(int *)&v13[4]);
    }
    CSStoreFreeUnit();
    -[_LSDatabase setTypeDeclarationsChanged:](v3, 1);
  }
  else
  {
    uint64_t active = 4294957797;
  }

  return active;
}

void sub_182AC37AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _UTTypeSearchConformsToTypes(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  return _UTTypeSearchConformsToTypesCommon(a1, a2, 32, a3, a4, a5);
}

uint64_t _UTTypeComparePriority(void *a1, _DWORD *a2, void *a3, _DWORD *a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v8 = a3;
  if (a2 == a4)
  {
LABEL_36:
    char v11 = 0;
    goto LABEL_37;
  }
  int v9 = a2[2];
  int v10 = a4[2];
  if ((v9 & 0x1000) != 0 && (v10 & 0x1000) == 0) {
    goto LABEL_4;
  }
  if ((v9 & 0x1000) == 0 && (v10 & 0x1000) != 0)
  {
LABEL_7:
    char v11 = 1;
    goto LABEL_37;
  }
  if (((v10 ^ v9) & 0x40) != 0)
  {
    BOOL v16 = (a2[2] & 0x40) == 0;
    goto LABEL_17;
  }
  int v12 = a2[2] & 0x820;
  int v13 = v10 & 0x820;
  if (a2[3] != a4[3]) {
    goto LABEL_23;
  }
  int v14 = a2[2] & 0x10;
  int v15 = v10 & 0x10;
  if (v14 != v15)
  {
    if (!v12 || v14)
    {
      if (!v13 || v15) {
        goto LABEL_11;
      }
      if (v14)
      {
        if (_UTTypeTagsAreSuperset(v7, (uint64_t)a2, (uint64_t)a4)) {
          goto LABEL_7;
        }
        if (!v12) {
          goto LABEL_24;
        }
        goto LABEL_32;
      }
    }
    if (!_UTTypeTagsAreSuperset(v7, (uint64_t)a4, (uint64_t)a2)) {
      goto LABEL_23;
    }
LABEL_4:
    char v11 = -1;
    goto LABEL_37;
  }
LABEL_11:
  if (v14 && !v15) {
    goto LABEL_7;
  }
  if (v15 && !v14) {
    goto LABEL_4;
  }
LABEL_23:
  if ((v12 != 0) != (v13 != 0))
  {
LABEL_24:
    if (v12) {
      char v11 = 1;
    }
    else {
      char v11 = -1;
    }
    goto LABEL_37;
  }
LABEL_32:
  int v17 = a4[2] ^ a2[2];
  if ((v17 & 2) != 0)
  {
    BOOL v16 = (a2[2] & 2) == 0;
    goto LABEL_17;
  }
  if ((v17 & 4) != 0)
  {
    BOOL v16 = (a2[2] & 4) == 0;
LABEL_17:
    if (v16) {
      char v11 = -1;
    }
    else {
      char v11 = 1;
    }
    goto LABEL_37;
  }
  if (a2[5] == a4[5] && (v17 & 0x2000) == 0) {
    goto LABEL_36;
  }
  LaunchServices::BindingEvaluator::BindingEvaluator((LaunchServices::BindingEvaluator *)v26);
  uint64_t v19 = (_LSDatabase *)v7;
  v25.db = v19;
  unsigned int v24 = 0;
  uint64_t UltimateDeclaringBundle = _UTTypeGetUltimateDeclaringBundle(v19, (uint64_t)a2, (int *)&v24);
  unsigned int v23 = 0;
  uint64_t v21 = _UTTypeGetUltimateDeclaringBundle(v8, (uint64_t)a4, (int *)&v23);
  if (UltimateDeclaringBundle && v21)
  {
    char v11 = LaunchServices::BindingEvaluator::compareBundles((LaunchServices::BindingEvaluator *)v26, &v25, v24, (LSBundleData *)UltimateDeclaringBundle, v23, (LSBundleData *)v21);

    LaunchServices::BindingEvaluator::~BindingEvaluator((LaunchServices::BindingEvaluator *)v26);
    goto LABEL_37;
  }
  char v11 = UltimateDeclaringBundle ? 1 : -1;
  BOOL v22 = (UltimateDeclaringBundle | v21) != 0;

  LaunchServices::BindingEvaluator::~BindingEvaluator((LaunchServices::BindingEvaluator *)v26);
  if (!v22) {
    goto LABEL_36;
  }
LABEL_37:

  return v11;
}

void sub_182AC3A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);

  LaunchServices::BindingEvaluator::~BindingEvaluator((LaunchServices::BindingEvaluator *)va);
  _Unwind_Resume(a1);
}

BOOL _UTTypeTagsAreSuperset(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = a1;
  id v6 = v5;
  v17[0] = 0;
  v17[1] = v17;
  v17[2] = 0x5812000000;
  void v17[3] = __Block_byref_object_copy__54;
  memset(&v17[5], 0, 40);
  v17[4] = __Block_byref_object_dispose__54;
  int v18 = 1065353216;
  uint64_t v7 = *(unsigned int *)(a2 + 80);
  if (v7)
  {
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    long long v16[2] = ___UTTypeTagsAreSuperset_block_invoke;
    void v16[3] = &unk_1E522F188;
    void v16[4] = v17;
    _LSBindingListEnumerate(v5, v7, v16);
  }
  uint64_t v12 = 0;
  int v13 = &v12;
  uint64_t v14 = 0x2020000000;
  BOOL v8 = 1;
  char v15 = 1;
  uint64_t v9 = *(unsigned int *)(a3 + 80);
  if (v9)
  {
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    v11[2] = ___UTTypeTagsAreSuperset_block_invoke_2;
    v11[3] = &unk_1E52317E0;
    void v11[4] = v17;
    v11[5] = &v12;
    _LSBindingListEnumerate(v6, v9, v11);
    BOOL v8 = *((unsigned char *)v13 + 24) != 0;
  }
  _Block_object_dispose(&v12, 8);
  _Block_object_dispose(v17, 8);
  std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>>>::~__hash_table((uint64_t)&v17[6]);

  return v8;
}

void sub_182AC3C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,BOOL>>>>::~__hash_table(v8);

  _Unwind_Resume(a1);
}

uint64_t _UTTypeGetUltimateDeclaringBundle(void *a1, uint64_t a2, int *a3)
{
  id v5 = a1;
  id v6 = v5;
  uint64_t v7 = (int *)(a2 + 20);
  if ((*(unsigned char *)(a2 + 9) & 0x20) != 0) {
    uint64_t v7 = (int *)(_LSGetPlugin((uint64_t)v5, *v7) + 224);
  }
  int v8 = *v7;
  if (!*v7)
  {
    uint64_t v9 = 0;
    if (!a3) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v9 = _LSBundleGet(v6, *v7);
  if (a3) {
LABEL_5:
  }
    *a3 = v8;
LABEL_6:

  return v9;
}

void sub_182AC3CE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL _UTTypeHasIcon(uint64_t a1)
{
  return *(_DWORD *)(a1 + 28) != 0;
}

uint64_t _UTGetActiveTypeWithIconForNSStringIdentifier(void *a1, void *a2, _DWORD *a3)
{
  id v5 = a1;
  id v6 = a2;
  uint64_t v19 = 0;
  uint64_t v20 = &v19;
  uint64_t v21 = 0x2020000000;
  int v22 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = &v15;
  uint64_t v17 = 0x2020000000;
  uint64_t active = 0;
  uint64_t active = _UTGetActiveTypeForCFStringIdentifier(v5, v6, &v22);
  uint64_t v7 = v16[3];
  if (v7 && !*(_DWORD *)(v7 + 28))
  {
    uint64_t v8 = _UTTypeSearchConformsToTypesCommon((uint64_t)v5, *((_DWORD *)v20 + 6), 32, (uint64_t)typeHasIconFile, 0, (_DWORD *)v20 + 6);
    void v16[3] = v8;
  }
  else if (UTTypeIsDynamic(v6))
  {
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    v11[2] = ___UTGetActiveTypeWithIconForNSStringIdentifier_block_invoke;
    v11[3] = &unk_1E52316A0;
    uint64_t v13 = &v15;
    id v12 = v5;
    uint64_t v14 = &v19;
    _UTDynamicEnumerateParentIdentifiers(v6, (uint64_t)v11);
  }
  uint64_t v9 = v16[3];
  if (v9 && !*(_DWORD *)(v9 + 28))
  {
    uint64_t v9 = 0;
    void v16[3] = 0;
  }
  else if (a3)
  {
    *a3 = *((_DWORD *)v20 + 6);
  }
  _Block_object_dispose(&v15, 8);
  _Block_object_dispose(&v19, 8);

  return v9;
}

void sub_182AC3E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 64), 8);

  _Unwind_Resume(a1);
}

BOOL typeHasIconFile(uint64_t a1)
{
  return *(_DWORD *)(*(void *)(a1 + 24) + 28) != 0;
}

void sub_182AC3FD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t _UTTypeGetTypeApplication(_LSDatabase *a1)
{
  return _UTTypeGetCachedType(a1, @"com.apple.application", (unsigned int *)a1->schema._cache + 70);
}

uint64_t _UTTypeGetTypeUnixExecutable(_LSDatabase *a1)
{
  return _UTTypeGetCachedType(a1, @"public.unix-executable", (unsigned int *)a1->schema._cache + 71);
}

uint64_t _UTTypeGetTypeLocalizableNameBundle(_LSDatabase *a1)
{
  return _UTTypeGetCachedType(a1, @"com.apple.localizable-name-bundle", (unsigned int *)a1->schema._cache + 73);
}

uint64_t _UTTypeGetTypeResolvable(_LSDatabase *a1)
{
  return _UTTypeGetCachedType(a1, @"com.apple.resolvable", (unsigned int *)a1->schema._cache + 78);
}

uint64_t _UTTypeGetTypeAVCHDCollection(_LSDatabase *a1)
{
  return _UTTypeGetCachedType(a1, @"public.avchd-collection", (unsigned int *)a1->schema._cache + 80);
}

uint64_t _UTTypeGetTypeVolume(_LSDatabase *a1)
{
  return _UTTypeGetCachedType(a1, @"public.volume", (unsigned int *)a1->schema._cache + 82);
}

uint64_t _UTTypeGetTypeSymbolicLink(_LSDatabase *a1)
{
  return _UTTypeGetCachedType(a1, @"public.symlink", (unsigned int *)a1->schema._cache + 83);
}

uint64_t _UTTypeGetTypeAliasFile(_LSDatabase *a1)
{
  return _UTTypeGetCachedType(a1, @"com.apple.alias-file", (unsigned int *)a1->schema._cache + 84);
}

uint64_t _UTTypeSetGeneration(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result = CSStoreGetUnit();
  if (result) {
    *(_DWORD *)(result + 4) = a3;
  }
  return result;
}

void _UTEnumerateActiveTypes(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v2 = v3;
  _CSStoreEnumerateUnits();
}

void sub_182AC42D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t _UTTypeIsDenylistedForBinding(void *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  unint64_t v1 = a1;
  id v2 = v1;
  if (_UTTypeIsDenylistedForBinding::once != -1)
  {
    dispatch_once(&_UTTypeIsDenylistedForBinding::once, &__block_literal_global_35_0);
    if (v2) {
      goto LABEL_3;
    }
LABEL_15:
    uint64_t v4 = 0;
    goto LABEL_16;
  }
  if (!v1) {
    goto LABEL_15;
  }
LABEL_3:
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v3 = (id)_UTTypeIsDenylistedForBinding::denyListedTypes;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v9;
    while (2)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v3);
        }
        if (UTTypeEqual(v2, *(CFStringRef *)(*((void *)&v8 + 1) + 8 * i)))
        {
          uint64_t v4 = 1;
          goto LABEL_13;
        }
      }
      uint64_t v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
LABEL_13:

LABEL_16:
  return v4;
}

void sub_182AC444C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AC4534(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _UTTypeGetVisualizationFunctions(id (**a1)(LaunchServices::UTIs *this, LSContext *a2)@<X8>)
{
  *a1 = LaunchServices::UTIs::getSummary;
  a1[1] = (id (*)(LaunchServices::UTIs *, LSContext *))LaunchServices::UTIs::display;
  a1[2] = (id (*)(LaunchServices::UTIs *, LSContext *))LaunchServices::UTIs::copyBindingForVisualization;
}

id LaunchServices::UTIs::getSummary(LaunchServices::UTIs *this, LSContext *a2)
{
  uint64_t Unit = (void *)CSStoreGetUnit();
  if (Unit) {
    uint64_t Unit = (void *)_CSStringCopyCFString();
  }

  return Unit;
}

BOOL LaunchServices::UTIs::display(LaunchServices::UTIs *this, LSContext *a2, unsigned int a3, CSStore2::AttributedStringWriter *a4, LaunchServices::DumpWriter *a5)
{
  uint64_t Unit = CSStoreGetUnit();
  uint64_t v8 = Unit;
  if (Unit)
  {
    uint64_t v9 = *(unsigned int *)(Unit + 20);
    if ((*(unsigned char *)(Unit + 9) & 0x20) != 0)
    {
      CSStore2::AttributedStringWriter::link(a4, *(unsigned int *)(*(void *)this + 1604), v9, 0);
      long long v10 = (NSString *)objc_claimAutoreleasedReturnValue();
      CSStore2::AttributedStringWriter::string(a4, &cfstr_Plugin_1.isa, v10);
    }
    else
    {
      CSStore2::AttributedStringWriter::link(a4, *(unsigned int *)(*(void *)this + 20), v9, 0);
      long long v10 = (NSString *)objc_claimAutoreleasedReturnValue();
      CSStore2::AttributedStringWriter::string(a4, &cfstr_Bundle.isa, v10);
    }

    CSStore2::AttributedStringWriter::string(a4, &cfstr_Uti.isa);
    long long v11 = [NSNumber numberWithInt:*(unsigned int *)(v8 + 16)];
    CSStore2::AttributedStringWriter::number(a4, &cfstr_Version.isa, v11);

    CSStore2::AttributedStringWriter::childUnit(a4, &cfstr_Localizeddescr.isa);
    CSStore2::AttributedStringWriter::beginFlags(a4, &cfstr_Flags.isa);
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::missingFlag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::missingFlag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::missingFlag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::endFlags(a4);
    CSStore2::AttributedStringWriter::stringArray(a4, &cfstr_Iconfiles.isa, (const unsigned int *)(v8 + 28));
    CSStore2::AttributedStringWriter::string(a4, &cfstr_Iconname.isa);
    CSStore2::AttributedStringWriter::string(a4, &cfstr_Glyphname.isa);
    CSStore2::AttributedStringWriter::childUnit(a4, &cfstr_Icons.isa);
    CSStore2::AttributedStringWriter::string(a4, &cfstr_Delegate.isa);
    CSStore2::AttributedStringWriter::string(a4, &cfstr_Kextname.isa);
    if (!*(_DWORD *)(v8 + 88)) {
      goto LABEL_12;
    }
    id v12 = (__CFString *)_CSStringCopyCFString();
    if (v12)
    {
      uint64_t v13 = (NSURL *)[objc_alloc(MEMORY[0x1E4F1CB10]) initWithString:v12];
      uint64_t v14 = v12;
      if (v13)
      {
        CSStore2::AttributedStringWriter::link(a4, v13, 0);
        uint64_t v15 = (NSString *)objc_claimAutoreleasedReturnValue();
        CSStore2::AttributedStringWriter::string(a4, &cfstr_ReferenceUrl.isa, v15);

LABEL_11:
LABEL_12:
        CSStore2::AttributedStringWriter::childUnit(a4, &cfstr_ConformsTo.isa);
        CSStore2::AttributedStringWriter::childUnit(a4, &cfstr_Tags.isa);
        return v8 != 0;
      }
    }
    else
    {
      uint64_t v14 = @"-nil-";
    }
    CSStore2::AttributedStringWriter::string(a4, &cfstr_ReferenceUrl.isa, &v14->isa);
    goto LABEL_11;
  }
  return v8 != 0;
}

void sub_182AC4C00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::UTIs::copyBindingForVisualization(LaunchServices::UTIs *this, LSContext *a2)
{
  return 0;
}

void LaunchServices::TypeEvaluator::setSniffIfNeeded(LaunchServices::TypeEvaluator *this, int a2)
{
  if (a2)
  {
    char v2 = a2;
    if ([*(id *)this canIssueIO])
    {
      *((unsigned char *)this + 8) = v2;
    }
    else
    {
      uint64_t v4 = _LSDefaultLog();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)) {
        LaunchServices::TypeEvaluator::setSniffIfNeeded(v4);
      }
    }
  }
}

uint64_t LaunchServices::TypeEvaluator::getTypeUnit(uint64_t a1, void **a2, _DWORD *a3, void *a4)
{
  LaunchServices::TypeEvaluation::runEvaluator(a2, a1, a4, (uint64_t)&v8);
  if (!v11) {
    return 0;
  }
  if (a3) {
    *a3 = v8;
  }
  uint64_t v6 = v9;
  if (!a4
    || v9
    || (_LSMakeNSErrorImpl((void *)*MEMORY[0x1E4F28760], -9499, (uint64_t)"getTypeUnit", 139, 0),
        uint64_t v6 = 0,
        *a4 = (id)objc_claimAutoreleasedReturnValue(),
        v11))
  {
  }
  return v6;
}

void sub_182AC4DEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, char a14)
{
  if (a14) {

  }
  _Unwind_Resume(exception_object);
}

id LaunchServices::TypeEvaluator::getTypeIdentifier(uint64_t a1, void **a2, void *a3)
{
  uint64_t v17 = a2;
  id v18 = 0;
  char v19 = 0;
  id v20 = 0;
  +[_LSDServiceDomain defaultServiceDomain]();
  uint64_t v5 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  uint64_t v6 = (LSContext *)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v17, v5, 0);

  if (!v6)
  {
    if (a3)
    {
      +[_LSDServiceDomain defaultServiceDomain]();
      int v8 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
      uint64_t v9 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v17, v8, 0);

      if (v9) {
        id v10 = 0;
      }
      else {
        id v10 = v20;
      }
      uint64_t v7 = 0;
      *a3 = v10;
      goto LABEL_11;
    }
LABEL_8:
    uint64_t v7 = 0;
    goto LABEL_11;
  }
  LaunchServices::TypeEvaluation::runEvaluator((void **)&v6->db, a1, a3, (uint64_t)v15);
  if (!v16) {
    goto LABEL_8;
  }
  uint64_t v7 = LaunchServices::TypeEvaluator::Result::getTypeIdentifier(v15, v6);
  if (v16) {

  }
LABEL_11:
  id v11 = v7;
  if (v17 && v19) {
    _LSContextDestroy(v17);
  }
  id v12 = v18;
  uint64_t v17 = 0;
  id v18 = 0;

  char v19 = 0;
  id v13 = v20;
  id v20 = 0;

  return v11;
}

void sub_182AC4F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)va);
  _Unwind_Resume(a1);
}

void ___ZN14LaunchServices14TypeEvaluationL15resolveBaseTypeERNS0_5StateEPU15__autoreleasingP7NSError_block_invoke()
{
  v5[4] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = *MEMORY[0x1E4F1C5B0];
  v4[0] = *MEMORY[0x1E4F1C5C8];
  v4[1] = v0;
  v5[0] = @"public.named-pipe";
  v5[1] = @"public.character-special";
  uint64_t v1 = *MEMORY[0x1E4F1C5D8];
  v4[2] = *MEMORY[0x1E4F1C5A8];
  v4[3] = v1;
  v5[2] = @"public.block-special";
  v5[3] = @"public.socket";
  uint64_t v2 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v5 forKeys:v4 count:4];
  id v3 = (void *)LaunchServices::TypeEvaluation::resolveBaseType(LaunchServices::TypeEvaluation::State &,NSError * {__autoreleasing}*)::posixUTIs;
  LaunchServices::TypeEvaluation::resolveBaseType(LaunchServices::TypeEvaluation::State &,NSError * {__autoreleasing}*)::posixUTIs = v2;
}

void ___ZN14LaunchServices14TypeEvaluationL14gnitsFileNamesEv_block_invoke()
{
  uint64_t v0 = [objc_alloc(MEMORY[0x1E4F1CAD0]) initWithArray:&unk_1ECB43BD0];
  uint64_t v1 = (void *)LaunchServices::TypeEvaluation::gnitsFileNames(void)::result;
  LaunchServices::TypeEvaluation::gnitsFileNames(void)::uint64_t result = v0;
}

void sub_182AC5410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,void *a26)
{
  _Unwind_Resume(a1);
}

void sub_182AC553C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AC55C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AC592C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a17);
  _Block_object_dispose(&a21, 8);

  _Unwind_Resume(a1);
}

void sub_182AC5B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a9);
  _Unwind_Resume(a1);
}

void sub_182AC5C48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AC5CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_182AC5DA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AC5E44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AC5EA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AC5F18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AC61E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  *(void *)(v27 + 120) = v26;
  std::vector<LaunchServices::Types::EnumeratedTypeUnitOrDynamicTypeIdentifier>::__destroy_vector::operator()[abi:nn180100]((void ***)(v28 - 96));
  _Block_object_dispose((const void *)(v28 - 144), 8);

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__24(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_182AC6388(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id std::vector<LaunchServices::Types::EnumeratedTypeUnitOrDynamicTypeIdentifier>::push_back[abi:nn180100](void *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(void **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    uint64_t v13 = 2 * v12;
    if (2 * v12 <= v11 + 1) {
      uint64_t v13 = v11 + 1;
    }
    if (v12 >= 0x555555555555555) {
      unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v14 = v13;
    }
    uint64_t v30 = v4;
    if (v14)
    {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<LaunchServices::Types::EnumeratedTypeUnitOrDynamicTypeIdentifier>>(v4, v14);
      uint64_t v17 = v16;
    }
    else
    {
      uint64_t v15 = 0;
      uint64_t v17 = 0;
    }
    id v18 = &v15[24 * v11];
    *(void *)id v18 = *(id *)a2;
    uint64_t v19 = *(void *)(a2 + 8);
    *(void *)(v18 + 13) = *(void *)(a2 + 13);
    *((void *)v18 + 1) = v19;
    uint64_t v21 = (void *)*a1;
    id v20 = (void *)a1[1];
    if (v20 == (void *)*a1)
    {
      int64x2_t v25 = vdupq_n_s64((unint64_t)v20);
      int v22 = v18;
    }
    else
    {
      int v22 = v18;
      do
      {
        uint64_t v23 = *(v20 - 3);
        v20 -= 3;
        void *v20 = 0;
        *(v22 - 3) = v23;
        v22 -= 3;
        uint64_t v24 = v20[1];
        *(void *)((char *)v22 + 13) = *(void *)((char *)v20 + 13);
        v22[1] = v24;
      }
      while (v20 != v21);
      int64x2_t v25 = *(int64x2_t *)a1;
    }
    id v10 = v18 + 24;
    *a1 = v22;
    a1[1] = v18 + 24;
    int64x2_t v28 = v25;
    uint64_t v26 = a1[2];
    a1[2] = &v15[24 * v17];
    uint64_t v29 = v26;
    uint64_t v27 = v25.i64[0];
    id result = (id)std::__split_buffer<LaunchServices::Types::EnumeratedTypeUnitOrDynamicTypeIdentifier>::~__split_buffer((uint64_t)&v27);
  }
  else
  {
    id result = *(id *)a2;
    *uint64_t v7 = result;
    uint64_t v9 = *(void *)(a2 + 13);
    v7[1] = *(void *)(a2 + 8);
    *(void *)((char *)v7 + 13) = v9;
    id v10 = v7 + 3;
  }
  a1[1] = v10;
  return result;
}

void sub_182AC6694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  _Unwind_Resume(a1);
}

void sub_182AC67C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AC6A54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AC6FA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AC72BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AC739C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AC7830(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AC78C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AC7BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a35, 8);
  std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::~__hash_table(a10);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__256(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::__hash_table(a1 + 48, (uint64_t *)(a2 + 48));
}

uint64_t __Block_byref_object_dispose__257(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::~__hash_table(a1 + 48);
}

void sub_182AC7E3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AC7F48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AC7FA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AC808C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AC8188(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<LaunchServices::Types::EnumeratedTypeUnitOrDynamicTypeIdentifier>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unint64_t v6 = (void *)*((void *)v4 - 3);
        v4 -= 24;
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<LaunchServices::Types::EnumeratedTypeUnitOrDynamicTypeIdentifier>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(24 * a2);
}

uint64_t std::__split_buffer<LaunchServices::Types::EnumeratedTypeUnitOrDynamicTypeIdentifier>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 24;
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_182AC8A10(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_182AC8CBC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_182AC8F6C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_182AC9324(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_182AC93F0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_182AC9554(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_182AC95F8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_182AC97E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_182AC98B4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_182ACA788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_182ACA904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_182ACACE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

unint64_t computeEffectiveUnitsForPhase(uint64_t a1, unint64_t a2, void *a3, double a4)
{
  id v7 = a3;
  int v8 = [NSNumber numberWithUnsignedInteger:a1];
  uint64_t v9 = [v7 objectForKeyedSubscript:v8];

  if (a4 > 0.0 && v9)
  {
    id v10 = [NSNumber numberWithUnsignedInteger:a1];
    unint64_t v11 = [v7 objectForKeyedSubscript:v10];
    [v11 doubleValue];
    double v13 = v12;

    double v14 = v13 / a4 * 100.0;
    if ((unint64_t)v14 <= 1) {
      unint64_t v15 = 1;
    }
    else {
      unint64_t v15 = (unint64_t)v14;
    }
    if (v13 <= 0.0) {
      a2 = (unint64_t)v14;
    }
    else {
      a2 = v15;
    }
  }

  return a2;
}

void sub_182ACBD60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
}

void sub_182ACC4F8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_182ACCB74(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_182ACCE28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_sync_exit(v18);
  _Unwind_Resume(a1);
}

void sub_182ACD2A0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_182ACD5B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  objc_sync_exit(v9);
  _Unwind_Resume(a1);
}

void sub_182ACD738(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_182ACD980(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void addPluginDataToNotificationDict(void *a1, void *a2)
{
  id v12 = a1;
  id v3 = a2;
  uint64_t v4 = [v3 uniqueIdentifier];
  unint64_t v5 = [v4 UUIDString];

  if (v5)
  {
    unint64_t v6 = [MEMORY[0x1E4F1CA60] dictionaryWithCapacity:0];
    id v7 = [v3 bundleIdentifier];
    if (v7) {
      [v6 setObject:v7 forKey:*MEMORY[0x1E4F1CFF8]];
    }
    int v8 = [v3 effectiveBundleIdentifier];
    if (v8) {
      [v6 setObject:v8 forKey:@"NSExtensionIdentifier"];
    }
    uint64_t v9 = [v3 bundleVersion];
    if (v9) {
      [v6 setObject:v9 forKey:*MEMORY[0x1E4F1D020]];
    }
    id v10 = [v3 URL];
    unint64_t v11 = [v10 path];

    if (v11) {
      [v6 setObject:v11 forKey:@"_LSBundlePath"];
    }
    if ([v6 count]) {
      [v12 setObject:v6 forKey:v5];
    }
  }
  else
  {
    id v7 = 0;
    int v8 = 0;
    uint64_t v9 = 0;
    unint64_t v11 = 0;
    unint64_t v6 = 0;
  }
}

void sub_182ACF8A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_182AD05E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_182AD0A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__332(uint64_t a1, uint64_t a2)
{
  uint64_t result = MEMORY[0x18530F950](*(void *)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__333(uint64_t a1)
{
}

void sub_182AD2A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_182AD2BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t initMKBDeviceUnlockedSinceBoot()
{
  uint64_t v0 = (void *)MobileKeyBagLibrary_frameworkLibrary;
  if (!MobileKeyBagLibrary_frameworkLibrary)
  {
    uint64_t v0 = dlopen("/System/Library/PrivateFrameworks/MobileKeyBag.framework/MobileKeyBag", 2);
    MobileKeyBagLibrary_frameworkLibrary = (uint64_t)v0;
  }
  uint64_t v1 = (uint64_t (*)())dlsym(v0, "MKBDeviceUnlockedSinceBoot");
  softLinkMKBDeviceUnlockedSinceBoot[0] = v1;

  return v1();
}

SEL __recordSelectorsForPluginNotification_block_invoke()
{
  uint64_t v0 = 0;
  recordSelectorsForPluginNotification_registeredSels = (uint64_t)malloc_type_malloc(0x30uLL, 0x80040B8603338uLL);
  *(void *)(recordSelectorsForPluginNotification_registeredSels + 40) = 0;
  do
  {
    SEL result = sel_registerName(recordSelectorsForPluginNotification_unregisteredSels[v0]);
    *(void *)(recordSelectorsForPluginNotification_registeredSels + v0 * 8) = result;
    ++v0;
  }
  while (v0 != 5);
  return result;
}

void OUTLINED_FUNCTION_4_3(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0xCu);
}

void OUTLINED_FUNCTION_6_1(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 0xCu);
}

uint64_t LSPersonaTypeForPersonaAttributes(void *a1)
{
  id v1 = a1;
  if ([v1 isSystemPersona])
  {
    uint64_t v2 = 3;
  }
  else if ([v1 isPersonalPersona])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEnterprisePersona])
  {
    uint64_t v2 = 2;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

void sub_182AD3B88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AD3C60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AD3D24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AD4064(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AD4454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_182AD4600(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AD4764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_182AD47F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_182AD486C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_182AD49E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182AD4E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_182AD5164(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _AppleIDAuthenticationAddAppleIDWithBlock(uint64_t a1, uint64_t a2, uint64_t a3, NSObject *a4, uint64_t a5)
{
  id v7 = AppleIDGetLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_182959000, v7, OS_LOG_TYPE_DEFAULT, "AddAppleID: This operation is not supported anymore\n", buf, 2u);
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___AppleIDAuthenticationAddAppleIDWithBlock_block_invoke;
  block[3] = &unk_1E5231C78;
  void block[4] = a5;
  dispatch_async(a4, block);
  return 1;
}

uint64_t _AppleIDAuthenticationAddAppleID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v15 = 0;
  uint64_t v16 = &v15;
  uint64_t v17 = 0x2000000000;
  char v18 = 0;
  uint64_t v5 = dispatch_semaphore_create(0);
  if (getAppleIDAuthDispatchQueue(void)::sOnce != -1) {
    dispatch_once(&getAppleIDAuthDispatchQueue(void)::sOnce, &__block_literal_global_87);
  }
  unint64_t v6 = getAppleIDAuthDispatchQueue(void)::sAppleIDAuthDispatchQueue;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 1174405120;
  uint64x2_t v12[2] = ___AppleIDAuthenticationAddAppleID_block_invoke;
  void v12[3] = &unk_1ECB17BF0;
  void v12[4] = &v15;
  v12[5] = a4;
  dispatch_object_t object = v5;
  char v14 = 1;
  dispatch_retain(v5);
  _AppleIDAuthenticationAddAppleIDWithBlock(v7, v8, v9, v6, (uint64_t)v12);
  dispatch_semaphore_wait(v5, 0xFFFFFFFFFFFFFFFFLL);
  if (v14) {
    dispatch_release(object);
  }
  uint64_t v10 = *((unsigned __int8 *)v16 + 24);
  dispatch_release(v5);
  _Block_object_dispose(&v15, 8);
  return v10;
}

void __copy_helper_block_8_48c14_ZTS9Semaphore(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(NSObject **)(a2 + 48);
  *(void *)(a1 + 48) = v2;
  *(unsigned char *)(a1 + 56) = 1;
  dispatch_retain(v2);
}

void __destroy_helper_block_8_48c14_ZTS9Semaphore(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56)) {
    dispatch_release(*(dispatch_object_t *)(a1 + 48));
  }
}

uint64_t _AppleIDAuthenticationForgetAppleIDWithBlock(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4)
{
  unint64_t v6 = AppleIDGetLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_182959000, v6, OS_LOG_TYPE_DEFAULT, "ForgetAppleID: This operation is not supported anymore\n", buf, 2u);
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___AppleIDAuthenticationForgetAppleIDWithBlock_block_invoke;
  block[3] = &unk_1E5231CA0;
  void block[4] = a4;
  dispatch_async(a3, block);
  return 1;
}

uint64_t _AppleIDAuthenticationForgetAppleID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = 0;
  char v14 = &v13;
  uint64_t v15 = 0x2000000000;
  char v16 = 0;
  uint64_t v4 = dispatch_semaphore_create(0);
  if (getAppleIDAuthDispatchQueue(void)::sOnce != -1) {
    dispatch_once(&getAppleIDAuthDispatchQueue(void)::sOnce, &__block_literal_global_87);
  }
  uint64_t v5 = getAppleIDAuthDispatchQueue(void)::sAppleIDAuthDispatchQueue;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 1174405120;
  v10[2] = ___AppleIDAuthenticationForgetAppleID_block_invoke;
  v10[3] = &unk_1ECB17A30;
  void v10[4] = &v13;
  v10[5] = a3;
  dispatch_object_t object = v4;
  char v12 = 1;
  dispatch_retain(v4);
  _AppleIDAuthenticationForgetAppleIDWithBlock(v6, v7, v5, (uint64_t)v10);
  dispatch_semaphore_wait(v4, 0xFFFFFFFFFFFFFFFFLL);
  if (v12) {
    dispatch_release(object);
  }
  uint64_t v8 = *((unsigned __int8 *)v14 + 24);
  dispatch_release(v4);
  _Block_object_dispose(&v13, 8);
  return v8;
}

uint64_t _AppleIDAuthenticationCopyAppleIDsWithBlock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = AppleIDGetLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_182959000, v5, OS_LOG_TYPE_DEFAULT, "CopyAppleIDs: Deferring to sharingd. \n", buf, 2u);
  }
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 0x40000000;
  void v7[2] = ___AppleIDAuthenticationCopyAppleIDsWithBlock_block_invoke;
  v7[3] = &unk_1E5231CC8;
  void v7[4] = a3;
  ((void (*)(uint64_t, uint64_t))softLinkSFAppleIDClientCopyMyAppleID[0])(a2, (uint64_t)v7);
  return 1;
}

uint64_t _AppleIDAuthenticationCopyAppleIDs(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = 0;
  char v12 = &v11;
  uint64_t v13 = 0x2000000000;
  uint64_t v14 = 0;
  id v3 = dispatch_semaphore_create(0);
  if (getAppleIDAuthDispatchQueue(void)::sOnce != -1) {
    dispatch_once(&getAppleIDAuthDispatchQueue(void)::sOnce, &__block_literal_global_87);
  }
  uint64_t v4 = getAppleIDAuthDispatchQueue(void)::sAppleIDAuthDispatchQueue;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 1174405120;
  _OWORD v8[2] = ___AppleIDAuthenticationCopyAppleIDs_block_invoke;
  void v8[3] = &unk_1ECB17A68;
  void v8[4] = &v11;
  v8[5] = a2;
  dispatch_object_t object = v3;
  char v10 = 1;
  dispatch_retain(v3);
  _AppleIDAuthenticationCopyAppleIDsWithBlock(v5, v4, (uint64_t)v8);
  dispatch_semaphore_wait(v3, 0xFFFFFFFFFFFFFFFFLL);
  if (v10) {
    dispatch_release(object);
  }
  uint64_t v6 = v12[3];
  dispatch_release(v3);
  _Block_object_dispose(&v11, 8);
  return v6;
}

uint64_t _AppleIDAuthenticationCopyCertificateInfoWithBlock(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = AppleIDGetLogHandle();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_182959000, v8, OS_LOG_TYPE_DEFAULT, "CopyCertificateInfo: Deferring to sharingd. \n", buf, 2u);
  }
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 0x40000000;
  v10[2] = ___AppleIDAuthenticationCopyCertificateInfoWithBlock_block_invoke;
  v10[3] = &unk_1E5231CF0;
  void v10[4] = a5;
  softLinkSFAppleIDClientCopyCertificateInfo(a1, a4, (uint64_t)v10);
  return 1;
}

uint64_t _AppleIDAuthenticationCopyCertificateInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v15 = 0;
  char v16 = &v15;
  uint64_t v17 = 0x2000000000;
  uint64_t v18 = 0;
  uint64_t v6 = dispatch_semaphore_create(0);
  if (getAppleIDAuthDispatchQueue(void)::sOnce != -1) {
    dispatch_once(&getAppleIDAuthDispatchQueue(void)::sOnce, &__block_literal_global_87);
  }
  uint64_t v7 = getAppleIDAuthDispatchQueue(void)::sAppleIDAuthDispatchQueue;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 1174405120;
  uint64x2_t v12[2] = ___AppleIDAuthenticationCopyCertificateInfo_block_invoke;
  void v12[3] = &unk_1ECB17AA0;
  void v12[4] = &v15;
  v12[5] = a4;
  dispatch_object_t object = v6;
  char v14 = 1;
  dispatch_retain(v6);
  _AppleIDAuthenticationCopyCertificateInfoWithBlock(a1, v8, v9, v7, (uint64_t)v12);
  dispatch_semaphore_wait(v6, 0xFFFFFFFFFFFFFFFFLL);
  if (v14) {
    dispatch_release(object);
  }
  uint64_t v10 = v16[3];
  dispatch_release(v6);
  _Block_object_dispose(&v15, 8);
  return v10;
}

uint64_t _AppleIDAuthenticationCopyMyInfoWithBlock(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4)
{
  uint64_t v6 = AppleIDGetLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_182959000, v6, OS_LOG_TYPE_DEFAULT, "CopyMyInfo: this operation is not supported anymore.\n", buf, 2u);
  }
  uint64_t result = 0;
  if (a3)
  {
    if (a4)
    {
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = ___AppleIDAuthenticationCopyMyInfoWithBlock_block_invoke;
      block[3] = &unk_1E5231D18;
      void block[4] = a4;
      dispatch_async(a3, block);
      return 1;
    }
  }
  return result;
}

uint64_t _AppleIDAuthenticationCopyMyInfo(uint64_t a1, uint64_t a2, CFErrorRef *a3)
{
  uint64_t v13 = 0;
  char v14 = &v13;
  uint64_t v15 = 0x2000000000;
  uint64_t v16 = 0;
  uint64_t v4 = dispatch_semaphore_create(0);
  if (getAppleIDAuthDispatchQueue(void)::sOnce != -1) {
    dispatch_once(&getAppleIDAuthDispatchQueue(void)::sOnce, &__block_literal_global_87);
  }
  uint64_t v5 = getAppleIDAuthDispatchQueue(void)::sAppleIDAuthDispatchQueue;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 1174405120;
  v10[2] = ___AppleIDAuthenticationCopyMyInfo_block_invoke;
  v10[3] = &unk_1ECB17AD8;
  void v10[4] = &v13;
  void v10[5] = a3;
  dispatch_object_t object = v4;
  char v12 = 1;
  dispatch_retain(v4);
  if (_AppleIDAuthenticationCopyMyInfoWithBlock(v6, v7, v5, (uint64_t)v10))
  {
    dispatch_semaphore_wait(v4, 0xFFFFFFFFFFFFFFFFLL);
  }
  else if (a3)
  {
    *a3 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], @"CSIdentityErrorDomain", -99, 0);
  }
  if (v12) {
    dispatch_release(object);
  }
  uint64_t v8 = v14[3];
  dispatch_release(v4);
  _Block_object_dispose(&v13, 8);
  return v8;
}

uint64_t _AppleIDAuthenticationFindPersonWithBlock(const __CFDictionary *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = AppleIDGetLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_182959000, v7, OS_LOG_TYPE_DEFAULT, "FindPerson: Deferring to sharingd.", buf, 2u);
  }
  if (!a1)
  {
    CFArrayGetTypeID();
    CFArrayGetTypeID();
LABEL_24:
    CFStringRef ValueAtIndex = 0;
    goto LABEL_25;
  }
  CFStringRef Value = CFDictionaryGetValue(a1, @"email");
  CFTypeID TypeID = CFArrayGetTypeID();
  if (Value && TypeID && CFGetTypeID(Value) != TypeID) {
    CFStringRef Value = 0;
  }
  uint64_t v10 = CFDictionaryGetValue(a1, @"phone");
  CFTypeID v11 = CFArrayGetTypeID();
  if (v10 && v11 && CFGetTypeID(v10) != v11) {
    uint64_t v10 = 0;
  }
  if (!Value
    || !CFArrayGetCount((CFArrayRef)Value)
    || (ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)Value, 0), CFTypeID v13 = CFStringGetTypeID(), !ValueAtIndex)
    || v13 && CFGetTypeID(ValueAtIndex) != v13)
  {
    if (!v10) {
      goto LABEL_24;
    }
    if (!CFArrayGetCount((CFArrayRef)v10)) {
      goto LABEL_24;
    }
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v10, 0);
    CFTypeID v14 = CFStringGetTypeID();
    if (ValueAtIndex)
    {
      if (v14 && CFGetTypeID(ValueAtIndex) != v14) {
        goto LABEL_24;
      }
    }
  }
LABEL_25:
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 0x40000000;
  long long v16[2] = ___AppleIDAuthenticationFindPersonWithBlock_block_invoke;
  void v16[3] = &unk_1E5231D40;
  void v16[4] = a4;
  ((void (*)(uint64_t, uint64_t, uint64_t))softLinkSFAppleIDClientCopyPersonInfo[0])((uint64_t)ValueAtIndex, a3, (uint64_t)v16);
  return 1;
}

void _AppleIDAuthenticationFindPerson()
{
  v0[0] = 0;
  v0[1] = v0;
  v0[2] = 0x2000000000;
  v0[3] = 0;
  operator new();
}

uint64_t _AppleIDCopySecIdentityForAppleIDAccount(uint64_t a1, uint64_t a2, CFErrorRef *a3)
{
  uint64_t v18 = 0;
  uint64_t v19 = &v18;
  uint64_t v20 = 0x2000000000;
  int v21 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = &v14;
  uint64_t v16 = 0x2000000000;
  uint64_t v17 = 0;
  uint64_t v5 = dispatch_semaphore_create(0);
  uint64_t v6 = AppleIDGetLogHandle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v11[0]) = 0;
    _os_log_impl(&dword_182959000, v6, OS_LOG_TYPE_DEFAULT, "CopySecIdentity: Deferring to sharingd. \n", (uint8_t *)v11, 2u);
  }
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0, 0);
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1174405120;
  v11[2] = ___ZL41__AppleIDCopySecIdentityForAppleIDAccountPK10__CFStringPK14__CFDictionaryPP9__CFError_block_invoke;
  v11[3] = &unk_1ECB17BB8;
  void v11[4] = &v14;
  v11[5] = &v18;
  dispatch_object_t object = v5;
  char v13 = 1;
  dispatch_retain(v5);
  ((void (*)(uint64_t, uint64_t, uint64_t))softLinkSFAppleIDClientCopyIdentity[0])(a1, (uint64_t)global_queue, (uint64_t)v11);
  dispatch_semaphore_wait(v5, 0xFFFFFFFFFFFFFFFFLL);
  if (a3)
  {
    int v8 = *((_DWORD *)v19 + 6);
    if (v8) {
      *a3 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CFErrorDomain)*MEMORY[0x1E4F1D158], v8, 0);
    }
  }
  uint64_t v9 = v15[3];
  if (v13) {
    dispatch_release(object);
  }
  dispatch_release(v5);
  _Block_object_dispose(&v14, 8);
  _Block_object_dispose(&v18, 8);
  return v9;
}

CFStringRef _AppleIDCopyDSIDForCertificate(uint64_t a1, CFErrorRef *a2)
{
  uint64_t v4 = AppleIDGetLogHandle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v22 = 0;
    _os_log_impl(&dword_182959000, v4, OS_LOG_TYPE_DEFAULT, "AppleIDCopyDSIDForCertificate\n", v22, 2u);
  }
  if (a1)
  {
    CFArrayRef v5 = (const __CFArray *)SecCertificateCopyCommonNames();
    CFArrayRef v6 = v5;
    if (v5
      && CFArrayGetCount(v5) >= 1
      && (CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v6, 0), TypeID = CFStringGetTypeID(), ValueAtIndex)
      && (!TypeID || CFGetTypeID(ValueAtIndex) == TypeID)
      && (CFStringRef v9 = (const __CFString *)CFRetain(ValueAtIndex)) != 0)
    {
      CFStringRef v10 = v9;
      CFIndex Length = CFStringGetLength(v9);
      uint64_t v12 = 0;
      char v13 = 1;
      while (1)
      {
        char v14 = v13;
        CFStringRef v15 = off_1E5231D88[v12];
        if (CFStringHasPrefix(v10, v15)) {
          break;
        }
        char v13 = 0;
        uint64_t v12 = 1;
        if ((v14 & 1) == 0) {
          goto LABEL_35;
        }
      }
      CFIndex v19 = CFStringGetLength(v15);
      if (v19 < Length)
      {
        CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFIndex v21 = v19 + 1;
        v23.length = CFStringGetLength(v10) + ~v19;
        v23.locatioCFIndex n = v21;
        CFStringRef v17 = CFStringCreateWithSubstring(v20, v10, v23);
        char v13 = 0;
        goto LABEL_36;
      }
      char v13 = 0;
LABEL_35:
      CFStringRef v17 = 0;
LABEL_36:
      CFErrorRef v16 = 0;
      if (!a2)
      {
LABEL_18:
        if (v6) {
          CFRelease(v6);
        }
        if ((v13 & 1) == 0) {
          CFRelease(v10);
        }
        if (!a2) {
          goto LABEL_28;
        }
        goto LABEL_26;
      }
    }
    else
    {
      CFErrorRef v16 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CFErrorDomain)*MEMORY[0x1E4F1D158], -1, 0);
      CFStringRef v10 = 0;
      CFStringRef v17 = 0;
      char v13 = 1;
      if (!a2) {
        goto LABEL_18;
      }
    }
    if (!v17 && !v16) {
      CFErrorRef v16 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], @"CSIdentityErrorDomain", -10, 0);
    }
    goto LABEL_18;
  }
  if (!a2) {
    return 0;
  }
  CFErrorRef v16 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], @"CSIdentityErrorDomain", -99, 0);
  CFStringRef v17 = 0;
LABEL_26:
  if (!v17)
  {
    *a2 = v16;
    return v17;
  }
LABEL_28:
  if (v16) {
    CFRelease(v16);
  }
  return v17;
}

uint64_t _AppleIDAuthenticatePasswordWithBlock(uint64_t a1, uint64_t a2, uint64_t a3, NSObject *a4, uint64_t a5)
{
  uint64_t v7 = AppleIDGetLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_182959000, v7, OS_LOG_TYPE_DEFAULT, "AuthenticatePasswordWithBlock: This operation is not supported anymore\n", buf, 2u);
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___AppleIDAuthenticatePasswordWithBlock_block_invoke;
  block[3] = &unk_1E5231DA0;
  void block[4] = a5;
  dispatch_async(a4, block);
  return 1;
}

uint64_t _AppleIDAuthenticatePassword(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v15 = 0;
  CFErrorRef v16 = &v15;
  uint64_t v17 = 0x2000000000;
  char v18 = 0;
  CFArrayRef v5 = dispatch_semaphore_create(0);
  if (getAppleIDAuthDispatchQueue(void)::sOnce != -1) {
    dispatch_once(&getAppleIDAuthDispatchQueue(void)::sOnce, &__block_literal_global_87);
  }
  CFArrayRef v6 = getAppleIDAuthDispatchQueue(void)::sAppleIDAuthDispatchQueue;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 1174405120;
  uint64x2_t v12[2] = ___AppleIDAuthenticatePassword_block_invoke;
  void v12[3] = &unk_1ECB17B10;
  void v12[4] = &v15;
  v12[5] = a4;
  dispatch_object_t object = v5;
  char v14 = 1;
  dispatch_retain(v5);
  _AppleIDAuthenticatePasswordWithBlock(v7, v8, v9, v6, (uint64_t)v12);
  dispatch_semaphore_wait(v5, 0xFFFFFFFFFFFFFFFFLL);
  if (v14) {
    dispatch_release(object);
  }
  uint64_t v10 = *((unsigned __int8 *)v16 + 24);
  dispatch_release(v5);
  _Block_object_dispose(&v15, 8);
  return v10;
}

uint64_t _AppleIDAuthenticationCopyStatusWithBlock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFArrayRef v5 = AppleIDGetLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_182959000, v5, OS_LOG_TYPE_DEFAULT, "CopyStatus: Deferring to sharingd. \n", buf, 2u);
  }
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 0x40000000;
  void v7[2] = ___AppleIDAuthenticationCopyStatusWithBlock_block_invoke;
  v7[3] = &unk_1E5231DC8;
  void v7[4] = a3;
  ((void (*)(uint64_t, uint64_t))softLinkSFAppleIDClientCopyMyAccountInfo[0])(a2, (uint64_t)v7);
  return 1;
}

uint64_t _AppleIDAuthenticationCopyStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = 0;
  char v14 = &v13;
  uint64_t v15 = 0x2000000000;
  char v16 = 0;
  CFArrayRef v5 = dispatch_semaphore_create(0);
  if (getAppleIDAuthDispatchQueue(void)::sOnce != -1) {
    dispatch_once(&getAppleIDAuthDispatchQueue(void)::sOnce, &__block_literal_global_87);
  }
  uint64_t v6 = getAppleIDAuthDispatchQueue(void)::sAppleIDAuthDispatchQueue;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 1174405120;
  v10[2] = ___AppleIDAuthenticationCopyStatus_block_invoke;
  v10[3] = &unk_1ECB17B48;
  void v10[4] = &v13;
  void v10[5] = a2;
  void v10[6] = a3;
  dispatch_object_t object = v5;
  char v12 = 1;
  dispatch_retain(v5);
  _AppleIDAuthenticationCopyStatusWithBlock(v7, v6, (uint64_t)v10);
  dispatch_semaphore_wait(v5, 0xFFFFFFFFFFFFFFFFLL);
  if (v12) {
    dispatch_release(object);
  }
  uint64_t v8 = *((unsigned __int8 *)v14 + 24);
  dispatch_release(v5);
  _Block_object_dispose(&v13, 8);
  return v8;
}

void __copy_helper_block_8_56c14_ZTS9Semaphore(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(NSObject **)(a2 + 56);
  *(void *)(a1 + 56) = v2;
  *(unsigned char *)(a1 + 64) = 1;
  dispatch_retain(v2);
}

void __destroy_helper_block_8_56c14_ZTS9Semaphore(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64)) {
    dispatch_release(*(dispatch_object_t *)(a1 + 56));
  }
}

uint64_t _AppleIDUpdateLinkedIdentityProvisioningWithBlock(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4)
{
  uint64_t v7 = AppleIDGetLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_182959000, v7, OS_LOG_TYPE_DEFAULT, "UpdateLinkedIdentityProvisioning: Executing from framework\n", buf, 2u);
  }
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 0x40000000;
  _OWORD v9[2] = ___AppleIDUpdateLinkedIdentityProvisioningWithBlock_block_invoke;
  void v9[3] = &unk_1E5231DF0;
  void v9[4] = a4;
  v9[5] = a1;
  dispatch_async(a3, v9);
  return 1;
}

uint64_t _AppleIDUpdateLinkedIdentityProvisioning(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = 0;
  char v14 = &v13;
  uint64_t v15 = 0x2000000000;
  char v16 = 0;
  CFArrayRef v5 = dispatch_semaphore_create(0);
  if (getAppleIDAuthDispatchQueue(void)::sOnce != -1) {
    dispatch_once(&getAppleIDAuthDispatchQueue(void)::sOnce, &__block_literal_global_87);
  }
  uint64_t v6 = getAppleIDAuthDispatchQueue(void)::sAppleIDAuthDispatchQueue;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 1174405120;
  v10[2] = ___AppleIDUpdateLinkedIdentityProvisioning_block_invoke;
  v10[3] = &unk_1ECB17B80;
  void v10[4] = &v13;
  void v10[5] = a3;
  dispatch_object_t object = v5;
  char v12 = 1;
  dispatch_retain(v5);
  _AppleIDUpdateLinkedIdentityProvisioningWithBlock(a1, v7, v6, (uint64_t)v10);
  dispatch_semaphore_wait(v5, 0xFFFFFFFFFFFFFFFFLL);
  if (v12) {
    dispatch_release(object);
  }
  uint64_t v8 = *((unsigned __int8 *)v14 + 24);
  dispatch_release(v5);
  _Block_object_dispose(&v13, 8);
  return v8;
}

dispatch_queue_t ___ZL27getAppleIDAuthDispatchQueuev_block_invoke()
{
  dispatch_queue_t result = dispatch_queue_create("AppleIDAuthDispatchQueue", 0);
  getAppleIDAuthDispatchQueue(void)::sAppleIDAuthDispatchQueue = (uint64_t)result;
  return result;
}

uint64_t initSFAppleIDClientCopyMyAppleID(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)SharingLibrary(void)::frameworkLibrary;
  if (!SharingLibrary(void)::frameworkLibrary)
  {
    uint64_t v4 = dlopen("/System/Library/PrivateFrameworks/Sharing.framework/Sharing", 2);
    SharingLibrary(void)::frameworkLibrary = (uint64_t)v4;
  }
  CFArrayRef v5 = (uint64_t (*)())dlsym(v4, "SFAppleIDClientCopyMyAppleID");
  softLinkSFAppleIDClientCopyMyAppleID[0] = v5;

  return ((uint64_t (*)(uint64_t, uint64_t))v5)(a1, a2);
}

uint64_t initSFAppleIDClientCopyCertificateInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)SharingLibrary(void)::frameworkLibrary;
  if (!SharingLibrary(void)::frameworkLibrary)
  {
    uint64_t v6 = dlopen("/System/Library/PrivateFrameworks/Sharing.framework/Sharing", 2);
    SharingLibrary(void)::frameworkLibrary = (uint64_t)v6;
  }
  uint64_t v7 = (uint64_t (*)())dlsym(v6, "SFAppleIDClientCopyCertificateInfo");
  softLinkSFAppleIDClientCopyCertificateInfo = v7;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, a3);
}

uint64_t initSFAppleIDClientCopyPersonInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)SharingLibrary(void)::frameworkLibrary;
  if (!SharingLibrary(void)::frameworkLibrary)
  {
    uint64_t v6 = dlopen("/System/Library/PrivateFrameworks/Sharing.framework/Sharing", 2);
    SharingLibrary(void)::frameworkLibrary = (uint64_t)v6;
  }
  uint64_t v7 = (uint64_t (*)())dlsym(v6, "SFAppleIDClientCopyPersonInfo");
  softLinkSFAppleIDClientCopyPersonInfo[0] = v7;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, a3);
}

uint64_t ___ZL41handleSFAppleIDClientCopyPersonInfoResultPK9__CFArrayiU13block_pointerFvS1_hP9__CFErrorE_block_invoke(uint64_t a1, const __CFDictionary *a2)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFArrayRef v5 = Mutable;
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (a2 && (!TypeID || CFGetTypeID(a2) == TypeID))
    {
      uint64_t v7 = (const void *)getkSFAppleIDClientPersonInfoAccountIdentifierCFKey[0]();
      if (v7)
      {
        CFStringRef Value = CFDictionaryGetValue(a2, v7);
        CFTypeID v9 = CFStringGetTypeID();
        if (Value && (!v9 || CFGetTypeID(Value) == v9)) {
          CFDictionaryAddValue(v5, @"certCN", Value);
        }
      }
      else
      {
        CFStringGetTypeID();
      }
      uint64_t v10 = (const void *)getkSFAppleIDClientPersonInfoMatchedValueCFKey[0]();
      if (v10)
      {
        CFTypeID v11 = CFDictionaryGetValue(a2, v10);
        CFTypeID v12 = CFStringGetTypeID();
        if (v11 && (!v12 || CFGetTypeID(v11) == v12)) {
          CFDictionaryAddValue(v5, @"value", v11);
        }
      }
      else
      {
        CFStringGetTypeID();
      }
    }
    if (CFDictionaryGetCount(v5)) {
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), v5);
    }
    CFRelease(v5);
  }
  return 1;
}

uint64_t initkSFAppleIDClientPersonInfoAccountIdentifierCFKey(void)
{
  uint64_t v0 = (void *)SharingLibrary(void)::frameworkLibrary;
  if (!SharingLibrary(void)::frameworkLibrary)
  {
    uint64_t v0 = dlopen("/System/Library/PrivateFrameworks/Sharing.framework/Sharing", 2);
    SharingLibrary(void)::frameworkLibrary = (uint64_t)v0;
  }
  uint64_t result = *(void *)dlsym(v0, "kSFAppleIDClientPersonInfoAccountIdentifierCFKey");
  constantkSFAppleIDClientPersonInfoAccountIdentifierCFKey = result;
  getkSFAppleIDClientPersonInfoAccountIdentifierCFKey[0] = kSFAppleIDClientPersonInfoAccountIdentifierCFKeyFunction;
  return result;
}

uint64_t kSFAppleIDClientPersonInfoAccountIdentifierCFKeyFunction(void)
{
  return constantkSFAppleIDClientPersonInfoAccountIdentifierCFKey;
}

uint64_t initkSFAppleIDClientPersonInfoMatchedValueCFKey(void)
{
  uint64_t v0 = (void *)SharingLibrary(void)::frameworkLibrary;
  if (!SharingLibrary(void)::frameworkLibrary)
  {
    uint64_t v0 = dlopen("/System/Library/PrivateFrameworks/Sharing.framework/Sharing", 2);
    SharingLibrary(void)::frameworkLibrary = (uint64_t)v0;
  }
  uint64_t result = *(void *)dlsym(v0, "kSFAppleIDClientPersonInfoMatchedValueCFKey");
  constantkSFAppleIDClientPersonInfoMatchedValueCFKey = result;
  getkSFAppleIDClientPersonInfoMatchedValueCFKey[0] = kSFAppleIDClientPersonInfoMatchedValueCFKeyFunction;
  return result;
}

uint64_t kSFAppleIDClientPersonInfoMatchedValueCFKeyFunction(void)
{
  return constantkSFAppleIDClientPersonInfoMatchedValueCFKey;
}

intptr_t ___ZL41__AppleIDCopySecIdentityForAppleIDAccountPK10__CFStringPK14__CFDictionaryPP9__CFError_block_invoke(void *a1, uint64_t a2, int a3)
{
  *(void *)(*(void *)(a1[4] + 8) + 24) = a2;
  uint64_t v4 = a1[5];
  id v3 = a1[6];
  *(_DWORD *)(*(void *)(v4 + 8) + 24) = a3;
  return dispatch_semaphore_signal(v3);
}

uint64_t initSFAppleIDClientCopyIdentity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)SharingLibrary(void)::frameworkLibrary;
  if (!SharingLibrary(void)::frameworkLibrary)
  {
    uint64_t v6 = dlopen("/System/Library/PrivateFrameworks/Sharing.framework/Sharing", 2);
    SharingLibrary(void)::frameworkLibrary = (uint64_t)v6;
  }
  uint64_t v7 = (uint64_t (*)())dlsym(v6, "SFAppleIDClientCopyIdentity");
  softLinkSFAppleIDClientCopyIdentity[0] = v7;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, a3);
}

uint64_t initSFAppleIDClientCopyMyAccountInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)SharingLibrary(void)::frameworkLibrary;
  if (!SharingLibrary(void)::frameworkLibrary)
  {
    uint64_t v4 = dlopen("/System/Library/PrivateFrameworks/Sharing.framework/Sharing", 2);
    SharingLibrary(void)::frameworkLibrary = (uint64_t)v4;
  }
  CFArrayRef v5 = (uint64_t (*)())dlsym(v4, "SFAppleIDClientCopyMyAccountInfo");
  softLinkSFAppleIDClientCopyMyAccountInfo[0] = v5;

  return ((uint64_t (*)(uint64_t, uint64_t))v5)(a1, a2);
}

uint64_t initkSFAppleIDClientAccountInfoAppleIDCFKey(void)
{
  uint64_t v0 = (void *)SharingLibrary(void)::frameworkLibrary;
  if (!SharingLibrary(void)::frameworkLibrary)
  {
    uint64_t v0 = dlopen("/System/Library/PrivateFrameworks/Sharing.framework/Sharing", 2);
    SharingLibrary(void)::frameworkLibrary = (uint64_t)v0;
  }
  uint64_t result = *(void *)dlsym(v0, "kSFAppleIDClientAccountInfoAppleIDCFKey");
  constantkSFAppleIDClientAccountInfoAppleIDCFKey = result;
  getkSFAppleIDClientAccountInfoAppleIDCFKey = kSFAppleIDClientAccountInfoAppleIDCFKeyFunction;
  return result;
}

uint64_t kSFAppleIDClientAccountInfoAppleIDCFKeyFunction(void)
{
  return constantkSFAppleIDClientAccountInfoAppleIDCFKey;
}

uint64_t AppleIDGetLogHandle()
{
  if (AppleIDGetLogHandle::sOnce != -1) {
    dispatch_once(&AppleIDGetLogHandle::sOnce, &__block_literal_global_88);
  }
  return AppleIDGetLogHandle::sHandle;
}

void __AppleIDGetLogHandle_block_invoke()
{
  AppleIDGetLogHandle::sHandle = (uint64_t)os_log_create("com.apple.AppleIDAuth", "core");
  if (!AppleIDGetLogHandle::sHandle)
  {
    uint64_t v0 = MEMORY[0x1E4F14500];
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)id v1 = 0;
      _os_log_impl(&dword_182959000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "### AppleIDAuth create log handle failed\n", v1, 2u);
    }
    AppleIDGetLogHandle::sHandle = v0;
  }
}

CFArrayRef CFArrayApplyBlock(const __CFArray *result, uint64_t a2)
{
  if (result)
  {
    CFArrayRef v3 = result;
    CFIndex Count = CFArrayGetCount(result);
    CFIndex v5 = Count - 1;
    if (Count < 1)
    {
      return 0;
    }
    else
    {
      CFIndex v6 = 0;
      do
      {
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v3, v6);
        uint64_t result = (const __CFArray *)(*(uint64_t (**)(uint64_t, const void *))(a2 + 16))(a2, ValueAtIndex);
        if (result) {
          BOOL v8 = v5 == v6;
        }
        else {
          BOOL v8 = 1;
        }
        ++v6;
      }
      while (!v8);
    }
  }
  return result;
}

uint64_t CFDictionaryApplyBlock(const __CFDictionary *a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (a1 && a2)
  {
    CFIndex Count = CFDictionaryGetCount(a1);
    CFIndex v6 = Count - 1;
    if (Count < 1)
    {
      return 0;
    }
    else
    {
      unint64_t v7 = Count;
      CFDictionaryRef Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a1);
      keys = 0;
      CFIndex v19 = 0;
      uint64_t v20 = 0;
      std::vector<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>>::__vallocate[abi:nn180100](&keys, v7);
      CFTypeID v9 = (char *)v19;
      bzero(v19, 8 * v7);
      CFIndex v19 = &v9[8 * v7];
      values = 0;
      char v16 = 0;
      uint64_t v17 = 0;
      std::vector<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>>::__vallocate[abi:nn180100](&values, v7);
      uint64_t v10 = (char *)v16;
      bzero(v16, 8 * v7);
      char v16 = &v10[8 * v7];
      CFDictionaryGetKeysAndValues(Copy, (const void **)keys, (const void **)values);
      uint64_t v11 = 0;
      do
      {
        uint64_t v12 = (*(uint64_t (**)(uint64_t, void *, void *))(a2 + 16))(a2, keys[v11], values[v11]);
        if (v12) {
          BOOL v13 = v6 == v11;
        }
        else {
          BOOL v13 = 1;
        }
        ++v11;
      }
      while (!v13);
      uint64_t v2 = v12;
      CFRelease(Copy);
      if (values)
      {
        char v16 = values;
        operator delete(values);
      }
      if (keys)
      {
        CFIndex v19 = keys;
        operator delete(keys);
      }
    }
  }
  return v2;
}

CFErrorRef _CFErrorCreateCSIdentityErrorWithInfo(CFIndex a1, const __CFString *a2, const __CFString *a3, const __CFString *a4, const __CFDictionary *a5, const char *a6, const char *a7, unsigned int a8)
{
  CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (a6) {
    char v16 = a6;
  }
  else {
    char v16 = "-";
  }
  CFStringRef v17 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v16, 0x8000100u);
  if (a7) {
    char v18 = a7;
  }
  else {
    char v18 = "-";
  }
  CFStringRef v19 = CFStringCreateWithCString(v15, v18, 0x8000100u);
  uint64_t valuePtr = a8;
  CFNumberRef v20 = CFNumberCreate(v15, kCFNumberLongLongType, &valuePtr);
  if (a5) {
    MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(v15, 0, a5);
  }
  else {
    MutableCFDictionaryRef Copy = CFDictionaryCreateMutable(v15, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  int v22 = MutableCopy;
  CFRange v23 = (const void *)*MEMORY[0x1E4F1D178];
  if (MutableCopy) {
    BOOL v24 = a2 == 0;
  }
  else {
    BOOL v24 = 1;
  }
  if (!v24 && v23 != 0) {
    CFDictionaryAddValue(MutableCopy, v23, a2);
  }
  uint64_t v26 = (const void *)*MEMORY[0x1E4F1D170];
  if (v22) {
    BOOL v27 = a3 == 0;
  }
  else {
    BOOL v27 = 1;
  }
  if (!v27 && v26 != 0) {
    CFDictionaryAddValue(v22, v26, a3);
  }
  uint64_t v29 = (const void *)*MEMORY[0x1E4F1D180];
  if (v22) {
    BOOL v30 = a4 == 0;
  }
  else {
    BOOL v30 = 1;
  }
  if (!v30 && v29 != 0) {
    CFDictionaryAddValue(v22, v29, a4);
  }
  if (v17 && v22) {
    CFDictionaryAddValue(v22, @"function", v17);
  }
  if (v19 && v22) {
    CFDictionaryAddValue(v22, @"file", v19);
  }
  if (v20 && v22)
  {
    CFDictionaryAddValue(v22, @"line", v20);
    CFErrorRef v32 = CFErrorCreate(v15, @"CSIdentityErrorDomain", a1, v22);
  }
  else
  {
    CFErrorRef v32 = CFErrorCreate(v15, @"CSIdentityErrorDomain", a1, v22);
    if (!v22) {
      goto LABEL_45;
    }
  }
  CFRelease(v22);
LABEL_45:
  if (v20) {
    CFRelease(v20);
  }
  if (v19) {
    CFRelease(v19);
  }
  if (v17) {
    CFRelease(v17);
  }
  return v32;
}

uint64_t _CSLinkCurrentUserToAppleIDWithVerifiedAccountIdentifier()
{
  return 1;
}

void _CSAddAppleIDAccountUsingCompletionBlock(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4)
{
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = ___CSAddAppleIDAccountUsingCompletionBlock_block_invoke;
  v6[3] = &unk_1E5231F80;
  v6[4] = a4;
  if (!_AppleIDAuthenticationAddAppleIDWithBlock(a1, a2, 0, a3, (uint64_t)v6))
  {
    CFErrorRef v5 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], @"CSIdentityErrorDomain", -99, 0);
    (*(void (**)(uint64_t, CFErrorRef))(a4 + 16))(a4, v5);
    if (v5) {
      CFRelease(v5);
    }
  }
}

uint64_t _CSAddAppleIDAccount(CFTypeRef cf, CFTypeRef a2)
{
  if (cf) {
    CFRetain(cf);
  }
  if (a2) {
    CFRetain(a2);
  }
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0, 0);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = ___CSAddAppleIDAccount_block_invoke;
  v6[3] = &__block_descriptor_tmp_81;
  v6[4] = cf;
  void v6[5] = a2;
  dispatch_async(global_queue, v6);
  return 1;
}

uint64_t _CSUnlinkCurrentUserFromAppleID()
{
  return 1;
}

uint64_t _CSRemoveAppleIDAccount(uint64_t a1, uint64_t a2)
{
  return _AppleIDAuthenticationForgetAppleID(a1, 0, a2);
}

uint64_t _CSCopyAppleIDAccounts()
{
  return _AppleIDAuthenticationCopyAppleIDs(0, 0);
}

const void *_CSCopyAccountStatusForAppleID(const __CFString *a1, CFErrorRef *a2)
{
  CFDictionaryRef theDict = 0;
  if (!_AppleIDAuthenticationCopyStatus(0, (uint64_t)&theDict, (uint64_t)a2))
  {
    uint64_t v10 = 0;
    if (!a2) {
      return v10;
    }
    goto LABEL_13;
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"AccountStatuses");
  if (Value
    && (CFDictionaryRef v5 = Value, (MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, a1)) != 0))
  {
    unint64_t v7 = MutableCopy;
    SysteCFIndex m = CFLocaleGetSystem();
    CFStringLowercase(v7, System);
    CFTypeID v9 = CFDictionaryGetValue(v5, v7);
    uint64_t v10 = v9;
    if (v9)
    {
      CFRetain(v9);
    }
    else if (a2)
    {
      *a2 = _CFErrorCreateCSIdentityErrorWithInfo(-115, @"The requested account does not exist", 0, 0, 0, "_CSCopyAccountStatusForAppleID", "/Library/Caches/com.apple.xbs/Sources/CoreServices/OSServices.subprj/IdentityServices/CSAuthenticationSupportPriv.cp", 0xD8u);
    }
    CFRelease(v7);
  }
  else
  {
    uint64_t v10 = 0;
  }
  CFRelease(theDict);
  if (a2)
  {
LABEL_13:
    if (!v10 && !*a2) {
      *a2 = _CFErrorCreateCSIdentityErrorWithInfo(-115, @"The requested account does not exist", 0, 0, 0, "_CSCopyAccountStatusForAppleID", "/Library/Caches/com.apple.xbs/Sources/CoreServices/OSServices.subprj/IdentityServices/CSAuthenticationSupportPriv.cp", 0xE0u);
    }
  }
  return v10;
}

AppleIDIdentityAuthority *_CSCreateAppleIDIdentityWithNameAndAccountIdentifier(Identity *a1, const __CFString *a2, const __CFString *a3)
{
  if (!a3) {
    return 0;
  }
  unint64_t v6 = Identity::Class(a1);
  uint64_t result = (AppleIDIdentityAuthority *)CFObject::Allocate((CFObject *)0x30, v6, a1, v7);
  if (result)
  {
    CFTypeID v9 = result;
    uint64_t v10 = (AppleIDIdentityAuthority *)AppleIDIdentityAuthority::Authority(result);
    AppleIDIdentity::AppleIDIdentity(v9, a2, a3, v10);
    return (AppleIDIdentity *)((char *)v9 - 16);
  }
  return result;
}

CFStringRef _CSCreateAppleIDIdentityWithCertificate(AppleIDIdentityAuthority *a1, uint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = AppleIDIdentityAuthority::Authority(a1);
  CFStringRef result = (const __CFString *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9 + 152))(v9, a2, a5);
  if (result)
  {
    CFStringRef v11 = result;
    uint64_t v12 = _CSCreateAppleIDIdentityWithNameAndAccountIdentifier(a1, a3, result);
    CFRelease(v11);
    return (const __CFString *)v12;
  }
  return result;
}

uint64_t _CSCopyAccountIdentifierForAppleIDCertificate(AppleIDIdentityAuthority *a1)
{
  id v1 = *(uint64_t (**)(void))(*(void *)AppleIDIdentityAuthority::Authority(a1) + 152);

  return v1();
}

CFStringRef _CSCreateAppleIDIdentityWithCertificateChain(AppleIDIdentityAuthority *a1, uint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = AppleIDIdentityAuthority::Authority(a1);
  CFStringRef result = (const __CFString *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9 + 160))(v9, a2, a5);
  if (result)
  {
    CFStringRef v11 = result;
    uint64_t v12 = _CSCreateAppleIDIdentityWithNameAndAccountIdentifier(a1, a3, result);
    CFRelease(v11);
    return (const __CFString *)v12;
  }
  return result;
}

uint64_t _CSCopyAccountIdentifierForAppleIDCertificateChain(AppleIDIdentityAuthority *a1)
{
  id v1 = *(uint64_t (**)(void))(*(void *)AppleIDIdentityAuthority::Authority(a1) + 160);

  return v1();
}

uint64_t _CSCopySecIdentityForAppleID(uint64_t a1, CFErrorRef *a2)
{
  return _AppleIDCopySecIdentityForAppleIDAccount(a1, 0, a2);
}

const void *_CSCopyAppleIDAccountForAppleIDCertificate(AppleIDIdentityAuthority *a1, uint64_t a2)
{
  uint64_t v4 = AppleIDIdentityAuthority::Authority(a1);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, AppleIDIdentityAuthority *, uint64_t))(*(void *)v4 + 152))(v4, a1, a2);
  if (!v5) {
    return 0;
  }
  CFStringRef v6 = (const __CFString *)v5;
  CFArrayRef v7 = (const __CFArray *)_AppleIDAuthenticationCopyAppleIDs(0, a2);
  if (v7)
  {
    CFArrayRef v8 = v7;
    CFIndex Count = CFArrayGetCount(v7);
    if (Count < 1) {
      goto LABEL_20;
    }
    CFIndex v10 = Count;
    uint64_t v11 = 1;
    do
    {
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v8, v11 - 1);
      CFDictionaryRef v13 = (const __CFDictionary *)_AppleIDAuthenticationCopyCertificateInfo((uint64_t)ValueAtIndex, 0, 0, a2);
      if (v13)
      {
        CFDictionaryRef v14 = v13;
        CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v13, @"encDsId");
        if (Value)
        {
          v20.length = CFStringGetLength(v6);
          v20.locatioCFIndex n = 0;
          int v16 = CFStringFindWithOptions(v6, Value, v20, 5uLL, &v19);
          LODWORD(Value) = 0;
          if (v16)
          {
            if (v19.location >= 1)
            {
              if (CFStringGetCharacterAtIndex(v6, v19.location - 1) == 46)
              {
                CFIndex Length = CFStringGetLength(v6);
                LODWORD(Value) = Length == v19.length + v19.location;
              }
              else
              {
                LODWORD(Value) = 0;
              }
            }
          }
        }
        CFRelease(v14);
      }
      else
      {
        LODWORD(Value) = 0;
      }
      if (v11 >= v10) {
        break;
      }
      ++v11;
    }
    while (!Value);
    if (Value) {
      CFRetain(ValueAtIndex);
    }
    else {
LABEL_20:
    }
      CFStringRef ValueAtIndex = 0;
    CFRelease(v8);
  }
  else
  {
    CFStringRef ValueAtIndex = 0;
  }
  CFRelease(v6);
  return ValueAtIndex;
}

CFArrayRef _CSCopyDefaultSharingSecIdentities(const void *a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (!a1 || (uint64_t v4 = (const void *)_CSGetAppleIDIdentityAuthority(), CFEqual(a1, v4)))
  {
    CFArrayRef v5 = (const __CFArray *)_AppleIDAuthenticationCopyAppleIDs(0, 0);
    if (v5)
    {
      CFArrayRef v6 = v5;
      if (CFArrayGetCount(v5) >= 1)
      {
        CFIndex v7 = 0;
        do
        {
          CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v6, v7);
          CFTypeID TypeID = CFStringGetTypeID();
          if (ValueAtIndex && (!TypeID || CFGetTypeID(ValueAtIndex) == TypeID))
          {
            CFIndex v10 = (const void *)_AppleIDCopySecIdentityForAppleIDAccount((uint64_t)ValueAtIndex, 0, 0);
            if (v10)
            {
              uint64_t v11 = v10;
              CFArrayAppendValue(Mutable, v10);
              CFRelease(v11);
            }
          }
          ++v7;
        }
        while (v7 < CFArrayGetCount(v6));
      }
      CFRelease(v6);
    }
  }
  if (!Mutable) {
    return 0;
  }
  if (CFArrayGetCount(Mutable) < 1) {
    CFArrayRef Copy = 0;
  }
  else {
    CFArrayRef Copy = CFArrayCreateCopy(v2, Mutable);
  }
  CFRelease(Mutable);
  return Copy;
}

void AppleIDIdentity::AppleIDIdentity(AppleIDIdentity *this, const __CFString *a2, const __CFString *a3, AppleIDIdentityAuthority *a4)
{
  Identity::Identity(this, 1, 0);
  *CFArrayRef v8 = &unk_1ECB170E0;
  void v8[3] = a4;
  uint64_t v9 = v8 - 2;
  CFAllocatorRef v10 = CFGetAllocator(v8 - 2);
  *((void *)this + 4) = CFStringCreateCopy(v10, a2);
  CFAllocatorRef v11 = CFGetAllocator(v9);
  *((void *)this + 5) = CFStringCreateCopy(v11, a3);
  CFRetain((CFTypeRef)(*((void *)this + 3) - 16));
}

void AppleIDIdentity::AppleIDIdentity(AppleIDIdentity *this, const AppleIDIdentity *a2)
{
  Identity::Identity(this, *((void *)a2 + 1), *((void *)a2 + 2));
  *uint64_t v4 = &unk_1ECB170E0;
  v4[3] = *((void *)a2 + 3);
  CFArrayRef v5 = v4 - 2;
  CFAllocatorRef v6 = CFGetAllocator(v4 - 2);
  CFStringRef v7 = (const __CFString *)(*(uint64_t (**)(const AppleIDIdentity *))(*(void *)a2 + 48))(a2);
  *((void *)this + 4) = CFStringCreateCopy(v6, v7);
  CFAllocatorRef v8 = CFGetAllocator(v5);
  CFStringRef v9 = (const __CFString *)(*(uint64_t (**)(const AppleIDIdentity *))(*(void *)a2 + 64))(a2);
  *((void *)this + 5) = CFStringCreateCopy(v8, v9);
  CFRetain((CFTypeRef)(*((void *)this + 3) - 16));
}

void AppleIDIdentity::~AppleIDIdentity(AppleIDIdentity *this)
{
  *(void *)this = &unk_1ECB170E0;
  CFRelease((CFTypeRef)(*((void *)this + 3) - 16));
  CFRelease(*((CFTypeRef *)this + 4));
  CFRelease(*((CFTypeRef *)this + 5));

  std::__function::__func<BOOL (*)(objc_object *),std::allocator<BOOL (*)(objc_object *)>,BOOL ()(objc_object *)>::~__func(this);
}

{
  uint64_t v1;
  uint64_t vars8;

  AppleIDIdentity::~AppleIDIdentity(this);

  std::__function::__func<BOOL (*)(objc_object *),std::allocator<BOOL (*)(objc_object *)>,BOOL ()(objc_object *)>::~__func(v1);
}

void AppleIDIdentity::createCopy(AppleIDIdentity *this, const __CFAllocator *a2)
{
  unint64_t v4 = Identity::Class(this);
  CFAllocatorRef v6 = (AppleIDIdentity *)CFObject::Allocate((CFObject *)0x30, v4, a2, v5);
  if (v6) {
    AppleIDIdentity::AppleIDIdentity(v6, this);
  }
}

uint64_t AppleIDIdentity::copyPrincipalName(AppleIDIdentity *this)
{
  id v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(AppleIDIdentity *))(*(void *)this + 72))(this)
                           + 128);

  return v1();
}

uint64_t AppleIDIdentity::copyTrustSubjectDistinguishedName(AppleIDIdentity *this)
{
  id v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(AppleIDIdentity *))(*(void *)this + 72))(this)
                           + 136);

  return v1();
}

uint64_t AppleIDIdentity::authenticateCertificateChain(AppleIDIdentity *this, const __CFArray *a2, __CFError **a3)
{
  CFTypeRef cf = 0;
  uint64_t v5 = (*(uint64_t (**)(void, const __CFArray *, CFTypeRef *))(**((void **)this + 3) + 160))(*((void *)this + 3), a2, &cf);
  if (v5)
  {
    CFAllocatorRef v6 = (const void *)v5;
    CFStringRef v7 = (const void *)(*(uint64_t (**)(AppleIDIdentity *))(*(void *)this + 64))(this);
    if (CFEqual(v7, v6))
    {
      CFRelease(v6);
      return 1;
    }
    syslog(4, "Identity posixName doesn't match accountIdentifier from certificate");
    CFRelease(v6);
  }
  CFStringRef v9 = (__CFError *)cf;
  if (!cf)
  {
    if (!a3) {
      return 0;
    }
    CFStringRef v9 = CSCreateIdentityError(@"CSIdentityErrorDomain", -101);
LABEL_10:
    uint64_t result = 0;
    *a3 = v9;
    return result;
  }
  if (a3) {
    goto LABEL_10;
  }
  CFRelease(cf);
  return 0;
}

BOOL AppleIDIdentity::authenticatePassword(AppleIDIdentity *this, const __CFString *a2, __CFError **a3)
{
  return _AppleIDAuthenticatePassword(*((void *)this + 4), (uint64_t)a2, 0, (uint64_t)a3) != 0;
}

uint64_t AppleIDIdentity::fullName(AppleIDIdentity *this)
{
  return *((void *)this + 4);
}

uint64_t AppleIDIdentity::posixName(AppleIDIdentity *this)
{
  return *((void *)this + 5);
}

uint64_t AppleIDIdentity::authority(AppleIDIdentity *this)
{
  return *((void *)this + 3);
}

uint64_t Identity::needsCommit(Identity *this)
{
  return 0;
}

uint64_t Identity::uuid(Identity *this)
{
  return 0;
}

uint64_t Identity::posixID(Identity *this)
{
  return 0xFFFFFFFFLL;
}

uint64_t Identity::emailAddress(Identity *this)
{
  return 0;
}

uint64_t Identity::imageURL(Identity *this)
{
  return 0;
}

uint64_t Identity::imageData(Identity *this)
{
  return 0;
}

uint64_t Identity::imageDataType(Identity *this)
{
  return 0;
}

uint64_t Identity::aliases(Identity *this)
{
  return 0;
}

CFArrayRef Identity::copyLinkedIdentityAuthorities(Identity *this)
{
  CFAllocatorRef v1 = CFGetAllocator((char *)this - 16);

  return CFArrayCreate(v1, 0, 0, 0);
}

CFArrayRef Identity::copyLinkedIdentityNamesWithAuthority(uint64_t a1)
{
  CFAllocatorRef v1 = CFGetAllocator((CFTypeRef)(a1 - 16));

  return CFArrayCreate(v1, 0, 0, 0);
}

uint64_t Identity::allowsPasswordResetWithAuthority()
{
  return 0;
}

uint64_t Identity::loginShellURL(Identity *this)
{
  return 0;
}

uint64_t Identity::homeDirectoryURL(Identity *this)
{
  return 0;
}

uint64_t Identity::certificate(Identity *this)
{
  return 0;
}

uint64_t Identity::createGroupMembershipQuery(Identity *this, const __CFAllocator *a2)
{
  return 0;
}

uint64_t AppleIDIdentity::isMemberOfGroup(AppleIDIdentity *this, Identity *a2)
{
  return 0;
}

uint64_t AppleIDIdentity::commit(AppleIDIdentity *this, void *a2, __CFError **a3)
{
  if (a3) {
    *a3 = CSCreateIdentityError(@"CSIdentityErrorDomain", -2);
  }
  return 0;
}

uint64_t AppleIDIdentity::commitAsync()
{
  return 0;
}

uint64_t Identity::updateLinkedIdentityProvisioning(Identity *this, void *a2, __CFError **a3)
{
  return 1;
}

uint64_t AppleIDIdentityAuthority::InitializeAuthority(AppleIDIdentityAuthority *this)
{
  CFAllocatorRef v1 = (const CFClass *)*MEMORY[0x1E4F1CF80];
  unint64_t v2 = IdentityAuthority::Class(this);
  unint64_t v4 = (IdentityAuthority *)CFObject::Allocate((CFObject *)0x18, v2, v1, v3);
  IdentityAuthority::IdentityAuthority(v4, @"appleid.apple.com", @"Apple Account");
  *(void *)uint64_t v5 = &unk_1ECB173D0;
  AppleIDIdentityAuthority::authority = (uint64_t)v5;

  return IdentityAuthority::RegisterAuthority(v5, v6);
}

uint64_t AppleIDIdentityAuthority::Authority(AppleIDIdentityAuthority *this)
{
  return AppleIDIdentityAuthority::authority;
}

BOOL AppleIDIdentityAuthority::authenticateNameAndPassword(AppleIDIdentityAuthority *this, const __CFString *a2, const __CFString *a3, __CFError **a4)
{
  return _AppleIDAuthenticatePassword((uint64_t)a2, (uint64_t)a3, 0, (uint64_t)a4) == 1;
}

uint64_t AppleIDIdentityAuthority::copyAccountIdentifierForCertificate(AppleIDIdentityAuthority *this, __SecCertificate *a2, __CFError **a3)
{
  values = a2;
  CFArrayRef v5 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&values, 1, MEMORY[0x1E4F1D510]);
  uint64_t v6 = (*(uint64_t (**)(AppleIDIdentityAuthority *, CFArrayRef, __CFError **))(*(void *)this + 160))(this, v5, a3);
  CFRelease(v5);
  return v6;
}

const __CFString *AppleIDIdentityAuthority::copyAccountIdentifierForCertificateChain(AppleIDIdentityAuthority *this, const __CFArray *a2, __CFError **a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  SecTrustRef trust = 0;
  unsigned int v23 = 0;
  AppleIDAuthorityPolicy = (const void *)SecPolicyCreateAppleIDAuthorityPolicy();
  if (!AppleIDAuthorityPolicy)
  {
    CFAllocatorRef v11 = 0;
    CFIndex v12 = 14;
    goto LABEL_9;
  }
  OSStatus v6 = SecTrustCreateWithCertificates(a2, AppleIDAuthorityPolicy, &trust);
  if (v6)
  {
    LODWORD(v12) = v6;
    CFIndex v21 = AppleIDGetLogHandle();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      CFIndex v12 = (int)v12;
      *(_DWORD *)long long buf = 134217984;
      uint64_t v26 = (int)v12;
      int v22 = "### SecTrustCreateWithCertificates failed with error %ld";
LABEL_43:
      _os_log_impl(&dword_182959000, v21, OS_LOG_TYPE_ERROR, v22, buf, 0xCu);
LABEL_45:
      CFAllocatorRef v11 = (__CFString *)*MEMORY[0x1E4F1D158];
      goto LABEL_9;
    }
LABEL_44:
    CFIndex v12 = (int)v12;
    goto LABEL_45;
  }
  int v7 = MEMORY[0x18530E160](trust, &v23);
  if (v7)
  {
    LODWORD(v12) = v7;
    CFIndex v21 = AppleIDGetLogHandle();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      CFIndex v12 = (int)v12;
      *(_DWORD *)long long buf = 134217984;
      uint64_t v26 = (int)v12;
      int v22 = "### SecTrustEvaluate failed with error %ld";
      goto LABEL_43;
    }
    goto LABEL_44;
  }
  char v8 = 0;
  CFStringRef v9 = 0;
  if (v23 == 1 || v23 == 4) {
    goto LABEL_13;
  }
  CFAllocatorRef v10 = AppleIDGetLogHandle();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 134217984;
    uint64_t v26 = v23;
    _os_log_impl(&dword_182959000, v10, OS_LOG_TYPE_ERROR, "### Invalid trust result %ld", buf, 0xCu);
  }
  CFAllocatorRef v11 = @"CSIdentityErrorDomain";
  CFIndex v12 = 15;
LABEL_9:
  if (v11) {
    CFStringRef v13 = v11;
  }
  else {
    CFStringRef v13 = @"CSIdentityErrorDomain";
  }
  CFStringRef v9 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v13, v12, 0);
  char v8 = 1;
LABEL_13:
  if (trust) {
    CFRelease(trust);
  }
  if (AppleIDAuthorityPolicy) {
    CFRelease(AppleIDAuthorityPolicy);
  }
  if ((v8 & 1) == 0)
  {
    CFArrayGetValueAtIndex(a2, 0);
    CFArrayRef v14 = (const __CFArray *)SecCertificateCopyCommonNames();
    if (v14)
    {
      CFAllocatorRef v15 = v14;
      if (CFArrayGetCount(v14) >= 1
        && (CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v15, 0)) != 0)
      {
        CFStringRef v17 = ValueAtIndex;
        CFRetain(ValueAtIndex);
        CFRelease(v15);
        CFIndex Length = CFStringGetLength(v17);
        if (Length > 69)
        {
          if (CFStringHasPrefix(v17, @"com.apple.idms.appleid.")) {
            goto LABEL_35;
          }
          syslog(3, "Invalid AppleID account identifier prefix");
          CFIndex v19 = -13;
        }
        else
        {
          syslog(3, "Invalid AppleID account identifier lenth %d", Length);
          CFIndex v19 = -12;
        }
        CFAllocatorRef v15 = v17;
      }
      else
      {
        CFIndex v19 = -10;
      }
      CFRelease(v15);
    }
    else
    {
      CFIndex v19 = -10;
    }
    CFStringRef v9 = CSCreateIdentityError(@"CSIdentityErrorDomain", v19);
  }
  if (a3)
  {
    if (!v9) {
      CFStringRef v9 = CSCreateIdentityError(@"CSIdentityErrorDomain", -100);
    }
    CFStringRef v17 = 0;
    *a3 = v9;
    return v17;
  }
  CFStringRef v17 = 0;
LABEL_35:
  if (v9) {
    CFRelease(v9);
  }
  return v17;
}

CFArrayRef AppleIDIdentityAuthority::copyCertificateIssuerNames(AppleIDIdentityAuthority *this)
{
  values = @"Apple Application Integration Certification Authority";
  CFAllocatorRef v1 = CFGetAllocator((char *)this - 16);
  return CFArrayCreate(v1, (const void **)&values, 1, MEMORY[0x1E4F1D510]);
}

CFStringRef AppleIDIdentityAuthority::copyPrincipalForCertificate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16)) {
    return 0;
  }
  CFAllocatorRef v4 = CFGetAllocator((CFTypeRef)(a1 - 16));
  CFStringRef v5 = *(const __CFString **)(a3 + 16);

  return CFStringCreateCopy(v4, v5);
}

AppleIDIdentityQuery *AppleIDIdentityAuthority::createQueryWithName(AppleIDIdentityAuthority *this, const __CFAllocator *a2, const __CFString *a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = 0;
  if (a4 == 1 && a5 == 1)
  {
    unint64_t v9 = IdentityQuery::Class(0);
    uint64_t result = (AppleIDIdentityQuery *)CFObject::Allocate((CFObject *)0x40, v9, a2, v10);
    if (result) {
      return AppleIDIdentityQuery::AppleIDIdentityQuery(result, a3, this);
    }
  }
  return result;
}

AppleIDIdentityQuery *AppleIDIdentityAuthority::createQueryWithProperties(AppleIDIdentityAuthority *this, const __CFAllocator *a2, const void *a3)
{
  unint64_t v6 = IdentityQuery::Class(this);
  uint64_t result = (AppleIDIdentityQuery *)CFObject::Allocate((CFObject *)0x40, v6, a2, v7);
  if (result) {
    return AppleIDIdentityQuery::AppleIDIdentityQuery(result, a3, this);
  }
  return result;
}

CFStringRef AppleIDIdentityAuthority::copyPrincipalForNamePair(AppleIDIdentityAuthority *this, const __CFString *a2, const __CFString *a3)
{
  CFAllocatorRef v4 = CFGetAllocator((char *)this - 16);

  return CFStringCreateCopy(v4, a2);
}

CFStringRef AppleIDIdentityAuthority::copyTrustSubjectDistinguishedNameForNamePair(AppleIDIdentityAuthority *this, const __CFString *a2, const __CFString *a3)
{
  CFAllocatorRef v4 = CFGetAllocator((char *)this - 16);
  return CFStringCreateWithFormat(v4, 0, @"CN=%@", a2);
}

CFStringRef AppleIDIdentityAuthority::copyTrustAnchorDistinguishedName(AppleIDIdentityAuthority *this)
{
  CFAllocatorRef v1 = CFGetAllocator((char *)this - 16);

  return CFStringCreateCopy(v1, @"CN=Apple Root CA,OU=Apple Certification Authority,O=Apple Inc.,C=US");
}

void AppleIDIdentityAuthority::~AppleIDIdentityAuthority(CFTypeRef *this)
{
  IdentityAuthority::~IdentityAuthority(this);

  std::__function::__func<BOOL (*)(objc_object *),std::allocator<BOOL (*)(objc_object *)>,BOOL ()(objc_object *)>::~__func(v1);
}

CFStringRef IdentityAuthority::copyLocalizedName(IdentityAuthority *this)
{
  CFStringRef result = (CFStringRef)*((void *)this + 2);
  if (result)
  {
    CFAllocatorRef v3 = CFGetAllocator(result);
    CFStringRef v4 = (const __CFString *)*((void *)this + 2);
    return CFStringCreateCopy(v3, v4);
  }
  return result;
}

uint64_t IdentityAuthority::createIdentity(IdentityAuthority *this, const __CFAllocator *a2, uint64_t a3, const __CFString *a4, const __CFString *a5)
{
  return 0;
}

uint64_t IdentityAuthority::createQueryWithClass(IdentityAuthority *this, const __CFAllocator *a2)
{
  return 0;
}

uint64_t IdentityAuthority::createQueryWithUUID(IdentityAuthority *this, const __CFAllocator *a2, const __CFUUID *a3)
{
  return 0;
}

uint64_t IdentityAuthority::createQueryWithPosixID(IdentityAuthority *this, const __CFAllocator *a2)
{
  return 0;
}

void AppleIDIdentityQuery::AppleIDIdentityQuery(AppleIDIdentityQuery *this, __CFString *a2, AppleIDIdentityAuthority *a3)
{
  values = a2;
  *(void *)this = &unk_1ECB17338;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = a3;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 7) = 0;
  CFRetain((char *)a3 - 16);
  locatioCFIndex n = CFStringFind(a2, @"@", 0).location;
  unint64_t v6 = @"email";
  if (location == -1) {
    unint64_t v6 = @"phone";
  }
  keys = v6;
  CFAllocatorRef v7 = CFGetAllocator((char *)this - 16);
  CFTypeRef cf = CFArrayCreate(v7, (const void **)&values, 1, MEMORY[0x1E4F1D510]);
  CFAllocatorRef v8 = CFGetAllocator((char *)this - 16);
  *((void *)this + 3) = CFDictionaryCreate(v8, (const void **)&keys, &cf, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFRelease(cf);
}

__CFDictionary *createCriteriaWithNames(const __CFAllocator *a1, const __CFArray *a2)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFIndex Count = CFArrayGetCount(a2);
  if (Count >= 1)
  {
    CFIndex v5 = Count;
    unint64_t v6 = 0;
    CFIndex v7 = 0;
    CFAllocatorRef v8 = 0;
    CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFAllocatorRef v10 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    do
    {
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a2, v7);
      if (CFStringFind(ValueAtIndex, @"@", 0).location == -1)
      {
        if (v8)
        {
          CFIndex v12 = v8;
        }
        else
        {
          CFIndex v12 = CFArrayCreateMutable(v9, 0, v10);
          CFAllocatorRef v8 = v12;
        }
      }
      else if (v6)
      {
        CFIndex v12 = v6;
      }
      else
      {
        CFIndex v12 = CFArrayCreateMutable(v9, 0, v10);
        unint64_t v6 = v12;
      }
      CFArrayAppendValue(v12, ValueAtIndex);
      ++v7;
    }
    while (v5 != v7);
    if (v8)
    {
      CFDictionaryAddValue(Mutable, @"phone", v8);
      CFRelease(v8);
    }
    if (v6)
    {
      CFDictionaryAddValue(Mutable, @"email", v6);
      CFRelease(v6);
    }
  }
  return Mutable;
}

void AppleIDIdentityQuery::AppleIDIdentityQuery(AppleIDIdentityQuery *this, const void *a2, AppleIDIdentityAuthority *a3)
{
  *(void *)this = &unk_1ECB17338;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = a3;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 7) = 0;
  CFRetain((char *)a3 - 16);
  CFTypeID v5 = CFGetTypeID(a2);
  if (v5 == CFDictionaryGetTypeID())
  {
    uint64_t valuePtr = 0;
    CFStringRef Value = CFDictionaryGetValue((CFDictionaryRef)a2, @"class");
    CFIndex v7 = CFDictionaryGetValue((CFDictionaryRef)a2, @"full name");
    CFStringRef v13 = v7;
    if (Value)
    {
      CFTypeID v8 = CFGetTypeID(Value);
      if (v8 == CFNumberGetTypeID()) {
        CFNumberGetValue((CFNumberRef)Value, kCFNumberLongType, &valuePtr);
      }
    }
    if (v7)
    {
      CFTypeID v9 = CFGetTypeID(v7);
      if (v9 == CFStringGetTypeID() && valuePtr == 1)
      {
        CFAllocatorRef v10 = CFGetAllocator((char *)this - 16);
        CFArrayRef v11 = CFArrayCreate(v10, &v13, 1, MEMORY[0x1E4F1D510]);
        CFAllocatorRef v12 = CFGetAllocator((char *)this - 16);
        *((void *)this + 3) = createCriteriaWithNames(v12, v11);
        CFRelease(v11);
      }
    }
  }
}

void AppleIDIdentityQuery::~AppleIDIdentityQuery(AppleIDIdentityQuery *this)
{
  *(void *)this = &unk_1ECB17338;
  CFRelease((CFTypeRef)(*((void *)this + 2) - 16));
  unint64_t v2 = (const void *)*((void *)this + 3);
  if (v2)
  {
    CFRelease(v2);
    *((void *)this + 3) = 0;
  }
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
    uint64_t v4 = *((void *)this + 4);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    *((void *)this + 4) = 0;
  }
  CFTypeID v5 = (const void *)*((void *)this + 5);
  if (v5)
  {
    CFRelease(v5);
    *((void *)this + 5) = 0;
  }
  unint64_t v6 = (const void *)*((void *)this + 6);
  if (v6)
  {
    CFRelease(v6);
    *((void *)this + 6) = 0;
  }
  CFIndex v7 = (const void *)*((void *)this + 7);
  if (v7)
  {
    CFRelease(v7);
    *((void *)this + 7) = 0;
  }

  std::__function::__func<BOOL (*)(objc_object *),std::allocator<BOOL (*)(objc_object *)>,BOOL ()(objc_object *)>::~__func(this);
}

{
  uint64_t v1;
  uint64_t vars8;

  AppleIDIdentityQuery::~AppleIDIdentityQuery(this);

  std::__function::__func<BOOL (*)(objc_object *),std::allocator<BOOL (*)(objc_object *)>,BOOL ()(objc_object *)>::~__func(v1);
}

CFArrayRef AppleIDIdentityQuery::copyResults(AppleIDIdentityQuery *this)
{
  unint64_t v2 = (const void *)*((void *)this + 7);
  if (v2)
  {
    return (CFArrayRef)CFRetain(v2);
  }
  else
  {
    CFAllocatorRef v4 = CFGetAllocator((char *)this - 16);
    return CFArrayCreate(v4, 0, 0, 0);
  }
}

void AppleIDIdentityQuery::processFindPersonResults(AppleIDIdentityQuery *this, CFArrayRef theArray)
{
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count >= 1)
  {
    CFIndex v5 = Count;
    CFIndex v6 = 0;
    CFMutableDictionaryRef Mutable = 0;
    CFIndex v21 = this;
    CFTypeID v8 = (char *)this - 16;
    do
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v6);
      CFStringRef Value = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, @"value");
      CFStringRef v11 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, @"certCN");
      if (!v11) {
        CFStringRef v11 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, @"dsId");
      }
      if (Value && v11)
      {
        CFAllocatorRef v12 = CFGetAllocator(v8);
        unint64_t v13 = Identity::Class(v12);
        CFAllocatorRef v15 = (AppleIDIdentity *)CFObject::Allocate((CFObject *)0x30, v13, v12, v14);
        int v16 = v15;
        if (v15) {
          AppleIDIdentity::AppleIDIdentity(v15, Value, v11, *((AppleIDIdentityAuthority **)v21 + 2));
        }
        if (!Mutable)
        {
          CFAllocatorRef v17 = CFGetAllocator(v8);
          CFMutableDictionaryRef Mutable = CFArrayCreateMutable(v17, 0, MEMORY[0x1E4F1D510]);
        }
        char v18 = (char *)v16 - 16;
        CFArrayAppendValue(Mutable, v18);
        CFRelease(v18);
      }
      ++v6;
    }
    while (v5 != v6);
    if (Mutable)
    {
      CFIndex v19 = (__CFArray *)*((void *)v21 + 7);
      if (!v19)
      {
        CFAllocatorRef v20 = CFGetAllocator(v8);
        CFIndex v19 = CFArrayCreateMutable(v20, 0, MEMORY[0x1E4F1D510]);
        *((void *)v21 + 7) = v19;
      }
      v23.length = CFArrayGetCount(Mutable);
      v23.locatioCFIndex n = 0;
      CFArrayAppendArray(v19, Mutable, v23);
      AppleIDIdentityQuery::sendEvent(v21, 2, Mutable, 0);
      CFRelease(Mutable);
    }
  }
}

void AppleIDIdentityQuery::sendEvent(AppleIDIdentityQuery *this, uint64_t a2, CFTypeRef cf, CFTypeRef a4)
{
  if (*((void *)this + 4))
  {
    if (cf) {
      CFRetain(cf);
    }
    if (a4) {
      CFRetain(a4);
    }
    CFRetain((char *)this - 16);
    CFTypeID v8 = (__CFRunLoop *)*((void *)this + 5);
    CFTypeID v9 = (const void *)*((void *)this + 6);
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 0x40000000;
    v10[2] = ___ZN20AppleIDIdentityQuery9sendEventElPK9__CFArrayP9__CFError_block_invoke;
    v10[3] = &__block_descriptor_tmp_4;
    void v10[4] = this;
    void v10[5] = a2;
    void v10[6] = cf;
    void v10[7] = a4;
    CFRunLoopPerformBlock(v8, v9, v10);
    CFRunLoopWakeUp(*((CFRunLoopRef *)this + 5));
  }
}

void ___ZN20AppleIDIdentityQuery9sendEventElPK9__CFArrayP9__CFError_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(void *)(v2 + 32);
  if (v3) {
    (*(void (**)(uint64_t, uint64_t, void, void, void))(*(void *)v3 + 32))(v3, v2, a1[5], a1[6], a1[7]);
  }
  CFAllocatorRef v4 = (const void *)a1[6];
  if (v4) {
    CFRelease(v4);
  }
  CFIndex v5 = (const void *)a1[7];
  if (v5) {
    CFRelease(v5);
  }

  CFRelease((CFTypeRef)(v2 - 16));
}

uint64_t AppleIDIdentityQuery::execute(AppleIDIdentityQuery *this, unint64_t a2, __CFError **a3)
{
  uint64_t v3 = *((void *)this + 1);
  if ((v3 & 0x80000000) == 0)
  {
    *((void *)this + 1) = v3 | 0x80000000;
    _AppleIDAuthenticationFindPerson();
  }
  return 0;
}

BOOL AppleIDIdentityQuery::executeAsynchronously(void *a1, uint64_t a2, uint64_t a3, const void *a4, const void *a5)
{
  uint64_t v5 = a1[1];
  if ((v5 & 0x80000000) == 0)
  {
    a1[1] = v5 | 0x80000000;
    a1[4] = a3;
    (*(void (**)(uint64_t))(*(void *)a3 + 16))(a3);
    a1[5] = CFRetain(a4);
    a1[6] = CFRetain(a5);
    CFRetain(a1 - 2);
    CFDictionaryRef v9 = (const __CFDictionary *)a1[3];
    dispatch_queue_global_t global_queue = dispatch_get_global_queue(0, 0);
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 0x40000000;
    uint64x2_t v12[2] = ___ZN20AppleIDIdentityQuery21executeAsynchronouslyEmP19IdentityQueryClientP11__CFRunLoopPK10__CFString_block_invoke;
    void v12[3] = &__block_descriptor_tmp_27;
    void v12[4] = a1;
    _AppleIDAuthenticationFindPersonWithBlock(v9, 0, (uint64_t)global_queue, (uint64_t)v12);
  }
  return (int)v5 >= 0;
}

void ___ZN20AppleIDIdentityQuery21executeAsynchronouslyEmP19IdentityQueryClientP11__CFRunLoopPK10__CFString_block_invoke(uint64_t a1, const __CFArray *a2, int a3, const void *a4)
{
  uint64_t v5 = *(AppleIDIdentityQuery **)(a1 + 32);
  if ((*((unsigned char *)v5 + 11) & 0x40) != 0)
  {
    if (!a3) {
      return;
    }
    goto LABEL_10;
  }
  if (a2)
  {
    AppleIDIdentityQuery::processFindPersonResults(*(AppleIDIdentityQuery **)(a1 + 32), a2);
  }
  else if (a4)
  {
    AppleIDIdentityQuery::sendEvent(*(AppleIDIdentityQuery **)(a1 + 32), 5, 0, a4);
    (*(void (**)(AppleIDIdentityQuery *))(*(void *)v5 + 72))(v5);
  }
  if (a3)
  {
    AppleIDIdentityQuery::sendEvent(v5, 1, 0, 0);
LABEL_10:
    CFRelease((char *)v5 - 16);
  }
}

void *AppleIDIdentityQuery::stop(void *this)
{
  uint64_t v1 = this[1];
  if ((v1 & 0x40000000) == 0)
  {
    uint64_t v2 = this;
    this[1] = v1 | 0x40000000;
    this = (void *)this[4];
    if (this)
    {
      (*(void (**)(void *))(*this + 24))(this);
      this = (void *)v2[4];
      if (this) {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
      }
      v2[4] = 0;
    }
  }
  return this;
}

void Identity::InitClass(Identity *this)
{
}

uint64_t Identity::Class(Identity *this)
{
  return Identity::__cfClass;
}

void Identity::Identity(Identity *this, uint64_t a2, uint64_t a3)
{
  *(void *)this = &unk_1ECB17488;
  *((void *)this + 1) = a2;
  *((void *)this + 2) = a3;
}

uint64_t Identity::equal(void *a1, void *a2)
{
  if (a1[1] != a2[1]) {
    return 0;
  }
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 88))(a1);
  uint64_t v5 = *a1;
  if (v4)
  {
    CFIndex v6 = (const void *)(*(uint64_t (**)(void *))(v5 + 88))(a1);
    CFIndex v7 = (const void *)(*(uint64_t (**)(void *))(*a2 + 88))(a2);
  }
  else
  {
    uint64_t v9 = (*(uint64_t (**)(void *))(v5 + 64))(a1);
    uint64_t v10 = *a1;
    if (v9)
    {
      CFIndex v6 = (const void *)(*(uint64_t (**)(void *))(v10 + 64))(a1);
      CFIndex v7 = (const void *)(*(uint64_t (**)(void *))(*a2 + 64))(a2);
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(void *))(v10 + 48))(a1);
      if (!result) {
        return result;
      }
      CFIndex v6 = (const void *)(*(uint64_t (**)(void *))(*a1 + 48))(a1);
      CFIndex v7 = (const void *)(*(uint64_t (**)(void *))(*a2 + 48))(a2);
    }
  }
  return CFEqual(v6, v7) != 0;
}

uint64_t Identity::hash(Identity *this)
{
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = (*(uint64_t (**)(Identity *))(*(void *)this + 88))(this);
  uint64_t v4 = *(void *)this;
  if (v3)
  {
    uint64_t v5 = (const void *)(*(uint64_t (**)(Identity *))(v4 + 88))(this);
LABEL_7:
    v2 += CFHash(v5);
    return v2;
  }
  uint64_t v6 = (*(uint64_t (**)(Identity *))(v4 + 64))(this);
  uint64_t v7 = *(void *)this;
  if (v6)
  {
    uint64_t v5 = (const void *)(*(uint64_t (**)(Identity *))(v7 + 64))(this);
    goto LABEL_7;
  }
  if ((*(uint64_t (**)(Identity *))(v7 + 48))(this))
  {
    uint64_t v5 = (const void *)(*(uint64_t (**)(Identity *))(*(void *)this + 48))(this);
    goto LABEL_7;
  }
  return v2;
}

CFTypeRef Identity::copyFormattingDesc(Identity *this, const __CFDictionary *a2)
{
  uint64_t v2 = (const void *)(*(uint64_t (**)(Identity *, const __CFDictionary *))(*(void *)this + 48))(this, a2);

  return CFRetain(v2);
}

CFStringRef Identity::copyDebugDesc(Identity *this)
{
  if ((*(uint64_t (**)(Identity *))(*(void *)this + 88))(this))
  {
    uint64_t v2 = (const void *)(*(uint64_t (**)(Identity *))(*(void *)this + 88))(this);
    uint64_t v3 = (void *)CFCopyDescription(v2);
  }
  else
  {
    uint64_t v3 = (void *)CFRetain(@"<null>");
  }
  uint64_t v4 = v3;
  CFAllocatorRef v5 = CFGetAllocator((char *)this - 16);
  CFAllocatorRef v6 = CFGetAllocator((char *)this - 16);
  uint64_t v7 = *((void *)this + 1);
  uint64_t v8 = (*(uint64_t (**)(Identity *))(*(void *)this + 48))(this);
  uint64_t v9 = (*(uint64_t (**)(Identity *))(*(void *)this + 64))(this);
  uint64_t v10 = *((void *)this + 2);
  uint64_t v11 = (*(uint64_t (**)(Identity *))(*(void *)this + 96))(this);
  CFStringRef v12 = CFStringCreateWithFormat(v5, 0, @"<CSIdentity %p [%p]>{class = %ld, full name = \"%@\", posix name = \"%@\", flags = %lx, uuid = %@, posixID = %d}", (char *)this - 16, v6, v7, v8, v9, v10, v4, v11);
  CFRelease(v4);
  return v12;
}

CFTypeRef Identity::createReferenceData(Identity *this, const __CFAllocator *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  CFTypeRef v29 = 0;
  uint64_t v30 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v4 = *(void *)this;
  uint64_t v24 = *((void *)this + 1);
  keys[0] = @"authority";
  uint64_t v5 = (*(uint64_t (**)(Identity *, const __CFAllocator *))(v4 + 72))(this, a2);
  values[0] = (void *)CFRetain(*(CFTypeRef *)(v5 + 8));
  keys[1] = @"class";
  CFAllocatorRef v6 = CFGetAllocator((char *)this - 16);
  values[1] = CFNumberCreate(v6, kCFNumberLongType, &v24);
  if ((*(uint64_t (**)(Identity *))(*(void *)this + 88))(this))
  {
    uint64_t v26 = @"uuid";
    CFAllocatorRef v7 = CFGetAllocator((char *)this - 16);
    CFUUIDRef v8 = (const __CFUUID *)(*(uint64_t (**)(Identity *))(*(void *)this + 88))(this);
    uint64_t v9 = (void *)CFUUIDCreateString(v7, v8);
    uint64_t v10 = 3;
    CFIndex v11 = 2;
  }
  else
  {
    if ((*(uint64_t (**)(Identity *))(*(void *)this + 64))(this))
    {
      uint64_t v26 = @"name";
      CFStringRef v12 = (const void *)(*(uint64_t (**)(Identity *))(*(void *)this + 64))(this);
      CFTypeRef v29 = CFRetain(v12);
      CFIndex v11 = 3;
    }
    else
    {
      CFIndex v11 = 2;
    }
    if (!(*(uint64_t (**)(Identity *))(*(void *)this + 48))(this)) {
      goto LABEL_9;
    }
    keys[v11] = @"full name";
    unint64_t v13 = (const void *)(*(uint64_t (**)(Identity *))(*(void *)this + 48))(this);
    uint64_t v9 = (void *)CFRetain(v13);
    uint64_t v10 = v11 + 1;
  }
  values[v11] = v9;
  CFIndex v11 = v10;
LABEL_9:
  uint64_t v14 = 0;
  while (values[v14])
  {
    if (v11 == ++v14) {
      goto LABEL_14;
    }
  }
  if (v11 == v14)
  {
LABEL_14:
    CFAllocatorRef v15 = CFGetAllocator((char *)this - 16);
    CFDictionaryRef v16 = CFDictionaryCreate(v15, (const void **)keys, (const void **)values, v11, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    goto LABEL_16;
  }
  CFDictionaryRef v16 = 0;
LABEL_16:
  unint64_t v17 = 0;
  uint64_t v18 = 8 * v11;
  do
  {
    CFIndex v19 = values[v17 / 8];
    if (v19) {
      CFRelease(v19);
    }
    v17 += 8;
  }
  while (v18 != v17);
  if (!v16) {
    return 0;
  }
  CFAllocatorRef v20 = CFWriteStreamCreateWithAllocatedBuffers(a2, a2);
  if (v20)
  {
    CFIndex v21 = v20;
    if (CFWriteStreamOpen(v20))
    {
      if (CFPropertyListWriteToStream(v16, v21, kCFPropertyListBinaryFormat_v1_0, 0) < 1) {
        CFTypeRef v22 = 0;
      }
      else {
        CFTypeRef v22 = CFWriteStreamCopyProperty(v21, (CFStreamPropertyKey)*MEMORY[0x1E4F1D440]);
      }
      CFWriteStreamClose(v21);
    }
    else
    {
      CFTypeRef v22 = 0;
    }
    CFRelease(v21);
  }
  else
  {
    CFTypeRef v22 = 0;
  }
  CFRelease(v16);
  return v22;
}

uint64_t Identity::copyPrincipalName(Identity *this)
{
  return 0;
}

uint64_t Identity::copyTrustSubjectDistinguishedName(Identity *this)
{
  return 0;
}

uint64_t Identity::authenticateCertificateChain(Identity *this, const __CFArray *a2, __CFError **a3)
{
  if (a3) {
    *a3 = CSCreateIdentityError(@"CSIdentityErrorDomain", -101);
  }
  return 0;
}

uint64_t Identity::authenticatePassword(Identity *this, const __CFString *a2, __CFError **a3)
{
  if (a3) {
    *a3 = CSCreateIdentityError(@"CSIdentityErrorDomain", -2);
  }
  return 0;
}

uint64_t IdentityAuthority::RegisterAuthority(IdentityAuthority *this, IdentityAuthority *a2)
{
  CFArrayRef v3 = (const __CFArray *)(*(uint64_t (**)(IdentityAuthority *, IdentityAuthority *))(*(void *)this + 112))(this, a2);
  _os_nospin_lock_lock();
  CFMutableDictionaryRef Mutable = (__CFDictionary *)IdentityAuthority::sInstances;
  if (!IdentityAuthority::sInstances)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    IdentityAuthority::sInstances = (uint64_t)Mutable;
  }
  if (!IdentityAuthority::sIssuerDict)
  {
    IdentityAuthority::sIssuerDict = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFMutableDictionaryRef Mutable = (__CFDictionary *)IdentityAuthority::sInstances;
  }
  uint64_t v5 = (const void *)*((void *)this + 1);
  CFAllocatorRef v6 = (char *)this - 16;
  CFDictionarySetValue(Mutable, v5, v6);
  if (v3)
  {
    CFIndex Count = CFArrayGetCount(v3);
    if (Count >= 1)
    {
      CFIndex v8 = Count;
      for (CFIndex i = 0; i != v8; ++i)
      {
        uint64_t v10 = (__CFDictionary *)IdentityAuthority::sIssuerDict;
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v3, i);
        CFDictionaryAddValue(v10, ValueAtIndex, v6);
      }
    }
    CFRelease(v3);
  }

  return _os_nospin_lock_unlock();
}

uint64_t IdentityAuthority::IdentityAuthorityWithIdentifier(IdentityAuthority *this, const __CFString *a2)
{
  _os_nospin_lock_lock();
  if (IdentityAuthority::sInstances)
  {
    CFStringRef Value = CFDictionaryGetValue((CFDictionaryRef)IdentityAuthority::sInstances, this);
    _os_nospin_lock_unlock();
    if (Value) {
      return (uint64_t)Value + 16;
    }
    else {
      return 0;
    }
  }
  else
  {
    _os_nospin_lock_unlock();
    return 0;
  }
}

void IdentityAuthority::InitClass(IdentityAuthority *this)
{
}

uint64_t IdentityAuthority::Class(IdentityAuthority *this)
{
  return IdentityAuthority::__cfClass;
}

void IdentityAuthority::IdentityAuthority(IdentityAuthority *this, const __CFString *a2, const __CFString *a3)
{
  *(void *)this = &unk_1ECB17290;
  CFAllocatorRef v6 = (char *)this - 16;
  CFAllocatorRef v7 = CFGetAllocator((char *)this - 16);
  *((void *)this + 1) = CFStringCreateCopy(v7, a2);
  CFAllocatorRef v8 = CFGetAllocator(v6);
  *((void *)this + 2) = CFStringCreateCopy(v8, a3);
}

void IdentityAuthority::~IdentityAuthority(CFTypeRef *this)
{
  *this = &unk_1ECB17290;
  CFRelease(this[1]);
  CFRelease(this[2]);

  std::__function::__func<BOOL (*)(objc_object *),std::allocator<BOOL (*)(objc_object *)>,BOOL ()(objc_object *)>::~__func(this);
}

{
  uint64_t v1;
  uint64_t vars8;

  IdentityAuthority::~IdentityAuthority(this);

  std::__function::__func<BOOL (*)(objc_object *),std::allocator<BOOL (*)(objc_object *)>,BOOL ()(objc_object *)>::~__func(v1);
}

BOOL IdentityAuthority::equal(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t IdentityAuthority::hash(IdentityAuthority *this)
{
  return (uint64_t)this - 16;
}

uint64_t IdentityAuthority::copyFormattingDesc(IdentityAuthority *this, const __CFDictionary *a2)
{
  return (*(uint64_t (**)(void))(*(void *)this + 48))();
}

CFStringRef IdentityAuthority::copyDebugDesc(IdentityAuthority *this)
{
  uint64_t v1 = (char *)this - 16;
  uint64_t v2 = (const void *)(*(uint64_t (**)(IdentityAuthority *))(*(void *)this + 48))(this);
  CFAllocatorRef v3 = CFGetAllocator(v1);
  CFAllocatorRef v4 = CFGetAllocator(v1);
  CFStringRef v5 = CFStringCreateWithFormat(v3, 0, @"<CSIdentityAuthority %p [%p]>{localizedName = \"%@\"}", v1, v4, v2);
  CFRelease(v2);
  return v5;
}

uint64_t IdentityAuthority::copyIdentityWithName(IdentityAuthority *this, const __CFString *a2, uint64_t a3, Identity **a4, __CFError **a5)
{
  CFAllocatorRef v10 = CFGetAllocator((char *)this - 16);
  uint64_t v11 = (*(uint64_t (**)(IdentityAuthority *, CFAllocatorRef, const __CFString *, uint64_t, uint64_t))(*(void *)this + 72))(this, v10, a2, 1, a3);
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, __CFError **))(*(void *)v11 + 56))(v11, 2, a5);
    if (v13)
    {
      CFArrayRef v14 = (const __CFArray *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 48))(v12);
      if (CFArrayGetCount(v14) < 1)
      {
        *a4 = 0;
      }
      else
      {
        CFDictionaryRef ValueAtIndex = (char *)CFArrayGetValueAtIndex(v14, 0);
        *a4 = (Identity *)(ValueAtIndex + 16);
        CFRetain(ValueAtIndex);
      }
      CFRelease(v14);
    }
    CFRelease((CFTypeRef)(v12 - 16));
  }
  else
  {
    uint64_t v13 = 0;
    if (a5) {
      *a5 = CSCreateIdentityError(@"CSIdentityErrorDomain", -2);
    }
  }
  return v13;
}

uint64_t IdentityAuthority::createQueryWithName(IdentityAuthority *this, const __CFAllocator *a2, const __CFString *a3)
{
  return 0;
}

uint64_t IdentityAuthority::createQueryWithProperties(IdentityAuthority *this, const __CFAllocator *a2, const void *a3)
{
  return 0;
}

uint64_t IdentityAuthority::authenticateNameAndPassword(IdentityAuthority *this, const __CFString *a2, const __CFString *a3, __CFError **a4)
{
  if (a4) {
    *a4 = CSCreateIdentityError(@"CSIdentityErrorDomain", -2);
  }
  return 0;
}

uint64_t IdentityAuthority::copyCertificateIssuerNames(IdentityAuthority *this)
{
  return 0;
}

uint64_t IdentityAuthority::copyPrincipalForCertificate()
{
  return 0;
}

uint64_t IdentityAuthority::copyPrincipalForNamePair(IdentityAuthority *this, const __CFString *a2, const __CFString *a3)
{
  return 0;
}

uint64_t IdentityAuthority::copyTrustSubjectDistinguishedNameForNamePair(IdentityAuthority *this, const __CFString *a2, const __CFString *a3)
{
  return 0;
}

uint64_t IdentityAuthority::copyTrustAnchorDistinguishedName(IdentityAuthority *this)
{
  return 0;
}

uint64_t CFClass::FinalizeObj(CFClass *this, const void *a2)
{
  return (*(uint64_t (**)(void))(*((void *)this + 2) + 8))();
}

uint64_t CFClass::EqualObj(CFClass *this, const void *a2, const void *a3)
{
  return (*(uint64_t (**)(void))(*((void *)this + 2) + 16))();
}

uint64_t CFClass::HashObj(CFClass *this, const void *a2)
{
  return (*(uint64_t (**)(void))(*((void *)this + 2) + 24))();
}

uint64_t CFClass::CopyFormattingDescObj(CFClass *this, const void *a2, const __CFDictionary *a3)
{
  return (*(uint64_t (**)(void))(*((void *)this + 2) + 32))();
}

uint64_t CFClass::CopyDebugDescObj(CFClass *this, const void *a2)
{
  return (*(uint64_t (**)(void))(*((void *)this + 2) + 40))();
}

void CFClass::CFClass(CFClass *this, const char *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = a2;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = CFClass::FinalizeObj;
  *((void *)this + 5) = CFClass::EqualObj;
  *((void *)this + 6) = CFClass::HashObj;
  *((void *)this + 7) = CFClass::CopyFormattingDescObj;
  *((void *)this + 8) = CFClass::CopyDebugDescObj;
  *((void *)this + 12) = _CFRuntimeRegisterClass();
}

uint64_t CFObject::Allocate(CFObject *this, unint64_t a2, const CFClass *a3, const __CFAllocator *a4)
{
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance) {
    return Instance + 16;
  }
  else {
    return 0;
  }
}

BOOL CFObject::equal(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t CFObject::hash(CFObject *this)
{
  return (uint64_t)this - 16;
}

void IdentityQuery::InitClass(IdentityQuery *this)
{
}

uint64_t IdentityQuery::Class(IdentityQuery *this)
{
  return IdentityQuery::__cfClass;
}

uint64_t IdentityQuery::copyFormattingDesc(IdentityQuery *this, const __CFDictionary *a2)
{
  return (*(uint64_t (**)(void))(*(void *)this + 40))();
}

CFStringRef IdentityQuery::copyDebugDesc(IdentityQuery *this)
{
  uint64_t v1 = (char *)this - 16;
  CFAllocatorRef v2 = CFGetAllocator((char *)this - 16);
  CFAllocatorRef v3 = CFGetAllocator(v1);
  return CFStringCreateWithFormat(v2, 0, @"<CSIdentityQuery %p [%p]>", v1, v3);
}

CFTypeID CSIdentityAuthorityGetTypeID(void)
{
  return *(void *)(IdentityAuthority::Class(v0) + 96);
}

CFStringRef CSIdentityAuthorityCopyLocalizedName(CSIdentityAuthorityRef authority)
{
  return (CFStringRef)(*(uint64_t (**)(void))(*((void *)authority + 2) + 48))();
}

uint64_t _CSGetAppleIDIdentityAuthority()
{
  uint64_t v0 = (AppleIDIdentityAuthority *)pthread_once(&gCSIdentityInitLock, (void (*)(void))_CSIdentityInitOnce);
  return AppleIDIdentityAuthority::Authority(v0) - 16;
}

char *_CSIdentityAuthorityCopyIdentityWithName(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  CFAllocatorRef v4 = 0;
  IdentityAuthority::copyIdentityWithName((IdentityAuthority *)(a1 + 16), a2, a3, &v4, 0);
  if (v4) {
    return (char *)v4 - 16;
  }
  else {
    return 0;
  }
}

CFErrorRef CSCreateIdentityError(const void *a1, CFIndex a2)
{
  userInfoKeys[2] = *(void **)MEMORY[0x1E4F143B8];
  CFAllocatorRef v3 = (void *)*MEMORY[0x1E4F1D190];
  userInfoKeys[0] = *(void **)MEMORY[0x1E4F1D140];
  userInfoKeys[1] = v3;
  CFTypeRef cf = 0;
  int v4 = CFEqual(a1, @"CSIdentityErrorDomain");
  CFStringRef v5 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (v4)
  {
    CFErrorRef v6 = 0;
    CFErrorRef v7 = 0;
    if (a2) {
      goto LABEL_6;
    }
  }
  else
  {
    CFErrorRef v6 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CFErrorDomain)*MEMORY[0x1E4F1D158], a2, 0);
    CFTypeRef cf = v6;
  }
  a2 = -2;
  CFErrorRef v7 = v6;
LABEL_6:
  pthread_once(&errorOnceLock, (void (*)(void))createErrorMaps);
  CFStringRef Value = (__CFString *)CFDictionaryGetValue((CFDictionaryRef)errorDescMap, (const void *)a2);
  uint64_t v9 = @"Unknown error";
  if (Value) {
    uint64_t v9 = Value;
  }
  userInfoValues = v9;
  if (v7) {
    CFIndex v10 = 2;
  }
  else {
    CFIndex v10 = 1;
  }
  CFErrorRef v11 = CFErrorCreateWithUserInfoKeysAndValues(*v5, @"CSIdentityErrorDomain", a2, (const void *const *)userInfoKeys, (const void *const *)&userInfoValues, v10);
  if (cf) {
    CFRelease(cf);
  }
  return v11;
}

CFDictionaryRef createErrorMaps(void)
{
  CFDictionaryRef result = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&errorKeys, (const void **)&errorDescriptions, 16, 0, 0);
  errorDescMap = (uint64_t)result;
  return result;
}

CFTypeID CSIdentityGetTypeID(void)
{
  return *(void *)(Identity::Class(v0) + 96);
}

CSIdentityRef CSIdentityCreateCopy(CFAllocatorRef allocator, CSIdentityRef identity)
{
  uint64_t v2 = (*(uint64_t (**)(char *, CFAllocatorRef))(*((void *)identity + 2) + 352))((char *)identity + 16, allocator);
  if (v2) {
    return (CSIdentityRef)(v2 - 16);
  }
  else {
    return 0;
  }
}

CFStringRef CSIdentityGetFullName(CSIdentityRef identity)
{
  return (CFStringRef)(*(uint64_t (**)(void))(*((void *)identity + 2) + 48))();
}

CFStringRef CSIdentityGetPosixName(CSIdentityRef identity)
{
  return (CFStringRef)(*(uint64_t (**)(void))(*((void *)identity + 2) + 64))();
}

CSIdentityClass CSIdentityGetClass(CSIdentityRef identity)
{
  return *((void *)identity + 3);
}

CSIdentityAuthorityRef CSIdentityGetAuthority(CSIdentityRef identity)
{
  return (CSIdentityAuthorityRef)((*(uint64_t (**)(void))(*((void *)identity + 2) + 72))() - 16);
}

CFDataRef CSIdentityCreatePersistentReference(CFAllocatorRef allocator, CSIdentityRef identity)
{
  return (CFDataRef)(*(uint64_t (**)(char *, CFAllocatorRef))(*((void *)identity + 2) + 376))((char *)identity + 16, allocator);
}

uint64_t _CSIdentityAuthenticateUsingCertificateChain(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 280))();
}

uint64_t _CSIdentityAuthenticateUsingCertificate(void *a1, void *a2, uint64_t a3)
{
  values = a2;
  CFAllocatorRef v5 = CFGetAllocator(a1);
  CFArrayRef v6 = CFArrayCreate(v5, (const void **)&values, 1, MEMORY[0x1E4F1D510]);
  uint64_t v7 = (*(uint64_t (**)(void *, CFArrayRef, uint64_t))(a1[2] + 280))(a1 + 2, v6, a3);
  CFRelease(v6);
  return v7;
}

uint64_t _CSIdentityUpdateLinkedIdentityProvisioning(uint64_t a1, CFErrorRef *a2)
{
  if (a2) {
    *a2 = CSCreateIdentityError(@"CSIdentityErrorDomain", -4);
  }
  return 0;
}

uint64_t _CSDefaultLog()
{
  if (_CSDefaultLog_onceToken != -1) {
    dispatch_once(&_CSDefaultLog_onceToken, &__block_literal_global_89);
  }
  return _CSDefaultLog_log;
}

uint64_t CSIdentityQueryClient::retain(uint64_t this)
{
  uint64_t v1 = *(uint64_t (**)(void))(this + 24);
  if (v1)
  {
    uint64_t v2 = this;
    this = v1(*(void *)(this + 16));
    *(void *)(v2 + 16) = this;
  }
  return this;
}

uint64_t CSIdentityQueryClient::release(uint64_t this)
{
  uint64_t v1 = *(uint64_t (**)(void))(this + 32);
  if (v1) {
    return v1(*(void *)(this + 16));
  }
  return this;
}

uint64_t CSIdentityQueryClient::receiveEvent(uint64_t this, IdentityQuery *a2, uint64_t a3, const __CFArray *a4, __CFError *a5)
{
  CFAllocatorRef v5 = *(uint64_t (**)(char *, uint64_t, const __CFArray *, __CFError *, void))(this + 48);
  if (v5) {
    return v5((char *)a2 - 16, a3, a4, a5, *(void *)(this + 16));
  }
  return this;
}

CFTypeID CSIdentityQueryGetTypeID(void)
{
  return *(void *)(IdentityQuery::Class(v0) + 96);
}

CSIdentityQueryRef CSIdentityQueryCreateForName(CFAllocatorRef allocator, CFStringRef name, CSIdentityQueryStringComparisonMethod comparisonMethod, CSIdentityClass identityClass, CSIdentityAuthorityRef authority)
{
  uint64_t v5 = (*(uint64_t (**)(char *, CFAllocatorRef, CFStringRef, CSIdentityQueryStringComparisonMethod, CSIdentityClass))(*((void *)authority + 2) + 72))((char *)authority + 16, allocator, name, comparisonMethod, identityClass);
  if (v5) {
    return (CSIdentityQueryRef)(v5 - 16);
  }
  else {
    return 0;
  }
}

CSIdentityQueryRef CSIdentityQueryCreateForPersistentReference(CFAllocatorRef allocator, CFDataRef referenceData)
{
  pthread_once(&gCSIdentityInitLock, (void (*)(void))_CSIdentityInitOnce);
  CFDictionaryRef v4 = (const __CFDictionary *)CFPropertyListCreateFromXMLData(allocator, referenceData, 0, 0);
  if (v4)
  {
    CFDictionaryRef v5 = v4;
    CFTypeID v6 = CFGetTypeID(v4);
    if (v6 == CFDictionaryGetTypeID()
      && (CFStringRef Value = (IdentityAuthority *)CFDictionaryGetValue(v5, @"authority")) != 0
      && (CFAllocatorRef v8 = Value, v9 = CFGetTypeID(Value), v9 == CFStringGetTypeID())
      && (uint64_t v11 = IdentityAuthority::IdentityAuthorityWithIdentifier(v8, v10)) != 0)
    {
      uint64_t v12 = (*(uint64_t (**)(uint64_t, CFAllocatorRef, const __CFDictionary *))(*(void *)v11 + 96))(v11, allocator, v5);
    }
    else
    {
      uint64_t v12 = 0;
    }
    CFRelease(v5);
  }
  else
  {
    uint64_t v12 = 0;
  }
  if (v12) {
    return (CSIdentityQueryRef)(v12 - 16);
  }
  else {
    return 0;
  }
}

CFArrayRef CSIdentityQueryCopyResults(CSIdentityQueryRef query)
{
  return (CFArrayRef)(*(uint64_t (**)(void))(*((void *)query + 2) + 48))();
}

Boolean CSIdentityQueryExecute(CSIdentityQueryRef query, CSIdentityQueryFlags flags, CFErrorRef *error)
{
  return (*(uint64_t (**)(void))(*((void *)query + 2) + 56))();
}

Boolean CSIdentityQueryExecuteAsynchronously(CSIdentityQueryRef query, CSIdentityQueryFlags flags, const CSIdentityQueryClientContext *clientContext, CFRunLoopRef runLoop, CFStringRef runLoopMode)
{
}

void CSIdentityQueryStop(CSIdentityQueryRef query)
{
}

void CSIdentityQueryClient::~CSIdentityQueryClient(CSIdentityQueryClient *this)
{
}

CFStringRef _CSBackToMyMacCopyDomain()
{
  uint64_t v0 = geteuid();
  CFDictionaryRef v1 = copyBackToMyMacPreferences();
  if (!v1) {
    return 0;
  }
  CFDictionaryRef v2 = v1;
  CFStringRef NormalizedDomainName = CFStringCreateWithFormat(0, 0, @"%d", v0);
  if (NormalizedDomainName)
  {
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v2, NormalizedDomainName);
    if (Value)
    {
      CFStringRef v5 = Value;
      CFRetain(Value);
      CFRelease(NormalizedDomainName);
      CFRelease(v2);
      CFStringRef NormalizedDomainName = createNormalizedDomainName(v5);
      CFDictionaryRef v2 = (const __CFDictionary *)v5;
    }
    else
    {
      CFRelease(NormalizedDomainName);
      CFStringRef NormalizedDomainName = 0;
    }
  }
  CFRelease(v2);
  return NormalizedDomainName;
}

CFMutableStringRef createNormalizedDomainName(const __CFString *a1)
{
  if (!CFStringGetLength(a1)) {
    return 0;
  }
  MutableCFArrayRef Copy = CFStringCreateMutableCopy(0, 0, a1);
  if (!CFStringHasSuffix(MutableCopy, @".")) {
    CFStringAppend(MutableCopy, @".");
  }
  CFStringLowercase(MutableCopy, 0);
  return MutableCopy;
}

__CFSet *_CSBackToMyMacCopyDomains()
{
  v11[1] = *MEMORY[0x1E4F143B8];
  CFMutableDictionaryRef Mutable = CFSetCreateMutable(0, 0, MEMORY[0x1E4F1D050]);
  CFDictionaryRef v1 = copyBackToMyMacPreferences();
  if (v1)
  {
    CFDictionaryRef v2 = v1;
    CFIndex Count = CFDictionaryGetCount(v1);
    if (Count)
    {
      uint64_t v4 = Count;
      MEMORY[0x1F4188790](Count);
      CFTypeID v6 = (const void **)((char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
      size_t v7 = v5 >= 0x200 ? 512 : v5;
      bzero((char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
      CFDictionaryGetKeysAndValues(v2, 0, v6);
      if (v4 >= 1)
      {
        do
        {
          CFMutableStringRef NormalizedDomainName = createNormalizedDomainName((const __CFString *)*v6);
          if (NormalizedDomainName)
          {
            CFMutableStringRef v9 = NormalizedDomainName;
            CFSetSetValue(Mutable, NormalizedDomainName);
            CFRelease(v9);
          }
          ++v6;
          --v4;
        }
        while (v4);
      }
    }
    CFRelease(v2);
  }
  return Mutable;
}

CFDictionaryRef copyBackToMyMacPreferences()
{
  uint64_t v0 = SCPreferencesCreate(0, @"com.apple.BackToMyMac", 0);
  if (!v0) {
    return 0;
  }
  CFDictionaryRef v1 = v0;
  CFDictionaryRef Value = SCPreferencesPathGetValue(v0, @"/System/Network/BackToMyMac");
  CFDictionaryRef v3 = Value;
  if (Value) {
    CFRetain(Value);
  }
  CFRelease(v1);
  return v3;
}

uint64_t _CSDeviceSupportsAirDrop()
{
  CFBooleanRef v0 = (const __CFBoolean *)_CSDeviceSupportsAirDrop_supportsAirDrop;
  if (_CSDeviceSupportsAirDrop_supportsAirDrop) {
    goto LABEL_27;
  }
  CFBooleanRef v1 = (const __CFBoolean *)CFPreferencesCopyAppValue(@"DisableAirDrop", @"com.apple.NetworkBrowser");
  if (!v1) {
    goto LABEL_11;
  }
  CFBooleanRef v2 = v1;
  CFTypeID v3 = CFGetTypeID(v1);
  if (v3 == CFBooleanGetTypeID())
  {
    int Value = CFBooleanGetValue(v2);
  }
  else
  {
    CFTypeID v5 = CFGetTypeID(v2);
    if (v5 != CFStringGetTypeID())
    {
      CFRelease(v2);
      goto LABEL_11;
    }
    int Value = CFEqual(v2, @"1");
  }
  int v6 = Value;
  CFRelease(v2);
  if (!v6)
  {
    CFBooleanRef v0 = (const __CFBoolean *)_CSDeviceSupportsAirDrop_supportsAirDrop;
    if (_CSDeviceSupportsAirDrop_supportsAirDrop) {
      goto LABEL_27;
    }
    goto LABEL_12;
  }
LABEL_11:
  _CSDeviceSupportsAirDrop_supportsAirDrop = *MEMORY[0x1E4F1CFC8];
  CFBooleanRef v0 = (const __CFBoolean *)_CSDeviceSupportsAirDrop_supportsAirDrop;
  if (_CSDeviceSupportsAirDrop_supportsAirDrop) {
    goto LABEL_27;
  }
LABEL_12:
  CFBooleanRef v7 = (const __CFBoolean *)browseAllInterfacesEnabled_enabled;
  if (!browseAllInterfacesEnabled_enabled)
  {
    CFBooleanRef v8 = (const __CFBoolean *)CFPreferencesCopyAppValue(@"BrowseAllInterfaces", @"com.apple.NetworkBrowser");
    if (!v8)
    {
      uint64_t v12 = (const __CFBoolean **)MEMORY[0x1E4F1CFD0];
LABEL_23:
      CFBooleanRef v7 = *v12;
      browseAllInterfacesEnabled_enabled = (uint64_t)*v12;
      goto LABEL_24;
    }
    CFBooleanRef v9 = v8;
    CFTypeID v10 = CFGetTypeID(v8);
    if (v10 == CFBooleanGetTypeID())
    {
      int v11 = CFBooleanGetValue(v9);
    }
    else
    {
      CFTypeID v13 = CFGetTypeID(v9);
      if (v13 != CFStringGetTypeID())
      {
        int v14 = 1;
LABEL_21:
        CFRelease(v9);
        uint64_t v12 = (const __CFBoolean **)MEMORY[0x1E4F1CFD0];
        if (!v14) {
          uint64_t v12 = (const __CFBoolean **)MEMORY[0x1E4F1CFC8];
        }
        goto LABEL_23;
      }
      int v11 = CFEqual(v9, @"1");
    }
    int v14 = v11;
    goto LABEL_21;
  }
LABEL_24:
  if (CFBooleanGetValue(v7))
  {
    _CSDeviceSupportsAirDrop_supportsAirDrop = *MEMORY[0x1E4F1CFD0];
    CFBooleanRef v0 = (const __CFBoolean *)_CSDeviceSupportsAirDrop_supportsAirDrop;
    if (_CSDeviceSupportsAirDrop_supportsAirDrop) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  CFBooleanRef v0 = (const __CFBoolean *)_CSDeviceSupportsAirDrop_supportsAirDrop;
  if (!_CSDeviceSupportsAirDrop_supportsAirDrop)
  {
LABEL_26:
    CFBooleanRef v0 = (const __CFBoolean *)*MEMORY[0x1E4F1CFC8];
    _CSDeviceSupportsAirDrop_supportsAirDrop = *MEMORY[0x1E4F1CFC8];
  }
LABEL_27:

  return CFBooleanGetValue(v0);
}

uint64_t _CSIsComputerToComputerEnabled()
{
  return 0;
}

uint64_t _CSIsWirelessAccessPointEnabled()
{
  return 0;
}

uint64_t _CSEnableWirelessP2P()
{
  return 0;
}

uint64_t _CSDisassociateWireless()
{
  return 0;
}

CFStringRef _CSCopyCommentForServerName(const __CFAllocator *a1, CFStringRef theString)
{
  if (_CSCopyCommentForServerName_sOnce != -1) {
    dispatch_once(&_CSCopyCommentForServerName_sOnce, &__block_literal_global_24);
  }
  CFStringEncoding v4 = _CSCopyCommentForServerName_dosEncoding;
  CFIndex Length = CFStringGetLength(theString);
  v17.locatioCFIndex n = 0;
  v17.length = Length;
  CFIndex Bytes = CFStringGetBytes(theString, v17, v4, 0, 0, 0, 0, 0);
  range.locatioCFIndex n = Bytes;
  if (Bytes == Length)
  {
    return CFStringCreateCopy(a1, theString);
  }
  else
  {
    CFIndex v8 = Bytes;
    MutableCFArrayRef Copy = CFStringCreateMutableCopy(a1, 0, theString);
    range.length = 0;
    if (v8 < Length)
    {
      CFIndex v10 = 0;
      do
      {
        while (1)
        {
          CFRange RangeOfComposedCharactersAtIndex = CFStringGetRangeOfComposedCharactersAtIndex(theString, v8);
          range.length = RangeOfComposedCharactersAtIndex.location
                       + RangeOfComposedCharactersAtIndex.length
                       - range.location;
          v18.length = Length - (RangeOfComposedCharactersAtIndex.location + RangeOfComposedCharactersAtIndex.length);
          v18.locatioCFIndex n = RangeOfComposedCharactersAtIndex.location + RangeOfComposedCharactersAtIndex.length;
          CFIndex v12 = CFStringGetBytes(theString, v18, v4, 0, 0, 0, 0, 0);
          CFIndex v13 = range.length;
          if (v12 <= 0) {
            break;
          }
          CFIndex v14 = v12;
          range.location += v10;
          CFStringTransform(MutableCopy, &range, @"Publishing-Any; Any-Latin; NFKD; [:^ASCII:] Remove", 0);
          CFIndex v10 = v10 - v13 + range.length;
          CFIndex v8 = v14 + RangeOfComposedCharactersAtIndex.location + RangeOfComposedCharactersAtIndex.length;
          range.locatioCFIndex n = v8;
          range.length = 0;
          if (v8 >= Length) {
            goto LABEL_16;
          }
        }
        CFIndex v8 = range.location + range.length;
      }
      while (range.location + range.length < Length);
      if (range.length >= 1) {
        CFStringTransform(MutableCopy, &range, @"Publishing-Any; Any-Latin; NFKD; [:^ASCII:] Remove", 0);
      }
    }
LABEL_16:
    CFStringNormalize(MutableCopy, kCFStringNormalizationFormC);
    return MutableCopy;
  }
}

CFStringRef _CSCreatePosixNameFromString(const __CFAllocator *a1, const __CFString *a2)
{
  return createPosixNameFromString(a1, a2, 1);
}

CFStringRef createPosixNameFromString(const __CFAllocator *a1, CFStringRef theString, int a3)
{
  CFIndex Length = CFStringGetLength(theString);
  if (Length < 1) {
    return 0;
  }
  CFIndex v7 = Length;
  CFArrayRef v8 = CFLocaleCopyPreferredLanguages();
  if (v8)
  {
    CFArrayRef v9 = v8;
    if (CFArrayGetCount(v8) < 1)
    {
      CFLocaleRef v11 = 0;
    }
    else
    {
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v9, 0);
      CFLocaleRef v11 = CFLocaleCreate(a1, ValueAtIndex);
    }
    CFRelease(v9);
  }
  else
  {
    CFLocaleRef v11 = 0;
  }
  v21.locatioCFIndex n = 0;
  v21.length = v7;
  v22.locatioCFIndex n = 0;
  v22.length = v7;
  CFStringTokenizerRef v12 = CFStringTokenizerCreate(a1, theString, v22, 0x10004uLL, v11);
  if (!v12)
  {
    MutableCFArrayRef Copy = CFStringCreateMutableCopy(a1, 0, theString);
    if (MutableCopy) {
      goto LABEL_14;
    }
LABEL_27:
    CFStringRef v19 = 0;
    if (!v11) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  CFIndex v13 = v12;
  MutableCFArrayRef Copy = CFStringCreateMutable(a1, 0);
  while (CFStringTokenizerAdvanceToNextToken(v13))
  {
    CFStringRef v15 = (const __CFString *)CFStringTokenizerCopyCurrentTokenAttribute(v13, 0x10000uLL);
    if (v15)
    {
      CFStringRef v16 = v15;
      CFStringAppend(MutableCopy, v15);
      CFRelease(v16);
    }
  }
  CFRelease(v13);
  if (!MutableCopy) {
    goto LABEL_27;
  }
LABEL_14:
  v21.locatioCFIndex n = 0;
  v21.length = CFStringGetLength(MutableCopy);
  CFStringTransform(MutableCopy, &v21, @"Latin; NFD; [^-_a-zA-Z0-9] Remove", 0);
  if (a3) {
    CFStringLowercase(MutableCopy, v11);
  }
  uint64_t v17 = CFStringGetLength(MutableCopy);
  if (v17 >= 255) {
    v18.length = 255;
  }
  else {
    v18.length = v17;
  }
  v21.locatioCFIndex n = 0;
  v21.length = v18.length;
  v18.locatioCFIndex n = 0;
  CFStringRef v19 = CFStringCreateWithSubstring(a1, MutableCopy, v18);
  CFRelease(MutableCopy);
  if (v11) {
LABEL_20:
  }
    CFRelease(v11);
LABEL_21:
  if (v19 && !CFStringGetLength(v19))
  {
    CFRelease(v19);
    return 0;
  }
  return v19;
}

CFStringRef _CSCopyLocalHostnameForComputerName(const __CFAllocator *a1, CFStringRef theString)
{
  MutableCFArrayRef Copy = CFStringCreateMutableCopy(a1, 0, theString);
  v7.length = CFStringGetLength(MutableCopy);
  v7.locatioCFIndex n = 0;
  CFStringFindAndReplace(MutableCopy, @" ", @"-", v7, 0);
  v8.length = CFStringGetLength(MutableCopy);
  v8.locatioCFIndex n = 0;
  CFStringFindAndReplace(MutableCopy, @"_", @"-", v8, 0);
  do
  {
    v9.length = CFStringGetLength(MutableCopy);
    v9.locatioCFIndex n = 0;
  }
  while (CFStringFindAndReplace(MutableCopy, @"--", @"-", v9, 0));
  CFStringTrim(MutableCopy, @"-");
  CFStringRef PosixNameFromString = createPosixNameFromString(a1, MutableCopy, 0);
  CFRelease(MutableCopy);
  if (PosixNameFromString) {
    return PosixNameFromString;
  }

  return CFStringCreateCopy(a1, @"Macintosh");
}

void _XCFStringHashCaseInsensitive_cold_1(os_log_t log)
{
  *(_WORD *)CFBooleanRef v1 = 0;
  _os_log_error_impl(&dword_182959000, log, OS_LOG_TYPE_ERROR, "LaunchServices: unable to create character buffer for string to be hashed", v1, 2u);
}

void _FSNodeGetNonFictionalDeviceNumber(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl(&dword_182959000, a2, OS_LOG_TYPE_ERROR, "Could not get non-fictional device number: %@", (uint8_t *)&v2, 0xCu);
}

void _LSAliasGet_cold_1(uint64_t a1, uint8_t *buf, uint64_t a3, os_log_t log)
{
  *(_DWORD *)long long buf = 134218240;
  *(void *)(buf + 4) = a1;
  *((_WORD *)buf + 6) = 2048;
  *(void *)(buf + 14) = a3;
  _os_log_error_impl(&dword_182959000, log, OS_LOG_TYPE_ERROR, "bad alias at %p, size %ld too big\n", buf, 0x16u);
}

void computeIdentityString(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl(&dword_182959000, a2, OS_LOG_TYPE_ERROR, "could not escape bookmark string: %@", (uint8_t *)&v2, 0xCu);
}

void ___ZN14LaunchServices13AppsAnalyticsL16sendCurrentStateEv_block_invoke_cold_1(uint64_t *a1, uint64_t a2, os_log_t log)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  int v4 = 138412546;
  uint64_t v5 = v3;
  __int16 v6 = 2112;
  uint64_t v7 = a2;
  _os_log_error_impl(&dword_182959000, log, OS_LOG_TYPE_ERROR, "couldn't bind %@: %@", (uint8_t *)&v4, 0x16u);
}

void evaluateBundleNoIOCommon(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void getSharedMCProfileConnection_cold_1()
{
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_19(&dword_182959000, v0, v1, "LSRestrictionsManager: [MCProfileConnection sharedConnection] returned nil", v2, v3, v4, v5, v6);
}

void _LSServer_RefreshContentInFrameworkAtURL_cold_1()
{
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_1(&dword_182959000, v0, v1, "couldn't update framework %@: %@");
}

void _LSUnregisterAppWithBundleID_cold_1()
{
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_17_0(&dword_182959000, v0, v1, "LaunchServices: Failed to unregister app %@ with error %d");
}

void _LSUnregisterAppWithBundleID_cold_2(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void handleSaveObserverBehavior_cold_1()
{
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_0(&dword_182959000, v0, v1, "operation succeeded but no save token was provided? That's wrong.", v2, v3, v4, v5, v6);
}

void _LSServer_UpdateDatabaseWithInfo_cold_1(uint64_t a1)
{
  LODWORD(v3) = 138478083;
  *(void *)((char *)&v3 + 4) = a1;
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_1(&dword_182959000, v1, v2, "Error attempting to update bundle record for %{private}@: %{public}@", (void)v3, DWORD2(v3));
}

void _LSServer_UpdateDatabaseWithInfo_cold_2()
{
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_17_0(&dword_182959000, v0, v1, "Could not create bundle record updater for %@ (placeholder %d): likely missing in the database");
}

void _LSServer_PerformExternalRebuildRegistration_cold_1()
{
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_19(&dword_182959000, v0, v1, "no rebuild is in progress, cannot register items", v2, v3, v4, v5, v6);
}

void _LSServer_PerformExternalRebuildRegistration_cold_2(uint64_t a1, NSObject *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  objc_opt_class();
  OUTLINED_FUNCTION_2_0();
  id v4 = v3;
  _os_log_error_impl(&dword_182959000, a2, OS_LOG_TYPE_ERROR, "don't know how to register %@ yet", v5, 0xCu);
}

void _LSServer_NoteMigratorRunningInMigration_cold_1()
{
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_19(&dword_182959000, v0, v1, "no rebuild is in progress, so why is our migrator running?", v2, v3, v4, v5, v6);
}

void _LSServer_LSEnumerateAndRegisterAllCryptexContentWithContext_cold_1()
{
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_3(&dword_182959000, v0, v1, "error enumerating cryptex content! %@", v2, v3, v4, v5, v6);
}

void _getBlockToUpdateBundleRecordFromMIAndNotifyIfChanged_cold_1()
{
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_1(&dword_182959000, v0, v1, "Couldn't determine if record for %@ needed to be updated, failed to create FSNode for %@");
}

void _LSServer_NoteTerminationRequestForMISync_cold_1()
{
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_19(&dword_182959000, v0, v1, "MI sync was running. setting sync interrupted file.", v2, v3, v4, v5, v6);
}

void LSApplicationStateChangedCallback_cold_1()
{
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_1_3(&dword_182959000, v0, v1, "Received %@ with %@");
}

void __LSApplicationWorkspacePluginsChangedCallback_block_invoke_cold_1()
{
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_19(&dword_182959000, v0, v1, "Using expensive fallback path for obtaining plugin proxies from install notifications. This process should be entitled to use the LS database.", v2, v3, v4, v5, v6);
}

void __LSApplicationWorkspacePluginsChangedCallback_block_invoke_cold_2()
{
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_3(&dword_182959000, v0, v1, "could not make proxies from uuids in optimized path! %@", v2, v3, v4, v5, v6);
}

void __unsubscribeFromLSAWDistributedNotification_block_invoke_cold_1()
{
  OUTLINED_FUNCTION_11_0(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_4_0(&dword_182959000, v0, v1, "Subscriber count negative overflow for %@. Some caller may have over-unsubscribed its LSAW observer, or neglected to add it in the first place.", v2, v3, v4, v5, v6);
}

void __pluginQueryFault_block_invoke_cold_1()
{
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_0(&dword_182959000, v0, v1, "59638328 Plugin query method called", v2, v3, v4, v5, v6);
}

void _LSSetCrashReporterMessage_cold_1()
{
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_2(&dword_182959000, v0, v1, "%s", v2, v3, v4, v5, v6);
}

void ___getBlockToUpdatePluginRecordFromMIAndNotifyIfChanged_block_invoke_cold_1()
{
  OUTLINED_FUNCTION_16_0();
  OUTLINED_FUNCTION_1(&dword_182959000, v0, v1, "Failed to create LSPlugInKitProxy object for newly registered extension %@ (%@), not sending notifications");
}

void _LSWriteBundlePlaceholderToURLInternal(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl(&dword_182959000, a2, OS_LOG_TYPE_ERROR, "Creating placeholder for bundle %@ with no iTunesMetadata.plist, this app cannot be recovered!", (uint8_t *)&v2, 0xCu);
}

void LaunchServices::BindingEvaluator::ContentTypeBindingAllowsOverride(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 138543362;
  uint64_t v3 = a1;
  _os_log_debug_impl(&dword_182959000, a2, OS_LOG_TYPE_DEBUG, "Override allowed for content type %{public}@", (uint8_t *)&v2, 0xCu);
}

void LaunchServices::BindingEvaluation::getKindStringFromState(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_error_impl(&dword_182959000, log, OS_LOG_TYPE_ERROR, "getKindStringFromState result=nil ", v1, 2u);
}

void LaunchServices::BindingEvaluation::getKindStringFromState(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl(&dword_182959000, a2, OS_LOG_TYPE_ERROR, "Canonical string not found for kind string %@", (uint8_t *)&v2, 0xCu);
}

void LaunchServices::BindingEvaluation::getKindStringFromState(uint64_t a1, int a2, os_log_t log)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 67109378;
  v3[1] = a2;
  __int16 v4 = 2112;
  uint64_t v5 = a1;
  _os_log_error_impl(&dword_182959000, log, OS_LOG_TYPE_ERROR, "isBetaApp bundle lookup error %d, node %@", (uint8_t *)v3, 0x12u);
}

void ___ZL18_LSSetCrashMessageP8NSString_block_invoke_cold_1(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 136315138;
  uint64_t v3 = a1;
  _os_log_debug_impl(&dword_182959000, a2, OS_LOG_TYPE_DEBUG, "%s", (uint8_t *)&v2, 0xCu);
}

void _LSBundleFindWithNode_cold_1(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 138477827;
  uint64_t v3 = a1;
  _os_log_debug_impl(&dword_182959000, a2, OS_LOG_TYPE_DEBUG, "Bundle %{private}@ was not found by name. Doing a linear search for it.", (uint8_t *)&v2, 0xCu);
}

void _LSBundleCopyOrCheckNode(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  int v3 = 136315651;
  uint64_t v4 = "_LSBundleCopyOrCheckNode";
  __int16 v5 = 2113;
  uint64_t v6 = a1;
  __int16 v7 = 2114;
  uint64_t v8 = a2;
  _os_log_error_impl(&dword_182959000, log, OS_LOG_TYPE_ERROR, "%s: error registering new node %{private}@: %{public}@", (uint8_t *)&v3, 0x20u);
}

void _LSBundleGetLocalizedName_cold_1()
{
  OUTLINED_FUNCTION_1_4();
  OUTLINED_FUNCTION_0_4(v1, v2, v3, 5.8081e-34);
  OUTLINED_FUNCTION_2_1(&dword_182959000, "Bundle %{private}@ (%llx) needs localized name slow path", v4, v5);
}

void _LSBundleGetLocalizedName_cold_2()
{
  OUTLINED_FUNCTION_1_4();
  OUTLINED_FUNCTION_0_4(v1, v2, v3, 5.8081e-34);
  OUTLINED_FUNCTION_2_1(&dword_182959000, "Bundle %{private}@ (%llx) used localized name fast path", v4, v5);
}

void _LSBundleGetLocalizedNameDictionary_cold_1()
{
  OUTLINED_FUNCTION_1_4();
  OUTLINED_FUNCTION_0_4(v1, v2, v3, 5.8081e-34);
  OUTLINED_FUNCTION_2_1(&dword_182959000, "Bundle %{private}@ (%llx) needs localized name dict slow path", v4, v5);
}

void _LSBundleGetLocalizedNameDictionary_cold_2()
{
  OUTLINED_FUNCTION_1_4();
  OUTLINED_FUNCTION_0_4(v1, v2, v3, 5.8081e-34);
  OUTLINED_FUNCTION_2_1(&dword_182959000, "Bundle %{private}@ (%llx) used localized name dict fast path", v4, v5);
}

void _LSCreateResolvedURL_cold_1()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_2_0();
  __int16 v3 = 2112;
  uint64_t v4 = v0;
  _os_log_debug_impl(&dword_182959000, v1, OS_LOG_TYPE_DEBUG, "failed to resolve symlinks in %@ <%@>", v2, 0x16u);
}

void _LSCreateResolvedURL_cold_2()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_2_0();
  _os_log_debug_impl(&dword_182959000, v0, OS_LOG_TYPE_DEBUG, "LaunchServices: CFURLGetFileSystemRepresentation failed for URL %@", v1, 0xCu);
}

void _LSCreateResolvedURL_cold_3()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_2_0();
  _os_log_debug_impl(&dword_182959000, v0, OS_LOG_TYPE_DEBUG, "LaunchServices: getattrlist failed for URL %@", v1, 0xCu);
}

void ___ZL15_LSContainerAddP9LSContextP6FSNodeP6NSDataS2_S4_tyhU13block_pointerFvjP7NSErrorE_block_invoke_cold_1()
{
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_1_3(&dword_182959000, v0, v1, "Adding database record for volume %{private}@ with volume ID %llu");
}

void ___ZL15_LSContainerAddP9LSContextP6FSNodeP6NSDataS2_S4_tyhU13block_pointerFvjP7NSErrorE_block_invoke_cold_2()
{
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_1_3(&dword_182959000, v0, v1, "Found database record for volume %{private}@ with volume ID %llu");
}

void ___ZL15_LSContainerAddP9LSContextP6FSNodeP6NSDataS2_S4_tyhU13block_pointerFvjP7NSErrorE_block_invoke_cold_3(uint64_t a1, NSObject *a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = 138477827;
  uint64_t v4 = v2;
  _os_log_debug_impl(&dword_182959000, a2, OS_LOG_TYPE_DEBUG, "Expensively searching for volume %{private}@ in existing records", (uint8_t *)&v3, 0xCu);
}

void ___ZL15_LSContainerAddP9LSContextP6FSNodeP6NSDataS2_S4_tyhU13block_pointerFvjP7NSErrorE_block_invoke_cold_4(uint64_t a1, NSObject *a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = 138477827;
  uint64_t v4 = v2;
  _os_log_debug_impl(&dword_182959000, a2, OS_LOG_TYPE_DEBUG, "Cheaply searching for volume %{private}@ in existing records", (uint8_t *)&v3, 0xCu);
}

void _LSCopyGroupContainerURLSFromContainermanager_cold_1()
{
  OUTLINED_FUNCTION_2_3();
  OUTLINED_FUNCTION_0_6();
  OUTLINED_FUNCTION_1_5(&dword_182959000, v0, v1, "ContainerManager error fetching group containers for %{private}@: %llu %{public}s", v2, v3, v4, v5, v6);
}

void _LSCopyEnvironmentVariablesFromContainermanager_cold_1()
{
  OUTLINED_FUNCTION_2_3();
  OUTLINED_FUNCTION_0_6();
  OUTLINED_FUNCTION_1_5(&dword_182959000, v0, v1, "ContainerManager error populating env variables for %{private}@: %llu %{public}s", v2, v3, v4, v5, v6);
}

void _LSShouldFetchContainersFromContainermanagerForPersona_cold_1(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_fault_impl(&dword_182959000, log, OS_LOG_TYPE_FAULT, "No concrete persona found for system persona app", v1, 2u);
}

void _LSGetValidApplicationCategoryTypeSet_cold_1(void *a1, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)long long buf = 136446466;
  *(void *)(buf + 4) = "CFSetRef _LSGetValidApplicationCategoryTypeSet()";
  *((_WORD *)buf + 6) = 2114;
  *(void *)(buf + 14) = a1;
  _os_log_error_impl(&dword_182959000, log, OS_LOG_TYPE_ERROR, "%{public}s: unable to get categories: %{public}@", buf, 0x16u);
}

void _LSSetLocalDatabaseIfNewer_cold_1(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_7_0(3.8521e-34, a1, a2, a3);
  _os_log_debug_impl(&dword_182959000, v4, OS_LOG_TYPE_DEBUG, "Database with sequence number %llu is newer than database with sequence number %llu, so using it", v3, 0x16u);
}

void _LSSetLocalDatabaseIfNewer_cold_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_7_0(3.8521e-34, a1, a2, a3);
  _os_log_debug_impl(&dword_182959000, v4, OS_LOG_TYPE_DEBUG, "Database with sequence number %llu is NOT newer than database with sequence number %llu, so NOT using it", v3, 0x16u);
}

void _LSDatabaseSetHeader()
{
  OUTLINED_FUNCTION_4_1(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_3(&dword_182959000, v0, v1, "Failed to write database header: %{public}@", v2, v3, v4, v5, v6);
}

void _LSDatabaseCreateWithAccessContext_cold_1(uint64_t a1, uint8_t *buf, os_log_t log)
{
  uint64_t v3 = *(void *)(a1 + 176);
  *(_DWORD *)long long buf = 134217984;
  *(void *)(buf + 4) = v3;
  _os_log_debug_impl(&dword_182959000, log, OS_LOG_TYPE_DEBUG, "Loaded LS database with sequence number %llu", buf, 0xCu);
}

void _LSDatabaseCreateWithAccessContext_cold_2()
{
  OUTLINED_FUNCTION_4_1(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_3(&dword_182959000, v0, v1, "_LSSchemaConfigureForStore failed with error %{public}@", v2, v3, v4, v5, v6);
}

void _LSDatabaseCreateWithAccessContext_cold_3()
{
  OUTLINED_FUNCTION_4_1(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_3(&dword_182959000, v0, v1, "CSStoreCreateMutableCopy failed with error %{public}@", v2, v3, v4, v5, v6);
}

void _LSDatabaseCreateFromPersistentStore_cold_1()
{
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_3(&dword_182959000, v0, v1, "_LSDatabaseCreateFromPersistentStoreIgnoringRecoveryFile failed (forcing empty) with error %{public}@", v2, v3, v4, v5, v6);
}

void _LSDatabaseCreateFromPersistentStore_cold_2()
{
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_3(&dword_182959000, v0, v1, "_LSDatabaseCreateFromPersistentStoreIgnoringRecoveryFile failed with error %{public}@", v2, v3, v4, v5, v6);
}

void _LSDatabaseCreateFromPersistentStore_cold_3()
{
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_19(&dword_182959000, v0, v1, "_LSCreateStoreWithFileContents found a recovery file, so creating a new empty store", v2, v3, v4, v5, v6);
}

void _LSDatabaseCreateRecoveryFile_cold_1(int *a1, uint8_t *buf, int a3, os_log_t log)
{
  int v4 = *a1;
  *(_DWORD *)long long buf = 136446722;
  *(void *)(buf + 4) = "void _LSDatabaseCreateRecoveryFile(NSURL *__strong)";
  *((_WORD *)buf + 6) = 1024;
  *(_DWORD *)(buf + 14) = a3;
  *((_WORD *)buf + 9) = 1024;
  *((_DWORD *)buf + 5) = v4;
  _os_log_fault_impl(&dword_182959000, log, OS_LOG_TYPE_FAULT, "%{public}s: ::close(%i) failed with error %i", buf, 0x18u);
}

void _LSDatabaseCreateRecoveryFile_cold_2()
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_14_0();
  __int16 v3 = 2080;
  uint64_t v4 = v0;
  __int16 v5 = 1024;
  int v6 = 2561;
  __int16 v7 = 1024;
  int v8 = 436;
  _os_log_error_impl(&dword_182959000, v1, OS_LOG_TYPE_ERROR, "%{public}s: warning: ::open_dprotected_np(%s, %x, %x) failed with EEXIST", v2, 0x22u);
}

void _LSDatabaseCreateRecoveryFile_cold_3(uint64_t a1, int *a2, uint8_t *buf, os_log_t log)
{
  int v4 = *a2;
  *(_DWORD *)long long buf = 136447234;
  *(void *)(buf + 4) = "void _LSDatabaseCreateRecoveryFile(NSURL *__strong)";
  *((_WORD *)buf + 6) = 2080;
  *(void *)(buf + 14) = a1;
  *((_WORD *)buf + 11) = 1024;
  *((_DWORD *)buf + 6) = 2561;
  *((_WORD *)buf + 14) = 1024;
  *(_DWORD *)(buf + 30) = 436;
  *((_WORD *)buf + 17) = 1024;
  *((_DWORD *)buf + 9) = v4;
  _os_log_fault_impl(&dword_182959000, log, OS_LOG_TYPE_FAULT, "%{public}s: ::open_dprotected_np(%s, %x, %x) failed with error %i", buf, 0x28u);
}

void _LSDatabaseCreateFromPersistentStoreIgnoringRecoveryFile()
{
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_19(&dword_182959000, v0, v1, "asked to create an empty store but options disallow it", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_3(&dword_182959000, v0, v1, "_LSCreateEmptyStore failed with error %{public}@", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_3(&dword_182959000, v0, v1, "_LSDatabaseCreate failed with error %{public}@", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_3(&dword_182959000, v0, v1, "_LSCreateStoreWithFileContents Failed with error %{public}@", v2, v3, v4, v5, v6);
}

void _LSDatabaseDeleteRecoveryFile_cold_1(uint64_t a1, int *a2, uint8_t *buf, os_log_t log)
{
  int v4 = *a2;
  *(_DWORD *)long long buf = 136446466;
  *(void *)(buf + 4) = a1;
  *((_WORD *)buf + 6) = 1024;
  *(_DWORD *)(buf + 14) = v4;
  _os_log_fault_impl(&dword_182959000, log, OS_LOG_TYPE_FAULT, "Error: Failed to remove recovery file %{public}s with errno %d", buf, 0x12u);
}

void _LSCreateStoreWithFileContents()
{
  OUTLINED_FUNCTION_4_1(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_3(&dword_182959000, v0, v1, "_CSStoreCreateWithURL failed with error %{public}@", v2, v3, v4, v5, v6);
}

void _LSDatabaseClean()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_14_0();
  __int16 v2 = 2082;
  uint64_t v3 = "/System/Library/CoreServices/MobileCoreTypes.bundle";
  _os_log_error_impl(&dword_182959000, v0, OS_LOG_TYPE_ERROR, "Error %ld registering path %{public}s", v1, 0x16u);
}

void _LSDatabaseCommit_cold_1()
{
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_2(&dword_182959000, v0, v1, "NotifyToken::Post(%{public}@)", v2, v3, v4, v5, v6);
}

void _LSDatabaseCreateStringArrayCommon(uint8_t *buf, unsigned char *a2, os_log_t log)
{
  *long long buf = 0;
  *a2 = 0;
  _os_log_debug_impl(&dword_182959000, log, OS_LOG_TYPE_DEBUG, "Null string in input array while constructing string array, but the caller is OK with that.", buf, 2u);
}

void _LSContextInitCommon()
{
  OUTLINED_FUNCTION_4_1(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_3(&dword_182959000, v0, v1, "Failed to initialize client context with error %{public}@", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_2(&dword_182959000, v0, v1, "Client database updated - seq#: %llu", v2, v3, v4, v5, v6);
}

void _LSContextInvalidate_cold_1()
{
  OUTLINED_FUNCTION_1_0();
  _os_log_debug_impl(&dword_182959000, v0, OS_LOG_TYPE_DEBUG, "_LSContextInvalidate is not implemented when running as the server.", v1, 2u);
}

void _LSContextInvalidate_cold_2(void *a1, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)long long buf = 138412290;
  *(void *)(buf + 4) = a1;
  _os_log_debug_impl(&dword_182959000, log, OS_LOG_TYPE_DEBUG, "Client database invalidated for session: %@", buf, 0xCu);
}

void _LSDatabaseSentinelIncrement_cold_1()
{
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_19(&dword_182959000, v0, v1, "sentinelCount == UINTMAX_MAX, aborting", v2, v3, v4, v5, v6);
}

void _LSDatabaseSentinelDecrement_cold_1()
{
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_19(&dword_182959000, v0, v1, "sentinelCount == 0, aborting", v2, v3, v4, v5, v6);
}

void _LSResetServer_cold_1()
{
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_3(&dword_182959000, v0, v1, "Error creating store while resetting server: %{public}@", v2, v3, v4, v5, v6);
}

void _LSResetServer_cold_2()
{
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_3(&dword_182959000, v0, v1, "Error creating DB while resetting server: %{public}@", v2, v3, v4, v5, v6);
}

void _LSDatabaseCreateSnapshotAgainstAccessContext()
{
  OUTLINED_FUNCTION_4_1(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_3(&dword_182959000, v0, v1, "_LSDatabaseCreateSnapshotAgainstQueue failed with error %{public}@", v2, v3, v4, v5, v6);
}

void ___ZL26_LSArmSaveTimerWithTimeouthdU13block_pointerFvbP11_LSDatabaseP7NSErrorE_block_invoke_cold_1()
{
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_3(&dword_182959000, v0, v1, "Error saving session: %{public}@", v2, v3, v4, v5, v6);
}

void ___ZL26_LSArmSaveTimerWithTimeouthdU13block_pointerFvbP11_LSDatabaseP7NSErrorE_block_invoke_cold_2(void *a1, uint8_t *buf, int a3, os_log_t log)
{
  *(_DWORD *)long long buf = 136446722;
  *(void *)(buf + 4) = "_LSSessionSave";
  *((_WORD *)buf + 6) = 2112;
  *(void *)(buf + 14) = a1;
  *((_WORD *)buf + 11) = 1024;
  *((_DWORD *)buf + 6) = a3;
  _os_log_error_impl(&dword_182959000, log, OS_LOG_TYPE_ERROR, "%{public}s: error saving prefs for session %@: %i", buf, 0x1Cu);
}

void ___ZL26_LSArmSaveTimerWithTimeouthdU13block_pointerFvbP11_LSDatabaseP7NSErrorE_block_invoke_cold_3(void *a1, uint64_t a2, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)long long buf = 136446722;
  *(void *)(buf + 4) = "_LSSessionSave";
  *((_WORD *)buf + 6) = 2112;
  *(void *)(buf + 14) = a1;
  *((_WORD *)buf + 11) = 2114;
  *((void *)buf + 3) = a2;
  _os_log_error_impl(&dword_182959000, log, OS_LOG_TYPE_ERROR, "%{public}s: error saving database for session %@: %{public}@", buf, 0x20u);
}

void ___ZL26_LSArmSaveTimerWithTimeouthdU13block_pointerFvbP11_LSDatabaseP7NSErrorE_block_invoke_cold_4()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_2_0();
  __int16 v3 = 2114;
  uint64_t v4 = v0;
  _os_log_fault_impl(&dword_182959000, v1, OS_LOG_TYPE_FAULT, "Failed to save database to %{public}@: %{public}@", v2, 0x16u);
}

void ___ZL26_LSArmSaveTimerWithTimeouthdU13block_pointerFvbP11_LSDatabaseP7NSErrorE_block_invoke_cold_5()
{
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_3(&dword_182959000, v0, v1, "Wrote corrupt store file %{private}@", v2, v3, v4, v5, v6);
}

void ___ZL16_LSDatabaseRemapP11_LSDatabaseU13block_pointerFvbP7NSErrorP8NSStringE_block_invoke_cold_1()
{
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_3(&dword_182959000, v0, v1, "_LSDatabaseCreateFromPersistentStore() returned error %{public}@", v2, v3, v4, v5, v6);
}

void ___ZL16_LSDatabaseRemapP11_LSDatabaseU13block_pointerFvbP7NSErrorP8NSStringE_block_invoke_cold_2()
{
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_3(&dword_182959000, v0, v1, "_LSDatabaseCreateByRemappingDatabase() returned error %{public}@", v2, v3, v4, v5, v6);
}

void ___ZL16_LSDatabaseRemapP11_LSDatabaseU13block_pointerFvbP7NSErrorP8NSStringE_block_invoke_cold_3()
{
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_3(&dword_182959000, v0, v1, "_LSDatabaseCreateByRemappingDatabase failed with error %{public}@", v2, v3, v4, v5, v6);
}

void _LSDatabaseContextStopAccessing_cold_1(uint64_t a1, NSObject *a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = 134217984;
  uint64_t v4 = v2;
  _os_log_debug_impl(&dword_182959000, a2, OS_LOG_TYPE_DEBUG, "Stopping database access (depth %li)", (uint8_t *)&v3, 0xCu);
}

void _LSDatabaseContextStartAccessingWithDomain_cold_1(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = 134218240;
  uint64_t v5 = v3;
  __int16 v6 = 2048;
  uint64_t v7 = a2;
  _os_log_debug_impl(&dword_182959000, log, OS_LOG_TYPE_DEBUG, "Starting database access (depth %li, options: %llx)", (uint8_t *)&v4, 0x16u);
}

void getXPCObjectForNodeAndStore(id *a1, NSObject *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  id v3 = *a1;
  int v4 = 138412290;
  id v5 = v3;
  _os_log_error_impl(&dword_182959000, a2, OS_LOG_TYPE_ERROR, "could not create XPC representation of store while making XPC object: %@", (uint8_t *)&v4, 0xCu);
}

void getXPCObjectForNodeAndStore(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl(&dword_182959000, a2, OS_LOG_TYPE_ERROR, "could not get file system representation of store node while making XPC object: %@", (uint8_t *)&v2, 0xCu);
}

void _LSContextCreateVisualizer_cold_1(void *a1, uint8_t *buf, void *a3, os_log_t log)
{
  *(_DWORD *)long long buf = 138543362;
  *a3 = a1;
  _os_log_debug_impl(&dword_182959000, log, OS_LOG_TYPE_DEBUG, "No functions for table %{public}@", buf, 0xCu);
}

void ___ZN14LaunchServices21DatabaseVisualizationL14getAllHandlersEP9LSContext_block_invoke_cold_1(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 138543362;
  uint64_t v3 = a1;
  _os_log_debug_impl(&dword_182959000, a2, OS_LOG_TYPE_DEBUG, "Table %{public}@ has no handler functions and will not display well in CSStore Viewer.", (uint8_t *)&v2, 0xCu);
}

void _LSDefaultsBaseSystemContainerURL_cold_1(uint64_t *a1, uint64_t a2, os_log_t log)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  int v4 = 136446722;
  id v5 = "NSURL *_LSDefaultsBaseSystemContainerURL(void)";
  __int16 v6 = 2048;
  uint64_t v7 = v3;
  __int16 v8 = 2082;
  uint64_t v9 = a2;
  _os_log_error_impl(&dword_182959000, log, OS_LOG_TYPE_ERROR, "%{public}s: error %llu getting container path: %{public}s", (uint8_t *)&v4, 0x20u);
}

void emitSandboxExceptionAndMaybeAbortForSneakyURLUsage_cold_1(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl(&dword_182959000, log, OS_LOG_TYPE_ERROR, "This process has called into a server-only method of a private class in CoreServices. It must not do this. Break on __LAUNCH_SERVICES_IS_GENERATING_A_SANDBOX_EXCEPTION_BECAUSE_THIS_PROCESS_IS_USING_PRIVATE_SYMBOLS__ to debug.", v1, 2u);
}

void LaunchServices::DMFSupport::getPoliciesWithCompletionHandler(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ___ZN14LaunchServices10DMFSupportL17reloadAllPoliciesEP27DMFApplicationPolicyMonitor_block_invoke_cold_1()
{
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_3(&dword_182959000, v0, v1, "Failed to get DMF policy for all applications: %{public}@", v2, v3, v4, v5, v6);
}

void ___ZN14LaunchServices10DMFSupportL17reloadAllPoliciesEP27DMFApplicationPolicyMonitor_block_invoke_cold_2()
{
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_2(&dword_182959000, v0, v1, "Got all DMF policies: %{private}@", v2, v3, v4, v5, v6);
}

void LaunchServices::DMFSupport::addKnownPoliciesToCache()
{
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_7(&dword_182959000, v0, v1, "Skipping DMF notifications because nobody is listening", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_7(&dword_182959000, v0, v1, "No changes in DMF, so not posting a notification", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_2(&dword_182959000, v0, v1, "DMF policy changed, so posting a notification: %{private}@", v2, v3, v4, v5, v6);
}

void ___ZN14LaunchServices10DMFSupportL32getPoliciesWithCompletionHandlerEP5NSSetIP8NSStringEhU13block_pointerFvP12NSDictionaryIS3_P8NSNumberEP7NSErrorE_block_invoke_cold_1()
{
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_3(&dword_182959000, v0, v1, "unable to get policies from DMF: %@", v2, v3, v4, v5, v6);
}

void ___ZN14LaunchServices10DMFSupportL32getPoliciesWithCompletionHandlerEP5NSSetIP8NSStringEhU13block_pointerFvP12NSDictionaryIS3_P8NSNumberEP7NSErrorE_block_invoke_cold_2()
{
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_2(&dword_182959000, v0, v1, "Got some DMF policies: %{private}@", v2, v3, v4, v5, v6);
}

void _LSDServiceGetXPCProxyForServiceClass_cold_1(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _LSCopyServerStore_cold_1()
{
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_19(&dword_182959000, v0, v1, "Attempt to map database failed: permission was denied. This attempt will not be retried.", v2, v3, v4, v5, v6);
}

void _LSCopyServerStore_cold_2()
{
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_19(&dword_182959000, v0, v1, "LaunchServices: Database mapping failed, process cannot lookup com.apple.lsd.mapdb port by name.", v2, v3, v4, v5, v6);
}

void _LSCopyServerStore_cold_3()
{
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_19(&dword_182959000, v0, v1, "LaunchServices: connection invalid while copying server store, will not retry. This is normal iff the session is terminating.", v2, v3, v4, v5, v6);
}

void _LSCopyServerStore_cold_4()
{
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_19(&dword_182959000, v0, v1, "Database was not available and LSDatabaseContextAccessOptionIfAvailable was specified. Returning error immediately to caller.", v2, v3, v4, v5, v6);
}

void _LSIsAuditTokenSandboxed_cold_1(int a1, NSObject *a2)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_fault_impl(&dword_182959000, a2, OS_LOG_TYPE_FAULT, "sandbox_check_by_audit_token failed in lsd! That's a bad bug! errno=%d", (uint8_t *)v2, 8u);
}

void _LSEnumeratorFireErrorHandler_cold_1()
{
  OUTLINED_FUNCTION_0_9();
  OUTLINED_FUNCTION_1(&dword_182959000, v0, v1, "Error during enumeration of %{private}@: %{public}@");
}

void _LSDBEnumeratorPrepareIfNeeded_cold_1(uint64_t a1, void *a2, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)long long buf = 138478083;
  *(void *)(buf + 4) = a1;
  *((_WORD *)buf + 6) = 2114;
  *(void *)(buf + 14) = a2;
  _os_log_error_impl(&dword_182959000, log, OS_LOG_TYPE_ERROR, "Failed to get DB when preparing enumerator %{private}@: %{public}@", buf, 0x16u);
}

void _LSDBEnumeratorPrepareIfNeeded_cold_2(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 138477827;
  uint64_t v3 = a1;
  _os_log_debug_impl(&dword_182959000, a2, OS_LOG_TYPE_DEBUG, "Prepared enumerator %{private}@", (uint8_t *)&v2, 0xCu);
}

void _LSDBEnumeratorPrepareIfNeeded_cold_3()
{
  OUTLINED_FUNCTION_0_9();
  OUTLINED_FUNCTION_1(&dword_182959000, v0, v1, "Failed to prepare enumerator %{private}@: %{public}@");
}

void _LSGetOSStatusFromNSError_cold_1()
{
  OUTLINED_FUNCTION_0_10();
  OUTLINED_FUNCTION_1_3(&dword_182959000, v0, v1, "Launch Services encountered an error, converting to OSStatus %li: %{public}@");
}

void _LSGetOSStatusFromNSError_cold_2(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 138543362;
  uint64_t v3 = a1;
  _os_log_error_impl(&dword_182959000, a2, OS_LOG_TYPE_ERROR, "XPC error encountered: %{public}@", (uint8_t *)&v2, 0xCu);
}

void _LSGetOSStatusFromNSError_cold_3(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 138543362;
  uint64_t v3 = a1;
  _os_log_error_impl(&dword_182959000, a2, OS_LOG_TYPE_ERROR, "Launch Services, forced to convert an NSError to an OSStatus, came up with kLSUnknownError for %{public}@", (uint8_t *)&v2, 0xCu);
}

void _LSGetNSErrorFromOSStatusImpl_cold_1()
{
  OUTLINED_FUNCTION_0_10();
  OUTLINED_FUNCTION_1_3(&dword_182959000, v0, v1, "Converted OSStatus %li to error %{public}@");
}

void _LSCopyUserActivityDomainNamesForBundleID_cold_1(uint64_t a1, NSObject *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  int v2 = 136446466;
  uint64_t v3 = "CFArrayRef _LSCopyUserActivityDomainNamesForBundleID(CFStringRef)";
  __int16 v4 = 2114;
  uint64_t v5 = a1;
  _os_log_error_impl(&dword_182959000, a2, OS_LOG_TYPE_ERROR, "Error in %{public}s: %{public}@", (uint8_t *)&v2, 0x16u);
}

void ___ZL22initActivationObserverv_block_invoke_cold_1(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_error_impl(&dword_182959000, log, OS_LOG_TYPE_ERROR, "Unable to register for activation state changed notification.", v1, 2u);
}

void ___ZL29pluginKitUserElectionStoreURLv_block_invoke_cold_1(uint64_t *a1, NSObject *a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  int v3 = 134217984;
  uint64_t v4 = v2;
  _os_log_fault_impl(&dword_182959000, a2, OS_LOG_TYPE_FAULT, "Failed to get storage container: error=%llu", (uint8_t *)&v3, 0xCu);
}

void ___ZL29pluginKitUserElectionStoreURLv_block_invoke_249_cold_1(void *a1, uint64_t a2)
{
  OUTLINED_FUNCTION_9_1((uint64_t)a1, a2, 5.8381e-34);
  _os_log_debug_impl(&dword_182959000, v3, OS_LOG_TYPE_DEBUG, "Annotations are stored at [%{public}@]", v4, 0xCu);
}

void ___ZL29pluginKitUserElectionStoreURLv_block_invoke_249_cold_2()
{
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1(&dword_182959000, v0, v1, "Failed to create storage directory at [%{public}@] error: %{public}@");
}

void __LSCopyClaimListWithoutClaimsClaimingDefaultAppTypes_block_invoke_cold_1()
{
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_3(&dword_182959000, v0, v1, "claim for %@, which is a default app type. Ignoring this entire claim", v2, v3, v4, v5, v6);
}

void _LSServer_LSRemoveDefaultApp_cold_1(void *a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)uint64_t v3 = 138412546;
  *(void *)&void v3[4] = *a1;
  *(_WORD *)&v3[12] = 2048;
  *(void *)&v3[14] = (int)a2;
  OUTLINED_FUNCTION_1(&dword_182959000, a2, a3, "Couldn't remove handler for %@: %ld", *(void *)v3, *(void *)&v3[8], *(void *)&v3[16], *MEMORY[0x1E4F143B8]);
}

void _LSServer_LSSetDefaultAppByTypeIdentifier_cold_1()
{
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_3(&dword_182959000, v0, v1, "couldn't write default apps state: %@", v2, v3, v4, v5, v6);
}

void _LSServer_LSSetDefaultAppByTypeIdentifier_cold_2()
{
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_3(&dword_182959000, v0, v1, "Can't change category %lu!", v2, v3, v4, v5, v6);
}

void LSDefaultAppCategoryMayBeChanged_cold_1(uint64_t a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)uint64_t v3 = 134218242;
  *(void *)&void v3[4] = a2;
  *(_WORD *)&v3[12] = 2112;
  *(void *)&v3[14] = *(void *)(*(void *)a1 + 40);
  OUTLINED_FUNCTION_1(&dword_182959000, a2, a3, "couldn't fetch whether preference has ever been set for category %lu: %@", *(void *)v3, *(void *)&v3[8], *(void *)&v3[16], *MEMORY[0x1E4F143B8]);
}

void LSDefaultAppCategoryMayBeChanged_cold_2(int a1, uint64_t a2, NSObject *a3)
{
  LODWORD(v3) = 67109378;
  HIDWORD(v3) = a1;
  LOWORD(v4) = 2112;
  *(void *)((char *)&v4 + 2) = a2;
  OUTLINED_FUNCTION_17_0(&dword_182959000, a2, a3, "Couldn't get answer for eligibility domain %d: %@", v3, (void)v4, WORD4(v4), *MEMORY[0x1E4F143B8]);
}

void _LSServer_HasPreferenceEverBeenSetForDefaultAppCategory_cold_1(char a1, uint64_t a2, NSObject *a3)
{
  LODWORD(v3) = 67109376;
  HIDWORD(v3) = a1 & 1;
  LOWORD(v4) = 2048;
  *(void *)((char *)&v4 + 2) = a2;
  OUTLINED_FUNCTION_17_0(&dword_182959000, a2, a3, "couldn't load default apps set state, returning %{BOOL}d for %lu", v3, (void)v4, HIWORD(a2), *MEMORY[0x1E4F143B8]);
}

void std::__function::__func<_LSServer_NotePreferenceSetForCategory(LSDefaultAppCategory)::$_0,std::allocator<_LSServer_NotePreferenceSetForCategory(LSDefaultAppCategory)::$_0>,LaunchServices::LSDefaultAppsExtraState ()(std::optional<LaunchServices::LSDefaultAppsExtraState>,NSError *)>::operator()()
{
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_3(&dword_182959000, v0, v1, "couldn't read default apps set state to modify it, starting with default state: %@", v2, v3, v4, v5, v6);
}

void LaunchServices::LocalizedString::localizeUnsafely(uint8_t *buf, unsigned char *a2, os_log_t log)
{
  *long long buf = 0;
  *a2 = 0;
  _os_log_debug_impl(&dword_182959000, log, OS_LOG_TYPE_DEBUG, "kLSDefaultLocalizedValueKey encountered in matching localizations set.", buf, 2u);
}

void LaunchServices::EligibilityCache::refreshAnswerForDomain(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int v3 = 134218242;
  uint64_t v4 = a2;
  __int16 v5 = 2112;
  uint64_t v6 = a1;
  _os_log_error_impl(&dword_182959000, log, OS_LOG_TYPE_ERROR, "could not find answer for domain %llu: %@", (uint8_t *)&v3, 0x16u);
}

void LaunchServices::EligibilityCache::getEligibilityGatedBrowsersCanBind(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl(&dword_182959000, a2, OS_LOG_TYPE_ERROR, "Couldn't get answer for lithium domain: %@", (uint8_t *)&v2, 0xCu);
}

void LaunchServices::EligibilityCache::getEligibilityGatedBrowserEngineEmbeddersCanBind(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl(&dword_182959000, a2, OS_LOG_TYPE_ERROR, "Couldn't get answer for boron domain: %@", (uint8_t *)&v2, 0xCu);
}

void ___ZL78_LSGetDefaultPreferredLocalizationsWithFallbackForImproperlyLocalizedProcessesv_block_invoke_cold_1(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl(&dword_182959000, log, OS_LOG_TYPE_ERROR, "This process does not have access to the user's preferred locales, yet it is requesting localized strings from Launch Services with no specified input locales. This is a problem for correctness and performance. This message will be logged only once in this process.", v1, 2u);
}

void _LSCopierCallback(int a1, NSObject *a2)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_debug_impl(&dword_182959000, a2, OS_LOG_TYPE_DEBUG, "Unknown MDTCopierCallbackType %d", (uint8_t *)v2, 8u);
}

void anonymous namespace'::StagedFileResource::~StagedFileResource(uint64_t *a1, uint64_t a2, os_log_t log)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  int v4 = 138412546;
  uint64_t v5 = v3;
  __int16 v6 = 2112;
  uint64_t v7 = a2;
  _os_log_error_impl(&dword_182959000, log, OS_LOG_TYPE_ERROR, "Unable to remove open staging container %@: %@", (uint8_t *)&v4, 0x16u);
}

void makeStagingDirectoryURLInContainer(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl(&dword_182959000, a2, OS_LOG_TYPE_ERROR, "could not create new mailbox directory: %@", (uint8_t *)&v2, 0xCu);
}

void makeStagingDirectoryURLInContainer()
{
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_1(&dword_182959000, v0, v1, "could not set attributes for new staging directory in %@{public}: %@");
}

void makeStagingDirectoryURLInContainer(uint64_t a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)uint64_t v3 = 138543618;
  *(void *)&void v3[4] = a1;
  *(_WORD *)&v3[12] = 2114;
  *(void *)&v3[14] = a2;
  OUTLINED_FUNCTION_1(&dword_182959000, a2, a3, "Unexpected failure to create %{public}@: %{public}@", *(void *)v3, *(void *)&v3[8], *(void *)&v3[16], *MEMORY[0x1E4F143B8]);
}

void ___ZL34makeStagingDirectoryURLInContainerP5NSURLPU15__autoreleasingP7NSError_block_invoke_cold_1()
{
  OUTLINED_FUNCTION_4_1(*MEMORY[0x1E4F143B8]);
  int v3 = 138543874;
  uint64_t v4 = v0;
  __int16 v5 = 2080;
  __int16 v6 = "makeStagingDirectoryURLInContainer_block_invoke";
  __int16 v7 = 2114;
  uint64_t v8 = v1;
  _os_log_error_impl(&dword_182959000, v2, OS_LOG_TYPE_ERROR, "could not remove %{public}@ in %s: %{public}@", (uint8_t *)&v3, 0x20u);
}

void _LSOpenOperationPerform(uint64_t a1, void *a2, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)long long buf = 138478083;
  *(void *)(buf + 4) = a1;
  *((_WORD *)buf + 6) = 2113;
  *(void *)(buf + 14) = a2;
  _os_log_debug_impl(&dword_182959000, log, OS_LOG_TYPE_DEBUG, "Default handler for node %{private}@ is already set to %{private}@", buf, 0x16u);
}

void ___ZL23_LSUpdateDefaultHandlerP18LSApplicationProxyP5NSURL_block_invoke_cold_1()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_2_0();
  _os_log_error_impl(&dword_182959000, v0, OS_LOG_TYPE_ERROR, "Failed to set default handler: %@", v1, 0xCu);
}

void _LSPersistentIdentifierCompare_cold_1()
{
  OUTLINED_FUNCTION_0_11();
  OUTLINED_FUNCTION_1_3(&dword_182959000, v0, v1, "Persistent identifiers %p and %p are exactly equal", v2, v3);
}

void _LSPersistentIdentifierCompare_cold_2()
{
  OUTLINED_FUNCTION_0_11();
  OUTLINED_FUNCTION_1_3(&dword_182959000, v0, v1, "Persistent identifiers %p and %p are from the same database", v2, v3);
}

void _LSPlistDataGetHint_cold_1(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 134217984;
  uint64_t v3 = a1;
  _os_log_debug_impl(&dword_182959000, a2, OS_LOG_TYPE_DEBUG, "Getting plist hint for data %p", (uint8_t *)&v2, 0xCu);
}

void _LSPlistDataGetValuesForKeys_cold_1(void *a1, uint8_t *buf, os_log_t log, void *a4)
{
  *(_DWORD *)long long buf = 138543362;
  *(void *)(buf + 4) = a1;
  _os_log_debug_impl(&dword_182959000, log, OS_LOG_TYPE_DEBUG, "Keys { %{public}@ } were requested and require us to take a slow path.", buf, 0xCu);
}

void _LSPlistDataGetValuesForKeys_cold_2(void *a1, uint8_t *buf, os_log_t log, void *a4)
{
  *(_DWORD *)long long buf = 138543362;
  *(void *)(buf + 4) = a1;
  _os_log_debug_impl(&dword_182959000, log, OS_LOG_TYPE_DEBUG, "Got values for keys { %{public}@ } from CF SPI (fast path).", buf, 0xCu);
}

void ___ZL24_LSPlistGetCommonStringsv_block_invoke_cold_1(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_error_impl(&dword_182959000, log, OS_LOG_TYPE_ERROR, "Unable to get a list of common plist strings from the Launch Services framework. Plists may encode/decode erratically.", v1, 2u);
}

void _LSPluginIsValid_cold_1(unsigned int a1, unsigned int *a2, os_log_t log)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  int v4 = 134218240;
  uint64_t v5 = a1;
  __int16 v6 = 2048;
  uint64_t v7 = v3;
  _os_log_error_impl(&dword_182959000, log, OS_LOG_TYPE_ERROR, "Plugin %llx has invalid parent app %llx", (uint8_t *)&v4, 0x16u);
}

void LaunchServices::LSStatePlist::modify(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl(&dword_182959000, a2, OS_LOG_TYPE_ERROR, "couldn't write plist: %@", (uint8_t *)&v2, 0xCu);
}

void LaunchServices::LSStatePlist::modify(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_fault_impl(&dword_182959000, log, OS_LOG_TYPE_FAULT, "transform lost the plist object!", v1, 2u);
}

void LaunchServices::LSStatePlist::save(uint64_t *a1, uint64_t a2, os_log_t log)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  int v4 = 138412546;
  uint64_t v5 = v3;
  __int16 v6 = 2112;
  uint64_t v7 = a2;
  _os_log_error_impl(&dword_182959000, log, OS_LOG_TYPE_ERROR, "Couldn't write state plist to %@: %@", (uint8_t *)&v4, 0x16u);
}

void __pluginQueryFault_block_invoke_cold_1_0(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_fault_impl(&dword_182959000, log, OS_LOG_TYPE_FAULT, "59638328 Plugin query method called", v1, 2u);
}

void getValueForKeyFromPlugin(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_error_impl(&dword_182959000, log, OS_LOG_TYPE_ERROR, "parentApp value for plugin was invalid", v1, 2u);
}

void ___ZL39getkMISMinSupportedSignatureVersion_ptrv_block_invoke_cold_1(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 136446210;
  uint64_t v3 = a1;
  _os_log_fault_impl(&dword_182959000, a2, OS_LOG_TYPE_FAULT, "could not dlopen libmis: %{public}s", (uint8_t *)&v2, 0xCu);
}

void ___ZL39getkMISMinSupportedSignatureVersion_ptrv_block_invoke_cold_2(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 136446210;
  uint64_t v3 = a1;
  _os_log_fault_impl(&dword_182959000, a2, OS_LOG_TYPE_FAULT, "could not find kMISMinSupportedSignatureVersion in libmis: %{public}s", (uint8_t *)&v2, 0xCu);
}

void ___ZN13LSHandlerPref12CopyHandlersEv_block_invoke_cold_1(uint8_t *buf, int a2, uint64_t a3, os_log_t log)
{
  *(_DWORD *)long long buf = 67109376;
  *((_DWORD *)buf + 1) = a2;
  *((_WORD *)buf + 4) = 2048;
  *(void *)(buf + 10) = a3;
  _os_log_debug_impl(&dword_182959000, log, OS_LOG_TYPE_DEBUG, "Handler prefs found; uid = %d; count = %ld;\n",
    buf,
    0x12u);
}

void LaunchServices::PrefsStorage::_needsUpdate(void *a1, uint64_t a2, NSObject *a3)
{
  LODWORD(v3) = 134218240;
  *(void *)((char *)&v3 + 4) = *a1;
  WORD6(v3) = 2048;
  HIWORD(v3) = a2;
  OUTLINED_FUNCTION_1_3(&dword_182959000, a2, a3, "Prefs notify token value changed from %llu to %llu: needs update.", (void)v3, *((void *)&v3 + 1));
}

void ___ZN14LaunchServices12PrefsStorage7_updateEv_block_invoke_2_cold_1()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_2_0();
  _os_log_error_impl(&dword_182959000, v0, OS_LOG_TYPE_ERROR, "Failed to read preferences from lsd. They will be unavailable. %{public}@", v1, 0xCu);
}

void LaunchServices::PrefsStorage::_updateOtherProcesses()
{
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_2(&dword_182959000, v0, v1, "Incremented prefs notify token value. New value is %llu", v2, v3, v4, v5, v6);
}

void LaunchServices::PrefsStorage::_setNeedsUpdate(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl(&dword_182959000, log, OS_LOG_TYPE_DEBUG, "Cleared prefs notify token value to a nonsensical state to force an update on next call.", v1, 2u);
}

void LaunchServices::PrefsStorage::_GetBundleIdentifierWithAppNode()
{
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_2(&dword_182959000, v0, v1, "Node %{private}@ has no bundle ID.", v2, v3, v4, v5, v6);
}

void LaunchServices::PrefsStorage::_SetValueForNodeInPrefsArray()
{
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_2(&dword_182959000, v0, v1, "Deleting app node %{private}@ from prefs, but not present. Ignoring.", v2, v3, v4, v5, v6);
}

{
  uint64_t v0;
  os_log_t v1;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_3(&dword_182959000, v0, v1, "Inserting app node %{private}@ with value %{private}@ into prefs.");
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_2(&dword_182959000, v0, v1, "Deleting app node %{private}@ from prefs.", v2, v3, v4, v5, v6);
}

void LaunchServices::PrefsStorage::setValueForNode()
{
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_2(&dword_182959000, v0, v1, "Adding prefs[%{public}@] for the first time.", v2, v3, v4, v5, v6);
}

void applyStorageACLToURL(uint64_t a1, int a2, os_log_t log)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int v3 = 138412546;
  uint64_t v4 = a1;
  __int16 v5 = 1024;
  int v6 = a2;
  _os_log_error_impl(&dword_182959000, log, OS_LOG_TYPE_ERROR, "failed to set ACL on %@: %{darwin.errno}d", (uint8_t *)&v3, 0x12u);
}

void bundleUnitsClaimingDefaultAppCategory(uint64_t *a1, uint64_t a2, os_log_t log)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  int v4 = 138543874;
  uint64_t v5 = v3;
  __int16 v6 = 2080;
  uint64_t v7 = "bundleUnitsClaimingDefaultAppCategory";
  __int16 v8 = 2112;
  uint64_t v9 = a2;
  _os_log_error_impl(&dword_182959000, log, OS_LOG_TYPE_ERROR, "error binding %{public}@ in %s: %@", (uint8_t *)&v4, 0x20u);
}

void bundleUnitIDsForBindingScheme(uint64_t a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)uint64_t v3 = 138412546;
  *(void *)&void v3[4] = a1;
  *(_WORD *)&v3[12] = 2112;
  *(void *)&v3[14] = a2;
  OUTLINED_FUNCTION_1(&dword_182959000, a2, a3, "no bindings for %@: %@", *(void *)v3, *(void *)&v3[8], *(void *)&v3[16], *MEMORY[0x1E4F143B8]);
}

void nonPlaceholderBundleUnitIDForIdentifier(uint64_t a1, int a2, os_log_t log)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int v3 = 138412546;
  uint64_t v4 = a1;
  __int16 v5 = 2048;
  uint64_t v6 = a2;
  _os_log_debug_impl(&dword_182959000, log, OS_LOG_TYPE_DEBUG, "no bundle for %@: %lu", (uint8_t *)&v3, 0x16u);
}

void _LSFindOrRegisterBundleNode_cold_1(uint64_t *a1, unsigned int a2, os_log_t log)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  int v4 = 134218240;
  uint64_t v5 = v3;
  __int16 v6 = 2048;
  uint64_t v7 = a2;
  _os_log_debug_impl(&dword_182959000, log, OS_LOG_TYPE_DEBUG, "Skipping check that bundleData (%p) != NULL because we don't expect we'll have a valid pointer (caller didn't ask us (%llx) to reinitialize LS database context, so data is known-stale)", (uint8_t *)&v4, 0x16u);
}

void _LSUnregisterBundle_cold_1(void *a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)a2 = 138477827;
  *(void *)(a2 + 4) = a1;
  id v5 = a1;
  _os_log_debug_impl(&dword_182959000, a3, OS_LOG_TYPE_DEBUG, "Removing %{private}@ from protected apps store", (uint8_t *)a2, 0xCu);
}

void _LSServerItemInfoRegistration_cold_1(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 136315138;
  uint64_t v3 = a1;
  _os_log_error_impl(&dword_182959000, a2, OS_LOG_TYPE_ERROR, "LaunchServices: Asked to register a plugin at path %s with no CFBundleIdentifier in their plist.", (uint8_t *)&v2, 0xCu);
}

void _LSRegisterPlugin(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int v3 = 138412546;
  uint64_t v4 = a1;
  __int16 v5 = 2112;
  uint64_t v6 = a2;
  _os_log_error_impl(&dword_182959000, log, OS_LOG_TYPE_ERROR, "will not register %@: it is in an app clip and has EPID %@", (uint8_t *)&v3, 0x16u);
}

void _LSSchemeApprovalBundleIsAppleInternal(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl(&dword_182959000, a2, OS_LOG_TYPE_ERROR, "Error fetching bundle record for scheme approval: %@", (uint8_t *)&v2, 0xCu);
}

void _LSServer_RegisterItemInfo_cold_1(uint64_t a1, NSObject *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  int v3 = 136446722;
  uint64_t v4 = "OSStatus _LSServer_RegisterItemInfo(const LSRegistrationInfo *__strong, NSData *__strong, CFDictionaryRef, CFDict"
       "ionaryRef, CSStoreUnitID *, CSStoreUnitID *, Boolean *, CFStringRef *)";
  __int16 v5 = 2048;
  uint64_t v6 = 7;
  __int16 v7 = 2048;
  uint64_t v8 = v2;
  _os_log_error_impl(&dword_182959000, a2, OS_LOG_TYPE_ERROR, "%{public}s: registration info version should be %llu but is %llu", (uint8_t *)&v3, 0x20u);
}

void _LSCanModifyDefaultHandler_cold_1(uint64_t a1, uint64_t a2, int a3)
{
  OUTLINED_FUNCTION_0_13(a1, a2, a3, 5.778e-34);
  _os_log_error_impl(&dword_182959000, v4, OS_LOG_TYPE_ERROR, "Unentitled request to set default handler for content type %@ by pid %d", v3, 0x12u);
}

void _LSCanModifyDefaultHandler_cold_2(uint64_t a1, uint64_t a2, int a3)
{
  OUTLINED_FUNCTION_0_13(a1, a2, a3, 5.778e-34);
  _os_log_error_impl(&dword_182959000, v4, OS_LOG_TYPE_ERROR, "Unentitled request to set default handler for URL scheme %@ by pid %d", v3, 0x12u);
}

void _LSServerMain_cold_1(NSObject *a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = __error();
  int v3 = strerror(*v2);
  int v5 = 136315394;
  uint64_t v6 = "com.apple.lsd.firstboot";
  __int16 v7 = 2080;
  uint64_t v8 = v3;
  OUTLINED_FUNCTION_5_0(&dword_182959000, a1, v4, "Failed to create semaphore %s: %s", (uint8_t *)&v5);
}

void _LSServerMain_cold_2(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl(&dword_182959000, log, OS_LOG_TYPE_ERROR, "Previous sync was interrupted, presumably by a reboot. Removing any extant recovery file.", v1, 2u);
}

void _LSServerMain_cold_3(uint64_t a1, NSObject *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = [(id)__LSDefaultsGetSharedInstance() databaseContainerDirectoryURL];
  OUTLINED_FUNCTION_2_8();
  uint64_t v7 = a1;
  OUTLINED_FUNCTION_5_0(&dword_182959000, a2, v5, "Error fetching directory contents at path: %@ %@", v6);
}

void _LSServerMain_cold_4(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_fault_impl(&dword_182959000, a2, OS_LOG_TYPE_FAULT, "could not set secure preferences class D: %@", (uint8_t *)&v2, 0xCu);
}

void _LSServerMain_cold_5(int a1, NSObject *a2)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl(&dword_182959000, a2, OS_LOG_TYPE_ERROR, "setiopolicy_np failed (%d), continuing and hoping for the best", (uint8_t *)v2, 8u);
}

void __listenForSigterm_block_invoke_cold_1()
{
  __error();
  OUTLINED_FUNCTION_0_14(&dword_182959000, v0, v1, "sigprocmask failed to mask SIGTERM: %d", v2, v3, v4, v5, 0);
}

void __listenForSigterm_block_invoke_7_cold_1()
{
  __error();
  OUTLINED_FUNCTION_0_14(&dword_182959000, v0, v1, "sigprocmask failed to unmask SIGTERM: %d", v2, v3, v4, v5, 0);
}

void __listenForSigterm_block_invoke_7_cold_2()
{
  __error();
  OUTLINED_FUNCTION_0_14(&dword_182959000, v0, v1, "could not determine which signals are pending: %d", v2, v3, v4, v5, 0);
}

void __performFirstBootWorkIfNecessary_block_invoke_cold_1(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl(&dword_182959000, a2, OS_LOG_TYPE_ERROR, "Unable to get database: %@", (uint8_t *)&v2, 0xCu);
}

void __migrateDefaultAppsToNewWorld_block_invoke_cold_1(uint64_t a1, NSObject *a2, uint64_t a3)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int v3 = 136315394;
  uint64_t v4 = "migrateDefaultAppsToNewWorld_block_invoke";
  __int16 v5 = 2112;
  uint64_t v6 = a1;
  OUTLINED_FUNCTION_5_0(&dword_182959000, a2, a3, "Unable to get database in %s: %@", (uint8_t *)&v3);
}

void _LSServer_GetiCloudHostNames_cold_1()
{
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_7(&dword_182959000, v0, v1, "iCloud hostnames were not loaded from a plist; hardcoded list used",
    v2,
    v3,
    v4,
    v5,
    v6);
}

void _LSServer_GetiCloudHostNames_cold_2()
{
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_2(&dword_182959000, v0, v1, "Fetching iCloud hostnames from %{public}@", v2, v3, v4, v5, v6);
}

void LaunchServices::URLOverrides::getiCloudHostNamesFromPlistAtURL(uint64_t a1)
{
  LODWORD(v3) = 138543618;
  *(void *)((char *)&v3 + 4) = a1;
  OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_1(&dword_182959000, v1, v2, "Error loading iCloud hosts plist from %{public}@: %{public}@", (void)v3, DWORD2(v3));
}

void LaunchServices::URLOverrides::getiCloudHostNamesFromPlistAtURL()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_2_0();
  _os_log_error_impl(&dword_182959000, v0, OS_LOG_TYPE_ERROR, "Error loading iCloud hosts plist from %{public}@: value was missing or not an array", v1, 0xCu);
}

void LaunchServices::URLOverrides::State::State()
{
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_7(&dword_182959000, v0, v1, "Getting server-side iCloud hostnames list", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_7(&dword_182959000, v0, v1, "Getting iCloud hostnames list from lsd", v2, v3, v4, v5, v6);
}

void ___ZN14LaunchServices12URLOverridesL20getURLOverrideCommonEP5NSURL_block_invoke_cold_1(uint64_t a1)
{
  LODWORD(v3) = 138478083;
  *(void *)((char *)&v3 + 4) = *(void *)(a1 + 32);
  OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_1(&dword_182959000, v1, v2, "XPC error getting URL override for %{private}@: %{public}@", (void)v3, DWORD2(v3));
}

void ___ZN14LaunchServices12URLOverridesL20getURLOverrideCommonEP5NSURL_block_invoke_233_cold_1(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ___ZN14LaunchServices12URLOverridesL20getURLOverrideCommonEP5NSURL_block_invoke_233_cold_2(uint64_t a1)
{
  LODWORD(v3) = 138478083;
  *(void *)((char *)&v3 + 4) = *(void *)(a1 + 32);
  OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_1(&dword_182959000, v1, v2, "Error getting URL override for %{private}@: %{public}@", (void)v3, DWORD2(v3));
}

void ___ZN14LaunchServices12URLOverridesL18checkForiCloudHostEP15NSURLComponents_block_invoke_cold_1()
{
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_2(&dword_182959000, v0, v1, "Got iCloud hostnames list from lsd: %{public}@", v2, v3, v4, v5, v6);
}

void LaunchServices::URLPropertyProvider::prepareLocalizedNameValue(void *a1, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)long long buf = 138477827;
  *(void *)(buf + 4) = a1;
  _os_log_debug_impl(&dword_182959000, log, OS_LOG_TYPE_DEBUG, "Not localizing name for %{private}@ because we are in _LSContextInit() and recursion/deadlock would occur.", buf, 0xCu);
}

void LaunchServices::URLPropertyProvider::prepareDistinctLocalizedNameValue(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void LaunchServices::URLPropertyProvider::prepareLocalizedNameDictionaryValue(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void LaunchServices::URLPropertyProvider::prepareLocalizedTypeDescriptionDictionaryValue(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void LaunchServices::URLPropertyProvider::prepareArchitecturesValue(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void LaunchServices::URLPropertyProvider::prepareVolumeLocalizedNameValue(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void LaunchServices::URLPropertyProvider::prepareApplicationDeviceManagementPolicyValue(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _LSIsKindOfClasses_cold_1(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl(&dword_182959000, log, OS_LOG_TYPE_DEBUG, "Caller is checking if an object is a (maybe bundle) record, so allowing the Core Types proxy too.", v1, 2u);
}

void _UTTypePrecachePropertiesOfIdentifiers_cold_1(os_log_t log)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  int v1 = 136446210;
  uint64_t v2 = "void _UTTypePrecachePropertiesOfIdentifiers(CFArrayRef)";
  _os_log_error_impl(&dword_182959000, log, OS_LOG_TYPE_ERROR, "%{public}s is a no-op. Use the UniformTypeIdentifiers framework to get instances of the UTType class instead.", (uint8_t *)&v1, 0xCu);
}

void _UTTypeAddWithDeclarationDictionary_cold_1(void *a1, void *a2, uint64_t a3, NSObject *a4)
{
  id v7 = a2;
  *(_DWORD *)a3 = 138412546;
  *(void *)(a3 + 4) = a1;
  *(_WORD *)(a3 + 12) = 2112;
  *(void *)(a3 + 14) = v7;
  _os_log_error_impl(&dword_182959000, a4, OS_LOG_TYPE_ERROR, "Application \"%@\" declares a type \"%@\" without correct conformance to a file system type such as \"public.data\". This is a bug in the application.", (uint8_t *)a3, 0x16u);
}

void LaunchServices::TypeEvaluator::setSniffIfNeeded(os_log_t log)
{
  *(_WORD *)int v1 = 0;
  _os_log_fault_impl(&dword_182959000, log, OS_LOG_TYPE_FAULT, "type evaluator can't sniff without doing IO", v1, 2u);
}

uint64_t CCDeriveKey()
{
  return MEMORY[0x1F40C9540]();
}

void CCHmac(CCHmacAlgorithm algorithm, const void *key, size_t keyLength, const void *data, size_t dataLength, void *macOut)
{
}

uint64_t CCKDFParametersCreateHkdf()
{
  return MEMORY[0x1F40C9630]();
}

uint64_t CCKDFParametersDestroy()
{
  return MEMORY[0x1F40C9638]();
}

unsigned __int8 *__cdecl CC_MD5(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1F40C9710](data, *(void *)&len, md);
}

unsigned __int8 *__cdecl CC_SHA1(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1F40C9730](data, *(void *)&len, md);
}

unsigned __int8 *__cdecl CC_SHA256(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1F40C9770](data, *(void *)&len, md);
}

unsigned __int8 *__cdecl CC_SHA512(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1F40C97B0](data, *(void *)&len, md);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  MEMORY[0x1F40D70A8]();
  return result;
}

void *__cdecl CFAllocatorAllocate(CFAllocatorRef allocator, CFIndex size, CFOptionFlags hint)
{
  return (void *)MEMORY[0x1F40D70E8](allocator, size, hint);
}

void CFAllocatorDeallocate(CFAllocatorRef allocator, void *ptr)
{
}

CFAllocatorRef CFAllocatorGetDefault(void)
{
  return (CFAllocatorRef)MEMORY[0x1F40D7110]();
}

void CFArrayAppendArray(CFMutableArrayRef theArray, CFArrayRef otherArray, CFRange otherRange)
{
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1F40D7170](allocator, values, numValues, callBacks);
}

CFArrayRef CFArrayCreateCopy(CFAllocatorRef allocator, CFArrayRef theArray)
{
  return (CFArrayRef)MEMORY[0x1F40D7178](allocator, theArray);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1F40D7190](allocator, capacity, callBacks);
}

CFMutableArrayRef CFArrayCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFArrayRef theArray)
{
  return (CFMutableArrayRef)MEMORY[0x1F40D7198](allocator, capacity, theArray);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1F40D71B8](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1F40D71D8]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1F40D71F0](theArray, idx);
}

void CFArrayGetValues(CFArrayRef theArray, CFRange range, const void **values)
{
}

void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx)
{
}

void CFArraySetValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
}

CFTypeRef CFAutorelease(CFTypeRef arg)
{
  return (CFTypeRef)MEMORY[0x1F40D72D8](arg);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1F40D7420]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1F40D7430](BOOLean);
}

CFArrayRef CFBundleCopyBundleLocalizations(CFBundleRef bundle)
{
  return (CFArrayRef)MEMORY[0x1F40D7448](bundle);
}

CFURLRef CFBundleCopyBundleURL(CFBundleRef bundle)
{
  return (CFURLRef)MEMORY[0x1F40D7450](bundle);
}

CFURLRef CFBundleCopyExecutableURL(CFBundleRef bundle)
{
  return (CFURLRef)MEMORY[0x1F40D7470](bundle);
}

CFDictionaryRef CFBundleCopyInfoDictionaryForURL(CFURLRef url)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7478](url);
}

CFDictionaryRef CFBundleCopyInfoDictionaryInDirectory(CFURLRef bundleURL)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7480](bundleURL);
}

CFArrayRef CFBundleCopyLocalizationsForPreferences(CFArrayRef locArray, CFArrayRef prefArray)
{
  return (CFArrayRef)MEMORY[0x1F40D7490](locArray, prefArray);
}

CFStringRef CFBundleCopyLocalizedString(CFBundleRef bundle, CFStringRef key, CFStringRef value, CFStringRef tableName)
{
  return (CFStringRef)MEMORY[0x1F40D74A8](bundle, key, value, tableName);
}

CFURLRef CFBundleCopyResourceURL(CFBundleRef bundle, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName)
{
  return (CFURLRef)MEMORY[0x1F40D74D0](bundle, resourceName, resourceType, subDirName);
}

CFURLRef CFBundleCopyResourceURLForLocalization(CFBundleRef bundle, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName, CFStringRef localizationName)
{
  return (CFURLRef)MEMORY[0x1F40D74D8](bundle, resourceName, resourceType, subDirName, localizationName);
}

CFURLRef CFBundleCopySupportFilesDirectoryURL(CFBundleRef bundle)
{
  return (CFURLRef)MEMORY[0x1F40D7518](bundle);
}

CFStringRef CFBundleGetDevelopmentRegion(CFBundleRef bundle)
{
  return (CFStringRef)MEMORY[0x1F40D7550](bundle);
}

CFStringRef CFBundleGetIdentifier(CFBundleRef bundle)
{
  return (CFStringRef)MEMORY[0x1F40D7568](bundle);
}

CFDictionaryRef CFBundleGetInfoDictionary(CFBundleRef bundle)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7578](bundle);
}

CFBundleRef CFBundleGetMainBundle(void)
{
  return (CFBundleRef)MEMORY[0x1F40D7598]();
}

CFTypeRef CFBundleGetValueForInfoDictionaryKey(CFBundleRef bundle, CFStringRef key)
{
  return (CFTypeRef)MEMORY[0x1F40D75D0](bundle, key);
}

void CFCharacterSetAddCharactersInRange(CFMutableCharacterSetRef theSet, CFRange theRange)
{
}

void CFCharacterSetAddCharactersInString(CFMutableCharacterSetRef theSet, CFStringRef theString)
{
}

CFCharacterSetRef CFCharacterSetCreateCopy(CFAllocatorRef alloc, CFCharacterSetRef theSet)
{
  return (CFCharacterSetRef)MEMORY[0x1F40D7708](alloc, theSet);
}

CFMutableCharacterSetRef CFCharacterSetCreateMutable(CFAllocatorRef alloc)
{
  return (CFMutableCharacterSetRef)MEMORY[0x1F40D7718](alloc);
}

CFStringRef CFCopyDescription(CFTypeRef cf)
{
  return (CFStringRef)MEMORY[0x1F40D77A8](cf);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1F40D77E8](allocator, bytes, length);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x1F40D7818](allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1F40D7830](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1F40D7850](theData);
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1F40D7968](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7978](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7990](allocator, theDict);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D7998](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D79A8](allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1F40D79C0](theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1F40D7A00]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1F40D7A10](theDict, key);
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1F40D7A68](cf1, cf2);
}

CFErrorRef CFErrorCreate(CFAllocatorRef allocator, CFErrorDomain domain, CFIndex code, CFDictionaryRef userInfo)
{
  return (CFErrorRef)MEMORY[0x1F40D7A98](allocator, domain, code, userInfo);
}

CFErrorRef CFErrorCreateWithUserInfoKeysAndValues(CFAllocatorRef allocator, CFErrorDomain domain, CFIndex code, const void *const *userInfoKeys, const void *const *userInfoValues, CFIndex numUserInfoValues)
{
  return (CFErrorRef)MEMORY[0x1F40D7AA0](allocator, domain, code, userInfoKeys, userInfoValues, numUserInfoValues);
}

CFFileDescriptorRef CFFileDescriptorCreate(CFAllocatorRef allocator, CFFileDescriptorNativeDescriptor fd, Boolean closeOnInvalidate, CFFileDescriptorCallBack callout, const CFFileDescriptorContext *context)
{
  return (CFFileDescriptorRef)MEMORY[0x1F40D7AD0](allocator, *(void *)&fd, closeOnInvalidate, callout, context);
}

CFRunLoopSourceRef CFFileDescriptorCreateRunLoopSource(CFAllocatorRef allocator, CFFileDescriptorRef f, CFIndex order)
{
  return (CFRunLoopSourceRef)MEMORY[0x1F40D7AD8](allocator, f, order);
}

void CFFileDescriptorDisableCallBacks(CFFileDescriptorRef f, CFOptionFlags callBackTypes)
{
}

void CFFileDescriptorEnableCallBacks(CFFileDescriptorRef f, CFOptionFlags callBackTypes)
{
}

CFFileDescriptorNativeDescriptor CFFileDescriptorGetNativeDescriptor(CFFileDescriptorRef f)
{
  return MEMORY[0x1F40D7AF0](f);
}

void CFFileDescriptorInvalidate(CFFileDescriptorRef f)
{
}

CFFileSecurityRef CFFileSecurityCreate(CFAllocatorRef allocator)
{
  return (CFFileSecurityRef)MEMORY[0x1F40D7B18](allocator);
}

Boolean CFFileSecuritySetMode(CFFileSecurityRef fileSec, mode_t mode)
{
  return MEMORY[0x1F40D7B50](fileSec, mode);
}

CFAllocatorRef CFGetAllocator(CFTypeRef cf)
{
  return (CFAllocatorRef)MEMORY[0x1F40D7B60](cf);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B80](cf);
}

CFHashCode CFHash(CFTypeRef cf)
{
  return MEMORY[0x1F40D7BA0](cf);
}

CFArrayRef CFLocaleCopyPreferredLanguages(void)
{
  return (CFArrayRef)MEMORY[0x1F40D7BD8]();
}

CFLocaleRef CFLocaleCreate(CFAllocatorRef allocator, CFLocaleIdentifier localeIdentifier)
{
  return (CFLocaleRef)MEMORY[0x1F40D7BE0](allocator, localeIdentifier);
}

CFLocaleIdentifier CFLocaleCreateCanonicalLanguageIdentifierFromString(CFAllocatorRef allocator, CFStringRef localeIdentifier)
{
  return (CFLocaleIdentifier)MEMORY[0x1F40D7BE8](allocator, localeIdentifier);
}

CFLocaleRef CFLocaleGetSystem(void)
{
  return (CFLocaleRef)MEMORY[0x1F40D7C38]();
}

CFRunLoopSourceRef CFMachPortCreateRunLoopSource(CFAllocatorRef allocator, CFMachPortRef port, CFIndex order)
{
  return (CFRunLoopSourceRef)MEMORY[0x1F40D7C60](allocator, port, order);
}

CFMachPortRef CFMachPortCreateWithPort(CFAllocatorRef allocator, mach_port_t portNum, CFMachPortCallBack callout, CFMachPortContext *context, Boolean *shouldFreeInfo)
{
  return (CFMachPortRef)MEMORY[0x1F40D7C68](allocator, *(void *)&portNum, callout, context, shouldFreeInfo);
}

mach_port_t CFMachPortGetPort(CFMachPortRef port)
{
  return MEMORY[0x1F40D7C78](port);
}

void CFMachPortInvalidate(CFMachPortRef port)
{
}

void CFMachPortSetInvalidationCallBack(CFMachPortRef port, CFMachPortInvalidationCallBack callout)
{
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1F40D7D08]();
}

CFNotificationCenterRef CFNotificationCenterGetDistributedCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1F40D7D18]();
}

CFNotificationCenterRef CFNotificationCenterGetLocalCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1F40D7D20]();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
}

void CFNotificationCenterPostNotificationWithOptions(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, CFOptionFlags options)
{
}

void CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void *observer, CFNotificationName name, const void *object)
{
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1F40D7D80](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1F40D7E10]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1F40D7E20](number, theType, valuePtr);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7EA0](key, applicationID);
}

CFPropertyListRef CFPreferencesCopyValue(CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7ED0](key, applicationID, userName, hostName);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1F40D7EE0](key, applicationID, keyExistsAndHasValidFormat);
}

void CFPreferencesSetValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
}

Boolean CFPreferencesSynchronize(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return MEMORY[0x1F40D7F10](applicationID, userName, hostName);
}

CFPropertyListRef CFPropertyListCreateDeepCopy(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFOptionFlags mutabilityOption)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7F28](allocator, propertyList, mutabilityOption);
}

CFPropertyListRef CFPropertyListCreateFromXMLData(CFAllocatorRef allocator, CFDataRef xmlData, CFOptionFlags mutabilityOption, CFStringRef *errorString)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7F40](allocator, xmlData, mutabilityOption, errorString);
}

CFPropertyListRef CFPropertyListCreateWithStream(CFAllocatorRef allocator, CFReadStreamRef stream, CFIndex streamLength, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7F58](allocator, stream, streamLength, options, format, error);
}

CFIndex CFPropertyListWriteToStream(CFPropertyListRef propertyList, CFWriteStreamRef stream, CFPropertyListFormat format, CFStringRef *errorString)
{
  return MEMORY[0x1F40D7F78](propertyList, stream, format, errorString);
}

void CFReadStreamClose(CFReadStreamRef stream)
{
}

CFReadStreamRef CFReadStreamCreateWithBytesNoCopy(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFReadStreamRef)MEMORY[0x1F40D7FB0](alloc, bytes, length, bytesDeallocator);
}

CFReadStreamRef CFReadStreamCreateWithFile(CFAllocatorRef alloc, CFURLRef fileURL)
{
  return (CFReadStreamRef)MEMORY[0x1F40D7FC0](alloc, fileURL);
}

Boolean CFReadStreamOpen(CFReadStreamRef stream)
{
  return MEMORY[0x1F40D7FF8](stream);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D8048](cf);
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return (CFRunLoopRef)MEMORY[0x1F40D80B0]();
}

void CFRunLoopPerformBlock(CFRunLoopRef rl, CFTypeRef mode, void *block)
{
}

void CFRunLoopRemoveSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

void CFRunLoopRun(void)
{
}

CFRunLoopRunResult CFRunLoopRunInMode(CFRunLoopMode mode, CFTimeInterval seconds, Boolean returnAfterSourceHandled)
{
  return MEMORY[0x1F40D8128](mode, returnAfterSourceHandled, seconds);
}

void CFRunLoopSourceInvalidate(CFRunLoopSourceRef source)
{
}

void CFRunLoopStop(CFRunLoopRef rl)
{
}

void CFRunLoopWakeUp(CFRunLoopRef rl)
{
}

void CFSetAddValue(CFMutableSetRef theSet, const void *value)
{
}

void CFSetApplyFunction(CFSetRef theSet, CFSetApplierFunction applier, void *context)
{
}

Boolean CFSetContainsValue(CFSetRef theSet, const void *value)
{
  return MEMORY[0x1F40D81F8](theSet, value);
}

CFSetRef CFSetCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFSetCallBacks *callBacks)
{
  return (CFSetRef)MEMORY[0x1F40D8200](allocator, values, numValues, callBacks);
}

CFSetRef CFSetCreateCopy(CFAllocatorRef allocator, CFSetRef theSet)
{
  return (CFSetRef)MEMORY[0x1F40D8208](allocator, theSet);
}

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
{
  return (CFMutableSetRef)MEMORY[0x1F40D8210](allocator, capacity, callBacks);
}

CFIndex CFSetGetCount(CFSetRef theSet)
{
  return MEMORY[0x1F40D8220](theSet);
}

CFTypeID CFSetGetTypeID(void)
{
  return MEMORY[0x1F40D8230]();
}

void CFSetGetValues(CFSetRef theSet, const void **values)
{
}

void CFSetRemoveValue(CFMutableSetRef theSet, const void *value)
{
}

void CFSetSetValue(CFMutableSetRef theSet, const void *value)
{
}

void CFShow(CFTypeRef obj)
{
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
}

void CFStringAppendFormat(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1F40D8388](theString1, theString2, compareOptions);
}

CFComparisonResult CFStringCompareWithOptions(CFStringRef theString1, CFStringRef theString2, CFRange rangeToCompare, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1F40D8390](theString1, theString2, rangeToCompare.location, rangeToCompare.length, compareOptions);
}

UInt32 CFStringConvertEncodingToWindowsCodepage(CFStringEncoding encoding)
{
  return MEMORY[0x1F40D83B0](*(void *)&encoding);
}

CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFStringRef)MEMORY[0x1F40D83F0](alloc, theString);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x1F40D8408](alloc, maxLength);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return (CFMutableStringRef)MEMORY[0x1F40D8410](alloc, maxLength, theString);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x1F40D8438](alloc, bytes, numBytes, *(void *)&encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1F40D8448](alloc, cStr, *(void *)&encoding);
}

CFStringRef CFStringCreateWithCharacters(CFAllocatorRef alloc, const UniChar *chars, CFIndex numChars)
{
  return (CFStringRef)MEMORY[0x1F40D8460](alloc, chars, numChars);
}

CFStringRef CFStringCreateWithCharactersNoCopy(CFAllocatorRef alloc, const UniChar *chars, CFIndex numChars, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x1F40D8470](alloc, chars, numChars, contentsDeallocator);
}

CFStringRef CFStringCreateWithFileSystemRepresentation(CFAllocatorRef alloc, const char *buffer)
{
  return (CFStringRef)MEMORY[0x1F40D8478](alloc, buffer);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x1F40D8490](alloc, formatOptions, format);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return (CFStringRef)MEMORY[0x1F40D84A8](alloc, str, range.location, range.length);
}

CFRange CFStringFind(CFStringRef theString, CFStringRef stringToFind, CFStringCompareFlags compareOptions)
{
  CFIndex v3 = MEMORY[0x1F40D84C8](theString, stringToFind, compareOptions);
  result.length = v4;
  result.locatioCFIndex n = v3;
  return result;
}

CFIndex CFStringFindAndReplace(CFMutableStringRef theString, CFStringRef stringToFind, CFStringRef replacementString, CFRange rangeToSearch, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1F40D84D0](theString, stringToFind, replacementString, rangeToSearch.location, rangeToSearch.length, compareOptions);
}

Boolean CFStringFindWithOptions(CFStringRef theString, CFStringRef stringToFind, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange *result)
{
  return MEMORY[0x1F40D84E0](theString, stringToFind, rangeToSearch.location, rangeToSearch.length, searchOptions, result);
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return MEMORY[0x1F40D8500](theString, range.location, range.length, *(void *)&encoding, lossByte, isExternalRepresentation, buffer, maxBufLen);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1F40D8510](theString, buffer, bufferSize, *(void *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1F40D8520](theString, *(void *)&encoding);
}

UniChar CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx)
{
  return MEMORY[0x1F40D8528](theString, idx);
}

void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar *buffer)
{
}

const UniChar *__cdecl CFStringGetCharactersPtr(CFStringRef theString)
{
  return (const UniChar *)MEMORY[0x1F40D8540](theString);
}

Boolean CFStringGetFileSystemRepresentation(CFStringRef string, char *buffer, CFIndex maxBufLen)
{
  return MEMORY[0x1F40D8558](string, buffer, maxBufLen);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1F40D8578](theString);
}

CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding)
{
  return MEMORY[0x1F40D8590](length, *(void *)&encoding);
}

CFRange CFStringGetRangeOfComposedCharactersAtIndex(CFStringRef theString, CFIndex theIndex)
{
  CFIndex v2 = MEMORY[0x1F40D85D8](theString, theIndex);
  result.length = v3;
  result.locatioCFIndex n = v2;
  return result;
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1F40D85F0]();
}

Boolean CFStringHasPrefix(CFStringRef theString, CFStringRef prefix)
{
  return MEMORY[0x1F40D8600](theString, prefix);
}

Boolean CFStringHasSuffix(CFStringRef theString, CFStringRef suffix)
{
  return MEMORY[0x1F40D8608](theString, suffix);
}

void CFStringLowercase(CFMutableStringRef theString, CFLocaleRef locale)
{
}

void CFStringNormalize(CFMutableStringRef theString, CFStringNormalizationForm theForm)
{
}

CFStringTokenizerTokenType CFStringTokenizerAdvanceToNextToken(CFStringTokenizerRef tokenizer)
{
  return MEMORY[0x1F40D8680](tokenizer);
}

CFTypeRef CFStringTokenizerCopyCurrentTokenAttribute(CFStringTokenizerRef tokenizer, CFOptionFlags attribute)
{
  return (CFTypeRef)MEMORY[0x1F40D8690](tokenizer, attribute);
}

CFStringTokenizerRef CFStringTokenizerCreate(CFAllocatorRef alloc, CFStringRef string, CFRange range, CFOptionFlags options, CFLocaleRef locale)
{
  return (CFStringTokenizerRef)MEMORY[0x1F40D8698](alloc, string, range.location, range.length, options, locale);
}

Boolean CFStringTransform(CFMutableStringRef string, CFRange *range, CFStringRef transform, Boolean reverse)
{
  return MEMORY[0x1F40D86C0](string, range, transform, reverse);
}

void CFStringTrim(CFMutableStringRef theString, CFStringRef trimString)
{
}

void CFURLClearResourcePropertyCacheForKey(CFURLRef url, CFStringRef key)
{
}

CFURLRef CFURLCopyAbsoluteURL(CFURLRef relativeURL)
{
  return (CFURLRef)MEMORY[0x1F40D8740](relativeURL);
}

CFStringRef CFURLCopyFileSystemPath(CFURLRef anURL, CFURLPathStyle pathStyle)
{
  return (CFStringRef)MEMORY[0x1F40D8758](anURL, pathStyle);
}

CFStringRef CFURLCopyLastPathComponent(CFURLRef url)
{
  return (CFStringRef)MEMORY[0x1F40D8770](url);
}

CFStringRef CFURLCopyPathExtension(CFURLRef url)
{
  return (CFStringRef)MEMORY[0x1F40D8798](url);
}

Boolean CFURLCopyResourcePropertyForKey(CFURLRef url, CFStringRef key, void *propertyValueTypeRefPtr, CFErrorRef *error)
{
  return MEMORY[0x1F40D87B0](url, key, propertyValueTypeRefPtr, error);
}

CFURLRef CFURLCreateCopyAppendingPathComponent(CFAllocatorRef allocator, CFURLRef url, CFStringRef pathComponent, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1F40D87F8](allocator, url, pathComponent, isDirectory);
}

CFURLRef CFURLCreateFromFileSystemRepresentation(CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1F40D8848](allocator, buffer, bufLen, isDirectory);
}

CFURLRef CFURLCreateFromFileSystemRepresentationRelativeToBase(CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x1F40D8850](allocator, buffer, bufLen, isDirectory, baseURL);
}

CFStringRef CFURLCreateStringByReplacingPercentEscapes(CFAllocatorRef allocator, CFStringRef originalString, CFStringRef charactersToLeaveEscaped)
{
  return (CFStringRef)MEMORY[0x1F40D8878](allocator, originalString, charactersToLeaveEscaped);
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1F40D88A0](allocator, filePath, pathStyle, isDirectory);
}

CFURLRef CFURLCreateWithFileSystemPathRelativeToBase(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x1F40D88A8](allocator, filePath, pathStyle, isDirectory, baseURL);
}

CFURLRef CFURLCreateWithString(CFAllocatorRef allocator, CFStringRef URLString, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x1F40D88C0](allocator, URLString, baseURL);
}

CFURLEnumeratorRef CFURLEnumeratorCreateForDirectoryURL(CFAllocatorRef alloc, CFURLRef directoryURL, CFURLEnumeratorOptions option, CFArrayRef propertyKeys)
{
  return (CFURLEnumeratorRef)MEMORY[0x1F40D88C8](alloc, directoryURL, option, propertyKeys);
}

CFURLEnumeratorResult CFURLEnumeratorGetNextURL(CFURLEnumeratorRef enumerator, CFURLRef *url, CFErrorRef *error)
{
  return MEMORY[0x1F40D88E0](enumerator, url, error);
}

Boolean CFURLGetFileSystemRepresentation(CFURLRef url, Boolean resolveAgainstBase, UInt8 *buffer, CFIndex maxBufLen)
{
  return MEMORY[0x1F40D8908](url, resolveAgainstBase, buffer, maxBufLen);
}

CFTypeID CFURLGetTypeID(void)
{
  return MEMORY[0x1F40D8928]();
}

Boolean CFURLHasDirectoryPath(CFURLRef anURL)
{
  return MEMORY[0x1F40D8938](anURL);
}

Boolean CFURLResourceIsReachable(CFURLRef url, CFErrorRef *error)
{
  return MEMORY[0x1F40D8948](url, error);
}

Boolean CFURLSetResourcePropertyForKey(CFURLRef url, CFStringRef key, CFTypeRef propertyValue, CFErrorRef *error)
{
  return MEMORY[0x1F40D8958](url, key, propertyValue, error);
}

void CFURLSetTemporaryResourcePropertyForKey(CFURLRef url, CFStringRef key, CFTypeRef propertyValue)
{
}

CFUUIDRef CFUUIDCreate(CFAllocatorRef alloc)
{
  return (CFUUIDRef)MEMORY[0x1F40D8988](alloc);
}

CFUUIDRef CFUUIDCreateFromString(CFAllocatorRef alloc, CFStringRef uuidStr)
{
  return (CFUUIDRef)MEMORY[0x1F40D8998](alloc, uuidStr);
}

CFStringRef CFUUIDCreateString(CFAllocatorRef alloc, CFUUIDRef uuid)
{
  return (CFStringRef)MEMORY[0x1F40D89B0](alloc, uuid);
}

CFUserNotificationRef CFUserNotificationCreate(CFAllocatorRef allocator, CFTimeInterval timeout, CFOptionFlags flags, SInt32 *error, CFDictionaryRef dictionary)
{
  return (CFUserNotificationRef)MEMORY[0x1F40D8A28](allocator, flags, error, dictionary, timeout);
}

SInt32 CFUserNotificationDisplayAlert(CFTimeInterval timeout, CFOptionFlags flags, CFURLRef iconURL, CFURLRef soundURL, CFURLRef localizationURL, CFStringRef alertHeader, CFStringRef alertMessage, CFStringRef defaultButtonTitle, CFStringRef alternateButtonTitle, CFStringRef otherButtonTitle, CFOptionFlags *responseFlags)
{
  return MEMORY[0x1F40D8A48](flags, iconURL, soundURL, localizationURL, alertHeader, alertMessage, defaultButtonTitle, alternateButtonTitle, timeout);
}

SInt32 CFUserNotificationReceiveResponse(CFUserNotificationRef userNotification, CFTimeInterval timeout, CFOptionFlags *responseFlags)
{
  return MEMORY[0x1F40D8A68](userNotification, responseFlags, timeout);
}

void CFWriteStreamClose(CFWriteStreamRef stream)
{
}

CFTypeRef CFWriteStreamCopyProperty(CFWriteStreamRef stream, CFStreamPropertyKey propertyName)
{
  return (CFTypeRef)MEMORY[0x1F40D8A90](stream, propertyName);
}

CFWriteStreamRef CFWriteStreamCreateWithAllocatedBuffers(CFAllocatorRef alloc, CFAllocatorRef bufferAllocator)
{
  return (CFWriteStreamRef)MEMORY[0x1F40D8AA0](alloc, bufferAllocator);
}

Boolean CFWriteStreamOpen(CFWriteStreamRef stream)
{
  return MEMORY[0x1F40D8AD0](stream);
}

uint64_t CSMapGetHeader()
{
  return MEMORY[0x1F4115050]();
}

uint64_t CSMapInit()
{
  return MEMORY[0x1F4115058]();
}

uint64_t CSMapRemoveValue()
{
  return MEMORY[0x1F4115060]();
}

uint64_t CSMapSetValue()
{
  return MEMORY[0x1F4115068]();
}

uint64_t CSMapWriteToHeader()
{
  return MEMORY[0x1F4115070]();
}

uint64_t CSStoreAllocUnit()
{
  return MEMORY[0x1F4115078]();
}

uint64_t CSStoreAllocUnitWithData()
{
  return MEMORY[0x1F4115080]();
}

uint64_t CSStoreCreateMutable()
{
  return MEMORY[0x1F4115088]();
}

uint64_t CSStoreCreateMutableCopy()
{
  return MEMORY[0x1F4115090]();
}

uint64_t CSStoreFreeUnit()
{
  return MEMORY[0x1F4115098]();
}

uint64_t CSStoreGetGeneration()
{
  return MEMORY[0x1F41150A0]();
}

uint64_t CSStoreGetHeader()
{
  return MEMORY[0x1F41150A8]();
}

uint64_t CSStoreGetUnit()
{
  return MEMORY[0x1F41150B0]();
}

uint64_t CSStringBindingCopyCFStrings()
{
  return MEMORY[0x1F41150B8]();
}

uint64_t CSStringBindingFindStringAndBindings()
{
  return MEMORY[0x1F41150C0]();
}

uint64_t CSStringBindingRemoveBindings()
{
  return MEMORY[0x1F41150C8]();
}

uint64_t CSStringBindingSetBindings()
{
  return MEMORY[0x1F41150D0]();
}

uint64_t CSStringBindingStoreAddTable()
{
  return MEMORY[0x1F41150D8]();
}

uint64_t CSStringBindingStoreInit()
{
  return MEMORY[0x1F41150E0]();
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x1F417CDE0]();
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x1F417CE00]();
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x1F40E7010](aClassName);
}

uint64_t NSRequestConcreteImplementation()
{
  return MEMORY[0x1F40E7228]();
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return (SEL)MEMORY[0x1F40E7258](aSelectorName);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1F40E7280](aClass);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x1F40E72B0](aSelector);
}

NSRange NSUnionRange(NSRange range1, NSRange range2)
{
  NSUInteger v2 = MEMORY[0x1F40E72E0](range1.location, range1.length, range2.location, range2.length);
  result.length = v3;
  result.locatioCFIndex n = v2;
  return result;
}

SCPreferencesRef SCPreferencesCreate(CFAllocatorRef allocator, CFStringRef name, CFStringRef prefsID)
{
  return (SCPreferencesRef)MEMORY[0x1F4101FF8](allocator, name, prefsID);
}

CFDictionaryRef SCPreferencesPathGetValue(SCPreferencesRef prefs, CFStringRef path)
{
  return (CFDictionaryRef)MEMORY[0x1F4102020](prefs, path);
}

uint64_t SecCertificateCopyCommonNames()
{
  return MEMORY[0x1F40F6AC0]();
}

uint64_t SecPolicyCreateAppleIDAuthorityPolicy()
{
  return MEMORY[0x1F40F6FF0]();
}

int SecRandomCopyBytes(SecRandomRef rnd, size_t count, void *bytes)
{
  return MEMORY[0x1F40F70F0](rnd, count, bytes);
}

OSStatus SecTrustCreateWithCertificates(CFTypeRef certificates, CFTypeRef policies, SecTrustRef *trust)
{
  return MEMORY[0x1F40F71E0](certificates, policies, trust);
}

OSStatus SecTrustEvaluate(SecTrustRef trust, SecTrustResultType *result)
{
  return MEMORY[0x1F40F71F0](trust, result);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

uint64_t _CFBundleCopyBundleLocalizationsAddingDevelopmentLocalization()
{
  return MEMORY[0x1F40D8BA8]();
}

uint64_t _CFBundleCopyBundleURLForExecutableURL()
{
  return MEMORY[0x1F40D8BB0]();
}

uint64_t _CFBundleCopyExecutableURLInDirectory()
{
  return MEMORY[0x1F40D8BB8]();
}

uint64_t _CFBundleCopyFileTypeForFileURL()
{
  return MEMORY[0x1F40D8BC0]();
}

uint64_t _CFBundleCopyInfoPlistURL()
{
  return MEMORY[0x1F40D8BE8]();
}

uint64_t _CFBundleCreateUnique()
{
  return MEMORY[0x1F40D8C30]();
}

uint64_t _CFBundleCreateWithExecutableURLIfLooksLikeBundle()
{
  return MEMORY[0x1F40D8C38]();
}

uint64_t _CFCopySystemVersionPlatformDictionary()
{
  return MEMORY[0x1F40D8D20]();
}

uint64_t _CFGetEUID()
{
  return MEMORY[0x1F40D8DE0]();
}

uint64_t _CFGetPathExtensionRangesFromPathComponent()
{
  return MEMORY[0x1F40D8DE8]();
}

uint64_t _CFPropertyListCopyTopLevelKeys()
{
  return MEMORY[0x1F40D9028]();
}

uint64_t _CFPropertyListCreateFiltered()
{
  return MEMORY[0x1F40D9030]();
}

uint64_t _CFRuntimeCreateInstance()
{
  return MEMORY[0x1F40D90D0]();
}

uint64_t _CFRuntimeGetClassWithTypeID()
{
  return MEMORY[0x1F40D90D8]();
}

uint64_t _CFRuntimeRegisterClass()
{
  return MEMORY[0x1F40D90E8]();
}

uint64_t _CFStringGetUserDefaultEncoding()
{
  return MEMORY[0x1F40D9170]();
}

uint64_t _CFURLBookmarkCopyDescription()
{
  return MEMORY[0x1F40D91F0]();
}

uint64_t _CFURLCopyPromiseURLOfLogicalURL()
{
  return MEMORY[0x1F40D9278]();
}

uint64_t _CFURLCopyPropertiesOfPromiseAtURL()
{
  return MEMORY[0x1F40D9280]();
}

uint64_t _CFURLCopyResourcePropertyForKeyFromCache()
{
  return MEMORY[0x1F40D92A0]();
}

uint64_t _CFURLCopyResourcePropertyValuesAndFlags()
{
  return MEMORY[0x1F40D92A8]();
}

uint64_t _CFURLCreateStandardError()
{
  return MEMORY[0x1F40D92E8]();
}

uint64_t _CFURLFileCacheClearPropertyValueForKey()
{
  return MEMORY[0x1F40D9300]();
}

uint64_t _CFURLFileCacheGetFinderInfo()
{
  return MEMORY[0x1F40D9308]();
}

uint64_t _CFURLFileCacheGetFlags()
{
  return MEMORY[0x1F40D9310]();
}

uint64_t _CFURLFileCacheGetName()
{
  return MEMORY[0x1F40D9318]();
}

uint64_t _CFURLFileCacheGetPropertyValueForKey()
{
  return MEMORY[0x1F40D9320]();
}

uint64_t _CFURLFileCacheSetPropertyValueForKey()
{
  return MEMORY[0x1F40D9328]();
}

uint64_t _CFURLGetResourcePropertyFlags()
{
  return MEMORY[0x1F40D9338]();
}

uint64_t _CFURLIsFileURL()
{
  return MEMORY[0x1F40D9348]();
}

uint64_t _CFURLIsItemPromiseAtURL()
{
  return MEMORY[0x1F40D9350]();
}

uint64_t _CFURLIsPromiseName()
{
  return MEMORY[0x1F40D9358]();
}

uint64_t _CFURLRegisterFilePropertyProvider()
{
  return MEMORY[0x1F40D9390]();
}

uint64_t _CFURLRegisterFilePropertyWithOptions()
{
  return MEMORY[0x1F40D9398]();
}

uint64_t _CFXPCCreateCFObjectFromXPCObject()
{
  return MEMORY[0x1F40D9438]();
}

uint64_t _CFXPCCreateXPCObjectFromCFObject()
{
  return MEMORY[0x1F40D9450]();
}

uint64_t _CSArrayAppendValue()
{
  return MEMORY[0x1F41150E8]();
}

uint64_t _CSArrayCreate()
{
  return MEMORY[0x1F41150F0]();
}

uint64_t _CSArrayCreateWithCapacity()
{
  return MEMORY[0x1F41150F8]();
}

uint64_t _CSArrayDispose()
{
  return MEMORY[0x1F4115100]();
}

uint64_t _CSArrayEnumerateAllValues()
{
  return MEMORY[0x1F4115108]();
}

uint64_t _CSArrayGetCount()
{
  return MEMORY[0x1F4115110]();
}

uint64_t _CSArrayGetValueAtIndex()
{
  return MEMORY[0x1F4115118]();
}

uint64_t _CSArrayInsertValueAtIndex()
{
  return MEMORY[0x1F4115120]();
}

uint64_t _CSArrayRemoveValueAtIndex()
{
  return MEMORY[0x1F4115128]();
}

uint64_t _CSCopyStringForCharacters()
{
  return MEMORY[0x1F4115130]();
}

uint64_t _CSGetConstStringForCharacters()
{
  return MEMORY[0x1F4115138]();
}

uint64_t _CSGetStringForCFString()
{
  return MEMORY[0x1F4115140]();
}

uint64_t _CSGetStringForCharacters()
{
  return MEMORY[0x1F4115148]();
}

uint64_t _CSMapCopyDebugDescription()
{
  return MEMORY[0x1F4115150]();
}

uint64_t _CSStoreAccessContextAccessForRead()
{
  return MEMORY[0x1F4115158]();
}

uint64_t _CSStoreAccessContextAssertReading()
{
  return MEMORY[0x1F4115160]();
}

uint64_t _CSStoreAccessContextAssertWriting()
{
  return MEMORY[0x1F4115168]();
}

uint64_t _CSStoreAccessContextCreateSharedReadingContext()
{
  return MEMORY[0x1F4115170]();
}

uint64_t _CSStoreAccessContextCreateWithLock()
{
  return MEMORY[0x1F4115178]();
}

uint64_t _CSStoreAddTable()
{
  return MEMORY[0x1F4115180]();
}

uint64_t _CSStoreCopyDebugDescriptionOfBytesInRange()
{
  return MEMORY[0x1F4115188]();
}

uint64_t _CSStoreCopyDebugDescriptionOfUnit()
{
  return MEMORY[0x1F4115190]();
}

uint64_t _CSStoreCopyMemoryStatistics()
{
  return MEMORY[0x1F4115198]();
}

uint64_t _CSStoreCopyTableName()
{
  return MEMORY[0x1F41151A0]();
}

uint64_t _CSStoreCreateDataWithUnitNoCopy()
{
  return MEMORY[0x1F41151A8]();
}

uint64_t _CSStoreCreateWithURL()
{
  return MEMORY[0x1F41151B0]();
}

uint64_t _CSStoreCreateWithXPCRepresentation()
{
  return MEMORY[0x1F41151B8]();
}

uint64_t _CSStoreCreateXPCRepresentation()
{
  return MEMORY[0x1F41151C0]();
}

uint64_t _CSStoreEnumerateTables()
{
  return MEMORY[0x1F41151C8]();
}

uint64_t _CSStoreEnumerateUnits()
{
  return MEMORY[0x1F41151D0]();
}

uint64_t _CSStoreGarbageCollect()
{
  return MEMORY[0x1F41151D8]();
}

uint64_t _CSStoreGetArrayTable()
{
  return MEMORY[0x1F41151E0]();
}

uint64_t _CSStoreGetCatalogTable()
{
  return MEMORY[0x1F41151E8]();
}

uint64_t _CSStoreGetStringTable()
{
  return MEMORY[0x1F41151F0]();
}

uint64_t _CSStoreGetTableWithName()
{
  return MEMORY[0x1F41151F8]();
}

uint64_t _CSStoreGetXPCClass()
{
  return MEMORY[0x1F4115200]();
}

uint64_t _CSStoreSetMutable()
{
  return MEMORY[0x1F4115218]();
}

uint64_t _CSStoreSetUnitIdentifierExhaustionHandler()
{
  return MEMORY[0x1F4115220]();
}

uint64_t _CSStoreValidate()
{
  return MEMORY[0x1F4115228]();
}

uint64_t _CSStoreWriteToHeader()
{
  return MEMORY[0x1F4115230]();
}

uint64_t _CSStoreWriteToURL()
{
  return MEMORY[0x1F4115238]();
}

uint64_t _CSStoreWriteToUnit()
{
  return MEMORY[0x1F4115240]();
}

uint64_t _CSStringBindingEnumerate()
{
  return MEMORY[0x1F4115248]();
}

uint64_t _CSStringBindingEnumerateAllBindings()
{
  return MEMORY[0x1F4115250]();
}

uint64_t _CSStringBindingGetBindings()
{
  return MEMORY[0x1F4115258]();
}

uint64_t _CSStringCopyCFString()
{
  return MEMORY[0x1F4115260]();
}

uint64_t _CSStringIsValid()
{
  return MEMORY[0x1F4115268]();
}

uint64_t _CSStringMakeConst()
{
  return MEMORY[0x1F4115270]();
}

uint64_t _CSStringRelease()
{
  return MEMORY[0x1F4115278]();
}

uint64_t _CSStringRetain()
{
  return MEMORY[0x1F4115280]();
}

uint64_t _NSIsNSArray()
{
  return MEMORY[0x1F40D9490]();
}

uint64_t _NSIsNSData()
{
  return MEMORY[0x1F40D94A8]();
}

uint64_t _NSIsNSDictionary()
{
  return MEMORY[0x1F40D94B8]();
}

uint64_t _NSIsNSNumber()
{
  return MEMORY[0x1F40D94C0]();
}

uint64_t _NSIsNSSet()
{
  return MEMORY[0x1F40D94D8]();
}

uint64_t _NSIsNSString()
{
  return MEMORY[0x1F40D94E0]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t CSStore2::AttributedStringWriter::beginFlags(CSStore2::AttributedStringWriter *this, NSString *a2)
{
  return MEMORY[0x1F4115288](this, a2);
}

uint64_t CSStore2::AttributedStringWriter::missingFlag()
{
  return MEMORY[0x1F4115290]();
}

uint64_t CSStore2::AttributedStringWriter::stringArray(CSStore2::AttributedStringWriter *this, NSString *a2, const unsigned int *a3)
{
  return MEMORY[0x1F4115298](this, a2, a3);
}

uint64_t CSStore2::AttributedStringWriter::stringArray(CSStore2::AttributedStringWriter *this, NSString *a2)
{
  return MEMORY[0x1F41152A0](this, a2);
}

uint64_t CSStore2::AttributedStringWriter::setVisualizer()
{
  return MEMORY[0x1F41152A8]();
}

uint64_t CSStore2::AttributedStringWriter::withTextColor()
{
  return MEMORY[0x1F41152B0]();
}

uint64_t CSStore2::AttributedStringWriter::attributedString(CSStore2::AttributedStringWriter *this, NSAttributedString *a2)
{
  return MEMORY[0x1F41152B8](this, a2);
}

uint64_t CSStore2::AttributedStringWriter::withWarningColors()
{
  return MEMORY[0x1F41152C0]();
}

uint64_t CSStore2::AttributedStringWriter::beginBitfieldFlags(CSStore2::AttributedStringWriter *this, NSString *a2)
{
  return MEMORY[0x1F41152C8](this, a2);
}

uint64_t CSStore2::AttributedStringWriter::setInsertsNewlines(CSStore2::AttributedStringWriter *this)
{
  return MEMORY[0x1F41152D0](this);
}

uint64_t CSStore2::AttributedStringWriter::withReferenceToUnit()
{
  return MEMORY[0x1F41152D8]();
}

uint64_t CSStore2::AttributedStringWriter::setElidesEmptyValues(CSStore2::AttributedStringWriter *this)
{
  return MEMORY[0x1F41152E0](this);
}

uint64_t CSStore2::AttributedStringWriter::withAppliedAttribute()
{
  return MEMORY[0x1F41152E8]();
}

uint64_t CSStore2::AttributedStringWriter::withTextAndBackgroundColor()
{
  return MEMORY[0x1F41152F0]();
}

uint64_t CSStore2::AttributedStringWriter::flag()
{
  return MEMORY[0x1F41152F8]();
}

uint64_t CSStore2::AttributedStringWriter::link(CSStore2::AttributedStringWriter *this, NSURL *a2, NSString *a3)
{
  return MEMORY[0x1F4115300](this, a2, a3);
}

uint64_t CSStore2::AttributedStringWriter::link(CSStore2::AttributedStringWriter *this, uint64_t a2, uint64_t a3, NSString *a4)
{
  return MEMORY[0x1F4115308](this, a2, a3, a4);
}

uint64_t CSStore2::AttributedStringWriter::array(CSStore2::AttributedStringWriter *this, NSArray *a2)
{
  return MEMORY[0x1F4115310](this, a2);
}

uint64_t CSStore2::AttributedStringWriter::array(CSStore2::AttributedStringWriter *this, NSString *a2, NSArray *a3)
{
  return MEMORY[0x1F4115318](this, a2, a3);
}

uint64_t CSStore2::AttributedStringWriter::format(CSStore2::AttributedStringWriter *this, NSString *a2, NSString *a3, ...)
{
  return MEMORY[0x1F4115320](this, a2, a3);
}

uint64_t CSStore2::AttributedStringWriter::number(CSStore2::AttributedStringWriter *this, NSString *a2, NSNumber *a3)
{
  return MEMORY[0x1F4115328](this, a2, a3);
}

uint64_t CSStore2::AttributedStringWriter::string(CSStore2::AttributedStringWriter *this, NSString *a2)
{
  return MEMORY[0x1F4115330](this, a2);
}

{
  return MEMORY[0x1F4115340](this, a2);
}

uint64_t CSStore2::AttributedStringWriter::string(CSStore2::AttributedStringWriter *this, NSString *a2, NSString *a3)
{
  return MEMORY[0x1F4115338](this, a2, a3);
}

uint64_t CSStore2::AttributedStringWriter::endFlags(CSStore2::AttributedStringWriter *this)
{
  return MEMORY[0x1F4115348](this);
}

uint64_t CSStore2::AttributedStringWriter::Separator(CSStore2::AttributedStringWriter *this, uint64_t a2, NSString *a3)
{
  return MEMORY[0x1F4115350](this, a2, a3);
}

uint64_t CSStore2::AttributedStringWriter::childUnit(CSStore2::AttributedStringWriter *this, NSString *a2)
{
  return MEMORY[0x1F4115358](this, a2);
}

uint64_t CSStore2::AttributedStringWriter::separator(CSStore2::AttributedStringWriter *this, uint64_t a2, NSString *a3)
{
  return MEMORY[0x1F4115368](this, a2, a3);
}

uint64_t CSStore2::AttributedStringWriter::timestamp(CSStore2::AttributedStringWriter *this, NSString *a2, double a3)
{
  return MEMORY[0x1F4115370](this, a2, a3);
}

uint64_t CSStore2::AttributedStringWriter::AttributedStringWriter(CSStore2::AttributedStringWriter *this, const __CSStore *a2, NSMutableAttributedString *a3)
{
  return MEMORY[0x1F4115378](this, a2, a3);
}

uint64_t CSStore2::AttributedStringWriter::AttributedStringWriter(CSStore2::AttributedStringWriter *this, const CSStore2::AttributedStringWriter *a2)
{
  return MEMORY[0x1F4115380](this, a2);
}

void CSStore2::AttributedStringWriter::~AttributedStringWriter(CSStore2::AttributedStringWriter *this)
{
}

uint64_t CSStore2::AttributedStringWriter::getVisualizer(CSStore2::AttributedStringWriter *this)
{
  return MEMORY[0x1F4115390](this);
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x1F417E3A8]();
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1F417E408](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1F417E418](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1F417E588](__n);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1F417E5D8](this, __s);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x1F417E848]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x1F417E850]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x1F417E860]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1F417E8D0]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1F417E978]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1F417E980]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

void std::__libcpp_verbose_abort(const char *__format, ...)
{
}

void std::locale::~locale(std::locale *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1F417EE40]();
}

void std::terminate(void)
{
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

uint64_t __CFURLResourceInfoPtr()
{
  return MEMORY[0x1F40D9610]();
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x1F40C9B60](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1F417EF48](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1F417EF80](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

int *__error(void)
{
  return (int *)MEMORY[0x1F40C9B88]();
}

uint64_t __strcpy_chk()
{
  return MEMORY[0x1F40C9CC8]();
}

uint64_t __strlcat_chk()
{
  return MEMORY[0x1F40C9CD0]();
}

uint64_t __strlcpy_chk()
{
  return MEMORY[0x1F40C9CD8]();
}

uint64_t _os_crash_msg()
{
  return MEMORY[0x1F40C9FA8]();
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1F40C9FB0]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _os_log_send_and_compose_impl()
{
  return MEMORY[0x1F40C9FF8]();
}

uint64_t _os_nospin_lock_lock()
{
  return MEMORY[0x1F40CA010]();
}

uint64_t _os_nospin_lock_unlock()
{
  return MEMORY[0x1F40CA020]();
}

void abort(void)
{
}

int access(const char *a1, int a2)
{
  return MEMORY[0x1F40CA210](a1, *(void *)&a2);
}

int acl_add_perm(acl_permset_t permset_d, acl_perm_t perm)
{
  return MEMORY[0x1F40CA228](permset_d, *(void *)&perm);
}

int acl_create_entry(acl_t *acl_p, acl_entry_t *entry_p)
{
  return MEMORY[0x1F40CA250](acl_p, entry_p);
}

int acl_free(void *obj_p)
{
  return MEMORY[0x1F40CA270](obj_p);
}

int acl_get_permset(acl_entry_t entry_d, acl_permset_t *permset_p)
{
  return MEMORY[0x1F40CA2B8](entry_d, permset_p);
}

acl_t acl_init(int count)
{
  return (acl_t)MEMORY[0x1F40CA2D0](*(void *)&count);
}

int acl_set_file(const char *path_p, acl_type_t type, acl_t acl)
{
  return MEMORY[0x1F40CA2E8](path_p, *(void *)&type, acl);
}

int acl_set_permset(acl_entry_t entry_d, acl_permset_t permset_d)
{
  return MEMORY[0x1F40CA300](entry_d, permset_d);
}

int acl_set_qualifier(acl_entry_t entry_d, const void *tag_qualifier_p)
{
  return MEMORY[0x1F40CA310](entry_d, tag_qualifier_p);
}

int acl_set_tag_type(acl_entry_t entry_d, acl_tag_t tag_type)
{
  return MEMORY[0x1F40CA318](entry_d, *(void *)&tag_type);
}

int atoi(const char *a1)
{
  return MEMORY[0x1F40CA4A8](a1);
}

void audit_token_to_au32(audit_token_t *atoken, uid_t *auidp, uid_t *euidp, gid_t *egidp, uid_t *ruidp, gid_t *rgidp, pid_t *pidp, au_asid_t *asidp, au_tid_t *tidp)
{
}

pid_t audit_token_to_pid(audit_token_t *atoken)
{
  return MEMORY[0x1F417E2E8](atoken);
}

kern_return_t bootstrap_look_up(mach_port_t bp, const name_t service_name, mach_port_t *sp)
{
  return MEMORY[0x1F40CA548](*(void *)&bp, service_name, sp);
}

uint64_t bootstrap_look_up2()
{
  return MEMORY[0x1F40CA550]();
}

const char *__cdecl bootstrap_strerror(kern_return_t r)
{
  return (const char *)MEMORY[0x1F40CA568](*(void *)&r);
}

void bzero(void *a1, size_t a2)
{
}

BOOL class_conformsToProtocol(Class cls, Protocol *protocol)
{
  return MEMORY[0x1F41814E0](cls, protocol);
}

Method *__cdecl class_copyMethodList(Class cls, unsigned int *outCount)
{
  return (Method *)MEMORY[0x1F41814F8](cls, outCount);
}

Method class_getInstanceMethod(Class cls, SEL name)
{
  return (Method)MEMORY[0x1F4181528](cls, name);
}

IMP class_getMethodImplementation(Class cls, SEL name)
{
  return (IMP)MEMORY[0x1F4181540](cls, name);
}

const char *__cdecl class_getName(Class cls)
{
  return (const char *)MEMORY[0x1F4181548](cls);
}

Class class_getSuperclass(Class cls)
{
  return (Class)MEMORY[0x1F4181558](cls);
}

int close(int a1)
{
  return MEMORY[0x1F40CB3F8](*(void *)&a1);
}

size_t confstr(int a1, char *a2, size_t a3)
{
  return MEMORY[0x1F40CB438](*(void *)&a1, a2, a3);
}

uint64_t container_copy_sandbox_token()
{
  return MEMORY[0x1F40CB550]();
}

uint64_t container_create_or_lookup_app_group_paths_for_platform()
{
  return MEMORY[0x1F40CB570]();
}

uint64_t container_create_or_lookup_path_for_current_user()
{
  return MEMORY[0x1F40CB580]();
}

uint64_t container_create_or_lookup_path_for_platform()
{
  return MEMORY[0x1F40CB588]();
}

uint64_t container_entitlements_copy_container_identifiers()
{
  return MEMORY[0x1F40CB5C8]();
}

uint64_t container_error_copy_unlocalized_description()
{
  return MEMORY[0x1F40CB5D0]();
}

uint64_t container_error_get_posix_errno()
{
  return MEMORY[0x1F40CB5F8]();
}

uint64_t container_get_error_description()
{
  return MEMORY[0x1F40CB638]();
}

uint64_t container_get_path()
{
  return MEMORY[0x1F40CB650]();
}

uint64_t container_query_create()
{
  return MEMORY[0x1F40CB720]();
}

uint64_t container_query_free()
{
  return MEMORY[0x1F40CB730]();
}

uint64_t container_query_get_last_error()
{
  return MEMORY[0x1F40CB738]();
}

uint64_t container_query_get_single_result()
{
  return MEMORY[0x1F40CB740]();
}

uint64_t container_query_operation_set_flags()
{
  return MEMORY[0x1F40CB750]();
}

uint64_t container_query_set_class()
{
  return MEMORY[0x1F40CB760]();
}

uint64_t container_query_set_persona_unique_string()
{
  return MEMORY[0x1F40CB780]();
}

uint64_t container_system_group_path_for_identifier()
{
  return MEMORY[0x1F40CB7F8]();
}

uint64_t container_system_path_for_identifier()
{
  return MEMORY[0x1F40CB800]();
}

int copyfile(const char *from, const char *to, copyfile_state_t state, copyfile_flags_t flags)
{
  return MEMORY[0x1F40CB880](from, to, state, *(void *)&flags);
}

uint64_t csops_audittoken()
{
  return MEMORY[0x1F40CB8D0]();
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_apply(size_t iterations, dispatch_queue_t queue, void *block)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_assert_queue_not_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_barrier_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_barrier_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_block_t dispatch_block_create_with_qos_class(dispatch_block_flags_t flags, dispatch_qos_class_t qos_class, int relative_priority, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1F40CB9C8](flags, *(void *)&qos_class, *(void *)&relative_priority, block);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1F40CBA60](identifier, flags);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1F40CBA88]();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBAC0](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBA8](attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBB8](attr, *(void *)&qos_class, *(void *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBC0](label, attr);
}

void dispatch_release(dispatch_object_t object)
{
}

void dispatch_resume(dispatch_object_t object)
{
}

void dispatch_retain(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1F40CBC30](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1F40CBC40](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBC50](dsema, timeout);
}

uint64_t dispatch_set_qos_class_fallback()
{
  return MEMORY[0x1F40CBC70]();
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1F40CBC98](type, handle, mask, queue);
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

void dispatch_suspend(dispatch_object_t object)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1F40CBD30](when, delta);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1F40CBDB0]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1F40CBDB8](__path, *(void *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1F40CBDC8](__handle, __symbol);
}

uint64_t dyld_get_active_platform()
{
  return MEMORY[0x1F40CBE10]();
}

uint64_t dyld_get_base_platform()
{
  return MEMORY[0x1F40CBE18]();
}

uint64_t dyld_get_image_versions()
{
  return MEMORY[0x1F40CBE20]();
}

uint64_t dyld_get_program_sdk_version()
{
  return MEMORY[0x1F40CBE28]();
}

uint64_t dyld_is_simulator_platform()
{
  return MEMORY[0x1F40CBE78]();
}

void exit(int a1)
{
}

int fclonefileat(int a1, int a2, const char *a3, uint32_t a4)
{
  return MEMORY[0x1F40CC048](*(void *)&a1, *(void *)&a2, a3, *(void *)&a4);
}

int fclose(FILE *a1)
{
  return MEMORY[0x1F40CC050](a1);
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x1F40CC058](*(void *)&a1, *(void *)&a2);
}

int fcopyfile(int from_fd, int to_fd, copyfile_state_t a3, copyfile_flags_t flags)
{
  return MEMORY[0x1F40CC060](*(void *)&from_fd, *(void *)&to_fd, a3, *(void *)&flags);
}

int fgetattrlist(int a1, void *a2, void *a3, size_t a4, unsigned int a5)
{
  return MEMORY[0x1F40CC0E0](*(void *)&a1, a2, a3, a4, *(void *)&a5);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1F40CC1C0](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CC1D8](a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return MEMORY[0x1F40CC1E8](*(void *)&a1, a2);
}

void free(void *a1)
{
}

int fsctl(const char *a1, unint64_t a2, void *a3, unsigned int a4)
{
  return MEMORY[0x1F40CC288](a1, a2, a3, *(void *)&a4);
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1F40CC2B8](*(void *)&a1, a2);
}

int fstatfs(int a1, statfs *a2)
{
  return MEMORY[0x1F40CC2D0](*(void *)&a1, a2);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1F40CC338](__ptr, __size, __nitems, __stream);
}

int getattrlist(const char *a1, void *a2, void *a3, size_t a4, unsigned int a5)
{
  return MEMORY[0x1F40CC360](a1, a2, a3, a4, *(void *)&a5);
}

char *__cdecl getcwd(char *a1, size_t a2)
{
  return (char *)MEMORY[0x1F40CC398](a1, a2);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1F40CC3B0](a1);
}

uid_t geteuid(void)
{
  return MEMORY[0x1F40CC3B8]();
}

int getfsstat(statfs *a1, int a2, int a3)
{
  return MEMORY[0x1F40CC3C8](a1, *(void *)&a2, *(void *)&a3);
}

pid_t getpid(void)
{
  return MEMORY[0x1F40CC4A0]();
}

const char *getprogname(void)
{
  return (const char *)MEMORY[0x1F40CC4C0]();
}

uid_t getuid(void)
{
  return MEMORY[0x1F40CC570]();
}

ssize_t getxattr(const char *path, const char *name, void *value, size_t size, u_int32_t position, int options)
{
  return MEMORY[0x1F40CC590](path, name, value, size, *(void *)&position, *(void *)&options);
}

uint64_t kdebug_trace()
{
  return MEMORY[0x1F40CC700]();
}

int kevent(int kq, const kevent *changelist, int nchanges, kevent *eventlist, int nevents, const timespec *timeout)
{
  return MEMORY[0x1F40CC718](*(void *)&kq, changelist, *(void *)&nchanges, eventlist, *(void *)&nevents, timeout);
}

int kill(pid_t a1, int a2)
{
  return MEMORY[0x1F40CC728](*(void *)&a1, *(void *)&a2);
}

int kqueue(void)
{
  return MEMORY[0x1F40CC748]();
}

off_t lseek(int a1, off_t a2, int a3)
{
  return MEMORY[0x1F40CC8F8](*(void *)&a1, a2, *(void *)&a3);
}

int lstat(const char *a1, stat *a2)
{
  return MEMORY[0x1F40CC900](a1, a2);
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1F40CC910]();
}

char *__cdecl mach_error_string(mach_error_t error_value)
{
  return (char *)MEMORY[0x1F40CC940](*(void *)&error_value);
}

mach_msg_return_t mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify)
{
  return MEMORY[0x1F40CC970](msg, *(void *)&option, *(void *)&send_size, *(void *)&rcv_size, *(void *)&rcv_name, *(void *)&timeout, *(void *)&notify);
}

void mach_msg_destroy(mach_msg_header_t *a1)
{
}

kern_return_t mach_port_allocate(ipc_space_t task, mach_port_right_t right, mach_port_name_t *name)
{
  return MEMORY[0x1F40CC9A0](*(void *)&task, *(void *)&right, name);
}

kern_return_t mach_port_deallocate(ipc_space_t task, mach_port_name_t name)
{
  return MEMORY[0x1F40CC9B8](*(void *)&task, *(void *)&name);
}

kern_return_t mach_port_insert_right(ipc_space_t task, mach_port_name_t name, mach_port_t poly, mach_msg_type_name_t polyPoly)
{
  return MEMORY[0x1F40CCA08](*(void *)&task, *(void *)&name, *(void *)&poly, *(void *)&polyPoly);
}

kern_return_t mach_port_mod_refs(ipc_space_t task, mach_port_name_t name, mach_port_right_t right, mach_port_delta_t delta)
{
  return MEMORY[0x1F40CCA10](*(void *)&task, *(void *)&name, *(void *)&right, *(void *)&delta);
}

kern_return_t mach_port_request_notification(ipc_space_t task, mach_port_name_t name, mach_msg_id_t msgid, mach_port_mscount_t sync, mach_port_t notify, mach_msg_type_name_t notifyPoly, mach_port_t *previous)
{
  return MEMORY[0x1F40CCA28](*(void *)&task, *(void *)&name, *(void *)&msgid, *(void *)&sync, *(void *)&notify, *(void *)&notifyPoly, previous);
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1F40CCA60](info);
}

int madvise(void *a1, size_t a2, int a3)
{
  return MEMORY[0x1F40CCB08](a1, a2, *(void *)&a3);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB90](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB98](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBA8](ptr, size, type_id);
}

int mbr_identifier_to_uuid(int id_type, const void *identifier, size_t identifier_size, uuid_t uu)
{
  return MEMORY[0x1F40CCC78](*(void *)&id_type, identifier, identifier_size, uu);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCD8](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1F40CCCE8](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD20](__b, *(void *)&__c, __len);
}

char *__cdecl method_copyArgumentType(Method m, unsigned int index)
{
  return (char *)MEMORY[0x1F41815D0](m, *(void *)&index);
}

char *__cdecl method_copyReturnType(Method m)
{
  return (char *)MEMORY[0x1F41815D8](m);
}

IMP method_getImplementation(Method m)
{
  return (IMP)MEMORY[0x1F41815F8](m);
}

SEL method_getName(Method m)
{
  return (SEL)MEMORY[0x1F4181600](m);
}

unsigned int method_getNumberOfArguments(Method m)
{
  return MEMORY[0x1F4181608](m);
}

void mig_dealloc_reply_port(mach_port_t reply_port)
{
}

uint64_t mig_dealloc_special_reply_port()
{
  return MEMORY[0x1F40CCD60]();
}

void mig_deallocate(vm_address_t a1, vm_size_t a2)
{
}

mach_port_t mig_get_reply_port(void)
{
  return MEMORY[0x1F40CCD70]();
}

uint64_t mig_get_special_reply_port()
{
  return MEMORY[0x1F40CCD78]();
}

void mig_put_reply_port(mach_port_t reply_port)
{
}

int mig_strncpy(char *dest, const char *src, int len)
{
  return MEMORY[0x1F40CCD90](dest, src, *(void *)&len);
}

int mig_strncpy_zerofill(char *dest, const char *src, int len)
{
  return MEMORY[0x1F40CCD98](dest, src, *(void *)&len);
}

int mkdir(const char *a1, mode_t a2)
{
  return MEMORY[0x1F40CCDD0](a1, a2);
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x1F40CD028](*(void *)&token);
}

uint32_t notify_check(int token, int *check)
{
  return MEMORY[0x1F40CD038](*(void *)&token, check);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return MEMORY[0x1F40CD040](*(void *)&token, state64);
}

BOOL notify_is_valid_token(int val)
{
  return MEMORY[0x1F40CD048](*(void *)&val);
}

uint32_t notify_post(const char *name)
{
  return MEMORY[0x1F40CD050](name);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return MEMORY[0x1F40CD058](name, out_token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1F40CD060](name, out_token, queue, handler);
}

uint32_t notify_set_state(int token, uint64_t state64)
{
  return MEMORY[0x1F40CD088](*(void *)&token, state64);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1F4181638](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1F4181660](a1);
}

{
  MEMORY[0x1F4181668](context);
}

{
  return (void *)MEMORY[0x1F4181670]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181678](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1F4181680](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1F4181688]();
}

void objc_copyCppObjectAtomic(void *dest, const void *src, void (__cdecl *copyHelper)(void *, const void *))
{
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_end_catch(void)
{
}

void objc_enumerateClasses(const void *image, const char *namePrefix, Protocol *conformingTo, Class subclassing, void *block)
{
}

void objc_enumerationMutation(id obj)
{
}

void objc_exception_rethrow(void)
{
}

void objc_exception_throw(id exception)
{
}

id objc_getAssociatedObject(id object, const void *key)
{
  return (id)MEMORY[0x1F4181718](object, key);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1F4181728](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1F4181748](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1F4181758](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1F4181780](location);
}

void objc_moveWeak(id *to, id *from)
{
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F4181798](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1F41817B0]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1F41817B8]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1F41817C0]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1F41817C8]();
}

uint64_t self
{
  return MEMORY[0x1F41817D0]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1F41818B8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C8](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1F41818D0](a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1F4181A18](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1F4181A28](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1F4181A30](obj);
}

void objc_terminate(void)
{
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181A40](a1);
}

Class object_getClass(id a1)
{
  return (Class)MEMORY[0x1F4181A58](a1);
}

uint64_t object_getMethodImplementation()
{
  return MEMORY[0x1F4181A80]();
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1F40CD0E0](a1, *(void *)&a2);
}

int open_dprotected_np(const char *a1, int a2, int a3, int a4, ...)
{
  return MEMORY[0x1F40CD0F0](a1, *(void *)&a2, *(void *)&a3, *(void *)&a4);
}

uint64_t os_eligibility_get_domain_answer()
{
  return MEMORY[0x1F40CD2B0]();
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1F40CD360](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

uint64_t os_transaction_create()
{
  return MEMORY[0x1F40CD5A0]();
}

void os_unfair_lock_assert_owner(const os_unfair_lock *lock)
{
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

BOOL os_unfair_lock_trylock(os_unfair_lock_t lock)
{
  return MEMORY[0x1F40CD5F0](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t os_unfair_recursive_lock_lock_with_options()
{
  return MEMORY[0x1F40CD610]();
}

uint64_t os_unfair_recursive_lock_trylock()
{
  return MEMORY[0x1F40CD618]();
}

uint64_t os_unfair_recursive_lock_unlock()
{
  return MEMORY[0x1F40CD628]();
}

uint64_t os_variant_has_internal_diagnostics()
{
  return MEMORY[0x1F40CD650]();
}

uint64_t os_variant_uses_ephemeral_storage()
{
  return MEMORY[0x1F40CD670]();
}

ssize_t pread(int __fd, void *__buf, size_t __nbyte, off_t a4)
{
  return MEMORY[0x1F40CD830](*(void *)&__fd, __buf, __nbyte, a4);
}

int proc_pidinfo(int pid, int flavor, uint64_t arg, void *buffer, int buffersize)
{
  return MEMORY[0x1F40CD8A8](*(void *)&pid, *(void *)&flavor, arg, buffer, *(void *)&buffersize);
}

int proc_pidpath_audittoken(audit_token_t *audittoken, void *buffer, uint32_t buffersize)
{
  return MEMORY[0x1F40CD8C0](audittoken, buffer, *(void *)&buffersize);
}

objc_method_description *__cdecl protocol_copyMethodDescriptionList(Protocol *p, BOOL isRequiredMethod, BOOL isInstanceMethod, unsigned int *outCount)
{
  return (objc_method_description *)MEMORY[0x1F4181AE8](p, isRequiredMethod, isInstanceMethod, outCount);
}

int pthread_cond_init(pthread_cond_t *a1, const pthread_condattr_t *a2)
{
  return MEMORY[0x1F40CD988](a1, a2);
}

int pthread_cond_signal(pthread_cond_t *a1)
{
  return MEMORY[0x1F40CD990](a1);
}

int pthread_cond_wait(pthread_cond_t *a1, pthread_mutex_t *a2)
{
  return MEMORY[0x1F40CD9A8](a1, a2);
}

int pthread_getname_np(pthread_t a1, char *a2, size_t a3)
{
  return MEMORY[0x1F40CDA10](a1, a2, a3);
}

void *__cdecl pthread_getspecific(pthread_key_t a1)
{
  return (void *)MEMORY[0x1F40CDA20](a1);
}

int pthread_key_create(pthread_key_t *a1, void (__cdecl *a2)(void *))
{
  return MEMORY[0x1F40CDA40](a1, a2);
}

int pthread_main_np(void)
{
  return MEMORY[0x1F40CDA68]();
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1F40CDA80](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA88](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA98](a1);
}

int pthread_once(pthread_once_t *a1, void (*a2)(void))
{
  return MEMORY[0x1F40CDAC8](a1, a2);
}

int pthread_rwlock_destroy(pthread_rwlock_t *a1)
{
  return MEMORY[0x1F40CDAE8](a1);
}

int pthread_rwlock_init(pthread_rwlock_t *a1, const pthread_rwlockattr_t *a2)
{
  return MEMORY[0x1F40CDAF0](a1, a2);
}

int pthread_rwlock_rdlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1F40CDAF8](a1);
}

int pthread_rwlock_tryrdlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1F40CDB00](a1);
}

int pthread_rwlock_unlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1F40CDB10](a1);
}

int pthread_rwlock_wrlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1F40CDB18](a1);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x1F40CDB30]();
}

int pthread_setname_np(const char *a1)
{
  return MEMORY[0x1F40CDB60](a1);
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x1F40CDB70](a1, a2);
}

int puts(const char *a1)
{
  return MEMORY[0x1F40CDBB8](a1);
}

qos_class_t qos_class_self(void)
{
  return MEMORY[0x1F40CDBD8]();
}

int rand(void)
{
  return MEMORY[0x1F40CDC08]();
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1F40CDC50](*(void *)&a1, a2, a3);
}

char *__cdecl realpath_DARWIN_EXTSN(const char *a1, char *a2)
{
  return (char *)MEMORY[0x1F40CDC98](a1, a2);
}

BOOL remove(const std::__fs::filesystem::path *__p, std::error_code *__ec)
{
  return MEMORY[0x1F40CDD10](__p, __ec);
}

int removefile(const char *path, removefile_state_t state, removefile_flags_t flags)
{
  return MEMORY[0x1F40CDD18](path, state, *(void *)&flags);
}

int removexattr(const char *path, const char *name, int options)
{
  return MEMORY[0x1F40CDD48](path, name, *(void *)&options);
}

void rename(const std::__fs::filesystem::path *__from, const std::__fs::filesystem::path *__to, std::error_code *__ec)
{
}

int renamex_np(const char *a1, const char *a2, unsigned int a3)
{
  return MEMORY[0x1F40CDD70](a1, a2, *(void *)&a3);
}

uint64_t sandbox_check_by_audit_token()
{
  return MEMORY[0x1F40CDDD8]();
}

uint64_t sandbox_container_path_for_audit_token()
{
  return MEMORY[0x1F40CDDE0]();
}

uint64_t sandbox_extension_consume()
{
  return MEMORY[0x1F40CDDF8]();
}

uint64_t sandbox_extension_issue_file()
{
  return MEMORY[0x1F40CDE00]();
}

uint64_t sandbox_extension_release()
{
  return MEMORY[0x1F40CDE50]();
}

const char *__cdecl sel_getName(SEL sel)
{
  return (const char *)MEMORY[0x1F4181B28](sel);
}

SEL sel_registerName(const char *str)
{
  return (SEL)MEMORY[0x1F4181B48](str);
}

int sem_close(sem_t *a1)
{
  return MEMORY[0x1F40CDEE8](a1);
}

sem_t *sem_open(const char *a1, int a2, ...)
{
  return (sem_t *)MEMORY[0x1F40CDEF0](a1, *(void *)&a2);
}

int setenv(const char *__name, const char *__value, int __overwrite)
{
  return MEMORY[0x1F40CDF60](__name, __value, *(void *)&__overwrite);
}

int setiopolicy_np(int a1, int a2, int a3)
{
  return MEMORY[0x1F40CDF78](*(void *)&a1, *(void *)&a2, *(void *)&a3);
}

int setxattr(const char *path, const char *name, const void *value, size_t size, u_int32_t position, int options)
{
  return MEMORY[0x1F40CDFD8](path, name, value, size, *(void *)&position, *(void *)&options);
}

int sigpending(sigset_t *a1)
{
  return MEMORY[0x1F40CE038](a1);
}

int sigprocmask(int a1, const sigset_t *a2, sigset_t *a3)
{
  return MEMORY[0x1F40CE040](*(void *)&a1, a2, a3);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1F40CE080](__str, __size, __format);
}

int sprintf(char *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CE0A0](a1, a2);
}

int sqlite3_bind_double(sqlite3_stmt *a1, int a2, double a3)
{
  return MEMORY[0x1F4181FA8](a1, *(void *)&a2, a3);
}

int sqlite3_bind_int(sqlite3_stmt *a1, int a2, int a3)
{
  return MEMORY[0x1F4181FB0](a1, *(void *)&a2, *(void *)&a3);
}

int sqlite3_bind_int64(sqlite3_stmt *a1, int a2, sqlite3_int64 a3)
{
  return MEMORY[0x1F4181FB8](a1, *(void *)&a2, a3);
}

int sqlite3_bind_text(sqlite3_stmt *a1, int a2, const char *a3, int a4, void (__cdecl *a5)(void *))
{
  return MEMORY[0x1F4181FE8](a1, *(void *)&a2, a3, *(void *)&a4, a5);
}

int sqlite3_close(sqlite3 *a1)
{
  return MEMORY[0x1F4182060](a1);
}

int sqlite3_column_int(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1F41820A0](a1, *(void *)&iCol);
}

const char *__cdecl sqlite3_errmsg(sqlite3 *a1)
{
  return (const char *)MEMORY[0x1F4182198](a1);
}

int sqlite3_exec(sqlite3 *a1, const char *sql, int (__cdecl *callback)(void *, int, char **, char **), void *a4, char **errmsg)
{
  return MEMORY[0x1F41821A8](a1, sql, callback, a4, errmsg);
}

int sqlite3_finalize(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1F41821D8](pStmt);
}

void sqlite3_free(void *a1)
{
}

int sqlite3_open_v2(const char *filename, sqlite3 **ppDb, int flags, const char *zVfs)
{
  return MEMORY[0x1F4182280](filename, ppDb, *(void *)&flags, zVfs);
}

int sqlite3_prepare_v2(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return MEMORY[0x1F4182290](db, zSql, *(void *)&nByte, ppStmt, pzTail);
}

int sqlite3_step(sqlite3_stmt *a1)
{
  return MEMORY[0x1F41823B0](a1);
}

int statfs(const char *a1, statfs *a2)
{
  return MEMORY[0x1F40CE118](a1, a2);
}

int strcasecmp(const char *a1, const char *a2)
{
  return MEMORY[0x1F40CE138](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1F40CE158](__s1, __s2);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x1F40CE178](__s1);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1F40CE188](*(void *)&__errnum);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1F40CE1B0](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

int strncasecmp(const char *a1, const char *a2, size_t a3)
{
  return MEMORY[0x1F40CE1D8](a1, a2, a3);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1F40CE1F0](__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x1F40CE1F8](__dst, __src, __n);
}

char *__cdecl strrchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1F40CE230](__s, *(void *)&__c);
}

unint64_t strtoul(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE2E0](__str, __endptr, *(void *)&__base);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x1F40CE3D0](a1, a2, a3, a4, a5);
}

void syslog(int a1, const char *a2, ...)
{
}

kern_return_t task_get_special_port(task_inspect_t task, int which_port, mach_port_t *special_port)
{
  return MEMORY[0x1F40CE460](*(void *)&task, *(void *)&which_port, special_port);
}

kern_return_t task_info(task_name_t target_task, task_flavor_t flavor, task_info_t task_info_out, mach_msg_type_number_t *task_info_outCnt)
{
  return MEMORY[0x1F40CE470](*(void *)&target_task, *(void *)&flavor, task_info_out, task_info_outCnt);
}

time_t time(time_t *a1)
{
  return MEMORY[0x1F40CE588](a1);
}

int timingsafe_bcmp(const void *__b1, const void *__b2, size_t __len)
{
  return MEMORY[0x1F40CE598](__b1, __b2, __len);
}

uint64_t ubidi_close()
{
  return MEMORY[0x1F417F970]();
}

uint64_t ubidi_getBaseDirection()
{
  return MEMORY[0x1F417F980]();
}

uint64_t ubidi_getResultLength()
{
  return MEMORY[0x1F417F9C0]();
}

uint64_t ubidi_getVisualMap()
{
  return MEMORY[0x1F417F9C8]();
}

uint64_t ubidi_open()
{
  return MEMORY[0x1F417F9D0]();
}

uint64_t ubidi_setPara()
{
  return MEMORY[0x1F417F9F8]();
}

uint64_t ubidi_setReorderingOptions()
{
  return MEMORY[0x1F417FA10]();
}

int unsetenv(const char *a1)
{
  return MEMORY[0x1F40CE5F8](a1);
}

uint64_t uset_close()
{
  return MEMORY[0x1F41806D0]();
}

uint64_t uset_getItem()
{
  return MEMORY[0x1F41806F8]();
}

uint64_t uset_getItemCount()
{
  return MEMORY[0x1F4180700]();
}

uint64_t uset_openPattern()
{
  return MEMORY[0x1F4180720]();
}

int usleep(useconds_t a1)
{
  return MEMORY[0x1F40CE608](*(void *)&a1);
}

void uuid_clear(uuid_t uu)
{
}

int uuid_compare(const uuid_t uu1, const uuid_t uu2)
{
  return MEMORY[0x1F40CE630](uu1, uu2);
}

void uuid_copy(uuid_t dst, const uuid_t src)
{
}

void uuid_generate_random(uuid_t out)
{
}

void uuid_unparse(const uuid_t uu, uuid_string_t out)
{
}

void uuid_unparse_upper(const uuid_t uu, uuid_string_t out)
{
}

BOOLean_t voucher_mach_msg_set(mach_msg_header_t *msg)
{
  return MEMORY[0x1F40CE758](msg);
}

xpc_activity_state_t xpc_activity_get_state(xpc_activity_t activity)
{
  return MEMORY[0x1F40CE990](activity);
}

void xpc_activity_register(const char *identifier, xpc_object_t criteria, xpc_activity_handler_t handler)
{
}

BOOL xpc_activity_set_state(xpc_activity_t activity, xpc_activity_state_t state)
{
  return MEMORY[0x1F40CE9D0](activity, state);
}

BOOL xpc_array_apply(xpc_object_t xarray, xpc_array_applier_t applier)
{
  return MEMORY[0x1F40CEA18](xarray, applier);
}

size_t xpc_array_get_count(xpc_object_t xarray)
{
  return MEMORY[0x1F40CEA58](xarray);
}

const char *__cdecl xpc_array_get_string(xpc_object_t xarray, size_t index)
{
  return (const char *)MEMORY[0x1F40CEA90](xarray, index);
}

BOOL xpc_BOOL_get_value(xpc_object_t xBOOL)
{
  return MEMORY[0x1F40CEB18](xBOOL);
}

uint64_t xpc_connection_copy_entitlement_value()
{
  return MEMORY[0x1F40CEB90]();
}

uint64_t xpc_connection_get_audit_token()
{
  return MEMORY[0x1F40CEBE8]();
}

pid_t xpc_connection_get_pid(xpc_connection_t connection)
{
  return MEMORY[0x1F40CEC20](connection);
}

uint64_t xpc_connection_set_target_user_session_uid()
{
  return MEMORY[0x1F40CECF0]();
}

uint64_t xpc_copy_entitlement_for_token()
{
  return MEMORY[0x1F40CED38]();
}

uint64_t xpc_copy_entitlements_data_for_token()
{
  return MEMORY[0x1F40CED48]();
}

const void *__cdecl xpc_data_get_bytes_ptr(xpc_object_t xdata)
{
  return (const void *)MEMORY[0x1F40CEDB0](xdata);
}

size_t xpc_data_get_length(xpc_object_t xdata)
{
  return MEMORY[0x1F40CEDC0](xdata);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1F40CEE20](keys, values, count);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return (const char *)MEMORY[0x1F40CEEF0](xdict, key);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1F40CEF10](xdict, key);
}

void xpc_dictionary_set_int64(xpc_object_t xdict, const char *key, int64_t value)
{
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
}

void xpc_dictionary_set_uint64(xpc_object_t xdict, const char *key, uint64_t value)
{
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
}

double xpc_double_get_value(xpc_object_t xdouble)
{
  MEMORY[0x1F40CEFF8](xdouble);
  return result;
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x1F40CF148](object);
}

int64_t xpc_int64_get_value(xpc_object_t xint)
{
  return MEMORY[0x1F40CF190](xint);
}

uint64_t xpc_strerror()
{
  return MEMORY[0x1F40CF288]();
}

const char *__cdecl xpc_string_get_string_ptr(xpc_object_t xstring)
{
  return (const char *)MEMORY[0x1F40CF2C8](xstring);
}

void xpc_transaction_begin(void)
{
}

void xpc_transaction_end(void)
{
}

uint64_t xpc_uint64_get_value(xpc_object_t xuint)
{
  return MEMORY[0x1F40CF330](xuint);
}

uint64_t xpc_user_sessions_enabled()
{
  return MEMORY[0x1F40CF340]();
}

uint64_t xpc_user_sessions_get_foreground_uid()
{
  return MEMORY[0x1F40CF348]();
}

uint64_t xpc_user_sessions_get_session_uid()
{
  return MEMORY[0x1F40CF350]();
}