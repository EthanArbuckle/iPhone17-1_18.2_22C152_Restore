double *CA::CG::ContextDelegate::update_style(uint64_t a1)
{
  double *result;
  uint64_t v3;
  int v4;
  malloc_zone_t *malloc_zone;
  float *v6;
  float *v7;
  malloc_zone_t *v8;
  float *v9;
  uint64_t Data;
  float v11;
  malloc_zone_t *v12;
  float *v13;
  malloc_zone_t *v14;
  float *v15;
  float64x2_t *v16;
  uint64_t i;
  float64x2_t v18;
  float64x2_t v19;
  atomic_uint *v20;
  double *BaseCTM;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  atomic_uint *v28;

  result = (double *)CGGStateGetStyle();
  if (result)
  {
    v3 = *(void *)(a1 + 320);
    if (v3)
    {
      v4 = *(_DWORD *)(v3 + 12);
      if (v4 == CGStyleGetIdentifier()) {
        goto LABEL_20;
      }
    }
    switch(CGStyleGetType())
    {
      case 1u:
        malloc_zone = (malloc_zone_t *)get_malloc_zone();
        v6 = (float *)malloc_type_zone_malloc(malloc_zone, 0x60uLL, 0x8BB15036uLL);
        v7 = v6;
        if (v6)
        {
          CA::CG::Style::Style((uint64_t)v6);
          *(void *)v7 = &unk_1ED027AA8;
          *((_WORD *)v7 + 44) = 0;
        }
        break;
      case 2u:
        v8 = (malloc_zone_t *)get_malloc_zone();
        v9 = (float *)malloc_type_zone_malloc(v8, 0x58uLL, 0x8BB15036uLL);
        v7 = v9;
        if (v9)
        {
          CA::CG::Style::Style((uint64_t)v9);
          *(void *)v7 = &unk_1ED0286E0;
          Data = CGStyleGetData();
          v11 = *(double *)(Data + 32);
          v7[20] = v11;
          v7[21] = *(float *)(Data + 72);
        }
        break;
      case 3u:
        v12 = (malloc_zone_t *)get_malloc_zone();
        v13 = (float *)malloc_type_zone_malloc(v12, 0x58uLL, 0x8BB15036uLL);
        v7 = v13;
        if (v13)
        {
          CA::CG::Style::Style((uint64_t)v13);
          *(void *)v7 = &unk_1ED029030;
          *((double *)v7 + 10) = *(double *)(CGStyleGetData() + 8) * 0.5;
        }
        break;
      case 4u:
        v14 = (malloc_zone_t *)get_malloc_zone();
        v15 = (float *)malloc_type_zone_malloc(v14, 0xA0uLL, 0x8BB15036uLL);
        v7 = v15;
        if (v15)
        {
          CA::CG::Style::Style((uint64_t)v15);
          *(void *)v7 = &unk_1ED028B80;
          v16 = (float64x2_t *)(CGStyleGetData() + 8);
          for (i = 19; i != 39; i += 4)
          {
            v19 = *v16;
            v18 = v16[1];
            v16 += 2;
            *(float32x4_t *)&v7[i] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v19), v18);
          }
        }
        break;
      default:
        v7 = 0;
        break;
    }
    v20 = *(atomic_uint **)(a1 + 320);
    *(void *)(a1 + 320) = v7;
    if (v20)
    {
      if (atomic_fetch_add(v20 + 2, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v20 + 8))(v20);
      }
      v7 = *(float **)(a1 + 320);
    }
    if (v7)
    {
LABEL_20:
      BaseCTM = (double *)CGRenderingStateGetBaseCTM();
      v22 = *BaseCTM;
      v23 = BaseCTM[1];
      v24 = BaseCTM[2];
      v25 = BaseCTM[3];
      v26 = BaseCTM[4];
      v27 = BaseCTM[5];
      result = *(double **)(a1 + 320);
      if (result[3] != v22
        || result[4] != v23
        || result[5] != v24
        || result[6] != v25
        || result[7] != v26
        || result[8] != v27)
      {
        if (*((_DWORD *)result + 2) != 1)
        {
          result = (double *)(*(uint64_t (**)(double *))(*(void *)result + 40))(result);
          v28 = *(atomic_uint **)(a1 + 320);
          *(void *)(a1 + 320) = result;
          if (v28)
          {
            if (atomic_fetch_add(v28 + 2, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v28 + 8))(v28);
            }
            result = *(double **)(a1 + 320);
          }
        }
        result[3] = v22;
        result[4] = v23;
        result[5] = v24;
        result[6] = v25;
        result[7] = v26;
        result[8] = v27;
        (*(void (**)(double *))(*(void *)result + 16))(result);
        return *(double **)(a1 + 320);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

CA::CG::DrawOp *CA::CG::ContextDelegate::fill_rects(const double *a1, CA::CG::DrawOp **this, uint64_t a3, uint64_t a4, CGColor *a5, long long *a6, uint64_t a7, int a8, char a9)
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  uint64_t v16 = 32 * a7;
  v17 = CA::CG::Queue::alloc((CA::CG::Queue *)this, 32 * a7 + 120);
  uint64_t v18 = (uint64_t)v17;
  unint64_t v19 = 0;
  uint64_t v20 = a7;
  do
  {
    v21 = &v17[v19 / 8];
    long long v22 = a6[v19 / 0x10];
    *(_OWORD *)(v21 + 17) = a6[v19 / 0x10 + 1];
    *(_OWORD *)(v21 + 15) = v22;
    v19 += 32;
    --v20;
  }
  while (v20);
  if (a8) {
    int v23 = 4;
  }
  else {
    int v23 = 0;
  }
  CA::CG::DrawOp::DrawOp((uint64_t)v17, a1, a3, a4, a5, v23 | ((a7 == 1) << 24));
  *(void *)(v18 + 112) = a7;
  *(void *)uint64_t v18 = &unk_1ED02A288;
  v24 = this[5];
  if (v24
    && !*((void *)v24 + 13)
    && !CGGStateGetStyle()
    && (*(unsigned int (**)(CA::CG::DrawOp *, uint64_t))(*(void *)v24 + 96))(v24, v18)
    && CA::CG::Queue::cancel_and_grow((CA::CG::Queue *)this, (CA::CG::DrawOp *)v18, v24, v16))
  {
    uint64_t v25 = *((void *)v24 + 14);
    uint64_t v26 = 32 * v25 + 120;
    uint64_t v27 = a7;
    do
    {
      v28 = (_OWORD *)((char *)v24 + v26);
      long long v29 = *a6;
      long long v30 = a6[1];
      a6 += 2;
      _OWORD *v28 = v29;
      v28[1] = v30;
      v26 += 32;
      --v27;
    }
    while (v27);
    *((void *)v24 + 14) = v25 + a7;
  }
  else
  {
    if (a7 == 1)
    {
      if (a9)
      {
        uint64_t v31 = *(void *)(v18 + 72);
        if (v31)
        {
          if (*(_DWORD *)(v31 + 4) == 1
            && (*(unsigned int (**)(uint64_t))(*(void *)(v31 + 56) + 16))(v31 + 56) == 5)
          {
            CGRect BoundingBox = CGPathGetBoundingBox((CGPathRef)*(void *)(v31 + 64));
            v79.f64[0] = BoundingBox.origin.x;
            v79.f64[1] = BoundingBox.origin.y;
            v80.f64[0] = BoundingBox.size.width;
            v80.f64[1] = BoundingBox.size.height;
            if (BoundingBox.size.width < 0.0)
            {
              BoundingBox.origin.x = BoundingBox.size.width + BoundingBox.origin.x;
              v79.f64[0] = BoundingBox.origin.x;
              v80.f64[0] = -BoundingBox.size.width;
            }
            if (BoundingBox.size.height < 0.0)
            {
              BoundingBox.origin.y = BoundingBox.size.height + BoundingBox.origin.y;
              v79.f64[1] = BoundingBox.origin.y;
              v80.f64[1] = -BoundingBox.size.height;
            }
            if ((*(unsigned char *)(v18 + 100) & 4) == 0)
            {
              double v32 = v80.f64[0] <= v80.f64[1] ? v80.f64[1] : v80.f64[0];
              if (v32 < 1.79769313e308)
              {
                v33.f64[0] = *(float64_t *)(v18 + 32);
                float64x2_t v34 = *(float64x2_t *)(v18 + 16);
                v35.f64[1] = *(float64_t *)(v18 + 24);
                v35.f64[0] = v33.f64[0];
                float64x2_t v36 = vmulq_f64(v35, *(float64x2_t *)(v18 + 8));
                double v37 = vsubq_f64(v36, (float64x2_t)vdupq_laneq_s64((int64x2_t)v36, 1)).f64[0];
                if (v37 != 0.0)
                {
                  double v38 = 1.0 / v37;
                  v33.f64[1] = *(float64_t *)(v18 + 8);
                  float64x2_t v39 = vmulq_n_f64(v33, 1.0 / v37);
                  float64x2_t v40 = *(float64x2_t *)(v18 + 40);
                  int8x16_t v41 = (int8x16_t)vmulq_f64(v40, v34);
                  float64x2_t v42 = vmulq_n_f64(vmlsq_f64((float64x2_t)vextq_s8(v41, v41, 8uLL), v33, v40), v38);
                  float64x2_t v43 = vmulq_n_f64(vnegq_f64(v34), v38);
                  *(int32x2_t *)&v40.f64[0] = vmovn_s64(vceqzq_f64(v43));
                  if (vand_s8(*(int8x8_t *)&v40.f64[0], (int8x8_t)vdup_lane_s32(*(int32x2_t *)&v40.f64[0], 1)).u8[0])
                  {
                    int8x16_t v44 = (int8x16_t)vmlaq_f64(v42, v39, v79);
                    int8x16_t v45 = (int8x16_t)vmlaq_f64(v42, v39, vaddq_f64(v79, v80));
                    int8x16_t v46 = (int8x16_t)vcgtq_f64((float64x2_t)v44, (float64x2_t)v45);
                    float64x2_t v47 = (float64x2_t)vbslq_s8(v46, v45, v44);
                    int8x16_t v48 = (int8x16_t)vsubq_f64((float64x2_t)vbslq_s8(v46, v44, v45), v47);
                  }
                  else
                  {
                    uint64_t v49 = 0;
                    v81.f64[0] = BoundingBox.origin.x;
                    v81.f64[1] = BoundingBox.origin.y;
                    v82.f64[0] = v80.f64[0] + BoundingBox.origin.x;
                    v82.f64[1] = BoundingBox.origin.y;
                    *(double *)&uint64_t v50 = v80.f64[1] + BoundingBox.origin.y;
                    float64x2_t v51 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v39.f64[0], 0);
                    float64x2_t v52 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v43, 1);
                    v83.f64[0] = v80.f64[0] + BoundingBox.origin.x;
                    *(void *)&v83.f64[1] = v50;
                    float64x2_t v53 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v42.f64[0], 0);
                    float64x2_t v54 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v43.f64[0], 0);
                    v84.f64[0] = BoundingBox.origin.x;
                    *(void *)&v84.f64[1] = v50;
                    float64x2_t v55 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v39, 1);
                    float64x2_t v56 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v42, 1);
                    do
                    {
                      v57 = &v81.f64[v49];
                      float64x2x2_t v86 = vld2q_f64(v57);
                      v87.val[0] = vmlaq_f64(vmlaq_f64(v53, v51, v86.val[0]), v52, v86.val[1]);
                      v87.val[1] = vmlaq_f64(vmlaq_f64(v56, v54, v86.val[0]), v55, v86.val[1]);
                      vst2q_f64(v57, v87);
                      v49 += 4;
                    }
                    while (v49 != 8);
                    int8x16_t v58 = vbslq_s8((int8x16_t)vcgtq_f64(v82, v81), (int8x16_t)v81, (int8x16_t)v82);
                    int8x16_t v59 = vbslq_s8((int8x16_t)vcgtq_f64(v81, v82), (int8x16_t)v81, (int8x16_t)v82);
                    int8x16_t v60 = vbslq_s8((int8x16_t)vcgtq_f64(v84, v83), (int8x16_t)v83, (int8x16_t)v84);
                    int64x2_t v61 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v83, v84), (int8x16_t)v83, (int8x16_t)v84);
                    int8x16_t v62 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v60, (float64x2_t)v58), v58, v60);
                    int64x2_t v63 = vcgtq_f64((float64x2_t)v59, (float64x2_t)v61);
                    int8x16_t v64 = (int8x16_t)vsubq_f64((float64x2_t)vbslq_s8((int8x16_t)v63, v59, (int8x16_t)v61), (float64x2_t)v62);
                    *(double *)v61.i64 = vaddvq_f64((float64x2_t)v64);
                    BOOL v65 = (v61.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
                    v61.i64[0] &= ~0x8000000000000000;
                    v63.i64[0] = 0x7FF0000000000000;
                    int8x16_t v48 = vbslq_s8((int8x16_t)vdupq_lane_s64(vcgtq_s64(v63, v61).i64[0], 0), v64, (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL));
                    unsigned int v66 = v65;
                    int32x2_t v67 = vdup_n_s32(v66);
                    v68.i64[0] = v67.u32[0];
                    v68.i64[1] = v67.u32[1];
                    float64x2_t v47 = (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v68, 0x3FuLL)), v62, (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL));
                  }
                  float64x2_t v79 = v47;
                  float64x2_t v80 = (float64x2_t)v48;
                }
              }
            }
            double v69 = *(double *)(v18 + 120);
            v81.f64[0] = v69;
            double v70 = *(double *)(v18 + 128);
            v81.f64[1] = v70;
            double v71 = *(double *)(v18 + 136);
            v82.f64[0] = v71;
            double v72 = *(double *)(v18 + 144);
            v82.f64[1] = v72;
            if (v71 < 0.0)
            {
              v81.f64[0] = v71 + v69;
              v82.f64[0] = -v71;
            }
            if (v72 < 0.0)
            {
              v81.f64[1] = v72 + v70;
              v82.f64[1] = -v72;
            }
            if (CA::BoundsImpl::contains(v81.f64, v79.f64)
              && (!CGGStateGetStyle() || CGStyleGetType() != 2))
            {
              CA::CG::Queue::cancel((CA::CG::Queue *)this, (CA::CG::DrawOp *)v18);
              uint64_t v73 = CA::CG::ContextDelegate::fill_path(a1, (CA::CG::Queue *)this, a3, a4, a5, *(const CGPath **)(v31 + 64), *(unsigned __int8 *)(v31 + 72), 1, 0, 0, 0);
              uint64_t v18 = v73;
              int v74 = *(_DWORD *)(v73 + 100);
              unsigned int v75 = v74 & 0xFFFFFFDE | 0x20;
              int v76 = v74 | 0x21;
              if (!*(unsigned char *)(v31 + 73)) {
                int v76 = v75;
              }
              *(_DWORD *)(v73 + 100) = v76;
            }
          }
        }
      }
    }
    return (CA::CG::DrawOp *)v18;
  }
  return v24;
}

uint64_t CA::CG::DrawOp::DrawOp(uint64_t a1, const double *a2, uint64_t a3, uint64_t a4, CGColor *a5, int a6)
{
  v26[1] = *(double *)MEMORY[0x1E4F143B8];
  *(void *)a1 = &unk_1ED029D88;
  CTM = (_OWORD *)CGGStateGetCTM();
  long long v14 = CTM[1];
  long long v13 = CTM[2];
  *(_OWORD *)(a1 + 8) = *CTM;
  *(_OWORD *)(a1 + 24) = v14;
  *(_OWORD *)(a1 + 40) = v13;
  *(_DWORD *)(a1 + 56) = CGGStateGetCompositeOperation();
  if (CGGStateGetSoftMask())
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    uint64_t v16 = malloc_type_zone_malloc(malloc_zone, 0x18uLL, 0x8BB15036uLL);
    if (v16)
    {
      *uint64_t v16 = CGSoftMaskRetain();
      v16[1] = CGRenderingStateCreateCopy();
      v16[2] = CGGStateCreateCopy();
    }
  }
  else
  {
    uint64_t v16 = 0;
  }
  *(void *)(a1 + 64) = v16;
  *(void *)(a1 + 72) = 0;
  v26[0] = 1.10008428e-19;
  CA::CG::DeviceColor::DeviceColor((double *)(a1 + 80), a5, a3, a4, a2, v26);
  int ShouldAntialias = CGGStateGetShouldAntialias();
  if (ShouldAntialias) {
    int ShouldAntialias = CGRenderingStateGetAllowsAntialiasing();
  }
  *(_DWORD *)(a1 + 100) = a6 | (2 * (a5 != 0)) | ShouldAntialias;
  *(void *)(a1 + 104) = 0;
  uint64_t v18 = CA::CG::ContextDelegate::clip_stack((uint64_t)a2);
  if (v18)
  {
    unint64_t v19 = (atomic_uint *)v18;
    if (*(_DWORD *)(v18 + 4)) {
      goto LABEL_15;
    }
    int v20 = *(_DWORD *)(v18 + 48);
    if (v20 <= *(_DWORD *)(v18 + 52)) {
      int v20 = *(_DWORD *)(v18 + 52);
    }
    if (v20 < 0x3FFFFFFF) {
      goto LABEL_15;
    }
    double v21 = *(double *)(v18 + 24);
    if (v21 <= *(double *)(v18 + 32)) {
      double v21 = *(double *)(v18 + 32);
    }
    if (v21 < 1.79769313e308)
    {
LABEL_15:
      long long v22 = *(void (****)(char *))(a1 + 72);
      if (v22 != (void (***)(char *))v19)
      {
        if (v22 && atomic_fetch_add((atomic_uint *volatile)v22, 0xFFFFFFFF) == 1) {
          CA::CG::ClipStack::destroy_clip_stack(v22);
        }
        atomic_fetch_add(v19, 1u);
        *(void *)(a1 + 72) = v19;
      }
    }
  }
  if ((*(unsigned char *)(a1 + 100) & 0x40) == 0)
  {
    CGGStateGetAlpha();
    float v24 = v23;
    if (v24 != 1.0) {
      *(float16x4_t *)(a1 + 88) = vcvt_f16_f32(vmulq_n_f32(vcvtq_f32_f16(*(float16x4_t *)(a1 + 88)), v24));
    }
  }
  if (*(void *)(a1 + 80)) {
    *(_DWORD *)(a1 + 100) |= 0x800u;
  }
  return a1;
}

unint64_t *CA::CG::Queue::alloc(CA::CG::Queue *this, uint64_t a2)
{
  unint64_t v3 = (a2 + 31) & 0xFFFFFFFFFFFFFFF0;
  v4 = (void *)*((void *)this + 4);
  if (!v4) {
    goto LABEL_12;
  }
  if (!*((void *)this + 2) || v4[3] >= v3) {
    goto LABEL_10;
  }
  slab = CA::CG::Queue::allocate_slab((CA::CG::Queue *)(2 * v4[2]));
  v6 = slab + 6;
  size_t v7 = v4[2] - v4[3] - 48;
  memcpy(slab + 6, v4 + 6, v7);
  *(_OWORD *)slab = *(_OWORD *)v4;
  size_t v8 = slab[4] + v7;
  uint64_t v9 = slab[2];
  size_t v10 = slab[3] - v7;
  slab[3] = v10;
  slab[4] = v8;
  size_t v11 = v9 - 48;
  while (v11 > v10)
  {
    uint64_t v12 = v6[15];
    if (v12)
    {
      (*(void (**)(uint64_t, void *))(*(void *)v12 + 40))(v12, v6 + 2);
      size_t v10 = slab[3];
    }
    v11 -= *v6;
    v6 = (void *)((char *)v6 + *v6);
  }
  *((void *)this + 4) = slab;
  *((void *)this + 5) = 0;
  CA::CG::Queue::deallocate_slab(v4);
  v4 = (void *)*((void *)this + 4);
  if (v4)
  {
LABEL_10:
    unint64_t v13 = v4[3];
    uint64_t v14 = v13 - v3;
    if (v13 >= v3)
    {
      uint64_t v16 = (unint64_t *)v4[4];
      v4[3] = v14;
      v4[4] = (char *)v16 + v3;
      goto LABEL_18;
    }
    CA::CG::Queue::flush_queue(this);
  }
  else
  {
LABEL_12:
    (*(void (**)(CA::CG::Queue *))(*(void *)this + 24))(this);
  }
  if (v3 > 0x1000)
  {
    v17 = malloc_type_malloc(v3 + 48, 0xE90C5830uLL);
    if (!v17) {
      abort();
    }
    v17[1] = 0;
    *((void *)this + 4) = v17;
    v17[3] = 0;
    v17[4] = 0;
    v17[2] = v3 + 48;
    uint64_t v16 = v17 + 6;
    void *v17 = this;
  }
  else
  {
    v15 = CA::CG::Queue::allocate_slab((CA::CG::Queue *)v3);
    *((void *)this + 4) = v15;
    uint64_t *v15 = (uint64_t)this;
    uint64_t v16 = (unint64_t *)v15[4];
    v15[3] -= v3;
    v15[4] = (uint64_t)v16 + v3;
  }
LABEL_18:
  *uint64_t v16 = v3;
  uint64_t v18 = (atomic_uint *)*((void *)this + 2);
  if (v18) {
    atomic_fetch_add(v18, 1u);
  }
  v16[1] = (unint64_t)v18;
  uint64_t v19 = *((void *)this + 2);
  if (v19)
  {
    char v20 = *(unsigned char *)(v19 + 196);
    char v21 = (v20 + 1) & 3;
    if ((v20 & 2) != 0) {
      char v21 = 2;
    }
    *(unsigned char *)(v19 + 196) = v21 | v20 & 0xFC;
  }
  return v16 + 2;
}

uint64_t CA::CG::ContextDelegate::clip_stack(uint64_t a1)
{
  uint64_t v169 = *MEMORY[0x1E4F143B8];
  CGGStateGetClipStack();
  int Identifier = CGClipStackGetIdentifier();
  if (*(_DWORD *)(a1 + 304) == Identifier) {
    return *(void *)(a1 + 312);
  }
  int v3 = Identifier;
  uint64_t Count = CGClipStackGetCount();
  CGClipStackGetRect();
  *(double *)v8.i64 = v7;
  *(double *)&v8.i64[1] = v5;
  v9.f64[0] = 0.0;
  v11.i64[0] = *(void *)&v10.f64[0];
  v11.i64[1] = v6;
  int8x16_t v12 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v9, v10).i64[0], 0);
  v13.i64[1] = v6;
  *(double *)v13.i64 = -v10.f64[0];
  int8x16_t v14 = vbslq_s8(v12, v13, v11);
  v10.f64[1] = v5;
  v10.f64[0] = v10.f64[0] + v7;
  int8x16_t v15 = vbslq_s8(v12, (int8x16_t)v10, v8);
  if (*(double *)&v6 < 0.0)
  {
    *(double *)&v15.i64[1] = *(double *)&v6 + v5;
    *(double *)&v14.i64[1] = -*(double *)&v6;
  }
  if (Count) {
    goto LABEL_9;
  }
  double v16 = *(double *)&v14.i64[1];
  if (*(double *)v14.i64 > *(double *)&v14.i64[1]) {
    double v16 = *(double *)v14.i64;
  }
  if (v16 < 1.79769313e308)
  {
LABEL_9:
    float64x2_t v146 = (float64x2_t)v15;
    float64x2_t v148 = (float64x2_t)v14;
    uint64_t v18 = (char *)malloc_type_malloc(104 * Count + 56, 0x2CF3A3ECuLL);
    v17 = v18;
    *(_DWORD *)uint64_t v18 = 1;
    uint64_t v19 = (int32x4_t *)(v18 + 40);
    *(float64x2_t *)(v18 + 8) = v146;
    *(float64x2_t *)(v18 + 24) = v148;
    *((_DWORD *)v18 + 1) = 0;
    if (!Count)
    {
      int64x2_t v139 = vceqzq_f64(v148);
      if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v139, 1), (int8x16_t)v139).u64[0] & 0x8000000000000000) != 0
        || (int8x16_t v140 = vorrq_s8((int8x16_t)vcltzq_f64(v148), (int8x16_t)vcgezq_f64(v148)),
            (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v140), 1), v140).u64[0] & 0x8000000000000000) != 0))
      {
        v19->i64[0] = 0;
        *((void *)v18 + 6) = 0;
      }
      else
      {
        int32x4_t v141 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v146, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
        *uint64_t v19 = vuzp1q_s32(v141, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v146, v148), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v141));
      }
      goto LABEL_62;
    }
    CGClipStackGetBounds();
    *(double *)v23.i64 = v22;
    v23.i64[1] = v20;
    v24.f64[0] = 0.0;
    v26.i64[0] = *(void *)&v25.f64[0];
    v26.i64[1] = v21;
    int8x16_t v27 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v24, v25).i64[0], 0);
    v28.i64[1] = v20;
    *(double *)v28.i64 = v25.f64[0] + v22;
    float64x2_t v29 = (float64x2_t)vbslq_s8(v27, v28, v23);
    v23.i64[1] = v21;
    *(double *)v23.i64 = -v25.f64[0];
    float64x2_t v30 = (float64x2_t)vbslq_s8(v27, v23, v26);
    if (*(double *)&v21 < 0.0)
    {
      v29.f64[1] = *(double *)&v21 + *(double *)&v20;
      v30.f64[1] = -*(double *)&v21;
    }
    int64x2_t v31 = vceqzq_f64(v30);
    uint64_t v145 = a1;
    int v144 = v3;
    if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v31, 1), (int8x16_t)v31).u64[0] & 0x8000000000000000) != 0
      || (int8x16_t v32 = vorrq_s8((int8x16_t)vcltzq_f64(v30), (int8x16_t)vcgezq_f64(v30)),
          (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v32), 1), v32).u64[0] & 0x8000000000000000) != 0))
    {
      v19->i64[0] = 0;
      v19->i64[1] = 0;
    }
    else
    {
      int32x4_t v33 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v29, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
      *uint64_t v19 = vuzp1q_s32(v33, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v29, v30), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v33));
    }
    uint64_t v34 = 0;
    float64x2_t v35 = v17 + 56;
    while (1)
    {
      CGClipStackGetClipAtIndex();
      int ShouldAntialias = CGClipGetShouldAntialias();
      switch(CGClipGetType())
      {
        case 0u:
          unsigned int Mode = CGClipGetMode();
          if (Mode > 1)
          {
            if (Mode == 2)
            {
              CGClipGetStroke();
              CGClipStrokeGetLineWidth();
              uint64_t v76 = v75;
              CGClipGetRect();
              v79.i64[1] = v77;
              v80.f64[0] = 0.0;
              v82.i64[0] = *(void *)&v81.f64[0];
              v82.i64[1] = v78;
              int8x16_t v83 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v80, v81).i64[0], 0);
              v84.i64[1] = v77;
              *(double *)v84.i64 = v81.f64[0] + *(double *)v79.i64;
              int8x16_t v85 = vbslq_s8(v83, v84, v79);
              v86.i64[1] = v78;
              *(double *)v86.i64 = -v81.f64[0];
              int8x16_t v87 = vbslq_s8(v83, v86, v82);
              if (*(double *)&v78 < 0.0)
              {
                *(double *)&v85.i64[1] = *(double *)&v78 + *(double *)&v77;
                *(double *)&v87.i64[1] = -*(double *)&v78;
              }
              int v88 = *((_DWORD *)v17 + 1);
              *((_DWORD *)v17 + 1) = v88 + 1;
              v89 = &v35[104 * v88];
              *(void *)v89 = &unk_1ED0283F8;
              *(int8x16_t *)(v89 + 8) = v85;
              *(int8x16_t *)(v89 + 24) = v87;
              *((void *)v89 + 5) = v76;
              v89[48] = ShouldAntialias;
            }
          }
          else
          {
            CGClipGetRect();
            v40.i64[1] = v38;
            v41.f64[0] = 0.0;
            v43.i64[0] = *(void *)&v42.f64[0];
            v43.i64[1] = v39;
            int8x16_t v44 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v41, v42).i64[0], 0);
            v45.i64[1] = v38;
            *(double *)v45.i64 = v42.f64[0] + *(double *)v40.i64;
            int8x16_t v46 = vbslq_s8(v44, v45, v40);
            v47.i64[1] = v39;
            *(double *)v47.i64 = -v42.f64[0];
            int8x16_t v48 = vbslq_s8(v44, v47, v43);
            if (*(double *)&v39 < 0.0)
            {
              *(double *)&v46.i64[1] = *(double *)&v39 + *(double *)&v38;
              *(double *)&v48.i64[1] = -*(double *)&v39;
            }
            int v49 = *((_DWORD *)v17 + 1);
            *((_DWORD *)v17 + 1) = v49 + 1;
            uint64_t v50 = &v35[104 * v49];
            *(void *)uint64_t v50 = &unk_1ED027BC0;
            *(int8x16_t *)(v50 + 8) = v46;
            *(int8x16_t *)(v50 + 24) = v48;
            v50[40] = ShouldAntialias;
          }
          goto LABEL_55;
        case 2u:
          int v51 = CGClipGetMode();
          Path = (const CGPath *)CGClipGetPath();
          if (v51 == 2)
          {
            CGClipGetStroke();
            Path = (const CGPath *)CGClipStrokeCreateStrokedPath();
          }
          if (!Path) {
            goto LABEL_52;
          }
          if (CGPathIsRegion())
          {
            int v53 = *((_DWORD *)v17 + 1);
            *((_DWORD *)v17 + 1) = v53 + 1;
            float64x2_t v54 = &v35[104 * v53];
            *(void *)float64x2_t v54 = &unk_1ED029E50;
            *((void *)v54 + 1) = CGPathRetain(Path);
            v54[16] = v51 == 1;
            v54[17] = ShouldAntialias;
            goto LABEL_52;
          }
          memset(&rect, 0, sizeof(rect));
          if (CGPathIsRect(Path, &rect)) {
            goto LABEL_42;
          }
          if ((unint64_t)(CGPathGetNumberOfElements() - 7) <= 0xFFFFFFFFFFFFFFFDLL) {
            goto LABEL_44;
          }
          long long v167 = 0u;
          long long v168 = 0u;
          int8x16_t v165 = 0u;
          long long v166 = 0u;
          v164[0] = 0;
          v164[1] = v164;
          v164[2] = 0x2000000000;
          v164[3] = &v165;
          v162[0] = 0;
          v162[1] = v162;
          v162[2] = 0x2000000000;
          int v163 = 0;
          uint64_t v158 = 0;
          v159 = &v158;
          uint64_t v160 = 0x2000000000;
          char v161 = 1;
          uint64_t v151 = MEMORY[0x1E4F143A8];
          uint64_t v152 = 0x40000000;
          v153 = __CA_CGPathIsRectShape_block_invoke;
          v154 = &unk_1E52807F0;
          v155 = v162;
          v156 = &v158;
          v157 = v164;
          CGPathApplyWithBlock2();
          if (*((unsigned char *)v159 + 24))
          {
            int8x16_t v91 = v165;
            uint64_t v92 = 16;
            CGPoint v93 = (CGPoint)v165;
            do
            {
              int8x16_t v94 = *(int8x16_t *)((char *)&v165 + v92);
              CGPoint v93 = (CGPoint)vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v93, (float64x2_t)v94), v94, (int8x16_t)v93);
              int8x16_t v91 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v94, (float64x2_t)v91), v94, v91);
              v92 += 16;
            }
            while (v92 != 64);
            rect.origin = v93;
            rect.CGSize size = (CGSize)vsubq_f64((float64x2_t)v91, (float64x2_t)v93);
            _Block_object_dispose(&v158, 8);
            _Block_object_dispose(v162, 8);
            _Block_object_dispose(v164, 8);
LABEL_42:
            int v95 = *((_DWORD *)v17 + 1);
            *((_DWORD *)v17 + 1) = v95 + 1;
            v90.f64[0] = 0.0;
            int8x16_t v96 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v90, (float64x2_t)rect.size).i64[0], 0);
            v97.i64[1] = *(void *)&rect.size.height;
            *(double *)v97.i64 = -rect.size.width;
            int8x16_t v98 = vbslq_s8(v96, v97, (int8x16_t)rect.size);
            v97.i64[0] = 0x8000000000000000;
            v96.i64[0] = *(_OWORD *)&vaddq_f64((float64x2_t)rect.origin, (float64x2_t)vbslq_s8(v96, (int8x16_t)rect.size, v97));
            v97.i64[0] = v96.i64[0];
            v97.i64[1] = *(void *)&rect.origin.y;
            int8x16_t v99 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v90, (float64x2_t)vdupq_laneq_s64((int64x2_t)rect.size, 1)).i64[0], 0);
            v100.i64[0] = v98.i64[0];
            v100.i64[1] = *(void *)&vnegq_f64(*(float64x2_t *)(&rect + 16)).f64[1];
            v101 = &v35[104 * v95];
            v96.i64[1] = *(void *)&vaddq_f64(*(float64x2_t *)(&rect + 16), *(float64x2_t *)&rect).f64[1];
            *(void *)v101 = &unk_1ED027BC0;
            *(int8x16_t *)(v101 + 8) = vbslq_s8(v99, v96, v97);
            *(int8x16_t *)(v101 + 24) = vbslq_s8(v99, v100, v98);
            v101[40] = ShouldAntialias;
          }
          else
          {
            _Block_object_dispose(&v158, 8);
            _Block_object_dispose(v162, 8);
            _Block_object_dispose(v164, 8);
            if (!ShouldAntialias) {
              goto LABEL_51;
            }
LABEL_44:
            if (CGPathIsEllipse())
            {
              int v104 = *((_DWORD *)v17 + 1);
              *((_DWORD *)v17 + 1) = v104 + 1;
              v105 = &v35[104 * v104];
              v103.f64[0] = 0.0;
              int8x16_t v106 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v103, (float64x2_t)rect.size).i64[0], 0);
              v107.i64[1] = *(void *)&rect.size.height;
              *(double *)v107.i64 = -rect.size.width;
              v102.i64[0] = 0x8000000000000000;
              v108.i64[0] = *(_OWORD *)&vaddq_f64((float64x2_t)rect.origin, (float64x2_t)vbslq_s8(v106, (int8x16_t)rect.size, v102));
              v109.i64[0] = v108.i64[0];
              v109.i64[1] = *(void *)&rect.origin.y;
              int8x16_t v110 = vbslq_s8(v106, v107, (int8x16_t)rect.size);
              int8x16_t v111 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v103, (float64x2_t)vdupq_laneq_s64((int64x2_t)rect.size, 1)).i64[0], 0);
              v112.i64[0] = v110.i64[0];
              v112.i64[1] = *(void *)&vnegq_f64(*(float64x2_t *)(&rect + 16)).f64[1];
              v108.i64[1] = *(void *)&vaddq_f64(*(float64x2_t *)(&rect + 16), *(float64x2_t *)&rect).f64[1];
              *(void *)v105 = &unk_1ED0287D0;
              *(int8x16_t *)(v105 + 8) = vbslq_s8(v111, v108, v109);
              *(int8x16_t *)(v105 + 24) = vbslq_s8(v111, v112, v110);
              goto LABEL_52;
            }
            if (CGPathIsRoundedRect())
            {
              CGSize size = rect.size;
              *(double *)v113.i64 = -rect.size.width;
              float64x2_t v119 = vnegq_f64((float64x2_t)rect.size);
              if (rect.size.width == 0.0 + 0.0 && (v114.f64[0] = rect.size.height, rect.size.height == 0.0 + 0.0))
              {
                int v120 = *((_DWORD *)v17 + 1);
                *((_DWORD *)v17 + 1) = v120 + 1;
                v121 = &v35[104 * v120];
                v116.f64[0] = 0.0;
                int8x16_t v122 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v116, (float64x2_t)size).i64[0], 0);
                v123.i64[1] = *(void *)&size.height;
                v123.i64[0] = v113.i64[0];
                int8x16_t v124 = vbslq_s8(v122, v123, (int8x16_t)size);
                v115.i64[0] = 0x8000000000000000;
                v122.i64[0] = *(_OWORD *)&vaddq_f64((float64x2_t)rect.origin, (float64x2_t)vbslq_s8(v122, (int8x16_t)size, v115));
                v125.i64[0] = v122.i64[0];
                v125.i64[1] = *(void *)&rect.origin.y;
                int8x16_t v126 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v116, v114).i64[0], 0);
                v127.i64[0] = v124.i64[0];
                v127.i64[1] = *(void *)&v119.f64[1];
                v122.i64[1] = *(void *)&vaddq_f64(*(float64x2_t *)&size, *(float64x2_t *)&rect).f64[1];
                *(void *)v121 = &unk_1ED0287D0;
                *(int8x16_t *)(v121 + 8) = vbslq_s8(v126, v122, v125);
                *(int8x16_t *)(v121 + 24) = vbslq_s8(v126, v127, v124);
              }
              else
              {
                int v130 = *((_DWORD *)v17 + 1);
                *((_DWORD *)v17 + 1) = v130 + 1;
                v131 = &v35[104 * v130];
                v117.f64[0] = 0.0;
                int8x16_t v132 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v117, (float64x2_t)size).i64[0], 0);
                v133.i64[1] = *(void *)&size.height;
                v133.i64[0] = v113.i64[0];
                v113.i64[0] = 0x8000000000000000;
                v134.i64[0] = *(_OWORD *)&vaddq_f64((float64x2_t)rect.origin, (float64x2_t)vbslq_s8(v132, (int8x16_t)size, v113));
                v135.i64[0] = v134.i64[0];
                v135.i64[1] = *(void *)&rect.origin.y;
                int8x16_t v136 = vbslq_s8(v132, v133, (int8x16_t)size);
                int8x16_t v137 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v117, (float64x2_t)vdupq_laneq_s64((int64x2_t)size, 1)).i64[0], 0);
                v138.i64[0] = v136.i64[0];
                v138.i64[1] = *(void *)&v119.f64[1];
                v134.i64[1] = *(void *)&vaddq_f64(*(float64x2_t *)&size, *(float64x2_t *)&rect).f64[1];
                *(void *)v131 = &unk_1ED0293C8;
                *(int8x16_t *)(v131 + 8) = vbslq_s8(v137, v134, v135);
                *(int8x16_t *)(v131 + 24) = vbslq_s8(v137, v138, v136);
                *((double *)v131 + 5) = fabs(0.0);
                *((double *)v131 + 6) = fabs(0.0);
              }
            }
            else
            {
LABEL_51:
              int v128 = *((_DWORD *)v17 + 1);
              *((_DWORD *)v17 + 1) = v128 + 1;
              v129 = &v35[104 * v128];
              *(void *)v129 = &unk_1ED029E50;
              *((void *)v129 + 1) = CGPathRetain(Path);
              v129[16] = v51 == 1;
              v129[17] = ShouldAntialias;
            }
          }
LABEL_52:
          if (v51 == 2)
          {
            int v74 = Path;
            goto LABEL_54;
          }
LABEL_55:
          if (++v34 == Count)
          {
            a1 = v145;
            int v3 = v144;
            goto LABEL_62;
          }
          break;
        case 3u:
          CGClipGetMask();
          Image = (CGImage *)CGClipMaskGetImage();
          long long v166 = 0u;
          long long v167 = 0u;
          int8x16_t v165 = 0u;
          CGClipMaskGetMatrix();
          CGClipMaskGetRect();
          *(double *)&v58.i64[1] = v56;
          v59.f64[0] = 0.0;
          v61.i64[0] = *(void *)&v60.f64[0];
          v61.i64[1] = v57;
          int8x16_t v62 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v59, v60).i64[0], 0);
          v63.i64[1] = v57;
          *(double *)v63.i64 = -v60.f64[0];
          int8x16_t v64 = vbslq_s8(v62, v63, v61);
          v60.f64[1] = v56;
          v60.f64[0] = v60.f64[0] + *(double *)v58.i64;
          int8x16_t v65 = vbslq_s8(v62, (int8x16_t)v60, v58);
          if (*(double *)&v57 < 0.0)
          {
            *(double *)&v65.i64[1] = *(double *)&v57 + v56;
            *(double *)&v64.i64[1] = -*(double *)&v57;
          }
          int8x16_t v147 = v65;
          int8x16_t v149 = v64;
          int v66 = *((_DWORD *)v17 + 1);
          *((_DWORD *)v17 + 1) = v66 + 1;
          int32x2_t v67 = &v35[104 * v66];
          *(void *)int32x2_t v67 = &unk_1ED02A0B8;
          *((void *)v67 + 1) = CGImageRetain(Image);
          long long v68 = v166;
          long long v69 = v167;
          *((int8x16_t *)v67 + 1) = v165;
          *((_OWORD *)v67 + 2) = v68;
          *((_OWORD *)v67 + 3) = v69;
          *((int8x16_t *)v67 + 4) = v147;
          *((int8x16_t *)v67 + 5) = v149;
          v67[96] = ShouldAntialias;
          goto LABEL_55;
        case 4u:
          CGClipGetTextClipping();
          double v70 = (const CGPath *)CGTextClippingCreatePath();
          if (v70)
          {
            double v71 = v70;
            int v72 = *((_DWORD *)v17 + 1);
            *((_DWORD *)v17 + 1) = v72 + 1;
            uint64_t v73 = &v35[104 * v72];
            *(void *)uint64_t v73 = &unk_1ED029E50;
            *((void *)v73 + 1) = CGPathRetain(v70);
            v73[16] = 0;
            v73[17] = ShouldAntialias;
            int v74 = v71;
LABEL_54:
            CGPathRelease(v74);
          }
          goto LABEL_55;
        default:
          goto LABEL_55;
      }
    }
  }
  v17 = 0;
LABEL_62:
  v142 = *(void (****)(char *))(a1 + 312);
  *(void *)(a1 + 312) = v17;
  if (v142 && atomic_fetch_add((atomic_uint *volatile)v142, 0xFFFFFFFF) == 1) {
    CA::CG::ClipStack::destroy_clip_stack(v142);
  }
  *(_DWORD *)(a1 + 304) = v3;
  return *(void *)(a1 + 312);
}

double *CA::CG::DeviceColor::DeviceColor(double *a1, CGColor *a2, uint64_t a3, uint64_t a4, const double *a5, double *a6)
{
  v41[1] = *MEMORY[0x1E4F143B8];
  *a1 = 0.0;
  if (a2)
  {
    int Identifier = CGColorGetIdentifier();
    int v11 = Identifier;
    uint64_t v12 = 0;
    int8x16_t v13 = a5 + 5;
    uint64_t v14 = Identifier & 7;
    char v15 = 1;
    do
    {
      char v16 = v15;
      uint64_t v17 = (uint64_t)&v13[4 * v14 + 2 * v12];
      if (*(_DWORD *)v17 == Identifier)
      {
        int64x2_t v31 = (double *)(v17 + 8);
        a1[1] = *(double *)(v17 + 8);
        if ((v16 & 1) == 0)
        {
          int8x16_t v32 = (double *)&v13[4 * v14];
          int v33 = *(_DWORD *)v32;
          uint64_t v34 = *((void *)v32 + 1);
          *(_DWORD *)int8x16_t v32 = *(_DWORD *)v17;
          v32[1] = *v31;
          *(_DWORD *)uint64_t v17 = v33;
          *(void *)int64x2_t v31 = v34;
        }
        return a1;
      }
      char v15 = 0;
      uint64_t v12 = 1;
    }
    while ((v16 & 1) != 0);
    CGPatternRef Pattern = CGColorGetPattern(a2);
    if (!Pattern)
    {
      Components = (float64x2_t *)CGColorGetComponents(a2);
      ColorSpace = CGColorGetColorSpace(a2);
      CA::CG::ContextDelegate::device_color((CA::CG::ContextDelegate *)v41, a5, Components, ColorSpace);
      a1[1] = *(double *)v41;
      double v37 = (double *)&v13[4 * v14];
      *((_DWORD *)v37 + 4) = *(_DWORD *)v37;
      v37[3] = v37[1];
      *(_DWORD *)double v37 = v11;
      v37[1] = a1[1];
      return a1;
    }
    CGPatternRef v19 = Pattern;
    double Alpha = CGColorGetAlpha(a2);
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    double v22 = (char *)malloc_type_zone_malloc(malloc_zone, 0x58uLL, 0x8BB15036uLL);
    if (v22)
    {
      PatternBaseColor = (CGColor *)CGColorGetPatternBaseColor();
      *(void *)double v22 = CFRetain(v19);
      BaseCTM = (_OWORD *)CGRenderingStateGetBaseCTM();
      long long v26 = BaseCTM[1];
      long long v25 = BaseCTM[2];
      *(_OWORD *)(v22 + 8) = *BaseCTM;
      *(_OWORD *)(v22 + 24) = v26;
      *(_OWORD *)(v22 + 40) = v25;
      CGGStateGetPatternPhase();
      *((void *)v22 + 7) = v27;
      *((void *)v22 + 8) = v28;
      if (PatternBaseColor)
      {
        float64x2_t v29 = (float64x2_t *)CGColorGetComponents(PatternBaseColor);
        float64x2_t v30 = CGColorGetColorSpace(PatternBaseColor);
        CA::CG::ContextDelegate::device_color((CA::CG::ContextDelegate *)v41, a5, v29, v30);
        *((void *)v22 + 9) = v41[0];
      }
      else
      {
        *((void *)v22 + 9) = 0x3C003C003C003C00;
        if (Alpha != 1.0)
        {
          float v38 = Alpha;
          *((float16x4_t *)v22 + 9) = vcvt_f16_f32(vmulq_n_f32(vcvtq_f32_f16((float16x4_t)0x3C003C003C003C00), v38));
        }
      }
      CGGStateGetEDRTargetHeadroom();
      *((_DWORD *)v22 + 20) = v39;
    }
    *(void *)a1 = v22;
  }
  a1[1] = *a6;
  return a1;
}

BOOL CA::CG::FillRects::can_coalesce(CA::CG::FillRects *this, const CA::CG::FillRects *a2)
{
  int v2 = *((_DWORD *)this + 25);
  if ((v2 & 0x1000000) == 0) {
    return 0;
  }
  int v3 = *((_DWORD *)a2 + 25);
  if ((v3 & 0x1000000) == 0) {
    return 0;
  }
  if (*((double *)this + 1) != *((double *)a2 + 1)) {
    return 0;
  }
  if (*((double *)this + 2) != *((double *)a2 + 2)) {
    return 0;
  }
  if (*((double *)this + 3) != *((double *)a2 + 3)) {
    return 0;
  }
  if (*((double *)this + 4) != *((double *)a2 + 4)) {
    return 0;
  }
  if (*((double *)this + 5) != *((double *)a2 + 5)) {
    return 0;
  }
  if (*((double *)this + 6) != *((double *)a2 + 6)) {
    return 0;
  }
  int v4 = *((_DWORD *)this + 14);
  if (v4 != *((_DWORD *)a2 + 14)
    || *((void *)this + 8) != *((void *)a2 + 8)
    || *((void *)this + 9) != *((void *)a2 + 9)
    || *((void *)this + 11) != *((void *)a2 + 11))
  {
    return 0;
  }
  uint64_t v5 = *((void *)this + 10);
  uint64_t v6 = *((void *)a2 + 10);
  if (v5 && v6)
  {
    BOOL v7 = CA::CG::DeviceColor::Pattern::operator==(*((void *)this + 10), v6);
    BOOL result = 0;
    if (!v7) {
      return result;
    }
    goto LABEL_21;
  }
  BOOL result = 0;
  if (!v5 && !v6)
  {
LABEL_21:
    if (v2 == v3) {
      return v4 != 0;
    }
  }
  return result;
}

uint64_t CA::CG::ContextDelegate::device_color(CA::CG::ContextDelegate *this, const double *a2, float64x2_t *a3, CGColorSpace *a4)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t result = CGColorSpaceGetModel(a4);
  float32x4_t v31 = 0uLL;
  if (result)
  {
    if (result != 1)
    {
      if (result == 6)
      {
        *(_DWORD *)this = 1006648320;
        _H0 = COERCE_UNSIGNED_INT(1.0);
        *((_WORD *)this + 2) = COERCE_UNSIGNED_INT(1.0);
        goto LABEL_21;
      }
      goto LABEL_13;
    }
    *(float32x2_t *)v31.f32 = vcvt_f32_f64(*a3);
    float32_t v13 = a3[1].f64[0];
    v31.f32[2] = v13;
    uint64_t v12 = 3;
  }
  else
  {
    float32_t v11 = a3->f64[0];
    v31.f32[1] = v11;
    v31.f32[2] = v11;
    v31.f32[0] = v11;
    uint64_t v12 = 1;
  }
  float32_t v14 = a3->f64[v12];
  v31.f32[3] = v14;
  char v15 = (CA::ColorProgram::Cache *)*((void *)a2 + 37);
  if (!v15)
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    char v15 = (CA::ColorProgram::Cache *)malloc_type_zone_malloc(malloc_zone, 0x50uLL, 0x8BB15036uLL);
    if (v15) {
      char v15 = CA::ColorProgram::Cache::Cache(v15, *((CGColorSpaceRef *)a2 + 4));
    }
    *((void *)a2 + 37) = v15;
  }
  if (!CA::ColorProgram::Cache::convert_color(v15, a4, v31.f32, v9))
  {
LABEL_13:
    if (CARetainColorTransform(*((CGColorSpace **)a2 + 4)))
    {
      size_t NumberOfComponents = CGColorSpaceGetNumberOfComponents(a4);
      CGColorTransformConvertColorComponents();
      CGColorTransformRelease();
      v19.f64[0] = 0.0;
      v19.f64[1] = a3->f64[NumberOfComponents];
      _Q0 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)0), v19);
    }
    else
    {
      __asm { FMOV            V0.4S, #1.0 }
    }
    goto LABEL_16;
  }
  _Q0 = v31;
LABEL_16:
  float32x4_t v30 = _Q0;
  uint64_t result = CGColorSpaceGetModel(*((CGColorSpaceRef *)a2 + 4));
  float v24 = v30.f32[2];
  if (!result) {
    float v24 = v30.f32[0];
  }
  float v25 = v30.f32[1];
  if (!result) {
    float v25 = v30.f32[0];
  }
  _S2 = v30.i32[3];
  _S3 = vmuls_lane_f32(v30.f32[0], v30, 3);
  _S1 = vmuls_lane_f32(v25, v30, 3);
  _S0 = vmuls_lane_f32(v24, v30, 3);
  __asm { FCVT            H3, S3 }
  *(_WORD *)this = LOWORD(_S3);
  __asm { FCVT            H1, S1 }
  *((_WORD *)this + 1) = LOWORD(_S1);
  __asm { FCVT            H0, S0 }
  *((_WORD *)this + 2) = LOWORD(_S0);
  __asm { FCVT            H0, S2 }
LABEL_21:
  *((_WORD *)this + 3) = _H0;
  return result;
}

uint64_t CA::ColorProgram::Cache::convert_color(CA::ColorProgram::Cache *this, CGColorSpace *a2, float *a3, CGColorRenderingIntent a4)
{
  if (CARequiresColorMatching(a2, *(CGColorSpace **)this, 0))
  {
    uint64_t result = (uint64_t)CA::ColorProgram::Cache::lookup_(this, a2, 0, v7);
    if (!result) {
      return result;
    }
    int v11 = *(_DWORD *)(result + 36);
    if (!v11) {
      return 0;
    }
    unsigned int v12 = v11 & 0x7FFFFFFF;
    if ((v11 & 0x7FFFFFFF) != 0)
    {
      float32_t v13 = *(float **)(result + 48);
      do
      {
        switch(v12 & 0x1F)
        {
          case 1u:
            float v14 = *a3;
            float v15 = a3[1];
            float v16 = a3[2];
            *a3 = (float)((float)(v13[12] + (float)(*v13 * *a3)) + (float)(v13[4] * v15)) + (float)(v13[8] * v16);
            a3[1] = (float)((float)(v13[13] + (float)(v13[1] * v14)) + (float)(v13[5] * v15)) + (float)(v13[9] * v16);
            a3[2] = (float)((float)(v13[14] + (float)(v13[2] * v14)) + (float)(v13[6] * v15)) + (float)(v13[10] * v16);
            goto LABEL_20;
          case 2u:
            for (uint64_t i = 0; i != 3; ++i)
            {
              *(float *)v9.i32 = a3[i];
              int8x16_t v52 = v9;
              *(float *)v18.i32 = powf(fabsf(*(float *)v9.i32), v13[i]);
              v19.i64[0] = 0x8000000080000000;
              v19.i64[1] = 0x8000000080000000;
              int8x16_t v9 = vbslq_s8(v19, v18, v52);
              a3[i] = *(float *)v9.i32;
            }
            uint64_t v20 = 4;
            break;
          case 3u:
            for (uint64_t j = 0; j != 3; ++j)
            {
              float v22 = v13[j + 4];
              float v23 = v13[j + 8];
              *(float *)v9.i32 = a3[j];
              int8x16_t v53 = v9;
              float v24 = fabsf(*(float *)v9.i32);
              *(float *)v25.i32 = powf(v23 + (float)(v24 * v22), v13[j]);
              v26.i64[0] = 0x8000000080000000;
              v26.i64[1] = 0x8000000080000000;
              if (v24 < (float)((float)-v23 / v22)) {
                *(float *)v25.i32 = 0.0;
              }
              int8x16_t v9 = vbslq_s8(v26, v25, v53);
              a3[j] = *(float *)v9.i32;
            }
            uint64_t v20 = 12;
            break;
          case 4u:
            uint64_t v27 = 0;
            uint64_t v28 = v13 + 8;
            do
            {
              float v29 = v28[v27 - 4];
              float v30 = v28[v27];
              float v31 = v28[v27 + 4];
              *(float *)v9.i32 = a3[v27];
              int8x16_t v54 = v9;
              float v32 = fabsf(*(float *)v9.i32);
              *(float *)v33.i32 = powf(v30 + (float)(v32 * v29), v13[v27]);
              v34.i64[0] = 0x8000000080000000;
              v34.i64[1] = 0x8000000080000000;
              if (v32 < (float)((float)-v30 / v29)) {
                *(float *)v33.i32 = 0.0;
              }
              *(float *)v33.i32 = *(float *)v33.i32 + v31;
              int8x16_t v9 = vbslq_s8(v34, v33, v54);
              a3[v27++] = *(float *)v9.i32;
            }
            while (v27 != 3);
LABEL_20:
            uint64_t v20 = 16;
            break;
          case 5u:
            uint64_t v35 = 0;
            float64x2_t v36 = v13 + 8;
            do
            {
              float v37 = v36[v35 + 4];
              float v38 = v36[v35 + 8];
              *(float *)v10.i32 = a3[v35];
              int8x16_t v55 = v10;
              float v39 = fabsf(*(float *)v10.i32);
              *(float *)v40.i32 = powf(v36[v35] + (float)(v39 * v36[v35 - 4]), v13[v35]);
              v41.i64[0] = 0x8000000080000000;
              v41.i64[1] = 0x8000000080000000;
              if (v39 < v38) {
                *(float *)v40.i32 = v39 * v37;
              }
              int8x16_t v9 = vbslq_s8(v41, v40, v55);
              a3[v35++] = *(float *)v9.i32;
            }
            while (v35 != 3);
            uint64_t v20 = 20;
            break;
          case 6u:
            uint64_t v42 = 0;
            int8x16_t v43 = v13 + 12;
            do
            {
              float v44 = v43[v42];
              float v45 = v43[v42 + 4];
              float v46 = v43[v42 + 8];
              float v47 = v43[v42 + 12];
              *(float *)v10.i32 = a3[v42];
              int8x16_t v56 = v10;
              float v48 = fabsf(*(float *)v10.i32);
              *(float *)v50.i32 = powf(v43[v42 - 4] + (float)(v48 * v43[v42 - 8]), v13[v42]);
              v49.i64[0] = 0x8000000080000000;
              v49.i64[1] = 0x8000000080000000;
              *(float *)v50.i32 = *(float *)v50.i32 + v46;
              if (v48 < v45) {
                *(float *)v50.i32 = v47 + (float)(v48 * v44);
              }
              int8x16_t v9 = vbslq_s8(v49, v50, v56);
              a3[v42++] = *(float *)v9.i32;
            }
            while (v42 != 3);
            uint64_t v20 = 28;
            break;
          default:
            return 0;
        }
        v13 += v20;
        BOOL v51 = v12 > 0x1F;
        v12 >>= 5;
      }
      while (v51);
    }
  }
  return 1;
}

void CA::CG::AccelQueue::will_draw(CA::CG::AccelDrawable **this)
{
  CA::CG::AccelDrawable::detach_providers(this[22], 0);
  if (CA::CG::release_queue(void)::once != -1) {
    dispatch_once(&CA::CG::release_queue(void)::once, &__block_literal_global_16);
  }
  v1 = CA::CG::release_queue(void)::queue;

  dispatch_sync(v1, &__block_literal_global_457);
}

void CA::CG::AccelDrawable::detach_providers(CA::CG::AccelDrawable *this, char a2)
{
  if (*((void *)this + 10) || *((void *)this + 11))
  {
    os_unfair_lock_lock((os_unfair_lock_t)this + 3);
    int v4 = (CGImage *)*((void *)this + 10);
    *((void *)this + 10) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)this + 3);
    if (v4) {
      CGImageRelease(v4);
    }
    os_unfair_lock_lock((os_unfair_lock_t)this + 3);
    uint64_t v5 = (os_unfair_lock_s **)*((void *)this + 11);
    *((void *)this + 11) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)this + 3);
    if (v5)
    {
      uint64_t v6 = v5;
      do
      {
        CGColorRenderingIntent v7 = *v6;
        if ((a2 & 1) != 0 || (int8x16_t v8 = (void *)*((void *)this + 9)) == 0)
        {
          CA::CG::AccelDataProvider::detach(*v6);
          unsigned int add = atomic_fetch_add((atomic_uint *volatile)&v7[3], 0xFFFFFFFF);
          if (v7) {
            BOOL v10 = add == 1;
          }
          else {
            BOOL v10 = 0;
          }
          if (v10) {
            (*(void (**)(os_unfair_lock_s *))(*(void *)&v7->_os_unfair_lock_opaque + 16))(v7);
          }
        }
        else
        {
          if (v8[4]) {
            CA::CG::Queue::flush_queue(*((CA::CG::Queue **)this + 9));
          }
          else {
            (*(void (**)(void))(*v8 + 24))(*((void *)this + 9));
          }
          if (CA::CG::Queue::_disable_async)
          {
            if (CA::CG::Queue::queue(void)::once[0] != -1) {
              dispatch_once_f(CA::CG::Queue::queue(void)::once, 0, (dispatch_function_t)CA::CG::Queue::create_queue);
            }
            dispatch_sync_f((dispatch_queue_t)CA::CG::Queue::_queue, v7, (dispatch_function_t)CA::CG::detach_provider_callback);
          }
          else
          {
            int v11 = v8[1];
            if (!v11)
            {
              int v11 = dispatch_group_create();
              v8[1] = v11;
            }
            if (CA::CG::Queue::queue(void)::once[0] != -1) {
              dispatch_once_f(CA::CG::Queue::queue(void)::once, 0, (dispatch_function_t)CA::CG::Queue::create_queue);
            }
            dispatch_group_async_f(v11, (dispatch_queue_t)CA::CG::Queue::_queue, v7, (dispatch_function_t)CA::CG::detach_provider_callback);
          }
        }
        uint64_t v6 = (os_unfair_lock_s **)v6[1];
      }
      while (v6);
      do
      {
        unsigned int v12 = (os_unfair_lock_s **)v5[1];
        free(v5);
        uint64_t v5 = v12;
      }
      while (v12);
    }
  }
}

CA::ColorProgram::Cache *CA::ColorProgram::Cache::Cache(CA::ColorProgram::Cache *this, CGColorSpaceRef space)
{
  CGColorSpaceRef v3 = CGColorSpaceRetain(space);
  *(void *)this = v3;
  *((void *)this + 1) = CAGetReconciledColorSpace((uint64_t)v3);
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 32;
  *((_DWORD *)this + 12) = 1065353216;
  *(void *)((char *)this + 52) = 0;
  *(void *)((char *)this + 57) = 0;
  *(_WORD *)((char *)this + 65) = 1;
  *((unsigned char *)this + 67) = 0;
  *(void *)((char *)this + 68) = 0xD00000000;
  *((_DWORD *)this + 19) = 23;
  CGColorTransformRetain();
  return this;
}

uint64_t CAGetReconciledColorSpace(uint64_t a1)
{
  if (!a1) {
    return a1;
  }
  switch(CGColorSpaceGetType())
  {
    case 0u:
      unsigned int v2 = 3;
      goto LABEL_7;
    case 1u:
      unsigned int v2 = 29;
      goto LABEL_7;
    case 2u:
      unsigned int v2 = 4;
LABEL_7:
      uint64_t result = CAGetColorSpace(v2);
      break;
    case 8u:
      uint64_t result = MEMORY[0x1F40D9B88](a1);
      break;
    default:
      return a1;
  }
  return result;
}

void CA::CG::Queue::flush(uint64_t a1, int a2, char a3)
{
  CA::CG::Queue::flush_queue((CA::CG::Queue *)a1);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  CGColorRenderingIntent v7 = malloc_type_zone_malloc(malloc_zone, 0x10uLL, 0x8BB15036uLL);
  int8x16_t v8 = v7;
  if (v7)
  {
    *CGColorRenderingIntent v7 = a1;
    *((_DWORD *)v7 + 2) = a2;
  }
  ++*(_DWORD *)(a1 + 48);
  if (a3 & 1) != 0 || (CA::CG::Queue::_disable_async)
  {
    if (CA::CG::Queue::queue(void)::once[0] != -1) {
      dispatch_once_f(CA::CG::Queue::queue(void)::once, 0, (dispatch_function_t)CA::CG::Queue::create_queue);
    }
    int v11 = CA::CG::Queue::_queue;
    dispatch_sync_f(v11, v8, (dispatch_function_t)CA::CG::Queue::Flush::callback);
  }
  else
  {
    int8x16_t v9 = *(NSObject **)(a1 + 8);
    if (!v9)
    {
      int8x16_t v9 = dispatch_group_create();
      *(void *)(a1 + 8) = v9;
    }
    if (CA::CG::Queue::queue(void)::once[0] != -1) {
      dispatch_once_f(CA::CG::Queue::queue(void)::once, 0, (dispatch_function_t)CA::CG::Queue::create_queue);
    }
    BOOL v10 = CA::CG::Queue::_queue;
    dispatch_group_async_f(v9, v10, v8, (dispatch_function_t)CA::CG::Queue::Flush::callback);
  }
}

uint64_t *CA::CG::Queue::allocate_slab(CA::CG::Queue *this)
{
  uint64_t v1 = 0x2000;
  if ((unint64_t)this > 0x2000) {
    uint64_t v1 = (uint64_t)this;
  }
  size_t v2 = (v1 + *MEMORY[0x1E4F14B00] - 1) & -*MEMORY[0x1E4F14B00];
  os_unfair_lock_lock((os_unfair_lock_t)&CA::CG::Queue::_free_lock);
  CGColorSpaceRef v3 = 0;
  int v4 = &CA::CG::Queue::_free_slabs;
  uint64_t v5 = &CA::CG::Queue::_free_slabs;
  while (1)
  {
    uint64_t v6 = v3;
    CGColorSpaceRef v3 = (uint64_t *)*v5;
    if (!*v5) {
      break;
    }
    size_t v7 = v3[1];
    uint64_t v5 = (uint64_t *)*v5;
    if (v7 >= v2)
    {
      if (v6) {
        int v4 = v6;
      }
      uint64_t *v4 = *v3;
      os_unfair_lock_unlock((os_unfair_lock_t)&CA::CG::Queue::_free_lock);
      size_t v2 = v7;
      goto LABEL_10;
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::CG::Queue::_free_lock);
  CGColorSpaceRef v3 = (uint64_t *)mmap(0, v2, 3, 4098, 855638016, 0);
  if (v3 == (uint64_t *)-1) {
    abort();
  }
LABEL_10:
  *CGColorSpaceRef v3 = 0;
  v3[1] = 0;
  v3[2] = v2;
  v3[3] = v2 - 48;
  v3[4] = (uint64_t)(v3 + 6);
  return v3;
}

void CA::CG::Queue::flush_queue(CA::CG::Queue *this)
{
  size_t v2 = (void *)((char *)this + 32);
  uint64_t v1 = (void *)*((void *)this + 4);
  if (v1)
  {
    (*(void (**)(CA::CG::Queue *))(*(void *)this + 24))(this);
    *size_t v2 = 0;
    v2[1] = 0;
    if (v1[3] >= (unint64_t)(v1[2] - 48))
    {
      CA::CG::Queue::deallocate_slab(v1);
    }
    else
    {
      ++*((_DWORD *)this + 12);
      dispatch_semaphore_wait((dispatch_semaphore_t)CA::CG::Queue::_queue_sema, 0xFFFFFFFFFFFFFFFFLL);
      if (BYTE9(xmmword_1EB2ACC10)) {
        kdebug_trace();
      }
      if (CA::CG::Queue::_disable_async)
      {
        if (CA::CG::Queue::queue(void)::once[0] != -1) {
          dispatch_once_f(CA::CG::Queue::queue(void)::once, 0, (dispatch_function_t)CA::CG::Queue::create_queue);
        }
        int v4 = CA::CG::Queue::_queue;
        dispatch_sync_f(v4, v1, (dispatch_function_t)CA::CG::Queue::render_callback);
      }
      else
      {
        uint64_t v5 = *((void *)this + 1);
        if (!v5)
        {
          uint64_t v5 = dispatch_group_create();
          *((void *)this + 1) = v5;
        }
        if (CA::CG::Queue::queue(void)::once[0] != -1)
        {
          size_t v7 = v5;
          dispatch_once_f(CA::CG::Queue::queue(void)::once, 0, (dispatch_function_t)CA::CG::Queue::create_queue);
          uint64_t v5 = v7;
        }
        uint64_t v6 = CA::CG::Queue::_queue;
        dispatch_group_async_f(v5, v6, v1, (dispatch_function_t)CA::CG::Queue::render_callback);
      }
    }
  }
}

os_log_t ___ZN2CA3OGL7ContextC2Ev_block_invoke()
{
  os_log_t result = os_log_create("com.apple.coreanimation", "OGL.Trace");
  CA::OGL::Context::_trace_log = (uint64_t)result;
  return result;
}

os_log_t ___ZN2CA3OGL12MetalContext22get_pipeline_stall_logEv_block_invoke()
{
  os_log_t result = os_log_create("com.apple.coreanimation", "Metal.Pipelines.Stall");
  CA::OGL::MetalContext::get_pipeline_stall_log(void)::pipeline_stall_log = (uint64_t)result;
  return result;
}

os_log_t ___ZN2CA3OGL12MetalContext16get_pipeline_logEv_block_invoke()
{
  os_log_t result = os_log_create("com.apple.coreanimation", "Metal.Pipelines");
  CA::OGL::MetalContext::get_pipeline_log(void)::pipeline_log = (uint64_t)result;
  return result;
}

void CA::CG::AccelRenderer::AccelRenderer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1ED02A078;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  if ((_UNKNOWN *)(a1 + 32) != &CA::Mat2Impl::mat2_identity_double)
  {
    *(_OWORD *)(a1 + 32) = xmmword_184997D50;
    *(_OWORD *)(a1 + 48) = xmmword_184997D60;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 72) = 0;
  }
  *(void *)(a1 + 80) = 0x3FF0000000000000;
  if ((_UNKNOWN *)(a1 + 88) != &CA::Mat2Impl::mat2_identity_double)
  {
    *(_OWORD *)(a1 + 88) = xmmword_184997D50;
    *(_OWORD *)(a1 + 104) = xmmword_184997D60;
    *(void *)(a1 + 120) = 0;
    *(void *)(a1 + 128) = 0;
  }
  *(void *)(a1 + 136) = 0xFFFFFFFE00000000;
  *(void *)(a1 + 152) = 1;
  uint64_t v2 = 160;
  do
  {
    uint64_t v3 = a1 + v2;
    *(void *)uint64_t v3 = 0;
    *(_DWORD *)(v3 + 8) = 0;
    v2 += 16;
  }
  while (v3 + 16 != a1 + 288);
  *(_DWORD *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  for (uint64_t i = 304; i != 1280; i += 488)
    *(void *)(a1 + i) = 0;
  *(void *)(a1 + 1280) = 128;
  operator new[]();
}

uint64_t CA::OGL::Mosaic::purge(CA::OGL::Mosaic *this)
{
  if ((*((_DWORD *)this + 36) & 0x80000000) == 0) {
    __assert_rtn("purge", "ogl-mosaic.cpp", 158, "_image_unit < 0");
  }
  uint64_t v2 = (char *)this + 48;
  uint64_t v3 = (char *)*((void *)this + 7);
  if (v3 != (char *)this + 48)
  {
    do
    {
      int v4 = (char *)*((void *)v3 + 1);
      uint64_t v5 = *((void *)v3 + 4);
      if (v5) {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
      }
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      malloc_zone_free(malloc_zone, v3);
      uint64_t v3 = v4;
    }
    while (v4 != v2);
    *((void *)this + 6) = (char *)this + 48;
    *((void *)this + 7) = v2;
  }
  size_t v7 = (char *)this + 96;
  int8x16_t v8 = (char *)*((void *)this + 13);
  if (v8 != (char *)this + 96)
  {
    do
    {
      BOOL v10 = (char *)*((void *)v8 + 1);
      int8x16_t v9 = (atomic_uint *)*((void *)v8 + 2);
      if (v9 && atomic_fetch_add(v9 + 2, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v9 + 16))(v9);
      }
      uint64_t v11 = *((void *)v8 + 3);
      if (v11) {
        MEMORY[0x185323DA0](v11, 0x1020C8062D53EE8);
      }
      unsigned int v12 = (malloc_zone_t *)get_malloc_zone();
      malloc_zone_free(v12, v8);
      int8x16_t v8 = v10;
    }
    while (v10 != v7);
    *((void *)this + 12) = (char *)this + 96;
    *((void *)this + 13) = v7;
    *((_DWORD *)this + 22) = 0;
    *((void *)this + 14) = 0;
  }
  uint64_t result = *((void *)this + 9);
  if (result)
  {
    uint64_t result = MEMORY[0x185323DA0](result, 0x20C8093837F09);
    *((void *)this + 8) = 0;
    *((void *)this + 9) = 0;
    *((void *)this + 10) = 0;
  }
  return result;
}

uint64_t CA::OGL::MetalContext::default_buffer_size(CA::OGL::MetalContext *this)
{
  return 0x40000;
}

void __CADeviceSupportsLossyUniversalCompression_block_invoke()
{
  CFDictionaryRef v0 = (const __CFDictionary *)MGCopyAnswer();
  if (v0)
  {
    CFDictionaryRef v1 = v0;
    Value = CFDictionaryGetValue(v0, @"universal-lossy-buffer-compression");
    if (Value) {
      LOBYTE(Value) = CA_CFBoolValue(Value);
    }
    CADeviceSupportsLossyUniversalCompression::lossy = (char)Value;
    CFRelease(v1);
  }
}

NSObject *__CAGetRootQueue_block_invoke()
{
  uint64_t result = CACreateQueueWithWorkloop("com.apple.coreanimation.workloop_queue");
  CA::_root_queue = (uint64_t)result;
  return result;
}

NSObject *CACreateQueueWithWorkloop(const char *a1)
{
  inactive = dispatch_workloop_create_inactive(a1);
  dispatch_set_qos_class_fallback();
  dispatch_workloop_set_scheduler_priority();
  dispatch_activate(inactive);
  return inactive;
}

dispatch_queue_t ___ZN2CA3OGL12MetalContext18get_pipeline_queueEv_block_invoke()
{
  CFDictionaryRef v0 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  dispatch_queue_t result = dispatch_queue_create("com.apple.coreanimation.pipelines", v0);
  CA::OGL::MetalContext::get_pipeline_queue(void)::queue = (uint64_t)result;
  return result;
}

dispatch_queue_t ___ZN2CA2CGL13release_queueEv_block_invoke()
{
  CFDictionaryRef v0 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  dispatch_queue_t result = dispatch_queue_create("CA::CG::DeallocQueue", v0);
  CA::CG::release_queue(void)::queue = (uint64_t)result;
  return result;
}

dispatch_queue_t CA::CG::Queue::create_queue(CA::CG::Queue *this)
{
  CFDictionaryRef v1 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  dispatch_queue_t result = dispatch_queue_create("CA::CG::Queue", v1);
  CA::CG::Queue::_queue = (uint64_t)result;
  return result;
}

void CA::CG::DrawOp::render(CA::CG::DrawOp *this, float64x2_t *a2)
{
  uint64_t v128 = *MEMORY[0x1E4F143B8];
  float64x2_t v122 = 0u;
  float64x2_t v123 = 0u;
  uint64_t v4 = (*(uint64_t (**)(CA::CG::DrawOp *, float64x2_t *))(*(void *)this + 24))(this, &v122);
  double v5 = a2[5].f64[0];
  if (v5 != 1.0)
  {
    if (v123.f64[0] < 1.79769313e308)
    {
      v122.f64[0] = v122.f64[0] * v5;
      v123.f64[0] = v123.f64[0] * v5;
    }
    if (v123.f64[1] < 1.79769313e308)
    {
      v122.f64[1] = v122.f64[1] * v5;
      v123.f64[1] = v123.f64[1] * v5;
    }
  }
  int64x2_t v6 = vceqzq_f64(v123);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v6, 1), (int8x16_t)v6).u64[0] & 0x8000000000000000) != 0
    || (int8x16_t v7 = vorrq_s8((int8x16_t)vcltzq_f64(v123), (int8x16_t)vcgezq_f64(v123)),
        (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v7), 1), v7).u64[0] & 0x8000000000000000) != 0))
  {
    v9.i64[0] = 0;
    int32x2_t v10 = 0;
  }
  else
  {
    int32x4_t v8 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v122, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
    int32x4_t v9 = vuzp1q_s32(v8, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v122, v123), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v8));
    int32x2_t v10 = (int32x2_t)v9.u64[1];
  }
  uint64_t v11 = *(void *)&a2->f64[1];
  unsigned int v12 = *(int32x2_t **)(v11 + 264);
  if (v12) {
    float32_t v13 = v12 + 4;
  }
  else {
    float32_t v13 = (int32x2_t *)(v11 + 200);
  }
  uint32x2_t v14 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v10);
  if ((vpmax_u32(v14, v14).u32[0] & 0x80000000) == 0)
  {
    int32x2_t v15 = v13[1];
    uint32x2_t v16 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v15);
    if ((vpmax_u32(v16, v16).u32[0] & 0x80000000) == 0)
    {
      int32x2_t v17 = vadd_s32(*(int32x2_t *)v9.i8, v10);
      *(int32x2_t *)v9.i8 = vmax_s32(*(int32x2_t *)v9.i8, *v13);
      int32x2_t v18 = vsub_s32(vmin_s32(v17, vadd_s32(*v13, v15)), *(int32x2_t *)v9.i8);
      uint32x2_t v19 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v18);
      if ((vpmax_u32(v19, v19).u32[0] & 0x80000000) == 0)
      {
        v9.u64[1] = (unint64_t)v18;
        int32x4_t v121 = v9;
        MEMORY[0x1F4188790](v4);
        uint64_t v21 = (char *)&v109 - v20;
        bzero((char *)&v109 - v20, v22);
        unint64_t v120 = 0;
        long long v118 = 0u;
        long long v119 = 0u;
        long long v117 = 0u;
        CA::CG::ClipOp::ClipOp((int32x2_t *)&v117, (uint64_t)a2, (uint64_t)this, (int32x2_t *)&v121, (uint64_t)v21, 0.0, v23, v24, v25, v26, v27);
        int v28 = DWORD2(v117);
        if (SDWORD2(v117) >= SHIDWORD(v117)) {
          int v28 = HIDWORD(v117);
        }
        if (v28 < 1) {
          goto LABEL_134;
        }
        if (!*(void *)&a2[85].f64[1]) {
          (*(void (**)(float64x2_t *, long long *))(*(void *)&a2->f64[0] + 24))(a2, &v117);
        }
        if ((float64x2_t *)((char *)this + 8) != &a2[2])
        {
          a2[2] = *(float64x2_t *)((char *)this + 8);
          a2[3] = *(float64x2_t *)((char *)this + 24);
          a2[4] = *(float64x2_t *)((char *)this + 40);
        }
        double v29 = a2[5].f64[0];
        if (v29 != 1.0)
        {
          float64x2_t v30 = vmulq_n_f64(a2[3], v29);
          a2[2] = vmulq_n_f64(a2[2], v29);
          a2[3] = v30;
          a2[4] = vmulq_n_f64(a2[4], v29);
        }
        int v31 = (*(uint64_t (**)(CA::CG::DrawOp *, float64x2_t *))(*(void *)this + 128))(this, a2);
        char v32 = (*(uint64_t (**)(CA::CG::DrawOp *, float64x2_t *))(*(void *)this + 136))(this, a2);
        char v33 = v32;
        char v34 = 3;
        uint64_t v35 = 3;
        switch(*((_DWORD *)this + 14))
        {
          case 0:
            int v107 = *((_DWORD *)this + 25);
            if ((v107 & 0x200) != 0) {
              char v34 = 3;
            }
            else {
              char v34 = 12;
            }
            uint64_t v35 = (v107 << 22 >> 31) & 9;
            break;
          case 1:
            BOOL v108 = (v32 & 4) == 0;
            if (*((short float *)this + 47) < COERCE_SHORT_FLOAT(COERCE_UNSIGNED_INT(1.0))) {
              BOOL v108 = 1;
            }
            if (v108) {
              char v34 = 8;
            }
            else {
              char v34 = 11;
            }
            if (v108) {
              uint64_t v35 = 1;
            }
            else {
              uint64_t v35 = 3;
            }
            break;
          case 3:
            char v34 = 0;
            uint64_t v35 = 4;
            break;
          case 4:
            char v34 = 0;
            uint64_t v35 = 5;
            break;
          case 5:
            uint64_t v35 = 6;
            break;
          case 6:
            uint64_t v35 = 7;
            break;
          case 7:
            char v34 = 0;
            uint64_t v35 = 8;
            break;
          case 8:
            uint64_t v35 = 9;
            break;
          case 9:
            char v34 = 0;
            uint64_t v35 = 10;
            break;
          case 0xA:
            uint64_t v35 = 11;
            break;
          case 0xB:
            uint64_t v35 = 26;
            break;
          case 0xC:
            uint64_t v35 = 12;
            break;
          case 0xD:
            uint64_t v35 = 28;
            break;
          case 0xE:
            uint64_t v35 = 16;
            break;
          case 0xF:
            uint64_t v35 = 29;
            break;
          case 0x10:
            uint64_t v35 = 30;
            break;
          case 0x11:
            uint64_t v35 = 31;
            break;
          case 0x12:
            uint64_t v35 = 32;
            break;
          case 0x13:
            uint64_t v35 = 33;
            break;
          case 0x14:
            uint64_t v35 = 34;
            break;
          case 0x15:
            uint64_t v35 = 35;
            break;
          case 0x16:
            uint64_t v35 = 36;
            break;
          case 0x17:
            uint64_t v35 = 20;
            break;
          case 0x18:
            uint64_t v35 = 51;
            break;
          case 0x19:
            uint64_t v35 = 52;
            break;
          case 0x1A:
            uint64_t v35 = 53;
            break;
          case 0x1B:
            uint64_t v35 = 54;
            break;
          default:
            break;
        }
        memset(v127, 0, sizeof(v127));
        int8x16_t v113 = (CA::Shape *)v118;
        if (!(void)v118)
        {
          int8x16_t v113 = (CA::Shape *)v127;
          CA::Shape::operator=((uint64_t)v127, &v117);
        }
        int v36 = *((_DWORD *)this + 25);
        if ((v36 & 0x100) != 0)
        {
          float v37 = (void *)(*(uint64_t (**)(CA::CG::DrawOp *, float64x2_t *))(*(void *)this + 152))(this, a2);
          int v36 = *((_DWORD *)this + 25);
        }
        else
        {
          float v37 = 0;
        }
        unsigned int v112 = v35;
        if ((v36 & 0x800) == 0
          && ((*(uint64_t (**)(CA::CG::DrawOp *, float64x2_t *, uint64_t))(*(void *)this + 48))(this, a2, v35) & 1) == 0)
        {
          if (!v120)
          {
LABEL_71:
            unsigned int v110 = 10255;
            int v38 = 1;
LABEL_34:
            int v109 = v31 & 1;
            int8x16_t v111 = &v109;
            if (((v31 & 1) == 0 || (v33 & 2) == 0)
              && ((v34 & 1) != 0
               || !v120
               && ((*(uint64_t (**)(CA::CG::DrawOp *, float64x2_t *, CA::Shape *))(*(void *)this + 112))(this, a2, v113) & 1) != 0))
            {
              unsigned int v39 = v112;
              if (v120
                && v112 == 3
                && !v31
                && ((v33 & 4) != 0 || (*(unsigned int (**)(CA::CG::DrawOp *))(*(void *)this + 144))(this))
                && (*(_WORD *)(v11 + 832) & 4) == 0)
              {
                uint64_t v40 = *(void *)(v11 + 264);
                if (v40)
                {
                  if ((*(unsigned char *)(v40 + 68) & 8) != 0)
                  {
                    *(unsigned char *)(*(void *)(v11 + 16) + 481) |= 1u;
                    uint64_t v126 = 0;
                    memset(v125, 0, sizeof(v125));
                    memset(v124, 0, sizeof(v124));
                    float v94 = CA::OGL::copy_gstate((uint64_t)v124, *(void *)(v11 + 248));
                    int v95 = v113;
                    *((void *)&v124[0] + 1) = v113;
                    *(void *)&v124[1] = v37;
                    char v96 = (*(uint64_t (**)(CA::CG::DrawOp *, float64x2_t *, CA::Shape *, float))(*(void *)this + 112))(this, a2, v113, v94);
                    if ((v96 & 1) == 0)
                    {
                      WORD2(v126) = WORD2(v126) & 0xFB00 | 0x18;
                      *(void *)&v124[0] = CA::OGL::Context::set_gstate(v11, (uint64_t)v124);
                      *(void *)(*(void *)(v11 + 16) + 8) = 0;
                      int8x16_t v114 = 0uLL;
                      CA::OGL::emit_combine(v11, 0, 0, 0, v95, (unsigned int *)&v114);
                      *(void *)(*(void *)(v11 + 16) + 8) = 0x3C003C003C003C00;
                      (*(void (**)(CA::CG::DrawOp *, float64x2_t *))(*(void *)this + 160))(this, a2);
                      CA::OGL::Context::set_gstate(v11, **(void **)(v11 + 248));
                    }
                    WORD2(v126) = WORD2(v126) & 0xFB00 | 0x419;
                    *(void *)&v124[0] = CA::OGL::Context::set_gstate(v11, (uint64_t)v124);
                    CA::CG::ClipOp::draw((CA::CG::ClipOp *)&v117, (CA::CG::Renderer *)a2);
                    CA::OGL::Context::set_gstate(v11, **(void **)(v11 + 248));
                    if ((v33 & 4) != 0) {
                      char v97 = 21;
                    }
                    else {
                      char v97 = 55;
                    }
                    BYTE4(v126) = v97;
                    *(void *)(*(void *)(v11 + 16) + 8) = *((void *)this + 11);
                    *(void *)&v124[0] = CA::OGL::Context::set_gstate(v11, (uint64_t)v124);
                    (*(void (**)(CA::CG::DrawOp *, float64x2_t *))(*(void *)this + 168))(this, a2);
                    CA::OGL::Context::set_gstate(v11, **(void **)(v11 + 248));
                    if ((v96 & 1) == 0)
                    {
                      WORD2(v126) = WORD2(v126) & 0xFB00 | 0x18;
                      *(void *)&v124[0] = CA::OGL::Context::set_gstate(v11, (uint64_t)v124);
                      *(void *)(*(void *)(v11 + 16) + 8) = 0x3C003C003C003C00;
                      int8x16_t v114 = 0uLL;
                      CA::OGL::emit_combine(v11, 0, 0, 0, v95, (unsigned int *)&v114);
                      CA::OGL::Context::set_gstate(v11, **(void **)(v11 + 248));
                    }
                    *(unsigned char *)(*(void *)(v11 + 16) + 481) &= ~1u;
                    goto LABEL_131;
                  }
                }
              }
              if (v33 & 2) == 0 && !v120 && (!v109 || (v33 & 6) == 4 && (v34))
              {
                if (v39 >= 0x1A) {
                  CA::CG::Renderer::prepare_destination((uint64_t)a2);
                }
                uint64_t v126 = 0;
                memset(v125, 0, sizeof(v125));
                memset(v124, 0, sizeof(v124));
                uint64_t v41 = *(void *)(v11 + 248);
                *(_OWORD *)((char *)v124 + 8) = *(_OWORD *)(v41 + 8);
                uint64_t v42 = *(void *)(v41 + 32);
                *((void *)&v124[1] + 1) = *(void *)(v41 + 24);
                *(void *)&v125[0] = v42;
                *(_OWORD *)((char *)v125 + 8) = *(_OWORD *)(v41 + 40);
                *((void *)&v125[1] + 1) = *(void *)(v41 + 56);
                __int16 v43 = *(_WORD *)(v41 + 68);
                LODWORD(v126) = *(_DWORD *)(v41 + 64);
                float v44 = v113;
                if ((v34 & 2) == 0) {
                  goto LABEL_157;
                }
                if (v113)
                {
                  if (v113 != (CA::Shape *)1) {
                    goto LABEL_157;
                  }
                }
                else if (*((_DWORD *)v113 + 1) == 12)
                {
                  goto LABEL_157;
                }
                if (CA::Shape::contains((uint64_t)v113, (const CA::Bounds *)&v121))
                {
LABEL_158:
                  *(void *)&v124[1] = v37;
                  WORD2(v126) = v43 & 0x500 | v112;
                  *(void *)&v124[0] = CA::OGL::Context::set_gstate(v11, (uint64_t)v124);
                  *(void *)(*(void *)(v11 + 16) + 8) = *((void *)this + 11);
                  *(unsigned char *)(*(void *)(v11 + 16) + 481) |= 1u;
                  (*(void (**)(CA::CG::DrawOp *, float64x2_t *))(*(void *)this + 176))(this, a2);
                  *(unsigned char *)(*(void *)(v11 + 16) + 481) &= ~1u;
                  CA::OGL::Context::set_gstate(v11, **(void **)(v11 + 248));
                  goto LABEL_131;
                }
LABEL_157:
                *((void *)&v124[0] + 1) = v44;
                goto LABEL_158;
              }
              uint64_t v56 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, void))(*(void *)v11 + 656))(v11, 1, &v117, v110);
              if (v56)
              {
                uint64_t v57 = (_DWORD *)v56;
                *(unsigned char *)(*(void *)(v11 + 16) + 481) &= ~1u;
                uint64_t v126 = 0;
                memset(v125, 0, sizeof(v125));
                memset(v124, 0, sizeof(v124));
                uint64_t v58 = *(void *)(v11 + 248);
                uint64_t v59 = *(void *)(v58 + 32);
                *((void *)&v124[1] + 1) = *(void *)(v58 + 24);
                *(void *)&v125[0] = v59;
                *(_OWORD *)((char *)v125 + 8) = *(_OWORD *)(v58 + 40);
                *((void *)&v125[1] + 1) = *(void *)(v58 + 56);
                __int16 v60 = *(_WORD *)(v58 + 68);
                LODWORD(v126) = *(_DWORD *)(v58 + 64);
                *((void *)&v124[0] + 1) = v113;
                *(void *)&v124[1] = v37;
                HIDWORD(v126) = v60 & 0x500 | 0xF;
                unsigned int v61 = *(unsigned __int16 *)(v11 + 832);
                unsigned int v110 = v61 & 0x7000;
                if (v110 == 12288)
                {
                  unsigned int v61 = v61 & 0xFFFF8FFF | 0x2000;
                  *(_WORD *)(v11 + 832) = v61;
                }
                unsigned int v62 = v61 >> 12;
                if ((v62 & 4) != 0) {
                  char v63 = 0;
                }
                else {
                  char v63 = 0x1E1F1400u >> (8 * (v62 & 7));
                }
                *(unsigned char *)(v56 + 73) = *(unsigned char *)(v56 + 73) & 0xC0 | v63;
                *(void *)&v124[0] = CA::OGL::Context::set_gstate(v11, (uint64_t)v124);
                CA::OGL::Context::push_surface(v11, (uint64_t)v57, 1u, 256, 0);
                WORD2(v126) &= ~0x400u;
                if ((v31 & 2) != 0)
                {
                  if (v109) {
                    char v64 = 18;
                  }
                  else {
                    char v64 = 12;
                  }
                  uint64_t v65 = *(void *)(v11 + 16);
                  *(unsigned char *)(v65 + 480) = v64;
                  *(unsigned char *)(v65 + 481) |= 1u;
                }
                int v66 = v33 & 3 | v109;
                BOOL v67 = v66 == 0;
                if (v66)
                {
                  *(void *)(*(void *)(v11 + 16) + 8) = 0x3C003C003C003C00;
                  (*(void (**)(CA::CG::DrawOp *, float64x2_t *))(*(void *)this + 160))(this, a2);
                }
                else
                {
                  *(void *)(*(void *)(v11 + 16) + 8) = *((void *)this + 11);
                  (*(void (**)(CA::CG::DrawOp *, float64x2_t *))(*(void *)this + 176))(this, a2);
                }
                *(unsigned char *)(*(void *)(v11 + 16) + 481) |= 1u;
                __int16 v90 = WORD2(v126);
                if ((v31 & 2) != 0) {
                  *(unsigned char *)(*(void *)(v11 + 16) + 480) = BYTE4(v126);
                }
                WORD2(v126) = v90 | 0x400;
                if ((v33 & 1) == 0 && v66)
                {
                  *(void *)(*(void *)(v11 + 16) + 8) = *((void *)this + 11);
                  (*(void (**)(CA::CG::DrawOp *, float64x2_t *))(*(void *)this + 168))(this, a2);
                  *(unsigned char *)(*(void *)(v11 + 16) + 481) |= 1u;
                  BOOL v67 = 1;
                }
                if (v120) {
                  CA::CG::ClipOp::draw((CA::CG::ClipOp *)&v117, (CA::CG::Renderer *)a2);
                }
                *(unsigned char *)(*(void *)(v11 + 16) + 481) &= ~1u;
                CA::OGL::Context::pop_surface((CA::OGL::Context *)v11);
                CA::OGL::Context::set_gstate(v11, **(void **)(v11 + 248));
                *(_WORD *)(v11 + 832) = *(_WORD *)(v11 + 832) & 0x8FFF | v110;
                char v91 = v112;
                if (v112 >= 0x1A) {
                  CA::CG::Renderer::prepare_destination((uint64_t)a2);
                }
                uint64_t v92 = *(void *)(v11 + 16);
                *(unsigned char *)(v92 + 480) = v91;
                *(unsigned char *)(v92 + 481) |= 1u;
                *(void *)(*(void *)(v11 + 16) + 8) = 0x3C003C003C003C00;
                if (v67)
                {
                  unsigned int v93 = 1;
                }
                else
                {
                  *(void *)(*(void *)(v11 + 16) + 8) = *((void *)this + 11);
                  unsigned int v93 = 11;
                }
                int8x16_t v114 = 0uLL;
                CA::OGL::emit_combine(v11, v93, v57, 0, v113, (unsigned int *)&v114);
                *(unsigned char *)(*(void *)(v11 + 16) + 481) &= ~1u;
                *(unsigned char *)(*(void *)(v11 + 16) + 480) = *(unsigned char *)(*(void *)(v11 + 248) + 68);
                uint64_t v87 = v11;
                uint64_t v88 = (uint64_t)v57;
                goto LABEL_130;
              }
              goto LABEL_131;
            }
            BOOL v45 = (v34 & 4 | v33 & 1) == 0;
            if (v34 & 4 | v33 & 1) {
              unsigned int v46 = 10248;
            }
            else {
              unsigned int v46 = 8200;
            }
            if (v38) {
              uint64_t v47 = v46;
            }
            else {
              uint64_t v47 = 8200;
            }
            uint64_t v48 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t))(*(void *)v11 + 656))(v11, 1, &v117, v47);
            BOOL v51 = (_DWORD *)v48;
            unsigned int v52 = *(unsigned __int16 *)(v11 + 832);
            unsigned int v53 = (v52 >> 12) & 7;
            if (v48)
            {
              if (v53 == 3)
              {
                *(_WORD *)(v11 + 832) = v52 & 0x8FFF | 0x2000;
                LOBYTE(v54) = 31;
              }
              else if (v53 > 3)
              {
                LOBYTE(v54) = 0;
              }
              else
              {
                unsigned int v54 = 0x1E1F1400u >> (8 * v53);
              }
              *(unsigned char *)(v48 + 73) = *(unsigned char *)(v48 + 73) & 0xC0 | v54;
              uint64_t v126 = 0;
              memset(v125, 0, sizeof(v125));
              memset(v124, 0, sizeof(v124));
              uint64_t v68 = *(void *)(v11 + 248);
              uint64_t v69 = *(void *)(v68 + 32);
              *((void *)&v124[1] + 1) = *(void *)(v68 + 24);
              *(void *)&v125[0] = v69;
              *(_OWORD *)((char *)v125 + 8) = *(_OWORD *)(v68 + 40);
              *((void *)&v125[1] + 1) = *(void *)(v68 + 56);
              WORD2(v126) = *(unsigned __int8 *)(v68 + 68);
              LODWORD(v126) = *(_DWORD *)(v68 + 64);
              LOWORD(v69) = *(_WORD *)(v68 + 68) & 0x100;
              WORD2(v126) |= v69;
              LOWORD(v68) = v69 | *(_WORD *)(v68 + 68) & 0x400;
              *((void *)&v124[0] + 1) = v113;
              *(void *)&v124[1] = v37;
              WORD2(v126) = v68 | 0xF;
              *(void *)&v124[0] = CA::OGL::Context::set_gstate(v11, (uint64_t)v124);
              CA::OGL::Context::push_surface(v11, (uint64_t)v51, 1u, 256, 0);
              WORD2(v126) &= ~0x400u;
              if ((v31 & 2) != 0)
              {
                if (v109) {
                  char v70 = 18;
                }
                else {
                  char v70 = 12;
                }
                uint64_t v71 = *(void *)(v11 + 16);
                *(unsigned char *)(v71 + 480) = v70;
                *(unsigned char *)(v71 + 481) |= 1u;
              }
              *(void *)(*(void *)(v11 + 16) + 8) = 0x3C003C003C003C00;
              (*(void (**)(CA::CG::DrawOp *, float64x2_t *))(*(void *)this + 160))(this, a2);
              __int16 v72 = WORD2(v126);
              if ((v31 & 2) != 0)
              {
                *(unsigned char *)(*(void *)(v11 + 16) + 481) &= ~1u;
                *(unsigned char *)(*(void *)(v11 + 16) + 480) = v72;
              }
              WORD2(v126) = v72 | 0x400;
              if (v120)
              {
                *(unsigned char *)(*(void *)(v11 + 16) + 481) |= 1u;
                CA::CG::ClipOp::draw((CA::CG::ClipOp *)&v117, (CA::CG::Renderer *)a2);
                *(unsigned char *)(*(void *)(v11 + 16) + 481) &= ~1u;
              }
              CA::OGL::Context::pop_surface((CA::OGL::Context *)v11);
              CA::OGL::Context::set_gstate(v11, **(void **)(v11 + 248));
            }
            if (v45)
            {
              uint64_t v73 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, void))(*(void *)v11 + 656))(v11, 1, &v117, v110);
              uint64_t v74 = v73;
              if (v73)
              {
                unsigned int v75 = *(unsigned __int16 *)(v11 + 832);
                BOOL v83 = v53 == 3;
                uint64_t v76 = v113;
                if (v83)
                {
                  unsigned int v75 = v75 & 0xFFFF8FFF | 0x2000;
                  *(_WORD *)(v11 + 832) = v75;
                }
                unsigned int v77 = v75 >> 12;
                if ((v77 & 4) != 0) {
                  char v78 = 0;
                }
                else {
                  char v78 = 0x1E1F1400u >> (8 * (v77 & 7));
                }
                *(unsigned char *)(v73 + 73) = *(unsigned char *)(v73 + 73) & 0xC0 | v78;
                uint64_t v126 = 0;
                memset(v125, 0, sizeof(v125));
                memset(v124, 0, sizeof(v124));
                uint64_t v79 = *(void *)(v11 + 248);
                *(_OWORD *)((char *)v124 + 8) = *(_OWORD *)(v79 + 8);
                uint64_t v80 = *(void *)(v79 + 24);
                uint64_t v81 = *(void *)(v79 + 32);
                *(_OWORD *)((char *)v125 + 8) = *(_OWORD *)(v79 + 40);
                uint64_t v82 = *(void *)(v79 + 56);
                *((void *)&v124[1] + 1) = v80;
                *(void *)&v125[0] = v81;
                *((void *)&v125[1] + 1) = v82;
                LOWORD(v81) = *(unsigned __int8 *)(v79 + 68);
                WORD2(v126) = v81;
                LODWORD(v126) = *(_DWORD *)(v79 + 64);
                WORD2(v126) = *(_WORD *)(v79 + 68) & 0x100 | v81;
                WORD2(v126) |= *(_WORD *)(v79 + 68) & 0x400;
                *((void *)&v124[0] + 1) = v76;
                *(void *)&v124[0] = CA::OGL::Context::set_gstate(v11, (uint64_t)v124);
                CA::OGL::Context::push_surface(v11, v74, 0, 2, 0);
                *(void *)(*(void *)(v11 + 16) + 8) = *((void *)this + 11);
                (*(void (**)(CA::CG::DrawOp *, float64x2_t *))(*(void *)this + 168))(this, a2);
                CA::OGL::Context::pop_surface((CA::OGL::Context *)v11);
                CA::OGL::Context::set_gstate(v11, **(void **)(v11 + 248));
LABEL_109:
                *(_WORD *)(v11 + 832) = *(_WORD *)(v11 + 832) & 0x8FFF | v52 & 0x7000;
                if (v51) {
                  BOOL v83 = v74 == 0;
                }
                else {
                  BOOL v83 = 1;
                }
                if (v83)
                {
                  if (v51)
                  {
                    if (v112)
                    {
                      if ((LOBYTE(a2[261].f64[0]) & 2) == 0)
                      {
                        float64_t v84 = a2->f64[1];
                        if (v84 != 0.0)
                        {
                          LOBYTE(a2[261].f64[0]) |= 2u;
                          (*(void (**)(float64_t))(**(void **)&v84 + 760))(COERCE_FLOAT64_T(*(void *)&v84));
                        }
                      }
                      *(void *)(*(void *)(v11 + 16) + 8) = *((void *)this + 11);
                      *(unsigned char *)(*(void *)(v11 + 16) + 480) = v112;
                      v124[0] = 0uLL;
                      CA::OGL::emit_combine(v11, 0x10u, v51, 0, v76, (unsigned int *)v124);
                    }
                    else
                    {
                      uint64_t v86 = *(void *)(v11 + 16);
                      *(unsigned char *)(v86 + 480) = 9;
                      *(unsigned char *)(v86 + 481) |= 1u;
                      v124[0] = 0uLL;
                      CA::OGL::emit_combine(v11, 1u, v51, 0, v76, (unsigned int *)v124);
                      *(unsigned char *)(*(void *)(v11 + 16) + 481) &= ~1u;
                    }
                    *(unsigned char *)(*(void *)(v11 + 16) + 480) = *(unsigned char *)(*(void *)(v11 + 248) + 68);
                  }
                  if (!v74)
                  {
LABEL_128:
                    if (v51)
                    {
                      uint64_t v87 = v11;
                      uint64_t v88 = (uint64_t)v51;
LABEL_130:
                      CA::OGL::Context::release_surface(v87, v88);
                    }
LABEL_131:
                    if (byte_1EB2ACC6A)
                    {
                      *(unsigned char *)(*(void *)(v11 + 16) + 481) |= 1u;
                      *(unsigned char *)(*(void *)(v11 + 16) + 480) = 3;
                      if (SDWORD2(v117) <= SHIDWORD(v117)) {
                        int v98 = HIDWORD(v117);
                      }
                      else {
                        int v98 = DWORD2(v117);
                      }
                      v49.i32[0] = 1073741822;
                      v50.i32[0] = v98;
                      v99.i64[0] = (int)v117;
                      v99.i64[1] = SDWORD1(v117);
                      int8x16_t v100 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v50, v49), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v99));
                      double v101 = (double)SDWORD2(v117);
                      double v102 = (double)SHIDWORD(v117);
                      if (v98 > 1073741822)
                      {
                        double v101 = 1.79769313e308;
                        double v102 = 1.79769313e308;
                      }
                      int8x16_t v114 = v100;
                      double v115 = v101;
                      double v116 = v102;
                      *(void *)&v124[0] = &v114;
                      *((void *)&v124[0] + 1) = &CA::identity_transform;
                      v124[1] = 0u;
                      v125[0] = 0u;
                      float64x2_t v103 = (double *)(*(uint64_t (**)(CA::CG::DrawOp *))(*(void *)this + 120))(this);
                      CA::OGL::fill_color_rect(v11, (uint64_t)v124, v103, v104, v105, v106);
                      *(unsigned char *)(*(void *)(v11 + 16) + 481) &= ~1u;
                    }
                    if (v37)
                    {
                      do
                      {
                        v89 = (void *)*v37;
                        free(v37);
                        float v37 = v89;
                      }
                      while (v89);
                    }
LABEL_134:
                    if (*((void *)&v118 + 1)) {
                      (*(void (**)(void))(**((void **)&v118 + 1) + 8))(*((void *)&v118 + 1));
                    }
                    if ((void)v119) {
                      (*(void (**)(void))(*(void *)v119 + 8))(v119);
                    }
                    if ((void)v118) {
                      CA::Shape::unref((CA::Shape *)v118);
                    }
                    return;
                  }
                }
                else
                {
                  if ((LOBYTE(a2[261].f64[0]) & 2) == 0)
                  {
                    float64_t v85 = a2->f64[1];
                    if (v85 != 0.0)
                    {
                      LOBYTE(a2[261].f64[0]) |= 2u;
                      (*(void (**)(float64_t))(**(void **)&v85 + 760))(COERCE_FLOAT64_T(*(void *)&v85));
                    }
                  }
                  *(unsigned char *)(*(void *)(v11 + 16) + 480) = v112;
                  v124[0] = 0uLL;
                  CA::OGL::emit_combine(v11, 0x11u, v51, v74, v76, (unsigned int *)v124);
                  *(unsigned char *)(*(void *)(v11 + 16) + 480) = *(unsigned char *)(*(void *)(v11 + 248) + 68);
                }
                CA::OGL::Context::release_surface(v11, v74);
                goto LABEL_128;
              }
            }
            else
            {
              uint64_t v74 = 0;
            }
            uint64_t v76 = v113;
            goto LABEL_109;
          }
          uint64_t v55 = 0;
          while ((*(unsigned int (**)(void))(**(void **)(*((void *)&v119 + 1) + 8 * v55) + 16))(*(void *)(*((void *)&v119 + 1) + 8 * v55)) != 6)
          {
            if (++v55 >= v120) {
              goto LABEL_71;
            }
          }
        }
        int v38 = 0;
        unsigned int v110 = 8207;
        goto LABEL_34;
      }
    }
  }
}

void CA::CG::FillRects::draw_shape_and_color(CA::CG::FillRects *this, CA::CG::Renderer *a2, double *a3)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 10))
  {
    uint64_t v5 = *((void *)a2 + 1);
    if ((*((unsigned char *)this + 100) & 4) != 0) {
      int64x2_t v6 = (char *)a2 + 88;
    }
    else {
      int64x2_t v6 = (char *)a2 + 32;
    }
    uint64_t v7 = *((void *)this + 14);
    if (v7 == 1)
    {
      double v9 = *((double *)this + 15);
      double v8 = *((double *)this + 16);
      v33[0].f64[0] = v9;
      v33[0].f64[1] = v8;
      double v11 = *((double *)this + 17);
      double v10 = *((double *)this + 18);
      v33[1].f64[0] = v11;
      v33[1].f64[1] = v10;
      if (v11 < 0.0)
      {
        v33[0].f64[0] = v11 + v9;
        v33[1].f64[0] = -v11;
      }
      if (v10 < 0.0)
      {
        v33[0].f64[1] = v10 + v8;
        v33[1].f64[1] = -v10;
      }
      CA::Mat2Impl::mat2_apply_to_rect((uint64_t)v6, v33[0].f64, a3);
      int64x2_t v12 = vceqzq_f64(v33[1]);
      if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v12, 1), (int8x16_t)v12).u64[0] & 0x8000000000000000) != 0
        || (int8x16_t v13 = vorrq_s8((int8x16_t)vcltzq_f64(v33[1]), (int8x16_t)vcgezq_f64(v33[1])),
            (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v13), 1), v13).u64[0] & 0x8000000000000000) != 0))
      {
        v32[0] = 0;
        v32[1] = 0;
      }
      else
      {
        int32x4_t v14 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v33[0], (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
        *(int32x4_t *)char v32 = vuzp1q_s32(v14, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v33[0], v33[1]), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v14));
      }
      double v26 = (CA::Shape *)CA::Shape::intersect(*(CA::Shape **)(*(void *)(v5 + 248) + 8), (const CA::Bounds *)v32);
    }
    else
    {
      uint64_t v31 = 1;
      if (v7)
      {
        unint64_t v16 = 0;
        int32x2_t v17 = (double *)((char *)this + 144);
        float64x2_t v29 = (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL);
        float64x2_t v30 = (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000);
        do
        {
          double v19 = *(v17 - 3);
          double v18 = *(v17 - 2);
          v33[0].f64[0] = v19;
          v33[0].f64[1] = v18;
          double v21 = *(v17 - 1);
          double v20 = *v17;
          v33[1].f64[0] = v21;
          v33[1].f64[1] = v20;
          if (v21 < 0.0)
          {
            v33[0].f64[0] = v21 + v19;
            v33[1].f64[0] = -v21;
          }
          if (v20 < 0.0)
          {
            v33[0].f64[1] = v20 + v18;
            v33[1].f64[1] = -v20;
          }
          CA::Mat2Impl::mat2_apply_to_rect((uint64_t)v6, v33[0].f64, a3);
          int64x2_t v23 = vceqzq_f64(v33[1]);
          if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v23, 1), (int8x16_t)v23).u64[0] & 0x8000000000000000) != 0
            || (int8x16_t v24 = vorrq_s8((int8x16_t)vcltzq_f64(v33[1]), (int8x16_t)vcgezq_f64(v33[1])),
                (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v24), 1), v24).u64[0] & 0x8000000000000000) != 0))
          {
            v32[0] = 0;
            v32[1] = 0;
          }
          else
          {
            int32x4_t v25 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v33[0], v30));
            *(int32x4_t *)char v32 = vuzp1q_s32(v25, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v33[0], v33[1]), v29)), (int64x2_t)v25));
          }
          CA::shape_union((CA::Shape **)&v31, v32, v22);
          ++v16;
          v17 += 4;
        }
        while (v16 < *((void *)this + 14));
      }
      CA::shape_intersect((CA *)&v31, *(void *)(*(void *)(v5 + 248) + 8), (const CA::Shape *)a3);
      double v26 = (CA::Shape *)v31;
    }
    uint64_t v34 = 0;
    memset(&v33[2], 0, 32);
    memset(v33, 0, 32);
    uint64_t v27 = *(void *)(v5 + 248);
    *(float64x2_t *)((char *)v33 + 8) = *(float64x2_t *)(v27 + 8);
    float64_t v28 = *(double *)(v27 + 32);
    v33[1].f64[1] = *(float64_t *)(v27 + 24);
    v33[2].f64[0] = v28;
    *(float64x2_t *)((char *)&v33[2] + 8) = *(float64x2_t *)(v27 + 40);
    v33[3].f64[1] = *(float64_t *)(v27 + 56);
    LOWORD(v28) = *(_WORD *)(v27 + 68);
    LODWORD(v34) = *(_DWORD *)(v27 + 64);
    HIDWORD(v34) = LOWORD(v28) & 0x5FF;
    *(void *)&v33[0].f64[1] = v26;
    *(void *)&v33[0].f64[0] = CA::OGL::Context::set_gstate(v5, (uint64_t)v33);
    (*(void (**)(CA::CG::FillRects *, CA::CG::Renderer *))(*(void *)this + 168))(this, a2);
    CA::OGL::Context::set_gstate(v5, **(void **)(v5 + 248));
    if (v26) {
      CA::Shape::unref(v26);
    }
  }
  else
  {
    int32x2_t v15 = *(void (**)(void))(*(void *)this + 160);
    v15();
  }
}

void CA::CG::FillRects::compute_dod(CA::CG::FillRects *this, float64x2_t *a2)
{
  CA::Rect::operator=(a2->f64, (double *)this + 15);
  unint64_t v5 = *((void *)this + 14);
  if (v5 >= 2)
  {
    float64x2_t v6 = *a2;
    float64x2_t v7 = a2[1];
    double v8 = (int8x16_t *)((char *)this + 168);
    unint64_t v9 = v5 - 1;
    v4.f64[0] = 0.0;
    while (1)
    {
      int8x16_t v10 = v8[-1];
      int8x16_t v11 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v4, *(float64x2_t *)v8).i64[0], 0);
      v12.i64[1] = v8->i64[1];
      *(double *)v12.i64 = -*(double *)v8->i64;
      int8x16_t v13 = vbslq_s8(v11, v12, *v8);
      v12.i64[0] = 0x8000000000000000;
      v11.i64[0] = *(_OWORD *)&vaddq_f64((float64x2_t)v10, (float64x2_t)vbslq_s8(v11, *v8, v12));
      v12.i64[0] = v11.i64[0];
      v12.i64[1] = v8[-1].i64[1];
      int8x16_t v14 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v4, (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)v8, 1)).i64[0], 0);
      v11.i64[1] = *(void *)&vaddq_f64(*(float64x2_t *)v8, *(float64x2_t *)&v10).f64[1];
      v10.i64[0] = v13.i64[0];
      v10.i64[1] = *(void *)&vnegq_f64(*(float64x2_t *)v8).f64[1];
      float64x2_t v15 = (float64x2_t)vbslq_s8(v14, v11, v12);
      float64x2_t v16 = (float64x2_t)vbslq_s8(v14, v10, v13);
      int64x2_t v17 = vclezq_f64(v7);
      int64x2_t v18 = vclezq_f64(v16);
      int32x2_t v19 = vmovn_s64(vcltzq_s64((int64x2_t)vorrq_s8((int8x16_t)vzip1q_s64(v18, v17), (int8x16_t)vzip2q_s64(v18, v17))));
      if (v19.i8[4]) {
        break;
      }
      if ((v19.i8[0] & 1) == 0)
      {
        float64x2_t v20 = vaddq_f64(v15, v16);
        float64x2_t v15 = vminnmq_f64(v6, v15);
        float64x2_t v16 = vsubq_f64(vmaxnmq_f64(vaddq_f64(v6, v7), v20), v15);
LABEL_8:
        *a2 = v15;
        a2[1] = v16;
        float64x2_t v7 = v16;
        float64x2_t v6 = v15;
      }
LABEL_9:
      v8 += 2;
      if (!--v9) {
        goto LABEL_10;
      }
    }
    if (v19.i8[0]) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_10:
  if ((*((unsigned char *)this + 100) & 4) == 0)
  {
    CA::Rect::apply_transform(a2, (const CGAffineTransform *)((char *)this + 8));
  }
}

BOOL CA::CG::FillRects::shape_type(CA::CG::FillRects *this, CA::CG::Renderer *a2)
{
  return (*((unsigned char *)this + 103) & 1) == 0
      && CA::CG::rects_intersect((CA::CG::FillRects *)((char *)this + 120), *((const CGRect **)this + 14), 0.0);
}

void CA::CG::FillRects::draw_shape(CA::CG::FillRects *this, CA::CG::Renderer *a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)a2 + 1);
  int v4 = *((_DWORD *)this + 25);
  uint64_t v5 = 88;
  if ((v4 & 4) == 0) {
    uint64_t v5 = 32;
  }
  uint64_t v31 = v5;
  if ((v4 & 4) != 0) {
    float64x2_t v6 = (double *)((char *)a2 + 88);
  }
  else {
    float64x2_t v6 = (double *)((char *)a2 + 32);
  }
  unsigned int v29 = CA::CG::mat2_filter_bits((uint64_t)v6);
  float64x2_t v30 = a2;
  if ((v4 & 1) == 0) {
    goto LABEL_7;
  }
  if ((*((unsigned char *)a2 + 136) & 4) == 0) {
    goto LABEL_13;
  }
  if (fabs(v6[1]) < 0.000001 && fabs(v6[2]) < 0.000001)
  {
LABEL_7:
    BOOL v12 = 0;
    goto LABEL_14;
  }
  if (fabs(*(double *)((char *)a2 + v31)) < 0.000001) {
    BOOL v12 = fabs(v6[3]) >= 0.000001;
  }
  else {
LABEL_13:
  }
    BOOL v12 = 1;
LABEL_14:
  int8x16_t v13 = this;
  if (*((void *)this + 14))
  {
    uint64_t v14 = 0;
    short float v15 = *(short float *)(*(void *)(v3 + 16) + 14);
    for (uint64_t i = (double *)((char *)this + 144); ; i += 4)
    {
      v10.i64[0] = *(uint64_t *)(i - 3);
      v9.i64[0] = *(uint64_t *)(i - 2);
      uint64_t v33 = v10.i64[0];
      uint64_t v34 = v9.i64[0];
      double v17 = *(i - 1);
      v8.i64[0] = *(uint64_t *)i;
      double v35 = v17;
      uint64_t v36 = v8.i64[0];
      if (v17 < 0.0)
      {
        *(double *)v10.i64 = v17 + *(double *)v10.i64;
        double v17 = -v17;
        uint64_t v33 = v10.i64[0];
        double v35 = v17;
      }
      if (*(double *)v8.i64 < 0.0)
      {
        *(double *)v9.i64 = *(double *)v8.i64 + *(double *)v9.i64;
        *(double *)v8.i64 = -*(double *)v8.i64;
        uint64_t v34 = v9.i64[0];
        uint64_t v36 = v8.i64[0];
      }
      if (v17 <= *(double *)v8.i64) {
        double v18 = *(double *)v8.i64;
      }
      else {
        double v18 = v17;
      }
      v7.i64[0] = 0x7FEFFFFFFFFFFFFFLL;
      if (v18 < 1.79769313e308) {
        int v19 = CA::CG::rect_filter_bits((uint64_t)&v33, v6, v29, v7, v8, v9, v10, v11);
      }
      else {
        int v19 = 0;
      }
      int v20 = 0;
      if (v12 && (v19 & 9) != 0) {
        int v21 = 255;
      }
      else {
        int v21 = 0;
      }
      uint64_t v22 = *(void *)(v3 + 16);
      if (*(unsigned char *)(v22 + 481))
      {
        unsigned int v23 = *(unsigned __int8 *)(v22 + 480);
        if (v23 < 2 || v23 == 3 && v15 == COERCE_SHORT_FLOAT(COERCE_UNSIGNED_INT(1.0)) && (!v12 || (v19 & 9) == 0))
        {
          *(unsigned char *)(v22 + 481) &= ~1u;
          int v20 = 1;
        }
        else
        {
          int v20 = 0;
        }
      }
      if (v18 >= 1.79769313e308) {
        break;
      }
      int v25 = v19 | 0x100000;
      uint64_t v41 = 0;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v38 = 0u;
      double v26 = *(double *)((char *)v30 + v31);
      memset(v37, 0, sizeof(v37));
      CA::Transform::set_affine((CA::Transform *)v37, v26, v6[1], v6[2], v6[3], v6[4], v6[5]);
      *((void *)&v38 + 1) = &v33;
      *(void *)&long long v39 = v37;
      *((void *)&v39 + 1) = __PAIR64__(v21, v25);
      int8x16_t v13 = this;
      uint64_t v41 = 0;
      long long v40 = 0uLL;
      CA::OGL::fill_rect(v3, (uint64_t)&v38 + 8, v27, v28);
      if (v20) {
        goto LABEL_39;
      }
LABEL_40:
      if ((unint64_t)++v14 >= *((void *)v13 + 14)) {
        return;
      }
    }
    int8x16_t v24 = *(CA::Shape **)(*(void *)(v3 + 248) + 8);
    v37[0] = 0uLL;
    CA::OGL::emit_combine(v3, 0, 0, 0, v24, (unsigned int *)v37);
    if (!v20) {
      goto LABEL_40;
    }
LABEL_39:
    *(unsigned char *)(*(void *)(v3 + 16) + 481) |= 1u;
    goto LABEL_40;
  }
}

uint64_t CA::CG::rect_filter_bits(uint64_t a1, double *a2, uint64_t a3, int8x16_t a4, int8x16_t a5, int8x16_t a6, int8x16_t a7, int8x16_t a8)
{
  if ((~a3 & 9) == 0) {
    return a3;
  }
  a6.i64[0] = *(void *)a1;
  double v8 = *(double *)(a1 + 8);
  double v9 = *(double *)(a1 + 24);
  *(double *)a7.i64 = *(double *)(a1 + 16) + *(double *)a1;
  double v10 = v9 + v8;
  if (!a3)
  {
    *(double *)a4.i64 = v9 + v8;
    a5.i64[0] = *(void *)(a1 + 8);
    goto LABEL_6;
  }
  double v11 = a2[1];
  double v12 = a2[3];
  double v13 = a2[5];
  *(double *)a5.i64 = v13 + v11 * *(double *)a6.i64 + v12 * v8;
  *(double *)a4.i64 = v13 + v11 * *(double *)a7.i64 + v12 * v10;
  if ((a3 & 1) == 0)
  {
    double v14 = a2[2];
    double v15 = a2[4];
    *(double *)a6.i64 = v15 + *a2 * *(double *)a6.i64 + v14 * v8;
    *(double *)a7.i64 = v15 + *a2 * *(double *)a7.i64 + v14 * v10;
LABEL_6:
    a8.i64[0] = 0.5;
    v16.f64[0] = NAN;
    v16.f64[1] = NAN;
    int8x16_t v17 = (int8x16_t)vnegq_f64(v16);
    double v18 = vabdd_f64(trunc(*(double *)vbslq_s8(v17, a8, a6).i64 + *(double *)a6.i64), *(double *)a6.i64);
    double v19 = vabdd_f64(trunc(*(double *)vbslq_s8(v17, a8, a7).i64 + *(double *)a7.i64), *(double *)a7.i64);
    if (v18 <= v19) {
      double v18 = v19;
    }
    a3 = (v18 >= 0.001) | a3;
  }
  if ((a3 & 8) == 0)
  {
    a6.i64[0] = 0.5;
    v20.f64[0] = NAN;
    v20.f64[1] = NAN;
    int8x16_t v21 = (int8x16_t)vnegq_f64(v20);
    double v22 = vabdd_f64(trunc(*(double *)vbslq_s8(v21, a6, a5).i64 + *(double *)a5.i64), *(double *)a5.i64);
    double v23 = vabdd_f64(trunc(*(double *)vbslq_s8(v21, a6, a4).i64 + *(double *)a4.i64), *(double *)a4.i64);
    if (v22 > v23) {
      double v23 = v22;
    }
    if (v23 >= 0.001) {
      return a3 | 8;
    }
    else {
      return a3;
    }
  }
  return a3;
}

uint64_t CA::CG::FillRects::color_type(CA::CG::FillRects *this, CA::CG::Renderer *a2, double *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)this + 10);
  unsigned int v4 = 9;
  if (v3)
  {
    if (*((_DWORD *)this + 14)) {
      unsigned int v4 = 10;
    }
    else {
      unsigned int v4 = 9;
    }
  }
  if (*((short float *)this + 47) == COERCE_SHORT_FLOAT(COERCE_UNSIGNED_INT(1.0)) && v3 == 0) {
    uint64_t v6 = v4 | 4;
  }
  else {
    uint64_t v6 = v4;
  }
  if ((v6 & 2) != 0)
  {
    if (!v3) {
      return v6 & 0xD;
    }
    uint64_t v7 = 88;
    if ((*((_DWORD *)this + 25) & 4) != 0)
    {
      double v8 = (double *)((char *)a2 + 88);
    }
    else
    {
      uint64_t v7 = 32;
      double v8 = (double *)((char *)a2 + 32);
    }
    if ((fabs(v8[1]) >= 0.000001 || fabs(v8[2]) >= 0.000001)
      && (fabs(*(double *)((char *)a2 + v7)) >= 0.000001 || fabs(v8[3]) >= 0.000001))
    {
      return v6;
    }
    uint64_t v9 = *((void *)this + 14);
    if (!v9) {
      return v6 & 0xD;
    }
    for (uint64_t i = (double *)((char *)this + 144); ; i += 4)
    {
      double v12 = *(i - 3);
      double v11 = *(i - 2);
      double v16 = v12;
      double v17 = v11;
      double v14 = *(i - 1);
      double v13 = *i;
      double v18 = v14;
      double v19 = v13;
      if (v14 < 0.0)
      {
        double v16 = v14 + v12;
        double v18 = -v14;
      }
      if (v13 < 0.0)
      {
        double v17 = v13 + v11;
        double v19 = -v13;
      }
      CA::Mat2Impl::mat2_apply_to_rect((uint64_t)v8, &v16, a3);
      if (v16 != trunc(v16) || v17 != trunc(v17) || v18 != trunc(v18) || v19 != trunc(v19)) {
        break;
      }
      if (!--v9) {
        return v6 & 0xD;
      }
    }
  }
  return v6;
}

uint64_t CA::CG::DrawOp::may_flush()
{
  return 0;
}

double CA::Rect::operator=(double *a1, double *a2)
{
  double v3 = *a2;
  double result = a2[1];
  *a1 = *a2;
  a1[1] = result;
  double v5 = a2[2];
  double v4 = a2[3];
  a1[2] = v5;
  a1[3] = v4;
  if (v5 < 0.0)
  {
    *a1 = v5 + v3;
    a1[2] = -v5;
  }
  if (v4 < 0.0)
  {
    a1[1] = v4 + result;
    double result = -v4;
    a1[3] = -v4;
  }
  return result;
}

float64x2_t *CA::Rect::apply_transform(float64x2_t *this, const CGAffineTransform *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  float64x2_t v2 = this[1];
  double v3 = this[1].f64[1];
  if (v2.f64[0] <= v3) {
    double v4 = this[1].f64[1];
  }
  else {
    double v4 = this[1].f64[0];
  }
  if (v4 < 1.79769313e308)
  {
    double b = a2->b;
    double c = a2->c;
    if (b == 0.0 && c == 0.0)
    {
      float64x2_t v7 = *(float64x2_t *)&a2->a;
      v7.f64[1] = a2->d;
      float64x2_t v8 = vmlaq_f64(*(float64x2_t *)&a2->tx, *this, v7);
      float64x2_t v9 = vmlaq_f64(*(float64x2_t *)&a2->tx, vaddq_f64(*this, v2), v7);
      int8x16_t v10 = (int8x16_t)vcgtq_f64(v8, v9);
      float64x2_t v11 = (float64x2_t)vbslq_s8(v10, (int8x16_t)v9, (int8x16_t)v8);
      float64x2_t v12 = vsubq_f64((float64x2_t)vbslq_s8(v10, (int8x16_t)v8, (int8x16_t)v9), v11);
    }
    else
    {
      uint64_t v13 = 0;
      double v14 = this->f64[1];
      v33.f64[0] = this->f64[0];
      v33.f64[1] = v14;
      v34.f64[0] = v2.f64[0] + v33.f64[0];
      v34.f64[1] = v14;
      v35.f64[0] = v2.f64[0] + v33.f64[0];
      v35.f64[1] = v3 + v14;
      v36.i64[0] = *(void *)&v33.f64[0];
      *(double *)&v36.i64[1] = v3 + v14;
      float64x2_t v15 = (float64x2_t)vdupq_lane_s64(*(void *)&a2->a, 0);
      float64x2_t v16 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&c, 0);
      float64x2_t v17 = (float64x2_t)vdupq_lane_s64(*(void *)&a2->tx, 0);
      float64x2_t v18 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&b, 0);
      float64x2_t v19 = (float64x2_t)vdupq_lane_s64(*(void *)&a2->d, 0);
      float64x2_t v20 = (float64x2_t)vdupq_lane_s64(*(void *)&a2->ty, 0);
      do
      {
        int8x16_t v21 = &v33.f64[v13];
        float64x2x2_t v38 = vld2q_f64(v21);
        v39.val[0] = vmlaq_f64(vmlaq_f64(v17, v16, v38.val[1]), v38.val[0], v15);
        v39.val[1] = vmlaq_f64(vmlaq_f64(v20, v18, v38.val[0]), v38.val[1], v19);
        vst2q_f64(v21, v39);
        v13 += 4;
      }
      while (v13 != 8);
      float64x2_t v22 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v34, v33), (int8x16_t)v33, (int8x16_t)v34);
      float64x2_t v23 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v33, v34), (int8x16_t)v33, (int8x16_t)v34);
      float64x2_t v24 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v36, v35), (int8x16_t)v35, v36);
      float64x2_t v25 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v35, (float64x2_t)v36), (int8x16_t)v35, v36);
      float64x2_t v26 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v24, v22), (int8x16_t)v22, (int8x16_t)v24);
      int64x2_t v27 = vcgtq_f64(v23, v25);
      float64x2_t v28 = vsubq_f64((float64x2_t)vbslq_s8((int8x16_t)v27, (int8x16_t)v23, (int8x16_t)v25), v26);
      v25.f64[0] = vaddvq_f64(v28);
      BOOL v29 = (*(void *)&v25.f64[0] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      *(void *)&v25.f64[0] &= ~0x8000000000000000;
      v27.i64[0] = 0x7FF0000000000000;
      float64x2_t v12 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s64(vcgtq_s64(v27, (int64x2_t)v25).i64[0], 0), (int8x16_t)v28, (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL));
      unsigned int v30 = v29;
      int32x2_t v31 = vdup_n_s32(v30);
      v32.i64[0] = v31.u32[0];
      v32.i64[1] = v31.u32[1];
      float64x2_t v11 = (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)v26, (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL));
    }
    *this = v11;
    this[1] = v12;
  }
  return this;
}

int32x2_t *CA::CG::ClipOp::ClipOp(int32x2_t *a1, uint64_t a2, uint64_t a3, int32x2_t *a4, uint64_t a5, double a6, double a7, double a8, int64x2_t a9, double a10, float64x2_t a11)
{
  uint64_t v169 = *MEMORY[0x1E4F143B8];
  *(int32x2_t *)&long long v12 = *a4;
  *a1 = *a4;
  int v13 = a4[1].i32[0];
  a1[1].i32[0] = v13;
  int v14 = a4[1].i32[1];
  a1[1].i32[1] = v14;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = (int32x2_t)a5;
  a1[6] = 0;
  if (v13 >= v14) {
    int v13 = v14;
  }
  if (v13 < 1) {
    return a1;
  }
  uint64_t v17 = *(void *)(a3 + 72);
  if (v17)
  {
    double v19 = *(double *)(v17 + 24);
    double v18 = *(double *)(v17 + 32);
    if (v19 <= v18) {
      double v20 = *(double *)(v17 + 32);
    }
    else {
      double v20 = *(double *)(v17 + 24);
    }
    if (v20 < 1.79769313e308)
    {
      float64x2_t v22 = (int8x16_t *)(v17 + 8);
      int8x16_t v153 = 0u;
      long long v154 = 0u;
      double v21 = *(double *)(a2 + 80);
      if (v21 != 1.0)
      {
        int8x16_t v23 = *v22;
        int8x16_t v153 = *v22;
        *(double *)&long long v154 = v19;
        *((double *)&v154 + 1) = v18;
        if (v19 < 1.79769313e308)
        {
          *(double *)v153.i64 = v21 * *(double *)v23.i64;
          *(double *)&long long v154 = v19 * v21;
        }
        if (v18 < 1.79769313e308)
        {
          *(double *)&v153.i64[1] = *(double *)&v23.i64[1] * v21;
          *((double *)&v154 + 1) = v18 * v21;
        }
        float64x2_t v22 = &v153;
      }
      a9 = (int64x2_t)v22[1];
      double v24 = *(double *)&v22[1].i64[1];
      if (*(double *)a9.i64 > v24) {
        double v24 = *(double *)v22[1].i64;
      }
      if (v24 < 1073741820.0)
      {
        v26.f64[0] = NAN;
        v26.f64[1] = NAN;
        a11 = vnegq_f64(v26);
        __asm { FMOV            V6.2D, #0.5 }
        int32x2_t v25 = vmovn_s64(vcvtq_s64_f64(vaddq_f64((float64x2_t)vbslq_s8((int8x16_t)a11, _Q6, *v22), *(float64x2_t *)v22)));
        int8x16_t v30 = (int8x16_t)vaddq_f64(*(float64x2_t *)v22, (float64x2_t)a9);
        a9 = vcvtq_s64_f64(vaddq_f64((float64x2_t)vbslq_s8((int8x16_t)a11, _Q6, v30), (float64x2_t)v30));
        *(int32x2_t *)a9.i8 = vsub_s32(vmovn_s64(a9), v25);
      }
      else
      {
        int32x2_t v25 = vdup_n_s32(0xE0000001);
        a9.i64[0] = 0xC0000000C0000000;
      }
      int32x2_t v31 = a1[1];
      uint32x2_t v32 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v31);
      if ((vpmax_u32(v32, v32).u32[0] & 0x80000000) != 0) {
        return a1;
      }
      uint32x2_t v33 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)a9.i8);
      *(uint32x2_t *)&a11.f64[0] = vpmax_u32(v33, v33);
      if ((LODWORD(a11.f64[0]) & 0x80000000) != 0) {
        goto LABEL_68;
      }
      int32x2_t v34 = vadd_s32(*(int32x2_t *)&v12, v31);
      *(int32x2_t *)&long long v12 = vmax_s32(*(int32x2_t *)&v12, v25);
      int32x2_t v35 = vsub_s32(vmin_s32(v34, vadd_s32(v25, *(int32x2_t *)a9.i8)), *(int32x2_t *)&v12);
      uint32x2_t v36 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v35);
      if ((vpmax_u32(v36, v36).u32[0] & 0x80000000) != 0) {
        goto LABEL_68;
      }
      *((int32x2_t *)&v12 + 1) = v35;
      *(_OWORD *)a1->i8 = v12;
    }
    else
    {
      double v21 = *(double *)(a2 + 80);
    }
    if (v21 == 1.0)
    {
      if ((CA::BoundsImpl::intersect(a1, *(int32x2_t *)(v17 + 40), *(int32x2_t *)(v17 + 48)) & 1) == 0) {
        return a1;
      }
      goto LABEL_39;
    }
    uint64_t v37 = *(void *)(v17 + 40);
    a9.i64[0] = *(void *)(v17 + 48);
    v38.i64[0] = (int)v37;
    v38.i64[1] = SHIDWORD(v37);
    int8x16_t v39 = (int8x16_t)vcvtq_f64_s64(v38);
    signed __int32 v40 = a9.i32[1];
    v38.i64[0] = a9.i32[0];
    v38.i64[1] = a9.i32[1];
    int64x2_t v41 = v38;
    if (a9.i32[0] > a9.i32[1]) {
      signed __int32 v40 = *(void *)(v17 + 48);
    }
    a9.i32[0] = v40;
    LODWORD(a11.f64[0]) = 1073741822;
    int8x16_t v42 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32((int32x4_t)a9, (int32x4_t)a11), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), v39);
    int32x2_t v43 = vdup_n_s32(v40 > 1073741822);
    v44.i64[0] = v43.u32[0];
    v44.i64[1] = v43.u32[1];
    int8x16_t v45 = (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    int8x16_t v46 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v44, 0x3FuLL)), v45, (int8x16_t)vcvtq_f64_s64(v41));
    v45.i64[0] = 0x7FEFFFFFFFFFFFFFLL;
    int8x16_t v47 = (int8x16_t)vdupq_lane_s64(vcgtq_f64((float64x2_t)v45, (float64x2_t)v46).i64[0], 0);
    v48.i64[1] = v42.i64[1];
    *(double *)v48.i64 = v21 * *(double *)v42.i64;
    float64x2_t v49 = (float64x2_t)vbslq_s8(v47, v48, v42);
    v48.i64[1] = v46.i64[1];
    *(double *)v48.i64 = v21 * *(double *)v46.i64;
    float64x2_t v50 = (float64x2_t)vbslq_s8(v47, v48, v46);
    if (v50.f64[1] < 1.79769313e308)
    {
      v49.f64[1] = vmuld_lane_f64(v21, v49, 1);
      v50.f64[1] = v50.f64[1] * v21;
    }
    int64x2_t v51 = vceqzq_f64(v50);
    unint64_t v52 = vorrq_s8((int8x16_t)vdupq_laneq_s64(v51, 1), (int8x16_t)v51).u64[0];
    int8x16_t v53 = 0uLL;
    if ((v52 & 0x8000000000000000) == 0)
    {
      int8x16_t v54 = vorrq_s8((int8x16_t)vcltzq_f64(v50), (int8x16_t)vcgezq_f64(v50));
      if ((vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v54), 1), v54).u64[0] & 0x8000000000000000) == 0)
      {
        int32x4_t v55 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v49, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
        int8x16_t v53 = (int8x16_t)vuzp1q_s32(v55, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v49, v50), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v55));
      }
    }
    int32x2_t v56 = a1[1];
    uint32x2_t v57 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v56);
    if ((vpmax_u32(v57, v57).u32[0] & 0x80000000) != 0) {
      return a1;
    }
    int32x2_t v58 = (int32x2_t)vextq_s8(v53, v53, 8uLL).u64[0];
    uint32x2_t v59 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v58);
    if ((vpmax_u32(v59, v59).u32[0] & 0x80000000) == 0)
    {
      int32x2_t v60 = vadd_s32(*(int32x2_t *)&v12, v56);
      *(int32x2_t *)&long long v12 = vmax_s32(*(int32x2_t *)&v12, *(int32x2_t *)v53.i8);
      int32x2_t v61 = vsub_s32(vmin_s32(v60, vadd_s32(*(int32x2_t *)v53.i8, v58)), *(int32x2_t *)&v12);
      uint32x2_t v62 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v61);
      if ((vpmax_u32(v62, v62).u32[0] & 0x80000000) == 0)
      {
        *((int32x2_t *)&v12 + 1) = v61;
        *(_OWORD *)a1->i8 = v12;
LABEL_39:
        if ((*(unsigned char *)(a3 + 100) & 0x20) == 0 && *(_DWORD *)(v17 + 4))
        {
          unsigned int v63 = 0;
          do
          {
            uint64_t v64 = v17 + 56 + 104 * (int)v63;
            int v65 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int32x2_t *))(*(void *)v64 + 24))(v64, a2, a3, a1);
            if (v65 == 2)
            {
              int32x2_t v66 = a1[5];
              int32x2_t v67 = a1[6];
              a1[6] = (int32x2_t)(*(void *)&v67 + 1);
              *(void *)(*(void *)&v66 + 8 * *(void *)&v67) = v64;
            }
            else if (v65 == 1)
            {
              goto LABEL_127;
            }
            ++v63;
          }
          while (v63 < *(_DWORD *)(v17 + 4));
        }
        goto LABEL_47;
      }
    }
LABEL_68:
    a1[1] = 0;
    return a1;
  }
LABEL_47:
  if (*(void *)(a3 + 64))
  {
    CGSoftMaskGetBounds();
    double v72 = v68;
    double v73 = v69;
    double v74 = v70;
    double v75 = v71;
    v151.f64[0] = v68;
    v151.f64[1] = v69;
    v152.f64[0] = v70;
    v152.f64[1] = v71;
    if (v70 < 0.0)
    {
      double v72 = v70 + v68;
      double v74 = -v70;
      v151.f64[0] = v70 + v68;
      v152.f64[0] = -v70;
    }
    if (v71 < 0.0)
    {
      double v73 = v71 + v69;
      double v75 = -v71;
      v151.f64[1] = v71 + v69;
      v152.f64[1] = -v71;
    }
    memset(&v150, 0, sizeof(v150));
    CGSoftMaskGetMatrix();
    Background = (CGColor *)CGSoftMaskGetBackground();
    double v77 = *(double *)(a2 + 80);
    if (v77 != 1.0)
    {
      float v78 = v77;
      double v79 = v78;
      if (v78 != 1.0 && v74 < 1.79769313e308)
      {
        v151.f64[0] = v72 * v79;
        v152.f64[0] = v74 * v79;
      }
      if (v78 != 1.0 && v75 < 1.79769313e308)
      {
        v151.f64[1] = v73 * v79;
        v152.f64[1] = v75 * v79;
      }
      *(float64x2_t *)&v150.a = vmulq_n_f64(*(float64x2_t *)&v150.a, v79);
      *(float64x2_t *)&v150.double c = vmulq_n_f64(*(float64x2_t *)&v150.c, v79);
      *(float64x2_t *)&v150.tx = vmulq_n_f64(*(float64x2_t *)&v150.tx, v79);
    }
    CA::Rect::apply_transform(&v151, &v150);
    if (Background)
    {
      *(int32x2_t *)v83.i8 = *a1;
      unint64_t v82 = (unint64_t)a1[1];
      v83.i64[1] = v82;
    }
    else
    {
      int64x2_t v84 = vceqzq_f64(v152);
      int8x16_t v83 = 0uLL;
      if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v84, 1), (int8x16_t)v84).u64[0] & 0x8000000000000000) == 0)
      {
        int8x16_t v85 = vorrq_s8((int8x16_t)vcltzq_f64(v152), (int8x16_t)vcgezq_f64(v152));
        if ((vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v85), 1), v85).u64[0] & 0x8000000000000000) == 0)
        {
          int32x4_t v86 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v151, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
          int8x16_t v83 = (int8x16_t)vuzp1q_s32(v86, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v151, v152), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v86));
        }
      }
      int32x2_t v87 = (int32x2_t)vextq_s8(v83, v83, 8uLL).u64[0];
      uint32x2_t v88 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v87);
      if ((vpmax_u32(v88, v88).u32[0] & 0x80000000) == 0)
      {
        int32x2_t v89 = a1[1];
        uint32x2_t v90 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v89);
        if ((vpmax_u32(v90, v90).u32[0] & 0x80000000) != 0
          || (int32x2_t v91 = vadd_s32(*(int32x2_t *)v83.i8, v87),
              *(int32x2_t *)v92.i8 = vmax_s32(*(int32x2_t *)v83.i8, *a1),
              int32x2_t v93 = vsub_s32(vmin_s32(v91, vadd_s32(*a1, v89)), *(int32x2_t *)v92.i8),
              uint32x2_t v94 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v93),
              (vpmax_u32(v94, v94).u32[0] & 0x80000000) != 0))
        {
          v83.i64[1] = 0;
        }
        else
        {
          v92.u64[1] = (unint64_t)v93;
          int8x16_t v83 = v92;
        }
      }
      unint64_t v82 = vextq_s8(v83, v83, 8uLL).u64[0];
    }
    int v95 = HIDWORD(v82);
    if ((int)v82 < SHIDWORD(v82)) {
      int v95 = v82;
    }
    if (v95 >= 1)
    {
      int8x16_t v147 = v83;
      unint64_t v96 = CA::Render::format_rowbytes((CA::Render *)9, v82);
      size_t v97 = v96;
      int v98 = is_mul_ok(v96, v147.u32[3]) ? (CA::Render *)(v96 * v147.u32[3]) : 0;
      int64x2_t v99 = (CGColorSpace *)CAGetColorSpace(1u);
      size_t size = 0;
      int8x16_t v100 = (CA::Render *)CA::Render::aligned_malloc(v98, &size, 0);
      if (v100)
      {
        double v101 = v100;
        if (Background) {
          double v102 = v99;
        }
        else {
          double v102 = 0;
        }
        if (Background) {
          uint32_t v103 = 0;
        }
        else {
          uint32_t v103 = 7;
        }
        int v104 = CGBitmapContextCreate(v100, v147.i32[2], v147.i32[3], 8uLL, v97, v102, v103);
        if (v104)
        {
          int8x16_t v106 = v104;
          if (Background)
          {
            CGContextBeginTransparencyLayer(v104, 0);
            CGContextSetCompositeOperation();
            CGContextSetFillColorWithColor(v106, Background);
            CGContextFillRect(v106, *MEMORY[0x1E4F1DB10]);
          }
          else
          {
            CGContextSetCompositeOperation();
          }
          v107.i64[0] = v147.i32[0];
          v107.i64[1] = v147.i32[1];
          int8x16_t v145 = (int8x16_t)vcvtq_f64_s64(v107);
          CGRenderingStateCreateCopy();
          CGRenderingStateSetBaseCTM();
          CGGStateCreateCopy();
          CGGStateResetClip();
          CGGStateSetAlpha();
          CGGStateSetStyle();
          CGGStateSetSoftMask();
          CGGStateSetCTM();
          CGGStateSetFillColor();
          CGGStateSetStrokeColor();
          CGGStateSetCompositeOperation();
          CGContextGetDelegate();
          CGSoftMaskDelegateDrawSoftMask();
          CGGStateRelease();
          CGRenderingStateRelease();
          if (Background) {
            CGContextEndTransparencyLayer(v106);
          }
          CGContextRelease(v106);
          BOOL v108 = v101;
          if (CGSoftMaskGetTransfer())
          {
            if ((CGFunctionIsIdentity() & 1) == 0)
            {
              uint64_t v109 = 0;
              long long v167 = 0u;
              long long v168 = 0u;
              long long v165 = 0u;
              long long v166 = 0u;
              long long v163 = 0u;
              long long v164 = 0u;
              long long v161 = 0u;
              long long v162 = 0u;
              long long v159 = 0u;
              long long v160 = 0u;
              long long v157 = 0u;
              long long v158 = 0u;
              long long v155 = 0u;
              long long v156 = 0u;
              int8x16_t v153 = 0u;
              long long v154 = 0u;
              do
              {
                CGFunctionEvaluate();
                v153.i8[v109++] = 0;
              }
              while (v109 != 256);
              BOOL v108 = v101;
              if (v147.i32[3])
              {
                __int32 v110 = v147.i32[3];
                int8x16_t v111 = v101;
                do
                {
                  if (v147.i32[2])
                  {
                    uint64_t v112 = 0;
                    do
                    {
                      *((unsigned char *)v111 + v112) = v153.i8[*((unsigned __int8 *)v111 + v112)];
                      ++v112;
                    }
                    while (v147.i32[2] != v112);
                  }
                  int8x16_t v111 = (CA::Render *)((char *)v111 + v97);
                  --v110;
                }
                while (v110);
              }
            }
          }
          int8x16_t v113 = CGDataProviderCreateWithData((void *)size, v108, size, (CGDataProviderReleaseDataCallback)CA::Render::aligned_release);
          int8x16_t v114 = CGImageCreate(v147.i32[2], v147.i32[3], 8uLL, 8uLL, v97, v99, 0, v113, 0, 0, kCGRenderingIntentDefault);
          CGDataProviderRelease(v113);
          if (v147.i32[2] <= v147.i32[3]) {
            int v117 = v147.i32[3];
          }
          else {
            int v117 = v147.i32[2];
          }
          v115.i32[0] = 1073741822;
          v116.i32[0] = v117;
          int8x16_t v118 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v116, v115), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), v145);
          v119.i64[0] = v147.i32[2];
          v119.i64[1] = v147.i32[3];
          int8x16_t v120 = (int8x16_t)vcvtq_f64_s64(v119);
          int32x2_t v121 = vdup_n_s32(v117 > 1073741822);
          v119.i64[0] = v121.u32[0];
          v119.i64[1] = v121.u32[1];
          int8x16_t v122 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v119, 0x3FuLL)), (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL), v120);
          double v124 = *MEMORY[0x1E4F1DAB8];
          double v123 = *(double *)(MEMORY[0x1E4F1DAB8] + 8);
          double v126 = *(double *)(MEMORY[0x1E4F1DAB8] + 16);
          double v125 = *(double *)(MEMORY[0x1E4F1DAB8] + 24);
          int8x16_t v153 = *(int8x16_t *)(MEMORY[0x1E4F1DAB8] + 32);
          double v127 = *(double *)(a2 + 80);
          if (v127 == 1.0)
          {
            int8x16_t v146 = v122;
            int8x16_t v148 = v118;
          }
          else
          {
            float v128 = 1.0 / v127;
            double v129 = v128;
            _ZF = *(double *)v122.i64 >= 1.79769313e308 || v128 == 1.0;
            v131.i64[1] = v118.i64[1];
            v132.i64[1] = v122.i64[1];
            if (_ZF) {
              unint64_t v133 = 0;
            }
            else {
              unint64_t v133 = -1;
            }
            int8x16_t v134 = (int8x16_t)vdupq_n_s64(v133);
            *(double *)v132.i64 = v129 * *(double *)v122.i64;
            int8x16_t v135 = vbslq_s8(v134, v132, v122);
            *(double *)v131.i64 = v129 * *(double *)v118.i64;
            float64x2_t v136 = (float64x2_t)vbslq_s8(v134, v131, v118);
            if (v128 != 1.0 && *(double *)&v135.i64[1] < 1.79769313e308)
            {
              v136.f64[1] = vmuld_lane_f64(v129, v136, 1);
              *(double *)&v135.i64[1] = *(double *)&v135.i64[1] * v129;
            }
            int8x16_t v146 = v135;
            int8x16_t v148 = (int8x16_t)v136;
            double v124 = v124 * v129;
            double v123 = v123 * v129;
            double v126 = v126 * v129;
            double v125 = v125 * v129;
          }
          malloc_zone = (malloc_zone_t *)get_malloc_zone();
          int8x16_t v138 = (double *)malloc_type_zone_malloc(malloc_zone, 0x68uLL, 0x8BB15036uLL);
          int64x2_t v139 = v138;
          if (v138)
          {
            *(void *)int8x16_t v138 = &unk_1ED02A0B8;
            *((void *)v138 + 1) = CGImageRetain(v114);
            v139[2] = v124;
            v139[3] = v123;
            v139[4] = v126;
            v139[5] = v125;
            *((int8x16_t *)v139 + 3) = v153;
            *((int8x16_t *)v139 + 4) = v148;
            *((int8x16_t *)v139 + 5) = v146;
            *((unsigned char *)v139 + 96) = 0;
          }
          a1[4] = (int32x2_t)v139;
          CGImageRelease(v114);
          int v140 = (*(uint64_t (**)(void, uint64_t, uint64_t, int32x2_t *))(**(void **)&a1[4] + 24))(*(void *)&a1[4], a2, a3, a1);
          if (v140 == 2)
          {
            int32x2_t v141 = a1[4];
            int32x2_t v142 = a1[5];
            int32x2_t v143 = a1[6];
            a1[6] = (int32x2_t)(*(void *)&v143 + 1);
            *(int32x2_t *)(*(void *)&v142 + 8 * *(void *)&v143) = v141;
          }
          else if (v140 == 1)
          {
LABEL_127:
            *a1 = 0;
            a1[1] = 0;
          }
        }
        else
        {
          CA::Render::aligned_free(v101, size, v105);
        }
      }
    }
  }
  return a1;
}

uint64_t CA::CG::mat2_filter_bits(uint64_t a1)
{
  double v1 = *(double *)(a1 + 8);
  if (fabs(v1) >= 0.000001 || fabs(*(double *)(a1 + 16)) >= 0.000001)
  {
    double v2 = *(double *)a1;
    if (fabs(*(double *)a1) >= 0.000001 || fabs(*(double *)(a1 + 24)) >= 0.000001)
    {
      unsigned int v10 = 9;
      goto LABEL_9;
    }
  }
  else
  {
    double v2 = *(double *)a1;
  }
  v3.f64[0] = NAN;
  v3.f64[1] = NAN;
  __asm { FMOV            V4.2D, #0.5 }
  float64x2_t v9 = vabdq_f64(vrndq_f64(vaddq_f64((float64x2_t)vbslq_s8((int8x16_t)vnegq_f64(v3), _Q4, *(int8x16_t *)(a1 + 32)), *(float64x2_t *)(a1 + 32))), *(float64x2_t *)(a1 + 32));
  unsigned int v10 = v9.f64[0] >= 0.001;
  if (v9.f64[1] >= 0.001) {
    v10 |= 8u;
  }
LABEL_9:
  double v11 = v2 * v2 + v1 * v1;
  double v12 = *(double *)(a1 + 16) * *(double *)(a1 + 16) + *(double *)(a1 + 24) * *(double *)(a1 + 24);
  if (v11 >= 0.999)
  {
    if (v11 > 1.001) {
      uint64_t result = v10 | 4;
    }
    else {
      uint64_t result = v10;
    }
  }
  else
  {
    uint64_t result = v10 | 2;
  }
  if (v12 < 0.999) {
    return result | 0x10;
  }
  if (v12 > 1.001) {
    return result | 0x20;
  }
  return result;
}

BOOL CA::CG::FillRects::shape_extent_contains(CA::CG::FillRects *this, CA::CG::Renderer *a2, const CA::Shape *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 14) != 1) {
    return 0;
  }
  double v5 = *((double *)this + 15);
  double v4 = *((double *)this + 16);
  v14.f64[0] = v5;
  v14.f64[1] = v4;
  double v7 = *((double *)this + 17);
  double v6 = *((double *)this + 18);
  v15.f64[0] = v7;
  v15.f64[1] = v6;
  if (v7 < 0.0)
  {
    v14.f64[0] = v7 + v5;
    v15.f64[0] = -v7;
  }
  if (v6 < 0.0)
  {
    v14.f64[1] = v6 + v4;
    v15.f64[1] = -v6;
  }
  if ((*((_DWORD *)this + 25) & 4) != 0) {
    float64x2_t v8 = (char *)a2 + 88;
  }
  else {
    float64x2_t v8 = (char *)a2 + 32;
  }
  CA::Mat2Impl::mat2_apply_to_rect_interior((uint64_t)v8, v14.f64, a3);
  int64x2_t v9 = vceqzq_f64(v15);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v9, 1), (int8x16_t)v9).u64[0] & 0x8000000000000000) != 0
    || (int8x16_t v10 = vorrq_s8((int8x16_t)vcltzq_f64(v15), (int8x16_t)vcgezq_f64(v15)),
        (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v10), 1), v10).u64[0] & 0x8000000000000000) != 0))
  {
    int32x4_t v13 = 0uLL;
  }
  else
  {
    int32x4_t v11 = (int32x4_t)vcvtpq_s64_f64(vmaxnmq_f64(v14, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
    int32x4_t v13 = vuzp1q_s32(v11, (int32x4_t)vsubq_s64(vcvtmq_s64_f64(vminnmq_f64(vaddq_f64(v14, v15), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v11));
  }
  return CA::Bounds::contains((CA::Bounds *)&v13, (uint64_t)a3);
}

uint64_t CA::Mat2Impl::mat2_apply_to_rect_interior(uint64_t this, double *a2, CA::Rect *a3)
{
  v21[8] = *(double *)MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(this + 8);
  if ((fabs(*(double *)&v3) >= 0.000001 || fabs(*(double *)(this + 16)) >= 0.000001)
    && ((double v4 = *(double *)this, fabs(*(double *)this) >= 0.000001) || fabs(*(double *)(this + 24)) >= 0.000001))
  {
    double v6 = a2[2];
    double v5 = a2[3];
    if (v6 <= v5) {
      double v7 = a2[3];
    }
    else {
      double v7 = a2[2];
    }
    if (v7 < 1.79769313e308)
    {
      uint64_t v8 = 0;
      double v9 = a2[1];
      v21[0] = *a2;
      v21[1] = v9;
      v21[2] = v6 + v21[0];
      v21[3] = v9;
      v21[4] = v6 + v21[0];
      v21[5] = v5 + v9;
      v21[6] = v21[0];
      v21[7] = v5 + v9;
      int8x16_t v10 = (const double *)(this + 40);
      int32x4_t v11 = (const double *)(this + 16);
      float64x2_t v12 = vld1q_dup_f64(v11);
      int32x4_t v13 = (const double *)(this + 32);
      float64x2_t v14 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v4, 0);
      float64x2_t v15 = vld1q_dup_f64(v13);
      float64x2_t v16 = (float64x2_t)vdupq_lane_s64(v3, 0);
      uint64_t v17 = (const double *)(this + 24);
      float64x2_t v18 = vld1q_dup_f64(v17);
      float64x2_t v19 = vld1q_dup_f64(v10);
      do
      {
        double v20 = &v21[v8];
        float64x2x2_t v23 = vld2q_f64(v20);
        v24.val[0] = vmlaq_f64(vmlaq_f64(v15, v23.val[0], v14), v23.val[1], v12);
        v24.val[1] = vmlaq_f64(vmlaq_f64(v19, v23.val[0], v16), v23.val[1], v18);
        vst2q_f64(v20, v24);
        v8 += 4;
      }
      while (v8 != 8);
      return CA::Rect::set_corners_interior((uint64_t)a2, v21);
    }
  }
  else
  {
    return CA::Mat2Impl::mat2_apply_to_rect(this, a2, (double *)a3);
  }
  return this;
}

uint64_t CA::Mat2Impl::mat2_apply_to_rect(uint64_t this, double *a2, double *a3)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  float64x2_t v3 = *(float64x2_t *)(a2 + 2);
  double v4 = a2[3];
  if (v3.f64[0] <= v4) {
    double v5 = a2[3];
  }
  else {
    double v5 = a2[2];
  }
  if (v5 < 1.79769313e308)
  {
    uint64_t v6 = *(void *)(this + 8);
    uint64_t v7 = *(void *)(this + 16);
    if (fabs(*(double *)&v6) >= 0.000001 || fabs(*(double *)&v7) >= 0.000001)
    {
      uint64_t v14 = 0;
      double v15 = a2[1];
      v37.f64[0] = *a2;
      v37.f64[1] = v15;
      v38.f64[0] = v3.f64[0] + v37.f64[0];
      v38.f64[1] = v15;
      v39.f64[0] = v3.f64[0] + v37.f64[0];
      v39.f64[1] = v4 + v15;
      v40.i64[0] = *(void *)&v37.f64[0];
      *(double *)&v40.i64[1] = v4 + v15;
      float64x2_t v16 = (const double *)(this + 40);
      uint64_t v17 = (const double *)(this + 32);
      float64x2_t v18 = vld1q_dup_f64((const double *)this);
      float64x2_t v19 = (float64x2_t)vdupq_lane_s64(v7, 0);
      float64x2_t v20 = vld1q_dup_f64(v17);
      float64x2_t v21 = (float64x2_t)vdupq_lane_s64(v6, 0);
      float64x2_t v22 = (const double *)(this + 24);
      float64x2_t v23 = vld1q_dup_f64(v22);
      float64x2_t v24 = vld1q_dup_f64(v16);
      do
      {
        int32x2_t v25 = &v37.f64[v14];
        float64x2x2_t v42 = vld2q_f64(v25);
        v43.val[0] = vmlaq_f64(vmlaq_f64(v20, v42.val[0], v18), v42.val[1], v19);
        v43.val[1] = vmlaq_f64(vmlaq_f64(v24, v42.val[0], v21), v42.val[1], v23);
        vst2q_f64(v25, v43);
        v14 += 4;
      }
      while (v14 != 8);
      float64x2_t v26 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v38, v37), (int8x16_t)v37, (int8x16_t)v38);
      float64x2_t v27 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v37, v38), (int8x16_t)v37, (int8x16_t)v38);
      float64x2_t v28 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v40, v39), (int8x16_t)v39, v40);
      float64x2_t v29 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v39, (float64x2_t)v40), (int8x16_t)v39, v40);
      float64x2_t v30 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v28, v26), (int8x16_t)v26, (int8x16_t)v28);
      int64x2_t v31 = vcgtq_f64(v27, v29);
      float64x2_t v32 = vsubq_f64((float64x2_t)vbslq_s8((int8x16_t)v31, (int8x16_t)v27, (int8x16_t)v29), v30);
      v29.f64[0] = vaddvq_f64(v32);
      BOOL v33 = (*(void *)&v29.f64[0] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      *(void *)&v29.f64[0] &= ~0x8000000000000000;
      v31.i64[0] = 0x7FF0000000000000;
      float64x2_t v13 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s64(vcgtq_s64(v31, (int64x2_t)v29).i64[0], 0), (int8x16_t)v32, (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL));
      unsigned int v34 = v33;
      int32x2_t v35 = vdup_n_s32(v34);
      v36.i64[0] = v35.u32[0];
      v36.i64[1] = v35.u32[1];
      float64x2_t v12 = (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v36, 0x3FuLL)), (int8x16_t)v30, (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL));
    }
    else
    {
      v8.f64[0] = *(float64_t *)this;
      v8.f64[1] = *(float64_t *)(this + 24);
      float64x2_t v9 = vmlaq_f64(*(float64x2_t *)(this + 32), *(float64x2_t *)a2, v8);
      float64x2_t v10 = vmlaq_f64(*(float64x2_t *)(this + 32), vaddq_f64(*(float64x2_t *)a2, v3), v8);
      int8x16_t v11 = (int8x16_t)vcgtq_f64(v9, v10);
      float64x2_t v12 = (float64x2_t)vbslq_s8(v11, (int8x16_t)v10, (int8x16_t)v9);
      float64x2_t v13 = vsubq_f64((float64x2_t)vbslq_s8(v11, (int8x16_t)v9, (int8x16_t)v10), v12);
    }
    *(float64x2_t *)a2 = v12;
    *((float64x2_t *)a2 + 1) = v13;
  }
  return this;
}

void __CADeviceUseCompression_block_invoke()
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (CADeviceSupportsCIF10::once[0] != -1) {
    dispatch_once(CADeviceSupportsCIF10::once, &__block_literal_global_14);
  }
  if (CADeviceSupportsCIF10::supports_cif10)
  {
    if (CADeviceIsVirtualized::once != -1) {
      dispatch_once(&CADeviceIsVirtualized::once, &__block_literal_global_280);
    }
    if (!CADeviceIsVirtualized::is_virtualized)
    {
      keyExistsAndHasValidFormat[0] = 0;
      uint64_t v0 = MGGetSInt64Answer();
      if (v0)
      {
        BOOL v1 = 0;
        if (v0 != 28672)
        {
          uint64_t v2 = 1;
          unint64_t v3 = 3;
          while (v2 != 4)
          {
            uint64_t v4 = CADeviceVertexCoordinateSubpixelBits::four_bit_chip_ids[v2++];
            if (v4 == v0)
            {
              unint64_t v3 = v2 - 2;
              break;
            }
          }
          BOOL v1 = v3 > 2;
        }
        CADeviceUseCompression::enable_compression = v1;
      }
      int AppBooleanValue = CFPreferencesGetAppBooleanValue(@"CAEnableIOSurfaceCompression", (CFStringRef)*MEMORY[0x1E4F1D3D8], keyExistsAndHasValidFormat);
      if (keyExistsAndHasValidFormat[0]) {
        CADeviceUseCompression::enable_compression = AppBooleanValue != 0;
      }
    }
  }
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    uint64_t v6 = x_log_category_utilities;
    if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_INFO))
    {
      if (CADeviceUseCompression::enable_compression) {
        uint64_t v7 = "YES";
      }
      else {
        uint64_t v7 = "NO";
      }
      *(_DWORD *)keyExistsAndHasValidFormat = 136315138;
      float64x2_t v9 = v7;
      _os_log_impl(&dword_184668000, v6, OS_LOG_TYPE_INFO, "IOSurface Compression Enabled: %s\n", keyExistsAndHasValidFormat, 0xCu);
    }
  }
}

CFDictionaryRef ___ZN2CA6Render12_GLOBAL__N_125create_image_by_renderingEP7CGImageP12CGColorSpacejdNS0_13ImageCopyTypeE_block_invoke()
{
  CFDictionaryRef result = CFDictionaryCreate(0, MEMORY[0x1E4F2F4A8], MEMORY[0x1E4F1CFC8], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  return result;
}

os_log_t x_log_init(void)
{
  uint64_t v0 = getenv("QUARTZCORE_LOG_FILE");
  if (v0 || (uint64_t v0 = getenv("X_LOG_FILE")) != 0) {
    x_set_log_filename(v0);
  }
  atexit(x_close_log_file);
  x_log_category_apuint64_t i = (uint64_t)os_log_create("com.apple.coreanimation", "API");
  x_log_category_CADebug = (uint64_t)os_log_create("com.apple.coreanimation", "CADebug");
  x_log_category_ogl = (uint64_t)os_log_create("com.apple.coreanimation", "OGL");
  x_log_category_ogl_metal = (uint64_t)os_log_create("com.apple.coreanimation", "Metal");
  x_log_category_ogl_opengl = (uint64_t)os_log_create("com.apple.coreanimation", "OpenGL");
  x_log_category_render = (uint64_t)os_log_create("com.apple.coreanimation", "Render");
  x_log_category_states = (uint64_t)os_log_create("com.apple.coreanimation", "States");
  x_log_category_utilities = (uint64_t)os_log_create("com.apple.coreanimation", "Utilities");
  x_log_category_cg = (uint64_t)os_log_create("com.apple.coreanimation", "CG");
  x_log_category_windowserver = (uint64_t)os_log_create("com.apple.coreanimation", "WindowServer");
  x_log_category_color = (uint64_t)os_log_create("com.apple.coreanimation", "Color");
  x_log_category_frame_rate = (uint64_t)os_log_create("com.apple.coreanimation", "FrameRate");
  x_log_category_flipbook = (uint64_t)os_log_create("com.apple.coreanimation", "FlipBook");
  x_log_category_flatten = (uint64_t)os_log_create("com.apple.coreanimation", "FlattenCache");
  x_log_category_brightness = (uint64_t)os_log_create("com.apple.coreanimation", "Brightness");
  x_log_category_sharedevent = (uint64_t)os_log_create("com.apple.coreanimation", "SharedEvent");
  x_log_category_filmgrain = (uint64_t)os_log_create("com.apple.coreanimation", "FilmGrain");
  x_log_category_security_analysis = (uint64_t)os_log_create("com.apple.coreanimation", "SecurityAnalysis");
  x_log_category_occlusion = (uint64_t)os_log_create("com.apple.coreanimation", "Occlusion");
  x_log_category_display_state = (uint64_t)os_log_create("com.apple.coreanimation", "DisplayState");
  x_log_category_secure_indicators = (uint64_t)os_log_create("com.apple.coreanimation", "Indicators");
  os_log_t result = os_log_create("com.apple.coreanimation", "VideoTonemapping");
  x_log_category_video_tonemapping = (uint64_t)result;
  return result;
}

os_log_t ___ZN2CA3OGL12MetalContextC2EPU19objcproto9MTLDevice11objc_objectPU26objcproto15MTLCommandQueue11objc_objectPU28objcproto17OS_dispatch_queue8NSObjectjj_block_invoke()
{
  CA::OGL::MetalContext::_perf_log = (uint64_t)os_log_create("com.apple.coreanimation", "Metal.Performance");
  os_log_t result = os_log_create("com.apple.coreanimation", "Metal.Trace");
  CA::OGL::MetalContext::_metal_trace_log = (uint64_t)result;
  return result;
}

void CA::OGL::MetalContext::stop_idle_collect_timer(CA::OGL::MetalContext *this)
{
  uint64_t v2 = (os_unfair_lock_s *)((char *)this + 2680);
  os_unfair_lock_lock((os_unfair_lock_t)this + 670);
  unint64_t v3 = *((void *)this + 502);
  if (v3)
  {
    dispatch_source_cancel(v3);
    dispatch_release(*((dispatch_object_t *)this + 502));
    *((void *)this + 502) = 0;
  }

  os_unfair_lock_unlock(v2);
}

uint64_t x_log_stream_init(void)
{
  v1[1] = *MEMORY[0x1E4F143B8];
  v1[0] = 0;
  uint64_t result = pthread_key_create(v1, 0);
  x_log_stream_slot = v1[0];
  return result;
}

uint64_t ___ZL20backingStoreFinalizePKv_block_invoke(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(atomic_uint **)(result + 32);
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
  {
    (**(void (***)(atomic_uint *))v2)(v2);
    uint64_t result = (*(uint64_t (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  unint64_t v3 = *(atomic_uint **)(v1 + 40);
  if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
  {
    (**(void (***)(atomic_uint *))v3)(v3);
    uint64_t result = (*(uint64_t (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
  }
  uint64_t v4 = *(atomic_uint **)(v1 + 48);
  if (v4 && atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1)
  {
    (**(void (***)(atomic_uint *))v4)(v4);
    double v5 = *(uint64_t (**)(atomic_uint *))(*(void *)v4 + 16);
    return v5(v4);
  }
  return result;
}

uint64_t __CADeviceVertexCoordinateSubpixelBits_block_invoke()
{
  uint64_t result = MGGetSInt64Answer();
  if (result == 28672)
  {
    int v1 = 4;
  }
  else
  {
    uint64_t v2 = 1;
    do
    {
      if (v2 == 4)
      {
        int v1 = 8;
        goto LABEL_10;
      }
      uint64_t v3 = v2;
      uint64_t v4 = CADeviceVertexCoordinateSubpixelBits::four_bit_chip_ids[v2++];
    }
    while (v4 != result);
    if ((unint64_t)(v3 - 1) >= 3) {
      int v1 = 8;
    }
    else {
      int v1 = 4;
    }
  }
LABEL_10:
  CADeviceVertexCoordinateSubpixelBits::bits = v1;
  return result;
}

CFIndex ___ZN2CA6RenderL22sync_hang_report_levelEv_block_invoke()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  Boolean keyExistsAndHasValidFormat = 0;
  CFIndex result = CFPreferencesGetAppIntegerValue(@"CASynchronizeHangReport", @"com.apple.coreanimation", &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat)
  {
    if (result >= 3) {
      int v1 = 3;
    }
    else {
      int v1 = result;
    }
    if ((int)result < 0) {
      int v1 = 0;
    }
    LODWORD(CA::Render::sync_hang_report_level(void)::level) = v1;
  }
  return result;
}

void ___ZL14init_selectorsv_block_invoke()
{
  qword_1EB2A91A0 = (uint64_t)sel_acceleratesDrawing;
  *(void *)algn_1EB2A91A8 = sel_setAcceleratesDrawing_;
  qword_1EB2A91B0 = (uint64_t)sel_actions;
  unk_1EB2A91B8 = sel_setActions_;
  qword_1EB2A91C0 = (uint64_t)sel_additive;
  unk_1EB2A91C8 = sel_setAdditive_;
  qword_1EB2A9210 = (uint64_t)sel_alignmentMode;
  unk_1EB2A9218 = sel_setAlignmentMode_;
  qword_1EB2A9220 = (uint64_t)sel_allowedInContextTransform;
  unk_1EB2A9228 = sel_setAllowedInContextTransform_;
  qword_1EB2A9230 = (uint64_t)sel_allowsBackdropGroups;
  unk_1EB2A9238 = sel_setAllowsBackdropGroups_;
  qword_1EB2A9240 = (uint64_t)sel_allowsDisplayCompositing;
  unk_1EB2A9248 = sel_setAllowsDisplayCompositing_;
  qword_1EB2A9250 = (uint64_t)sel_allowsDynamicSystemOOTF;
  unk_1EB2A9258 = sel_setAllowsDynamicSystemOOTF_;
  qword_1EB2A9260 = (uint64_t)sel_allowsEdgeAntialiasing;
  unk_1EB2A9268 = sel_setAllowsEdgeAntialiasing_;
  qword_1EB2A9270 = (uint64_t)sel_allowsFontSubpixelQuantization;
  unk_1EB2A9278 = sel_setAllowsFontSubpixelQuantization_;
  qword_1EB2A9280 = (uint64_t)sel_allowsGroupBlending;
  unk_1EB2A9288 = sel_setAllowsGroupBlending_;
  qword_1EB2A9290 = (uint64_t)sel_allowsGroupOpacity;
  unk_1EB2A9298 = sel_setAllowsGroupOpacity_;
  qword_1EB2A92A0 = (uint64_t)sel_allowsHitTesting;
  unk_1EB2A92A8 = sel_setAllowsHitTesting_;
  qword_1EB2A92B0 = (uint64_t)sel_allowsInPlaceFiltering;
  unk_1EB2A92B8 = sel_setAllowsInPlaceFiltering_;
  qword_1EB2A92C0 = (uint64_t)sel_allowsOverdamping;
  unk_1EB2A92C8 = sel_setAllowsOverdamping_;
  qword_1EB2A92F0 = (uint64_t)sel_alphaRange;
  unk_1EB2A92F8 = sel_setAlphaRange_;
  qword_1EB2A9310 = (uint64_t)sel_alphaSpeed;
  unk_1EB2A9318 = sel_setAlphaSpeed_;
  qword_1EB2A9340 = (uint64_t)sel_anchorPoint;
  unk_1EB2A9348 = sel_setAnchorPoint_;
  qword_1EB2A9350 = (uint64_t)sel_anchorPointZ;
  unk_1EB2A9358 = sel_setAnchorPointZ_;
  qword_1EB2A9360 = (uint64_t)sel_animatesFromModelValues;
  unk_1EB2A9368 = sel_setAnimatesFromModelValues_;
  qword_1EB2A9380 = (uint64_t)sel_animationDuration;
  unk_1EB2A9388 = sel_setAnimationDuration_;
  qword_1EB2A9390 = (uint64_t)sel_animationTimingFunction;
  unk_1EB2A9398 = sel_setAnimationTimingFunction_;
  qword_1EB2A93A0 = (uint64_t)sel_animations;
  qword_1EB2A93A8 = (uint64_t)sel_setAnimations_;
  qword_1EB2A93D0 = (uint64_t)sel_appliesRotation;
  qword_1EB2A93D8 = (uint64_t)sel_setAppliesRotation_;
  qword_1EB2A93E0 = (uint64_t)sel_appliesScale;
  qword_1EB2A93E8 = (uint64_t)sel_setAppliesScale_;
  qword_1EB2A93F0 = (uint64_t)sel_appliesX;
  qword_1EB2A93F8 = (uint64_t)sel_setAppliesX_;
  qword_1EB2A9400 = (uint64_t)sel_appliesY;
  qword_1EB2A9408 = (uint64_t)sel_setAppliesY_;
  qword_1EB2A9430 = (uint64_t)sel_asynchronousOpaque;
  qword_1EB2A9438 = (uint64_t)sel_setAsynchronousOpaque_;
  qword_1EB2A9440 = (uint64_t)sel_asynchronousRenderPeriod;
  qword_1EB2A9448 = (uint64_t)sel_setAsynchronousRenderPeriod_;
  qword_1EB2A9450 = (uint64_t)sel_asynchronousRenderTimes;
  qword_1EB2A9458 = (uint64_t)sel_setAsynchronousRenderTimes_;
  qword_1EB2A94A0 = (uint64_t)sel_autoreverses;
  qword_1EB2A94A8 = (uint64_t)sel_setAutoreverses_;
  qword_1EB2A94E0 = (uint64_t)sel_backdropRect;
  qword_1EB2A94E8 = (uint64_t)sel_setBackdropRect_;
  qword_1EB2A94F0 = (uint64_t)sel_backgroundColor;
  qword_1EB2A94F8 = (uint64_t)sel_setBackgroundColor_;
  qword_1EB2A9500 = (uint64_t)sel_backgroundColorPhase;
  qword_1EB2A9508 = (uint64_t)sel_setBackgroundColorPhase_;
  qword_1EB2A9510 = (uint64_t)sel_backgroundFilters;
  qword_1EB2A9518 = (uint64_t)sel_setBackgroundFilters_;
  qword_1EB2A9520 = (uint64_t)sel_beginTime;
  qword_1EB2A9528 = (uint64_t)sel_setBeginTime_;
  qword_1EB2A9530 = (uint64_t)sel_beginTimeMode;
  qword_1EB2A9538 = (uint64_t)sel_setBeginTimeMode_;
  qword_1EB2A9550 = (uint64_t)sel_biasValues;
  qword_1EB2A9558 = (uint64_t)sel_setBiasValues_;
  qword_1EB2A9560 = (uint64_t)sel_birthRate;
  qword_1EB2A9568 = (uint64_t)sel_setBirthRate_;
  qword_1EB2A9590 = (uint64_t)sel_blueRange;
  qword_1EB2A9598 = (uint64_t)sel_setBlueRange_;
  qword_1EB2A95A0 = (uint64_t)sel_blueSpeed;
  qword_1EB2A95A8 = (uint64_t)sel_setBlueSpeed_;
  qword_1EB2A95B0 = (uint64_t)sel_borderColor;
  qword_1EB2A95B8 = (uint64_t)sel_setBorderColor_;
  qword_1EB2A95C0 = (uint64_t)sel_borderOffset;
  qword_1EB2A95C8 = (uint64_t)sel_setBorderOffset_;
  qword_1EB2A95D0 = (uint64_t)sel_borderPathIsBounds;
  qword_1EB2A95D8 = (uint64_t)sel_setBorderPathIsBounds_;
  qword_1EB2A95E0 = (uint64_t)sel_borderWidth;
  qword_1EB2A95E8 = (uint64_t)sel_setBorderWidth_;
  qword_1EB2A9630 = (uint64_t)sel_bounds;
  qword_1EB2A9638 = (uint64_t)sel_setBounds_;
  qword_1EB2A9670 = (uint64_t)sel_byValue;
  qword_1EB2A9678 = (uint64_t)sel_setByValue_;
  qword_1EB2A9680 = (uint64_t)sel_cachesInputImage;
  qword_1EB2A9688 = (uint64_t)sel_setCachesInputImage_;
  qword_1EB2A9690 = (uint64_t)sel_calculationMode;
  qword_1EB2A9698 = (uint64_t)sel_setCalculationMode_;
  qword_1EB2A96A0 = (uint64_t)sel_canDrawConcurrently;
  qword_1EB2A96A8 = (uint64_t)sel_setCanDrawConcurrently_;
  qword_1EB2A96B0 = (uint64_t)sel_captureOnly;
  qword_1EB2A96B8 = (uint64_t)sel_setCaptureOnly_;
  qword_1EB2A9740 = (uint64_t)sel_clearsContext;
  qword_1EB2A9748 = (uint64_t)sel_setClearsContext_;
  qword_1EB2A9750 = (uint64_t)sel_color;
  qword_1EB2A9758 = (uint64_t)sel_setColor_;
  qword_1EB2A97F0 = (uint64_t)sel_colorMap;
  qword_1EB2A97F8 = (uint64_t)sel_setColorMap_;
  qword_1EB2A9850 = (uint64_t)sel_colorSpace;
  qword_1EB2A9858 = (uint64_t)sel_setColorSpace_;
  qword_1EB2A9870 = (uint64_t)sel_colors;
  qword_1EB2A9878 = (uint64_t)sel_setColors_;
  qword_1EB2A9880 = (uint64_t)sel_commitTime;
  qword_1EB2A9888 = (uint64_t)sel_setCommitTime_;
  qword_1EB2A9890 = (uint64_t)sel_completionBlock;
  qword_1EB2A9898 = (uint64_t)sel_setCompletionBlock_;
  qword_1EB2A98A0 = (uint64_t)sel_compositingFilter;
  qword_1EB2A98A8 = (uint64_t)sel_setCompositingFilter_;
  qword_1EB2A9900 = (uint64_t)sel_contents;
  qword_1EB2A9908 = (uint64_t)sel_setContents_;
  qword_1EB2A9920 = (uint64_t)sel_contentsCenter;
  qword_1EB2A9928 = (uint64_t)sel_setContentsCenter_;
  qword_1EB2A9930 = (uint64_t)sel_contentsContainsSubtitles;
  qword_1EB2A9938 = (uint64_t)sel_setContentsContainsSubtitles_;
  qword_1EB2A9950 = (uint64_t)sel_contentsDither;
  qword_1EB2A9958 = (uint64_t)sel_setContentsDither_;
  qword_1EB2A9940 = (uint64_t)sel_contentsDirtyRect;
  qword_1EB2A9948 = (uint64_t)sel_setContentsDirtyRect_;
  qword_1EB2A9960 = (uint64_t)sel_contentsEDRStrength;
  qword_1EB2A9968 = (uint64_t)sel_setContentsEDRStrength_;
  qword_1EB2A9970 = (uint64_t)sel_contentsFormat;
  qword_1EB2A9978 = (uint64_t)sel_setContentsFormat_;
  qword_1EB2A9980 = (uint64_t)sel_contentsFrameCount;
  qword_1EB2A9988 = (uint64_t)sel_setContentsFrameCount_;
  qword_1EB2A9990 = (uint64_t)sel_contentsFrameMode;
  qword_1EB2A9998 = (uint64_t)sel_setContentsFrameMode_;
  qword_1EB2A99A0 = (uint64_t)sel_contentsFramesPerRow;
  qword_1EB2A99A8 = (uint64_t)sel_setContentsFramesPerRow_;
  qword_1EB2A99B0 = (uint64_t)sel_contentsFramesPerSecond;
  qword_1EB2A99B8 = (uint64_t)sel_setContentsFramesPerSecond_;
  qword_1EB2A9910 = (uint64_t)sel_contentsAlignsToPixels;
  qword_1EB2A9918 = (uint64_t)sel_setContentsAlignsToPixels_;
  qword_1EB2A99C0 = (uint64_t)sel_contentsGravity;
  qword_1EB2A99C8 = (uint64_t)sel_setContentsGravity_;
  qword_1EB2A99D0 = (uint64_t)sel_contentsMaximumDesiredEDR;
  qword_1EB2A99D8 = (uint64_t)sel_setContentsMaximumDesiredEDR_;
  qword_1EB2A99E0 = (uint64_t)sel_contentsMultiplyColor;
  qword_1EB2A99E8 = (uint64_t)sel_setContentsMultiplyColor_;
  qword_1EB2A99F0 = (uint64_t)sel_contentsOpaque;
  qword_1EB2A99F8 = (uint64_t)sel_setContentsOpaque_;
  qword_1EB2A9A00 = (uint64_t)sel_contentsRect;
  qword_1EB2A9A08 = (uint64_t)sel_setContentsRect_;
  qword_1EB2A9A10 = (uint64_t)sel_contentsScale;
  qword_1EB2A9A18 = (uint64_t)sel_setContentsScale_;
  qword_1EB2A9A20 = (uint64_t)sel_contentsScaling;
  qword_1EB2A9A28 = (uint64_t)sel_setContentsScaling_;
  qword_1EB2A9A30 = (uint64_t)sel_contentsSwizzle;
  qword_1EB2A9A38 = (uint64_t)sel_setContentsSwizzle_;
  qword_1EB2A9A40 = (uint64_t)sel_contentsTransform;
  qword_1EB2A9A48 = (uint64_t)sel_setContentsTransform_;
  qword_1EB2A9A50 = (uint64_t)sel_contextId;
  qword_1EB2A9A58 = (uint64_t)sel_setContextId_;
  qword_1EB2A9A60 = (uint64_t)sel_continuityValues;
  qword_1EB2A9A68 = (uint64_t)sel_setContinuityValues_;
  qword_1EB2A9A80 = (uint64_t)sel_cornerContents;
  qword_1EB2A9A88 = (uint64_t)sel_setCornerContents_;
  qword_1EB2A9A90 = (uint64_t)sel_cornerContentsCenter;
  qword_1EB2A9A98 = (uint64_t)sel_setCornerContentsCenter_;
  qword_1EB2A9AA0 = (uint64_t)sel_cornerContentsMasksEdges;
  qword_1EB2A9AA8 = (uint64_t)sel_setCornerContentsMasksEdges_;
  qword_1EB2A9AB0 = (uint64_t)sel_cornerCurve;
  qword_1EB2A9AB8 = (uint64_t)sel_setCornerCurve_;
  qword_1EB2A9AC0 = (uint64_t)sel_cornerRadii;
  qword_1EB2A9AC8 = (uint64_t)sel_setCornerRadii_;
  qword_1EB2A9AD0 = (uint64_t)sel_cornerRadius;
  qword_1EB2A9AD8 = (uint64_t)sel_setCornerRadius_;
  qword_1EB2A9AE0 = (uint64_t)sel_createsCompositingGroup;
  qword_1EB2A9AE8 = (uint64_t)sel_setCreatesCompositingGroup_;
  qword_1EB2A9B00 = (uint64_t)sel_crossDisplay;
  qword_1EB2A9B08 = (uint64_t)sel_setCrossDisplay_;
  qword_1EB2A9B50 = (uint64_t)sel_cullMaxZ;
  qword_1EB2A9B58 = (uint64_t)sel_setCullMaxZ_;
  qword_1EB2A9B60 = (uint64_t)sel_cullMinZ;
  qword_1EB2A9B68 = (uint64_t)sel_setCullMinZ_;
  qword_1EB2A9B70 = (uint64_t)sel_cullRect;
  qword_1EB2A9B78 = (uint64_t)sel_setCullRect_;
  qword_1EB2A9B80 = (uint64_t)sel_isCumulative;
  qword_1EB2A9B88 = (uint64_t)sel_setCumulative_;
  qword_1EB2A9BA0 = (uint64_t)sel_damping;
  qword_1EB2A9BA8 = (uint64_t)sel_setDamping_;
  qword_1EB2A9BD0 = (uint64_t)sel_definesDisplayRegionOfInterest;
  qword_1EB2A9BD8 = (uint64_t)sel_setDefinesDisplayRegionOfInterest_;
  qword_1EB2A9BE0 = (uint64_t)sel_delegate;
  qword_1EB2A9BE8 = (uint64_t)sel_setDelegate_;
  qword_1EB2A9BF0 = (uint64_t)sel_description;
  qword_1EB2A9CB0 = (uint64_t)sel_disableActions;
  qword_1EB2A9CB8 = (uint64_t)sel_setDisableActions_;
  qword_1EB2A9CD0 = (uint64_t)sel_disableUpdateMask;
  qword_1EB2A9CD8 = (uint64_t)sel_setDisableUpdateMask_;
  qword_1EB2A9CF0 = (uint64_t)sel_discretizesTime;
  qword_1EB2A9CF8 = (uint64_t)sel_setDiscretizesTime_;
  qword_1EB2A9D00 = (uint64_t)sel_displayMaximumDesiredEDR;
  qword_1EB2A9D08 = (uint64_t)sel_setDisplayMaximumDesiredEDR_;
  qword_1EB2A9D30 = (uint64_t)sel_isDoubleSided;
  qword_1EB2A9D38 = (uint64_t)sel_setDoubleSided_;
  qword_1EB2A9D60 = (uint64_t)sel_isDrawingEnabled;
  qword_1EB2A9D68 = (uint64_t)sel_setDrawingEnabled_;
  qword_1EB2A9D70 = (uint64_t)sel_drawsAsynchronously;
  qword_1EB2A9D78 = (uint64_t)sel_setDrawsAsynchronously_;
  qword_1EB2A9D80 = (uint64_t)sel_duration;
  qword_1EB2A9D88 = (uint64_t)sel_setDuration_;
  qword_1EB2A9D90 = (uint64_t)sel_earliestAutomaticCommitTime;
  qword_1EB2A9D98 = (uint64_t)sel_setEarliestAutomaticCommitTime_;
  qword_1EB2A9DB0 = (uint64_t)sel_edgeAntialiasingMask;
  qword_1EB2A9DB8 = (uint64_t)sel_setEdgeAntialiasingMask_;
  qword_1EB2A9DE0 = (uint64_t)sel_emissionLatitude;
  qword_1EB2A9DE8 = (uint64_t)sel_setEmissionLatitude_;
  qword_1EB2A9DF0 = (uint64_t)sel_emissionLongitude;
  qword_1EB2A9DF8 = (uint64_t)sel_setEmissionLongitude_;
  qword_1EB2A9E00 = (uint64_t)sel_emissionRange;
  qword_1EB2A9E08 = (uint64_t)sel_setEmissionRange_;
  qword_1EB2A9E10 = (uint64_t)sel_emitterBehaviors;
  qword_1EB2A9E18 = (uint64_t)sel_setEmitterBehaviors_;
  qword_1EB2A9E20 = (uint64_t)sel_emitterCells;
  qword_1EB2A9E28 = (uint64_t)sel_setEmitterCells_;
  qword_1EB2A9E30 = (uint64_t)sel_emitterDepth;
  qword_1EB2A9E38 = (uint64_t)sel_setEmitterDepth_;
  qword_1EB2A9E40 = (uint64_t)sel_emitterDuration;
  qword_1EB2A9E48 = (uint64_t)sel_setEmitterDuration_;
  qword_1EB2A9E50 = (uint64_t)sel_emitterMode;
  qword_1EB2A9E58 = (uint64_t)sel_setEmitterMode_;
  qword_1EB2A9E60 = (uint64_t)sel_emitterPath;
  qword_1EB2A9E68 = (uint64_t)sel_setEmitterPath_;
  qword_1EB2A9E70 = (uint64_t)sel_emitterPosition;
  qword_1EB2A9E78 = (uint64_t)sel_setEmitterPosition_;
  qword_1EB2A9E80 = (uint64_t)sel_emitterRects;
  qword_1EB2A9E88 = (uint64_t)sel_setEmitterRects_;
  qword_1EB2A9E90 = (uint64_t)sel_emitterShape;
  qword_1EB2A9E98 = (uint64_t)sel_setEmitterShape_;
  qword_1EB2A9EA0 = (uint64_t)sel_emitterSize;
  qword_1EB2A9EA8 = (uint64_t)sel_setEmitterSize_;
  qword_1EB2A9EB0 = (uint64_t)sel_emitterZPosition;
  qword_1EB2A9EB8 = (uint64_t)sel_setEmitterZPosition_;
  qword_1EB2A9EC0 = (uint64_t)sel_emptyLowLatency;
  qword_1EB2A9EC8 = (uint64_t)sel_setEmptyLowLatency_;
  qword_1EB2A9ED0 = (uint64_t)sel_enabled;
  qword_1EB2A9ED8 = (uint64_t)sel_setEnabled_;
  qword_1EB2A9EF0 = (uint64_t)sel_endAngle;
  qword_1EB2A9EF8 = (uint64_t)sel_setEndAngle_;
  qword_1EB2A9F00 = (uint64_t)sel_endPoint;
  qword_1EB2A9F08 = (uint64_t)sel_setEndPoint_;
  qword_1EB2A9F10 = (uint64_t)sel_endProgress;
  qword_1EB2A9F18 = (uint64_t)sel_setEndProgress_;
  qword_1EB2A9F70 = (uint64_t)sel_fillColor;
  qword_1EB2AA9F0 = (uint64_t)sel_minificationFilterBias;
  qword_1EB2AA9F8 = (uint64_t)sel_setMinificationFilterBias_;
  qword_1EB2AA9E0 = (uint64_t)sel_minificationFilter;
  qword_1EB2AA9E8 = (uint64_t)sel_setMinificationFilter_;
  qword_1EB2AA9B0 = (uint64_t)sel_meshTransform;
  qword_1EB2AA9B8 = (uint64_t)sel_setMeshTransform_;
  qword_1EB2AA9A0 = (uint64_t)sel_maximumTileScale;
  qword_1EB2AA9A8 = (uint64_t)sel_setMaximumTileScale_;
  qword_1EB2AA990 = (uint64_t)sel_maximum;
  qword_1EB2AA998 = (uint64_t)sel_setMaximum_;
  qword_1EB2AA980 = (uint64_t)sel_matchesTransform;
  qword_1EB2AA988 = (uint64_t)sel_setMatchesTransform_;
  qword_1EB2AA970 = (uint64_t)sel_matchesPosition;
  qword_1EB2AA978 = (uint64_t)sel_setMatchesPosition_;
  qword_1EB2AA960 = (uint64_t)sel_matchesOpacity;
  qword_1EB2AA968 = (uint64_t)sel_setMatchesOpacity_;
  qword_1EB2AA950 = (uint64_t)sel_massRange;
  qword_1EB2AA958 = (uint64_t)sel_setMassRange_;
  qword_1EB2AA940 = (uint64_t)sel_mass;
  qword_1EB2AA948 = (uint64_t)sel_setMass_;
  qword_1EB2AA930 = (uint64_t)sel_masksToBounds;
  qword_1EB2AA938 = (uint64_t)sel_setMasksToBounds_;
  qword_1EB2AA920 = (uint64_t)sel_maskedCorners;
  qword_1EB2AA928 = (uint64_t)sel_setMaskedCorners_;
  qword_1EB2AA910 = (uint64_t)sel_mask;
  qword_1EB2AA918 = (uint64_t)sel_setMask_;
  qword_1EB2AA900 = (uint64_t)sel_marginWidth;
  qword_1EB2AA908 = (uint64_t)sel_setMarginWidth_;
  qword_1EB2AA8E0 = (uint64_t)sel_magnificationFilter;
  qword_1EB2AA8E8 = (uint64_t)sel_setMagnificationFilter_;
  qword_1EB2AA870 = (uint64_t)sel_lowLatency;
  qword_1EB2AA878 = (uint64_t)sel_setLowLatency_;
  qword_1EB2AA860 = (uint64_t)sel_locations;
  qword_1EB2AA868 = (uint64_t)sel_setLocations_;
  qword_1EB2AA850 = (uint64_t)sel_literalContentsCenter;
  qword_1EB2AA858 = (uint64_t)sel_setLiteralContentsCenter_;
  qword_1EB2AA7F0 = (uint64_t)sel_lineWidth;
  qword_1EB2AA7F8 = (uint64_t)sel_setLineWidth_;
  qword_1EB2AA7E0 = (uint64_t)sel_lineJoin;
  qword_1EB2AA7E8 = (uint64_t)sel_setLineJoin_;
  qword_1EB2AA7D0 = (uint64_t)sel_lineDashPhase;
  qword_1EB2AA7D8 = (uint64_t)sel_setLineDashPhase_;
  qword_1EB2AA7C0 = (uint64_t)sel_lineDashPattern;
  qword_1EB2AA7C8 = (uint64_t)sel_setLineDashPattern_;
  qword_1EB2AA7B0 = (uint64_t)sel_lineCap;
  qword_1EB2AA7B8 = (uint64_t)sel_setLineCap_;
  qword_1EB2AA750 = (uint64_t)sel_lifetimeRange;
  qword_1EB2AA758 = (uint64_t)sel_setLifetimeRange_;
  qword_1EB2AA740 = (uint64_t)sel_lifetime;
  qword_1EB2AA748 = (uint64_t)sel_setLifetime_;
  qword_1EB2AA730 = (uint64_t)sel_levelsOfDetailBias;
  qword_1EB2AA738 = (uint64_t)sel_setLevelsOfDetailBias_;
  qword_1EB2AA720 = (uint64_t)sel_levelsOfDetail;
  qword_1EB2AA728 = (uint64_t)sel_setLevelsOfDetail_;
  qword_1EB2AA6D0 = (uint64_t)sel_keyTimes;
  qword_1EB2AA6D8 = (uint64_t)sel_setKeyTimes_;
  qword_1EB2AA6C0 = (uint64_t)sel_keyPath;
  qword_1EB2AA6C8 = (uint64_t)sel_setKeyPath_;
  qword_1EB2AA6B0 = (uint64_t)&sel_key;
  qword_1EB2AA6B8 = (uint64_t)sel_setKey_;
  qword_1EB2AA690 = (uint64_t)sel_invertsShape;
  qword_1EB2AA698 = (uint64_t)sel_setInvertsShape_;
  qword_1EB2AA680 = (uint64_t)sel_invertsShadow;
  qword_1EB2AA688 = (uint64_t)sel_setInvertsShadow_;
  qword_1EB2AA670 = (uint64_t)sel_invertsMask;
  qword_1EB2AA678 = (uint64_t)sel_setInvertsMask_;
  qword_1EB2AA640 = (uint64_t)sel_interpolations;
  qword_1EB2AA648 = (uint64_t)sel_setInterpolations_;
  qword_1EB2AA630 = (uint64_t)sel_instanceTransform;
  qword_1EB2AA638 = (uint64_t)sel_setInstanceTransform_;
  qword_1EB2AA620 = (uint64_t)sel_instanceRedOffset;
  qword_1EB2AA628 = (uint64_t)sel_setInstanceRedOffset_;
  qword_1EB2AA610 = (uint64_t)sel_instanceGreenOffset;
  qword_1EB2AA618 = (uint64_t)sel_setInstanceGreenOffset_;
  qword_1EB2AA600 = (uint64_t)sel_instanceDelay;
  qword_1EB2AA608 = (uint64_t)sel_setInstanceDelay_;
  qword_1EB2AA5F0 = (uint64_t)sel_instanceCount;
  qword_1EB2AA5F8 = (uint64_t)sel_setInstanceCount_;
  qword_1EB2AA5E0 = (uint64_t)sel_instanceColor;
  qword_1EB2AA5E8 = (uint64_t)sel_setInstanceColor_;
  qword_1EB2AA5D0 = (uint64_t)sel_instanceBlueOffset;
  qword_1EB2AA5D8 = (uint64_t)sel_setInstanceBlueOffset_;
  qword_1EB2AA5C0 = (uint64_t)sel_instanceAlphaOffset;
  qword_1EB2AA5C8 = (uint64_t)sel_setInstanceAlphaOffset_;
  qword_1EB2AA580 = (uint64_t)sel_inputTime;
  qword_1EB2AA588 = (uint64_t)sel_setInputTime_;
  qword_1EB2AA280 = (uint64_t)sel_inheritsTiming;
  qword_1EB2AA288 = (uint64_t)sel_setInheritsTiming_;
  qword_1EB2AA270 = (uint64_t)sel_inheritsSecurity;
  qword_1EB2AA278 = (uint64_t)sel_setInheritsSecurity_;
  qword_1EB2AA260 = (uint64_t)sel_ignoresScreenClip;
  qword_1EB2AA268 = (uint64_t)sel_setIgnoresScreenClip_;
  qword_1EB2AA228 = (uint64_t)sel_setIdentifier_;
  qword_1EB2AA230 = (uint64_t)sel_identifiers;
  qword_1EB2AA1E8 = (uint64_t)sel_setHitTestsContentsAlphaChannel_;
  qword_1EB2AA220 = (uint64_t)sel_identifier;
  qword_1EB2AA1D8 = (uint64_t)sel_setHitTestsAsOpaque_;
  qword_1EB2AA1E0 = (uint64_t)sel_hitTestsContentsAlphaChannel;
  qword_1EB2AA1C8 = (uint64_t)sel_setHighFrameRateReason_;
  qword_1EB2AA1D0 = (uint64_t)sel_hitTestsAsOpaque;
  qword_1EB2AA1B8 = (uint64_t)sel_setHidesSourceLayer_;
  qword_1EB2AA1C0 = (uint64_t)sel_highFrameRateReason;
  qword_1EB2AA1A8 = (uint64_t)sel_setHidden_;
  qword_1EB2AA1B0 = (uint64_t)sel_hidesSourceLayer;
  qword_1EB2AA198 = (uint64_t)sel_setHeight_;
  qword_1EB2AA1A0 = (uint64_t)sel_isHidden;
  qword_1EB2AA180 = (uint64_t)sel_hash;
  qword_1EB2AA190 = (uint64_t)sel_height;
  qword_1EB2AA160 = (uint64_t)sel_groupNamespace;
  qword_1EB2AA168 = (uint64_t)sel_setGroupNamespace_;
  qword_1EB2AA150 = (uint64_t)sel_groupName;
  qword_1EB2AA158 = (uint64_t)sel_setGroupName_;
  qword_1EB2AA140 = (uint64_t)sel_greenSpeed;
  qword_1EB2AA148 = (uint64_t)sel_setGreenSpeed_;
  qword_1EB2AA130 = (uint64_t)sel_greenRange;
  qword_1EB2AA138 = (uint64_t)sel_setGreenRange_;
  qword_1EB2AA110 = (uint64_t)sel_isGeometryFlipped;
  qword_1EB2AA118 = (uint64_t)sel_setGeometryFlipped_;
  qword_1EB2AA0F0 = (uint64_t)sel_gain;
  qword_1EB2AA0F8 = (uint64_t)sel_setGain_;
  qword_1EB2AA0D0 = (uint64_t)sel_isFrozen;
  qword_1EB2AA0D8 = (uint64_t)sel_setFrozen_;
  qword_1EB2AA0C0 = (uint64_t)sel_fromValue;
  qword_1EB2AA0C8 = (uint64_t)sel_setFromValue_;
  qword_1EB2AA050 = (uint64_t)sel_frameInterval;
  qword_1EB2AA058 = (uint64_t)sel_setFrameInterval_;
  qword_1EB2AA040 = (uint64_t)sel_frame;
  qword_1EB2AA048 = (uint64_t)sel_setFrame_;
  qword_1EB2AA030 = (uint64_t)sel_foregroundColor;
  qword_1EB2AA038 = (uint64_t)sel_setForegroundColor_;
  qword_1EB2AA010 = (uint64_t)sel_fontSmoothingStyle;
  qword_1EB2AA018 = (uint64_t)sel_setFontSmoothingStyle_;
  qword_1EB2AA000 = (uint64_t)sel_fontSize;
  qword_1EB2AA008 = (uint64_t)sel_setFontSize_;
  qword_1EB2A9FF0 = (uint64_t)sel_font;
  qword_1EB2A9FF8 = (uint64_t)sel_setFont_;
  qword_1EB2A9FD0 = (uint64_t)sel_flipsHorizontalAxis;
  qword_1EB2A9FD8 = (uint64_t)sel_setFlipsHorizontalAxis_;
  qword_1EB2A9FB0 = (uint64_t)sel_filters;
  qword_1EB2A9FB8 = (uint64_t)sel_setFilters_;
  qword_1EB2A9F90 = (uint64_t)sel_fillRule;
  qword_1EB2A9F98 = (uint64_t)sel_setFillRule_;
  qword_1EB2A9F80 = (uint64_t)sel_fillMode;
  qword_1EB2A9F88 = (uint64_t)sel_setFillMode_;
  qword_1EB2A9F78 = (uint64_t)sel_setFillColor_;
  qword_1EB2AAA00 = (uint64_t)sel_minimum;
  qword_1EB2AAA08 = (uint64_t)sel_setMinimum_;
  qword_1EB2AAA10 = (uint64_t)sel_miterLimit;
  qword_1EB2AAA18 = (uint64_t)sel_setMiterLimit_;
  qword_1EB2AAA60 = (uint64_t)sel_name;
  qword_1EB2AAA68 = (uint64_t)sel_setName_;
  qword_1EB2AAA80 = (uint64_t)sel_needsDisplayOnBoundsChange;
  qword_1EB2AAA88 = (uint64_t)sel_setNeedsDisplayOnBoundsChange_;
  qword_1EB2AAA90 = (uint64_t)sel_needsLayoutOnGeometryChange;
  qword_1EB2AAA98 = (uint64_t)sel_setNeedsLayoutOnGeometryChange_;
  qword_1EB2AAAB0 = (uint64_t)sel_noiseScale;
  qword_1EB2AAAB8 = (uint64_t)sel_setNoiseScale_;
  qword_1EB2AAAD0 = (uint64_t)sel_offset;
  qword_1EB2AAAD8 = (uint64_t)sel_setOffset_;
  qword_1EB2AAB20 = (uint64_t)sel_opacity;
  qword_1EB2AAB28 = (uint64_t)sel_setOpacity_;
  qword_1EB2AAB40 = (uint64_t)sel_isOpaque;
  qword_1EB2AAB48 = (uint64_t)sel_setOpaque_;
  qword_1EB2AAB50 = (uint64_t)sel_options;
  qword_1EB2AAB58 = (uint64_t)sel_setOptions_;
  qword_1EB2AAB60 = (uint64_t)sel_orientationLatitude;
  qword_1EB2AAB68 = (uint64_t)sel_setOrientationLatitude_;
  qword_1EB2AAB70 = (uint64_t)sel_orientationLongitude;
  qword_1EB2AAB78 = (uint64_t)sel_setOrientationLongitude_;
  qword_1EB2AAB80 = (uint64_t)sel_orientationRange;
  qword_1EB2AAB88 = (uint64_t)sel_setOrientationRange_;
  qword_1EB2AABC0 = (uint64_t)sel_overrides;
  qword_1EB2AABC8 = (uint64_t)sel_setOverrides_;
  qword_1EB2AABF0 = (uint64_t)sel_particleType;
  qword_1EB2AABF8 = (uint64_t)sel_setParticleType_;
  qword_1EB2AAC00 = (uint64_t)sel_path;
  qword_1EB2AAC08 = (uint64_t)sel_setPath_;
  qword_1EB2AACF0 = (uint64_t)sel_position;
  qword_1EB2AACF8 = (uint64_t)sel_setPosition_;
  qword_1EB2AAD00 = (uint64_t)sel_preallocatesScreenArea;
  qword_1EB2AAD08 = (uint64_t)sel_setPreallocatesScreenArea_;
  qword_1EB2AAD10 = (uint64_t)sel_preferredFramesPerSecond;
  qword_1EB2AAD18 = (uint64_t)sel_setPreferredFramesPerSecond_;
  qword_1EB2AAD20 = (uint64_t)sel_preferredFrameRateRangeMaximum;
  qword_1EB2AAD28 = (uint64_t)sel_setPreferredFrameRateRangeMaximum_;
  qword_1EB2AAD30 = (uint64_t)sel_preferredFrameRateRangeMinimum;
  qword_1EB2AAD38 = (uint64_t)sel_setPreferredFrameRateRangeMinimum_;
  qword_1EB2AAD40 = (uint64_t)sel_preferredFrameRateRangePreferred;
  qword_1EB2AAD48 = (uint64_t)sel_setPreferredFrameRateRangePreferred_;
  qword_1EB2AAD50 = (uint64_t)sel_preloadsCache;
  qword_1EB2AAD58 = (uint64_t)sel_setPreloadsCache_;
  qword_1EB2AAD60 = (uint64_t)sel_premultiplied;
  qword_1EB2AAD68 = (uint64_t)sel_setPremultiplied_;
  qword_1EB2AAD70 = (uint64_t)sel_presentationModifiers;
  qword_1EB2AAD78 = (uint64_t)sel_setPresentationModifiers_;
  qword_1EB2AAD80 = (uint64_t)sel_preservesDepth;
  qword_1EB2AAD88 = (uint64_t)sel_setPreservesDepth_;
  qword_1EB2AAD90 = (uint64_t)sel_preservesFlip;
  qword_1EB2AAD98 = (uint64_t)sel_setPreservesFlip_;
  qword_1EB2AADA0 = (uint64_t)sel_privacyIndicatorType;
  qword_1EB2AADA8 = (uint64_t)sel_setPrivacyIndicatorType_;
  qword_1EB2AADC0 = (uint64_t)sel_punchoutShadow;
  qword_1EB2AADC8 = (uint64_t)sel_setPunchoutShadow_;
  qword_1EB2AAE10 = (uint64_t)sel_rasterizationPrefersDisplayCompositing;
  qword_1EB2AAE18 = (uint64_t)sel_setRasterizationPrefersDisplayCompositing_;
  qword_1EB2AAE20 = (uint64_t)sel_rasterizationPrefersWindowServerAwareBackdrops;
  qword_1EB2AAE28 = (uint64_t)sel_setRasterizationPrefersWindowServerAwareBackdrops_;
  qword_1EB2AAE30 = (uint64_t)sel_rasterizationScale;
  qword_1EB2AAE38 = (uint64_t)sel_setRasterizationScale_;
  qword_1EB2AAE40 = (uint64_t)sel_rectangle;
  qword_1EB2AAE48 = (uint64_t)sel_setRectangle_;
  qword_1EB2AAE60 = (uint64_t)sel_redRange;
  qword_1EB2AAE68 = (uint64_t)sel_setRedRange_;
  qword_1EB2AAE70 = (uint64_t)sel_redSpeed;
  qword_1EB2AAE78 = (uint64_t)sel_setRedSpeed_;
  qword_1EB2AAE80 = (uint64_t)sel_reducesCaptureBitDepth;
  qword_1EB2AAE88 = (uint64_t)sel_setReducesCaptureBitDepth_;
  qword_1EB2AAEA0 = (uint64_t)sel_remoteInputMachTime;
  qword_1EB2AAEA8 = (uint64_t)sel_setRemoteInputMachTime_;
  qword_1EB2AAEB0 = (uint64_t)sel_isRemovedOnCompletion;
  qword_1EB2AAEB8 = (uint64_t)sel_setRemovedOnCompletion_;
  qword_1EB2AAEC0 = (uint64_t)sel_rendersAsynchronously;
  qword_1EB2AAEC8 = (uint64_t)sel_setRendersAsynchronously_;
  qword_1EB2AAED0 = (uint64_t)sel_renderMode;
  qword_1EB2AAED8 = (uint64_t)sel_setRenderMode_;
  qword_1EB2AAEE0 = (uint64_t)sel_repeatCount;
  qword_1EB2AAEE8 = (uint64_t)sel_setRepeatCount_;
  qword_1EB2AAEF0 = (uint64_t)sel_repeatDuration;
  qword_1EB2AAEF8 = (uint64_t)sel_setRepeatDuration_;
  qword_1EB2AAF30 = (uint64_t)sel_resizesHostedContext;
  qword_1EB2AAF38 = (uint64_t)sel_setResizesHostedContext_;
  qword_1EB2AAF60 = (uint64_t)sel_rimColor;
  qword_1EB2AAF68 = (uint64_t)sel_setRimColor_;
  qword_1EB2AAF70 = (uint64_t)sel_rimOpacity;
  qword_1EB2AAF78 = (uint64_t)sel_setRimOpacity_;
  qword_1EB2AAF80 = (uint64_t)sel_rimPathIsBounds;
  qword_1EB2AAF88 = (uint64_t)sel_setRimPathIsBounds_;
  qword_1EB2AAF90 = (uint64_t)sel_rimWidth;
  qword_1EB2AAF98 = (uint64_t)sel_setRimWidth_;
  qword_1EB2AAFA0 = (uint64_t)sel_rotation;
  qword_1EB2AAFA8 = (uint64_t)sel_setRotation_;
  qword_1EB2AAFB0 = (uint64_t)sel_rotationMode;
  qword_1EB2AAFB8 = (uint64_t)sel_setRotationMode_;
  qword_1EB2AAFC0 = (uint64_t)sel_rotationRange;
  qword_1EB2AAFC8 = (uint64_t)sel_setRotationRange_;
  qword_1EB2AAFD0 = (uint64_t)sel_roundsToInteger;
  qword_1EB2AAFD8 = (uint64_t)sel_setRoundsToInteger_;
  qword_1EB2AAFF0 = (uint64_t)sel_scale;
  qword_1EB2AAFF8 = (uint64_t)sel_setScale_;
  qword_1EB2AB000 = (uint64_t)sel_scaleRange;
  qword_1EB2AB008 = (uint64_t)sel_setScaleRange_;
  qword_1EB2AB010 = (uint64_t)sel_scaleSpeed;
  qword_1EB2AB018 = (uint64_t)sel_setScaleSpeed_;
  qword_1EB2AB040 = (uint64_t)sel_scrollMode;
  qword_1EB2AB048 = (uint64_t)sel_setScrollMode_;
  qword_1EB2AB060 = (uint64_t)sel_securityMode;
  qword_1EB2AB068 = (uint64_t)sel_setSecurityMode_;
  qword_1EB2AB070 = (uint64_t)sel_seed;
  qword_1EB2AB078 = (uint64_t)sel_setSeed_;
  qword_1EB2AB0D0 = (uint64_t)sel_sequestered;
  qword_1EB2AB0D8 = (uint64_t)sel_setSequestered_;
  qword_1EB2AB0E0 = (uint64_t)sel_shadowColor;
  qword_1EB2AB0E8 = (uint64_t)sel_setShadowColor_;
  qword_1EB2AB0F0 = (uint64_t)sel_shadowOffset;
  qword_1EB2AB0F8 = (uint64_t)sel_setShadowOffset_;
  qword_1EB2AB100 = (uint64_t)sel_shadowOpacity;
  qword_1EB2AB108 = (uint64_t)sel_setShadowOpacity_;
  qword_1EB2AB110 = (uint64_t)sel_shadowPath;
  qword_1EB2AB118 = (uint64_t)sel_setShadowPath_;
  qword_1EB2AB120 = (uint64_t)sel_shadowPathIsBounds;
  qword_1EB2AB128 = (uint64_t)sel_setShadowPathIsBounds_;
  qword_1EB2AB130 = (uint64_t)sel_shadowRadius;
  qword_1EB2AB138 = (uint64_t)sel_setShadowRadius_;
  qword_1EB2AB140 = (uint64_t)sel_sharpness;
  qword_1EB2AB148 = (uint64_t)sel_setSharpness_;
  qword_1EB2AB160 = (uint64_t)sel_shouldFlatten;
  qword_1EB2AB168 = (uint64_t)sel_setShouldFlatten_;
  qword_1EB2AB150 = (uint64_t)sel_shouldRasterize;
  qword_1EB2AB158 = (uint64_t)sel_setShouldRasterize_;
  qword_1EB2AB170 = (uint64_t)sel_shouldReflatten;
  qword_1EB2AB178 = (uint64_t)sel_setShouldReflatten_;
  qword_1EB2AB1B0 = (uint64_t)sel_sizeRequisition;
  qword_1EB2AB1B8 = (uint64_t)sel_setSizeRequisition_;
  qword_1EB2AB1D0 = (uint64_t)sel_softRim;
  qword_1EB2AB1D8 = (uint64_t)sel_setSoftRim_;
  qword_1EB2AB1E0 = (uint64_t)sel_sortsSublayers;
  qword_1EB2AB1E8 = (uint64_t)sel_setSortsSublayers_;
  qword_1EB2AB200 = (uint64_t)sel_sourceContextId;
  qword_1EB2AB208 = (uint64_t)sel_setSourceContextId_;
  qword_1EB2AB220 = (uint64_t)sel_sourceLayer;
  qword_1EB2AB228 = (uint64_t)sel_setSourceLayer_;
  qword_1EB2AB230 = (uint64_t)sel_sourceLayerRenderId;
  qword_1EB2AB238 = (uint64_t)sel_setSourceLayerRenderId_;
  qword_1EB2AB260 = (uint64_t)sel_sourcePoints;
  qword_1EB2AB268 = (uint64_t)sel_setSourcePoints_;
  qword_1EB2AB270 = (uint64_t)sel_speed;
  qword_1EB2AB278 = (uint64_t)sel_setSpeed_;
  qword_1EB2AB290 = (uint64_t)sel_spin;
  qword_1EB2AB298 = (uint64_t)sel_setSpin_;
  qword_1EB2AB2A0 = (uint64_t)sel_spinBias;
  qword_1EB2AB2A8 = (uint64_t)sel_setSpinBias_;
  qword_1EB2AB2B0 = (uint64_t)sel_spinRange;
  qword_1EB2AB2B8 = (uint64_t)sel_setSpinRange_;
  qword_1EB2AB300 = (uint64_t)sel_startAngle;
  qword_1EB2AB308 = (uint64_t)sel_setStartAngle_;
  qword_1EB2AB310 = (uint64_t)sel_startPoint;
  qword_1EB2AB318 = (uint64_t)sel_setStartPoint_;
  qword_1EB2AB320 = (uint64_t)sel_startProgress;
  qword_1EB2AB328 = (uint64_t)sel_setStartProgress_;
  qword_1EB2AB330 = (uint64_t)sel_stiffness;
  qword_1EB2AB338 = (uint64_t)sel_setStiffness_;
  qword_1EB2AB340 = (uint64_t)sel_stopsHitTestTransformAccumulation;
  qword_1EB2AB348 = (uint64_t)sel_setStopsHitTestTransformAccumulation_;
  qword_1EB2AB350 = (uint64_t)sel_stopsSecureSuperlayersValidation;
  qword_1EB2AB358 = (uint64_t)sel_setStopsSecureSuperlayersValidation_;
  qword_1EB2AB360 = (uint64_t)sel_string;
  qword_1EB2AB368 = (uint64_t)sel_setString_;
  qword_1EB2AB370 = (uint64_t)sel_strokeColor;
  qword_1EB2AB378 = (uint64_t)sel_setStrokeColor_;
  qword_1EB2AB380 = (uint64_t)sel_strokeEnd;
  qword_1EB2AB388 = (uint64_t)sel_setStrokeEnd_;
  qword_1EB2AB390 = (uint64_t)sel_strokeStart;
  qword_1EB2AB398 = (uint64_t)sel_setStrokeStart_;
  qword_1EB2AB3A0 = (uint64_t)sel_style;
  qword_1EB2AB3A8 = (uint64_t)sel_setStyle_;
  qword_1EB2AB3B0 = (uint64_t)sel_sublayerTransform;
  qword_1EB2AB3B8 = (uint64_t)sel_setSublayerTransform_;
  qword_1EB2AB3C0 = (uint64_t)sel_sublayers;
  qword_1EB2AB3C8 = (uint64_t)sel_setSublayers_;
  qword_1EB2AB410 = (uint64_t)sel_subtype;
  qword_1EB2AB418 = (uint64_t)sel_setSubtype_;
  qword_1EB2AB420 = (uint64_t)sel_superlayer;
  qword_1EB2AB430 = (uint64_t)sel_surface;
  qword_1EB2AB438 = (uint64_t)sel_setSurface_;
  qword_1EB2AB440 = (uint64_t)sel_targetsSuperlayer;
  qword_1EB2AB448 = (uint64_t)sel_setTargetsSuperlayer_;
  qword_1EB2AB450 = (uint64_t)sel_tensionValues;
  qword_1EB2AB458 = (uint64_t)sel_setTensionValues_;
  qword_1EB2AB460 = (uint64_t)sel_tileSize;
  qword_1EB2AB468 = (uint64_t)sel_setTileSize_;
  qword_1EB2AB470 = (uint64_t)sel_timeOffset;
  qword_1EB2AB478 = (uint64_t)sel_setTimeOffset_;
  qword_1EB2AB480 = (uint64_t)sel_timingFunction;
  qword_1EB2AB488 = (uint64_t)sel_setTimingFunction_;
  qword_1EB2AB490 = (uint64_t)sel_timingFunctions;
  qword_1EB2AB498 = (uint64_t)sel_setTimingFunctions_;
  qword_1EB2AB4A0 = (uint64_t)sel_toValue;
  qword_1EB2AB4A8 = (uint64_t)sel_setToValue_;
  qword_1EB2AB4B0 = (uint64_t)sel_toneMapMode;
  qword_1EB2AB4B8 = (uint64_t)sel_setToneMapMode_;
  qword_1EB2AB4C0 = (uint64_t)sel_toneMapToStandardDynamicRange;
  qword_1EB2AB4C8 = (uint64_t)sel_setToneMapToStandardDynamicRange_;
  qword_1EB2AB500 = (uint64_t)sel_tracksLuma;
  qword_1EB2AB508 = (uint64_t)sel_setTracksLuma_;
  qword_1EB2AB510 = (uint64_t)sel_transform;
  qword_1EB2AB518 = (uint64_t)sel_setTransform_;
  qword_1EB2AB520 = (uint64_t)sel_transformsToScreenSpace;
  qword_1EB2AB528 = (uint64_t)sel_setTransformsToScreenSpace_;
  qword_1EB2AB540 = (uint64_t)sel_transitionFlags;
  qword_1EB2AB548 = (uint64_t)sel_setTransitionFlags_;
  qword_1EB2AB560 = (uint64_t)sel_treatRec709AsSRGB;
  qword_1EB2AB568 = (uint64_t)sel_setTreatRec709AsSRGB_;
  qword_1EB2AB580 = (uint64_t)sel_truncationMode;
  qword_1EB2AB588 = (uint64_t)sel_setTruncationMode_;
  qword_1EB2AB590 = (uint64_t)sel_truncationString;
  qword_1EB2AB598 = (uint64_t)sel_setTruncationString_;
  qword_1EB2AB5A0 = (uint64_t)sel_type;
  qword_1EB2AB5A8 = (uint64_t)sel_setType_;
  qword_1EB2AB5C0 = (uint64_t)sel_updateDeadline;
  qword_1EB2AB5C8 = (uint64_t)sel_setUpdateDeadline_;
  qword_1EB2AB5D0 = (uint64_t)sel_updateInterval;
  qword_1EB2AB5D8 = (uint64_t)sel_setUpdateInterval_;
  qword_1EB2AB5E0 = (uint64_t)sel_usesNormalizedCoordinates;
  qword_1EB2AB5E8 = (uint64_t)sel_setUsesNormalizedCoordinates_;
  qword_1EB2AB5F0 = (uint64_t)sel_usesWebKitBehavior;
  qword_1EB2AB5F8 = (uint64_t)sel_setUsesWebKitBehavior_;
  qword_1EB2AB600 = (uint64_t)sel_value;
  qword_1EB2AB608 = (uint64_t)sel_setValue_;
  qword_1EB2AB610 = (uint64_t)sel_valueFunction;
  qword_1EB2AB618 = (uint64_t)sel_setValueFunction_;
  qword_1EB2AB640 = (uint64_t)sel_values;
  qword_1EB2AB648 = (uint64_t)sel_setValues_;
  qword_1EB2AB660 = (uint64_t)sel_velocity;
  qword_1EB2AB668 = (uint64_t)sel_setVelocity_;
  qword_1EB2AB670 = (uint64_t)sel_velocityRange;
  qword_1EB2AB678 = (uint64_t)sel_setVelocityRange_;
  qword_1EB2AB730 = (uint64_t)sel_wantsExtendedDynamicRangeContent;
  qword_1EB2AB738 = (uint64_t)sel_setWantsExtendedDynamicRangeContent_;
  qword_1EB2AB750 = (uint64_t)sel_width;
  qword_1EB2AB758 = (uint64_t)sel_setWidth_;
  qword_1EB2AB770 = (uint64_t)sel_isWrapped;
  qword_1EB2AB778 = (uint64_t)sel_setWrapped_;
  qword_1EB2AB790 = (uint64_t)sel_xAcceleration;
  qword_1EB2AB798 = (uint64_t)sel_setXAcceleration_;
  qword_1EB2AB7D0 = (uint64_t)sel_yAcceleration;
  qword_1EB2AB7D8 = (uint64_t)sel_setYAcceleration_;
  qword_1EB2AB7F0 = (uint64_t)sel_zAcceleration;
  qword_1EB2AB7F8 = (uint64_t)sel_setZAcceleration_;
  qword_1EB2AB800 = (uint64_t)sel_zPosition;
  qword_1EB2AB808 = (uint64_t)sel_setZPosition_;
  qword_1EB2AB810 = (uint64_t)sel_zoom;
  qword_1EB2AB818 = (uint64_t)sel_setZoom_;
}

_DWORD *CAML::Context::create_sax_vtable(CAML::Context *this)
{
  if (CAML::Context::_sax_vtable) {
    __assert_rtn("create_sax_vtable", "CAMLContext.cpp", 731, "!_sax_vtable");
  }
  CFIndex result = malloc_type_calloc(1uLL, 0x100uLL, 0x1080040AADF51B8uLL);
  CAML::Context::_sax_vtable = (uint64_t)result;
  result[54] = -554844497;
  return result;
}

uint64_t __CAMetalContextCreate_block_invoke()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  *(void *)iterator = 0;
  uint64_t result = MEMORY[0x185322F60](*MEMORY[0x1E4F14638], &iterator[1]);
  if (!result)
  {
    for (unsigned int i = 0; ; ++i)
    {
      mach_port_t v2 = iterator[1];
      CFDictionaryRef v3 = IOServiceMatching("IOAcceleratorES");
      uint64_t result = IOServiceGetMatchingServices(v2, v3, iterator);
      if (result) {
        break;
      }
      for (char j = 0; ; char j = 1)
      {
        io_object_t v5 = IOIteratorNext(iterator[0]);
        if (!v5) {
          break;
        }
        IOObjectRelease(v5);
      }
      uint64_t result = IOObjectRelease(iterator[0]);
      if (j & 1 | (i > 0x12B)) {
        break;
      }
      usleep(0x186A0u);
    }
  }
  return result;
}

void sub_1847E616C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

BOOL ___ZN2CA12ColorProgram7Program13color_programEPK21CGColorConversionInfoP12CGColorSpacei28CGColorConversionIterateTypebijffRb_block_invoke_30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  float64x2_t v9 = &CA::callback_timer;
  if (BYTE8(xmmword_1EB2ACC30))
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      BOOL v33 = x_log_category_color;
      if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218240;
        *(void *)&buf[4] = a3;
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = a4;
        _os_log_impl(&dword_184668000, v33, OS_LOG_TYPE_DEFAULT, "Stage = %ld, %ld TRCs\n", buf, 0x16u);
      }
    }
  }
  int v44 = 0;
  long long v42 = 0u;
  long long v43 = 0u;
  CGColorTRCGetFunction();
  int v10 = CGColorTRCGetGammaID();
  uint64_t v11 = a5;
  if ((*(unsigned char *)(a1 + 80) & 0x80) == 0) {
    goto LABEL_6;
  }
  if (v10 != 1)
  {
    if (v10 == 4)
    {
      uint64_t v12 = 0xBu;
      goto LABEL_10;
    }
LABEL_6:
    if (v42 > 9) {
      uint64_t v12 = 0u;
    }
    else {
      uint64_t v12 = dword_1849A63A4[v42];
    }
    goto LABEL_10;
  }
  uint64_t v12 = 0xCu;
LABEL_10:
  uint64_t v13 = CA::ColorProgram::kOpcodeParamCount[v12];
  if (*(int *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) >= a4) {
    uint64_t v14 = a4;
  }
  else {
    uint64_t v14 = *(int *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  if (v14 >= 1)
  {
    uint64_t v15 = 0;
    BOOL v16 = 0;
    unsigned int v37 = v12 - 13;
    unsigned int v34 = v12 - 15;
    unsigned int v38 = v12 - 7;
    unsigned int v39 = v12 - 3;
    uint64_t v35 = v14;
    uint64_t v36 = CA::ColorProgram::kOpcodeParamCount[v12];
    while (1)
    {
      uint64_t v17 = *(void *)(v11 + 8 * v15);
      if (v17 < 0)
      {
        if (v38 < 0xFFFFFFFB) {
          return v16;
        }
        switch((int)v13)
        {
          case 1:
            goto LABEL_48;
          case 2:
            goto LABEL_47;
          case 3:
            goto LABEL_46;
          case 4:
            goto LABEL_45;
          case 5:
            goto LABEL_44;
          case 6:
            goto LABEL_43;
          case 7:
            *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) + 4 * v15 + 96) = 0;
LABEL_43:
            *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) + 4 * v15 + 80) = 0;
LABEL_44:
            *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) + 4 * v15 + 64) = 0;
LABEL_45:
            *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) + 4 * v15 + 48) = 0;
LABEL_46:
            *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) + 4 * v15 + 32) = 0;
LABEL_47:
            *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) + 4 * v15 + 16) = 1065353216;
LABEL_48:
            *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) + 4 * v15) = 1065353216;
            break;
          default:
            goto LABEL_62;
        }
        goto LABEL_62;
      }
      if (v17 >= *(void *)(a2 + 28)) {
        return v16;
      }
      int v41 = 0;
      memset(v40, 0, sizeof(v40));
      CGColorTRCGetFunction();
      float64x2_t v18 = (CGColorTRC *)CGColorTRCPureGammaOriginal();
      if ((*(unsigned char *)(a1 + 80) & 4) == 0 && v39 <= 3 && v18)
      {
        DWORD2(v40[0]) = 1065353216;
        memset((char *)v40 + 12, 0, 20);
      }
      if (*((unsigned char *)v9 + 3128))
      {
        CA::ColorProgram::print_trc((CA::ColorProgram *)v15, *(void *)(v11 + 8 * v15), (uint64_t)v40, v18);
        if (!v15) {
          goto LABEL_24;
        }
      }
      else if (!v15)
      {
        goto LABEL_24;
      }
      if (LODWORD(v40[0]) != v42)
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          int64x2_t v31 = x_log_category_color;
          if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_184668000, v31, OS_LOG_TYPE_INFO, "TRCs are not the same for each color channel, falling back to cube LUT\n", buf, 2u);
          }
        }
        return v16;
      }
LABEL_24:
      if (v12 == 7)
      {
        uint64_t v19 = *(void *)(v11 + 8 * v15);
        if (v19 < 0) {
          goto LABEL_77;
        }
        uint64_t v20 = v12;
        float64x2_t v21 = v9;
        uint64_t v22 = v11;
        uint64_t v23 = 0;
        int v24 = *(_DWORD *)(a1 + 80);
        uint64_t v25 = v19 + 1;
        int v26 = -1;
        while (1)
        {
          int v46 = 0;
          memset(buf, 0, sizeof(buf));
          CGColorTRCGetFunction();
          int v27 = CGColorTRCGetGammaID();
          if ((v24 & 0x80) == 0) {
            break;
          }
          if (v27 == 1)
          {
            int v28 = 12;
          }
          else
          {
            if (v27 != 4) {
              break;
            }
            int v28 = 11;
          }
LABEL_35:
          if (v28 == 7) {
            ++v26;
          }
          if (v25 == ++v23)
          {
            if ((v26 & 0x80000000) == 0)
            {
              *(float *)(*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) + 4 * v15) = (float)(*(_DWORD *)(*(void *)(*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) + 72) + 4 * v26) / *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24));
              *(float *)(*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) + 4 * v15 + 16) = (float)((float)v26 + 0.5) / (float)*(unsigned int *)(*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) + 56);
              float64x2_t v9 = v21;
              uint64_t v11 = v22;
              uint64_t v12 = v20;
              uint64_t v14 = v35;
              uint64_t v13 = v36;
              goto LABEL_62;
            }
LABEL_77:
            __assert_rtn("lut_index_from_trc_index", "CAColorProgram.cpp", 525, "lut_index >= 0");
          }
        }
        if (*(_DWORD *)buf > 9u) {
          int v28 = 0;
        }
        else {
          int v28 = dword_1849A63A4[*(unsigned int *)buf];
        }
        goto LABEL_35;
      }
      if (v37 > 1)
      {
        if (v34 > 1)
        {
          switch((int)v13)
          {
            case 1:
              goto LABEL_61;
            case 2:
              goto LABEL_60;
            case 3:
              goto LABEL_59;
            case 4:
              goto LABEL_58;
            case 5:
              goto LABEL_57;
            case 6:
              goto LABEL_56;
            case 7:
              *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) + 4 * v15 + 96) = HIDWORD(v40[1]);
LABEL_56:
              *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) + 4 * v15 + 80) = DWORD2(v40[1]);
LABEL_57:
              *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) + 4 * v15 + 64) = DWORD1(v40[1]);
LABEL_58:
              *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) + 4 * v15 + 48) = v40[1];
LABEL_59:
              *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) + 4 * v15 + 32) = HIDWORD(v40[0]);
LABEL_60:
              *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) + 4 * v15 + 16) = DWORD2(v40[0]);
LABEL_61:
              *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) + 4 * v15) = DWORD1(v40[0]);
              break;
            default:
              goto LABEL_62;
          }
          goto LABEL_62;
        }
        float v29 = *((float *)&v40[1] + 3);
      }
      else
      {
        float v29 = *((float *)&v40[1] + 1) * 12.0;
      }
      **(float **)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v29;
LABEL_62:
      BOOL v16 = v14 <= ++v15;
      if (v15 == v14) {
        goto LABEL_67;
      }
    }
  }
  BOOL v16 = 1;
LABEL_67:
  *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) |= v12 << *(_DWORD *)(*(void *)(*(void *)(a1 + 72) + 8)
                                                                                          + 24);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) += 5;
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) += 16 * v13;
  return v16;
}

void sub_1847E6D04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, atomic_uint *a12)
{
  CA::Transaction::unlock(v12);
  X::Ref<CA::Layer>::~Ref(&a12);
  _Unwind_Resume(a1);
}

void CA::WindowServer::IOMFBDisplay::update_framebuffer_locked(CA::WindowServer::IOMFBDisplay *this, int a2)
{
  uint64_t v264 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef v3 = (char *)this + 26284;
  if (*(unsigned __int8 *)(*((void *)this + 91) + 2) | *(unsigned __int8 *)(*((void *)this + 91) + 3))
  {
    int v4 = *((_DWORD *)this + 6622) | a2;
    *((_DWORD *)this + 6622) = 0;
    if (!v4) {
      return;
    }
  }
  else
  {
    *((_DWORD *)this + 6622) |= a2 & 0x130;
    LOWORD(v4) = a2 & 0xFECF;
    if ((a2 & 0xFFFFFECF) == 0) {
      return;
    }
  }
  if ((v4 & 0x200) != 0)
  {
    int v5 = *((_WORD *)this + 328) & 0x1C00;
    if (v5 == 1024 || (v5 != 4096 ? (_ZF = *((unsigned char *)this + 28138) == 0) : (_ZF = 0), _ZF && *((unsigned char *)this + 27051)))
    {
      *(_DWORD *)v247 = 0;
      if (!IOMobileFramebufferGetDigitalOutState())
      {
        v3[1884] = 0;
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          uint64_t v7 = x_log_category_windowserver;
          if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
          {
            int v8 = *((_DWORD *)this + 6);
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v8;
            _os_log_impl(&dword_184668000, v7, OS_LOG_TYPE_DEFAULT, "Display %u get_hotplug_state - not active", buf, 8u);
          }
        }
        return;
      }
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        float64x2_t v9 = x_log_category_windowserver;
        if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
        {
          int v10 = *((_DWORD *)this + 6);
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v10;
          _os_log_impl(&dword_184668000, v9, OS_LOG_TYPE_DEFAULT, "Display %u get_hotplug_state - active", buf, 8u);
        }
      }
    }
  }
  int v11 = *((unsigned __int8 *)this + 672);
  *((unsigned char *)this + 672) = v11 + 1;
  if (!v11) {
    *((void *)this + 83) = mach_continuous_time();
  }
  uint64_t v12 = (unsigned int *)((char *)this + 25708);
  if ((v4 & 0x46) != 0)
  {
    uint64_t v13 = (const void *)IOMobileFramebufferCopyProperty();
    CFTypeRef cf = (CFTypeRef)IOMobileFramebufferCopyProperty();
  }
  else
  {
    CFTypeRef cf = 0;
    uint64_t v13 = 0;
  }
  memset(v227, 0, 44);
  (*(void (**)(_OWORD *__return_ptr, CA::WindowServer::IOMFBDisplay *))(*(void *)this + 1368))(v227, this);
  if ((v4 & 0x42) == 0 || !v3[1854])
  {
    int v31 = 0;
    goto LABEL_38;
  }
  *((void *)this + 3282) = 0x447A00003BA3D70ALL;
  *((_DWORD *)this + 6568) = 0;
  if (!v13 || (CFTypeID v21 = CFGetTypeID(v13), v21 != CFDictionaryGetTypeID()))
  {
    int v32 = 0;
    goto LABEL_253;
  }
  CFDictionaryRef Dictionary = (const __CFDictionary *)CA_CFDictionaryGetDictionary((const __CFDictionary *)v13, @"Luminance");
  if (Dictionary)
  {
    CFDictionaryRef v23 = Dictionary;
    CFDictionaryRef Int64 = CA_CFDictionaryGetInt64(Dictionary, @"Min");
    CFDictionaryRef v25 = CA_CFDictionaryGetInt64(v23, @"Max");
    CFDictionaryRef v26 = CA_CFDictionaryGetInt64(v23, @"MaxFrameAverage");
    v27.i64[0] = (uint64_t)Int64;
    v27.i64[1] = (uint64_t)v25;
    *((float32x2_t *)this + 3282) = vmul_f32(vcvt_f32_f64(vcvtq_f64_s64(v27)), (float32x2_t)vdup_n_s32(0x37800000u));
    *((float *)this + 6568) = (float)(uint64_t)v26 * 0.000015259;
  }
  Value = CFDictionaryGetValue((CFDictionaryRef)v13, @"DolbyVisionDMVersion");
  if (Value) {
    LODWORD(Value) = CA_CFIntValue(Value);
  }
  *((_DWORD *)this + 6570) = Value;
  float v29 = CFDictionaryGetValue((CFDictionaryRef)v13, @"MaxHorizontalImageSize");
  if (v29) {
    unsigned int v30 = CA_CFIntValue(v29);
  }
  else {
    unsigned int v30 = 0;
  }
  int32x2_t v93 = CFDictionaryGetValue((CFDictionaryRef)v13, @"MaxVerticalImageSize");
  if (v93) {
    LODWORD(v93) = CA_CFIntValue(v93);
  }
  float v94 = (float)v30 * 0.3937;
  float v95 = (float)v93 * 0.3937;
  *((double *)this + 3268) = v94;
  *((double *)this + 3269) = v95;
  if (v94 != 0.0 && v95 != 0.0) {
    *((float *)this + 6540) = v94 / v95;
  }
  unint64_t v96 = CFDictionaryGetValue((CFDictionaryRef)v13, @"DolbyVisionSupports2160p60Hz");
  size_t v97 = v96;
  if (v96) {
    unsigned int v98 = CA_CFIntValue(v96);
  }
  else {
    unsigned int v98 = 0;
  }
  if (v98 >= 3 || v97 == 0) {
    unsigned int v100 = 0;
  }
  else {
    unsigned int v100 = v98 + 1;
  }
  theDictdouble b = (const __CFDictionary *)v13;
  double v101 = CFDictionaryGetValue((CFDictionaryRef)v13, @"SupportsPQEOTF");
  double v102 = v101;
  if (v101) {
    unsigned int v98 = CA_CFIntValue(v101);
  }
  if (v98) {
    int v103 = 2;
  }
  else {
    int v103 = 1;
  }
  if (v102) {
    int v104 = v103;
  }
  else {
    int v104 = 0;
  }
  double v105 = CFDictionaryGetValue((CFDictionaryRef)v13, @"SupportsBT2020YCC");
  int8x16_t v106 = v105;
  if (v105) {
    unsigned int v98 = CA_CFIntValue(v105);
  }
  if (v98) {
    int v107 = 2;
  }
  else {
    int v107 = 1;
  }
  if (v106) {
    int v108 = v107;
  }
  else {
    int v108 = 0;
  }
  uint64_t v109 = CFDictionaryGetValue(theDictb, @"SupportsHDRStaticMetadataType1");
  __int32 v110 = v109;
  if (v109) {
    unsigned int v98 = CA_CFIntValue(v109);
  }
  __int16 v225 = v4;
  if (v98) {
    int v111 = 2;
  }
  else {
    int v111 = 1;
  }
  if (v110) {
    int v4 = v111;
  }
  else {
    int v4 = 0;
  }
  uint64_t v112 = CFDictionaryGetValue(theDictb, @"HasHDMILegacyEDID");
  int8x16_t v113 = v112;
  if (v112) {
    unsigned int v98 = CA_CFIntValue(v112);
  }
  if (v113) {
    BOOL v114 = v98 == 1;
  }
  else {
    BOOL v114 = 0;
  }
  char v115 = v114;
  CFDictionaryRef v116 = (const __CFDictionary *)CA_CFDictionaryGetDictionary(theDictb, @"ProductAttributes");
  char v219 = v115;
  if (v116)
  {
    CFDictionaryRef v117 = v116;
    int8x16_t v118 = CFDictionaryGetValue(v116, @"ProductID");
    if (v118) {
      unsigned int v119 = CA_CFIntValue(v118);
    }
    else {
      unsigned int v119 = 0;
    }
    *((_DWORD *)v3 + 204) = v119;
    int8x16_t v131 = CFDictionaryGetValue(v117, @"LegacyManufacturerID");
    if (v131) {
      unsigned int v120 = CA_CFIntValue(v131);
    }
    else {
      unsigned int v120 = 0;
    }
    int8x16_t v132 = (void *)*((void *)this + 3386);
    if (v132)
    {
      free(v132);
      *((void *)this + 3386) = 0;
    }
    int v218 = v108;
    int v217 = v4;
    if (v120 == 1552)
    {
      if (v119 - 44577 <= 0xE && ((1 << (v119 - 33)) & 0x7007) != 0)
      {
        unint64_t v133 = "Pro Display XDR";
LABEL_218:
        unsigned int v134 = v100;
        *((void *)this + 3386) = strdup(v133);
        int v32 = 1;
        goto LABEL_238;
      }
      if (v119 >> 3 == 5575)
      {
        unint64_t v133 = "Studio Display";
        goto LABEL_218;
      }
    }
    unsigned int v134 = v100;
    int v32 = 0;
LABEL_238:
    CFStringRef String = (const __CFString *)CA_CFDictionaryGetString(v117, @"ProductName");
    int v154 = v104;
    if (String)
    {
      if (!*((void *)this + 3386))
      {
        CFStringRef v155 = String;
        CFTypeID v156 = CFGetTypeID(String);
        if (v156 == CFStringGetTypeID())
        {
          long long v245 = 0u;
          long long v246 = 0u;
          long long v243 = 0u;
          long long v244 = 0u;
          long long v241 = 0u;
          long long v242 = 0u;
          long long v239 = 0u;
          long long v240 = 0u;
          long long v237 = 0u;
          long long v238 = 0u;
          long long v235 = 0u;
          long long v236 = 0u;
          long long v234 = 0u;
          *(_OWORD *)buf = 0u;
          memset(v233, 0, sizeof(v233));
          if (CFStringGetCString(v155, (char *)buf, 256, 0x8000100u))
          {
            *((void *)this + 3386) = strdup((const char *)buf);
            int v32 = 1;
          }
        }
      }
    }
    long long v157 = CFDictionaryGetValue(v117, @"WeekOfManufacture");
    if (v157) {
      unsigned int v158 = CA_CFIntValue(v157);
    }
    else {
      unsigned int v158 = 0;
    }
    long long v159 = CFDictionaryGetValue(v117, @"YearOfManufacture");
    if (v159) {
      unsigned int v160 = CA_CFIntValue(v159);
    }
    else {
      unsigned int v160 = 0;
    }
    CFDictionaryRef v116 = (const __CFDictionary *)CFDictionaryGetValue(v117, @"SerialNumber");
    unint64_t v121 = __PAIR64__(v160, v158);
    if (v116)
    {
      LODWORD(v116) = CA_CFIntValue(v116);
      unint64_t v121 = __PAIR64__(v160, v158);
    }
    unsigned int v100 = v134;
    int v104 = v154;
    int v108 = v218;
    int v4 = v217;
    goto LABEL_252;
  }
  unsigned int v119 = 0;
  unsigned int v120 = 0;
  int v32 = 0;
  unint64_t v121 = 0;
LABEL_252:
  *(void *)&long long v161 = __PAIR64__(v104, v100);
  *((void *)&v161 + 1) = __PAIR64__(v4, v108);
  *(void *)&long long v162 = __PAIR64__(v120, v119);
  *((void *)&v162 + 1) = v121;
  *(_OWORD *)(v3 + 40) = v161;
  *((_DWORD *)v3 + 14) = 0;
  v3[60] = v219;
  *((_OWORD *)v3 + 4) = v162;
  *((_DWORD *)v3 + 20) = v116;
  LOWORD(v4) = v225;
  uint64_t v13 = theDictb;
LABEL_253:
  if (cf)
  {
    CFTypeID v163 = CFGetTypeID(cf);
    if (v163 == CFDictionaryGetTypeID())
    {
      long long v164 = CA_CFDictionaryGetString((const __CFDictionary *)cf, @"Downstream");
      if (v164)
      {
        long long v165 = v164;
        if (CFEqual(v164, @"DP"))
        {
          int v166 = 1;
        }
        else if (CFEqual(v165, @"DVI"))
        {
          int v166 = 2;
        }
        else if (CFEqual(v165, @"HDMI"))
        {
          int v166 = 3;
        }
        else if (CFEqual(v165, @"MIPI"))
        {
          int v166 = 4;
        }
        else if (CFEqual(v165, @"VGA"))
        {
          int v166 = 5;
        }
        else
        {
          int v166 = 0;
        }
        *((_DWORD *)v3 + 31) = v166;
      }
    }
  }
  CFDictionaryRef v210 = (const __CFDictionary *)IOMobileFramebufferCopyProperty();
  v211 = (const void *)*((void *)this + 3391);
  if (v211) {
    CFRelease(v211);
  }
  *((void *)this + 3391) = v210;
  int v31 = v32 != 0;
  if (v210)
  {
    v212 = CFDictionaryGetValue(v210, @"IncludeAllLayers");
    uint64_t v12 = (unsigned int *)((char *)this + 25708);
    if (v212) {
      LOBYTE(v212) = CA_CFBoolValue(v212);
    }
    v3[1856] = (char)v212;
    v3[1857] = CA_CFDictionaryGetBool(*((const __CFDictionary **)this + 3391), @"NotifyOnDisallowedCloningLayers");
    v3[1859] = CA_CFDictionaryGetBool(*((const __CFDictionary **)this + 3391), @"AllowRemoteControlLayers");
    BOOL Bool = CA_CFDictionaryGetBool(*((const __CFDictionary **)this + 3391), @"OverrideCanvas");
    v3[1860] = Bool;
    if (Bool)
    {
      *((_DWORD *)v3 + 460) = CA_CFDictionaryGetInt(*((const __CFDictionary **)this + 3391), @"OverrideCanvasWidth");
      *((_DWORD *)v3 + 461) = CA_CFDictionaryGetInt(*((const __CFDictionary **)this + 3391), @"OverrideCanvasHeight");
    }
  }
  else
  {
    uint64_t v12 = (unsigned int *)((char *)this + 25708);
  }
LABEL_38:
  v223 = (unsigned int *)((char *)this + 745);
  if ((v4 & 0x40) != 0)
  {
    os_unfair_lock_lock((os_unfair_lock_t)this + 6763);
    if (*((void *)this + 3382))
    {
      free(*((void **)this + 3383));
      *((void *)this + 3383) = *((void *)this + 3382);
      *((void *)this + 3382) = 0;
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        BOOL v33 = x_log_category_windowserver;
        if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
        {
          int v34 = *((_DWORD *)this + 6);
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v34;
          _os_log_impl(&dword_184668000, v33, OS_LOG_TYPE_DEFAULT, "Display %u  uuid cleared", buf, 8u);
        }
      }
    }
    CFStringRef v35 = (const __CFString *)IOMobileFramebufferCopyProperty();
    CFStringRef v36 = v35;
    if (v35)
    {
      CFTypeID v37 = CFGetTypeID(v35);
      if (v37 == CFStringGetTypeID())
      {
        long long v245 = 0u;
        long long v246 = 0u;
        long long v243 = 0u;
        long long v244 = 0u;
        long long v241 = 0u;
        long long v242 = 0u;
        long long v239 = 0u;
        long long v240 = 0u;
        long long v237 = 0u;
        long long v238 = 0u;
        long long v235 = 0u;
        long long v236 = 0u;
        long long v234 = 0u;
        *(_OWORD *)buf = 0u;
        memset(v233, 0, sizeof(v233));
        if (CFStringGetCString(v36, (char *)buf, 256, 0x8000100u))
        {
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            unsigned int v38 = x_log_category_windowserver;
            if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
            {
              int v39 = *((_DWORD *)this + 6);
              *(_DWORD *)v247 = 67109120;
              *(_DWORD *)&v247[4] = v39;
              _os_log_impl(&dword_184668000, v38, OS_LOG_TYPE_DEFAULT, "Display %u uuid set ", v247, 8u);
            }
          }
          *((void *)this + 3382) = strdup((const char *)buf);
          int v31 = 1;
        }
      }
    }
    int8x16_t v40 = (void *)*((void *)this + 3384);
    if (v40)
    {
      free(v40);
      *((void *)this + 3384) = 0;
    }
    int v41 = (const void *)*((void *)this + 3385);
    if (v41)
    {
      CFRelease(v41);
      *((void *)this + 3385) = 0;
    }
    CFStringRef v42 = (const __CFString *)IOMobileFramebufferCopyProperty();
    if (v42)
    {
      CFStringRef v43 = v42;
      CFTypeID v44 = CFGetTypeID(v42);
      if (v44 == CFStringGetTypeID())
      {
        long long v245 = 0u;
        long long v246 = 0u;
        long long v243 = 0u;
        long long v244 = 0u;
        long long v241 = 0u;
        long long v242 = 0u;
        long long v239 = 0u;
        long long v240 = 0u;
        long long v237 = 0u;
        long long v238 = 0u;
        long long v235 = 0u;
        long long v236 = 0u;
        long long v234 = 0u;
        *(_OWORD *)buf = 0u;
        memset(v233, 0, sizeof(v233));
        if (CFStringGetCString(v43, (char *)buf, 256, 0x8000100u))
        {
          *((void *)this + 3384) = strdup((const char *)buf);
          int v31 = 1;
        }
        *((void *)this + 3385) = CFUUIDCreateFromString(0, v43);
      }
      CFRelease(v43);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)this + 6763);
    if (v36)
    {
      CFTypeID v45 = CFGetTypeID(v36);
      if (v45 == CFStringGetTypeID())
      {
        if (*((void *)this + 3382))
        {
          if (*((void *)this + 3383))
          {
            *(_OWORD *)buf = 0u;
            memset(v233, 0, 28);
            (*(void (**)(uint8_t *__return_ptr, CA::WindowServer::IOMFBDisplay *))(*(void *)this + 1368))(buf, this);
            if (strcmp(*((const char **)this + 3382), *((const char **)this + 3383)))
            {
              if (*((void *)&v233[0] + 1) == *((void *)&v227[1] + 1) && !v3[1870]) {
                CA::WindowServer::Display::set_user_preferences((uint64_t)this, *v223 & 1, *((unsigned __int16 *)this + 328) >> 13, 1);
              }
            }
          }
        }
        CFDictionaryRef v46 = (const __CFDictionary *)CFPreferencesCopyAppValue(@"CADisplayPreferences", (CFStringRef)*MEMORY[0x1E4F1D3D8]);
        if (v46)
        {
          CFDictionaryRef v47 = v46;
          CFTypeID v48 = CFGetTypeID(v46);
          if (v48 == CFDictionaryGetTypeID()
            && (CFDictionaryRef v49 = (const __CFDictionary *)CA_CFDictionaryGetDictionary(v47, v36)) != 0)
          {
            CFDictionaryRef v50 = v49;
            BOOL v51 = CA_CFDictionaryGetBool(v49, @"matchContent");
            __int16 Int = CA_CFDictionaryGetInt(v50, @"preferredHdrType");
            unsigned int *v223 = *v223 & 0xFFFFFFFE | v51;
            __int16 v53 = *((_WORD *)this + 328) & 0x1FFF | (Int << 13);
          }
          else
          {
            *v223 &= ~1u;
            __int16 v53 = *((_WORD *)this + 328) & 0x1FFF;
          }
          *((_WORD *)this + 328) = v53;
          CFRelease(v47);
        }
        else
        {
          *v223 &= ~1u;
          *((_WORD *)this + 328) &= 0x1FFFu;
        }
      }
      CFRelease(v36);
    }
  }
  if ((v4 & 2) == 0) {
    goto LABEL_121;
  }
  long long v235 = 0u;
  long long v236 = 0u;
  *(_OWORD *)buf = 0u;
  *(void *)&v233[0] = 0;
  v233[1] = 0u;
  long long v234 = 0u;
  *((void *)&v233[0] + 1) = &v233[1];
  LODWORD(v236) = 1065353216;
  uint64_t current_iomfb_mode = *((void *)this + 80);
  uint64_t v230 = 0;
  uint64_t v231 = current_iomfb_mode;
  int v55 = *((unsigned __int8 *)this + 636);
  if (v55 == 2)
  {
    if (v3[1854])
    {
      *(void *)v247 = 0;
      CFArrayRef theArray = 0;
      IOMobileFramebufferGetSupportedDigitalOutModes();
      X::CFRef<__CFDictionary const*>::operator=((const void **)this + 3390, theArray);
      CA::WindowServer::IOMFBDisplay::update_digital_modes(this, (CA::WindowServer::Display::ModeSet *)buf, (CA::WindowServer::Display::Mode *)&v230, *(const __CFArray **)v247, theArray);
    }
  }
  else if (v55 == 1)
  {
    *(void *)v247 = 0;
    CFArrayRef theArray = 0;
    IOMobileFramebufferGetSupportedDigitalOutModes();
    X::CFRef<__CFDictionary const*>::operator=((const void **)this + 3390, theArray);
    if (*(void *)v247 && theArray && (CFArrayGetCount(*(CFArrayRef *)v247) > 1 || CFArrayGetCount(theArray) >= 2))
    {
      CA::WindowServer::IOMFBDisplay::update_digital_modes(this, (CA::WindowServer::Display::ModeSet *)buf, (CA::WindowServer::Display::Mode *)&v230, *(const __CFArray **)v247, theArray);
      uint64_t current_iomfb_mode = CA::WindowServer::IOMFBDisplay::fetch_current_iomfb_mode(this);
      uint64_t v231 = current_iomfb_mode;
    }
    else
    {
      uint64_t v228 = -1;
      CA::WindowServer::Display::ModeSet::add_mode((CA::WindowServer::Display::ModeSet *)buf, (const CA::WindowServer::Display::Mode *)&v228);
    }
  }
  int theDict = v31;
  if (current_iomfb_mode)
  {
    int32x2_t v56 = *(uint64_t **)buf;
    uint32x2_t v57 = *(uint64_t **)&buf[8];
    if (*(void *)buf == *(void *)&buf[8])
    {
      uint32x2_t v57 = *(uint64_t **)buf;
    }
    else
    {
      while ((CA::WindowServer::Display::Mode::operator==(*v56, current_iomfb_mode) & 1) == 0)
      {
        if (++v56 == v57)
        {
          int32x2_t v56 = v57;
          break;
        }
      }
    }
    uint64_t v58 = v230;
    if (v56 != v57) {
      goto LABEL_99;
    }
  }
  else
  {
    uint64_t v58 = v230;
  }
  uint64_t v231 = v58;
  uint64_t current_iomfb_mode = v58;
LABEL_99:
  int v59 = CA::WindowServer::Display::set_all_modes((uint64_t)this, (uint64_t)buf, current_iomfb_mode, v58);
  int v60 = (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(void *)this + 680))(this);
  if (x_log_hook_p())
  {
    std::__hash_table<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::__unordered_map_hasher<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,CA::WindowServer::IOMFBDisplay::ModeHash,std::equal_to<CA::WindowServer::Display::Mode>,true>,std::__unordered_map_equal<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::equal_to<CA::WindowServer::Display::Mode>,CA::WindowServer::IOMFBDisplay::ModeHash,true>,std::allocator<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>>>::__emplace_unique_key_args<CA::WindowServer::Display::Mode,std::piecewise_construct_t const&,std::tuple<CA::WindowServer::Display::Mode const&>,std::tuple<>>((float *)this + 6610, current_iomfb_mode, &v231);
    std::__hash_table<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::__unordered_map_hasher<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,CA::WindowServer::IOMFBDisplay::ModeHash,std::equal_to<CA::WindowServer::Display::Mode>,true>,std::__unordered_map_equal<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::equal_to<CA::WindowServer::Display::Mode>,CA::WindowServer::IOMFBDisplay::ModeHash,true>,std::allocator<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>>>::__emplace_unique_key_args<CA::WindowServer::Display::Mode,std::piecewise_construct_t const&,std::tuple<CA::WindowServer::Display::Mode const&>,std::tuple<>>((float *)this + 6610, current_iomfb_mode, &v231);
    std::__hash_table<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::__unordered_map_hasher<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,CA::WindowServer::IOMFBDisplay::ModeHash,std::equal_to<CA::WindowServer::Display::Mode>,true>,std::__unordered_map_equal<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::equal_to<CA::WindowServer::Display::Mode>,CA::WindowServer::IOMFBDisplay::ModeHash,true>,std::allocator<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>>>::__emplace_unique_key_args<CA::WindowServer::Display::Mode,std::piecewise_construct_t const&,std::tuple<CA::WindowServer::Display::Mode const&>,std::tuple<>>((float *)this + 6610, v58, &v230);
    std::__hash_table<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::__unordered_map_hasher<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,CA::WindowServer::IOMFBDisplay::ModeHash,std::equal_to<CA::WindowServer::Display::Mode>,true>,std::__unordered_map_equal<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::equal_to<CA::WindowServer::Display::Mode>,CA::WindowServer::IOMFBDisplay::ModeHash,true>,std::allocator<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>>>::__emplace_unique_key_args<CA::WindowServer::Display::Mode,std::piecewise_construct_t const&,std::tuple<CA::WindowServer::Display::Mode const&>,std::tuple<>>((float *)this + 6610, v58, &v230);
    x_log_();
  }
  else
  {
    int32x2_t v61 = x_log_category_windowserver;
    if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
    {
      int v216 = *((_DWORD *)this + 6);
      int v215 = *((_DWORD *)std::__hash_table<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::__unordered_map_hasher<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,CA::WindowServer::IOMFBDisplay::ModeHash,std::equal_to<CA::WindowServer::Display::Mode>,true>,std::__unordered_map_equal<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::equal_to<CA::WindowServer::Display::Mode>,CA::WindowServer::IOMFBDisplay::ModeHash,true>,std::allocator<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>>>::__emplace_unique_key_args<CA::WindowServer::Display::Mode,std::piecewise_construct_t const&,std::tuple<CA::WindowServer::Display::Mode const&>,std::tuple<>>((float *)this + 6610, current_iomfb_mode, &v231)+ 7);
      int v214 = *((_DWORD *)std::__hash_table<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::__unordered_map_hasher<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,CA::WindowServer::IOMFBDisplay::ModeHash,std::equal_to<CA::WindowServer::Display::Mode>,true>,std::__unordered_map_equal<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::equal_to<CA::WindowServer::Display::Mode>,CA::WindowServer::IOMFBDisplay::ModeHash,true>,std::allocator<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>>>::__emplace_unique_key_args<CA::WindowServer::Display::Mode,std::piecewise_construct_t const&,std::tuple<CA::WindowServer::Display::Mode const&>,std::tuple<>>((float *)this + 6610, current_iomfb_mode, &v231)+ 6);
      uint32x2_t v62 = v13;
      unsigned int v63 = v3;
      int v64 = *((_DWORD *)std::__hash_table<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::__unordered_map_hasher<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,CA::WindowServer::IOMFBDisplay::ModeHash,std::equal_to<CA::WindowServer::Display::Mode>,true>,std::__unordered_map_equal<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::equal_to<CA::WindowServer::Display::Mode>,CA::WindowServer::IOMFBDisplay::ModeHash,true>,std::allocator<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>>>::__emplace_unique_key_args<CA::WindowServer::Display::Mode,std::piecewise_construct_t const&,std::tuple<CA::WindowServer::Display::Mode const&>,std::tuple<>>((float *)this + 6610, v58, &v230)+ 7);
      int v65 = *((_DWORD *)std::__hash_table<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::__unordered_map_hasher<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,CA::WindowServer::IOMFBDisplay::ModeHash,std::equal_to<CA::WindowServer::Display::Mode>,true>,std::__unordered_map_equal<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::equal_to<CA::WindowServer::Display::Mode>,CA::WindowServer::IOMFBDisplay::ModeHash,true>,std::allocator<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>>>::__emplace_unique_key_args<CA::WindowServer::Display::Mode,std::piecewise_construct_t const&,std::tuple<CA::WindowServer::Display::Mode const&>,std::tuple<>>((float *)this + 6610, v58, &v230)+ 6);
      *(_DWORD *)v247 = 67111168;
      *(_DWORD *)&v247[4] = v216;
      __int16 v248 = 1024;
      int v249 = current_iomfb_mode & 0x3FFF;
      __int16 v250 = 1024;
      unsigned int v251 = (current_iomfb_mode >> 14) & 0x3FFF;
      __int16 v252 = 1024;
      int v253 = v215;
      __int16 v254 = 1024;
      int v255 = v214;
      __int16 v256 = 1024;
      int v257 = v58 & 0x3FFF;
      __int16 v258 = 1024;
      unsigned int v259 = (v58 >> 14) & 0x3FFF;
      __int16 v260 = 1024;
      int v261 = v64;
      CFDictionaryRef v3 = v63;
      uint64_t v13 = v62;
      __int16 v262 = 1024;
      int v263 = v65;
      _os_log_impl(&dword_184668000, v61, OS_LOG_TYPE_DEFAULT, "Display %u current mode (%u x %u) [%u %u], preferred mode (%u x %u) [%u %u]", v247, 0x38u);
    }
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)&v234);
  std::__tree<std::tuple<unsigned short,unsigned short>>::destroy(*(void **)&v233[1]);
  if (*(void *)buf)
  {
    *(void *)&buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }
  int v31 = v60 | v59 | theDict;
  uint64_t v66 = *((void *)this + 3388);
  uint64_t v12 = (unsigned int *)((char *)this + 25708);
  if (!v3[1851])
  {
    uint64_t v67 = *((void *)this + 80);
    if (!CA::WindowServer::Display::Mode::operator==(*((void *)this + 3388), v67) || v3[1933])
    {
      *((void *)this + 3388) = v67;
      LOWORD(v4) = v4 | 4;
      uint64_t v66 = v67;
    }
  }
  if (v66)
  {
    os_unfair_lock_lock((os_unfair_lock_t)this + 98);
    CA::WindowServer::Display::ModeSet::ModeSet((CA::WindowServer::Display::ModeSet *)buf, (CA::WindowServer::IOMFBDisplay *)((char *)this + 400));
    os_unfair_lock_unlock((os_unfair_lock_t)this + 98);
    double v69 = *(uint64_t **)buf;
    double v68 = *(uint64_t **)&buf[8];
    if (*(void *)buf == *(void *)&buf[8])
    {
      BOOL v71 = 1;
    }
    else
    {
      uint64_t v70 = *((void *)this + 3388);
      while ((CA::WindowServer::Display::Mode::operator==(*v69, v70) & 1) == 0)
      {
        if (++v69 == v68)
        {
          double v69 = v68;
          break;
        }
      }
      BOOL v71 = v69 == v68;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)&v234);
    std::__tree<std::tuple<unsigned short,unsigned short>>::destroy(*(void **)&v233[1]);
    if (*(void *)buf)
    {
      *(void *)&buf[8] = *(void *)buf;
      operator delete(*(void **)buf);
    }
    if (v71)
    {
      *((void *)this + 3388) = 0;
      LOWORD(v4) = v4 | 4;
    }
  }
LABEL_121:
  if (v4) {
    IOMobileFramebufferSetDebugFlags();
  }
  if ((v4 & 4) != 0)
  {
    (*(void (**)(CA::WindowServer::IOMFBDisplay *))(*(void *)this + 2184))(this);
    if (v3[1854])
    {
      if (*((unsigned char *)this + 636) != 2) {
        goto LABEL_144;
      }
      CFDictionaryRef theDicta = (CFDictionaryRef)v13;
      os_unfair_lock_lock((os_unfair_lock_t)this + 98);
      CA::WindowServer::Display::ModeSet::ModeSet((CA::WindowServer::Display::ModeSet *)buf, (CA::WindowServer::IOMFBDisplay *)((char *)this + 400));
      os_unfair_lock_unlock((os_unfair_lock_t)this + 98);
      double v72 = (uint64_t *)((char *)this + 27104);
      double v73 = *(uint64_t **)buf;
      double v74 = *(uint64_t **)&buf[8];
      if (*(void *)buf == *(void *)&buf[8])
      {
        double v74 = *(uint64_t **)buf;
      }
      else
      {
        uint64_t v75 = *v72;
        while ((CA::WindowServer::Display::Mode::operator==(*v73, v75) & 1) == 0)
        {
          if (++v73 == v74)
          {
            double v73 = v74;
            break;
          }
        }
      }
      std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)&v234);
      std::__tree<std::tuple<unsigned short,unsigned short>>::destroy(*(void **)&v233[1]);
      if (*(void *)buf)
      {
        *(void *)&buf[8] = *(void *)buf;
        operator delete(*(void **)buf);
      }
      _ZF = v73 == v74;
      uint64_t v13 = theDicta;
      if (_ZF)
      {
LABEL_144:
        long long v235 = 0u;
        long long v236 = 0u;
        *(_OWORD *)buf = 0u;
        *(void *)&v233[0] = 0;
        v233[1] = 0u;
        long long v234 = 0u;
        *((void *)&v233[0] + 1) = &v233[1];
        LODWORD(v236) = 1065353216;
        CA::WindowServer::Display::set_all_modes((uint64_t)this, (uint64_t)buf, 0, 0);
        std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)&v234);
        std::__tree<std::tuple<unsigned short,unsigned short>>::destroy(*(void **)&v233[1]);
        if (*(void *)buf)
        {
          *(void *)&buf[8] = *(void *)buf;
          operator delete(*(void **)buf);
        }
        *((void *)this + 3388) = 0;
        v3[1851] = 0;
        atomic_fetch_and((atomic_uint *volatile)this + 156, 0xFFFFFFFE);
        *((_DWORD *)v3 + 49) = 0;
        IOMobileFramebufferSetDisplayDevice();
        *v223 &= ~0x200u;
        (*(void (**)(CA::WindowServer::IOMFBDisplay *))(*(void *)this + 952))(this);
        (*(void (**)(CA::WindowServer::IOMFBDisplay *))(*(void *)this + 928))(this);
      }
      else
      {
        if (!(*(unsigned __int8 *)(*((void *)this + 91) + 2) | *(unsigned __int8 *)(*((void *)this + 91) + 3)))
        {
          (*(void (**)(CA::WindowServer::IOMFBDisplay *, uint64_t, void, void))(*(void *)this + 2144))(this, 1, 0, 0);
          CA::WindowServer::Display::complete_powering_on((os_unfair_lock_s *)this);
        }
        IOMobileFramebufferSetDisplayDevice();
        int v89 = *((_DWORD *)std::__hash_table<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::__unordered_map_hasher<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,CA::WindowServer::IOMFBDisplay::ModeHash,std::equal_to<CA::WindowServer::Display::Mode>,true>,std::__unordered_map_equal<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::equal_to<CA::WindowServer::Display::Mode>,CA::WindowServer::IOMFBDisplay::ModeHash,true>,std::allocator<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>>>::__emplace_unique_key_args<CA::WindowServer::Display::Mode,std::piecewise_construct_t const&,std::tuple<CA::WindowServer::Display::Mode const&>,std::tuple<>>((float *)this + 6610, *((void *)this + 3388), (uint64_t *)this + 3388)+ 6);
        int v224 = *((_DWORD *)std::__hash_table<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::__unordered_map_hasher<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,CA::WindowServer::IOMFBDisplay::ModeHash,std::equal_to<CA::WindowServer::Display::Mode>,true>,std::__unordered_map_equal<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::equal_to<CA::WindowServer::Display::Mode>,CA::WindowServer::IOMFBDisplay::ModeHash,true>,std::allocator<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>>>::__emplace_unique_key_args<CA::WindowServer::Display::Mode,std::piecewise_construct_t const&,std::tuple<CA::WindowServer::Display::Mode const&>,std::tuple<>>((float *)this + 6610, *((void *)this + 3388), (uint64_t *)this + 3388)+ 7);
        pthread_mutex_lock((pthread_mutex_t *)((char *)this + 25720));
        unsigned int v90 = *v12;
        *(void *)&buf[8] = 0;
        v233[0] = 0uLL;
        uint64_t v91 = *((void *)this + 6 * v90 + 3224);
        if (v91) {
          uint64_t v92 = *(void *)(v91 + 32);
        }
        else {
          uint64_t v92 = 0;
        }
        char v122 = 0;
        uint64_t v123 = 0;
        uint64_t v124 = *((void *)this + 6 * v90 + 3225);
        *(void *)buf = v92;
        *(void *)&v233[0] = v124;
        BYTE8(v233[0]) = v3[141] == 2;
        while (1)
        {
          char v125 = v122;
          uint64_t v126 = *(void *)&buf[16 * v123];
          if (v126)
          {
            if (((*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *, void, void, void, void, void))(*(void *)this + 2264))(this, *(unsigned int *)(v126 + 56), *(unsigned int *)(v126 + 60), *((_DWORD *)this + 6776) & 0x3FFF, (*((_DWORD *)this + 6776) >> 14) & 0x3FFF, buf[16 * v123 + 8]) & 1) == 0)break; {
          }
            }
          char v122 = 1;
          uint64_t v123 = 1;
          if (v125) {
            goto LABEL_222;
          }
        }
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          int8x16_t v135 = x_log_category_windowserver;
          if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_INFO))
          {
            int v136 = *(_DWORD *)(v126 + 56);
            int v137 = *(_DWORD *)(v126 + 60);
            int v138 = *(_DWORD *)v72 & 0x3FFF;
            int v139 = (*(_DWORD *)v72 >> 14) & 0x3FFF;
            *(_DWORD *)v247 = 67109888;
            *(_DWORD *)&v247[4] = v136;
            __int16 v248 = 1024;
            int v249 = v137;
            __int16 v250 = 1024;
            unsigned int v251 = v138;
            __int16 v252 = 1024;
            int v253 = v139;
            _os_log_impl(&dword_184668000, v135, OS_LOG_TYPE_INFO, "Current %dx%d surface exceeds scaling limits for new %dx%d display mode; clearing before mode change",
              v247,
              0x1Au);
          }
        }
        CA::WindowServer::IOMFBDisplay::set_all_layers_to_null((uint64_t)this, 1);
LABEL_222:
        pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 25720));
        int v140 = v89;
        int v141 = IOMobileFramebufferSetDigitalOutMode();
        CA::WindowServer::IOMFBDisplay::update_display_bandwidth_limits(this, (CA::WindowServer::IOMFBDisplay *)((char *)this + 27104));
        BOOL v142 = x_log_hook_p();
        if (v141)
        {
          int32x2_t v143 = (float *)((char *)this + 26440);
          if (v142)
          {
            x_log_();
          }
          else
          {
            int v144 = x_log_category_windowserver;
            if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
            {
              int v145 = *(_DWORD *)v72 & 0x3FFF;
              int v146 = (*(_DWORD *)v72 >> 14) & 0x3FFF;
              *(_DWORD *)buf = 67110144;
              *(_DWORD *)&buf[4] = v140;
              *(_WORD *)&buf[8] = 1024;
              *(_DWORD *)&buf[10] = v224;
              *(_WORD *)&buf[14] = 1024;
              LODWORD(v233[0]) = v145;
              WORD2(v233[0]) = 1024;
              *(_DWORD *)((char *)v233 + 6) = v146;
              WORD5(v233[0]) = 1024;
              HIDWORD(v233[0]) = v141;
              _os_log_impl(&dword_184668000, v144, OS_LOG_TYPE_ERROR, "set digital mode failed [%d %d] %dx%d: 0x%x", buf, 0x20u);
            }
          }
          std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::clear((void *)this + 3305);
          long long v235 = 0u;
          long long v236 = 0u;
          *(_OWORD *)buf = 0u;
          *(void *)&v233[0] = 0;
          v233[1] = 0u;
          long long v234 = 0u;
          *((void *)&v233[0] + 1) = &v233[1];
          LODWORD(v236) = 1065353216;
          CA::WindowServer::Display::set_all_modes((uint64_t)this, (uint64_t)buf, 0, 0);
          std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)&v234);
          std::__tree<std::tuple<unsigned short,unsigned short>>::destroy(*(void **)&v233[1]);
          uint64_t v13 = theDicta;
          if (*(void *)buf)
          {
            *(void *)&buf[8] = *(void *)buf;
            operator delete(*(void **)buf);
          }
          *double v72 = 0;
          *((void *)this + 3389) = 0;
        }
        else
        {
          int32x2_t v143 = (float *)((char *)this + 26440);
          if (v142)
          {
            uint64_t v13 = theDicta;
            x_log_();
          }
          else
          {
            int8x16_t v147 = x_log_category_windowserver;
            uint64_t v13 = theDicta;
            if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v148 = *v72 & 0x3FFF;
              unsigned int v149 = (*v72 >> 14) & 0x3FFF;
              uint64_t v150 = ((unint64_t)*v72 >> 45) & 0x1FF;
              unsigned int v151 = (((unint64_t)*v72 >> 55) & 0x1F) - 1;
              if (v151 > 0x1B) {
                float64x2_t v152 = "";
              }
              else {
                float64x2_t v152 = off_1E52739E0[v151];
              }
              *(_DWORD *)buf = 67110402;
              *(_DWORD *)&buf[4] = v140;
              *(_WORD *)&buf[8] = 1024;
              *(_DWORD *)&buf[10] = v224;
              *(_WORD *)&buf[14] = 1024;
              LODWORD(v233[0]) = v148;
              WORD2(v233[0]) = 1024;
              *(_DWORD *)((char *)v233 + 6) = v149;
              WORD5(v233[0]) = 1024;
              HIDWORD(v233[0]) = v150;
              LOWORD(v233[1]) = 2080;
              *(void *)((char *)&v233[1] + 2) = v152;
              _os_log_impl(&dword_184668000, v147, OS_LOG_TYPE_DEFAULT, "set digital mode [%d %d] %dx%d %dhz %s\n", buf, 0x2Au);
            }
          }
          *((void *)this + 3389) = *((void *)this + 3388);
          CA::WindowServer::IOMFBDisplay::post_hotplug_log(this);
        }
        v3[1933] = 0;
        uint64_t updated = CA::WindowServer::IOMFBDisplay::update_timing_info((uint64_t)this);
        uint64_t v168 = *((void *)this + 3382);
        uint64_t v169 = 0;
        if (v168)
        {
          uint64_t v170 = *((void *)this + 3388);
          if (v170)
          {
            v171 = (void *)MEMORY[0x185324A30](updated);
            v172 = +[CADisplayPersistedData sharedInstance];
            -[CADisplayPersistedData latencyForUUID:andMode:](v172, "latencyForUUID:andMode:", [NSString stringWithUTF8String:v168], v170);
            uint64_t v169 = v173;
          }
        }
        *((void *)this + 3392) = v169;
        if (*((unsigned char *)std::__hash_table<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::__unordered_map_hasher<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,CA::WindowServer::IOMFBDisplay::ModeHash,std::equal_to<CA::WindowServer::Display::Mode>,true>,std::__unordered_map_equal<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::equal_to<CA::WindowServer::Display::Mode>,CA::WindowServer::IOMFBDisplay::ModeHash,true>,std::allocator<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>>>::__emplace_unique_key_args<CA::WindowServer::Display::Mode,std::piecewise_construct_t const&,std::tuple<CA::WindowServer::Display::Mode const&>,std::tuple<>>(v143, *((void *)this + 80), (uint64_t *)this + 80)+ 40))atomic_fetch_or((atomic_uint *volatile)this + 156, 1u); {
        else
        }
          atomic_fetch_and((atomic_uint *volatile)this + 156, 0xFFFFFFFE);
        *((_DWORD *)v3 + 49) = *((_DWORD *)std::__hash_table<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::__unordered_map_hasher<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,CA::WindowServer::IOMFBDisplay::ModeHash,std::equal_to<CA::WindowServer::Display::Mode>,true>,std::__unordered_map_equal<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::equal_to<CA::WindowServer::Display::Mode>,CA::WindowServer::IOMFBDisplay::ModeHash,true>,std::allocator<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>>>::__emplace_unique_key_args<CA::WindowServer::Display::Mode,std::piecewise_construct_t const&,std::tuple<CA::WindowServer::Display::Mode const&>,std::tuple<>>(v143, *((void *)this + 80), (uint64_t *)this + 80)+ 9);
        if (CA::WindowServer::Display::Mode::is_hdr((CA::WindowServer::IOMFBDisplay *)((char *)this + 640))
          || (*((void *)this + 80) & 0xF80000000000000) == 0x680000000000000 && v3[1887])
        {
          atomic_fetch_or((atomic_uint *volatile)this + 156, 8u);
        }
        else
        {
          atomic_fetch_and((atomic_uint *volatile)this + 156, 0xFFFFFFF7);
        }
        v3[688] = 0;
        (*(void (**)(CA::WindowServer::IOMFBDisplay *))(*(void *)this + 1072))(this);
      }
      (*(void (**)(CA::WindowServer::IOMFBDisplay *))(*(void *)this + 2232))(this);
      CA::WindowServer::IOMFBDisplay::update_brightness_capabilities(this, 0);
LABEL_278:
      v3[1938] = 0;
      v174 = (const void *)IOMobileFramebufferCopyProperty();
      if (v174)
      {
        v175 = v174;
        v3[1938] = CA_CFBoolValue(v174);
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v176 = x_log_category_windowserver;
          if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
          {
            int v177 = *((_DWORD *)this + 6);
            int v178 = v3[1938];
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)&buf[4] = v177;
            *(_WORD *)&buf[8] = 1024;
            *(_DWORD *)&buf[10] = v178;
            _os_log_impl(&dword_184668000, v176, OS_LOG_TYPE_DEFAULT, "Display %d EDR scaling applied in GP: %d", buf, 0xEu);
          }
        }
        CFRelease(v175);
      }
      v3[32] = 0;
      *((_DWORD *)v3 + 9) = 0;
      {
        CA::WindowServer::IOMFBDisplay::update_chromaticity(__CFDictionary const*)::srgdouble b = xmmword_1849986A0;
        *(_OWORD *)algn_1E8F85370 = xmmword_1849986B0;
        byte_1E8F85380 = 1;
      }
      {
        CA::WindowServer::IOMFBDisplay::update_chromaticity(__CFDictionary const*)::p3 = xmmword_1849986C0;
        unk_1E8F85340 = xmmword_1849986B0;
        byte_1E8F85350 = 1;
      }
      {
        CA::WindowServer::IOMFBDisplay::update_chromaticity(__CFDictionary const*)::bt2020 = xmmword_1849986D0;
        *(_OWORD *)algn_1E8F853B0 = xmmword_1849986E0;
        byte_1E8F853C0 = 1;
      }
      if ((*((_WORD *)this + 328) & 0xC00) != 0)
      {
        if (v13 && v3[1854] && *((void *)this + 80))
        {
          CFDictionaryRef v179 = (const __CFDictionary *)v13;
          unint64_t v180 = *((void *)this + 3388);
          uint64_t v181 = (v180 >> 55) & 0x1F;
          BOOL v182 = CA::WindowServer::Display::Mode::hdr_type(v180) == 5
              || CA::WindowServer::Display::Mode::hdr_type(*((void *)this + 3388)) == 4;
          if (v181 <= 0x19 && ((1 << v181) & 0x300E000) != 0)
          {
            uint64_t v13 = v179;
            if (v182)
            {
              v188 = @"DolbyVisionWhitePoint";
              v189 = @"DolbyVisionChromaticity";
LABEL_338:
              CFDictionaryRef v194 = (const __CFDictionary *)CA_CFDictionaryGetDictionary((const __CFDictionary *)v13, v189);
              CFDictionaryRef v195 = (const __CFDictionary *)CA_CFDictionaryGetDictionary((const __CFDictionary *)v13, v188);
              if (v194)
              {
                CFDictionaryRef v196 = v195;
                if (v195)
                {
                  CFDictionaryRef v197 = (const __CFDictionary *)CA_CFDictionaryGetDictionary(v194, @"Blue");
                  CFDictionaryRef v198 = (const __CFDictionary *)CA_CFDictionaryGetDictionary(v194, @"Green");
                  CFDictionaryRef v199 = (const __CFDictionary *)CA_CFDictionaryGetDictionary(v194, @"Red");
                  if (v197)
                  {
                    if (v198)
                    {
                      CFDictionaryRef v200 = v199;
                      if (v199)
                      {
                        float v201 = (double)(int)CA_CFDictionaryGetInt(v197, @"X") * 0.0000152587891;
                        *((float *)v3 + 4) = v201;
                        float v202 = (double)(int)CA_CFDictionaryGetInt(v197, @"Y") * 0.0000152587891;
                        *((float *)v3 + 5) = v202;
                        float v203 = (double)(int)CA_CFDictionaryGetInt(v198, @"X") * 0.0000152587891;
                        *((float *)v3 + 2) = v203;
                        float v204 = (double)(int)CA_CFDictionaryGetInt(v198, @"Y") * 0.0000152587891;
                        *((float *)v3 + 3) = v204;
                        float v205 = (double)(int)CA_CFDictionaryGetInt(v200, @"X") * 0.0000152587891;
                        *(float *)CFDictionaryRef v3 = v205;
                        float v206 = (double)(int)CA_CFDictionaryGetInt(v200, @"Y") * 0.0000152587891;
                        *((float *)v3 + 1) = v206;
                        float v207 = (double)(int)CA_CFDictionaryGetInt(v196, @"X") * 0.0000152587891;
                        *((float *)v3 + 6) = v207;
                        float v208 = (double)(int)CA_CFDictionaryGetInt(v196, @"Y") * 0.0000152587891;
                        *((float *)v3 + 7) = v208;
                        float v209 = (double)(int)CA_CFDictionaryGetInt(v196, @"Gamma") * 0.0000152587891;
                        *((float *)v3 + 9) = v209;
                        v3[32] = 1;
                      }
                    }
                  }
                }
              }
              goto LABEL_297;
            }
LABEL_337:
            v188 = @"DefaultWhitePoint";
            v189 = @"Chromaticity";
            goto LABEL_338;
          }
          if (v182)
          {
            v188 = @"DolbyVisionWhitePoint";
            v189 = @"DolbyVisionChromaticity";
            uint64_t v13 = v179;
            goto LABEL_338;
          }
          int v190 = CA::WindowServer::Display::Mode::hdr_type(*((void *)this + 3388));
          v191 = (_OWORD *)((char *)this + 26284);
          uint64_t v13 = v179;
          if (v190 == 3)
          {
            long long v192 = *(_OWORD *)algn_1E8F853B0;
            _OWORD *v191 = CA::WindowServer::IOMFBDisplay::update_chromaticity(__CFDictionary const*)::bt2020;
            *(_OWORD *)((char *)this + 26300) = v192;
            *((unsigned char *)this + 26316) = byte_1E8F853C0;
          }
          else
          {
            long long v193 = *(_OWORD *)algn_1E8F85370;
            _OWORD *v191 = CA::WindowServer::IOMFBDisplay::update_chromaticity(__CFDictionary const*)::srgb;
            *(_OWORD *)((char *)this + 26300) = v193;
            *((unsigned char *)this + 26316) = byte_1E8F85380;
            buf[0] = 0;
            if (CA_CFDictionaryGetBoolIfExists(v179, (BOOL *)buf) && !buf[0]) {
              goto LABEL_337;
            }
          }
        }
      }
      else
      {
        if ((*((_DWORD *)this + 156) & 8) != 0) {
          v183 = &CA::WindowServer::IOMFBDisplay::update_chromaticity(__CFDictionary const*)::p3;
        }
        else {
          v183 = &CA::WindowServer::IOMFBDisplay::update_chromaticity(__CFDictionary const*)::srgb;
        }
        long long v184 = v183[1];
        *(_OWORD *)((char *)this + 26284) = *v183;
        *(_OWORD *)((char *)this + 26300) = v184;
        *((unsigned char *)this + 26316) = *((unsigned char *)v183 + 32);
        *((_DWORD *)v3 + 9) = 1074580685;
      }
LABEL_297:
      CA::WindowServer::IOMFBDisplay::set_needs_icc_reload(this);
      int v31 = 1;
      v3[1865] = 1;
      *((_DWORD *)this + 6545) = 2143289344;
      goto LABEL_298;
    }
    IOMobileFramebufferSetDisplayDevice();
    uint64_t v84 = *((void *)this + 3388);
    if (v84 != -1)
    {
      if (!v3[1884])
      {
LABEL_207:
        CA::WindowServer::Display::set_mode(this, (CA::WindowServer::IOMFBDisplay *)((char *)this + 27104));
        goto LABEL_278;
      }
      int v85 = *((_DWORD *)std::__hash_table<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::__unordered_map_hasher<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,CA::WindowServer::IOMFBDisplay::ModeHash,std::equal_to<CA::WindowServer::Display::Mode>,true>,std::__unordered_map_equal<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::equal_to<CA::WindowServer::Display::Mode>,CA::WindowServer::IOMFBDisplay::ModeHash,true>,std::allocator<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>>>::__emplace_unique_key_args<CA::WindowServer::Display::Mode,std::piecewise_construct_t const&,std::tuple<CA::WindowServer::Display::Mode const&>,std::tuple<>>((float *)this + 6610, v84, (uint64_t *)this + 3388)+ 6);
      int v86 = *((_DWORD *)std::__hash_table<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::__unordered_map_hasher<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,CA::WindowServer::IOMFBDisplay::ModeHash,std::equal_to<CA::WindowServer::Display::Mode>,true>,std::__unordered_map_equal<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>,std::equal_to<CA::WindowServer::Display::Mode>,CA::WindowServer::IOMFBDisplay::ModeHash,true>,std::allocator<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::IOMFBDisplay::ModeInfo>>>::__emplace_unique_key_args<CA::WindowServer::Display::Mode,std::piecewise_construct_t const&,std::tuple<CA::WindowServer::Display::Mode const&>,std::tuple<>>((float *)this + 6610, *((void *)this + 3388), (uint64_t *)this + 3388)+ 7);
      int v87 = IOMobileFramebufferSetDigitalOutMode();
      CA::WindowServer::IOMFBDisplay::update_display_bandwidth_limits(this, (CA::WindowServer::IOMFBDisplay *)((char *)this + 27104));
      CA::WindowServer::IOMFBDisplay::update_timing_info((uint64_t)this);
      if (v87)
      {
        x_log_crash("CoreAnimation: failed to set internal panel mode! [%d %d] %dx%d: 0x%x", v85, v86, *((_DWORD *)this + 6776) & 0x3FFF, (*((_DWORD *)this + 6776) >> 14) & 0x3FFF, v87);
        abort();
      }
      uint64_t v88 = *((void *)this + 3388);
      if (!CA::WindowServer::Display::Mode::operator==(v88, *((void *)this + 81)))
      {
        *(_DWORD *)v247 = v88 & 0x3FFF;
        *(_DWORD *)&v247[4] = (v88 >> 14) & 0x3FFF;
        __asm { FMOV            V0.2D, #1.0 }
        *(_OWORD *)buf = _Q0;
        CA::WindowServer::Display::set_size((uint64_t)this, (uint64_t)v247, (uint64_t)v247, (double *)buf, *(double *)&_Q0, v77, v78, v79, v80, v81, v82, v83);
        goto LABEL_207;
      }
    }
    CA::WindowServer::IOMFBDisplay::set_physical_and_canvas_sizes((__n128 *)this, v76, v77, v78, v79, v80, v81, v82, v83);
    goto LABEL_207;
  }
LABEL_298:
  if ((v4 & 8) != 0) {
    IOMobileFramebufferEnableDisableVideoPowerSavings();
  }
  if ((v4 & 0x20) != 0 && (*((_WORD *)this + 328) & 0x1C00) != 0x800) {
    IOMobileFramebufferSetContrast();
  }
  if ((v4 & 0x10) != 0) {
    IOMobileFramebufferSetColorRemapMode();
  }
  if ((v4 & 0x100) != 0) {
    IOMobileFramebufferSetBrightnessCorrection();
  }
  if ((v4 & 0x86) == 0) {
    goto LABEL_318;
  }
  if (!*((unsigned char *)this + 636) || (uint64_t v185 = *((void *)this + 80)) == 0)
  {
    *(void *)v247 = 0;
    goto LABEL_315;
  }
  if (*((unsigned char *)this + 636) == 2)
  {
    if ((*((_WORD *)this + 328) & 0x1C00) == 0x800 && v3[1860])
    {
      *(_DWORD *)v247 = v185 & 0x3FFF;
      *(_DWORD *)&v247[4] = (v185 >> 14) & 0x3FFF;
      v186 = (uint8_t *)this + 28124;
      __asm { FMOV            V0.2D, #1.0 }
      *(_OWORD *)buf = _Q0;
LABEL_316:
      CA::WindowServer::Display::set_size((uint64_t)this, (uint64_t)v247, (uint64_t)v186, (double *)buf, *(double *)&_Q0, v14, v15, v16, v17, v18, v19, v20);
      goto LABEL_317;
    }
    *(_DWORD *)v247 = v185 & 0x3FFF;
    *(_DWORD *)&v247[4] = (v185 >> 14) & 0x3FFF;
LABEL_315:
    __asm { FMOV            V0.2D, #1.0 }
    *(_OWORD *)buf = _Q0;
    v186 = v247;
    goto LABEL_316;
  }
LABEL_317:
  CA::WindowServer::IOMFBDisplay::mark_buffers_non_static((uint64_t)this, 0);
LABEL_318:
  if (v31) {
    CA::WindowServer::Display::post_display_changed((uint64_t)this);
  }
  CA::WindowServer::Display::end_display_changes((uint64_t)this);
  if (cf) {
    CFRelease(cf);
  }
  if (v13) {
    CFRelease(v13);
  }
}

void sub_1847E8E90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CA::WindowServer::Display::end_display_changes(uint64_t this)
{
  if (!*(unsigned char *)(this + 672)) {
    __assert_rtn("end_display_changes", "windowserver-display.cpp", 1896, "_display_changing > 0");
  }
  uint64_t v1 = this;
  char v2 = *(unsigned char *)(this + 672) - 1;
  *(unsigned char *)(this + 672) = v2;
  if (!v2 && (*(unsigned char *)(this + 746) & 0x80) != 0)
  {
    CFDictionaryRef v3 = (_DWORD *)(this + 745);
    (*(void (**)(uint64_t, void))(*(void *)this + 2024))(this, *(void *)(this + 664));
    this = CA::WindowServer::Display::post_display_changed(v1);
    *v3 &= ~0x8000u;
  }
  return this;
}

void *CAML::ObjCContext::create_builtin_types(CAML::ObjCContext *this)
{
  if (CAML::ObjCContext::_builtin_types) {
    __assert_rtn("create_builtin_types", "CAMLObjCContext.mm", 36, "!_builtin_types");
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  CAML::ObjCContext::_builtin_types = (uint64_t)malloc_type_zone_calloc(malloc_zone, 1uLL, 0xC0uLL, 0x743898A5uLL);
  char v2 = (malloc_zone_t *)get_malloc_zone();
  CFDictionaryRef v3 = malloc_type_zone_malloc(v2, 0x20uLL, 0x8BB15036uLL);
  if (v3)
  {
    uint64_t v4 = objc_opt_class();
    v3[1] = "null";
    v3[2] = 0;
    v3[3] = v4;
    *CFDictionaryRef v3 = &unk_1ED030BD8;
  }
  *(void *)CAML::ObjCContext::_builtin_types = v3;
  int v5 = (malloc_zone_t *)get_malloc_zone();
  uint64_t v6 = malloc_type_zone_malloc(v5, 0x20uLL, 0x8BB15036uLL);
  if (v6)
  {
    uint64_t v7 = objc_opt_class();
    v6[1] = "BOOL";
    v6[2] = 0;
    v6[3] = v7;
    void *v6 = &unk_1ED030B88;
  }
  *(void *)(CAML::ObjCContext::_builtin_types + 8) = v6;
  int v8 = (malloc_zone_t *)get_malloc_zone();
  float64x2_t v9 = malloc_type_zone_malloc(v8, 0x20uLL, 0x8BB15036uLL);
  if (v9)
  {
    uint64_t v10 = objc_opt_class();
    v9[1] = "integer";
    v9[2] = 0;
    v9[3] = v10;
    *float64x2_t v9 = &unk_1ED0307A8;
  }
  *(void *)(CAML::ObjCContext::_builtin_types + 16) = v9;
  int v11 = (malloc_zone_t *)get_malloc_zone();
  uint64_t v12 = malloc_type_zone_malloc(v11, 0x20uLL, 0x8BB15036uLL);
  if (v12)
  {
    uint64_t v13 = objc_opt_class();
    v12[1] = "real";
    v12[2] = 0;
    v12[3] = v13;
    *uint64_t v12 = &unk_1ED030C28;
  }
  *(void *)(CAML::ObjCContext::_builtin_types + 24) = v12;
  double v14 = (malloc_zone_t *)get_malloc_zone();
  double v15 = malloc_type_zone_malloc(v14, 0x20uLL, 0x8BB15036uLL);
  if (v15)
  {
    uint64_t v16 = objc_opt_class();
    v15[1] = "string";
    v15[2] = 0;
    v15[3] = v16;
    void *v15 = &unk_1ED0305F8;
  }
  *(void *)(CAML::ObjCContext::_builtin_types + 32) = v15;
  double v17 = (malloc_zone_t *)get_malloc_zone();
  double v18 = malloc_type_zone_malloc(v17, 0x20uLL, 0x8BB15036uLL);
  if (v18)
  {
    v18[1] = "script";
    v18[2] = 0;
    v18[3] = 0;
    *double v18 = &unk_1ED0305A8;
  }
  *(void *)(CAML::ObjCContext::_builtin_types + 40) = v18;
  double v19 = (malloc_zone_t *)get_malloc_zone();
  int32x4_t v20 = malloc_type_zone_malloc(v19, 0x20uLL, 0x8BB15036uLL);
  if (v20)
  {
    uint64_t v21 = objc_opt_class();
    v20[1] = "NSArray";
    v20[2] = 0;
    v20[3] = v21;
    *int32x4_t v20 = &unk_1ED0307F8;
  }
  *(void *)(CAML::ObjCContext::_builtin_types + 48) = v20;
  uint64_t v22 = (malloc_zone_t *)get_malloc_zone();
  CFDictionaryRef v23 = malloc_type_zone_malloc(v22, 0x20uLL, 0x8BB15036uLL);
  if (v23)
  {
    uint64_t v24 = objc_opt_class();
    v23[1] = "NSSet";
    v23[2] = 0;
    v23[3] = v24;
    *CFDictionaryRef v23 = &unk_1ED030C78;
  }
  *(void *)(CAML::ObjCContext::_builtin_types + 56) = v23;
  CFDictionaryRef v25 = (malloc_zone_t *)get_malloc_zone();
  CFDictionaryRef v26 = malloc_type_zone_malloc(v25, 0x20uLL, 0x8BB15036uLL);
  if (v26)
  {
    uint64_t v27 = objc_opt_class();
    v26[1] = "NSDictionary";
    double v26[2] = 0;
    v26[3] = v27;
    *CFDictionaryRef v26 = &unk_1ED0308E8;
  }
  *(void *)(CAML::ObjCContext::_builtin_types + 64) = v26;
  int v28 = (malloc_zone_t *)get_malloc_zone();
  float v29 = malloc_type_zone_malloc(v28, 0x20uLL, 0x8BB15036uLL);
  if (v29)
  {
    uint64_t v30 = objc_opt_class();
    v29[1] = "NSURL";
    v29[2] = 0;
    v29[3] = v30;
    *float v29 = &unk_1ED030CC8;
  }
  *(void *)(CAML::ObjCContext::_builtin_types + 72) = v29;
  int v31 = (malloc_zone_t *)get_malloc_zone();
  int v32 = malloc_type_zone_malloc(v31, 0x20uLL, 0x8BB15036uLL);
  if (v32)
  {
    uint64_t v33 = objc_opt_class();
    v32[1] = "NSData";
    v32[2] = 0;
    v32[3] = v33;
    *int v32 = &unk_1ED030558;
  }
  *(void *)(CAML::ObjCContext::_builtin_types + 80) = v32;
  int v34 = (malloc_zone_t *)get_malloc_zone();
  CFStringRef v35 = malloc_type_zone_malloc(v34, 0x20uLL, 0x8BB15036uLL);
  if (v35)
  {
    uint64_t v36 = objc_opt_class();
    v35[1] = "CGPoint";
    v35[2] = 0;
    v35[3] = v36;
    *CFStringRef v35 = &unk_1ED0306E8;
  }
  *(void *)(CAML::ObjCContext::_builtin_types + 88) = v35;
  CFTypeID v37 = (malloc_zone_t *)get_malloc_zone();
  unsigned int v38 = malloc_type_zone_malloc(v37, 0x20uLL, 0x8BB15036uLL);
  if (v38)
  {
    uint64_t v39 = objc_opt_class();
    v38[1] = "CGSize";
    v38[2] = 0;
    v38[3] = v39;
    *unsigned int v38 = &unk_1ED030508;
  }
  *(void *)(CAML::ObjCContext::_builtin_types + 96) = v38;
  int8x16_t v40 = (malloc_zone_t *)get_malloc_zone();
  int v41 = malloc_type_zone_malloc(v40, 0x20uLL, 0x8BB15036uLL);
  if (v41)
  {
    uint64_t v42 = objc_opt_class();
    v41[1] = "CGRect";
    void v41[2] = 0;
    v41[3] = v42;
    *int v41 = &unk_1ED0304B8;
  }
  *(void *)(CAML::ObjCContext::_builtin_types + 104) = v41;
  CFStringRef v43 = (malloc_zone_t *)get_malloc_zone();
  CFTypeID v44 = malloc_type_zone_malloc(v43, 0x20uLL, 0x8BB15036uLL);
  if (v44)
  {
    uint64_t v45 = objc_opt_class();
    v44[1] = "CGAffineTransform";
    v44[2] = 0;
    v44[3] = v45;
    *CFTypeID v44 = &unk_1ED030A78;
  }
  *(void *)(CAML::ObjCContext::_builtin_types + 112) = v44;
  CFDictionaryRef v46 = (malloc_zone_t *)get_malloc_zone();
  CFDictionaryRef v47 = malloc_type_zone_malloc(v46, 0x20uLL, 0x8BB15036uLL);
  if (v47)
  {
    v47[1] = "CGColor";
    v47[2] = 0;
    v47[3] = 0;
    *CFDictionaryRef v47 = &unk_1ED030648;
  }
  *(void *)(CAML::ObjCContext::_builtin_types + 120) = v47;
  CFTypeID v48 = (malloc_zone_t *)get_malloc_zone();
  CFDictionaryRef v49 = malloc_type_zone_malloc(v48, 0x20uLL, 0x8BB15036uLL);
  if (v49)
  {
    v49[1] = "CGFont";
    v49[2] = 0;
    v49[3] = 0;
    *CFDictionaryRef v49 = &unk_1ED030418;
  }
  *(void *)(CAML::ObjCContext::_builtin_types + 128) = v49;
  CFDictionaryRef v50 = (malloc_zone_t *)get_malloc_zone();
  BOOL v51 = malloc_type_zone_malloc(v50, 0x20uLL, 0x8BB15036uLL);
  if (v51)
  {
    v51[1] = "CGImage";
    v51[2] = 0;
    v51[3] = 0;
    *BOOL v51 = &unk_1ED030698;
  }
  *(void *)(CAML::ObjCContext::_builtin_types + 136) = v51;
  unint64_t v52 = (malloc_zone_t *)get_malloc_zone();
  __int16 v53 = malloc_type_zone_malloc(v52, 0x20uLL, 0x8BB15036uLL);
  if (v53)
  {
    v53[1] = "CGPath";
    v53[2] = 0;
    v53[3] = 0;
    *__int16 v53 = &unk_1ED030468;
  }
  *(void *)(CAML::ObjCContext::_builtin_types + 144) = v53;
  int8x16_t v54 = (malloc_zone_t *)get_malloc_zone();
  int v55 = malloc_type_zone_malloc(v54, 0x20uLL, 0x8BB15036uLL);
  if (v55)
  {
    v55[1] = "CGPDFDocument";
    v55[2] = 0;
    v55[3] = 0;
    *int v55 = &unk_1ED030A28;
  }
  *(void *)(CAML::ObjCContext::_builtin_types + 152) = v55;
  int32x2_t v56 = (malloc_zone_t *)get_malloc_zone();
  uint32x2_t v57 = malloc_type_zone_malloc(v56, 0x20uLL, 0x8BB15036uLL);
  if (v57)
  {
    uint64_t v58 = objc_opt_class();
    v57[1] = "CATransform3D";
    v57[2] = 0;
    v57[3] = v58;
    void *v57 = &unk_1ED0309D8;
  }
  *(void *)(CAML::ObjCContext::_builtin_types + 160) = v57;
  int v59 = (malloc_zone_t *)get_malloc_zone();
  int v60 = malloc_type_zone_malloc(v59, 0x20uLL, 0x8BB15036uLL);
  if (v60)
  {
    uint64_t v61 = objc_opt_class();
    v60[1] = "CAPoint3D";
    v60[2] = 0;
    v60[3] = v61;
    *int v60 = &unk_1ED030898;
  }
  *(void *)(CAML::ObjCContext::_builtin_types + 168) = v60;
  uint32x2_t v62 = (malloc_zone_t *)get_malloc_zone();
  unsigned int v63 = malloc_type_zone_malloc(v62, 0x20uLL, 0x8BB15036uLL);
  if (v63)
  {
    uint64_t v64 = objc_opt_class();
    v63[1] = "CACornerRadii";
    v63[2] = 0;
    v63[3] = v64;
    *unsigned int v63 = &unk_1ED030988;
  }
  *(void *)(CAML::ObjCContext::_builtin_types + 176) = v63;
  int v65 = (malloc_zone_t *)get_malloc_zone();
  uint64_t result = malloc_type_zone_malloc(v65, 0x20uLL, 0x8BB15036uLL);
  uint64_t v67 = result;
  if (result)
  {
    uint64_t result = objc_opt_class();
    v67[1] = "CAColorMatrix";
    v67[2] = 0;
    v67[3] = result;
    *uint64_t v67 = &unk_1ED030938;
  }
  *(void *)(CAML::ObjCContext::_builtin_types + 184) = v67;
  return result;
}

void sub_1847E97E0(_Unwind_Exception *a1)
{
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN2CA14CAPSEProcessor16needs_processingEv_block_invoke()
{
  uint64_t result = objc_opt_class();
  CA::CAPSEProcessor::needs_processing(void)::has_class = result != 0;
  return result;
}

uint64_t ___ZN2CA12ColorProgram7Program13color_programEPK21CGColorConversionInfoP12CGColorSpacei28CGColorConversionIterateTypebijffRb_block_invoke_35(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v13 = 0u;
  long long v14 = 0u;
  long long v12 = 0u;
  CGColorMatrixGetMatrix();
  if (BYTE8(xmmword_1EB2ACC30)) {
    CA::ColorProgram::print_matrix(a3, a4, (float *)&v12);
  }
  *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = *(void *)(a2 + 20);
  **(_DWORD **)(*(void *)(a1[5] + 8) + 24) = v12;
  *(_DWORD *)(*(void *)(*(void *)(a1[5] + 8) + 24) + 4) = v13;
  *(_DWORD *)(*(void *)(*(void *)(a1[5] + 8) + 24) + 8) = v14;
  *(_DWORD *)(*(void *)(*(void *)(a1[5] + 8) + 24) + 12) = 0;
  int v8 = DWORD2(v12);
  *(_DWORD *)(*(void *)(*(void *)(a1[5] + 8) + 24) + 16) = DWORD1(v12);
  int v9 = HIDWORD(v12);
  *(_DWORD *)(*(void *)(*(void *)(a1[5] + 8) + 24) + 20) = DWORD1(v13);
  *(_DWORD *)(*(void *)(*(void *)(a1[5] + 8) + 24) + 24) = DWORD1(v14);
  *(_DWORD *)(*(void *)(*(void *)(a1[5] + 8) + 24) + 28) = 0;
  *(_DWORD *)(*(void *)(*(void *)(a1[5] + 8) + 24) + 32) = v8;
  int v10 = HIDWORD(v13);
  *(_DWORD *)(*(void *)(*(void *)(a1[5] + 8) + 24) + 36) = DWORD2(v13);
  *(_DWORD *)(*(void *)(*(void *)(a1[5] + 8) + 24) + 40) = DWORD2(v14);
  *(_DWORD *)(*(void *)(*(void *)(a1[5] + 8) + 24) + 44) = 0;
  *(_DWORD *)(*(void *)(*(void *)(a1[5] + 8) + 24) + 48) = v9;
  *(_DWORD *)(*(void *)(*(void *)(a1[5] + 8) + 24) + 52) = v10;
  *(_DWORD *)(*(void *)(*(void *)(a1[5] + 8) + 24) + 56) = HIDWORD(v14);
  *(_DWORD *)(*(void *)(*(void *)(a1[5] + 8) + 24) + 60) = 0;
  *(_DWORD *)(*(void *)(a1[6] + 8) + 24) |= 1 << *(_DWORD *)(*(void *)(a1[7] + 8) + 24);
  *(_DWORD *)(*(void *)(a1[7] + 8) + 24) += 5;
  *(void *)(*(void *)(a1[5] + 8) + 24) += 64;
  return 1;
}

uint64_t ___ZN2CA12ColorProgram7Program13color_programEPK21CGColorConversionInfoP12CGColorSpacei28CGColorConversionIterateTypebijffRb_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (BYTE8(xmmword_1EB2ACC30)) {
    CA::ColorProgram::print_CGColorConverterInfo(a2);
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(void *)(a2 + 12);
  if (*(uint64_t *)(a2 + 4) > 6)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      int v11 = x_log_category_color;
      uint64_t result = os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_INFO);
      if (!result) {
        return result;
      }
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = 6;
      _os_log_impl(&dword_184668000, v11, OS_LOG_TYPE_INFO, "Color matching limited to %d-stage format (TRC -> ToneMap --> NxM/LUT -> TRC), falling back to cube LUT\n", buf, 8u);
    }
    return 0;
  }
  if (*(uint64_t *)(a2 + 28) >= 1)
  {
    uint64_t v4 = 0;
    int v5 = 0;
    unsigned int v6 = 0;
    while (1)
    {
      int v25 = 0;
      *(_OWORD *)buf = 0u;
      long long v24 = 0u;
      CGColorTRCGetFunction();
      int v7 = CGColorTRCGetGammaID();
      if ((*(unsigned char *)(a1 + 72) & 0x80) != 0)
      {
        if (v7 == 1)
        {
          uint64_t v8 = 0xCu;
LABEL_15:
          v5 += CA::ColorProgram::kOpcodeParamCount[v8];
          if (*(_DWORD *)buf == 5)
          {
            uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
            unint64_t v10 = *(unsigned int *)(v9 + 24);
            if (*(void *)&buf[4] > v10) {
              LODWORD(v10) = *(_DWORD *)&buf[4];
            }
            *(_DWORD *)(v9 + 24) = v10;
            ++v6;
          }
          goto LABEL_19;
        }
        if (v7 == 4)
        {
          uint64_t v8 = 0xBu;
          goto LABEL_15;
        }
      }
      if (*(_DWORD *)buf <= 9u)
      {
        uint64_t v8 = dword_1849A63A4[*(unsigned int *)buf];
        goto LABEL_15;
      }
LABEL_19:
      if (*(void *)(a2 + 28) <= ++v4) {
        goto LABEL_24;
      }
    }
  }
  unsigned int v6 = 0;
  int v5 = 0;
LABEL_24:
  uint64_t v13 = *(void *)(a2 + 36);
  if (v13 <= 0) {
    int v14 = 0;
  }
  else {
    int v14 = 4 * v13;
  }
  unsigned int v15 = v5 + v14;
  if (*(uint64_t *)(a2 + 44) > 0)
  {
    uint64_t v16 = 0;
    do
    {
      int v25 = 0;
      *(_OWORD *)buf = 0u;
      long long v24 = 0u;
      CGColorNxMTransformGetTransform();
      v15 += CA::ColorProgram::kOpcodeParamCount[0];
      ++v16;
    }
    while (*(void *)(a2 + 44) > v16);
  }
  uint64_t result = (uint64_t)malloc_type_calloc(1uLL, 16 * v15 + 112, 0xBBAC55FCuLL);
  if (result)
  {
    *(_DWORD *)(result + 36) = *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = result;
    uint64_t v17 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
    if (!v17) {
      return 0;
    }
    *(_DWORD *)(v17 + 40) = v15;
    uint64_t v18 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
    *(void *)(v18 + 48) = v18 + 112;
    *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) + 56) = v6;
    *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) + 96) = *(_DWORD *)(a1 + 76);
    if (v6)
    {
      *(void *)(*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) + 72) = malloc_type_calloc(4uLL, v6, 0xA3244538uLL);
      if (*(unsigned char *)(a1 + 80)) {
        char v19 = 2;
      }
      else {
        char v19 = 1;
      }
      uint64_t v22 = (void *)((((unint64_t)*(unsigned int *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) << v19) + 31) & 0xFFFFFFFE0);
      int32x4_t v20 = (CGColorSpace *)malloc_type_calloc(v6, (size_t)v22, 0xE81C452CuLL);
      if (*(uint64_t *)(a2 + 28) >= 1)
      {
        uint64_t v21 = 0;
        do
        {
          int v25 = 0;
          *(_OWORD *)buf = 0u;
          long long v24 = 0u;
          CGColorTRCGetFunction();
          ++v21;
        }
        while (*(void *)(a2 + 28) > v21);
      }
      *(void *)(*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) + 64) = CA::Render::Image::new_image((CA::Render::Image *)0x17, *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24), v6, 1u, 0, v20, (unint64_t *)&v22, (const unint64_t *)CA::ColorProgram::free_lut_data, (void (*)(const void *, void *))v20, v22);
    }
    *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = *(void *)(*(void *)(*(void *)(*(void *)(a1 + 48) + 8)
                                                                                        + 24)
                                                                            + 48);
    return 1;
  }
  return result;
}

double CA::Render::ImageQueue::flush_cache(CA::Render::ImageQueue *this)
{
  char v2 = (atomic_uint *)*((void *)this + 3);
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
    }
    *((void *)this + 3) = 0;
  }
  CFDictionaryRef v3 = (atomic_uint *)*((void *)this + 4);
  if (v3)
  {
    if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
    }
    *((void *)this + 4) = 0;
  }
  *((void *)this + 5) = 0x7FF0000000000000;
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 47) = 0;
  uint64_t v4 = (atomic_uint *)*((void *)this + 8);
  if (v4)
  {
    if (atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
    }
    *((void *)this + 8) = 0;
  }
  int v5 = (atomic_uint *)*((void *)this + 10);
  if (v5)
  {
    if (atomic_fetch_add(v5 + 2, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v5 + 16))(v5);
    }
    *((void *)this + 10) = 0;
  }
  *((unsigned char *)this + 140) = 0;
  *((_DWORD *)this + 26) = 0;
  *(void *)&double result = 1065353216;
  *(_OWORD *)((char *)this + 88) = xmmword_184997E10;
  *((_DWORD *)this + 3) = *((_DWORD *)this + 3) & 0xFFFFF1FF | 0x600;
  return result;
}

uint64_t CA::OGL::render_alpha_smooth_threshold_filter(void *a1, CA::Render::KeyValueArray *this, int *a3, float a4)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  float float_key = CA::Render::KeyValueArray::get_float_key(this, 276, 0.5);
  double v9 = CA::Render::KeyValueArray::get_float_key(this, 317, 0.25);
  double v10 = CA::Render::KeyValueArray::get_float_key(this, 293, 0.75);
  v11.i32[0] = 1065353048;
  if (float_key <= 0.99999) {
    v11.f32[0] = float_key;
  }
  if (v11.f32[0] < 0.00001) {
    v11.f32[0] = 0.00001;
  }
  float v12 = v10;
  float v13 = v9;
  float v14 = v12 - v13;
  v27[0] = 1.0 / v14;
  v27[1] = (float)-v13 / v14;
  v11.f32[1] = 1.0 - v11.f32[0];
  float32x2_t v15 = vdiv_f32((float32x2_t)0x4000000040000000, v11);
  __asm { FMOV            V1.2S, #-4.0 }
  float32x2_t v28 = vadd_f32(v15, _D1);
  v25.i64[0] = 0;
  v25.i64[1] = 0x3F80000000000000;
  CA::Render::KeyValueArray::get_float_color_key(this, 286, &v25);
  float32x4_t v26 = v25;
  CA::OGL::bind_filter_surface((uint64_t)a1, (uint64_t)a3, a4);
  uint64_t v30 = 0;
  memset(&v29[2], 0, 32);
  memset(v29, 0, 32);
  uint64_t v21 = a1[31];
  *(_OWORD *)((char *)v29 + 8) = *(_OWORD *)(v21 + 8);
  uint64_t v22 = *(void *)(v21 + 32);
  *((void *)&v29[1] + 1) = *(void *)(v21 + 24);
  *(void *)&v29[2] = v22;
  *(_OWORD *)((char *)&v29[2] + 8) = *(_OWORD *)(v21 + 40);
  *((void *)&v29[3] + 1) = *(void *)(v21 + 56);
  __int16 v23 = *(_WORD *)(v21 + 68);
  LODWORD(v30) = *(_DWORD *)(v21 + 64);
  HIDWORD(v30) = v23 & 0x5FF;
  *(void *)&v29[0] = CA::OGL::Context::set_gstate((uint64_t)a1, (uint64_t)v29);
  *(unsigned char *)(a1[2] + 16) = 68;
  (*(void (**)(void *, void, uint64_t, uint64_t, float *))(*a1 + 1000))(a1, 0, 4, 1, v27);
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t, float32x4_t *))(*a1 + 1000))(a1, 1, 4, 1, &v26);
  CA::OGL::emit_filter_quads((uint64_t)a1, a3, a4);
  *(unsigned char *)(a1[2] + 16) = 0;
  uint64_t result = CA::OGL::Context::set_gstate((uint64_t)a1, *(void *)a1[31]);
  if ((int *)a1[33] != a3) {
    uint64_t result = CA::OGL::Context::unbind_surface(a1, (uint64_t)a3, 0);
  }
  *(unsigned char *)(a1[2] + 16) = 0;
  *(unsigned char *)(a1[2] + 19) = 0;
  return result;
}

void *CA::OGL::create_gamma_lut_buffer(void *a1)
{
  uint64_t v1 = (void *)[a1 newBufferWithLength:0x20000 options:0];
  char v2 = v1;
  if (v1)
  {
    [v1 setLabel:@"com.apple.coreanimation.gamma-lut"];
    uint64_t v3 = [v2 contents];
    for (uint64_t i = 0; i != 0x8000; ++i)
    {
      _Q0.i16[0] = 2 * i;
      __asm { FCVT            S0, H0 }
      float v11 = fabsf(*(float *)_Q0.i32);
      int8x16_t v23 = _Q0;
      if (v11 <= 0.04045)
      {
        *(float *)_Q1.i32 = *(float *)_Q0.i32 * 0.077399;
      }
      else
      {
        *(float *)v12.i32 = powf((float)(v11 * 0.94787) + 0.052133, 2.4);
        v13.i64[0] = 0x8000000080000000;
        v13.i64[1] = 0x8000000080000000;
        _Q1 = vbslq_s8(v13, v12, v23);
        _Q0 = v23;
      }
      if (v11 <= 0.0031308)
      {
        *(float *)_Q0.i32 = *(float *)_Q0.i32 * 12.92;
      }
      else
      {
        int8x16_t v22 = _Q1;
        *(float *)v14.i32 = (float)(powf(v11, 0.41667) * 1.055) + -0.055;
        v15.i64[0] = 0x8000000080000000;
        v15.i64[1] = 0x8000000080000000;
        _Q0 = vbslq_s8(v15, v14, v23);
        _Q1 = v22;
      }
      int v16 = _Q1.i32[0] & 0x7FFFFFFF;
      __asm { FCVT            H1, S1 }
      int v18 = _Q0.i32[0] & 0x7FFFFFFF;
      __asm { FCVT            H0, S0 }
      if (v16 >= 2139095040) {
        _H1 = COERCE_SHORT_FLOAT(0);
      }
      int32x4_t v20 = (short float *)(v3 + 2 * i);
      *int32x4_t v20 = _H1;
      if (v18 >= 2139095040) {
        _H0 = COERCE_SHORT_FLOAT(0);
      }
      v20[0x8000] = _H0;
    }
  }
  return v2;
}

CA::OGL::Context *CA::OGL::fill_uneven_round_rect_tex(CA::OGL::Context *result, uint64_t a2, float64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  int v5 = *(float64x2_t **)a2;
  double v6 = *(double *)(*(void *)a2 + 16);
  if (v6 >= *(double *)(*(void *)a2 + 24)) {
    double v6 = *(double *)(*(void *)a2 + 24);
  }
  if (v6 > 0.0)
  {
    uint64_t v11 = (uint64_t)result;
    float64_t v12 = *a3;
    double v13 = a3[2];
    if (*a3 == v13)
    {
      double v14 = a3[1];
      double v15 = a3[3];
      if (v14 == v15)
      {
        double v16 = a3[4];
        if (v13 == v16)
        {
          double v17 = a3[5];
          if (v15 == v17 && v16 == a3[6] && v17 == a3[7])
          {
            return CA::OGL::fill_round_rect_tex(result, (float64x2_t **)a2, a4, (double *)0xF, a5, 0, v12, v14);
          }
        }
      }
    }
    double v67 = 0.0;
    double v68 = 0.0;
    uint64_t v18 = *(void *)(a2 + 8);
    if ((*(unsigned char *)(v18 + 144) & 0x10) != 0)
    {
      CA::Mat4Impl::mat4_get_scale((CA::Mat4Impl *)v18, &v68, &v67, (double *)a4);
    }
    else
    {
      double v67 = *(double *)(v18 + 128);
      double v68 = v67;
    }
    uint64_t v19 = 0;
    double v20 = 0.0;
    do
    {
      double v21 = a3[v19];
      if (v21 <= a3[v19 + 1]) {
        double v21 = a3[v19 + 1];
      }
      if (v20 <= v21) {
        double v20 = v21;
      }
      v19 += 2;
    }
    while (v19 != 8);
    v22.f64[0] = v68;
    if (v68 <= v67) {
      double v23 = v67;
    }
    else {
      double v23 = v68;
    }
    double v24 = v23 * v20;
    if (a5) {
      double v24 = v24 * 1.528665;
    }
    if (v24 < 1.0) {
      return CA::OGL::fill_rect_tex((CA::OGL::Context *)v11, a2, a4, (double *)a4);
    }
    uint64_t v25 = 0;
    double v26 = v5->f64[0];
    double v27 = v5->f64[1];
    v22.f64[1] = v67;
    __asm { FMOV            V0.2D, #0.5 }
    float64x2_t v33 = v5[1];
    long long v78 = 0u;
    long long v79 = 0u;
    double v34 = v33.f64[0] + v26;
    int8x16_t v35 = (int8x16_t)vcvtq_f64_f32(vcvt_f32_f64(vdivq_f64(_Q0, v22)));
    __asm { FMOV            V0.2D, #1.0 }
    double v65 = v33.f64[1];
    float64x2_t v37 = vdivq_f64((float64x2_t)_Q0, v33);
    float32x2_t v38 = (float32x2_t)vdup_n_s32(0x3FC3AB4Bu);
    do
    {
      while (1)
      {
        float32x2_t v39 = vcvt_f32_f64(vmulq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(*(float64x2_t *)&a3[2 * v25], (float64x2_t)v35), *(int8x16_t *)&a3[2 * v25], v35), v37));
        *((float32x2_t *)&v78 + v25) = v39;
        if (!a5) {
          break;
        }
        *((float32x2_t *)&v78 + v25++) = vmul_f32(v39, v38);
        if (v25 == 4)
        {
          uint64_t v40 = v11 + 16;
          *(unsigned char *)(*(void *)(v11 + 16) + 16) = 5;
          uint64_t v77 = 0;
          v41.i64[0] = __PAIR64__(HIDWORD(v78), v78);
          v42.i64[0] = __PAIR64__(DWORD1(v79), DWORD2(v78));
          v42.i64[1] = __PAIR64__(DWORD1(v78), DWORD2(v79));
          v41.i64[1] = __PAIR64__(HIDWORD(v79), v79);
          float32x4_t v43 = vaddq_f32(v42, v41);
          float64x2_t v44 = (float64x2_t)vdupq_n_s64(0x400721E8A7A4B61BuLL);
          int8x16_t v45 = (int8x16_t)vsubq_f64(v44, vdivq_f64(v44, vcvt_hight_f64_f32(v43)));
          int8x16_t v46 = (int8x16_t)vsubq_f64(v44, vdivq_f64(v44, vcvtq_f64_f32(*(float32x2_t *)v43.f32)));
          int8x16_t v47 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v45, (float64x2_t)_Q0), _Q0, v45);
          int8x16_t v48 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v46, (float64x2_t)_Q0), _Q0, v46);
          v70[0] = (float64x2_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)vbicq_s8(v48, (int8x16_t)vcltzq_f64((float64x2_t)v48))), (float64x2_t)vbicq_s8(v47, (int8x16_t)vcltzq_f64((float64x2_t)v47)));
          uint64_t result = (CA::OGL::Context *)(*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t *, uint64_t, float64x2_t *))(*(void *)v11 + 488))(v11, 1, &v78, &v77, a5, v70);
          goto LABEL_35;
        }
      }
      ++v25;
    }
    while (v25 != 4);
    uint64_t v40 = v11 + 16;
    *(unsigned char *)(*(void *)(v11 + 16) + 16) = 5;
    uint64_t v77 = 0;
    uint64_t result = (CA::OGL::Context *)(*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t *))(*(void *)v11 + 480))(v11, 1, &v78, &v77);
LABEL_35:
    long long v75 = 0u;
    long long v76 = 0u;
    long long v73 = 0u;
    long long v74 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    v70[1] = 0u;
    if ((*(_DWORD *)(v11 + 136) & 0xFFFFFFFC) != 0)
    {
      uint64_t v49 = *(void *)(v11 + 120);
      for (uint64_t i = 1; i != 9; i += 2)
        v70[i] = (float64x2_t)xmmword_184997D60;
      v70[0].f64[0] = v26;
      v70[0].f64[1] = v27;
      *(double *)&long long v71 = v34;
      *((double *)&v71 + 1) = v27;
      *(double *)&long long v73 = v26;
      *((double *)&v73 + 1) = v65 + v27;
      *(double *)&long long v75 = v34;
      *((double *)&v75 + 1) = v65 + v27;
      int v51 = *(_DWORD *)a4;
      *(_DWORD *)(v49 + 112) = *(_DWORD *)a4;
      *(_DWORD *)(v49 + 16) = v51;
      int v52 = *(_DWORD *)(a4 + 8);
      *(_DWORD *)(v49 + 160) = v52;
      *(_DWORD *)(v49 + 64) = v52;
      int v53 = *(_DWORD *)(a4 + 4);
      *(_DWORD *)(v49 + 68) = v53;
      *(_DWORD *)(v49 + 20) = v53;
      int v54 = *(_DWORD *)(a4 + 12);
      uint64_t v55 = v77;
      *(_DWORD *)(v49 + 116) = v54;
      *(_DWORD *)(v49 + 120) = v55;
      *(_DWORD *)(v49 + 164) = v54;
      *(_DWORD *)(v49 + 168) = HIDWORD(v55);
      *(_DWORD *)(v49 + 72) = HIDWORD(v55);
      *(_DWORD *)(v49 + 76) = v55;
      *(_DWORD *)(v49 + 24) = v55;
      *(_DWORD *)(v49 + 28) = v55;
      *(_DWORD *)(v49 + 172) = HIDWORD(v55);
      *(_DWORD *)(v49 + 124) = HIDWORD(v55);
      uint64_t v56 = *(void *)(*(void *)v40 + 8);
      for (uint64_t j = 32; j != 224; j += 48)
        *(void *)(v49 + j) = v56;
      uint64_t v58 = *(void (**)(uint64_t, float64x2_t *, uint64_t, uint64_t))(a2 + 24);
      if (v58) {
        v58(a2, v70, v49, 4);
      }
      CA::OGL::transform_vertices(v70, (float32x4_t *)v49, (const double *)4, *(float64x2_t **)(a2 + 8));
      int v59 = *(void (**)(uint64_t, uint64_t, uint64_t))(a2 + 32);
      if (v59) {
        v59(a2, v49, 4);
      }
      int v60 = *(_DWORD *)(a2 + 20);
      if ((v60 & 0xF) == 0 || (*(unsigned char *)(a2 + 16) & 9) == 0) {
        goto LABEL_52;
      }
      if ((v60 & 4) != 0)
      {
        CA::OGL::aa_adjust_vertices(v49, v49 + 96, 48, 2);
        int v60 = *(_DWORD *)(a2 + 20);
      }
      if ((v60 & 8) != 0)
      {
        CA::OGL::aa_adjust_vertices(v49 + 96, v49, 48, 2);
        int v60 = *(_DWORD *)(a2 + 20);
        if ((v60 & 1) == 0)
        {
LABEL_50:
          if ((v60 & 2) == 0) {
            goto LABEL_52;
          }
          goto LABEL_51;
        }
      }
      else if ((v60 & 1) == 0)
      {
        goto LABEL_50;
      }
      CA::OGL::aa_adjust_vertices(v49, v49 + 48, 96, 2);
      if ((*(_DWORD *)(a2 + 20) & 2) == 0)
      {
LABEL_52:
        BOOL v61 = CA::OGL::Context::need_transparent_source((CA::OGL::Context *)v11);
        CA::OGL::emit_quad_indices(v11, *(float64x2_t **)(a2 + 40), CA::OGL::fill_uneven_round_rect_tex(CA::OGL::Context &,CA::OGL::RectState const&,CA::Vec2<double> *,float const*,unsigned int)::indices, 4uLL, 4u);
        uint64_t result = (CA::OGL::Context *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v11 + 520))(v11, 0, 0);
        *(unsigned char *)(*(void *)(v11 + 16) + 16) = 0;
        if (v61)
        {
          float64x2_t v62 = vcvtq_f64_f32(*(float32x2_t *)(v49 + 8));
          v69[0] = vcvtq_f64_f32(*(float32x2_t *)v49);
          v69[1] = v62;
          float64x2_t v63 = vcvtq_f64_f32(*(float32x2_t *)(v49 + 56));
          v69[2] = vcvtq_f64_f32(*(float32x2_t *)(v49 + 48));
          v69[3] = v63;
          float64x2_t v64 = vcvtq_f64_f32(*(float32x2_t *)(v49 + 152));
          v69[4] = vcvtq_f64_f32(*(float32x2_t *)(v49 + 144));
          v69[5] = v64;
          v64.f64[0] = *(float64_t *)(v49 + 104);
          v69[6] = vcvtq_f64_f32(*(float32x2_t *)(v49 + 96));
          v69[7] = vcvtq_f64_f32(*(float32x2_t *)&v64.f64[0]);
          uint64_t v66 = 0;
          return (CA::OGL::Context *)CA::OGL::emit_quad_surround(v11, (const double *)v69, &v66);
        }
        return result;
      }
LABEL_51:
      CA::OGL::aa_adjust_vertices(v49 + 48, v49, 96, 2);
      goto LABEL_52;
    }
  }
  return result;
}

_DWORD *CA::ColorProgram::Program::color_program(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7, float a8, float a9)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v40 = 0;
  float32x4_t v41 = &v40;
  uint64_t v42 = 0x2000000000;
  uint64_t v43 = 0;
  uint64_t v36 = 0;
  float64x2_t v37 = &v36;
  uint64_t v38 = 0x2000000000;
  int v39 = 0;
  v34[0] = 0;
  v34[1] = v34;
  v34[2] = 0x2000000000;
  int v35 = 0;
  v33[0] = 0;
  v33[1] = v33;
  v33[2] = 0x2000000000;
  v33[3] = 0;
  v31[0] = 0;
  v31[1] = v31;
  v31[2] = 0x2000000000;
  int v32 = 0;
  v29[0] = 0;
  v29[1] = v29;
  v29[2] = 0x2000000000;
  int v30 = 0;
  v28[0] = 0;
  v28[1] = v28;
  v28[2] = 0x2000000000;
  v28[3] = 0;
  v26[0] = 0;
  v26[1] = v26;
  double v26[2] = 0x2000000000;
  int v27 = 0;
  v25[0] = 0;
  v25[1] = v25;
  v25[2] = 0x2000000000;
  v25[3] = 0;
  if ((CGColorConversionInfoIterateFunctionsWithCallbacks() & 1) == 0)
  {
    uint64_t v19 = (CA::ColorProgram::Program *)v41[3];
    if (v19)
    {
      CA::ColorProgram::Program::~Program(v19);
      uint64_t v19 = (CA::ColorProgram::Program *)MEMORY[0x185323DC0]();
    }
    if (a3 == 1)
    {
      uint64_t v20 = a1;
      uint64_t v21 = a2;
      uint64_t v22 = 2;
    }
    else
    {
      if (a3)
      {
        *a7 = 1;
        double v23 = CA::ColorProgram::Program::null_program(v19);
        goto LABEL_11;
      }
      uint64_t v20 = a1;
      uint64_t v21 = a2;
      uint64_t v22 = 1;
    }
    double v23 = (_DWORD *)CA::ColorProgram::Program::color_program(v20, v21, v22, a4, a5, a6, a7, a8, a9);
LABEL_11:
    uint64_t v18 = v23;
    goto LABEL_12;
  }
  uint64_t v18 = (_DWORD *)v41[3];
  v18[9] = *((_DWORD *)v37 + 6);
LABEL_12:
  _Block_object_dispose(v25, 8);
  _Block_object_dispose(v26, 8);
  _Block_object_dispose(v28, 8);
  _Block_object_dispose(v29, 8);
  _Block_object_dispose(v31, 8);
  _Block_object_dispose(v33, 8);
  _Block_object_dispose(v34, 8);
  _Block_object_dispose(&v36, 8);
  _Block_object_dispose(&v40, 8);
  return v18;
}

void load_hdrprocessing_symbols(void)
{
  uint64_t v0 = dlopen("/System/Library/PrivateFrameworks/HDRProcessing.framework/HDRProcessing", 5);
  hdr_handle = (uint64_t)v0;
  if (v0)
  {
    uint64_t v1 = (uint64_t *)dlsym(v0, "kHDRProcessingDolbyVisionRPUDataKey");
    if (v1) {
      uint64_t v2 = *v1;
    }
    else {
      uint64_t v2 = 0;
    }
    _kHDRProcessingDolbyVisionRPUDataKey = v2;
    uint64_t v3 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingMaximumExtendedDynamicRangeColorComponentValueKey");
    if (v3) {
      uint64_t v4 = *v3;
    }
    else {
      uint64_t v4 = 0;
    }
    _kHDRProcessingMaximumExtendedDynamicRangeColorComponentValueKey = v4;
    int v5 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingEDRFactorKey");
    if (v5) {
      uint64_t v6 = *v5;
    }
    else {
      uint64_t v6 = 0;
    }
    _kHDRProcessingEDRFactorKey = v6;
    int v7 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingCurrentMaxPanelNitsKey");
    if (v7) {
      uint64_t v8 = *v7;
    }
    else {
      uint64_t v8 = 0;
    }
    _kHDRProcessingCurrentMaxPanelNitsKey = v8;
    double v9 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingAmbientLightInNitsKey");
    if (v9) {
      uint64_t v10 = *v9;
    }
    else {
      uint64_t v10 = 0;
    }
    _kHDRProcessingAmbientLightInNitsKey = v10;
    uint64_t v11 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingDolbyVisionBackwardDMMaximumValueKey");
    if (v11) {
      uint64_t v12 = *v11;
    }
    else {
      uint64_t v12 = 0;
    }
    _kHDRProcessingDolbyVisionBackwardDMMaximumValueKey = v12;
    double v13 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingUILayerScaleFactor");
    if (v13) {
      uint64_t v14 = *v13;
    }
    else {
      uint64_t v14 = 0;
    }
    _kHDRProcessingUILayerScaleFactor = v14;
    double v15 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingSDRMaxBrightnessInNits");
    if (v15) {
      uint64_t v16 = *v15;
    }
    else {
      uint64_t v16 = 0;
    }
    _kHDRProcessingSDRMaxBrightnessInNits = v16;
    double v17 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingSourceContentKey");
    if (v17) {
      uint64_t v18 = *v17;
    }
    else {
      uint64_t v18 = 0;
    }
    _kHDRProcessingSourceContentKey = v18;
    uint64_t v19 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingSourceContentTypeKey");
    if (v19) {
      uint64_t v20 = *v19;
    }
    else {
      uint64_t v20 = 0;
    }
    _kHDRProcessingSourceContentTypeKey = v20;
    uint64_t v21 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingSourceContentTypeDolbyVision");
    if (v21) {
      uint64_t v22 = *v21;
    }
    else {
      uint64_t v22 = 0;
    }
    _kHDRProcessingSourceContentTypeDolbyVision = v22;
    double v23 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingSourceContentTypeHLG");
    if (v23) {
      uint64_t v24 = *v23;
    }
    else {
      uint64_t v24 = 0;
    }
    _kHDRProcessingSourceContentTypeHLG = v24;
    uint64_t v25 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingSourceContentTypeHDR10");
    if (v25) {
      uint64_t v26 = *v25;
    }
    else {
      uint64_t v26 = 0;
    }
    _kHDRProcessingSourceContentTypeHDR10 = v26;
    int v27 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingSourceContentBitDepthKey");
    if (v27) {
      uint64_t v28 = *v27;
    }
    else {
      uint64_t v28 = 0;
    }
    _kHDRProcessingSourceContentBitDepthKey = v28;
    float v29 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingSourceContentSDRMaxBrightnessInNitsKey");
    if (v29) {
      uint64_t v30 = *v29;
    }
    else {
      uint64_t v30 = 0;
    }
    _kHDRProcessingSourceContentSDRMaxBrightnessInNitsKey = v30;
    uint64_t v31 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingSourceContentHDRMaxBrightnessInNitsKey");
    if (v31) {
      uint64_t v32 = *v31;
    }
    else {
      uint64_t v32 = 0;
    }
    _kHDRProcessingSourceContentHDRMaxBrightnessInNitsKey = v32;
    float64x2_t v33 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingDestinationDisplayTypeDolbyVisionTV");
    if (v33) {
      uint64_t v34 = *v33;
    }
    else {
      uint64_t v34 = 0;
    }
    _kHDRProcessingDestinationDisplayTypeDolbyVisionTV = v34;
    int v35 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingDestinationDisplayTypeLowLatencyDolbyVisionTV");
    if (v35) {
      uint64_t v36 = *v35;
    }
    else {
      uint64_t v36 = 0;
    }
    _kHDRProcessingDestinationDisplayTypeLowLatencyDolbyVisionTV = v36;
    float64x2_t v37 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingDestinationDisplayTypeHDR10TV");
    if (v37) {
      uint64_t v38 = *v37;
    }
    else {
      uint64_t v38 = 0;
    }
    _kHDRProcessingDestinationDisplayTypeHDR10TV = v38;
    int v39 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingDestinationDisplayTypeInternalPanel");
    if (v39) {
      uint64_t v40 = *v39;
    }
    else {
      uint64_t v40 = 0;
    }
    _kHDRProcessingDestinationDisplayTypeInternalPanel = v40;
    float32x4_t v41 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingDestinationDisplayTypeInternalPanelOLED");
    if (v41) {
      uint64_t v42 = *v41;
    }
    else {
      uint64_t v42 = 0;
    }
    _kHDRProcessingDestinationDisplayTypeInternalPanelOLED = v42;
    uint64_t v43 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingDestinationDisplayTypeInternalPanelLCD");
    if (v43) {
      uint64_t v44 = *v43;
    }
    else {
      uint64_t v44 = 0;
    }
    _kHDRProcessingDestinationDisplayTypeInternalPanelLCD = v44;
    int8x16_t v45 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingDestinationDisplayTypeInternalPanel0DBL");
    if (v45) {
      uint64_t v46 = *v45;
    }
    else {
      uint64_t v46 = 0;
    }
    _kHDRProcessingDestinationDisplayTypeInternalPanel0DBL = v46;
    int8x16_t v47 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingDestinationDisplayTypeInternalPanel2DBL");
    if (v47) {
      uint64_t v48 = *v47;
    }
    else {
      uint64_t v48 = 0;
    }
    _kHDRProcessingDestinationDisplayTypeInternalPanel2DBL = v48;
    uint64_t v49 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingDestinationDisplayTypeInternalPanelMac");
    if (v49) {
      uint64_t v50 = *v49;
    }
    else {
      uint64_t v50 = 0;
    }
    _kHDRProcessingDestinationDisplayTypeInternalPanelMadouble c = v50;
    int v51 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingDestinationDisplayTypeReferenceDisplay");
    if (v51) {
      uint64_t v52 = *v51;
    }
    else {
      uint64_t v52 = 0;
    }
    _kHDRProcessingDestinationDisplayTypeReferenceDisplay = v52;
    int v53 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingDestinationDisplayTypeKey");
    if (v53) {
      uint64_t v54 = *v53;
    }
    else {
      uint64_t v54 = 0;
    }
    _kHDRProcessingDestinationDisplayTypeKey = v54;
    uint64_t v55 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingDestinationDisplayTypeSDRTV");
    if (v55) {
      uint64_t v56 = *v55;
    }
    else {
      uint64_t v56 = 0;
    }
    _kHDRProcessingDestinationDisplayTypeSDRTV = v56;
    uint32x2_t v57 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingDisplayDiagonalSizeInInchesKey");
    if (v57) {
      uint64_t v58 = *v57;
    }
    else {
      uint64_t v58 = 0;
    }
    _kHDRProcessingDisplayDiagonalSizeInInchesKey = v58;
    int v59 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingDisplayMaximumBrightnessInNitsKey");
    if (v59) {
      uint64_t v60 = *v59;
    }
    else {
      uint64_t v60 = 0;
    }
    _kHDRProcessingDisplayMaximumBrightnessInNitsKey = v60;
    BOOL v61 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingDisplayAverageBrightnessInNitsKey");
    if (v61) {
      uint64_t v62 = *v61;
    }
    else {
      uint64_t v62 = 0;
    }
    _kHDRProcessingDisplayAverageBrightnessInNitsKey = v62;
    float64x2_t v63 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingDisplayMinimumBrightnessInNitsKey");
    if (v63) {
      uint64_t v64 = *v63;
    }
    else {
      uint64_t v64 = 0;
    }
    _kHDRProcessingDisplayMinimumBrightnessInNitsKey = v64;
    double v65 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingDisplayKey");
    if (v65) {
      uint64_t v66 = *v65;
    }
    else {
      uint64_t v66 = 0;
    }
    _kHDRProcessingDisplayKey = v66;
    double v67 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingDisplayContrastRatioKey");
    if (v67) {
      uint64_t v68 = *v67;
    }
    else {
      uint64_t v68 = 0;
    }
    _kHDRProcessingDisplayContrastRatioKey = v68;
    double v69 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingDisplayDolbyVisionDMVersionKey");
    if (v69) {
      uint64_t v70 = *v69;
    }
    else {
      uint64_t v70 = 0;
    }
    _kHDRProcessingDisplayDolbyVisionDMVersionKey = v70;
    long long v71 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingForwardDMDictinaryKey");
    if (v71) {
      uint64_t v72 = *v71;
    }
    else {
      uint64_t v72 = 0;
    }
    _kHDRProcessingForwardDMDictinaryKey = v72;
    long long v73 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingDolbyVisionBackwardDMDictinary");
    if (v73) {
      uint64_t v74 = *v73;
    }
    else {
      uint64_t v74 = 0;
    }
    _kHDRProcessingDolbyVisionBackwardDMDictinary = v74;
    long long v75 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingDisplayColorFormatKey");
    if (v75) {
      uint64_t v76 = *v75;
    }
    else {
      uint64_t v76 = 0;
    }
    _kHDRProcessingDisplayColorFormatKey = v76;
    uint64_t v77 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingDisplayColorFormat_IPT422_12BITS");
    if (v77) {
      uint64_t v78 = *v77;
    }
    else {
      uint64_t v78 = 0;
    }
    _kHDRProcessingDisplayColorFormat_IPT422_12BITS = v78;
    long long v79 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingDisplayColorFormat_YUV422_12BITS_DP");
    if (v79) {
      uint64_t v80 = *v79;
    }
    else {
      uint64_t v80 = 0;
    }
    _kHDRProcessingDisplayColorFormat_YUV422_12BITS_DP = v80;
    double v81 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingDisplayColorFormat_YUV422_12BITS_HDMI");
    if (v81) {
      uint64_t v82 = *v81;
    }
    else {
      uint64_t v82 = 0;
    }
    _kHDRProcessingDisplayColorFormat_YUV422_12BITS_HDMI = v82;
    int32x4_t v83 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingDisplayChromaticityBx");
    if (v83) {
      uint64_t v84 = *v83;
    }
    else {
      uint64_t v84 = 0;
    }
    _kHDRProcessingDisplayChromaticityBx = v84;
    int v85 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingDisplayChromaticityBy");
    if (v85) {
      uint64_t v86 = *v85;
    }
    else {
      uint64_t v86 = 0;
    }
    _kHDRProcessingDisplayChromaticityBy = v86;
    int v87 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingDisplayChromaticityGx");
    if (v87) {
      uint64_t v88 = *v87;
    }
    else {
      uint64_t v88 = 0;
    }
    _kHDRProcessingDisplayChromaticityGx = v88;
    int v89 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingDisplayChromaticityGy");
    if (v89) {
      uint64_t v90 = *v89;
    }
    else {
      uint64_t v90 = 0;
    }
    _kHDRProcessingDisplayChromaticityGy = v90;
    uint64_t v91 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingDisplayChromaticityRx");
    if (v91) {
      uint64_t v92 = *v91;
    }
    else {
      uint64_t v92 = 0;
    }
    _kHDRProcessingDisplayChromaticityRx = v92;
    int32x2_t v93 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingDisplayChromaticityRy");
    if (v93) {
      uint64_t v94 = *v93;
    }
    else {
      uint64_t v94 = 0;
    }
    _kHDRProcessingDisplayChromaticityRy = v94;
    float v95 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingDisplayChromaticityWx");
    if (v95) {
      uint64_t v96 = *v95;
    }
    else {
      uint64_t v96 = 0;
    }
    _kHDRProcessingDisplayChromaticityWx = v96;
    size_t v97 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingDisplayChromaticityWy");
    if (v97) {
      uint64_t v98 = *v97;
    }
    else {
      uint64_t v98 = 0;
    }
    _kHDRProcessingDisplayChromaticityWy = v98;
    int64x2_t v99 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingDisplaySupportsAmbientAdaptationKey");
    if (v99) {
      uint64_t v100 = *v99;
    }
    else {
      uint64_t v100 = 0;
    }
    _kHDRProcessingDisplaySupportsAmbientAdaptationKey = v100;
    double v101 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingOperationEnum");
    if (v101) {
      uint64_t v102 = *v101;
    }
    else {
      uint64_t v102 = 0;
    }
    _kHDRProcessingOperationEnum = v102;
    int v103 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingDisplayPipelineCompensationType");
    if (v103) {
      uint64_t v104 = *v103;
    }
    else {
      uint64_t v104 = 0;
    }
    _kHDRProcessingDisplayPipelineCompensationType = v104;
    double v105 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingDisplayPipelineCompensationTypeNone");
    if (v105) {
      uint64_t v106 = *v105;
    }
    else {
      uint64_t v106 = 0;
    }
    _kHDRProcessingDisplayPipelineCompensationTypeNone = v106;
    int v107 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingDisplayPipelineCompensationTypePurePower");
    if (v107) {
      uint64_t v108 = *v107;
    }
    else {
      uint64_t v108 = 0;
    }
    _kHDRProcessingDisplayPipelineCompensationTypePurePower = v108;
    uint64_t v109 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingDisplayPipelineCompensationTypeHeadroomDependent");
    if (v109) {
      uint64_t v110 = *v109;
    }
    else {
      uint64_t v110 = 0;
    }
    _kHDRProcessingDisplayPipelineCompensationTypeHeadroomDependent = v110;
    int v111 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingOrientationKey");
    if (v111) {
      uint64_t v112 = *v111;
    }
    else {
      uint64_t v112 = 0;
    }
    _kHDRProcessingOrientationKey = v112;
    int8x16_t v113 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingDisplayAveragePixelThresholdKey");
    if (v113) {
      uint64_t v114 = *v113;
    }
    else {
      uint64_t v114 = 0;
    }
    _kHDRProcessingDisplayAveragePixelThresholdKey = v114;
    char v115 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingDisplayAveragePixelWeightR");
    if (v115) {
      uint64_t v116 = *v115;
    }
    else {
      uint64_t v116 = 0;
    }
    _kHDRProcessingDisplayAveragePixelWeightR = v116;
    CFDictionaryRef v117 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingDisplayAveragePixelWeightG");
    if (v117) {
      uint64_t v118 = *v117;
    }
    else {
      uint64_t v118 = 0;
    }
    _kHDRProcessingDisplayAveragePixelWeightG = v118;
    unsigned int v119 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingDisplayAveragePixelWeightB");
    if (v119) {
      uint64_t v120 = *v119;
    }
    else {
      uint64_t v120 = 0;
    }
    _kHDRProcessingDisplayAveragePixelWeightB = v120;
    unint64_t v121 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingDisplaySustainedBrightnessInNitsKey");
    if (v121) {
      uint64_t v122 = *v121;
    }
    else {
      uint64_t v122 = 0;
    }
    _kHDRProcessingDisplaySustainedBrightnessInNitsKey = v122;
    uint64_t v123 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingDestinationKey");
    if (v123) {
      uint64_t v124 = *v123;
    }
    else {
      uint64_t v124 = 0;
    }
    _kHDRProcessingDestinationKey = v124;
    char v125 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingPixelFormatKey");
    if (v125) {
      uint64_t v126 = *v125;
    }
    else {
      uint64_t v126 = 0;
    }
    _kHDRProcessingPixelFormatKey = v126;
    double v127 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingSurfaceAttributesKey");
    if (v127) {
      uint64_t v128 = *v127;
    }
    else {
      uint64_t v128 = 0;
    }
    _kHDRProcessingSurfaceAttributesKey = v128;
    double v129 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingApiInterfaceVersionKey");
    if (v129) {
      uint64_t v130 = *v129;
    }
    else {
      uint64_t v130 = 0;
    }
    _kHDRProcessingApiInterfaceVersionKey = v130;
    int8x16_t v131 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingVersion");
    if (v131) {
      uint64_t v132 = *v131;
    }
    else {
      uint64_t v132 = 0;
    }
    _kHDRProcessingVersion = v132;
    unint64_t v133 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingDolbyVisionHDMIDataKey");
    if (v133) {
      uint64_t v134 = *v133;
    }
    else {
      uint64_t v134 = 0;
    }
    _kHDRProcessingDolbyVisionHDMIDataKey = v134;
    int8x16_t v135 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingEdrRangeTypeNormalized");
    if (v135) {
      uint64_t v136 = *v135;
    }
    else {
      uint64_t v136 = 0;
    }
    _kHDRProcessingEdrRangeTypeNormalized = v136;
    int v137 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingEdrRangeTypeNonNormalized");
    if (v137) {
      uint64_t v138 = *v137;
    }
    else {
      uint64_t v138 = 0;
    }
    _kHDRProcessingEdrRangeTypeNonNormalized = v138;
    int v139 = (uint64_t *)dlsym((void *)hdr_handle, "kHDRProcessingEdrRangeTypeKey");
    if (v139) {
      uint64_t v140 = *v139;
    }
    else {
      uint64_t v140 = 0;
    }
    _kHDRProcessingEdrRangeTypeKey = v140;
    if (_kHDRProcessingVersion) {
      _hdrp_version = CFStringGetIntValue((CFStringRef)_kHDRProcessingVersion);
    }
    int v141 = (void *)MEMORY[0x185324A30]();
    hdr_processor_class = (uint64_t)(id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "bundleWithPath:", @"/System/Library/PrivateFrameworks/HDRProcessing.framework"), "classNamed:", @"HDRProcessor");
    _hdrp_supports_new_init = [(id)hdr_processor_class instancesRespondToSelector:sel_initProcessingEngine_config_];
    _hdrp_supports_pixel_format_query = [(id)hdr_processor_class instancesRespondToSelector:sel_isFormatSupported_inputFormat_outputFormat_device_];
  }
}

CFDictionaryRef CA::SurfaceUtil::create_agx_plane_dict(CA::SurfaceUtil *this, uint64_t a2, unint64_t a3, uint64_t *a4, unint64_t *a5, unint64_t *a6, unint64_t *a7)
{
  keys[15] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t v54 = a2;
  valuePtr = this;
  unint64_t v53 = a3;
  if (a3 == 4)
  {
    unsigned int v13 = 64;
  }
  else
  {
    if (a3 != 8) {
      abort();
    }
    unsigned int v13 = 32;
  }
  if (v13 > this || (LODWORD(v14) = this, LODWORD(v15) = a2, (a2 & 0xFFFFFFC0) == 0))
  {
    unint64_t v16 = (this - 1) | (((unint64_t)this - 1) >> 1);
    unint64_t v17 = v16 | (v16 >> 2) | ((v16 | (v16 >> 2)) >> 4);
    unint64_t v18 = v17 | (v17 >> 8) | ((v17 | (v17 >> 8)) >> 16);
    uint64_t v14 = (v18 | HIDWORD(v18)) + 1;
    unint64_t v19 = (a2 - 1) | (((unint64_t)a2 - 1) >> 1);
    unint64_t v20 = v19 | (v19 >> 2) | ((v19 | (v19 >> 2)) >> 4);
    unint64_t v21 = v20 | (v20 >> 8) | ((v20 | (v20 >> 8)) >> 16);
    uint64_t v15 = (v21 | HIDWORD(v21)) + 1;
  }
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  if ((0x8Bu >> (a3 - 1)))
  {
    uint64_t v23 = qword_1849AC760[a3 - 1];
    uint64_t v22 = 16;
    uint64_t v50 = 16;
    uint64_t v51 = v23;
  }
  uint64_t v24 = v14;
  double v25 = log2(16384.0 / (double)a3) * 0.5;
  long double v26 = exp2(floor(v25));
  unint64_t v52 = ((unint64_t)(v26 * (double)a3) + v24 * a3 - 1)
      / (unint64_t)(v26 * (double)a3)
      * (unint64_t)(v26 * (double)a3);
  long double v27 = exp2(ceil(v25));
  unint64_t v28 = (((unint64_t)v27 + v15 - 1) / (unint64_t)v27 * (unint64_t)v27 * v52 + 127) & 0xFFFFFFFFFFFFFF80;
  char v29 = vcvtps_u32_f32(log2f(ceilf((float)(uint64_t)this / (float)v23)));
  uint64_t v30 = (v28
       + *MEMORY[0x1E4F14B00]
       + ((2 * (1 << v29 << vcvtps_u32_f32(log2f(ceilf((float)a2 / (float)v22)))) + 127) & 0xFFFFFF80)
       - 1) & -*MEMORY[0x1E4F14B00];
  unint64_t v48 = v28;
  uint64_t v49 = v30;
  *a4 = v30;
  *a5 = v23;
  *a6 = v22;
  uint64_t v47 = 3;
  uint64_t v45 = (uint64_t)(((unint64_t)this + v23 - 1) & -v23) / v23;
  uint64_t v46 = 2;
  uint64_t v43 = 2;
  uint64_t v44 = ((a2 + v22 - 1) & -v22) / v22;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v31 = (void *)*MEMORY[0x1E4F2F220];
  keys[0] = *(void **)MEMORY[0x1E4F2F258];
  keys[1] = v31;
  uint64_t v32 = (void *)*MEMORY[0x1E4F2F178];
  keys[2] = *(void **)MEMORY[0x1E4F2F240];
  keys[3] = v32;
  float64x2_t v33 = (void *)*MEMORY[0x1E4F2F170];
  keys[4] = *(void **)MEMORY[0x1E4F2F248];
  keys[5] = v33;
  uint64_t v34 = (void *)*MEMORY[0x1E4F2F1B8];
  keys[6] = *(void **)MEMORY[0x1E4F2F1B0];
  keys[7] = v34;
  int v35 = (void *)*MEMORY[0x1E4F2F1D8];
  keys[8] = *(void **)MEMORY[0x1E4F2EFB0];
  keys[9] = v35;
  uint64_t v36 = (void *)*MEMORY[0x1E4F2F1C0];
  keys[10] = *(void **)MEMORY[0x1E4F2F1C8];
  keys[11] = v36;
  float64x2_t v37 = (void *)*MEMORY[0x1E4F2F228];
  keys[12] = *(void **)MEMORY[0x1E4F2F260];
  keys[13] = v37;
  keys[14] = *(void **)MEMORY[0x1E4F2F168];
  values[0] = CFNumberCreate(0, kCFNumberCFIndexType, &valuePtr);
  values[1] = CFNumberCreate(0, kCFNumberCFIndexType, &v54);
  values[2] = CFNumberCreate(0, kCFNumberCFIndexType, &v42);
  values[3] = CFNumberCreate(0, kCFNumberCFIndexType, &v52);
  values[4] = CFNumberCreate(0, kCFNumberCFIndexType, &v49);
  values[5] = CFNumberCreate(0, kCFNumberCFIndexType, &v53);
  values[6] = CFNumberCreate(0, kCFNumberCFIndexType, &v41);
  values[7] = CFNumberCreate(0, kCFNumberCFIndexType, &v48);
  values[8] = CFNumberCreate(0, kCFNumberCFIndexType, &v47);
  values[9] = CFNumberCreate(0, kCFNumberCFIndexType, &v46);
  values[10] = CFNumberCreate(0, kCFNumberCFIndexType, &v51);
  values[11] = CFNumberCreate(0, kCFNumberCFIndexType, &v50);
  values[12] = CFNumberCreate(0, kCFNumberCFIndexType, &v45);
  values[13] = CFNumberCreate(0, kCFNumberCFIndexType, &v44);
  values[14] = CFNumberCreate(0, kCFNumberCFIndexType, &v43);
  CFDictionaryRef v38 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 15, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  for (uint64_t i = 0; i != 15; ++i)
    CFRelease(values[i]);
  return v38;
}

CFDictionaryRef CA::SurfaceUtil::create_htpc_plane_dict(CA::SurfaceUtil *this, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t *a6)
{
  keys[18] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t v41 = a2;
  valuePtr = this;
  uint64_t v39 = a4;
  uint64_t v40 = a3;
  uint64_t v37 = 1;
  uint64_t v38 = 1;
  uint64_t v35 = 0;
  uint64_t v36 = 1;
  if (a4) {
    uint64_t v7 = 8;
  }
  else {
    uint64_t v7 = 16;
  }
  int v33 = 8;
  int v34 = v7;
  char v8 = 3;
  if (!a4) {
    char v8 = 4;
  }
  char v9 = 6;
  if (!a4) {
    char v9 = 7;
  }
  uint64_t v10 = v7 - 1;
  uint64_t v11 = v7 - 1 + a3 * (void)this;
  uint64_t v12 = -v7;
  unint64_t v31 = (((unint64_t)this + v10) & v12) >> v8;
  uint64_t v32 = v11 & v12;
  uint64_t v29 = 4;
  unint64_t v30 = (unint64_t)(a2 + 7) >> 3;
  uint64_t v27 = a4;
  uint64_t v28 = 4 * v31;
  uint64_t v13 = (4 * v31 * v30 + 127) & 0x7FFFFFFFFFFFFF80;
  uint64_t v26 = v13 + a4;
  *a5 = (v13 + (a3 << v9) * v30 * v31 + 127) & 0xFFFFFFFFFFFFFF80;
  uint64_t v14 = (void *)*MEMORY[0x1E4F2F220];
  keys[0] = *(void **)MEMORY[0x1E4F2F258];
  keys[1] = v14;
  uint64_t v15 = (void *)*MEMORY[0x1E4F2F178];
  keys[2] = *(void **)MEMORY[0x1E4F2F240];
  keys[3] = v15;
  unint64_t v16 = (void *)*MEMORY[0x1E4F2F170];
  keys[4] = *(void **)MEMORY[0x1E4F2F248];
  keys[5] = v16;
  unint64_t v17 = (void *)*MEMORY[0x1E4F2F1D8];
  keys[6] = *(void **)MEMORY[0x1E4F2EFB0];
  keys[7] = v17;
  unint64_t v18 = (void *)*MEMORY[0x1E4F2F1C0];
  keys[8] = *(void **)MEMORY[0x1E4F2F1C8];
  keys[9] = v18;
  unint64_t v19 = (void *)*MEMORY[0x1E4F2F228];
  keys[10] = *(void **)MEMORY[0x1E4F2F260];
  keys[11] = v19;
  unint64_t v20 = (void *)*MEMORY[0x1E4F2F180];
  keys[12] = *(void **)MEMORY[0x1E4F2F168];
  keys[13] = v20;
  unint64_t v21 = (void *)*MEMORY[0x1E4F2F210];
  keys[14] = *(void **)MEMORY[0x1E4F2F208];
  keys[15] = v21;
  uint64_t v22 = (void *)*MEMORY[0x1E4F2F1B0];
  keys[16] = *(void **)MEMORY[0x1E4F2F1B8];
  keys[17] = v22;
  values[0] = CFNumberCreate(0, kCFNumberCFIndexType, &valuePtr);
  values[1] = CFNumberCreate(0, kCFNumberCFIndexType, &v41);
  values[2] = CFNumberCreate(0, kCFNumberCFIndexType, &v39);
  values[3] = CFNumberCreate(0, kCFNumberCFIndexType, &v32);
  values[4] = CFNumberCreate(0, kCFNumberCFIndexType, a5);
  values[5] = CFNumberCreate(0, kCFNumberCFIndexType, &v40);
  values[6] = CFNumberCreate(0, kCFNumberCFIndexType, &v38);
  values[7] = CFNumberCreate(0, kCFNumberCFIndexType, &v37);
  values[8] = CFNumberCreate(0, kCFNumberSInt32Type, &v34);
  values[9] = CFNumberCreate(0, kCFNumberSInt32Type, &v33);
  values[10] = CFNumberCreate(0, kCFNumberCFIndexType, &v31);
  values[11] = CFNumberCreate(0, kCFNumberCFIndexType, &v30);
  values[12] = CFNumberCreate(0, kCFNumberCFIndexType, &v29);
  values[13] = CFNumberCreate(0, kCFNumberCFIndexType, &v28);
  values[14] = CFNumberCreate(0, kCFNumberCFIndexType, &v36);
  values[15] = CFNumberCreate(0, kCFNumberCFIndexType, &v35);
  values[16] = CFNumberCreate(0, kCFNumberCFIndexType, &v27);
  values[17] = CFNumberCreate(0, kCFNumberCFIndexType, &v26);
  CFDictionaryRef v23 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 18, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  for (uint64_t i = 0; i != 18; ++i)
    CFRelease(values[i]);
  return v23;
}

CFDictionaryRef CA::SurfaceUtil::create_plane_dict(CA::SurfaceUtil *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  keys[7] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t v18 = a2;
  valuePtr = this;
  uint64_t v16 = a4;
  uint64_t v17 = a3;
  uint64_t v14 = a6;
  uint64_t v15 = a5;
  uint64_t v13 = a7;
  uint64_t v7 = (void *)*MEMORY[0x1E4F2F220];
  keys[0] = *(void **)MEMORY[0x1E4F2F258];
  keys[1] = v7;
  char v8 = (void *)*MEMORY[0x1E4F2F240];
  keys[2] = *(void **)MEMORY[0x1E4F2F178];
  keys[3] = v8;
  char v9 = (void *)*MEMORY[0x1E4F2F1F0];
  keys[4] = *(void **)MEMORY[0x1E4F2F248];
  keys[5] = v9;
  keys[6] = *(void **)MEMORY[0x1E4F2F170];
  values[0] = CFNumberCreate(0, kCFNumberCFIndexType, &valuePtr);
  values[1] = CFNumberCreate(0, kCFNumberCFIndexType, &v18);
  values[2] = CFNumberCreate(0, kCFNumberCFIndexType, &v17);
  values[3] = CFNumberCreate(0, kCFNumberCFIndexType, &v16);
  values[4] = CFNumberCreate(0, kCFNumberCFIndexType, &v15);
  values[5] = CFNumberCreate(0, kCFNumberCFIndexType, &v14);
  values[6] = CFNumberCreate(0, kCFNumberCFIndexType, &v13);
  CFDictionaryRef v10 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 7, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  for (uint64_t i = 0; i != 7; ++i)
    CFRelease(values[i]);
  return v10;
}

unint64_t CA::SurfaceUtil::rowbytes_for_packed_format(CA::SurfaceUtil *this, int a2)
{
  unint64_t v2 = 3;
  uint64_t v3 = 2;
  if (a2 > 1885746227)
  {
    if ((a2 - 1886676528) <= 4 && ((1 << (a2 - 48)) & 0x15) != 0
      || (a2 - 1886680624) <= 4 && ((1 << (a2 - 48)) & 0x15) != 0)
    {
      char v6 = 3;
      unint64_t v2 = 5;
      uint64_t v3 = 4;
      return (((unint64_t)this + v3) / v2) << v6;
    }
    unsigned __int16 v4 = 13364;
    goto LABEL_10;
  }
  if (a2 > 1882469427)
  {
    if (a2 != 1882469428 && a2 != 1885745712)
    {
      unsigned __int16 v4 = 12850;
LABEL_10:
      int v5 = v4 | 0x70660000;
      goto LABEL_15;
    }
LABEL_17:
    char v6 = 2;
    return (((unint64_t)this + v3) / v2) << v6;
  }
  if (a2 == 1882468912) {
    goto LABEL_17;
  }
  int v5 = 1882468914;
LABEL_15:
  char v6 = 2;
  if (a2 != v5) {
    __assert_rtn("rowbytes_for_packed_format", "CASurfaceUtil.mm", 531, "0");
  }
  return (((unint64_t)this + v3) / v2) << v6;
}

uint64_t ___ZN2CA11SurfaceUtil43CASurfaceAsyncWaitAndSignalSharedEventValueEPNS0_24CASurfaceSharedEventRef_EPNS0_29CASurfaceSharedEventListener_Eyy_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (x_log_hook_p())
  {
    uint64_t v10 = *(void *)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 40);
    x_log_();
    return objc_msgSend(a2, "setSignaledValue:", *(void *)(a1 + 40), a2, v10, v12);
  }
  else
  {
    int v5 = x_log_category_sharedevent;
    if (os_log_type_enabled((os_log_t)x_log_category_sharedevent, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v7 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 134218496;
      uint64_t v14 = a2;
      __int16 v15 = 2048;
      uint64_t v16 = v6;
      __int16 v17 = 2048;
      uint64_t v18 = v7;
      _os_log_impl(&dword_184668000, v5, OS_LOG_TYPE_DEFAULT, "AsyncWaitAndSignal complete event: %p  wait_value: 0x%llx  signal_value: 0x%llx\n", buf, 0x20u);
    }
    return objc_msgSend(a2, "setSignaledValue:", *(void *)(a1 + 40), v8, v9, v11);
  }
}

char *CAIOSurfaceWriteToFileWithSuffix(__IOSurface *a1, const char *a2)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  unsigned __int16 v4 = (void *)MEMORY[0x185324A30]();
  if (CADeviceHasInternalBuild::once[0] != -1) {
    dispatch_once(CADeviceHasInternalBuild::once, &__block_literal_global_153);
  }
  if (!CADeviceHasInternalBuild::internal) {
    goto LABEL_25;
  }
  if (a1)
  {
    size_t Width = IOSurfaceGetWidth(a1);
    size_t Height = IOSurfaceGetHeight(a1);
    signed int PixelFormat = IOSurfaceGetPixelFormat(a1);
    CFDictionaryRef v8 = (const __CFDictionary *)IOSurfaceCopyValue(a1, @"CreationProperties");
    if (v8)
    {
      MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v8);
      if (!MutableCopy)
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          unint64_t v20 = x_log_category_utilities;
          if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_184668000, v20, OS_LOG_TYPE_ERROR, "Failed to dump surface - Unable to create dictionary from surface properties.", buf, 2u);
          }
        }
        uint64_t v19 = 0;
        goto LABEL_67;
      }
      IOSurfaceLock(a1, 1u, 0);
      BaseAddress = (const UInt8 *)IOSurfaceGetBaseAddress(a1);
      if (BaseAddress)
      {
        size_t AllocSize = IOSurfaceGetAllocSize(a1);
        CFDataRef value = CFDataCreate(0, BaseAddress, AllocSize);
        IOSurfaceUnlock(a1, 1u, 0);
        if (value)
        {
          CFDictionarySetValue(MutableCopy, @"IOSurfaceData", value);
          int v45 = 0;
          long long v43 = 0u;
          long long v44 = 0u;
          long long v41 = 0u;
          long long v42 = 0u;
          long long v39 = 0u;
          long long v40 = 0u;
          *(_OWORD *)buf = 0u;
          if (!IOSurfaceGetBulkAttachments())
          {
            id DictionaryFromBulkAttachments = createDictionaryFromBulkAttachments((unsigned int *)buf);
            CFDictionarySetValue(MutableCopy, @"IOSurfaceBulkAttachments", DictionaryFromBulkAttachments);
          }
          CFDataRef Data = CFPropertyListCreateData(0, MutableCopy, kCFPropertyListBinaryFormat_v1_0, 0, 0);
          if (Data)
          {
            *(void *)uint64_t v37 = 0;
            unsigned int add = atomic_fetch_add(CAIOSurfaceWriteToFileWithSuffix::sid, 1u);
            unsigned int v14 = HIBYTE(PixelFormat);
            uint64_t v15 = MEMORY[0x1E4F14390];
            if (PixelFormat < 0) {
              int v16 = __maskrune(v14, 0x40000uLL);
            }
            else {
              int v16 = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v14 + 60) & 0x40000;
            }
            LODWORD(v23) = PixelFormat >> 24;
            if (v16) {
              uint64_t v23 = v23;
            }
            else {
              uint64_t v23 = 32;
            }
            uint64_t v34 = v23;
            if (BYTE2(PixelFormat) <= 0x7Fu) {
              int v24 = *(_DWORD *)(v15 + 4 * BYTE2(PixelFormat) + 60) & 0x40000;
            }
            else {
              int v24 = __maskrune(BYTE2(PixelFormat), 0x40000uLL);
            }
            if (v24) {
              uint64_t v25 = SBYTE2(PixelFormat);
            }
            else {
              uint64_t v25 = 32;
            }
            uint64_t v33 = v25;
            if (BYTE1(PixelFormat) <= 0x7Fu) {
              int v26 = *(_DWORD *)(v15 + 4 * BYTE1(PixelFormat) + 60) & 0x40000;
            }
            else {
              int v26 = __maskrune(BYTE1(PixelFormat), 0x40000uLL);
            }
            if (PixelFormat <= 0x7Fu) {
              int v27 = *(_DWORD *)(v15 + 4 * PixelFormat + 60) & 0x40000;
            }
            else {
              int v27 = __maskrune(PixelFormat, 0x40000uLL);
            }
            if (v26) {
              uint64_t v28 = SBYTE1(PixelFormat);
            }
            else {
              uint64_t v28 = 32;
            }
            if (v27) {
              uint64_t v29 = (char)PixelFormat;
            }
            else {
              uint64_t v29 = 32;
            }
            asprintf((char **)v37, "iosurface-%03d-%zu-%zu-%c%c%c%c-%s-XXXXXX.plist", add, Width, Height, v34, v33, v28, v29, a2);
            uint64_t v19 = CA_CFDataWriteTempFile(Data, *(const char **)v37, 6);
            free(*(void **)v37);
            CFRelease(Data);
          }
          else
          {
            if (!x_log_hook_p())
            {
              uint64_t v32 = x_log_category_utilities;
              CFDataRef v30 = value;
              if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)uint64_t v37 = 0;
                _os_log_impl(&dword_184668000, v32, OS_LOG_TYPE_ERROR, "Failed to dump surface - Unable to create plist.", v37, 2u);
              }
              uint64_t v19 = 0;
              goto LABEL_65;
            }
            x_log_();
            uint64_t v19 = 0;
          }
          CFDataRef v30 = value;
LABEL_65:
          CFRelease(v30);
          goto LABEL_66;
        }
        if (x_log_hook_p()) {
          goto LABEL_32;
        }
        unint64_t v21 = x_log_category_utilities;
        if (!os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR)) {
          goto LABEL_40;
        }
        *(_WORD *)buf = 0;
        uint64_t v22 = "Failed to dump surface - Unable to copy data from surface.";
      }
      else
      {
        if (x_log_hook_p())
        {
LABEL_32:
          x_log_();
LABEL_40:
          uint64_t v19 = 0;
LABEL_66:
          CFRelease(MutableCopy);
LABEL_67:
          CFRelease(v8);
          goto LABEL_68;
        }
        unint64_t v21 = x_log_category_utilities;
        if (!os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR)) {
          goto LABEL_40;
        }
        *(_WORD *)buf = 0;
        uint64_t v22 = "Failed to dump surface - Surface does not have any data.";
      }
      _os_log_impl(&dword_184668000, v21, OS_LOG_TYPE_ERROR, v22, buf, 2u);
      goto LABEL_40;
    }
    if (x_log_hook_p()) {
      goto LABEL_17;
    }
    __int16 v17 = x_log_category_utilities;
    if (!os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR)) {
      goto LABEL_25;
    }
    *(_WORD *)buf = 0;
    uint64_t v18 = "Failed to dump surface - Could not retrieve surface properties.";
LABEL_24:
    _os_log_impl(&dword_184668000, v17, OS_LOG_TYPE_ERROR, v18, buf, 2u);
    goto LABEL_25;
  }
  if (!x_log_hook_p())
  {
    __int16 v17 = x_log_category_utilities;
    if (!os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR)) {
      goto LABEL_25;
    }
    *(_WORD *)buf = 0;
    uint64_t v18 = "Failed to dump surface - No surface to dump!";
    goto LABEL_24;
  }
LABEL_17:
  x_log_();
LABEL_25:
  uint64_t v19 = 0;
LABEL_68:
  return v19;
}

void sub_1847ECDB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,CFTypeRef cf)
{
  CFRelease(cf);
  CFRelease(v23);
  CFRelease(v22);
  _Unwind_Resume(a1);
}

id createDictionaryFromBulkAttachments(unsigned int *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  v19[0] = @"width";
  uint64_t v3 = a1[1];
  uint64_t v21 = [NSNumber numberWithInt:*a1];
  uint64_t v22 = [NSNumber numberWithInt:v3];
  v20[0] = [MEMORY[0x1E4F1C978] arrayWithObjects:&v21 count:2];
  v19[1] = @"height";
  uint64_t v4 = a1[3];
  uint64_t v21 = [NSNumber numberWithInt:a1[2]];
  uint64_t v22 = [NSNumber numberWithInt:v4];
  v20[1] = [MEMORY[0x1E4F1C978] arrayWithObjects:&v21 count:2];
  v19[2] = @"horizontalOffset";
  uint64_t v5 = a1[5];
  uint64_t v21 = [NSNumber numberWithInt:a1[4]];
  uint64_t v22 = [NSNumber numberWithInt:v5];
  v20[2] = [MEMORY[0x1E4F1C978] arrayWithObjects:&v21 count:2];
  v19[3] = @"verticalOffset";
  uint64_t v6 = a1[7];
  uint64_t v21 = [NSNumber numberWithInt:a1[6]];
  uint64_t v22 = [NSNumber numberWithInt:v6];
  v20[3] = [MEMORY[0x1E4F1C978] arrayWithObjects:&v21 count:2];
  objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v20, v19, 4), @"cleanAperture");
  v17[0] = @"horizontalSpacing";
  uint64_t v7 = a1[9];
  uint64_t v21 = [NSNumber numberWithInt:a1[8]];
  uint64_t v22 = [NSNumber numberWithInt:v7];
  v17[1] = @"verticalSpacing";
  v18[0] = [MEMORY[0x1E4F1C978] arrayWithObjects:&v21 count:2];
  uint64_t v8 = a1[11];
  uint64_t v21 = [NSNumber numberWithInt:a1[10]];
  uint64_t v22 = [NSNumber numberWithInt:v8];
  v18[1] = [MEMORY[0x1E4F1C978] arrayWithObjects:&v21 count:2];
  objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v18, v17, 2), @"pixelAspectRatio");
  uint64_t v9 = a1[13];
  uint64_t v21 = [NSNumber numberWithInt:a1[12]];
  uint64_t v22 = [NSNumber numberWithInt:v9];
  objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", &v21, 2), @"gammaLevel");
  objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", *((unsigned __int8 *)a1 + 56)), @"fieldCount");
  objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", *((unsigned __int8 *)a1 + 57)), @"fieldDetail");
  objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", *((unsigned __int8 *)a1 + 58)), @"yCbCrMatrixIndex");
  objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", *((unsigned __int8 *)a1 + 59)), @"colorPrimariesIndex");
  objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", *((unsigned __int8 *)a1 + 60)), @"transferFunctionIndex");
  objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", *((unsigned __int8 *)a1 + 61)), @"chromaLocationTopField");
  objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", *((unsigned __int8 *)a1 + 62)), @"chromaLocationBottomField");
  objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", *((unsigned __int8 *)a1 + 63)), @"chromaSubsampling");
  v15[0] = @"displayPrimariesXG";
  v16[0] = [NSNumber numberWithInt:*((unsigned __int16 *)a1 + 32)];
  v15[1] = @"displayPrimariesYG";
  v16[1] = [NSNumber numberWithInt:*((unsigned __int16 *)a1 + 33)];
  v15[2] = @"displayPrimariesXB";
  v16[2] = [NSNumber numberWithInt:*((unsigned __int16 *)a1 + 34)];
  v15[3] = @"displayPrimariesYB";
  v16[3] = [NSNumber numberWithInt:*((unsigned __int16 *)a1 + 35)];
  v15[4] = @"displayPrimariesXR";
  v16[4] = [NSNumber numberWithInt:*((unsigned __int16 *)a1 + 36)];
  v15[5] = @"displayPrimariesYR";
  v16[5] = [NSNumber numberWithInt:*((unsigned __int16 *)a1 + 37)];
  v15[6] = @"whitePointX";
  v16[6] = [NSNumber numberWithInt:*((unsigned __int16 *)a1 + 38)];
  v15[7] = @"whitePointY";
  v16[7] = [NSNumber numberWithInt:*((unsigned __int16 *)a1 + 39)];
  v15[8] = @"maxDisplayMasteringLuminance";
  v16[8] = [NSNumber numberWithInt:a1[20]];
  v15[9] = @"minDisplayMasteringLuminance";
  v16[9] = [NSNumber numberWithInt:a1[21]];
  objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v16, v15, 10), @"masteringDisplayColorVolume");
  v13[0] = @"maxContentLightLevel";
  uint64_t v10 = [NSNumber numberWithInt:*((unsigned __int16 *)a1 + 44)];
  v13[1] = @"maxFrameAverageLightLevel";
  v14[0] = v10;
  v14[1] = [NSNumber numberWithInt:*((unsigned __int16 *)a1 + 45)];
  objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v14, v13, 2), @"contentLightLevelInfo");
  uint64_t v11 = a1[24];
  uint64_t v21 = [NSNumber numberWithInt:a1[23]];
  uint64_t v22 = [NSNumber numberWithInt:v11];
  objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", &v21, 2), @"edrFactor");
  return v2;
}

char *CAIOSurfaceWriteToFile(__IOSurface *a1)
{
  return CAIOSurfaceWriteToFileWithSuffix(a1, "");
}

uint64_t CA::WindowServer::IOMFBDisplay::scale_cloned_layer_p()
{
  return 1;
}

uint64_t CA::WindowServer::AppleDisplay::max_src_bandwidth_per_pipe(CA::WindowServer::AppleDisplay *this)
{
  return *((unsigned int *)this + 7106);
}

uint64_t CA::WindowServer::AppleDisplay::valid_bandwidth_p(CA::WindowServer::AppleDisplay *this, float a2, float a3)
{
  double v3 = *((double *)this + 3551);
  BOOL v4 = v3 != 0.0;
  if (v3 >= a2) {
    BOOL v4 = 0;
  }
  double v5 = *((double *)this + 3552);
  BOOL v6 = v5 != 0.0;
  if (v5 >= a3) {
    BOOL v6 = 0;
  }
  int v7 = *((_DWORD *)this + 6801);
  if (v7 == 2)
  {
    int v8 = v4 && v6;
    return v8 ^ 1u;
  }
  if (v7 == 1)
  {
    int v8 = v4 || v6;
    return v8 ^ 1u;
  }
  return 1;
}

BOOL CA::WindowServer::AppleDisplay::supports_scale_p(CA::WindowServer::AppleDisplay *this, int a2, int a3, int a4, int a5, int a6)
{
  uint64_t v6 = 248;
  if (a6) {
    uint64_t v6 = 208;
  }
  int v7 = (double *)((char *)this + v6);
  double v8 = (float)((float)a4 / (float)a2);
  double v9 = v7[3531];
  if (v9 > v8) {
    return 0;
  }
  double v10 = v7[3532];
  if (v10 < v8) {
    return 0;
  }
  double v12 = (float)((float)a5 / (float)a3);
  return v10 >= v12 && v9 <= v12;
}

void CA::WindowServer::AppleDisplay::update_display_limits(CA::WindowServer::AppleDisplay *this)
{
  uint64_t v172 = *MEMORY[0x1E4F143B8];
  id v2 = (char *)this + 28224;
  *(int64x2_t *)((char *)this + 28232) = vdupq_n_s64(0x40uLL);
  *(_OWORD *)((char *)this + 28248) = xmmword_184997CE0;
  *(_OWORD *)((char *)this + 28264) = xmmword_184997CF0;
  *((void *)this + 3535) = 1920;
  *((void *)this + 3539) = 1200;
  *((void *)this + 3536) = 0;
  *((void *)this + 3538) = 0;
  *((void *)this + 3537) = 0;
  *((_OWORD *)this + 1770) = 0u;
  *((_OWORD *)this + 1771) = 0u;
  *((_OWORD *)this + 1772) = 0u;
  *((_OWORD *)this + 1773) = 0u;
  *((_OWORD *)this + 1774) = 0u;
  *((void *)this + 3550) = 0;
  *((_OWORD *)this + 1777) = xmmword_184997D00;
  *((void *)this + 3556) = 0;
  *(_OWORD *)((char *)this + 28456) = xmmword_184997D10;
  *(_OWORD *)((char *)this + 28472) = xmmword_184997D00;
  *((void *)this + 3561) = 0;
  *((_OWORD *)this + 1781) = xmmword_184997D20;
  *((_DWORD *)this + 7135) = 0;
  *((void *)this + 3565) = 0;
  *((void *)this + 3564) = 0;
  *((_WORD *)this + 14272) = *((_WORD *)this + 14272) & 0xF5B3 | 0x200;
  *((void *)this + 3566) = 0;
  uint64_t v3 = MGGetSInt64Answer();
  CFStringRef TypeID = (const __CFString *)CFNumberGetTypeID();
  CFNumberRef v5 = (const __CFNumber *)CA::WindowServer::copy_display_property(this, @"color-accuracy-index", TypeID);
  if (v5)
  {
    CFNumberRef v6 = v5;
    unsigned int valuePtr = 0;
    CFNumberGetValue(v5, kCFNumberIntType, &valuePtr);
    CFRelease(v6);
    if (valuePtr <= 4) {
      *((_DWORD *)v2 + 77) = CA::WindowServer::DisplayLimits::update_display_limits(CA::WindowServer::AppleDisplay const&)::index_to_LUT_type[valuePtr];
    }
  }
  CFStringRef v7 = (const __CFString *)CFNumberGetTypeID();
  CFNumberRef v8 = (const __CFNumber *)CA::WindowServer::copy_display_property(this, @"FFR_raw_index", v7);
  if (v8)
  {
    CFNumberRef v9 = v8;
    unsigned int valuePtr = 0;
    CFNumberGetValue(v8, kCFNumberIntType, &valuePtr);
    CFRelease(v9);
    uint64_t v10 = 0;
    unsigned int v11 = *((_DWORD *)v2 + 77);
    double v12 = (char *)&CA::WindowServer::DisplayLimits::update_display_limits(CA::WindowServer::AppleDisplay const&)::thresholds
        + 24 * v11;
    float v13 = (float)valuePtr * 0.000015259;
    while (1)
    {
      float v14 = *(float *)&v12[4 * v10];
      if (v13 < v14) {
        break;
      }
      if (++v10 == 6) {
        goto LABEL_17;
      }
    }
    if (v11 == 1)
    {
      float v15 = (float)(v10 + 1);
    }
    else if (v10)
    {
      if (v10 == 5)
      {
        float v15 = 5.0;
      }
      else
      {
        float v16 = *(float *)&v12[((v10 << 32) - 0x100000000) >> 30];
        float v15 = (float)((float)(v13 - v16) / (float)(v14 - v16)) + (float)(int)v10;
      }
    }
    else
    {
      float v15 = 1.0;
    }
    *((float *)v2 + 76) = v15;
  }
LABEL_17:
  CFStringRef v17 = (const __CFString *)CFNumberGetTypeID();
  CFNumberRef v18 = (const __CFNumber *)CA::WindowServer::copy_display_property(this, @"PanelLayout", v17);
  if (v18)
  {
    CFNumberRef v19 = v18;
    CFNumberGetValue(v18, kCFNumberIntType, (char *)this + 28536);
    CFRelease(v19);
  }
  CA::WindowServer::DisplayLimits::update_display_scaling((CA::WindowServer::DisplayLimits *)v2, this, 0, 1u);
  CFStringRef v20 = (const __CFString *)CFDictionaryGetTypeID();
  CFDictionaryRef v21 = (const __CFDictionary *)CA::WindowServer::copy_display_property(this, @"DisplayPipeStrideRequirements", v20);
  if (v21)
  {
    CFDictionaryRef v22 = v21;
    Value = CFDictionaryGetValue(v21, @"StrideLinearHorizontal");
    if (Value) {
      int v24 = CA_CFIntValue(Value);
    }
    else {
      int v24 = 0;
    }
    uint64_t v25 = CFDictionaryGetValue(v22, @"StrideLinearVertical");
    if (v25) {
      LODWORD(v25) = CA_CFIntValue(v25);
    }
    if (v24) {
      *((void *)this + 3530) = v24;
    }
    if (v25) {
      *((void *)v2 + 3) = (int)v25;
    }
    CFRelease(v22);
  }
  CFStringRef v26 = (const __CFString *)CFDictionaryGetTypeID();
  CFDictionaryRef v27 = (const __CFDictionary *)CA::WindowServer::copy_display_property(this, @"DisplayPipePlaneBaseAlignment", v26);
  if (v27)
  {
    CFDictionaryRef v28 = v27;
    uint64_t v29 = CFDictionaryGetValue(v27, @"PlaneBaseAlignmentLinear");
    if (v29)
    {
      int v30 = CA_CFIntValue(v29);
      if (v30) {
        *((void *)v2 + 1) = v30;
      }
    }
    CFRelease(v28);
  }
  if (CADeviceHasInternalBuild::once[0] != -1) {
    dispatch_once(CADeviceHasInternalBuild::once, &__block_literal_global_153);
  }
  unint64_t v31 = (char *)this + 25560;
  if (CADeviceHasInternalBuild::internal)
  {
    if (CADeviceIsVirtualized::once != -1) {
      dispatch_once(&CADeviceIsVirtualized::once, &__block_literal_global_280);
    }
    BOOL v32 = CADeviceIsVirtualized::is_virtualized == 0;
  }
  else
  {
    BOOL v32 = 0;
  }
  CFStringRef v33 = (const __CFString *)CFDictionaryGetTypeID();
  CFDictionaryRef v34 = (const __CFDictionary *)CA::WindowServer::copy_display_property(this, @"IOMFBMaxSrcPixels", v33);
  p_cache = (void **)(CADisplayLink + 16);
  if (v34)
  {
    CFDictionaryRef v36 = v34;
    uint64_t v37 = CFDictionaryGetValue(v34, @"MaxSrcBufferWidth");
    if (v37) {
      int v38 = CA_CFIntValue(v37);
    }
    else {
      int v38 = 0;
    }
    long long v39 = (void *)((char *)this + 28280);
    long long v40 = CFDictionaryGetValue(v36, @"MaxSrcBufferHeight");
    if (v40 && (int v41 = CA_CFIntValue(v40), v38 >= 1) && v41 >= 1)
    {
      if (v38 >= v41) {
        uint64_t v42 = v41;
      }
      else {
        uint64_t v42 = v38;
      }
      *((void *)this + 3534) = v42;
    }
    else if (v32)
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        long long v43 = x_log_category_windowserver;
        if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_FAULT))
        {
          LOWORD(valuePtr) = 0;
          _os_log_impl(&dword_184668000, v43, OS_LOG_TYPE_FAULT, "kIOMFBSourceSurface(Width/Height)LimitKey missing!", (uint8_t *)&valuePtr, 2u);
        }
      }
    }
    long long v44 = CFDictionaryGetValue(v36, @"MaxSrcRectWidth");
    if (v44)
    {
      int v45 = CA_CFIntValue(v44);
      if (v45 >= 1) {
        *long long v39 = v45;
      }
    }
    CFArrayRef Array = (const __CFArray *)CA_CFDictionaryGetArray(v36, @"MaxSrcRectWidthForPipe");
    if (Array)
    {
      CFArrayRef v47 = Array;
      for (CFIndex i = 0; i != 4; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v47, i);
        v39[i] = (int)CA_CFIntValue(ValueAtIndex);
      }
    }
    uint64_t v50 = (unint64_t *)((char *)this + 28312);
    if (v32 && !*v39)
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        unint64_t v52 = x_log_category_windowserver;
        if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_FAULT))
        {
          LOWORD(valuePtr) = 0;
          _os_log_impl(&dword_184668000, v52, OS_LOG_TYPE_FAULT, "kIOMFBSourceRectangleLimitWidthKey and kIOMFBSourceRectangleLimitWidthPerPipeKey missing!", (uint8_t *)&valuePtr, 2u);
        }
      }
    }
    unint64_t v53 = CFDictionaryGetValue(v36, @"MaxSrcRectTotal");
    if (v53)
    {
      int v54 = CA_CFIntValue(v53);
      if (v54 >= 1) {
        *uint64_t v50 = (unint64_t)v54 / *v39;
      }
    }
    CFArrayRef v55 = (const __CFArray *)CA_CFDictionaryGetArray(v36, @"MaxSrcRectHeightForPipe");
    if (v55)
    {
      CFArrayRef v56 = v55;
      for (CFIndex j = 0; j != 4; ++j)
      {
        uint64_t v58 = CFArrayGetValueAtIndex(v56, j);
        v50[j] = (int)CA_CFIntValue(v58);
      }
    }
    p_cache = CADisplayLink.cache;
    if (v32 && !*v50)
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        int v59 = x_log_category_windowserver;
        if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_FAULT))
        {
          LOWORD(valuePtr) = 0;
          _os_log_impl(&dword_184668000, v59, OS_LOG_TYPE_FAULT, "kIOMFBSourceRectangleLimitTotalKey and kIOMFBSourceRectangleLimitHeightPerPipeKey missing!", (uint8_t *)&valuePtr, 2u);
        }
      }
    }
    uint64_t v60 = CFDictionaryGetValue(v36, @"PixelClock");
    if (v60)
    {
      int v61 = CA_CFIntValue(v60);
      if (v61 >= 1) {
        *((void *)this + 3548) = v61;
      }
    }
    uint64_t v62 = CFDictionaryGetValue(v36, @"VideoClock");
    if (v62)
    {
      int v63 = CA_CFIntValue(v62);
      if (v63 >= 1) {
        *((void *)this + 3549) = v63;
      }
    }
    uint64_t v64 = CFDictionaryGetValue(v36, @"MaxVideoSrcDownscalingWidth");
    if (v64)
    {
      int v65 = CA_CFIntValue(v64);
      if (v65 >= 1) {
        *((void *)this + 3556) = v65;
      }
    }
    if (CADeviceUseCompression::once[0] != -1) {
      dispatch_once(CADeviceUseCompression::once, &__block_literal_global_21);
    }
    if (CADeviceUseCompression::enable_compression && !*((unsigned char *)this + 28154))
    {
      if (CADeviceSupportsUniversalCompression::once != -1) {
        dispatch_once(&CADeviceSupportsUniversalCompression::once, &__block_literal_global_37_12054);
      }
      if (!CADeviceSupportsUniversalCompression::universal)
      {
        long long v161 = CFDictionaryGetValue(v36, @"IOMFBMaxCompressedSizeInBytes");
        if (v161 && (int v162 = CA_CFIntValue(v161)) != 0)
        {
          *((void *)v2 + 5) = v162;
        }
        else if (v32)
        {
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            int v166 = x_log_category_windowserver;
            if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_FAULT))
            {
              LOWORD(valuePtr) = 0;
              _os_log_impl(&dword_184668000, v166, OS_LOG_TYPE_FAULT, "kIOMFBMaxCompressedSizeInBytes missing!", (uint8_t *)&valuePtr, 2u);
            }
          }
        }
      }
    }
    uint64_t v66 = CFDictionaryGetValue(v36, @"IOMFBCompressionSupport");
    if (v66) {
      *((_WORD *)v2 + 160) = *((_WORD *)v2 + 160) & 0xFDFF | ((CA_CFIntValue(v66) != 0) << 9);
    }
    double v67 = CFDictionaryGetValue(v36, @"MaxSrcRotRectTotal");
    if (v67) {
      *((void *)this + 3550) = (int)CA_CFIntValue(v67);
    }
    CFRelease(v36);
  }
  else if (v32)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v51 = x_log_category_windowserver;
      if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_FAULT))
      {
        LOWORD(valuePtr) = 0;
        _os_log_impl(&dword_184668000, v51, OS_LOG_TYPE_FAULT, "kIOMFBSourceLimitsKey missing!", (uint8_t *)&valuePtr, 2u);
      }
    }
  }
  *((_WORD *)v2 + 160) = *((_WORD *)v2 + 160) & 0xFAFF | 0x400;
  CFStringRef v68 = (const __CFString *)CFDictionaryGetTypeID();
  CFDictionaryRef v69 = (const __CFDictionary *)CA::WindowServer::copy_display_property(this, @"IOMFBNumLayers", v68);
  if (v69)
  {
    CFDictionaryRef v70 = v69;
    long long v71 = CFDictionaryGetValue(v69, @"MaxNumLayers");
    if (!v71 || CA_CFIntValue(v71) <= 1) {
      *((_WORD *)v2 + 160) &= ~0x400u;
    }
    uint64_t v72 = CFDictionaryGetValue(v70, @"FullFrameRequired");
    if (v72)
    {
      int v73 = CA_CFIntValue(v72);
      __int16 v74 = *((_WORD *)v2 + 160);
      if (v73)
      {
        __int16 v75 = 256;
LABEL_117:
        *((_WORD *)v2 + 160) = v74 & 0xFEFF | v75;
        CFRelease(v70);
        goto LABEL_118;
      }
    }
    else
    {
      __int16 v74 = *((_WORD *)v2 + 160);
    }
    __int16 v75 = 0;
    goto LABEL_117;
  }
LABEL_118:
  *((void *)this + 3552) = 0;
  *((void *)this + 3551) = 0;
  CFStringRef v76 = (const __CFString *)CFNumberGetTypeID();
  uint64_t v77 = CA::WindowServer::copy_display_property(this, @"maxAverageBpp", v76);
  if (v77)
  {
    uint64_t v78 = v77;
    int v79 = CA_CFIntValue(v77);
    if (v79) {
      *((double *)this + 3551) = (float)((float)((float)v79 * 0.000015259) + 0.0001);
    }
    CFRelease(v78);
  }
  CFStringRef v80 = (const __CFString *)CFNumberGetTypeID();
  double v81 = CA::WindowServer::copy_display_property(this, @"maxPeakBpp", v80);
  if (v81)
  {
    uint64_t v82 = v81;
    int v83 = CA_CFIntValue(v81);
    if (v83) {
      *((double *)this + 3552) = (float)((float)((float)v83 * 0.000015259) + 0.0001);
    }
    CFRelease(v82);
  }
  *((_DWORD *)v2 + 50) = 0;
  CFStringRef v84 = (const __CFString *)CFDictionaryGetTypeID();
  CFDictionaryRef v85 = (const __CFDictionary *)CA::WindowServer::copy_display_property(this, @"MaxDisplayBandwidthLimitKey", v84);
  if (v85)
  {
    CFDictionaryRef v86 = v85;
    int v87 = CFDictionaryGetValue(v85, @"MaxGPBandwidthLimitKey");
    if (v87) {
      LODWORD(v87) = CA_CFIntValue(v87);
    }
    *((_DWORD *)v2 + 50) = v87;
    CFRelease(v86);
  }
  CFStringRef v88 = (const __CFString *)CFBooleanGetTypeID();
  int v89 = CA::WindowServer::copy_display_property(this, @"PCCCabalEnable", v88);
  if (v89)
  {
    uint64_t v90 = v89;
    if (CA_CFBoolValue(v89)) {
      __int16 v91 = 4;
    }
    else {
      __int16 v91 = 0;
    }
    *((_WORD *)v2 + 160) = *((_WORD *)v2 + 160) & 0xFFFB | v91;
    CFRelease(v90);
  }
  if (CADeviceDisplayNeedsW40aWorkaround::once != -1) {
    dispatch_once(&CADeviceDisplayNeedsW40aWorkaround::once, &__block_literal_global_95);
  }
  if (CADeviceDisplayNeedsW40aWorkaround::workaround)
  {
    CFStringRef v92 = (const __CFString *)CFNumberGetTypeID();
    int32x2_t v93 = CA::WindowServer::copy_display_property(this, @"W40a_Blending_OK", v92);
    if (v93)
    {
      uint64_t v94 = v93;
      if (CA_CFBoolValue(v93)) {
        __int16 v95 = 8;
      }
      else {
        __int16 v95 = 0;
      }
      *((_WORD *)v2 + 160) = *((_WORD *)v2 + 160) & 0xFFF7 | v95;
      CFRelease(v94);
    }
  }
  else
  {
    *((_WORD *)v2 + 160) |= 8u;
  }
  CFStringRef v96 = (const __CFString *)CFBooleanGetTypeID();
  size_t v97 = CA::WindowServer::copy_display_property(this, @"IOMFBSupportsICC", v96);
  if (v97)
  {
    uint64_t v98 = v97;
    if (CA_CFBoolValue(v97)) {
      __int16 v99 = 16;
    }
    else {
      __int16 v99 = 0;
    }
    *((_WORD *)v2 + 160) = *((_WORD *)v2 + 160) & 0xFFEF | v99;
    CFRelease(v98);
    __int16 v100 = *((_WORD *)v2 + 160);
  }
  else
  {
    if (CADeviceDisplaySupportsICC::once[0] != -1) {
      dispatch_once(CADeviceDisplaySupportsICC::once, &__block_literal_global_206);
    }
    __int16 v101 = *((_WORD *)v2 + 160);
    if (CADeviceDisplaySupportsICC::supports_icc) {
      __int16 v100 = v101 | 0x10;
    }
    else {
      __int16 v100 = v101 & 0xFFEF;
    }
  }
  *((_WORD *)v2 + 160) = v100 & 0xFFDF;
  Boolean keyExistsAndHasValidFormat = 0;
  int AppBooleanValue = CFPreferencesGetAppBooleanValue(@"enable_hdr10plus", @"com.apple.coreanimation", &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat) {
    *((_WORD *)v2 + 160) = *((_WORD *)v2 + 160) & 0xFFDF | (32 * (AppBooleanValue != 0));
  }
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    int v103 = x_log_category_windowserver;
    if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
    {
      if ((*((_WORD *)v2 + 160) & 0x20) != 0) {
        uint64_t v104 = "YES";
      }
      else {
        uint64_t v104 = "NO";
      }
      unsigned int valuePtr = 136315138;
      *(void *)uint64_t v169 = v104;
      _os_log_impl(&dword_184668000, v103, OS_LOG_TYPE_DEFAULT, "Platform supports HDR10Plus: %s", (uint8_t *)&valuePtr, 0xCu);
    }
  }
  CFStringRef v105 = (const __CFString *)CFDictionaryGetTypeID();
  CFDictionaryRef v106 = (const __CFDictionary *)CA::WindowServer::copy_display_property(this, @"IOMFBDisplayRefresh", v105);
  if (v106)
  {
    CFDictionaryRef v107 = v106;
    uint64_t v108 = CFDictionaryGetValue(v106, @"displayMinRefreshInterval");
    if (v108) {
      LODWORD(v108) = CA_CFIntValue(v108);
    }
    *((void *)this + 3564) = (int)v108;
    uint64_t v109 = CFDictionaryGetValue(v107, @"displayRefreshStepMachTime");
    if (v109) {
      LODWORD(v109) = CA_CFIntValue(v109);
    }
    *((double *)this + 3565) = CATimeWithHostTime((int)v109);
    if (CADeviceSupportsAPT::once[0] != -1) {
      dispatch_once(CADeviceSupportsAPT::once, &__block_literal_global_52);
    }
    if (!CADeviceSupportsAPT::supports_apt) {
      *((void *)this + 3565) = 0;
    }
    CFRelease(v107);
  }
  CFStringRef v110 = (const __CFString *)CFBooleanGetTypeID();
  int v111 = CA::WindowServer::copy_display_property(this, @"IOMFBSupportsRotation", v110);
  if (v111)
  {
    uint64_t v112 = v111;
    if (CA_CFBoolValue(v111)) {
      __int16 v113 = 2048;
    }
    else {
      __int16 v113 = 0;
    }
    *((_WORD *)v2 + 160) = *((_WORD *)v2 + 160) & 0xF7FF | v113;
    CFRelease(v112);
  }
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    uint64_t v114 = x_log_category_windowserver;
    if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
    {
      int v115 = *((_DWORD *)this + 6);
      uint64_t v116 = "YES";
      if ((*((_WORD *)v2 + 160) & 0x800) == 0) {
        uint64_t v116 = "NO";
      }
      unsigned int valuePtr = 67109378;
      *(_DWORD *)uint64_t v169 = v115;
      *(_WORD *)&v169[4] = 2080;
      *(void *)&v169[6] = v116;
      _os_log_impl(&dword_184668000, v114, OS_LOG_TYPE_DEFAULT, "CADisplay %d Rotation Support Enabled: %s", (uint8_t *)&valuePtr, 0x12u);
    }
  }
  *(_DWORD *)id v2 = 2;
  if (CADeviceSupportsCIF10::once[0] != -1) {
    dispatch_once(CADeviceSupportsCIF10::once, &__block_literal_global_14);
  }
  if (CADeviceSupportsCIF10::supports_cif10) {
    *(_DWORD *)v2 |= 4u;
  }
  if (CADeviceHasHardwareAcceleratedHDR::once[0] != -1) {
    dispatch_once(CADeviceHasHardwareAcceleratedHDR::once, &__block_literal_global_132);
  }
  if (CADeviceHasHardwareAcceleratedHDR::has_capability) {
    goto LABEL_194;
  }
  if (CADeviceIsVirtualized::once != -1) {
    dispatch_once(&CADeviceIsVirtualized::once, &__block_literal_global_280);
  }
  if (CADeviceIsVirtualized::is_virtualized) {
LABEL_194:
  }
    *(_DWORD *)v2 |= 8u;
  __int16 v117 = *((_WORD *)v2 + 160);
  if ((*((_WORD *)this + 328) & 0x1C00) == 0)
  {
    if (v3 != 28672)
    {
      uint64_t v122 = 1;
      while (v122 != 8)
      {
        uint64_t v123 = v122;
        uint64_t v124 = CA::WindowServer::no_pq_internal_chip_ids[v122++];
        if (v124 == v3)
        {
          if ((unint64_t)(v123 - 1) < 7) {
            goto LABEL_203;
          }
          goto LABEL_208;
        }
      }
      goto LABEL_208;
    }
LABEL_203:
    __int16 v121 = 0;
    goto LABEL_209;
  }
  if (v3 == 28672) {
    goto LABEL_203;
  }
  uint64_t v118 = 0;
  while (v118 != 4)
  {
    uint64_t v119 = v118 + 1;
    uint64_t v120 = CA::WindowServer::no_pq_external_chip_ids[++v118];
    if (v120 == v3)
    {
      if ((unint64_t)(v119 - 1) <= 3) {
        goto LABEL_203;
      }
      break;
    }
  }
LABEL_208:
  __int16 v121 = 128;
LABEL_209:
  __int16 v125 = v117 & 0xFF7F | v121;
  *((_WORD *)v2 + 160) = v125;
  if (v3 <= 33024)
  {
    if (v3 <= 32799)
    {
      if ((unint64_t)(v3 - 24640) >= 2)
      {
        if (v3 == 32789)
        {
          *((_WORD *)v2 + 160) = v125 | 2;
          uint64_t v126 = 2048;
LABEL_233:
          *((void *)this + 3546) = v126;
          goto LABEL_243;
        }
        goto LABEL_330;
      }
LABEL_227:
      __int16 v130 = (4 * v117) & 0x40 | v117 & 0xFF3F | v121 & 0xFFBF;
LABEL_228:
      *((_WORD *)v2 + 160) = v130;
      goto LABEL_243;
    }
    switch(v3)
    {
      case 32800:
        *(_OWORD *)(v2 + 120) = xmmword_184997D30;
        *((void *)this + 3547) = 2160;
        *(_OWORD *)(v2 + 136) = xmmword_184997D40;
        goto LABEL_243;
      case 32807:
        uint64_t v133 = 5120;
        if (!*((unsigned char *)this + 28138)) {
          uint64_t v133 = 4096;
        }
        *((void *)this + 3543) = v133;
        goto LABEL_242;
      case 32816:
        *(_OWORD *)(v2 + 120) = xmmword_184997D30;
        *((void *)this + 3547) = 2160;
LABEL_242:
        *((void *)this + 3545) = 1;
        goto LABEL_243;
    }
LABEL_330:
    __int16 v130 = v117 & 0xFF7D | v121 & 0xFFFD;
    goto LABEL_228;
  }
  if (v3 > 33057)
  {
    if (v3 == 33058 || v3 == 33074) {
      goto LABEL_227;
    }
    if (v3 != 33088) {
      goto LABEL_330;
    }
    BOOL v127 = *((unsigned char *)this + 28138) == 0;
    uint64_t v128 = 4096;
    uint64_t v129 = 1640;
  }
  else
  {
    switch(v3)
    {
      case 33025:
        BOOL v131 = *((unsigned char *)this + 28138) == 0;
        uint64_t v126 = 4096;
        uint64_t v132 = 2388;
        if (*((unsigned char *)this + 28138)) {
          uint64_t v132 = 4096;
        }
        *((void *)this + 3543) = v132;
        if (v131) {
          uint64_t v126 = 2160;
        }
        goto LABEL_233;
      case 33027:
        BOOL v127 = *((unsigned char *)this + 28138) == 0;
        uint64_t v128 = 6144;
        uint64_t v129 = 5120;
        break;
      case 33040:
        BOOL v127 = *((unsigned char *)this + 28138) == 0;
        uint64_t v128 = 4096;
        uint64_t v129 = 2388;
        break;
      default:
        goto LABEL_330;
    }
  }
  if (v127) {
    uint64_t v128 = v129;
  }
  *((void *)this + 3543) = v128;
LABEL_243:
  uint64_t v134 = MGGetSInt64Answer();
  uint64_t v135 = v134;
  uint64_t v136 = 1;
  *((unsigned char *)this + 28153) = 1;
  if (v134 == 28672)
  {
    *((_DWORD *)this + 6800) = 2;
    *((_WORD *)this + 14078) = 0;
    *((unsigned char *)this + 28158) = 0;
    BOOL v137 = 1;
  }
  else
  {
    *((_DWORD *)this + 6800) = v134 == 32784;
    *((unsigned char *)this + 28156) = 1;
    *((unsigned char *)this + 28157) = (unint64_t)v134 >> 1 != 16392;
    unint64_t v138 = 3;
    while (v136 != 4)
    {
      uint64_t v139 = CADeviceVertexCoordinateSubpixelBits::four_bit_chip_ids[v136++];
      if (v139 == v134)
      {
        unint64_t v138 = v136 - 2;
        break;
      }
    }
    *((unsigned char *)this + 28158) = v138 > 2;
    uint64_t v140 = 1;
    unint64_t v141 = 6;
    while (v140 != 7)
    {
      uint64_t v142 = CA::WindowServer::no_l10r_chip_ids[v140++];
      if (v142 == v134)
      {
        unint64_t v141 = v140 - 2;
        break;
      }
    }
    BOOL v137 = v141 < 6;
  }
  *((unsigned char *)this + 28159) = !v137;
  char v143 = v2[320];
  *((unsigned char *)this + 28180) = (v143 & 4) != 0;
  *((unsigned char *)this + 28155) = (v143 & 8) != 0;
  int v144 = 1;
  if (v134 > 32784)
  {
    if (v134 == 32789) {
      goto LABEL_262;
    }
    if (v134 == 32785)
    {
      *((_DWORD *)this + 6801) = 2;
      goto LABEL_264;
    }
    goto LABEL_261;
  }
  if (v134 != 28672 && v134 != 32784) {
LABEL_261:
  }
    int v144 = 3;
LABEL_262:
  *((_DWORD *)this + 6801) = v144;
  if (v134 == 32784)
  {
    *((void *)this + 3562) = 0x3FE89D89D89D89D9;
    *((void *)this + 3557) = 0x3FE89D89D89D89D9;
  }
LABEL_264:
  if (CADeviceDisplaySupportsEDRFactor::once[0] != -1) {
    dispatch_once(CADeviceDisplaySupportsEDRFactor::once, &__block_literal_global_69);
  }
  *((unsigned char *)this + 28173) = CADeviceDisplaySupportsEDRFactor::supports_edr;
  if (CADeviceHasLCDPanel::once != -1) {
    dispatch_once(&CADeviceHasLCDPanel::once, &__block_literal_global_98);
  }
  *((unsigned char *)this + 28170) = CADeviceHasLCDPanel::has_lcd;
  if (!*((unsigned char *)this + 28138)) {
    goto LABEL_273;
  }
  if (CADeviceHasHardwareAcceleratedHDR::once[0] != -1) {
    dispatch_once(CADeviceHasHardwareAcceleratedHDR::once, &__block_literal_global_132);
  }
  if (CADeviceHasHardwareAcceleratedHDR::has_capability)
  {
    BOOL v145 = 1;
  }
  else
  {
LABEL_273:
    if (CADeviceIsVirtualized::once != -1) {
      dispatch_once(&CADeviceIsVirtualized::once, &__block_literal_global_280);
    }
    BOOL v145 = CADeviceIsVirtualized::is_virtualized != 0;
  }
  *((unsigned char *)this + 28171) = v145;
  if (CADeviceDisplaySupportsICC::once[0] != -1) {
    dispatch_once(CADeviceDisplaySupportsICC::once, &__block_literal_global_206);
  }
  if ((*((_WORD *)this + 328) & 0x1C00) == 0
    && CADeviceDisplaySupportsICC::supports_icc
    && (*((_WORD *)v2 + 160) & 0x10) != 0)
  {
    *((unsigned char *)this + 28207) = 1;
    *((_WORD *)this + 14101) = 257;
    *(_DWORD *)v2 |= 0x10u;
    if (CADeviceSupportsDisplayToneMap::once != -1) {
      dispatch_once(&CADeviceSupportsDisplayToneMap::once, &__block_literal_global_241);
    }
    BOOL v146 = CADeviceSupportsDisplayToneMap::display_tonemap == 1 && (*((_WORD *)this + 328) & 0x1C00) == 0;
    Boolean keyExistsAndHasValidFormat = 0;
    BOOL v147 = CFPreferencesGetAppBooleanValue(@"CAEnableDisplayTonemap", @"com.apple.coreanimation", &keyExistsAndHasValidFormat) != 0;
    if (keyExistsAndHasValidFormat)
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        uint64_t v148 = x_log_category_windowserver;
        if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
        {
          int v149 = *((_DWORD *)this + 6);
          unsigned int valuePtr = 67109120;
          *(_DWORD *)uint64_t v169 = v149;
          _os_log_impl(&dword_184668000, v148, OS_LOG_TYPE_DEFAULT, "CADisplay %d Display Tonemap Support override", (uint8_t *)&valuePtr, 8u);
        }
      }
      BOOL v146 = v147;
    }
    *((unsigned char *)this + 28208) = v146;
  }
  uint64_t v150 = (unsigned int *)((char *)this + 745);
  if (x_log_hook_p())
  {
    (*(uint64_t (**)(CA::WindowServer::AppleDisplay *))(*(void *)this + 1840))(this);
    (*(uint64_t (**)(CA::WindowServer::AppleDisplay *))(*(void *)this + 1848))(this);
    x_log_();
  }
  else
  {
    unsigned int v151 = x_log_category_windowserver;
    if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
    {
      int v152 = *((_DWORD *)this + 6);
      int8x16_t v153 = p_cache;
      if ((*(unsigned int (**)(CA::WindowServer::AppleDisplay *))(*(void *)this + 1840))(this)) {
        int v154 = "YES";
      }
      else {
        int v154 = "NO";
      }
      int v155 = (*(uint64_t (**)(CA::WindowServer::AppleDisplay *))(*(void *)this + 1848))(this);
      unsigned int valuePtr = 67109634;
      CFTypeID v156 = "NO";
      if (v155) {
        CFTypeID v156 = "YES";
      }
      *(_DWORD *)uint64_t v169 = v152;
      *(_WORD *)&v169[4] = 2080;
      *(void *)&v169[6] = v154;
      p_cache = v153;
      unint64_t v31 = (char *)this + 25560;
      __int16 v170 = 2080;
      v171 = v156;
      _os_log_impl(&dword_184668000, v151, OS_LOG_TYPE_DEFAULT, "CADisplay %d ICC Support Enabled: %s; Display Tonemap Support Enabled: %s\n",
        (uint8_t *)&valuePtr,
        0x1Cu);
    }
  }
  unsigned int v157 = *((unsigned __int16 *)v2 + 160);
  *uint64_t v150 = *v150 & 0xFFFFFFBF | (((v157 >> 10) & 1) << 6);
  v31[2612] = (v157 & 0x20) != 0;
  if (CADeviceUseCompression::once[0] != -1) {
    dispatch_once(CADeviceUseCompression::once, &__block_literal_global_21);
  }
  if (*((unsigned char *)p_cache + 3680) && !v31[2594] && (*((_WORD *)this + 328) & 0x1C00) != 0x1000) {
    atomic_fetch_add(CA::WindowServer::IOMFBDisplay::_compressed_display_count, 1u);
  }
  if (!v31[2578] && (*((_WORD *)this + 328) & 0x1C00) != 0x1000)
  {
    if (v135 == 28672)
    {
      if (*((_DWORD *)this + 24) <= *((_DWORD *)this + 22) && *((_DWORD *)this + 25) <= *((_DWORD *)this + 23)) {
        goto LABEL_316;
      }
      BOOL v158 = 1;
    }
    else
    {
      BOOL v158 = CA::WindowServer::IOMFBDisplay::service_int_property((CA::WindowServer::IOMFBDisplay *)*(unsigned int *)v31, @"IdleCachingMethod") != 0;
    }
    v31[2600] = v158;
LABEL_316:
    if (CADeviceSupportsAPT::once[0] != -1) {
      dispatch_once(CADeviceSupportsAPT::once, &__block_literal_global_52);
    }
    if (CADeviceSupportsAPT::supports_apt)
    {
      atomic_fetch_or((atomic_uint *volatile)this + 156, 0x10u);
      if (CAFrameRateArbitrationEnabled(void)::once != -1) {
        dispatch_once(&CAFrameRateArbitrationEnabled(void)::once, &__block_literal_global_18059);
      }
      if (CAFrameRateArbitrationEnabled(void)::enabled) {
        atomic_fetch_or((atomic_uint *volatile)this + 156, 0x100u);
      }
    }
    if (CADeviceUseVBL::once[0] != -1) {
      dispatch_once(CADeviceUseVBL::once, &__block_literal_global_17);
    }
    if (CADeviceUseVBL::use_vbl) {
      atomic_fetch_or((atomic_uint *volatile)this + 156, 0x20u);
    }
    if (!v31[2578])
    {
      long long v159 = getenv("CA_MAIN_DISPLAY_ORIENTATION");
      if (v159)
      {
        int v160 = atoi(v159);
      }
      else
      {
        MGGetFloat32Answer();
        float v164 = v163 * -57.2957795 + 360.0;
        int v160 = llroundf(v164 * 0.011111);
      }
      if ((v160 - 1) >= 3) {
        int v165 = 0;
      }
      else {
        int v165 = v160;
      }
      *((_DWORD *)v2 + 79) = v165;
    }
    *v150 |= 0x200u;
  }
}

const void *CA::WindowServer::copy_display_property(CA::WindowServer *this, CFStringRef key, const __CFString *a3)
{
  if (!*((void *)this + 3196) || (CFNumberRef v6 = (const void *)IOMobileFramebufferCopyProperty()) == 0)
  {
    io_registry_entry_t v7 = *((_DWORD *)this + 6390);
    if (!v7) {
      return 0;
    }
    CFNumberRef v6 = IORegistryEntrySearchCFProperty(v7, "IOService", key, 0, 0);
  }
  if (a3 && v6 && (const __CFString *)CFGetTypeID(v6) != a3)
  {
    CFRelease(v6);
    return 0;
  }
  return v6;
}

void CA::WindowServer::DisplayLimits::update_display_scaling(CA::WindowServer::DisplayLimits *this, const CA::WindowServer::AppleDisplay *a2, unsigned int a3, unsigned int a4)
{
  CFStringRef TypeID = (const __CFString *)CFDictionaryGetTypeID();
  CFDictionaryRef v9 = (const __CFDictionary *)CA::WindowServer::copy_display_property(a2, @"IOMFBScalingLimits", TypeID);
  if (v9)
  {
    CFDictionaryRef v10 = v9;
    Value = CFDictionaryGetValue(v9, @"RGBLayer_MinScaleFraction");
    if (Value) {
      int v12 = CA_CFIntValue(Value);
    }
    else {
      int v12 = 0;
    }
    float v13 = CFDictionaryGetValue(v10, @"RGBLayer_MaxScale");
    if (v13)
    {
      int v14 = CA_CFIntValue(v13);
      if (v12)
      {
        if (v14)
        {
          *((double *)this + 34) = 1.0 / (double)v12;
          *((double *)this + 35) = (double)v14;
        }
      }
    }
    float v15 = CFDictionaryGetValue(v10, @"YUVLayer_MinScaleFraction");
    if (v15) {
      int v16 = CA_CFIntValue(v15);
    }
    else {
      int v16 = 0;
    }
    CFStringRef v17 = CFDictionaryGetValue(v10, @"YUVLayer_MaxScale");
    if (v17)
    {
      int v18 = CA_CFIntValue(v17);
      if (v16)
      {
        if (v18)
        {
          *((double *)this + 29) = 1.0 / (double)v16;
          *((double *)this + 30) = (double)v18;
        }
      }
    }
    CFRelease(v10);
  }
  if (a3 > a4)
  {
    *((void *)this + 34) = 0x3FF0000000000000;
    *((void *)this + 29) = 0x3FF0000000000000;
  }
}

uint64_t CA::WindowServer::IOMFBDisplay::is_update_display_limits_requested(CA::WindowServer::IOMFBDisplay *this)
{
  return 0;
}

uint64_t CA::WindowServer::AppleDisplay::framebuffer_needs_intermediate(CA::WindowServer::AppleDisplay *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (CADeviceUseFramebufferCompression::once != -1) {
    dispatch_once(&CADeviceUseFramebufferCompression::once, &__block_literal_global_30);
  }
  if (a2 == a4 && a3 == a5) {
    return 0;
  }
  uint64_t v11 = 28344;
  if (!CADeviceUseFramebufferCompression::enable_compression) {
    uint64_t v11 = 28368;
  }
  int v12 = *(_DWORD *)((char *)this + v11);
  if (v12 >= (int)a2 || v12 == 0) {
    return (*(unsigned int (**)(CA::WindowServer::AppleDisplay *, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)this + 2264))(this, a2, a3, a4, a5, 0) ^ 1;
  }
  else {
    return 1;
  }
}

void CA::WindowServer::AppleDisplay::update_scaler_limits(CA::WindowServer::AppleDisplay *this)
{
  if (MGGetSInt64Answer() == 32800)
  {
    unsigned int v2 = *((_DWORD *)this + 160) & 0x3FFF;
    CA::WindowServer::DisplayLimits::update_display_scaling((CA::WindowServer::AppleDisplay *)((char *)this + 28224), this, v2, 0x870u);
  }
}

uint64_t CA::WindowServer::IOMFBDisplay::supports_multiple_layers(CA::WindowServer::IOMFBDisplay *this)
{
  return 1;
}

uint64_t CA::WindowServer::IOMFBDisplay::mie_enabled(CA::WindowServer::IOMFBDisplay *this)
{
  return *((unsigned __int8 *)this + 28150);
}

BOOL CA::WindowServer::AppleDisplay::needs_420_transform(CA::WindowServer::AppleDisplay *this, unint64_t a2)
{
  unint64_t v2 = *((void *)this + 3547);
  if (v2) {
    BOOL v3 = v2 >= a2;
  }
  else {
    BOOL v3 = 1;
  }
  return !v3;
}

void CA::WindowServer::Display::set_power_state(os_unfair_lock_s *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFNumberRef v8 = a1 + 179;
  os_unfair_lock_lock(a1 + 179);
  (*(void (**)(os_unfair_lock_s *, uint64_t, uint64_t, uint64_t))(*(void *)&a1->_os_unfair_lock_opaque + 2152))(a1, a2, a3, a4);

  os_unfair_lock_unlock(v8);
}

uint64_t CA::WindowServer::IOMFBDisplay::last_frame_rtplc_capped(CA::WindowServer::IOMFBDisplay *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)this + 27825);
  return v1 & 1;
}

uint64_t CA::WindowServer::IOMFBDisplay::last_frame_rtplc_triggered(CA::WindowServer::IOMFBDisplay *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)this + 27824);
  return v1 & 1;
}

double CA::WindowServer::IOMFBDisplay::last_frame_apce(CA::WindowServer::IOMFBDisplay *this)
{
  return COERCE_DOUBLE(atomic_load((unint64_t *)this + 3477));
}

double CA::WindowServer::IOMFBDisplay::last_gp1_max_bandwidth(CA::WindowServer::IOMFBDisplay *this)
{
  return COERCE_DOUBLE(atomic_load((unint64_t *)this + 3476));
}

double CA::WindowServer::IOMFBDisplay::last_gp1_obs_bandwidth(CA::WindowServer::IOMFBDisplay *this)
{
  return COERCE_DOUBLE(atomic_load((unint64_t *)this + 3475));
}

double CA::WindowServer::IOMFBDisplay::last_gp0_max_bandwidth(CA::WindowServer::IOMFBDisplay *this)
{
  return COERCE_DOUBLE(atomic_load((unint64_t *)this + 3474));
}

double CA::WindowServer::IOMFBDisplay::last_gp0_obs_bandwidth(CA::WindowServer::IOMFBDisplay *this)
{
  return COERCE_DOUBLE(atomic_load((unint64_t *)this + 3473));
}

uint64_t CA::WindowServer::IOMFBDisplay::gamma_adjustment_curves(CA::WindowServer::IOMFBDisplay *this)
{
  return *((void *)this + 3422);
}

uint64_t CA::WindowServer::IOMFBDisplay::blackpoint_curve(CA::WindowServer::IOMFBDisplay *this)
{
  return *((void *)this + 3421);
}

uint64_t CA::WindowServer::IOMFBDisplay::system_gamma_curve(CA::WindowServer::IOMFBDisplay *this)
{
  return *((void *)this + 3420);
}

uint64_t CA::WindowServer::IOMFBDisplay::update_request_callback(CA::WindowServer::IOMFBDisplay *this)
{
  return *((void *)this + 3318);
}

BOOL CA::WindowServer::IOMFBDisplay::has_detached_layer(CA::WindowServer::IOMFBDisplay *this)
{
  return *((void *)this + 3255) != 0;
}

uint64_t CA::WindowServer::IOMFBDisplay::triple_buffered(CA::WindowServer::IOMFBDisplay *this)
{
  return *((unsigned __int8 *)this + 28185);
}

uint64_t CA::WindowServer::Display::set_privacy_indicator_surface()
{
  return 0;
}

uint64_t CA::WindowServer::Display::cursor_enabled(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::cursor_hidden(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::cursor_dictionary(CA::WindowServer::Display *this)
{
  return 0;
}

double CA::WindowServer::Display::cursor_position(CA::WindowServer::Display *this)
{
  return 0.0;
}

double CA::WindowServer::Display::maximum_cursor_size(CA::WindowServer::Display *this)
{
  return 0.0;
}

uint64_t CA::WindowServer::Display::dedicated_cursor_plane(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::hw_supports_cursor(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::supports_cursor(CA::WindowServer::Display *this)
{
  return 0;
}

CA::WindowServer::AccelServer *CA::WindowServer::AppleDisplay::new_server(CA::WindowServer::AppleDisplay *this)
{
  int v2 = *((unsigned __int8 *)this + 28138);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  uint64_t result = (CA::WindowServer::AccelServer *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x410uLL, 0x743898A5uLL);
  if (result)
  {
    if (v2) {
      CFStringRef v5 = @"TVOut";
    }
    else {
      CFStringRef v5 = @"LCD";
    }
    return CA::WindowServer::AccelServer::AccelServer(result, this, v5);
  }
  return result;
}

uint64_t CA::WindowServer::IOMFBDisplay::freeze(uint64_t this)
{
  *(unsigned char *)(this + 28161) = 1;
  return this;
}

uint64_t CA::WindowServer::IOMFBDisplay::allows_remote_control_layers(CA::WindowServer::IOMFBDisplay *this)
{
  return *((unsigned __int8 *)this + 28143);
}

uint64_t CA::WindowServer::IOMFBDisplay::notifies_on_disallowed_cloning_layers(CA::WindowServer::IOMFBDisplay *this)
{
  return *((unsigned __int8 *)this + 28141);
}

uint64_t CA::WindowServer::IOMFBDisplay::ignores_inhibit_cloning(CA::WindowServer::IOMFBDisplay *this)
{
  return *((unsigned __int8 *)this + 28140);
}

float CA::WindowServer::IOMFBDisplay::brightness_scale(CA::WindowServer::IOMFBDisplay *this)
{
  return *((float *)this + 6642);
}

uint64_t CA::WindowServer::Display::allows_wireless_color_filtering(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::IOMFBDisplay::set_accessibility_color_matrix_applied(uint64_t this, char a2)
{
  *(unsigned char *)(this + 26972) = a2;
  return this;
}

uint64_t CA::WindowServer::IOMFBDisplay::supports_color_matrix(CA::WindowServer::IOMFBDisplay *this)
{
  return 1;
}

float CA::WindowServer::IOMFBDisplay::gamma(CA::WindowServer::IOMFBDisplay *this)
{
  return *((float *)this + 6580);
}

uint64_t CA::WindowServer::IOMFBDisplay::set_filtered_ambient_lux(uint64_t this, float a2)
{
  *(float *)(this + 26200) = a2;
  return this;
}

float CA::WindowServer::IOMFBDisplay::filtered_ambient_lux(CA::WindowServer::IOMFBDisplay *this)
{
  return *((float *)this + 6550);
}

uint64_t CA::WindowServer::IOMFBDisplay::preserve_apple_SRGB_gamma_response(CA::WindowServer::IOMFBDisplay *this)
{
  return *((unsigned __int8 *)this + 28213);
}

uint64_t CA::WindowServer::IOMFBDisplay::set_preserve_apple_SRGB_gamma_response(uint64_t this, char a2)
{
  *(unsigned char *)(this + 28213) = a2;
  return this;
}

uint64_t CA::WindowServer::IOMFBDisplay::trinity_cabal_config(CA::WindowServer::IOMFBDisplay *this)
{
  return *((unsigned __int8 *)this + 27392);
}

uint64_t CA::WindowServer::IOMFBDisplay::set_trinity_cabal_config(uint64_t this, char a2)
{
  *(unsigned char *)(this + 27392) = a2;
  return this;
}

double CA::WindowServer::IOMFBDisplay::maximum_reference_luminance(CA::WindowServer::IOMFBDisplay *this)
{
  return *((float *)this + 6569);
}

float CA::WindowServer::IOMFBDisplay::set_maximum_reference_luminance(CA::WindowServer::IOMFBDisplay *this, double a2)
{
  float result = a2;
  *((float *)this + 6569) = result;
  return result;
}

double CA::WindowServer::IOMFBDisplay::minimum_luminance(CA::WindowServer::IOMFBDisplay *this)
{
  return *((float *)this + 6564);
}

float CA::WindowServer::IOMFBDisplay::set_minimum_luminance(CA::WindowServer::IOMFBDisplay *this, double a2)
{
  float result = a2;
  *((float *)this + 6564) = result;
  return result;
}

double CA::WindowServer::IOMFBDisplay::maximum_sdr_luminance(CA::WindowServer::IOMFBDisplay *this)
{
  return *((float *)this + 6568);
}

float CA::WindowServer::IOMFBDisplay::set_maximum_sdr_luminance(CA::WindowServer::IOMFBDisplay *this, double a2)
{
  float result = a2;
  *((float *)this + 6568) = result;
  return result;
}

double CA::WindowServer::IOMFBDisplay::maximum_hdr_luminance(CA::WindowServer::IOMFBDisplay *this)
{
  return *((float *)this + 6565);
}

float CA::WindowServer::IOMFBDisplay::set_maximum_hdr_luminance(CA::WindowServer::IOMFBDisplay *this, double a2)
{
  float result = a2;
  *((float *)this + 6565) = result;
  return result;
}

uint64_t CA::WindowServer::Display::overdrive_lut_type(CA::WindowServer::Display *this)
{
  return 0;
}

double CA::WindowServer::Display::ffr_factor(CA::WindowServer::Display *this)
{
  return 0.0;
}

float CA::WindowServer::IOMFBDisplay::maximum_brightness(CA::WindowServer::IOMFBDisplay *this)
{
  return *((float *)this + 6562);
}

uint64_t CA::WindowServer::IOMFBDisplay::set_temperature(uint64_t this, float a2)
{
  *(float *)(this + 26192) = a2;
  return this;
}

float CA::WindowServer::IOMFBDisplay::temperature(CA::WindowServer::IOMFBDisplay *this)
{
  return *((float *)this + 6548);
}

float CA::WindowServer::IOMFBDisplay::contrast(CA::WindowServer::IOMFBDisplay *this)
{
  return *((float *)this + 6541);
}

uint64_t CA::WindowServer::IOMFBDisplay::grayscale(CA::WindowServer::IOMFBDisplay *this)
{
  return *((unsigned __int8 *)this + 28147);
}

uint64_t CA::WindowServer::IOMFBDisplay::inverse_color(CA::WindowServer::IOMFBDisplay *this)
{
  return *((unsigned __int8 *)this + 28139);
}

uint64_t CA::WindowServer::AppleDisplay::unconvert_logical_orientation(uint64_t a1, int a2)
{
  int v2 = *(_DWORD *)(a1 + 28540);
  unsigned int v3 = ((_BYTE)a2 + 2) & 3;
  int v4 = ((_BYTE)a2 + 1) & 3;
  if (v2 != 1) {
    int v4 = a2;
  }
  if (v2 != 2) {
    unsigned int v3 = v4;
  }
  if (v2 == 3) {
    return ((_BYTE)a2 - 1) & 3;
  }
  else {
    return v3;
  }
}

uint64_t CA::WindowServer::AppleDisplay::convert_logical_orientation(uint64_t a1, int a2)
{
  int v2 = *(_DWORD *)(a1 + 28540);
  unsigned int v3 = ((_BYTE)a2 + 2) & 3;
  int v4 = ((_BYTE)a2 - 1) & 3;
  if (v2 != 1) {
    int v4 = a2;
  }
  if (v2 != 2) {
    unsigned int v3 = v4;
  }
  if (v2 == 3) {
    return ((_BYTE)a2 + 1) & 3;
  }
  else {
    return v3;
  }
}

uint64_t CA::WindowServer::Display::tracks_velocity(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::hardware_minimum_frame_duration(CA::WindowServer::Display *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 768))();
}

uint64_t CA::WindowServer::IOMFBDisplay::virtual_display_mode(CA::WindowServer::IOMFBDisplay *this)
{
  return *((void *)this + 3391);
}

void CA::WindowServer::IOMFBDisplay::disable_clone(CA::WindowServer::IOMFBDisplay *this)
{
  *((unsigned char *)this + 28132) = 0;
  *((unsigned char *)this + 28135) = 0;
  CA::WindowServer::IOMFBDisplay::set_enabled_(this, 0);
}

BOOL CA::WindowServer::IOMFBDisplay::is_detaching(CA::WindowServer::IOMFBDisplay *this)
{
  uint64_t v1 = *((void *)this + 3255);
  return v1 && (*(unsigned char *)(v1 + 292) & 1) == 0;
}

uint64_t CA::WindowServer::Display::supports_detach_flags_p(CA::WindowServer::Display *this)
{
  return 1;
}

uint64_t CA::WindowServer::Display::set_background_color(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::finish_skylight_update(CA::WindowServer::Display *this, CA::Render::Update *a2, uint64_t a3)
{
  return (*(uint64_t (**)(CA::WindowServer::Display *, CA::Render::Update *, uint64_t, void))(*(void *)this + 416))(this, a2, a3, 0);
}

uint64_t CA::WindowServer::Display::begin_skylight_update(CA::WindowServer::Display *this, CA::Render::Update *a2)
{
  return (*(uint64_t (**)(CA::WindowServer::Display *, CA::Render::Update *))(*(void *)this + 408))(this, a2);
}

uint64_t CA::WindowServer::IOMFBDisplay::flipbook_suppressed(CA::WindowServer::IOMFBDisplay *this)
{
  return *((unsigned __int8 *)this + 28183);
}

uint64_t CA::WindowServer::IOMFBDisplay::flipbook_enabled(CA::WindowServer::IOMFBDisplay *this)
{
  return *((unsigned __int8 *)this + 28182);
}

uint64_t CA::WindowServer::IOMFBDisplay::set_blanking_removes_power(uint64_t this, char a2)
{
  *(unsigned char *)(this + 28181) = a2;
  return this;
}

uint64_t CA::WindowServer::IOMFBDisplay::blanking_removes_power(CA::WindowServer::IOMFBDisplay *this)
{
  return *((unsigned __int8 *)this + 28181);
}

uint64_t CA::WindowServer::IOMFBDisplay::framebuffer(CA::WindowServer::IOMFBDisplay *this)
{
  return *((void *)this + 3196);
}

__n128 CA::WindowServer::AppleDisplay::iosurface_alignment@<Q0>(CA::WindowServer::AppleDisplay *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = *((void *)this + 3533);
  __n128 result = *(__n128 *)((char *)this + 28232);
  long long v3 = *(_OWORD *)((char *)this + 28248);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t CA::WindowServer::AppleDisplay::iosurface_accelerator_supports_color_remap(CA::WindowServer::AppleDisplay *this)
{
  return dword_1E8F852AC;
}

BOOL CA::WindowServer::AppleDisplay::iosurface_accelerator_supports_scale_p(CA::WindowServer::AppleDisplay *this, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, int a6, int a7)
{
  if (a7) {
    unint64_t v10 = a5;
  }
  else {
    unint64_t v10 = a4;
  }
  if (a7) {
    unint64_t v11 = a4;
  }
  else {
    unint64_t v11 = a5;
  }
  CA::ScalerUtil::ScalerLimits::limits(this);
  int v12 = (float *)&dword_1E8F85280;
  if (!a6) {
    int v12 = (float *)&xmmword_1E8F85270;
  }
  float v13 = *v12;
  int v14 = (float *)algn_1E8F85284;
  if (!a6) {
    int v14 = (float *)&xmmword_1E8F85270 + 1;
  }
  float v15 = (float *)&xmmword_1E8F85270 + 3;
  if (a6) {
    float v15 = (float *)&dword_1E8F8528C;
  }
  float v16 = (float)v10 / (float)a2;
  if (v16 < v13) {
    return 0;
  }
  uint64_t v17 = 10;
  if (a6) {
    uint64_t v17 = 14;
  }
  if (v16 > *(float *)&CA::ScalerUtil::ScalerLimits::limits(void)::limits[v17]) {
    return 0;
  }
  float v19 = (float)v11 / (float)a3;
  return v19 <= *v15 && v19 >= *v14;
}

BOOL CA::WindowServer::AppleDisplay::iosurface_accelerator_supports_size_p(CA::WindowServer::AppleDisplay *this, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  return dword_1E8F85258 >= a2 && dword_1E8F8525C >= a3 && dword_1E8F85268 >= a4 && dword_1E8F8526C >= a5;
}

uint64_t CA::WindowServer::Display::override_bounds_shape(CA::WindowServer::Display *this)
{
  return *((void *)this + 27);
}

uint64_t CA::WindowServer::Display::override_bounds(CA::WindowServer::Display *this)
{
  return (uint64_t)this + 200;
}

uint64_t CA::WindowServer::Display::uses_override_bounds(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::IOMFBDisplay::is_game_mode(CA::WindowServer::IOMFBDisplay *this)
{
  return *((unsigned __int8 *)this + 28220);
}

uint64_t CA::WindowServer::AppleDisplay::min_src_rect_size(CA::WindowServer::AppleDisplay *this)
{
  return *((void *)this + 3559);
}

uint64_t CA::WindowServer::IOMFBDisplay::reset_max_layer_bandwidth(uint64_t this)
{
  *(_DWORD *)(this + 25544) = 0;
  return this;
}

void CA::WindowServer::AppleDisplay::~AppleDisplay(CA::WindowServer::AppleDisplay *this)
{
  CA::WindowServer::IOMFBDisplay::~IOMFBDisplay(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

uint64_t CA::WindowServer::AppleExternalDisplay::detachable_layer_impl(_DWORD *a1, int *a2, double *a3, uint64_t a4, float64x2_t *a5, float64x2_t *a6, int *a7)
{
  if ((*(uint64_t (**)(_DWORD *))(*(void *)a1 + 1544))(a1))
  {
    if ((a1[156] & 4) != 0) {
      return 24;
    }
    int v14 = (__IOSurface *)(*(uint64_t (**)(uint64_t))(*(void *)a4 + 160))(a4);
    if (!v14) {
      return 0;
    }
    float v15 = v14;
    signed int PixelFormat = IOSurfaceGetPixelFormat(v14);
    int v17 = 0;
    uint64_t result = 25;
    if (PixelFormat <= 1885745711)
    {
      if (PixelFormat <= 1111970368)
      {
        if (PixelFormat > 875704933)
        {
          BOOL v19 = PixelFormat == 875704934;
          unsigned __int16 v21 = 12918;
        }
        else
        {
          BOOL v19 = PixelFormat == 875704422;
          unsigned __int16 v21 = 12406;
        }
        int v20 = v21 | 0x34320000;
        goto LABEL_34;
      }
      if (PixelFormat > 1882468911)
      {
        BOOL v19 = PixelFormat == 1882468912;
        int v20 = 1882468914;
        goto LABEL_34;
      }
      BOOL v22 = PixelFormat == 1111970369;
      int v23 = 1647534392;
    }
    else
    {
      if (PixelFormat > 1999908960)
      {
        if (PixelFormat <= 2016686641)
        {
          if (PixelFormat == 1999908961)
          {
LABEL_40:
            *a7 = v17;
            int v26 = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 40))(a4);
            BOOL v27 = PixelFormat == 1919365992 || v26 == 16;
            if (!v27
              && (*a7 == 2
               && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 24))(a4) != 1
               && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 24))(a4) != 6
               || (*(unsigned int (**)(uint64_t))(*(void *)a4 + 56))(a4) != 1
               && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 56))(a4) != 2
               && !BYTE13(xmmword_1EB2ACC30)))
            {
              return 13;
            }
            if (a6
              && (a6[1].f64[0] + a6->f64[0] > (double)(a1[160] & 0x3FFF)
               || a6[1].f64[1] + a6->f64[1] > (double)((a1[160] >> 14) & 0x3FFF)))
            {
              return 26;
            }
            if (a5)
            {
              float64_t v28 = a5[1].f64[0] + a5->f64[0];
              if (v28 > (double)IOSurfaceGetWidth(v15)) {
                return 27;
              }
              float64_t v29 = a5[1].f64[1] + a5->f64[1];
              if (v29 > (double)IOSurfaceGetHeight(v15)) {
                return 27;
              }
            }
            return 0;
          }
          if (PixelFormat != 2016686640) {
            return result;
          }
LABEL_39:
          int v17 = 2;
          goto LABEL_40;
        }
        BOOL v19 = PixelFormat == 2016686642 || PixelFormat == 2019963442;
        int v20 = 2019963440;
LABEL_34:
        if (!v19 && PixelFormat != v20) {
          return result;
        }
        goto LABEL_39;
      }
      if (PixelFormat <= 1919365991)
      {
        BOOL v19 = PixelFormat == 1885745712;
        int v20 = 1885745714;
        goto LABEL_34;
      }
      BOOL v22 = PixelFormat == 1919365992;
      int v23 = 1999843442;
    }
    if (v22 || PixelFormat == v23) {
      goto LABEL_40;
    }
  }
  else
  {
    return CA::WindowServer::AppleDisplay::detachable_layer_impl((uint64_t)a1, a2, a3, a4, a5, a6, a7);
  }
  return result;
}

const void *CA::WindowServer::AppleExternalDisplay::is_update_display_limits_requested(CA::WindowServer::AppleExternalDisplay *this)
{
  CFStringRef TypeID = (const __CFString *)CFBooleanGetTypeID();
  uint64_t result = CA::WindowServer::copy_display_property(this, @"IOMFBHotplugKeysChangedKey", TypeID);
  if (result)
  {
    int v4 = result;
    BOOL v5 = CA_CFBoolValue(result);
    CFRelease(v4);
    return (const void *)v5;
  }
  return result;
}

void CA::WindowServer::AppleExternalDisplay::~AppleExternalDisplay(CA::WindowServer::AppleExternalDisplay *this)
{
  CA::WindowServer::IOMFBDisplay::~IOMFBDisplay(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

BOOL CA::WindowServer::AppleWirelessDisplay::scale_cloned_layer_p(uint64_t a1, int a2, double *a3)
{
  uint64_t v3 = a1 + 28432;
  if (a2 != 2) {
    uint64_t v3 = a1 + 28472;
  }
  double v4 = *a3;
  if (*a3 < 1.0) {
    return 1;
  }
  double v5 = a3[1];
  if (v5 < 1.0) {
    return 1;
  }
  double v6 = *(double *)(v3 + 24);
  if (v4 < v6 || v5 < v6) {
    return 1;
  }
  double v8 = *(double *)(v3 + 32);
  return v4 > v8 || v5 > v8;
}

uint64_t CA::WindowServer::AppleWirelessDisplay::detachable_layer_impl(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _DWORD *a7)
{
  *a7 = 2;
  if ((*(unsigned int (**)(uint64_t, void))(*(void *)a1 + 568))(a1, *a2)) {
    return 0;
  }
  else {
    return 2;
  }
}

uint64_t CA::WindowServer::AppleWirelessDisplay::supports_multiple_layers(CA::WindowServer::AppleWirelessDisplay *this)
{
  return 0;
}

CA::WindowServer::AccelServer *CA::WindowServer::AppleWirelessDisplay::new_server(CA::WindowServer::AppleWirelessDisplay *this)
{
  MutableCopy = CFStringCreateMutableCopy(0, 0, @"Wireless");
  CFStringRef v3 = MutableCopy;
  if (CA::WindowServer::AppleWirelessDisplay::new_server(void)::count)
  {
    CFStringAppendFormat(MutableCopy, 0, @"-%zu", CA::WindowServer::AppleWirelessDisplay::new_server(void)::count);
    uint64_t v4 = CA::WindowServer::AppleWirelessDisplay::new_server(void)::count + 1;
  }
  else
  {
    uint64_t v4 = 1;
  }
  CA::WindowServer::AppleWirelessDisplay::new_server(void)::count = v4;
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  double v6 = (CA::WindowServer::AccelServer *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x410uLL, 0x743898A5uLL);
  io_registry_entry_t v7 = v6;
  if (v6) {
    CA::WindowServer::AccelServer::AccelServer(v6, this, v3);
  }
  CFRelease(v3);
  return v7;
}

uint64_t CA::WindowServer::AppleWirelessDisplay::set_allows_wireless_color_filtering(uint64_t this, char a2)
{
  *(unsigned char *)(this + 28552) = a2;
  return this;
}

uint64_t CA::WindowServer::AppleWirelessDisplay::allows_wireless_color_filtering(CA::WindowServer::AppleWirelessDisplay *this)
{
  return *((unsigned __int8 *)this + 28552);
}

uint64_t CA::WindowServer::AppleWirelessDisplay::supports_detach_flags_p(CA::WindowServer::AppleWirelessDisplay *this, unsigned int a2)
{
  return (a2 >> 8) & 1;
}

uint64_t CA::WindowServer::AppleWirelessDisplay::needs_display_roi_shape_tracking(CA::WindowServer::AppleWirelessDisplay *this)
{
  return 1;
}

uint64_t CA::WindowServer::AppleWirelessDisplay::supports_hlg(CA::WindowServer::AppleWirelessDisplay *this)
{
  return 0;
}

BOOL CA::WindowServer::AppleWirelessDisplay::supports_pq(CA::WindowServer::AppleWirelessDisplay *this)
{
  return ((*((void *)this + 80) >> 55) & 0x1E) - 16 < 0xA;
}

void CA::WindowServer::AppleWirelessDisplay::~AppleWirelessDisplay(CA::WindowServer::AppleWirelessDisplay *this)
{
  CA::WindowServer::IOMFBDisplay::~IOMFBDisplay(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

uint64_t CA::WindowServer::AppleInternalDisplay::overdrive_lut_type(CA::WindowServer::AppleInternalDisplay *this)
{
  return *((unsigned int *)this + 7133);
}

float CA::WindowServer::AppleInternalDisplay::ffr_factor(CA::WindowServer::AppleInternalDisplay *this)
{
  return *((float *)this + 7132);
}

void CA::WindowServer::AppleInternalDisplay::~AppleInternalDisplay(CA::WindowServer::AppleInternalDisplay *this)
{
  CA::WindowServer::IOMFBDisplay::~IOMFBDisplay(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

void *CA::WindowServer::AppleInternalDisplay::open(CA::WindowServer::AppleInternalDisplay *this)
{
  if (CA::WindowServer::display_count_of_type(0) < (unint64_t)this) {
    __assert_rtn("open", "windowserver-apple-display.cpp", 2661, "index <= count ()");
  }

  return CA::WindowServer::create_display_of_type(0, (uint64_t)this, (uint64_t)&__block_literal_global);
}

uint64_t CA::WindowServer::display_count_of_type(int a1)
{
  CFArrayRef DisplayList = (const __CFArray *)IOMobileFramebufferCreateDisplayList();
  if (!DisplayList) {
    return 0;
  }
  CFArrayRef v3 = DisplayList;
  CFIndex Count = CFArrayGetCount(DisplayList);
  if (Count)
  {
    CFIndex v5 = Count;
    uint64_t v6 = 0;
    for (CFIndex i = 0; i != v5; ++i)
    {
      if (*((_DWORD *)CFArrayGetValueAtIndex(v3, i) + 2) == a1) {
        ++v6;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  CFRelease(v3);
  return v6;
}

void *CA::WindowServer::create_display_of_type(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  CFArrayRef DisplayList = (const __CFArray *)IOMobileFramebufferCreateDisplayList();
  if (!DisplayList) {
    return 0;
  }
  CFArrayRef v6 = DisplayList;
  CFIndex Count = CFArrayGetCount(DisplayList);
  if (Count)
  {
    CFIndex v8 = Count;
    CFIndex v9 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v6, v9);
      unint64_t v11 = ValueAtIndex;
      int v12 = ValueAtIndex[2];
      if ((v12 - 1) > 1) {
        goto LABEL_15;
      }
      memset(v23, 0, sizeof(v23));
      CCFStringRef String = CA_CFStringGetCString(*(const __CFString **)ValueAtIndex, (char *)v23, 256);
      size_t v14 = strlen(CString);
      int v15 = v11[2];
      float v16 = "wireless";
      if (v15 != 2) {
        float v16 = 0;
      }
      int v17 = v15 == 1 ? "external" : v16;
      size_t v18 = strlen(v17);
      if (v14 >= v18 && !strncmp(v17, CString, v18) && (!v14 || CString[v14 - 1] - 48 == a2)) {
        break;
      }
LABEL_20:
      if (v8 == ++v9) {
        goto LABEL_21;
      }
    }
    int v12 = v11[2];
LABEL_15:
    if (v12 == a1)
    {
      if (*(void *)v11)
      {
        BOOL v19 = (void *)(*(uint64_t (**)(uint64_t))(a3 + 16))(a3);
        if (v19)
        {
          int v20 = v19;
          if (v19[3196]) {
            goto LABEL_22;
          }
          (*(void (**)(void *))(*v19 + 8))(v19);
        }
      }
    }
    goto LABEL_20;
  }
LABEL_21:
  int v20 = 0;
LABEL_22:
  CFRelease(v6);
  return v20;
}

void *___ZN2CA12WindowServer20AppleInternalDisplay4openEm_block_invoke()
{
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  uint64_t v1 = malloc_type_zone_calloc(malloc_zone, 1uLL, 0x6F90uLL, 0x743898A5uLL);
  int v2 = v1;
  if (v1)
  {
    CFArrayRef v3 = CA::WindowServer::IOMFBDisplay::IOMFBDisplay((uint64_t)v1);
    *int v2 = &unk_1ED022A08;
    CA::WindowServer::AppleDisplay::update_display_limits(v3);
    *int v2 = &unk_1ED0253B0;
    v2[3569] = 0;
  }
  return v2;
}

uint64_t CA::WindowServer::AppleInternalDisplay::count(CA::WindowServer::AppleInternalDisplay *this)
{
  return CA::WindowServer::display_count_of_type(0);
}

void *CA::WindowServer::AppleExternalDisplay::open(CA::WindowServer::AppleExternalDisplay *this)
{
  if (CA::WindowServer::display_count_of_type(1) < (unint64_t)this) {
    __assert_rtn("open", "windowserver-apple-display.cpp", 2839, "index <= count ()");
  }

  return CA::WindowServer::create_display_of_type(1, (uint64_t)this, (uint64_t)&__block_literal_global_160);
}

void *___ZN2CA12WindowServer20AppleExternalDisplay4openEm_block_invoke()
{
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  uint64_t result = malloc_type_zone_calloc(malloc_zone, 1uLL, 0x6F88uLL, 0x743898A5uLL);
  if (result) {
    return CA::WindowServer::AppleExternalDisplay::AppleExternalDisplay(result);
  }
  return result;
}

void *CA::WindowServer::AppleExternalDisplay::AppleExternalDisplay(void *a1)
{
  int v2 = CA::WindowServer::IOMFBDisplay::IOMFBDisplay((uint64_t)a1);
  *(void *)int v2 = &unk_1ED022A08;
  CA::WindowServer::AppleDisplay::update_display_limits(v2);
  *a1 = &unk_1ED024A70;
  CA::WindowServer::IOMFBDisplay::set_signal_type((uint64_t)a1, 2);
  return a1;
}

uint64_t CA::WindowServer::AppleExternalDisplay::count(CA::WindowServer::AppleExternalDisplay *this)
{
  return CA::WindowServer::display_count_of_type(1);
}

void *CA::WindowServer::AppleWirelessDisplay::open(CA::WindowServer::AppleWirelessDisplay *this)
{
  if (CA::WindowServer::display_count_of_type(2) < (unint64_t)this) {
    __assert_rtn("open", "windowserver-apple-display.cpp", 2974, "index <= count ()");
  }
  if (CA::WindowServer::AppleWirelessDisplay::open(unsigned long)::once != -1) {
    dispatch_once(&CA::WindowServer::AppleWirelessDisplay::open(unsigned long)::once, &__block_literal_global_164);
  }

  return CA::WindowServer::create_display_of_type(2, (uint64_t)this, (uint64_t)&__block_literal_global_169);
}

void *___ZN2CA12WindowServer20AppleWirelessDisplay4openEm_block_invoke_2()
{
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  uint64_t v1 = malloc_type_zone_calloc(malloc_zone, 1uLL, 0x6F90uLL, 0x743898A5uLL);
  int v2 = v1;
  if (v1)
  {
    CFArrayRef v3 = (_DWORD *)((char *)v1 + 745);
    uint64_t v4 = CA::WindowServer::AppleExternalDisplay::AppleExternalDisplay(v1);
    *int v2 = &unk_1ED025CE8;
    *((unsigned char *)v2 + 28552) = 0;
    *v3 |= 0x40u;
    CA::WindowServer::IOMFBDisplay::set_signal_type((uint64_t)v4, 2);
  }
  return v2;
}

void *___ZN2CA12WindowServer20AppleWirelessDisplay4openEm_block_invoke()
{
  uint64_t result = dlopen("/System/Library/PrivateFrameworks/Celestial.framework/Celestial", 1);
  if (result)
  {
    uint64_t result = dlsym(result, "FigInstallVirtualDisplay");
    if (result)
    {
      return (void *)((uint64_t (*)(void))result)();
    }
  }
  return result;
}

uint64_t CA::WindowServer::AppleWirelessDisplay::count(CA::WindowServer::AppleWirelessDisplay *this)
{
  return CA::WindowServer::display_count_of_type(2);
}

uint64_t CAML::ObjCType::set_property(CAML::ObjCType *this, CAML::Context *a2, void *a3, unsigned int a4, const void *a5)
{
  CFStringRef String = CAAtomGetString(a4);

  return [a3 setValue:a5 forKey:String];
}

uint64_t CAML::Type::property_type(CAML::Type *this, CAML::Context *a2, const void *a3)
{
  return 0;
}

void CAML::ObjCScript::end(CAML::ObjCScript *this, CAML::Context *a2, CAML::State *a3, char *a4, uint64_t a5)
{
  CFIndex v8 = (void *)[[NSString alloc] initWithBytes:a4 length:a5 encoding:4];
  if ((*((unsigned char *)a2 + 112) & 0x20) != 0)
  {
    uint64_t v10 = *(unsigned int *)(*(void *)(*((void *)a2 + 1) + 56) + 52);
    uint64_t v11 = *((void *)a2 + 3);
    int v12 = (void *)MEMORY[0x185324A30]();
    CFIndex v9 = (const void *)[*((id *)a2 + 12) CAMLParser:*((void *)a2 + 10) evaluateScriptValue:v8 sourceURL:v11 lineNumber:v10];
  }
  else
  {
    CAML::Context::error(a2, "Delegate does not support script values.");
    CFIndex v9 = 0;
  }

  CAML::State::set_value(a3, v9);
  if (v9)
  {
    CFRelease(v9);
  }
  else
  {
  }
}

void sub_1847F0724(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CAML::ObjCScript::~ObjCScript(CAML::ObjCScript *this)
{
  *(void *)this = &unk_1ED030AC8;
  int v2 = (const void *)*((void *)this + 2);
  if (v2) {
    CFRelease(v2);
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  const void *v1;

  *(void *)this = &unk_1ED030AC8;
  uint64_t v1 = (const void *)*((void *)this + 2);
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t CAML::ObjCNull::end(CAML::ObjCNull *this, CAML::Context *a2, CAML::State *a3, CAML::Context *a4, uint64_t a5)
{
  CAML::State::set_value(a3, (CFTypeRef)*MEMORY[0x1E4F1D260]);

  return CAML::check_trailer((uint64_t)a2, a4, (CAML::Context *)((char *)a4 + a5), v8);
}

void CAML::ObjCNull::~ObjCNull(CAML::ObjCNull *this)
{
  *(void *)this = &unk_1ED030AC8;
  int v2 = (const void *)*((void *)this + 2);
  if (v2) {
    CFRelease(v2);
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  const void *v1;

  *(void *)this = &unk_1ED030AC8;
  uint64_t v1 = (const void *)*((void *)this + 2);
  if (v1) {
    CFRelease(v1);
  }
}

void CAML::ObjCBool::~ObjCBool(CAML::ObjCBool *this)
{
  *(void *)this = &unk_1ED030AC8;
  int v2 = (const void *)*((void *)this + 2);
  if (v2) {
    CFRelease(v2);
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  const void *v1;

  *(void *)this = &unk_1ED030AC8;
  uint64_t v1 = (const void *)*((void *)this + 2);
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t CAML::ObjCInteger::is_numeric(CAML::ObjCInteger *this)
{
  return 1;
}

void CAML::ObjCInteger::~ObjCInteger(CAML::ObjCInteger *this)
{
  *(void *)this = &unk_1ED030AC8;
  int v2 = (const void *)*((void *)this + 2);
  if (v2) {
    CFRelease(v2);
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  const void *v1;

  *(void *)this = &unk_1ED030AC8;
  uint64_t v1 = (const void *)*((void *)this + 2);
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t CAML::ObjCReal::is_numeric(CAML::ObjCReal *this)
{
  return 1;
}

void CAML::ObjCReal::~ObjCReal(CAML::ObjCReal *this)
{
  *(void *)this = &unk_1ED030AC8;
  int v2 = (const void *)*((void *)this + 2);
  if (v2) {
    CFRelease(v2);
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  const void *v1;

  *(void *)this = &unk_1ED030AC8;
  uint64_t v1 = (const void *)*((void *)this + 2);
  if (v1) {
    CFRelease(v1);
  }
}

void CAML::ObjCNSArray::~ObjCNSArray(CAML::ObjCNSArray *this)
{
  *(void *)this = &unk_1ED030AC8;
  int v2 = (const void *)*((void *)this + 2);
  if (v2) {
    CFRelease(v2);
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  const void *v1;

  *(void *)this = &unk_1ED030AC8;
  uint64_t v1 = (const void *)*((void *)this + 2);
  if (v1) {
    CFRelease(v1);
  }
}

void CAML::ObjCNSSet::start(CAML::ObjCNSSet *this, CAML::Context *a2, CAML::State *a3, const char **a4)
{
  CFMutableSetRef Mutable = CFSetCreateMutable(0, 0, MEMORY[0x1E4F1D548]);
  CAML::State::set_value(a3, Mutable);
  CFRelease(Mutable);
  *((_DWORD *)a3 + 4) = 4;
}

void CAML::ObjCNSSet::~ObjCNSSet(CAML::ObjCNSSet *this)
{
  *(void *)this = &unk_1ED030AC8;
  int v2 = (const void *)*((void *)this + 2);
  if (v2) {
    CFRelease(v2);
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  const void *v1;

  *(void *)this = &unk_1ED030AC8;
  uint64_t v1 = (const void *)*((void *)this + 2);
  if (v1) {
    CFRelease(v1);
  }
}

void CAML::ObjCNSDictionary::start(CAML::ObjCNSDictionary *this, CAML::Context *a2, CAML::State *a3, const char **a4)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CAML::State::set_value(a3, Mutable);
  CFRelease(Mutable);
  *((_DWORD *)a3 + 4) = 2;
}

void CAML::ObjCNSDictionary::~ObjCNSDictionary(CAML::ObjCNSDictionary *this)
{
  *(void *)this = &unk_1ED030AC8;
  int v2 = (const void *)*((void *)this + 2);
  if (v2) {
    CFRelease(v2);
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  const void *v1;

  *(void *)this = &unk_1ED030AC8;
  uint64_t v1 = (const void *)*((void *)this + 2);
  if (v1) {
    CFRelease(v1);
  }
}

void CAML::ObjCString::~ObjCString(CAML::ObjCString *this)
{
  *(void *)this = &unk_1ED030AC8;
  int v2 = (const void *)*((void *)this + 2);
  if (v2) {
    CFRelease(v2);
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  const void *v1;

  *(void *)this = &unk_1ED030AC8;
  uint64_t v1 = (const void *)*((void *)this + 2);
  if (v1) {
    CFRelease(v1);
  }
}

void CAML::ObjCNSURL::end(CAML::ObjCNSURL *this, CFURLRef *a2, CAML::State *a3, UInt8 *URLBytes, CFIndex length)
{
  CFURLRef v6 = CFURLCreateWithBytes(0, URLBytes, length, 0x8000100u, a2[2]);
  CAML::State::set_value(a3, v6);
  if (v6)
  {
    CFRelease(v6);
  }
}

void CAML::ObjCNSURL::~ObjCNSURL(CAML::ObjCNSURL *this)
{
  *(void *)this = &unk_1ED030AC8;
  int v2 = (const void *)*((void *)this + 2);
  if (v2) {
    CFRelease(v2);
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  const void *v1;

  *(void *)this = &unk_1ED030AC8;
  uint64_t v1 = (const void *)*((void *)this + 2);
  if (v1) {
    CFRelease(v1);
  }
}

void CAML::ObjCNSData::end(CAML::ObjCNSData *this, CAML::Context *a2, CAML::State *a3, char *a4, uint64_t a5)
{
  uint64_t v6 = [MEMORY[0x1E4F1C9B8] dataWithBytesNoCopy:a4 length:a5 freeWhenDone:0];
  id v7 = (id)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBase64EncodedData:v6 options:0];
  CAML::State::set_value(a3, v7);
}

void CAML::ObjCNSData::~ObjCNSData(CAML::ObjCNSData *this)
{
  *(void *)this = &unk_1ED030AC8;
  int v2 = (const void *)*((void *)this + 2);
  if (v2) {
    CFRelease(v2);
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  const void *v1;

  *(void *)this = &unk_1ED030AC8;
  uint64_t v1 = (const void *)*((void *)this + 2);
  if (v1) {
    CFRelease(v1);
  }
}

void CAML::ObjCCGPoint::~ObjCCGPoint(CAML::ObjCCGPoint *this)
{
  *(void *)this = &unk_1ED030AC8;
  int v2 = (const void *)*((void *)this + 2);
  if (v2) {
    CFRelease(v2);
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  const void *v1;

  *(void *)this = &unk_1ED030AC8;
  uint64_t v1 = (const void *)*((void *)this + 2);
  if (v1) {
    CFRelease(v1);
  }
}

void CAML::ObjCCGSize::end(CAML::ObjCCGSize *this, CAML::Context *a2, CAML::State *a3, CAML *a4, uint64_t a5)
{
  v14[1] = *(CAML::Context **)MEMORY[0x1E4F143B8];
  id v7 = (char **)((char *)a4 + a5);
  v14[0] = a4;
  double v8 = CAML::parse_length(a4, (char *)v14, (char **)((char *)a4 + a5), (const char *)a4);
  double v10 = CAML::parse_length(v14[0], (char *)v14, v7, v9);
  uint64_t v12 = CAML::check_trailer((uint64_t)a2, v14[0], (CAML::Context *)v7, v11);
  float v13 = (void *)MEMORY[0x185324A30](v12);
  CAML::State::set_value(a3, (CFTypeRef)objc_msgSend(MEMORY[0x1E4F29238], "valueWithSize:", v8, v10));
}

void sub_1847F1238(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CAML::ObjCCGSize::~ObjCCGSize(CAML::ObjCCGSize *this)
{
  *(void *)this = &unk_1ED030AC8;
  int v2 = (const void *)*((void *)this + 2);
  if (v2) {
    CFRelease(v2);
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  const void *v1;

  *(void *)this = &unk_1ED030AC8;
  uint64_t v1 = (const void *)*((void *)this + 2);
  if (v1) {
    CFRelease(v1);
  }
}

void CAML::ObjCCGRect::~ObjCCGRect(CAML::ObjCCGRect *this)
{
  *(void *)this = &unk_1ED030AC8;
  int v2 = (const void *)*((void *)this + 2);
  if (v2) {
    CFRelease(v2);
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  const void *v1;

  *(void *)this = &unk_1ED030AC8;
  uint64_t v1 = (const void *)*((void *)this + 2);
  if (v1) {
    CFRelease(v1);
  }
}

void CAML::ObjCCGAffineTransform::end(CAML::ObjCCGAffineTransform *this, CGAffineTransform *a2, CAML::State *a3, CAML::Context *a4, const char *a5)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  long long v9 = 0u;
  long long v10 = 0u;
  *(_OWORD *)double v8 = 0u;
  CAML::parse_affine_matrix(a2, a4, v8, (CAML *)&a5[(void)a4], a5);
  id v6 = objc_alloc_init(MEMORY[0x1E4F28AF0]);
  v7[0] = *(_OWORD *)v8;
  v7[1] = v9;
  v7[2] = v10;
  [v6 setTransformStruct:v7];
  CAML::State::set_value(a3, v6);
}

void CAML::ObjCCGAffineTransform::~ObjCCGAffineTransform(CAML::ObjCCGAffineTransform *this)
{
  *(void *)this = &unk_1ED030AC8;
  int v2 = (const void *)*((void *)this + 2);
  if (v2) {
    CFRelease(v2);
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  const void *v1;

  *(void *)this = &unk_1ED030AC8;
  uint64_t v1 = (const void *)*((void *)this + 2);
  if (v1) {
    CFRelease(v1);
  }
}

void CAML::ObjCCATransform3D::~ObjCCATransform3D(CAML::ObjCCATransform3D *this)
{
  *(void *)this = &unk_1ED030AC8;
  int v2 = (const void *)*((void *)this + 2);
  if (v2) {
    CFRelease(v2);
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  const void *v1;

  *(void *)this = &unk_1ED030AC8;
  uint64_t v1 = (const void *)*((void *)this + 2);
  if (v1) {
    CFRelease(v1);
  }
}

void CAML::ObjCCAPoint3D::end(CAML::ObjCCAPoint3D *this, CAML::Context *a2, CAML::State *a3, CAML *a4, uint64_t a5)
{
  v13[1] = *(CAML **)MEMORY[0x1E4F143B8];
  id v6 = (char **)((char *)a4 + a5);
  v13[0] = a4;
  double v7 = CAML::parse_length(a4, (char *)v13, (char **)((char *)a4 + a5), (const char *)a4);
  double v9 = CAML::parse_length(v13[0], (char *)v13, v6, v8);
  double v11 = CAML::parse_length(v13[0], (char *)v13, v6, v10);
  uint64_t v12 = (void *)MEMORY[0x185324A30]();
  CAML::State::set_value(a3, (CFTypeRef)objc_msgSend(MEMORY[0x1E4F29238], "valueWithCAPoint3D:", v7, v9, v11));
}

void sub_1847F1690(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CAML::ObjCCAPoint3D::~ObjCCAPoint3D(CAML::ObjCCAPoint3D *this)
{
  *(void *)this = &unk_1ED030AC8;
  int v2 = (const void *)*((void *)this + 2);
  if (v2) {
    CFRelease(v2);
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  const void *v1;

  *(void *)this = &unk_1ED030AC8;
  uint64_t v1 = (const void *)*((void *)this + 2);
  if (v1) {
    CFRelease(v1);
  }
}

void CAML::ObjCCACornerRadii::end(CAML::ObjCCACornerRadii *this, CAML::Context *a2, CAML::State *a3, char *a4, uint64_t a5)
{
  uint64_t v6 = 0;
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  double v7 = (char **)&a4[a5];
  *(void *)size_t v14 = a4;
  do
  {
    *(double *)((char *)&v10 + v6) = CAML::parse_length(*(CAML **)v14, v14, v7, a4);
    v6 += 8;
  }
  while (v6 != 64);
  double v8 = (void *)MEMORY[0x185324A30]();
  v9[0] = v10;
  v9[1] = v11;
  v9[2] = v12;
  v9[3] = v13;
  CAML::State::set_value(a3, (CFTypeRef)[MEMORY[0x1E4F29238] valueWithCACornerRadii:v9]);
}

void sub_1847F182C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CAML::ObjCCACornerRadii::~ObjCCACornerRadii(CAML::ObjCCACornerRadii *this)
{
  *(void *)this = &unk_1ED030AC8;
  int v2 = (const void *)*((void *)this + 2);
  if (v2) {
    CFRelease(v2);
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  const void *v1;

  *(void *)this = &unk_1ED030AC8;
  uint64_t v1 = (const void *)*((void *)this + 2);
  if (v1) {
    CFRelease(v1);
  }
}

void CAML::ObjCCAColorMatrix::end(CAML::ObjCCAColorMatrix *this, CAML::Context *a2, CAML::State *a3, CAML *a4, uint64_t a5)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  *(void *)((char *)&v42[9] + 4) = 0x3F80000000000000;
  LODWORD(v42[6]) = 1065353216;
  *((void *)&v42[7] + 1) = 1065353216;
  double v8 = (CAML *)((char *)a4 + a5);
  *(_OWORD *)((char *)&v42[8] + 4) = 0uLL;
  LODWORD(v42[8]) = 1065353216;
  HIDWORD(v42[9]) = 0;
  v42[5] = 0uLL;
  memset((char *)&v42[6] + 4, 0, 20);
  double v9 = CAML::skip_whitespace(a4, (CAML *)((char *)a4 + a5), (const char *)a3);
  size_t v10 = 0;
  uint64_t v11 = MEMORY[0x1E4F14390];
  size_t v12 = 1;
  while (1)
  {
    if (v9 >= v8) {
      goto LABEL_8;
    }
    unsigned int v13 = *((char *)v9 + v10);
    if (!*((unsigned char *)v9 + v10)) {
      goto LABEL_10;
    }
    if ((v13 & 0x80000000) != 0) {
      break;
    }
    if ((*(_DWORD *)(v11 + 4 * v13 + 60) & 0x100) == 0) {
      goto LABEL_10;
    }
LABEL_8:
    if (++v10 == 31) {
      goto LABEL_13;
    }
  }
  if (__maskrune(v13, 0x100uLL)) {
    goto LABEL_8;
  }
LABEL_10:
  if (v10 <= 0x1F) {
    size_t v12 = 32 - v10;
  }
  else {
    size_t v12 = 0;
  }
LABEL_13:
  bzero((char *)&__dst + v10, v12);
  memcpy(&__dst, v9, v10);
  *((unsigned char *)&__dst + v10) = 0;
  uint64_t v15 = CAML::skip_whitespace((CAML *)((char *)v9 + v10), v8, v14);
  long long v43 = v15;
  if (v15 < v8 && *(unsigned char *)v15 == 40)
  {
    uint64_t v15 = CAML::skip_whitespace((CAML *)((char *)v15 + 1), v8, v16);
    long long v43 = v15;
  }
  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v44 = 0u;
  if (v15 >= v8)
  {
    unint64_t v18 = 0;
  }
  else
  {
    unint64_t v18 = 0;
    do
    {
      int v19 = *(unsigned __int8 *)v15;
      if (!*(unsigned char *)v15) {
        break;
      }
      if (v19 == 41 || v18 > 0x13)
      {
        if (v19 == 41)
        {
          uint64_t v15 = CAML::skip_whitespace((CAML *)((char *)v15 + 1), v8, v16);
          long long v43 = v15;
        }
        break;
      }
      float v21 = CAML::parse_real(v15, (char *)&v43, (char **)v8, v17);
      *((float *)&v44 + v18) = v21;
      uint64_t v15 = CAML::skip_whitespace(v43, v8, v22);
      long long v43 = v15;
      if (v15 < v8)
      {
        int v23 = *(unsigned __int8 *)v15;
        if (v23 == 59 || v23 == 44)
        {
          uint64_t v15 = CAML::skip_whitespace((CAML *)((char *)v15 + 1), v8, v16);
          long long v43 = v15;
        }
      }
      ++v18;
    }
    while (v15 < v8);
  }
  if (v15 < v8)
  {
    int v24 = *(unsigned __int8 *)v15;
    if (v24 == 59 || v24 == 44)
    {
      uint64_t v15 = CAML::skip_whitespace((CAML *)((char *)v15 + 1), v8, v16);
      long long v43 = v15;
    }
  }
  if (__dst == 1920229741 && *(_DWORD *)((char *)&__dst + 3) == 7891314)
  {
    if (v18 == 20)
    {
      v42[8] = v44;
      v42[9] = v45;
      v42[5] = v46;
      v42[6] = v47;
      v42[7] = v48;
      goto LABEL_58;
    }
LABEL_57:
    uint64_t v15 = (CAML *)CAML::Context::error(a2, "Invalid color matrix: %s (position %ld)", (const char *)a4, v15 - a4);
    goto LABEL_58;
  }
  if (__dst ^ 0x6574617275746173 | v50) {
    BOOL v26 = 0;
  }
  else {
    BOOL v26 = v18 == 1;
  }
  if (v26)
  {
    float v36 = fmaxf(*(float *)&v44, 0.0);
    *((void *)&v42[7] + 1) = 1065353216;
    *(void *)((char *)&v42[8] + 12) = 0;
    *(void *)&v42[5] = 0;
    memset((char *)&v42[6] + 4, 0, 20);
    *(float *)&unsigned int v37 = (float)(v36 * 0.7873) + 0.2126;
    float32x2_t v38 = vmul_n_f32((float32x2_t)0x3E91D14E3E59B3D0, v36);
    LODWORD(v39) = vsub_f32((float32x2_t)1046066128, v38).u32[0];
    DWORD2(v42[5]) = v39;
    HIDWORD(v39) = vadd_f32(v38, (float32x2_t)vdup_n_s32(0x3F371759u)).i32[1];
    *(void *)((char *)&v42[9] + 4) = v39;
    *((float *)&v42[9] + 3) = 0.0722 - (float)(v36 * 0.0722);
    float32x2_t v40 = vmul_n_f32((float32x2_t)0x3F6D844D3F371759, v36);
    LODWORD(v39) = vsub_f32((float32x2_t)0x3F6D844D3F371759, v40).u32[0];
    *(void *)&v42[8] = __PAIR64__(v39, v37);
    DWORD2(v42[8]) = HIDWORD(v42[9]);
    HIDWORD(v39) = vadd_f32(v40, (float32x2_t)vdup_n_s32(0x3D93DD98u)).i32[1];
    *(void *)((char *)&v42[5] + 12) = v39;
    goto LABEL_58;
  }
  BOOL v27 = __dst == 0x7461746F52657568 && (unsigned __int16)v50 == 101;
  if (!v27 || v18 != 1)
  {
    if (!(__dst ^ 0x636E616E696D756CLL | v50 ^ 0x6168706C416F5465 | v51) && !v18)
    {
      HIDWORD(v42[7]) = 0;
      memset(&v42[8], 0, 32);
      memset(&v42[5], 0, 28);
      *(_OWORD *)((char *)&v42[6] + 12) = xmmword_184997D70;
      goto LABEL_58;
    }
    goto LABEL_57;
  }
  *((void *)&v42[7] + 1) = 1065353216;
  *(void *)((char *)&v42[8] + 12) = 0;
  *(void *)&v42[5] = 0;
  memset((char *)&v42[6] + 4, 0, 20);
  __float2 v28 = __sincosf_stret(*(float *)&v44);
  v29.i32[0] = 1046066128;
  float32x2_t v30 = vmul_n_f32((float32x2_t)0x3E91D14E3E59B3D0, v28.__cosval);
  v29.f32[0] = vsub_f32(v29, v30).f32[0];
  float v31 = 0.0722 - (float)(v28.__cosval * 0.0722);
  v29.i32[1] = vadd_f32(v30, (float32x2_t)vdup_n_s32(0x3F371759u)).i32[1];
  *(float32x2_t *)((char *)&v42[9] + 4) = vmla_n_f32(v29, (float32x2_t)0x3E0F5C293E126E98, v28.__sinval);
  *((float *)&v42[9] + 3) = v31 + (float)(v28.__sinval * -0.283);
  *((float *)&v42[5] + 2) = v29.f32[0] - (float)(v28.__sinval * 0.7873);
  float32x2_t v32 = vmul_n_f32((float32x2_t)0x3F6D844D3F371759, v28.__cosval);
  float32x2_t v33 = vsub_f32((float32x2_t)0x3F6D844D3F371759, v32);
  float32x2_t v34 = vmul_n_f32((float32x2_t)0x3D93DD983F371759, v28.__sinval);
  unsigned __int32 v35 = vsub_f32(v33, v34).u32[0];
  v33.i32[1] = vadd_f32(v32, (float32x2_t)vdup_n_s32(0x3D93DD98u)).i32[1];
  *(void *)&v42[8] = __PAIR64__(v35, (float)((float)(v28.__cosval * 0.7873) + 0.2126) + (float)(v28.__sinval * -0.2126));
  *((float *)&v42[8] + 2) = v31 + (float)(v28.__sinval * 0.9278);
  *(float32x2_t *)((char *)&v42[5] + 12) = vadd_f32(v33, v34);
LABEL_58:
  int v41 = (void *)MEMORY[0x185324A30](v15);
  v42[0] = v42[8];
  v42[1] = v42[9];
  v42[2] = v42[5];
  v42[3] = v42[6];
  v42[4] = v42[7];
  CAML::State::set_value(a3, (CFTypeRef)[MEMORY[0x1E4F29238] valueWithCAColorMatrix:v42]);
}

void sub_1847F1E78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CAML::ObjCCAColorMatrix::~ObjCCAColorMatrix(CAML::ObjCCAColorMatrix *this)
{
  *(void *)this = &unk_1ED030AC8;
  int v2 = (const void *)*((void *)this + 2);
  if (v2) {
    CFRelease(v2);
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  const void *v1;

  *(void *)this = &unk_1ED030AC8;
  uint64_t v1 = (const void *)*((void *)this + 2);
  if (v1) {
    CFRelease(v1);
  }
}

void CAML::ObjCCGColor::~ObjCCGColor(CAML::ObjCCGColor *this)
{
  *(void *)this = &unk_1ED030AC8;
  int v2 = (const void *)*((void *)this + 2);
  if (v2) {
    CFRelease(v2);
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  const void *v1;

  *(void *)this = &unk_1ED030AC8;
  uint64_t v1 = (const void *)*((void *)this + 2);
  if (v1) {
    CFRelease(v1);
  }
}

void CAML::ObjCCGImage::start(CAML::ObjCCGImage *this, CAML::Context *a2, CAML::State *a3, const char **a4)
{
  double v7 = CAML::Context::parse_src_attribute(a2, a4);
  if (!v7) {
    return;
  }
  CFURLRef v8 = (const __CFURL *)v7;
  double v9 = (const void *)(*(uint64_t (**)(CAML::Context *, const char *))(*(void *)a2 + 72))(a2, v7);
  if (v9 && (size_t v10 = v9, v11 = CFGetTypeID(v9), v11 == CGImageGetTypeID()))
  {
    CAML::State::set_value(a3, v10);
  }
  else
  {
    size_t v12 = CAML::memq_((const char *)a4, (const char **)"loadAsHDR", (const char *)1);
    if (v12) {
      BOOL v13 = *(unsigned __int8 *)v12 == 49;
    }
    else {
      BOOL v13 = 0;
    }
    image_from_url = CAML::create_image_from_url(v8, (const __CFURL *)v13);
    uint64_t v15 = CAML::memq_((const char *)a4, (const char **)"A8asL8", (const char *)1);
    if (v15 && *v15 == 49)
    {
      CGImageRef v16 = CA_copyL8CGImageAsA8(image_from_url);
      CGImageRelease(image_from_url);
      image_from_url = v16;
    }
    uint64_t v17 = *(void *)a2;
    if (image_from_url)
    {
      (*(void (**)(CAML::Context *, const __CFURL *, CGImage *))(v17 + 80))(a2, v8, image_from_url);
    }
    else
    {
      unint64_t v18 = (CGImage *)(*(uint64_t (**)(CAML::Context *, const __CFURL *))(v17 + 88))(a2, v8);
      if (!v18 || (image_from_url = v18, CFTypeID v19 = CFGetTypeID(v18), v19 != CGImageGetTypeID()))
      {
        CAML::Context::error(a2, "Failed to load image");
        goto LABEL_18;
      }
    }
    CAML::State::set_value(a3, image_from_url);
    CGImageRelease(image_from_url);
  }
LABEL_18:

  CFRelease(v8);
}

void CAML::ObjCCGImage::~ObjCCGImage(CAML::ObjCCGImage *this)
{
  *(void *)this = &unk_1ED030AC8;
  int v2 = (const void *)*((void *)this + 2);
  if (v2) {
    CFRelease(v2);
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  const void *v1;

  *(void *)this = &unk_1ED030AC8;
  uint64_t v1 = (const void *)*((void *)this + 2);
  if (v1) {
    CFRelease(v1);
  }
}

void CAML::ObjCCGPath::~ObjCCGPath(CAML::ObjCCGPath *this)
{
  *(void *)this = &unk_1ED030AC8;
  int v2 = (const void *)*((void *)this + 2);
  if (v2) {
    CFRelease(v2);
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  const void *v1;

  *(void *)this = &unk_1ED030AC8;
  uint64_t v1 = (const void *)*((void *)this + 2);
  if (v1) {
    CFRelease(v1);
  }
}

void CAML::ObjCCGPDFDocument::start(CAML::ObjCCGPDFDocument *this, CAML::Context *a2, CAML::State *a3, const char **a4)
{
  uint64_t v6 = CAML::Context::parse_src_attribute(a2, a4);
  if (v6)
  {
    CFURLRef v7 = (const __CFURL *)v6;
    CFURLRef v8 = (const void *)(*(uint64_t (**)(CAML::Context *, const char *))(*(void *)a2 + 72))(a2, v6);
    if (v8 && (double v9 = v8, v10 = CFGetTypeID(v8), v10 == CGPDFDocumentGetTypeID()))
    {
      CAML::State::set_value(a3, v9);
    }
    else
    {
      CGPDFDocumentRef v11 = CGPDFDocumentCreateWithURL(v7);
      uint64_t v12 = *(void *)a2;
      if (v11)
      {
        CGPDFDocumentRef v13 = v11;
        (*(void (**)(CAML::Context *, const __CFURL *, CGPDFDocumentRef))(v12 + 80))(a2, v7, v11);
      }
      else
      {
        size_t v14 = (CGPDFDocument *)(*(uint64_t (**)(CAML::Context *, const __CFURL *))(v12 + 88))(a2, v7);
        if (!v14 || (CGPDFDocumentRef v13 = v14, v15 = CFGetTypeID(v14), v15 != CGPDFDocumentGetTypeID()))
        {
          CAML::Context::error(a2, "Unable to open pdf document");
          goto LABEL_14;
        }
      }
      CAML::State::set_value(a3, v13);
      CGPDFDocumentRelease(v13);
    }
LABEL_14:
    CFRelease(v7);
    return;
  }

  CAML::Context::error(a2, "pdfDocument element must specify src attribute");
}

void CAML::ObjCCGPDFDocument::~ObjCCGPDFDocument(CAML::ObjCCGPDFDocument *this)
{
  *(void *)this = &unk_1ED030AC8;
  int v2 = (const void *)*((void *)this + 2);
  if (v2) {
    CFRelease(v2);
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  const void *v1;

  *(void *)this = &unk_1ED030AC8;
  uint64_t v1 = (const void *)*((void *)this + 2);
  if (v1) {
    CFRelease(v1);
  }
}

void CAML::ObjCCGFont::end(CAML::ObjCCGFont *this, CAML::Context *a2, CAML::State *a3, char *a4)
{
  CFURLRef v7 = (CGFont *)CGFontCreateWithName();
  if (v7)
  {
    CFURLRef v8 = v7;
    CAML::State::set_value(a3, v7);
    CGFontRelease(v8);
  }
  else
  {
    CAML::Context::warning(a2, "cannot create font from name: %s", a4);
  }
}

void CAML::ObjCCGFont::~ObjCCGFont(CAML::ObjCCGFont *this)
{
  *(void *)this = &unk_1ED030AC8;
  int v2 = (const void *)*((void *)this + 2);
  if (v2) {
    CFRelease(v2);
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  const void *v1;

  *(void *)this = &unk_1ED030AC8;
  uint64_t v1 = (const void *)*((void *)this + 2);
  if (v1) {
    CFRelease(v1);
  }
}

BOOL CA::CG::DeviceColor::Pattern::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (*(void *)a1 != *(void *)a2 || *(void *)(a1 + 72) != *(void *)(a2 + 72)) {
    return 0;
  }
  long long v4 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)&t1.a = *(_OWORD *)(a1 + 8);
  *(_OWORD *)&t1.double c = v4;
  *(_OWORD *)&t1.tx = *(_OWORD *)(a1 + 40);
  long long v5 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)&v7.a = *(_OWORD *)(a2 + 8);
  *(_OWORD *)&v7.double c = v5;
  *(_OWORD *)&v7.tx = *(_OWORD *)(a2 + 40);
  BOOL result = CGAffineTransformEqualToTransform(&t1, &v7);
  if (result)
  {
    BOOL result = 0;
    if (*(double *)(a1 + 56) == *(double *)(a2 + 56) && *(double *)(a1 + 64) == *(double *)(a2 + 64)) {
      return *(float *)(a1 + 80) == *(float *)(a2 + 80);
    }
  }
  return result;
}

NSObject *CA::CG::Queue::wait_queue(CA::CG::Queue *this, unsigned int a2)
{
  if (a2)
  {
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 56));
    while (*((_DWORD *)this + 13) < a2)
      pthread_cond_wait((pthread_cond_t *)((char *)this + 120), (pthread_mutex_t *)((char *)this + 56));
    return pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 56));
  }
  else
  {
    BOOL result = *((void *)this + 1);
    if (result)
    {
      return dispatch_group_wait(result, 0xFFFFFFFFFFFFFFFFLL);
    }
  }
  return result;
}

void CA::CG::Queue::finish_callback(CA::CG::Queue *this, void *a2)
{
  int v2 = (CA::CG::Queue *)(*(uint64_t (**)(CA::CG::Queue *, void *))(*(void *)this + 64))(this, a2);

  CA::CG::Queue::reclaim_slabs(v2);
}

void CA::CG::Queue::collect_callback(CA::CG::Queue *this, void *a2)
{
  uint64_t v2 = 0;
  do
  {
    os_unfair_lock_lock((os_unfair_lock_t)&CA::CG::AccelRenderer::_list_lock);
    uint64_t v3 = CA::CG::AccelRenderer::_list;
    if (!CA::CG::AccelRenderer::_list)
    {
LABEL_13:
      os_unfair_lock_unlock((os_unfair_lock_t)&CA::CG::AccelRenderer::_list_lock);
      break;
    }
    while (1)
    {
      if (v2 && v3 != v2) {
        goto LABEL_7;
      }
      if (!*(unsigned char *)(v3 + 4228)) {
        break;
      }
      uint64_t v2 = 0;
LABEL_7:
      uint64_t v3 = *(void *)(v3 + 4272);
      if (!v3) {
        goto LABEL_13;
      }
    }
    os_unfair_lock_lock((os_unfair_lock_t)(v3 + 4224));
    uint64_t v2 = *(void *)(v3 + 4272);
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::CG::AccelRenderer::_list_lock);
    if (*(void *)(v3 + 8))
    {
      CA::CG::Renderer::end_rendering((CA::CG::Renderer *)v3);
      uint64_t v4 = *(void *)(v3 + 8);
      uint64_t v5 = mach_absolute_time();
      *(double *)(v4 + 240) = CATimeWithHostTime(v5);
      CA::CG::Renderer::update_finished_seed(v3);
      (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 4224));
  }
  while (v2);

  CA::CG::Renderer::flush_released_objects(v6);
}

double CA::Render::Object::distance_to(CA::Render::Object *this, const CA::Render::Object *a2)
{
  return 0.0;
}

uint64_t CA::Render::Object::mix(CA::Render::Object *this, CA::Render::Object *a2, CA::Render::Object *a3, CA::Render::Object *a4, const ValueInterpolator *a5)
{
  return (*(uint64_t (**)(CA::Render::Object *, CA::Render::Object *, const ValueInterpolator *))(*(void *)this + 56))(this, a3, a5);
}

void CA::Render::Object::mix(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t CA::Render::Object::can_mix_with_object(CA::Render::Object *this, CA::Render::Object *a2)
{
  return 0;
}

void CA::Render::Interpolator::show(CA::Render::Interpolator *this, int a2, uint64_t a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  BOOL v6 = x_log_hook_p();
  if (a3)
  {
    if (v6)
    {
LABEL_18:
      x_log_();
      return;
    }
    uint64_t v20 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v21 = *((void *)this + 6);
      *(_DWORD *)buf = 134217984;
      *(void *)&uint8_t buf[4] = v21;
      CGImageRef v16 = "(interpolator %g)";
      uint64_t v17 = buf;
      unint64_t v18 = v20;
      uint32_t v19 = 12;
      goto LABEL_21;
    }
  }
  else
  {
    if (v6)
    {
      x_log_();
    }
    else
    {
      CGAffineTransform v7 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = *((void *)this + 6);
        *(_DWORD *)buf = 134217984;
        *(void *)&uint8_t buf[4] = v8;
        _os_log_impl(&dword_184668000, v7, OS_LOG_TYPE_DEFAULT, "(interpolator (factor %g)", buf, 0xCu);
      }
    }
    uint64_t v9 = 0;
    long long v10 = *((_OWORD *)this + 2);
    *(_OWORD *)buf = *((_OWORD *)this + 1);
    long long v25 = v10;
    CGPDFDocumentRef v11 = (CA::Render *)(a2 + 1);
    do
    {
      uint64_t v12 = *(void *)&buf[8 * v9];
      if (v12)
      {
        CA::Render::show_newline(v11);
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          CGPDFDocumentRef v13 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)BOOL v22 = 67109120;
            int v23 = v9;
            _os_log_impl(&dword_184668000, v13, OS_LOG_TYPE_DEFAULT, "(o%d ", v22, 8u);
          }
        }
        (*(void (**)(uint64_t, CA::Render *, uint64_t))(*(void *)v12 + 40))(v12, v11, a3);
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          size_t v14 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)BOOL v22 = 0;
            _os_log_impl(&dword_184668000, v14, OS_LOG_TYPE_DEFAULT, ")", v22, 2u);
          }
        }
      }
      ++v9;
    }
    while (v9 != 4);
    if (x_log_hook_p()) {
      goto LABEL_18;
    }
    uint64_t v15 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)BOOL v22 = 0;
      CGImageRef v16 = ")";
      uint64_t v17 = v22;
      unint64_t v18 = v15;
      uint32_t v19 = 2;
LABEL_21:
      _os_log_impl(&dword_184668000, v18, OS_LOG_TYPE_DEFAULT, v16, v17, v19);
    }
  }
}

double CA::Render::ValueInterpolator::set_hermite(CA::Render::ValueInterpolator *this, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  double v10 = *(double *)this;
  double v11 = v10 * v10 * v10;
  double v12 = v10 * v10 * 3.0;
  double v13 = *(double *)this - (v10 * v10 + v10 * v10) + v11;
  *((double *)this + 2) = 1.0 - v12 + v11 + v11;
  *((double *)this + 3) = v13;
  *((double *)this + 4) = v12 - (v11 + v11);
  *((double *)this + 5) = v11 - v10 * v10;
  double v14 = v10 * v10 * 6.0;
  *((double *)this + 6) = v14 - v10 * 6.0;
  *((double *)this + 7) = v10 * -4.0 + 1.0 + v12;
  *((double *)this + 8) = v10 * 6.0 - v14;
  *((double *)this + 9) = v12 + v10 * -2.0;
  double v15 = (1.0 - a5) * a3 / (a3 + a2);
  *((double *)this + 10) = v15 * ((a6 + 1.0) * (a7 + 1.0));
  *((double *)this + 11) = v15 * ((1.0 - a6) * (1.0 - a7));
  double v16 = (1.0 - a8) * a3 / (a4 + a3);
  double v17 = v16 * ((1.0 - a9) * (a10 + 1.0));
  double result = v16 * ((a9 + 1.0) * (1.0 - a10));
  *((double *)this + 12) = v17;
  *((double *)this + 13) = result;
  *((unsigned char *)this + 112) = 1;
  return result;
}

void CA::IOSAManager::create_new_iosa_manager(CA::IOSAManager *this, __CFRunLoop *a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  operator new();
}

uint64_t CA::IOSAManager::unref(uint64_t this)
{
  unsigned int add = atomic_fetch_add((atomic_uint *volatile)(this + 24), 0xFFFFFFFF);
  if (this && add == 1)
  {
    uint64_t v2 = this;
    if (*(void *)(this + 16))
    {
      CFRunLoopRemoveSource(*(CFRunLoopRef *)this, *(CFRunLoopSourceRef *)(this + 8), (CFRunLoopMode)*MEMORY[0x1E4F1D410]);
      CFRelease(*(CFTypeRef *)(v2 + 16));
      *(void *)(v2 + 16) = 0;
    }
    JUMPOUT(0x185323DC0);
  }
  return this;
}

void CAFrameIntervalRangeLogInvalidRange(CAFrameIntervalRange a1, CAFrameRateRange a2)
{
  float preferred = a2.preferred;
  float maximum = a2.maximum;
  float minimum = a2.minimum;
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  unsigned int var1 = a1.var1;
  unsigned int var0 = a1.var0;
  unsigned int var2 = a1.var2;
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    uint64_t v8 = x_log_category_utilities;
    if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67110400;
      unsigned int v10 = var0;
      __int16 v11 = 1024;
      unsigned int v12 = var1;
      __int16 v13 = 1024;
      unsigned int v14 = var2;
      __int16 v15 = 2048;
      double v16 = minimum;
      __int16 v17 = 2048;
      double v18 = maximum;
      __int16 v19 = 2048;
      double v20 = preferred;
      _os_log_impl(&dword_184668000, v8, OS_LOG_TYPE_ERROR, "Invalid frame interval range %u %u %u from frame rate range %.2f %.2f %.2f", buf, 0x32u);
    }
  }
}

uint64_t ___ZN2CA7Display11DisplayLink22display_force_power_onEPNS0_7DisplayE_block_invoke(uint64_t result, CA::Display::DisplayLink *this)
{
  if (*((void *)this + 1) == *(void *)(result + 32)) {
    return CA::Display::DisplayLink::power_changed(this);
  }
  return result;
}

void CA::Display::DisplayLink::foreach_display_link(uint64_t a1)
{
  v16[1] = *MEMORY[0x1E4F143B8];
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Display::DisplayLink::_list_lock);
  uint64_t v3 = CA::Display::DisplayLink::_list;
  if (!CA::Display::DisplayLink::_list) {
    goto LABEL_7;
  }
  uint64_t v4 = 0;
  do
  {
    uint64_t v5 = v4++;
    uint64_t v3 = *(void *)(v3 + 48);
  }
  while (v3);
  if (v4)
  {
    unint64_t v6 = 8 * v4;
    if ((unint64_t)(8 * v4) > 0x1000)
    {
      CGAffineTransform v7 = (char *)malloc_type_malloc(8 * v4, 0x43A28109uLL);
    }
    else
    {
      MEMORY[0x1F4188790](v2);
      CGAffineTransform v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
      bzero(v7, 8 * v4);
    }
    uint64_t v8 = 0;
    uint64_t v9 = &CA::Display::DisplayLink::_list;
    do
    {
      uint64_t v10 = *v9;
      while (1)
      {
        int v11 = *(_DWORD *)(v10 + 40);
        if (!v11) {
          break;
        }
        int v12 = *(_DWORD *)(v10 + 40);
        atomic_compare_exchange_strong((atomic_uint *volatile)(v10 + 40), (unsigned int *)&v12, v11 + 1);
        if (v12 == v11)
        {
          uint64_t v13 = v10;
          goto LABEL_17;
        }
      }
      uint64_t v13 = 0;
LABEL_17:
      *(void *)&v7[8 * v8] = v13;
      uint64_t v9 = (uint64_t *)(v10 + 48);
    }
    while (v8++ != v5);
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Display::DisplayLink::_list_lock);
    for (uint64_t i = 0; i != v4; ++i)
    {
      (*(void (**)(uint64_t, void))(a1 + 16))(a1, *(void *)&v7[8 * i]);
      CA::Display::DisplayLink::unref(*(atomic_uint **)&v7[8 * i]);
    }
    if (v6 > 0x1000) {
      free(v7);
    }
  }
  else
  {
LABEL_7:
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Display::DisplayLink::_list_lock);
  }
}

void sub_1847F570C(_Unwind_Exception *a1)
{
}

uint64_t ___ZN2CA7Display11DisplayLink28display_refresh_rate_changedEPNS0_7DisplayE_block_invoke(uint64_t result, CA::Display::DisplayLink *this)
{
  if (*((void *)this + 1) == *(void *)(result + 32)) {
    return CA::Display::DisplayLink::update_timer(this, 1);
  }
  return result;
}

void CA::WindowServer::Display::ModeSet::~ModeSet(CA::WindowServer::Display::ModeSet *this)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)this + 48);
  std::__tree<std::tuple<unsigned short,unsigned short>>::destroy(*((void **)this + 4));
  uint64_t v2 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v2;
    operator delete(v2);
  }
}

void std::__throw_bad_array_new_length[abi:nn180100]()
{
}

uint64_t CA::Display::DisplayLink::power_changed(CA::Display::DisplayLink *this)
{
  uint64_t v2 = (pthread_mutex_t *)((char *)this + 56);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 56));
  if (*((_DWORD *)this + 36) == (uint64_t)(*((void *)this + 16) - *((void *)this + 15)) >> 3)
  {
    *((_DWORD *)this + 37) = 0;
  }
  else if ((CA::Display::DisplayTimingsControl::power_state((CA::Display::DisplayTimingsControl *)(*((void *)this + 1) {
                                                                                                  + 464)) & 1) != 0
  }
         || (*(_WORD *)(*((void *)this + 1) + 760) & 0x100) != 0)
  {
    CA::Display::DisplayLink::start_timer_locked(this);
    CA::Display::DisplayLink::set_display_active_locked(this, 1);
  }

  return pthread_mutex_unlock(v2);
}

void sub_1847F5824(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    BOOL v9 = 1;
    if (v6 >= 3) {
      BOOL v9 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v10 = v9 | (2 * v6);
    unint64_t v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11) {
      int8x8_t prime = (int8x8_t)v11;
    }
    else {
      int8x8_t prime = (int8x8_t)v10;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v6 = *(void *)(a1 + 8);
    }
    if (*(void *)&prime > v6) {
      goto LABEL_74;
    }
    if (*(void *)&prime >= v6) {
      goto LABEL_43;
    }
    unint64_t v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v6 < 3 || (uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
    {
      unint64_t v19 = std::__next_prime(v19);
    }
    else
    {
      uint64_t v21 = 1 << -(char)__clz(v19 - 1);
      if (v19 >= 2) {
        unint64_t v19 = v21;
      }
    }
    if (*(void *)&prime <= v19) {
      int8x8_t prime = (int8x8_t)v19;
    }
    if (*(void *)&prime >= v6)
    {
      unint64_t v6 = *(void *)(a1 + 8);
      goto LABEL_43;
    }
    if (prime)
    {
LABEL_74:
      if (*(void *)&prime >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v13 = operator new(8 * *(void *)&prime);
      unsigned int v14 = *(void **)a1;
      *(void *)a1 = v13;
      if (v14) {
        operator delete(v14);
      }
      uint64_t v15 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(void *)(*(void *)a1 + 8 * v15++) = 0;
      while (*(void *)&prime != v15);
      double v16 = *(void **)(a1 + 16);
      if (v16)
      {
        unint64_t v17 = v16[1];
        uint8x8_t v18 = (uint8x8_t)vcnt_s8(prime);
        v18.i16[0] = vaddlv_u8(v18);
        if (v18.u32[0] > 1uLL)
        {
          if (v17 >= *(void *)&prime) {
            v17 %= *(void *)&prime;
          }
        }
        else
        {
          v17 &= *(void *)&prime - 1;
        }
        *(void *)(*(void *)a1 + 8 * v17) = a1 + 16;
        for (uint64_t i = (void *)*v16; *v16; uint64_t i = (void *)*v16)
        {
          unint64_t v23 = i[1];
          if (v18.u32[0] > 1uLL)
          {
            if (v23 >= *(void *)&prime) {
              v23 %= *(void *)&prime;
            }
          }
          else
          {
            v23 &= *(void *)&prime - 1;
          }
          if (v23 == v17)
          {
            double v16 = i;
          }
          else
          {
            int v24 = i;
            if (*(void *)(*(void *)a1 + 8 * v23))
            {
              do
              {
                long long v25 = v24;
                int v24 = (void *)*v24;
              }
              while (v24 && i[2] == v24[2]);
              *double v16 = v24;
              *long long v25 = **(void **)(*(void *)a1 + 8 * v23);
              **(void **)(*(void *)a1 + 8 * v23) = i;
            }
            else
            {
              *(void *)(*(void *)a1 + 8 * v23) = v16;
              double v16 = i;
              unint64_t v17 = v23;
            }
          }
        }
      }
      unint64_t v6 = (unint64_t)prime;
    }
    else
    {
      unsigned __int32 v35 = *(void **)a1;
      *(void *)a1 = 0;
      if (v35) {
        operator delete(v35);
      }
      unint64_t v6 = 0;
      *(void *)(a1 + 8) = 0;
    }
  }
LABEL_43:
  uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v26.i16[0] = vaddlv_u8(v26);
  if (v26.u32[0] > 1uLL)
  {
    unint64_t v27 = a2;
    if (v6 <= a2) {
      unint64_t v27 = a2 % v6;
    }
  }
  else
  {
    unint64_t v27 = (v6 - 1) & a2;
  }
  __float2 v28 = *(void **)(*(void *)a1 + 8 * v27);
  if (!v28) {
    return 0;
  }
  int v29 = 0;
  do
  {
    double result = v28;
    __float2 v28 = (void *)*v28;
    if (!v28) {
      break;
    }
    unint64_t v31 = v28[1];
    if (v26.u32[0] > 1uLL)
    {
      unint64_t v32 = v28[1];
      if (v31 >= v6) {
        unint64_t v32 = v31 % v6;
      }
    }
    else
    {
      unint64_t v32 = v31 & (v6 - 1);
    }
    if (v32 != v27) {
      break;
    }
    BOOL v33 = v31 == a2 && v28[2] == *a3;
    int v34 = v29 & !v33;
    v29 |= v33;
  }
  while (v34 != 1);
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__node_insert_multi_perform(void *result, void *a2, void *a3)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(void *)(*result + 8 * v4) = result + 2;
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
LABEL_18:
    *(void *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
    if (v6 != v4) {
      goto LABEL_18;
    }
  }
LABEL_19:
  ++result[3];
  return result;
}

void *std::__tree<std::tuple<unsigned short,unsigned short>>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  double result = *(void **)(a1 + 16);
  if (result)
  {
    int8x8_t v3 = (void *)*result;
    if (*result == a1)
    {
      *double result = 0;
      while (1)
      {
        unint64_t v4 = (void *)result[1];
        if (!v4) {
          break;
        }
        do
        {
          double result = v4;
          unint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; int8x8_t v3 = (void *)result[1])
      {
        do
        {
          double result = v3;
          int8x8_t v3 = (void *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

void *std::__tree<std::tuple<unsigned short,unsigned short>>::__find_leaf_high(uint64_t a1, void *a2, unsigned __int16 a3, unsigned __int16 a4)
{
  unint64_t v6 = *(uint64_t **)(a1 + 8);
  unint64_t v4 = (void *)(a1 + 8);
  uint8x8_t v5 = v6;
  if (v6)
  {
    do
    {
      while (1)
      {
        unint64_t v4 = v5;
        unsigned int v7 = *((unsigned __int16 *)v5 + 13);
        BOOL v8 = v7 == a3;
        if (v7 <= a3) {
          char v9 = 1;
        }
        else {
          char v9 = -1;
        }
        if (v8)
        {
          unsigned int v10 = *((unsigned __int16 *)v5 + 14);
          BOOL v11 = v10 == a4;
          if (v10 <= a4) {
            char v9 = 1;
          }
          else {
            char v9 = -1;
          }
          if (v11) {
            char v9 = 0;
          }
        }
        if ((v9 & 0x80) == 0) {
          break;
        }
        uint8x8_t v5 = (uint64_t *)*v5;
        int v12 = v4;
        if (!*v4) {
          goto LABEL_18;
        }
      }
      uint8x8_t v5 = (uint64_t *)v5[1];
    }
    while (v5);
    int v12 = v4 + 1;
  }
  else
  {
    int v12 = v4;
  }
LABEL_18:
  *a2 = v4;
  return v12;
}

float CA::Display::Display::auto_luminance_boost(CA::Display::Display *this)
{
  mach_msg_return_t v6;
  BOOL v7;
  int v8;
  int msg;
  unsigned char msg_4[44];
  uint64_t v12;

  int v1 = (int)this;
  int v12 = *MEMORY[0x1E4F143B8];
  mach_port_name_t ServerPort = CARenderServerGetServerPort(0);
  if (ServerPort)
  {
    mach_port_name_t v3 = ServerPort;
    float v4 = 1.0;
    if (!v1)
    {
LABEL_28:
      mach_port_deallocate(*MEMORY[0x1E4F14960], v3);
      return v4;
    }
    memset(&msg_4[16], 0, 28);
    *(_OWORD *)msg_4 = 0u;
    *(void *)&msg_4[20] = *MEMORY[0x1E4F14068];
    *(_DWORD *)&msg_4[28] = v1;
    mach_port_t reply_port = mig_get_reply_port();
    *(_DWORD *)&msg_4[4] = v3;
    *(_DWORD *)&msg_4[8] = reply_port;
    msg = 5395;
    *(void *)&msg_4[12] = 0x9D2B00000000;
    if (MEMORY[0x1E4F14B18])
    {
      voucher_mach_msg_set((mach_msg_header_t *)&msg);
      mach_port_t reply_port = *(_DWORD *)&msg_4[8];
    }
    unint64_t v6 = mach_msg((mach_msg_header_t *)&msg, 3, 0x24u, 0x30u, reply_port, 0, 0);
    if ((v6 - 268435458) <= 0xE && ((1 << (v6 - 2)) & 0x4003) != 0)
    {
      mig_put_reply_port(*(mach_port_t *)&msg_4[8]);
      goto LABEL_28;
    }
    if (v6)
    {
      mig_dealloc_reply_port(*(mach_port_t *)&msg_4[8]);
      goto LABEL_28;
    }
    if (*(_DWORD *)&msg_4[16] == 71)
    {
      BOOL v8 = -308;
      goto LABEL_26;
    }
    if (*(_DWORD *)&msg_4[16] != 40335)
    {
      BOOL v8 = -301;
      goto LABEL_26;
    }
    if ((msg & 0x80000000) == 0)
    {
      if (*(_DWORD *)msg_4 == 40)
      {
        if (!*(_DWORD *)&msg_4[4])
        {
          BOOL v8 = *(_DWORD *)&msg_4[28];
          if (!*(_DWORD *)&msg_4[28])
          {
            float v4 = *(float *)&msg_4[32];
            goto LABEL_28;
          }
LABEL_26:
          mach_msg_destroy((mach_msg_header_t *)&msg);
          if (!v8) {
            float v4 = 0.0;
          }
          goto LABEL_28;
        }
      }
      else if (*(_DWORD *)msg_4 == 36)
      {
        if (*(_DWORD *)&msg_4[4]) {
          unsigned int v7 = 1;
        }
        else {
          unsigned int v7 = *(_DWORD *)&msg_4[28] == 0;
        }
        if (v7) {
          BOOL v8 = -300;
        }
        else {
          BOOL v8 = *(_DWORD *)&msg_4[28];
        }
        goto LABEL_26;
      }
    }
    BOOL v8 = -300;
    goto LABEL_26;
  }
  return 1.0;
}

void sub_1847F6878(_Unwind_Exception *a1)
{
  mach_port_deallocate(*v2, v1);
  kdebug_trace();
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::tuple<unsigned short,unsigned short>>::__find_equal<std::tuple<unsigned short,unsigned short>>(uint64_t a1, void *a2, unsigned __int16 a3, unsigned __int16 a4)
{
  unint64_t v6 = *(uint64_t **)(a1 + 8);
  double result = (uint64_t *)(a1 + 8);
  uint8x8_t v5 = v6;
  if (v6)
  {
    while (1)
    {
      unsigned int v7 = v5;
      unsigned int v8 = *((unsigned __int16 *)v5 + 13);
      if (v8 == a3)
      {
        unsigned int v9 = *((unsigned __int16 *)v7 + 14);
        BOOL v10 = v9 == a4;
        if (v9 <= a4)
        {
          if (v9 >= a4) {
            char v11 = 1;
          }
          else {
            char v11 = -1;
          }
          if (v10) {
            char v11 = 0;
          }
          if ((v11 & 0x80) == 0) {
            goto LABEL_21;
          }
          goto LABEL_18;
        }
LABEL_12:
        uint8x8_t v5 = (uint64_t *)*v7;
        double result = v7;
        if (!*v7) {
          goto LABEL_21;
        }
      }
      else
      {
        if (v8 > a3) {
          goto LABEL_12;
        }
        if (v8 >= a3) {
          char v12 = 1;
        }
        else {
          char v12 = -1;
        }
        if ((v12 & 0x80) == 0) {
          goto LABEL_21;
        }
LABEL_18:
        double result = v7 + 1;
        uint8x8_t v5 = (uint64_t *)v7[1];
        if (!v5) {
          goto LABEL_21;
        }
      }
    }
  }
  unsigned int v7 = result;
LABEL_21:
  *a2 = v7;
  return result;
}

void sub_1847F6D80(_Unwind_Exception *a1)
{
  CA::WindowServer::Display::ModeSet::~ModeSet(v1);
  CA::WindowServer::Display::ModeSet::~ModeSet((CA::WindowServer::Display::ModeSet *)(v2 - 192));
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32c39_ZTSN2CA12WindowServer7Display7ModeSetE128(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table(a1 + 80);
  std::__tree<std::tuple<unsigned short,unsigned short>>::destroy(*(void **)(a1 + 64));
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
}

__n128 __copy_helper_block_e8_32c39_ZTSN2CA12WindowServer7Display7ModeSetE128c47_ZTSN2CA12WindowServer7Display14EDIDAttributesE(uint64_t a1, uint64_t a2)
{
  CA::WindowServer::Display::ModeSet::ModeSet((CA::WindowServer::Display::ModeSet *)(a1 + 32), (const CA::WindowServer::Display::ModeSet *)(a2 + 32));
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 141) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(unsigned char *)(a1 + 148) = *(unsigned char *)(a2 + 148);
  __n128 result = *(__n128 *)(a2 + 152);
  *(__n128 *)(a1 + 152) = result;
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  return result;
}

void sub_1847F7188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_1847F7840(_Unwind_Exception *a1)
{
  mach_port_deallocate(*MEMORY[0x1E4F14960], v1);
  _Unwind_Resume(a1);
}

void sub_1847F7D1C(_Unwind_Exception *a1)
{
  if (v2) {
    mach_port_deallocate(*MEMORY[0x1E4F14960], v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1847F8748(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1847F87D4(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1847F8A4C(_Unwind_Exception *a1)
{
  mach_port_deallocate(*MEMORY[0x1E4F14960], v2);
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1847F8E50(_Unwind_Exception *a1)
{
  mach_port_deallocate(*MEMORY[0x1E4F14960], v1);
  _Unwind_Resume(a1);
}

uint64_t CA::Display::Display::link_quality(CA::Display::Display *this)
{
  return 0xFFFFFFFFLL;
}

void sub_1847F8F7C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1847F90C4(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN2CA7Display11DisplayLink21display_power_changedEv_block_invoke(int a1, CA::Display::DisplayLink *this)
{
  return CA::Display::DisplayLink::power_changed(this);
}

uint64_t will_suspend_callback(CA::Render::Object *a1, void *a2, void *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v3 = current_displays();
  uint64_t result = [v3 countByEnumeratingWithState:&v9 objects:v8 count:16];
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = *(void *)v10;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v3);
        }
        [*(id *)(*((void *)&v9 + 1) + 8 * v7++) _invalidate];
      }
      while (v5 != v7);
      uint64_t result = [v3 countByEnumeratingWithState:&v9 objects:v8 count:16];
      uint64_t v5 = result;
    }
    while (result);
  }
  return result;
}

id current_displays(void)
{
  pthread_mutex_lock(&_displays_mutex);
  id v0 = (id)[(id)_displays copy];
  pthread_mutex_unlock(&_displays_mutex);
  return v0;
}

void sub_1847F9254(_Unwind_Exception *a1)
{
}

void ___ZL15ensure_displaysv_block_invoke_924()
{
}

uint64_t ___ZL15ensure_displaysv_block_invoke()
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v0 = current_displays();
  uint64_t result = [v0 countByEnumeratingWithState:&v6 objects:v5 count:16];
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(void *)v7;
    do
    {
      uint64_t v4 = 0;
      do
      {
        if (*(void *)v7 != v3) {
          objc_enumerationMutation(v0);
        }
        [*(id *)(*((void *)&v6 + 1) + 8 * v4++) update];
      }
      while (v2 != v4);
      uint64_t result = [v0 countByEnumeratingWithState:&v6 objects:v5 count:16];
      uint64_t v2 = result;
    }
    while (result);
  }
  return result;
}

uint64_t CA::Display::IOMFBDisplay::link_quality(CA::Display::IOMFBDisplay *this)
{
  return 0xFFFFFFFFLL;
}

void CA::Display::IOMFBDisplay::~IOMFBDisplay(CFTypeRef *this)
{
  CA::Display::Display::~Display(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

void CA::Display::MetalLinkItem::dispatch_(uint64_t a1, void *a2)
{
  v27[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
  uint64_t v5 = *(void *)(a1 + 16);
  int v6 = *(_DWORD *)(a1 + 56);
  if (*(unsigned char *)(v5 + 697)) {
    unsigned int v7 = 2;
  }
  else {
    unsigned int v7 = 1;
  }
  if (v7 <= *(_DWORD *)(v5 + 520)) {
    unsigned int v7 = *(_DWORD *)(v5 + 520);
  }
  if (v7 <= *(_DWORD *)(v5 + 552)) {
    unsigned int v7 = *(_DWORD *)(v5 + 552);
  }
  if (*(float *)(a1 + 328) <= 2.0 && BYTE12(xmmword_1EB2ACC70) == 0 && v6 == v7) {
    float v10 = 2.0;
  }
  else {
    float v10 = *(float *)(a1 + 328);
  }
  double v11 = CATimeWithHostTime(*(void *)(a1 + 296));
  double v12 = CATimeWithHostTime(*(void *)(a1 + 336));
  double v13 = CATimeWithHostTime(*(void *)(a1 + 280));
  double v14 = v13 + v12;
  double v15 = v13 + v12 + v12 * -0.01;
  double v16 = CATimeWithHostTime(*(void *)(a1 + 344));
  float v26 = v10;
  if (CA::Display::DisplayTimingsControl::server_triple_buffered((os_unfair_lock_s *)(v5 + 464)))
  {
    uint64_t v17 = 528;
    if ((*(unsigned char *)(v5 + 697) & 8) == 0) {
      uint64_t v17 = 496;
    }
    double v15 = v15 - *(double *)(v5 + v17);
  }
  CA::Display::DisplayTimingsControl::server_frame_interval((CA::Display::DisplayTimingsControl *)(v5 + 464), 0);
  os_unfair_lock_unlock(v4);
  uint8x8_t v18 = (void *)MEMORY[0x185324A30]();
  unint64_t v19 = *(CAMetalLayer **)(a1 + 320);
  double v20 = CATimeWithHostTime(*(void *)(a1 + 288));
  int v21 = *(_DWORD *)(a1 + 328);
  BOOL v22 = (os_unfair_lock_s *)((char *)v19->_priv + 8);
  os_unfair_lock_lock(v22);
  v27[0] = 0;
  CAMetalLayerPrivateNextDrawableLocked(v19, (CAMetalDrawable **)v27, 0);
  id v23 = v27[0];
  if (v27[0])
  {
    [v27[0] setTargetTimestamp:v20];
    [v27[0] setTargetSamplingTimestamp:v15];
    [v27[0] setTargetPresentationTimestamp:v14];
    [v27[0] setPresentDeadline:v16 + v13];
    objc_msgSend(v27[0], "setPreferredLatency:", v11 * (float)(v26 * (float)v6), v11 * (double)v6);
    [v27[0] setHasExplicitDeadlines:1];
    LODWORD(v24) = v21;
    [v27[0] setClientPreferredLatency:v24];
    id v23 = v27[0];
  }
  uint64_t v25 = [(CAMetalLayer *)v19 shimDrawable:v23];
  os_unfair_lock_unlock(v22);
  if (v25)
  {
    objc_msgSend((id)objc_msgSend(*(id *)(a1 + 256), "delegate"), "metalDisplayLink:needsUpdate:", *(void *)(a1 + 256), +[CAMetalDisplayLinkUpdate updateWithDrawable:targetTimestamp:targetPresentationTimestamp:](CAMetalDisplayLinkUpdate, "updateWithDrawable:targetTimestamp:targetPresentationTimestamp:", v25, CATimeWithHostTime(*(void *)(a1 + 288)), v14));
    *a2 = *(void *)(a1 + 288) - *(void *)(a1 + 280);
    a2[1] = CAHostTimeWithTime(v12);
    a2[2] = *(void *)(a1 + 288);
    a2[3] = CAHostTimeWithTime(v14);
  }
  else
  {
    kdebug_trace();
  }
}

void sub_1847F96D8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void CA::Display::MetalLinkItem::get_link(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  v5[5] = *MEMORY[0x1E4F143B8];
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = ___ZN2CA7Display13MetalLinkItem8get_linkEP11__CFRunLoopPKN1X4ListIPK10__CFStringEE_block_invoke;
  v5[3] = &__block_descriptor_40_e8_B16__0Q8l;
  v5[4] = a1;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = ___ZN2CA7Display13MetalLinkItem8get_linkEP11__CFRunLoopPKN1X4ListIPK10__CFStringEE_block_invoke_2;
  v4[3] = &__block_descriptor_40_e16_C16__0r____QQI_8l;
  v4[4] = a1;
  CA::Display::DisplayLink::get_link(a4, *(void *)(a1 + 16), a2, a3, (uint64_t)v5, (uint64_t)v4);
}

BOOL ___ZN2CA7Display13MetalLinkItem8get_linkEP11__CFRunLoopPKN1X4ListIPK10__CFStringEE_block_invoke(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 32) == a2;
}

uint64_t ___ZN2CA7Display13MetalLinkItem8get_linkEP11__CFRunLoopPKN1X4ListIPK10__CFStringEE_block_invoke_2(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  if (mach_absolute_time() - v3 > v4 >> 1) {
    return 3;
  }
  if (CAMetalLayerShouldDispatchLink(*(CAMetalLayer **)(v2 + 320))) {
    return 0;
  }
  return 2;
}

void ___ZN2CA7Display13MetalLinkItem8get_linkEP11__CFRunLoopPKN1X4ListIPK10__CFStringEE_block_invoke_3(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (!present_on_finish_enabled(*(_CAImageQueue **)(*(void *)(*(void *)(*(void *)(v3 + 320) + 32) + 16)
                                                    + 48)))
  {
    unint64_t v4 = (os_unfair_lock_s *)(v3 + 8);
    os_unfair_lock_lock((os_unfair_lock_t)(v3 + 8));
    uint64_t v5 = *(void *)(v3 + 16);
    char v6 = CA::Display::DisplayTimingsControl::server_triple_buffered((os_unfair_lock_s *)(v5 + 464));
    uint64_t v7 = 528;
    if ((*(unsigned char *)(v5 + 697) & 8) == 0) {
      uint64_t v7 = 496;
    }
    *(void *)(a2 + 8) += CAHostTimeWithTime(*(double *)(v5 + v7)) << v6;
    os_unfair_lock_unlock(v4);
  }
}

void sub_1847F9A2C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t CA::Display::MetalLinkItem::needs_update_link(CA::Display::MetalLinkItem *this)
{
  uint64_t v1 = *((void *)this + 40);
  if (v1)
  {
    uint64_t v2 = *(void *)(*(void *)(*(void *)(v1 + 32) + 16) + 48);
    if (v2)
    {
      uint64_t result = *(unsigned int *)(*(void *)(v2 + 24) + 24);
      if (!result) {
        return result;
      }
      if (result != *(_DWORD *)(*((void *)this + 2) + 104))
      {
        uint64_t v5 = (id *)*((void *)CADisplayLookupFromDisplayId(result) + 1);
        os_unfair_lock_lock((os_unfair_lock_t)this + 2);
        CA::Display::DisplayLinkItem::hot_swap_display(this, v5);
        os_unfair_lock_unlock((os_unfair_lock_t)this + 2);
        CA::Display::DisplayLinkItem::set_preferred_fps_range_locked(this, *(CAFrameRateRange *)((char *)this + 76), 0);
        return 1;
      }
    }
  }
  return 0;
}

void sub_1847F9AEC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void *CADisplayLookupFromDisplayId(int a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v2 = +[CADisplay displays];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v3 = [v2 countByEnumeratingWithState:&v10 objects:v9 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v11;
LABEL_3:
    uint64_t v6 = 0;
    while (1)
    {
      if (*(void *)v11 != v5) {
        objc_enumerationMutation(v2);
      }
      uint64_t v7 = *(void **)(*((void *)&v10 + 1) + 8 * v6);
      if ([v7 displayId] == a1) {
        break;
      }
      if (v4 == ++v6)
      {
        uint64_t v4 = [v2 countByEnumeratingWithState:&v10 objects:v9 count:16];
        if (v4) {
          goto LABEL_3;
        }
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    if (CADisplayGetDummyDisplay(void)::once != -1) {
      dispatch_once(&CADisplayGetDummyDisplay(void)::once, &__block_literal_global_894);
    }
    return (void *)CADisplayGetDummyDisplay(void)::dummy_display;
  }
  return v7;
}

id CA::Display::DisplayLinkItem::hot_swap_display(id this, id *a2)
{
  id v2 = (id *)*((void *)this + 2);
  if (v2 != a2)
  {
    uint64_t v4 = this;

    this = a2[10];
    v4[2] = a2;
  }
  return this;
}

CALocalDisplay *___ZL24CADisplayGetDummyDisplayv_block_invoke()
{
  uint64_t result = +[CALocalDisplay displayWithDisplayId:0 name:@"Dummy" deviceName:@"Dummy" update:&__block_literal_global_901 timings:&__block_literal_global_904];
  CADisplayGetDummyDisplay(void)::dummy_display = (uint64_t)result;
  return result;
}

uint64_t ___ZL24CADisplayGetDummyDisplayv_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(a3 + 4) = 1;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = CAHostTimeWithTime(0.0166666667);
  return 1;
}

uint64_t ___ZL24CADisplayGetDummyDisplayv_block_invoke_2(uint64_t a1, uint64_t a2, int64x2_t *a3)
{
  a3[6].i64[0] = 0x3F91111111111111;
  a3[5] = vdupq_n_s64(0x3F91111111111111uLL);
  a3[6].i64[1] = 0x100000001;
  return 1;
}

void sub_1847F9E48(_Unwind_Exception *a1)
{
}

void ___ZL21local_display_enabledv_block_invoke()
{
  local_display_enabled(void)::enabled = +[CAWindowServer serverIfRunning] == 0;
  if (CADeviceHasInternalBuild::once[0] != -1) {
    dispatch_once(CADeviceHasInternalBuild::once, &__block_literal_global_153);
  }
  if (CADeviceHasInternalBuild::internal)
  {
    id v0 = getenv("CA_ENABLE_LOCAL_DISPLAY");
    if (v0) {
      local_display_enabled(void)::enabled = atoi(v0) == 1;
    }
  }
}

void sub_1847FA1A8(_Unwind_Exception *a1)
{
  CA::Display::Display::~Display(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN2CA7Display12LocalDisplayC2EPK10__CFStringS4_jU13block_pointerFbP14CALocalDisplayP18CALocalDisplayInfoEU13block_pointerFbS6_P21CALocalDisplayTimingsE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t ___ZN2CA7Display12LocalDisplayC2EPK10__CFStringS4_jU13block_pointerFbP14CALocalDisplayP18CALocalDisplayInfoEU13block_pointerFbS6_P21CALocalDisplayTimingsE_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void CA::Display::LocalDisplay::~LocalDisplay(CFTypeRef *this)
{
  CA::Display::Display::~Display(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

unint64_t CA::Display::MetalLinkItem::compute_target_timestamp_delta(CA::Display::MetalLinkItem *this)
{
  uint64_t v2 = *((int *)this + 14);
  unint64_t v3 = *((void *)this + 37) * v2;
  uint64_t v4 = *((void *)this + 2);
  if (*(unsigned char *)(v4 + 697)) {
    unsigned int v5 = 2;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5 <= *(_DWORD *)(v4 + 520)) {
    unsigned int v5 = *(_DWORD *)(v4 + 520);
  }
  if (v5 <= *(_DWORD *)(v4 + 552)) {
    unsigned int v5 = *(_DWORD *)(v4 + 552);
  }
  if (*((float *)this + 82) <= 2.0 && BYTE12(xmmword_1EB2ACC70) == 0 && v2 == v5) {
    float v8 = 2.0;
  }
  else {
    float v8 = *((float *)this + 82);
  }
  float v9 = (float)v3;
  char v10 = CA::Display::DisplayTimingsControl::server_triple_buffered((os_unfair_lock_s *)(v4 + 464));
  uint64_t v11 = 528;
  if ((*(unsigned char *)(v4 + 697) & 8) == 0) {
    uint64_t v11 = 496;
  }
  unint64_t v12 = CAHostTimeWithTime(*(double *)(v4 + v11)) << v10;
  for (unint64_t i = (unint64_t)(float)(v8 * v9); v8 < 3.0; unint64_t i = (unint64_t)(float)(v8 * v9))
  {
    if (v12 <= i >> 1) {
      break;
    }
    if (v12 - (i >> 1) <= i >> 6) {
      break;
    }
    float v8 = v8 + 1.0;
  }
  *((void *)this + 42) = i;
  if (present_on_finish_enabled(*(_CAImageQueue **)(*(void *)(*(void *)(*((void *)this + 40) + 32) + 16)
                                                   + 48)))
  {
    float v8 = v8 + 1.0;
    uint64_t v14 = *((void *)this + 2);
    char v15 = CA::Display::DisplayTimingsControl::server_triple_buffered((os_unfair_lock_s *)(v14 + 464));
    uint64_t v16 = 528;
    if ((*(unsigned char *)(v14 + 697) & 8) == 0) {
      uint64_t v16 = 496;
    }
    *((void *)this + 42) += CAHostTimeWithTime(*(double *)(v14 + v16)) << v15;
  }
  uint64_t v17 = *((void *)this + 40);
  unint64_t v18 = (unint64_t)(float)(v8 + 1.0);
  unint64_t v19 = (os_unfair_lock_s *)(*(void *)(v17 + 32) + 8);
  os_unfair_lock_lock(v19);
  uint64_t v20 = *(void *)(v17 + 32);
  *(_DWORD *)(v20 + 136) = v18;
  uint64_t v21 = *(void *)(*(void *)(v20 + 16) + 48);
  if (v21) {
    *(unsigned char *)(*(void *)(v21 + 24) + 95) = 5 - v18;
  }
  os_unfair_lock_unlock(v19);
  *((void *)this + 43) = i - v12;
  if (i - v12 >= v3) {
    return v3;
  }
  else {
    return i - v12;
  }
}

void CA::Display::MetalLinkItem::invalidate(CA::Display::MetalLinkItem *this)
{
  CA::Display::DisplayLinkItem::invalidate(this);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 136));
  CAMetalLayerSetMetalLinkToken(*((void *)this + 40), 0);
  CFRelease(*((CFTypeRef *)this + 40));
  *((void *)this + 40) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 136));
  os_unfair_lock_lock(&CA::Display::MetalLinkItem::_list_lock);
  unint64_t v3 = CA::Display::MetalLinkItem::_list;
  unint64_t v2 = qword_1E8F83ED0;
  if (CA::Display::MetalLinkItem::_list != (_UNKNOWN *)qword_1E8F83ED0)
  {
    uint64_t v4 = (CA::Display::MetalLinkItem **)CA::Display::MetalLinkItem::_list;
    while (*v4 != this)
    {
      if (++v4 == (CA::Display::MetalLinkItem **)qword_1E8F83ED0) {
        goto LABEL_10;
      }
    }
    if ((CA::Display::MetalLinkItem **)qword_1E8F83ED0 != v4 + 1)
    {
      memmove(v4, v4 + 1, qword_1E8F83ED0 - (void)(v4 + 1));
      unint64_t v3 = CA::Display::MetalLinkItem::_list;
      unint64_t v2 = qword_1E8F83ED0;
    }
    if (v2 <= (unint64_t)v3) {
      __assert_rtn("pop_back", "x-small-vector.h", 410, "_end > _begin && \"pop_back on empty container\"");
    }
    qword_1E8F83ED0 = v2 - 8;
  }
LABEL_10:

  os_unfair_lock_unlock(&CA::Display::MetalLinkItem::_list_lock);
}

void sub_1847FA4F4(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void CA::Display::MetalLinkItem::~MetalLinkItem(CA::Display::MetalLinkItem *this)
{
  CA::Display::DisplayLinkItem::~DisplayLinkItem(this);

  JUMPOUT(0x185323DC0);
}

uint64_t CA::Display::DisplayLinkItem::display_minimum_frame_duration(os_unfair_lock_s *this)
{
  unint64_t v2 = this + 2;
  os_unfair_lock_lock(this + 2);
  uint64_t v3 = *(void *)&this[4]._os_unfair_lock_opaque;
  if (*(unsigned char *)(v3 + 697)) {
    unsigned int v4 = 2;
  }
  else {
    unsigned int v4 = 1;
  }
  if (v4 <= *(_DWORD *)(v3 + 520)) {
    unsigned int v4 = *(_DWORD *)(v3 + 520);
  }
  unsigned int v5 = *(_DWORD *)(v3 + 552);
  if (v4 <= v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = v4;
  }
  os_unfair_lock_unlock(v2);
  return v6;
}

void sub_1847FA84C(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v2);
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1847FACE4(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(&CA::Display::MetalLinkItem::_list_lock);
  CA::Display::DisplayLinkItem::~DisplayLinkItem(v1);
  _Unwind_Resume(a1);
}

void sub_1847FB3E8(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void CA_ABORT_ON_NON_MAIN_THREAD_DEFERRED_DISPLAY_LINK_ACTION(void)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    id v0 = x_log_category_windowserver;
    if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v1 = 0;
      _os_log_impl(&dword_184668000, v0, OS_LOG_TYPE_ERROR, "Unsupported use of CADisplayLink SPI off the main thread.", v1, 2u);
    }
  }
}

void sub_1847FB690(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1847FB868(_Unwind_Exception *exception_object)
{
}

CFArrayRef CA::Display::anonymous namespace'::copy_mode_list_to_array(void *a1)
{
  uint64_t v1 = a1;
  v9[1] = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    size_t v4 = 0;
    CFIndex v2 = 0;
    goto LABEL_8;
  }
  CFIndex v2 = 0;
  uint64_t v3 = a1;
  do
  {
    ++v2;
    uint64_t v3 = (void *)v3[1];
  }
  while (v3);
  size_t v4 = 8 * v2;
  if ((unint64_t)(8 * v2) <= 0x1000)
  {
LABEL_8:
    MEMORY[0x1F4188790](a1);
    unsigned int v5 = (char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v5, v4);
    if (!v2) {
      return CFArrayCreate(0, (const void **)v5, 0, MEMORY[0x1E4F1D510]);
    }
    goto LABEL_9;
  }
  unsigned int v5 = (char *)malloc_type_malloc(8 * v2, 0xD2352181uLL);
  if (!v2) {
    return CFArrayCreate(0, (const void **)v5, 0, MEMORY[0x1E4F1D510]);
  }
LABEL_9:
  for (uint64_t i = 0; i != v2; ++i)
  {
    *(void *)&v5[8 * i] = *v1;
    uint64_t v1 = (void *)v1[1];
  }
  CFArrayRef v6 = CFArrayCreate(0, (const void **)v5, v2, MEMORY[0x1E4F1D510]);
  if (v4 > 0x1000) {
    free(v5);
  }
  return v6;
}

void ___ZN2CA7Display11DisplayLink30dispatch_deferred_display_linkEy_block_invoke(uint64_t a1)
{
  CA::Display::DisplayLink::callback(*(void *)(*(void *)(a1 + 32) + 208), *(void *)(*(void *)(a1 + 32) + 216), *(void *)(*(void *)(a1 + 32) + 224), 0, *(void *)(a1 + 32));
  CFIndex v2 = *(atomic_uint **)(a1 + 32);
  if (v2)
  {
    CA::Display::DisplayLink::unref(v2);
  }
}

float CADisplayGetCurrentHeadroom(uint32_t a1)
{
  pthread_mutex_lock(&_edr_states_lock);
  CFIndex v2 = edr_state_for_display(a1);
  uint64_t v3 = v2;
  if (v2)
  {
    os_unfair_lock_lock(v2 + 1);
    size_t v4 = *(unsigned int **)&v3[4]._os_unfair_lock_opaque;
    if (v4)
    {
      unsigned int v5 = atomic_load(v4);
      float v6 = *(float *)&v5;
    }
    else
    {
      float v6 = 1.0;
    }
    os_unfair_lock_unlock(v3 + 1);
  }
  else
  {
    float v6 = 1.0;
  }
  pthread_mutex_unlock(&_edr_states_lock);
  return v6;
}

void sub_1847FBAAC(_Unwind_Exception *a1)
{
}

float CADisplayGetReferenceHeadroom(uint32_t a1)
{
  pthread_mutex_lock(&_edr_states_lock);
  CFIndex v2 = edr_state_for_display(a1);
  uint64_t v3 = v2;
  if (v2)
  {
    os_unfair_lock_lock(v2 + 1);
    uint64_t v4 = *(void *)&v3[4]._os_unfair_lock_opaque;
    if (v4)
    {
      unsigned int v5 = atomic_load((unsigned int *)(v4 + 8));
      float v6 = *(float *)&v5;
    }
    else
    {
      float v6 = 1.0;
    }
    os_unfair_lock_unlock(v3 + 1);
  }
  else
  {
    float v6 = 1.0;
  }
  pthread_mutex_unlock(&_edr_states_lock);
  return v6;
}

void sub_1847FBB50(_Unwind_Exception *a1)
{
}

unsigned char *CADisplayPrintDisplays()
{
  uint64_t v513 = *MEMORY[0x1E4F143B8];
  id v476 = objc_alloc_init(MEMORY[0x1E4F28B28]);
  memset(v487, 0, sizeof(v487));
  long long v509 = 0u;
  long long v510 = 0u;
  long long v511 = 0u;
  long long v512 = 0u;
  obuint64_t j = +[CADisplay displays];
  uint64_t v479 = [obj countByEnumeratingWithState:&v509 objects:v508 count:16];
  if (v479)
  {
    uint64_t v478 = *(void *)v510;
    id v0 = @"unknown";
    do
    {
      for (uint64_t i = 0; i != v479; ++i)
      {
        if (*(void *)v510 != v478) {
          objc_enumerationMutation(obj);
        }
        CFIndex v2 = *(void **)(*((void *)&v509 + 1) + 8 * i);
        uint64_t v3 = [v2 displayId];
        objc_msgSend((id)objc_msgSend(v2, "name"), "UTF8String");
        objc_msgSend((id)objc_msgSend(v2, "deviceName"), "UTF8String");
        x_stream_printf((uint64_t)v487, "%d: %s (%s)\n", v4, v5, v6, v7, v8, v9, v3);
        if (!objc_msgSend((id)objc_msgSend(v2, "availableModes"), "count"))
        {
          int v87 = "\toffline\n";
LABEL_146:
          x_stream_printf((uint64_t)v487, v87, v10, v11, v12, v13, v14, v15, v468);
          continue;
        }
        uint64_t v16 = [v2 seed];
        x_stream_printf((uint64_t)v487, "\tseed: %u\n", v17, v18, v19, v20, v21, v22, v16);
        uint64_t v23 = [v2 connectionSeed];
        x_stream_printf((uint64_t)v487, "\tconnectionSeed: %u\n", v24, v25, v26, v27, v28, v29, v23);
        [v2 bounds];
        x_stream_printf((uint64_t)v487, "\tbounds: [%g %g %g %g]\n", v30, v31, v32, v33, v34, v35, v36);
        [v2 frame];
        x_stream_printf((uint64_t)v487, "\tframe: [%g %g %g %g]\n", v37, v38, v39, v40, v41, v42, v43);
        [v2 physicalSize];
        x_stream_printf((uint64_t)v487, "\tphysicalSize: %g in x %g in\n", v44, v45, v46, v47, v48, v49, v50);
        [v2 nativeSize];
        x_stream_printf((uint64_t)v487, "\tnativeSize: %d x %d pixels\n", v52, v53, v54, v55, v56, v57, (int)v51);
        [v2 logicalScale];
        uint64_t v59 = v58;
        [v2 minimumLogicalScale];
        [v2 maximumLogicalScale];
        x_stream_printf((uint64_t)v487, "\tlogicalScale: %g x %g (min %g, max %g)\n", v60, v61, v62, v63, v64, v65, v59);
        uint64_t v66 = [v2 pointScale];
        x_stream_printf((uint64_t)v487, "\tpointScale: %u\n", v67, v68, v69, v70, v71, v72, v66);
        int v73 = (void *)[v2 stateControl];
        v481 = v2;
        uint32_t v480 = v3;
        if (v73)
        {
          __int16 v74 = v73;
          unint64_t v75 = [v73 displayState];
          uint64_t v76 = [v74 powerState];
          unint64_t v77 = [v74 targetDisplayState];
          uint64_t v78 = [v74 targetPowerState];
          if (v75 <= 3) {
            id v0 = off_1E527CB50[v75];
          }
          uint64_t v79 = [(__CFString *)v0 cStringUsingEncoding:1];
          uint64_t v86 = v79;
          if (v77 == v75)
          {
            x_stream_printf((uint64_t)v487, "\tdisplayState: %s\n", v80, v81, v82, v83, v84, v85, v79);
            CFIndex v2 = v481;
          }
          else
          {
            CFStringRef v88 = @"unknown";
            CFIndex v2 = v481;
            if (v77 <= 3) {
              CFStringRef v88 = off_1E527CB50[v77];
            }
            [(__CFString *)v88 cStringUsingEncoding:1];
            x_stream_printf((uint64_t)v487, "\tdisplayState: %s -> %s\n", v89, v90, v91, v92, v93, v94, v86);
          }
          if (v76 == 1) {
            __int16 v95 = @"on";
          }
          else {
            __int16 v95 = @"unknown";
          }
          if (v76) {
            CFStringRef v96 = v95;
          }
          else {
            CFStringRef v96 = @"off";
          }
          uint64_t v97 = [(__CFString *)v96 cStringUsingEncoding:1];
          uint64_t v104 = v97;
          if (v78 == v76)
          {
            x_stream_printf((uint64_t)v487, "\tpowerState: %s\n", v98, v99, v100, v101, v102, v103, v97);
          }
          else
          {
            if (v78 == 1) {
              CFStringRef v105 = @"on";
            }
            else {
              CFStringRef v105 = @"unknown";
            }
            if (v78) {
              CFDictionaryRef v106 = v105;
            }
            else {
              CFDictionaryRef v106 = @"off";
            }
            [(__CFString *)v106 cStringUsingEncoding:1];
            x_stream_printf((uint64_t)v487, "\tpowerState: %s -> %s\n", v107, v108, v109, v110, v111, v112, v104);
          }
          uint64_t v113 = [v74 _copyAllPowerAssertionInfo];
          if (v113)
          {
            uint64_t v120 = (void *)v113;
            x_stream_printf((uint64_t)v487, "\tpowerAssertions:\n%s", v114, v115, v116, v117, v118, v119, v113);
            free(v120);
          }
        }
        __int16 v121 = (void *)[v2 transportType];
        if (v121)
        {
          uint64_t v122 = [v121 UTF8String];
          x_stream_printf((uint64_t)v487, "\ttransportType: %s\n", v123, v124, v125, v126, v127, v128, v122);
        }
        uint64_t v129 = (__CFString *)[v2 nativeOrientation];
        if (v129 == @"rot0")
        {
          uint64_t v136 = 0;
        }
        else if (v129 == @"rot90")
        {
          uint64_t v136 = 90;
        }
        else if (v129 == @"rot180")
        {
          uint64_t v136 = 180;
        }
        else
        {
          uint64_t v136 = 270;
        }
        x_stream_printf((uint64_t)v487, "\tnativeOrientation: %d\n", v130, v131, v132, v133, v134, v135, v136);
        BOOL v137 = (__CFString *)[v2 currentOrientation];
        if (v137 == @"rot0")
        {
          uint64_t v144 = 0;
        }
        else if (v137 == @"rot90")
        {
          uint64_t v144 = 90;
        }
        else if (v137 == @"rot180")
        {
          uint64_t v144 = 180;
        }
        else
        {
          uint64_t v144 = 270;
        }
        x_stream_printf((uint64_t)v487, "\tcurrentOrientation: %d\n", v138, v139, v140, v141, v142, v143, v144);
        uint64_t v145 = objc_msgSend((id)objc_msgSend(v2, "currentMode"), "width");
        objc_msgSend((id)objc_msgSend(v2, "currentMode"), "height");
        objc_msgSend((id)objc_msgSend(v2, "currentMode"), "refreshRate");
        objc_msgSend((id)objc_msgSend(v2, "currentMode"), "isVirtual");
        objc_msgSend((id)objc_msgSend(v2, "currentMode"), "isVRR");
        objc_msgSend((id)objc_msgSend((id)objc_msgSend(v2, "currentMode"), "colorMode"), "UTF8String");
        objc_msgSend((id)objc_msgSend(v2, "currentMode"), "bitDepth");
        objc_msgSend((id)objc_msgSend(v2, "currentMode"), "isHighBandwidth");
        objc_msgSend((id)objc_msgSend(v2, "currentMode"), "preferredScale");
        x_stream_printf((uint64_t)v487, "\tcurrentMode: %d x %d, %g hz,%s%s %s, %u-bit%s, %lux\n", v146, v147, v148, v149, v150, v151, v145);
        [v2 refreshRate];
        x_stream_printf((uint64_t)v487, "\trefreshRate: %g Hz\n", v153, v154, v155, v156, v157, v158, COERCE__INT64(1.0 / v152));
        [v2 heartbeatRate];
        x_stream_printf((uint64_t)v487, "\theartbeatRate: %g Hz\n", v160, v161, v162, v163, v164, v165, COERCE__INT64(1.0 / v159));
        uint64_t v166 = [v2 minimumFrameDuration];
        x_stream_printf((uint64_t)v487, "\tminimumFrameDuration: %d\n", v167, v168, v169, v170, v171, v172, v166);
        uint64_t v173 = objc_msgSend((id)objc_msgSend(v2, "preferredMode"), "width");
        objc_msgSend((id)objc_msgSend(v2, "preferredMode"), "height");
        objc_msgSend((id)objc_msgSend(v2, "preferredMode"), "refreshRate");
        objc_msgSend((id)objc_msgSend(v2, "preferredMode"), "isVirtual");
        objc_msgSend((id)objc_msgSend(v2, "preferredMode"), "isVRR");
        objc_msgSend((id)objc_msgSend((id)objc_msgSend(v2, "preferredMode"), "colorMode"), "UTF8String");
        objc_msgSend((id)objc_msgSend(v2, "preferredMode"), "bitDepth");
        objc_msgSend((id)objc_msgSend(v2, "preferredMode"), "isHighBandwidth");
        objc_msgSend((id)objc_msgSend(v2, "preferredMode"), "preferredScale");
        x_stream_printf((uint64_t)v487, "\tpreferredMode: %d x %d, %g hz,%s%s %s, %u-bit%s, %lux\n", v174, v175, v176, v177, v178, v179, v173);
        x_stream_printf((uint64_t)v487, "\tavailable modes:\n", v180, v181, v182, v183, v184, v185, v469);
        long long v506 = 0u;
        long long v507 = 0u;
        long long v504 = 0u;
        long long v505 = 0u;
        id v482 = (id)[v2 availableModes];
        uint64_t v484 = [v482 countByEnumeratingWithState:&v504 objects:v503 count:16];
        if (v484)
        {
          uint64_t v485 = 0;
          uint64_t v483 = *(void *)v505;
          do
          {
            for (uint64_t j = 0; j != v484; ++j)
            {
              if (*(void *)v505 != v483) {
                objc_enumerationMutation(v482);
              }
              v187 = *(void **)(*((void *)&v504 + 1) + 8 * j);
              [v187 width];
              [v187 height];
              [v187 refreshRate];
              [v187 isVirtual];
              [v187 isVRR];
              objc_msgSend((id)objc_msgSend(v187, "colorMode"), "UTF8String");
              [v187 bitDepth];
              [v187 isHighBandwidth];
              [v187 preferredScale];
              x_stream_printf((uint64_t)v487, "\t\t%d: %d x %d, %g Hz,%s%s %s, %u-bit%s, %lux", v188, v189, v190, v191, v192, v193, v485 + j);
              if ([v187 maximumSourceWidth])
              {
                uint64_t v194 = [v187 maximumSourceWidth];
                x_stream_printf((uint64_t)v487, ", maxWidth:%d", v195, v196, v197, v198, v199, v200, v194);
              }
              if ([v187 maximumSourceHeight])
              {
                uint64_t v201 = [v187 maximumSourceHeight];
                x_stream_printf((uint64_t)v487, ", maxHeight:%d", v202, v203, v204, v205, v206, v207, v201);
              }
              if ([v187 maximumSourceBandwidth])
              {
                uint64_t v214 = [v187 maximumSourceBandwidth];
                x_stream_printf((uint64_t)v487, ", maxBandwidth:%d", v215, v216, v217, v218, v219, v220, v214);
              }
              x_stream_printf((uint64_t)v487, "\n", v208, v209, v210, v211, v212, v213, v470);
            }
            uint64_t v485 = (v485 + j);
            uint64_t v484 = [v482 countByEnumeratingWithState:&v504 objects:v503 count:16];
          }
          while (v484);
        }
        v221 = (void *)[v481 uniqueId];
        if (v221)
        {
          uint64_t v222 = [v221 UTF8String];
          x_stream_printf((uint64_t)v487, "\tUUID: %s\n", v223, v224, v225, v226, v227, v228, v222);
        }
        v229 = (void *)[v481 containerId];
        if (v229)
        {
          uint64_t v230 = [v229 UTF8String];
          x_stream_printf((uint64_t)v487, "\tcontainerID: %s\n", v231, v232, v233, v234, v235, v236, v230);
        }
        [v481 latency];
        if (v237 != 0.0)
        {
          [v481 latency];
          x_stream_printf((uint64_t)v487, "\tlatency: %g\n", v238, v239, v240, v241, v242, v243, v244);
        }
        unint64_t v245 = [v481 displayType];
        __int16 v252 = "unknown";
        if (v245 <= 4) {
          __int16 v252 = off_1E52727E8[v245];
        }
        x_stream_printf((uint64_t)v487, "\tdisplayType: %s\n", v246, v247, v248, v249, v250, v251, (uint64_t)v252);
        if ([v481 supportsExtendedColors]) {
          x_stream_printf((uint64_t)v487, "\tsupportsExtendedColors: YES\n", v253, v254, v255, v256, v257, v258, v471);
        }
        if ([v481 isOverscanned])
        {
          x_stream_printf((uint64_t)v487, "\toverscanned: YES\n", v259, v260, v261, v262, v263, v264, v471);
          [v481 safeBounds];
          x_stream_printf((uint64_t)v487, "\tsafeBounds: [%g %g %g %g]\n", v265, v266, v267, v268, v269, v270, v271);
          [v481 overscanAmounts];
          x_stream_printf((uint64_t)v487, "\toverscanAmounts: [%g %g]\n", v272, v273, v274, v275, v276, v277, v278);
          uint64_t v279 = objc_msgSend((id)objc_msgSend(v481, "overscanAdjustment"), "UTF8String");
          x_stream_printf((uint64_t)v487, "\toverscanAdjustment: %s\n", v280, v281, v282, v283, v284, v285, v279);
        }
        if ([v481 isCloned]) {
          x_stream_printf((uint64_t)v487, "\tcloned: YES\n", v286, v287, v288, v289, v290, v291, v471);
        }
        if ([v481 isCloning]) {
          x_stream_printf((uint64_t)v487, "\tcloning: YES\n", v292, v293, v294, v295, v296, v297, v471);
        }
        if ([v481 isCloningSupported]) {
          x_stream_printf((uint64_t)v487, "\tcloningSupported: YES\n", v298, v299, v300, v301, v302, v303, v471);
        }
        v304 = v481;
        if (![v481 displayType])
        {
          [v481 autoLuminanceBoost];
          x_stream_printf((uint64_t)v487, "\tautoLuminanceBoost: %f\n", v306, v307, v308, v309, v310, v311, COERCE__INT64(v305));
        }
        if ([v481 displayType] == 1 && objc_msgSend((id)objc_msgSend(v481, "currentMode"), "width"))
        {
          v312 = (void *)[v481 preferences];
          if (v312)
          {
            v313 = v312;
            v314 = (void *)[v312 preferredHdrMode];
            if (v314) {
              v315 = (const char *)[v314 UTF8String];
            }
            else {
              v315 = "Unspecified";
            }
            [v313 matchContent];
            x_stream_printf((uint64_t)v487, "\tpreferences: preferredHdrMode - %s, contentMatch - %s\n", v316, v317, v318, v319, v320, v321, (uint64_t)v315);
          }
          uint64_t v322 = [v481 supportedHDRModes];
          if (v322)
          {
            v329 = (void *)v322;
            x_stream_printf((uint64_t)v487, "\tsupportedHDRModes: ", v323, v324, v325, v326, v327, v328, v471);
            long long v501 = 0u;
            long long v502 = 0u;
            long long v499 = 0u;
            long long v500 = 0u;
            uint64_t v330 = [v329 countByEnumeratingWithState:&v499 objects:v498 count:16];
            if (v330)
            {
              uint64_t v337 = v330;
              uint64_t v338 = *(void *)v500;
              do
              {
                for (uint64_t k = 0; k != v337; ++k)
                {
                  if (*(void *)v500 != v338) {
                    objc_enumerationMutation(v329);
                  }
                  uint64_t v340 = [*(id *)(*((void *)&v499 + 1) + 8 * k) UTF8String];
                  x_stream_printf((uint64_t)v487, "%s ", v341, v342, v343, v344, v345, v346, v340);
                }
                uint64_t v337 = [v329 countByEnumeratingWithState:&v499 objects:v498 count:16];
              }
              while (v337);
            }
            x_stream_printf((uint64_t)v487, "\n", v331, v332, v333, v334, v335, v336, v472);
          }
          uint64_t v347 = [v481 preferredHDRModes];
          if (v347)
          {
            v354 = (void *)v347;
            x_stream_printf((uint64_t)v487, "\tpreferredHDRModes: ", v348, v349, v350, v351, v352, v353, v471);
            long long v496 = 0u;
            long long v497 = 0u;
            long long v494 = 0u;
            long long v495 = 0u;
            uint64_t v355 = [v354 countByEnumeratingWithState:&v494 objects:v493 count:16];
            if (v355)
            {
              uint64_t v362 = v355;
              uint64_t v363 = *(void *)v495;
              do
              {
                for (uint64_t m = 0; m != v362; ++m)
                {
                  if (*(void *)v495 != v363) {
                    objc_enumerationMutation(v354);
                  }
                  uint64_t v365 = [*(id *)(*((void *)&v494 + 1) + 8 * m) UTF8String];
                  x_stream_printf((uint64_t)v487, "%s ", v366, v367, v368, v369, v370, v371, v365);
                }
                uint64_t v362 = [v354 countByEnumeratingWithState:&v494 objects:v493 count:16];
              }
              while (v362);
            }
            x_stream_printf((uint64_t)v487, "\n", v356, v357, v358, v359, v360, v361, v473);
          }
          uint64_t v372 = [v481 allowedHDRModes];
          if (v372)
          {
            v379 = (void *)v372;
            x_stream_printf((uint64_t)v487, "\tallowedHDRModes: ", v373, v374, v375, v376, v377, v378, v471);
            long long v491 = 0u;
            long long v492 = 0u;
            long long v489 = 0u;
            long long v490 = 0u;
            uint64_t v380 = [v379 countByEnumeratingWithState:&v489 objects:v488 count:16];
            if (v380)
            {
              uint64_t v387 = v380;
              uint64_t v388 = *(void *)v490;
              do
              {
                for (uint64_t n = 0; n != v387; ++n)
                {
                  if (*(void *)v490 != v388) {
                    objc_enumerationMutation(v379);
                  }
                  uint64_t v390 = [*(id *)(*((void *)&v489 + 1) + 8 * n) UTF8String];
                  x_stream_printf((uint64_t)v487, "%s ", v391, v392, v393, v394, v395, v396, v390);
                }
                uint64_t v387 = [v379 countByEnumeratingWithState:&v489 objects:v488 count:16];
              }
              while (v387);
            }
            x_stream_printf((uint64_t)v487, "\n", v381, v382, v383, v384, v385, v386, v474);
          }
          v397 = (void *)[v481 productName];
          if (v397)
          {
            uint64_t v398 = [v397 UTF8String];
            x_stream_printf((uint64_t)v487, "\tproductName: %s\n", v399, v400, v401, v402, v403, v404, v398);
          }
          if ([v481 isForceFixedRateLinksEnabled]) {
            x_stream_printf((uint64_t)v487, "\tfixedRateLinksEnabled: YES\n", v405, v406, v407, v408, v409, v410, v471);
          }
          v304 = v481;
          uint64_t v411 = [v481 externalDisplayAttributes];
          if (v411)
          {
            v418 = (void *)v411;
            x_stream_printf((uint64_t)v487, "\tdisplay attributes:\n", v412, v413, v414, v415, v416, v417, v471);
            unint64_t v425 = [v418 dolbyVision] - 1;
            v426 = "\t\tDolbyVision: none\n";
            if (v425 <= 2) {
              v426 = off_1E5272810[v425];
            }
            x_stream_printf((uint64_t)v487, v426, v419, v420, v421, v422, v423, v424, v475);
            uint64_t v427 = [v418 pqEOTF];
            if (v427 == 2) {
              v434 = "supported";
            }
            else {
              v434 = "unknown";
            }
            if (v427 == 1) {
              v434 = "unsupported";
            }
            x_stream_printf((uint64_t)v487, "\t\tPQ: %s\n", v428, v429, v430, v431, v432, v433, (uint64_t)v434);
            uint64_t v435 = [v418 hdrStaticMetadataType1];
            if (v435 == 2) {
              v442 = "supported";
            }
            else {
              v442 = "unknown";
            }
            if (v435 == 1) {
              v442 = "unsupported";
            }
            x_stream_printf((uint64_t)v487, "\t\tHDR Static Metadata: %s\n", v436, v437, v438, v439, v440, v441, (uint64_t)v442);
            uint64_t v443 = [v418 bt2020YCC];
            if (v443 == 2) {
              v450 = "supported";
            }
            else {
              v450 = "unknown";
            }
            if (v443 == 1) {
              v450 = "unsupported";
            }
            x_stream_printf((uint64_t)v487, "\t\tBT2020 YCC: %s\n", v444, v445, v446, v447, v448, v449, (uint64_t)v450);
            unsigned int v451 = [v418 legacyHDMIEDID];
            x_stream_printf((uint64_t)v487, "\t\tLegacy HDMI EDID: %d\n", v452, v453, v454, v455, v456, v457, v451);
            v304 = v481;
          }
        }
        uint64_t v458 = [v304 odLUTVersion];
        if (v458) {
          x_stream_printf((uint64_t)v487, "\todLUTVersion: %d\n", v459, v460, v461, v462, v463, v464, v458);
        }
        id v0 = @"unknown";
        if (![v481 displayType])
        {
          CFDictionaryRef v465 = (const __CFDictionary *)[v481 _copyDebugProperties];
          if (v465)
          {
            CFDictionaryRef v466 = v465;
            context[2] = 1;
            context[0] = CADisplayPrintDisplays::$_0::__invoke;
            context[1] = v487;
            CFDictionaryApplyFunction(v465, (CFDictionaryApplierFunction)CADisplayPrintDisplays::$_0::__invoke, context);
            CFRelease(v466);
          }
        }
        if (CADisplayGetPotentialHeadroom(v480) > 1.0)
        {
          *(double *)&uint64_t v468 = CADisplayGetCurrentHeadroom(v480);
          int v87 = "\tcurrent EDR: %g, potential EDR: %g\n";
          goto LABEL_146;
        }
      }
      uint64_t v479 = [obj countByEnumeratingWithState:&v509 objects:v508 count:16];
    }
    while (v479);
  }

  return x_stream_finish((uint64_t)v487);
}

void CADisplayPrintDisplays::$_0::__invoke(const __CFString *this, const __CFString *a2, void *a3, void *a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a3[1];
  memset(v36, 0, sizeof(v36));
  memset(v35, 0, sizeof(v35));
  CCFStringRef String = CA_CFStringGetCString(this, (char *)v36, 32);
  if (*((_DWORD *)a3 + 4) == 1) {
    uint64_t v14 = "\t";
  }
  else {
    uint64_t v14 = "\t\t";
  }
  x_stream_printf(v6, v14, v7, v8, v9, v10, v11, v12, v34);
  CFTypeID v15 = CFGetTypeID(a2);
  if (v15 == CFBooleanGetTypeID())
  {
    x_stream_printf(v6, "%s: %s\n", v16, v17, v18, v19, v20, v21, (uint64_t)CString);
  }
  else if (v15 == CFStringGetTypeID())
  {
    CA_CFStringGetCString(a2, (char *)v35, 32);
    x_stream_printf(v6, "%s: %s\n", v22, v23, v24, v25, v26, v27, (uint64_t)CString);
  }
  else if (v15 == CFDictionaryGetTypeID())
  {
    x_stream_printf(v6, "%s:\n", v28, v29, v30, v31, v32, v33, (uint64_t)CString);
    ++*((_DWORD *)a3 + 4);
    CFDictionaryApplyFunction((CFDictionaryRef)a2, (CFDictionaryApplierFunction)*a3, a3);
    --*((_DWORD *)a3 + 4);
  }
}

uint64_t CA::CG::Renderer::attached_to_drawable()
{
  return 0;
}

void CA::CG::Renderer::~Renderer(CA::CG::Renderer *this)
{
  CA::CG::Renderer::~Renderer(this);

  JUMPOUT(0x185323DC0);
}

{
  uint64_t i;
  atomic_uint *v3;
  uint64_t v4;
  uint64_t j;
  uint64_t k;

  *(void *)this = &unk_1ED02A078;
  if (*((void *)this + 1)) {
    __assert_rtn("~Renderer", "cg-renderer.cpp", 139, "!_ctx");
  }
  if (*((void *)this + 172)) {
    CGGlyphLockRelease();
  }
  for (uint64_t i = 2672; i != 4208; i += 64)
  {
    uint64_t v3 = *(atomic_uint **)((char *)this + i);
    if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
    }
  }
  uint64_t v4 = *((void *)this + 161);
  if (v4) {
    MEMORY[0x185323DA0](v4, 0x1000C803C748740);
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)this + 4184);
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)this + 2584);
  for (uint64_t j = 2352; j != 1200; j -= 192)
    CA::OGL::Mosaic::purge((CA::CG::Renderer *)((char *)this + j));
  for (uint64_t k = 792; k != -184; k -= 488)
  {
    if (*(void *)((char *)this + k)) {
      __assert_rtn("~ContextState", "ogl-context.h", 551, "!next && \"Imbalanced ContextState push/pop\"");
    }
  }
}

os_log_t ___ZN2CA2CGL11cg_perf_logEv_block_invoke()
{
  os_log_t result = os_log_create("com.apple.coreanimation", "CG.Performance");
  CA::CG::cg_perf_log(void)::log = (uint64_t)result;
  return result;
}

void CA::CG::Renderer::release_object(CA::CG::Renderer *this, const void *a2)
{
  v6[5] = *MEMORY[0x1E4F143B8];
  if (this)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&CA::CG::_released_objects_lock);
    uint64_t v3 = (void *)CA::CG::_released_objects;
    if (!CA::CG::_released_objects)
    {
      uint64_t v3 = malloc_type_malloc(0x400uLL, 0xC0040B8AA526DuLL);
      CA::CG::_released_objects = (uint64_t)v3;
    }
    uint64_t v4 = CA::CG::_released_objects_count++;
    int v5 = CA::CG::_released_objects_count;
    v3[v4] = this;
    if (v5 == 128)
    {
      CA::CG::_released_objects = 0;
      CA::CG::_released_objects_count = 0;
      os_unfair_lock_unlock((os_unfair_lock_t)&CA::CG::_released_objects_lock);
      if (CA::CG::release_queue(void)::once != -1) {
        dispatch_once(&CA::CG::release_queue(void)::once, &__block_literal_global_16);
      }
      v6[0] = MEMORY[0x1E4F143A8];
      v6[1] = 0x40000000;
      v6[2] = ___ZN2CA2CG8Renderer14release_objectEPKv_block_invoke;
      v6[3] = &__block_descriptor_tmp_455;
      v6[4] = v3;
      dispatch_async((dispatch_queue_t)CA::CG::release_queue(void)::queue, v6);
    }
    else
    {
      os_unfair_lock_unlock((os_unfair_lock_t)&CA::CG::_released_objects_lock);
    }
  }
}

void ___ZN2CA2CG8Renderer14release_objectEPKv_block_invoke(uint64_t a1)
{
  CFIndex v2 = (void *)MEMORY[0x185324A30]();
  for (uint64_t i = 0; i != 1024; i += 8)
    CFRelease(*(CFTypeRef *)(*(void *)(a1 + 32) + i));
  free(*(void **)(a1 + 32));
}

void ___ZN2CA2CG8Renderer22flush_released_objectsEv_block_invoke(uint64_t a1)
{
  CFIndex v2 = (void *)MEMORY[0x185324A30]();
  if (*(_DWORD *)(a1 + 40))
  {
    unint64_t v3 = 0;
    do
      CFRelease(*(CFTypeRef *)(*(void *)(a1 + 32) + 8 * v3++));
    while (v3 < *(unsigned int *)(a1 + 40));
  }
  free(*(void **)(a1 + 32));
}

void CA::CG::Renderer::pop_transparency_layer(CA::CG::Renderer *this, CA::CG::TransparencyLayer *a2)
{
  if (*((CA::CG::TransparencyLayer **)this + 171) == a2)
  {
    if ((*((unsigned char *)a2 + 196) & 8) != 0)
    {
      uint64_t v4 = *((void *)this + 1);
      CA::OGL::Context::set_gstate(v4, **(void **)(v4 + 248));
      CA::OGL::Context::pop_surface((CA::OGL::Context *)v4);
      __int16 v5 = *(_WORD *)(v4 + 832) & 0x8FFF | ((*((unsigned char *)a2 + 176) & 7) << 12);
      *(_WORD *)(v4 + 832) = v5;
      *(_WORD *)(v4 + 832) = v5 & 0xFFFB | (*((unsigned char *)a2 + 196) >> 2) & 4;
      *((unsigned char *)a2 + 196) &= ~8u;
    }
    *((void *)this + 171) = 0;
  }
}

CGPathRef CA::CG::Renderer::retain_simple_path(CA::CG::Renderer *this, const CGRect *a2, const CGSize *a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  int v9 = a3 == 0;
  unsigned int v10 = -1;
  while (1)
  {
    uint64_t v11 = (char *)this + v6;
    if (*(_DWORD *)((char *)this + v6 + 2684) < v10)
    {
      uint64_t v7 = v8;
      unsigned int v10 = *(_DWORD *)((char *)this + v6 + 2684);
    }
    if (!*((void *)v11 + 334)) {
      goto LABEL_12;
    }
    if (v11[2680] != v9) {
      goto LABEL_12;
    }
    v38.origin.CGFloat x = *((CGFloat *)v11 + 328);
    v38.origin.CGFloat y = *(CGFloat *)((char *)this + v6 + 2632);
    v38.size.CGFloat width = *(CGFloat *)((char *)this + v6 + 2640);
    v38.size.CGFloat height = *(CGFloat *)((char *)this + v6 + 2648);
    if (!CGRectEqualToRect(v38, *a2)) {
      goto LABEL_12;
    }
    if (!a3) {
      break;
    }
    uint64_t v12 = (char *)this + v6;
    if (*(double *)((char *)this + v6 + 2656) == a3->width && *(double *)((char *)this + v6 + 2664) == a3->height) {
      goto LABEL_37;
    }
LABEL_12:
    ++v8;
    v6 += 64;
    if (v6 == 1536)
    {
      CFMutableDictionaryRef Mutable = CGPathCreateMutable();
      CFTypeID v15 = Mutable;
      if (Mutable)
      {
        CGFloat x = a2->origin.x;
        CGFloat y = a2->origin.y;
        CGFloat width = a2->size.width;
        CGFloat height = a2->size.height;
        if (a3)
        {
          double v20 = a3->width;
          if (a3->width <= 0.0) {
            goto LABEL_28;
          }
          double v21 = a3->height;
          if (v21 <= 0.0) {
            goto LABEL_28;
          }
          double v22 = CGRectGetWidth(*a2);
          v39.origin.CGFloat x = x;
          v39.origin.CGFloat y = y;
          v39.size.CGFloat width = width;
          v39.size.CGFloat height = height;
          double v23 = CGRectGetHeight(v39);
          double v24 = 0.0;
          double v25 = 0.0;
          if (v20 >= 0.0)
          {
            double v25 = v20;
            if (v20 + v20 > v22) {
              double v25 = v22 * 0.5 + -0.0001;
            }
          }
          if (v21 >= 0.0)
          {
            double v24 = v21;
            if (v21 + v21 > v23) {
              double v24 = v23 * 0.5 + -0.0001;
            }
          }
          if (v25 < 0.0 || v25 + v25 > v22 || v24 < 0.0 || v24 + v24 > v23)
          {
LABEL_28:
            v41.origin.CGFloat x = x;
            v41.origin.CGFloat y = y;
            v41.size.CGFloat width = width;
            v41.size.CGFloat height = height;
            CGPathAddRect(v15, 0, v41);
          }
          else
          {
            v40.origin.CGFloat x = x;
            v40.origin.CGFloat y = y;
            v40.size.CGFloat width = width;
            v40.size.CGFloat height = height;
            CGPathAddRoundedRect(v15, 0, v40, v25, v24);
          }
          uint64_t v27 = (char *)this + 64 * v7;
          origiuint64_t n = a2->origin;
          *((_OWORD *)v27 + 165) = a2->size;
          *((CGPoint *)v27 + 164) = origin;
          *((CGSize *)v27 + 166) = *a3;
        }
        else
        {
          CGPathAddEllipseInRect(Mutable, 0, *a2);
          CGPoint v29 = a2->origin;
          uint64_t v30 = (char *)this + 64 * v7;
          *((_OWORD *)v30 + 165) = a2->size;
          *((CGPoint *)v30 + 164) = v29;
        }
        uint64_t v31 = (char *)this + 64 * v7;
        uint64_t v32 = (atomic_uint *)*((void *)v31 + 334);
        if (v32)
        {
          if (atomic_fetch_add(v32 + 2, 0xFFFFFFFF) == 1) {
            (*(void (**)(atomic_uint *))(*(void *)v32 + 16))(v32);
          }
        }
        *((void *)v31 + 334) = CA::Render::Path::new_path(v15, v26);
        v31[2680] = v9;
        int v33 = *((_DWORD *)this + 1040) + 1;
        *((_DWORD *)this + 1040) = v33;
        *((_DWORD *)v31 + 671) = v33;
      }
      return v15;
    }
  }
  uint64_t v12 = (char *)this + v6;
LABEL_37:
  int v35 = *((_DWORD *)this + 1040) + 1;
  *((_DWORD *)this + 1040) = v35;
  *((_DWORD *)v12 + 671) = v35;
  uint64_t v36 = (const CGPath *)CA::Render::Path::cg_path(*((CA::Render::Path **)v12 + 334));

  return CGPathRetain(v36);
}

uint64_t CA::CG::Renderer::prepare_destination(uint64_t this)
{
  uint64_t v1 = (unsigned char *)(this + 4176);
  char v2 = *(unsigned char *)(this + 4176);
  if ((v2 & 2) == 0)
  {
    this = *(void *)(this + 8);
    if (this)
    {
      unsigned char *v1 = v2 | 2;
      return (*(uint64_t (**)(void))(*(void *)this + 760))();
    }
  }
  return this;
}

void ___ZN2CA10ScalerUtil12ScalerLimits6limitsEv_block_invoke()
{
  *(_OWORD *)CA::ScalerUtil::ScalerLimits::limits(void)::limits = xmmword_184997D80;
  *(_OWORD *)&dword_1E8F85260 = xmmword_184997D90;
  xmmword_1E8F85270 = xmmword_184997DA0;
  *(_OWORD *)&dword_1E8F85280 = xmmword_184997DB0;
  dword_1E8F852AC = 0;
  if (CA::ScalerUtil::get_io_service(void)::once != -1) {
    dispatch_once(&CA::ScalerUtil::get_io_service(void)::once, &__block_literal_global_77);
  }
  if (CA::ScalerUtil::get_io_service(void)::scaler_service)
  {
    CFDictionaryRef v0 = (const __CFDictionary *)IORegistryEntrySearchCFProperty(CA::ScalerUtil::get_io_service(void)::scaler_service, "IOService", @"IOSurfaceAcceleratorCapabilitiesDict", 0, 0);
    if (v0)
    {
      CFDictionaryRef v1 = v0;
      CFTypeID v2 = CFGetTypeID(v0);
      if (v2 == CFDictionaryGetTypeID())
      {
        Value = CFDictionaryGetValue(v1, @"IOSurfaceAcceleratorCapabilitiesMinSourceWidth");
        if (Value) {
          int v4 = CA_CFIntValue(Value);
        }
        else {
          int v4 = 0;
        }
        __int16 v5 = CFDictionaryGetValue(v1, @"IOSurfaceAcceleratorCapabilitiesMinSourceHeight");
        if (v5) {
          LODWORD(v5) = CA_CFIntValue(v5);
        }
        if (v4 >= 1) {
          CA::ScalerUtil::ScalerLimits::limits(void)::limits[0] = v4;
        }
        if ((int)v5 >= 1) {
          dword_1E8F85254 = (int)v5;
        }
        uint64_t v6 = CFDictionaryGetValue(v1, @"IOSurfaceAcceleratorCapabilitiesMaxSourceWidth");
        if (v6) {
          int v7 = CA_CFIntValue(v6);
        }
        else {
          int v7 = 0;
        }
        uint64_t v8 = CFDictionaryGetValue(v1, @"IOSurfaceAcceleratorCapabilitiesMaxSourceHeight");
        if (v8) {
          LODWORD(v8) = CA_CFIntValue(v8);
        }
        if (v7) {
          dword_1E8F85258 = v7;
        }
        if ((int)v8 >= 1) {
          dword_1E8F8525C = (int)v8;
        }
        int v9 = CFDictionaryGetValue(v1, @"IOSurfaceAcceleratorCapabilitiesMinDestWidth");
        if (v9) {
          int v10 = CA_CFIntValue(v9);
        }
        else {
          int v10 = 0;
        }
        uint64_t v11 = CFDictionaryGetValue(v1, @"IOSurfaceAcceleratorCapabilitiesMinDestHeight");
        if (v11) {
          LODWORD(v11) = CA_CFIntValue(v11);
        }
        if (v10 >= 1) {
          dword_1E8F85260 = v10;
        }
        if ((int)v11 >= 1) {
          dword_1E8F85264 = (int)v11;
        }
        uint64_t v12 = CFDictionaryGetValue(v1, @"IOSurfaceAcceleratorCapabilitiesMaxDestWidth");
        if (v12) {
          int v13 = CA_CFIntValue(v12);
        }
        else {
          int v13 = 0;
        }
        uint64_t v14 = CFDictionaryGetValue(v1, @"IOSurfaceAcceleratorCapabilitiesMaxDestHeight");
        if (v14) {
          LODWORD(v14) = CA_CFIntValue(v14);
        }
        if (v13 >= 1) {
          dword_1E8F85268 = v13;
        }
        if ((int)v14 >= 1) {
          dword_1E8F8526C = (int)v14;
        }
        CFTypeID v15 = CFDictionaryGetValue(v1, @"IOSurfaceAcceleratorCapabilitiesMaxHUpscale");
        if (v15) {
          int v16 = CA_CFIntValue(v15);
        }
        else {
          int v16 = 0;
        }
        uint64_t v17 = CFDictionaryGetValue(v1, @"IOSurfaceAcceleratorCapabilitiesMaxVUpscale");
        if (v17) {
          LODWORD(v17) = CA_CFIntValue(v17);
        }
        if (v16 >= 1) {
          *((float *)&xmmword_1E8F85270 + 2) = (float)v16;
        }
        if ((int)v17 >= 1) {
          *((float *)&xmmword_1E8F85270 + 3) = (float)(int)v17;
        }
        uint64_t v18 = CFDictionaryGetValue(v1, @"IOSurfaceAcceleratorCapabilitiesMaxHDownscale");
        if (v18) {
          int v19 = CA_CFIntValue(v18);
        }
        else {
          int v19 = 0;
        }
        double v20 = CFDictionaryGetValue(v1, @"IOSurfaceAcceleratorCapabilitiesMaxVDownscale");
        if (v20) {
          LODWORD(v20) = CA_CFIntValue(v20);
        }
        if (v19 >= 1) {
          *(float *)&xmmword_1E8F85270 = 1.0 / (float)v19;
        }
        if ((int)v20 >= 1) {
          *((float *)&xmmword_1E8F85270 + 1) = 1.0 / (float)(int)v20;
        }
        double v21 = CFDictionaryGetValue(v1, @"IOSurfaceAcceleratorFilterVerticalTapsCount");
        if (v21) {
          LODWORD(v21) = CA_CFIntValue(v21);
        }
        dword_1E8F85290 = (int)v21;
        double v22 = CFDictionaryGetValue(v1, @"IOSurfaceAcceleratorFilterVerticalPhasesCount");
        if (v22) {
          LODWORD(v22) = CA_CFIntValue(v22);
        }
        dword_1E8F85294 = (int)v22;
        double v23 = CFDictionaryGetValue(v1, @"IOSurfaceAcceleratorFilterHorizontalTapsCount");
        if (v23) {
          LODWORD(v23) = CA_CFIntValue(v23);
        }
        dword_1E8F85298 = (int)v23;
        double v24 = CFDictionaryGetValue(v1, @"IOSurfaceAcceleratorFilterHorizontalPhasesCount");
        if (v24) {
          LODWORD(v24) = CA_CFIntValue(v24);
        }
        dword_1E8F8529C = (int)v24;
        double v25 = CFDictionaryGetValue(v1, @"IOSurfaceAcceleratorFilterCoefficientsPrePointBits");
        if (v25) {
          LODWORD(v25) = CA_CFIntValue(v25);
        }
        dword_1E8F852A0 = (int)v25;
        uint64_t v26 = CFDictionaryGetValue(v1, @"IOSurfaceAcceleratorFilterCoefficientsPostPointBits");
        if (v26) {
          LODWORD(v26) = CA_CFIntValue(v26);
        }
        dword_1E8F852A4 = (int)v26;
        unk_1E8F852A8 = dword_1E8F852A0 + v26;
        uint64_t v27 = CFDictionaryGetValue(v1, @"kSurfaceAcceleratorCapabilitiesAccessibility");
        if (v27) {
          BOOL v28 = CA_CFIntValue(v27) != 0;
        }
        else {
          BOOL v28 = 0;
        }
        LOBYTE(dword_1E8F852AC) = v28;
        CGPoint v29 = CFDictionaryGetValue(v1, @"kSurfaceAcceleratorCapabilitiesColorManager");
        if (v29) {
          BOOL v30 = CA_CFIntValue(v29) != 0;
        }
        else {
          BOOL v30 = 0;
        }
        BYTE1(dword_1E8F852AC) = v30;
        uint64_t v31 = CFDictionaryGetValue(v1, @"IOSurfaceAcceleratorCapabilitiesDirectionalScaling");
        if (v31) {
          LOBYTE(v31) = CA_CFBoolValue(v31);
        }
        BYTE2(dword_1E8F852AC) = (_BYTE)v31;
        uint64_t v32 = CFDictionaryGetValue(v1, @"IOSurfaceAcceleratorCapabilitiesASEPolyMaxHRatio");
        float v33 = 0.0;
        float v34 = 0.0;
        if (v32) {
          float v34 = (float)(int)(2 * CA_CFIntValue(v32));
        }
        int v35 = CFDictionaryGetValue(v1, @"IOSurfaceAcceleratorCapabilitiesASEPolyMaxVRatio");
        if (v35) {
          float v33 = (float)(int)(2 * CA_CFIntValue(v35));
        }
        dword_1E8F85288 = LODWORD(v34);
        dword_1E8F8528C = LODWORD(v33);
        uint64_t v36 = CFDictionaryGetValue(v1, @"IOSurfaceAcceleratorCapabilitiesASEMinRatio");
        if (v36) {
          float v37 = (float)(int)CA_CFIntValue(v36);
        }
        else {
          float v37 = 0.0;
        }
        dword_1E8F85280 = LODWORD(v37);
        *(float *)algn_1E8F85284 = v37;
      }
      CFRelease(v1);
    }
  }
}

uint64_t CA::WindowServer::VirtualDisplay::set_digital_modes(CA::WindowServer::VirtualDisplay *this, const __CFArray *a2)
{
  return (*(uint64_t (**)(CA::WindowServer::VirtualDisplay *, void, const __CFArray *))(*(void *)this
                                                                                                  + 2200))(this, 0, a2);
}

uint64_t CA::WindowServer::VirtualDisplay::set_digital_modes(CA::WindowServer::VirtualDisplay *this, const __CFArray *a2, CFArrayRef theArray)
{
  unint64_t v3 = this;
  uint64_t v125 = *MEMORY[0x1E4F143B8];
  long long v108 = 0u;
  *(_OWORD *)__p = 0u;
  uint64_t v104 = 0;
  long long v106 = 0u;
  memset(v107, 0, sizeof(v107));
  CFStringRef v105 = &v106;
  LODWORD(v108) = 1065353216;
  uint64_t v4 = *((void *)this + 80);
  if (theArray && (CFArrayRef v5 = theArray, CFArrayGetCount(theArray) >= 1))
  {
    int v7 = (float *)((char *)v3 + 25656);
    if (*((void *)v3 + 3210))
    {
      uint64_t v8 = (void *)*((void *)v3 + 3209);
      if (v8)
      {
        do
        {
          int v9 = (void *)*v8;
          operator delete(v8);
          uint64_t v8 = v9;
        }
        while (v9);
      }
      *((void *)v3 + 3209) = 0;
      uint64_t v10 = *((void *)v3 + 3208);
      int v7 = (float *)((char *)v3 + 25656);
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
          *(void *)(*((void *)v3 + 3207) + 8 * i) = 0;
      }
      *((void *)v3 + 3210) = 0;
    }
    uint64_t v86 = v4;
    uint64_t v97 = v3;
    CFIndex Count = CFArrayGetCount(v5);
    if (Count)
    {
      uint64_t v89 = v7;
      *((void *)&v94 + 1) = 0;
      uint64_t v95 = 0;
      unsigned int v90 = 0;
      CFIndex v12 = 0;
      DWORD1(v94) = 0;
      uint64_t v93 = (_DWORD *)((char *)v3 + 25704);
      float32x2_t v13 = (float32x2_t)vdup_n_s32(0x3EC99326u);
      CFArrayRef v98 = v5;
      while (1)
      {
        CFDictionaryRef Dictionary = (const __CFDictionary *)CA_CFArrayGetDictionary(v5, v12);
        CFIndex v100 = v12;
        if (Dictionary)
        {
          CFDictionaryRef v15 = Dictionary;
          CFDictionaryRef v16 = (const __CFDictionary *)CA_CFDictionaryGetDictionary(Dictionary, @"DisplayAttributes");
          if (v16)
          {
            CFDictionaryRef v17 = v16;
            CFDictionaryRef v18 = (const __CFDictionary *)CA_CFDictionaryGetDictionary(v16, @"ProductAttributes");
            if (v18)
            {
              CFDictionaryRef v19 = v18;
              double v20 = (void *)*((void *)v97 + 3212);
              if (v20)
              {
                free(v20);
                *((void *)v97 + 3212) = 0;
              }
              CFStringRef String = (const __CFString *)CA_CFDictionaryGetString(v19, @"ProductName");
              if (String)
              {
                CFStringRef v22 = String;
                CFTypeID v23 = CFGetTypeID(String);
                if (v23 == CFStringGetTypeID())
                {
                  long long v123 = 0u;
                  long long v124 = 0u;
                  long long v121 = 0u;
                  long long v122 = 0u;
                  long long v119 = 0u;
                  long long v120 = 0u;
                  long long v117 = 0u;
                  long long v118 = 0u;
                  long long v115 = 0u;
                  long long v116 = 0u;
                  long long v113 = 0u;
                  long long v114 = 0u;
                  long long v111 = 0u;
                  long long v112 = 0u;
                  *(_OWORD *)buffer = 0u;
                  long long v110 = 0u;
                  if (CFStringGetCString(v22, buffer, 256, 0x8000100u)) {
                    *((void *)v97 + 3212) = strdup(buffer);
                  }
                }
              }
              Value = CFDictionaryGetValue(v19, @"ProductID");
              if (Value) {
                LODWORD(Value) = CA_CFIntValue(Value);
              }
              v93[1] = Value;
              double v25 = CFDictionaryGetValue(v19, @"ManufacturerID");
              if (v25) {
                LODWORD(v25) = CA_CFIntValue(v25);
              }
              *uint64_t v93 = v25;
            }
            uint64_t v26 = CFDictionaryGetValue(v17, @"MaxHorizontalImageSize");
            if (v26) {
              unsigned int v27 = CA_CFIntValue(v26);
            }
            else {
              unsigned int v27 = 0;
            }
            uint64_t v32 = CFDictionaryGetValue(v17, @"MaxVerticalImageSize");
            if (v32) {
              LODWORD(v32) = CA_CFIntValue(v32);
            }
            *((float64x2_t *)v97 + 1607) = vcvtq_f64_f32(vmul_f32(vcvt_f32_u32((uint32x2_t)__PAIR64__(v32, v27)), v13));
          }
          else
          {
            CFDictionaryRef v28 = (const __CFDictionary *)CA_CFDictionaryGetDictionary(v15, @"HorizontalAttributes");
            CFDictionaryRef v29 = (const __CFDictionary *)CA_CFDictionaryGetDictionary(v15, @"VerticalAttributes");
            if (v28)
            {
              CFDictionaryRef v30 = v29;
              if (v29)
              {
                uint64_t v31 = CFDictionaryGetValue(v15, @"IsVirtual");
                if (v31) {
                  BOOL v92 = CA_CFBoolValue(v31);
                }
                else {
                  BOOL v92 = 0;
                }
                float v33 = CFDictionaryGetValue(v15, @"Score");
                if (v33) {
                  unsigned int v96 = CA_CFIntValue(v33);
                }
                else {
                  unsigned int v96 = 0;
                }
                float v34 = CFDictionaryGetValue(v30, @"PreciseSyncRate");
                if (v34) {
                  int v35 = CA_CFIntValue(v34);
                }
                else {
                  int v35 = 0;
                }
                uint64_t v36 = CFDictionaryGetValue(v28, @"Active");
                if (v36) {
                  __int16 v37 = CA_CFIntValue(v36);
                }
                else {
                  __int16 v37 = 0;
                }
                CGRect v38 = CFDictionaryGetValue(v30, @"Active");
                if (v38)
                {
                  __int16 v39 = CA_CFIntValue(v38);
                  if (!a2) {
                    goto LABEL_53;
                  }
                }
                else
                {
                  __int16 v39 = 0;
                  if (!a2)
                  {
LABEL_53:
                    CFIndex v101 = 1;
LABEL_54:
                    CFIndex v40 = 0;
                    LODWORD(v41) = v35 & 0x1FFFFFF;
                    if (v35) {
                      uint64_t v41 = v41;
                    }
                    else {
                      uint64_t v41 = 3932160;
                    }
                    unint64_t v91 = v37 & 0x3FFF | ((unsigned __int16)(v39 & 0x3FFF) << 14) | (unint64_t)(v41 << 29);
                    signed int v87 = (v91 >> 14) & 0x3FFF;
                    int v88 = v37 & 0x3FFF;
                    while (2)
                    {
                      CFDictionaryRef v42 = v15;
                      if (a2) {
                        CFDictionaryRef v42 = (const __CFDictionary *)CA_CFArrayGetDictionary(a2, v40);
                      }
                      int Int = CA_CFDictionaryGetInt(v42, @"ID");
                      BOOL Bool = CA_CFDictionaryGetBool(v42, @"IsVirtual");
                      int v45 = CA_CFDictionaryGetInt(v42, @"PixelEncoding");
                      int v46 = CA_CFDictionaryGetInt(v42, @"Depth");
                      int v47 = CA_CFDictionaryGetInt(v42, @"Colorimetry");
                      int v48 = CA_CFDictionaryGetInt(v42, @"EOTF");
                      int v49 = CA_CFDictionaryGetInt(v42, @"DynamicRange");
                      if (v45) {
                        goto LABEL_61;
                      }
                      _ZF = v46 == 12 || v46 == 10;
                      if (!_ZF || v49)
                      {
                        if (v46 > 8) {
                          goto LABEL_61;
                        }
                        int v53 = 0;
                        uint64_t v51 = 0x80000000000000;
                        if (v47 == 16) {
                          uint64_t v51 = 0x680000000000000;
                        }
                        if (v48) {
                          goto LABEL_61;
                        }
                      }
                      else if (v47 == 16)
                      {
                        uint64_t v51 = 0xC80000000000000;
                        if (v46 == 10) {
                          uint64_t v51 = 0xC00000000000000;
                        }
                        uint64_t v52 = 0x780000000000000;
                        if (v46 == 10) {
                          uint64_t v52 = 0x700000000000000;
                        }
                        if (v48 == 2)
                        {
                          int v53 = 32;
                          goto LABEL_91;
                        }
LABEL_87:
                        int v53 = 16;
                        uint64_t v51 = v52;
                        if (v48) {
                          goto LABEL_61;
                        }
                      }
                      else
                      {
                        uint64_t v51 = 0xB80000000000000;
                        if (v46 == 10) {
                          uint64_t v51 = 0xB00000000000000;
                        }
                        uint64_t v52 = 0x180000000000000;
                        if (v46 == 10) {
                          uint64_t v52 = 0x100000000000000;
                        }
                        if (v48 != 2) {
                          goto LABEL_87;
                        }
                        int v53 = 32;
                      }
                      if (v47 != 1 && v47 != 10)
                      {
                        if (v47 != 16) {
                          goto LABEL_61;
                        }
LABEL_91:
                        v53 |= 2u;
                      }
                      if (v49) {
                        goto LABEL_61;
                      }
                      uint64_t v54 = 0x40000000000000;
                      if (!v92 && !Bool) {
                        uint64_t v54 = 0;
                      }
                      uint64_t v55 = v54 | v51 & 0xF80000000000000 | v91 | 0x1000000000000000;
                      *(void *)buffer = v55;
                      uint64_t v56 = (uint64_t *)__p[0];
                      uint64_t v57 = (uint64_t *)__p[1];
                      if (__p[0] == __p[1])
                      {
                        uint64_t v57 = (uint64_t *)__p[0];
                      }
                      else
                      {
                        while ((CA::WindowServer::Display::Mode::operator==(*v56, v55) & 1) == 0)
                        {
                          if (++v56 == v57)
                          {
                            uint64_t v56 = v57;
                            break;
                          }
                        }
                      }
                      if (v56 == v57)
                      {
                        CA::WindowServer::Display::ModeSet::add_mode((CA::WindowServer::Display::ModeSet *)__p, (const CA::WindowServer::Display::Mode *)buffer);
                      }
                      else if (*((_DWORD *)std::__hash_table<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::VirtualDisplay::ModeInfo>,std::__unordered_map_hasher<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::VirtualDisplay::ModeInfo>,CA::WindowServer::VirtualDisplay::ModeHash,std::equal_to<CA::WindowServer::Display::Mode>,true>,std::__unordered_map_equal<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::VirtualDisplay::ModeInfo>,std::equal_to<CA::WindowServer::Display::Mode>,CA::WindowServer::VirtualDisplay::ModeHash,true>,std::allocator<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::VirtualDisplay::ModeInfo>>>::__emplace_unique_key_args<CA::WindowServer::Display::Mode,std::piecewise_construct_t const&,std::tuple<CA::WindowServer::Display::Mode const&>,std::tuple<>>(v89, v55, (uint64_t *)buffer)+ 8) >= v96)
                      {
                        goto LABEL_61;
                      }
                      uint64_t v58 = CFDictionaryGetValue(v15, @"ID");
                      if (v58) {
                        int v59 = CA_CFIntValue(v58);
                      }
                      else {
                        int v59 = 0;
                      }
                      unsigned int v60 = v53 + v96;
                      uint64_t v61 = std::__hash_table<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::VirtualDisplay::ModeInfo>,std::__unordered_map_hasher<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::VirtualDisplay::ModeInfo>,CA::WindowServer::VirtualDisplay::ModeHash,std::equal_to<CA::WindowServer::Display::Mode>,true>,std::__unordered_map_equal<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::VirtualDisplay::ModeInfo>,std::equal_to<CA::WindowServer::Display::Mode>,CA::WindowServer::VirtualDisplay::ModeHash,true>,std::allocator<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::VirtualDisplay::ModeInfo>>>::__emplace_unique_key_args<CA::WindowServer::Display::Mode,std::piecewise_construct_t const&,std::tuple<CA::WindowServer::Display::Mode const&>,std::tuple<>>(v89, v55, (uint64_t *)buffer);
                      v61[6] = Int;
                      v61[7] = v59;
                      v61[8] = v96;
                      v61[9] = 0;
                      unsigned int v62 = v90;
                      uint64_t v63 = v95;
                      if (v60 > v90) {
                        uint64_t v63 = v55;
                      }
                      uint64_t v95 = v63;
                      if (v60 > v90) {
                        unsigned int v62 = v60;
                      }
                      unsigned int v90 = v62;
                      unsigned int v64 = (v91 >> 14) & 0x3FFF;
                      int v65 = DWORD1(v94);
                      if (v87 <= SDWORD2(v94)) {
                        int v66 = DWORD1(v94);
                      }
                      else {
                        int v66 = v88;
                      }
                      if (v87 <= SDWORD2(v94)) {
                        unsigned int v64 = DWORD2(v94);
                      }
                      BOOL v67 = v88 <= SDWORD1(v94);
                      if (v88 > SDWORD1(v94)) {
                        int v65 = v66;
                      }
                      DWORD1(v94) = v65;
                      if (v67) {
                        uint64_t v68 = DWORD2(v94);
                      }
                      else {
                        uint64_t v68 = v64;
                      }
                      *((void *)&v94 + 1) = v68;
LABEL_61:
                      if (++v40 == v101) {
                        goto LABEL_36;
                      }
                      continue;
                    }
                  }
                }
                CFIndex v101 = CFArrayGetCount(a2);
                if (v101) {
                  goto LABEL_54;
                }
              }
            }
          }
        }
LABEL_36:
        CFIndex v12 = v100 + 1;
        CFArrayRef v5 = v98;
        if (v100 + 1 == Count) {
          goto LABEL_124;
        }
      }
    }
    *((void *)&v94 + 1) = 0;
    uint64_t v95 = 0;
    DWORD1(v94) = 0;
LABEL_124:
    unint64_t v3 = v97;
    *((void *)v97 + 9) = v94 >> 32;
    CA::WindowServer::Display::ModeSet::sort((CA::WindowServer::Display::ModeSet *)__p);
    uint64_t v4 = v86;
    uint64_t v69 = v95;
  }
  else
  {
    *(void *)buffer = -1;
    CA::WindowServer::Display::ModeSet::add_mode((CA::WindowServer::Display::ModeSet *)__p, (const CA::WindowServer::Display::Mode *)buffer);
    uint64_t v69 = 0;
  }
  if (!v4) {
    goto LABEL_132;
  }
  uint64_t v70 = (uint64_t *)__p[0];
  uint64_t v71 = (uint64_t *)__p[1];
  if (__p[0] == __p[1])
  {
    uint64_t v71 = (uint64_t *)__p[0];
  }
  else
  {
    while ((CA::WindowServer::Display::Mode::operator==(*v70, v4) & 1) == 0)
    {
      if (++v70 == v71)
      {
        uint64_t v70 = v71;
        break;
      }
    }
  }
  if (v70 == v71) {
LABEL_132:
  }
    uint64_t v4 = v69;
  int v72 = CA::WindowServer::Display::set_all_modes((uint64_t)v3, (uint64_t)__p, v4, v69);
  if (v72)
  {
    v102[0] = v4 & 0x3FFF;
    v102[1] = (v4 >> 14) & 0x3FFF;
    __asm { FMOV            V0.2D, #1.0 }
    *(_OWORD *)buffer = _Q0;
    CA::WindowServer::Display::set_size((uint64_t)v3, (uint64_t)v102, (uint64_t)v102, (double *)buffer, *(double *)&_Q0, v73, v74, v75, v76, v77, v78, v79);
  }
  unsigned int v84 = (*(uint64_t (**)(CA::WindowServer::VirtualDisplay *))(*(void *)v3 + 680))(v3);
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)v107);
  std::__tree<std::tuple<unsigned short,unsigned short>>::destroy((void *)v106);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v72 | v84;
}

BOOL CA::WindowServer::Display::ModeSet::contains_mode(CA::WindowServer::Display::ModeSet *this, const CA::WindowServer::Display::Mode *a2, uint64_t a3)
{
  unint64_t v3 = (uint64_t *)this;
  if (this == a2)
  {
    CFArrayRef v5 = this;
  }
  else
  {
    CFArrayRef v5 = a2;
    while ((CA::WindowServer::Display::Mode::operator==(*v3, a3) & 1) == 0)
    {
      if (++v3 == (uint64_t *)v5)
      {
        unint64_t v3 = (uint64_t *)v5;
        return v3 != (uint64_t *)v5;
      }
    }
  }
  return v3 != (uint64_t *)v5;
}

void *std::__hash_table<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::VirtualDisplay::ModeInfo>,std::__unordered_map_hasher<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::VirtualDisplay::ModeInfo>,CA::WindowServer::VirtualDisplay::ModeHash,std::equal_to<CA::WindowServer::Display::Mode>,true>,std::__unordered_map_equal<CA::WindowServer::Display::Mode,std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::VirtualDisplay::ModeInfo>,std::equal_to<CA::WindowServer::Display::Mode>,CA::WindowServer::VirtualDisplay::ModeHash,true>,std::allocator<std::__hash_value_type<CA::WindowServer::Display::Mode,CA::WindowServer::VirtualDisplay::ModeInfo>>>::__emplace_unique_key_args<CA::WindowServer::Display::Mode,std::piecewise_construct_t const&,std::tuple<CA::WindowServer::Display::Mode const&>,std::tuple<>>(float *a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v5 = (int)a2;
  unint64_t v6 = *((void *)a1 + 1);
  if (v6)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v8.i16[0] = vaddlv_u8(v8);
    unint64_t v9 = v8.u32[0];
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v10 = (int)a2;
      if ((int)a2 >= v6) {
        unint64_t v10 = (int)a2 % v6;
      }
    }
    else
    {
      unint64_t v10 = (v6 - 1) & (int)a2;
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v10);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v5)
        {
          if (CA::WindowServer::Display::Mode::operator==(i[2], a2)) {
            return i;
          }
        }
        else
        {
          if (v9 > 1)
          {
            if (v13 >= v6) {
              v13 %= v6;
            }
          }
          else
          {
            v13 &= v6 - 1;
          }
          if (v13 != v10) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v10 = 0;
  }
  uint64_t i = operator new(0x28uLL);
  *uint64_t i = 0;
  i[1] = v5;
  uint64_t v14 = *a3;
  i[3] = 0;
  i[4] = 0;
  i[2] = v14;
  float v15 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v16 = a1[8];
  if (!v6 || (float)(v16 * (float)v6) < v15)
  {
    BOOL v17 = 1;
    if (v6 >= 3) {
      BOOL v17 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v6);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      int8x8_t prime = (int8x8_t)v19;
    }
    else {
      int8x8_t prime = (int8x8_t)v18;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v6 = *((void *)a1 + 1);
    }
    if (*(void *)&prime > v6) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v6)
    {
      unint64_t v27 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v6 < 3 || (uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (*(void *)&prime <= v27) {
        int8x8_t prime = (int8x8_t)v27;
      }
      if (*(void *)&prime >= v6)
      {
        unint64_t v6 = *((void *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          double v21 = operator new(8 * *(void *)&prime);
          CFStringRef v22 = *(void **)a1;
          *(void *)a1 = v21;
          if (v22) {
            operator delete(v22);
          }
          uint64_t v23 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v23++) = 0;
          while (*(void *)&prime != v23);
          double v24 = (void *)*((void *)a1 + 2);
          if (v24)
          {
            unint64_t v25 = v24[1];
            uint8x8_t v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(void *)&prime) {
                v25 %= *(void *)&prime;
              }
            }
            else
            {
              v25 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v25) = a1 + 4;
            CFDictionaryRef v30 = (void *)*v24;
            if (*v24)
            {
              do
              {
                unint64_t v31 = v30[1];
                if (v26.u32[0] > 1uLL)
                {
                  if (v31 >= *(void *)&prime) {
                    v31 %= *(void *)&prime;
                  }
                }
                else
                {
                  v31 &= *(void *)&prime - 1;
                }
                if (v31 != v25)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v31))
                  {
                    *(void *)(*(void *)a1 + 8 * v31) = v24;
                    goto LABEL_55;
                  }
                  void *v24 = *v30;
                  *CFDictionaryRef v30 = **(void **)(*(void *)a1 + 8 * v31);
                  **(void **)(*(void *)a1 + 8 * v31) = v30;
                  CFDictionaryRef v30 = v24;
                }
                unint64_t v31 = v25;
LABEL_55:
                double v24 = v30;
                CFDictionaryRef v30 = (void *)*v30;
                unint64_t v25 = v31;
              }
              while (v30);
            }
          }
          unint64_t v6 = (unint64_t)prime;
          goto LABEL_59;
        }
        uint64_t v36 = *(void **)a1;
        *(void *)a1 = 0;
        if (v36) {
          operator delete(v36);
        }
        unint64_t v6 = 0;
        *((void *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6) {
        unint64_t v10 = v5 % v6;
      }
      else {
        unint64_t v10 = v5;
      }
    }
    else
    {
      unint64_t v10 = (v6 - 1) & v5;
    }
  }
  uint64_t v32 = *(void **)a1;
  float v33 = *(void **)(*(void *)a1 + 8 * v10);
  if (v33)
  {
    *uint64_t i = *v33;
LABEL_72:
    *float v33 = i;
    goto LABEL_73;
  }
  *uint64_t i = *((void *)a1 + 2);
  *((void *)a1 + 2) = i;
  v32[v10] = a1 + 4;
  if (*i)
  {
    unint64_t v34 = *(void *)(*i + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v34 >= v6) {
        v34 %= v6;
      }
    }
    else
    {
      v34 &= v6 - 1;
    }
    float v33 = (void *)(*(void *)a1 + 8 * v34);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)a1 + 3);
  return i;
}

float *CA::WindowServer::VirtualDisplay::create_surface(CA::WindowServer::IOSurface *a1, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, const void *a9)
{
  return CA::WindowServer::IOSurface::allocate_iosurface(a1, a2, a3, a4, a5, a6, 0, a7, a8, a9);
}

uint64_t CA::WindowServer::VirtualDisplay::release_resources(CA::WindowServer::VirtualDisplay *this)
{
  CA::WindowServer::VirtualDisplay::release_everything(this);

  return CA::WindowServer::Display::release_resources((os_unfair_lock_s *)this);
}

void *CA::WindowServer::VirtualDisplay::release_everything(CA::WindowServer::VirtualDisplay *this)
{
  os_log_t result = (void *)(*(uint64_t (**)(CA::WindowServer::VirtualDisplay *))(*(void *)this + 2184))(this);
  unint64_t v3 = (uint64_t *)*((void *)this + 3198);
  if (v3)
  {
    do
    {
      *((_DWORD *)v3 + 2) = 0;
      uint64_t v4 = (CA::Shape *)v3[2];
      if (v4)
      {
        CA::Shape::unref(v4);
        v3[2] = 0;
      }
      unint64_t v5 = (CA::WindowServer::Surface *)v3[3];
      if (v5)
      {
        CA::WindowServer::Surface::unref(v5);
        v3[3] = 0;
      }
      unint64_t v3 = (uint64_t *)*v3;
    }
    while (v3);
    os_log_t result = (void *)*((void *)this + 3198);
    if (result)
    {
      do
      {
        unint64_t v6 = (void *)*result;
        free(result);
        os_log_t result = v6;
      }
      while (v6);
    }
  }
  *((void *)this + 3198) = 0;
  return result;
}

uint64_t CA::WindowServer::Display::set_power_state_locked(uint64_t result, char a2)
{
  uint64_t v2 = *(void *)(result + 728);
  *(unsigned char *)(v2 + 3) = a2;
  *(unsigned char *)(v2 + 2) = a2;
  return result;
}

uint64_t CA::WindowServer::Display::set_display_state_locked(CA::WindowServer::Display *this)
{
  return 5;
}

double CA::WindowServer::Display::secure_indicator_animating_deadline(CA::WindowServer::Display *this)
{
  return 0.0;
}

uint64_t CA::WindowServer::Display::secure_indicator_swap_end(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::hide_secure_indicators(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::swap_secure_indicator()
{
  return 0;
}

uint64_t CA::WindowServer::Display::secure_indicator_active(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::set_secure_indicator_state(CA::WindowServer::Display *this)
{
  return 1;
}

uint64_t CA::WindowServer::Display::last_frame_rtplc_capped(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::last_frame_rtplc_triggered(CA::WindowServer::Display *this)
{
  return 0;
}

double CA::WindowServer::Display::last_frame_apce(CA::WindowServer::Display *this)
{
  return 0.0;
}

double CA::WindowServer::Display::last_gp1_max_bandwidth(CA::WindowServer::Display *this)
{
  return 0.0;
}

double CA::WindowServer::Display::last_gp1_obs_bandwidth(CA::WindowServer::Display *this)
{
  return 0.0;
}

double CA::WindowServer::Display::last_gp0_max_bandwidth(CA::WindowServer::Display *this)
{
  return 0.0;
}

double CA::WindowServer::Display::last_gp0_obs_bandwidth(CA::WindowServer::Display *this)
{
  return 0.0;
}

uint64_t CA::WindowServer::Display::has_deferred_brightness_tx_callbacks(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::edr_scaling_applied_in_gp(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::gamma_adjustment_curves(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::blackpoint_curve(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::system_gamma_curve(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::supports_display_tonemap(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::supports_icc_color_management(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::display_color_space(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::blend_color_space(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::compositing_color_space(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::update_request_callback(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::has_detached_layer(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::triple_buffered(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::surface_is_replaceable(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::VirtualDisplay::new_server(CFTypeRef *this)
{
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  unint64_t v3 = (CA::WindowServer::Server *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x2C8uLL, 0x743898A5uLL);
  uint64_t v4 = (uint64_t)v3;
  if (v3)
  {
    CA::WindowServer::Server::Server(v3, (CA::WindowServer::Display *)this, this[1]);
    *(void *)uint64_t v4 = &unk_1ED023FA8;
    *(_OWORD *)(v4 + 648) = 0u;
    *(_OWORD *)(v4 + 664) = 0u;
    *(_OWORD *)(v4 + 680) = 0u;
    pthread_mutex_init((pthread_mutex_t *)(v4 + 536), 0);
    pthread_cond_init((pthread_cond_t *)(v4 + 600), 0);
    pthread_mutex_lock((pthread_mutex_t *)(v4 + 536));
    CA::WindowServer::VirtualServer::add_runloop_source(v4, v5);
    if ((*(unsigned int (**)(void))(**(void **)(v4 + 96) + 216))(*(void *)(v4 + 96))) {
      CA::WindowServer::VirtualServer::add_vsync_source(v4, v6);
    }
    pthread_mutex_unlock((pthread_mutex_t *)(v4 + 536));
  }
  return v4;
}

uint64_t CA::WindowServer::Display::is_frozen(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::is_freezing(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::acquire_frozen_surface(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::allows_remote_control_layers(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::notifies_on_disallowed_cloning_layers(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::ignores_inhibit_cloning(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::needs_alpha_unpremultiply(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::needs_passthrough(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::supports_edr_factor(CA::WindowServer::Display *this)
{
  return 0;
}

float CA::WindowServer::Display::brightness_scale(CA::WindowServer::Display *this)
{
  return 1.0;
}

uint64_t CA::WindowServer::Display::needs_p3_clamp(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::od_lut_version(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::needs_overdrive(CA::WindowServer::Display *this)
{
  return 0;
}

double CA::WindowServer::Display::workaround_matrix@<D0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_184997DC0;
  a1[1] = xmmword_184997DD0;
  double result = 0.0;
  a1[2] = xmmword_184997DE0;
  a1[3] = xmmword_184997DF0;
  return result;
}

void *CA::WindowServer::Display::ax_ns_color_matrix(CA::WindowServer::Display *this)
{
  return &CA::Mat4Impl::mat4_identity_float;
}

uint64_t CA::WindowServer::Display::supports_color_matrix(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::protection_options(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::transport_type(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::set_preset_properties()
{
  return 0;
}

double CA::WindowServer::Display::preset_properties@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  double result = 1.0;
  *(_OWORD *)(a1 + 24) = xmmword_184997D50;
  return result;
}

double CA::WindowServer::Display::edid_attributes@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)((char *)a1 + 28) = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

double CA::WindowServer::Display::gamma(CA::WindowServer::Display *this)
{
  return 0.0;
}

double CA::WindowServer::Display::chromaticity@<D0>(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t CA::WindowServer::Display::set_contrast_enhancer_strength(CA::WindowServer::Display *this, float a2)
{
  return 0;
}

double CA::WindowServer::Display::contrast_enhancer_strength(CA::WindowServer::Display *this)
{
  return 0.0;
}

uint64_t CA::WindowServer::Display::set_indicator_brightness_limit(CA::WindowServer::Display *this, float a2)
{
  return 0;
}

uint64_t CA::WindowServer::Display::set_indicator_brightness(CA::WindowServer::Display *this, float a2)
{
  return 0;
}

double CA::WindowServer::Display::indicator_brightness(CA::WindowServer::Display *this)
{
  return 0.0;
}

uint64_t CA::WindowServer::Display::set_high_ambient_adaptation_strength(CA::WindowServer::Display *this, float a2)
{
  return 0;
}

double CA::WindowServer::Display::high_ambient_adaptation_strength(CA::WindowServer::Display *this)
{
  return 0.0;
}

uint64_t CA::WindowServer::Display::set_low_ambient_adaptation_strength(CA::WindowServer::Display *this, float a2)
{
  return 0;
}

double CA::WindowServer::Display::low_ambient_adaptation_strength(CA::WindowServer::Display *this)
{
  return 0.0;
}

uint64_t CA::WindowServer::Display::supports_ambient_adaptation(CA::WindowServer::Display *this)
{
  return 0;
}

double CA::WindowServer::Display::filtered_ambient_lux(CA::WindowServer::Display *this)
{
  return 0.0;
}

uint64_t CA::WindowServer::Display::average_pixel_constraints(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::dm_version(CA::WindowServer::Display *this)
{
  return 0xFFFFFFFFLL;
}

void CA::WindowServer::Display::luminance(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t CA::WindowServer::Display::set_preset(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::preserve_apple_SRGB_gamma_response(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::trinity_cabal_config(CA::WindowServer::Display *this)
{
  return 0;
}

double CA::WindowServer::Display::maximum_reference_luminance(CA::WindowServer::Display *this)
{
  return 0.0;
}

double CA::WindowServer::Display::minimum_luminance(CA::WindowServer::Display *this)
{
  return 0.0;
}

double CA::WindowServer::Display::maximum_sdr_luminance(CA::WindowServer::Display *this)
{
  return 0.0;
}

double CA::WindowServer::Display::maximum_hdr_luminance(CA::WindowServer::Display *this)
{
  return 0.0;
}

float CA::WindowServer::Display::ui_scale_factor(CA::WindowServer::Display *this)
{
  return 1.0;
}

float CA::WindowServer::Display::auto_luminance_boost(CA::WindowServer::Display *this)
{
  return 1.0;
}

uint64_t CA::WindowServer::Display::subpixel_layout(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::needs_low_latency(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::brightness_control_disabled(CA::WindowServer::Display *this)
{
  return 0;
}

float CA::WindowServer::Display::maximum_brightness(CA::WindowServer::Display *this)
{
  return 1.0;
}

double CA::WindowServer::Display::temperature(CA::WindowServer::Display *this)
{
  return 0.0;
}

double CA::WindowServer::Display::luma_boost_scale(CA::WindowServer::Display *this)
{
  return 0.0;
}

uint64_t CA::WindowServer::Display::needs_brightness_update(CA::WindowServer::Display *this)
{
  return 0;
}

float CA::WindowServer::Display::default_ui_nits(CA::WindowServer::Display *this)
{
  return 200.0;
}

uint64_t CA::WindowServer::Display::set_brightness_limit(CA::WindowServer::Display *this, float a2)
{
  return 0;
}

double CA::WindowServer::Display::brightness_limit(CA::WindowServer::Display *this)
{
  return 0.0;
}

uint64_t CA::WindowServer::Display::set_sdr_nits(CA::WindowServer::Display *this, float a2)
{
  return 0;
}

float CA::WindowServer::Display::sdr_nits(CA::WindowServer::Display *this)
{
  return 100.0;
}

double CA::WindowServer::Display::contrast(CA::WindowServer::Display *this)
{
  return 0.0;
}

uint64_t CA::WindowServer::Display::grayscale(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::allows_edr(CA::WindowServer::Display *this)
{
  return 1;
}

uint64_t CA::WindowServer::Display::actual_inverse_color(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::inverse_color(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::unconvert_logical_orientation(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t CA::WindowServer::Display::convert_logical_orientation(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t CA::WindowServer::Display::preferred_ui_scale(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::VirtualDisplay::copy_string(uint64_t a1, int a2, char *a3, size_t a4)
{
  if (a2) {
    return 0;
  }
  unint64_t v5 = *(const char **)(a1 + 25632);
  if (!v5 || strlen(*(const char **)(a1 + 25632)) + 1 > a4) {
    return 0;
  }
  strcpy(a3, v5);
  return 1;
}

uint64_t CA::WindowServer::VirtualDisplay::minimum_frame_duration(CA::WindowServer::VirtualDisplay *this)
{
  return *((unsigned int *)this + 6402);
}

double CA::WindowServer::VirtualDisplay::heartbeat_rate(CA::WindowServer::VirtualDisplay *this)
{
  if (*((void *)this + 80) == -1) {
    return *((double *)this + 3202);
  }
  double v2 = (*(double (**)(CA::WindowServer::VirtualDisplay *))(*(void *)this + 744))(this);
  LODWORD(v3) = *((_DWORD *)this + 6402);
  return v2 / (double)v3;
}

uint64_t CA::WindowServer::Display::dynamic_refresh_rate(CA::WindowServer::Display *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 744))();
}

double CA::WindowServer::VirtualDisplay::refresh_rate(CA::WindowServer::VirtualDisplay *this)
{
  unint64_t v1 = *((void *)this + 80);
  if (v1 == -1) {
    return *((double *)this + 3200);
  }
  uint64_t v2 = (v1 >> 29) & 0x1FFFFFF;
  if (v2) {
    return 65536.0 / (double)v2;
  }
  else {
    return 0.0;
  }
}

double CA::WindowServer::Display::hardware_refresh_rate(CA::WindowServer::Display *this)
{
  return 0.0166666667;
}

uint64_t CA::WindowServer::VirtualDisplay::set_mode(CA::WindowServer::VirtualDisplay *this, const CA::WindowServer::Display::Mode *a2)
{
  v41[7] = *MEMORY[0x1E4F143B8];
  uint64_t result = CA::WindowServer::Display::Mode::operator==(*((void *)this + 80), *(void *)a2);
  if (result) {
    return result;
  }
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 560));
  CA::WindowServer::Display::set_mode(this, a2);
  if (*((void *)this + 6) && (*((unsigned char *)this + 56) & 1) != 0)
  {
    uint64_t v12 = *((void *)this + 3206);
    goto LABEL_7;
  }
  uint64_t v12 = *((void *)this + 3206);
  uint64_t v13 = *(void *)a2;
  if (CA::WindowServer::Display::Mode::operator==(v12, v13))
  {
LABEL_7:
    char v14 = 1;
    goto LABEL_8;
  }
  char v14 = 0;
  *((void *)this + 3206) = v13;
  uint64_t v12 = v13;
LABEL_8:
  float v15 = (uint64_t *)((char *)this + 25648);
  __asm { FMOV            V0.2D, #1.0 }
  long long v37 = _Q0;
  if (v12)
  {
    os_unfair_lock_lock((os_unfair_lock_t)this + 98);
    CA::WindowServer::Display::ModeSet::ModeSet((CA::WindowServer::Display::ModeSet *)__p, (CA::WindowServer::VirtualDisplay *)((char *)this + 400));
    os_unfair_lock_unlock((os_unfair_lock_t)this + 98);
    CFStringRef v22 = (uint64_t *)__p[0];
    double v21 = (uint64_t *)__p[1];
    if (__p[0] == __p[1])
    {
      BOOL v24 = 1;
    }
    else
    {
      uint64_t v23 = *v15;
      while ((CA::WindowServer::Display::Mode::operator==(*v22, v23) & 1) == 0)
      {
        if (++v22 == v21)
        {
          CFStringRef v22 = v21;
          break;
        }
      }
      BOOL v24 = v22 == v21;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)v41);
    std::__tree<std::tuple<unsigned short,unsigned short>>::destroy(v40);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v24)
    {
      uint64_t *v15 = 0;
LABEL_22:
      (*(void (**)(CA::WindowServer::VirtualDisplay *))(*(void *)this + 2184))(this);
      unsigned int v26 = *((_DWORD *)this + 6412);
      LODWORD(v38) = v26 & 0x3FFF;
      HIDWORD(v38) = (v26 >> 14) & 0x3FFF;
      *(_OWORD *)__p = v37;
      CA::WindowServer::Display::set_size((uint64_t)this, (uint64_t)&v38, (uint64_t)&v38, (double *)__p, *(double *)&v37, v27, v28, v29, v30, v31, v32, v33);
      CA::WindowServer::Display::set_mode(this, (CA::WindowServer::VirtualDisplay *)((char *)this + 25648));
      char v25 = 0;
      goto LABEL_23;
    }
  }
  if ((v14 & 1) == 0) {
    goto LABEL_22;
  }
  char v25 = 1;
LABEL_23:
  if (!*((unsigned char *)this + 636) || (uint64_t v34 = *((void *)this + 80)) == 0)
  {
    uint64_t v38 = 0;
    goto LABEL_28;
  }
  if (*((unsigned char *)this + 636) == 2)
  {
    LODWORD(v38) = v34 & 0x3FFF;
    HIDWORD(v38) = (v34 >> 14) & 0x3FFF;
LABEL_28:
    *(_OWORD *)__p = v37;
    CA::WindowServer::Display::set_size((uint64_t)this, (uint64_t)&v38, (uint64_t)&v38, (double *)__p, *(double *)&v37, v5, v6, v7, v8, v9, v10, v11);
  }
  if ((v25 & 1) == 0) {
    CA::WindowServer::Display::post_display_changed((uint64_t)this);
  }
  os_unfair_lock_lock((os_unfair_lock_t)this + 6432);
  if (*((void *)this + 3217))
  {
    double v35 = (*(double (**)(CA::WindowServer::VirtualDisplay *))(*(void *)this + 744))(this);
    if (v35 != 0.0 && (*(void *)&v35 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL) {
      atomic_store(CAHostTimeWithTime(v35), (unsigned int *)(*((void *)this + 3217) + 4));
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)this + 6432);

  return pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 560));
}

uint64_t CA::WindowServer::Display::virtual_display_mode(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::clone_exceeds_display_bandwidth_limits_p()
{
  return 0;
}

uint64_t CA::WindowServer::Display::cloning_active(CA::WindowServer::Display *this)
{
  return 0;
}

double CA::WindowServer::Display::clone_scale(CA::WindowServer::Display *this, CA::WindowServer::Display *a2)
{
  return 0.0;
}

uint64_t CA::WindowServer::Display::update_cloning_flag(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::VirtualDisplay::clone_update(os_unfair_lock_s *this, CA::WindowServer::Server *a2, CA::WindowServer::Display *a3, CA::Render::Update *a4, unsigned int *a5, BOOL *a6)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    buffer = CA::WindowServer::VirtualDisplay::allocate_buffer((uint64_t)this, (uint64_t)&this[4 * LOBYTE(this[6406]._os_unfair_lock_opaque) + 6384], *((void *)a4 + 36));
    uint64_t v11 = *((void *)buffer + 3);
    if (!v11)
    {
      uint64_t v13 = buffer;
      uint64_t v14 = (*(uint64_t (**)(CA::WindowServer::Display *))(*(void *)a3 + 1400))(a3);
      uint64_t v11 = (*(uint64_t (**)(os_unfair_lock_s *, uint64_t, void, uint64_t, void))(*(void *)&this->_os_unfair_lock_opaque
                                                                                            + 488))(this, 1, 0, v14, 0);
      *((void *)v13 + 3) = v11;
    }
    uint64_t v15 = (*(uint64_t (**)(CA::WindowServer::Display *, uint64_t))(*(void *)a3 + 480))(a3, 1);
    if (v11) {
      BOOL v16 = v15 == 0;
    }
    else {
      BOOL v16 = 1;
    }
    if (v16
      || ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void, void, void, float))(*(void *)v11 + 176))(v11, v15, 0x8000, 0, 0, 0, 0, 1.0) & 1) == 0)
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        BOOL v17 = x_log_category_windowserver;
        if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)unint64_t v19 = 0;
          _os_log_impl(&dword_184668000, v17, OS_LOG_TYPE_ERROR, "VirtualDisplay::clone_update failed to copy surface\n", v19, 2u);
        }
      }
    }
    if (CA::WindowServer::VirtualDisplay::finish_update_(this, a4, *a5)) {
      return -7;
    }
    else {
      return 0;
    }
  }
  else
  {
    return -19;
  }
}

_DWORD *CA::WindowServer::VirtualDisplay::allocate_buffer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(_DWORD **)(a2 + 8);
  if (!v3)
  {
    double v6 = *(void **)(a1 + 25584);
    if (!v6) {
      goto LABEL_16;
    }
    unint64_t v3 = 0;
    uint64_t v8 = 0x7FFFFFFFFFFFFFFFLL;
    do
    {
      uint64_t v9 = v6[3];
      if ((!v9 || (*(uint64_t (**)(uint64_t))(*(void *)v9 + 216))(v9) == a3)
        && !*((_DWORD *)v6 + 2)
        && !v6[3])
      {
        double v10 = (CA::Shape *)v6[2];
        if (v10)
        {
          uint64_t v11 = CA::Shape::area(v10);
          if (v11 < v8)
          {
            unint64_t v3 = v6;
            uint64_t v8 = v11;
          }
        }
        else
        {
          uint64_t v8 = 0;
          unint64_t v3 = v6;
        }
      }
      double v6 = (void *)*v6;
    }
    while (v6);
    if (v3)
    {
      ++v3[2];
    }
    else
    {
LABEL_16:
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      unint64_t v3 = malloc_type_zone_calloc(malloc_zone, 1uLL, 0x20uLL, 0x743898A5uLL);
      *(void *)unint64_t v3 = *(void *)(a1 + 25584);
      *(void *)(a1 + 25584) = v3;
      v3[2] = 1;
    }
    *(void *)(a2 + 8) = v3;
  }
  return v3;
}

uint64_t CA::WindowServer::VirtualDisplay::finish_update_(os_unfair_lock_s *this, CA::Render::Update *a2, unsigned int a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unsigned int v8 = a3;
  int os_unfair_lock_opaque_low = LOBYTE(this[6406]._os_unfair_lock_opaque);
  this[4 * LOBYTE(this[6406]._os_unfair_lock_opaque) + 6384] = *(os_unfair_lock_s *)((char *)a2 + 248);
  BYTE1(this[6406]._os_unfair_lock_opaque) = os_unfair_lock_opaque_low;
  LOBYTE(this[6406]._os_unfair_lock_opaque) = os_unfair_lock_opaque_low
                                            + 1
                                            - 3 * ((21846 * (os_unfair_lock_opaque_low + 1)) >> 16);
  uint32_t os_unfair_lock_opaque = this[4
                             * (unsigned __int16)(os_unfair_lock_opaque_low
                                                + 1
                                                - 3 * ((21846 * (os_unfair_lock_opaque_low + 1)) >> 16))
                             + 6384]._os_unfair_lock_opaque;
  if (os_unfair_lock_opaque) {
    this[6398]._uint32_t os_unfair_lock_opaque = os_unfair_lock_opaque;
  }
  uint64_t updated = CA::WindowServer::Display::update_clones((CA::WindowServer::Display *)this, a2, &v8);
  CA::WindowServer::Display::purge_surfaces(this, 0);
  return updated;
}

uint64_t CA::WindowServer::Display::presents_metal_layer_on_finish(CA::WindowServer::Display *this)
{
  return 0;
}

double CA::WindowServer::Display::detaching_rect@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t CA::WindowServer::Display::is_detaching(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::tonemap_surface()
{
  return 0;
}

uint64_t CA::WindowServer::Display::cloning_termination_surface(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::allocate_cloning_termination_surface(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::needs_cloning_termination(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::detached_edr_layers_valid_p(CA::WindowServer::Display *this, const CA::Render::Update *a2)
{
  return 1;
}

uint64_t CA::WindowServer::Display::detached_layers_valid_p(CA::WindowServer::Display *this, const CA::Render::Update *a2)
{
  return 1;
}

uint64_t CA::WindowServer::Display::detach_layer()
{
  return 0;
}

uint64_t CA::WindowServer::Display::needs_visible_shape_tracking(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::color_flush_color(CA::WindowServer::Display *this)
{
  return 3772776672;
}

uint64_t CA::WindowServer::VirtualDisplay::needs_backstop_window(CA::WindowServer::VirtualDisplay *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::change_update_seed(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::VirtualDisplay::update_surface_has_alpha(CA::WindowServer::VirtualDisplay *this)
{
  return 0;
}

_DWORD *CA::WindowServer::VirtualDisplay::update_surface(CA::WindowServer::VirtualDisplay *this, int a2, char a3, uint64_t a4)
{
  uint64_t v4 = *((void *)this + 2 * *((unsigned __int8 *)this + 25624) + 3193);
  if (!v4) {
    return 0;
  }
  uint64_t v9 = *((unsigned int *)this + 52);
  uint64_t v10 = *((unsigned int *)this + 53);
  surface = *(_DWORD **)(v4 + 24);
  uint64_t v12 = (*(uint64_t (**)(CA::WindowServer::VirtualDisplay *))(*(void *)this + 200))(this);
  if (byte_1EB2ACC49
    || (uint64_t v13 = v12, CA::WindowServer::Display::Mode::is_hdr((CA::WindowServer::VirtualDisplay *)((char *)this + 25648))))
  {
    uint64_t v13 = 1380411457;
  }
  if (CADeviceUseFramebufferCompression::once != -1) {
    dispatch_once(&CADeviceUseFramebufferCompression::once, &__block_literal_global_30);
  }
  if (!CADeviceUseFramebufferCompression::enable_compression) {
    goto LABEL_13;
  }
  if (CADeviceSupportsUniversalCompression::once != -1) {
    dispatch_once(&CADeviceSupportsUniversalCompression::once, &__block_literal_global_37_12054);
  }
  if (CADeviceSupportsUniversalCompression::universal && !BYTE1(xmmword_1EB2ACC10) && (a3 & 1) == 0)
  {
    uint64_t v13 = CA::Render::fourcc_compressed_of_type((CA::Render *)v13, 3, 0);
    if (surface) {
      goto LABEL_14;
    }
  }
  else
  {
LABEL_13:
    if (surface)
    {
LABEL_14:
      if (surface[14] == v9
        && surface[15] == v10
        && (*(uint64_t (**)(_DWORD *))(*(void *)surface + 216))(surface) == a4
        && surface[16] == v13)
      {
        return surface;
      }
      goto LABEL_21;
    }
  }
  if (!a2) {
    return 0;
  }
LABEL_21:
  CFStringRef v14 = CFStringCreateWithFormat(0, 0, @"%@ Framebuffer", *((void *)this + 1));
  surface = (_DWORD *)CA::WindowServer::Display::allocate_surface((uint64_t)this, v9, v10, (CA::Render *)v13, 0, 2u, 0, a4, (uint64_t)v14, 0);
  CFRelease(v14);
  if (surface)
  {
    if (*(void *)(v4 + 16)) {
      CA::shape_union((CA::Shape **)(v4 + 16), (CA::Shape **)this + 25, v15);
    }
    BOOL v16 = *(CA::WindowServer::Surface **)(v4 + 24);
    if (v16) {
      CA::WindowServer::Surface::unref(v16);
    }
    *(void *)(v4 + 24) = surface;
  }
  return surface;
}

uint64_t CA::WindowServer::VirtualDisplay::displayed_surface(CA::WindowServer::VirtualDisplay *this)
{
  uint64_t v1 = *((void *)this + 2 * *((unsigned __int8 *)this + 25625) + 3193);
  if (v1) {
    return *(void *)(v1 + 24);
  }
  else {
    return 0;
  }
}

void CA::WindowServer::Display::cancel_all_swaps(CA::WindowServer::Display *this)
{
}

void CA::WindowServer::Display::present_surface(CA::WindowServer::Display *this, __IOSurface *a2)
{
}

uint64_t CA::WindowServer::Display::current_surface_is_read_only(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::VirtualDisplay::current_surface(CA::WindowServer::VirtualDisplay *this, uint64_t a2, unint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(CA::WindowServer::VirtualDisplay *, uint64_t, uint64_t, void, uint64_t))(*(void *)this + 488))(this, 1, a2, 0, a4);
}

uint64_t CA::WindowServer::VirtualDisplay::finish_update(CA::WindowServer::VirtualDisplay *this, CA::Render::Update *a2, unsigned int a3)
{
  if (!(*(unsigned int (**)(CA::WindowServer::VirtualDisplay *))(*(void *)this + 216))(this)
    || !*((void *)this + 80))
  {
    return 0;
  }
  uint64_t v6 = *((void *)this + 2 * *((unsigned __int8 *)this + 25624) + 3193);
  double v7 = *(CA::Shape **)(v6 + 16);
  if (!v7) {
    goto LABEL_10;
  }
  if ((v7 & 1) == 0)
  {
    if (*((_DWORD *)v7 + 1) == 6) {
      goto LABEL_11;
    }
    goto LABEL_9;
  }
  if (v7 != (CA::Shape *)1)
  {
LABEL_9:
    CA::Shape::unref(v7);
LABEL_10:
    *(void *)(v6 + 16) = 1;
  }
LABEL_11:
  *((double *)a2 + 16) = (double)mach_absolute_time();

  return CA::WindowServer::VirtualDisplay::finish_update_((os_unfair_lock_s *)this, a2, a3);
}

CA::Shape *CA::WindowServer::VirtualDisplay::begin_update(CA::Shape ***this, CA::Render::Update *a2)
{
  double result = (CA::Shape *)((uint64_t (*)(CA::Shape ***))(*this)[27])(this);
  if (result && this[80])
  {
    uint64_t v6 = &this[2 * *((unsigned __int8 *)this + 25624) + 3192];
    double v7 = this[3198];
    if (v7)
    {
      unsigned int v8 = (CA::Shape **)*((void *)a2 + 2);
      do
      {
        if (v7[2]) {
          CA::shape_union(v7 + 2, v8, v5);
        }
        double v7 = (CA::Shape **)*v7;
      }
      while (v7);
    }
    buffer = CA::WindowServer::VirtualDisplay::allocate_buffer((uint64_t)this, (uint64_t)v6, *((void *)a2 + 36));
    uint64_t v10 = (const CA::Shape *)*((void *)buffer + 2);
    if (!v10 || !*((void *)buffer + 3)) {
      uint64_t v10 = (const CA::Shape *)this[27];
    }
    return CA::Render::Update::set_shape(a2, v10);
  }
  return result;
}

uint64_t CA::WindowServer::Display::work_interval(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::composited_update(CA::WindowServer::Display *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 360))();
}

uint64_t CA::WindowServer::VirtualDisplay::finished_update(CA::WindowServer::VirtualDisplay *this)
{
  return *((unsigned int *)this + 6398);
}

uint64_t CA::WindowServer::VirtualDisplay::can_update(CA::WindowServer::VirtualDisplay *this, double a2, double a3)
{
  return (*((unsigned __int8 *)this + 746) << 31 >> 31) & 0xFB;
}

uint64_t CA::WindowServer::Display::ignore_update_p(CA::WindowServer::Display *this, const CA::Render::Update *a2)
{
  return 0;
}

uint64_t CA::WindowServer::Display::needs_update(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::flipbook_suppressed(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::flipbook_enabled(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::force_fixed_display_links(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::dmrr_enabled(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::blanking_removes_power(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::VirtualDisplay::set_enabled(uint64_t this, char a2)
{
  *(unsigned char *)(this + 25640) = *(unsigned char *)(this + 25640) & 0xFE | a2;
  return this;
}

uint64_t CA::WindowServer::VirtualDisplay::is_enabled(CA::WindowServer::VirtualDisplay *this)
{
  return *((unsigned char *)this + 25640) & 1;
}

uint64_t CA::WindowServer::Display::is_ready(CA::WindowServer::Display *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 216))();
}

uint64_t CA::WindowServer::VirtualDisplay::framebuffer_format(CA::WindowServer::VirtualDisplay *this)
{
  uint64_t v1 = (unsigned int *)((char *)this + 25628);
  if ((*((unsigned char *)this + 25640) & 2) != 0
    && CA::WindowServer::Display::Mode::is_hdr((CA::WindowServer::VirtualDisplay *)((char *)this + 640)))
  {
    return 1380411457;
  }
  else
  {
    return *v1;
  }
}

uint64_t CA::WindowServer::Display::framebuffer(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::VirtualDisplay::supports_hlg(CA::WindowServer::VirtualDisplay *this)
{
  return 1;
}

uint64_t CA::WindowServer::VirtualDisplay::supports_pq(CA::WindowServer::VirtualDisplay *this)
{
  return 1;
}

uint64_t CA::WindowServer::Display::iosurface_accelerator_supports_color_remap(CA::WindowServer::Display *this)
{
  return 1;
}

uint64_t CA::WindowServer::Display::iosurface_accelerator_supports_scale_p(CA::WindowServer::Display *this)
{
  return 1;
}

uint64_t CA::WindowServer::Display::iosurface_accelerator_supports_size_p(CA::WindowServer::Display *this)
{
  return 1;
}

uint64_t CA::WindowServer::Display::timing_server_frame_interval(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::display_timings_shmem(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::is_game_mode(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::full_frame_required(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::max_src_rect_pixels(CA::WindowServer::Display *this)
{
  return 2304000;
}

uint64_t CA::WindowServer::Display::max_src_rect_width(CA::WindowServer::Display *this)
{
  return 1920;
}

uint64_t CA::WindowServer::Display::min_src_rect_size(CA::WindowServer::Display *this)
{
  return 32;
}

uint64_t CA::WindowServer::Display::max_layer_bandwidth(CA::WindowServer::Display *this)
{
  return 0;
}

double CA::WindowServer::VirtualDisplay::max_scale(CA::WindowServer::VirtualDisplay *this)
{
  return 8.0;
}

double CA::WindowServer::VirtualDisplay::min_scale(CA::WindowServer::VirtualDisplay *this)
{
  return 0.1;
}

double CA::WindowServer::VirtualDisplay::panel_physical_size(CA::WindowServer::VirtualDisplay *this)
{
  return *((double *)this + 3214);
}

void CA::WindowServer::VirtualDisplay::~VirtualDisplay(CA::WindowServer::VirtualDisplay *this)
{
  CA::WindowServer::VirtualDisplay::~VirtualDisplay(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t vars8;

  *(void *)this = &unk_1ED0241B8;
  CA::WindowServer::VirtualDisplay::release_everything(this);
  os_unfair_lock_lock((os_unfair_lock_t)this + 6432);
  uint64_t v2 = *((void *)this + 3217);
  if (v2) {
    MEMORY[0x185323DC0](v2, 0x1000C40D4C8612BLL);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)this + 6432);
  free(*((void **)this + 3204));
  unint64_t v3 = (void *)*((void *)this + 3212);
  if (v3) {
    free(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 3209);
  if (v4)
  {
    do
    {
      double v5 = (void *)*v4;
      operator delete(v4);
      uint64_t v4 = v5;
    }
    while (v5);
  }
  uint64_t v6 = (void *)*((void *)this + 3207);
  *((void *)this + 3207) = 0;
  if (v6) {
    operator delete(v6);
  }

  CA::WindowServer::Display::~Display(this);
}

CATintedImage *CACodingCreateProxy(NSCoder *a1, objc_object *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)MEMORY[0x185324A30]();
  AssociatedObject = objc_getAssociatedObject(a1, CACodingCreateProxy);
  if (!AssociatedObject)
  {
    memset(&keyCallBacks.copyDescription, 0, 24);
    keyCallBacks.versiouint64_t n = 0;
    v17.versiouint64_t n = 0;
    v17.copyDescriptiouint64_t n = 0;
    v17.equal = 0;
    keyCallBacks.retaiuint64_t n = (CFDictionaryRetainCallBack)cache_retain;
    keyCallBacks.release = (CFDictionaryReleaseCallBack)cache_release;
    v17.retaiuint64_t n = (CFDictionaryRetainCallBack)cache_retain;
    v17.release = (CFDictionaryReleaseCallBack)cache_release;
    AssociatedObject = CFDictionaryCreateMutable(0, 0, &keyCallBacks, &v17);
    objc_setAssociatedObject(a1, CACodingCreateProxy, AssociatedObject, (void *)0x301);
    CFRelease(AssociatedObject);
  }
  Value = (void *)CFDictionaryGetValue((CFDictionaryRef)AssociatedObject, a2);
  if (Value)
  {
    double v7 = Value;
    goto LABEL_41;
  }
  if (coding_once == -1)
  {
    if (!a2) {
      goto LABEL_40;
    }
  }
  else
  {
    dispatch_once_f(&coding_once, 0, (dispatch_function_t)coding_init);
    if (!a2) {
      goto LABEL_40;
    }
  }
  CFTypeID v8 = CFGetTypeID(a2);
  uint64_t v9 = (objc_object *)objc_opt_class();
  if (([(objc_object *)v9 isSubclassOfClass:objc_opt_class()] & 1) == 0
    && ([(objc_object *)v9 isSubclassOfClass:objc_opt_class()] & 1) != 0
    || v8 == CGColorGetTypeID()
    || v8 == CGImageGetTypeID()
    || v8 == CGPatternGetTypeID()
    || v8 == CGPathGetTypeID()
    || v8 == CFArrayGetTypeID()
    || v8 == CFDictionaryGetTypeID())
  {
    goto LABEL_30;
  }
  if (CAEncodeBackingStores)
  {
    if (CABackingStoreGetTypeID::once[0] != -1) {
      dispatch_once(CABackingStoreGetTypeID::once, &__block_literal_global_907);
    }
    if (v8 == CABackingStoreGetTypeID::type)
    {
      uint64_t v10 = +[CATintedImage tintedImageWithCABackingStore:a2];
      uint64_t v11 = [(CATintedImage *)v10 image];
      uint64_t v12 = (CATintedImage *)*MEMORY[0x1E4F1D260];
      if (v11) {
        uint64_t v12 = v10;
      }
      CodingProxCGFloat y = v12;
      goto LABEL_32;
    }
  }
  if (v8 == IOSurfaceGetTypeID() || v8 == CVPixelBufferGetTypeID()) {
    goto LABEL_30;
  }
  if (CAMachPortGetTypeID::once[0] != -1) {
    dispatch_once(CAMachPortGetTypeID::once, &__block_literal_global_5766);
  }
  if (v8 == CAMachPortGetTypeID::type) {
    goto LABEL_30;
  }
  if (CAImageQueueGetTypeID::once != -1) {
    dispatch_once(&CAImageQueueGetTypeID::once, &__block_literal_global_14584);
  }
  if (v8 == CAImageQueueGetTypeID::type)
  {
LABEL_30:
    CFStringRef v14 = (objc_class *)objc_opt_class();
    if (v14)
    {
      CodingProxCGFloat y = (CATintedImage *)[[v14 alloc] initWithObject:a2];
      goto LABEL_32;
    }
LABEL_40:
    double v7 = 0;
    goto LABEL_41;
  }
  if ([(objc_object *)v9 isSubclassOfClass:objc_opt_class()]
    && debugging_coder(a1))
  {
    CodingProxCGFloat y = (CATintedImage *)CALayerCreateCodingProxy(v9, (objc_class *)a2, v15);
  }
  else
  {
    if ([(objc_object *)a2 conformsToProtocol:&unk_1ED05CD60]) {
      goto LABEL_40;
    }
    CodingProxCGFloat y = (CATintedImage *)(id)*MEMORY[0x1E4F1D260];
  }
LABEL_32:
  double v7 = CodingProxy;
  if (CodingProxy) {
    CFDictionarySetValue((CFMutableDictionaryRef)AssociatedObject, a2, CodingProxy);
  }
LABEL_41:
  return v7;
}

void sub_1848002B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t debugging_coder(NSCoder *a1)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    [(NSCoder *)a1 delegate];
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
  }
  else
  {
    char isKindOfClass = 0;
  }
  return isKindOfClass & 1;
}

uint64_t CALayerCreateCodingProxy(objc_object *a1, objc_class *a2, CALayer *a3)
{
  if (coding_once != -1) {
    dispatch_once_f(&coding_once, 0, (dispatch_function_t)coding_init);
  }
  uint64_t v5 = [MEMORY[0x1E4F28B50] bundleForClass:a1];
  if (v5 == self_bundle) {
    return 0;
  }
  do
  {
    a1 = (objc_object *)[(objc_object *)a1 superclass];
    if (!a1) {
      break;
    }
    uint64_t v6 = [MEMORY[0x1E4F28B50] bundleForClass:a1];
  }
  while (v6 != self_bundle);
  id v7 = objc_alloc((Class)a1);

  return [v7 _initWithReference:a2];
}

void encodePathSegment(void *a1, const CGPathElement *a2)
{
  unint64_t v3 = [[CACGPathCodingSegment alloc] initWithCGPathElement:a2];
  [a1 addObject:v3];
}

void pattern_draw(CGImage *a1, CGContext *a2)
{
  double Width = (double)CGImageGetWidth(a1);
  double Height = (double)CGImageGetHeight(a1);
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  double v8 = Width;

  CGContextDrawImage(a2, *(CGRect *)&v6, a1);
}

void sub_184801EB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t create_cgimage_from_iosurface(__IOSurface *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  unsigned int Width = IOSurfaceGetWidth(a1);
  int Height = IOSurfaceGetHeight(a1);
  signed int PixelFormat = (CA::Render *)IOSurfaceGetPixelFormat(a1);
  if ((int)PixelFormat > 1647534391)
  {
    if (PixelFormat != 1647534392)
    {
      int v5 = 1999843442;
LABEL_6:
      if (PixelFormat == v5) {
        goto LABEL_7;
      }
      uint64_t v7 = *MEMORY[0x1E4F14B00];
      uint64_t v8 = CA::Render::fourcc_compressed_of_type(PixelFormat, 0, 0);
      uint64_t v9 = v8;
      if ((int)v8 <= 1647534391)
      {
        if (v8 != 1111970369 && v8 != 1380411457) {
LABEL_17:
        }
          uint64_t v9 = 1380411457;
      }
      else if (v8 != 1647534392 && v8 != 1999843442)
      {
        if (v8 == 1999908961)
        {
          uint64_t v9 = 1647534392;
          goto LABEL_18;
        }
        goto LABEL_17;
      }
LABEL_18:
      long long v16 = xmmword_184997CD0;
      uint64_t v17 = 1;
      uint64_t v18 = v7;
      uint64_t v19 = 0;
      uint64_t v10 = CA::SurfaceUtil::CAIOSurfaceCreate(Width, Height, v9, 0, 0, 0, 0, &v16, @"CAEncodeIOSurfacesAsCGImages");
      if (!v10) {
        return 0;
      }
      uint64_t v11 = v10;
      if (create_cgimage_from_iosurface(__IOSurface *)::once[0] != -1) {
        dispatch_once(create_cgimage_from_iosurface(__IOSurface *)::once, &__block_literal_global_512);
      }
      uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, __IOSurface *))(*(void *)create_cgimage_from_iosurface(__IOSurface *)::ctx
                                                                                       + 672))(create_cgimage_from_iosurface(__IOSurface *)::ctx, 1, 0, 0, v11);
      uint64_t v13 = (*(uint64_t (**)(void))(*(void *)create_cgimage_from_iosurface(__IOSurface *)::ctx + 672))();
      if (v13) {
        BOOL v14 = v12 == 0;
      }
      else {
        BOOL v14 = 1;
      }
      if (v14)
      {
        if (!v12) {
          goto LABEL_30;
        }
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void))(*(void *)create_cgimage_from_iosurface(__IOSurface *)::ctx
                                                                                           + 720))(create_cgimage_from_iosurface(__IOSurface *)::ctx, v12, v13, 1, 0, 0, 0);
        (*(void (**)(void))(*(void *)create_cgimage_from_iosurface(__IOSurface *)::ctx + 408))();
      }
      CA::OGL::Context::release_surface(create_cgimage_from_iosurface(__IOSurface *)::ctx, v12);
LABEL_30:
      if (v13) {
        CA::OGL::Context::release_surface(create_cgimage_from_iosurface(__IOSurface *)::ctx, v13);
      }
      uint64_t v15 = CGImageCreateFromIOSurface();
      if (v11 != a1) {
        CFRelease(v11);
      }
      return v15;
    }
  }
  else if (PixelFormat != 1111970369)
  {
    int v5 = 1380411457;
    goto LABEL_6;
  }
LABEL_7:

  return CGImageCreateFromIOSurface();
}

void ___Z29create_cgimage_from_iosurfaceP11__IOSurface_block_invoke()
{
  id v0 = CAMetalContextCreate();
  create_cgimage_from_iosurface(__IOSurface *)::ctCGFloat x = CA::OGL::new_metal_context(v0, 0, 0, 0, 0, @"com.apple.coreanimation.CACoding");
}

void sub_184802C10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *context)
{
}

uint64_t ___ZL26iosurface_property_classesv_block_invoke()
{
  id v0 = objc_alloc(MEMORY[0x1E4F1CAD0]);
  uint64_t v1 = objc_opt_class();
  uint64_t v2 = objc_opt_class();
  uint64_t v3 = objc_opt_class();
  uint64_t result = objc_msgSend(v0, "initWithObjects:", v1, v2, v3, objc_opt_class(), 0);
  iosurface_property_classes(void)::classes = result;
  return result;
}

uint64_t ___ZL31iosurface_plane_keys_allow_listv_block_invoke()
{
  id v0 = objc_alloc(MEMORY[0x1E4F1C978]);
  uint64_t result = objc_msgSend(v0, "initWithObjects:", *MEMORY[0x1E4F2F240], *MEMORY[0x1E4F2F258], *MEMORY[0x1E4F2F220], *MEMORY[0x1E4F2F178], *MEMORY[0x1E4F2F170], *MEMORY[0x1E4F2F1F0], *MEMORY[0x1E4F2F1E8], *MEMORY[0x1E4F2EFB0], *MEMORY[0x1E4F2F1D8], *MEMORY[0x1E4F2F1C8], *MEMORY[0x1E4F2F1C0], *MEMORY[0x1E4F2F188], *MEMORY[0x1E4F2F190], *MEMORY[0x1E4F2F168], *MEMORY[0x1E4F2F260], *MEMORY[0x1E4F2F228], *MEMORY[0x1E4F2F180],
             *MEMORY[0x1E4F2F210],
             *MEMORY[0x1E4F2F1B0],
             *MEMORY[0x1E4F2F1B8],
             *MEMORY[0x1E4F2F1D0],
             0);
  iosurface_plane_keys_allow_list(void)::keys = result;
  return result;
}

uint64_t ___ZL25iosurface_keys_allow_listv_block_invoke()
{
  id v0 = objc_alloc(MEMORY[0x1E4F1C978]);
  uint64_t result = objc_msgSend(v0, "initWithObjects:", *MEMORY[0x1E4F2EFB8], *MEMORY[0x1E4F2F2C0], *MEMORY[0x1E4F2F0E8], *MEMORY[0x1E4F2F150], *MEMORY[0x1E4F2EFE0], *MEMORY[0x1E4F2EFD8], *MEMORY[0x1E4F2F0A0], *MEMORY[0x1E4F2F098], 0);
  iosurface_keys_allow_list(void)::keys = result;
  return result;
}

uint64_t ___ZL22iosurface_info_classesv_block_invoke()
{
  id v0 = objc_alloc(MEMORY[0x1E4F1CAD0]);
  uint64_t v1 = objc_opt_class();
  uint64_t v2 = objc_opt_class();
  uint64_t v3 = objc_opt_class();
  uint64_t result = objc_msgSend(v0, "initWithObjects:", v1, v2, v3, objc_opt_class(), 0);
  iosurface_info_classes(void)::classes = result;
  return result;
}

void sub_1848034E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *context)
{
}

uint64_t ___ZL24iosurface_property_namesv_block_invoke()
{
  id v0 = objc_alloc(MEMORY[0x1E4F1C978]);
  uint64_t result = objc_msgSend(v0, "initWithObjects:", *MEMORY[0x1E4F2F068], *MEMORY[0x1E4F2F0B8], *MEMORY[0x1E4F2F0F0], *MEMORY[0x1E4F2F2C8], *MEMORY[0x1E4F2F048], *MEMORY[0x1E4F2F2B0], *MEMORY[0x1E4F2F038], *MEMORY[0x1E4F2F0A8], *MEMORY[0x1E4F2F0B0], *MEMORY[0x1E4F2F140], *MEMORY[0x1E4F2EFF8], *MEMORY[0x1E4F2EFF0], *MEMORY[0x1E4F2F030], 0);
  iosurface_property_names(void)::names = result;
  return result;
}

uint64_t coding_init(void)
{
  uint64_t result = [MEMORY[0x1E4F28B50] bundleForClass:objc_opt_class()];
  self_bundle = result;
  return result;
}

void cache_release(const __CFAllocator *a1, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

CFTypeRef cache_retain(const __CFAllocator *a1, CFTypeRef cf)
{
  if (cf) {
    return CFRetain(cf);
  }
  else {
    return 0;
  }
}

void sub_184803C30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

IMP ___ZL28class_supports_secure_codingP10objc_class_block_invoke(objc_class *a1, const char *a2)
{
  IMP result = class_getMethodImplementation(a1, a2);
  if (result)
  {
    int v5 = result;
    Superclass = class_getSuperclass(a1);
    if (Superclass) {
      return (IMP)(class_getMethodImplementation(Superclass, a2) != v5);
    }
    else {
      return IMP_BOOSTED;
    }
  }
  return result;
}

void save_iosurface_as_png(__IOSurface *a1, uint64_t a2, int a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  cgimage_from_iosurface = (CGImage *)create_cgimage_from_iosurface(a1);
  int v5 = cgimage_from_iosurface;
  if (a3)
  {
    unint64_t Width = CGImageGetWidth(cgimage_from_iosurface);
    unint64_t Height = CGImageGetHeight(v5);
    ColorSpace = CGImageGetColorSpace(v5);
    uint64_t v9 = CGBitmapContextCreate(0, Width, Height, 8uLL, 4 * Width, ColorSpace, 0x2002u);
    transform.double b = 0.0;
    transform.double c = 0.0;
    transform.a = 1.0;
    *(_OWORD *)&transform.d = xmmword_184997E00;
    transform.tCGFloat y = (double)Height;
    CGContextConcatCTM(v9, &transform);
    v13.size.CGFloat width = (double)Width;
    v13.origin.CGFloat x = 0.0;
    v13.origin.CGFloat y = 0.0;
    v13.size.CGFloat height = (double)Height;
    CGContextDrawImage(v9, v13, v5);
    CGImageRef Image = CGBitmapContextCreateImage(v9);
    CGImageRelease(v5);
    CGContextRelease(v9);
    int v5 = Image;
  }
  CGImageWriteToFile();
  CGImageRelease(v5);
}

id CAEncodeLayerTree(objc_class *a1)
{
  return CAEncodeLayerTreeWithInfo(a1, 0);
}

id CAEncodeLayerTreeWithInfo(objc_class *a1, uint64_t a2)
{
  v19[2] = *MEMORY[0x1E4F143B8];
  context = (void *)MEMORY[0x185324A30]();
  +[CATransaction begin];
  +[CATransaction activateBackground:pthread_main_np() == 0];
  uint64_t v4 = (void *)[objc_alloc(MEMORY[0x1E4F28DB0]) initRequiringSecureCoding:1];
  +[CATransaction lock];
  int v5 = objc_opt_new();
  [v4 setDelegate:v5];
  uint64_t v6 = (objc_object *)objc_opt_class();
  CodingProxCGFloat y = CALayerCreateCodingProxy(v6, a1, v7);
  uint64_t v9 = (void *)CodingProxy;
  if (CodingProxy) {
    uint64_t v10 = CodingProxy;
  }
  else {
    uint64_t v10 = (uint64_t)a1;
  }
  v18[0] = @"rootLayer";
  v18[1] = @"geometryFlipped";
  v19[0] = v10;
  v19[1] = objc_msgSend(NSNumber, "numberWithBool:", -[objc_class contentsAreFlipped](a1, "contentsAreFlipped"));
  uint64_t v11 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v19 forKeys:v18 count:2];

  char v12 = CAEncodeBackingStores;
  char v13 = CAEncodeIOSurfacesAsCGImages;
  char v14 = CALayerEncodeAllAnimations;
  CAEncodeBackingStores = 1;
  CAEncodeIOSurfacesAsCGImages = (CAEncodeIOSurfacesAsCGImages | BYTE1(xmmword_1EB2ACC50)) != 0;
  CALayerEncodeAllAnimations = 1;
  [v4 encodeObject:v11 forKey:@"root"];
  if (a2) {
    [v4 encodeObject:a2 forKey:@"userInfo"];
  }
  id v15 = (id)[v4 encodedData];
  +[CATransaction unlock];

  CAEncodeBackingStores = v12;
  CAEncodeIOSurfacesAsCGImages = v13;
  CALayerEncodeAllAnimations = v14;
  +[CATransaction commit];
  return v15;
}

void sub_184804474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *context)
{
}

void __clang_call_terminate(void *a1)
{
}

CFMutableDataRef CAMLEncodeLayerTreeWithInfo(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = (void *)MEMORY[0x185324A30]();
  +[CATransaction begin];
  +[CATransaction activateBackground:pthread_main_np() == 0];
  CFMutableDataRef Mutable = CFDataCreateMutable(0, 0);
  uint64_t v8 = +[CAMLWriter writerWithData:Mutable];
  uint64_t v9 = [[CACodingCAMLWriterDelegate alloc] initWithResourceDir:a2];
  [(CACodingCAMLWriterDelegate *)v9 setImageFormat:CACodingImageFormat];
  if (a3)
  {
    uint64_t v10 = [a3 objectForKeyedSubscript:@"CACodingImageFormat"];
    if (v10)
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        [(CACodingCAMLWriterDelegate *)v9 setImageFormat:v10];
      }
    }
    uint64_t v11 = [a3 objectForKeyedSubscript:@"CACodingImageOptions"];
    if (v11)
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        [(CACodingCAMLWriterDelegate *)v9 setImageEncodeOptions:v11];
      }
    }
    -[CACodingCAMLWriterDelegate setSkipHiddenLayers:](v9, "setSkipHiddenLayers:", objc_msgSend((id)objc_msgSend(a3, "objectForKeyedSubscript:", @"CACodingSkipHiddenLayers"), "BOOLValue"));
    -[CAMLWriter setEncodingForReverseSerializationTest:](v8, "setEncodingForReverseSerializationTest:", objc_msgSend((id)objc_msgSend(a3, "objectForKeyedSubscript:", @"kCAMLWriterOptionsTestingReverseSerialization"), "BOOLValue"));
  }
  [(CAMLWriter *)v8 setDelegate:v9];
  +[CATransaction lock];
  char v12 = CAEncodeBackingStores;
  char v13 = CALayerEncodeAllAnimations;
  CAEncodeBackingStores = 1;
  CALayerEncodeAllAnimations = 1;
  [(CAMLWriter *)v8 encodeObject:a1];
  CAEncodeBackingStores = v12;
  CALayerEncodeAllAnimations = v13;
  +[CATransaction unlock];
  +[CATransaction commit];
  return Mutable;
}

void sub_184804700(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

uint64_t CAMLEncodeLayerTreeToPathWithOptions(uint64_t a1, void *a2, void *a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (void *)MEMORY[0x185324A30]();
  uint64_t v7 = (void *)[MEMORY[0x1E4F28CB8] defaultManager];
  uint64_t v8 = NSString;
  uint64_t v9 = objc_msgSend((id)objc_msgSend(v7, "temporaryDirectory"), "path");
  uint64_t v10 = (void *)[v8 stringWithFormat:@"%@/%@", v9, objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F29128], "UUID"), "UUIDString")];
  uint64_t v11 = [NSString stringWithFormat:@"%@/assets", v10];
  uint64_t v28 = 0;
  [v7 removeItemAtPath:a2 error:0];
  if (([v7 createDirectoryAtPath:v11 withIntermediateDirectories:1 attributes:0 error:&v28] & 1) == 0)
  {
    if (x_log_hook_p())
    {
      [v10 UTF8String];
LABEL_22:
      x_log_();
      goto LABEL_26;
    }
    uint64_t v13 = x_log_category_utilities;
    if (!os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
    {
LABEL_26:
      uint64_t v23 = 0;
      goto LABEL_27;
    }
    uint64_t v14 = [v10 UTF8String];
    *(_DWORD *)buf = 136315138;
    uint64_t v30 = v14;
    id v15 = "CAMLEncodeLayerTreeToPathWithOptions failed to create output dirs at %s";
    long long v16 = v13;
    uint32_t v17 = 12;
LABEL_25:
    _os_log_impl(&dword_184668000, v16, OS_LOG_TYPE_ERROR, v15, buf, v17);
    goto LABEL_26;
  }
  if (a3)
  {
    CFTypeID v12 = CFGetTypeID(a3);
    if (v12 != CFDictionaryGetTypeID())
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        uint64_t v18 = x_log_category_utilities;
        if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184668000, v18, OS_LOG_TYPE_ERROR, "CAMLEncodeLayerTreeToPathWithOptions options must be a CFDictionary\n", buf, 2u);
        }
      }
    }
  }
  CFMutableDataRef v19 = CAMLEncodeLayerTreeWithInfo(a1, (uint64_t)v10, a3);
  if (!v19) {
    goto LABEL_26;
  }
  -[__CFData writeToFile:atomically:](v19, "writeToFile:atomically:", [NSString stringWithFormat:@"%@/%s", v10, "main.caml"], 0);
  CFRelease(v19);
  uint64_t v20 = (void *)[MEMORY[0x1E4F1CA60] dictionaryWithCapacity:1];
  [v20 setObject:@"main.caml" forKeyedSubscript:@"rootDocument"];
  [v20 setObject:*MEMORY[0x1E4F1CFD0] forKeyedSubscript:@"geometryFlipped"];
  if (a3)
  {
    Value = CFDictionaryGetValue((CFDictionaryRef)a3, @"CACodingUserInfo");
    if (Value) {
      [v20 setObject:Value forKeyedSubscript:@"userInfo"];
    }
  }
  CFStringRef v22 = (void *)[MEMORY[0x1E4F28F98] dataWithPropertyList:v20 format:100 options:0 error:0];
  if (v22) {
    [v22 writeToFile:objc_msgSend(NSString, "stringWithFormat:", @"%@/%s", v10, "index.xml"), 0 atomically];
  }
  if (([v7 moveItemAtPath:v10 toPath:a2 error:&v28] & 1) == 0)
  {
    if (x_log_hook_p())
    {
      [v10 UTF8String];
      [a2 UTF8String];
      goto LABEL_22;
    }
    uint64_t v24 = x_log_category_utilities;
    if (!os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR)) {
      goto LABEL_26;
    }
    uint64_t v25 = [v10 UTF8String];
    uint64_t v26 = [a2 UTF8String];
    *(_DWORD *)buf = 136315394;
    uint64_t v30 = v25;
    __int16 v31 = 2080;
    uint64_t v32 = v26;
    id v15 = "CAMLEncodeLayerTreeToPathWithOptions failed to move %s to %s";
    long long v16 = v24;
    uint32_t v17 = 22;
    goto LABEL_25;
  }
  uint64_t v23 = 1;
LABEL_27:
  return v23;
}

void sub_184804B5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CAMLEncodeLayerTreeToPathWithInfo(uint64_t a1, void *a2, void *a3)
{
  keys[1] = *(void **)MEMORY[0x1E4F143B8];
  values = a3;
  keys[0] = @"CACodingUserInfo";
  if (a3)
  {
    CFDictionaryRef v5 = CFDictionaryCreate(0, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CAMLEncodeLayerTreeToPathWithOptions(a1, a2, v5);
    if (v5) {
      CFRelease(v5);
    }
  }
  else
  {
    CAMLEncodeLayerTreeToPathWithOptions(a1, a2, 0);
  }
}

void CAEncodeLayerTreeToFile(objc_class *a1, uint64_t a2)
{
}

void CAEncodeLayerTreeToFileWithInfo(objc_class *a1, uint64_t a2, uint64_t a3)
{
  id v4 = CAEncodeLayerTreeWithInfo(a1, a3);
  if (v4)
  {
    CFDictionaryRef v5 = v4;
    uint64_t v6 = (void *)[[NSString alloc] initWithUTF8String:a2];
    [v5 writeToFile:v6 atomically:0];

    CFRelease(v5);
  }
}

float CA::Render::Image::opacity_at(CA::Render::Image *this, int a2, int a3, float *a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = *((unsigned __int8 *)this + 152);
  float result = 1.0;
  if (v5 <= 0x22 && ((0x419A4EB03uLL >> v5) & 1) != 0)
  {
    int v8 = *((_DWORD *)this + 4);
    int v9 = *((_DWORD *)this + 5);
    int v10 = v8 - 1;
    if (v8 <= 0) {
      int v10 = 0;
    }
    BOOL v11 = v8 <= a2;
    int v12 = a2 & ~(a2 >> 31);
    if (v11) {
      int v12 = v10;
    }
    unsigned int v13 = v9 - 1;
    if (v9 <= 0) {
      unsigned int v13 = 0;
    }
    if (v9 > a3) {
      uint64_t v14 = a3 & ~(a3 >> 31);
    }
    else {
      uint64_t v14 = v13;
    }
    id v15 = (__int16 *)(*((void *)this + 12) + *((void *)this + 20) * v14 + (dword_184999468[v5] * v12));
    *(_DWORD *)long long v16 = 1065353216;
    CA::Render::format_opacity_at_value((CA::Render *)v5, v15, (float *)v16, a4, 1.0);
    return *(float *)v16;
  }
  return result;
}

uint64_t CA::Render::Image::set_data_volatile(CA::Render::Image *this, unsigned int a2)
{
  unint64_t v3 = *((void *)this + 15);
  if (!v3) {
    return a2 ^ 1;
  }
  uint64_t result = CA::Render::Shmem::set_volatile(*((CA::Render::Shmem **)this + 15), a2, 0);
  if (result) {
    BOOL v5 = a2 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    CA::Render::post_notification(0xBu, v3, 0, 0);
    return 1;
  }
  return result;
}

uint64_t CA::Render::Image::ref_image_data(uint64_t this)
{
  return this;
}

uint64_t CA::Render::Texture::has_linear_edr(CA::Render::Texture *this)
{
  return 0;
}

uint64_t CA::Render::Texture::depth(CA::Render::Texture *this)
{
  return 1;
}

uint64_t CA::Render::Texture::is_unpremultiplied(CA::Render::Texture *this)
{
  return 0;
}

BOOL CA::Render::Image::implicitly_opaque(CA::Render::Image *this)
{
  unint64_t v1 = *((unsigned __int8 *)this + 152);
  return ((0xC99B4EB03uLL >> v1) & 1) == 0 || v1 > 0x23;
}

CGColorSpace *CA::Render::Image::set_default_colorspace(CA::Render::Image *this)
{
  uint64_t v2 = (CGColorSpace *)CA::Render::format_default_colorspace((CA::Render *)*((unsigned __int8 *)this + 152));

  return CA::Render::Texture::set_colorspace(this, v2);
}

void CA::Render::Image::show(CA::Render::Image *this, unsigned int a2, char a3)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  BOOL v5 = x_log_hook_p();
  if (a3)
  {
    if (v5)
    {
      x_log_();
    }
    else
    {
      long long v37 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        int v39 = *((_DWORD *)this + 4);
        int v38 = *((_DWORD *)this + 5);
        unint64_t v40 = *((unsigned __int8 *)this + 152);
        if (v40 > 0x23) {
          uint64_t v41 = "UNKNOWN";
        }
        else {
          uint64_t v41 = off_1E5272E18[v40];
        }
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = v39;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v38;
        *(_WORD *)&buf[14] = 2080;
        *(void *)&uint8_t buf[16] = v41;
        _os_log_impl(&dword_184668000, v37, OS_LOG_TYPE_DEFAULT, "<image [%d %d] [%s]", buf, 0x18u);
      }
    }
    unint64_t v42 = CA::Render::Image::data_size(this);
    if (x_log_hook_p())
    {
      if (v42 >= 0x400)
      {
        double v46 = 1.0;
        do
          double v46 = v46 * 0.0009765625;
        while (v46 * (double)v42 >= 1024.0);
      }
      goto LABEL_63;
    }
    uint64_t v43 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      double v44 = (double)v42;
      if (v42 >= 0x400)
      {
        double v47 = 1.0;
        do
        {
          double v47 = v47 * 0.0009765625;
          double v45 = v47 * v44;
        }
        while (v47 * v44 >= 1024.0);
      }
      else
      {
        double v45 = (double)v42;
      }
      uint64_t v48 = v42 > 0x3FF;
      if ((v42 & 0xFFFFFFFFFFF00000) != 0) {
        ++v48;
      }
      if ((v42 & 0xFFFFFFFFC0000000) != 0) {
        ++v48;
      }
      if (v42 >> 40) {
        ++v48;
      }
      if (v42 >> 50) {
        ++v48;
      }
      if (v42 >> 60) {
        ++v48;
      }
      int v49 = off_1E527FCB0[v48];
      *(_DWORD *)buf = 134218242;
      *(double *)&uint8_t buf[4] = v45;
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = v49;
      uint64_t v33 = " [%.2lf %s]>";
      uint64_t v34 = buf;
      double v35 = v43;
      uint32_t v36 = 22;
      goto LABEL_66;
    }
  }
  else
  {
    if (v5)
    {
      x_log_();
    }
    else
    {
      uint64_t v6 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        int v8 = *((_DWORD *)this + 4);
        int v7 = *((_DWORD *)this + 5);
        int v9 = *((unsigned __int8 *)this + 153);
        unint64_t v10 = *((unsigned __int8 *)this + 152);
        if (v10 > 0x23) {
          BOOL v11 = "UNKNOWN";
        }
        else {
          BOOL v11 = off_1E5272E18[v10];
        }
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v8;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v7;
        *(_WORD *)&buf[14] = 1024;
        *(_DWORD *)&uint8_t buf[16] = v9;
        *(_WORD *)&buf[20] = 2080;
        *(void *)&buf[22] = v11;
        _os_log_impl(&dword_184668000, v6, OS_LOG_TYPE_DEFAULT, "(image [%d %d] [%d] %s", buf, 0x1Eu);
      }
    }
    unint64_t v12 = CA::Render::Image::data_size(this);
    if (x_log_hook_p())
    {
      if (v12 >= 0x400)
      {
        double v16 = 1.0;
        do
          double v16 = v16 * 0.0009765625;
        while (v16 * (double)v12 >= 1024.0);
      }
      x_log_();
    }
    else
    {
      unsigned int v13 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        double v14 = (double)v12;
        if (v12 >= 0x400)
        {
          double v17 = 1.0;
          do
          {
            double v17 = v17 * 0.0009765625;
            double v15 = v17 * v14;
          }
          while (v17 * v14 >= 1024.0);
        }
        else
        {
          double v15 = (double)v12;
        }
        uint64_t v18 = v12 > 0x3FF;
        if ((v12 & 0xFFFFFFFFFFF00000) != 0) {
          ++v18;
        }
        if ((v12 & 0xFFFFFFFFC0000000) != 0) {
          ++v18;
        }
        if (v12 >> 40) {
          ++v18;
        }
        if (v12 >> 50) {
          ++v18;
        }
        if (v12 >> 60) {
          ++v18;
        }
        CFMutableDataRef v19 = off_1E527FCB0[v18];
        *(_DWORD *)buf = 134218242;
        *(double *)&uint8_t buf[4] = v15;
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = v19;
        _os_log_impl(&dword_184668000, v13, OS_LOG_TYPE_DEFAULT, " (%.2lf %s)", buf, 0x16u);
      }
    }
    float v21 = *((float *)this + 15);
    float v20 = *((float *)this + 16);
    float v23 = *((float *)this + 17);
    float v22 = *((float *)this + 18);
    if (v21 != 1.0 || v20 != 1.0 || v23 != 1.0 || v22 != 1.0)
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        uint64_t v24 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134218752;
          *(double *)&uint8_t buf[4] = v21;
          *(_WORD *)&buf[12] = 2048;
          *(double *)&buf[14] = v20;
          *(_WORD *)&buf[22] = 2048;
          *(double *)&buf[24] = v23;
          LOWORD(v53) = 2048;
          *(double *)((char *)&v53 + 2) = v22;
          _os_log_impl(&dword_184668000, v24, OS_LOG_TYPE_DEFAULT, " (tint %.3g %.3g %.3g %.3g)", buf, 0x2Au);
        }
      }
    }
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    memset(buf, 0, sizeof(buf));
    if (*((void *)this + 6))
    {
      if ((*((unsigned char *)this + 14) & 8) != 0)
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          uint64_t v25 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t v50 = 0;
            _os_log_impl(&dword_184668000, v25, OS_LOG_TYPE_DEFAULT, " colormatching-disabled", v50, 2u);
          }
        }
      }
      CFStringRef v26 = (const __CFString *)CGColorSpaceCopyICCProfileDescription();
      if (v26)
      {
        CFStringRef v27 = v26;
        CFStringGetCString(v26, (char *)buf, 127, 0x8000100u);
        if (buf[0])
        {
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            uint64_t v28 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)uint64_t v50 = 136315138;
              double v51 = COERCE_DOUBLE(buf);
              _os_log_impl(&dword_184668000, v28, OS_LOG_TYPE_DEFAULT, " (colorspace \"%s\")", v50, 0xCu);
            }
          }
        }
        CFRelease(v27);
      }
    }
    if ((*((unsigned char *)this + 14) & 0x40) != 0)
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        double v29 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v50 = 0;
          _os_log_impl(&dword_184668000, v29, OS_LOG_TYPE_DEFAULT, " placeholder", v50, 2u);
        }
      }
    }
    if (*((float *)this + 14) > 1.0)
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        uint64_t v30 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          double v31 = *((float *)this + 14);
          *(_DWORD *)uint64_t v50 = 134217984;
          double v51 = v31;
          _os_log_impl(&dword_184668000, v30, OS_LOG_TYPE_DEFAULT, " headroom %.3g", v50, 0xCu);
        }
      }
    }
    if (x_log_hook_p())
    {
LABEL_63:
      x_log_();
      return;
    }
    uint64_t v32 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v50 = 0;
      uint64_t v33 = ")";
      uint64_t v34 = v50;
      double v35 = v32;
      uint32_t v36 = 2;
LABEL_66:
      _os_log_impl(&dword_184668000, v35, OS_LOG_TYPE_DEFAULT, v33, v34, v36);
    }
  }
}

__IOSurface *CA::Render::Image::retain_iosurface(CA::Render::Image *this)
{
  keys[8] = *(void **)MEMORY[0x1E4F143B8];
  int v20 = 0;
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::image_lock);
  uint64_t v2 = (__IOSurface *)*((void *)this + 17);
  if (v2)
  {
    if (*((_DWORD *)this + 36) != *((_DWORD *)this + 9))
    {
      if (!IOSurfaceLock(*((IOSurfaceRef *)this + 17), 0, 0)) {
        IOSurfaceUnlock(v2, 0, 0);
      }
      *((_DWORD *)this + 36) = *((_DWORD *)this + 9);
    }
LABEL_6:
    CFRetain(v2);
    goto LABEL_27;
  }
  switch(*((unsigned char *)this + 152))
  {
    case 1:
    case 3:
      char v3 = 0;
      int v4 = 1111970369;
      goto LABEL_21;
    case 5:
      char v3 = 0;
      int v4 = 1278555445;
      goto LABEL_21;
    case 6:
      char v3 = 0;
      int v4 = 846624121;
      goto LABEL_21;
    case 7:
      char v3 = 0;
      int v4 = 2037741171;
      goto LABEL_21;
    case 8:
    case 9:
      char v3 = 0;
      int v4 = 1093677112;
      goto LABEL_21;
    case 0xA:
      char v3 = 0;
      int v4 = 1278226488;
      goto LABEL_21;
    case 0xD:
    case 0x11:
      char v3 = 0;
      int v4 = 1380411457;
      goto LABEL_21;
    case 0xE:
      char v3 = 0;
      int v4 = 1380410945;
      goto LABEL_21;
    case 0x12:
      char v3 = 0;
      int v4 = 1279340600;
      goto LABEL_21;
    case 0x21:
      char v3 = 0;
      int v4 = 1999843442;
      goto LABEL_21;
    case 0x22:
      char v3 = 0;
      int v4 = 1999908961;
      goto LABEL_21;
    case 0x23:
      char v3 = 0;
      int v4 = 1647534392;
LABEL_21:
      int v20 = v4;
      break;
    default:
      int v20 = 0;
      char v3 = 1;
      break;
  }
  unint64_t v5 = *((void *)this + 12);
  unint64_t v6 = *((void *)this + 20);
  unint64_t v19 = v6;
  if (v5 % qword_1EB2A87C0 || v6 % qword_1EB2A87C8)
  {
    uint64_t v2 = 0;
    goto LABEL_27;
  }
  if (v3)
  {
    int v8 = *((_DWORD *)this + 4);
    int v17 = *((_DWORD *)this + 5);
    int valuePtr = v8;
    unint64_t v9 = *((unsigned __int8 *)this + 152);
    if (v9 > 0x25) {
      int v10 = 0;
    }
    else {
      int v10 = dword_184999468[v9];
    }
    int v16 = v10;
    unint64_t v14 = v5;
    uint64_t v15 = CA::Render::Image::data_size(this);
    uint64_t v13 = 0;
    keys[0] = *(void **)MEMORY[0x1E4F2F2C0];
    values[0] = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    keys[1] = *(void **)MEMORY[0x1E4F2F0E8];
    values[1] = CFNumberCreate(0, kCFNumberIntType, &v17);
    keys[2] = *(void **)MEMORY[0x1E4F2F150];
    values[2] = CFNumberCreate(0, kCFNumberIntType, &v20);
    keys[3] = *(void **)MEMORY[0x1E4F2EFD8];
    values[3] = CFNumberCreate(0, kCFNumberIntType, &v16);
    keys[4] = *(void **)MEMORY[0x1E4F2EFE0];
    values[4] = CFNumberCreate(0, kCFNumberLongType, &v19);
    keys[5] = *(void **)MEMORY[0x1E4F2EFB8];
    values[5] = CFNumberCreate(0, kCFNumberLongType, &v15);
    keys[6] = *(void **)MEMORY[0x1E4F2F040];
    values[6] = CFNumberCreate(0, kCFNumberLongType, &v14);
    keys[7] = *(void **)MEMORY[0x1E4F2F138];
    values[7] = CFNumberCreate(0, kCFNumberLongType, &v13);
    CFDictionaryRef v11 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 7, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    for (uint64_t i = 0; i != 8; ++i)
      CFRelease(values[i]);
    *((void *)this + 17) = IOSurfaceCreate(v11);
    CFRelease(v11);
    if (!IOSurfaceLock(*((IOSurfaceRef *)this + 17), 0, 0)) {
      IOSurfaceUnlock(*((IOSurfaceRef *)this + 17), 0, 0);
    }
    uint64_t v2 = (__IOSurface *)*((void *)this + 17);
  }
  else
  {
    CA::Render::Image::data_size(this);
    uint64_t v2 = (__IOSurface *)IOSurfaceWrapClientImage();
    *((void *)this + 17) = v2;
  }
  *((_DWORD *)this + 36) = *((_DWORD *)this + 9);
  if (v2) {
    goto LABEL_6;
  }
LABEL_27:
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::image_lock);
  return v2;
}

void CA::Render::Image::update_iosurface(__IOSurface **this, __IOSurface *a2)
{
  uint64_t v2 = a2;
  if (a2 && this[17] != a2)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::image_lock);
    goto LABEL_6;
  }
  if (*((_DWORD *)this + 36) == *((_DWORD *)this + 9)) {
    return;
  }
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::image_lock);
  if (v2)
  {
LABEL_6:
    int v4 = this[17];
    if (v4 != v2)
    {
      if (v4) {
        CFRelease(v4);
      }
      uint64_t v2 = (__IOSurface *)CFRetain(v2);
      this[17] = v2;
      *((_DWORD *)this + 36) = 0;
      if (!v2) {
        goto LABEL_16;
      }
    }
    goto LABEL_12;
  }
  uint64_t v2 = this[17];
  if (v2)
  {
LABEL_12:
    if (*((_DWORD *)this + 36) != *((_DWORD *)this + 9))
    {
      if (!IOSurfaceLock(v2, 0, 0)) {
        IOSurfaceUnlock(this[17], 0, 0);
      }
      *((_DWORD *)this + 36) = *((_DWORD *)this + 9);
    }
  }
LABEL_16:

  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::image_lock);
}

CGImageRef CA::Render::Image::copy_cgimage(CA::Render::Image *this)
{
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::image_lock);
  uint64_t v2 = CA::Render::cg_image_cache;
  if (!CA::Render::cg_image_cache)
  {
    CA::Render::cg_image_cache = (uint64_t)x_hash_table_new_(0, 0, 0, 0, 0, 0);
    CA::Render::add_observer(3u, 0, (uint64_t)CA::Render::render_image_deleted, 0, 0);
    uint64_t v2 = CA::Render::cg_image_cache;
  }
  uint64_t v3 = x_hash_table_lookup(v2, (uint64_t)this, 0);
  uint64_t v4 = v3;
  if (!v3) {
    goto LABEL_8;
  }
  unint64_t v5 = *(CGImage **)v3;
  if (*(_DWORD *)(v3 + 8) != *((_DWORD *)this + 9))
  {
    CGImageRelease(*(CGImageRef *)v3);
    *(void *)uint64_t v4 = 0;
    goto LABEL_8;
  }
  if (!v5)
  {
LABEL_8:
    unint64_t v6 = *((void *)this + 20);
    if (is_mul_ok(v6, *((unsigned int *)this + 5))) {
      size_t v7 = v6 * *((unsigned int *)this + 5);
    }
    else {
      size_t v7 = 0;
    }
    atomic_fetch_add((atomic_uint *volatile)this + 37, 1u);
    int v8 = CGDataProviderCreateWithData(this, *((const void **)this + 12), v7, (CGDataProviderReleaseDataCallback)CA::Render::release_bitmap);
    unint64_t v9 = (CGColorSpace *)*((void *)this + 6);
    if (!v9)
    {
      int v10 = *((unsigned __int8 *)this + 152);
      if ((v10 - 8) >= 2)
      {
        if (v10 == 10) {
          unsigned int v11 = 1;
        }
        else {
          unsigned int v11 = 2;
        }
        unint64_t v9 = (CGColorSpace *)CAGetColorSpace(v11);
      }
      else
      {
        unint64_t v9 = 0;
      }
    }
    unint64_t v12 = *((unsigned __int8 *)this + 152);
    if (v12 > 0x23)
    {
      size_t v13 = 0;
      size_t v14 = 0;
      CGBitmapInfo v15 = 0;
    }
    else
    {
      size_t v13 = dword_1849993D8[v12];
      size_t v14 = dword_184999500[v12];
      CGBitmapInfo v15 = dword_184999348[v12];
    }
    unint64_t v5 = CGImageCreate(*((unsigned int *)this + 4), *((unsigned int *)this + 5), v14, v13, *((void *)this + 20), v9, v15, v8, 0, 1, kCGRenderingIntentDefault);
    CGDataProviderRelease(v8);
    if (v5)
    {
      if (v4)
      {
        *(void *)uint64_t v4 = v5;
        *(_DWORD *)(v4 + 8) = *((_DWORD *)this + 9);
        goto LABEL_28;
      }
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      uint64_t v18 = (CGImage **)malloc_type_zone_malloc(malloc_zone, 0x10uLL, 0x8BB15036uLL);
      if (v18)
      {
        unint64_t v19 = v18;
        int v20 = *((_DWORD *)this + 9);
        *uint64_t v18 = v5;
        *((_DWORD *)v18 + 2) = v20;
        hash_table_modify((int *)CA::Render::cg_image_cache, (uint64_t)this, (uint64_t)v18, 0);
        unint64_t v5 = *v19;
        goto LABEL_28;
      }
      hash_table_modify((int *)CA::Render::cg_image_cache, (uint64_t)this, 0, 0);
    }
    else if (v4)
    {
      x_hash_table_remove(CA::Render::cg_image_cache, (uint64_t)this);
      CGImageRelease(*(CGImageRef *)v4);
      int v16 = (malloc_zone_t *)get_malloc_zone();
      malloc_zone_free(v16, (void *)v4);
    }
    CGImageRef v21 = 0;
    goto LABEL_31;
  }
LABEL_28:
  CGImageRef v21 = CGImageRetain(v5);
LABEL_31:
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::image_lock);
  return v21;
}

void CA::Render::render_image_deleted(CA::Render *this, CA::Render::Object *a2, void *a3, void *a4)
{
  if (CA::Render::cg_image_cache)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::image_lock);
    unint64_t v5 = (CGImageRef *)x_hash_table_remove(CA::Render::cg_image_cache, (uint64_t)this);
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::image_lock);
    if (v5)
    {
      CGImageRelease(*v5);
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      malloc_zone_free(malloc_zone, v5);
    }
  }
}

void CA::CG::AccelQueue::finish_renderer(CA::CG::AccelQueue *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, const __CFString *a7)
{
  if (*((unsigned char *)this + 209)) {
    int v8 = (CA::CG::AccelRenderer **)*((void *)this + 25);
  }
  else {
    int v8 = 0;
  }
  uint64_t v9 = CA::CG::AccelRenderer::acquire(*((CA::CG::AccelRenderer **)this + 22), (CA::CG::AccelQueue *)((char *)this + 184), v8, *((unsigned int *)this + 6), 1, *((__CFString **)this + 24), a7);
  if (v9)
  {
    uint64_t v10 = v9;
    if (*((unsigned char *)this + 208))
    {
      *((unsigned char *)this + 208) = 0;
      (*(void (**)(void))(**((void **)this + 22) + 64))(*((void *)this + 22));
    }
    CA::CG::AccelRenderer::unlock_surface((CA::CG::AccelRenderer *)v10);
    CA::CG::Renderer::end_rendering((CA::CG::Renderer *)v10);
    CA::CG::Renderer::end_rendering((CA::CG::Renderer *)v10);
    (*(void (**)(void))(**(void **)(v10 + 8) + 416))();
    int v11 = *(_DWORD *)(v10 + 152);
    *(_DWORD *)(v10 + 156) = v11;
    uint64_t v13 = *(void *)v10;
    uint64_t v12 = *(void *)(v10 + 8);
    *(_DWORD *)(v12 + 228) = v11;
    *(_DWORD *)(v12 + 232) = v11;
    (*(void (**)(uint64_t))(v13 + 16))(v10);
    ++*(_DWORD *)(v10 + 152);
    uint64_t v14 = *(void *)(v10 + 8);
    *(unsigned char *)(v10 + 4228) = 0;
    *(_DWORD *)(v14 + 352) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(v10 + 4224));
  }
}

void CA::CG::AccelQueue::~AccelQueue(CA::CG::AccelQueue *this)
{
  CA::CG::AccelQueue::~AccelQueue(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  void *v2;
  uint64_t i;
  const void *v4;
  NSObject *v5;
  size_t *v7;
  size_t *v8;
  atomic_uint *v9;

  *(void *)this = &unk_1ED027458;
  uint64_t v2 = (void *)((char *)this + 184);
  os_unfair_lock_lock((os_unfair_lock_t)&CA::CG::AccelRenderer::_list_lock);
  for (uint64_t i = CA::CG::AccelRenderer::_list; i; uint64_t i = *(void *)(i + 4272))
  {
    if (*(void **)(i + 4240) == v2)
    {
      *uint64_t v2 = 0;
      *(void *)(i + 4240) = 0;
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::CG::AccelRenderer::_list_lock);
  uint64_t v4 = (const void *)*((void *)this + 24);
  if (v4) {
    CFRelease(v4);
  }
  *(void *)this = &unk_1ED029CF0;
  unint64_t v5 = *((void *)this + 1);
  if (v5) {
    dispatch_release(v5);
  }
  if (atomic_fetch_add(CA::CG::Queue::_queue_count, 0xFFFFFFFF) == 1 && CA::CG::Queue::_free_slabs != 0)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&CA::CG::Queue::_free_lock);
    size_t v7 = (size_t *)CA::CG::Queue::_free_slabs;
    CA::CG::Queue::_free_slabs = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::CG::Queue::_free_lock);
    if (v7)
    {
      do
      {
        int v8 = (size_t *)*v7;
        munmap(v7, v7[1]);
        size_t v7 = v8;
      }
      while (v8);
    }
  }
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 56));
  pthread_cond_destroy((pthread_cond_t *)((char *)this + 120));
  uint64_t v9 = (atomic_uint *)*((void *)this + 2);
  if (v9) {
    CA::CG::TransparencyLayer::unref(v9);
  }
}

uint64_t CABackingStoreIsVolatile(uint64_t a1)
{
  return HIBYTE(*(unsigned __int16 *)(a1 + 492)) & 1;
}

uint64_t CABackingStoreIsPurged(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 400);
  if (!v1 || *(unsigned char *)(v1 + 65)) {
    return 0;
  }
  uint64_t v4 = *(void *)(v1 + 16);
  if (v4)
  {
    int v5 = *(_DWORD *)(v4 + 12);
    if ((v5 & 0x400) != 0)
    {
      if ((v5 & 0x1000) != 0)
      {
        int v8 = 0;
        uint64_t v2 = 1;
        if (!MEMORY[0x185325440](*MEMORY[0x1E4F14960], *(void *)(v4 + 24) & -*MEMORY[0x1E4F14B00], 1, &v8))return v8 == 2; {
        return v2;
        }
      }
      return 1;
    }
    return 0;
  }
  unint64_t v6 = *(unsigned char **)(v1 + 24);
  if (!v6) {
    return 1;
  }
  if (!v6[68]) {
    return 0;
  }
  size_t v7 = *(uint64_t (**)(void))(*(void *)v6 + 88);

  return v7();
}

uint64_t CABackingStoreSetVolatileOptions(uint64_t result, int a2)
{
  *(_DWORD *)(result + 488) = a2;
  return result;
}

uint64_t CABackingStoreUpdate(unint64_t a1, unint64_t a2, unint64_t a3, unsigned int a4, void (*a5)(void, uint64_t), uint64_t a6)
{
  return CABackingStoreUpdate_(a1, a2, a3, 11, a4, 0, 0, a5, a6, 0, 0);
}

uint64_t CABackingStoreBeginUpdate(unint64_t a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  v14[3] = *MEMORY[0x1E4F143B8];
  int v8 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  uint64_t v9 = *(_opaque_pthread_t **)(a1 + 480);
  if (v9)
  {
    if (v9 == pthread_self()) {
      goto LABEL_16;
    }
    while (*(void *)(a1 + 480))
      pthread_cond_wait((pthread_cond_t *)(a1 + 80), v8);
  }
  memset(v14, 0, 24);
  if (*(void *)(a1 + 408)) {
    __assert_rtn("CABackingStoreBeginUpdate", "CABackingStore.cpp", 1439, "!CABackStoreIsUpdating_ (b)");
  }
  *(void *)(a1 + 128) = a2;
  *(void *)(a1 + 136) = a3;
  if (CABackingStorePrepareUpdates_(a1, a2, a3, 1, a4, 0, 0, 0, (uint64_t)v14))
  {
    uint64_t v10 = *(void *)(*(void *)(a1 + 408) + 16);
    if (v10 && *(_DWORD *)(*(void *)(v10 + 24) + 32) != 1) {
      __assert_rtn("CABackingStoreBeginUpdate", "CABackingStore.cpp", 1449, "levels == 1");
    }
    CABackingStoreBeginUpdate_(a1, a2, a3, (CA *)1, a4, 0, 0, 0, v14);
    if (*(void *)(a1 + 416))
    {
      *(void *)(a1 + 480) = pthread_self();
    }
    else
    {
      uint64_t v11 = *(void *)(a1 + 408);
      if (*(void *)(a1 + 448))
      {
        CGSReleaseRegion();
        *(void *)(a1 + 448) = 0;
      }
      if (*(void *)(a1 + 456)) {
        CGSReleaseRegion();
      }
      CABackingStoreReleaseImages((CABackingStore *)a1);
      *(_DWORD *)(v11 + 56) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(a1 + 472) = 0;
      *(unsigned char *)(a1 + 492) = 6;
      *(void *)(a1 + 408) = 0;
    }
  }
LABEL_16:
  uint64_t v12 = *(void *)(a1 + 416);
  pthread_mutex_unlock(v8);
  return v12;
}

uint64_t CABackingStoreEndUpdate(uint64_t a1)
{
  uint64_t v2 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  uint64_t v3 = *(void *)(a1 + 408);
  if (!v3) {
    __assert_rtn("CABackingStoreEndUpdate", "CABackingStore.cpp", 1470, "CABackStoreIsUpdating_ (b)");
  }
  *(void *)(a1 + 480) = 0;
  if (*(void *)(a1 + 416))
  {
    uint64_t v4 = *(void *)(v3 + 16);
    uint64_t v5 = *(void *)(v3 + 24);
    if (*(void *)(a1 + 400))
    {
      CGContextGetEDRTargetHeadroom();
      *(_DWORD *)(*(void *)(a1 + 400) + 60) = v6;
    }
    if (v4)
    {
      uint64_t v7 = *(void *)(v4 + 24);
      int v8 = *(CGContext **)(a1 + 416);
      if ((*(_WORD *)(a1 + 492) & 0x1000) != 0)
      {
        if (v8) {
          MEMORY[0x185323DC0](v8, 0x10A0C40A7187C27);
        }
      }
      else
      {
        CAReleaseCachedCGContext(v8);
      }
      *(void *)(a1 + 416) = 0;
      atomic_fetch_add((atomic_uint *volatile)(v7 + 4), 1u);
    }
    else if (v5)
    {
      CAReleaseCachedCGContext(*(CGContext **)(a1 + 416));
      *(void *)(a1 + 416) = 0;
      *(_WORD *)(a1 + 492) |= 0x800u;
    }
  }
  uint64_t v9 = *(void *)(a1 + 408);
  if (*(void *)(a1 + 448))
  {
    CGSReleaseRegion();
    *(void *)(a1 + 448) = 0;
  }
  if (*(void *)(a1 + 456)) {
    CGSReleaseRegion();
  }
  CABackingStoreReleaseImages((CABackingStore *)a1);
  *(_DWORD *)(v9 + 56) = 0;
  *(void *)(v9 + 48) = 0;
  *(void *)(a1 + 472) = 0;
  *(unsigned char *)(a1 + 492) = 6;
  *(void *)(a1 + 408) = 0;
  pthread_cond_broadcast((pthread_cond_t *)(a1 + 80));

  return pthread_mutex_unlock(v2);
}

uint64_t CABackingStoreGetUpdateRegion(uint64_t a1)
{
  return *(void *)(a1 + 448);
}

CGImageRef CABackingStoreCopyCGImage(uint64_t a1)
{
  uint64_t v2 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  __int16 v3 = *(_WORD *)(a1 + 492);
  if ((v3 & 0x100) != 0)
  {
    CGImageRef v7 = 0;
    goto LABEL_8;
  }
  uint64_t v4 = *(CGImage **)(a1 + 432);
  if (!v4)
  {
    uint64_t v5 = *(void *)(a1 + 400);
    int v6 = *(CA::Render::Shmem **)(v5 + 16);
    if (v6)
    {
      uint64_t v4 = CA::Render::Shmem::copy_cgimage(v6, *(CGColorSpace **)(v5 + 8), *(void *)(a1 + 128), *(void *)(a1 + 136));
    }
    else
    {
      uint64_t v9 = *(void *)(v5 + 24);
      if (!v9)
      {
        uint64_t v4 = 0;
        goto LABEL_6;
      }
      if ((*(_WORD *)(a1 + 492) & 0x800) != 0)
      {
        uint64_t v10 = *(void *)(v9 + 72);
        if (v10)
        {
          CA::CG::Queue::flush(v10, 3, 1);
          __int16 v3 = *(_WORD *)(a1 + 492);
        }
        *(_WORD *)(a1 + 492) = v3 & 0xF7FF;
      }
      unsigned int v11 = *(_DWORD *)(v9 + 16);
      if (v11 <= 0x23 && ((0x1FFFFFF2FuLL >> v11) & 1) == 0) {
        uint64_t v4 = CA::CG::IOSurfaceDrawable::copy_cgimage_iosurface((CA::CG::IOSurfaceDrawable *)v9);
      }
      else {
        uint64_t v4 = CA::CG::IOSurfaceDrawable::copy_cgimage((CA::CG::IOSurfaceDrawable *)v9);
      }
    }
    *(void *)(a1 + 432) = v4;
  }
LABEL_6:
  CGImageRef v7 = CGImageRetain(v4);
LABEL_8:
  pthread_mutex_unlock(v2);
  return v7;
}

CGColorRef CABackingStoreCopyTintColor(uint64_t a1)
{
  uint64_t v2 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  if ((*(_WORD *)(a1 + 492) & 0x100) != 0) {
    CGColorRef v3 = 0;
  }
  else {
    CGColorRef v3 = CGColorRetain(*(CGColorRef *)(*(void *)(a1 + 400) + 32));
  }
  pthread_mutex_unlock(v2);
  return v3;
}

CGColorSpaceRef CABackingStoreCopyColorSpace(uint64_t a1)
{
  uint64_t v2 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  if ((*(_WORD *)(a1 + 492) & 0x100) != 0)
  {
    CGColorSpaceRef v4 = 0;
  }
  else
  {
    CGColorRef v3 = *(CGColorSpace **)(*(void *)(a1 + 400) + 8);
    if (!v3) {
      CGColorRef v3 = *(CGColorSpace **)(a1 + 160);
    }
    CGColorSpaceRef v4 = CGColorSpaceRetain(v3);
  }
  pthread_mutex_unlock(v2);
  return v4;
}

uint64_t CABackingStoreHasVerticalPadding(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 492) >> 14) & 1;
}

void CABackingStoreCollectBlocking()
{
  uint64_t v0 = mach_absolute_time();
  double v1 = CATimeWithHostTime(v0);
  CA::Render::post_notification(0x33u, 0, 0, 0);
  CA::Render::collect((CA::Render *)1, v1);
  double v2 = v1 + 1.0;
  if (buffer_list) {
    BOOL v3 = v1 < v2;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3)
  {
    double v4 = 0.0166666667;
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    do
    {
      double v6 = CABackingStoreCollect_(v1, 1);
      CGImageRef v7 = *(CA::Transaction **)(StatusReg + 576);
      if (!v7) {
        CGImageRef v7 = (CA::Transaction *)CA::Transaction::create(0);
      }
      if (!**((_DWORD **)v7 + 13)) {
        CA::Transaction::ensure_implicit(v7, 1);
      }
      int v8 = *(CA::Transaction **)(StatusReg + 576);
      if (v8 && **((_DWORD **)v8 + 13)) {
        CA::Transaction::flush(v8);
      }
      if ((*(void *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
        break;
      }
      for (double i = v4 + v1 >= v2 ? v2 : v4 + v1; v1 < i; v1 = CATimeWithHostTime(v10))
      {
        usleep(1000 * (int)((i - v1) * 1000.0));
        uint64_t v10 = mach_absolute_time();
      }
      double v4 = v4 + v4;
    }
    while (v1 < v2);
  }
}

uint64_t CABackingStoreCollectWithCompletionHandler(uint64_t a1)
{
  uint64_t v2 = mach_absolute_time();
  double v3 = CATimeWithHostTime(v2);
  CA::Render::post_notification(0x33u, 0, 0, 0);
  CA::Render::collect((CA::Render *)1, v3);
  if (buffer_list) {
    operator new();
  }
  double v4 = *(uint64_t (**)(uint64_t))(a1 + 16);

  return v4(a1);
}

void yielding_collect_callback(double a1, void *a2)
{
  uint64_t v3 = mach_absolute_time();
  double v4 = CATimeWithHostTime(v3);
  if (v4 >= *(double *)a2) {
    goto LABEL_15;
  }
  double v6 = CABackingStoreCollect_(v4, 1);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  int v8 = *(CA::Transaction **)(StatusReg + 576);
  if (!v8) {
    int v8 = (CA::Transaction *)CA::Transaction::create(0);
  }
  if (!**((_DWORD **)v8 + 13)) {
    CA::Transaction::ensure_implicit(v8, 1);
  }
  uint64_t v9 = *(CA::Transaction **)(StatusReg + 576);
  if (v9 && **((_DWORD **)v9 + 13)) {
    CA::Transaction::flush(v9);
  }
  if ((*(void *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
LABEL_15:
    (*(void (**)(void))(*((void *)a2 + 2) + 16))();
    _Block_release(*((const void **)a2 + 2));
    JUMPOUT(0x185323DC0);
  }
  double v10 = *(double *)a2;
  double v11 = *((double *)a2 + 1);
  if (v11 + v4 < *(double *)a2) {
    double v10 = v11 + v4;
  }
  *((double *)a2 + 1) = v11 + v11;

  CA::call_at_time((CA *)yielding_collect_callback, (void (*)(double, void *))a2, v10, v5);
}

uint64_t __CABackingStoreGetTypeID_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  CABackingStoreGetTypeID::type = result;
  return result;
}

__CFString *backingStoreCopyDebugDescription(char *a1)
{
  CFMutableDataRef Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, @"<CABackingStore %p", a1);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  for (double i = (void *)*((void *)a1 + 50); i; double i = (void *)*i)
  {
    uint64_t v4 = i[2];
    if (v4)
    {
      uint64_t v5 = *(unsigned int **)(v4 + 24);
      uint64_t v6 = v5[3];
      CGImageRef v7 = "UNKNOWN";
      if (v6 <= 0x23) {
        CGImageRef v7 = off_1E5272E18[v6];
      }
      uint64_t v9 = v5[4];
      uint64_t v8 = v5[5];
      if ((*(_DWORD *)(v4 + 12) & 0x400) != 0) {
        double v10 = " volatile";
      }
      else {
        double v10 = "";
      }
      CFStringAppendFormat(Mutable, 0, @" (buffer [%d %d] %s%s)", v9, v8, v7, v10, v18);
    }
    else
    {
      uint64_t v11 = i[3];
      if (v11)
      {
        uint64_t v12 = (__IOSurface *)(*(uint64_t (**)(void))(*(void *)v11 + 24))(i[3]);
        uint64_t ID = IOSurfaceGetID(v12);
        uint64_t v14 = *(unsigned int *)(v11 + 16);
        CGBitmapInfo v15 = "UNKNOWN";
        if (v14 <= 0x23) {
          CGBitmapInfo v15 = off_1E5272E18[v14];
        }
        if (*(unsigned char *)(v11 + 68)) {
          int v16 = " volatile";
        }
        else {
          int v16 = "";
        }
        CFStringAppendFormat(Mutable, 0, @" (surface 0x%x [%d %d] %s%s)", ID, *(unsigned int *)(v11 + 44), *(unsigned int *)(v11 + 48), v15, v16);
      }
    }
  }
  CFStringAppend(Mutable, @">");
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 16));
  return Mutable;
}

CFStringRef backingStoreCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  CFAllocatorRef v4 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v4, a2, @"<CABackingStore %p>", a1);
}

void memory_warning(CA::DispatchGroup *this, void (*a2)(void *), void *a3)
{
  if (buffer_list)
  {
    int v3 = 0;
    atomic_compare_exchange_strong(pending_async_collect, (unsigned int *)&v3, 1u);
    if (!v3) {
      CA::DispatchGroup::enqueue(this, a2, a3);
    }
  }
}

uint64_t CABackingStoreGetTypeID()
{
  if (CABackingStoreGetTypeID::once[0] != -1) {
    dispatch_once(CABackingStoreGetTypeID::once, &__block_literal_global_907);
  }
  return CABackingStoreGetTypeID::type;
}

void CA::Render::ImageQueue::show(CA::Render::ImageQueue *this, int a2, uint64_t a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  CAShmemImageQueueShow(*(void *)(*((void *)this + 2) + 24), *((unsigned int *)this + 45), BYTE1(*((_DWORD *)this + 3)), a2, a3);
  if ((a3 & 1) == 0)
  {
    uint64_t v6 = (CA::Render *)(a2 + 1);
    CA::Render::show_newline(v6);
    uint64_t v7 = *((void *)this + 3);
    if (v7)
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        uint64_t v12 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)unint64_t v19 = 0;
          _os_log_impl(&dword_184668000, v12, OS_LOG_TYPE_DEFAULT, "(currentTexture ", v19, 2u);
        }
      }
      (*(void (**)(uint64_t, CA::Render *, uint64_t))(*(void *)v7 + 40))(v7, v6, a3);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        uint64_t v13 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)unint64_t v19 = 0;
          _os_log_impl(&dword_184668000, v13, OS_LOG_TYPE_DEFAULT, ")", v19, 2u);
        }
      }
      uint64_t v14 = *((void *)this + 10);
      if (v14)
      {
        CA::Render::show_newline(v6);
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          CGBitmapInfo v15 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)unint64_t v19 = 0;
            _os_log_impl(&dword_184668000, v15, OS_LOG_TYPE_DEFAULT, "(currentForwardDMTexture ", v19, 2u);
          }
        }
        (*(void (**)(uint64_t, CA::Render *, uint64_t))(*(void *)v14 + 40))(v14, v6, a3);
        if (!x_log_hook_p())
        {
          int v16 = x_log_category_render;
          if (!os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT)) {
            return;
          }
          *(_WORD *)unint64_t v19 = 0;
LABEL_32:
          _os_log_impl(&dword_184668000, v16, OS_LOG_TYPE_DEFAULT, ")", v19, 2u);
          return;
        }
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v8 = *((void *)this + 4);
      if (v8)
      {
        uint64_t v9 = *(void *)(v8 + 24);
        uint64_t v10 = *(void *)(v8 + 32);
        if (v10 && v9 != 0)
        {
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            int v17 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)unint64_t v19 = 0;
              _os_log_impl(&dword_184668000, v17, OS_LOG_TYPE_DEFAULT, "(blendedTextures", v19, 2u);
            }
          }
          uint64_t v18 = (CA::Render *)(a2 + 2);
          CA::Render::show_newline(v18);
          (*(void (**)(uint64_t, CA::Render *, uint64_t))(*(void *)v10 + 40))(v10, v6, a3);
          CA::Render::show_newline(v18);
          (*(void (**)(uint64_t, CA::Render *, uint64_t))(*(void *)v9 + 40))(v9, v6, a3);
          CA::Render::show_newline(v6);
          if (!x_log_hook_p())
          {
            int v16 = x_log_category_render;
            if (!os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT)) {
              return;
            }
            *(_WORD *)unint64_t v19 = 0;
            goto LABEL_32;
          }
LABEL_29:
          x_log_();
        }
      }
    }
  }
}

void CA::Render::ImageQueue::~ImageQueue(CA::Render::ImageQueue *this, CA::Render::Object *a2)
{
  CA::Render::ImageQueue::~ImageQueue(this, a2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  const CA::Render::Object *v7;
  id *v8;
  uint64_t i;
  atomic_uint *v10;
  malloc_zone_t *malloc_zone;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  atomic_uint *v15;
  atomic_uint *v16;
  uint64_t v17;
  id *v18;
  atomic_uint *v19;
  atomic_uint *v20;
  atomic_uint *v21;
  atomic_uint *v22;
  atomic_uint *v23;
  atomic_uint *v24;
  atomic_uint *v25;

  *(void *)this = &unk_1ED02CC60;
  CA::Render::Context::remove_image_queue(this, a2);
  int v3 = (void *)*((void *)this + 28);
  if (v3)
  {
    do
    {
      CFAllocatorRef v4 = *v3;
      if (atomic_fetch_add((atomic_uint *volatile)(*v3 + 8), 0xFFFFFFFF) == 1) {
        (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
      }
      int v3 = (void *)v3[1];
    }
    while (v3);
    uint64_t v5 = (void *)*((void *)this + 28);
    if (v5)
    {
      do
      {
        uint64_t v6 = (void *)v5[1];
        free(v5);
        uint64_t v5 = v6;
      }
      while (v6);
    }
  }
  uint64_t v7 = (const CA::Render::Object *)*((unsigned int *)this + 49);
  if (v7) {
    mach_port_deallocate(*MEMORY[0x1E4F14960], (mach_port_name_t)v7);
  }
  uint64_t v8 = (id *)*((void *)this + 9);
  if (v8)
  {

    for (double i = 1; i != 4; ++i)
    {
      uint64_t v10 = (atomic_uint *)v8[i];
      if (v10 && atomic_fetch_add(v10 + 2, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v10 + 16))(v10);
      }
    }
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(malloc_zone, v8);
  }
  uint64_t v12 = *((void *)this + 15);
  if (v12)
  {
    uint64_t v13 = *(void *)(v12 - 8);
    if (v13)
    {
      uint64_t v14 = 48 * v13;
      do
      {
        CGBitmapInfo v15 = *(atomic_uint **)(v12 + v14 - 40);
        if (v15 && atomic_fetch_add(v15 + 2, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v15 + 16))(v15);
        }
        int v16 = *(atomic_uint **)(v12 + v14 - 48);
        if (v16 && atomic_fetch_add(v16 + 2, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v16 + 16))(v16);
        }
        v14 -= 48;
      }
      while (v14);
    }
    MEMORY[0x185323DA0](v12 - 16, 0x1020C8087734790);
  }
  int v17 = *((void *)this + 20);
  if (v17) {
    MEMORY[0x185323DC0](v17, 0x1000C4005756C2ELL);
  }
  uint64_t v18 = (id *)((char *)this + 208);
  if (*((void *)this + 26))
  {
    if (*((unsigned char *)this + 216)) {
      objc_storeWeakOrNil(v18, 0);
    }
    else {
      *uint64_t v18 = 0;
    }
  }
  unint64_t v19 = (atomic_uint *)*((void *)this + 21);
  if (v19 && atomic_fetch_add(v19 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v19 + 8))(v19);
  }
  uint64_t v20 = (atomic_uint *)*((void *)this + 14);
  if (v20 && atomic_fetch_add(v20 + 4, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v20 + 8))(v20);
  }
  CGImageRef v21 = (atomic_uint *)*((void *)this + 10);
  if (v21 && atomic_fetch_add(v21 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v21 + 16))(v21);
  }
  float v22 = (atomic_uint *)*((void *)this + 8);
  if (v22 && atomic_fetch_add(v22 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v22 + 16))(v22);
  }
  float v23 = (atomic_uint *)*((void *)this + 4);
  if (v23 && atomic_fetch_add(v23 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v23 + 16))(v23);
  }
  uint64_t v24 = (atomic_uint *)*((void *)this + 3);
  if (v24 && atomic_fetch_add(v24 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v24 + 16))(v24);
  }
  uint64_t v25 = (atomic_uint *)*((void *)this + 2);
  if (v25 && atomic_fetch_add(v25 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v25 + 16))(v25);
  }
  --dword_1EB2ADE2C;
  *(void *)this = &unk_1ED02F670;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0) {
    CA::Render::Encoder::ObjectCache::invalidate(this, v7);
  }
}

uint64_t CA::Render::ImageQueue::retain_scaler_stats(CA::Render::ImageQueue *this, uint64_t a2)
{
  if (byte_1EB2ACC0F)
  {
    uint64_t result = 0;
  }
  else
  {
    uint64_t result = *(void *)(a2 + 168);
    if (!result) {
      operator new();
    }
    atomic_fetch_add((atomic_uint *volatile)(result + 8), 1u);
  }
  *(void *)this = result;
  return result;
}

BOOL CA::Render::display_tonemap_supports_pixel_format(CA::Render *this)
{
  int v1 = (int)this;
  BOOL result = 1;
  if (v1 > 1111970368)
  {
    if (v1 <= 1953903151)
    {
      if (v1 > 1885745711)
      {
        if (v1 > 1952854575)
        {
          if (v1 == 1952854576 || v1 == 1952854578) {
            return result;
          }
          int v5 = 1952855092;
        }
        else
        {
          if (v1 == 1885745712 || v1 == 1885745714) {
            return result;
          }
          int v5 = 1885746228;
        }
      }
      else if (v1 > 1882468911)
      {
        if (v1 == 1882468912 || v1 == 1882468914) {
          return result;
        }
        int v5 = 1882469428;
      }
      else
      {
        if (v1 == 1111970369 || v1 == 1647534392) {
          return result;
        }
        int v5 = 1815162994;
      }
      goto LABEL_66;
    }
    if (v1 <= 2016687215)
    {
      if (v1 > 2016686639)
      {
        if (v1 == 2016686640 || v1 == 2016686642) {
          return result;
        }
        int v5 = 2016687156;
      }
      else
      {
        if (v1 == 1953903152 || v1 == 1953903154) {
          return result;
        }
        int v5 = 1953903668;
      }
      goto LABEL_66;
    }
    if (v1 <= 2019963955)
    {
      if (v1 == 2016687216 || v1 == 2019963440) {
        return result;
      }
      unsigned __int16 v3 = 12850;
    }
    else
    {
      if (v1 > 2037741157)
      {
        if (v1 == 2037741158) {
          return result;
        }
        int v5 = 2037741171;
        goto LABEL_66;
      }
      if (v1 == 2019963956) {
        return result;
      }
      unsigned __int16 v3 = 13424;
    }
    int v5 = v3 | 0x78660000;
    goto LABEL_66;
  }
  if (v1 > 645424687)
  {
    if (v1 <= 875704421)
    {
      if ((v1 - 645424688) <= 4 && ((1 << (v1 - 48)) & 0x15) != 0) {
        goto LABEL_52;
      }
      int v4 = -645428784;
      goto LABEL_25;
    }
    if (v1 > 875704949)
    {
      if (v1 == 875704950 || v1 == 875836518) {
        return result;
      }
      int v5 = 875836534;
    }
    else
    {
      if (v1 == 875704422 || v1 == 875704438) {
        return result;
      }
      int v5 = 875704934;
    }
LABEL_66:
    if (v1 == v5) {
      return result;
    }
    return 0;
  }
  if (v1 > 643969847)
  {
    if (((v1 - 645162544) > 4 || ((1 << (v1 - 48)) & 0x15) == 0)
      && ((v1 - 645166640) > 4 || ((1 << (v1 - 48)) & 0x15) == 0)
      && v1 != 643969848)
    {
      return 0;
    }
    goto LABEL_52;
  }
  if ((v1 - 641230384) > 4 || ((1 << (v1 - 48)) & 0x15) == 0)
  {
    int v4 = -641234480;
LABEL_25:
    unsigned int v6 = v1 + v4;
    if (v6 <= 4 && ((1 << v6) & 0x15) != 0) {
      goto LABEL_52;
    }
    return 0;
  }
LABEL_52:
  if (CADeviceSupportsUniversalCompression::once != -1) {
    dispatch_once(&CADeviceSupportsUniversalCompression::once, &__block_literal_global_37_12054);
  }
  return CADeviceSupportsUniversalCompression::universal != 0;
}

atomic_uint **X::Ref<CA::CAHDRProcessor>::operator=(atomic_uint **a1, atomic_uint *a2)
{
  unsigned __int16 v3 = *a1;
  if (v3 != a2)
  {
    if (v3 && atomic_fetch_add(v3 + 4, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
    }
    if (a2) {
      atomic_fetch_add(a2 + 4, 1u);
    }
    *a1 = a2;
  }
  return a1;
}

__n128 CA::Render::Surface::set_tonemap_cfg(uint64_t a1, uint64_t a2)
{
  int v4 = *(atomic_uint **)(a1 + 168);
  int v5 = *(atomic_uint **)a2;
  if (v4 != *(atomic_uint **)a2)
  {
    if (v4)
    {
      if (atomic_fetch_add(v4 + 4, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v4 + 8))(v4);
      }
      int v5 = *(atomic_uint **)a2;
    }
    if (v5) {
      atomic_fetch_add(v5 + 4, 1u);
    }
    *(void *)(a1 + 168) = v5;
  }
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 8);
  long long v6 = *(_OWORD *)(a2 + 24);
  long long v7 = *(_OWORD *)(a2 + 40);
  long long v8 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 240) = v8;
  *(_OWORD *)(a1 + 192) = v6;
  *(_OWORD *)(a1 + 208) = v7;
  __n128 result = *(__n128 *)(a2 + 88);
  long long v10 = *(_OWORD *)(a2 + 104);
  long long v11 = *(_OWORD *)(a2 + 120);
  *(unsigned char *)(a1 + 304) = *(unsigned char *)(a2 + 136);
  *(_OWORD *)(a1 + 272) = v10;
  *(_OWORD *)(a1 + 288) = v11;
  *(__n128 *)(a1 + 256) = result;
  return result;
}

uint64_t CA::Render::LayerSubclass::preserves_contents_opacity(CA::Render::LayerSubclass *this, const CA::Render::Layer *a2)
{
  return 1;
}

uint64_t CA::Render::LayerSubclass::get_volume()
{
  return 0;
}

uint64_t CA::Render::LayerSubclass::get_property(CA::Render::LayerSubclass *this, unint64_t a2, const unsigned int *a3, unint64_t a4, double *a5, double **a6)
{
  return 0;
}

uint64_t CA::Render::LayerSubclass::get_keypath_object(CA::Render::LayerSubclass *this, void *const *a2)
{
  return 0;
}

uint64_t CA::Render::LayerSubclass::copy@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  if (!atomic_fetch_add((atomic_uint *volatile)(this + 8), 1u)) {
    atomic_fetch_add((atomic_uint *volatile)(this + 8), 0xFFFFFFFF);
  }
  *a2 = this;
  return this;
}

uint64_t CA::Render::anonymous namespace'::create_image_levels(uint64_t this, unsigned int a2, unsigned int a3, CA *a4, unsigned __int16 *a5, char *a6, const unint64_t *a7)
{
  uint64_t v10 = a3 - 1;
  long long v11 = (size_t *)(a6 + 8);
  do
  {
    size_t v12 = *(v11 - 1);
    vImagePixelCount v13 = a2;
    uint64_t v14 = (unsigned __int16 *)((char *)a5 + v12 * a2);
    if (this <= 1) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = this >> 1;
    }
    if (a2 <= 1) {
      a2 = 1;
    }
    else {
      a2 >>= 1;
    }
    CA::downsample_image(a4, a5, v12, this, v13, v14, *v11++, 0, 0.0, 0.0, (double)v15, (double)a2, v16);
    this = v15;
    a5 = v14;
    --v10;
  }
  while (v10);
  return this;
}

uint64_t CA::Render::anonymous namespace'::block_set_free(CA::Render::_anonymous_namespace_ *this, const void *a2, void *a3)
{
  return CGImageBlockSetRelease();
}

void CA::Render::anonymous namespace'::flush_images_callback(CA::Render::_anonymous_namespace_ *this, CA::Render::Object *a2, void *a3, void *a4)
{
  v7[1] = *MEMORY[0x1E4F143B8];
  if (CA::Render::image_cache)
  {
    v7[0] = 0;
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::image_cache_lock);
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::image_cache_lock);
    for (double i = (void *)v7[0]; v7[0]; double i = (void *)v7[0])
    {
      v7[0] = i[1];
      int v5 = (atomic_uint *)i[3];
      if (v5)
      {
        if (atomic_fetch_add(v5 + 2, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v5 + 16))(v5);
        }
      }
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      malloc_zone_free(malloc_zone, i);
    }
  }
}

uint64_t CA::Render::anonymous namespace'::FlushImages::predicate(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = a2[3];
  if (*(_DWORD *)(v3 + 8) == 1)
  {
    if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v7 = *a2;
      long long v6 = (void *)a2[1];
      *(void *)(v7 + 8) = v6;
      void *v6 = v7;
      uint64_t v8 = *a3;
      *a2 = (uint64_t)a2;
      a2[1] = v8;
      *a3 = (uint64_t)a2;
      return 1;
    }
    if (!CA::Render::Encoder::ObjectCache::_cache_list)
    {
      os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Encoder::ObjectCache::_lock);
      if (!CA::Render::Encoder::ObjectCache::_cache_list)
      {
        *(_DWORD *)(v3 + 12) &= ~0x80000000;
        os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Encoder::ObjectCache::_lock);
        goto LABEL_3;
      }
      os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Encoder::ObjectCache::_lock);
    }
  }
  return 0;
}

void CA::Render::anonymous namespace'::show_image_cache_entry(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    int v5 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a2 + 32);
      int v7 = *(_DWORD *)(a2 + 40);
      uint64_t v8 = "mipmaps ";
      *(_DWORD *)buf = 134219522;
      uint64_t v9 = "mask ";
      if ((v7 & 1) == 0) {
        uint64_t v8 = "";
      }
      uint64_t v14 = a1;
      if ((v7 & 2) == 0) {
        uint64_t v9 = "";
      }
      __int16 v15 = 2048;
      uint64_t v16 = v6;
      uint64_t v10 = "transient ";
      if ((v7 & 4) == 0) {
        uint64_t v10 = "";
      }
      __int16 v17 = 2080;
      uint64_t v18 = v8;
      long long v11 = "unmatched ";
      if ((v7 & 8) == 0) {
        long long v11 = "";
      }
      __int16 v19 = 2080;
      uint64_t v20 = v9;
      __int16 v21 = 2080;
      if ((v7 & 0x10) != 0) {
        size_t v12 = "partial ";
      }
      else {
        size_t v12 = "";
      }
      float v22 = v10;
      __int16 v23 = 2080;
      uint64_t v24 = v11;
      __int16 v25 = 2080;
      CFStringRef v26 = v12;
      _os_log_impl(&dword_184668000, v5, OS_LOG_TYPE_DEFAULT, "  %p deadline %f %s%s%s%s%s", buf, 0x48u);
    }
  }
  CA::Render::show_object(*(CA::Render **)(a2 + 24), v4);
}

uint64_t write_attr(uint64_t result, uint64_t *a2, int a3, void *a4)
{
  if (a3 == 2)
  {
    uint64_t v4 = *a2;
    if (*a2)
    {
      [a4 beginPropertyElement:CAAtomGetString(result)];
      [a4 encodeObject:v4];
      return [a4 endElement];
    }
  }
  return result;
}

{
  uint64_t v4;
  uint64_t vars8;

  if (a3 == 2)
  {
    uint64_t v4 = *a2;
    if (*a2)
    {
      [a4 beginPropertyElement:CAAtomGetString(result)];
      [a4 encodeObject:v4];
      return [a4 endElement];
    }
  }
  return result;
}

uint64_t copy_dictionary(uint64_t result, uint64_t *a2, int a3, void *a4)
{
  if ((a3 - 1) <= 3)
  {
    uint64_t v4 = *a2;
    if (*a2)
    {
      CFStringRef String = CAAtomGetString(result);
      return [a4 setObject:v4 forKey:String];
    }
  }
  return result;
}

{
  uint64_t v4;
  __CFString *String;
  uint64_t vars8;

  if ((a3 - 1) <= 3)
  {
    uint64_t v4 = *a2;
    if (*a2)
    {
      CFStringRef String = CAAtomGetString(result);
      return [a4 setObject:v4 forKey:String];
    }
  }
  return result;
}

_DWORD *set_flag(_DWORD *result, int a2, NSString *a3, int a4)
{
  if (((((result[6] & a2) == 0) ^ a4) & 1) == 0)
  {
    int v7 = result;
    objc_msgSend(result, "willChangeValueForKey:");
    if (a4) {
      int v8 = v7[6] | a2;
    }
    else {
      int v8 = v7[6] & ~a2;
    }
    v7[6] = v8;
    uint64_t v9 = (atomic_uint *)*((void *)v7 + 5);
    if (v9)
    {
      if (atomic_fetch_add(v9 + 2, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v9 + 16))(v9);
      }
      *((void *)v7 + 5) = 0;
    }
    return (_DWORD *)[v7 didChangeValueForKey:a3];
  }
  return result;
}

uint64_t CA::CG::MetalContext::get_gpu_registry_id()
{
  uint64_t Info = CGContextDelegateGetInfo();
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)Info + 16))(Info);
  if (result) {
    return *(void *)(result + 200);
  }
  return result;
}

uint64_t CA::CG::MetalContext::set_gpu_registry_id(uint64_t a1, uint64_t a2)
{
  uint64_t Info = CGContextDelegateGetInfo();
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)Info + 16))(Info);
  if (result) {
    *(void *)(result + 200) = a2;
  }
  return result;
}

CGImageRef CA::CG::MetalContext::create_image_by_reference()
{
  uint64_t v0 = *(CA::CG::MetalDrawable **)(CGContextDelegateGetInfo() + 336);

  return CA::CG::MetalDrawable::copy_cgimage_mtl(v0);
}

CGImageRef CA::CG::MetalContext::create_image()
{
  uint64_t v0 = *(CA::CG::MetalDrawable **)(CGContextDelegateGetInfo() + 336);
  unsigned int v1 = *((_DWORD *)v0 + 4);
  if (v1 <= 0x23 && ((0x1FFFFFF2FuLL >> v1) & 1) == 0)
  {
    return CA::CG::MetalDrawable::copy_cgimage_mtl(v0);
  }
  else
  {
    return CA::CG::MetalDrawable::copy_cgimage(v0);
  }
}

uint64_t CA::CG::MetalContext::get_display_mask()
{
  return 0xFFFFFFFFLL;
}

uint64_t CA::CG::MetalContext::create_delegate(uint64_t a1)
{
  CAIsAppSuspended();
  uint64_t v2 = [*(id *)(a1 + 16) pixelFormat];
  BOOL v3 = (unint64_t)(v2 - 70) > 0x2D || ((1 << (v2 - 70)) & 0x200000000C03) == 0;
  if (!v3
    || ((unint64_t)(v2 - 550) <= 5 ? (BOOL v4 = ((1 << (v2 - 38)) & 0x33) == 0) : (BOOL v4 = 1), !v4))
  {
    int v5 = *(CGColorSpace **)(a1 + 40);
    if (v5) {
      size_t NumberOfComponents = (CA::Render *)CGColorSpaceGetNumberOfComponents(v5);
    }
    else {
      size_t NumberOfComponents = 0;
    }
    unsigned int v7 = CA::Render::coregraphics_image_format(NumberOfComponents, *(_DWORD *)(a1 + 32), *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 48))- 1;
    if (v7 > 0x14) {
      int v8 = -1;
    }
    else {
      int v8 = dword_1849A7E54[v7];
    }
    signed int PixelFormat = (CA::Render *)CAMetalTextureGetPixelFormat(*(void **)(a1 + 16));
    if (PixelFormat == 1999843442 || PixelFormat == 1647534392) {
      int v8 = CA::Render::fourcc_to_format(PixelFormat);
    }
    if (v8 != -1) {
      operator new();
    }
  }
  CGPostError();
  return 0;
}

uint64_t CA::CG::AccelContextDelegate<CA::CG::MetalDrawable>::gpu_registry_id(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 336) + 72);
  if (v1) {
    return *(void *)(v1 + 200);
  }
  else {
    return 0;
  }
}

uint64_t CA::CG::AccelContextDelegate<CA::CG::MetalDrawable>::queue(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 336);
  if (!v1) {
    return 0;
  }
  uint64_t result = v1[9];
  if (!result)
  {
    uint64_t result = (*(uint64_t (**)(void *))(*v1 + 72))(v1);
    v1[9] = result;
  }
  return result;
}

void CA::CG::MetalContextDelegate::~MetalContextDelegate(CA::CG::MetalContextDelegate *this)
{
  *(void *)this = &unk_1ED0294F0;
  uint64_t v2 = (atomic_uint *)*((void *)this + 42);
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
  {
    (**(void (***)(atomic_uint *))v2)(v2);
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  CA::CG::ContextDelegate::~ContextDelegate((CGColorSpaceRef *)this);

  JUMPOUT(0x185323DC0);
}

{
  atomic_uint *v2;
  uint64_t vars8;

  *(void *)this = &unk_1ED0294F0;
  uint64_t v2 = (atomic_uint *)*((void *)this + 42);
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
  {
    (**(void (***)(atomic_uint *))v2)(v2);
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }

  CA::CG::ContextDelegate::~ContextDelegate((CGColorSpaceRef *)this);
}

void CA::CG::AccelContextDelegate<CA::CG::MetalDrawable>::~AccelContextDelegate(CA::CG::ContextDelegate *this)
{
  *(void *)this = &unk_1ED0294F0;
  uint64_t v2 = (atomic_uint *)*((void *)this + 42);
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
  {
    (**(void (***)(atomic_uint *))v2)(v2);
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  CA::CG::ContextDelegate::~ContextDelegate((CGColorSpaceRef *)this);

  JUMPOUT(0x185323DC0);
}

{
  atomic_uint *v2;
  uint64_t vars8;

  *(void *)this = &unk_1ED0294F0;
  uint64_t v2 = (atomic_uint *)*((void *)this + 42);
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
  {
    (**(void (***)(atomic_uint *))v2)(v2);
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }

  CA::CG::ContextDelegate::~ContextDelegate((CGColorSpaceRef *)this);
}

void sub_18480A118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, atomic_uint *a9)
{
  if (a9)
  {
    if (atomic_fetch_add(a9 + 2, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a9 + 16))(a9);
    }
  }
  _Unwind_Resume(exception_object);
}

void *interpolatedMeshTransform(CAMeshTransform *a1, atomic_uint *a2)
{
  if (!a2) {
    return 0;
  }
  int v4 = *((unsigned __int8 *)a2 + 12);
  if (v4 == 33)
  {
    int v5 = [[CAMeshTransform alloc] _init];
    v5[1] = a2;
    goto LABEL_7;
  }
  if (v4 != 26) {
    return 0;
  }
  int v5 = [(CAMeshTransform *)[CAMeshInterpolator alloc] _init];
  v5[5] = a2;
LABEL_7:
  if (!atomic_fetch_add(a2 + 2, 1u)) {
    atomic_fetch_add(a2 + 2, 0xFFFFFFFF);
  }
  impl = (int *)a1->_impl;
  if (impl)
  {
    uint64_t v8 = impl[25];
    v5[2] = impl[24];
    v5[3] = v8;
    *((unsigned char *)v5 + 32) = *((unsigned char *)impl + 108);
  }

  return v5;
}

void sub_18480A748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add(a10 + 2, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 16))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_18480AC14(_Unwind_Exception *exception_object)
{
  if (atomic_fetch_add(v1 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v1 + 16))(v1);
  }
  _Unwind_Resume(exception_object);
}

char *x_dtostr_(char *a1, unint64_t a2, char a3, double a4, double a5)
{
  double v5 = a4;
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (a5 <= 0.0) {
    double v6 = 0.000001;
  }
  else {
    double v6 = a5;
  }
  if (a2 < 8) {
    return 0;
  }
  if (a4 >= 0.0)
  {
    long long v11 = a1;
  }
  else
  {
    *a1 = 45;
    long long v11 = a1 + 1;
    double v5 = -a4;
  }
  if (v5 == 0.0)
  {
LABEL_10:
    int __e = 0;
    if (v5 > 0.0)
    {
      if (v5 >= 0.01 && v5 <= 100.0)
      {
        int v13 = 0;
        double v15 = v5;
        double v14 = v6;
      }
      else
      {
        frexp(v5, &__e);
        int v13 = llround((double)__e * 0.301029996);
        double v14 = pow_10(v13) * v6;
        double v15 = pow_10(-v13) * v5;
      }
      double v18 = v6 * 0.5;
      double v19 = v15 + v6 * 0.5;
      if (v19 >= 10.0)
      {
        do
        {
          ++v13;
          double v15 = v15 * 0.1;
          double v14 = v14 * 10.0;
          double v19 = v15 + v18;
        }
        while (v15 + v18 >= 10.0);
      }
      if (v19 < 1.0)
      {
        do
        {
          --v13;
          double v15 = v15 * 10.0;
          double v14 = v14 * 0.1;
        }
        while (v15 + v18 < 1.0);
      }
      int __e = v13;
      if (v13 >= 0) {
        unsigned int v20 = v13;
      }
      else {
        unsigned int v20 = -v13;
      }
      if (v20 <= 3)
      {
        int __e = 0;
        if (v14 < v6) {
          goto LABEL_30;
        }
      }
      else
      {
        double v5 = v15;
      }
    }
    double v14 = v6;
LABEL_30:
    __int16 v21 = &a1[a2];
    double v22 = v5 + v14 * 0.5;
    double v23 = floor(v22);
    if (v23 > v14)
    {
      uint64_t v24 = 1;
      double v25 = v23;
      uint64_t result = v11;
      while (result != v21)
      {
        uint64_t v26 = v24;
        double v27 = v25 * 0.1 + 0.05;
        double v25 = floor(v27);
        *result++ = (int)((v27 - v25) * 10.0) + 48;
        ++v24;
        if (v25 <= v14)
        {
          if (result - v11 >= 2)
          {
            uint64_t v28 = -1;
            do
            {
              char v29 = result[v28];
              result[v28] = *v11;
              *v11++ = v29;
              v26 -= 2;
              --v28;
            }
            while (v26 > 1);
          }
          goto LABEL_39;
        }
      }
      return 0;
    }
    *long long v11 = 48;
    uint64_t result = v11 + 1;
LABEL_39:
    double v30 = v22 - v23;
    if (v30 > v14)
    {
      if (result != v21)
      {
        *result++ = 46;
        while (result != v21)
        {
          double v31 = v30 * 10.0;
          *result++ = vcvtmd_s64_f64(v31) + 48;
          double v30 = v31 - floor(v31);
          double v14 = v14 * 10.0;
          if (v30 <= v14) {
            goto LABEL_48;
          }
        }
      }
      return 0;
    }
    int v32 = __e;
    if (!(__e | a3 & 1))
    {
      if (v21 - result < 2) {
        return 0;
      }
      *(_WORD *)uint64_t result = 12334;
      result += 2;
LABEL_48:
      int v32 = __e;
    }
    if (v32)
    {
      if (v21 - result < 3) {
        return 0;
      }
      *uint64_t result = 101;
      uint64_t v33 = result + 1;
      int v34 = __e;
      if (__e < 0)
      {
        uint64_t v33 = result + 2;
        result[1] = 45;
        int v34 = -__e;
        int __e = -__e;
      }
      uint64_t result = v33;
      if (v34 >= 1)
      {
        uint64_t result = v33;
        while (result != v21)
        {
          *result++ = (v34 % 0xAu) | 0x30;
          int v35 = __e;
          int v34 = __e / 10;
          __e /= 10;
          if (v35 <= 9) {
            goto LABEL_57;
          }
        }
        return 0;
      }
LABEL_57:
      uint64_t v36 = result - v33;
      if (result - v33 >= 2)
      {
        uint64_t v37 = -1;
        do
        {
          char v38 = result[v37];
          result[v37] = *v33;
          *v33++ = v38;
          v36 -= 2;
          --v37;
        }
        while (v36 > 1);
      }
    }
    if (result != v21)
    {
      *uint64_t result = 0;
      return result;
    }
    return 0;
  }
  double v16 = fabs(v5);
  if (v16 == INFINITY)
  {
    __int16 v17 = "Inf";
  }
  else
  {
    if (v16 >= 2.22507386e-308) {
      goto LABEL_10;
    }
    __int16 v17 = "0";
  }

  return stpcpy(v11, v17);
}

uint64_t CA::Render::format_opaque_format(CA::Render *this)
{
  switch((int)this)
  {
    case 11:
      uint64_t result = 12;
      break;
    case 12:
    case 14:
    case 15:
    case 17:
    case 19:
    case 20:
      goto LABEL_6;
    case 13:
      uint64_t result = 17;
      break;
    case 16:
      uint64_t result = 16;
      break;
    case 18:
      uint64_t result = 19;
      break;
    case 21:
      uint64_t result = 22;
      break;
    default:
      if (this)
      {
        if (this == 1) {
          uint64_t result = 3;
        }
        else {
LABEL_6:
        }
          uint64_t result = 0xFFFFFFFFLL;
      }
      else
      {
        uint64_t result = 2;
      }
      break;
  }
  return result;
}

uint64_t CA::Render::format_opacity_at_value(CA::Render *this, __int16 *a2, float *a3, float *a4, float a5)
{
  int v5 = (int)this;
  uint64_t result = 0;
  switch(v5)
  {
    case 0:
    case 8:
    case 9:
    case 15:
      LOBYTE(a5) = *(unsigned char *)a2;
      goto LABEL_7;
    case 1:
    case 11:
      LOBYTE(a5) = *((unsigned char *)a2 + 3);
      goto LABEL_7;
    case 13:
      _H0 = a2[3];
      goto LABEL_15;
    case 14:
      _S0 = *((float *)a2 + 3);
      goto LABEL_17;
    case 18:
      LOBYTE(a5) = *((unsigned char *)a2 + 1);
LABEL_7:
      float v9 = (float)LODWORD(a5);
      float v10 = 0.0039216;
      goto LABEL_13;
    case 21:
      LOWORD(a5) = a2[3];
      goto LABEL_12;
    case 23:
      _H0 = *a2;
      goto LABEL_15;
    case 24:
      _S0 = *(float *)a2;
      goto LABEL_17;
    case 27:
      LOWORD(a5) = a2[1];
LABEL_12:
      float v9 = (float)LODWORD(a5);
      float v10 = 0.000015259;
LABEL_13:
      _S0 = v9 * v10;
      goto LABEL_17;
    case 28:
      _H0 = a2[1];
LABEL_15:
      __asm { FCVT            S0, H0 }
      goto LABEL_17;
    case 34:
      _S0 = (double)(((unsigned __int16)a2[3] >> 6) - 384) * 0.00196078431;
LABEL_17:
      *a3 = _S0;
      uint64_t result = 1;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t CA::Render::fourcc_packed_from_unpacked(CA::Render *this)
{
  int v1 = (int)this;
  if ((int)this > 2016686639)
  {
    uint64_t result = 1882468912;
    if (v1 > 2019963439)
    {
      switch(v1)
      {
        case 2019963440:
          return 1885745712;
        case 2019963442:
          return 1885745714;
        case 2019963956:
          return 1885746228;
      }
    }
    else
    {
      switch(v1)
      {
        case 2016686640:
          return result;
        case 2016686642:
          return 1882468914;
        case 2016687156:
          return 1882469428;
      }
    }
  }
  else
  {
    if ((int)this <= 1953903151)
    {
      if (this != 1952854576)
      {
        if (this == 1952854578) {
          return 1886676530;
        }
        if (this == 1952855092) {
          return 1886676532;
        }
        return 0;
      }
      unsigned __int16 v3 = 26160;
      return v3 | 0x70740000u;
    }
    switch(this)
    {
      case 0x74763230:
        return 1886680624;
      case 0x74763232:
        unsigned __int16 v3 = 30258;
        return v3 | 0x70740000u;
      case 0x74763434:
        return 1886680628;
    }
  }
  return 0;
}

uint64_t CA::Render::fourcc_unpacked_from_packed(CA::Render *this)
{
  int v1 = (int)this;
  if ((int)this <= 1886676527)
  {
    uint64_t result = 2016686640;
    if (v1 <= 1885745711)
    {
      switch(v1)
      {
        case 1882468912:
          return result;
        case 1882468914:
          return 2016686642;
        case 1882469428:
          return 2016687156;
      }
      return 0;
    }
    if (v1 == 1885745712) {
      return 2019963440;
    }
    if (v1 == 1885745714) {
      return 2019963442;
    }
    if (v1 != 1885746228) {
      return 0;
    }
    int v3 = 2019963442;
    return (v3 + 514);
  }
  if ((int)this <= 1886680623)
  {
    switch(this)
    {
      case 0x70746630:
        return 1952854576;
      case 0x70746632:
        return 1952854578;
      case 0x70746634:
        return 1952855092;
    }
    return 0;
  }
  switch(this)
  {
    case 0x70747630:
      return 1953903152;
    case 0x70747632:
      return 1953903154;
    case 0x70747634:
      int v3 = 1953903154;
      return (v3 + 514);
  }
  return 0;
}

uint64_t CA::Render::fourcc_is_422(CA::Render *this)
{
  int v1 = (int)this;
  uint64_t result = 1;
  if (v1 > 875704949)
  {
    if (v1 > 1952854577)
    {
      if (v1 > 2084070961)
      {
        if (v1 > 2088003121)
        {
          if (v1 > 2088265265)
          {
            if (v1 == 2088265266) {
              return result;
            }
            int v3 = 2088269362;
          }
          else
          {
            if (v1 == 2088003122) {
              return result;
            }
            int v3 = 2088007218;
          }
        }
        else if (v1 > 2087937585)
        {
          if (v1 == 2087937586) {
            return result;
          }
          int v3 = 2087941682;
        }
        else
        {
          if (v1 == 2084070962) {
            return result;
          }
          int v3 = 2084075058;
        }
        goto LABEL_90;
      }
      if (v1 > 2016567607)
      {
        if (v1 > 2016686641)
        {
          if (v1 == 2016686642) {
            return result;
          }
          int v3 = 2019963442;
        }
        else
        {
          if (v1 == 2016567608) {
            return result;
          }
          int v3 = 2016567667;
        }
        goto LABEL_90;
      }
      if (v1 != 1952854578 && v1 != 1953903154)
      {
        int v3 = 1983013176;
        goto LABEL_90;
      }
    }
    else
    {
      if (v1 > 1882468913)
      {
        if (v1 > 1932681586)
        {
          if (v1 > 1937125937)
          {
            if (v1 == 1937125938) {
              return result;
            }
            int v3 = 1949458803;
          }
          else
          {
            if (v1 == 1932681587) {
              return result;
            }
            int v3 = 1936077362;
          }
        }
        else if (v1 > 1886676529)
        {
          if (v1 == 1886676530) {
            return result;
          }
          int v3 = 1886680626;
        }
        else
        {
          if (v1 == 1882468914) {
            return result;
          }
          int v3 = 1885745714;
        }
        goto LABEL_90;
      }
      if (v1 > 1534354993)
      {
        if (v1 > 1534617137)
        {
          if (v1 == 1534617138) {
            return result;
          }
          int v3 = 1534621234;
        }
        else
        {
          if (v1 == 1534354994) {
            return result;
          }
          int v3 = 1534359090;
        }
        goto LABEL_90;
      }
      if (v1 != 875704950 && v1 != 1530422834)
      {
        int v3 = 1530426930;
        goto LABEL_90;
      }
    }
  }
  else if (v1 > 762537521)
  {
    if (v1 > 792229425)
    {
      if (v1 > 796161585)
      {
        if (v1 > 796423729)
        {
          if (v1 == 796423730) {
            return result;
          }
          int v3 = 875704934;
        }
        else
        {
          if (v1 == 796161586) {
            return result;
          }
          int v3 = 796419634;
        }
      }
      else if (v1 > 796096049)
      {
        if (v1 == 796096050) {
          return result;
        }
        int v3 = 796157490;
      }
      else
      {
        if (v1 == 792229426) {
          return result;
        }
        int v3 = 796091954;
      }
      goto LABEL_90;
    }
    if (v1 > 762607153)
    {
      if (v1 > 762869297)
      {
        if (v1 == 762869298) {
          return result;
        }
        int v3 = 792225330;
      }
      else
      {
        if (v1 == 762607154) {
          return result;
        }
        int v3 = 762865202;
      }
      goto LABEL_90;
    }
    if (v1 != 762537522 && v1 != 762541618)
    {
      int v3 = 762603058;
      goto LABEL_90;
    }
  }
  else
  {
    if (v1 > 645166641)
    {
      if (v1 > 645424689)
      {
        if (v1 > 758670897)
        {
          if (v1 == 758670898) {
            return result;
          }
          int v3 = 758674994;
          goto LABEL_90;
        }
        if (v1 == 645424690) {
          return result;
        }
        unsigned __int16 v5 = 30258;
      }
      else
      {
        if (v1 <= 645411383)
        {
          if (v1 == 645166642) {
            return result;
          }
          int v3 = 645280312;
          goto LABEL_90;
        }
        if (v1 == 645411384) {
          return result;
        }
        unsigned __int16 v5 = 12915;
      }
      int v3 = v5 | 0x26780000;
LABEL_90:
      if (v1 != v3) {
        return 0;
      }
      return result;
    }
    if (v1 > 645097009)
    {
      if (v1 > 645149298)
      {
        if (v1 == 645149299) {
          return result;
        }
        int v3 = 645162546;
        goto LABEL_90;
      }
      if (v1 == 645097010) {
        return result;
      }
      unsigned __int16 v4 = 30258;
      goto LABEL_55;
    }
    if (v1 != 641230386 && v1 != 641234482)
    {
      unsigned __int16 v4 = 12915;
LABEL_55:
      int v3 = v4 | 0x26730000;
      goto LABEL_90;
    }
  }
  return result;
}

uint64_t CA::Render::fourcc_422_from_420(CA::Render *this)
{
  if ((int)this <= 1949327730)
  {
    if ((int)this <= 1885745711)
    {
      uint64_t v1 = 875704934;
      switch(this)
      {
        case 0x34323066:
          return v1;
        case 0x34323076:
          return 875704950;
        case 0x70343230:
          return 1882468914;
      }
      return 0;
    }
    if ((int)this > 1936077359)
    {
      if (this == 1936077360) {
        return 1936077362;
      }
      if (this != 1937125936) {
        return 0;
      }
      int v3 = 1936077362;
      return v3 | 0x100000u;
    }
    if (this != 1885745712)
    {
      int v2 = 1932550515;
      goto LABEL_14;
    }
    int v4 = 1882468914;
    return (v4 + 3276800);
  }
  if ((int)this > 2016436535)
  {
    if ((int)this <= 2016686639)
    {
      if (this == 2016436536) {
        return 2016567608;
      }
      int v2 = 2016436595;
LABEL_14:
      if (this != v2) {
        return 0;
      }
      return 2016567667;
    }
    if (this == 2016686640) {
      return 2016686642;
    }
    if (this != 2019963440) {
      return 0;
    }
    int v4 = 2016686642;
    return (v4 + 3276800);
  }
  if ((int)this > 1953903151)
  {
    if (this != 1953903152)
    {
      if (this == 1982882104) {
        return 1983013176;
      }
      return 0;
    }
    int v3 = 1952854578;
    return v3 | 0x100000u;
  }
  if (this == 1949327731) {
    return 2016567667;
  }
  if (this != 1952854576) {
    return 0;
  }
  return 1952854578;
}

dispatch_queue_t ___ZN2CA3OGLL17release_iosurfaceEP11__IOSurface_block_invoke()
{
  uint64_t v0 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  dispatch_queue_t result = dispatch_queue_create("com.apple.coreanimation.async_dealloc", v0);
  CA::OGL::release_iosurface(__IOSurface *)::queue = (uint64_t)result;
  return result;
}

void *___ZN2CA3OGL22AsynchronousDispatcher10dispatcherEv_block_invoke()
{
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  dispatch_queue_t result = malloc_type_zone_calloc(malloc_zone, 1uLL, 0x60uLL, 0x743898A5uLL);
  uint64_t v2 = (uint64_t)result;
  if (result)
  {
    *dispatch_queue_t result = 0;
    CA::Render::add_observer(0x18u, 0, (uint64_t)CA::OGL::AsynchronousDispatcher::AsynchronousDispatcher(void)::$_0::__invoke, 0, 0);
    int v3 = x_thread_create((uint64_t)CA::OGL::AsynchronousDispatcher::thread_body, v2, 1);
    *(void *)(v2 + 24) = v3;
    CA::Render::Server::set_thread_priority(v3, (_opaque_pthread_t *)0xFFFFFFF1);
    dispatch_queue_t result = (void *)CAHostTimeWithTime(0.0166666667);
    *(void *)(v2 + 48) = result;
    *(_DWORD *)(v2 + 16) = 0;
  }
  CA::OGL::AsynchronousDispatcher::dispatcher(void)::dispatcher = v2;
  return result;
}

void CA::OGL::AsynchronousDispatcher::thread_body(CA::OGL::AsynchronousDispatcher *this, void *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  int v3 = pthread_setname_np("com.apple.coreanimation.asynchronous");
  if (v3)
  {
    int v4 = v3;
    unsigned __int16 v5 = x_log_category_utilities;
    if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      float v10 = "com.apple.coreanimation.asynchronous";
      __int16 v11 = 1024;
      int v12 = v4;
      _os_log_error_impl(&dword_184668000, v5, OS_LOG_TYPE_ERROR, "pthread_setname_np(%s) returned %d\n", (uint8_t *)&v9, 0x12u);
    }
  }
  *((void *)this + 4) = CFRunLoopGetCurrent();
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  unsigned int v7 = CFRunLoopTimerCreate(0, Current + 3153600000.0, 3153600000.0, 0, 0, (CFRunLoopTimerCallBack)CA::OGL::AsynchronousDispatcher::thread_body(void *)::$_0::__invoke, 0);
  CFStringRef v8 = (const __CFString *)*MEMORY[0x1E4F1D418];
  CFRunLoopAddTimer(*((CFRunLoopRef *)this + 4), v7, (CFRunLoopMode)*MEMORY[0x1E4F1D418]);
  CA::OGL::AsynchronousDispatcher::start_timer((unint64_t)this);
  *(_DWORD *)this = 1;
  CFRunLoopRun();
  CFRunLoopRemoveTimer(*((CFRunLoopRef *)this + 4), v7, v8);
  CFRelease(v7);
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
}

void CA::OGL::AsynchronousDispatcher::AsynchronousDispatcher(void)::$_0::__invoke(uint64_t a1, uint64_t a2, int *a3)
{
  int v3 = *a3;
  CA::OGL::cache_io_surfaces = *a3 != 0;
  if (!v3)
  {
    os_unfair_lock_lock(&CA::OGL::surface_cache_lock);
    for (uint64_t i = 0; i != 2; ++i)
    {
      double v6 = (CA::OGL *)CA::OGL::surface_cache[i];
      if (v6)
      {
        CA::OGL::release_iosurface(v6, v4);
        CA::OGL::surface_cache[i] = 0;
      }
    }
    os_unfair_lock_unlock(&CA::OGL::surface_cache_lock);
  }
}

void CA::OGL::Renderer::~Renderer(CA::OGL::Renderer *this)
{
  uint64_t v2 = (CA::Shape *)*((void *)this + 2);
  if (v2) {
    CA::Shape::unref(v2);
  }
  free(*((void **)this + 6));
}

CA::Shape *CA::OGL::Renderer::set_clip_shape(CA::OGL::Renderer *this, CA::Shape *a2)
{
  dispatch_queue_t result = (CA::Shape *)*((void *)this + 2);
  if (result != a2)
  {
    if (result) {
      CA::Shape::unref(result);
    }
    if (a2) {
      dispatch_queue_t result = (CA::Shape *)CA::Shape::ref((unint64_t)a2);
    }
    else {
      dispatch_queue_t result = 0;
    }
    *((void *)this + 2) = result;
  }
  return result;
}

void CA::Render::ReplicatorLayer::show(CA::Render::ReplicatorLayer *this, unsigned int a2, char a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  BOOL v5 = x_log_hook_p();
  if (a3)
  {
    if (v5) {
      goto LABEL_3;
    }
    double v6 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = *((_DWORD *)this + 4);
      *(_DWORD *)buf = 67109120;
      int v11 = v9;
      CFStringRef v8 = "replicatorLayer %d";
      goto LABEL_6;
    }
  }
  else
  {
    if (v5)
    {
LABEL_3:
      x_log_();
      return;
    }
    double v6 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *((_DWORD *)this + 4);
      *(_DWORD *)buf = 67109120;
      int v11 = v7;
      CFStringRef v8 = "(replicatorLayer %d)";
LABEL_6:
      _os_log_impl(&dword_184668000, v6, OS_LOG_TYPE_DEFAULT, v8, buf, 8u);
    }
  }
}

double param_fun(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  if (a3 == 1)
  {
    CFStringRef String = CAAtomGetString(*a2);
    CFStringRef v8 = 0;
  }
  else
  {
    CFStringRef String = (__CFString *)objc_alloc_init(MEMORY[0x1E4F28E78]);
    if (a3)
    {
      uint64_t v10 = 0;
      do
      {
        if (v10) {
          [(__CFString *)String appendString:@"."];
        }
        [(__CFString *)String appendString:CAAtomGetString(a2[v10++])];
      }
      while (a3 != v10);
    }
    CFStringRef v8 = String;
  }
  double v11 = ((double (*)(uint64_t, __CFString *, void))*a4)(a1, String, a4[1]);
  if (v8) {

  }
  return v11;
}

void CA::Render::Shmem::show(CA::Render::Shmem *this, unsigned int a2, char a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  BOOL v5 = x_log_hook_p();
  if (a3)
  {
    if (v5) {
      goto LABEL_3;
    }
    double v6 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *((void *)this + 2);
      *(_DWORD *)buf = 134217984;
      uint64_t v11 = v9;
      CFStringRef v8 = "(shmem %lu)";
      goto LABEL_6;
    }
  }
  else
  {
    if (v5)
    {
LABEL_3:
      x_log_();
      return;
    }
    double v6 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *((void *)this + 2);
      *(_DWORD *)buf = 134217984;
      uint64_t v11 = v7;
      CFStringRef v8 = "(shmem %lu bytes)";
LABEL_6:
      _os_log_impl(&dword_184668000, v6, OS_LOG_TYPE_DEFAULT, v8, buf, 0xCu);
    }
  }
}

CGImageRef CA::Render::Shmem::copy_cgimage(CA::Render::Shmem *this, CGColorSpace *a2, unint64_t a3, size_t a4)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= 0x24)
  {
    size_t v5 = a4;
    unint64_t v6 = a3;
    uint64_t v7 = a2;
    uint64_t v9 = (atomic_uint *)*((void *)this + 3);
    uint64_t v10 = (CA::Render *)v9[3];
    if (a3)
    {
      if (a4)
      {
LABEL_4:
        if (v6 <= v9[6] && v5 <= v9[7])
        {
          size_t v25 = v4 - v9[2];
          if (v9[4] <= 1) {
            unsigned int v26 = 1;
          }
          else {
            unsigned int v26 = v9[4];
          }
          size_t v12 = CA::Render::format_rowbytes((CA::Render *)v9[3], v26);
          double v23 = CGDataProviderCreateWithData(this, (char *)v9 + v9[2], v25, (CGDataProviderReleaseDataCallback)CA::Render::release_provider);
          atomic_fetch_add(v9, 1u);
          if (!atomic_fetch_add((atomic_uint *volatile)this + 2, 1u)) {
            atomic_fetch_add((atomic_uint *volatile)this + 2, 0xFFFFFFFF);
          }
        }
        else
        {
          int v32 = (CA::Render *)v9[3];
          unint64_t v11 = CA::Render::format_rowbytes(v10, v6);
          size_t v12 = v11;
          size_t v34 = v5;
          if (is_mul_ok(v11, v5)) {
            size_t v13 = v11 * v5;
          }
          else {
            size_t v13 = 0;
          }
          if (v9[4] <= 1) {
            unsigned int v14 = 1;
          }
          else {
            unsigned int v14 = v9[4];
          }
          unint64_t v15 = CA::Render::format_rowbytes((CA::Render *)v9[3], v14);
          double v16 = (char *)malloc_type_calloc(1uLL, v13, 0x6465FB00uLL);
          __int16 v17 = v16;
          uint64_t v18 = v9[7];
          if (v12 >= v15) {
            size_t v19 = v15;
          }
          else {
            size_t v19 = v12;
          }
          if (v18)
          {
            unsigned int v20 = 0;
            __int16 v21 = &v16[(v34 - v18) * v12];
            double v22 = (char *)v9 + v9[2];
            do
            {
              memcpy(v21, v22, v19);
              v22 += v15;
              v21 += v12;
              ++v20;
            }
            while (v20 < v9[7]);
          }
          double v23 = CGDataProviderCreateWithData(0, v17, v13, (CGDataProviderReleaseDataCallback)CA::Render::Shmem::copy_cgimage(CGColorSpace *,unsigned long,unsigned long)::$_0::__invoke);
          uint64_t v7 = a2;
          size_t v5 = v34;
          uint64_t v10 = v32;
        }
        if (v10 > 0x23)
        {
          size_t v28 = 0;
          size_t v29 = 0;
          CGBitmapInfo v30 = 0;
        }
        else
        {
          if ((v10 & 0xFFFFFFFE) == 8)
          {
            *(_OWORD *)decode = xmmword_184997D50;
            CGImageRef v27 = CGImageMaskCreate(v6, v5, dword_184999500[(void)v10], dword_1849993D8[(void)v10], v12, v23, decode, 1);
LABEL_33:
            CGImageRef v24 = v27;
            CGDataProviderRelease(v23);
            return v24;
          }
          size_t v29 = dword_184999500[(void)v10];
          size_t v28 = dword_1849993D8[(void)v10];
          CGBitmapInfo v30 = dword_184999348[(void)v10];
        }
        CGImageRef v27 = CGImageCreate(v6, v5, v29, v28, v12, v7, v30, v23, 0, 1, kCGRenderingIntentDefault);
        goto LABEL_33;
      }
    }
    else
    {
      unint64_t v6 = v9[6];
      if (a4) {
        goto LABEL_4;
      }
    }
    size_t v5 = v9[7];
    goto LABEL_4;
  }
  return 0;
}

uint64_t CA::Render::release_provider(uint64_t this, void *a2, const void *a3)
{
  if (atomic_fetch_add((atomic_uint *volatile)(this + 8), 0xFFFFFFFF) == 1) {
    return (*(uint64_t (**)(void))(*(void *)this + 16))();
  }
  return this;
}

void CA::Render::Shmem::copy_cgimage(CGColorSpace *,unsigned long,unsigned long)::$_0::__invoke(int a1, void *a2)
{
}

uint64_t CA::OGL::anonymous namespace'::CubeTransition::source_requirement()
{
  return 3;
}

void CA::OGL::anonymous namespace'::CubeTransition::render(uint64_t a1, uint64_t a2, CA::OGL::Context *a3, float64x2_t *a4, CA::Transform *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v34 = 0u;
  if (BYTE8(v50)) {
    uint64_t v13 = a6;
  }
  else {
    uint64_t v13 = a7;
  }
  if (!BYTE8(v50)) {
    a7 = a6;
  }
  *(unsigned char *)(*((void *)a3 + 2) + 481) |= 1u;
  if (a7 && CA::Mat4Impl::mat4_is_front_facing((CA::Mat4Impl *)&v34, v12))
  {
    _S0 = v50;
    __asm { FCVT            H0, S0 }
    size_t v19 = (_WORD *)*((void *)a3 + 2);
    void v19[4] = _S0;
    v19[5] = _S0;
    v19[6] = _S0;
    v19[7] = 15360;
    long long v24 = v34;
    long long v25 = v35;
    long long v26 = v36;
    long long v27 = v37;
    long long v28 = v38;
    long long v29 = v39;
    long long v30 = v40;
    long long v31 = v41;
    __asm { FMOV            V0.2D, #1.0 }
    long long v32 = _Q0;
    uint64_t v33 = 16;
    CA::OGL::fill_surface_rect(a3, a7, a5, (uint64_t)&v24, *a4, a4[1]);
  }
  if (v13 && CA::Mat4Impl::mat4_is_front_facing((CA::Mat4Impl *)&v42, v12))
  {
    _S0 = DWORD1(v50);
    __asm { FCVT            H0, S0 }
    double v22 = (_WORD *)*((void *)a3 + 2);
    uint8_t v22[4] = _S0;
    v22[5] = _S0;
    v22[6] = _S0;
    v22[7] = 15360;
    long long v24 = v42;
    long long v25 = v43;
    long long v26 = v44;
    long long v27 = v45;
    long long v28 = v46;
    long long v29 = v47;
    long long v30 = v48;
    long long v31 = v49;
    __asm { FMOV            V0.2D, #1.0 }
    long long v32 = _Q0;
    uint64_t v33 = 16;
    CA::OGL::fill_surface_rect(a3, v13, a5, (uint64_t)&v24, *a4, a4[1]);
  }
  *(unsigned char *)(*((void *)a3 + 2) + 481) &= ~1u;
}

void CA::OGL::anonymous namespace'::CubeTransition::set_state(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, float64x2_t *a5)
{
  v51[16] = *(double *)MEMORY[0x1E4F143B8];
  float v7 = *(float *)(a3 + 48);
  int v8 = *(_DWORD *)(a3 + 20);
  if (!v8) {
    int v8 = 242;
  }
  if ((v8 | 2) == 0xF2)
  {
    *(unsigned char *)(a2 + 264) = 1;
    float v7 = 1.0 - v7;
  }
  else
  {
    *(unsigned char *)(a2 + 264) = 0;
  }
  double v9 = a4[2];
  double v10 = a4[3];
  double v11 = 0.0;
  double v12 = 1.0;
  double v13 = v10;
  if (v8 != 239 && v8 != 242)
  {
    double v11 = 1.0;
    double v12 = 0.0;
    double v13 = a4[2];
  }
  double v14 = *a4;
  double v15 = a4[1];
  uint64_t v16 = *(void *)(a3 + 32);
  if (v16) {
    __int16 v17 = (CA::Render::KeyValueArray **)(v16 + 40);
  }
  else {
    __int16 v17 = (CA::Render::KeyValueArray **)(a3 + 24);
  }
  uint64_t v18 = *v17;
  double v43 = v12;
  if (CA::Render::KeyValueArray::get_int_key(*v17, 5, *(unsigned __int8 *)(a1 + 8))) {
    double v19 = (v9 * v12 + v10 * v11) * (cos(v7 * -1.57079633 + 0.785398163) * 0.707106781 + -0.5);
  }
  else {
    double v19 = 0.0;
  }
  double v45 = v15 + v10 * 0.5;
  double v44 = v14 + v9 * 0.5;
  v46[0] = xmmword_184997D50;
  v46[1] = 0u;
  v46[2] = xmmword_184997D60;
  memset(&v46[3], 0, 32);
  uint64_t v47 = 0x3FF0000000000000;
  long long v49 = 0u;
  long long v50 = xmmword_184997D60;
  double v48 = -1.0 / (CA::Render::KeyValueArray::get_float_key(v18, 276, 3.0) * (0.5 * (v10 + v9)));
  float64x2_t v20 = *a5;
  float64x2_t v21 = a5[1];
  float64x2_t v22 = a5[2];
  float64x2_t v23 = a5[3];
  *(float64x2_t *)a2 = *a5;
  *(float64x2_t *)(a2 + 16) = v21;
  *(float64x2_t *)(a2 + 32) = v22;
  *(float64x2_t *)(a2 + 48) = v23;
  float64x2_t v24 = a5[4];
  float64x2_t v25 = a5[5];
  float64x2_t v26 = a5[6];
  float64x2_t v27 = a5[7];
  *(float64x2_t *)(a2 + 64) = v24;
  *(float64x2_t *)(a2 + 80) = v25;
  *(float64x2_t *)(a2 + 96) = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v26, v20, v44), v22, v45), (float64x2_t)0, v24);
  *(float64x2_t *)(a2 + 112) = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v27, v21, v44), v23, v45), (float64x2_t)0, v25);
  CA::Mat4Impl::mat4_concat((float64x2_t *)a2, (double *)v46, (const double *)a2, v28);
  float64x2_t v29 = *(float64x2_t *)a2;
  float64x2_t v30 = *(float64x2_t *)(a2 + 16);
  float64x2_t v31 = *(float64x2_t *)(a2 + 32);
  float64x2_t v32 = *(float64x2_t *)(a2 + 48);
  float64x2_t v33 = *(float64x2_t *)(a2 + 64);
  float64x2_t v34 = *(float64x2_t *)(a2 + 80);
  float64x2_t v35 = vmlaq_n_f64(vmlaq_f64(vmlaq_f64(*(float64x2_t *)(a2 + 96), (float64x2_t)0, *(float64x2_t *)a2), (float64x2_t)0, v31), v33, v13 * -0.5 - v19);
  float64x2_t v36 = vmlaq_n_f64(vmlaq_f64(vmlaq_f64(*(float64x2_t *)(a2 + 112), (float64x2_t)0, v30), (float64x2_t)0, v32), v34, v13 * -0.5 - v19);
  *(float64x2_t *)(a2 + 96) = v35;
  *(float64x2_t *)(a2 + 112) = v36;
  *(float64x2_t *)(a2 + 128) = v29;
  *(float64x2_t *)(a2 + 144) = v30;
  *(float64x2_t *)(a2 + 160) = v31;
  *(float64x2_t *)(a2 + 176) = v32;
  *(float64x2_t *)(a2 + 192) = v33;
  *(float64x2_t *)(a2 + 208) = v34;
  *(float64x2_t *)(a2 + 224) = v35;
  *(float64x2_t *)(a2 + 240) = v36;
  CA::Mat4Impl::mat4_set_rotation((CA::Mat4Impl *)v51, v37, v7 * -1.57079633, v43, v11, 0.0);
  CA::Mat4Impl::mat4_concat((float64x2_t *)a2, v51, (const double *)a2, v38);
  float64x2_t v39 = vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_lane_f64(*(float64x2_t *)(a2 + 112), *(float64x2_t *)(a2 + 16), v44, 0), *(float64x2_t *)(a2 + 48), v45, 0), *(float64x2_t *)(a2 + 80), v13 * -0.5, 0);
  *(float64x2_t *)(a2 + 96) = vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_lane_f64(*(float64x2_t *)(a2 + 96), *(float64x2_t *)a2, v44, 0), *(float64x2_t *)(a2 + 32), v45, 0), *(float64x2_t *)(a2 + 64), v13 * -0.5, 0);
  *(float64x2_t *)(a2 + 112) = v39;
  CA::Mat4Impl::mat4_set_rotation((CA::Mat4Impl *)v51, v40, (float)(v7 + -1.0) * -1.57079633, v43, v11, 0.0);
  CA::Mat4Impl::mat4_concat((float64x2_t *)(a2 + 128), v51, (const double *)(a2 + 128), v41);
  float64x2_t v42 = vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_lane_f64(*(float64x2_t *)(a2 + 240), *(float64x2_t *)(a2 + 144), v44, 0), *(float64x2_t *)(a2 + 176), v45, 0), *(float64x2_t *)(a2 + 208), v13 * -0.5, 0);
  *(float64x2_t *)(a2 + 224) = vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_lane_f64(*(float64x2_t *)(a2 + 224), *(float64x2_t *)(a2 + 128), v44, 0), *(float64x2_t *)(a2 + 160), v45, 0), *(float64x2_t *)(a2 + 192), v13 * -0.5, 0);
  *(float64x2_t *)(a2 + 240) = v42;
  *(float *)(a2 + 256) = 1.0 - (float)(v7 * 0.75);
  *(float *)(a2 + 260) = (float)(v7 * 0.75) + 0.25;
}

uint64_t CA::OGL::TransitionSubclass::is_ogl_transition(CA::OGL::TransitionSubclass *this)
{
  return 1;
}

__n128 CA::OGL::anonymous namespace'::CubeTransition::ROI(uint64_t a1, uint64_t a2, __n128 *a3, uint64_t a4, uint64_t a5, __n128 *a6, __n128 *a7)
{
  *a6 = *a3;
  a6[1] = a3[1];
  *a7 = *a3;
  __n128 result = a3[1];
  a7[1] = result;
  return result;
}

void CA::OGL::anonymous namespace'::CubeTransition::DOD(uint64_t a1@<X0>, uint64_t a2@<X1>, double *a3@<X2>, float64x2_t *a4@<X3>, _OWORD *a5@<X4>, float64x2_t *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  long long v27 = 0u;
  memset(v26, 0, sizeof(v26));
  memset(v25, 0, sizeof(v25));
  long long v11 = a5[1];
  *(_OWORD *)a7 = *a5;
  *(_OWORD *)(a7 + 16) = v11;
  float64x2_t v12 = a6[1];
  float64x2_t v23 = *a6;
  float64x2_t v24 = v12;
  if (BYTE8(v27)) {
    double v13 = (float64x2_t *)v26;
  }
  else {
    double v13 = (float64x2_t *)v25;
  }
  if (BYTE8(v27)) {
    double v14 = (float64x2_t *)v25;
  }
  else {
    double v14 = (float64x2_t *)v26;
  }
  CA::Mat4Impl::mat4_apply_to_rect(v13, (int8x16_t *)a7, v10);
  CA::Mat4Impl::mat4_apply_to_rect(v14, (int8x16_t *)&v23, v15);
  float64x2_t v16 = *(float64x2_t *)(a7 + 16);
  float64x2_t v17 = v24;
  int64x2_t v18 = vclezq_f64(v16);
  int64x2_t v19 = vclezq_f64(v24);
  int32x2_t v20 = vmovn_s64(vcltzq_s64((int64x2_t)vorrq_s8((int8x16_t)vzip1q_s64(v19, v18), (int8x16_t)vzip2q_s64(v19, v18))));
  if (v20.i8[4])
  {
    if (v20.i8[0]) {
      return;
    }
    float64x2_t v21 = v23;
  }
  else
  {
    if (v20.i8[0]) {
      return;
    }
    float64x2_t v22 = vaddq_f64(*(float64x2_t *)a7, v16);
    float64x2_t v21 = vminnmq_f64(*(float64x2_t *)a7, v23);
    float64x2_t v17 = vsubq_f64(vmaxnmq_f64(v22, vaddq_f64(v23, v24)), v21);
  }
  *(float64x2_t *)a7 = v21;
  *(float64x2_t *)(a7 + 16) = v17;
}

uint64_t CA::Render::TransitionSubclass::implements_apply(CA::Render::TransitionSubclass *this)
{
  return 0;
}

uint64_t CA::Render::TransitionSubclass::apply()
{
  return 0;
}

double CA::WindowServer::Server::low_latency_threshold(CA::WindowServer::Server *this)
{
  return 0.0;
}

uint64_t CA::WindowServer::VirtualServer::purge_resources(uint64_t this)
{
  uint64_t v1 = *(void **)(this + 704);
  if (v1) {
    return (*(uint64_t (**)(void, uint64_t))(*(void *)*v1 + 224))(*v1, 1);
  }
  return this;
}

uint64_t CA::WindowServer::VirtualServer::release_resources(uint64_t this)
{
  uint64_t v1 = *(void **)(this + 704);
  if (v1) {
    return (*(uint64_t (**)(void, void))(*(void *)*v1 + 224))(*v1, 0);
  }
  return this;
}

uint64_t CA::WindowServer::Server::current_surface(CA::WindowServer::Server *this)
{
  return 0;
}

{
  return (*(uint64_t (**)(void))(**((void **)this + 12) + 448))();
}

CA::Shape **CA::WindowServer::VirtualServer::render_surface(CA::WindowServer::Display **this, CA::Render::Update *a2, CA::WindowServer::Surface *a3, const CA::Bounds *a4, unsigned int a5, int a6)
{
  if ((*(uint64_t (**)(CA::WindowServer::Surface *))(*(void *)a3 + 160))(a3)
    && (float64x2_t v12 = (CA::Shape **)(*((uint64_t (**)(CA::WindowServer::Display **))*this + 49))(this)) != 0)
  {
    double v13 = (CA::OGL::Renderer *)v12;
    uint64_t v14 = CA::WindowServer::Display::render_surface(this[12], v12, a3, a2, a4, a5, a6);
    CA::OGL::Renderer::collect(v13, a2, *((double *)a2 + 9));
    return (CA::Shape **)v14;
  }
  else
  {
    return CA::WindowServer::Server::render_surface(this, a2, a3, a4, a5, a6);
  }
}

CA::Shape **CA::WindowServer::VirtualServer::render_update(CA::WindowServer::Display **this, CA::Render::Update *a2, unsigned int *a3)
{
  unint64_t v6 = (CA::Shape **)(*((uint64_t (**)(CA::WindowServer::Display **))*this + 49))(this);
  if (v6)
  {
    int v8 = (CA::OGL::Renderer *)v6;
    if (CA::WindowServer::Display::render_display(this[12], v6, a2)) {
      *a3 |= 3u;
    }
    if (BYTE4(xmmword_1EB2ACBF0)) {
      (*(void (**)(void, const char *))(**(void **)v8 + 424))(*(void *)v8, "com.apple.GL.event.frameboundary.end");
    }
    if ((*(unsigned char *)a3 & 2) != 0)
    {
      double v9 = this[87];
      if (v9) {
        (*(void (**)(CA::WindowServer::Display *, uint64_t))(*(void *)v9 + 408))(v9, 1);
      }
    }
    double v10 = *((double *)a2 + 9);
    return (CA::Shape **)CA::OGL::Renderer::collect(v8, a2, v10);
  }
  else
  {
    return CA::WindowServer::Server::render_update(this, a2, v7);
  }
}

uint64_t CA::WindowServer::VirtualServer::renderer(CA::WindowServer::VirtualServer *this)
{
  int v2 = *((_DWORD *)this + 46);
  int v3 = v2 | 0x20010;
  uint64_t result = *((void *)this + 88);
  if (result) {
    goto LABEL_7;
  }
  uint64_t v5 = *((void *)this + 12);
  id v6 = *(id *)(v5 + 296);
  if (!v6)
  {
    id v6 = CAMetalContextCreate();
    *(void *)(v5 + 296) = v6;
    if (!v6)
    {
      uint64_t result = *((void *)this + 88);
      if (!result) {
        return result;
      }
      goto LABEL_7;
    }
  }
  *((void *)this + 87) = CA::OGL::new_metal_context(v6, 0, 0, v2 | 0x20010u, 4, @"com.apple.coreanimation.VirtualServer");
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  int v8 = malloc_type_zone_malloc(malloc_zone, 0x68uLL, 0x8BB15036uLL);
  double v9 = v8;
  if (v8)
  {
    uint64_t v10 = *((void *)this + 87);
    v8[1] = 0;
    v8[2] = 0;
    *int v8 = v10;
    v8[6] = malloc_type_malloc(0x40000uLL, 0xA44586FDuLL);
    v9[7] = 0;
    *((_DWORD *)v9 + 24) = 1;
    *((_WORD *)v9 + 50) = 0;
  }
  *((void *)this + 88) = v9;
  (*(void (**)(void, void))(**((void **)this + 87) + 176))(*((void *)this + 87), 0);
  uint64_t result = *((void *)this + 88);
  *(void *)(*((void *)this + 12) + 312) = result;
  if (result)
  {
LABEL_7:
    uint64_t v11 = *((void *)this + 87);
    int v12 = *(_DWORD *)(v11 + 224);
    *(_DWORD *)(v11 + 224) = v3;
    *(_DWORD *)(v11 + 432) = global_feature_flags | v3;
    if (((v12 ^ v2) & 0x2000200) != 0)
    {
      CA::OGL::Context::update_color_program_cache(v11);
      return *((void *)this + 88);
    }
  }
  return result;
}

uint64_t CA::WindowServer::VirtualServer::run_loop(CA::WindowServer::VirtualServer *this)
{
  return *((void *)this + 81);
}

uint64_t CA::WindowServer::Server::supports_icc_color_management(CA::WindowServer::Server *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 12) + 1840))();
}

uint64_t CA::WindowServer::VirtualServer::copy_display_timings(CA::WindowServer::VirtualServer *this, CA::WindowServer::Server *a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 12);
  if (v2)
  {
    unint64_t v4 = (os_unfair_lock_s *)(v2 + 25728);
    os_unfair_lock_lock((os_unfair_lock_t)(v2 + 25728));
    if (!*(unsigned char *)(v2 + 25732))
    {
      if (!*(void *)(v2 + 25736)) {
        operator new();
      }
      double v5 = (*(double (**)(uint64_t))(*(void *)v2 + 744))(v2);
      if (v5 != 0.0 && (*(void *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        atomic_store(CAHostTimeWithTime(v5), (unsigned int *)(*(void *)(v2 + 25736) + 4));
        *(unsigned char *)(v2 + 25732) = 1;
      }
    }
    if (!*(void *)(v2 + 25736) || (float v7 = (_WORD *)*((void *)a2 + 12), (v7[328] & 0x1C00) == 0xC00))
    {
      uint64_t v2 = 0;
LABEL_29:
      os_unfair_lock_unlock(v4);
      return v2;
    }
    uint64_t v8 = (*(uint64_t (**)(void))(*(void *)v7 + 120))();
    if (v8)
    {
      uint64_t v10 = *(void *)(v8 + 24);
      unsigned __int8 v11 = atomic_load((unsigned __int8 *)v10);
      if (v11)
      {
        unsigned int v12 = atomic_load((unsigned int *)(v10 + 4));
        unsigned int v13 = atomic_load((unsigned int *)(*(void *)(v2 + 25736) + 4));
        if (v12 && v13 != 0)
        {
          unsigned int v15 = *(_DWORD *)(v2 + 25744);
          if (v15 && (float)((float)v12 / (float)v15) + -1.0 < 0.02)
          {
            *(_DWORD *)(v2 + 25744) = v12;
            float v16 = *(float *)(v2 + 25748);
            goto LABEL_24;
          }
          if (v13 <= v12) {
            unsigned int v27 = v12;
          }
          else {
            unsigned int v27 = v13;
          }
          unsigned int v28 = v13;
          if (v13 >= v12) {
            unsigned int v13 = v12;
          }
          unsigned int v29 = v27 % v13;
          if (v29 >= v13 - v29) {
            unsigned int v29 = v13 - v29;
          }
          if (v29 <= v13 >> 5)
          {
            *(_DWORD *)(v2 + 25744) = v12;
            float v30 = (double)v28 / (double)v12;
            if (v30 >= 1.0)
            {
              float v16 = roundf(v30);
              float v31 = 1.0 / v30;
            }
            else
            {
              float v31 = 1.0 / v30;
              float v16 = 1.0 / roundf(v31);
            }
            *(float *)(v2 + 25748) = v16;
            *(float *)(v2 + 25752) = v31;
            unsigned int v13 = v28;
LABEL_24:
            if (v16 <= 0.0)
            {
              unsigned int v32 = v13;
              uint64_t v33 = v8;
              if (x_log_hook_p())
              {
                x_log_();
              }
              else
              {
                float64x2_t v34 = x_log_category_windowserver;
                if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 67109376;
                  unsigned int v36 = v32;
                  __int16 v37 = 1024;
                  unsigned int v38 = v12;
                  _os_log_impl(&dword_184668000, v34, OS_LOG_TYPE_ERROR, "copy_display_timings: unexpected state (source: %x, this: %x)", buf, 0xEu);
                }
              }
              char v9 = 0;
              uint64_t v8 = v33;
            }
            else
            {
              atomic_store((float)(v16 * (float)v12), (unsigned int *)(*(void *)(v2 + 25736) + 4));
              unint64_t v17 = *(void *)(v10 + 48);
              unint64_t v18 = *(void *)(v10 + 64);
              float v19 = *(float *)(v2 + 25748);
              if (v19 > 1.0) {
                v18 -= v17 % (unint64_t)v19 * *(unsigned int *)(v2 + 25744);
              }
              unint64_t v20 = (unint64_t)(float)(*(float *)(v2 + 25752) * (float)v17);
              uint64_t v21 = *(void *)(v2 + 25736);
              float64x2_t v22 = (atomic_uint *)(v21 + 16);
              float64x2_t v23 = (unint64_t *)(v21 + 48);
              float64x2_t v24 = (unint64_t *)(v21 + 64);
              char v9 = 1;
              unsigned int add = atomic_fetch_add(v22, 1u);
              atomic_store(v20, v23);
              atomic_store(v18, v24);
              atomic_store(add + 2, (unsigned int *)v22);
            }
            goto LABEL_28;
          }
        }
      }
      char v9 = 0;
    }
LABEL_28:
    uint64_t v2 = (v8 != 0) & v9;
    goto LABEL_29;
  }
  return v2;
}

uint64_t CA::WindowServer::VirtualServer::set_digital_modes(CA::WindowServer::VirtualServer *this, const __CFArray *a2)
{
  uint64_t result = *((void *)this + 12);
  if (result) {
    return (*(uint64_t (**)(uint64_t, const __CFArray *))(*(void *)result + 2208))(result, a2);
  }
  return result;
}

uint64_t CA::WindowServer::VirtualServer::set_digital_modes(CA::WindowServer::VirtualServer *this, const __CFArray *a2, const __CFArray *a3)
{
  uint64_t result = *((void *)this + 12);
  if (result) {
    return (*(uint64_t (**)(uint64_t, const __CFArray *, const __CFArray *))(*(void *)result + 2200))(result, a2, a3);
  }
  return result;
}

uint64_t CA::WindowServer::Server::service_object(CA::WindowServer::Server *this)
{
  return 0;
}

uint64_t CA::WindowServer::Server::copy_brightness_capabilities(CA::WindowServer::Server *this)
{
  return 0;
}

uint64_t CA::WindowServer::Server::brightness_capabilities(CA::WindowServer::Server *this)
{
  return 0;
}

uint64_t CA::WindowServer::Server::triple_buffered(CA::WindowServer::Server *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 12) + 1768))();
}

uint64_t CA::WindowServer::Server::set_privacy_indicator_surface()
{
  return 0;
}

uint64_t CA::WindowServer::Server::cursor_enabled(CA::WindowServer::Server *this)
{
  return 0;
}

uint64_t CA::WindowServer::Server::cursor_hidden(CA::WindowServer::Server *this)
{
  return 1;
}

uint64_t CA::WindowServer::Server::cursor_dictionary(CA::WindowServer::Server *this)
{
  return 0;
}

double CA::WindowServer::Server::cursor_position(CA::WindowServer::Server *this)
{
  return 0.0;
}

uint64_t CA::WindowServer::Server::supports_cursor(CA::WindowServer::Server *this)
{
  return 0;
}

uint64_t CA::WindowServer::VirtualServer::set_enabled(CA::WindowServer::VirtualServer *this, char a2)
{
  unint64_t v4 = (pthread_mutex_t *)((char *)this + 536);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 536));
  if (a2)
  {
    (*(void (**)(void, uint64_t))(**((void **)this + 12) + 224))(*((void *)this + 12), 1);
    if ((*(unsigned int (**)(void))(**((void **)this + 12) + 216))(*((void *)this + 12))) {
      CA::WindowServer::VirtualServer::add_vsync_source((uint64_t)this, v5);
    }
  }
  else
  {
    CA::WindowServer::VirtualServer::remove_vsync_source(this);
    (*(void (**)(void, void))(**((void **)this + 12) + 224))(*((void *)this + 12), 0);
  }

  return pthread_mutex_unlock(v4);
}

void CA::WindowServer::VirtualServer::remove_vsync_source(CA::WindowServer::VirtualServer *this)
{
  uint64_t v1 = *((void *)this + 83);
  if (v1)
  {
    if (BYTE9(xmmword_1EB2ACC10))
    {
      kdebug_trace();
      uint64_t v1 = *((void *)this + 83);
    }
    int v3 = (__CFRunLoop *)(*(uint64_t (**)(CA::WindowServer::VirtualServer *))(*(void *)this + 384))(this);
    CADisplayTimerRemoveFromRunLoop(v1, v3, (const __CFString *)*MEMORY[0x1E4F1D418]);
    CADisplayTimerInvalidate(*((void *)this + 83));
    CFRelease(*((CFTypeRef *)this + 83));
    *((void *)this + 83) = 0;
  }
}

uint64_t CA::WindowServer::VirtualServer::add_vsync_source(uint64_t this, __CFRunLoopSource *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (!*(void *)(this + 664))
  {
    uint64_t v2 = this;
    CA::WindowServer::VirtualServer::add_runloop_source(this, a2);
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    long long v9 = (unint64_t)v2;
    uint64_t v3 = mach_absolute_time();
    double v4 = CATimeWithHostTime(v3);
    double v5 = (*(double (**)(void))(**(void **)(v2 + 96) + 744))();
    uint64_t v6 = CADisplayTimerCreate((uint64_t)CA::WindowServer::VirtualServer::timer_callback, &v9, 0, v4, v5);
    *(void *)(v2 + 664) = v6;
    pthread_mutex_lock((pthread_mutex_t *)(v6 + 16));
    *(unsigned char *)(v6 + 201) = 1;
    pthread_mutex_unlock((pthread_mutex_t *)(v6 + 16));
    if (BYTE9(xmmword_1EB2ACC10)) {
      kdebug_trace();
    }
    uint64_t v7 = *(void *)(v2 + 664);
    uint64_t v8 = (__CFRunLoop *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 384))(v2);
    return CADisplayTimerAddToRunLoop(v7, v8, (const __CFString *)*MEMORY[0x1E4F1D418]);
  }
  return this;
}

uint64_t CA::WindowServer::VirtualServer::add_runloop_source(uint64_t this, __CFRunLoopSource *a2)
{
  uint64_t v2 = this;
  if (!*(void *)(this + 528))
  {
    uint64_t v3 = x_thread_create((uint64_t)CA::WindowServer::VirtualServer::thread_body, this, 1);
    *(void *)(v2 + 528) = v3;
    this = CA::Render::Server::set_thread_priority(v3, (_opaque_pthread_t *)0xFFFFFFFFLL);
  }
  for (; !*(void *)(v2 + 648); this = pthread_cond_wait((pthread_cond_t *)(v2 + 600), (pthread_mutex_t *)(v2 + 536)))
    ;
  return this;
}

void CA::WindowServer::VirtualServer::timer_callback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v8 = *(void *)(a5 + 96);
    os_unfair_lock_lock((os_unfair_lock_t)(v8 + 25728));
    uint64_t v9 = *(void *)(v8 + 25736);
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v19 = 0;
    if (v9)
    {
      uint64_t v10 = *(void *)(v9 + 64);
      uint64_t v19 = *(void *)(v9 + 48);
      uint64_t v20 = v10;
      uint64_t v11 = atomic_load((unsigned int *)(v9 + 4));
      uint64_t v21 = v11;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 25728));
    CADisplayTimerAlignPhase(a1, &v19);
  }
  double v12 = (*(double (**)(void))(**(void **)(a5 + 96) + 760))(*(void *)(a5 + 96));
  unint64_t v13 = CAHostTimeWithTime(v12);
  unint64_t v17 = v13
      * (*(unsigned int (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a5 + 96) + 768))(*(void *)(a5 + 96), v14, v15, v16);
  kdebug_trace();
  *(void *)(a5 + 680) = a2;
  double v18 = CATimeWithHostTime(v17 + a2);
  *(double *)(a5 + 672) = v18;
  *(void *)(a5 + 688) = v17;

  CA::Render::collect(0, v18);
}

uint64_t CA::WindowServer::VirtualServer::thread_body(CA::WindowServer::VirtualServer *this, void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  memset(v16, 0, sizeof(v16));
  CCFStringRef String = CA_CFStringGetCString(*(const __CFString **)(*((void *)this + 12) + 8), (char *)v16, 256);
  if (CString)
  {
    long long v14 = 0u;
    long long v15 = 0u;
    memset(__str, 0, sizeof(__str));
    snprintf(__str, 0x40uLL, "com.apple.coreanimation.display.%s", CString);
    double v4 = (CA::WindowServer::Server *)pthread_setname_np(__str);
    if (v4)
    {
      int v5 = (int)v4;
      uint64_t v6 = x_log_category_utilities;
      double v4 = (CA::WindowServer::Server *)os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR);
      if (v4)
      {
        int v17 = 136315394;
        double v18 = __str;
        __int16 v19 = 1024;
        int v20 = v5;
        uint64_t v7 = (char *)&v17;
LABEL_9:
        _os_log_error_impl(&dword_184668000, v6, OS_LOG_TYPE_ERROR, "pthread_setname_np(%s) returned %d\n", (uint8_t *)v7, 0x12u);
      }
    }
  }
  else
  {
    double v4 = (CA::WindowServer::Server *)pthread_setname_np("com.apple.coreanimation.display");
    if (v4)
    {
      int v8 = (int)v4;
      uint64_t v6 = x_log_category_utilities;
      double v4 = (CA::WindowServer::Server *)os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR);
      if (v4)
      {
        *(_DWORD *)__str = 136315394;
        *(void *)&__str[4] = "com.apple.coreanimation.display";
        *(_WORD *)&__str[12] = 1024;
        *(_DWORD *)&__str[14] = v8;
        uint64_t v7 = __str;
        goto LABEL_9;
      }
    }
  }
  CA::WindowServer::Server::set_server_thread_policy(v4);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 536));
  *((void *)this + 81) = CFRunLoopGetCurrent();
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  uint64_t v10 = CFRunLoopTimerCreate(0, Current + 3153600000.0, 3153600000.0, 0, 0, (CFRunLoopTimerCallBack)CA::WindowServer::null_timer, 0);
  CFStringRef v11 = (const __CFString *)*MEMORY[0x1E4F1D418];
  CFRunLoopAddTimer(*((CFRunLoopRef *)this + 81), v10, (CFRunLoopMode)*MEMORY[0x1E4F1D418]);
  pthread_cond_signal((pthread_cond_t *)((char *)this + 600));
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 536));
  CFRunLoopRun();
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 536));
  CFRunLoopRemoveTimer(*((CFRunLoopRef *)this + 81), v10, v11);
  CFRelease(v10);
  *((void *)this + 81) = 0;
  *((void *)this + 66) = 0;
  pthread_cond_signal((pthread_cond_t *)((char *)this + 600));
  return pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 536));
}

double CA::WindowServer::Server::latency(CA::WindowServer::Server *this)
{
  return 0.0;
}

uint64_t CA::WindowServer::Server::supports_color_matrix(CA::WindowServer::Server *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 12) + 1408))();
}

_DWORD *CA::WindowServer::VirtualServer::set_edr_properties(_DWORD *this, float a2, float a3, float a4)
{
  if (a2 >= 1.0)
  {
    uint64_t v5 = (uint64_t)this;
    (*(void (**)(void, float))(**((void **)this + 12) + 928))(*((void *)this + 12), a3 / a2);
    uint64_t v6 = *(void *)(v5 + 96);
    this = CA::WindowServer::Display::initialize_edr_state((_DWORD *)v6);
    uint64_t v7 = *(unsigned int **)(v6 + 688);
    if (v7) {
      atomic_store(LODWORD(a2), v7);
    }
  }
  return this;
}

uint64_t CA::WindowServer::Server::allows_edr(CA::WindowServer::Server *this)
{
  return 0;
}

void CA::WindowServer::VirtualServer::~VirtualServer(CA::WindowServer::VirtualServer *this)
{
  CA::WindowServer::VirtualServer::~VirtualServer(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  uint64_t v2;
  void *v3;
  malloc_zone_t *malloc_zone;
  uint64_t v5;
  uint64_t vars8;

  *(void *)this = &unk_1ED023FA8;
  uint64_t v2 = *((void *)this + 12);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 12) = 0;
  uint64_t v3 = (void *)*((void *)this + 88);
  if (v3)
  {
    CA::OGL::Renderer::~Renderer(*((CA::OGL::Renderer **)this + 88));
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(malloc_zone, v3);
    *((void *)this + 88) = 0;
    uint64_t v5 = *((void *)this + 87);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 224))(v5, 1);
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *((void *)this + 87) = 0;
  }
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 536));
  pthread_cond_destroy((pthread_cond_t *)((char *)this + 600));

  CA::WindowServer::Server::~Server(this);
}

void CA::WindowServer::Server::print_display_trace_log(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 96);
  if (a2)
  {
    x_stream_printf(a2, "\nCA Display Trace Display ID:%d\n", a3, a4, a5, a6, a7, a8, *(unsigned int *)(v8 + 24));
    CA::WindowServer::Display::print_display_trace_log_in_range(v8, a2, *(void *)(v8 + 25328), 0x200uLL);
    unint64_t v10 = *(void *)(v8 + 25328);
    uint64_t v11 = v8;
    uint64_t v12 = a2;
  }
  else
  {
    CA::WindowServer::Display::print_display_trace_log_in_range(*(void *)(a1 + 96), 0, *(void *)(v8 + 25328), 0x200uLL);
    unint64_t v10 = *(void *)(v8 + 25328);
    uint64_t v11 = v8;
    uint64_t v12 = 0;
  }

  CA::WindowServer::Display::print_display_trace_log_in_range(v11, v12, 0, v10);
}

uint64_t CA::WindowServer::Server::present_surface(CA::WindowServer::Server *this, __IOSurface *a2)
{
  return (*(uint64_t (**)(void, __IOSurface *))(**((void **)this + 12) + 464))(*((void *)this + 12), a2);
}

uint64_t CA::WindowServer::VirtualServer::previous_vbl(CA::WindowServer::VirtualServer *this)
{
  return *((void *)this + 85);
}

uint64_t CA::WindowServer::VirtualServer::vbl_delta(CA::WindowServer::VirtualServer *this)
{
  return *((void *)this + 86);
}

double CA::WindowServer::VirtualServer::next_wakeup_time(CA::WindowServer::VirtualServer *this)
{
  return *((double *)this + 84);
}

uint64_t CA::WindowServer::Server::finish_skylight_update(CA::WindowServer::Server *this, CA::Render::Update *a2)
{
  return (*(uint64_t (**)(void, CA::Render::Update *))(**((void **)this + 12) + 416))(*((void *)this + 12), a2);
}

uint64_t CA::WindowServer::Server::begin_skylight_update(CA::WindowServer::Server *this, CA::Render::Update *a2)
{
  return (*(uint64_t (**)(void, CA::Render::Update *))(**((void **)this + 12) + 408))(*((void *)this + 12), a2);
}

BOOL CA::WindowServer::Server::can_update(CA::WindowServer::Server *this)
{
  return (*(unsigned int (**)(void, double, double))(**((void **)this + 12) + 352))(*((void *)this + 12), 0.0, 0.0) == 0;
}

uint64_t CA::WindowServer::VirtualServer::shutdown(CA::WindowServer::VirtualServer *this)
{
  CA::WindowServer::Server::shutdown(this);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 536));
  CA::WindowServer::VirtualServer::remove_vsync_source(this);
  if (*((void *)this + 66))
  {
    CFRunLoopStop(*((CFRunLoopRef *)this + 81));
    while (*((void *)this + 81))
      pthread_cond_wait((pthread_cond_t *)((char *)this + 600), (pthread_mutex_t *)((char *)this + 536));
  }

  return pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 536));
}

BOOL x_set_log_file(FILE *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    x_close_log_file();
    x_log_file_handle = (uint64_t)a1;
    x_log_functiouint64_t n = 0;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    *(_OWORD *)uint64_t v6 = 0u;
    long long v7 = 0u;
    time_t v5 = 0;
    memset(&v4, 0, sizeof(v4));
    time(&v5);
    localtime_r(&v5, &v4);
    strftime(v6, 0x80uLL, "%a %b %e %H:%M:%S %Z %Y", &v4);
    if ((FILE *)*MEMORY[0x1E4F143D8] != a1 && *MEMORY[0x1E4F143C8] != (void)a1) {
      fprintf(a1, "\n\f\n** Log started %s **\n\n", v6);
    }
    setlinebuf(a1);
  }
  return a1 != 0;
}

void x_close_log_file(void)
{
  if (x_log_file_handle) {
    BOOL v0 = x_log_file_handle == *MEMORY[0x1E4F143D8];
  }
  else {
    BOOL v0 = 1;
  }
  if (!v0 && x_log_file_handle != *MEMORY[0x1E4F143C8])
  {
    fclose((FILE *)x_log_file_handle);
    x_log_file_handle = 0;
    if (x_log_file_name)
    {
      free((void *)x_log_file_name);
      x_log_file_name = 0;
    }
  }
}

char *x_set_log_filename(const char *a1)
{
  if (!strcmp(a1, "stdout"))
  {
    time_t v5 = (FILE **)MEMORY[0x1E4F143D8];
LABEL_10:
    tm v4 = *v5;
    goto LABEL_11;
  }
  if (!strcmp(a1, "stderr"))
  {
    time_t v5 = (FILE **)MEMORY[0x1E4F143C8];
    goto LABEL_10;
  }
  if (getenv("X_LOG_TRUNCATE")) {
    uint64_t v2 = "w+";
  }
  else {
    uint64_t v2 = "r+";
  }
  uint64_t v3 = fopen(a1, v2);
  if (v3)
  {
    tm v4 = v3;
    fseeko(v3, 0, 2);
  }
  else
  {
    tm v4 = fopen(a1, "w+");
    if (!v4)
    {
      long long v7 = (FILE *)*MEMORY[0x1E4F143C8];
      long long v8 = __error();
      long long v9 = strerror(*v8);
      return (char *)fprintf(v7, "Unable to open log file for writing: %s\n%s\n", a1, v9);
    }
  }
LABEL_11:
  uint64_t result = (char *)x_set_log_file(v4);
  if (result)
  {
    uint64_t result = strdup(a1);
    x_log_file_name = (uint64_t)result;
  }
  return result;
}

void x_log_crash(char *a1, ...)
{
  va_start(va, a1);
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (x_log_crash_(char const*,char *)::message)
  {
    free((void *)x_log_crash_(char const*,char *)::message);
    x_log_crash_(char const*,char *)::message = 0;
  }
  if (a1) {
    vasprintf((char **)&x_log_crash_(char const*,char *)::message, a1, va);
  }
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    uint64_t v2 = x_log_category_utilities;
    if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      uint64_t v5 = x_log_crash_(char const*,char *)::message;
      _os_log_impl(&dword_184668000, v2, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
    }
  }
  if (CADeviceHasInternalDiagnostics::once != -1) {
    dispatch_once(&CADeviceHasInternalDiagnostics::once, &__block_literal_global_157);
  }
  if (CADeviceHasInternalDiagnostics::internal) {
    uint64_t v3 = (char *)x_log_crash_(char const*,char *)::message;
  }
  else {
    uint64_t v3 = a1;
  }
  qword_1E8F84EA0 = (uint64_t)v3;
}

void sub_184810BD0(_Unwind_Exception *exception_object)
{
  if (atomic_fetch_add(v1 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v1 + 16))(v1);
  }
  _Unwind_Resume(exception_object);
}

void CA::downsample_image(CA *this, void *a2, size_t a3, vImagePixelCount a4, vImagePixelCount a5, unsigned __int16 *a6, size_t a7, char a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12, unsigned int a13)
{
  unsigned int v23 = this;
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  unint64_t v24 = vcvtpd_u64_f64(a11 + a9);
  unint64_t v25 = vcvtpd_u64_f64(a12 + a10);
  if (this <= 0x23)
  {
    if (((1 << (char)this) & 0x60070F) != 0)
    {
      src.CGFloat width = a4;
      src.rowBytes = a3;
      src.data = a2;
      src.CGFloat height = a5;
      dest.CGFloat width = v24;
      dest.rowBytes = a7;
      dest.data = a6;
      dest.CGFloat height = v25;
      float v26 = a11 / (double)a4;
      transform.a = v26;
      float v27 = a12 / (double)a5;
      transform.double b = 0.0;
      transform.double c = 0.0;
      float v28 = a9;
      transform.d = v27;
      transform.tCGFloat x = v28;
      float v29 = a10;
      transform.tCGFloat y = v29;
      if ((a8 & 2) != 0) {
        vImage_Flags v30 = 8;
      }
      else {
        vImage_Flags v30 = 24;
      }
      int v31 = dword_184999468[this];
      switch(v31)
      {
        case 8:
          *(void *)backColor = 0;
          vImageAffineWarp_ARGB16U(&src, &dest, 0, &transform, backColor, v30);
          if ((a8 & 1) == 0 && v25)
          {
            uint64_t v34 = 0;
            float64x2_t v35 = a6 + 2;
            do
            {
              unsigned int v36 = v35;
              for (unint64_t i = v24; i; --i)
              {
                unsigned int v38 = v36[1];
                unsigned int v39 = *(v36 - 2);
                if (v38 < v39) {
                  LOWORD(v39) = v36[1];
                }
                *(v36 - 2) = v39;
                unsigned int v40 = *(v36 - 1);
                if (v38 < v40) {
                  LOWORD(v40) = v38;
                }
                *(v36 - 1) = v40;
                if (v38 >= *v36) {
                  LOWORD(v38) = *v36;
                }
                *unsigned int v36 = v38;
                v36 += 4;
              }
              ++v34;
              float64x2_t v35 = (unsigned __int16 *)((char *)v35 + a7);
            }
            while (v34 != v25);
          }
          break;
        case 4:
          *(_DWORD *)backColor = 0;
          vImageAffineWarp_ARGB8888(&src, &dest, 0, &transform, (const uint8_t *)backColor, v30);
          if ((a8 & 1) == 0)
          {
            if (v23 == 1)
            {
              vImageClipToAlpha_RGBA8888(&dest, &dest, 0);
            }
            else if (!v23)
            {
              vImageClipToAlpha_ARGB8888(&dest, &dest, 0);
            }
          }
          break;
        case 1:
          vImageAffineWarp_Planar8(&src, &dest, 0, &transform, 0, v30);
          break;
      }
      return;
    }
    if (((1 << (char)this) & 0xA000000C0) != 0) {
      return;
    }
  }
  if ((a8 & 4) != 0) {
    return;
  }
  provider = CGDataProviderCreateWithData(0, a2, a5 * a3, 0);
  if (v23 > 0x23)
  {
    size_t v32 = 0;
    bitmapuint64_t Info = 0;
LABEL_37:
    uint64_t v33 = 32;
    goto LABEL_38;
  }
  bitmapuint64_t Info = dword_184999348[v23];
  size_t v32 = dword_1849993D8[v23];
  if (v32 == 16)
  {
    uint64_t v33 = 5;
    goto LABEL_38;
  }
  if (v32 == 64)
  {
    uint64_t v33 = 16;
    goto LABEL_38;
  }
  if (v32 != 32) {
    goto LABEL_37;
  }
  uint64_t v33 = 8;
LABEL_38:
  size_t bitsPerComponent = v33;
  long long v41 = (CGColorSpace *)CAGetColorSpace(2u);
  float64x2_t v42 = CGImageCreate(a4, a5, bitsPerComponent, v32, a3, v41, bitmapInfo, provider, 0, 1, kCGRenderingIntentDefault);
  CGImageSetCachingFlags();
  CGDataProviderRelease(provider);
  double v43 = CAGetCachedCGBitmapContext_(a6, v24, v25, v23, a7, v41);
  if (v43) {
    double v44 = (CGContext *)*((void *)v43 + 2);
  }
  else {
    double v44 = 0;
  }
  CGContextSetCompositeOperation();
  CGContextSetInterpolationQuality(v44, kCGInterpolationHigh);
  v54.origin.CGFloat x = a9;
  v54.origin.CGFloat y = a10;
  v54.size.CGFloat width = a11;
  v54.size.CGFloat height = a12;
  CGContextDrawImage(v44, v54, v42);
  CAReleaseCachedCGContext(v44);

  CGImageRelease(v42);
}

void CA::Render::Layer::show(CA::Render::Layer *this, const CGAffineTransform *a2, uint64_t a3)
{
  uint64_t v343 = *MEMORY[0x1E4F143B8];
  if (a2 == 386)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v326 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184668000, v326, OS_LOG_TYPE_DEFAULT, "(~~~~ Truncated layers ~~~~)", buf, 2u);
      }
    }
  }
  else if (a2 > 0x242)
  {
    return;
  }
  if (a3)
  {
    CA::Render::Layer::show_compressed((uint64_t)this, (int)a2, a3);
    return;
  }
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    uint64_t v6 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *((_DWORD *)this + 3);
      long long v8 = "container ";
      if ((v7 & 0x100) != 0) {
        long long v9 = "transform-";
      }
      else {
        long long v9 = "";
      }
      if ((v7 & 0x800) == 0) {
        long long v8 = "";
      }
      uint64_t v11 = *((void *)this + 6);
      uint64_t v10 = *((void *)this + 7);
      long long v12 = (void *)*((void *)this + 16);
      if (v12)
      {
        uint64_t v13 = v12[24];
        uint64_t v15 = v12[21];
        uint64_t v14 = v12[22];
        uint64_t v16 = v12[23];
      }
      else
      {
        uint64_t v13 = 0;
        uint64_t v14 = 0x3FE0000000000000;
        if ((*((unsigned char *)this + 45) & 0x40) != 0) {
          uint64_t v14 = 0;
        }
        uint64_t v16 = 0;
        uint64_t v15 = v14;
      }
      int v17 = (const char *)*((void *)this + 8);
      double v18 = (const char *)*((void *)this + 9);
      int v20 = (const char *)*((void *)this + 10);
      __int16 v19 = (const char *)*((void *)this + 11);
      *(_DWORD *)buf = 136317954;
      *(void *)&uint8_t buf[4] = v9;
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = v8;
      *(_WORD *)&buf[22] = 2048;
      *(void *)&buf[24] = v11;
      *(_WORD *)uint64_t v328 = 2048;
      *(void *)&v328[2] = v10;
      *(_WORD *)&v328[10] = 2048;
      *(void *)&v328[12] = v13;
      __int16 v329 = 2048;
      uint64_t v330 = v17;
      __int16 v331 = 2048;
      uint64_t v332 = v18;
      __int16 v333 = 2048;
      uint64_t v334 = v20;
      __int16 v335 = 2048;
      uint64_t v336 = v19;
      __int16 v337 = 2048;
      uint64_t v338 = (const char *)v15;
      __int16 v339 = 2048;
      uint64_t v340 = v14;
      __int16 v341 = 2048;
      uint64_t v342 = v16;
      _os_log_impl(&dword_184668000, v6, OS_LOG_TYPE_DEFAULT, "(%slayer %s[%.10g %.10g %.10g] [%.10g %.10g %.10g %.10g] [%g %g %g]", buf, 0x7Au);
    }
  }
  uint64_t v21 = *((void *)this + 18);
  if (v21)
  {
    if (*(_DWORD *)(v21 + 92))
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        uint64_t v22 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v23 = "es";
          int v24 = *(_DWORD *)(v21 + 92) >> 28;
          if (v24 == 1) {
            unsigned int v23 = "";
          }
          *(_DWORD *)buf = 67109378;
          *(_DWORD *)&uint8_t buf[4] = v24;
          *(_WORD *)&buf[8] = 2080;
          *(void *)&buf[10] = v23;
          _os_log_impl(&dword_184668000, v22, OS_LOG_TYPE_DEFAULT, "[%d pass%s", buf, 0x12u);
        }
      }
      unsigned int v25 = *(_DWORD *)(v21 + 92);
      if ((v25 & 0x1FFFF) != 0)
      {
        CA::Render::print_offscreen_flags((CA::Render *)(v25 & 0x1FFFF));
        unsigned int v25 = *(_DWORD *)(v21 + 92);
      }
      float v26 = (CA::Render *)((v25 >> 17) & 0x7FF);
      if (v26) {
        CA::Render::print_group_flags(v26);
      }
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        float v27 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184668000, v27, OS_LOG_TYPE_DEFAULT, "]", buf, 2u);
        }
      }
    }
    if (*(void *)(v21 + 96))
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        float v28 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184668000, v28, OS_LOG_TYPE_DEFAULT, "[", buf, 2u);
        }
      }
      *((void *)&v344 + 1) = CA::Render::handle_flag_names;
      *(void *)&unsigned long long v344 = 0;
      CA::Render::print_flags(*(void *)(v21 + 96), v344, (const char *const *)0x3D);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        float v29 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184668000, v29, OS_LOG_TYPE_DEFAULT, "]", buf, 2u);
        }
      }
      int v30 = *(_DWORD *)(v21 + 120);
      if (v30 >= *(_DWORD *)(v21 + 124)) {
        int v30 = *(_DWORD *)(v21 + 124);
      }
      if (v30 >= 1)
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          int v31 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            int v32 = *(_DWORD *)(v21 + 112);
            int v33 = *(_DWORD *)(v21 + 116);
            int v34 = *(_DWORD *)(v21 + 120);
            int v35 = *(_DWORD *)(v21 + 124);
            *(_DWORD *)buf = 67109888;
            *(_DWORD *)&uint8_t buf[4] = v32;
            *(_WORD *)&buf[8] = 1024;
            *(_DWORD *)&buf[10] = v33;
            *(_WORD *)&buf[14] = 1024;
            *(_DWORD *)&uint8_t buf[16] = v34;
            *(_WORD *)&buf[20] = 1024;
            *(_DWORD *)&buf[22] = v35;
            _os_log_impl(&dword_184668000, v31, OS_LOG_TYPE_DEFAULT, " [%d %d %d %d]", buf, 0x1Au);
          }
        }
      }
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        unsigned int v36 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          int v37 = *(_DWORD *)(v21 + 76);
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v37;
          _os_log_impl(&dword_184668000, v36, OS_LOG_TYPE_DEFAULT, " image seed %d", buf, 8u);
        }
      }
    }
  }
  if ((a3 & 2) == 0 && *((void *)this + 15))
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      unsigned int v38 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184668000, v38, OS_LOG_TYPE_DEFAULT, "(name ", buf, 2u);
      }
    }
    (*(void (**)(void, void, uint64_t))(**((void **)this + 15) + 40))(*((void *)this + 15), (a2 + 1), a3);
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      unsigned int v39 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184668000, v39, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
      }
    }
  }
  if (*((unsigned char *)this + 41))
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      unsigned int v40 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184668000, v40, OS_LOG_TYPE_DEFAULT, "(hidden true)", buf, 2u);
      }
    }
  }
  if ((*((unsigned char *)this + 40) & 0x40) != 0)
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      long long v41 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184668000, v41, OS_LOG_TYPE_DEFAULT, "(masksToBounds true)", buf, 2u);
      }
    }
  }
  if ((*((unsigned char *)this + 41) & 2) != 0)
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      float64x2_t v42 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184668000, v42, OS_LOG_TYPE_DEFAULT, "(geometryFlipped true)", buf, 2u);
      }
    }
  }
  unsigned int v43 = *((_DWORD *)this + 9);
  int v44 = (v43 >> 8) & 0xF;
  if (v44 != 15)
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      double v45 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        long long v46 = " left";
        if ((v43 & 0x100) == 0) {
          long long v46 = "";
        }
        uint64_t v47 = " right";
        if ((v43 & 0x200) == 0) {
          uint64_t v47 = "";
        }
        double v48 = " bottom";
        if ((v43 & 0x400) == 0) {
          double v48 = "";
        }
        *(_DWORD *)buf = 136316162;
        *(void *)&uint8_t buf[4] = v46;
        long long v49 = " top";
        if ((v43 & 0x800) == 0) {
          long long v49 = "";
        }
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = v47;
        *(_WORD *)&buf[22] = 2080;
        *(void *)&buf[24] = v48;
        *(_WORD *)uint64_t v328 = 2080;
        *(void *)&v328[2] = v49;
        if (v44) {
          long long v50 = "";
        }
        else {
          long long v50 = " none";
        }
        *(_WORD *)&v328[10] = 2080;
        *(void *)&v328[12] = v50;
        _os_log_impl(&dword_184668000, v45, OS_LOG_TYPE_DEFAULT, "(edgeAntialiasingMask%s%s%s%s%s)", buf, 0x34u);
      }
    }
  }
  int v51 = *((_DWORD *)this + 9);
  if ((v51 & 0x7FF00000) != 0)
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v52 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        long long v53 = " display";
        CGRect v54 = "";
        if ((v51 & 0x100000) == 0) {
          long long v53 = "";
        }
        long long v55 = " snapshot";
        if ((v51 & 0x200000) == 0) {
          long long v55 = "";
        }
        long long v56 = " unprotected";
        if ((v51 & 0x400000) == 0) {
          long long v56 = "";
        }
        *(_DWORD *)buf = 136317698;
        *(void *)&uint8_t buf[4] = v53;
        long long v57 = " protected";
        if ((v51 & 0x800000) == 0) {
          long long v57 = "";
        }
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = v55;
        long long v58 = " inhibit-cloning";
        if ((v51 & 0x1000000) == 0) {
          long long v58 = "";
        }
        *(_WORD *)&buf[22] = 2080;
        *(void *)&buf[24] = v56;
        uint64_t v59 = " occlusion-detection";
        if ((v51 & 0x2000000) == 0) {
          uint64_t v59 = "";
        }
        *(_WORD *)uint64_t v328 = 2080;
        *(void *)&v328[2] = v57;
        unsigned int v60 = " secure";
        if ((v51 & 0x4000000) == 0) {
          unsigned int v60 = "";
        }
        *(_WORD *)&v328[10] = 2080;
        *(void *)&v328[12] = v58;
        uint64_t v61 = " display-stream";
        if ((v51 & 0x8000000) == 0) {
          uint64_t v61 = "";
        }
        __int16 v329 = 2080;
        uint64_t v330 = v59;
        unsigned int v62 = " never-clone";
        if ((v51 & 0x10000000) == 0) {
          unsigned int v62 = "";
        }
        __int16 v331 = 2080;
        uint64_t v332 = v60;
        uint64_t v63 = " contextual-assistance";
        if ((v51 & 0x20000000) == 0) {
          uint64_t v63 = "";
        }
        __int16 v333 = 2080;
        uint64_t v334 = v61;
        __int16 v335 = 2080;
        uint64_t v336 = v62;
        __int16 v337 = 2080;
        uint64_t v338 = v63;
        if ((v51 & 0x40000000) != 0) {
          CGRect v54 = " allowed-remote-control";
        }
        __int16 v339 = 2080;
        uint64_t v340 = (uint64_t)v54;
        _os_log_impl(&dword_184668000, v52, OS_LOG_TYPE_DEFAULT, "(disableUpdateMask%s%s%s%s%s%s%s%s%s%s%s)", buf, 0x70u);
      }
    }
  }
  if ((*((unsigned char *)this + 40) & 0x30) != 0)
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    unsigned int v64 = (*((_DWORD *)this + 10) >> 4) & 3;
    if (v64 == 3) {
      uint64_t v65 = 0;
    }
    else {
      uint64_t v65 = [(__CFString *)CAAtomGetString(CA::Render::tone_map_mode_atoms[v64]) cStringUsingEncoding:4];
    }
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      int v66 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v67 = "<unknown>";
        if (v65) {
          BOOL v67 = (const char *)v65;
        }
        *(_DWORD *)buf = 136315138;
        *(void *)&uint8_t buf[4] = v67;
        _os_log_impl(&dword_184668000, v66, OS_LOG_TYPE_DEFAULT, "(toneMapMode %s)", buf, 0xCu);
      }
    }
  }
  if ((*((_DWORD *)this + 9) & 0xF000) != 0x9000)
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    uint64_t v68 = (unsigned __int16)*((_DWORD *)this + 9) >> 12;
    if (v68 > 0xB) {
      uint64_t v69 = 0;
    }
    else {
      uint64_t v69 = [(__CFString *)CAAtomGetString(CA::Render::gravity_atoms[v68]) cStringUsingEncoding:4];
    }
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v70 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v71 = "<unknown>";
        if (v69) {
          uint64_t v71 = (const char *)v69;
        }
        *(_DWORD *)buf = 136315138;
        *(void *)&uint8_t buf[4] = v71;
        _os_log_impl(&dword_184668000, v70, OS_LOG_TYPE_DEFAULT, "(contentsGravity %s)", buf, 0xCu);
      }
    }
  }
  if ((*((unsigned char *)this + 42) & 2) != 0)
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      int v72 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184668000, v72, OS_LOG_TYPE_DEFAULT, "(contentsOpaque true)", buf, 2u);
      }
    }
  }
  if ((*((unsigned char *)this + 41) & 0x40) == 0)
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      double v73 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184668000, v73, OS_LOG_TYPE_DEFAULT, "(contentsDither false)", buf, 2u);
      }
    }
  }
  if (*((unsigned char *)this + 42))
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      double v74 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184668000, v74, OS_LOG_TYPE_DEFAULT, "(contentsAlignsToPixels true)", buf, 2u);
      }
    }
  }
  uint64_t v75 = *((void *)this + 16);
  __asm { FMOV            V0.4S, #1.0 }
  float32x4_t v81 = _Q0;
  if (v75) {
    float32x4_t v81 = *(float32x4_t *)(v75 + 268);
  }
  uint16x4_t v82 = (uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v81, _Q0)));
  v82.i16[0] = vmaxv_u16(v82);
  if (v82.i8[0])
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v83 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v84 = (float *)*((void *)this + 16);
        if (v84)
        {
          double v85 = v84[67];
          double v86 = v84[68];
          double v87 = v84[69];
          float v88 = v84[70];
        }
        else
        {
          float v88 = 1.0;
          double v87 = 1.0;
          double v85 = 1.0;
          double v86 = 1.0;
        }
        *(_DWORD *)buf = 134218752;
        *(double *)&uint8_t buf[4] = v85;
        *(_WORD *)&buf[12] = 2048;
        *(double *)&buf[14] = v86;
        *(_WORD *)&buf[22] = 2048;
        *(double *)&buf[24] = v87;
        *(_WORD *)uint64_t v328 = 2048;
        *(double *)&v328[2] = v88;
        _os_log_impl(&dword_184668000, v83, OS_LOG_TYPE_DEFAULT, "(contentsMultiplyColor %.3g %.3g %.3g %.3g)", buf, 0x2Au);
      }
    }
  }
  uint64_t v89 = *((void *)this + 16);
  if (v89)
  {
    if (*(unsigned char *)(v89 + 324))
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        unsigned int v90 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v91 = *((void *)this + 16);
          if (v91) {
            LODWORD(v91) = *(unsigned char *)(v91 + 324) & 1;
          }
          BOOL v92 = CA::Render::Layer::show(unsigned int,unsigned int)const::names[v91];
          *(_DWORD *)buf = 136315138;
          *(void *)&uint8_t buf[4] = v92;
          _os_log_impl(&dword_184668000, v90, OS_LOG_TYPE_DEFAULT, "(contentsSwizzle %s)", buf, 0xCu);
        }
      }
    }
    uint64_t v93 = *((void *)this + 16);
    if (v93)
    {
      uint64_t v94 = *(void *)(v93 + 16);
      if (!v94
        || ((unsigned int v95 = *(_DWORD *)(v94 + 16), v96 = (const char *)(v94 + 24), v95 >= 0x10)
          ? (uint64_t v97 = v96)
          : (uint64_t v97 = (const char *)&CA::Mat4Impl::mat4_identity_double),
            CA::Render::show_transform((CA::Render *)"transform", v97, &a2->a),
            (uint64_t v93 = *((void *)this + 16)) != 0))
      {
        uint64_t v98 = *(void *)(v93 + 24);
        if (v98)
        {
          unsigned int v99 = *(_DWORD *)(v98 + 16);
          CFIndex v100 = (const char *)(v98 + 24);
          if (v99 >= 0x10) {
            CFIndex v101 = v100;
          }
          else {
            CFIndex v101 = (const char *)&CA::Mat4Impl::mat4_identity_double;
          }
          CA::Render::show_transform((CA::Render *)"sublayerTransform", v101, &a2->a);
        }
      }
    }
  }
  if ((*((unsigned char *)this + 41) & 4) == 0)
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v102 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184668000, v102, OS_LOG_TYPE_DEFAULT, "(doubleSided false)", buf, 2u);
      }
    }
  }
  if ((*((unsigned char *)this + 41) & 8) == 0)
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v103 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184668000, v103, OS_LOG_TYPE_DEFAULT, "(sortsSublayers false)", buf, 2u);
      }
    }
  }
  if ((*((unsigned char *)this + 41) & 0x10) != 0)
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v104 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184668000, v104, OS_LOG_TYPE_DEFAULT, "(usesWebKitBehavior true)", buf, 2u);
      }
    }
  }
  if ((*((unsigned char *)this + 41) & 0x20) != 0)
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      CFStringRef v105 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184668000, v105, OS_LOG_TYPE_DEFAULT, "(flipsHorizontalAxis true)", buf, 2u);
      }
    }
  }
  v82.i8[0] = *((unsigned char *)this + 32);
  if ((float)((float)v82.u32[0] * 0.0039216) != 1.0)
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      long long v106 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        LOBYTE(v107) = *((unsigned char *)this + 32);
        *(_DWORD *)buf = 134217984;
        *(double *)&uint8_t buf[4] = (float)((float)v107 * 0.0039216);
        _os_log_impl(&dword_184668000, v106, OS_LOG_TYPE_DEFAULT, "(opacity %g)", buf, 0xCu);
      }
    }
  }
  uint64_t v108 = *((void *)this + 16);
  if (!v108) {
    goto LABEL_229;
  }
  uint64_t v109 = *(void **)(v108 + 72);
  if (v109)
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      long long v110 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v111 = v109[3];
        uint64_t v112 = v109[4];
        uint64_t v113 = v109[5];
        uint64_t v114 = v109[6];
        uint64_t v115 = v109[7];
        long long v116 = (const char *)v109[8];
        long long v117 = (const char *)v109[9];
        long long v118 = (const char *)v109[10];
        *(_DWORD *)buf = 134219776;
        *(void *)&uint8_t buf[4] = v111;
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v112;
        *(_WORD *)&buf[22] = 2048;
        *(void *)&buf[24] = v113;
        *(_WORD *)uint64_t v328 = 2048;
        *(void *)&v328[2] = v114;
        *(_WORD *)&v328[10] = 2048;
        *(void *)&v328[12] = v115;
        __int16 v329 = 2048;
        uint64_t v330 = v116;
        __int16 v331 = 2048;
        uint64_t v332 = v117;
        __int16 v333 = 2048;
        uint64_t v334 = v118;
        _os_log_impl(&dword_184668000, v110, OS_LOG_TYPE_DEFAULT, "(cornerRadii (%g %g) (%g %g) (%g %g) (%g %g))", buf, 0x52u);
      }
    }
  }
  uint64_t v119 = *((void *)this + 16);
  if (!v119) {
    goto LABEL_229;
  }
  if (*(float *)(v119 + 228) != 0.0)
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      long long v120 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v121 = *((void *)this + 16);
        float v122 = 0.0;
        if (v121) {
          float v122 = *(float *)(v121 + 228);
        }
        *(_DWORD *)buf = 134217984;
        *(double *)&uint8_t buf[4] = v122;
        _os_log_impl(&dword_184668000, v120, OS_LOG_TYPE_DEFAULT, "(cornerRadius %g)", buf, 0xCu);
      }
    }
  }
  uint64_t v123 = *((void *)this + 16);
  if (!v123 || !*(void *)(v123 + 80))
  {
LABEL_229:
    if ((*((unsigned char *)this + 45) & 4) == 0) {
      goto LABEL_240;
    }
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p()) {
      goto LABEL_236;
    }
    uint64_t v124 = x_log_category_render;
    if (!os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_240;
    }
    double v125 = *((float *)this + 4);
    double v126 = *((float *)this + 5);
    double v127 = *((float *)this + 6);
    double v128 = *((float *)this + 7);
    *(_DWORD *)buf = 134218752;
    *(double *)&uint8_t buf[4] = v125;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = v126;
    *(_WORD *)&buf[22] = 2048;
    *(double *)&buf[24] = v127;
    *(_WORD *)uint64_t v328 = 2048;
    *(double *)&v328[2] = v128;
    uint64_t v129 = "(backgroundColor (%.3g %.3g %.3g %.0g))";
    uint64_t v130 = v124;
    uint32_t v131 = 42;
    goto LABEL_239;
  }
  CA::Render::show_newline((CA::Render *)(a2 + 1));
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    uint64_t v132 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_184668000, v132, OS_LOG_TYPE_DEFAULT, "(backgroundColor ", buf, 2u);
    }
  }
  (*(void (**)(void, void, uint64_t))(**(void **)(*((void *)this + 16) + 80) + 40))(*(void *)(*((void *)this + 16) + 80), (a2 + 1), a3);
  if (x_log_hook_p())
  {
LABEL_236:
    x_log_();
    goto LABEL_240;
  }
  uint64_t v133 = x_log_category_render;
  if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    uint64_t v129 = ")";
    uint64_t v130 = v133;
    uint32_t v131 = 2;
LABEL_239:
    _os_log_impl(&dword_184668000, v130, OS_LOG_TYPE_DEFAULT, v129, buf, v131);
  }
LABEL_240:
  uint64_t v134 = *((void *)this + 16);
  float32x4_t v135 = (float32x4_t)xmmword_184997DF0;
  float32x4_t v136 = (float32x4_t)xmmword_184997DF0;
  if (!v134)
  {
LABEL_265:
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v136, v135)))) & 1) == 0) {
      goto LABEL_279;
    }
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p()) {
      goto LABEL_273;
    }
    uint64_t v147 = x_log_category_render;
    if (!os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_279;
    }
    uint64_t v148 = (float32x2_t *)*((void *)this + 16);
    if (v148)
    {
      float64x2_t v149 = vcvtq_f64_f32(v148[30]);
      float v150 = v148[31].f32[1];
      double v151 = v148[31].f32[0];
    }
    else
    {
      float64x2_t v149 = 0uLL;
      float v150 = 1.0;
      double v151 = 0.0;
    }
    *(_DWORD *)buf = 134218752;
    *(float64_t *)&uint8_t buf[4] = v149.f64[0];
    *(_WORD *)&buf[12] = 2048;
    *(float64_t *)((unint64_t)buf | 0xE) = v149.f64[1];
    *(_WORD *)&buf[22] = 2048;
    *(double *)&buf[24] = v151;
    *(_WORD *)uint64_t v328 = 2048;
    *(double *)&v328[2] = v150;
    uint64_t v154 = "(borderColor (%.3g %.3g %.3g %.0g))";
    uint64_t v155 = v147;
    uint32_t v156 = 42;
    goto LABEL_278;
  }
  if (*(float *)(v134 + 232) != 0.0)
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      BOOL v137 = x_log_category_render;
      BOOL v138 = os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT);
      float32x4_t v135 = (float32x4_t)xmmword_184997DF0;
      if (!v138) {
        goto LABEL_250;
      }
      uint64_t v139 = *((void *)this + 16);
      if (v139) {
        float v140 = *(float *)(v139 + 232);
      }
      else {
        float v140 = 0.0;
      }
      *(_DWORD *)buf = 134217984;
      *(double *)&uint8_t buf[4] = v140;
      _os_log_impl(&dword_184668000, v137, OS_LOG_TYPE_DEFAULT, "(borderOffset %g)", buf, 0xCu);
    }
    float32x4_t v135 = (float32x4_t)xmmword_184997DF0;
  }
LABEL_250:
  uint64_t v141 = *((void *)this + 16);
  float32x4_t v136 = v135;
  if (!v141) {
    goto LABEL_265;
  }
  if (*(float *)(v141 + 236) == 0.0) {
    goto LABEL_260;
  }
  CA::Render::show_newline((CA::Render *)(a2 + 1));
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    uint64_t v142 = x_log_category_render;
    BOOL v143 = os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT);
    float32x4_t v135 = (float32x4_t)xmmword_184997DF0;
    if (!v143) {
      goto LABEL_260;
    }
    uint64_t v144 = *((void *)this + 16);
    if (v144) {
      float v145 = *(float *)(v144 + 236);
    }
    else {
      float v145 = 0.0;
    }
    *(_DWORD *)buf = 134217984;
    *(double *)&uint8_t buf[4] = v145;
    _os_log_impl(&dword_184668000, v142, OS_LOG_TYPE_DEFAULT, "(borderWidth %g)", buf, 0xCu);
  }
  float32x4_t v135 = (float32x4_t)xmmword_184997DF0;
LABEL_260:
  uint64_t v146 = (float32x4_t *)*((void *)this + 16);
  float32x4_t v136 = v135;
  if (!v146) {
    goto LABEL_265;
  }
  if (!v146[8].i64[0])
  {
    float32x4_t v136 = v146[15];
    goto LABEL_265;
  }
  CA::Render::show_newline((CA::Render *)(a2 + 1));
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    double v152 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_184668000, v152, OS_LOG_TYPE_DEFAULT, "(borderColor ", buf, 2u);
    }
  }
  (*(void (**)(void, void, uint64_t))(**(void **)(*((void *)this + 16) + 128) + 40))(*(void *)(*((void *)this + 16) + 128), (a2 + 1), a3);
  if (x_log_hook_p())
  {
LABEL_273:
    x_log_();
    goto LABEL_279;
  }
  uint64_t v153 = x_log_category_render;
  if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    uint64_t v154 = ")";
    uint64_t v155 = v153;
    uint32_t v156 = 2;
LABEL_278:
    _os_log_impl(&dword_184668000, v155, OS_LOG_TYPE_DEFAULT, v154, buf, v156);
  }
LABEL_279:
  if ((*((unsigned char *)this + 44) & 0x20) == 0)
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v157 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184668000, v157, OS_LOG_TYPE_DEFAULT, "(borderPathIsBounds false)", buf, 2u);
      }
    }
  }
  uint64_t v158 = *((void *)this + 16);
  float32x4_t v159 = (float32x4_t)xmmword_184997DF0;
  float32x4_t v160 = (float32x4_t)xmmword_184997DF0;
  if (v158)
  {
    if (*(float *)(v158 + 320) == 0.0) {
      goto LABEL_294;
    }
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v161 = x_log_category_render;
      BOOL v162 = os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT);
      float32x4_t v159 = (float32x4_t)xmmword_184997DF0;
      if (!v162) {
        goto LABEL_294;
      }
      uint64_t v163 = *((void *)this + 16);
      if (v163) {
        float v164 = *(float *)(v163 + 320);
      }
      else {
        float v164 = 0.0;
      }
      *(_DWORD *)buf = 134217984;
      *(double *)&uint8_t buf[4] = v164;
      _os_log_impl(&dword_184668000, v161, OS_LOG_TYPE_DEFAULT, "(rimOpacity %g)", buf, 0xCu);
    }
    float32x4_t v159 = (float32x4_t)xmmword_184997DF0;
LABEL_294:
    uint64_t v165 = *((void *)this + 16);
    float32x4_t v160 = v159;
    if (!v165) {
      goto LABEL_306;
    }
    if (*(float *)(v165 + 300) == 0.0) {
      goto LABEL_304;
    }
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v166 = x_log_category_render;
      BOOL v167 = os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT);
      float32x4_t v159 = (float32x4_t)xmmword_184997DF0;
      if (!v167) {
        goto LABEL_304;
      }
      uint64_t v168 = *((void *)this + 16);
      if (v168) {
        float v169 = *(float *)(v168 + 300);
      }
      else {
        float v169 = 0.0;
      }
      *(_DWORD *)buf = 134217984;
      *(double *)&uint8_t buf[4] = v169;
      _os_log_impl(&dword_184668000, v166, OS_LOG_TYPE_DEFAULT, "(rimWidth %g)", buf, 0xCu);
    }
    float32x4_t v159 = (float32x4_t)xmmword_184997DF0;
LABEL_304:
    uint64_t v170 = (float32x4_t *)*((void *)this + 16);
    float32x4_t v160 = v159;
    if (v170) {
      float32x4_t v160 = v170[19];
    }
  }
LABEL_306:
  uint16x4_t v171 = (uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v160, v159)));
  v171.i16[0] = vmaxv_u16(v171);
  if (v171.i8[0])
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v172 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v173 = (float32x2_t *)*((void *)this + 16);
        if (v173)
        {
          float64x2_t v174 = vcvtq_f64_f32(v173[38]);
          double v175 = v173[39].f32[0];
          float v176 = v173[39].f32[1];
        }
        else
        {
          float64x2_t v174 = 0uLL;
          float v176 = 1.0;
          double v175 = 0.0;
        }
        *(_DWORD *)buf = 134218752;
        *(float64_t *)&uint8_t buf[4] = v174.f64[0];
        *(_WORD *)&buf[12] = 2048;
        *(float64_t *)((unint64_t)buf | 0xE) = v174.f64[1];
        *(_WORD *)&buf[22] = 2048;
        *(double *)&buf[24] = v175;
        *(_WORD *)uint64_t v328 = 2048;
        *(double *)&v328[2] = v176;
        _os_log_impl(&dword_184668000, v172, OS_LOG_TYPE_DEFAULT, "(rimColor (%.3g %.3g %.3g %.0g))", buf, 0x2Au);
      }
    }
  }
  if ((*((unsigned char *)this + 44) & 0x10) == 0)
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v177 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184668000, v177, OS_LOG_TYPE_DEFAULT, "(rimPathIsBounds false)", buf, 2u);
      }
    }
  }
  uint64_t v178 = *((void *)this + 16);
  if (v178)
  {
    if (!*(void *)(v178 + 8)
      || (CA::Render::show_newline((CA::Render *)(a2 + 1)),
          (*(void (**)(void, void, uint64_t))(**(void **)(*((void *)this + 16) + 8) + 40))(*(void *)(*((void *)this + 16) + 8), (a2 + 1), a3), (uint64_t v178 = *((void *)this + 16)) != 0))
    {
      if (*(void *)(v178 + 56))
      {
        CA::Render::show_newline((CA::Render *)(a2 + 1));
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          uint64_t v179 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_184668000, v179, OS_LOG_TYPE_DEFAULT, "(cornerContents ", buf, 2u);
          }
        }
        (*(void (**)(void, void, uint64_t))(**(void **)(*((void *)this + 16) + 56) + 40))(*(void *)(*((void *)this + 16) + 56), (a2 + 1), a3);
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          uint64_t v180 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_184668000, v180, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
          }
        }
      }
    }
  }
  if ((*((unsigned char *)this + 40) & 3) == 0) {
    goto LABEL_348;
  }
  CA::Render::show_newline((CA::Render *)(a2 + 1));
  int v181 = *((_DWORD *)this + 10) & 3;
  if (v181 == 3)
  {
    if (!x_log_hook_p())
    {
      uint64_t v182 = x_log_category_render;
      if (!os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_348;
      }
      *(_WORD *)buf = 0;
      uint64_t v183 = "(cornerCurve ID1)";
      goto LABEL_347;
    }
LABEL_340:
    x_log_();
    goto LABEL_348;
  }
  if (v181 == 2)
  {
    if (!x_log_hook_p())
    {
      uint64_t v182 = x_log_category_render;
      if (!os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_348;
      }
      *(_WORD *)buf = 0;
      uint64_t v183 = "(cornerCurve ID0)";
      goto LABEL_347;
    }
    goto LABEL_340;
  }
  if (v181 != 1) {
    goto LABEL_348;
  }
  if (x_log_hook_p()) {
    goto LABEL_340;
  }
  uint64_t v182 = x_log_category_render;
  if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    uint64_t v183 = "(cornerCurve continuous)";
LABEL_347:
    _os_log_impl(&dword_184668000, v182, OS_LOG_TYPE_DEFAULT, v183, buf, 2u);
  }
LABEL_348:
  if ((*((unsigned char *)this + 45) & 2) != 0)
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v184 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184668000, v184, OS_LOG_TYPE_DEFAULT, "(cornerContentsMasksEdges true)", buf, 2u);
      }
    }
  }
  unsigned int v185 = *((_DWORD *)this + 9);
  int v186 = HIWORD(v185) & 0xF;
  if (v186 != 15)
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v187 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v188 = " minX-minY";
        if ((v185 & 0x10000) == 0) {
          uint64_t v188 = "";
        }
        uint64_t v189 = " maxX-minY";
        if ((v185 & 0x20000) == 0) {
          uint64_t v189 = "";
        }
        uint64_t v190 = " minX-maxY";
        if ((v185 & 0x40000) == 0) {
          uint64_t v190 = "";
        }
        *(_DWORD *)buf = 136316162;
        *(void *)&uint8_t buf[4] = v188;
        uint64_t v191 = " maxX-maxY";
        if ((v185 & 0x80000) == 0) {
          uint64_t v191 = "";
        }
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = v189;
        *(_WORD *)&buf[22] = 2080;
        *(void *)&buf[24] = v190;
        *(_WORD *)uint64_t v328 = 2080;
        *(void *)&v328[2] = v191;
        if (v186) {
          uint64_t v192 = "";
        }
        else {
          uint64_t v192 = " none";
        }
        *(_WORD *)&v328[10] = 2080;
        *(void *)&v328[12] = v192;
        _os_log_impl(&dword_184668000, v187, OS_LOG_TYPE_DEFAULT, "(maskedCorners%s%s%s%s%s)", buf, 0x34u);
      }
    }
  }
  if (*((void *)this + 12))
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    uint64_t v193 = (*(uint64_t (**)(void))(**((void **)this + 12) + 80))(*((void *)this + 12));
    if (v193) {
      int v194 = (*(unsigned __int8 *)(v193 + 14) >> 4) & 1;
    }
    else {
      int v194 = 0;
    }
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v195 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184668000, v195, OS_LOG_TYPE_DEFAULT, "(contents ", buf, 2u);
      }
    }
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v196 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v197 = "";
        if (v194) {
          uint64_t v197 = "backingStore ";
        }
        *(_DWORD *)buf = 136315138;
        *(void *)&uint8_t buf[4] = v197;
        _os_log_impl(&dword_184668000, v196, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
      }
    }
    (*(void (**)(void, void, uint64_t))(**((void **)this + 12) + 40))(*((void *)this + 12), (a2 + 1), a3);
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v198 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184668000, v198, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
      }
    }
  }
  if ((*((unsigned char *)this + 41) & 0x80) != 0)
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v199 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184668000, v199, OS_LOG_TYPE_DEFAULT, "(contentsScaling repeat)", buf, 2u);
      }
    }
  }
  if ((*((_DWORD *)this + 9) & 0xF0) != 0x10)
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    uint64_t v200 = *((_DWORD *)this + 9) >> 4;
    if (v200 > 0xA) {
      uint64_t v201 = 0;
    }
    else {
      uint64_t v201 = [(__CFString *)CAAtomGetString(CA::Render::image_filter_atoms[v200]) cStringUsingEncoding:4];
    }
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v202 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v203 = "<unknown>";
        if (v201) {
          uint64_t v203 = (const char *)v201;
        }
        *(_DWORD *)buf = 136315138;
        *(void *)&uint8_t buf[4] = v203;
        _os_log_impl(&dword_184668000, v202, OS_LOG_TYPE_DEFAULT, "(magnificationFilter %s)", buf, 0xCu);
      }
    }
  }
  if ((*((_DWORD *)this + 9) & 0xF) != 1)
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if ((*((_DWORD *)this + 9) & 0xFu) > 0xA) {
      uint64_t v204 = 0;
    }
    else {
      uint64_t v204 = [(__CFString *)CAAtomGetString(CA::Render::image_filter_atoms[*((_DWORD *)this + 9) & 0xF]) cStringUsingEncoding:4];
    }
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v205 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v206 = "<unknown>";
        if (v204) {
          uint64_t v206 = (const char *)v204;
        }
        *(_DWORD *)buf = 136315138;
        *(void *)&uint8_t buf[4] = v206;
        _os_log_impl(&dword_184668000, v205, OS_LOG_TYPE_DEFAULT, "(minificationFilter %s)", buf, 0xCu);
      }
    }
  }
  uint64_t v207 = *((void *)this + 16);
  if (v207)
  {
    v171.i32[0] = *(_DWORD *)(v207 + 296);
    if (*(float *)v171.i32 != 1.0)
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        uint64_t v208 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v209 = *((void *)this + 16);
          if (v209) {
            float v210 = *(float *)(v209 + 296);
          }
          else {
            float v210 = 1.0;
          }
          *(_DWORD *)buf = 134217984;
          *(double *)&uint8_t buf[4] = v210;
          _os_log_impl(&dword_184668000, v208, OS_LOG_TYPE_DEFAULT, "(gain %g)", buf, 0xCu);
        }
      }
    }
    uint64_t v211 = *((void *)this + 16);
    if (v211)
    {
      v171.i32[0] = *(_DWORD *)(v211 + 292);
      if (*(float *)v171.i32 != 0.0)
      {
        CA::Render::show_newline((CA::Render *)(a2 + 1));
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          uint64_t v212 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v213 = *((void *)this + 16);
            if (v213) {
              float v214 = *(float *)(v213 + 292);
            }
            else {
              float v214 = 0.0;
            }
            *(_DWORD *)buf = 134217984;
            *(double *)&uint8_t buf[4] = v214;
            _os_log_impl(&dword_184668000, v212, OS_LOG_TYPE_DEFAULT, "(lodBias %g)", buf, 0xCu);
          }
        }
      }
    }
  }
  if ((*((unsigned char *)this + 45) & 0x10) == 0)
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v215 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184668000, v215, OS_LOG_TYPE_DEFAULT, "(inheritsTiming false)", buf, 2u);
      }
    }
  }
  if ((*((unsigned char *)this + 45) & 0x20) != 0)
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v216 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184668000, v216, OS_LOG_TYPE_DEFAULT, "(definesDisplayRegionOfInterest true)", buf, 2u);
      }
    }
  }
  if ((*((unsigned char *)this + 45) & 8) != 0)
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v217 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184668000, v217, OS_LOG_TYPE_DEFAULT, "(contentsContainsSubtitles true)", buf, 2u);
      }
    }
  }
  uint64_t v218 = *((void *)this + 16);
  if (v218)
  {
    uint64_t v219 = *(void *)(v218 + 32);
    if (!v219) {
      goto LABEL_805;
    }
    if (*(_DWORD *)(v219 + 16) > 5u)
    {
      long long v222 = *(_OWORD *)(v219 + 40);
      *(_OWORD *)buf = *(_OWORD *)(v219 + 24);
      *(_OWORD *)&uint8_t buf[16] = v222;
      long long v221 = *(_OWORD *)(v219 + 56);
    }
    else
    {
      long long v220 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
      *(_OWORD *)buf = *MEMORY[0x1E4F1DAB8];
      *(_OWORD *)&uint8_t buf[16] = v220;
      long long v221 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 32);
    }
    *(_OWORD *)uint64_t v328 = v221;
    CA::Render::show_affine_transform((CA::Render *)"contentsTransform", buf, a2);
    uint64_t v218 = *((void *)this + 16);
    if (v218)
    {
LABEL_805:
      if (*(void *)(v218 + 40))
      {
        CA::Render::show_newline((CA::Render *)(a2 + 1));
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          uint64_t v223 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_184668000, v223, OS_LOG_TYPE_DEFAULT, "(contentsRect ", buf, 2u);
          }
        }
        (*(void (**)(void, void, uint64_t))(**(void **)(*((void *)this + 16) + 40) + 40))(*(void *)(*((void *)this + 16) + 40), (a2 + 1), a3);
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          uint64_t v224 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_184668000, v224, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
          }
        }
      }
      uint64_t v225 = *((void *)this + 16);
      if (v225)
      {
        if (*(void *)(v225 + 48))
        {
          CA::Render::show_newline((CA::Render *)(a2 + 1));
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            uint64_t v226 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_184668000, v226, OS_LOG_TYPE_DEFAULT, "(contentsCenter ", buf, 2u);
            }
          }
          (*(void (**)(void, void, uint64_t))(**(void **)(*((void *)this + 16) + 48) + 40))(*(void *)(*((void *)this + 16) + 48), (a2 + 1), a3);
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            uint64_t v227 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_184668000, v227, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
            }
          }
        }
        uint64_t v228 = *((void *)this + 16);
        if (v228 && *(void *)(v228 + 64))
        {
          CA::Render::show_newline((CA::Render *)(a2 + 1));
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            v229 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_184668000, v229, OS_LOG_TYPE_DEFAULT, "(cornerContentsCenter ", buf, 2u);
            }
          }
          (*(void (**)(void, void, uint64_t))(**(void **)(*((void *)this + 16) + 64) + 40))(*(void *)(*((void *)this + 16) + 64), (a2 + 1), a3);
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            uint64_t v230 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_184668000, v230, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
            }
          }
        }
      }
    }
  }
  if (*((unsigned char *)this + 45))
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v231 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184668000, v231, OS_LOG_TYPE_DEFAULT, "(literalContentsCenter true)", buf, 2u);
      }
    }
  }
  uint64_t v232 = *((void *)this + 16);
  if (!v232) {
    goto LABEL_514;
  }
  v171.i32[0] = *(_DWORD *)(v232 + 256);
  if (*(float *)v171.i32 != 1.0)
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v233 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v234 = *((void *)this + 16);
        if (v234) {
          float v235 = *(float *)(v234 + 256);
        }
        else {
          float v235 = 1.0;
        }
        *(_DWORD *)buf = 134217984;
        *(double *)&uint8_t buf[4] = v235;
        _os_log_impl(&dword_184668000, v233, OS_LOG_TYPE_DEFAULT, "(contentsEDRStrength %g)", buf, 0xCu);
      }
    }
  }
  uint64_t v236 = *((void *)this + 16);
  if (!v236) {
    goto LABEL_514;
  }
  v171.i32[0] = *(_DWORD *)(v236 + 260);
  if (*(float *)v171.i32 != 0.0)
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      double v237 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v238 = *((void *)this + 16);
        if (v238) {
          float v239 = *(float *)(v238 + 260);
        }
        else {
          float v239 = 0.0;
        }
        *(_DWORD *)buf = 134217984;
        *(double *)&uint8_t buf[4] = v239;
        _os_log_impl(&dword_184668000, v237, OS_LOG_TYPE_DEFAULT, "(contentsMaximumDesiredEDR %g)", buf, 0xCu);
      }
    }
  }
  uint64_t v240 = *((void *)this + 16);
  if (!v240) {
    goto LABEL_514;
  }
  v171.i32[0] = *(_DWORD *)(v240 + 264);
  if (*(float *)v171.i32 != 0.0)
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v241 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v242 = *((void *)this + 16);
        if (v242) {
          float v243 = *(float *)(v242 + 264);
        }
        else {
          float v243 = 0.0;
        }
        *(_DWORD *)buf = 134217984;
        *(double *)&uint8_t buf[4] = v243;
        _os_log_impl(&dword_184668000, v241, OS_LOG_TYPE_DEFAULT, "(displayMaximumDesiredEDR %g)", buf, 0xCu);
      }
    }
  }
  uint64_t v244 = *((void *)this + 16);
  if (v244)
  {
    v171.i32[0] = *(_DWORD *)(v244 + 284);
  }
  else
  {
LABEL_514:
    v171.i8[0] = *((unsigned char *)this + 34);
    *(float *)v171.i32 = (float)v171.u32[0];
  }
  if (*(float *)v171.i32 != 1.0)
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      unint64_t v245 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v246 = *((void *)this + 16);
        if (v246)
        {
          v171.i32[0] = *(_DWORD *)(v246 + 284);
        }
        else
        {
          v171.i8[0] = *((unsigned char *)this + 34);
          *(float *)v171.i32 = (float)v171.u32[0];
        }
        *(_DWORD *)buf = 134217984;
        *(double *)&uint8_t buf[4] = *(float *)v171.i32;
        _os_log_impl(&dword_184668000, v245, OS_LOG_TYPE_DEFAULT, "(contentsScale %g)", buf, 0xCu);
      }
    }
  }
  if ((*((unsigned char *)this + 42) & 4) != 0)
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v247 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184668000, v247, OS_LOG_TYPE_DEFAULT, "(shouldRasterize true)", buf, 2u);
      }
    }
  }
  if ((*((unsigned char *)this + 42) & 8) != 0)
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v248 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184668000, v248, OS_LOG_TYPE_DEFAULT, "(shouldFlatten true)", buf, 2u);
      }
    }
  }
  if ((*((unsigned char *)this + 42) & 0x10) != 0)
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v249 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184668000, v249, OS_LOG_TYPE_DEFAULT, "(shouldReflatten true)", buf, 2u);
      }
    }
  }
  if ((*((unsigned char *)this + 42) & 0x20) != 0)
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v250 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184668000, v250, OS_LOG_TYPE_DEFAULT, "(rasterizationPrefersDisplayCompositing true)", buf, 2u);
      }
    }
  }
  if ((*((unsigned char *)this + 42) & 0x40) != 0)
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v251 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184668000, v251, OS_LOG_TYPE_DEFAULT, "(rasterizationPrefersWindowServerAwareBackdrops true)", buf, 2u);
      }
    }
  }
  uint64_t v252 = *((void *)this + 16);
  if (v252)
  {
    v171.i32[0] = *(_DWORD *)(v252 + 288);
  }
  else
  {
    v171.i8[0] = *((unsigned char *)this + 35);
    *(float *)v171.i32 = (float)v171.u32[0];
  }
  if (*(float *)v171.i32 != 1.0)
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v253 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v255 = *((void *)this + 16);
        if (v255)
        {
          float v256 = *(float *)(v255 + 288);
        }
        else
        {
          LOBYTE(v254) = *((unsigned char *)this + 35);
          float v256 = (float)v254;
        }
        *(_DWORD *)buf = 134217984;
        *(double *)&uint8_t buf[4] = v256;
        _os_log_impl(&dword_184668000, v253, OS_LOG_TYPE_DEFAULT, "(rasterizationScale %g)", buf, 0xCu);
      }
    }
  }
  if ((*((unsigned char *)this + 42) & 0x80) != 0)
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v257 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184668000, v257, OS_LOG_TYPE_DEFAULT, "(preloadsCache true)", buf, 2u);
      }
    }
  }
  if (*((unsigned char *)this + 43))
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v258 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184668000, v258, OS_LOG_TYPE_DEFAULT, "(createsCompositingGroup true)", buf, 2u);
      }
    }
  }
  if ((*((unsigned char *)this + 43) & 2) != 0)
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v259 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184668000, v259, OS_LOG_TYPE_DEFAULT, "(allowsDisplayCompositing true)", buf, 2u);
      }
    }
  }
  if ((*((unsigned char *)this + 43) & 4) != 0)
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v260 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184668000, v260, OS_LOG_TYPE_DEFAULT, "(allowsEdgeAntialiasing true)", buf, 2u);
      }
    }
  }
  if ((*((unsigned char *)this + 43) & 8) != 0)
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v261 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184668000, v261, OS_LOG_TYPE_DEFAULT, "(wantsExtendedDynamicRangeContent true)", buf, 2u);
      }
    }
  }
  if ((*((unsigned char *)this + 43) & 0x10) != 0)
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v262 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184668000, v262, OS_LOG_TYPE_DEFAULT, "(toneMapToStandardDynamicRange true)", buf, 2u);
      }
    }
  }
  if ((*((unsigned char *)this + 43) & 0x20) != 0)
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v263 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184668000, v263, OS_LOG_TYPE_DEFAULT, "(allowsGroupOpacity true)", buf, 2u);
      }
    }
  }
  if ((*((unsigned char *)this + 43) & 0x40) == 0)
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v264 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184668000, v264, OS_LOG_TYPE_DEFAULT, "(allowsGroupBlending false)", buf, 2u);
      }
    }
  }
  if ((*((unsigned char *)this + 43) & 0x80) == 0)
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v265 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184668000, v265, OS_LOG_TYPE_DEFAULT, "(allowsHitTesting false)", buf, 2u);
      }
    }
  }
  if (*((unsigned char *)this + 44))
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v266 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184668000, v266, OS_LOG_TYPE_DEFAULT, "(hitTestsContentsAlphaChannel true)", buf, 2u);
      }
    }
  }
  if ((*((unsigned char *)this + 44) & 0x80) != 0)
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v267 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184668000, v267, OS_LOG_TYPE_DEFAULT, "(hitTestsAsOpaque true)", buf, 2u);
      }
    }
  }
  int v268 = (*((unsigned __int8 *)this + 40) >> 2) & 3;
  if (v268)
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (v268 == 1)
    {
      if (x_log_hook_p())
      {
LABEL_620:
        x_log_();
        goto LABEL_626;
      }
      uint64_t v269 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        uint64_t v270 = "(securityMode insecure)";
        goto LABEL_625;
      }
    }
    else
    {
      if (v268 != 2) {
        goto LABEL_626;
      }
      if (x_log_hook_p()) {
        goto LABEL_620;
      }
      uint64_t v269 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        uint64_t v270 = "(securityMode unrestricted)";
LABEL_625:
        _os_log_impl(&dword_184668000, v269, OS_LOG_TYPE_DEFAULT, v270, buf, 2u);
      }
    }
  }
LABEL_626:
  uint64_t v271 = *((void *)this + 16);
  float32x4_t v272 = (float32x4_t)xmmword_184997DF0;
  if (v271) {
    float32x4_t v272 = *(float32x4_t *)(v271 + 200);
  }
  uint16x4_t v273 = (uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v272, (float32x4_t)xmmword_184997DF0)));
  v273.i16[0] = vmaxv_u16(v273);
  if (v273.i8[0])
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v274 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v275 = (float32x2_t *)*((void *)this + 16);
        if (v275)
        {
          float64x2_t v276 = vcvtq_f64_f32(v275[25]);
          float v277 = v275[26].f32[1];
          double v278 = v275[26].f32[0];
        }
        else
        {
          float64x2_t v276 = 0uLL;
          float v277 = 1.0;
          double v278 = 0.0;
        }
        *(_DWORD *)buf = 134218752;
        *(float64_t *)&uint8_t buf[4] = v276.f64[0];
        *(_WORD *)&buf[12] = 2048;
        *(float64_t *)((unint64_t)buf | 0xE) = v276.f64[1];
        *(_WORD *)&buf[22] = 2048;
        *(double *)&buf[24] = v278;
        *(_WORD *)uint64_t v328 = 2048;
        *(double *)&v328[2] = v277;
        _os_log_impl(&dword_184668000, v274, OS_LOG_TYPE_DEFAULT, "(shadowColor (%.3g %.3g %.3g %.0g))", buf, 0x2Au);
      }
    }
  }
  v273.i8[0] = *((unsigned char *)this + 33);
  if ((float)((float)v273.u32[0] * 0.0039216) != 0.0)
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v279 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        LOBYTE(v280) = *((unsigned char *)this + 33);
        *(_DWORD *)buf = 134217984;
        *(double *)&uint8_t buf[4] = (float)((float)v280 * 0.0039216);
        _os_log_impl(&dword_184668000, v279, OS_LOG_TYPE_DEFAULT, "(shadowOpacity %g)", buf, 0xCu);
      }
    }
  }
  uint64_t v281 = *((void *)this + 16);
  float v282 = -3.0;
  float v283 = 0.0;
  if (v281)
  {
    if (*(float *)(v281 + 224) != 3.0)
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        uint64_t v284 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v285 = *((void *)this + 16);
          if (v285) {
            float v286 = *(float *)(v285 + 224);
          }
          else {
            float v286 = 3.0;
          }
          *(_DWORD *)buf = 134217984;
          *(double *)&uint8_t buf[4] = v286;
          _os_log_impl(&dword_184668000, v284, OS_LOG_TYPE_DEFAULT, "(shadowRadius %g)", buf, 0xCu);
        }
      }
    }
    uint64_t v287 = *((void *)this + 16);
    if (v287)
    {
      float v283 = *(float *)(v287 + 216);
      float v282 = *(float *)(v287 + 220);
    }
  }
  if (v283 != 0.0 || v282 != -3.0)
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v288 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218240;
        *(double *)&uint8_t buf[4] = v283;
        *(_WORD *)&buf[12] = 2048;
        *(double *)&buf[14] = v282;
        _os_log_impl(&dword_184668000, v288, OS_LOG_TYPE_DEFAULT, "(shadowOffset [%g %g])", buf, 0x16u);
      }
    }
  }
  uint64_t v289 = *((void *)this + 16);
  if (v289 && *(void *)(v289 + 120))
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v290 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184668000, v290, OS_LOG_TYPE_DEFAULT, "(shadowPath ", buf, 2u);
      }
    }
    (*(void (**)(void, void, uint64_t))(**(void **)(*((void *)this + 16) + 120) + 40))(*(void *)(*((void *)this + 16) + 120), (a2 + 1), a3);
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v291 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184668000, v291, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
      }
    }
  }
  if ((*((unsigned char *)this + 44) & 2) != 0)
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v292 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184668000, v292, OS_LOG_TYPE_DEFAULT, "(invertsShadow true)", buf, 2u);
      }
    }
  }
  if ((*((unsigned char *)this + 44) & 4) != 0)
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v293 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184668000, v293, OS_LOG_TYPE_DEFAULT, "(shadowPathIsBounds true)", buf, 2u);
      }
    }
  }
  if ((*((unsigned char *)this + 44) & 8) != 0)
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v294 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184668000, v294, OS_LOG_TYPE_DEFAULT, "(punchoutShadow true)", buf, 2u);
      }
    }
  }
  if (*((void *)this + 14))
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v295 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184668000, v295, OS_LOG_TYPE_DEFAULT, "(mask ", buf, 2u);
      }
    }
    (*(void (**)(void, void, uint64_t))(**((void **)this + 14) + 40))(*((void *)this + 14), (a2 + 1), a3);
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v296 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184668000, v296, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
      }
    }
  }
  if ((*((unsigned char *)this + 40) & 0x80) != 0)
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v297 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184668000, v297, OS_LOG_TYPE_DEFAULT, "(invertsMask true)", buf, 2u);
      }
    }
  }
  uint64_t v298 = *((void *)this + 13);
  if ((*((unsigned char *)this + 13) & 0x20) == 0)
  {
    if (!v298) {
      goto LABEL_724;
    }
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v299 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184668000, v299, OS_LOG_TYPE_DEFAULT, "(sublayers ", buf, 2u);
      }
    }
    (*(void (**)(void, void, uint64_t))(**((void **)this + 13) + 40))(*((void *)this + 13), (a2 + 1), a3);
    if (!x_log_hook_p())
    {
      uint64_t v300 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
LABEL_723:
        _os_log_impl(&dword_184668000, v300, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
        goto LABEL_724;
      }
      goto LABEL_724;
    }
LABEL_720:
    x_log_();
    goto LABEL_724;
  }
  if (!v298) {
    goto LABEL_724;
  }
  CA::Render::show_newline((CA::Render *)(a2 + 1));
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    uint64_t v301 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_184668000, v301, OS_LOG_TYPE_DEFAULT, "(sublayers ", buf, 2u);
    }
  }
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    uint64_t v302 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_184668000, v302, OS_LOG_TYPE_DEFAULT, "(array", buf, 2u);
    }
  }
  CA::Render::show_newline((CA::Render *)(a2 + 2));
  (*(void (**)(void, void, uint64_t))(**((void **)this + 13) + 40))(*((void *)this + 13), (a2 + 2), a3);
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    uint64_t v303 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_184668000, v303, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
    }
  }
  if (x_log_hook_p()) {
    goto LABEL_720;
  }
  uint64_t v300 = x_log_category_render;
  if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    goto LABEL_723;
  }
LABEL_724:
  uint64_t v304 = *((void *)this + 16);
  if (v304)
  {
    if (*(void *)(v304 + 96))
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        float v305 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184668000, v305, OS_LOG_TYPE_DEFAULT, "(filters ", buf, 2u);
        }
      }
      (*(void (**)(void, void, uint64_t))(**(void **)(*((void *)this + 16) + 96) + 40))(*(void *)(*((void *)this + 16) + 96), (a2 + 1), a3);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        uint64_t v306 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184668000, v306, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
        }
      }
    }
    uint64_t v307 = *((void *)this + 16);
    if (v307)
    {
      if (*(void *)(v307 + 104))
      {
        CA::Render::show_newline((CA::Render *)(a2 + 1));
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          uint64_t v308 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_184668000, v308, OS_LOG_TYPE_DEFAULT, "(backgroundFilters ", buf, 2u);
          }
        }
        (*(void (**)(void, void, uint64_t))(**(void **)(*((void *)this + 16) + 104) + 40))(*(void *)(*((void *)this + 16) + 104), (a2 + 1), a3);
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          uint64_t v309 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_184668000, v309, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
          }
        }
      }
      uint64_t v310 = *((void *)this + 16);
      if (v310)
      {
        if (*(void *)(v310 + 88))
        {
          CA::Render::show_newline((CA::Render *)(a2 + 1));
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            uint64_t v311 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_184668000, v311, OS_LOG_TYPE_DEFAULT, "(compositingFilter ", buf, 2u);
            }
          }
          (*(void (**)(void, void, uint64_t))(**(void **)(*((void *)this + 16) + 88) + 40))(*(void *)(*((void *)this + 16) + 88), (a2 + 1), a3);
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            v312 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_184668000, v312, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
            }
          }
        }
        uint64_t v313 = *((void *)this + 16);
        if (v313 && *(void *)(v313 + 112))
        {
          CA::Render::show_newline((CA::Render *)(a2 + 1));
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            v314 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_184668000, v314, OS_LOG_TYPE_DEFAULT, "(meshTransform ", buf, 2u);
            }
          }
          (*(void (**)(void, void, uint64_t))(**(void **)(*((void *)this + 16) + 112) + 40))(*(void *)(*((void *)this + 16) + 112), (a2 + 1), a3);
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            v315 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_184668000, v315, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
            }
          }
        }
      }
    }
  }
  if (*((void *)this + 17))
  {
    CA::Render::show_newline((CA::Render *)(a2 + 1));
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v316 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184668000, v316, OS_LOG_TYPE_DEFAULT, "(animations ", buf, 2u);
      }
    }
    (*(void (**)(void, void, uint64_t))(**((void **)this + 17) + 40))(*((void *)this + 17), (a2 + 1), a3);
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v317 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184668000, v317, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
      }
    }
  }
  uint64_t v318 = *((void *)this + 16);
  if (v318)
  {
    if (*(void *)(v318 + 136))
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        uint64_t v319 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184668000, v319, OS_LOG_TYPE_DEFAULT, "(modifiers ", buf, 2u);
        }
      }
      (*(void (**)(void, void, uint64_t))(**(void **)(*((void *)this + 16) + 136) + 40))(*(void *)(*((void *)this + 16) + 136), (a2 + 1), a3);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        uint64_t v320 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184668000, v320, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
        }
      }
    }
    uint64_t v321 = (void *)*((void *)this + 16);
    if (v321 && *v321)
    {
      uint64_t v322 = (CA::Render *)(a2 + 1);
      CA::Render::show_newline(v322);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        uint64_t v323 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184668000, v323, OS_LOG_TYPE_DEFAULT, "(subclass ", buf, 2u);
        }
      }
      (*(void (**)(void, CA::Render *, uint64_t))(***((void ***)this + 16) + 40))(**((void **)this + 16), v322, a3);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        uint64_t v324 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184668000, v324, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
        }
      }
    }
  }
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    uint64_t v325 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_184668000, v325, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
    }
  }
}

uint64_t CA::Render::Layer::show_compressed(uint64_t this, int a2, uint64_t a3)
{
  uint64_t v142 = *MEMORY[0x1E4F143B8];
  if ((*(unsigned char *)(this + 41) & 1) == 0)
  {
    uint64_t v5 = this;
    uint64_t v6 = *(void *)(this + 144);
    if (!v6 || (*(void *)(v6 + 96) & 0x300000000000) != 0x200000000000)
    {
      int v7 = (CA::Render *)(a2 + 1);
      CA::Render::show_newline(v7);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        long long v8 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          long long v9 = "transform-";
          uint64_t v10 = "";
          uint64_t v11 = *(void *)(v5 + 64);
          long long v12 = *(const char **)(v5 + 72);
          if ((*(_DWORD *)(v5 + 12) & 0x100) == 0) {
            long long v9 = "";
          }
          uint64_t v13 = *(const char **)(v5 + 80);
          uint64_t v14 = *(void *)(v5 + 88);
          if ((*(_DWORD *)(v5 + 12) & 0x800) != 0) {
            uint64_t v10 = "container ";
          }
          *(_DWORD *)buf = 136316418;
          *(void *)uint64_t v129 = v9;
          *(_WORD *)&v129[8] = 2080;
          uint64_t v130 = v10;
          *(_WORD *)uint32_t v131 = 2048;
          *(void *)&v131[2] = v11;
          __int16 v132 = 2048;
          uint64_t v133 = v12;
          __int16 v134 = 2048;
          float32x4_t v135 = v13;
          __int16 v136 = 2048;
          uint64_t v137 = v14;
          _os_log_impl(&dword_184668000, v8, OS_LOG_TYPE_DEFAULT, "*%slayer %s[%.10g %.10g %.10g %.10g]", buf, 0x3Eu);
        }
      }
      uint64_t v15 = *(_DWORD **)(v5 + 144);
      if (v15)
      {
        int v16 = v15[30];
        if (v16 >= v15[31]) {
          int v16 = v15[31];
        }
        if (v16 >= 1)
        {
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            int v17 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              int v18 = v15[28];
              int v19 = v15[29];
              int v20 = v15[30];
              int v21 = v15[31];
              *(_DWORD *)buf = 67109888;
              *(_DWORD *)uint64_t v129 = v18;
              *(_WORD *)&v129[4] = 1024;
              *(_DWORD *)&v129[6] = v19;
              LOWORD(v130) = 1024;
              *(_DWORD *)((char *)&v130 + 2) = v20;
              HIWORD(v130) = 1024;
              *(_DWORD *)uint32_t v131 = v21;
              _os_log_impl(&dword_184668000, v17, OS_LOG_TYPE_DEFAULT, " [%d %d %d %d]", buf, 0x1Au);
            }
          }
        }
      }
      if ((a3 & 2) == 0 && *(void *)(v5 + 120))
      {
        CA::Render::show_newline((CA::Render *)(a2 + 1));
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          uint64_t v22 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_184668000, v22, OS_LOG_TYPE_DEFAULT, "(name ", buf, 2u);
          }
        }
        (*(void (**)(void, void, uint64_t))(**(void **)(v5 + 120) + 40))(*(void *)(v5 + 120), (a2 + 1), a3);
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          unsigned int v23 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_184668000, v23, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
          }
        }
      }
      uint64_t v24 = *(void *)(v5 + 144);
      if (v24 && *(_DWORD *)(v24 + 92))
      {
        CA::Render::show_newline((CA::Render *)(a2 + 1));
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          unsigned int v25 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            int v26 = *(_DWORD *)(v24 + 92) >> 28;
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)uint64_t v129 = v26;
            _os_log_impl(&dword_184668000, v25, OS_LOG_TYPE_DEFAULT, "[%d passes", buf, 8u);
          }
        }
        unsigned int v27 = *(_DWORD *)(v24 + 92);
        if ((v27 & 0x1FFFF) != 0)
        {
          CA::Render::print_offscreen_flags((CA::Render *)(v27 & 0x1FFFF));
          unsigned int v27 = *(_DWORD *)(v24 + 92);
        }
        float v28 = (CA::Render *)((v27 >> 17) & 0x7FF);
        if (v28) {
          CA::Render::print_group_flags(v28);
        }
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          float v29 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_184668000, v29, OS_LOG_TYPE_DEFAULT, "]", buf, 2u);
          }
        }
      }
      uint64_t v30 = *(void *)(v5 + 128);
      if (v30)
      {
        if (*(unsigned char *)(v30 + 324))
        {
          CA::Render::show_newline((CA::Render *)(a2 + 1));
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            int v31 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v32 = *(void *)(v5 + 128);
              if (v32) {
                LODWORD(v32) = *(unsigned char *)(v32 + 324) & 1;
              }
              int v33 = CA::Render::Layer::show(unsigned int,unsigned int)const::names[v32];
              *(_DWORD *)buf = 136315138;
              *(void *)uint64_t v129 = v33;
              _os_log_impl(&dword_184668000, v31, OS_LOG_TYPE_DEFAULT, "(contentsSwizzle %s)", buf, 0xCu);
            }
          }
        }
        uint64_t v34 = *(void *)(v5 + 128);
        if (v34)
        {
          int v35 = *(void **)(v34 + 72);
          if (v35)
          {
            CA::Render::show_newline((CA::Render *)(a2 + 1));
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              unsigned int v36 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v37 = v35[3];
                unsigned int v38 = (const char *)v35[4];
                uint64_t v39 = v35[5];
                unsigned int v40 = (const char *)v35[6];
                long long v41 = (const char *)v35[7];
                uint64_t v42 = v35[8];
                uint64_t v43 = v35[9];
                uint64_t v44 = v35[10];
                *(_DWORD *)buf = 134219776;
                *(void *)uint64_t v129 = v37;
                *(_WORD *)&v129[8] = 2048;
                uint64_t v130 = v38;
                *(_WORD *)uint32_t v131 = 2048;
                *(void *)&v131[2] = v39;
                __int16 v132 = 2048;
                uint64_t v133 = v40;
                __int16 v134 = 2048;
                float32x4_t v135 = v41;
                __int16 v136 = 2048;
                uint64_t v137 = v42;
                __int16 v138 = 2048;
                uint64_t v139 = v43;
                __int16 v140 = 2048;
                uint64_t v141 = v44;
                _os_log_impl(&dword_184668000, v36, OS_LOG_TYPE_DEFAULT, "(cornerRadii [%g %g] [%g %g] [%g %g] [%g %g])", buf, 0x52u);
              }
            }
          }
          uint64_t v45 = *(void *)(v5 + 128);
          if (v45)
          {
            if (*(float *)(v45 + 228) != 0.0)
            {
              CA::Render::show_newline((CA::Render *)(a2 + 1));
              if (x_log_hook_p())
              {
                x_log_();
              }
              else
              {
                long long v46 = x_log_category_render;
                if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v47 = *(void *)(v5 + 128);
                  float v48 = 0.0;
                  if (v47) {
                    float v48 = *(float *)(v47 + 228);
                  }
                  *(_DWORD *)buf = 134217984;
                  *(double *)uint64_t v129 = v48;
                  _os_log_impl(&dword_184668000, v46, OS_LOG_TYPE_DEFAULT, "(cornerRadius %g)", buf, 0xCu);
                }
              }
            }
            uint64_t v49 = *(void *)(v5 + 128);
            if (v49)
            {
              if (*(float *)(v49 + 232) != 0.0)
              {
                CA::Render::show_newline((CA::Render *)(a2 + 1));
                if (x_log_hook_p())
                {
                  x_log_();
                }
                else
                {
                  long long v50 = x_log_category_render;
                  if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
                  {
                    uint64_t v51 = *(void *)(v5 + 128);
                    if (v51) {
                      float v52 = *(float *)(v51 + 232);
                    }
                    else {
                      float v52 = 0.0;
                    }
                    *(_DWORD *)buf = 134217984;
                    *(double *)uint64_t v129 = v52;
                    _os_log_impl(&dword_184668000, v50, OS_LOG_TYPE_DEFAULT, "(borderOffset %g)", buf, 0xCu);
                  }
                }
              }
              uint64_t v53 = *(void *)(v5 + 128);
              if (v53 && *(float *)(v53 + 236) != 0.0)
              {
                CA::Render::show_newline((CA::Render *)(a2 + 1));
                if (x_log_hook_p())
                {
                  x_log_();
                }
                else
                {
                  CGRect v54 = x_log_category_render;
                  if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
                  {
                    uint64_t v55 = *(void *)(v5 + 128);
                    if (v55) {
                      float v56 = *(float *)(v55 + 236);
                    }
                    else {
                      float v56 = 0.0;
                    }
                    *(_DWORD *)buf = 134217984;
                    *(double *)uint64_t v129 = v56;
                    _os_log_impl(&dword_184668000, v54, OS_LOG_TYPE_DEFAULT, "(borderWidth %g)", buf, 0xCu);
                  }
                }
              }
            }
          }
        }
      }
      if ((*(unsigned char *)(v5 + 44) & 0x20) == 0)
      {
        CA::Render::show_newline((CA::Render *)(a2 + 1));
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          long long v57 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_184668000, v57, OS_LOG_TYPE_DEFAULT, "(borderPathIsBounds false)", buf, 2u);
          }
        }
      }
      uint64_t v58 = *(void *)(v5 + 128);
      if (v58 && *(float *)(v58 + 300) != 0.0)
      {
        CA::Render::show_newline((CA::Render *)(a2 + 1));
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          uint64_t v59 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v60 = *(void *)(v5 + 128);
            if (v60) {
              float v61 = *(float *)(v60 + 300);
            }
            else {
              float v61 = 0.0;
            }
            *(_DWORD *)buf = 134217984;
            *(double *)uint64_t v129 = v61;
            _os_log_impl(&dword_184668000, v59, OS_LOG_TYPE_DEFAULT, "(rimWidth %g)", buf, 0xCu);
          }
        }
      }
      if ((*(unsigned char *)(v5 + 44) & 0x10) == 0)
      {
        CA::Render::show_newline((CA::Render *)(a2 + 1));
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          unsigned int v62 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_184668000, v62, OS_LOG_TYPE_DEFAULT, "(rimPathIsBounds false)", buf, 2u);
          }
        }
      }
      uint64_t v63 = *(void *)(v5 + 128);
      if (v63 && *(void *)(v63 + 56))
      {
        CA::Render::show_newline((CA::Render *)(a2 + 1));
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          unsigned int v64 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_184668000, v64, OS_LOG_TYPE_DEFAULT, "(cornerContents ", buf, 2u);
          }
        }
        (*(void (**)(void, void, uint64_t))(**(void **)(*(void *)(v5 + 128) + 56) + 40))(*(void *)(*(void *)(v5 + 128) + 56), (a2 + 1), a3);
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          uint64_t v65 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_184668000, v65, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
          }
        }
      }
      if ((*(void *)(v5 + 40) & 3) == 1) {
        goto LABEL_130;
      }
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      int v66 = *(_DWORD *)(v5 + 40) & 3;
      switch(v66)
      {
        case 3:
          if (!x_log_hook_p())
          {
            BOOL v67 = x_log_category_render;
            if (!os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_130;
            }
            *(_WORD *)buf = 0;
            uint64_t v68 = "(cornerCurve ID1)";
            goto LABEL_129;
          }
          break;
        case 2:
          if (!x_log_hook_p())
          {
            BOOL v67 = x_log_category_render;
            if (!os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_130;
            }
            *(_WORD *)buf = 0;
            uint64_t v68 = "(cornerCurve ID0)";
            goto LABEL_129;
          }
          break;
        case 1:
          if (x_log_hook_p()) {
            break;
          }
          BOOL v67 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            uint64_t v68 = "(cornerCurve continuous)";
LABEL_129:
            _os_log_impl(&dword_184668000, v67, OS_LOG_TYPE_DEFAULT, v68, buf, 2u);
          }
LABEL_130:
          if ((*(unsigned char *)(v5 + 45) & 2) != 0)
          {
            CA::Render::show_newline((CA::Render *)(a2 + 1));
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              uint64_t v69 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_184668000, v69, OS_LOG_TYPE_DEFAULT, "(cornerContentsMasksEdges true)", buf, 2u);
              }
            }
          }
          unsigned int v70 = *(_DWORD *)(v5 + 36);
          int v71 = HIWORD(v70) & 0xF;
          if (v71 && v71 != 15)
          {
            CA::Render::show_newline((CA::Render *)(a2 + 1));
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              int v72 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                double v73 = "minX-minY";
                if ((v70 & 0x10000) == 0) {
                  double v73 = "";
                }
                double v74 = "maxX-minY";
                if ((v70 & 0x20000) == 0) {
                  double v74 = "";
                }
                *(_DWORD *)buf = 136316162;
                *(void *)uint64_t v129 = v73;
                uint64_t v75 = "minX-maxY";
                if ((v70 & 0x40000) == 0) {
                  uint64_t v75 = "";
                }
                *(_WORD *)&v129[8] = 2080;
                uint64_t v130 = v74;
                *(_WORD *)uint32_t v131 = 2080;
                *(void *)&v131[2] = v75;
                __int16 v132 = 2080;
                if ((v70 & 0x80000) != 0) {
                  double v76 = "maxX-maxY";
                }
                else {
                  double v76 = "";
                }
                uint64_t v133 = v76;
                __int16 v134 = 2080;
                float32x4_t v135 = "";
                _os_log_impl(&dword_184668000, v72, OS_LOG_TYPE_DEFAULT, "(maskedCorners %s%s%s%s%s)", buf, 0x34u);
              }
            }
          }
          if (*(void *)(v5 + 96))
          {
            CA::Render::show_newline((CA::Render *)(a2 + 1));
            uint64_t v77 = (*(uint64_t (**)(void))(**(void **)(v5 + 96) + 80))(*(void *)(v5 + 96));
            if (v77) {
              int v78 = (*(unsigned __int8 *)(v77 + 14) >> 4) & 1;
            }
            else {
              int v78 = 0;
            }
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              int32x4_t v79 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_184668000, v79, OS_LOG_TYPE_DEFAULT, "|contents", buf, 2u);
              }
            }
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              uint64_t v80 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                float32x4_t v81 = " ";
                if (v78) {
                  float32x4_t v81 = "-backingStore ";
                }
                *(_DWORD *)buf = 136315138;
                *(void *)uint64_t v129 = v81;
                _os_log_impl(&dword_184668000, v80, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
              }
            }
            (*(void (**)(void, void, uint64_t))(**(void **)(v5 + 96) + 40))(*(void *)(v5 + 96), (a2 + 1), a3);
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              uint16x4_t v82 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_184668000, v82, OS_LOG_TYPE_DEFAULT, "|", buf, 2u);
              }
            }
          }
          if ((*(_DWORD *)(v5 + 36) & 0xF0) != 0x10)
          {
            CA::Render::show_newline((CA::Render *)(a2 + 1));
            uint64_t v83 = *(_DWORD *)(v5 + 36) >> 4;
            if (v83 > 0xA) {
              uint64_t v84 = 0;
            }
            else {
              uint64_t v84 = [(__CFString *)CAAtomGetString(CA::Render::image_filter_atoms[v83]) cStringUsingEncoding:4];
            }
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              double v85 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                double v86 = "<unknown>";
                if (v84) {
                  double v86 = (const char *)v84;
                }
                *(_DWORD *)buf = 136315138;
                *(void *)uint64_t v129 = v86;
                _os_log_impl(&dword_184668000, v85, OS_LOG_TYPE_DEFAULT, "(magnificationFilter %s)", buf, 0xCu);
              }
            }
          }
          if ((*(_DWORD *)(v5 + 36) & 0xF) != 1)
          {
            CA::Render::show_newline((CA::Render *)(a2 + 1));
            if ((*(_DWORD *)(v5 + 36) & 0xFu) > 0xA) {
              uint64_t v87 = 0;
            }
            else {
              uint64_t v87 = [(__CFString *)CAAtomGetString(CA::Render::image_filter_atoms[*(_DWORD *)(v5 + 36) & 0xF]) cStringUsingEncoding:4];
            }
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              float v88 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v89 = "<unknown>";
                if (v87) {
                  uint64_t v89 = (const char *)v87;
                }
                *(_DWORD *)buf = 136315138;
                *(void *)uint64_t v129 = v89;
                _os_log_impl(&dword_184668000, v88, OS_LOG_TYPE_DEFAULT, "(minificationFilter %s)", buf, 0xCu);
              }
            }
          }
          if ((*(unsigned char *)(v5 + 45) & 8) != 0)
          {
            CA::Render::show_newline((CA::Render *)(a2 + 1));
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              unsigned int v90 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_184668000, v90, OS_LOG_TYPE_DEFAULT, "(contentsContainsSubtitles true)", buf, 2u);
              }
            }
          }
          if ((*(unsigned char *)(v5 + 42) & 4) != 0)
          {
            CA::Render::show_newline((CA::Render *)(a2 + 1));
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              uint64_t v91 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_184668000, v91, OS_LOG_TYPE_DEFAULT, "(shouldRasterize true)", buf, 2u);
              }
            }
          }
          if ((*(unsigned char *)(v5 + 42) & 8) != 0)
          {
            CA::Render::show_newline((CA::Render *)(a2 + 1));
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              BOOL v92 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_184668000, v92, OS_LOG_TYPE_DEFAULT, "(shouldFlatten true)", buf, 2u);
              }
            }
          }
          if ((*(unsigned char *)(v5 + 42) & 0x10) != 0)
          {
            CA::Render::show_newline((CA::Render *)(a2 + 1));
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              uint64_t v93 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_184668000, v93, OS_LOG_TYPE_DEFAULT, "(shouldReflatten true)", buf, 2u);
              }
            }
          }
          if ((*(unsigned char *)(v5 + 42) & 0x80) != 0)
          {
            CA::Render::show_newline((CA::Render *)(a2 + 1));
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              uint64_t v94 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_184668000, v94, OS_LOG_TYPE_DEFAULT, "(preloadsCache true)", buf, 2u);
              }
            }
          }
          if (*(unsigned char *)(v5 + 43))
          {
            CA::Render::show_newline((CA::Render *)(a2 + 1));
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              unsigned int v95 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_184668000, v95, OS_LOG_TYPE_DEFAULT, "(createsCompositingGroup true)", buf, 2u);
              }
            }
          }
          if ((*(unsigned char *)(v5 + 43) & 8) != 0)
          {
            CA::Render::show_newline((CA::Render *)(a2 + 1));
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              unsigned int v96 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_184668000, v96, OS_LOG_TYPE_DEFAULT, "(wantsExtendedDynamicRangeContent true)", buf, 2u);
              }
            }
          }
          uint64_t v97 = *(void *)(v5 + 128);
          if (v97)
          {
            if (*(float *)(v97 + 224) != 3.0)
            {
              CA::Render::show_newline((CA::Render *)(a2 + 1));
              if (x_log_hook_p())
              {
                x_log_();
              }
              else
              {
                uint64_t v98 = x_log_category_render;
                if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v99 = *(void *)(v5 + 128);
                  if (v99) {
                    float v100 = *(float *)(v99 + 224);
                  }
                  else {
                    float v100 = 3.0;
                  }
                  *(_DWORD *)buf = 134217984;
                  *(double *)uint64_t v129 = v100;
                  _os_log_impl(&dword_184668000, v98, OS_LOG_TYPE_DEFAULT, "(shadowRadius %g)", buf, 0xCu);
                }
              }
            }
            uint64_t v101 = *(void *)(v5 + 128);
            if (v101 && *(void *)(v101 + 120))
            {
              CA::Render::show_newline((CA::Render *)(a2 + 1));
              if (x_log_hook_p())
              {
                x_log_();
              }
              else
              {
                uint64_t v102 = x_log_category_render;
                if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl(&dword_184668000, v102, OS_LOG_TYPE_DEFAULT, "(shadowPath ", buf, 2u);
                }
              }
              (*(void (**)(void, void, uint64_t))(**(void **)(*(void *)(v5 + 128) + 120) + 40))(*(void *)(*(void *)(v5 + 128) + 120), (a2 + 1), a3);
              if (x_log_hook_p())
              {
                x_log_();
              }
              else
              {
                uint64_t v103 = x_log_category_render;
                if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl(&dword_184668000, v103, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
                }
              }
            }
          }
          if ((*(unsigned char *)(v5 + 44) & 4) != 0)
          {
            CA::Render::show_newline((CA::Render *)(a2 + 1));
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              uint64_t v104 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_184668000, v104, OS_LOG_TYPE_DEFAULT, "(shadowPathIsBounds true)", buf, 2u);
              }
            }
          }
          if ((*(unsigned char *)(v5 + 44) & 8) != 0)
          {
            CA::Render::show_newline((CA::Render *)(a2 + 1));
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              CFStringRef v105 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_184668000, v105, OS_LOG_TYPE_DEFAULT, "(punchoutShadow true)", buf, 2u);
              }
            }
          }
          uint64_t v106 = *(void *)(v5 + 128);
          if (v106)
          {
            if (*(void *)(v106 + 96))
            {
              CA::Render::show_newline((CA::Render *)(a2 + 1));
              if (x_log_hook_p())
              {
                x_log_();
              }
              else
              {
                unsigned int v107 = x_log_category_render;
                if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl(&dword_184668000, v107, OS_LOG_TYPE_DEFAULT, "(filters: ", buf, 2u);
                }
              }
              (*(void (**)(void, void, uint64_t))(**(void **)(*(void *)(v5 + 128) + 96) + 40))(*(void *)(*(void *)(v5 + 128) + 96), (a2 + 1), a3);
              if (x_log_hook_p())
              {
                x_log_();
              }
              else
              {
                uint64_t v108 = x_log_category_render;
                if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl(&dword_184668000, v108, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
                }
              }
            }
            uint64_t v109 = *(void *)(v5 + 128);
            if (v109)
            {
              if (*(void *)(v109 + 104))
              {
                CA::Render::show_newline((CA::Render *)(a2 + 1));
                if (x_log_hook_p())
                {
                  x_log_();
                }
                else
                {
                  long long v110 = x_log_category_render;
                  if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl(&dword_184668000, v110, OS_LOG_TYPE_DEFAULT, "(backgroundFilters: ", buf, 2u);
                  }
                }
                (*(void (**)(void, void, uint64_t))(**(void **)(*(void *)(v5 + 128) + 104) + 40))(*(void *)(*(void *)(v5 + 128) + 104), (a2 + 1), a3);
                if (x_log_hook_p())
                {
                  x_log_();
                }
                else
                {
                  uint64_t v111 = x_log_category_render;
                  if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl(&dword_184668000, v111, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
                  }
                }
              }
              uint64_t v112 = *(void *)(v5 + 128);
              if (v112)
              {
                if (*(void *)(v112 + 88))
                {
                  CA::Render::show_newline((CA::Render *)(a2 + 1));
                  if (x_log_hook_p())
                  {
                    x_log_();
                  }
                  else
                  {
                    uint64_t v113 = x_log_category_render;
                    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_impl(&dword_184668000, v113, OS_LOG_TYPE_DEFAULT, "(compositingFilter: ", buf, 2u);
                    }
                  }
                  (*(void (**)(void, void, uint64_t))(**(void **)(*(void *)(v5 + 128) + 88) + 40))(*(void *)(*(void *)(v5 + 128) + 88), (a2 + 1), a3);
                  if (x_log_hook_p())
                  {
                    x_log_();
                  }
                  else
                  {
                    uint64_t v114 = x_log_category_render;
                    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_impl(&dword_184668000, v114, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
                    }
                  }
                }
                uint64_t v115 = *(void *)(v5 + 128);
                if (v115 && *(void *)(v115 + 112))
                {
                  CA::Render::show_newline((CA::Render *)(a2 + 1));
                  if (x_log_hook_p())
                  {
                    x_log_();
                  }
                  else
                  {
                    long long v116 = x_log_category_render;
                    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_impl(&dword_184668000, v116, OS_LOG_TYPE_DEFAULT, "(meshTransform ", buf, 2u);
                    }
                  }
                  (*(void (**)(void, void, uint64_t))(**(void **)(*(void *)(v5 + 128) + 112) + 40))(*(void *)(*(void *)(v5 + 128) + 112), (a2 + 1), a3);
                  if (x_log_hook_p())
                  {
                    x_log_();
                  }
                  else
                  {
                    long long v117 = x_log_category_render;
                    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_impl(&dword_184668000, v117, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
                    }
                  }
                }
              }
            }
          }
          if (*(void *)(v5 + 136))
          {
            CA::Render::show_newline((CA::Render *)(a2 + 1));
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              long long v118 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_184668000, v118, OS_LOG_TYPE_DEFAULT, "(animations: ", buf, 2u);
              }
            }
            (*(void (**)(void, void, uint64_t))(**(void **)(v5 + 136) + 40))(*(void *)(v5 + 136), (a2 + 1), a3);
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              uint64_t v119 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_184668000, v119, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
              }
            }
          }
          uint64_t v120 = *(void *)(v5 + 128);
          if (v120 && *(void *)(v120 + 136))
          {
            CA::Render::show_newline((CA::Render *)(a2 + 1));
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              uint64_t v121 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_184668000, v121, OS_LOG_TYPE_DEFAULT, "(modifiers: ", buf, 2u);
              }
            }
            (*(void (**)(void, void, uint64_t))(**(void **)(*(void *)(v5 + 128) + 136) + 40))(*(void *)(*(void *)(v5 + 128) + 136), (a2 + 1), a3);
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              float v122 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_184668000, v122, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
              }
            }
          }
          if (*(void *)(v5 + 112))
          {
            CA::Render::show_newline((CA::Render *)(a2 + 1));
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              uint64_t v123 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_184668000, v123, OS_LOG_TYPE_DEFAULT, "{mask ", buf, 2u);
              }
            }
            (*(void (**)(void, void, uint64_t))(**(void **)(v5 + 112) + 40))(*(void *)(v5 + 112), (a2 + 1), a3);
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              uint64_t v124 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_184668000, v124, OS_LOG_TYPE_DEFAULT, "}", buf, 2u);
              }
            }
          }
          double v125 = *(void **)(v5 + 128);
          if (v125 && *v125)
          {
            CA::Render::show_newline((CA::Render *)(a2 + 1));
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              double v126 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_184668000, v126, OS_LOG_TYPE_DEFAULT, "{subclass ", buf, 2u);
              }
            }
            (*(void (**)(void, void, uint64_t))(***(void ***)(v5 + 128) + 40))(**(void **)(v5 + 128), (a2 + 1), a3);
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              double v127 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_184668000, v127, OS_LOG_TYPE_DEFAULT, "}", buf, 2u);
              }
            }
          }
          this = *(void *)(v5 + 104);
          if ((*(unsigned char *)(v5 + 13) & 0x20) != 0)
          {
            if (!this) {
              return this;
            }
            int v7 = (CA::Render *)(a2 + 2);
          }
          else if (!this)
          {
            return this;
          }
          return (*(uint64_t (**)(uint64_t, CA::Render *, uint64_t))(*(void *)this + 40))(this, v7, a3);
        default:
          goto LABEL_130;
      }
      x_log_();
      goto LABEL_130;
    }
  }
  return this;
}

void CA::Render::print_offscreen_flags(CA::Render *this)
{
  unsigned int v1 = this;
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    uint64_t v2 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      uint64_t v5 = " [";
      _os_log_impl(&dword_184668000, v2, OS_LOG_TYPE_DEFAULT, " (offscreen-flags%s", buf, 0xCu);
    }
  }
  *((void *)&v7 + 1) = CA::Render::offscreen_flag_names;
  *(void *)&unsigned long long v7 = 0;
  CA::Render::print_flags(v1, v7, (const char *const *)0x11);
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    uint64_t v3 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      uint64_t v5 = "]";
      _os_log_impl(&dword_184668000, v3, OS_LOG_TYPE_DEFAULT, "%s)", buf, 0xCu);
    }
  }
}

void CA::Render::print_group_flags(CA::Render *this)
{
  unsigned int v1 = this;
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    uint64_t v2 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      uint64_t v5 = " [";
      _os_log_impl(&dword_184668000, v2, OS_LOG_TYPE_DEFAULT, " (group-flags%s", buf, 0xCu);
    }
  }
  *((void *)&v7 + 1) = CA::Render::group_flag_names;
  *(void *)&unsigned long long v7 = 0;
  CA::Render::print_flags(v1, v7, (const char *const *)0xB);
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    uint64_t v3 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      uint64_t v5 = "]";
      _os_log_impl(&dword_184668000, v3, OS_LOG_TYPE_DEFAULT, "%s)", buf, 0xCu);
    }
  }
}

void CA::Render::print_flags(unint64_t this, unsigned long long a2, const char *const *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (this | (unint64_t)a2)
  {
    uint64_t v4 = *((void *)&a2 + 1);
    unint64_t v5 = a2;
    unint64_t v6 = this;
    uint64_t v7 = 0;
    uint64_t v8 = 1;
    while (1)
    {
      if ((v6 & 1) == 0)
      {
        uint64_t v9 = v8;
        goto LABEL_13;
      }
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        uint64_t v10 = x_log_category_render;
        BOOL v11 = os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT);
        uint64_t v9 = 0;
        if (!v11) {
          goto LABEL_13;
        }
        uint64_t v12 = *(void *)(v4 + 8 * v7);
        if (v8) {
          uint64_t v13 = "";
        }
        else {
          uint64_t v13 = " ";
        }
        *(_DWORD *)buf = 136315394;
        int v17 = v13;
        __int16 v18 = 2080;
        uint64_t v19 = v12;
        _os_log_impl(&dword_184668000, v10, OS_LOG_TYPE_DEFAULT, "%s%s", buf, 0x16u);
      }
      uint64_t v9 = 0;
LABEL_13:
      if (++v7 < (unint64_t)a3)
      {
        *((void *)&v14 + 1) = v5;
        *(void *)&long long v14 = v6;
        BOOL v15 = v6 <= 1;
        v5 >>= 1;
        uint64_t v8 = v9;
        unint64_t v6 = v14 >> 1;
        if (!v15) {
          continue;
        }
      }
      return;
    }
  }
}

uint64_t CA::Render::Layer::evaluate_container(uint64_t this, const double *a2)
{
  uint64_t v2 = this;
  int v3 = *(_DWORD *)(this + 12);
  if ((v3 & 0x1000) != 0 || (this = CA::Render::Layer::is_containerable((CA::Render::Layer *)this, a2), !this)) {
    unsigned int v4 = v3 & 0xFFFFF7FF;
  }
  else {
    unsigned int v4 = v3 | 0x800;
  }
  *(_DWORD *)(v2 + 12) = v4;
  return this;
}

void CA::Render::Layer::frame(CA::Render::Layer *this, CA::Render::Layer *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  float64_t v7 = *((double *)a2 + 8);
  *(float64_t *)this = v7;
  long long v6 = *(_OWORD *)((char *)a2 + 72);
  *(_OWORD *)((char *)this + 8) = v6;
  *((void *)this + 3) = *((void *)a2 + 11);
  float64x2_t v9 = 0uLL;
  uint64_t v10 = 0;
  if (CA::Render::Layer::compute_frame_offset((uint64_t)a2, 0, &v9))
  {
    float64x2_t v4 = (float64x2_t)vdupq_lane_s64(v6, 0);
    v4.f64[0] = v7;
    *(float64x2_t *)this = vaddq_f64(v9, v4);
  }
  else
  {
    memset(v8, 0, sizeof(v8));
    CA::Render::Layer::compute_frame_transform((uint64_t)a2, 0, (CA::Mat4Impl *)v8, 0);
    CA::Mat4Impl::mat4_apply_to_rect(v8, (int8x16_t *)this, v5);
  }
}

CA::Render::Layer *CA::Render::Layer::set_rim_color(CA::Render::Layer *result, float a2, float a3, float a4, float a5)
{
  if (*((void *)result + 16) || a2 != 0.0 || a3 != 0.0 || a4 != 0.0 || a5 != 1.0)
  {
    uint64_t result = (CA::Render::Layer *)CA::Render::Layer::ensure_ext(result);
    *((float *)result + 76) = a2;
    *((float *)result + 77) = a3;
    *((float *)result + 78) = a4;
    *((float *)result + 79) = a5;
  }
  return result;
}

CA::Render::Layer *CA::Render::Layer::set_contents_swizzle(CA::Render::Layer *result, int a2)
{
  char v2 = a2;
  if (a2 || *((void *)result + 16))
  {
    uint64_t result = (CA::Render::Layer *)CA::Render::Layer::ensure_ext(result);
    *((unsigned char *)result + 324) = *((unsigned char *)result + 324) & 0xFE | v2 & 1;
  }
  return result;
}

uint64_t CA::Render::get_rect_property(CA::Render *this, const CA::Rect *a2, int *a3, unsigned int *a4, double *a5)
{
  int v5 = *a3;
  if (a2 == 1)
  {
    if (v5 == 513)
    {
      *(void *)a4 = *((void *)this + 2);
      uint64_t v6 = *((void *)this + 3);
      goto LABEL_12;
    }
    if (v5 == 416)
    {
      *(void *)a4 = *(void *)this;
      uint64_t v6 = *((void *)this + 1);
LABEL_12:
      *((void *)a4 + 1) = v6;
      return 2;
    }
    return 0;
  }
  if (v5 == 513)
  {
    if (a2 == 2)
    {
      int v10 = a3[1];
      if (v10 == 604)
      {
        uint64_t v8 = *((void *)this + 2);
        goto LABEL_20;
      }
      if (v10 == 256)
      {
        uint64_t v8 = *((void *)this + 3);
        goto LABEL_20;
      }
    }
    return 0;
  }
  if (v5 != 416 || a2 != 2) {
    return 0;
  }
  int v7 = a3[1];
  if (v7 == 607)
  {
    uint64_t v8 = *(void *)this;
    goto LABEL_20;
  }
  if (v7 != 611) {
    return 0;
  }
  uint64_t v8 = *((void *)this + 1);
LABEL_20:
  *(void *)a4 = v8;
  return 1;
}

unint64_t CA::Render::TypedArray<CA::Render::Layer>::find_named_object(uint64_t a1, unsigned int a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 16);
  if (!v2) {
    return 0xFFFFFFFFLL;
  }
  if ((a2 & 0x40000000) == 0)
  {
    unint64_t v5 = 0;
    uint64_t v6 = a1 + 24;
    do
    {
      int v7 = *(CA::Render::String **)(*(void *)(v6 + 8 * v5) + 120);
      if (v7)
      {
        if (CA::Render::String::equal(v7, a2)) {
          return v5;
        }
        unsigned int v2 = *(_DWORD *)(a1 + 16);
      }
      ++v5;
    }
    while (v5 < v2);
    return 0xFFFFFFFFLL;
  }
  if ((a2 & 0xBFFFFFFF) >= v2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return a2 & 0xBFFFFFFF;
  }
}

BOOL CA::Render::atom_is_single_sublayer(CA::Render *this, uint64_t a2, CA::Render::Layer *a3)
{
  unsigned int v3 = this;
  if ((this & 0x40000000) != 0) {
    return (this & 0xBFFFFFFF) == 0;
  }
  float64x2_t v4 = *(CA::Render::String **)(a2 + 120);
  return v4 && CA::Render::String::equal(v4, v3);
}

_DWORD *CA::Render::set_rect_vector_property(CA::Render *this, Rect *a2, int *a3, const unsigned int *a4, unint64_t a5, double *a6, const double *a7)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (this)
  {
    float64x2_t v7 = 0uLL;
    _Q1 = 0uLL;
    if (*((_DWORD *)this + 4) >= 4u)
    {
      float64x2_t v7 = *(float64x2_t *)((char *)this + 24);
      _Q1 = vsubq_f64(*(float64x2_t *)((char *)this + 40), v7);
    }
  }
  else
  {
    __asm { FMOV            V1.2D, #1.0 }
    float64x2_t v7 = 0uLL;
  }
  float64x2_t v16 = v7;
  float64x2_t v17 = _Q1;
  CA::Render::set_rect_property(v16.f64, a2, a3, a4, a5, a6, a7);
  double v14 = v17.f64[0];
  if (v17.f64[0] >= v17.f64[1]) {
    double v14 = v17.f64[1];
  }
  if (v14 <= 0.0) {
    return 0;
  }
  v18[0] = v16;
  v18[1] = vaddq_f64(v17, v16);
  return CA::Render::Vector::new_vector((CA::Render::Vector *)4, v18, v13);
}

BOOL CA::Render::Layer::has_hit_test_insecure_properties(CA::Render::Layer *this, int a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (*((void *)this + 16) || *((void *)this + 13) || *((void *)this + 14)) {
      return 1;
    }
    uint64_t v3 = 0x1030C0004C00;
  }
  else
  {
    uint64_t v3 = 0x3080004C00;
  }
  __s1[0] = 0;
  __s1[1] = 0;
  char v8 = 0;
  char v7 = *((unsigned char *)this + 32);
  __int16 v9 = *((_WORD *)this + 17);
  uint64_t v4 = *((void *)this + 5);
  int v10 = (*((unsigned __int8 *)this + 37) << 8) | 0xF0011;
  uint64_t v11 = v4 & 0x1030E4004D03 | v3 & 0x103084004D03;
  long long v14 = *((_OWORD *)this + 5);
  long long v5 = *((_OWORD *)this + 3);
  long long v13 = *((_OWORD *)this + 4);
  long long v12 = v5;
  return memcmp(__s1, (char *)this + 16, 0x50uLL) != 0;
}

uint64_t CA::Render::Layer::count_layers(uint64_t this, int *a2, int *a3, char a4)
{
  LOBYTE(v4) = a4;
  uint64_t v7 = this;
  while (1)
  {
    if (v4
      || (*(unsigned char *)(v7 + 41) & 1) != 0
      || (uint64_t v8 = *(void *)(v7 + 144)) != 0 && (*(void *)(v8 + 96) & 0x300000000000) == 0x200000000000)
    {
      ++*a3;
      BOOL v4 = 1;
    }
    else
    {
      BOOL v4 = 0;
    }
    ++*a2;
    __int16 v9 = *(uint64_t **)(v7 + 128);
    if (v9)
    {
      this = *v9;
      if (*v9) {
        this = (*(uint64_t (**)(uint64_t, int *, int *, BOOL))(*(void *)this + 240))(this, a2, a3, v4);
      }
    }
    uint64_t v10 = *(void *)(v7 + 104);
    if ((*(unsigned char *)(v7 + 13) & 0x20) == 0) {
      break;
    }
    uint64_t v7 = *(void *)(v7 + 104);
    if (!v10) {
      return this;
    }
  }
  if (v10 && *(_DWORD *)(v10 + 16))
  {
    unint64_t v11 = 0;
    do
      this = CA::Render::Layer::count_layers(*(CA::Render::Layer **)(v10 + 24 + 8 * v11++), a2, a3, v4);
    while (v11 < *(unsigned int *)(v10 + 16));
  }
  return this;
}

void *CA::OGL::GlyphCache::reallocate(CA::OGL::GlyphCache *this)
{
  if (*((void *)this + 1)) {
    (*(void (**)(void))(**(void **)this + 832))();
  }
  *((void *)this + 1) = (*(uint64_t (**)(void, void, uint64_t))(**(void **)this + 824))(*(void *)this, *((void *)this + 2), 16);
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;

  return std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::clear((void *)this + 5);
}

uint64_t CA::OGL::GlyphCache::flush(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 1;
  }
  uint64_t v6 = a2;
  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a1 + 824))(*a1, 24 * a2, 16);
  if (!result) {
    return result;
  }
  uint64_t v9 = result;
  uint64_t v10 = 0;
  uint64_t v11 = *(void *)result;
  long long v12 = (_DWORD *)(a4 + 4);
  do
  {
    long long v13 = *(_DWORD **)a3;
    if (*(_DWORD *)(*(void *)a3 + 20) && v13[6])
    {
      uint64_t v14 = v10 + 1;
      uint64_t v15 = v11 + 24 * v10;
      *(float *)&uint64_t v16 = (float)(v13[3] + *(v12 - 1));
      *(_DWORD *)uint64_t v15 = v16;
      *((float *)&v16 + 1) = (float)(v13[4] + *v12);
      *(void *)uint64_t v15 = v16;
      *(float *)&uint64_t v16 = (float)v13[5];
      *(_DWORD *)(v15 + 8) = v16;
      *((float *)&v16 + 1) = (float)v13[6];
      *(void *)(v15 + 8) = v16;
      *(float *)(v15 + 16) = (float)*((unsigned int *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)(a1 + 5), v13[9], v13 + 9)+ 5);
      *(float *)(v15 + 20) = (float)v13[5];
      uint64_t v10 = v14;
    }
    v12 += 2;
    a3 += 8;
    --v6;
  }
  while (v6);
  if (v10)
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)*a1 + 840))(*a1, v9, 24 * v10, 0);
    unint64_t v18 = a1[3];
    unint64_t v17 = a1[4];
    if (v18 > v17)
    {
      (*(void (**)(void, void, unint64_t))(*(void *)*a1 + 840))(*a1, a1[1], v18 - v17);
      a1[4] = a1[3];
    }
    *(unsigned char *)(*(void *)(*a1 + 16) + 16) = 93;
    uint64_t v19 = *a1;
    unint64_t v20 = *(void *)(*(void *)(*a1 + 16) + 8);
    int v21 = (*(unsigned __int16 *)(*a1 + 832) >> 12) & 7;
    unint64_t v22 = HIWORD(v20);
    if (v21 != 2)
    {
      if (v21 != 1) {
        goto LABEL_15;
      }
      unint64_t v20 = v20 & 0xFFFFFFFFFFFF0000 | v22;
    }
    unint64_t v20 = v20 & 0xFFFF00000000FFFFLL | (v22 << 16) | (v22 << 32);
LABEL_15:
    float32x4_t v25 = vmulq_f32(vcvtq_f32_f16((float16x4_t)v20), (float32x4_t)vdupq_n_s32(0x3B808081u));
    (*(void (**)(uint64_t, void, uint64_t, uint64_t, float32x4_t *))(*(void *)v19 + 1000))(v19, 0, 4, 1, &v25);
    long long v24 = 0u;
    long long v28 = 0u;
    uint64_t v23 = *(void *)(*(void *)(*a1 + 248) + 8);
    v26[0] = *a1;
    v26[1] = v23;
    long long v27 = 0u;
    double v26[2] = 0;
    WORD4(v27) = 0;
    CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)v26);
    while (CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)v26, (int32x2_t *)&v24))(*(void (**)(void, uint64_t, uint64_t, void))(*(void *)*a1 + 368))(*a1, v10, v9, a1[1]);
  }
  (*(void (**)(void, uint64_t))(*(void *)*a1 + 832))(*a1, v9);
  return 1;
}

uint64_t CA::OGL::GlyphCache::emit_glyphs(CA::OGL::GlyphCache *this, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = this;
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = (void *)*((void *)this + 1);
  if (!v8)
  {
    CA::OGL::GlyphCache::reallocate(this);
    uint64_t v8 = (void *)*((void *)v7 + 1);
    if (!v8) {
      return 0;
    }
  }
  if (a2)
  {
    unint64_t v9 = 0;
    unsigned int v10 = 1;
    do
    {
      uint64_t v11 = *(_DWORD **)(a3 + 8 * v9);
      int v13 = v11[5];
      int v12 = v11[6];
      if (v13) {
        BOOL v14 = v12 == 0;
      }
      else {
        BOOL v14 = 1;
      }
      if (!v14 && (*((void *)v7 + 2) < (unint64_t)(v13 * v12) || v11[7] != 8)) {
        return 0;
      }
      unint64_t v9 = v10++;
    }
    while (v9 < a2);
    uint64_t v15 = 0;
    uint64_t v30 = a4;
    uint64_t v31 = 0;
    int v33 = (void *)((char *)v7 + 40);
    uint64_t v29 = v7;
    while (1)
    {
      uint64_t v16 = *(unsigned int **)(a3 + 8 * v15);
      size_t v17 = v16[5];
      if (!v17) {
        goto LABEL_24;
      }
      unsigned int v18 = v16[6];
      if (!v18) {
        goto LABEL_24;
      }
      unsigned int v34 = v16[9];
      unsigned int v19 = v34;
      if (std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v33, v34))
      {
        goto LABEL_24;
      }
      uint64_t v20 = v17 * v18;
      int v21 = v7;
      uint64_t v22 = *((void *)v7 + 3);
      uint64_t v32 = v20;
      if ((unint64_t)(v22 + v20) <= v8[1]) {
        goto LABEL_20;
      }
      uint64_t result = CA::OGL::GlyphCache::flush(v21, v15 - v31, a3 + 8 * v31, a4 + 8 * v31);
      if (!result) {
        return result;
      }
      CA::OGL::GlyphCache::reallocate(v21);
      uint64_t v22 = *((void *)v21 + 3);
      if (v16[6]) {
        break;
      }
      uint64_t v31 = v15;
LABEL_23:
      *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v33, v19, &v34)+ 5) = v22;
      unint64_t v28 = *((void *)v21 + 3) + v32;
      *((void *)v21 + 3) = v28;
      uint64_t v8 = (void *)*((void *)v21 + 1);
      uint64_t v7 = v21;
      if (v28 > v8[1]) {
        __assert_rtn("emit_glyphs", "ogl-glyph-cache.cpp", 177, "_buffer_end <= _buffer->size");
      }
LABEL_24:
      if (++v15 == a2) {
        return CA::OGL::GlyphCache::flush(v7, a2 - v31, a3 + 8 * v31, a4 + 8 * v31);
      }
    }
    uint64_t v8 = (void *)*((void *)v21 + 1);
    size_t v17 = v16[5];
    uint64_t v31 = v15;
LABEL_20:
    uint64_t v24 = v16[8];
    unsigned int v25 = 0;
    int v26 = (char *)(*v8 + v22);
    long long v27 = (char *)(v16 + 10);
    do
    {
      memcpy(v26, v27, v17);
      v27 += v24;
      v26 += v17;
      ++v25;
    }
    while (v25 < v16[6]);
    int v21 = v29;
    a4 = v30;
    uint64_t v22 = *((void *)v29 + 3);
    goto LABEL_23;
  }
  uint64_t v31 = 0;
  return CA::OGL::GlyphCache::flush(v7, a2 - v31, a3 + 8 * v31, a4 + 8 * v31);
}

void CA::Render::Filter::show(CA::Render::Filter *this, int a2, char a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  BOOL v6 = x_log_hook_p();
  if (a3)
  {
    if (v6)
    {
      [(__CFString *)CAAtomGetString(*((_DWORD *)this + 6)) cStringUsingEncoding:4];
LABEL_21:
      x_log_();
      return;
    }
    uint64_t v17 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = [(__CFString *)CAAtomGetString(*((_DWORD *)this + 6)) cStringUsingEncoding:4];
      *(_DWORD *)buf = 136315138;
      uint64_t v20 = v18;
      BOOL v14 = "%s;";
      uint64_t v15 = v17;
      uint32_t v16 = 12;
      goto LABEL_24;
    }
  }
  else
  {
    if (v6)
    {
      [(__CFString *)CAAtomGetString(*((_DWORD *)this + 6)) cStringUsingEncoding:4];
      x_log_();
    }
    else
    {
      uint64_t v7 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = [(__CFString *)CAAtomGetString(*((_DWORD *)this + 6)) cStringUsingEncoding:4];
        *(_DWORD *)buf = 136315138;
        uint64_t v20 = v8;
        _os_log_impl(&dword_184668000, v7, OS_LOG_TYPE_DEFAULT, "(filter %s", buf, 0xCu);
      }
    }
    if ((*((unsigned char *)this + 13) & 1) == 0)
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        unint64_t v9 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184668000, v9, OS_LOG_TYPE_DEFAULT, "(enabled false)", buf, 2u);
        }
      }
    }
    if (*((void *)this + 5))
    {
      unsigned int v10 = (CA::Render *)(a2 + 1);
      CA::Render::show_newline(v10);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        uint64_t v11 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184668000, v11, OS_LOG_TYPE_DEFAULT, "(inputs ", buf, 2u);
        }
      }
      CA::Render::show_object(*((CA::Render **)this + 5), v10);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        int v12 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184668000, v12, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
        }
      }
    }
    if (x_log_hook_p()) {
      goto LABEL_21;
    }
    uint64_t v13 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      BOOL v14 = ")";
      uint64_t v15 = v13;
      uint32_t v16 = 2;
LABEL_24:
      _os_log_impl(&dword_184668000, v15, OS_LOG_TYPE_DEFAULT, v14, buf, v16);
    }
  }
}

CA::Render::Filter *CA::Render::Filter::copy_with_inputs(CA::Render::Filter *this, atomic_uint *a2)
{
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  uint64_t result = (CA::Render::Filter *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x38uLL, 0x743898A5uLL);
  if (result) {
    uint64_t result = CA::Render::Filter::Filter(result, *((_DWORD *)this + 6), *((atomic_uint **)this + 4), a2);
  }
  *((_DWORD *)result + 3) |= *((_DWORD *)this + 3) & 0xFFFFFD00;
  return result;
}

void *non-virtual thunk to'CA::WindowServer::AccelServer::delete_fence(void *this, uint64_t a2)
{
  if (a2)
  {
    this = (void *)this[1];
    if (this) {
      return (void *)(*(uint64_t (**)(void))(*this + 272))();
    }
  }
  return this;
}

uint64_t non-virtual thunk to'CA::WindowServer::AccelServer::test_fence(CA::WindowServer::AccelServer *this, uint64_t a2)
{
  if (a2 && (uint64_t v2 = *((void *)this + 1)) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 264))();
  }
  else {
    return 0;
  }
}

uint64_t non-virtual thunk to'CA::WindowServer::AccelServer::set_fence(CA::WindowServer::AccelServer *this)
{
  uint64_t result = *((void *)this + 1);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 256))();
  }
  return result;
}

uint64_t non-virtual thunk to'CA::WindowServer::AccelServer::supports_fences(CA::WindowServer::AccelServer *this)
{
  uint64_t result = *((void *)this + 1);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 248))();
  }
  return result;
}

uint64_t non-virtual thunk to'CA::WindowServer::AccelServer::flush_command_stream(CA::WindowServer::AccelServer *this)
{
  uint64_t result = *((void *)this + 1);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 408))(result, 1);
  }
  return result;
}

void *CA::WindowServer::AccelServer::delete_fence(void *this, uint64_t a2)
{
  if (a2)
  {
    this = (void *)this[128];
    if (this) {
      return (void *)(*(uint64_t (**)(void))(*this + 272))();
    }
  }
  return this;
}

uint64_t CA::WindowServer::AccelServer::test_fence(CA::WindowServer::AccelServer *this, uint64_t a2)
{
  if (a2 && (uint64_t v2 = *((void *)this + 128)) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 264))();
  }
  else {
    return 0;
  }
}

uint64_t CA::WindowServer::AccelServer::set_fence(CA::WindowServer::AccelServer *this)
{
  uint64_t result = *((void *)this + 128);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 256))();
  }
  return result;
}

uint64_t CA::WindowServer::AccelServer::supports_fences(CA::WindowServer::AccelServer *this)
{
  uint64_t result = *((void *)this + 128);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 248))();
  }
  return result;
}

uint64_t CA::WindowServer::AccelServer::flush_command_stream(CA::WindowServer::AccelServer *this)
{
  uint64_t result = *((void *)this + 128);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 408))(result, 1);
  }
  return result;
}

uint64_t CA::WindowServer::AccelServer::purge_resources(uint64_t this)
{
  unsigned int v1 = *(void **)(this + 1032);
  if (v1) {
    return (*(uint64_t (**)(void, uint64_t))(*(void *)*v1 + 224))(*v1, 1);
  }
  return this;
}

uint64_t CA::WindowServer::AccelServer::release_resources(uint64_t this)
{
  unsigned int v1 = *(void **)(this + 1032);
  if (v1) {
    return (*(uint64_t (**)(void, void))(*(void *)*v1 + 224))(*v1, 0);
  }
  return this;
}

CA::Shape **CA::WindowServer::AccelServer::render_surface(CA::WindowServer::Display **this, CA::Render::Update *a2, CA::WindowServer::Surface *a3, const CA::Bounds *a4, unsigned int a5, int a6)
{
  if ((*(uint64_t (**)(CA::WindowServer::Surface *))(*(void *)a3 + 160))(a3)
    && (int v12 = (CA::Shape **)(*((uint64_t (**)(CA::WindowServer::Display **))*this + 49))(this)) != 0)
  {
    uint64_t v13 = (CA::OGL::Renderer *)v12;
    uint64_t v14 = CA::WindowServer::Display::render_surface(this[12], v12, a3, a2, a4, a5, a6);
    CA::OGL::Renderer::collect(v13, a2, *((double *)a2 + 9));
    return (CA::Shape **)v14;
  }
  else
  {
    return CA::WindowServer::Server::render_surface(this, a2, a3, a4, a5, a6);
  }
}

void CA::WindowServer::IOMFBServer::adjust_display_timings(CA::WindowServer::IOMFBServer *this, uint64_t a2)
{
  uint64_t v3 = *((void *)this + 12);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 26048));
  CA::WindowServer::IOMFBDisplay::initialize_timings((CA::WindowServer::IOMFBDisplay *)v3);
  BOOL v4 = *(unsigned __int8 **)(v3 + 26064);
  if (v4)
  {
    unsigned __int8 v5 = atomic_load(v4);
    if (a2)
    {
      if ((v5 & 1) != 0 && !*(void *)(v3 + 26112))
      {
        uint64_t v6 = *(void *)(v3 + 26096) + a2;
        *(void *)(v3 + 26096) = v6;
        *(void *)(v3 + 26112) = 8;
        unint64_t v7 = atomic_load((unint64_t *)(*(void *)(v3 + 26064) + 48));
        uint64_t v8 = v6 - v7;
        unint64_t v9 = atomic_load((unint64_t *)(*(void *)(v3 + 26064) + 56));
        unint64_t v10 = v8 + v9;
        uint64_t v11 = *(void *)(v3 + 26064);
        unsigned int add = atomic_fetch_add((atomic_uint *volatile)(v11 + 16), 1u);
        atomic_store(*(void *)(v3 + 26096), (unint64_t *)(v11 + 48));
        atomic_store(v10, (unint64_t *)(v11 + 56));
        atomic_store(*(void *)(v3 + 26104), (unint64_t *)(v11 + 64));
        atomic_store(add + 2, (unsigned int *)(v11 + 16));
        __dmb(0xBu);
      }
    }
  }

  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 26048));
}

uint64_t CA::WindowServer::Server::copy_display_timings(CA::WindowServer::Server *this, CA::WindowServer::Server *a2)
{
  return 0;
}

uint64_t CA::WindowServer::Server::set_digital_modes(CA::WindowServer::Server *this, const __CFArray *a2)
{
  return 0;
}

uint64_t CA::WindowServer::Server::set_digital_modes(CA::WindowServer::Server *this, const __CFArray *a2, const __CFArray *a3)
{
  return 0;
}

uint64_t CA::WindowServer::IOMFBServer::service_object(CA::WindowServer::IOMFBServer *this)
{
  return *(unsigned int *)(*((void *)this + 12) + 25560);
}

void CA::WindowServer::IOMFBServer::update_brightness_capabilities(CA::WindowServer::IOMFBDisplay **this, const __CFDictionary *a2)
{
}

uint64_t CA::WindowServer::IOMFBServer::copy_brightness_capabilities(CA::WindowServer::IOMFBServer *this)
{
  uint64_t v1 = *((void *)this + 12);
  uint64_t v2 = (os_unfair_lock_s *)(v1 + 27248);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 27248));
  uint64_t v3 = *(const void **)(v1 + 27256);
  if (v3)
  {
    CFRetain(v3);
    uint64_t v4 = *(void *)(v1 + 27256);
  }
  else
  {
    uint64_t v4 = 0;
  }
  os_unfair_lock_unlock(v2);
  return v4;
}

uint64_t CA::WindowServer::IOMFBServer::cursor_enabled(CA::WindowServer::IOMFBServer *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 12) + 1728))();
}

uint64_t CA::WindowServer::IOMFBServer::cursor_hidden(CA::WindowServer::IOMFBServer *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 12) + 1712))();
}

uint64_t CA::WindowServer::IOMFBServer::cursor_dictionary(CA::WindowServer::IOMFBServer *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 12) + 1688))();
}

uint64_t CA::WindowServer::IOMFBServer::cursor_position(CA::WindowServer::IOMFBServer *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 12) + 1672))();
}

void CA::WindowServer::AccelServer::~AccelServer(CA::WindowServer::AccelServer *this)
{
  CA::WindowServer::AccelServer::~AccelServer(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  CA::OGL::Renderer *v2;
  malloc_zone_t *malloc_zone;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_1ED022590;
  *((void *)this + 127) = &unk_1ED0227C0;
  uint64_t v2 = (CA::OGL::Renderer *)*((void *)this + 129);
  if (v2)
  {
    *(void *)(*((void *)this + 12) + 312) = 0;
    CA::OGL::Renderer::~Renderer(v2);
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(malloc_zone, v2);
    *((void *)this + 129) = 0;
    uint64_t v4 = *((void *)this + 128);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 224))(v4, 1);
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *((void *)this + 128) = 0;
  }
  *(void *)(*((void *)this + 12) + 26496) = 0;

  CA::WindowServer::IOMFBServer::~IOMFBServer(this);
}

CA::WindowServer::AccelServer *CA::WindowServer::AccelServer::AccelServer(CA::WindowServer::AccelServer *this, CA::WindowServer::IOMFBDisplay *a2, const __CFString *a3)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v5 = CA::WindowServer::Server::Server(this, a2, a3);
  *(void *)unsigned __int8 v5 = &unk_1ED0227F8;
  *(_OWORD *)((char *)v5 + 824) = 0u;
  *((_DWORD *)v5 + 210) = 1065353216;
  *((void *)v5 + 108) = 0x7FF0000000000000;
  *(_OWORD *)((char *)v5 + 872) = 0u;
  *(_OWORD *)((char *)v5 + 888) = 0u;
  *(_OWORD *)((char *)v5 + 904) = 0u;
  *(_OWORD *)((char *)v5 + 920) = 0u;
  *((void *)v5 + 118) = 0x3FD0000000000000;
  *((_OWORD *)v5 + 62) = 0u;
  *((_DWORD *)v5 + 252) = 0;
  *((unsigned char *)v5 + 1014) |= 1u;
  if (CADeviceUseVBL::once[0] != -1) {
    dispatch_once(CADeviceUseVBL::once, &__block_literal_global_17);
  }
  *((unsigned char *)this + 1014) = *((unsigned char *)this + 1014) & 0xF9 | (2 * CADeviceUseVBL::use_vbl);
  x_thread_init_mutex((pthread_mutex_t *)((char *)this + 544), 1);
  pthread_mutex_init((pthread_mutex_t *)((char *)this + 608), 0);
  pthread_cond_init((pthread_cond_t *)this + 14, 0);
  pthread_cond_init((pthread_cond_t *)this + 15, 0);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 544));
  CA::WindowServer::IOMFBServer::add_runloop_source(this, 0, 0);
  if (!*((void *)this + 99))
  {
    uint64_t v17 = *((void *)this + 12);
    if (*(void *)(v17 + 25568))
    {
      if (*(unsigned char *)(v17 + 28138))
      {
        RunLoopSource = (__CFRunLoopSource *)IOMobileFramebufferGetRunLoopSource();
        *((void *)this + 99) = RunLoopSource;
        if (RunLoopSource)
        {
          CA::WindowServer::IOMFBServer::add_runloop_source(this, RunLoopSource, 0);
          IOMobileFramebufferEnableHotPlugDetectNotifications();
        }
      }
    }
  }
  if (!*((void *)this + 106))
  {
    if (*(void *)(*((void *)this + 12) + 25568))
    {
      uint64_t v19 = IOMobileFramebufferSupportedFrameInfo();
      if (v19)
      {
        uint64_t v20 = (const char **)v19;
        uint64_t v21 = 0;
        do
          uint64_t v22 = v21;
        while (*(void *)(v19 + 8 * v21++));
        uint64_t v24 = (__CFRunLoopSource *)IOMobileFramebufferGetRunLoopSource();
        *((void *)this + 106) = v24;
        if (v24)
        {
          CA::WindowServer::IOMFBServer::add_runloop_source(this, v24, 1);
          char v25 = IOMobileFramebufferFrameInfo() == 0;
          CA::WindowServer::IOMFBDisplay::set_frame_info_enabled(*((CA::WindowServer::IOMFBDisplay **)this + 12), v25);
          CA::WindowServer::IOMFBServer::enable_frame_info_tag_list(this, (const char **)off_1E527EFC8, 9, v20, v22);
          if (CADeviceSupportsRTPLC::once[0] != -1) {
            dispatch_once(CADeviceSupportsRTPLC::once, &__block_literal_global_301);
          }
          if (CADeviceSupportsRTPLC::rtplc)
          {
            int v26 = off_1E527F010;
            long long v27 = this;
            uint64_t v28 = 5;
LABEL_70:
            CA::WindowServer::IOMFBServer::enable_frame_info_tag_list(v27, (const char **)v26, v28, v20, v22);
            goto LABEL_5;
          }
          if (CADeviceSupportsBandwidthStatistics::once[0] != -1) {
            dispatch_once(CADeviceSupportsBandwidthStatistics::once, &__block_literal_global_328);
          }
          if (CADeviceSupportsBandwidthStatistics::bw_stats)
          {
            int v26 = off_1E527F038;
            long long v27 = this;
            uint64_t v28 = 4;
            goto LABEL_70;
          }
        }
      }
    }
  }
LABEL_5:
  if (CADeviceSupportsBrightnessTransactions::once[0] != -1) {
    dispatch_once(CADeviceSupportsBrightnessTransactions::once, &__block_literal_global_110);
  }
  uint64_t v6 = (char *)a2 + 28138;
  uint64_t v7 = *((void *)this + 12);
  BOOL v8 = (*(_WORD *)(v7 + 656) & 0x1C00) != 0
    || CADeviceSupportsBrightnessTransactions::supports_brightness_transaction == 0;
  char v9 = !v8;
  *(unsigned char *)(v7 + 28209) = v9;
  if (!v8) {
    IOMobileFramebufferSetBrightnessControlCallback();
  }
  (*(void (**)(CA::WindowServer::AccelServer *, void))(*(void *)this + 320))(this, 0);
  if ((*(unsigned int (**)(void))(**((void **)this + 12) + 216))(*((void *)this + 12)))
  {
    CA::WindowServer::IOMFBServer::add_vsync_source(this, v10);
    CA::WindowServer::IOMFBServer::add_power_log_timer((CFRunLoopRef *)this);
  }
  if (*v6)
  {
    BOOL v11 = 0;
  }
  else
  {
    if ((*((_WORD *)a2 + 328) & 0x1C00) == 0x1000) {
      goto LABEL_54;
    }
    if (CADeviceNeedsDisplayWorkarounds::once[0] != -1) {
      dispatch_once(CADeviceNeedsDisplayWorkarounds::once, &__block_literal_global_73);
    }
    BOOL v11 = CADeviceNeedsDisplayWorkarounds::needs_workarounds != 0;
    if (!*v6)
    {
      BOOL v12 = 0;
      if (CADeviceNeedsDisplayWorkarounds::needs_workarounds) {
        goto LABEL_21;
      }
      goto LABEL_20;
    }
  }
  BOOL v12 = *((unsigned char *)a2 + 28154) == 0;
  if (v11) {
    goto LABEL_21;
  }
LABEL_20:
  if (!v12) {
    goto LABEL_54;
  }
LABEL_21:
  CFMutableDataRef Mutable = CFArrayCreateMutable(0, 2, MEMORY[0x1E4F1D510]);
  if (!v11)
  {
    if (!v12) {
      goto LABEL_50;
    }
    CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    goto LABEL_47;
  }
  int v36 = 5;
  int valuePtr = 65280;
  int v35 = 1414743620;
  *(_OWORD *)keys = xmmword_1E527F188;
  uint64_t v39 = (void (*)(uint64_t))@"LocationID";
  CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v44 = CFNumberCreate(v14, kCFNumberSInt32Type, &v36);
  CFNumberRef v45 = CFNumberCreate(v14, kCFNumberSInt32Type, &v35);
  CFDictionaryRef v15 = CFDictionaryCreate(0, (const void **)keys, (const void **)&values, 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  for (uint64_t i = 0; i != 24; i += 8)
    CFRelease(*(void **)((char *)&values + i));
  CFArrayAppendValue(Mutable, v15);
  CFRelease(v15);
  if (v12)
  {
LABEL_47:
    int v36 = 138;
    int valuePtr = 32;
    keys[0] = @"PrimaryUsagePage";
    keys[1] = @"PrimaryUsage";
    values = CFNumberCreate(v14, kCFNumberSInt32Type, &valuePtr);
    CFNumberRef v44 = CFNumberCreate(v14, kCFNumberSInt32Type, &v36);
    CFDictionaryRef v29 = CFDictionaryCreate(0, (const void **)keys, (const void **)&values, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    for (uint64_t j = 0; j != 16; j += 8)
      CFRelease(*(void **)((char *)&values + j));
    CFArrayAppendValue(Mutable, v29);
    CFRelease(v29);
  }
LABEL_50:
  if (Mutable)
  {
    if (CFArrayGetCount(Mutable) < 1)
    {
      CFRelease(Mutable);
    }
    else
    {
      CA::WindowServer::IOMFBServer::add_runloop_source(this, 0, 0);
      uint64_t v31 = (__CFRunLoop *)*((void *)this + 96);
      uint64_t v32 = (const void *)*MEMORY[0x1E4F1D418];
      keys[0] = (void *)MEMORY[0x1E4F143A8];
      keys[1] = (void *)0x40000000;
      uint64_t v39 = ___ZN2CA12WindowServer11IOMFBServerC2EPNS0_12IOMFBDisplayEPK10__CFString_block_invoke;
      unsigned int v40 = &__block_descriptor_tmp_107;
      long long v41 = this;
      uint64_t v42 = Mutable;
      CFRunLoopPerformBlock(v31, v32, keys);
    }
  }
LABEL_54:
  if (!*v6 && (*((_WORD *)a2 + 328) & 0x1C00) != 0x1000)
  {
    if ((*(unsigned int (**)(void))(**((void **)this + 12) + 216))(*((void *)this + 12))) {
      CA::WindowServer::IOMFBServer::register_libedr_callbacks(this);
    }
    CA::Render::add_observer(0x19u, 0, (uint64_t)CA::WindowServer::IOMFBServer::flush_irdc, (uint64_t)this, 0);
  }
  CA::Render::add_observer(0x2Au, 0, (uint64_t)CA::WindowServer::IOMFBServer::post_power_log, (uint64_t)this, 0);
  CA::Render::add_observer(0x2Bu, 0, (uint64_t)CA::WindowServer::IOMFBServer::post_max_rate_power_log, (uint64_t)this, 0);
  CA::Render::add_observer(0x2Eu, 0, (uint64_t)CA::WindowServer::IOMFBServer::post_render_statistics_power_log, (uint64_t)this, 0);
  CA::Render::add_observer(0x35u, 0, (uint64_t)CA::WindowServer::IOMFBServer::post_brightness_hotplug, (uint64_t)this, 0);
  CA::Render::add_observer(0x36u, 0, (uint64_t)CA::WindowServer::IOMFBServer::post_power_notification, (uint64_t)this, 0);
  CA::Render::add_observer(0x3Du, 0, (uint64_t)CA::WindowServer::IOMFBServer::post_flipbook_state_notification, (uint64_t)this, 0);
  CA::Render::add_observer(0x3Eu, 0, (uint64_t)CA::WindowServer::IOMFBServer::check_display_blanked, (uint64_t)this, 0);
  if ((*(_DWORD *)(*((void *)this + 12) + 624) & 0x10) != 0)
  {
    CA::Render::add_observer(0x37u, 0, (uint64_t)CA::WindowServer::IOMFBServer::register_frame_interval_range, (uint64_t)this, 0);
    CA::Render::add_observer(0x38u, 0, (uint64_t)CA::WindowServer::IOMFBServer::register_frame_interval_reasons, (uint64_t)this, 0);
    CA::Render::add_observer(0x39u, 0, (uint64_t)CA::WindowServer::IOMFBServer::request_frame_phase_shift, (uint64_t)this, 0);
    CA::Render::add_observer(0x2Cu, 0, (uint64_t)CA::WindowServer::IOMFBServer::post_frame_rate_power_log, (uint64_t)this, 0);
    CA::Render::add_observer(0x47u, 0, (uint64_t)CA::WindowServer::IOMFBServer::get_display_debug_properties, (uint64_t)this, 0);
  }
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 544));
  *(void *)this = &unk_1ED022590;
  *((void *)this + 127) = &unk_1ED0227C0;
  if ((CA::WindowServer::AccelServer::AccelServer(CA::WindowServer::IOMFBDisplay *,__CFString const*)::initialized & 1) == 0)
  {
    getenv("CA_ENABLE_OGL");
    CA::WindowServer::AccelServer::AccelServer(CA::WindowServer::IOMFBDisplay *,__CFString const*)::initialized = 1;
  }
  uint64_t v33 = *((void *)this + 12);
  *(void *)(v33 + 26496) = (char *)this + 1016;
  if ((*(_WORD *)(v33 + 656) & 0x1C00) == 0) {
    CA::WindowServer::AccelServer::renderer(this);
  }
  return this;
}

void CA::Render::KeyValue::show(CA::Render::KeyValue *this, int a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if ((a3 & 1) == 0)
  {
    if (x_log_hook_p())
    {
      [(__CFString *)CAAtomGetString(*((_DWORD *)this + 4)) cStringUsingEncoding:4];
      x_log_();
    }
    else
    {
      uint64_t v6 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = [(__CFString *)CAAtomGetString(*((_DWORD *)this + 4)) cStringUsingEncoding:4];
        *(_DWORD *)buf = 136315138;
        uint64_t v12 = v7;
        _os_log_impl(&dword_184668000, v6, OS_LOG_TYPE_DEFAULT, "(%s ", buf, 0xCu);
      }
    }
    uint64_t v8 = *((void *)this + 3);
    if (v8)
    {
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)v8 + 40))(v8, (a2 + 1), a3);
    }
    else if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      char v9 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184668000, v9, OS_LOG_TYPE_DEFAULT, "nil", buf, 2u);
      }
    }
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      unint64_t v10 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184668000, v10, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
      }
    }
  }
}

double CA::Render::KeyValueArray::get_vec2_key(uint64_t a1, int a2, uint64_t a3)
{
  unsigned int named_object = CA::Render::KeyValueArray::find_named_object_(a1, a2);
  if ((named_object & 0x80000000) == 0)
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 8 * named_object + 24) + 24);
    if (v6)
    {
      if (*(unsigned char *)(v6 + 12) == 56 && *(_DWORD *)(v6 + 16) >= 2u) {
        a3 = v6 + 24;
      }
    }
  }
  return *(double *)a3;
}

uint64_t __CAIOSurfaceGetTypeID_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  CAIOSurfaceGetTypeID::type = result;
  return result;
}

CFStringRef caIOSurfaceCopyDebugDescription(CFStringRef result)
{
  if (result)
  {
    CFStringRef v1 = result;
    CFAllocatorRef v2 = CFGetAllocator(result);
    return CFStringCreateWithFormat(v2, 0, @"<CAIOSurface %p", v1);
  }
  return result;
}

CFStringRef caIOSurfaceCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  CFAllocatorRef v4 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v4, a2, @"<CAIOSurface %p>", a1);
}

uint64_t caIOSurfaceFinalize(uint64_t result)
{
  if (result)
  {
    uint64_t result = *(void *)(result + 16);
    if (atomic_fetch_add((atomic_uint *volatile)(result + 8), 0xFFFFFFFF) == 1) {
      return (*(uint64_t (**)(void))(*(void *)result + 16))();
    }
  }
  return result;
}

uint64_t CAIOSurfaceGetTypeID()
{
  if (CAIOSurfaceGetTypeID::once[0] != -1) {
    dispatch_once(CAIOSurfaceGetTypeID::once, &__block_literal_global_2614);
  }
  return CAIOSurfaceGetTypeID::type;
}

uint64_t CA::OGL::PingPongState::replicate_edges(CA::OGL::PingPongState *this, float a2, float a3, float a4, float a5, float a6, float a7, float a8, float a9, float a10)
{
  *((void *)this + 16) = 0;
  CFDictionaryRef v15 = (char *)this + 834;
  *((void *)this + 12) = (char *)this + 834;
  *(_OWORD *)((char *)this + 104) = xmmword_184997E70;
  if (*((void *)this + 17) <= 0x1FuLL)
  {
    *((_WORD *)this + 416) |= 0x20u;
    float v16 = a7;
    float v17 = a8;
    CA::OGL::Context::array_flush((uint64_t)this);
    a8 = v17;
    a7 = v16;
    *((void *)this + 16) = 0;
    *((void *)this + 12) = v15;
    *(_OWORD *)((char *)this + 104) = xmmword_184997E70;
  }
  float v18 = a8 + 0.5;
  float v19 = a7 + 0.5;
  CA::OGL::Context::array_rect(this, a3 - a2, a4, a3, a6);
  uint64_t v20 = *((void *)this + 15) + 48 * *((void *)this + 16);
  *(float *)(v20 - 176) = v19;
  *(float *)(v20 - 172) = v18;
  *(float *)(v20 - 128) = v19;
  *(float *)(v20 - 124) = v18;
  *(float *)(v20 - 80) = v19;
  *(float *)(v20 - 76) = a10 + -0.5;
  *(float *)(v20 - 32) = v19;
  *(float *)(v20 - 28) = a10 + -0.5;
  CA::OGL::Context::array_rect(this, a5, a4, a5 + a2, a6);
  uint64_t v21 = *((void *)this + 15) + 48 * *((void *)this + 16);
  *(float *)(v21 - 176) = a9 + -0.5;
  *(float *)(v21 - 172) = v18;
  *(float *)(v21 - 128) = a9 + -0.5;
  *(float *)(v21 - 124) = v18;
  *(float *)(v21 - 80) = a9 + -0.5;
  *(float *)(v21 - 76) = a10 + -0.5;
  *(float *)(v21 - 32) = a9 + -0.5;
  *(float *)(v21 - 28) = a10 + -0.5;
  CA::OGL::Context::array_rect(this, a3, a4 - a2, a5, a4);
  uint64_t v22 = *((void *)this + 15) + 48 * *((void *)this + 16);
  *(float *)(v22 - 176) = v19;
  *(float *)(v22 - 172) = v18;
  *(float *)(v22 - 128) = a9 + -0.5;
  *(float *)(v22 - 124) = v18;
  *(float *)(v22 - 80) = a9 + -0.5;
  *(float *)(v22 - 76) = v18;
  *(float *)(v22 - 32) = v19;
  *(float *)(v22 - 28) = v18;
  CA::OGL::Context::array_rect(this, a3, a6, a5, a6 + a2);
  uint64_t v23 = *((void *)this + 15) + 48 * *((void *)this + 16);
  *(float *)(v23 - 176) = v19;
  *(float *)(v23 - 172) = a10 + -0.5;
  *(float *)(v23 - 128) = a9 + -0.5;
  *(float *)(v23 - 124) = a10 + -0.5;
  *(float *)(v23 - 80) = a9 + -0.5;
  *(float *)(v23 - 76) = a10 + -0.5;
  *(float *)(v23 - 32) = v19;
  *(float *)(v23 - 28) = a10 + -0.5;
  CA::OGL::Context::array_rect(this, a3 - a2, a4 - a2, a3, a4);
  uint64_t v24 = *((void *)this + 15) + 48 * *((void *)this + 16);
  *(float *)(v24 - 176) = v19;
  *(float *)(v24 - 172) = v18;
  *(float *)(v24 - 128) = v19;
  *(float *)(v24 - 124) = v18;
  *(float *)(v24 - 80) = v19;
  *(float *)(v24 - 76) = v18;
  *(float *)(v24 - 32) = v19;
  *(float *)(v24 - 28) = v18;
  CA::OGL::Context::array_rect(this, a5, a4 - a2, a5 + a2, a4);
  uint64_t v25 = *((void *)this + 15) + 48 * *((void *)this + 16);
  *(float *)(v25 - 176) = a9 + -0.5;
  *(float *)(v25 - 172) = v18;
  *(float *)(v25 - 128) = a9 + -0.5;
  *(float *)(v25 - 124) = v18;
  *(float *)(v25 - 80) = a9 + -0.5;
  *(float *)(v25 - 76) = v18;
  *(float *)(v25 - 32) = a9 + -0.5;
  *(float *)(v25 - 28) = v18;
  CA::OGL::Context::array_rect(this, a3 - a2, a6, a3, a6 + a2);
  uint64_t v26 = *((void *)this + 15) + 48 * *((void *)this + 16);
  *(float *)(v26 - 176) = v19;
  *(float *)(v26 - 172) = a10 + -0.5;
  *(float *)(v26 - 128) = v19;
  *(float *)(v26 - 124) = a10 + -0.5;
  *(float *)(v26 - 80) = v19;
  *(float *)(v26 - 76) = a10 + -0.5;
  *(float *)(v26 - 32) = v19;
  *(float *)(v26 - 28) = a10 + -0.5;
  CA::OGL::Context::array_rect(this, a5, a6, a5 + a2, a6 + a2);
  uint64_t v27 = *((void *)this + 15) + 48 * *((void *)this + 16);
  *(float *)(v27 - 176) = a9 + -0.5;
  *(float *)(v27 - 172) = a10 + -0.5;
  *(float *)(v27 - 128) = a9 + -0.5;
  *(float *)(v27 - 124) = a10 + -0.5;
  *(float *)(v27 - 80) = a9 + -0.5;
  *(float *)(v27 - 76) = a10 + -0.5;
  *(float *)(v27 - 32) = a9 + -0.5;
  *(float *)(v27 - 28) = a10 + -0.5;

  return CA::OGL::Context::array_flush((uint64_t)this);
}

uint64_t CA::OGL::BlurState::copy(float32x2_t *this, float a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (uint64_t)*this;
  uint64_t result = CA::OGL::PingPongState::attach_dest(this, 1, (int)a2);
  if (result)
  {
    __int16 v6 = this[4].i16[0];
    int v7 = v6;
    uint64_t v8 = &this[(v6 & 1) + 11];
    if (v7 < 0) {
      uint64_t v8 = this + 1;
    }
    uint64_t v9 = (uint64_t)*v8;
    int v11 = *(_DWORD *)(*(void *)v8 + 36);
    v20[0] = *(_DWORD *)(*(void *)v8 + 32);
    int v10 = v20[0];
    v20[1] = v11;
    CA::OGL::Context::bind_surface((uint64_t)*this, v9, 0, 1u, 1, 0.0);
    uint64_t v19 = 0;
    memset(&v18[2], 0, 32);
    memset(v18, 0, 32);
    uint64_t v12 = *(void *)(v4 + 248);
    *(_OWORD *)((char *)v18 + 8) = *(_OWORD *)(v12 + 8);
    uint64_t v13 = *(void *)(v12 + 32);
    *((void *)&v18[1] + 1) = *(void *)(v12 + 24);
    *(void *)&_OWORD v18[2] = v13;
    *(_OWORD *)((char *)&v18[2] + 8) = *(_OWORD *)(v12 + 40);
    *((void *)&v18[3] + 1) = *(void *)(v12 + 56);
    LOWORD(v13) = *(_WORD *)(v12 + 68);
    LODWORD(v19) = *(_DWORD *)(v12 + 64);
    HIDWORD(v19) = v13 & 0x5FF;
    *((void *)&v18[0] + 1) = &CA::Shape::_infinite_shape;
    *(void *)&v18[0] = CA::OGL::Context::set_gstate(v4, (uint64_t)v18);
    CA::OGL::BlurState::process_edges((CA::OGL::BlurState *)this, a2, 1.0, 1.0, v20);
    *(unsigned char *)(*(void *)(v4 + 16) + 16) = 1;
    *(void *)(v4 + 128) = 0;
    *(void *)(v4 + 96) = v4 + 834;
    *(_OWORD *)(v4 + 104) = xmmword_184997E70;
    uint64_t v17 = 0;
    CA::OGL::PingPongState::render_pass((uint64_t)this, v10, v11, 0, &v17, 1.0, 1.0, 0.0, 0.0);
    CA::OGL::Context::array_flush(v4);
    __int16 v14 = this[4].i16[0];
    int v15 = v14;
    float v16 = (uint64_t *)&this[(v14 & 1) + 11];
    if (v15 < 0) {
      float v16 = (uint64_t *)&this[1];
    }
    CA::OGL::Context::unbind_surface(*this, *v16, 0);
    CA::OGL::Context::pop_surface(*(CA::OGL::Context **)this);
    ++this[4].i16[0];
    *(unsigned char *)(*(void *)(v4 + 16) + 16) = 0;
    return CA::OGL::Context::set_gstate(v4, **(void **)(v4 + 248));
  }
  return result;
}

void CA::OGL::DownsampleState::asg(float32x2_t *this, int a2, float64x2_t *a3, float a4)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  float v8 = this[6].f32[0];
  float v9 = this[6].f32[1];
  float v10 = this[7].f32[0];
  float v11 = this[7].f32[1];
  if (a2)
  {
    this[6].f32[1] = v9 * a4;
    this[7].f32[1] = v11 * a4;
  }
  else
  {
    this[6].f32[0] = v8 * a4;
    this[7].f32[0] = v10 * a4;
  }
  uint64_t v12 = (void *)*this;
  if (a3)
  {
LABEL_28:
    if (fabsf(a4 + -0.75) >= 0.001)
    {
      uint64_t v34 = v12[2];
      if (fabsf(a4 + -0.5) >= 0.001) {
        char v35 = 95;
      }
      else {
        char v35 = 97;
      }
    }
    else
    {
      uint64_t v34 = v12[2];
      char v35 = 96;
    }
    *(unsigned char *)(v34 + 16) = v35;
    __int16 v36 = this[4].i16[0];
    int v37 = v36;
    unsigned int v38 = (uint64_t *)&this[(v36 & 1) + 11];
    if (v37 < 0) {
      unsigned int v38 = (uint64_t *)&this[1];
    }
    int v39 = *(_DWORD *)(*v38 + 32);
    int v40 = *(_DWORD *)(*v38 + 36);
    CA::OGL::Context::bind_surface((uint64_t)*this, *v38, 0, 1u, 1, 0.0);
    float v41 = v8 - (float)v39;
    float v42 = v9 - (float)v40;
    float v43 = v10 - (float)v39;
    float v44 = v11 - (float)v40;
    float v45 = a4 * 3.14159265;
    float v58 = v45;
    float v46 = 1.0;
    if (a2) {
      float v47 = 0.0;
    }
    else {
      float v47 = 1.0;
    }
    if (!a2) {
      float v46 = 0.0;
    }
    *(float *)long long v57 = v47;
    *(float *)&v57[1] = v46;
    (*(void (**)(void *, void, uint64_t, uint64_t, _DWORD *))(*v12 + 1000))(v12, 0, 2, 1, v57);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t, float *))(*v12 + 1000))(v12, 1, 1, 1, &v58);
    if (a3)
    {
      long long v62 = 0u;
      uint64_t v48 = *(void *)(v12[31] + 8);
      v59.i64[0] = (uint64_t)v12;
      v59.i64[1] = v48;
      long long v61 = 0u;
      uint64_t v60 = 0;
      WORD4(v61) = 256;
      CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)&v59);
      v56[0] = 0;
      v56[1] = 0;
      while (CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)&v59, v56))
      {
        CA::OGL::Context::array_quad(v12, a3, a3 + 2, a3 + 4, a3 + 6);
        uint64_t v49 = *(void *)(v12[2] + 8);
        uint64_t v50 = v12[15] + 48 * v12[16];
        *(void *)(v50 - 160) = v49;
        *(void *)(v50 - 112) = v49;
        *(void *)(v50 - 64) = v49;
        *(void *)(v50 - 16) = v49;
        uint64_t v51 = v12[15] + 48 * v12[16];
        *(float *)(v51 - 176) = v41;
        *(float *)(v51 - 172) = v42;
        *(float *)(v51 - 128) = v43;
        *(float *)(v51 - 124) = v42;
        *(float *)(v51 - 80) = v43;
        *(float *)(v51 - 76) = v44;
        *(float *)(v51 - 32) = v41;
        *(float *)(v51 - 28) = v44;
      }
    }
    else
    {
      v12[16] = 0;
      v12[12] = (char *)v12 + 834;
      *(_OWORD *)(v12 + 13) = xmmword_184997E70;
      CA::OGL::Context::array_rect(v12, this[6].f32[0], this[6].f32[1], this[7].f32[0], this[7].f32[1]);
      uint64_t v52 = v12[15] + 48 * v12[16];
      *(float *)(v52 - 176) = v41;
      *(float *)(v52 - 172) = v42;
      *(float *)(v52 - 128) = v43;
      *(float *)(v52 - 124) = v42;
      *(float *)(v52 - 80) = v43;
      *(float *)(v52 - 76) = v44;
      *(float *)(v52 - 32) = v41;
      *(float *)(v52 - 28) = v44;
      CA::OGL::Context::array_flush((uint64_t)v12);
      *(unsigned char *)(v12[2] + 16) = 1;
      CA::OGL::PingPongState::replicate_edges(*(CA::OGL::PingPongState **)this, 8.0, this[6].f32[0], this[6].f32[1], this[7].f32[0], this[7].f32[1], v41, v42, v43, v44);
    }
    __int16 v53 = this[4].i16[0];
    int v54 = v53;
    uint64_t v55 = (uint64_t *)&this[(v53 & 1) + 11];
    if (v54 < 0) {
      uint64_t v55 = (uint64_t *)&this[1];
    }
    CA::OGL::Context::unbind_surface(*this, *v55, 0);
    *(unsigned char *)(v12[2] + 16) = 0;
    if (!a3)
    {
      CA::OGL::Context::pop_surface(*(CA::OGL::Context **)this);
      ++this[4].i16[0];
    }
    return;
  }
  BOOL v13 = (this[4].i16[0] & 1) == 0;
  float32x2_t v14 = this[6];
  float32x2_t v15 = vsub_f32(this[7], v14);
  int32x2_t v16 = vceqz_f32(v15);
  v17.i64[0] = v16.i32[0];
  v17.i64[1] = v16.i32[1];
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v17, 1), (int8x16_t)v17).u64[0] & 0x8000000000000000) != 0
    || (int8x8_t v18 = vmvn_s8(vorr_s8((int8x8_t)vcltz_f32(v15), (int8x8_t)vcgez_f32(v15))),
        v19.i64[0] = v18.i32[0],
        v19.i64[1] = v18.i32[1],
        (vorrq_s8((int8x16_t)vdupq_laneq_s64(v19, 1), (int8x16_t)v19).u64[0] & 0x8000000000000000) != 0))
  {
    int32x4_t v59 = 0uLL;
    int32x2_t v26 = 0;
    int32x2_t v25 = (int32x2_t)-1;
  }
  else
  {
    float64x2_t v20 = vcvtq_f64_f32(v14);
    float64x2_t v21 = vmaxnmq_f64(v20, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000));
    float64x2_t v22 = vminnmq_f64(vaddq_f64(v20, vcvtq_f64_f32(v15)), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL));
    int32x4_t v23 = (int32x4_t)vcvtmq_s64_f64(v21);
    int32x4_t v24 = (int32x4_t)vsubq_s64(vcvtpq_s64_f64(v22), (int64x2_t)v23);
    int32x4_t v59 = vuzp1q_s32(v23, v24);
    int32x2_t v25 = vadd_s32(vmovn_s64((int64x2_t)v23), (int32x2_t)-1);
    int32x2_t v26 = vmovn_s64((int64x2_t)v24);
  }
  if (this[4].i8[2])
  {
    int v27 = v26.i32[0];
    if (v26.i32[0] <= v26.i32[1]) {
      int v28 = v26.i32[1];
    }
    else {
      int v28 = v26.i32[0];
    }
    if (v26.i32[0] >= v26.i32[1]) {
      int v27 = v26.i32[1];
    }
    if (v28 <= 1073741822 && v27 >= 1)
    {
      int8x8_t v30 = (int8x8_t)vadd_s32(v26, (int32x2_t)0x200000002);
      if (v30.i32[1] < 1 || v30.i32[0] < 1) {
        unsigned int v32 = -1;
      }
      else {
        unsigned int v32 = 0;
      }
      *(int32x2_t *)v59.i8 = v25;
      v59.u64[1] = (unint64_t)vbic_s8(v30, (int8x8_t)vdup_n_s32(v32));
    }
  }
  if (CA::OGL::PingPongState::create_surface((CA::OGL::PingPongState *)this, v13, (const CA::Bounds *)&v59))
  {
    uint64_t v33 = (uint64_t)this[v13 + 11];
    (*(void (**)(float32x2_t, uint64_t, void, void))(**(void **)this + 704))(*this, v33, 0, 0);
    CA::OGL::Context::push_surface((uint64_t)*this, v33, 0, 64, 0);
    goto LABEL_28;
  }
}

void CA::OGL::DownsampleState::downsample4(float32x2_t *this, float a2, float a3, const float *a4, const float *a5)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = (uint64_t)*this;
  if (!CA::OGL::PingPongState::attach_dest(this, 1, 0)) {
    return;
  }
  *(unsigned char *)(*(void *)(v10 + 16) + 16) = 26;
  __int16 v11 = this[4].i16[0];
  int v12 = v11;
  BOOL v13 = (uint64_t *)&this[(v11 & 1) + 11];
  if (v12 < 0) {
    BOOL v13 = (uint64_t *)&this[1];
  }
  int v14 = *(_DWORD *)(*v13 + 32);
  int v15 = *(_DWORD *)(*v13 + 36);
  CA::OGL::Context::bind_surface((uint64_t)*this, *v13, 0, 1u, 1, 0.0);
  v16.i64[0] = *(void *)(*(void *)(v10 + 16) + 96);
  v16.i64[1] = v16.i64[0];
  float v17 = (float)v14;
  float v18 = this[6].f32[1];
  float v19 = -(float)((float)v14 - (float)(this[6].f32[0] * a2));
  float v20 = this[7].f32[1];
  float v21 = -(float)(v17 - (float)(this[7].f32[0] * a2));
  float32x4_t v22 = vmulq_f32(*(float32x4_t *)a4, v16);
  v49[1] = vmulq_f32(*(float32x4_t *)(a4 + 4), v16);
  v49[0] = v22;
  float v23 = (float)v15;
  float v24 = -(float)((float)v15 - (float)(v18 * a3));
  float v25 = -(float)(v23 - (float)(v20 * a3));
  if ((*(unsigned int (**)(uint64_t))(*(void *)v10 + 984))(v10))
  {
    (*(void (**)(uint64_t, void, uint64_t, uint64_t, _OWORD *))(*(void *)v10 + 1000))(v10, 0, 2, 4, v49);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, const float *))(*(void *)v10 + 1000))(v10, 1, 4, 1, a5);
  }
  else
  {
    if (*a5 >= 0.0 && a5[1] >= 0.0 && a5[2] >= 0.0 && a5[3] >= 0.0)
    {
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      *(unsigned char *)(*(void *)(v10 + 16) + 16) = 3;
      *(unsigned char *)(*(void *)(v10 + 16) + 480) = 12;
      *(void *)(v10 + 128) = 0;
      uint64_t v32 = v10 + 834;
      *(void *)(v10 + 96) = v10 + 834;
      uint64_t v33 = (float *)(a4 + 1);
      *(_OWORD *)(v10 + 104) = xmmword_184997E70;
      do
      {
        uint64_t v34 = 6;
        if (!*(_DWORD *)(v10 + 92)) {
          uint64_t v34 = 4;
        }
        if ((unint64_t)(v31 + 4) > *(void *)(v10 + 136)
          || (unint64_t v35 = *(void *)(v10 + 112)) != 0 && *(void *)(v10 + 104) + v34 > v35)
        {
          *(_WORD *)(v10 + 832) |= 0x20u;
          CA::OGL::Context::array_flush(v10);
          *(void *)(v10 + 128) = 0;
          *(void *)(v10 + 96) = v32;
          *(_OWORD *)(v10 + 104) = xmmword_184997E70;
        }
        _S0 = a5[v30];
        __asm { FCVT            H0, S0 }
        uint64_t v41 = LODWORD(_S0);
        CA::OGL::Context::array_rect((void *)v10, this[6].f32[0], this[6].f32[1], this[7].f32[0], this[7].f32[1]);
        uint64_t v42 = *(void *)(v10 + 120) + 48 * *(void *)(v10 + 128);
        *(void *)(v42 - 160) = 0x1000100010001 * v41;
        *(void *)(v42 - 112) = 0x1000100010001 * v41;
        *(void *)(v42 - 64) = 0x1000100010001 * v41;
        *(void *)(v42 - 16) = 0x1000100010001 * v41;
        float v43 = *(v33 - 1);
        float v44 = v43 + v19;
        float v45 = *v33 + v24;
        float v46 = v43 + v21;
        float v47 = *v33 + v25;
        uint64_t v31 = *(void *)(v10 + 128);
        uint64_t v48 = *(void *)(v10 + 120) + 48 * v31;
        *(float *)(v48 - 176) = v44;
        *(float *)(v48 - 172) = v45;
        *(float *)(v48 - 128) = v46;
        *(float *)(v48 - 124) = v45;
        *(float *)(v48 - 80) = v46;
        *(float *)(v48 - 76) = v47;
        *(float *)(v48 - 32) = v44;
        *(float *)(v48 - 28) = v47;
        if (!(v30 * 4))
        {
          CA::OGL::Context::array_flush(v10);
          uint64_t v31 = 0;
          *(unsigned char *)(*(void *)(v10 + 16) + 481) |= 1u;
          *(void *)(v10 + 128) = 0;
          *(void *)(v10 + 96) = v32;
          *(_OWORD *)(v10 + 104) = xmmword_184997E70;
        }
        ++v30;
        v33 += 2;
      }
      while (v30 != 4);
      CA::OGL::Context::array_flush(v10);
      *(unsigned char *)(*(void *)(v10 + 16) + 481) &= ~1u;
      goto LABEL_12;
    }
    *(unsigned char *)(*(void *)(v10 + 16) + 16) = 1;
  }
  *(void *)(v10 + 128) = 0;
  *(void *)(v10 + 96) = v10 + 834;
  *(_OWORD *)(v10 + 104) = xmmword_184997E70;
  CA::OGL::Context::array_rect((void *)v10, this[6].f32[0], this[6].f32[1], this[7].f32[0], this[7].f32[1]);
  uint64_t v26 = *(void *)(v10 + 120) + 48 * *(void *)(v10 + 128);
  *(float *)(v26 - 176) = v19;
  *(float *)(v26 - 172) = v24;
  *(float *)(v26 - 128) = v21;
  *(float *)(v26 - 124) = v24;
  *(float *)(v26 - 80) = v21;
  *(float *)(v26 - 76) = v25;
  *(float *)(v26 - 32) = v19;
  *(float *)(v26 - 28) = v25;
  CA::OGL::Context::array_flush(v10);
LABEL_12:
  *(unsigned char *)(*(void *)(v10 + 16) + 16) = 1;
  CA::OGL::PingPongState::replicate_edges(*(CA::OGL::PingPongState **)this, 2.0, this[6].f32[0], this[6].f32[1], this[7].f32[0], this[7].f32[1], v19, v24, v21, v25);
  __int16 v27 = this[4].i16[0];
  int v28 = v27;
  CFDictionaryRef v29 = (uint64_t *)&this[(v27 & 1) + 11];
  if (v28 < 0) {
    CFDictionaryRef v29 = (uint64_t *)&this[1];
  }
  CA::OGL::Context::unbind_surface(*this, *v29, 0);
  *(unsigned char *)(*(void *)(v10 + 16) + 16) = 0;
  CA::OGL::Context::pop_surface(*(CA::OGL::Context **)this);
  ++this[4].i16[0];
}

void CA::OGL::DownsampleState::downsample6(float32x2_t *this, float a2, float a3, const float *a4, const float *a5)
{
  v27[3] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = (void *)*this;
  if (CA::OGL::PingPongState::attach_dest(this, 1, 0))
  {
    *(unsigned char *)(v10[2] + 16) = 27;
    __int16 v11 = this[4].i16[0];
    int v12 = v11;
    BOOL v13 = (uint64_t *)&this[(v11 & 1) + 11];
    if (v12 < 0) {
      BOOL v13 = (uint64_t *)&this[1];
    }
    int v15 = *(_DWORD *)(*v13 + 32);
    int v14 = *(_DWORD *)(*v13 + 36);
    CA::OGL::Context::bind_surface((uint64_t)*this, *v13, 0, 1u, 1, 0.0);
    unint64_t v16 = 0;
    float32x2_t v17 = *(float32x2_t *)(v10[2] + 96);
    memset(v27, 0, 24);
    unint64_t v18 = -2;
    do
    {
      v27[v16 / 2] = vmul_f32(*(float32x2_t *)&a4[v16], v17);
      v18 += 2;
      v16 += 2;
    }
    while (v18 < 4);
    float v19 = -(float)((float)v15 - (float)(this[6].f32[0] * a2));
    float v20 = -(float)((float)v14 - (float)(this[6].f32[1] * a3));
    float v21 = -(float)((float)v15 - (float)(this[7].f32[0] * a2));
    float v22 = -(float)((float)v14 - (float)(this[7].f32[1] * a3));
    if ((*(uint64_t (**)(void *))(*v10 + 984))(v10))
    {
      (*(void (**)(void *, void, uint64_t, uint64_t, void *))(*v10 + 1000))(v10, 0, 2, 3, v27);
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t, const float *))(*v10 + 1000))(v10, 1, 3, 1, a5);
    }
    else
    {
      *(unsigned char *)(v10[2] + 16) = 1;
    }
    v10[16] = 0;
    v10[12] = (char *)v10 + 834;
    *(_OWORD *)(v10 + 13) = xmmword_184997E70;
    CA::OGL::Context::array_rect(v10, this[6].f32[0], this[6].f32[1], this[7].f32[0], this[7].f32[1]);
    uint64_t v23 = v10[15] + 48 * v10[16];
    *(float *)(v23 - 176) = v19;
    *(float *)(v23 - 172) = v20;
    *(float *)(v23 - 128) = v21;
    *(float *)(v23 - 124) = v20;
    *(float *)(v23 - 80) = v21;
    *(float *)(v23 - 76) = v22;
    *(float *)(v23 - 32) = v19;
    *(float *)(v23 - 28) = v22;
    CA::OGL::Context::array_flush((uint64_t)v10);
    *(unsigned char *)(v10[2] + 16) = 1;
    CA::OGL::PingPongState::replicate_edges(*(CA::OGL::PingPongState **)this, 2.0, this[6].f32[0], this[6].f32[1], this[7].f32[0], this[7].f32[1], v19, v20, v21, v22);
    __int16 v24 = this[4].i16[0];
    int v25 = v24;
    uint64_t v26 = (uint64_t *)&this[(v24 & 1) + 11];
    if (v25 < 0) {
      uint64_t v26 = (uint64_t *)&this[1];
    }
    CA::OGL::Context::unbind_surface(*this, *v26, 0);
    *(unsigned char *)(v10[2] + 16) = 0;
    CA::OGL::Context::pop_surface(*(CA::OGL::Context **)this);
    ++this[4].i16[0];
  }
}

BOOL CA::OGL::DownsampleState::upsample(float32x2_t *this, float a2, float a3, const float *a4)
{
  float v8 = (void *)*this;
  BOOL v9 = CA::OGL::PingPongState::attach_dest(this, 1, 0);
  if (v9)
  {
    *(unsigned char *)(v8[2] + 16) = 29;
    __int16 v10 = this[4].i16[0];
    int v11 = v10;
    int v12 = (uint64_t *)&this[(v10 & 1) + 11];
    if (v11 < 0) {
      int v12 = (uint64_t *)&this[1];
    }
    int v13 = *(_DWORD *)(*v12 + 32);
    int v14 = *(_DWORD *)(*v12 + 36);
    CA::OGL::Context::bind_surface((uint64_t)*this, *v12, 0, 1u, 1, 0.0);
    float v15 = (float)v13;
    float v16 = -(float)((float)v13 - (float)(this[6].f32[0] * a2));
    float v17 = -(float)(v15 - (float)(this[7].f32[0] * a2));
    float v18 = (float)v14;
    float v19 = -(float)((float)v14 - (float)(this[6].f32[1] * a3));
    float v20 = -(float)(v18 - (float)(this[7].f32[1] * a3));
    if ((*(unsigned int (**)(void *))(*v8 + 984))(v8))
    {
      (*(void (**)(void *, void, uint64_t, uint64_t, const float *))(*v8 + 1000))(v8, 0, 2, 1, a4);
      char v8[16] = 0;
      v8[12] = (char *)v8 + 834;
      *(_OWORD *)(v8 + 13) = xmmword_184997E70;
      CA::OGL::Context::array_rect(v8, this[6].f32[0], this[6].f32[1], this[7].f32[0], this[7].f32[1]);
      uint64_t v21 = v8[15] + 48 * v8[16];
      *(float *)(v21 - 176) = v16;
      *(float *)(v21 - 172) = v19;
      *(float *)(v21 - 128) = v17;
      *(float *)(v21 - 124) = v19;
      *(float *)(v21 - 80) = v17;
      *(float *)(v21 - 76) = v20;
      *(float *)(v21 - 32) = v16;
      *(float *)(v21 - 28) = v20;
      CA::OGL::Context::array_flush((uint64_t)v8);
    }
    *(unsigned char *)(v8[2] + 16) = 1;
    CA::OGL::PingPongState::replicate_edges(*(CA::OGL::PingPongState **)this, 2.0, this[6].f32[0], this[6].f32[1], this[7].f32[0], this[7].f32[1], v16, v19, v17, v20);
    __int16 v22 = this[4].i16[0];
    int v23 = v22;
    __int16 v24 = (uint64_t *)&this[(v22 & 1) + 11];
    if (v23 < 0) {
      __int16 v24 = (uint64_t *)&this[1];
    }
    CA::OGL::Context::unbind_surface(*this, *v24, 0);
    *(unsigned char *)(v8[2] + 16) = 0;
    CA::OGL::Context::pop_surface(*(CA::OGL::Context **)this);
    ++this[4].i16[0];
  }
  return v9;
}

void CA::OGL::Context::downsample_surface(uint64_t a1, _DWORD *a2, double *a3, uint64_t a4, int a5, float a6)
{
  v195[2] = *MEMORY[0x1E4F143B8];
  float32x4_t v192 = 0u;
  float32x4_t v193 = 0u;
  long long v191 = 0u;
  v187 = (CA::OGL::PingPongState *)a1;
  uint64_t v188 = a2;
  unsigned int v12 = a2[8];
  unsigned int v13 = a2[9];
  int32x2_t v189 = (int32x2_t)__PAIR64__(v13, v12);
  int v14 = a2[10];
  int v15 = a2[11];
  int32x2_t v190 = (int32x2_t)__PAIR64__(v15, v14);
  LOWORD(v191) = -1;
  DWORD1(v191) = 15;
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v194 = _D0;
  v195[0] = 0;
  v195[1] = 0;
  unint64_t v166 = __PAIR64__(v13, v12);
  unint64_t v167 = __PAIR64__(v15, v14);
  if (v14 <= v15) {
    int v21 = v15;
  }
  else {
    int v21 = v14;
  }
  if (v14 >= v15) {
    int v22 = v15;
  }
  else {
    int v22 = v14;
  }
  if (v21 <= 1073741822 && v22 >= 1)
  {
    LODWORD(v166) = v12 - 1;
    HIDWORD(v166) = v13 - 1;
    LODWORD(v167) = v14 + 2;
    HIDWORD(v167) = v15 + 2;
    if (v14 + 2 < 1 || v15 + 2 <= 0) {
      unint64_t v167 = 0;
    }
  }
  memset(__dst, 0, 488);
  int v23 = *(const void **)(a1 + 16);
  memcpy(__dst, v23, 0x1E8uLL);
  *(void *)&__dst[0] = v23;
  *(void *)(a1 + 16) = __dst;
  long long v183 = 0u;
  long long v184 = 0u;
  long long v185 = 0u;
  long long v182 = 0u;
  uint64_t v24 = *(void *)(a1 + 248);
  *((void *)&v183 + 1) = 0x3C003C003C003C00;
  long long v184 = 0uLL;
  *(void *)&long long v185 = 0;
  WORD6(v185) = 1;
  uint64_t v181 = 0;
  if (v24)
  {
    float v25 = *(float *)(v24 + 64);
    __int16 v26 = *(_WORD *)(v24 + 68) & 0x100 | 1 | *(_WORD *)(v24 + 68) & 0x400;
  }
  else
  {
    __int16 v26 = 1025;
    float v25 = 1.0;
  }
  *((float *)&v185 + 2) = v25;
  WORD6(v185) = v26;
  *(void *)&long long v183 = &CA::identity_transform;
  memset(v180, 0, sizeof(v180));
  CA::Shape::operator=((uint64_t)v180, &v166);
  *(void *)&long long v182 = v180;
  *((void *)&v182 + 1) = 0;
  uint64_t v181 = CA::OGL::Context::set_gstate(a1, (uint64_t)&v181);
  *(unsigned char *)(*(void *)(a1 + 16) + 481) &= ~1u;
  int v27 = a2[8];
  int v28 = a2[9];
  double v29 = (double)(a2[10] + v27);
  double v30 = (double)(a2[11] + v28);
  v172.f64[0] = (double)v27;
  v172.f64[1] = (double)v28;
  float64x2_t v173 = (float64x2_t)xmmword_184997D60;
  v174.f64[0] = v29;
  v174.f64[1] = (double)v28;
  float64x2_t v175 = (float64x2_t)xmmword_184997D60;
  v176.f64[0] = v29;
  v176.f64[1] = v30;
  float64x2_t v177 = (float64x2_t)xmmword_184997D60;
  v178.f64[0] = (double)v27;
  v178.f64[1] = v30;
  float64x2_t v179 = (float64x2_t)xmmword_184997D60;
  CA::Transform::apply_to_point4(a4, &v172, &v172, (const double *)4);
  *(float32x2_t *)v192.f32 = vcvt_f32_s32(v189);
  *(float32x2_t *)&v192.u32[2] = vcvt_f32_s32(vadd_s32(v190, v189));
  if (a2[6] > a2[10] || a2[7] > a2[11])
  {
    CA::OGL::PingPongState::create_surface((CA::OGL::PingPongState *)&v187, 0, (const CA::Bounds *)&v166);
    uint64_t v31 = (uint64_t)v187;
    *(unsigned char *)(*((void *)v187 + 2) + 16) = 1;
    BOOL v32 = (v191 & 1) == 0;
    float32x2_t v33 = vsub_f32(*(float32x2_t *)&v192.u32[2], *(float32x2_t *)v192.f32);
    int32x2_t v34 = vceqz_f32(v33);
    v35.i64[0] = v34.i32[0];
    v35.i64[1] = v34.i32[1];
    if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v35, 1), (int8x16_t)v35).u64[0] & 0x8000000000000000) != 0
      || (int8x8_t v36 = vmvn_s8(vorr_s8((int8x8_t)vcltz_f32(v33), (int8x8_t)vcgez_f32(v33))),
          v37.i64[0] = v36.i32[0],
          v37.i64[1] = v36.i32[1],
          (vorrq_s8((int8x16_t)vdupq_laneq_s64(v37, 1), (int8x16_t)v37).u64[0] & 0x8000000000000000) != 0))
    {
      int8x16_t v168 = 0uLL;
      int32x4_t v41 = 0uLL;
    }
    else
    {
      float64x2_t v38 = vcvtq_f64_f32(*(float32x2_t *)v192.f32);
      float64x2_t v39 = vminnmq_f64(vaddq_f64(v38, vcvtq_f64_f32(v33)), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL));
      int32x4_t v40 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v38, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
      int32x4_t v41 = vuzp1q_s32(v40, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(v39), (int64x2_t)v40));
      int8x16_t v168 = (int8x16_t)v41;
    }
    if (BYTE2(v191))
    {
      int v42 = v41.i32[2];
      if (v41.i32[2] <= v41.i32[3]) {
        int v43 = v41.i32[3];
      }
      else {
        int v43 = v41.i32[2];
      }
      if (v41.i32[2] >= v41.i32[3]) {
        int v42 = v41.i32[3];
      }
      if (v43 <= 1073741822 && v42 >= 1)
      {
        int8x16_t v168 = (int8x16_t)vaddq_s32(v41, (int32x4_t)xmmword_184997F10);
        int32x2_t v44 = vcgt_s32((int32x2_t)0x100000001, vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8(v168, v168, 8uLL)));
        if ((v44.i32[1] | v44.i32[0])) {
          v168.i64[1] = 0;
        }
      }
    }
    if (CA::OGL::PingPongState::create_surface((CA::OGL::PingPongState *)&v187, v32, (const CA::Bounds *)&v168))
    {
      uint64_t v45 = v195[v32];
      (*(void (**)(CA::OGL::PingPongState *, uint64_t, uint64_t, uint64_t))(*(void *)v187 + 704))(v187, v45, 2, 2);
      CA::OGL::Context::push_surface((uint64_t)v187, v45, 0, 64, 0);
      float v46 = &v195[v191 & 1];
      if ((v191 & 0x8000u) != 0) {
        float v46 = (uint64_t *)&v188;
      }
      int v47 = *(_DWORD *)(*v46 + 32);
      int v48 = *(_DWORD *)(*v46 + 36);
      CA::OGL::Context::bind_surface((uint64_t)v187, *v46, 0, 1u, 1, 0.0);
      float v49 = (float)v47;
      uint64_t v50 = v192.i64[0];
      float v51 = v192.f32[0] - (float)v47;
      float v52 = (float)v48;
      float v53 = v192.f32[1] - (float)v48;
      uint64_t v54 = v192.i64[1];
      float v55 = v192.f32[2] - v49;
      float v56 = v192.f32[3] - v52;
      *(void *)(v31 + 128) = 0;
      *(void *)(v31 + 96) = v31 + 834;
      *(_OWORD *)(v31 + 104) = xmmword_184997E70;
      CA::OGL::Context::array_rect((void *)v31, *(float *)&v50, *((float *)&v50 + 1), *(float *)&v54, *((float *)&v54 + 1));
      uint64_t v57 = *(void *)(v31 + 120) + 48 * *(void *)(v31 + 128);
      *(float *)(v57 - 176) = v51;
      *(float *)(v57 - 172) = v53;
      *(float *)(v57 - 128) = v55;
      *(float *)(v57 - 124) = v53;
      *(float *)(v57 - 80) = v55;
      *(float *)(v57 - 76) = v56;
      *(float *)(v57 - 32) = v51;
      *(float *)(v57 - 28) = v56;
      CA::OGL::Context::array_flush(v31);
      CA::OGL::PingPongState::replicate_edges(v187, 2.0, v192.f32[0], v192.f32[1], v192.f32[2], v192.f32[3], v51, v53, v55, v56);
      float v58 = &v195[v191 & 1];
      if ((v191 & 0x8000u) != 0) {
        float v58 = (uint64_t *)&v188;
      }
      CA::OGL::Context::unbind_surface(v187, *v58, 0);
      CA::OGL::Context::pop_surface(v187);
      LOWORD(v191) = v191 + 1;
      *(unsigned char *)(*(void *)(v31 + 16) + 16) = 0;
    }
  }
  if (a5 == 1 || (v60 = *a3, double v59 = a3[1], *a3 >= 1.0) && v59 >= 1.0)
  {
    int v61 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 184))(a1, 12);
    if (v61)
    {
      CA::OGL::PingPongState::create_surface((CA::OGL::PingPongState *)&v187, 0, (const CA::Bounds *)&v166);
      CA::OGL::PingPongState::create_surface((CA::OGL::PingPongState *)&v187, 1u, (const CA::Bounds *)&v166);
      double v63 = *a3;
      double v62 = a3[1];
      long long v64 = xmmword_184997F40;
      unsigned int v65 = 0;
      unsigned int v66 = 1083591734;
      unsigned int v67 = 1077255971;
      unsigned int v68 = 1060871535;
    }
    else
    {
      double v63 = *a3;
      double v62 = a3[1];
      long long v64 = xmmword_184997F50;
      unsigned int v65 = 1076570714;
      unsigned int v66 = 1060513140;
      unsigned int v67 = -1086970508;
      unsigned int v68 = -1070912934;
    }
    long long v171 = v64;
    v168.i64[0] = v68;
    v168.i64[1] = v67;
    *(void *)float v169 = v66;
    for (*(void *)&v169[8] = v65; v63 <= 0.5000005; double v63 = v63 + v63)
    {
      float32x4_t v193 = v192;
      float v69 = vmuls_lane_f32(0.5, v192, 2);
      v192.f32[0] = 0.5 * v192.f32[0];
      v192.f32[2] = v69;
      if (v61) {
        CA::OGL::DownsampleState::downsample6((float32x2_t *)&v187, 2.0, 1.0, (const float *)v168.i32, (const float *)&v171);
      }
      else {
        CA::OGL::DownsampleState::downsample4((float32x2_t *)&v187, 2.0, 1.0, (const float *)v168.i32, (const float *)&v171);
      }
    }
    if (v61)
    {
      int v70 = 0;
      unsigned int v71 = 1083591734;
      __int32 v72 = 1077255971;
      unsigned int v73 = 1060871535;
    }
    else
    {
      int v70 = 1076570714;
      unsigned int v71 = 1060513140;
      __int32 v72 = -1086970508;
      unsigned int v73 = -1070912934;
    }
    v168.i32[0] = 0;
    *(uint64_t *)((char *)v168.i64 + 4) = v73;
    v168.i32[3] = v72;
    *(_DWORD *)float v169 = 0;
    *(void *)&v169[4] = v71;
    for (*(_DWORD *)&v169[12] = v70; v62 <= 0.5000005; double v62 = v62 + v62)
    {
      float32x4_t v193 = v192;
      v192.f32[1] = 0.5 * v192.f32[1];
      v192.f32[3] = v192.f32[3] * 0.5;
      if (v61) {
        CA::OGL::DownsampleState::downsample6((float32x2_t *)&v187, 1.0, 2.0, (const float *)v168.i32, (const float *)&v171);
      }
      else {
        CA::OGL::DownsampleState::downsample4((float32x2_t *)&v187, 1.0, 2.0, (const float *)v168.i32, (const float *)&v171);
      }
    }
    if (!v61) {
      goto LABEL_81;
    }
    if (fabs(v63 + -1.0) > 0.000001)
    {
      if (v63 <= 1.0) {
        double v74 = v63 + v63;
      }
      else {
        double v74 = v63;
      }
      if (v63 <= 1.0) {
        double v75 = 0.5;
      }
      else {
        double v75 = 1.0;
      }
      float32x4_t v193 = v192;
      float32_t v76 = v74 * v192.f32[0];
      float32_t v77 = v74 * v192.f32[2];
      v192.f32[0] = v76;
      v192.f32[2] = v77;
      float v78 = 1.0 / v74;
      if (CA::OGL::DownsampleState::upsample((float32x2_t *)&v187, v78, 1.0, CA::OGL::Context::downsample_surface(CA::OGL::Surface *,CA::Vec2<double> const&,CA::Transform const&,CA::OGL::Context::DownsampleFilter,float)::axis))
      {
LABEL_67:
        if (fabs(v62 + -1.0) > 0.000001)
        {
          if (v62 <= 1.0) {
            double v81 = v62 + v62;
          }
          else {
            double v81 = v62;
          }
          if (v62 <= 1.0) {
            double v82 = 0.5;
          }
          else {
            double v82 = 1.0;
          }
          float32x4_t v193 = v192;
          float32_t v83 = v81 * v192.f32[1];
          float32_t v84 = v81 * v192.f32[3];
          v192.f32[1] = v83;
          v192.f32[3] = v84;
          float v85 = 1.0 / v81;
          if (CA::OGL::DownsampleState::upsample((float32x2_t *)&v187, 1.0, v85, CA::OGL::Context::downsample_surface(CA::OGL::Surface *,CA::Vec2<double> const&,CA::Transform const&,CA::OGL::Context::DownsampleFilter,float)::axis))
          {
            goto LABEL_77;
          }
          float32_t v86 = v192.f32[1] / v81;
          float32_t v87 = v192.f32[3] / v81;
          v192.f32[1] = v86;
          v192.f32[3] = v87;
        }
        double v82 = v62;
LABEL_77:
        if (v75 < 0.75)
        {
          int8x16_t v168 = (int8x16_t)xmmword_184997F60;
          *(_OWORD *)float v169 = xmmword_184997F70;
          float32x4_t v193 = v192;
          float v88 = vmuls_lane_f32(0.5, v192, 2);
          v192.f32[0] = 0.5 * v192.f32[0];
          v192.f32[2] = v88;
          CA::OGL::DownsampleState::downsample6((float32x2_t *)&v187, 2.0, 1.0, (const float *)v168.i32, (const float *)&v171);
        }
        if (v82 < 0.75)
        {
          int8x16_t v168 = (int8x16_t)xmmword_184997F80;
          *(void *)float v169 = 0x40964C3600000000;
          float32x4_t v193 = v192;
          v192.f32[1] = 0.5 * v192.f32[1];
          v192.f32[3] = v192.f32[3] * 0.5;
          CA::OGL::DownsampleState::downsample6((float32x2_t *)&v187, 1.0, 2.0, (const float *)v168.i32, (const float *)&v171);
        }
LABEL_81:
        CA::OGL::Context::set_gstate(a1, **(void **)(a1 + 248));
        uint64_t v89 = *(void *)&__dst[0];
        *(void *)(a1 + 16) = *(void *)&__dst[0];
        *(void *)&__dst[0] = 0;
        goto LABEL_82;
      }
      float32_t v79 = v192.f32[0] / v74;
      float32_t v80 = v192.f32[2] / v74;
      v192.f32[0] = v79;
      v192.f32[2] = v80;
    }
    double v75 = v63;
    goto LABEL_67;
  }
  if (!a5)
  {
    double v109 = (v59 + v60) * 0.5;
    if (a6 != 0.0)
    {
      double v110 = a6 - log2(v109);
      if (v110 < 0.0) {
        double v110 = 0.0;
      }
      double v109 = exp2(-v110);
    }
    __asm { FMOV            V2.4S, #0.25 }
    long long v171 = (__int128)_Q2;
    int8x16_t v168 = (int8x16_t)xmmword_184997F20;
    *(_OWORD *)float v169 = xmmword_184997F30;
    int v112 = 0;
    if (v109 <= 0.24999975)
    {
      double v113 = v109;
      float32x4_t v164 = _Q2;
      do
      {
        float32x4_t v116 = v192;
        float32x4_t v192 = vmulq_f32(v192, _Q2);
        float32x4_t v193 = v116;
        CA::OGL::DownsampleState::downsample4((float32x2_t *)&v187, 4.0, 4.0, (const float *)v168.i32, (const float *)&v171);
        _Q2 = v164;
        double v113 = v113 * 4.0;
        v112 += 2;
      }
      while (v113 <= 0.24999975);
    }
    else
    {
      double v113 = v109;
    }
    for (; v113 <= 0.999999; ++v112)
    {
      float32x4_t v117 = v192;
      v118.i64[0] = 0x3F0000003F000000;
      v118.i64[1] = 0x3F0000003F000000;
      float32x4_t v192 = vmulq_f32(v192, v118);
      float32x4_t v193 = v117;
      uint64_t v119 = (uint64_t)v187;
      if (CA::OGL::PingPongState::attach_dest((float32x2_t *)&v187, 1, 0))
      {
        *(unsigned char *)(*(void *)(v119 + 16) + 16) = 1;
        uint64_t v120 = &v195[v191 & 1];
        if ((v191 & 0x8000u) != 0) {
          uint64_t v120 = (uint64_t *)&v188;
        }
        int v121 = *(_DWORD *)(*v120 + 32);
        int v122 = *(_DWORD *)(*v120 + 36);
        CA::OGL::Context::bind_surface((uint64_t)v187, *v120, 0, 1u, 1, 0.0);
        float v123 = (float)v121;
        uint64_t v124 = v192.i64[0];
        float v125 = -(float)((float)v121 - (float)(v192.f32[0] * 2.0));
        float v126 = (float)v122;
        float v127 = -(float)((float)v122 - (float)(v192.f32[1] * 2.0));
        uint64_t v128 = v192.i64[1];
        float v129 = -(float)(v123 - (float)(v192.f32[2] * 2.0));
        float v130 = -(float)(v126 - (float)(v192.f32[3] * 2.0));
        *(void *)(v119 + 128) = 0;
        *(void *)(v119 + 96) = v119 + 834;
        *(_OWORD *)(v119 + 104) = xmmword_184997E70;
        CA::OGL::Context::array_rect((void *)v119, *(float *)&v124, *((float *)&v124 + 1), *(float *)&v128, *((float *)&v128 + 1));
        uint64_t v131 = *(void *)(v119 + 120) + 48 * *(void *)(v119 + 128);
        *(float *)(v131 - 176) = v125;
        *(float *)(v131 - 172) = v127;
        *(float *)(v131 - 128) = v129;
        *(float *)(v131 - 124) = v127;
        *(float *)(v131 - 80) = v129;
        *(float *)(v131 - 76) = v130;
        *(float *)(v131 - 32) = v125;
        *(float *)(v131 - 28) = v130;
        CA::OGL::Context::array_flush(v119);
        *(unsigned char *)(*(void *)(v119 + 16) + 16) = 1;
        CA::OGL::PingPongState::replicate_edges(v187, 2.0, v192.f32[0], v192.f32[1], v192.f32[2], v192.f32[3], v125, v127, v129, v130);
        __int16 v132 = &v195[v191 & 1];
        if ((v191 & 0x8000u) != 0) {
          __int16 v132 = (uint64_t *)&v188;
        }
        CA::OGL::Context::unbind_surface(v187, *v132, 0);
        *(unsigned char *)(*(void *)(v119 + 16) + 16) = 0;
        CA::OGL::Context::pop_surface(v187);
        LOWORD(v191) = v191 + 1;
      }
      double v113 = v113 + v113;
    }
    float v133 = v109;
    _S8 = log2f(v133) + (float)v112;
    CA::OGL::Context::set_gstate(a1, **(void **)(a1 + 248));
    uint64_t v89 = *(void *)&__dst[0];
    *(void *)(a1 + 16) = *(void *)&__dst[0];
    *(void *)&__dst[0] = 0;
    _D0.i16[1] = 15267;
    if (_S8 >= 0.005)
    {
      __asm { FCVT            H0, S8 }
      int16x4_t v163 = _D0;
      *(unsigned char *)(v89 + 16) = 7;
      LOWORD(v191) = v191 - 1;
      __int16 v136 = &v195[v191 & 1];
      if ((v191 & 0x8000u) != 0) {
        __int16 v136 = (uint64_t *)&v188;
      }
      int v137 = *(_DWORD *)(*v136 + 32);
      int v138 = *(_DWORD *)(*v136 + 36);
      CA::OGL::Context::bind_surface((uint64_t)v187, *v136, 0, 1u, 1, 0.0);
      LOWORD(v191) = v191 + 1;
      uint64_t v139 = &v195[v191 & 1];
      if ((v191 & 0x8000u) != 0) {
        uint64_t v139 = (uint64_t *)&v188;
      }
      int v140 = *(_DWORD *)(*v139 + 32);
      int v141 = *(_DWORD *)(*v139 + 36);
      CA::OGL::Context::bind_surface((uint64_t)v187, *v139, 1u, 1u, 1, 0.0);
      float v165 = v193.f32[0] - (float)v137;
      float v142 = (float)v138;
      float v143 = v193.f32[1] - (float)v138;
      float v144 = v193.f32[2] - (float)v137;
      float v145 = v193.f32[3] - v142;
      float v146 = (float)v140;
      float v147 = v192.f32[0] - (float)v140;
      float v148 = v192.f32[2] - v146;
      float v149 = (float)v141;
      float v150 = v192.f32[1] - (float)v141;
      float v151 = v192.f32[3] - v149;
      long long v170 = 0u;
      uint64_t v152 = *(void *)(*(void *)(a1 + 248) + 8);
      v168.i64[0] = a1;
      v168.i64[1] = v152;
      memset(v169, 0, sizeof(v169));
      *(_WORD *)&v169[16] = 256;
      CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)&v168);
      int16x4_t v153 = vdup_lane_s16(v163, 0);
      while (CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)&v168, (int32x2_t *)&v166))
      {
        uint64_t v154 = *(void *)(a1 + 128);
        uint64_t v155 = *(void *)(a1 + 120) + 48 * v154;
        *(void *)(a1 + 128) = v154 + 4;
        float32x4_t v156 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v174), v175);
        float32x4_t v157 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v176), v177);
        float32x4_t v158 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v178), v179);
        *(float32x4_t *)uint64_t v155 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v172), v173);
        *(float32x4_t *)(v155 + 48) = v156;
        *(float32x4_t *)(v155 + 96) = v157;
        *(float32x4_t *)(v155 + 144) = v158;
        if (*(void *)(a1 + 96)) {
          CA::OGL::Context::array_indices(a1, v154);
        }
        uint64_t v159 = *(void *)(a1 + 120) + 48 * *(void *)(a1 + 128);
        *(int16x4_t *)(v159 - 160) = v153;
        *(int16x4_t *)(v159 - 112) = v153;
        *(int16x4_t *)(v159 - 64) = v153;
        *(int16x4_t *)(v159 - 16) = v153;
        uint64_t v160 = *(void *)(a1 + 120) + 48 * *(void *)(a1 + 128);
        *(float *)(v160 - 176) = v165;
        *(float *)(v160 - 172) = v143;
        *(float *)(v160 - 128) = v144;
        *(float *)(v160 - 124) = v143;
        *(float *)(v160 - 80) = v144;
        *(float *)(v160 - 76) = v145;
        *(float *)(v160 - 32) = v165;
        *(float *)(v160 - 28) = v145;
        *(float *)(v160 - 168) = v147;
        *(float *)(v160 - 164) = v150;
        *(float *)(v160 - 120) = v148;
        *(float *)(v160 - 116) = v150;
        *(float *)(v160 - 72) = v148;
        *(float *)(v160 - 68) = v151;
        *(float *)(v160 - 24) = v147;
        *(float *)(v160 - 20) = v151;
      }
      uint64_t v161 = &v195[v191 & 1];
      if ((v191 & 0x8000u) != 0) {
        uint64_t v161 = (uint64_t *)&v188;
      }
      CA::OGL::Context::unbind_surface(v187, *v161, 1);
      LOWORD(v191) = v191 - 1;
      BOOL v162 = &v195[v191 & 1];
      if ((v191 & 0x8000u) != 0) {
        BOOL v162 = (uint64_t *)&v188;
      }
      CA::OGL::Context::unbind_surface(v187, *v162, 0);
      LOWORD(v191) = v191 + 1;
      goto LABEL_92;
    }
LABEL_82:
    *(unsigned char *)(v89 + 16) = 1;
    unsigned int v90 = &v195[v191 & 1];
    if ((v191 & 0x8000u) != 0) {
      unsigned int v90 = (uint64_t *)&v188;
    }
    int v91 = *(_DWORD *)(*v90 + 32);
    int v92 = *(_DWORD *)(*v90 + 36);
    CA::OGL::Context::bind_surface((uint64_t)v187, *v90, 0, 1u, 1, 0.0);
    float v93 = (float)v91;
    float v94 = v192.f32[0] - (float)v91;
    float v95 = v192.f32[2] - v93;
    float v96 = (float)v92;
    float v97 = v192.f32[1] - (float)v92;
    float v98 = v192.f32[3] - v96;
    long long v170 = 0u;
    uint64_t v99 = *(void *)(*(void *)(a1 + 248) + 8);
    v168.i64[0] = a1;
    v168.i64[1] = v99;
    memset(v169, 0, sizeof(v169));
    *(_WORD *)&v169[16] = 256;
    CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)&v168);
    while (CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)&v168, (int32x2_t *)&v166))
    {
      uint64_t v100 = *(void *)(a1 + 128);
      uint64_t v101 = *(void *)(a1 + 120) + 48 * v100;
      *(void *)(a1 + 128) = v100 + 4;
      float32x4_t v102 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v174), v175);
      float32x4_t v103 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v176), v177);
      float32x4_t v104 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v178), v179);
      *(float32x4_t *)uint64_t v101 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v172), v173);
      *(float32x4_t *)(v101 + 48) = v102;
      *(float32x4_t *)(v101 + 96) = v103;
      *(float32x4_t *)(v101 + 144) = v104;
      if (*(void *)(a1 + 96)) {
        CA::OGL::Context::array_indices(a1, v100);
      }
      uint64_t v105 = *(void *)(*(void *)(a1 + 16) + 8);
      uint64_t v106 = *(void *)(a1 + 120) + 48 * *(void *)(a1 + 128);
      *(void *)(v106 - 160) = v105;
      *(void *)(v106 - 112) = v105;
      *(void *)(v106 - 64) = v105;
      *(void *)(v106 - 16) = v105;
      uint64_t v107 = *(void *)(a1 + 120) + 48 * *(void *)(a1 + 128);
      *(float *)(v107 - 176) = v94;
      *(float *)(v107 - 172) = v97;
      *(float *)(v107 - 128) = v95;
      *(float *)(v107 - 124) = v97;
      *(float *)(v107 - 80) = v95;
      *(float *)(v107 - 76) = v98;
      *(float *)(v107 - 32) = v94;
      *(float *)(v107 - 28) = v98;
    }
    uint64_t v108 = &v195[v191 & 1];
    if ((v191 & 0x8000u) != 0) {
      uint64_t v108 = (uint64_t *)&v188;
    }
    CA::OGL::Context::unbind_surface(v187, *v108, 0);
LABEL_92:
    *(unsigned char *)(*(void *)(a1 + 16) + 16) = 0;
    goto LABEL_93;
  }
  if (a5 != 2)
  {
    uint64_t v89 = *(void *)(a1 + 16);
    goto LABEL_82;
  }
  while (v60 < 0.5)
  {
    CA::OGL::DownsampleState::asg((float32x2_t *)&v187, 0, 0, 0.5);
    double v60 = v60 + v60;
  }
  for (; v59 < 0.5; double v59 = v59 + v59)
    CA::OGL::DownsampleState::asg((float32x2_t *)&v187, 1, 0, 0.5);
  float v114 = v60;
  CA::OGL::DownsampleState::asg((float32x2_t *)&v187, 0, 0, v114);
  CA::OGL::Context::set_gstate(a1, **(void **)(a1 + 248));
  *(void *)(a1 + 16) = *(void *)&__dst[0];
  *(void *)&__dst[0] = 0;
  float v115 = v59;
  CA::OGL::DownsampleState::asg((float32x2_t *)&v187, 1, &v172, v115);
LABEL_93:
  if (*(void *)&__dst[0]) {
    __assert_rtn("~ContextState", "ogl-context.h", 551, "!next && \"Imbalanced ContextState push/pop\"");
  }
  CA::OGL::PingPongState::~PingPongState((CA::OGL::PingPongState *)&v187);
}

uint64_t CA::Render::CarPlayRegionLayer::has_background(CA::Render::CarPlayRegionLayer *this, const CA::Render::Layer *a2, BOOL *a3)
{
  *a3 = 0;
  return 1;
}

void *CA::Render::CarPlayRegionLayer::copy@<X0>(CA::Render::CarPlayRegionLayer *this@<X0>, void *a2@<X8>)
{
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  uint64_t result = malloc_type_zone_calloc(malloc_zone, 1uLL, 0x18uLL, 0x743898A5uLL);
  __int16 v6 = result;
  if (result)
  {
    *((_DWORD *)result + 2) = 1;
    int v7 = 6;
    *((_DWORD *)result + 3) = 6;
    ++dword_1EB2ADDE0;
    *uint64_t result = &unk_1ED02E8E8;
    uint64_t result = (void *)*((void *)this + 2);
    *((void *)v6 + 2) = result;
    if (result)
    {
      uint64_t result = CFRetain(result);
      int v7 = *((_DWORD *)v6 + 3);
    }
    *((_DWORD *)v6 + 3) = v7 | *((_DWORD *)this + 3) & 0xFFFFFF00;
  }
  *a2 = v6;
  return result;
}

void CA::Render::CarPlayRegionLayer::show(CA::Render::CarPlayRegionLayer *this, unsigned int a2, char a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  BOOL v4 = x_log_hook_p();
  if (a3)
  {
    if (v4) {
      goto LABEL_3;
    }
    unsigned __int8 v5 = x_log_category_render;
    if (!os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    __int16 v9 = 0;
    __int16 v6 = "car-play-region-layer";
    int v7 = (uint8_t *)&v9;
LABEL_8:
    _os_log_impl(&dword_184668000, v5, OS_LOG_TYPE_DEFAULT, v6, v7, 2u);
    return;
  }
  if (!v4)
  {
    unsigned __int8 v5 = x_log_category_render;
    if (!os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    __int16 v8 = 0;
    __int16 v6 = "(car-play-region-layer)";
    int v7 = (uint8_t *)&v8;
    goto LABEL_8;
  }
LABEL_3:

  x_log_();
}

void CA::Render::CarPlayRegionLayer::encode(CA::Render::CarPlayRegionLayer *this, CA::Render::Encoder *a2)
{
  CA::Render::Object::encode(this, a2);
  BOOL v4 = (const void *)*((void *)this + 2);

  CA::Render::Encoder::encode_cfobject(a2, v4);
}

void CA::Render::CarPlayRegionLayer::~CarPlayRegionLayer(CA::Render::CarPlayRegionLayer *this, const CA::Render::Object *a2)
{
  *(void *)this = &unk_1ED02E8E8;
  uint64_t v3 = (const void *)*((void *)this + 2);
  if (v3) {
    CFRelease(v3);
  }
  --dword_1EB2ADDE0;
  *(void *)this = &unk_1ED02F670;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0) {
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  const void *v3;

  *(void *)this = &unk_1ED02E8E8;
  uint64_t v3 = (const void *)*((void *)this + 2);
  if (v3) {
    CFRelease(v3);
  }
  --dword_1EB2ADDE0;
  *(void *)this = &unk_1ED02F670;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0) {
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
  }
}

CA::Render::CarPlayRegionLayer *CA::Render::CarPlayRegionLayer::CarPlayRegionLayer(CA::Render::CarPlayRegionLayer *this, CA::Render::Decoder *a2)
{
  *(void *)this = &unk_1ED02F670;
  *((_DWORD *)this + 2) = 1;
  *((_DWORD *)this + 3) = (CA::Render::Decoder::decode_int32(a2) << 8) | 6;
  ++dword_1EB2ADDE0;
  *(void *)this = &unk_1ED02E8E8;
  CFStringGetTypeID();
  *((void *)this + 2) = CA::Render::Decoder::decode_cfobject(a2);
  return this;
}

uint64_t CA::anonymous namespace'::box_filter_8(uint64_t this, int a2, uint64_t a3, const unsigned __int8 *a4, unsigned __int8 *a5, unsigned __int8 *a6, unsigned char *a7, unsigned __int8 *a8, int a9)
{
  if ((int)((2 * this) | 1) >= (int)a4)
  {
    if ((int)a4 >= 1)
    {
      uint64_t v22 = 0;
      int v23 = 1 - this;
      BOOL v24 = (int)this < 1;
      if ((int)this < 1) {
        int v25 = -(int)this;
      }
      else {
        int v25 = 1 - this;
      }
      uint64_t v26 = (int)a8;
      unint64_t v27 = v23;
      uint64_t v28 = (int)a6;
      if (v23 >= (int)this) {
        BOOL v24 = 1;
      }
      double v29 = &a5[(int)a6 * (uint64_t)v23];
      do
      {
        int v30 = 0;
        int v31 = v22 - this;
        if ((int)v22 - (int)this >= 0 && v31 < (int)a4) {
          int v30 = *(unsigned __int8 *)(a3 + a5[(int)v28 * (uint64_t)v31]);
        }
        if (v24)
        {
          int v32 = v25;
        }
        else
        {
          unint64_t v33 = v27;
          int32x2_t v34 = v29;
          int v35 = 2 * this - 1;
          do
          {
            if (v33 < a4) {
              v30 += *v34;
            }
            v34 += v28;
            ++v33;
            --v35;
          }
          while (v35);
          int v32 = this;
        }
        int v36 = v32 + v22;
        if (v36 >= 0 && v36 < (int)a4) {
          v30 += *(unsigned __int8 *)(a3 + a5[(int)v28 * (uint64_t)v36]);
        }
        *a7 = (v30 * a2 + 0x7FFFFF) >> 24;
        a7 += v26;
        ++v22;
        v29 += v28;
        ++v27;
      }
      while (v22 != a4);
    }
  }
  else
  {
    if ((this & 0x80000000) != 0)
    {
      int v10 = 0;
      int v9 = 0;
      float v16 = a5;
    }
    else
    {
      int v9 = 0;
      int v10 = 0;
      int v11 = -1;
      unsigned int v12 = a5;
      do
      {
        int v13 = v9 + v10;
        uint64_t v14 = *v12;
        v12 += (int)a6;
        int v15 = *(unsigned __int8 *)(a3 + v14);
        int v9 = v14 - v15;
        int v10 = v13 + v15;
        ++v11;
      }
      while (this != v11);
      float v16 = &a5[(this + 1) * (int)a6];
      if ((int)this >= 2)
      {
        int v17 = this - 1;
        do
        {
          unsigned int v18 = (v10 * a2 + 0x7FFFFF) >> 24;
          int v19 = v9 + v10;
          uint64_t v20 = *v16;
          int v21 = *(unsigned __int8 *)(a3 + v20);
          v16 += (int)a6;
          int v9 = v20 - v21;
          int v10 = v19 + v21;
          *a7 = v18;
          a7 += (int)a8;
          --v17;
        }
        while (v17);
        LODWORD(a4) = a4 - this + 1;
      }
    }
    int v37 = this + 1;
    if ((int)a4 <= (int)this + 1)
    {
      int v37 = (int)a4;
    }
    else
    {
      uint64_t v38 = 0;
      int v39 = this - a4 + 1;
      do
      {
        this = a5[v38];
        uint64_t v40 = v16[v38];
        int v41 = *(unsigned __int8 *)(a3 + this);
        unsigned int v42 = (v10 * a2 + 0x7FFFFF) >> 24;
        int v43 = *(unsigned __int8 *)(a3 + v40);
        int v10 = v41 + v43 + v9 + v10 - this;
        int v9 = v40 - (v41 + v43);
        *a7 = v42;
        a7 += (int)a8;
        v38 += (int)a6;
      }
      while (!__CFADD__(v39++, 1));
      a5 += v38;
    }
    if (v37 >= 1)
    {
      unsigned int v45 = v37 + 1;
      do
      {
        unsigned int v46 = (v10 * a2 + 0x7FFFFF) >> 24;
        uint64_t v47 = *a5;
        a5 += (int)a6;
        int v48 = *(unsigned __int8 *)(a3 + v47);
        int v10 = v9 + v10 - v47 + v48;
        int v9 = -v48;
        *a7 = v46;
        a7 += (int)a8;
        --v45;
      }
      while (v45 > 1);
    }
  }
  return this;
}

void CA::anonymous namespace'::gaussian_blur(CA::_anonymous_namespace_ *this, unsigned __int8 *a2, const unsigned __int8 *a3, const unsigned __int8 *a4, unsigned __int8 *a5, float a6, float a7)
{
  int v9 = (int)a4;
  unsigned int v10 = a3;
  unsigned int v66 = a2;
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  if (a6 == a7)
  {
  }
  else
  {
    unsigned int v65 = this;
    if ((int)a3 <= (int)a4) {
      int v12 = (int)a4;
    }
    else {
      int v12 = (int)a3;
    }
    size_t v13 = (v12 * a5);
    if (v13 > 0x1000)
    {
      uint64_t v14 = (char *)malloc_type_malloc((v12 * a5), 0x35B84029uLL);
      float v16 = (unsigned __int8 *)malloc_type_malloc(v13, 0xE6DB5BD6uLL);
    }
    else
    {
      MEMORY[0x1F4188790](this);
      uint64_t v14 = (char *)&v62 - ((v13 + 15) & 0x1FFFFFFF0);
      bzero(v14, v13);
      MEMORY[0x1F4188790](v15);
      float v16 = (unsigned __int8 *)v14;
      bzero(v14, v13);
    }
    if (v14) {
      BOOL v17 = v16 == 0;
    }
    else {
      BOOL v17 = 1;
    }
    if (!v17)
    {
      size_t v63 = v13;
      unsigned int v67 = v10;
      int v64 = v9;
      double v18 = a6;
      if (a6 > 0.6)
      {
        uint64_t v19 = 0;
        *(float *)&double v18 = (float)(a6 * 0.93999) + -0.5;
        int v20 = (int)*(float *)&v18;
        *(float *)&double v18 = *(float *)&v18 - truncf(*(float *)&v18);
        float32x4_t v21 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v18, 0);
        int32x4_t v22 = (int32x4_t)xmmword_184997F90;
        int32x4_t v23 = (int32x4_t)xmmword_184997FA0;
        int32x4_t v24 = (int32x4_t)xmmword_184997FB0;
        int32x4_t v25 = (int32x4_t)xmmword_184997FC0;
        v26.i64[0] = 0x1000000010;
        v26.i64[1] = 0x1000000010;
        do
        {
          v27.i64[0] = 0x3F0000003F000000;
          v27.i64[1] = 0x3F0000003F000000;
          v28.i64[0] = 0x3F0000003F000000;
          v28.i64[1] = 0x3F0000003F000000;
          v29.i64[0] = 0x3F0000003F000000;
          v29.i64[1] = 0x3F0000003F000000;
          v30.i64[0] = 0x3F0000003F000000;
          v30.i64[1] = 0x3F0000003F000000;
          *(int16x4_t *)v31.i8 = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v30, vcvtq_f32_s32(v25), v21)));
          v31.u64[1] = (unint64_t)vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v29, vcvtq_f32_s32(v24), v21)));
          *(int16x4_t *)v30.f32 = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v28, vcvtq_f32_s32(v23), v21)));
          *(int16x4_t *)&v30.u32[2] = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v27, vcvtq_f32_s32(v22), v21)));
          *(int8x16_t *)&v68[v19] = vuzp1q_s8(v31, (int8x16_t)v30);
          v19 += 16;
          int32x4_t v25 = vaddq_s32(v25, v26);
          int32x4_t v24 = vaddq_s32(v24, v26);
          int32x4_t v23 = vaddq_s32(v23, v26);
          int32x4_t v22 = vaddq_s32(v22, v26);
        }
        while (v19 != 256);
        if (v64 >= 1)
        {
          uint64_t v32 = (v20 + 1);
          int v33 = (float)((float)(8924200.0 / a6) + 0.5);
          int v34 = v64;
          int v35 = (unsigned __int8 *)v65;
          do
          {
            for (uint64_t i = 1; a5 != i; ++i)
            for (uint64_t j = 1; a5 != j; ++j)
            for (uint64_t k = 1; a5 != k; ++k)
            int v35 = &v66[(void)v35];
            BOOL v39 = __OFSUB__(v34--, 1);
          }
          while (!((v34 < 0) ^ v39 | (v34 == 0)));
        }
      }
      double v40 = a7;
      int v41 = (const unsigned __int8 *)v64;
      unsigned int v42 = (unsigned __int8 *)v65;
      if (a7 > 0.6)
      {
        uint64_t v43 = 0;
        *(float *)&double v40 = (float)(a7 * 0.93999) + -0.5;
        int v44 = (int)*(float *)&v40;
        *(float *)&double v40 = *(float *)&v40 - truncf(*(float *)&v40);
        float32x4_t v45 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v40, 0);
        int32x4_t v46 = (int32x4_t)xmmword_184997F90;
        int32x4_t v47 = (int32x4_t)xmmword_184997FA0;
        int32x4_t v48 = (int32x4_t)xmmword_184997FB0;
        int32x4_t v49 = (int32x4_t)xmmword_184997FC0;
        v50.i64[0] = 0x1000000010;
        v50.i64[1] = 0x1000000010;
        do
        {
          v51.i64[0] = 0x3F0000003F000000;
          v51.i64[1] = 0x3F0000003F000000;
          v52.i64[0] = 0x3F0000003F000000;
          v52.i64[1] = 0x3F0000003F000000;
          v53.i64[0] = 0x3F0000003F000000;
          v53.i64[1] = 0x3F0000003F000000;
          v54.i64[0] = 0x3F0000003F000000;
          v54.i64[1] = 0x3F0000003F000000;
          *(int16x4_t *)v55.i8 = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v54, vcvtq_f32_s32(v49), v45)));
          v55.u64[1] = (unint64_t)vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v53, vcvtq_f32_s32(v48), v45)));
          *(int16x4_t *)v54.f32 = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v52, vcvtq_f32_s32(v47), v45)));
          *(int16x4_t *)&v54.u32[2] = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v51, vcvtq_f32_s32(v46), v45)));
          *(int8x16_t *)&v68[v43] = vuzp1q_s8(v55, (int8x16_t)v54);
          v43 += 16;
          int32x4_t v49 = vaddq_s32(v49, v50);
          int32x4_t v48 = vaddq_s32(v48, v50);
          int32x4_t v47 = vaddq_s32(v47, v50);
          int32x4_t v46 = vaddq_s32(v46, v50);
        }
        while (v43 != 256);
        if ((int)v67 >= 1)
        {
          uint64_t v56 = (v44 + 1);
          int v57 = (float)((float)(8924200.0 / a7) + 0.5);
          do
          {
            float v58 = v42;
            for (uint64_t m = 1; a5 != m; ++m)
            for (uint64_t n = 1; a5 != n; ++n)
            for (iuint64_t i = 1; a5 != ii; ++ii)
            unsigned int v42 = &v58[a5];
            BOOL v39 = __OFSUB__(v67--, 1);
          }
          while (!(((v67 & 0x80000000) != 0) ^ v39 | (v67 == 0)));
        }
      }
      LODWORD(v13) = v63;
    }
    if (v13 > 0x1000 && v16) {
      free(v16);
    }
    if (v13 > 0x1000 && v14) {
      free(v14);
    }
  }
}

uint64_t CA::OGL::rect_transform_filter_bits(float64x2_t *a1, const double *a2, float64x2_t a3, float64x2_t a4, double a5, double a6)
{
  uint64_t v9 = CA::OGL::transform_filter_bits(a1, a2, a5, a6);
  *(double *)v11.i64 = a5;

  return CA::OGL::rect_filter_bits(a1, v9, v10, a3, a4, v11, a6);
}

uint64_t CA::OGL::render_subclass(CA::OGL::Renderer &,CA::OGL::Layer const*)::visitor::visit_subclass(uint64_t a1, float32x4_t *a2)
{
  v8[1] = *MEMORY[0x1E4F143B8];
  BOOL v4 = *(CA::OGL::Context ***)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  float32x4_t v5 = a2[1];
  __int16 v6 = *(float32x4_t **)(v3 + 24);
  if ((v6[2].i8[13] & 4) != 0) {
    float32x4_t v5 = vmlaq_n_f32(v6[1], v5, 1.0 - COERCE_FLOAT(HIDWORD(*(_OWORD *)&v6[1])));
  }
  v8[0] = vcvt_f16_f32(v5);
  return CA::OGL::render_solid_background(*v4, v3, (uint64_t)v8, 0);
}

void CA::OGL::render_subclass(CA::OGL::Renderer &,CA::OGL::Layer const*)::visitor::visit_subclass(uint64_t a1, uint64_t a2)
{
  CFAllocatorRef v2 = *(os_unfair_lock_s **)(a2 + 24);
  if (v2 && v2[31]._os_unfair_lock_opaque)
  {
    BOOL v4 = *(uint32x2_t **)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    uint64_t v6 = (uint64_t)&v2[28];
    int v7 = v2 + 6;
    os_unfair_lock_lock(v2 + 6);
    CA::OGL::render_emitter_cells(v4, v5, a2, *(void *)(a2 + 32), v6);
    os_unfair_lock_unlock(v7);
  }
}

int8x16_t CA::OGL::unrotate_texcoords(CA::OGL *this, int8x16_t *a2, float *a3)
{
  if (this)
  {
    result.i32[0] = a2->i32[1];
    a2->i32[1] = a2->i32[3];
    a2->i32[3] = result.i32[0];
    if ((this & 2) == 0)
    {
LABEL_3:
      if ((this & 4) == 0) {
        return result;
      }
LABEL_7:
      int8x16_t result = vextq_s8(*a2, *a2, 4uLL);
      *a2 = result;
      return result;
    }
  }
  else if ((this & 2) == 0)
  {
    goto LABEL_3;
  }
  result.i32[0] = a2->i32[0];
  a2->i32[0] = a2->i32[2];
  a2->i32[2] = result.i32[0];
  if ((this & 4) != 0) {
    goto LABEL_7;
  }
  return result;
}

uint64_t CA::OGL::ContentsGeometry::ContentsGeometry(uint64_t a1, int a2, int a3, unsigned int a4, _OWORD *a5, int *a6, double *a7, int a8, int a9)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_OWORD *)(a1 + 8) = *a5;
  uint64_t v15 = (void *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = a5[1];
  float v16 = (CA::Transform *)(a1 + 104);
  CA::Transform::set_affine((CA::Transform *)(a1 + 104), *a7, a7[1], a7[2], a7[3], a7[4], a7[5]);
  __asm { FMOV            V0.2D, #1.0 }
  float64x2_t v44 = _Q0;
  *(float64x2_t *)(a1 + 256) = _Q0;
  *(unsigned char *)(a1 + 272) = 1;
  *(_DWORD *)(a1 + 308) = a8;
  *(_DWORD *)(a1 + 312) = a9;
  *(_DWORD *)(a1 + 316) = -1082130432;
  if (a4 - 33 >= 3)
  {
    if (a4 > 0x23) {
      LOBYTE(v22) = 0;
    }
    else {
      unsigned int v22 = dword_184999500[a4];
    }
  }
  else
  {
    LOBYTE(v22) = 9;
  }
  *(unsigned char *)(a1 + 336) = v22;
  *(_DWORD *)(a1 + 337) = 0;
  *(_DWORD *)(a1 + 490) = 0;
  *(_DWORD *)(a1 + 493) = 0;
  double v23 = *(double *)(a1 + 8);
  double v24 = *(double *)(a1 + 16);
  if (v23 != 0.0 || v24 != 0.0)
  {
    _Q0 = CA::Transform::translate(v16, v23, v24, 0.0);
    void *v15 = 0;
    v15[1] = 0;
  }
  int v25 = a6[2];
  int v26 = a6[3];
  _Q0.f64[0] = *(float64_t *)(a1 + 24);
  double v27 = *(double *)(a1 + 32);
  double v28 = (double)v26;
  if (_Q0.f64[0] != (double)v25 || v27 != v28)
  {
    _Q0.f64[0] = _Q0.f64[0] / (double)v25;
    CA::Transform::scale((float64x2_t *)v16, _Q0, v27 / v28, 1.0);
    _Q0.f64[0] = (double)a6[2];
    double v27 = (double)a6[3];
    *(float64_t *)(a1 + 24) = _Q0.f64[0];
    *(double *)(a1 + 32) = v27;
    int v25 = a6[2];
    int v26 = a6[3];
  }
  int v31 = *a6;
  int v30 = a6[1];
  if (*(void *)a6 || v25 != a2 || v26 != a3)
  {
    float v32 = 1.0 / (float)a2;
    float v33 = 1.0 / (float)a3;
    float v34 = v32 * (float)v31;
    *(float *)(a1 + 276) = v34;
    float v35 = 1.0 - (float)(v33 * (float)(v26 + v30));
    *(float *)(a1 + 280) = v35;
    float v36 = v32 * (float)(v25 + v31);
    *(float *)(a1 + 284) = v36;
    float v37 = 1.0 - (float)(v33 * (float)v30);
    *(float *)(a1 + 288) = v37;
    int v38 = *(_DWORD *)(a1 + 308);
    *(_DWORD *)(a1 + 308) = v38 | 0x400;
    float v39 = v32 * 0.5;
    *(float *)(a1 + 392) = v34 + (float)(v32 * 0.5);
    float v40 = v33 * 0.5;
    float v41 = v35 + v40;
    *(float *)(a1 + 396) = v35 + v40;
    *(float *)(a1 + 400) = v36 - v39;
    float v42 = v37 - v40;
    *(float *)(a1 + 404) = v42;
    *(unsigned char *)(a1 + 491) = 1;
    if ((v38 & 0x800) == 0)
    {
      *(float *)(a1 + 396) = 1.0 - v42;
      *(float *)(a1 + 404) = 1.0 - v41;
    }
  }
  *(float64x2_t *)(a1 + 320) = v44;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a1 + 8);
  *(float64_t *)(a1 + 56) = _Q0.f64[0];
  *(double *)(a1 + 64) = v27;
  CA::Rect::apply_transform((int8x16_t *)(a1 + 40), v16, v17);
  return a1;
}

void CA::OGL::ContentsGeometry::scale(CA::OGL::ContentsGeometry *this, uint64_t a2, double *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if ((*((unsigned char *)this + 248) & 0x10) != 0 && *((float *)this + 79) < 0.0)
  {
    uint64_t v4 = 0;
    double v5 = *((double *)this + 2);
    double v6 = *((double *)this + 3);
    double v7 = *((double *)this + 4);
    double v10 = *((double *)this + 1);
    double v11 = v5;
    double v12 = v6 + v10;
    double v13 = v5;
    double v14 = v6 + v10;
    double v15 = v7 + v5;
    double v16 = v10;
    double v17 = v7 + v5;
    do
    {
      CA::Transform::apply_to_point2((float64x2_t *)((char *)this + 104), (double *)((char *)&v10 + v4), a3);
      v4 += 16;
    }
    while (v4 != 64);
    float v8 = (v13 * v10 + v15 * v12 + v17 * v14 + v16 * v11 - (v11 * v12 + v14 * v13 + v17 * v10 + v16 * v15))
       * 0.5
       / (v7
        * v6);
    float v9 = sqrtf(fabsf(v8));
    if (LODWORD(v9) >> 23 >= 0xFF) {
      float v9 = 1.0;
    }
    *((float *)this + 79) = v9;
  }
}

atomic_uint *CA::Render::Surface::set_tonemapped_surface(CA::Render::Surface *this, CA::Render::Surface *a2)
{
  int8x16_t result = (atomic_uint *)*((void *)this + 20);
  if (result != (atomic_uint *)a2)
  {
    uint64_t v4 = a2;
    if (result && atomic_fetch_add(result + 2, 0xFFFFFFFF) == 1) {
      int8x16_t result = (atomic_uint *)(*(uint64_t (**)(atomic_uint *))(*(void *)result + 16))(result);
    }
    double v5 = (atomic_uint *)((char *)v4 + 8);
    if (!atomic_fetch_add((atomic_uint *volatile)v4 + 2, 1u))
    {
      uint64_t v4 = 0;
      atomic_fetch_add(v5, 0xFFFFFFFF);
    }
    *((void *)this + 20) = v4;
  }
  return result;
}

void CA::OGL::map_layer_corners(uint64_t a1, uint64_t a2, double *a3)
{
  uint64_t v6 = 0;
  double v7 = *(double **)(a1 + 24);
  double v8 = v7[8];
  double v9 = v7[9];
  double v10 = v7[10];
  double v11 = v7[11];
  *a3 = v8;
  a3[1] = v9;
  double v12 = v10 + v8;
  a3[2] = v12;
  a3[3] = v9;
  double v13 = v11 + v9;
  a3[4] = v12;
  a3[5] = v13;
  a3[6] = v8;
  a3[7] = v13;
  do
  {
    uint64_t v14 = *(void *)(a1 + 16);
    double v15 = *(float64x2_t **)(v14 + 56);
    if (v15)
    {
      CA::Mat4Impl::mat4_apply_to_point2(v15, &a3[v6], a3);
    }
    else
    {
      double v16 = &a3[v6];
      double v17 = a3[v6 + 1];
      *double v16 = a3[v6] + *(double *)(v14 + 64);
      v16[1] = v17 + *(double *)(v14 + 72);
    }
    CA::Transform::apply_to_point2(*(float64x2_t **)(a2 + 24), &a3[v6], a3);
    v6 += 2;
  }
  while (v6 != 8);
}

uint64_t CA::OGL::prepare_layer_image(CA::OGL::Renderer &,CA::OGL::Layer *,CA::OGL::Gstate const&)::visitor::visit_subclass(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  *(void *)(v1 + 32) |= 0x4000uLL;
  *(_DWORD *)(*(void *)(v1 + 104) + 220) |= 0x800000u;
  *(_DWORD *)(*(void *)(*(void *)(result + 16) + 104) + 220) |= 0x100000u;
  return result;
}

{
  *(void *)(*(void *)(result + 16) + 32) |= 0x10000000uLL;
  return result;
}

uint64_t CA::OGL::prepare_layer_image(CA::OGL::Renderer &,CA::OGL::Layer *,CA::OGL::Gstate const&)::visitor::visit_subclass(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 16);
  uint64_t v4 = **(unsigned char ***)(a1 + 8);
  if (*(unsigned char *)(a2 + 13)) {
    v3[4] |= 0x2000000uLL;
  }
  uint64_t v5 = *(void *)(a2 + 24);
  if (v5 && *(_DWORD *)(v5 + 124))
  {
    uint64_t v6 = v3[4];
    v3[4] = v6 | 0x2000;
    int v7 = *(_DWORD *)(a2 + 72);
    if (v7 > 383)
    {
      if (v7 == 384 || v7 == 489)
      {
LABEL_17:
        v3[4] = v6 | 0x802000;
        double v10 = v3;
LABEL_18:
        *((_DWORD *)v10 + 75) |= 0x8000000u;
        goto LABEL_19;
      }
    }
    else
    {
      if ((v7 - 84) < 4) {
        goto LABEL_19;
      }
      if (v7 == 3)
      {
        if (!(*(unsigned int (**)(unsigned char *, uint64_t))(*(void *)v4 + 184))(v4, 33)
          || (uint64_t v8 = v3[2]) != 0 && (*(unsigned char *)(v8 + 25) & 4) != 0)
        {
          int v9 = 12;
        }
        else
        {
          int v9 = 56;
        }
        double v10 = v3;
        while (v9 == *(unsigned __int8 *)(v10[13] + 124))
        {
          double v10 = (void *)*v10;
          if (!v10) {
            goto LABEL_19;
          }
        }
        v10[4] |= 0x800000uLL;
        goto LABEL_18;
      }
    }
    if ((v6 & 4) != 0 && (v4[432] & 4) == 0 || (v6 & 0x100000) != 0) {
      goto LABEL_17;
    }
  }
LABEL_19:
  uint64_t result = CA::OGL::emitter_cells_have_offscreens(*(void *)(a2 + 32));
  if (result) {
    *(_DWORD *)(v3[13] + 220) |= 0x100000u;
  }
  return result;
}

atomic_uint *___ZN2CA3OGLL27vibrancy_strength_reductionERNS0_7ContextEPNS0_5LayerEPKNS_6Render10TypedArrayINS5_6FilterEEE_block_invoke(uint64_t a1, const __CFString *a2)
{
  CA::OGL::vibrancy_strength_reduction(CA::OGL::Context &,CA::OGL::Layer *,CA::Render::TypedArray<CA::Render::Filter> const*)::vibrant_color_matrix_name = (uint64_t)CA::Render::String::new_string(@"vibrantColorMatrixSourceOver", a2);
  CA::OGL::vibrancy_strength_reduction(CA::OGL::Context &,CA::OGL::Layer *,CA::Render::TypedArray<CA::Render::Filter> const*)::vibrant_dark_name = (uint64_t)CA::Render::String::new_string(@"vibrantDarkSourceOver", v2);
  CA::OGL::vibrancy_strength_reduction(CA::OGL::Context &,CA::OGL::Layer *,CA::Render::TypedArray<CA::Render::Filter> const*)::vibrant_light_name = (uint64_t)CA::Render::String::new_string(@"vibrantLightSourceOver", v3);
  CA::OGL::vibrancy_strength_reduction(CA::OGL::Context &,CA::OGL::Layer *,CA::Render::TypedArray<CA::Render::Filter> const*)::vibrant_dark_reversed_name = (uint64_t)CA::Render::String::new_string(@"vibrantDarkSourceOverReversed", v4);
  uint64_t result = CA::Render::String::new_string(@"vibrantLightSourceOverReversed", v5);
  CA::OGL::vibrancy_strength_reduction(CA::OGL::Context &,CA::OGL::Layer *,CA::Render::TypedArray<CA::Render::Filter> const*)::vibrant_light_reversed_name = (uint64_t)result;
  return result;
}

os_log_t ___ZN2CA3OGLL9trace_logEv_block_invoke()
{
  os_log_t result = os_log_create("com.apple.coreanimation", "Render.Trace");
  CA::OGL::trace_log(void)::log = (uint64_t)result;
  return result;
}

uint64_t CA::OGL::composite_detached(uint64_t a1, uint64_t a2, _DWORD *a3, double *a4, double *a5, char a6, uint64_t a7)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  double v14 = a4[2];
  if ((a6 & 4) != 0) {
    double v15 = a4[3];
  }
  else {
    double v15 = a4[2];
  }
  if (v15 == a5[2])
  {
    if ((a6 & 4) == 0) {
      double v14 = a4[3];
    }
    BOOL v16 = v14 != a5[3];
  }
  else
  {
    BOOL v16 = 1;
  }
  uint64_t v17 = *(void *)(a7 + 192);
  if (*((unsigned char *)a3 + 12) != 51 || !(*(unsigned int (**)(_DWORD *))(*(void *)a3 + 280))(a3)) {
    goto LABEL_34;
  }
  uint64_t v18 = (uint32x2_t *)*((void *)a3 + 20);
  if (v18) {
    goto LABEL_35;
  }
  if (BYTE12(xmmword_1EB2ACC30))
  {
    if (x_log_hook_p())
    {
      uint64_t v75 = a3[26];
      x_log_();
    }
    else
    {
      unsigned int v73 = x_log_category_ogl;
      if (os_log_type_enabled((os_log_t)x_log_category_ogl, OS_LOG_TYPE_DEBUG))
      {
        __int32 v74 = a3[26];
        v81[0].i32[0] = 67109120;
        v81[0].i32[1] = v74;
        _os_log_impl(&dword_184668000, v73, OS_LOG_TYPE_DEBUG, "Cannot Display TM (composite_detached), OnDemand MSR/GPU TM on surface (0x%x)", (uint8_t *)v81, 8u);
      }
    }
  }
  memset(v81, 0, sizeof(v81));
  uint64_t v19 = (atomic_uint *)*((void *)a3 + 21);
  if (!v19)
  {
    float32x4_t v28 = *((float32x4_t *)a3 + 15);
    *(float32x4_t *)((char *)&v81[5] + 8) = *((float32x4_t *)a3 + 16);
    float32x4_t v29 = *((float32x4_t *)a3 + 18);
    *(float32x4_t *)((char *)&v81[6] + 8) = *((float32x4_t *)a3 + 17);
    *(float32x4_t *)((char *)&v81[7] + 8) = v29;
    float32x4_t v30 = *((float32x4_t *)a3 + 11);
    *(float32x4_t *)((char *)&v81[1] + 8) = *((float32x4_t *)a3 + 12);
    float32x4_t v31 = *((float32x4_t *)a3 + 14);
    *(float32x4_t *)((char *)&v81[2] + 8) = *((float32x4_t *)a3 + 13);
    *(float32x4_t *)((char *)&v81[3] + 8) = v31;
    *(float32x4_t *)((char *)&v81[4] + 8) = v28;
    v81[8].i8[8] = *((unsigned char *)a3 + 304);
    *(float32x4_t *)((char *)v81 + 8) = v30;
    if (x_log_hook_p())
    {
      x_log_();
      goto LABEL_26;
    }
    uint64_t v32 = x_log_category_ogl;
    if (!os_log_type_enabled((os_log_t)x_log_category_ogl, OS_LOG_TYPE_ERROR)) {
      goto LABEL_26;
    }
    *(_WORD *)buf = 0;
    float v33 = "Could not tonemap surface because of invalid configuration";
    float v34 = v32;
    uint32_t v35 = 2;
LABEL_25:
    _os_log_impl(&dword_184668000, v34, OS_LOG_TYPE_ERROR, v33, buf, v35);
    goto LABEL_26;
  }
  uint64_t v78 = a2;
  atomic_fetch_add(v19 + 4, 1u);
  float32x4_t v20 = *((float32x4_t *)a3 + 16);
  *(float32x4_t *)((char *)&v81[4] + 8) = *((float32x4_t *)a3 + 15);
  float32x4_t v21 = *((float32x4_t *)a3 + 13);
  *(float32x4_t *)((char *)&v81[3] + 8) = *((float32x4_t *)a3 + 14);
  *(float32x4_t *)((char *)&v81[2] + 8) = v21;
  float32x4_t v22 = *((float32x4_t *)a3 + 11);
  *(float32x4_t *)((char *)&v81[1] + 8) = *((float32x4_t *)a3 + 12);
  float32x4_t v23 = *((float32x4_t *)a3 + 17);
  *(float32x4_t *)((char *)&v81[7] + 8) = *((float32x4_t *)a3 + 18);
  *(float32x4_t *)((char *)&v81[6] + 8) = v23;
  *(float32x4_t *)((char *)&v81[5] + 8) = v20;
  v81[0].i64[0] = (uint64_t)v19;
  v81[8].i8[8] = *((unsigned char *)a3 + 304);
  *(float32x4_t *)((char *)v81 + 8) = v22;
  uint64_t v24 = *(void *)(a7 + 216);
  unsigned int v76 = (*(uint64_t (**)(atomic_uint *, uint64_t))(*(void *)v19 + 56))(v19, v24);
  unsigned int v77 = v81[8].u8[8];
  uint64_t v25 = (*(uint64_t (**)(_DWORD *))(*(void *)a3 + 256))(a3);
  LOWORD(v75) = 1;
  int v26 = (CA::Render::Surface *)(*(uint64_t (**)(atomic_uint *, _DWORD *, uint64_t, unsigned __int32 *, void, void, void, uint64_t, float, uint64_t))(*(void *)v19 + 24))(v19, a3, v24, &v81[0].u32[2], v76, 0, v77, v25, 1.0, v75);
  if (!v26)
  {
    if (x_log_hook_p())
    {
      x_log_();
      a2 = v78;
      goto LABEL_26;
    }
    uint64_t v36 = x_log_category_ogl;
    a2 = v78;
    if (!os_log_type_enabled((os_log_t)x_log_category_ogl, OS_LOG_TYPE_ERROR)) {
      goto LABEL_26;
    }
    int v37 = a3[26];
    *(_DWORD *)buf = 67109120;
    int v80 = v37;
    float v33 = "Failed to tonemap surface 0x%x";
    float v34 = v36;
    uint32_t v35 = 8;
    goto LABEL_25;
  }
  double v27 = (atomic_uint *)v26;
  CA::Render::Surface::set_tonemapped_surface((CA::Render::Surface *)a3, v26);
  a2 = v78;
  if (atomic_fetch_add(v27 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v27 + 16))(v27);
  }
LABEL_26:
  uint64_t v38 = v81[0].i64[0];
  if (v81[0].i64[0] && atomic_fetch_add((atomic_uint *volatile)(v81[0].i64[0] + 16), 0xFFFFFFFF) == 1) {
    (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
  }
  uint64_t v18 = (uint32x2_t *)*((void *)a3 + 20);
  if (!v18)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      float v39 = x_log_category_ogl;
      if (os_log_type_enabled((os_log_t)x_log_category_ogl, OS_LOG_TYPE_ERROR))
      {
        __int32 v40 = a3[26];
        v81[0].i32[0] = 67109120;
        v81[0].i32[1] = v40;
        _os_log_impl(&dword_184668000, v39, OS_LOG_TYPE_ERROR, "No valid tonemapped surface available for 0x%x", (uint8_t *)v81, 8u);
      }
    }
LABEL_34:
    uint64_t v18 = (uint32x2_t *)a3;
  }
LABEL_35:
  v81[0] = 0uLL;
  float v41 = CA::OGL::Context::bind_image(a7, 0, v18, (double *)0x3F, v16, v16, 0, 0, 0.0, v81, 0);
  if (!v41) {
    goto LABEL_68;
  }
  uint64_t v43 = v41;
  uint64_t v44 = a2;
  *(unsigned char *)(*(void *)(a7 + 16) + 481) |= 1u;
  uint64_t v45 = *(void *)(a7 + 16);
  *(unsigned char *)(v45 + 480) = 7;
  *(unsigned char *)(v45 + 16) = 1;
  *(void *)(a7 + 128) = 0;
  uint64_t v46 = a7 + 834;
  *(void *)(a7 + 96) = a7 + 834;
  *(_OWORD *)(a7 + 104) = xmmword_184997E70;
  if (*(void *)(a7 + 136) <= 3uLL)
  {
    *(_WORD *)(a7 + 832) |= 0x20u;
    CA::OGL::Context::array_flush(a7);
    *(void *)(a7 + 128) = 0;
    *(void *)(a7 + 96) = v46;
    *(_OWORD *)(a7 + 104) = xmmword_184997E70;
  }
  LODWORD(v42) = v18[2].i32[1];
  double v47 = (double)v18[2].u32[0];
  double v48 = a4[1];
  float v49 = *a4 / v47;
  double v50 = (double)v42;
  float v51 = v48 / v50;
  float v52 = (a4[2] + *a4) / v47;
  float v53 = (a4[3] + v48) / v50;
  if (a6)
  {
    if ((a6 & 4) != 0)
    {
      if ((a6 & 2) != 0) {
        float v54 = v51;
      }
      else {
        float v54 = v53;
      }
      if ((a6 & 2) != 0) {
        float v51 = v53;
      }
      float v55 = *a4 / v47;
      goto LABEL_53;
    }
    float v54 = v51;
    float v56 = v53;
    if ((a6 & 2) != 0) {
      goto LABEL_46;
    }
    goto LABEL_43;
  }
  if ((a6 & 2) != 0)
  {
    float v54 = v53;
    float v56 = v51;
    if ((a6 & 4) == 0)
    {
LABEL_46:
      float v55 = v49;
      float v51 = v56;
      goto LABEL_53;
    }
LABEL_43:
    float v54 = v51;
    float v55 = v52;
    float v51 = v53;
    goto LABEL_44;
  }
  float v54 = v53;
  float v55 = (a4[2] + *a4) / v47;
LABEL_44:
  float v52 = v49;
LABEL_53:
  double v57 = a5[1];
  float v58 = *a5;
  float v59 = v57;
  float v60 = a5[2] + *a5;
  *(float *)&double v57 = a5[3] + v57;
  CA::OGL::Context::array_rect((void *)a7, v58, v59, v60, *(float *)&v57);
  if ((a6 & 4) != 0) {
    float v61 = v54;
  }
  else {
    float v61 = v51;
  }
  if ((a6 & 4) != 0) {
    float v62 = v52;
  }
  else {
    float v62 = v55;
  }
  if ((a6 & 4) != 0) {
    float v63 = v51;
  }
  else {
    float v63 = v54;
  }
  if ((a6 & 4) != 0) {
    float v64 = v55;
  }
  else {
    float v64 = v52;
  }
  uint64_t v65 = *(void *)(a7 + 120) + 48 * *(void *)(a7 + 128);
  *(float *)(v65 - 176) = v52;
  *(float *)(v65 - 172) = v61;
  *(float *)(v65 - 128) = v62;
  *(float *)(v65 - 124) = v51;
  *(float *)(v65 - 80) = v55;
  *(float *)(v65 - 76) = v63;
  *(float *)(v65 - 32) = v64;
  *(float *)(v65 - 28) = v54;
  CA::OGL::Context::array_flush(a7);
  if (byte_1EB2ACBE2)
  {
    uint64_t v67 = *(void *)(a7 + 16);
    *(unsigned char *)(v67 + 480) = 3;
    *(unsigned char *)(v67 + 16) = 0;
    *(void *)(a7 + 128) = 0;
    *(void *)(a7 + 96) = v46;
    *(_OWORD *)(a7 + 104) = xmmword_184997E70;
    CA::OGL::Context::array_check((CA::OGL::Context *)a7, 1);
    double v68 = a5[1];
    float v69 = *a5;
    float v70 = v68;
    float v71 = a5[2] + *a5;
    *(float *)&double v68 = a5[3] + v68;
    CA::OGL::Context::array_rect((void *)a7, v69, v70, v71, *(float *)&v68);
    uint64_t v72 = *(void *)(a7 + 120) + 48 * *(void *)(a7 + 128);
    *(void *)(v72 - 160) = 0x3804000000003804;
    *(void *)(v72 - 112) = 0x3804000000003804;
    *(void *)(v72 - 64) = 0x3804000000003804;
    *(void *)(v72 - 16) = 0x3804000000003804;
    CA::OGL::Context::array_flush(a7);
  }
  *(unsigned char *)(*(void *)(a7 + 16) + 481) &= ~1u;
  (*(void (**)(uint64_t, _OWORD *, void))(*(void *)a7 + 520))(a7, v43, 0);
  a2 = v44;
LABEL_68:
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v17 + 56))(v17, a1, a2);
  if (a1) {
    *(void *)(a1 + 96) &= ~0x8000uLL;
  }
  return result;
}

BOOL x_int_compare(uint64_t a1, uint64_t a2)
{
  return a1 != a2;
}

unint64_t x_int_hash(uint64_t a1)
{
  unint64_t v1 = (~(a1 << 32) + a1) ^ ((unint64_t)(~(a1 << 32) + a1) >> 22);
  unint64_t v2 = 9 * ((v1 + ~(v1 << 13)) ^ ((v1 + ~(v1 << 13)) >> 8));
  unint64_t v3 = (v2 ^ (v2 >> 15)) + ~((v2 ^ (v2 >> 15)) << 27);
  return v3 ^ (v3 >> 31);
}

CALayer *calayer_from_render_layer(uint64_t a1, uint64_t a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  CFStringRef v4 = (void *)MEMORY[0x185324A30]();
  CFStringRef v5 = *(uint64_t **)(a2 + 128);
  uint64_t v6 = a2;
  if (v5)
  {
    uint64_t v6 = *v5;
    if (!*v5) {
      uint64_t v6 = a2;
    }
  }
  unsigned int v7 = *(unsigned __int8 *)(v6 + 12);
  if (v7 <= 0x1C)
  {
    if (v7 == 3)
    {
      uint64_t v8 = +[CALayer layer];
      float32x4_t v20 = *(uint64_t **)(a2 + 128);
      if (v20 && (uint64_t v21 = *v20) != 0)
      {
        if (*(unsigned char *)(v21 + 12) == 3) {
          uint64_t v22 = v21;
        }
        else {
          uint64_t v22 = 0;
        }
      }
      else
      {
        uint64_t v22 = 0;
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2))
      {
        _ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 = 0u;
        *(_OWORD *)&qword_1E8F87980 = 0u;
        dword_1E8F87990 = 1065353216;
        __cxa_guard_release(&_ZGVZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2);
      }
      if (_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE10once_token_2 != -1) {
        dispatch_once(&_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE10once_token_2, &__block_literal_global_266);
      }
      get_setters_for_type<CA::Render::Layer>();
      for (uint64_t i = qword_1E8F87980; i; uint64_t i = *(void *)i)
      {
        memset(v34, 0, sizeof(v34));
        if (*(char *)(i + 39) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v34, *(const std::string::value_type **)(i + 16), *(void *)(i + 24));
        }
        else
        {
          *(_OWORD *)float v34 = *(_OWORD *)(i + 16);
          *(void *)&v34[16] = *(void *)(i + 32);
        }
        *(void *)&v34[24] = *(void *)(i + 40);
        (*(void (**)(CALayer *, uint64_t, uint64_t, unsigned char *, uint64_t))&v34[24])(v8, v22, a2, v34, a1);
        if ((v34[23] & 0x80000000) != 0) {
          operator delete(*(void **)v34);
        }
      }
      for (uint64_t j = qword_1E8F878E8; j; uint64_t j = *(void *)j)
      {
        memset(v34, 0, sizeof(v34));
        if (*(char *)(j + 39) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v34, *(const std::string::value_type **)(j + 16), *(void *)(j + 24));
        }
        else
        {
          *(_OWORD *)float v34 = *(_OWORD *)(j + 16);
          *(void *)&v34[16] = *(void *)(j + 32);
        }
        *(void *)&v34[24] = *(void *)(j + 40);
        (*(void (**)(CALayer *, uint64_t, uint64_t, unsigned char *, uint64_t))&v34[24])(v8, a2, a2, v34, a1);
        if ((v34[23] & 0x80000000) != 0) {
          operator delete(*(void **)v34);
        }
      }
    }
    else
    {
      if (v7 != 20)
      {
LABEL_40:
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          float32x4_t v31 = x_log_category_utilities;
          if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
          {
            if (v7 > 0x38 || (uint64_t v32 = CA::Render::type_names[v7], !*v32)) {
              uint64_t v32 = "<unknown>";
            }
            *(_DWORD *)float v34 = 136315138;
            *(void *)&v34[4] = v32;
            _os_log_impl(&dword_184668000, v31, OS_LOG_TYPE_ERROR, "calayer_from_render_layer missing type : %s", v34, 0xCu);
          }
        }
        uint64_t v8 = 0;
        goto LABEL_124;
      }
      uint64_t v8 = +[CALayer layer];
      double v12 = *(uint64_t **)(a2 + 128);
      if (v12 && (uint64_t v13 = *v12) != 0)
      {
        if (*(unsigned char *)(v13 + 12) == 20) {
          uint64_t v14 = v13;
        }
        else {
          uint64_t v14 = 0;
        }
      }
      else
      {
        uint64_t v14 = 0;
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0))
      {
        _ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 = 0u;
        *(_OWORD *)&qword_1E8F87878 = 0u;
        dword_1E8F87888 = 1065353216;
        __cxa_guard_release(&_ZGVZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0);
      }
      if (_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE10once_token_0 != -1) {
        dispatch_once(&_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE10once_token_0, &__block_literal_global_3106);
      }
      get_setters_for_type<CA::Render::Layer>();
      for (uint64_t k = qword_1E8F87878; k; uint64_t k = *(void *)k)
      {
        memset(v34, 0, sizeof(v34));
        if (*(char *)(k + 39) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v34, *(const std::string::value_type **)(k + 16), *(void *)(k + 24));
        }
        else
        {
          *(_OWORD *)float v34 = *(_OWORD *)(k + 16);
          *(void *)&v34[16] = *(void *)(k + 32);
        }
        *(void *)&v34[24] = *(void *)(k + 40);
        (*(void (**)(CALayer *, uint64_t, uint64_t, unsigned char *, uint64_t))&v34[24])(v8, v14, a2, v34, a1);
        if ((v34[23] & 0x80000000) != 0) {
          operator delete(*(void **)v34);
        }
      }
      for (uint64_t m = qword_1E8F878E8; m; uint64_t m = *(void *)m)
      {
        memset(v34, 0, sizeof(v34));
        if (*(char *)(m + 39) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v34, *(const std::string::value_type **)(m + 16), *(void *)(m + 24));
        }
        else
        {
          *(_OWORD *)float v34 = *(_OWORD *)(m + 16);
          *(void *)&v34[16] = *(void *)(m + 32);
        }
        *(void *)&v34[24] = *(void *)(m + 40);
        (*(void (**)(CALayer *, uint64_t, uint64_t, unsigned char *, uint64_t))&v34[24])(v8, a2, a2, v34, a1);
        if ((v34[23] & 0x80000000) != 0) {
          operator delete(*(void **)v34);
        }
      }
    }
  }
  else
  {
    switch(v7)
    {
      case 0x1Du:
        double v15 = off_1E52714D0;
        if ((*(_DWORD *)(a2 + 12) & 0x100) != 0) {
          double v15 = off_1E52715D0;
        }
        uint64_t v8 = (CALayer *)[(__objc2_class *)*v15 layer];
        get_setters_for_type<CA::Render::Layer>();
        get_setters_for_type<CA::Render::Layer>();
        for (uint64_t n = qword_1E8F878E8; n; uint64_t n = *(void *)n)
        {
          memset(v34, 0, sizeof(v34));
          if (*(char *)(n + 39) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v34, *(const std::string::value_type **)(n + 16), *(void *)(n + 24));
          }
          else
          {
            *(_OWORD *)float v34 = *(_OWORD *)(n + 16);
            *(void *)&v34[16] = *(void *)(n + 32);
          }
          *(void *)&v34[24] = *(void *)(n + 40);
          (*(void (**)(CALayer *, uint64_t, uint64_t, unsigned char *, uint64_t))&v34[24])(v8, a2, a2, v34, a1);
          if ((v34[23] & 0x80000000) != 0) {
            operator delete(*(void **)v34);
          }
        }
        break;
      case 0x2Cu:
        uint64_t v8 = +[CALayer layer];
        uint64_t v17 = *(uint64_t **)(a2 + 128);
        if (v17 && (uint64_t v18 = *v17) != 0)
        {
          if (*(unsigned char *)(v18 + 12) == 44) {
            uint64_t v19 = v18;
          }
          else {
            uint64_t v19 = 0;
          }
        }
        else
        {
          uint64_t v19 = 0;
        }
        if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3))
        {
          _ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 = 0u;
          *(_OWORD *)&qword_1E8F879B8 = 0u;
          dword_1E8F879C8 = 1065353216;
          __cxa_guard_release(&_ZGVZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3);
        }
        if (_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE10once_token_3 != -1) {
          dispatch_once(&_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE10once_token_3, &__block_literal_global_290);
        }
        get_setters_for_type<CA::Render::Layer>();
        for (iuint64_t i = qword_1E8F879B8; ii; iuint64_t i = *(void *)ii)
        {
          memset(v34, 0, sizeof(v34));
          if (*(char *)(ii + 39) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v34, *(const std::string::value_type **)(ii + 16), *(void *)(ii + 24));
          }
          else
          {
            *(_OWORD *)float v34 = *(_OWORD *)(ii + 16);
            *(void *)&v34[16] = *(void *)(ii + 32);
          }
          *(void *)&v34[24] = *(void *)(ii + 40);
          (*(void (**)(CALayer *, uint64_t, uint64_t, unsigned char *, uint64_t))&v34[24])(v8, v19, a2, v34, a1);
          if ((v34[23] & 0x80000000) != 0) {
            operator delete(*(void **)v34);
          }
        }
        for (juint64_t j = qword_1E8F878E8; jj; juint64_t j = *(void *)jj)
        {
          memset(v34, 0, sizeof(v34));
          if (*(char *)(jj + 39) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v34, *(const std::string::value_type **)(jj + 16), *(void *)(jj + 24));
          }
          else
          {
            *(_OWORD *)float v34 = *(_OWORD *)(jj + 16);
            *(void *)&v34[16] = *(void *)(jj + 32);
          }
          *(void *)&v34[24] = *(void *)(jj + 40);
          (*(void (**)(CALayer *, uint64_t, uint64_t, unsigned char *, uint64_t))&v34[24])(v8, a2, a2, v34, a1);
          if ((v34[23] & 0x80000000) != 0) {
            operator delete(*(void **)v34);
          }
        }
        break;
      case 0x2Eu:
        uint64_t v8 = +[CALayer layer];
        int v9 = *(uint64_t **)(a2 + 128);
        if (v9 && (uint64_t v10 = *v9) != 0)
        {
          if (*(unsigned char *)(v10 + 12) == 46) {
            uint64_t v11 = v10;
          }
          else {
            uint64_t v11 = 0;
          }
        }
        else
        {
          uint64_t v11 = 0;
        }
        if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1))
        {
          _ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 = 0u;
          *(_OWORD *)&qword_1E8F87948 = 0u;
          dword_1E8F87958 = 1065353216;
          __cxa_guard_release(&_ZGVZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1);
        }
        if (_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE10once_token_1 != -1) {
          dispatch_once(&_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE10once_token_1, &__block_literal_global_244);
        }
        get_setters_for_type<CA::Render::Layer>();
        for (kuint64_t k = qword_1E8F87948; kk; kuint64_t k = *(void *)kk)
        {
          memset(v34, 0, sizeof(v34));
          if (*(char *)(kk + 39) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v34, *(const std::string::value_type **)(kk + 16), *(void *)(kk + 24));
          }
          else
          {
            *(_OWORD *)float v34 = *(_OWORD *)(kk + 16);
            *(void *)&v34[16] = *(void *)(kk + 32);
          }
          *(void *)&v34[24] = *(void *)(kk + 40);
          (*(void (**)(CALayer *, uint64_t, uint64_t, unsigned char *, uint64_t))&v34[24])(v8, v11, a2, v34, a1);
          if ((v34[23] & 0x80000000) != 0) {
            operator delete(*(void **)v34);
          }
        }
        for (muint64_t m = qword_1E8F878E8; mm; muint64_t m = *(void *)mm)
        {
          memset(v34, 0, sizeof(v34));
          if (*(char *)(mm + 39) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v34, *(const std::string::value_type **)(mm + 16), *(void *)(mm + 24));
          }
          else
          {
            *(_OWORD *)float v34 = *(_OWORD *)(mm + 16);
            *(void *)&v34[16] = *(void *)(mm + 32);
          }
          *(void *)&v34[24] = *(void *)(mm + 40);
          (*(void (**)(CALayer *, uint64_t, uint64_t, unsigned char *, uint64_t))&v34[24])(v8, a2, a2, v34, a1);
          if ((v34[23] & 0x80000000) != 0) {
            operator delete(*(void **)v34);
          }
        }
        break;
      default:
        goto LABEL_40;
    }
  }
LABEL_124:
  return v8;
}

void sub_1848202E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void get_setters_for_type<CA::Render::Layer>()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZ20get_setters_for_typeIN2CA6Render5LayerEERKDavE9layer_map, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZ20get_setters_for_typeIN2CA6Render5LayerEERKDavE9layer_map))
  {
    _ZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEv();
    __cxa_guard_release(&_ZGVZ20get_setters_for_typeIN2CA6Render5LayerEERKDavE9layer_map);
  }
}

void sub_184820388(_Unwind_Exception *a1)
{
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  CFStringRef v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    uint64_t v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    CFStringRef v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }

  memmove(v5, __s, __sz + 1);
}

uint64_t _ZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEv()
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  memset(v8, 0, sizeof(v8));
  uint64_t v9 = 1065353216;
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>((uint64_t)v8, 0x40uLL);
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZ22get_setters_for_timingIN2CA6Render5LayerE7CALayerEDavE10timing_map, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZ22get_setters_for_timingIN2CA6Render5LayerE7CALayerEDavE10timing_map))
  {
    _ZZ22get_setters_for_timingIN2CA6Render5LayerE7CALayerEDavENKUlvE_clEv();
    __cxa_guard_release(&_ZGVZ22get_setters_for_timingIN2CA6Render5LayerE7CALayerEDavE10timing_map);
  }
  long long v5 = 0u;
  long long v6 = 0u;
  int v7 = dword_1E8F87928;
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>((uint64_t)&v5, qword_1E8F87910);
  BOOL v0 = (void *)qword_1E8F87918;
  if (qword_1E8F87918)
  {
    do
    {
      std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)> const&>((uint64_t)&v5, (uint64_t)(v0 + 2), (uint64_t)(v0 + 2));
      BOOL v0 = (void *)*v0;
    }
    while (v0);
  }
  for (uint64_t i = (void *)v6; i; uint64_t i = (void *)*i)
    std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)> const&>((uint64_t)v8, (uint64_t)(i + 2), (uint64_t)(i + 2));
  snake_case_to_camel_case("allows_display_compositing", 26, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 887, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("allows_edge_antialiasing", 24, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 888, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("allows_group_blending", 21, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 889, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("allows_group_opacity", 20, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 890, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("allows_hit_testing", 18, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 891, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("anchor_point", 12, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 895, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE4_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("anchor_point_z", 14, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 896, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE5_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("background_color_phase", 22, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 897, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE6_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("background_filters", 18, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 898, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE7_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("border_offset", 13, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 899, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE8_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("border_path_is_bounds", 21, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 900, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE9_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("border_width", 12, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 901, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE10_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("bounds", 6, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 902, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE11_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("compositing_filter", 18, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 903, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE12_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("contents", 8, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 904, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE13_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("contents_aligns_to_pixels", 25, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 905, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE14_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("contents_center", 15, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 906, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE15_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("contents_contains_subtitles", 27, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 907, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE16_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("contents_dither", 15, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 908, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE17_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("contents_gravity", 16, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 909, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE18_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("contents_multiply_color", 23, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 910, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE19_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("contents_opaque", 15, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 911, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE20_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("contents_rect", 13, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 912, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE21_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("contents_scale", 14, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 913, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE22_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("contents_swizzle", 16, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 914, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE23_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("contents_transform", 18, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 915, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE24_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("corner_contents", 15, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 916, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE25_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("corner_contents_center", 22, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 917, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE26_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("corner_contents_masks_edges", 27, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 918, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE27_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("corner_radii", 12, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 919, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE28_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("corner_radius", 13, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 920, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE29_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("creates_compositing_group", 25, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 921, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE30_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("disable_update_mask", 19, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 922, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE31_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("edge_antialiasing_mask", 22, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 923, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE32_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("filters", 7, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 924, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE33_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("flips_horizontal_axis", 21, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 925, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE34_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("hit_tests_as_opaque", 19, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 929, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE35_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("hit_tests_contents_alpha_channel", 32, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 930, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE36_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("inherits_timing", 15, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 931, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE37_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("inverts_mask", 12, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 932, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE38_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("inverts_shadow", 14, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 933, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE39_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("literal_contents_center", 23, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 934, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE40_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("magnification_filter", 20, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 935, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE41_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("mask", 4, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 936, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE42_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("masked_corners", 14, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 937, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE43_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("masks_to_bounds", 15, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 938, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE44_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("mesh_transform", 14, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 939, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE45_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("minification_filter", 19, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 940, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE46_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("name", 4, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 941, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE47_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("opacity", 7, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 942, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE48_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("position", 8, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 943, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE49_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("preloads_cache", 14, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 944, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE50_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("punchout_shadow", 15, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 945, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE51_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("rasterization_prefers_display_compositing", 41, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 946, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE52_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("rasterization_prefers_window_server_aware_backdrops", 51, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 947, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE53_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("rasterization_scale", 19, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 948, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE54_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("rim_color", 9, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 952, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE55_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("rim_opacity", 11, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 953, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE56_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("rim_path_is_bounds", 18, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 954, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE57_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("rim_width", 9, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 955, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE58_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("security_mode", 13, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 956, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE59_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("shadow_color", 12, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 960, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE60_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("shadow_offset", 13, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 961, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE61_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("shadow_opacity", 14, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 962, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE62_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("shadow_path", 11, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 963, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE63_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("shadow_path_is_bounds", 21, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 964, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE64_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("shadow_radius", 13, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 965, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE65_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("should_rasterize", 16, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 966, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE66_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("should_flatten", 14, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 967, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE67_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("should_reflatten", 16, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 968, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE68_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("soft_rim", 8, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 969, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE69_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("sorts_sublayers", 15, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 970, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE70_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("uses_web_kit_behavior", 21, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 971, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE71_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("sublayer_transform", 18, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 972, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE72_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("transform", 9, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 973, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE73_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("z_position", 10, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 974, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE74_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "wantsExtendedDynamicRangeContent");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)v10))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 976, "\"Duplicated Entry !!\" && map.map.find (\"wantsExtendedDynamicRangeContent\") == map.map.end ()");
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "wantsExtendedDynamicRangeContent");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)v10, (uint64_t)v10)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE75_8__invokeES8_SA_SA_SJ_SM_;
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "gain");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)v10))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 977, "\"Duplicated Entry !!\" && map.map.find (\"gain\") == map.map.end ()");
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "gain");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)v10, (uint64_t)v10)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE76_8__invokeES8_SA_SA_SJ_SM_;
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "doubleSided");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)v10))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 978, "\"Duplicated Entry !!\" && map.map.find (\"doubleSided\") == map.map.end ()");
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "doubleSided");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)v10, (uint64_t)v10)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE77_8__invokeES8_SA_SA_SJ_SM_;
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "geometryFlipped");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)v10))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 979, "\"Duplicated Entry !!\" && map.map.find (\"geometryFlipped\") == map.map.end ()");
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "geometryFlipped");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)v10, (uint64_t)v10)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE78_8__invokeES8_SA_SA_SJ_SM_;
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "hidden");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)v10))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 980, "\"Duplicated Entry !!\" && map.map.find (\"hidden\") == map.map.end ()");
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "hidden");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)v10, (uint64_t)v10)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE79_8__invokeES8_SA_SA_SJ_SM_;
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "minificationFilterBias");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)v10))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 981, "\"Duplicated Entry !!\" && map.map.find (\"minificationFilterBias\") == map.map.end ()");
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "minificationFilterBias");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)v10, (uint64_t)v10)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE80_8__invokeES8_SA_SA_SJ_SM_;
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "presentationModifiers");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)v10))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 982, "\"Duplicated Entry !!\" && map.map.find (\"presentationModifiers\") == map.map.end ()");
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "presentationModifiers");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)v10, (uint64_t)v10)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE81_8__invokeES8_SA_SA_SJ_SM_;
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "toneMapToStandardDynamicRange");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)v10))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 983, "\"Duplicated Entry !!\" && map.map.find (\"toneMapToStandardDynamicRange\") == map.map.end ()");
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "toneMapToStandardDynamicRange");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)v10, (uint64_t)v10)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE82_8__invokeES8_SA_SA_SJ_SM_;
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "contentsMaximumDesiredEDR");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)v10))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 988, "\"Duplicated Entry !!\" && map.map.find (\"contentsMaximumDesiredEDR\") == map.map.end ()");
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "contentsMaximumDesiredEDR");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)v10, (uint64_t)v10)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE83_8__invokeES8_SA_SA_SJ_SM_;
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "contentsEDRStrength");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)v10))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 989, "\"Duplicated Entry !!\" && map.map.find (\"contentsEDRStrength\") == map.map.end ()");
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "contentsEDRStrength");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)v10, (uint64_t)v10)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE84_8__invokeES8_SA_SA_SJ_SM_;
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "displayMaximumDesiredEDR");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)v10))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 991, "\"Duplicated Entry !!\" && map.map.find (\"displayMaximumDesiredEDR\") == map.map.end ()");
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "displayMaximumDesiredEDR");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)v10, (uint64_t)v10)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE85_8__invokeES8_SA_SA_SJ_SM_;
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  snake_case_to_camel_case("sublayers", 9, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1009, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE86_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("animations", 10, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1022, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE87_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("background_color", 16, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1026, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE88_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("border_color", 12, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1030, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE89_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("contents_scaling", 16, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1034, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE90_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("corner_curve", 12, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1046, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE91_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("tone_map_mode", 13, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1058, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE92_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("defines_display_region_of_interest", 34, (char *)v10);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1064, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v10);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE93_8__invokeES8_SA_SA_SJ_SM_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "actions");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)v10))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1109, "\"Duplicated Entry !!\" && map.map.find (\"actions\") == map.map.end ()");
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "actions");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)v10, (uint64_t)v10)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE94_8__invokeES8_SA_SA_SJ_SM_;
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "autoresizingMask");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)v10))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1110, "\"Duplicated Entry !!\" && map.map.find (\"autoresizingMask\") == map.map.end ()");
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "autoresizingMask");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)v10, (uint64_t)v10)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE95_8__invokeES8_SA_SA_SJ_SM_;
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "canDrawConcurrently");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)v10))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1111, "\"Duplicated Entry !!\" && map.map.find (\"canDrawConcurrently\") == map.map.end ()");
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "canDrawConcurrently");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)v10, (uint64_t)v10)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE96_8__invokeES8_SA_SA_SJ_SM_;
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "clearsContext");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)v10))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1112, "\"Duplicated Entry !!\" && map.map.find (\"clearsContext\") == map.map.end ()");
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "clearsContext");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)v10, (uint64_t)v10)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE97_8__invokeES8_SA_SA_SJ_SM_;
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "constraints");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)v10))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1113, "\"Duplicated Entry !!\" && map.map.find (\"constraints\") == map.map.end ()");
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "constraints");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)v10, (uint64_t)v10)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE98_8__invokeES8_SA_SA_SJ_SM_;
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "contentsFormat");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)v10))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1114, "\"Duplicated Entry !!\" && map.map.find (\"contentsFormat\") == map.map.end ()");
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "contentsFormat");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)v10, (uint64_t)v10)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE99_8__invokeES8_SA_SA_SJ_SM_;
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "delegate");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)v10))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1115, "\"Duplicated Entry !!\" && map.map.find (\"delegate\") == map.map.end ()");
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "delegate");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)v10, (uint64_t)v10)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE100_8__invokeES8_SA_SA_SJ_SM_;
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "drawsAsynchronously");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)v10))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1116, "\"Duplicated Entry !!\" && map.map.find (\"drawsAsynchronously\") == map.map.end ()");
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "drawsAsynchronously");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)v10, (uint64_t)v10)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE101_8__invokeES8_SA_SA_SJ_SM_;
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "floating");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)v10))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1117, "\"Duplicated Entry !!\" && map.map.find (\"floating\") == map.map.end ()");
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "floating");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)v10, (uint64_t)v10)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE102_8__invokeES8_SA_SA_SJ_SM_;
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "frame");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)v10))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1118, "\"Duplicated Entry !!\" && map.map.find (\"frame\") == map.map.end ()");
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "frame");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)v10, (uint64_t)v10)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE103_8__invokeES8_SA_SA_SJ_SM_;
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "frozen");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)v10))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1119, "\"Duplicated Entry !!\" && map.map.find (\"frozen\") == map.map.end ()");
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "frozen");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)v10, (uint64_t)v10)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE104_8__invokeES8_SA_SA_SJ_SM_;
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "layoutManager");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)v10))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1120, "\"Duplicated Entry !!\" && map.map.find (\"layoutManager\") == map.map.end ()");
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "layoutManager");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)v10, (uint64_t)v10)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE105_8__invokeES8_SA_SA_SJ_SM_;
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "margin");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)v10))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1121, "\"Duplicated Entry !!\" && map.map.find (\"margin\") == map.map.end ()");
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "margin");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)v10, (uint64_t)v10)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE106_8__invokeES8_SA_SA_SJ_SM_;
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "needsDisplayOnBoundsChange");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)v10))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1122, "\"Duplicated Entry !!\" && map.map.find (\"needsDisplayOnBoundsChange\") == map.map.end ()");
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "needsDisplayOnBoundsChange");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)v10, (uint64_t)v10)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE107_8__invokeES8_SA_SA_SJ_SM_;
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "needsLayoutOnGeometryChange");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)v10))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1123, "\"Duplicated Entry !!\" && map.map.find (\"needsLayoutOnGeometryChange\") == map.map.end ()");
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "needsLayoutOnGeometryChange");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)v10, (uint64_t)v10)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE108_8__invokeES8_SA_SA_SJ_SM_;
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "opaque");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)v10))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1124, "\"Duplicated Entry !!\" && map.map.find (\"opaque\") == map.map.end ()");
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "opaque");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)v10, (uint64_t)v10)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE109_8__invokeES8_SA_SA_SJ_SM_;
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "sizeRequisition");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)v10))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1125, "\"Duplicated Entry !!\" && map.map.find (\"sizeRequisition\") == map.map.end ()");
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "sizeRequisition");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)v10, (uint64_t)v10)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE110_8__invokeES8_SA_SA_SJ_SM_;
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "states");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)v10))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1126, "\"Duplicated Entry !!\" && map.map.find (\"states\") == map.map.end ()");
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "states");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)v10, (uint64_t)v10)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE111_8__invokeES8_SA_SA_SJ_SM_;
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "stateTransitions");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)v10))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1127, "\"Duplicated Entry !!\" && map.map.find (\"stateTransitions\") == map.map.end ()");
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "stateTransitions");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)v10, (uint64_t)v10)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE112_8__invokeES8_SA_SA_SJ_SM_;
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "style");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)v10))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1128, "\"Duplicated Entry !!\" && map.map.find (\"style\") == map.map.end ()");
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "style");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)v10, (uint64_t)v10)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE113_8__invokeES8_SA_SA_SJ_SM_;
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "superlayer");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)v10))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1129, "\"Duplicated Entry !!\" && map.map.find (\"superlayer\") == map.map.end ()");
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "superlayer");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)v10, (uint64_t)v10)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE114_8__invokeES8_SA_SA_SJ_SM_;
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "unsafeUnretainedDelegate");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)v10))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1130, "\"Duplicated Entry !!\" && map.map.find (\"unsafeUnretainedDelegate\") == map.map.end ()");
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "unsafeUnretainedDelegate");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)v10, (uint64_t)v10)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE115_8__invokeES8_SA_SA_SJ_SM_;
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "contentsDirtyRect");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)v10))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1131, "\"Duplicated Entry !!\" && map.map.find (\"contentsDirtyRect\") == map.map.end ()");
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "contentsDirtyRect");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)v10, (uint64_t)v10)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE116_8__invokeES8_SA_SA_SJ_SM_;
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "acceleratesDrawing");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)v10))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1134, "\"Duplicated Entry !!\" && map.map.find (\"acceleratesDrawing\") == map.map.end ()");
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "acceleratesDrawing");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)v10, (uint64_t)v10)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE117_8__invokeES8_SA_SA_SJ_SM_;
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "invertsContentsAreFlipped");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)v10))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1135, "\"Duplicated Entry !!\" && map.map.find (\"invertsContentsAreFlipped\") == map.map.end ()");
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "invertsContentsAreFlipped");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)v10, (uint64_t)v10)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE118_8__invokeES8_SA_SA_SJ_SM_;
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "motionBlurAmount");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)v10))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1136, "\"Duplicated Entry !!\" && map.map.find (\"motionBlurAmount\") == map.map.end ()");
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "motionBlurAmount");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)v10, (uint64_t)v10)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE119_8__invokeES8_SA_SA_SJ_SM_;
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "continuousCorners");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v8[0], *((unint64_t *)&v8[0] + 1), (uint64_t)v10))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1137, "\"Duplicated Entry !!\" && map.map.find (\"continuousCorners\") == map.map.end ()");
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v10, "continuousCorners");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v8, (uint64_t)v10, (uint64_t)v10)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE120_8__invokeES8_SA_SA_SJ_SM_;
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__hash_table((uint64_t)&_ZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavE9layer_map, (uint64_t *)v8);
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)&v5);
  return std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)v8);
}

void sub_184824FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
}

void std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    int v7 = (uint64_t *)a2;
  }
  else {
    int v7 = *(uint64_t **)a2;
  }
  if (v6 >= 0) {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v8 = *(void *)(a2 + 8);
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v14 = v9;
      if (v9 >= v11) {
        unint64_t v14 = v9 % v11;
      }
    }
    else
    {
      unint64_t v14 = (v11 - 1) & v9;
    }
    double v15 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v14);
    if (v15)
    {
      for (uint64_t i = *v15; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, (unsigned __int8 *)a2)) {
            return;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
          }
          else
          {
            v17 &= v11 - 1;
          }
          if (v17 != v14) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v14 = 0;
  }
  uint64_t v18 = operator new(0x30uLL);
  *uint64_t v18 = 0;
  v18[1] = v10;
  uint64_t v19 = (std::string *)(v18 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    _OWORD v18[4] = *(void *)(a3 + 16);
  }
  v18[5] = *(void *)(a3 + 24);
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v14 = v10 % v11;
      }
      else {
        unint64_t v14 = v10;
      }
    }
    else
    {
      unint64_t v14 = (v11 - 1) & v10;
    }
  }
  uint64_t v26 = *(void *)a1;
  double v27 = *(void **)(*(void *)a1 + 8 * v14);
  if (v27)
  {
    *uint64_t v18 = *v27;
LABEL_47:
    *double v27 = v18;
    goto LABEL_48;
  }
  *uint64_t v18 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v18;
  *(void *)(v26 + 8 * v14) = a1 + 16;
  if (*v18)
  {
    unint64_t v28 = *(void *)(*v18 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11) {
        v28 %= v11;
      }
    }
    else
    {
      v28 &= v11 - 1;
    }
    double v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_47;
  }
LABEL_48:
  ++*(void *)(a1 + 24);
}

void sub_184825BA0(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,void *>>>::operator()[abi:nn180100](0, v1);
  _Unwind_Resume(a1);
}

uint64_t snake_case_to_camel_case(const char *a1, int a2, char *a3)
{
  uint64_t v6 = 0;
  LODWORD(v7) = 0;
  do
  {
    uint64_t v8 = v6;
    int v9 = v7;
    uint64_t v7 = (int)v7;
    do
    {
      int v10 = v7;
      uint64_t result = a1[v7++];
    }
    while (result == 95);
    if (v9 != v10) {
      uint64_t result = __toupper(result);
    }
    uint64_t v6 = v8 + 1;
    a3[v8] = result;
    LODWORD(v7) = v10 + 1;
  }
  while (v10 + 1 < a2);
  a3[v6] = 0;
  return result;
}

void *std::string::basic_string[abi:nn180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    uint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  int v6 = *(char *)(a3 + 23);
  if (v6 >= 0) {
    uint64_t v7 = (uint64_t *)a3;
  }
  else {
    uint64_t v7 = *(uint64_t **)a3;
  }
  if (v6 >= 0) {
    unint64_t v8 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    unint64_t v8 = *(void *)(a3 + 8);
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  if (!a2) {
    return 0;
  }
  unint64_t v10 = v9;
  uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v11.i16[0] = vaddlv_u8(v11);
  unint64_t v12 = v11.u32[0];
  if (v11.u32[0] > 1uLL)
  {
    unint64_t v13 = v9;
    if (v9 >= a2) {
      unint64_t v13 = v9 % a2;
    }
  }
  else
  {
    unint64_t v13 = (a2 - 1) & v9;
  }
  unint64_t v14 = *(unsigned __int8 ***)(a1 + 8 * v13);
  if (!v14) {
    return 0;
  }
  for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
  {
    unint64_t v16 = *((void *)i + 1);
    if (v16 == v10)
    {
      if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, (unsigned __int8 *)a3)) {
        return i;
      }
    }
    else
    {
      if (v12 > 1)
      {
        if (v16 >= a2) {
          v16 %= a2;
        }
      }
      else
      {
        v16 &= a2 - 1;
      }
      if (v16 != v13) {
        return 0;
      }
    }
  }
  return i;
}

void *std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    uint64_t v7 = (uint64_t *)a2;
  }
  else {
    uint64_t v7 = *(uint64_t **)a2;
  }
  if (v6 >= 0) {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v8 = *(void *)(a2 + 8);
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v14 = v9;
      if (v9 >= v11) {
        unint64_t v14 = v9 % v11;
      }
    }
    else
    {
      unint64_t v14 = (v11 - 1) & v9;
    }
    double v15 = *(void ***)(*(void *)a1 + 8 * v14);
    if (v15)
    {
      for (uint64_t i = *v15; i; uint64_t i = *(void **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)i + 16, (unsigned __int8 *)a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
          }
          else
          {
            v17 &= v11 - 1;
          }
          if (v17 != v14) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v14 = 0;
  }
  uint64_t i = operator new(0x30uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v10;
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  uint64_t v18 = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *((void *)i + 4) = v18;
  *((void *)i + 5) = 0;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    BOOL v21 = 1;
    if (v11 >= 3) {
      BOOL v21 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v11);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>(a1, v24);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v14 = v10 % v11;
      }
      else {
        unint64_t v14 = v10;
      }
    }
    else
    {
      unint64_t v14 = (v11 - 1) & v10;
    }
  }
  uint64_t v25 = *(void *)a1;
  uint64_t v26 = *(void **)(*(void *)a1 + 8 * v14);
  if (v26)
  {
    *(void *)uint64_t i = *v26;
LABEL_44:
    *uint64_t v26 = i;
    goto LABEL_45;
  }
  *(void *)uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v25 + 8 * v14) = a1 + 16;
  if (*(void *)i)
  {
    unint64_t v27 = *(void *)(*(void *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v27 >= v11) {
        v27 %= v11;
      }
    }
    else
    {
      v27 &= v11 - 1;
    }
    uint64_t v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_44;
  }
LABEL_45:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_184826048(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table(uint64_t a1)
{
  unint64_t v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  size_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE93_8__invokeES8_SA_SA_SJ_SM_(void *a1, const char *a2, uint64_t a3)
{
  return [a1 setDefinesDisplayRegionOfInterest:(*(void *)(a3 + 40) >> 45) & 1];
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE92_8__invokeES8_SA_SA_SJ_SM_(void *a1, const char *a2, uint64_t a3)
{
  unsigned int v3 = *(_DWORD *)(a3 + 40);
  size_t v4 = @"ifSupported";
  if (((v3 >> 4) & 3) == 1) {
    size_t v4 = @"never";
  }
  if (((v3 >> 4) & 3) != 0) {
    size_t v5 = v4;
  }
  else {
    size_t v5 = @"automatic";
  }
  return [a1 setToneMapMode:v5];
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE91_8__invokeES8_SA_SA_SJ_SM_(void *a1, const char *a2, uint64_t a3)
{
  unsigned int v3 = (*(_DWORD *)(a3 + 40) & 3) - 1;
  if (v3 > 2) {
    size_t v4 = &kCACornerCurveCircular;
  }
  else {
    size_t v4 = (const CALayerCornerCurve *)off_1E5273528[v3];
  }
  return [a1 setCornerCurve:*v4];
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE90_8__invokeES8_SA_SA_SJ_SM_(void *a1, const char *a2, uint64_t a3)
{
  if ((*(void *)(a3 + 40) & 0x8000) != 0) {
    unsigned int v3 = @"repeat";
  }
  else {
    unsigned int v3 = @"stretch";
  }
  return [a1 setContentsScaling:v3];
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE89_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, CGColorSpace **a5)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a3 + 128);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 128);
    long long v8 = *(_OWORD *)(v6 + 240);
  }
  else
  {
    uint64_t v7 = 0;
    long long v8 = xmmword_184997DF0;
  }
  long long v11 = v8;
  unint64_t v9 = cg_color_from_pattern_or_color(a5, v7, (float *)&v11);

  return [a1 setValue:v9 forKey:@"borderColor"];
}

CGColor *cg_color_from_pattern_or_color(CGColorSpace **a1, uint64_t a2, float *a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    uint64_t v4 = *(void *)(a2 + 128);
    if (v4)
    {
      size_t v5 = (_OWORD *)(a2 + 16);
      int v6 = *(_DWORD *)(a2 + 12);
      uint64_t v7 = (CGImage *)ns_object_from_render_object(a1, *(void *)(a2 + 128), 0);
      unint64_t v10 = v7;
      double v11 = *(double *)(a2 + 64);
      double v12 = *(double *)(a2 + 72);
      double v13 = *(double *)(a2 + 80);
      if (v11 == 0.0
        && v12 == 0.0
        && (LODWORD(v8) = *(_DWORD *)(v4 + 16), v13 == (double)v8)
        && (double v14 = *(double *)(a2 + 88), LODWORD(v9) = *(_DWORD *)(v4 + 20), v14 == (double)v9)
        && *(double *)(a2 + 96) == v13
        && *(double *)(a2 + 104) == v14)
      {
        long long v15 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)&v22.a = *v5;
        *(_OWORD *)&v22.double c = v15;
        *(_OWORD *)&v22.tCGFloat x = *(_OWORD *)(a2 + 48);
        unint64_t v16 = (void *)CGPatternCreateWithImage2();
      }
      else
      {
        long long v19 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)&v22.a = *v5;
        *(_OWORD *)&v22.double c = v19;
        *(_OWORD *)&v22.tCGFloat x = *(_OWORD *)(a2 + 48);
        uint64_t v20 = *(void *)(a2 + 88);
        unint64_t v16 = CGPatternCreate(v7, *(CGRect *)&v11, &v22, *(CGFloat *)(a2 + 96), *(CGFloat *)(a2 + 104), kCGPatternTilingNoDistortion, (v6 & 0x200) == 0, &id_from_value<CGColor *,CA::Render::Pattern const*&>(ReverseSerializationState const&,CA::Render::Pattern const*&)::pattern_cbs);
        if (v16) {
          CGImageRetain(v10);
        }
      }
      id v21 = v16;
      return CA_CGPatternColorCreate((CGPattern *)v16);
    }
    else
    {
      return 0;
    }
  }
  else
  {
    unint64_t v17 = *a1;
    return cg_color_from_values<CA::Vec4<float>>(a3, v17);
  }
}

CGColor *cg_color_from_values<CA::Vec4<float>>(float *a1, CGColorSpace *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  float v3 = *a1;
  float v4 = a1[1];
  v17.f64[0] = *a1;
  v17.f64[1] = v4;
  float v5 = a1[2];
  float v6 = a1[3];
  v18[0] = v5;
  v18[1] = v6;
  if (v6 == 0.0 && v5 == 0.0 && v4 == 0.0 && v3 == 0.0) {
    return 0;
  }
  unint64_t v8 = (CGColorSpace *)CAGetColorSpace(0x1Cu);
  unint64_t v9 = v8;
  uint64_t v10 = 0;
  if (a2) {
    unint64_t v8 = a2;
  }
  do
  {
    double v11 = v17.f64[v10];
    if (v11 < 0.0 || v11 > 1.0)
    {
      Extended = CAColorSpaceCreateExtended(v8);
      goto LABEL_15;
    }
    ++v10;
  }
  while (v10 != 4);
  Extended = CGColorSpaceRetain(v8);
LABEL_15:
  double v14 = Extended;
  long long v15 = CGColorCreate(Extended, v17.f64);
  CA_CGColorGetRGBComponents(v15, v9, v17.f64);
  CGColorRelease(v15);
  if (v18[1] <= 0.0)
  {
    float64x2_t v17 = 0u;
    *(_OWORD *)uint64_t v18 = 0u;
  }
  else
  {
    float64x2_t v17 = vdivq_f64(v17, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v18[1], 0));
    v18[0] = v18[0] / v18[1];
  }
  uint64_t v7 = CGColorCreate(v14, v17.f64);
  if (v14) {
    CFRelease(v14);
  }
  return v7;
}

void sub_184826588(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

CALayer *ns_object_from_render_object(CGColorSpace **a1, uint64_t a2, const char *a3)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 0;
  }
  unsigned int v5 = *(unsigned __int8 *)(a2 + 12);
  if (v5 > 0x10)
  {
    switch(*(unsigned char *)(a2 + 12))
    {
      case 0x11:
        return (CALayer *)filter_from_render_filter((uint64_t)a1, a2);
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x16:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1C:
      case 0x1E:
      case 0x21:
      case 0x22:
      case 0x23:
        goto LABEL_80;
      case 0x15:
      case 0x1B:
      case 0x1F:
      case 0x20:
        goto LABEL_20;
      case 0x17:
        double v11 = *(CGColorSpace **)(a2 + 48);
        if (!v11) {
          double v11 = (CGColorSpace *)CAGetColorSpace(0x1Du);
        }
        double v12 = *(const UInt8 **)(a2 + 96);
        CFIndex v13 = CA::Render::Image::data_size((CA::Render::Image *)a2);
        CFDataRef v14 = CFDataCreate(0, v12, v13);
        long long v15 = CGDataProviderCreateWithCFData(v14);
        uint64_t v16 = *(unsigned __int8 *)(a2 + 152);
        if (v16 == 9)
        {
          *(_OWORD *)decode = xmmword_184997D50;
          CGImageRef v17 = CGImageMaskCreate(*(unsigned int *)(a2 + 16), *(unsigned int *)(a2 + 20), 8uLL, 8uLL, *(void *)(a2 + 160), v15, decode, 1);
        }
        else
        {
          if (v16 > 0x23)
          {
            size_t v27 = 0;
            size_t v26 = 0;
            CGBitmapInfo v28 = 0;
          }
          else
          {
            size_t v26 = dword_184999500[v16];
            size_t v27 = dword_1849993D8[v16];
            CGBitmapInfo v28 = dword_184999348[v16];
          }
          CGImageRef v17 = CGImageCreate(*(unsigned int *)(a2 + 16), *(unsigned int *)(a2 + 20), v26, v27, *(void *)(a2 + 160), v11, v28, v15, 0, 1, kCGRenderingIntentDefault);
        }
        CGImageRef v29 = v17;
        CFRelease(v14);
        CGDataProviderRelease(v15);
        return (CALayer *)v29;
      case 0x1D:
        return calayer_from_render_layer((uint64_t)a1, a2);
      case 0x24:
        CFMutableDataRef Mutable = CGPathCreateMutable();
        *(void *)&decode[0] = Mutable;
        CA::Render::path_iterate<ReverseSerializationPathIterator>(a2, (CGMutablePathRef *)decode);
        CGPathRetain(Mutable);
        float v6 = Mutable;
        CGPathRelease(Mutable);
        return (CALayer *)v6;
      default:
        switch(*(unsigned char *)(a2 + 12))
        {
          case '0':
          case '7':
            goto LABEL_20;
          case '1':
            uint64_t v19 = NSString;
            return (CALayer *)[v19 stringWithUTF8String:a2 + 28];
          case '2':
            uint64_t v20 = *(void *)(a2 + 16);
            if (v20 && (id v21 = (CGImage *)ns_object_from_render_object(a1, v20, 0)) != 0)
            {
              v46.origin.CGFloat x = (double)*(int *)(a2 + 24);
              v46.origin.CGFloat y = (double)*(int *)(a2 + 28);
              v46.size.CGFloat width = (double)*(int *)(a2 + 32);
              v46.size.CGFloat height = (double)*(int *)(a2 + 36);
              CGImageRef v22 = CGImageCreateWithImageInRect(v21, v46);
              if (v22) {
                CGImageSetProperty();
              }
            }
            else
            {
              CGImageRef v22 = 0;
            }
            return (CALayer *)v22;
          case '3':
            CFRetain(*(CFTypeRef *)(a2 + 112));
            return *(CALayer **)(a2 + 112);
          case '8':
            uint64_t v23 = *(unsigned int *)(a2 + 16);
            if (!v23) {
              return 0;
            }
            size_t v24 = a3;
            if (a3) {
              goto LABEL_43;
            }
            if (v23 <= 1)
            {
              uint64_t v25 = (float64x2_t *)(a2 + 24);
            }
            else
            {
              size_t v24 = "NSArray";
LABEL_43:
              uint64_t v25 = (float64x2_t *)(a2 + 24);
              if (strcasecmp(v24, "real") && strcasecmp(v24, "BOOL"))
              {
                if (!strcasecmp(v24, "NSArray"))
                {
                  float v6 = (const CGPath *)[MEMORY[0x1E4F1CA48] arrayWithCapacity:v23];
                  if (*(_DWORD *)(a2 + 16))
                  {
                    unint64_t v33 = 0;
                    do
                      -[CGPath addObject:](v6, "addObject:", [NSNumber numberWithDouble:v25->f64[v33++]]);
                    while (v33 < *(unsigned int *)(a2 + 16));
                  }
                  return (CALayer *)v6;
                }
                if (!strcasecmp(v24, "CGColor"))
                {
                  if (v23 != 4) {
                    __assert_rtn("ns_object_from_render_object", "CAReverseSerialization.mm", 749, "v->count () == 4");
                  }
                  float v34 = *a1;
                  return (CALayer *)cg_color_from_values<double const*>((double *)(a2 + 24), v34);
                }
                else
                {
                  if (!strcasecmp(v24, "CAColorMatrix"))
                  {
                    if (v23 != 20) {
                      __assert_rtn("ns_object_from_render_object", "CAReverseSerialization.mm", 754, "v->count () == 20");
                    }
                    uint64_t v35 = 0;
                    long long v42 = 0u;
                    long long v43 = 0u;
                    long long v40 = 0u;
                    long long v41 = 0u;
                    *(_OWORD *)decode = 0u;
                    do
                    {
                      float64x2_t v37 = *v25;
                      float64x2_t v36 = v25[1];
                      v25 += 2;
                      *(float32x4_t *)&decode[v35] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v37), v36);
                      v35 += 2;
                    }
                    while (v35 != 10);
                    v38[2] = v41;
                    v38[3] = v42;
                    v38[4] = v43;
                    v38[0] = *(_OWORD *)decode;
                    v38[1] = v40;
                    return (CALayer *)[MEMORY[0x1E4F29238] valueWithCAColorMatrix:v38];
                  }
                  if (strcasecmp(v24, "CGRect")) {
                    return 0;
                  }
                  return (CALayer *)id_from_value<CGRect,CA::Render::Vector const*&>(a2);
                }
              }
            }
            float32x4_t v31 = NSNumber;
            double v32 = v25->f64[0];
            return (CALayer *)[v31 numberWithDouble:v32];
          default:
            goto LABEL_80;
        }
    }
  }
  if (v5 == 1)
  {
    float v6 = (const CGPath *)[MEMORY[0x1E4F1CA48] arrayWithCapacity:*(unsigned int *)(a2 + 16)];
    if (*(_DWORD *)(a2 + 16))
    {
      unint64_t v8 = 0;
      do
      {
        uint64_t v9 = *(void *)(a2 + 24 + 8 * v8);
        if (v9) {
          uint64_t v10 = ns_object_from_render_object(a1, v9, 0);
        }
        else {
          uint64_t v10 = 0;
        }
        [(CGPath *)v6 addObject:v10];
        ++v8;
      }
      while (v8 < *(unsigned int *)(a2 + 16));
    }
    return (CALayer *)v6;
  }
  if (v5 != 5)
  {
    if (v5 != 9) {
LABEL_80:
    }
      __assert_rtn("ns_object_from_render_object", "CAReverseSerialization.mm", 773, "false");
    return 0;
  }
LABEL_20:

  return (CALayer *)animation_from_render_animation((uint64_t)a1, a2);
}

void sub_184826C98(_Unwind_Exception *a1)
{
  CGPathRelease(v1);
  _Unwind_Resume(a1);
}

void id_from_value<CGColor *,CA::Render::Pattern const*&>(ReverseSerializationState const&,CA::Render::Pattern const*&)::{lambda(void *,CGContext *)#1}::__invoke(CGImage *a1, CGContext *a2)
{
  double Width = (double)CGImageGetWidth(a1);
  double Height = (double)CGImageGetHeight(a1);
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  double v8 = Width;

  CGContextDrawImage(a2, *(CGRect *)&v6, a1);
}

CAFilter *filter_from_render_filter(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  float v4 = +[CAFilter filterWithType:CAAtomGetString(*(_DWORD *)(a2 + 24))];
  if (v4)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map))
    {
      _ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map = 0u;
      *(_OWORD *)&qword_1E8F878B0 = 0u;
      dword_1E8F878C0 = 1065353216;
      __cxa_guard_release(&_ZGVZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map);
    }
    if (_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE10once_token != -1) {
      dispatch_once(&_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE10once_token, &__block_literal_global_45);
    }
    get_setters_for_type<CA::Render::Layer>();
    for (uint64_t i = qword_1E8F878B0; i; uint64_t i = *(void *)i)
    {
      *(_OWORD *)__p = 0u;
      long long v8 = 0u;
      if (*(char *)(i + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)(i + 16), *(void *)(i + 24));
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)(i + 16);
        *(void *)&long long v8 = *(void *)(i + 32);
      }
      *((void *)&v8 + 1) = *(void *)(i + 40);
      (*((void (**)(CAFilter *, uint64_t, void, void **, uint64_t))&v8 + 1))(v4, a2, 0, __p, a1);
      if (SBYTE7(v8) < 0) {
        operator delete(__p[0]);
      }
    }
  }
  return v4;
}

void sub_184826F04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

CASpringAnimation *animation_from_render_animation(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 0;
  }
  uint64_t v4 = *(unsigned __int8 *)(a2 + 12);
  if (v4 > 0x37)
  {
LABEL_20:
    if (v4 != 5) {
      __assert_rtn("animation_from_render_animation", "CAReverseSerialization.mm", 1762, "false");
    }
    unsigned int v5 = objc_alloc_init(CABasicAnimation);
    if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavE13animation_map, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavE13animation_map))
    {
      _ZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE_clEv();
      __cxa_guard_release(&_ZGVZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavE13animation_map);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavE17property_anim_map, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavE17property_anim_map))
    {
      _ZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE0_clEv();
      __cxa_guard_release(&_ZGVZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavE17property_anim_map);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavE14basic_anim_map, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavE14basic_anim_map))
    {
      _ZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE1_clEv();
      __cxa_guard_release(&_ZGVZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavE14basic_anim_map);
    }
    get_setters_for_type<CA::Render::Layer>();
    for (uint64_t i = (uint64_t *)xmmword_1E8F87A50; i; uint64_t i = (uint64_t *)*i)
    {
      *(_OWORD *)__p = 0u;
      long long v11 = 0u;
      if (*((char *)i + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)i[2], i[3]);
      }
      else
      {
        *(_OWORD *)__p = *((_OWORD *)i + 1);
        *(void *)&long long v11 = i[4];
      }
      *((void *)&v11 + 1) = i[5];
      (*((void (**)(CASpringAnimation *, uint64_t, void, void **, uint64_t))&v11 + 1))(v5, a2, 0, __p, a1);
      if (SBYTE7(v11) < 0) {
        operator delete(__p[0]);
      }
    }
    return v5;
  }
  if (((1 << v4) & 0x80000180200000) != 0) {
    return 0;
  }
  if (v4 != 27)
  {
    if (v4 == 48)
    {
      unsigned int v5 = objc_alloc_init(CASpringAnimation);
      if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavE13animation_map, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavE13animation_map))
      {
        _ZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE_clEv();
        __cxa_guard_release(&_ZGVZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavE13animation_map);
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavE17property_anim_map, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavE17property_anim_map))
      {
        _ZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE0_clEv();
        __cxa_guard_release(&_ZGVZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavE17property_anim_map);
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavE14basic_anim_map, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavE14basic_anim_map))
      {
        _ZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE1_clEv();
        __cxa_guard_release(&_ZGVZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavE14basic_anim_map);
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavE15spring_anim_map, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavE15spring_anim_map))
      {
        _ZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE2_clEv();
        __cxa_guard_release(&_ZGVZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavE15spring_anim_map);
      }
      get_setters_for_type<CA::Render::Layer>();
      for (uint64_t j = (uint64_t *)xmmword_1E8F87C00; j; uint64_t j = (uint64_t *)*j)
      {
        *(_OWORD *)__p = 0u;
        long long v11 = 0u;
        if (*((char *)j + 39) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)j[2], j[3]);
        }
        else
        {
          *(_OWORD *)__p = *((_OWORD *)j + 1);
          *(void *)&long long v11 = j[4];
        }
        *((void *)&v11 + 1) = j[5];
        (*((void (**)(CASpringAnimation *, uint64_t, void, void **, uint64_t))&v11 + 1))(v5, a2, 0, __p, a1);
        if (SBYTE7(v11) < 0) {
          operator delete(__p[0]);
        }
      }
      return v5;
    }
    goto LABEL_20;
  }
  unsigned int v5 = objc_alloc_init(CAKeyframeAnimation);
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavE13animation_map, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavE13animation_map))
  {
    _ZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE_clEv();
    __cxa_guard_release(&_ZGVZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavE13animation_map);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavE17property_anim_map, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavE17property_anim_map))
  {
    _ZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE0_clEv();
    __cxa_guard_release(&_ZGVZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavE17property_anim_map);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavE17keyframe_anim_map, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavE17keyframe_anim_map))
  {
    _ZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE1_clEv();
    __cxa_guard_release(&_ZGVZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavE17keyframe_anim_map);
  }
  get_setters_for_type<CA::Render::Layer>();
  for (uint64_t k = (uint64_t *)xmmword_1E8F87B10; k; uint64_t k = (uint64_t *)*k)
  {
    *(_OWORD *)__p = 0u;
    long long v11 = 0u;
    if (*((char *)k + 39) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)k[2], k[3]);
    }
    else
    {
      *(_OWORD *)__p = *((_OWORD *)k + 1);
      *(void *)&long long v11 = k[4];
    }
    *((void *)&v11 + 1) = k[5];
    (*((void (**)(CASpringAnimation *, uint64_t, void, void **, uint64_t))&v11 + 1))(v5, a2, 0, __p, a1);
    if (SBYTE7(v11) < 0) {
      operator delete(__p[0]);
    }
  }
  return v5;
}

void sub_1848273B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

CGColor *cg_color_from_values<double const*>(double *a1, CGColorSpace *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  double v3 = *a1;
  double v4 = a1[1];
  v17.f64[0] = *a1;
  v17.f64[1] = v4;
  double v5 = a1[2];
  double v6 = a1[3];
  v18[0] = v5;
  v18[1] = v6;
  if (v6 == 0.0 && v5 == 0.0 && v4 == 0.0 && v3 == 0.0) {
    return 0;
  }
  long long v8 = (CGColorSpace *)CAGetColorSpace(0x1Cu);
  uint64_t v9 = v8;
  uint64_t v10 = 0;
  if (a2) {
    long long v8 = a2;
  }
  do
  {
    double v11 = v17.f64[v10];
    if (v11 < 0.0 || v11 > 1.0)
    {
      Extended = CAColorSpaceCreateExtended(v8);
      goto LABEL_15;
    }
    ++v10;
  }
  while (v10 != 4);
  Extended = CGColorSpaceRetain(v8);
LABEL_15:
  CFDataRef v14 = Extended;
  long long v15 = CGColorCreate(Extended, v17.f64);
  CA_CGColorGetRGBComponents(v15, v9, v17.f64);
  CGColorRelease(v15);
  if (v18[1] <= 0.0)
  {
    float64x2_t v17 = 0u;
    *(_OWORD *)uint64_t v18 = 0u;
  }
  else
  {
    float64x2_t v17 = vdivq_f64(v17, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v18[1], 0));
    v18[0] = v18[0] / v18[1];
  }
  uint64_t v7 = CGColorCreate(v14, v17.f64);
  if (v14) {
    CFRelease(v14);
  }
  return v7;
}

void sub_1848275E0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t id_from_value<CGRect,CA::Render::Vector const*&>(uint64_t a1)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 16) <= 3u) {
    __assert_rtn("id_from_value", "CAReverseSerialization.mm", 316, "count >= 4");
  }
  float64x2_t v1 = vsubq_f64(*(float64x2_t *)(a1 + 40), *(float64x2_t *)(a1 + 24));
  v3[0] = *(_OWORD *)(a1 + 24);
  v3[1] = v1;
  return [MEMORY[0x1E4F29238] valueWithBytes:v3 objCType:"{CGRect={CGPoint=dd}{CGSize=dd}}"];
}

void CA::Render::path_iterate<ReverseSerializationPathIterator>(uint64_t a1, CGMutablePathRef *a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 20);
  if (v2)
  {
    double v5 = *(CGFloat **)(a1 + 32);
    uint64_t v4 = *(unsigned __int8 **)(a1 + 40);
    double v6 = &v4[v2];
    do
    {
      int v7 = *v4++;
      switch(v7)
      {
        case 0:
          CGPathCloseSubpath(*a2);
          break;
        case 1:
          CGFloat v8 = *v5;
          CGFloat v9 = v5[1];
          v5 += 2;
          CGPathMoveToPoint(*a2, 0, v8, v9);
          break;
        case 2:
          CGFloat v10 = *v5;
          CGFloat v11 = v5[1];
          v5 += 2;
          CGPathAddLineToPoint(*a2, 0, v10, v11);
          break;
        case 3:
          CGPathAddQuadCurveToPoint(*a2, 0, *v5, v5[1], v5[2], v5[3]);
          v5 += 4;
          break;
        case 4:
          CGPathAddCurveToPoint(*a2, 0, *v5, v5[1], v5[2], v5[3], v5[4], v5[5]);
          v5 += 6;
          break;
        default:
          break;
      }
    }
    while (v4 < v6);
  }
}

uint64_t _ZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE_clEv()
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  memset(v5, 0, sizeof(v5));
  uint64_t v6 = 1065353216;
  snake_case_to_camel_case("timing_function", 15, (char *)v7);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v7);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v5[0], *((unint64_t *)&v5[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1169, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v7);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v5, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE_clEvENUlP11CAAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES8_SA_SD_SM_SP_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v7, "preferredFrameRateRange");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v5[0], *((unint64_t *)&v5[0] + 1), (uint64_t)v7))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1170, "\"Duplicated Entry !!\" && map.map.find (\"preferredFrameRateRange\") == map.map.end ()");
  }
  if (SBYTE7(v8) < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v7, "preferredFrameRateRange");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v5, (uint64_t)v7, (uint64_t)v7)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE_clEvENUlP11CAAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES8_SA_SD_SM_SP_;
  if (SBYTE7(v8) < 0) {
    operator delete(v7[0]);
  }
  snake_case_to_camel_case("removed_on_completion", 21, (char *)v7);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v7);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v5[0], *((unint64_t *)&v5[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1173, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v7);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v5, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE_clEvENUlP11CAAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES8_SA_SD_SM_SP_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZ22get_setters_for_timingIN2CA6Render15SpringAnimationE11CAAnimationEDavE10timing_map, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZ22get_setters_for_timingIN2CA6Render15SpringAnimationE11CAAnimationEDavE10timing_map))
  {
    _ZZ22get_setters_for_timingIN2CA6Render15SpringAnimationE11CAAnimationEDavENKUlvE_clEv();
    __cxa_guard_release(&_ZGVZ22get_setters_for_timingIN2CA6Render15SpringAnimationE11CAAnimationEDavE10timing_map);
  }
  *(_OWORD *)int v7 = 0u;
  long long v8 = 0u;
  int v9 = dword_1E8F87C40;
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>((uint64_t)v7, qword_1E8F87C28);
  BOOL v0 = (void *)qword_1E8F87C30;
  if (qword_1E8F87C30)
  {
    do
    {
      std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)> const&>((uint64_t)v7, (uint64_t)(v0 + 2), (uint64_t)(v0 + 2));
      BOOL v0 = (void *)*v0;
    }
    while (v0);
  }
  for (uint64_t i = (void *)v8; i; uint64_t i = (void *)*i)
    std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)> const&>((uint64_t)v5, (uint64_t)(i + 2), (uint64_t)(i + 2));
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__hash_table((uint64_t)&_ZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavE13animation_map, (uint64_t *)v5);
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)v7);
  return std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)v5);
}

void sub_184827A74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
}

uint64_t _ZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE0_clEv()
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  long long v30 = 0u;
  long long v31 = 0u;
  uint64_t v32 = 1065353216;
  uint64_t v0 = qword_1E8F87B70;
  if (qword_1E8F87B70)
  {
    uint64_t v1 = 0;
    do
    {
      int v2 = *(char *)(v0 + 39);
      if (v2 >= 0) {
        double v3 = (uint64_t *)(v0 + 16);
      }
      else {
        double v3 = *(uint64_t **)(v0 + 16);
      }
      if (v2 >= 0) {
        unint64_t v4 = *(unsigned __int8 *)(v0 + 39);
      }
      else {
        unint64_t v4 = *(void *)(v0 + 24);
      }
      unint64_t v5 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v3, v4);
      unint64_t v6 = v5;
      unint64_t v7 = *((void *)&v30 + 1);
      if (*((void *)&v30 + 1))
      {
        uint8x8_t v8 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v30 + 8));
        v8.i16[0] = vaddlv_u8(v8);
        unint64_t v9 = v8.u32[0];
        if (v8.u32[0] > 1uLL)
        {
          unint64_t v10 = v5;
          if (v5 >= *((void *)&v30 + 1)) {
            unint64_t v10 = v5 % *((void *)&v30 + 1);
          }
        }
        else
        {
          unint64_t v10 = (*((void *)&v30 + 1) - 1) & v5;
        }
        CGFloat v11 = *(unsigned __int8 ***)(v30 + 8 * v10);
        if (v11)
        {
          for (uint64_t i = *v11; i; uint64_t i = *(unsigned __int8 **)i)
          {
            unint64_t v13 = *((void *)i + 1);
            if (v13 == v6)
            {
              if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, (unsigned __int8 *)(v0 + 16))) {
                goto LABEL_51;
              }
            }
            else
            {
              if (v9 > 1)
              {
                if (v13 >= v7) {
                  v13 %= v7;
                }
              }
              else
              {
                v13 &= v7 - 1;
              }
              if (v13 != v10) {
                break;
              }
            }
          }
        }
      }
      else
      {
        unint64_t v10 = 0;
      }
      CFDataRef v14 = operator new(0x30uLL);
      *CFDataRef v14 = 0;
      v14[1] = v6;
      long long v15 = (std::string *)(v14 + 2);
      if (*(char *)(v0 + 39) < 0)
      {
        std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)(v0 + 16), *(void *)(v0 + 24));
        uint64_t v1 = *((void *)&v31 + 1);
      }
      else
      {
        long long v16 = *(_OWORD *)(v0 + 16);
        void v14[4] = *(void *)(v0 + 32);
        *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
      }
      v14[5] = *(void *)(v0 + 40);
      float v17 = (float)(unint64_t)(v1 + 1);
      if (!v7 || (float)(*(float *)&v32 * (float)v7) < v17)
      {
        BOOL v18 = (v7 & (v7 - 1)) != 0;
        if (v7 < 3) {
          BOOL v18 = 1;
        }
        unint64_t v19 = v18 | (2 * v7);
        unint64_t v20 = vcvtps_u32_f32(v17 / *(float *)&v32);
        if (v19 <= v20) {
          size_t v21 = v20;
        }
        else {
          size_t v21 = v19;
        }
        std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>((uint64_t)&v30, v21);
        unint64_t v7 = *((void *)&v30 + 1);
        if ((*((void *)&v30 + 1) & (*((void *)&v30 + 1) - 1)) != 0)
        {
          if (v6 >= *((void *)&v30 + 1)) {
            unint64_t v10 = v6 % *((void *)&v30 + 1);
          }
          else {
            unint64_t v10 = v6;
          }
        }
        else
        {
          unint64_t v10 = (*((void *)&v30 + 1) - 1) & v6;
        }
      }
      uint64_t v22 = v30;
      uint64_t v23 = *(void **)(v30 + 8 * v10);
      if (v23)
      {
        *CFDataRef v14 = *v23;
      }
      else
      {
        *CFDataRef v14 = v31;
        *(void *)&long long v31 = v14;
        *(void *)(v22 + 8 * v10) = &v31;
        if (!*v14) {
          goto LABEL_50;
        }
        unint64_t v24 = *(void *)(*v14 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v24 >= v7) {
            v24 %= v7;
          }
        }
        else
        {
          v24 &= v7 - 1;
        }
        uint64_t v23 = (void *)(v30 + 8 * v24);
      }
      *uint64_t v23 = v14;
LABEL_50:
      uint64_t v1 = ++*((void *)&v31 + 1);
LABEL_51:
      uint64_t v0 = *(void *)v0;
    }
    while (v0);
  }
  snake_case_to_camel_case("discretizes_time", 16, (char *)v33);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1188, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "valueFunction");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1190, "\"Duplicated Entry !!\" && map.map.find (\"valueFunction\") == map.map.end ()");
  }
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "valueFunction");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "additive");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1191, "\"Duplicated Entry !!\" && map.map.find (\"additive\") == map.map.end ()");
  }
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "additive");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "highFrameRateReason");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1192, "\"Duplicated Entry !!\" && map.map.find (\"highFrameRateReason\") == map.map.end ()");
  }
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "highFrameRateReason");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  snake_case_to_camel_case("preferredFrameRateRangeMinimum", 30, (char *)v33);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1199, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "preferredFrameRateRangeMaximum");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1200, "\"Duplicated Entry !!\" && map.map.find (\"preferredFrameRateRangeMaximum\") == map.map.end ()");
  }
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "preferredFrameRateRangeMaximum");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE4_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "preferredFrameRateRangePreferred");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1201, "\"Duplicated Entry !!\" && map.map.find (\"preferredFrameRateRangePreferred\") == map.map.end ()");
  }
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "preferredFrameRateRangePreferred");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE5_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  snake_case_to_camel_case("cumulative", 10, (char *)v33);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1205, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE6_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("property", 8, (char *)v33);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1212, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE7_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "beginTimeMode");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1216, "\"Duplicated Entry !!\" && map.map.find (\"beginTimeMode\") == map.map.end ()");
  }
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "beginTimeMode");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE8_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "delegate");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1217, "\"Duplicated Entry !!\" && map.map.find (\"delegate\") == map.map.end ()");
  }
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "delegate");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE9_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "keyPath");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1218, "\"Duplicated Entry !!\" && map.map.find (\"keyPath\") == map.map.end ()");
  }
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "keyPath");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE10_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "frameInterval");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1222, "\"Duplicated Entry !!\" && map.map.find (\"frameInterval\") == map.map.end ()");
  }
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "frameInterval");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE11_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "preferredFramesPerSecond");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1223, "\"Duplicated Entry !!\" && map.map.find (\"preferredFramesPerSecond\") == map.map.end ()");
  }
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "preferredFramesPerSecond");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE12_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  long long v25 = v30;
  long long v30 = 0uLL;
  _ZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavE17property_anim_map = v25;
  xmmword_1E8F87BA0 = v31;
  dword_1E8F87BB0 = v32;
  if (*((void *)&v31 + 1))
  {
    unint64_t v26 = *(void *)(v31 + 8);
    if ((*((void *)&v25 + 1) & (*((void *)&v25 + 1) - 1)) != 0)
    {
      if (v26 >= *((void *)&v25 + 1)) {
        v26 %= *((void *)&v25 + 1);
      }
    }
    else
    {
      v26 &= *((void *)&v25 + 1) - 1;
    }
    *(void *)(v25 + 8 * v26) = &xmmword_1E8F87BA0;
    long long v31 = 0uLL;
  }
  return std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)&v30);
}

void sub_184828688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t _ZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE1_clEv()
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  long long v30 = 0u;
  long long v31 = 0u;
  uint64_t v32 = 1065353216;
  uint64_t v0 = (uint64_t *)xmmword_1E8F87BA0;
  if ((void)xmmword_1E8F87BA0)
  {
    uint64_t v1 = 0;
    do
    {
      int v2 = *((char *)v0 + 39);
      if (v2 >= 0) {
        double v3 = v0 + 2;
      }
      else {
        double v3 = (uint64_t *)v0[2];
      }
      if (v2 >= 0) {
        unint64_t v4 = *((unsigned __int8 *)v0 + 39);
      }
      else {
        unint64_t v4 = v0[3];
      }
      unint64_t v5 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v3, v4);
      unint64_t v6 = v5;
      unint64_t v7 = *((void *)&v30 + 1);
      if (*((void *)&v30 + 1))
      {
        uint8x8_t v8 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v30 + 8));
        v8.i16[0] = vaddlv_u8(v8);
        unint64_t v9 = v8.u32[0];
        if (v8.u32[0] > 1uLL)
        {
          unint64_t v10 = v5;
          if (v5 >= *((void *)&v30 + 1)) {
            unint64_t v10 = v5 % *((void *)&v30 + 1);
          }
        }
        else
        {
          unint64_t v10 = (*((void *)&v30 + 1) - 1) & v5;
        }
        CGFloat v11 = *(unsigned __int8 ***)(v30 + 8 * v10);
        if (v11)
        {
          for (uint64_t i = *v11; i; uint64_t i = *(unsigned __int8 **)i)
          {
            unint64_t v13 = *((void *)i + 1);
            if (v13 == v6)
            {
              if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, (unsigned __int8 *)v0 + 16)) {
                goto LABEL_51;
              }
            }
            else
            {
              if (v9 > 1)
              {
                if (v13 >= v7) {
                  v13 %= v7;
                }
              }
              else
              {
                v13 &= v7 - 1;
              }
              if (v13 != v10) {
                break;
              }
            }
          }
        }
      }
      else
      {
        unint64_t v10 = 0;
      }
      CFDataRef v14 = operator new(0x30uLL);
      *CFDataRef v14 = 0;
      v14[1] = v6;
      long long v15 = (std::string *)(v14 + 2);
      if (*((char *)v0 + 39) < 0)
      {
        std::string::__init_copy_ctor_external(v15, (const std::string::value_type *)v0[2], v0[3]);
        uint64_t v1 = *((void *)&v31 + 1);
      }
      else
      {
        long long v16 = *((_OWORD *)v0 + 1);
        void v14[4] = v0[4];
        *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
      }
      v14[5] = v0[5];
      float v17 = (float)(unint64_t)(v1 + 1);
      if (!v7 || (float)(*(float *)&v32 * (float)v7) < v17)
      {
        BOOL v18 = (v7 & (v7 - 1)) != 0;
        if (v7 < 3) {
          BOOL v18 = 1;
        }
        unint64_t v19 = v18 | (2 * v7);
        unint64_t v20 = vcvtps_u32_f32(v17 / *(float *)&v32);
        if (v19 <= v20) {
          size_t v21 = v20;
        }
        else {
          size_t v21 = v19;
        }
        std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>((uint64_t)&v30, v21);
        unint64_t v7 = *((void *)&v30 + 1);
        if ((*((void *)&v30 + 1) & (*((void *)&v30 + 1) - 1)) != 0)
        {
          if (v6 >= *((void *)&v30 + 1)) {
            unint64_t v10 = v6 % *((void *)&v30 + 1);
          }
          else {
            unint64_t v10 = v6;
          }
        }
        else
        {
          unint64_t v10 = (*((void *)&v30 + 1) - 1) & v6;
        }
      }
      uint64_t v22 = v30;
      uint64_t v23 = *(void **)(v30 + 8 * v10);
      if (v23)
      {
        *CFDataRef v14 = *v23;
      }
      else
      {
        *CFDataRef v14 = v31;
        *(void *)&long long v31 = v14;
        *(void *)(v22 + 8 * v10) = &v31;
        if (!*v14) {
          goto LABEL_50;
        }
        unint64_t v24 = *(void *)(*v14 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v24 >= v7) {
            v24 %= v7;
          }
        }
        else
        {
          v24 &= v7 - 1;
        }
        uint64_t v23 = (void *)(v30 + 8 * v24);
      }
      *uint64_t v23 = v14;
LABEL_50:
      uint64_t v1 = ++*((void *)&v31 + 1);
LABEL_51:
      uint64_t v0 = (uint64_t *)*v0;
    }
    while (v0);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "byValue");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1237, "\"Duplicated Entry !!\" && map.map.find (\"byValue\") == map.map.end ()");
  }
  if (v34 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "byValue");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE1_clEvENUlP16CABasicAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "fromValue");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1238, "\"Duplicated Entry !!\" && map.map.find (\"fromValue\") == map.map.end ()");
  }
  if (v34 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "fromValue");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE1_clEvENUlP16CABasicAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "toValue");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1239, "\"Duplicated Entry !!\" && map.map.find (\"toValue\") == map.map.end ()");
  }
  if (v34 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "toValue");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE1_clEvENUlP16CABasicAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("end_angle", 9, (char *)__p);
  std::string::basic_string[abi:nn180100]<0>(v28, (char *)__p);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v28))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1240, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v28, (char *)__p);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v28, (uint64_t)v28)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE1_clEvENUlP16CABasicAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  snake_case_to_camel_case("start_angle", 11, (char *)__p);
  std::string::basic_string[abi:nn180100]<0>(v28, (char *)__p);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v28))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1241, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v28, (char *)__p);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v28, (uint64_t)v28)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE1_clEvENUlP16CABasicAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  snake_case_to_camel_case("rounds_to_integer", 17, (char *)__p);
  std::string::basic_string[abi:nn180100]<0>(v28, (char *)__p);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v28))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1244, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v28, (char *)__p);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v28, (uint64_t)v28)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE1_clEvENUlP16CABasicAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE4_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  long long v25 = v30;
  long long v30 = 0uLL;
  _ZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavE14basic_anim_map = v25;
  xmmword_1E8F87BD0 = v31;
  dword_1E8F87BE0 = v32;
  if (*((void *)&v31 + 1))
  {
    unint64_t v26 = *(void *)(v31 + 8);
    if ((*((void *)&v25 + 1) & (*((void *)&v25 + 1) - 1)) != 0)
    {
      if (v26 >= *((void *)&v25 + 1)) {
        v26 %= *((void *)&v25 + 1);
      }
    }
    else
    {
      v26 &= *((void *)&v25 + 1) - 1;
    }
    *(void *)(v25 + 8 * v26) = &xmmword_1E8F87BD0;
    long long v31 = 0uLL;
  }
  return std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)&v30);
}

void sub_184828EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t _ZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE2_clEv()
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  long long v30 = 0u;
  long long v31 = 0u;
  uint64_t v32 = 1065353216;
  uint64_t v0 = (uint64_t *)xmmword_1E8F87BD0;
  if ((void)xmmword_1E8F87BD0)
  {
    uint64_t v1 = 0;
    do
    {
      int v2 = *((char *)v0 + 39);
      if (v2 >= 0) {
        double v3 = v0 + 2;
      }
      else {
        double v3 = (uint64_t *)v0[2];
      }
      if (v2 >= 0) {
        unint64_t v4 = *((unsigned __int8 *)v0 + 39);
      }
      else {
        unint64_t v4 = v0[3];
      }
      unint64_t v5 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v3, v4);
      unint64_t v6 = v5;
      unint64_t v7 = *((void *)&v30 + 1);
      if (*((void *)&v30 + 1))
      {
        uint8x8_t v8 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v30 + 8));
        v8.i16[0] = vaddlv_u8(v8);
        unint64_t v9 = v8.u32[0];
        if (v8.u32[0] > 1uLL)
        {
          unint64_t v10 = v5;
          if (v5 >= *((void *)&v30 + 1)) {
            unint64_t v10 = v5 % *((void *)&v30 + 1);
          }
        }
        else
        {
          unint64_t v10 = (*((void *)&v30 + 1) - 1) & v5;
        }
        CGFloat v11 = *(unsigned __int8 ***)(v30 + 8 * v10);
        if (v11)
        {
          for (uint64_t i = *v11; i; uint64_t i = *(unsigned __int8 **)i)
          {
            unint64_t v13 = *((void *)i + 1);
            if (v13 == v6)
            {
              if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, (unsigned __int8 *)v0 + 16)) {
                goto LABEL_51;
              }
            }
            else
            {
              if (v9 > 1)
              {
                if (v13 >= v7) {
                  v13 %= v7;
                }
              }
              else
              {
                v13 &= v7 - 1;
              }
              if (v13 != v10) {
                break;
              }
            }
          }
        }
      }
      else
      {
        unint64_t v10 = 0;
      }
      CFDataRef v14 = operator new(0x30uLL);
      *CFDataRef v14 = 0;
      v14[1] = v6;
      long long v15 = (std::string *)(v14 + 2);
      if (*((char *)v0 + 39) < 0)
      {
        std::string::__init_copy_ctor_external(v15, (const std::string::value_type *)v0[2], v0[3]);
        uint64_t v1 = *((void *)&v31 + 1);
      }
      else
      {
        long long v16 = *((_OWORD *)v0 + 1);
        void v14[4] = v0[4];
        *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
      }
      v14[5] = v0[5];
      float v17 = (float)(unint64_t)(v1 + 1);
      if (!v7 || (float)(*(float *)&v32 * (float)v7) < v17)
      {
        BOOL v18 = (v7 & (v7 - 1)) != 0;
        if (v7 < 3) {
          BOOL v18 = 1;
        }
        unint64_t v19 = v18 | (2 * v7);
        unint64_t v20 = vcvtps_u32_f32(v17 / *(float *)&v32);
        if (v19 <= v20) {
          size_t v21 = v20;
        }
        else {
          size_t v21 = v19;
        }
        std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>((uint64_t)&v30, v21);
        unint64_t v7 = *((void *)&v30 + 1);
        if ((*((void *)&v30 + 1) & (*((void *)&v30 + 1) - 1)) != 0)
        {
          if (v6 >= *((void *)&v30 + 1)) {
            unint64_t v10 = v6 % *((void *)&v30 + 1);
          }
          else {
            unint64_t v10 = v6;
          }
        }
        else
        {
          unint64_t v10 = (*((void *)&v30 + 1) - 1) & v6;
        }
      }
      uint64_t v22 = v30;
      uint64_t v23 = *(void **)(v30 + 8 * v10);
      if (v23)
      {
        *CFDataRef v14 = *v23;
      }
      else
      {
        *CFDataRef v14 = v31;
        *(void *)&long long v31 = v14;
        *(void *)(v22 + 8 * v10) = &v31;
        if (!*v14) {
          goto LABEL_50;
        }
        unint64_t v24 = *(void *)(*v14 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v24 >= v7) {
            v24 %= v7;
          }
        }
        else
        {
          v24 &= v7 - 1;
        }
        uint64_t v23 = (void *)(v30 + 8 * v24);
      }
      *uint64_t v23 = v14;
LABEL_50:
      uint64_t v1 = ++*((void *)&v31 + 1);
LABEL_51:
      uint64_t v0 = (uint64_t *)*v0;
    }
    while (v0);
  }
  snake_case_to_camel_case("mass", 4, (char *)v33);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1257, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE2_clEvENUlP17CASpringAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("stiffness", 9, (char *)v33);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1258, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE2_clEvENUlP17CASpringAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("damping", 7, (char *)v33);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1259, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE2_clEvENUlP17CASpringAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("velocity", 8, (char *)v33);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1260, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE2_clEvENUlP17CASpringAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("allows_overdamping", 18, (char *)v33);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1261, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE2_clEvENUlP17CASpringAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "initialVelocity");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1262, "\"Duplicated Entry !!\" && map.map.find (\"initialVelocity\") == map.map.end ()");
  }
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "initialVelocity");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE2_clEvENUlP17CASpringAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE4_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  long long v25 = v30;
  long long v30 = 0uLL;
  _ZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavE15spring_anim_map = v25;
  xmmword_1E8F87C00 = v31;
  dword_1E8F87C10 = v32;
  if (*((void *)&v31 + 1))
  {
    unint64_t v26 = *(void *)(v31 + 8);
    if ((*((void *)&v25 + 1) & (*((void *)&v25 + 1) - 1)) != 0)
    {
      if (v26 >= *((void *)&v25 + 1)) {
        v26 %= *((void *)&v25 + 1);
      }
    }
    else
    {
      v26 &= *((void *)&v25 + 1) - 1;
    }
    *(void *)(v25 + 8 * v26) = &xmmword_1E8F87C00;
    long long v31 = 0uLL;
  }
  return std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)&v30);
}

void sub_18482964C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    unint64_t v7 = (uint64_t *)a2;
  }
  else {
    unint64_t v7 = *(uint64_t **)a2;
  }
  if (v6 >= 0) {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v8 = *(void *)(a2 + 8);
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v14 = v9;
      if (v9 >= v11) {
        unint64_t v14 = v9 % v11;
      }
    }
    else
    {
      unint64_t v14 = (v11 - 1) & v9;
    }
    long long v15 = *(void ***)(*(void *)a1 + 8 * v14);
    if (v15)
    {
      for (uint64_t i = *v15; i; uint64_t i = *(void **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)i + 16, (unsigned __int8 *)a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
          }
          else
          {
            v17 &= v11 - 1;
          }
          if (v17 != v14) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v14 = 0;
  }
  uint64_t i = operator new(0x30uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v10;
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  uint64_t v18 = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *((void *)i + 4) = v18;
  *((void *)i + 5) = 0;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    BOOL v21 = 1;
    if (v11 >= 3) {
      BOOL v21 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v11);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>(a1, v24);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v14 = v10 % v11;
      }
      else {
        unint64_t v14 = v10;
      }
    }
    else
    {
      unint64_t v14 = (v11 - 1) & v10;
    }
  }
  uint64_t v25 = *(void *)a1;
  unint64_t v26 = *(void **)(*(void *)a1 + 8 * v14);
  if (v26)
  {
    *(void *)uint64_t i = *v26;
LABEL_44:
    *unint64_t v26 = i;
    goto LABEL_45;
  }
  *(void *)uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v25 + 8 * v14) = a1 + 16;
  if (*(void *)i)
  {
    unint64_t v27 = *(void *)(*(void *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v27 >= v11) {
        v27 %= v11;
      }
    }
    else
    {
      v27 &= v11 - 1;
    }
    unint64_t v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_44;
  }
LABEL_45:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_18482995C(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE2_clEvENUlP17CASpringAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE4_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2)
{
  uint64_t result = [NSNumber numberWithDouble:*(double *)(a2 + 176)];
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = [NSString stringWithUTF8String:"initialVelocity"];
    return [a1 setValue:v4 forKey:v5];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE2_clEvENUlP17CASpringAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithLongLong:*(unsigned __int8 *)(a2 + 184)];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      unint64_t v8 = a4;
    }
    else {
      unint64_t v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE2_clEvENUlP17CASpringAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithDouble:*(double *)(a2 + 176)];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      unint64_t v8 = a4;
    }
    else {
      unint64_t v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE2_clEvENUlP17CASpringAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithDouble:*(double *)(a2 + 168)];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      unint64_t v8 = a4;
    }
    else {
      unint64_t v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE2_clEvENUlP17CASpringAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithDouble:*(double *)(a2 + 160)];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      unint64_t v8 = a4;
    }
    else {
      unint64_t v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE2_clEvENUlP17CASpringAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithDouble:*(double *)(a2 + 152)];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      unint64_t v8 = a4;
    }
    else {
      unint64_t v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](uint64_t *a1, unint64_t a2)
{
  if (a2 > 0x20)
  {
    if (a2 <= 0x40)
    {
      uint64_t v5 = *(uint64_t *)((char *)a1 + a2 - 16);
      uint64_t v6 = *a1 - 0x3C5A37A36834CED9 * (v5 + a2);
      uint64_t v8 = a1[2];
      uint64_t v7 = a1[3];
      uint64_t v9 = __ROR8__(v6 + v7, 52);
      uint64_t v10 = v6 + a1[1];
      uint64_t v11 = __ROR8__(v10, 7);
      uint64_t v12 = v10 + v8;
      uint64_t v13 = *(uint64_t *)((char *)a1 + a2 - 32) + v8;
      uint64_t v14 = *(uint64_t *)((char *)a1 + a2 - 8) + v7;
      uint64_t v15 = __ROR8__(v14 + v13, 52);
      uint64_t v16 = v11 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v5 + a2), 37) + v9;
      uint64_t v17 = __ROR8__(v13, 37);
      uint64_t v18 = *(uint64_t *)((char *)a1 + a2 - 24) + v13;
      uint64_t v19 = __ROR8__(v18, 7);
      uint64_t v20 = v16 + __ROR8__(v12, 31);
      uint64_t v21 = v18 + v5;
      uint64_t v22 = v21 + v14;
      unint64_t v23 = 0x9AE16A3B2F90404FLL;
      unint64_t v24 = 0xC3A5C85C97CB3127 * (v22 + v20) - 0x651E95C4D06FBFB1 * (v12 + v7 + v17 + v19 + v15 + __ROR8__(v21, 31));
      unint64_t v25 = v20 - 0x3C5A37A36834CED9 * (v24 ^ (v24 >> 47));
      return (v25 ^ (v25 >> 47)) * v23;
    }
    unint64_t v4 = 0x9DDFEA08EB382D69;
    uint64_t v32 = *(uint64_t *)((char *)a1 + a2 - 48);
    uint64_t v33 = *(uint64_t *)((char *)a1 + a2 - 40);
    uint64_t v34 = *(uint64_t *)((char *)a1 + a2 - 24);
    uint64_t v36 = *(uint64_t *)((char *)a1 + a2 - 64);
    uint64_t v35 = *(uint64_t *)((char *)a1 + a2 - 56);
    uint64_t v37 = *(uint64_t *)((char *)a1 + a2 - 16);
    uint64_t v38 = *(uint64_t *)((char *)a1 + a2 - 8);
    unint64_t v39 = v35 + v37;
    unint64_t v40 = 0x9DDFEA08EB382D69
        * (v34 ^ ((0x9DDFEA08EB382D69 * (v34 ^ (v32 + a2))) >> 47) ^ (0x9DDFEA08EB382D69 * (v34 ^ (v32 + a2))));
    unint64_t v41 = 0x9DDFEA08EB382D69 * (v40 ^ (v40 >> 47));
    unint64_t v42 = v36 + a2 + v35 + v32;
    uint64_t v43 = v42 + v33;
    unint64_t v44 = __ROR8__(v42, 44) + v36 + a2 + __ROR8__(v33 + v36 + a2 - 0x622015F714C7D297 * (v40 ^ (v40 >> 47)), 21);
    uint64_t v45 = v35 + v37 + *(uint64_t *)((char *)a1 + a2 - 32) - 0x4B6D499041670D8DLL;
    uint64_t v46 = v45 + v34 + v37;
    uint64_t v47 = __ROR8__(v46, 44);
    uint64_t v48 = v46 + v38;
    uint64_t v49 = v47 + v45 + __ROR8__(v45 + v33 + v38, 21);
    uint64_t v51 = *a1;
    double v50 = a1 + 4;
    unint64_t v52 = v51 - 0x4B6D499041670D8DLL * v33;
    uint64_t v53 = -(uint64_t)((a2 - 1) & 0xFFFFFFFFFFFFFFC0);
    do
    {
      uint64_t v54 = *(v50 - 3);
      uint64_t v55 = v52 + v43 + v39 + v54;
      uint64_t v56 = v50[2];
      uint64_t v57 = v50[3];
      uint64_t v58 = v50[1];
      unint64_t v39 = v58 + v43 - 0x4B6D499041670D8DLL * __ROR8__(v39 + v44 + v56, 42);
      uint64_t v59 = v41 + v48;
      uint64_t v60 = *(v50 - 2);
      uint64_t v61 = *(v50 - 1);
      uint64_t v62 = *(v50 - 4) - 0x4B6D499041670D8DLL * v44;
      uint64_t v63 = v62 + v48 + v61;
      uint64_t v64 = v62 + v54 + v60;
      uint64_t v43 = v64 + v61;
      uint64_t v65 = __ROR8__(v64, 44) + v62;
      unint64_t v66 = (0xB492B66FBE98F273 * __ROR8__(v55, 37)) ^ v49;
      unint64_t v52 = 0xB492B66FBE98F273 * __ROR8__(v59, 33);
      unint64_t v44 = v65 + __ROR8__(v63 + v66, 21);
      unint64_t v67 = v52 + v49 + *v50;
      uint64_t v48 = v67 + v58 + v56 + v57;
      uint64_t v49 = __ROR8__(v67 + v58 + v56, 44) + v67 + __ROR8__(v39 + v60 + v67 + v57, 21);
      v50 += 8;
      unint64_t v41 = v66;
      v53 += 64;
    }
    while (v53);
    unint64_t v68 = v52
        - 0x622015F714C7D297
        * ((0x9DDFEA08EB382D69
          * (v49 ^ ((0x9DDFEA08EB382D69 * (v49 ^ v44)) >> 47) ^ (0x9DDFEA08EB382D69 * (v49 ^ v44)))) ^ ((0x9DDFEA08EB382D69 * (v49 ^ ((0x9DDFEA08EB382D69 * (v49 ^ v44)) >> 47) ^ (0x9DDFEA08EB382D69 * (v49 ^ v44)))) >> 47));
    unint64_t v69 = 0x9DDFEA08EB382D69
        * (v68 ^ (v66
                - 0x4B6D499041670D8DLL * (v39 ^ (v39 >> 47))
                - 0x622015F714C7D297
                * ((0x9DDFEA08EB382D69
                  * (v48 ^ ((0x9DDFEA08EB382D69 * (v48 ^ v43)) >> 47) ^ (0x9DDFEA08EB382D69 * (v48 ^ v43)))) ^ ((0x9DDFEA08EB382D69 * (v48 ^ ((0x9DDFEA08EB382D69 * (v48 ^ v43)) >> 47) ^ (0x9DDFEA08EB382D69 * (v48 ^ v43)))) >> 47))));
    unint64_t v70 = 0x9DDFEA08EB382D69 * (v68 ^ (v69 >> 47) ^ v69);
    goto LABEL_13;
  }
  if (a2 > 0x10)
  {
    uint64_t v26 = a1[1];
    unint64_t v27 = 0xB492B66FBE98F273 * *a1;
    uint64_t v28 = __ROR8__(0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a1 + a2 - 8), 30) + __ROR8__(v27 - v26, 43);
    unint64_t v29 = v27 + a2 + __ROR8__(v26 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a1 + a2 - 8);
    unint64_t v23 = 0x9DDFEA08EB382D69;
    unint64_t v30 = 0x9DDFEA08EB382D69 * (v29 ^ (v28 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)a1 + a2 - 16)));
    unint64_t v31 = v29 ^ (v30 >> 47) ^ v30;
LABEL_8:
    unint64_t v25 = 0x9DDFEA08EB382D69 * v31;
    return (v25 ^ (v25 >> 47)) * v23;
  }
  if (a2 < 9)
  {
    if (a2 >= 4)
    {
      uint64_t v72 = *(unsigned int *)((char *)a1 + a2 - 4);
      unint64_t v23 = 0x9DDFEA08EB382D69;
      unint64_t v73 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)a1) + a2) ^ v72);
      unint64_t v31 = v72 ^ (v73 >> 47) ^ v73;
      goto LABEL_8;
    }
    unint64_t v4 = 0x9AE16A3B2F90404FLL;
    if (!a2) {
      return v4;
    }
    unint64_t v70 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                   * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
LABEL_13:
    v4 *= v70 ^ (v70 >> 47);
    return v4;
  }
  uint64_t v2 = *(uint64_t *)((char *)a1 + a2 - 8);
  uint64_t v3 = __ROR8__(v2 + a2, a2);
  return (0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69
          * (v3 ^ ((0x9DDFEA08EB382D69 * (v3 ^ *a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v3 ^ *a1)))) ^ ((0x9DDFEA08EB382D69 * (v3 ^ ((0x9DDFEA08EB382D69 * (v3 ^ *a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v3 ^ *a1)))) >> 47))) ^ v2;
}

BOOL std::equal_to<std::string>::operator()[abi:nn180100](unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) == 0;
  }
  if (!a1[23]) {
    return 1;
  }
  uint64_t v6 = v2 - 1;
  do
  {
    int v8 = *a1++;
    int v7 = v8;
    int v10 = *a2++;
    int v9 = v10;
    BOOL v12 = v6-- != 0;
    BOOL v13 = v7 == v9;
    BOOL v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,void *>>>::operator()[abi:nn180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void *std::__hash_table<std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    int v7 = (uint64_t *)a2;
  }
  else {
    int v7 = *(uint64_t **)a2;
  }
  if (v6 >= 0) {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v8 = *(void *)(a2 + 8);
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v14 = v9;
      if (v9 >= v11) {
        unint64_t v14 = v9 % v11;
      }
    }
    else
    {
      unint64_t v14 = (v11 - 1) & v9;
    }
    uint64_t v15 = *(void ***)(*(void *)a1 + 8 * v14);
    if (v15)
    {
      for (uint64_t i = *v15; i; uint64_t i = *(void **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)i + 16, (unsigned __int8 *)a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
          }
          else
          {
            v17 &= v11 - 1;
          }
          if (v17 != v14) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v14 = 0;
  }
  uint64_t i = operator new(0x30uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v10;
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  uint64_t v18 = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *((void *)i + 4) = v18;
  *((void *)i + 5) = 0;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    BOOL v21 = 1;
    if (v11 >= 3) {
      BOOL v21 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v11);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>(a1, v24);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v14 = v10 % v11;
      }
      else {
        unint64_t v14 = v10;
      }
    }
    else
    {
      unint64_t v14 = (v11 - 1) & v10;
    }
  }
  uint64_t v25 = *(void *)a1;
  uint64_t v26 = *(void **)(*(void *)a1 + 8 * v14);
  if (v26)
  {
    *(void *)uint64_t i = *v26;
LABEL_44:
    *uint64_t v26 = i;
    goto LABEL_45;
  }
  *(void *)uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v25 + 8 * v14) = a1 + 16;
  if (*(void *)i)
  {
    unint64_t v27 = *(void *)(*(void *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v27 >= v11) {
        v27 %= v11;
      }
    }
    else
    {
      v27 &= v11 - 1;
    }
    uint64_t v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_44;
  }
LABEL_45:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_18482A420(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE1_clEvENUlP16CABasicAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE4_8__invokeES8_SA_SD_SM_SP_(void *a1, const char *a2)
{
  return [a1 setRoundsToInteger:HIBYTE(*((_DWORD *)a2 + 3)) & 1];
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE1_clEvENUlP16CABasicAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithDouble:*(double *)(a2 + 136)];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      unint64_t v8 = a4;
    }
    else {
      unint64_t v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE1_clEvENUlP16CABasicAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithDouble:*(double *)(a2 + 144)];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      unint64_t v8 = a4;
    }
    else {
      unint64_t v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE1_clEvENUlP16CABasicAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES8_SA_SD_SM_SP_(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a2 + 120);
  if (v5)
  {
    int v6 = (void *)result;
    uint64_t result = ns_object_from_render_object(a5, v5, 0);
    if (result)
    {
      uint64_t v7 = result;
      uint64_t v8 = [NSString stringWithUTF8String:"toValue"];
      return [v6 setValue:v7 forKey:v8];
    }
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE1_clEvENUlP16CABasicAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES8_SA_SD_SM_SP_(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a2 + 112);
  if (v5)
  {
    int v6 = (void *)result;
    uint64_t result = ns_object_from_render_object(a5, v5, 0);
    if (result)
    {
      uint64_t v7 = result;
      uint64_t v8 = [NSString stringWithUTF8String:"fromValue"];
      return [v6 setValue:v7 forKey:v8];
    }
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE1_clEvENUlP16CABasicAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES8_SA_SD_SM_SP_(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a2 + 128);
  if (v5)
  {
    int v6 = (void *)result;
    uint64_t result = ns_object_from_render_object(a5, v5, 0);
    if (result)
    {
      uint64_t v7 = result;
      uint64_t v8 = [NSString stringWithUTF8String:"byValue"];
      return [v6 setValue:v7 forKey:v8];
    }
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    uint64_t v7 = (uint64_t *)a2;
  }
  else {
    uint64_t v7 = *(uint64_t **)a2;
  }
  if (v6 >= 0) {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v8 = *(void *)(a2 + 8);
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v14 = v9;
      if (v9 >= v11) {
        unint64_t v14 = v9 % v11;
      }
    }
    else
    {
      unint64_t v14 = (v11 - 1) & v9;
    }
    uint64_t v15 = *(void ***)(*(void *)a1 + 8 * v14);
    if (v15)
    {
      for (uint64_t i = *v15; i; uint64_t i = *(void **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)i + 16, (unsigned __int8 *)a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
          }
          else
          {
            v17 &= v11 - 1;
          }
          if (v17 != v14) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v14 = 0;
  }
  uint64_t i = operator new(0x30uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v10;
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  uint64_t v18 = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *((void *)i + 4) = v18;
  *((void *)i + 5) = 0;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    BOOL v21 = 1;
    if (v11 >= 3) {
      BOOL v21 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v11);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>(a1, v24);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v14 = v10 % v11;
      }
      else {
        unint64_t v14 = v10;
      }
    }
    else
    {
      unint64_t v14 = (v11 - 1) & v10;
    }
  }
  uint64_t v25 = *(void *)a1;
  uint64_t v26 = *(void **)(*(void *)a1 + 8 * v14);
  if (v26)
  {
    *(void *)uint64_t i = *v26;
LABEL_44:
    *uint64_t v26 = i;
    goto LABEL_45;
  }
  *(void *)uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v25 + 8 * v14) = a1 + 16;
  if (*(void *)i)
  {
    unint64_t v27 = *(void *)(*(void *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v27 >= v11) {
        v27 %= v11;
      }
    }
    else
    {
      v27 &= v11 - 1;
    }
    uint64_t v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_44;
  }
LABEL_45:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_18482A908(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

void _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE7_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2)
{
  CFStringRef v3 = CA::Render::key_path_copy_string(*(void *)(a2 + 96), (void *const *)a2);
  if (v3)
  {
    CFStringRef v4 = v3;
    [a1 setKeyPath:v3];
    CFRelease(v4);
  }
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE6_8__invokeES8_SA_SD_SM_SP_(void *a1, const char *a2)
{
  return [a1 setCumulative:(*((_DWORD *)a2 + 3) >> 10) & 1];
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES8_SA_SD_SM_SP_(void *a1, const char *a2, double a3, double a4, double a5)
{
  LODWORD(a3) = *((_DWORD *)a2 + 6);
  LODWORD(a4) = *((_DWORD *)a2 + 7);
  LODWORD(a5) = *((_DWORD *)a2 + 8);
  return objc_msgSend(a1, "setPreferredFrameRateRange:", a3, a4, a5);
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2)
{
  uint64_t result = [NSNumber numberWithLongLong:*(unsigned int *)(a2 + 88)];
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = [NSString stringWithUTF8String:"highFrameRateReason"];
    return [a1 setValue:v4 forKey:v5];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2)
{
  uint64_t result = [NSNumber numberWithLongLong:((unint64_t)*(unsigned int *)(a2 + 12) >> 9) & 1];
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = [NSString stringWithUTF8String:"additive"];
    return [a1 setValue:v4 forKey:v5];
  }
  return result;
}

CAValueFunction *_ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2)
{
  v6[1] = *MEMORY[0x1E4F143B8];
  v6[0] = *(void *)(a2 + 104);
  uint64_t result = id_from_value<void,CA::Render::Function *>(v6);
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = [NSString stringWithUTF8String:"valueFunction"];
    return (CAValueFunction *)[a1 setValue:v4 forKey:v5];
  }
  return result;
}

CAValueFunction *id_from_value<void,CA::Render::Function *>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (!v2) {
    return 0;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 96))(v2) != 1) {
    __assert_rtn("id_from_value", "CAReverseSerialization.mm", 466, "false");
  }
  unsigned int v3 = (*(uint64_t (**)(void))(*(void *)*a1 + 120))();
  if (v3 > 0xC || !*off_1E5273588[v3]) {
    return 0;
  }

  return +[CAValueFunction functionWithName:](CAValueFunction, "functionWithName:");
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithLongLong:((unint64_t)*(unsigned int *)(a2 + 12) >> 15) & 1];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      unint64_t v8 = a4;
    }
    else {
      unint64_t v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    uint64_t v7 = (uint64_t *)a2;
  }
  else {
    uint64_t v7 = *(uint64_t **)a2;
  }
  if (v6 >= 0) {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v8 = *(void *)(a2 + 8);
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v14 = v9;
      if (v9 >= v11) {
        unint64_t v14 = v9 % v11;
      }
    }
    else
    {
      unint64_t v14 = (v11 - 1) & v9;
    }
    uint64_t v15 = *(void ***)(*(void *)a1 + 8 * v14);
    if (v15)
    {
      for (uint64_t i = *v15; i; uint64_t i = *(void **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)i + 16, (unsigned __int8 *)a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
          }
          else
          {
            v17 &= v11 - 1;
          }
          if (v17 != v14) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v14 = 0;
  }
  uint64_t i = operator new(0x30uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v10;
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  uint64_t v18 = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *((void *)i + 4) = v18;
  *((void *)i + 5) = 0;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    BOOL v21 = 1;
    if (v11 >= 3) {
      BOOL v21 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v11);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>(a1, v24);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v14 = v10 % v11;
      }
      else {
        unint64_t v14 = v10;
      }
    }
    else
    {
      unint64_t v14 = (v11 - 1) & v10;
    }
  }
  uint64_t v25 = *(void *)a1;
  uint64_t v26 = *(void **)(*(void *)a1 + 8 * v14);
  if (v26)
  {
    *(void *)uint64_t i = *v26;
LABEL_44:
    *uint64_t v26 = i;
    goto LABEL_45;
  }
  *(void *)uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v25 + 8 * v14) = a1 + 16;
  if (*(void *)i)
  {
    unint64_t v27 = *(void *)(*(void *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v27 >= v11) {
        v27 %= v11;
      }
    }
    else
    {
      v27 &= v11 - 1;
    }
    uint64_t v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_44;
  }
LABEL_45:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_18482AF14(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    uint64_t v7 = (uint64_t *)a2;
  }
  else {
    uint64_t v7 = *(uint64_t **)a2;
  }
  if (v6 >= 0) {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v8 = *(void *)(a2 + 8);
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v14 = v9;
      if (v9 >= v11) {
        unint64_t v14 = v9 % v11;
      }
    }
    else
    {
      unint64_t v14 = (v11 - 1) & v9;
    }
    uint64_t v15 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v14);
    if (v15)
    {
      for (uint64_t i = *v15; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, (unsigned __int8 *)a2)) {
            return;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
          }
          else
          {
            v17 &= v11 - 1;
          }
          if (v17 != v14) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v14 = 0;
  }
  uint64_t v18 = operator new(0x30uLL);
  *uint64_t v18 = 0;
  v18[1] = v10;
  float v19 = (std::string *)(v18 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    _OWORD v18[4] = *(void *)(a3 + 16);
  }
  v18[5] = *(void *)(a3 + 24);
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v14 = v10 % v11;
      }
      else {
        unint64_t v14 = v10;
      }
    }
    else
    {
      unint64_t v14 = (v11 - 1) & v10;
    }
  }
  uint64_t v26 = *(void *)a1;
  unint64_t v27 = *(void **)(*(void *)a1 + 8 * v14);
  if (v27)
  {
    *uint64_t v18 = *v27;
LABEL_47:
    *unint64_t v27 = v18;
    goto LABEL_48;
  }
  *uint64_t v18 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v18;
  *(void *)(v26 + 8 * v14) = a1 + 16;
  if (*v18)
  {
    unint64_t v28 = *(void *)(*v18 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11) {
        v28 %= v11;
      }
    }
    else
    {
      v28 &= v11 - 1;
    }
    unint64_t v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_47;
  }
LABEL_48:
  ++*(void *)(a1 + 24);
}

void sub_18482B180(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,void *>>>::operator()[abi:nn180100](0, v1);
  _Unwind_Resume(a1);
}

uint64_t _ZZ22get_setters_for_timingIN2CA6Render15SpringAnimationE11CAAnimationEDavENKUlvE_clEv()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  memset(v3, 0, sizeof(v3));
  uint64_t v4 = 1065353216;
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>((uint64_t)v3, 0x40uLL);
  snake_case_to_camel_case("begin_time", 10, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 842, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render15SpringAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES6_S8_SB_SK_SN_;
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("speed", 5, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 843, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render15SpringAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES6_S8_SB_SK_SN_;
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("duration", 8, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 844, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render15SpringAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES6_S8_SB_SK_SN_;
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("time_offset", 11, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 845, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render15SpringAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES6_S8_SB_SK_SN_;
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("autoreverses", 12, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 846, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render15SpringAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES6_S8_SB_SK_SN_;
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("fill_mode", 9, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 856, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render15SpringAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE4_8__invokeES6_S8_SB_SK_SN_;
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("repeatDuration", 14, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 860, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render15SpringAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE5_8__invokeES6_S8_SB_SK_SN_;
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("repeatCount", 11, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 864, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render15SpringAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE6_8__invokeES6_S8_SB_SK_SN_;
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__hash_table((uint64_t)&_ZZ22get_setters_for_timingIN2CA6Render15SpringAnimationE11CAAnimationEDavE10timing_map, (uint64_t *)v3);
  return std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)v3);
}

void sub_18482B72C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void *_ZZZ22get_setters_for_timingIN2CA6Render15SpringAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE6_8__invokeES6_S8_SB_SK_SN_(void *a1, const char *a2)
{
  uint64_t v2 = *((void *)a2 + 5);
  if (v2)
  {
    if ((*(unsigned char *)(v2 + 13) & 8) == 0)
    {
      double v3 = *(double *)(v2 + 24);
      *(float *)&double v3 = v3;
      return (void *)[a1 setRepeatCount:v3];
    }
  }
  return a1;
}

void *_ZZZ22get_setters_for_timingIN2CA6Render15SpringAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE5_8__invokeES6_S8_SB_SK_SN_(void *a1, const char *a2)
{
  uint64_t v2 = *((void *)a2 + 5);
  if (v2)
  {
    if ((*(unsigned char *)(v2 + 13) & 8) != 0) {
      return (void *)[a1 setRepeatDuration:*(double *)(v2 + 24)];
    }
  }
  return a1;
}

void *_ZZZ22get_setters_for_timingIN2CA6Render15SpringAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE4_8__invokeES6_S8_SB_SK_SN_(void *a1, const char *a2)
{
  uint64_t v2 = *((void *)a2 + 5);
  if (v2)
  {
    int v3 = *(_DWORD *)(v2 + 12);
    if ((v3 & 0x200) != 0)
    {
      if ((v3 & 0x400) != 0) {
        uint64_t v4 = &kCAFillModeBoth;
      }
      else {
        uint64_t v4 = &kCAFillModeForwards;
      }
    }
    else
    {
      if ((v3 & 0x400) == 0) {
        return a1;
      }
      uint64_t v4 = &kCAFillModeBackwards;
    }
    return (void *)[a1 setFillMode:*v4];
  }
  return a1;
}

void *_ZZZ22get_setters_for_timingIN2CA6Render15SpringAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES6_S8_SB_SK_SN_(void *a1, const char *a2)
{
  uint64_t v2 = *((void *)a2 + 5);
  if (v2) {
    return (void *)[a1 setAutoreverses:(*(_DWORD *)(v2 + 12) >> 8) & 1];
  }
  return a1;
}

void *_ZZZ22get_setters_for_timingIN2CA6Render15SpringAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES6_S8_SB_SK_SN_(void *a1, const char *a2)
{
  uint64_t v2 = *((void *)a2 + 5);
  if (v2) {
    return (void *)[a1 setTimeOffset:*(double *)(v2 + 48)];
  }
  return a1;
}

void *_ZZZ22get_setters_for_timingIN2CA6Render15SpringAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES6_S8_SB_SK_SN_(void *a1, const char *a2)
{
  uint64_t v2 = *((void *)a2 + 5);
  if (v2) {
    return (void *)[a1 setDuration:*(double *)(v2 + 32)];
  }
  return a1;
}

void *_ZZZ22get_setters_for_timingIN2CA6Render15SpringAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES6_S8_SB_SK_SN_(void *a1, const char *a2, double a3)
{
  uint64_t v3 = *((void *)a2 + 5);
  if (v3)
  {
    LODWORD(a3) = *(_DWORD *)(v3 + 16);
    return (void *)[a1 setSpeed:a3];
  }
  return a1;
}

void *_ZZZ22get_setters_for_timingIN2CA6Render15SpringAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES6_S8_SB_SK_SN_(void *a1, const char *a2)
{
  uint64_t v2 = *((void *)a2 + 5);
  if (v2) {
    return (void *)[a1 setBeginTime:*(double *)(v2 + 40)];
  }
  return a1;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE_clEvENUlP11CAAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES8_SA_SD_SM_SP_(void *a1, const char *a2)
{
  return [a1 setRemovedOnCompletion:(*((_DWORD *)a2 + 3) >> 11) & 1];
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE_clEvENUlP11CAAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 24);
  int v6 = v3;
  uint64_t result = [MEMORY[0x1E4F29238] valueWithBytes:&v5 objCType:"{CAFrameRateRange=fff}"];
  if (result) {
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(NSString, "stringWithUTF8String:", "preferredFrameRateRange"));
  }
  return result;
}

CAMediaTimingFunction *_ZZZ20get_setters_for_typeIN2CA6Render15SpringAnimationEERKDavENKUlvE_clEvENUlP11CAAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES8_SA_SD_SM_SP_(CAMediaTimingFunction *result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *(void *)(a2 + 48);
  if (v4)
  {
    int v6 = result;
    uint64_t result = nsobject_from_values<CAMediaTimingFunction *,double>((double *)(v4 + 24), *(_DWORD *)(v4 + 16));
    if (result)
    {
      uint64_t v7 = result;
      if (*((char *)a4 + 23) >= 0) {
        unint64_t v8 = a4;
      }
      else {
        unint64_t v8 = (uint64_t *)*a4;
      }
      uint64_t v9 = [NSString stringWithUTF8String:v8];
      return (CAMediaTimingFunction *)[(CAMediaTimingFunction *)v6 setValue:v7 forKey:v9];
    }
  }
  return result;
}

CAMediaTimingFunction *nsobject_from_values<CAMediaTimingFunction *,double>(double *a1, unsigned int a2)
{
  if (a2 <= 3) {
    __assert_rtn("nsobject_from_values", "CAReverseSerialization.mm", 274, "count >= 4");
  }
  double v2 = *a1;
  double v3 = a1[1];
  *(float *)&double v2 = *a1;
  *(float *)&double v3 = v3;
  double v4 = a1[2];
  double v5 = a1[3];
  *(float *)&double v4 = v4;
  *(float *)&double v5 = v5;

  return +[CAMediaTimingFunction functionWithControlPoints:v2 :v3 :v4 :v5];
}

uint64_t _ZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE_clEv()
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  memset(v5, 0, sizeof(v5));
  uint64_t v6 = 1065353216;
  snake_case_to_camel_case("timing_function", 15, (char *)v7);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v7);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v5[0], *((unint64_t *)&v5[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1169, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v7);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v5, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE_clEvENUlP11CAAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES8_SA_SD_SM_SP_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v7, "preferredFrameRateRange");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v5[0], *((unint64_t *)&v5[0] + 1), (uint64_t)v7))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1170, "\"Duplicated Entry !!\" && map.map.find (\"preferredFrameRateRange\") == map.map.end ()");
  }
  if (SBYTE7(v8) < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v7, "preferredFrameRateRange");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v5, (uint64_t)v7, (uint64_t)v7)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE_clEvENUlP11CAAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES8_SA_SD_SM_SP_;
  if (SBYTE7(v8) < 0) {
    operator delete(v7[0]);
  }
  snake_case_to_camel_case("removed_on_completion", 21, (char *)v7);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v7);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v5[0], *((unint64_t *)&v5[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1173, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v7);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v5, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE_clEvENUlP11CAAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES8_SA_SD_SM_SP_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZ22get_setters_for_timingIN2CA6Render17KeyframeAnimationE11CAAnimationEDavE10timing_map, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZ22get_setters_for_timingIN2CA6Render17KeyframeAnimationE11CAAnimationEDavE10timing_map))
  {
    _ZZ22get_setters_for_timingIN2CA6Render17KeyframeAnimationE11CAAnimationEDavENKUlvE_clEv();
    __cxa_guard_release(&_ZGVZ22get_setters_for_timingIN2CA6Render17KeyframeAnimationE11CAAnimationEDavE10timing_map);
  }
  *(_OWORD *)uint64_t v7 = 0u;
  long long v8 = 0u;
  int v9 = dword_1E8F87B50;
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>((uint64_t)v7, qword_1E8F87B38);
  uint64_t v0 = (void *)qword_1E8F87B40;
  if (qword_1E8F87B40)
  {
    do
    {
      std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)> const&>((uint64_t)v7, (uint64_t)(v0 + 2), (uint64_t)(v0 + 2));
      uint64_t v0 = (void *)*v0;
    }
    while (v0);
  }
  for (uint64_t i = (void *)v8; i; uint64_t i = (void *)*i)
    std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)> const&>((uint64_t)v5, (uint64_t)(i + 2), (uint64_t)(i + 2));
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__hash_table((uint64_t)&_ZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavE13animation_map, (uint64_t *)v5);
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)v7);
  return std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)v5);
}

void sub_18482BD84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
}

uint64_t _ZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE0_clEv()
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  long long v30 = 0u;
  long long v31 = 0u;
  uint64_t v32 = 1065353216;
  uint64_t v0 = qword_1E8F87AB0;
  if (qword_1E8F87AB0)
  {
    uint64_t v1 = 0;
    do
    {
      int v2 = *(char *)(v0 + 39);
      if (v2 >= 0) {
        double v3 = (uint64_t *)(v0 + 16);
      }
      else {
        double v3 = *(uint64_t **)(v0 + 16);
      }
      if (v2 >= 0) {
        unint64_t v4 = *(unsigned __int8 *)(v0 + 39);
      }
      else {
        unint64_t v4 = *(void *)(v0 + 24);
      }
      unint64_t v5 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v3, v4);
      unint64_t v6 = v5;
      unint64_t v7 = *((void *)&v30 + 1);
      if (*((void *)&v30 + 1))
      {
        uint8x8_t v8 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v30 + 8));
        v8.i16[0] = vaddlv_u8(v8);
        unint64_t v9 = v8.u32[0];
        if (v8.u32[0] > 1uLL)
        {
          unint64_t v10 = v5;
          if (v5 >= *((void *)&v30 + 1)) {
            unint64_t v10 = v5 % *((void *)&v30 + 1);
          }
        }
        else
        {
          unint64_t v10 = (*((void *)&v30 + 1) - 1) & v5;
        }
        unint64_t v11 = *(unsigned __int8 ***)(v30 + 8 * v10);
        if (v11)
        {
          for (uint64_t i = *v11; i; uint64_t i = *(unsigned __int8 **)i)
          {
            unint64_t v13 = *((void *)i + 1);
            if (v13 == v6)
            {
              if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, (unsigned __int8 *)(v0 + 16))) {
                goto LABEL_51;
              }
            }
            else
            {
              if (v9 > 1)
              {
                if (v13 >= v7) {
                  v13 %= v7;
                }
              }
              else
              {
                v13 &= v7 - 1;
              }
              if (v13 != v10) {
                break;
              }
            }
          }
        }
      }
      else
      {
        unint64_t v10 = 0;
      }
      unint64_t v14 = operator new(0x30uLL);
      *unint64_t v14 = 0;
      v14[1] = v6;
      uint64_t v15 = (std::string *)(v14 + 2);
      if (*(char *)(v0 + 39) < 0)
      {
        std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)(v0 + 16), *(void *)(v0 + 24));
        uint64_t v1 = *((void *)&v31 + 1);
      }
      else
      {
        long long v16 = *(_OWORD *)(v0 + 16);
        void v14[4] = *(void *)(v0 + 32);
        *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
      }
      v14[5] = *(void *)(v0 + 40);
      float v17 = (float)(unint64_t)(v1 + 1);
      if (!v7 || (float)(*(float *)&v32 * (float)v7) < v17)
      {
        BOOL v18 = (v7 & (v7 - 1)) != 0;
        if (v7 < 3) {
          BOOL v18 = 1;
        }
        unint64_t v19 = v18 | (2 * v7);
        unint64_t v20 = vcvtps_u32_f32(v17 / *(float *)&v32);
        if (v19 <= v20) {
          size_t v21 = v20;
        }
        else {
          size_t v21 = v19;
        }
        std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>((uint64_t)&v30, v21);
        unint64_t v7 = *((void *)&v30 + 1);
        if ((*((void *)&v30 + 1) & (*((void *)&v30 + 1) - 1)) != 0)
        {
          if (v6 >= *((void *)&v30 + 1)) {
            unint64_t v10 = v6 % *((void *)&v30 + 1);
          }
          else {
            unint64_t v10 = v6;
          }
        }
        else
        {
          unint64_t v10 = (*((void *)&v30 + 1) - 1) & v6;
        }
      }
      uint64_t v22 = v30;
      unint64_t v23 = *(void **)(v30 + 8 * v10);
      if (v23)
      {
        *unint64_t v14 = *v23;
      }
      else
      {
        *unint64_t v14 = v31;
        *(void *)&long long v31 = v14;
        *(void *)(v22 + 8 * v10) = &v31;
        if (!*v14) {
          goto LABEL_50;
        }
        unint64_t v24 = *(void *)(*v14 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v24 >= v7) {
            v24 %= v7;
          }
        }
        else
        {
          v24 &= v7 - 1;
        }
        unint64_t v23 = (void *)(v30 + 8 * v24);
      }
      *unint64_t v23 = v14;
LABEL_50:
      uint64_t v1 = ++*((void *)&v31 + 1);
LABEL_51:
      uint64_t v0 = *(void *)v0;
    }
    while (v0);
  }
  snake_case_to_camel_case("discretizes_time", 16, (char *)v33);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1188, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "valueFunction");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1190, "\"Duplicated Entry !!\" && map.map.find (\"valueFunction\") == map.map.end ()");
  }
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "valueFunction");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "additive");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1191, "\"Duplicated Entry !!\" && map.map.find (\"additive\") == map.map.end ()");
  }
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "additive");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "highFrameRateReason");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1192, "\"Duplicated Entry !!\" && map.map.find (\"highFrameRateReason\") == map.map.end ()");
  }
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "highFrameRateReason");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  snake_case_to_camel_case("preferredFrameRateRangeMinimum", 30, (char *)v33);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1199, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "preferredFrameRateRangeMaximum");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1200, "\"Duplicated Entry !!\" && map.map.find (\"preferredFrameRateRangeMaximum\") == map.map.end ()");
  }
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "preferredFrameRateRangeMaximum");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE4_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "preferredFrameRateRangePreferred");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1201, "\"Duplicated Entry !!\" && map.map.find (\"preferredFrameRateRangePreferred\") == map.map.end ()");
  }
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "preferredFrameRateRangePreferred");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE5_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  snake_case_to_camel_case("cumulative", 10, (char *)v33);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1205, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE6_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("property", 8, (char *)v33);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1212, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE7_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "beginTimeMode");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1216, "\"Duplicated Entry !!\" && map.map.find (\"beginTimeMode\") == map.map.end ()");
  }
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "beginTimeMode");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE8_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "delegate");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1217, "\"Duplicated Entry !!\" && map.map.find (\"delegate\") == map.map.end ()");
  }
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "delegate");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE9_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "keyPath");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1218, "\"Duplicated Entry !!\" && map.map.find (\"keyPath\") == map.map.end ()");
  }
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "keyPath");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE10_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "frameInterval");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1222, "\"Duplicated Entry !!\" && map.map.find (\"frameInterval\") == map.map.end ()");
  }
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "frameInterval");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE11_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "preferredFramesPerSecond");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1223, "\"Duplicated Entry !!\" && map.map.find (\"preferredFramesPerSecond\") == map.map.end ()");
  }
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "preferredFramesPerSecond");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE12_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  long long v25 = v30;
  long long v30 = 0uLL;
  _ZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavE17property_anim_map = v25;
  xmmword_1E8F87AE0 = v31;
  dword_1E8F87AF0 = v32;
  if (*((void *)&v31 + 1))
  {
    unint64_t v26 = *(void *)(v31 + 8);
    if ((*((void *)&v25 + 1) & (*((void *)&v25 + 1) - 1)) != 0)
    {
      if (v26 >= *((void *)&v25 + 1)) {
        v26 %= *((void *)&v25 + 1);
      }
    }
    else
    {
      v26 &= *((void *)&v25 + 1) - 1;
    }
    *(void *)(v25 + 8 * v26) = &xmmword_1E8F87AE0;
    long long v31 = 0uLL;
  }
  return std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)&v30);
}

void sub_18482C998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t _ZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE1_clEv()
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  long long v30 = 0u;
  long long v31 = 0u;
  uint64_t v32 = 1065353216;
  uint64_t v0 = (uint64_t *)xmmword_1E8F87AE0;
  if ((void)xmmword_1E8F87AE0)
  {
    uint64_t v1 = 0;
    do
    {
      int v2 = *((char *)v0 + 39);
      if (v2 >= 0) {
        double v3 = v0 + 2;
      }
      else {
        double v3 = (uint64_t *)v0[2];
      }
      if (v2 >= 0) {
        unint64_t v4 = *((unsigned __int8 *)v0 + 39);
      }
      else {
        unint64_t v4 = v0[3];
      }
      unint64_t v5 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v3, v4);
      unint64_t v6 = v5;
      unint64_t v7 = *((void *)&v30 + 1);
      if (*((void *)&v30 + 1))
      {
        uint8x8_t v8 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v30 + 8));
        v8.i16[0] = vaddlv_u8(v8);
        unint64_t v9 = v8.u32[0];
        if (v8.u32[0] > 1uLL)
        {
          unint64_t v10 = v5;
          if (v5 >= *((void *)&v30 + 1)) {
            unint64_t v10 = v5 % *((void *)&v30 + 1);
          }
        }
        else
        {
          unint64_t v10 = (*((void *)&v30 + 1) - 1) & v5;
        }
        unint64_t v11 = *(unsigned __int8 ***)(v30 + 8 * v10);
        if (v11)
        {
          for (uint64_t i = *v11; i; uint64_t i = *(unsigned __int8 **)i)
          {
            unint64_t v13 = *((void *)i + 1);
            if (v13 == v6)
            {
              if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, (unsigned __int8 *)v0 + 16)) {
                goto LABEL_51;
              }
            }
            else
            {
              if (v9 > 1)
              {
                if (v13 >= v7) {
                  v13 %= v7;
                }
              }
              else
              {
                v13 &= v7 - 1;
              }
              if (v13 != v10) {
                break;
              }
            }
          }
        }
      }
      else
      {
        unint64_t v10 = 0;
      }
      unint64_t v14 = operator new(0x30uLL);
      *unint64_t v14 = 0;
      v14[1] = v6;
      uint64_t v15 = (std::string *)(v14 + 2);
      if (*((char *)v0 + 39) < 0)
      {
        std::string::__init_copy_ctor_external(v15, (const std::string::value_type *)v0[2], v0[3]);
        uint64_t v1 = *((void *)&v31 + 1);
      }
      else
      {
        long long v16 = *((_OWORD *)v0 + 1);
        void v14[4] = v0[4];
        *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
      }
      v14[5] = v0[5];
      float v17 = (float)(unint64_t)(v1 + 1);
      if (!v7 || (float)(*(float *)&v32 * (float)v7) < v17)
      {
        BOOL v18 = (v7 & (v7 - 1)) != 0;
        if (v7 < 3) {
          BOOL v18 = 1;
        }
        unint64_t v19 = v18 | (2 * v7);
        unint64_t v20 = vcvtps_u32_f32(v17 / *(float *)&v32);
        if (v19 <= v20) {
          size_t v21 = v20;
        }
        else {
          size_t v21 = v19;
        }
        std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>((uint64_t)&v30, v21);
        unint64_t v7 = *((void *)&v30 + 1);
        if ((*((void *)&v30 + 1) & (*((void *)&v30 + 1) - 1)) != 0)
        {
          if (v6 >= *((void *)&v30 + 1)) {
            unint64_t v10 = v6 % *((void *)&v30 + 1);
          }
          else {
            unint64_t v10 = v6;
          }
        }
        else
        {
          unint64_t v10 = (*((void *)&v30 + 1) - 1) & v6;
        }
      }
      uint64_t v22 = v30;
      unint64_t v23 = *(void **)(v30 + 8 * v10);
      if (v23)
      {
        *unint64_t v14 = *v23;
      }
      else
      {
        *unint64_t v14 = v31;
        *(void *)&long long v31 = v14;
        *(void *)(v22 + 8 * v10) = &v31;
        if (!*v14) {
          goto LABEL_50;
        }
        unint64_t v24 = *(void *)(*v14 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v24 >= v7) {
            v24 %= v7;
          }
        }
        else
        {
          v24 &= v7 - 1;
        }
        unint64_t v23 = (void *)(v30 + 8 * v24);
      }
      *unint64_t v23 = v14;
LABEL_50:
      uint64_t v1 = ++*((void *)&v31 + 1);
LABEL_51:
      uint64_t v0 = (uint64_t *)*v0;
    }
    while (v0);
  }
  snake_case_to_camel_case("bias_values", 11, (char *)v33);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1281, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE1_clEvENUlP19CAKeyframeAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("continuity_values", 17, (char *)v33);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1282, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE1_clEvENUlP19CAKeyframeAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("path", 4, (char *)v33);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1283, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE1_clEvENUlP19CAKeyframeAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("tension_values", 14, (char *)v33);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1284, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE1_clEvENUlP19CAKeyframeAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("timing_functions", 16, (char *)v33);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1285, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE1_clEvENUlP19CAKeyframeAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("values", 6, (char *)v33);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1286, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE1_clEvENUlP19CAKeyframeAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE4_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "keyTimes");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1287, "\"Duplicated Entry !!\" && map.map.find (\"keyTimes\") == map.map.end ()");
  }
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "keyTimes");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE1_clEvENUlP19CAKeyframeAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE5_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "calculationMode");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1288, "\"Duplicated Entry !!\" && map.map.find (\"calculationMode\") == map.map.end ()");
  }
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "calculationMode");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE1_clEvENUlP19CAKeyframeAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE6_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  snake_case_to_camel_case("rotation_mode", 13, (char *)v33);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1294, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE1_clEvENUlP19CAKeyframeAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE7_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  long long v25 = v30;
  long long v30 = 0uLL;
  _ZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavE17keyframe_anim_map = v25;
  xmmword_1E8F87B10 = v31;
  dword_1E8F87B20 = v32;
  if (*((void *)&v31 + 1))
  {
    unint64_t v26 = *(void *)(v31 + 8);
    if ((*((void *)&v25 + 1) & (*((void *)&v25 + 1) - 1)) != 0)
    {
      if (v26 >= *((void *)&v25 + 1)) {
        v26 %= *((void *)&v25 + 1);
      }
    }
    else
    {
      v26 &= *((void *)&v25 + 1) - 1;
    }
    *(void *)(v25 + 8 * v26) = &xmmword_1E8F87B10;
    long long v31 = 0uLL;
  }
  return std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)&v30);
}

void sub_18482D39C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAKeyframeAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    unint64_t v7 = (uint64_t *)a2;
  }
  else {
    unint64_t v7 = *(uint64_t **)a2;
  }
  if (v6 >= 0) {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v8 = *(void *)(a2 + 8);
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v14 = v9;
      if (v9 >= v11) {
        unint64_t v14 = v9 % v11;
      }
    }
    else
    {
      unint64_t v14 = (v11 - 1) & v9;
    }
    uint64_t v15 = *(void ***)(*(void *)a1 + 8 * v14);
    if (v15)
    {
      for (uint64_t i = *v15; i; uint64_t i = *(void **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)i + 16, (unsigned __int8 *)a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
          }
          else
          {
            v17 &= v11 - 1;
          }
          if (v17 != v14) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v14 = 0;
  }
  uint64_t i = operator new(0x30uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v10;
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  uint64_t v18 = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *((void *)i + 4) = v18;
  *((void *)i + 5) = 0;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    BOOL v21 = 1;
    if (v11 >= 3) {
      BOOL v21 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v11);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>(a1, v24);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v14 = v10 % v11;
      }
      else {
        unint64_t v14 = v10;
      }
    }
    else
    {
      unint64_t v14 = (v11 - 1) & v10;
    }
  }
  uint64_t v25 = *(void *)a1;
  unint64_t v26 = *(void **)(*(void *)a1 + 8 * v14);
  if (v26)
  {
    *(void *)uint64_t i = *v26;
LABEL_44:
    *unint64_t v26 = i;
    goto LABEL_45;
  }
  *(void *)uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v25 + 8 * v14) = a1 + 16;
  if (*(void *)i)
  {
    unint64_t v27 = *(void *)(*(void *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v27 >= v11) {
        v27 %= v11;
      }
    }
    else
    {
      v27 &= v11 - 1;
    }
    unint64_t v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_44;
  }
LABEL_45:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_18482D6E4(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

void *_ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE1_clEvENUlP19CAKeyframeAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE7_8__invokeES8_SA_SD_SM_SP_(void *a1, const char *a2)
{
  int v2 = *((_DWORD *)a2 + 3);
  if ((v2 & 0x1000000) != 0)
  {
    double v3 = &kCAAnimationRotateAuto;
    return (void *)[a1 setRotationMode:*v3];
  }
  if ((v2 & 0x2000000) != 0)
  {
    double v3 = &kCAAnimationRotateAutoReverse;
    return (void *)[a1 setRotationMode:*v3];
  }
  return a1;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE1_clEvENUlP19CAKeyframeAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE6_8__invokeES8_SA_SD_SM_SP_(uint64_t result, uint64_t a2)
{
  int v2 = (void *)result;
  unint64_t v3 = *(unsigned __int8 *)(a2 + 144);
  if (v3 > 4) {
    unint64_t v4 = &kCAAnimationLinear;
  }
  else {
    unint64_t v4 = (const CAAnimationCalculationMode *)off_1E52735F0[v3];
  }
  CAAnimationCalculationMode v5 = *v4;
  if (*v4)
  {
    uint64_t v6 = [NSString stringWithUTF8String:"calculationMode"];
    return [v2 setValue:v5 forKey:v6];
  }
  return result;
}

void *_ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE1_clEvENUlP19CAKeyframeAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE5_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2)
{
  uint64_t result = id_from_value<NSArray,CA::Render::Vector *>(*(void *)(a2 + 120));
  if (result)
  {
    unint64_t v4 = result;
    uint64_t v5 = [NSString stringWithUTF8String:"keyTimes"];
    return (void *)[a1 setValue:v4 forKey:v5];
  }
  return result;
}

void *id_from_value<NSArray,CA::Render::Vector *>(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = *(unsigned int *)(a1 + 16);
  unint64_t v3 = (void *)[MEMORY[0x1E4F1CA48] arrayWithCapacity:v2];
  if (v2)
  {
    unint64_t v4 = (double *)(a1 + 24);
    do
    {
      double v5 = *v4++;
      objc_msgSend(v3, "addObject:", objc_msgSend(NSNumber, "numberWithDouble:", v5));
      --v2;
    }
    while (v2);
  }
  return v3;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE1_clEvENUlP19CAKeyframeAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE4_8__invokeES8_SA_SD_SM_SP_(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a2 + 112);
  if (v5)
  {
    unint64_t v8 = (void *)result;
    uint64_t result = [MEMORY[0x1E4F1CA48] arrayWithCapacity:*(unsigned int *)(v5 + 16)];
    unint64_t v9 = (void *)result;
    if (*(_DWORD *)(v5 + 16))
    {
      unint64_t v10 = 0;
      do
      {
        uint64_t v11 = *(void *)(v5 + 24 + 8 * v10);
        if (v11) {
          uint64_t v12 = ns_object_from_render_object(a5, v11, 0);
        }
        else {
          uint64_t v12 = 0;
        }
        uint64_t result = [v9 addObject:v12];
        ++v10;
      }
      while (v10 < *(unsigned int *)(v5 + 16));
    }
    if (v9)
    {
      if (*((char *)a4 + 23) >= 0) {
        unint64_t v13 = a4;
      }
      else {
        unint64_t v13 = (uint64_t *)*a4;
      }
      uint64_t v14 = [NSString stringWithUTF8String:v13];
      return [v8 setValue:v9 forKey:v14];
    }
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE1_clEvENUlP19CAKeyframeAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES8_SA_SD_SM_SP_(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *(void *)(a2 + 128);
  if (v4)
  {
    unint64_t v5 = *(unsigned int *)(v4 + 16);
    if (v5 < 4 || (*(_DWORD *)(v4 + 16) & 3) != 0) {
      __assert_rtn("id_from_value", "CAReverseSerialization.mm", 348, "count >=4 && count % 4 == 0");
    }
    unint64_t v8 = (void *)result;
    unint64_t v9 = (void *)[MEMORY[0x1E4F1CA48] arrayWithCapacity:*(unsigned int *)(v4 + 16)];
    unint64_t v10 = 0;
    do
    {
      uint64_t v11 = (double *)(v4 + 8 * v10);
      double v12 = v11[3];
      double v13 = v11[4];
      *(float *)&double v12 = v12;
      *(float *)&double v13 = v13;
      double v14 = v11[5];
      double v15 = v11[6];
      *(float *)&double v14 = v14;
      *(float *)&double v15 = v15;
      uint64_t result = objc_msgSend(v9, "addObject:", +[CAMediaTimingFunction functionWithControlPoints::::](CAMediaTimingFunction, "functionWithControlPoints::::", v12, v13, v14, v15));
      v10 += 4;
    }
    while (v10 < v5);
    if (v9)
    {
      if (*((char *)a4 + 23) >= 0) {
        long long v16 = a4;
      }
      else {
        long long v16 = (uint64_t *)*a4;
      }
      uint64_t v17 = [NSString stringWithUTF8String:v16];
      return [v8 setValue:v9 forKey:v17];
    }
  }
  return result;
}

void *_ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE1_clEvENUlP19CAKeyframeAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = id_from_value<NSArray,CA::Render::Vector *>(*(void *)(a2 + 152));
  if (result)
  {
    unint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      unint64_t v8 = a4;
    }
    else {
      unint64_t v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return (void *)[a1 setValue:v7 forKey:v9];
  }
  return result;
}

CGPath *_ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE1_clEvENUlP19CAKeyframeAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  v10[1] = *MEMORY[0x1E4F143B8];
  v10[0] = *(void *)(a2 + 136);
  uint64_t result = id_from_value<void,CA::Render::Path *>(v10);
  if (result)
  {
    unint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      unint64_t v8 = a4;
    }
    else {
      unint64_t v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return (CGPath *)[a1 setValue:v7 forKey:v9];
  }
  return result;
}

CGPath *id_from_value<void,CA::Render::Path *>(uint64_t *a1)
{
  v5[1] = *(CGMutablePathRef *)MEMORY[0x1E4F143B8];
  if (!*a1) {
    return 0;
  }
  CFMutableDataRef Mutable = CGPathCreateMutable();
  v5[0] = Mutable;
  CA::Render::path_iterate<ReverseSerializationPathIterator>(*a1, v5);
  CGPathRetain(Mutable);
  unint64_t v3 = Mutable;
  CGPathRelease(Mutable);
  return v3;
}

void sub_18482DCB0(_Unwind_Exception *a1)
{
  CGPathRelease(v1);
  _Unwind_Resume(a1);
}

void *_ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE1_clEvENUlP19CAKeyframeAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = id_from_value<NSArray,CA::Render::Vector *>(*(void *)(a2 + 160));
  if (result)
  {
    unint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      unint64_t v8 = a4;
    }
    else {
      unint64_t v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return (void *)[a1 setValue:v7 forKey:v9];
  }
  return result;
}

void *_ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE1_clEvENUlP19CAKeyframeAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = id_from_value<NSArray,CA::Render::Vector *>(*(void *)(a2 + 168));
  if (result)
  {
    unint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      unint64_t v8 = a4;
    }
    else {
      unint64_t v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return (void *)[a1 setValue:v7 forKey:v9];
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    unint64_t v7 = (uint64_t *)a2;
  }
  else {
    unint64_t v7 = *(uint64_t **)a2;
  }
  if (v6 >= 0) {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v8 = *(void *)(a2 + 8);
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v14 = v9;
      if (v9 >= v11) {
        unint64_t v14 = v9 % v11;
      }
    }
    else
    {
      unint64_t v14 = (v11 - 1) & v9;
    }
    double v15 = *(void ***)(*(void *)a1 + 8 * v14);
    if (v15)
    {
      for (uint64_t i = *v15; i; uint64_t i = *(void **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)i + 16, (unsigned __int8 *)a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
          }
          else
          {
            v17 &= v11 - 1;
          }
          if (v17 != v14) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v14 = 0;
  }
  uint64_t i = operator new(0x30uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v10;
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  uint64_t v18 = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *((void *)i + 4) = v18;
  *((void *)i + 5) = 0;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    BOOL v21 = 1;
    if (v11 >= 3) {
      BOOL v21 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v11);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>(a1, v24);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v14 = v10 % v11;
      }
      else {
        unint64_t v14 = v10;
      }
    }
    else
    {
      unint64_t v14 = (v11 - 1) & v10;
    }
  }
  uint64_t v25 = *(void *)a1;
  unint64_t v26 = *(void **)(*(void *)a1 + 8 * v14);
  if (v26)
  {
    *(void *)uint64_t i = *v26;
LABEL_44:
    *unint64_t v26 = i;
    goto LABEL_45;
  }
  *(void *)uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v25 + 8 * v14) = a1 + 16;
  if (*(void *)i)
  {
    unint64_t v27 = *(void *)(*(void *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v27 >= v11) {
        v27 %= v11;
      }
    }
    else
    {
      v27 &= v11 - 1;
    }
    unint64_t v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_44;
  }
LABEL_45:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_18482E010(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

void _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE7_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2)
{
  CFStringRef v3 = CA::Render::key_path_copy_string(*(void *)(a2 + 96), (void *const *)a2);
  if (v3)
  {
    CFStringRef v4 = v3;
    [a1 setKeyPath:v3];
    CFRelease(v4);
  }
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE6_8__invokeES8_SA_SD_SM_SP_(void *a1, const char *a2)
{
  return [a1 setCumulative:(*((_DWORD *)a2 + 3) >> 10) & 1];
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES8_SA_SD_SM_SP_(void *a1, const char *a2, double a3, double a4, double a5)
{
  LODWORD(a3) = *((_DWORD *)a2 + 6);
  LODWORD(a4) = *((_DWORD *)a2 + 7);
  LODWORD(a5) = *((_DWORD *)a2 + 8);
  return objc_msgSend(a1, "setPreferredFrameRateRange:", a3, a4, a5);
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2)
{
  uint64_t result = [NSNumber numberWithLongLong:*(unsigned int *)(a2 + 88)];
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = [NSString stringWithUTF8String:"highFrameRateReason"];
    return [a1 setValue:v4 forKey:v5];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2)
{
  uint64_t result = [NSNumber numberWithLongLong:((unint64_t)*(unsigned int *)(a2 + 12) >> 9) & 1];
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = [NSString stringWithUTF8String:"additive"];
    return [a1 setValue:v4 forKey:v5];
  }
  return result;
}

CAValueFunction *_ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2)
{
  v6[1] = *MEMORY[0x1E4F143B8];
  v6[0] = *(void *)(a2 + 104);
  uint64_t result = id_from_value<void,CA::Render::Function *>(v6);
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = [NSString stringWithUTF8String:"valueFunction"];
    return (CAValueFunction *)[a1 setValue:v4 forKey:v5];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithLongLong:((unint64_t)*(unsigned int *)(a2 + 12) >> 15) & 1];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      unint64_t v8 = a4;
    }
    else {
      unint64_t v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    uint64_t v7 = (uint64_t *)a2;
  }
  else {
    uint64_t v7 = *(uint64_t **)a2;
  }
  if (v6 >= 0) {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v8 = *(void *)(a2 + 8);
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v14 = v9;
      if (v9 >= v11) {
        unint64_t v14 = v9 % v11;
      }
    }
    else
    {
      unint64_t v14 = (v11 - 1) & v9;
    }
    double v15 = *(void ***)(*(void *)a1 + 8 * v14);
    if (v15)
    {
      for (uint64_t i = *v15; i; uint64_t i = *(void **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)i + 16, (unsigned __int8 *)a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
          }
          else
          {
            v17 &= v11 - 1;
          }
          if (v17 != v14) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v14 = 0;
  }
  uint64_t i = operator new(0x30uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v10;
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  uint64_t v18 = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *((void *)i + 4) = v18;
  *((void *)i + 5) = 0;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    BOOL v21 = 1;
    if (v11 >= 3) {
      BOOL v21 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v11);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>(a1, v24);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v14 = v10 % v11;
      }
      else {
        unint64_t v14 = v10;
      }
    }
    else
    {
      unint64_t v14 = (v11 - 1) & v10;
    }
  }
  uint64_t v25 = *(void *)a1;
  unint64_t v26 = *(void **)(*(void *)a1 + 8 * v14);
  if (v26)
  {
    *(void *)uint64_t i = *v26;
LABEL_44:
    *unint64_t v26 = i;
    goto LABEL_45;
  }
  *(void *)uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v25 + 8 * v14) = a1 + 16;
  if (*(void *)i)
  {
    unint64_t v27 = *(void *)(*(void *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v27 >= v11) {
        v27 %= v11;
      }
    }
    else
    {
      v27 &= v11 - 1;
    }
    unint64_t v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_44;
  }
LABEL_45:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_18482E53C(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    uint64_t v7 = (uint64_t *)a2;
  }
  else {
    uint64_t v7 = *(uint64_t **)a2;
  }
  if (v6 >= 0) {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v8 = *(void *)(a2 + 8);
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v14 = v9;
      if (v9 >= v11) {
        unint64_t v14 = v9 % v11;
      }
    }
    else
    {
      unint64_t v14 = (v11 - 1) & v9;
    }
    double v15 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v14);
    if (v15)
    {
      for (uint64_t i = *v15; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, (unsigned __int8 *)a2)) {
            return;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
          }
          else
          {
            v17 &= v11 - 1;
          }
          if (v17 != v14) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v14 = 0;
  }
  uint64_t v18 = operator new(0x30uLL);
  *uint64_t v18 = 0;
  v18[1] = v10;
  float v19 = (std::string *)(v18 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    _OWORD v18[4] = *(void *)(a3 + 16);
  }
  v18[5] = *(void *)(a3 + 24);
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v14 = v10 % v11;
      }
      else {
        unint64_t v14 = v10;
      }
    }
    else
    {
      unint64_t v14 = (v11 - 1) & v10;
    }
  }
  uint64_t v26 = *(void *)a1;
  unint64_t v27 = *(void **)(*(void *)a1 + 8 * v14);
  if (v27)
  {
    *uint64_t v18 = *v27;
LABEL_47:
    *unint64_t v27 = v18;
    goto LABEL_48;
  }
  *uint64_t v18 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v18;
  *(void *)(v26 + 8 * v14) = a1 + 16;
  if (*v18)
  {
    unint64_t v28 = *(void *)(*v18 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11) {
        v28 %= v11;
      }
    }
    else
    {
      v28 &= v11 - 1;
    }
    unint64_t v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_47;
  }
LABEL_48:
  ++*(void *)(a1 + 24);
}

void sub_18482E7A8(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,void *>>>::operator()[abi:nn180100](0, v1);
  _Unwind_Resume(a1);
}

uint64_t _ZZ22get_setters_for_timingIN2CA6Render17KeyframeAnimationE11CAAnimationEDavENKUlvE_clEv()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  memset(v3, 0, sizeof(v3));
  uint64_t v4 = 1065353216;
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>((uint64_t)v3, 0x40uLL);
  snake_case_to_camel_case("begin_time", 10, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 842, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render17KeyframeAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES6_S8_SB_SK_SN_;
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("speed", 5, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 843, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render17KeyframeAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES6_S8_SB_SK_SN_;
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("duration", 8, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 844, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render17KeyframeAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES6_S8_SB_SK_SN_;
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("time_offset", 11, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 845, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render17KeyframeAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES6_S8_SB_SK_SN_;
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("autoreverses", 12, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 846, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render17KeyframeAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES6_S8_SB_SK_SN_;
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("fill_mode", 9, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 856, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render17KeyframeAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE4_8__invokeES6_S8_SB_SK_SN_;
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("repeatDuration", 14, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 860, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render17KeyframeAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE5_8__invokeES6_S8_SB_SK_SN_;
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("repeatCount", 11, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 864, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::KeyframeAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render17KeyframeAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE6_8__invokeES6_S8_SB_SK_SN_;
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__hash_table((uint64_t)&_ZZ22get_setters_for_timingIN2CA6Render17KeyframeAnimationE11CAAnimationEDavE10timing_map, (uint64_t *)v3);
  return std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)v3);
}

void sub_18482ED54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void *_ZZZ22get_setters_for_timingIN2CA6Render17KeyframeAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE6_8__invokeES6_S8_SB_SK_SN_(void *a1, const char *a2)
{
  uint64_t v2 = *((void *)a2 + 5);
  if (v2)
  {
    if ((*(unsigned char *)(v2 + 13) & 8) == 0)
    {
      double v3 = *(double *)(v2 + 24);
      *(float *)&double v3 = v3;
      return (void *)[a1 setRepeatCount:v3];
    }
  }
  return a1;
}

void *_ZZZ22get_setters_for_timingIN2CA6Render17KeyframeAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE5_8__invokeES6_S8_SB_SK_SN_(void *a1, const char *a2)
{
  uint64_t v2 = *((void *)a2 + 5);
  if (v2)
  {
    if ((*(unsigned char *)(v2 + 13) & 8) != 0) {
      return (void *)[a1 setRepeatDuration:*(double *)(v2 + 24)];
    }
  }
  return a1;
}

void *_ZZZ22get_setters_for_timingIN2CA6Render17KeyframeAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE4_8__invokeES6_S8_SB_SK_SN_(void *a1, const char *a2)
{
  uint64_t v2 = *((void *)a2 + 5);
  if (v2)
  {
    int v3 = *(_DWORD *)(v2 + 12);
    if ((v3 & 0x200) != 0)
    {
      if ((v3 & 0x400) != 0) {
        uint64_t v4 = &kCAFillModeBoth;
      }
      else {
        uint64_t v4 = &kCAFillModeForwards;
      }
    }
    else
    {
      if ((v3 & 0x400) == 0) {
        return a1;
      }
      uint64_t v4 = &kCAFillModeBackwards;
    }
    return (void *)[a1 setFillMode:*v4];
  }
  return a1;
}

void *_ZZZ22get_setters_for_timingIN2CA6Render17KeyframeAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES6_S8_SB_SK_SN_(void *a1, const char *a2)
{
  uint64_t v2 = *((void *)a2 + 5);
  if (v2) {
    return (void *)[a1 setAutoreverses:(*(_DWORD *)(v2 + 12) >> 8) & 1];
  }
  return a1;
}

void *_ZZZ22get_setters_for_timingIN2CA6Render17KeyframeAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES6_S8_SB_SK_SN_(void *a1, const char *a2)
{
  uint64_t v2 = *((void *)a2 + 5);
  if (v2) {
    return (void *)[a1 setTimeOffset:*(double *)(v2 + 48)];
  }
  return a1;
}

void *_ZZZ22get_setters_for_timingIN2CA6Render17KeyframeAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES6_S8_SB_SK_SN_(void *a1, const char *a2)
{
  uint64_t v2 = *((void *)a2 + 5);
  if (v2) {
    return (void *)[a1 setDuration:*(double *)(v2 + 32)];
  }
  return a1;
}

void *_ZZZ22get_setters_for_timingIN2CA6Render17KeyframeAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES6_S8_SB_SK_SN_(void *a1, const char *a2, double a3)
{
  uint64_t v3 = *((void *)a2 + 5);
  if (v3)
  {
    LODWORD(a3) = *(_DWORD *)(v3 + 16);
    return (void *)[a1 setSpeed:a3];
  }
  return a1;
}

void *_ZZZ22get_setters_for_timingIN2CA6Render17KeyframeAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES6_S8_SB_SK_SN_(void *a1, const char *a2)
{
  uint64_t v2 = *((void *)a2 + 5);
  if (v2) {
    return (void *)[a1 setBeginTime:*(double *)(v2 + 40)];
  }
  return a1;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE_clEvENUlP11CAAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES8_SA_SD_SM_SP_(void *a1, const char *a2)
{
  return [a1 setRemovedOnCompletion:(*((_DWORD *)a2 + 3) >> 11) & 1];
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE_clEvENUlP11CAAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 24);
  int v6 = v3;
  uint64_t result = [MEMORY[0x1E4F29238] valueWithBytes:&v5 objCType:"{CAFrameRateRange=fff}"];
  if (result) {
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(NSString, "stringWithUTF8String:", "preferredFrameRateRange"));
  }
  return result;
}

CAMediaTimingFunction *_ZZZ20get_setters_for_typeIN2CA6Render17KeyframeAnimationEERKDavENKUlvE_clEvENUlP11CAAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES8_SA_SD_SM_SP_(CAMediaTimingFunction *result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *(void *)(a2 + 48);
  if (v4)
  {
    int v6 = result;
    uint64_t result = nsobject_from_values<CAMediaTimingFunction *,double>((double *)(v4 + 24), *(_DWORD *)(v4 + 16));
    if (result)
    {
      uint64_t v7 = result;
      if (*((char *)a4 + 23) >= 0) {
        unint64_t v8 = a4;
      }
      else {
        unint64_t v8 = (uint64_t *)*a4;
      }
      uint64_t v9 = [NSString stringWithUTF8String:v8];
      return (CAMediaTimingFunction *)[(CAMediaTimingFunction *)v6 setValue:v7 forKey:v9];
    }
  }
  return result;
}

uint64_t _ZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE_clEv()
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  memset(v5, 0, sizeof(v5));
  uint64_t v6 = 1065353216;
  snake_case_to_camel_case("timing_function", 15, (char *)v7);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v7);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v5[0], *((unint64_t *)&v5[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1169, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v7);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v5, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE_clEvENUlP11CAAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES8_SA_SD_SM_SP_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v7, "preferredFrameRateRange");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v5[0], *((unint64_t *)&v5[0] + 1), (uint64_t)v7))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1170, "\"Duplicated Entry !!\" && map.map.find (\"preferredFrameRateRange\") == map.map.end ()");
  }
  if (SBYTE7(v8) < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v7, "preferredFrameRateRange");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v5, (uint64_t)v7, (uint64_t)v7)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE_clEvENUlP11CAAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES8_SA_SD_SM_SP_;
  if (SBYTE7(v8) < 0) {
    operator delete(v7[0]);
  }
  snake_case_to_camel_case("removed_on_completion", 21, (char *)v7);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v7);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v5[0], *((unint64_t *)&v5[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1173, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v7);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v5, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE_clEvENUlP11CAAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES8_SA_SD_SM_SP_;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZ22get_setters_for_timingIN2CA6Render14BasicAnimationE11CAAnimationEDavE10timing_map, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZ22get_setters_for_timingIN2CA6Render14BasicAnimationE11CAAnimationEDavE10timing_map))
  {
    _ZZ22get_setters_for_timingIN2CA6Render14BasicAnimationE11CAAnimationEDavENKUlvE_clEv();
    __cxa_guard_release(&_ZGVZ22get_setters_for_timingIN2CA6Render14BasicAnimationE11CAAnimationEDavE10timing_map);
  }
  *(_OWORD *)uint64_t v7 = 0u;
  long long v8 = 0u;
  int v9 = dword_1E8F87A90;
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>((uint64_t)v7, qword_1E8F87A78);
  uint64_t v0 = (void *)qword_1E8F87A80;
  if (qword_1E8F87A80)
  {
    do
    {
      std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)> const&>((uint64_t)v7, (uint64_t)(v0 + 2), (uint64_t)(v0 + 2));
      uint64_t v0 = (void *)*v0;
    }
    while (v0);
  }
  for (uint64_t i = (void *)v8; i; uint64_t i = (void *)*i)
    std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)> const&>((uint64_t)v5, (uint64_t)(i + 2), (uint64_t)(i + 2));
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__hash_table((uint64_t)&_ZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavE13animation_map, (uint64_t *)v5);
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)v7);
  return std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)v5);
}

void sub_18482F33C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
}

uint64_t _ZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE0_clEv()
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  long long v30 = 0u;
  long long v31 = 0u;
  uint64_t v32 = 1065353216;
  uint64_t v0 = qword_1E8F879F0;
  if (qword_1E8F879F0)
  {
    uint64_t v1 = 0;
    do
    {
      int v2 = *(char *)(v0 + 39);
      if (v2 >= 0) {
        int v3 = (uint64_t *)(v0 + 16);
      }
      else {
        int v3 = *(uint64_t **)(v0 + 16);
      }
      if (v2 >= 0) {
        unint64_t v4 = *(unsigned __int8 *)(v0 + 39);
      }
      else {
        unint64_t v4 = *(void *)(v0 + 24);
      }
      unint64_t v5 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v3, v4);
      unint64_t v6 = v5;
      unint64_t v7 = *((void *)&v30 + 1);
      if (*((void *)&v30 + 1))
      {
        uint8x8_t v8 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v30 + 8));
        v8.i16[0] = vaddlv_u8(v8);
        unint64_t v9 = v8.u32[0];
        if (v8.u32[0] > 1uLL)
        {
          unint64_t v10 = v5;
          if (v5 >= *((void *)&v30 + 1)) {
            unint64_t v10 = v5 % *((void *)&v30 + 1);
          }
        }
        else
        {
          unint64_t v10 = (*((void *)&v30 + 1) - 1) & v5;
        }
        unint64_t v11 = *(unsigned __int8 ***)(v30 + 8 * v10);
        if (v11)
        {
          for (uint64_t i = *v11; i; uint64_t i = *(unsigned __int8 **)i)
          {
            unint64_t v13 = *((void *)i + 1);
            if (v13 == v6)
            {
              if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, (unsigned __int8 *)(v0 + 16))) {
                goto LABEL_51;
              }
            }
            else
            {
              if (v9 > 1)
              {
                if (v13 >= v7) {
                  v13 %= v7;
                }
              }
              else
              {
                v13 &= v7 - 1;
              }
              if (v13 != v10) {
                break;
              }
            }
          }
        }
      }
      else
      {
        unint64_t v10 = 0;
      }
      unint64_t v14 = operator new(0x30uLL);
      *unint64_t v14 = 0;
      v14[1] = v6;
      double v15 = (std::string *)(v14 + 2);
      if (*(char *)(v0 + 39) < 0)
      {
        std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)(v0 + 16), *(void *)(v0 + 24));
        uint64_t v1 = *((void *)&v31 + 1);
      }
      else
      {
        long long v16 = *(_OWORD *)(v0 + 16);
        void v14[4] = *(void *)(v0 + 32);
        *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
      }
      v14[5] = *(void *)(v0 + 40);
      float v17 = (float)(unint64_t)(v1 + 1);
      if (!v7 || (float)(*(float *)&v32 * (float)v7) < v17)
      {
        BOOL v18 = (v7 & (v7 - 1)) != 0;
        if (v7 < 3) {
          BOOL v18 = 1;
        }
        unint64_t v19 = v18 | (2 * v7);
        unint64_t v20 = vcvtps_u32_f32(v17 / *(float *)&v32);
        if (v19 <= v20) {
          size_t v21 = v20;
        }
        else {
          size_t v21 = v19;
        }
        std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>((uint64_t)&v30, v21);
        unint64_t v7 = *((void *)&v30 + 1);
        if ((*((void *)&v30 + 1) & (*((void *)&v30 + 1) - 1)) != 0)
        {
          if (v6 >= *((void *)&v30 + 1)) {
            unint64_t v10 = v6 % *((void *)&v30 + 1);
          }
          else {
            unint64_t v10 = v6;
          }
        }
        else
        {
          unint64_t v10 = (*((void *)&v30 + 1) - 1) & v6;
        }
      }
      uint64_t v22 = v30;
      unint64_t v23 = *(void **)(v30 + 8 * v10);
      if (v23)
      {
        *unint64_t v14 = *v23;
      }
      else
      {
        *unint64_t v14 = v31;
        *(void *)&long long v31 = v14;
        *(void *)(v22 + 8 * v10) = &v31;
        if (!*v14) {
          goto LABEL_50;
        }
        unint64_t v24 = *(void *)(*v14 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v24 >= v7) {
            v24 %= v7;
          }
        }
        else
        {
          v24 &= v7 - 1;
        }
        unint64_t v23 = (void *)(v30 + 8 * v24);
      }
      *unint64_t v23 = v14;
LABEL_50:
      uint64_t v1 = ++*((void *)&v31 + 1);
LABEL_51:
      uint64_t v0 = *(void *)v0;
    }
    while (v0);
  }
  snake_case_to_camel_case("discretizes_time", 16, (char *)v33);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1188, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "valueFunction");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1190, "\"Duplicated Entry !!\" && map.map.find (\"valueFunction\") == map.map.end ()");
  }
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "valueFunction");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "additive");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1191, "\"Duplicated Entry !!\" && map.map.find (\"additive\") == map.map.end ()");
  }
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "additive");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "highFrameRateReason");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1192, "\"Duplicated Entry !!\" && map.map.find (\"highFrameRateReason\") == map.map.end ()");
  }
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "highFrameRateReason");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  snake_case_to_camel_case("preferredFrameRateRangeMinimum", 30, (char *)v33);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1199, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "preferredFrameRateRangeMaximum");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1200, "\"Duplicated Entry !!\" && map.map.find (\"preferredFrameRateRangeMaximum\") == map.map.end ()");
  }
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "preferredFrameRateRangeMaximum");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE4_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "preferredFrameRateRangePreferred");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1201, "\"Duplicated Entry !!\" && map.map.find (\"preferredFrameRateRangePreferred\") == map.map.end ()");
  }
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "preferredFrameRateRangePreferred");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE5_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  snake_case_to_camel_case("cumulative", 10, (char *)v33);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1205, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE6_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("property", 8, (char *)v33);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1212, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v33);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE7_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "beginTimeMode");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1216, "\"Duplicated Entry !!\" && map.map.find (\"beginTimeMode\") == map.map.end ()");
  }
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "beginTimeMode");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE8_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "delegate");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1217, "\"Duplicated Entry !!\" && map.map.find (\"delegate\") == map.map.end ()");
  }
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "delegate");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE9_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "keyPath");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1218, "\"Duplicated Entry !!\" && map.map.find (\"keyPath\") == map.map.end ()");
  }
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "keyPath");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE10_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "frameInterval");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1222, "\"Duplicated Entry !!\" && map.map.find (\"frameInterval\") == map.map.end ()");
  }
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "frameInterval");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE11_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "preferredFramesPerSecond");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v33))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1223, "\"Duplicated Entry !!\" && map.map.find (\"preferredFramesPerSecond\") == map.map.end ()");
  }
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v33, "preferredFramesPerSecond");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v33, (uint64_t)v33)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE12_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  long long v25 = v30;
  long long v30 = 0uLL;
  _ZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavE17property_anim_map = v25;
  xmmword_1E8F87A20 = v31;
  dword_1E8F87A30 = v32;
  if (*((void *)&v31 + 1))
  {
    unint64_t v26 = *(void *)(v31 + 8);
    if ((*((void *)&v25 + 1) & (*((void *)&v25 + 1) - 1)) != 0)
    {
      if (v26 >= *((void *)&v25 + 1)) {
        v26 %= *((void *)&v25 + 1);
      }
    }
    else
    {
      v26 &= *((void *)&v25 + 1) - 1;
    }
    *(void *)(v25 + 8 * v26) = &xmmword_1E8F87A20;
    long long v31 = 0uLL;
  }
  return std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)&v30);
}

void sub_18482FF50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t _ZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE1_clEv()
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  long long v30 = 0u;
  long long v31 = 0u;
  uint64_t v32 = 1065353216;
  uint64_t v0 = (uint64_t *)xmmword_1E8F87A20;
  if ((void)xmmword_1E8F87A20)
  {
    uint64_t v1 = 0;
    do
    {
      int v2 = *((char *)v0 + 39);
      if (v2 >= 0) {
        int v3 = v0 + 2;
      }
      else {
        int v3 = (uint64_t *)v0[2];
      }
      if (v2 >= 0) {
        unint64_t v4 = *((unsigned __int8 *)v0 + 39);
      }
      else {
        unint64_t v4 = v0[3];
      }
      unint64_t v5 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v3, v4);
      unint64_t v6 = v5;
      unint64_t v7 = *((void *)&v30 + 1);
      if (*((void *)&v30 + 1))
      {
        uint8x8_t v8 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v30 + 8));
        v8.i16[0] = vaddlv_u8(v8);
        unint64_t v9 = v8.u32[0];
        if (v8.u32[0] > 1uLL)
        {
          unint64_t v10 = v5;
          if (v5 >= *((void *)&v30 + 1)) {
            unint64_t v10 = v5 % *((void *)&v30 + 1);
          }
        }
        else
        {
          unint64_t v10 = (*((void *)&v30 + 1) - 1) & v5;
        }
        unint64_t v11 = *(unsigned __int8 ***)(v30 + 8 * v10);
        if (v11)
        {
          for (uint64_t i = *v11; i; uint64_t i = *(unsigned __int8 **)i)
          {
            unint64_t v13 = *((void *)i + 1);
            if (v13 == v6)
            {
              if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, (unsigned __int8 *)v0 + 16)) {
                goto LABEL_51;
              }
            }
            else
            {
              if (v9 > 1)
              {
                if (v13 >= v7) {
                  v13 %= v7;
                }
              }
              else
              {
                v13 &= v7 - 1;
              }
              if (v13 != v10) {
                break;
              }
            }
          }
        }
      }
      else
      {
        unint64_t v10 = 0;
      }
      unint64_t v14 = operator new(0x30uLL);
      *unint64_t v14 = 0;
      v14[1] = v6;
      double v15 = (std::string *)(v14 + 2);
      if (*((char *)v0 + 39) < 0)
      {
        std::string::__init_copy_ctor_external(v15, (const std::string::value_type *)v0[2], v0[3]);
        uint64_t v1 = *((void *)&v31 + 1);
      }
      else
      {
        long long v16 = *((_OWORD *)v0 + 1);
        void v14[4] = v0[4];
        *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
      }
      v14[5] = v0[5];
      float v17 = (float)(unint64_t)(v1 + 1);
      if (!v7 || (float)(*(float *)&v32 * (float)v7) < v17)
      {
        BOOL v18 = (v7 & (v7 - 1)) != 0;
        if (v7 < 3) {
          BOOL v18 = 1;
        }
        unint64_t v19 = v18 | (2 * v7);
        unint64_t v20 = vcvtps_u32_f32(v17 / *(float *)&v32);
        if (v19 <= v20) {
          size_t v21 = v20;
        }
        else {
          size_t v21 = v19;
        }
        std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>((uint64_t)&v30, v21);
        unint64_t v7 = *((void *)&v30 + 1);
        if ((*((void *)&v30 + 1) & (*((void *)&v30 + 1) - 1)) != 0)
        {
          if (v6 >= *((void *)&v30 + 1)) {
            unint64_t v10 = v6 % *((void *)&v30 + 1);
          }
          else {
            unint64_t v10 = v6;
          }
        }
        else
        {
          unint64_t v10 = (*((void *)&v30 + 1) - 1) & v6;
        }
      }
      uint64_t v22 = v30;
      unint64_t v23 = *(void **)(v30 + 8 * v10);
      if (v23)
      {
        *unint64_t v14 = *v23;
      }
      else
      {
        *unint64_t v14 = v31;
        *(void *)&long long v31 = v14;
        *(void *)(v22 + 8 * v10) = &v31;
        if (!*v14) {
          goto LABEL_50;
        }
        unint64_t v24 = *(void *)(*v14 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v24 >= v7) {
            v24 %= v7;
          }
        }
        else
        {
          v24 &= v7 - 1;
        }
        unint64_t v23 = (void *)(v30 + 8 * v24);
      }
      *unint64_t v23 = v14;
LABEL_50:
      uint64_t v1 = ++*((void *)&v31 + 1);
LABEL_51:
      uint64_t v0 = (uint64_t *)*v0;
    }
    while (v0);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "byValue");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1237, "\"Duplicated Entry !!\" && map.map.find (\"byValue\") == map.map.end ()");
  }
  if (v34 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "byValue");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE1_clEvENUlP16CABasicAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "fromValue");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1238, "\"Duplicated Entry !!\" && map.map.find (\"fromValue\") == map.map.end ()");
  }
  if (v34 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "fromValue");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE1_clEvENUlP16CABasicAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "toValue");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1239, "\"Duplicated Entry !!\" && map.map.find (\"toValue\") == map.map.end ()");
  }
  if (v34 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "toValue");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE1_clEvENUlP16CABasicAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES8_SA_SD_SM_SP_;
  if (v34 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("end_angle", 9, (char *)__p);
  std::string::basic_string[abi:nn180100]<0>(v28, (char *)__p);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v28))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1240, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v28, (char *)__p);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v28, (uint64_t)v28)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE1_clEvENUlP16CABasicAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  snake_case_to_camel_case("start_angle", 11, (char *)__p);
  std::string::basic_string[abi:nn180100]<0>(v28, (char *)__p);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v28))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1241, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v28, (char *)__p);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v28, (uint64_t)v28)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE1_clEvENUlP16CABasicAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  snake_case_to_camel_case("rounds_to_integer", 17, (char *)__p);
  std::string::basic_string[abi:nn180100]<0>(v28, (char *)__p);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(v30, *((unint64_t *)&v30 + 1), (uint64_t)v28))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 1244, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v28, (char *)__p);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v30, (uint64_t)v28, (uint64_t)v28)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE1_clEvENUlP16CABasicAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE4_8__invokeES8_SA_SD_SM_SP_;
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  long long v25 = v30;
  long long v30 = 0uLL;
  _ZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavE14basic_anim_map = v25;
  xmmword_1E8F87A50 = v31;
  dword_1E8F87A60 = v32;
  if (*((void *)&v31 + 1))
  {
    unint64_t v26 = *(void *)(v31 + 8);
    if ((*((void *)&v25 + 1) & (*((void *)&v25 + 1) - 1)) != 0)
    {
      if (v26 >= *((void *)&v25 + 1)) {
        v26 %= *((void *)&v25 + 1);
      }
    }
    else
    {
      v26 &= *((void *)&v25 + 1) - 1;
    }
    *(void *)(v25 + 8 * v26) = &xmmword_1E8F87A50;
    long long v31 = 0uLL;
  }
  return std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)&v30);
}

void sub_184830768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABasicAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    unint64_t v7 = (uint64_t *)a2;
  }
  else {
    unint64_t v7 = *(uint64_t **)a2;
  }
  if (v6 >= 0) {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v8 = *(void *)(a2 + 8);
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v14 = v9;
      if (v9 >= v11) {
        unint64_t v14 = v9 % v11;
      }
    }
    else
    {
      unint64_t v14 = (v11 - 1) & v9;
    }
    double v15 = *(void ***)(*(void *)a1 + 8 * v14);
    if (v15)
    {
      for (uint64_t i = *v15; i; uint64_t i = *(void **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)i + 16, (unsigned __int8 *)a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
          }
          else
          {
            v17 &= v11 - 1;
          }
          if (v17 != v14) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v14 = 0;
  }
  uint64_t i = operator new(0x30uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v10;
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  uint64_t v18 = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *((void *)i + 4) = v18;
  *((void *)i + 5) = 0;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    BOOL v21 = 1;
    if (v11 >= 3) {
      BOOL v21 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v11);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>(a1, v24);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v14 = v10 % v11;
      }
      else {
        unint64_t v14 = v10;
      }
    }
    else
    {
      unint64_t v14 = (v11 - 1) & v10;
    }
  }
  uint64_t v25 = *(void *)a1;
  unint64_t v26 = *(void **)(*(void *)a1 + 8 * v14);
  if (v26)
  {
    *(void *)uint64_t i = *v26;
LABEL_44:
    *unint64_t v26 = i;
    goto LABEL_45;
  }
  *(void *)uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v25 + 8 * v14) = a1 + 16;
  if (*(void *)i)
  {
    unint64_t v27 = *(void *)(*(void *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v27 >= v11) {
        v27 %= v11;
      }
    }
    else
    {
      v27 &= v11 - 1;
    }
    unint64_t v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_44;
  }
LABEL_45:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_184830A70(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE1_clEvENUlP16CABasicAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE4_8__invokeES8_SA_SD_SM_SP_(void *a1, const char *a2)
{
  return [a1 setRoundsToInteger:HIBYTE(*((_DWORD *)a2 + 3)) & 1];
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE1_clEvENUlP16CABasicAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithDouble:*(double *)(a2 + 136)];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      unint64_t v8 = a4;
    }
    else {
      unint64_t v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE1_clEvENUlP16CABasicAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithDouble:*(double *)(a2 + 144)];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      unint64_t v8 = a4;
    }
    else {
      unint64_t v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE1_clEvENUlP16CABasicAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES8_SA_SD_SM_SP_(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a2 + 120);
  if (v5)
  {
    int v6 = (void *)result;
    uint64_t result = ns_object_from_render_object(a5, v5, 0);
    if (result)
    {
      uint64_t v7 = result;
      uint64_t v8 = [NSString stringWithUTF8String:"toValue"];
      return [v6 setValue:v7 forKey:v8];
    }
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE1_clEvENUlP16CABasicAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES8_SA_SD_SM_SP_(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a2 + 112);
  if (v5)
  {
    int v6 = (void *)result;
    uint64_t result = ns_object_from_render_object(a5, v5, 0);
    if (result)
    {
      uint64_t v7 = result;
      uint64_t v8 = [NSString stringWithUTF8String:"fromValue"];
      return [v6 setValue:v7 forKey:v8];
    }
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE1_clEvENUlP16CABasicAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES8_SA_SD_SM_SP_(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a2 + 128);
  if (v5)
  {
    int v6 = (void *)result;
    uint64_t result = ns_object_from_render_object(a5, v5, 0);
    if (result)
    {
      uint64_t v7 = result;
      uint64_t v8 = [NSString stringWithUTF8String:"byValue"];
      return [v6 setValue:v7 forKey:v8];
    }
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAPropertyAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    uint64_t v7 = (uint64_t *)a2;
  }
  else {
    uint64_t v7 = *(uint64_t **)a2;
  }
  if (v6 >= 0) {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v8 = *(void *)(a2 + 8);
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v14 = v9;
      if (v9 >= v11) {
        unint64_t v14 = v9 % v11;
      }
    }
    else
    {
      unint64_t v14 = (v11 - 1) & v9;
    }
    double v15 = *(void ***)(*(void *)a1 + 8 * v14);
    if (v15)
    {
      for (uint64_t i = *v15; i; uint64_t i = *(void **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)i + 16, (unsigned __int8 *)a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
          }
          else
          {
            v17 &= v11 - 1;
          }
          if (v17 != v14) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v14 = 0;
  }
  uint64_t i = operator new(0x30uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v10;
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  uint64_t v18 = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *((void *)i + 4) = v18;
  *((void *)i + 5) = 0;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    BOOL v21 = 1;
    if (v11 >= 3) {
      BOOL v21 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v11);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>(a1, v24);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v14 = v10 % v11;
      }
      else {
        unint64_t v14 = v10;
      }
    }
    else
    {
      unint64_t v14 = (v11 - 1) & v10;
    }
  }
  uint64_t v25 = *(void *)a1;
  unint64_t v26 = *(void **)(*(void *)a1 + 8 * v14);
  if (v26)
  {
    *(void *)uint64_t i = *v26;
LABEL_44:
    *unint64_t v26 = i;
    goto LABEL_45;
  }
  *(void *)uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v25 + 8 * v14) = a1 + 16;
  if (*(void *)i)
  {
    unint64_t v27 = *(void *)(*(void *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v27 >= v11) {
        v27 %= v11;
      }
    }
    else
    {
      v27 &= v11 - 1;
    }
    unint64_t v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_44;
  }
LABEL_45:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_184830F58(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

void _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE7_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2)
{
  CFStringRef v3 = CA::Render::key_path_copy_string(*(void *)(a2 + 96), (void *const *)a2);
  if (v3)
  {
    CFStringRef v4 = v3;
    [a1 setKeyPath:v3];
    CFRelease(v4);
  }
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE6_8__invokeES8_SA_SD_SM_SP_(void *a1, const char *a2)
{
  return [a1 setCumulative:(*((_DWORD *)a2 + 3) >> 10) & 1];
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES8_SA_SD_SM_SP_(void *a1, const char *a2, double a3, double a4, double a5)
{
  LODWORD(a3) = *((_DWORD *)a2 + 6);
  LODWORD(a4) = *((_DWORD *)a2 + 7);
  LODWORD(a5) = *((_DWORD *)a2 + 8);
  return objc_msgSend(a1, "setPreferredFrameRateRange:", a3, a4, a5);
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2)
{
  uint64_t result = [NSNumber numberWithLongLong:*(unsigned int *)(a2 + 88)];
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = [NSString stringWithUTF8String:"highFrameRateReason"];
    return [a1 setValue:v4 forKey:v5];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2)
{
  uint64_t result = [NSNumber numberWithLongLong:((unint64_t)*(unsigned int *)(a2 + 12) >> 9) & 1];
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = [NSString stringWithUTF8String:"additive"];
    return [a1 setValue:v4 forKey:v5];
  }
  return result;
}

CAValueFunction *_ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2)
{
  v6[1] = *MEMORY[0x1E4F143B8];
  v6[0] = *(void *)(a2 + 104);
  uint64_t result = id_from_value<void,CA::Render::Function *>(v6);
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = [NSString stringWithUTF8String:"valueFunction"];
    return (CAValueFunction *)[a1 setValue:v4 forKey:v5];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE0_clEvENUlP19CAPropertyAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithLongLong:((unint64_t)*(unsigned int *)(a2 + 12) >> 15) & 1];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      unint64_t v8 = a4;
    }
    else {
      unint64_t v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    uint64_t v7 = (uint64_t *)a2;
  }
  else {
    uint64_t v7 = *(uint64_t **)a2;
  }
  if (v6 >= 0) {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v8 = *(void *)(a2 + 8);
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v14 = v9;
      if (v9 >= v11) {
        unint64_t v14 = v9 % v11;
      }
    }
    else
    {
      unint64_t v14 = (v11 - 1) & v9;
    }
    double v15 = *(void ***)(*(void *)a1 + 8 * v14);
    if (v15)
    {
      for (uint64_t i = *v15; i; uint64_t i = *(void **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)i + 16, (unsigned __int8 *)a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
          }
          else
          {
            v17 &= v11 - 1;
          }
          if (v17 != v14) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v14 = 0;
  }
  uint64_t i = operator new(0x30uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v10;
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  uint64_t v18 = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *((void *)i + 4) = v18;
  *((void *)i + 5) = 0;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    BOOL v21 = 1;
    if (v11 >= 3) {
      BOOL v21 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v11);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>(a1, v24);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v14 = v10 % v11;
      }
      else {
        unint64_t v14 = v10;
      }
    }
    else
    {
      unint64_t v14 = (v11 - 1) & v10;
    }
  }
  uint64_t v25 = *(void *)a1;
  unint64_t v26 = *(void **)(*(void *)a1 + 8 * v14);
  if (v26)
  {
    *(void *)uint64_t i = *v26;
LABEL_44:
    *unint64_t v26 = i;
    goto LABEL_45;
  }
  *(void *)uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v25 + 8 * v14) = a1 + 16;
  if (*(void *)i)
  {
    unint64_t v27 = *(void *)(*(void *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v27 >= v11) {
        v27 %= v11;
      }
    }
    else
    {
      v27 &= v11 - 1;
    }
    unint64_t v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_44;
  }
LABEL_45:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_184831484(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    uint64_t v7 = (uint64_t *)a2;
  }
  else {
    uint64_t v7 = *(uint64_t **)a2;
  }
  if (v6 >= 0) {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v8 = *(void *)(a2 + 8);
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v14 = v9;
      if (v9 >= v11) {
        unint64_t v14 = v9 % v11;
      }
    }
    else
    {
      unint64_t v14 = (v11 - 1) & v9;
    }
    double v15 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v14);
    if (v15)
    {
      for (uint64_t i = *v15; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, (unsigned __int8 *)a2)) {
            return;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
          }
          else
          {
            v17 &= v11 - 1;
          }
          if (v17 != v14) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v14 = 0;
  }
  uint64_t v18 = operator new(0x30uLL);
  *uint64_t v18 = 0;
  v18[1] = v10;
  float v19 = (std::string *)(v18 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    _OWORD v18[4] = *(void *)(a3 + 16);
  }
  v18[5] = *(void *)(a3 + 24);
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v14 = v10 % v11;
      }
      else {
        unint64_t v14 = v10;
      }
    }
    else
    {
      unint64_t v14 = (v11 - 1) & v10;
    }
  }
  uint64_t v26 = *(void *)a1;
  unint64_t v27 = *(void **)(*(void *)a1 + 8 * v14);
  if (v27)
  {
    *uint64_t v18 = *v27;
LABEL_47:
    *unint64_t v27 = v18;
    goto LABEL_48;
  }
  *uint64_t v18 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v18;
  *(void *)(v26 + 8 * v14) = a1 + 16;
  if (*v18)
  {
    unint64_t v28 = *(void *)(*v18 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11) {
        v28 %= v11;
      }
    }
    else
    {
      v28 &= v11 - 1;
    }
    unint64_t v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_47;
  }
LABEL_48:
  ++*(void *)(a1 + 24);
}

void sub_1848316F0(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,void *>>>::operator()[abi:nn180100](0, v1);
  _Unwind_Resume(a1);
}

uint64_t _ZZ22get_setters_for_timingIN2CA6Render14BasicAnimationE11CAAnimationEDavENKUlvE_clEv()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  memset(v3, 0, sizeof(v3));
  uint64_t v4 = 1065353216;
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>((uint64_t)v3, 0x40uLL);
  snake_case_to_camel_case("begin_time", 10, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 842, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render14BasicAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES6_S8_SB_SK_SN_;
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("speed", 5, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 843, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render14BasicAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES6_S8_SB_SK_SN_;
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("duration", 8, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 844, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render14BasicAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES6_S8_SB_SK_SN_;
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("time_offset", 11, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 845, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render14BasicAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES6_S8_SB_SK_SN_;
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("autoreverses", 12, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 846, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render14BasicAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES6_S8_SB_SK_SN_;
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("fill_mode", 9, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 856, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render14BasicAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE4_8__invokeES6_S8_SB_SK_SN_;
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("repeatDuration", 14, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 860, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render14BasicAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE5_8__invokeES6_S8_SB_SK_SN_;
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("repeatCount", 11, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 864, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAAnimation *,CA::Render::BasicAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render14BasicAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE6_8__invokeES6_S8_SB_SK_SN_;
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__hash_table((uint64_t)&_ZZ22get_setters_for_timingIN2CA6Render14BasicAnimationE11CAAnimationEDavE10timing_map, (uint64_t *)v3);
  return std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)v3);
}

void sub_184831C9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void *_ZZZ22get_setters_for_timingIN2CA6Render14BasicAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE6_8__invokeES6_S8_SB_SK_SN_(void *a1, const char *a2)
{
  uint64_t v2 = *((void *)a2 + 5);
  if (v2)
  {
    if ((*(unsigned char *)(v2 + 13) & 8) == 0)
    {
      double v3 = *(double *)(v2 + 24);
      *(float *)&double v3 = v3;
      return (void *)[a1 setRepeatCount:v3];
    }
  }
  return a1;
}

void *_ZZZ22get_setters_for_timingIN2CA6Render14BasicAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE5_8__invokeES6_S8_SB_SK_SN_(void *a1, const char *a2)
{
  uint64_t v2 = *((void *)a2 + 5);
  if (v2)
  {
    if ((*(unsigned char *)(v2 + 13) & 8) != 0) {
      return (void *)[a1 setRepeatDuration:*(double *)(v2 + 24)];
    }
  }
  return a1;
}

void *_ZZZ22get_setters_for_timingIN2CA6Render14BasicAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE4_8__invokeES6_S8_SB_SK_SN_(void *a1, const char *a2)
{
  uint64_t v2 = *((void *)a2 + 5);
  if (v2)
  {
    int v3 = *(_DWORD *)(v2 + 12);
    if ((v3 & 0x200) != 0)
    {
      if ((v3 & 0x400) != 0) {
        uint64_t v4 = &kCAFillModeBoth;
      }
      else {
        uint64_t v4 = &kCAFillModeForwards;
      }
    }
    else
    {
      if ((v3 & 0x400) == 0) {
        return a1;
      }
      uint64_t v4 = &kCAFillModeBackwards;
    }
    return (void *)[a1 setFillMode:*v4];
  }
  return a1;
}

void *_ZZZ22get_setters_for_timingIN2CA6Render14BasicAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES6_S8_SB_SK_SN_(void *a1, const char *a2)
{
  uint64_t v2 = *((void *)a2 + 5);
  if (v2) {
    return (void *)[a1 setAutoreverses:(*(_DWORD *)(v2 + 12) >> 8) & 1];
  }
  return a1;
}

void *_ZZZ22get_setters_for_timingIN2CA6Render14BasicAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES6_S8_SB_SK_SN_(void *a1, const char *a2)
{
  uint64_t v2 = *((void *)a2 + 5);
  if (v2) {
    return (void *)[a1 setTimeOffset:*(double *)(v2 + 48)];
  }
  return a1;
}

void *_ZZZ22get_setters_for_timingIN2CA6Render14BasicAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES6_S8_SB_SK_SN_(void *a1, const char *a2)
{
  uint64_t v2 = *((void *)a2 + 5);
  if (v2) {
    return (void *)[a1 setDuration:*(double *)(v2 + 32)];
  }
  return a1;
}

void *_ZZZ22get_setters_for_timingIN2CA6Render14BasicAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES6_S8_SB_SK_SN_(void *a1, const char *a2, double a3)
{
  uint64_t v3 = *((void *)a2 + 5);
  if (v3)
  {
    LODWORD(a3) = *(_DWORD *)(v3 + 16);
    return (void *)[a1 setSpeed:a3];
  }
  return a1;
}

void *_ZZZ22get_setters_for_timingIN2CA6Render14BasicAnimationE11CAAnimationEDavENKUlvE_clEvENUlPS3_PKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES6_S8_SB_SK_SN_(void *a1, const char *a2)
{
  uint64_t v2 = *((void *)a2 + 5);
  if (v2) {
    return (void *)[a1 setBeginTime:*(double *)(v2 + 40)];
  }
  return a1;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE_clEvENUlP11CAAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES8_SA_SD_SM_SP_(void *a1, const char *a2)
{
  return [a1 setRemovedOnCompletion:(*((_DWORD *)a2 + 3) >> 11) & 1];
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE_clEvENUlP11CAAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES8_SA_SD_SM_SP_(void *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 24);
  int v6 = v3;
  uint64_t result = [MEMORY[0x1E4F29238] valueWithBytes:&v5 objCType:"{CAFrameRateRange=fff}"];
  if (result) {
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(NSString, "stringWithUTF8String:", "preferredFrameRateRange"));
  }
  return result;
}

CAMediaTimingFunction *_ZZZ20get_setters_for_typeIN2CA6Render14BasicAnimationEERKDavENKUlvE_clEvENUlP11CAAnimationPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES8_SA_SD_SM_SP_(CAMediaTimingFunction *result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *(void *)(a2 + 48);
  if (v4)
  {
    int v6 = result;
    uint64_t result = nsobject_from_values<CAMediaTimingFunction *,double>((double *)(v4 + 24), *(_DWORD *)(v4 + 16));
    if (result)
    {
      uint64_t v7 = result;
      if (*((char *)a4 + 23) >= 0) {
        unint64_t v8 = a4;
      }
      else {
        unint64_t v8 = (uint64_t *)*a4;
      }
      uint64_t v9 = [NSString stringWithUTF8String:v8];
      return (CAMediaTimingFunction *)[(CAMediaTimingFunction *)v6 setValue:v7 forKey:v9];
    }
  }
  return result;
}

void ___Z20get_setters_for_typeIN2CA6Render6FilterEERKDav_block_invoke()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__rehash<true>(vcvtps_u32_f32(8.0 / *(float *)&dword_1E8F878C0));
  snake_case_to_camel_case("name", 4, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p)) {
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1151, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavEUb_ENUlP8CAFilterPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v2, "enabled");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)v2)) {
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1152, "\"Duplicated Entry !!\" && map.map.find (\"enabled\") == map.map.end ()");
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v2, "enabled");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v2, (uint64_t)v2)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavEUb_ENUlP8CAFilterPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES7_S9_SC_SL_SO_;
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  snake_case_to_camel_case("accessibility", 13, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p)) {
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1155, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavEUb_ENUlP8CAFilterPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("caches_input_image", 18, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p)) {
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1158, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavEUb_ENUlP8CAFilterPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("inputs", 6, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p)) {
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1159, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavEUb_ENUlP8CAFilterPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1848322E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__rehash<true>(size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  size_t v2 = *((void *)&_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 1);
  if (prime <= *((void *)&_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 1))
  {
    if (prime >= *((void *)&_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 1)) {
      return;
    }
    unint64_t v9 = vcvtps_u32_f32((float)(unint64_t)qword_1E8F878B8 / *(float *)&dword_1E8F878C0);
    if (*((void *)&_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 1) < 3uLL
      || (uint8x8_t v10 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 8)),
          v10.i16[0] = vaddlv_u8(v10),
          v10.u32[0] > 1uLL))
    {
      unint64_t v9 = std::__next_prime(v9);
    }
    else
    {
      uint64_t v11 = 1 << -(char)__clz(v9 - 1);
      if (v9 >= 2) {
        unint64_t v9 = v11;
      }
    }
    if (prime <= v9) {
      size_t prime = v9;
    }
    if (prime >= v2) {
      return;
    }
    if (!prime)
    {
      unint64_t v14 = (void *)_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map;
      *(void *)&_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map = 0;
      if (v14) {
        operator delete(v14);
      }
      *((void *)&_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 1) = 0;
      return;
    }
  }
  if (prime >> 61) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  char v3 = operator new(8 * prime);
  uint64_t v4 = (void *)_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map;
  *(void *)&_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map = v3;
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = 0;
  *((void *)&_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 1) = prime;
  do
    *(void *)(_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 8 * v5++) = 0;
  while (prime != v5);
  int v6 = (void **)qword_1E8F878B0;
  if (qword_1E8F878B0)
  {
    size_t v7 = *(void *)(qword_1E8F878B0 + 8);
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      if (v7 >= prime) {
        v7 %= prime;
      }
    }
    else
    {
      v7 &= prime - 1;
    }
    *(void *)(_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 8 * v7) = &qword_1E8F878B0;
    for (i = *v6; i; size_t v7 = v13)
    {
      size_t v13 = i[1];
      if (v8.u32[0] > 1uLL)
      {
        if (v13 >= prime) {
          v13 %= prime;
        }
      }
      else
      {
        v13 &= prime - 1;
      }
      if (v13 != v7)
      {
        if (!*(void *)(_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 8 * v13))
        {
          *(void *)(_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 8 * v13) = v6;
          goto LABEL_31;
        }
        CAMediaTimingFunction *v6 = (void *)*i;
        *uint64_t i = **(void **)(_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 8 * v13);
        **(void **)(_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 8 * v13) = i;
        uint64_t i = v6;
      }
      size_t v13 = v7;
LABEL_31:
      int v6 = (void **)i;
      uint64_t i = (void *)*i;
    }
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(uint64_t a1)
{
  char v1 = (unsigned __int8 *)a1;
  unint64_t v2 = *(void *)(a1 + 8);
  if (*(char *)(a1 + 23) >= 0)
  {
    unint64_t v3 = *(unsigned __int8 *)(a1 + 23);
  }
  else
  {
    a1 = *(void *)a1;
    unint64_t v3 = v2;
  }
  unint64_t v4 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t *)a1, v3);
  unint64_t v5 = *((void *)&_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 1);
  if (!*((void *)&_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 1)) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 8));
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *((void *)&_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 1)) {
      unint64_t v9 = v4 % *((void *)&_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 1);
    }
  }
  else
  {
    unint64_t v9 = (*((void *)&_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 1) - 1) & v4;
  }
  uint8x8_t v10 = *(unsigned __int8 ***)(_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 8 * v9);
  if (!v10) {
    return 0;
  }
  for (uint64_t i = *v10; i; uint64_t i = *(unsigned __int8 **)i)
  {
    unint64_t v12 = *((void *)i + 1);
    if (v12 == v6)
    {
      if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, v1)) {
        return i;
      }
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= v5) {
          v12 %= v5;
        }
      }
      else
      {
        v12 &= v5 - 1;
      }
      if (v12 != v9) {
        return 0;
      }
    }
  }
  return i;
}

void *std::__hash_table<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (unsigned __int8 *)a1;
  unint64_t v4 = *(void *)(a1 + 8);
  if (*(char *)(a1 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a1 + 23);
  }
  else
  {
    a1 = *(void *)a1;
    unint64_t v5 = v4;
  }
  unint64_t v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t *)a1, v5);
  unint64_t v7 = v6;
  unint64_t v8 = *((void *)&_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 1);
  if (*((void *)&_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 1))
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 8));
    v9.i16[0] = vaddlv_u8(v9);
    unint64_t v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v11 = v6;
      if (v6 >= *((void *)&_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 1)) {
        unint64_t v11 = v6 % *((void *)&_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 1);
      }
    }
    else
    {
      unint64_t v11 = (*((void *)&_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 1) - 1) & v6;
    }
    unint64_t v12 = *(void ***)(_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 8 * v11);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(void **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v7)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)i + 16, v3)) {
            return i;
          }
        }
        else
        {
          if (v10 > 1)
          {
            if (v14 >= v8) {
              v14 %= v8;
            }
          }
          else
          {
            v14 &= v8 - 1;
          }
          if (v14 != v11) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t i = operator new(0x30uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v7;
  *((_OWORD *)i + 1) = *(_OWORD *)a2;
  uint64_t v15 = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *((void *)i + 4) = v15;
  *((void *)i + 5) = 0;
  float v16 = (float)(unint64_t)(qword_1E8F878B8 + 1);
  if (!v8 || (float)(*(float *)&dword_1E8F878C0 * (float)v8) < v16)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v16 / *(float *)&dword_1E8F878C0);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAFilter *,CA::Render::Filter const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__rehash<true>(v20);
    unint64_t v8 = *((void *)&_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 1);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= *((void *)&_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 1)) {
        unint64_t v11 = v7 % *((void *)&_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 1);
      }
      else {
        unint64_t v11 = v7;
      }
    }
    else
    {
      unint64_t v11 = (*((void *)&_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 1) - 1) & v7;
    }
  }
  uint64_t v21 = _ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map;
  BOOL v22 = *(void **)(_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 8 * v11);
  if (v22)
  {
    *(void *)uint64_t i = *v22;
LABEL_41:
    *BOOL v22 = i;
    goto LABEL_42;
  }
  *(void *)uint64_t i = qword_1E8F878B0;
  qword_1E8F878B0 = (uint64_t)i;
  *(void *)(v21 + 8 * v11) = &qword_1E8F878B0;
  if (*(void *)i)
  {
    unint64_t v23 = *(void *)(*(void *)i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8) {
        v23 %= v8;
      }
    }
    else
    {
      v23 &= v8 - 1;
    }
    BOOL v22 = (void *)(_ZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavE3map + 8 * v23);
    goto LABEL_41;
  }
LABEL_42:
  ++qword_1E8F878B8;
  return i;
}

void sub_1848328B8(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavEUb_ENUlP8CAFilterPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES7_S9_SC_SL_SO_(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, CGColorSpace **a5)
{
  uint64_t v5 = *(void *)(a2 + 40);
  if (v5 && *(_DWORD *)(v5 + 16))
  {
    unint64_t v7 = (void *)result;
    unint64_t v8 = 0;
    uint64_t v9 = v5 + 24;
    do
    {
      CFStringRef String = CAAtomGetString(*(_DWORD *)(*(void *)(v9 + 8 * v8) + 16));
      unint64_t v11 = ns_object_from_render_object(a5, *(void *)(*(void *)(v9 + 8 * v8) + 24), (const char *)objc_msgSend((id)objc_msgSend(v7, "CAMLTypeForKey:", String), "UTF8String"));
      if (!v11) {
        __assert_rtn("set_filter_inputs", "CAReverseSerialization.mm", 808, "input_value != nil");
      }
      uint64_t result = [v7 setValue:v11 forKey:String];
      ++v8;
    }
    while (v8 < *(unsigned int *)(v5 + 16));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavEUb_ENUlP8CAFilterPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES7_S9_SC_SL_SO_(void *a1, const char *a2)
{
  return [a1 setCachesInputImage:(*((_DWORD *)a2 + 3) >> 9) & 1];
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavEUb_ENUlP8CAFilterPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES7_S9_SC_SL_SO_(void *a1, const char *a2)
{
  return [a1 setAccessibility:(*((_DWORD *)a2 + 3) >> 17) & 1];
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavEUb_ENUlP8CAFilterPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2)
{
  uint64_t result = [NSNumber numberWithLongLong:((unint64_t)*(unsigned int *)(a2 + 12) >> 8) & 1];
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = [NSString stringWithUTF8String:"enabled"];
    return [a1 setValue:v4 forKey:v5];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render6FilterEERKDavEUb_ENUlP8CAFilterPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES7_S9_SC_SL_SO_(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *(void *)(a2 + 32);
  if (v4)
  {
    unint64_t v6 = (void *)result;
    uint64_t result = [NSString stringWithUTF8String:v4 + 28];
    if (result)
    {
      uint64_t v7 = result;
      if (*((char *)a4 + 23) >= 0) {
        unint64_t v8 = a4;
      }
      else {
        unint64_t v8 = (uint64_t *)*a4;
      }
      uint64_t v9 = [NSString stringWithUTF8String:v8];
      return [v6 setValue:v7 forKey:v9];
    }
  }
  return result;
}

CGColor *_ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE88_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, CGColorSpace **a5)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a3 + 128);
  if (v6) {
    uint64_t v7 = *(void *)(v6 + 80);
  }
  else {
    uint64_t v7 = 0;
  }
  *(_OWORD *)uint64_t v9 = *(_OWORD *)(a3 + 16);
  uint64_t result = cg_color_from_pattern_or_color(a5, v7, v9);
  if (result)
  {
    return (CGColor *)[a1 setValue:result forKey:@"backgroundColor"];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE87_8__invokeES8_SA_SA_SJ_SM_(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a3 + 136);
  if (v5)
  {
    uint64_t v6 = *(unsigned int *)(v5 + 16);
    if (v6)
    {
      unint64_t v8 = (void *)result;
      uint64_t v9 = (uint64_t *)(v5 + 24);
      do
      {
        uint64_t v10 = *v9++;
        uint64_t result = objc_msgSend(v8, "addAnimation:forKey:", animation_from_render_animation(a5, v10), *(void *)(v10 + 56));
        --v6;
      }
      while (v6);
    }
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE86_8__invokeES8_SA_SA_SJ_SM_(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = (void *)result;
  v12[1] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a3 + 104);
  if ((*(unsigned char *)(a3 + 13) & 0x20) != 0)
  {
    if (v7)
    {
      v12[0] = calayer_from_render_layer(a5, *(void *)(a3 + 104));
      return objc_msgSend(v6, "setValue:forKey:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", v12, 1), @"sublayers");
    }
  }
  else if (v7)
  {
    unint64_t v8 = (void *)[MEMORY[0x1E4F1CA48] arrayWithCapacity:*(unsigned int *)(v7 + 16)];
    if (*(_DWORD *)(v7 + 16))
    {
      unint64_t v9 = 0;
      do
      {
        uint64_t v10 = *(void *)(v7 + 24 + 8 * v9);
        if (v10) {
          uint64_t v11 = calayer_from_render_layer(a5, v10);
        }
        else {
          uint64_t v11 = 0;
        }
        [v8 addObject:v11];
        ++v9;
      }
      while (v9 < *(unsigned int *)(v7 + 16));
    }
    return [v6 setValue:v8 forKey:@"sublayers"];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE85_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 128);
  if (v3) {
    double v4 = *(float *)(v3 + 264);
  }
  else {
    double v4 = 0.0;
  }
  uint64_t result = [NSNumber numberWithDouble:v4];
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = [NSString stringWithUTF8String:"displayMaximumDesiredEDR"];
    return [a1 setValue:v6 forKey:v7];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE84_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 128);
  if (v3) {
    double v4 = *(float *)(v3 + 256);
  }
  else {
    double v4 = 1.0;
  }
  uint64_t result = [NSNumber numberWithDouble:v4];
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = [NSString stringWithUTF8String:"contentsEDRStrength"];
    return [a1 setValue:v6 forKey:v7];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE83_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 128);
  if (v3) {
    double v4 = *(float *)(v3 + 260);
  }
  else {
    double v4 = 0.0;
  }
  uint64_t result = [NSNumber numberWithDouble:v4];
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = [NSString stringWithUTF8String:"contentsMaximumDesiredEDR"];
    return [a1 setValue:v6 forKey:v7];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE82_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2)
{
  uint64_t result = [NSNumber numberWithLongLong:(*(void *)(a2 + 40) >> 28) & 1];
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = [NSString stringWithUTF8String:"toneMapToStandardDynamicRange"];
    return [a1 setValue:v4 forKey:v5];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE81_8__invokeES8_SA_SA_SJ_SM_(uint64_t result, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a2 + 128);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 136);
    if (v3)
    {
      uint64_t v4 = (void *)result;
      uint64_t result = [MEMORY[0x1E4F1CA48] arrayWithCapacity:*(unsigned int *)(v3 + 16)];
      uint64_t v5 = (void *)result;
      if (*(_DWORD *)(v3 + 16))
      {
        unint64_t v6 = 0;
        do
        {
          if (*(void *)(v3 + 24 + 8 * v6))
          {
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              uint64_t v7 = x_log_category_utilities;
              if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)unint64_t v8 = 0;
                _os_log_impl(&dword_184668000, v7, OS_LOG_TYPE_ERROR, "Presentation Modifiers reverse serialization not implemented !", v8, 2u);
              }
            }
          }
          uint64_t result = [v5 addObject:0];
          ++v6;
        }
        while (v6 < *(unsigned int *)(v3 + 16));
      }
      if (v5) {
        return objc_msgSend(v4, "setValue:forKey:", v5, objc_msgSend(NSString, "stringWithUTF8String:", "presentationModifiers"));
      }
    }
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE80_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 128);
  if (v3) {
    double v4 = *(float *)(v3 + 292);
  }
  else {
    double v4 = 0.0;
  }
  uint64_t result = [NSNumber numberWithDouble:v4];
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = [NSString stringWithUTF8String:"minificationFilterBias"];
    return [a1 setValue:v6 forKey:v7];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE79_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2)
{
  uint64_t result = [NSNumber numberWithLongLong:(*(void *)(a2 + 40) >> 8) & 1];
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = [NSString stringWithUTF8String:"hidden"];
    return [a1 setValue:v4 forKey:v5];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE78_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2)
{
  uint64_t result = [NSNumber numberWithLongLong:(*(void *)(a2 + 40) >> 9) & 1];
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = [NSString stringWithUTF8String:"geometryFlipped"];
    return [a1 setValue:v4 forKey:v5];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE77_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2)
{
  uint64_t result = [NSNumber numberWithLongLong:(*(void *)(a2 + 40) >> 10) & 1];
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = [NSString stringWithUTF8String:"doubleSided"];
    return [a1 setValue:v4 forKey:v5];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE76_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 128);
  if (v3) {
    double v4 = *(float *)(v3 + 296);
  }
  else {
    double v4 = 1.0;
  }
  uint64_t result = [NSNumber numberWithDouble:v4];
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = [NSString stringWithUTF8String:"gain"];
    return [a1 setValue:v6 forKey:v7];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE75_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2)
{
  uint64_t result = [NSNumber numberWithLongLong:(*(void *)(a2 + 40) >> 27) & 1];
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = [NSString stringWithUTF8String:"wantsExtendedDynamicRangeContent"];
    return [a1 setValue:v4 forKey:v5];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE74_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = *(void *)(a2 + 128);
  if (v6) {
    double v7 = *(double *)(v6 + 192);
  }
  else {
    double v7 = 0.0;
  }
  uint64_t result = [NSNumber numberWithDouble:v7];
  if (result)
  {
    uint64_t v9 = result;
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v10 = a4;
    }
    else {
      uint64_t v10 = (uint64_t *)*a4;
    }
    uint64_t v11 = [NSString stringWithUTF8String:v10];
    return [a1 setValue:v9 forKey:v11];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE73_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = *(void *)(a2 + 128);
  if (v6) {
    uint64_t v7 = *(void *)(v6 + 16);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t result = id_from_value<CATransform3D,CA::Render::Vector *>(v7);
  if (result)
  {
    uint64_t v9 = result;
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v10 = a4;
    }
    else {
      uint64_t v10 = (uint64_t *)*a4;
    }
    uint64_t v11 = [NSString stringWithUTF8String:v10];
    return [a1 setValue:v9 forKey:v11];
  }
  return result;
}

uint64_t id_from_value<CATransform3D,CA::Render::Vector *>(uint64_t result)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    if (*(_DWORD *)(result + 16) <= 0xFu) {
      __assert_rtn("nsobject_from_values", "CAReverseSerialization.mm", 258, "count >= 16");
    }
    long long v1 = *(_OWORD *)(result + 40);
    long long v2 = *(_OWORD *)(result + 56);
    long long v3 = *(_OWORD *)(result + 72);
    long long v4 = *(_OWORD *)(result + 88);
    long long v5 = *(_OWORD *)(result + 104);
    long long v6 = *(_OWORD *)(result + 120);
    long long v7 = *(_OWORD *)(result + 136);
    v8[0] = *(_OWORD *)(result + 24);
    v8[1] = v1;
    _OWORD v8[2] = v2;
    v8[3] = v3;
    v8[4] = v4;
    v8[5] = v5;
    v8[6] = v6;
    v8[7] = v7;
    return [MEMORY[0x1E4F29238] valueWithCATransform3D:v8];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE72_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = *(void *)(a2 + 128);
  if (v6) {
    uint64_t v7 = *(void *)(v6 + 24);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t result = id_from_value<CATransform3D,CA::Render::Vector *>(v7);
  if (result)
  {
    uint64_t v9 = result;
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v10 = a4;
    }
    else {
      uint64_t v10 = (uint64_t *)*a4;
    }
    uint64_t v11 = [NSString stringWithUTF8String:v10];
    return [a1 setValue:v9 forKey:v11];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE71_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithLongLong:(*(void *)(a2 + 40) >> 12) & 1];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      unint64_t v8 = a4;
    }
    else {
      unint64_t v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE70_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithLongLong:(*(void *)(a2 + 40) >> 11) & 1];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      unint64_t v8 = a4;
    }
    else {
      unint64_t v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE69_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithLongLong:(*(void *)(a2 + 40) >> 38) & 1];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      unint64_t v8 = a4;
    }
    else {
      unint64_t v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE68_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithLongLong:(*(void *)(a2 + 40) >> 20) & 1];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      unint64_t v8 = a4;
    }
    else {
      unint64_t v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE67_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithLongLong:(*(void *)(a2 + 40) >> 19) & 1];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      unint64_t v8 = a4;
    }
    else {
      unint64_t v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE66_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithLongLong:(*(void *)(a2 + 40) >> 18) & 1];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      unint64_t v8 = a4;
    }
    else {
      unint64_t v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE65_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = *(void *)(a2 + 128);
  if (v6) {
    double v7 = *(float *)(v6 + 224);
  }
  else {
    double v7 = 3.0;
  }
  uint64_t result = [NSNumber numberWithDouble:v7];
  if (result)
  {
    uint64_t v9 = result;
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v10 = a4;
    }
    else {
      uint64_t v10 = (uint64_t *)*a4;
    }
    uint64_t v11 = [NSString stringWithUTF8String:v10];
    return [a1 setValue:v9 forKey:v11];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE64_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithLongLong:(*(void *)(a2 + 40) >> 34) & 1];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      unint64_t v8 = a4;
    }
    else {
      unint64_t v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

CGPath *_ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE63_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a2 + 128);
  if (v6) {
    uint64_t v6 = *(void *)(v6 + 120);
  }
  v11[0] = v6;
  uint64_t result = id_from_value<void,CA::Render::Path *>(v11);
  if (result)
  {
    unint64_t v8 = result;
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v9 = a4;
    }
    else {
      uint64_t v9 = (uint64_t *)*a4;
    }
    uint64_t v10 = [NSString stringWithUTF8String:v9];
    return (CGPath *)[a1 setValue:v8 forKey:v10];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE62_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, float a3, uint64_t a4, uint64_t *a5)
{
  LOBYTE(a3) = *(unsigned char *)(a2 + 33);
  uint64_t result = [NSNumber numberWithDouble:(float)((float)LODWORD(a3) * 0.0039216)];
  if (result)
  {
    uint64_t v8 = result;
    if (*((char *)a5 + 23) >= 0) {
      uint64_t v9 = a5;
    }
    else {
      uint64_t v9 = (uint64_t *)*a5;
    }
    uint64_t v10 = [NSString stringWithUTF8String:v9];
    return [a1 setValue:v8 forKey:v10];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE61_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(float32x2_t **)(a2 + 128);
  if (v6) {
    float64x2_t v7 = vcvtq_f64_f32(v6[27]);
  }
  else {
    float64x2_t v7 = (float64x2_t)xmmword_184997EE0;
  }
  float64x2_t v10 = v7;
  uint64_t result = [MEMORY[0x1E4F29238] valueWithBytes:&v10 objCType:"{CGSize=dd}"];
  if (result)
  {
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v9 = a4;
    }
    else {
      uint64_t v9 = (uint64_t *)*a4;
    }
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(NSString, "stringWithUTF8String:", v9));
  }
  return result;
}

CGColor *_ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE60_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, CGColorSpace **a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a2 + 128);
  if (v7) {
    long long v8 = *(_OWORD *)(v7 + 200);
  }
  else {
    long long v8 = xmmword_184997DF0;
  }
  long long v13 = v8;
  uint64_t result = cg_color_from_values<CA::Vec4<float>>((float *)&v13, *a5);
  if (result)
  {
    float64x2_t v10 = result;
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v11 = a4;
    }
    else {
      uint64_t v11 = (uint64_t *)*a4;
    }
    uint64_t v12 = [NSString stringWithUTF8String:v11];
    return (CGColor *)[a1 setValue:v10 forKey:v12];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE59_8__invokeES8_SA_SA_SJ_SM_(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = (uint64_t)*off_1E5273508[(*(void *)(a2 + 40) >> 2) & 3];
  if (v4)
  {
    long long v5 = (void *)result;
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v6 = a4;
    }
    else {
      uint64_t v6 = (uint64_t *)*a4;
    }
    uint64_t v7 = [NSString stringWithUTF8String:v6];
    return [v5 setValue:v4 forKey:v7];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE58_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = *(void *)(a2 + 128);
  if (v6) {
    double v7 = *(float *)(v6 + 300);
  }
  else {
    double v7 = 0.0;
  }
  uint64_t result = [NSNumber numberWithDouble:v7];
  if (result)
  {
    uint64_t v9 = result;
    if (*((char *)a4 + 23) >= 0) {
      float64x2_t v10 = a4;
    }
    else {
      float64x2_t v10 = (uint64_t *)*a4;
    }
    uint64_t v11 = [NSString stringWithUTF8String:v10];
    return [a1 setValue:v9 forKey:v11];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE57_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithLongLong:(*(void *)(a2 + 40) >> 36) & 1];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      long long v8 = a4;
    }
    else {
      long long v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE56_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = *(void *)(a2 + 128);
  if (v6) {
    double v7 = *(float *)(v6 + 320);
  }
  else {
    double v7 = 0.0;
  }
  uint64_t result = [NSNumber numberWithDouble:v7];
  if (result)
  {
    uint64_t v9 = result;
    if (*((char *)a4 + 23) >= 0) {
      float64x2_t v10 = a4;
    }
    else {
      float64x2_t v10 = (uint64_t *)*a4;
    }
    uint64_t v11 = [NSString stringWithUTF8String:v10];
    return [a1 setValue:v9 forKey:v11];
  }
  return result;
}

CGColor *_ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE55_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, CGColorSpace **a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a2 + 128);
  if (v7) {
    long long v8 = *(_OWORD *)(v7 + 304);
  }
  else {
    long long v8 = xmmword_184997DF0;
  }
  long long v13 = v8;
  uint64_t result = cg_color_from_values<CA::Vec4<float>>((float *)&v13, *a5);
  if (result)
  {
    float64x2_t v10 = result;
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v11 = a4;
    }
    else {
      uint64_t v11 = (uint64_t *)*a4;
    }
    uint64_t v12 = [NSString stringWithUTF8String:v11];
    return (CGColor *)[a1 setValue:v10 forKey:v12];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE54_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, float a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7 = *(void *)(a2 + 128);
  if (v7)
  {
    float v8 = *(float *)(v7 + 288);
  }
  else
  {
    LOBYTE(a3) = *(unsigned char *)(a2 + 35);
    float v8 = (float)LODWORD(a3);
  }
  uint64_t result = [NSNumber numberWithDouble:v8];
  if (result)
  {
    uint64_t v10 = result;
    if (*((char *)a5 + 23) >= 0) {
      uint64_t v11 = a5;
    }
    else {
      uint64_t v11 = (uint64_t *)*a5;
    }
    uint64_t v12 = [NSString stringWithUTF8String:v11];
    return [a1 setValue:v10 forKey:v12];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE53_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithLongLong:(*(void *)(a2 + 40) >> 22) & 1];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      float v8 = a4;
    }
    else {
      float v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE52_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithLongLong:(*(void *)(a2 + 40) >> 21) & 1];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      float v8 = a4;
    }
    else {
      float v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE51_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithLongLong:(*(void *)(a2 + 40) >> 35) & 1];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      float v8 = a4;
    }
    else {
      float v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE50_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithLongLong:(*(void *)(a2 + 40) >> 23) & 1];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      float v8 = a4;
    }
    else {
      float v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE49_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  long long v8 = *(_OWORD *)(a2 + 48);
  uint64_t result = [MEMORY[0x1E4F29238] valueWithBytes:&v8 objCType:"{CGPoint=dd}"];
  if (result)
  {
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v7 = a4;
    }
    else {
      uint64_t v7 = (uint64_t *)*a4;
    }
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(NSString, "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE48_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, float a3, uint64_t a4, uint64_t *a5)
{
  LOBYTE(a3) = *(unsigned char *)(a2 + 32);
  uint64_t result = [NSNumber numberWithDouble:(float)((float)LODWORD(a3) * 0.0039216)];
  if (result)
  {
    uint64_t v8 = result;
    if (*((char *)a5 + 23) >= 0) {
      uint64_t v9 = a5;
    }
    else {
      uint64_t v9 = (uint64_t *)*a5;
    }
    uint64_t v10 = [NSString stringWithUTF8String:v9];
    return [a1 setValue:v8 forKey:v10];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE47_8__invokeES8_SA_SA_SJ_SM_(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *(void *)(a2 + 120);
  if (v4)
  {
    uint64_t v6 = (void *)result;
    uint64_t result = [NSString stringWithUTF8String:v4 + 28];
    if (result)
    {
      uint64_t v7 = result;
      if (*((char *)a4 + 23) >= 0) {
        uint64_t v8 = a4;
      }
      else {
        uint64_t v8 = (uint64_t *)*a4;
      }
      uint64_t v9 = [NSString stringWithUTF8String:v8];
      return [v6 setValue:v7 forKey:v9];
    }
  }
  return result;
}

__CFString *_ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE46_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = id_from_value<void,CA::Render::ImageFilter>(*(_DWORD *)(a2 + 36) & 0xF);
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v8 = a4;
    }
    else {
      uint64_t v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return (__CFString *)[a1 setValue:v7 forKey:v9];
  }
  return result;
}

__CFString *id_from_value<void,CA::Render::ImageFilter>(unsigned int a1)
{
  if (a1 > 0xB) {
    return 0;
  }
  else {
    return off_1E5280880[a1];
  }
}

void _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE45_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *(void *)(a2 + 128);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 112);
    if (v5)
    {
      uint64_t v8 = *(void *)(v5 + 32) - *(void *)(v5 + 24);
      if (v8)
      {
        if (v8 < 0) {
          abort();
        }
        size_t v9 = 40 * (v8 >> 5);
        uint64_t v10 = (double *)operator new(v9);
        size_t v11 = 40 * ((v9 - 40) / 0x28) + 40;
        bzero(v10, v11);
        uint64_t v12 = (char *)v10 + v11;
        uint64_t v13 = *(void *)(v5 + 24);
        uint64_t v14 = *(void *)(v5 + 32) - v13;
        if (v14)
        {
          unint64_t v15 = v14 >> 5;
          if (v15 <= 1) {
            unint64_t v15 = 1;
          }
          float v16 = v10 + 4;
          BOOL v17 = (float *)(v13 + 24);
          do
          {
            double v18 = *v17;
            float64x2_t v19 = vcvtq_f64_f32(*(float32x2_t *)(v17 - 2));
            *((float64x2_t *)v16 - 2) = vcvtq_f64_f32(*(float32x2_t *)(v17 - 6));
            *((float64x2_t *)v16 - 1) = v19;
            *float v16 = v18;
            v16 += 5;
            v17 += 8;
            --v15;
          }
          while (v15);
        }
      }
      else
      {
        uint64_t v12 = 0;
        uint64_t v10 = 0;
      }
      unint64_t v20 = *(void *)(v5 + 56) - *(void *)(v5 + 48);
      if (v20)
      {
        if (v20 >= 0x7FFFFFFFFFFFFFF1) {
          abort();
        }
        size_t v21 = 2 * v20;
        BOOL v22 = (char *)operator new(2 * v20);
        bzero(v22, v21);
        unint64_t v20 = (unint64_t)&v22[v21];
        uint64_t v23 = *(void *)(v5 + 48);
        uint64_t v24 = *(void *)(v5 + 56);
        uint64_t v25 = v24 - v23;
        if (v24 != v23)
        {
          uint64_t v26 = 0;
          unint64_t v27 = v25 >> 4;
          if (v27 <= 1) {
            unint64_t v27 = 1;
          }
          uint64_t v28 = *(void *)(v5 + 72) + 4;
          char v29 = v22;
          do
          {
            for (uint64_t i = 0; i != 16; i += 4)
            {
              long long v31 = &v29[i];
              *(_DWORD *)long long v31 = *(_DWORD *)(v23 + i);
              *((_DWORD *)v31 + 4) = *(_DWORD *)(v28 + 4 * i);
            }
            ++v26;
            v29 += 32;
            v28 += 64;
            v23 += 16;
          }
          while (v26 != v27);
        }
      }
      else
      {
        BOOL v22 = 0;
      }
      unsigned int v32 = *(_DWORD *)(v5 + 96) - 1;
      if (v32 >= 6) {
        uint64_t v33 = @"none";
      }
      else {
        uint64_t v33 = off_1E52808E0[v32];
      }
      char v34 = +[CAMeshTransform meshTransformWithVertexCount:0xCCCCCCCCCCCCCCCDLL * ((v12 - (char *)v10) >> 3) vertices:v10 faceCount:(uint64_t)(v20 - (void)v22) >> 5 faces:v22 depthNormalization:v33];
      if (v22) {
        operator delete(v22);
      }
      if (v10) {
        operator delete(v10);
      }
      if (v34)
      {
        if (*((char *)a4 + 23) >= 0) {
          uint64_t v35 = a4;
        }
        else {
          uint64_t v35 = (uint64_t *)*a4;
        }
        uint64_t v36 = [NSString stringWithUTF8String:v35];
        [a1 setValue:v34 forKey:v36];
      }
    }
  }
}

void sub_184834918(_Unwind_Exception *exception_object)
{
  if (v2) {
    operator delete(v2);
  }
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE44_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithLongLong:(*(void *)(a2 + 40) >> 6) & 1];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v8 = a4;
    }
    else {
      uint64_t v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE43_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithLongLong:*(_WORD *)(a2 + 38) & 0xF];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v8 = a4;
    }
    else {
      uint64_t v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE42_8__invokeES8_SA_SA_SJ_SM_(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a2 + 112);
  if (v5)
  {
    uint64_t v7 = (void *)result;
    uint64_t result = calayer_from_render_layer(a5, v5);
    if (result)
    {
      uint64_t v8 = result;
      if (*((char *)a4 + 23) >= 0) {
        uint64_t v9 = a4;
      }
      else {
        uint64_t v9 = (uint64_t *)*a4;
      }
      uint64_t v10 = [NSString stringWithUTF8String:v9];
      return [v7 setValue:v8 forKey:v10];
    }
  }
  return result;
}

__CFString *_ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE41_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = id_from_value<void,CA::Render::ImageFilter>(*(_DWORD *)(a2 + 36) >> 4);
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v8 = a4;
    }
    else {
      uint64_t v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return (__CFString *)[a1 setValue:v7 forKey:v9];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE40_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithLongLong:(*(void *)(a2 + 40) >> 40) & 1];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v8 = a4;
    }
    else {
      uint64_t v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE39_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithLongLong:(*(void *)(a2 + 40) >> 33) & 1];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v8 = a4;
    }
    else {
      uint64_t v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE38_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithLongLong:(*(void *)(a2 + 40) >> 7) & 1];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v8 = a4;
    }
    else {
      uint64_t v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE37_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithLongLong:(*(void *)(a2 + 40) >> 44) & 1];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v8 = a4;
    }
    else {
      uint64_t v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE36_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithLongLong:HIDWORD(*(void *)(a2 + 40)) & 1];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v8 = a4;
    }
    else {
      uint64_t v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE35_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithLongLong:(*(void *)(a2 + 40) >> 39) & 1];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v8 = a4;
    }
    else {
      uint64_t v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE34_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithLongLong:(*(void *)(a2 + 40) >> 13) & 1];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v8 = a4;
    }
    else {
      uint64_t v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

void *_ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE33_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  v12[1] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a2 + 128);
  if (v7) {
    uint64_t v7 = *(void *)(v7 + 96);
  }
  v12[0] = v7;
  uint64_t result = id_from_value<void,CA::Render::TypedArray<CA::Render::Filter> *>(a5, v12);
  if (result)
  {
    uint64_t v9 = result;
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v10 = a4;
    }
    else {
      uint64_t v10 = (uint64_t *)*a4;
    }
    uint64_t v11 = [NSString stringWithUTF8String:v10];
    return (void *)[a1 setValue:v9 forKey:v11];
  }
  return result;
}

void *id_from_value<void,CA::Render::TypedArray<CA::Render::Filter> *>(uint64_t a1, uint64_t *a2)
{
  if (!*a2) {
    return 0;
  }
  uint64_t v4 = (void *)[MEMORY[0x1E4F1CA48] arrayWithCapacity:*(unsigned int *)(*a2 + 16)];
  uint64_t v5 = *a2;
  if (*(_DWORD *)(*a2 + 16))
  {
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(void *)(v5 + 8 * v6 + 24);
      if (v7) {
        uint64_t v8 = filter_from_render_filter(a1, v7);
      }
      else {
        uint64_t v8 = 0;
      }
      [v4 addObject:v8];
      ++v6;
      uint64_t v5 = *a2;
    }
    while (v6 < *(unsigned int *)(*a2 + 16));
  }
  return v4;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE32_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithLongLong:((unint64_t)*(unsigned int *)(a2 + 36) >> 8) & 0xF];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v8 = a4;
    }
    else {
      uint64_t v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE31_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithLongLong:((unint64_t)*(unsigned int *)(a2 + 36) >> 20) & 0x7FF];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v8 = a4;
    }
    else {
      uint64_t v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE30_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithLongLong:(*(void *)(a2 + 40) >> 24) & 1];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v8 = a4;
    }
    else {
      uint64_t v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE29_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = *(void *)(a2 + 128);
  float v7 = 0.0;
  if (v6) {
    float v7 = *(float *)(v6 + 228);
  }
  uint64_t result = [NSNumber numberWithDouble:v7];
  if (result)
  {
    uint64_t v9 = result;
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v10 = a4;
    }
    else {
      uint64_t v10 = (uint64_t *)*a4;
    }
    uint64_t v11 = [NSString stringWithUTF8String:v10];
    return [a1 setValue:v9 forKey:v11];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE28_8__invokeES8_SA_SA_SJ_SM_(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a2 + 128);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 72);
    if (v5)
    {
      if (*(_DWORD *)(v5 + 16) <= 7u) {
        __assert_rtn("nsobject_from_values", "CAReverseSerialization.mm", 267, "count >= 8");
      }
      float v7 = (void *)result;
      long long v8 = *(_OWORD *)(v5 + 40);
      v11[0] = *(_OWORD *)(v5 + 24);
      v11[1] = v8;
      long long v9 = *(_OWORD *)(v5 + 72);
      uint64_t v11[2] = *(_OWORD *)(v5 + 56);
      v11[3] = v9;
      uint64_t result = [MEMORY[0x1E4F29238] valueWithCACornerRadii:v11];
      if (result)
      {
        if (*((char *)a4 + 23) >= 0) {
          uint64_t v10 = a4;
        }
        else {
          uint64_t v10 = (uint64_t *)*a4;
        }
        return objc_msgSend(v7, "setValue:forKey:", result, objc_msgSend(NSString, "stringWithUTF8String:", v10));
      }
    }
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE27_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithLongLong:(*(void *)(a2 + 40) >> 41) & 1];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      long long v8 = a4;
    }
    else {
      long long v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE26_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = *(void *)(a2 + 128);
  if (v6) {
    uint64_t v7 = *(void *)(v6 + 64);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t result = id_from_value<CGRect,CA::Render::Vector *>(v7);
  if (result)
  {
    uint64_t v9 = result;
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v10 = a4;
    }
    else {
      uint64_t v10 = (uint64_t *)*a4;
    }
    uint64_t v11 = [NSString stringWithUTF8String:v10];
    return [a1 setValue:v9 forKey:v11];
  }
  return result;
}

uint64_t id_from_value<CGRect,CA::Render::Vector *>(uint64_t result)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    if (*(_DWORD *)(result + 16) <= 3u) {
      __assert_rtn("id_from_value", "CAReverseSerialization.mm", 316, "count >= 4");
    }
    float64x2_t v1 = vsubq_f64(*(float64x2_t *)(result + 40), *(float64x2_t *)(result + 24));
    v2[0] = *(_OWORD *)(result + 24);
    v2[1] = v1;
    return [MEMORY[0x1E4F29238] valueWithBytes:v2 objCType:"{CGRect={CGPoint=dd}{CGSize=dd}}"];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE25_8__invokeES8_SA_SA_SJ_SM_(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a2 + 128);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 56);
    if (v6)
    {
      long long v8 = (void *)result;
      uint64_t result = ns_object_from_render_object(a5, v6, 0);
      if (result)
      {
        uint64_t v9 = result;
        if (*((char *)a4 + 23) >= 0) {
          uint64_t v10 = a4;
        }
        else {
          uint64_t v10 = (uint64_t *)*a4;
        }
        uint64_t v11 = [NSString stringWithUTF8String:v10];
        return [v8 setValue:v9 forKey:v11];
      }
    }
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE24_8__invokeES8_SA_SA_SJ_SM_(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a2 + 128);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 32);
    if (v5)
    {
      if (*(_DWORD *)(v5 + 16) <= 4u) {
        __assert_rtn("id_from_value", "CAReverseSerialization.mm", 328, "count >= 5");
      }
      uint64_t v7 = (void *)result;
      long long v8 = *(_OWORD *)(v5 + 40);
      v10[0] = *(_OWORD *)(v5 + 24);
      v10[1] = v8;
      uint64_t v10[2] = *(_OWORD *)(v5 + 56);
      uint64_t result = [MEMORY[0x1E4F29238] valueWithBytes:v10 objCType:"{CGAffineTransform=dddddd}"];
      if (result)
      {
        if (*((char *)a4 + 23) >= 0) {
          uint64_t v9 = a4;
        }
        else {
          uint64_t v9 = (uint64_t *)*a4;
        }
        return objc_msgSend(v7, "setValue:forKey:", result, objc_msgSend(NSString, "stringWithUTF8String:", v9));
      }
    }
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE23_8__invokeES8_SA_SA_SJ_SM_(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = (void *)result;
  uint64_t v5 = *(void *)(a2 + 128);
  uint64_t v6 = kCALayerContentsSwizzleRGBA;
  if (v5 && (*(unsigned char *)(v5 + 324) & 1) != 0) {
    uint64_t v6 = &kCALayerContentsSwizzleAAAA;
  }
  uint64_t v7 = *v6;
  if (*v6)
  {
    if (*((char *)a4 + 23) >= 0) {
      long long v8 = a4;
    }
    else {
      long long v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [v4 setValue:v7 forKey:v9];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE22_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, float a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7 = *(void *)(a2 + 128);
  if (v7)
  {
    float v8 = *(float *)(v7 + 284);
  }
  else
  {
    LOBYTE(a3) = *(unsigned char *)(a2 + 34);
    float v8 = (float)LODWORD(a3);
  }
  uint64_t result = [NSNumber numberWithDouble:v8];
  if (result)
  {
    uint64_t v10 = result;
    if (*((char *)a5 + 23) >= 0) {
      uint64_t v11 = a5;
    }
    else {
      uint64_t v11 = (uint64_t *)*a5;
    }
    uint64_t v12 = [NSString stringWithUTF8String:v11];
    return [a1 setValue:v10 forKey:v12];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE21_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = *(void *)(a2 + 128);
  if (v6) {
    uint64_t v7 = *(void *)(v6 + 40);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t result = id_from_value<CGRect,CA::Render::Vector *>(v7);
  if (result)
  {
    uint64_t v9 = result;
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v10 = a4;
    }
    else {
      uint64_t v10 = (uint64_t *)*a4;
    }
    uint64_t v11 = [NSString stringWithUTF8String:v10];
    return [a1 setValue:v9 forKey:v11];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE20_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithLongLong:(*(void *)(a2 + 40) >> 17) & 1];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      float v8 = a4;
    }
    else {
      float v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

CGColor *_ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE19_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, CGColorSpace **a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a2 + 128);
  if (v7) {
    _Q0 = *(_OWORD *)(v7 + 268);
  }
  else {
    __asm { FMOV            V0.4S, #1.0 }
  }
  *(_OWORD *)BOOL v17 = _Q0;
  uint64_t result = cg_color_from_values<CA::Vec4<float>>(v17, *a5);
  if (result)
  {
    uint64_t v14 = result;
    if (*((char *)a4 + 23) >= 0) {
      unint64_t v15 = a4;
    }
    else {
      unint64_t v15 = (uint64_t *)*a4;
    }
    uint64_t v16 = [NSString stringWithUTF8String:v15];
    return (CGColor *)[a1 setValue:v14 forKey:v16];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE18_8__invokeES8_SA_SA_SJ_SM_(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = (unsigned __int16)*(_DWORD *)(a2 + 36) >> 12;
  if (v4 <= 0xC)
  {
    uint64_t v5 = (void *)result;
    uint64_t v6 = off_1E5280910[v4];
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v7 = a4;
    }
    else {
      uint64_t v7 = (uint64_t *)*a4;
    }
    uint64_t v8 = [NSString stringWithUTF8String:v7];
    return [v5 setValue:v6 forKey:v8];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE17_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithLongLong:(*(void *)(a2 + 40) >> 14) & 1];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v8 = a4;
    }
    else {
      uint64_t v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE16_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithLongLong:(*(void *)(a2 + 40) >> 43) & 1];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v8 = a4;
    }
    else {
      uint64_t v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE15_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = *(void *)(a2 + 128);
  if (v6) {
    uint64_t v7 = *(void *)(v6 + 48);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t result = id_from_value<CGRect,CA::Render::Vector *>(v7);
  if (result)
  {
    uint64_t v9 = result;
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v10 = a4;
    }
    else {
      uint64_t v10 = (uint64_t *)*a4;
    }
    uint64_t v11 = [NSString stringWithUTF8String:v10];
    return [a1 setValue:v9 forKey:v11];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE14_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithLongLong:(*(void *)(a2 + 40) >> 16) & 1];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v8 = a4;
    }
    else {
      uint64_t v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE13_8__invokeES8_SA_SA_SJ_SM_(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a2 + 96);
  if (v5)
  {
    uint64_t v7 = (void *)result;
    uint64_t result = ns_object_from_render_object(a5, v5, 0);
    if (result)
    {
      uint64_t v8 = result;
      if (*((char *)a4 + 23) >= 0) {
        uint64_t v9 = a4;
      }
      else {
        uint64_t v9 = (uint64_t *)*a4;
      }
      uint64_t v10 = [NSString stringWithUTF8String:v9];
      return [v7 setValue:v8 forKey:v10];
    }
  }
  return result;
}

CAFilter *_ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE12_8__invokeES8_SA_SA_SJ_SM_(CAFilter *result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a2 + 128);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 88);
    if (v6)
    {
      uint64_t v8 = result;
      uint64_t result = filter_from_render_filter(a5, v6);
      if (result)
      {
        uint64_t v9 = result;
        if (*((char *)a4 + 23) >= 0) {
          uint64_t v10 = a4;
        }
        else {
          uint64_t v10 = (uint64_t *)*a4;
        }
        uint64_t v11 = [NSString stringWithUTF8String:v10];
        return (CAFilter *)[(CAFilter *)v8 setValue:v9 forKey:v11];
      }
    }
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE11_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  long long v6 = *(_OWORD *)(a2 + 80);
  v9[0] = *(_OWORD *)(a2 + 64);
  v9[1] = v6;
  uint64_t result = [MEMORY[0x1E4F29238] valueWithBytes:v9 objCType:"{CGRect={CGPoint=dd}{CGSize=dd}}"];
  if (result)
  {
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v8 = a4;
    }
    else {
      uint64_t v8 = (uint64_t *)*a4;
    }
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(NSString, "stringWithUTF8String:", v8));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE10_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = *(void *)(a2 + 128);
  if (v6) {
    double v7 = *(float *)(v6 + 236);
  }
  else {
    double v7 = 0.0;
  }
  uint64_t result = [NSNumber numberWithDouble:v7];
  if (result)
  {
    uint64_t v9 = result;
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v10 = a4;
    }
    else {
      uint64_t v10 = (uint64_t *)*a4;
    }
    uint64_t v11 = [NSString stringWithUTF8String:v10];
    return [a1 setValue:v9 forKey:v11];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE9_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithLongLong:(*(void *)(a2 + 40) >> 37) & 1];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v8 = a4;
    }
    else {
      uint64_t v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE8_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = *(void *)(a2 + 128);
  if (v6) {
    double v7 = *(float *)(v6 + 232);
  }
  else {
    double v7 = 0.0;
  }
  uint64_t result = [NSNumber numberWithDouble:v7];
  if (result)
  {
    uint64_t v9 = result;
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v10 = a4;
    }
    else {
      uint64_t v10 = (uint64_t *)*a4;
    }
    uint64_t v11 = [NSString stringWithUTF8String:v10];
    return [a1 setValue:v9 forKey:v11];
  }
  return result;
}

void *_ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE7_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  v12[1] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a2 + 128);
  if (v7) {
    uint64_t v7 = *(void *)(v7 + 104);
  }
  v12[0] = v7;
  uint64_t result = id_from_value<void,CA::Render::TypedArray<CA::Render::Filter> *>(a5, v12);
  if (result)
  {
    uint64_t v9 = result;
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v10 = a4;
    }
    else {
      uint64_t v10 = (uint64_t *)*a4;
    }
    uint64_t v11 = [NSString stringWithUTF8String:v10];
    return (void *)[a1 setValue:v9 forKey:v11];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE6_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a2 + 128);
  if (v6) {
    long long v7 = *(_OWORD *)(v6 + 152);
  }
  else {
    long long v7 = 0uLL;
  }
  long long v10 = v7;
  uint64_t result = [MEMORY[0x1E4F29238] valueWithBytes:&v10 objCType:"{CGSize=dd}"];
  if (result)
  {
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v9 = a4;
    }
    else {
      uint64_t v9 = (uint64_t *)*a4;
    }
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(NSString, "stringWithUTF8String:", v9));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE5_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = *(void *)(a2 + 128);
  if (v6) {
    double v7 = *(double *)(v6 + 184);
  }
  else {
    double v7 = 0.0;
  }
  uint64_t result = [NSNumber numberWithDouble:v7];
  if (result)
  {
    uint64_t v9 = result;
    if (*((char *)a4 + 23) >= 0) {
      long long v10 = a4;
    }
    else {
      long long v10 = (uint64_t *)*a4;
    }
    uint64_t v11 = [NSString stringWithUTF8String:v10];
    return [a1 setValue:v9 forKey:v11];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE4_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a2 + 128);
  if (v6)
  {
    int64x2_t v7 = *(int64x2_t *)(v6 + 168);
  }
  else
  {
    double v8 = 0.0;
    if ((*(unsigned char *)(a2 + 45) & 0x40) == 0) {
      double v8 = 0.5;
    }
    int64x2_t v7 = vdupq_lane_s64(*(uint64_t *)&v8, 0);
  }
  int64x2_t v11 = v7;
  uint64_t result = [MEMORY[0x1E4F29238] valueWithBytes:&v11 objCType:"{CGPoint=dd}"];
  if (result)
  {
    if (*((char *)a4 + 23) >= 0) {
      long long v10 = a4;
    }
    else {
      long long v10 = (uint64_t *)*a4;
    }
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(NSString, "stringWithUTF8String:", v10));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithLongLong:(*(void *)(a2 + 40) >> 31) & 1];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      double v8 = a4;
    }
    else {
      double v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithLongLong:(*(void *)(a2 + 40) >> 29) & 1];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      double v8 = a4;
    }
    else {
      double v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithLongLong:(*(void *)(a2 + 40) >> 30) & 1];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      double v8 = a4;
    }
    else {
      double v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithLongLong:(*(void *)(a2 + 40) >> 26) & 1];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      double v8 = a4;
    }
    else {
      double v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render5LayerEERKDavENKUlvE_clEvENUlP7CALayerPKS2_SA_RKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES8_SA_SA_SJ_SM_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithLongLong:(*(void *)(a2 + 40) >> 25) & 1];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      double v8 = a4;
    }
    else {
      double v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

uint64_t _ZZ22get_setters_for_timingIN2CA6Render5LayerE7CALayerEDavENKUlvE_clEv()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  memset(v3, 0, sizeof(v3));
  uint64_t v4 = 1065353216;
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>((uint64_t)v3, 0x40uLL);
  snake_case_to_camel_case("begin_time", 10, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 842, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render5LayerE7CALayerEDavENKUlvE_clEvENUlPS3_PKS2_S8_RKNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES6_S8_S8_SH_SK_;
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("speed", 5, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 843, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render5LayerE7CALayerEDavENKUlvE_clEvENUlPS3_PKS2_S8_RKNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES6_S8_S8_SH_SK_;
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("duration", 8, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 844, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render5LayerE7CALayerEDavENKUlvE_clEvENUlPS3_PKS2_S8_RKNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES6_S8_S8_SH_SK_;
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("time_offset", 11, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 845, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render5LayerE7CALayerEDavENKUlvE_clEvENUlPS3_PKS2_S8_RKNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES6_S8_S8_SH_SK_;
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("autoreverses", 12, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 846, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render5LayerE7CALayerEDavENKUlvE_clEvENUlPS3_PKS2_S8_RKNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES6_S8_S8_SH_SK_;
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("fill_mode", 9, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 856, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render5LayerE7CALayerEDavENKUlvE_clEvENUlPS3_PKS2_S8_RKNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEERK25ReverseSerializationStateE4_8__invokeES6_S8_S8_SH_SK_;
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("repeatDuration", 14, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 860, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render5LayerE7CALayerEDavENKUlvE_clEvENUlPS3_PKS2_S8_RKNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEERK25ReverseSerializationStateE5_8__invokeES6_S8_S8_SH_SK_;
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("repeatCount", 11, __s);
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(*(uint64_t *)&v3[0], *((unint64_t *)&v3[0] + 1), (uint64_t)__p))
  {
    __assert_rtn("operator()", "CAReverseSerialization.mm", 864, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v3, (uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ22get_setters_for_timingIN2CA6Render5LayerE7CALayerEDavENKUlvE_clEvENUlPS3_PKS2_S8_RKNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEERK25ReverseSerializationStateE6_8__invokeES6_S8_S8_SH_SK_;
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__hash_table((uint64_t)&_ZZ22get_setters_for_timingIN2CA6Render5LayerE7CALayerEDavE10timing_map, (uint64_t *)v3);
  return std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)v3);
}

void sub_184836CF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::~__hash_table((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void *_ZZZ22get_setters_for_timingIN2CA6Render5LayerE7CALayerEDavENKUlvE_clEvENUlPS3_PKS2_S8_RKNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEERK25ReverseSerializationStateE6_8__invokeES6_S8_S8_SH_SK_(void *a1, const char *a2)
{
  uint64_t v2 = *((void *)a2 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      if ((*(unsigned char *)(v3 + 13) & 8) == 0)
      {
        double v4 = *(double *)(v3 + 24);
        *(float *)&double v4 = v4;
        return (void *)[a1 setRepeatCount:v4];
      }
    }
  }
  return a1;
}

void *_ZZZ22get_setters_for_timingIN2CA6Render5LayerE7CALayerEDavENKUlvE_clEvENUlPS3_PKS2_S8_RKNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEERK25ReverseSerializationStateE5_8__invokeES6_S8_S8_SH_SK_(void *a1, const char *a2)
{
  uint64_t v2 = *((void *)a2 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      if ((*(unsigned char *)(v3 + 13) & 8) != 0) {
        return (void *)[a1 setRepeatDuration:*(double *)(v3 + 24)];
      }
    }
  }
  return a1;
}

void *_ZZZ22get_setters_for_timingIN2CA6Render5LayerE7CALayerEDavENKUlvE_clEvENUlPS3_PKS2_S8_RKNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEERK25ReverseSerializationStateE4_8__invokeES6_S8_S8_SH_SK_(void *a1, const char *a2)
{
  uint64_t v2 = *((void *)a2 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      int v4 = *(_DWORD *)(v3 + 12);
      if ((v4 & 0x200) != 0)
      {
        if ((v4 & 0x400) != 0) {
          uint64_t v5 = &kCAFillModeBoth;
        }
        else {
          uint64_t v5 = &kCAFillModeForwards;
        }
      }
      else
      {
        if ((v4 & 0x400) == 0) {
          return a1;
        }
        uint64_t v5 = &kCAFillModeBackwards;
      }
      return (void *)[a1 setFillMode:*v5];
    }
  }
  return a1;
}

void *_ZZZ22get_setters_for_timingIN2CA6Render5LayerE7CALayerEDavENKUlvE_clEvENUlPS3_PKS2_S8_RKNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES6_S8_S8_SH_SK_(void *a1, const char *a2)
{
  uint64_t v2 = *((void *)a2 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3) {
      return (void *)[a1 setAutoreverses:(*(_DWORD *)(v3 + 12) >> 8) & 1];
    }
  }
  return a1;
}

void *_ZZZ22get_setters_for_timingIN2CA6Render5LayerE7CALayerEDavENKUlvE_clEvENUlPS3_PKS2_S8_RKNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES6_S8_S8_SH_SK_(void *a1, const char *a2)
{
  uint64_t v2 = *((void *)a2 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3) {
      return (void *)[a1 setTimeOffset:*(double *)(v3 + 48)];
    }
  }
  return a1;
}

void *_ZZZ22get_setters_for_timingIN2CA6Render5LayerE7CALayerEDavENKUlvE_clEvENUlPS3_PKS2_S8_RKNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES6_S8_S8_SH_SK_(void *a1, const char *a2)
{
  uint64_t v2 = *((void *)a2 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3) {
      return (void *)[a1 setDuration:*(double *)(v3 + 32)];
    }
  }
  return a1;
}

void *_ZZZ22get_setters_for_timingIN2CA6Render5LayerE7CALayerEDavENKUlvE_clEvENUlPS3_PKS2_S8_RKNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES6_S8_S8_SH_SK_(void *a1, const char *a2, double a3)
{
  uint64_t v3 = *((void *)a2 + 16);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      LODWORD(a3) = *(_DWORD *)(v4 + 16);
      return (void *)[a1 setSpeed:a3];
    }
  }
  return a1;
}

void *_ZZZ22get_setters_for_timingIN2CA6Render5LayerE7CALayerEDavENKUlvE_clEvENUlPS3_PKS2_S8_RKNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES6_S8_S8_SH_SK_(void *a1, const char *a2)
{
  uint64_t v2 = *((void *)a2 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3) {
      return (void *)[a1 setBeginTime:*(double *)(v3 + 40)];
    }
  }
  return a1;
}

void ___Z20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDav_block_invoke()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__rehash<true>(vcvtps_u32_f32(16.0 / *(float *)&dword_1E8F879C8));
  std::string::basic_string[abi:nn180100]<0>(__p, "instanceAlphaOffset");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p)) {
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1453, "\"Duplicated Entry !!\" && map.map.find (\"instanceAlphaOffset\") == map.map.end ()");
  }
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "instanceAlphaOffset");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavEUb_ENUlP17CAReplicatorLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES7_S9_SC_SL_SO_;
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "instanceBlueOffset");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p)) {
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1454, "\"Duplicated Entry !!\" && map.map.find (\"instanceBlueOffset\") == map.map.end ()");
  }
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "instanceBlueOffset");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavEUb_ENUlP17CAReplicatorLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES7_S9_SC_SL_SO_;
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "instanceCount");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p)) {
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1455, "\"Duplicated Entry !!\" && map.map.find (\"instanceCount\") == map.map.end ()");
  }
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "instanceCount");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavEUb_ENUlP17CAReplicatorLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES7_S9_SC_SL_SO_;
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "instanceDelay");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p)) {
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1456, "\"Duplicated Entry !!\" && map.map.find (\"instanceDelay\") == map.map.end ()");
  }
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "instanceDelay");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavEUb_ENUlP17CAReplicatorLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES7_S9_SC_SL_SO_;
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "instanceGreenOffset");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p)) {
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1457, "\"Duplicated Entry !!\" && map.map.find (\"instanceGreenOffset\") == map.map.end ()");
  }
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "instanceGreenOffset");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavEUb_ENUlP17CAReplicatorLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES7_S9_SC_SL_SO_;
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "instanceRedOffset");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p)) {
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1458, "\"Duplicated Entry !!\" && map.map.find (\"instanceRedOffset\") == map.map.end ()");
  }
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "instanceRedOffset");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavEUb_ENUlP17CAReplicatorLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE4_8__invokeES7_S9_SC_SL_SO_;
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "instanceColor");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p)) {
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1459, "\"Duplicated Entry !!\" && map.map.find (\"instanceColor\") == map.map.end ()");
  }
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "instanceColor");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavEUb_ENUlP17CAReplicatorLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE5_8__invokeES7_S9_SC_SL_SO_;
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "instanceTransform");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p)) {
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1460, "\"Duplicated Entry !!\" && map.map.find (\"instanceTransform\") == map.map.end ()");
  }
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "instanceTransform");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavEUb_ENUlP17CAReplicatorLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE6_8__invokeES7_S9_SC_SL_SO_;
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("preserves_depth", 15, (char *)__p);
  std::string::basic_string[abi:nn180100]<0>(v0, (char *)__p);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)v0)) {
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1464, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v1 < 0) {
    operator delete(v0[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v0, (char *)__p);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v0, (uint64_t)v0)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavEUb_ENUlP17CAReplicatorLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE7_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0) {
    operator delete(v0[0]);
  }
}

void sub_184837444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__rehash<true>(size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  size_t v2 = *((void *)&_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 1);
  if (prime <= *((void *)&_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 1))
  {
    if (prime >= *((void *)&_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 1)) {
      return;
    }
    unint64_t v9 = vcvtps_u32_f32((float)(unint64_t)qword_1E8F879C0 / *(float *)&dword_1E8F879C8);
    if (*((void *)&_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 1) < 3uLL
      || (uint8x8_t v10 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3
                                               + 8)),
          v10.i16[0] = vaddlv_u8(v10),
          v10.u32[0] > 1uLL))
    {
      unint64_t v9 = std::__next_prime(v9);
    }
    else
    {
      uint64_t v11 = 1 << -(char)__clz(v9 - 1);
      if (v9 >= 2) {
        unint64_t v9 = v11;
      }
    }
    if (prime <= v9) {
      size_t prime = v9;
    }
    if (prime >= v2) {
      return;
    }
    if (!prime)
    {
      uint64_t v14 = (void *)_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3;
      *(void *)&_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 = 0;
      if (v14) {
        operator delete(v14);
      }
      *((void *)&_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 1) = 0;
      return;
    }
  }
  if (prime >> 61) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  char v3 = operator new(8 * prime);
  uint64_t v4 = (void *)_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3;
  *(void *)&_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 = v3;
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = 0;
  *((void *)&_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 1) = prime;
  do
    *(void *)(_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 8 * v5++) = 0;
  while (prime != v5);
  uint64_t v6 = (void **)qword_1E8F879B8;
  if (qword_1E8F879B8)
  {
    size_t v7 = *(void *)(qword_1E8F879B8 + 8);
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      if (v7 >= prime) {
        v7 %= prime;
      }
    }
    else
    {
      v7 &= prime - 1;
    }
    *(void *)(_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 8 * v7) = &qword_1E8F879B8;
    for (i = *v6; i; size_t v7 = v13)
    {
      size_t v13 = i[1];
      if (v8.u32[0] > 1uLL)
      {
        if (v13 >= prime) {
          v13 %= prime;
        }
      }
      else
      {
        v13 &= prime - 1;
      }
      if (v13 != v7)
      {
        if (!*(void *)(_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 8 * v13))
        {
          *(void *)(_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 8 * v13) = v6;
          goto LABEL_31;
        }
        __CFString *v6 = (void *)*i;
        *uint64_t i = **(void **)(_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 8 * v13);
        **(void **)(_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 8 * v13) = i;
        uint64_t i = v6;
      }
      size_t v13 = v7;
LABEL_31:
      uint64_t v6 = (void **)i;
      uint64_t i = (void *)*i;
    }
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(uint64_t a1)
{
  char v1 = (unsigned __int8 *)a1;
  unint64_t v2 = *(void *)(a1 + 8);
  if (*(char *)(a1 + 23) >= 0)
  {
    unint64_t v3 = *(unsigned __int8 *)(a1 + 23);
  }
  else
  {
    a1 = *(void *)a1;
    unint64_t v3 = v2;
  }
  unint64_t v4 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t *)a1, v3);
  unint64_t v5 = *((void *)&_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 1);
  if (!*((void *)&_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 1)) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 8));
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *((void *)&_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 1)) {
      unint64_t v9 = v4 % *((void *)&_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 1);
    }
  }
  else
  {
    unint64_t v9 = (*((void *)&_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 1) - 1) & v4;
  }
  uint8x8_t v10 = *(unsigned __int8 ***)(_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 8 * v9);
  if (!v10) {
    return 0;
  }
  for (uint64_t i = *v10; i; uint64_t i = *(unsigned __int8 **)i)
  {
    unint64_t v12 = *((void *)i + 1);
    if (v12 == v6)
    {
      if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, v1)) {
        return i;
      }
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= v5) {
          v12 %= v5;
        }
      }
      else
      {
        v12 &= v5 - 1;
      }
      if (v12 != v9) {
        return 0;
      }
    }
  }
  return i;
}

void *std::__hash_table<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (unsigned __int8 *)a1;
  unint64_t v4 = *(void *)(a1 + 8);
  if (*(char *)(a1 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a1 + 23);
  }
  else
  {
    a1 = *(void *)a1;
    unint64_t v5 = v4;
  }
  unint64_t v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t *)a1, v5);
  unint64_t v7 = v6;
  unint64_t v8 = *((void *)&_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 1);
  if (*((void *)&_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 1))
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3
                                        + 8));
    v9.i16[0] = vaddlv_u8(v9);
    unint64_t v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v11 = v6;
      if (v6 >= *((void *)&_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 1)) {
        unint64_t v11 = v6 % *((void *)&_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 1);
      }
    }
    else
    {
      unint64_t v11 = (*((void *)&_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 1) - 1) & v6;
    }
    unint64_t v12 = *(void ***)(_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 8 * v11);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(void **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v7)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)i + 16, v3)) {
            return i;
          }
        }
        else
        {
          if (v10 > 1)
          {
            if (v14 >= v8) {
              v14 %= v8;
            }
          }
          else
          {
            v14 &= v8 - 1;
          }
          if (v14 != v11) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t i = operator new(0x30uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v7;
  *((_OWORD *)i + 1) = *(_OWORD *)a2;
  uint64_t v15 = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *((void *)i + 4) = v15;
  *((void *)i + 5) = 0;
  float v16 = (float)(unint64_t)(qword_1E8F879C0 + 1);
  if (!v8 || (float)(*(float *)&dword_1E8F879C8 * (float)v8) < v16)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v16 / *(float *)&dword_1E8F879C8);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAReplicatorLayer *,CA::Render::ReplicatorLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__rehash<true>(v20);
    unint64_t v8 = *((void *)&_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 1);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= *((void *)&_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 1)) {
        unint64_t v11 = v7 % *((void *)&_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 1);
      }
      else {
        unint64_t v11 = v7;
      }
    }
    else
    {
      unint64_t v11 = (*((void *)&_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 1) - 1) & v7;
    }
  }
  uint64_t v21 = _ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3;
  BOOL v22 = *(void **)(_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 8 * v11);
  if (v22)
  {
    *(void *)uint64_t i = *v22;
LABEL_41:
    *BOOL v22 = i;
    goto LABEL_42;
  }
  *(void *)uint64_t i = qword_1E8F879B8;
  qword_1E8F879B8 = (uint64_t)i;
  *(void *)(v21 + 8 * v11) = &qword_1E8F879B8;
  if (*(void *)i)
  {
    unint64_t v23 = *(void *)(*(void *)i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8) {
        v23 %= v8;
      }
    }
    else
    {
      v23 &= v8 - 1;
    }
    BOOL v22 = (void *)(_ZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavE3map_3 + 8 * v23);
    goto LABEL_41;
  }
LABEL_42:
  ++qword_1E8F879C0;
  return i;
}

void sub_184837A38(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

void *_ZZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavEUb_ENUlP17CAReplicatorLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE7_8__invokeES7_S9_SC_SL_SO_(void *a1, const char *a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 13)) {
    return (void *)[a1 setPreservesDepth:1];
  }
  return a1;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavEUb_ENUlP17CAReplicatorLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE6_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  int v10 = 330;
  uint8x8_t v9 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t, unsigned char *, _OWORD **))(*(void *)a2 + 136))(a2, 1, &v10, 16, v11, &v9);
  if (result == 16)
  {
    long long v4 = v9[1];
    v8[0] = *v9;
    v8[1] = v4;
    long long v5 = v9[3];
    _OWORD v8[2] = v9[2];
    v8[3] = v5;
    long long v6 = v9[5];
    v8[4] = v9[4];
    v8[5] = v6;
    long long v7 = v9[7];
    v8[6] = v9[6];
    v8[7] = v7;
    return [a1 setInstanceTransform:v8];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavEUb_ENUlP17CAReplicatorLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE5_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, CGColorSpace **a5)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int v9 = 325;
  unint64_t v8 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t, unsigned char *, double **))(*(void *)a2 + 136))(a2, 1, &v9, 4, v10, &v8);
  if (result == 4) {
    return objc_msgSend(a1, "setInstanceColor:", cg_color_from_values<double const*>(v8, *a5));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavEUb_ENUlP17CAReplicatorLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE4_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v6 = 329;
  long long v5 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t, unsigned char *, double **))(*(void *)a2 + 136))(a2, 1, &v6, 4, v7, &v5);
  if (result == 1)
  {
    double v4 = *v5;
    *(float *)&double v4 = *v5;
    return [a1 setInstanceRedOffset:v4];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavEUb_ENUlP17CAReplicatorLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v6 = 328;
  long long v5 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t, unsigned char *, double **))(*(void *)a2 + 136))(a2, 1, &v6, 4, v7, &v5);
  if (result == 1)
  {
    double v4 = *v5;
    *(float *)&double v4 = *v5;
    return [a1 setInstanceGreenOffset:v4];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavEUb_ENUlP17CAReplicatorLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int v5 = 327;
  double v4 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t, unsigned char *, double **))(*(void *)a2 + 136))(a2, 1, &v5, 4, v6, &v4);
  if (result == 1) {
    return [a1 setInstanceDelay:*v4];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavEUb_ENUlP17CAReplicatorLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int v5 = 326;
  double v4 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t, unsigned char *, double **))(*(void *)a2 + 136))(a2, 1, &v5, 4, v6, &v4);
  if (result == 1) {
    return [a1 setInstanceCount:(uint64_t)*v4];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavEUb_ENUlP17CAReplicatorLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v6 = 324;
  int v5 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t, unsigned char *, double **))(*(void *)a2 + 136))(a2, 1, &v6, 4, v7, &v5);
  if (result == 1)
  {
    double v4 = *v5;
    *(float *)&double v4 = *v5;
    return [a1 setInstanceBlueOffset:v4];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render15ReplicatorLayerEERKDavEUb_ENUlP17CAReplicatorLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v6 = 323;
  int v5 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t, unsigned char *, double **))(*(void *)a2 + 136))(a2, 1, &v6, 4, v7, &v5);
  if (result == 1)
  {
    double v4 = *v5;
    *(float *)&double v4 = *v5;
    return [a1 setInstanceAlphaOffset:v4];
  }
  return result;
}

void ___Z20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDav_block_invoke()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__rehash<true>(vcvtps_u32_f32(32.0 / *(float *)&dword_1E8F87990));
  snake_case_to_camel_case("group_namespace", 15, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p)) {
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1416, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("allows_in_place_filtering", 25, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p)) {
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1418, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("backdrop_rect", 13, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p)) {
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1419, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("capture_only", 12, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p)) {
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1420, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("group_name", 10, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p)) {
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1421, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("ignores_screen_clip", 19, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p)) {
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1422, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE4_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("margin_width", 12, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p)) {
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1423, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE5_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("reduces_capture_bit_depth", 25, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p)) {
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1424, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE6_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("scale", 5, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p)) {
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1425, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE7_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("zoom", 4, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p)) {
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1426, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE8_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v2, "enabled");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)v2)) {
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1428, "\"Duplicated Entry !!\" && map.map.find (\"enabled\") == map.map.end ()");
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v2, "enabled");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v2, (uint64_t)v2)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE9_8__invokeES7_S9_SC_SL_SO_;
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v2, "tracksLuma");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)v2)) {
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1429, "\"Duplicated Entry !!\" && map.map.find (\"tracksLuma\") == map.map.end ()");
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v2, "tracksLuma");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v2, (uint64_t)v2)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE10_8__invokeES7_S9_SC_SL_SO_;
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v2, "bleedAmount");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)v2)) {
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1431, "\"Duplicated Entry !!\" && map.map.find (\"bleedAmount\") == map.map.end ()");
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v2, "bleedAmount");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v2, (uint64_t)v2)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE11_8__invokeES7_S9_SC_SL_SO_;
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v2, "delegate");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)v2)) {
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1432, "\"Duplicated Entry !!\" && map.map.find (\"delegate\") == map.map.end ()");
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v2, "delegate");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v2, (uint64_t)v2)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE12_8__invokeES7_S9_SC_SL_SO_;
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v2, "disablesOccludedBackdropBlurs");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)v2)) {
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1433, "\"Duplicated Entry !!\" && map.map.find (\"disablesOccludedBackdropBlurs\") == map.map.end ()");
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v2, "disablesOccludedBackdropBlurs");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v2, (uint64_t)v2)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE13_8__invokeES7_S9_SC_SL_SO_;
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v2, "ignoresOffscreenGroups");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)v2)) {
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1434, "\"Duplicated Entry !!\" && map.map.find (\"ignoresOffscreenGroups\") == map.map.end ()");
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v2, "ignoresOffscreenGroups");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v2, (uint64_t)v2)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE14_8__invokeES7_S9_SC_SL_SO_;
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v2, "substituteColor");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)v2)) {
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1435, "\"Duplicated Entry !!\" && map.map.find (\"substituteColor\") == map.map.end ()");
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v2, "substituteColor");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v2, (uint64_t)v2)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE15_8__invokeES7_S9_SC_SL_SO_;
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v2, "usesGlobalGroupNamespace");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)v2)) {
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1436, "\"Duplicated Entry !!\" && map.map.find (\"usesGlobalGroupNamespace\") == map.map.end ()");
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v2, "usesGlobalGroupNamespace");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v2, (uint64_t)v2)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE16_8__invokeES7_S9_SC_SL_SO_;
  if (v3 < 0) {
    operator delete(v2[0]);
  }
}

void sub_184838AFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__rehash<true>(size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  size_t v2 = *((void *)&_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 1);
  if (prime <= *((void *)&_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 1))
  {
    if (prime >= *((void *)&_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 1)) {
      return;
    }
    unint64_t v9 = vcvtps_u32_f32((float)(unint64_t)qword_1E8F87988 / *(float *)&dword_1E8F87990);
    if (*((void *)&_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 1) < 3uLL
      || (uint8x8_t v10 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2
                                               + 8)),
          v10.i16[0] = vaddlv_u8(v10),
          v10.u32[0] > 1uLL))
    {
      unint64_t v9 = std::__next_prime(v9);
    }
    else
    {
      uint64_t v11 = 1 << -(char)__clz(v9 - 1);
      if (v9 >= 2) {
        unint64_t v9 = v11;
      }
    }
    if (prime <= v9) {
      size_t prime = v9;
    }
    if (prime >= v2) {
      return;
    }
    if (!prime)
    {
      unint64_t v14 = (void *)_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2;
      *(void *)&_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 = 0;
      if (v14) {
        operator delete(v14);
      }
      *((void *)&_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 1) = 0;
      return;
    }
  }
  if (prime >> 61) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  char v3 = operator new(8 * prime);
  uint64_t v4 = (void *)_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2;
  *(void *)&_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 = v3;
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = 0;
  *((void *)&_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 1) = prime;
  do
    *(void *)(_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 8 * v5++) = 0;
  while (prime != v5);
  int v6 = (void **)qword_1E8F87980;
  if (qword_1E8F87980)
  {
    size_t v7 = *(void *)(qword_1E8F87980 + 8);
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      if (v7 >= prime) {
        v7 %= prime;
      }
    }
    else
    {
      v7 &= prime - 1;
    }
    *(void *)(_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 8 * v7) = &qword_1E8F87980;
    for (i = *v6; i; size_t v7 = v13)
    {
      size_t v13 = i[1];
      if (v8.u32[0] > 1uLL)
      {
        if (v13 >= prime) {
          v13 %= prime;
        }
      }
      else
      {
        v13 &= prime - 1;
      }
      if (v13 != v7)
      {
        if (!*(void *)(_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 8 * v13))
        {
          *(void *)(_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 8 * v13) = v6;
          goto LABEL_31;
        }
        __CFString *v6 = (void *)*i;
        *uint64_t i = **(void **)(_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 8 * v13);
        **(void **)(_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 8 * v13) = i;
        uint64_t i = v6;
      }
      size_t v13 = v7;
LABEL_31:
      int v6 = (void **)i;
      uint64_t i = (void *)*i;
    }
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(uint64_t a1)
{
  char v1 = (unsigned __int8 *)a1;
  unint64_t v2 = *(void *)(a1 + 8);
  if (*(char *)(a1 + 23) >= 0)
  {
    unint64_t v3 = *(unsigned __int8 *)(a1 + 23);
  }
  else
  {
    a1 = *(void *)a1;
    unint64_t v3 = v2;
  }
  unint64_t v4 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t *)a1, v3);
  unint64_t v5 = *((void *)&_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 1);
  if (!*((void *)&_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 1)) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 8));
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *((void *)&_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 1)) {
      unint64_t v9 = v4 % *((void *)&_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 1);
    }
  }
  else
  {
    unint64_t v9 = (*((void *)&_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 1) - 1) & v4;
  }
  uint8x8_t v10 = *(unsigned __int8 ***)(_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 8 * v9);
  if (!v10) {
    return 0;
  }
  for (uint64_t i = *v10; i; uint64_t i = *(unsigned __int8 **)i)
  {
    unint64_t v12 = *((void *)i + 1);
    if (v12 == v6)
    {
      if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, v1)) {
        return i;
      }
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= v5) {
          v12 %= v5;
        }
      }
      else
      {
        v12 &= v5 - 1;
      }
      if (v12 != v9) {
        return 0;
      }
    }
  }
  return i;
}

void *std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (unsigned __int8 *)a1;
  unint64_t v4 = *(void *)(a1 + 8);
  if (*(char *)(a1 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a1 + 23);
  }
  else
  {
    a1 = *(void *)a1;
    unint64_t v5 = v4;
  }
  unint64_t v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t *)a1, v5);
  unint64_t v7 = v6;
  unint64_t v8 = *((void *)&_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 1);
  if (*((void *)&_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 1))
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 8));
    v9.i16[0] = vaddlv_u8(v9);
    unint64_t v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v11 = v6;
      if (v6 >= *((void *)&_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 1)) {
        unint64_t v11 = v6 % *((void *)&_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 1);
      }
    }
    else
    {
      unint64_t v11 = (*((void *)&_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 1) - 1) & v6;
    }
    unint64_t v12 = *(void ***)(_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 8 * v11);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(void **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v7)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)i + 16, v3)) {
            return i;
          }
        }
        else
        {
          if (v10 > 1)
          {
            if (v14 >= v8) {
              v14 %= v8;
            }
          }
          else
          {
            v14 &= v8 - 1;
          }
          if (v14 != v11) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t i = operator new(0x30uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v7;
  *((_OWORD *)i + 1) = *(_OWORD *)a2;
  uint64_t v15 = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *((void *)i + 4) = v15;
  *((void *)i + 5) = 0;
  float v16 = (float)(unint64_t)(qword_1E8F87988 + 1);
  if (!v8 || (float)(*(float *)&dword_1E8F87990 * (float)v8) < v16)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v16 / *(float *)&dword_1E8F87990);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CABackdropLayer *,CA::Render::BackdropLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__rehash<true>(v20);
    unint64_t v8 = *((void *)&_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 1);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= *((void *)&_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 1)) {
        unint64_t v11 = v7 % *((void *)&_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 1);
      }
      else {
        unint64_t v11 = v7;
      }
    }
    else
    {
      unint64_t v11 = (*((void *)&_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 1) - 1) & v7;
    }
  }
  uint64_t v21 = _ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2;
  BOOL v22 = *(void **)(_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 8 * v11);
  if (v22)
  {
    *(void *)uint64_t i = *v22;
LABEL_41:
    *BOOL v22 = i;
    goto LABEL_42;
  }
  *(void *)uint64_t i = qword_1E8F87980;
  qword_1E8F87980 = (uint64_t)i;
  *(void *)(v21 + 8 * v11) = &qword_1E8F87980;
  if (*(void *)i)
  {
    unint64_t v23 = *(void *)(*(void *)i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8) {
        v23 %= v8;
      }
    }
    else
    {
      v23 &= v8 - 1;
    }
    BOOL v22 = (void *)(_ZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavE3map_2 + 8 * v23);
    goto LABEL_41;
  }
LABEL_42:
  ++qword_1E8F87988;
  return i;
}

void sub_184839138(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE10_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2)
{
  uint64_t result = [NSNumber numberWithLongLong:((unint64_t)*(unsigned int *)(a2 + 12) >> 10) & 1];
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = [NSString stringWithUTF8String:"tracksLuma"];
    return [a1 setValue:v4 forKey:v5];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE9_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2)
{
  uint64_t result = [NSNumber numberWithLongLong:((unint64_t)*(unsigned int *)(a2 + 12) >> 8) & 1];
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = [NSString stringWithUTF8String:"enabled"];
    return [a1 setValue:v4 forKey:v5];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE8_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithDouble:*(float *)(a2 + 40)];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      unint64_t v8 = a4;
    }
    else {
      unint64_t v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE7_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithDouble:*(float *)(a2 + 32)];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      unint64_t v8 = a4;
    }
    else {
      unint64_t v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE6_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithLongLong:((unint64_t)*(unsigned int *)(a2 + 12) >> 13) & 1];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      unint64_t v8 = a4;
    }
    else {
      unint64_t v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE5_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithDouble:*(float *)(a2 + 36)];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      unint64_t v8 = a4;
    }
    else {
      unint64_t v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE4_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithLongLong:((unint64_t)*(unsigned int *)(a2 + 12) >> 16) & 1];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      unint64_t v8 = a4;
    }
    else {
      unint64_t v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES7_S9_SC_SL_SO_(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    unint64_t v6 = (void *)result;
    uint64_t result = [NSString stringWithUTF8String:v4 + 28];
    if (result)
    {
      uint64_t v7 = result;
      if (*((char *)a4 + 23) >= 0) {
        unint64_t v8 = a4;
      }
      else {
        unint64_t v8 = (uint64_t *)*a4;
      }
      uint64_t v9 = [NSString stringWithUTF8String:v8];
      return [v6 setValue:v7 forKey:v9];
    }
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithLongLong:((unint64_t)*(unsigned int *)(a2 + 12) >> 12) & 1];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      unint64_t v8 = a4;
    }
    else {
      unint64_t v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  long long v6 = *(_OWORD *)(a2 + 64);
  v9[0] = *(_OWORD *)(a2 + 48);
  v9[1] = v6;
  uint64_t result = [MEMORY[0x1E4F29238] valueWithBytes:v9 objCType:"{CGRect={CGPoint=dd}{CGSize=dd}}"];
  if (result)
  {
    if (*((char *)a4 + 23) >= 0) {
      unint64_t v8 = a4;
    }
    else {
      unint64_t v8 = (uint64_t *)*a4;
    }
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(NSString, "stringWithUTF8String:", v8));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithLongLong:((unint64_t)*(unsigned int *)(a2 + 12) >> 9) & 1];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      unint64_t v8 = a4;
    }
    else {
      unint64_t v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

void *_ZZZ20get_setters_for_typeIN2CA6Render13BackdropLayerEERKDavEUb_ENUlP15CABackdropLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES7_S9_SC_SL_SO_(void *a1, const char *a2)
{
  unint64_t v2 = *((unsigned __int8 *)a2 + 80);
  if (v2 <= 2) {
    return (void *)[a1 setGroupNamespace:*off_1E5273570[v2]];
  }
  return a1;
}

void ___Z20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDav_block_invoke()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__rehash<true>(vcvtps_u32_f32(16.0 / *(float *)&dword_1E8F87958));
  snake_case_to_camel_case("stroke_start", 12, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p)) {
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1357, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavEUb_ENUlP12CAShapeLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("stroke_end", 10, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p)) {
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1358, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavEUb_ENUlP12CAShapeLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("line_width", 10, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p)) {
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1359, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavEUb_ENUlP12CAShapeLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("miter_limit", 11, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p)) {
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1360, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavEUb_ENUlP12CAShapeLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("path", 4, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p)) {
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1361, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavEUb_ENUlP12CAShapeLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v2, "lineDashPhase");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)v2)) {
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1362, "\"Duplicated Entry !!\" && map.map.find (\"lineDashPhase\") == map.map.end ()");
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v2, "lineDashPhase");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v2, (uint64_t)v2)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavEUb_ENUlP12CAShapeLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE4_8__invokeES7_S9_SC_SL_SO_;
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v2, "lineDashPattern");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)v2)) {
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1363, "\"Duplicated Entry !!\" && map.map.find (\"lineDashPattern\") == map.map.end ()");
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v2, "lineDashPattern");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v2, (uint64_t)v2)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavEUb_ENUlP12CAShapeLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE5_8__invokeES7_S9_SC_SL_SO_;
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  snake_case_to_camel_case("fill_color", 10, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p)) {
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1368, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavEUb_ENUlP12CAShapeLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE6_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("stroke_color", 12, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p)) {
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1372, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavEUb_ENUlP12CAShapeLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE7_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("fill_rule", 9, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p)) {
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1380, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavEUb_ENUlP12CAShapeLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE8_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("line_join", 9, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p)) {
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1388, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavEUb_ENUlP12CAShapeLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE9_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("line_cap", 8, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p)) {
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1396, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavEUb_ENUlP12CAShapeLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE10_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_184839F20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__rehash<true>(size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  size_t v2 = *((void *)&_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 1);
  if (prime <= *((void *)&_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 1))
  {
    if (prime >= *((void *)&_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 1)) {
      return;
    }
    unint64_t v9 = vcvtps_u32_f32((float)(unint64_t)qword_1E8F87950 / *(float *)&dword_1E8F87958);
    if (*((void *)&_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 1) < 3uLL
      || (uint8x8_t v10 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1
                                               + 8)),
          v10.i16[0] = vaddlv_u8(v10),
          v10.u32[0] > 1uLL))
    {
      unint64_t v9 = std::__next_prime(v9);
    }
    else
    {
      uint64_t v11 = 1 << -(char)__clz(v9 - 1);
      if (v9 >= 2) {
        unint64_t v9 = v11;
      }
    }
    if (prime <= v9) {
      size_t prime = v9;
    }
    if (prime >= v2) {
      return;
    }
    if (!prime)
    {
      unint64_t v14 = (void *)_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1;
      *(void *)&_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 = 0;
      if (v14) {
        operator delete(v14);
      }
      *((void *)&_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 1) = 0;
      return;
    }
  }
  if (prime >> 61) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  char v3 = operator new(8 * prime);
  uint64_t v4 = (void *)_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1;
  *(void *)&_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 = v3;
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = 0;
  *((void *)&_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 1) = prime;
  do
    *(void *)(_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 8 * v5++) = 0;
  while (prime != v5);
  long long v6 = (void **)qword_1E8F87948;
  if (qword_1E8F87948)
  {
    size_t v7 = *(void *)(qword_1E8F87948 + 8);
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      if (v7 >= prime) {
        v7 %= prime;
      }
    }
    else
    {
      v7 &= prime - 1;
    }
    *(void *)(_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 8 * v7) = &qword_1E8F87948;
    for (i = *v6; i; size_t v7 = v13)
    {
      size_t v13 = i[1];
      if (v8.u32[0] > 1uLL)
      {
        if (v13 >= prime) {
          v13 %= prime;
        }
      }
      else
      {
        v13 &= prime - 1;
      }
      if (v13 != v7)
      {
        if (!*(void *)(_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 8 * v13))
        {
          *(void *)(_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 8 * v13) = v6;
          goto LABEL_31;
        }
        void *v6 = (void *)*i;
        *uint64_t i = **(void **)(_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 8 * v13);
        **(void **)(_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 8 * v13) = i;
        uint64_t i = v6;
      }
      size_t v13 = v7;
LABEL_31:
      long long v6 = (void **)i;
      uint64_t i = (void *)*i;
    }
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(uint64_t a1)
{
  char v1 = (unsigned __int8 *)a1;
  unint64_t v2 = *(void *)(a1 + 8);
  if (*(char *)(a1 + 23) >= 0)
  {
    unint64_t v3 = *(unsigned __int8 *)(a1 + 23);
  }
  else
  {
    a1 = *(void *)a1;
    unint64_t v3 = v2;
  }
  unint64_t v4 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t *)a1, v3);
  unint64_t v5 = *((void *)&_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 1);
  if (!*((void *)&_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 1)) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 8));
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *((void *)&_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 1)) {
      unint64_t v9 = v4 % *((void *)&_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 1);
    }
  }
  else
  {
    unint64_t v9 = (*((void *)&_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 1) - 1) & v4;
  }
  uint8x8_t v10 = *(unsigned __int8 ***)(_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  for (uint64_t i = *v10; i; uint64_t i = *(unsigned __int8 **)i)
  {
    unint64_t v12 = *((void *)i + 1);
    if (v12 == v6)
    {
      if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, v1)) {
        return i;
      }
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= v5) {
          v12 %= v5;
        }
      }
      else
      {
        v12 &= v5 - 1;
      }
      if (v12 != v9) {
        return 0;
      }
    }
  }
  return i;
}

void *std::__hash_table<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (unsigned __int8 *)a1;
  unint64_t v4 = *(void *)(a1 + 8);
  if (*(char *)(a1 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a1 + 23);
  }
  else
  {
    a1 = *(void *)a1;
    unint64_t v5 = v4;
  }
  unint64_t v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t *)a1, v5);
  unint64_t v7 = v6;
  unint64_t v8 = *((void *)&_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 1);
  if (*((void *)&_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 1))
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 8));
    v9.i16[0] = vaddlv_u8(v9);
    unint64_t v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v11 = v6;
      if (v6 >= *((void *)&_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 1)) {
        unint64_t v11 = v6 % *((void *)&_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 1);
      }
    }
    else
    {
      unint64_t v11 = (*((void *)&_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 1) - 1) & v6;
    }
    unint64_t v12 = *(void ***)(_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 8 * v11);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(void **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v7)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)i + 16, v3)) {
            return i;
          }
        }
        else
        {
          if (v10 > 1)
          {
            if (v14 >= v8) {
              v14 %= v8;
            }
          }
          else
          {
            v14 &= v8 - 1;
          }
          if (v14 != v11) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t i = operator new(0x30uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v7;
  *((_OWORD *)i + 1) = *(_OWORD *)a2;
  uint64_t v15 = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *((void *)i + 4) = v15;
  *((void *)i + 5) = 0;
  float v16 = (float)(unint64_t)(qword_1E8F87950 + 1);
  if (!v8 || (float)(*(float *)&dword_1E8F87958 * (float)v8) < v16)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v16 / *(float *)&dword_1E8F87958);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAShapeLayer *,CA::Render::ShapeLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__rehash<true>(v20);
    unint64_t v8 = *((void *)&_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 1);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= *((void *)&_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 1)) {
        unint64_t v11 = v7 % *((void *)&_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 1);
      }
      else {
        unint64_t v11 = v7;
      }
    }
    else
    {
      unint64_t v11 = (*((void *)&_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 1) - 1) & v7;
    }
  }
  uint64_t v21 = _ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1;
  BOOL v22 = *(void **)(_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 8 * v11);
  if (v22)
  {
    *(void *)uint64_t i = *v22;
LABEL_41:
    *BOOL v22 = i;
    goto LABEL_42;
  }
  *(void *)uint64_t i = qword_1E8F87948;
  qword_1E8F87948 = (uint64_t)i;
  *(void *)(v21 + 8 * v11) = &qword_1E8F87948;
  if (*(void *)i)
  {
    unint64_t v23 = *(void *)(*(void *)i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8) {
        v23 %= v8;
      }
    }
    else
    {
      v23 &= v8 - 1;
    }
    BOOL v22 = (void *)(_ZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavE3map_1 + 8 * v23);
    goto LABEL_41;
  }
LABEL_42:
  ++qword_1E8F87950;
  return i;
}

void sub_18483A52C(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

void *_ZZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavEUb_ENUlP12CAShapeLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE10_8__invokeES7_S9_SC_SL_SO_(void *a1, const char *a2)
{
  int v2 = *((_DWORD *)a2 + 30);
  if (BYTE2(v2) <= 2u) {
    return (void *)[a1 setLineCap:*off_1E5273558[BYTE2(v2)]];
  }
  return a1;
}

void *_ZZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavEUb_ENUlP12CAShapeLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE9_8__invokeES7_S9_SC_SL_SO_(void *a1, const char *a2)
{
  int v2 = *((_DWORD *)a2 + 30);
  if (BYTE1(v2) <= 2u) {
    return (void *)[a1 setLineJoin:*off_1E5273540[BYTE1(v2)]];
  }
  return a1;
}

void *_ZZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavEUb_ENUlP12CAShapeLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE8_8__invokeES7_S9_SC_SL_SO_(void *a1, const char *a2)
{
  if (a2[120])
  {
    if (a2[120] != 1) {
      return a1;
    }
    int v2 = &kCAFillRuleEvenOdd;
  }
  else
  {
    int v2 = &kCAFillRuleNonZero;
  }
  return (void *)[a1 setFillRule:*v2];
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavEUb_ENUlP12CAShapeLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE7_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, CGColorSpace **a5)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a2 + 64);
  *(_OWORD *)uint8x8_t v9 = *(_OWORD *)(a2 + 48);
  unint64_t v7 = cg_color_from_pattern_or_color(a5, v6, v9);

  return [a1 setValue:v7 forKey:@"strokeColor"];
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavEUb_ENUlP12CAShapeLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE6_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, CGColorSpace **a5)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a2 + 40);
  *(_OWORD *)uint8x8_t v9 = *(_OWORD *)(a2 + 24);
  unint64_t v7 = cg_color_from_pattern_or_color(a5, v6, v9);

  return [a1 setValue:v7 forKey:@"fillColor"];
}

void *_ZZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavEUb_ENUlP12CAShapeLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE5_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2)
{
  uint64_t result = id_from_value<NSArray,CA::Render::Vector *>(*(void *)(a2 + 112));
  if (result)
  {
    unint64_t v4 = result;
    uint64_t v5 = [NSString stringWithUTF8String:"lineDashPattern"];
    return (void *)[a1 setValue:v4 forKey:v5];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavEUb_ENUlP12CAShapeLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE4_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2)
{
  uint64_t result = [NSNumber numberWithDouble:*(double *)(a2 + 104)];
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = [NSString stringWithUTF8String:"lineDashPhase"];
    return [a1 setValue:v4 forKey:v5];
  }
  return result;
}

CGPath *_ZZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavEUb_ENUlP12CAShapeLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  v10[1] = *MEMORY[0x1E4F143B8];
  v10[0] = *(void *)(a2 + 16);
  uint64_t result = id_from_value<void,CA::Render::Path *>(v10);
  if (result)
  {
    unint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      unint64_t v8 = a4;
    }
    else {
      unint64_t v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return (CGPath *)[a1 setValue:v7 forKey:v9];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavEUb_ENUlP12CAShapeLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithDouble:*(double *)(a2 + 96)];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      unint64_t v8 = a4;
    }
    else {
      unint64_t v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavEUb_ENUlP12CAShapeLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithDouble:*(double *)(a2 + 88)];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      unint64_t v8 = a4;
    }
    else {
      unint64_t v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavEUb_ENUlP12CAShapeLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithDouble:*(double *)(a2 + 80)];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      unint64_t v8 = a4;
    }
    else {
      unint64_t v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render10ShapeLayerEERKDavEUb_ENUlP12CAShapeLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithDouble:*(double *)(a2 + 72)];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      unint64_t v8 = a4;
    }
    else {
      unint64_t v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

void ___Z20get_setters_for_typeIN2CA6Render13GradientLayerEERKDav_block_invoke()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  std::__hash_table<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__rehash<true>(vcvtps_u32_f32(8.0 / *(float *)&dword_1E8F87888));
  snake_case_to_camel_case("start_point", 11, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p)) {
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1310, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavEUb_ENUlP15CAGradientLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("end_point", 9, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p)) {
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1311, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavEUb_ENUlP15CAGradientLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("noise_scale", 11, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p)) {
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1312, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavEUb_ENUlP15CAGradientLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("colorSpace", 10, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p)) {
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1316, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavEUb_ENUlP15CAGradientLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v2, "premultiplied");
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)v2)) {
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1317, "\"Duplicated Entry !!\" && map.map.find (\"premultiplied\") == map.map.end ()");
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(v2, "premultiplied");
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v2, (uint64_t)v2)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavEUb_ENUlP15CAGradientLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES7_S9_SC_SL_SO_;
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  snake_case_to_camel_case("interpolations", 14, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p)) {
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1325, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavEUb_ENUlP15CAGradientLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE4_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("color_map", 9, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p)) {
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1330, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavEUb_ENUlP15CAGradientLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE5_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("type", 4, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p)) {
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1338, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavEUb_ENUlP15CAGradientLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE6_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("colors", 6, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p)) {
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1340, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavEUb_ENUlP15CAGradientLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE7_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  snake_case_to_camel_case("locations", 9, (char *)v2);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  if (std::__hash_table<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>((uint64_t)__p)) {
    __assert_rtn("get_setters_for_type_block_invoke", "CAReverseSerialization.mm", 1345, "\"Duplicated Entry !!\" && map.map.find (scratch_buf) == map.map.end ()");
  }
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)v2);
  *((void *)std::__hash_table<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 5) = _ZZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavEUb_ENUlP15CAGradientLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE8_8__invokeES7_S9_SC_SL_SO_;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_18483B124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__rehash<true>(size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  size_t v2 = *((void *)&_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 1);
  if (prime <= *((void *)&_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 1))
  {
    if (prime >= *((void *)&_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 1)) {
      return;
    }
    unint64_t v9 = vcvtps_u32_f32((float)(unint64_t)qword_1E8F87880 / *(float *)&dword_1E8F87888);
    if (*((void *)&_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 1) < 3uLL
      || (uint8x8_t v10 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0
                                               + 8)),
          v10.i16[0] = vaddlv_u8(v10),
          v10.u32[0] > 1uLL))
    {
      unint64_t v9 = std::__next_prime(v9);
    }
    else
    {
      uint64_t v11 = 1 << -(char)__clz(v9 - 1);
      if (v9 >= 2) {
        unint64_t v9 = v11;
      }
    }
    if (prime <= v9) {
      size_t prime = v9;
    }
    if (prime >= v2) {
      return;
    }
    if (!prime)
    {
      unint64_t v14 = (void *)_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0;
      *(void *)&_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 = 0;
      if (v14) {
        operator delete(v14);
      }
      *((void *)&_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 1) = 0;
      return;
    }
  }
  if (prime >> 61) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  char v3 = operator new(8 * prime);
  uint64_t v4 = (void *)_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0;
  *(void *)&_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 = v3;
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = 0;
  *((void *)&_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 1) = prime;
  do
    *(void *)(_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 8 * v5++) = 0;
  while (prime != v5);
  uint64_t v6 = (void **)qword_1E8F87878;
  if (qword_1E8F87878)
  {
    size_t v7 = *(void *)(qword_1E8F87878 + 8);
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      if (v7 >= prime) {
        v7 %= prime;
      }
    }
    else
    {
      v7 &= prime - 1;
    }
    *(void *)(_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 8 * v7) = &qword_1E8F87878;
    for (i = *v6; i; size_t v7 = v13)
    {
      size_t v13 = i[1];
      if (v8.u32[0] > 1uLL)
      {
        if (v13 >= prime) {
          v13 %= prime;
        }
      }
      else
      {
        v13 &= prime - 1;
      }
      if (v13 != v7)
      {
        if (!*(void *)(_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 8 * v13))
        {
          *(void *)(_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 8 * v13) = v6;
          goto LABEL_31;
        }
        void *v6 = (void *)*i;
        *uint64_t i = **(void **)(_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 8 * v13);
        **(void **)(_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 8 * v13) = i;
        uint64_t i = v6;
      }
      size_t v13 = v7;
LABEL_31:
      uint64_t v6 = (void **)i;
      uint64_t i = (void *)*i;
    }
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::find<std::string>(uint64_t a1)
{
  char v1 = (unsigned __int8 *)a1;
  unint64_t v2 = *(void *)(a1 + 8);
  if (*(char *)(a1 + 23) >= 0)
  {
    unint64_t v3 = *(unsigned __int8 *)(a1 + 23);
  }
  else
  {
    a1 = *(void *)a1;
    unint64_t v3 = v2;
  }
  unint64_t v4 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t *)a1, v3);
  unint64_t v5 = *((void *)&_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 1);
  if (!*((void *)&_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 1)) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 8));
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *((void *)&_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 1)) {
      unint64_t v9 = v4 % *((void *)&_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 1);
    }
  }
  else
  {
    unint64_t v9 = (*((void *)&_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 1) - 1) & v4;
  }
  uint8x8_t v10 = *(unsigned __int8 ***)(_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 8 * v9);
  if (!v10) {
    return 0;
  }
  for (uint64_t i = *v10; i; uint64_t i = *(unsigned __int8 **)i)
  {
    unint64_t v12 = *((void *)i + 1);
    if (v12 == v6)
    {
      if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, v1)) {
        return i;
      }
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= v5) {
          v12 %= v5;
        }
      }
      else
      {
        v12 &= v5 - 1;
      }
      if (v12 != v9) {
        return 0;
      }
    }
  }
  return i;
}

void *std::__hash_table<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (unsigned __int8 *)a1;
  unint64_t v4 = *(void *)(a1 + 8);
  if (*(char *)(a1 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a1 + 23);
  }
  else
  {
    a1 = *(void *)a1;
    unint64_t v5 = v4;
  }
  unint64_t v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t *)a1, v5);
  unint64_t v7 = v6;
  unint64_t v8 = *((void *)&_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 1);
  if (*((void *)&_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 1))
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 8));
    v9.i16[0] = vaddlv_u8(v9);
    unint64_t v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v11 = v6;
      if (v6 >= *((void *)&_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 1)) {
        unint64_t v11 = v6 % *((void *)&_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 1);
      }
    }
    else
    {
      unint64_t v11 = (*((void *)&_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 1) - 1) & v6;
    }
    unint64_t v12 = *(void ***)(_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 8 * v11);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(void **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v7)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)i + 16, v3)) {
            return i;
          }
        }
        else
        {
          if (v10 > 1)
          {
            if (v14 >= v8) {
              v14 %= v8;
            }
          }
          else
          {
            v14 &= v8 - 1;
          }
          if (v14 != v11) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t i = operator new(0x30uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v7;
  *((_OWORD *)i + 1) = *(_OWORD *)a2;
  uint64_t v15 = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *((void *)i + 4) = v15;
  *((void *)i + 5) = 0;
  float v16 = (float)(unint64_t)(qword_1E8F87880 + 1);
  if (!v8 || (float)(*(float *)&dword_1E8F87888 * (float)v8) < v16)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v16 / *(float *)&dword_1E8F87888);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CAGradientLayer *,CA::Render::GradientLayer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__rehash<true>(v20);
    unint64_t v8 = *((void *)&_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 1);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= *((void *)&_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 1)) {
        unint64_t v11 = v7 % *((void *)&_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 1);
      }
      else {
        unint64_t v11 = v7;
      }
    }
    else
    {
      unint64_t v11 = (*((void *)&_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 1) - 1) & v7;
    }
  }
  uint64_t v21 = _ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0;
  BOOL v22 = *(void **)(_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 8 * v11);
  if (v22)
  {
    *(void *)uint64_t i = *v22;
LABEL_41:
    *BOOL v22 = i;
    goto LABEL_42;
  }
  *(void *)uint64_t i = qword_1E8F87878;
  qword_1E8F87878 = (uint64_t)i;
  *(void *)(v21 + 8 * v11) = &qword_1E8F87878;
  if (*(void *)i)
  {
    unint64_t v23 = *(void *)(*(void *)i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8) {
        v23 %= v8;
      }
    }
    else
    {
      v23 &= v8 - 1;
    }
    BOOL v22 = (void *)(_ZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavE3map_0 + 8 * v23);
    goto LABEL_41;
  }
LABEL_42:
  ++qword_1E8F87880;
  return i;
}

void sub_18483B720(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,void (*)(CASpringAnimation *,CA::Render::SpringAnimation const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavEUb_ENUlP15CAGradientLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE8_8__invokeES7_S9_SC_SL_SO_(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(float **)(a2 + 56);
  if (v2)
  {
    unint64_t v3 = (void *)result;
    uint64_t v4 = *(unsigned int *)(a2 + 32);
    for (uint64_t i = (void *)[MEMORY[0x1E4F1CA48] arrayWithCapacity:v4]; v4; --v4)
    {
      float v6 = *v2++;
      objc_msgSend(i, "addObject:", objc_msgSend(NSNumber, "numberWithDouble:", v6));
    }
    return [v3 setLocations:i];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavEUb_ENUlP15CAGradientLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE7_8__invokeES7_S9_SC_SL_SO_(uint64_t result, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a2 + 32))
  {
    unint64_t v3 = (void *)result;
    uint64_t v4 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:");
    if (*(_DWORD *)(a2 + 40) != 4) {
      __assert_rtn("set_gradient_colors", "CAReverseSerialization.mm", 823, "gradient.width () == 4");
    }
    unint64_t v5 = (void *)v4;
    if (*(void *)(a2 + 32))
    {
      unint64_t v6 = 0;
      uint64_t v7 = *(void *)(a2 + 48);
      do
      {
        unint64_t v8 = (float *)(v7 + 16 * v6);
        uint8x8_t v9 = *(CGColorSpace **)(a2 + 128);
        float v10 = *v8;
        v23.f64[0] = *v8;
        float v11 = v8[1];
        v23.f64[1] = v11;
        float v12 = v8[2];
        v24[0] = v12;
        float v13 = v8[3];
        v24[1] = v13;
        if (v13 == 0.0 && v12 == 0.0 && v11 == 0.0 && v10 == 0.0)
        {
          unint64_t v14 = 0;
        }
        else
        {
          uint64_t v15 = (CGColorSpace *)CAGetColorSpace(0x1Cu);
          float v16 = v15;
          uint64_t v17 = 0;
          if (v9) {
            uint64_t v15 = v9;
          }
          do
          {
            double v18 = v23.f64[v17];
            if (v18 < 0.0 || v18 > 1.0)
            {
              Extended = CAColorSpaceCreateExtended(v15);
              goto LABEL_19;
            }
            ++v17;
          }
          while (v17 != 4);
          Extended = CGColorSpaceRetain(v15);
LABEL_19:
          uint64_t v21 = Extended;
          BOOL v22 = CGColorCreate(Extended, v23.f64);
          CA_CGColorGetRGBComponents(v22, v16, v23.f64);
          CGColorRelease(v22);
          if (v24[1] <= 0.0)
          {
            float64x2_t v23 = 0u;
            *(_OWORD *)uint64_t v24 = 0u;
          }
          else
          {
            float64x2_t v23 = vdivq_f64(v23, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v24[1], 0));
            v24[0] = v24[0] / v24[1];
          }
          unint64_t v14 = CGColorCreate(v21, v23.f64);
          if (v21) {
            CFRelease(v21);
          }
        }
        objc_msgSend(v5, "addObject:", v14, *(_OWORD *)&v23, *(_OWORD *)v24);
        ++v6;
      }
      while (v6 < *(void *)(a2 + 32));
    }
    return [v3 setColors:v5];
  }
  return result;
}

void sub_18483B9FC(_Unwind_Exception *exception_object)
{
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavEUb_ENUlP15CAGradientLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE6_8__invokeES7_S9_SC_SL_SO_(void *a1, const char *a2)
{
  int v2 = *((_DWORD *)a2 + 26);
  unint64_t v3 = @"axial";
  if (v2 == 453) {
    unint64_t v3 = @"radial";
  }
  if (v2 == 117) {
    uint64_t v4 = @"conic";
  }
  else {
    uint64_t v4 = v3;
  }
  return [a1 setType:v4];
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavEUb_ENUlP15CAGradientLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE5_8__invokeES7_S9_SC_SL_SO_(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, CGColorSpace **a5)
{
  v8[1] = *MEMORY[0x1E4F143B8];
  if ((*(unsigned char *)(a2 + 13) & 8) != 0)
  {
    unint64_t v6 = (void *)result;
    CA::Render::GradientLayer::color_map((char *)v8, a2, 0);
    uint64_t v7 = (atomic_uint *)v8[0];
    uint64_t result = objc_msgSend(v6, "setColorMap:", ns_object_from_render_object(a5, v8[0], 0));
    if (v7)
    {
      if (atomic_fetch_add(v7 + 2, 0xFFFFFFFF) == 1) {
        return (*(uint64_t (**)(atomic_uint *))(*(void *)v7 + 16))(v7);
      }
    }
  }
  return result;
}

void sub_18483BB20(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if (atomic_fetch_add(v1 + 2, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v1 + 16))(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavEUb_ENUlP15CAGradientLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE4_8__invokeES7_S9_SC_SL_SO_(uint64_t result, uint64_t a2, const double *a3)
{
  uint64_t v4 = *(const void **)(a2 + 64);
  if (v4)
  {
    unint64_t v5 = (void *)result;
    unint64_t v6 = CA::Render::Vector::new_vector((CA::Render::Vector *)*(unsigned int *)(a2 + 32), v4, a3);
    unint64_t v7 = v6[4];
    if (v7 < 4 || (v6[4] & 3) != 0) {
      __assert_rtn("id_from_value", "CAReverseSerialization.mm", 348, "count >=4 && count % 4 == 0");
    }
    uint8x8_t v9 = v6;
    float v10 = (void *)[MEMORY[0x1E4F1CA48] arrayWithCapacity:v7];
    unint64_t v11 = 0;
    do
    {
      float v12 = (double *)&v9[2 * v11];
      double v13 = v12[3];
      double v14 = v12[4];
      *(float *)&double v13 = v13;
      *(float *)&double v14 = v14;
      double v15 = v12[5];
      double v16 = v12[6];
      *(float *)&double v15 = v15;
      *(float *)&double v16 = v16;
      objc_msgSend(v10, "addObject:", +[CAMediaTimingFunction functionWithControlPoints::::](CAMediaTimingFunction, "functionWithControlPoints::::", v13, v14, v15, v16));
      v11 += 4;
    }
    while (v11 < v7);
    [v5 setInterpolations:v10];
    uint64_t v17 = *(uint64_t (**)(_DWORD *))(*(void *)v9 + 8);
    return v17(v9);
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavEUb_ENUlP15CAGradientLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE3_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2)
{
  uint64_t result = [NSNumber numberWithLongLong:((unint64_t)*(unsigned int *)(a2 + 28) >> 12) & 1];
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = [NSString stringWithUTF8String:"premultiplied"];
    return [a1 setValue:v4 forKey:v5];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavEUb_ENUlP15CAGradientLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE2_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t result = *(void *)(a2 + 128);
  if (result != *a5)
  {
    uint64_t result = CGColorSpaceEqualToColorSpaceIgnoringRange();
    if ((result & 1) == 0)
    {
      unint64_t v8 = *(CGColorSpace **)(a2 + 128);
      if (v8) {
        uint8x8_t v9 = CGColorSpaceRetain(v8);
      }
      else {
        uint8x8_t v9 = 0;
      }
      return [a1 setColorSpace:v9];
    }
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavEUb_ENUlP15CAGradientLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE1_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = [NSNumber numberWithDouble:*(float *)(a2 + 108)];
  if (result)
  {
    uint64_t v7 = result;
    if (*((char *)a4 + 23) >= 0) {
      unint64_t v8 = a4;
    }
    else {
      unint64_t v8 = (uint64_t *)*a4;
    }
    uint64_t v9 = [NSString stringWithUTF8String:v8];
    return [a1 setValue:v7 forKey:v9];
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavEUb_ENUlP15CAGradientLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE0_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  long long v8 = *(_OWORD *)(a2 + 88);
  uint64_t result = [MEMORY[0x1E4F29238] valueWithBytes:&v8 objCType:"{CGPoint=dd}"];
  if (result)
  {
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v7 = a4;
    }
    else {
      uint64_t v7 = (uint64_t *)*a4;
    }
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(NSString, "stringWithUTF8String:", v7));
  }
  return result;
}

uint64_t _ZZZ20get_setters_for_typeIN2CA6Render13GradientLayerEERKDavEUb_ENUlP15CAGradientLayerPKS2_PKNS1_5LayerERKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEERK25ReverseSerializationStateE_8__invokeES7_S9_SC_SL_SO_(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  long long v8 = *(_OWORD *)(a2 + 72);
  uint64_t result = [MEMORY[0x1E4F29238] valueWithBytes:&v8 objCType:"{CGPoint=dd}"];
  if (result)
  {
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v7 = a4;
    }
    else {
      uint64_t v7 = (uint64_t *)*a4;
    }
    return objc_msgSend(a1, "setValue:forKey:", result, objc_msgSend(NSString, "stringWithUTF8String:", v7));
  }
  return result;
}

void CATiledLayerDestroy(CATiledLayer *a1)
{
  if ((*((_DWORD *)a1->super._attr.layer + 1) & 0x60000) == 0)
  {
    id v2 = [(CALayer *)a1 contents];
    if (v2)
    {
      uint64_t v3 = (uint64_t)v2;
      CFTypeID v4 = CFGetTypeID(v2);
      if (CAImageProviderGetTypeID::once != -1)
      {
        CFTypeID v5 = v4;
        dispatch_once(&CAImageProviderGetTypeID::once, &__block_literal_global_5_8974);
        CFTypeID v4 = v5;
      }
      if (v4 == CAImageProviderGetTypeID::type)
      {
        CAImageProviderSetCallback(v3, 0, 0);
        CAImageProviderRemoveLayer(v3, (uint64_t)a1);
      }
    }
  }
}

void tiled_layer_render(_DWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = CALayerRetain(a6);
  if (v11)
  {
    float v12 = (CA::Layer **)v11;
    double v13 = (void *)MEMORY[0x185324A30]();
    unsigned int v92 = objc_msgSend(+[CATransaction valueForKey:](CATransaction, "valueForKey:", @"CATiledLayerFlags"), "unsignedIntValue");
    unsigned int v93 = a3;
    unsigned int v15 = a1[57];
    unsigned int v14 = a1[58];
    int v16 = v15 * a3;
    int v17 = v14 * a4;
    unsigned int v18 = a1[59];
    if (v18 <= a2)
    {
      if (-v16 < v15) {
        unint64_t v26 = -v16;
      }
      else {
        unint64_t v26 = v15;
      }
      if (-v17 < v14) {
        unsigned int v27 = -v17;
      }
      else {
        unsigned int v27 = a1[58];
      }
      if (v26 >= v27) {
        unsigned int v34 = v27;
      }
      else {
        unsigned int v34 = v26;
      }
      if (!v34)
      {
LABEL_110:
        return;
      }
    }
    else
    {
      int v19 = a2 - a1[60];
      unsigned int v20 = a1[55];
      unsigned int v21 = a1[56];
      int v22 = v20 << (*((unsigned char *)a1 + 240) - a2);
      unsigned int v23 = v20 >> (a2 - *((unsigned char *)a1 + 240));
      BOOL v24 = v19 < 0;
      if (v19 < 0) {
        unsigned int v23 = v22;
      }
      unsigned int v25 = v21 >> v19;
      if (v24) {
        unsigned int v25 = v21 << (*((unsigned char *)a1 + 240) - a2);
      }
      if (v23 - v16 >= v15) {
        unint64_t v26 = v15;
      }
      else {
        unint64_t v26 = v23 - v16;
      }
      if (v25 - v17 >= v14) {
        unsigned int v27 = a1[58];
      }
      else {
        unsigned int v27 = v25 - v17;
      }
      if (v26 >= v27) {
        unsigned int v28 = v27;
      }
      else {
        unsigned int v28 = v26;
      }
      if (!v28) {
        goto LABEL_110;
      }
      if (v18 > a2)
      {
        uint32x2_t v29 = *(uint32x2_t *)(a1 + 55);
        int8x8_t v30 = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32((int)a2 - a1[60] < 0), 0x1FuLL)), (int8x8_t)vshl_u32(v29, (uint32x2_t)vdup_n_s32(a1[60] - (int)a2)), (int8x8_t)vshl_u32(v29, (uint32x2_t)vneg_s32(vdup_n_s32((int)a2 - a1[60]))));
        v31.i64[0] = v30.u32[0];
        v31.i64[1] = v30.u32[1];
        float64x2_t v32 = vcvtq_f64_u64(v31);
        v31.i64[0] = v29.u32[0];
        v31.i64[1] = v29.u32[1];
        float64x2_t v33 = vdivq_f64(v32, vcvtq_f64_u64(v31));
        goto LABEL_31;
      }
    }
    float64x2_t v33 = *(float64x2_t *)MEMORY[0x1E4F1DB30];
LABEL_31:
    *(float64x2_t *)sCGFloat x = v33;
    [v12 contentsScale];
    double v35 = (double)v27;
    BOOL v37 = v36 == 1.0;
    double v38 = 1.0 / v36;
    double v39 = v38 * ((double)v16 / sx[0]);
    double v40 = v38 * ((double)v17 / sx[1]);
    double v41 = v38 * ((double)v26 / sx[0]);
    double v42 = v38 * ((double)v27 / sx[1]);
    if (v37) {
      double v43 = (double)v16 / sx[0];
    }
    else {
      double v43 = v39;
    }
    if (v37) {
      double v44 = (double)v17 / sx[1];
    }
    else {
      double v44 = v40;
    }
    if (v37) {
      double v45 = (double)v26 / sx[0];
    }
    else {
      double v45 = v41;
    }
    if (v37) {
      double v46 = (double)v27 / sx[1];
    }
    else {
      double v46 = v42;
    }
    objc_msgSend(v12, "bounds", v42);
    if ((objc_msgSend(v12, "canDrawRect:levelOfDetail:", a2, v47 + v43, v48 + v44, v45, v46) & 1) == 0)
    {
      CAImageProviderSetSubImageWithSeed((uint64_t)a1, a2, v93, a4, 0, v92, a5);
      goto LABEL_106;
    }
    unsigned int v86 = a5;
    unsigned int v90 = v13;
    space = (CGColorSpace *)[*((id *)v12[2] + 2) _retainColorSpace];
    if (a1[54]) {
      uint64_t v49 = 3;
    }
    else {
      uint64_t v49 = 1;
    }
    unsigned int v87 = a4;
    if (([v12 drawsAsynchronously] & 1) != 0
      || (uint64_t v50 = [v12 acceleratesDrawing], v50))
    {
      uint64_t v50 = 256;
    }
    uint64_t v51 = (CA::Transaction *)CABackingStoreSetDefaultAccelFlags(v50);
    if (v51 >= 0x100)
    {
      unint64_t v52 = *(CA::Transaction **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 576);
      if (!v52) {
        unint64_t v52 = (CA::Transaction *)CA::Transaction::create(v51);
      }
      int v53 = *((_DWORD *)v52 + 25);
      *((_DWORD *)v52 + 25) = v53 + 1;
      if (!v53) {
        os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
      }
      int v88 = *((_DWORD *)v12[2] + 13);
      CA::Transaction::unlock(v52);
      if (v88 << 11 < 0 && CAIOSurfaceIsAcceleratable(0, v26, v27, v49))
      {
        iosurface = CA::Render::create_iosurface((CA::Render *)v49, (CA::Render *)v26, v27, 0, v54, v55);
        if (iosurface)
        {
          uint64_t v57 = iosurface;
          int v58 = dword_184999348[v49];
          malloc_zone = (malloc_zone_t *)get_malloc_zone();
          uint64_t v60 = (CA::CG::IOSurfaceDrawable *)malloc_type_zone_malloc(malloc_zone, 0x70uLL, 0x8BB15036uLL);
          if (v60) {
            uint64_t v60 = CA::CG::IOSurfaceDrawable::IOSurfaceDrawable(v60, v57, v49, v58, space, 0, 0, 0, 0);
          }
          uint64_t v85 = (uint64_t)v60;
          CFRelease(v57);
          uint64_t v61 = CAGetCachedCGIOSurfaceContext(v85, v88 << 11 >> 31, 0);
          if (v61)
          {
            uint64_t v62 = (CGContext *)v61;
            uint64_t v63 = (CGContext *)v61;
            if (([v12 isOpaque] & 1) == 0 && objc_msgSend(v12, "clearsContext")) {
              CGContextClearRect(v62, *MEMORY[0x1E4F1DB10]);
            }
            uint64_t v89 = 0;
            uint64_t v64 = v85;
            goto LABEL_74;
          }
          CA::CG::AccelDrawable::unref(v85);
        }
      }
    }
    unint64_t v66 = CA::Render::Shmem::new_bitmap((CA::Render::Shmem *)v49, v26, v27, 0, 0, 1u);
    if (!v66)
    {
LABEL_105:
      double v13 = v90;
      CGColorSpaceRelease(space);
LABEL_106:
      uint64_t v82 = (unsigned int *)CA::Transaction::ensure_compat(v65);
      float32_t v83 = v12[2];
      uint64_t v84 = v82[24];
      if ((v84 & 0x80000000) != 0 || !*((_DWORD *)v83 + v84 + 68)) {
        CA::Layer::thread_flags_(v83, (CA::Transaction *)v82);
      }
      CALayerRelease((uint64_t)v12);
      goto LABEL_110;
    }
    uint64_t v89 = v66;
    unint64_t v67 = (_DWORD *)*((void *)v66 + 3);
    uint64_t v68 = (int)v67[2];
    if (v67[4] <= 1u) {
      unsigned int v69 = 1;
    }
    else {
      unsigned int v69 = v67[4];
    }
    size_t v70 = CA::Render::format_rowbytes((CA::Render *)v67[3], v69);
    float v71 = CAGetCachedCGBitmapContext_((char *)v67 + v68, v26, v27, v49, v70, space);
    if (!v71 || (uint64_t v63 = (CGContext *)*((void *)v71 + 2)) == 0)
    {
      if (atomic_fetch_add(v89 + 2, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v89 + 16))(v89);
      }
      goto LABEL_105;
    }
    uint64_t v64 = 0;
LABEL_74:
    memset(&v101, 0, sizeof(v101));
    CGContextGetBaseCTM();
    if ((*((_DWORD *)v12[2] + 1) & 0x400000) == 0)
    {
      transform.double b = 0.0;
      transform.double c = 0.0;
      transform.a = 1.0;
      *(_OWORD *)&transform.d = xmmword_184997E00;
      transform.tCGFloat y = v35;
      CGContextConcatCTM(v63, &transform);
      CGAffineTransform t1 = v101;
      t2.double b = 0.0;
      t2.double c = 0.0;
      t2.a = 1.0;
      *(_OWORD *)&t2.d = xmmword_184997E00;
      t2.tCGFloat y = v35;
      CGAffineTransformConcat(&v99, &t1, &t2);
      CGAffineTransform v101 = v99;
    }
    CGContextTranslateCTM(v63, (double)-v16, (double)-v17);
    CGContextScaleCTM(v63, sx[0], sx[1]);
    CGAffineTransform v96 = v101;
    CGAffineTransformTranslate(&v99, &v96, (double)-v16, (double)-v17);
    CGAffineTransform v101 = v99;
    CGAffineTransform v95 = v99;
    CGAffineTransformScale(&v99, &v95, sx[0], sx[1]);
    CGAffineTransform v101 = v99;
    if (dyld_program_sdk_at_least()) {
      CGContextSetBaseCTM();
    }
    uint64_t v72 = (CA::Transaction *)CA::Layer::prepare_context_for_drawing(v12[2], v63, 0);
    unint64_t v73 = v12[2];
    __int32 v74 = *(CA::Transaction **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 576);
    if (!v74) {
      __int32 v74 = (CA::Transaction *)CA::Transaction::create(v72);
    }
    objc_msgSend(CA::Layer::layer_being_drawn(v73, v74, 0x800000), "drawInContext:", v63);
    CAReleaseCachedCGContext(v63);
    if (v64)
    {
      uint64_t v75 = *(void *)(v64 + 72);
      if (v75) {
        CA::CG::Queue::flush(v75, 3, 1);
      }
      os_unfair_lock_lock((os_unfair_lock_t)(v64 + 12));
      if (*(unsigned char *)(v64 + 68))
      {
        unsigned int v76 = 0;
      }
      else
      {
        unsigned int v77 = (malloc_zone_t *)get_malloc_zone();
        uint64_t v78 = (CA::Render::Texture *)malloc_type_zone_calloc(v77, 1uLL, 0x158uLL, 0x743898A5uLL);
        unsigned int v76 = (atomic_uint *)v78;
        if (v78) {
          uint64_t v78 = (CA::Render::Texture *)CA::Render::Surface::Surface((uint64_t)v78, *(IOSurfaceRef *)(v64 + 96), *(_DWORD *)(v64 + 16), 1, 0, 0, 0);
        }
        CA::Render::Texture::set_colorspace(v78, *(CGColorSpace **)(v64 + 24));
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(v64 + 12));
      if (atomic_fetch_add((atomic_uint *volatile)(v64 + 8), 0xFFFFFFFF) == 1)
      {
        (**(void (***)(uint64_t))v64)(v64);
        (*(void (**)(uint64_t))(*(void *)v64 + 16))(v64);
      }
    }
    else
    {
      unsigned int v76 = 0;
    }
    if (v89)
    {
      unsigned int v76 = (atomic_uint *)CA::Render::Shmem::copy_image((CA::Render::Shmem *)v89, space);
      if (atomic_fetch_add(v89 + 2, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v89 + 16))(v89);
      }
    }
    if (v76)
    {
      if (CARenderObjectGetTypeID::once != -1) {
        dispatch_once(&CARenderObjectGetTypeID::once, &__block_literal_global_5787);
      }
      uint64_t Instance = _CFRuntimeCreateInstance();
      int v80 = (const void *)Instance;
      if (Instance)
      {
        *(void *)(Instance + 16) = 0;
        double v81 = v76;
        if (!atomic_fetch_add(v76 + 2, 1u))
        {
          double v81 = 0;
          atomic_fetch_add(v76 + 2, 0xFFFFFFFF);
        }
        *(void *)(Instance + 16) = v81;
      }
      CAImageProviderSetSubImageWithSeed((uint64_t)a1, a2, v93, v87, Instance, v92, v86);
      CFRelease(v80);
      if (atomic_fetch_add(v76 + 2, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v76 + 16))(v76);
      }
    }
    goto LABEL_105;
  }
}

void sub_18483D264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *context)
{
}

uint64_t convertRectToImageCoordinates(void *a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  if (*(double *)(a4 + 16) < 1.00000002e30 || *(double *)(a4 + 24) < 1.00000002e30)
  {
    double v10 = *(double *)a4;
    double v11 = *(double *)(a4 + 8);
    objc_msgSend(a1, "bounds", *(void *)(a4 + 16), *(void *)(a4 + 24));
    double v13 = v10 - v12;
    double v15 = v11 - v14;
    [a1 contentsScale];
    v16.f64[0] = 1.0;
    __asm { FMOV            V3.2D, #1.0 }
    int8x16_t v23 = (int8x16_t)vmulq_f64(v42, (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s64(vmvnq_s8((int8x16_t)vceqq_f64(v17, v16)).i64[0], 0), (int8x16_t)vdupq_lane_s64(*(uint64_t *)&v17.f64[0], 0), _Q3));
    double v24 = v15 * v17.f64[0];
    v17.f64[0] = v13 * v17.f64[0];
    v17.f64[1] = v24;
    v25.f64[0] = 0.0;
    int8x16_t v26 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v25, (float64x2_t)v23).i64[0], 0);
    *(double *)&v27.i64[1] = v24;
    *(double *)v27.i64 = *(double *)v23.i64 + v17.f64[0];
    float64x2_t v28 = (float64x2_t)vbslq_s8(v26, v27, (int8x16_t)v17);
    v27.i64[1] = v23.i64[1];
    *(double *)v27.i64 = -*(double *)v23.i64;
    float64x2_t v29 = (float64x2_t)vbslq_s8(v26, v27, v23);
    if (*(double *)&v23.i64[1] < 0.0)
    {
      v28.f64[1] = *(double *)&v23.i64[1] + v24;
      v29.f64[1] = vnegq_f64(*(float64x2_t *)&v23).f64[1];
    }
    int8x16_t v30 = (int8x16_t)vceqzq_f64(v29);
    if ((vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v30, 1), v30).u64[0] & 0x8000000000000000) != 0
      || (int8x16_t v31 = vorrq_s8((int8x16_t)vcltzq_f64(v29), (int8x16_t)vcgezq_f64(v29)),
          (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v31), 1), v31).u64[0] & 0x8000000000000000) != 0))
    {
      *(void *)a5 = 0;
      *(void *)(a5 + 8) = 0;
      v35.i64[0] = 0;
      int32x2_t v36 = 0;
    }
    else
    {
      float64x2_t v32 = vmaxnmq_f64(v28, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000));
      float64x2_t v33 = vminnmq_f64(vaddq_f64(v28, v29), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL));
      int32x4_t v34 = (int32x4_t)vcvtmq_s64_f64(v32);
      int32x4_t v35 = vuzp1q_s32(v34, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(v33), (int64x2_t)v34));
      *(int32x4_t *)a5 = v35;
      int32x2_t v36 = (int32x2_t)v35.u64[1];
    }
    uint32x2_t v37 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v36);
    if ((vpmax_u32(v37, v37).u32[0] & 0x80000000) != 0)
    {
      return 0;
    }
    else
    {
      uint32x2_t v38 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, (int32x2_t)__PAIR64__(a3, a2));
      if ((vpmax_u32(v38, v38).u32[0] & 0x80000000) != 0
        || (int32x2_t v39 = vadd_s32(*(int32x2_t *)v35.i8, v36),
            *(int32x2_t *)v35.i8 = vmax_s32(*(int32x2_t *)v35.i8, 0),
            int32x2_t v40 = vsub_s32(vmin_s32(v39, (int32x2_t)__PAIR64__(a3, a2)), *(int32x2_t *)v35.i8),
            uint32x2_t v41 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v40),
            (vpmax_u32(v41, v41).u32[0] & 0x80000000) != 0))
      {
        uint64_t result = 0;
        *(void *)(a5 + 8) = 0;
      }
      else
      {
        v35.u64[1] = (unint64_t)v40;
        *(int32x4_t *)a5 = v35;
        return 1;
      }
    }
  }
  else
  {
    *(void *)a5 = 0;
    uint64_t result = 1;
    *(_DWORD *)(a5 + 8) = a2;
    *(_DWORD *)(a5 + 12) = a3;
  }
  return result;
}

uint64_t CA::ScanConverter::path_rect_containment(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  int v2 = v1;
  uint64_t v4 = v3;
  v116[1020] = *MEMORY[0x1E4F143B8];
  int v6 = *v5;
  int v7 = v5[1];
  int v8 = v5[2];
  int v9 = v5[3];
  uint64_t v10 = *(void *)(v3 + 24);
  size_t v11 = 32 * v10;
  unint64_t v105 = 32 * v10;
  if ((unint64_t)(32 * v10) > 0x1000)
  {
    uint64_t v106 = (char *)malloc_type_malloc(v11, 0x145CA901uLL);
    if (!v106) {
      return 1;
    }
  }
  else
  {
    MEMORY[0x1F4188790](v11);
    uint64_t v106 = (char *)&v104 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v106, v12);
  }
  int v13 = v8 + v6;
  int v14 = v9 + v7;
  double v15 = *(void **)(v4 + 8);
  float64x2_t v16 = v106;
  if (v15)
  {
    uint64_t v17 = 0;
    do
    {
      uint64_t v18 = v15[1];
      if (v18)
      {
        int v19 = (int *)(v15 + 3);
        unsigned int v20 = &v16[16 * v17 + 8];
        v17 += v18;
        unsigned int v21 = (int *)(v15 + 3);
        do
        {
          int v22 = *v21;
          v21 += 6;
          *((_DWORD *)v20 - 2) = ((v22 >> 31) | 0x80000000) ^ v22;
          *(void *)unsigned int v20 = v19;
          v20 += 16;
          int v19 = v21;
          --v18;
        }
        while (v18);
      }
      double v15 = (void *)*v15;
    }
    while (v15);
  }
  uint64_t v104 = (uint64_t)&v104;
  int8x16_t v23 = &v16[16 * v10];
  CA::radix_sort(v10);
  if (v6 <= -16777216) {
    int v26 = -16777216;
  }
  else {
    int v26 = v6;
  }
  int v107 = v26;
  if (v13 >= 0x1000000) {
    int v27 = 0x1000000;
  }
  else {
    int v27 = v13;
  }
  if (v7 <= -16777216) {
    int v28 = -16777216;
  }
  else {
    int v28 = v7;
  }
  v114[0] = 0;
  v114[1] = v116;
  if (v14 >= 0x1000000) {
    int v29 = 0x1000000;
  }
  else {
    int v29 = v14;
  }
  long long v115 = xmmword_184998000;
  int v112 = 0;
  double v113 = v114;
  int v109 = v29;
  if (v28 >= v29)
  {
    LODWORD(v98) = 1;
    int v32 = 1;
    goto LABEL_168;
  }
  int8x16_t v30 = 0;
  uint64_t v31 = 0;
  int v32 = 1;
  uint64_t v33 = 1;
  while (1)
  {
    if (!(v32 | v33))
    {
      LODWORD(v98) = 0;
      int v32 = 0;
      goto LABEL_168;
    }
    if (v30)
    {
      float v34 = (float)v28;
      signed int v110 = v28 + 1;
      float v35 = (float)(v28 + 1);
      int32x2_t v36 = (float *)&v112;
      do
      {
        uint32x2_t v37 = (float *)*((void *)v30 + 2);
        float v38 = v37[1];
        if (v38 <= v34)
        {
          *(void *)int32x2_t v36 = *(void *)v30;
          *(void *)int8x16_t v30 = v31;
          uint64_t v31 = (uint64_t)v30;
          int8x16_t v30 = v36;
        }
        else
        {
          float v39 = *v37;
          if (*v37 >= v34) {
            float v40 = *v37;
          }
          else {
            float v40 = (float)v28;
          }
          if (v38 > v35) {
            float v38 = (float)(v28 + 1);
          }
          float v41 = v37[2];
          float v42 = v37[3];
          float v43 = v37[4];
          float v44 = v43 + (float)((float)(v42 + (float)((float)(v40 - v39) * v41)) * (float)(v40 - v39));
          float v45 = v43 + (float)((float)(v42 + (float)((float)(v38 - v39) * v41)) * (float)(v38 - v39));
          if (v44 >= v45) {
            float v46 = v45;
          }
          else {
            float v46 = v44;
          }
          if (v44 > v45) {
            float v45 = v44;
          }
          *(float *)v25.i32 = fmaxf(v45 - v46, 0.000001);
          int32x2_t v25 = (int32x2_t)vrecpe_f32((float32x2_t)vdup_lane_s32(v25, 0));
          v30[7] = v46;
          v30[8] = v45;
          v30[6] = v37[5] * (float)(v38 - v40);
          v30[9] = *(float *)v25.i32;
          int32x2_t v36 = v30;
        }
        int8x16_t v30 = *(float **)v30;
      }
      while (v30);
      double v47 = v112;
      if (v112)
      {
        char v48 = 0;
        uint64_t v49 = &v112;
        do
        {
          while (1)
          {
            uint64_t v50 = v49;
            uint64_t v49 = (float **)v47;
            double v47 = *(float **)v47;
            if (!v47) {
              break;
            }
            if (*((float *)v49 + 7) > v47[7])
            {
              *uint64_t v50 = v47;
              *uint64_t v49 = *(float **)v47;
              *(void *)double v47 = v49;
              char v48 = 1;
            }
          }
          double v47 = v112;
          char v51 = v48 & (v112 != 0);
          uint64_t v49 = &v112;
          char v48 = 0;
        }
        while ((v51 & 1) != 0);
      }
    }
    else
    {
      signed int v110 = v28 + 1;
      float v35 = (float)(v28 + 1);
    }
    if (v16 < v23)
    {
      int v108 = v32;
      unint64_t v52 = 0;
      uint64_t v53 = 0;
      float v54 = (float)v28;
      do
      {
        CFStringRef v55 = (float *)*((void *)v16 + 1);
        float v56 = *v55;
        if (*v55 >= v35) {
          break;
        }
        float v57 = v55[1];
        if (v57 > v54)
        {
          if (v31)
          {
            uint64_t v58 = *(void *)v31;
          }
          else
          {
            uint64_t v31 = x_heap_malloc_small_(v113, 0x28uLL);
            uint64_t v58 = 0;
            CFStringRef v55 = (float *)*((void *)v16 + 1);
            float v56 = *v55;
            float v57 = v55[1];
          }
          *(void *)(v31 + 16) = v55;
          if (v56 >= v54) {
            float v59 = v56;
          }
          else {
            float v59 = (float)v28;
          }
          if (v57 > v35) {
            float v57 = v35;
          }
          float v60 = v55[2];
          float v61 = v55[3];
          float v62 = v55[4];
          float v63 = v62 + (float)((float)(v61 + (float)((float)(v59 - v56) * v60)) * (float)(v59 - v56));
          float v64 = v62 + (float)((float)(v61 + (float)((float)(v57 - v56) * v60)) * (float)(v57 - v56));
          if (v63 >= v64) {
            float v65 = v64;
          }
          else {
            float v65 = v63;
          }
          if (v63 > v64) {
            float v64 = v63;
          }
          v24.f32[0] = fmaxf(v64 - v65, 0.000001);
          float32x2_t v24 = (float32x2_t)vdup_lane_s32((int32x2_t)v24, 0);
          *(float *)(v31 + 28) = v65;
          *(float *)(v31 + 32) = v64;
          *(float *)(v31 + 24) = v55[5] * (float)(v57 - v59);
          *(_DWORD *)(v31 + 36) = vrecpe_f32(v24).u32[0];
          *(void *)uint64_t v31 = v53;
          ++v52;
          uint64_t v53 = v31;
          uint64_t v31 = v58;
        }
        v16 += 16;
      }
      while (v16 < v23);
      if (v52)
      {
        if (v52 != 1) {
          uint64_t v53 = CA::ScanConverter::RendererImpl::Edge::sort_xmin((uint64_t *)v53, v52);
        }
        int v32 = v108;
        unint64_t v66 = (uint64_t *)&v112;
        if (v53)
        {
          while (1)
          {
            unint64_t v67 = (uint64_t *)*v66;
            if (!*v66) {
              break;
            }
            if (*(float *)(v53 + 28) >= *((float *)v67 + 7))
            {
              unint64_t v66 = (uint64_t *)*v66;
              if (!v53) {
                goto LABEL_77;
              }
            }
            else
            {
              uint64_t v68 = *(void *)v53;
              *unint64_t v66 = v53;
              *(void *)uint64_t v53 = v67;
              uint64_t v53 = v68;
              if (!v68) {
                goto LABEL_77;
              }
            }
          }
        }
        else
        {
LABEL_77:
          if (*v66) {
            goto LABEL_81;
          }
          uint64_t v53 = 0;
        }
        *unint64_t v66 = v53;
      }
      else
      {
        int v32 = v108;
      }
    }
LABEL_81:
    int8x16_t v30 = v112;
    if (v112)
    {
      int v69 = v107;
      if (v107 >= v27) {
        goto LABEL_152;
      }
      uint64_t v70 = 0;
      float v71 = 0.0;
      uint64_t v72 = v112;
LABEL_84:
      for (i = (float)v69; v70; uint64_t v70 = *(void *)(v70 + 8))
      {
        if (*(float *)(v70 + 32) > i) {
          break;
        }
        float v71 = *(float *)(v70 + 24) + v71;
      }
      float v74 = i + 1.0;
      uint64_t v111 = v70;
      if (!v72) {
        goto LABEL_105;
      }
LABEL_88:
      while (1)
      {
        uint64_t v75 = v72;
        float v76 = v72[7];
        if (v74 <= v76) {
          break;
        }
        uint64_t v72 = *(float **)v72;
        float v77 = v75[8];
        if (v77 <= i)
        {
          float v71 = v75[6] + v71;
          if (v72) {
            continue;
          }
LABEL_104:
          uint64_t v70 = v111;
LABEL_105:
          uint64_t v75 = 0;
          int v81 = v27;
          if (!v70)
          {
LABEL_141:
            float v91 = fabsf(v71);
            if (v2)
            {
              int v96 = (int)v91;
              float v91 = v91 - truncf(v91);
              if (v96) {
                float v91 = 1.0 - v91;
              }
LABEL_146:
              float v97 = v91;
              if (v91 != 0.0)
              {
LABEL_147:
                int v32 = 0;
                float v91 = v97;
              }
              uint64_t v70 = 0;
              goto LABEL_149;
            }
            float v97 = 1.0;
            if (v91 < 1.0) {
              goto LABEL_146;
            }
            goto LABEL_147;
          }
LABEL_108:
          float v82 = 1.0;
          uint64_t v83 = v70;
          float v84 = v71;
          while (1)
          {
            uint64_t v85 = v83;
            float v86 = *(float *)(v83 + 28);
            if (v86 >= i) {
              float v87 = *(float *)(v83 + 28);
            }
            else {
              float v87 = (float)v69;
            }
            float v88 = *(float *)(v83 + 32);
            if (v88 > v74) {
              float v88 = i + 1.0;
            }
            float v84 = v84
                + (float)((float)(*(float *)(v83 + 24) * v82)
                        * (float)((float)(v74 - v88)
                                + (float)((float)((float)(v87 - v88) * *(float *)(v83 + 36))
                                        * (float)(v86 + (float)((float)(v88 + v87) * -0.5)))));
            uint64_t v83 = *(void *)(v83 + 8);
            if (v2 == 1)
            {
              if (!v83)
              {
                float v91 = fabsf(v84);
                goto LABEL_125;
              }
              uint64_t v89 = *(float **)(v85 + 16);
              unsigned int v90 = *(float **)(v83 + 16);
              if (v89[5] == v90[5] && *v89 != v90[1] && v89[1] != *v90) {
                float v82 = -v82;
              }
            }
            if (!v83)
            {
              float v91 = fabsf(v84);
              if (!v2)
              {
                if (v91 >= 1.0)
                {
                  int v81 = v69 + 1;
                  float v91 = 1.0;
                  goto LABEL_128;
                }
LABEL_127:
                int v81 = v69 + 1;
                if (v91 == 0.0) {
                  goto LABEL_149;
                }
LABEL_128:
                int v32 = 0;
LABEL_149:
                if (v91 != 1.0) {
                  uint64_t v33 = 0;
                }
                int v69 = v81;
                uint64_t v72 = v75;
                if (v81 >= v27)
                {
LABEL_152:
                  LODWORD(v98) = v33;
                  goto LABEL_159;
                }
                goto LABEL_84;
              }
LABEL_125:
              int v92 = (int)v91;
              float v91 = v91 - truncf(v91);
              if (v92) {
                float v91 = 1.0 - v91;
              }
              goto LABEL_127;
            }
          }
        }
        uint64_t v78 = v111;
        if (v111)
        {
          float32_t v79 = &v111;
          while (1)
          {
            float v80 = *(float *)(v78 + 32);
            if (SLODWORD(v77) == SLODWORD(v80))
            {
              if (v76 < *(float *)(v78 + 28)) {
                goto LABEL_103;
              }
            }
            else if (v77 < v80)
            {
LABEL_103:
              *((void *)v75 + 1) = v78;
              *float32_t v79 = (uint64_t)v75;
              if (!v72) {
                goto LABEL_104;
              }
              goto LABEL_88;
            }
            float32_t v79 = (uint64_t *)(v78 + 8);
            uint64_t v78 = *(void *)(v78 + 8);
            if (!v78) {
              goto LABEL_101;
            }
          }
        }
        float32_t v79 = &v111;
LABEL_101:
        *float32_t v79 = (uint64_t)v75;
        *((void *)v75 + 1) = 0;
        if (!v72) {
          goto LABEL_104;
        }
      }
      uint64_t v70 = v111;
      if (!v111)
      {
        float v93 = floorf(v76);
        if (v93 < -16777000.0) {
          float v93 = -16777000.0;
        }
        float v94 = 16777000.0;
        if (v76 <= 16777000.0) {
          float v94 = v72[7];
        }
        if (v76 >= 0.0) {
          float v93 = v94;
        }
        if (v27 >= (int)v93 && (LODWORD(v76) & 0x7FFFFFFFu) <= 0x7F7FFFFF) {
          int v81 = (int)v93;
        }
        else {
          int v81 = v27;
        }
        goto LABEL_141;
      }
      goto LABEL_108;
    }
    if (v16 == v23) {
      break;
    }
    signed int v99 = vcvtms_s32_f32(**((float **)v16 + 1));
    if (v28 > v99) {
      signed int v99 = v28;
    }
    signed int v110 = v99;
    int v100 = v99 - v28 + 1;
    do
    {
      uint64_t v98 = v33;
      uint64_t v33 = 0;
      --v100;
    }
    while (v100);
    uint64_t v33 = v98;
LABEL_159:
    int v28 = v110;
    if (v110 >= v109) {
      goto LABEL_168;
    }
  }
  int v102 = v109;
  if (v28 > v109) {
    int v102 = v28;
  }
  int v103 = v102 - v28 + 1;
  do
  {
    LODWORD(v98) = v33;
    LODWORD(v33) = 0;
    --v103;
  }
  while (v103);
LABEL_168:
  if (v105 > 0x1000) {
    free(v106);
  }
  x_heap_free((void ***)v113);
  if (v32) {
    return 1;
  }
  else {
    return 2 * (v98 == 0);
  }
}

void CA::CG::FillRectsShadow::draw_shadow(CA::CG::FillRectsShadow *this, CA::CG::Renderer *a2)
{
  v88[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)*((void *)a2 + 1);
  if (((*(uint64_t (**)(void))(**((void **)this + 18) + 136))(*((void *)this + 18)) & 5) != 0)
  {
    uint64_t v10 = 88;
    if ((*((_DWORD *)this + 25) & 4) != 0)
    {
      size_t v11 = (double *)((char *)a2 + 88);
    }
    else
    {
      uint64_t v10 = 32;
      size_t v11 = (double *)((char *)a2 + 32);
    }
    v9.n128_u64[0] = *((void *)a2 + 10);
    uint64_t v68 = v10;
    v6.n128_u64[0] = *(void *)((char *)a2 + v10);
    v5.n128_f64[0] = v11[3];
    __n128 v12 = *(__n128 *)(v11 + 1);
    uint64_t v14 = *((void *)this + 18);
    uint64_t v13 = *((void *)this + 19);
    v8.n128_u64[0] = *(void *)(v13 + 80);
    v7.n128_u32[0] = *(_DWORD *)(v13 + 76);
    int v66 = *(_DWORD *)(v14 + 100);
    if ((v66 & 0x400) == 0)
    {
      *(unsigned char *)(v4[2] + 16) = 3;
      uint64_t v14 = *((void *)this + 18);
    }
    v88[0] = 0;
    v88[1] = 0;
    double v15 = (float16x4_t *)v4[2];
    float16x4_t v16 = v15[1];
    _H6 = *(short float *)(v14 + 94);
    if (_H6 == COERCE_SHORT_FLOAT(COERCE_UNSIGNED_INT(1.0)))
    {
      float16x4_t v23 = v15[1];
    }
    else
    {
      __asm { FCVT            S6, H6 }
      float16x4_t v23 = vcvt_f16_f32(vmulq_n_f32(vcvtq_f32_f16(v16), _S6));
    }
    if (*(void *)(v14 + 112))
    {
      float16x4_t v63 = v15[1];
      uint64_t v24 = 0;
      unint64_t v25 = 0;
      BOOL v26 = 0;
      float64x2_t v27 = (float64x2_t)vdupq_lane_s64(v12.n128_i64[0], 0);
      float v28 = v9.n128_f64[0];
      *(void *)&v29.f64[1] = v12.n128_u64[1];
      *(void *)&v29.f64[0] = v5.n128_u64[0];
      *(void *)&v27.f64[0] = v6.n128_u64[0];
      double v30 = vmulq_f64((float64x2_t)v12, (float64x2_t)v12).f64[0];
      float64x2_t v31 = vmulq_f64(v29, v27);
      float64x2_t v32 = vcvtq_f64_f32(vmul_n_f32((float32x2_t)v8.n128_u64[0], v28));
      int8x16_t v33 = (int8x16_t)vmulq_f64((float64x2_t)v12, v32);
      *(float *)v29.f64 = v30 + v6.n128_f64[0] * v6.n128_f64[0];
      v5.n128_u64[1] = v6.n128_u64[0];
      double v34 = (float)((float)(v7.n128_f32[0] * v28) / sqrtf(*(float *)v29.f64));
      float64x2_t v35 = vmulq_n_f64(vmlaq_f64(vnegq_f64((float64x2_t)vextq_s8(v33, v33, 8uLL)), v32, (float64x2_t)v5), 1.0 / vsubq_f64(v31, (float64x2_t)vdupq_laneq_s64((int64x2_t)v31, 1)).f64[0]);
      double v36 = v34 * 2.8;
      if ((v66 & 0x400) != 0) {
        int v37 = 278528;
      }
      else {
        int v37 = 0;
      }
      unsigned int v65 = v37;
      double v38 = v34 * 5.6;
      float64x2_t v67 = v35;
      double v39 = v35.f64[1];
      double v40 = 1.0 / (v34 * 5.6);
      float32x4_t v64 = vcvtq_f32_f16(v23);
      do
      {
        float64x2_t v69 = 0u;
        long long v70 = 0u;
        float v41 = (double *)(v14 + v24);
        double v42 = v41[15];
        v69.f64[0] = v42;
        double v43 = v41[16];
        v69.f64[1] = v43;
        double v44 = v41[17];
        *(double *)&long long v70 = v44;
        double v45 = v41[18];
        *((double *)&v70 + 1) = v45;
        if (v44 < 0.0)
        {
          double v46 = v44 + v42;
          double v44 = -v44;
          v69.f64[0] = v46;
          *(double *)&long long v70 = v44;
        }
        if (v45 < 0.0)
        {
          double v43 = v45 + v43;
          double v45 = -v45;
          v69.f64[1] = v43;
          *((double *)&v70 + 1) = v45;
        }
        BOOL v47 = v45 > v38 && v44 > v38;
        if (v47)
        {
          if ((v66 & 0x400) != 0) {
            *(unsigned char *)(v4[2] + 16) = 12;
          }
          if (!v26)
          {
            (*(void (**)(void *, void, void *))(*v4 + 496))(v4, 0, v88);
            double v43 = v69.f64[1];
          }
          double v48 = v67.f64[0] + v69.f64[0] - v36;
          v81.f64[0] = v48;
          v81.f64[1] = v48 + v38;
          double v82 = *(double *)&v70 + v48;
          double v83 = *(double *)&v70 + v48 + v38;
          double v49 = v43 - v36 + v39;
          double v50 = v49 + v38;
          double v77 = v49;
          double v78 = v49 + v38;
          double v51 = *((double *)&v70 + 1) + v49;
          double v79 = *((double *)&v70 + 1) + v49;
          double v80 = *((double *)&v70 + 1) + v49 + v38;
          int v74 = HIDWORD(v88[0]);
          int v75 = v88[0];
          uint64_t v76 = v88[0];
          v72[0] = HIDWORD(v88[0]);
          v72[1] = v88[0];
          uint64_t v73 = v88[0];
          float v52 = 1.0;
          if (v48 + v38 > *(double *)&v70 + v48)
          {
            float v53 = (*(double *)&v70 + v48 + v48 + v38) * 0.5;
            double v54 = v53;
            float v55 = (v53 - v48) * v40;
            float v52 = v55 * 2.0 + -0.9;
            v81.f64[1] = v54;
            double v82 = v54;
          }
          if (v50 > v51)
          {
            float v56 = (v51 + v50) * 0.5;
            double v57 = v56;
            float v58 = (v57 - v49) * v40;
            float v52 = (v58 * 2.0 + -0.9) * v52;
            double v78 = v57;
            double v79 = v57;
          }
          float16x4_t v59 = v23;
          if (v52 < 1.0)
          {
            float v60 = 0.0;
            if (v52 >= 0.0) {
              float v60 = v52;
            }
            float16x4_t v59 = vcvt_f16_f32(vmulq_n_f32(v64, v60));
          }
          *(float16x4_t *)(v4[2] + 8) = v59;
          double v61 = *(double *)((char *)a2 + v68);
          memset(v71, 0, 200);
          CA::Transform::set_affine((CA::Transform *)v71, v61, v11[1], v11[2], v11[3], v11[4], v11[5]);
          *((void *)&v71[9] + 1) = &v69;
          *(void *)&v71[10] = v71;
          DWORD2(v71[10]) = 63;
          memset((char *)&v71[10] + 12, 0, 28);
          CA::OGL::emit_nine_part_rect((uint64_t)v4, (uint64_t)&v71[9] + 8, (uint64_t)&v81, (uint64_t)&v77, (uint64_t)&v74, (uint64_t)v72, 0, 0, v65);
        }
        else
        {
          float64x2_t v69 = vaddq_f64(v69, v67);
          LOBYTE(v75) = 0;
          int v74 = 33686017;
          float64x2_t v81 = v69;
          double v83 = v69.f64[1];
          double v82 = v69.f64[0] + v44;
          double v84 = v69.f64[0] + v44;
          double v85 = v69.f64[1] + v45;
          float64_t v86 = v69.f64[0];
          double v87 = v69.f64[1] + v45;
          float v62 = (atomic_uint *)CA::Render::Path::new_path(0, 5u, (unsigned __int8 *)&v74, 4u, v81.f64, 0);
          double v77 = 0.0;
          CA::Transform::set_affine((CA::Transform *)v71, *(double *)((char *)a2 + v68), v11[1], v11[2], v11[3], v11[4], v11[5]);
          CA::OGL::emit_shadow_path((uint64_t)v4);
          if (v62 && atomic_fetch_add(v62 + 2, 0xFFFFFFFF) == 1) {
            (*(void (**)(atomic_uint *))(*(void *)v62 + 16))(v62);
          }
        }
        ++v25;
        uint64_t v14 = *((void *)this + 18);
        v24 += 32;
        BOOL v26 = v47;
      }
      while (v25 < *(void *)(v14 + 112));
      double v15 = (float16x4_t *)v4[2];
      float16x4_t v16 = v63;
    }
    v15[1] = v16;
    (*(void (**)(void *, void, void, __n128, __n128, __n128, __n128, __n128, __n128))(*v4 + 520))(v4, 0, 0, v5, v6, v7, v12, v8, v9);
    *(unsigned char *)(v4[2] + 16) = 0;
  }
  else
  {
    CA::CG::DrawShadow::draw_shadow(this, a2);
  }
}

uint64_t CA::CG::DrawOp::clipping_planes(CA::CG::DrawOp *this, CA::CG::Renderer *a2)
{
  return 0;
}

uint64_t CA::CG::DrawOp::supports_complex_blend_modes(CA::CG::DrawOp *this)
{
  return 1;
}

uint64_t CA::CG::DrawOp::shape_type(CA::CG::DrawOp *this, CA::CG::Renderer *a2)
{
  return 0;
}

uint64_t CA::CG::DrawShadow::debug_color(CA::CG::DrawShadow *this)
{
  return 4068948448;
}

uint64_t CA::CG::DrawOp::shape_extent_contains(CA::CG::DrawOp *this, CA::CG::Renderer *a2, const CA::Shape *a3)
{
  return 0;
}

uint64_t CA::CG::DrawOp::can_coalesce()
{
  return 0;
}

{
  return 0;
}

{
  return 0;
}

BOOL CA::CG::FillRectsShadow::may_flush(uint64_t a1)
{
  return ((*(uint64_t (**)(void))(**(void **)(a1 + 144) + 136))(*(void *)(a1 + 144)) & 5) == 0;
}

uint64_t CA::CG::DrawOp::compute_dod_corners()
{
  return 0;
}

void CA::CG::FillRectsShadow::~FillRectsShadow(CA::CG::FillRectsShadow *this)
{
  *(void *)this = &unk_1ED027588;
  int v2 = (atomic_uint *)*((void *)this + 19);
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  CA::CG::DrawOp::~DrawOp(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  atomic_uint *v2;
  uint64_t vars8;

  *(void *)this = &unk_1ED027588;
  int v2 = (atomic_uint *)*((void *)this + 19);
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }

  CA::CG::DrawOp::~DrawOp(this);
}

uint64_t CA::OGL::GetPerfHud(CA::OGL *this)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = CARecordCurrentDisplayGet();
  os_unfair_lock_lock(&CA::OGL::_perf_hud_list_lock);
  uint64_t v3 = CA::OGL::_perf_hud_list[0];
  int v2 = off_1E8F83CF0[0];
  if (CA::OGL::_perf_hud_list[0] == off_1E8F83CF0[0])
  {
LABEL_5:
    int64_t v5 = ((char *)off_1E8F83CF0[0] - (char *)CA::OGL::_perf_hud_list[0]) >> 4;
    if (qword_1E8F83D00 < (unint64_t)(v5 + 1))
    {
      __n128 v6 = off_1E8F83CF8;
      unint64_t v7 = (qword_1E8F83D00 + 1) | ((unint64_t)(qword_1E8F83D00 + 1) >> 1) | (((qword_1E8F83D00 + 1) | ((unint64_t)(qword_1E8F83D00 + 1) >> 1)) >> 2);
      unint64_t v8 = v7 | (v7 >> 4) | ((v7 | (v7 >> 4)) >> 8);
      unint64_t v9 = v8 | (v8 >> 16) | ((v8 | (v8 >> 16)) >> 32);
      if (v9 + 1 > v5 + 1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v5 + 1;
      }
      size_t v11 = (int *)malloc_type_malloc(16 * v10, 0x1020040D5A9D86FuLL);
      __n128 v12 = v11;
      uint64_t v13 = CA::OGL::_perf_hud_list[0];
      uint64_t v14 = off_1E8F83CF0[0];
      if (CA::OGL::_perf_hud_list[0] != off_1E8F83CF0[0])
      {
        double v15 = v11;
        do
        {
          long long v16 = *(_OWORD *)v13;
          v13 += 4;
          *(_OWORD *)double v15 = v16;
          v15 += 4;
        }
        while (v13 != v14);
      }
      if (v3 != v6) {
        free(CA::OGL::_perf_hud_list[0]);
      }
      int v2 = &v12[4 * v5];
      CA::OGL::_perf_hud_list[0] = v12;
      off_1E8F83CF0[0] = v2;
      qword_1E8F83D00 = v10;
    }
    *int v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v17 = off_1E8F83CF0[0];
    *off_1E8F83CF0[0] = v1;
    off_1E8F83CF0[0] = v17 + 4;
    operator new();
  }
  uint64_t v4 = CA::OGL::_perf_hud_list[0];
  while (*v4 != v1)
  {
    v4 += 4;
    if (v4 == off_1E8F83CF0[0]) {
      goto LABEL_5;
    }
  }
  uint64_t v18 = *((void *)v4 + 1);
  os_unfair_lock_unlock(&CA::OGL::_perf_hud_list_lock);
  return v18;
}

uint64_t ___ZN2CA3OGLL34register_for_thermal_notificationsEv_block_invoke(int a1, int token)
{
  v3[1] = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  uint64_t result = notify_get_state(token, v3);
  if (!result) {
    CA::OGL::thermal_level = LODWORD(v3[0]);
  }
  return result;
}

void CA::OGL::update_perf_hud_pstate(uint64_t a1, unsigned int a2)
{
  if ((a2 & 0x60) != 0)
  {
    if (CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::once != -1) {
      dispatch_once(&CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::once, &__block_literal_global_64);
    }
    if (!CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate
      && (CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_monitor_connecting & 1) == 0)
    {
      CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_current_options = 0;
    }
    if ((a2 & 0x40) != 0) {
      uint64_t v4 = (a2 >> 5) & 1 | 2;
    }
    else {
      uint64_t v4 = (a2 >> 5) & 1;
    }
    if (CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_current_options == v4)
    {
      if (!CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate)
      {
LABEL_12:
        if ((a2 & 0x20) != 0)
        {
          *(_OWORD *)(a1 + 568) = 0u;
          *(_OWORD *)(a1 + 552) = 0u;
        }
        else if ((a2 & 0x40) != 0)
        {
          *(void *)(a1 + 592) = 0;
          *(void *)(a1 + 584) = 0;
          *(_OWORD *)(a1 + 608) = 0u;
          *(_OWORD *)(a1 + 624) = 0u;
          *(_OWORD *)(a1 + 640) = 0u;
        }
        return;
      }
      goto LABEL_28;
    }
    if (CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate
      && CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_destroy)
    {
      if ((CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_monitor_connecting & 1) == 0)
      {
        CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_destroy();
        CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate = 0;
LABEL_25:
        if (CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_monitor_connecting) {
          goto LABEL_12;
        }
        if (!CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_connect) {
          goto LABEL_12;
        }
        CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_monitor_connecting = 1;
        CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_current_options = v4;
        CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_connect(v4, &__block_literal_global_83);
        if (!CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate) {
          goto LABEL_12;
        }
      }
    }
    else if (!CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate)
    {
      goto LABEL_25;
    }
LABEL_28:
    if ((a2 & 0x20) != 0)
    {
      if (CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_cpu) {
        uint64_t v7 = (uint64_t)(float)(CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_cpu()
      }
                            * 100.0);
      else {
        uint64_t v7 = 0;
      }
      if (CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_gpu) {
        uint64_t v8 = (uint64_t)(float)(CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_gpu(CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate)
      }
                            * 100.0);
      else {
        uint64_t v8 = 0;
      }
      if (CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_soc) {
        uint64_t v9 = (uint64_t)(float)(CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_soc(CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate)
      }
                            * 100.0);
      else {
        uint64_t v9 = 0;
      }
      uint64_t v10 = (uint64_t)CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_dram;
      if (CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_dram) {
        uint64_t v10 = (uint64_t)(float)(CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_dram(CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate)
      }
                             * 100.0);
      *(void *)(a1 + 552) = v7;
      *(void *)(a1 + 560) = v8;
      *(void *)(a1 + 568) = v9;
      *(void *)(a1 + 576) = v10;
    }
    else if ((a2 & 0x40) != 0)
    {
      if (CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_cpu_watts) {
        uint64_t v6 = (uint64_t)(float)(CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_cpu_watts()
      }
                            * 1000.0);
      else {
        uint64_t v6 = 0;
      }
      if (CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_gpu_watts) {
        uint64_t v11 = (uint64_t)(float)(CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_gpu_watts(CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate)
      }
                             * 1000.0);
      else {
        uint64_t v11 = 0;
      }
      if (CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_soc_watts) {
        uint64_t v12 = (uint64_t)(float)(CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_soc_watts(CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate)
      }
                             * 1000.0);
      else {
        uint64_t v12 = 0;
      }
      if (CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_dram_watts) {
        uint64_t v13 = (uint64_t)(float)(CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_dram_watts(CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate)
      }
                             * 1000.0);
      else {
        uint64_t v13 = 0;
      }
      if (CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_isp_watts) {
        uint64_t v14 = (uint64_t)(float)(CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_isp_watts(CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate)
      }
                             * 1000.0);
      else {
        uint64_t v14 = 0;
      }
      if (CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_ap_watts) {
        uint64_t v15 = (uint64_t)(float)(CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_ap_watts(CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate)
      }
                             * 1000.0);
      else {
        uint64_t v15 = 0;
      }
      if (CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_lostperf_ratio) {
        double lostperf_ratio = CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_lostperf_ratio(CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate);
      }
      else {
        double lostperf_ratio = 0.0;
      }
      float batterydrain_watts = 0.0;
      if (CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_batterydrain_watts) {
        float batterydrain_watts = CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_batterydrain_watts(CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate, 0.0);
      }
      *(void *)(a1 + 608) = v6;
      *(void *)(a1 + 616) = v11;
      *(void *)(a1 + 624) = v12;
      *(void *)(a1 + 632) = v13;
      *(void *)(a1 + 640) = v14;
      *(void *)(a1 + 648) = v15;
      if (batterydrain_watts < 0.0) {
        float v18 = 0.0;
      }
      else {
        float v18 = batterydrain_watts * 1000.0;
      }
      *(void *)(a1 + 584) = (uint64_t)v18;
      *(double *)(a1 + 592) = lostperf_ratio;
    }
    return;
  }
  if (CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate) {
    BOOL v5 = CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_destroy == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_current_options = 0;
    CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_destroy();
    CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate = 0;
  }
}

void ___ZN2CA3OGLL22update_perf_hud_pstateEPNS0_14PerformanceHUDEj_block_invoke_2(uint64_t a1, uint64_t a2)
{
  CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate = a2;
  CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_monitor_connecting = 0;
}

void *___ZN2CA3OGLL22update_perf_hud_pstateEPNS0_14PerformanceHUDEj_block_invoke()
{
  uint64_t result = dlopen("/usr/local/lib/libpstatemonitor.dylib", 2);
  if (result)
  {
    unsigned int v1 = result;
    CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_connect = (uint64_t (*)(void, void))dlsym(result, "pstate_monitor_connect");
    CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_destroCGFloat y = (uint64_t (*)(void))dlsym(v1, "pstate_monitor_destroy");
    CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_cpu = (float (*)(void))dlsym(v1, "pstate_monitor_get_CPU_pstate");
    CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_gpu = (float (*)(void))dlsym(v1, "pstate_monitor_get_GPU_pstate");
    CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_sodouble c = (float (*)(void))dlsym(v1, "pstate_monitor_get_SOC_pstate");
    CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_drauint64_t m = (float (*)(void))dlsym(v1, "pstate_monitor_get_DRAM_pstate");
    CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_cpu_watts = (float (*)(void))dlsym(v1, "pstate_monitor_get_CPU_watts");
    CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_gpu_watts = (float (*)(void))dlsym(v1, "pstate_monitor_get_GPU_watts");
    CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_soc_watts = (float (*)(void))dlsym(v1, "pstate_monitor_get_SOC_watts");
    CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_dram_watts = (float (*)(void))dlsym(v1, "pstate_monitor_get_DRAM_watts");
    CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_isp_watts = (float (*)(void))dlsym(v1, "pstate_monitor_get_ISP_watts");
    CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_ap_watts = (float (*)(void))dlsym(v1, "pstate_monitor_get_AP_watts");
    CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_float batterydrain_watts = (float (*)(void, double))dlsym(v1, "pstate_monitor_get_BatteryDrain_watts");
    uint64_t result = dlsym(v1, "pstate_monitor_get_LostPerf_ratio");
    CA::OGL::update_perf_hud_pstate(CA::OGL::PerformanceHUD *,unsigned int)::pstate_get_double lostperf_ratio = (float (*)(void))result;
  }
  return result;
}

CA::OGL::DebugRenderer *std::unique_ptr<CA::OGL::DebugRenderer>::reset[abi:nn180100](CA::OGL::DebugRenderer **a1, CA::OGL::DebugRenderer *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    CA::OGL::DebugRenderer::~DebugRenderer(result);
    JUMPOUT(0x185323DC0);
  }
  return result;
}

uint64_t ___ZN2CA3OGL7Context20update_debug_messageEPKNS_9TransformE_block_invoke()
{
  uint64_t result = MGGetBoolAnswer();
  CA::OGL::Context::update_debug_message(CA::Transform const*)::show_message = result;
  return result;
}

uint64_t CA::OGL::GLESContext::update_image(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  v32[1] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void **)(a1 + 2096);
  v32[0] = 0;
  int v31 = 0;
  __int16 v30 = 0;
  uint64_t result = CA::OGL::GLESContext::image_parameters(a1, *(unsigned __int8 *)(a3 + 152), 0, (int *)v32 + 1, (int *)v32, &v31, (char *)&v30 + 1, &v30);
  uint64_t v10 = HIDWORD(v32[0]);
  if (HIDWORD(v32[0]))
  {
    int v11 = *(unsigned __int8 *)(a2 + 72);
    uint64_t result = CA::OGL::GLESContext::update_texture_plane((CA::OGL::GLContext *)a1, a2, a4, 0);
    if (result)
    {
      int v12 = *(_DWORD *)(a2 + 52);
      *(_DWORD *)(a2 + 52) = v12 & 0xC0FFFFFF | ((HIBYTE(v30) & 0x3F) << 24);
      *(unsigned char *)(a2 + 74) = (*(unsigned char *)(a2 + 74) & 0xFD | (2 * v30)) ^ 2;
      if ((*(unsigned char *)(a2 + 59) & 4) != 0)
      {
        ((void (*)(void, void, uint64_t, uint64_t))v8[305])(*v8, (unsigned __int16)v12, 10495, 1);
        *(_WORD *)(a2 + 58) &= ~0x400u;
      }
      unint64_t v13 = *(unsigned __int8 *)(a3 + 152);
      if (v13 > 0x25) {
        uint64_t v14 = 0;
      }
      else {
        uint64_t v14 = dword_184999468[v13];
      }
      uint64_t v16 = *(unsigned int *)(a3 + 16);
      uint64_t v15 = *(unsigned int *)(a3 + 20);
      uint64_t v17 = *(void *)(a3 + 96);
      if ((*(unsigned char *)(a1 + 2142) & 8) != 0 && v14 != 4) {
        ((void (*)(void, uint64_t, uint64_t))v8[196])(*v8, 3317, v14);
      }
      uint64_t v18 = *(unsigned __int16 *)(a2 + 52);
      if (v18 == 3553 && *(unsigned char *)(a3 + 153) != 1 && (*(unsigned char *)(a2 + 73) & 2) != 0)
      {
        ((void (*)(void, uint64_t, uint64_t, void))v8[305])(*v8, 3553, 33084, 0);
        uint64_t result = ((uint64_t (*)(void, void, uint64_t, void))v8[305])(*v8, *(unsigned __int16 *)(a2 + 52), 33085, *(unsigned __int8 *)(a3 + 153) - 1);
        if (*(unsigned char *)(a3 + 153))
        {
          int v29 = v11;
          unint64_t v21 = 0;
          unint64_t v22 = v14;
          int v23 = v31;
          unsigned int v28 = v32[0];
          unint64_t v26 = v22;
          uint64_t v27 = a3 + 160;
          do
          {
            if (v17 && (*(unsigned char *)(a1 + 2142) & 8) != 0) {
              ((void (*)(void, uint64_t, unint64_t))v8[196])(*v8, 3314, *(void *)(v27 + 8 * v21) / v26);
            }
            uint64_t v24 = *v8;
            uint64_t v25 = *(unsigned __int16 *)(a2 + 52);
            if (v29) {
              uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, unint64_t, void, void, uint64_t, uint64_t, void, int, uint64_t))v8[308])(v24, v25, v21, 0, 0, v16, v15, v28, v23, v17);
            }
            else {
              uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, void, void, int, uint64_t))v8[302])(v24, v25, v21, v10, v16, v15, 0, v28, v23, v17);
            }
            if (v17) {
              v17 += *(void *)(v27 + 8 * v21) * v15;
            }
            if (v16 <= 1) {
              uint64_t v16 = 1;
            }
            else {
              uint64_t v16 = v16 >> 1;
            }
            if (v15 <= 1) {
              uint64_t v15 = 1;
            }
            else {
              uint64_t v15 = v15 >> 1;
            }
            ++v21;
          }
          while (v21 < *(unsigned __int8 *)(a3 + 153));
        }
        char v20 = *(unsigned char *)(a2 + 73) | 1;
      }
      else
      {
        if (v17 && (*(unsigned char *)(a1 + 2142) & 8) != 0)
        {
          ((void (*)(void, uint64_t, unint64_t))v8[196])(*v8, 3314, *(void *)(a3 + 160) / (unint64_t)v14);
          uint64_t v18 = *(unsigned __int16 *)(a2 + 52);
        }
        uint64_t v19 = *v8;
        if (v11) {
          uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, void, void, void, uint64_t, uint64_t, void, int, uint64_t))v8[308])(v19, v18, 0, 0, 0, v16, v15, LODWORD(v32[0]), v31, v17);
        }
        else {
          uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, void, void, int, uint64_t))v8[302])(v19, v18, 0, v10, v16, v15, 0, LODWORD(v32[0]), v31, v17);
        }
        char v20 = *(unsigned char *)(a2 + 73) & 0xFE;
      }
      *(unsigned char *)(a2 + 73) = v20;
      if (v17)
      {
        if ((*(unsigned char *)(a1 + 2142) & 8) != 0) {
          ((void (*)(void, uint64_t, void))v8[196])(*v8, 3314, 0);
        }
        *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 36);
        uint64_t result = CA::Render::Image::data_size((CA::Render::Image *)a3);
        *(void *)(a1 + 728) += result;
      }
      else
      {
        *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 36);
      }
    }
  }
  return result;
}

uint64_t CA::OGL::GLESContext::image_parameters(uint64_t result, int a2, int a3, int *a4, int *a5, int *a6, char *a7, unsigned char *a8)
{
  *a6 = 0;
  *a5 = 0;
  *a4 = 0;
  *a7 = 0;
  *a8 = 1;
  if (!a3)
  {
    switch(a2)
    {
      case 0:
        *a4 = 6408;
        *a5 = 32993;
        *a6 = 5121;
        char v8 = 2;
        goto LABEL_56;
      case 1:
        goto LABEL_7;
      case 2:
        *a4 = 6408;
        *a5 = 32993;
        *a6 = 5121;
        char v8 = 3;
        goto LABEL_56;
      case 3:
        *a7 = 1;
LABEL_7:
        *a4 = 6408;
        int v9 = 32993;
        goto LABEL_30;
      case 5:
        *a7 = 1;
        *a4 = 6408;
        int v10 = 32993;
        goto LABEL_33;
      case 8:
        goto LABEL_10;
      case 9:
        *a7 = 21;
LABEL_10:
        int v9 = 6406;
        goto LABEL_29;
      case 10:
        int v9 = 6409;
        goto LABEL_29;
      case 11:
        goto LABEL_13;
      case 12:
        *a7 = 1;
LABEL_13:
        int v9 = 6408;
        goto LABEL_29;
      case 13:
        goto LABEL_20;
      case 14:
        int v11 = *(_DWORD *)(result + 2140);
        if ((v11 & 0x2000) == 0) {
          return result;
        }
        if ((v11 & 0x20000) != 0) {
          int v12 = 34836;
        }
        else {
          int v12 = 6408;
        }
        *a4 = v12;
        *a5 = 6408;
        goto LABEL_41;
      case 17:
        *a7 = 1;
LABEL_20:
        int v13 = *(_DWORD *)(result + 2140);
        if ((v13 & 0x800) == 0) {
          return result;
        }
        if ((v13 & 0x20000) != 0) {
          int v14 = 34842;
        }
        else {
          int v14 = 6408;
        }
        *a4 = v14;
        *a5 = 6408;
        if ((*(_DWORD *)(result + 2140) & 0x20000) != 0) {
          int v15 = 5131;
        }
        else {
          int v15 = 36193;
        }
        goto LABEL_38;
      case 18:
        goto LABEL_28;
      case 19:
        *a7 = 1;
LABEL_28:
        int v9 = 6410;
LABEL_29:
        *a4 = v9;
LABEL_30:
        *a5 = v9;
        int v16 = 5121;
        goto LABEL_31;
      case 20:
        int v10 = 6408;
        *a4 = 6408;
LABEL_33:
        *a5 = v10;
        int v16 = 32820;
        goto LABEL_31;
      case 23:
        if ((*(unsigned char *)(result + 2141) & 8) == 0) {
          return result;
        }
        *a4 = 6406;
        *a5 = 6406;
        *a6 = 36193;
        *a7 = 21;
        goto LABEL_61;
      case 24:
        if ((*(unsigned char *)(result + 2141) & 0x20) == 0) {
          return result;
        }
        *a4 = 6406;
        *a5 = 6406;
        *a6 = 5126;
        *a7 = 21;
        goto LABEL_42;
      case 25:
        if ((*(unsigned char *)(result + 2141) & 8) == 0) {
          return result;
        }
        *a4 = 6409;
        *a5 = 6409;
        int v15 = 36193;
LABEL_38:
        *a6 = v15;
LABEL_61:
        int v17 = (*(_DWORD *)(result + 2140) >> 12) & 1;
        goto LABEL_62;
      case 26:
        if ((*(unsigned char *)(result + 2141) & 0x20) == 0) {
          return result;
        }
        *a4 = 6409;
        *a5 = 6409;
LABEL_41:
        *a6 = 5126;
LABEL_42:
        int v17 = (*(_DWORD *)(result + 2140) >> 14) & 1;
LABEL_62:
        *a8 = v17;
        return result;
      case 27:
        int v21 = 6410;
        goto LABEL_64;
      case 28:
        if ((*(_DWORD *)(result + 2140) & 0x20000) != 0) {
          int v18 = 33327;
        }
        else {
          int v18 = 6410;
        }
        *a4 = v18;
        if ((*(_DWORD *)(result + 2140) & 0x20000) != 0) {
          int v19 = 33319;
        }
        else {
          int v19 = 6410;
        }
        *a5 = v19;
        if ((*(_DWORD *)(result + 2140) & 0x20000) != 0) {
          int v20 = 5131;
        }
        else {
          int v20 = 36193;
        }
        *a6 = v20;
        if ((*(unsigned char *)(result + 2142) & 2) == 0) {
          return result;
        }
        char v8 = 31;
        goto LABEL_56;
      case 33:
        if ((*(unsigned char *)(result + 2140) & 0x20) == 0) {
          return result;
        }
        *a4 = 32857;
        *a5 = 6408;
        *a6 = 33640;
        char v8 = 23;
LABEL_56:
        *a7 = v8;
        break;
      case 34:
        if ((*(unsigned char *)(result + 2140) & 0x20) == 0) {
          return result;
        }
        int v21 = 35446;
LABEL_64:
        *a4 = v21;
        *a5 = v21;
        int v16 = 5123;
LABEL_31:
        *a6 = v16;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t CA::OGL::GLESContext::update_texture_plane(CA::OGL::GLContext *this, uint64_t a2, int a3, unsigned int a4)
{
  unsigned int v8 = *(unsigned __int8 *)(a2 + 72);
  if ((int)v8 <= (int)a4)
  {
    if (v8 <= 1)
    {
      int v12 = (void *)*((void *)this + 262);
      uint64_t v13 = a2 + 4 * a4;
      uint64_t v11 = 1;
      ((void (*)(void, uint64_t, uint64_t))v12[99])(*v12, 1, v13 + 64);
      uint64_t v14 = *(unsigned int *)(v13 + 64);
      uint64_t v15 = *((void *)this + 2);
      *(_WORD *)(v15 + 2 * (a4 + a3) + 144) = *(_DWORD *)(a2 + 52);
      *(void *)(v15 + 8 * (a4 + a3) + 176) = v14;
      CA::OGL::GLContext::update_texture((uint64_t)this, a4 + a3);
      *(_WORD *)(a2 + 58) &= 0xFFE7u;
      uint64_t v16 = *(unsigned __int16 *)(a2 + 52);
      *(unsigned char *)(a2 + 54) = 17;
      ((void (*)(void, uint64_t, uint64_t, uint64_t))v12[305])(*v12, v16, 10242, 33071);
      ((void (*)(void, void, uint64_t, uint64_t))v12[305])(*v12, *(unsigned __int16 *)(a2 + 52), 10243, 33071);
      ((void (*)(void, void, uint64_t, uint64_t))v12[305])(*v12, *(unsigned __int16 *)(a2 + 52), 10241, 9729);
      ((void (*)(void, void, uint64_t, uint64_t))v12[305])(*v12, *(unsigned __int16 *)(a2 + 52), 10240, 9729);
      ++*(unsigned char *)(a2 + 72);
    }
    else
    {
      return 0;
    }
  }
  else
  {
    uint64_t v9 = *(unsigned int *)(a2 + 4 * a4 + 64);
    uint64_t v10 = *((void *)this + 2);
    *(_WORD *)(v10 + 2 * (a4 + a3) + 144) = *(_DWORD *)(a2 + 52);
    *(void *)(v10 + 8 * (a4 + a3) + 176) = v9;
    CA::OGL::GLContext::update_texture((uint64_t)this, a4 + a3);
    return 1;
  }
  return v11;
}

uint64_t CA::OGL::GLESContext::flush_texture_cache(CA::OGL::GLESContext *this)
{
  return (*(uint64_t (**)(void))(*((void *)this + 262) + 728))(**((void **)this + 262));
}

__n128 CA::OGL::GLESContext::bind_destination_with_filters(uint64_t a1, int a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 2180);
  if (v2)
  {
    uint64_t v3 = *(__n128 **)(a1 + 16);
    v3[9].n128_u16[a2] = *(_DWORD *)(a1 + 2176);
    v3[11].n128_u64[a2] = v2;
    __n128 result = *(__n128 *)(a1 + 2184);
    v3[8] = result;
  }
  return result;
}

uint64_t CA::OGL::GLESContext::destination_texture_target(CA::OGL::GLESContext *this)
{
  return *((unsigned int *)this + 544);
}

uint64_t CA::OGL::GLESContext::surface_texture_target(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 96);
}

BOOL CA::OGL::GLESContext::ensure_destination_texture(int8x8_t *this, int32x2_t *a2, int32x2_t a3, int32x2_t a4)
{
  __int32 v4 = this[272].i32[1];
  if (v4)
  {
    a3.i32[0] = 3553;
    a4.i32[0] = this[272].i32[0];
    int8x8_t v5 = vbsl_s8((int8x8_t)vdup_lane_s32(vceq_s32(a4, a3), 0), (int8x8_t)0x3F0000003F000000, (int8x8_t)vmul_f32(vcvt_f32_s32(a2[1]), (float32x2_t)0x3F0000003F000000));
    this[273].i32[0] = v5.i32[0];
    float v6 = *(float *)&v5.i32[1];
    if ((this[276].i8[0] & 8) != 0) {
      float v6 = -*(float *)&v5.i32[1];
    }
    *(float *)&this[273].i32[1] = v6;
    this[274] = v5;
  }
  return v4 != 0;
}

uint64_t CA::OGL::GLESContext::bind_noise(uint64_t this, unsigned int a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *(unsigned int *)(this + 2168);
  if (v4)
  {
    uint64_t v5 = *(void *)(this + 16);
    *(_WORD *)(v5 + 2 * a2 + 144) = 3553;
    *(void *)(v5 + 8 * a2 + 176) = v4;
  }
  else
  {
    float v6 = *(void **)(this + 2096);
    ((void (*)(void, uint64_t, uint64_t))v6[99])(*v6, 1, this + 2168);
    uint64_t v7 = *(unsigned int *)(v3 + 2168);
    uint64_t v8 = *(void *)(v3 + 16);
    *(_WORD *)(v8 + 2 * a2 + 144) = 3553;
    *(void *)(v8 + 8 * a2 + 176) = v7;
    CA::OGL::GLContext::update_texture(v3, a2);
    ((void (*)(void, uint64_t, uint64_t, uint64_t))v6[305])(*v6, 3553, 10241, 9728);
    ((void (*)(void, uint64_t, uint64_t, uint64_t))v6[305])(*v6, 3553, 10240, 9728);
    ((void (*)(void, uint64_t, uint64_t, uint64_t))v6[305])(*v6, 3553, 10242, 10497);
    ((void (*)(void, uint64_t, uint64_t, uint64_t))v6[305])(*v6, 3553, 10243, 10497);
    return ((uint64_t (*)(void, uint64_t, void, uint64_t, uint64_t, uint64_t, void, uint64_t, int, void *))v6[302])(*v6, 3553, 0, 6408, 32, 32, 0, 32993, 5121, &CA::OGL::noise_data);
  }
  return this;
}

uint64_t CA::OGL::GLESContext::window_bounds(uint64_t this, int32x2_t *a2)
{
  unint64_t v2 = *(int32x2_t **)(this + 264);
  if (v2)
  {
    int32x2_t v3 = vsub_s32(*a2, v2[4]);
    *a2 = v3;
    if (((v2[14].u16[0] | (v2[14].u8[2] << 16)) & 0x10000) != 0)
    {
      __int32 v5 = a2[1].i32[0];
      __int32 v4 = a2[1].i32[1];
      a2->i32[0] = v2[5].i32[1] - v4 - v3.i32[1];
      a2->i32[1] = v3.i32[0];
      a2[1].i32[0] = v4;
      a2[1].i32[1] = v5;
    }
  }
  else
  {
    if (*(unsigned char *)(this + 432))
    {
      int v6 = *(_DWORD *)(this + 212) - (a2->i32[1] + a2[1].i32[1]);
      a2->i32[1] = v6;
    }
    else
    {
      int v6 = a2->i32[1];
    }
    int v7 = v6 - *(_DWORD *)(this + 204);
    a2->i32[0] -= *(_DWORD *)(this + 200);
    a2->i32[1] = v7;
  }
  return this;
}

uint64_t CA::OGL::GLESContext::shader_preamble(CA::OGL::GLESContext *this)
{
  return *((void *)this + 268);
}

uint64_t CA::OGL::GLESContext::destination_rotated_or_flipped(CA::OGL::GLESContext *this)
{
  uint64_t v1 = *((void *)this + 33);
  if (v1) {
    return *(unsigned char *)(v1 + 114) & 1;
  }
  else {
    return 0;
  }
}

double CA::OGL::Context::last_command_buffer_duration(CA::OGL::Context *this)
{
  return 0.0;
}

uint64_t CA::OGL::Context::set_destination(CA::OGL::Context *this, void *a2, uint64_t a3, unint64_t a4, void *a5, uint64_t a6, int a7, int a8, int a9, int a10)
{
  return 0;
}

void CA::OGL::Context::assembly_buffer_bounds(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

double CA::OGL::Context::hdr_scale(CA::OGL::Context *this)
{
  return 0.0;
}

uint64_t CA::OGL::Context::destination_bit_depth(CA::OGL::Context *this)
{
  return 8;
}

uint64_t CA::OGL::Context::surface_pixel_size()
{
  return 4;
}

uint64_t CA::OGL::Context::backward_dm()
{
  return 0;
}

uint64_t CA::OGL::Context::get_surface()
{
  return 0;
}

uint64_t CA::OGL::GLESContext::make_buffer_current(CA::OGL::GLESContext *this, void (**a2)(CA::OGL::GLESContext *this, CA::WindowServer::Surface *a2, void *a3))
{
  if (a2)
  {
    uint64_t result = (*((uint64_t (**)(void (**)(CA::OGL::GLESContext *, CA::WindowServer::Surface *, void *)))*a2
              + 20))(a2);
    if (!result) {
      return result;
    }
    uint64_t v5 = result;
    if (a2[10] != CA::OGL::GLESContext::release_display_surface || (int v7 = (char *)a2[9]) == 0)
    {
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      int v7 = (char *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x78uLL, 0x743898A5uLL);
      *(_DWORD *)int v7 = 1;
      *((_DWORD *)v7 + 17) = 15;
      v7[72] |= 1u;
      *(_WORD *)(v7 + 75) |= 0x10u;
      *((_WORD *)v7 + 56) = *((_WORD *)v7 + 56) | 0x100;
      *((void *)v7 + 10) = a2;
      *((void *)v7 + 11) = this;
      *((_DWORD *)v7 + 24) = 3553;
      *((_DWORD *)v7 + 27) = 35450;
      uint64_t v8 = (void *)*((void *)this + 262);
      ((void (*)(void, uint64_t, char *))v8[99])(*v8, 1, v7 + 100);
      ((void (*)(void, void, void))v8[6])(*v8, *((unsigned int *)v7 + 24), *((unsigned int *)v7 + 25));
      ((void (*)(void, void, uint64_t, uint64_t))v8[305])(*v8, *((unsigned int *)v7 + 24), 10241, 9728);
      ((void (*)(void, void, uint64_t, uint64_t))v8[305])(*v8, *((unsigned int *)v7 + 24), 10240, 9728);
      ((void (*)(void, void, uint64_t, uint64_t))v8[305])(*v8, *((unsigned int *)v7 + 24), 10242, 33071);
      ((void (*)(void, void, uint64_t, uint64_t))v8[305])(*v8, *((unsigned int *)v7 + 24), 10243, 33071);
      [*((id *)this + 23) attachImage:*((unsigned int *)v7 + 24) toCoreSurface:v5 invertedRender:0];
      ((void (*)(void, uint64_t, char *))v8[675])(*v8, 1, v7 + 104);
      ((void (*)(void, uint64_t, void))v8[673])(*v8, 36160, *((unsigned int *)v7 + 26));
      ((void (*)(void, uint64_t, uint64_t, void, void, void))v8[678])(*v8, 36160, 36064, *((unsigned int *)v7 + 24), *((unsigned int *)v7 + 25), 0);
      ((void (*)(void, uint64_t, void))v8[673])(*v8, 36160, 0);
      if ((char *)a2[9] != v7)
      {
        uint64_t v9 = a2[10];
        if (v9)
        {
          if (v9 != CA::OGL::GLESContext::release_display_surface) {
            ((void (*)(void (**)(CA::OGL::GLESContext *, CA::WindowServer::Surface *, void *)))v9)(a2);
          }
        }
      }
      a2[9] = (void (*)(CA::OGL::GLESContext *, CA::WindowServer::Surface *, void *))v7;
      a2[10] = CA::OGL::GLESContext::release_display_surface;
      uint64_t v10 = *((void *)this + 275);
      uint64_t v11 = (malloc_zone_t *)get_malloc_zone();
      int v12 = malloc_type_zone_malloc(v11, 0x10uLL, 0x8BB15036uLL);
      *int v12 = v7;
      v12[1] = v10;
      *((void *)this + 275) = v12;
    }
    *(void *)&long long v14 = a2[7];
    *((void *)&v14 + 1) = *((void *)this + 25);
    int v15 = *((unsigned __int16 *)v7 + 56);
    *(_OWORD *)(v7 + 24) = v14;
    *((void *)v7 + 5) = *((void *)this + 26);
    unsigned int v16 = (v15 | (v7[114] << 16)) & 0xFFFEFFFF;
    *((_WORD *)v7 + 56) = v16;
    v7[114] = BYTE2(v16);
    uint64_t v17 = *((void *)this + 24);
    if (v17)
    {
      uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 16))(v17);
      if (v18)
      {
        if ((*((unsigned char *)this + 2140) & 0x40) != 0
          && (*(_WORD *)(v18 + 656) & 0xFD) == 1
          && (v7[24] & 0x1F) == 0
          && (v7[28] & 0x1F) == 0)
        {
          int v19 = *((unsigned __int16 *)v7 + 56);
          v7[114] = (v19 | (v7[114] << 16) | 0x10000u) >> 16;
          *((_WORD *)v7 + 56) = v19;
        }
      }
    }
    CA::OGL::Context::push_surface((uint64_t)this, (uint64_t)v7, 0, 0, 0);
  }
  else
  {
    CA::OGL::Context::pop_surface(this);
    uint64_t v13 = *((void *)this + 34);
    if (v13 != *((void *)this + 33)) {
      goto LABEL_10;
    }
    if (v13) {
      LODWORD(v13) = (*(unsigned __int8 *)(v13 + 72) >> 1) & 0x1F;
    }
    if (*((_DWORD *)this + 65) != v13) {
LABEL_10:
    }
      CA::OGL::Context::prepare_destination_(this);
  }
  return 1;
}

void CA::OGL::GLESContext::release_display_surface(CA::OGL::GLESContext *this, CA::WindowServer::Surface *a2, void *a3)
{
  uint64_t v4 = *((void *)a2 + 11);
  uint64_t v5 = *(void **)(v4 + 2200);
  if (v5) {
    *(void *)(v4 + 2200) = x_list_remove(v5, (uint64_t)a2);
  }
  *((void *)a2 + 10) = 0;

  CA::OGL::GLESContext::finalize_surface(v4, (uint64_t)a2);
}

void CA::OGL::GLESContext::finalize_surface(uint64_t a1, uint64_t a2)
{
  int32x2_t v3 = *(void **)(a1 + 2096);
  if (*(_DWORD *)(a2 + 100)) {
    ((void (*)(void, uint64_t, uint64_t))v3[60])(*v3, 1, a2 + 100);
  }
  if (*(_DWORD *)(a2 + 104)) {
    ((void (*)(void, uint64_t, uint64_t))v3[674])(*v3, 1, a2 + 104);
  }
  uint64_t v4 = *(CA::WindowServer::Surface **)(a2 + 80);
  if (v4) {
    CA::WindowServer::Surface::unref(v4);
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, (void *)a2);
}

uint64_t CA::OGL::Context::read_destination(CA::OGL::Context *this)
{
  return 0;
}

uint64_t CA::OGL::Context::read_surface()
{
  return 0;
}

uint64_t CA::OGL::Context::tile_downsample_surface()
{
  return 0;
}

uint64_t CA::OGL::Context::compute_surface_apl_dimming_factor()
{
  return 0;
}

uint64_t CA::OGL::Context::create_buffer(CA::OGL::Context *this)
{
  return 0;
}

uint64_t CA::OGL::Context::default_buffer_size(CA::OGL::Context *this)
{
  return 0;
}

uint64_t CA::OGL::Context::set_surface_volatile()
{
  return 1;
}

uint64_t CA::OGL::GLESContext::attached_to_framebuffer_p(CA::OGL::GLESContext *this)
{
  uint64_t v1 = *((void *)this + 33);
  if (v1) {
    return HIBYTE(*(unsigned __int16 *)(v1 + 112)) & 1;
  }
  else {
    return 1;
  }
}

uint64_t CA::OGL::GLESContext::set_surface(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  int32x2_t v3 = *(void **)(a1 + 2096);
  if (a2)
  {
    uint64_t v5 = *(unsigned int *)(a2 + 104);
    uint64_t v6 = *v3;
    if (v5)
    {
      ((void (*)(uint64_t, uint64_t, uint64_t))v3[673])(v6, 36160, v5);
    }
    else
    {
      ((void (*)(uint64_t, uint64_t, uint64_t))v3[675])(v6, 1, a2 + 104);
      ((void (*)(void, uint64_t, void))v3[673])(*v3, 36160, *(unsigned int *)(a2 + 104));
      ((void (*)(void, uint64_t, uint64_t, void, void, void))v3[678])(*v3, 36160, 36064, *(unsigned int *)(a2 + 96), *(unsigned int *)(a2 + 100), 0);
    }
    if ((*(unsigned char *)(a1 + 2140) & 0x40) != 0)
    {
      int v7 = ((*(unsigned __int16 *)(a2 + 112) | (*(unsigned __int8 *)(a2 + 114) << 16)) & 0x10000) != 0 ? 35453 : 35450;
      int v17 = v7;
      if (*(_DWORD *)(a2 + 108) != v7)
      {
        ((void (*)(void, uint64_t, uint64_t, int *))v3[1025])(*v3, 36160, 35449, &v17);
        *(_DWORD *)(a2 + 108) = v17;
      }
    }
    int v8 = *(_DWORD *)(a2 + 24);
    int v9 = *(_DWORD *)(a2 + 28);
    int v10 = (*(unsigned __int16 *)(a2 + 112) | (*(unsigned __int8 *)(a2 + 114) << 16)) & 0x10000;
    uint64_t v11 = *(void *)(a1 + 2096);
    if (v10) {
      int v12 = *(_DWORD *)(a2 + 24);
    }
    else {
      int v12 = *(_DWORD *)(a2 + 28);
    }
    if (((*(unsigned __int16 *)(a2 + 112) | (*(unsigned __int8 *)(a2 + 114) << 16)) & 0x10000) != 0) {
      int v13 = *(_DWORD *)(a2 + 28);
    }
    else {
      int v13 = *(_DWORD *)(a2 + 24);
    }
    if (*(_DWORD *)(a1 + 2064)
      || *(_DWORD *)(a1 + 2068)
      || *(_DWORD *)(a1 + 2072) != v13
      || *(_DWORD *)(a1 + 2076) != v12)
    {
      *(void *)(a1 + 2064) = 0;
      *(_DWORD *)(a1 + 2072) = v13;
      *(_DWORD *)(a1 + 2076) = v12;
      (*(void (**)(void, void, void))(v11 + 2688))(*(void *)v11, 0, 0);
      ++*(_DWORD *)(a1 + 256);
      int v8 = *(_DWORD *)(a2 + 24);
      int v9 = *(_DWORD *)(a2 + 28);
      int v10 = (*(unsigned char *)(a2 + 114) & 1) << 16;
    }
    CA::OGL::GLContext::projection_matrix(a1, (float)*(int *)(a2 + 32), (float)(v8 + *(_DWORD *)(a2 + 32)), (float)*(int *)(a2 + 36), (float)(v9 + *(_DWORD *)(a2 + 36)), v10 != 0);
    if ((*(_WORD *)(a2 + 75) & 0x20) != 0)
    {
      if (*(unsigned char *)(a1 + 65))
      {
        ((void (*)(void, uint64_t))v3[64])(*v3, 3089);
        *(unsigned char *)(a1 + 65) &= ~1u;
      }
      ((void (*)(void, uint64_t))v3[11])(*v3, 0x4000);
      *(_WORD *)(a2 + 75) = *(_WORD *)(a2 + 75) & 0xFF1F | 0xC0;
    }
    if ((*(unsigned char *)(a2 + 68) & 0x40) != 0)
    {
      int v15 = *(unsigned __int16 *)(a2 + 112);
      uint64_t v14 = a2 + 112;
      *(unsigned char *)(v14 + 2) = (v15 | (*(unsigned __int8 *)(v14 + 2) << 16) | 0x20000u) >> 16;
      *(_WORD *)uint64_t v14 = v15;
    }
  }
  else
  {
    ((void (*)(void, uint64_t, void))v3[673])(*v3, 36160, *(unsigned int *)(a1 + 2172));
    if (*(_DWORD *)(a1 + 2064) != *(_DWORD *)(a1 + 1912)
      || *(_DWORD *)(a1 + 2068) != *(_DWORD *)(a1 + 1916)
      || *(_DWORD *)(a1 + 2072) != *(_DWORD *)(a1 + 1920)
      || *(_DWORD *)(a1 + 2076) != *(_DWORD *)(a1 + 1924))
    {
      (*(void (**)(void))(*(void *)(a1 + 2096) + 2688))(**(void **)(a1 + 2096));
      *(_OWORD *)(a1 + 2064) = *(_OWORD *)(a1 + 1912);
      ++*(_DWORD *)(a1 + 256);
    }
    if (*(void *)(a1 + 2056) != a1 + 1928)
    {
      *(void *)(a1 + 2056) = a1 + 1928;
      ++*(_DWORD *)(a1 + 256);
    }
  }
  *(void *)(a1 + 56) = -1;
  *(unsigned char *)(a1 + 2208) |= 4u;
  return 1;
}

uint64_t CA::OGL::GLESContext::bind_surface_impl(uint64_t this, uint64_t a2, int a3, unsigned int a4, unsigned int a5, unsigned int a6)
{
  int v6 = *(_DWORD *)(a2 + 96);
  if (!v6) {
    return this;
  }
  uint64_t v10 = this;
  uint64_t v11 = *(void **)(this + 2096);
  uint64_t v12 = *(unsigned int *)(a2 + 100);
  uint64_t v13 = *(void *)(this + 16);
  *(_WORD *)(v13 + 2 * a4 + 144) = v6;
  *(void *)(v13 + 8 * a4 + 176) = v12;
  if (a5 == 2)
  {
    if ((*(unsigned char *)(a2 + 68) & 0x40) != 0)
    {
      if (((*(unsigned __int16 *)(a2 + 112) | (*(unsigned __int8 *)(a2 + 114) << 16)) & 0x20000) != 0)
      {
        CA::OGL::GLContext::update_texture(this, a4);
        this = ((uint64_t (*)(void, void))v11[682])(*v11, *(unsigned int *)(a2 + 96));
        unsigned int v14 = (*(unsigned __int16 *)(a2 + 112) | (*(unsigned __int8 *)(a2 + 114) << 16)) & 0xFFFDFFFF;
        *(_WORD *)(a2 + 112) = *(_WORD *)(a2 + 112);
        *(unsigned char *)(a2 + 114) = BYTE2(v14);
      }
      a5 = 2;
      goto LABEL_9;
    }
  }
  else if (a5 < 4)
  {
    if (a6 > 3) {
      int v15 = 1;
    }
    else {
      int v15 = a6;
    }
    if (a5 == 3) {
      int v16 = 1;
    }
    else {
      int v16 = a5;
    }
    goto LABEL_19;
  }
  a5 = 1;
LABEL_9:
  if (a6 > 3) {
    int v15 = 1;
  }
  else {
    int v15 = a6;
  }
  int v16 = a5;
LABEL_19:
  if ((*(unsigned char *)(v10 + 2140) & 4) != 0) {
    unsigned int v17 = a5;
  }
  else {
    unsigned int v17 = v16;
  }
  if ((*(unsigned char *)(v10 + 2140) & 4) == 0 && v15 == 3) {
    unsigned int v19 = 1;
  }
  else {
    unsigned int v19 = v15;
  }
  if ((*(_WORD *)(a2 + 112) & 0xF) != v17 || *(_WORD *)(a2 + 112) >> 4 != v19)
  {
    CA::OGL::GLContext::update_texture(v10, a4);
    ((void (*)(void, void, uint64_t, void))v11[305])(*v11, *(unsigned int *)(a2 + 96), 10241, dword_18499EA0C[v17]);
    this = ((uint64_t (*)(void, void, uint64_t, void))v11[305])(*v11, *(unsigned int *)(a2 + 96), 10240, dword_18499EA0C[v19]);
    __int16 v21 = (v17 | (16 * v19)) | (unsigned __int16)(*(_WORD *)(a2 + 113) << 8);
    *(unsigned char *)(a2 + 114) = HIBYTE(*(_WORD *)(a2 + 113));
    *(_WORD *)(a2 + 112) = v21;
  }
  return this;
}

uint64_t CA::OGL::Context::reset_attached_surface(uint64_t this)
{
  *(void *)(this + 272) = 0;
  return this;
}

uint64_t CA::OGL::Context::calculate_average_luma()
{
  return 0;
}

double CA::OGL::GLESContext::create_null_surface(CA::OGL::GLESContext *this)
{
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  unint64_t v2 = (char *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x78uLL, 0x743898A5uLL);
  *(_DWORD *)unint64_t v2 = 1;
  double result = 0.0;
  *((_OWORD *)v2 + 2) = xmmword_184998020;
  *((_DWORD *)v2 + 17) = 15;
  v2[72] |= 1u;
  *((_DWORD *)v2 + 27) = 35450;
  v2[73] = v2[73] & 0xC0 | 0x13;
  *(_WORD *)(v2 + 75) |= 0x80u;
  int v4 = (*((unsigned __int16 *)v2 + 56) | (v2[114] << 16)) & 0xFDFF00;
  *((_WORD *)v2 + 56) = *((_WORD *)v2 + 56) & 0xFF00 | 0x11;
  v2[114] = BYTE2(v4);
  return result;
}

void CA::OGL::GLESContext::copy_destination(CA::OGL::Context *this, uint64_t a2, uint64_t a3, uint64_t a4, int32x2_t *a5, uint64_t a6, unsigned char *a7)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = *((void *)this + 34);
  if (v13 != *((void *)this + 33)) {
    goto LABEL_2;
  }
  if (v13) {
    LODWORD(v13) = (*(unsigned __int8 *)(v13 + 72) >> 1) & 0x1F;
  }
  if (*((_DWORD *)this + 65) != v13) {
LABEL_2:
  }
    CA::OGL::Context::prepare_destination_(this);
  if ((*((_WORD *)this + 416) & 0x200) != 0) {
    CA::OGL::Context::flatten_detached_layers_((uint64_t)this);
  }
  uint64_t v14 = *((void *)this + 33);
  if (v14)
  {
    CA::OGL::Context::push_surface((uint64_t)this, a3, 0, 0x8000, 0);
    CA::OGL::emit_copy_surface((uint64_t)this, v14, a4, a5, a6);
    CA::OGL::Context::pop_surface(this);
    char v15 = 0;
  }
  else
  {
    uint64_t v16 = *((void *)this + 262);
    uint64_t v17 = *(unsigned int *)(a3 + 100);
    uint64_t v18 = *((void *)this + 2);
    *(_WORD *)(v18 + 144) = *(_DWORD *)(a3 + 96);
    *(void *)(v18 + 176) = v17;
    CA::OGL::GLContext::update_texture((uint64_t)this, 0);
    if (a4)
    {
      unsigned int v19 = (unsigned int *)(a6 + 4);
      do
      {
        long long v20 = *(_OWORD *)a5->i8;
        a5 += 2;
        long long v22 = v20;
        CA::OGL::GLESContext::window_bounds((uint64_t)this, (int32x2_t *)&v22);
        (*(void (**)(void, void, void, void, void, void, void, void, _DWORD))(v16 + 456))(*(void *)v16, *(unsigned int *)(a3 + 96), 0, *(v19 - 1), *v19, v22, DWORD1(v22), DWORD2(v22), HIDWORD(v22));
        v19 += 2;
        --a4;
      }
      while (a4);
    }
    uint64_t v21 = *((void *)this + 2);
    *(_WORD *)(v21 + 144) = 0;
    *(void *)(v21 + 176) = 0;
    CA::OGL::Context::marked_surface((uint64_t)this, a3);
    char v15 = *((unsigned char *)this + 432) & 1;
  }
  *a7 = v15;
}

void CA::OGL::Context::copy_surface_clear_flags(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_WORD *)(a2 + 75) & 0xFFDF | (32 * ((*(unsigned __int16 *)(a3 + 75) >> 5) & 1));
  *(_WORD *)(a2 + 75) = v3;
  unsigned int v4 = v3 & 0xFFFFFFBF | (((*(unsigned __int16 *)(a3 + 75) >> 6) & 1) << 6);
  *(_WORD *)(a2 + 75) = v4;
  *(_WORD *)(a2 + 75) = v4 & 0xFF7F | *(_WORD *)(a3 + 75) & 0x80;
}

uint64_t CA::OGL::Context::create_reinterpreted_surface()
{
  return 0;
}

char *CA::OGL::GLESContext::create_surface_from_iosurface(CA::OGL::GLESContext *this, int a2, int a3, int a4, IOSurfaceRef buffer)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  size_t Width = IOSurfaceGetWidth(buffer);
  size_t Height = IOSurfaceGetHeight(buffer);
  uint64_t v12 = 0;
  if (a2 == 1 && (int)Width >= 1)
  {
    size_t v13 = Height;
    if ((int)Height >= 1)
    {
      int v14 = *((_DWORD *)this + 534);
      if (v14 < (int)Width || v14 < (int)Height)
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          uint64_t v23 = x_log_category_ogl_opengl;
          if (os_log_type_enabled((os_log_t)x_log_category_ogl_opengl, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109376;
            int v27 = Width;
            __int16 v28 = 1024;
            int v29 = v13;
            _os_log_impl(&dword_184668000, v23, OS_LOG_TYPE_DEFAULT, "CoreAnimation: surface %d x %d is too large\n", buf, 0xEu);
          }
        }
        return 0;
      }
      else
      {
        malloc_zone = (malloc_zone_t *)get_malloc_zone();
        uint64_t v12 = (char *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x78uLL, 0x743898A5uLL);
        *(_DWORD *)uint64_t v12 = 1;
        *((_DWORD *)v12 + 24) = 3553;
        __int16 v16 = *(_WORD *)(v12 + 75);
        *((_DWORD *)v12 + 8) = a3;
        *((_DWORD *)v12 + 9) = a4;
        *((_DWORD *)v12 + 10) = Width;
        *((_DWORD *)v12 + 11) = v13;
        *((_DWORD *)v12 + 6) = Width;
        *((_DWORD *)v12 + 7) = v13;
        *((_DWORD *)v12 + 17) = 15;
        v12[72] |= 1u;
        int v17 = (*((unsigned __int16 *)v12 + 56) | (v12[114] << 16)) & 0xFDFF00;
        *((_WORD *)v12 + 56) = *((_WORD *)v12 + 56) & 0xFF00 | 0x11;
        v12[114] = BYTE2(v17);
        *(_WORD *)(v12 + 75) = v16 | 0x190;
        uint64_t v18 = (void *)*((void *)this + 262);
        ((void (*)(void, uint64_t, char *))v18[99])(*v18, 1, v12 + 100);
        uint64_t v19 = *((unsigned int *)v12 + 25);
        uint64_t v20 = *((void *)this + 2);
        *(_WORD *)(v20 + 144) = *((_DWORD *)v12 + 24);
        *(void *)(v20 + 176) = v19;
        CA::OGL::GLContext::update_texture((uint64_t)this, 0);
        if ((v12[112] & 0xFu) >= 0xC
          || (((void (*)(void, void, uint64_t, void))v18[305])(*v18, *((unsigned int *)v12 + 24), 10241, dword_18499EA0C[v12[112] & 0xF]), unsigned int v21 = v12[112], v21 >= 0xC0))
        {
          __assert_rtn("gl_texture_filter", "ogl-gl.cpp", 4342, "filter < OGL_TEXTURE_FILTER_COUNT");
        }
        ((void (*)(void, void, uint64_t, void))v18[305])(*v18, *((unsigned int *)v12 + 24), 10240, dword_18499EA0C[v21 >> 4]);
        ((void (*)(void, void, uint64_t, uint64_t))v18[305])(*v18, *((unsigned int *)v12 + 24), 10242, 33071);
        ((void (*)(void, void, uint64_t, uint64_t))v18[305])(*v18, *((unsigned int *)v12 + 24), 10243, 33071);
        BYTE4(v25) = 0;
        LODWORD(v25) = 0;
        objc_msgSend(*((id *)this + 23), "texImageIOSurface:target:internalFormat:width:height:format:type:plane:invert:", buffer, *((unsigned int *)v12 + 24), 6408, Width, v13, 32993, 5121, v25);
        uint64_t v22 = *((void *)this + 2);
        *(_WORD *)(v22 + 144) = 0;
        *(void *)(v22 + 176) = 0;
      }
    }
  }
  return v12;
}

uint64_t CA::OGL::Context::create_surface_from_data(CA::OGL::Context *this, void *a2)
{
  return 0;
}

char *CA::OGL::GLESContext::create_surface(CA::OGL::GLESContext *this, int a2, const CA::Bounds *a3, char a4)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((unsigned int *)a3 + 2);
  if ((int)v4 < 1) {
    return 0;
  }
  uint64_t v5 = 0;
  if (a2 != 1) {
    return v5;
  }
  uint64_t v7 = *((unsigned int *)a3 + 3);
  if ((int)v7 < 1) {
    return v5;
  }
  if ((a4 & 0x40) == 0 || (*((unsigned char *)this + 2142) & 4) != 0)
  {
    char v13 = 0;
  }
  else
  {
    if ((v4 & (v4 - 1)) != 0)
    {
      unint64_t v9 = (v4 - 1) | ((unint64_t)(v4 - 1) >> 1) | (((v4 - 1) | ((unint64_t)(v4 - 1) >> 1)) >> 2);
      unint64_t v10 = v9 | (v9 >> 4) | ((v9 | (v9 >> 4)) >> 8);
      LODWORD(v4) = (((v10 | (v10 >> 16)) >> 32) | v10 | (v10 >> 16)) + 1;
    }
    if ((v7 & (v7 - 1)) != 0)
    {
      unint64_t v11 = (v7 - 1) | ((unint64_t)(v7 - 1) >> 1) | (((v7 - 1) | ((unint64_t)(v7 - 1) >> 1)) >> 2);
      unint64_t v12 = v11 | (v11 >> 4) | ((v11 | (v11 >> 4)) >> 8);
      LODWORD(v7) = (((v12 | (v12 >> 16)) >> 32) | v12 | (v12 >> 16)) + 1;
    }
    char v13 = 1;
  }
  int v14 = *((_DWORD *)this + 534);
  if ((int)v4 > v14 || (int)v7 > v14)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      double v34 = x_log_category_ogl_opengl;
      if (os_log_type_enabled((os_log_t)x_log_category_ogl_opengl, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109376;
        int v37 = v4;
        __int16 v38 = 1024;
        int v39 = v7;
        _os_log_impl(&dword_184668000, v34, OS_LOG_TYPE_DEFAULT, "CoreAnimation: surface %d x %d is too large\n", buf, 0xEu);
      }
    }
    return 0;
  }
  int v15 = a4 & 0x40 | 0xF;
  __int16 v16 = (void **)((char *)this + 80);
  uint64_t v5 = (char *)*((void *)this + 10);
  if (v5)
  {
    int v17 = 0;
    int v18 = 0x7FFFFFFF;
    do
    {
      if (*((_DWORD *)v5 + 17) == v15 && (v5[72] & 1) != 0)
      {
        int v19 = *((_DWORD *)v5 + 6);
        if (v4 == v19 && v7 == *((_DWORD *)v5 + 7))
        {
          int v17 = v16;
          goto LABEL_31;
        }
        if ((int)v4 > v19) {
          char v20 = 1;
        }
        else {
          char v20 = v13;
        }
        if ((v20 & 1) == 0)
        {
          int v21 = *((_DWORD *)v5 + 7);
          int v22 = v21 * v19 - v7 * v4;
          if (v22 >= v18)
          {
            __int16 v16 = v17;
            int v22 = v18;
          }
          if ((int)v7 <= v21)
          {
            int v17 = v16;
            int v18 = v22;
          }
        }
      }
      __int16 v16 = (void **)(v5 + 8);
      uint64_t v5 = (char *)*((void *)v5 + 1);
    }
    while (v5);
    if (!v17) {
      goto LABEL_37;
    }
    uint64_t v5 = (char *)*v17;
LABEL_31:
    int *v17 = (void *)*((void *)v5 + 1);
    long long v23 = *(_OWORD *)a3;
    *(_DWORD *)uint64_t v5 = 1;
    *((_OWORD *)v5 + 2) = v23;
    __int16 v24 = *(_WORD *)(v5 + 75);
    if ((v24 & 0x40) != 0) {
      __int16 v25 = -6672;
    }
    else {
      __int16 v25 = -6800;
    }
    *(_WORD *)(v5 + 75) = v25 & v24;
    v5[73] &= 0xC0u;
  }
  else
  {
LABEL_37:
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    uint64_t v5 = (char *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x78uLL, 0x743898A5uLL);
    *(_DWORD *)uint64_t v5 = 1;
    *((_DWORD *)v5 + 24) = 3553;
    __int16 v27 = *(_WORD *)(v5 + 75) | 0x10;
    *(_WORD *)(v5 + 75) = v27;
    *((_OWORD *)v5 + 2) = *(_OWORD *)a3;
    *((_DWORD *)v5 + 6) = v4;
    *((_DWORD *)v5 + 7) = v7;
    *((_DWORD *)v5 + 17) = v15;
    v5[72] |= 1u;
    *((_DWORD *)v5 + 27) = 35450;
    int v28 = (*((unsigned __int16 *)v5 + 56) | (v5[114] << 16)) & 0xFDFF00;
    *((_WORD *)v5 + 56) = *((_WORD *)v5 + 56) & 0xFF00 | 0x11;
    v5[114] = BYTE2(v28);
    *(_WORD *)(v5 + 75) = v27 & 0xFF7F;
    v5[74] = v5[74] & 0xE0 | 4;
    int v29 = (void *)*((void *)this + 262);
    ((void (*)(void, uint64_t, char *))v29[99])(*v29, 1, v5 + 100);
    uint64_t v30 = *((unsigned int *)v5 + 25);
    uint64_t v31 = *((void *)this + 2);
    *(_WORD *)(v31 + 144) = *((_DWORD *)v5 + 24);
    *(void *)(v31 + 176) = v30;
    CA::OGL::GLContext::update_texture((uint64_t)this, 0);
    if ((v5[112] & 0xFu) >= 0xC
      || (((void (*)(void, void, uint64_t, void))v29[305])(*v29, *((unsigned int *)v5 + 24), 10241, dword_18499EA0C[v5[112] & 0xF]), unsigned int v32 = v5[112], v32 >= 0xC0))
    {
      __assert_rtn("gl_texture_filter", "ogl-gl.cpp", 4342, "filter < OGL_TEXTURE_FILTER_COUNT");
    }
    ((void (*)(void, void, uint64_t, void))v29[305])(*v29, *((unsigned int *)v5 + 24), 10240, dword_18499EA0C[v32 >> 4]);
    ((void (*)(void, void, uint64_t, uint64_t))v29[305])(*v29, *((unsigned int *)v5 + 24), 10242, 33071);
    ((void (*)(void, void, uint64_t, uint64_t))v29[305])(*v29, *((unsigned int *)v5 + 24), 10243, 33071);
    ((void (*)(void, void, void, uint64_t, void, void, void, uint64_t, int, void))v29[302])(*v29, *((unsigned int *)v5 + 24), 0, 6408, *((unsigned int *)v5 + 6), *((unsigned int *)v5 + 7), 0, 6408, 5121, 0);
    if ((v5[68] & 0x40) != 0) {
      ((void (*)(void, void))v29[682])(*v29, *((unsigned int *)v5 + 24));
    }
    uint64_t v33 = *((void *)this + 2);
    *(_WORD *)(v33 + 144) = 0;
    *(void *)(v33 + 176) = 0;
  }
  return v5;
}

void CA::OGL::GLESContext::delete_image(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned __int8 *)(a2 + 72);
  if (v3)
  {
    (*(void (**)(void, uint64_t, uint64_t))(*(void *)(a1 + 2096) + 480))(**(void **)(a1 + 2096), v3, a2 + 64);
    *(unsigned char *)(a2 + 72) = 0;
  }
  uint64_t v4 = *(CA::WindowServer::Surface **)(a2 + 32);
  if (v4)
  {
    CA::WindowServer::Surface::unref(v4);
    *(void *)(a2 + 32) = 0;
  }
  uint64_t v5 = *(CA::WindowServer::Surface **)(a2 + 40);
  if (v5)
  {
    CA::WindowServer::Surface::unref(v5);
    *(void *)(a2 + 40) = 0;
  }
  int v6 = *(unsigned __int8 *)(a2 + 55) << 24;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 48) = 0;
  *(_DWORD *)(a2 + 52) = v6;
  LOBYTE(v6) = *(unsigned char *)(a2 + 73);
  *(unsigned char *)(a2 + 74) &= 0xFCu;
  *(unsigned char *)(a2 + 73) = v6 & 0xFC;
}

uint64_t CA::OGL::GLESContext::finish_image(uint64_t a1, uint64_t a2, int a3)
{
  if (!*(unsigned char *)(a2 + 72)) {
    return 1;
  }
  if ((*(unsigned char *)(a1 + 2140) & 2) != 0)
  {
    unint64_t v9 = 0;
    uint64_t v10 = *(void *)(a1 + 2096);
    do
      (*(void (**)(void, uint64_t, void))(v10 + 3768))(*(void *)v10, 5890, *(unsigned int *)(a2 + 64 + 4 * v9++));
    while (v9 < *(unsigned __int8 *)(a2 + 72));
    return 1;
  }
  uint64_t v6 = *(void *)(a2 + 32);
  if (v6)
  {
    uint64_t v7 = (__IOSurface *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 160))(v6);
    if (v7)
    {
      int v8 = v7;
      if (!IOSurfaceLock(v7, 0, 0)) {
        IOSurfaceUnlock(v8, 0, 0);
      }
      return 1;
    }
  }
  if (a3)
  {
    if ((*(unsigned char *)(a1 + 2208) & 4) != 0)
    {
      *(unsigned char *)(a1 + 2208) &= ~4u;
      (*(void (**)(void))(*(void *)(a1 + 2096) + 720))(**(void **)(a1 + 2096));
    }
    return 1;
  }
  return 0;
}

double CA::OGL::GLESContext::new_image(CA::OGL::GLESContext *this)
{
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  unint64_t v2 = malloc_type_zone_calloc(malloc_zone, 1uLL, 0x50uLL, 0x743898A5uLL);
  if (v2)
  {
    double result = 0.0;
    v2[3] = 0u;
    v2[4] = 0u;
    v2[1] = 0u;
    _OWORD v2[2] = 0u;
    *unint64_t v2 = 0u;
  }
  return result;
}

uint64_t CA::OGL::GLESContext::image_surface(uint64_t a1, uint64_t a2, CA::Render::PixelBuffer *a3)
{
  return *(void *)(a2 + 32);
}

CA::Render::PixelBuffer *CA::OGL::GLESContext::retain_image(uint64_t a1, uint64_t a2, CA::Render::PixelBuffer *this, int a4)
{
  while (1)
  {
    int v8 = *((unsigned __int8 *)this + 12);
    if (v8 != 38) {
      break;
    }
    this = CA::Render::PixelBuffer::image(this);
    if (!this) {
      return this;
    }
    *(unsigned char *)(a2 + 56) = *(unsigned char *)(a2 + 56) & 0xC0 | 0x17;
  }
  switch(v8)
  {
    case 9:
      if (!*(void *)(a2 + 8))
      {
        *(void *)(a2 + 8) = this;
        (*(void (**)(CA::Render::PixelBuffer *))(*(void *)this + 176))(this);
      }
      break;
    case 23:
      if (!*(void *)(a2 + 8))
      {
        *(void *)(a2 + 8) = this;
        atomic_fetch_add((atomic_uint *volatile)this + 37, 1u);
      }
      if (a4)
      {
        uint64_t v10 = *(void *)(a2 + 32);
        if (v10)
        {
          unint64_t v11 = (__IOSurface *)(*(uint64_t (**)(uint64_t))(*(void *)v10 + 160))(v10);
          CA::Render::Image::update_iosurface((__IOSurface **)this, v11);
          return this;
        }
        unint64_t v9 = CA::Render::Image::retain_iosurface(this);
        if (!v9) {
          return this;
        }
        goto LABEL_20;
      }
      break;
    case 51:
      if (!*(void *)(a2 + 8))
      {
        *(void *)(a2 + 8) = this;
        (*(void (**)(CA::Render::PixelBuffer *))(*(void *)this + 176))(this);
      }
      if (!*(void *)(a2 + 32))
      {
        unint64_t v9 = (__IOSurface *)*((void *)this + 14);
        if (v9)
        {
          CFRetain(*((CFTypeRef *)this + 14));
LABEL_20:
          unint64_t v12 = *(CA::WindowServer::IOSurface **)(a1 + 192);
          if (v12) {
            unint64_t v12 = (CA::WindowServer::IOSurface *)(*(uint64_t (**)(CA::WindowServer::IOSurface *))(*(void *)v12 + 16))(v12);
          }
          *(void *)(a2 + 32) = CA::WindowServer::IOSurface::wrap_buffer(v12, v9, 0, 1);
        }
      }
      break;
  }
  return this;
}

uint64_t CA::OGL::Context::can_render_to_format(CA::OGL::Context *this)
{
  return 1;
}

BOOL CA::OGL::GLESContext::edge_mode_supported(uint64_t a1, uint64_t a2, int a3)
{
  return !a3
      || *(unsigned char *)(a2 + 12) == 23
      && ((*(unsigned char *)(a1 + 2142) & 4) != 0
       || (*(_DWORD *)(a2 + 16) & (*(_DWORD *)(a2 + 16) - 1)) == 0
       && (*(_DWORD *)(a2 + 20) & (*(_DWORD *)(a2 + 20) - 1)) == 0);
}

uint64_t CA::OGL::GLESContext::modify_subimage_impl(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int a10)
{
  v23[1] = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a3 + 153) == 1 && !*(void *)(a3 + 160))
  {
    uint64_t v17 = result;
    v23[0] = 0;
    int v22 = 0;
    __int16 v21 = 0;
    uint64_t v18 = *(unsigned __int8 *)(a3 + 152);
    double result = CA::OGL::GLESContext::image_parameters(result, *(unsigned __int8 *)(a3 + 152), 0, (int *)v23 + 1, (int *)v23, &v22, (char *)&v21 + 1, &v21);
    if (HIDWORD(v23[0]))
    {
      if (v18 > 0x25) {
        int v20 = 0;
      }
      else {
        int v20 = dword_184999468[v18];
      }
      int v19 = *(void **)(v17 + 2096);
      CA::OGL::GLContext::update_texture(v17, a4);
      if ((*(_WORD *)(a2 + 58) & 0x400) == 0 && (!a10 || *(_DWORD *)(v17 + 232) >= a10))
      {
        ((void (*)(void, void, uint64_t, void))v19[305])(*v19, *(unsigned __int16 *)(a2 + 52), 10495, 0);
        *(_WORD *)(a2 + 58) |= 0x400u;
      }
      double result = ((uint64_t (*)(void, void, void, uint64_t, uint64_t, uint64_t, uint64_t, void, int, uint64_t))v19[308])(*v19, *(unsigned __int16 *)(a2 + 52), 0, a5, a6, a7, a8, LODWORD(v23[0]), v22, a9);
      atomic_fetch_add((atomic_uint *volatile)(a3 + 36), 1u);
      *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 36);
      *(unsigned char *)(a2 + 73) &= ~1u;
      *(void *)(v17 + 728) += (a8 * a7 * v20);
    }
  }
  return result;
}

CA::Render::Texture *CA::OGL::GLESContext::create_mutable_image(CA::OGL::GLESContext *this, CA::Render::Image *a2, unsigned int a3, unsigned int a4, CGColorSpace *a5)
{
  v7[1] = *MEMORY[0x1E4F143B8];
  v7[0] = 0;
  return CA::Render::Image::new_image(a2, a3, a4, 1u, a5, 0, v7, 0, 0, v6);
}

uint64_t CA::OGL::GLESContext::bind_image_impl(CA::OGL::Context *this, unsigned int a2, CA::Render::Texture *a3, __int16 a4, unsigned int a5, unsigned int a6, int a7, uint64_t a8, const char *a9)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  if (*((CA::OGL::Context **)a3 + 11) != this || (uint64_t v17 = *((void *)a3 + 10)) == 0)
  {
    uint64_t v17 = CA::OGL::Context::lookup_image_(this, a3, 1);
    if (!v17) {
      return v17;
    }
  }
  if (*((unsigned char *)a3 + 12) == 23)
  {
    if (!*(_WORD *)(v17 + 52)
      && ((*((unsigned char *)this + 2142) & 4) != 0
       || (*((_DWORD *)a3 + 4) & (*((_DWORD *)a3 + 4) - 1)) == 0
       && (*((_DWORD *)a3 + 5) & (*((_DWORD *)a3 + 5) - 1)) == 0))
    {
      *(unsigned char *)(v17 + 73) |= 2u;
    }
    if (!*((void *)a3 + 12)) {
      goto LABEL_27;
    }
    if (a5 == 2 && (*(unsigned char *)(v17 + 73) & 2) != 0)
    {
      unint64_t v18 = *((unsigned __int8 *)a3 + 152);
      if (v18 > 0x25) {
        int v19 = 0;
      }
      else {
        int v19 = dword_184999468[v18];
      }
      unint64_t v20 = *((unsigned __int8 *)a3 + 153);
      if (!*((unsigned char *)a3 + 153)) {
        goto LABEL_27;
      }
      unsigned int v21 = *((_DWORD *)a3 + 4);
      if (*((void *)a3 + 20) == v21 * v19)
      {
        unint64_t v22 = 0;
        while (v20 - 1 != v22)
        {
          if (v21 <= 1) {
            unsigned int v21 = 1;
          }
          else {
            v21 >>= 1;
          }
          uint64_t v23 = *((void *)a3 + v22++ + 21);
          if (v23 != v21 * v19)
          {
            if (v22 >= v20) {
              break;
            }
            goto LABEL_26;
          }
        }
LABEL_27:
        __int16 v24 = CA::OGL::GLESContext::retain_image((uint64_t)this, v17, a3, 0);
        if (v24)
        {
          __int16 v25 = v24;
          BOOL v26 = 0;
          goto LABEL_33;
        }
        return 0;
      }
    }
LABEL_26:
    if (*((unsigned char *)a3 + 152) == 14) {
      goto LABEL_27;
    }
  }
  __int16 v27 = CA::OGL::GLESContext::retain_image((uint64_t)this, v17, a3, 1);
  if (!v27) {
    return 0;
  }
  __int16 v25 = v27;
  if (*(void *)(v17 + 32))
  {
    __int16 v68 = a4;
    int v28 = (unsigned char *)(v17 + 74);
    BOOL v26 = 1;
    goto LABEL_43;
  }
  BOOL v26 = *(void *)(v17 + 40) != 0;
LABEL_33:
  int v28 = (unsigned char *)(v17 + 74);
  __int16 v68 = a4;
  if (!v26 && (*(unsigned char *)(v17 + 74) & 1) != 0)
  {
    uint64_t v29 = *(unsigned __int8 *)(v17 + 72);
    if (*(unsigned char *)(v17 + 72))
    {
      uint64_t v30 = 0;
      uint64_t v31 = *((void *)this + 3) + 144;
      do
      {
        uint64_t v32 = 0;
        uint64_t v33 = *(unsigned int *)(v17 + 4 * v30 + 64);
        do
        {
          uint64_t v34 = v31 + 8 * v32;
          if (*(void *)(v34 + 32) == v33)
          {
            *(void *)(v34 + 32) = 0;
            *(_WORD *)(v31 + 2 * v32) = 0;
          }
          ++v32;
        }
        while (v32 != 13);
        ++v30;
      }
      while (v30 != v29);
    }
    CA::OGL::GLESContext::delete_image((uint64_t)this, v17);
    BOOL v26 = 0;
  }
LABEL_43:
  float64x2_t v35 = (void *)*((void *)this + 262);
  if ((unsigned __int16)*(_DWORD *)(v17 + 52))
  {
    if (*(unsigned char *)(v17 + 72))
    {
      if ((*v28 & 1) == 0)
      {
        uint64_t v36 = *(void *)(v17 + 8);
        if (v36)
        {
          if (*(unsigned char *)(v36 + 12) == 23 && *(_DWORD *)(v17 + 16) != *(_DWORD *)(v36 + 36))
          {
            int v37 = this;
            uint64_t v38 = v17;
LABEL_68:
            CA::OGL::GLESContext::update_image((uint64_t)v37, v38, v36, a2);
            goto LABEL_69;
          }
        }
      }
    }
    goto LABEL_69;
  }
  unsigned int v39 = *((_DWORD *)this + 529);
  if (*((_DWORD *)v25 + 4) > v39 || *((_DWORD *)v25 + 5) > v39)
  {
    if (x_log_hook_p())
    {
LABEL_53:
      x_log_();
      return 0;
    }
    uint64_t v40 = x_log_category_ogl_opengl;
    if (!os_log_type_enabled((os_log_t)x_log_category_ogl_opengl, OS_LOG_TYPE_DEFAULT)) {
      return 0;
    }
    int v41 = *((_DWORD *)v25 + 4);
    int v42 = *((_DWORD *)v25 + 5);
    *(_DWORD *)buf = 67109376;
    int v70 = v41;
    __int16 v71 = 1024;
    int v72 = v42;
    double v43 = "CoreAnimation: %d by %d image is too large for GPU, ignoring\n";
    double v44 = v40;
    uint32_t v45 = 14;
LABEL_56:
    _os_log_impl(&dword_184668000, v44, OS_LOG_TYPE_DEFAULT, v43, buf, v45);
    return 0;
  }
  int v46 = *((unsigned __int8 *)v25 + 12);
  if (v46 == 23)
  {
    unint64_t v47 = *((void *)this + 265);
    if (v47)
    {
      if (*((void *)v25 + 20) > v47)
      {
        if (x_log_hook_p()) {
          goto LABEL_53;
        }
        uint64_t v67 = x_log_category_ogl_opengl;
        if (!os_log_type_enabled((os_log_t)x_log_category_ogl_opengl, OS_LOG_TYPE_DEFAULT)) {
          return 0;
        }
        *(_WORD *)buf = 0;
        double v43 = "CoreAnimation: image stride is too large for GPU, ignoring\n";
        double v44 = v67;
        uint32_t v45 = 2;
        goto LABEL_56;
      }
    }
  }
  *(_DWORD *)(v17 + 52) = *(_DWORD *)(v17 + 52) & 0xFFFF0000 | 0xDE1;
  *(_WORD *)(v17 + 58) |= 0x100u;
  if (v26)
  {
    CA::OGL::GLESContext::attach_surface_texture(this, v17, v25, a2, a9);
  }
  else
  {
    uint64_t v48 = *(void *)(v17 + 8);
    if (v46 == 23 && v48)
    {
      int v37 = this;
      uint64_t v38 = v17;
      uint64_t v36 = (uint64_t)v25;
      goto LABEL_68;
    }
    if (v46 == 9 && v48) {
      CA::OGL::GLESContext::update_compressed_image((uint64_t)this, v17, (int32x2_t *)v25, a2);
    }
  }
LABEL_69:
  if (*v28)
  {
    if (*(void *)(v17 + 32))
    {
      uint64_t v49 = *(void *)(v17 + 40);
      if (v49)
      {
        if (*(_DWORD *)(v17 + 16) != *((_DWORD *)v25 + 9))
        {
          (*(void (**)(uint64_t, float))(*(void *)v49 + 176))(v49, 1.0);
          *(_DWORD *)(v17 + 16) = *((_DWORD *)v25 + 9);
        }
      }
    }
  }
  uint64_t v50 = *(unsigned __int8 *)(v17 + 72);
  if (*(unsigned char *)(v17 + 72))
  {
    uint64_t v51 = *((void *)this + 2);
    float v52 = (unsigned int *)(v17 + 64);
    unsigned int v53 = a2;
    do
    {
      unsigned int v54 = *v52++;
      *(_WORD *)(v51 + 2 * v53 + 144) = *(_DWORD *)(v17 + 52);
      *(void *)(v51 + 8 * v53++ + 176) = v54;
      --v50;
    }
    while (v50);
  }
  __int16 v55 = *(_WORD *)(v17 + 58);
  *(_WORD *)(v17 + 58) = v55 & 0xF7FF;
  char v56 = *(unsigned char *)(v17 + 74);
  if ((v56 & 2) != 0)
  {
    if ((v68 & 0x24) != 0 && a6 == 1)
    {
LABEL_82:
      a6 = 0;
      a5 = 0;
      *(_WORD *)(v17 + 58) = v55 | 0x800;
      char v56 = *(unsigned char *)(v17 + 74);
      goto LABEL_83;
    }
    a6 = 0;
    if (a5 == 1)
    {
      a5 = 0;
      if ((v68 & 0x12) == 0) {
        goto LABEL_83;
      }
      goto LABEL_82;
    }
    a5 = 0;
  }
LABEL_83:
  if ((v56 & 2) != 0) {
    unsigned int v57 = 0;
  }
  else {
    unsigned int v57 = a6;
  }
  if ((v56 & 2) != 0) {
    unsigned int v58 = 0;
  }
  else {
    unsigned int v58 = a5;
  }
  if (v58 == 2)
  {
    if (*(unsigned char *)(v17 + 73))
    {
LABEL_94:
      unsigned int v58 = 2;
      goto LABEL_97;
    }
    unsigned int v58 = 1;
    if ((v56 & 1) == 0 && (*(unsigned char *)(v17 + 73) & 2) != 0)
    {
      CA::OGL::GLContext::update_texture((uint64_t)this, a2);
      ((void (*)(void, void))v35[682])(*v35, *(unsigned __int16 *)(v17 + 52));
      *(unsigned char *)(v17 + 73) |= 1u;
      goto LABEL_94;
    }
  }
  else
  {
    if (v58 < 4)
    {
      if (v57 > 3) {
        int v59 = 1;
      }
      else {
        int v59 = v57;
      }
      if (v58 == 3) {
        int v60 = 1;
      }
      else {
        int v60 = v58;
      }
      goto LABEL_107;
    }
    unsigned int v58 = 1;
  }
LABEL_97:
  if (v57 > 3) {
    int v59 = 1;
  }
  else {
    int v59 = v57;
  }
  int v60 = v58;
LABEL_107:
  if ((*((unsigned char *)this + 2140) & 4) != 0) {
    unsigned int v61 = v58;
  }
  else {
    unsigned int v61 = v60;
  }
  if ((*((unsigned char *)this + 2140) & 4) == 0 && v59 == 3) {
    int v63 = 1;
  }
  else {
    int v63 = v59;
  }
  unsigned int v64 = *(_DWORD *)(v17 + 52);
  if ((HIWORD(v64) & 0xF) != v61 || ((v64 >> 20) & 0xF) != v63)
  {
    CA::OGL::GLContext::update_texture((uint64_t)this, a2);
    ((void (*)(void, void, uint64_t, void))v35[305])(*v35, *(unsigned __int16 *)(v17 + 52), 10241, dword_18499EA0C[v61]);
    ((void (*)(void, void, uint64_t, void))v35[305])(*v35, *(unsigned __int16 *)(v17 + 52), 10240, dword_18499EA0C[v63]);
    *(_DWORD *)(v17 + 52) = *(_DWORD *)(v17 + 52) & 0xFF00FFFF | ((v61 & 0xF) << 16) | (v63 << 20);
  }
  if (a7 == 1) {
    a7 = (*(unsigned __int8 *)(v17 + 73) >> 1) & 1;
  }
  if (((*(unsigned __int16 *)(v17 + 58) >> 3) & 3) != a7)
  {
    CA::OGL::GLContext::update_texture((uint64_t)this, a2);
    if (a7) {
      uint64_t v65 = 10497;
    }
    else {
      uint64_t v65 = 33071;
    }
    ((void (*)(void, void, uint64_t, uint64_t))v35[305])(*v35, *(unsigned __int16 *)(v17 + 52), 10242, v65);
    ((void (*)(void, void, uint64_t, uint64_t))v35[305])(*v35, *(unsigned __int16 *)(v17 + 52), 10243, v65);
    *(_WORD *)(v17 + 58) = *(_WORD *)(v17 + 58) & 0xFFE7 | (8 * (a7 & 3));
  }
  *(_OWORD *)a8 = xmmword_184998030;
  if (((v68 & 0x800) == 0) != (*((unsigned char *)v25 + 13) & 8) >> 3)
  {
    *(_DWORD *)(a8 + 4) = 1065353216;
    *(_DWORD *)(a8 + 12) = 0;
  }
  return v17;
}

uint64_t CA::OGL::GLESContext::attach_surface_texture(CA::OGL::GLContext *a1, uint64_t a2, CA::Render::Surface *a3, int a4, const char *a5)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  uint64_t result = *(void *)(a2 + 32);
  if (!result) {
    return result;
  }
  int v8 = a3;
  uint64_t v10 = *((void *)a1 + 262);
  if (*(void *)(a2 + 8))
  {
    unint64_t v11 = (__IOSurface *)(*(uint64_t (**)(uint64_t))(*(void *)result + 160))(result);
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(a2 + 8) + 104))(*(void *)(a2 + 8));
    unsigned int v12 = result;
    if (!v11) {
      return result;
    }
LABEL_31:
    float64x2_t v69 = a1;
    char v73 = 0;
    char v72 = 1;
    buffer = v11;
    uint64_t result = IOSurfaceGetPixelFormat(v11);
    unsigned int v26 = 0;
    BOOL v62 = 0;
    BOOL v63 = 0;
    LOBYTE(v59) = 0;
    char v60 = 0;
    int v64 = result;
    int v61 = result & 0xFFFFFFEF;
    if (a5) {
      __int16 v27 = a5;
    }
    else {
      __int16 v27 = "CA::OGL::GLESImage";
    }
    char v28 = 1;
    int v29 = 1;
    while (1)
    {
      int v71 = 0;
      uint64_t v70 = 0;
      uint64_t v30 = *((unsigned int *)v8 + 4);
      unsigned int v31 = *((_DWORD *)v8 + 5);
      uint64_t v32 = (__IOSurface *)v12;
      if (v12 != -1)
      {
        uint64_t result = CA::OGL::GLESContext::image_parameters((uint64_t)v69, v12, v26, &v71, (int *)&v70 + 1, (int *)&v70, &v73, &v72);
        int v33 = v71;
        if (v71)
        {
          unsigned int v68 = v31;
          goto LABEL_100;
        }
      }
      if (v64 > 1093677111)
      {
        unsigned int v68 = v31;
        if (v64 > 1278555700)
        {
          if (v64 > 1380410944)
          {
            if (v64 == 1380410945)
            {
              unsigned int v52 = *((_DWORD *)v69 + 535);
              if ((v52 & 0x2000) == 0) {
                goto LABEL_121;
              }
              if ((v52 & 0x20000) != 0) {
                int v33 = 34836;
              }
              else {
                int v33 = 6408;
              }
              int v71 = v33;
              uint64_t v70 = 0x190800001406;
              int v47 = (v52 >> 14) & 1;
            }
            else
            {
              if (v64 != 1380411457 || (unsigned int v45 = *((_DWORD *)v69 + 535), (v45 & 0x800) == 0))
              {
LABEL_121:
                int v48 = v29;
LABEL_122:
                if (v48 == *(unsigned __int8 *)(a2 + 72))
                {
                  *(_DWORD *)(a2 + 52) = *(_DWORD *)(a2 + 52) & 0xC0FFFFFF | ((v73 & 0x3F) << 24);
                  *(unsigned char *)(a2 + 57) = *(unsigned char *)(a2 + 57) & 0xF0 | v59 & 0xF;
                  if (v62) {
                    __int16 v55 = 64;
                  }
                  else {
                    __int16 v55 = 0;
                  }
                  if (v63) {
                    __int16 v56 = 128;
                  }
                  else {
                    __int16 v56 = 0;
                  }
                  *(_WORD *)(a2 + 58) = v55 & 0xFFF8 | v60 & 7 | v56 | *(_WORD *)(a2 + 58) & 0xFF38;
                  char v57 = (*(unsigned char *)(a2 + 74) & 0xFC | (2 * v72)) ^ 3;
LABEL_132:
                  *(unsigned char *)(a2 + 74) = v57;
                }
                else
                {
                  uint64_t result = CA::OGL::GLESContext::update_texture_plane(v69, a2, a4, 0);
                  if (result)
                  {
                    uint64_t result = [*((id *)v69 + 23) attachImage:*(unsigned __int16 *)(a2 + 52) toCoreSurface:buffer invertedRender:0];
                    *(_DWORD *)(a2 + 52) &= 0xC0FFFFFF;
                    char v57 = *(unsigned char *)(a2 + 74) | 1;
                    goto LABEL_132;
                  }
                }
                return result;
              }
              if ((v45 & 0x20000) != 0) {
                int v33 = 34842;
              }
              else {
                int v33 = 6408;
              }
              HIDWORD(v70) = 6408;
              int v71 = v33;
              if ((v45 & 0x20000) != 0) {
                int v46 = 5131;
              }
              else {
                int v46 = 36193;
              }
              LODWORD(v70) = v46;
              int v47 = (v45 >> 12) & 1;
            }
            char v72 = v47;
            goto LABEL_100;
          }
          if (v64 == 1278555701)
          {
            int v33 = 6407;
            HIDWORD(v70) = 6407;
            int v34 = 33635;
            goto LABEL_99;
          }
          if (v64 != 1380401729) {
            goto LABEL_121;
          }
          int v33 = 6408;
        }
        else if (v64 > 1278226487)
        {
          if (v64 != 1278226488)
          {
            if (v64 != 1278555445) {
              goto LABEL_121;
            }
            int v33 = 6408;
            uint64_t v70 = 0x190800008034;
            char v73 = 1;
            goto LABEL_100;
          }
          int v33 = 6409;
        }
        else
        {
          if (v64 != 1093677112)
          {
            if (v64 != 1111970369) {
              goto LABEL_121;
            }
            uint64_t v70 = 0x80E100001401;
            int v33 = 6408;
            goto LABEL_100;
          }
          int v33 = 6406;
        }
        HIDWORD(v70) = v33;
        int v71 = v33;
        goto LABEL_98;
      }
      if (v64 <= 875704949) {
        break;
      }
      if (v64 > 875836517)
      {
        if (v64 == 875836518) {
          goto LABEL_62;
        }
        int v35 = 875836534;
LABEL_61:
        if (v64 != v35) {
          goto LABEL_121;
        }
        goto LABEL_62;
      }
      if (v64 != 875704950)
      {
        if (v64 != 875836468) {
          goto LABEL_121;
        }
        unsigned int v68 = v31;
        int v33 = 6408;
        HIDWORD(v70) = 32993;
        int v71 = 6408;
        int v34 = 32819;
        goto LABEL_99;
      }
LABEL_62:
      if ((v28 & 1) == 0)
      {
        unsigned int WidthOfPlane = IOSurfaceGetWidthOfPlane(buffer, 1uLL);
        unsigned int HeightOfPlane = IOSurfaceGetHeightOfPlane(buffer, 1uLL);
        unsigned int v43 = v30 >> 1;
        if (v30 >> 1 >= WidthOfPlane) {
          unsigned int v43 = WidthOfPlane;
        }
        if (v62) {
          uint64_t v30 = v43;
        }
        else {
          uint64_t v30 = v30;
        }
        unsigned int v44 = v31 >> 1;
        if (v31 >> 1 >= HeightOfPlane) {
          unsigned int v44 = HeightOfPlane;
        }
        int v33 = 33323;
        if (v63) {
          unsigned int v31 = v44;
        }
        unsigned int v68 = v31;
        HIDWORD(v70) = 33319;
        int v71 = 33323;
LABEL_98:
        int v34 = 5121;
LABEL_99:
        LODWORD(v70) = v34;
LABEL_100:
        int v48 = v29;
        uint64_t v38 = v69;
        goto LABEL_101;
      }
      BOOL v36 = v61 == 875704422;
      BOOL v37 = v31 > 1;
      BOOL v62 = v30 > 1 && v61 != 875836518;
      if (v62) {
        uint64_t v30 = v30 & 0xFFFFFFFE;
      }
      else {
        uint64_t v30 = v30;
      }
      BOOL v63 = v37 && v36;
      if (v37 && v36) {
        v31 &= ~1u;
      }
      uint64_t v38 = v69;
      int v39 = *((_DWORD *)v69 + 535);
      unsigned int v68 = v31;
      if ((v39 & 8) != 0 && v61 == 875704422)
      {
        int v33 = 6407;
        int v71 = 6407;
        int v40 = 35429;
      }
      else if ((v39 & 0x10) != 0 && v61 == 875704934)
      {
        int v33 = 6407;
        int v71 = 6407;
        int v40 = 35431;
      }
      else
      {
        if ((v39 & 0x10) == 0 || v61 != 875836518)
        {
          char v73 = 22;
          if (*((unsigned char *)a3 + 12) == 51)
          {
            LOBYTE(v59) = CA::Render::Surface::ycbcr_matrix(a3, v32);
            char v54 = CA::Render::Surface::chroma_location((__IOSurface **)a3, v53);
          }
          else
          {
            int v59 = CA::Render::iosurface_ycbcr_matrix(buffer, v32);
            char v54 = CA::Render::iosurface_chroma_location(buffer, v59);
          }
          char v60 = v54;
          int v33 = 33321;
          int v71 = 33321;
          uint64_t v70 = 0x190300001401;
          int v48 = 2;
          goto LABEL_101;
        }
        int v33 = 6407;
        int v71 = 6407;
        int v40 = 35432;
      }
      HIDWORD(v70) = v40;
      LODWORD(v70) = 5121;
      int v48 = v29;
LABEL_101:
      uint64_t result = CA::OGL::GLESContext::update_texture_plane(v38, a2, a4, v26);
      if (result)
      {
        BYTE4(v58) = 0;
        LODWORD(v58) = v26;
        uint64_t result = objc_msgSend(*((id *)v69 + 23), "texImageIOSurface:target:internalFormat:width:height:format:type:plane:invert:", buffer, *(unsigned __int16 *)(a2 + 52), v33, v30, v68, SHIDWORD(v70), (int)v70, v58);
        if (*(unsigned char *)(a2 + 72))
        {
          unint64_t v49 = 0;
          do
          {
            size_t v50 = strlen(v27);
            uint64_t result = (*(uint64_t (**)(void, uint64_t, void, size_t, const char *))(v10 + 6520))(*(void *)v10, 5890, *(unsigned int *)(a2 + 64 + 4 * v49++), v50, v27);
          }
          while (v49 < *(unsigned __int8 *)(a2 + 72));
        }
      }
      char v28 = 0;
      int v51 = v26 + 1;
      int v29 = 2;
      unsigned int v26 = 1;
      int v8 = a3;
      if (v51 >= v48) {
        goto LABEL_122;
      }
    }
    if (v64 == 875704422 || v64 == 875704438) {
      goto LABEL_62;
    }
    int v35 = 875704934;
    goto LABEL_61;
  }
  if (*((unsigned char *)a3 + 12) != 51)
  {
    char v16 = 0;
LABEL_26:
    unsigned int v12 = -1;
    goto LABEL_27;
  }
  int v13 = *(_DWORD *)(result + 64);
  if (v13 > 875836517)
  {
    if (v13 > 1714696751)
    {
      BOOL v14 = v13 == 2033463856;
      int v17 = 1714696752;
    }
    else
    {
      BOOL v14 = v13 == 875836518;
      int v17 = 875836534;
    }
  }
  else
  {
    if (v13 > 875704933)
    {
      BOOL v14 = v13 == 875704934;
      unsigned __int16 v15 = 12918;
    }
    else
    {
      BOOL v14 = v13 == 875704422;
      unsigned __int16 v15 = 12406;
    }
    int v17 = v15 | 0x34320000;
  }
  if (!v14 && v13 != v17)
  {
    unsigned int v12 = (*(uint64_t (**)(CA::Render::Surface *))(*(void *)a3 + 104))(a3);
    char v16 = 0;
    goto LABEL_27;
  }
  uint64_t v19 = *((void *)a1 + 24);
  if (!v19
    || (unint64_t v20 = (CA::WindowServer::Display *)(*(uint64_t (**)(uint64_t))(*(void *)v19 + 16))(v19)) == 0)
  {
    char v16 = 1;
    goto LABEL_26;
  }
  uint64_t v22 = (uint64_t)v20;
  uint64_t v23 = *((unsigned int *)v8 + 4);
  uint64_t v24 = *((unsigned int *)v8 + 5);
  uint64_t v25 = CA::WindowServer::Display::copy_iosa_manager(v20, v21);
  if (*(void *)(a2 + 40)
    || !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v22 + 144))(v22, v23, v24, v23, v24))
  {
    unsigned int v12 = -1;
  }
  else
  {
    *(void *)(a2 + 40) = CA::WindowServer::Display::allocate_surface(v22, v23, v24, (CA::Render *)0x42475241, 0, 2u, 0, 0, 0, 0);
    CA::OGL::Context::add_buffered_image(a1, a2);
    unsigned int v12 = 1;
  }
  CA::IOSAManager::unref(v25);
  char v16 = 1;
  int v8 = a3;
LABEL_27:
  uint64_t result = *(void *)(a2 + 40);
  if (!result)
  {
    if (v16) {
      return result;
    }
    uint64_t result = *(void *)(a2 + 32);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 160))(result);
  unint64_t v11 = (__IOSurface *)result;
  if (result) {
    goto LABEL_31;
  }
  return result;
}

uint64_t CA::OGL::GLESContext::update_compressed_image(uint64_t this, uint64_t a2, int32x2_t *a3, int a4)
{
  unsigned int v4 = a3[19].i32[1] - 1;
  if (v4 <= 0x1B)
  {
    uint64_t v7 = this;
    int v8 = *(void **)(this + 2096);
    uint64_t v9 = dword_1849A6688[v4];
    if ((v9 - 37808) > 0x2D || ((1 << (v9 + 80)) & 0x3FFF00003FFFLL) == 0)
    {
      if ((v9 - 35840) >= 4) {
        return this;
      }
      int v11 = 0x8000;
    }
    else
    {
      int v11 = 0x10000;
    }
    if ((*(_DWORD *)(this + 2140) & v11) != 0)
    {
      this = CA::OGL::GLESContext::update_texture_plane((CA::OGL::GLContext *)this, a2, a4, 0);
      if (this)
      {
        int v12 = *(_DWORD *)(a2 + 52);
        *(_DWORD *)(a2 + 52) = v12 & 0xC0FFFFFF;
        *(unsigned char *)(a2 + 74) &= ~2u;
        int v13 = a3[19].i32[0];
        if (v13 > 1)
        {
          ((void (*)(void, void, uint64_t, uint64_t))v8[305])(*v8, (unsigned __int16)v12, 10241, 9987);
          ((void (*)(void, void, uint64_t, void))v8[305])(*v8, *(unsigned __int16 *)(a2 + 52), 33084, 0);
          ((void (*)(void, void, uint64_t, void))v8[305])(*v8, *(unsigned __int16 *)(a2 + 52), 33085, (a3[19].i32[0] - 1));
          *(unsigned char *)(a2 + 73) |= 1u;
          *(_DWORD *)(a2 + 52) = *(_DWORD *)(a2 + 52) & 0xFFF0FFFF | 0x20000;
          int v13 = a3[19].i32[0];
        }
        if (v13 >= 1)
        {
          uint64_t v14 = 0;
          int32x2_t v15 = a3[2];
          do
          {
            uint32x2_t v17 = (uint32x2_t)v15;
            ((void (*)(void, void, uint64_t, uint64_t, void, void, void, void, void))v8[381])(*v8, *(unsigned __int16 *)(a2 + 52), v14, v9, v15.u32[0], v15.u32[1], 0, *(unsigned int *)(*(void *)&a3[17] + 8 * v14), *(void *)&a3[12] + *(void *)(*(void *)&a3[16] + 8 * v14));
            int8x8_t v16 = (int8x8_t)vcgt_u32(v17, (uint32x2_t)0x100000001);
            int32x2_t v15 = vsub_s32((int32x2_t)vand_s8((int8x8_t)vshr_n_u32(v17, 1uLL), v16), (int32x2_t)vmvn_s8(v16));
            ++v14;
          }
          while (v14 < a3[19].i32[0]);
        }
        this = (*(uint64_t (**)(int32x2_t *))(*(void *)a3 + 168))(a3);
        *(void *)(v7 + 728) += this;
        *(_DWORD *)(a2 + 16) = a3[4].i32[1];
      }
    }
  }
  return this;
}

uint64_t CA::OGL::Context::can_tile_image(CA::OGL::Context *this, CA::Render::Texture *a2)
{
  return 1;
}

BOOL CA::OGL::GLESContext::should_tile_image(CA::OGL::GLESContext *this, CA::Render::Texture *a2)
{
  unsigned int v2 = *((_DWORD *)this + 529);
  BOOL result = 1;
  if (*((_DWORD *)a2 + 4) <= v2 && *((_DWORD *)a2 + 5) <= v2)
  {
    if (*((unsigned char *)a2 + 12) != 23) {
      return 0;
    }
    unint64_t v4 = *((void *)this + 265);
    if (!v4 || *((void *)a2 + 20) <= v4) {
      return 0;
    }
  }
  return result;
}

uint64_t CA::OGL::Context::bind_lut_texture(CA::OGL::Context *this, unsigned int a2, CA::Render::Texture *a3)
{
  return 0;
}

uint64_t CA::OGL::Context::create_lut_texture(CA::OGL::Context *this, const CA::Render::Interpolator *a2)
{
  return 0;
}

uint64_t CA::OGL::Context::create_lut_texture(CA::OGL::Context *this, const CA::Render::Vector *a2)
{
  return 0;
}

double CA::OGL::GLESContext::bind_gaussian(CA::OGL::GLESContext *this, unsigned int a2, float *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *((void *)this + 2);
  uint64_t v7 = CA::OGL::state_image_texture_unit(v6, a2);
  unsigned int v8 = v7;
  uint64_t v9 = *((unsigned int *)this + 541);
  if (v9)
  {
    *(_WORD *)(v6 + 2 * v7 + 144) = 3553;
    *(void *)(v6 + 8 * v7 + 176) = v9;
  }
  else
  {
    MEMORY[0x1F4188790](v7);
    uint64_t v10 = v23;
    bzero(v23, 0xAAAuLL);
    uint64_t v11 = 0;
    int v12 = &CA::OGL::gaussian_data;
    do
    {
      char v13 = *v12++;
      uint64_t v14 = &v23[v11];
      *uint64_t v14 = v13;
      v14[1] = v13;
      v11 += 2;
    }
    while (v11 != 2730);
    int32x2_t v15 = (void *)*((void *)this + 262);
    unsigned int v24 = 0;
    ((void (*)(void, uint64_t, unsigned int *))v15[99])(*v15, 1, &v24);
    uint64_t v16 = v24;
    uint64_t v17 = *((void *)this + 2);
    *(_WORD *)(v17 + 2 * v8 + 144) = 3553;
    *(void *)(v17 + 8 * v8 + 176) = v16;
    CA::OGL::GLContext::update_texture((uint64_t)this, v8);
    ((void (*)(void, uint64_t, uint64_t, uint64_t))v15[305])(*v15, 3553, 10241, 9987);
    ((void (*)(void, uint64_t, uint64_t, uint64_t))v15[305])(*v15, 3553, 10240, 9729);
    ((void (*)(void, uint64_t, uint64_t, uint64_t))v15[305])(*v15, 3553, 10242, 33071);
    ((void (*)(void, uint64_t, uint64_t, uint64_t))v15[305])(*v15, 3553, 10243, 33071);
    int v18 = *((_DWORD *)this + 535);
    if ((v18 & 0x100) != 0)
    {
      ((void (*)(void, uint64_t, uint64_t, float))v15[303])(*v15, 3553, 34046, 8.0);
      int v18 = *((_DWORD *)this + 535);
    }
    if ((v18 & 0x200) != 0) {
      ((void (*)(void, uint64_t, uint64_t, float))v15[303])(*v15, 3553, 34049, -0.25);
    }
    uint64_t v19 = 0;
    unint64_t v20 = 32;
    do
    {
      unsigned int v21 = v10;
      if (v10 && (*((unsigned char *)this + 2142) & 8) != 0) {
        ((void (*)(void, uint64_t, unint64_t))v15[196])(*v15, 3314, v20);
      }
      ((void (*)(void, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, void, uint64_t, int, unsigned char *))v15[302])(*v15, 3553, v19++, 6410, v20, v20, 0, 6410, 5121, v10);
      v10 += 2 * v20 * v20;
      v20 >>= 1;
    }
    while (v19 != 6);
    if (v21 && (*((unsigned char *)this + 2142) & 8) != 0) {
      ((void (*)(void, uint64_t, void))v15[196])(*v15, 3314, 0);
    }
    *((_DWORD *)this + 541) = v24;
    uint64_t v6 = *((void *)this + 2);
  }
  *(_OWORD *)(v6 + 16 * a2 + 96) = xmmword_184997ED0;
  double result = 0.0078125;
  *(void *)a3 = 0x3F80000000000000;
  return result;
}

uint64_t CA::OGL::GLESContext::finish(CA::OGL::GLESContext *this)
{
  *((unsigned char *)this + 2208) &= ~4u;
  return (*(uint64_t (**)(void))(*((void *)this + 262) + 720))(**((void **)this + 262));
}

uint64_t CA::OGL::GLESContext::destination_has_alpha_p(CA::OGL::GLESContext *this)
{
  uint64_t v2 = *((void *)this + 33);
  if (v2 && (*(_WORD *)(v2 + 112) & 0x100) == 0) {
    return 1;
  }
  uint64_t v3 = *((void *)this + 27);
  if (v3)
  {
    if (*(void *)(v3 + 504)) {
      return 1;
    }
  }
  uint64_t v5 = *((void *)this + 24);
  if (!v5)
  {
    unsigned int v7 = *((unsigned __int16 *)this + 416);
    return (v7 >> 2) & 1;
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
  unsigned int v7 = *((unsigned __int16 *)this + 416);
  if ((v7 & 2) != 0 || !v6) {
    return (v7 >> 2) & 1;
  }
  unsigned int v8 = *(uint64_t (**)(void))(*(void *)v6 + 496);

  return v8();
}

uint64_t CA::OGL::Context::detach_surface(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 272);
  if (v1 != *(void *)(this + 264)) {
    return CA::OGL::Context::prepare_destination_((CA::OGL::Context *)this);
  }
  if (v1) {
    LODWORD(v1) = (*(unsigned __int8 *)(v1 + 72) >> 1) & 0x1F;
  }
  if (*(_DWORD *)(this + 260) != v1) {
    return CA::OGL::Context::prepare_destination_((CA::OGL::Context *)this);
  }
  return this;
}

uint64_t CA::OGL::GLContext::draw_elements(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 280))(a1, a2, a3, a4, a5, a6, a7, 0);
}

uint64_t CA::OGL::GLESContext::delete_fence(CA::OGL::GLESContext *this)
{
  return (*(uint64_t (**)(void))(*((void *)this + 262) + 6256))(**((void **)this + 262));
}

BOOL CA::OGL::GLESContext::test_fence(CA::OGL::GLESContext *this, uint64_t a2)
{
  int v2 = (*(uint64_t (**)(void, uint64_t, uint64_t, void))(*((void *)this + 262) + 6264))(**((void **)this + 262), a2, 1, 0);
  return (v2 & 1) == 0 && (v2 - 37146) < 4;
}

uint64_t CA::OGL::GLESContext::set_fence(CA::OGL::GLESContext *this)
{
  return (*(uint64_t (**)(void, uint64_t, void))(*((void *)this + 262) + 6240))(**((void **)this + 262), 37143, 0);
}

uint64_t CA::OGL::GLESContext::supports_fences(CA::OGL::GLESContext *this)
{
  return 1;
}

uint64_t CA::OGL::GLESContext::init_state(uint64_t **this)
{
  CA::OGL::GLContext::init_state((CA::OGL::GLContext *)this);
  int v2 = this[262];
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v2[196];
  uint64_t v4 = *v2;

  return v3(v4, 3317, 1);
}

uint64_t CA::OGL::GLESContext::purge(CA::OGL::GLESContext *this, int a2)
{
  if (a2)
  {
    uint64_t v4 = (void *)*((void *)this + 262);
    if (*((_DWORD *)this + 538))
    {
      ((void (*)(void, uint64_t, char *))v4[60])(*v4, 1, (char *)this + 2152);
      *((_DWORD *)this + 538) = 0;
    }
    if (*((_DWORD *)this + 539))
    {
      ((void (*)(void, uint64_t, char *))v4[60])(*v4, 1, (char *)this + 2156);
      *((_DWORD *)this + 539) = 0;
    }
    if (*((_DWORD *)this + 540))
    {
      ((void (*)(void, uint64_t, char *))v4[60])(*v4, 1, (char *)this + 2160);
      *((_DWORD *)this + 540) = 0;
    }
    if (*((_DWORD *)this + 541))
    {
      ((void (*)(void, uint64_t, char *))v4[60])(*v4, 1, (char *)this + 2164);
      *((_DWORD *)this + 541) = 0;
    }
    if (*((_DWORD *)this + 542))
    {
      ((void (*)(void, uint64_t, char *))v4[60])(*v4, 1, (char *)this + 2168);
      *((_DWORD *)this + 542) = 0;
    }
  }

  return CA::OGL::GLContext::purge(this, a2);
}

uint64_t CA::OGL::GLESContext::update(CA::OGL::GLESContext *this)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if ((*((unsigned char *)this + 2208) & 2) != 0)
  {
    CA::OGL::GLESContext::purge(this, 1);
    if (*((int *)this + 528) > 2)
    {
      *((unsigned char *)this + 2208) = *((unsigned char *)this + 2208) & 0xFC | 1;
    }
    else
    {
      *((unsigned char *)this + 2208) &= 0xFCu;
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        int v2 = x_log_category_ogl_opengl;
        if (os_log_type_enabled((os_log_t)x_log_category_ogl_opengl, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184668000, v2, OS_LOG_TYPE_DEFAULT, "CoreAnimation: unsupported graphics hardware", buf, 2u);
        }
      }
      if (*((int *)this + 528) <= 2)
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          uint64_t v3 = x_log_category_ogl_opengl;
          if (os_log_type_enabled((os_log_t)x_log_category_ogl_opengl, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)int32x2_t v15 = 0;
            _os_log_impl(&dword_184668000, v3, OS_LOG_TYPE_DEFAULT, "; need three or more texture units", v15, 2u);
          }
        }
      }
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        uint64_t v4 = x_log_category_ogl_opengl;
        if (os_log_type_enabled((os_log_t)x_log_category_ogl_opengl, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v14 = 0;
          _os_log_impl(&dword_184668000, v4, OS_LOG_TYPE_DEFAULT, "\n", v14, 2u);
        }
      }
    }
  }
  uint64_t v5 = *((void *)this + 24);
  if (v5)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
    if (v6)
    {
      unint64_t v7 = 10 * *(int *)(v6 + 180) * (uint64_t)*(int *)(v6 + 176);
      if (v7 <= 0x200000) {
        unint64_t v7 = 0x200000;
      }
      *((void *)this + 49) = v7;
    }
  }
  if (*((void *)this + 33))
  {
    *((_DWORD *)this + 543) = 0;
  }
  else
  {
    float v8 = (float)*((int *)this + 51);
    float v9 = (float)*((int *)this + 53);
    float v10 = v9 + v8;
    int v11 = *((_DWORD *)this + 108);
    if (v11) {
      float v12 = v9 + v8;
    }
    else {
      float v12 = (float)*((int *)this + 51);
    }
    if ((v11 & 1) == 0) {
      float v8 = v10;
    }
    CA::OGL::GLContext::projection_matrix((uint64_t)this, (float)*((int *)this + 50), (float)*((int *)this + 52) + (float)*((int *)this + 50), v12, v8, 0);
    (*(void (**)(void, uint64_t, char *))(*((void *)this + 262) + 840))(**((void **)this + 262), 36006, (char *)this + 2172);
  }
  return *((unsigned char *)this + 2208) & 1;
}

unint64_t CA::OGL::GLESContext::subimage_max_rowbytes(CA::OGL::GLESContext *this, unsigned int a2, unsigned int a3, unsigned int a4)
{
  if (a2 == -1) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = a2;
  }
  unint64_t result = CA::Render::format_rowbytes((CA::Render *)v6, a3);
  if (result)
  {
    unint64_t v8 = result + 16;
    if (a4 >= 0x100) {
      unint64_t v8 = result;
    }
    if (a4 <= 0x7F) {
      unint64_t v8 = result + 32;
    }
    if (a4 <= 0x3F) {
      unint64_t v8 = result + 64;
    }
    unint64_t v9 = *((void *)this + 265);
    if (v8 <= v9 || v9 == 0) {
      return v8;
    }
    else {
      return *((void *)this + 265);
    }
  }
  return result;
}

uint64_t CA::OGL::GLESContext::get(uint64_t a1, int a2)
{
  uint64_t result = 0x10000;
  switch(a2)
  {
    case 1:
    case 2:
      return result;
    case 3:
      uint64_t result = *(unsigned int *)(a1 + 2112);
      break;
    case 4:
      uint64_t result = *(unsigned int *)(a1 + 2116);
      break;
    case 5:
      uint64_t v4 = *(void *)(a1 + 2120);
      if (v4) {
        uint64_t result = v4;
      }
      else {
        uint64_t result = 0x2000;
      }
      break;
    case 6:
    case 13:
    case 20:
    case 22:
    case 26:
      uint64_t result = 1;
      break;
    case 7:
      uint64_t result = *(unsigned int *)(a1 + 2136);
      break;
    case 16:
      uint64_t result = 0;
      break;
    case 17:
      uint64_t result = (*(_DWORD *)(a1 + 2140) >> 2) & 1;
      break;
    case 18:
      uint64_t result = (*(_DWORD *)(a1 + 2140) >> 7) & 1;
      break;
    case 21:
      uint64_t result = (*(_DWORD *)(a1 + 2140) >> 20) & 1;
      break;
    case 23:
      uint64_t result = (*(_DWORD *)(a1 + 2140) >> 11) & 1;
      break;
    default:
      uint64_t result = CA::OGL::GLContext::get(a1, a2);
      break;
  }
  return result;
}

uint64_t CA::OGL::Context::add_completed_callback()
{
  return 0;
}

uint64_t CA::OGL::Context::add_submitted_callback()
{
  return 0;
}

uint64_t CA::OGL::Context::start_command_buffer(CA::OGL::Context *this, unint64_t a2, const char *a3)
{
  return 0;
}

uint64_t CA::OGL::Context::load_pipeline(CA::OGL::Context *this, const char *a2)
{
  return 0;
}

uint64_t CA::OGL::Context::compile_shader(CA::OGL::Context *this, const char *a2)
{
  return 0;
}

uint64_t CA::OGL::Context::protection_options(CA::OGL::Context *this)
{
  return 0;
}

uint64_t CA::OGL::Context::enforces_protection(CA::OGL::Context *this)
{
  return 0;
}

double CA::OGL::Context::destination_offset(CA::OGL::Context *this)
{
  return 0.0;
}

uint64_t CA::OGL::Context::alloc_destination_texture(CA::OGL::Context *this, __IOSurface *a2)
{
  return 0;
}

uint64_t CA::OGL::Context::set_destination_iosurface(CA::OGL::Context *this, __IOSurface *a2)
{
  return 0;
}

uint64_t CA::OGL::GLESContext::set_destination_texture(uint64_t this, int a2, int a3, int a4)
{
  *(_DWORD *)(this + 2176) = a2;
  *(_DWORD *)(this + 2180) = a3;
  if (a4) {
    char v4 = 8;
  }
  else {
    char v4 = 0;
  }
  *(unsigned char *)(this + 2208) = *(unsigned char *)(this + 2208) & 0xF7 | v4;
  return this;
}

void CA::OGL::GLESContext::~GLESContext(CA::OGL::GLESContext *this, uint64_t a2, void *a3)
{
  CA::OGL::GLESContext::~GLESContext(this, a2, a3);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  CA::WindowServer::Surface **v4;
  CA::WindowServer::Surface **v5;
  CA::WindowServer::Surface *v6;
  void *v7;
  void *v8;
  uint64_t (*v9)(void);
  CA::WindowServer::Surface **v10;
  void *v11;
  uint64_t vars8;

  char v4 = (CA::WindowServer::Surface **)*((void *)this + 275);
  if (v4)
  {
    *((void *)this + 275) = 0;
    uint64_t v5 = v4;
    do
    {
      uint64_t v6 = *v5;
      unint64_t v7 = (void *)*((void *)*v5 + 10);
      unint64_t v8 = v7 + 9;
      if (v7[9])
      {
        unint64_t v9 = (uint64_t (*)(void))v7[10];
        if (v9)
        {
          if ((char *)v9 != (char *)CA::OGL::GLESContext::release_display_surface) {
            unint64_t v7 = (void *)v9();
          }
        }
      }
      *unint64_t v8 = 0;
      v8[1] = 0;
      CA::OGL::GLESContext::release_display_surface((CA::OGL::GLESContext *)v7, v6, a3);
      uint64_t v5 = (CA::WindowServer::Surface **)v5[1];
    }
    while (v5);
    do
    {
      float v10 = (CA::WindowServer::Surface **)v4[1];
      free(v4);
      char v4 = v10;
    }
    while (v10);
  }
  int v11 = (void *)*((void *)this + 268);
  if (v11) {
    free(v11);
  }

  CA::OGL::Context::~Context(this);
}

id *CA::OGL::GLESContext::GLESContext(id *this, void *a2)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  char v4 = CA::OGL::Context::Context((CA::OGL::Context *)this);
  *(void *)char v4 = &unk_1ED02C2B0;
  if (*((void **)v4 + 23) != a2) {
    this[23] = a2;
  }
  *((_DWORD *)this + 526) = 1006632960;
  *this = &unk_1ED02A578;
  *((unsigned char *)this + 2208) |= 2u;
  uint64_t v5 = (void *)[a2 getMacroContextPrivate];
  this[262] = v5;
  this[9] = (id)0x4110000000000000;
  this[49] = (id)0x200000;
  if ((CA::OGL::GLESContext::update_limits(void)::initialized & 1) == 0)
  {
    uint64_t v6 = getenv("CA_DISABLE_WORKAROUNDS");
    if (v6) {
      CA::OGL::GLESContext::update_limits(void)::disable_workarounds = atoi(v6) != 0;
    }
    unint64_t v7 = getenv("CA_MAX_TEXTURE_UNITS");
    if (v7) {
      CA::OGL::GLESContext::update_limits(void)::max_texture_units = atoi(v7);
    }
    unint64_t v8 = getenv("CA_MAX_TEXTURE_SIZE");
    if (v8) {
      CA::OGL::GLESContext::update_limits(void)::max_texture_size_t size = atoi(v8);
    }
    CA::OGL::GLESContext::update_limits(void)::initialized = 1;
  }
  unint64_t v9 = (CA::OGL::GLContext *)((uint64_t (*)(void, uint64_t))v5[118])(*v5, 7939);
  float v10 = (char *)((uint64_t (*)(void, uint64_t))v5[118])(*v5, 35358);
  ((void (*)(void, uint64_t))v5[118])(*v5, 7937);
  int v12 = CA::OGL::GLContext::check_extension(v9, v10, "GL_APPLE_fence", v11);
  uint64_t v14 = this + 264;
  if (v12) {
    int v15 = 2;
  }
  else {
    int v15 = 0;
  }
  *((_DWORD *)this + 535) = v15 | v12 | *((_DWORD *)this + 535) & 0xFFFFFFFC;
  if (CA::OGL::GLContext::check_extension(v9, v10, "GL_APPLE_texture_filter_cubic", v13)) {
    int v17 = 4;
  }
  else {
    int v17 = 0;
  }
  *((_DWORD *)this + 535) = *((_DWORD *)this + 535) & 0xFFFFFFFB | v17;
  if (CA::OGL::GLContext::check_extension(v9, v10, "GL_APPLE_texture_ycbcr_basic_formats", v16)) {
    int v19 = 8;
  }
  else {
    int v19 = 0;
  }
  *((_DWORD *)this + 535) = *((_DWORD *)this + 535) & 0xFFFFFFF7 | v19;
  if (CA::OGL::GLContext::check_extension(v9, v10, "GL_APPLE_texture_ycbcr_extended_formats", v18)) {
    int v21 = 16;
  }
  else {
    int v21 = 0;
  }
  *((_DWORD *)this + 535) = *((_DWORD *)this + 535) & 0xFFFFFFEF | v21;
  if (CA::OGL::GLContext::check_extension(v9, v10, "GL_APPLE_texture_xr", v20)) {
    int v23 = 32;
  }
  else {
    int v23 = 0;
  }
  *((_DWORD *)this + 535) = *((_DWORD *)this + 535) & 0xFFFFFFDF | v23;
  if (CA::OGL::GLContext::check_extension(v9, v10, "GL_APPLE_tile_order_rot", v22)) {
    int v25 = 64;
  }
  else {
    int v25 = 0;
  }
  *((_DWORD *)this + 535) = *((_DWORD *)this + 535) & 0xFFFFFFBF | v25;
  if (CA::OGL::GLContext::check_extension(v9, v10, "GL_EXT_shader_framebuffer_fetch", v24)) {
    int v27 = 128;
  }
  else {
    int v27 = 0;
  }
  *((_DWORD *)this + 535) = *((_DWORD *)this + 535) & 0xFFFFFF7F | v27;
  if (CA::OGL::GLContext::check_extension(v9, v10, "GL_EXT_texture_filter_anisotropic", v26)) {
    int v29 = 256;
  }
  else {
    int v29 = 0;
  }
  *((_DWORD *)this + 535) = *((_DWORD *)this + 535) & 0xFFFFFEFF | v29;
  if (CA::OGL::GLContext::check_extension(v9, v10, "GL_EXT_texture_lod_bias", v28)) {
    int v31 = 512;
  }
  else {
    int v31 = 0;
  }
  *((_DWORD *)this + 535) = *((_DWORD *)this + 535) & 0xFFFFFDFF | v31;
  if (CA::OGL::GLContext::check_extension(v9, v10, "GL_OES_standard_derivatives", v30)) {
    int v33 = 1024;
  }
  else {
    int v33 = 0;
  }
  *((_DWORD *)this + 535) = *((_DWORD *)this + 535) & 0xFFFFFBFF | v33;
  if (CA::OGL::GLContext::check_extension(v9, v10, "GL_OES_texture_half_float", v32)) {
    int v35 = 2048;
  }
  else {
    int v35 = 0;
  }
  *((_DWORD *)this + 535) = *((_DWORD *)this + 535) & 0xFFFFF7FF | v35;
  if (CA::OGL::GLContext::check_extension(v9, v10, "GL_OES_texture_half_float_linear", v34)) {
    int v37 = 4096;
  }
  else {
    int v37 = 0;
  }
  *((_DWORD *)this + 535) = *((_DWORD *)this + 535) & 0xFFFFEFFF | v37;
  if (CA::OGL::GLContext::check_extension(v9, v10, "GL_OES_texture_float", v36)) {
    int v39 = 0x2000;
  }
  else {
    int v39 = 0;
  }
  *((_DWORD *)this + 535) = *((_DWORD *)this + 535) & 0xFFFFDFFF | v39;
  if (CA::OGL::GLContext::check_extension(v9, v10, "GL_OES_texture_float_linear", v38)) {
    int v41 = 0x4000;
  }
  else {
    int v41 = 0;
  }
  *((_DWORD *)this + 535) = *((_DWORD *)this + 535) & 0xFFFFBFFF | v41;
  if (CA::OGL::GLContext::check_extension(v9, v10, "GL_IMG_texture_compression_pvrtc", v40)) {
    int v43 = 0x8000;
  }
  else {
    int v43 = 0;
  }
  *((_DWORD *)this + 535) = *((_DWORD *)this + 535) & 0xFFFF7FFF | v43;
  if (CA::OGL::GLContext::check_extension(v9, v10, "GL_KHR_texture_compression_astc_ldr", v42)) {
    int v44 = 0x10000;
  }
  else {
    int v44 = 0;
  }
  *((_DWORD *)this + 535) = *((_DWORD *)this + 535) & 0xFFFEFFFF | v44;
  unsigned int v45 = (_DWORD *)this + 529;
  *((_OWORD *)this + 132) = 0u;
  unsigned int v46 = [this[23] API];
  int v47 = *((_DWORD *)this + 535);
  unsigned int v48 = v47 & 0xFFF1FFFF;
  int v49 = v47 | 0xE3800;
  if (v46 <= 2) {
    int v49 = v48;
  }
  *((_DWORD *)this + 535) = v49;
  if (!CA::OGL::GLESContext::update_limits(void)::disable_workarounds) {
    *((_DWORD *)this + 535) = v49 | 3;
  }
  ((void (*)(void, uint64_t, char *))v5[105])(*v5, 34930, (char *)this + 2112);
  ((void (*)(void, uint64_t, char *))v5[105])(*v5, 3379, (char *)this + 2116);
  if (CA::OGL::GLESContext::update_limits(void)::max_texture_units >= 1
    && CA::OGL::GLESContext::update_limits(void)::max_texture_units < *v14)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      size_t v50 = x_log_category_ogl_opengl;
      if (os_log_type_enabled((os_log_t)x_log_category_ogl_opengl, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = CA::OGL::GLESContext::update_limits(void)::max_texture_units;
        _os_log_impl(&dword_184668000, v50, OS_LOG_TYPE_DEFAULT, "CoreAnimation: maximum %d texture units\n", buf, 8u);
      }
    }
    *uint64_t v14 = CA::OGL::GLESContext::update_limits(void)::max_texture_units;
  }
  if (CA::OGL::GLESContext::update_limits(void)::max_texture_size >= 1
    && CA::OGL::GLESContext::update_limits(void)::max_texture_size < *v45)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      int v51 = x_log_category_ogl_opengl;
      if (os_log_type_enabled((os_log_t)x_log_category_ogl_opengl, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = CA::OGL::GLESContext::update_limits(void)::max_texture_size;
        _os_log_impl(&dword_184668000, v51, OS_LOG_TYPE_DEFAULT, "CoreAnimation: maximum texture %d pixels\n", buf, 8u);
      }
    }
    *unsigned int v45 = CA::OGL::GLESContext::update_limits(void)::max_texture_size;
  }
  ((void (*)(void, uint64_t, char *))v5[105])(*v5, 3386, (char *)this + 2128);
  int v67 = 0;
  ((void (*)(void, uint64_t, int *))v5[105])(*v5, 3408, &v67);
  float v52 = 0.5;
  if ((v67 - 1) <= 0x1D) {
    float v52 = 0.5 - (float)(0.5 / (float)(1 << v67));
  }
  *((float *)this + 203) = v52;
  unint64_t v53 = MEMORY[0x185323680](*MEMORY[0x1E4F2F2C0]);
  unint64_t v54 = MEMORY[0x185323680](*MEMORY[0x1E4F2F0E8]);
  if (v53 >= v54) {
    unint64_t v55 = v54;
  }
  else {
    unint64_t v55 = v53;
  }
  if (!v54) {
    unint64_t v55 = v53;
  }
  if (!v53) {
    unint64_t v55 = v54;
  }
  if (v55 && (!*v45 || *v45 > (int)v55)) {
    *unsigned int v45 = v55;
  }
  unint64_t v56 = MEMORY[0x185323680](*MEMORY[0x1E4F2EFE0]);
  if (v56 && (char *)this[265] - 1 >= (char *)v56) {
    this[265] = (id)v56;
  }
  int v63 = *((_DWORD *)this + 529);
  int v64 = *((_DWORD *)this + 532);
  if (v64 >= *((_DWORD *)this + 533)) {
    int v64 = *((_DWORD *)this + 533);
  }
  if (v63 >= v64) {
    int v63 = v64;
  }
  *((_DWORD *)this + 534) = v63;
  id v65 = this[268];
  if (v65)
  {
    free(v65);
    this[268] = 0;
  }
  *((_DWORD *)this + 535) |= 0x100000u;
  *(void *)buf = 0;
  uint64_t v69 = 0;
  uint64_t v70 = 0;
  x_stream_printf((uint64_t)buf, "#define NOISE_SIZE %d\n", v57, v58, v59, v60, v61, v62, 32);
  x_stream_write((uint64_t)buf, "\n", 1uLL);
  this[268] = x_stream_finish((uint64_t)buf);
  return this;
}

uint64_t CA::OGL::Context::destination_rotated_or_flipped(CA::OGL::Context *this)
{
  return 0;
}

uint64_t CA::OGL::Context::dynamic_cast_gl_context(CA::OGL::Context *this)
{
  return 0;
}

uint64_t CA::OGL::Context::make_buffer_current()
{
  return 0;
}

uint64_t CA::OGL::Context::clear_region(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  v4[1] = *MEMORY[0x1E4F143B8];
  v4[0] = *a3;
  return CA::OGL::Context::paint_region(a1, a2, v4, 0);
}

BOOL CA::OGL::Context::attached_to_framebuffer_p(CA::OGL::Context *this)
{
  return *((void *)this + 33) == 0;
}

uint64_t CA::OGL::Context::state_requires_disjoint_primitives(CA::OGL::Context *this)
{
  return 0;
}

uint64_t CA::OGL::Context::needs_destination_group(CA::OGL::Context *this)
{
  return 1;
}

void CA::OGL::Context::copy_surface(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float64x2_t *a6, float64x2_t *a7)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (a6)
  {
    int32x4_t v12 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(*a6), (int32x4_t)vcvtq_s64_f64(a6[1]));
  }
  else
  {
    v12.i64[0] = 0;
    v12.i64[1] = *(void *)(a2 + 24);
  }
  float v10 = (CA::Shape *)CA::Shape::new_shape((unsigned int *)&v12);
  if (a7)
  {
    int32x4_t v12 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(*a7), (int32x4_t)vcvtq_s64_f64(a7[1]));
  }
  else
  {
    v12.i64[0] = 0;
    v12.i64[1] = *(void *)(a3 + 24);
  }
  int v11 = (CA::Shape *)CA::Shape::new_shape((unsigned int *)&v12);
  CA::OGL::Context::copy_surface_region(a1);
  CA::Shape::unref(v10);

  CA::Shape::unref(v11);
}

void CA::OGL::Context::copy_surface_region(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  __int16 v2 = v1;
  unsigned __int8 v4 = v3;
  uint64_t v6 = v5;
  unint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  v41[122] = *MEMORY[0x1E4F143B8];
  uint64_t v15 = *(void *)(v13 + 248);
  bzero(v41, 0x3D0uLL);
  if (CA::Shape::rect_count(v6) && CA::Shape::rect_count(v8))
  {
    v39[4] = 0x3C003C003C003C00;
    memset(&v39[5], 0, 24);
    v39[8] = 0x4013F800000;
    v39[2] = 0;
    v39[3] = &CA::identity_transform;
    v39[0] = 0;
    v39[1] = &CA::Shape::_infinite_shape;
    CA::OGL::Context::push_surface(v14, v12, v4, 0, 0);
    uint64_t v32 = v15;
    if (v15)
    {
      uint64_t v16 = *(const void **)(v14 + 16);
      memcpy(v41, v16, 0x1E8uLL);
      v41[0] = v16;
      *(void *)(v14 + 16) = v41;
      v39[0] = CA::OGL::Context::set_gstate(v14, (uint64_t)v39);
    }
    else
    {
      CA::OGL::Context::prepare_context(v14, (uint64_t)v41);
      *(void *)(v14 + 120) = &v40;
      *(void *)(v14 + 136) = 128;
      (*(void (**)(uint64_t, void *))(*(void *)v14 + 1008))(v14, v39);
    }
    *(unsigned char *)(*(void *)(v14 + 16) + 481) &= ~1u;
    *(unsigned char *)(*(void *)(v14 + 16) + 16) = 1;
    CA::OGL::Context::bind_surface(v14, v10, 0, (v2 & 0x200) == 0, (v2 & 0x200) == 0, 0.0);
    uint64_t v17 = 0;
    *(void *)(v14 + 128) = 0;
    *(void *)(v14 + 96) = v14 + 834;
    *(_OWORD *)(v14 + 104) = xmmword_184997E70;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    *(_OWORD *)int v34 = 0uLL;
    v38[1] = 0;
    v38[2] = 0;
    v37[2] = 0;
    v38[0] = (uint64_t)v6;
    long long v33 = 0u;
    v37[0] = (uint64_t)v8;
    v37[1] = 0;
    while (1)
    {
      if (!CA::ShapeIterator::iterate(v37, (int *)&v35))
      {
        CA::OGL::Context::array_flush(v14);
        CA::OGL::Context::unbind_surface((void *)v14, v10, 0);
        if (v32)
        {
          CA::OGL::Context::set_gstate(v14, **(void **)(v14 + 248));
          *(void *)(v14 + 16) = v41[0];
          v41[0] = 0;
        }
        else
        {
          (*(void (**)(uint64_t, void *))(*(void *)v14 + 1016))(v14, v39);
          *(void *)(v14 + 120) = 0;
          *(void *)(v14 + 136) = 0;
          *(void *)(v14 + 16) = 0;
          *(void *)(v14 + 24) = 0;
        }
        CA::OGL::Context::pop_surface((CA::OGL::Context *)v14);
        goto LABEL_49;
      }
      if (CA::ShapeIterator::iterate(v38, v34)) {
        long long v33 = *(_OWORD *)v34;
      }
      else {
        *(_OWORD *)int v34 = v33;
      }
      uint64_t v18 = 6;
      if (!*(_DWORD *)(v14 + 92)) {
        uint64_t v18 = 4;
      }
      if ((unint64_t)(v17 + 4) > *(void *)(v14 + 136)
        || (unint64_t v19 = *(void *)(v14 + 112)) != 0 && *(void *)(v14 + 104) + v18 > v19)
      {
        *(_WORD *)(v14 + 832) |= 0x20u;
        CA::OGL::Context::array_flush(v14);
        *(void *)(v14 + 128) = 0;
        *(void *)(v14 + 96) = v14 + 834;
        *(_OWORD *)(v14 + 104) = xmmword_184997E70;
      }
      CA::OGL::Context::array_rect((void *)v14, (float)(int)v35, (float)SHIDWORD(v35), (float)(v36 + v35), (float)(HIDWORD(v36) + HIDWORD(v35)));
      float v20 = (float)SDWORD1(v33);
      float v21 = (float)(DWORD2(v33) + v33);
      int v22 = HIDWORD(v33) + DWORD1(v33);
      if ((v2 & 1) == 0) {
        break;
      }
      if ((v2 & 4) == 0)
      {
        float v23 = (float)SDWORD1(v33);
        float v25 = (float)v22;
        if ((v2 & 2) == 0) {
          goto LABEL_22;
        }
LABEL_25:
        float v24 = (float)(int)v33;
        float v20 = v25;
        goto LABEL_32;
      }
      if ((v2 & 2) != 0) {
        float v23 = (float)SDWORD1(v33);
      }
      else {
        float v23 = (float)v22;
      }
      if ((v2 & 2) != 0) {
        float v20 = (float)v22;
      }
      float v24 = (float)(int)v33;
LABEL_32:
      if ((v2 & 4) != 0) {
        float v26 = v23;
      }
      else {
        float v26 = v20;
      }
      if ((v2 & 4) != 0) {
        float v27 = v21;
      }
      else {
        float v27 = v24;
      }
      if ((v2 & 4) != 0) {
        float v28 = v20;
      }
      else {
        float v28 = v23;
      }
      if ((v2 & 4) != 0) {
        float v29 = v24;
      }
      else {
        float v29 = v21;
      }
      uint64_t v17 = *(void *)(v14 + 128);
      uint64_t v30 = *(void *)(v14 + 120) + 48 * v17;
      *(float *)(v30 - 176) = v21;
      *(float *)(v30 - 172) = v26;
      *(float *)(v30 - 128) = v27;
      *(float *)(v30 - 124) = v20;
      *(float *)(v30 - 80) = v24;
      *(float *)(v30 - 76) = v28;
      *(float *)(v30 - 32) = v29;
      *(float *)(v30 - 28) = v23;
    }
    if ((v2 & 2) == 0)
    {
      float v23 = (float)v22;
      float v24 = (float)(DWORD2(v33) + v33);
LABEL_23:
      float v21 = (float)(int)v33;
      goto LABEL_32;
    }
    float v23 = (float)v22;
    float v25 = (float)SDWORD1(v33);
    if ((v2 & 4) != 0)
    {
LABEL_22:
      float v23 = (float)SDWORD1(v33);
      float v24 = (float)(DWORD2(v33) + v33);
      float v20 = (float)v22;
      goto LABEL_23;
    }
    goto LABEL_25;
  }
LABEL_49:
  for (uint64_t i = 61; i != -61; i -= 61)
  {
    if (v41[i]) {
      __assert_rtn("~ContextState", "ogl-context.h", 551, "!next && \"Imbalanced ContextState push/pop\"");
    }
  }
}

void CA::OGL::export_surface(uint64_t a1, uint64_t a2, const char *a3)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  ++CA::OGL::export_surface(CA::OGL::Context *,CA::OGL::Surface *,char const*,unsigned int,BOOL)::counter;
  long long v4 = *(_OWORD *)(a2 + 32);
  if (*(unsigned char *)(a2 + 72))
  {
    uint64_t v5 = a3 ? a3 : "";
    long long v21 = *(_OWORD *)(a2 + 32);
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void, void))(*(void *)a1 + 896))(a1, a2, 0, 0);
    long long v4 = v21;
    if (v6)
    {
      unint64_t v7 = (CGImage *)v6;
      bzero(v38, 0x400uLL);
      if (getuid()) {
        confstr(65537, v38, 0x400uLL);
      }
      else {
        strcpy(v38, "/tmp/");
      }
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      *(_OWORD *)__str = 0u;
      long long v23 = 0u;
      snprintf(__str, 0x100uLL, "%sca-image-%03d-%s-%d.png", v38, CA::OGL::export_surface(CA::OGL::Context *,CA::OGL::Surface *,char const*,unsigned int,BOOL)::counter, v5, 0);
      size_t v8 = strlen(__str);
      CFURLRef v9 = CFURLCreateFromFileSystemRepresentation(0, (const UInt8 *)__str, v8, 0);
      uint64_t v10 = CGImageDestinationCreateWithURL(v9, @"public.png", 1uLL, 0);
      CFRelease(v9);
      if (v10)
      {
        CGImageDestinationAddImage(v10, v7, 0);
        BOOL v11 = CGImageDestinationFinalize(v10);
        CFRelease(v10);
        CGImageRelease(v7);
        if (v11)
        {
          int v13 = *(_DWORD *)(a2 + 40);
          int v12 = *(_DWORD *)(a2 + 44);
          if (x_log_hook_p()) {
            goto LABEL_15;
          }
          uint64_t v20 = x_log_category_utilities;
          if (!os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_21;
          }
          *(_DWORD *)buf = 67109634;
          int v40 = v13;
          __int16 v41 = 1024;
          int v42 = v12;
          __int16 v43 = 2080;
          int v44 = __str;
          uint64_t v17 = "exported [%d %d] buffer to %s\n";
          uint64_t v18 = v20;
          os_log_type_t v19 = OS_LOG_TYPE_DEFAULT;
          goto LABEL_20;
        }
      }
      else
      {
        CGImageRelease(v7);
      }
      if (x_log_hook_p())
      {
LABEL_15:
        x_log_();
LABEL_21:
        long long v4 = v21;
        goto LABEL_22;
      }
      uint64_t v14 = x_log_category_ogl;
      if (!os_log_type_enabled((os_log_t)x_log_category_ogl, OS_LOG_TYPE_ERROR)) {
        goto LABEL_21;
      }
      int v15 = *(_DWORD *)(a2 + 40);
      int v16 = *(_DWORD *)(a2 + 44);
      *(_DWORD *)buf = 67109634;
      int v40 = v15;
      __int16 v41 = 1024;
      int v42 = v16;
      __int16 v43 = 2080;
      int v44 = __str;
      uint64_t v17 = "error: failed to export [%d %d] buffer to %s\n";
      uint64_t v18 = v14;
      os_log_type_t v19 = OS_LOG_TYPE_ERROR;
LABEL_20:
      _os_log_impl(&dword_184668000, v18, v19, v17, buf, 0x18u);
      goto LABEL_21;
    }
  }
LABEL_22:
  *(_OWORD *)(a2 + 32) = v4;
}

uint64_t CA::OGL::Context::flatten_detached_layers_(uint64_t this)
{
  if ((*(_WORD *)(this + 832) & 0x200) != 0)
  {
    uint64_t v1 = this;
    this = *(void *)(this + 192);
    if (this)
    {
      *(_WORD *)(v1 + 832) &= ~0x200u;
    }
  }
  return this;
}

uint64_t CA::OGL::anonymous namespace'::flatten_detached_layer(CA::OGL::_anonymous_namespace_ *this, CA::Render::Handle *a2, uint64_t a3, CA::Render::Texture *a4, void *a5)
{
  uint64_t result = (*(uint64_t (**)(void, CA::Render::Texture *, CA::OGL::_anonymous_namespace_ *, CA::Render::Handle *, void *))(**((void **)a4 + 24) + 72))(*((void *)a4 + 24), a4, this, a2, a5);
  if (this) {
    *((void *)this + 12) &= ~0x8000uLL;
  }
  return result;
}

uint64_t CA::OGL::Context::finish_image()
{
  return 1;
}

double CA::OGL::Context::new_image(CA::OGL::Context *this)
{
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  __int16 v2 = malloc_type_zone_calloc(malloc_zone, 1uLL, 0x40uLL, 0x743898A5uLL);
  if (v2)
  {
    double result = 0.0;
    _OWORD v2[2] = 0u;
    v2[3] = 0u;
    *__int16 v2 = 0u;
    v2[1] = 0u;
  }
  return result;
}

uint64_t CA::OGL::Context::image_surface()
{
  return 0;
}

BOOL CA::OGL::Context::edge_mode_supported(uint64_t a1, uint64_t a2, int a3)
{
  return a3 == 0;
}

_DWORD *CA::OGL::Context::modify_subimage_impl(_DWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int a10)
{
  if (*(unsigned char *)(a3 + 153) == 1)
  {
    if (a10)
    {
      if (result[58] < a10) {
        (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(void *)result + 640))(result, a2, 1);
      }
    }
    double result = (_DWORD *)CGBlt_copyBytes();
    atomic_fetch_add((atomic_uint *volatile)(a3 + 36), 1u);
  }
  return result;
}

CGColorSpace *CA::OGL::Context::create_mutable_image(CA::OGL::Context *this, CA::Render *a2, unsigned int a3, unsigned int a4, CGColorSpace *a5)
{
  v13[1] = *MEMORY[0x1E4F143B8];
  unint64_t v9 = CA::Render::format_rowbytes(a2, a3);
  int v12 = 0;
  v13[0] = v9;
  if (is_mul_ok(v9, a4)) {
    uint64_t v10 = (CA::Render *)(v9 * a4);
  }
  else {
    uint64_t v10 = 0;
  }
  double result = (CGColorSpace *)CA::Render::aligned_malloc(v10, (unint64_t *)&v12, 0);
  if (result) {
    return CA::Render::Image::new_image(a2, a3, a4, 1u, a5, result, v13, (const unint64_t *)CA::Render::aligned_free, v12, v12);
  }
  return result;
}

uint64_t CA::OGL::Context::should_tile_image(CA::OGL::Context *this, CA::Render::Texture *a2)
{
  return 0;
}

double CA::OGL::Context::bind_uneven_supercircle(uint64_t a1, unsigned int a2, _OWORD *a3, void *a4, uint64_t a5, long long *a6)
{
  uint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)(v6 + 16 * a2 + 96) = xmmword_184997ED0;
  *(unsigned char *)(v6 + a2 + 17) = 16;
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = v7 + 48 * a2;
  *(_OWORD *)(v8 + 384) = *a3;
  *(_OWORD *)(v8 + 400) = a3[1];
  if (a6) {
    long long v9 = *a6;
  }
  else {
    long long v9 = 0uLL;
  }
  *(_OWORD *)(v7 + 48 * a2 + 416) = v9;
  double result = 0.0078125;
  *a4 = 0x3F80000000000000;
  return result;
}

double CA::OGL::Context::bind_uneven_circle(uint64_t a1, unsigned int a2, _OWORD *a3, void *a4)
{
  uint64_t v4 = *(void *)(a1 + 16);
  *(_OWORD *)(v4 + 16 * a2 + 96) = xmmword_184997ED0;
  *(unsigned char *)(v4 + a2 + 17) = 15;
  uint64_t v5 = *(void *)(a1 + 16) + 48 * a2;
  *(_OWORD *)(v5 + 384) = *a3;
  *(_OWORD *)(v5 + 400) = a3[1];
  double result = 0.0078125;
  *a4 = 0x3F80000000000000;
  return result;
}

double CA::OGL::Context::bind_supercircle_field(CA::OGL::Context *this, unsigned int a2, int a3, BOOL a4, BOOL a5, float *a6, int a7, float *a8)
{
  uint64_t v8 = *((void *)this + 2);
  *(_OWORD *)(v8 + 16 * a2 + 96) = xmmword_184997ED0;
  *(unsigned char *)(v8 + a2 + 17) = byte_184998AC0[a7];
  if (a8) {
    *(void *)&long long v9 = *(void *)a8;
  }
  else {
    *(void *)&long long v9 = 0;
  }
  *((void *)&v9 + 1) = v9;
  *(_OWORD *)(*((void *)this + 2) + 48 * a2 + 416) = v9;
  double result = 0.00781250557;
  *(void *)a6 = 0x3F800000BF800000;
  return result;
}

uint64_t CA::OGL::Context::test_fence(CA::OGL::Context *this)
{
  return 0;
}

uint64_t CA::OGL::Context::set_fence(CA::OGL::Context *this)
{
  return 0;
}

uint64_t CA::OGL::Context::supports_fences(CA::OGL::Context *this)
{
  return 0;
}

atomic_uint *std::__destroy_at[abi:nn180100]<CA::OGL::TransientRenderTexture,0>(uint64_t a1)
{
  __int16 v2 = *(atomic_uint **)(a1 + 16);
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  double result = *(atomic_uint **)(a1 + 8);
  if (result && atomic_fetch_add(result + 2, 0xFFFFFFFF) == 1)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 16);
    return (atomic_uint *)v4();
  }
  return result;
}

uint64_t CA::OGL::Context::update(CA::OGL::Context *this)
{
  return 1;
}

uint64_t CA::OGL::Context::subimage_max_rowbytes(CA::OGL::Context *this)
{
  return (*(int (**)(CA::OGL::Context *, uint64_t))(*(void *)this + 184))(this, 5);
}

char *CA::OGL::Context::get_error_string(CA::OGL::Context *this, int a2)
{
  return CA::OGL::Context::get_error_string(int)const::buf;
}

BOOL CA::OGL::Context::get(uint64_t a1, int a2)
{
  return a2 == 28 || a2 == 16;
}

void CA::OGL::Context::~Context(CA::OGL::Context *this)
{
  *(void *)this = &unk_1ED02BAE0;
  if (*((void *)this + 33)) {
    __assert_rtn("~Context", "ogl-context.cpp", 102, "current_surface () == nullptr");
  }
  CA::Render::remove_observer(3u, 0, (uint64_t)CA::OGL::Context::image_deleted, (uint64_t)this);
  CA::Render::remove_observer(0xBu, 0, (uint64_t)CA::OGL::Context::image_volatile, (uint64_t)this);
  __int16 v2 = (void *)*((void *)this + 50);
  if (v2)
  {
    CA::Render::remove_observer(3u, 0, (uint64_t)CA::Render::TileCache::image_deleted, *((void *)this + 50));
    uint64_t v3 = 0;
    uint64_t v4 = v2[2];
    uint64_t v5 = 1 << *(_DWORD *)v4;
    do
    {
      for (uint64_t i = *(uint64_t ***)(*(void *)(v4 + 16) + 8 * v3); i; uint64_t i = (uint64_t **)*i)
        CA::Render::free_entry((uint64_t)i[2], i[3], v2);
      ++v3;
    }
    while (v3 != v5);
    x_hash_table_free((void *)v2[2]);
    MEMORY[0x185323DC0](v2, 0x10A0C404FC77179);
    *((void *)this + 50) = 0;
  }
  uint64_t v7 = (void *)*((void *)this + 51);
  if (v7)
  {
    CA::Render::remove_observer(0xAu, 0, (uint64_t)CA::Render::ShadowCache::path_deleted, *((void *)this + 51));
    uint64_t v10 = v7[1];
    if (v10)
    {
      do
      {
        CA::Render::ShadowCache::free_bounds_entry(*(CA::Render::ShadowCache **)v10, v8, v9);
        uint64_t v10 = *(void *)(v10 + 8);
      }
      while (v10);
      BOOL v11 = (void *)v7[1];
      if (v11)
      {
        do
        {
          int v12 = (void *)v11[1];
          free(v11);
          BOOL v11 = v12;
        }
        while (v12);
      }
    }
    uint64_t v13 = 0;
    uint64_t v14 = (_DWORD *)*v7;
    uint64_t v15 = 1 << *(_DWORD *)*v7;
    do
    {
      for (uint64_t j = *(uint64_t ***)(*((void *)v14 + 2) + 8 * v13); j; uint64_t j = (uint64_t **)*j)
        CA::Render::ShadowCache::free_entry((uint64_t)j[2], j[3]);
      ++v13;
    }
    while (v13 != v15);
    x_hash_table_free((void *)*v7);
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(malloc_zone, v7);
    *((void *)this + 51) = 0;
  }
  x_hash_table_free(*((void **)this + 36));
  x_hash_table_free(*((void **)this + 39));
  uint64_t v18 = (void **)*((void *)this + 45);
  if (v18)
  {
    os_log_type_t v19 = *v18;
    if (*v18)
    {
      uint64_t v20 = (uint64_t)v18[1];
      long long v21 = *v18;
      if ((void *)v20 != v19)
      {
        do
        {
          v20 -= 32;
          std::__destroy_at[abi:nn180100]<CA::OGL::TransientRenderTexture,0>(v20);
        }
        while ((void *)v20 != v19);
        long long v21 = *v18;
      }
      v18[1] = v19;
      operator delete(v21);
    }
    MEMORY[0x185323DC0](v18, 0x20C40960023A9);
  }
  CGColorSpaceRelease(*((CGColorSpaceRef *)this + 18));
  int v22 = (void *)*((void *)this + 20);
  if (v22)
  {
    CA::ColorProgram::Cache::~Cache(*((CA::ColorProgram::Cache **)this + 20));
    long long v23 = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(v23, v22);
  }
  long long v24 = (CA::Shape *)*((void *)this + 53);
  if (v24) {
    CA::Shape::unref(v24);
  }
  std::unique_ptr<CA::OGL::DebugRenderer>::reset[abi:nn180100]((CA::OGL::DebugRenderer **)this + 52, 0);
}

uint64_t CA::OGL::Context::update_color_program_cache_whippet(CA::OGL::Context *this, float a2, CGColorSpace *a3, float a4)
{
  uint64_t v4 = *((void *)this + 20);
  if (!v4) {
    return 0;
  }
  BOOL v9 = a2 <= 1.0 && CGColorSpaceUsesExtendedRange(a3);
  BOOL v10 = CGColorSpaceUsesITUR_2100TF(a3);
  BOOL v11 = a2 > a4;
  if (a4 == 0.0) {
    BOOL v11 = 0;
  }
  if (!v10 && !v11 && !v9) {
    return 0;
  }
  *((unsigned char *)this + 169) = *(unsigned char *)(v4 + 65);
  *((unsigned char *)this + 170) = *(unsigned char *)(v4 + 64);
  *(int32x2_t *)((char *)this + 172) = vrev64_s32(*(int32x2_t *)(v4 + 48));
  *((unsigned char *)this + 168) = 1;
  *(float *)(v4 + 48) = a4;
  *(float *)(v4 + 52) = a2;
  if (v11 || v10)
  {
    *(unsigned char *)(v4 + 64) = 1;
    BOOL v13 = !CGColorSpaceUsesExtendedRange(*((CGColorSpaceRef *)this + 18));
LABEL_15:
    *(unsigned char *)(v4 + 65) = v13;
    return 1;
  }
  if (v9)
  {
    BOOL v13 = 0;
    goto LABEL_15;
  }
  return 1;
}

int32x2_t CA::OGL::Context::reset_color_program_cache_whippet(CA::OGL::Context *this)
{
  uint64_t v1 = (int32x2_t *)*((void *)this + 20);
  if (v1)
  {
    if (*((unsigned char *)this + 168))
    {
      v1[8].i8[1] = *((unsigned char *)this + 169);
      v1[8].i8[0] = *((unsigned char *)this + 170);
      int32x2_t result = vrev64_s32(*(int32x2_t *)((char *)this + 172));
      v1[6] = result;
      *((_WORD *)this + 84) = 0;
      *((unsigned char *)this + 170) = 0;
      *((_DWORD *)this + 43) = 0;
      *((_DWORD *)this + 44) = 0;
    }
  }
  return result;
}

uint64_t CA::OGL::Context::device_float_color(CA::OGL::Context *this, float *a2, CGColorSpaceRef space, float64x2_t *a4, float a5)
{
  uint64_t result = CGColorSpaceGetModel(space);
  if (result)
  {
    if (result != 1)
    {
      if (result == 6) {
        goto LABEL_12;
      }
      goto LABEL_10;
    }
    *(float32x2_t *)a2 = vcvt_f32_f64(*a4);
    float v12 = a4[1].f64[0];
    a2[2] = v12;
    uint64_t v11 = 3;
  }
  else
  {
    float v10 = a4->f64[0];
    a2[1] = v10;
    a2[2] = v10;
    *a2 = v10;
    uint64_t v11 = 1;
  }
  float v13 = a4->f64[v11];
  a2[3] = v13;
  if ((*((unsigned char *)this + 432) & 0x80) != 0) {
    goto LABEL_13;
  }
  uint64_t v14 = CA::OGL::Context::color_program_cache(this);
  uint64_t result = CA::ColorProgram::Cache::convert_color(v14, space, a2, v15);
  if (result)
  {
    float v13 = a2[3];
    goto LABEL_13;
  }
LABEL_10:
  uint64_t result = CARetainColorTransform(*((CGColorSpace **)this + 18));
  if (!result)
  {
LABEL_12:
    a2[2] = 1.0;
    __asm { FMOV            V0.2S, #1.0 }
    *(void *)a2 = _D0;
    float v13 = 1.0;
    goto LABEL_13;
  }
  size_t NumberOfComponents = CGColorSpaceGetNumberOfComponents(space);
  CGColorTransformConvertColorComponents();
  uint64_t result = CGColorTransformRelease();
  *(float32x2_t *)a2 = vcvt_f32_f64((float64x2_t)0);
  a2[2] = 0.0;
  float v13 = a4->f64[NumberOfComponents];
LABEL_13:
  a2[3] = v13;
  return result;
}

_DWORD *CA::OGL::Context::retain_null_surface(CA::OGL::Context *this)
{
  uint64_t result = (_DWORD *)*((void *)this + 35);
  if (result
    || (uint64_t result = (_DWORD *)(*(uint64_t (**)(CA::OGL::Context *))(*(void *)this + 728))(this),
        (*((void *)this + 35) = result) != 0))
  {
    ++*result;
  }
  return result;
}

CA::OGL::Context *CA::OGL::wait_image(CA::OGL::Context *this, CA::Render::Texture *a2, CA::Render::Image *a3)
{
  uint64_t v3 = this;
  if (*((CA::OGL::Context **)a2 + 11) == this && (uint64_t v4 = (CA::OGL::Context *)*((void *)a2 + 10)) != 0
    || (this = (CA::OGL::Context *)CA::OGL::Context::lookup_image_(this, a2, 0), (uint64_t v4 = this) != 0))
  {
    if (*((_DWORD *)v4 + 5) > *((_DWORD *)v3 + 58))
    {
      uint64_t v5 = *(uint64_t (**)(CA::OGL::Context *, CA::OGL::Context *, uint64_t))(*(void *)v3 + 640);
      return (CA::OGL::Context *)v5(v3, v4, 1);
    }
  }
  return this;
}

uint64_t CA::OGL::Context::tile_cache(CA::OGL::Context *this)
{
  if (!*((void *)this + 50)) {
    operator new();
  }
  return *((void *)this + 50);
}

void *CA::OGL::Context::add_buffered_image(void *result, uint64_t a2)
{
  if ((*(_WORD *)(a2 + 58) & 0x200) == 0)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[42];
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    uint64_t result = malloc_type_zone_malloc(malloc_zone, 0x10uLL, 0x8BB15036uLL);
    *uint64_t result = a2;
    result[1] = v4;
    v3[42] = result;
    *(_WORD *)(a2 + 58) |= 0x200u;
  }
  return result;
}

void CA::OGL::Context::add_transient_render_texture(CA::OGL::Context *this, uint64_t a2, atomic_uint *a3, atomic_uint *a4)
{
  if (!a2) {
    goto LABEL_35;
  }
  uint64_t v4 = a4;
  if (!a4) {
    goto LABEL_35;
  }
  uint64_t v5 = a3;
  uint64_t v7 = (char **)*((void *)this + 45);
  if (!v7) {
    operator new();
  }
  for (uint64_t i = *v7; ; i += 32)
  {
    if (i == v7[1]) {
      goto LABEL_10;
    }
    if (*(void *)i == a2) {
      break;
    }
  }
  if (*((void *)i + 2)) {
LABEL_35:
  }
    __assert_rtn("add_transient_render_texture", "ogl-context.cpp", 2518, "key && img && !lookup_transient_render_texture (key, false)");
LABEL_10:
  if (a3 && !atomic_fetch_add(a3 + 2, 1u))
  {
    uint64_t v5 = 0;
    atomic_fetch_add(a3 + 2, 0xFFFFFFFF);
  }
  if (!atomic_fetch_add(a4 + 2, 1u))
  {
    uint64_t v4 = 0;
    atomic_fetch_add(a4 + 2, 0xFFFFFFFF);
  }
  BOOL v9 = v7[1];
  float v10 = v7[2];
  if (v9 < v10)
  {
    *(void *)BOOL v9 = a2;
    *((void *)v9 + 1) = v5;
    *((void *)v9 + 2) = v4;
    *((_DWORD *)v9 + 6) = 262148;
    uint64_t v11 = v9 + 32;
    goto LABEL_32;
  }
  float v12 = *v7;
  uint64_t v13 = (v9 - *v7) >> 5;
  unint64_t v14 = v13 + 1;
  if ((unint64_t)(v13 + 1) >> 59) {
    abort();
  }
  uint64_t v15 = v10 - v12;
  if (v15 >> 4 > v14) {
    unint64_t v14 = v15 >> 4;
  }
  if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v16 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v16 = v14;
  }
  if (v16 >> 59) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  uint64_t v17 = (char *)operator new(32 * v16);
  uint64_t v18 = &v17[32 * v13];
  os_log_type_t v19 = &v17[32 * v16];
  *(void *)uint64_t v18 = a2;
  *((void *)v18 + 1) = v5;
  *((void *)v18 + 2) = v4;
  *((_DWORD *)v18 + 6) = 262148;
  uint64_t v11 = v18 + 32;
  uint64_t v20 = v7[1];
  if (v20 == v12)
  {
    *uint64_t v7 = v18;
    v7[1] = v11;
    unint64_t v7[2] = v19;
    if (!v12) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  uint64_t v21 = 0;
  do
  {
    int v22 = &v18[v21];
    long long v23 = &v20[v21];
    *((void *)v22 - 4) = *(void *)&v20[v21 - 32];
    *(_OWORD *)(v22 - 24) = *(_OWORD *)&v20[v21 - 24];
    *((void *)v23 - 3) = 0;
    *((void *)v23 - 2) = 0;
    *((_DWORD *)v22 - 2) = *(_DWORD *)&v20[v21 - 8];
    v21 -= 32;
  }
  while (&v20[v21] != v12);
  long long v24 = *v7;
  float v12 = v7[1];
  *uint64_t v7 = &v18[v21];
  v7[1] = v11;
  unint64_t v7[2] = v19;
  if (v12 != v24)
  {
    do
    {
      v12 -= 32;
      std::__destroy_at[abi:nn180100]<CA::OGL::TransientRenderTexture,0>((uint64_t)v12);
    }
    while (v12 != v24);
    float v12 = v24;
  }
  if (v12) {
LABEL_31:
  }
    operator delete(v12);
LABEL_32:
  v7[1] = v11;
}

uint64_t CA::WindowServer::Surface::protection_options(CA::WindowServer::Surface *this)
{
  return 0;
}

float CA::WindowServer::Surface::edr_factor(CA::WindowServer::Surface *this)
{
  return 1.0;
}

uint64_t CA::WindowServer::Surface::id(CA::WindowServer::Surface *this)
{
  return 0;
}

uint64_t CA::WindowServer::Surface::copy_iosurface()
{
  return 0;
}

uint64_t CA::WindowServer::Surface::clear_iosurface(CA::WindowServer::Surface *this, CA::WindowServer::Surface *a2, unsigned int a3, CA::Rect *a4)
{
  return 0;
}

uint64_t CA::WindowServer::Surface::iosurface(CA::WindowServer::Surface *this)
{
  return 0;
}

BOOL CA::WindowServer::MemorySurface::check_alignment(CA::WindowServer::MemorySurface *this, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = *((void *)this + 31);
  uint64_t v4 = v3 % a3;
  uint64_t v5 = v3 & (a3 - 1);
  if ((a3 & (a3 - 1)) != 0) {
    uint64_t v5 = v4;
  }
  return v5 == 0;
}

uint64_t CA::WindowServer::MemorySurface::lock(CA::WindowServer::MemorySurface *this, unsigned __int8 **a2, unint64_t *a3)
{
  unint64_t v3 = *((void *)this + 31);
  *a2 = (unsigned __int8 *)*((void *)this + 30);
  *a3 = v3;
  return 1;
}

BOOL CA::WindowServer::Surface::is_fp16(CA::WindowServer::Surface *this)
{
  int v1 = *((_DWORD *)this + 16);
  return v1 == 1380411457 || v1 == 642934849;
}

uint64_t CA::WindowServer::Surface::colorspace(CA::WindowServer::Surface *this)
{
  return 0;
}

uint64_t CA::WindowServer::Surface::is_linear(CA::WindowServer::Surface *this)
{
  return 0;
}

uint64_t CA::WindowServer::Surface::color_primaries(CA::WindowServer::Surface *this)
{
  return 1;
}

uint64_t CA::WindowServer::Surface::transfer_function(CA::WindowServer::Surface *this)
{
  return 0;
}

uint64_t CA::WindowServer::Surface::ycbcr_matrix(CA::WindowServer::Surface *this)
{
  return 0;
}

uint64_t CA::WindowServer::Surface::cache_mode(CA::WindowServer::Surface *this)
{
  return 0;
}

void CA::WindowServer::MemorySurface::~MemorySurface(CA::WindowServer::MemorySurface *this)
{
  CA::WindowServer::MemorySurface::~MemorySurface(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  void (*v2)(void, void);
  uint64_t vars8;

  *(void *)this = &unk_1ED023EB8;
  __int16 v2 = (void (*)(void, void))*((void *)this + 32);
  if (v2) {
    v2(*((void *)this + 30), *((void *)this + 33));
  }

  CA::WindowServer::Surface::~Surface(this);
}

uint64_t CA::WindowServer::anonymous namespace'::release_shmem(CA::WindowServer::_anonymous_namespace_ *this, atomic_uint *a2, void *a3)
{
  if (atomic_fetch_add(a2 + 2, 0xFFFFFFFF) == 1) {
    return (*(uint64_t (**)(atomic_uint *))(*(void *)a2 + 16))(a2);
  }
  return result;
}

CA::Render::Texture *CA::Render::Image::copy_subimage(CA::Render::Image *this, unsigned int a2, const CA::Bounds *a3, unint64_t a4, int a5)
{
  v40[1] = *MEMORY[0x1E4F143B8];
  if (*((unsigned __int8 *)this + 153) <= a2) {
    return 0;
  }
  int v8 = *(_DWORD *)a3;
  int v7 = *((_DWORD *)a3 + 1);
  unsigned int v9 = *((_DWORD *)this + 5);
  if (*((_DWORD *)this + 4) >> a2 <= 1u) {
    int v10 = 1;
  }
  else {
    int v10 = *((_DWORD *)this + 4) >> a2;
  }
  int v11 = v9 >> a2;
  if (v9 >> a2 <= 1) {
    int v11 = 1;
  }
  if (v10 <= v8 || v11 <= v7) {
    return 0;
  }
  unsigned int v13 = *((_DWORD *)a3 + 3);
  unsigned int v14 = *((_DWORD *)a3 + 2) + v8 <= v10 ? *((_DWORD *)a3 + 2) : v10 - v8;
  unint64_t v15 = (int)(v13 + v7) <= v11 ? v13 : (v11 - v7);
  if (!v14 || v15 == 0) {
    return 0;
  }
  int v18 = v11 - v7 - v15;
  if (a5) {
    int v19 = v18;
  }
  else {
    int v19 = *((_DWORD *)a3 + 1);
  }
  unint64_t v20 = *((void *)this + a2 + 20);
  v40[0] = v20;
  unint64_t v21 = *((unsigned __int8 *)this + 152);
  if (v21 > 0x25) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = dword_184999468[v21];
  }
  uint64_t v23 = 0;
  if (a2)
  {
    uint64_t v24 = a2;
    long long v25 = (uint64_t *)((char *)this + 160);
    do
    {
      uint64_t v26 = *v25++;
      v23 += v26 * v9;
      if (v9 <= 1) {
        unsigned int v9 = 1;
      }
      else {
        v9 >>= 1;
      }
      --v24;
    }
    while (v24);
  }
  long long v27 = (CGColorSpace *)(*((void *)this + 12) + v23 + v20 * v19 + v22 * v8);
  if (!a4 || v20 <= a4)
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    long long v34 = (atomic_uint **)malloc_type_zone_malloc(malloc_zone, 0x18uLL, 0x8BB15036uLL);
    if (!v34) {
      return CA::Render::Image::new_image((CA::Render::Image *)*((unsigned __int8 *)this + 152), v14, v15, 1u, *((CGColorSpace **)this + 6), v27, v40, (const unint64_t *)CA::Render::Image::SubimageInfo::release, 0, v37);
    }
    long long v35 = v34;
    *long long v34 = (atomic_uint *)this;
    *((_DWORD *)v34 + 2) = a2;
    *((_DWORD *)v34 + 3) = v8;
    *((_DWORD *)v34 + 4) = v19;
    atomic_fetch_add((atomic_uint *volatile)this + 37, 1u);
    uint64_t result = CA::Render::Image::new_image((CA::Render::Image *)*((unsigned __int8 *)this + 152), v14, v15, 1u, *((CGColorSpace **)this + 6), v27, v40, (const unint64_t *)CA::Render::Image::SubimageInfo::release, (void (*)(const void *, void *))v34, v37);
    if (result) {
      return result;
    }
    CA::Render::Image::release_data(*v35);
    long long v36 = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(v36, v35);
    return 0;
  }
  unint64_t v28 = CA::Render::format_rowbytes((CA::Render *)v21, v14);
  uint64_t v38 = 0;
  unint64_t v39 = v28;
  if (is_mul_ok(v28, v15)) {
    long long v29 = (CA::Render *)(v28 * v15);
  }
  else {
    long long v29 = 0;
  }
  uint64_t result = (CA::Render::Texture *)CA::Render::aligned_malloc(v29, (unint64_t *)&v38, 0);
  if (result)
  {
    long long v30 = result;
    CGBlt_copyBytes();
    long long v31 = v38;
    MEMORY[0x185325430](*MEMORY[0x1E4F14960], v30, v38, 1, 1);
    uint64_t result = CA::Render::Image::new_image((CA::Render::Image *)*((unsigned __int8 *)this + 152), v14, v15, 1u, *((CGColorSpace **)this + 6), v30, &v39, (const unint64_t *)CA::Render::aligned_free, v31, v37);
    if (result)
    {
      *((_DWORD *)result + 3) |= 0x800000u;
      return result;
    }
    CA::Render::aligned_free(v30, (size_t)v31, v32);
    return 0;
  }
  return result;
}

void CA::Render::Image::SubimageInfo::release(CA::Render::Image::SubimageInfo *this, atomic_uint **a2, void *a3)
{
  if (a2)
  {
    CA::Render::Image::release_data(*a2);
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(malloc_zone, a2);
  }
}

uint64_t CA::Render::Image::SubimageKey::hash(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(int *)(a1 + 28);
  if (v1) {
    return 33
  }
         * (33
          * (33 * (33 * (33 * (33 * *(void *)a1 + *(int *)(a1 + 16)) + *(int *)(a1 + 20)) + *(int *)(a1 + 24)) + v2)
          + *(unsigned int *)(a1 + 32))
         + v1;
  else {
    return 33
  }
         * (33 * (33 * (33 * (33 * *(void *)a1 + *(int *)(a1 + 16)) + *(int *)(a1 + 20)) + *(int *)(a1 + 24)) + v2)
         + *(unsigned int *)(a1 + 32);
}

BOOL CA::Render::Image::SubimageKey::compare(uint64_t a1, uint64_t a2)
{
  return *(void *)a1 != *(void *)a2
      || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)
      || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)
      || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)
      || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28)
      || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)
      || *(void *)(a1 + 8) != *(void *)(a2 + 8);
}

uint64_t CA::Render::Image::SubimageKey::delete_images(void *a1, atomic_uint *a2, uint64_t a3)
{
  if (*a1 != a3) {
    return 0;
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, a1);
  if (a2)
  {
    if (atomic_fetch_add(a2 + 2, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a2 + 16))(a2);
    }
  }
  return 1;
}

uint64_t CA::Render::Image::collect_subimages_(double *a1, atomic_uint *a2, double *a3)
{
  double v3 = a1[5];
  if (*a3 >= v3)
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(malloc_zone, a1);
    if (a2 && atomic_fetch_add(a2 + 2, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a2 + 16))(a2);
    }
    return 1;
  }
  else
  {
    uint64_t result = 0;
    if (v3 < *(double *)&CA::Render::Image::_subimage_deadline) {
      CA::Render::Image::_subimage_deadline = *(void *)&v3;
    }
  }
  return result;
}

void CA::CG::AccelDataProvider::set_image(CA::CG::AccelDataProvider *this, CGImage *a2)
{
  *((_DWORD *)this + 10) = CGImageGetIdentifier();
  os_unfair_lock_lock((os_unfair_lock_t)&CA::CG::AccelDataProvider::_table_lock);
  double v3 = (int *)CA::CG::AccelDataProvider::_table;
  if (!CA::CG::AccelDataProvider::_table)
  {
    double v3 = (int *)x_hash_table_new_((unint64_t (*)(uint64_t))CA::CG::identifier_hash, 0, 0, 0, 0, 0);
    CA::CG::AccelDataProvider::_table = (uint64_t)v3;
  }
  hash_table_modify(v3, *((unsigned int *)this + 10), (uint64_t)this, 0);

  os_unfair_lock_unlock((os_unfair_lock_t)&CA::CG::AccelDataProvider::_table_lock);
}

uint64_t CA::CG::identifier_hash(uint64_t this)
{
  return this;
}

uint64_t CA::CG::AccelDataProvider::retain_texture(CA::CG::Renderer &)::$_0::__invoke(uint64_t result)
{
  if (atomic_fetch_add((atomic_uint *volatile)(result + 8), 0xFFFFFFFF) == 1)
  {
    uint64_t v1 = result;
    (**(void (***)(uint64_t))result)(result);
    uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 16);
    return v2(v1);
  }
  return result;
}

uint64_t CA::CG::AccelDataProvider::AccelDataProvider(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = &unk_1ED028E48;
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 44) = a3;
  *(unsigned char *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 12) = 1;
  atomic_fetch_add((atomic_uint *volatile)(a1 + 12), 1u);
  uint64_t v5 = (os_unfair_lock_s *)(a2 + 12);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 12));
  uint64_t v6 = *(void *)(a2 + 88);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  int v8 = malloc_type_zone_malloc(malloc_zone, 0x10uLL, 0x8BB15036uLL);
  *int v8 = a1;
  v8[1] = v6;
  *(void *)(a2 + 88) = v8;
  os_unfair_lock_unlock(v5);
  return a1;
}

void CA::CG::AccelDataProvider::~AccelDataProvider(CA::CG::AccelDataProvider *this, uint64_t a2, void *a3)
{
  *(void *)this = &unk_1ED028E48;
  if (*((_DWORD *)this + 10))
  {
    os_unfair_lock_lock((os_unfair_lock_t)&CA::CG::AccelDataProvider::_table_lock);
    x_hash_table_remove(CA::CG::AccelDataProvider::_table, *((unsigned int *)this + 10));
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::CG::AccelDataProvider::_table_lock);
  }
  uint64_t v4 = *((void *)this + 2);
  if (v4)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v4 + 12));
    *(void *)(v4 + 88) = x_list_remove(*(void **)(v4 + 88), (uint64_t)this);
    os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 12));
    if (atomic_fetch_add((atomic_uint *volatile)this + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(CA::CG::AccelDataProvider *))(*(void *)this + 16))(this);
    }
  }
  uint64_t v5 = (CA::Render *)*((void *)this + 3);
  if (v5) {
    CA::Render::aligned_free(v5, *((void *)this + 4), a3);
  }
}

void CA::CG::AccelDataProvider::detach(os_unfair_lock_s *this)
{
  uint64_t v2 = this + 2;
  os_unfair_lock_lock(this + 2);
  if (*(void *)&this[4]._os_unfair_lock_opaque)
  {
    (**(void (***)(os_unfair_lock_s *))&this->_os_unfair_lock_opaque)(this);
    *(void *)&this[4]._uint32_t os_unfair_lock_opaque = 0;
  }

  os_unfair_lock_unlock(v2);
}

uint64_t CA::CG::AccelDataProvider::release_info(uint64_t this, void *a2)
{
  *(unsigned char *)(this + 48) = 1;
  unsigned int add = atomic_fetch_add((atomic_uint *volatile)(this + 12), 0xFFFFFFFF);
  if (this)
  {
    if (add == 1) {
      return (*(uint64_t (**)(void))(*(void *)this + 16))();
    }
  }
  return this;
}

uint64_t CA::CG::AccelDataProvider::get_byte_pointer(os_unfair_lock_s *this, void *a2)
{
  double v3 = this + 2;
  os_unfair_lock_lock(this + 2);
  (**(void (***)(os_unfair_lock_s *))&this->_os_unfair_lock_opaque)(this);
  uint64_t v4 = *(void *)&this[6]._os_unfair_lock_opaque;
  os_unfair_lock_unlock(v3);
  return v4;
}

void CA::Render::memory_warning(CA::Render *this, void *a2)
{
  uint64_t v2 = mach_absolute_time();
  CA::Render::last_memory_warning = CATimeWithHostTime(v2);
  CA::Render::collect((CA::Render *)1, *(double *)&CA::Render::last_memory_warning);

  CA::Render::post_notification(0x31u, 0, 0, 0);
}

void CA::Render::remove_observer(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 <= 0x49)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::notification_lock);
    if ((CA::Render::initialize_notifications(void)::initialized & 1) == 0)
    {
      uint64_t v17 = 0;
      int v18 = (int64x2_t *)CA::Render::notifications;
      do
      {
        int v19 = &CA::Render::notifications_map_data[v17];
        *(_OWORD *)int v19 = 0uLL;
        *((_OWORD *)v19 + 1) = 0uLL;
        *((_DWORD *)v19 + 8) = 1065353216;
        *int v18 = vdupq_n_s64((unint64_t)v18);
        ++v18;
        v17 += 5;
      }
      while (v17 != 370);
      CA::Render::initialize_notifications(void)::initialized = 1;
    }
    int v8 = &CA::Render::notifications[a1];
    unsigned int v9 = (long long *)*((void *)v8 + 1);
    if (v9 == v8)
    {
LABEL_9:
      os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::notification_lock);
    }
    else
    {
      while (a2 && *((void *)v9 + 6) != a2 || *((void *)v9 + 5) != a3 || *((void *)v9 + 7) != a4)
      {
        unsigned int v9 = (long long *)*((void *)v9 + 1);
        if (v9 == v8) {
          goto LABEL_9;
        }
      }
      uint64_t v11 = *(void *)v9;
      int v10 = (void *)*((void *)v9 + 1);
      *(void *)(v11 + 8) = v10;
      *int v10 = v11;
      *(void *)unsigned int v9 = v9;
      *((void *)v9 + 1) = v9;
      uint64_t v12 = *((void *)v9 + 2);
      unsigned int v13 = (void *)*((void *)v9 + 3);
      *(void *)(v12 + 8) = v13;
      *unsigned int v13 = v12;
      *((void *)v9 + 2) = v9 + 1;
      *((void *)v9 + 3) = v9 + 1;
      unint64_t v14 = *((void *)v9 + 6);
      if (v14)
      {
        unint64_t v15 = std::__hash_table<std::__hash_value_type<CA::Render::Object *,x_link_struct>,std::__unordered_map_hasher<CA::Render::Object *,std::__hash_value_type<CA::Render::Object *,x_link_struct>,std::hash<CA::Render::Object *>,std::equal_to<CA::Render::Object *>,true>,std::__unordered_map_equal<CA::Render::Object *,std::__hash_value_type<CA::Render::Object *,x_link_struct>,std::equal_to<CA::Render::Object *>,std::hash<CA::Render::Object *>,true>,std::allocator<std::__hash_value_type<CA::Render::Object *,x_link_struct>>>::find<CA::Render::Object *>(&CA::Render::notifications_map_data[5 * a1], v14);
        if (v15)
        {
          if ((void *)v15[4] == v15 + 3) {
            std::__hash_table<std::__hash_value_type<CA::Render::Object *,x_link_struct>,std::__unordered_map_hasher<CA::Render::Object *,std::__hash_value_type<CA::Render::Object *,x_link_struct>,std::hash<CA::Render::Object *>,std::equal_to<CA::Render::Object *>,true>,std::__unordered_map_equal<CA::Render::Object *,std::__hash_value_type<CA::Render::Object *,x_link_struct>,std::equal_to<CA::Render::Object *>,std::hash<CA::Render::Object *>,true>,std::allocator<std::__hash_value_type<CA::Render::Object *,x_link_struct>>>::erase(&CA::Render::notifications_map_data[5 * a1], v15);
          }
        }
      }
      os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::notification_lock);
      dispatch_semaphore_wait(*((dispatch_semaphore_t *)v9 + 8), 0xFFFFFFFFFFFFFFFFLL);
      dispatch_semaphore_signal(*((dispatch_semaphore_t *)v9 + 8));
      dispatch_release(*((dispatch_object_t *)v9 + 8));
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      malloc_zone_free(malloc_zone, v9);
    }
  }
}

float CA::HalfFloat::to_float(CA::HalfFloat *this)
{
  unsigned int v1 = (this >> 10) & 0x1F;
  if (v1 && v1 != 31)
  {
    unsigned int v1 = (v1 << 23) + 939524096;
  }
  else if (v1 == 31)
  {
    unsigned int v1 = 2139095040;
  }
  LODWORD(result) = (this << 16) & 0x80000000 | (this >> 7) & 7 | (8
                                                                                       * ((unsigned __int16)this & 0x3FF)) & 0x1FFF | (((unsigned __int16)this & 0x3FF) << 13) | v1;
  return result;
}

uint64_t CA::Render::ShapeLayer::hit_test(uint64_t a1, uint64_t a2, CGFloat *a3)
{
  v16[1] = *(CA::Render::Path **)MEMORY[0x1E4F143B8];
  uint64_t v4 = *(CA::Render::Path **)(a1 + 16);
  if (!v4) {
    return 0;
  }
  if (*(float *)(a1 + 24) != 0.0
    || *(float *)(a1 + 28) != 0.0
    || *(float *)(a1 + 32) != 0.0
    || *(float *)(a1 + 36) != 0.0
    || *(void *)(a1 + 40))
  {
    CGFloat v6 = *a3;
    CGFloat v7 = a3[1];
    int v8 = *(unsigned __int8 *)(a1 + 120);
    unsigned int v9 = (const CGPath *)CA::Render::Path::cg_path(v4);
    v17.CGFloat x = v6;
    v17.CGFloat y = v7;
    if (CGPathContainsPoint(v9, 0, v17, v8 == 1)) {
      return 1;
    }
  }
  if (*(double *)(a1 + 88) <= 0.0
    || (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(*(float32x4_t *)(a1 + 48))))) & 1) == 0
    && !*(void *)(a1 + 64))
  {
    return 0;
  }
  v16[0] = 0;
  CA::Render::ShapeLayer::stroke_path((CA::Render::ShapeLayer *)v16, *(double *)(a1 + 144), a1);
  uint64_t v11 = (atomic_uint *)v16[0];
  if (!v16[0]) {
    return 0;
  }
  CGFloat v12 = *a3;
  CGFloat v13 = a3[1];
  unint64_t v14 = (const CGPath *)CA::Render::Path::cg_path(v16[0]);
  v18.CGFloat x = v12;
  v18.CGFloat y = v13;
  BOOL v10 = CGPathContainsPoint(v14, 0, v18, 0);
  if (atomic_fetch_add(v11 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v11 + 16))(v11);
  }
  return v10;
}

void CA::Render::ShapeLayer::show(CA::Render::ShapeLayer *this, int a2, uint64_t a3)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  if ((a3 & 1) == 0)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      CGFloat v6 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184668000, v6, OS_LOG_TYPE_DEFAULT, "(shape-layer", buf, 2u);
      }
    }
    if (*((void *)this + 2))
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      (*(void (**)(void, void, uint64_t))(**((void **)this + 2) + 40))(*((void *)this + 2), (a2 + 1), a3);
    }
    if (*((void *)this + 5))
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        CGFloat v7 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184668000, v7, OS_LOG_TYPE_DEFAULT, "(fillColor ", buf, 2u);
        }
      }
      (*(void (**)(void, void, uint64_t))(**((void **)this + 5) + 40))(*((void *)this + 5), (a2 + 1), a3);
      if (x_log_hook_p())
      {
LABEL_17:
        x_log_();
        goto LABEL_23;
      }
      uint64_t v8 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        unsigned int v9 = ")";
        BOOL v10 = v8;
        uint32_t v11 = 2;
LABEL_22:
        _os_log_impl(&dword_184668000, v10, OS_LOG_TYPE_DEFAULT, v9, buf, v11);
      }
    }
    else
    {
      if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(*(float32x4_t *)((char *)this + 24))))) & 1) == 0) {
        goto LABEL_23;
      }
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p()) {
        goto LABEL_17;
      }
      uint64_t v12 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        double v13 = *((float *)this + 6);
        double v14 = *((float *)this + 7);
        double v15 = *((float *)this + 8);
        double v16 = *((float *)this + 9);
        *(_DWORD *)buf = 134218752;
        double v49 = v13;
        __int16 v50 = 2048;
        double v51 = v14;
        __int16 v52 = 2048;
        double v53 = v15;
        __int16 v54 = 2048;
        double v55 = v16;
        unsigned int v9 = "(fillColor %.3g %.3g %.3g %.3g)";
        BOOL v10 = v12;
        uint32_t v11 = 42;
        goto LABEL_22;
      }
    }
LABEL_23:
    if (*((void *)this + 8))
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        CGPoint v17 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184668000, v17, OS_LOG_TYPE_DEFAULT, "(strokeColor ", buf, 2u);
        }
      }
      (*(void (**)(void, void, uint64_t))(**((void **)this + 8) + 40))(*((void *)this + 8), (a2 + 1), a3);
      if (x_log_hook_p())
      {
LABEL_32:
        x_log_();
        goto LABEL_38;
      }
      uint64_t v18 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        int v19 = ")";
        unint64_t v20 = v18;
        uint32_t v21 = 2;
LABEL_37:
        _os_log_impl(&dword_184668000, v20, OS_LOG_TYPE_DEFAULT, v19, buf, v21);
      }
    }
    else
    {
      if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(*((float32x4_t *)this + 3))))) & 1) == 0) {
        goto LABEL_38;
      }
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p()) {
        goto LABEL_32;
      }
      uint64_t v22 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        double v23 = *((float *)this + 12);
        double v24 = *((float *)this + 13);
        double v25 = *((float *)this + 14);
        double v26 = *((float *)this + 15);
        *(_DWORD *)buf = 134218752;
        double v49 = v23;
        __int16 v50 = 2048;
        double v51 = v24;
        __int16 v52 = 2048;
        double v53 = v25;
        __int16 v54 = 2048;
        double v55 = v26;
        int v19 = "(strokeColor %.3g %.3g %.3g %.3g)";
        unint64_t v20 = v22;
        uint32_t v21 = 42;
        goto LABEL_37;
      }
    }
LABEL_38:
    if (*((double *)this + 9) != 0.0)
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        long long v27 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          double v28 = *((double *)this + 9);
          *(_DWORD *)buf = 134217984;
          double v49 = v28;
          _os_log_impl(&dword_184668000, v27, OS_LOG_TYPE_DEFAULT, "(strokeStart %g)", buf, 0xCu);
        }
      }
    }
    if (*((double *)this + 10) != 0.0)
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        long long v29 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          double v30 = *((double *)this + 10);
          *(_DWORD *)buf = 134217984;
          double v49 = v30;
          _os_log_impl(&dword_184668000, v29, OS_LOG_TYPE_DEFAULT, "(strokeEnd %g)", buf, 0xCu);
        }
      }
    }
    if (*((double *)this + 11) != 0.0)
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        long long v31 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          double v32 = *((double *)this + 11);
          *(_DWORD *)buf = 134217984;
          double v49 = v32;
          _os_log_impl(&dword_184668000, v31, OS_LOG_TYPE_DEFAULT, "(lineWidth %g)", buf, 0xCu);
        }
      }
    }
    if (*((double *)this + 12) != 10.0)
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        long long v33 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          double v34 = *((double *)this + 12);
          *(_DWORD *)buf = 134217984;
          double v49 = v34;
          _os_log_impl(&dword_184668000, v33, OS_LOG_TYPE_DEFAULT, "(miterLimit %g)", buf, 0xCu);
        }
      }
    }
    if (*((double *)this + 13) != 0.0)
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        long long v35 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          double v36 = *((double *)this + 13);
          *(_DWORD *)buf = 134217984;
          double v49 = v36;
          _os_log_impl(&dword_184668000, v35, OS_LOG_TYPE_DEFAULT, "(dashPhase %g)", buf, 0xCu);
        }
      }
    }
    if (*((void *)this + 14))
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        long long v37 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184668000, v37, OS_LOG_TYPE_DEFAULT, "(dashPattern ", buf, 2u);
        }
      }
      (*(void (**)(void, void, uint64_t))(**((void **)this + 14) + 40))(*((void *)this + 14), (a2 + 1), a3);
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        uint64_t v38 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184668000, v38, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
        }
      }
    }
    if (*((unsigned char *)this + 120))
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        unint64_t v39 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184668000, v39, OS_LOG_TYPE_DEFAULT, "(fillRule evenOdd)", buf, 2u);
        }
      }
    }
    if (*((unsigned char *)this + 121))
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        int v40 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          if (*((unsigned __int8 *)this + 121) << 8 == 256) {
            *(double *)&__int16 v41 = COERCE_DOUBLE("round");
          }
          else {
            *(double *)&__int16 v41 = COERCE_DOUBLE("bevel");
          }
          *(_DWORD *)buf = 136315138;
          double v49 = *(double *)&v41;
          _os_log_impl(&dword_184668000, v40, OS_LOG_TYPE_DEFAULT, "(lineJoin %s)", buf, 0xCu);
        }
      }
    }
    if (*((unsigned char *)this + 122))
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        int v42 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          if (*((unsigned __int8 *)this + 122) << 16 == 0x10000) {
            *(double *)&__int16 v43 = COERCE_DOUBLE("round");
          }
          else {
            *(double *)&__int16 v43 = COERCE_DOUBLE("square");
          }
          *(_DWORD *)buf = 136315138;
          double v49 = *(double *)&v43;
          _os_log_impl(&dword_184668000, v42, OS_LOG_TYPE_DEFAULT, "(lineCap %s)", buf, 0xCu);
        }
      }
    }
    if (x_log_hook_p())
    {
      x_log_();
      return;
    }
    int v44 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      uint64_t v45 = ")";
LABEL_97:
      _os_log_impl(&dword_184668000, v44, OS_LOG_TYPE_DEFAULT, v45, buf, 2u);
      return;
    }
    return;
  }
  uint64_t v46 = *((void *)this + 2);
  BOOL v47 = x_log_hook_p();
  if (!v46)
  {
    if (!v47)
    {
      int v44 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        uint64_t v45 = "shape-layer";
        goto LABEL_97;
      }
      return;
    }
LABEL_103:
    x_log_();
    return;
  }
  if (v47) {
    goto LABEL_103;
  }
  int v44 = x_log_category_render;
  if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    uint64_t v45 = "shape-layer-path";
    goto LABEL_97;
  }
}

uint64_t drawLine(void *a1, const char *a2, CGPoint a3, const __CTLine *a4)
{
  return objc_msgSend(a1, "_drawLine:inContext:atPoint:", a4, a2, a3.x, a3.y);
}

void sub_184848FDC(_Unwind_Exception *a1)
{
  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

double get_line_bounds(const __CTLine *a1, double *a2, double *a3, double *a4)
{
  double TypographicBounds = CTLineGetTypographicBounds(a1, a2, a3, a4);
  if (dyld_program_sdk_at_least())
  {
    CTLineGetDefaultBounds();
    if (a2)
    {
      double v8 = *a2;
      if (*a2 <= 0.0) {
        double v8 = 0.0;
      }
      *a2 = v8;
    }
    if (a3)
    {
      double v9 = *a3;
      if (*a3 <= 0.0) {
        double v9 = 0.0;
      }
      *a3 = v9;
    }
    if (a4)
    {
      double v10 = *a4;
      if (*a4 <= 0.0) {
        double v10 = 0.0;
      }
      *a4 = v10;
    }
  }
  return TypographicBounds;
}

Class init_alignment(void)
{
  Class result = NSClassFromString(&cfstr_Uiapplication.isa);
  if (result)
  {
    init_alignment(void)::app = (uint64_t)[(objc_class *)result sharedApplication];
    Class result = (Class)objc_msgSend((id)init_alignment(void)::app, sel_userInterfaceLayoutDirection);
    if (result == 1) {
      natural_alignment = 1;
    }
  }
  return result;
}

void sub_184849354(_Unwind_Exception *a1)
{
  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

unsigned char *x_stream_finish(uint64_t a1)
{
  uint64_t v2 = malloc_type_realloc(*(void **)a1, *(void *)(a1 + 8) - *(void *)a1 + 1, 0x5BC272C8uLL);
  double v3 = v2;
  if (v2) {
    v2[*(void *)(a1 + 8) - *(void *)a1] = 0;
  }
  else {
    free(*(void **)a1);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  return v3;
}

char *x_stream_printf(uint64_t a1, char *__s, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v266 = *MEMORY[0x1E4F143B8];
  uint64_t v249 = (double *)&a9;
  while (1)
  {
    uint32_t v11 = strchr(__s, 37);
    if (!v11) {
      break;
    }
    uint64_t v12 = v11;
    size_t v13 = v11 - __s;
    if (v11 <= __s) {
      goto LABEL_12;
    }
    double v14 = *(char **)(a1 + 8);
    unint64_t v15 = *(void *)(a1 + 16);
    if ((unint64_t)&v14[v13] < v15) {
      goto LABEL_11;
    }
    uint64_t v17 = v15 - *(void *)a1;
    BOOL v16 = v17 == 0;
    uint64_t v18 = 2 * v17;
    if (v16) {
      uint64_t v19 = 1024;
    }
    else {
      uint64_t v19 = v18;
    }
    do
    {
      size_t v20 = v19;
      size_t v21 = *(void *)a1 - (void)v14 + v19;
      v19 *= 2;
    }
    while (v21 < v13);
    uint64_t v22 = (char *)malloc_type_realloc(*(void **)a1, v20, 0xFFAC0152uLL);
    if (v22)
    {
      double v23 = v22;
      double v14 = &v22[*(void *)(a1 + 8) - *(void *)a1];
      *(void *)a1 = v23;
      *(void *)(a1 + 8) = v14;
      *(void *)(a1 + 16) = &v23[v20];
LABEL_11:
      memcpy(v14, __s, v13);
      *(void *)(a1 + 8) += v13;
    }
LABEL_12:
    double v24 = v12 + 1;
    int v25 = v12[1];
    if ((v25 - 48) > 9)
    {
      LODWORD(v26) = 0;
    }
    else
    {
      LODWORD(v26) = 0;
      do
      {
        LODWORD(v26) = v25 + 10 * v26 - 48;
        int v27 = *++v24;
        int v25 = v27;
      }
      while ((v27 - 48) < 0xA);
      uint64_t v12 = v24 - 1;
    }
    if (v25 == 42)
    {
      double v28 = v249++;
      LODWORD(v26) = *(_DWORD *)v28;
      uint64_t v12 = v24;
    }
    long long v29 = v12 + 1;
    if (v12[1] == 46)
    {
      int v30 = v12[2];
      if ((v30 - 48) <= 9)
      {
        int v31 = 0;
        double v32 = v12 + 1;
        do
        {
          int v31 = v30 + 10 * v31 - 48;
          long long v29 = v32 + 1;
          int v30 = v32[2];
          ++v32;
        }
        while ((v30 - 48) < 0xA);
      }
      __powidf2();
      if (v34 >= 1.0 || v34 <= 0.0) {
        double v33 = 0.000001;
      }
      else {
        double v33 = v34;
      }
      uint64_t v12 = v29;
    }
    else
    {
      double v33 = 0.000001;
    }
    char v36 = 0;
    long long v264 = 0u;
    long long v265 = 0u;
    long long v262 = 0u;
    long long v263 = 0u;
    long long v260 = 0u;
    long long v261 = 0u;
    long long v258 = 0u;
    long long v259 = 0u;
    long long v256 = 0u;
    long long v257 = 0u;
    long long v254 = 0u;
    long long v255 = 0u;
    long long v252 = 0u;
    long long v253 = 0u;
    *(_OWORD *)__str = 0u;
    long long v251 = 0u;
    uint64_t v38 = v12 + 1;
    int v37 = v12[1];
    if (v37 <= 86)
    {
      if (v37 == 37)
      {
        if (v26) {
          size_t v42 = (int)v26 - 1;
        }
        else {
          size_t v42 = 0;
        }
        uint64_t v62 = *(char **)(a1 + 8);
        unint64_t v63 = *(void *)(a1 + 16);
        if ((unint64_t)&v62[v42 + 1] < v63) {
          goto LABEL_72;
        }
        int v64 = *(unsigned char **)a1;
        unint64_t v65 = v63 - *(void *)a1;
        BOOL v16 = v65 == 0;
        uint64_t v66 = 2 * v65;
        if (v16) {
          uint64_t v66 = 1024;
        }
        uint64_t v67 = v64 - v62;
        do
        {
          size_t v68 = v66;
          size_t v69 = v67 + v66;
          v66 *= 2;
        }
        while (v69 <= v42);
        uint64_t v70 = (char *)malloc_type_realloc(v64, v68, 0xFFAC0152uLL);
        if (v70)
        {
          uint64_t v62 = &v70[*(void *)(a1 + 8) - *(void *)a1];
          *(void *)a1 = v70;
          *(void *)(a1 + 8) = v62;
          *(void *)(a1 + 16) = &v70[v68];
LABEL_72:
          LOBYTE(v71) = 37;
LABEL_100:
          *uint64_t v62 = v71;
          int v96 = (void *)(*(void *)(a1 + 8) + 1);
          *(void *)(a1 + 8) = v96;
          if (v26 < 2) {
            goto LABEL_197;
          }
LABEL_195:
          memset(v96, 32, v42);
          size_t v169 = *(void *)(a1 + 8) + v42;
LABEL_196:
          *(void *)(a1 + 8) = v169;
        }
      }
      else
      {
        if (v37 != 70)
        {
          if (v37 != 71) {
            goto LABEL_197;
          }
          char v36 = 1;
        }
        __int16 v52 = v249++;
        double v53 = *v52;
        if ((*(void *)v52 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
          double v54 = 0.0;
        }
        else {
          double v54 = *v52;
        }
        if (v53 != 0.0) {
          double v53 = v54;
        }
        if (x_dtostr_(__str, 0x100uLL, v36, v53, v33))
        {
          size_t v55 = strlen(__str);
          size_t v41 = v55;
          size_t v26 = (int)v26;
          if ((int)v26 >= v55) {
            size_t v42 = (int)v26 - v55;
          }
          else {
            size_t v42 = 0;
          }
          size_t v56 = v42 + v55;
          int v44 = *(char **)(a1 + 8);
          unint64_t v57 = *(void *)(a1 + 16);
          if ((unint64_t)&v44[v56] >= v57)
          {
            uint64_t v46 = *(unsigned char **)a1;
            uint64_t v58 = v57 - *(void *)a1;
            BOOL v16 = v58 == 0;
            uint64_t v59 = 2 * v58;
            if (v16) {
              uint64_t v60 = 1024;
            }
            else {
              uint64_t v60 = v59;
            }
            do
            {
              size_t v50 = v60;
              unint64_t v61 = v46 - v44 + v60;
              v60 *= 2;
            }
            while (v61 < v56);
LABEL_191:
            float64x2_t v178 = (char *)malloc_type_realloc(v46, v50, 0xFFAC0152uLL);
            if (!v178) {
              goto LABEL_197;
            }
            float64x2_t v179 = v178;
            int v44 = &v178[*(void *)(a1 + 8) - *(void *)a1];
            *(void *)a1 = v179;
            *(void *)(a1 + 8) = v44;
            *(void *)(a1 + 16) = &v179[v50];
          }
LABEL_193:
          float v148 = __str;
LABEL_194:
          memcpy(v44, v148, v41);
          int v96 = (void *)(*(void *)(a1 + 8) + v41);
          *(void *)(a1 + 8) = v96;
          if (v41 >= v26) {
            goto LABEL_197;
          }
          goto LABEL_195;
        }
      }
    }
    else
    {
      switch(v12[1])
      {
        case 'a':
          unint64_t v39 = v249++;
          snprintf(__str, 0x100uLL, "%a", *v39);
          size_t v40 = strlen(__str);
          size_t v41 = v40;
          size_t v26 = (int)v26;
          if ((int)v26 >= v40) {
            size_t v42 = (int)v26 - v40;
          }
          else {
            size_t v42 = 0;
          }
          size_t v43 = v42 + v40;
          int v44 = *(char **)(a1 + 8);
          unint64_t v45 = *(void *)(a1 + 16);
          if ((unint64_t)&v44[v43] < v45) {
            goto LABEL_193;
          }
          uint64_t v46 = *(unsigned char **)a1;
          uint64_t v47 = v45 - *(void *)a1;
          BOOL v16 = v47 == 0;
          uint64_t v48 = 2 * v47;
          if (v16) {
            uint64_t v49 = 1024;
          }
          else {
            uint64_t v49 = v48;
          }
          do
          {
            size_t v50 = v49;
            unint64_t v51 = v46 - v44 + v49;
            v49 *= 2;
          }
          while (v51 < v43);
          goto LABEL_191;
        case 'b':
        case 'e':
        case 'h':
        case 'i':
        case 'j':
        case 'k':
        case 'm':
        case 'n':
        case 'o':
        case 'q':
        case 'r':
        case 't':
        case 'v':
          break;
        case 'c':
          float v88 = v249++;
          int v71 = *(_DWORD *)v88;
          __str[0] = *(_DWORD *)v88;
          if (v26) {
            size_t v42 = (int)v26 - 1;
          }
          else {
            size_t v42 = 0;
          }
          uint64_t v62 = *(char **)(a1 + 8);
          unint64_t v89 = *(void *)(a1 + 16);
          if ((unint64_t)&v62[v42 + 1] < v89) {
            goto LABEL_100;
          }
          unsigned int v90 = *(unsigned char **)a1;
          uint64_t v91 = 2 * (v89 - *(void *)a1);
          if (v89 == *(void *)a1) {
            uint64_t v91 = 1024;
          }
          uint64_t v92 = v90 - v62;
          do
          {
            size_t v93 = v91;
            size_t v94 = v92 + v91;
            v91 *= 2;
          }
          while (v94 <= v42);
          CGAffineTransform v95 = (char *)malloc_type_realloc(v90, v93, 0xFFAC0152uLL);
          if (!v95) {
            break;
          }
          uint64_t v62 = &v95[*(void *)(a1 + 8) - *(void *)a1];
          *(void *)a1 = v95;
          *(void *)(a1 + 8) = v62;
          *(void *)(a1 + 16) = &v95[v93];
          LOBYTE(v71) = __str[0];
          goto LABEL_100;
        case 'd':
          float v97 = v249++;
          snprintf(__str, 0x100uLL, "%d", *(_DWORD *)v97);
          size_t v98 = strlen(__str);
          size_t v41 = v98;
          size_t v26 = (int)v26;
          if ((int)v26 >= v98) {
            size_t v42 = (int)v26 - v98;
          }
          else {
            size_t v42 = 0;
          }
          size_t v99 = v42 + v98;
          int v44 = *(char **)(a1 + 8);
          unint64_t v100 = *(void *)(a1 + 16);
          if ((unint64_t)&v44[v99] < v100) {
            goto LABEL_193;
          }
          uint64_t v46 = *(unsigned char **)a1;
          uint64_t v101 = v100 - *(void *)a1;
          BOOL v16 = v101 == 0;
          uint64_t v102 = 2 * v101;
          if (v16) {
            uint64_t v103 = 1024;
          }
          else {
            uint64_t v103 = v102;
          }
          do
          {
            size_t v50 = v103;
            unint64_t v104 = v46 - v44 + v103;
            v103 *= 2;
          }
          while (v104 < v99);
          goto LABEL_191;
        case 'f':
          goto LABEL_112;
        case 'g':
          char v36 = 1;
LABEL_112:
          unint64_t v105 = v249++;
          if (!x_dtostr_(__str, 0x100uLL, v36, *v105, v33)) {
            break;
          }
          size_t v106 = strlen(__str);
          size_t v41 = v106;
          size_t v26 = (int)v26;
          if ((int)v26 >= v106) {
            size_t v42 = (int)v26 - v106;
          }
          else {
            size_t v42 = 0;
          }
          size_t v107 = v42 + v106;
          int v44 = *(char **)(a1 + 8);
          unint64_t v108 = *(void *)(a1 + 16);
          if ((unint64_t)&v44[v107] < v108) {
            goto LABEL_193;
          }
          uint64_t v46 = *(unsigned char **)a1;
          uint64_t v109 = v108 - *(void *)a1;
          BOOL v16 = v109 == 0;
          uint64_t v110 = 2 * v109;
          if (v16) {
            uint64_t v111 = 1024;
          }
          else {
            uint64_t v111 = v110;
          }
          do
          {
            size_t v50 = v111;
            unint64_t v112 = v46 - v44 + v111;
            v111 *= 2;
          }
          while (v112 < v107);
          goto LABEL_191;
        case 'l':
          int v113 = v12[2];
          if (v113 <= 107)
          {
            if (v113 == 100)
            {
              uint64_t v209 = v249++;
              snprintf(__str, 0x100uLL, "%ld", *(void *)v209);
              size_t v210 = strlen(__str);
              size_t v182 = v210;
              size_t v26 = (int)v26;
              if ((int)v26 >= v210) {
                size_t v183 = (int)v26 - v210;
              }
              else {
                size_t v183 = 0;
              }
              size_t v211 = v183 + v210;
              long long v185 = *(char **)(a1 + 8);
              unint64_t v212 = *(void *)(a1 + 16);
              if ((unint64_t)&v185[v211] < v212) {
                goto LABEL_238;
              }
              v187 = *(unsigned char **)a1;
              uint64_t v213 = v212 - *(void *)a1;
              BOOL v16 = v213 == 0;
              uint64_t v214 = 2 * v213;
              if (v16) {
                uint64_t v215 = 1024;
              }
              else {
                uint64_t v215 = v214;
              }
              do
              {
                size_t v191 = v215;
                unint64_t v216 = v187 - v185 + v215;
                v215 *= 2;
              }
              while (v216 < v211);
            }
            else
            {
              if (v113 != 102) {
                break;
              }
              uint64_t v180 = v249++;
              if (!x_dtostr_(__str, 0x100uLL, 0, *v180, v33)) {
                goto LABEL_240;
              }
              size_t v181 = strlen(__str);
              size_t v182 = v181;
              size_t v26 = (int)v26;
              if ((int)v26 >= v181) {
                size_t v183 = (int)v26 - v181;
              }
              else {
                size_t v183 = 0;
              }
              size_t v184 = v183 + v181;
              long long v185 = *(char **)(a1 + 8);
              unint64_t v186 = *(void *)(a1 + 16);
              if ((unint64_t)&v185[v184] < v186) {
                goto LABEL_238;
              }
              v187 = *(unsigned char **)a1;
              uint64_t v188 = v186 - *(void *)a1;
              BOOL v16 = v188 == 0;
              uint64_t v189 = 2 * v188;
              if (v16) {
                uint64_t v190 = 1024;
              }
              else {
                uint64_t v190 = v189;
              }
              do
              {
                size_t v191 = v190;
                unint64_t v192 = v187 - v185 + v190;
                v190 *= 2;
              }
              while (v192 < v184);
            }
            goto LABEL_236;
          }
          if (v113 == 120)
          {
            float32x4_t v193 = v249++;
            snprintf(__str, 0x100uLL, "%lx", *(void *)v193);
            size_t v194 = strlen(__str);
            size_t v182 = v194;
            size_t v26 = (int)v26;
            if ((int)v26 >= v194) {
              size_t v183 = (int)v26 - v194;
            }
            else {
              size_t v183 = 0;
            }
            size_t v195 = v183 + v194;
            long long v185 = *(char **)(a1 + 8);
            unint64_t v196 = *(void *)(a1 + 16);
            if ((unint64_t)&v185[v195] < v196) {
              goto LABEL_238;
            }
            v187 = *(unsigned char **)a1;
            uint64_t v197 = v196 - *(void *)a1;
            BOOL v16 = v197 == 0;
            uint64_t v198 = 2 * v197;
            if (v16) {
              uint64_t v199 = 1024;
            }
            else {
              uint64_t v199 = v198;
            }
            do
            {
              size_t v191 = v199;
              unint64_t v200 = v187 - v185 + v199;
              v199 *= 2;
            }
            while (v200 < v195);
LABEL_236:
            uint64_t v217 = (char *)malloc_type_realloc(v187, v191, 0xFFAC0152uLL);
            if (v217)
            {
              uint64_t v218 = v217;
              long long v185 = &v217[*(void *)(a1 + 8) - *(void *)a1];
              *(void *)a1 = v218;
              *(void *)(a1 + 8) = v185;
              *(void *)(a1 + 16) = &v218[v191];
              goto LABEL_238;
            }
LABEL_240:
            ++v12;
            break;
          }
          if (v113 == 117)
          {
            uint64_t v201 = v249++;
            snprintf(__str, 0x100uLL, "%lu", *(void *)v201);
            size_t v202 = strlen(__str);
            size_t v182 = v202;
            size_t v26 = (int)v26;
            if ((int)v26 >= v202) {
              size_t v183 = (int)v26 - v202;
            }
            else {
              size_t v183 = 0;
            }
            size_t v203 = v183 + v202;
            long long v185 = *(char **)(a1 + 8);
            unint64_t v204 = *(void *)(a1 + 16);
            if ((unint64_t)&v185[v203] >= v204)
            {
              v187 = *(unsigned char **)a1;
              uint64_t v205 = v204 - *(void *)a1;
              BOOL v16 = v205 == 0;
              uint64_t v206 = 2 * v205;
              if (v16) {
                uint64_t v207 = 1024;
              }
              else {
                uint64_t v207 = v206;
              }
              do
              {
                size_t v191 = v207;
                unint64_t v208 = v187 - v185 + v207;
                v207 *= 2;
              }
              while (v208 < v203);
              goto LABEL_236;
            }
LABEL_238:
            memcpy(v185, __str, v182);
            uint64_t v219 = (void *)(*(void *)(a1 + 8) + v182);
            *(void *)(a1 + 8) = v219;
            if (v182 < v26)
            {
              memset(v219, 32, v183);
              *(void *)(a1 + 8) += v183;
            }
            goto LABEL_240;
          }
          if (v113 != 108) {
            break;
          }
          int v114 = v12[3];
          switch(v114)
          {
            case 'x':
              long long v220 = v249++;
              snprintf(__str, 0x100uLL, "%llx", *(void *)v220);
              size_t v221 = strlen(__str);
              size_t v117 = v221;
              size_t v26 = (int)v26;
              if ((int)v26 >= v221) {
                size_t v118 = (int)v26 - v221;
              }
              else {
                size_t v118 = 0;
              }
              size_t v222 = v118 + v221;
              uint64_t v120 = *(char **)(a1 + 8);
              unint64_t v223 = *(void *)(a1 + 16);
              if ((unint64_t)&v120[v222] < v223) {
                goto LABEL_260;
              }
              int v122 = *(unsigned char **)a1;
              uint64_t v224 = v223 - *(void *)a1;
              BOOL v16 = v224 == 0;
              uint64_t v225 = 2 * v224;
              if (v16) {
                uint64_t v226 = 1024;
              }
              else {
                uint64_t v226 = v225;
              }
              do
              {
                size_t v126 = v226;
                unint64_t v227 = v122 - v120 + v226;
                v226 *= 2;
              }
              while (v227 < v222);
              break;
            case 'u':
              uint64_t v228 = v249++;
              snprintf(__str, 0x100uLL, "%llu", *(void *)v228);
              size_t v229 = strlen(__str);
              size_t v117 = v229;
              size_t v26 = (int)v26;
              if ((int)v26 >= v229) {
                size_t v118 = (int)v26 - v229;
              }
              else {
                size_t v118 = 0;
              }
              size_t v230 = v118 + v229;
              uint64_t v120 = *(char **)(a1 + 8);
              unint64_t v231 = *(void *)(a1 + 16);
              if ((unint64_t)&v120[v230] < v231) {
                goto LABEL_260;
              }
              int v122 = *(unsigned char **)a1;
              uint64_t v232 = v231 - *(void *)a1;
              BOOL v16 = v232 == 0;
              uint64_t v233 = 2 * v232;
              if (v16) {
                uint64_t v234 = 1024;
              }
              else {
                uint64_t v234 = v233;
              }
              do
              {
                size_t v126 = v234;
                unint64_t v235 = v122 - v120 + v234;
                v234 *= 2;
              }
              while (v235 < v230);
              break;
            case 'd':
              long long v115 = v249++;
              snprintf(__str, 0x100uLL, "%lld", *(void *)v115);
              size_t v116 = strlen(__str);
              size_t v117 = v116;
              size_t v26 = (int)v26;
              if ((int)v26 >= v116) {
                size_t v118 = (int)v26 - v116;
              }
              else {
                size_t v118 = 0;
              }
              size_t v119 = v118 + v116;
              uint64_t v120 = *(char **)(a1 + 8);
              unint64_t v121 = *(void *)(a1 + 16);
              if ((unint64_t)&v120[v119] < v121) {
                goto LABEL_260;
              }
              int v122 = *(unsigned char **)a1;
              uint64_t v123 = v121 - *(void *)a1;
              BOOL v16 = v123 == 0;
              uint64_t v124 = 2 * v123;
              if (v16) {
                uint64_t v125 = 1024;
              }
              else {
                uint64_t v125 = v124;
              }
              do
              {
                size_t v126 = v125;
                unint64_t v127 = v122 - v120 + v125;
                v125 *= 2;
              }
              while (v127 < v119);
              break;
            default:
              goto LABEL_263;
          }
          uint64_t v236 = (char *)malloc_type_realloc(v122, v126, 0xFFAC0152uLL);
          if (!v236) {
            goto LABEL_262;
          }
          double v237 = v236;
          uint64_t v120 = &v236[*(void *)(a1 + 8) - *(void *)a1];
          *(void *)a1 = v237;
          *(void *)(a1 + 8) = v120;
          *(void *)(a1 + 16) = &v237[v126];
LABEL_260:
          memcpy(v120, __str, v117);
          uint64_t v238 = (void *)(*(void *)(a1 + 8) + v117);
          *(void *)(a1 + 8) = v238;
          if (v117 < v26)
          {
            memset(v238, 32, v118);
            *(void *)(a1 + 8) += v118;
          }
LABEL_262:
          uint64_t v12 = v38;
LABEL_263:
          ++v12;
          break;
        case 'p':
          uint64_t v128 = (const void **)v249++;
          snprintf(__str, 0x100uLL, "%p", *v128);
          size_t v129 = strlen(__str);
          size_t v41 = v129;
          size_t v26 = (int)v26;
          if ((int)v26 >= v129) {
            size_t v42 = (int)v26 - v129;
          }
          else {
            size_t v42 = 0;
          }
          size_t v130 = v42 + v129;
          int v44 = *(char **)(a1 + 8);
          unint64_t v131 = *(void *)(a1 + 16);
          if ((unint64_t)&v44[v130] < v131) {
            goto LABEL_193;
          }
          uint64_t v46 = *(unsigned char **)a1;
          uint64_t v132 = v131 - *(void *)a1;
          BOOL v16 = v132 == 0;
          uint64_t v133 = 2 * v132;
          if (v16) {
            uint64_t v134 = 1024;
          }
          else {
            uint64_t v134 = v133;
          }
          do
          {
            size_t v50 = v134;
            unint64_t v135 = v46 - v44 + v134;
            v134 *= 2;
          }
          while (v135 < v130);
          goto LABEL_191;
        case 's':
          __int16 v136 = (const char **)v249++;
          int v137 = *v136;
          size_t v138 = strlen(*v136);
          size_t v41 = v138;
          size_t v26 = (int)v26;
          if ((int)v26 >= v138) {
            size_t v42 = (int)v26 - v138;
          }
          else {
            size_t v42 = 0;
          }
          size_t v139 = v42 + v138;
          int v44 = *(char **)(a1 + 8);
          unint64_t v140 = *(void *)(a1 + 16);
          if ((unint64_t)&v44[v139] < v140) {
            goto LABEL_157;
          }
          uint64_t v141 = v140 - *(void *)a1;
          BOOL v16 = v141 == 0;
          uint64_t v142 = 2 * v141;
          if (v16) {
            uint64_t v143 = 1024;
          }
          else {
            uint64_t v143 = v142;
          }
          do
          {
            size_t v144 = v143;
            unint64_t v145 = *(void *)a1 - (void)v44 + v143;
            v143 *= 2;
          }
          while (v145 < v139);
          float v146 = (char *)malloc_type_realloc(*(void **)a1, v144, 0xFFAC0152uLL);
          if (!v146) {
            break;
          }
          float v147 = v146;
          int v44 = &v146[*(void *)(a1 + 8) - *(void *)a1];
          *(void *)a1 = v147;
          *(void *)(a1 + 8) = v44;
          *(void *)(a1 + 16) = &v147[v144];
LABEL_157:
          float v148 = (char *)v137;
          goto LABEL_194;
        case 'u':
          float v149 = v249++;
          snprintf(__str, 0x100uLL, "%u", *(_DWORD *)v149);
          size_t v150 = strlen(__str);
          size_t v41 = v150;
          size_t v26 = (int)v26;
          if ((int)v26 >= v150) {
            size_t v42 = (int)v26 - v150;
          }
          else {
            size_t v42 = 0;
          }
          size_t v151 = v42 + v150;
          int v44 = *(char **)(a1 + 8);
          unint64_t v152 = *(void *)(a1 + 16);
          if ((unint64_t)&v44[v151] < v152) {
            goto LABEL_193;
          }
          uint64_t v46 = *(unsigned char **)a1;
          uint64_t v153 = v152 - *(void *)a1;
          BOOL v16 = v153 == 0;
          uint64_t v154 = 2 * v153;
          if (v16) {
            uint64_t v155 = 1024;
          }
          else {
            uint64_t v155 = v154;
          }
          do
          {
            size_t v50 = v155;
            unint64_t v156 = v46 - v44 + v155;
            v155 *= 2;
          }
          while (v156 < v151);
          goto LABEL_191;
        case 'w':
          float32x4_t v157 = (int *)v249++;
          int v158 = *v157;
          if (v158 < 1) {
            break;
          }
          if (v158 >= 256) {
            size_t v159 = 256;
          }
          else {
            size_t v159 = v158;
          }
          memset(__str, 32, v159);
          if ((int)v26 >= v159) {
            size_t v77 = (int)v26 - v159;
          }
          else {
            size_t v77 = 0;
          }
          uint64_t v160 = *(char **)(a1 + 8);
          unint64_t v161 = *(void *)(a1 + 16);
          if ((unint64_t)&v160[v77 + v159] < v161) {
            goto LABEL_181;
          }
          uint64_t v162 = v161 - *(void *)a1;
          BOOL v16 = v162 == 0;
          uint64_t v163 = 2 * v162;
          if (v16) {
            uint64_t v164 = 1024;
          }
          else {
            uint64_t v164 = v163;
          }
          do
          {
            size_t v165 = v164;
            unint64_t v166 = *(void *)a1 - (void)v160 + v164;
            v164 *= 2;
          }
          while (v166 < v77 + v159);
          unint64_t v167 = (char *)malloc_type_realloc(*(void **)a1, v165, 0xFFAC0152uLL);
          if (v167)
          {
            int8x16_t v168 = v167;
            uint64_t v160 = &v167[*(void *)(a1 + 8) - *(void *)a1];
            *(void *)a1 = v168;
            *(void *)(a1 + 8) = v160;
            *(void *)(a1 + 16) = &v168[v165];
LABEL_181:
            memcpy(v160, __str, v159);
            double v87 = (void *)(*(void *)(a1 + 8) + v159);
            *(void *)(a1 + 8) = v87;
            if ((int)v26 > v159) {
              goto LABEL_182;
            }
          }
          break;
        case 'x':
          long long v170 = v249++;
          snprintf(__str, 0x100uLL, "%x", *(_DWORD *)v170);
          size_t v171 = strlen(__str);
          size_t v41 = v171;
          size_t v26 = (int)v26;
          if ((int)v26 >= v171) {
            size_t v42 = (int)v26 - v171;
          }
          else {
            size_t v42 = 0;
          }
          size_t v172 = v42 + v171;
          int v44 = *(char **)(a1 + 8);
          unint64_t v173 = *(void *)(a1 + 16);
          if ((unint64_t)&v44[v172] < v173) {
            goto LABEL_193;
          }
          uint64_t v46 = *(unsigned char **)a1;
          uint64_t v174 = v173 - *(void *)a1;
          BOOL v16 = v174 == 0;
          uint64_t v175 = 2 * v174;
          if (v16) {
            uint64_t v176 = 1024;
          }
          else {
            uint64_t v176 = v175;
          }
          do
          {
            size_t v50 = v176;
            unint64_t v177 = v46 - v44 + v176;
            v176 *= 2;
          }
          while (v177 < v172);
          goto LABEL_191;
        default:
          if (v37 != 87) {
            break;
          }
          char v72 = (int *)v249++;
          int v73 = *v72;
          if (v73 < 1) {
            break;
          }
          size_t v74 = v73 & 7;
          if (v73 >> 3 >= 0xF8) {
            size_t v75 = 248;
          }
          else {
            size_t v75 = v73 >> 3;
          }
          size_t v76 = (v75 + v74);
          memset(__str, 9, v75);
          memset(&__str[v75], 32, v74);
          if ((int)v26 >= v76) {
            size_t v77 = (int)v26 - v76;
          }
          else {
            size_t v77 = 0;
          }
          double v78 = *(char **)(a1 + 8);
          unint64_t v79 = *(void *)(a1 + 16);
          if ((unint64_t)&v78[v77 + v76] < v79) {
            goto LABEL_88;
          }
          uint64_t v80 = v79 - *(void *)a1;
          BOOL v16 = v80 == 0;
          uint64_t v81 = 2 * v80;
          if (v16) {
            uint64_t v82 = 1024;
          }
          else {
            uint64_t v82 = v81;
          }
          do
          {
            size_t v83 = v82;
            unint64_t v84 = *(void *)a1 - (void)v78 + v82;
            v82 *= 2;
          }
          while (v84 < v77 + v76);
          double v85 = (char *)malloc_type_realloc(*(void **)a1, v83, 0xFFAC0152uLL);
          if (!v85) {
            break;
          }
          float64_t v86 = v85;
          double v78 = &v85[*(void *)(a1 + 8) - *(void *)a1];
          *(void *)a1 = v86;
          *(void *)(a1 + 8) = v78;
          *(void *)(a1 + 16) = &v86[v83];
LABEL_88:
          memcpy(v78, __str, v76);
          double v87 = (void *)(*(void *)(a1 + 8) + v76);
          *(void *)(a1 + 8) = v87;
          if (v26 <= v76) {
            break;
          }
LABEL_182:
          memset(v87, 32, v77);
          size_t v169 = *(void *)(a1 + 8) + v77;
          goto LABEL_196;
      }
    }
LABEL_197:
    __s = v12 + 2;
  }
  size_t v239 = strlen(__s);
  uint64_t v240 = *(char **)(a1 + 8);
  unint64_t v241 = *(void *)(a1 + 16);
  if ((unint64_t)&v240[v239] < v241) {
    goto LABEL_270;
  }
  uint64_t v242 = v241 - *(void *)a1;
  BOOL v16 = v242 == 0;
  uint64_t v243 = 2 * v242;
  uint64_t v244 = 1024;
  if (!v16) {
    uint64_t v244 = v243;
  }
  do
  {
    size_t v245 = v244;
    size_t v246 = *(void *)a1 - (void)v240 + v244;
    v244 *= 2;
  }
  while (v246 < v239);
  Class result = (char *)malloc_type_realloc(*(void **)a1, v245, 0xFFAC0152uLL);
  if (result)
  {
    uint64_t v248 = result;
    uint64_t v240 = &result[*(void *)(a1 + 8) - *(void *)a1];
    *(void *)a1 = v248;
    *(void *)(a1 + 8) = v240;
    *(void *)(a1 + 16) = &v248[v245];
LABEL_270:
    Class result = (char *)memcpy(v240, __s, v239);
    *(void *)(a1 + 8) += v239;
  }
  return result;
}

uint64_t addDependentStates(CAState *a1, __CFSet *a2, NSArray *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t result = CFSetContainsValue(a2, a1);
  if (!result)
  {
    CFSetAddValue(a2, a1);
    CGFloat v7 = [(CAState *)a1 name];
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    uint64_t result = [(NSArray *)a3 countByEnumeratingWithState:&v15 objects:v14 count:16];
    if (result)
    {
      uint64_t v8 = result;
      uint64_t v9 = *(void *)v16;
      do
      {
        uint64_t v10 = 0;
        do
        {
          if (*(void *)v16 != v9) {
            objc_enumerationMutation(a3);
          }
          uint32_t v11 = *(CAState **)(*((void *)&v15 + 1) + 8 * v10);
          uint64_t v12 = [(CAState *)v11 basedOn];
          if ([(NSString *)v12 length]) {
            size_t v13 = v12;
          }
          else {
            size_t v13 = 0;
          }
          if (v13 == v7 || [(NSString *)v13 isEqualToString:v7]) {
            addDependentStates(v11, a2, a3);
          }
          ++v10;
        }
        while (v8 != v10);
        uint64_t result = [(NSArray *)a3 countByEnumeratingWithState:&v15 objects:v14 count:16];
        uint64_t v8 = result;
      }
      while (result);
    }
  }
  return result;
}

void CA::CG::TransparencyLayer::unref(atomic_uint *this)
{
  unsigned int add = atomic_fetch_add(this, 0xFFFFFFFF);
  if (this && add == 1)
  {
    double v3 = (void (***)(char *))*((void *)this + 23);
    if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1) {
      CA::CG::ClipStack::destroy_clip_stack(v3);
    }
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(malloc_zone, this);
  }
}

uint64_t indicator_id_from_name(NSString *a1)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (MEMORY[0x1E4F97AF0])
  {
    [(NSString *)a1 UTF8String];
    return SILManagerIndicatorTypeIDFromName();
  }
  else if ([(NSString *)a1 isEqualToString:@"Camera"])
  {
    return 0;
  }
  else if ([(NSString *)a1 isEqualToString:@"Microphone"])
  {
    return 1;
  }
  else if ([(NSString *)a1 isEqualToString:@"MicrophoneAccessibility"])
  {
    return 2;
  }
  else if ([(NSString *)a1 isEqualToString:@"FaceID"])
  {
    return 3;
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

void *CASecureIndicatorLayerValidPositionsForIndicator(NSString *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    [MEMORY[0x1E4F1CA00] raise:@"CASecureIndicatorLayer" format:@"CASecureIndicatorLayerValidPositionsForIndicator: name can't be nil"];
  }
  if (MEMORY[0x1E4F97AF8]) {
    BOOL v2 = MEMORY[0x1E4F97AF0] == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2)
  {
    if (CASecureIndicatorLayerValidPositionsForIndicator(NSString *)::once_token != -1) {
      dispatch_once(&CASecureIndicatorLayerValidPositionsForIndicator(NSString *)::once_token, &__block_literal_global_3906);
    }
    os_unfair_lock_lock((os_unfair_lock_t)&CASecureIndicatorLayerValidPositionsForIndicator(NSString *)::bb_lock);
    double v3 = (void *)[(id)CASecureIndicatorLayerValidPositionsForIndicator(NSString *)::indicators_bounding_boxes objectForKeyedSubscript:a1];
    if (v3) {
      goto LABEL_27;
    }
    [(NSString *)a1 UTF8String];
    if (SILManagerIndicatorTypeIDFromName() != -1)
    {
      valid = (void *)SILManagerIndicatorValidPositions();
      if (valid)
      {
        double v3 = objc_opt_new();
        *(_OWORD *)buf = 0u;
        float64x2_t v17 = 0u;
        long long v12 = 0u;
        long long v13 = 0u;
        long long v14 = 0u;
        long long v15 = 0u;
        uint64_t v5 = [valid countByEnumeratingWithState:&v12 objects:v11 count:16];
        if (v5)
        {
          uint64_t v6 = *(void *)v13;
          do
          {
            for (uint64_t i = 0; i != v5; ++i)
            {
              if (*(void *)v13 != v6) {
                objc_enumerationMutation(valid);
              }
              [*(id *)(*((void *)&v12 + 1) + 8 * i) getValue:buf];
              *(float64x2_t *)buf = vmulq_f64(*(float64x2_t *)buf, (float64x2_t)__PAIR128__(CASecureIndicatorLayerValidPositionsForIndicator(NSString *)::main_display_native_size, CASecureIndicatorLayerValidPositionsForIndicator(NSString *)::main_display_native_size));
              float64x2_t v17 = vmulq_f64(v17, (float64x2_t)__PAIR128__(CASecureIndicatorLayerValidPositionsForIndicator(NSString *)::main_display_native_size, CASecureIndicatorLayerValidPositionsForIndicator(NSString *)::main_display_native_size));
              v10[0] = *(_OWORD *)buf;
              v10[1] = v17;
              objc_msgSend(v3, "addObject:", objc_msgSend(MEMORY[0x1E4F29238], "valueWithBytes:objCType:", v10, "{CGRect={CGPoint=dd}{CGSize=dd}}"));
            }
            uint64_t v5 = [valid countByEnumeratingWithState:&v12 objects:v11 count:16];
          }
          while (v5);
        }
        [(id)CASecureIndicatorLayerValidPositionsForIndicator(NSString *)::indicators_bounding_boxes setObject:v3 forKeyedSubscript:a1];

        goto LABEL_27;
      }
      if (x_log_hook_p())
      {
        [(NSString *)a1 UTF8String];
        x_log_();
      }
      else
      {
        uint64_t v8 = x_log_category_api;
        if (os_log_type_enabled((os_log_t)x_log_category_api, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315138;
          *(void *)&uint8_t buf[4] = [(NSString *)a1 UTF8String];
          _os_log_impl(&dword_184668000, v8, OS_LOG_TYPE_ERROR, "SIL failed to query bounding boxes for valid indicator '%s'", buf, 0xCu);
        }
      }
    }
    double v3 = 0;
LABEL_27:
    os_unfair_lock_unlock((os_unfair_lock_t)&CASecureIndicatorLayerValidPositionsForIndicator(NSString *)::bb_lock);
    return v3;
  }
  return 0;
}

void sub_18484B804(_Unwind_Exception *a1)
{
}

uint64_t ___ZL48CASecureIndicatorLayerValidPositionsForIndicatorP8NSString_block_invoke()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  objc_msgSend(+[CADisplay mainDisplay](CADisplay, "mainDisplay"), "nativeSize");
  CASecureIndicatorLayerValidPositionsForIndicator(NSString *)::main_display_native_size_t size = *(void *)&v1;
  CASecureIndicatorLayerValidPositionsForIndicator(NSString *)::main_display_native_size_t size = *(void *)&v0;
  if (v1 == 0.0 || v0 == 0.0)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      BOOL v2 = x_log_category_api;
      if (os_log_type_enabled((os_log_t)x_log_category_api, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t v4 = 0;
        _os_log_impl(&dword_184668000, v2, OS_LOG_TYPE_ERROR, "SIL failed to query display size from client", v4, 2u);
      }
    }
  }
  uint64_t result = objc_opt_new();
  CASecureIndicatorLayerValidPositionsForIndicator(NSString *)::indicators_bounding_boxes = result;
  return result;
}

void sub_18484BF38(_Unwind_Exception *exception_object)
{
}

CA::Render::Context *CARenderContextNew(const __CFDictionary *a1)
{
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  uint64_t result = (CA::Render::Context *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x2E8uLL, 0x743898A5uLL);
  if (result) {
    return CA::Render::Context::Context(result, a1, 0, 0, 0);
  }
  return result;
}

uint64_t CARenderContextDestroy(uint64_t a1)
{
  if (!atomic_fetch_add((atomic_uint *volatile)(a1 + 8), 1u)) {
    atomic_fetch_add((atomic_uint *volatile)(a1 + 8), 0xFFFFFFFF);
  }
  return CA::Render::Server::add_callback(0, (uint64_t)CA::Render::Context::schedule_destroy(void)::$_0::__invoke, a1, 0.0);
}

uint64_t CARenderContextGetOptions(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t CARenderContextGetId(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t CARenderContextGetProcessId(uint64_t a1)
{
  uint64_t result = atomic_load((unsigned int *)(a1 + 228));
  if (!result)
  {
    if (*(_DWORD *)(a1 + 252)) {
      LODWORD(result) = 0;
    }
    else {
      LODWORD(result) = getpid();
    }
    unsigned int v3 = 0;
    atomic_compare_exchange_strong((atomic_uint *volatile)(a1 + 228), &v3, result);
    if (v3) {
      return v3;
    }
    else {
      return result;
    }
  }
  return result;
}

__n128 CARenderContextGetAuditToken@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result = *(__n128 *)(a1 + 196);
  long long v3 = *(_OWORD *)(a1 + 212);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t CARenderContextGetCommitSeed(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t CARenderContextGetChangedSeed(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t CARenderContextGetColorspace(uint64_t a1)
{
  return *(void *)(a1 + 448);
}

uint64_t CARenderContextLock(uint64_t a1)
{
  return pthread_mutex_lock((pthread_mutex_t *)(a1 + 72));
}

uint64_t CARenderContextUnlock(uint64_t a1)
{
  return pthread_mutex_unlock((pthread_mutex_t *)(a1 + 72));
}

void CARenderContextInvalidateRect(CA::Render::Context *a1, uint64_t a2, const CA::Bounds *a3, double a4, float64x2_t a5)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  int8x16_t v5 = *(int8x16_t *)(a2 + 16);
  a5.f64[0] = 0.0;
  int8x16_t v6 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(a5, (float64x2_t)v5).i64[0], 0);
  v7.i64[1] = *(void *)(a2 + 24);
  *(double *)v7.i64 = -*(double *)v5.i64;
  int8x16_t v8 = vbslq_s8(v6, v7, v5);
  int8x16_t v9 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(a5, (float64x2_t)vdupq_laneq_s64((int64x2_t)v5, 1)).i64[0], 0);
  v10.i64[0] = v8.i64[0];
  v10.i64[1] = *(void *)&vnegq_f64(*(float64x2_t *)&v5).f64[1];
  float64x2_t v11 = (float64x2_t)vbslq_s8(v9, v10, v8);
  int8x16_t v12 = (int8x16_t)vceqzq_f64(v11);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v12, 1), v12).u64[0] & 0x8000000000000000) != 0
    || (int8x16_t v13 = vorrq_s8((int8x16_t)vcltzq_f64(v11), (int8x16_t)vcgezq_f64(v11)),
        int8x16_t v14 = (int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v13), 1),
        (vornq_s8(v14, v13).u64[0] & 0x8000000000000000) != 0))
  {
    int32x4_t v19 = 0uLL;
  }
  else
  {
    v14.i64[0] = 0x8000000000000000;
    v15.i64[0] = *(_OWORD *)&vaddq_f64(*(float64x2_t *)a2, (float64x2_t)vbslq_s8(v6, v5, v14));
    v16.i64[0] = v15.i64[0];
    v16.i64[1] = *(void *)(a2 + 8);
    v15.i64[1] = *(void *)&vaddq_f64(*(float64x2_t *)&v5, *(float64x2_t *)a2).f64[1];
    float64x2_t v17 = (float64x2_t)vbslq_s8(v9, v15, v16);
    int32x4_t v18 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v17, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
    int32x4_t v19 = vuzp1q_s32(v18, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v17, v11), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v18));
  }
  CA::Render::Context::invalidate(a1, (int32x2_t *)&v19, a3);
}

uint64_t CARenderContextHitTest(uint64_t a1)
{
  return CA::Render::Context::hit_test(a1);
}

uint64_t CARenderLayerGetContextId(uint64_t a1)
{
  double v1 = *(CA::Render::Handle **)(a1 + 144);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = CA::Render::Handle::retain_context(v1);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(unsigned int *)(v2 + 16);
  if (atomic_fetch_add((atomic_uint *volatile)(v2 + 8), 0xFFFFFFFF) == 1) {
    (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  }
  return v3;
}

CA::Render::Context *CARenderContextGetRootLayer(CA::Render::Context *result)
{
  if (result)
  {
    __n128 result = (CA::Render::Context *)CA::Render::Context::root_layer_handle(result);
    if (result) {
      return (CA::Render::Context *)*((void *)result + 2);
    }
  }
  return result;
}

uint64_t CARenderContextGetInputTime(uint64_t a1)
{
  uint64_t v2 = (pthread_mutex_t *)(a1 + 72);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 72));
  *(void *)(a1 + 456) = 0x7FF0000000000000;
  return pthread_mutex_unlock(v2);
}

uint64_t CARenderContextGetBeginTime(uint64_t a1, double a2)
{
  uint64_t v4 = (pthread_mutex_t *)(a1 + 72);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 72));
  CA::Render::Context::get_begin_time((os_unfair_lock_s *)a1, a2);
  return pthread_mutex_unlock(v4);
}

void CARenderContextSetBeginTimeThreshold(double a1)
{
}

uint64_t CARenderContextGetRequestsFrameStallSkip(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int16 *)(a1 + 552);
  *(_WORD *)(a1 + 552) = v1 & 0xFF7F;
  return (v1 >> 7) & 1;
}

CFStringRef CARenderContextCopyProcessPath(CA::Render::Context *a1)
{
  unsigned int v1 = (const char *)(CA::Render::Context::process_path(a1) + 7);

  return CFStringCreateWithCString(0, v1, 0x8000100u);
}

CFTypeRef CARenderContextCopyClientAnnotation(uint64_t a1)
{
  CFTypeRef result = *(CFTypeRef *)(a1 + 520);
  if (result) {
    return CFRetain(result);
  }
  return result;
}

uint64_t CARenderContextNeedsDeferUpdate(os_unfair_lock_s *a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::LayerHost::_lock);
  os_unfair_lock_lock(&CA::Render::Context::_context_lock);
  uint64_t updated = CA::Render::Context::needs_defer_update_locked(a1);
  os_unfair_lock_unlock(&CA::Render::Context::_context_lock);
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::LayerHost::_lock);
  return updated;
}

uint64_t CARenderContextGetPayloadSeed(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

CFTypeRef CARenderContextCopyPayload(uint64_t a1)
{
  CFTypeRef result = *(CFTypeRef *)(a1 + 528);
  if (result) {
    return CFRetain(result);
  }
  return result;
}

uint64_t CARenderImageBitsPerPixel(unsigned int a1)
{
  if (a1 > 0x23) {
    return 0;
  }
  else {
    return dword_1849993D8[a1];
  }
}

uint64_t CARenderImageBitsPerComponent(unsigned int a1)
{
  if (a1 > 0x23) {
    return 0;
  }
  else {
    return dword_184999500[a1];
  }
}

uint64_t CARenderImageHasAlpha(unsigned int a1)
{
  return (a1 < 0x24) & (0xC99B4EB03uLL >> a1);
}

uint64_t CARenderImageCGBitmapInfo(unsigned int a1)
{
  if (a1 > 0x23) {
    return 0;
  }
  else {
    return dword_184999348[a1];
  }
}

unint64_t CARenderImageIsNative(unsigned int a1)
{
  return (a1 > 0x23) | (0x1FFFFFF2FuLL >> a1) & 1;
}

const char *CARenderImageFormatName(unsigned int a1)
{
  if (a1 > 0x23) {
    return "UNKNOWN";
  }
  else {
    return off_1E5272E18[a1];
  }
}

CA::Render::Texture *CARenderImageNew(CA::Render::Image *a1, unsigned int a2, unsigned int a3, CGColorSpace *a4, unint64_t a5, unint64_t *a6, void (*a7)(const void *, void *))
{
  v9[1] = *MEMORY[0x1E4F143B8];
  v9[0] = a5;
  return CA::Render::Image::new_image(a1, a2, a3, 1u, 0, a4, v9, a6, a7, v8);
}

CA::Render::Texture *CARenderImageNewMipmapped(CA::Render::Image *this, unsigned int a2, unsigned int a3, unsigned int a4, CGColorSpace *a5, CGColorSpace *a6, unint64_t *a7, const unint64_t *a8, void (*a9)(const void *, void *), void *a10)
{
  return CA::Render::Image::new_image(this, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

atomic_uint *CARenderImageNewWithCGImage(CA::Render *a1, CGImage *a2, CGColorSpace *a3)
{
  CFTypeRef result = (atomic_uint *)CA::Render::copy_image(a1, a2, a3, 0.0, 1.0);
  if (result && *((unsigned char *)result + 12) != 23)
  {
    if (atomic_fetch_add(result + 2, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)result + 16))(result);
    }
    return 0;
  }
  return result;
}

uint64_t CARenderImageGetWidth(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t CARenderImageGetHeight(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void CARenderNotificationAddObserver(unsigned int a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
}

void CARenderShowImages()
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  x_log_begin();
  if (CA::Render::image_cache)
  {
    if (x_log_hook_p())
    {
      uint64_t v0 = mach_absolute_time();
      CATimeWithHostTime(v0);
      x_log_();
    }
    else
    {
      unsigned int v1 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v2 = mach_absolute_time();
        *(_DWORD *)buf = 134217984;
        double v19 = CATimeWithHostTime(v2);
        _os_log_impl(&dword_184668000, v1, OS_LOG_TYPE_DEFAULT, "CG image cache at time %f:\n", buf, 0xCu);
      }
    }
    uint64_t v3 = 0;
    uint64_t v4 = CA::Render::image_cache;
    uint64_t v5 = 1 << *(_DWORD *)CA::Render::image_cache;
    do
    {
      for (uint64_t i = *(void **)(*(void *)(v4 + 16) + 8 * v3); i; uint64_t i = (void *)*i)
      ++v3;
    }
    while (v3 != v5);
  }
  float64x2_t v17 = (void **)x_stream_pop_(0);
  int8x16_t v7 = x_stream_get(v17);
  int v8 = 0;
  while (2)
  {
    uint64_t v9 = 0;
    int8x16_t v10 = &v7[v8];
    int v11 = -1;
    while (1)
    {
      if (v10[v9] == 10)
      {
        int v11 = v9;
        goto LABEL_16;
      }
      if (!v10[v9]) {
        break;
      }
LABEL_16:
      ++v9;
      unsigned int v12 = 32512;
      if (v9 == 32512) {
        goto LABEL_17;
      }
    }
    unsigned int v12 = v9;
LABEL_17:
    if (v11 <= -1 || v10[v12] == 0) {
      int v14 = v12;
    }
    else {
      int v14 = v11 + 1;
    }
    if (v14 >= 1)
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        int8x16_t v15 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          if (v8) {
            int8x16_t v16 = "continued...\n";
          }
          else {
            int8x16_t v16 = "";
          }
          double v19 = *(double *)&v16;
          __int16 v20 = 1040;
          int v21 = v14;
          __int16 v22 = 2080;
          double v23 = &v7[v8];
          _os_log_impl(&dword_184668000, v15, OS_LOG_TYPE_DEFAULT, "%s%.*s", buf, 0x1Cu);
        }
      }
      v8 += v14;
      continue;
    }
    break;
  }
  x_log_end_free_(v17);
}

void CAFenceBatchWaitLockAcquire()
{
  os_unfair_lock_lock((os_unfair_lock_t)&_batching_lock);
  if (_batching) {
    __assert_rtn("CAFenceBatchWaitLockAcquire", "CARender.cpp", 801, "!_batching");
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  unsigned int v1 = (CA::Render::Fence::BatchWaitLock *)malloc_type_zone_malloc(malloc_zone, 0x10uLL, 0x8BB15036uLL);
  if (v1) {
    unsigned int v1 = CA::Render::Fence::BatchWaitLock::BatchWaitLock(v1);
  }
  _batching = (uint64_t)v1;

  os_unfair_lock_unlock((os_unfair_lock_t)&_batching_lock);
}

void CAFenceBatchWaitLockRelease()
{
  os_unfair_lock_lock((os_unfair_lock_t)&_batching_lock);
  uint64_t v0 = (void *)_batching;
  if (!_batching) {
    __assert_rtn("CAFenceBatchWaitLockRelease", "CARender.cpp", 809, "_batching");
  }
  CA::Render::Fence::BatchWaitLock::invalidate(_batching);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, v0);
  _batching = 0;

  os_unfair_lock_unlock((os_unfair_lock_t)&_batching_lock);
}

float64x2_t CA::Mat4Impl::mat4_concat(float64x2_t *this, double *a2, const CGAffineTransform *a3, const double *a4)
{
  long long v4 = *((_OWORD *)a2 + 1);
  long long v5 = *(_OWORD *)(a2 + 1);
  long long v6 = *((_OWORD *)a2 + 2);
  long long v7 = *(_OWORD *)(a2 + 3);
  double v8 = a2[5];
  float64x2_t v9 = *(float64x2_t *)&a3->c;
  float64x2_t v10 = *(float64x2_t *)&a3->tx;
  float64x2_t v11 = *(float64x2_t *)&a3[1].a;
  float64x2_t v12 = vmlaq_n_f64(vmlaq_n_f64(*(float64x2_t *)&a3[2].a, *(float64x2_t *)&a3->a, *(double *)&v6), v10, v8);
  float64x2_t v13 = vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&a3->a, *a2), v10, *(double *)&v5);
  float64x2_t v14 = vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&a3->a, *(double *)&v4), v10, *(double *)&v7);
  float64x2_t v15 = *(float64x2_t *)&a3[1].c;
  float64x2_t v16 = *(float64x2_t *)&a3[1].tx;
  float64x2_t v17 = vmlaq_n_f64(vmlaq_n_f64(*(float64x2_t *)&a3[2].c, v9, *(double *)&v6), v11, v8);
  float64x2_t result = vmlaq_n_f64(vmulq_n_f64(v9, *a2), v11, *(double *)&v5);
  *this = v13;
  this[1] = result;
  this[2] = v14;
  this[3] = vmlaq_n_f64(vmulq_n_f64(v9, *(double *)&v4), v11, *(double *)&v7);
  this[4] = v15;
  this[5] = v16;
  this[6] = v12;
  this[7] = v17;
  return result;
}

float64x2_t CA::Mat4Impl::mat4_translate(float64x2_t *this, double *a2, double a3, double a4, double a5)
{
  float64x2_t v5 = vmlaq_n_f64(vmlaq_n_f64(this[6], *this, a3), this[2], a4);
  float64x2_t v6 = vmlaq_n_f64(vmlaq_n_f64(this[7], this[1], a3), this[3], a4);
  float64x2_t result = this[4];
  float64x2_t v8 = vmlaq_n_f64(v6, this[5], a5);
  this[6] = vmlaq_n_f64(v5, result, a5);
  this[7] = v8;
  return result;
}

float64x2_t CA::Mat4Impl::mat4_translate_right(float64x2_t *this, double *a2, float64x2_t result, float64_t a4, double a5)
{
  result.f64[1] = a4;
  float64x2_t v6 = this[1];
  float64x2_t v7 = this[3];
  float64x2_t v8 = this[5];
  float64x2_t v9 = this[7];
  float64x2_t v10 = vmlaq_laneq_f64(this[2], result, v7, 1);
  float64x2_t v11 = vmlaq_laneq_f64(this[4], result, v8, 1);
  float64x2_t v12 = vmlaq_laneq_f64(this[6], result, v9, 1);
  *this = vmlaq_laneq_f64(*this, result, v6, 1);
  this[1] = vmlaq_laneq_f64(v6, (float64x2_t)*(unint64_t *)&a5, v6, 1);
  this[2] = v10;
  this[3] = vmlaq_laneq_f64(v7, (float64x2_t)*(unint64_t *)&a5, v7, 1);
  this[4] = v11;
  this[5] = vmlaq_laneq_f64(v8, (float64x2_t)*(unint64_t *)&a5, v8, 1);
  this[6] = v12;
  this[7] = vmlaq_laneq_f64(v9, (float64x2_t)*(unint64_t *)&a5, v9, 1);
  return result;
}

float32x4_t CA::Mat4Impl::mat4_scale(CA::Mat4Impl *this, float *a2, float a3, float a4, float a5)
{
  float32x4_t v5 = *((float32x4_t *)this + 2);
  float32x4_t v6 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)this), a3)), vmulq_n_f64(vcvt_hight_f64_f32(*(float32x4_t *)this), a3));
  float32x4_t v7 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)((char *)this + 16)), a4)), vmulq_n_f64(vcvt_hight_f64_f32(*((float32x4_t *)this + 1)), a4));
  *(float32x4_t *)this = v6;
  *((float32x4_t *)this + 1) = v7;
  float32x4_t result = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)v5.f32), a5)), vmulq_n_f64(vcvt_hight_f64_f32(v5), a5));
  *((float32x4_t *)this + 2) = result;
  return result;
}

BOOL CA::Mat4Impl::mat4_is_translation(CA::Mat4Impl *this, const double *a2)
{
  return *(double *)this == 1.0
      && *((double *)this + 1) == 0.0
      && *((double *)this + 2) == 0.0
      && *((double *)this + 3) == 0.0
      && *((double *)this + 4) == 0.0
      && *((double *)this + 5) == 1.0
      && *((double *)this + 6) == 0.0
      && *((double *)this + 7) == 0.0
      && *((double *)this + 8) == 0.0
      && *((double *)this + 9) == 0.0
      && *((double *)this + 10) == 1.0
      && *((double *)this + 11) == 0.0
      && *((double *)this + 15) == 1.0;
}

BOOL CA::Mat4Impl::mat4_is_velocity_affine_with_z_transform(CA::Mat4Impl *this, const double *a2)
{
  return *((double *)this + 2) == 0.0
      && *((double *)this + 3) == 0.0
      && *((double *)this + 6) == 0.0
      && *((double *)this + 7) == 0.0
      && *((double *)this + 8) == 0.0
      && *((double *)this + 9) == 0.0
      && *((double *)this + 11) == 0.0
      && *((double *)this + 15) == 0.0;
}

BOOL CA::Mat4Impl::mat4_is_fixed_z_with_z_translate(CA::Mat4Impl *this, const double *a2)
{
  return *((double *)this + 2) == 0.0
      && *((double *)this + 3) == 0.0
      && *((double *)this + 6) == 0.0
      && *((double *)this + 7) == 0.0
      && *((double *)this + 10) == 1.0
      && *((double *)this + 15) == 1.0;
}

BOOL CA::Mat4Impl::mat4_is_front_facing(CA::Mat4Impl *this, const double *a2)
{
  double v2 = *((double *)this + 1);
  double v3 = *((double *)this + 3);
  double v4 = *((double *)this + 4);
  double v5 = *((double *)this + 5);
  double v6 = *((double *)this + 6);
  double v7 = *((double *)this + 7);
  double v8 = *((double *)this + 8);
  double v9 = *((double *)this + 9);
  double v10 = *((double *)this + 10);
  double v11 = *((double *)this + 11);
  double v12 = *((double *)this + 12);
  double v13 = *((double *)this + 13);
  double v14 = *((double *)this + 14);
  double v15 = *((double *)this + 15);
  double v16 = -(v14 * v11 - v15 * v10);
  double v17 = -(v14 * v7 - v15 * v6);
  double v18 = -(v10 * v7 - v11 * v6);
  return ((v13 * v18 + v16 * v5 - v17 * v9) * *(double *)this
        - (-(v11 * v5 - v9 * v7) * v12 + -(v15 * v9 - v13 * v11) * v4 + -(v13 * v7 - v15 * v5) * v8)
        * *((double *)this + 2)
        + (v12 * -(v10 * v5 - v9 * v6) + -(v14 * v9 - v13 * v10) * v4 + -(v13 * v6 - v14 * v5) * v8) * v3
        + -(v18 * v12 + v16 * v4 - v17 * v8) * v2)
       * (v12 * -(v5 * v3 - v7 * v2) + -(v13 * v7 - v15 * v5) * *(double *)this + -(v15 * v2 - v13 * v3) * v4) >= 0.0;
}

BOOL CA::Mat4Impl::mat4_is_projective(CA::Mat4Impl *this, const double *a2)
{
  return fabs(*((double *)this + 3)) >= 0.000001
      || fabs(*((double *)this + 7)) >= 0.000001
      || fabs(*((double *)this + 11)) >= 0.000001
      || fabs(*((double *)this + 15) + -1.0) >= 0.000001;
}

double CA::Mat4Impl::mat4_set_transform(CA::Mat4Impl *this, double *a2, const CGAffineTransform *a3)
{
  *(_OWORD *)this = xmmword_184997D50;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = xmmword_184997D60;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = xmmword_184997D50;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = xmmword_184997D60;
  *(double *)this = *a2;
  *((double *)this + 1) = a2[1];
  *((double *)this + 4) = a2[2];
  *((double *)this + 5) = a2[3];
  *((double *)this + 12) = a2[4];
  double result = a2[5];
  *((double *)this + 13) = result;
  return result;
}

void CA::mix(uint64_t a1, float64x2_t *a2, float64x2_t *a3, double a4)
{
  float64x2_t v6 = vmlaq_n_f64(a2[1], vsubq_f64(a3[1], a2[1]), a4);
  *(float64x2_t *)a1 = vmlaq_n_f64(*a2, vsubq_f64(*a3, *a2), a4);
  *(float64x2_t *)(a1 + 16) = v6;
  float64x2_t v7 = vmlaq_n_f64(a2[3], vsubq_f64(a3[3], a2[3]), a4);
  *(float64x2_t *)(a1 + 32) = vmlaq_n_f64(a2[2], vsubq_f64(a3[2], a2[2]), a4);
  *(float64x2_t *)(a1 + 48) = v7;
  double v8 = a2[6].f64[1];
  double v9 = a3[6].f64[1];
  float64_t v10 = a2[6].f64[0] + (a3[6].f64[0] - a2[6].f64[0]) * a4;
  float64x2_t v11 = vmlaq_n_f64(a2[5], vsubq_f64(a3[5], a2[5]), a4);
  *(float64x2_t *)(a1 + 64) = vmlaq_n_f64(a2[4], vsubq_f64(a3[4], a2[4]), a4);
  *(float64x2_t *)(a1 + 80) = v11;
  *(float64_t *)(a1 + 96) = v10;
  double v13 = a2[7].f64[0];
  double v12 = a2[7].f64[1];
  double v14 = a2[8].f64[0];
  double v16 = a3[7].f64[0];
  double v15 = a3[7].f64[1];
  double v17 = a3[8].f64[0];
  double v18 = v9 * v8 + v16 * v13 + v15 * v12 + v17 * v14;
  if (v18 < 0.0)
  {
    double v8 = -v8;
    double v13 = -v13;
    double v12 = -v12;
    double v14 = -v14;
    double v18 = -v18;
  }
  double v19 = fmin(v18, 1.0);
  if (v19 <= 0.9999)
  {
    double v29 = v9 - v19 * v8;
    double v30 = v16 - v19 * v13;
    double v31 = v15 - v19 * v12;
    double v32 = v17 - v19 * v14;
    double v36 = a4;
    long double v33 = acos(v19);
    __double2 v34 = __sincos_stret(v33 * v36);
    double v35 = v34.__sinval / sqrt(v29 * v29 + v30 * v30 + v31 * v31 + v32 * v32);
    double v25 = v34.__cosval * v8 + v35 * v29;
    double v26 = v34.__cosval * v13 + v35 * v30;
    double v27 = v34.__cosval * v12 + v35 * v31;
    double v28 = v34.__cosval * v14 + v35 * v32;
  }
  else
  {
    double v20 = v8 + (v9 - v8) * a4;
    double v21 = v13 + (v16 - v13) * a4;
    double v22 = v12 + (v15 - v12) * a4;
    double v23 = v14 + (v17 - v14) * a4;
    double v24 = 1.0 / sqrt(v20 * v20 + v21 * v21 + v22 * v22 + v23 * v23);
    double v25 = v24 * v20;
    double v26 = v24 * v21;
    double v27 = v24 * v22;
    double v28 = v24 * v23;
  }
  *(double *)(a1 + 104) = v25;
  *(double *)(a1 + 112) = v26;
  *(double *)(a1 + 120) = v27;
  *(double *)(a1 + 128) = v28;
  *(unsigned char *)(a1 + 136) = 1;
}

float64x2_t CA::Mat2Impl::mat2_concat(float64x2_t *this, double *a2, const double *a3, const double *a4)
{
  double v4 = a2[4];
  double v5 = a2[5];
  float64x2_t v6 = *(float64x2_t *)a3;
  float64x2_t v7 = *(float64x2_t *)(a3 + 2);
  float64x2_t v8 = *(float64x2_t *)(a3 + 4);
  float64x2_t result = vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)a3, *a2), v7, a2[1]);
  float64x2_t v10 = vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)a3, a2[2]), v7, a2[3]);
  *this = result;
  this[1] = v10;
  this[2] = vmlaq_n_f64(vmlaq_n_f64(v8, v6, v4), v7, v5);
  return result;
}

float64_t CA::Mat2Impl::mat2_pow(CA::Mat2Impl *this, double *a2, const double *a3, const double *a4)
{
  if (a2)
  {
    unsigned int v5 = a2;
    if ((a2 & 0x80000000) != 0)
    {
      CA::Mat2Impl::mat2_invert(this, (double *)this, a3);
      unsigned int v5 = -v5;
    }
    float64x2_t v10 = (float64x2_t)xmmword_184997D50;
    float64x2_t v11 = (float64x2_t)xmmword_184997D60;
    float64x2_t v12 = 0u;
    do
    {
      if (v5)
      {
        float64x2_t v6 = vmlaq_n_f64(vmulq_n_f64(v10, *(double *)this), v11, *((double *)this + 1));
        float64x2_t v7 = vmlaq_n_f64(vmlaq_n_f64(v12, v10, *((double *)this + 4)), v11, *((double *)this + 5));
        float64x2_t v11 = vmlaq_n_f64(vmulq_n_f64(v10, *((double *)this + 2)), v11, *((double *)this + 3));
        float64x2_t v12 = v7;
        float64x2_t v10 = v6;
      }
      CA::Mat2Impl::mat2_concat((float64x2_t *)this, (double *)this, (const double *)this, a4);
      BOOL v8 = v5 >= 2;
      v5 >>= 1;
    }
    while (v8);
    *(float64x2_t *)this = v10;
    *((float64x2_t *)this + 1) = v11;
    float64_t result = v12.f64[0];
    *((float64x2_t *)this + 2) = v12;
  }
  else if (this != (CA::Mat2Impl *)&CA::Mat2Impl::mat2_identity_double)
  {
    float64_t result = 1.0;
    *(_OWORD *)this = xmmword_184997D50;
    *((_OWORD *)this + 1) = xmmword_184997D60;
    *((void *)this + 4) = 0;
    *((void *)this + 5) = 0;
  }
  return result;
}

double CA::Mat2Impl::mat2_invert(CA::Mat2Impl *this, double *a2, const double *a3)
{
  double v3 = a2[1];
  double result = a2[2];
  double v5 = a2[3];
  double v6 = -(result * v3 - v5 * *a2);
  if (v6 != 0.0)
  {
    double v7 = 1.0 / v6;
    double v9 = a2[4];
    double v8 = a2[5];
    double v10 = v7 * *a2;
    double v11 = v7 * v5;
    *(double *)this = v11;
    *((double *)this + 1) = -(v7 * v3);
    *((double *)this + 2) = -(v7 * result);
    *((double *)this + 3) = v10;
    double result = -(v9 * v11 - v8 * (v7 * result));
    *((double *)this + 4) = result;
    *((double *)this + 5) = -(v8 * v10 - v9 * (v7 * v3));
  }
  return result;
}

double CA::Mat2Impl::mat2_get_scale(CA::Mat2Impl *this, double *a2, double *a3, double *a4)
{
  double v4 = *(double *)this * *(double *)this + *((double *)this + 1) * *((double *)this + 1);
  double v5 = *((double *)this + 2) * *((double *)this + 2) + *((double *)this + 3) * *((double *)this + 3);
  BOOL v6 = v4 != 1.0;
  if (v5 != 1.0) {
    BOOL v6 = 1;
  }
  double v7 = sqrt(v4);
  double v8 = sqrt(v5);
  if (v6) {
    double v5 = v8;
  }
  if (a2)
  {
    if (v6) {
      double v4 = v7;
    }
    *a2 = v4;
  }
  if (a3) {
    *a3 = v5;
  }
  double result = (v8 + v7) * 0.5;
  if (!v6) {
    return 1.0;
  }
  return result;
}

double CA::Mat2Impl::mat2_get_scale_2d(CA::Mat2Impl *this, const double *a2)
{
  double v3 = *((double *)this + 2);
  double v2 = *((double *)this + 3);
  double result = *(double *)this;
  double v5 = *((double *)this + 1);
  if (vabdd_f64(*(double *)this, trunc(v2)) >= 0.000001 || fabs(v5) >= 0.000001 || fabs(v3) >= 0.000001)
  {
    double v6 = result * result + v5 * v5;
    double v7 = v2 * v2 + v3 * v3;
    double v8 = -(v6 - v7);
    if (v6 - v7 >= 0.0) {
      double v8 = v6 - v7;
    }
    double result = 0.0;
    if (v8 < 1.0e-10) {
      return (sqrt(v7) + sqrt(v6)) * 0.5;
    }
  }
  return result;
}

uint64_t CA::Render::DeferredImageSlot::texture_cast(CA::Render::DeferredImageSlot *this)
{
  return *((void *)this + 2);
}

void CA::Render::DeferredImageSlot::show(CA::Render::DeferredImageSlot *this, int a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if ((a3 & 1) == 0)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      double v6 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184668000, v6, OS_LOG_TYPE_DEFAULT, "(deferred-image-slot ", buf, 2u);
      }
    }
    if (*((void *)this + 2))
    {
      double v7 = (CA::Render *)(a2 + 1);
      CA::Render::show_newline(v7);
      (*(void (**)(void, CA::Render *, uint64_t))(**((void **)this + 2) + 40))(*((void *)this + 2), v7, a3);
    }
    else if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      double v8 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)double v11 = 0;
        _os_log_impl(&dword_184668000, v8, OS_LOG_TYPE_DEFAULT, "(no texture)", v11, 2u);
      }
    }
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      double v9 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)double v10 = 0;
        _os_log_impl(&dword_184668000, v9, OS_LOG_TYPE_DEFAULT, ")", v10, 2u);
      }
    }
  }
}

void CA::Render::DeferredImageSlot::~DeferredImageSlot(CA::Render::DeferredImageSlot *this, const CA::Render::Object *a2)
{
  *(void *)this = &unk_1ED02E6E0;
  double v3 = (atomic_uint *)*((void *)this + 2);
  if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
  }
  --dword_1EB2ADDF4;
  *(void *)this = &unk_1ED02F670;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0) {
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  atomic_uint *v3;

  *(void *)this = &unk_1ED02E6E0;
  double v3 = (atomic_uint *)*((void *)this + 2);
  if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
  }
  --dword_1EB2ADDF4;
  *(void *)this = &unk_1ED02F670;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0) {
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
  }
}

uint64_t CA::Render::Context::new_image_slot(CA::Render::Context *this, CA::Render *a2, unsigned int a3, char a4, char a5)
{
  uint64_t v5 = 0;
  if (a2)
  {
    if (a3)
    {
      int v7 = (int)a2;
      if (!((a3 | a2) >> 13))
      {
        if (CA::Render::iosurface_size_supported(a2, a3))
        {
          uint64_t v5 = CA::Render::Context::new_slot(this);
          malloc_zone = (malloc_zone_t *)get_malloc_zone();
          float64x2_t v12 = malloc_type_zone_malloc(malloc_zone, 0x28uLL, 0x8BB15036uLL);
          if (v12)
          {
            uint64_t v13 = v12;
            uint64_t v12[2] = 1;
            double v14 = v12 + 2;
            v12[3] = 11;
            ++dword_1EB2ADDF4;
            *(void *)float64x2_t v12 = &unk_1ED02E6E0;
            *((void *)v12 + 2) = 0;
            v12[6] = v7;
            v12[7] = a3;
            *((unsigned char *)v12 + 32) = a4;
            *((unsigned char *)v12 + 33) = a5;
            CA::Render::Context::set_slot(this, v5, v12);
            if (atomic_fetch_add(v14, 0xFFFFFFFF) == 1) {
              (*(void (**)(_DWORD *))(*(void *)v13 + 16))(v13);
            }
          }
          else
          {
            CA::Render::Context::set_slot(this, v5, 0);
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return v5;
}

void CA::Render::Context::transfer_slot(CA::Render::Context *this, int a2, CA::Render::Context *a3)
{
  if (a2 && CA::Render::Context::_slot_table)
  {
    uint64_t v5 = (uint64_t *)*((void *)this + 21);
    double v4 = (uint64_t *)*((void *)this + 22);
    if (v5 != v4)
    {
      while (*(_DWORD *)v5 != a2)
      {
        if (++v5 == v4) {
          return;
        }
      }
    }
    if (v5 != v4)
    {
      uint64_t v6 = CA::Render::Context::context_by_id(a3);
      if (v6)
      {
        uint64_t v7 = v6;
        os_unfair_lock_lock(&CA::Render::Context::_context_lock);
        uint64_t v8 = *v5;
        uint64_t v9 = *((void *)this + 22);
        int v10 = *(_DWORD *)(v9 - 8);
        *((unsigned char *)v5 + 4) = *(unsigned char *)(v9 - 4);
        *(_DWORD *)uint64_t v5 = v10;
        *((void *)this + 22) -= 8;
        float64x2_t v12 = *(unint64_t **)(v7 + 176);
        unint64_t v11 = *(void *)(v7 + 184);
        if ((unint64_t)v12 >= v11)
        {
          uint64_t v14 = *(void *)(v7 + 168);
          uint64_t v15 = ((uint64_t)v12 - v14) >> 3;
          if ((unint64_t)(v15 + 1) >> 61) {
            abort();
          }
          uint64_t v16 = v11 - v14;
          uint64_t v17 = v16 >> 2;
          if (v16 >> 2 <= (unint64_t)(v15 + 1)) {
            uint64_t v17 = v15 + 1;
          }
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v18 = v17;
          }
          if (v18) {
            unint64_t v18 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Display::DisplayLinkItem *>>(v18);
          }
          else {
            uint64_t v19 = 0;
          }
          unint64_t v20 = v18 + 8 * v15;
          unint64_t v21 = v18 + 8 * v19;
          *(void *)unint64_t v20 = v8 & 0xFFFFFF00FFFFFFFFLL | 0x100000000;
          uint64_t v13 = (void *)(v20 + 8);
          double v23 = *(unsigned char **)(v7 + 168);
          double v22 = *(unsigned char **)(v7 + 176);
          if (v22 != v23)
          {
            do
            {
              int v24 = *((_DWORD *)v22 - 2);
              v22 -= 8;
              char v25 = v22[4];
              *(_DWORD *)(v20 - 8) = v24;
              v20 -= 8;
              *(unsigned char *)(v20 + 4) = v25;
            }
            while (v22 != v23);
            double v22 = *(unsigned char **)(v7 + 168);
          }
          *(void *)(v7 + 168) = v20;
          *(void *)(v7 + 176) = v13;
          *(void *)(v7 + 184) = v21;
          if (v22) {
            operator delete(v22);
          }
        }
        else
        {
          *float64x2_t v12 = v8 & 0xFFFFFF00FFFFFFFFLL | 0x100000000;
          uint64_t v13 = v12 + 1;
        }
        *(void *)(v7 + 176) = v13;
        os_unfair_lock_unlock(&CA::Render::Context::_context_lock);
        if (atomic_fetch_add((atomic_uint *volatile)(v7 + 8), 0xFFFFFFFF) == 1)
        {
          double v26 = *(void (**)(uint64_t))(*(void *)v7 + 16);
          v26(v7);
        }
      }
    }
  }
}

void CA::Render::Context::delete_slot(CA::Render::Context *this, unsigned int a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  unsigned int v9 = a2;
  if (a2 && CA::Render::Context::_slot_table)
  {
    uint64_t v5 = *((void *)this + 21);
    uint64_t v4 = *((void *)this + 22);
    if (v5 != v4)
    {
      while (*(_DWORD *)v5 != a2)
      {
        v5 += 8;
        if (v5 == v4) {
          return;
        }
      }
    }
    if (v5 != v4)
    {
      os_unfair_lock_lock(&CA::Render::Context::_context_lock);
      uint64_t v6 = (atomic_uint *)x_hash_table_remove(CA::Render::Context::_slot_table, a2);
      uint64_t v7 = *((void *)this + 22);
      char v8 = *(unsigned char *)(v7 - 4);
      *(_DWORD *)uint64_t v5 = *(_DWORD *)(v7 - 8);
      *(unsigned char *)(v5 + 4) = v8;
      *((void *)this + 22) -= 8;
      os_unfair_lock_unlock(&CA::Render::Context::_context_lock);
      if (v6)
      {
        if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
        }
      }
      CA::Render::post_notification(0x3Au, 0, (uint64_t)&v9, 0);
    }
  }
}

void CA::Render::Context::get_debug_log(CA::Render::Context *this, CA::Render::Object *a2, void *a3, void *a4)
{
  uint64_t v4 = a3;
  uint64_t v284 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (void *)MEMORY[0x185324A30](this, a2, a3, a4);
  long long v282 = 0u;
  long long v283 = 0u;
  long long v280 = 0u;
  long long v281 = 0u;
  long long v278 = 0u;
  long long v279 = 0u;
  long long v276 = 0u;
  long long v277 = 0u;
  long long v274 = 0u;
  long long v275 = 0u;
  long long v272 = 0u;
  long long v273 = 0u;
  long long v270 = 0u;
  long long v271 = 0u;
  long long buffer = 0u;
  long long v269 = 0u;
  int v6 = *(_DWORD *)v4;
  if (*(_DWORD *)v4 > 0xDu) {
    goto LABEL_72;
  }
  uint64_t v7 = v4[2];
  if (((1 << v6) & 0x3617) == 0)
  {
    if (v6 == 3)
    {
      uint64_t v46 = (CA::Render *)x_stream_push(v4[2]);
      CA::Render::show_statistics(v46);
      x_stream_pop_(v7);
    }
    goto LABEL_72;
  }
  os_unfair_lock_lock(&CA::Render::Context::_context_lock);
  char v8 = x_hash_table_values(CA::Render::Context::_context_table);
  if (!v8)
  {
    os_unfair_lock_unlock(&CA::Render::Context::_context_lock);
    goto LABEL_72;
  }
  size_t v229 = v5;
  unsigned int v9 = v8;
  size_t v239 = v8;
  do
  {
    uint64_t v10 = (atomic_uint *)(*v9 + 8);
    if (!atomic_fetch_add(v10, 1u)) {
      atomic_fetch_add(v10, 0xFFFFFFFF);
    }
    unsigned int v9 = (void *)v9[1];
  }
  while (v9);
  os_unfair_lock_unlock(&CA::Render::Context::_context_lock);
  int v11 = *(_DWORD *)v4;
  float64x2_t v12 = v239;
  uint64_t v240 = v4;
  switch(*(_DWORD *)v4)
  {
    case 0:
      char v47 = 0;
      uint64_t v48 = v239;
      do
      {
        while (1)
        {
          uint64_t v49 = *v48;
          if ((*(unsigned char *)(*v48 + 13) & 2) != 0) {
            break;
          }
          if ((v47 & 1) == 0) {
            x_stream_write(v7, "Unattached contexts:\n", 0x15uLL);
          }
          uint64_t v50 = *(unsigned int *)(v49 + 16);
          if (!atomic_load((unsigned int *)(v49 + 228)))
          {
            if (*(_DWORD *)(v49 + 252)) {
              pid_t v52 = 0;
            }
            else {
              pid_t v52 = getpid();
            }
            int v53 = 0;
            atomic_compare_exchange_strong((atomic_uint *volatile)(v49 + 228), (unsigned int *)&v53, v52);
          }
          CA::Render::Context::process_path((CA::Render::Context *)v49);
          x_stream_printf(v7, "  %x: pid %d [%s]", v54, v55, v56, v57, v58, v59, v50);
          if (!*(_DWORD *)(v49 + 256)) {
            x_stream_write(v7, " (local)", 8uLL);
          }
          if (*(_DWORD *)(v49 + 352)) {
            x_stream_write(v7, " (visible)", 0xAuLL);
          }
          if ((*(_WORD *)(v49 + 552) & 4) != 0) {
            x_stream_write(v7, " (secure)", 9uLL);
          }
          float v66 = *(float *)(v49 + 308);
          if (v66 > 1.0) {
            x_stream_printf(v7, " (requested headroom: %f)", v60, v61, v62, v63, v64, v65, COERCE__INT64(v66));
          }
          if ((*(_WORD *)(v49 + 552) & 0x800) != 0) {
            x_stream_write(v7, " (decode-error)", 0xFuLL);
          }
          uint64_t v67 = *(void *)(v49 + 240);
          if (v67) {
            x_stream_printf(v7, " \"%s\"", v60, v61, v62, v63, v64, v65, v67 + 28);
          }
          CFStringRef v68 = *(const __CFString **)(v49 + 520);
          if (v68)
          {
            CStringPtr = CFStringGetCStringPtr(v68, 0x8000100u);
            x_stream_printf(v7, " (client-annotation: %s)", v70, v71, v72, v73, v74, v75, (uint64_t)CStringPtr);
          }
          char v47 = 1;
          x_stream_write(v7, "\n", 1uLL);
          uint64_t v48 = (void *)v48[1];
          if (!v48) {
            goto LABEL_327;
          }
        }
        uint64_t v48 = (void *)v48[1];
      }
      while (v48);
      float64x2_t v12 = v239;
      if (v47)
      {
LABEL_327:
        x_stream_write(v7, "\n", 1uLL);
        goto LABEL_62;
      }
      goto LABEL_63;
    case 1:
    case 9:
    case 0xA:
    case 0xE:
      if (v11 == 9) {
        int v13 = 6;
      }
      else {
        int v13 = 4;
      }
      if (v11 == 10) {
        int v13 = 0;
      }
      int v235 = *(_DWORD *)v4;
      unsigned int v233 = v13 | (v11 == 14);
      x_stream_push(v7);
      uint64_t v14 = v239;
      while (1)
      {
        uint64_t v15 = *v14;
        if ((*(unsigned char *)(*v14 + 13) & 2) == 0)
        {
          uint64_t v16 = v4[1];
          if (!v16 || v16 == *(_DWORD *)(v15 + 16)) {
            break;
          }
        }
LABEL_60:
        uint64_t v14 = (void *)v14[1];
        if (!v14) {
          goto LABEL_61;
        }
      }
      uint64_t v17 = (pthread_mutex_t *)(v15 + 72);
      pthread_mutex_lock((pthread_mutex_t *)(v15 + 72));
      long long buffer = 0u;
      long long v269 = 0u;
      long long v270 = 0u;
      long long v271 = 0u;
      long long v272 = 0u;
      long long v273 = 0u;
      long long v274 = 0u;
      long long v275 = 0u;
      long long v276 = 0u;
      long long v277 = 0u;
      long long v278 = 0u;
      long long v279 = 0u;
      long long v280 = 0u;
      long long v281 = 0u;
      long long v282 = 0u;
      long long v283 = 0u;
      if (*(void *)(v15 + 448))
      {
        CFStringRef v18 = (const __CFString *)CGColorSpaceCopyICCProfileDescription();
        if (v18)
        {
          CFStringRef v19 = v18;
          CFStringGetCString(v18, (char *)&buffer, 255, 0x8000100u);
          CFRelease(v19);
        }
      }
      if (x_log_hook_p())
      {
        uint64_t v244 = (pthread_mutex_t *)(v15 + 72);
        if (!atomic_load((unsigned int *)(v15 + 228)))
        {
          if (*(_DWORD *)(v15 + 252)) {
            pid_t v21 = 0;
          }
          else {
            pid_t v21 = getpid();
          }
          int v30 = 0;
          atomic_compare_exchange_strong((atomic_uint *volatile)(v15 + 228), (unsigned int *)&v30, v21);
        }
        CA::Render::Context::process_path((CA::Render::Context *)v15);
        uint64_t v31 = mach_absolute_time();
        CATimeWithHostTime(v31);
        uint64_t v4 = v240;
        x_log_();
      }
      else
      {
        double v22 = x_log_category_render;
        if (!os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_50;
        }
        uint64_t v244 = (pthread_mutex_t *)(v15 + 72);
        __int32 v23 = *(_DWORD *)(v15 + 16);
        int v24 = "";
        if ((_BYTE)buffer) {
          char v25 = "; colorspace \"";
        }
        else {
          char v25 = "";
        }
        if ((_BYTE)buffer) {
          double v26 = "\"";
        }
        else {
          double v26 = "";
        }
        float v27 = *(float *)(v15 + 192);
        unsigned int v28 = atomic_load((unsigned int *)(v15 + 228));
        if (!v28)
        {
          if (*(_DWORD *)(v15 + 252)) {
            pid_t v29 = 0;
          }
          else {
            pid_t v29 = getpid();
          }
          unsigned int v32 = 0;
          atomic_compare_exchange_strong((atomic_uint *volatile)(v15 + 228), &v32, v29);
          if (v32) {
            unsigned int v28 = v32;
          }
          else {
            unsigned int v28 = v29;
          }
        }
        double v33 = v27;
        __double2 v34 = CA::Render::Context::process_path((CA::Render::Context *)v15);
        __int16 v35 = *(_WORD *)(v15 + 552);
        double v36 = "(secure) ";
        if ((v35 & 4) == 0) {
          double v36 = "";
        }
        unint64_t v241 = v36;
        uint64_t v242 = v34 + 7;
        int v37 = "(start security analysis) ";
        if ((v35 & 0x10) == 0) {
          int v37 = "";
        }
        double v237 = v37;
        if ((v35 & 0x20) != 0) {
          int v24 = "(stop security analysis) ";
        }
        uint64_t v38 = mach_absolute_time();
        double v39 = CATimeWithHostTime(v38);
        buf[0].i32[0] = 67111682;
        buf[0].i32[1] = v23;
        buf[1].i16[0] = 2080;
        *(int8x8_t *)((char *)&buf[1] + 2) = (int8x8_t)v25;
        buf[2].i16[1] = 2080;
        *(int8x8_t *)((char *)&buf[2] + 4) = (int8x8_t)&buffer;
        buf[3].i16[2] = 2080;
        *(int8x8_t *)((char *)&buf[3] + 6) = (int8x8_t)v26;
        buf[4].i16[3] = 2048;
        buf[5] = *(int8x8_t *)&v33;
        __int16 v256 = 1024;
        unsigned int v257 = v28;
        __int16 v258 = 2080;
        long long v259 = v242;
        __int16 v260 = 2080;
        long long v261 = v241;
        __int16 v262 = 2080;
        long long v263 = v237;
        __int16 v264 = 2080;
        long long v265 = v24;
        __int16 v266 = 2048;
        double v267 = v39;
        _os_log_impl(&dword_184668000, v22, OS_LOG_TYPE_DEFAULT, "== context %x%s%s%s; level %f; pid %d [%s] %s%s%sat time %f ==\n\n",
          (uint8_t *)buf,
          0x68u);
        uint64_t v4 = v240;
      }
      uint64_t v17 = v244;
LABEL_50:
      uint64_t v40 = CA::Render::Context::root_layer_handle((CA::Render::Context *)v15);
      if (v40 && (uint64_t v41 = *(void *)(v40 + 16)) != 0)
      {
        if (v235 == 14)
        {
          *(_DWORD *)uint64_t v248 = 0;
          v252[0] = 0;
          CA::Render::Layer::count_layers(v41, (int *)v248, v252, 0);
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            size_t v42 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              buf[0].i32[0] = 67109376;
              buf[0].i32[1] = *(_DWORD *)v248;
              buf[1].i16[0] = 1024;
              *(__int32 *)((char *)buf[1].i32 + 2) = v252[0];
              _os_log_impl(&dword_184668000, v42, OS_LOG_TYPE_DEFAULT, "\n*** Total Layers: %d, Hidden/Culled Layers: %d ***\n\n", (uint8_t *)buf, 0xEu);
            }
          }
        }
        (*(void (**)(uint64_t, void, void))(*(void *)v41 + 40))(v41, 0, v233);
      }
      else
      {
        x_stream_write(v7, "  <null>\n", 9uLL);
      }
      x_stream_write(v7, "\n\n", 2uLL);
      pthread_mutex_unlock(v17);
      goto LABEL_60;
    case 2:
      x_stream_push(v7);
      size_t v76 = v239;
      do
      {
        uint64_t v77 = *v76;
        if (*(void *)(*v76 + 168) != *(void *)(*v76 + 176))
        {
          uint64_t v78 = *(unsigned int *)(v77 + 16);
          if (!atomic_load((unsigned int *)(v77 + 228)))
          {
            if (*(_DWORD *)(v77 + 252)) {
              pid_t v80 = 0;
            }
            else {
              pid_t v80 = getpid();
            }
            int v81 = 0;
            atomic_compare_exchange_strong((atomic_uint *volatile)(v77 + 228), (unsigned int *)&v81, v80);
          }
          CA::Render::Context::process_path((CA::Render::Context *)v77);
          x_stream_printf(v7, "Context %x (pid %d [%s]):\n", v82, v83, v84, v85, v86, v87, v78);
          float v88 = *(__int32 **)(v77 + 168);
          unint64_t v89 = *(unsigned int **)(v77 + 176);
          while (v88 != (__int32 *)v89)
          {
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              unsigned int v90 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                __int32 v91 = *v88;
                buf[0].i32[0] = 67109120;
                buf[0].i32[1] = v91;
                _os_log_impl(&dword_184668000, v90, OS_LOG_TYPE_DEFAULT, "  slot %u:", (uint8_t *)buf, 8u);
              }
            }
            CA::Render::show_newline((CA::Render *)2);
            uint64_t v92 = (CA::Render *)CA::Render::Context::_slot_table;
            if (CA::Render::Context::_slot_table) {
              uint64_t v92 = (CA::Render *)x_hash_table_lookup(CA::Render::Context::_slot_table, *v88, 0);
            }
            CA::Render::show_object(v92, (const CA::Render::Object *)2);
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              size_t v93 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                buf[0].i16[0] = 0;
                _os_log_impl(&dword_184668000, v93, OS_LOG_TYPE_DEFAULT, "\n", (uint8_t *)buf, 2u);
              }
            }
            v88 += 2;
          }
        }
        size_t v76 = (void *)v76[1];
      }
      while (v76);
      goto LABEL_61;
    case 3:
    case 5:
    case 6:
    case 7:
    case 8:
    case 0xB:
      goto LABEL_62;
    case 4:
      x_stream_push(v7);
      size_t v94 = v239;
      do
      {
        uint64_t v95 = *v94;
        uint64_t v96 = v4[1];
        if (!v96 || v96 == *(_DWORD *)(v95 + 16))
        {
          pthread_mutex_lock((pthread_mutex_t *)(v95 + 72));
          uint64_t v97 = *(unsigned int *)(v95 + 16);
          if (!atomic_load((unsigned int *)(v95 + 228)))
          {
            if (*(_DWORD *)(v95 + 252)) {
              pid_t v99 = 0;
            }
            else {
              pid_t v99 = getpid();
            }
            int v100 = 0;
            atomic_compare_exchange_strong((atomic_uint *volatile)(v95 + 228), (unsigned int *)&v100, v99);
          }
          CA::Render::Context::process_path((CA::Render::Context *)v95);
          x_stream_printf(v7, "Context %x (pid %d [%s]):\n", v101, v102, v103, v104, v105, v106, v97);
          unint64_t v113 = *(unsigned int *)(v95 + 144);
          if (v113)
          {
            for (unint64_t i = 0; i < v113; ++i)
            {
              long long v115 = *(uint64_t ***)(*(void *)(v95 + 136) + 8 * i);
              if (v115)
              {
                do
                {
                  x_stream_printf(v7, "  name 0x%lCGFloat x = object 0x%lx ", v107, v108, v109, v110, v111, v112, (unint64_t)v115[1] ^ 0x8000000000000000);
                  (*(void (**)(uint64_t *, void, void))(*v115[2] + 40))(v115[2], 0, 0);
                  x_stream_write(v7, "\n", 1uLL);
                  long long v115 = (uint64_t **)*v115;
                }
                while (v115);
                unint64_t v113 = *(unsigned int *)(v95 + 144);
              }
            }
          }
          x_stream_write(v7, "\n", 1uLL);
          pthread_mutex_unlock((pthread_mutex_t *)(v95 + 72));
          uint64_t v4 = v240;
        }
        size_t v94 = (uint64_t *)v94[1];
      }
      while (v94);
      goto LABEL_61;
    case 0xC:
      x_stream_push(v7);
      char v116 = 0;
      size_t v117 = (CA::Render::Context **)v239;
      do
      {
        size_t v118 = *v117;
        if ((*((unsigned char *)*v117 + 13) & 2) == 0)
        {
          if ((v116 & 1) == 0) {
            x_stream_write(v7, "Unattached contexts:\n", 0x15uLL);
          }
          CA::Render::Context::show_hosts(v118);
          char v116 = 1;
        }
        size_t v117 = (CA::Render::Context **)v117[1];
      }
      while (v117);
      goto LABEL_61;
    case 0xD:
      x_stream_push(v7);
      double v119 = 0.0;
      uint64_t v120 = &CA::callback_timer;
      unint64_t v121 = v239;
      double v122 = 0.0;
      double v123 = 0.0;
      double v124 = 0.0;
      break;
    default:
      goto LABEL_63;
  }
  do
  {
    memset(buf, 0, 32);
    uint8_t buf[4] = (int8x8_t)1065353216;
    uint64_t v125 = *v121;
    uint64_t v126 = v4[1];
    if (!v126 || v126 == *(_DWORD *)(v125 + 16))
    {
      uint64_t v236 = (pthread_mutex_t *)(v125 + 72);
      uint64_t v238 = v121;
      pthread_mutex_lock((pthread_mutex_t *)(v125 + 72));
      unint64_t v128 = *(unsigned int *)(v125 + 144);
      if (v128)
      {
        uint64_t v129 = 0;
        uint64_t v243 = v125;
        while (1)
        {
          size_t v130 = *(void **)(*(void *)(v125 + 136) + 8 * v129);
          if (v130) {
            break;
          }
LABEL_244:
          if (++v129 >= v128) {
            goto LABEL_245;
          }
        }
        while (1)
        {
          uint64_t v131 = v130[2];
          if (*(unsigned char *)(v131 + 12) == 22)
          {
            uint64_t v132 = *(void *)(v131 + 16);
            if (v132)
            {
              uint64_t v133 = *(void *)(v132 + 96);
              if (v133)
              {
                if (*(unsigned char *)(v133 + 12) == 50) {
                  break;
                }
              }
            }
          }
LABEL_233:
          size_t v130 = (void *)*v130;
          if (!v130)
          {
            uint64_t v125 = v243;
            unint64_t v128 = *(unsigned int *)(v243 + 144);
            goto LABEL_244;
          }
        }
        uint64_t v134 = *(CA::Shape **)(v133 + 16);
        unint64_t v135 = 0x9DDFEA08EB382D69 * (((8 * v134) + 8) ^ ((unint64_t)v134 >> 32));
        unint64_t v136 = 0x9DDFEA08EB382D69 * (((unint64_t)v134 >> 32) ^ (v135 >> 47) ^ v135);
        unint64_t v137 = 0x9DDFEA08EB382D69 * (v136 ^ (v136 >> 47));
        unint64_t v138 = (unint64_t)buf[1];
        if (buf[1])
        {
          uint8x8_t v139 = (uint8x8_t)vcnt_s8(buf[1]);
          v139.i16[0] = vaddlv_u8(v139);
          if (v139.u32[0] > 1uLL)
          {
            unint64_t v140 = 0x9DDFEA08EB382D69 * (v136 ^ (v136 >> 47));
            if (v137 >= *(void *)&buf[1]) {
              unint64_t v140 = v137 % *(void *)&buf[1];
            }
          }
          else
          {
            unint64_t v140 = v137 & (*(void *)&buf[1] - 1);
          }
          uint64_t v141 = *(CA::Shape ****)(*(void *)buf + 8 * v140);
          if (v141)
          {
            for (uint64_t j = *v141; j; uint64_t j = (CA::Shape **)*j)
            {
              uint64_t v143 = j[1];
              if (v143 == (CA::Shape *)v137)
              {
                if (j[2] == v134) {
                  goto LABEL_229;
                }
              }
              else
              {
                if (v139.u32[0] > 1uLL)
                {
                  if ((unint64_t)v143 >= *(void *)&buf[1]) {
                    uint64_t v143 = (CA::Shape *)((unint64_t)v143 % *(void *)&buf[1]);
                  }
                }
                else
                {
                  uint64_t v143 = (CA::Shape *)((unint64_t)v143 & (*(void *)&buf[1] - 1));
                }
                if (v143 != (CA::Shape *)v140) {
                  break;
                }
              }
            }
          }
        }
        else
        {
          unint64_t v140 = 0;
        }
        uint64_t j = (CA::Shape **)operator new(0x20uLL);
        *uint64_t j = 0;
        j[1] = (CA::Shape *)v137;
        j[2] = v134;
        j[3] = 0;
        float v144 = (float)(unint64_t)(*(void *)&buf[3] + 1);
        if (v138 && (float)(*(float *)buf[4].i32 * (float)v138) >= v144)
        {
LABEL_219:
          int8x8_t v160 = buf[0];
          unint64_t v161 = *(CA::Shape ****)(*(void *)buf + 8 * v140);
          if (v161)
          {
            *uint64_t j = (CA::Shape *)*v161;
          }
          else
          {
            *uint64_t j = (CA::Shape *)buf[2];
            buf[2] = (int8x8_t)j;
            *(void *)(*(void *)&v160 + 8 * v140) = &buf[2];
            if (!*j) {
              goto LABEL_228;
            }
            unint64_t v162 = *((void *)*j + 1);
            if ((v138 & (v138 - 1)) != 0)
            {
              if (v162 >= v138) {
                v162 %= v138;
              }
            }
            else
            {
              v162 &= v138 - 1;
            }
            unint64_t v161 = (CA::Shape ***)(*(void *)buf + 8 * v162);
          }
          *unint64_t v161 = j;
LABEL_228:
          ++*(void *)&buf[3];
LABEL_229:
          uint64_t v164 = j[3];
          uint64_t v163 = j + 3;
          if (v164) {
            CA::shape_union(v163, (CA::Shape **)(v133 + 24), v127);
          }
          else {
            *uint64_t v163 = (CA::Shape *)CA::Shape::new_shape((unsigned int *)(v133 + 24));
          }
          uint64_t v120 = &CA::callback_timer;
          goto LABEL_233;
        }
        BOOL v145 = (v138 & (v138 - 1)) != 0;
        if (v138 < 3) {
          BOOL v145 = 1;
        }
        unint64_t v146 = v145 | (2 * v138);
        unint64_t v147 = vcvtps_u32_f32(v144 / *(float *)buf[4].i32);
        if (v146 <= v147) {
          int8x8_t prime = (int8x8_t)v147;
        }
        else {
          int8x8_t prime = (int8x8_t)v146;
        }
        if (*(void *)&prime == 1)
        {
          int8x8_t prime = (int8x8_t)2;
        }
        else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
        {
          int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
          unint64_t v138 = (unint64_t)buf[1];
        }
        if (*(void *)&prime > v138) {
          goto LABEL_185;
        }
        if (*(void *)&prime < v138)
        {
          unint64_t v155 = vcvtps_u32_f32((float)(unint64_t)buf[3] / *(float *)buf[4].i32);
          if (v138 < 3
            || (uint8x8_t v156 = (uint8x8_t)vcnt_s8((int8x8_t)v138), v156.i16[0] = vaddlv_u8(v156), v156.u32[0] > 1uLL))
          {
            unint64_t v155 = std::__next_prime(v155);
          }
          else
          {
            uint64_t v157 = 1 << -(char)__clz(v155 - 1);
            if (v155 >= 2) {
              unint64_t v155 = v157;
            }
          }
          if (*(void *)&prime <= v155) {
            int8x8_t prime = (int8x8_t)v155;
          }
          if (*(void *)&prime >= v138)
          {
            unint64_t v138 = (unint64_t)buf[1];
          }
          else
          {
            if (prime)
            {
LABEL_185:
              if (*(void *)&prime >> 61) {
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              float v149 = operator new(8 * *(void *)&prime);
              size_t v150 = (void *)buf[0];
              buf[0] = (int8x8_t)v149;
              if (v150) {
                operator delete(v150);
              }
              uint64_t v151 = 0;
              buf[1] = prime;
              do
                *(void *)(*(void *)buf + 8 * v151++) = 0;
              while (*(void *)&prime != v151);
              unint64_t v152 = (void **)buf[2];
              if (buf[2])
              {
                unint64_t v153 = *(void *)(*(void *)&buf[2] + 8);
                uint8x8_t v154 = (uint8x8_t)vcnt_s8(prime);
                v154.i16[0] = vaddlv_u8(v154);
                if (v154.u32[0] > 1uLL)
                {
                  if (v153 >= *(void *)&prime) {
                    v153 %= *(void *)&prime;
                  }
                }
                else
                {
                  v153 &= *(void *)&prime - 1;
                }
                *(void *)(*(void *)buf + 8 * v153) = &buf[2];
                for (k = *v152; k; unint64_t v153 = v159)
                {
                  unint64_t v159 = k[1];
                  if (v154.u32[0] > 1uLL)
                  {
                    if (v159 >= *(void *)&prime) {
                      v159 %= *(void *)&prime;
                    }
                  }
                  else
                  {
                    v159 &= *(void *)&prime - 1;
                  }
                  if (v159 != v153)
                  {
                    if (!*(void *)(*(void *)buf + 8 * v159))
                    {
                      *(void *)(*(void *)buf + 8 * v159) = v152;
                      goto LABEL_210;
                    }
                    *unint64_t v152 = (void *)*k;
                    *uint64_t k = **(void **)(*(void *)buf + 8 * v159);
                    **(void **)(*(void *)buf + 8 * v159) = k;
                    uint64_t k = v152;
                  }
                  unint64_t v159 = v153;
LABEL_210:
                  unint64_t v152 = (void **)k;
                  uint64_t k = (void *)*k;
                }
              }
              unint64_t v138 = (unint64_t)prime;
              goto LABEL_214;
            }
            size_t v165 = (void *)buf[0];
            buf[0] = 0;
            if (v165) {
              operator delete(v165);
            }
            unint64_t v138 = 0;
            buf[1] = 0;
          }
        }
LABEL_214:
        if ((v138 & (v138 - 1)) != 0)
        {
          if (v137 >= v138) {
            unint64_t v140 = v137 % v138;
          }
          else {
            unint64_t v140 = v137;
          }
        }
        else
        {
          unint64_t v140 = (v138 - 1) & v137;
        }
        goto LABEL_219;
      }
LABEL_245:
      if (buf[3])
      {
        uint64_t v166 = *(unsigned int *)(v125 + 16);
        if (!atomic_load((unsigned int *)(v125 + 228)))
        {
          if (*(_DWORD *)(v125 + 252)) {
            pid_t v168 = 0;
          }
          else {
            pid_t v168 = getpid();
          }
          int v170 = 0;
          atomic_compare_exchange_strong((atomic_uint *volatile)(v125 + 228), (unsigned int *)&v170, v168);
        }
        double v230 = v124;
        double v231 = v122;
        double v232 = v123;
        double v234 = v119;
        CA::Render::Context::process_path((CA::Render::Context *)v125);
        x_stream_printf(v7, "\nContext %x (pid %d [%s]):", v171, v172, v173, v174, v175, v176, v166);
        unint64_t v177 = (void *)buf[2];
        if (buf[2])
        {
          double v178 = 0.0;
          double v179 = 0.0;
          double v180 = 0.0;
          double v181 = 0.0;
          do
          {
            size_t v182 = (_DWORD *)v177[2];
            if (v182)
            {
              size_t v183 = (CA::Shape *)v177[3];
              uint64_t v247 = v183;
              CA::Render::show_newline((CA::Render *)1);
              if (x_log_hook_p())
              {
                x_log_();
              }
              else
              {
                size_t v184 = v120[100];
                if (os_log_type_enabled(v184, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)uint64_t v248 = 0;
                  _os_log_impl(&dword_184668000, v184, OS_LOG_TYPE_DEFAULT, "Texture ", v248, 2u);
                }
              }
              (*(void (**)(_DWORD *, uint64_t, void))(*(void *)v182 + 40))(v182, 1, 0);
              size_t v245 = 0;
              uint64_t v246 = 0;
              *(void *)long long v252 = v183;
              uint64_t v253 = 0;
              uint64_t v254 = 0;
              while (1)
              {
                int v185 = CA::ShapeIterator::iterate((uint64_t *)v252, (int *)&v245);
                CA::Render::show_newline((CA::Render *)2);
                if (!v185) {
                  break;
                }
                if (x_log_hook_p())
                {
                  x_log_();
                }
                else
                {
                  v187 = v120[100];
                  if (os_log_type_enabled(v187, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)uint64_t v248 = 67109888;
                    *(_DWORD *)uint64_t v249 = v245;
                    *(_WORD *)&v249[4] = 1024;
                    *(_DWORD *)&v249[6] = HIDWORD(v245);
                    LOWORD(v250) = 1024;
                    *(_DWORD *)((char *)&v250 + 2) = v246;
                    HIWORD(v250) = 1024;
                    *(_DWORD *)long long v251 = HIDWORD(v246);
                    _os_log_impl(&dword_184668000, v187, OS_LOG_TYPE_DEFAULT, "[%d %d %d %d]", v248, 0x1Au);
                  }
                }
                CA::shape_union(&v247, &v245, v186);
              }
              double v188 = (double)(v182[5] * v182[4]);
              uint64_t v189 = v247;
              double v190 = (double)CA::Shape::area(v247);
              double v191 = (double)(unint64_t)(*(uint64_t (**)(_DWORD *))(*(void *)v182 + 168))(v182);
              double v192 = v191 * v190 / v188;
              if (x_log_hook_p())
              {
                unint64_t v193 = (unint64_t)(v191 - v192);
                double v194 = trunc(v191 - v192);
                if (v193 >= 0x400)
                {
                  double v199 = 1.0;
                  do
                    double v199 = v199 * 0.0009765625;
                  while (v199 * v194 >= 1024.0);
                }
                x_log_();
              }
              else
              {
                size_t v195 = v120[100];
                if (os_log_type_enabled(v195, OS_LOG_TYPE_DEFAULT))
                {
                  unint64_t v196 = (unint64_t)(v191 - v192);
                  double v197 = trunc(v191 - v192);
                  if (v196 >= 0x400)
                  {
                    double v200 = 1.0;
                    do
                    {
                      double v200 = v200 * 0.0009765625;
                      double v198 = v200 * v197;
                    }
                    while (v200 * v197 >= 1024.0);
                  }
                  else
                  {
                    double v198 = v197;
                  }
                  uint64_t v201 = v196 > 0x3FF;
                  if ((v196 & 0xFFFFFFFFFFF00000) != 0) {
                    ++v201;
                  }
                  if ((v196 & 0xFFFFFFFFC0000000) != 0) {
                    ++v201;
                  }
                  if (v196 >> 40) {
                    ++v201;
                  }
                  if (v196 >> 50) {
                    ++v201;
                  }
                  if (v196 >> 60) {
                    uint64_t v202 = v201 + 1;
                  }
                  else {
                    uint64_t v202 = v201;
                  }
                  size_t v203 = off_1E527FCB0[v202];
                  *(_DWORD *)uint64_t v248 = 134218498;
                  *(double *)uint64_t v249 = v190 * 100.0 / v188;
                  *(_WORD *)&v249[8] = 2048;
                  double v250 = v198;
                  *(_WORD *)long long v251 = 2080;
                  *(void *)&v251[2] = v203;
                  _os_log_impl(&dword_184668000, v195, OS_LOG_TYPE_DEFAULT, "Utilization: %.2f%%, wasted memory: %.2lf %s\n", v248, 0x20u);
                }
              }
              CA::Shape::unref(v189);
              double v181 = v181 + v191;
              double v180 = v192 + v180;
              double v179 = v179 + v188;
              double v178 = v178 + v190;
            }
            unint64_t v177 = (void *)*v177;
          }
          while (v177);
          uint64_t v4 = v240;
          size_t v169 = v236;
          unint64_t v121 = v238;
          if (v179 != 0.0)
          {
            if (x_log_hook_p())
            {
              unint64_t v204 = (unint64_t)(v181 - v180);
              double v205 = trunc(v181 - v180);
              if (v204 >= 0x400)
              {
                double v210 = 1.0;
                do
                  double v210 = v210 * 0.0009765625;
                while (v210 * v205 >= 1024.0);
              }
              x_log_();
            }
            else
            {
              uint64_t v206 = v120[100];
              if (os_log_type_enabled(v206, OS_LOG_TYPE_DEFAULT))
              {
                unint64_t v207 = (unint64_t)(v181 - v180);
                double v208 = trunc(v181 - v180);
                if (v207 >= 0x400)
                {
                  double v211 = 1.0;
                  do
                  {
                    double v211 = v211 * 0.0009765625;
                    double v209 = v211 * v208;
                  }
                  while (v211 * v208 >= 1024.0);
                }
                else
                {
                  double v209 = v208;
                }
                uint64_t v212 = v207 > 0x3FF;
                if ((v207 & 0xFFFFFFFFFFF00000) != 0) {
                  ++v212;
                }
                if ((v207 & 0xFFFFFFFFC0000000) != 0) {
                  ++v212;
                }
                if (v207 >> 40) {
                  ++v212;
                }
                if (v207 >> 50) {
                  ++v212;
                }
                if (v207 >> 60) {
                  uint64_t v213 = v212 + 1;
                }
                else {
                  uint64_t v213 = v212;
                }
                uint64_t v214 = off_1E527FCB0[v213];
                *(_DWORD *)uint64_t v248 = 134218498;
                *(double *)uint64_t v249 = v178 * 100.0 / v179;
                *(_WORD *)&v249[8] = 2048;
                double v250 = v209;
                *(_WORD *)long long v251 = 2080;
                *(void *)&v251[2] = v214;
                _os_log_impl(&dword_184668000, v206, OS_LOG_TYPE_DEFAULT, "\n  Context utilization: %.2f%%, wasted memory: %.2lf %s\n", v248, 0x20u);
              }
            }
          }
        }
        else
        {
          double v178 = 0.0;
          double v179 = 0.0;
          double v180 = 0.0;
          double v181 = 0.0;
          uint64_t v4 = v240;
          size_t v169 = v236;
          unint64_t v121 = v238;
        }
        double v124 = v181 + v230;
        double v123 = v180 + v232;
        double v122 = v179 + v231;
        double v119 = v178 + v234;
        x_stream_write(v7, "\n", 1uLL);
      }
      else
      {
        uint64_t v4 = v240;
        size_t v169 = v236;
        unint64_t v121 = v238;
      }
      pthread_mutex_unlock(v169);
      uint64_t v215 = (void *)buf[2];
      if (buf[2])
      {
        do
        {
          unint64_t v216 = (void *)*v215;
          operator delete(v215);
          uint64_t v215 = v216;
        }
        while (v216);
      }
    }
    uint64_t v217 = (void *)buf[0];
    buf[0] = 0;
    if (v217) {
      operator delete(v217);
    }
    unint64_t v121 = (void *)v121[1];
  }
  while (v121);
  if (v122 != 0.0)
  {
    if (x_log_hook_p())
    {
      unint64_t v218 = (unint64_t)(v124 - v123);
      double v219 = trunc(v124 - v123);
      if (v218 >= 0x400)
      {
        double v224 = 1.0;
        do
          double v224 = v224 * 0.0009765625;
        while (v224 * v219 >= 1024.0);
      }
      x_log_();
    }
    else
    {
      long long v220 = v120[100];
      if (os_log_type_enabled(v220, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v221 = (unint64_t)(v124 - v123);
        double v222 = trunc(v124 - v123);
        if (v221 >= 0x400)
        {
          double v225 = 1.0;
          do
          {
            double v225 = v225 * 0.0009765625;
            double v223 = v225 * v222;
          }
          while (v225 * v222 >= 1024.0);
        }
        else
        {
          double v223 = v222;
        }
        uint64_t v226 = v221 > 0x3FF;
        if ((v221 & 0xFFFFFFFFFFF00000) != 0) {
          ++v226;
        }
        if ((v221 & 0xFFFFFFFFC0000000) != 0) {
          ++v226;
        }
        if (v221 >> 40) {
          ++v226;
        }
        if (v221 >> 50) {
          ++v226;
        }
        if (v221 >> 60) {
          uint64_t v227 = v226 + 1;
        }
        else {
          uint64_t v227 = v226;
        }
        uint64_t v228 = off_1E527FCB0[v227];
        buf[0].i32[0] = 134218498;
        *(double *)((char *)buf + 4) = v119 * 100.0 / v122;
        buf[1].i16[2] = 2048;
        *(int8x8_t *)((char *)&buf[1] + 6) = *(int8x8_t *)&v223;
        buf[2].i16[3] = 2080;
        buf[3] = (int8x8_t)v228;
        _os_log_impl(&dword_184668000, v220, OS_LOG_TYPE_DEFAULT, "Total utilization: %.2f%%, wasted memory: %.2lf %s\n\n", (uint8_t *)buf, 0x20u);
      }
    }
  }
LABEL_61:
  x_stream_pop_(v7);
LABEL_62:
  float64x2_t v12 = v239;
  do
  {
LABEL_63:
    uint64_t v43 = *v12;
    if (atomic_fetch_add((atomic_uint *volatile)(*v12 + 8), 0xFFFFFFFF) == 1) {
      (*(void (**)(uint64_t))(*(void *)v43 + 16))(v43);
    }
    float64x2_t v12 = (void *)v12[1];
  }
  while (v12);
  uint64_t v5 = v229;
  int v44 = v239;
  do
  {
    unint64_t v45 = (void *)v44[1];
    free(v44);
    int v44 = v45;
  }
  while (v45);
LABEL_72:
}

_DWORD *CA::Render::Context::copy_all_contexts(CA::Render::Context *this)
{
  v18[1] = *MEMORY[0x1E4F143B8];
  os_unfair_lock_lock(&CA::Render::Context::_context_lock);
  uint64_t v2 = CA::Render::Context::_context_table;
  if (!CA::Render::Context::_context_table) {
    goto LABEL_16;
  }
  double v3 = *(CA::Render::Array **)(CA::Render::Context::_context_table + 24);
  unint64_t v4 = 24 * (void)v3;
  if ((unint64_t)(24 * (void)v3) <= 0x1000)
  {
    MEMORY[0x1F4188790](v1);
    uint64_t v5 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v5, 24 * (void)v3);
    goto LABEL_6;
  }
  int v6 = (char *)malloc_type_malloc(24 * (void)v3, 0xF0E86077uLL);
  if (!v6)
  {
LABEL_16:
    uint64_t v16 = 0;
    goto LABEL_18;
  }
  uint64_t v5 = v6;
  uint64_t v2 = CA::Render::Context::_context_table;
LABEL_6:
  uint64_t v7 = 0;
  uint64_t v8 = 1 << *(_DWORD *)v2;
  unsigned int v9 = v5;
  do
  {
    uint64_t v10 = *(void **)(*(void *)(v2 + 16) + 8 * v7);
    if (v10)
    {
      do
      {
        *unsigned int v9 = v10[2];
        int v11 = v9 + 2;
        v9[1] = v10[3];
        uint64_t v10 = (void *)*v10;
        v9 += 2;
      }
      while (v10);
      unsigned int v9 = v11;
    }
    ++v7;
  }
  while (v7 != v8);
  float64x2_t v12 = &v5[16 * (void)v3];
  if (v3)
  {
    uint64_t v13 = 16 * (void)v3;
    uint64_t v14 = 8;
    uint64_t v15 = v3;
    do
    {
      *(void *)&v5[v13] = *(void *)&v5[v14];
      v13 += 8;
      v14 += 16;
      uint64_t v15 = (CA::Render::Array *)((char *)v15 - 1);
    }
    while (v15);
    uint64_t v16 = CA::Render::Array::new_array(v3, v12, (CA::Render::Object *const *)1, 0);
    if (v4 > 0x1000) {
      free(v5);
    }
  }
  else
  {
    uint64_t v16 = CA::Render::Array::new_array(0, v12, (CA::Render::Object *const *)1, 0);
  }
LABEL_18:
  os_unfair_lock_unlock(&CA::Render::Context::_context_lock);
  return v16;
}

uint64_t CA::Render::Context::show_source_layer(uint64_t this, CA::Render::Object *a2, CA::Render *a3, int a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if ((a4 & 4) == 0)
  {
    this = CA::Render::Context::context_by_id((CA::Render::Context *)this);
    if (this)
    {
      uint64_t v7 = (atomic_uint *)this;
      uint64_t v8 = (pthread_mutex_t *)(this + 72);
      pthread_mutex_lock((pthread_mutex_t *)(this + 72));
      unsigned int v9 = CA::Render::Context::lookup_handle((CA::Render::Context *)v7, a2, 0, 0, 0);
      if (v9)
      {
        uint64_t v10 = *((void *)v9 + 2);
        if (v10)
        {
          CA::Render::show_newline(a3);
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            int v11 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_184668000, v11, OS_LOG_TYPE_DEFAULT, "(source ", buf, 2u);
            }
          }
          (*(void (**)(uint64_t, CA::Render *, void))(*(void *)v10 + 40))(v10, a3, a4 | 4u);
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            float64x2_t v12 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)uint64_t v13 = 0;
              _os_log_impl(&dword_184668000, v12, OS_LOG_TYPE_DEFAULT, ")", v13, 2u);
            }
          }
        }
      }
      this = pthread_mutex_unlock(v8);
      if (atomic_fetch_add(v7 + 2, 0xFFFFFFFF) == 1) {
        return (*(uint64_t (**)(atomic_uint *))(*(void *)v7 + 16))(v7);
      }
    }
  }
  return this;
}

void CA::Render::Context::schedule_destroy(void)::$_0::__invoke(atomic_uint *a1)
{
  CA::Render::Context::destroy((CA::Render::Context *)a1);
  if (atomic_fetch_add(a1 + 2, 0xFFFFFFFF) == 1)
  {
    uint64_t v2 = *(void (**)(atomic_uint *))(*(void *)a1 + 16);
    v2(a1);
  }
}

uint64_t X::HashTable<unsigned int,CA::Render::Context *>::foreach(std::function<void ()(unsigned int,CA::Render::Context *)>)::{lambda(void *,void *,void *)#1}::__invoke(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int v6 = a1;
  uint64_t v5 = a2;
  uint64_t v3 = *(void *)(a3 + 24);
  if (!v3) {
    std::__throw_bad_function_call[abi:nn180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *, uint64_t *))(*(void *)v3 + 48))(v3, &v6, &v5);
}

uint64_t std::__throw_bad_function_call[abi:nn180100]()
{
  return std::__function::__func<CA::Render::Context::secure_mode_violations(void)::$_0,std::allocator<CA::Render::Context::secure_mode_violations(void)::$_0>,void ()(unsigned int,CA::Render::Context*)>::operator()();
}

void std::__function::__func<CA::Render::Context::secure_mode_violations(void)::$_0,std::allocator<CA::Render::Context::secure_mode_violations(void)::$_0>,void ()(unsigned int,CA::Render::Context*)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  if ((*(unsigned char *)(*a3 + 14) & 4) != 0)
  {
    unint64_t v4 = *(char ***)(a1 + 8);
    uint64_t v5 = (atomic_uint *)(v3 + 8);
    if (!atomic_fetch_add((atomic_uint *volatile)(v3 + 8), 1u))
    {
      uint64_t v3 = 0;
      atomic_fetch_add(v5, 0xFFFFFFFF);
    }
    uint64_t v7 = v4[1];
    unint64_t v6 = (unint64_t)v4[2];
    if ((unint64_t)v7 >= v6)
    {
      unsigned int v9 = *v4;
      uint64_t v10 = (v7 - *v4) >> 3;
      unint64_t v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 61) {
        abort();
      }
      uint64_t v12 = v6 - (void)v9;
      if (v12 >> 2 > v11) {
        unint64_t v11 = v12 >> 2;
      }
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v11;
      }
      if (v13)
      {
        if (v13 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v14 = (char *)operator new(8 * v13);
      }
      else
      {
        uint64_t v14 = 0;
      }
      uint64_t v15 = &v14[8 * v10];
      *(void *)uint64_t v15 = v3;
      uint64_t v8 = v15 + 8;
      if (v7 != v9)
      {
        do
        {
          uint64_t v16 = *((void *)v7 - 1);
          v7 -= 8;
          *((void *)v15 - 1) = v16;
          v15 -= 8;
        }
        while (v7 != v9);
        uint64_t v7 = *v4;
      }
      void *v4 = v15;
      v4[1] = v8;
      uint64_t v4[2] = &v14[8 * v13];
      if (v7) {
        operator delete(v7);
      }
    }
    else
    {
      *(void *)uint64_t v7 = v3;
      uint64_t v8 = v7 + 8;
    }
    v4[1] = v8;
  }
}

uint64_t std::__function::__func<CA::Render::Context::secure_mode_violations(void)::$_0,std::allocator<CA::Render::Context::secure_mode_violations(void)::$_0>,void ()(unsigned int,CA::Render::Context*)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ED030EF0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<CA::Render::Context::secure_mode_violations(void)::$_0,std::allocator<CA::Render::Context::secure_mode_violations(void)::$_0>,void ()(unsigned int,CA::Render::Context*)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_1ED030EF0;
  result[1] = v3;
  return result;
}

void std::__function::__func<CA::Render::Context::secure_mode_violations(void)::$_0,std::allocator<CA::Render::Context::secure_mode_violations(void)::$_0>,void ()(unsigned int,CA::Render::Context*)>::~__func()
{
}

void CA::Render::collect_insecure_process_ids(CA::Render *this, uint64_t a2, CA::Render::Context *a3, void *a4)
{
  if ((*(unsigned char *)(a2 + 14) & 4) != 0)
  {
    unsigned int v6 = atomic_load((unsigned int *)(a2 + 228));
    if (v6
      || (!*(_DWORD *)(a2 + 252) ? (pid_t v7 = getpid()) : (pid_t v7 = 0),
          (unsigned int v8 = 0, atomic_compare_exchange_strong((atomic_uint *volatile)(a2 + 228), &v8, v7), v8)
        ? (unsigned int v6 = v8)
        : (unsigned int v6 = v7),
          v6))
    {
      uint64_t v10 = (unsigned int *)*((void *)a3 + 1);
      unint64_t v9 = *((void *)a3 + 2);
      if ((unint64_t)v10 >= v9)
      {
        uint64_t v12 = *(unsigned int **)a3;
        uint64_t v13 = ((uint64_t)v10 - *(void *)a3) >> 2;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62) {
          abort();
        }
        uint64_t v15 = v9 - (void)v12;
        if (v15 >> 1 > v14) {
          unint64_t v14 = v15 >> 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v14;
        }
        if (v16)
        {
          if (v16 >> 62) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          uint64_t v17 = (char *)operator new(4 * v16);
        }
        else
        {
          uint64_t v17 = 0;
        }
        CFStringRef v18 = (unsigned int *)&v17[4 * v13];
        *CFStringRef v18 = v6;
        unint64_t v11 = v18 + 1;
        while (v10 != v12)
        {
          unsigned int v19 = *--v10;
          *--CFStringRef v18 = v19;
        }
        *(void *)a3 = v18;
        *((void *)a3 + 1) = v11;
        *((void *)a3 + 2) = &v17[4 * v16];
        if (v12) {
          operator delete(v12);
        }
      }
      else
      {
        *uint64_t v10 = v6;
        unint64_t v11 = v10 + 1;
      }
      *((void *)a3 + 1) = v11;
    }
    *(_DWORD *)(a2 + 12) &= ~0x40000u;
  }
}

void std::__hash_table<CA::Render::String *,std::hash<CA::Render::String *>,std::equal_to<CA::Render::String *>,std::allocator<CA::Render::String *>>::__emplace_unique_key_args<CA::Render::String *,CA::Render::String * const&>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v6 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v5 >> 47) ^ v5);
  unint64_t v7 = 0x9DDFEA08EB382D69 * (v6 ^ (v6 >> 47));
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v10 = 0x9DDFEA08EB382D69 * (v6 ^ (v6 >> 47));
      if (v7 >= v8) {
        unint64_t v10 = v7 % v8;
      }
    }
    else
    {
      unint64_t v10 = v7 & (v8 - 1);
    }
    unint64_t v11 = *(void **)(*(void *)a1 + 8 * v10);
    if (v11)
    {
      for (unint64_t i = (void *)*v11; i; unint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v7)
        {
          if (i[2] == a2) {
            return;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v13 >= v8) {
              v13 %= v8;
            }
          }
          else
          {
            v13 &= v8 - 1;
          }
          if (v13 != v10) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v10 = 0;
  }
  unint64_t v14 = operator new(0x18uLL);
  v14[1] = v7;
  void v14[2] = a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v10 = v7 % v8;
      }
      else {
        unint64_t v10 = v7;
      }
    }
    else
    {
      unint64_t v10 = (v8 - 1) & v7;
    }
  }
  uint64_t v21 = *(void *)a1;
  double v22 = *(void **)(*(void *)a1 + 8 * v10);
  if (v22)
  {
    *unint64_t v14 = *v22;
LABEL_38:
    *double v22 = v14;
    goto LABEL_39;
  }
  uint64_t v23 = *(void *)(a1 + 16);
  *unint64_t v14 = v23;
  *(void *)(a1 + 16) = v14;
  *(void *)(v21 + 8 * v10) = a1 + 16;
  if (v23)
  {
    unint64_t v24 = *(void *)(v23 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v24 >= v8) {
        v24 %= v8;
      }
    }
    else
    {
      v24 &= v8 - 1;
    }
    double v22 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
}

void ___ZN2CA6Render7Context19request_synchronizeEjijjb_block_invoke(uint64_t a1, void *a2)
{
}

void CA::Render::Context::set_client_annotation(CA::Render::Context *this, CFTypeRef cf)
{
  unint64_t v4 = (const void *)*((void *)this + 65);
  if (v4) {
    CFRelease(v4);
  }
  if (cf)
  {
    *((void *)this + 65) = cf;
    CFRetain(cf);
  }
  else
  {
    *((void *)this + 65) = 0;
  }
}

uint64_t CA::Render::Context::hit_test(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  char v2 = v1;
  unint64_t v4 = v3;
  unint64_t v6 = v5;
  v27[1024] = *MEMORY[0x1E4F143B8];
  bzero(v22, 0x448uLL);
  double v7 = v6[70];
  *(int32x2_t *)&long long buf = vmovn_s64(vcvtq_s64_f64(*v4));
  *((void *)&buf + 1) = 0x100000001;
  CA::Render::Update::Update((CA::Render::Update *)v22, v27, 0x2000uLL, v7, 0, 0, 0, 0, (const CA::Bounds *)&buf, 0);
  if (v22[0])
  {
    int v9 = byte_1EB2ACC2F;
    if (byte_1EB2ACC2F)
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        unint64_t v11 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf) = 67109120;
          DWORD1(buf) = v25;
          _os_log_impl(&dword_184668000, v11, OS_LOG_TYPE_DEFAULT, "HitTest: starting (%u)", (uint8_t *)&buf, 8u);
        }
      }
    }
    v26 |= 0x8014u;
    CA::Render::Update::add_context((CA::Render::Update *)v22, (CA::Render::Context *)v6);
    unint64_t v13 = v24;
    if (v24 == &v23)
    {
LABEL_15:
      uint64_t v10 = 0;
    }
    else
    {
      unsigned int v14 = 2 * (v2 & 1);
      while (1)
      {
        uint64_t v15 = CA::Render::LayerNode::hit_test_((uint64_t)v13, v4, v14, v12);
        if (v15) {
          break;
        }
LABEL_14:
        unint64_t v13 = (uint64_t *)v13[1];
        if (v13 == &v23) {
          goto LABEL_15;
        }
      }
      uint64_t v10 = v15;
      while (!*(void *)(*(void *)(v10 + 32) + 144))
      {
        uint64_t v10 = *(void *)(v10 + 88);
        if (!v10) {
          goto LABEL_14;
        }
      }
    }
    if (v9)
    {
      if (v10)
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          float v16 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v17 = *(void *)(*(void *)(*(void *)(*(void *)(v10 + 32) + 144) + 16) + 120);
            if (v17)
            {
              int v18 = *(_DWORD *)(v17 + 24);
              v17 += 28;
              if (!v18) {
                uint64_t v17 = 0;
              }
            }
            LODWORD(buf) = 136315138;
            *(void *)((char *)&buf + 4) = v17;
            _os_log_impl(&dword_184668000, v16, OS_LOG_TYPE_DEFAULT, "HitTest: got layer \"%s\"", (uint8_t *)&buf, 0xCu);
          }
        }
      }
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        unint64_t v19 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf) = 67109120;
          DWORD1(buf) = v25;
          _os_log_impl(&dword_184668000, v19, OS_LOG_TYPE_DEFAULT, "HitTest: ending (%u)", (uint8_t *)&buf, 8u);
        }
      }
    }
    if (v10) {
      uint64_t v10 = *(void *)(*(void *)(*(void *)(v10 + 32) + 144) + 16);
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  CA::Render::Update::~Update((CA::Render::Update *)v22, v8);
  return v10;
}

uint64_t CA::Render::Context::hit_test_context(uint64_t a1)
{
  uint64_t v1 = CA::Render::Context::hit_test(a1);
  if (!v1) {
    return 0;
  }
  char v2 = *(CA::Render::Handle **)(v1 + 144);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = CA::Render::Handle::retain_context(v2);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(unsigned int *)(v3 + 16);
  if (atomic_fetch_add((atomic_uint *volatile)(v3 + 8), 0xFFFFFFFF) == 1) {
    (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
  }
  return v4;
}

uint64_t CA::Render::Context::get_layer_renderer_info(CA::Render::Context *this, CA::Render::Object *a2, int a3, int *a4, unsigned int *a5, unsigned int *a6)
{
  uint64_t result = (uint64_t)CA::Render::Context::lookup_handle(this, a2, a3, 0, 0);
  if (result)
  {
    int v10 = *(_DWORD *)(result + 120);
    if (v10 >= *(_DWORD *)(result + 124)) {
      int v10 = *(_DWORD *)(result + 124);
    }
    if (v10 < 1)
    {
      return 0;
    }
    else
    {
      *a4 = *(_DWORD *)(result + 92) >> 28;
      *a5 = *(_DWORD *)(result + 92) & 0x1FFFF;
      *a6 = (*(_DWORD *)(result + 92) >> 17) & 0x7FF;
      return 1;
    }
  }
  return result;
}

void CA::Render::Context::order_relative(CA::Render::Context *this, int a2, int a3)
{
  keys[2] = *(void **)MEMORY[0x1E4F143B8];
  int valuePtr = a3;
  uint64_t v4 = (void **)MEMORY[0x1E4F1CFD0];
  if (!a2) {
    uint64_t v4 = (void **)MEMORY[0x1E4F1CFC8];
  }
  values = *v4;
  keys[0] = @"above";
  keys[1] = @"siblingId";
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF98];
  CFTypeRef cf = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF98], kCFNumberSInt32Type, &valuePtr);
  CFDictionaryRef v6 = CFDictionaryCreate(v5, (const void **)keys, (const void **)&values, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFRelease(cf);
  CA::Render::post_notification(8u, (unint64_t)this, (uint64_t)v6, 0);
  CFRelease(v6);
}

CA::Render::Object *CA::Render::Context::update_layer(CA::Render::Context *this, CA::Render::Object *a2)
{
  uint64_t result = CA::Render::Context::lookup_handle(this, a2, 0, 0, 0);
  if (result)
  {
    return CA::Render::Handle::set_update_flags(result, 7);
  }
  return result;
}

void CA::Render::Context::remove_all_animations(CA::Render::Context *this, CA::Render::Object *a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  char v2 = CA::Render::Context::lookup_handle(this, a2, 0, 0, 0);
  if (v2)
  {
    uint64_t v4 = v2;
    uint64_t v5 = *((void *)v2 + 6);
    if (v5)
    {
      if (!byte_1EB2ACBE7) {
        goto LABEL_4;
      }
      x_log_begin();
      if (x_log_hook_p())
      {
        uint64_t v8 = mach_absolute_time();
        CATimeWithHostTime(v8);
        x_log_();
      }
      else
      {
        int v9 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v10 = mach_absolute_time();
          double v11 = CATimeWithHostTime(v10);
          uint64_t v12 = *((void *)v4 + 3);
          if (v12) {
            LODWORD(v12) = *(_DWORD *)(v12 + 16);
          }
          uint64_t v13 = *((void *)v4 + 2);
          if (v13)
          {
            uint64_t v14 = *(void *)(v13 + 120);
            if (v14) {
              uint64_t v13 = v14 + 28;
            }
            else {
              uint64_t v13 = 0;
            }
          }
          *(_DWORD *)long long buf = 134218754;
          double v33 = v11;
          __int16 v34 = 1024;
          int v35 = v12;
          __int16 v36 = 2080;
          int v37 = (char *)v13;
          __int16 v38 = 2048;
          double v39 = v4;
          _os_log_impl(&dword_184668000, v9, OS_LOG_TYPE_DEFAULT, "%f %x \"%s\" (%p): removing all:\n", buf, 0x26u);
        }
      }
      for (uint64_t i = *((void *)v4 + 6); i; uint64_t i = *(void *)(i + 8))
      {
        float v16 = *(CA::Render **)i;
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          int v18 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            int v19 = *((_DWORD *)v16 + 20);
            int v20 = *((_DWORD *)v16 + 21);
            *(_DWORD *)long long buf = 134218496;
            double v33 = *(double *)&v16;
            __int16 v34 = 1024;
            int v35 = v19;
            __int16 v36 = 1024;
            LODWORD(v37) = v20;
            _os_log_impl(&dword_184668000, v18, OS_LOG_TYPE_DEFAULT, "%p (eval %u; frames %u):\n", buf, 0x18u);
          }
        }
        CA::Render::show_object(v16, v17);
      }
      uint64_t v31 = (void **)x_stream_pop_(0);
      uint64_t v21 = x_stream_get(v31);
      int v22 = 0;
LABEL_28:
      uint64_t v23 = 0;
      unint64_t v24 = &v21[v22];
      int v25 = -1;
      while (1)
      {
        if (v24[v23] == 10)
        {
          int v25 = v23;
        }
        else if (!v24[v23])
        {
          unsigned int v26 = v23;
LABEL_34:
          if (v25 <= -1 || v24[v26] == 0) {
            int v28 = v26;
          }
          else {
            int v28 = v25 + 1;
          }
          if (v28 >= 1)
          {
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              pid_t v29 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 136315650;
                if (v22) {
                  int v30 = "continued...\n";
                }
                else {
                  int v30 = "";
                }
                double v33 = *(double *)&v30;
                __int16 v34 = 1040;
                int v35 = v28;
                __int16 v36 = 2080;
                int v37 = &v21[v22];
                _os_log_impl(&dword_184668000, v29, OS_LOG_TYPE_DEFAULT, "%s%.*s", buf, 0x1Cu);
              }
            }
            v22 += v28;
            goto LABEL_28;
          }
          x_log_end_free_(v31);
          uint64_t v5 = *((void *)v4 + 6);
          if (!v5)
          {
LABEL_9:
            *((void *)v4 + 6) = 0;
            *((void *)v4 + 12) |= 0x10080003uLL;
            return;
          }
          do
          {
LABEL_4:
            if (BYTE9(xmmword_1EB2ACC10)) {
              kdebug_trace();
            }
            CA::Render::invalidate_animation(v4, *(Handle **)v5, v3);
            uint64_t v5 = *(void *)(v5 + 8);
          }
          while (v5);
          CFDictionaryRef v6 = (void *)*((void *)v4 + 6);
          if (v6)
          {
            do
            {
              double v7 = (void *)v6[1];
              free(v6);
              CFDictionaryRef v6 = v7;
            }
            while (v7);
          }
          goto LABEL_9;
        }
        ++v23;
        unsigned int v26 = 32512;
        if (v23 == 32512) {
          goto LABEL_34;
        }
      }
    }
  }
}

void CA::Render::Context::set_glitch_request(CA::Render::Context *this, double a2)
{
  if (CADeviceHasInternalBuild::once[0] != -1) {
    dispatch_once(CADeviceHasInternalBuild::once, &__block_literal_global_153);
  }
  if (CADeviceHasInternalBuild::internal)
  {
    double v4 = *((double *)this + 67);
    if (v4 < a2) {
      double v4 = a2;
    }
    *((double *)this + 67) = v4;
    uint64_t v5 = (int32x2_t *)CA::Render::Context::root_layer_handle(this);
    if (v5)
    {
      CA::Render::Context::invalidate(this, v5 + 14, v6);
    }
  }
}

CA::Render::Context *CA::Render::Context::add_remote_input_mach_time(CA::Render::Context *this, unint64_t a2)
{
  uint64_t result = (CA::Render::Context *)CA::Render::Context::retain_host_context(this);
  if (result)
  {
    uint64_t v5 = (atomic_uint *)result;
    uint64_t result = (CA::Render::Context *)CA::Render::Context::add_remote_input_mach_time(result, a2);
    if (atomic_fetch_add(v5 + 2, 0xFFFFFFFF) == 1)
    {
      CFDictionaryRef v6 = *(uint64_t (**)(atomic_uint *))(*(void *)v5 + 16);
      return (CA::Render::Context *)v6(v5);
    }
  }
  else
  {
    unint64_t v7 = *((void *)this + 59);
    if (v7 >= a2) {
      unint64_t v7 = a2;
    }
    *((void *)this + 59) = v7;
  }
  return result;
}

uint64_t CA::OGL::FilterSubclass::get_edge_info()
{
  return 0;
}

uint64_t CA::OGL::FilterSubclass::source_requirement(CA::OGL::FilterSubclass *this, const CA::Render::Filter *a2)
{
  return 3;
}

uint64_t CA::OGL::FilterSubclass::filter_alignment()
{
  return 0;
}

uint64_t CA::OGL::FilterSubclass::filter_flags()
{
  return 0;
}

uint64_t CA::OGL::FilterSubclass::render(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 96))(a1, a2, a3, a4, a5, a7);
}

uint64_t CA::OGL::anonymous namespace'::PageCurlFilter::render(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v95 = *MEMORY[0x1E4F143B8];
  uint64_t v94 = 0;
  long long v92 = 0u;
  long long v93 = 0u;
  memset(v91, 0, sizeof(v91));
  long long v89 = 0u;
  long long v90 = 0u;
  long long v88 = 0u;
  long long v86 = 0u;
  memset(v87, 0, sizeof(v87));
  memset(v85, 0, sizeof(v85));
  uint64_t v8 = *(void *)(a4 + 248);
  long long v83 = 0u;
  long long v84 = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  float64x2_t v79 = 0u;
  long long v80 = 0u;
  float64x2_t v77 = 0u;
  long long v78 = 0u;
  uint64_t v9 = *(void *)(a3 + 24);
  uint64_t v10 = *(double **)(v8 + 24);
  double v12 = *v10;
  double v11 = v10[1];
  double v14 = v10[4];
  double v13 = v10[5];
  *((double *)&v86 + 1) = *((double *)&v91[2] + 1) * *v10 + *(double *)&v91[3] * v14;
  v87[0].f64[0] = *((double *)&v91[2] + 1) * v11 + *(double *)&v91[3] * v13;
  v87[0].f64[1] = *((double *)&v91[3] + 1) * v12 + *(double *)&v92 * v14;
  v87[1].f64[0] = *((double *)&v91[3] + 1) * v11 + *(double *)&v92 * v13;
  CA::Mat4Impl::mat4_invert((CA::Mat4Impl *)&v77, (CA::Mat4Impl *)v10, v15);
  *(float64x2_t *)((char *)v85 + 8) = v77;
  *(_OWORD *)((char *)&v85[1] + 8) = v78;
  *(float64x2_t *)((char *)&v85[2] + 8) = v79;
  *(_OWORD *)((char *)&v85[3] + 8) = v80;
  *(_OWORD *)((char *)&v85[4] + 8) = v81;
  *(_OWORD *)((char *)&v85[5] + 8) = v82;
  *(_OWORD *)((char *)&v85[6] + 8) = v83;
  *(_OWORD *)((char *)&v85[7] + 8) = v84;
  int8x16_t v16 = (int8x16_t)vcgtq_f64((float64x2_t)vdupq_n_s64(0x3F50624DE0000000uLL), vabsq_f64(*(float64x2_t *)((char *)v87 + 8)));
  int32x2_t v17 = vmovn_s64((int64x2_t)v16);
  if ((v17.i32[0] | v17.i32[1]))
  {
    double v18 = vaddvq_f64(vmulq_f64(*(float64x2_t *)((char *)v87 + 8), *(float64x2_t *)((char *)v87 + 8)));
    *(float *)&double v18 = v18;
    *(float *)&double v18 = sqrtf(*(float *)&v18);
    *(int8x16_t *)((char *)v87 + 8) = vbicq_s8((int8x16_t)vcvtq_f64_f32((float32x2_t)vbsl_s8((int8x8_t)0x8000000080000000, (int8x8_t)vdup_lane_s32(*(int32x2_t *)&v18, 0), (int8x8_t)vcvt_f32_f64(*(float64x2_t *)((char *)v87 + 8)))), v16);
    *(float64x2_t *)((char *)&v91[2] + 8) = vmlaq_n_f64(vmulq_n_f64(v77, *((double *)&v86 + 1)), v79, v87[0].f64[0]);
    *((double *)&v91[3] + 1) = -*(double *)&v91[3];
    *(void *)&long long v92 = *((void *)&v91[2] + 1);
    *((double *)&v86 + 1) = *((double *)&v91[2] + 1) * v12 + *(double *)&v91[3] * v14;
    v87[0].f64[0] = *((double *)&v91[2] + 1) * v11 + *(double *)&v91[3] * v13;
  }
  int v19 = *(unsigned int **)(a2 + 40);
  LOBYTE(v85[0]) = CA::Render::KeyValueArray::get_float_key((CA::Render::KeyValueArray *)v19, 297, 1.0) != 0.0;
  BYTE1(v85[0]) = CA::Render::KeyValueArray::get_float_key((CA::Render::KeyValueArray *)v19, 281, 1.0) != 0.0;
  int32x4_t v22 = *(int32x4_t *)(v9 + 64);
  int32x4_t v75 = v22;
  uint64_t v23 = *(void *)(v9 + 80);
  uint64_t v24 = *(void *)(v9 + 88);
  int v25 = *(_DWORD *)(a5 + 40);
  int v26 = *(_DWORD *)(a5 + 44);
  if (v25 <= v26) {
    int v27 = *(_DWORD *)(a5 + 44);
  }
  else {
    int v27 = *(_DWORD *)(a5 + 40);
  }
  v22.i32[0] = 1073741822;
  v21.i32[0] = v27;
  int8x16_t v28 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v21, v22), 0);
  uint64_t v29 = *(void *)(a5 + 32);
  v30.i64[0] = (int)v29;
  v30.i64[1] = SHIDWORD(v29);
  double v31 = (double)v25;
  int8x16_t v32 = vbslq_s8(v28, (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v30));
  double v33 = 1.79769313e308;
  if (v27 > 1073741822) {
    double v31 = 1.79769313e308;
  }
  int8x16_t v72 = v32;
  double v73 = v31;
  if (v27 <= 1073741822) {
    double v33 = (double)v26;
  }
  double v74 = v33;
  *(double *)v34.i64 = v31;
  *(double *)&v34.i64[1] = v33;
  v76[0] = v32;
  v76[1] = v34;
  CA::Mat4Impl::mat4_apply_to_rect(&v77, v76, v20);
  *(int32x4_t *)((char *)&v85[8] + 8) = v75;
  *((void *)&v85[9] + 1) = v23;
  *(void *)&v85[10] = v24;
  *(int8x16_t *)((char *)&v85[10] + 8) = v72;
  *((double *)&v85[11] + 1) = v73;
  *(double *)&long long v86 = v74;
  _D0 = *(double *)v91 * -0.5 + 1.0;
  __asm { FCVT            H0, D0 }
  uint64_t v40 = 0x100010001 * LODWORD(_D0);
  uint64_t v41 = v40 | 0x3C00000000000000;
  if (v19)
  {
    uint64_t v42 = v19[4];
    if (v42)
    {
      uint64_t v43 = 0;
      while (1)
      {
        uint64_t v44 = *(void *)&v19[2 * v43 + 6];
        if (*(_DWORD *)(v44 + 16) == 296) {
          break;
        }
        if (v42 == ++v43) {
          goto LABEL_21;
        }
      }
      if ((v43 & 0x80000000) == 0 && *(void *)(v44 + 24))
      {
        unsigned int v46 = bswap32(CA::Render::KeyValueArray::get_color_key((CA::Render::KeyValueArray *)v19, 296, 0xFFFFFFFFLL));
        v47.i32[0] = v46;
        v47.i32[1] = v46 >> 8;
        v47.i32[2] = HIWORD(v46);
        v48.i64[0] = 0xFF000000FFLL;
        v48.i64[1] = 0xFF000000FFLL;
        int32x4_t v49 = (int32x4_t)vandq_s8(v47, v48);
        v49.i32[3] = vshrq_n_u32((uint32x4_t)vdupq_n_s32(v46), 0x18uLL).i32[3];
        uint64_t v41 = (uint64_t)vcvt_f16_f32(vmulq_f32(vcvtq_f32_s32(v49), (float32x4_t)vdupq_n_s32(0x3B808081u)));
      }
LABEL_21:
      *(void *)&v87[1].f64[1] = v41;
      uint64_t v50 = 0;
      while (1)
      {
        uint64_t v51 = *(void *)&v19[2 * v50 + 6];
        if (*(_DWORD *)(v51 + 16) == 279) {
          break;
        }
        if (v42 == ++v50)
        {
          float16x4_t v52 = (float16x4_t)0x3AFF3AFF3AFF3AFFLL;
          goto LABEL_37;
        }
      }
      float16x4_t v52 = (float16x4_t)0x3AFF3AFF3AFF3AFFLL;
      if ((v50 & 0x80000000) == 0 && *(void *)(v51 + 24))
      {
        unsigned int v62 = bswap32(CA::Render::KeyValueArray::get_color_key((CA::Render::KeyValueArray *)v19, 279, 0xFFFFFFFFLL));
        v63.i32[0] = v62;
        v63.i32[1] = v62 >> 8;
        v63.i32[2] = HIWORD(v62);
        v64.i64[0] = 0xFF000000FFLL;
        v64.i64[1] = 0xFF000000FFLL;
        int32x4_t v65 = (int32x4_t)vandq_s8(v63, v64);
        v65.i32[3] = vshrq_n_u32((uint32x4_t)vdupq_n_s32(v62), 0x18uLL).i32[3];
        float16x4_t v52 = vcvt_f16_f32(vmulq_f32(vcvtq_f32_s32(v65), (float32x4_t)vdupq_n_s32(0x3B808081u)));
      }
LABEL_37:
      float16x4_t v53 = (float16x4_t)0x3C00356534743434;
      *((float16x4_t *)&v88 + 1) = v52;
      uint64_t v66 = 0;
      while (1)
      {
        uint64_t v67 = *(void *)&v19[2 * v66 + 6];
        if (*(_DWORD *)(v67 + 16) == 280) {
          break;
        }
        if (v42 == ++v66) {
          goto LABEL_25;
        }
      }
      if ((v66 & 0x80000000) == 0 && *(void *)(v67 + 24))
      {
        unsigned int v68 = bswap32(CA::Render::KeyValueArray::get_color_key((CA::Render::KeyValueArray *)v19, 280, 0xFFFFFFFFLL));
        v69.i32[0] = v68;
        v69.i32[1] = v68 >> 8;
        v69.i32[2] = HIWORD(v68);
        v70.i64[0] = 0xFF000000FFLL;
        v70.i64[1] = 0xFF000000FFLL;
        int32x4_t v71 = (int32x4_t)vandq_s8(v69, v70);
        v71.i32[3] = vshrq_n_u32((uint32x4_t)vdupq_n_s32(v68), 0x18uLL).i32[3];
        float16x4_t v53 = vcvt_f16_f32(vmulq_f32(vcvtq_f32_s32(v71), (float32x4_t)vdupq_n_s32(0x3B808081u)));
      }
    }
    else
    {
      *(void *)&v87[1].f64[1] = v40 | 0x3C00000000000000;
      float16x4_t v53 = (float16x4_t)0x3C00356534743434;
      *((void *)&v88 + 1) = 0x3AFF3AFF3AFF3AFFLL;
    }
LABEL_25:
    float16x4_t v45 = (float16x4_t)0x3C002E462A870000;
    *(float16x4_t *)&long long v89 = v53;
    uint64_t v54 = v19[4];
    if (v54)
    {
      uint64_t v55 = 0;
      while (1)
      {
        uint64_t v56 = *(void *)&v19[2 * v55 + 6];
        if (*(_DWORD *)(v56 + 16) == 316) {
          break;
        }
        if (v54 == ++v55) {
          goto LABEL_33;
        }
      }
      if ((v55 & 0x80000000) == 0 && *(void *)(v56 + 24))
      {
        unsigned int v57 = bswap32(CA::Render::KeyValueArray::get_color_key((CA::Render::KeyValueArray *)v19, 316, 0xFFFFFFFFLL));
        v58.i32[0] = v57;
        v58.i32[1] = v57 >> 8;
        v58.i32[2] = HIWORD(v57);
        v59.i64[0] = 0xFF000000FFLL;
        v59.i64[1] = 0xFF000000FFLL;
        int32x4_t v60 = (int32x4_t)vandq_s8(v58, v59);
        v60.i32[3] = vshrq_n_u32((uint32x4_t)vdupq_n_s32(v57), 0x18uLL).i32[3];
        float16x4_t v45 = vcvt_f16_f32(vmulq_f32(vcvtq_f32_s32(v60), (float32x4_t)vdupq_n_s32(0x3B808081u)));
      }
    }
  }
  else
  {
    float16x4_t v45 = (float16x4_t)0x3C002E462A870000;
    *(void *)&v87[1].f64[1] = v41;
    *((void *)&v88 + 1) = 0x3AFF3AFF3AFF3AFFLL;
    *(void *)&long long v89 = 0x3C00356534743434;
  }
LABEL_33:
  *(void *)&long long v88 = 0x3C003C003C003C00;
  BYTE8(v89) = 1;
  *(float16x4_t *)&long long v90 = v45;
  *((void *)&v90 + 1) = 0x3FF0000000000000;
}

void CA::OGL::anonymous namespace'::curl_filter_get_in_state(CA::Render::KeyValueArray *a1, float64x2_t *a2, uint64_t a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  double float_key = CA::Render::KeyValueArray::get_float_key(a1, 319, 0.0);
  double v7 = 1.0;
  BOOL v8 = float_key > 1.0 || float_key < 0.0;
  if (float_key < 0.0 && float_key <= 1.0) {
    double v7 = 0.0;
  }
  if (v8) {
    double float_key = v7;
  }
  *(double *)a3 = float_key;
  double v9 = CA::Render::KeyValueArray::get_float_key(a1, 277, 0.0);
  *(double *)(a3 + 8) = v9;
  *(double *)(a3 + 16) = CA::Render::KeyValueArray::get_float_key(a1, 310, 100.0);
  double v10 = CA::Render::KeyValueArray::get_float_key(a1, 318, 0.0);
  *(double *)(a3 + 24) = v10;
  double v11 = CA::Render::KeyValueArray::get_float_key(a1, 294, 3.14159265);
  if (v11 < v10) {
    double v11 = v10;
  }
  *(double *)(a3 + 32) = v11;
  float v12 = v9;
  __float2 v13 = __sincosf_stret(v12);
  double cosval = v13.__cosval;
  if (fabs(v13.__cosval) < 0.001 || (double sinval = v13.__sinval, fabs(v13.__sinval) < 0.001))
  {
    double cosval = roundf(v13.__cosval);
    double sinval = roundf(v13.__sinval);
  }
  float64x2_t v16 = a2[4];
  float64x2_t v17 = a2[5];
  double v18 = a2[5].f64[1];
  if (v17.f64[0] <= v18) {
    double v19 = a2[5].f64[1];
  }
  else {
    double v19 = a2[5].f64[0];
  }
  if (v19 < 1.79769313e308)
  {
    if (v17.f64[0] < v18) {
      double v18 = a2[5].f64[0];
    }
    if (v18 > 0.0)
    {
      __asm
      {
        FMOV            V4.2D, #1.0
        FMOV            V5.2D, #-2.0
      }
      int8x16_t v26 = (int8x16_t)vaddq_f64(v17, _Q5);
      *(int32x2_t *)&_Q5.f64[0] = vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vclezq_f64((float64x2_t)v26)));
      float64x2_t v16 = vaddq_f64(v16, _Q4);
      *(int32x2_t *)&_Q4.f64[0] = vdup_lane_s32((int32x2_t)vand_s8(*(int8x8_t *)&_Q5.f64[0], (int8x8_t)vdup_lane_s32(*(int32x2_t *)&_Q5.f64[0], 1)), 0);
      v27.i64[0] = SLODWORD(_Q4.f64[0]);
      v27.i64[1] = SHIDWORD(_Q4.f64[0]);
      float64x2_t v17 = (float64x2_t)vandq_s8(v26, v27);
    }
  }
  *(double *)(a3 + 40) = cosval;
  *(double *)(a3 + 48) = sinval;
  *(double *)(a3 + 56) = -sinval;
  *(double *)(a3 + 64) = cosval;
  CA::Render::KeyValueArray::get_rect_key(v29, (uint64_t)a1, (const Rect *)0x13B, v16, v17);
  float64x2_t v28 = v29[1];
  *(float64x2_t *)(a3 + 72) = v29[0];
  *(float64x2_t *)(a3 + 88) = v28;
}

uint64_t CA::OGL::anonymous namespace'::curl_render(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  v522 = v1;
  uint64_t v526 = v2;
  uint64_t v4 = v3;
  CFDictionaryRef v6 = v5;
  uint64_t v8 = v7;
  uint64_t v654 = *MEMORY[0x1E4F143B8];
  bzero(v653, 0xCC0uLL);
  bzero(v652, 0xCC0uLL);
  bzero(v651, 0xCC0uLL);
  bzero(v650, 0xCC0uLL);
  bzero(v649, 0xCC0uLL);
  bzero(v648, 0xCC0uLL);
  bzero(v647, 0x4A40uLL);
  bzero(v646, 0x4A40uLL);
  bzero(v643, 0x240uLL);
  bzero(v642, 0x8700uLL);
  v641[1] = 0;
  v641[0] = 0;
  bzero(v640, 0x26A0uLL);
  bzero(v639, 0x26A0uLL);
  bzero(v638, 0x26A0uLL);
  float v12 = *(float16x4_t **)(v8 + 248);
  memset(v637, 0, sizeof(v637));
  memset(v636, 0, sizeof(v636));
  float32x4_t v13 = vcvtq_f32_f16(v12[4]);
  float32x4_t v14 = vmulq_f32(v13, vcvtq_f32_f16(*(float16x4_t *)(v4 + 232)));
  float32x4_t v15 = vmulq_f32(v13, vcvtq_f32_f16(*(float16x4_t *)(v4 + 240)));
  float32x4_t v16 = vmulq_f32(v13, vcvtq_f32_f16(*(float16x4_t *)(v4 + 256)));
  float32x4_t v17 = vmulq_f32(v13, vcvtq_f32_f16(*(float16x4_t *)(v4 + 248)));
  float32x4_t v18 = vmulq_f32(v13, vcvtq_f32_f16(*(float16x4_t *)(v4 + 272)));
  double v19 = v6[7];
  double v20 = v6[8];
  double v21 = *(double *)(v4 + 216);
  v22.i64[0] = *(void *)(v4 + 224);
  _NF = v21 < 0.0;
  double v24 = 0.449999988;
  double v598 = v21;
  if (v21 != 0.0) {
    double v21 = 0.449999988;
  }
  if (_NF) {
    double v21 = -v21;
  }
  double v589 = v21;
  double v26 = *(double *)(v4 + 184);
  double v25 = *(double *)(v4 + 192);
  double v27 = 0.0;
  if (_NF) {
    double v28 = 0.0;
  }
  else {
    double v28 = *(double *)(v4 + 192);
  }
  if (_NF) {
    double v29 = *(double *)(v4 + 192);
  }
  else {
    double v29 = 0.0;
  }
  if (_NF) {
    double v30 = *(double *)(v4 + 184);
  }
  else {
    double v30 = 0.0;
  }
  if (_NF) {
    double v31 = 0.0;
  }
  else {
    double v31 = *(double *)(v4 + 184);
  }
  BOOL v32 = *(double *)v22.i64 <= 0.0;
  double v596 = *(double *)(v4 + 224);
  if (*(double *)v22.i64 == 0.0) {
    double v24 = *(double *)(v4 + 224);
  }
  if (*(double *)v22.i64 <= 0.0) {
    double v24 = -v24;
  }
  double v602 = v24;
  if (*(double *)v22.i64 > 0.0) {
    double v33 = 0.0;
  }
  else {
    double v33 = *(double *)(v4 + 184);
  }
  double v35 = *(double *)(v4 + 168);
  double v34 = *(double *)(v4 + 176);
  double v572 = v33;
  *(double *)&long long v11 = v33 + v35;
  double v576 = v28;
  double v36 = v28 + v34;
  if (v32) {
    double v26 = 0.0;
  }
  double v564 = v30 + v35;
  if (v32) {
    double v37 = *(double *)(v4 + 192);
  }
  else {
    double v37 = 0.0;
  }
  double v562 = v31 + v35;
  if (v32) {
    double v25 = 0.0;
  }
  double v39 = *(double *)(v4 + 136);
  double v38 = *(double *)(v4 + 144);
  double v40 = *(double *)(v4 + 152);
  if (v20 > 0.0) {
    double v41 = 0.0;
  }
  else {
    double v41 = *(double *)(v4 + 152);
  }
  if (v20 <= 0.0) {
    double v40 = 0.0;
  }
  if (v19 < 0.0) {
    double v42 = 0.0;
  }
  else {
    double v42 = *(double *)(v4 + 160);
  }
  if (v19 < 0.0) {
    double v27 = *(double *)(v4 + 160);
  }
  double v566 = v36;
  long long v568 = v11;
  *(double *)v22.i64 = *(double *)(v4 + 128) + *(double *)(v4 + 32) * *(double *)&v11 + *(double *)(v4 + 64) * v36;
  double v44 = v6[2];
  double v43 = v6[3];
  double v45 = v41 + v39;
  *(double *)v10.i64 = v40 + v39;
  double v46 = v42 + v38;
  double v47 = v27 + v38;
  double v48 = fmax(v43, 1.57079633);
  double v49 = v6[5];
  uint64_t v50 = *((uint64_t *)v6 + 6);
  if (fabs(*(double *)v22.i64 + -1.0) >= 0.000001)
  {
    if (*(double *)v22.i64 <= 0.0) {
      v22.i64[0] = 0x7FF0000000000000;
    }
    else {
      *(double *)v22.i64 = 1.0 / *(double *)v22.i64;
    }
  }
  uint64_t v51 = 0;
  int v549 = *(unsigned __int8 *)(v4 + 264);
  float16x4_t v52 = vcvt_f16_f32(v14);
  float16x4_t v519 = vcvt_f16_f32(v15);
  float16x4_t v53 = vcvt_f16_f32(v16);
  float16x4_t v527 = vcvt_f16_f32(v17);
  float16x4_t v514 = vcvt_f16_f32(v18);
  double v54 = v6[4];
  double v556 = *(double *)(v4 + 200);
  double v554 = *(double *)(v4 + 208);
  double v552 = 1.0 / v598;
  long long v635 = 0uLL;
  memset(v634, 0, sizeof(v634));
  float64x2_t v55 = *(float64x2_t *)(v4 + 40);
  v56.i64[1] = *((void *)&v568 + 1);
  float64x2_t v57 = vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(*(float64x2_t *)(v4 + 104), *(float64x2_t *)(v4 + 8), *(double *)&v568), v55, v36), *(double *)v22.i64);
  double v58 = v57.f64[1];
  double v524 = (1.57079633 - v43) * v44;
  double v59 = *(double *)v10.i64 - v57.f64[0];
  *(double *)v56.i64 = v47 - v57.f64[1];
  *(float *)v10.i32 = v48;
  float v60 = v43;
  *(double *)v10.i64 = (v43
                      + (float)((float)((float)((float)((float)((float)(*(float *)v10.i32 * *(float *)v10.i32)
                                                              * 0.0054654)
                                                      + -0.15346)
                                              * (float)(*(float *)v10.i32 * *(float *)v10.i32))
                                      + 0.98442)
                              * *(float *)v10.i32)
                      - ((float)((float)((float)((float)((float)((float)(v60 * v60) * 0.0054654) + -0.15346)
                                               * (float)(v60 * v60))
                                       + 0.98442)
                               * v60)
                       + 1.57079633))
                     * v44;
  double v61 = *(double *)v10.i64 + v59 * v49 + *(double *)v56.i64 * *(double *)&v50;
  double v62 = v26 - v572;
  v56.i32[1] = HIDWORD(v576);
  double v63 = v29 - v576;
  *(float *)v56.i32 = v589;
  *(float *)v10.i32 = v62;
  v64.i64[0] = 0x8000000080000000;
  v64.i64[1] = 0x8000000080000000;
  *(double *)v56.i64 = *(float *)vbslq_s8(v64, v56, v10).i32;
  v10.i32[1] = HIDWORD(v602);
  *(float *)v10.i32 = v602;
  *(float *)v22.i32 = v63;
  double v65 = *(float *)vbslq_s8(v64, v10, v22).i32;
  v633[0] = v62 + *(double *)v56.i64;
  v633[1] = v63 + v65;
  v633[4] = -*(double *)v56.i64;
  v633[5] = v63 + v65;
  v633[2] = v62 - *(double *)v56.i64;
  v633[3] = v63 - v65;
  v633[6] = *(double *)v56.i64;
  v633[7] = v63 - v65;
  double v546 = v564 + v589;
  v633[10] = v62 - *(double *)v56.i64;
  v633[8] = v62 + *(double *)v56.i64;
  double v66 = *v6;
  double v67 = v61 - -(v524 + (v57.f64[0] - v45) * v49 - (v46 - v57.f64[1]) * *(double *)&v50);
  v633[9] = -v65;
  v633[11] = v65;
  v633[12] = *(double *)v56.i64;
  v633[13] = v65;
  v633[14] = -*(double *)v56.i64;
  v633[15] = -v65;
  unsigned int v68 = (const double *)(v4 + 16);
  long long v69 = *(_OWORD *)(v4 + 8);
  float64x2_t v70 = (float64x2_t)vdupq_lane_s64(*(void *)(v4 + 40), 0);
  float64x2_t v71 = vld1q_dup_f64(v68);
  float64x2_t v72 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v55, 1);
  float64x2_t v73 = (float64x2_t)vdupq_lane_s64(v50, 0);
  double v74 = v633;
  do
  {
    float64x2x2_t v655 = vld2q_f64(v74);
    v74 += 4;
    *(float64x2_t *)&v634[v51] = vmlaq_f64(vmulq_n_f64(vmlaq_f64(vmulq_n_f64(v655.val[0], *(double *)&v69), v70, v655.val[1]), v49), v73, vmlaq_f64(vmulq_f64(v655.val[0], v71), v72, v655.val[1]));
    v51 += 2;
  }
  while (v51 != 8);
  double v541 = v37 + v34 + v602;
  double v543 = v37 + v34;
  double v75 = *(double *)&v635;
  double v76 = *(double *)&v634[1];
  for (uint64_t i = 1; i != 8; ++i)
  {
    double v78 = *(double *)&v634[i];
    uint64_t v79 = i;
    while (1)
    {
      uint64_t v80 = v79 - 1;
      double v81 = *(double *)&v634[(v79 - 1)];
      if (v78 <= v81) {
        break;
      }
      *(double *)&v634[v79--] = v81;
      if (v80 + 1 <= 1)
      {
        LODWORD(v79) = 0;
        break;
      }
    }
    *(double *)&v634[(int)v79] = v78;
  }
  double v559 = v25 + v34;
  double v82 = v67 * v66 - (v524 + (v57.f64[0] - v45) * v49 - (v46 - v57.f64[1]) * *(double *)&v50);
  double v83 = v82 + (1.57079633 - v48) * v44;
  double v84 = v48 - v43;
  double v85 = v54 - v48;
  if (v48 - v43 <= v54 - v48) {
    double v86 = v54 - v48;
  }
  else {
    double v86 = v48 - v43;
  }
  double v87 = v44 * 0.0833333333 * v86;
  if (v87 == 0.0)
  {
    v636[1] = v82 + (1.57079633 - v48) * v44;
    v636[0] = v636[1];
    int v88 = 2;
  }
  else
  {
    double v89 = v82 + v524;
    if (v76 < v82 + v524) {
      double v89 = v76;
    }
    double v90 = v82 + (1.57079633 - v54) * v44;
    if (v75 > v90) {
      double v90 = v75;
    }
    float v91 = (v83 - v89) / v87;
    int v92 = (int)fmaxf(floorf(v91), -12.0);
    float v93 = (v83 - v90) / v87;
    int v94 = (int)fminf(ceilf(v93), 12.0);
    if (v92 <= v94)
    {
      int v88 = 0;
      int v95 = v94 + 1;
      do
      {
        double v96 = v83 - v87 * (float)v92;
        if (v89 < v96) {
          double v96 = v89;
        }
        if (v90 > v96) {
          double v96 = v90;
        }
        if (v92 > 0 || (v636[v88] = v96, ++v88, (v92 & 0x80000000) == 0)) {
          v636[v88++] = v96;
        }
        ++v92;
      }
      while (v95 != v92);
    }
    else
    {
      int v88 = 0;
    }
  }
  double v583 = v43;
  uint64_t v97 = 0;
  int v98 = 0;
  int v99 = 0;
  BOOL v100 = v88 > 0;
  double v551 = 1.0 / v596;
  do
  {
    if (v98 == 8)
    {
      double v101 = v636[v99];
    }
    else
    {
      if (!v100)
      {
        double v102 = *(double *)&v634[v98];
LABEL_81:
        ++v98;
        double v101 = v102;
        goto LABEL_82;
      }
      double v101 = v636[v99];
      double v102 = *(double *)&v634[v98];
      if (v101 <= v102) {
        goto LABEL_81;
      }
    }
    ++v99;
LABEL_82:
    v637[v97++] = v101;
    BOOL v100 = v99 < v88;
  }
  while (v99 < v88 || v98 < 8);
  uint64_t v103 = 0;
  unsigned int v104 = 1;
  do
  {
    double v105 = v637[v103++];
    v104 += 2;
  }
  while (v105 > v83 && v103 < (int)v97);
  uint64_t v107 = 0;
  unsigned int v108 = v104 - 1;
  do
  {
    int v109 = v107;
    double v110 = v637[v107++];
  }
  while (v110 > v76);
  LODWORD(v111) = v88 + 7;
  if (v109 <= (int)v111) {
    int v112 = v111;
  }
  else {
    int v112 = v109;
  }
  if ((int)v107 - 1 <= (int)v111) {
    uint64_t v111 = v111;
  }
  else {
    uint64_t v111 = (v107 - 1);
  }
  uint64_t v113 = v111 + 1;
  v578 = (unsigned char *)v4;
  double v531 = 1.0 / v19;
  double v593 = *(double *)&v50;
  double v594 = v49;
  double v587 = v57.f64[0];
  double v591 = v67 * v66 - (v524 + (v57.f64[0] - v45) * v49 - (v46 - v57.f64[1]) * *(double *)&v50);
  double v515 = v66;
  unsigned int v528 = v109;
  v520 = v6;
  v521 = v12;
  double v579 = v44;
  double v585 = v54;
  double v530 = 1.0 / v20;
  double v517 = v84;
  double v512 = v85;
  double v513 = v83;
  while (v113 != v107)
  {
    int v114 = v107;
    double v115 = v637[v107++];
    if (v115 < v75)
    {
      int v112 = v114 - 1;
      break;
    }
  }
  unsigned int v529 = v103;
  unsigned int v523 = v112;
  int v116 = v112 - v103;
  if (v112 < (int)v103) {
    int v116 = -1;
  }
  int v516 = v116;
  int v518 = v116 + 1;
  int v525 = v97;
  double v582 = v19;
  double v580 = v20;
  if ((int)v97 >= 1)
  {
    unint64_t v117 = 0;
    BOOL v118 = COERCE_UNSIGNED_INT64(fabs(1.0 / v598)) > 0x7FEFFFFFFFFFFFFFLL;
    float32x4_t v533 = vcvtq_f32_f16(v53);
    float32x4_t v535 = vcvtq_f32_f16(v527);
    float16x4_t v119 = v52;
    double v532 = 1.0 / (fabs(v556 / v554) + 1.0);
    uint64_t v120 = v97;
    uint64_t v121 = (v97 - 1);
    do
    {
      double v122 = v58;
      v608[0] = 0.0;
      double v123 = v637[v117];
      double v124 = v123 * v556;
      double v125 = v123 * v556 + *(double *)&v568;
      double v126 = v123 * v554 + v566;
      BOOL v127 = (v541 - v126) * v551 > (v546 - v125) * v552
          && COERCE_UNSIGNED_INT64(fabs(1.0 / v596)) <= 0x7FEFFFFFFFFFFFFFLL;
      if (v127 || v118) {
        double v128 = (v541 - v126) * v551;
      }
      else {
        double v128 = (v546 - v125) * v552;
      }
      BOOL v129 = (v559 - (v602 + v126)) * v551 < (v562 - (v589 + v125)) * v552
          && COERCE_UNSIGNED_INT64(fabs(1.0 / v596)) <= 0x7FEFFFFFFFFFFFFFLL;
      if (v129 || v118) {
        double v130 = (v559 - (v602 + v126)) * v551;
      }
      else {
        double v130 = (v562 - (v589 + v125)) * v552;
      }
      double v131 = (v564 - (v589 + v125)) * v552;
      double v132 = (v562 + v589 - v125) * v552;
      BOOL v133 = (v543 - (v602 + v126)) * v551 > v131 && COERCE_UNSIGNED_INT64(fabs(1.0 / v596)) <= 0x7FEFFFFFFFFFFFFFLL;
      if (v133 || v118) {
        double v134 = (v543 - (v602 + v126)) * v551;
      }
      else {
        double v134 = v131;
      }
      double v135 = (v559 + v602 - v126) * v551;
      BOOL v136 = v135 < v132 && COERCE_UNSIGNED_INT64(fabs(1.0 / v596)) <= 0x7FEFFFFFFFFFFFFFLL;
      if (v136 || v118) {
        double v137 = v135;
      }
      else {
        double v137 = v132;
      }
      double v139 = v608[0];
      if (v549)
      {
        double v140 = v608[0] * 2.5 + -1.50000006;
        if (v140 > 1.0) {
          double v140 = 1.0;
        }
        if (v140 < 0.0) {
          double v140 = 0.0;
        }
        double v141 = v587;
        if (v140 <= 0.754999995) {
          double v139 = (v140 * 0.375 + 0.349999994) * v140;
        }
        else {
          double v139 = (v140 + -0.819999993) * (v140 + -0.819999993) * 15.0 + 0.400000006;
        }
      }
      else
      {
        double v141 = v587;
      }
      double v142 = v123 * v554 + v576;
      double v143 = v123 + v138;
      double v144 = v141 + v143 * v594;
      double v58 = v122;
      double v145 = v122 + v143 * v593;
      float v146 = v139;
      float16x4_t v147 = vcvt_f16_f32(vmlaq_n_f32(vmulq_n_f32(v535, 1.0 - v146), v533, v146));
      BOOL v149 = v117 < v528 || v117 > v523;
      double v150 = v134 + (v137 - v134) * v532;
      if (v149) {
        double v151 = v134 + (v137 - v134) * v532;
      }
      else {
        double v151 = v128;
      }
      if (!v149) {
        double v150 = v130;
      }
      if (v117) {
        _ZF = v121 == v117;
      }
      else {
        _ZF = 1;
      }
      uint64_t v153 = (uint64_t)v147;
      if (_ZF)
      {
        uint64_t v153 = 0;
        uint64_t v154 = 0;
      }
      else
      {
        uint64_t v154 = (uint64_t)v119;
      }
      if (v117 < v529) {
        uint64_t v153 = v154;
      }
      uint64_t v607 = v153;
      float v155 = v134;
      float v156 = v137;
      float v157 = v151;
      float v158 = v150;
      double v19 = v582;
      double v20 = v580;
    }
    while (v120 != v117);
  }
  int v159 = v578[1];
  unsigned int v590 = 2 * v518;
  double v160 = v579;
  double v161 = v585;
  int v162 = v525;
  if (v578[1])
  {
    uint64_t v163 = 2 * v529;
    memcpy(&v650[3 * v163], &v653[3 * v163], 48 * (int)v590);
    if ((v516 & 0x80000000) == 0)
    {
      LODWORD(v164) = v523 - v529;
      if ((int)(v523 - v529) < 0) {
        uint64_t v164 = 0xFFFFFFFFLL;
      }
      else {
        uint64_t v164 = v164;
      }
      uint64_t v165 = v164 + 1;
      do
      {
        *(float16x4_t *)&v650[3 * v104 - 1] = v519;
        *(float16x4_t *)&v650[3 * v104 + 2] = v519;
        v104 += 2;
        --v165;
      }
      while (v165);
    }
    __asm { FCMP            H0, #0 }
    if (_ZF)
    {
      memcpy(&v649[3 * v163], &v652[3 * v163], 48 * (int)(2 * (v525 - v529)));
      memcpy(&v648[3 * v163], &v651[3 * v163], 48 * (int)(2 * (v525 - v529)));
      if (v525 > (int)v529)
      {
        int v169 = v529;
        do
        {
          *(float16x4_t *)&v649[3 * v108 + 5] = v519;
          *(float16x4_t *)&v648[3 * v108 + 2] = v519;
          ++v169;
          v108 += 2;
        }
        while (v169 < v525);
      }
    }
  }
  double v170 = v520[9];
  double v171 = v520[10];
  if (v19 < 0.0) {
    double v172 = 0.0;
  }
  else {
    double v172 = v520[12];
  }
  if (v19 < 0.0) {
    double v173 = v520[12];
  }
  else {
    double v173 = 0.0;
  }
  if (v19 >= 0.0) {
    double v174 = 0.0;
  }
  else {
    double v174 = v520[11];
  }
  if (v19 >= 0.0) {
    double v175 = v520[11];
  }
  else {
    double v175 = 0.0;
  }
  BOOL v176 = v20 <= 0.0;
  if (v20 > 0.0) {
    double v177 = 0.0;
  }
  else {
    double v177 = v520[11];
  }
  double v178 = v177 + v170;
  double v179 = v172 + v171;
  if (v20 > 0.0) {
    double v180 = v520[11];
  }
  else {
    double v180 = 0.0;
  }
  double v181 = v174 + v170;
  if (v176) {
    double v182 = v520[12];
  }
  else {
    double v182 = 0.0;
  }
  double v183 = v182 + v171;
  double v567 = v175 + v170;
  if (v176) {
    double v184 = 0.0;
  }
  else {
    double v184 = v520[12];
  }
  double v185 = v184 + v171;
  if (!v159)
  {
    unsigned int v197 = 0;
    BOOL v597 = 0;
    int v603 = 0;
    int v577 = 0;
    double v198 = v578;
    double v188 = v593;
    double v187 = v594;
    double v186 = v587;
    double v190 = v591;
    unsigned int v192 = v528;
    unsigned int v191 = v529;
    goto LABEL_356;
  }
  double v186 = v587;
  double v188 = v593;
  double v187 = v594;
  double v189 = (v178 - v587) * v594 + (v179 - v58) * v593;
  double v190 = v591;
  unsigned int v192 = v528;
  unsigned int v191 = v529;
  if (v591 <= v189)
  {
    unsigned int v197 = 0;
    BOOL v597 = 0;
    int v603 = 0;
    int v577 = 0;
    double v198 = v578;
    goto LABEL_356;
  }
  double v536 = v180;
  double v537 = v179;
  double v539 = v178;
  double v540 = v173;
  double v542 = v520[10];
  double v544 = v520[9];
  v632[1] = 0;
  v632[0] = 0;
  v631[1] = 0;
  v631[0] = 0;
  long long v630 = 0u;
  long long v629 = 0u;
  float64x2_t v628 = 0u;
  v627[0] = 0u;
  long long v626 = 0u;
  long long v625 = 0u;
  float64x2_t v624 = 0u;
  v623[0] = 0u;
  long long v622 = 0u;
  long long v621 = 0u;
  float64x2_t v620 = 0u;
  v619[0] = 0u;
  memset(v618, 0, sizeof(v618));
  bzero(v608, 0x210uLL);
  bzero(&v611, 0x210uLL);
  bzero(&v616, 0x210uLL);
  uint64_t v193 = 0;
  memset(v615, 0, 488);
  if (v189 <= v591 + (1.57079633 - v585) * v579) {
    double v194 = v591 + (1.57079633 - v585) * v579;
  }
  else {
    double v194 = v189;
  }
  while (1)
  {
    double v195 = v513 - v579 * 0.02 * v512 * (float)(int)v193;
    if (v195 <= v194) {
      break;
    }
    *(double *)&v615[v193++] = v195;
    if (v193 == 50)
    {
      int v196 = 50;
      double v194 = v195;
      goto LABEL_205;
    }
  }
  int v196 = v193 + 1;
  *(double *)&v615[v193] = v194;
LABEL_205:
  double v199 = (v194 - v189) * 0.1;
  double v200 = v587;
  if (v199 <= 0.0)
  {
    double v204 = v194;
  }
  else
  {
    uint64_t v201 = 0;
    int v202 = v196;
    size_t v203 = &v615[v196];
    while (1)
    {
      double v204 = v194 - v199 * (float)(v201 + 1);
      if (v204 <= v189) {
        break;
      }
      *(double *)&v203[v201++] = v204;
      if (v201 == 10)
      {
        int v196 = v202 + 10;
        goto LABEL_212;
      }
    }
    int v205 = v202 + v201;
    int v196 = v205 + 1;
    *(double *)&v615[v205] = v189;
    double v204 = v189;
  }
LABEL_212:
  *(double *)&v615[v196] = v204;
  double v614 = 0.0;
  double v613 = 0.0;
  double v206 = (v181 - v587) * v594 + (v183 - v58) * v593;
  BOOL v207 = v206 > v189;
  if (v206 >= v513) {
    BOOL v207 = 0;
  }
  if (v207)
  {
    double v613 = (v181 - v587) * v594 + (v183 - v58) * v593;
    int v208 = 1;
  }
  else
  {
    int v208 = 0;
  }
  double v209 = (v567 - v587) * v594 + (v185 - v58) * v593;
  if (v209 > v189 && v209 < v513)
  {
    *(&v613 + v208) = v209;
    if (v208 == 1 && v614 > v613)
    {
      double v614 = v613;
      double v613 = (v567 - v587) * v594 + (v185 - v58) * v593;
    }
    BOOL v211 = v196 >= 0;
    ++v208;
LABEL_229:
    uint64_t v212 = 0;
    int v213 = 0;
    int v214 = 0;
    while (v213 != v208)
    {
      if (v211)
      {
        double v215 = *(double *)&v615[v214];
        double v216 = *(&v613 + v213);
        if (v215 > v216) {
          goto LABEL_232;
        }
      }
      else
      {
        double v216 = *(&v613 + v213);
      }
      ++v213;
      double v215 = v216;
LABEL_238:
      *(&v616 + v212++) = v215;
      BOOL v211 = v214 <= v196;
      if (v214 > v196 && v213 >= v208) {
        goto LABEL_242;
      }
    }
    double v215 = *(double *)&v615[v214];
LABEL_232:
    ++v214;
    goto LABEL_238;
  }
  if (v196 >= 0) {
    BOOL v207 = 1;
  }
  if (v207)
  {
    BOOL v211 = v196 >= 0;
    goto LABEL_229;
  }
  int v208 = 0;
  LODWORD(v212) = 0;
LABEL_242:
  BOOL v217 = (int)v212 > 0;
  if ((int)v212 > 0 || v208 >= 1)
  {
    uint64_t v218 = 0;
    int v219 = 0;
    int v220 = 0;
    while (v219 != v208)
    {
      if (v217)
      {
        double v221 = *(&v616 + v220);
        double v222 = *(&v613 + v219);
        if (v221 > v222) {
          goto LABEL_248;
        }
        uint64_t v223 = v219;
      }
      else
      {
        uint64_t v223 = v219;
        double v222 = *(&v613 + v219);
      }
      *((_DWORD *)v632 + v223) = v218;
      ++v219;
      double v221 = v222;
LABEL_254:
      *((double *)&v611 + v218++) = v221;
      BOOL v217 = v220 < (int)v212;
      if (v220 >= (int)v212 && v219 >= v208) {
        goto LABEL_256;
      }
    }
    double v221 = *(&v616 + v220);
LABEL_248:
    ++v220;
    goto LABEL_254;
  }
  LODWORD(v218) = 0;
LABEL_256:
  uint64_t v224 = 0;
  double v225 = (double *)(v218 - 2);
  *((_DWORD *)v632 + v208) = v225;
  int v599 = v208 + 1;
  unint64_t v226 = v208;
  do
  {
    double v227 = *((double *)&v611 + *(int *)((char *)v632 + v224));
    if (v227 == v204)
    {
      *(_DWORD *)((char *)v631 + v224) = 1;
    }
    else if (v227 == v206)
    {
      *(_DWORD *)((char *)v631 + v224) = 0;
    }
    else if (v227 == v209)
    {
      *(_DWORD *)((char *)v631 + v224) = 2;
    }
    else
    {
      *(_DWORD *)((char *)v631 + v224) = 4;
    }
    v224 += 4;
  }
  while (4 * v208 + 4 != v224);
  int v545 = v218 - 2;
  if (v515 * 1.35000002 <= 1.0) {
    double v228 = v515 * 1.35000002;
  }
  else {
    double v228 = 1.0;
  }
  double v229 = 170.0;
  if (v515 * 1.35000002 <= 1.0) {
    double v229 = v515 * 229.500004;
  }
  if (v228 < 0.400000006) {
    double v229 = 68.000001;
  }
  double v604 = v229;
  int v577 = v218;
  unsigned int v534 = v208;
  if ((int)v218 <= 0)
  {
    LODWORD(v641[0]) = 0;
    int v603 = 1;
    double v270 = v593;
    double v269 = v594;
  }
  else
  {
    uint64_t v230 = 0;
    double v231 = 180.0;
    if (v515 * 1.35000002 <= 1.0) {
      double v231 = v515 * 243.000004;
    }
    _NF = v228 < 0.400000006;
    double v232 = 72.0000011;
    if (!_NF) {
      double v232 = v231;
    }
    BOOL v233 = (*(void *)&v531 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL;
    double v569 = v232 - v229;
    uint64_t v547 = v218;
    float32x4_t v557 = vcvtq_f32_f16(v514);
    uint64_t v234 = 96 * v218;
    int v235 = (double *)&v611;
    uint64_t v236 = v608;
    double v560 = v185;
    do
    {
      double v237 = *v235++;
      double v238 = v237;
      double v239 = v200 + v237 * v594;
      double v240 = v58 + v237 * v593;
      double v200 = v587;
      double v242 = (v181 - v239) * v531;
      double v243 = (v567 - v239) * v531;
      BOOL v244 = (v183 - v240) * v530 > v242 && (*(void *)&v530 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL;
      double v245 = v560 - v240;
      if (v244 || v233) {
        double v242 = (v183 - v240) * v530;
      }
      BOOL v246 = v245 * v530 < v243 && (*(void *)&v530 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL;
      if (v246 || v233) {
        double v243 = v245 * v530;
      }
      double v247 = (v591 - v238) * (1.0 / v579);
      if (v247 > 1.57079633) {
        double v247 = 1.57079633;
      }
      float v248 = v247;
      double v249 = v241;
      double v250 = v239 + v594 * v249;
      double v251 = v240 + v593 * v249;
      double v252 = (v579 * 0.300000012 + 30.0)
           * v579
           / (v579 + 50.0)
           * (float)((float)((float)((float)((float)((float)(v248 * v248) * 0.0054654) + -0.15346) * (float)(v248 * v248))
                           + 0.98442)
                   * v248);
      *v236++ = v252;
      *(float *)&double v252 = (v604 - (v252 * (1.0 / ((v579 * 0.300000012 + 30.0) * v579 / (v579 + 50.0))) + -1.0) * v569)
                      * 0.00392156863;
      double v253 = v250 + v242 * v582;
      double v254 = v251 + v242 * v580;
      double v255 = v250 + v243 * v582;
      double v256 = v251 + v243 * v580;
      float v257 = v253;
      __int16 v258 = &v647[v230];
      *(float *)&double v254 = v254;
      *((float *)v258 + 12) = v257;
      *((_DWORD *)v258 + 13) = LODWORD(v254);
      float16x4_t v259 = vcvt_f16_f32(vmulq_n_f32(v557, *(float *)&v252));
      *(_OWORD *)(v258 + 56) = xmmword_184997DD0;
      *(float *)&double v254 = v255;
      __int16 v260 = &v646[v230];
      *(float *)&double v256 = v256;
      *((float16x4_t *)v258 + 10) = v259;
      *(_DWORD *)__int16 v260 = LODWORD(v254);
      *((_DWORD *)v260 + 1) = LODWORD(v256);
      *(_OWORD *)(v260 + 8) = xmmword_184997DD0;
      *((float16x4_t *)v260 + 4) = v259;
      v230 += 96;
    }
    while (v234 != v230);
    float16x4_t v261 = 0;
    int64_t v262 = 0;
    LODWORD(v641[0]) = 0;
    uint64_t v263 = LODWORD(v632[0]);
    float64x2_t v264 = 0uLL;
    long long v265 = v646;
    float64x2_t v266 = 0uLL;
    double v267 = v647;
    float64x2_t v268 = 0uLL;
    int v603 = 1;
    double v160 = v579;
    double v270 = v593;
    double v269 = v594;
    double v161 = v585;
    double v185 = v560;
    uint64_t v271 = v547;
    do
    {
      ++*((_DWORD *)v641 + v603 - 1);
      if (v262 == v263)
      {
        uint64_t v272 = 0;
        BOOL v273 = 1;
LABEL_298:
        uint64_t v276 = v603;
        int v277 = *((_DWORD *)v631 + v272);
        ++v603;
        *((_DWORD *)v641 + v276) = 0;
      }
      else
      {
        uint64_t v274 = 0;
        while (v226 != v274)
        {
          uint64_t v272 = v274 + 1;
          uint64_t v275 = *((unsigned int *)v632 + ++v274);
          if (v262 == v275)
          {
            BOOL v273 = v272 - 1 < v226;
            goto LABEL_298;
          }
        }
        BOOL v273 = 0;
        int v277 = 4;
      }
      if (v262 < (unint64_t)(v577 - 1))
      {
        if (!v273 || v277 == 2)
        {
          BOOL v278 = v277 == 2 && v273;
          if (v278 && v262 < v545) {
            int v279 = 5;
          }
          else {
            int v279 = 3;
          }
          long long v280 = (float *)&v647[48 * (v279 + 2 * v262)];
          double v281 = v280[1];
          double v282 = *v280;
          long long v283 = (float *)&v647[48 * ((2 * v262) | 1)];
          double v284 = v281 - v283[1];
          double v285 = *v283 - v282;
          double v286 = 1.0 / sqrt(v284 * v284 + v285 * v285);
          v287.f64[0] = v286 * v284;
          double v288 = v286 * v285;
          if ((*(void *)&v287.f64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (*(void *)&v288 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
          {
            v287.f64[1] = v288;
            float64x2_t v266 = v287;
          }
          uint64_t v271 = v547;
        }
        if (v277) {
          int v290 = !v273;
        }
        else {
          int v290 = 1;
        }
        if (v290 == 1)
        {
          BOOL v291 = !v277 && v273;
          int v292 = v291 && v262 < v545 ? 4 : 2;
          uint64_t v293 = (float *)&v646[48 * (v292 + 2 * v262)];
          double v294 = v293[1];
          double v295 = *v293;
          uint64_t v296 = (float *)&v646[48 * (2 * v262)];
          double v297 = v295 - *v296;
          double v298 = v296[1] - v294;
          double v299 = 1.0 / sqrt(v298 * v298 + v297 * v297);
          v300.f64[0] = v299 * v298;
          double v301 = v299 * v297;
          if ((*(void *)&v300.f64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (*(void *)&v301 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
          {
            v300.f64[1] = v301;
            float64x2_t v264 = v300;
          }
        }
      }
      uint64_t v303 = 0;
      uint64_t v304 = (float32x2_t *)&v647[48 * ((2 * v262) | 1)];
      float64x2_t v305 = vcvtq_f64_f32(*v304);
      float16x4_t v306 = (float16x4_t)v304[4];
      uint64_t v307 = &v608[v262];
      float64x2_t v308 = vld1q_dup_f64(v307);
      float32x4_t v309 = vcvtq_f32_f16(v306);
      uint64_t v310 = -19008;
      do
      {
        if (v303 * 8)
        {
          uint64_t v311 = (float32x2_t *)&v267[v310];
          v311[2382] = vcvt_f32_f64(v268);
          v311[2383] = (float32x2_t)0x3F80000000000000;
          v311[2386] = (float32x2_t)v261;
        }
        double v312 = *(double *)&top_shadow_rim_interp_colors[v303];
        uint64_t v313 = (float32x2_t *)&v267[v310];
        float64x2_t v268 = vmlaq_f64(v305, v308, vmulq_n_f64(v266, *(double *)&top_shadow_rim_interp_values[v303]));
        v313[2376] = vcvt_f32_f64(v268);
        v313[2377] = (float32x2_t)0x3F80000000000000;
        *(float *)&double v312 = v312;
        float16x4_t v314 = vcvt_f16_f32(vmulq_n_f32(v309, *(float *)&v312));
        v313[2380] = (float32x2_t)v314;
        float16x4_t v261 = v314;
        ++v303;
        v310 += 6336;
      }
      while (v310);
      uint64_t v315 = 0;
      uint64_t v316 = (float32x2_t *)&v646[96 * v262];
      float64x2_t v317 = vcvtq_f64_f32(*v316);
      float32x4_t v318 = vcvtq_f32_f16((float16x4_t)v316[4]);
      uint64_t v319 = -19008;
      do
      {
        if (v315 * 8)
        {
          uint64_t v320 = (float32x2_t *)&v265[v319];
          v320[2376] = vcvt_f32_f64(v268);
          v320[2377] = (float32x2_t)0x3F80000000000000;
          v320[2380] = (float32x2_t)v261;
        }
        double v321 = *(double *)&top_shadow_rim_interp_colors[v315];
        uint64_t v322 = (float32x2_t *)&v265[v319];
        float64x2_t v268 = vmlaq_f64(v317, v308, vmulq_n_f64(v264, *(double *)&top_shadow_rim_interp_values[v315]));
        v322[2382] = vcvt_f32_f64(v268);
        v322[2383] = (float32x2_t)0x3F80000000000000;
        *(float *)&double v321 = v321;
        float16x4_t v323 = vcvt_f16_f32(vmulq_n_f32(v318, *(float *)&v321));
        v322[2386] = (float32x2_t)v323;
        float16x4_t v261 = v323;
        ++v315;
        v319 += 6336;
      }
      while (v319);
      ++v262;
      v267 += 96;
      v265 += 96;
    }
    while (v262 != v271);
  }
  BOOL v324 = fabs(v269) == 1.0;
  if (v269 == 0.0) {
    BOOL v324 = 1;
  }
  BOOL v597 = v324;
  if (!v324)
  {
    unint64_t v491 = 0;
    long long v492 = v618;
    v493 = (int *)v631;
    long long v494 = (int *)v632;
    int v359 = v599;
    while (1)
    {
      int v496 = *v494++;
      int v495 = v496;
      int v498 = *v493++;
      int v497 = v498;
      long long v499 = &v627[v491 / 0x10];
      long long v500 = &v623[v491 / 0x10];
      v499->f64[0] = 0.0;
      v499->f64[1] = 0.0;
      f64 = v619[v491 / 0x10].f64;
      v500->f64[0] = 0.0;
      v500->f64[1] = 0.0;
      double *f64 = 0.0;
      f64[1] = 0.0;
      BOOL v502 = v498 || v495 < 1;
      if (!v502 && v495 < v545) {
        break;
      }
      if (v497 == 2 && v495 >= 1 && v495 < v545)
      {
        long long v505 = (float32x2_t *)&v646[96 * v495];
        *long long v499 = vcvtq_f64_f32(*v505);
        *long long v492 = v505[4];
        *long long v500 = vcvtq_f64_f32(*(float32x2_t *)&v646[48 * (2 * v495 + 3) + 12672]);
        unint64_t v506 = (unint64_t)&v646[48 * ((2 * v495) | 1) + 12672];
LABEL_472:
        double *f64 = *(float *)v506;
        long long v509 = (float *)(v506 | 4);
        goto LABEL_473;
      }
      if (v497 != 1) {
        goto LABEL_474;
      }
      long long v510 = (float32x2_t *)&v647[48 * ((2 * v495) | 1)];
      *long long v499 = vcvtq_f64_f32(*v510);
      *long long v492 = v510[4];
      *long long v500 = vcvtq_f64_f32(*(float32x2_t *)&v647[96 * v495 + 12672]);
      long long v511 = (float *)&v646[48 * ((2 * v495) | 1)];
      double *f64 = v511[3168];
      long long v509 = v511 + 3169;
LABEL_473:
      f64[1] = *v509;
LABEL_474:
      v491 += 16;
      ++v492;
      if (16 * v534 + 16 == v491) {
        goto LABEL_349;
      }
    }
    int v507 = 2 * v495;
    v508 = (float32x2_t *)&v647[48 * ((2 * v495) | 1)];
    *long long v499 = vcvtq_f64_f32(*v508);
    *long long v492 = v508[4];
    *long long v500 = vcvtq_f64_f32(*(float32x2_t *)&v647[48 * (v507 & 0xFFFFFFFE) + 12672]);
    unint64_t v506 = (unint64_t)&v647[48 * (v507 + 2) + 12672];
    goto LABEL_472;
  }
  uint64_t v325 = 0;
  double v326 = v608[v577 - 1];
  uint64_t v327 = 2 * v577;
  uint64_t v328 = v327 - 1;
  __int16 v329 = (float32x2_t *)&v647[48 * v327 - 48];
  float64x2_t v330 = vcvtq_f64_f32(*v329);
  uint64_t v331 = (int)v327 - 2;
  uint64_t v332 = (float32x2_t *)&v646[48 * v331];
  float64x2_t v333 = vcvtq_f64_f32(*v332);
  float16x4_t v334 = (float16x4_t)v329[4];
  float16x4_t v335 = v334;
  float16x4_t v336 = (float16x4_t)v332[4];
  float16x4_t v337 = v336;
  double v338 = v326 * v269;
  double v339 = v326 * v270;
  float32x4_t v340 = vcvtq_f32_f16(v334);
  __int16 v341 = top_shadow_rim_interp_colors;
  uint64_t v342 = (double *)top_shadow_rim_interp_values;
  float32x4_t v343 = vcvtq_f32_f16(v336);
  double v344 = v333.f64[1];
  double v345 = v333.f64[0];
  double v346 = v330.f64[1];
  double v347 = v330.f64[0];
  do
  {
    double v348 = *(double *)v341++;
    double v349 = v348;
    double v350 = *v342++;
    float v351 = v347;
    uint64_t v352 = (float *)&v643[v325];
    float v353 = v346;
    *uint64_t v352 = v351;
    v352[1] = v353;
    *((void *)v352 + 1) = 0x3F80000000000000;
    *((float16x4_t *)v352 + 4) = v335;
    *(float *)&double v349 = v349;
    float16x4_t v335 = vcvt_f16_f32(vmulq_n_f32(v340, *(float *)&v349));
    double v347 = v338 * v350 + v330.f64[0];
    double v346 = v339 * v350 + v330.f64[1];
    float v354 = v347;
    float v355 = v346;
    v352[12] = v354;
    v352[13] = v355;
    *((void *)v352 + 7) = 0x3F80000000000000;
    *((float16x4_t *)v352 + 10) = v335;
    float v356 = v345;
    float v357 = v344;
    v352[24] = v356;
    v352[25] = v357;
    *((void *)v352 + 13) = 0x3F80000000000000;
    *((float16x4_t *)v352 + 16) = v337;
    float16x4_t v337 = vcvt_f16_f32(vmulq_n_f32(v343, *(float *)&v349));
    double v345 = v338 * v350 + v333.f64[0];
    double v344 = v339 * v350 + v333.f64[1];
    *(float *)&double v349 = v345;
    float v358 = v344;
    v352[36] = *(float *)&v349;
    v352[37] = v358;
    *((void *)v352 + 19) = 0x3F80000000000000;
    *((float16x4_t *)v352 + 22) = v337;
    v325 += 192;
  }
  while (v325 != 576);
  v627[0] = v330;
  v623[0] = vcvtq_f64_f32(*(float32x2_t *)&v647[48 * v331 + 12672]);
  v619[0] = vcvtq_f64_f32(v644);
  float64x2_t v628 = v333;
  v618[0] = v334;
  v618[1] = v336;
  float64x2_t v624 = vcvtq_f64_f32(v645);
  float64x2_t v620 = vcvtq_f64_f32(*(float32x2_t *)&v646[48 * v328 + 12672]);
  int v359 = 2;
LABEL_349:
  uint64_t v360 = 0;
  int v600 = v359;
  uint64_t v361 = v642;
  do
  {
    float64x2_t v362 = v627[v360];
    float64x2_t v570 = vsubq_f64(v623[v360], v362);
    float64x2_t v573 = v362;
    float64x2_t v363 = vsubq_f64(v619[v360], v362);
    double v364 = v570.f64[1];
    float64x2_t v365 = (float64x2_t)vzip1q_s64((int64x2_t)v570, (int64x2_t)v363);
    float64x2_t v366 = (float64x2_t)vzip2q_s64((int64x2_t)v570, (int64x2_t)v363);
    float64x2_t v367 = vsqrtq_f64(vmlaq_f64(vmulq_f64(v365, v365), v366, v366));
    float64x2_t v368 = vmulq_f64(v363, v570);
    *(float *)v368.f64 = vdivq_f64(vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v368, 1), v368), vmulq_laneq_f64(v367, v367, 1)).f64[0];
    float v369 = acosf(*(float *)v368.f64);
    memset(&v606, 0, sizeof(v606));
    CGAffineTransformMakeRotation(&v606, v369 * 0.0344827586);
    double v370 = v570.f64[0];
    uint64_t v371 = 0;
    float16x4_t v372 = (float16x4_t)v618[v360];
    float32x4_t v373 = vcvtq_f32_f16(v372);
    double a = v606.a;
    double b = v606.b;
    double c = v606.c;
    double d = v606.d;
    tCGFloat x = v606.tx;
    tCGFloat y = v606.ty;
    uint64_t v380 = v361;
    do
    {
      uint64_t v381 = -8640;
      uint64_t v382 = (double *)top_shadow_rim_interp_values;
      uint64_t v383 = top_shadow_rim_interp_colors;
      float16x4_t v384 = v372;
      double v385 = v573.f64[1];
      double v386 = v573.f64[0];
      do
      {
        double v387 = *(double *)v383++;
        double v388 = v387;
        double v389 = *v382++;
        float v390 = v386;
        float v391 = v385;
        *(float *)&double v388 = v388;
        uint64_t v392 = &v380[v381];
        *((float16x4_t *)v392 + 1084) = v384;
        float16x4_t v393 = vcvt_f16_f32(vmulq_n_f32(v373, *(float *)&v388));
        *((float *)v392 + 2160) = v390;
        *(_OWORD *)(v392 + 8648) = xmmword_184997DD0;
        *((float *)v392 + 2161) = v391;
        *((float16x4_t *)v392 + 1090) = v393;
        float16x4_t v384 = v393;
        float v394 = v573.f64[0] + v389 * v370;
        *((float *)v392 + 2172) = v394;
        float v395 = v573.f64[1] + v389 * v364;
        *((float *)v392 + 2173) = v395;
        *(_OWORD *)(v392 + 8696) = xmmword_184997DD0;
        double v385 = v573.f64[1] + v389 * v364;
        double v386 = v573.f64[0] + v389 * v370;
        v381 += 2880;
      }
      while (v381);
      double v396 = tx + a * v370 + c * v364;
      double v364 = ty + b * v370 + d * v364;
      ++v371;
      v380 += 96;
      double v370 = v396;
    }
    while (v371 != 30);
    ++v360;
    v361 += 8640;
  }
  while (v360 != v359);
  double v198 = v578;
  double v188 = v593;
  double v187 = v594;
  double v186 = v587;
  int v162 = v525;
  double v190 = v591;
  unsigned int v192 = v528;
  unsigned int v191 = v529;
  unsigned int v197 = v600;
  double v171 = v542;
  double v170 = v544;
  double v178 = v539;
  double v173 = v540;
  double v179 = v537;
  double v180 = v536;
LABEL_356:
  int v397 = v191 - v192;
  if (!*v198)
  {
    unsigned int v592 = 0;
    goto LABEL_431;
  }
  double v398 = v179 - v58;
  double v399 = (v180 + v170 - v186) * v187 + (v173 + v171 - v58) * v188;
  double v400 = v160 * 0.01;
  if ((v178 - v186) * v187 + v398 * v188 <= v190) {
    double v401 = v190;
  }
  else {
    double v401 = (v178 - v186) * v187 + v398 * v188;
  }
  double v558 = v190 + v524;
  if (v399 >= v190 + v524) {
    double v399 = v190 + v524;
  }
  *(double *)&uint64_t v574 = v399;
  bzero(&v611, 0x328uLL);
  double v617 = 0.0;
  double v616 = 0.0;
  bzero(v608, 0x338uLL);
  float v403 = fmax(*(double *)&v574 - v591, 0.0) / -(v400 * v517);
  signed int v404 = (int)fmaxf(floorf(v403), -100.0);
  if (v404 <= 0)
  {
    uint64_t v405 = (1 - v404);
    uint64_t v410 = (v405 + 1) & 0x1FFFFFFFELL;
    uint64x2_t v411 = (uint64x2_t)vdupq_n_s64(v405 - 1);
    float64x2_t v412 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v400 * v517), 0);
    int32x2_t v413 = vadd_s32(vdup_n_s32(v404), (int32x2_t)0x100000000);
    float64x2_t v414 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v591, 0);
    int8x16_t v415 = (int8x16_t)vdupq_lane_s64(v574, 0);
    int64x2_t v416 = (int64x2_t)xmmword_184997FD0;
    uint64_t v417 = (double *)&v612;
    int64x2_t v418 = vdupq_n_s64(2uLL);
    double v406 = v583;
    double v408 = v593;
    double v407 = v594;
    double v409 = v587;
    do
    {
      int32x2_t v419 = vmovn_s64((int64x2_t)vcgeq_u64(v411, (uint64x2_t)v416));
      int8x16_t v420 = (int8x16_t)vmlsq_f64(v414, vcvtq_f64_f32(vcvt_f32_s32(v413)), v412);
      int8x16_t v421 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v420, (float64x2_t)v415), v415, v420);
      if (v419.i8[0])
      {
        if (v401 <= *(double *)v421.i64) {
          double v422 = *(double *)v421.i64;
        }
        else {
          double v422 = v401;
        }
        *(v417 - 1) = v422;
      }
      if (v419.i8[4])
      {
        double v423 = *(double *)&v421.i64[1];
        if (v401 > *(double *)&v421.i64[1]) {
          double v423 = v401;
        }
        *uint64_t v417 = v423;
      }
      int64x2_t v416 = vaddq_s64(v416, v418);
      int32x2_t v413 = vadd_s32(v413, (int32x2_t)0x200000002);
      v417 += 2;
      v410 -= 2;
    }
    while (v410);
  }
  else
  {
    LODWORD(v405) = 0;
    double v406 = v583;
    double v408 = v593;
    double v407 = v594;
    double v409 = v587;
  }
  double v424 = (v181 - v409) * v407 + (v183 - v58) * v408;
  BOOL v425 = v424 < *(double *)&v574 && v424 > v401;
  if (v425)
  {
    double v616 = (v181 - v409) * v407 + (v183 - v58) * v408;
    int v426 = 1;
  }
  else
  {
    int v426 = 0;
  }
  double v427 = (v567 - v409) * v407 + (v185 - v58) * v408;
  if (v427 > v401 && v427 < *(double *)&v574)
  {
    *(&v616 + v426) = v427;
    if (v426 == 1 && v617 > v616)
    {
      double v617 = v616;
      double v616 = (v567 - v409) * v407 + (v185 - v58) * v408;
    }
    BOOL v429 = v405 != 0;
    ++v426;
  }
  else
  {
    BOOL v429 = v405 != 0;
    if (v405) {
      LOBYTE(v425) = 1;
    }
    if (!v425)
    {
      LODWORD(v430) = 0;
      goto LABEL_430;
    }
  }
  double v431 = v160;
  uint64_t v430 = 0;
  int v432 = 0;
  int v433 = 0;
  while (2)
  {
    if (v432 == v426)
    {
      double v434 = *((double *)&v611 + v433);
      goto LABEL_397;
    }
    if (!v429)
    {
      double v435 = *(&v616 + v432);
      goto LABEL_402;
    }
    double v434 = *((double *)&v611 + v433);
    double v435 = *(&v616 + v432);
    if (v434 > v435)
    {
LABEL_397:
      ++v433;
    }
    else
    {
LABEL_402:
      ++v432;
      double v434 = v435;
    }
    v608[v430++] = v434;
    BOOL v429 = v433 < (int)v405;
    if (v433 < (int)v405 || v432 < v426) {
      continue;
    }
    break;
  }
  if ((int)v430 >= 1)
  {
    double v555 = v160 * 0.400000006;
    double v553 = 1.0 / v160;
    double v437 = (v524 + v160 * 0.399745986 - v436) * (1.0 / v160) + -0.949999988;
    double v438 = v437 * 3.0;
    BOOL v32 = v437 <= 0.0;
    double v439 = 0.0;
    if (!v32) {
      double v439 = v438;
    }
    float v440 = -(v439 * v439);
    uint64_t v441 = 0;
    double v443 = expf(v440);
    BOOL v444 = (*(void *)&v531 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL;
    double v550 = -(v443 + v443 * v443 * (v443 * v443));
    float32x4_t v548 = vcvtq_f32_f16(v514);
    double v538 = 76.5 * fmin(v515 * 15.0, 1.0);
    double v561 = v185;
    double v563 = v58;
    double v565 = v181;
    do
    {
      double v445 = v608[v441];
      double v446 = v587 + v445 * v594;
      double v447 = v563 + v445 * v593;
      double v449 = v448;
      BOOL v450 = (v183 - v447) * v530 > (v181 - v446) * v531
          && (*(void *)&v530 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL;
      if (v450 || v444) {
        double v451 = (v183 - v447) * v530;
      }
      else {
        double v451 = (v181 - v446) * v531;
      }
      BOOL v452 = (v561 - v447) * v530 < (v567 - v446) * v531
          && (*(void *)&v530 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL;
      if (v452 || v444) {
        double v453 = (v561 - v447) * v530;
      }
      else {
        double v453 = (v567 - v446) * v531;
      }
      float v454 = (v591 - v445) * v553 + 1.57079633;
      double v455 = v431;
      double v456 = v555
           * ((float)((float)((float)((float)((float)((float)((float)(v454 * v454) * 0.00096967) + -0.039228)
                                            * (float)(v454 * v454))
                                    + 0.49535)
                            * (float)(v454 * v454))
                    + -0.99861)
            + 1.0);
      double v571 = v446 + (v449 - v456) * v594;
      double v575 = v447 + (v449 - v456) * v593;
      double v457 = v451 - v456;
      double v458 = v455;
      double v459 = v453 + v456;
      double v460 = (v558 - (v445 + v449) + v456) * v553 + -0.949999988;
      double v461 = v460 * 3.0;
      BOOL v32 = v460 <= 0.0;
      double v462 = 0.0;
      if (!v32) {
        double v462 = v461;
      }
      float v463 = -(v462 * v462);
      float v464 = expf(v463);
      double v465 = (v550 + v464 + v464 * v464 * (v464 * v464)) * v538;
      double v466 = (v453 - v451) * 0.5;
      if (v466 < v456) {
        double v465 = v465 * ((v453 - v451) * 0.25 / v456 + 0.5);
      }
      if (v456 >= v466) {
        double v467 = (v453 - v451) * 0.5;
      }
      else {
        double v467 = v456;
      }
      double v468 = v467 + v451;
      double v181 = v565;
      double v469 = v453 - v467;
      double v161 = v585;
      float v470 = v465 * 0.00392156863;
      float16x4_t v605 = vcvt_f16_f32(vmulq_n_f32(v548, v470));
      float v471 = v457;
      double v406 = v583;
      float v472 = v459;
      double v431 = v458;
      *(float *)&double v468 = v468;
      *(float *)&double v469 = v469;
    }
    while (v430 != v441);
  }
  double v198 = v578;
  unsigned int v192 = v528;
  unsigned int v191 = v529;
LABEL_430:
  unsigned int v592 = 2 * v430;
LABEL_431:
  *(unsigned char *)(*(void *)(v8 + 16) + 481) |= 1u;
  uint64_t v473 = *(void *)(v8 + 16);
  *(unsigned char *)(v473 + 480) = 3;
  *(float16x4_t *)(v8 + 816) = v521[3];
  ++*(_DWORD *)(v8 + 256);
  *(unsigned char *)(v473 + 16) = 3;
  CA::OGL::Context::bind_surface(v8, v526, 0, 1u, 1, 0.0);
  if (v522)
  {
    uint64_t v475 = *(float32x4_t **)(v8 + 16);
    if ((*((unsigned char *)v522 + 144) & 0x10) != 0) {
      double scale = CA::Mat4Impl::mat4_get_scale(v522, 0, 0, v474);
    }
    else {
      double scale = *((double *)v522 + 16);
    }
    float v477 = 1.0 / scale;
    v475[6] = vmulq_n_f32(v475[6], v477);
  }
  long long v610 = 0u;
  double v478 = *(double *)(*(void *)(v8 + 248) + 8);
  *(void *)&v608[0] = v8;
  v608[1] = v478;
  long long v609 = 0u;
  v608[2] = 0.0;
  WORD4(v609) = 0;
  CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)v608);
  unsigned int v588 = 2 * (v397 & ~(v397 >> 31));
  v586 = &v653[6 * v192];
  uint64_t v612 = 0;
  int32x2_t v611 = 0;
  unsigned int v584 = 2 * v191;
  uint64_t v595 = v197;
  int v601 = v197;
  unsigned int v581 = 2 * (v162 - v191);
  while (CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)v608, &v611))
  {
    if (*v198)
    {
      *(unsigned char *)(*(void *)(v8 + 16) + 16) = 0;
      uint64_t v479 = v592;
      (*(void (**)(uint64_t, uint64_t, void, void, unsigned char *, void, void, void))(*(void *)v8 + 280))(v8, 2, v592, 0, v640, 0, v592, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, void, unsigned char *, void, uint64_t, void))(*(void *)v8 + 280))(v8, 2, v479, 0, v639, 0, v479, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, void, unsigned char *, void, uint64_t, void))(*(void *)v8 + 280))(v8, 2, v479, 0, v638, 0, v479, 0);
      *(unsigned char *)(*(void *)(v8 + 16) + 16) = 3;
      (*(void (**)(uint64_t, uint64_t, void, void, _OWORD *, void, void, void))(*(void *)v8 + 280))(v8, 2, v588, 0, v586, 0, v588, 0);
      (*(void (**)(uint64_t, uint64_t, void, void, _OWORD *, void, void, void))(*(void *)v8 + 280))(v8, 2, v584, 0, v652, 0, v584, 0);
      (*(void (**)(uint64_t, uint64_t, void, void, _OWORD *, void, void, void))(*(void *)v8 + 280))(v8, 2, v584, 0, v651, 0, v584, 0);
    }
    if (v198[1])
    {
      if (v577)
      {
        uint64_t v480 = 0;
        *(unsigned char *)(*(void *)(v8 + 16) + 16) = 0;
        v481 = v642;
        do
        {
          if (v603 >= 1)
          {
            id v482 = &v646[6336 * v480];
            uint64_t v483 = &v647[6336 * v480];
            uint64_t v484 = (int *)v641;
            uint64_t v485 = v603;
            do
            {
              uint64_t v486 = *v484++;
              (*(void (**)(uint64_t, uint64_t, void, void, unsigned char *, void, void, void))(*(void *)v8 + 280))(v8, 2, (2 * v486), 0, v483, 0, (2 * v486), 0);
              (*(void (**)(uint64_t, uint64_t, void, void, unsigned char *, void, void, void))(*(void *)v8 + 280))(v8, 2, (2 * v486), 0, v482, 0, (2 * v486), 0);
              v483 += 96 * v486;
              v482 += 96 * v486;
              --v485;
            }
            while (v485);
          }
          if (v597) {
            (*(void (**)(uint64_t, uint64_t, uint64_t, void, unsigned char *, void, uint64_t, void))(*(void *)v8 + 280))(v8, 2, 4, 0, &v643[192 * v480], 0, 4, 0);
          }
          v487 = v481;
          uint64_t v488 = v595;
          if (v601 >= 1)
          {
            do
            {
              (*(void (**)(uint64_t, uint64_t, uint64_t, void, unsigned char *, void, uint64_t, void))(*(void *)v8 + 280))(v8, 2, 60, 0, v487, 0, 60, 0);
              v487 += 8640;
              --v488;
            }
            while (v488);
          }
          ++v480;
          v481 += 2880;
        }
        while (v480 != 3);
      }
      *(unsigned char *)(*(void *)(v8 + 16) + 16) = 3;
      (*(void (**)(uint64_t, uint64_t, void, void, _OWORD *, void, void, void))(*(void *)v8 + 280))(v8, 2, v590, 0, &v650[6 * v191], 0, v590, 0);
      __asm { FCMP            H8, #0 }
      if (_ZF)
      {
        (*(void (**)(uint64_t, uint64_t, void, void, _OWORD *, void, void, void))(*(void *)v8 + 280))(v8, 2, v581, 0, &v649[6 * v191], 0, v581, 0);
        (*(void (**)(uint64_t, uint64_t, void, void, _OWORD *, void, void, void))(*(void *)v8 + 280))(v8, 2, v581, 0, &v648[6 * v191], 0, v581, 0);
      }
      *(unsigned char *)(*(void *)(v8 + 16) + 16) = 11;
      (*(void (**)(uint64_t, uint64_t, void, void, _OWORD *, void, void, void))(*(void *)v8 + 280))(v8, 2, v590, 0, &v653[6 * v191], 0, v590, 0);
      (*(void (**)(uint64_t, uint64_t, void, void, _OWORD *, void, void, void))(*(void *)v8 + 280))(v8, 2, v581, 0, &v652[6 * v191], 0, v581, 0);
      (*(void (**)(uint64_t, uint64_t, void, void, _OWORD *, void, void, void))(*(void *)v8 + 280))(v8, 2, v581, 0, &v651[6 * v191], 0, v581, 0);
      double v198 = v578;
    }
  }
  uint64_t result = CA::OGL::Context::unbind_surface((void *)v8, v526, 0);
  *(void *)(v8 + 816) = 0;
  ++*(_DWORD *)(v8 + 256);
  *(unsigned char *)(*(void *)(v8 + 16) + 16) = 0;
  *(unsigned char *)(*(void *)(v8 + 16) + 481) &= ~1u;
  return result;
}

double *CA::OGL::anonymous namespace'::curl_displace(double *this, double a2, double a3, double a4, double *a5, double a6, double a7)
{
  double v7 = (a3 - a2) / a4;
  if (v7 + 1.57079633 <= a7) {
    double v8 = v7 + 1.57079633;
  }
  else {
    double v8 = a7;
  }
  if (v8 < a6) {
    double v8 = a6;
  }
  float v9 = v8;
  if (this) {
    *this = (float)((float)((float)((float)((float)((float)(v9 * v9) * 0.0054654) + -0.15346) * (float)(v9 * v9))
  }
                          + 0.98442)
                  * v9);
  return this;
}

float CA::OGL::anonymous namespace'::curl_strip_emit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12, double a13, float a14, float a15, float a16, float a17)
{
  double v20 = a6 + a10 * a14;
  double v21 = a7 + a11 * a14;
  double v22 = a6 + a10 * a16;
  double v23 = a7 + a11 * a16;
  double v24 = a6 + a10 * a17;
  double v25 = a7 + a11 * a17;
  double v26 = a6 + a10 * a15;
  double v27 = a7 + a11 * a15;
  double v28 = a8 + a12 * a16;
  double v29 = a8 + a12 * a17;
  float v30 = v20;
  uint64_t v31 = a2 + 96 * a4;
  float v32 = v21;
  *(float *)uint64_t v31 = v30;
  *(float *)(v31 + 4) = v32;
  *(void *)(v31 + 8) = 0x3F80000000000000;
  *(float *)&double v28 = v28;
  float v33 = a9 + a13 * a16;
  *(_DWORD *)(v31 + 16) = LODWORD(v28);
  *(float *)(v31 + 20) = v33;
  *(void *)(v31 + 32) = 0;
  uint64_t v34 = *a5;
  float v35 = v22;
  uint64_t v36 = a2 + 48 * ((2 * a4) | 1);
  float v37 = v23;
  *(float *)uint64_t v36 = v35;
  *(float *)(v36 + 4) = v37;
  *(void *)(v36 + 8) = 0x3F80000000000000;
  *(_DWORD *)(v36 + 16) = LODWORD(v28);
  *(float *)(v36 + 20) = v33;
  *(void *)(v36 + 32) = v34;
  uint64_t v38 = *a5;
  uint64_t v39 = a1 + 96 * a4;
  *(float *)uint64_t v39 = v35;
  *(float *)(v39 + 4) = v37;
  *(void *)(v39 + 8) = 0x3F80000000000000;
  *(_DWORD *)(v39 + 16) = LODWORD(v28);
  *(float *)(v39 + 20) = v33;
  *(void *)(v39 + 32) = v38;
  uint64_t v40 = *a5;
  *(float *)&double v28 = v24;
  uint64_t v41 = a1 + 48 * ((2 * a4) | 1);
  float v42 = v25;
  *(_DWORD *)uint64_t v41 = LODWORD(v28);
  *(float *)(v41 + 4) = v42;
  *(void *)(v41 + 8) = 0x3F80000000000000;
  *(float *)&double v29 = v29;
  float v43 = a9 + a13 * a17;
  *(_DWORD *)(v41 + 16) = LODWORD(v29);
  *(float *)(v41 + 20) = v43;
  *(void *)(v41 + 32) = v40;
  uint64_t v44 = *a5;
  uint64_t v45 = a3 + 96 * a4;
  *(_DWORD *)uint64_t v45 = LODWORD(v28);
  *(float *)(v45 + 4) = v42;
  *(void *)(v45 + 8) = 0x3F80000000000000;
  *(_DWORD *)(v45 + 16) = LODWORD(v29);
  *(float *)(v45 + 20) = v43;
  *(void *)(v45 + 32) = v44;
  *(float *)&double v28 = v26;
  uint64_t v46 = a3 + 48 * ((2 * a4) | 1);
  float result = v27;
  *(_DWORD *)uint64_t v46 = LODWORD(v28);
  *(float *)(v46 + 4) = result;
  *(void *)(v46 + 8) = 0x3F80000000000000;
  *(_DWORD *)(v46 + 16) = LODWORD(v29);
  *(float *)(v46 + 20) = v43;
  *(void *)(v46 + 32) = 0;
  return result;
}

BOOL CA::OGL::anonymous namespace'::PageCurlFilter::can_render(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return *(void *)(a5 + 16) == 0;
}

uint64_t CA::OGL::FilterSubclass::can_append_color_matrix(CA::OGL::FilterSubclass *this, const CA::Render::Filter *a2, CA::OGL::Context *a3)
{
  return 0;
}

__n128 CA::OGL::anonymous namespace'::PageCurlFilter::ROI(CA::OGL::_anonymous_namespace_::PageCurlFilter *this, const CA::Render::Filter *a2, __n128 *a3, __n128 *a4)
{
  *a4 = a3[4];
  __n128 result = a3[5];
  a4[1] = result;
  return result;
}

double *CA::OGL::anonymous namespace'::PageCurlFilter::DOD(CA::OGL::_anonymous_namespace_::PageCurlFilter *this, CA::Render::KeyValueArray **a2, const CA::Render::Layer *a3, CA::Rect *a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  long long v4 = *((_OWORD *)a3 + 5);
  v8[0] = *((_OWORD *)a3 + 4);
  v8[1] = v4;
  double v5 = *((double *)a4 + 2);
  if (v5 >= *((double *)a4 + 3)) {
    double v5 = *((double *)a4 + 3);
  }
  if (v5 > 0.0)
  {
    uint64_t v10 = 0;
    memset(v9, 0, sizeof(v9));
  }
  return result;
}

double *CA::OGL::anonymous namespace'::curl_bounds(double *a1, double *a2, double *a3)
{
  uint64_t v210 = *MEMORY[0x1E4F143B8];
  long long v208 = 0u;
  long long v209 = 0u;
  long long v206 = 0u;
  long long v207 = 0u;
  double v6 = a1[7];
  double v5 = a1[8];
  double v7 = 0.0;
  if (v6 < 0.0) {
    double v8 = 0.0;
  }
  else {
    double v8 = a3[3];
  }
  double v10 = a2[2];
  double v9 = a2[3];
  if (v6 < 0.0) {
    double v11 = 0.0;
  }
  else {
    double v11 = a2[3];
  }
  if (v6 < 0.0) {
    double v12 = a2[3];
  }
  else {
    double v12 = 0.0;
  }
  double v13 = a1[12];
  if (v6 < 0.0) {
    double v14 = 0.0;
  }
  else {
    double v14 = a1[12];
  }
  if (v6 < 0.0) {
    double v15 = a1[12];
  }
  else {
    double v15 = 0.0;
  }
  if (v6 >= 0.0) {
    double v16 = 0.0;
  }
  else {
    double v16 = a1[11];
  }
  if (v6 >= 0.0) {
    double v17 = a1[11];
  }
  else {
    double v17 = 0.0;
  }
  if (v5 > 0.0) {
    double v18 = 0.0;
  }
  else {
    double v18 = a3[2];
  }
  double v19 = v18 + *a3;
  double v20 = v8 + a3[1];
  if (v5 > 0.0) {
    double v21 = 0.0;
  }
  else {
    double v21 = a2[2];
  }
  double v22 = *a2;
  double v23 = a2[1];
  if (v5 > 0.0) {
    double v24 = a2[2];
  }
  else {
    double v24 = 0.0;
  }
  if (v5 > 0.0) {
    double v25 = a2[3];
  }
  else {
    double v25 = 0.0;
  }
  double v26 = a1[3];
  double v179 = a1[2];
  v27.f64[0] = fmax(v26, 1.57079633);
  v27.f64[1] = v26;
  float32x2_t v28 = vcvt_f32_f64(v27);
  float32x2_t v29 = vmul_f32(v28, v28);
  float32x2_t v30 = vmla_f32((float32x2_t)vdup_n_s32(0x3F7C02BDu), v29, vmla_f32((float32x2_t)vdup_n_s32(0xBE1D2553), (float32x2_t)vdup_n_s32(0x3BB31712u), v29));
  double v31 = a1[5];
  double v32 = a1[6];
  float64x2_t v33 = vaddq_f64((float64x2_t)vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL), vcvtq_f64_f32(vmul_f32(v30, v28)));
  double v166 = 1.57079633 - v26;
  double v167 = a1[11];
  double v34 = a1[9];
  double v35 = a1[10];
  double v36 = vmlad_n_f64(fabs(v32) * a3[3] - (-(v179 * (1.57079633 - v26)) - fabs(v31) * a3[2]), v179, vsubq_f64(v33, (float64x2_t)vdupq_laneq_s64((int64x2_t)v33, 1)).f64[0])* *a1- v179 * (1.57079633 - v26);
  double v37 = v31 * (v22 - v19 + v21) + v32 * (v23 - v20 + v11);
  if (v5 > 0.0) {
    double v38 = 0.0;
  }
  else {
    double v38 = a1[11];
  }
  double v39 = v22 - v19 + v24;
  if (v5 > 0.0) {
    double v40 = a1[11];
  }
  else {
    double v40 = 0.0;
  }
  double v41 = v31 * v39 + v32 * (v23 - v20 + v12);
  double v181 = a1[10];
  double v182 = a1[9];
  double v42 = v34 - v19 + v38;
  double v43 = v35 - v20 + v14;
  double v44 = v34 - v19 + v40;
  double v45 = v35 - v20 + v15;
  double v199 = a2[1];
  double v200 = v10 + v22;
  double v202 = v10 + v22;
  double v203 = v9 + v23;
  if (v5 > 0.0) {
    double v46 = 0.0;
  }
  else {
    double v46 = v13;
  }
  double v204 = v22;
  double v205 = v9 + v23;
  double v169 = v13;
  if (v5 > 0.0) {
    double v47 = v13;
  }
  else {
    double v47 = 0.0;
  }
  BOOL v48 = v36 > v37 && v36 < v41;
  double v49 = 1.0 / v6;
  double v50 = 1.0 / v5;
  double v51 = v31 * v44;
  double v198 = v22;
  double v201 = v23;
  double v188 = v19;
  double v189 = v20;
  double v176 = 1.0 / v6;
  double v177 = v6;
  double v175 = 1.0 / v5;
  double v178 = v5;
  if (v48)
  {
    double v53 = v25 + v23;
    if (v5 > 0.0) {
      double v9 = 0.0;
    }
    if (v6 >= 0.0) {
      double v54 = v10;
    }
    else {
      double v54 = 0.0;
    }
    double v55 = v54 + v22;
    double v56 = v9 + v23;
    if (v6 < 0.0) {
      double v7 = v10;
    }
    double v57 = v7 + v22;
    double v58 = v19 + v36 * v31;
    double v59 = v20 + v36 * v32;
    double v60 = (v57 - v58) * v49;
    double v61 = (v55 - v58) * v49;
    double v62 = (v56 - v59) * v50;
    if (v62 > v60 && COERCE_UNSIGNED_INT64(fabs(1.0 / v5)) < 0x7FF0000000000000
      || COERCE_UNSIGNED_INT64(fabs(1.0 / v6)) >= 0x7FF0000000000000)
    {
      double v60 = v62;
    }
    if ((v53 - v59) * v50 < v61 && COERCE_UNSIGNED_INT64(fabs(1.0 / v5)) < 0x7FF0000000000000
      || COERCE_UNSIGNED_INT64(fabs(1.0 / v6)) >= 0x7FF0000000000000)
    {
      double v61 = (v53 - v59) * v50;
    }
    *(double *)&long long v206 = v58 + v60 * v6;
    *((double *)&v206 + 1) = v59 + v60 * v5;
    *(double *)&long long v207 = v58 + v61 * v6;
    *((double *)&v207 + 1) = v59 + v61 * v5;
    uint64_t v52 = 6;
  }
  else
  {
    uint64_t v52 = 4;
  }
  double v185 = v26;
  uint64_t v67 = 0;
  double v172 = v16 + v182;
  double v173 = v46 + v181;
  double v171 = v17 + v182;
  double v174 = v47 + v181;
  double v183 = v31 * v42 + v32 * v43;
  double v180 = v51 + v32 * v45;
  memset(v197, 0, sizeof(v197));
  double v68 = a1[4];
  double v190 = v31;
  do
  {
    double v69 = *(double *)((char *)&v198 + v67 * 16);
    double v70 = *(double *)((char *)&v198 + v67 * 16 + 8);
    double v71 = v32;
    double v32 = v71;
    double v31 = v190;
    double v73 = v72;
    double v74 = (double *)&v197[v67];
    *double v74 = v69 + v190 * v73;
    v74[1] = v70 + v71 * v73;
    ++v67;
  }
  while (v52 != v67);
  float64x2_t v195 = 0u;
  float64x2_t v196 = 0u;
  __n128 result = CA::BoundsImpl::set_points(v195.f64, (double *)v197, (const double *)v52);
  float64x2_t v78 = v195;
  float64x2_t v77 = v196;
  *(float64x2_t *)a2 = v195;
  *((float64x2_t *)a2 + 1) = v77;
  float64x2_t v186 = v77;
  double v79 = v36 + v166 * v179;
  double v198 = v182;
  double v199 = v181;
  double v200 = v167 + v182;
  double v201 = v181;
  double v168 = v169 + v181;
  double v170 = v200;
  double v202 = v200;
  double v203 = v168;
  double v204 = v182;
  double v205 = v168;
  uint64_t v80 = 4;
  double v81 = v36;
  if (v36 <= v183)
  {
    double v83 = v188;
    double v82 = v20;
    double v84 = v6;
    double v85 = v178;
    double v86 = v190;
    double v87 = v71;
    double v89 = v175;
    double v88 = 1.0 / v6;
  }
  else
  {
    double v83 = v188;
    double v82 = v20;
    double v84 = v6;
    double v85 = v178;
    double v86 = v190;
    double v87 = v71;
    double v89 = v175;
    double v88 = 1.0 / v6;
    if (v36 < v180)
    {
      double v90 = v188 + v36 * v190;
      double v91 = v20 + v36 * v71;
      double v92 = (v172 - v90) * v176;
      double v93 = (v171 - v90) * v176;
      if ((v173 - v91) * v175 > v92 && (*(void *)&v175 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000
        || COERCE_UNSIGNED_INT64(fabs(1.0 / v6)) >= 0x7FF0000000000000)
      {
        double v92 = (v173 - v91) * v175;
      }
      if ((v174 - v91) * v175 < v93 && (*(void *)&v175 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000
        || COERCE_UNSIGNED_INT64(fabs(1.0 / v6)) >= 0x7FF0000000000000)
      {
        double v93 = (v174 - v91) * v175;
      }
      *(double *)&long long v206 = v90 + v92 * v6;
      *((double *)&v206 + 1) = v91 + v92 * v178;
      *(double *)&long long v207 = v90 + v93 * v6;
      *((double *)&v207 + 1) = v91 + v93 * v178;
      uint64_t v80 = 6;
    }
  }
  BOOL v98 = v79 > v183 && v79 < v180;
  float64x2_t v165 = v78;
  if (v98)
  {
    double v99 = v83 + v79 * v86;
    double v100 = v82 + v79 * v87;
    double v101 = (v172 - v99) * v88;
    double v102 = (v171 - v99) * v88;
    if ((v173 - v100) * v89 > v101 && (*(void *)&v89 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000
      || (*(void *)&v88 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      double v101 = (v173 - v100) * v89;
    }
    if ((v174 - v100) * v89 < v102 && (*(void *)&v89 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000
      || (*(void *)&v88 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      double v102 = (v174 - v100) * v89;
    }
    uint64_t v107 = &v198 + 2 * v80;
    uint64_t v108 = 16 * v80;
    *uint64_t v107 = v99 + v101 * v84;
    v107[1] = v100 + v101 * v85;
    v80 += 2;
    int v109 = (double *)((char *)&v198 + (v108 | 0x10));
    *int v109 = v99 + v102 * v84;
    v109[1] = v100 + v102 * v85;
  }
  unint64_t v110 = 0;
  uint64_t v111 = 0;
  double v112 = a1[2];
  double v113 = a1[3];
  double v114 = a1[4];
  double v115 = &v199;
  do
  {
    double v116 = *(v115 - 1);
    double v117 = v116 - v83;
    double v118 = *v115;
    double v119 = v117 * v86 + (*v115 - v82) * v87;
    if (v110 > 3 || (v119 > v81 ? (BOOL v120 = v119 < v79) : (BOOL v120 = 0), v120))
    {
      double v87 = v71;
      double v82 = v189;
      double v86 = v190;
      double v81 = v36;
      double v122 = v121;
      double v123 = (double *)&v197[(void)v111];
      uint64_t v111 = (const double *)((char *)v111 + 1);
      *double v123 = v116 + v190 * v122;
      v123[1] = v118 + v71 * v122;
    }
    ++v110;
    v115 += 2;
    double v83 = v188;
  }
  while (v80 != v110);
  if (!v111)
  {
    double v125 = v178;
    double v126 = v179;
    double v124 = v177;
    goto LABEL_155;
  }
  float64x2_t v193 = 0u;
  float64x2_t v194 = 0u;
  __n128 result = CA::BoundsImpl::set_points(v193.f64, (double *)v197, v111);
  double v87 = v71;
  double v86 = v190;
  double v124 = v177;
  double v125 = v178;
  double v126 = v179;
  double v127 = v179 * -0.400000006 * (v190 + v177);
  double v128 = (v177 - v190) * (v179 * 0.400000006);
  if (v127 >= v128) {
    double v129 = (v177 - v190) * (v179 * 0.400000006);
  }
  else {
    double v129 = v179 * -0.400000006 * (v190 + v177);
  }
  if (v129 < 0.0)
  {
    v193.f64[0] = v193.f64[0] + v129;
    v194.f64[0] = v194.f64[0] - v129;
  }
  double v130 = v179 * -0.400000006 * (v178 + v71);
  double v131 = (v178 - v71) * (v179 * 0.400000006);
  if (v127 <= v128) {
    double v132 = (v177 - v190) * (v179 * 0.400000006);
  }
  else {
    double v132 = v179 * -0.400000006 * (v190 + v177);
  }
  if (v132 > 0.0) {
    v194.f64[0] = v194.f64[0] + v132;
  }
  if (v130 >= v131) {
    double v133 = (v178 - v71) * (v179 * 0.400000006);
  }
  else {
    double v133 = v179 * -0.400000006 * (v178 + v71);
  }
  double v82 = v189;
  double v81 = v36;
  if (v133 < 0.0)
  {
    v193.f64[1] = v193.f64[1] + v133;
    v194.f64[1] = v194.f64[1] - v133;
  }
  if (v130 <= v131) {
    double v130 = (v178 - v71) * (v179 * 0.400000006);
  }
  if (v130 > 0.0) {
    v194.f64[1] = v194.f64[1] + v130;
  }
  float64x2_t v134 = v194;
  int64x2_t v135 = vclezq_f64(v186);
  int64x2_t v136 = vclezq_f64(v194);
  int32x2_t v137 = vmovn_s64(vcltzq_s64((int64x2_t)vorrq_s8((int8x16_t)vzip1q_s64(v136, v135), (int8x16_t)vzip2q_s64(v136, v135))));
  if (v137.i8[4])
  {
    if (v137.i8[0]) {
      goto LABEL_155;
    }
    float64x2_t v138 = v193;
  }
  else
  {
    if (v137.i8[0]) {
      goto LABEL_155;
    }
    float64x2_t v138 = vminnmq_f64(v165, v193);
    float64x2_t v134 = vsubq_f64(vmaxnmq_f64(vaddq_f64(v165, v186), vaddq_f64(v193, v194)), v138);
  }
  float64x2_t v165 = v138;
  *(float64x2_t *)a2 = v138;
  *((float64x2_t *)a2 + 1) = v134;
LABEL_155:
  if (v81 <= v183) {
    return result;
  }
  double v198 = v182;
  double v199 = v181;
  double v200 = v170;
  double v201 = v181;
  double v202 = v170;
  double v203 = v168;
  double v204 = v182;
  double v205 = v168;
  double v139 = v188 + v81 * v86;
  double v140 = v82 + v81 * v87;
  double v141 = (v172 - v139) * v176;
  double v142 = (v171 - v139) * v176;
  if ((v173 - v140) * v175 > v141 && (*(void *)&v175 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000
    || (*(void *)&v176 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    double v141 = (v173 - v140) * v175;
  }
  if ((v174 - v140) * v175 < v142 && (*(void *)&v175 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000
    || (*(void *)&v176 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    double v142 = (v174 - v140) * v175;
  }
  unint64_t v147 = 0;
  float v148 = 0;
  *(double *)&long long v206 = v139 + v141 * v124;
  *((double *)&v206 + 1) = v140 + v141 * v125;
  *(double *)&long long v207 = v139 + v142 * v124;
  *((double *)&v207 + 1) = v140 + v142 * v125;
  double v149 = a1[4];
  double v184 = a1[3];
  double v187 = a1[2];
  double v150 = &v199;
  do
  {
    double v151 = *(v150 - 1);
    double v152 = *v150;
    double v153 = (v151 - v188) * v86 + (*v150 - v82) * v87;
    BOOL v154 = v81 > v153;
    if (v81 >= v180) {
      BOOL v154 = 0;
    }
    if (v147 > 3 || v154)
    {
      double v87 = v71;
      double v82 = v189;
      double v86 = v190;
      double v81 = v36;
      double v156 = v155;
      float v157 = (double *)&v197[(void)v148];
      float v148 = (const double *)((char *)v148 + 1);
      double *v157 = v151 + v190 * v156;
      v157[1] = v152 + v71 * v156;
    }
    ++v147;
    v150 += 2;
  }
  while (v147 != 6);
  float64x2_t v191 = 0u;
  float64x2_t v192 = 0u;
  CA::BoundsImpl::set_points(v191.f64, (double *)v197, v148);
  __n128 result = CA::BoundsImpl::inset(v191.f64, (-30.0 - v126 * 0.300000012) * v126 / (v126 + 50.0), (-30.0 - v126 * 0.300000012) * v126 / (v126 + 50.0));
  float64x2_t v158 = *(float64x2_t *)(a2 + 2);
  float64x2_t v159 = v192;
  int64x2_t v160 = vclezq_f64(v158);
  int64x2_t v161 = vclezq_f64(v192);
  int32x2_t v162 = vmovn_s64(vcltzq_s64((int64x2_t)vorrq_s8((int8x16_t)vzip1q_s64(v161, v160), (int8x16_t)vzip2q_s64(v161, v160))));
  if (v162.i8[4])
  {
    if (v162.i8[0]) {
      return result;
    }
    float64x2_t v163 = v191;
  }
  else
  {
    if (v162.i8[0]) {
      return result;
    }
    float64x2_t v164 = vaddq_f64(v165, v158);
    float64x2_t v163 = vminnmq_f64(v165, v191);
    float64x2_t v159 = vsubq_f64(vmaxnmq_f64(v164, vaddq_f64(v191, v192)), v163);
  }
  *(float64x2_t *)a2 = v163;
  *((float64x2_t *)a2 + 1) = v159;
  return result;
}

uint64_t CA::OGL::anonymous namespace'::PageCurlFilter::is_opacity_commutative(CA::OGL::_anonymous_namespace_::PageCurlFilter *this, const CA::Render::Filter *a2)
{
  return 1;
}

uint64_t CA::Render::FilterSubclass::identity_opaque_shape(CA::Render::FilterSubclass *this, const CA::Render::Filter *a2, const CA::Render::Layer *a3)
{
  return 0;
}

uint64_t CA::Render::FilterSubclass::empty_opaque_shape(CA::Render::FilterSubclass *this, const CA::Render::Filter *a2, const CA::Render::Layer *a3)
{
  return 1;
}

uint64_t CA::Render::FilterSubclass::identity(CA::Render::FilterSubclass *this, const CA::Render::Filter *a2)
{
  return 0;
}

uint64_t CA::OGL::anonymous namespace'::PageCurlTransition::source_requirement()
{
  return 5;
}

uint64_t CA::OGL::anonymous namespace'::PageCurlTransition::render(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, CA::Transform *a5, uint64_t a6, uint64_t a7, double a8, int32x4_t a9)
{
  uint64_t v13 = result;
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = *(void *)(a3 + 248);
  v15.i64[1] = 0;
  long long v89 = 0u;
  long long v90 = 0u;
  long long v87 = 0u;
  long long v88 = 0u;
  long long v85 = 0u;
  long long v86 = 0u;
  long long v83 = 0u;
  long long v84 = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  long long v79 = 0u;
  long long v80 = 0u;
  if (*(unsigned char *)(result + 8)) {
    uint64_t v16 = a6;
  }
  else {
    uint64_t v16 = a7;
  }
  if (*(unsigned char *)(result + 8)) {
    uint64_t v17 = a7;
  }
  else {
    uint64_t v17 = a6;
  }
  *(unsigned char *)(*(void *)(a3 + 16) + 481) |= 1u;
  *(void *)(a3 + 816) = *(void *)(v14 + 24);
  ++*(_DWORD *)(a3 + 256);
  *(unsigned char *)(*(void *)(a3 + 16) + 16) = 1;
  if (v16)
  {
    double v18 = *(double *)a4;
    double v19 = *(double *)(a4 + 8);
    v15.i64[0] = *(void *)(a4 + 16);
    a9.i64[0] = *(void *)(a4 + 24);
    double v20 = *(double *)v15.i64 + *(double *)a4;
    double v21 = *(double *)a9.i64 + v19;
    int v22 = *(_DWORD *)(v16 + 40);
    int v23 = *(_DWORD *)(v16 + 44);
    if (v22 <= v23) {
      int v24 = *(_DWORD *)(v16 + 44);
    }
    else {
      int v24 = *(_DWORD *)(v16 + 40);
    }
    v15.i32[0] = 1073741822;
    a9.i32[0] = v24;
    int8x16_t v25 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(a9, v15), 0);
    uint64_t v26 = *(void *)(v16 + 32);
    v27.i64[0] = (int)v26;
    v27.i64[1] = SHIDWORD(v26);
    int8x16_t v28 = vbslq_s8(v25, (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v27));
    double v29 = (double)v22;
    double v30 = (double)v23;
    if (v24 > 1073741822)
    {
      double v29 = 1.79769313e308;
      double v30 = 1.79769313e308;
    }
    float64x2_t v76 = (float64x2_t)v28;
    *(double *)&long long v77 = v29;
    *((double *)&v77 + 1) = v30;
    CA::Rect::apply_transform((int8x16_t *)&v76, a5, (double *)a3);
    *(float *)&unsigned int v31 = v18;
    *(float *)&unsigned int v32 = v19;
    *(void *)&long long v79 = __PAIR64__(v32, v31);
    *(void *)&long long v81 = 0x3C003C003C003C00;
    *(float *)&unsigned int v33 = v21;
    *(void *)&long long v82 = __PAIR64__(v33, v31);
    *(void *)&long long v84 = 0x3C003C003C003C00;
    *(float *)&unsigned int v34 = v20;
    *(void *)&long long v85 = __PAIR64__(v32, v34);
    *(void *)&long long v87 = 0x3C003C003C003C00;
    *(void *)&long long v88 = __PAIR64__(v33, v34);
    float64x2_t v35 = vsubq_f64(*(float64x2_t *)a4, v76);
    float64x2_t v36 = vaddq_f64(*(float64x2_t *)(a4 + 16), v35);
    *(float32x2_t *)&v35.f64[0] = vcvt_f32_f64(v35);
    *((void *)&v79 + 1) = 0x3F80000000000000;
    *(float64_t *)&long long v80 = v35.f64[0];
    *(float32x2_t *)&v36.f64[0] = vcvt_f32_f64(v36);
    unint64_t v37 = __PAIR64__(HIDWORD(v35.f64[0]), LODWORD(v36.f64[0]));
    HIDWORD(v35.f64[0]) = HIDWORD(v36.f64[0]);
    *((void *)&v82 + 1) = 0x3F80000000000000;
    *(float64_t *)&long long v83 = v35.f64[0];
    *((void *)&v85 + 1) = 0x3F80000000000000;
    *(void *)&long long v86 = v37;
    *((void *)&v88 + 1) = 0x3F80000000000000;
    *(float64_t *)&long long v89 = v36.f64[0];
    *(void *)&long long v90 = 0x3C003C003C003C00;
    CA::OGL::Context::bind_surface(a3, v16, 0, 1u, 1, 0.0);
    double v39 = *(float32x4_t **)(a3 + 16);
    if ((*((unsigned char *)a5 + 144) & 0x10) != 0) {
      double scale = CA::Mat4Impl::mat4_get_scale(a5, 0, 0, v38);
    }
    else {
      double scale = *((double *)a5 + 16);
    }
    float v41 = 1.0 / scale;
    v39[6] = vmulq_n_f32(v39[6], v41);
    uint64_t v42 = *(void *)(*(void *)(a3 + 248) + 8);
    *(void *)&v91[0] = a3;
    *((void *)&v91[0] + 1) = v42;
    memset(&v91[1], 0, 40);
    LOWORD(v91[2]) = 0;
    CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)v91);
    v75[0] = 0;
    v75[1] = 0;
    while (CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)v91, v75))
      (*(void (**)(uint64_t, uint64_t, uint64_t, void, long long *, void, uint64_t, void))(*(void *)a3 + 280))(a3, 2, 4, 0, &v79, 0, 4, 0);
    __n128 result = CA::OGL::Context::unbind_surface((void *)a3, v16, 0);
  }
  if (v17)
  {
    memset(v78, 0, 72);
    float64x2_t v76 = 0u;
    long long v77 = 0u;
    memset(v91, 0, sizeof(v91));
    long long v92 = 0u;
    LOWORD(v91[0]) = 257;
    *(_OWORD *)((char *)&v91[12] + 8) = *(_OWORD *)((char *)v78 + 8);
    *(_OWORD *)((char *)&v91[13] + 8) = *(_OWORD *)((char *)&v78[1] + 8);
    *(_OWORD *)((char *)v91 + 8) = xmmword_184997D50;
    *(_OWORD *)((char *)&v91[1] + 8) = 0u;
    *(_OWORD *)((char *)&v91[2] + 8) = xmmword_184997D60;
    memset((char *)&v91[3] + 8, 0, 32);
    *(_OWORD *)((char *)&v91[5] + 8) = xmmword_184997D50;
    *(_OWORD *)((char *)&v91[6] + 8) = 0u;
    *(_OWORD *)((char *)&v91[7] + 8) = xmmword_184997D60;
    int32x4_t v44 = *(int32x4_t *)a4;
    int32x4_t v45 = *(int32x4_t *)(a4 + 16);
    float64x2_t v73 = *(float64x2_t *)a4;
    int32x4_t v74 = v45;
    *(_OWORD *)((char *)&v91[8] + 8) = *(_OWORD *)a4;
    *(int32x4_t *)((char *)&v91[9] + 8) = v45;
    int v46 = *(_DWORD *)(v17 + 40);
    int v47 = *(_DWORD *)(v17 + 44);
    if (v46 <= v47) {
      int v48 = *(_DWORD *)(v17 + 44);
    }
    else {
      int v48 = *(_DWORD *)(v17 + 40);
    }
    v44.i32[0] = 1073741822;
    v45.i32[0] = v48;
    int8x16_t v49 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v45, v44), 0);
    uint64_t v50 = *(void *)(v17 + 32);
    v51.i64[0] = (int)v50;
    v51.i64[1] = SHIDWORD(v50);
    int8x16_t v52 = vbslq_s8(v49, (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v51));
    double v53 = (double)v46;
    double v54 = (double)v47;
    if (v48 > 1073741822)
    {
      double v53 = 1.79769313e308;
      double v54 = 1.79769313e308;
    }
    *(int8x16_t *)((char *)&v91[10] + 8) = v52;
    *((double *)&v91[11] + 1) = v53;
    *(double *)&v91[12] = v54;
    CA::Rect::apply_transform((int8x16_t *)((char *)&v91[10] + 8), a5, v43);
    *(float64x2_t *)((char *)&v78[2] + 8) = v73;
    *(int32x4_t *)((char *)&v78[3] + 8) = v74;
    uint64_t v55 = *(void *)(a2 + 32);
    if (!v55) {
      goto LABEL_37;
    }
    double v56 = *(unsigned int **)(v55 + 40);
    if (!v56) {
      goto LABEL_37;
    }
    uint64_t v57 = v56[4];
    if (!v57) {
      goto LABEL_37;
    }
    uint64_t v58 = 0;
    while (1)
    {
      uint64_t v59 = *(void *)&v56[2 * v58 + 6];
      if (*(_DWORD *)(v59 + 16) == 286) {
        break;
      }
      if (v57 == ++v58) {
        goto LABEL_37;
      }
    }
    if ((v58 & 0x80000000) == 0 && *(void *)(v59 + 24))
    {
      BYTE8(v91[16]) = 0;
      unsigned int v60 = bswap32(CA::Render::KeyValueArray::get_color_key((CA::Render::KeyValueArray *)v56, 286, 0));
      v61.i32[0] = v60;
      v61.i32[1] = v60 >> 8;
      v61.i32[2] = HIWORD(v60);
      v62.i64[0] = 0xFF000000FFLL;
      v62.i64[1] = 0xFF000000FFLL;
      int32x4_t v63 = (int32x4_t)vandq_s8(v61, v62);
      v63.i32[3] = vshrq_n_u32((uint32x4_t)vdupq_n_s32(v60), 0x18uLL).i32[3];
      float16x4_t v64 = vcvt_f16_f32(vmulq_f32(vcvtq_f32_s32(v63), (float32x4_t)vdupq_n_s32(0x3B808081u)));
      float16x4_t v65 = vcvt_f16_f32(vmulq_f32(vcvtq_f32_f16((float16x4_t)0x3C003A063A063A06), vcvtq_f32_f16(v64)));
      *((float16x4_t *)&v91[15] + 1) = v64;
      *(float16x4_t *)&v91[16] = v65;
    }
    else
    {
LABEL_37:
      BYTE8(v91[16]) = 1;
      *(_OWORD *)((char *)&v91[15] + 8) = xmmword_184998070;
      float16x4_t v65 = (float16x4_t)0x3C00356534743434;
      float16x4_t v64 = (float16x4_t)0xC500C500C500C500;
    }
    *(void *)&long long v66 = 0x3C003C003C003C00;
    *((void *)&v66 + 1) = 0x3C003C003C003C00;
    *(_OWORD *)((char *)&v91[14] + 8) = v66;
    *(void *)&long long v92 = 0x3C002E462A870000;
    *((void *)&v92 + 1) = 0x4014000000000000;
    if (v76.f64[0] > 0.850000024)
    {
      _D3 = v76.f64[0] * -1699.99993 + 1699.99998;
      *(float *)&_D3 = (float)(int)_D3 * 0.0039216;
      __asm { FCVT            H3, S3 }
      float32x4_t v72 = vcvtq_f32_f16((float16x4_t)vdup_lane_s16(*(int16x4_t *)&_D3, 0));
      *((float16x4_t *)&v91[14] + 1) = vcvt_f16_f32(vmulq_f32(v72, vcvtq_f32_f16((float16x4_t)0x3C003C003C003C00)));
      *(void *)&v91[15] = *((void *)&v91[14] + 1);
      *(float16x4_t *)&v91[16] = vcvt_f16_f32(vmulq_f32(v72, vcvtq_f32_f16(v65)));
      *((float16x4_t *)&v91[15] + 1) = vcvt_f16_f32(vmulq_f32(v72, vcvtq_f32_f16(v64)));
      *(float16x4_t *)&long long v92 = vcvt_f16_f32(vmulq_f32(v72, vcvtq_f32_f16((float16x4_t)0x3C002E462A870000)));
    }
  }
  else
  {
    *(void *)(a3 + 816) = 0;
    ++*(_DWORD *)(a3 + 256);
    *(unsigned char *)(*(void *)(a3 + 16) + 16) = 0;
    *(unsigned char *)(*(void *)(a3 + 16) + 481) &= ~1u;
  }
  return result;
}

__n128 CA::OGL::anonymous namespace'::curl_transition_get_in_state(uint64_t a1, __n128 *a2, uint64_t a3, int a4)
{
  float v7 = *(float *)(a1 + 48);
  if (a4) {
    float v7 = 1.0 - v7;
  }
  double v8 = v7;
  *(double *)a3 = v8;
  *(void *)(a3 + 16) = 0x4062C00000000000;
  double v9 = CA::Render::TimingFunction::evaluate((CA::Render::TimingFunction *)&unk_18499AE90, a2->n128_f64, v8, 0.00001)
     * 0.523598776;
  double v10 = v9 + 3.92699082;
  *(double *)(a3 + 8) = v9 + 3.92699082;
  *(_OWORD *)(a3 + 24) = xmmword_184998080;
  int v11 = *(_DWORD *)(a1 + 20);
  if (v11 == 240)
  {
    double v12 = 5.49778714;
    goto LABEL_7;
  }
  if (v11 == 241)
  {
    double v12 = 2.35619449;
LABEL_7:
    double v10 = v9 + v12;
    *(double *)(a3 + 8) = v10;
  }
  float v13 = v10;
  __float2 v14 = __sincosf_stret(v13);
  double cosval = v14.__cosval;
  if (fabs(v14.__cosval) < 0.001 || (double sinval = v14.__sinval, fabs(v14.__sinval) < 0.001))
  {
    double cosval = roundf(v14.__cosval);
    double sinval = roundf(v14.__sinval);
  }
  *(double *)(a3 + 40) = cosval;
  *(double *)(a3 + 48) = sinval;
  *(double *)(a3 + 56) = -sinval;
  *(double *)(a3 + 64) = cosval;
  *(__n128 *)(a3 + 72) = *a2;
  __n128 result = a2[1];
  *(__n128 *)(a3 + 88) = result;
  return result;
}

__n128 CA::OGL::anonymous namespace'::PageCurlTransition::ROI(uint64_t a1, uint64_t a2, __n128 *a3, uint64_t a4, uint64_t a5, __n128 *a6, __n128 *a7)
{
  *a6 = *a3;
  a6[1] = a3[1];
  *a7 = *a3;
  __n128 result = a3[1];
  a7[1] = result;
  return result;
}

double CA::OGL::anonymous namespace'::PageCurlTransition::DOD@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X2>, const CA::Transform *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v22 = 0;
  memset(v21, 0, sizeof(v21));
  unint64_t v8 = a3->n128_u64[0];
  unint64_t v9 = a3->n128_u64[1];
  *(void *)a5 = a3->n128_u64[0];
  *(void *)(a5 + 8) = v9;
  unint64_t v10 = a3[1].n128_u64[0];
  unint64_t v11 = a3[1].n128_u64[1];
  *(void *)(a5 + 16) = v10;
  *(void *)(a5 + 24) = v11;
  unint64_t v23 = v8;
  unint64_t v24 = v9;
  unint64_t v25 = v10;
  unint64_t v26 = v11;
  float64x2_t v13 = *(float64x2_t *)(a5 + 16);
  float64x2_t v14 = (float64x2_t)a3[1];
  int64x2_t v15 = vclezq_f64(v13);
  int64x2_t v16 = vclezq_f64(v14);
  int32x2_t v17 = vmovn_s64(vcltzq_s64((int64x2_t)vorrq_s8((int8x16_t)vzip1q_s64(v16, v15), (int8x16_t)vzip2q_s64(v16, v15))));
  if (v17.i8[4])
  {
    if (v17.i8[0]) {
      goto LABEL_7;
    }
    float64x2_t v18 = *(float64x2_t *)a3;
  }
  else
  {
    if (v17.i8[0]) {
      goto LABEL_7;
    }
    float64x2_t v19 = vaddq_f64(*(float64x2_t *)a5, v13);
    float64x2_t v18 = vminnmq_f64(*(float64x2_t *)a5, *(float64x2_t *)a3);
    float64x2_t v14 = vsubq_f64(vmaxnmq_f64(v19, vaddq_f64(*(float64x2_t *)a3, v14)), v18);
  }
  *(float64x2_t *)a5 = v18;
  *(float64x2_t *)(a5 + 16) = v14;
LABEL_7:

  return CA::Rect::apply_transform((int8x16_t *)a5, a4, v12);
}

void CA::Render::Object::show(CA::Render::Object *this)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    uint64_t v2 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *((unsigned __int8 *)this + 12);
      if (v3 > 0x38 || (long long v4 = CA::Render::type_names[v3], !*v4)) {
        long long v4 = "<unknown>";
      }
      *(_DWORD *)long long buf = 136315138;
      double v6 = v4;
      _os_log_impl(&dword_184668000, v2, OS_LOG_TYPE_DEFAULT, "(%s)", buf, 0xCu);
    }
  }
}

void CA::Render::Object::~Object(CA::Render::Object *this, const CA::Render::Object *a2)
{
  *(void *)this = &unk_1ED02F670;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0) {
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
  }

  JUMPOUT(0x185323DC0);
}

{
  *(void *)this = &unk_1ED02F670;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0) {
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
  }
}

atomic_uint **CA::Render::mix_objects(atomic_uint **this, unint64_t a2, atomic_uint *a3, atomic_uint *a4, unint64_t a5, const CA::Render::ValueInterpolator *a6)
{
  if (!a3 || !a4) {
    goto LABEL_25;
  }
  if (*(double *)a6 <= 0.0)
  {
    float64x2_t v13 = a3 + 2;
    if (!atomic_fetch_add(a3 + 2, 1u))
    {
      a3 = 0;
      atomic_fetch_add(v13, 0xFFFFFFFF);
    }
    *this = a3;
  }
  else if (*(double *)a6 >= 1.0)
  {
    float64x2_t v14 = a4 + 2;
    if (!atomic_fetch_add(a4 + 2, 1u))
    {
      a4 = 0;
      atomic_fetch_add(v14, 0xFFFFFFFF);
    }
    *this = a4;
  }
  else
  {
    if (*((unsigned char *)a6 + 112) && a2 | a5)
    {
      int v6 = *((unsigned __int8 *)a3 + 12);
      if (v6 == 26)
      {
        a3 = (atomic_uint *)*((void *)a3 + 4);
        if (!a3) {
          goto LABEL_25;
        }
        int v6 = *((unsigned __int8 *)a3 + 12);
      }
      int v7 = *((unsigned __int8 *)a4 + 12);
      if (v7 == 26)
      {
        uint64_t v8 = *((void *)a4 + 4);
        if (!v8) {
          goto LABEL_25;
        }
        int v7 = *(unsigned __int8 *)(v8 + 12);
      }
      if (v6 == v7)
      {
        if (a2)
        {
          int v9 = *(unsigned __int8 *)(a2 + 12);
          if (v9 == 26)
          {
            uint64_t v10 = *(void *)(a2 + 32);
            if (!v10) {
              goto LABEL_25;
            }
            int v9 = *(unsigned __int8 *)(v10 + 12);
          }
          if (v9 != v6) {
            goto LABEL_25;
          }
        }
        if (!a5) {
          return (atomic_uint **)(*(uint64_t (**)(atomic_uint *))(*(void *)a3 + 64))(a3);
        }
        int v11 = *(unsigned __int8 *)(a5 + 12);
        if (v11 != 26) {
          goto LABEL_23;
        }
        uint64_t v12 = *(void *)(a5 + 32);
        if (v12)
        {
          int v11 = *(unsigned __int8 *)(v12 + 12);
LABEL_23:
          if (v11 == v6) {
            return (atomic_uint **)(*(uint64_t (**)(atomic_uint *))(*(void *)a3 + 64))(a3);
          }
        }
      }
LABEL_25:
      *this = 0;
      return this;
    }
    return (atomic_uint **)(*(uint64_t (**)(atomic_uint *, atomic_uint *, const CA::Render::ValueInterpolator *))(*(void *)a3 + 56))(a3, a4, a6);
  }
  return this;
}

void CA::Render::show_object(CA::Render *this, const CA::Render::Object *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  CA::Render::show_object(this, 0);
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    uint64_t v2 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl(&dword_184668000, v2, OS_LOG_TYPE_DEFAULT, "\n", v3, 2u);
    }
  }
}

{
  void (*v2)(void);
  NSObject *v3;
  uint8_t v4[8];
  uint64_t v5;
  uint64_t vars8;

  double v5 = *MEMORY[0x1E4F143B8];
  if (this)
  {
    uint64_t v2 = *(void (**)(void))(*(void *)this + 40);
    v2();
  }
  else if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    uint64_t v3 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl(&dword_184668000, v3, OS_LOG_TYPE_DEFAULT, "()", v4, 2u);
    }
  }
}

void CA::Render::show_newline(CA::Render *this)
{
  int v1 = (int)this;
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    uint64_t v2 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109378;
      int v4 = 2 * v1;
      __int16 v5 = 2080;
      int v6 = "";
      _os_log_impl(&dword_184668000, v2, OS_LOG_TYPE_DEFAULT, "\n%*s", buf, 0x12u);
    }
  }
}

void CA::Render::show_transform(CA::Render *this, const char *a2, const double *a3)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  CA::Render::show_newline((CA::Render *)(a3 + 1));
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    __int16 v5 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)a2;
      uint64_t v7 = *((void *)a2 + 1);
      uint64_t v8 = *((void *)a2 + 2);
      uint64_t v9 = *((void *)a2 + 3);
      uint64_t v10 = *((void *)a2 + 4);
      uint64_t v11 = *((void *)a2 + 5);
      uint64_t v12 = *((void *)a2 + 6);
      uint64_t v13 = *((void *)a2 + 7);
      uint64_t v15 = *((void *)a2 + 8);
      uint64_t v14 = *((void *)a2 + 9);
      uint64_t v16 = *((void *)a2 + 10);
      uint64_t v17 = *((void *)a2 + 11);
      uint64_t v18 = *((void *)a2 + 12);
      uint64_t v19 = *((void *)a2 + 13);
      uint64_t v20 = *((void *)a2 + 14);
      uint64_t v21 = *((void *)a2 + 15);
      *(_DWORD *)long long buf = 136319234;
      unint64_t v23 = this;
      __int16 v24 = 2048;
      uint64_t v25 = v6;
      __int16 v26 = 2048;
      uint64_t v27 = v7;
      __int16 v28 = 2048;
      uint64_t v29 = v8;
      __int16 v30 = 2048;
      uint64_t v31 = v9;
      __int16 v32 = 2048;
      uint64_t v33 = v10;
      __int16 v34 = 2048;
      uint64_t v35 = v11;
      __int16 v36 = 2048;
      uint64_t v37 = v12;
      __int16 v38 = 2048;
      uint64_t v39 = v13;
      __int16 v40 = 2048;
      uint64_t v41 = v15;
      __int16 v42 = 2048;
      uint64_t v43 = v14;
      __int16 v44 = 2048;
      uint64_t v45 = v16;
      __int16 v46 = 2048;
      uint64_t v47 = v17;
      __int16 v48 = 2048;
      uint64_t v49 = v18;
      __int16 v50 = 2048;
      uint64_t v51 = v19;
      __int16 v52 = 2048;
      uint64_t v53 = v20;
      __int16 v54 = 2048;
      uint64_t v55 = v21;
      _os_log_impl(&dword_184668000, v5, OS_LOG_TYPE_DEFAULT, "(%s [%g %g %g %g; %g %g %g %g; %g %g %g %g; %g %g %g %g])",
        buf,
        0xACu);
    }
  }
}

void CA::Render::show_affine_transform(CA::Render *this, const char *a2, const CGAffineTransform *a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  CA::Render::show_newline((CA::Render *)(a3 + 1));
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    __int16 v5 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)a2;
      uint64_t v7 = *((void *)a2 + 1);
      uint64_t v8 = *((void *)a2 + 2);
      uint64_t v9 = *((void *)a2 + 3);
      uint64_t v10 = *((void *)a2 + 4);
      uint64_t v11 = *((void *)a2 + 5);
      *(_DWORD *)long long buf = 136316674;
      uint64_t v13 = this;
      __int16 v14 = 2048;
      uint64_t v15 = v6;
      __int16 v16 = 2048;
      uint64_t v17 = v7;
      __int16 v18 = 2048;
      uint64_t v19 = v8;
      __int16 v20 = 2048;
      uint64_t v21 = v9;
      __int16 v22 = 2048;
      uint64_t v23 = v10;
      __int16 v24 = 2048;
      uint64_t v25 = v11;
      _os_log_impl(&dword_184668000, v5, OS_LOG_TYPE_DEFAULT, "(%s [%g %g %g %g %g %g])", buf, 0x48u);
    }
  }
}

void CA::Render::show_cfstring(const __CFString *this, const __CFString *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (this)
  {
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    *(_OWORD *)long long buffer = 0u;
    long long v6 = 0u;
    if (CFStringGetCString(this, buffer, 512, 0x8000100u))
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        uint64_t v2 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 136315138;
          int v4 = buffer;
          _os_log_impl(&dword_184668000, v2, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
        }
      }
    }
  }
}

void CA::Render::show_statistics(CA::Render *this)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (x_log_hook_p())
  {
    uint64_t v1 = mach_absolute_time();
    CATimeWithHostTime(v1);
    x_log_();
  }
  else
  {
    uint64_t v2 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = mach_absolute_time();
      *(_DWORD *)long long buf = 134217984;
      double v10 = CATimeWithHostTime(v3);
      _os_log_impl(&dword_184668000, v2, OS_LOG_TYPE_DEFAULT, "\n** Render objects at time %f **\n\n", buf, 0xCu);
    }
  }
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    int v4 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315394;
      double v10 = COERCE_DOUBLE("TYPE");
      __int16 v11 = 2080;
      long long v12 = "COUNT";
      _os_log_impl(&dword_184668000, v4, OS_LOG_TYPE_DEFAULT, "%20s %s\n", buf, 0x16u);
    }
  }
  for (uint64_t i = 0; i != 57; ++i)
  {
    if (CA::Render::Object::_instance_counts[i])
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        long long v6 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          long long v7 = CA::Render::type_names[i];
          if (!*v7) {
            long long v7 = "<unknown>";
          }
          int v8 = CA::Render::Object::_instance_counts[i];
          *(_DWORD *)long long buf = 136315394;
          double v10 = *(double *)&v7;
          __int16 v11 = 1024;
          LODWORD(v12) = v8;
          _os_log_impl(&dword_184668000, v6, OS_LOG_TYPE_DEFAULT, "%20s %d\n", buf, 0x12u);
        }
      }
    }
  }
}

uint64_t CA::WindowServer::Display::create_surface()
{
  return 0;
}

uint64_t CA::WindowServer::Display::idle(os_unfair_lock_s *this)
{
  CA::WindowServer::Display::purge_surfaces(this, 1);
  uint64_t result = *(void *)&this[72]._os_unfair_lock_opaque;
  if (result)
  {
    uint64_t result = CA::IOSAManager::unref(result);
    *(void *)&this[72]._uint32_t os_unfair_lock_opaque = 0;
  }
  return result;
}

uint64_t CA::WindowServer::Display::release_resources(os_unfair_lock_s *this)
{
  CA::WindowServer::Display::purge_surfaces(this, 1);
  uint64_t result = *(void *)&this[72]._os_unfair_lock_opaque;
  if (result)
  {
    uint64_t result = CA::IOSAManager::unref(result);
    *(void *)&this[72]._uint32_t os_unfair_lock_opaque = 0;
  }
  return result;
}

uint64_t CA::WindowServer::Display::set_signal_type(uint64_t result, char a2)
{
  *(unsigned char *)(result + 636) = a2;
  return result;
}

void CA::WindowServer::Display::emit_mode_set_signpost(CA::WindowServer::Display *this)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (CA::WindowServer::Display::get_display_perf_log(void)::once_token[0] != -1) {
    dispatch_once(CA::WindowServer::Display::get_display_perf_log(void)::once_token, &__block_literal_global_71);
  }
  os_signpost_id_t v2 = *((unsigned int *)this + 6);
  if (v2)
  {
    uint64_t v3 = CA::WindowServer::Display::get_display_perf_log(void)::log;
    if (os_signpost_enabled((os_log_t)CA::WindowServer::Display::get_display_perf_log(void)::log))
    {
      uint64_t v4 = *((void *)this + 83);
      v5[0] = 67240448;
      v5[1] = v2;
      __int16 v6 = 2050;
      uint64_t v7 = v4;
      _os_signpost_emit_with_name_impl(&dword_184668000, v3, OS_SIGNPOST_EVENT, v2, "ModeSet", "displayId=%{public, name=displayId}u begin=%{public,signpost.description:begin_time}llu", (uint8_t *)v5, 0x12u);
    }
  }
}

os_log_t ___ZN2CA12WindowServer7Display20get_display_perf_logEv_block_invoke()
{
  os_log_t result = os_log_create("com.apple.coreanimation", "Display.Performance");
  CA::WindowServer::Display::get_display_perf_log(void)::log = (uint64_t)result;
  return result;
}

uint64_t CA::WindowServer::Display::copy_string()
{
  return 0;
}

uint64_t CA::WindowServer::Display::refresh_rate(CA::WindowServer::Display *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 736))();
}

uint64_t CA::WindowServer::Display::set_mode(CA::WindowServer::Display *this, const CA::WindowServer::Display::Mode *a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t result = CA::WindowServer::Display::Mode::operator==(*((void *)this + 80), *(void *)a2);
  if ((result & 1) == 0)
  {
    *((void *)this + 80) = v3;
    return CA::WindowServer::Display::post_display_changed((uint64_t)this);
  }
  return result;
}

uint64_t CA::WindowServer::Display::post_display_changed(uint64_t this)
{
  uint64_t v1 = this;
  if (*(unsigned char *)(this + 672))
  {
    *(_DWORD *)(this + 745) |= 0x8000u;
  }
  else
  {
    ++*(_DWORD *)(this + 28);
    uint64_t v2 = mach_absolute_time();
    double v3 = CATimeWithHostTime(v2) + 0.01;
    return CA::Render::Server::add_callback(1, (uint64_t)CA::WindowServer::Display::post_display_changed_callback, v1, v3);
  }
  return this;
}

uint64_t CA::WindowServer::Display::post_display_changed_callback(CA::WindowServer::Display *this, double a2, void *a3)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    uint64_t v4 = x_log_category_windowserver;
    if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int16 v6 = 0;
      _os_log_impl(&dword_184668000, v4, OS_LOG_TYPE_DEFAULT, "Posting display changed notification", v6, 2u);
    }
  }
  CA::Render::post_notification(0x2Fu, 0, (uint64_t)this, 0);
  return notify_post("com.apple.CoreAnimation.CAWindowServer.DisplayChanged");
}

uint64_t CA::WindowServer::Display::clone_update(CA::WindowServer::Display *this, CA::WindowServer::Server *a2, CA::WindowServer::Display *a3, CA::Render::Update *a4, unsigned int *a5, BOOL *a6)
{
  return 0;
}

uint64_t CA::WindowServer::Display::color_flush_shape(CA::WindowServer::Display *this, const CA::Render::Update *a2)
{
  if ((_BYTE)ca_debug_options) {
    return *((void *)a2 + 2);
  }
  else {
    return 0;
  }
}

uint64_t CA::WindowServer::Display::current_surface(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::finish_update(CA::WindowServer::Display *this, CA::Render::Update *a2)
{
  return 0;
}

uint64_t CA::WindowServer::Display::framebuffer_format(CA::WindowServer::Display *this)
{
  return 0;
}

void CA::WindowServer::Display::iosurface_alignment(void *a1@<X8>)
{
  *a1 = 64;
  a1[1] = qword_1EB2A87C8;
  a1[2] = 1;
  a1[3] = *MEMORY[0x1E4F14B00];
  a1[4] = 0;
}

uint64_t CA::WindowServer::Display::supports_hlg(CA::WindowServer::Display *this)
{
  return 0;
}

BOOL CA::WindowServer::Display::supports_pq(CA::WindowServer::Display *this)
{
  return ((*((void *)this + 80) >> 55) & 0x1E) - 16 < 0xA;
}

double CA::WindowServer::Display::max_scale(CA::WindowServer::Display *this)
{
  return 1.0;
}

double CA::WindowServer::Display::min_scale(CA::WindowServer::Display *this)
{
  return 1.0;
}

double CA::WindowServer::Display::panel_physical_size(CA::WindowServer::Display *this)
{
  return 0.0;
}

CA::WindowServer::Display::Mode *CA::WindowServer::Display::Mode::Mode(CA::WindowServer::Display::Mode *this, CFDictionaryRef theDict)
{
  *(void *)this = 0;
  if (theDict)
  {
    Value = CFDictionaryGetValue(theDict, @"width");
    if (Value) {
      uint64_t v5 = CA_CFIntValue(Value) & 0x3FFF;
    }
    else {
      uint64_t v5 = 0;
    }
    *(void *)this = *(void *)this & 0xFFFFFFFFFFFFC000 | v5;
    __int16 v6 = CFDictionaryGetValue(theDict, @"height");
    if (v6) {
      uint64_t v7 = (unsigned __int16)(CA_CFIntValue(v6) & 0x3FFF) << 14;
    }
    else {
      uint64_t v7 = 0;
    }
    *(void *)this = *(void *)this & 0xFFFFFFFFF0003FFFLL | v7;
    uint64_t v8 = CFDictionaryGetValue(theDict, @"refreshRate");
    if (v8) {
      uint64_t v9 = (CA_CFIntValue(v8) & 0x1FFFFFF) << 29;
    }
    else {
      uint64_t v9 = 0;
    }
    *(void *)this = v9 | *(void *)this & 0xFFC000001FFFFFFFLL;
    double v10 = CFDictionaryGetValue(theDict, @"isVirtual");
    if (v10)
    {
      BOOL v11 = CA_CFBoolValue(v10);
      uint64_t v12 = 0x40000000000000;
      if (!v11) {
        uint64_t v12 = 0;
      }
    }
    else
    {
      uint64_t v12 = 0;
    }
    *(void *)this = *(void *)this & 0xFFBFFFFFFFFFFFFFLL | v12;
    uint64_t v13 = CFDictionaryGetValue(theDict, @"pixelFormat");
    if (v13) {
      uint64_t v14 = (CA_CFIntValue(v13) & 0x1F) << 55;
    }
    else {
      uint64_t v14 = 0;
    }
    *(void *)this = v14 | *(void *)this & 0xF07FFFFFFFFFFFFFLL;
    long long v15 = CFDictionaryGetValue(theDict, @"colorRange");
    if (v15) {
      uint64_t v16 = (CA_CFIntValue(v15) & 3) << 60;
    }
    else {
      uint64_t v16 = 0;
    }
    *(void *)this = v16 | *(void *)this & 0xCFFFFFFFFFFFFFFFLL;
    long long v17 = CFDictionaryGetValue(theDict, @"isUnsafe");
    if (v17)
    {
      BOOL v18 = CA_CFBoolValue(v17);
      uint64_t v19 = 0x4000000000000000;
      if (!v18) {
        uint64_t v19 = 0;
      }
    }
    else
    {
      uint64_t v19 = 0;
    }
    *(void *)this = *(void *)this & 0xBFFFFFFFFFFFFFFFLL | v19;
  }
  return this;
}

BOOL CA::WindowServer::Display::Mode::operator<(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = ((v3 >> 14) & 0x3FFF) * (v3 & 0x3FFF) * (((v3 >> 29) >> 16) & 0x1FF);
  unint64_t v5 = ((*a2 >> 14) & 0x3FFF) * (*a2 & 0x3FFF) * (((*a2 >> 29) >> 16) & 0x1FF);
  if (v4 < v5) {
    return 1;
  }
  if (v4 > v5) {
    return 0;
  }
  uint64_t v6 = (v3 >> 29) & 0x1FFFFFF;
  uint64_t v7 = (*a2 >> 29) & 0x1FFFFFF;
  if (v6 < v7) {
    return 1;
  }
  if (v6 > v7) {
    return 0;
  }
  unsigned int v9 = CA::WindowServer::Display::Mode::hdr_type(v3);
  if (v9 < CA::WindowServer::Display::Mode::hdr_type(*a2)) {
    return 1;
  }
  unsigned int v10 = CA::WindowServer::Display::Mode::hdr_type(*a1);
  if (v10 > CA::WindowServer::Display::Mode::hdr_type(*a2)) {
    return 0;
  }
  uint64_t v11 = *a1;
  unsigned int v12 = (*a1 >> 52) & 0xF8 | (*a1 >> 60) & 3;
  uint64_t v13 = *a2;
  unsigned int v14 = (*a2 >> 52) & 0xF8 | (*a2 >> 60) & 3;
  if (v12 < v14) {
    return 1;
  }
  if (v12 > v14) {
    return 0;
  }
  if ((v11 & 0x40000000000000) != 0)
  {
    if ((v13 & 0x40000000000000) == 0) {
      return 1;
    }
  }
  else if ((v13 & 0x40000000000000) != 0)
  {
    return 0;
  }
  return v11 < 0 && v13 >= 0;
}

uint64_t CA::WindowServer::Display::ModeSet::sort(CA::WindowServer::Display::ModeSet *this)
{
  uint64_t v2 = *(void *)this;
  unint64_t v3 = (unint64_t *)*((void *)this + 1);
  unint64_t v4 = 126 - 2 * __clz(((uint64_t)v3 - v2) >> 3);
  if (v3 == (unint64_t *)v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v4;
  }
  uint64_t result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,CA::WindowServer::Display::Mode *,false>(v2, v3, v5, 1);
  unint64_t v7 = *(void *)this;
  uint64_t v8 = *((void *)this + 1);
  unsigned int v9 = (void *)(v8 - 8);
  if (*(void *)this != v8 && (unint64_t)v9 > v7)
  {
    unint64_t v11 = v7 + 8;
    do
    {
      uint64_t v12 = *(void *)(v11 - 8);
      *(void *)(v11 - 8) = *v9;
      *v9-- = v12;
      BOOL v13 = v11 >= (unint64_t)v9;
      v11 += 8;
    }
    while (!v13);
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,CA::WindowServer::Display::Mode *,false>(uint64_t result, unint64_t *a2, uint64_t a3, char a4)
{
  unsigned int v9 = (unint64_t *)result;
  v69[1] = *MEMORY[0x1E4F143B8];
  while (2)
  {
    unsigned int v10 = a2 - 1;
    float16x4_t v65 = a2 - 3;
    long long v66 = a2 - 2;
    unint64_t v11 = v9;
    uint64_t v67 = a2;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unsigned int v9 = v11;
          uint64_t v12 = (char *)a2 - (char *)v11;
          unint64_t v13 = v12 >> 3;
          if (v5 || !v4)
          {
            switch(v13)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                uint64_t result = CA::WindowServer::Display::Mode::operator<(v10, v9);
                if (result)
                {
                  unint64_t v28 = *v9;
                  *unsigned int v9 = *v10;
                  *unsigned int v10 = v28;
                }
                break;
              case 3uLL:
                uint64_t result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CA::WindowServer::Display::Mode *>(v9, v9 + 1, v10);
                break;
              case 4uLL:
                uint64_t result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CA::WindowServer::Display::Mode *>(v9, v9 + 1, v9 + 2, v10);
                break;
              case 5uLL:
                uint64_t result = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CA::WindowServer::Display::Mode *>(v9, v9 + 1, v9 + 2, v9 + 3, v10);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v12 <= 191)
          {
            long long v29 = v9 + 1;
            BOOL v31 = v9 == a2 || v29 == a2;
            if (a4)
            {
              if (!v31)
              {
                uint64_t v32 = 0;
                long long v33 = v9;
                do
                {
                  long long v34 = v33;
                  long long v33 = v29;
                  uint64_t result = CA::WindowServer::Display::Mode::operator<(v29, v34);
                  if (result)
                  {
                    v69[0] = *v33;
                    uint64_t v35 = v32;
                    while (1)
                    {
                      *(unint64_t *)((char *)v9 + v35 + 8) = *(unint64_t *)((char *)v9 + v35);
                      if (!v35) {
                        break;
                      }
                      v35 -= 8;
                      uint64_t result = CA::WindowServer::Display::Mode::operator<(v69, (unint64_t *)((char *)v9 + v35));
                      if ((result & 1) == 0)
                      {
                        long long v36 = (unint64_t *)((char *)v9 + v35 + 8);
                        goto LABEL_79;
                      }
                    }
                    long long v36 = v9;
LABEL_79:
                    *long long v36 = v69[0];
                  }
                  long long v29 = v33 + 1;
                  v32 += 8;
                }
                while (v33 + 1 != a2);
              }
            }
            else if (!v31)
            {
              do
              {
                int8x16_t v61 = v9;
                unsigned int v9 = v29;
                uint64_t result = CA::WindowServer::Display::Mode::operator<(v29, v61);
                if (result)
                {
                  v69[0] = *v9;
                  int8x16_t v62 = v9;
                  do
                  {
                    int32x4_t v63 = v62;
                    unint64_t v64 = *--v62;
                    *int32x4_t v63 = v64;
                    uint64_t result = CA::WindowServer::Display::Mode::operator<(v69, v63 - 2);
                  }
                  while ((result & 1) != 0);
                  *int8x16_t v62 = v69[0];
                }
                long long v29 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v9 != a2)
            {
              int64_t v37 = (v13 - 2) >> 1;
              int64_t v38 = v37;
              do
              {
                int64_t v39 = v38;
                if (v37 >= v38)
                {
                  uint64_t v40 = (2 * v38) | 1;
                  uint64_t v41 = &v9[v40];
                  if (2 * v38 + 2 < (uint64_t)v13 && CA::WindowServer::Display::Mode::operator<(&v9[v40], v41 + 1))
                  {
                    ++v41;
                    uint64_t v40 = 2 * v39 + 2;
                  }
                  __int16 v42 = &v9[v39];
                  uint64_t result = CA::WindowServer::Display::Mode::operator<(v41, v42);
                  if ((result & 1) == 0)
                  {
                    v69[0] = *v42;
                    do
                    {
                      uint64_t v43 = v41;
                      *__int16 v42 = *v41;
                      if (v37 < v40) {
                        break;
                      }
                      uint64_t v44 = (2 * v40) | 1;
                      uint64_t v41 = &v9[v44];
                      uint64_t v45 = 2 * v40 + 2;
                      if (v45 < (uint64_t)v13 && CA::WindowServer::Display::Mode::operator<(&v9[v44], v41 + 1))
                      {
                        ++v41;
                        uint64_t v44 = v45;
                      }
                      uint64_t result = CA::WindowServer::Display::Mode::operator<(v41, v69);
                      __int16 v42 = v43;
                      uint64_t v40 = v44;
                    }
                    while (!result);
                    *uint64_t v43 = v69[0];
                  }
                }
                int64_t v38 = v39 - 1;
              }
              while (v39);
              uint64_t v46 = (unint64_t)v12 >> 3;
              uint64_t v47 = v67;
              do
              {
                uint64_t v48 = 0;
                unint64_t v68 = *v9;
                uint64_t v49 = v46 - 2;
                if (v46 < 2) {
                  uint64_t v49 = v46 - 1;
                }
                uint64_t v50 = v49 >> 1;
                uint64_t v51 = v9;
                do
                {
                  __int16 v52 = &v51[v48 + 1];
                  uint64_t v53 = (2 * v48) | 1;
                  uint64_t v54 = 2 * v48 + 2;
                  if (v54 < v46)
                  {
                    uint64_t result = CA::WindowServer::Display::Mode::operator<(&v51[v48 + 1], &v51[v48 + 2]);
                    if (result)
                    {
                      ++v52;
                      uint64_t v53 = v54;
                    }
                  }
                  *uint64_t v51 = *v52;
                  uint64_t v51 = v52;
                  uint64_t v48 = v53;
                }
                while (v53 <= v50);
                if (v52 == --v47)
                {
                  *__int16 v52 = v68;
                  uint64_t v56 = v46 - 1;
                }
                else
                {
                  *__int16 v52 = *v47;
                  *uint64_t v47 = v68;
                  uint64_t v55 = (char *)v52 - (char *)v9 + 8;
                  uint64_t v56 = v46 - 1;
                  if (v55 >= 9)
                  {
                    unint64_t v57 = (unint64_t)((v55 >> 3) - 2) >> 1;
                    uint64_t v58 = &v9[v57];
                    uint64_t result = CA::WindowServer::Display::Mode::operator<(v58, v52);
                    if (result)
                    {
                      v69[0] = *v52;
                      do
                      {
                        uint64_t v59 = v58;
                        *__int16 v52 = *v58;
                        if (!v57) {
                          break;
                        }
                        unint64_t v57 = (v57 - 1) >> 1;
                        uint64_t v58 = &v9[v57];
                        uint64_t result = CA::WindowServer::Display::Mode::operator<(v58, v69);
                        __int16 v52 = v59;
                      }
                      while ((result & 1) != 0);
                      *uint64_t v59 = v69[0];
                    }
                  }
                }
                BOOL v60 = v46 <= 2;
                uint64_t v46 = v56;
              }
              while (!v60);
            }
            return result;
          }
          unint64_t v14 = v13 >> 1;
          long long v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 >= 0x401)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CA::WindowServer::Display::Mode *>(v9, &v9[v13 >> 1], v10);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CA::WindowServer::Display::Mode *>(v9 + 1, v15 - 1, v66);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CA::WindowServer::Display::Mode *>(v9 + 2, &v9[v14 + 1], v65);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CA::WindowServer::Display::Mode *>(v15 - 1, v15, &v9[v14 + 1]);
            unint64_t v16 = *v9;
            *unsigned int v9 = *v15;
            unint64_t *v15 = v16;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CA::WindowServer::Display::Mode *>(&v9[v13 >> 1], v9, v10);
          }
          --a3;
          a2 = v67;
          if ((a4 & 1) != 0 || CA::WindowServer::Display::Mode::operator<(v9 - 1, v9)) {
            break;
          }
          v69[0] = *v9;
          uint64_t result = CA::WindowServer::Display::Mode::operator<(v69, v10);
          if (result)
          {
            unint64_t v11 = v9;
            do
              uint64_t result = CA::WindowServer::Display::Mode::operator<(v69, ++v11);
            while ((result & 1) == 0);
          }
          else
          {
            long long v24 = v9 + 1;
            do
            {
              unint64_t v11 = v24;
              if (v24 >= v67) {
                break;
              }
              uint64_t result = CA::WindowServer::Display::Mode::operator<(v69, v24);
              long long v24 = v11 + 1;
            }
            while (!result);
          }
          long long v25 = v67;
          if (v11 < v67)
          {
            long long v25 = v67;
            do
              uint64_t result = CA::WindowServer::Display::Mode::operator<(v69, --v25);
            while ((result & 1) != 0);
          }
          while (v11 < v25)
          {
            unint64_t v26 = *v11;
            *unint64_t v11 = *v25;
            *long long v25 = v26;
            do
              ++v11;
            while (!CA::WindowServer::Display::Mode::operator<(v69, v11));
            do
              uint64_t result = CA::WindowServer::Display::Mode::operator<(v69, --v25);
            while ((result & 1) != 0);
          }
          long long v27 = v11 - 1;
          BOOL v4 = v11 - 1 >= v9;
          BOOL v5 = v11 - 1 == v9;
          if (v11 - 1 != v9) {
            *unsigned int v9 = *v27;
          }
          a4 = 0;
          *long long v27 = v69[0];
        }
        v69[0] = *v9;
        long long v17 = v9;
        do
          BOOL v18 = v17++;
        while (CA::WindowServer::Display::Mode::operator<(v17, v69));
        uint64_t v19 = v67;
        if (v18 == v9)
        {
          uint64_t v19 = v67;
          do
          {
            if (v17 >= v19) {
              break;
            }
            --v19;
          }
          while (!CA::WindowServer::Display::Mode::operator<(v19, v69));
        }
        else
        {
          do
            --v19;
          while (!CA::WindowServer::Display::Mode::operator<(v19, v69));
        }
        if (v17 < v19)
        {
          long long v20 = v19;
          long long v21 = v17;
          do
          {
            unint64_t v22 = *v21;
            unint64_t *v21 = *v20;
            *long long v20 = v22;
            do
              BOOL v18 = v21++;
            while (CA::WindowServer::Display::Mode::operator<(v21, v69));
            do
              --v20;
            while (!CA::WindowServer::Display::Mode::operator<(v20, v69));
          }
          while (v21 < v20);
        }
        if (v18 != v9) {
          *unsigned int v9 = *v18;
        }
        *BOOL v18 = v69[0];
        if (v17 >= v19) {
          break;
        }
LABEL_31:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,CA::WindowServer::Display::Mode *,false>(v9, v18, a3, a4 & 1);
        a4 = 0;
        unint64_t v11 = v18 + 1;
      }
      BOOL v23 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CA::WindowServer::Display::Mode *>(v9, v18);
      unint64_t v11 = v18 + 1;
      uint64_t result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CA::WindowServer::Display::Mode *>(v18 + 1, v67);
      if (result) {
        break;
      }
      if (!v23) {
        goto LABEL_31;
      }
    }
    a2 = v18;
    if (!v23) {
      continue;
    }
    return result;
  }
}

BOOL std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CA::WindowServer::Display::Mode *>(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  BOOL v6 = CA::WindowServer::Display::Mode::operator<(a2, a1);
  BOOL result = CA::WindowServer::Display::Mode::operator<(a3, a2);
  if (v6)
  {
    unint64_t v8 = *a1;
    if (result)
    {
      *a1 = *a3;
    }
    else
    {
      *a1 = *a2;
      *a2 = v8;
      BOOL result = CA::WindowServer::Display::Mode::operator<(a3, a2);
      if (!result) {
        return result;
      }
      unint64_t v8 = *a2;
      *a2 = *a3;
    }
    *a3 = v8;
  }
  else if (result)
  {
    unint64_t v9 = *a2;
    *a2 = *a3;
    *a3 = v9;
    BOOL result = CA::WindowServer::Display::Mode::operator<(a2, a1);
    if (result)
    {
      unint64_t v10 = *a1;
      *a1 = *a2;
      *a2 = v10;
    }
  }
  return result;
}

BOOL std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CA::WindowServer::Display::Mode *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CA::WindowServer::Display::Mode *>(a1, a2, a3);
  BOOL result = CA::WindowServer::Display::Mode::operator<(a4, a3);
  if (result)
  {
    unint64_t v9 = *a3;
    *a3 = *a4;
    *a4 = v9;
    BOOL result = CA::WindowServer::Display::Mode::operator<(a3, a2);
    if (result)
    {
      unint64_t v10 = *a2;
      *a2 = *a3;
      *a3 = v10;
      BOOL result = CA::WindowServer::Display::Mode::operator<(a2, a1);
      if (result)
      {
        unint64_t v11 = *a1;
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

BOOL std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CA::WindowServer::Display::Mode *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CA::WindowServer::Display::Mode *>(a1, a2, a3, a4);
  BOOL result = CA::WindowServer::Display::Mode::operator<(a5, a4);
  if (result)
  {
    unint64_t v11 = *a4;
    *a4 = *a5;
    *a5 = v11;
    BOOL result = CA::WindowServer::Display::Mode::operator<(a4, a3);
    if (result)
    {
      unint64_t v12 = *a3;
      *a3 = *a4;
      *a4 = v12;
      BOOL result = CA::WindowServer::Display::Mode::operator<(a3, a2);
      if (result)
      {
        unint64_t v13 = *a2;
        *a2 = *a3;
        *a3 = v13;
        BOOL result = CA::WindowServer::Display::Mode::operator<(a2, a1);
        if (result)
        {
          unint64_t v14 = *a1;
          *a1 = *a2;
          *a2 = v14;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CA::WindowServer::Display::Mode *>(unint64_t *a1, unint64_t *a2)
{
  v15[1] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      BOOL v6 = a2 - 1;
      if (CA::WindowServer::Display::Mode::operator<(a2 - 1, a1))
      {
        unint64_t v7 = *a1;
        *a1 = *v6;
        unint64_t *v6 = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CA::WindowServer::Display::Mode *>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CA::WindowServer::Display::Mode *>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CA::WindowServer::Display::Mode *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      unint64_t v8 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,CA::WindowServer::Display::Mode *>(a1, a1 + 1, a1 + 2);
      unint64_t v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    if (CA::WindowServer::Display::Mode::operator<(v9, v8))
    {
      v15[0] = *v9;
      uint64_t v12 = v10;
      while (1)
      {
        unint64_t v13 = (unint64_t *)((char *)a1 + v12);
        *(unint64_t *)((char *)a1 + v12 + 24) = *(unint64_t *)((char *)a1 + v12 + 16);
        if (v12 == -16) {
          break;
        }
        v12 -= 8;
        if (!CA::WindowServer::Display::Mode::operator<(v15, v13 + 1))
        {
          unint64_t v14 = (unint64_t *)((char *)a1 + v12 + 24);
          goto LABEL_12;
        }
      }
      unint64_t v14 = a1;
LABEL_12:
      *unint64_t v14 = v15[0];
      if (++v11 == 8) {
        return v9 + 1 == a2;
      }
    }
    unint64_t v8 = v9;
    v10 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v8 = a2;
      if (v6 <= a2) {
        unint64_t v8 = a2 % v6;
      }
    }
    else
    {
      unint64_t v8 = (v6 - 1) & a2;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v8);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2) {
              return v10;
            }
          }
          else
          {
            if (v7.u32[0] > 1uLL)
            {
              if (v11 >= v6) {
                v11 %= v6;
              }
            }
            else
            {
              v11 &= v6 - 1;
            }
            if (v11 != v8) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  else
  {
    unint64_t v8 = 0;
  }
  uint64_t v10 = operator new(0x28uLL);
  *uint64_t v10 = 0;
  v10[1] = a2;
  _OWORD v10[2] = *a3;
  _OWORD v10[3] = 0;
  *((_DWORD *)v10 + 8) = 0;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v6 || (float)(v13 * (float)v6) < v12)
  {
    BOOL v14 = 1;
    if (v6 >= 3) {
      BOOL v14 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v6);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>(a1, v17);
    unint64_t v6 = *(void *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= a2) {
        unint64_t v8 = a2 % v6;
      }
      else {
        unint64_t v8 = a2;
      }
    }
    else
    {
      unint64_t v8 = (v6 - 1) & a2;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v8);
  if (v19)
  {
    *uint64_t v10 = *v19;
LABEL_38:
    *uint64_t v19 = v10;
    goto LABEL_39;
  }
  *uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v8) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v20 >= v6) {
        v20 %= v6;
      }
    }
    else
    {
      v20 &= v6 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

uint64_t CA::WindowServer::Display::ModeSet::remove_mode(uint64_t this, const CA::WindowServer::Display::Mode *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *(uint64_t **)this;
  BOOL v5 = *(uint64_t **)(this + 8);
  if (*(uint64_t **)this != v5)
  {
    uint64_t v6 = *(void *)a2;
    while (1)
    {
      this = CA::WindowServer::Display::Mode::operator==(*v4, v6);
      if (this) {
        break;
      }
      if (++v4 == v5)
      {
        uint64_t v4 = v5;
        break;
      }
    }
  }
  uint8x8_t v7 = v4 + 1;
  if (v4 != v5 && v7 != v5)
  {
    uint64_t v9 = *(void *)a2;
    do
    {
      uint64_t v10 = *v7;
      this = CA::WindowServer::Display::Mode::operator==(*v7, v9);
      if ((this & 1) == 0)
      {
        *v4++ = v10;
        uint64_t v9 = *(void *)a2;
      }
      ++v7;
    }
    while (v7 != v5);
    BOOL v5 = *(uint64_t **)(v3 + 8);
  }
  if (v5 != v4)
  {
    if (v5 != v4 + 1) {
      this = (uint64_t)memmove(v4, v4 + 1, (char *)v5 - (char *)(v4 + 1));
    }
    *(void *)(v3 + 8) = v5 - 1;
  }
  return this;
}

__CFDictionary *CA::WindowServer::Display::Mode::create_dictionary_representation(CA::WindowServer::Display::Mode *this)
{
  CFMutableDataRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CA_CFDictionarySetInt(Mutable, @"width", *(_DWORD *)this & 0x3FFF);
  CA_CFDictionarySetInt(Mutable, @"height", (*(_DWORD *)this >> 14) & 0x3FFF);
  CA_CFDictionarySetInt(Mutable, @"refreshRate", (*(void *)this >> 29) & 0x1FFFFFF);
  uint64_t v3 = (const void *)*MEMORY[0x1E4F1CFD0];
  uint64_t v4 = (const void *)*MEMORY[0x1E4F1CFC8];
  if ((*(void *)this & 0x40000000000000) != 0) {
    BOOL v5 = (const void *)*MEMORY[0x1E4F1CFD0];
  }
  else {
    BOOL v5 = (const void *)*MEMORY[0x1E4F1CFC8];
  }
  CFDictionarySetValue(Mutable, @"isVirtual", v5);
  CA_CFDictionarySetInt(Mutable, @"pixelFormat", (*(void *)this >> 55) & 0x1F);
  CA_CFDictionarySetInt(Mutable, @"colorRange", (*(void *)this >> 60) & 3);
  if ((*(void *)this & 0x4000000000000000) != 0) {
    uint64_t v6 = v3;
  }
  else {
    uint64_t v6 = v4;
  }
  CFDictionarySetValue(Mutable, @"isUnsafe", v6);
  return Mutable;
}

CA::WindowServer::Display *CA::WindowServer::Display::Display(CA::WindowServer::Display *this, const __CFString *a2)
{
  *(void *)this = &unk_1ED026878;
  *((void *)this + 1) = a2;
  *((_DWORD *)this + 6) = atomic_fetch_add(CA::WindowServer::Display::_id_generator, 1u) + 1;
  *(void *)((char *)this + 28) = 0x100000001;
  *(int32x2_t *)((char *)this + 60) = vdup_n_s32(0x3F666666u);
  *((void *)this + 9) = 0;
  *((_DWORD *)this + 17) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  __asm { FMOV            V0.2D, #1.0 }
  *((_OWORD *)this + 8) = _Q0;
  *((unsigned char *)this + 144) = 0;
  *((_DWORD *)this + 37) = 1;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((void *)this + 27) = 1;
  *((_DWORD *)this + 56) = 0;
  unint64_t v8 = (os_unfair_lock_s *)((char *)this + 392);
  *((_DWORD *)this + 98) = 0;
  uint64_t v9 = (CA::WindowServer::Display *)((char *)this + 400);
  *((void *)this + 51) = 0;
  *((void *)this + 52) = 0;
  *(_OWORD *)((char *)this + 232) = 0u;
  uint64_t v10 = (char *)this + 232;
  *((void *)this + 50) = 0;
  *((void *)this + 54) = 0;
  *((void *)this + 55) = 0;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *((void *)this + 53) = (char *)this + 432;
  *((_OWORD *)this + 28) = 0u;
  *((_DWORD *)this + 120) = 1065353216;
  *((_OWORD *)this + 29) = 0u;
  pthread_mutex_init((pthread_mutex_t *)((char *)this + 560), 0);
  *((_DWORD *)v10 + 98) = 0;
  v10[404] = 1;
  *((void *)v10 + 51) = -1;
  *((void *)v10 + 52) = -1;
  *((_WORD *)v10 + 212) = *((_WORD *)v10 + 212) & 0xE000 | 0x100;
  *((_DWORD *)v10 + 121) = 0;
  *(_DWORD *)(v10 + 513) &= 0xFFFFE9BF;
  *((void *)v10 + 3137) = 0;
  os_unfair_lock_lock(v8);
  CA::WindowServer::Display::ModeSet::add_mode(v9, (const CA::WindowServer::Display::Mode *)(v10 + 408));
  os_unfair_lock_unlock(v8);
  os_unfair_lock_lock((os_unfair_lock_t)v10 + 121);
  if (!*((void *)v10 + 61))
  {
    unint64_t v11 = CA::Render::Shmem::new_shmem((CA::Render::Shmem *)4);
    *((void *)this + 90) = v11;
    float v12 = (_WORD *)*((void *)v11 + 3);
    *((void *)this + 91) = v12;
    *float v12 = 257;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)v10 + 121);
  pthread_mutex_init((pthread_mutex_t *)((char *)this + 496), 0);
  if (CADeviceUseSharedEvents()) {
    *((void *)this + 35) = objc_alloc_init(MEMORY[0x1E4F2EF98]);
  }
  CFRetain(*((CFTypeRef *)this + 1));
  float v13 = malloc_type_malloc(0x788uLL, 0x100004000313F17uLL);
  *((void *)this + 3175) = v13;
  bzero(v13, 0x788uLL);
  return this;
}

void CA::WindowServer::Display::~Display(CA::WindowServer::Display *this)
{
  *(void *)this = &unk_1ED026878;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 496));
  CFRelease(*((CFTypeRef *)this + 1));
  uint64_t v2 = (const void *)*((void *)this + 2);
  if (v2) {
    CFRelease(v2);
  }
  CA::Shape::unref(*((CA::Shape **)this + 27));
  uint64_t v3 = (void *)*((void *)this + 29);
  uint64_t v4 = (void *)*((void *)this + 30);
  if (v3 != v4)
  {
    do
    {
      if (*v3) {
        (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
      }
      ++v3;
    }
    while (v3 != v4);
    uint64_t v3 = (void *)*((void *)this + 29);
  }
  *((void *)this + 30) = v3;
  BOOL v5 = (void *)*((void *)this + 32);
  uint64_t v6 = (void *)*((void *)this + 33);
  if (v5 != v6)
  {
    do
    {
      if (*v5) {
        (*(void (**)(void))(*(void *)*v5 + 8))(*v5);
      }
      ++v5;
    }
    while (v5 != v6);
    BOOL v5 = (void *)*((void *)this + 32);
  }
  *((void *)this + 33) = v5;
  uint8x8_t v7 = (void *)*((void *)this + 35);
  if (v7) {

  }
  *((void *)this + 35) = 0;
  uint64_t v8 = *((void *)this + 36);
  if (v8)
  {
    CA::IOSAManager::unref(v8);
    *((void *)this + 36) = 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)this + 179);
  uint64_t v9 = (atomic_uint *)*((void *)this + 90);
  if (v9)
  {
    *((void *)this + 91) = 0;
    if (atomic_fetch_add(v9 + 2, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v9 + 16))(v9);
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)this + 179);
  uint64_t v10 = (atomic_uint *)*((void *)this + 85);
  if (v10 && atomic_fetch_add(v10 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v10 + 16))(v10);
  }
  unint64_t v11 = (const void *)*((void *)this + 37);
  if (v11) {
    CFRelease(v11);
  }
  uint64_t v12 = *((void *)this + 38);
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = *((void *)this + 40);
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  BOOL v14 = (void *)*((void *)this + 5);
  if (v14)
  {
    do
    {
      unint64_t v15 = (void *)v14[1];
      free(v14);
      BOOL v14 = v15;
    }
    while (v15);
  }
  free(*((void **)this + 3175));
  for (uint64_t i = 328; i != 392; i += 16)
  {
    size_t v17 = *(const void **)((char *)this + i);
    if (v17) {
      CFRelease(v17);
    }
  }
  mach_port_name_t v18 = *((_DWORD *)this + 185);
  if (v18) {
    mach_port_deallocate(*MEMORY[0x1E4F14960], v18);
  }
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 560));
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)this + 448);
  std::__tree<std::tuple<unsigned short,unsigned short>>::destroy(*((void **)this + 54));
  uint64_t v19 = (void *)*((void *)this + 50);
  if (v19)
  {
    *((void *)this + 51) = v19;
    operator delete(v19);
  }
  unint64_t v20 = (void *)*((void *)this + 32);
  if (v20)
  {
    *((void *)this + 33) = v20;
    operator delete(v20);
  }
  long long v21 = (void *)*((void *)this + 29);
  if (v21)
  {
    *((void *)this + 30) = v21;
    operator delete(v21);
  }
}

uint64_t CA::WindowServer::Display::set_size(uint64_t result, uint64_t a2, uint64_t a3, double *a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, int32x4_t a12)
{
  if (*(_DWORD *)(result + 88) != *(_DWORD *)a2
    || *(_DWORD *)(result + 92) != *(_DWORD *)(a2 + 4)
    || *(_DWORD *)(result + 96) != *(_DWORD *)a3
    || *(_DWORD *)(result + 100) != *(_DWORD *)(a3 + 4)
    || (a6 = *a4, *(double *)(result + 112) != *a4)
    || (a6 = a4[1], *(double *)(result + 120) != a6))
  {
    *(void *)(result + 88) = *(void *)a2;
    *(void *)(result + 96) = *(void *)a3;
    long long v12 = *(_OWORD *)a4;
    *(_OWORD *)(result + 112) = *(_OWORD *)a4;
    return CA::WindowServer::Display::update_geometry(result, *(double *)&v12, a6, a7, a8, a9, a10, a11, a12);
  }
  return result;
}

uint64_t CA::WindowServer::Display::update_geometry(uint64_t this, double a2, double a3, double a4, double a5, double a6, double a7, double a8, int32x4_t a9)
{
  uint64_t v9 = this;
  int32x2_t v11 = *(int32x2_t *)(this + 88);
  int32x2_t v10 = *(int32x2_t *)(this + 96);
  __int32 v12 = v10.i32[1];
  v13.i64[0] = 0;
  double v15 = *(double *)(this + 128);
  double v14 = *(double *)(this + 136);
  if (v15 == 1.0 && v14 == 1.0)
  {
    double v14 = 1.0;
    int32x2_t v32 = 0;
  }
  else
  {
    int v17 = v10.i32[0];
    if (v10.i32[0] <= v10.i32[1]) {
      int v17 = HIDWORD(*(void *)(this + 96));
    }
    v18.i64[0] = v10.i32[0];
    v18.i64[1] = v10.i32[1];
    int8x16_t v19 = (int8x16_t)vcvtq_f64_s64(v18);
    int32x2_t v20 = vdup_n_s32(v17 > 1073741822);
    v18.i64[0] = v20.u32[0];
    v18.i64[1] = v20.u32[1];
    int32x4_t v21 = (int32x4_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    int8x16_t v22 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v18, 0x3FuLL)), (int8x16_t)v21, v19);
    BOOL v23 = *(double *)v22.i64 >= 1.79769313e308 || v15 == 1.0;
    v21.i32[0] = v17;
    a9.i32[0] = 1073741822;
    int8x16_t v24 = vandq_s8((int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v21, a9), 0));
    v25.i64[1] = v24.i64[1];
    v26.i64[1] = v22.i64[1];
    if (v23) {
      unint64_t v27 = 0;
    }
    else {
      unint64_t v27 = -1;
    }
    int8x16_t v28 = (int8x16_t)vdupq_n_s64(v27);
    *(double *)v26.i64 = v15 * *(double *)v22.i64;
    float64x2_t v29 = (float64x2_t)vbslq_s8(v28, v26, v22);
    *(double *)v25.i64 = v15 * *(double *)v24.i64;
    int8x16_t v30 = vbslq_s8(v28, v25, v24);
    if (v14 != 1.0 && v29.f64[1] < 1.79769313e308)
    {
      v30.i64[1] = vmuld_lane_f64(v14, (float64x2_t)v30, 1);
      v29.f64[1] = v29.f64[1] * v14;
    }
    double v31 = v29.f64[1];
    if (v29.f64[0] > v29.f64[1]) {
      double v31 = v29.f64[0];
    }
    if (v31 < 1073741820.0)
    {
      v33.f64[0] = NAN;
      v33.f64[1] = NAN;
      int8x16_t v34 = (int8x16_t)vnegq_f64(v33);
      __asm { FMOV            V16.2D, #0.5 }
      int32x2_t v32 = vmovn_s64(vcvtq_s64_f64(vaddq_f64((float64x2_t)vbslq_s8(v34, _Q16, v30), (float64x2_t)v30)));
      int8x16_t v38 = (int8x16_t)vaddq_f64((float64x2_t)v30, v29);
      int32x2_t v10 = vsub_s32(vmovn_s64(vcvtq_s64_f64(vaddq_f64((float64x2_t)vbslq_s8(v34, _Q16, v38), (float64x2_t)v38))), v32);
    }
    else
    {
      int32x2_t v32 = vdup_n_s32(0xE0000001);
      int32x2_t v10 = (int32x2_t)0xC0000000C0000000;
    }
  }
  v13.i64[1] = *(void *)(this + 88);
  if (*(unsigned char *)(this + 144))
  {
    int32x2_t v39 = vzip1_s32(v10, v11);
    v40.i64[0] = v39.i32[0];
    v40.i64[1] = v39.i32[1];
    float64x2_t v41 = vcvtq_f64_s64(v40);
    int32x2_t v42 = vzip2_s32(v10, v11);
    v40.i64[0] = v42.i32[0];
    v40.i64[1] = v42.i32[1];
    float64x2_t v43 = vcvtq_f64_s64(v40);
    float32x2_t v44 = vcvt_f32_f64(vdivq_f64(v41, v43));
    int v45 = (int)((v43.f64[1] - v43.f64[0] / v15) * 0.5);
    v46.i32[0] = 0;
    v46.i64[1] = 0;
    v46.i32[1] = v45;
    uint64_t v47 = (int)((v41.f64[1] - v41.f64[0] / v14) * 0.5);
    if (vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v44, 1), v44).u8[0]) {
      v46.i64[0] = v47;
    }
    int v48 = *(void *)(this + 88);
    if (v11.i32[0] <= v11.i32[1]) {
      int v49 = HIDWORD(*(void *)(this + 88));
    }
    else {
      int v49 = *(void *)(this + 88);
    }
    if (v11.i32[0] >= v11.i32[1]) {
      int v48 = HIDWORD(*(void *)(this + 88));
    }
    if (v49 <= 1073741822 && v48 >= 1)
    {
      int32x2_t v51 = vsub_s32(v11, vadd_s32(*(int32x2_t *)v46.i8, *(int32x2_t *)v46.i8));
      v52.i64[0] = v46.i64[0];
      v52.u64[1] = (unint64_t)v51;
      if (v51.i32[1] < 1 || v51.i32[0] < 1) {
        unsigned int v54 = -1;
      }
      else {
        unsigned int v54 = 0;
      }
      int8x16_t v13 = vbslq_s8((int8x16_t)vdupq_n_s32(v54), v46, v52);
    }
  }
  if (*(_DWORD *)(this + 624))
  {
    int v55 = *(unsigned __int16 *)(this + 656);
    if ((v55 & 0x200) != 0)
    {
      int v56 = v10.i32[0];
      if (v10.i32[0] >= v10.i32[1]) {
        int v56 = v10.i32[1];
      }
      if (v56 >= 1)
      {
        float32x2_t v57 = *(float32x2_t *)(this + 60);
        _NF = v57.f32[0] > 0.0 && v57.f32[0] < 1.0;
        if (_NF || (v57.f32[1] > 0.0 ? (BOOL v59 = v57.f32[1] < 1.0) : (BOOL v59 = 0), v59))
        {
          int32x2_t v60 = (int32x2_t)vextq_s8(v13, v13, 8uLL).u64[0];
          int32x2_t v61 = vcvt_s32_f32(vmla_f32((float32x2_t)0x3F0000003F000000, vcvt_f32_s32(v60), vmls_f32((float32x2_t)0x3F0000003F000000, (float32x2_t)0x3F0000003F000000, v57)));
          int32x2_t v62 = (int32x2_t)vand_s8((int8x8_t)v61, (int8x8_t)vcgt_s32(v60, vadd_s32(v61, v61)));
          int v63 = v13.i32[2];
          if (v13.i32[2] <= v13.i32[3]) {
            int v64 = v13.i32[3];
          }
          else {
            int v64 = v13.i32[2];
          }
          if (v13.i32[2] >= v13.i32[3]) {
            int v63 = v13.i32[3];
          }
          if (v64 <= 1073741822 && v63 >= 1)
          {
            *(int32x2_t *)v13.i8 = vadd_s32(*(int32x2_t *)v13.i8, v62);
            v66.i64[0] = v13.i64[0];
            v66.u64[1] = (unint64_t)vsub_s32(v60, vadd_s32(v62, v62));
            if (v66.i32[3] < 1 || v66.i32[2] < 1) {
              unsigned int v68 = -1;
            }
            else {
              unsigned int v68 = 0;
            }
            int8x16_t v13 = vbslq_s8((int8x16_t)vdupq_n_s32(v68), v13, v66);
          }
          if ((~v55 & 0x300) == 0)
          {
            int32x2_t v69 = vadd_s32(v62, v62);
            v70.i64[0] = v69.i32[0];
            v70.i64[1] = v69.i32[1];
            float64x2_t v71 = vcvtq_f64_s64(v70);
            v70.i64[0] = v10.i32[0];
            v70.i64[1] = v10.i32[1];
            int32x2_t v10 = vmovn_s64(vcvtq_s64_f64(vmlsq_f64(vcvtq_f64_s64(v70), v71, *(float64x2_t *)(this + 128))));
            double v14 = *(double *)(this + 136);
          }
        }
      }
    }
  }
  int v72 = *(_DWORD *)(this + 68);
  if (v72 >= 1 && v72 > v13.i32[1])
  {
    int v74 = llround(v14 * (double)v13.i32[3] / *(double *)(this + 128));
    int v75 = v72 - v13.i32[1];
    int v76 = v72 - v12 + v74;
    if (v76 <= 0)
    {
      v78.f32[0] = (float)v13.i32[2];
      float v79 = 1.0;
      v80.i32[0] = 0;
    }
    else
    {
      float v77 = (float)v76 / (float)v74;
      v78.f32[0] = (float)v13.i32[2];
      float v79 = 1.0 - v77;
      v80.f32[0] = truncf(v77 * (float)(0.5 * (float)v13.i32[2]));
    }
    v78.f32[1] = (float)v74;
    v80.f32[1] = (float)v75;
    *(float32x2_t *)v81.f32 = vadd_f32(v80, vcvt_f32_s32(*(int32x2_t *)v13.i8));
    *(float32x2_t *)&v81.u32[2] = vrnda_f32(vmul_n_f32(v78, v79));
    int8x16_t v13 = (int8x16_t)vcvtq_s32_f32(v81);
  }
  if (*(_DWORD *)(this + 168) == v32.i32[0])
  {
    __int32 v82 = v10.i32[0];
    if (*(_DWORD *)(this + 172) == v32.i32[1]
      && *(void *)(this + 176) == *(void *)&v10
      && *(_OWORD *)(this + 152) == *(_OWORD *)&v13)
    {
      return this;
    }
  }
  else
  {
    __int32 v82 = v10.i32[0];
  }
  *(int32x2_t *)(this + 168) = v32;
  *(_DWORD *)(this + 176) = v82;
  *(_DWORD *)(this + 180) = v10.i32[1];
  *(int8x16_t *)(this + 152) = v13;
  CA::WindowServer::Display::update_actual_bounds((CA::WindowServer::Display *)this);

  return CA::WindowServer::Display::post_display_changed(v9);
}

uint64_t CA::WindowServer::Display::update_actual_bounds(CA::WindowServer::Display *this)
{
  (*(void (**)(CA::WindowServer::Display *))(*(void *)this + 264))(this);
  unsigned int v2 = *(_DWORD *)((char *)this + 745);
  uint64_t v3 = (_DWORD *)((char *)this + 168);
  if ((v2 & 2) != 0) {
    uint64_t v4 = 184;
  }
  else {
    uint64_t v4 = 168;
  }
  if ((v2 & 2) != 0) {
    uint64_t v3 = (_DWORD *)((char *)this + 184);
  }
  int v5 = v3[2];
  if (*((_DWORD *)this + 40) == v5 && *((_DWORD *)this + 41) == v3[3])
  {
    if (*((_DWORD *)this + 38) == *(_DWORD *)((char *)this + v4))
    {
      int v6 = 0;
      BOOL v7 = *((_DWORD *)this + 39) != v3[1];
      goto LABEL_12;
    }
    int v6 = 0;
  }
  else
  {
    int v6 = 1;
  }
  BOOL v7 = 1;
LABEL_12:
  if (((v2 >> 2) & 1) == v7)
  {
    int v8 = *(_DWORD *)((char *)this + v4);
    if (((*(_DWORD *)((unsigned char *)this + 745) & 8) == 0) != v6
      && *((_DWORD *)this + 50) == v8
      && *((_DWORD *)this + 51) == v3[1]
      && *((_DWORD *)this + 52) == v5
      && *((_DWORD *)this + 53) == v3[3])
    {
      return 0;
    }
  }
  else
  {
    int v8 = *(_DWORD *)((char *)this + v4);
  }
  unsigned int v10 = v2 & 0xFFFFFFF3 | (4 * v7);
  if (v6) {
    int v11 = 8;
  }
  else {
    int v11 = 0;
  }
  *((_DWORD *)this + 50) = v8;
  *(_DWORD *)((char *)this + 745) = v10 | v11;
  *(void *)((char *)this + 204) = *(void *)(v3 + 1);
  *((_DWORD *)this + 53) = v3[3];
  __int32 v12 = (CA::Shape *)*((void *)this + 27);
  if (v12) {
    CA::Shape::unref(v12);
  }
  *((void *)this + 27) = CA::Shape::new_shape((unsigned int *)this + 50);
  return 1;
}

void CA::WindowServer::Display::sanitize_dimension_scale(CA::WindowServer::Display *this, double a2, double a3, double a4)
{
}

uint64_t CA::WindowServer::Display::set_logical_bounds(CA::WindowServer::Display *this, const CA::Bounds *a2, int a3)
{
  int v3 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 == *((_DWORD *)this + 42)
    && *((_DWORD *)a2 + 1) == *((_DWORD *)this + 43)
    && *((_DWORD *)a2 + 2) == *((_DWORD *)this + 44)
    && *((_DWORD *)a2 + 3) == *((_DWORD *)this + 45))
  {
    int v4 = *(_DWORD *)((char *)this + 745);
    if ((v4 & 2) != 0)
    {
      *((void *)this + 23) = 0;
      *((void *)this + 24) = 0;
      *(_DWORD *)((char *)this + 745) = v4 & 0xFFFFFFED;
      return CA::WindowServer::Display::update_actual_bounds(this);
    }
  }
  else
  {
    int v5 = *(_DWORD *)((char *)this + 745);
    if ((v5 & 2) == 0
      || *((_DWORD *)this + 46) != v3
      || *((_DWORD *)this + 47) != *((_DWORD *)a2 + 1)
      || *((_DWORD *)this + 48) != *((_DWORD *)a2 + 2)
      || *((_DWORD *)this + 49) != *((_DWORD *)a2 + 3)
      || ((((*(_DWORD *)((unsigned char *)this + 745) & 0x10) == 0) ^ a3) & 1) == 0)
    {
      *((_DWORD *)this + 46) = v3;
      *(void *)((char *)this + 188) = *(void *)((char *)a2 + 4);
      *((_DWORD *)this + 49) = *((_DWORD *)a2 + 3);
      unsigned int v6 = v5 & 0xFFFFFFED;
      if (a3) {
        int v7 = 18;
      }
      else {
        int v7 = 2;
      }
      *(_DWORD *)((char *)this + 745) = v7 | v6;
      return CA::WindowServer::Display::update_actual_bounds(this);
    }
  }
  return 0;
}

uint64_t CA::WindowServer::Display::all_clones_support_hlg(CA::WindowServer::Display *this)
{
  if (!this) {
    return 1;
  }
  uint64_t v1 = this;
  do
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(*(void *)v1 + 96) + 176))(*(void *)(*(void *)v1 + 96));
    if ((result & 1) == 0) {
      break;
    }
    uint64_t v1 = (CA::WindowServer::Display *)*((void *)v1 + 1);
  }
  while (v1);
  return result;
}

uint64_t CA::WindowServer::Display::set_all_modes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    unint64_t v7 = a4;
    int v8 = *(CA::WindowServer::Display::ModeSet **)a2;
    uint64_t v9 = *(const CA::WindowServer::Display::Mode **)(a2 + 8);
    if (CA::WindowServer::Display::ModeSet::contains_mode(*(CA::WindowServer::Display::ModeSet **)a2, v9, a4))
    {
LABEL_7:
      if (!a3) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
  }
  else
  {
    int v8 = *(CA::WindowServer::Display::ModeSet **)a2;
    uint64_t v9 = *(const CA::WindowServer::Display::Mode **)(a2 + 8);
  }
  if (v9 != v8)
  {
    unint64_t v7 = *(void *)v8;
    goto LABEL_7;
  }
  uint64_t v9 = v8;
  unint64_t v7 = a3;
  if (!a3)
  {
LABEL_11:
    a3 = v7;
    goto LABEL_12;
  }
LABEL_10:
  if (!CA::WindowServer::Display::ModeSet::contains_mode(v8, v9, a3)) {
    goto LABEL_11;
  }
LABEL_12:
  unsigned int v10 = (os_unfair_lock_s *)(a1 + 392);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 392));
  if (CA::WindowServer::Display::ModeSet::operator==(a1 + 400, a2)
    && CA::WindowServer::Display::Mode::operator==(*(void *)(a1 + 640), a3)
    && (CA::WindowServer::Display::Mode::operator==(*(void *)(a1 + 648), v7) & 1) != 0)
  {
    uint64_t v11 = 0;
  }
  else
  {
    if ((*(void *)(a1 + 408) == *(void *)(a1 + 400)) != (*(void *)(a2 + 8) == *(void *)a2)) {
      ++*(_DWORD *)(a1 + 32);
    }
    CA::WindowServer::Display::ModeSet::operator=((char **)(a1 + 400), (char **)a2);
    *(void *)(a1 + 640) = a3;
    *(void *)(a1 + 648) = v7;
    if (v7) {
      *(void *)(a1 + 104) = v7 & 0x3FFF | (((v7 >> 14) & 0x3FFF) << 32);
    }
    uint64_t v11 = 1;
  }
  os_unfair_lock_unlock(v10);
  return v11;
}

uint64_t CA::WindowServer::Display::set_user_preferences(uint64_t result, int a2, int a3, int a4)
{
  uint64_t v4 = result;
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  unsigned int v5 = *(unsigned __int16 *)(result + 656);
  if (a3 == v5 >> 13)
  {
    unsigned int v6 = (unsigned int *)(result + 745);
    int v7 = *(_DWORD *)(result + 745);
    if ((((v7 & 1) == 0) ^ a2))
    {
      if (!a4) {
        return result;
      }
      goto LABEL_7;
    }
  }
  else
  {
    *(_WORD *)(result + 656) = v5 & 0x1FFF | ((_WORD)a3 << 13);
    unsigned int v6 = (unsigned int *)(result + 745);
    int v7 = *(_DWORD *)(result + 745);
    if ((((v7 & 1) == 0) ^ a2)) {
      goto LABEL_7;
    }
  }
  unsigned int *v6 = v7 & 0xFFFFFFFE | a2;
LABEL_7:
  memset(v19, 0, sizeof(v19));
  if ((*(unsigned int (**)(uint64_t, void, _OWORD *, uint64_t, void))(*(void *)result + 800))(result, 0, v19, 64, 0))
  {
    CFStringRef v8 = CFStringCreateWithCString(0, (const char *)v19, 0x8000100u);
    if (v8)
    {
      CFStringRef v9 = v8;
      CFStringRef v10 = (const __CFString *)*MEMORY[0x1E4F1D3D8];
      CFDictionaryRef v11 = (const __CFDictionary *)CFPreferencesCopyAppValue(@"CADisplayPreferences", (CFStringRef)*MEMORY[0x1E4F1D3D8]);
      CFDictionaryRef v12 = v11;
      if (v11 && (CFTypeID v13 = CFGetTypeID(v11), v13 == CFDictionaryGetTypeID())) {
        MutableCopCGFloat y = CFDictionaryCreateMutableCopy(0, 0, v12);
      }
      else {
        MutableCopCGFloat y = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      }
      double v15 = MutableCopy;
      if (MutableCopy)
      {
        CFMutableDataRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (Mutable)
        {
          int v17 = Mutable;
          int64x2_t v18 = (const void **)MEMORY[0x1E4F1CFD0];
          if ((*v6 & 1) == 0) {
            int64x2_t v18 = (const void **)MEMORY[0x1E4F1CFC8];
          }
          CFDictionarySetValue(Mutable, @"matchContent", *v18);
          CA_CFDictionarySetInt(v17, @"preferredHdrType", *(unsigned __int16 *)(v4 + 656) >> 13);
          CFDictionarySetValue(v15, v9, v17);
          CFRelease(v17);
          CFPreferencesSetAppValue(@"CADisplayPreferences", v15, v10);
        }
        CFRelease(v15);
      }
      if (v12) {
        CFRelease(v12);
      }
      CFRelease(v9);
    }
  }
  return CA::WindowServer::Display::post_display_changed(v4);
}

uint64_t CA::WindowServer::Display::allocate_surface(uint64_t a1, uint64_t a2, uint64_t a3, CA::Render *a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, uint64_t a9, char a10)
{
  if ((((a7 & 0x21) == 1) & ((*(_DWORD *)(a1 + 745) & 0x20u) >> 5)) != 0) {
    uint64_t v16 = a7 | 2;
  }
  else {
    uint64_t v16 = a7;
  }
  locuint64_t k = (os_unfair_lock_s *)(a1 + 224);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 224));
  for (uint64_t i = *(uint64_t **)(a1 + 256); ; ++i)
  {
    if (i == *(uint64_t **)(a1 + 264))
    {
      os_unfair_lock_unlock(lock);
      if (a10) {
        return 0;
      }
      uint64_t v22 = CA::Render::fourcc_compressed_of_type(a4, 0, 0);
      if (v22 != a4)
      {
        uint64_t surface = CA::WindowServer::Display::allocate_surface(a1, a2, a3, v22, a5, a6, v16, a8, a9, 1);
        if (surface) {
          return surface;
        }
      }
      uint64_t surface = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, CA::Render *, uint64_t, void, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 2192))(a1, a2, a3, a4, a5, a6, v16, a8, a9);
      if (!surface)
      {
        if (!CA::WindowServer::Display::purge_surfaces((os_unfair_lock_s *)a1, 1)) {
          return 0;
        }
        uint64_t surface = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, CA::Render *, uint64_t, void, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 2192))(a1, a2, a3, a4, a5, a6, v16, a8, a9);
        if (!surface) {
          return surface;
        }
      }
      os_unfair_lock_lock(lock);
      int8x16_t v24 = *(uint64_t **)(a1 + 240);
      unint64_t v23 = *(void *)(a1 + 248);
      if ((unint64_t)v24 >= v23)
      {
        uint64_t v26 = *(void *)(a1 + 232);
        uint64_t v27 = ((uint64_t)v24 - v26) >> 3;
        if ((unint64_t)(v27 + 1) >> 61) {
          goto LABEL_61;
        }
        uint64_t v28 = v23 - v26;
        uint64_t v29 = v28 >> 2;
        if (v28 >> 2 <= (unint64_t)(v27 + 1)) {
          uint64_t v29 = v27 + 1;
        }
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v29;
        }
        if (v30) {
          unint64_t v30 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Display::DisplayLinkItem *>>(v30);
        }
        else {
          uint64_t v31 = 0;
        }
        int32x2_t v32 = (uint64_t *)(v30 + 8 * v27);
        unint64_t v33 = v30 + 8 * v31;
        *int32x2_t v32 = surface;
        int8x16_t v25 = v32 + 1;
        uint64_t v35 = *(char **)(a1 + 232);
        int8x16_t v34 = *(char **)(a1 + 240);
        if (v34 != v35)
        {
          do
          {
            uint64_t v36 = *((void *)v34 - 1);
            v34 -= 8;
            *--int32x2_t v32 = v36;
          }
          while (v34 != v35);
          int8x16_t v34 = *(char **)(a1 + 232);
        }
        *(void *)(a1 + 232) = v32;
        *(void *)(a1 + 240) = v25;
        *(void *)(a1 + 248) = v33;
        if (v34) {
          operator delete(v34);
        }
      }
      else
      {
        uint64_t *v24 = surface;
        int8x16_t v25 = v24 + 1;
      }
      *(void *)(a1 + 240) = v25;
      os_unfair_lock_unlock(lock);
      return surface;
    }
    uint64_t surface = *i;
    if (*(_DWORD *)(*i + 56) == a2
      && *(_DWORD *)(surface + 60) == a3
      && *(_DWORD *)(surface + 64) == a4
      && (*(unsigned int (**)(uint64_t))(*(void *)surface + 24))(*i) == a5)
    {
      unint64_t v19 = *(unsigned int *)(surface + 224) | ((unint64_t)*(unsigned __int8 *)(surface + 228) << 32);
      if (((v16 & 4) == 0) != ((v19 >> 24) & 1)
        && ((v16 & 1) == 0) != ((v19 >> 34) & 1)
        && (*(uint64_t (**)(uint64_t))(*(void *)surface + 216))(surface) == a8
        && ((v16 & 2) == 0) != ((*(_DWORD *)(surface + 224) >> 29) & 1))
      {
        uint64_t v20 = *(void *)(surface + 16);
        if (!v20) {
          break;
        }
        int32x4_t v21 = *(void **)(v20 + 8);
        if (!v21 || [v21 signaledValue] == *(void *)(v20 + 16)) {
          break;
        }
      }
    }
  }
  int32x2_t v39 = *(uint64_t **)(a1 + 240);
  unint64_t v38 = *(void *)(a1 + 248);
  if ((unint64_t)v39 < v38)
  {
    *int32x2_t v39 = surface;
    int64x2_t v40 = v39 + 1;
    uint64_t v41 = a6;
    goto LABEL_60;
  }
  uint64_t v42 = *(void *)(a1 + 232);
  uint64_t v43 = ((uint64_t)v39 - v42) >> 3;
  uint64_t v41 = a6;
  if ((unint64_t)(v43 + 1) >> 61) {
LABEL_61:
  }
    abort();
  uint64_t v44 = v38 - v42;
  uint64_t v45 = v44 >> 2;
  if (v44 >> 2 <= (unint64_t)(v43 + 1)) {
    uint64_t v45 = v43 + 1;
  }
  if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v46 = v45;
  }
  if (v46) {
    unint64_t v46 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Display::DisplayLinkItem *>>(v46);
  }
  else {
    uint64_t v47 = 0;
  }
  int v48 = (uint64_t *)(v46 + 8 * v43);
  unint64_t v49 = v46 + 8 * v47;
  *int v48 = surface;
  int64x2_t v40 = v48 + 1;
  int32x2_t v51 = *(char **)(a1 + 232);
  uint64_t v50 = *(char **)(a1 + 240);
  if (v50 != v51)
  {
    do
    {
      uint64_t v52 = *((void *)v50 - 1);
      v50 -= 8;
      *--int v48 = v52;
    }
    while (v50 != v51);
    uint64_t v50 = *(char **)(a1 + 232);
  }
  *(void *)(a1 + 232) = v48;
  *(void *)(a1 + 240) = v40;
  *(void *)(a1 + 248) = v49;
  if (v50) {
    operator delete(v50);
  }
LABEL_60:
  *(void *)(a1 + 240) = v40;
  *uint64_t i = *(void *)(*(void *)(a1 + 264) - 8);
  *(void *)(a1 + 264) -= 8;
  os_unfair_lock_unlock(lock);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)surface + 72))(surface, v41, 0);
  return surface;
}

uint64_t CA::WindowServer::Display::copy_iosa_manager(CA::WindowServer::Display *this, __CFRunLoop *a2)
{
  uint64_t result = *((void *)this + 36);
  if (!result)
  {
    if (CA::WindowServer::accelerator_runloop(void)::once != -1) {
      dispatch_once(&CA::WindowServer::accelerator_runloop(void)::once, &__block_literal_global_6465);
    }
    CA::IOSAManager::create_new_iosa_manager((CA::IOSAManager *)CA::WindowServer::accelerator_runloop(void)::runloop, a2);
  }
  atomic_fetch_add((atomic_uint *volatile)(result + 24), 1u);
  return result;
}

os_log_t ___ZN2CA12WindowServer7Display15get_display_logEv_block_invoke()
{
  os_log_t result = os_log_create("com.apple.coreanimation", "WindowServer.Display");
  CA::WindowServer::Display::get_display_log(void)::log = (uint64_t)result;
  return result;
}

os_log_t ___ZN2CA12WindowServer7Display21get_display_trace_logEv_block_invoke()
{
  os_log_t result = os_log_create("com.apple.coreanimation", "Display.Trace");
  CA::WindowServer::Display::get_display_trace_log(void)::log = (uint64_t)result;
  return result;
}

unint64_t CA::WindowServer::Display::ModeSet::preferred_mode_with_criteria(unint64_t **a1, int a2, uint64_t a3, int a4, unsigned int *a5, double a6, double a7, float a8)
{
  unsigned int v8 = a3;
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  unint64_t v13 = CA::WindowServer::Display::ModeSet::preferred_mode_with_criteria_internal(a1, a2, a3, a4, 1, a5, a6, a7, a8);
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    double v14 = x_log_category_windowserver;
    if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
    {
      if (v8 > 5) {
        double v15 = "UNKNOWN";
      }
      else {
        double v15 = CA::WindowServer::hdr_type_name(CA::WindowServer::Display::HDRType)::names[v8];
      }
      uint64_t v16 = CA::WindowServer::hdr_type_name(CA::WindowServer::Display::HDRType)::names[a2];
      unsigned int v17 = ((v13 >> 55) & 0x1F) - 1;
      if (v17 > 0x1B) {
        int64x2_t v18 = "";
      }
      else {
        int64x2_t v18 = off_1E52739E0[v17];
      }
      *(_DWORD *)long long buf = 134220034;
      double v21 = a6;
      __int16 v22 = 2048;
      double v23 = a7;
      __int16 v24 = 2080;
      int8x16_t v25 = v16;
      __int16 v26 = 2080;
      uint64_t v27 = v15;
      __int16 v28 = 2048;
      double v29 = a8;
      __int16 v30 = 1024;
      int v31 = v13 & 0x3FFF;
      __int16 v32 = 1024;
      unsigned int v33 = (v13 >> 14) & 0x3FFF;
      __int16 v34 = 2048;
      double v35 = (double)((v13 >> 29) & 0x1FFFFFF) * 0.0000152587891;
      __int16 v36 = 2080;
      int64_t v37 = v18;
      _os_log_impl(&dword_184668000, v14, OS_LOG_TYPE_DEFAULT, "preferred_mode_with_criteria: resolution [%g x %g], target hdr (%s), user hdr (%s), rate (%g) --> %dx%d@%g %s", buf, 0x54u);
    }
  }
  return v13;
}

unint64_t CA::WindowServer::Display::ModeSet::preferred_mode_with_criteria_internal(unint64_t **a1, int a2, uint64_t a3, int a4, int a5, unsigned int *a6, double a7, double a8, float a9)
{
  CFStringRef v9 = a6;
  uint64_t v11 = a3;
  double v14 = a1;
  v86[1] = *MEMORY[0x1E4F143B8];
  if (!a4) {
    a9 = 0.0;
  }
  if (!a4) {
    a2 = 0;
  }
  if (a3 == 5 && !a2)
  {
    if (CA::WindowServer::Display::ModeSet::supports_4k60_dovi(a1, (const EDIDAttributes *)*a6))
    {
      a2 = 0;
    }
    else
    {
      a9 = 30.0;
      a2 = 5;
    }
  }
  if (a2) {
    int v17 = a2;
  }
  else {
    int v17 = v11;
  }
  if (v9[7] == 1552)
  {
    unsigned int v18 = v9[6] - 44577;
    BOOL v33 = v18 > 0xE;
    unsigned int v19 = (0x7007u >> v18) & 1;
    if (v33) {
      char v20 = 0;
    }
    else {
      char v20 = v19;
    }
  }
  else
  {
    char v20 = 0;
  }
  v86[0] = 0;
  double v21 = *v14;
  __int16 v22 = v14[1];
  if (*v14 == v22)
  {
    long long v84 = 0;
LABEL_142:
    unint64_t v23 = 0;
    goto LABEL_143;
  }
  int v81 = a5;
  unsigned int v83 = v11;
  long long v84 = 0;
  unint64_t v23 = 0;
  uint64_t v24 = (uint64_t)(v14 + 3);
  __int32 v82 = v14;
  int8x16_t v25 = v14 + 4;
  BOOL v26 = a9 > 30.0 || a9 == 0.0;
  double v27 = a9;
  double v79 = 0.5 - a9;
  BOOL v28 = a7 != 0.0;
  if (a8 == 0.0) {
    BOOL v28 = 0;
  }
  BOOL v80 = v28;
  BOOL v77 = v26;
  int v78 = (int)(a7 * a8);
  do
  {
    unint64_t v29 = *v21;
    unint64_t v85 = v29;
    if (!v29) {
      goto LABEL_138;
    }
    if ((v20 & 1) == 0)
    {
      if (CADeviceSupportsHDRTVModes::once != -1) {
        dispatch_once(&CADeviceSupportsHDRTVModes::once, &__block_literal_global_178);
      }
      if ((CADeviceSupportsHDRTVModes::supports_hdr_modes & 1) == 0
        && CA::WindowServer::Display::Mode::is_hdr((CA::WindowServer::Display::Mode *)&v85))
      {
        goto LABEL_138;
      }
    }
    BOOL v30 = a9 == 0.0;
    double v31 = (double)((v29 >> 29) & 0x1FFFFFF) * 0.0000152587891;
    float v32 = v31;
    if (v32 >= 49.0) {
      BOOL v30 = 0;
    }
    BOOL v33 = v32 >= 23.9 && v32 <= 60.5;
    if (!v33 || v30) {
      goto LABEL_138;
    }
    unsigned int v34 = v29 & 0x3FFF;
    if (v34 == 1920)
    {
      if ((v29 & 0xFFFC000) != 0x21C0000 || a7 == 1920.0 || a8 == 2160.0) {
        goto LABEL_54;
      }
LABEL_53:
      if (v25 != (unint64_t **)std::__tree<std::tuple<unsigned short,unsigned short>>::find<std::tuple<unsigned short,unsigned short>>(v24, 0xF00u, 0x870u))goto LABEL_138; {
      goto LABEL_54;
      }
    }
    if (v34 == 3840)
    {
      if ((v29 & 0xFFFC000) != 0x10E0000 || a7 == 3840.0 || a8 == 1080.0) {
        goto LABEL_54;
      }
      goto LABEL_53;
    }
    if (v34 == 4096 && (v29 & 0xFFFC000) == 0x21C0000) {
      goto LABEL_138;
    }
LABEL_54:
    if (v17 && (int)CA::WindowServer::Display::Mode::hdr_type(v29) > v17
      || CA::WindowServer::Display::Mode::hdr_type(v29) == 1
      && (v29 & 0x4000000000000000) != 0
      && *((unsigned char *)v9 + 20))
    {
      goto LABEL_138;
    }
    if ((v29 & 0x40000000000000) != 0)
    {
      if (CA::WindowServer::Display::Mode::is_hdr((CA::WindowServer::Display::Mode *)&v85) && !*((unsigned char *)v9 + 20)
        || v25 == (unint64_t **)std::__tree<std::tuple<unsigned short,unsigned short>>::find<std::tuple<unsigned short,unsigned short>>(v24, v29 & 0x3FFF, (v29 >> 14) & 0x3FFF))
      {
        goto LABEL_138;
      }
      if (CA::WindowServer::Display::Mode::hdr_type(v29) == 5)
      {
        int v59 = *v9;
        if (!*v9 || v59 == 3 || v59 == 1 && v77) {
          goto LABEL_138;
        }
      }
      else if (CA::WindowServer::Display::Mode::hdr_type(v29) == 4 {
             || CA::WindowServer::Display::Mode::hdr_type(v29) != 3
      }
             || v9[2] != 2 && v9[1] != 2 && v9[3] != 2)
      {
        goto LABEL_138;
      }
    }
    if (!v23) {
      goto LABEL_137;
    }
    if (v17)
    {
      if (CA::WindowServer::Display::Mode::hdr_type(v29) == v17
        && CA::WindowServer::Display::Mode::hdr_type((unint64_t)v84) != v17)
      {
        goto LABEL_137;
      }
      if (CA::WindowServer::Display::Mode::hdr_type((unint64_t)v84) == v17
        && CA::WindowServer::Display::Mode::hdr_type(v29) != v17)
      {
        goto LABEL_138;
      }
      int v76 = v9;
      int v35 = CA::WindowServer::Display::Mode::hdr_type(v29);
      BOOL v39 = v35 == CA::WindowServer::Display::Mode::hdr_type((unint64_t)v84);
      CFStringRef v9 = v76;
      if (!v39)
      {
        unsigned int v36 = CA::WindowServer::Display::Mode::hdr_type(v29);
        BOOL v33 = v36 > CA::WindowServer::Display::Mode::hdr_type((unint64_t)v84);
        CFStringRef v9 = v76;
        if (v33) {
          goto LABEL_137;
        }
      }
    }
    if (a9 <= 0.0) {
      goto LABEL_88;
    }
    int v37 = (int)fabs(v79 + v31);
    int v38 = (int)fabs(v79 + (double)((v23 >> 29) & 0x1FFFFFF) * 0.0000152587891);
    if (v37) {
      BOOL v39 = 1;
    }
    else {
      BOOL v39 = v38 == 0;
    }
    if (!v39) {
      goto LABEL_137;
    }
    if (!v37 || v38 != 0)
    {
LABEL_88:
      if (!v80) {
        goto LABEL_98;
      }
      unsigned int v41 = (v29 >> 14) & 0x3FFF;
      double v42 = (double)v41;
      BOOL v43 = a7 == (double)v34 && a8 == v42;
      if (v43 && (a7 != (double)(v23 & 0x3FFF) || a8 != (double)((v23 >> 14) & 0x3FFF))) {
        goto LABEL_137;
      }
      if ((unsigned int v44 = v23 & 0x3FFF, v45 = (v23 >> 14) & 0x3FFF, a7 != (double)v44)
        || a8 != (double)v45
        || (a7 == (double)v34 ? (BOOL v46 = a8 == v42) : (BOOL v46 = 0), v46))
      {
        if (v34 != v44 || ((v23 ^ v29) & 0xFFFC000) != 0)
        {
          int v47 = v41 * v34 - v78;
          if (v47 < 0) {
            int v47 = -v47;
          }
          int v48 = v45 * v44 - v78;
          if (v48 < 0) {
            int v48 = -v48;
          }
          if (v47 < v48)
          {
LABEL_137:
            v86[0] = v29;
            long long v84 = (CA::WindowServer::Display::Mode *)v29;
            unint64_t v23 = v29;
            goto LABEL_138;
          }
          if (v47 > v48) {
            goto LABEL_138;
          }
        }
LABEL_98:
        uint64_t v49 = (v23 >> 29) & 0x1FFFFFF;
        if (a9 <= 0.0)
        {
          double v52 = (double)v49 * 0.0000152587891;
        }
        else
        {
          float v50 = v31 - v27;
          float v51 = fabsf(v50);
          double v52 = (double)v49 * 0.0000152587891;
          float v53 = v52 - v27;
          float v54 = fabsf(v53);
          if (v51 <= 0.5
            && v51 < v54
            && v34 == (v23 & 0x3FFF)
            && ((v23 ^ v29) & 0xFFFC000) == 0
            && ((v23 ^ v29) & 0xF80000000000000) == 0)
          {
LABEL_134:
            v86[0] = v29;
            long long v84 = (CA::WindowServer::Display::Mode *)v29;
            unint64_t v23 = v29;
            goto LABEL_138;
          }
        }
        unsigned int v60 = (v52 + 0.5);
        unsigned int v61 = (v31 + 0.5);
        if (v60 <= v61
          && (v60 < v61
           || (CA::WindowServer::Display::Mode::operator==(v29, (uint64_t)v84) & 1) == 0
           && !CA::WindowServer::Display::Mode::operator<(&v85, v86)))
        {
          goto LABEL_134;
        }
      }
    }
LABEL_138:
    ++v21;
  }
  while (v21 != v22);
  uint64_t v11 = v83;
  if (v23)
  {
    double v14 = v82;
    a5 = v81;
    goto LABEL_143;
  }
  double v14 = v82;
  int v74 = *v82;
  int v75 = v82[1];
  a5 = v81;
  if (*v82 == v75) {
    goto LABEL_142;
  }
  while (1)
  {
    unint64_t v23 = *v74;
    if ((*v74 & 0x40000000000000) == 0) {
      break;
    }
    if (++v74 == v75) {
      goto LABEL_142;
    }
  }
  v86[0] = *v74;
  long long v84 = (CA::WindowServer::Display::Mode *)v23;
LABEL_143:
  if (a9 > 0.0 && a9 <= 30.0 && a5 != 0)
  {
    unsigned int v64 = (v23 >> 14) & 0x3FFF;
    uint64_t v65 = CA::WindowServer::Display::Mode::hdr_type((unint64_t)v84);
    float v66 = a9 + a9;
    unint64_t v67 = CA::WindowServer::Display::ModeSet::preferred_mode_with_criteria_internal(v14, v65, v11, 1, 0, v9, (double)(v23 & 0x3FFF), (double)v64, v66);
    unint64_t v68 = v67;
    BOOL v72 = ((double)((v67 >> 29) & 0x1FFFFFF) * 0.0000152587891 + 0.5) == (uint64_t)rintf(v66)
       && (v67 & 0x3FFF) == (v23 & 0x3FFF)
       && ((v67 >> 14) & 0x3FFF) == v64
       && ((v67 ^ v23) & 0xF80000000000000) == 0
       && ((v23 >> 54) & 1) == ((v67 >> 54) & 1);
    if (v72
      && (((v23 & 0x4000000000000000) != 0) == ((v67 & 0x4000000000000000) != 0)
       || CA::WindowServer::Display::Mode::is_hdr((CA::WindowServer::Display::Mode *)v86)))
    {
      return v68;
    }
  }
  return v23;
}

uint64_t CA::WindowServer::Display::ModeSet::supports_4k60_dovi(unint64_t **this, const EDIDAttributes *a2)
{
  if (a2 == 2) {
    return 1;
  }
  if (a2 != 3) {
    return 0;
  }
  unsigned int v2 = *this;
  int v3 = this[1];
  if (*this == v3) {
    return 0;
  }
  while (1)
  {
    unint64_t v4 = *v2;
    if ((*v2 & 0xFFC0000) >= 0x21BC001)
    {
      if (CA::WindowServer::Display::Mode::hdr_type(*v2) == 5)
      {
        if ((v4 & 0x40000000000000) != 0) {
          goto LABEL_11;
        }
      }
      else
      {
        int v5 = CA::WindowServer::Display::Mode::hdr_type(v4);
        if ((v4 & 0x40000000000000) != 0 || v5 != 4) {
          goto LABEL_11;
        }
      }
      if (((double)((v4 >> 29) & 0x1FFFFFF) * 0.0000152587891 + 0.5) > 0x3B) {
        return 1;
      }
    }
LABEL_11:
    if (++v2 == v3) {
      return 0;
    }
  }
}

uint64_t std::__tree<std::tuple<unsigned short,unsigned short>>::find<std::tuple<unsigned short,unsigned short>>(uint64_t a1, unsigned __int16 a2, unsigned __int16 a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v3 = a1 + 8;
  uint64_t v4 = v5;
  if (!v5) {
    return v3;
  }
  uint64_t v6 = v3;
  do
  {
    unsigned int v7 = *(unsigned __int16 *)(v4 + 26);
    BOOL v8 = v7 == a2;
    if (v7 >= a2) {
      char v9 = 1;
    }
    else {
      char v9 = -1;
    }
    if (v8)
    {
      unsigned int v10 = *(unsigned __int16 *)(v4 + 28);
      BOOL v11 = v10 == a3;
      char v9 = v10 >= a3 ? 1 : -1;
      if (v11) {
        char v9 = 0;
      }
    }
    BOOL v12 = (v9 & 0x80) == 0;
    if (v9 < 0) {
      unint64_t v13 = (uint64_t *)(v4 + 8);
    }
    else {
      unint64_t v13 = (uint64_t *)v4;
    }
    if (v12) {
      uint64_t v6 = v4;
    }
    uint64_t v4 = *v13;
  }
  while (*v13);
  if (v3 == v6) {
    return v3;
  }
  unsigned int v14 = *(unsigned __int16 *)(v6 + 26);
  if (v14 <= a2) {
    char v15 = 1;
  }
  else {
    char v15 = -1;
  }
  if (v14 == a2)
  {
    unsigned int v16 = *(unsigned __int16 *)(v6 + 28);
    char v17 = -1;
    if (v16 <= a3) {
      char v17 = 1;
    }
    if (v16 == a3) {
      char v15 = 0;
    }
    else {
      char v15 = v17;
    }
  }
  if (v15 < 0) {
    return v3;
  }
  return v6;
}

void CA::WindowServer::anonymous namespace'::OGLDisplay::~OGLDisplay(CA::WindowServer::_anonymous_namespace_::OGLDisplay *this)
{
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

uint64_t CA::WindowServer::Display::render_surface(CA::WindowServer::Display *this, CA::Shape **a2, CA::WindowServer::Surface *a3, CA::Render::Update *a4, const CA::Bounds *a5, unsigned int a6, int a7)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  unsigned int v14 = (void *)MEMORY[0x185324A30]();
  unsigned int v47 = a6;
  if (((*((unsigned int *)a4 + 271) | ((unint64_t)*((unsigned __int16 *)a4 + 544) << 32)) & 0x100000000000) != 0
    || !CA::WindowServer::Display::Mode::is_hdr((CA::WindowServer::Display *)((char *)this + 640)))
  {
    goto LABEL_12;
  }
  if (CADeviceHasHardwareAcceleratedHDR::once[0] != -1) {
    dispatch_once(CADeviceHasHardwareAcceleratedHDR::once, &__block_literal_global_132);
  }
  if (!CADeviceHasHardwareAcceleratedHDR::has_capability)
  {
    if (CADeviceIsVirtualized::once != -1) {
      dispatch_once(&CADeviceIsVirtualized::once, &__block_literal_global_280);
    }
    if (!CADeviceIsVirtualized::is_virtualized) {
      goto LABEL_12;
    }
  }
  if ((*((_DWORD *)a4 + 67) & 0x38000) != 0
    && ((*((unsigned int *)a4 + 271) | ((unint64_t)*((unsigned __int16 *)a4 + 544) << 32)) & 0x200000000) == 0)
  {
    uint64_t v15 = *((unsigned int *)a3 + 14);
    unsigned int v46 = *((_DWORD *)a3 + 15);
    uint64_t v16 = (*(uint64_t (**)(CA::WindowServer::Surface *))(*(void *)a3 + 24))(a3);
    unsigned int v17 = (*(uint64_t (**)(CA::WindowServer::Surface *))(*(void *)a3 + 56))(a3);
    uint64_t v18 = (*(uint64_t (**)(CA::WindowServer::Surface *))(*(void *)a3 + 216))(a3);
    uint64_t surface = CA::WindowServer::Display::allocate_surface((uint64_t)this, v15, v46, (CA::Render *)0x52476841, v16, v17, 0, v18, @"CA HDR Snapshot", 0);
  }
  else
  {
LABEL_12:
    uint64_t surface = 0;
  }
  char v20 = *a2;
  int v21 = *((_DWORD *)*a2 + 88);
  *((_DWORD *)*a2 + 88) = a7;
  *((void *)v20 + 24) = CA::WindowServer::Display::ogl_display(this);
  *(_OWORD *)((char *)v20 + 200) = *(_OWORD *)a5;
  *((_WORD *)v20 + 416) |= 2u;
  CA::Render::Update::render_edr_factor(a4, v22);
  float v24 = v23;
  if (a3)
  {
    unsigned int v25 = CA::Render::fourcc_to_format((CA::Render *)*((unsigned int *)a3 + 16));
    if (((v25 < 0x1D) & (0x17826000u >> v25)) != 0) {
      float v24 = 1.0;
    }
  }
  (*(void (**)(CA::Shape *, float))(*(void *)v20 + 1048))(v20, v24);
  CA::OGL::Renderer::prepare_clip_shape((CA::OGL::Renderer *)a2, *((const CA::Render::Update **)a4 + 2));
  if (a3)
  {
    int v26 = *((_DWORD *)a3 + 16);
    if (v26 == 1647534392 || v26 == 643969848)
    {
      int v27 = *((_DWORD *)a3 + 56);
      if ((v27 & 0x40000000) == 0)
      {
        *((unsigned char *)a3 + 228) = *((unsigned char *)a3 + 228);
        *((_DWORD *)a3 + 56) = v27 | 0xC0000000;
      }
    }
  }
  if (surface) {
    BOOL v28 = (CA::WindowServer::Surface *)surface;
  }
  else {
    BOOL v28 = a3;
  }
  if (v28
    && (*(unsigned int (**)(CA::Shape *, CA::WindowServer::Surface *))(*(void *)v20 + 920))(v20, v28))
  {
    memset(v56, 0, 48);
    v50[0] = *(_OWORD *)a5;
    CA::Shape::operator=((uint64_t)v56, v50);
    uint64_t v48 = 0;
    (*(void (**)(CA::Shape *, unsigned char *, uint64_t *))(*(void *)v20 + 912))(v20, v56, &v48);
    CA::OGL::Renderer::render((CA::OGL::Renderer *)a2, a4, *((void *)a3 + 2), v29);
    (*(void (**)(CA::Shape *, void))(*(void *)v20 + 408))(v20, v47);
    unsigned int v31 = *((_DWORD *)v28 + 56);
    BOOL v30 = (char *)v28 + 224;
    uint64_t v32 = v30[4];
    *(_DWORD *)BOOL v30 = v31;
    v30[4] = ((v31 | (unint64_t)(v32 << 32)) & 0xFFFFFFFDFFFFFFFFLL) >> 32;
    (*(void (**)(CA::Shape *, void))(*(void *)v20 + 920))(v20, 0);
    if (surface)
    {
      unint64_t v33 = *(_DWORD *)(surface + 224) & 0xFDFFFFFF | ((unint64_t)*(unsigned __int8 *)(surface + 228) << 32);
      *(_DWORD *)(surface + 224) &= ~0x2000000u;
      *(unsigned char *)(surface + 228) = BYTE4(v33);
      long long v55 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      memset(v50, 0, sizeof(v50));
      CA::WindowServer::Display::display_attributes((CA::WindowServer::Display *)v50, (uint64_t *)this);
      HIDWORD(v51) = 0;
      uint64_t v34 = (*(uint64_t (**)(CA::WindowServer::Surface *))(*(void *)a3 + 216))(a3);
      uint64_t v35 = (*(uint64_t (**)(CA::WindowServer::Display *, CA::WindowServer::Surface *, uint64_t, _OWORD *, CA::Render::Update *, void, uint64_t, void))(*(void *)this + 640))(this, a3, surface, v50, a4, 0, v34, 0);
      if (v35)
      {
        uint64_t v36 = *((_DWORD *)a4 + 120) == 2;
        unsigned int v38 = *((_DWORD *)a3 + 56);
        int v37 = (char *)a3 + 224;
        unint64_t v39 = (v38 | ((unint64_t)v37[4] << 32)) & 0xFFFFFFEFFFFFFFFFLL;
        *(_DWORD *)int v37 = v38;
        v37[4] = (v39 | (v36 << 36)) >> 32;
        CA::WindowServer::Surface::unref((CA::WindowServer::Surface *)surface);
      }
      else
      {
        unsigned int v43 = *((_DWORD *)a3 + 56);
        double v42 = (char *)a3 + 224;
        uint64_t v44 = v42[4];
        *(_DWORD *)double v42 = v43;
        v42[4] = ((v43 | (unint64_t)(v44 << 32)) & 0xFFFFFFEFFFFFFFFFLL) >> 32;
        CA::WindowServer::Surface::unref((CA::WindowServer::Surface *)surface);
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          unsigned int v45 = x_log_category_windowserver;
          if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl(&dword_184668000, v45, OS_LOG_TYPE_ERROR, "Unable to tonemap surface.", buf, 2u);
          }
        }
      }
    }
    else
    {
      uint64_t v35 = 1;
    }
  }
  else
  {
    uint64_t v35 = 0;
  }
  int64x2_t v40 = a2[2];
  if (v40)
  {
    CA::Shape::unref(v40);
    a2[2] = 0;
  }
  (*(void (**)(CA::Shape *, float))(*(void *)v20 + 1048))(v20, 1.0);
  *((void *)v20 + 24) = 0;
  *((_WORD *)v20 + 416) &= ~2u;
  *((_DWORD *)v20 + 88) = v21;
  return v35;
}

void CA::WindowServer::Display::print_display_trace_log_in_range(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  if (CA::WindowServer::Display::get_display_trace_log(void)::once[0] != -1) {
    dispatch_once(CA::WindowServer::Display::get_display_trace_log(void)::once, &__block_literal_global_75);
  }
  log = CA::WindowServer::Display::get_display_trace_log(void)::log;
  uint64_t v7 = a1 + 752;
  if (*(void *)(a1 + 25328) == a3)
  {
    BOOL v8 = CA::WindowServer::Display::get_display_trace_log(void)::log;
    if (os_signpost_enabled((os_log_t)CA::WindowServer::Display::get_display_trace_log(void)::log))
    {
      int v9 = *(_DWORD *)(a1 + 24);
      uint64_t v10 = *(void *)(v7 + 48 * a3 + 8);
      *(_DWORD *)long long buf = 67240448;
      *(_DWORD *)int v56 = v9;
      *(_WORD *)&v56[4] = 2050;
      *(void *)&v56[6] = v10;
      _os_signpost_emit_with_name_impl(&dword_184668000, v8, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "DisplayTrace", "DisplayID=%{public, name=DisplayID}u %{public, signpost.description:begin_time}llu", buf, 0x12u);
    }
  }
  uint64_t v51 = a1;
  unint64_t v11 = a3;
  if (a3 < a4)
  {
    uint64_t v52 = a2;
    unsigned int v12 = a3 + 1;
    do
    {
      uint64_t v13 = v7 + 48 * v11;
      memset(v67, 0, sizeof(v67));
      unint64_t v15 = *(void *)(v13 + 8);
      unsigned int v14 = (char **)(v13 + 8);
      CFStringRef v16 = CACreateDateStringFromHostContinuousTime(v15, @"yyyy-MM-dd HH:mm:ss.SSS");
      CCFStringRef String = CA_CFStringGetCString(v16, (char *)v67, 32);
      switch(*(_DWORD *)(v7 + 48 * v11))
      {
        case 1:
          if (v52) {
            x_stream_printf(v52, "%s  Detach Surface: %llu x %llu Displayed Surface: %llu x %llu\n", v17, v18, v19, v20, v21, v22, (uint64_t)CString);
          }
          if (os_signpost_enabled(log))
          {
            float v24 = (void *)(v7 + 48 * v11);
            uint64_t v25 = v24[2];
            int v26 = (char *)v24[3];
            BOOL v28 = (char *)v24[4];
            int v27 = (char *)v24[5];
            unint64_t v29 = *v14;
            *(_DWORD *)long long buf = 136447490;
            *(void *)int v56 = CString;
            *(_WORD *)&v56[8] = 2050;
            *(void *)&v56[10] = v25;
            __int16 v57 = 2050;
            uint64_t v58 = v26;
            __int16 v59 = 2050;
            unsigned int v60 = v28;
            __int16 v61 = 2050;
            int32x2_t v62 = v27;
            __int16 v63 = 2050;
            unsigned int v64 = v29;
            BOOL v30 = log;
            unsigned int v31 = "DetachedDimensions";
            uint64_t v32 = " DateTime=%{public, name=DateTime}s detachedWidth=%{public, name=detachedWidth}llu detachedHeight=%{pu"
                  "blic, name=detachedHeight}llu displayedWidth=%{public, name=displayedWidth}llu displayedHeight=%{publi"
                  "c, name=displayedHeight}llu eventTime=%{public, signpost.description:event_time}llu";
            uint32_t v33 = 62;
            goto LABEL_26;
          }
          break;
        case 2:
          if (v52) {
            x_stream_printf(v52, "%s  Speculative Release Surface ID: 0x%llx\n", v17, v18, v19, v20, v21, v22, (uint64_t)CString);
          }
          if (os_signpost_enabled(log))
          {
            uint64_t v34 = *(void *)(v7 + 48 * v11 + 16);
            uint64_t v35 = *v14;
            *(_DWORD *)long long buf = 136446722;
            *(void *)int v56 = CString;
            *(_WORD *)&v56[8] = 2050;
            *(void *)&v56[10] = v34;
            __int16 v57 = 2050;
            uint64_t v58 = v35;
            BOOL v30 = log;
            unsigned int v31 = "SpeculativeRelease";
            uint64_t v32 = " DateTime=%{public, name=DateTime}s IOSurfaceID=%{public, name=IOSurfaceID}#llx eventTime=%{public, si"
                  "gnpost.description:event_time}llu";
            goto LABEL_21;
          }
          break;
        case 3:
          if (v52) {
            x_stream_printf(v52, "%s  Detach Disable Reason: %llu\n", v17, v18, v19, v20, v21, v22, (uint64_t)CString);
          }
          if (os_signpost_enabled(log))
          {
            uint64_t v36 = *(void *)(v7 + 48 * v11 + 16);
            int v37 = *v14;
            *(_DWORD *)long long buf = 136446722;
            *(void *)int v56 = CString;
            *(_WORD *)&v56[8] = 2050;
            *(void *)&v56[10] = v36;
            __int16 v57 = 2050;
            uint64_t v58 = v37;
            BOOL v30 = log;
            unsigned int v31 = "DisableDetach";
            uint64_t v32 = " DateTime=%{public, name=DateTime}s Reason=%{public, name=Reason}llu eventTime=%{public, signpost.desc"
                  "ription:event_time}llu";
LABEL_21:
            uint32_t v33 = 32;
            goto LABEL_26;
          }
          break;
        case 4:
          uint64_t v38 = v7 + 48 * v11;
          unint64_t v39 = (uint64_t *)(v38 + 16);
          unsigned int v40 = *(unsigned __int16 *)(v38 + 24);
          if (v52) {
            x_stream_printf(v52, "%20s  SharedEvent IOSurface ID: 0x%16llx  Usage: %23s  Operation: %9s  Access: %6s  Value: 0x%16llx\n", v17, v18, v19, v20, v21, v22, (uint64_t)CString);
          }
          if (os_signpost_enabled(log))
          {
            unsigned int v41 = CA::WindowServer::SharedEvent::UsageString[v40 & 0x1F];
            double v42 = CA::WindowServer::SharedEvent::OperationString[(v40 >> 5) & 3];
            unsigned int v43 = CA::WindowServer::SharedEvent::AccessString[(v40 >> 7) & 3];
            uint64_t v44 = *v39;
            unsigned int v45 = *(char **)(v7 + 48 * v11 + 32);
            unsigned int v46 = *v14;
            *(_DWORD *)long long buf = 136447746;
            *(void *)int v56 = CString;
            *(_WORD *)&v56[8] = 2050;
            *(void *)&v56[10] = v44;
            __int16 v57 = 2082;
            uint64_t v58 = v41;
            __int16 v59 = 2082;
            unsigned int v60 = v42;
            __int16 v61 = 2082;
            int32x2_t v62 = v43;
            __int16 v63 = 2050;
            unsigned int v64 = v45;
            __int16 v65 = 2050;
            float v66 = v46;
            BOOL v30 = log;
            unsigned int v31 = "SharedEvent";
            uint64_t v32 = " DateTime=%{public, name=DateTime}s IOSurfaceID=%{public, name=IOSurfaceID}#llx Usage=%{public, name=U"
                  "sage}s Operation=%{public, name=Operation}s Access=%{public, name=Access}s Value=%{public, name=Value}"
                  "#llx eventTime=%{public, signpost.description:event_time}llu";
            uint32_t v33 = 72;
LABEL_26:
            _os_signpost_emit_with_name_impl(&dword_184668000, v30, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v31, v32, buf, v33);
          }
          break;
        default:
          break;
      }
      if (v16) {
        CFRelease(v16);
      }
      a3 = v11;
      unint64_t v47 = v12++;
      unint64_t v11 = v47;
    }
    while (v47 < a4);
  }
  if (*(void *)(v51 + 25328) == a4)
  {
    if (CA::WindowServer::Display::get_display_trace_log(void)::once[0] != -1) {
      dispatch_once(CA::WindowServer::Display::get_display_trace_log(void)::once, &__block_literal_global_75);
    }
    uint64_t v48 = CA::WindowServer::Display::get_display_trace_log(void)::log;
    if (os_signpost_enabled((os_log_t)CA::WindowServer::Display::get_display_trace_log(void)::log))
    {
      int v49 = *(_DWORD *)(v51 + 24);
      uint64_t v50 = *(void *)(v7 + 48 * a3 + 8);
      *(_DWORD *)long long buf = 67240448;
      *(_DWORD *)int v56 = v49;
      *(_WORD *)&v56[4] = 2050;
      *(void *)&v56[6] = v50;
      _os_signpost_emit_with_name_impl(&dword_184668000, v48, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "DisplayTrace", "DisplayID=%{public, name=DisplayID}u %{public, signpost.description:end_time}llu", buf, 0x12u);
    }
  }
}

uint64_t CA::WindowServer::Display::send_display_state_change_reply(uint64_t this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(this + 740))
  {
    uint64_t v1 = this;
    uint64_t v2 = **(unsigned __int8 **)(this + 728);
    char v3 = v2 != *(unsigned __int8 *)(this + 736);
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v4 = x_log_category_display_state;
      if (os_log_type_enabled((os_log_t)x_log_category_display_state, OS_LOG_TYPE_DEFAULT))
      {
        int v5 = *(_DWORD *)(v1 + 24);
        if (v2 > 0xB) {
          uint64_t v6 = "unknown";
        }
        else {
          uint64_t v6 = off_1E5273AC0[v2];
        }
        *(_DWORD *)long long buf = 67109378;
        int v8 = v5;
        __int16 v9 = 2080;
        uint64_t v10 = v6;
        _os_log_impl(&dword_184668000, v4, OS_LOG_TYPE_DEFAULT, "(send) signal clients display %u state changed to %s", buf, 0x12u);
      }
    }
    _CACDisplayDidChangeToState(*(_DWORD *)(v1 + 740), *(_DWORD *)(v1 + 24), v2, *(unsigned char *)(v1 + 744), v3);
    this = mach_port_deallocate(*MEMORY[0x1E4F14960], *(_DWORD *)(v1 + 740));
    *(_DWORD *)(v1 + 740) = 0;
  }
  return this;
}

uint64_t CA::WindowServer::Display::flush_display_state_change_reply(uint64_t this)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(this + 740))
  {
    uint64_t v1 = this;
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v2 = x_log_category_display_state;
      if (os_log_type_enabled((os_log_t)x_log_category_display_state, OS_LOG_TYPE_DEFAULT))
      {
        int v3 = *(_DWORD *)(v1 + 24);
        unint64_t v4 = **(unsigned __int8 **)(v1 + 728);
        if (v4 > 0xB) {
          int v5 = "unknown";
        }
        else {
          int v5 = off_1E5273AC0[v4];
        }
        *(_DWORD *)long long buf = 67109378;
        int v7 = v3;
        __int16 v8 = 2080;
        __int16 v9 = v5;
        _os_log_impl(&dword_184668000, v2, OS_LOG_TYPE_DEFAULT, "(flush) signal clients display %u state changed to %s", buf, 0x12u);
      }
    }
    _CACDisplayDidChangeToState(*(_DWORD *)(v1 + 740), *(_DWORD *)(v1 + 24), **(unsigned char **)(v1 + 728), *(unsigned char *)(v1 + 744), 3);
    this = mach_port_deallocate(*MEMORY[0x1E4F14960], *(_DWORD *)(v1 + 740));
    *(_DWORD *)(v1 + 740) = 0;
  }
  return this;
}

void CA::WindowServer::Display::complete_powering_on(os_unfair_lock_s *this)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = this + 179;
  os_unfair_lock_lock(this + 179);
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    int v3 = x_log_category_display_state;
    if (os_log_type_enabled((os_log_t)x_log_category_display_state, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unint64_t v4 = 0;
      _os_log_impl(&dword_184668000, v3, OS_LOG_TYPE_DEFAULT, "Display::complete_powering_on", v4, 2u);
    }
  }
  *(unsigned char *)(*(void *)&this[182]._os_unfair_lock_opaque + 2) = 1;
  os_unfair_lock_unlock(v2);
}

void CA::Render::LayerHost::count_layers(CA::Render::LayerHost *this, int *a2, int *a3, char a4)
{
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::LayerHost::_lock);
  uint64_t v8 = *((void *)this + 9);
  if (v8)
  {
    if (atomic_fetch_add((atomic_uint *volatile)(v8 + 8), 1u))
    {
      os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::LayerHost::_lock);
      pthread_mutex_lock((pthread_mutex_t *)(v8 + 72));
      uint64_t v9 = CA::Render::Context::root_layer_handle(*((CA::Render::Context **)this + 9));
      if (v9)
      {
        uint64_t v10 = *(atomic_uint **)(v9 + 16);
        if (v10)
        {
          uint64_t v11 = v10 + 2;
          if (atomic_fetch_add(v10 + 2, 1u))
          {
            pthread_mutex_unlock((pthread_mutex_t *)(v8 + 72));
            CA::Render::Layer::count_layers((uint64_t)v10, a2, a3, a4);
            if (atomic_fetch_add(v11, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v10 + 16))(v10);
            }
            goto LABEL_14;
          }
          atomic_fetch_add(v11, 0xFFFFFFFF);
        }
      }
      pthread_mutex_unlock((pthread_mutex_t *)(v8 + 72));
LABEL_14:
      if (atomic_fetch_add((atomic_uint *volatile)(v8 + 8), 0xFFFFFFFF) == 1)
      {
        unsigned int v12 = *(void (**)(uint64_t))(*(void *)v8 + 16);
        v12(v8);
      }
      return;
    }
    atomic_fetch_add((atomic_uint *volatile)(v8 + 8), 0xFFFFFFFF);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::LayerHost::_lock);
}

atomic_uint **X::Ref<CA::Render::AsynchronousState>::operator=(atomic_uint **a1, atomic_uint **a2)
{
  int v3 = *a1;
  unint64_t v4 = *a2;
  if (v3 != *a2)
  {
    if (v3)
    {
      if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      }
      unint64_t v4 = *a2;
    }
    if (v4)
    {
      uint64_t v6 = v4 + 2;
      if (!atomic_fetch_add(v4 + 2, 1u))
      {
        unint64_t v4 = 0;
        atomic_fetch_add(v6, 0xFFFFFFFF);
      }
    }
    *a1 = v4;
  }
  return a1;
}

void CA::Render::LayerHost::show(CA::Render::LayerHost *this, int a2, uint64_t a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  BOOL v6 = x_log_hook_p();
  if ((a3 & 1) == 0)
  {
    if (v6)
    {
      x_log_();
    }
    else
    {
      int v7 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        int v8 = *((_DWORD *)this + 4);
        *(_DWORD *)long long buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v8;
        _os_log_impl(&dword_184668000, v7, OS_LOG_TYPE_DEFAULT, "(layer-host %x", buf, 8u);
      }
    }
    if ((*((unsigned char *)this + 13) & 2) != 0)
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        uint64_t v9 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_184668000, v9, OS_LOG_TYPE_DEFAULT, "(inherits-security true)", buf, 2u);
        }
      }
    }
    if ((*((unsigned char *)this + 13) & 4) != 0)
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        uint64_t v10 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_184668000, v10, OS_LOG_TYPE_DEFAULT, "(renders-asynchronously true)", buf, 2u);
        }
      }
    }
    if ((*((unsigned char *)this + 13) & 8) != 0)
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        uint64_t v11 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_184668000, v11, OS_LOG_TYPE_DEFAULT, "(renders-opaque true)", buf, 2u);
        }
      }
    }
    if ((*((unsigned char *)this + 13) & 0x10) != 0)
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        unsigned int v12 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_184668000, v12, OS_LOG_TYPE_DEFAULT, "(resizes-hosted-context true)", buf, 2u);
        }
      }
    }
    if ((*((unsigned char *)this + 13) & 0x80) != 0)
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        uint64_t v13 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_184668000, v13, OS_LOG_TYPE_DEFAULT, "(sequestered true)", buf, 2u);
        }
      }
    }
    if ((*((unsigned char *)this + 13) & 0x40) != 0)
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        unsigned int v14 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_184668000, v14, OS_LOG_TYPE_DEFAULT, "(transforms-to-screen-space true)", buf, 2u);
        }
      }
    }
    if ((*((unsigned char *)this + 13) & 0x20) != 0)
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        unint64_t v15 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_184668000, v15, OS_LOG_TYPE_DEFAULT, "(stops-hit-test-transform-accumulation true)", buf, 2u);
        }
      }
    }
    uint64_t v16 = *((void *)this + 10);
    if (v16 && (*(_WORD *)(v16 + 552) & 0x20) != 0 || (*((unsigned char *)this + 14) & 1) != 0)
    {
      CA::Render::show_newline((CA::Render *)(a2 + 1));
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        uint64_t v17 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_184668000, v17, OS_LOG_TYPE_DEFAULT, "(stop-secure-superlayers-validation true)", buf, 2u);
        }
      }
    }
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::LayerHost::_lock);
    uint64_t v18 = *((void *)this + 9);
    if (v18)
    {
      if (!atomic_fetch_add((atomic_uint *volatile)(v18 + 8), 1u))
      {
        atomic_fetch_add((atomic_uint *volatile)(v18 + 8), 0xFFFFFFFF);
        os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::LayerHost::_lock);
        uint64_t v20 = 0;
        uint64_t v18 = 0;
        goto LABEL_66;
      }
      os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::LayerHost::_lock);
      pthread_mutex_lock((pthread_mutex_t *)(v18 + 72));
      uint64_t v19 = CA::Render::Context::root_layer_handle(*((CA::Render::Context **)this + 9));
      if (v19)
      {
        uint64_t v20 = *(atomic_uint **)(v19 + 16);
        if (v20)
        {
          if (atomic_fetch_add(v20 + 2, 1u))
          {
            pthread_mutex_unlock((pthread_mutex_t *)(v18 + 72));
            uint64_t v21 = (CA::Render *)(a2 + 1);
            CA::Render::show_newline(v21);
            (*(void (**)(atomic_uint *, CA::Render *, uint64_t))(*(void *)v20 + 40))(v20, v21, a3);
LABEL_66:
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              uint64_t v25 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)long long buf = 0;
                _os_log_impl(&dword_184668000, v25, OS_LOG_TYPE_DEFAULT, ")", buf, 2u);
              }
            }
            if (v20 && atomic_fetch_add(v20 + 2, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v20 + 16))(v20);
            }
            if (v18)
            {
              if (atomic_fetch_add((atomic_uint *volatile)(v18 + 8), 0xFFFFFFFF) == 1) {
                (*(void (**)(uint64_t))(*(void *)v18 + 16))(v18);
              }
            }
            return;
          }
          atomic_fetch_add(v20 + 2, 0xFFFFFFFF);
        }
      }
      pthread_mutex_unlock((pthread_mutex_t *)(v18 + 72));
    }
    else
    {
      os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::LayerHost::_lock);
    }
    uint64_t v20 = 0;
    goto LABEL_66;
  }
  if (v6)
  {
    x_log_();
  }
  else
  {
    uint64_t v22 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_184668000, v22, OS_LOG_TYPE_DEFAULT, "layer-host ", buf, 2u);
    }
  }
  *(void *)long long buf = 0;
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::LayerHost::_lock);
  X::Ref<CA::Render::Texture>::operator=((atomic_uint **)buf, *((atomic_uint **)this + 9));
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::LayerHost::_lock);
  BOOL v28 = 0;
  if (*(void *)buf)
  {
    pthread_mutex_lock((pthread_mutex_t *)(*(void *)buf + 72));
    uint64_t v23 = CA::Render::Context::root_layer_handle(*((CA::Render::Context **)this + 9));
    if (v23) {
      float v24 = *(atomic_uint **)(v23 + 16);
    }
    else {
      float v24 = 0;
    }
    X::Ref<CA::Render::Texture>::operator=(&v28, v24);
    pthread_mutex_unlock((pthread_mutex_t *)(*(void *)buf + 72));
    if (v28)
    {
      (*(void (**)(atomic_uint *, void, uint64_t))(*(void *)v28 + 40))(v28, (a2 + 1), a3);
      int v26 = v28;
      if (v28)
      {
        if (atomic_fetch_add(v28 + 2, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v26 + 16))(v26);
        }
      }
    }
    uint64_t v27 = *(void *)buf;
    if (*(void *)buf && atomic_fetch_add((atomic_uint *volatile)(*(void *)buf + 8), 0xFFFFFFFF) == 1) {
      (*(void (**)(uint64_t))(*(void *)v27 + 16))(v27);
    }
  }
}

dispatch_queue_t ___ZN2CA6Render16AsynchronousItemD2Ev_block_invoke()
{
  uint64_t v0 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  dispatch_queue_t result = dispatch_queue_create("com.apple.coreanimation.async_hit_test_tree_dealloc", v0);
  CA::Render::AsynchronousItem::~AsynchronousItem()::queue = (uint64_t)result;
  return result;
}

void CA::Render::Context::show_hosts(CA::Render::Context *this)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::LayerHost::_lock);
  os_unfair_lock_lock(&CA::Render::Context::_context_lock);
  if (!*((void *)this + 52))
  {
    CA::Render::Context::show_hosts_(this, 0);
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v2 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int v3 = 0;
        _os_log_impl(&dword_184668000, v2, OS_LOG_TYPE_DEFAULT, "\n", v3, 2u);
      }
    }
  }
  os_unfair_lock_unlock(&CA::Render::Context::_context_lock);
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::LayerHost::_lock);
}

uint64_t CA::Render::Context::show_hosts_(CA::Render::Context *this, int a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (pthread_mutex_t *)((char *)this + 72);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 72));
  if (x_log_hook_p())
  {
    if (!atomic_load((unsigned int *)this + 57))
    {
      if (*((_DWORD *)this + 63)) {
        pid_t v6 = 0;
      }
      else {
        pid_t v6 = getpid();
      }
      int v11 = 0;
      atomic_compare_exchange_strong((atomic_uint *volatile)this + 57, (unsigned int *)&v11, v6);
    }
    CA::Render::Context::process_path(this);
    x_log_();
  }
  else
  {
    int v7 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = *((_DWORD *)this + 4);
      unsigned int v9 = atomic_load((unsigned int *)this + 57);
      if (!v9)
      {
        if (*((_DWORD *)this + 63)) {
          pid_t v10 = 0;
        }
        else {
          pid_t v10 = getpid();
        }
        unsigned int v12 = 0;
        atomic_compare_exchange_strong((atomic_uint *volatile)this + 57, &v12, v10);
        if (v12) {
          unsigned int v9 = v12;
        }
        else {
          unsigned int v9 = v10;
        }
      }
      *(_DWORD *)long long buf = 67109890;
      int v21 = v8;
      __int16 v22 = 2080;
      uint64_t v23 = "";
      __int16 v24 = 1024;
      unsigned int v25 = v9;
      __int16 v26 = 2080;
      uint64_t v27 = CA::Render::Context::process_path(this) + 7;
      _os_log_impl(&dword_184668000, v7, OS_LOG_TYPE_DEFAULT, "  %x; %spid %d [%s]", buf, 0x22u);
    }
  }
  if (!*((_DWORD *)this + 64))
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v13 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_184668000, v13, OS_LOG_TYPE_DEFAULT, " (local)", buf, 2u);
      }
    }
  }
  if (*((_DWORD *)this + 88))
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      unsigned int v14 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_184668000, v14, OS_LOG_TYPE_DEFAULT, " (visible)", buf, 2u);
      }
    }
  }
  if ((*((_WORD *)this + 276) & 4) != 0)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      unint64_t v15 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_184668000, v15, OS_LOG_TYPE_DEFAULT, " (secure)", buf, 2u);
      }
    }
  }
  uint64_t v16 = (CA::Render *)(a2 + 1);
  CA::Render::show_newline(v16);
  for (uint64_t i = (void *)*((void *)this + 53); i; uint64_t i = (void *)i[1])
  {
    uint64_t v18 = *(CA::Render::Context **)(*i + 72);
    if (v18) {
      CA::Render::Context::show_hosts_(v18, v16);
    }
  }
  return pthread_mutex_unlock(v4);
}

uint64_t CA::Render::Context::needs_defer_update_locked(os_unfair_lock_s *this)
{
  uint64_t v2 = this + 158;
  os_unfair_lock_lock(this + 158);
  uint64_t v3 = *(void *)&this[166]._os_unfair_lock_opaque;
  os_unfair_lock_unlock(v2);
  if (v3) {
    return 1;
  }
  uint64_t v5 = *(void **)&this[106]._os_unfair_lock_opaque;
  if (v5)
  {
    while (1)
    {
      pid_t v6 = *(CA::Render::Context **)(*v5 + 72);
      if (v6)
      {
        if (CA::Render::Context::needs_defer_update_locked(v6)) {
          break;
        }
      }
      uint64_t v5 = (void *)v5[1];
      if (!v5) {
        return 0;
      }
    }
    return 1;
  }
  return 0;
}

int32x2_t CA::WindowServer::d65a_to_d65_matrix(int32x2_t *a1, unint64_t *a2, double a3, float32x4_t a4, double a5, double a6, float32x4_t a7)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  int v8 = (float32x4_t *)&unk_1E8F87000;
  {
    unint64_t v47 = a2;
    int v8 = (float32x4_t *)&unk_1E8F87000;
    a2 = v47;
    if (v37)
    {
      CA::WindowServer::d65a_to_d65_matrix(CAChromaticities)::D65_xyY = xmmword_1849980A0;
      int v8 = (float32x4_t *)&unk_1E8F87000;
      a2 = v47;
    }
  }
  unsigned int v9 = (float32x4_t *)&unk_1E8F87000;
  {
    uint64_t v48 = a2;
    unsigned int v9 = (float32x4_t *)&unk_1E8F87000;
    int v8 = (float32x4_t *)&unk_1E8F87000;
    a2 = v48;
    if (v38)
    {
      CA::WindowServer::d65a_to_d65_matrix(CAChromaticities)::D65a_xyY = xmmword_1849980B0;
      unsigned int v9 = (float32x4_t *)&unk_1E8F87000;
      int v8 = (float32x4_t *)&unk_1E8F87000;
      a2 = v48;
    }
  }
  a4.i64[0] = *a2;
  a7.i64[0] = a2[1];
  a4.i32[2] = 1.0;
  float32x4_t v10 = a4;
  float32x4_t v45 = a4;
  a7.i32[2] = 1.0;
  float32x4_t v46 = v8[224];
  v11.i64[0] = a2[2];
  v11.i64[1] = __PAIR64__(v46.u32[3], 1.0);
  float32x4_t v40 = v11;
  float32x4_t v42 = a7;
  float32x4_t v12 = v9[226];
  float32x4_t v44 = v12;
  float32x4_t v54 = 0u;
  float32x4_t v55 = 0u;
  long long v52 = 0u;
  float32x4_t v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  RGBXYZConversionMatrices<float>::RGBXYZConversionMatrices((uint64_t)&v50, v10, a7, v11, v12);
  memset(v49, 0, sizeof(v49));
  RGBXYZConversionMatrices<float>::RGBXYZConversionMatrices((uint64_t)v49, v45, v42, v40, v46);
  float32x4_t v13 = vdivq_f32(vmlaq_n_f32(vmlaq_laneq_f32(vmulq_n_f32((float32x4_t)xmmword_1849980C0, vmuls_lane_f32(v46.f32[0], v46, 2) / v46.f32[1]), (float32x4_t)xmmword_1849980D0, v46, 2), (float32x4_t)xmmword_1849980E0, vmuls_lane_f32(1.0 - vaddv_f32(*(float32x2_t *)v46.f32), v46, 2) / v46.f32[1]), vmlaq_n_f32(vmlaq_laneq_f32(vmulq_n_f32((float32x4_t)xmmword_1849980C0, vmuls_lane_f32(v44.f32[0], v44, 2) / v44.f32[1]), (float32x4_t)xmmword_1849980D0, v44, 2), (float32x4_t)xmmword_1849980E0, vmuls_lane_f32(1.0 - vaddv_f32(*(float32x2_t *)v44.f32), v44, 2) / v44.f32[1]));
  *(void *)&long long v14 = 0;
  *((void *)&v14 + 1) = v13.u32[2];
  long long v43 = v14;
  DWORD1(v14) = v13.i32[1];
  long long v41 = (unint64_t)v14;
  long long v39 = v13.u32[0];
  simd_float3x3 v63 = __invert_f3(*(simd_float3x3 *)_PromotedConst);
  uint64_t v15 = 0;
  long long v56 = v39;
  long long v57 = v41;
  long long v58 = v43;
  float32x4_t v59 = 0u;
  float32x4_t v60 = 0u;
  float32x4_t v61 = 0u;
  do
  {
    *(float32x4_t *)((char *)&v59 + v15) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v63.columns[0], COERCE_FLOAT(*(long long *)((char *)&v56 + v15))), (float32x4_t)v63.columns[1], *(float32x2_t *)((char *)&v56 + v15), 1), (float32x4_t)v63.columns[2], *(float32x4_t *)((char *)&v56 + v15), 2);
    v15 += 16;
  }
  while (v15 != 48);
  uint64_t v16 = 0;
  float32x4_t v17 = v59;
  float32x4_t v18 = v60;
  float32x4_t v19 = v61;
  long long v56 = xmmword_1849980C0;
  long long v57 = xmmword_1849980D0;
  long long v58 = xmmword_1849980E0;
  float32x4_t v59 = 0u;
  float32x4_t v60 = 0u;
  float32x4_t v61 = 0u;
  do
  {
    *(float32x4_t *)((char *)&v59 + v16) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v17, COERCE_FLOAT(*(long long *)((char *)&v56 + v16))), v18, *(float32x2_t *)((char *)&v56 + v16), 1), v19, *(float32x4_t *)((char *)&v56 + v16), 2);
    v16 += 16;
  }
  while (v16 != 48);
  uint64_t v20 = 0;
  float32x4_t v21 = v59;
  float32x4_t v22 = v60;
  float32x4_t v23 = v61;
  v21.i32[3] = 0;
  v22.i32[3] = 0;
  v23.i32[3] = 0;
  float32x4_t v24 = v53;
  float32x4_t v25 = v54;
  float32x4_t v26 = v55;
  long long v56 = (__int128)v21;
  long long v57 = (__int128)v22;
  long long v58 = (__int128)v23;
  float32x4_t v59 = 0u;
  float32x4_t v60 = 0u;
  float32x4_t v61 = 0u;
  do
  {
    *(float32x4_t *)((char *)&v59 + v20) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v24, COERCE_FLOAT(*(long long *)((char *)&v56 + v20))), v25, *(float32x2_t *)((char *)&v56 + v20), 1), v26, *(float32x4_t *)((char *)&v56 + v20), 2);
    v20 += 16;
  }
  while (v20 != 48);
  uint64_t v27 = 0;
  float32x4_t v28 = v59;
  float32x4_t v29 = v60;
  float32x4_t v30 = v61;
  long long v56 = v50;
  long long v57 = v51;
  long long v58 = v52;
  float32x4_t v59 = 0u;
  float32x4_t v60 = 0u;
  float32x4_t v61 = 0u;
  do
  {
    *(float32x4_t *)((char *)&v59 + v27) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v28, COERCE_FLOAT(*(long long *)((char *)&v56 + v27))), v29, *(float32x2_t *)((char *)&v56 + v27), 1), v30, *(float32x4_t *)((char *)&v56 + v27), 2);
    v27 += 16;
  }
  while (v27 != 48);
  float32x4_t v31 = vaddq_f32(vaddq_f32(v60, v59), v61);
  v31.f32[0] = 1.0 / fmaxf(fmaxf(v31.f32[0], v31.f32[2]), v31.f32[1]);
  int8x16_t v32 = (int8x16_t)vmulq_n_f32(v59, v31.f32[0]);
  int8x16_t v33 = (int8x16_t)vmulq_n_f32(v60, v31.f32[0]);
  float32x4_t v34 = vmulq_n_f32(v61, v31.f32[0]);
  int32x2_t v35 = vzip2_s32(*(int32x2_t *)v33.i8, *(int32x2_t *)v34.f32);
  a1[4].i32[0] = v34.i32[2];
  v34.i32[1] = v32.i32[1];
  *a1 = vzip1_s32(*(int32x2_t *)v32.i8, *(int32x2_t *)v33.i8);
  a1[1] = *(int32x2_t *)v34.f32;
  int32x2_t result = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL));
  a1[2] = v35;
  a1[3] = result;
  return result;
}

uint64_t RGBXYZConversionMatrices<float>::RGBXYZConversionMatrices(uint64_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5)
{
  v5.f32[0] = vmuls_lane_f32(a2.f32[0], a2, 2) / a2.f32[1];
  v6.f32[0] = vmuls_lane_f32(a3.f32[0], a3, 2) / a3.f32[1];
  v7.f32[0] = vmuls_lane_f32(a4.f32[0], a4, 2) / a4.f32[1];
  float v16 = vmuls_lane_f32(a5.f32[0], a5, 2) / a5.f32[1];
  v5.i32[1] = a2.i32[2];
  v5.f32[2] = vmuls_lane_f32(1.0 - vaddv_f32(*(float32x2_t *)a2.f32), a2, 2) / a2.f32[1];
  v6.i32[1] = a3.i32[2];
  v6.f32[2] = vmuls_lane_f32(1.0 - vaddv_f32(*(float32x2_t *)a3.f32), a3, 2) / a3.f32[1];
  v17.columns[1] = v6;
  float32x4_t v12 = (float32x4_t)v6;
  float32x4_t v13 = (float32x4_t)v5;
  v7.i32[1] = a4.i32[2];
  v7.f32[2] = vmuls_lane_f32(1.0 - vaddv_f32(*(float32x2_t *)a4.f32), a4, 2) / a4.f32[1];
  v17.columns[2] = v7;
  float32x4_t v11 = (float32x4_t)v7;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  float v14 = vmuls_lane_f32(1.0 - vaddv_f32(*(float32x2_t *)a5.f32), a5, 2) / a5.f32[1];
  v17.columns[0] = v5;
  simd_float3x3 v18 = __invert_f3(v17);
  float32x4_t v9 = vmlaq_n_f32(vmlaq_laneq_f32(vmulq_n_f32((float32x4_t)v18.columns[0], v16), (float32x4_t)v18.columns[1], a5, 2), (float32x4_t)v18.columns[2], v14);
  v18.columns[0] = (simd_float3)vmulq_n_f32(v13, v9.f32[0]);
  v18.columns[1] = (simd_float3)vmulq_lane_f32(v12, *(float32x2_t *)v9.f32, 1);
  v18.columns[2] = (simd_float3)vmulq_laneq_f32(v11, v9, 2);
  *(simd_float3x3 *)a1 = v18;
  simd_float3x3 v19 = __invert_f3(v18);
  *(_DWORD *)(a1 + 56) = v19.columns[0].i32[2];
  *(void *)(a1 + 48) = v19.columns[0].i64[0];
  *(_DWORD *)(a1 + 72) = v19.columns[1].i32[2];
  *(void *)(a1 + 64) = v19.columns[1].i64[0];
  *(_DWORD *)(a1 + 88) = v19.columns[2].i32[2];
  *(void *)(a1 + 80) = v19.columns[2].i64[0];
  return a1;
}

void ___ZN2CA12WindowServer11DebugPresetEj_block_invoke(uint64_t a1)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v2 = +[CAWindowServer serverIfRunning];
  if (v2)
  {
    uint64_t v3 = v2;
    context = (void *)MEMORY[0x185324A30]();
    uint64_t v4 = (void *)[v3 displays];
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    uint64_t v5 = [v4 countByEnumeratingWithState:&v30 objects:v29 count:16];
    if (v5)
    {
      uint64_t v6 = *(void *)v31;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v31 != v6) {
            objc_enumerationMutation(v4);
          }
          int v8 = *(void **)(*((void *)&v30 + 1) + 8 * i);
          if (![v8 displayType])
          {
            int v10 = *(_DWORD *)(a1 + 32);
            if (v10 == 2)
            {
              LODWORD(v9) = 1.0;
              [v8 setUserAdjustment:&_ZZZN2CA12WindowServer11DebugPresetEjEUb_E8identity scale:v9];
              [v8 setMaximumSDRLuminance:100.0];
              [v8 setMaximumHDRLuminance:1000.0];
              [v8 setMinimumLuminance:0.0005];
              [v8 setMaximumReferenceLuminance:1000.0];
              [v8 setTrinityCabalConfig:1];
              [v8 setPreserveAppleSRGBGammaResponse:0];
              [v8 setIsReferencePreset:1];
              simd_float3x3 v17 = objc_msgSend((id)objc_msgSend(v8, "brightnessCapabilities"), "mutableCopy");
              [v17 setObject:&unk_1ED057670 forKeyedSubscript:@"EDRPotentialHeadroom"];
              [v17 setObject:&unk_1ED057670 forKeyedSubscript:@"EDRReferenceHeadroom"];
              [v17 setObject:&unk_1ED057680 forKeyedSubscript:@"MinNits"];
              [v17 setObject:&unk_1ED057680 forKeyedSubscript:@"MaxNits"];
              [v17 setObject:&unk_1ED057690 forKeyedSubscript:@"MaxNitsEDR"];
              [v8 setBrightnessCapabilities:v17];

              int v28 = 0;
              long long v26 = 0u;
              long long v27 = 0u;
              *(int32x2_t *)&double v22 = CA::WindowServer::d65a_to_d65_matrix((int32x2_t *)&v26, _ZZZN2CA12WindowServer11DebugPresetEjEUb_E4srgb, 0.0, v18, v19, v20, v21);
              LODWORD(v22) = 1.0;
              [v8 setColorMatrix:&v26 scale:v22 rampDuration:0.0];
            }
            else
            {
              LODWORD(v9) = 1.0;
              if (v10 == 1)
              {
                [v8 setUserAdjustment:&_ZZZN2CA12WindowServer11DebugPresetEjEUb_E8identity scale:v9];
                [v8 setMaximumSDRLuminance:100.0];
                [v8 setMaximumHDRLuminance:1000.0];
                [v8 setMinimumLuminance:0.0005];
                [v8 setMaximumReferenceLuminance:1000.0];
                [v8 setTrinityCabalConfig:1];
                [v8 setPreserveAppleSRGBGammaResponse:0];
                [v8 setIsReferencePreset:1];
                float32x4_t v11 = objc_msgSend((id)objc_msgSend(v8, "brightnessCapabilities"), "mutableCopy");
                [v11 setObject:&unk_1ED057670 forKeyedSubscript:@"EDRPotentialHeadroom"];
                [v11 setObject:&unk_1ED057670 forKeyedSubscript:@"EDRReferenceHeadroom"];
                [v11 setObject:&unk_1ED057680 forKeyedSubscript:@"MinNits"];
                [v11 setObject:&unk_1ED057680 forKeyedSubscript:@"MaxNits"];
                [v11 setObject:&unk_1ED057690 forKeyedSubscript:@"MaxNitsEDR"];
                [v8 setBrightnessCapabilities:v11];

                int v28 = 0;
                long long v26 = 0u;
                long long v27 = 0u;
                *(int32x2_t *)&double v16 = CA::WindowServer::d65a_to_d65_matrix((int32x2_t *)&v26, _ZZZN2CA12WindowServer11DebugPresetEjEUb_E2p3, 0.0, v12, v13, v14, v15);
                LODWORD(v16) = 1.0;
                [v8 setColorMatrix:&v26 scale:v16 rampDuration:0.0];
              }
              else
              {
                [v8 setUserAdjustment:&_ZZZN2CA12WindowServer11DebugPresetEjEUb_E8identity scale:v9];
                [v8 setMaximumSDRLuminance:500.0];
                [v8 setMaximumHDRLuminance:1600.0];
                [v8 setMinimumLuminance:0.0005];
                [v8 setMaximumReferenceLuminance:600.0];
                [v8 setTrinityCabalConfig:1];
                [v8 setPreserveAppleSRGBGammaResponse:1];
                [v8 setIsReferencePreset:0];
                float32x4_t v23 = objc_msgSend((id)objc_msgSend(v8, "brightnessCapabilities"), "mutableCopy");
                [v23 setObject:&unk_1ED0576A0 forKeyedSubscript:@"EDRPotentialHeadroom"];
                [v23 setObject:&unk_1ED0576B0 forKeyedSubscript:@"EDRReferenceHeadroom"];
                [v23 setObject:&unk_1ED0576C0 forKeyedSubscript:@"MinNits"];
                [v23 setObject:&unk_1ED0576D0 forKeyedSubscript:@"MaxNits"];
                [v23 setObject:&unk_1ED0576E0 forKeyedSubscript:@"MaxNitsEDR"];
                [v8 setBrightnessCapabilities:v23];

                LODWORD(v24) = 1.0;
                [v8 setColorMatrix:&_ZZZN2CA12WindowServer11DebugPresetEjEUb_E8identity scale:v24 rampDuration:0.0];
              }
            }
            NSLog(&cfstr_SuccessD.isa, [v8 commitPreset]);
          }
        }
        uint64_t v5 = [v4 countByEnumeratingWithState:&v30 objects:v29 count:16];
      }
      while (v5);
    }
  }
}

void sub_18485E0F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *context)
{
}

void ___ZN2CA12WindowServer15DebugBrightnessEd_block_invoke(uint64_t a1)
{
  uint64_t v100 = *MEMORY[0x1E4F143B8];
  id v2 = +[CAWindowServer serverIfRunning];
  if (v2)
  {
    uint64_t v3 = v2;
    context = (void *)MEMORY[0x185324A30]();
    uint64_t v4 = (void *)[v3 displays];
    long long v98 = 0u;
    long long v99 = 0u;
    long long v96 = 0u;
    long long v97 = 0u;
    uint64_t v5 = [v4 countByEnumeratingWithState:&v96 objects:v95 count:16];
    if (!v5) {
      goto LABEL_54;
    }
    uint64_t v71 = *(void *)v97;
    __asm { FMOV            V15.2S, #1.0 }
    obuint64_t j = v4;
    while (1)
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v97 != v71) {
          objc_enumerationMutation(obj);
        }
        float32x4_t v12 = *(void **)(*((void *)&v96 + 1) + 8 * v11);
        if (![v12 displayType] || objc_msgSend(v12, "displayType") == 1)
        {
          if (x_log_hook_p())
          {
            uint64_t v66 = [v12 displayId];
            x_log_();
          }
          else
          {
            double v13 = x_log_category_windowserver;
            if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
            {
              int v14 = [v12 displayId];
              *(_DWORD *)long long buf = 67109120;
              *(_DWORD *)&uint8_t buf[4] = v14;
              _os_log_impl(&dword_184668000, v13, OS_LOG_TYPE_DEFAULT, "Debug Brightness Display %u", buf, 8u);
            }
          }
          if (x_log_hook_p())
          {
            uint64_t v66 = [v12 brightnessAvailable];
            x_log_();
          }
          else
          {
            float32x4_t v15 = x_log_category_windowserver;
            if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
            {
              int v16 = [v12 brightnessAvailable];
              *(_DWORD *)long long buf = 67109120;
              *(_DWORD *)&uint8_t buf[4] = v16;
              _os_log_impl(&dword_184668000, v15, OS_LOG_TYPE_DEFAULT, "    Brightness Available: %d", buf, 8u);
            }
          }
          if (x_log_hook_p())
          {
            uint64_t v66 = [v12 whitePointAvailable];
            x_log_();
          }
          else
          {
            simd_float3x3 v17 = x_log_category_windowserver;
            if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
            {
              int v18 = [v12 whitePointAvailable];
              *(_DWORD *)long long buf = 67109120;
              *(_DWORD *)&uint8_t buf[4] = v18;
              _os_log_impl(&dword_184668000, v17, OS_LOG_TYPE_DEFAULT, "    WhitePoint Available: %d", buf, 8u);
            }
          }
          if (x_log_hook_p())
          {
            uint64_t v66 = [v12 whitePointD50XYZ];
            x_log_();
          }
          else
          {
            double v19 = x_log_category_windowserver;
            if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
            {
              int v20 = [v12 whitePointD50XYZ];
              *(_DWORD *)long long buf = 67109120;
              *(_DWORD *)&uint8_t buf[4] = v20;
              _os_log_impl(&dword_184668000, v19, OS_LOG_TYPE_DEFAULT, "    WhitePoint XYZD50: %d", buf, 8u);
            }
          }
          float32x4_t v21 = objc_msgSend(v12, "brightnessCapabilities", v66);
          if (x_log_hook_p())
          {
            uint64_t v67 = objc_msgSend((id)objc_msgSend(v21, "debugDescription"), "UTF8String");
            x_log_();
          }
          else
          {
            double v22 = x_log_category_windowserver;
            if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v23 = objc_msgSend((id)objc_msgSend(v21, "debugDescription"), "UTF8String");
              *(_DWORD *)long long buf = 136315138;
              *(void *)&uint8_t buf[4] = v23;
              _os_log_impl(&dword_184668000, v22, OS_LOG_TYPE_DEFAULT, "    Capabilities: %s", buf, 0xCu);
            }
          }
          double v24 = objc_msgSend(v12, "averagePixelConstraints", v67);
          BOOL v25 = x_log_hook_p();
          if (v24)
          {
            if (v25)
            {
              uint64_t v68 = objc_msgSend((id)objc_msgSend(v24, "debugDescription"), "UTF8String");
              goto LABEL_33;
            }
            uint64_t v26 = x_log_category_windowserver;
            if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v27 = objc_msgSend((id)objc_msgSend(v24, "debugDescription"), "UTF8String");
              *(_DWORD *)long long buf = 136315138;
              *(void *)&uint8_t buf[4] = v27;
              int v28 = v26;
              float32x4_t v29 = "    Average Pixel Constraints: %s";
              uint32_t v30 = 12;
              goto LABEL_38;
            }
          }
          else if (v25)
          {
LABEL_33:
            x_log_();
          }
          else
          {
            uint64_t v31 = x_log_category_windowserver;
            if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long buf = 0;
              int v28 = v31;
              float32x4_t v29 = "    Average Pixel Constraints: NONE";
              uint32_t v30 = 2;
LABEL_38:
              _os_log_impl(&dword_184668000, v28, OS_LOG_TYPE_DEFAULT, v29, buf, v30);
            }
          }
          objc_msgSend((id)objc_msgSend(v21, "objectForKeyedSubscript:", @"MinNits", v68), "doubleValue");
          double v33 = v32;
          objc_msgSend((id)objc_msgSend(v21, "objectForKeyedSubscript:", @"MaxNits"), "doubleValue");
          double v35 = v34;
          if ([v12 brightnessAvailable])
          {
            uint64_t v72 = 0;
            if (CADeviceSupportsRTPLC::once[0] != -1) {
              dispatch_once(CADeviceSupportsRTPLC::once, &__block_literal_global_301);
            }
            if (CADeviceSupportsRTPLC::rtplc)
            {
              LODWORD(v36) = 2.0;
              [v12 setSDRBrightness:v36];
              LODWORD(v37) = 10.0;
              [v12 setAmbient:v37];
              [v12 commitBrightness:&v72];
              usleep(0xF4240u);
              int v38 = [[CABrightnessRamper alloc] initWithDisplay:v12];
              [(CABrightnessRamper *)v38 setLowAmbientStrengthBegin:0.0];
              [(CABrightnessRamper *)v38 setLowAmbientStrengthEnd:1.0];
              [(CAWindowServerRamper *)v38 setDuration:*(double *)(a1 + 32)];
              [(CAWindowServerRamper *)v38 runRamp];

              usleep(0x1E8480u);
              long long v39 = [[CABrightnessRamper alloc] initWithDisplay:v12];
              [(CABrightnessRamper *)v39 setLowAmbientStrengthBegin:1.0];
              [(CABrightnessRamper *)v39 setLowAmbientStrengthEnd:0.0];
              [(CAWindowServerRamper *)v39 setDuration:*(double *)(a1 + 32)];
              [(CAWindowServerRamper *)v39 runRamp];

              usleep(0x2DC6C0u);
            }
            if (MGGetSInt64Answer() == 33072)
            {
              LODWORD(v40) = 1146388480;
              [v12 setSDRBrightness:v40];
              LODWORD(v41) = 1189765120;
              [v12 setAmbient:v41];
              [v12 commitBrightness:&v72];
              usleep(0xF4240u);
              float32x4_t v42 = [[CABrightnessRamper alloc] initWithDisplay:v12];
              [(CABrightnessRamper *)v42 setHighAmbientStrengthBegin:0.0];
              [(CABrightnessRamper *)v42 setHighAmbientStrengthEnd:1.0];
              [(CAWindowServerRamper *)v42 setDuration:*(double *)(a1 + 32)];
              [(CAWindowServerRamper *)v42 runRamp];

              usleep(0x1E8480u);
              long long v43 = [[CABrightnessRamper alloc] initWithDisplay:v12];
              [(CABrightnessRamper *)v43 setHighAmbientStrengthBegin:1.0];
              [(CABrightnessRamper *)v43 setHighAmbientStrengthEnd:0.0];
              [(CAWindowServerRamper *)v43 setDuration:*(double *)(a1 + 32)];
              [(CAWindowServerRamper *)v43 runRamp];

              usleep(0x2DC6C0u);
            }
            if (CADeviceSupportsMedina::once[0] != -1) {
              dispatch_once(CADeviceSupportsMedina::once, &__block_literal_global_314);
            }
            if (CADeviceSupportsMedina::medina)
            {
              LODWORD(v40) = 1133903872;
              [v12 setSDRBrightness:v40];
              [v12 commitBrightness:&v72];
              usleep(0xF4240u);
              float32x4_t v44 = [[CABrightnessRamper alloc] initWithDisplay:v12];
              [(CABrightnessRamper *)v44 setIndicatorNitsBegin:0.0];
              [(CABrightnessRamper *)v44 setIndicatorNitsEnd:1000.0];
              [(CAWindowServerRamper *)v44 setDuration:*(double *)(a1 + 32)];
              [(CAWindowServerRamper *)v44 runRamp];

              float32x4_t v45 = [[CABrightnessRamper alloc] initWithDisplay:v12];
              [(CABrightnessRamper *)v45 setIndicatorLimitBegin:200.0];
              [(CABrightnessRamper *)v45 setIndicatorLimitEnd:1000.0];
              [(CAWindowServerRamper *)v45 setDuration:*(double *)(a1 + 32)];
              [(CAWindowServerRamper *)v45 runRamp];

              usleep(0x1E8480u);
            }
            LODWORD(v40) = 1153957888;
            [v12 setBrightnessLimit:v40];
            [v12 commitBrightness:&v72];
            float32x4_t v46 = [[CABrightnessRamper alloc] initWithDisplay:v12];
            [(CABrightnessRamper *)v46 setSdrNitsBegin:v33];
            double v47 = fmin(v35, 600.0);
            [(CABrightnessRamper *)v46 setSdrNitsEnd:v47];
            [(CAWindowServerRamper *)v46 setDuration:*(double *)(a1 + 32)];
            [(CAWindowServerRamper *)v46 runRamp];

            uint64_t v48 = [[CABrightnessRamper alloc] initWithDisplay:v12];
            [(CABrightnessRamper *)v48 setSdrNitsBegin:v47];
            [(CABrightnessRamper *)v48 setSdrNitsEnd:v33];
            [(CAWindowServerRamper *)v48 setDuration:*(double *)(a1 + 32)];
            [(CAWindowServerRamper *)v48 runRamp];

            int v49 = [[CABrightnessRamper alloc] initWithDisplay:v12];
            [(CABrightnessRamper *)v49 setSdrNitsBegin:100.0];
            [(CABrightnessRamper *)v49 setSdrNitsEnd:100.0];
            [(CABrightnessRamper *)v49 setHeadroomBegin:1.0];
            [(CABrightnessRamper *)v49 setHeadroomEnd:16.0];
            [(CAWindowServerRamper *)v49 setDuration:*(double *)(a1 + 32)];
            [(CAWindowServerRamper *)v49 runRamp];

            long long v50 = [[CABrightnessRamper alloc] initWithDisplay:v12];
            [(CABrightnessRamper *)v50 setSdrNitsBegin:100.0];
            [(CABrightnessRamper *)v50 setSdrNitsEnd:100.0];
            [(CABrightnessRamper *)v50 setHeadroomBegin:16.0];
            [(CABrightnessRamper *)v50 setHeadroomEnd:1.0];
            [(CAWindowServerRamper *)v50 setDuration:*(double *)(a1 + 32)];
            [(CAWindowServerRamper *)v50 runRamp];

            long long v51 = [[CABrightnessRamper alloc] initWithDisplay:v12];
            [(CABrightnessRamper *)v51 setLimitBegin:100.0];
            [(CABrightnessRamper *)v51 setLimitEnd:v33];
            [(CAWindowServerRamper *)v51 setDuration:*(double *)(a1 + 32)];
            [(CAWindowServerRamper *)v51 runRamp];

            long long v52 = [[CABrightnessRamper alloc] initWithDisplay:v12];
            [(CABrightnessRamper *)v52 setLimitBegin:v33];
            [(CABrightnessRamper *)v52 setLimitEnd:100.0];
            [(CAWindowServerRamper *)v52 setDuration:*(double *)(a1 + 32)];
            [(CAWindowServerRamper *)v52 runRamp];

            float32x4_t v53 = [[CABrightnessRamper alloc] initWithDisplay:v12];
            [(CABrightnessRamper *)v53 setContrastEnhancerBegin:0.0];
            [(CABrightnessRamper *)v53 setContrastEnhancerEnd:1.0];
            [(CAWindowServerRamper *)v53 setDuration:*(double *)(a1 + 32)];
            [(CAWindowServerRamper *)v53 runRamp];

            float32x4_t v54 = [[CABrightnessRamper alloc] initWithDisplay:v12];
            [(CABrightnessRamper *)v54 setContrastEnhancerBegin:1.0];
            [(CABrightnessRamper *)v54 setContrastEnhancerEnd:0.0];
            [(CAWindowServerRamper *)v54 setDuration:*(double *)(a1 + 32)];
            [(CAWindowServerRamper *)v54 runRamp];

            LODWORD(v55) = 1153957888;
            [v12 setBrightnessLimit:v55];
            [v12 commitBrightness:&v72];
            long long v93 = 0x3F800000uLL;
            *(_DWORD *)&buf[12] = 0;
            *(void *)&uint8_t buf[4] = 0;
            *(_DWORD *)long long buf = 1065353216;
            int v94 = 1065353216;
            memset(v90, 0, sizeof(v90));
            DWORD1(v90[0]) = 1065353216;
            HIDWORD(v90[0]) = 1065353216;
            int v91 = 1065353216;
            [v12 setWhitePoint:v90 rampDuration:&v72 error:2.0];
            usleep(0x2DC6C0u);
            [v12 setWhitePoint:buf rampDuration:&v72 error:2.0];
            usleep(0x2DC6C0u);
            long long v56 = [[CAWhitePointRamper alloc] initWithDisplay:v12];
            [(CAWindowServerRamper *)v56 setDuration:2.0];
            v88[0] = *(_OWORD *)buf;
            v88[1] = v93;
            int v89 = v94;
            [(CAWhitePointRamper *)v56 setWhitePointStart:v88];
            int v86 = 0;
            v85[2] = 0;
            v85[0] = 0;
            v85[1] = _D15;
            uint64_t v87 = 1065353216;
            [(CAWhitePointRamper *)v56 setWhitePointEnd:v85];
            LODWORD(v57) = 1.0;
            [(CAWhitePointRamper *)v56 setScaleStart:v57];
            LODWORD(v58) = 1050253722;
            [(CAWhitePointRamper *)v56 setScaleEnd:v58];
            [(CAWindowServerRamper *)v56 runRamp];

            float32x4_t v59 = [[CAWhitePointRamper alloc] initWithDisplay:v12];
            [(CAWindowServerRamper *)v59 setDuration:2.0];
            v82[0] = 0;
            v82[1] = _D15;
            v82[2] = 0;
            int v83 = 0;
            uint64_t v84 = 1065353216;
            [(CAWhitePointRamper *)v59 setWhitePointEnd:v82];
            v79[0] = 0;
            v79[1] = _D15;
            v79[2] = 0;
            int v80 = 0;
            uint64_t v81 = 1065353216;
            [(CAWhitePointRamper *)v59 setWhitePointStart:v79];
            LODWORD(v60) = 1050253722;
            [(CAWhitePointRamper *)v59 setScaleStart:v60];
            LODWORD(v61) = 1.0;
            [(CAWhitePointRamper *)v59 setScaleEnd:v61];
            [(CAWindowServerRamper *)v59 runRamp];

            uint64_t v62 = [[CAWhitePointRamper alloc] initWithDisplay:v12];
            [(CAWindowServerRamper *)v62 setDuration:2.0];
            int v77 = 0;
            int8x16_t v76[2] = 0;
            v76[0] = 0;
            v76[1] = _D15;
            uint64_t v78 = 1065353216;
            [(CAWhitePointRamper *)v62 setWhitePointStart:v76];
            v74[0] = *(_OWORD *)buf;
            v74[1] = v93;
            int v75 = v94;
            [(CAWhitePointRamper *)v62 setWhitePointEnd:v74];
            [(CAWindowServerRamper *)v62 runRamp];

            simd_float3x3 v63 = dispatch_queue_create("CA Debug Brightness", 0);
            [v12 setNotificationQueue:v63];
            float64x2_t v73 = @"notificationEDR";
            objc_msgSend(v12, "registerForNotifications:withBlock:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", &v73, 1), &__block_literal_global_5249);
            dispatch_release(v63);
          }
          unsigned int v64 = [[CAAccessibilityRamper alloc] initWithDisplay:v12];
          [(CAAccessibilityRamper *)v64 setAxScaleBegin:1.0];
          [(CAAccessibilityRamper *)v64 setAxScaleEnd:0.25];
          [(CAWindowServerRamper *)v64 setDuration:2.0];
          [(CAWindowServerRamper *)v64 runRamp];

          __int16 v65 = [[CAAccessibilityRamper alloc] initWithDisplay:v12];
          [(CAAccessibilityRamper *)v65 setAxScaleBegin:0.25];
          [(CAAccessibilityRamper *)v65 setAxScaleEnd:1.0];
          [(CAWindowServerRamper *)v65 setDuration:2.0];
          [(CAWindowServerRamper *)v65 runRamp];
        }
        ++v11;
      }
      while (v5 != v11);
      uint64_t v5 = [obj countByEnumeratingWithState:&v96 objects:v95 count:16];
      if (!v5)
      {
LABEL_54:
        return;
      }
    }
  }
}

void sub_18485EEDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *context)
{
}

void ___ZN2CA12WindowServer15DebugBrightnessEd_block_invoke_233(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (x_log_hook_p())
  {
    objc_msgSend((id)objc_msgSend(a3, "debugDescription"), "UTF8String");
    x_log_();
  }
  else
  {
    uint64_t v4 = x_log_category_windowserver;
    if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      uint64_t v6 = objc_msgSend((id)objc_msgSend(a3, "debugDescription"), "UTF8String");
      _os_log_impl(&dword_184668000, v4, OS_LOG_TYPE_DEFAULT, "Received EDRRequest notification with payload: %s", buf, 0xCu);
    }
  }
}

void ___ZN2CA12WindowServer22DebugFrameInfoCallbackEv_block_invoke()
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v0 = +[CAWindowServer serverIfRunning];
  if (v0)
  {
    uint64_t v1 = v0;
    id v2 = (void *)MEMORY[0x185324A30]();
    uint64_t v3 = (void *)[v1 displays];
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v10 objects:v9 count:16];
    if (v4)
    {
      uint64_t v5 = *(void *)v11;
      do
      {
        for (uint64_t i = 0; i != v4; ++i)
        {
          if (*(void *)v11 != v5) {
            objc_enumerationMutation(v3);
          }
          uint64_t v7 = *(void **)(*((void *)&v10 + 1) + 8 * i);
          if (![v7 displayType] || objc_msgSend(v7, "displayType") == 1)
          {
            v8[0] = MEMORY[0x1E4F143A8];
            v8[1] = 3221225472;
            _OWORD v8[2] = ___ZN2CA12WindowServer22DebugFrameInfoCallbackEv_block_invoke_2;
            v8[3] = &unk_1E5273C28;
            v8[4] = v7;
            [v7 setFrameInfoCallback:v8];
          }
        }
        uint64_t v4 = [v3 countByEnumeratingWithState:&v10 objects:v9 count:16];
      }
      while (v4);
    }
  }
}

void sub_18485F1B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double ___ZN2CA12WindowServer22DebugFrameInfoCallbackEv_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (x_log_hook_p())
  {
    [*(id *)(a1 + 32) displayId];
    x_log_();
  }
  else
  {
    uint64_t v5 = x_log_category_windowserver;
    if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = [*(id *)(a1 + 32) displayId];
      double v7 = *(float *)(a2 + 56);
      int v8 = *(unsigned __int8 *)(a2 + 45);
      int v9 = *(unsigned __int8 *)(a2 + 46);
      double v10 = *(float *)(a2 + 48);
      double v11 = *(float *)(a2 + 52);
      *(_DWORD *)long long buf = 67110400;
      int v13 = v6;
      __int16 v14 = 2048;
      double v15 = v7;
      __int16 v16 = 1024;
      int v17 = v8;
      __int16 v18 = 1024;
      int v19 = v9;
      __int16 v20 = 2048;
      double v21 = v10;
      __int16 v22 = 2048;
      double v23 = v11;
      _os_log_impl(&dword_184668000, v5, OS_LOG_TYPE_DEFAULT, "CAExternalFrameInfo Display %u\n    APCE:               %f\n    RTPLC Triggered:    %d\n    RTPLC Capping:      %d\n    Nominal Brightness: %f\n    Brightness Scale:   %f\n", buf, 0x32u);
    }
  }
  return result;
}

double CAColorMatrixMakeSaturation@<D0>(uint64_t a1@<X8>, float a2@<S0>)
{
  float v2 = fmaxf(a2, 0.0);
  float v3 = (float)(v2 * 0.7873) + 0.2126;
  float32x2_t v4 = vmul_n_f32((float32x2_t)0x3E91D14E3E59B3D0, v2);
  LODWORD(v5) = vsub_f32((float32x2_t)1046066128, v4).u32[0];
  float v6 = 0.0722 - (float)(v2 * 0.0722);
  *(void *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 40) = v5;
  HIDWORD(v5) = vadd_f32(v4, (float32x2_t)vdup_n_s32(0x3F371759u)).i32[1];
  *(void *)(a1 + 20) = v5;
  *(float *)(a1 + 28) = v6;
  *(void *)(a1 + 32) = 0;
  float32x2_t v7 = vmul_n_f32((float32x2_t)0x3F6D844D3F371759, v2);
  LODWORD(v5) = vsub_f32((float32x2_t)0x3F6D844D3F371759, v7).u32[0];
  *(float *)a1 = v3;
  *(_DWORD *)(a1 + 4) = v5;
  *(float *)(a1 + 8) = v6;
  HIDWORD(v5) = vadd_f32(v7, (float32x2_t)vdup_n_s32(0x3D93DD98u)).i32[1];
  *(void *)(a1 + 44) = v5;
  *(void *)(a1 + 60) = 0;
  *(void *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 68) = 0;
  *(void *)&double result = 1065353216;
  *(void *)(a1 + 72) = 1065353216;
  return result;
}

void CAColorMatrixMakeBrightness(uint64_t a1@<X8>, float a2@<S0>)
{
  *(_DWORD *)a1 = 1065353216;
  *(void *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 12) = 0;
  *(float *)(a1 + 16) = a2;
  *(void *)(a1 + 20) = 0x3F80000000000000;
  *(void *)(a1 + 28) = 0;
  *(float *)(a1 + 36) = a2;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 1065353216;
  *(float *)(a1 + 56) = a2;
  *(void *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 68) = 0;
  *(void *)(a1 + 72) = 1065353216;
}

double CAColorMatrixMakeContrast@<D0>(uint64_t a1@<X8>, float a2@<S0>)
{
  *(float *)a1 = a2;
  *(void *)(a1 + 4) = 0;
  float v2 = 0.5 - (float)(a2 * 0.5);
  *(_DWORD *)(a1 + 12) = 0;
  *(float *)(a1 + 16) = v2;
  *(_DWORD *)(a1 + 20) = 0;
  *(float *)(a1 + 24) = a2;
  *(void *)(a1 + 28) = 0;
  *(float *)(a1 + 36) = v2;
  *(void *)(a1 + 40) = 0;
  *(float *)(a1 + 48) = a2;
  *(_DWORD *)(a1 + 52) = 0;
  *(float *)(a1 + 56) = v2;
  *(void *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 68) = 0;
  *(void *)&double result = 1065353216;
  *(void *)(a1 + 72) = 1065353216;
  return result;
}

void CAColorMatrixMakeMultiplyColor(uint64_t a1@<X8>, float a2@<S0>, float a3@<S1>, float a4@<S2>, float a5@<S3>)
{
  *(float *)a1 = a2;
  *(void *)(a1 + 12) = 0;
  *(void *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  *(float *)(a1 + 24) = a3;
  *(void *)(a1 + 36) = 0;
  *(void *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 44) = 0;
  *(float *)(a1 + 48) = a4;
  *(void *)(a1 + 60) = 0;
  *(void *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 68) = 0;
  *(float *)(a1 + 72) = a5;
  *(_DWORD *)(a1 + 76) = 0;
}

double CAColorMatrixMakePlusL@<D0>(uint64_t a1@<X8>, float a2@<S0>, float a3@<S1>, float a4@<S2>, float a5@<S3>)
{
  *(_DWORD *)a1 = 1065353216;
  *(void *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 12) = 0;
  *(float *)(a1 + 16) = a5 * a2;
  *(void *)(a1 + 20) = 0x3F80000000000000;
  *(void *)(a1 + 28) = 0;
  *(float *)(a1 + 36) = a5 * a3;
  *(void *)(a1 + 40) = 0;
  *(void *)&double result = 1065353216;
  *(void *)(a1 + 48) = 1065353216;
  *(float *)(a1 + 56) = a5 * a4;
  *(void *)(a1 + 60) = 0;
  *(void *)(a1 + 68) = 0x3F80000000000000;
  *(float *)(a1 + 76) = a5;
  return result;
}

double CAColorMatrixMakePlusD@<D0>(uint64_t a1@<X8>, float a2@<S0>, float a3@<S1>, float a4@<S2>, float a5@<S3>)
{
  *(_DWORD *)a1 = 1065353216;
  *(void *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 12) = 0;
  *(float *)(a1 + 16) = -(float)(a5 - (float)(a5 * a2));
  *(void *)(a1 + 20) = 0x3F80000000000000;
  *(void *)(a1 + 28) = 0;
  *(float *)(a1 + 36) = -(float)(a5 - (float)(a5 * a3));
  *(void *)(a1 + 40) = 0;
  *(void *)&double result = 1065353216;
  *(void *)(a1 + 48) = 1065353216;
  *(float *)(a1 + 56) = -(float)(a5 - (float)(a5 * a4));
  *(void *)(a1 + 60) = 0;
  *(void *)(a1 + 68) = 0x3F80000000000000;
  *(float *)(a1 + 76) = a5;
  return result;
}

__n128 CAColorMatrixConcat@<Q0>(CA::ColorMatrix *a1@<X0>, CA::ColorMatrix *a2@<X1>, const CA::ColorMatrix *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  long long v10 = 0u;
  long long v11 = 0u;
  __n128 v8 = 0u;
  long long v9 = 0u;
  long long v7 = 0u;
  CA::concat((CA *)&v7, a1, a2, a3);
  long long v5 = v10;
  *(_OWORD *)(a4 + 32) = v9;
  *(_OWORD *)(a4 + 48) = v5;
  *(_OWORD *)(a4 + 64) = v11;
  __n128 result = v8;
  *(_OWORD *)a4 = v7;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

uint64_t CA::CG::DrawOp::debug_color(CA::CG::DrawOp *this)
{
  return 4278190304;
}

void CA::CG::FillPath::draw_shape(CA::CG::FillPath *this, CA::CG::Renderer *a2)
{
}

void CA::CG::fill_path(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  char v6 = v5;
  long long v7 = v4;
  uint64_t v8 = v3;
  long long v10 = v9;
  long long v11 = (int8x16_t **)v2;
  uint64_t v12 = (const CGPath *)v1;
  uint64_t v14 = v13;
  v206[7] = *MEMORY[0x1E4F143B8];
  uint64_t v15 = *(void *)(v13 + 8);
  if (!v2)
  {
    unsigned int v20 = v3 == 1 ? v5 ^ 1 | 0x10 : v5 ^ 1;
    double v21 = CA::Shape::new_shape(v1, v4, v20);
    if (v21)
    {
      __int16 v22 = v21;
      CA::OGL::emit_shape((CA::OGL *)v15, v21, v2);
      CA::Shape::unref(v22);
      return;
    }
  }
  float64x2_t v167 = 0u;
  float64x2_t v168 = 0u;
  if (v10)
  {
    float64x2_t v17 = v10[1];
    float64x2_t v167 = *v10;
    double v16 = v167.f64[0];
    float64x2_t v168 = v17;
    double v18 = v17.f64[1];
    double v19 = v167.f64[1];
  }
  else
  {
    *(CGRect *)&double v16 = CGPathGetBoundingBox(v12);
    v167.f64[0] = v16;
    v167.f64[1] = v19;
    v168.f64[0] = v17.f64[0];
    v168.f64[1] = v18;
    if (v17.f64[0] < 0.0)
    {
      double v16 = v17.f64[0] + v16;
      v17.f64[0] = -v17.f64[0];
      v167.f64[0] = v16;
      v168.f64[0] = v17.f64[0];
    }
    if (v18 < 0.0)
    {
      double v19 = v18 + v19;
      double v18 = -v18;
      v167.f64[1] = v19;
      v168.f64[1] = v18;
    }
  }
  if (v11)
  {
    double v23 = *((double *)v11 + 4) * 0.5;
    if (!*((_DWORD *)v11 + 11))
    {
      double v24 = *((double *)v11 + 6);
      if (v24 < 1.0) {
        double v24 = 1.0;
      }
      double v23 = v24 * v23;
    }
    if (v17.f64[0] <= v18) {
      double v25 = v18;
    }
    else {
      double v25 = v17.f64[0];
    }
    if (v25 < 1.79769313e308)
    {
      float64x2_t v26 = vaddq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgezq_f64((float64x2_t)(*v11)[1]), (*v11)[1], (int8x16_t)vnegq_f64((float64x2_t)(*v11)[1])), (float64x2_t)vbslq_s8((int8x16_t)vcgezq_f64(*(float64x2_t *)*v11), **v11, (int8x16_t)vnegq_f64(*(float64x2_t *)*v11)));
      if (*((_DWORD *)v11 + 10) == 2) {
        double v23 = v23 * 1.41421356;
      }
      _Q4 = vmulq_n_f64(v26, v23);
      v167.f64[0] = v16 - _Q4.f64[0];
      v167.f64[1] = v19 - _Q4.f64[1];
      _D0 = -2.0;
      __asm
      {
        FMLS            D2, D0, V4.D[0]
        FMLS            D3, D0, V4.D[1]
      }
      v168.f64[0] = _D2;
      v168.f64[1] = _D3;
      if (_D2 <= 0.0 || _D3 <= 0.0) {
        float64x2_t v168 = 0uLL;
      }
    }
  }
  CA::Mat2Impl::mat2_apply_to_rect((uint64_t)v7, v167.f64, (double *)v2);
  int8x16_t v35 = (int8x16_t)vceqzq_f64(v168);
  int8x16_t v36 = 0uLL;
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v35, 1), v35).u64[0] & 0x8000000000000000) == 0)
  {
    int8x16_t v37 = vorrq_s8((int8x16_t)vcltzq_f64(v168), (int8x16_t)vcgezq_f64(v168));
    if ((vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v37), 1), v37).u64[0] & 0x8000000000000000) == 0)
    {
      int32x4_t v38 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v167, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
      int8x16_t v36 = (int8x16_t)vuzp1q_s32(v38, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v167, v168), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v38));
    }
  }
  int8x16_t v39 = vextq_s8(v36, v36, 8uLL);
  int32x2_t v40 = vceq_s32(vrev64_s32(*(int32x2_t *)v39.i8), (int32x2_t)0x100000001);
  if ((v40.i8[4] & 1) != 0 && (v40.i8[0] & 1) != 0 && vmulq_laneq_f64(v168, v168, 1).f64[0] < 0.00392156886) {
    return;
  }
  int8x16_t v157 = v36;
  int8x16_t v158 = v39;
  float64x2_t v155 = v167;
  float64x2_t v156 = v168;
  long long v166 = 0uLL;
  CA::Shape::get_bounds(*(void *)(*(void *)(v15 + 248) + 8), (int *)&v166);
  uint64_t v43 = *(void *)(v15 + 264);
  float32x4_t v44 = (int32x2_t *)(v43 ? v43 + 32 : v15 + 200);
  uint32x2_t v45 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)((char *)&v166 + 8));
  if ((vpmax_u32(v45, v45).u32[0] & 0x80000000) != 0) {
    return;
  }
  int32x2_t v46 = v44[1];
  uint32x2_t v47 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v46);
  if ((vpmax_u32(v47, v47).u32[0] & 0x80000000) != 0) {
    return;
  }
  *(int32x2_t *)&long long v42 = vmax_s32(*(int32x2_t *)&v166, *v44);
  *(int32x2_t *)v41.i8 = vsub_s32(vmin_s32(vadd_s32(*(int32x2_t *)&v166, *(int32x2_t *)((char *)&v166 + 8)), vadd_s32(*v44, v46)), *(int32x2_t *)&v42);
  uint32x2_t v48 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)v41.i8);
  if ((vpmax_u32(v48, v48).u32[0] & 0x80000000) != 0) {
    return;
  }
  long long v154 = v42;
  *((void *)&v42 + 1) = v41.i64[0];
  int32x4_t v152 = v41;
  long long v153 = v42;
  long long v166 = v42;
  BOOL v49 = CA::OGL::Context::need_transparent_source((CA::OGL::Context *)v15);
  int32x2_t v51 = *(int32x2_t *)((char *)&v153 + 8);
  uint32x2_t v52 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)((char *)&v153 + 8));
  unsigned __int32 v53 = vpmax_u32(v52, v52).u32[0];
  if (v49)
  {
    if ((v53 & 0x80000000) != 0
      || (uint32x2_t v54 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)v158.i8),
          (vpmax_u32(v54, v54).u32[0] & 0x80000000) != 0)
      || (uint32x2_t v55 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, vsub_s32(vmin_s32(vadd_s32(*(int32x2_t *)&v154, *(int32x2_t *)((char *)&v153 + 8)), vadd_s32(*(int32x2_t *)v157.i8, *(int32x2_t *)v158.i8)), vmax_s32(*(int32x2_t *)&v154, *(int32x2_t *)v157.i8))), (vpmax_u32(v55, v55).u32[0] & 0x80000000) != 0))
    {
      int32x4_t v202 = 0uLL;
      int64x2_t v70 = (const CA::Bounds *)&v202;
LABEL_60:
      CA::OGL::emit_bounds_surround(v15, v70);
      return;
    }
    v158.i32[0] = v49;
    v157.i32[0] = v152.i32[1];
    *(void *)&long long v153 = *((void *)&v153 + 1);
    long long v56 = v154;
  }
  else
  {
    *((void *)&v56 + 1) = *((void *)&v154 + 1);
    if ((v53 & 0x80000000) != 0) {
      return;
    }
    uint32x2_t v57 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)v158.i8);
    if ((vpmax_u32(v57, v57).u32[0] & 0x80000000) != 0) {
      return;
    }
    *(int32x2_t *)&long long v56 = vmax_s32(*(int32x2_t *)&v154, *(int32x2_t *)v157.i8);
    int32x2_t v58 = vsub_s32(vmin_s32(vadd_s32(*(int32x2_t *)&v154, *(int32x2_t *)((char *)&v153 + 8)), vadd_s32(*(int32x2_t *)v157.i8, *(int32x2_t *)v158.i8)), *(int32x2_t *)&v56);
    uint32x2_t v59 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v58);
    if ((vpmax_u32(v59, v59).u32[0] & 0x80000000) != 0) {
      return;
    }
    v158.i32[0] = v49;
    *(void *)&long long v60 = v56;
    *((int32x2_t *)&v60 + 1) = v58;
    long long v166 = v60;
    *(int32x2_t *)&long long v153 = v58;
    int32x2_t v51 = v58;
    v157.i32[0] = v58.i32[1];
  }
  long long v154 = v56;
  if (v8 == 1
    || (int v61 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 184))(v15, 32),
        *(void *)&long long v56 = v154,
        !v61)
    || (simd_float3x3 v63 = *(int32x2_t **)(v15 + 264)) == 0
    || (__int32 v64 = v63[8].i32[1], (v64 & 0x2000) == 0)
    || (int v65 = *(unsigned __int8 *)(*(void *)(v15 + 16) + 480), v65 == 12)
    || (v65 - 1) > 0x18)
  {
    BOOL v71 = 0;
    double v203 = &v205;
    long long v204 = xmmword_184998060;
    v202.i64[1] = 0;
    v202.i64[0] = (uint64_t)&v202.i64[1];
    *(void *)&v190.f64[0] = &v202.i64[1];
    v190.f64[1] = 0.0;
    uint64_t v192 = 0;
    uint64_t v191 = 0;
    uint64_t v197 = 0;
    uint64_t v193 = 0x3FC0000000000000;
    long long v194 = 0u;
    long long v195 = 0u;
    memset(v196, 0, sizeof(v196));
    int32x2_t v72 = vadd_s32(v51, *(int32x2_t *)&v56);
    v73.i64[0] = v72.i32[0];
    v73.i64[1] = v72.i32[1];
    v75.i64[1] = v72.i32[1];
    float64x2_t v198 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
    float64x2_t v199 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
    int32x4_t v74 = (int32x4_t)vcvtq_f64_s64(v73);
    v75.i64[0] = 1.0;
    _ZF = *v7 == 1.0;
    v73.i64[0] = (int)v56;
    v73.i64[1] = SDWORD1(v56);
    int8x16_t v76 = (int8x16_t)vcvtq_f64_s64(v73);
    int v77 = v7;
    int8x16_t v200 = v76;
    int32x4_t v201 = v74;
    if (_ZF)
    {
      uint64_t v78 = 1;
      do
      {
        if (v78 == 6)
        {
          BOOL v71 = 1;
          goto LABEL_69;
        }
        uint64_t v79 = v78;
        *(double *)v74.i64 = v7[v78];
        *(double *)v75.i64 = CA::Mat2Impl::mat2_identity_double[v78++];
      }
      while (*(double *)v74.i64 == *(double *)v75.i64);
      BOOL v71 = (unint64_t)(v79 - 1) > 4;
      int v77 = v7;
      if ((unint64_t)(v79 - 1) < 5) {
        goto LABEL_70;
      }
LABEL_69:
      int v77 = 0;
    }
LABEL_70:
    if (v11)
    {
      if ((int)v153 <= v157.i32[0]) {
        int v80 = v157.i32[0];
      }
      else {
        int v80 = v153;
      }
      v74.i32[0] = 1073741822;
      v75.i32[0] = v80;
      int8x16_t v81 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v75, v74), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), v76);
      double v82 = 1.79769313e308;
      if (v80 <= 1073741822) {
        double v83 = (double)(int)v153;
      }
      else {
        double v83 = 1.79769313e308;
      }
      if (v80 <= 1073741822) {
        double v82 = (double)v157.i32[0];
      }
      int8x16_t v169 = v81;
      *(double *)&long long v170 = v83;
      *((double *)&v170 + 1) = v82;
      long long v173 = 0u;
      long long v174 = 0u;
      long long v172 = 0u;
      CA::Mat2Impl::mat2_invert((CA::Mat2Impl *)&v172, v7, v50);
      CA::Mat2Impl::mat2_apply_to_rect((uint64_t)&v172, (double *)v169.i64, v84);
      *(int8x16_t *)long long v206 = v169;
      *(_OWORD *)&v206[2] = v170;
      v161[0] = v77;
      v161[1] = &v190;
      CGPathApplyStrokedDashedPath();
    }
    else
    {
      *(void *)&long long v172 = v77;
      *((void *)&v172 + 1) = &v190;
      if (v71) {
        unint64_t v85 = (void (__cdecl *)(void *, const CGPathElement *))CA::CG::PathIterator::Iterator<CA::ScanConverter::Path>::callback_1;
      }
      else {
        unint64_t v85 = (void (__cdecl *)(void *, const CGPathElement *))CA::CG::PathIterator::Iterator<CA::ScanConverter::Path>::callback_0;
      }
      CGPathApply(v12, &v172, v85);
    }
    CA::ScanConverter::Path::closepath(v190.f64);
    uint64_t v86 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 184))(v15, 10);
    __int32 v87 = v158.i32[0];
    if (v86
      || (v157.i32[0] + *(_DWORD *)(v14 + 1400) - 1)
       / *(_DWORD *)(v14 + 1400)
       * ((v153 + *(_DWORD *)(v14 + 1396) - 1)
        / *(_DWORD *)(v14 + 1396)) > CA::CG::Renderer::_max_mosaic_cells)
    {
      CA::OGL::Shape::fill_sc_path(v15, &v190, v8, v158.i8[0], v6, *(int32x2_t *)&v154, v51);
LABEL_87:
      x_heap_free((void ***)v202.i64[0]);
      return;
    }
    int32x2_t v88 = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(v198)));
    int32x2_t v89 = vmovn_s64(vcvtq_s64_f64(vrndpq_f64(v199)));
    *(int32x2_t *)v169.i8 = v88;
    v169.u64[1] = (unint64_t)vsub_s32(v89, v88);
    uint32x2_t v90 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, (int32x2_t)v169.u64[1]);
    if ((vpmax_u32(v90, v90).u32[0] & 0x80000000) == 0)
    {
      uint32x2_t v91 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v51);
      if ((vpmax_u32(v91, v91).u32[0] & 0x80000000) != 0
        || (v92.f64[1] = *((float64_t *)&v154 + 1),
            *(int32x2_t *)&v92.f64[0] = vmax_s32(v88, *(int32x2_t *)&v154),
            int32x2_t v93 = vsub_s32(vmin_s32(v89, v72), *(int32x2_t *)&v92.f64[0]),
            uint32x2_t v94 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v93),
            (vpmax_u32(v94, v94).u32[0] & 0x80000000) != 0))
      {
        v169.i64[1] = 0;
      }
      else
      {
        v95.i64[0] = *(void *)&v92.f64[0];
        v95.u64[1] = (unint64_t)v93;
        int8x16_t v169 = v95;
        uint64_t v96 = v93.i32[0];
        if (is_mul_ok(v93.i32[0], v93.i32[1]))
        {
          float64x2_t v155 = v92;
          size_t v97 = v93.i32[0] * (uint64_t)v93.i32[1];
          LODWORD(v156.f64[0]) = v93.i32[1];
          v157.i64[0] = v97;
          if (v97 <= 0x1000)
          {
            MEMORY[0x1F4188790](v86);
            long long v98 = &v151.i8[-((v97 + 15) & 0xFFFFFFFFFFFFFFF0)];
            bzero(v98, v97);
            float64_t v99 = v155.f64[0];
LABEL_155:
            uint64_t v144 = LODWORD(v99);
            uint64_t v145 = HIDWORD(v99);
            bzero(v98, v157.u64[0]);
            CA::ScanConverter::render_mask((uint64_t)&v190, v8, (uint64_t)v98, v96, v144, v145, (v144 + v96), (LODWORD(v156.f64[0]) + v145), v6);
            uint64_t v146 = *(void *)(v15 + 16);
            unint64_t v147 = *(void *)(v146 + 16) & 0xFFFFFF00FF00FF00;
            if (*(void *)(v146 + 8) == 0x3C003C003C003C00) {
              int v148 = 1;
            }
            else {
              int v148 = 3;
            }
            *(_DWORD *)(v146 + 16) = v148 | v147;
            *(_DWORD *)(v146 + 20) = HIDWORD(v147);
            if ((*(_DWORD *)(v14 + 1536) & 0x80000000) != 0)
            {
              *(_DWORD *)(v14 + 1536) = 0;
              *(_WORD *)(v14 + 1540) = 0;
              *((void *)&v172 + 1) = v14;
              *(void *)&long long v173 = v15;
              *(void *)(v15 + 128) = 0;
              *(void *)(v15 + 96) = v15 + 834;
              *(_OWORD *)(v15 + 104) = xmmword_184997E70;
              *(void *)&long long v172 = &unk_1ED027DA8;
              *((void *)&v173 + 1) = v98;
              *(void *)&long long v174 = &v169;
              *((void *)&v174 + 1) = 0x3FF0000000000000;
              CA::OGL::Mosaic::draw(v14 + 1392, (uint64_t *)v15, 4, 0, 0, v96, SLODWORD(v156.f64[0]), 1, (uint64_t)&v172, 0);
              *(void *)&long long v172 = &unk_1ED028780;
              double v149 = CA::CG::MosaicDelegate::draw_array((CA::CG::MosaicDelegate *)v173);
              uint64_t v150 = *(void *)(v14 + 1552);
              if (v150)
              {
                (*(void (**)(uint64_t, uint64_t, void, double))(*(void *)v15 + 520))(v15, v150, 0, v149);
                *(void *)(v14 + 1552) = 0;
                *(_DWORD *)(v14 + 1544) = -1;
              }
              *(_DWORD *)(v14 + 1536) = -1;
              *(void *)(v14 + 1504) = 0;
            }
            *(unsigned char *)(*(void *)(v15 + 16) + 16) = 0;
            if (v157.i64[0] > 0x1000uLL) {
              free(v98);
            }
            goto LABEL_96;
          }
          long long v98 = (__int8 *)malloc_type_malloc(v93.i32[0] * (uint64_t)v93.i32[1], 0x8AE0FE90uLL);
          float64_t v99 = v155.f64[0];
          if (v98) {
            goto LABEL_155;
          }
        }
      }
    }
LABEL_96:
    if (v87) {
      CA::OGL::emit_bounds_surround(v15, (const CA::Bounds *)&v169);
    }
    goto LABEL_87;
  }
  uint64_t v66 = *(void *)(*(void *)(v15 + 248) + 8);
  if (v66)
  {
    float64x2_t v67 = v155;
    float64x2_t v68 = v156;
    if (v66 == 1) {
      goto LABEL_58;
    }
LABEL_99:
    if ((v64 & 0x800) != 0) {
      simd_float3x3 v63 = (int32x2_t *)v63[1];
    }
    int32x4_t v202 = 0uLL;
    CA::Bounds::set_exterior(&v202, v62, v67, v68);
    CA::BoundsImpl::intersect((int32x2_t *)&v202, v63[4], v63[5]);
    BOOL v69 = CA::Shape::contains(v66, (const CA::Bounds *)&v202);
    goto LABEL_102;
  }
  float64x2_t v67 = v155;
  float64x2_t v68 = v156;
  if (*(_DWORD *)(v66 + 4) == 12) {
    goto LABEL_99;
  }
LABEL_58:
  BOOL v69 = 0;
LABEL_102:
  v206[0] = v15;
  v206[1] = v66;
  memset(&v206[2], 0, 40);
  LOBYTE(v206[4]) = v69;
  CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)v206);
  int32x2_t v164 = 0;
  uint64_t v165 = 0;
  *(void *)&long long v154 = v188;
  uint64_t v100 = v189;
  v157.i64[0] = (uint64_t)&v171;
  v101.i32[0] = 1073741822;
  int32x4_t v152 = v101;
  int8x16_t v151 = (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL);
  *(void *)&long long v153 = v189;
  while (CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)v206, &v164))
  {
    if (v11)
    {
      float v102 = *v7 * *v7 + v7[1] * v7[1];
      float v103 = v7[2] * v7[2] + v7[3] * v7[3];
      unsigned int v104 = (const CGAffineTransform *)*v11;
      if (*v11)
      {
        float v102 = (v104->a * v104->a + v104->b * v104->b) * v102;
        float v103 = (v104->c * v104->c + v104->d * v104->d) * v103;
      }
      if (v102 == v103) {
        goto LABEL_108;
      }
      if (v102 < 0.0 == v103 >= 0.0) {
        goto LABEL_121;
      }
      unsigned int v113 = LODWORD(v102) - LODWORD(v103);
      if (LODWORD(v102) - LODWORD(v103) < 0) {
        unsigned int v113 = LODWORD(v103) - LODWORD(v102);
      }
      if (v113 <= 3)
      {
LABEL_108:
        double v105 = (const double *)v11[2];
        if (v105) {
          BOOL v106 = v11[3] != 0;
        }
        else {
          BOOL v106 = 0;
        }
        double v125 = *((double *)v11 + 4) * sqrtf(v102);
        int v126 = *((_DWORD *)v11 + 10);
        int v127 = *((_DWORD *)v11 + 11);
        double v128 = *((double *)v11 + 6);
        *(void *)&long long v172 = v15;
        *((void *)&v172 + 1) = v7;
        *(float *)&long long v173 = (float)(int)v165;
        *((float *)&v173 + 1) = (float)SHIDWORD(v165);
        *((float *)&v173 + 2) = (float)v164.i32[0];
        *((float *)&v173 + 3) = (float)v164.i32[1];
        *(float *)&long long v174 = (float)(v164.i32[0] + v165);
        *((float *)&v174 + 1) = (float)(v164.i32[1] + HIDWORD(v165));
        *((void *)&v174 + 1) = 0;
        uint64_t v175 = 0;
        double v176 = &v190;
        double v177 = &v202;
        uint64_t v178 = 0x10000000200;
        double v129 = v125 * 0.5;
        float v130 = v125 * 0.5;
        if (v126 == 2) {
          float v131 = v125 * 0.5;
        }
        else {
          float v131 = 0.0;
        }
        float v132 = v125 * 0.707106781;
        float v179 = v131;
        float v180 = v132;
        if (v127) {
          double v133 = 1.0;
        }
        else {
          double v133 = v128;
        }
        float v134 = v133 * v129;
        *(float *)&uint64_t v135 = (float)v164.i32[0] - v132;
        *((float *)&v135 + 1) = (float)v164.i32[1] - v132;
        *(float *)&uint64_t v136 = (float)(v164.i32[0] + v165) + v132;
        *((float *)&v136 + 1) = (float)(v164.i32[1] + HIDWORD(v165)) + v132;
        float v181 = v134;
        uint64_t v182 = v135;
        uint64_t v183 = v136;
        BOOL v184 = v127 == 1;
        BOOL v185 = v106;
        char v186 = v126;
        char v187 = 0;
        float v137 = v128 * v128;
        if (v127) {
          float v137 = 0.0;
        }
        *(float *)double v188 = v130;
        *(float *)&v188[1] = v129 + 0.5;
        *(float *)&v188[2] = v137;
        v188[3] = 0;
        *uint64_t v100 = 0;
        v100[1] = 0;
        if (v106)
        {
          CA::OGL::PathStroker::render((CA::OGL::PathStroker *)&v172, v12, v104, *((double *)v11 + 1), v105, (unint64_t)v11[3]);
        }
        else
        {
          (*(void (**)(uint64_t, void, uint64_t, uint64_t, void))(*(void *)v15 + 1000))(v15, 0, 4, 1, v154);
          float64x2_t v138 = (void (__cdecl *)(void *, const CGPathElement *))CA::OGL::PathRenderer::cgpath_apply_transform<CA::OGL::PathStroker>;
          if (**((double **)&v172 + 1) == 1.0)
          {
            uint64_t v139 = 1;
            while (v139 != 6)
            {
              uint64_t v140 = v139;
              double v141 = *(double *)(*((void *)&v172 + 1) + 8 * v139);
              double v142 = CA::Mat2Impl::mat2_identity_double[v139++];
              if (v141 != v142)
              {
                float64x2_t v138 = (void (__cdecl *)(void *, const CGPathElement *))CA::OGL::PathRenderer::cgpath_apply_transform<CA::OGL::PathStroker>;
                if ((unint64_t)(v140 - 1) < 5) {
                  goto LABEL_151;
                }
                break;
              }
            }
            float64x2_t v138 = (void (__cdecl *)(void *, const CGPathElement *))CA::OGL::PathRenderer::cgpath_apply<CA::OGL::PathStroker>;
          }
LABEL_151:
          CGPathApply(v12, &v172, v138);
          CA::OGL::PathStroker::finish((CA::OGL::PathStroker *)&v172, v143);
        }
      }
      else
      {
LABEL_121:
        CA::OGL::PathFiller::PathFiller((uint64_t)&v169, v15, (uint64_t)v7, (int *)&v164, (uint64_t)&v202, (uint64_t)&v190, (uint64_t)&v172, v158.i32[0]);
        if ((int)v165 <= SHIDWORD(v165)) {
          int v116 = HIDWORD(v165);
        }
        else {
          int v116 = v165;
        }
        v115.i32[0] = v116;
        v117.i64[0] = v164.i32[0];
        v117.i64[1] = v164.i32[1];
        double v118 = (double)(int)v165;
        int8x16_t v119 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v115, v152), 0), v151, (int8x16_t)vcvtq_f64_s64(v117));
        if (v116 > 1073741822) {
          double v118 = 1.79769313e308;
        }
        int8x16_t v162 = v119;
        if (v116 <= 1073741822) {
          double v120 = (double)SHIDWORD(v165);
        }
        else {
          double v120 = 1.79769313e308;
        }
        *(double *)&long long v163 = v118;
        *((double *)&v163 + 1) = v120;
        memset(v161, 0, sizeof(v161));
        CA::Mat2Impl::mat2_invert((CA::Mat2Impl *)v161, v7, v114);
        CA::Mat2Impl::mat2_apply_to_rect((uint64_t)v161, (double *)v162.i64, v121);
        int8x16_t v159 = v162;
        long long v160 = v163;
        *(void *)&v156.f64[0] = *v11;
        *(void *)&v155.f64[0] = v11[2];
        (*(void (**)(void))(*(void *)v169.i64[0] + 1000))();
        if (*(double *)v169.i64[1] == 1.0)
        {
          uint64_t v122 = 1;
          do
          {
            if (v122 == 6) {
              break;
            }
            double v123 = *(double *)(v169.i64[1] + 8 * v122);
            double v124 = CA::Mat2Impl::mat2_identity_double[v122++];
          }
          while (v123 == v124);
        }
        CGPathApplyStrokedDashedPath();
        CA::OGL::PathFiller::finish((CA::OGL::PathFiller *)&v169);
        uint64_t v100 = (void *)v153;
      }
    }
    else
    {
      v107.n128_f32[0] = CA::OGL::PathFiller::PathFiller((uint64_t)&v169, v15, (uint64_t)v7, (int *)&v164, (uint64_t)&v202, (uint64_t)&v190, (uint64_t)&v172, v158.i32[0]);
      (*(void (**)(__n128))(*(void *)v169.i64[0] + 1000))(v107);
      uint64_t v108 = (void (__cdecl *)(void *, const CGPathElement *))CA::OGL::PathRenderer::cgpath_apply_transform<CA::OGL::PathFiller>;
      if (*(double *)v169.i64[1] == 1.0)
      {
        uint64_t v109 = 1;
        while (v109 != 6)
        {
          uint64_t v110 = v109;
          double v111 = *(double *)(v169.i64[1] + 8 * v109);
          double v112 = CA::Mat2Impl::mat2_identity_double[v109++];
          if (v111 != v112)
          {
            uint64_t v108 = (void (__cdecl *)(void *, const CGPathElement *))CA::OGL::PathRenderer::cgpath_apply_transform<CA::OGL::PathFiller>;
            if ((unint64_t)(v110 - 1) < 5) {
              goto LABEL_116;
            }
            break;
          }
        }
        uint64_t v108 = (void (__cdecl *)(void *, const CGPathElement *))CA::OGL::PathRenderer::cgpath_apply<CA::OGL::PathFiller>;
      }
LABEL_116:
      CGPathApply(v12, &v169, v108);
      CA::OGL::PathFiller::finish((CA::OGL::PathFiller *)&v169);
    }
  }
  if (v158.i32[0])
  {
    int64x2_t v70 = (const CA::Bounds *)&v166;
    goto LABEL_60;
  }
}

float CA::OGL::PathFiller::PathFiller(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  int v8 = a4[2];
  int v9 = a4[3];
  float v10 = (float)v8;
  float v11 = (float)v9;
  *(float *)(a1 + 16) = (float)v8;
  *(float *)(a1 + 20) = (float)v9;
  int v12 = *a4;
  int v13 = a4[1];
  float v14 = (float)*a4;
  float v15 = (float)v13;
  *(float *)(a1 + 24) = v14;
  *(float *)(a1 + 28) = (float)v13;
  *(float *)(a1 + 32) = (float)(v12 + v8);
  *(float *)(a1 + 36) = (float)(v13 + v9);
  *(_OWORD *)(a1 + 40) = 0u;
  int v16 = a4[2];
  int v17 = a4[3];
  double v18 = ceil((double)v16 * 0.015625);
  if (v18 >= 32.0) {
    double v18 = 32.0;
  }
  uint64_t v19 = (int)v18;
  float v20 = (double)v17 * 0.03125;
  float v21 = floorf(v20);
  BOOL v22 = v21 > 32.0 || v21 < 1.0;
  unsigned int v23 = vcvtms_s32_f32(v20);
  if (v21 < 1.0 && v21 <= 32.0) {
    int v24 = 1;
  }
  else {
    int v24 = 32;
  }
  if (!v22) {
    int v24 = v23;
  }
  *(_DWORD *)(a1 + 56) = v19;
  *(_DWORD *)(a1 + 60) = v24;
  *(void *)(a1 + 584) = a5;
  *(void *)(a1 + 592) = a6;
  *(void *)(a1 + 600) = a7;
  *(void *)(a1 + 608) = 0x20000000600;
  *(_DWORD *)(a1 + 616) = 1024;
  double v25 = *(int32x2_t **)(a2 + 264);
  int32x2_t v26 = v25[3];
  float v27 = (float)v26.i32[1];
  v28.i64[0] = v26.i32[0];
  v28.i64[1] = v26.i32[1];
  __asm { FMOV            V16.2D, #1.125 }
  int32x2_t v34 = vdup_lane_s32(v26, 0);
  v34.i32[0] = v25[4].i32[0];
  *(float32x2_t *)(a1 + 620) = vcvt_f32_s32(v34);
  *(float *)(a1 + 628) = v27;
  *(float32x2_t *)(a1 + 632) = vcvt_f32_f64(vdivq_f64(_Q16, vcvtq_f64_s64(v28)));
  *(unsigned char *)(a1 + 640) = 0;
  *(unsigned char *)(a1 + 641) = v17 * v16 > 2048;
  *(unsigned char *)(a1 + 664) = 0;
  int v35 = (1 << v24) - 1;
  if (!a8) {
    int v35 = 0;
  }
  *(_OWORD *)(a1 + 644) = 0uLL;
  if ((int)v19 >= 1)
  {
    int8x16_t v36 = (_DWORD *)(a1 + 456);
    uint64_t v37 = v19;
    do
    {
      *(v36 - 32) = v35;
      *v36++ = 0;
      --v37;
    }
    while (v37);
  }
  if ((v19 & 0x80000000) == 0)
  {
    uint64_t v38 = 0;
    uint64_t v39 = (v19 + 1);
    uint64x2_t v40 = (uint64x2_t)vdupq_n_s64(v39 - 1);
    uint64_t v41 = (v39 + 1) & 0x1FFFFFFFELL;
    int64x2_t v42 = (int64x2_t)xmmword_184997FD0;
    int64x2_t v43 = vdupq_n_s64(2uLL);
    do
    {
      int32x2_t v44 = vmovn_s64((int64x2_t)vcgeq_u64(v40, (uint64x2_t)v42));
      v45.i32[0] = v38;
      v45.i32[1] = v38 + 1;
      float32x2_t v46 = vrndm_f32(vmul_n_f32(vcvt_f32_s32(v45), v10 / (float)(int)v19));
      if (v44.i8[0]) {
        *(float *)(a1 + 4 * v38 + 64) = v46.f32[0] + v14;
      }
      if (v44.i8[4]) {
        *(float *)(a1 + 4 * v38 + 68) = v46.f32[1] + v14;
      }
      v38 += 2;
      int64x2_t v42 = vaddq_s64(v42, v43);
    }
    while (v41 != v38);
  }
  if ((v24 & 0x80000000) == 0)
  {
    uint64_t v47 = 0;
    uint64_t v48 = (v24 + 1);
    uint64x2_t v49 = (uint64x2_t)vdupq_n_s64(v48 - 1);
    uint64_t v50 = (v48 + 1) & 0x1FFFFFFFELL;
    float v51 = v11 / (float)v24;
    int64x2_t v52 = (int64x2_t)xmmword_184997FD0;
    int64x2_t v53 = vdupq_n_s64(2uLL);
    do
    {
      int32x2_t v54 = vmovn_s64((int64x2_t)vcgeq_u64(v49, (uint64x2_t)v52));
      v55.i32[0] = v47;
      v55.i32[1] = v47 + 1;
      float32x2_t v56 = vrndm_f32(vmul_n_f32(vcvt_f32_s32(v55), v51));
      if (v54.i8[0]) {
        *(float *)(a1 + 4 * v47 + 196) = v56.f32[0] + v15;
      }
      if (v54.i8[4]) {
        *(float *)(a1 + 4 * v47 + 200) = v56.f32[1] + v15;
      }
      v47 += 2;
      int64x2_t v52 = vaddq_s64(v52, v53);
    }
    while (v50 != v47);
  }
  *(float *)(a1 + 4 * (int)v19 + 64) = v14 + v10;
  float result = *(float *)(a1 + 28) + *(float *)(a1 + 20);
  *(float *)(a1 + 4 * v24 + 196) = result;
  return result;
}

double CA::CG::MosaicDelegate::flush(CA::CG::MosaicDelegate **this)
{
  return CA::CG::MosaicDelegate::draw_array(this[2]);
}

uint64_t CA::OGL::Mosaic::Delegate::aa_quad(CA::OGL::Mosaic::Delegate *this, const CA::Bounds *a2, float *a3)
{
  return (*(uint64_t (**)(CA::OGL::Mosaic::Delegate *, const CA::Bounds *, float *))(*(void *)this + 24))(this, a2, a3);
}

float CA::CG::PathDelegate::quad(CA::CG::PathDelegate *this, const CA::Bounds *a2, float *a3)
{
  uint64_t v6 = *((void *)this + 2);
  uint64_t v7 = 6;
  if (!*(_DWORD *)(v6 + 92)) {
    uint64_t v7 = 4;
  }
  if ((unint64_t)(*(void *)(v6 + 128) + 4) > *(void *)(v6 + 136)
    || (unint64_t v8 = *(void *)(v6 + 112)) != 0 && *(void *)(v6 + 104) + v7 > v8)
  {
    CA::CG::MosaicDelegate::draw_array(*((CA::CG::MosaicDelegate **)this + 2));
  }
  int v9 = (_DWORD *)*((void *)this + 4);
  double v10 = *((double *)this + 5);
  double v11 = v10 * (double)(*(_DWORD *)a2 + *v9);
  double v12 = v10 * (double)(*((_DWORD *)a2 + 1) + v9[1]);
  double v13 = v11 + v10 * (double)*((int *)a2 + 2);
  double v14 = v12 + v10 * (double)*((int *)a2 + 3);
  *(float *)&double v11 = v11;
  *(float *)&double v10 = v12;
  *(float *)&double v12 = v13;
  *(float *)&double v13 = v14;
  CA::OGL::Context::array_rect((void *)v6, *(float *)&v11, *(float *)&v10, *(float *)&v12, *(float *)&v13);
  float result = *a3;
  int v16 = *((_DWORD *)a3 + 1);
  int v17 = *((_DWORD *)a3 + 2);
  int v18 = *((_DWORD *)a3 + 3);
  uint64_t v19 = *(void *)(v6 + 120) + 48 * *(void *)(v6 + 128);
  *(float *)(v19 - 176) = *a3;
  *(_DWORD *)(v19 - 172) = v16;
  *(_DWORD *)(v19 - 128) = v17;
  *(_DWORD *)(v19 - 124) = v16;
  *(_DWORD *)(v19 - 80) = v17;
  *(_DWORD *)(v19 - 76) = v18;
  *(float *)(v19 - 32) = result;
  *(_DWORD *)(v19 - 28) = v18;
  uint64_t v20 = *(void *)(*(void *)(v6 + 16) + 8);
  *(void *)(v19 - 160) = v20;
  *(void *)(v19 - 112) = v20;
  *(void *)(v19 - 64) = v20;
  *(void *)(v19 - 16) = v20;
  return result;
}

uint64_t CA::CG::PathDelegate::read(uint64_t this, int a2, const CA::Bounds *a3, unsigned __int8 *a4, uint64_t a5)
{
  if (a2 == 9)
  {
    int v5 = *((_DWORD *)a3 + 3);
    if (v5 >= 1)
    {
      uint64_t v6 = *(void *)(this + 32);
      uint64_t v7 = *(void *)(this + 24) + *(int *)(v6 + 8) * (uint64_t)*((int *)a3 + 1) + *(int *)a3;
      do
      {
        int v8 = *((_DWORD *)a3 + 2);
        if (v8 >= 1)
        {
          uint64_t v9 = 0;
          unsigned int v10 = v8 + 1;
          do
          {
            a4[v9] = *(unsigned char *)(v7 + v9);
            --v10;
            ++v9;
          }
          while (v10 > 1);
          uint64_t v6 = *(void *)(this + 32);
        }
        v7 += *(int *)(v6 + 8);
        a4 += a5;
      }
      while (v5-- > 1);
    }
  }
  return this;
}

void CA::CG::PathDelegate::~PathDelegate(CA::CG::MosaicDelegate **this)
{
  *this = (CA::CG::MosaicDelegate *)&unk_1ED028780;
  CA::CG::MosaicDelegate::draw_array(this[2]);

  JUMPOUT(0x185323DC0);
}

{
  *this = (CA::CG::MosaicDelegate *)&unk_1ED028780;
  CA::CG::MosaicDelegate::draw_array(this[2]);
}

uint64_t CA::CG::PathIterator::Iterator<CA::ScanConverter::Path>::callback_0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  long long v29 = 0u;
  long long v30 = 0u;
  int v8 = *(_DWORD *)a2;
  uint64_t v9 = 1;
  switch(*(_DWORD *)a2)
  {
    case 0:
    case 1:
      goto LABEL_5;
    case 2:
      uint64_t v10 = *(void *)(a2 + 8);
      uint64_t v9 = 2;
      goto LABEL_4;
    case 3:
      uint64_t v10 = *(void *)(a2 + 8);
      long long v30 = *(_OWORD *)(v10 + 32);
      uint64_t v9 = 3;
LABEL_4:
      long long v29 = *(_OWORD *)(v10 + 16);
LABEL_5:
      uint64_t v11 = 0;
      long long v28 = *(_OWORD *)*(void *)(a2 + 8);
      float64x2_t v12 = *(float64x2_t *)*(void *)result;
      float64x2_t v13 = *(float64x2_t *)(*(void *)result + 16);
      float64x2_t v14 = *(float64x2_t *)(*(void *)result + 32);
      uint64_t v15 = 16 * v9;
      do
      {
        *(long long *)((char *)&v28 + v11) = (__int128)vmlaq_n_f64(vmlaq_n_f64(v14, v12, *(double *)((char *)&v28 + v11)), v13, *(double *)((char *)&v28 + v11 + 8));
        v11 += 16;
      }
      while (v15 != v11);
      switch(v8)
      {
        case 0:
          uint64_t v16 = *(void *)(result + 8);
          long long v17 = v28;
          float result = (uint64_t)CA::ScanConverter::Path::closepath((double *)v16);
          *(_OWORD *)(v16 + 40) = v17;
          *(_OWORD *)(v16 + 64) = v17;
          *(void *)(v16 + 56) = 0x3FF0000000000000;
          *(void *)(v16 + 80) = 0x3FF0000000000000;
          break;
        case 1:
          uint64_t v19 = *(double **)(result + 8);
          long long v20 = v28;
          float result = (uint64_t)CA::ScanConverter::Path::lineto(v19, *(double *)&v20, *((double *)&v20 + 1));
          break;
        case 2:
          float v21 = *(CA::ScanConverter::Path **)(result + 8);
          long long v22 = v28;
          long long v23 = v29;
          float result = CA::ScanConverter::Path::quadto(v21, *(double *)&v22, *((double *)&v22 + 1), *(double *)&v23, *((double *)&v23 + 1), a2, a3, a4, a5, a6, a7, a8);
          break;
        case 3:
          int v24 = *(CA::ScanConverter::Path **)(result + 8);
          long long v25 = v28;
          long long v26 = v29;
          long long v27 = v30;
          float result = CA::ScanConverter::Path::cubeto(v24, *(double *)&v25, *((double *)&v25 + 1), *(double *)&v26, *((double *)&v26 + 1), *(double *)&v27, *((double *)&v27 + 1), a2, a3, a4, a5, a6, a7, a8);
          break;
        case 4:
          goto LABEL_9;
        default:
          return result;
      }
      break;
    case 4:
LABEL_9:
      int v18 = *(double **)(result + 8);
      float result = (uint64_t)CA::ScanConverter::Path::closepath(v18);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t CA::CG::PathIterator::Iterator<CA::ScanConverter::Path>::callback_1(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  switch(*(_DWORD *)a2)
  {
    case 0:
      uint64_t v8 = *(void *)(result + 8);
      uint64_t v9 = *(uint64_t **)(a2 + 8);
      uint64_t v10 = *v9;
      uint64_t v11 = v9[1];
      float result = (uint64_t)CA::ScanConverter::Path::closepath((double *)v8);
      *(void *)(v8 + 40) = v10;
      *(void *)(v8 + 48) = v11;
      *(void *)(v8 + 64) = v10;
      *(void *)(v8 + 72) = v11;
      *(void *)(v8 + 56) = 0x3FF0000000000000;
      *(void *)(v8 + 80) = 0x3FF0000000000000;
      break;
    case 1:
      float64x2_t v12 = *(double **)(result + 8);
      float64x2_t v13 = *(double **)(a2 + 8);
      double v14 = *v13;
      double v15 = v13[1];
      float result = (uint64_t)CA::ScanConverter::Path::lineto(v12, v14, v15);
      break;
    case 2:
      uint64_t v16 = *(CA::ScanConverter::Path **)(result + 8);
      long long v17 = *(double **)(a2 + 8);
      double v18 = *v17;
      double v19 = v17[1];
      double v20 = v17[2];
      double v21 = v17[3];
      float result = CA::ScanConverter::Path::quadto(v16, v18, v19, v20, v21, a2, a3, a4, a5, a6, a7, a8);
      break;
    case 3:
      long long v22 = *(CA::ScanConverter::Path **)(result + 8);
      long long v23 = *(double **)(a2 + 8);
      double v24 = *v23;
      double v25 = v23[1];
      double v26 = v23[2];
      double v27 = v23[3];
      double v28 = v23[4];
      double v29 = v23[5];
      float result = CA::ScanConverter::Path::cubeto(v22, v24, v25, v26, v27, v28, v29, a2, a3, a4, a5, a6, a7, a8);
      break;
    case 4:
      long long v30 = *(double **)(result + 8);
      float result = (uint64_t)CA::ScanConverter::Path::closepath(v30);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t CA::CG::FillPath::debug_color(CA::CG::FillPath *this)
{
  return 2338567136;
}

BOOL CA::CG::FillPath::shape_extent_contains(CA::CG::FillPath *this, CA::CG::Renderer *a2, const CA::Shape *a3)
{
  MEMORY[0x1F4188790](this);
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  v40[508] = *MEMORY[0x1E4F143B8];
  if (v3)
  {
    if (v3 == 1) {
      return 0;
    }
  }
  else if (*(_DWORD *)(v3 + 4) != 12)
  {
    return 0;
  }
  int32x2_t v25 = 0;
  int32x2_t v26 = 0;
  CA::Shape::get_bounds(v3, (int *)&v25);
  int v9 = *(_DWORD *)(v7 + 100);
  uint64_t v10 = *(const CGPath **)(v7 + 112);
  uint64_t v11 = v5 + 32;
  uint64_t v12 = 88;
  v38[0] = 0;
  v38[1] = v40;
  if ((v9 & 4) == 0) {
    uint64_t v12 = 32;
  }
  long long v39 = xmmword_184998060;
  if ((v9 & 4) != 0) {
    uint64_t v11 = v5 + 88;
  }
  uint64_t v37 = (void ***)v38;
  uint64_t v31 = 0;
  *(void *)&v27[0] = v38;
  memset(&v27[1], 0, 24);
  void v27[4] = 0.125;
  long long v28 = 0u;
  long long v29 = 0u;
  memset(v30, 0, sizeof(v30));
  float64x2_t v32 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
  float64x2_t v33 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
  double v13 = *(double *)(v5 + v12);
  int32x2_t v14 = vadd_s32(v26, v25);
  v15.i64[0] = v14.i32[0];
  v15.i64[1] = v14.i32[1];
  float64x2_t v16 = vcvtq_f64_s64(v15);
  v15.i64[0] = v25.i32[0];
  v15.i64[1] = v25.i32[1];
  float64x2_t v34 = vcvtq_f64_s64(v15);
  float64x2_t v35 = v16;
  if (v13 == 1.0)
  {
    uint64_t v18 = 1;
    while (v18 != 6)
    {
      uint64_t v19 = v18;
      double v20 = *(double *)(v11 + 8 * v18);
      double v21 = CA::Mat2Impl::mat2_identity_double[v18++];
      if (v20 != v21)
      {
        if ((unint64_t)(v19 - 1) < 5) {
          goto LABEL_10;
        }
        break;
      }
    }
    info[0] = 0;
    long long v17 = (void (__cdecl *)(void *, const CGPathElement *))CA::CG::PathIterator::Iterator<CA::ScanConverter::Path>::callback_1;
  }
  else
  {
LABEL_10:
    info[0] = v11;
    long long v17 = (void (__cdecl *)(void *, const CGPathElement *))CA::CG::PathIterator::Iterator<CA::ScanConverter::Path>::callback_0;
  }
  info[1] = v27;
  CGPathApply(v10, info, v17);
  CA::ScanConverter::Path::closepath(v27);
  int32x4_t v22 = (int32x4_t)vcgtq_f64(v32, (float64x2_t)vdupq_n_s64(0xC1E0000000000000));
  *(int32x2_t *)v22.i8 = vmovn_s64((int64x2_t)v22);
  v22.i32[0] = vmovn_s32(v22).u32[0];
  int64x2_t v23 = vcgtq_f64((float64x2_t)vdupq_n_s64(0x41DFFFFFFFC00000uLL), v33);
  v22.i32[1] = vmovn_s32(vmovn_hight_s64(*(int32x2_t *)&v23, v23)).i32[1];
  BOOL v8 = (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(*(int16x4_t *)v22.i8, 0xFuLL))) & 1) != 0
    && CA::ScanConverter::path_rect_containment((uint64_t)v27) == 0;
  x_heap_free(v37);
  return v8;
}

void *CA::CG::FillPath::styled_op(uint64_t a1, const double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  float result = malloc_type_zone_malloc(malloc_zone, 0xA0uLL, 0x8BB15036uLL);
  if (result)
  {
    float result = (void *)CA::CG::DrawPathShadow::DrawPathShadow(result, a2, a1, a4, a5, a3, *(_DWORD *)(a1 + 100) & 4);
    *float result = &unk_1ED0285F0;
  }
  return result;
}

uint64_t CA::CG::DrawPathShadow::DrawPathShadow(void *a1, const double *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  Color = (CGColor *)CGStyleGetColor();
  uint64_t result = CA::CG::DrawOp::DrawOp((uint64_t)a1, a2, a3, a4, a5, Color, a7 | 0x840u);
  *a1 = &unk_1ED027588;
  a1[18] = a3;
  atomic_fetch_add((atomic_uint *volatile)(a6 + 8), 1u);
  a1[19] = a6;
  *a1 = &unk_1ED028430;
  return result;
}

uint64_t CA::CG::DrawOp::DrawOp(uint64_t a1, const double *a2, uint64_t a3, uint64_t a4, uint64_t a5, CGColor *a6, int a7)
{
  v23[1] = *(double *)MEMORY[0x1E4F143B8];
  *(void *)a1 = &unk_1ED029D88;
  long long v14 = *(_OWORD *)(a3 + 8);
  long long v15 = *(_OWORD *)(a3 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a3 + 40);
  *(_OWORD *)(a1 + 24) = v15;
  *(_OWORD *)(a1 + 8) = v14;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a3 + 56);
  if (*(void *)(a3 + 64))
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    long long v17 = (uint64_t *)malloc_type_zone_malloc(malloc_zone, 0x18uLL, 0x8BB15036uLL);
    if (v17) {
      long long v17 = CA::CG::BasicState::SoftMask::SoftMask(v17);
    }
  }
  else
  {
    long long v17 = 0;
  }
  *(void *)(a1 + 64) = v17;
  uint64_t v18 = *(atomic_uint **)(a3 + 72);
  if (v18) {
    atomic_fetch_add(v18, 1u);
  }
  *(void *)(a1 + 72) = v18;
  v23[0] = 1.10008428e-19;
  CA::CG::DeviceColor::DeviceColor((double *)(a1 + 80), a6, a4, a5, a2, v23);
  int ShouldAntialias = CGGStateGetShouldAntialias();
  if (ShouldAntialias) {
    int ShouldAntialias = CGRenderingStateGetAllowsAntialiasing();
  }
  *(_DWORD *)(a1 + 100) = ShouldAntialias | (2 * (a6 != 0)) | a7 | *(_DWORD *)(a3 + 100) & 0x1900;
  *(void *)(a1 + 104) = 0;
  if ((a7 & 0x40) == 0)
  {
    CGGStateGetAlpha();
    float v21 = v20;
    if (v21 != 1.0) {
      *(float16x4_t *)(a1 + 88) = vcvt_f16_f32(vmulq_n_f32(vcvtq_f32_f16(*(float16x4_t *)(a1 + 88)), v21));
    }
  }
  return a1;
}

uint64_t CA::CG::FillPath::compute_dod_corners(uint64_t a1, float64x2_t *a2)
{
  float64x2_t v2 = *(float64x2_t *)(a1 + 120);
  float64x2_t v3 = vaddq_f64(*(float64x2_t *)(a1 + 136), v2);
  v4.f64[0] = v3.f64[0];
  v4.f64[1] = *(float64_t *)(a1 + 128);
  *a2 = v2;
  a2[1] = v4;
  v2.f64[1] = v3.f64[1];
  a2[2] = v3;
  a2[3] = v2;
  if ((*(unsigned char *)(a1 + 100) & 4) == 0)
  {
    uint64_t v5 = 0;
    uint64_t v6 = (const double *)(a1 + 48);
    uint64_t v7 = (const double *)(a1 + 8);
    BOOL v8 = (const double *)(a1 + 32);
    int v9 = (const double *)(a1 + 16);
    uint64_t v10 = (const double *)(a1 + 40);
    uint64_t v11 = (const double *)(a1 + 24);
    float64x2_t v12 = vld1q_dup_f64(v7);
    float64x2_t v13 = vld1q_dup_f64(v11);
    float64x2_t v14 = vld1q_dup_f64(v10);
    float64x2_t v15 = vld1q_dup_f64(v9);
    float64x2_t v16 = vld1q_dup_f64(v8);
    float64x2_t v17 = vld1q_dup_f64(v6);
    do
    {
      f64 = a2[v5].f64;
      float64x2x2_t v20 = vld2q_f64(f64);
      v21.val[0] = vmlaq_f64(vmlaq_f64(v14, v20.val[0], v12), v20.val[1], v13);
      v21.val[1] = vmlaq_f64(vmlaq_f64(v17, v20.val[0], v15), v20.val[1], v16);
      vst2q_f64(f64, v21);
      v5 += 2;
    }
    while (v5 != 4);
  }
  return 1;
}

float64x2_t *CA::CG::FillPath::compute_dod(float64x2_t *this, float64x2_t *a2)
{
  *a2 = *(float64x2_t *)((char *)this + 120);
  a2[1] = *(float64x2_t *)((char *)this + 136);
  if ((BYTE4(this[6].f64[0]) & 4) == 0) {
    return CA::Rect::apply_transform(a2, (const CGAffineTransform *)&this->f64[1]);
  }
  return this;
}

void CA::CG::FillPath::~FillPath(CA::CG::Renderer **this, const void *a2)
{
  *this = (CA::CG::Renderer *)&unk_1ED029E88;
  CA::CG::Renderer::release_object(this[14], a2);
  CA::CG::DrawOp::~DrawOp((CA::CG::DrawOp *)this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  uint64_t vars8;

  *this = (CA::CG::Renderer *)&unk_1ED029E88;
  CA::CG::Renderer::release_object(this[14], a2);

  CA::CG::DrawOp::~DrawOp((CA::CG::DrawOp *)this);
}

void CA::CG::StrokePath::draw_shape(CA::CG::StrokePath *this, CA::CG::Renderer *a2)
{
}

void CA::CG::stroke_path(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(void *)(a5 + 16)) {
    CGDashGetPattern();
  }
  CA::CG::fill_path(a1);
}

uint64_t CA::CG::StrokePath::debug_color(CA::CG::StrokePath *this)
{
  return 3695562720;
}

void *CA::CG::StrokePath::styled_op(uint64_t a1, const double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  uint64_t result = malloc_type_zone_malloc(malloc_zone, 0xA0uLL, 0x8BB15036uLL);
  if (result)
  {
    uint64_t result = (void *)CA::CG::DrawPathShadow::DrawPathShadow(result, a2, a1, a4, a5, a3, *(_DWORD *)(a1 + 100) & 4);
    *uint64_t result = &unk_1ED028D58;
  }
  return result;
}

double *CA::CG::StrokePath::compute_dod(CA::CG::StrokePath *this, CA::Rect *a2)
{
  *(_OWORD *)a2 = *(_OWORD *)((char *)this + 120);
  *((_OWORD *)a2 + 1) = *(_OWORD *)((char *)this + 136);
  if ((*((unsigned char *)this + 100) & 4) == 0) {
    CA::Rect::apply_transform((float64x2_t *)a2, (const CGAffineTransform *)((char *)this + 8));
  }
  double v4 = -CA::CG::stroke_radius((uint64_t)this + 152, *(float64x2_t *)((char *)this + 8), *(float64x2_t *)((char *)this + 24));
  double v6 = -v5;

  return CA::BoundsImpl::inset_point((double *)a2, v4, v6);
}

void CA::CG::StrokePath::~StrokePath(CA::CG::StrokePath *this, const void *a2)
{
  *(void *)this = &unk_1ED027780;
  if (*((void *)this + 21)) {
    CGDashRelease();
  }
  *(void *)this = &unk_1ED029E88;
  CA::CG::Renderer::release_object(*((CA::CG::Renderer **)this + 14), a2);
  CA::CG::DrawOp::~DrawOp(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1ED027780;
  if (*((void *)this + 21)) {
    CGDashRelease();
  }
  *(void *)this = &unk_1ED029E88;
  CA::CG::Renderer::release_object(*((CA::CG::Renderer **)this + 14), a2);

  CA::CG::DrawOp::~DrawOp(this);
}

uint64_t CA::CG::fill_path_blurred(uint64_t a1)
{
  double v5 = MEMORY[0x1F4188790](a1);
  char v7 = v6;
  BOOL v8 = (int8x16_t *)v4;
  uint64_t v10 = v9;
  uint64_t v11 = v2;
  uint64_t v12 = v1;
  v170[508] = *MEMORY[0x1E4F143B8];
  if (*(float *)&v5 != 0.0)
  {
    float v15 = sqrt(*v4 * *v4 + v4[1] * v4[1]) * *(float *)&v5;
    uint64_t v16 = *(void *)(v1 + 8);
    float64x2_t v159 = 0u;
    float64x2_t v160 = 0u;
    if (v3)
    {
      float64x2_t v17 = v3[1];
      float64x2_t v159 = *v3;
      float64x2_t v160 = v17;
    }
    else
    {
      CGRect BoundingBox = CGPathGetBoundingBox(v2);
      v159.f64[0] = BoundingBox.origin.x;
      v159.f64[1] = BoundingBox.origin.y;
      v160.f64[0] = BoundingBox.size.width;
      v160.f64[1] = BoundingBox.size.height;
      if (BoundingBox.size.width < 0.0)
      {
        v159.f64[0] = BoundingBox.size.width + BoundingBox.origin.x;
        v160.f64[0] = -BoundingBox.size.width;
      }
      if (BoundingBox.size.height < 0.0)
      {
        v159.f64[1] = BoundingBox.size.height + BoundingBox.origin.y;
        v160.f64[1] = -BoundingBox.size.height;
      }
    }
    CA::Mat2Impl::mat2_apply_to_rect((uint64_t)v8, v159.f64, v3->f64);
    unsigned int v18 = vcvtps_s32_f32((float)(v15 * 2.82) + 0.5);
    double v19 = v15;
    if (v15 <= 0.6) {
      signed int v20 = 0;
    }
    else {
      signed int v20 = v18;
    }
    v21.i64[1] = *(void *)&v160.f64[1];
    int8x16_t v22 = (int8x16_t)vceqzq_f64(v160);
    int8x16_t v23 = 0uLL;
    if ((vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v22, 1), v22).u64[0] & 0x8000000000000000) == 0)
    {
      int8x16_t v24 = vorrq_s8((int8x16_t)vcltzq_f64(v160), (int8x16_t)vcgezq_f64(v160));
      if ((vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v24), 1), v24).u64[0] & 0x8000000000000000) == 0)
      {
        int32x4_t v25 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v159, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
        int32x4_t v21 = (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v159, v160), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v25);
        int8x16_t v23 = (int8x16_t)vuzp1q_s32(v25, v21);
      }
    }
    int v26 = v23.i32[2];
    if (v23.i32[2] <= v23.i32[3]) {
      int v27 = v23.i32[3];
    }
    else {
      int v27 = v23.i32[2];
    }
    if (v23.i32[2] >= v23.i32[3]) {
      int v26 = v23.i32[3];
    }
    if (v27 > 1073741822 || v26 < 1)
    {
      int8x16_t v143 = v23;
    }
    else
    {
      *(int32x2_t *)v21.i8 = vsub_s32(*(int32x2_t *)v23.i8, vdup_n_s32(v20));
      v29.i64[0] = v21.i64[0];
      v29.u64[1] = (unint64_t)vadd_s32(vdup_n_s32(2 * v20), (int32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL));
      if (v29.i32[3] < 1 || v29.i32[2] < 1) {
        unsigned int v31 = -1;
      }
      else {
        unsigned int v31 = 0;
      }
      int8x16_t v143 = vbslq_s8((int8x16_t)vdupq_n_s32(v31), (int8x16_t)v21, v29);
    }
    int32x4_t v158 = 0uLL;
    CA::Shape::get_bounds(*(void *)(*(void *)(v16 + 248) + 8), v158.i32);
    float64x2_t v34 = *(int32x2_t **)(v16 + 264);
    if (v34) {
      float64x2_t v35 = v34 + 4;
    }
    else {
      float64x2_t v35 = (int32x2_t *)(v16 + 200);
    }
    uint32x2_t v36 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, (int32x2_t)v158.u64[1]);
    if ((vpmax_u32(v36, v36).u32[0] & 0x80000000) != 0) {
      return 1;
    }
    int32x2_t v37 = v35[1];
    uint32x2_t v38 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v37);
    if ((vpmax_u32(v38, v38).u32[0] & 0x80000000) != 0) {
      return 1;
    }
    *(int32x2_t *)v33.i8 = vmax_s32(*(int32x2_t *)v158.i8, *v35);
    *(int32x2_t *)&long long v32 = vsub_s32(vmin_s32(vadd_s32(*(int32x2_t *)v158.i8, (int32x2_t)v158.u64[1]), vadd_s32(*v35, v37)), *(int32x2_t *)v33.i8);
    uint32x2_t v39 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)&v32);
    if ((vpmax_u32(v39, v39).u32[0] & 0x80000000) != 0) {
      return 1;
    }
    long long v140 = v32;
    int32x4_t v141 = v33;
    v33.i64[1] = v32;
    int32x4_t v142 = v33;
    int32x4_t v158 = v33;
    BOOL v41 = CA::OGL::Context::need_transparent_source((CA::OGL::Context *)v16);
    int32x4_t v45 = (int32x4_t)vextq_s8(v143, v143, 8uLL);
    *(int32x2_t *)v46.i8 = vcgt_s32((int32x2_t)0x100000001, (int32x2_t)v142.u64[1]);
    unsigned __int32 v47 = vpmax_u32(*(uint32x2_t *)v46.i8, *(uint32x2_t *)v46.i8).u32[0];
    if (v41)
    {
      v48.i64[0] = v141.i64[0];
      if ((v47 & 0x80000000) != 0
        || (uint32x2_t v49 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)v45.i8),
            (vpmax_u32(v49, v49).u32[0] & 0x80000000) != 0)
        || (uint32x2_t v50 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, vsub_s32(vmin_s32(vadd_s32(*(int32x2_t *)v141.i8, (int32x2_t)v142.u64[1]), vadd_s32(*(int32x2_t *)v143.i8, *(int32x2_t *)v45.i8)), vmax_s32(*(int32x2_t *)v141.i8, *(int32x2_t *)v143.i8))), (vpmax_u32(v50, v50).u32[0] & 0x80000000) != 0))
      {
        float64x2_t v167 = 0;
        v168[0] = 0;
        CA::OGL::emit_bounds_surround(v16, (const CA::Bounds *)&v167);
        return 1;
      }
      int32x2_t v51 = (int32x2_t)__PAIR64__(DWORD1(v140), v142.u32[2]);
    }
    else
    {
      if ((v47 & 0x80000000) != 0) {
        return 1;
      }
      uint32x2_t v52 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)v45.i8);
      if ((vpmax_u32(v52, v52).u32[0] & 0x80000000) != 0) {
        return 1;
      }
      *(int32x2_t *)v48.i8 = vmax_s32(*(int32x2_t *)v141.i8, *(int32x2_t *)v143.i8);
      int32x2_t v51 = vsub_s32(vmin_s32(vadd_s32(*(int32x2_t *)v141.i8, (int32x2_t)v142.u64[1]), vadd_s32(*(int32x2_t *)v143.i8, *(int32x2_t *)v45.i8)), *(int32x2_t *)v48.i8);
      uint32x2_t v53 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v51);
      if ((vpmax_u32(v53, v53).u32[0] & 0x80000000) != 0) {
        return 1;
      }
      v48.u64[1] = (unint64_t)v51;
      int32x4_t v158 = v48;
    }
    double v54 = 4.0;
    if (v15 > 8.0) {
      double v54 = 8.0;
    }
    if (v15 <= 4.0) {
      double v54 = 2.0;
    }
    if (v54 >= v19)
    {
      uint64_t v13 = 0;
      if (v19 <= 0.6) {
        return v13;
      }
      __int32 v56 = v51.i32[0];
      __int32 v57 = v51.i32[1];
      double v68 = 1.0;
      double v55 = 1.0;
    }
    else
    {
      double v55 = 1.0;
      v42.i64[0] = 0.5;
      v44.i64[0] = 1.0;
      do
      {
        double v55 = v55 + v55;
        *(double *)v44.i64 = *(double *)v44.i64 * 0.5;
        float v15 = v15 * 0.5;
      }
      while (v54 < v15);
      if (v15 <= 0.6) {
        return 0;
      }
      __int32 v56 = v51.i32[0];
      __int32 v57 = v51.i32[1];
      v45.i64[0] = 1.0;
      if (*(double *)v44.i64 == 1.0)
      {
        LODWORD(v13) = 0;
        double v68 = 1.0;
      }
      else
      {
        if (v51.i32[0] <= v51.i32[1]) {
          __int32 v56 = v51.i32[1];
        }
        v45.i32[0] = 1073741822;
        v42.i32[0] = v56;
        v58.i64[0] = v48.i32[0];
        v58.i64[1] = v48.i32[1];
        int8x16_t v59 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v42, v45), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v58));
        v58.i64[0] = v51.i32[0];
        v58.i64[1] = v51.i32[1];
        int32x2_t v60 = vdup_n_s32(v56 > 1073741822);
        int8x16_t v61 = (int8x16_t)vcvtq_f64_s64(v58);
        v58.i64[0] = v60.u32[0];
        v58.i64[1] = v60.u32[1];
        int8x16_t v62 = (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
        int8x16_t v63 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v58, 0x3FuLL)), v62, v61);
        v62.i64[0] = 0x7FEFFFFFFFFFFFFFLL;
        int8x16_t v64 = (int8x16_t)vdupq_lane_s64(vcgtq_f64((float64x2_t)v62, (float64x2_t)v63).i64[0], 0);
        v65.i64[1] = v59.i64[1];
        *(double *)v65.i64 = *(double *)v44.i64 * *(double *)v59.i64;
        float64x2_t v66 = (float64x2_t)vbslq_s8(v64, v65, v59);
        v65.i64[1] = v63.i64[1];
        *(double *)v65.i64 = *(double *)v44.i64 * *(double *)v63.i64;
        float64x2_t v67 = (float64x2_t)vbslq_s8(v64, v65, v63);
        int8x16_t v143 = v44;
        if (v67.f64[1] < 1.79769313e308)
        {
          v66.f64[1] = vmuld_lane_f64(*(double *)v44.i64, v66, 1);
          v67.f64[1] = v67.f64[1] * *(double *)v44.i64;
        }
        CA::Bounds::set_exterior(&v158, v40, v66, v67);
        double v68 = *(double *)v143.i64;
        signed int v20 = vcvtpd_s64_f64(*(double *)v143.i64 * (double)v20);
        LODWORD(v13) = 1;
        __int32 v56 = v158.i32[2];
        __int32 v57 = v158.i32[3];
      }
    }
    if (v56 <= v57) {
      int v69 = v57;
    }
    else {
      int v69 = v56;
    }
    if (v56 >= v57) {
      int v70 = v57;
    }
    else {
      int v70 = v56;
    }
    if (v69 <= 1073741822 && v70 >= 1)
    {
      *(int32x2_t *)v158.i8 = vsub_s32(*(int32x2_t *)v158.i8, vdup_n_s32(v20));
      v158.i32[2] = v56 + 2 * v20;
      v158.i32[3] = v57 + 2 * v20;
      if (v158.i32[2] < 1 || v57 + 2 * v20 <= 0) {
        v158.i64[1] = 0;
      }
    }
    v168[0] = 0;
    v168[1] = v170;
    long long v169 = xmmword_184998060;
    float64x2_t v167 = (void ***)v168;
    *(void *)&v149[0] = v168;
    memset(&v149[1], 0, 24);
    uint64_t v153 = 0;
    v149[4] = 0.125;
    long long v150 = 0u;
    long long v151 = 0u;
    memset(v152, 0, sizeof(v152));
    v46.i64[0] = (uint64_t)v8;
    v43.i64[0] = (uint64_t)v148;
    int8x16_t v72 = (int8x16_t)vdupq_lane_s64(vmvnq_s8((int8x16_t)vceqq_s64(v43, v46)).i64[0], 0);
    float64x2_t v154 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
    float64x2_t v155 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
    float64x2_t v73 = (float64x2_t)vandq_s8(v8[2], v72);
    float64x2_t v74 = (float64x2_t)vandq_s8(v8[1], v72);
    v148[0] = vmulq_n_f64((float64x2_t)vandq_s8(*v8, v72), v68);
    v148[1] = vmulq_n_f64(v74, v68);
    v148[2] = vmulq_n_f64(v73, v68);
    int32x4_t v75 = v158;
    int32x2_t v76 = vadd_s32((int32x2_t)v158.u64[1], *(int32x2_t *)v158.i8);
    v77.i64[0] = v76.i32[0];
    v77.i64[1] = v76.i32[1];
    float64x2_t v78 = vcvtq_f64_s64(v77);
    v77.i64[0] = v158.i32[0];
    v77.i64[1] = v158.i32[1];
    float64x2_t v156 = vcvtq_f64_s64(v77);
    float64x2_t v157 = v78;
    if (*(double *)v148 == 1.0)
    {
      uint64_t v80 = 1;
      while (v80 != 6)
      {
        uint64_t v81 = v80;
        double v82 = *((double *)v148 + v80);
        double v83 = CA::Mat2Impl::mat2_identity_double[v80++];
        if (v82 != v83)
        {
          if ((unint64_t)(v81 - 1) < 5) {
            goto LABEL_83;
          }
          break;
        }
      }
      int64x2_t v161 = 0;
      uint64_t v79 = (void (__cdecl *)(void *, const CGPathElement *))CA::CG::PathIterator::Iterator<CA::ScanConverter::Path>::callback_1;
    }
    else
    {
LABEL_83:
      int64x2_t v161 = v148;
      uint64_t v79 = (void (__cdecl *)(void *, const CGPathElement *))CA::CG::PathIterator::Iterator<CA::ScanConverter::Path>::callback_0;
    }
    int8x16_t v162 = v149;
    CGPathApply(v11, &v161, v79);
    uint64_t v84 = CA::ScanConverter::Path::closepath(v149);
    int32x2_t v85 = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(v154)));
    int32x2_t v86 = vmovn_s64(vcvtq_s64_f64(vrndpq_f64(v155)));
    *(int32x2_t *)&long long v147 = v85;
    *((int32x2_t *)&v147 + 1) = vsub_s32(v86, v85);
    uint32x2_t v87 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)((char *)&v147 + 8));
    if ((vpmax_u32(v87, v87).u32[0] & 0x80000000) != 0) {
      goto LABEL_128;
    }
    uint32x2_t v88 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, (int32x2_t)v75.u64[1]);
    if ((vpmax_u32(v88, v88).u32[0] & 0x80000000) != 0
      || (int32x2_t v89 = vmax_s32(v85, *(int32x2_t *)v75.i8),
          int32x2_t v90 = vsub_s32(vmin_s32(v86, v76), v89),
          uint32x2_t v91 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v90),
          (vpmax_u32(v91, v91).u32[0] & 0x80000000) != 0))
    {
      *((void *)&v147 + 1) = 0;
LABEL_128:
      int v129 = (int)v55;
      if ((int)v55 != 1)
      {
        if (SDWORD2(v147) <= 1073741822)
        {
          LODWORD(v147) = v147 * v129;
          DWORD2(v147) *= v129;
        }
        if (SHIDWORD(v147) <= 1073741822)
        {
          DWORD1(v147) *= v129;
          HIDWORD(v147) *= v129;
        }
      }
      if (v41) {
        CA::OGL::emit_bounds_surround(v16, (const CA::Bounds *)&v147);
      }
      uint64_t v100 = 1;
      goto LABEL_136;
    }
    *(int32x2_t *)&long long v92 = v89;
    *((int32x2_t *)&v92 + 1) = v90;
    long long v147 = v92;
    unint64_t v93 = v90.u32[0];
    unint64_t v94 = v90.u32[1];
    if (v90.i32[0] <= v90.i32[1]) {
      int v95 = v90.i32[1];
    }
    else {
      int v95 = v90.i32[0];
    }
    if (v90.i32[0] >= v90.i32[1]) {
      int v96 = v90.i32[1];
    }
    else {
      int v96 = v90.i32[0];
    }
    uint64_t v97 = v89.u32[1];
    if (v95 <= 1073741822 && v96 >= 1)
    {
      uint64_t v97 = (v89.i32[1] - v20);
      LODWORD(v147) = v89.i32[0] - v20;
      DWORD1(v147) = v89.i32[1] - v20;
      unint64_t v93 = (v90.i32[0] + 2 * v20);
      unint64_t v94 = (v90.i32[1] + 2 * v20);
      *((void *)&v147 + 1) = __PAIR64__(v94, v93);
      if ((int)v93 < 1 || (int)v94 <= 0)
      {
        unint64_t v94 = 0;
        unint64_t v93 = 0;
        *((void *)&v147 + 1) = 0;
      }
    }
    uint64_t v100 = 0;
    if ((int)v93 > 2048 || (int)v94 > 2048) {
      goto LABEL_136;
    }
    if ((v94 + *(_DWORD *)(v12 + 1400) - 1)
       / *(_DWORD *)(v12 + 1400)
       * ((v93 + *(_DWORD *)(v12 + 1396) - 1)
        / *(_DWORD *)(v12 + 1396)) <= CA::CG::Renderer::_max_mosaic_cells)
    {
      if (is_mul_ok((int)v93, (int)v94))
      {
        v141.i64[0] = (int)v93;
        v142.i32[0] = v97;
        unint64_t v130 = (int)v93 * (uint64_t)(int)v94;
        v143.i64[0] = v130;
        if (v130 > 0x1000)
        {
          *(void *)&long long v140 = malloc_type_malloc((int)v93 * (uint64_t)(int)v94, 0xED7D0CD7uLL);
          if (!(void)v140) {
            goto LABEL_139;
          }
        }
        else
        {
          MEMORY[0x1F4188790](v84);
          *(void *)&long long v140 = (char *)&v140 - ((v130 + 15) & 0xFFFFFFFFFFFFFFF0);
          bzero((void *)v140, (int)v93 * (uint64_t)(int)v94);
        }
        float v131 = (CA::_anonymous_namespace_ *)v140;
        bzero((void *)v140, v143.u64[0]);
        uint64_t v132 = v10;
        double v133 = (unsigned __int8 *)v141.i64[0];
        CA::ScanConverter::render_mask((uint64_t)v149, v132, (uint64_t)v131, v141.i64[0], v147, v142.u32[0], (v147 + v93), (v94 + v142.i32[0]), v7);
        uint64_t v134 = *(void *)(v16 + 16);
        unint64_t v135 = *(void *)(v134 + 16) & 0xFFFFFF00FF00FF00;
        if (*(void *)(v134 + 8) == 0x3C003C003C003C00) {
          int v136 = 1;
        }
        else {
          int v136 = 3;
        }
        *(_DWORD *)(v134 + 16) = v136 | v135;
        *(_DWORD *)(v134 + 20) = HIDWORD(v135);
        if ((*(_DWORD *)(v12 + 1536) & 0x80000000) != 0)
        {
          *(_DWORD *)(v12 + 1536) = 0;
          *(unsigned char *)(v12 + 1540) = v13;
          *(unsigned char *)(v12 + 1541) = v13;
          int8x16_t v162 = (double *)v12;
          long long v163 = (CA::CG::MosaicDelegate *)v16;
          *(void *)(v16 + 128) = 0;
          *(void *)(v16 + 96) = v16 + 834;
          *(_OWORD *)(v16 + 104) = xmmword_184997E70;
          int64x2_t v161 = &unk_1ED027DA8;
          *(void *)&long long v164 = v131;
          *((void *)&v164 + 1) = &v147;
          *(double *)&long long v165 = v55;
          CA::OGL::Mosaic::draw(v12 + 1392, (uint64_t *)v16, 4, 0, 0, v93, v94, 1, (uint64_t)&v161, 0);
          int64x2_t v161 = &unk_1ED028780;
          double v137 = CA::CG::MosaicDelegate::draw_array(v163);
          uint64_t v138 = *(void *)(v12 + 1552);
          if (v138)
          {
            (*(void (**)(uint64_t, uint64_t, void, double))(*(void *)v16 + 520))(v16, v138, 0, v137);
            *(void *)(v12 + 1552) = 0;
            *(_DWORD *)(v12 + 1544) = -1;
          }
          *(_DWORD *)(v12 + 1536) = -1;
          *(void *)(v12 + 1504) = 0;
        }
        *(unsigned char *)(*(void *)(v16 + 16) + 16) = 0;
        if (v143.i64[0] > 0x1000uLL) {
          free(v131);
        }
        goto LABEL_128;
      }
    }
    else
    {
      uint64_t v101 = v97;
      unint64_t v102 = CA::Render::format_rowbytes((CA::Render *)9, v93);
      float v103 = (unsigned __int8 *)v102;
      unint64_t v146 = v102;
      if (is_mul_ok(v102, v94)) {
        unint64_t v104 = v102 * v94;
      }
      else {
        unint64_t v104 = 0;
      }
      if (v104 <= 0x100000)
      {
        uint64_t v145 = 0;
        double v105 = (CA::_anonymous_namespace_ *)CA::Render::aligned_malloc((CA::Render *)v104, (unint64_t *)&v145, 0);
        if (v105)
        {
          uint64_t v106 = v10;
          __n128 v107 = v105;
          v141.i32[0] = v147;
          v142.i32[0] = v93 + v147;
          v143.i32[0] = v94 + v101;
          CA::ScanConverter::render_mask((uint64_t)v149, v106, (uint64_t)v105, (uint64_t)v103, v147, v101, (v93 + v147), (v94 + v101), v7);
          uint64_t v108 = CA::Render::Image::new_image((CA::Render::Image *)9, v93, v94, 1u, 0, v107, &v146, (const unint64_t *)CA::Render::aligned_free, v145, v139);
          if (v108)
          {
            uint64_t v109 = (atomic_uint *)v108;
            uint64_t v110 = *(void *)(v16 + 16);
            unint64_t v111 = *(void *)(v110 + 16) & 0xFFFFFF00FF00FF00;
            int v112 = *(void *)(v110 + 8) == 0x3C003C003C003C00 ? 1 : 3;
            *(_DWORD *)(v110 + 16) = v112 | v111;
            *(_DWORD *)(v110 + 20) = HIDWORD(v111);
            unsigned int v113 = v13 ? (double *)36 : 0;
            float32x4_t v166 = 0uLL;
            double v114 = CA::OGL::Context::bind_image(v16, 0, (uint32x2_t *)v108, v113, 1u, 1, 0, 0, 0.0, &v166, 0);
            if (v114)
            {
              int32x4_t v115 = v114;
              double v116 = v55 * (double)v142.i32[0];
              double v117 = v55;
              double v118 = v55 * (double)v143.i32[0];
              long long v165 = 0u;
              int8x16_t v119 = *(double **)(*(void *)(v16 + 248) + 8);
              int64x2_t v161 = (_OWORD *)v16;
              int8x16_t v162 = v119;
              long long v164 = 0u;
              long long v163 = 0;
              WORD4(v164) = 256;
              CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)&v161);
              v144[0] = 0;
              v144[1] = 0;
              float v120 = v55 * (double)v141.i32[0];
              float v121 = v55 * (double)(int)v101;
              float v122 = v116;
              while (CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)&v161, v144))
              {
                float v123 = v118;
                CA::OGL::Context::array_rect((void *)v16, v120, v121, v122, v123);
                __int32 v124 = v166.i32[3];
                __int32 v125 = v166.i32[2];
                uint64_t v126 = v166.i64[0];
                uint64_t v127 = *(void *)(v16 + 120) + 48 * *(void *)(v16 + 128);
                *(_DWORD *)(v127 - 176) = v166.i32[0];
                *(_DWORD *)(v127 - 172) = v124;
                *(_DWORD *)(v127 - 128) = v125;
                *(_DWORD *)(v127 - 124) = v124;
                *(_DWORD *)(v127 - 80) = v125;
                *(_DWORD *)(v127 - 76) = HIDWORD(v126);
                *(void *)(v127 - 32) = v126;
                uint64_t v128 = *(void *)(*(void *)(v16 + 16) + 8);
                *(void *)(v127 - 160) = v128;
                *(void *)(v127 - 112) = v128;
                *(void *)(v127 - 64) = v128;
                *(void *)(v127 - 16) = v128;
              }
              (*(void (**)(uint64_t, _OWORD *, void))(*(void *)v16 + 520))(v16, v115, 0);
              *(unsigned char *)(*(void *)(v16 + 16) + 16) = 0;
              double v55 = v117;
            }
            else
            {
              *(unsigned char *)(*(void *)(v16 + 16) + 16) = 0;
            }
            if (atomic_fetch_add(v109 + 2, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v109 + 16))(v109);
            }
          }
          goto LABEL_128;
        }
      }
    }
LABEL_139:
    uint64_t v100 = 0;
LABEL_136:
    x_heap_free(v167);
    return v100;
  }
  CA::CG::fill_path(v1);
  return 1;
}

void ___ZN2CA3OGL13DebugRendererC2Em_block_invoke()
{
}

void CA::OGL::DebugRenderer::DebugRenderer(CA::OGL::DebugRenderer *this, uint64_t a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(_OWORD *)((char *)this + 24) = xmmword_184998100;
  *((void *)this + 5) = a2;
  operator new[]();
}

void CA::OGL::DebugRenderer::~DebugRenderer(CA::OGL::DebugRenderer *this)
{
  float64x2_t v2 = (CA::Render::Image *)*((void *)this + 9);
  if (v2) {
    CA::Render::Image::finalize(v2);
  }
  uint64_t v3 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v3) {
    MEMORY[0x185323DA0](v3, 0x1000C803C748740);
  }
}

uint64_t CA::OGL::DebugRenderer::render(uint64_t this, CA::OGL::Context *a2, const CA::Transform *a3, char a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(this + 64);
  uint64_t v5 = *(void *)(this + 48);
  uint64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    uint64_t v8 = this;
    float32x4_t v27 = 0uLL;
    uint64_t v26 = 0;
    uint64_t v19 = 0;
    long long v9 = *((_OWORD *)a3 + 1);
    long long v10 = *((_OWORD *)a3 + 2);
    long long v11 = *((_OWORD *)a3 + 3);
    v18[0] = *(_OWORD *)a3;
    v18[1] = v9;
    void v18[2] = v10;
    double v18[3] = v11;
    long long v12 = *((_OWORD *)a3 + 5);
    long long v13 = *((_OWORD *)a3 + 6);
    long long v14 = *((_OWORD *)a3 + 7);
    _OWORD v18[4] = *((_OWORD *)a3 + 4);
    v18[5] = v12;
    v18[6] = v13;
    v18[7] = v14;
    v18[8] = *((_OWORD *)a3 + 8);
    LOBYTE(v19) = *((unsigned char *)a3 + 144) & 0x1F;
    if ((a4 & 1) == 0) {
      CA::OGL::DebugRenderer::apply_display_rotation(*((CA::OGL::DebugRenderer **)a2 + 24), (CA::OGL::Context *)v18, a3);
    }
    uint64_t v22 = 0x3C003C003C003C00;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v23 = 0;
    v20[0] = 0;
    long long v21 = 0u;
    LODWORD(v26) = 1065353216;
    WORD2(v26) = 1025;
    v20[1] = &CA::Shape::_infinite_shape;
    v20[0] = CA::OGL::Context::set_gstate((uint64_t)a2, (uint64_t)v20);
    float v15 = CA::OGL::Context::bind_image((uint64_t)a2, 0, *(uint32x2_t **)(v8 + 72), (double *)0x100, 0, 0, 0, 0, 0.0, &v27, 0);
    if (v15)
    {
      uint64_t v16 = v15;
      *((void *)a2 + 102) = v18;
      ++*((_DWORD *)a2 + 64);
      uint64_t v17 = *((void *)a2 + 2);
      *(unsigned char *)(v17 + 480) = 3;
      *(unsigned char *)(v17 + 481) |= 1u;
      *(unsigned char *)(*((void *)a2 + 2) + 16) = 3;
      (*(void (**)(CA::OGL::Context *, uint64_t, unint64_t, void, void, void, unint64_t, void))(*(void *)a2 + 280))(a2, 1, 0xAAAAAAAAAAAAAAABLL * (v6 >> 4), 0, *(void *)(v8 + 48), 0, 0xAAAAAAAAAAAAAAABLL * (v6 >> 4), 0);
      *(unsigned char *)(*((void *)a2 + 2) + 481) &= ~1u;
      *((void *)a2 + 102) = 0;
      ++*((_DWORD *)a2 + 64);
      (*(void (**)(CA::OGL::Context *, _OWORD *, void))(*(void *)a2 + 520))(a2, v16, 0);
    }
    *(unsigned char *)(*((void *)a2 + 2) + 16) = 0;
    return CA::OGL::Context::set_gstate((uint64_t)a2, **((void **)a2 + 31));
  }
  return this;
}

float64_t CA::OGL::DebugRenderer::apply_display_rotation(CA::OGL::DebugRenderer *this, CA::OGL::Context *a2, CA::Transform *a3)
{
  if (this)
  {
    uint64_t v4 = (*(uint64_t (**)(CA::OGL::DebugRenderer *, CA::OGL::Context *, CA::Transform *))(*(void *)this
                                                                                                  + 16))(this, a2, a3);
    if (v4)
    {
      uint64_t v6 = v4;
      if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 696))(v4)) {
        uint64_t v6 = *(void *)(*(void *)(v6 + 48) + 96);
      }
      int v10 = *(unsigned __int8 *)(v6 + 656);
      int v11 = *(_DWORD *)(v6 + 176);
      if (v10 == 3)
      {
        *(_OWORD *)a2 = xmmword_184997D50;
        *((void *)a2 + 2) = 0;
        *((void *)a2 + 3) = 0;
        *((_OWORD *)a2 + 2) = xmmword_184997D60;
        *((_OWORD *)a2 + 3) = 0u;
        *((_OWORD *)a2 + 4) = 0u;
        *((_OWORD *)a2 + 5) = xmmword_184997D50;
        *((double *)a2 + 12) = (double)v11;
        __asm { FMOV            V0.2D, #1.0 }
        *((_OWORD *)a2 + 7) = xmmword_184997D60;
        *((_OWORD *)a2 + 8) = _Q0;
        *((void *)a2 + 13) = 0;
        *((void *)a2 + 14) = 0;
        *((unsigned char *)a2 + 144) &= 0xE0u;
      }
      else
      {
        int v12 = *(_DWORD *)(v6 + 180);
        if (v10 == 2)
        {
          *(_OWORD *)a2 = xmmword_184997D50;
          *((void *)a2 + 2) = 0;
          *((void *)a2 + 3) = 0;
          *((_OWORD *)a2 + 2) = xmmword_184997D60;
          *((_OWORD *)a2 + 3) = 0u;
          *((_OWORD *)a2 + 4) = 0u;
          *((_OWORD *)a2 + 5) = xmmword_184997D50;
          *((double *)a2 + 12) = (double)v11;
          *((double *)a2 + 13) = (double)v12;
          __asm { FMOV            V0.2D, #1.0 }
          *((_OWORD *)a2 + 7) = xmmword_184997D60;
          *((_OWORD *)a2 + 8) = _Q0;
          *((void *)a2 + 14) = 0;
          *((unsigned char *)a2 + 144) &= 0xE0u;
        }
        else
        {
          if (v10 != 1) {
            return result;
          }
          *(_OWORD *)a2 = xmmword_184997D50;
          *((void *)a2 + 2) = 0;
          *((void *)a2 + 3) = 0;
          *((_OWORD *)a2 + 2) = xmmword_184997D60;
          *((_OWORD *)a2 + 3) = 0u;
          *((_OWORD *)a2 + 4) = 0u;
          *((_OWORD *)a2 + 5) = xmmword_184997D50;
          *((void *)a2 + 12) = 0;
          *((double *)a2 + 13) = (double)v12;
          __asm { FMOV            V0.2D, #1.0 }
          *((_OWORD *)a2 + 7) = xmmword_184997D60;
          *((_OWORD *)a2 + 8) = _Q0;
          *((void *)a2 + 14) = 0;
          *((unsigned char *)a2 + 144) &= 0xE0u;
          CA::Transform::rotate90(a2, v7, v8, v9);
        }
        CA::Transform::rotate90(a2, v7, v8, v9);
      }
      return CA::Transform::rotate90(a2, v7, v8, v9);
    }
  }
  return result;
}

double CA::OGL::DebugRenderer::visible_bounds(CA::OGL::DebugRenderer *this, CA::OGL::Context *a2, const CA::Transform *a3, uint64_t a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  *(void *)this = 0;
  int v6 = *(_DWORD *)a2;
  int v5 = *((_DWORD *)a2 + 1);
  int v8 = *((_DWORD *)a2 + 2);
  int v7 = *((_DWORD *)a2 + 3);
  *((_DWORD *)this + 2) = v8;
  *((_DWORD *)this + 3) = v7;
  uint64_t v27 = 0;
  long long v9 = *(_OWORD *)(a4 + 16);
  long long v10 = *(_OWORD *)(a4 + 32);
  long long v11 = *(_OWORD *)(a4 + 48);
  v23[0] = *(_OWORD *)a4;
  v23[1] = v9;
  double v23[2] = v10;
  v23[3] = v11;
  long long v12 = *(_OWORD *)(a4 + 80);
  long long v13 = *(_OWORD *)(a4 + 96);
  long long v14 = *(_OWORD *)(a4 + 112);
  v23[4] = *(_OWORD *)(a4 + 64);
  v23[5] = v12;
  long long v24 = v13;
  long long v25 = v14;
  long long v26 = *(_OWORD *)(a4 + 128);
  LOBYTE(v27) = *(unsigned char *)(a4 + 144) & 0x1F;
  CA::OGL::DebugRenderer::apply_display_rotation(a3, (CA::OGL::Context *)v23, a3);
  char v15 = v27;
  if ((v27 & 8) != 0)
  {
    double v16 = *(double *)&v26;
    int v6 = (int)(*(double *)&v26 * (double)v6);
    int v5 = (int)(*(double *)&v26 * (double)v5);
    int v8 = (int)(*(double *)&v26 * (double)v8);
    *(_DWORD *)this = v6;
    int v7 = (int)(v16 * (double)v7);
    *((_DWORD *)this + 2) = v8;
    *((_DWORD *)this + 3) = v7;
  }
  if ((v15 & 4) != 0)
  {
    int v18 = -v5;
    int v5 = v6;
    int v6 = v18 - v7;
    *((_DWORD *)this + 2) = v7;
    *((_DWORD *)this + 3) = v8;
    int v17 = v8;
  }
  else
  {
    int v17 = v7;
    int v7 = v8;
  }
  if ((v15 & 2) != 0) {
    int v19 = -(v6 + v7);
  }
  else {
    int v19 = v6;
  }
  int v20 = v5 + v17;
  if (v15) {
    int v21 = -v20;
  }
  else {
    int v21 = v5;
  }
  double result = *((double *)&v24 + 1) + (double)v21;
  *(_DWORD *)this = (int)(*(double *)&v24 + (double)v19);
  *((_DWORD *)this + 1) = (int)result;
  return result;
}

uint64_t CA::OGL::DebugRenderer::draw_string(uint64_t this, const char *a2, uint64_t a3)
{
  if (!a2) {
    __assert_rtn("draw_string", "ogl-debug-renderer.cpp", 298, "text");
  }
  float v4 = *(float *)(this + 16);
  float v3 = *(float *)(this + 20);
  unint64_t v5 = *(void *)(this + 64);
  if (v5 + 288 * a3 > *(void *)(this + 56) || a3 == 0)
  {
    float v7 = *(float *)(this + 16);
  }
  else
  {
    do
    {
      unsigned int v9 = *(unsigned __int8 *)a2++;
      unsigned int v8 = v9;
      if (v9 < 0x21)
      {
        switch(v8)
        {
          case 0x20u:
            float v7 = *(float *)(this + 24) + v4;
            break;
          case 0xAu:
            float v7 = *(float *)(this + 16);
            float v3 = *(float *)(this + 20) + (float)(*(float *)(this + 28) * 1.125);
            *(float *)(this + 20) = v3;
            break;
          case 9u:
            float v7 = v4 + (float)(*(float *)(this + 24) * 4.0);
            break;
          default:
            float v7 = v4;
            break;
        }
      }
      else
      {
        if (v5 >= *(void *)(this + 56)) {
          goto LABEL_25;
        }
        float v10 = (float)(int)(v8 - 32) * 0.0068359;
        uint64_t v11 = *(void *)(this + 80);
        float v13 = *(float *)(this + 24);
        float v12 = *(float *)(this + 28);
        *(float *)unint64_t v5 = v4;
        *(float *)(v5 + 4) = v3;
        *(float *)(v5 + 16) = v10;
        *(_DWORD *)(v5 + 20) = 0;
        *(void *)(v5 + 32) = v11;
        unint64_t v15 = *(void *)(this + 56);
        uint64_t v14 = *(void *)(this + 64);
        *(void *)(this + 64) = v14 + 48;
        if (v14 + 48 >= v15) {
          goto LABEL_25;
        }
        float v16 = v12 + v3;
        uint64_t v17 = *(void *)(this + 80);
        *(float *)(v14 + 48) = v4;
        *(float *)(v14 + 52) = v16;
        *(float *)(v14 + 64) = v10;
        *(_DWORD *)(v14 + 68) = 1065353216;
        *(void *)(v14 + 80) = v17;
        unint64_t v19 = *(void *)(this + 56);
        uint64_t v18 = *(void *)(this + 64);
        *(void *)(this + 64) = v18 + 48;
        if (v18 + 48 >= v19) {
          goto LABEL_25;
        }
        float v20 = v10 + 0.0068359;
        float v7 = v13 + v4;
        uint64_t v21 = *(void *)(this + 80);
        *(float *)(v18 + 48) = v13 + v4;
        *(float *)(v18 + 52) = v3;
        *(float *)(v18 + 64) = v10 + 0.0068359;
        *(_DWORD *)(v18 + 68) = 0;
        *(void *)(v18 + 80) = v21;
        unint64_t v23 = *(void *)(this + 56);
        uint64_t v22 = *(void *)(this + 64);
        *(void *)(this + 64) = v22 + 48;
        if (v22 + 48 >= v23) {
          goto LABEL_25;
        }
        uint64_t v24 = *(void *)(this + 80);
        *(float *)(v22 + 48) = v7;
        *(float *)(v22 + 52) = v3;
        *(float *)(v22 + 64) = v20;
        *(_DWORD *)(v22 + 68) = 0;
        *(void *)(v22 + 80) = v24;
        unint64_t v26 = *(void *)(this + 56);
        uint64_t v25 = *(void *)(this + 64);
        *(void *)(this + 64) = v25 + 48;
        if (v25 + 48 >= v26) {
          goto LABEL_25;
        }
        uint64_t v27 = *(void *)(this + 80);
        *(float *)(v25 + 48) = v4;
        *(float *)(v25 + 52) = v16;
        *(float *)(v25 + 64) = v10;
        *(_DWORD *)(v25 + 68) = 1065353216;
        *(void *)(v25 + 80) = v27;
        unint64_t v29 = *(void *)(this + 56);
        uint64_t v28 = *(void *)(this + 64);
        *(void *)(this + 64) = v28 + 48;
        if (v28 + 48 >= v29) {
LABEL_25:
        }
          __assert_rtn("add_vertex", "ogl-debug-renderer.cpp", 245, "_vertices_cur < _vertices_end");
        uint64_t v30 = *(void *)(this + 80);
        *(float *)(v28 + 48) = v7;
        *(float *)(v28 + 52) = v16;
        *(float *)(v28 + 64) = v20;
        *(_DWORD *)(v28 + 68) = 1065353216;
        *(void *)(v28 + 80) = v30;
        unint64_t v5 = *(void *)(this + 64) + 48;
        *(void *)(this + 64) = v5;
      }
      float v4 = v7;
      --a3;
    }
    while (a3);
  }
  *(float *)(this + 16) = v7;
  *(float *)(this + 20) = v3;
  return this;
}

float CA::OGL::DebugRenderer::draw_bar(CA::OGL::DebugRenderer *this, float result)
{
  float64x2_t v2 = (void *)*((void *)this + 8);
  if ((unint64_t)(v2 + 36) <= *((void *)this + 7))
  {
    float v3 = *((float *)this + 7);
    uint64_t v4 = *((void *)this + 10);
    *float64x2_t v2 = *((void *)this + 2);
    _OWORD v2[2] = 1059586048;
    v2[4] = v4;
    unint64_t v6 = *((void *)this + 7);
    uint64_t v5 = *((void *)this + 8);
    *((void *)this + 8) = v5 + 48;
    if (v5 + 48 >= v6) {
      goto LABEL_9;
    }
    uint64_t v7 = *((void *)this + 10);
    float v8 = *((float *)this + 5) + v3;
    *(_DWORD *)(v5 + 48) = *((_DWORD *)this + 4);
    *(float *)(v5 + 52) = v8;
    *(void *)(v5 + 64) = 0x3F8000003F280000;
    *(void *)(v5 + 80) = v7;
    unint64_t v10 = *((void *)this + 7);
    uint64_t v9 = *((void *)this + 8);
    *((void *)this + 8) = v9 + 48;
    if (v9 + 48 >= v10) {
      goto LABEL_9;
    }
    uint64_t v11 = *((void *)this + 10);
    int v12 = *((_DWORD *)this + 5);
    *(float *)(v9 + 48) = *((float *)this + 4) + result;
    *(_DWORD *)(v9 + 52) = v12;
    *(void *)(v9 + 64) = 1059700736;
    *(void *)(v9 + 80) = v11;
    unint64_t v14 = *((void *)this + 7);
    uint64_t v13 = *((void *)this + 8);
    *((void *)this + 8) = v13 + 48;
    if (v13 + 48 >= v14) {
      goto LABEL_9;
    }
    uint64_t v15 = *((void *)this + 10);
    int v16 = *((_DWORD *)this + 5);
    *(float *)(v13 + 48) = *((float *)this + 4) + result;
    *(_DWORD *)(v13 + 52) = v16;
    *(void *)(v13 + 64) = 1059700736;
    *(void *)(v13 + 80) = v15;
    unint64_t v18 = *((void *)this + 7);
    uint64_t v17 = *((void *)this + 8);
    *((void *)this + 8) = v17 + 48;
    if (v17 + 48 >= v18) {
      goto LABEL_9;
    }
    uint64_t v19 = *((void *)this + 10);
    float v20 = *((float *)this + 5) + v3;
    *(_DWORD *)(v17 + 48) = *((_DWORD *)this + 4);
    *(float *)(v17 + 52) = v20;
    *(void *)(v17 + 64) = 0x3F8000003F280000;
    *(void *)(v17 + 80) = v19;
    unint64_t v22 = *((void *)this + 7);
    uint64_t v21 = *((void *)this + 8);
    *((void *)this + 8) = v21 + 48;
    if (v21 + 48 >= v22) {
LABEL_9:
    }
      __assert_rtn("add_vertex", "ogl-debug-renderer.cpp", 245, "_vertices_cur < _vertices_end");
    float v23 = *((float *)this + 5) + v3;
    uint64_t v24 = *((void *)this + 10);
    *(float *)(v21 + 48) = *((float *)this + 4) + result;
    *(float *)(v21 + 52) = v23;
    *(void *)(v21 + 64) = 0x3F8000003F29C000;
    *(void *)(v21 + 80) = v24;
    *((void *)this + 8) += 48;
    double result = *((float *)this + 4) + result;
    *((float *)this + 4) = result;
  }
  return result;
}

double CA::OGL::DebugRenderer::draw_rectangle_with_fill(uint64_t a1, float *a2, double result)
{
  uint64_t v3 = *(void *)(a1 + 64);
  if ((unint64_t)(v3 + 288) <= *(void *)(a1 + 56))
  {
    float v5 = *a2;
    float v4 = a2[1];
    float v7 = *(float *)(a1 + 16);
    float v6 = *(float *)(a1 + 20);
    uint64_t v8 = *(void *)(a1 + 80);
    *(float *)uint64_t v3 = v7;
    *(float *)(v3 + 4) = v6;
    *(void *)(v3 + 16) = 1063141376;
    *(void *)(v3 + 32) = v8;
    unint64_t v10 = *(void *)(a1 + 56);
    uint64_t v9 = *(void *)(a1 + 64);
    *(void *)(a1 + 64) = v9 + 48;
    if (v9 + 48 >= v10) {
      goto LABEL_9;
    }
    float v11 = v4 - v6;
    uint64_t v12 = *(void *)(a1 + 80);
    float v13 = *(float *)(a1 + 20) + v11;
    *(_DWORD *)(v9 + 48) = *(_DWORD *)(a1 + 16);
    *(float *)(v9 + 52) = v13;
    *(void *)(v9 + 64) = 0x3F8000003F5E4000;
    *(void *)(v9 + 80) = v12;
    unint64_t v15 = *(void *)(a1 + 56);
    uint64_t v14 = *(void *)(a1 + 64);
    *(void *)(a1 + 64) = v14 + 48;
    if (v14 + 48 >= v15) {
      goto LABEL_9;
    }
    float v16 = v5 - v7;
    uint64_t v17 = *(void *)(a1 + 80);
    int v18 = *(_DWORD *)(a1 + 20);
    *(float *)(v14 + 48) = *(float *)(a1 + 16) + v16;
    *(_DWORD *)(v14 + 52) = v18;
    *(void *)(v14 + 64) = 1063256064;
    *(void *)(v14 + 80) = v17;
    unint64_t v20 = *(void *)(a1 + 56);
    uint64_t v19 = *(void *)(a1 + 64);
    *(void *)(a1 + 64) = v19 + 48;
    if (v19 + 48 >= v20) {
      goto LABEL_9;
    }
    uint64_t v21 = *(void *)(a1 + 80);
    int v22 = *(_DWORD *)(a1 + 20);
    *(float *)(v19 + 48) = *(float *)(a1 + 16) + v16;
    *(_DWORD *)(v19 + 52) = v22;
    *(void *)(v19 + 64) = 1063256064;
    *(void *)(v19 + 80) = v21;
    unint64_t v24 = *(void *)(a1 + 56);
    uint64_t v23 = *(void *)(a1 + 64);
    *(void *)(a1 + 64) = v23 + 48;
    if (v23 + 48 >= v24) {
      goto LABEL_9;
    }
    uint64_t v25 = *(void *)(a1 + 80);
    float v26 = *(float *)(a1 + 20) + v11;
    *(_DWORD *)(v23 + 48) = *(_DWORD *)(a1 + 16);
    *(float *)(v23 + 52) = v26;
    *(void *)(v23 + 64) = 0x3F8000003F5E4000;
    *(void *)(v23 + 80) = v25;
    unint64_t v28 = *(void *)(a1 + 56);
    uint64_t v27 = *(void *)(a1 + 64);
    *(void *)(a1 + 64) = v27 + 48;
    if (v27 + 48 >= v28) {
LABEL_9:
    }
      __assert_rtn("add_vertex", "ogl-debug-renderer.cpp", 245, "_vertices_cur < _vertices_end");
    float v29 = *(float *)(a1 + 20);
    uint64_t v30 = *(void *)(a1 + 80);
    *(float *)(v27 + 48) = *(float *)(a1 + 16) + v16;
    *(float *)(v27 + 52) = v29 + v11;
    double result = 0.00781250184;
    *(void *)(v27 + 64) = 4575657222471680000;
    *(void *)(v27 + 80) = v30;
    *(void *)(a1 + 64) += 48;
    *(void *)(a1 + 16) = *(void *)a2;
  }
  return result;
}

void *___ZL40getVTPixelTransferSessionCreateSymbolLocv_block_invoke(uint64_t a1)
{
  float64x2_t v2 = (void *)VideoToolboxLibrary();
  double result = dlsym(v2, "VTPixelTransferSessionCreate");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getVTPixelTransferSessionCreateSymbolLoc(void)::ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t VideoToolboxLibrary(void)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!VideoToolboxLibraryCore(char **)::frameworkLibrary)
  {
    v3[1] = MEMORY[0x1E4F143A8];
    uint64_t v3[2] = 3221225472;
    v3[3] = ___ZL23VideoToolboxLibraryCorePPc_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    v3[5] = v3;
    long long v4 = xmmword_1E5273C70;
    uint64_t v5 = 0;
    VideoToolboxLibraryCore(char **)::frameworkLibrarCGFloat y = _sl_dlopen();
    uint64_t v1 = (void *)v3[0];
    uint64_t v0 = VideoToolboxLibraryCore(char **)::frameworkLibrary;
    if (VideoToolboxLibraryCore(char **)::frameworkLibrary)
    {
      if (!v3[0]) {
        return v0;
      }
    }
    else
    {
      uint64_t v1 = (void *)abort_report_np();
    }
    free(v1);
    return v0;
  }
  return VideoToolboxLibraryCore(char **)::frameworkLibrary;
}

void *___ZL73getkVTPixelTransferPropertyKey_EnableHardwareAcceleratedTransferSymbolLocv_block_invoke(uint64_t a1)
{
  float64x2_t v2 = (void *)VideoToolboxLibrary();
  double result = dlsym(v2, "kVTPixelTransferPropertyKey_EnableHardwareAcceleratedTransfer");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkVTPixelTransferPropertyKey_EnableHardwareAcceleratedTransferSymbolLoc(void)::ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t VTSessionSetPropertyFunc(const void *a1, const __CFString *a2, const void *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = 0;
  unint64_t v10 = &v9;
  uint64_t v11 = 0x2020000000;
  uint64_t v6 = (uint64_t (*)(const void *, const __CFString *, const void *))getVTSessionSetPropertySymbolLoc(void)::ptr;
  uint64_t v12 = getVTSessionSetPropertySymbolLoc(void)::ptr;
  if (!getVTSessionSetPropertySymbolLoc(void)::ptr)
  {
    float v7 = (void *)VideoToolboxLibrary();
    _OWORD v10[3] = (uint64_t)dlsym(v7, "VTSessionSetProperty");
    getVTSessionSetPropertySymbolLoc(void)::ptr = (_UNKNOWN *)v10[3];
    uint64_t v6 = (uint64_t (*)(const void *, const __CFString *, const void *))v10[3];
  }
  _Block_object_dispose(&v9, 8);
  if (!v6)
  {
    dlerror();
    abort_report_np();
    __break(1u);
  }
  return v6(a1, a2, a3);
}

void sub_184863780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *___ZL68getkVTPixelTransferPropertyKey_EnableGPUAcceleratedTransferSymbolLocv_block_invoke(uint64_t a1)
{
  float64x2_t v2 = (void *)VideoToolboxLibrary();
  double result = dlsym(v2, "kVTPixelTransferPropertyKey_EnableGPUAcceleratedTransfer");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkVTPixelTransferPropertyKey_EnableGPUAcceleratedTransferSymbolLoc(void)::ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                                              + 24);
  return result;
}

void *___ZL62getkVTPixelTransferPropertyKey_EnableSoftwareTransferSymbolLocv_block_invoke(uint64_t a1)
{
  float64x2_t v2 = (void *)VideoToolboxLibrary();
  double result = dlsym(v2, "kVTPixelTransferPropertyKey_EnableSoftwareTransfer");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkVTPixelTransferPropertyKey_EnableSoftwareTransferSymbolLoc(void)::ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                                        + 24);
  return result;
}

void *___ZL48getkVTPixelTransferPropertyKey_RealTimeSymbolLocv_block_invoke(uint64_t a1)
{
  float64x2_t v2 = (void *)VideoToolboxLibrary();
  double result = dlsym(v2, "kVTPixelTransferPropertyKey_RealTime");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkVTPixelTransferPropertyKey_RealTimeSymbolLoc(void)::ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                          + 24);
  return result;
}

void *___ZL63getkVTPixelTransferPropertyKey_EnableHighSpeedTransferSymbolLocv_block_invoke(uint64_t a1)
{
  float64x2_t v2 = (void *)VideoToolboxLibrary();
  double result = dlsym(v2, "kVTPixelTransferPropertyKey_EnableHighSpeedTransfer");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkVTPixelTransferPropertyKey_EnableHighSpeedTransferSymbolLoc(void)::ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                                         + 24);
  return result;
}

void *___ZL71getkVTPixelTransferPropertyKey_WriteBlackPixelsOutsideDestRectSymbolLocv_block_invoke(uint64_t a1)
{
  float64x2_t v2 = (void *)VideoToolboxLibrary();
  double result = dlsym(v2, "kVTPixelTransferPropertyKey_WriteBlackPixelsOutsideDestRect");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkVTPixelTransferPropertyKey_WriteBlackPixelsOutsideDestRectSymbolLoc(void)::ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                                                 + 24);
  return result;
}

void *___ZL56getkVTPixelTransferPropertyKey_DownsamplingModeSymbolLocv_block_invoke(uint64_t a1)
{
  float64x2_t v2 = (void *)VideoToolboxLibrary();
  double result = dlsym(v2, "kVTPixelTransferPropertyKey_DownsamplingMode");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkVTPixelTransferPropertyKey_DownsamplingModeSymbolLoc(void)::ptr = *(void *)(*(void *)(*(void *)(a1 + 32)
                                                                                              + 8)
                                                                                  + 24);
  return result;
}

void *___ZL39getkVTDownsamplingMode_AverageSymbolLocv_block_invoke(uint64_t a1)
{
  float64x2_t v2 = (void *)VideoToolboxLibrary();
  double result = dlsym(v2, "kVTDownsamplingMode_Average");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkVTDownsamplingMode_AverageSymbolLoc(void)::ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *___ZL61getkVTPixelTransferPropertyKey_DestinationICCProfileSymbolLocv_block_invoke(uint64_t a1)
{
  float64x2_t v2 = (void *)VideoToolboxLibrary();
  double result = dlsym(v2, "kVTPixelTransferPropertyKey_DestinationICCProfile");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkVTPixelTransferPropertyKey_DestinationICCProfileSymbolLoc(void)::ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                                       + 24);
  return result;
}

void *___ZL62getkVTPixelTransferPropertyKey_DestinationYCbCrMatrixSymbolLocv_block_invoke(uint64_t a1)
{
  float64x2_t v2 = (void *)VideoToolboxLibrary();
  double result = dlsym(v2, "kVTPixelTransferPropertyKey_DestinationYCbCrMatrix");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkVTPixelTransferPropertyKey_DestinationYCbCrMatrixSymbolLoc(void)::ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                                        + 24);
  return result;
}

void *___ZL32getVTSessionSetPropertySymbolLocv_block_invoke(uint64_t a1)
{
  float64x2_t v2 = (void *)VideoToolboxLibrary();
  double result = dlsym(v2, "VTSessionSetProperty");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getVTSessionSetPropertySymbolLoc(void)::ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t ___ZL23VideoToolboxLibraryCorePPc_block_invoke()
{
  uint64_t result = _sl_dlopen();
  VideoToolboxLibraryCore(char **)::frameworkLibrarCGFloat y = result;
  return result;
}

void *___ZL44getVTPixelTransferSessionInvalidateSymbolLocv_block_invoke(uint64_t a1)
{
  float64x2_t v2 = (void *)VideoToolboxLibrary();
  uint64_t result = dlsym(v2, "VTPixelTransferSessionInvalidate");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getVTPixelTransferSessionInvalidateSymbolLoc(void)::ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void CA::VideoToolbox::~VideoToolbox(CFTypeRef *this)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  CFTypeRef v2 = *this;
  if (*this)
  {
    uint64_t v5 = 0;
    uint64_t v6 = &v5;
    uint64_t v7 = 0x2020000000;
    uint64_t v3 = (void (*)(CFTypeRef))getVTPixelTransferSessionInvalidateSymbolLoc(void)::ptr;
    uint64_t v8 = getVTPixelTransferSessionInvalidateSymbolLoc(void)::ptr;
    if (!getVTPixelTransferSessionInvalidateSymbolLoc(void)::ptr)
    {
      long long v4 = (void *)VideoToolboxLibrary();
      v6[3] = (uint64_t)dlsym(v4, "VTPixelTransferSessionInvalidate");
      getVTPixelTransferSessionInvalidateSymbolLoc(void)::ptr = (_UNKNOWN *)v6[3];
      uint64_t v3 = (void (*)(CFTypeRef))v6[3];
    }
    _Block_object_dispose(&v5, 8);
    if (!v3)
    {
      dlerror();
      abort_report_np();
    }
    v3(v2);
    CFRelease(*this);
  }
}

void sub_184863CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void CA::VideoToolbox::copy_surface(OpaqueVTPixelTransferSession **this, __IOSurface *a2, __IOSurface *a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  CVPixelBufferRef pixelBufferOut = 0;
  CVReturn v5 = CVPixelBufferCreateWithIOSurface(0, a2, 0, &pixelBufferOut);
  if (v5)
  {
    CVReturn v6 = v5;
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v7 = x_log_category_utilities;
      if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v6;
        _os_log_impl(&dword_184668000, v7, OS_LOG_TYPE_ERROR, "CVPixelBufferCreateWithIOSurface failed (src): %d", buf, 8u);
      }
    }
  }
  *(void *)long long buf = 0;
  CVReturn v8 = CVPixelBufferCreateWithIOSurface(0, a3, 0, (CVPixelBufferRef *)buf);
  if (v8)
  {
    CVReturn v9 = v8;
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      unint64_t v10 = x_log_category_utilities;
      if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)unint64_t v20 = 67109120;
        CVReturn v21 = v9;
        _os_log_impl(&dword_184668000, v10, OS_LOG_TYPE_ERROR, "CVPixelBufferCreateWithIOSurface failed (dst): %d", v20, 8u);
      }
    }
  }
  if (pixelBufferOut)
  {
    if (*(void *)buf)
    {
      CVReturn v11 = VTPixelTransferSessionTransferImageFunc(*this, pixelBufferOut, *(__CVBuffer **)buf);
      if (v11)
      {
        CVReturn v12 = v11;
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          uint64_t v13 = x_log_category_utilities;
          if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)unint64_t v20 = 67109120;
            CVReturn v21 = v12;
            _os_log_impl(&dword_184668000, v13, OS_LOG_TYPE_ERROR, "VTPixelTransferSessionTransferImage failed: %d", v20, 8u);
          }
        }
      }
    }
  }
  if (*((unsigned char *)this + 8))
  {
    uint64_t v14 = pixelBufferOut;
    if (pixelBufferOut)
    {
      unint64_t v15 = *(__CVBuffer **)buf;
      if (*(void *)buf)
      {
        *((unsigned char *)this + 8) = 0;
        CVReturn v16 = VTPixelTransferSessionTransferImageFunc(*this, v14, v15);
        if (v16)
        {
          CVReturn v17 = v16;
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            int v18 = x_log_category_utilities;
            if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)unint64_t v20 = 67109120;
              CVReturn v21 = v17;
              _os_log_impl(&dword_184668000, v18, OS_LOG_TYPE_ERROR, "VTPixelTransferSessionTransferImage failed: %d", v20, 8u);
            }
          }
        }
      }
    }
  }
  CVPixelBufferRelease(pixelBufferOut);
  CVPixelBufferRelease(*(CVPixelBufferRef *)buf);
}

uint64_t VTPixelTransferSessionTransferImageFunc(OpaqueVTPixelTransferSession *a1, __CVBuffer *a2, __CVBuffer *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = 0;
  unint64_t v10 = &v9;
  uint64_t v11 = 0x2020000000;
  CVReturn v6 = (uint64_t (*)(OpaqueVTPixelTransferSession *, __CVBuffer *, __CVBuffer *))getVTPixelTransferSessionTransferImageSymbolLoc(void)::ptr;
  CVReturn v12 = getVTPixelTransferSessionTransferImageSymbolLoc(void)::ptr;
  if (!getVTPixelTransferSessionTransferImageSymbolLoc(void)::ptr)
  {
    uint64_t v7 = (void *)VideoToolboxLibrary();
    _OWORD v10[3] = (uint64_t)dlsym(v7, "VTPixelTransferSessionTransferImage");
    getVTPixelTransferSessionTransferImageSymbolLoc(void)::ptr = (_UNKNOWN *)v10[3];
    CVReturn v6 = (uint64_t (*)(OpaqueVTPixelTransferSession *, __CVBuffer *, __CVBuffer *))v10[3];
  }
  _Block_object_dispose(&v9, 8);
  if (!v6)
  {
    dlerror();
    abort_report_np();
    __break(1u);
  }
  return v6(a1, a2, a3);
}

void sub_1848640D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *___ZL47getVTPixelTransferSessionTransferImageSymbolLocv_block_invoke(uint64_t a1)
{
  CFTypeRef v2 = (void *)VideoToolboxLibrary();
  uint64_t result = dlsym(v2, "VTPixelTransferSessionTransferImage");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getVTPixelTransferSessionTransferImageSymbolLoc(void)::ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                            + 24);
  return result;
}

void sil_mgr_instance(void *a1, uint64_t a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  {
    sil_mgr_instance(void *,unsigned int)::pending_sil = 0;
  }
  if (g_sil_mgr_inst) {
    return;
  }
  uint64_t v4 = sil_mgr_instance(void *,unsigned int)::pending_sil;
  if (sil_mgr_instance(void *,unsigned int)::pending_sil)
  {
    v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    uint64_t m = (std::mutex *)(v4 + 24);
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v4 + 24);
    *(void *)&__lk.__owns_ = 1;
    std::mutex::lock((std::mutex *)(v4 + 24));
    unsigned int v7 = *(_DWORD *)(v4 + 136);
    if ((v7 & 8) != 0)
    {
      int v19 = 2;
      goto LABEL_57;
    }
    if ((v7 & 4) != 0)
    {
      int v19 = ((v7 >> 2) & 1) == 0;
      goto LABEL_57;
    }
    while (1)
    {
      if (std::chrono::steady_clock::now().__d_.__rep_ >= v5.__d_.__rep_)
      {
        unsigned int v12 = *(_DWORD *)(v4 + 136);
LABEL_55:
        int v19 = ((v12 >> 2) & 1) == 0;
        if (__lk.__owns_)
        {
          uint64_t m = __lk.__m_;
LABEL_57:
          std::mutex::unlock(m);
        }
        if (!v19)
        {
          float v26 = (std::__assoc_sub_state *)sil_mgr_instance(void *,unsigned int)::pending_sil;
          sil_mgr_instance(void *,unsigned int)::pending_sil = 0;
          __lk.__m_ = &v26->__mut_;
          *(void *)&__lk.__owns_ = 1;
          std::mutex::lock(&v26->__mut_);
          std::__assoc_sub_state::__sub_wait(v26, &__lk);
          ptr = v26->__exception_.__ptr_;
          v30.__ptr_ = 0;
          std::exception_ptr::~exception_ptr(&v30);
          if (ptr)
          {
            std::exception_ptr::exception_ptr(&v30, &v26->__exception_);
            v29.__ptr_ = &v30;
            std::rethrow_exception(v29);
            __break(1u);
          }
          else
          {
            uint64_t v28 = (uint64_t)v26[1].__vftable;
            if (__lk.__owns_) {
              std::mutex::unlock(__lk.__m_);
            }
            if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
              ((void (*)(std::__assoc_sub_state *))v26->__on_zero_shared)(v26);
            }
            g_sil_mgr_inst = v28;
            if (!v28)
            {
              x_log_crash("Failed to create SILManager, aborting...");
              abort();
            }
          }
        }
        return;
      }
      if (v5.__d_.__rep_ > std::chrono::steady_clock::now().__d_.__rep_) {
        break;
      }
LABEL_23:
      unsigned int v12 = *(_DWORD *)(v4 + 136);
      if ((v12 & 4) != 0) {
        goto LABEL_55;
      }
    }
    v8.__d_.__rep_ = v5.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
    if (v8.__d_.__rep_ < 1)
    {
LABEL_22:
      std::chrono::steady_clock::now();
      goto LABEL_23;
    }
    std::chrono::steady_clock::now();
    v9.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (v9.__d_.__rep_)
    {
      if (v9.__d_.__rep_ < 1)
      {
        if ((unint64_t)v9.__d_.__rep_ < 0xFFDF3B645A1CAC09)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v10 = 0x8000000000000000;
          goto LABEL_20;
        }
      }
      else if ((unint64_t)v9.__d_.__rep_ > 0x20C49BA5E353F7)
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v10 = 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_18;
      }
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v10 = 1000 * v9.__d_.__rep_;
    }
    else
    {
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v10 = 0;
    }
LABEL_18:
    if (v10 > (v8.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
    {
      v11.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_21:
      std::condition_variable::__do_timed_wait((std::condition_variable *)(v4 + 88), &__lk, v11);
      std::chrono::steady_clock::now();
      goto LABEL_22;
    }
LABEL_20:
    v11.__d_.__rep_ = v10 + v8.__d_.__rep_;
    goto LABEL_21;
  }
  if (MEMORY[0x1E4F97AC8]) {
    BOOL v13 = MEMORY[0x1E4F97B10] == 0;
  }
  else {
    BOOL v13 = 1;
  }
  if (!v13
    && MEMORY[0x1E4F97B08] != 0
    && MEMORY[0x1E4F97B28] != 0
    && MEMORY[0x1E4F97AD0] != 0
    && MEMORY[0x1E4F97AE0] != 0
    && MEMORY[0x1E4F97B00] != 0)
  {
    unint64_t v20 = (void *)MEMORY[0x185324A30]();
    id v21 = (id)objc_opt_new();
    uint64_t v22 = *MEMORY[0x1E4F97B60];
    [v21 setObject:&unk_1ED057720 forKeyedSubscript:*MEMORY[0x1E4F97B60]];
    if (CADeviceSupportsMedina::once[0] != -1) {
      dispatch_once(CADeviceSupportsMedina::once, &__block_literal_global_314);
    }
    if (!CADeviceSupportsMedina::medina)
    {
      if (!a1)
      {
        return;
      }
      uint64_t v23 = [MEMORY[0x1E4F29238] valueWithPointer:a1];
      [v21 setObject:v23 forKeyedSubscript:*MEMORY[0x1E4F97B68]];
      uint64_t v24 = [NSNumber numberWithUnsignedInt:a2];
      [v21 setObject:v24 forKeyedSubscript:*MEMORY[0x1E4F97B70]];
      [v21 setObject:&unk_1ED057738 forKeyedSubscript:v22];
    }
    id v25 = v21;
    operator new();
  }
}

void sub_18486470C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, char a11)
{
  std::mutex::unlock(v13);
  if (!atomic_fetch_add(v14, 0xFFFFFFFFFFFFFFFFLL)) {
    (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
  }
  _Unwind_Resume(a1);
}

uint64_t **std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<SILManager *,std::__async_func<sil_mgr_instance(void *,unsigned int)::$_0,NSMutableDictionary *>>::*)(void),std::__async_assoc_state<SILManager *,std::__async_func<sil_mgr_instance(void *,unsigned int)::$_0,NSMutableDictionary *>>*>>::~unique_ptr[abi:nn180100](uint64_t **a1)
{
  CFTypeRef v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *v2;
    *CFTypeRef v2 = 0;
    if (v3)
    {
      uint64_t v4 = MEMORY[0x185323C20]();
      MEMORY[0x185323DC0](v4, 0x20C4093837F09);
    }
    MEMORY[0x185323DC0](v2, 0xA0C40F20CD8FBLL);
  }
  return a1;
}

uint64_t std::__throw_future_error[abi:nn180100]()
{
  return std::__thread_proxy[abi:nn180100]<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<SILManager *,std::__async_func<sil_mgr_instance(void *,unsigned int)::$_0,NSMutableDictionary *>>::*)(void),std::__async_assoc_state<SILManager *,std::__async_func<sil_mgr_instance(void *,unsigned int)::$_0,NSMutableDictionary *>>*>>();
}

uint64_t std::__thread_proxy[abi:nn180100]<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<SILManager *,std::__async_func<sil_mgr_instance(void *,unsigned int)::$_0,NSMutableDictionary *>>::*)(void),std::__async_assoc_state<SILManager *,std::__async_func<sil_mgr_instance(void *,unsigned int)::$_0,NSMutableDictionary *>>*>>(uint64_t *a1)
{
  v7[1] = *(uint64_t **)MEMORY[0x1E4F143B8];
  v7[0] = a1;
  uint64_t v1 = std::__thread_local_data();
  CFTypeRef v2 = (const void *)*v7[0];
  *v7[0] = 0;
  pthread_setspecific(v1->__key_, v2);
  uint64_t v3 = (void (*)(void *))v7[0][1];
  uint64_t v4 = v7[0][2];
  std::chrono::steady_clock::time_point v5 = (void *)(v7[0][3] + (v4 >> 1));
  if (v4) {
    uint64_t v3 = *(void (**)(void *))(*v5 + v3);
  }
  v3(v5);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<SILManager *,std::__async_func<sil_mgr_instance(void *,unsigned int)::$_0,NSMutableDictionary *>>::*)(void),std::__async_assoc_state<SILManager *,std::__async_func<sil_mgr_instance(void *,unsigned int)::$_0,NSMutableDictionary *>>*>>::~unique_ptr[abi:nn180100](v7);
  return 0;
}

void sub_184864980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
}

uint64_t std::__assoc_sub_state::__execute(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

void std::__async_assoc_state<SILManager *,std::__async_func<sil_mgr_instance(void *,unsigned int)::$_0,NSMutableDictionary *>>::__execute(uint64_t a1)
{
  v5[1] = *(std::exception_ptr *)MEMORY[0x1E4F143B8];
  CFTypeRef v2 = *(void **)(a1 + 152);
  uint64_t v3 = SILManagerCreate();
  if (v3) {
    atexit((void (*)(void))cleanup_stale_indicators);
  }

  std::mutex::lock((std::mutex *)(a1 + 24));
  if ((*(unsigned char *)(a1 + 136) & 1) != 0
    || (v5[0].__ptr_ = 0, uint64_t v4 = *(void *)(a1 + 16), std::exception_ptr::~exception_ptr(v5), v4))
  {
    std::__throw_future_error[abi:nn180100]();
    __break(1u);
  }
  *(void *)(a1 + 144) = v3;
  *(_DWORD *)(a1 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
  std::mutex::unlock((std::mutex *)(a1 + 24));
}

void sub_184864A94(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t cleanup_stale_indicators(void)
{
  if (!g_sil_mgr_inst) {
    __assert_rtn("cleanup_stale_indicators", "windowserver-secure-indicators.mm", 81, "g_sil_mgr_inst");
  }
  return SILManagerTurnOffRegions();
}

uint64_t std::__async_assoc_state<SILManager *,std::__async_func<sil_mgr_instance(void *,unsigned int)::$_0,NSMutableDictionary *>>::__on_zero_shared(std::__assoc_sub_state *a1)
{
  std::__assoc_sub_state::wait(a1);
  CFTypeRef v2 = a1->~__assoc_sub_state_0;

  return ((uint64_t (*)(std::__assoc_sub_state *))v2)(a1);
}

void std::__async_assoc_state<SILManager *,std::__async_func<sil_mgr_instance(void *,unsigned int)::$_0,NSMutableDictionary *>>::~__async_assoc_state(uint64_t a1)
{
  *(void *)a1 = MEMORY[0x1E4FBA480] + 16;
  CFTypeRef v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);

  JUMPOUT(0x185323DC0);
}

{
  std::exception_ptr *v2;
  uint64_t vars8;

  *(void *)a1 = MEMORY[0x1E4FBA480] + 16;
  CFTypeRef v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);

  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void std::vector<std::pair<unsigned int,std::vector<CA::Vec2<float>>>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  CFTypeRef v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<unsigned int,std::vector<CA::Vec2<float>>>>::__clear[abi:nn180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::pair<unsigned int,std::vector<CA::Vec2<float>>>>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 32)
  {
    uint64_t v4 = *(void **)(i - 24);
    if (v4)
    {
      *(void *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

BOOL CA::WindowServer::SILMgr::set_power(CA::WindowServer::SILMgr *this, int a2, int a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    CVReturn v6 = x_log_category_secure_indicators;
    if (os_log_type_enabled((os_log_t)x_log_category_secure_indicators, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = a2;
      LOWORD(v16) = 1024;
      *(_DWORD *)((char *)&v16 + 2) = a3;
      _os_log_impl(&dword_184668000, v6, OS_LOG_TYPE_INFO, "SILMgr::set_power %u sync : %u", buf, 0xEu);
    }
  }
  if ((a2 & 1) == 0) {
    CA::WindowServer::SILMgr::turn_off_all_regions((CA::WindowServer::SILMgr *)buf, (uint64_t)this, 1);
  }
  uint64_t v7 = *(void *)this;
  if ((a3 & 1) != 0 || !MEMORY[0x1E4F97B20])
  {
    if (*((unsigned char *)this + 132))
    {
      uint64_t v11 = 0;
      uint64_t v12 = &v11;
      uint64_t v13 = 0x2020000000;
      int v14 = 0;
      *(void *)long long buf = MEMORY[0x1E4F143A8];
      uint64_t v16 = 3221225472;
      CVReturn v17 = ___ZL19_SILManagerSetPowerP10SILManagerbb_block_invoke;
      int v18 = &unk_1E5273CA8;
      int v19 = &v11;
      uint64_t v20 = v7;
      char v21 = a2;
      BMMonitorBlockExecutionWithSignature();
      goto LABEL_13;
    }
    unsigned int v9 = SILManagerSetPower();
LABEL_16:
    unsigned int v8 = v9;
    return v8 < 0x200;
  }
  if (!*((unsigned char *)this + 132))
  {
    unsigned int v9 = SILManagerTrySetPower();
    goto LABEL_16;
  }
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2020000000;
  int v14 = 0;
  *(void *)long long buf = MEMORY[0x1E4F143A8];
  uint64_t v16 = 3221225472;
  CVReturn v17 = ___ZL22_SILManagerTrySetPowerP10SILManagerbb_block_invoke;
  int v18 = &unk_1E5273CA8;
  int v19 = &v11;
  uint64_t v20 = v7;
  char v21 = a2;
  BMMonitorBlockExecutionWithSignature();
LABEL_13:
  unsigned int v8 = *((_DWORD *)v12 + 6);
  _Block_object_dispose(&v11, 8);
  return v8 < 0x200;
}

void sub_184864F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void CA::WindowServer::SILMgr::turn_off_all_regions(CA::WindowServer::SILMgr *this, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (_SILManagerTurnOffRegions(*(void *)a2, 15, a3, *(unsigned __int8 *)(a2 + 132)) >= 0x200)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      uint64_t v11 = x_log_category_secure_indicators;
      if (os_log_type_enabled((os_log_t)x_log_category_secure_indicators, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t v13 = 0;
        _os_log_impl(&dword_184668000, v11, OS_LOG_TYPE_ERROR, "Failed to turn off all regions !", v13, 2u);
      }
    }
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
    for (uint64_t i = 12; i != 108; i += 24)
      *(_DWORD *)((char *)this + i) = -1082130432;
  }
  else
  {
    if (MEMORY[0x1E4F97B18]) {
      SILManagerSwapEnd();
    }
    uint64_t v5 = 0;
    long long v6 = *(_OWORD *)(a2 + 72);
    *((_OWORD *)this + 2) = *(_OWORD *)(a2 + 56);
    *((_OWORD *)this + 3) = v6;
    long long v7 = *(_OWORD *)(a2 + 104);
    *((_OWORD *)this + 4) = *(_OWORD *)(a2 + 88);
    *((_OWORD *)this + 5) = v7;
    long long v8 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)this = *(_OWORD *)(a2 + 24);
    *((_OWORD *)this + 1) = v8;
    do
    {
      uint64_t v9 = a2 + v5;
      uint64_t v10 = *(void *)(a2 + 16);
      if (v10)
      {
        if (*(float *)(v9 + 36) > 0.0) {
          (*(void (**)(uint64_t, void, void, void))(v10 + 16))(v10, 0, *(unsigned int *)(v9 + 24), 0);
        }
      }
      *(_DWORD *)(v9 + 36) = -1082130432;
      v5 += 24;
    }
    while (v5 != 96);
    *(_WORD *)(a2 + 128) = 0;
  }
}

uint64_t ___ZL22_SILManagerTrySetPowerP10SILManagerbb_block_invoke(uint64_t a1)
{
  uint64_t result = SILManagerTrySetPower();
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t ___ZL19_SILManagerSetPowerP10SILManagerbb_block_invoke(uint64_t a1)
{
  uint64_t result = SILManagerSetPower();
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t _SILManagerTurnOffRegions(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (!a4) {
    return SILManagerTurnOffRegions();
  }
  uint64_t v6 = 0;
  long long v7 = &v6;
  uint64_t v8 = 0x2020000000;
  int v9 = 0;
  BMMonitorBlockExecutionWithSignature();
  uint64_t v4 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v4;
}

void sub_184865234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZL25_SILManagerTurnOffRegionsP10SILManagerjbb_block_invoke(uint64_t a1)
{
  uint64_t result = SILManagerTurnOffRegions();
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t CA::WindowServer::SILMgr::swap_region(uint64_t a1, unsigned int a2, long long *a3, unsigned char *a4, BOOL *a5)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  long long v13 = *a3;
  uint64_t v14 = *((void *)a3 + 2);
  uint64_t v6 = CA::WindowServer::SILMgr::swap_region_private((uint64_t *)a1, a2, (unsigned int *)&v13, a4, a5);
  if (v6
    && *(unsigned char *)(a1 + 128)
    && *(unsigned __int8 *)(a1 + 129) > *(unsigned __int8 *)(a1 + 128))
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      long long v7 = x_log_category_secure_indicators;
      if (os_log_type_enabled((os_log_t)x_log_category_secure_indicators, OS_LOG_TYPE_INFO))
      {
        int v8 = *(unsigned __int8 *)(a1 + 128);
        int v9 = *(unsigned __int8 *)(a1 + 129);
        *(_DWORD *)long long buf = 67109376;
        int v16 = v8;
        __int16 v17 = 1024;
        int v18 = v9;
        _os_log_impl(&dword_184668000, v7, OS_LOG_TYPE_INFO, "visible regions %u active regions %u. turning off invisible regions", buf, 0xEu);
      }
    }
    uint64_t v10 = 0;
    uint64_t v11 = (float *)(a1 + 36);
    do
    {
      if (*v11 == 0.0) {
        CA::WindowServer::SILMgr::turn_off_region((CA::WindowServer::SILMgr *)a1, v10);
      }
      ++v10;
      v11 += 6;
    }
    while (v10 != 4);
  }
  return v6;
}

uint64_t CA::WindowServer::SILMgr::swap_region_private(uint64_t *a1, unsigned int a2, unsigned int *a3, unsigned char *a4, BOOL *a5)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  if (*((float *)a3 + 3) < 0.0) {
    __assert_rtn("swap_region_private", "windowserver-secure-indicators.mm", 394, "state.opacity >= 0.0f");
  }
  if (a2 > 3) {
    return 0;
  }
  if (MEMORY[0x1E4F97AD8])
  {
    unsigned int v10 = SILManagerIndicatorExtent();
    if (!v10)
    {
      if (x_log_hook_p()) {
        goto LABEL_22;
      }
      uint64_t v26 = x_log_category_secure_indicators;
      if (!os_log_type_enabled((os_log_t)x_log_category_secure_indicators, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
      int v27 = *a3;
      int v28 = *((unsigned __int16 *)a3 + 10);
      *(_DWORD *)long long buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v27;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v28;
      uint64_t v23 = "Failure to query indicator extent for indicator: %u frame: %u";
      uint64_t v24 = v26;
      uint32_t v25 = 14;
      goto LABEL_29;
    }
  }
  else
  {
    unsigned int v10 = 20;
  }
  float v12 = *((float *)a3 + 1);
  float v11 = *((float *)a3 + 2);
  double v13 = (double)v10 * 0.5;
  float v14 = round(v13 + v12);
  float v15 = round(v13 + v11);
  BOOL v16 = v14 < (float)v10 || v15 < (float)v10;
  if (v16 || v14 >= (float)*((int *)a1 + 30) || v15 >= (float)*((int *)a1 + 31))
  {
    if (x_log_hook_p())
    {
LABEL_22:
      x_log_();
      return 0;
    }
    uint64_t v20 = x_log_category_secure_indicators;
    if (!os_log_type_enabled((os_log_t)x_log_category_secure_indicators, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    int v21 = *((_DWORD *)a1 + 30);
    int v22 = *((_DWORD *)a1 + 31);
    *(_DWORD *)long long buf = 134218752;
    *(double *)&uint8_t buf[4] = v14;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = v15;
    *(_WORD *)&buf[22] = 1024;
    *(_DWORD *)int64x2_t v58 = v21;
    *(_WORD *)&v58[4] = 1024;
    *(_DWORD *)&v58[6] = v22;
    uint64_t v23 = "Region swapped outside of display bounds [%f %f] outside of [%d %d]";
    uint64_t v24 = v20;
    uint32_t v25 = 34;
LABEL_29:
    _os_log_impl(&dword_184668000, v24, OS_LOG_TYPE_ERROR, v23, buf, v25);
    return 0;
  }
  __int16 v17 = a1 + 3;
  uint64_t v18 = (uint64_t)&a1[3 * a2 + 3];
  if (*a3 == *(_DWORD *)v18
    && *((unsigned __int16 *)a3 + 10) == WORD2(v17[3 * a2 + 2])
    && vabds_f32(v12, *((float *)&v17[3 * a2] + 1)) < 0.001
    && vabds_f32(v11, *(float *)&v17[3 * a2 + 1]) < 0.001
    && vabds_f32(*((float *)a3 + 3), *((float *)&v17[3 * a2 + 1] + 1)) < 0.001
    && vabds_f32(*((float *)a3 + 4), *(float *)&v17[3 * a2 + 2]) < 0.001)
  {
    return 1;
  }
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    std::exception_ptr v30 = x_log_category_secure_indicators;
    if (os_log_type_enabled((os_log_t)x_log_category_secure_indicators, OS_LOG_TYPE_INFO))
    {
      float v31 = *(float *)a3;
      double v32 = *((float *)a3 + 1);
      double v33 = *((float *)a3 + 2);
      double v34 = *((float *)a3 + 3);
      double v35 = *((float *)a3 + 4);
      *(_DWORD *)long long buf = 67110400;
      *(_DWORD *)&uint8_t buf[4] = a2;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(float *)&buf[10] = v31;
      *(_WORD *)&buf[14] = 2048;
      *(double *)&uint8_t buf[16] = v32;
      *(_WORD *)int64x2_t v58 = 2048;
      *(double *)&v58[2] = v33;
      *(_WORD *)&v58[10] = 2048;
      *(double *)&v58[12] = v34;
      *(_WORD *)&v58[20] = 2048;
      *(double *)&v58[22] = v35;
      _os_log_impl(&dword_184668000, v30, OS_LOG_TYPE_INFO, "SILMgr::swap_region_private region: %u indicator %u pos: [%f %f] opacity: %f rotation: %f", buf, 0x36u);
    }
  }
  int32x4_t v55 = 0uLL;
  int v56 = 0;
  uint64_t v54 = a2;
  int32x4_t v36 = vrev64q_s32(*(int32x4_t *)(a3 + 1));
  v36.i64[0] = *(void *)(a3 + 1);
  HIDWORD(v54) = *a3;
  int32x4_t v55 = v36;
  LOWORD(v56) = *((_WORD *)a3 + 10);
  uint64_t v37 = *a1;
  if (*((unsigned char *)a1 + 132))
  {
    uint64_t v50 = 0;
    int32x2_t v51 = &v50;
    uint64_t v52 = 0x2020000000;
    int v53 = 0;
    *(void *)long long buf = MEMORY[0x1E4F143A8];
    *(void *)&uint8_t buf[8] = 3221225472;
    *(void *)&uint8_t buf[16] = ___ZL15_SILManagerSwapP10SILManagerPK18SILManagerSwapInfob_block_invoke;
    *(void *)int64x2_t v58 = &unk_1E5273CD0;
    *(void *)&v58[8] = &v50;
    *(void *)&v58[16] = v37;
    *(void *)&v58[24] = &v54;
    BMMonitorBlockExecutionWithSignature();
    unsigned int v38 = *((_DWORD *)v51 + 6);
    _Block_object_dispose(&v50, 8);
  }
  else
  {
    unsigned int v38 = SILManagerSwap();
  }
  BOOL v19 = v38 < 0x200;
  if (v38 >= 0x200)
  {
    kdebug_trace();
    if (a5) {
      *a5 = v38 == 520;
    }
    if (v38 == 522 && *((float *)&v17[3 * a2 + 1] + 1) >= 0.0) {
      CA::WindowServer::SILMgr::turn_off_region((CA::WindowServer::SILMgr *)a1, a2);
    }
  }
  else
  {
    if (a4) {
      *a4 = 1;
    }
    if (*((unsigned char *)a1 + 133) && *((float *)a3 + 3) > 0.0) {
      CA::WindowServer::SILMgr::record_swap_position(a1, *a3, *((float *)a3 + 1), *((float *)a3 + 2));
    }
    *((unsigned char *)a1 + 131) = 1;
    float v41 = *((float *)&v17[3 * a2 + 1] + 1);
    if (v41 == -1.0) {
      ++*((unsigned char *)a1 + 129);
    }
    float v42 = *((float *)a3 + 3);
    BOOL v43 = v42 > 0.0;
    BOOL v44 = v41 <= 0.0;
    unsigned __int8 v45 = *((unsigned char *)a1 + 128);
    if (v44 == v43)
    {
      if (v42 > 0.0) {
        ++v45;
      }
      else {
        --v45;
      }
      *((unsigned char *)a1 + 128) = v45;
      if (v45 > 4u || (unsigned int v46 = *((unsigned __int8 *)a1 + 129), v46 >= 5)) {
        __assert_rtn("swap_region_private", "windowserver-secure-indicators.mm", 478, "_visible_regions_count <= kSILManagerRegionCount && _active_regions_count <= kSILManagerRegionCount");
      }
    }
    else
    {
      unsigned int v46 = *((unsigned __int8 *)a1 + 129);
    }
    if (v45 > v46) {
      __assert_rtn("swap_region_private", "windowserver-secure-indicators.mm", 480, "_visible_regions_count <= _active_regions_count");
    }
    char v47 = v44 ^ v43;
    uint64_t v48 = a1[2];
    if (!v48) {
      char v47 = 1;
    }
    if ((v47 & 1) == 0) {
      (*(void (**)(uint64_t, BOOL, void, void, uint64_t, uint64_t))(v48 + 16))(v48, v43, *a3, v45, v39, v40);
    }
    long long v49 = *(_OWORD *)a3;
    *(void *)(v18 + 14) = *(void *)((char *)a3 + 14);
    *(_OWORD *)uint64_t v18 = v49;
    if (BYTE9(xmmword_1EB2ACC10)) {
      kdebug_trace();
    }
  }
  return v19;
}

void sub_184865A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL CA::WindowServer::SILMgr::turn_off_region(CA::WindowServer::SILMgr *this, unsigned int a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    uint64_t v4 = x_log_category_secure_indicators;
    if (os_log_type_enabled((os_log_t)x_log_category_secure_indicators, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 67109120;
      unsigned int v12 = a2;
      _os_log_impl(&dword_184668000, v4, OS_LOG_TYPE_INFO, "Turning off region %u", buf, 8u);
    }
  }
  unsigned int v5 = _SILManagerTurnOffRegions(*(void *)this, (1 << a2), 0, *((unsigned __int8 *)this + 132));
  if (v5 <= 0x1FF)
  {
    *((unsigned char *)this + 131) = 1;
    uint64_t v6 = (float *)((char *)this + 24 * a2);
    float v8 = v6[9];
    long long v7 = v6 + 9;
    if (v8 > 0.0) {
      --*((unsigned char *)this + 128);
    }
    unsigned int v9 = (*((unsigned char *)this + 129))-- - 1;
    *long long v7 = -1082130432;
    if (v9 >= 5) {
      __assert_rtn("turn_off_region", "windowserver-secure-indicators.mm", 546, "_active_regions_count <= kSILManagerRegionCount");
    }
  }
  return v5 < 0x200;
}

void CA::WindowServer::SILMgr::record_swap_position(void *a1, int a2, float a3, float a4)
{
  uint64_t v104 = *MEMORY[0x1E4F143B8];
  unint64_t v95 = __PAIR64__(LODWORD(a4), LODWORD(a3));
  unsigned int v9 = (char *)a1[17];
  float v8 = (char *)a1[18];
  unsigned int v10 = v9;
  if (v9 != v8)
  {
    while (*(_DWORD *)v10 != a2)
    {
      v10 += 32;
      if (v10 == v8) {
        goto LABEL_6;
      }
    }
  }
  if (v10 == v8)
  {
LABEL_6:
    uint64_t v11 = v8 - v9;
    uint64_t v12 = (v8 - v9) >> 5;
    unsigned int v10 = &v9[(v8 - v9) & 0xFFFFFFFFFFFFFFE0];
    unint64_t v13 = a1[19];
    if ((unint64_t)v8 >= v13)
    {
      uint64_t v30 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 59) {
        abort();
      }
      uint64_t v31 = v13 - (void)v9;
      uint64_t v32 = v31 >> 4;
      if (v31 >> 4 <= (unint64_t)v30) {
        uint64_t v32 = v12 + 1;
      }
      if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v33 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v33 = v32;
      }
      float64_t v99 = a1 + 19;
      if (v33) {
        unint64_t v33 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Render::MeshVertex>>(v33);
      }
      else {
        uint64_t v34 = 0;
      }
      unint64_t v36 = v33 + 32 * v12;
      int v96 = (char *)v33;
      *(void *)&long long v97 = v36;
      *((void *)&v97 + 1) = v36;
      long long v98 = (char *)(v33 + 32 * v34);
      if (v12 == v34)
      {
        if (v11 < 1)
        {
          if (v9 == v8) {
            unint64_t v38 = 1;
          }
          else {
            unint64_t v38 = v11 >> 4;
          }
          float v103 = v99;
          uint64_t v39 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Render::MeshVertex>>(v38);
          uint64_t v41 = v97;
          if (*((void *)&v97 + 1) == (void)v97)
          {
            int64x2_t v44 = vdupq_n_s64(v97);
            uint64_t v42 = (uint64_t)&v39[32 * (v38 >> 2)];
          }
          else
          {
            uint64_t v42 = (uint64_t)&v39[32 * (v38 >> 2) + *((void *)&v97 + 1) - v97];
            BOOL v43 = &v39[32 * (v38 >> 2)];
            do
            {
              *(_DWORD *)BOOL v43 = *(_DWORD *)v41;
              *((void *)v43 + 2) = 0;
              *((void *)v43 + 3) = 0;
              *((void *)v43 + 1) = 0;
              *(_OWORD *)(v43 + 8) = *(_OWORD *)(v41 + 8);
              *((void *)v43 + 3) = *(void *)(v41 + 24);
              *(void *)(v41 + 8) = 0;
              *(void *)(v41 + 16) = 0;
              *(void *)(v41 + 24) = 0;
              v43 += 32;
              v41 += 32;
            }
            while (v43 != (char *)v42);
            int64x2_t v44 = (int64x2_t)v97;
          }
          unsigned __int8 v45 = v98;
          uint64_t v100 = v96;
          int v96 = v39;
          *(void *)&long long v97 = &v39[32 * (v38 >> 2)];
          int64x2_t v101 = v44;
          *((void *)&v97 + 1) = v42;
          long long v98 = &v39[32 * v40];
          unint64_t v102 = v45;
          std::__split_buffer<std::pair<unsigned int,std::vector<CA::Vec2<float>>>>::~__split_buffer((uint64_t)&v100);
          unint64_t v36 = *((void *)&v97 + 1);
        }
        else
        {
          if (v30 >= 0) {
            unint64_t v37 = v12 + 1;
          }
          else {
            unint64_t v37 = v12 + 2;
          }
          v36 -= 32 * (v37 >> 1);
          *(void *)&long long v97 = v36;
          *((void *)&v97 + 1) = v36;
        }
      }
      *(_DWORD *)unint64_t v36 = a2;
      *(void *)(v36 + 16) = 0;
      *(void *)(v36 + 24) = 0;
      *(void *)(v36 + 8) = 0;
      unsigned int v46 = (char *)v97;
      uint64_t v47 = *((void *)&v97 + 1) + 32;
      *((void *)&v97 + 1) += 32;
      uint64_t v48 = (char *)a1[17];
      if (v48 == v10)
      {
        uint64_t v52 = (char *)v97;
      }
      else
      {
        unint64_t v49 = 0;
        do
        {
          uint64_t v50 = &v46[v49];
          int32x2_t v51 = &v10[v49];
          *((_DWORD *)v50 - 8) = *(_DWORD *)&v10[v49 - 32];
          *((void *)v50 - 2) = 0;
          *((void *)v50 - 1) = 0;
          *((void *)v50 - 3) = 0;
          *(_OWORD *)(v50 - 24) = *(_OWORD *)&v10[v49 - 24];
          *((void *)v50 - 1) = *(void *)&v10[v49 - 8];
          *((void *)v51 - 3) = 0;
          *((void *)v51 - 2) = 0;
          *((void *)v51 - 1) = 0;
          v49 -= 32;
        }
        while (&v10[v49] != v48);
        uint64_t v52 = &v46[v49];
        uint64_t v47 = *((void *)&v97 + 1);
      }
      *(void *)&long long v97 = v52;
      int v53 = (char *)a1[18];
      if (v53 != v10)
      {
        do
        {
          *(_DWORD *)uint64_t v47 = *(_DWORD *)v10;
          *(void *)(v47 + 16) = 0;
          *(void *)(v47 + 24) = 0;
          *(void *)(v47 + 8) = 0;
          *(_OWORD *)(v47 + 8) = *(_OWORD *)(v10 + 8);
          *(void *)(v47 + 24) = *((void *)v10 + 3);
          *((void *)v10 + 1) = 0;
          *((void *)v10 + 2) = 0;
          *((void *)v10 + 3) = 0;
          v47 += 32;
          v10 += 32;
        }
        while (v10 != v53);
        uint64_t v52 = (char *)v97;
        unsigned int v10 = (char *)a1[18];
      }
      uint64_t v54 = (char *)a1[17];
      a1[17] = v52;
      a1[18] = v47;
      int32x4_t v55 = (char *)a1[19];
      a1[19] = v98;
      *((void *)&v97 + 1) = v10;
      long long v98 = v55;
      int v96 = v54;
      *(void *)&long long v97 = v54;
      std::__split_buffer<std::pair<unsigned int,std::vector<CA::Vec2<float>>>>::~__split_buffer((uint64_t)&v96);
      unsigned int v10 = v46;
    }
    else if (v10 == v8)
    {
      *(_DWORD *)float v8 = a2;
      double v35 = &v9[32 * v12];
      *((void *)v35 + 1) = 0;
      *((void *)v35 + 2) = 0;
      *((void *)v35 + 3) = 0;
      a1[18] = v8 + 32;
      unsigned int v10 = v8;
    }
    else
    {
      float v14 = v10 + 32;
      float v15 = v8 - 32;
      uint64_t v94 = (v8 - v9) >> 5;
      uint64_t v16 = a1[18];
      if ((unint64_t)v8 >= 0x20)
      {
        do
        {
          *(_DWORD *)uint64_t v16 = *(_DWORD *)v15;
          *(void *)(v16 + 16) = 0;
          *(void *)(v16 + 24) = 0;
          *(void *)(v16 + 8) = 0;
          *(_OWORD *)(v16 + 8) = *(_OWORD *)(v15 + 8);
          *(void *)(v16 + 24) = *((void *)v15 + 3);
          *((void *)v15 + 1) = 0;
          *((void *)v15 + 2) = 0;
          *((void *)v15 + 3) = 0;
          v16 += 32;
          v15 += 32;
        }
        while (v15 < v8);
      }
      a1[18] = v16;
      if (v8 != v14)
      {
        unint64_t v17 = 0;
        uint64_t v18 = (v8 - v14) >> 5;
        BOOL v19 = &v9[32 * v94 + 32 * v18];
        uint64_t v20 = -32 * v18;
        do
        {
          int v21 = &v19[v17];
          int v22 = &v8[v17];
          uint64_t v24 = (void **)&v8[v17 - 24];
          uint64_t v23 = *v24;
          *(_DWORD *)&v8[v17 - 32] = *(_DWORD *)&v19[v17 - 32];
          if (v23)
          {
            *((void *)v22 - 2) = v23;
            operator delete(v23);
            NSObject *v24 = 0;
            *(void *)&v8[v17 - 16] = 0;
            *(void *)&v8[v17 - 8] = 0;
          }
          uint32_t v25 = v21 - 24;
          *(_OWORD *)uint64_t v24 = *(_OWORD *)(v21 - 24);
          *((void *)v22 - 1) = *((void *)v21 - 1);
          *(void *)uint32_t v25 = 0;
          *((void *)v25 + 1) = 0;
          *((void *)v25 + 2) = 0;
          v17 -= 32;
        }
        while (v20 != v17);
      }
      *(_DWORD *)unsigned int v10 = a2;
      uint64_t v26 = &v9[32 * v94];
      std::exception_ptr v29 = (void *)*((void *)v26 + 1);
      int v28 = v26 + 8;
      int v27 = v29;
      if (v29)
      {
        *(void *)&v9[32 * v94 + 16] = v27;
        operator delete(v27);
        void *v28 = 0;
        v28[1] = 0;
        v28[2] = 0;
      }
      void *v28 = 0;
      v28[1] = 0;
      v28[2] = 0;
    }
  }
  __int32 v57 = (float *)*((void *)v10 + 1);
  int v56 = (float *)*((void *)v10 + 2);
  uint64_t v58 = (char *)v56 - (char *)v57;
  if (v56 == v57)
  {
    int32x2_t v60 = (float *)*((void *)v10 + 2);
  }
  else
  {
    unint64_t v59 = v58 >> 3;
    int32x2_t v60 = (float *)*((void *)v10 + 1);
    do
    {
      unint64_t v61 = v59 >> 1;
      int8x16_t v62 = &v60[2 * (v59 >> 1)];
      float v64 = *v62;
      float v65 = v62[1];
      int8x16_t v63 = v62 + 2;
      BOOL v66 = v65 < a4;
      if (v64 != a3) {
        BOOL v66 = v64 < a3;
      }
      v59 += ~(v59 >> 1);
      if (v66) {
        int32x2_t v60 = v63;
      }
      else {
        unint64_t v59 = v61;
      }
    }
    while (v59);
  }
  if (v56 == v60 || *v60 != a3 || v60[1] != a4)
  {
    unint64_t v67 = *((void *)v10 + 3);
    if ((unint64_t)v56 >= v67)
    {
      unint64_t v72 = (v58 >> 3) + 1;
      if (v72 >> 61) {
        abort();
      }
      unint64_t v73 = v67 - (void)v57;
      unint64_t v74 = (uint64_t)(v67 - (void)v57) >> 2;
      if (v74 > v72) {
        unint64_t v72 = v74;
      }
      if (v73 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v75 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v75 = v72;
      }
      if (v75)
      {
        int64x2_t v77 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Display::DisplayLinkItem *>>(v75);
      }
      else
      {
        int64x2_t v77 = 0;
        uint64_t v76 = 0;
      }
      uint64_t v79 = (char *)v60 - (char *)v57;
      uint64_t v80 = ((char *)v60 - (char *)v57) >> 3;
      uint64_t v81 = (unint64_t *)&v77[8 * v80];
      double v82 = &v77[8 * v76];
      if (v80 == v76)
      {
        if (v79 < 1)
        {
          if (v60 == v57) {
            unint64_t v84 = 1;
          }
          else {
            unint64_t v84 = v79 >> 2;
          }
          int32x2_t v85 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Display::DisplayLinkItem *>>(v84);
          uint64_t v81 = (unint64_t *)&v85[8 * (v84 >> 2)];
          double v82 = &v85[8 * v86];
          if (v77) {
            operator delete(v77);
          }
        }
        else
        {
          if (v80 >= -1) {
            unint64_t v83 = v80 + 1;
          }
          else {
            unint64_t v83 = v80 + 2;
          }
          v81 -= v83 >> 1;
        }
      }
      *uint64_t v81 = v95;
      uint32x2_t v87 = (char *)(v81 + 1);
      uint32x2_t v88 = (float *)*((void *)v10 + 1);
      if (v88 != v60)
      {
        int32x2_t v89 = v60;
        do
        {
          unint64_t v90 = *((void *)v89 - 1);
          v89 -= 2;
          *--uint64_t v81 = v90;
        }
        while (v89 != v88);
      }
      uint32x2_t v91 = (float *)*((void *)v10 + 2);
      int64_t v92 = (char *)v91 - (char *)v60;
      if (v91 != v60) {
        memmove(v87, v60, (char *)v91 - (char *)v60);
      }
      unint64_t v93 = (void *)*((void *)v10 + 1);
      *((void *)v10 + 1) = v81;
      *((void *)v10 + 2) = &v87[v92];
      *((void *)v10 + 3) = v82;
      if (v93) {
        operator delete(v93);
      }
    }
    else if (v60 == v56)
    {
      *(void *)int v56 = v95;
      *((void *)v10 + 2) = v56 + 2;
    }
    else
    {
      double v68 = v60 + 2;
      int v69 = v56 - 2;
      int v70 = (void *)*((void *)v10 + 2);
      while (v69 < v56)
      {
        uint64_t v71 = *(void *)v69;
        v69 += 2;
        *v70++ = v71;
      }
      *((void *)v10 + 2) = v70;
      if (v56 != v68) {
        memmove(&v56[-2 * (((char *)v56 - (char *)v68) >> 3)], v60, (char *)v56 - (char *)v68);
      }
      float64x2_t v78 = &v95;
      if (v60 <= (float *)&v95) {
        float64x2_t v78 = &v95 + (*((void *)v10 + 2) > (unint64_t)&v95);
      }
      *(void *)int32x2_t v60 = *v78;
    }
  }
}

void sub_184866250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__split_buffer<std::pair<unsigned int,std::vector<CA::Vec2<float>>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::pair<unsigned int,std::vector<CA::Vec2<float>>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 32;
    uint64_t v4 = *(void **)(v2 - 24);
    if (v4)
    {
      *(void *)(v2 - 16) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 32;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t ___ZL15_SILManagerSwapP10SILManagerPK18SILManagerSwapInfob_block_invoke(uint64_t a1)
{
  uint64_t result = SILManagerSwap();
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t CAEmitterCell_setter(CA::Transaction *a1, const void *a2, int a3, unsigned __int8 *a4)
{
  float v8 = *(CA::Transaction **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 576);
  if (!v8) {
    float v8 = (CA::Transaction *)CA::Transaction::create(a1);
  }
  CFStringRef String = CAAtomGetString(a2);
  [(CA::Transaction *)a1 willChangeValueForKey:String];
  int v10 = *((_DWORD *)v8 + 25);
  *((_DWORD *)v8 + 25) = v10 + 1;
  if (!v10) {
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
  }
  uint64_t v11 = (CA::AttrList *)*((void *)a1 + 1);
  if (!v11)
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    uint64_t v11 = (CA::AttrList *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x10uLL, 0x743898A5uLL);
  }
  *((void *)a1 + 1) = CA::AttrList::set(v11, a2, a3, a4);
  CA::Transaction::unlock(v8);
  unint64_t v13 = (atomic_uint *)*((void *)a1 + 3);
  if (v13
    && CAAtomIndexInArray(56, (uint64_t)&CAEmitterCell_setter(CAEmitterCell *,unsigned int,_CAValueType,void const*)::atoms, (int)a2) != -1)
  {
    if (atomic_fetch_add(v13 + 2, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v13 + 16))(v13);
    }
    uint64_t v14 = 0;
    *((void *)a1 + 3) = 0;
    while ((unsigned __int16)CAEmitterCell_setter(CAEmitterCell *,unsigned int,_CAValueType,void const*)::timing_atoms[v14] != a2)
    {
      if (++v14 == 9) {
        goto LABEL_16;
      }
    }
    CAMediaTimingInvalidate((uint64_t)a1);
  }
LABEL_16:

  return [(CA::Transaction *)a1 didChangeValueForKey:String];
}

void CAEmitterCell_getter(CA::Transaction *a1, unsigned int a2, const CGAffineTransform *a3, CA::Mat4Impl *this)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  float v8 = *(CA::Transaction **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 576);
  if (!v8) {
    float v8 = (CA::Transaction *)CA::Transaction::create(a1);
  }
  id v17 = 0;
  int v9 = *((_DWORD *)v8 + 25);
  *((_DWORD *)v8 + 25) = v9 + 1;
  if (!v9) {
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
  }
  uint64_t v10 = *((void *)a1 + 1);
  if (!v10) {
    goto LABEL_9;
  }
  if (CA::AttrList::get(v10, a2, a3, this)) {
    goto LABEL_15;
  }
  uint64_t v11 = *((void *)a1 + 1);
  if (!v11 || (CA::AttrList::get(v11, 545, (const CGAffineTransform *)1, (CA::Mat4Impl *)&v17) & 1) == 0)
  {
LABEL_9:
    uint64_t v12 = (objc_class *)objc_opt_class();
    CAObject_defaultValueForAtom(v12, 545, (const CGAffineTransform *)1, (uint64_t)&v17);
  }
  if (v17 && (String = CAAtomGetString(a2), (id v14 = v17) != 0))
  {
    while (1)
    {
      float v15 = objc_msgSend(v14, "objectForKey:", String, v17, v18);
      if (v15) {
        break;
      }
      id v14 = (id)[v17 objectForKey:@"style"];
      id v17 = v14;
      if (!v14) {
        goto LABEL_14;
      }
    }
    if (v15 == (void *)*MEMORY[0x1E4F1D260]) {
      float v15 = 0;
    }
    CAValueObjCUnbox(v15, (int)a3, (uint64_t)this);
  }
  else
  {
LABEL_14:
    uint64_t v16 = (objc_class *)objc_opt_class();
    CAObject_defaultValueForAtom(v16, a2, a3, (uint64_t)this);
  }
LABEL_15:
  CA::Transaction::unlock(v8);
}

uint64_t CA::OGL::BlurFilter::render(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, void, void))(*(void *)a1 + 104))(a1, a2, a3, a4, a5, 0, a6, 0, 0);
}

uint64_t CA::OGL::GaussianBlurFilter::opaque_shape(CA::OGL::GaussianBlurFilter *this, CA::Render::KeyValueArray **a2, const CA::Render::Layer *a3, float64x2_t *a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  double float_key = CA::Render::KeyValueArray::get_float_key(a2[5], 310, 0.0);
  float v8 = CA::BoundsImpl::inset(a4->f64, float_key * 2.79999995, float_key * 2.79999995);
  float64x2_t v17 = 0u;
  float64x2_t v18 = 0u;
  uint64_t result = CA::OGL::GaussianBlurFilter::get_bounds((CA::OGL::GaussianBlurFilter *)v8, (const CA::Render::Filter *)a2, a3, (Rect *)&v17);
  if (result)
  {
    float64x2_t v10 = a4[1];
    int8x16_t v11 = (int8x16_t)vclezq_f64(v10);
    if ((vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v11, 1), v11).u64[0] & 0x8000000000000000) == 0)
    {
      int8x16_t v12 = (int8x16_t)vclezq_f64(v18);
      if ((vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v12, 1), v12).u64[0] & 0x8000000000000000) != 0
        || (float64x2_t v13 = vaddq_f64(*a4, v10),
            float64x2_t v14 = vmaxnmq_f64(*a4, v17),
            float64x2_t v15 = vsubq_f64(vminnmq_f64(v13, vaddq_f64(v17, v18)), v14),
            int8x16_t v16 = (int8x16_t)vclezq_f64(v15),
            (vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v16, 1), v16).u64[0] & 0x8000000000000000) != 0))
      {
        a4[1].f64[0] = 0.0;
        a4[1].f64[1] = 0.0;
      }
      else
      {
        *a4 = v14;
        a4[1] = v15;
      }
    }
  }
  return result;
}

uint64_t CA::OGL::BlurFilter::empty_opaque_shape(CA::OGL::BlurFilter *this, const CA::Render::Filter *a2, const CA::Render::Layer *a3)
{
  return 0;
}

uint64_t CA::OGL::VariableBlurFilter::opaque_shape(CA::OGL::VariableBlurFilter *this, const CA::Render::Filter *a2, float64x2_t *a3, CA::Rect *a4)
{
  uint64_t v6 = (CA::Render::KeyValueArray *)*((void *)a2 + 5);
  if (!CA::Render::KeyValueArray::get_int_key(v6, 305, 0))
  {
    double float_key = CA::Render::KeyValueArray::get_float_key(v6, 310, 0.0);
    CA::BoundsImpl::inset((double *)a4, float_key * 5.5999999, float_key * 5.5999999);
  }
  float64x2_t v8 = a3[4];
  float64x2_t v9 = a3[5];

  return CA::BoundsImpl::intersect((uint64_t)a4, v8, v9);
}

uint64_t CA::OGL::LanczosResizeFilter::source_requirement(CA::OGL::LanczosResizeFilter *this, const CA::Render::Filter *a2)
{
  return 4;
}

uint64_t CA::OGL::LanczosResizeFilter::filter_flags()
{
  return 7;
}

uint64_t CA::OGL::LanczosResizeFilter::render(float a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (a7)
  {
    int8x16_t v11 = *(CA::Render::KeyValueArray **)(a4 + 40);
    double float_key = CA::Render::KeyValueArray::get_float_key(v11, 278, 1.0);
    double v13 = CA::Render::KeyValueArray::get_float_key(v11, 314, 1.0);
    uint64_t v37 = 0;
    uint64_t v14 = *(void *)(a6[31] + 24);
    int8x16_t v15 = *(int8x16_t *)(v14 + 16);
    int8x16_t v16 = *(int8x16_t *)(v14 + 32);
    int8x16_t v17 = *(int8x16_t *)(v14 + 48);
    v31[0] = *(float64x2_t *)v14;
    v31[1] = (float64x2_t)v15;
    v31[2] = (float64x2_t)v16;
    void v31[3] = (float64x2_t)v17;
    int8x16_t v18 = *(int8x16_t *)(v14 + 80);
    int8x16_t v19 = *(int8x16_t *)(v14 + 96);
    int8x16_t v20 = *(int8x16_t *)(v14 + 112);
    int8x16_t v32 = *(int8x16_t *)(v14 + 64);
    int8x16_t v33 = v18;
    double v21 = v13 * (float)(a1 / a2);
    int8x16_t v34 = v19;
    int8x16_t v35 = v20;
    int8x16_t v36 = *(int8x16_t *)(v14 + 128);
    LOBYTE(v37) = *(unsigned char *)(v14 + 144) & 0x1F;
    v29[0] = (int8x16_t)v31[0];
    v29[1] = v15;
    float64x2_t v29[2] = v16;
    void v29[3] = v17;
    _OWORD v29[4] = v32;
    v29[5] = v18;
    v29[6] = v19;
    v29[7] = v20;
    v29[8] = v36;
    uint64_t v30 = v37;
    CA::Transform::invert(v29, v22, v23);
    v24.f64[0] = float_key * v21;
    CA::Transform::scale(v31, v24, v21, 1.0);
    CA::Transform::concat_left((CA::Transform *)v31, (float64x2_t *)v29, v25, v26);
    v28[0] = float_key * v21;
    v28[1] = v21;
    return (*(uint64_t (**)(void *, uint64_t, double *, float64x2_t *, uint64_t, double))(*a6 + 864))(a6, a7, v28, v31, 1, 0.0);
  }
  return result;
}

BOOL CA::OGL::LanczosResizeFilter::can_render(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return *(void *)(a5 + 16) == 0;
}

double CA::OGL::LanczosResizeFilter::ROI(CA::OGL::LanczosResizeFilter *this, const CA::Render::Filter *a2, const CA::Render::Layer *a3, CA::Rect *a4)
{
  unsigned int v5 = (CA::Render::KeyValueArray *)*((void *)a2 + 5);
  double float_key = CA::Render::KeyValueArray::get_float_key(v5, 314, 1.0);
  double v7 = 1.0 / (CA::Render::KeyValueArray::get_float_key(v5, 278, 1.0) * float_key);

  return CA::BoundsImpl::scale((double *)a4, v7, 1.0 / float_key);
}

double CA::OGL::LanczosResizeFilter::opaque_shape(CA::OGL::LanczosResizeFilter *this, const CA::Render::Filter *a2, const CA::Render::Layer *a3, CA::Rect *a4)
{
  unsigned int v5 = (CA::Render::KeyValueArray *)*((void *)a2 + 5);
  double float_key = CA::Render::KeyValueArray::get_float_key(v5, 314, 1.0);
  double v7 = CA::Render::KeyValueArray::get_float_key(v5, 278, 1.0) * float_key;

  return CA::BoundsImpl::scale((double *)a4, v7, float_key);
}

double CA::OGL::LanczosResizeFilter::DOD(CA::OGL::LanczosResizeFilter *this, const CA::Render::Filter *a2, const CA::Render::Layer *a3, CA::Rect *a4)
{
  unsigned int v5 = (CA::Render::KeyValueArray *)*((void *)a2 + 5);
  double float_key = CA::Render::KeyValueArray::get_float_key(v5, 314, 1.0);
  double v7 = CA::Render::KeyValueArray::get_float_key(v5, 278, 1.0) * float_key;

  return CA::BoundsImpl::scale((double *)a4, v7, float_key);
}

uint64_t CA::Render::FilterSubclass::is_opacity_commutative(CA::Render::FilterSubclass *this, const CA::Render::Filter *a2)
{
  return 0;
}

uint64_t CA::OGL::LanczosResizeFilter::empty_opaque_shape(CA::OGL::LanczosResizeFilter *this, const CA::Render::Filter *a2, const CA::Render::Layer *a3)
{
  return 0;
}

BOOL CA::OGL::LanczosResizeFilter::identity(CA::OGL::LanczosResizeFilter *this, const CA::Render::Filter *a2)
{
  uint64_t v2 = (CA::Render::KeyValueArray *)*((void *)a2 + 5);
  double float_key = CA::Render::KeyValueArray::get_float_key(v2, 314, 1.0);
  double v4 = CA::Render::KeyValueArray::get_float_key(v2, 278, 1.0);
  BOOL v5 = fabs(float_key + -1.0) < 0.0001;
  return fabs(v4 + -1.0) < 0.0001 && v5;
}

uint64_t CA::OGL::ChromaticAberrationFilter::source_requirement(CA::OGL::ChromaticAberrationFilter *this, const CA::Render::Filter *a2)
{
  return 4;
}

uint64_t CA::OGL::ChromaticAberrationFilter::filter_flags()
{
  return 6;
}

void CA::OGL::ChromaticAberrationFilter::render(float a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, CA::OGL::Context *a6, uint64_t a7)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  if (a7)
  {
    int8x16_t v11 = *(CA::Render::KeyValueArray **)(a4 + 40);
    uint64_t v71 = 0;
    unint64_t v72 = 0;
    vec2_keCGFloat y = CA::Render::KeyValueArray::get_vec2_key((uint64_t)v11, 311, (uint64_t)&v71);
    float64_t v59 = v12;
    uint64_t v71 = 0;
    unint64_t v72 = 0;
    double v61 = CA::Render::KeyValueArray::get_vec2_key((uint64_t)v11, 298, (uint64_t)&v71);
    float64_t v58 = v13;
    uint64_t v71 = 0;
    unint64_t v72 = 0;
    v19.f64[0] = CA::Render::KeyValueArray::get_vec2_key((uint64_t)v11, 283, (uint64_t)&v71);
    v17.f64[0] = vec2_key;
    v17.f64[1] = v59;
    float64x2_t v65 = v17;
    v17.f64[0] = v61;
    v17.f64[1] = v58;
    float64x2_t v62 = v17;
    v19.f64[1] = v18;
    uint64_t v20 = *(void *)(*((void *)a6 + 31) + 24);
    double v69 = 0.0;
    float64_t v70 = 0.0;
    if ((*(unsigned char *)(v20 + 144) & 0x10) != 0)
    {
      float64x2_t v60 = v19;
      CA::Mat4Impl::mat4_get_scale((CA::Mat4Impl *)v20, &v70, &v69, v14);
      float64x2_t v19 = v60;
      *(double *)v16.i64 = v69;
      v21.f64[0] = v70;
    }
    else
    {
      v16.i64[0] = *(void *)(v20 + 128);
      double v69 = *(double *)v16.i64;
      float64_t v70 = *(double *)v16.i64;
      *(void *)&v21.f64[0] = v16.i64[0];
    }
    float32x2_t v22 = vcvt_f32_f64(v65);
    float32x2_t v23 = vcvt_f32_f64(v62);
    float32x2_t v24 = vcvt_f32_f64(v19);
    *(double *)v15.i64 = a2;
    *(void *)&v21.f64[1] = v16.i64[0];
    *(float32x2_t *)&v21.f64[0] = vcvt_f32_f64(vmulq_n_f64(v21, a2));
    float v26 = a1 / a2;
    double v27 = v26;
    int v28 = *(_DWORD *)(a7 + 40);
    int v29 = *(_DWORD *)(a7 + 44);
    if (v28 <= v29) {
      int v30 = *(_DWORD *)(a7 + 44);
    }
    else {
      int v30 = *(_DWORD *)(a7 + 40);
    }
    v15.i32[0] = 1073741822;
    v16.i32[0] = v30;
    int8x16_t v31 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v16, v15), 0);
    int32x2_t v33 = *(int32x2_t *)(a7 + 24);
    uint64_t v32 = *(void *)(a7 + 32);
    v34.i64[0] = (int)v32;
    v34.i64[1] = SHIDWORD(v32);
    int8x16_t v35 = vbslq_s8(v31, (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v34));
    double v36 = (double)v28;
    double v37 = (double)v29;
    if (v30 > 1073741822)
    {
      double v36 = 1.79769313e308;
      double v37 = 1.79769313e308;
    }
    float64x2_t v67 = (float64x2_t)v35;
    v68.f64[0] = v36;
    v68.f64[1] = v37;
    if (v26 != 1.0 && v36 < 1.79769313e308)
    {
      v67.f64[0] = v27 * *(double *)v35.i64;
      v68.f64[0] = v36 * v27;
    }
    float32x2_t v39 = vmul_f32(*(float32x2_t *)&v21.f64[0], v22);
    float32x2_t v40 = vmul_f32(*(float32x2_t *)&v21.f64[0], v23);
    float32x2_t v41 = vmul_f32(*(float32x2_t *)&v21.f64[0], v24);
    float32x2_t v42 = vcvt_f32_s32(v33);
    if (v26 != 1.0 && v37 < 1.79769313e308)
    {
      v67.f64[1] = *(double *)&v35.i64[1] * v27;
      v68.f64[1] = v37 * v27;
    }
    float32x2_t v44 = vminnm_f32(v39, vminnm_f32(v40, vminnm_f32(v41, 0)));
    float64x2_t v66 = vaddq_f64(v67, vcvtq_f64_f32(v44));
    float64x2_t v67 = v66;
    float64x2_t v63 = vaddq_f64(v68, vcvtq_f64_f32(vadd_f32(vmaxnm_f32(v39, vmaxnm_f32(v40, vmaxnm_f32(v41, 0))), vabs_f32(v44))));
    float64x2_t v68 = v63;
    __asm { FMOV            V0.2S, #-1.0 }
    float32x2_t v49 = vdiv_f32(_D0, v42);
    *(float32x2_t *)&long long v50 = vmul_f32(v39, v49);
    *((float32x2_t *)&v50 + 1) = vmul_f32(v40, v49);
    long long v76 = v50;
    float32x2_t v77 = vmul_f32(v41, v49);
    uint64_t v51 = *(void *)(a7 + 40);
    v52.i64[0] = (int)v51;
    v52.i64[1] = SHIDWORD(v51);
    __asm { FMOV            V3.2D, #-0.5 }
    *(float32x2_t *)&long long v75 = vdiv_f32((float32x2_t)0x3F0000003F000000, v42);
    *((float32x2_t *)&v75 + 1) = vcvt_f32_f64(vdivq_f64(vaddq_f64(vcvtq_f64_s64(v52), _Q3), vcvtq_f64_f32(v42)));
    if (CA::Render::KeyValueArray::get_int_key(v11, 295, 0)) {
      long long v75 = xmmword_184998110;
    }
    float v54 = 1.0 / v26;
    if (*((void *)a6 + 33) == a7) {
      *(unsigned char *)(*((void *)a6 + 2) + 17) = 38;
    }
    else {
      CA::OGL::Context::bind_surface((uint64_t)a6, a7, 0, 0, 0, 0.0);
    }
    *(unsigned char *)(*((void *)a6 + 2) + 16) = 40;
    (*(void (**)(CA::OGL::Context *, void, uint64_t, uint64_t, long long *))(*(void *)a6 + 1000))(a6, 0, 2, 3, &v76);
    (*(void (**)(CA::OGL::Context *, uint64_t, uint64_t, uint64_t, long long *))(*(void *)a6 + 1000))(a6, 1, 2, 2, &v75);
    uint64_t v71 = &v67;
    unint64_t v72 = &CA::identity_transform;
    long long v73 = 0u;
    long long v74 = 0u;
    uint64_t v55 = *(void *)(a7 + 32);
    v56.i64[0] = (int)v55;
    v56.i64[1] = SHIDWORD(v55);
    float64x2_t v57 = vnegq_f64(vcvtq_f64_s64(v56));
    float32x4_t v78 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_n_f64(v57, v66, v54)), vmlaq_n_f64(v57, vaddq_f64(v63, v66), v54));
    CA::OGL::emit_one_part_rect(a6, (uint64_t)&v71, (const CA::Transform *)&v78, 0, 0);
    if (*((void *)a6 + 33) != a7) {
      CA::OGL::Context::unbind_surface(a6, a7, 0);
    }
    *(unsigned char *)(*((void *)a6 + 2) + 16) = 0;
    *(unsigned char *)(*((void *)a6 + 2) + 19) = 0;
  }
}

BOOL CA::OGL::ChromaticAberrationFilter::can_render(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return *(void *)(a5 + 16) == 0;
}

double *CA::OGL::ChromaticAberrationFilter::ROI(CA::OGL::ChromaticAberrationFilter *this, const CA::Render::Filter *a2, const CA::Render::Layer *a3, float64x2_t *a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *((void *)a2 + 5);
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  vec2_keCGFloat y = CA::Render::KeyValueArray::get_vec2_key(v5, 311, (uint64_t)&v22);
  float64_t v20 = v7;
  float64_t v21 = vec2_key;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  double v8 = CA::Render::KeyValueArray::get_vec2_key(v5, 298, (uint64_t)&v22);
  float64_t v18 = v9;
  float64_t v19 = v8;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  v10.f64[0] = CA::Render::KeyValueArray::get_vec2_key(v5, 283, (uint64_t)&v22);
  v11.f64[0] = v21;
  v11.f64[1] = v20;
  *(float32x2_t *)&v11.f64[0] = vcvt_f32_f64(v11);
  v12.f64[0] = v19;
  v12.f64[1] = v18;
  *(float32x2_t *)&v12.f64[0] = vcvt_f32_f64(v12);
  v10.f64[1] = v13;
  *(float32x2_t *)&v10.f64[0] = vcvt_f32_f64(v10);
  float32x2_t v14 = vminnm_f32(*(float32x2_t *)&v11.f64[0], vminnm_f32(*(float32x2_t *)&v12.f64[0], vminnm_f32(*(float32x2_t *)&v10.f64[0], 0)));
  *(float32x2_t *)&v10.f64[0] = vmaxnm_f32(*(float32x2_t *)&v11.f64[0], vmaxnm_f32(*(float32x2_t *)&v12.f64[0], vmaxnm_f32(*(float32x2_t *)&v10.f64[0], 0)));
  float64x2_t v15 = vsubq_f64(*a4, vcvtq_f64_f32(*(float32x2_t *)&v10.f64[0]));
  float64x2_t v16 = vaddq_f64(a4[1], vcvtq_f64_f32(vadd_f32(*(float32x2_t *)&v10.f64[0], vabs_f32(v14))));
  *a4 = v15;
  a4[1] = v16;

  return CA::BoundsImpl::inset(a4->f64, -1.0, -1.0);
}

void CA::OGL::ChromaticAberrationFilter::opaque_shape(CA::OGL::ChromaticAberrationFilter *this, const CA::Render::Filter *a2, const CA::Render::Layer *a3, float64x2_t *a4)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *((void *)a2 + 5);
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  vec2_keCGFloat y = CA::Render::KeyValueArray::get_vec2_key(v5, 311, (uint64_t)&v43);
  float64_t v41 = v7;
  float64_t v42 = vec2_key;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  double v8 = CA::Render::KeyValueArray::get_vec2_key(v5, 298, (uint64_t)&v43);
  float64_t v39 = v9;
  float64_t v40 = v8;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  v10.f64[0] = CA::Render::KeyValueArray::get_vec2_key(v5, 283, (uint64_t)&v43);
  float64x2_t v13 = *a4;
  float64x2_t v12 = a4[1];
  v14.f64[0] = v42;
  v14.f64[1] = v41;
  int8x16_t v15 = (int8x16_t)vaddq_f64(*a4, vcvtq_f64_f32(vcvt_f32_f64(v14)));
  int8x16_t v16 = (int8x16_t)vclezq_f64(v12);
  unint64_t v17 = vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v16, 1), v16).u64[0];
  if ((v17 & 0x8000000000000000) != 0)
  {
    int8x16_t v27 = (int8x16_t)a4[1];
  }
  else
  {
    v18.f64[0] = v40;
    v18.f64[1] = v39;
    float64x2_t v19 = vaddq_f64(v13, vcvtq_f64_f32(vcvt_f32_f64(v18)));
    float64x2_t v20 = vaddq_f64(v19, v12);
    int8x16_t v21 = (int8x16_t)vmaxnmq_f64((float64x2_t)v15, v19);
    int8x16_t v22 = (int8x16_t)vsubq_f64(vminnmq_f64(vaddq_f64((float64x2_t)v15, v12), v20), (float64x2_t)v21);
    int8x16_t v23 = (int8x16_t)vclezq_f64((float64x2_t)v22);
    int8x16_t v24 = (int8x16_t)vdupq_laneq_s64((int64x2_t)v23, 1);
    int64x2_t v25 = (int64x2_t)vorrq_s8(v24, v23);
    v24.i64[0] = -1;
    int8x16_t v26 = (int8x16_t)vdupq_lane_s64(vcgtq_s64(v25, (int64x2_t)v24).i64[0], 0);
    int8x16_t v15 = vbslq_s8(v26, v21, v15);
    int8x16_t v27 = vandq_s8(v22, v26);
  }
  int8x16_t v28 = (int8x16_t)vclezq_f64((float64x2_t)v27);
  int64x2_t v29 = (int64x2_t)vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v28, 1), v28);
  if (((v29.i64[0] | v17) & 0x8000000000000000) != 0)
  {
    v10.f64[0] = 0.0;
    int8x16_t v38 = vandq_s8(v27, (int8x16_t)vdupq_lane_s64(vcgtq_s64((int64x2_t)v10, v29).i64[0], 0));
  }
  else
  {
    v10.f64[1] = v11;
    float64x2_t v30 = vaddq_f64(v13, vcvtq_f64_f32(vcvt_f32_f64(v10)));
    float64x2_t v31 = vaddq_f64(v30, v12);
    int8x16_t v32 = (int8x16_t)vmaxnmq_f64((float64x2_t)v15, v30);
    int8x16_t v33 = (int8x16_t)vsubq_f64(vminnmq_f64(vaddq_f64((float64x2_t)v15, (float64x2_t)v27), v31), (float64x2_t)v32);
    int8x16_t v34 = (int8x16_t)vclezq_f64((float64x2_t)v33);
    int8x16_t v35 = (int8x16_t)vdupq_laneq_s64((int64x2_t)v34, 1);
    int64x2_t v36 = (int64x2_t)vorrq_s8(v35, v34);
    v35.i64[0] = -1;
    int8x16_t v37 = (int8x16_t)vdupq_lane_s64(vcgtq_s64(v36, (int64x2_t)v35).i64[0], 0);
    int8x16_t v15 = vbslq_s8(v37, v32, v15);
    int8x16_t v38 = vandq_s8(v33, v37);
  }
  *a4 = (float64x2_t)v15;
  a4[1] = (float64x2_t)v38;
}

float64x2_t CA::OGL::ChromaticAberrationFilter::DOD(CA::OGL::ChromaticAberrationFilter *this, const CA::Render::Filter *a2, const CA::Render::Layer *a3, float64x2_t *a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *((void *)a2 + 5);
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  vec2_keCGFloat y = CA::Render::KeyValueArray::get_vec2_key(v5, 311, (uint64_t)&v20);
  float64_t v18 = v7;
  float64_t v19 = vec2_key;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  double v8 = CA::Render::KeyValueArray::get_vec2_key(v5, 298, (uint64_t)&v20);
  float64_t v16 = v9;
  float64_t v17 = v8;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  v10.f64[0] = CA::Render::KeyValueArray::get_vec2_key(v5, 283, (uint64_t)&v20);
  v11.f64[0] = v19;
  v11.f64[1] = v18;
  *(float32x2_t *)&v11.f64[0] = vcvt_f32_f64(v11);
  v12.f64[0] = v17;
  v12.f64[1] = v16;
  *(float32x2_t *)&v12.f64[0] = vcvt_f32_f64(v12);
  v10.f64[1] = v13;
  *(float32x2_t *)&v10.f64[0] = vcvt_f32_f64(v10);
  float32x2_t v14 = vminnm_f32(*(float32x2_t *)&v11.f64[0], vminnm_f32(*(float32x2_t *)&v12.f64[0], vminnm_f32(*(float32x2_t *)&v10.f64[0], 0)));
  float64x2_t result = vaddq_f64(a4[1], vcvtq_f64_f32(vadd_f32(vmaxnm_f32(*(float32x2_t *)&v11.f64[0], vmaxnm_f32(*(float32x2_t *)&v12.f64[0], vmaxnm_f32(*(float32x2_t *)&v10.f64[0], 0))), vabs_f32(v14))));
  *a4 = vaddq_f64(*a4, vcvtq_f64_f32(v14));
  a4[1] = result;
  return result;
}

uint64_t CA::OGL::ChromaticAberrationFilter::empty_opaque_shape(CA::OGL::ChromaticAberrationFilter *this, const CA::Render::Filter *a2, const CA::Render::Layer *a3)
{
  return 0;
}

BOOL CA::OGL::ChromaticAberrationFilter::identity(CA::OGL::ChromaticAberrationFilter *this, const CA::Render::Filter *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)a2 + 5);
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  vec2_keCGFloat y = CA::Render::KeyValueArray::get_vec2_key(v2, 311, (uint64_t)&v13);
  double v5 = v4;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  double v6 = CA::Render::KeyValueArray::get_vec2_key(v2, 298, (uint64_t)&v13);
  double v8 = v7;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  double v9 = CA::Render::KeyValueArray::get_vec2_key(v2, 283, (uint64_t)&v13);
  BOOL v11 = vec2_key == 0.0;
  if (v5 != 0.0) {
    BOOL v11 = 0;
  }
  if (v6 != 0.0) {
    BOOL v11 = 0;
  }
  if (v8 != 0.0) {
    BOOL v11 = 0;
  }
  if (v9 != 0.0) {
    BOOL v11 = 0;
  }
  return v10 == 0.0 && v11;
}

uint64_t CA::OGL::LayerDODFilter::source_requirement(CA::OGL::LayerDODFilter *this, const CA::Render::Filter *a2)
{
  return 4;
}

uint64_t CA::OGL::LayerDODFilter::can_render()
{
  return 1;
}

float64_t CA::OGL::LayerDODFilter::ROI(CA::OGL::LayerDODFilter *this, const CA::Render::Filter *a2, float64x2_t *a3, float64x2_t *a4)
{
  float64x2_t v4 = a4[1];
  int64x2_t v5 = vclezq_f64(v4);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v5, 1), (int8x16_t)v5).u64[0] & 0x8000000000000000) != 0
    || (float64x2_t v6 = a3[5],
        int64x2_t v7 = vclezq_f64(v6),
        (vorrq_s8((int8x16_t)vdupq_laneq_s64(v7, 1), (int8x16_t)v7).u64[0] & 0x8000000000000000) != 0)
    || (float64x2_t v8 = a3[4],
        int64x2_t v9 = vclezq_f64(vsubq_f64(vminnmq_f64(vaddq_f64(*a4, v4), vaddq_f64(v8, v6)), vmaxnmq_f64(*a4, v8))),
        (vorrq_s8((int8x16_t)vdupq_laneq_s64(v9, 1), (int8x16_t)v9).u64[0] & 0x8000000000000000) != 0))
  {
    v10.f64[0] = 0.0;
    *a4 = 0u;
    a4[1] = 0u;
  }
  else
  {
    *a4 = v8;
    float64x2_t v10 = a3[5];
    a4[1] = v10;
  }
  return v10.f64[0];
}

float64_t CA::OGL::LayerDODFilter::DOD(CA::OGL::LayerDODFilter *this, const CA::Render::Filter *a2, float64x2_t *a3, float64x2_t *a4)
{
  float64x2_t v4 = a4[1];
  int64x2_t v5 = vclezq_f64(v4);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v5, 1), (int8x16_t)v5).u64[0] & 0x8000000000000000) != 0
    || (float64x2_t v6 = a3[5],
        int64x2_t v7 = vclezq_f64(v6),
        (vorrq_s8((int8x16_t)vdupq_laneq_s64(v7, 1), (int8x16_t)v7).u64[0] & 0x8000000000000000) != 0)
    || (float64x2_t v8 = a3[4],
        int64x2_t v9 = vclezq_f64(vsubq_f64(vminnmq_f64(vaddq_f64(*a4, v4), vaddq_f64(v8, v6)), vmaxnmq_f64(*a4, v8))),
        (vorrq_s8((int8x16_t)vdupq_laneq_s64(v9, 1), (int8x16_t)v9).u64[0] & 0x8000000000000000) != 0))
  {
    v10.f64[0] = 0.0;
    *a4 = 0u;
    a4[1] = 0u;
  }
  else
  {
    *a4 = v8;
    float64x2_t v10 = a3[5];
    a4[1] = v10;
  }
  return v10.f64[0];
}

float32x2_t *CA::OGL::get_filter_apl_params(float32x2_t *this, const CA::Render::Filter *a2, int a3, int a4)
{
  this[2] = 0;
  *this = 0;
  this[1] = (float32x2_t)0x3E851EB83E5A1CACLL;
  this[2].i32[0] = 1057417593;
  if (a3) {
    char v4 = 2;
  }
  else {
    char v4 = 0;
  }
  this[2].i8[4] = v4;
  if (a2 && *((_DWORD *)a2 + 6) == 352)
  {
    float64x2_t v6 = this;
    int64x2_t v7 = (unsigned int *)*((void *)a2 + 5);
    float32_t float_key = CA::Render::KeyValueArray::get_float_key((CA::Render::KeyValueArray *)v7, 276, 1.0);
    v6->f32[0] = float_key;
    float32_t v9 = CA::Render::KeyValueArray::get_float_key((CA::Render::KeyValueArray *)v7, 314, 0.0);
    v6->f32[1] = v9;
    BOOL v10 = CA::Render::KeyValueArray::get_int_key((CA::Render::KeyValueArray *)v7, 320, 0) != 0;
    this = (float32x2_t *)CA::Render::KeyValueArray::get_int_key((CA::Render::KeyValueArray *)v7, 291, 1);
    if (v7)
    {
      uint64_t v11 = v7[4];
      if (v11)
      {
        uint64_t v12 = 0;
        while (1)
        {
          uint64_t v13 = *(void *)&v7[2 * v12 + 6];
          if (*(_DWORD *)(v13 + 16) == 321) {
            break;
          }
          if (v11 == ++v12) {
            goto LABEL_17;
          }
        }
        if ((v12 & 0x80000000) == 0)
        {
          uint64_t v14 = *(void *)(v13 + 24);
          if (v14)
          {
            if (*(unsigned char *)(v14 + 12) == 56 && *(_DWORD *)(v14 + 16) >= 3u)
            {
              v6[1] = vcvt_f32_f64(*(float64x2_t *)(v14 + 24));
              float32_t v15 = *(double *)(v14 + 40);
              v6[2].f32[0] = v15;
            }
          }
        }
      }
    }
LABEL_17:
    if (a4) {
      char v16 = 16;
    }
    else {
      char v16 = 0;
    }
    v6[2].i8[4] = (4 * (this != 0)) | (8 * v10) | v4 | v16 | 1;
  }
  return this;
}

float CA::OGL::edr_gain_filter_gain(CA::OGL *this, const CA::Render::Filter *a2, float a3, float a4)
{
  float v6 = 1.0 / a3;
  float float_key = CA::Render::KeyValueArray::get_float_key(this, 276, (float)(1.0 / a3));
  if (v6 <= float_key) {
    float float_key = v6;
  }
  float v8 = float_key + -1.0;
  if (v8 >= 0.0) {
    float v9 = v8;
  }
  else {
    float v9 = 0.0;
  }
  float v10 = CA::Render::KeyValueArray::get_float_key(this, 314, 1.0);
  if (v10 > 1.0) {
    float v10 = 1.0;
  }
  if (v10 < 0.0) {
    float v10 = 0.0;
  }
  return powf(v10, a4) * v9;
}

uint64_t CA::OGL::render_distance_field_filter(void *a1, unsigned int *a2, int *a3, float a4)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v27 = 0;
  if (!a2) {
    goto LABEL_14;
  }
  uint64_t v8 = a2[4];
  if (!v8) {
    goto LABEL_14;
  }
  uint64_t v9 = 0;
  while (1)
  {
    uint64_t v10 = *(void *)&a2[2 * v9 + 6];
    if (*(_DWORD *)(v10 + 16) == 468) {
      break;
    }
    if (v8 == ++v9) {
      goto LABEL_14;
    }
  }
  if ((v9 & 0x80000000) == 0 && (uint64_t v11 = *(void *)(v10 + 24)) != 0 && *(unsigned char *)(v11 + 12) == 49)
  {
    LODWORD(v27) = 1;
    uint64_t v12 = (const char *)(v11 + 28);
    if (!strcmp((const char *)(v11 + 28), "stroke"))
    {
      int v13 = 2;
    }
    else if (!strcmp(v12, "innerStroke"))
    {
      int v13 = 3;
    }
    else
    {
      if (strcmp(v12, "outerStroke")) {
        goto LABEL_16;
      }
      int v13 = 4;
    }
  }
  else
  {
LABEL_14:
    int v13 = 1;
  }
  LODWORD(v27) = v13;
LABEL_16:
  BYTE4(v27) = CA::Render::KeyValueArray::get_int_key((CA::Render::KeyValueArray *)a2, 336, 0) != 0;
  float float_key = CA::Render::KeyValueArray::get_float_key((CA::Render::KeyValueArray *)a2, 404, 0.5);
  float v28 = float_key;
  float v15 = CA::Render::KeyValueArray::get_float_key((CA::Render::KeyValueArray *)a2, 358, 0.0);
  float v29 = v15;
  float v16 = CA::Render::KeyValueArray::get_float_key((CA::Render::KeyValueArray *)a2, 507, 0.0);
  float v30 = v16;
  *(void *)(a1[2] + 360) = &v27;
  float32x4_t v31 = 0uLL;
  if (CA::Render::KeyValueArray::get_float_color_key((CA::Render::KeyValueArray *)a2, 286, &v31)) {
    unsigned int v17 = -1;
  }
  else {
    unsigned int v17 = 0;
  }
  double v18 = COERCE_DOUBLE(vbsl_s8((int8x8_t)vdup_n_s16(v17), (int8x8_t)vcvt_f16_f32(v31), (int8x8_t)0x3C003C003C003C00));
  float64_t v19 = (float16x4_t *)a1[2];
  double v20 = COERCE_DOUBLE(vcvt_f16_f32(vmulq_f32(vcvtq_f32_f16(v19[1]), vcvtq_f32_f16(*(float16x4_t *)&v18))));
  if (*(void *)&v19[1] != 0x3C003C003C003C00) {
    double v18 = v20;
  }
  *(double *)&v19[1] = v18;
  uint64_t v21 = a1[2];
  uint64_t v22 = *(void *)(v21 + 360);
  uint64_t v23 = *(void *)(v21 + 8);
  if (v23 == 0x3C003C003C003C00) {
    char v24 = 1;
  }
  else {
    char v24 = 3;
  }
  *(unsigned char *)(v21 + 16) = v24;
  CA::OGL::Context::bind_surface((uint64_t)a1, (uint64_t)a3, 0, a4 != 1.0, a4 != 1.0, 0.0);
  if (*(_DWORD *)v22 == 1) {
    char v25 = 24;
  }
  else {
    char v25 = 26;
  }
  *(unsigned char *)(a1[2] + 17) = v25 | (*(float *)(v22 + 16) > 0.0);
  v31.i64[0] = v23;
  CA::OGL::emit_filter_quads_color((uint64_t)a1, a3, (uint64_t *)&v31, a4);
  uint64_t result = CA::OGL::Context::unbind_surface(a1, (uint64_t)a3, 0);
  *(unsigned char *)(a1[2] + 16) = 0;
  *(void *)(a1[2] + 360) = 0;
  return result;
}

uint64_t CA::OGL::render_hue_rotate(void *a1, CA::Render::KeyValueArray *this, int *a3, float a4)
{
  *(double *)&int32x2_t v7 = CA::Render::KeyValueArray::get_float_key(this, 277, 0.0) * 0.159154937;
  *(float *)v7.i32 = *(double *)v7.i32;
  int32x2_t v9 = v7;
  CA::OGL::bind_filter_surface((uint64_t)a1, (uint64_t)a3, a4);
  *(unsigned char *)(a1[2] + 16) = 53;
  *(int32x4_t *)(a1[2] + 24) = vdupq_lane_s32(v9, 0);
  uint64_t result = CA::OGL::emit_filter_quads((uint64_t)a1, a3, a4);
  if ((int *)a1[33] != a3) {
    uint64_t result = CA::OGL::Context::unbind_surface(a1, (uint64_t)a3, 0);
  }
  *(unsigned char *)(a1[2] + 16) = 0;
  *(unsigned char *)(a1[2] + 19) = 0;
  return result;
}

uint64_t CA::OGL::render_luminance_map(uint64_t result, uint64_t a2, int *a3, float a4)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a2 + 40);
  if (v4)
  {
    uint64_t v5 = *(unsigned int *)(v4 + 16);
    if (v5)
    {
      uint64_t v9 = result;
      uint64_t v10 = 0;
      uint64_t v11 = v4 + 24;
      while (1)
      {
        uint64_t v12 = *(void *)(v11 + 8 * v10);
        if (*(_DWORD *)(v12 + 16) == 289) {
          break;
        }
        if (v5 == ++v10) {
          return result;
        }
      }
      if ((v10 & 0x80000000) == 0)
      {
        uint64_t result = *(void *)(v12 + 24);
        if (result)
        {
          uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 80))(result);
          if (result)
          {
            int v13 = (uint32x2_t *)result;
            double float_key = CA::Render::KeyValueArray::get_float_key(*(CA::Render::KeyValueArray **)(a2 + 40), 276, 1.0);
            CA::OGL::bind_filter_surface(v9, (uint64_t)a3, a4);
            *(unsigned char *)(*(void *)(v9 + 16) + 16) = 50;
            float32x4_t v29 = 0uLL;
            uint64_t result = (uint64_t)CA::OGL::Context::bind_image(v9, 1u, v13, (double *)0x100, 1u, 1, 0, 0, 0.0, &v29, 0);
            if (result)
            {
              uint64_t v16 = result;
              *(float *)v15.i32 = float_key;
              *(unsigned char *)(*(void *)(v9 + 16) + 20) = 4;
              *(int32x4_t *)(*(void *)(v9 + 16) + 24) = vdupq_lane_s32(v15, 0);
              long long v28 = 0u;
              uint64_t v17 = *(void *)(*(void *)(v9 + 248) + 8);
              v26[0] = v9;
              v26[1] = v17;
              long long v27 = 0u;
              double v26[2] = 0;
              WORD4(v27) = 256;
              CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)v26);
              v25[0] = 0;
              v25[1] = 0;
              while (CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)v26, v25))
              {
                if (*(_DWORD *)(v9 + 92)) {
                  uint64_t v18 = 6;
                }
                else {
                  uint64_t v18 = 4;
                }
                if ((unint64_t)(*(void *)(v9 + 128) + 4) > *(void *)(v9 + 136)
                  || (unint64_t v19 = *(void *)(v9 + 112)) != 0 && *(void *)(v9 + 104) + v18 > v19)
                {
                  *(_WORD *)(v9 + 832) |= 0x20u;
                  CA::OGL::Context::array_flush(v9);
                  *(void *)(v9 + 128) = 0;
                  *(void *)(v9 + 96) = v9 + 834;
                  *(_OWORD *)(v9 + 104) = xmmword_184997E70;
                }
                CA::OGL::Context::array_rect((void *)v9, (float)a3[8] * a4, (float)a3[9] * a4, (float)(a3[10] + a3[8]) * a4, (float)(a3[11] + a3[9]) * a4);
                float v20 = (float)a3[10];
                float v21 = (float)a3[11];
                uint64_t v22 = *(void *)(v9 + 120) + 48 * *(void *)(v9 + 128);
                *(void *)(v22 - 176) = 0;
                *(float *)(v22 - 128) = v20;
                *(_DWORD *)(v22 - 124) = 0;
                *(float *)(v22 - 80) = v20;
                *(float *)(v22 - 76) = v21;
                *(_DWORD *)(v22 - 32) = 0;
                *(float *)(v22 - 28) = v21;
                __int32 v23 = v29.i32[0];
                __int32 v24 = v29.i32[2];
                *(_DWORD *)(v22 - 168) = v29.i32[0];
                *(_DWORD *)(v22 - 164) = v24;
                *(_DWORD *)(v22 - 120) = v23;
                *(_DWORD *)(v22 - 116) = v24;
                *(_DWORD *)(v22 - 72) = v23;
                *(_DWORD *)(v22 - 68) = v24;
                *(_DWORD *)(v22 - 24) = v23;
                *(_DWORD *)(v22 - 20) = v24;
              }
              *(unsigned char *)(*(void *)(v9 + 16) + 20) = 0;
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9 + 520))(v9, v16, 1);
            }
            if (*(int **)(v9 + 264) != a3) {
              uint64_t result = CA::OGL::Context::unbind_surface((void *)v9, (uint64_t)a3, 0);
            }
            *(unsigned char *)(*(void *)(v9 + 16) + 16) = 0;
            *(unsigned char *)(*(void *)(v9 + 16) + 19) = 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t CA::OGL::render_curves(void *a1, unsigned int *a2, int *a3, float a4)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    float v11 = CA::OGL::curve_horner_coeffecients(0, 0);
    int v13 = v12;
    int v15 = v14;
    int v17 = v16;
    uint64_t v18 = 0;
    float v19 = v11;
    int v20 = v12;
    int v21 = v14;
    int v22 = v16;
    float v68 = v11;
    int v69 = v12;
    int v70 = v14;
    int v71 = v16;
    goto LABEL_21;
  }
  uint64_t v7 = a2[4];
  if (v7)
  {
    uint64_t v8 = 0;
    while (1)
    {
      uint64_t v9 = *(void *)&a2[2 * v8 + 6];
      if (*(_DWORD *)(v9 + 16) == 312) {
        break;
      }
      if (v7 == ++v8) {
        goto LABEL_11;
      }
    }
    if ((v8 & 0x80000000) == 0)
    {
      long long v27 = *(CA::OGL **)(v9 + 24);
      goto LABEL_12;
    }
LABEL_11:
    long long v27 = 0;
LABEL_12:
    float v29 = CA::OGL::curve_horner_coeffecients(v27, (CA::Render::Object *)a2);
    int v66 = v30;
    int v67 = v31;
    float v64 = v29;
    int v65 = v32;
    uint64_t v33 = 0;
    while (1)
    {
      uint64_t v34 = *(void *)&a2[2 * v33 + 6];
      if (*(_DWORD *)(v34 + 16) == 299) {
        break;
      }
      if (v7 == ++v33) {
        goto LABEL_26;
      }
    }
    if ((v33 & 0x80000000) == 0)
    {
      unsigned int v46 = *(CA::OGL **)(v34 + 24);
      goto LABEL_27;
    }
LABEL_26:
    unsigned int v46 = 0;
LABEL_27:
    float v48 = CA::OGL::curve_horner_coeffecients(v46, v28);
    int v62 = v50;
    int v63 = v51;
    float v61 = v48;
    uint64_t v52 = 0;
    while (1)
    {
      uint64_t v53 = *(void *)&a2[2 * v52 + 6];
      if (*(_DWORD *)(v53 + 16) == 284) {
        break;
      }
      if (v7 == ++v52) {
        goto LABEL_34;
      }
    }
    if ((v52 & 0x80000000) == 0)
    {
      int v22 = v49;
      float v54 = *(CA::OGL **)(v53 + 24);
      goto LABEL_35;
    }
LABEL_34:
    int v22 = v49;
    float v54 = 0;
LABEL_35:
    float v55 = CA::OGL::curve_horner_coeffecients(v54, v47);
    int v70 = v56;
    int v71 = v57;
    float v68 = v55;
    int v69 = v58;
    uint64_t v59 = 0;
    while (1)
    {
      uint64_t v60 = *(void *)&a2[2 * v59 + 6];
      if (*(_DWORD *)(v60 + 16) == 275) {
        break;
      }
      if (v7 == ++v59) {
        goto LABEL_19;
      }
    }
    if ((v59 & 0x80000000) == 0)
    {
      uint64_t v18 = *(CA::OGL **)(v60 + 24);
      goto LABEL_20;
    }
  }
  else
  {
    float v64 = CA::OGL::curve_horner_coeffecients(0, (CA::Render::Object *)a2);
    int v65 = v23;
    int v66 = v25;
    int v67 = v26;
    float v61 = CA::OGL::curve_horner_coeffecients(0, v24);
    int v62 = v35;
    int v63 = v38;
    int v22 = v37;
    float v68 = CA::OGL::curve_horner_coeffecients(0, v36);
    int v69 = v39;
    int v70 = v40;
    int v71 = v41;
  }
LABEL_19:
  uint64_t v18 = 0;
LABEL_20:
  int v15 = v66;
  int v17 = v67;
  float v11 = v64;
  int v13 = v65;
  int v20 = v62;
  int v21 = v63;
  float v19 = v61;
LABEL_21:
  *(float *)long long v73 = v11;
  *(float *)&v73[1] = v19;
  *(float *)&v73[2] = v68;
  v73[3] = CA::OGL::curve_horner_coeffecients(v18, v10);
  v73[4] = v13;
  v73[5] = v20;
  v73[6] = v69;
  v73[7] = v42;
  v73[8] = v15;
  v73[9] = v21;
  v73[10] = v70;
  v73[11] = v43;
  v73[12] = v17;
  v73[13] = v22;
  v73[14] = v71;
  v73[15] = v44;
  CA::OGL::bind_filter_surface((uint64_t)a1, (uint64_t)a3, a4);
  *(unsigned char *)(a1[2] + 16) = 52;
  (*(void (**)(void *, void, uint64_t, uint64_t, _DWORD *))(*a1 + 1000))(a1, 0, 4, 4, v73);
  uint64_t result = CA::OGL::emit_filter_quads((uint64_t)a1, a3, a4);
  if ((int *)a1[33] != a3) {
    uint64_t result = CA::OGL::Context::unbind_surface(a1, (uint64_t)a3, 0);
  }
  *(unsigned char *)(a1[2] + 16) = 0;
  *(unsigned char *)(a1[2] + 19) = 0;
  return result;
}

uint64_t CA::OGL::render_compress_luminance_filter(uint64_t a1, CA::Render::KeyValueArray *this, int *a3, float a4, float a5)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  float float_key = CA::Render::KeyValueArray::get_float_key(this, 276, 0.5);
  if (float_key > 1.0) {
    float float_key = 1.0;
  }
  if (float_key >= 0.0) {
    float v10 = float_key;
  }
  else {
    float v10 = 0.0;
  }
  CA::OGL::bind_filter_surface(a1, (uint64_t)a3, a5);
  uint64_t v11 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v21 = 0;
  memset(&v20[2], 0, 32);
  memset(v20, 0, 32);
  uint64_t v12 = *(void *)(a1 + 248);
  *(_OWORD *)((char *)v20 + 8) = *(_OWORD *)(v12 + 8);
  uint64_t v13 = *(void *)(v12 + 32);
  *((void *)&v20[1] + 1) = *(void *)(v12 + 24);
  *(void *)&void v20[2] = v13;
  *(_OWORD *)((char *)&v20[2] + 8) = *(_OWORD *)(v12 + 40);
  *((void *)&v20[3] + 1) = *(void *)(v12 + 56);
  __int16 v14 = *(_WORD *)(v12 + 68);
  LODWORD(v21) = *(_DWORD *)(v12 + 64);
  HIDWORD(v21) = v14 & 0x5FF;
  *(void *)&v20[0] = CA::OGL::Context::set_gstate(a1, (uint64_t)v20);
  *(unsigned char *)(*(void *)(a1 + 16) + 16) = 54;
  uint64_t v15 = *(void *)(a1 + 16);
  *(unsigned char *)(v15 + 480) = 58;
  float v16 = (float)(1.0 / a4) - v10;
  if (v16 <= 0.0019531) {
    float v17 = v10 * 511.0;
  }
  else {
    float v17 = (float)((float)(1.0 / a4) * v10) / v16;
  }
  *(float *)(v15 + 24) = v17;
  *(void *)(v15 + 32) = 0;
  *(_DWORD *)(v15 + 28) = 0;
  uint64_t v19 = v11;
  CA::OGL::emit_filter_quads_color(a1, a3, &v19, a5);
  uint64_t result = CA::OGL::Context::set_gstate(a1, **(void **)(a1 + 248));
  if (*(int **)(a1 + 264) != a3) {
    uint64_t result = CA::OGL::Context::unbind_surface((void *)a1, (uint64_t)a3, 0);
  }
  *(unsigned char *)(*(void *)(a1 + 16) + 16) = 0;
  *(unsigned char *)(*(void *)(a1 + 16) + 19) = 0;
  return result;
}

void CA::OGL::render_opacity_pair_filter(void *a1, CA::Render::KeyValueArray *this, int *a3, float a4)
{
  float float_key = CA::Render::KeyValueArray::get_float_key(this, 276, 0.0);
  if (float_key > 1.0) {
    float float_key = 1.0;
  }
  int32x2_t v8 = 0;
  if (float_key >= 0.0) {
    *(float *)v8.i32 = float_key;
  }
  if (*(float *)v8.i32 <= 0.99804)
  {
    int32x2_t v9 = v8;
    CA::OGL::bind_filter_surface((uint64_t)a1, (uint64_t)a3, a4);
    *(unsigned char *)(a1[2] + 16) = 62;
    *(int32x4_t *)(a1[2] + 24) = vdupq_lane_s32(v9, 0);
    CA::OGL::emit_filter_quads((uint64_t)a1, a3, a4);
    if ((int *)a1[33] != a3) {
      CA::OGL::Context::unbind_surface(a1, (uint64_t)a3, 0);
    }
    *(unsigned char *)(a1[2] + 16) = 0;
    *(unsigned char *)(a1[2] + 19) = 0;
  }
}

uint64_t CA::OGL::render_alpha_threshold_filter(void *a1, CA::Render::KeyValueArray *this, int *a3, float a4)
{
  v18[1] = *MEMORY[0x1E4F143B8];
  float float_key = CA::Render::KeyValueArray::get_float_key(this, 276, 0.5);
  v13.i64[0] = 0;
  v13.i64[1] = 0x3F80000000000000;
  CA::Render::KeyValueArray::get_float_color_key(this, 286, &v13);
  float32x4_t v15 = v13;
  float v14 = float_key;
  CA::OGL::bind_filter_surface((uint64_t)a1, (uint64_t)a3, a4);
  v18[0] = vmul_f32(*(float32x2_t *)(a1[2] + 96), (float32x2_t)0x3F0000003F000000);
  uint64_t v17 = 0;
  memset(&v16[2], 0, 32);
  memset(v16, 0, 32);
  uint64_t v9 = a1[31];
  *(_OWORD *)((char *)v16 + 8) = *(_OWORD *)(v9 + 8);
  uint64_t v10 = *(void *)(v9 + 32);
  *((void *)&v16[1] + 1) = *(void *)(v9 + 24);
  *(void *)&void v16[2] = v10;
  *(_OWORD *)((char *)&v16[2] + 8) = *(_OWORD *)(v9 + 40);
  *((void *)&v16[3] + 1) = *(void *)(v9 + 56);
  __int16 v11 = *(_WORD *)(v9 + 68);
  LODWORD(v17) = *(_DWORD *)(v9 + 64);
  HIDWORD(v17) = v11 & 0x5FF;
  *(void *)&v16[0] = CA::OGL::Context::set_gstate((uint64_t)a1, (uint64_t)v16);
  *(unsigned char *)(a1[2] + 16) = 69;
  (*(void (**)(void *, void, uint64_t, uint64_t, void *))(*a1 + 1000))(a1, 0, 2, 1, v18);
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t, float32x4_t *))(*a1 + 1000))(a1, 1, 4, 1, &v15);
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t, float *))(*a1 + 1000))(a1, 2, 1, 1, &v14);
  CA::OGL::emit_filter_quads((uint64_t)a1, a3, a4);
  *(unsigned char *)(a1[2] + 16) = 0;
  uint64_t result = CA::OGL::Context::set_gstate((uint64_t)a1, *(void *)a1[31]);
  if ((int *)a1[33] != a3) {
    uint64_t result = CA::OGL::Context::unbind_surface(a1, (uint64_t)a3, 0);
  }
  *(unsigned char *)(a1[2] + 16) = 0;
  *(unsigned char *)(a1[2] + 19) = 0;
  return result;
}

uint64_t CA::OGL::render_meteor_filter(uint64_t a1, CA::Render::KeyValueArray *this, int *a3, float a4, float a5)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  float v9 = 1.0 / a4;
  float v10 = 4.0;
  BOOL v11 = v9 > 4.0 || v9 < 1.0;
  if (v9 < 1.0 && v9 <= 4.0) {
    float v10 = 1.0;
  }
  if (v11) {
    float v9 = v10;
  }
  double v12 = v9;
  float float_key = CA::Render::KeyValueArray::get_float_key(this, 276, v9);
  float v14 = CA::Render::KeyValueArray::get_float_key(this, 314, 1.0);
  if (v14 > 1.0) {
    float v14 = 1.0;
  }
  if (v14 >= 0.0) {
    float v15 = v14;
  }
  else {
    float v15 = 0.0;
  }
  float v16 = log2f(float_key);
  float v17 = exp2f(v15 * v16);
  CA::OGL::bind_filter_surface(a1, (uint64_t)a3, a5);
  uint64_t v18 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v29 = 0;
  memset(&v28[2], 0, 32);
  memset(v28, 0, 32);
  uint64_t v19 = *(void *)(a1 + 248);
  *(_OWORD *)((char *)v28 + 8) = *(_OWORD *)(v19 + 8);
  uint64_t v20 = *(void *)(v19 + 32);
  *((void *)&v28[1] + 1) = *(void *)(v19 + 24);
  *(void *)&double v28[2] = v20;
  *(_OWORD *)((char *)&v28[2] + 8) = *(_OWORD *)(v19 + 40);
  *((void *)&v28[3] + 1) = *(void *)(v19 + 56);
  __int16 v21 = *(_WORD *)(v19 + 68);
  LODWORD(v29) = *(_DWORD *)(v19 + 64);
  HIDWORD(v29) = v21 & 0x5FF;
  *(void *)&v28[0] = CA::OGL::Context::set_gstate(a1, (uint64_t)v28);
  *(unsigned char *)(*(void *)(a1 + 16) + 16) = 63;
  double v22 = v17 * 0.333333333 + -0.333333333;
  if (v22 >= v12 * 0.487804878 + -0.487804878) {
    double v22 = v12 * 0.487804878 + -0.487804878;
  }
  float v23 = v22;
  float v24 = powf(3.2185, 1.0 / *(float *)(a1 + 152));
  uint64_t v25 = *(void *)(a1 + 16);
  *(float *)(v25 + 24) = v23;
  *(float *)(v25 + 28) = v24;
  *(void *)(v25 + 32) = 0x3F80000000000000;
  uint64_t v27 = v18;
  CA::OGL::emit_filter_quads_color(a1, a3, &v27, a5);
  uint64_t result = CA::OGL::Context::set_gstate(a1, **(void **)(a1 + 248));
  if (*(int **)(a1 + 264) != a3) {
    uint64_t result = CA::OGL::Context::unbind_surface((void *)a1, (uint64_t)a3, 0);
  }
  *(unsigned char *)(*(void *)(a1 + 16) + 16) = 0;
  *(unsigned char *)(*(void *)(a1 + 16) + 19) = 0;
  return result;
}

uint64_t CA::OGL::render_srl_filter(uint64_t a1, CA::Render::KeyValueArray *this, int *a3, float a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  float float_key = CA::Render::KeyValueArray::get_float_key(this, 276, 0.5);
  CA::OGL::bind_filter_surface(a1, (uint64_t)a3, a4);
  uint64_t v8 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v16 = 0;
  memset(&v15[2], 0, 32);
  memset(v15, 0, 32);
  uint64_t v9 = *(void *)(a1 + 248);
  *(_OWORD *)((char *)v15 + 8) = *(_OWORD *)(v9 + 8);
  uint64_t v10 = *(void *)(v9 + 32);
  *((void *)&v15[1] + 1) = *(void *)(v9 + 24);
  *(void *)&unint64_t v15[2] = v10;
  *(_OWORD *)((char *)&v15[2] + 8) = *(_OWORD *)(v9 + 40);
  *((void *)&v15[3] + 1) = *(void *)(v9 + 56);
  __int16 v11 = *(_WORD *)(v9 + 68);
  LODWORD(v16) = *(_DWORD *)(v9 + 64);
  HIDWORD(v16) = v11 & 0x5FF;
  uint64_t v14 = v8;
  *(void *)&v15[0] = CA::OGL::Context::set_gstate(a1, (uint64_t)v15);
  *(unsigned char *)(*(void *)(a1 + 16) + 16) = 64;
  uint64_t v12 = *(void *)(a1 + 16);
  *(float *)(v12 + 24) = float_key;
  *(void *)(v12 + 32) = 0;
  *(_DWORD *)(v12 + 28) = 0;
  CA::OGL::emit_filter_quads_color(a1, a3, &v14, a4);
  uint64_t result = CA::OGL::Context::set_gstate(a1, **(void **)(a1 + 248));
  if (*(int **)(a1 + 264) != a3) {
    uint64_t result = CA::OGL::Context::unbind_surface((void *)a1, (uint64_t)a3, 0);
  }
  *(unsigned char *)(*(void *)(a1 + 16) + 16) = 0;
  *(unsigned char *)(*(void *)(a1 + 16) + 19) = 0;
  return result;
}

uint64_t CA::OGL::render_edr_gain_filter(uint64_t a1, CA::OGL *this, int *a3, float a4, float a5)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  float v8 = CA::OGL::edr_gain_filter_gain(this, this, a4, *(float *)(a1 + 152));
  CA::OGL::bind_filter_surface(a1, (uint64_t)a3, a5);
  uint64_t v9 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v18 = 0;
  memset(&v17[2], 0, 32);
  memset(v17, 0, 32);
  uint64_t v10 = *(void *)(a1 + 248);
  *(_OWORD *)((char *)v17 + 8) = *(_OWORD *)(v10 + 8);
  uint64_t v11 = *(void *)(v10 + 32);
  *((void *)&v17[1] + 1) = *(void *)(v10 + 24);
  *(void *)&void v17[2] = v11;
  *(_OWORD *)((char *)&v17[2] + 8) = *(_OWORD *)(v10 + 40);
  *((void *)&v17[3] + 1) = *(void *)(v10 + 56);
  __int16 v12 = *(_WORD *)(v10 + 68);
  LODWORD(v18) = *(_DWORD *)(v10 + 64);
  HIDWORD(v18) = v12 & 0x5FF;
  uint64_t v16 = v9;
  *(void *)&v17[0] = CA::OGL::Context::set_gstate(a1, (uint64_t)v17);
  *(unsigned char *)(*(void *)(a1 + 16) + 16) = 65;
  float v13 = *(float *)(a1 + 152);
  uint64_t v14 = *(void *)(a1 + 16);
  *(float *)(v14 + 24) = v8;
  *(float *)(v14 + 28) = v13;
  *(float *)(v14 + 32) = 1.0 / v13;
  *(_DWORD *)(v14 + 36) = 0;
  CA::OGL::emit_filter_quads_color(a1, a3, &v16, a5);
  uint64_t result = CA::OGL::Context::set_gstate(a1, **(void **)(a1 + 248));
  if (*(int **)(a1 + 264) != a3) {
    uint64_t result = CA::OGL::Context::unbind_surface((void *)a1, (uint64_t)a3, 0);
  }
  *(unsigned char *)(*(void *)(a1 + 16) + 16) = 0;
  *(unsigned char *)(*(void *)(a1 + 16) + 19) = 0;
  return result;
}

uint64_t CA::OGL::render_edr_gain_multiply_filter(uint64_t a1, CA::OGL *this, int *a3, float a4, float a5)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  float v8 = CA::OGL::edr_gain_filter_gain(this, this, a4, *(float *)(a1 + 152));
  CA::OGL::bind_filter_surface(a1, (uint64_t)a3, a5);
  uint64_t v9 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v18 = 0;
  memset(&v17[2], 0, 32);
  memset(v17, 0, 32);
  *(float *)v10.i32 = powf(v8 + 1.0, 1.0 / *(float *)(a1 + 152));
  int32x2_t v15 = v10;
  uint64_t v11 = *(void *)(a1 + 248);
  *(_OWORD *)((char *)v17 + 8) = *(_OWORD *)(v11 + 8);
  uint64_t v12 = *(void *)(v11 + 32);
  *((void *)&v17[1] + 1) = *(void *)(v11 + 24);
  *(void *)&void v17[2] = v12;
  *(_OWORD *)((char *)&v17[2] + 8) = *(_OWORD *)(v11 + 40);
  *((void *)&v17[3] + 1) = *(void *)(v11 + 56);
  __int16 v13 = *(_WORD *)(v11 + 68);
  LODWORD(v18) = *(_DWORD *)(v11 + 64);
  HIDWORD(v18) = v13 & 0x5FF;
  uint64_t v16 = v9;
  *(void *)&v17[0] = CA::OGL::Context::set_gstate(a1, (uint64_t)v17);
  *(unsigned char *)(*(void *)(a1 + 16) + 16) = 66;
  *(int32x4_t *)(*(void *)(a1 + 16) + 24) = vdupq_lane_s32(v15, 0);
  CA::OGL::emit_filter_quads_color(a1, a3, &v16, a5);
  uint64_t result = CA::OGL::Context::set_gstate(a1, **(void **)(a1 + 248));
  if (*(int **)(a1 + 264) != a3) {
    uint64_t result = CA::OGL::Context::unbind_surface((void *)a1, (uint64_t)a3, 0);
  }
  *(unsigned char *)(*(void *)(a1 + 16) + 16) = 0;
  *(unsigned char *)(*(void *)(a1 + 16) + 19) = 0;
  return result;
}

void CA::OGL::render_3d_lut_filter(void *a1, uint64_t a2, int *a3, float a4)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(unsigned int **)(a2 + 40);
  if (!v7) {
    goto LABEL_12;
  }
  uint64_t v8 = v7[4];
  if (!v8) {
    goto LABEL_12;
  }
  uint64_t v10 = 0;
  while (1)
  {
    uint64_t v11 = *(void *)&v7[2 * v10 + 6];
    if (*(_DWORD *)(v11 + 16) == 321) {
      break;
    }
    if (v8 == ++v10) {
      goto LABEL_12;
    }
  }
  if ((v10 & 0x80000000) == 0 && (uint64_t v12 = *(void *)(v11 + 24)) != 0 && *(unsigned char *)(v12 + 12) == 56)
  {
    uint64_t v13 = (*(uint64_t (**)(void *))(*a1 + 544))(a1);
    uint64_t v7 = *(unsigned int **)(a2 + 40);
    float float_key = CA::Render::KeyValueArray::get_float_key((CA::Render::KeyValueArray *)v7, 314, 1.0);
    if (v13)
    {
      float v15 = 0.0;
LABEL_23:
      CA::OGL::bind_filter_surface((uint64_t)a1, (uint64_t)a3, a4);
      *(unsigned char *)(a1[2] + 16) = 101;
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*a1 + 560))(a1, 1, v13);
      float v22 = 1.0;
      if (v15 <= 1.0) {
        float v22 = v15;
      }
      float v23 = (float32x2_t *)a1[2];
      *(float *)v21.i32 = (float)*(unsigned int *)(v13 + 16);
      v23[3] = vdiv_f32((float32x2_t)(COERCE_UNSIGNED_INT((float)(*(float *)v21.i32 + -1.0) * float_key) | 0x3F00000000000000), (float32x2_t)vdup_lane_s32(v21, 0));
      if (v22 >= 0.0) {
        float v24 = v22;
      }
      else {
        float v24 = 0.0;
      }
      v23[4].f32[0] = v24;
      v23[4].i32[1] = 0;
      CA::OGL::emit_filter_quads((uint64_t)a1, a3, a4);
      (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 520))(a1, v20, 1);
      if ((int *)a1[33] != a3) {
        CA::OGL::Context::unbind_surface(a1, (uint64_t)a3, 0);
      }
      *(unsigned char *)(a1[2] + 16) = 0;
      *(unsigned char *)(a1[2] + 19) = 0;
      return;
    }
  }
  else
  {
LABEL_12:
    float float_key = CA::Render::KeyValueArray::get_float_key((CA::Render::KeyValueArray *)v7, 314, 1.0);
  }
  if (v7)
  {
    uint64_t v16 = v7[4];
    if (v16)
    {
      uint64_t v17 = 0;
      while (1)
      {
        uint64_t v18 = *(void *)&v7[2 * v17 + 6];
        if (*(_DWORD *)(v18 + 16) == 289) {
          break;
        }
        if (v16 == ++v17) {
          return;
        }
      }
      if ((v17 & 0x80000000) == 0)
      {
        uint64_t v19 = *(void *)(v18 + 24);
        if (v19)
        {
          if ((*(uint64_t (**)(void))(*(void *)v19 + 80))(*(void *)(v18 + 24)))
          {
            uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 80))(v19);
            float v15 = 0.0;
            if (*(_DWORD *)(v13 + 20) == *(_DWORD *)(v13 + 16) * *(_DWORD *)(v13 + 16)) {
              goto LABEL_23;
            }
            if (!x_log_hook_p())
            {
              uint64_t v27 = x_log_category_ogl;
              if (!os_log_type_enabled((os_log_t)x_log_category_ogl, OS_LOG_TYPE_ERROR)) {
                return;
              }
              int v28 = *(_DWORD *)(v13 + 16);
              int v29 = *(_DWORD *)(v13 + 20);
              *(_DWORD *)long long buf = 67109376;
              int v42 = v28;
              __int16 v43 = 1024;
              int v44 = v29;
              uint64_t v30 = "Invalid 3D lut image %ux%u";
              int v31 = v27;
              uint32_t v32 = 14;
LABEL_55:
              _os_log_impl(&dword_184668000, v31, OS_LOG_TYPE_ERROR, v30, buf, v32);
              return;
            }
          }
          else
          {
            if (*(unsigned char *)(v19 + 12) != 26) {
              return;
            }
            uint64_t v25 = *(void *)(v19 + 24);
            if (v25) {
              uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)v25 + 80))(v25);
            }
            else {
              uint64_t v26 = 0;
            }
            uint64_t v33 = *(_DWORD **)(v19 + 32);
            if (v33) {
              uint64_t v33 = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)v33 + 80))(v33);
            }
            if (v26)
            {
              int v35 = *(_DWORD *)(v26 + 16);
              int v34 = *(_DWORD *)(v26 + 20);
            }
            else
            {
              int v34 = 0;
              int v35 = 0;
            }
            if (v33)
            {
              int v36 = v33[4];
              int v37 = v33[5];
              if (v26 && v34 == v35 * v35 && v35 == v36 && v37 == v36 * v36)
              {
                double v38 = *(double *)(v19 + 48);
                uint64_t v39 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*a1 + 552))(a1, v19, 3);
                if (!v39) {
                  return;
                }
                uint64_t v13 = v39;
                float v15 = v38;
                goto LABEL_23;
              }
            }
            else
            {
              int v36 = 0;
              int v37 = 0;
            }
            if (!x_log_hook_p())
            {
              uint64_t v40 = x_log_category_ogl;
              if (!os_log_type_enabled((os_log_t)x_log_category_ogl, OS_LOG_TYPE_ERROR)) {
                return;
              }
              *(_DWORD *)long long buf = 67109888;
              int v42 = v35;
              __int16 v43 = 1024;
              int v44 = v34;
              __int16 v45 = 1024;
              int v46 = v36;
              __int16 v47 = 1024;
              int v48 = v37;
              uint64_t v30 = "Invalid 3D lut images %ux%u %ux%u";
              int v31 = v40;
              uint32_t v32 = 26;
              goto LABEL_55;
            }
          }
          x_log_();
        }
      }
    }
  }
}

uint64_t CA::OGL::render_vibrant_filter(void *a1, uint64_t a2, int *a3, float a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  int8x16_t v25 = 0uLL;
  float_color_keCGFloat y = CA::Render::KeyValueArray::get_float_color_key(*(CA::Render::KeyValueArray **)(a2 + 40), 286, (float32x4_t *)&v25);
  int8x16_t v22 = (int8x16_t)vcvtq_f32_f16(vcvt_f16_f32((float32x4_t)v25));
  int8x16_t v25 = 0uLL;
  int v9 = CA::Render::KeyValueArray::get_float_color_key(*(CA::Render::KeyValueArray **)(a2 + 40), 286, (float32x4_t *)&v25);
  int8x16_t v23 = (int8x16_t)vcvtq_f32_f16(vcvt_f16_f32((float32x4_t)v25));
  int_keCGFloat y = CA::Render::KeyValueArray::get_int_key(*(CA::Render::KeyValueArray **)(a2 + 40), 313, 0);
  if (*(_DWORD *)(a2 + 24) == 594) {
    char v11 = 48;
  }
  else {
    char v11 = 49;
  }
  *(unsigned char *)(a1[2] + 16) = v11;
  CA::OGL::Context::bind_surface((uint64_t)a1, (uint64_t)a3, 0, a4 != 1.0, a4 != 1.0, 0.0);
  if (int_key) {
    float v12 = 1.0;
  }
  else {
    float v12 = 0.0;
  }
  float v24 = v12;
  if (float_color_key) {
    unsigned int v13 = -1;
  }
  else {
    unsigned int v13 = 0;
  }
  __asm { FMOV            V2.4S, #1.0 }
  int8x16_t v21 = _Q2;
  int8x16_t v25 = vbslq_s8((int8x16_t)vdupq_n_s32(v13), v22, _Q2);
  (*(void (**)(void *, void, uint64_t, uint64_t, int8x16_t *))(*a1 + 1000))(a1, 0, 4, 1, &v25);
  if (v9) {
    unsigned int v19 = -1;
  }
  else {
    unsigned int v19 = 0;
  }
  int8x16_t v25 = vbslq_s8((int8x16_t)vdupq_n_s32(v19), v23, v21);
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t, int8x16_t *))(*a1 + 1000))(a1, 1, 4, 1, &v25);
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t, float *))(*a1 + 1000))(a1, 2, 1, 1, &v24);
  CA::OGL::emit_filter_quads((uint64_t)a1, a3, a4);
  uint64_t result = CA::OGL::Context::unbind_surface(a1, (uint64_t)a3, 0);
  *(unsigned char *)(a1[2] + 16) = 0;
  return result;
}

uint64_t CA::OGL::render_vibrant_color_matrix(void *a1, CA::OGL *this, CA::ColorMatrix *a3, float a4)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  float32x4_t v66 = 0u;
  float32x4_t v67 = 0u;
  uint64_t v7 = &v63;
  float32x4_t v64 = 0u;
  float32x4_t v65 = 0u;
  float32x4_t v63 = 0u;
  CA::OGL::get_filter_color_matrix(this, (const CA::Render::Filter *)&v63, a3);
  float32x4_t v61 = 0u;
  float32x4_t v62 = 0u;
  float32x4_t v59 = 0u;
  float32x4_t v60 = 0u;
  float32x4_t v58 = 0u;
  uint64_t v8 = (unsigned __int16 *)a1[2];
  uint64_t v9 = v8[4];
  _Q2.i16[0] = v8[5];
  _Q2.i16[2] = v8[6];
  uint64_t v11 = v8[7];
  __int16 v12 = v11;
  v13.i64[0] = _Q2.u32[0];
  v13.i64[1] = _Q2.u32[1];
  v14.i64[0] = 0xFFFFLL;
  v14.i64[1] = 0xFFFFLL;
  _Q0 = (int32x4_t)vshlq_u64((uint64x2_t)vandq_s8(v13, v14), (uint64x2_t)xmmword_184998130);
  uint64_t v50 = _Q2.i64[0];
  if ((_Q0.i64[0] | v9 | _Q0.i64[1] | (v11 << 48)) == 0x3C003C003C003C00)
  {
    int v56 = &v66.i64[1];
    int v57 = &v67.i32[3];
    uint64_t v16 = &v64;
    float v54 = &v67.i64[1];
    float v55 = &v65.i8[4];
    uint64_t v17 = &v65;
    uint64_t v52 = &v67.i8[4];
    uint64_t v53 = &v66.i8[4];
    uint64_t v18 = &v66;
    int v51 = &v64.i32[3];
    unsigned int v19 = &v67;
    int v48 = &v64.i64[1];
    uint64_t v49 = &v65.i32[3];
    int v46 = &v66.i32[3];
    __int16 v47 = &v65.i64[1];
    uint64_t v20 = &v64.i8[4];
  }
  else
  {
    uint64_t v16 = &v61;
    uint64_t v20 = &v61.i8[4];
    uint64_t v17 = &v60;
    uint64_t v18 = &v59;
    int v46 = (__int32 *)((unint64_t)&v59 | 0xC);
    __int16 v47 = &v60.i64[1];
    int v48 = &v61.i64[1];
    uint64_t v49 = (__int32 *)((unint64_t)&v60 | 0xC);
    unsigned int v19 = &v58;
    int v51 = (__int32 *)((unint64_t)&v61 | 0xC);
    uint64_t v52 = &v58.i8[4];
    uint64_t v53 = &v59.i8[4];
    float v54 = &v58.i64[1];
    float v55 = &v60.i8[4];
    int v56 = &v59.i64[1];
    int v57 = (__int32 *)((unint64_t)&v58 | 0xC);
    _Q0.i32[0] = (unsigned __int16)v11;
    float16x4_t v21 = (float16x4_t)vuzp1_s16(*(int16x4_t *)_Q2.i8, *(int16x4_t *)_Q0.i8);
    _Q2.i16[0] = v9;
    __asm
    {
      FCVT            S16, H0
      FCMP            H0, #0
    }
    _Q0.i32[0] = 0;
    if (!(_NF ^ _VF | _ZF)) {
      *(float *)_Q0.i32 = 1.0 / _S16;
    }
    __asm { FCVT            S2, H2 }
    *(float *)_Q2.i32 = *(float *)_Q0.i32 * *(float *)_Q2.i32;
    *(float32x2_t *)_Q0.i8 = vmul_n_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(v21), *(float *)_Q0.i32);
    float32x4_t v62 = vmulq_n_f32(v63, *(float *)_Q2.i32);
    int32x4_t v28 = vzip1q_s32(_Q2, _Q0);
    float32x4_t v29 = vmulq_f32(v64, (float32x4_t)vzip1q_s32(v28, vdupq_lane_s32(*(int32x2_t *)v28.i8, 1)));
    float32x4_t v30 = vmulq_f32(v65, (float32x4_t)vzip1q_s32(_Q0, _Q0));
    *(int32x2_t *)_Q0.i8 = vdup_lane_s32(*(int32x2_t *)_Q0.i8, 1);
    int32x4_t v31 = _Q0;
    *(float *)&v31.i32[1] = _S16;
    float32x4_t v32 = (float32x4_t)vzip1q_s32(v31, v31);
    v32.i32[2] = _Q0.i32[0];
    float32x4_t v60 = v30;
    float32x4_t v61 = v29;
    float32x4_t v58 = vmulq_n_f32(v67, _S16);
    float32x4_t v59 = vmulq_f32(v66, v32);
    uint64_t v7 = &v62;
  }
  CA::OGL::bind_filter_surface((uint64_t)a1, (uint64_t)a3, a4);
  *(unsigned char *)(a1[2] + 16) = 47;
  int v33 = *(_DWORD *)v20;
  __int32 v34 = v7->i32[1];
  v69[0] = v7->i32[0];
  v69[1] = v33;
  __int32 v35 = *v46;
  unint64_t v69[2] = *(_DWORD *)v47;
  v69[3] = v35;
  int v36 = *(_DWORD *)v48;
  v69[4] = v34;
  v69[5] = v36;
  __int32 v37 = v19->i32[0];
  v69[6] = *v49;
  v69[7] = v37;
  __int32 v38 = *v51;
  __int32 v39 = v7->i32[3];
  _OWORD v69[8] = v7->i32[2];
  v69[9] = v38;
  int v40 = *(_DWORD *)v52;
  v69[10] = v18->i32[0];
  v69[11] = v40;
  __int32 v41 = v17->i32[0];
  v69[12] = v39;
  v69[13] = v41;
  int v42 = *(_DWORD *)v54;
  v69[14] = *(_DWORD *)v53;
  v69[15] = v42;
  int v43 = *(_DWORD *)v55;
  v69[16] = v16->i32[0];
  v69[17] = v43;
  __int32 v44 = *v57;
  v69[18] = *(_DWORD *)v56;
  v69[19] = v44;
  (*(void (**)(void *, void, uint64_t, uint64_t, _DWORD *))(*a1 + 1000))(a1, 0, 4, 5, v69);
  LOWORD(v68) = v9;
  WORD1(v68) = v50;
  WORD2(v68) = WORD2(v50);
  HIWORD(v68) = v12;
  uint64_t result = CA::OGL::emit_filter_quads_color((uint64_t)a1, (int *)a3, &v68, a4);
  if ((CA::ColorMatrix *)a1[33] != a3) {
    uint64_t result = CA::OGL::Context::unbind_surface(a1, (uint64_t)a3, 0);
  }
  *(unsigned char *)(a1[2] + 16) = 0;
  *(unsigned char *)(a1[2] + 19) = 0;
  return result;
}

uint64_t CA::OGL::LimitAPL::filter_flags()
{
  return 70;
}

uint64_t CA::OGL::LimitAPL::render(float a1, float a2, uint64_t a3, const CA::Render::Filter *a4, uint64_t a5, void *a6, uint64_t a7)
{
  v13[3] = *(float32x2_t *)MEMORY[0x1E4F143B8];
  CA::OGL::get_filter_apl_params(v13, a4, 0, (*(unsigned __int16 *)(a7 + 75) >> 11) & 1);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t, float32x2_t *))(*a6 + 872))(a6, a7, v13);
  if (result)
  {
    uint64_t v12 = result;
    CA::OGL::emit_limit_apl_dimming(a6, (int *)a7, result, a1 / a2, 0.0, 0.0);
    return (*(uint64_t (**)(void *, uint64_t))(*a6 + 832))(a6, v12);
  }
  return result;
}

BOOL CA::OGL::LimitAPL::can_render(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5 = *(unsigned __int8 *)(a5 + 68);
  return v5 != 12 && (v5 - 1) < 0x19;
}

uint64_t CA::OGL::LimitAPL::identity_opaque_shape(CA::OGL::LimitAPL *this, const CA::Render::Filter *a2, const CA::Render::Layer *a3)
{
  return 1;
}

uint64_t CA::OGL::LimitAPL::empty_opaque_shape(CA::OGL::LimitAPL *this, const CA::Render::Filter *a2, const CA::Render::Layer *a3)
{
  return 0;
}

BOOL CA::OGL::LimitAPL::identity(CA::OGL::LimitAPL *this, CA::Render::KeyValueArray **a2)
{
  float float_key = CA::Render::KeyValueArray::get_float_key(a2[5], 314, 0.0);
  return float_key <= 0.0;
}

uint64_t CA::OGL::AverageColorFilter::filter_flags()
{
  return 38;
}

uint64_t CA::OGL::AverageColorFilter::render(float a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, int *a7)
{
  *(unsigned char *)(a6[2] + 16) = 2;
  float v9 = a1 / a2;
  CA::OGL::Context::bind_surface((uint64_t)a6, (uint64_t)a7, 0, 2u, 1, 32.0);
  CA::OGL::emit_filter_quads((uint64_t)a6, a7, v9);
  uint64_t result = CA::OGL::Context::unbind_surface(a6, (uint64_t)a7, 0);
  *(unsigned char *)(a6[2] + 16) = 0;
  return result;
}

uint64_t CA::OGL::AverageColorFilter::is_opacity_commutative(CA::OGL::AverageColorFilter *this, const CA::Render::Filter *a2)
{
  return 1;
}

uint64_t CA::Render::Updater::LayerShapesOp::is_flatten_op(CA::Render::Updater::LayerShapesOp *this)
{
  return 0;
}

double CA::Render::Updater::MeshOp::unmap_rect(CA::Render::Updater::MeshOp *this, float64x2_t *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  CA::Rect::unapply_transform(a2->f64, *((void *)this + 3));
  CA::Render::MeshTransform::unapply_rect((CA::Render::MeshTransform *)v8, *((const CA::Rect **)this + 4), v4, *(float64x2_t *)((char *)this + 40), *(float64x2_t *)((char *)this + 56), *a2, a2[1]);
  float64x2_t v5 = (float64x2_t)v8[1];
  *a2 = (float64x2_t)v8[0];
  a2[1] = v5;
  uint64_t v6 = *((void *)this + 3);

  return CA::Rect::apply_transform(a2->f64, v6);
}

double CA::Render::Updater::MeshOp::map_rect(CA::Render::Updater::MeshOp *this, float64x2_t *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  CA::Rect::unapply_transform(a2->f64, *((void *)this + 3));
  CA::Render::MeshTransform::apply_rect((CA::Render::MeshTransform *)v11, *((const CA::Rect **)this + 4), v4, *(float64x2_t *)((char *)this + 40), *(int8x16_t *)((char *)this + 56), *a2, a2[1], v5, v6, v7);
  float64x2_t v8 = (float64x2_t)v11[1];
  *a2 = (float64x2_t)v11[0];
  a2[1] = v8;
  uint64_t v9 = *((void *)this + 3);

  return CA::Rect::apply_transform(a2->f64, v9);
}

double CA::Render::Updater::MeshOp::map_crop(CA::Render::Updater::MeshOp *this, CA::Rect *a2, float64x2_t *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  CA::Rect::unapply_transform(a3->f64, *((void *)this + 3));
  CA::Render::MeshTransform::apply_rect((CA::Render::MeshTransform *)v12, *((const CA::Rect **)this + 4), v6, *(float64x2_t *)((char *)this + 40), *(int8x16_t *)((char *)this + 56), *a3, a3[1], v7, v8, v9);
  float64x2_t v10 = (float64x2_t)v12[1];
  *a3 = (float64x2_t)v12[0];
  a3[1] = v10;
  CA::Rect::apply_transform(a3->f64, *((void *)this + 3));
  double result = 0.0;
  *(_OWORD *)a2 = 0u;
  *((_OWORD *)a2 + 1) = 0u;
  return result;
}

uint64_t CA::Render::Updater::MeshOp::copy(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = x_heap_malloc_small_(a2, 0x48uLL);
  uint64_t v5 = v4;
  if (v4)
  {
    *(_WORD *)(v4 + 16) = 1;
    *(unsigned char *)(v4 + 18) = 0;
    *(void *)uint64_t v4 = &unk_1ED02FDD8;
  }
  uint64_t v6 = x_heap_malloc_small_(a2, 0x28uLL);
  if (v6)
  {
    double v7 = *(long long **)(a1 + 24);
    long long v8 = *v7;
    long long v9 = v7[1];
    *(void *)(v6 + 32) = *((void *)v7 + 4);
    *(_OWORD *)uint64_t v6 = v8;
    *(_OWORD *)(v6 + 16) = v9;
  }
  *(void *)(v5 + 24) = v6;
  uint64_t v10 = *(void *)(a1 + 32);
  if (v10)
  {
    uint64_t v11 = (atomic_uint *)(v10 + 8);
    if (!atomic_fetch_add((atomic_uint *volatile)(v10 + 8), 1u))
    {
      uint64_t v10 = 0;
      atomic_fetch_add(v11, 0xFFFFFFFF);
    }
  }
  *(void *)(v5 + 32) = v10;
  *(_OWORD *)(v5 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v5 + 56) = *(_OWORD *)(a1 + 56);
  return v5;
}

void CA::Render::Updater::MeshOp::~MeshOp(CA::Render::Updater::MeshOp *this)
{
  *(void *)this = &unk_1ED02FDD8;
  if (*((unsigned char *)this + 16))
  {
    uint64_t v1 = (atomic_uint *)*((void *)this + 4);
    if (v1)
    {
      if (atomic_fetch_add(v1 + 2, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v1 + 16))(v1);
      }
    }
  }

  JUMPOUT(0x185323DC0);
}

{
  atomic_uint *v1;

  *(void *)this = &unk_1ED02FDD8;
  if (*((unsigned char *)this + 16))
  {
    uint64_t v1 = (atomic_uint *)*((void *)this + 4);
    if (v1)
    {
      if (atomic_fetch_add(v1 + 2, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v1 + 16))(v1);
      }
    }
  }
}

void CA::Render::Updater::FilterOp::map_rect(CA::Render::Updater::FilterOp *this, __n128 *a2)
{
  if (*((void *)this + 5)) {
    CA::Render::Updater::FilterOp::apply_filter(this, a2, 0);
  }
}

uint64_t CA::Render::UpdateDelegate::can_include_context(CA::Render::UpdateDelegate *this, CA::Render::Context *a2)
{
  return 1;
}

BOOL CA::Render::TreeWalkingUpdateDelegate::should_decontainer_layer(CA::Render::Context **this, CA::Render::Context *a2, CA::Render::LayerNode *a3, const CA::Render::Layer *a4)
{
  if (this[3] != a2) {
    return 0;
  }
  uint64_t v5 = this[5];
  return v5 != this[6] && *(void *)v5 == *((void *)a4 + 18);
}

BOOL CA::Render::TreeWalkingUpdateDelegate::update_layer(CA::Render::TreeWalkingUpdateDelegate *this, CA::Render::Context *a2, atomic_uint *a3, const CA::Render::Layer *a4)
{
  uint64_t v5 = *((void *)a4 + 18);
  if (*((CA::Render::Context **)this + 3) == a2 && **((void **)this + 5) == v5)
  {
    uint64_t v13 = (atomic_uint *)*((void *)this + 4);
    if (v13 != a3)
    {
      if (v13 && atomic_fetch_add(v13 + 4, 0xFFFFFFFF) == 1) {
        CA::Render::LayerNode::delete_node((CA::Render::LayerNode *)v13, a2);
      }
      if (a3) {
        atomic_fetch_add(a3 + 4, 1u);
      }
      *((void *)this + 4) = a3;
    }
    return 1;
  }
  if (!v5) {
    return 1;
  }
  uint64_t v7 = *((void *)this + 5);
  uint64_t v6 = *((void *)this + 6);
  if (v7 == v6) {
    return 0;
  }
  uint64_t v8 = v7 + 8;
  do
  {
    uint64_t v9 = *(void *)(v8 - 8);
    BOOL result = v9 == v5;
    BOOL v11 = v9 == v5 || v8 == v6;
    v8 += 8;
  }
  while (!v11);
  return result;
}

void CA::Render::TreeWalkingUpdateDelegate::~TreeWalkingUpdateDelegate(CA::Render::TreeWalkingUpdateDelegate *this)
{
  v5[1] = *(void ***)MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1ED02F0A0;
  v5[0] = (void **)((char *)this + 40);
  std::vector<X::Ref<CA::Render::Handle>>::__destroy_vector::operator()[abi:nn180100](v5);
  uint64_t v3 = (atomic_uint *)*((void *)this + 4);
  if (v3 && atomic_fetch_add(v3 + 4, 0xFFFFFFFF) == 1) {
    CA::Render::LayerNode::delete_node((CA::Render::LayerNode *)v3, v2);
  }
  uint64_t v4 = (atomic_uint *)*((void *)this + 3);
  if (v4 && atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
  }

  JUMPOUT(0x185323DC0);
}

{
  CA::Render::LayerNode *v2;
  atomic_uint *v3;
  atomic_uint *v4;
  void **v5[2];

  v5[1] = *(void ***)MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1ED02F0A0;
  v5[0] = (void **)((char *)this + 40);
  std::vector<X::Ref<CA::Render::Handle>>::__destroy_vector::operator()[abi:nn180100](v5);
  uint64_t v3 = (atomic_uint *)*((void *)this + 4);
  if (v3 && atomic_fetch_add(v3 + 4, 0xFFFFFFFF) == 1) {
    CA::Render::LayerNode::delete_node((CA::Render::LayerNode *)v3, v2);
  }
  uint64_t v4 = (atomic_uint *)*((void *)this + 3);
  if (v4)
  {
    if (atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
    }
  }
}

void std::vector<X::Ref<CA::Render::Handle>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = (atomic_uint *)*((void *)v4 - 1);
        v4 -= 8;
        uint64_t v6 = v7;
        if (v7 && atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
        }
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

double CA::Render::Updater::TransformOp::unmap_rect(CA::Render::Updater::TransformOp *this, CA::Rect *a2, const double *a3)
{
  return CA::Rect::unapply_transform(a2, (CA::Render::Updater::TransformOp *)((char *)this + 24), a3);
}

double CA::Render::Updater::TransformOp::map_rect(CA::Render::Updater::TransformOp *this, int8x16_t *a2, double *a3)
{
  return CA::Rect::apply_transform(a2, (CA::Render::Updater::TransformOp *)((char *)this + 24), a3);
}

double CA::Render::Updater::TransformOp::map_detached_rect(CA::Render::Updater::TransformOp *this, int8x16_t *a2)
{
  return CA::Rect::apply_transform_interior(a2, (CA::Render::Updater::TransformOp *)((char *)this + 24));
}

void CA::Render::Updater::TransformOp::~TransformOp(CA::Render::Updater::TransformOp *this)
{
}

uint64_t CA::Render::Updater::FlattenZOp::copy(uint64_t a1, uint64_t *a2)
{
  uint64_t result = x_heap_malloc_small_(a2, 0x18uLL);
  if (result)
  {
    *(_WORD *)(result + 16) = 257;
    *(void *)uint64_t result = &unk_1ED02FC20;
    *(unsigned char *)(result + 18) = 1;
  }
  return result;
}

void CA::Render::Updater::FlattenZOp::~FlattenZOp(CA::Render::Updater::FlattenZOp *this)
{
}

double *CA::Render::Updater::RasterizationOp::unmap_rect(CA::Render::Updater::RasterizationOp *this, CA::Rect *a2)
{
  return CA::BoundsImpl::inset((double *)a2, (double)*((int *)this + 5), (double)*((int *)this + 5));
}

double *CA::Render::Updater::RasterizationOp::map_rect(CA::Render::Updater::RasterizationOp *this, CA::Rect *a2)
{
  return CA::BoundsImpl::inset((double *)a2, (double)-*((_DWORD *)this + 5), (double)-*((_DWORD *)this + 5));
}

uint64_t CA::Render::Updater::RasterizationOp::copy(uint64_t a1, uint64_t *a2)
{
  uint64_t result = x_heap_malloc_small_(a2, 0x18uLL);
  if (result)
  {
    int v4 = *(_DWORD *)(a1 + 20);
    *(_WORD *)(result + 16) = 1;
    *(unsigned char *)(result + 18) = 0;
    *(void *)uint64_t result = &unk_1ED02FD68;
    *(_DWORD *)(result + 20) = v4;
  }
  return result;
}

void CA::Render::Updater::RasterizationOp::~RasterizationOp(CA::Render::Updater::RasterizationOp *this)
{
}

float64_t CA::Render::Updater::ShadowOp::map_bounds(CA::Render::Updater::LayerShapes &,BOOL)::$_0::__invoke(float64x2_t *a1, CA::Render::Updater::ShadowOp *this)
{
  return CA::Render::Updater::ShadowOp::apply_shadow(this, a1);
}

uint64_t CA::Render::Updater::ShadowOp::copy(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = x_heap_malloc_small_(a2, 0x30uLL);
  uint64_t v5 = v4;
  if (v4)
  {
    *(_WORD *)(v4 + 16) = 1;
    *(unsigned char *)(v4 + 18) = 0;
    *(void *)uint64_t v4 = &unk_1ED02FEB0;
  }
  uint64_t v6 = x_heap_malloc_small_(a2, 0x28uLL);
  if (v6)
  {
    uint64_t v7 = *(long long **)(a1 + 24);
    long long v8 = *v7;
    long long v9 = v7[1];
    *(void *)(v6 + 32) = *((void *)v7 + 4);
    *(_OWORD *)uint64_t v6 = v8;
    *(_OWORD *)(v6 + 16) = v9;
  }
  *(void *)(v5 + 24) = v6;
  *(_DWORD *)(v5 + 32) = *(_DWORD *)(a1 + 32);
  *(void *)(v5 + 36) = *(void *)(a1 + 36);
  *(_DWORD *)(v5 + 44) = *(_DWORD *)(a1 + 44);
  return v5;
}

void CA::Render::Updater::ShadowOp::~ShadowOp(CA::Render::Updater::ShadowOp *this)
{
}

uint64_t CA::Render::CA_IS_FULFILLING_SERVER_GLITCH_REQUEST(CA::Render *this, double a2)
{
  return usleep(1000 * (a2 * 1000.0));
}

void CA::Render::Updater::prepare_layer_contents(CA::Render::Updater::GlobalState &,CA::Render::Updater::LocalState &,CA::Render::Object *,CA::Render::Updater::LayerShapes &)::$_0::operator()(uint64_t a1, uint64_t a2, double *a3, int32x4_t a4, int32x4_t a5)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  int v6 = *(_DWORD *)(a2 + 8);
  int v7 = *(_DWORD *)(a2 + 12);
  if (v6 <= v7) {
    int v8 = *(_DWORD *)(a2 + 12);
  }
  else {
    int v8 = *(_DWORD *)(a2 + 8);
  }
  a4.i32[0] = 1073741822;
  a5.i32[0] = v8;
  v9.i64[0] = (int)*(void *)a2;
  v9.i64[1] = (int)HIDWORD(*(void *)a2);
  float64x2_t v10 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(a5, a4), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v9));
  if (v8 <= 1073741822) {
    double v11 = (double)v6;
  }
  else {
    double v11 = 1.79769313e308;
  }
  if (v8 <= 1073741822) {
    double v12 = (double)v7;
  }
  else {
    double v12 = 1.79769313e308;
  }
  float64x2_t v45 = v10;
  v46.f64[0] = v11;
  v46.f64[1] = v12;
  if (fmax(v11, v12) < 1.79769313e308)
  {
    double v13 = v11 >= v12 ? v12 : v11;
    if (v13 > 0.0)
    {
      __asm { FMOV            V3.2D, #-1.0 }
      float64x2_t v45 = vaddq_f64(v10, _Q3);
      double v19 = v12 + 2.0;
      v46.f64[0] = v11 + 2.0;
      v46.f64[1] = v19;
      if (v11 + 2.0 <= 0.0 || v19 <= 0.0) {
        float64x2_t v46 = 0uLL;
      }
    }
  }
  CA::Rect::apply_transform((int8x16_t *)&v45, *(const CA::Transform **)a1, a3);
  float64x2_t v21 = v46;
  int64x2_t v22 = vclezq_f64(v46);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v22, 1), (int8x16_t)v22).u64[0] & 0x8000000000000000) == 0)
  {
    int8x16_t v23 = *(float64x2_t **)(a1 + 8);
    float64x2_t v24 = v23[1];
    int64x2_t v25 = vclezq_f64(v24);
    if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v25, 1), (int8x16_t)v25).u64[0] & 0x8000000000000000) != 0
      || (float64x2_t v26 = vaddq_f64(*v23, v24),
          float64x2_t v27 = vmaxnmq_f64(v45, *v23),
          float64x2_t v21 = vsubq_f64(vminnmq_f64(vaddq_f64(v45, v46), v26), v27),
          int64x2_t v28 = vclezq_f64(v21),
          (vorrq_s8((int8x16_t)vdupq_laneq_s64(v28, 1), (int8x16_t)v28).u64[0] & 0x8000000000000000) != 0))
    {
      float64x2_t v46 = 0uLL;
      float64x2_t v21 = 0uLL;
    }
    else
    {
      float64x2_t v45 = v27;
      float64x2_t v46 = v21;
    }
  }
  float32x4_t v29 = **(void ***)(a1 + 16);
  if (v29)
  {
    do
    {
      (*(void (**)(void *, float64x2_t *))(*v29 + 64))(v29, &v45);
      float32x4_t v29 = (void *)v29[1];
    }
    while (v29);
    float64x2_t v21 = v46;
  }
  int64x2_t v30 = vclezq_f64(v21);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v30, 1), (int8x16_t)v30).u64[0] & 0x8000000000000000) == 0)
  {
    uint64_t v31 = *(void *)(a1 + 24);
    float64x2_t v32 = *(float64x2_t *)(v31 + 104);
    int64x2_t v33 = vclezq_f64(v32);
    if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v33, 1), (int8x16_t)v33).u64[0] & 0x8000000000000000) != 0
      || (float64x2_t v34 = *(float64x2_t *)(v31 + 88),
          float64x2_t v35 = vaddq_f64(v34, v32),
          float64x2_t v36 = vmaxnmq_f64(v45, v34),
          float64x2_t v21 = vsubq_f64(vminnmq_f64(vaddq_f64(v45, v21), v35), v36),
          int64x2_t v37 = vclezq_f64(v21),
          (vorrq_s8((int8x16_t)vdupq_laneq_s64(v37, 1), (int8x16_t)v37).u64[0] & 0x8000000000000000) != 0))
    {
      float64x2_t v46 = 0uLL;
      float64x2_t v21 = 0uLL;
    }
    else
    {
      float64x2_t v45 = v36;
      float64x2_t v46 = v21;
    }
  }
  __int32 v38 = *(CA::Render::Update ***)(a1 + 32);
  __int32 v39 = *v38;
  int v40 = v38[2];
  int64x2_t v41 = vceqzq_f64(v21);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v41, 1), (int8x16_t)v41).u64[0] & 0x8000000000000000) != 0
    || (int8x16_t v42 = vorrq_s8((int8x16_t)vcltzq_f64(v21), (int8x16_t)vcgezq_f64(v21)),
        (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v42), 1), v42).u64[0] & 0x8000000000000000) != 0))
  {
    int32x4_t v44 = 0uLL;
  }
  else
  {
    int32x4_t v43 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v45, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
    int32x4_t v44 = vuzp1q_s32(v43, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v45, v21), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v43));
  }
  CA::Render::Context::invalidate(v40, (int32x2_t *)&v44, v20);
  CA::Render::Update::invalidate_backdrops(v39, (const CA::Bounds *)&v44, 0, 0xFFFFFFFF);
}

const void **X::CFRef<__CFData const*>::operator=(const void **a1, CFTypeRef cf)
{
  CFTypeRef v3 = *a1;
  if (v3 != cf)
  {
    if (v3) {
      CFRelease(v3);
    }
    *a1 = cf;
    CFRetain(cf);
  }
  return a1;
}

void X::small_vector_base<unsigned int>::grow(int **a1, unint64_t a2)
{
  CFTypeRef v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  unint64_t v6 = ((unint64_t)a1[3] + 1) | (((unint64_t)a1[3] + 1) >> 1);
  unint64_t v7 = v6 | (v6 >> 2) | ((v6 | (v6 >> 2)) >> 4);
  unint64_t v8 = v7 | (v7 >> 8) | ((v7 | (v7 >> 8)) >> 16);
  unint64_t v9 = v8 | HIDWORD(v8);
  if (v9 + 1 > a2) {
    unint64_t v10 = v9 + 1;
  }
  else {
    unint64_t v10 = a2;
  }
  double v11 = malloc_type_malloc(4 * v10, 0x100004052888210uLL);
  double v12 = *a1;
  double v13 = a1[1];
  if (*a1 != v13)
  {
    int8x16_t v14 = v11;
    float v15 = *a1;
    do
    {
      int v16 = *v15++;
      *v14++ = v16;
    }
    while (v15 != v13);
  }
  if (v3 != v5) {
    free(v12);
  }
  *a1 = v11;
  a1[1] = (_DWORD *)((char *)v11 + (char *)v4 - (char *)v3);
  a1[3] = (int *)v10;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Render::Update::SecureIndicator>>(unint64_t a1)
{
  if (a1 >= 0x555555555555556) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(48 * a1);
}

void CA::Render::Updater::UnionRectOp::map_bounds(CA::Render::Updater::UnionRectOp *this, CA::Render::Updater::LayerShapes *a2, const CA::Bounds *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  float64x2_t v3 = *((float64x2_t *)a2 + 1);
  float64x2_t v4 = *(float64x2_t *)((char *)this + 40);
  int64x2_t v5 = vclezq_f64(v3);
  int64x2_t v6 = vclezq_f64(v4);
  int32x2_t v7 = vmovn_s64(vcltzq_s64((int64x2_t)vorrq_s8((int8x16_t)vzip1q_s64(v6, v5), (int8x16_t)vzip2q_s64(v6, v5))));
  if (v7.i8[4])
  {
    if (v7.i8[0]) {
      goto LABEL_7;
    }
    float64x2_t v8 = *(float64x2_t *)((char *)this + 24);
  }
  else
  {
    if (v7.i8[0]) {
      goto LABEL_7;
    }
    float64x2_t v9 = *(float64x2_t *)((char *)this + 24);
    float64x2_t v10 = vaddq_f64(*(float64x2_t *)a2, v3);
    float64x2_t v8 = vminnmq_f64(*(float64x2_t *)a2, v9);
    float64x2_t v4 = vsubq_f64(vmaxnmq_f64(v10, vaddq_f64(v9, v4)), v8);
  }
  *(float64x2_t *)a2 = v8;
  *((float64x2_t *)a2 + 1) = v4;
LABEL_7:
  if (*((void *)a2 + 8))
  {
    float64x2_t v11 = *(float64x2_t *)((char *)this + 40);
    int8x16_t v12 = (int8x16_t)vceqzq_f64(v11);
    if ((vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v12, 1), v12).u64[0] & 0x8000000000000000) != 0
      || (int8x16_t v13 = vorrq_s8((int8x16_t)vcltzq_f64(v11), (int8x16_t)vcgezq_f64(v11)),
          (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v13), 1), v13).u64[0] & 0x8000000000000000) != 0))
    {
      int32x4_t v16 = 0uLL;
    }
    else
    {
      float64x2_t v14 = *(float64x2_t *)((char *)this + 24);
      int32x4_t v15 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v14, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
      int32x4_t v16 = vuzp1q_s32(v15, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v14, v11), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v15));
    }
    CA::shape_union((CA::Shape **)a2 + 8, (CA::Shape **)&v16, a3);
  }
}

__n128 CA::Render::Updater::UnionRectOp::copy(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = x_heap_malloc_small_(a2, 0x38uLL);
  if (v3)
  {
    *(_WORD *)(v3 + 16) = 1;
    *(unsigned char *)(v3 + 18) = 0;
    *(void *)uint64_t v3 = &unk_1ED02FCF8;
  }
  *(_OWORD *)(v3 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v3 + 40) = result;
  return result;
}

void CA::Render::Updater::UnionRectOp::~UnionRectOp(CA::Render::Updater::UnionRectOp *this)
{
}

void CA::Render::Update::invalidate(CA::Shape **this, const CA::Bounds *a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  memset(v4, 0, sizeof(v4));
  CA::Shape::operator=((uint64_t)v4, a2);
  CA::shape_union(this + 2, (CA::Shape **)v4, v3);
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(unint64_t a1)
{
  if (a1 >> 62) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(4 * a1);
}

void CA::Render::Update::print_trees(CA::Render::Update *this)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  CA::Shape::get_bounds(*((void *)this + 2), (int *)&v18);
  x_log_begin();
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    uint64_t v3 = x_log_category_render;
    if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    {
      float64x2_t v4 = (const char *)*((void *)this + 9);
      *(_DWORD *)long long buf = 134219008;
      float64x2_t v21 = v4;
      __int16 v22 = 1024;
      int v23 = v18;
      __int16 v24 = 1024;
      *(_DWORD *)int64x2_t v25 = HIDWORD(v18);
      *(_WORD *)&void v25[4] = 1024;
      *(_DWORD *)&v25[6] = v19;
      __int16 v26 = 1024;
      int v27 = HIDWORD(v19);
      _os_log_impl(&dword_184668000, v3, OS_LOG_TYPE_DEFAULT, "\n** Render tree at time %f (bounds %d,%d %dx%d) **\n\n", buf, 0x24u);
    }
  }
  uint64_t v5 = (char *)this + 216;
  for (uint64_t i = *((void *)this + 28); (char *)i != v5; uint64_t i = *(void *)(i + 8))
    CA::Render::show_object(*(CA::Render **)(i + 32), v2);
  uint64_t v17 = (void **)x_stream_pop_(0);
  int32x2_t v7 = x_stream_get(v17);
  int v8 = 0;
  while (2)
  {
    uint64_t v9 = 0;
    float64x2_t v10 = &v7[v8];
    int v11 = -1;
    while (1)
    {
      if (v10[v9] == 10)
      {
        int v11 = v9;
        goto LABEL_14;
      }
      if (!v10[v9]) {
        break;
      }
LABEL_14:
      ++v9;
      unsigned int v12 = 32512;
      if (v9 == 32512) {
        goto LABEL_15;
      }
    }
    unsigned int v12 = v9;
LABEL_15:
    if (v11 <= -1 || v10[v12] == 0) {
      int v14 = v12;
    }
    else {
      int v14 = v11 + 1;
    }
    if (v14 > 0)
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        int32x4_t v15 = x_log_category_CADebug;
        if (os_log_type_enabled((os_log_t)x_log_category_CADebug, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 136315650;
          if (v8) {
            int32x4_t v16 = "continued...\n";
          }
          else {
            int32x4_t v16 = "";
          }
          float64x2_t v21 = v16;
          __int16 v22 = 1040;
          int v23 = v14;
          __int16 v24 = 2080;
          *(void *)int64x2_t v25 = &v7[v8];
          _os_log_impl(&dword_184668000, v15, OS_LOG_TYPE_INFO, "%s%.*s", buf, 0x1Cu);
        }
      }
      v8 += v14;
      continue;
    }
    break;
  }
  x_log_end_free_(v17);
}

uint64_t CA::Render::Update::subtract_corner_radii_clipping_from_shape(uint64_t this, CA::Shape **a2, CA::Shape **a3)
{
  _OWORD v12[2] = *(CA::Shape **)MEMORY[0x1E4F143B8];
  if (this)
  {
    if ((*(unsigned char *)(this + 40) & 0x40) == 0) {
      return 0;
    }
    uint64_t v3 = a2;
    uint64_t v4 = *(void *)(this + 128);
    float v5 = 0.0;
    float v6 = 0.0;
    if (v4) {
      float v6 = *(float *)(v4 + 228);
    }
    if ((*(unsigned char *)(this + 38) & 0xF) != 0) {
      float v5 = v6;
    }
    if (v4 && *(void *)(v4 + 72))
    {
      uint64_t v11 = this;
      CA::Render::Layer::max_corner_radii(v4);
      uint64_t v3 = a2;
      this = v11;
      float v5 = v9;
    }
    if (v5 <= 0.0) {
      return 0;
    }
    double v7 = *(double *)(this + 80);
    double v8 = v5;
    if (v7 >= *(double *)(this + 88)) {
      double v7 = *(double *)(this + 88);
    }
    if (v7 * 0.5 < v8)
    {
      v12[0] = 0;
      v12[1] = 0;
      CA::shape_intersect(v3, v12, (const CA::Bounds *)a3);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return this;
}

uint64_t CA::Render::LayerNode::hit_test_sublayers_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1 + 96;
  uint64_t v4 = *(void *)(a1 + 104);
  if (v4 == a1 + 96) {
    return 0;
  }
  while (1)
  {
    if (*(void *)(*(void *)(v4 + 32) + 144) || (*(unsigned char *)(v4 + 27) & 4) != 0)
    {
      uint64_t v8 = CA::Render::LayerNode::hit_test_(v4, a2, a3);
      if (v8) {
        break;
      }
    }
    uint64_t v4 = *(void *)(v4 + 8);
    if (v4 == v3) {
      return 0;
    }
  }
  uint64_t v10 = v8;
  CA::Render::print_hit_test(*(CA::Render **)(a1 + 32), (const CA::Render::Layer *)"accepting", "hit sublayer", v9);
  return v10;
}

uint64_t CA::Render::LayerNode::hit_test_(uint64_t a1, float64x2_t *a2, unsigned int a3, const char *a4)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 32);
  float64x2_t v52 = *a2;
  CA::Render::print_hit_test((CA::Render *)v6, (const CA::Render::Layer *)"entering", 0, a4);
  uint64_t v10 = *(void *)(a1 + 24);
  if ((v10 & 0x200) != 0)
  {
    unsigned int v12 = "kCAContextIgnoresHitTest";
LABEL_7:
    CA::Render::print_hit_test((CA::Render *)v6, (const CA::Render::Layer *)"rejecting", v12, v8);
    return 0;
  }
  unint64_t v11 = *(void *)(v6 + 40);
  if ((v11 & 0x80000000) == 0)
  {
    if (byte_1EB2ACC2F)
    {
      if (x_log_hook_p()) {
        goto LABEL_79;
      }
      int64x2_t v37 = x_log_category_render;
      if (!os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT)) {
        return 0;
      }
      uint64_t v38 = *(void *)(v6 + 120);
      if (v38)
      {
        int v39 = *(_DWORD *)(v38 + 24);
        v38 += 28;
        if (!v39) {
          uint64_t v38 = 0;
        }
      }
      *(_DWORD *)long long buf = 136316162;
      *(void *)&uint8_t buf[4] = "rejecting";
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v6;
      *(_WORD *)&buf[22] = 2080;
      *(void *)&unsigned char buf[24] = v38;
      __int16 v54 = 2080;
      float v55 = " - ";
      __int16 v56 = 2080;
      int v40 = "allowsHitTesting = NO";
      goto LABEL_95;
    }
    return 0;
  }
  uint64_t v13 = ((*(void *)(a1 + 24) & 0x18) != 0) | a3;
  if (((*(void *)(a1 + 24) & 0x18) != 0) | a3 & 1)
  {
    if ((v10 & 0x400000) == 0)
    {
      if (byte_1EB2ACC2F)
      {
        if (x_log_hook_p()) {
          goto LABEL_79;
        }
        int64x2_t v37 = x_log_category_render;
        if (!os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT)) {
          return 0;
        }
        uint64_t v43 = *(void *)(v6 + 120);
        if (v43)
        {
          int v44 = *(_DWORD *)(v43 + 24);
          v43 += 28;
          if (!v44) {
            uint64_t v43 = 0;
          }
        }
        *(_DWORD *)long long buf = 136316162;
        *(void *)&uint8_t buf[4] = "rejecting";
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v6;
        *(_WORD *)&buf[22] = 2080;
        *(void *)&unsigned char buf[24] = v43;
        __int16 v54 = 2080;
        float v55 = " - ";
        __int16 v56 = 2080;
        int v40 = "culled above and hitTestsAsOpaque = NO";
        goto LABEL_95;
      }
      return 0;
    }
    int v14 = 0;
    if ((v11 & 0x100) != 0) {
      goto LABEL_19;
    }
  }
  else
  {
    int v14 = (a3 >> 1) & 1;
    if ((v11 & 0x100) != 0)
    {
LABEL_19:
      if (byte_1EB2ACC2F)
      {
        if (x_log_hook_p())
        {
LABEL_79:
          x_log_();
          return 0;
        }
        int64x2_t v37 = x_log_category_render;
        if (!os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT)) {
          return 0;
        }
        uint64_t v41 = *(void *)(v6 + 120);
        if (v41)
        {
          int v42 = *(_DWORD *)(v41 + 24);
          v41 += 28;
          if (!v42) {
            uint64_t v41 = 0;
          }
        }
        *(_DWORD *)long long buf = 136316162;
        *(void *)&uint8_t buf[4] = "rejecting";
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v6;
        *(_WORD *)&buf[22] = 2080;
        *(void *)&unsigned char buf[24] = v41;
        __int16 v54 = 2080;
        float v55 = " - ";
        __int16 v56 = 2080;
        int v40 = "hidden = YES or opacity = 0";
LABEL_95:
        int v57 = v40;
        _os_log_impl(&dword_184668000, v37, OS_LOG_TYPE_DEFAULT, "HitTest: %s layer %p \"%s\"%s%s", buf, 0x34u);
      }
      return 0;
    }
  }
  LOBYTE(v9) = *(unsigned char *)(v6 + 32);
  if ((float)((float)v9 * 0.0039216) <= 0.0) {
    goto LABEL_19;
  }
  int32x4_t v15 = *(CA::Mat4Impl **)(a1 + 56);
  if (v15)
  {
    CA::Mat4Impl::mat4_invert((CA::Mat4Impl *)buf, v15, v7);
    CA::Mat4Impl::mat4_unapply_inverse_to_point2((float64x2_t *)buf, v52.f64, v16);
  }
  else
  {
    float64x2_t v52 = vsubq_f64(v52, *(float64x2_t *)(a1 + 64));
  }
  float64x2_t v46 = *(float64x2_t *)(v6 + 80);
  CGPoint v47 = *(CGPoint *)(v6 + 64);
  *(CGPoint *)long long buf = v47;
  *(float64x2_t *)&uint8_t buf[16] = v46;
  uint64_t v18 = *(void *)(v6 + 128);
  float v19 = 0.0;
  if (v18) {
    float v19 = *(float *)(v18 + 228);
  }
  double v20 = v19;
  if ((v11 & 0x40) != 0 && (CA_CGRoundRectContainsPoint((double *)buf, v19, v52.f64[0], v52.f64[1]) & 1) == 0)
  {
    unsigned int v12 = "masksToBounds = YES and not in bounds";
    goto LABEL_7;
  }
  uint64_t v21 = *(void *)(a1 + 128);
  if (v21)
  {
    BOOL v22 = CA::Render::LayerNode::hit_test_(v21, &v52, 0) == 0;
    unint64_t v11 = *(void *)(v6 + 40);
    if (v22 != ((v11 >> 7) & 1))
    {
      unsigned int v12 = "mask not hit";
      goto LABEL_7;
    }
  }
  if ((v14 & 1) == 0)
  {
    uint64_t result = CA::Render::LayerNode::hit_test_sublayers_(a1, (uint64_t)&v52, v13);
    if (result) {
      return result;
    }
    unint64_t v11 = *(void *)(v6 + 40);
  }
  if ((v11 & 0x8000000000) != 0)
  {
    float64x2_t v23 = vaddq_f64(v46, (float64x2_t)v47);
    if ((vmovn_s64(vcgtq_f64(v23, (float64x2_t)v47)).u8[0] & 1) != 0
      && v46.f64[1] + v47.y > v47.y
      && (vmovn_s64((int64x2_t)vbicq_s8(vmvnq_s8((int8x16_t)vcgtq_f64((float64x2_t)v47, v52)), (int8x16_t)vcgeq_f64(v52, v23))).u32[0] & 1) != 0&& v52.f64[1] >= v47.y&& v52.f64[1] < v46.f64[1] + v47.y)
    {
      __int16 v24 = "hitTestsAsOpaque = YES and in bounds";
LABEL_77:
      CA::Render::print_hit_test((CA::Render *)v6, (const CA::Render::Layer *)"accepting", v24, v8);
      return a1;
    }
  }
  if (v13)
  {
    unsigned int v12 = "culled above";
    goto LABEL_7;
  }
  if ((v11 & 0x40000000000) != 0) {
    goto LABEL_44;
  }
  int64x2_t v25 = *(float32x4_t **)(v6 + 128);
  if (v25)
  {
    if (!v25[5].i64[0])
    {
LABEL_49:
      if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(v25[15])))) & 1) != 0
        || v25[8].i64[0])
      {
        float v26 = v25[14].f32[3];
        if (v26 > 0.0)
        {
          double v27 = v26;
          double v28 = v25[14].f32[2];
          v59.size.CGFloat width = v46.f64[0];
          v59.origiuint64_t n = v47;
          v59.size.CGFloat height = v46.f64[1];
          CGRect v60 = CGRectInset(v59, -v28, -v28);
          v49.f64[0] = v60.origin.x;
          v49.f64[1] = v60.origin.y;
          CGFloat width = v60.size.width;
          CGFloat height = v60.size.height;
          CGRect v48 = CGRectInset(v60, v27, v27);
          double v29 = v28 + v20;
          double v30 = v29 >= 0.0 ? v29 : 0.0;
          double v31 = v52.f64[1];
          double v45 = v52.f64[0];
          if (CA_CGRoundRectContainsPoint(v49.f64, v30, v52.f64[0], v52.f64[1]))
          {
            double v32 = v29 - v27;
            if (v29 - v27 < 0.0) {
              double v32 = 0.0;
            }
            if (!CA_CGRoundRectContainsPoint(&v48.origin.x, v32, v45, v31))
            {
              __int16 v24 = "within border";
              goto LABEL_77;
            }
          }
        }
      }
      goto LABEL_59;
    }
LABEL_44:
    if (CA_CGRoundRectContainsPoint((double *)buf, v20, v52.f64[0], v52.f64[1]))
    {
      __int16 v24 = "within background color";
      goto LABEL_77;
    }
    int64x2_t v25 = *(float32x4_t **)(v6 + 128);
    if (!v25) {
      goto LABEL_59;
    }
    goto LABEL_49;
  }
LABEL_59:
  uint64_t v33 = *(void *)(a1 + 48);
  if (v33)
  {
    if (*(_DWORD *)(v6 + 36) & 0xF000) != 0x9000 || (*(unsigned char *)(v6 + 44))
    {
      if (CA::Render::hit_test_contents(v6, v33, *(_DWORD *)(a1 + 24) & 1, v52.f64[0], v52.f64[1]))
      {
LABEL_67:
        __int16 v24 = "within contents";
        goto LABEL_77;
      }
    }
    else
    {
      float64x2_t v34 = vaddq_f64(v46, (float64x2_t)v47);
      if ((vmovn_s64(vcgtq_f64(v34, (float64x2_t)v47)).u8[0] & 1) != 0
        && v46.f64[1] + v47.y > v47.y
        && (vmovn_s64((int64x2_t)vbicq_s8(vmvnq_s8((int8x16_t)vcgtq_f64((float64x2_t)v47, v52)), (int8x16_t)vcgeq_f64(v52, v34))).u32[0] & 1) != 0&& v52.f64[1] >= v47.y&& v52.f64[1] < v46.f64[1] + v47.y)
      {
        goto LABEL_67;
      }
    }
  }
  float64x2_t v35 = *(uint64_t **)(v6 + 128);
  if (v35)
  {
    uint64_t v36 = *v35;
    if (*v35)
    {
      float64x2_t v49 = v52;
      if ((*(unsigned int (**)(uint64_t, uint64_t, float64x2_t *))(*(void *)v36 + 224))(v36, v6, &v49))
      {
        __int16 v24 = "subclass";
        goto LABEL_77;
      }
    }
  }
  if (!v14 || (uint64_t result = CA::Render::LayerNode::hit_test_sublayers_(a1, (uint64_t)&v52, v13)) == 0)
  {
    unsigned int v12 = "no hits";
    goto LABEL_7;
  }
  return result;
}

double CA::Transform::unapply_simple<double>(uint64_t a1, double *a2, double *a3)
{
  *a2 = *a2 - *(double *)(a1 + 96);
  double result = *a3 - *(double *)(a1 + 104);
  *a3 = result;
  char v4 = *(unsigned char *)(a1 + 144);
  if (v4)
  {
    double result = -result;
    *a3 = result;
    char v4 = *(unsigned char *)(a1 + 144);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((*(unsigned char *)(a1 + 144) & 2) == 0)
  {
    goto LABEL_3;
  }
  double result = -*a2;
  *a2 = result;
  char v4 = *(unsigned char *)(a1 + 144);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      return result;
    }
LABEL_9:
    *a2 = *a2 * *(double *)(a1 + 136);
    double result = *a3 * *(double *)(a1 + 136);
    *a3 = result;
    return result;
  }
LABEL_8:
  double v5 = *a2;
  *a2 = *a3;
  double result = -v5;
  *a3 = result;
  if ((*(unsigned char *)(a1 + 144) & 8) != 0) {
    goto LABEL_9;
  }
  return result;
}

unsigned int *CA::Render::HitTestTree::get_secure_superlayers_validation_start_node(uint64_t a1, unsigned int *a2)
{
  while (1)
  {
    unsigned int v3 = a2[6];
    if (v3) {
      break;
    }
    uint64_t v4 = *a2;
    a2 = (unsigned int *)((char *)a2 - v4);
    if (!v4) {
      return 0;
    }
  }
  if (std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>((void *)(a1 + 24), v3))
  {
    return a2;
  }
  else
  {
    return 0;
  }
}

uint64_t CA::Render::HitTestTree::Node::subtree_occludes_slot(int32x2_t *this, unsigned int a2, int32x2_t *a3)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  int32x2_t v3 = this[5];
  uint32x2_t v4 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v3);
  if ((vpmax_u32(v4, v4).u32[0] & 0x80000000) != 0) {
    return 0;
  }
  int32x2_t v6 = a3[1];
  uint32x2_t v7 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v6);
  if ((vpmax_u32(v7, v7).u32[0] & 0x80000000) != 0) {
    return 0;
  }
  uint64_t v8 = this;
  int32x2_t v9 = this[4];
  int32x2_t v10 = vadd_s32(v9, v3);
  int32x2_t v11 = vadd_s32(*a3, v6);
  uint32x2_t v12 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, vsub_s32(vmin_s32(v10, v11), vmax_s32(v9, *a3)));
  if ((vpmax_u32(v12, v12).u32[0] & 0x80000000) != 0) {
    return 0;
  }
  int32x2_t v13 = this[1];
  if ((*(void *)&v13 & 0x200000000000000) != 0) {
    return 0;
  }
  if ((*(void *)&v13 & 0x400000000000000) != 0)
  {
    int32x2_t v15 = this[7];
    uint32x2_t v16 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v15);
    if ((vpmax_u32(v16, v16).u32[0] & 0x80000000) != 0
      || (uint32x2_t v17 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, vsub_s32(vmin_s32(vadd_s32(this[6], v15), v11), vmax_s32(this[6], *a3))), (vpmax_u32(v17, v17).u32[0] & 0x80000000) != 0))
    {
      if ((*(void *)&v13 & 0xFFFFFFLL) != 0)
      {
        unsigned int v19 = 0;
        double v20 = (unsigned int *)((char *)this + v13.u8[4]);
        do
        {
          uint64_t result = CA::Render::HitTestTree::Node::subtree_occludes_slot((CA::Render::HitTestTree::Node *)v20, a2, (const CA::Bounds *)a3);
          if (result) {
            break;
          }
          double v20 = (unsigned int *)((char *)v20 + v20[1]);
          ++v19;
        }
        while (v19 < (v8[1].i32[0] & 0xFFFFFFu));
        return result;
      }
      return 0;
    }
  }
  if (!byte_1EB2ACC2F) {
    return 1;
  }
  uint64_t v21 = (double *)this[2];
  if (v21)
  {
    double v23 = v21[8];
    double v22 = v21[9];
    double v25 = v21[10];
    double v24 = v21[11];
    double v26 = v21[6];
    double v27 = v21[7];
  }
  else
  {
    double v24 = -1.0;
    double v25 = -1.0;
    double v22 = -1.0;
    double v23 = -1.0;
    double v26 = -1.0;
    double v27 = -1.0;
  }
  if (x_log_hook_p())
  {
    do
    {
      if (v8[3].i32[0]) {
        break;
      }
      uint64_t v28 = v8->u32[0];
      uint64_t v8 = (int32x2_t *)((char *)v8 - v28);
    }
    while (v28);
    x_log_();
    return 1;
  }
  double v29 = x_log_category_render;
  BOOL v30 = os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_INFO);
  uint64_t result = 1;
  if (v30)
  {
    int32x2_t v31 = v8[2];
    double v32 = "No Name";
    if (v31)
    {
      uint64_t v33 = *(void *)(*(void *)&v31 + 120);
      if (v33) {
        double v32 = (const char *)(v33 + 28);
      }
    }
    __int32 v34 = a3->i32[0];
    __int32 v35 = a3->i32[1];
    __int32 v37 = a3[1].i32[0];
    __int32 v36 = a3[1].i32[1];
    __int32 v38 = v8[4].i32[0];
    __int32 v39 = v8[4].i32[1];
    __int32 v40 = v8[5].i32[0];
    __int32 v41 = v8[5].i32[1];
    do
    {
      LODWORD(v42) = v8[3].i32[0];
      if (v42) {
        break;
      }
      uint64_t v42 = v8->u32[0];
      uint64_t v8 = (int32x2_t *)((char *)v8 - v42);
    }
    while (v42);
    *(_DWORD *)long long buf = 67113474;
    unsigned int v44 = a2;
    __int16 v45 = 1024;
    __int32 v46 = v34;
    __int16 v47 = 1024;
    __int32 v48 = v35;
    __int16 v49 = 1024;
    __int32 v50 = v37;
    __int16 v51 = 1024;
    __int32 v52 = v36;
    __int16 v53 = 2048;
    int32x2_t v54 = v31;
    __int16 v55 = 2080;
    __int16 v56 = v32;
    __int16 v57 = 1024;
    __int32 v58 = v38;
    __int16 v59 = 1024;
    __int32 v60 = v39;
    __int16 v61 = 1024;
    __int32 v62 = v40;
    __int16 v63 = 1024;
    __int32 v64 = v41;
    __int16 v65 = 2048;
    double v66 = v26;
    __int16 v67 = 2048;
    double v68 = v27;
    __int16 v69 = 2048;
    double v70 = v23;
    __int16 v71 = 2048;
    double v72 = v22;
    __int16 v73 = 2048;
    double v74 = v25;
    __int16 v75 = 2048;
    double v76 = v24;
    __int16 v77 = 1024;
    int v78 = v42;
    _os_log_impl(&dword_184668000, v29, OS_LOG_TYPE_INFO, "Slot <%d> [%d %d %d %d] occluded by layer <%p> (%s) [%d %d %d %d] [%f %f] [%f %f %f %f] from context 0x%x", buf, 0x8Eu);
    return 1;
  }
  return result;
}

uint64_t CA::Render::HitTestTree::Node::subtract_subtree_occlusion_from_shape(int32x2_t *this, int32x2_t *a2, CA::Shape **a3)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  if ((*a3 & 1) == 0 && *((int *)*a3 + 1) > 256) {
    return 1;
  }
  int32x2_t v7 = this[5];
  uint32x2_t v8 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v7);
  if ((vpmax_u32(v8, v8).u32[0] & 0x80000000) == 0)
  {
    int32x2_t v9 = a2[1];
    uint32x2_t v10 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v9);
    if ((vpmax_u32(v10, v10).u32[0] & 0x80000000) == 0)
    {
      int32x2_t v11 = this[4];
      int32x2_t v12 = vadd_s32(v11, v7);
      int32x2_t v13 = vadd_s32(*a2, v9);
      uint32x2_t v14 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, vsub_s32(vmin_s32(v12, v13), vmax_s32(v11, *a2)));
      if ((vpmax_u32(v14, v14).u32[0] & 0x80000000) == 0 && (this[1].i8[7] & 2) == 0)
      {
        int32x2_t v15 = this[7];
        uint32x2_t v16 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v15);
        if ((vpmax_u32(v16, v16).u32[0] & 0x80000000) != 0) {
          goto LABEL_15;
        }
        uint32x2_t v17 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, vsub_s32(vmin_s32(vadd_s32(this[6], v15), v13), vmax_s32(this[6], *a2)));
        if ((vpmax_u32(v17, v17).u32[0] & 0x80000000) != 0) {
          goto LABEL_15;
        }
        CA::shape_subtract(a3, (CA::Shape **)&this[6], (const CA::Bounds *)a3);
        if (byte_1EB2ACC82)
        {
          if (x_log_hook_p())
          {
            CA::Shape::area(*a3);
            x_log_();
          }
          else
          {
            uint64_t v21 = x_log_category_security_analysis;
            if (os_log_type_enabled((os_log_t)x_log_category_security_analysis, OS_LOG_TYPE_INFO))
            {
              int32x2_t v22 = this[2];
              double v23 = "No Name";
              if (v22)
              {
                uint64_t v24 = *(void *)(*(void *)&v22 + 120);
                if (v24) {
                  double v23 = (const char *)(v24 + 28);
                }
              }
              __int32 v25 = this[6].i32[0];
              __int32 v26 = this[6].i32[1];
              __int32 v27 = this[7].i32[0];
              __int32 v28 = this[7].i32[1];
              __int32 v30 = a2->i32[0];
              __int32 v31 = a2->i32[1];
              __int32 v32 = a2[1].i32[0];
              __int32 v33 = a2[1].i32[1];
              uint64_t v29 = CA::Shape::area(*a3);
              *(_DWORD *)long long buf = 136317698;
              __int32 v35 = v23;
              __int16 v36 = 2048;
              int32x2_t v37 = v22;
              __int16 v38 = 1024;
              __int32 v39 = v25;
              __int16 v40 = 1024;
              __int32 v41 = v26;
              __int16 v42 = 1024;
              __int32 v43 = v27;
              __int16 v44 = 1024;
              __int32 v45 = v28;
              __int16 v46 = 1024;
              __int32 v47 = v30;
              __int16 v48 = 1024;
              __int32 v49 = v31;
              __int16 v50 = 1024;
              __int32 v51 = v32;
              __int16 v52 = 1024;
              __int32 v53 = v33;
              __int16 v54 = 2048;
              uint64_t v55 = v29;
              _os_log_impl(&dword_184668000, v21, OS_LOG_TYPE_INFO, "Layer (%s) <%p> [%d %d %d %d] occludes view [%d %d %d %d] unoccluded area is now %ld", buf, 0x50u);
            }
          }
        }
        if (this[6].i32[0] != this[4].i32[0]
          || this[6].i32[1] != this[4].i32[1]
          || this[7].i32[0] != this[5].i32[0]
          || this[7].i32[1] != this[5].i32[1])
        {
LABEL_15:
          int32x2_t v18 = this[1];
          if ((*(void *)&v18 & 0xFFFFFFLL) != 0)
          {
            unsigned int v19 = 0;
            double v20 = (unsigned int *)((char *)this + v18.u8[4]);
            do
            {
              CA::Render::HitTestTree::Node::subtract_subtree_occlusion_from_shape((CA::Render::HitTestTree::Node *)v20, (const CA::Bounds *)a2, a3);
              double v20 = (unsigned int *)((char *)v20 + v20[1]);
              ++v19;
            }
            while (v19 < (this[1].i32[0] & 0xFFFFFFu));
          }
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t std::__split_buffer<X::Ref<CA::Render::Handle>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    double v5 = *(atomic_uint **)(v2 - 8);
    v2 -= 8;
    uint32x2_t v4 = v5;
    *(void *)(a1 + 16) = v2;
    if (v5)
    {
      if (atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
      }
      uint64_t v2 = *(void *)(a1 + 16);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void CARenderUpdateBegin(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, float64x2_t a7)
{
}

void CARenderUpdateBegin2(double a1, float64x2_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  int8x16_t v8 = *(int8x16_t *)(a8 + 16);
  a2.f64[0] = 0.0;
  int8x16_t v9 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(a2, (float64x2_t)v8).i64[0], 0);
  v10.i64[1] = *(void *)(a8 + 24);
  *(double *)v10.i64 = -*(double *)v8.i64;
  int8x16_t v11 = vbslq_s8(v9, v10, v8);
  int8x16_t v12 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(a2, (float64x2_t)vdupq_laneq_s64((int64x2_t)v8, 1)).i64[0], 0);
  v13.i64[0] = v11.i64[0];
  v13.i64[1] = *(void *)&vnegq_f64(*(float64x2_t *)&v8).f64[1];
  float64x2_t v14 = (float64x2_t)vbslq_s8(v12, v13, v11);
  int8x16_t v15 = (int8x16_t)vceqzq_f64(v14);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v15, 1), v15).u64[0] & 0x8000000000000000) != 0
    || (int8x16_t v16 = vorrq_s8((int8x16_t)vcltzq_f64(v14), (int8x16_t)vcgezq_f64(v14)),
        int8x16_t v17 = (int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v16), 1),
        (vornq_s8(v17, v16).u64[0] & 0x8000000000000000) != 0))
  {
    int32x4_t v22 = 0uLL;
  }
  else
  {
    v17.i64[0] = 0x8000000000000000;
    v18.i64[0] = *(_OWORD *)&vaddq_f64(*(float64x2_t *)a8, (float64x2_t)vbslq_s8(v9, v8, v17));
    v19.i64[0] = v18.i64[0];
    v19.i64[1] = *(void *)(a8 + 8);
    v18.i64[1] = *(void *)&vaddq_f64(*(float64x2_t *)&v8, *(float64x2_t *)a8).f64[1];
    float64x2_t v20 = (float64x2_t)vbslq_s8(v12, v18, v19);
    int32x4_t v21 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v20, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
    int32x4_t v22 = vuzp1q_s32(v21, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v20, v14), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v21));
  }
  operator new();
}

uint64_t CARenderUpdateAllocateSeed()
{
  return atomic_fetch_add(&CA::Render::Update::_update_counter, 1u) + 1;
}

uint64_t CARenderPresentAcquire(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  uint64_t v2 = &v3;
  std::__tree<CA::Render::Object *>::swap((uint64_t *)(a1 + 856), (uint64_t)&v2);
  if (v4) {
    operator new();
  }
  std::__tree<std::tuple<unsigned short,unsigned short>>::destroy(v3);
  return 0;
}

uint64_t CARenderPresentRelease(uint64_t result, double a2, double a3)
{
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void **)(result + 16);
    uint64_t v5 = (void *)(result + 24);
    if (v4 != (void *)(result + 24))
    {
      int v7 = *(_DWORD *)result;
      double v8 = a2 - a3;
      do
      {
        int8x16_t v9 = (CA::Render::ImageQueue *)v4[4];
        if (*((unsigned char *)v9 + 12) != 25) {
          __assert_rtn("CARenderPresentRelease", "render-updater.cpp", 16484, "obj->type () == Render::kTypeImageQueue");
        }
        CA::Render::ImageQueue::did_display(v9, v7, a2, v8, 0.0);
        int8x16_t v10 = (atomic_uint *)v4[4];
        if (v10 && atomic_fetch_add(v10 + 2, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v10 + 16))(v10);
        }
        int8x16_t v11 = (void *)v4[1];
        if (v11)
        {
          do
          {
            int8x16_t v12 = v11;
            int8x16_t v11 = (void *)*v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            int8x16_t v12 = (void *)v4[2];
            BOOL v13 = *v12 == (void)v4;
            uint64_t v4 = v12;
          }
          while (!v13);
        }
        uint64_t v4 = v12;
      }
      while (v12 != v5);
    }
    std::__tree<std::tuple<unsigned short,unsigned short>>::destroy(*(void **)(v3 + 24));
    JUMPOUT(0x185323DC0);
  }
  return result;
}

uint64_t CARenderUpdateSetIsolated(uint64_t result, int a2)
{
  int v2 = 4;
  if (!a2) {
    int v2 = 0;
  }
  unint64_t v3 = *(_DWORD *)(result + 1084) & 0xFFFFFFFB | ((unint64_t)*(unsigned __int16 *)(result + 1088) << 32);
  *(_DWORD *)(result + 1084) = *(_DWORD *)(result + 1084) & 0xFFFFFFFB | v2;
  *(_WORD *)(result + 1088) = WORD2(v3);
  return result;
}

uint64_t CARenderUpdateSetAllowsHostedContexts(uint64_t result, int a2)
{
  int v2 = 0x8000;
  if (!a2) {
    int v2 = 0;
  }
  unint64_t v3 = *(_DWORD *)(result + 1084) & 0xFFFF7FFF | ((unint64_t)*(unsigned __int16 *)(result + 1088) << 32);
  *(_DWORD *)(result + 1084) = *(_DWORD *)(result + 1084) & 0xFFFF7FFF | v2;
  *(_WORD *)(result + 1088) = WORD2(v3);
  return result;
}

uint64_t CARenderUpdateSetSkipsBackdropCollect(uint64_t result, int a2)
{
  int v2 = 0x10000;
  if (!a2) {
    int v2 = 0;
  }
  unint64_t v3 = *(_DWORD *)(result + 1084) & 0xFFFEFFFF | ((unint64_t)*(unsigned __int16 *)(result + 1088) << 32);
  *(_DWORD *)(result + 1084) = *(_DWORD *)(result + 1084) & 0xFFFEFFFF | v2;
  *(_WORD *)(result + 1088) = WORD2(v3);
  return result;
}

uint64_t CARenderUpdateSetVBLTime(uint64_t result, double a2)
{
  *(double *)(result + 104) = a2;
  return result;
}

uint64_t CARenderUpdateSetInterval(uint64_t result, double a2)
{
  *(double *)(result + 112) = a2;
  return result;
}

void CARenderUpdateSetExcludedLayerIdentifiers(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef v3 = *(CFTypeRef *)(a1 + 912);
  if (v3 != cf)
  {
    if (v3) {
      CFRelease(v3);
    }
    *(void *)(a1 + 912) = cf;
    if (cf)
    {
      CFRetain(cf);
    }
  }
}

uint64_t CARenderUpdateInvalidateDetachedLayers(uint64_t result)
{
  *(_DWORD *)(result + 1084) |= 0x20000u;
  return result;
}

void CARenderUpdateAddContext(CA::Render::Update *a1, CA::Render::Context *this)
{
  uint64_t v4 = CA::Render::Context::root_layer_handle(this);
  if (v4) {
    uint64_t v5 = *(CA::Render::Layer **)(v4 + 16);
  }
  else {
    uint64_t v5 = 0;
  }
  CA::Render::Update::add_context(a1, this, v5, 0);

  CA::Render::Update::added_all_contexts((uint64_t **)a1, v6, v7);
}

void CARenderUpdateAddContext3(CA::Render::Update *a1, CA::Render::Context *this)
{
  uint64_t v4 = CA::Render::Context::root_layer_handle(this);
  if (v4) {
    uint64_t v5 = *(CA::Render::Layer **)(v4 + 16);
  }
  else {
    uint64_t v5 = 0;
  }

  CA::Render::Update::add_context(a1, this, v5, 0);
}

void CARenderUpdateRemoveContextNode(uint64_t a1, CA::Render::Context *this)
{
  uint64_t v3 = CA::Render::Context::root_layer_handle(this);
  if (v3)
  {
    uint64_t v5 = *(void *)(v3 + 16);
    if (v5)
    {
      if ((*(_DWORD *)(a1 + 1084) & 4) == 0)
      {
        uint64_t v6 = *(void *)(v5 + 144);
        if (v6)
        {
          int v7 = *(atomic_uint **)(v6 + 40);
          if (v7)
          {
            for (uint64_t i = *(uint64_t **)(a1 + 224); i != (uint64_t *)(a1 + 216); uint64_t i = (uint64_t *)i[1])
            {
              if (i == (uint64_t *)v7)
              {
                uint64_t v10 = *(void *)v7;
                int8x16_t v9 = (void *)*((void *)v7 + 1);
                *(void *)(v10 + 8) = v9;
                *int8x16_t v9 = v10;
                *(void *)int v7 = v7;
                *((void *)v7 + 1) = v7;
                if (atomic_fetch_add(v7 + 4, 0xFFFFFFFF) == 1)
                {
                  CA::Render::LayerNode::delete_node((CA::Render::LayerNode *)v7, v4);
                }
                return;
              }
            }
          }
        }
      }
    }
  }
}

uint64_t CARenderUpdateGetFlags(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 268);
  int v2 = v1 & 6 | ((v1 & 1) << 22) | (v1 >> 5) & 8 | (16 * ((v1 >> 3) & 3)) | 0x40;
  if ((v1 & 0x38000) == 0) {
    int v2 = *(_DWORD *)(a1 + 268) & 6 | ((*(_DWORD *)(a1 + 268) & 1) << 22) | (*(_DWORD *)(a1 + 268) >> 5) & 8 | (16 * ((*(_DWORD *)(a1 + 268) >> 3) & 3));
  }
  int v3 = (v1 >> 6) & 0x100 | (v1 >> 5) & 0x80 | (v1 >> 11) & 0x1000 | (v1 >> 5 << 13) | (v1 >> 9) & 0x70000 | (v1 >> 10) & 0x180000 | v2;
  if ((v1 & 0x80000000) != 0) {
    v3 |= 0x200000u;
  }
  return v3 | (16 * v1) & 0x800000;
}

int8x8_t CARenderUpdateAddFlags(uint64_t a1, unsigned int a2)
{
  uint32x4_t v2 = (uint32x4_t)vdupq_n_s32(a2);
  v4.i64[0] = vshlq_u32(v2, (uint32x4_t)xmmword_184998180).u64[0];
  int8x16_t v3 = (int8x16_t)vshlq_u32(v2, (uint32x4_t)xmmword_184998190);
  v3.i32[3] = vshlq_u32(v2, (uint32x4_t)xmmword_1849981B0).i32[3];
  v4.i64[1] = vshlq_u32(v2, (uint32x4_t)xmmword_1849981A0).i64[1];
  unsigned int v5 = v3.i16[0] & 0x100 | a2 & 6 | (a2 >> 1) & 0x18;
  if ((a2 & 0x40) != 0) {
    v5 |= 0x38000u;
  }
  int8x16_t v6 = vorrq_s8(vandq_s8(v3, (int8x16_t)xmmword_1849981D0), vandq_s8(v4, (int8x16_t)xmmword_1849981C0));
  int8x8_t result = vorr_s8(*(int8x8_t *)v6.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL));
  *(_DWORD *)(a1 + 268) |= result.i32[0] | result.i32[1] | v5;
  return result;
}

void CARenderUpdateAddRect(uint64_t a1, uint64_t a2, double a3, float64x2_t a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  int8x16_t v5 = *(int8x16_t *)(a2 + 16);
  a4.f64[0] = 0.0;
  int8x16_t v6 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(a4, (float64x2_t)v5).i64[0], 0);
  v7.i64[1] = *(void *)(a2 + 24);
  *(double *)v7.i64 = -*(double *)v5.i64;
  int8x16_t v8 = vbslq_s8(v6, v7, v5);
  int8x16_t v9 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(a4, (float64x2_t)vdupq_laneq_s64((int64x2_t)v5, 1)).i64[0], 0);
  v10.i64[0] = v8.i64[0];
  v10.i64[1] = *(void *)&vnegq_f64(*(float64x2_t *)&v5).f64[1];
  float64x2_t v11 = (float64x2_t)vbslq_s8(v9, v10, v8);
  int8x16_t v12 = (int8x16_t)vceqzq_f64(v11);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v12, 1), v12).u64[0] & 0x8000000000000000) != 0
    || (int8x16_t v13 = vorrq_s8((int8x16_t)vcltzq_f64(v11), (int8x16_t)vcgezq_f64(v11)),
        int8x16_t v14 = (int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v13), 1),
        (vornq_s8(v14, v13).u64[0] & 0x8000000000000000) != 0))
  {
    int32x4_t v20 = 0uLL;
  }
  else
  {
    v14.i64[0] = 0x8000000000000000;
    v15.i64[0] = *(_OWORD *)&vaddq_f64(*(float64x2_t *)a2, (float64x2_t)vbslq_s8(v6, v5, v14));
    v16.i64[0] = v15.i64[0];
    v16.i64[1] = *(void *)(a2 + 8);
    v15.i64[1] = *(void *)&vaddq_f64(*(float64x2_t *)&v5, *(float64x2_t *)a2).f64[1];
    float64x2_t v17 = (float64x2_t)vbslq_s8(v9, v15, v16);
    int32x4_t v18 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v17, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
    int32x4_t v20 = vuzp1q_s32(v18, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v17, v11), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v18));
  }
  long long v22 = 0u;
  long long v23 = 0u;
  *(_OWORD *)int32x4_t v21 = 0u;
  CA::Shape::operator=((uint64_t)v21, &v20);
  CA::shape_union((CA::Shape **)(a1 + 16), v21, v19);
}

unint64_t CARenderUpdateSetRect(uint64_t a1, uint64_t a2, double a3, float64x2_t a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  int8x16_t v5 = *(int8x16_t *)(a2 + 16);
  a4.f64[0] = 0.0;
  int8x16_t v6 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(a4, (float64x2_t)v5).i64[0], 0);
  v7.i64[1] = *(void *)(a2 + 24);
  *(double *)v7.i64 = -*(double *)v5.i64;
  int8x16_t v8 = vbslq_s8(v6, v7, v5);
  int8x16_t v9 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(a4, (float64x2_t)vdupq_laneq_s64((int64x2_t)v5, 1)).i64[0], 0);
  v10.i64[0] = v8.i64[0];
  v10.i64[1] = *(void *)&vnegq_f64(*(float64x2_t *)&v5).f64[1];
  float64x2_t v11 = (float64x2_t)vbslq_s8(v9, v10, v8);
  int8x16_t v12 = (int8x16_t)vceqzq_f64(v11);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v12, 1), v12).u64[0] & 0x8000000000000000) != 0
    || (int8x16_t v13 = vorrq_s8((int8x16_t)vcltzq_f64(v11), (int8x16_t)vcgezq_f64(v11)),
        int8x16_t v14 = (int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v13), 1),
        (vornq_s8(v14, v13).u64[0] & 0x8000000000000000) != 0))
  {
    int32x4_t v20 = 0uLL;
  }
  else
  {
    v14.i64[0] = 0x8000000000000000;
    v15.i64[0] = *(_OWORD *)&vaddq_f64(*(float64x2_t *)a2, (float64x2_t)vbslq_s8(v6, v5, v14));
    v16.i64[0] = v15.i64[0];
    v16.i64[1] = *(void *)(a2 + 8);
    v15.i64[1] = *(void *)&vaddq_f64(*(float64x2_t *)&v5, *(float64x2_t *)a2).f64[1];
    float64x2_t v17 = (float64x2_t)vbslq_s8(v9, v15, v16);
    int32x4_t v18 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v17, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
    int32x4_t v20 = vuzp1q_s32(v18, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v17, v11), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v18));
  }
  CA::Shape::unref(*(CA::Shape **)(a1 + 16));
  unint64_t result = CA::Shape::new_shape((unsigned int *)&v20);
  *(void *)(a1 + 16) = result;
  return result;
}

void CARenderUpdateAddRegion(uint64_t a1)
{
  uint32x4_t v2 = (CA::Shape **)CA::Shape::new_shape();
  if (v2)
  {
    int8x16_t v4 = (CA::Shape *)v2;
    CA::shape_union((CA::Shape **)(a1 + 16), v2, v3);
    CA::Shape::unref(v4);
  }
}

void CARenderUpdateSetRegion(CA::Render::Update *a1)
{
  uint32x4_t v2 = (const CA::Shape *)CA::Shape::new_shape();
  if (v2)
  {
    int8x16_t v3 = v2;
    CA::Render::Update::set_shape(a1, v2);
    CA::Shape::unref(v3);
  }
}

uint64_t CARenderUpdateCopyRegion(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    if (v1 == 1) {
      goto LABEL_6;
    }
LABEL_7:
    CGSNewRegionWithRect();
    return 0;
  }
  int v2 = *(_DWORD *)(v1 + 4);
  if (v2 == 12) {
    goto LABEL_7;
  }
  if (v2 == 6)
  {
LABEL_6:
    CGSNewEmptyRegion();
    return 0;
  }
  CGSNewRegionWithData();
  return 0;
}

int8x16_t CARenderUpdateGetBounds(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  if (*(_DWORD *)(a1 + 200) <= *(_DWORD *)(a1 + 204)) {
    unsigned __int32 v3 = *(_DWORD *)(a1 + 204);
  }
  else {
    unsigned __int32 v3 = *(_DWORD *)(a1 + 200);
  }
  a2.i32[0] = 1073741822;
  a3.i32[0] = v3;
  int8x16_t v4 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(a3, a2), 0);
  uint64_t v5 = *(void *)(a1 + 192);
  v6.i64[0] = (int)v5;
  v6.i64[1] = SHIDWORD(v5);
  return vbslq_s8(v4, (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v6));
}

uint64_t CARenderUpdateGetSeed(uint64_t a1)
{
  return *(unsigned int *)(a1 + 248);
}

double CARenderUpdateGetTime(uint64_t a1)
{
  return *(double *)(a1 + 72);
}

uint64_t CARenderUpdateGetTimeStamp(uint64_t a1)
{
  return *(void *)(a1 + 160);
}

double CARenderUpdateGetNextTime(uint64_t a1)
{
  return *(double *)(a1 + 80);
}

void *CARenderUpdateResetNextTime(void *result)
{
  result[11] = 0;
  result[12] = 0;
  result[10] = 0x7FF0000000000000;
  return result;
}

double CARenderUpdateGetBeginTime(uint64_t a1)
{
  double result = *(double *)(a1 + 768);
  if (result == 1.79769313e308) {
    return 0.0;
  }
  return result;
}

uint64_t CARenderUpdateSetStartTime(uint64_t result, double a2)
{
  *(double *)(result + 120) = a2;
  return result;
}

uint64_t CARenderUpdateGetPrepareLayerCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 752);
}

uint64_t CARenderUpdateGetPrepareLayer0Count(uint64_t a1)
{
  return *(unsigned int *)(a1 + 756);
}

CA::Render::Update *CARenderUpdateFinish(CA::Render::Update *result, CA::Render::LayerNode *a2)
{
  if (result)
  {
    CA::Render::Update::~Update(result, a2);
    JUMPOUT(0x185323DC0);
  }
  return result;
}

void CARenderUpdateSetEDRAttributes(_OWORD *a1, float a2, float a3, float a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  long long v4 = a1[23];
  long long v8 = a1[22];
  long long v9 = v4;
  long long v5 = a1[27];
  long long v12 = a1[26];
  long long v13 = v5;
  long long v6 = a1[29];
  long long v14 = a1[28];
  long long v15 = v6;
  long long v7 = a1[25];
  long long v10 = a1[24];
  long long v11 = v7;
  *(void *)&long long v9 = __PAIR64__(LODWORD(a2), LODWORD(a4));
  *((float *)&v8 + 3) = a3;
  CA::Render::Update::set_display_attributes((uint64_t)a1, (float *)&v8);
}

__n128 CARenderUpdateSetDisplayType(_OWORD *a1, int a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  long long v2 = a1[27];
  long long v9 = a1[26];
  long long v10 = v2;
  long long v3 = a1[29];
  long long v11 = a1[28];
  long long v12 = v3;
  long long v4 = a1[23];
  v7[0] = a1[22];
  v7[1] = v4;
  long long v5 = a1[25];
  unint64_t v7[2] = a1[24];
  long long v8 = v5;
  HIDWORD(v8) = a2;
  CA::Render::Update::set_display_attributes((uint64_t)a1, (float *)v7);
  return result;
}

void CARenderUpdateSetDisplayAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a1 && a2)
  {
    unsigned int v3 = *(_DWORD *)a2;
    if ((*(_DWORD *)a2 - 5) > 0xFFFFFFFB)
    {
      *(void *)&v9[16] = 0x3F80000000000000;
      memset(v12, 0, sizeof(v12));
      *(_OWORD *)long long v9 = 0u;
      long long v10 = xmmword_184997E30;
      uint64_t v11 = 0;
      LOWORD(v12[0]) = 0;
      *(_DWORD *)uint64_t v13 = 1065353216;
      *(_OWORD *)&float32x2_t v13[4] = 0uLL;
      int v14 = -1;
      *(void *)long long buf = *(void *)(a2 + 4);
      long long v4 = *(_OWORD *)(a2 + 12);
      *(_OWORD *)&_OWORD v9[4] = v4;
      DWORD1(v12[0]) = *(_DWORD *)(a2 + 28);
      DWORD2(v12[0]) = 1;
      if (*(float *)&v4 > 0.0 && *((float *)&v4 + 2) > 0.0)
      {
        float v5 = *(float *)&v4 / (*((float *)&v4 + 2) * 100.0);
        *(float *)&v9[20] = v5;
      }
      if (v3 >= 2)
      {
        BYTE6(v11) = *(unsigned char *)(a2 + 32);
        if (v3 != 2)
        {
          DWORD2(v12[0]) = *(_DWORD *)(a2 + 36);
          if (v3 >= 4) {
            *(_OWORD *)uint64_t v13 = *(_OWORD *)(a2 + 40);
          }
        }
      }
      CA::Render::Update::set_display_attributes(a1, (float *)buf);
    }
    else if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      long long v6 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
      {
        unsigned int v7 = *(_DWORD *)a2;
        *(_DWORD *)long long buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v7;
        _os_log_impl(&dword_184668000, v6, OS_LOG_TYPE_ERROR, "Invalid display attributes version %d", buf, 8u);
      }
    }
  }
}

uint64_t CARenderUpdateSetTonemapAccelerator(uint64_t result, int a2)
{
  *(_DWORD *)(result + 480) = a2;
  return result;
}

uint64_t CARenderUpdateSetProtectionOptions(uint64_t result, uint64_t a2)
{
  *(void *)(result + 288) |= a2;
  return result;
}

uint64_t CARenderUpdateGetProtectionOptions(uint64_t a1)
{
  return *(void *)(a1 + 288);
}

uint64_t CAMachPortCreate(int a1)
{
  if (!a1) {
    return 0;
  }
  if (CAMachPortGetTypeID::once[0] != -1) {
    dispatch_once(CAMachPortGetTypeID::once, &__block_literal_global_5766);
  }
  uint64_t result = _CFRuntimeCreateInstance();
  if (result) {
    *(_DWORD *)(result + 16) = a1;
  }
  return result;
}

uint64_t __CAMachPortGetTypeID_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  CAMachPortGetTypeID::type = result;
  return result;
}

CFStringRef caMachPortCopyDebugDescription(CFStringRef result)
{
  if (result)
  {
    CFStringRef v1 = result;
    CFAllocatorRef v2 = CFGetAllocator(result);
    return CFStringCreateWithFormat(v2, 0, @"<CAMachPort %p mach_port = %u>", v1, LODWORD(v1->data));
  }
  return result;
}

CFStringRef caMachPortCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  CFAllocatorRef v4 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v4, a2, @"<CAMachPort %p>", a1);
}

uint64_t caMachPortHash(unsigned int *a1)
{
  return a1[4];
}

BOOL caMachPortEqual(_DWORD *a1, _DWORD *a2)
{
  return a1[4] == a2[4];
}

uint64_t caMachPortFinalize(uint64_t result)
{
  if (result)
  {
    mach_port_name_t v1 = *(_DWORD *)(result + 16);
    if (v1) {
      return mach_port_deallocate(*MEMORY[0x1E4F14960], v1);
    }
  }
  return result;
}

uint64_t CAMachPortGetTypeID()
{
  if (CAMachPortGetTypeID::once[0] != -1) {
    dispatch_once(CAMachPortGetTypeID::once, &__block_literal_global_5766);
  }
  return CAMachPortGetTypeID::type;
}

uint64_t CAMachPortGetPort(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 16);
  }
  return result;
}

uint32x2_t CA::Render::convert_cgcolor(CA::Render *this, CGColor *a2, CGColorSpace *a3, float *a4, CA::Render::Pattern **a5)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  long long v10 = 0uLL;
  CA::Render::convert_cgcolor_to_float(this, a2, (CGColorSpace *)&v10, a4, a5);
  float32x2_t v6 = (float32x2_t)vdup_n_s32(0x437F0000u);
  int v7 = (int)(float)((float)(*(float *)&v10 * 255.0) + 0.5) & ~((int)(float)((float)(*(float *)&v10 * 255.0) + 0.5) >> 31);
  int v8 = (int)(float)((float)(*((float *)&v10 + 3) * 255.0) + 0.5) & ~((int)(float)((float)(*((float *)&v10 + 3) * 255.0)
                                                                                + 0.5) >> 31);
  if (v7 >= 255) {
    int v7 = 255;
  }
  if (v8 >= 255) {
    int v8 = 255;
  }
  uint32x2_t result = vshl_u32((uint32x2_t)vmin_s32(vmax_s32(vcvt_s32_f32(vmla_f32((float32x2_t)0x3F0000003F000000, v6, *(float32x2_t *)((char *)&v10 + 4))), 0), (int32x2_t)0xFF000000FFLL), (uint32x2_t)0x800000010);
  *(_DWORD *)a3 = result.i32[0] | (v7 << 24) | v8 | result.i32[1];
  return result;
}

uint64_t __CARenderObjectGetTypeID_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  CARenderObjectGetTypeID::type = result;
  return result;
}

CFStringRef anonymous namespace'::render_object_copy_debug_description(_anonymous_namespace_ *this, const void *a2)
{
  CFAllocatorRef v3 = CFGetAllocator(this);
  return CFStringCreateWithFormat(v3, 0, @"<CARenderObject %p>", this);
}

CFStringRef anonymous namespace'::render_object_copy_format_description(_anonymous_namespace_ *this, const __CFDictionary *a2, const __CFDictionary *a3)
{
  CFAllocatorRef v5 = CFGetAllocator(this);
  return CFStringCreateWithFormat(v5, a2, @"<CARenderObject %p>", this);
}

atomic_uint *anonymous namespace'::render_object_finalize(_anonymous_namespace_ *this, const void *a2)
{
  uint64_t result = (atomic_uint *)*((void *)this + 2);
  if (result)
  {
    if (atomic_fetch_add(result + 2, 0xFFFFFFFF) == 1) {
      return (atomic_uint *)(*(uint64_t (**)(void))(*(void *)result + 16))();
    }
  }
  return result;
}

uint64_t CA::Render::numeric_value_count(CA::Render *this, const void *a2)
{
  if (CA::Render::initialize_types(void)::once[0] != -1) {
    dispatch_once(CA::Render::initialize_types(void)::once, &__block_literal_global_5);
  }
  CFTypeID v3 = CFGetTypeID(this);
  if (v3 == CA::Render::color_type && !CGColorGetPattern(this)) {
    return 4;
  }
  if (v3 == CA::Render::number_type || v3 == CA::Render::BOOL_type) {
    return 1;
  }
  if (v3 != CA::Render::array_type) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(this);
  if (!Count) {
    return 0;
  }
  CFIndex v7 = Count;
  CFIndex v8 = 0;
  uint64_t v5 = 0;
  do
  {
    ValueAtIndeCGFloat x = (CA::Render *)CFArrayGetValueAtIndex(this, v8);
    v5 += CA::Render::numeric_value_count(ValueAtIndex, v10);
    ++v8;
  }
  while (v7 != v8);
  return v5;
}

uint64_t CA::Render::copy_numeric_value(CA::Render *this, CGColorSpace *a2, CGColorSpace *a3, double *a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (CA::Render::initialize_types(void)::once[0] != -1) {
    dispatch_once(CA::Render::initialize_types(void)::once, &__block_literal_global_5);
  }
  CFTypeID v7 = CFGetTypeID(this);
  if (v7 == CA::Render::color_type)
  {
    if (!CGColorGetPattern(this))
    {
      float64x2_t v17 = 0u;
      long long v18 = 0u;
      CA_CGColorGetRGBComponents(this, a2, v17.f64);
      long long v10 = v18;
      *(float64x2_t *)a3 = vmulq_n_f64(v17, *((double *)&v18 + 1));
      *((double *)a3 + 2) = *(double *)&v10 * *((double *)&v10 + 1);
      *((void *)a3 + 3) = *((void *)&v10 + 1);
      return 4;
    }
    return 0;
  }
  if (v7 == CA::Render::number_type)
  {
    if (this)
    {
      v17.f64[0] = 0.0;
      CFNumberGetValue(this, kCFNumberDoubleType, &v17);
      double v9 = v17.f64[0];
    }
    else
    {
      double v9 = 0.0;
    }
LABEL_20:
    *(double *)a3 = v9;
    return 1;
  }
  if (v7 == CA::Render::BOOL_type)
  {
    double v9 = 0.0;
    if ((CA::Render *)*MEMORY[0x1E4F1CFC8] != this) {
      double v9 = 1.0;
    }
    goto LABEL_20;
  }
  if (v7 != CA::Render::array_type) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(this);
  if (!Count) {
    return 0;
  }
  CFIndex v12 = Count;
  CFIndex v13 = 0;
  uint64_t v8 = 0;
  do
  {
    ValueAtIndeCGFloat x = (CA::Render *)CFArrayGetValueAtIndex(this, v13);
    v8 += CA::Render::copy_numeric_value(ValueAtIndex, a2, (CGColorSpace *)((char *)a3 + 8 * v8), v15);
    ++v13;
  }
  while (v12 != v13);
  return v8;
}

void CARenderCollect(int a1)
{
  if ((a1 & 0x80000000) == 0)
  {
    uint64_t v2 = mach_absolute_time();
    double v3 = CATimeWithHostTime(v2);
    CA::Render::collect((CA::Render *)(a1 != 0), v3);
  }
}

uint64_t CARenderGetGlobalFeatureFlags()
{
  return global_feature_flags;
}

uint64_t CARenderSetGlobalFeatureFlags(uint64_t result)
{
  global_feature_flags = result;
  return result;
}

uint64_t CA::fo_removed_context(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if (!a3 || !a4) {
    __assert_rtn("fo_removed_context", "CAContextInternal.mm", 355, "server_id != 0 && client_id != 0");
  }
  uint64_t v7 = mach_absolute_time();
  double v8 = CATimeWithHostTime(v7);

  return CA::Context::send_deferrals(a3, a4, a2, 0, v8);
}

CFArrayRef CA::Context::retain_objc_contexts(CA::Context *this)
{
  v15[1] = *MEMORY[0x1E4F143B8];
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Context::_lock);
  if ((CA::all_contexts(void)::contexts_data_initialized & 1) == 0)
  {
    CFArrayRef v13 = 0;
    CA::all_contexts(void)::contexts_datdouble a = 0;
    qword_1EB2AC6F8 = 0;
    qword_1EB2AC700 = 0;
    CA::all_contexts(void)::contexts_data_initializedouble d = 1;
    goto LABEL_18;
  }
  uint64_t v2 = (void *)CA::all_contexts(void)::contexts_data;
  uint64_t v3 = qword_1EB2AC6F8;
  if (CA::all_contexts(void)::contexts_data == qword_1EB2AC6F8) {
    goto LABEL_17;
  }
  uint64_t v4 = 0;
  uint64_t v5 = (_DWORD **)CA::all_contexts(void)::contexts_data;
  do
  {
    float32x2_t v6 = *v5++;
    if (*v6) {
      ++v4;
    }
  }
  while (v5 != (_DWORD **)qword_1EB2AC6F8);
  if (!v4)
  {
LABEL_17:
    CFArrayRef v13 = 0;
    goto LABEL_18;
  }
  MEMORY[0x1F4188790](v1);
  double v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v8, v7);
  CFIndex v9 = 0;
  do
  {
    long long v10 = (_DWORD *)*v2;
    if (!*(_DWORD *)*v2) {
      goto LABEL_13;
    }
    uint64_t v11 = (id *)(v10 + 20);
    if (*((unsigned char *)v10 + 88))
    {
      Weauint64_t k = objc_loadWeak(v11);
      if (!Weak) {
        goto LABEL_13;
      }
LABEL_12:
      *(void *)&v8[8 * v9++] = Weak;
      goto LABEL_13;
    }
    Weauint64_t k = *v11;
    if (Weak) {
      goto LABEL_12;
    }
LABEL_13:
    ++v2;
  }
  while (v2 != (void *)v3);
  CFArrayRef v13 = CFArrayCreate(0, (const void **)v8, v9, MEMORY[0x1E4F1D510]);
LABEL_18:
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Context::_lock);
  return v13;
}

void sub_1848717E0(_Unwind_Exception *a1)
{
}

void CA::Context::Generic::~Generic(CA::Context::Generic *this)
{
}

void CA::Context::ping(CA::Context *this)
{
  mach_msg_return_t v5;
  mach_error_t v6;
  NSObject *v7;
  int v8;
  char *v9;
  unsigned char msg[36];
  uint64_t v11;
  uint64_t v12;
  uint64_t vars8;

  CFIndex v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (pthread_mutex_t *)((char *)this + 16);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
  if (!*((void *)this + 13))
  {
    unsigned int v3 = *((_DWORD *)this + 40);
    if (!v3 || (*((unsigned char *)this + 241) & 2) != 0) {
      goto LABEL_33;
    }
    uint64_t v11 = 0;
    *(_OWORD *)&msg[20] = 0u;
    *(_DWORD *)&msg[4] = 0;
    mach_port_t reply_port = mig_get_reply_port();
    *(void *)&msg[8] = __PAIR64__(reply_port, v3);
    *(_DWORD *)msg = 5395;
    *(void *)&msg[16] = 0x9D0800000000;
    if (MEMORY[0x1E4F14B18])
    {
      voucher_mach_msg_set((mach_msg_header_t *)msg);
      mach_port_t reply_port = *(_DWORD *)&msg[12];
    }
    uint64_t v5 = mach_msg((mach_msg_header_t *)msg, 3, 0x18u, 0x2Cu, reply_port, 0, 0);
    float32x2_t v6 = v5;
    if ((v5 - 268435458) <= 0xE && ((1 << (v5 - 2)) & 0x4003) != 0)
    {
      mig_put_reply_port(*(mach_port_t *)&msg[12]);
      goto LABEL_24;
    }
    if (v5)
    {
      mig_dealloc_reply_port(*(mach_port_t *)&msg[12]);
    }
    else
    {
      if (*(_DWORD *)&msg[20] == 71)
      {
        float32x2_t v6 = -308;
      }
      else if (*(_DWORD *)&msg[20] == 40300)
      {
        float32x2_t v6 = -300;
        if ((*(_DWORD *)msg & 0x80000000) == 0 && *(_DWORD *)&msg[4] == 36 && !*(_DWORD *)&msg[8])
        {
          float32x2_t v6 = *(_DWORD *)&msg[32];
          if (!*(_DWORD *)&msg[32])
          {
LABEL_33:
            pthread_mutex_unlock(v2);
            return;
          }
        }
      }
      else
      {
        float32x2_t v6 = -301;
      }
      mach_msg_destroy((mach_msg_header_t *)msg);
    }
LABEL_24:
    if (v6)
    {
      if (v6 == 268435459)
      {
        *((unsigned char *)this + 241) |= 2u;
      }
      else if (v6 == -81182719)
      {
        x_log_crash("Unentitled call to server!");
        abort();
      }
      if (x_log_hook_p())
      {
        mach_error_string(v6);
        x_log_();
      }
      else
      {
        size_t v7 = x_log_category_api;
        if (os_log_type_enabled((os_log_t)x_log_category_api, OS_LOG_TYPE_ERROR))
        {
          double v8 = *((_DWORD *)this + 1);
          CFIndex v9 = mach_error_string(v6);
          *(_DWORD *)msg = 67109634;
          *(_DWORD *)&msg[4] = v8;
          *(_WORD *)&msg[8] = 1024;
          *(_DWORD *)&msg[10] = v6;
          *(_WORD *)&msg[14] = 2080;
          *(void *)&msg[16] = v9;
          _os_log_impl(&dword_184668000, v7, OS_LOG_TYPE_ERROR, "Failed to ping server (client=0x%x) [0x%x %s]", msg, 0x18u);
        }
      }
    }
    goto LABEL_33;
  }
  pthread_mutex_unlock(v2);

  CA::Render::post_notification(0xCu, 0, 0, 0);
}

void sub_184871AE4(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

CFTypeRef CA::Context::retain_layer(CA::Context *this)
{
  uint64_t v2 = (pthread_mutex_t *)((char *)this + 16);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
  unsigned int v3 = (const void *)*((void *)this + 12);
  if (v3) {
    CFTypeRef v4 = CFRetain(v3);
  }
  else {
    CFTypeRef v4 = 0;
  }
  pthread_mutex_unlock(v2);
  return v4;
}

void sub_184871B4C(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t CA::Context::new_image_slot(CA::Context *this, CA::Render *a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *((void *)this + 13);
  if (v10)
  {
    pthread_mutex_lock((pthread_mutex_t *)(v10 + 72));
    uint64_t v11 = CA::Render::Context::new_image_slot(*((CA::Render::Context **)this + 13), a2, a3, a4, a5);
    pthread_mutex_unlock((pthread_mutex_t *)(*((void *)this + 13) + 72));
    return v11;
  }
  if ((*((unsigned char *)this + 241) & 2) != 0) {
    return 0;
  }
  unsigned int v13 = *((_DWORD *)this + 40);
  *((void *)&msg_16 + 1) = *MEMORY[0x1E4F14068];
  unint64_t v24 = __PAIR64__(a3, a2);
  unint64_t v25 = __PAIR64__(a5, a4);
  mach_port_t reply_port = mig_get_reply_port();
  uint64_t msg = 5395;
  unint64_t msg_8 = __PAIR64__(reply_port, v13);
  *(void *)&long long msg_16 = 0x9D1400000000;
  if (MEMORY[0x1E4F14B18])
  {
    voucher_mach_msg_set((mach_msg_header_t *)&msg);
    mach_port_t reply_port = HIDWORD(msg_8);
  }
  uint64_t v15 = mach_msg((mach_msg_header_t *)&msg, 3, 0x30u, 0x30u, reply_port, 0, 0);
  uint64_t v16 = v15;
  if ((v15 - 268435458) <= 0xE && ((1 << (v15 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(HIDWORD(msg_8));
    if (!v16) {
      return v16;
    }
    goto LABEL_28;
  }
  if (v15)
  {
    mig_dealloc_reply_port(HIDWORD(msg_8));
LABEL_28:
    if (v16 == 268435459)
    {
      *((unsigned char *)this + 241) |= 2u;
    }
    else if (v16 == -81182719)
    {
      x_log_crash("Unentitled call to server!");
      abort();
    }
    if (x_log_hook_p())
    {
      mach_error_string(v16);
      x_log_();
    }
    else
    {
      long long v18 = x_log_category_api;
      if (os_log_type_enabled((os_log_t)x_log_category_api, OS_LOG_TYPE_ERROR))
      {
        int v19 = *((_DWORD *)this + 1);
        int32x4_t v20 = mach_error_string(v16);
        LODWORD(msg) = 67110658;
        HIDWORD(msg) = a2;
        LOWORD(msg_8) = 1024;
        *(_DWORD *)((char *)&msg_8 + 2) = a3;
        HIWORD(msg_8) = 1024;
        LODWORD(msg_16) = a4;
        WORD2(msg_16) = 1024;
        *(_DWORD *)((char *)&msg_16 + 6) = a5;
        WORD5(msg_16) = 1024;
        HIDWORD(msg_16) = v19;
        LOWORD(v24) = 1024;
        *(_DWORD *)((char *)&v24 + 2) = v16;
        HIWORD(v24) = 2080;
        unint64_t v25 = (unint64_t)v20;
        _os_log_impl(&dword_184668000, v18, OS_LOG_TYPE_ERROR, "Failed to create %dx%d image slot (alpha=%d wide=%d) (client=0x%x) [0x%x %s]", (uint8_t *)&msg, 0x30u);
      }
    }
    return 0;
  }
  if (DWORD1(msg_16) == 71)
  {
    uint64_t v16 = 4294966988;
    goto LABEL_27;
  }
  if (DWORD1(msg_16) != 40312)
  {
    uint64_t v16 = 4294966995;
    goto LABEL_27;
  }
  if ((msg & 0x80000000) != 0) {
    goto LABEL_26;
  }
  if (HIDWORD(msg) != 40)
  {
    if (HIDWORD(msg) == 36)
    {
      if (msg_8) {
        BOOL v17 = 1;
      }
      else {
        BOOL v17 = v24 == 0;
      }
      if (v17) {
        uint64_t v16 = 4294966996;
      }
      else {
        uint64_t v16 = v24;
      }
      goto LABEL_27;
    }
LABEL_26:
    uint64_t v16 = 4294966996;
    goto LABEL_27;
  }
  if (msg_8) {
    goto LABEL_26;
  }
  uint64_t v16 = v24;
  if (!v24) {
    return HIDWORD(v24);
  }
LABEL_27:
  mach_msg_destroy((mach_msg_header_t *)&msg);
  if (v16) {
    goto LABEL_28;
  }
  return v16;
}

uint64_t CA::WindowServer::IOMFBFlipBook::get_destination_surface(CA::WindowServer::IOMFBFlipBook *this, unsigned int a2)
{
  uint64_t result = 0;
  if (a2 <= 1)
  {
    uint64_t v4 = *((void *)this + 37);
    if (v4) {
      return *(void *)(v4 + 8 * a2 + 16);
    }
  }
  return result;
}

__n128 CA::WindowServer::IOMFBFlipBook::debug_surface_bounds@<Q0>(CA::WindowServer::IOMFBFlipBook *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *(__n128 *)(*((void *)this + 2) + 168);
  *a2 = result;
  return result;
}

BOOL CA::WindowServer::IOMFBFlipBook::needs_debug_surface(CA::WindowServer::IOMFBFlipBook *this)
{
  int v1 = *((_DWORD *)this + 73);
  if (byte_1EB2ACC23 && !v1) {
    return 1;
  }
  if (v1 != 1) {
    return byte_1EB2ACC68 != 0;
  }
  if (use_dcp_blitter(void)::once[0] != -1) {
    dispatch_once(use_dcp_blitter(void)::once, &__block_literal_global_5953);
  }
  return !use_dcp_blitter(void)::ret || byte_1EB2ACC68 != 0;
}

void ___ZL15use_dcp_blitterv_block_invoke()
{
  if (initialized != -1) {
    dispatch_once_f(&initialized, 0, (dispatch_function_t)init_debug);
  }
  BOOL v1 = *(float *)&dword_1EB2ACB70 != 3 && byte_1EB2ACC23 == 0;
  use_dcp_blitter(void)::ret = v1;
}

uint64_t CA::WindowServer::IOMFBFlipBook::supports_individual_frame_cancels(CA::WindowServer::IOMFBFlipBook *this)
{
  return 1;
}

BOOL CA::WindowServer::IOMFBFlipBook::swapped_frame_displayed_p(uint64_t a1)
{
  return CA::IOMobileFramebuffer::swap_wait((CA::IOMobileFramebuffer *)(*(void *)(a1 + 16) + 25568)) == 0;
}

void CA::WindowServer::IOMFBFlipBook::cancel_all_swaps(CA::WindowServer::IOMFBFlipBook *this)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int v1 = IOMobileFramebufferSwapCancelAll();
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    uint64_t v2 = x_log_category_flipbook;
    if (os_log_type_enabled((os_log_t)x_log_category_flipbook, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      int v4 = v1;
      _os_log_impl(&dword_184668000, v2, OS_LOG_TYPE_DEFAULT, "IOMFBFlipBook::cancel_all_swaps() = 0x%x", buf, 8u);
    }
  }
}

BOOL CA::WindowServer::IOMFBFlipBook::cancel_frame(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (!*(_DWORD *)(a2 + 48)) {
    __assert_rtn("cancel_frame", "windowserver-iomfb-flipbook.cpp", 399, "frame.swap_id != 0");
  }
  int v3 = IOMobileFramebufferSwapCancel();
  IOSurfaceGetID(*(IOSurfaceRef *)a2);
  kdebug_trace();
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    int v4 = x_log_category_flipbook;
    if (os_log_type_enabled((os_log_t)x_log_category_flipbook, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = *(_DWORD *)(a2 + 48);
      *(_DWORD *)long long buf = 67109376;
      int v8 = v5;
      __int16 v9 = 1024;
      int v10 = v3;
      _os_log_impl(&dword_184668000, v4, OS_LOG_TYPE_DEFAULT, "IOMFBFlipBook::cancel_frame(swap_id %u) = 0x%x", buf, 0xEu);
    }
  }
  return v3 == 0;
}

void CA::WindowServer::IOMFBFlipBook::swap_frame(uint64_t a1, uint64_t a2, uint64_t a3, int32x4_t a4, int32x4_t a5)
{
  uint64_t v144 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 16);
  if (!*(unsigned char *)(v5 + 28167)) {
    __assert_rtn("swap_frame", "windowserver-iomfb-flipbook.cpp", 211, "display_iomfb ()->frame_info_enabled ()");
  }
  __int16 v9 = (CA::IOMobileFramebuffer **)(v5 + 25568);
  int v10 = *(_DWORD *)(v5 + 160);
  int v11 = *(_DWORD *)(v5 + 164);
  if (v10 <= v11) {
    int v12 = *(_DWORD *)(v5 + 164);
  }
  else {
    int v12 = *(_DWORD *)(v5 + 160);
  }
  a4.i32[0] = 1073741822;
  a5.i32[0] = v12;
  int8x16_t v13 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(a5, a4), 0);
  uint64_t v14 = *(void *)(v5 + 152);
  v15.i64[0] = (int)v14;
  v15.i64[1] = SHIDWORD(v14);
  int8x16_t v16 = vbslq_s8(v13, (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v15));
  double v17 = (double)v10;
  if (v12 > 1073741822) {
    double v17 = 1.79769313e308;
  }
  *(int8x16_t *)&v138[0].top = v16;
  if (v12 <= 1073741822) {
    double v18 = (double)v11;
  }
  else {
    double v18 = 1.79769313e308;
  }
  double v139 = v17;
  double v140 = v18;
  unsigned int v137 = 0;
  CA::IOMobileFramebuffer::swap_begin((CA::IOMobileFramebuffer *)(v5 + 25568), &v137);
  *(_DWORD *)(a2 + 48) = v137;
  unint64_t v19 = *(void *)(a2 + 40);
  *(_DWORD *)&v124[0].top = 1;
  buf[0].n128_u64[0] = v19;
  IOMobileFramebufferSwapSetTimestamps();
  int v27 = *(_DWORD *)(a1 + 292);
  if (v27)
  {
    if (v27 != 1) {
      goto LABEL_38;
    }
    int v136 = 0;
    if (!*(void *)(a3 + 8))
    {
      float v123 = 0;
      goto LABEL_29;
    }
    int v136 = (CA::Shape *)CA::Shape::new_shape((unsigned int *)(a2 + 52));
    CA::shape_subtract(&v136, (CA::Shape **)(a2 + 68), v28);
    uint64_t v29 = v136;
    float v123 = v136;
    if (v136)
    {
      if (v136 == (CA::Shape *)1)
      {
        float v123 = (CA::Shape *)1;
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v29 = v136;
      if (*((_DWORD *)v136 + 1) == 6) {
        goto LABEL_29;
      }
    }
    v124[0] = 0;
    v124[1] = 0;
    buf[1].n128_u64[0] = 0;
    buf[0] = (__n128)(unint64_t)v29;
    while (CA::ShapeIterator::iterate((uint64_t *)buf, (int *)v124))
    {
      int32x2_t v39 = (int32x2_t)v124[0];
      int32x2_t v40 = *(int32x2_t *)(a2 + 52);
      int v41 = *(_DWORD *)&v124[1].top;
      int v42 = *(_DWORD *)&v124[1].bottom;
      if (use_dcp_blitter(void)::once[0] != -1)
      {
        Rect v121 = v124[0];
        dispatch_once(use_dcp_blitter(void)::once, &__block_literal_global_5953);
        int32x2_t v39 = (int32x2_t)v121;
      }
      int32x2_t v43 = vsub_s32(v39, v40);
      if (use_dcp_blitter(void)::ret)
      {
        IOMobileFramebufferSwapSetBlit();
      }
      else
      {
        uint64_t v44 = *(void *)(a1 + 296);
        uint64_t v45 = *(void *)(a3 + 8);
        int32x2_t v133 = v43;
        int v134 = v41;
        int v135 = v42;
        long long v132 = *(_OWORD *)&v124[0].top;
        CA::WindowServer::IOMFBFlipBook::Blitter::blit(v44, v45, (unsigned int *)&v133, (unsigned int *)&v132);
      }
    }
LABEL_29:
    if (use_dcp_blitter(void)::once[0] != -1) {
      dispatch_once(use_dcp_blitter(void)::once, &__block_literal_global_5953);
    }
    if (use_dcp_blitter(void)::ret)
    {
      IOMobileFramebufferSwapSetBlit();
      uint64_t v53 = *(void *)(a1 + 16);
      if (byte_1EB2ACC68)
      {
        CA::WindowServer::IOMFBFlipBook::draw_debug_overlay(a1, a2, *(void *)(a2 + 16), v137);
        double v98 = (double)*(int *)(v53 + 176);
        buf[0] = 0uLL;
        buf[1].n128_f64[0] = v98;
        buf[1].n128_u64[1] = 0x4041000000000000;
        CA::IOMobileFramebuffer::swap_set_blit(*v9, *(__IOSurface **)(a2 + 16), (const CA::Rect *)buf, (const CA::Rect *)buf);
      }
      buf[0] = 0uLL;
      uint64_t v54 = *(void *)(v53 + 176);
      v55.i64[0] = (int)v54;
      v55.i64[1] = SHIDWORD(v54);
      buf[1] = (__n128)vcvtq_f64_s64(v55);
      CA::IOMobileFramebuffer::swap_set_layer((CA::IOMobileFramebuffer *)(v5 + 25568), 0, *(IOSurfaceRef *)(*(void *)(a1 + 296) + 8 * *(unsigned __int8 *)(*(void *)(a1 + 296) + 8) + 16), (const Rect *)buf, v138, 256, buf[1], v46, v47, v48, v49, v50, v51, v52);
      *(unsigned char *)(a2 + 96) = *(unsigned char *)(a2 + 96) & 0xFE | *(unsigned char *)(*(void *)(a1 + 296) + 8) & 1;
      goto LABEL_35;
    }
    uint64_t v83 = *(void *)(a1 + 296);
    uint64_t v84 = *(void *)(a2 + 68);
    uint64_t v85 = *(void *)(a2 + 8);
    int v86 = *(_DWORD *)(a2 + 76);
    int v87 = *(_DWORD *)(a2 + 80);
    uint64_t v129 = 0;
    int v130 = v86;
    int v131 = v87;
    uint64_t v126 = v84;
    int v127 = v86;
    int v128 = v87;
    CA::WindowServer::IOMFBFlipBook::Blitter::blit(v83, v85, (unsigned int *)&v129, (unsigned int *)&v126);
    CA::WindowServer::IOMFBFlipBook::Blitter::present_to(*(unsigned __int8 **)(a1 + 296), *(void *)(a2 + 24));
    *(unsigned char *)(a2 + 96) = *(unsigned char *)(a2 + 96) & 0xFE | *(unsigned char *)(*(void *)(a1 + 296) + 8) & 1;
    if (!byte_1EB2ACC23)
    {
LABEL_66:
      uint64_t v95 = *(void *)(a1 + 16);
      buf[0] = 0uLL;
      uint64_t v96 = *(void *)(v95 + 176);
      v97.i64[0] = (int)v96;
      v97.i64[1] = SHIDWORD(v96);
      buf[1] = (__n128)vcvtq_f64_s64(v97);
      CA::IOMobileFramebuffer::swap_set_layer((CA::IOMobileFramebuffer *)v9, 0, *(IOSurfaceRef *)(a2 + 16), (const Rect *)buf, v138, 0, buf[1], v88, v89, v90, v91, v92, v93, v94);
LABEL_35:
      if (v123) {
        CA::Shape::unref(v123);
      }
      *(unsigned char *)(*(void *)(a1 + 296) + 8) = (*(unsigned char *)(*(void *)(a1 + 296) + 8) & 1) == 0;
      goto LABEL_38;
    }
    float64_t v99 = (void *)MEMORY[0x185324A30]();
    uint64_t v100 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
    int64x2_t v101 = *(_WORD **)v100;
    v101[416] = *(_WORD *)(*(void *)v100 + 832) | 2;
    (*(void (**)(_WORD *, void, void, void))(*(void *)v101 + 32))(v101, *(void *)(a2 + 16), 0, 0);
    if (!v123)
    {
      unint64_t v105 = CA::Shape::new_shape((unsigned int *)(a2 + 68));
      float v123 = 0;
      goto LABEL_80;
    }
    unint64_t v102 = (CA::Shape **)CA::Shape::intersect(v123, (const CA::Bounds *)(a2 + 68));
    buf[0].n128_u64[0] = 0x3804000038043804;
    CA::OGL::Context::paint_region((uint64_t)v101, (uint64_t)v102, (uint64_t *)buf, 1);
    CA::shape_subtract(&v136, v102, v103, v104);
    float v123 = v136;
    if (v136)
    {
      if (v136 == (CA::Shape *)1)
      {
LABEL_77:
        unint64_t v115 = CA::Shape::new_shape((unsigned int *)(a2 + 68));
        v124[0] = (Rect)v115;
        if (v102)
        {
          CA::shape_subtract((CA::Shape **)v124, v102, v116, v117);
          double v118 = (CA::Shape *)v124[0];
          buf[0].n128_u64[0] = 0x3804000000003804;
          CA::OGL::Context::paint_region((uint64_t)v101, *(void *)v124, (uint64_t *)buf, 1);
          CA::Shape::unref(v118);
          int8x16_t v119 = (CA::Shape *)v102;
LABEL_81:
          CA::Shape::unref(v119);
          (*(void (**)(_WORD *, uint64_t))(*(void *)v101 + 408))(v101, 1);
          (*(void (**)(_WORD *, void, void, void))(*(void *)v101 + 32))(v101, 0, 0, 0);
          v101[416] &= ~2u;
          goto LABEL_66;
        }
        unint64_t v105 = v115;
LABEL_80:
        buf[0].n128_u64[0] = 0x3804000000003804;
        CA::OGL::Context::paint_region((uint64_t)v101, v105, (uint64_t *)buf, 1);
        int8x16_t v119 = (CA::Shape *)v105;
        goto LABEL_81;
      }
    }
    else if (*((_DWORD *)v136 + 1) == 6)
    {
      goto LABEL_77;
    }
    v124[0] = 0;
    v124[1] = 0;
    buf[1].n128_u64[0] = 0;
    buf[0] = (__n128)(unint64_t)v136;
    uint16x4_t v122 = (uint16x4_t)939786240;
    float64x2_t v120 = (float64x2_t)vdupq_n_s64(0x3FECCCCCCCCCCCCDuLL);
    while (CA::ShapeIterator::iterate((uint64_t *)buf, (int *)v124))
    {
      uint64_t v106 = (CA::Shape *)CA::Shape::new_shape((unsigned int *)v124);
      uint32x4_t v107 = vmovl_u16(v122);
      LOWORD(v141) = v107.i16[0];
      WORD1(v141) = v107.i16[2];
      HIDWORD(v141) = 939786240;
      CA::OGL::Context::paint_region((uint64_t)v101, (uint64_t)v106, &v141, 1);
      _KR10_4 = v122.i32[0];
      __asm
      {
        FCVT            D0, H0
        FCVT            D1, H1
      }
      _Q1.f64[1] = _D0;
      float64x2_t v114 = vmulq_f64(_Q1, v120);
      *(float32x2_t *)&v114.f64[0] = vcvt_f32_f64(v114);
      uint16x4_t v122 = (uint16x4_t)vcvt_f16_f32((float32x4_t)v114);
      CA::Shape::unref(v106);
    }
    goto LABEL_77;
  }
  if (byte_1EB2ACC68) {
    CA::WindowServer::IOMFBFlipBook::draw_debug_overlay(a1, a2, *(void *)a2, v137);
  }
  double Width = (double)IOSurfaceGetWidth(*(IOSurfaceRef *)a2);
  v31.n128_f64[0] = (double)IOSurfaceGetHeight(*(IOSurfaceRef *)a2);
  buf[0] = 0uLL;
  buf[1].n128_f64[0] = Width;
  buf[1].n128_f64[1] = v31.n128_f64[0];
  CA::IOMobileFramebuffer::swap_set_layer((CA::IOMobileFramebuffer *)(v5 + 25568), 0, *(IOSurfaceRef *)a2, (const Rect *)buf, v138, 0, v31, v32, v33, v34, v35, v36, v37, v38);
LABEL_38:
  uint64_t v56 = -2;
  do
  {
    memset(buf, 0, sizeof(buf));
    *(_OWORD *)&v124[0].top = 0u;
    long long v125 = 0u;
    CA::IOMobileFramebuffer::swap_set_layer((CA::IOMobileFramebuffer *)v9, (v56 + 3), 0, (const Rect *)buf, v124, 0, (__n128)0, v20, v21, v22, v23, v24, v25, v26);
  }
  while (!__CFADD__(v56++, 1));
  unsigned __int32 v58 = IOMobileFramebufferSwapEnd();
  IOSurfaceID ID = IOSurfaceGetID(*(IOSurfaceRef *)a2);
  kdebug_trace();
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    __int32 v60 = x_log_category_flipbook;
    if (os_log_type_enabled((os_log_t)x_log_category_flipbook, OS_LOG_TYPE_DEFAULT))
    {
      unsigned __int32 v61 = *(_DWORD *)(a2 + 48);
      buf[0].n128_u32[0] = 67109632;
      buf[0].n128_u32[1] = ID;
      buf[0].n128_u16[4] = 1024;
      *(unsigned __int32 *)((char *)&buf[0].n128_u32[2] + 2) = v61;
      buf[0].n128_u16[7] = 1024;
      buf[1].n128_u32[0] = v58;
      _os_log_impl(&dword_184668000, v60, OS_LOG_TYPE_DEFAULT, "swapped surface 0x%x in swap %u, ret %u", (uint8_t *)buf, 0x14u);
    }
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  __int16 v63 = (char *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0xC8uLL, 0x743898A5uLL);
  __int32 v64 = v63;
  if (v63)
  {
    *((void *)v63 + 13) = 0;
    *((void *)v63 + 10) = 0;
    *((void *)v63 + 9) = v63 + 80;
    *((void *)v63 + 11) = 0;
    *((void *)v63 + 12) = v63 + 104;
    *((void *)v63 + 14) = 0;
    *((void *)v63 + 15) = v63 + 152;
    *((void *)v63 + 16) = v63 + 152;
    *((void *)v63 + 17) = v63 + 152;
    *((void *)v63 + 18) = 4;
  }
  *(_DWORD *)__int16 v63 = *(_DWORD *)(a2 + 48);
  *(_WORD *)(v63 + 197) &= ~0x100u;
  __int16 v65 = (os_unfair_lock_s *)(*(void *)(a1 + 16) + 25940);
  os_unfair_lock_lock(v65);
  double v66 = *(void **)(a1 + 16);
  __int16 v67 = (void *)v66[3244];
  unint64_t v68 = v66[3245];
  if ((unint64_t)v67 >= v68)
  {
    uint64_t v70 = v66[3243];
    uint64_t v71 = ((uint64_t)v67 - v70) >> 3;
    if ((unint64_t)(v71 + 1) >> 61) {
      abort();
    }
    uint64_t v72 = v68 - v70;
    uint64_t v73 = v72 >> 2;
    if (v72 >> 2 <= (unint64_t)(v71 + 1)) {
      uint64_t v73 = v71 + 1;
    }
    if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v74 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v74 = v73;
    }
    int8x16_t v143 = v66 + 3245;
    if (v74) {
      unint64_t v74 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Display::DisplayLinkItem *>>(v74);
    }
    else {
      uint64_t v75 = 0;
    }
    double v76 = (void *)(v74 + 8 * v71);
    unint64_t v77 = v74 + 8 * v75;
    buf[1].n128_u64[1] = v77;
    *double v76 = v64;
    unint64_t v69 = (unint64_t)(v76 + 1);
    buf[1].n128_u64[0] = (unint64_t)(v76 + 1);
    int v78 = (void *)v66[3244];
    uint64_t v79 = (void *)v66[3243];
    if (v78 == v79)
    {
      __n128 v81 = (__n128)vdupq_n_s64((unint64_t)v78);
    }
    else
    {
      do
      {
        uint64_t v80 = *--v78;
        *int v78 = 0;
        *--double v76 = v80;
      }
      while (v78 != v79);
      __n128 v81 = *(__n128 *)(v66 + 3243);
      unint64_t v77 = buf[1].n128_u64[1];
      unint64_t v69 = buf[1].n128_u64[0];
    }
    v66[3243] = v76;
    v66[3244] = v69;
    *(__n128 *)((char *)buf + 8) = v81;
    unint64_t v82 = v66[3245];
    v66[3245] = v77;
    buf[1].n128_u64[1] = v82;
    buf[0].n128_u64[0] = v81.n128_u64[0];
    std::__split_buffer<std::unique_ptr<CA::WindowServer::IOMFBDisplay::FrameInfo>>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    *__int16 v67 = v64;
    unint64_t v69 = (unint64_t)(v67 + 1);
  }
  v66[3244] = v69;
  os_unfair_lock_unlock(v65);
}

void CA::WindowServer::IOMFBFlipBook::draw_debug_overlay(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  v35[122] = *MEMORY[0x1E4F143B8];
  int v8 = (void *)MEMORY[0x185324A30]();
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  uint64_t v10 = *(void *)v9;
  *(_WORD *)(v10 + 832) = *(_WORD *)(*(void *)v9 + 832) | 2;
  (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)v10 + 32))(v10, a3, 0, 0);
  *(void *)(v10 + 192) = CA::WindowServer::Display::ogl_display(*(CA::WindowServer::Display **)(a1 + 16));
  v35[0] = 0;
  v35[61] = 0;
  CA::OGL::Context::prepare_context(v10, (uint64_t)v35);
  v34[4] = 0x3C003C003C003C00;
  memset(&v34[5], 0, 24);
  v34[0] = 0;
  v34[8] = 0x4013F800000;
  v34[2] = 0;
  void v34[3] = &CA::identity_transform;
  v34[1] = &CA::Shape::_infinite_shape;
  (*(void (**)(uint64_t, void *))(*(void *)v10 + 1008))(v10, v34);
  CFStringRef v11 = CACreateDateStringFromHostContinuousTime(*(void *)(a2 + 40), @"HH:mm:ss");
  __int16 v33 = 0;
  uint64_t v32 = 0;
  __int16 v31 = 0;
  memset(__str, 0, sizeof(__str));
  CCFStringRef String = CA_CFStringGetCString(v11, (char *)&v32, 10);
  snprintf((char *)__str, 0x32uLL, "TIME %s  SWAP %x", CString, a4);
  v28[0] = xmmword_184997D50;
  v28[1] = 0u;
  double v28[2] = xmmword_184997D60;
  memset(&v28[3], 0, 32);
  v28[5] = xmmword_184997D50;
  v28[6] = 0u;
  v28[7] = xmmword_184997D60;
  __asm { FMOV            V0.2D, #1.0 }
  v28[8] = _Q0;
  float v18 = (float)*(int *)(*(void *)(a1 + 16) + 176);
  *(float *)&double v19 = (float)(v18 + (float)((float)strnlen((const char *)__str, 0x32uLL) * -28.0)) * 0.5;
  int v20 = (int)*(float *)&v19;
  __n128 v21 = *(void **)(a1 + 304);
  if (!v21) {
    operator new();
  }
  uint64_t v29 = 0;
  v21[8] = v21[6];
  v21[10] = 0x3C002A662A662A66;
  uint64_t v22 = *(void *)(a1 + 304);
  *(void *)(v22 + 16) = 0;
  v27[0] = v18;
  v27[1] = 34.0;
  CA::OGL::DebugRenderer::draw_rectangle_with_fill(v22, v27, v19);
  uint64_t v23 = *(void *)(a1 + 304);
  *(void *)(v23 + 24) = 0x4200000041E00000;
  *(void *)(v23 + 80) = 0x3C00366636663666;
  uint64_t v24 = *(void *)(a1 + 304);
  *(float *)(v24 + 16) = (float)v20;
  *(_DWORD *)(v24 + 20) = 1065353216;
  size_t v25 = strlen((const char *)__str);
  CA::OGL::DebugRenderer::draw_string(v24, (const char *)__str, v25);
  CA::OGL::DebugRenderer::render(*(void *)(a1 + 304), (CA::OGL::Context *)v10, (const CA::Transform *)v28, 0);
  (*(void (**)(uint64_t, void *))(*(void *)v10 + 1016))(v10, v34);
  (*(void (**)(uint64_t))(*(void *)v10 + 416))(v10);
  (*(void (**)(uint64_t, void, void, void))(*(void *)v10 + 32))(v10, 0, 0, 0);
  *(_WORD *)(v10 + 832) &= ~2u;
  *(void *)(v10 + 192) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 40))(v10, a3);
  if (v11) {
    CFRelease(v11);
  }
  for (uint64_t i = 61; i != -61; i -= 61)
  {
    if (v35[i]) {
      __assert_rtn("~ContextState", "ogl-context.h", 551, "!next && \"Imbalanced ContextState push/pop\"");
    }
  }
}

void CA::WindowServer::IOMFBFlipBook::Blitter::blit(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int *a4)
{
  size_t v7 = (void *)MEMORY[0x185324A30]();
  int v8 = (uint64_t *)(*(uint64_t (**)(void))(**(void **)a1 + 88))();
  if (a3[2] != a4[2]) {
    __assert_rtn("blit", "windowserver-iomfb-flipbook.cpp", 611, "src_bounds.w == dst_bounds.w");
  }
  if (a3[3] != a4[3]) {
    __assert_rtn("blit", "windowserver-iomfb-flipbook.cpp", 612, "src_bounds.h == dst_bounds.h");
  }
  uint64_t v9 = *v8;
  uint64_t v10 = (CA::Shape *)CA::Shape::new_shape(a4);
  CFStringRef v11 = (CA::Shape *)CA::Shape::new_shape(a3);
  CA::OGL::Context::copy_surface_region(v9);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 408))(v9, 1);
  CA::Shape::unref(v10);
  CA::Shape::unref(v11);
}

uint64_t CA::IOMobileFramebuffer::swap_set_blit(CA::IOMobileFramebuffer *this, __IOSurface *a2, const CA::Rect *a3, const CA::Rect *a4)
{
  return IOMobileFramebufferSwapSetBlit();
}

void CA::WindowServer::IOMFBFlipBook::Blitter::present_to(unsigned __int8 *a1, uint64_t a2)
{
  int v4 = (void *)MEMORY[0x185324A30]();
  uint64_t v5 = (void *)(*(uint64_t (**)(void))(**(void **)a1 + 88))();
  uint64_t v6 = *v5;
  (*(void (**)(void, uint64_t, void, void, void, void, void))(*(void *)*v5 + 720))(*v5, a2, *(void *)&a1[8 * a1[8] + 32], 0, 0, 0, 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 408))(v6, 1);
}

uint64_t std::__split_buffer<std::unique_ptr<CA::WindowServer::IOMFBDisplay::FrameInfo>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    std::unique_ptr<CA::WindowServer::IOMFBDisplay::FrameInfo>::reset[abi:nn180100]((CA::WindowServer::IOMFBDisplay::FrameInfo **)(i - 8), 0);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t CA::WindowServer::FlipBook::renderer(CA::WindowServer::FlipBook *this)
{
  return *(void *)(*((void *)this + 2) + 312);
}

uint64_t CA::WindowServer::IOMFBFlipBook::set_power_saving_state(CA::WindowServer::IOMFBFlipBook *this, unsigned int a2)
{
  return CA::WindowServer::IOMFBDisplay::set_aot_power_saving_mode_enabled(*((void *)this + 2), a2);
}

void CA::WindowServer::IOMFBFlipBook::resume_completed(CA::WindowServer::IOMFBFlipBook *this)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  int v1 = (unsigned __int8 *)*((void *)this + 37);
  uint64_t v2 = *(_DWORD **)(*(void *)v1 + 16);
  uint64_t v3 = v1[8];
  uint8_t v1[8] = (v3 & 1) == 0;
  uint64_t v4 = *(void *)&v1[8 * v3 + 32];
  unsigned int v5 = v2[43];
  v8[0] = v2[42];
  v8[1] = v5;
  unsigned int v6 = v2[44];
  LODWORD(v2) = v2[45];
  _OWORD v8[2] = v6;
  v8[3] = v2;
  v7[0] = v8[0];
  v7[1] = v5;
  unint64_t v7[2] = v6;
  _OWORD v7[3] = v2;
  CA::WindowServer::IOMFBFlipBook::Blitter::blit((uint64_t)v1, v4, v8, v7);
  uint8_t v1[8] = v3;
}

void CA::WindowServer::IOMFBFlipBook::resume_frame(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    uint64_t v4 = x_log_category_flipbook;
    if (os_log_type_enabled((os_log_t)x_log_category_flipbook, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a2 + 32);
      uint64_t v6 = *(void *)(a2 + 40);
      *(_DWORD *)long long buf = 134218240;
      uint64_t v25 = v5;
      __int16 v26 = 2048;
      uint64_t v27 = v6;
      _os_log_impl(&dword_184668000, v4, OS_LOG_TYPE_DEFAULT, "resume frame seed %llu timestamp %llu", buf, 0x16u);
    }
  }
  if (use_dcp_blitter(void)::once[0] != -1) {
    dispatch_once(use_dcp_blitter(void)::once, &__block_literal_global_5953);
  }
  if (use_dcp_blitter(void)::ret)
  {
    uint64_t v7 = *(void *)(a1 + 296);
    uint64_t v8 = *(void *)(a2 + 8);
    int v9 = *(_DWORD *)(a2 + 76);
    int v10 = *(_DWORD *)(a2 + 80);
    uint64_t v21 = 0;
    int v22 = v9;
    int v23 = v10;
    uint64_t v18 = *(void *)(a2 + 68);
    int v19 = v9;
    int v20 = v10;
    CFStringRef v11 = (unsigned int *)&v21;
    int v12 = (unsigned int *)&v18;
  }
  else
  {
    int8x16_t v13 = *(_DWORD **)(a1 + 16);
    uint64_t v7 = *(void *)(a1 + 296);
    uint64_t v8 = *(void *)(a2 + 24);
    int v14 = v13[43];
    v17[0] = v13[42];
    v17[1] = v14;
    int v15 = v13[44];
    LODWORD(v13) = v13[45];
    void v17[2] = v15;
    v17[3] = v13;
    v16[0] = v17[0];
    v16[1] = v14;
    void v16[2] = v15;
    v16[3] = v13;
    CFStringRef v11 = v17;
    int v12 = v16;
  }
  CA::WindowServer::IOMFBFlipBook::Blitter::blit(v7, v8, v11, v12);
}

uint64_t CA::WindowServer::IOMFBFlipBook::suspended_on_frame(uint64_t this, char a2)
{
  uint64_t v2 = *(void *)(this + 296);
  if (v2) {
    *(unsigned char *)(v2 + 8) = a2;
  }
  return this;
}

void CA::WindowServer::IOMFBFlipBook::_resume(uint64_t a1, int a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    uint64_t v4 = x_log_category_flipbook;
    if (os_log_type_enabled((os_log_t)x_log_category_flipbook, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v5) = 0;
      _os_log_impl(&dword_184668000, v4, OS_LOG_TYPE_DEFAULT, "IOMFBFlipBook::_resume", (uint8_t *)&v5, 2u);
    }
  }
  int v6 = 0;
  uint64_t v5 = 0;
  CA::WindowServer::FlipBookStateChangeNotifier::FlipBookStateChangeNotifier((uint64_t)&v5, a2);
  if ((a2 & 0xFF00) == 0x100) {
    CA::WindowServer::IOMFBDisplay::set_aot_service_property(*(CA::WindowServer::IOMFBDisplay **)(a1 + 16), 1);
  }
  CA::WindowServer::FlipBook::_resume((uint64_t *)a1, a2 & 0xFFFFFF);
  if ((_BYTE)v6)
  {
    BYTE4(v5) = 0;
    CA::Render::post_notification(0x3Du, 0, (uint64_t)&v5, 0);
  }
}

uint64_t CA::WindowServer::FlipBookStateChangeNotifier::FlipBookStateChangeNotifier(uint64_t a1, __int16 a2)
{
  *(unsigned char *)(a1 + 8) = 0;
  int v3 = HIBYTE(a2) - a2;
  if (v3 < 0) {
    int v3 = a2 - HIBYTE(a2);
  }
  if (v3 == 1)
  {
    *(_DWORD *)a1 = 0;
    *(_WORD *)(a1 + 4) = 1;
    *(unsigned char *)(a1 + 6) = HIBYTE(a2) == 1;
    *(unsigned char *)(a1 + 8) = 1;
    CA::Render::post_notification(0x3Du, 0, a1, 0);
  }
  return a1;
}

void CA::WindowServer::IOMFBFlipBook::_suspend(uint64_t a1, __int16 a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    uint64_t v4 = x_log_category_flipbook;
    if (os_log_type_enabled((os_log_t)x_log_category_flipbook, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v5) = 0;
      _os_log_impl(&dword_184668000, v4, OS_LOG_TYPE_DEFAULT, "IOMFBFlipBook::_suspend", (uint8_t *)&v5, 2u);
    }
  }
  int v6 = 0;
  uint64_t v5 = 0;
  CA::WindowServer::FlipBookStateChangeNotifier::FlipBookStateChangeNotifier((uint64_t)&v5, a2);
  CA::WindowServer::FlipBook::_suspend(a1);
  CA::WindowServer::IOMFBDisplay::set_aot_service_property(*(CA::WindowServer::IOMFBDisplay **)(a1 + 16), 0);
  if ((_BYTE)v6)
  {
    BYTE4(v5) = 0;
    CA::Render::post_notification(0x3Du, 0, (uint64_t)&v5, 0);
  }
}

void CA::WindowServer::IOMFBFlipBook::_exit(uint64_t a1, __int16 a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    uint64_t v4 = x_log_category_flipbook;
    if (os_log_type_enabled((os_log_t)x_log_category_flipbook, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v12) = 0;
      _os_log_impl(&dword_184668000, v4, OS_LOG_TYPE_DEFAULT, "IOMFBFlipBook::_exit", (uint8_t *)&v12, 2u);
    }
  }
  int v13 = 0;
  uint64_t v12 = 0;
  CA::WindowServer::FlipBookStateChangeNotifier::FlipBookStateChangeNotifier((uint64_t)&v12, a2);
  CA::WindowServer::FlipBook::_exit(a1);
  uint64_t v5 = *(void *)(a1 + 296);
  if (v5)
  {
    uint64_t v6 = 0;
    char v7 = 1;
    do
    {
      char v8 = v7;
      uint64_t v9 = v5 + 8 * v6;
      int v10 = *(const void **)(v9 + 16);
      if (v10)
      {
        CFRelease(v10);
        CFStringRef v11 = (uint64_t *)(*(uint64_t (**)(void))(**(void **)v5 + 88))();
        CA::OGL::Context::release_surface(*v11, *(void *)(v9 + 32));
        *(void *)(v9 + 16) = 0;
        *(void *)(v9 + 32) = 0;
      }
      char v7 = 0;
      uint64_t v6 = 1;
    }
    while ((v8 & 1) != 0);
  }
  CA::WindowServer::IOMFBDisplay::set_aot_service_property(*(CA::WindowServer::IOMFBDisplay **)(a1 + 16), 0);
  if ((_BYTE)v13)
  {
    BYTE4(v12) = 0;
    CA::Render::post_notification(0x3Du, 0, (uint64_t)&v12, 0);
  }
}

void CA::WindowServer::IOMFBFlipBook::_enter(uint64_t a1, __int16 a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    uint64_t v4 = x_log_category_flipbook;
    if (os_log_type_enabled((os_log_t)x_log_category_flipbook, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v16) = 0;
      _os_log_impl(&dword_184668000, v4, OS_LOG_TYPE_DEFAULT, "IOMFBFlipBook::_enter", (uint8_t *)&v16, 2u);
    }
  }
  int v17 = 0;
  uint64_t v16 = 0;
  __int16 v5 = a2;
  CA::WindowServer::FlipBookStateChangeNotifier::FlipBookStateChangeNotifier((uint64_t)&v16, a2);
  if ((a2 & 0xFF00) == 0x100)
  {
    CA::IOMobileFramebuffer::swap_wait((CA::IOMobileFramebuffer *)(*(void *)(a1 + 16) + 25568));
    CA::WindowServer::IOMFBDisplay::set_aot_service_property(*(CA::WindowServer::IOMFBDisplay **)(a1 + 16), 1);
  }
  uint64_t v7 = *(void *)(a1 + 296);
  if (v7)
  {
    if (CADeviceUseCIF10::once != -1) {
      dispatch_once(&CADeviceUseCIF10::once, &__block_literal_global_12019);
    }
    uint64_t v8 = 0;
    if (CADeviceUseCIF10::enable_cif10) {
      uint64_t v9 = 1999843442;
    }
    else {
      uint64_t v9 = 1111970369;
    }
    uint64_t v10 = *(void *)(*(void *)v7 + 16);
    char v11 = 1;
    do
    {
      char v12 = v11;
      uint64_t v13 = v7 + 8 * v8;
      *(void *)(v13 + 16) = CA::Render::create_iosurface_with_pixel_format((CA::Render *)v9, *(_DWORD *)(v10 + 176), *(_DWORD *)(v10 + 180), 4u, 0, @"CA Server Flipbook Framebuffer", v6);
      uint64_t v14 = **(void **)(*(uint64_t (**)(void))(**(void **)v7 + 88))();
      uint64_t v15 = (*(uint64_t (**)(void))(v14 + 672))();
      char v11 = 0;
      *(void *)(v13 + 32) = v15;
      uint64_t v8 = 1;
    }
    while ((v12 & 1) != 0);
  }
  CA::WindowServer::FlipBook::_enter(a1, v5);
  if ((_BYTE)v17)
  {
    BYTE4(v16) = 0;
    CA::Render::post_notification(0x3Du, 0, (uint64_t)&v16, 0);
  }
}

void CA::WindowServer::IOMFBFlipBook::~IOMFBFlipBook(CA::WindowServer::IOMFBFlipBook *this)
{
  CA::WindowServer::IOMFBFlipBook::~IOMFBFlipBook(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();

  malloc_zone_free(malloc_zone, this);
}

{
  uint64_t v2;
  CA::OGL::DebugRenderer *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  *(void *)this = &unk_1ED023E00;
  CA::Render::remove_observer(0x47u, 0, (uint64_t)CA::WindowServer::IOMFBFlipBook::get_display_debug_properties, (uint64_t)this);
  uint64_t v2 = *((void *)this + 37);
  if (v2) {
    MEMORY[0x185323DC0](v2, 0x1020C4007B5AB7FLL);
  }
  int v3 = (CA::OGL::DebugRenderer *)*((void *)this + 38);
  if (v3)
  {
    CA::OGL::DebugRenderer::~DebugRenderer(v3);
    MEMORY[0x185323DC0]();
  }
  *(void *)this = &unk_1ED027220;
  CA::WindowServer::FlipBook::free_surfaces((os_unfair_lock_s *)this);
  uint64_t v4 = (void *)*((void *)this + 19);
  if (v4)
  {
    *((void *)this + 20) = v4;
    operator delete(v4);
  }
  __int16 v5 = (void *)*((void *)this + 16);
  if (v5)
  {
    *((void *)this + 17) = v5;
    operator delete(v5);
  }
  CFStringRef v6 = (void *)*((void *)this + 13);
  if (v6)
  {
    *((void *)this + 14) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 10);
  if (v7)
  {
    *((void *)this + 11) = v7;
    operator delete(v7);
  }
}

void CA::WindowServer::IOMFBFlipBook::get_display_debug_properties(CA::WindowServer::IOMFBFlipBook *this, CA::Render::Object *a2, __CFDictionary **a3, void *a4)
{
  if (*(_DWORD *)a3 == *(_DWORD *)(*((void *)a2 + 2) + 24))
  {
    if (*((_DWORD *)a2 + 73)) {
      __int16 v5 = "DirtyRegionOnly";
    }
    else {
      __int16 v5 = "FullSize";
    }
    CA_CFDictionarySetCString(a3[1], @"flipBookType", v5);
    if (use_dcp_blitter(void)::once[0] != -1) {
      dispatch_once(use_dcp_blitter(void)::once, &__block_literal_global_5953);
    }
    if (use_dcp_blitter(void)::ret)
    {
      CFStringRef v6 = a3[1];
      uint64_t v7 = (const void *)*MEMORY[0x1E4F1CFD0];
      CFDictionarySetValue(v6, @"flipBookUsesDCPBlitter", v7);
    }
  }
}